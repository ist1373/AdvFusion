0	NewSTM creates a new transaction .
1	first returns the first revision of the first revision .
2	cmps returns a copy of the revision set .
3	NewSTMRepeatable creates a new transaction .
4	NewSTMSerializable creates a new TSM serialized transaction .
5	NewSTMReadCommitted creates a new transaction .
6	NewCertPool creates a new certificate pool
7	NewCert creates a new TLS certificate
8	Pause the peer
9	Resume resets the peer .
10	pick returns a channel that can be sent to the peer .
11	post sends a request to the snapshot
12	newTxnResp creates a txnResp .
13	applyCompare compares two values .
14	OpCompact creates a new compact operation .
15	NewPriorityQueue returns a new PriorityQueue
16	Enqueue adds a queue to the queue .
17	NewLeaderStats returns a new LeaderStats instance
18	Succ implements the FollowerStats interface .
19	Fail implements the FollowerStats interface .
20	delete removes the watcher from the watcher .
21	startStreamWriter starts a streamWriter .
22	checkStreamSupport checks if a stream is supported .
23	maybeUpdate returns true if the current position is in the current position .
24	IsPaused returns true if the progress is paused
25	needSnapshotAbort returns true if there is a snapshot .
26	add adds inflight to the buffer .
27	growBuf grows the buffer buffer .
28	freeTo removes the buffer from the buffer .
29	SaveDBFrom implements the Snapshot interface .
30	DBFilePath returns the path of the snapshot .
31	Set sets the string value
32	NewUniqueStringsValue returns a new UniqueStringsValue
33	UniqueStringsFromFlag returns a slice of strings from a flagSet
34	UniqueStringsMapFromFlag returns a map of string values from the flagSet
35	Percentiles returns the percentiles of the given slice .
36	VerifyBootstrap verifies that the configuration is valid .
37	VerifyJoinExisting checks if the cluster exists .
38	hasLocalMember checks if the local peer is local
39	listenchesMatchesCluster is used to authenticate the cluster
40	ReqTimeout returns the timeout for the server .
41	getStatus returns the status of the raft .
42	GetDefaultHost returns the default host name
43	getIfaceAddr returns the interface address for the given interface .
44	getIfaceLink returns the interface for the given interface .
45	 ls command
46	printLs prints a list of ls .
47	rPrint prints the current node
48	NewLeaseRenewerCommand returns a new cobra . Command instance
49	Read returns a snapshot of the snapshot .
50	GetCipherSuite returns the cipher suite for the given string .
51	post sends a request to the pipeline
52	send sends a message to the raft .
53	sendHeartbeat sends a heartbeat to the raft .
54	bcastAppend sends a request to the raft .
55	bcastHeartbeat sends a heartbeat to the raft .
56	tickElection is used to tick the leader
57	tickHeartbeat is used to tick the heartbeat interval
58	stepCandidate verifies that the proposal is valid .
59	restore restores the snapshot from the snapshot .
60	promptable returns true if the raft is currently active .
61	checkQuorumActive returns true if the raft is active .
62	increaseUncommittedSize returns true if the given slice is uncommitted .
63	reduceUncommittedSize reduces the number of items in the raft .
64	newPeriodic creates a new Periodic .
65	Pause pauses the periodic pause .
66	Resume resume the period .
67	Lock implements the Mutex interface .
68	NewLocker returns a new Lock .
69	NewFIFOScheduler returns a new Scheduler
70	Schedule implements the scheduler interface .
71	Stop stops the fifo .
72	NewServer creates a new server .
73	StartServe starts the server
74	Stop stops the grpc server
75	Transport sends a request to the server .
76	RegisterInterruptHandler registers a new InterruptHandler .
77	HandleInterrupts handles Interruptions .
78	OpGet returns an op with the given key .
79	OpDelete deletes the given key .
80	OpPut creates a new op .
81	OpTxn creates a new opn .
82	WithFromKey returns a OpOption that sets the key .
83	withTop returns a list of options with the specified order .
84	Exist checks if a directory exists
85	searchIndex returns the index of the given index .
86	isValidSeq returns true if the given name is valid .
87	NewListener creates a new TLS listener
88	caFiles returns the list of trusted CA files .
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a tls . Config . Config .
91	newTLSKeepaliveListener creates a new TLS listener .
92	applyV2Request applies the request to the server .
93	NewRoleCommand returns a new cobra command
94	roleAddCommandFunc runs a role add command
95	roleGetCommandFunc runs the command for a role
96	roleGrantPermissionCommandFunc runs the role grant command .
97	role revoke permission
98	NewCluster creates a new cluster .
99	NewClusterByConfig creates a new cluster .
100	HTTPMembers returns all the members of the cluster
101	waitLeader is used to wait for a leader
102	waitNoLeader is used to wait for a leader
103	isMembersEqual returns true if all the members of the given member .
104	listenGRPC listens for the grpc server .
105	NewClientV3 creates a new client .
106	Clone creates a new member .
107	Close closes the server
108	Stop stops the server
109	checkLeaderTransition checks if the leader is leader transition
110	Restart a member
111	Terminate terminates a member .
112	Metric returns the metric for the given metric name .
113	InjectPartition is part of the member interface .
114	RecoverPartition attempts to recover the given partition .
115	NewClusterV3 creates a new instance of ClusterV3 .
116	Parse with defaults
117	Parse parses the JWT options
118	Key implements jwt . Key .
119	fill fills in the header .
120	add adds a new watch .
121	Watch implements the WatchStream interface .
122	newFileEncoder returns a new encoder .
123	purgeFile removes a directory from the directory .
124	Set sets the string value .
125	NewStringsValue returns a new StringsValue
126	StringsFromFlag returns a slice of strings from a flagSet
127	Cluster returns a string representation of a cluster
128	NewPageWriter returns a new PageWriter .
129	watch returns a watcher for the given key .
130	notify sends an event to the watcher .
131	clone returns a new watcher .
132	isHidden returns true if the given keyPath matches the given path .
133	createEtcdLogFile creates a new etcd log file
134	runEtcd runs the Etcd command
135	stopEtcd shuts down the etcd server
136	handle_SIGIT_ANDOP is used to stop the server .
137	LimitListener creates a net . Listener .
138	allowMethod returns true if the given method is allowed for the given method
139	NewWatchServer returns a new WatchServer .
140	FiltersFromRequest returns a list of filters from a watch .
141	newPipelineHandler creates a new http handler .
142	checkClusterCompatibilityFromHeader checks if the given header is valid
143	KeyExists returns the version of the key .
144	KeyMissing returns a copy of the key .
145	ValidateSecureEndpoints validates the TLS endpoint
146	putNewKV creates a new KV v3 .
147	newUniqueEphemeralKey creates a new ephemeralKey .
148	NewUpdateDirCommand returns a new instance of the command
149	updatedDirCommandFunc is used to update the keys for a key
150	handleBackup handles the backup snapshot .
151	saveDB saves the database to the database .
152	NewWatchCommand creates a new cobra command
153	NewV3 returns a new instance of V3
154	Save saves the snapshot to disk .
155	Status returns the status of the snapshot .
156	Restore is part of the EtcdManager interface .
157	NewAuthStore creates a new AuthStore
158	NewTokenProvider creates a new token provider
159	MendPeer implements the Transport interface for Transport .
160	removePeer removes a peer from the transport
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault attempts to resolve a TCP address from the given address .
163	resolveTCPAddrs takes a list of URLs and converts it into a slice of URLs .
164	urlsEqual returns true if two URLs are equal .
165	URLStringsEqual returns true if two strings are equal .
166	NewLeaseCommand returns a new cobra command
167	NewLeaseGrantCommand returns a new cobra command
168	Lease grant command
169	NewLeaseRevokeCommand returns a new cobra command
170	leaseRevokeCommandFunc is used to revoke a lease .
171	NewLeaseTimeToLiveCommand returns a new cobra command
172	leaseTimeToLiveCommandFunc is used to wait for a lease to be locked
173	NewLeaseListCommand returns a Command instance
174	leaseListCommandFunc is part of the Command interface .
175	NewLeaseKeepAliveCommand returns a new cobra command
176	leaseKeepAliveCommandFunc is used to acquire a lease for lease .
177	NewAlarmCommand returns a new cobra command
178	armarmDisarmCommandFunc is part of the Command interface .
179	armarmListCommandFunc is a convenience function that runs the command line command .
180	Flags returns the flags of the Etcd field .
181	EmbedConfig returns the embeds config .
182	PProfHandlers returns a map of Pprof handlers for PProfiles .
183	NewBackendQuota returns a new BackendQuota
184	NewClusterProxy creates a new cluster proxy
185	NewHandler returns a new http . Handler .
186	TimeToLiveHTTP implements the LeaseClient interface .
187	newWatcherBatch creates a new watcher .
188	add adds a new watcher to the watcher .
189	contains returns true if the given key exists .
190	delete deletes the given watcher .
191	choose returns a new watcher .
192	watchSetByKey returns a watcherSet for a given key .
193	Compare compares two intervals .
194	next returns the next interval .
195	updateMax updates the interval .
196	visit returns true if the interval is in the tree .
197	Delete removes an interval from the tree .
198	Insert inserts a new interval .
199	rotateLeft rotates the interval .
200	replaceParent replaces an existing interval .
201	MaxHeight returns the maximum height of the interval .
202	Visit visits the interval tree .
203	find returns the first occurrence of ivl .
204	Find returns the value for the given interval .
205	Intersects returns true if the interval is in the tree .
206	Contains returns true if the interval is contained within the interval .
207	Bub returns a slice of IntervalValue
208	Union inserts an interval into the tree .
209	NewExactReadCloser creates a new io . ReadCloser .
210	NewElection returns a new Election
211	ResumeElection returns a new Election instance
212	Proclaim is part of the ElectionService interface .
213	Resign resets the leader .
214	Leader returns the current leader .
215	Observe returns a channel for the given context .
216	check implements the quotaAlarator interface .
217	NewExecWatchCommand creates a new exec command
218	execWatchCommandFunc is used to watch the command
219	NewListener creates a new TCP listener .
220	NewRoundTripper creates a new http . RoundTripper
221	createPostRequest creates a new http request
222	checkPostResponse is used to check the status of a post request
223	serverVersion returns the version of the server .
224	checkVersionCompatibility returns the version of the local version .
225	setPeerURLsHeader sets the peerURLs header
226	addRemoteFromRequest adds a remote peer from the transport
227	NewKeysAPIWithPrefix returns a new http . KeysAPI .
228	TTLDuration returns the TTL of the TTL
229	SetPflagsFromEnv sets the flags for the given prefix .
230	FlagToEnv returns a string representation of a flag .
231	Expect returns the excerpt of the text .
232	passConfChange returns true if the given entry is a change .
233	printInternalRaftRequest prints the InternalRaftRequest
234	listEntriesType lists all entries in the given stream .
235	newLog creates a new raft log .
236	newLogWithSize creates a new raft log entry .
237	findConflict finds the conflict in the raft log .
238	nextEnts returns the next entry in the raft log .
239	allEntries returns all entries in the raft log .
240	slice returns a slice of entries in the raft .
241	NewSession creates a new session .
242	Close closes the session .
243	WithTTL sets the TTL of the session
244	WithLease sets the lease ID
245	addRequest adds a request to the queue .
246	recvAck is used to receive an incoming message .
247	advance returns a slice of the read status for the given message .
248	lastPendingRequestCtx returns the last pending request context
249	Start starts the Etcd server
250	start starts the EtcdServer
251	Process processes the raft server
252	ReportSnapshot implements the EtcdServer interface .
253	MoveLeader implements the EtcdServer interface .
254	TransferLeadership implements the EtcdServer interface for EtcdServer .
255	configure is used to configure the raft configuration
256	sync synchronizes the EtcdServer .
257	publish is part of the EtcdServer interface .
258	applyEntryNormal applies an entry to the raft server .
259	applyConfChange applies the configuration changes to the given configuration .
260	monitorVersions is part of the EtcdServer interface .
261	goAttach attaches a function to the server .
262	NewRoundrobinBalanced returns a new Pickrobin .
263	Pick implements the rrancer interface .
264	NewTLSListener creates a new TLS listener
265	acceptLoop is called when the listener is closed .
266	SetEndpoints sets the endpoint s endpoints
267	Target returns the target endpoint
268	Target returns the target URL for the given endpoint .
269	Build builds a Resolver for the given target .
270	Handle implements the http . Handler interface .
271	NewElectionCommand returns a cobra command
272	nodeToMember converts a node to a member .
273	NewTmpBackend creates a new backend .
274	newRevision creates a new revision .
275	Run starts the revision .
276	Pause pauses the revision .
277	Resume resumes the revision .
278	voteRespMsgType returns the message type for the message type .
279	DescribeMessage returns a string representation of a message .
280	DescribeEntry returns the description of the entry .
281	DescribeEntries returns a string representation of the given entry .
282	SetLogger sets the logger
283	GetLogger returns the Logger interface
284	maybeFirstIndex returns the first index of the last index .
285	maybeLastIndex returns the last index of the last index .
286	maybeTerm returns the term for the given index .
287	shrinkEntriesArray truncates the list of entries .
288	SaveSnap saves a snapshot .
289	New creates a new client
290	NewCtxClient creates a new client
291	NewFromURL returns a new Client instance
292	Close closes the client .
293	Endpoints returns the endpoints of the client
294	SetEndpoints sets endpoint
295	Sync synchronously sends a client to the client .
296	dialSetupOpts is used to dial a DialOpts .
297	Dial connects to the given endpoint .
298	dialWithBalancer connects to the given endpoint .
299	dial connects to the client .
300	WithRequireLeader returns a context with the given context .
301	roundRobinQuorumBackoff returns the backoff backoff backoff function .
302	isHaltErr returns true if err is nil .
303	NewLease creates a new lease .
304	IsCreate returns true if the event is created
305	Err implements the WatchResponse interface .
306	IsProgressNotify returns true if the response is a progress notification .
307	RequestProgress implements the watcher interface .
308	nextResume returns the next resuming stream .
309	dispatchEvent is used to dispatch events
310	broadcastResponse returns true if the watch is subscribed .
311	unicastResponse returns true if the watch is subscribed .
312	joinSubstreams is part of the WatchGrpcStream interface .
313	toPB creates a new WatchRequest .
314	toPB returns a new WatchRequest .
315	Contains returns true if the given value exists .
316	ContainsAll returns true if the given set contains all values .
317	Equals returns true if two sets are equal .
318	Values returns a slice of values .
319	Copy returns a copy of the set .
320	Sub returns a copy of this set .
321	v2MembersURL returns a url for the endpoint
322	NewMigrateCommand returns a new cobra command
323	publishEntries publishes all the entries in the raft .
324	openWAL opens a new wal .
325	replayWAL returns a new WAL .
326	stop stops the raft node .
327	NewWatchCommand creates a new cobra command
328	InitialState implements the Storage interface .
329	SetHardState sets the hard state .
330	Entries returns all entries in the memory storage .
331	Term implements the Storage interface .
332	LastIndex returns the last index .
333	FirstIndex returns the first index of this memory storage .
334	Snapshot returns the snapshot .
335	ApplySnapshot applies the snapshot to the storage .
336	Compact implements the Storage interface .
337	unreachachable removes the given URL from the list .
338	NewEndpointCommand returns a new instance of the command
339	EpHealthCommandFunc is a helper function for creating a new endpoint .
340	NewElectCommand returns a cobra command
341	NewDefragCommand returns a new instance of the command
342	RegisterBuilder registers a new builder
343	Build creates a new balancer .
344	recordTransition returns the state of the given state .
345	doSerialize implements the EtcdServer interface for EtcdServer .
346	send sends a watch .
347	post sends a watcher to the watcher .
348	OriginAllowed returns true if the origin is allowed
349	IsHostWhitelisted returns true if the host is whitelisted
350	Valids returns a slice of strings .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue
352	NewKV returns a kv . KV .
353	NewURLsValue returns a new URLValue
354	URLFromFlag returns a list of URLs from the given flag .
355	servePeers is used to serve peers
356	NewStore creates a new store .
357	appendMarkTombstone appends the revision to the given revision .
358	IsDirWriteable checks if a directory exists
359	TouchDirAll checks if a directory exists
360	CreateDirAll creates a new directory .
361	ZeroToEnd moves the file to the file .
362	Open opens the file .
363	NewRaftLoggerFromZapCore creates a new raft logger .
364	NewConfig creates a new client .
365	RegisterElectionHandler registers a gRPC client
366	UpdateCapability updates the capabilities
367	NewLockCommand returns a new cobra command
368	tick the raft node
369	advanceTicks moves the raft node to the raft node .
370	NewAuthCommand returns a new cobra command
371	authEnableCommandFunc runs the auth command .
372	auth disable command
373	RetryKVClient returns a new KVVClient .
374	RetryLeaseClient returns a lease client .
375	RetryClusterClient creates a new cluster client .
376	RetryMaintenanceClient returns a new MaintenanceClient .
377	RetryAuthClient returns an auth client .
378	NewSetDirCommand returns a new instance of the command
379	Enter implements the Meter interface .
380	Leave is used to leave the counter
381	HandleBasic implements the http . Handler interface .
382	WriteError implements the http . Handler interface .
383	MemberByName returns the member by name .
384	PeerURLs returns the list of all peers in the cluster .
385	ValidateConfigurationChange validates a configuration change
386	AddMember adds a member to the cluster
387	RemoveMember removes a member from the cluster
388	ValidateClusterAndAssignIDs validates a new cluster
389	Keep returns a map with the given revision .
390	closeRequireLeader is used to close the leader
391	resetKeepAlive is used to reset the current state .
392	recvKeepAlive is used to receive a lease .
393	deadlineLoop is a long running goroutine that waits for a deadline .
394	sendKeepAliveLoop is used to send a request to the server .
395	NewKV creates a new KV instance
396	removes the lease associated with the given key .
397	LeaseValue returns the value of a key .
398	ValueBytes returns the value of the comparison .
399	WithRange sets the end of the end of the query .
400	WithPrefix sets the prefix of the query .
401	mustInt64 cast int64 to int64
402	mustInt64OrLeaseID converts a lease ID to a lease ID .
403	Next returns the next watch .
404	getJournalWriteSyncer returns a new writeSyncSyncer .
405	newKV node constructor
406	newDir node constructor
407	Read returns the contents of the node .
408	Write writes the value to the given index .
409	List returns a list of all nodes .
410	GetChild returns the node with the given name .
411	Add adds a child node to the node .
412	Remove removes a node from the tree .
413	Compare compares two values .
414	Clone returns a copy of the node .
415	isConnectedToQuorumSince returns true if the given member is connected to the given address .
416	isConnectedSince returns true if the given remote is connected to the remote server .
417	numConnectedSince returns the number of connections that are connected to .
418	estestConnected returns the longest known time .
419	isTornEntry returns true if the data is a valid entry .
420	StartMockServersOnNetwork starts a mock server
421	StartAt starts the server
422	StopAt stops the server
423	Stop stops the server .
424	NewCheckCommand returns a new cobra command
425	NewCheckPerfCommand returns a new cobra command
426	NewCheckDatascaleCommand returns a new instance of a command
427	NewGetCommand returns a Command instance
428	NewGetCommand returns a command
429	PickPeerURL returns a random peer URL
430	HandleMetricsHealth implements the http . Handler interface .
431	NewRemoveCommand creates a new command
432	rmCommandFunc is used to delete a command
433	checkIntervals returns a map of Intervals .
434	ReportEventReceived reports the number of events .
435	RegisterKVHandler registers kv handler for kvd server
436	RegisterWatchHandler registers a watcher for a watcher .
437	RegisterLeaseHandler registers a new LeaseHandler .
438	RegisterClusterHandler registers a gRPC server .
439	RegisterMaintenanceHandler registers a gRPC server .
440	RegisterAuthHandler registers auth handler
441	startEtcd starts a new goroutine .
442	identifyDataDirOrDie returns the directory for the given directory .
443	openLast opens a new locked file .
444	called when a leader is leader
445	LostNotify returns a channel for the leader .
446	newGRPCProxyCommand returns a Command instance
447	NewMemberCommand returns a new cobra command
448	NewMemberAddCommand returns a new cobra command
449	NewMemberRemoveCommand returns a Command instance
450	NewMemberUpdateCommand returns a new cobra command
451	NewMemberListCommand returns a Command instance
452	memberAddCommandFunc is a helper function for creating a new MemberAddr .
453	memberRemoveCommandFunc is used to remove a member from a member
454	memberUpdateCommandFunc is used to update a member of a member
455	memberListCommandFunc is part of the Command interface .
456	Open opens a new wal .
457	OpenForRead returns a new WAL .
458	Verify verifies that the given snapshot is valid .
459	Close closes the wal .
460	notify sends an event to the watcher .
461	Remove removes the watcher .
462	mkPathDepth returns the path for the given nodePath .
463	mkV2Node creates a new NodeExtern .
464	prevKeyFromPuts returns the key value for the given transaction .
465	NewWeightedReport creates a new WeightedReport .
466	NewURLsMapFromStringMap creates a new URLMap from a string .
467	String returns a string representation of c .
468	URLs returns the list of URLs in the map .
469	parse parses a string into a map .
470	NewClientHandler creates a new http . Handler for requests .
471	writeKeyEvent writes the EventEvent to w .
472	writeKeyError writes an error to the server .
473	getUint64 gets the uint64 value from the form
474	getBool retrieves a bool from the form .
475	waitDeletes is used to wait for a commit .
476	AddOutputPaths adds the output paths to the given configuration .
477	NewConfig creates a new instance of Config .
478	PeerURLsMapAndToken returns the URL for the given cluster .
479	GetDNSClusterNames returns cluster names
480	checkBindURLs checks if the given URL is valid .
481	GetCluster returns a list of cluster names
482	GetClient returns a DNS client for the given service .
483	GetSRVService returns the SRV service
484	ReadDir reads a directory from a directory .
485	compact computes the current revision .
486	defrag deallocates the endpoint
487	NewUserCommand returns a new cobra command
488	userAddCommandFunc is used to create a user add command
489	user get user
490	user change password
491	addEvent adds an event to the queue .
492	scan scans the event for the given key .
493	clone returns a copy of the EventHistory .
494	Open the backend backend
495	Open backend
496	recoverSnapshotBackend attempts to recover a snapshot from a raft .
497	NewUpdateCommand returns a new instance of the command
498	updateCommandFunc is used to update a key
499	FrontAndBack returns the front of the queue .
500	Insert inserts p into the queue .
501	Rate returns the rate of the queue .
502	Clear clears the queue .
503	UniqueStrings returns a slice of unique names in the slice .
504	RandomStrings returns a slice of random strings
505	IsKeyNotFound returns true if the error is a key not found
506	IsRoleNotFound returns true if the error is a role not found
507	IsUserNotFound returns true if the error is a user NotFoundError
508	JoinCluster joins a cluster
509	GetCluster returns the cluster
510	newProxyFunc returns a new http . Proxy .
511	isSafeRetry returns true if the error is a retryable error .
512	withRetryPolicy sets the retry policy
513	withAuthRetry sets the retry option for retry .
514	withMax sets the maximum number of retries
515	withBackoff sets the backoffFunc for the backend .
516	RecvAppendRequest adds a request to the server .
517	SendAppendRequest sends a request to the server .
518	merge merges two buckets .
519	deleteRevKey deletes a revision .
520	isMemberBootstrapped returns true if the cluster belongs to the cluster
521	GetClusterFromRemotePeers returns the cluster from the given URL .
522	getClusterFromRemotePeers retrieves the cluster from the cluster
523	getRemotePeerURLs returns the list of remote peers for the local cluster
524	getVersions returns the version of the cluster .
525	bestClusterVersion returns the version of the cluster .
526	getVersion returns the version of the peer .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the timer .
529	Observe returns true if the timer has been observed .
530	NewPeerHandler returns a new http . Handler .
531	put implements the KeyIndex interface .
532	deathstone implements the KeyIndex interface .
533	get implements the KeyIndex interface .
534	since returns the oldest revision of the given revision .
535	keep is used to purge the given revision .
536	findGeneration returns the generation for the given revision .
537	cancelWatcher cancels the watcher .
538	syncWatchersLoop is used to synchronize all watchers .
539	syncVictimsLoop is used to synchronize a goroutine .
540	moveVictims moves the list of victims to the store .
541	kvsToEvents converts a list of events to a list of events .
542	notify is used to notify a watcher
543	isOpFuncCalled returns true if the operation is a valid op .
544	UnsafePut adds a new value to the batch .
545	UnsafeSeqPut adds a new value to the batch .
546	UnsafeRange returns a slice of bytes in the bucket .
547	UnsafeDelete removes a key from the bucket .
548	UnsafeForEach is like UnsafeForEach except it returns an error .
549	Commit commits the batch transaction .
550	CommitAndStop is part of the batchTx interface .
551	Renew renews a lease .
552	Attach adds an item to the list .
553	revokeExpiredLeases removes expired leases from the server .
554	checkpointScheduledLeases ensures that the lease is scheduled .
555	expireExists checks if the lease is expired
556	findExpiredLeases returns a list of leases that are expired .
557	refresh refreshes the lease .
558	initialize sets up the lease .
559	Keys returns the keys of the lease .
560	Remaining returns the expiration time .
561	NewCompactionCommand returns a new cobra command
562	compactionCommandFunc is part of the command . Command interface .
563	NewPutCommand creates a new cobra command
564	putCommandFunc adds a command to the command
565	NewHandler creates a new http . Handler .
566	NewReadonlyHandler returns a new http . HandlerFunc
567	NewSetCommand creates a new command
568	setCommandFunc is used to set the key for a key
569	waitOnLastRev waits for the last revision to be deleted .
570	GetDefaultInterfaces returns the default interfaces for the host .
571	NewSnapshotCommand returns a new cobra command
572	NewMoveLeaderCommand returns a new cobra command
573	transferLeadershipCommandFunc is part of the command . Command interface .
574	OpenDir opens a file at path .
575	NewRemoveDirCommand returns a new instance of the command
576	rmdDirCommandFunc is used to delete a directory
577	NewDelCommand returns a new cobra command
578	delCommandFunc deletes a command .
579	NewExpect node constructor
580	NewExpectWithEnv creates a new ExecWithEnv .
581	ExpectFunc is like ExpectFunc but returns an error .
582	Expect returns a string representing the given string .
583	LineCount returns the number of lines .
584	Sign signals the process .
585	keyFunc returns a string representation of a RangeRequest .
586	Add adds a range to the cache
587	Get retrieves a RangeResponse from the cache .
588	Invalidate implements the Cache interface .
589	Compact implements the Cache interface .
590	NewUniqueURLsWithExceptions returns a new UniqueURLs instance
591	UniqueURLsFromFlag returns a list of unique URLs for the given flag .
592	UniqueURLsMapFromFlag returns a map of UniqueURLs for the given flag .
593	Hold the barrier
594	Release releases the barrier
595	Wait blocks until the barrier is reached .
596	NewLockRacerCommand returns a new cobra command
597	E election timeout
598	DialEtcdGRPCServer connects to the server .
599	CreateEtcdClientConfig creates a new client configuration
600	CreateEtcdClient creates a new client
601	CheckCompact implements the Etcd interface .
602	Defrag implements the Etcd interface .
603	RevHash returns the revision of the member .
604	Rev returns the revision of the member .
605	Compact is part of the Member interface .
606	IsLeader returns true if the member is leader
607	WriteHealthKey writes a health check to the server .
608	SaveSnapshot saves the snapshot
609	RestoreSnapshot restores the snapshot
610	NewWatcher creates a new watcher .
611	NewRawNode creates a new raw node .
612	Campaign is part of the raft node .
613	Propose writes data to the node .
614	ProposeConfChange implements the Node interface for RawNode .
615	ApplyConfChange applies the given configuration to the node .
616	Step is part of the Node interface .
617	Ready returns a ready ready .
618	WithProgress sets the progress of the node .
619	ReportUnreachable reports the status of the node .
620	ReportSnapshot reports the status of the node .
621	TransferLeader is part of the raft . Node interface .
622	ReadIndex implements the raft . Node interface .
623	printcURL prints the URL to the request .
624	StartNode starts a new node .
625	RestartNode returns a new node .
626	tick starts the node .
627	MustSync returns whether or not the given block has been sync .
628	NewGRPC17Health returns a new GRPC report
629	NeedUpdate returns true if the peer is updated
630	dflSignal sends a signal to the system .
631	New creates a new Store .
632	Index returns the index of the store .
633	Get retrieves an event from the store .
634	Create creates a new event
635	Set is used to create a new event
636	getCompareFailCause returns the comparison of the given value .
637	Delete removes a node from the store .
638	walk walks the tree rooted at the given path .
639	internalGet returns the node for the given nodePath .
640	DeleteExpiredKeys removes expired keys .
641	checkDir checks if the given directory exists .
642	Save saves the store .
643	Recovery is part of the Store interface .
644	Next returns the next id .
645	NewMakeMirrorCommand creates a new mirror command
646	NewZapCoreLoggerBuilder creates a new gap core logger .
647	NewSyncer creates a new syncer .
648	DropPort drop port
649	SetLatency sets the latency for the given duration .
650	RemoveLatency removes the latency
651	NewTxnCommand creates a new cobra command
652	txnCommandFunc is a wrapper around txn
653	New creates a new Compactor .
654	printResponseKey prints the status of the response
655	RegisterLockHandler registers a gRPC client .
656	grpcHandlerFunc is a wrapper for grpc . HandlerFunc
657	addCORSHeader adds a CORAL header to the response writer
658	fallback returns a list of ops in the list .
659	IDFromString converts a string into a ID .
660	release releases the directory .
661	EncodedSize returns the size of the value .
662	Decode accepts a packed byte array and populates the fields of the ValueStruct
663	NewMergeIterator creates a new iterator .
664	initHeap initializes the iterator .
665	Valid returns true if the iterator is valid .
666	Key returns the contents of the iterator .
667	Value implements the MergeIterator interface .
668	Next advances the iterator .
669	Seek implements the MergeIterator interface .
670	Close closes the iterator .
671	Encode serializes the value into a byte slice .
672	Decode accepts a packed byte array and populates the fields of the Header
673	encodeEntry encodes an entry into the buffer .
674	SetEntry implements the WriteBatch interface .
675	Set implements the WriteBatch interface .
676	Set with TTL
677	Delete implements the WriteBatch interface .
678	commit is part of the WriteBatch interface .
679	Flush implements the WriteBatch interface .
680	Error implements the WriteBatch interface .
681	getMemTables returns a list of memplist .
682	writeRequests writes requests to the database .
683	ensureRoomForWrite is used to ensure that there are no longer needed .
684	writeLevel0Table writes a table to disk .
685	handleFlushTask handles a flushTask .
686	flushMemtable flushes the memtable .
687	calculateSize calculates the size of a file .
688	Size returns the size of the database .
689	Next returns the next value .
690	Release releases the sequence .
691	KeySplits returns a slice of keys .
692	Flatten flushes the given number of workers .
693	Mmap returns a copy of the file .
694	Madvise reads and returns the MADVise .
695	setDiscardTs sets the discardTs for the given timestamp .
696	hasConflict returns true if the transaction has been committed .
697	Set sets the value of the given key .
698	SetWithMeta sets the value for the given key .
699	Delete deletes the entry .
700	Get retrieves a item from the database .
701	CommitWith commits a transaction with the given callback .
702	View implements the DB interface .
703	Update updates the database .
704	Seek implements the SeekIterator interface .
705	SeekToLast implements the BlockIterator interface for BlockIterator .
706	parseKV parses the header from the header .
707	NewIterator returns a new iterator .
708	seekFrom implements io . SeekFrom interface .
709	seekForPrev moves the iterator to the iterator .
710	Value implements Iterator .
711	Seek implements the Iterator interface .
712	NewConcatIterator creates a new concatenator .
713	Valid returns true if the iterator is valid .
714	Next advances the iterator .
715	Close closes the iterator .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a byte slice .
718	KeyWithTs returns a copy of the given key .
719	ParseTs parses the given key .
720	ParseKey parses the given key .
721	SameKey returns true if src are equal .
722	FixedDuration returns the duration of the given duration .
723	NewCloser creates a new Closer .
724	NewThrottle returns a new Throttle .
725	Do implements the Throttle interface .
726	Done implements the Throttle interface .
727	Finish implements the Throttle interface .
728	SetDiscardTs sets the value for the given transaction .
729	openReadOnly opens the log file .
730	iterate iterates over the log entry at the given offset .
731	sortFids returns a sorted list of files sorted by id .
732	write writes data to disk .
733	populateDiscardStats populates the fields of the value log .
734	Backup is part of the DB interface .
735	ToList returns a copy of the given key .
736	produceRanges will produce a set of ranges .
737	produceKVs retrieves the kv items from the stream .
738	Execute implements the Stream interface .
739	NewStream returns a new stream .
740	NewStreamAt returns a new stream .
741	DecrRef decodes the table .
742	ParseFileID parses a file ID into a file .
743	PrintHistogram prints histogram
744	newSizeHistogram creates a new size histogram .
745	buildHistogram builds a new size histogram .
746	printHistogram prints histogram data
747	Init initializes the meter .
748	Begin begins a new transaction .
749	BeginMany starts a new batch .
750	Done is part of the Watermark interface .
751	DoneMany is part of the Watermark interface .
752	SetDoneUntil sets the value of the watermark .
753	WaitForMark waits until the mark is reached .
754	Encode encodes b into b .
755	Decode accepts a packed byte array and populates the fields of the header .
756	NewTableBuilder creates a new builder .
757	keyDiff returns the difference between two keys .
758	Add adds a key to the builder .
759	blockIndex returns the index of the block index .
760	Finish implements the Block interface .
761	Errorf logs an error message
762	Infof log message
763	DecrRef decrements the skipset .
764	NewSkiplist returns a new Skiplist .
765	Put adds a key to the list .
766	Get returns the value of a key .
767	Key returns the current key .
768	Value returns the value of the iterator .
769	Next advances the iterator .
770	Prev implements the Iterator interface .
771	Seek moves the iterator to the iterator .
772	SeekForPrev implements the Seek interface for Iterator .
773	NewUniIterator returns a new UiIterator .
774	Next advances the iterator .
775	Seek implements the Seek interface .
776	asChanges returns a slice of all the fields of this manifest .
777	rewrite rewrites the manifest file .
778	validate checks if the level is valid .
779	acquireDirectoryLock creates a new directory lock .
780	release releases the directory .
781	AssertTruef asserts that the given string is a valid boolean .
782	Wrapf wraps an error with the given format .
783	initTables initializes the tables .
784	deleteTables deletes all tables .
785	tryAddLevelZeroTable adds a table to the table .
786	getTableForKey returns the table for the given key .
787	get returns the value of the given key .
788	ing overlapping tables .
789	String returns a string representation of the item .
790	KeyCopy returns a copy of the item .
791	ValueSize returns the size of the item .
792	NewKeyIterator creates a new iterator .
793	Valid returns true if the iterator is valid .
794	ValidForPrefix returns true if the given prefix is valid .
795	Close closes the iterator .
796	parseItem parses the next item into the iterator .
797	Seek moves the key to the iterator .
798	GetMergeOperator returns a new merge operation .
799	Get returns the contents of the merge operation .
800	compareAndAdd returns true if the given diff is less than one .
801	newArena returns a new Arena instance
802	putNode adds a new node to the arena .
803	getNode returns the node at the given offset .
804	getKey returns the key for the given offset .
805	getVal returns the value of the given offset .
806	getNodeOffset returns the offset of the node .
807	init initializes the logger .
808	revertToManifest removes the manifest from the database .
809	dropTree removes all levels from the level .
810	dropPrefix deletes the given prefix .
811	isLevelZeroCompactable returns true if all the levels are equal .
812	doCompact performs a compaction of compactions .
813	get returns the value of the given key .
814	seekTotal returns a list of accounts for the given account .
815	findFirstInvalidTxn attempts to find the next invalid transaction at the end of the given index .
816	Create creates a new snapshot
817	List returns all snapshots .
818	Open returns a snapshot of the snapshot .
819	Write implements the io . Writer interface .
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore
821	NewFileSnapshotStore creates a new FileSnapshotStore .
822	snapshotName returns the snapshot name .
823	Create creates a new snapshot
824	List lists all snapshots
825	getSnapshots returns the snapshot of the file .
826	readMeta reads meta data from file
827	Open implements the FileSnapshot interface for FileSnapshotStore .
828	ReapSnapshots implements the FileSnapshotStore interface .
829	Write implements the io . Writer interface .
830	Close closes the snapshot .
831	Cancel cancels the snapshot
832	finalize implements the FileSnapshotSink interface .
833	writeMeta writes meta data to disk
834	NewNetworkTransportWithConfig creates a new NetworkTransport .
835	setupStreamContext initializes the stream context
836	getStreamContext returns the current context .
837	SetHeartbeatHandler sets the heartbeat handler for the network .
838	CloseStreams closes all streams .
839	Close closes the connection .
840	getPooledConn returns a net . Conn with the given targetAddress .
841	getConnFromAddressProvider returns a net . Conn for the given address .
842	getConn returns a net . net . Conn .
843	returns the connection pool .
844	Listen starts a new connection .
845	handleConn is used to handle a connection
846	handleCommand handles the RPC command .
847	decodeResponse decodes the response from the connection .
848	sendRPC sends an RPC request to the server .
849	newNetPipeline creates a new netPipeline
850	decodeResponses is used to decode a response .
851	AppendEntries implements the net . AppendEntries interface .
852	Close closes the netlink pipeline .
853	NewObserver returns a new Observer .
854	RegisterObserver registers a new Observer .
855	Deregister Observer
856	Observe implements the Raft interface .
857	NewInmemStore creates a new InmemStore
858	FirstIndex returns the index of the index .
859	LastIndex returns the last index .
860	GetLog gets the log from the store .
861	StoreLog stores the log in the store .
862	StoreLogs stores all logs in the store .
863	DeleteRange deletes the specified range .
864	Set sets the value of the key
865	Get returns the value associated with key .
866	SetUint64 sets a uint64 value
867	GetUint64 gets the uint64 from the store .
868	NewLogCache creates a new LogCache .
869	Connect connects to an InmemTransport
870	Disconnect disconnects the peer
871	DisconnectAll disconnects all peers
872	Respond to the RPC server
873	Open implements the OpenShift interface .
874	vote is used to determine if a vote is active .
875	notifyAll is used to notify the leader
876	cleanNotify removes the notification from the follower .
877	LastContact returns the last contact
878	setLastContact sets the last contact of the follower
879	replicate is used to replicate the raft replication state .
880	pipeReplicate is used to perform a replication operation .
881	queueSend sends a request to the queue .
882	queueDecode decodes the given peer from the server .
883	setupAppendEntries is used to setup a new log entry
884	setPreviousLog is used to set the previous log entry .
885	setNewLogs is used to set new log entries
886	appendStats appends stats to the peer .
887	handleStaleTerm is used to handle stale term .
888	AppendEntries is part of the raft . Server interface .
889	RequestVote sends a request to the server .
890	InstallSnapshot installs a snapshot
891	EncodePeer encodes the given peer address .
892	DecodePeer decodes a peer address
893	AppendEntries is part of the pipeline .
894	ReadPeersJSON reads a list of peers from the given path .
895	ReadConfigJSON reads the configuration from the given path .
896	NewTCPTransport creates a new NetworkTransport .
897	NewTCPTransportWithLogger creates a new NetworkTransport .
898	NewTCPTransportWithConfig creates a new NetworkTransport .
899	Dial connects to the TCP stream .
900	Accept implements the TCPStream interface .
901	Addr returns the address of the TCP stream .
902	restoreSnapshot restores the snapshot from the raft .
903	BootstrapCluster is part of the Raft interface .
904	Leader returns the leader s leader .
905	Apply applies the given command to the raft .
906	Barrier implements the raft . Raft interface .
907	VerifyLeader implements Raft . Raft .
908	AddVoter adds a new server to the raft server .
909	RemoveServer removes a server from the raft server .
910	Shutdown implements Raft . Raft .
911	Snapshot returns a snapshot of the raft .
912	Restore implements the Raft interface .
913	String returns a human readable representation of the Raft node .
914	LastContact returns the last contact
915	Logf implements LoggerAdapter .
916	containsNode checks if a node contains a node
917	LeaderPlus returns a list of nodes in the cluster .
918	WaitTilUptoUptoDate waits for the raft index to be applied to the cluster .
919	assertLogEntryEqual tests if the log entry is equal to the given log entry .
920	runFSM runs the raft .
921	Clone returns a copy of the configuration .
922	Clone returns a copy of the configuration .
923	hasVote returns true if the given server is a vote .
924	checkConfiguration validates the server configuration
925	nextConfiguration returns the current configuration of the current configuration .
926	encodePeers encodes a list of peers
927	decodePeers decodes a list of peers .
928	encodeConfiguration encodes the given configuration .
929	decodeConfiguration decodes a configuration message .
930	goFunc registers a function for the raft state .
931	getLastIndex returns the last index of the last snapshot .
932	getLastEntry returns the last entry in the raft state .
933	checkRPCHeader checks if the given rpc is set
934	setLeader sets the leader
935	requestConfigChange sends a request to the raft server .
936	run runs the Raft loop .
937	runFollower runs the raft loop .
938	liveBootstrap is part of the raft interface .
939	runCandidate runs the raft state .
940	runLeader is used to run a leader
941	startStopReplication starts the ReplicationReplication .
942	configurationChangeChIfStable returns a channelChangeChable that can be used to get a channel change .
943	verifyLeader is used to verify the leader
944	checkLeaderLease is used to check if the leader is alive
945	restoreUserSnapshot is used to restore a snapshot from the raft snapshot
946	appendConfigurationEntry appends a configuration entry to the raft .
947	DispatchLogs is used to dispatch log messages .
948	processLogs is used to process log messages
949	processLog processes the raft log .
950	processRPC processes the RPC command .
951	processHeartbeat is used to process a heartbeat
952	setLastContact sets the last contact
953	persistVote is used to persist a vote .
954	setCurrentTerm sets the current term .
955	setState updates the raft state .
956	getCommitIndex returns the index of the commit index .
957	calculate ensures that the commitment index is valid .
958	randomTimeout returns a channel that can be used to get a random time .
959	generateUUID generates random UUID
960	decodeMsgPack decodes a packed byte slice into a message .
961	encodeMsgPack encodes a message into a buffer .
962	backoff returns the backoff of the given limit .
963	newApplySource creates a new ApplySource .
964	reset resets the source source .
965	DefaultConfig returns the default configuration .
966	ValidateConfig validates config
967	runSnapshots runs the raft snapshot .
968	shouldSnapshot returns true if this Raft is a snapshot .
969	Take a snapshot of the raft snapshot .
970	compactLogs removes all logs from the raft .
971	WebpackCheck is the same as WebpackConfig .
972	New creates a new gzip generator
973	UnixSocket creates a new TCP socket
974	Get returns the error handler for the given status .
975	PanicHandler returns a handler for panics .
976	partialFeeder returns the content of a template .
977	New creates a new Engine .
978	WriteTo implements io . WriterTo interface .
979	Send sends a message to the SMTP server .
980	NewSMTPSender creates a new SMTP sender
981	Param returns the value for the given key .
982	Set implements the DefaultContext interface
983	Value returns the value associated with the key .
984	Redirect redirects the given url .
985	File is part of the DefaultContext interface .
986	MarshalJSON method of DefaultContext
987	New creates a new Group object
988	New creates a new App .
989	DeprecationsCheck is a helper function that checks to see if there are any errors .
990	List implements the Resource interface for BaseResource .
991	Render renders the given data .
992	Save saves the session .
993	GetOnce retrieves a value from the session
994	Set sets value
995	Clear clears the session
996	getSession returns the current session .
997	New creates a new gzip generator
998	New creates a new gzip generator
999	New returns a new genny generator .
1000	NewMessage creates a new Message .
1001	Reset resets the header .
1002	SetHeader sets the header field s value .
1003	SetHeaders sets the headers of the message .
1004	SetAddressHeader sets the header field of the message .
1005	FormatAddress returns the string representation of the message .
1006	SetDateHeader sets the header field s value .
1007	FormatDate formats the given date .
1008	SetBody is part of the Message interface .
1009	SetPartEncoding sets the encoding of the given encoding .
1010	SetHeader sets the Header field s value .
1011	SetCopyFunc sets the copy function to the file .
1012	AttachReader attaches the given reader to the given io . Reader .
1013	Attach adds a file to the message .
1014	EmbedReader adds a file to the message .
1015	Embed adds a file to the message .
1016	ValidateTemplates ensures that all templates are valid .
1017	PlushValidValidator checks if the given file is valid .
1018	Validate validates this options
1019	LoadPlugins loads plugins .
1020	WriteHeader sets the status of the response .
1021	Write implements io . Writer
1022	Flush the response
1023	CloseNotify implements the ResponseWriter interface .
1024	Run the application
1025	onlyRelevantFiles returns an error if the given file exists .
1026	GoTemplateEngine renders a template engine .
1027	GET registers a GET route .
1028	Redirect redirects the given status .
1029	ANY registers a handler for GET request .
1030	buildRouteName returns the name of the route .
1031	New creates a new Group .
1032	NewDialer creates a new Dialer .
1033	Dial implements the Dialer interface .
1034	DialAndSend sends a message to the Dialer .
1035	Set sets the value of the flash
1036	Add adds a key to flash
1037	persist a flash session
1038	newFlash returns a new flash flash
1039	Get retrieves cookie by name
1040	Set adds a cookie to the cookie
1041	SetWithExpirationTime sets the cookie with the given value .
1042	Delete a cookie
1043	NewMessage creates a new Message .
1044	NewFromData returns a new Message instance
1045	New returns a new Message instance
1046	CloseNotify implements EventSource .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext creates a new Simple Simple Simple Simple Context
1049	Register registers a handler for the given name .
1050	Start starts a new SimpleBackground
1051	Stop stops the Worker
1052	Performs the given job .
1053	PerformAt implements the Simple interface .
1054	PerformIn implements the SimpleWork interface .
1055	String returns a string representation of the RouteInfo .
1056	Alias adds aliases to the route .
1057	Name sets the name of the route .
1058	BuildPathHelper builds a new http . Handler for the given route .
1059	New creates a new gzip generator
1060	New creates a new Genny generator .
1061	RegisterCustomDecoder registers custom types for custom types .
1062	Replace replaces the middleware stack with the given middleware .
1063	Routes returns a list of routes .
1064	WrapBuffaloHandler wraps an http . Handler with the given handler .
1065	PackageJSONCheck is the same as PackageJSON .
1066	match returns the path for the given import path .
1067	Send sends a message to the sender .
1068	Last returns the last part of the options .
1069	Stop stops the app .
1070	DepEnsure implements the Run method of the Run method .
1071	String returns a string representation of the BuildInfo .
1072	New returns a new gzip generator .
1073	AddBody adds a body to the body .
1074	AddBodies adds a body to the body .
1075	AddAttachment adds a new Attachment .
1076	AddEmbedded adds an attachment to the message .
1077	SetHeader sets the header field s value .
1078	New creates and returns a new Group .
1079	New creates a new Genny generator .
1080	New creates a new gzip generator
1081	Cleanup removes all files in the directory .
1082	MDTemplateEngine renders a template engine .
1083	Update updates the config map
1084	FilterChanges returns a map of changes to the given config .
1085	getLabelsFromREMatches returns a list of labels that match the given pattern .
1086	getLabelsFromGenericMatches returns a list of labels from the given list .
1087	Start starts the agent
1088	Subscribe implements Agent .
1089	Config returns the current configuration .
1090	Set implements Agent .
1091	IsMember returns true if the user is a member of a member .
1092	ListIssueComments lists issue comments
1093	ListPullRequestComments returns a list of ReviewRequestComments .
1094	ListReviews lists all reviews .
1095	ListIssueEvents lists issue events .
1096	CreateComment creates a new issue .
1097	CreateReview creates a new review .
1098	CreateCommentReaction adds a comment to the repo
1099	CreateIssueReaction creates a new IssueReaction
1100	DeleteComment deletes a comment
1101	DeleteStaleComments deletes the given comment .
1102	GetPullRequest retrieves a pull request from the repo .
1103	GetPullRequestChanges returns the pull request changes .
1104	GetRef returns the ref for the given repository .
1105	DeleteRef deletes a reference
1106	GetSingleCommit returns a single commit .
1107	CreateStatus creates a new status
1108	ListStatuses returns the status of the given repository .
1109	GetCombinedStatus returns the CombinedStatus for the given repository .
1110	GetRepoLabels returns the labels for the given repository .
1111	GetIssueLabels returns a list of issue labels .
1112	AddLabel adds a label to the repo
1113	RemoveLabel removes an issue .
1114	FindIssues returns a list of issues .
1115	AssignIssue adds an issue to the repo .
1116	GetFile returns the file for the given commit .
1117	ListTeams lists all teams
1118	ListTeamMembers returns a list of team members
1119	IsCollaborator returns true if the user is collaborator
1120	ListCollaborators returns a list of collaborators
1121	ClearMilestone clears the milestone .
1122	SetMilestone sets the milestone number .
1123	ListMilestones lists all Milestones in the repo .
1124	ListPRCommits lists all commits in the repository .
1125	GetRepoProjects returns a list of repository projects .
1126	GetOrgProjects returns the projects for the given org .
1127	GetProjectColumns returns a list of ProjectColumns for the project .
1128	CreateProjectCard creates a new ProjectCard .
1129	DeleteProjectCard deletes the given project .
1130	MoveProjectCard moves a project to the model .
1131	CreateDatabaseClient creates a new InfluxDB client
1132	Push creates a new influxdb endpoint
1133	NewProwJobWithAnnotation creates a new ProwJob .
1134	NewProwJob creates a new ProwJob
1135	NewPresubmit creates a new ProwJob
1136	PresubmitSpec returns a pointer to a ProwJobSpec .
1137	PostsubmitSpec returns a new ProwJobSpec .
1138	PeriodicSpec returns a pointer to a new PeriodicJobSpec
1139	BatchSpec returns a new ProwJobSpec .
1140	PartitionActive returns a slice of Prow jobs .
1141	ProwJobFields returns the fields of the ProwJob .
1142	ClusterToCtx converts a cluster to a cluster
1143	AddCommand adds a command to the plugin .
1144	Get takes name of the prowJobs and returns the corresponding ProwJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested ProwJobs .
1146	Delete takes name of the prowJobs and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched ProwJob .
1148	MergeMethod returns the merge method for the given repository .
1149	Query returns the query string for the query .
1150	ForRepo returns true if the repository belongs to .
1151	OrgExceptionsAndReposAndRepos returns a list of Exceptions that match the provided Exceptions .
1152	QueryMap returns a QueryMap .
1153	ForRepo implements the QueryMap interface for QueryMap .
1154	Validate validates this TideContextPolicy .
1155	GetTideContextPolicy implements the Config interface for ConfigPolicy .
1156	IsOptional returns true if the given string is optional .
1157	MissingRequiredContexts returns a slice of required contexts that are not required .
1158	ValidateWebhook validates webhook
1159	HelpProvider returns a plugin for the given repository .
1160	HandleEvent handles a request .
1161	HandleAll is used to handle all plugins
1162	NewDryRunProwJobClient returns a new PryRunProwJob
1163	Create creates a new ProwJob
1164	Update updates the prrow job .
1165	UpdateStatus updates the status of a row .
1166	Delete deletes a single row
1167	DeleteCollection deletes a collection .
1168	Get retrieves a row by name .
1169	List lists all Prows jobs
1170	Watch returns a watch . Interface .
1171	Patch applies the patch and returns the patch .
1172	hasSynced returns true if the controller is synced .
1173	Run starts the controller .
1174	runWorker is part of the controller interface .
1175	fromKey parses a key into a string .
1176	enqueueKey adds an object to the queue .
1177	finalState returns true if the given PendingState is valid .
1178	description returns the description of the condition .
1179	rrowJobStatus returns the ProwJobStatus for the given pipeline .
1180	provisionMeta returns the metadata for a job .
1181	sourceURL returns the source URL for the repository .
1182	makePipelineGitResource creates a pipeline resource .
1183	makePipelineRun creates a pipeline run .
1184	matchingConfigs returns a list of requirements matching the given repository .
1185	SuggestCodeChange returns a human - readable string for the given line .
1186	ServeExternalPluginHelp serves external API plugin
1187	protect is used to protect the protection
1188	UpdateOrg updates an org
1189	UpdateRepo updates the repository
1190	UpdateBranch updates a branch
1191	LoadConfig loads the options from the given configuration .
1192	Run runs the command
1193	Start starts the agent
1194	reloadSecret reloads a secret file
1195	GetSecret returns the secret of the agent
1196	setSecret adds a secret to the agent .
1197	GetTokenGenerator returns the token generator for the given secret path
1198	New creates a new History object
1199	Record records the history for the given action .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush flushes the history .
1202	AllRecords returns all records in the history .
1203	MakeCommand creates a new cobra command
1204	CheckFlags checks if the comment is valid
1205	ReceiveComment returns a slice of points for a given comment .
1206	NewController creates a new Controller .
1207	Run starts the controller .
1208	runWorker is part of the Controller interface .
1209	New returns a new LocalGit .
1210	MakeFakeRepo creates a fake repository
1211	AddCommit adds a commit to the local repository
1212	CheckoutNewBranch checks if the given branch is a new branch .
1213	Checkout is part of the LocalGit interface .
1214	RevParse is part of the LocalGit interface .
1215	CleanAll removes all resources associated with the given region .
1216	optionsForRepo returns the options for the given repository .
1217	getChangedFiles returns a list of files in the repository .
1218	loadReviewers returns a set of reviewers in the repository .
1219	NewController creates a new Controller .
1220	SaveLastSync saves the last sync .
1221	Sync is part of the Controller interface .
1222	AddFlags adds flags to the event counter
1223	CheckFlags implements the EventCounter interface .
1224	ReceiveIssueEvent is used to receive an issue event
1225	Upload uploads the given bucket .
1226	FileUploadWithMetadata creates an uploadFunc for a given file .
1227	DataUploadWithMetadata returns an uploadFunc that writes data to the given io . Reader .
1228	HasLabel returns true if the given issue is a label .
1229	ImageTooBig returns true if the given URL contains the specified size .
1230	LevelFromPermissions returns the level of the given permissions .
1231	PermissionsFromLevel returns a RepoPermission with the given permission level .
1232	newProwJobs creates a new ProwJobs .
1233	GetApplicable returns a list of blocks in the given branch .
1234	serve serves metrics .
1235	NewCountPlugin creates a new cobra command
1236	ReceiveComment is part of the interface .
1237	updateMetrics is used to update metrics
1238	LogStatus logs a resource .
1239	SyncConfig synchronizes the given configuration .
1240	Metric returns the metric for the given resource type .
1241	FormatURL returns the URL for the given URL .
1242	runAndSkipJobs is the same as RunAndSkipJobs but does nothing .
1243	validateContextOverlap is a helper function that ensures that the context has been consumed .
1244	RunRequested runs the given pull request .
1245	skipRequested returns an error if the task is skipped .
1246	Match returns true if the label matches the given label .
1247	Match returns true if the given label matches the given label .
1248	AddFlags adds flags to the repository
1249	AddFlagsWithoutGitHubTokenPath adds flags to the GitHub options .
1250	Validate validates GitHub options
1251	GitClientWithLogFields creates a new client with the given fields .
1252	GitClient creates a GitHub client
1253	GitClient returns a GitClient .
1254	toMap converts the coverage list into a map .
1255	findChanges returns a list of changes for the given coverage .
1256	CreateDatabase creates a new database
1257	ShouldReport returns true if pv is a report .
1258	Report implements the Reporter interface .
1259	MarkComplete marks the marked as marked as marked .
1260	NewJobAgent creates a new JobAgent
1261	Start starts the job
1262	Jobs returns a slice of jobs
1263	ProwJobs returns a slice of Prow jobs
1264	GetProwJob returns a ProwJob with the given id .
1265	GetJobLog returns the logs for the given job .
1266	unionStrings returns a list of strings in a slice .
1267	Apply applies the given child Policy .
1268	GetOrg returns the organization associated with the given name .
1269	GetRepo returns a repository by name .
1270	GetBranch returns a branch by name .
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates issue events .
1273	enqueueKey adds a key to the queue .
1274	rrowJobStatus returns the job status for the given build status .
1275	buildEnv builds the environment for the given job .
1276	defaultArguments sets the default arguments .
1277	defaultEnv sets the environment variables
1278	insertSource injects a new build from the build .
1279	InjectSteps injects the given container into the container .
1280	detectTimeout returns the timeout for the build spec
1281	makeBuild creates a new build .
1282	newLabels creates a list of labels
1283	newAssignees returns a list of Assignees
1284	NewIssueComment creates a new issue .
1285	messageFilter returns a filter that can be used to filter messages .
1286	IsSuccess returns true if the build is success
1287	IsFailure returns true if the build is failure
1288	IsAborted returns true if the build is aborted
1289	ProwJobID returns the Prow job ID
1290	BuildID returns the build ID
1291	CrumbRequest creates a crumb request
1292	Measure adds a request to the metrics .
1293	Get skip metrics
1294	Get returns the contents of the given path .
1295	request returns a response with the given parameters .
1296	doRequest creates a http . Response .
1297	getJobName returns the name of the job .
1298	getBuildPath returns the build path for a job
1299	GetJobInfo returns the job info
1300	JobParameterized returns true if the job is parameterized
1301	EnsureBuildableJob ensures that the job is running .
1302	LaunchBuild launches a new build .
1303	Build implements the Client interface .
1304	BuildFromSpec builds a build from the given spec .
1305	GetEnqueuedBuilds returns all enqueued builds in the queue .
1306	Abort aborts a job .
1307	PresubmitToJobSpec is a wrapper for PresubmitJobSpec
1308	PostsubmitToJobSpec is a helper to create a new JobSpec
1309	PeriodicToJobSpec returns a JobSpec for a given periodic job .
1310	GetBuildID returns the build ID for the given name .
1311	listGcsObjects lists all the objects in a bucket .
1312	FindBaseProfile returns the profile for the given job .
1313	sortBuilds sorts a list of build builds .
1314	GetAll returns all regions
1315	NewEventClient creates a new EventClient
1316	PruneComments prune comments
1317	FormatResponse returns a string representation of a response .
1318	FormatSimpleResponse returns a string representation of a SimpleResponse
1319	FormatICResponse returns a string representation of an issue .
1320	FormatResponseRaw returns a string representation of the response body .
1321	Validate validates this options
1322	Encode encodes options .
1323	RegisterIssueHandler registers an issue handler for the given name .
1324	RegisterIssueCommentHandler registers a new IssueCommentHandler with the given name .
1325	RegisterPullRequestHandler registers a plugin handler for a plugin .
1326	RegisterStatusEventHandler registers a status event handler for the given name .
1327	RegisterPushEventHandler registers a plugin handler for the given plugin .
1328	RegisterReviewEventHandler registers a review event handler for the given name .
1329	RegisterReviewCommentEventHandler registers a new ReviewCommentEventHandler .
1330	RegisterGenericCommentHandler registers a generic comment handler for the given name .
1331	NewAgent creates a new Agent
1332	InitializeCommentPruner initializes a comment .
1333	CommentPruner returns an instance of CommentPruner .
1334	Load loads the configuration from the configuration file
1335	Config returns the current configuration .
1336	Set sets the configuration
1337	Start starts the plugin
1338	Generic comment handlers
1339	IssueHandlers returns a map of issue handlers .
1340	Issue comment handlers
1341	PullRequestHandlers returns a map of pull request handlers
1342	ReviewEventHandlers returns a map of ReviewEventHandlers .
1343	ReviewCommentEventHandlers returns a map of review comments for the given repository .
1344	StatusEventHandlers returns a map of registered status events .
1345	Push event handlers
1346	EventsForPlugin returns a list of events for the given plugin .
1347	insertLink inserts the given viewURL into the given URL .
1348	HelpProvider is a helper function to create a new plugin .
1349	getPatch returns a copy of the git repository .
1350	releaseNoteFromParentPR returns the release notes for the given parent .
1351	ValidatePayload validates the payload
1352	PayloadSignature returns the signature of a payload .
1353	updateString updates the value of a string .
1354	updateBool is a helper function to update the value of a bool .
1355	configureOrgMeta configures the org metadata for an org
1356	configureTeamRepos is used to configure a team repository
1357	ShouldReport returns true if the Prow job has been read .
1358	Run runs the given job .
1359	Format formats a logrus log entry .
1360	FindLabels returns the labels for the given issue .
1361	AddFlags adds flags to the options list
1362	NewAgent creates a new Agent
1363	HandleLogin returns an http . HandlerFunc that can be used to authenticate a user .
1364	HandleLogout handles a request .
1365	serverError is part of the Agent interface .
1366	FromItem implements the Config interface .
1367	GetItems returns the items in the collection
1368	SetItems sets the items in the collection .
1369	UnmarshalText implements the Unmarshaler interface for RepoPermissionLevel .
1370	IsAssignee returns true if the given login is assigned to the given login .
1371	IsAuthor returns true if the given user is authorized .
1372	HasLabel returns true if the given label matches the given label .
1373	Branch returns the branch .
1374	truncate truncates the given string .
1375	reportStatus reports the status of the repository .
1376	parseIssueComments parses a comment comment into a list of issues .
1377	createComment creates a comment for the given comment .
1378	Config returns a lens .
1379	Callback returns a copy of the given resource .
1380	FormatRecord formats a record .
1381	Namespace sets the namespace
1382	NewFakeClient creates a new client .
1383	NewClientInCluster creates a new client in the cluster
1384	NewClientFromFile creates a new Client from a given namespace
1385	NewClient creates a new Client .
1386	ReplaceConfigMap replaces a configMap with the given name .
1387	GetDiskUsage implements the DiskUsage interface for DiskUsage .
1388	GetATime returns the time at the given path
1389	RegisterLens registers a lens .
1390	GetLens returns the lens specified by name .
1391	LastNLines returns the lastLines of the given artifact .
1392	NewClient creates a new client
1393	WriteMessage sends a message to Slack
1394	MarkAndSweep marks the NATGateway .
1395	List all NATGateways
1396	NewClient creates a new client
1397	Acquire acquires a resource .
1398	AcquireWait waits for the given resource and returns a resource .
1399	AcquireByState returns a list of resources associated with the given state .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases a resource
1402	UpdateAll updates all resources in the storage .
1403	SyncAll synchronizes all resources .
1404	UpdateOne updates the resource with the given name .
1405	Metric implements the Client interface for Client .
1406	HasResource returns true if the client has a resource
1407	DialContext implements the Dialer interface .
1408	NewDashboardAgent creates a new DashboardAgent .
1409	QueryPullRequests returns a list of pull requests .
1410	GetHeadContexts returns the current context of the dashboard
1411	Constructs a search query for a repository
1412	NewBundledStates returns a new BundledStates instance
1413	ReceiveEvent returns true if the given event has been received .
1414	Age returns the age of the current state .
1415	Percentile returns the percentage of the given percentage .
1416	NewMetrics returns a new Metrics instance
1417	NewDiskCache creates a new http . Wrapper .
1418	NewMemCache returns a new http . RoundTripper
1419	NewFromCache returns a new http . RoundTripper
1420	ProwV1 retrieves the ProwV1Client
1421	Prow returns a pointer to the ProwV1Client
1422	NewOwners creates a new Ownerser
1423	GetApprovers returns a list of all roles in the repo .
1424	GetAllPotentialApprovers returns a list of all possible applications .
1425	GetReverseMap returns a map of all the owners of the owner .
1426	tempUnapprovedUnapprovedFiles returns a list of unapproved files that are not approved .
1427	KeepCoveringApprovers returns a set of candidates that match the given app .
1428	GetSuggestedApprovers returns the preferredApprovers set for the given app .
1429	GetOwnersSet returns the set of owners for the given file .
1430	GetShuffledApprovers returns a list of all the roles in the organization .
1431	String returns a string representation of the Approval .
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a new Approvers instance
1434	AddLGTMer adds an authorization to the approval .
1435	RemoveApprover removes an app .
1436	AddAssignees adds an assignees to the approval list
1437	GetCurrentApproversSetCased returns the SetApproversSetCased field s value .
1438	GetFilesApprovers returns a map of files that can be used to get files .
1439	NoIssueApprovers returns a map of Approval .
1440	UnapprovedFiles returns the set of unapproved files in the list .
1441	GetFiles returns all files in the given branch .
1442	IsApproved returns true if the request is approved
1443	ListApprovals returns a list of approvals .
1444	ListNoIssueApprovals returns a list of Approval approvals .
1445	GenerateTemplate generates a template
1446	writeTemplate writes a template to the given template .
1447	Labels returns a slice of labels
1448	LabelsForTarget returns the labels for the target target target .
1449	LoadConfig loads a configuration from an org
1450	loadLabels loads the labels from the given org .
1451	kill kills the given label .
1452	create creates a new update
1453	calculateLabels returns a map of labels for the given labels .
1454	linkify returns the link for the given text .
1455	NewCache creates a new cache .
1456	KeyToPath returns the path to the given key .
1457	ensureDir ensures the directory exists .
1458	Put implements the Cache interface for Cache .
1459	Get implements the Cache interface for Cache .
1460	Delete removes a key from the cache
1461	NewGCSArtifact creates a new GCSArtifact
1462	Size returns the size of gCS .
1463	ReadAll reads all the contents of a GCS artifact
1464	ReadTail reads the contents of a tar archive .
1465	gzip returns true if the content of the gCS .
1466	optionsForRepo returns the options for the given repository .
1467	List lists all Prows in the indexer .
1468	ProwJobs returns a ProwJobLister .
1469	List lists all Prows jobs in the indexer .
1470	RunAgainstAllBranch returns true if the branch is in the branch .
1471	Intersects returns true if the two branches are equal .
1472	ShouldRun returns true if the given configuration matches the given changes .
1473	RunAgainstChanges returns true if the given changes have changed .
1474	ShouldRun returns true if the given component is run .
1475	ShouldRun returns true if the given file is run .
1476	ShouldRun is part of the Presubmit interface .
1477	ShouldRun implements the Presubmit interface .
1478	GetPresubmit returns the Presubmit field if it exists .
1479	SetPresubmits sets the Presubmit field of JobConfig .
1480	SetPostsubmits sets the postsubmit field of the job .
1481	AllPresubmits returns a list of all Presubmits
1482	AllPostsubmits returns a list of all postsubmits
1483	AllPeriodic returns a list of Periodicics
1484	ClearCompiledRegexes cleans up a list of regular expressions .
1485	Empty returns true if the configuration is empty .
1486	NewClient creates a new client
1487	ExpandAlias returns the alias for the given alias .
1488	ExpandAliases adds aliases to the repository .
1489	ParseFullConfig parses the given bytes .
1490	ParseSimpleConfig parses a simple config file .
1491	decodeOwnersMdConfig decodes the metadata from the given file .
1492	findOwnersForFile finds the owner of the given file .
1493	FindApproverOwnersForFile returns the owner of the given file .
1494	FindReviewersOwnersForFile finds the authorizer for the given file .
1495	FindLabelsForFile returns the set of labels for the given path .
1496	IsNoParentOwners returns true if the given path has no parent parent parent owners .
1497	Ratio returns the ratio of the coverage .
1498	FromPayload creates a PeriodicJobEvent from a byte array
1499	ToMessage implements pubsubProw .
1500	UnmarshalText unmarshals the given text .
1501	compileApplicableBlockades compiles a list of blocks from a repository .
1502	calculateBlocks calculates the summary of blocks for a given block .
1503	MergeMultipleProfiles merges two profiles .
1504	AddFlags adds flags to the options .
1505	processNextItem processes the next item in the queue
1506	handleErr is used to handle an error
1507	AggregateFilter returns a filter that runs the given filters .
1508	FilterPresubmits takes a set of jobs and returns a list of jobs that match the provided filter .
1509	MakeCommand creates a new cobra command
1510	Push adds an item to the queue .
1511	Pop removes the item from the heap .
1512	NewFakeOpenPluginWrapper creates a new fake OpenOpenPluginWrapper
1513	ReceiveIssue is part of the interface .
1514	Validate validates this options
1515	Complete implements the Options interface .
1516	Set sets the format
1517	ensure ensures that the install is installed .
1518	output returns the output of the given arguments .
1519	projects returns a list of all projects .
1520	selectProject selects a project
1521	createCluster creates a cluster
1522	createContext creates a new context
1523	contextConfig loads the kubectl . Config . Config .
1524	selectContext selects the context for the given context
1525	applyCreate is used to create a new resource
1526	determineSkippedPresubmit returns a slice of PresubmitPresets
1527	Dispatch is used to dispatch events
1528	CreateIssue creates a new issue .
1529	CreateStatus creates a new repository
1530	ForEachPR iterates over a list of commits .
1531	GetCollaborators returns a list of collaborators
1532	GetCombinedStatus returns the status of the given repository .
1533	GetIssues returns all issues in the repository .
1534	GetRepoLabels returns the labels for the given repository .
1535	GetUser retrieves a user by name .
1536	checkConfigValidity checks if the configuration is valid
1537	createSystemdLogfile creates a journal file for the given service .
1538	createFullSystemdLogfile writes a journal file to disk .
1539	createSystemdLogfiles creates filesystem log files for systemd .
1540	prepareLogfiles is used to prepare log files
1541	writeSuccessMarkerFile writes the marker file to the GCS file
1542	MakeCommand creates a new cobra command
1543	warnDeprecated is used to warn if the given time is not deprecated
1544	Describe returns a description of RequireMatchingLabel
1545	TriggerFor returns a Trigger for the given repository
1546	EnabledReposForPlugin returns a list of repositories for the given plugin
1547	EnabledReposForExternalPlugin returns the list of repositories for the given external plugin .
1548	SetDefaults sets defaults for ConfigUpdater
1549	validatePlugins validates plugins
1550	ShouldReport returns true if the Prow job has finished .
1551	Run runs a deep copy of the repo .
1552	PathForRefs returns the path for the given refs .
1553	gitCtxForRefs returns a git ctx context for the given refs .
1554	commandsForBaseRef returns a list of commands for the git repository .
1555	GitTimestampEnvs returns a slice of strings that can be used to get a set of values .
1556	gitRevParse returns the revision of the git repo .
1557	commandsForPullRefs returns a slice of commits for the given refs .
1558	ProduceCovList creates a coverage list of profiles .
1559	popRandom removes a random string from the set .
1560	resolve is used to resolve a kubernetes configuration
1561	ProwJobClientset returns a pointer to a pruning job
1562	ProwJobClient returns a ProwJob for the given namespace .
1563	InfrastructureClusterClient returns a kubernetes client .
1564	BuildClusterClients is used to build a kubernetes cluster
1565	Age implements the ActiveState interface .
1566	ReceiveEvent is part of the ActiveState interface .
1567	ReceiveEvent returns the state of the given event .
1568	Active returns true if the state is active .
1569	Age returns the current state of the state .
1570	ReceiveEvent implements the MultiState interface .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts an Item to a ResourceConfig .
1573	Copy returns a copy of this type .
1574	MakeCommand creates a new cobra command
1575	incrementNumPendingJobs increments the number of pending jobs .
1576	setPreviousReportState updates the current state of the current reporter .
1577	SyncMetrics is part of the Controller interface .
1578	DumpProfile dump profile
1579	blocksEqual returns true if two profiles are equal .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one .
1581	NewFilteredProwJobInformer constructs a new informer for Prow jobs .
1582	New creates a new Spyglass
1583	Lenses returns a list of lens .
1584	JobPath returns the path of the GCS .
1585	RunPath returns the path for the given source .
1586	ExtraLinks returns a list of extra links
1587	needDemux returns a list of external plugins for the given source type .
1588	demuxExternal is part of the Server interface .
1589	dispatch sends a request to the server .
1590	AddFlags adds flags to StatePlugin
1591	CheckFlags updates the state of the state plugin .
1592	ReceiveIssueEvent is used to receive an issue event .
1593	Load loads the configuration from the given configuration .
1594	loadConfig loads the configuration from the given job config .
1595	yamlToConfig loads the configuration from the given path .
1596	ReadFileMaybeGZIP reads a file from a file .
1597	finalizeJobConfig is used to update the job configuration
1598	validateComponentConfig validates the configuration config
1599	ConfigPath returns the default config path
1600	ValidateController validates the controller .
1601	defaultJobBase sets the default job base for the pod .
1602	SetPresubmitRegexes sets the PresubmitRegexes optional arguments .
1603	setBranchergexes sets the Brancher for the given br .
1604	SetPostsubmitRegexes sets the PostsubmitRegexes field of Postsubmit .
1605	Body returns the body of the image .
1606	NewBoskosHandler returns a new http . Handler
1607	ErrorToStatus converts an error to an error .
1608	DumpProfile dump profile
1609	LoadProfile loads a profile from the given origin .
1610	NewClient creates a new client
1611	SetCredentials sets the credentials for the user .
1612	Checkout checks if a commit is in the repository
1613	CheckoutNewBranch creates a new branch .
1614	Merge merges the given commit .
1615	CheckoutPullRequest sends a pull request to the repo .
1616	Config runs the git config
1617	retryCmd attempts to retry a single command with the given arguments .
1618	LabelsAndAnnotationsForSpec returns the labels for the given job .
1619	ProwJobToPod converts a pod to a pod .
1620	CloneLogPath returns a copy of the log mount path
1621	cloneEnv returns a copy of the given options
1622	sshVolume creates a volume mount
1623	InjectEntrypoint injects a container into a container
1624	PlaceEntrypoint creates a new container
1625	kubeEnv returns a list of environment variables
1626	Client returns a kube client
1627	handle handles the event .
1628	SendHook sends a hook to the specified hook .
1629	janitorClean cleans up a directory
1630	janitor cleans up a resource
1631	Run starts the pull server
1632	specToStarted converts a job to a GCS object
1633	Run runs the job .
1634	hasPRChanged returns true if the pull request has changed .
1635	UpdateIssues updates an issue .
1636	handleReviewEvent handles the review event .
1637	findAssociatedIssue finds the associated issue with the given org .
1638	optionsForRepo returns an Approve for the given repository .
1639	localOnlyMain returns a new http . Handler with the given options .
1640	summarizes the coverage list
1641	Subset returns a copy of the coverage list
1642	ListDirectories returns the list of directories in the list .
1643	readRequest reads the request and returns the admission request .
1644	handle handles the request .
1645	writeResponse writes the response to w .
1646	only update status
1647	convertSuiteMeta converts a suite into a suite .
1648	NewHealth returns a new Health .
1649	ServeReady serves a health check .
1650	NewController creates a new Controller .
1651	newExpectedContext creates a new context
1652	contextsToStrings converts a slice of contexts into a slice of strings .
1653	filterSubpools returns a map of subpools for the given pool .
1654	filterSubpool is used to filter a subpool .
1655	poolPRMap returns a map of pool names
1656	successfulContexts returns a list of contexts that are not in the given context .
1657	compute returns a list of pending jobs .
1658	tryMerge tries to merge the given mergeFunc with the given mergeFunc .
1659	prChanges returns a set of changes to the repository .
1660	prune removes all files from the cache .
1661	dividePool returns a copy of the pool .
1662	AggregateProfiles aggregates profiles .
1663	countToBoolean converts a profile into a slice of profiles .
1664	NewStorage creates a new Storage .
1665	AddResource adds a resource
1666	DeleteResource deletes a resource
1667	UpdateResource updates a resource
1668	GetResource retrieves a resource by name .
1669	GetResources returns a list of resources .
1670	SyncResources synchronizes all resources .
1671	ParseConfig parses the given config file and returns a list of resources
1672	blemsInFiles returns a map of files in the given directory .
1673	NewPodLogArtifact returns a PodLogArtifact
1674	CanonicalLink returns the canonical link for the pod .
1675	ReadAt implements the PodLogArtifact interface .
1676	ReadAll implements the PodLogArtifact interface .
1677	ReadAtMost implements the PodLogArtifact interface .
1678	ReadTail returns the tail of the pod .
1679	newProblems returns a list of possible problems .
1680	blemsInFiles returns a list of files in the repository .
1681	undoPreset removes a preset from the pod spec
1682	undoPresubmitPresets removes all presubmitPresets .
1683	yamlBytesStrips returns a slice of bytes from yaml .
1684	monitorDiskAndEvict is used to monitor disk usage .
1685	difference returns a copy of the orgRepoConfig .
1686	union returns a new orgRepoConfig .
1687	clearStaleComments removes all comments from the repository .
1688	detectReleaseNoteLabel returns the name of the release note .
1689	getReleaseNote returns the release note
1690	NewClient creates a new client
1691	Acquire acquires a resource .
1692	ReleaseOne releases a resource
1693	UpdateAll updates the current state
1694	GetGitHubClient returns a new GitHub instance
1695	GetUsername returns user s username
1696	CreateTokenHandler creates a TokenHandler .
1697	Create token handlers
1698	String returns a string representation of the job .
1699	TerminateOlderPresubmitJobs is used to terminate the prune job .
1700	PushMetrics pushes metrics to the given endpoint .
1701	RateLimiter creates a new RateLimiter .
1702	checkExistingStatus returns the status of a commit .
1703	checkExistingLabels returns true if the given issue has no labels .
1704	handle is used to handle a commit .
1705	MarkdownSHAList lists all commits in the given commits .
1706	PathForSpec returns the path for the given job .
1707	AliasForSpec returns the alias for the given job .
1708	RootForSpec returns the root directory for the given job .
1709	NewSingleDefaultRepoPathBuilder returns a new RepoPathBuilder .
1710	NewExplicitRepoPathBuilder creates a new RepoRepoPathBuilder .
1711	RegisterSourceOrDie registers an issueSource with the given name .
1712	CreateAndSync creates a new sync .
1713	loadCache loads the cache from the repository
1714	setIntersect sets the intersection between two lists .
1715	sync syncs the given issue .
1716	GetAWSCreds returns credentials for the given resource .
1717	 stopper
1718	newPipelineConfig creates a pipeline config .
1719	KubeClient returns the kubernetes client
1720	ProwJobClient implements the KubernetesClient interface .
1721	resolveSymLink is used to resolve symlinks
1722	readJSON reads data from the given key .
1723	listSubDirs lists all sub directories in the bucket .
1724	listAll lists all keys in the bucket .
1725	listBuildIDs returns the IDs of the given root directory .
1726	Filter profile paths
1727	LoadSecrets loads the secrets from the given paths .
1728	LoadSingleSecret loads a single secret
1729	Set sets the boolean value .
1730	NewOpener returns a new instance of OpenCredential
1731	IsNotExist returns true if err is not an error
1732	LogClose implements io . Closer
1733	Writer implements io . Writer .
1734	InitGitHubOAuthConfig initializes GitHub OAuth2 .
1735	deltaDisplayed returns the difference of the coverage change .
1736	makeTable returns a table for the given coverage .
1737	ContentForGitHubPost posts the content of a GitHub
1738	AddFlags adds flags to the client
1739	CheckFlags validates client flags
1740	getGitHubClient returns the GitHub Github client
1741	limitsCheckAndWait checks to see if the client limits are available .
1742	FetchIssues fetches all issues from the given repository .
1743	hasID returns true if the given ID exists
1744	FetchIssueEvents fetches the issue events for a given issue .
1745	isPRChanged returns true if the pull request has changed .
1746	NewFetcher returns a new Fetcher
1747	fetchRecentIssues fetches latest issues from the Fetcher .
1748	fetchRecentEventsAndComments fetches the events from the fetcher .
1749	Fetch fetches all entries from the database .
1750	Issues returns a list of all issues in the repository .
1751	Title returns a string representation of FlakyJob
1752	Labels returns the labels of the job .
1753	ReadHTTP reads an HTTP response from a URL .
1754	String returns a human readable string representation of the lines .
1755	NewJobSpec creates a new JobSpec .
1756	ResolveSpecFromEnv parses a JobSpec into a JobSpec
1757	EnvForSpec returns the env for the given job spec
1758	EnvForType returns the environment variables for the given job type .
1759	getRevisionFromRef returns revision from refs .
1760	GetRevisionFromSpec returns the revision of the job .
1761	helpProvider returns a plugin help for the plugin .
1762	load parses the given io . Reader .
1763	loadPaths loads all paths from r .
1764	Match returns true if the given path matches the given path .
1765	CreateDatabase creates a new InfluxDB .
1766	mergeTags merges two tags .
1767	tagsToWhere returns a string representation of tags .
1768	Push adds a new point to the database .
1769	archive returns an artifact for the given job ID .
1770	Serve serves metrics .
1771	gather is used to gather metrics .
1772	makeRequest creates a new BranchProtectionRequest .
1773	makeReviews returns a new PullRequestReviews .
1774	Header returns the contents of the specified artifacts .
1775	Callback returns a copy of the given resource .
1776	logLinesAll returns a list of all log lines .
1777	executeTemplate executes the given template .
1778	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ResourceObject .
1779	FromItem converts the given item into a ResourceObject .
1780	SetItems sets the items in the collection .
1781	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ResourceCollection .
1782	useContext is used to configure a context
1783	currentContext returns the current context
1784	command returns a slice of the given command .
1785	describeCluster returns a description of the cluster
1786	Set adds a string to the slice .
1787	parseXML parses the content of a file and returns it .
1788	Render renders the page .
1789	Render renders the icon .
1790	Render renders the page .
1791	Printf prints a message to the logger .
1792	NewClient creates a new Grit instance
1793	SetReview sets the review for the given instance .
1794	GetBranchRevision returns the revision of a branch .
1795	queryAllChanges returns a list of changes for a given project .
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin
1797	AddFlags adds flags to the command
1798	CheckFlags returns an error if the type is not supported .
1799	AddFlags adds flags to Kubernetes client
1800	Validate validates the KubernetesClientOptions
1801	Client implements the KubernetesClient interface .
1802	newCRDClient creates a new client .
1803	createRESTConfig creates a REST config for kubeconfig .
1804	registerResource registers a resource with the given type .
1805	newDummyClient creates a dummy client
1806	Update updates the object
1807	TrustedPullRequest returns a list of labels for a pull request .
1808	buildAll builds all jobs for the given repository .
1809	Run runs the options .
1810	AddConfig adds the configuration to the storage .
1811	DeleteConfig deletes the given config .
1812	UpdateConfig updates the configuration .
1813	GetConfig returns the resource configuration for the given name .
1814	GetConfigs returns the configs for the storage .
1815	SyncConfigs synchronizes resources .
1816	addKnownTypes adds the required types to the group
1817	NewController creates a new Controller .
1818	Run starts the controller .
1819	addBlockingPresubmits adds a new presubstubmit to the list of pendingPresubmits .
1820	RemovedBlockingPresubmits removes the presence of the given presubmit .
1821	MigratedBlockingPresubmit mocks base method
1822	Load loads the configuration from the environment .
1823	canExecuteConcurrently returns true if the controller is running .
1824	getJenkinsJobs returns a slice of BuildQueryParams
1825	terminateDupes is used to terminate all the jobs in the cluster .
1826	Throttle is used to throttle the throttler
1827	NewClientWithFields creates a new client with the given fields .
1828	NewClient creates a new client
1829	NewDryRunClient creates a new client .
1830	NewFakeClient creates a new fake client
1831	request returns the status of the request .
1832	requestRaw returns the status of the request .
1833	getUserData returns the user data for the user .
1834	readPaginatedResultsWithValues retrieves the results from the given path .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels .
1837	stateCannotBeFoundOrOriginalError returns an error if the error occurred .
1838	IsMergeable returns true if the given number is a mergeable .
1839	Token returns the current token .
1840	ListArtifacts returns a list of artifacts for the given source .
1841	KeyToJob returns the job name for the given src .
1842	deriveToGCS returns the path to a GCS object
1843	FetchArtifacts fetches artifacts from the given source .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads an Invocation
1855	ApplyDefault applies defaults to the DecorationConfig .
1856	Validate validates this decorator config
1857	ApplyDefault applies default values to the uuid .
1858	ApplyDefault applies the default GCSConfiguration to the GCSConfiguration .
1859	Validate validates this GCSConfiguration .
1860	ClusterAlias returns the cluster alias
1861	NewResource creates a new Resource .
1862	NewResourcesFromConfig returns a new instance of ResourceEntry
1863	UserDataFromMap converts a UserDataMap to a UserDataMap
1864	Set sets the value of the commas .
1865	UnmarshalJSON deserializes into a UserData instance
1866	Extract extracts the user data from the user
1867	Set implements the UserData interface .
1868	Update updates the user data
1869	ToMap converts UserData into a UserDataMap .
1870	FromMap creates a UserDataMap from a UserDataMap
1871	ItemToResource converts an Item into a Resource .
1872	Run runs the command
1873	addSSHKeys is used to add SSH keys
1874	Issues returns a list of issues for the given cluster .
1875	loadClusters loads all the clusters from a JSON file .
1876	parseTriageData parses a triage data into a trie
1877	topClusters returns a list of all the clusters .
1878	topJobsFailed returns a slice of all jobs in the cluster .
1879	Title is part of the Cluster interface .
1880	Labels returns the labels of the cluster .
1881	New creates a new Cron instance
1882	QueuedJobs returns a list of jobs in the queue .
1883	HasJob returns true if the job exists
1884	addJob adds a job to the Cron .
1885	removeJob removes a job from the CronAgent
1886	UpdateComments updates an issue .
1887	GatherProwJobMetrics returns a list of Prow jobs .
1888	optionOrDefault returns the default value for the given option .
1889	newGCSJobSource returns a new GCSJobSource .
1890	artifacts returns all the artifacts for the given key .
1891	canonicalLink returns the canonical link to the source repository .
1892	jobPath returns the path of the job .
1893	targetURL returns the URL for the pull request .
1894	newBuildConfig creates a new build config .
1895	NewClient creates a new client
1896	retry attempts to retry a single response .
1897	depaginate returns a list of items that have been paginated .
1898	NewHelpAgent creates a new HelpAgent
1899	GeneratePluginHelp generates plugin help
1900	getPullCommitHash returns the hash of a pull commit .
1901	listJobBuilds returns a list of job builds for a job .
1902	getPRBuildData returns the build data for the given job .
1903	getGCSDirsForPRirs returns the path for the given repository
1904	imageDeleteFromDisk deletes image from disk
1905	doNetworksCreate is part of the DaemonService interface .
1906	networkLoadByName retrieves a network by name .
1907	Transaction adds a transaction to the database .
1908	ForLocalInspectionWithPreparedStmt is used to create a new cluster .
1909	SetDefaultTimeout sets default timeout
1910	Transaction is part of the Cluster interface .
1911	EnterExclusive is part of the Cluster interface .
1912	ExitExclusive is part of the Cluster interface .
1913	Close closes the cluster .
1914	TxCommit commits the transaction .
1915	ParseRemote parses a remote remote remote remote .
1916	GetContainerServer returns a container server .
1917	GetImageServer returns the image server
1918	initAppArmor initializes the apparmor .
1919	appArmorCanStack returns true if the apparmor is enabled .
1920	containerDeviceAdd adds a device to the container
1921	profileDeviceAdd adds a device to the container
1922	ensureImageAliases ensures that the image alias exists .
1923	GetExistingAliases returns a list of all existing aliases
1924	String returns a string representation of the StatusCode .
1925	ImagesGetExpired returns a list of images in the cluster .
1926	ImageSourceInsert adds an image source to the cluster .
1927	ImageSourceGet retrieves the image source from the cluster .
1928	ImageExists checks if the given image exists .
1929	ImageGet returns the image with the given fingerprint .
1930	ImageGetFromAnyProject returns the image with the given fingerprint .
1931	imageFill fills the image with the given id .
1932	ImageLocate returns a list of all images in the cluster .
1933	ImageAssociateNode adds a node to the cluster
1934	ImageDelete deletes an image .
1935	ImageAliasesGet returns the names of the given project .
1936	ImageAliasGet returns the image aliases for the given project .
1937	ImageAliasRename sets the name of the image .
1938	ImageAliasDelete deletes an image by name .
1939	ImageAliasesMove moves the image to the specified destination .
1940	ImageAliasAdd adds an image to the cluster
1941	ImageAliasUpdate updates the image .
1942	ImageLastAccessUpdate updates the last update time
1943	ImageLastAccessInit is part of the Cluster interface .
1944	ImageUpdate is part of the Cluster interface .
1945	ImageInsert adds an image to the cluster .
1946	ImageGetPools returns the pool IDs for the given image .
1947	ImageGetPoolNamesFromIDs returns the names of the specified image names .
1948	ImageUploadedAt is part of the Cluster interface .
1949	ImagesGetOnCurrentNode returns all images in the cluster
1950	ImagesGetByNodeID returns a map of images in the cluster .
1951	ImageGetNodesWithImage returns a list of all nodes in the cluster .
1952	ImageGetNodesWithoutImage returns the list of nodes that match the given image .
1953	Add adds a function to the group .
1954	Start starts the group
1955	zfsIsEnabled returns true if zfs is enabled
1956	zfsToolVersionGet returns the version of the Linux tool .
1957	zfsModuleVersionGet returns the zfs version of the zfs module .
1958	zfsPoolVolumeCreate creates a new zfs pool
1959	zfsPoolVolumeExists returns true if the given dataset exists .
1960	NetworkIDsNotPending returns a map of network IDs in the cluster .
1961	NetworkConfigAdd is part of the Cluster interface .
1962	NetworkNodeJoin is part of the Cluster interface .
1963	NetworkCreatePending is part of the Cluster interface .
1964	NetworkCreated is part of the ClusterTx interface .
1965	NetworkErrored implements the Cluster interface .
1966	NetworkGet returns the current network .
1967	networkNodes returns the list of nodes in the cluster .
1968	NetworkGetInterface returns the network interface .
1969	NetworkConfigGet returns the network configuration for the given ID .
1970	NetworkCreate creates a network .
1971	NetworkUpdate updates a network configuration .
1972	NetworkUpdateDescription updates the description of a network .
1973	NetworkConfigClear deletes a network configuration .
1974	NetworkDelete deletes a network .
1975	NetworkRename is part of the Cluster interface .
1976	GetContainers returns a list of containers
1977	GetContainersFull returns all containers .
1978	GetContainer returns a container by name .
1979	CreateContainerFromBackup creates a new container from a container
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a new container
1982	UpdateContainer updates a container
1983	RenameContainer rename a container
1984	ExecContainer executes a container
1985	GetContainerFile returns the contents of a container
1986	CreateContainerFile creates a container file
1987	DeleteContainerFile deletes a file
1988	GetContainerSnapshotNames returns the names of a container .
1989	GetContainerSnapshots returns a list of containers
1990	GetContainerSnapshot returns a snapshot of a container
1991	CreateContainerSnapshot creates a new container snapshot
1992	Migrate container snapshot
1993	UpdateContainerSnapshot updates an existing snapshot .
1994	GetContainerState returns the container state for the given name .
1995	UpdateContainerState updates container state
1996	GetContainerLogfiles returns the log files for the given name .
1997	GetContainerLogfile retrieves the logs of a container
1998	GetContainerMetadata returns the metadata for the given name .
1999	SetContainerMetadata sets the metadata for a container
2000	GetContainerTemplateFiles returns the list of templates for the given container name .
2001	CreateContainerTemplateFile creates a new container template
2002	DeleteContainerTemplateFile deletes container template
2003	ConsoleContainer creates a container
2004	GetContainerConsoleLog gets the console log console
2005	DeleteContainerConsoleLog deletes a container
2006	GetContainerBackups returns a list of container backups
2007	GetContainerBackup returns a copy of a container
2008	CreateContainerBackup creates a new container
2009	RenameContainerBackup is used to rename a container
2010	DeleteContainerBackup deletes a container
2011	GetContainerBackupFile returns a backup file for a container
2012	RsyncSend sends a command to the given path
2013	patchsGetNames returns the names of patches .
2014	patchRenameCustomVolumeLVs deletes the specified volume .
2015	patchLvmNodeSpecificConfigKeys patches the LvmNodeConfig for the given name .
2016	GetHTTPClient returns the HTTP client
2017	do implements the http . Handler interface .
2018	RawQuery is part of the http . Handler interface .
2019	RawWebsocket returns a raw websocket connection
2020	RawOperation is part of the interface .
2021	ProfileToAPI converts a profile to a profile .
2022	Profiles returns a list of profiles .
2023	ProfileGet gets the profile by name .
2024	ProfilesGet returns a list of profiles .
2025	ProfileConfig returns the profile for the given project .
2026	ProfileConfigClear clears the profile .
2027	ProfileConfigAdd adds a profile to the database .
2028	ProfileContainersGet retrieves a list of profiles in the cluster .
2029	ProfileCleanupLeftover leaves the profile
2030	ProfilesConfigExpandConfig returns a map of configured profiles
2031	ProfilesExpandDevices returns the devices for the given devices .
2032	GetServer returns the server s server .
2033	UpdateServer updates the server .
2034	HasExtension returns true if the given extension is an extension .
2035	GetServerResources returns the resources associated with the server .
2036	UseProject returns a container .
2037	openOpen opens a database connection .
2038	Rebalance is used to reconcile a raft node
2039	Promote moves the database to the database .
2040	Purge removes a node from the database .
2041	List lists all cluster members
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns true if the node is enabled .
2044	membershipCheckNodeStateForBootstrapOrJoin is used to check if the raft node is valid .
2045	membershipCheckClusterStateForBootstrap is used to check the cluster state for a cluster .
2046	member check for membership state
2047	membershipCheckClusterStateForLeave checks if the given nodeID is valid .
2048	membershipCheckNoLeftClusterCert checks if the given directory exists
2049	ConfigLoad loads a node from the database .
2050	Replace replaces existing values .
2051	Patch adds a patch to the config .
2052	TPSAddress returns the HTTPS address of the node .
2053	CertificatesGet returns a list of certificates .
2054	CertificateGet returns the certificate .
2055	CertSave saves a certificate .
2056	CertDelete deletes a certificate
2057	CertUpdate is part of the Cluster interface .
2058	createDevLxdlListener creates a new net . Listener
2059	Servers returns a list of servers .
2060	Shutdown shuts down the raft instance .
2061	raftNetworkTransport creates a raft transport .
2062	raftConfig returns a raft configuration .
2063	bootstrapMaybeBootstrap is used to bootstrap a raft snapshot
2064	CPURUesource returns a ResourceCPUSource .
2065	MemoryResource returns the memory resource .
2066	GetOperationUUIDs returns the list of operations for the given operation .
2067	GetOperations returns all operations
2068	GetOperation returns the operation for the given UUID .
2069	GetOperationWebsocket returns a websocket connection
2070	tryMount tries to try to try to try to try to mount the specified flags .
2071	lxdUsesPool returns true if the given storage pool name exists
2072	ProjectURIs returns a list of projects for a project .
2073	ProjectList returns all projects in the cluster .
2074	ProjectGet returns the project with the given name .
2075	ProjectExists returns true if the project exists .
2076	ProjectCreate creates a project .
2077	ProjectUsedByRef returns the list of projects used by the project .
2078	ProjectRename is part of the Cluster interface .
2079	ProjectDelete deletes a project .
2080	PasswordCheck performs a password check against the given secret .
2081	LoadCert loads a TLS certificate from the given directory .
2082	WriteCert writes a certificate to disk .
2083	NewDaemon creates a new Daemon
2084	DefaultDaemon returns a default daemon .
2085	AllowProjectPermission is a helper function to allow permission to access a project
2086	checkTrustedClient checks if the request is trusted
2087	Authenticate checks if the request is valid
2088	State returns the current state .
2089	UnixSocket returns the Unix socket socket
2090	Stop stops the daemon
2091	setupExternalAuthentication is used to setup an external auth endpoint
2092	initializeDbObject initializes the local database .
2093	WriteJSON writes a JSON response to w .
2094	EtagHash returns the hash of the given data .
2095	EtagCheck checks if the request matches the given data .
2096	HTTPClient returns a new http . Client .
2097	IsRecursionRequest returns true if the request is a recursion request
2098	GetListeners returns a list of net . Listener .
2099	internalQLGet is used to handle a SQL query
2100	internalSQLPost is used to create a SQL statement
2101	PublicKey returns the public key .
2102	PrivateKey returns the private key .
2103	Fingerprint returns the fingerprint of the public key
2104	GenCert generates a new cert for a given certificate
2105	PrintServerInfo prints information about the container
2106	LaunchContainers starts a container .
2107	CreateContainers creates a container
2108	GetContainers returns a list of containers
2109	StartContainers starts a container
2110	setQueryParam sets the query parameter .
2111	Get images
2112	GetImageFile returns a new ImageFile
2113	GetImageSecret returns the secret secret for the given fingerprint .
2114	GetPrivateImage returns the image for the given fingerprint .
2115	GetPrivateImageFile returns the image file for the given fingerprint .
2116	GetImageAliases returns a list of all image aliases
2117	tryCopyImage creates a copy of an image .
2118	CopyImage copies an image from the source .
2119	UpdateImage updates an image .
2120	DeleteImage deletes an image .
2121	RefreshImage refreshes the image .
2122	CreateImageAlias creates a new image aliases .
2123	UpdateImageAlias updates the specified alias .
2124	RenameImageAlias renames an existing image alias .
2125	DeleteImageAlias deletes an image alias
2126	Open opens a database .
2127	EnsureSchema ensures that the database is valid .
2128	FilesystemDetect returns the name of the filesystem .
2129	Schema returns a new Schema instance .
2130	updateFromV37 updates the raft nodes in the raft .
2131	HardwareGetLocal returns the name of the current architecture .
2132	NewController creates a new Controller .
2133	CreateContainer creates a container
2134	DefinedContainer returns true if the container is defined
2135	UpdateContainer updates the container
2136	RenameContainer rename container
2137	DeleteContainer deletes a container
2138	Add adds an update to the Schema .
2139	ensureSchemaTableExists checks if the schema exists .
2140	queryCurrentVersion returns the current version of the current version .
2141	ensureUpdatesAreApplied ensures that the update is applied .
2142	checkSchemaVersionsHaveNoHoles verifies that all the versions have been set .
2143	checkAllUpdatesAreApplied checks if all of the updates have been applied .
2144	formatSQL formats SQL statement .
2145	GetAllXattr returns all xattr attributes for the given path
2146	GetErrno returns the error of the given error .
2147	Uname returns the Uts name of the Uts .
2148	RegisterStmt registers a new stmt .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new gateway .
2151	DialFunc returns a DialFunc that connects to the gateway .
2152	Shutdown shuts down the database .
2153	Sync synchronizes the gateway .
2154	Reset resets the gateway .
2155	LeaderAddress returns the cluster address for the cluster .
2156	waitLeadership waits until the leader is reached .
2157	currentRaftNodes returns a list of raft nodes .
2158	achedRaftNodes retrieves the list of raft nodes from the gateway .
2159	dqliteMemoryDial returns a connection to a connection .
2160	DqliteLog creates a logite log message
2161	MetadataAsMap mocks base method
2162	MetadataAsOperation returns the metadata for the response .
2163	MetadataAsStringSlice returns a slice of strings .
2164	MetadataAsStruct implements the Response interface for Response .
2165	Load loads the CSV report file .
2166	Write writes the CSV report
2167	AddRecord adds a record to the report
2168	LoadConfig loads the configuration from the given path .
2169	SaveConfig saves the configuration to disk .
2170	Get returns the contents of the given path .
2171	ConfigPath returns the path of the config .
2172	ServerCertPath returns the path to the remote server .
2173	NewConfig returns a new Config object
2174	checkForPreDumpSupport is used to check if a pre - pre - pre - pre - pre - pre - pre - pre - pre - process .
2175	preDumpLoop is part of the migration interface .
2176	newRoot returns a new cobra command
2177	APIExtensionsCount returns the number of available extensions .
2178	SelectURIs returns a slice of URIs with the given parameters .
2179	SelectStrings returns a slice of strings .
2180	scanSingleColumn scans a single column for a single column .
2181	LazyHandler returns a Handler that sets the log level .
2182	Callers returns a slice of Callers .
2183	name returns the name of the call .
2184	TrimBelow implements the Tracer interface .
2185	TrimAbove implements the Tracer interface .
2186	TrimBelowName removes the given name from the trace .
2187	TrimAboveName implements the Tracer interface .
2188	TrimRuntime truncates the given trace .
2189	GetCaps returns the capabilities for the given path
2190	SetCaps sets the capabilities for the given path .
2191	Read implements the ProgressReader interface .
2192	Supported returns true if the given path is supported
2193	GetProject returns the quota for the given path .
2194	SetProject sets the project id
2195	DeleteProject deletes a project
2196	GetProjectUsage returns the usage of the project .
2197	SetProjectQuota sets the quota for a project
2198	backupLoadByName retrieves a backup by name .
2199	backupCreate creates a backup backup .
2200	Rename renames the backup .
2201	Delete deletes the backup .
2202	backupFixStoragePool is used to restore the storage pool .
2203	Count returns the count of the given column .
2204	CountAll returns the number of rows in the database .
2205	InitTLSConfig initializes the TLS configuration .
2206	copyContainerThinpool copies the container into the container .
2207	copyContainerLv copies the container to the container .
2208	copyContainer copies a container into the container .
2209	copyVolume copies the volume to a volume .
2210	GetPrivateImage returns the private image for the given fingerprint .
2211	GetPrivateImageFile returns an ImageFileResponse for the given fingerprint .
2212	GetImageAliasNames returns all the aliases for the stream .
2213	ProtoRecv reads a message from the websocket .
2214	ProtoSend sends a message to websocket .
2215	ProtoSendControl sends a message to the websocket connection .
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode retrieves a list of containers from the given node .
2218	Retry attempts to retry the database .
2219	IsRetriableError returns true if the error is a retryable error .
2220	AppArmorProfile returns the profile of the profile .
2221	StoragePoolVolumeCreate creates a storage volume .
2222	ContainerStorageReady returns true if the container is ready for container storage .
2223	ContainerCreateFromImage creates a new instance of a container
2224	ContainerSnapshotRename implements storage . StorageRtrfs .
2225	ContainerSnapshotCreateEmpty creates a new snapshot for the given snapshot .
2226	btrfsSubVolumesDelete deletes the subvolumes .
2227	isBtrfsSubVolume returns true if the given subvolPath exists
2228	SelectConfig returns a map of values from a table .
2229	UpdateConfig updates config .
2230	deleteConfig deletes the given keys .
2231	FormatSection returns a string representation of a section .
2232	GetProjects returns a list of projects
2233	GetProject retrieves a project by name .
2234	CreateProject creates a new project
2235	UpdateProject updates a project
2236	RenameProject rename project
2237	Read implements io . Reader
2238	Write implements io . Writer
2239	NewCanceler returns a new Canceler instance
2240	Cancelable returns true if the request is canceled .
2241	Cancel cancels the request .
2242	CancelableDownload cancels the request .
2243	nodeGet is used to fetch a cluster
2244	clusterMemberConfig returns the cluster member configuration for the given cluster .
2245	clusterPutDisable is used to create a new cluster
2246	tryClusterRebalance tries to reconnect to a cluster
2247	internalPostClusterPostRebalance is used to create a new cluster .
2248	internalPostClusterPostPromote is used to create a new cluster
2249	Filters returns the list of filters in the given entity .
2250	Parse parses a struct into a Mapping struct .
2251	findStruct finds a struct by name .
2252	parseStruct parses the fields of a struct .
2253	GetProfileNames returns the profile names of the profile .
2254	GetProfiles returns all profiles
2255	GetProfile retrieves a profile by name .
2256	CreateProfile creates a profile
2257	UpdateProfile updates a profile
2258	RenameProfile rename a profile
2259	Load loads the schema from the schema .
2260	Dump returns a map of values
2261	GetRaw returns the value for the given key .
2262	GetString returns the value for the given name .
2263	GetBool returns true if the map exists .
2264	GetInt64 returns the value of an int64 .
2265	update updates the values in the map .
2266	set sets the value for the given key .
2267	IsSchemaTableExist checks if the table exists .
2268	selectSchemaVersions returns the number of rows in the database .
2269	selectTablesSQLSQL returns a list of all SQL statements in the database .
2270	createSchemaTable creates a new table .
2271	insertSchemaVersion inserts a new schema version .
2272	NewState creates a new state .
2273	containerLXCUnload is part of the container interface .
2274	containerLXCInstantiate creates a containerLXC .
2275	initStorage initializes the storage .
2276	OnNetworkUp is part of the container interface .
2277	setupHostVethDevice sets the host name for the given device .
2278	getLxcState returns the state of the container .
2279	StorageStartSensitive returns true if the container is in the container .
2280	deviceExistsInDevicesFolder returns true if the given path exists .
2281	createDiskDevice creates a disk device
2282	setNetworkRoutes is used to set network routes
2283	Path returns the path of the container .
2284	masInterfaces returns the interfaces for the container .
2285	getSystemHandler returns a handler for syslog .
2286	findNvidiaMinor finds the next nvidia device .
2287	GetLogger returns a logger based on the given syslog file .
2288	SetLogger sets the logger
2289	WaitRecord waits until the given channel is closed .
2290	AddContext adds a context to the logger .
2291	NewDottedVersion creates a new DottedVersion .
2292	Parse parses a string into a DottedVersion .
2293	String returns a string representation of the DottedVersion .
2294	Compare compares two DottedVersion objects .
2295	projectCreateDefaultProfile creates a default profile
2296	projectChange is used to update a project
2297	projectIsEmpty returns true if the project is empty
2298	GetCertificateFingerprints returns the list of certificates for the given certificate .
2299	GetCertificates returns a list of certificates .
2300	GetCertificate returns the certificate associated with the given fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate .
2303	DeleteCertificate deletes a certificate
2304	containerMetadataTemplatesGet returns a list of templates for the given project .
2305	containerMetadataTemplatesPostplatesPostPut returns a response with the given name .
2306	containerMetadataTemplatesTemplatesDelete deletes the container metadata for a container
2307	getContainerTemplatePath returns the path to the container .
2308	Error implements the error interface .
2309	Error implements the error interface for ErrorList .
2310	add adds an error to the list .
2311	UpdateSchema updates the schema .
2312	doProfileUpdateCluster is used to update a profile
2313	doProfileUpdateContainer is used to update a profile
2314	getProfileContainersInfo returns the list of containers for the given profile .
2315	GetNetworkNames returns network names
2316	GetNetworks returns all network networks
2317	GetNetwork returns a network by name .
2318	GetNetworkLeases returns all network leases for a given name .
2319	GetNetworkState returns the network state
2320	CreateNetwork creates a new network .
2321	UpdateNetwork updates a network .
2322	RenameNetwork rename a network
2323	Open opens a database .
2324	URLEncode returns the URL for the given path .
2325	IsUnixSocket returns true if path is a Unix socket socket
2326	HostPath returns the host path to the host .
2327	FileMove moves a file to a file
2328	DirCopy copies source directory to destination directory .
2329	StringMapHasStringKey returns true if m is a string
2330	TextEditor creates a text editor
2331	WriteTempFile writes a temp file to the given directory .
2332	RenderTemplate renders the given template .
2333	Every returns the first occurrence of the given interval .
2334	StoragePoolMount returns true if the storage pool is mounted .
2335	Dump dumps a table .
2336	dumpTable dumps a table .
2337	ProjectHasProfiles returns true if the given name exists .
2338	ProjectNames returns the names of the project .
2339	ProjectMap returns a map of projects .
2340	ProjectHasImages returns true if the given name exists .
2341	ProjectUpdate updates the project .
2342	GetCluster returns the cluster
2343	UpdateCluster updates the cluster
2344	GetClusterMemberNames returns the list of cluster members
2345	GetClusterMembers returns all cluster members
2346	GetClusterMember returns the cluster member
2347	RenameClusterMember rename a cluster member
2348	Disconnect disconnects the listener
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the client has a client certificate
2351	GenerateClientCertificate generates a client certificate
2352	LoadModule loads module
2353	Parse parses a Go package .
2354	PprofAddress returns the address of the endpoint
2355	PprofUpdateAddress updates pprof address
2356	NewMethod creates a new method .
2357	Generate generates a new method .
2358	fillSliceReferenceField fills the field of the field .
2359	StoragePoolID returns the ID of the storage pool .
2360	StoragePoolIDsNotPending returns the id of the storage pool .
2361	StoragePoolNodeJoin is part of the ClusterPool interface .
2362	StoragePoolJoinCeph is used to create a CephPool
2363	StoragePoolConfigAdd is part of the ClusterPool interface .
2364	StoragePoolCreatePending creates a new storage pool .
2365	StoragePoolCreated is part of the ClusterTx interface .
2366	StoragePoolErrored implements the ClusterPool interface .
2367	StoragePoolNodeConfigs returns the config for the given pool .
2368	StoragePoolsGetDrivers returns the list of pools for the specified pool
2369	StoragePoolGetID returns the ID of the given pool .
2370	StoragePoolGet returns the storage pool .
2371	storagePoolNodes returns the list of nodes in the cluster .
2372	StoragePoolConfigGet returns the configuration for the given pool .
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds the storage config to the storage .
2375	StoragePoolUpdate updates the storage pool
2376	StoragePoolConfigClear clears the storage pool .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames returns the names of the given pool .
2379	StoragePoolVolumesGet returns the volumes for the specified pool .
2380	StoragePoolNodeVolumesGet returns the volume volumes for the specified pool .
2381	storagePoolVolumesGet returns the list of storage volumes for the specified node .
2382	StoragePoolVolumesGetType returns the list of volumes for the specified volume .
2383	StoragePoolVolumeSnapshotsGetType returns the list of snapshots for the specified volume .
2384	StoragePoolVolumesGetTypeVolumesGetType returns the list of volumes for a given volume .
2385	StoragePoolVolumeGetType returns the storage volume .
2386	StoragePoolNodeGetTypeGetType returns the storage volume for a given volume .
2387	StoragePoolNodeVolumeGetTypeByProjectType returns the storage volume for a given project .
2388	StoragePoolVolumeUpdate updates the storage volume .
2389	StoragePoolVolumeDelete deletes the specified volume .
2390	StoragePoolVolumeRename is used to create a storage volume .
2391	storagePoolVolumeReplicateIfCeph is the same as StoragePoolReplicateIfCeph but does nothing .
2392	StoragePoolVolumeCreate creates a new storage pool .
2393	StoragePoolVolumeGetTypeID returns the volume ID for a given volume .
2394	StoragePoolNodeVolumeGetTypeID returns the storage for a given volume .
2395	StoragePoolVolumeTypeToName converts a string to a storage pool .
2396	DeviceAdd adds a device to the database .
2397	Devices returns the devices for the given project .
2398	Patches returns a slice of patches .
2399	PatchesMarkApplied adds a patch to the database .
2400	EntityType returns the name of the entity .
2401	entityPost returns a string representation of a entity .
2402	stmtCodeVar returns a string representation of the given entity .
2403	destFunc returns a string representation of a struct .
2404	CompareConfigs compares two configuration objects .
2405	CopyConfig returns a copy of the given config .
2406	NewNotifier returns a new Notifier .
2407	Events returns a function that can be used to update events .
2408	eventsConnect returns a list of events .
2409	StoragePoolInit initializes the storage pool .
2410	getAAProfileContent returns the profile content for the given container
2411	AASoadProfile loads a profile from a container
2412	AADestroy removes an apparmor .
2413	AParseProfile is part of the Container interface .
2414	getSystemHandler returns a log handler for syslog .
2415	NotifyUpgradeCompleted is used to notify the upgrade .
2416	KeepUpdated returns a function that will periodically update the state of the given state .
2417	maybeUpdate checks if a cluster is updated
2418	NewServer creates a new server .
2419	StartStatusCheck starts the server .
2420	SyncProjects synchronizes all projects from the server .
2421	AddProject adds a project
2422	DeleteProject deletes a project
2423	RenameProject adds a project to the server .
2424	IsAdmin checks if a user is admin
2425	HasPermission returns true if the given user has permission .
2426	rsyncSend sends a request to the remote server .
2427	rsyncSendSetup is used to create a sync command
2428	tlsClientConfig returns a tls . Config . Config .
2429	tlsCheckCert checks if the request is valid
2430	internalContainerMovedContainerMovedPost is used to create a sync container
2431	containerPostCreateContainerMountPoint is part of the DaemonMountPoint interface .
2432	Contains returns true if the given device contains the given device .
2433	Update updates the list of devices
2434	DeviceNames returns the names of the devices .
2435	Infof log message
2436	Debugf logs a formatted message
2437	Warnf logs an error .
2438	Errorf implements Logger .
2439	Critf logs an error message
2440	eventForward sends an event to the event channel .
2441	StorageProgressReader returns an io . ReadCloser for the given operation .
2442	StorageProgressWriter returns an io . Writer for the given operation .
2443	GetLSBRelease returns the version of the OS .
2444	Reset resets the given imports .
2445	Append appends a snippet to the source .
2446	ContainerToArgs converts a container to a container .
2447	ContainerNames returns the names of the container names .
2448	ContainerNodeAddress returns the address of a container .
2449	ContainersListByNodeAddress returns the list of containers in the cluster .
2450	ContainerListExpanded returns a list of all the containers in the cluster .
2451	ContainersByNodeName returns a map of containers by name .
2452	SnapshotIDsAndNames returns the snapshot IDs for the given name .
2453	ContainerNodeList returns the list of containers in the cluster .
2454	ContainerNodeProjectListList returns the list of containers in the cluster .
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the name of the container .
2457	ContainerConfigClear clears the container config .
2458	ContainerConfigGet returns the value of the container config .
2459	ContainerConfigRemove removes the container config .
2460	ContainerSetStateful sets the stateful stateful .
2461	ContainerProfilesInsert adds profiles to the container .
2462	ContainerProfiles returns the list of profiles .
2463	ContainerConfig returns a map of container configurations .
2464	ContainerSetState is part of the Cluster interface .
2465	ContainerUpdate updates the container .
2466	ContainerLastUsedUpdate updates the last time in the cluster .
2467	Container get snapshots
2468	ContainerGetSnapshotsFull is part of the Cluster interface .
2469	ContainerNextSnapshot returns the number of containers in the cluster .
2470	ContainerPool returns the name of the container pool .
2471	ContainerGetBackup is part of the ClusterBackup interface .
2472	ContainerGetBackups returns the list of containers in the cluster .
2473	ContainerBackupCreate is part of the ClusterBackup interface .
2474	ContainerBackupRemove removes a container from the cluster
2475	ContainerBackupRename is used to create a new container backup
2476	ContainerBackupsGetExpired returns the list of containers in the cluster .
2477	DefaultOS returns an initialized OS .
2478	Init initializes the OS .
2479	GetWebsocket returns a websocket connection
2480	Refresh refreshes the operation .
2481	CancelTarget cancels the target operation .
2482	GetTarget returns the target operation
2483	up initializes the endpoint
2484	Down stops the endpoint
2485	serveHTTP serves HTTP requests .
2486	closeListener closes the listener .
2487	activatedListeners returns a map of registered listeners .
2488	CandidServer returns the ID of the client
2489	RBACServer returns the configuration for the server .
2490	AutoUpdate interval
2491	MAASController returns the MAAS controller .
2492	OfflineThreshold returns the duration of the cluster .
2493	ConfigGetString returns the value for a given key .
2494	ConfigGetBool returns true if the given key exists .
2495	ConfigGetInt64 returns the value of the given key .
2496	ClusterAddress returns the address of the endpoint
2497	Debug debug message
2498	RestoreServer creates a new http server
2499	projectParam returns the project parameter
2500	queryParam returns the query param for the given key .
2501	newDb returns a new cobra command
2502	Description returns the description of the operation .
2503	Perform returns the permissions for the operation
2504	OperationsUUIDs returns all the operations in the cluster .
2505	OperationNodes returns all nodes in the cluster .
2506	OperationByUUID returns the operation for the given UUID .
2507	OperationAdd adds an operation to the cluster .
2508	OperationRemove removes an operation from the cluster .
2509	operation returns all operations in the cluster .
2510	expireLogsTask returns a function that can be used to create log files .
2511	absPath returns the absolute path of the given path .
2512	Keys returns the keys in the schema .
2513	Defaults returns default values
2514	mustGetKey returns a Key for the given name .
2515	assertKeyType asserts that the given type is a key type .
2516	validate validates the key
2517	GetStoragePoolVolumes returns the volumes for a given pool
2518	GetStoragePoolVolume returns a storage volume .
2519	CreateStoragePoolVolume creates a storage volume .
2520	CreateStoragePoolVolumeSnapshot creates a new storage volume snapshot
2521	Get storage volume snapshots
2522	Get storage volume snapshot
2523	Update storage volume snapshot
2524	Migrate storage volume
2525	Move storage volume
2526	UpdateStoragePoolVolume updates the storage pool
2527	Delete storage pool
2528	Rename storage volume
2529	create storage pool
2530	containerGetParentAndSnapshotName returns the name of the parent snapshot .
2531	containerLoadFromAllProjects returns a list of containers for the given project .
2532	containerLoadNodeAll returns a list of container nodes .
2533	containerLoadNodeProjectAll returns a list of containers for a given project .
2534	heartbeatNode is used to heartbeat a raft node
2535	dotPrefixMatch returns true if the command is a prefix match .
2536	ContainerMount is part of the Storage interface .
2537	ContainerStorageReady returns true if the container is ready for a container .
2538	AskChoice asks a question to ask a question to ask a question
2539	AskInt asks a question to ask for a question
2540	AskString asks a question to ask for a question
2541	AskPassword returns the password for the given question .
2542	AskPasswordOnce asks the password for a password
2543	askQuestion asks a question to ask for a question
2544	readAnswer reads the answer from stdin
2545	profilePost posts a profile
2546	profileDelete deletes a profile
2547	IsRootDiskDevice returns true if the device is root .
2548	GetRootDiskDevice returns the root device for the given devices .
2549	ForwardedResponse creates a Forwarded response .
2550	ForwardedResponseIfTargetIsRemote returns a response with the given target node .
2551	ForwardedResponseIfContainerIsRemote returns a response for a container
2552	ForwardedOperationResponse returns a response response .
2553	Done implements the ProgressRenderer interface .
2554	Update implements ProgressRenderer .
2555	Warn writes the status of the progress .
2556	UpdateProgress updates the progress .
2557	UpdateOp updates the progress .
2558	updateFromV6 is used to update a v6 node
2559	localCreateListener creates a new listener
2560	NewStmt creates a new Stmt .
2561	Generate generates a new statement .
2562	register adds a sql statement to the stmt .
2563	httpsLXD creates a new container .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of the raft node .
2566	RaftNodeFirst is part of the raft . Node interface .
2567	RaftNodeAdd adds a new node to the raft .
2568	RaftNodeDelete deletes the given id .
2569	RaftNodesReplace removes all nodes from the node .
2570	initCGroup initializes cgroup
2571	sqliteDirectAccess is the same as sqlite . ExecuteDirectAccess .
2572	ContainerGet retrieves a container by name .
2573	ContainerID returns the id of the container .
2574	ContainerExists returns true if the given project exists .
2575	ContainsFields returns true if the fields of the mappings match the provided fields .
2576	FieldByName returns the field by name .
2577	FieldColumnName returns the name of the field .
2578	FilterFieldByName returns a Field by name .
2579	ColumnFields returns the fields of the Mapping .
2580	ScalarFields returns the fields of this mapping .
2581	RefFields returns the fields of this mapping .
2582	Column returns the column name .
2583	ZeroValue returns the zero value of the field .
2584	FieldColumns returns a string representation of a field .
2585	FieldArgs returns a string representation of a field .
2586	FieldParams returns a list of fields for the given fields .
2587	FieldCriteria returns a comma separated list of fields .
2588	initDataClusterApply initializes a new cluster .
2589	JsonFormatEx formats a JSON string into a Format .
2590	formatLogfValue returns a string representation of a logf .
2591	ResolveTarget resolves the target target name .
2592	Write implements io . Writer
2593	updateNodeVersion updates the node version .
2594	selectNodesVersions selects all nodes in the database .
2595	GetArchitectures returns the architecture of the architecture .
2596	RuntimeLiblxcVersionAtLeast returns true if the given major version is less than 1 .
2597	GetExecPath returns the executable path
2598	Connect connects to a container
2599	ConnectIfContainerIsRemote connects to a container .
2600	ConnectIfVolumeIsRemote is used to connect to a container .
2601	SetupTrust creates a TLS certificate
2602	Get storage pool
2603	GetStoragePool returns the storage pool
2604	CreateStoragePool creates a new storage pool
2605	UpdateStoragePool updates the storage pool
2606	DeleteStoragePool deletes a storage pool
2607	Get storage pool
2608	initDirs initializes the directories .
2609	Config returns the config for the node .
2610	UpdateConfig updates the config .
2611	Config returns the config for the cluster .
2612	UpdateConfig updates config .
2613	storagePoolClusterConfigForEtag returns a map of StoragePoolConfig for the given database .
2614	GetEvents returns the event listener
2615	LogfmtFormat returns a formatted format for logging .
2616	StorageVolumeNodeAddresses returns the list of nodes in the cluster .
2617	Storage volume node
2618	StorageVolumeConfigGet returns the config for the specified volume .
2619	StorageVolumeDescriptionGet returns the description of a volume .
2620	StorageVolumeIsAvailable returns true if the given volume is available .
2621	StorageVolumeDescriptionUpdate updates the specified volume description .
2622	StorageVolumeConfigAdd adds the specified storage config to the storage .
2623	StorageVolumeConfigClear clears the storage volume config .
2624	storageVolumeIDsGet returns the IDs of the specified volume .
2625	StorageVolumeCleanupImages deletes the specified images .
2626	StorageVolumeMoveToLVMThinPoolKey deletes the volume pool .
2627	Lprintf writes a formatted string to the buffer .
2628	code returns the code of the source code .
2629	Pretty prints a human readable representation of the input .
2630	NetworkPublicKey returns the public key
2631	NetworkPrivateKey returns the private key
2632	NetworkCert returns the network certificate for this endpoint .
2633	NetworkAddress returns the address of the endpoint .
2634	NetworkUpdateAddress updates the network address
2635	NetworkUpdateCert is part of the Endpoints interface .
2636	networkCreateListener creates a new net . Listener
2637	Accept implements net . Conn .
2638	Config sets the TLS configuration
2639	IsOffline returns true if the node is offline .
2640	NodeByAddress returns the node with the given address .
2641	NodePendingByAddress returns the node with the given address .
2642	NodeByName retrieves a node by name .
2643	NodeName returns the name of the node .
2644	NodeAddress returns the address of the node .
2645	NodeIsOutdated returns true if the node is outbound .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename updates the node with the given name .
2648	nodes returns a list of nodes .
2649	NodeAdd adds a new node to the cluster .
2650	NodePending updates the pending pending pending updates .
2651	NodeUpdate updates a node .
2652	NodeRemove removes a node from the cluster .
2653	NodeHeartbeat is part of the Cluster interface .
2654	NodeIsEmpty checks if the node is empty .
2655	NodeClear removes a node from the cluster .
2656	NodeOfflineThreshold returns the threshold for the cluster .
2657	NodeUpdateVersion is part of the Cluster interface .
2658	Transaction is part of the database .
2659	rollback rolls back the given reason .
2660	ProfileURIs queries the profile for a profile .
2661	ProfileGet retrieves a profile by name .
2662	ProfileExists checks if a profile exists
2663	ProfileConfigRef returns a map of profile references to profile .
2664	ProfileUsedByRef returns the profile used by a profile .
2665	ProfileCreate creates a profile .
2666	ProfileRename is part of the Cluster interface .
2667	ProfileDelete deletes a profile .
2668	ServerTLSConfig is used to create a TLS configuration .
2669	NetworkInterfaceAddress returns the address of the network interface .
2670	IsAddressCovered returns true if the given address is a valid address .
2671	SelectObjects selects all objects from dest .
2672	DeleteObject removes an object from the database .
2673	loop loops until the task is closed .
2674	IsTerminal returns true if the terminal is terminal .
2675	socketUnixListen creates a new socket listening on the given path .
2676	socketUnixRemoveStale removes the socket from the local socket
2677	socketUnixSetPermissions sets the Unix permissions on the given path
2678	socketUnixSetOwnership sets the ownership of a Unix socket
2679	cephOSDPoolExists returns true if the given user exists
2680	cephOSDPoolDestroy deletes the specified pool
2681	cephRBDVolumeExists checks if the given volume exists
2682	cephRBDSNapshotProtect is used to create a new cluster .
2683	cephRBDCloneCreate creates a clone of the cluster
2684	cephRBDSDapshotListClones retrieves the list of snapshots from the cluster .
2685	cephRBDVolumeMarkDeleted deletes the specified volume .
2686	cephRBDVolumeUnleted removes the specified volume from the cluster
2687	cephRBDVolumeRename is used to create a new cluster .
2688	cephRBDVolumeSnapshotRename is used to create a new cluster snapshot
2689	cephRBDSDSapshotDelete deletes a snapshot from the cluster .
2690	cephRBDVolumeCopy is part of the Cluster interface .
2691	cephRBDVolumeListSnapshots returns the list of snapshots for the specified volume .
2692	getRBDSize returns the number of bytes written to disk .
2693	getRBDFilesystem returns the root filesystem for the given storage .
2694	copyWithoutSnapshotsFull copies the contents of the container to the container .
2695	copyWithoutSnapshotsSacked copies the source to the source .
2696	GetConfigCmd returns a command for the given port
2697	SetConfigCmd is used to set the default configuration
2698	NewSharder creates a new sharder .
2699	NewRouter creates a new router .
2700	renewUserCredentials renews the user s credentials .
2701	NewLocalClient returns a new LocalClient
2702	AddSpanToAnyExisting adds a span to the context .
2703	InstallJaegerTracerFromEnv creates a jaegerTracer from a jaeger
2704	UnaryClientInterceptor returns a new UnaryClientInterceptor
2705	StreamClientInterceptor returns a StreamClientInterceptor .
2706	UnaryServerInterceptor returns a new UnaryServerInterceptor .
2707	StreamServerInterceptor returns an io . StreamServerInterceptor
2708	CloseAndReportTraces closes all trace traces .
2709	newWriter returns a new Writer .
2710	For returns the ConstantBackOff field s value .
2711	Log implements the logger interface .
2712	Format implements the fmt . Formatter interface .
2713	NewGRPCLogWriter returns a new GRPCLogWriter
2714	Read reads the configuration from the file .
2715	Write writes the config to disk .
2716	Read implements io . Reader
2717	Write implements io . Writer
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer starts a git hook server
2720	newLoggingPipe creates a new logger
2721	Read implements io . Reader
2722	Write implements io . Writer
2723	Accept implements net . Conn .
2724	Close closes the listener .
2725	errorf returns an error with the given error code .
2726	InitWithKube initializes a ServiceEnv .
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns the kubernetes client
2729	NewHasher returns a new Hasher instance
2730	HashJob returns the hash of the given job ID .
2731	HashPipeline returns the hash of the pipeline .
2732	Status returns a list of all workers
2733	Cancel cancels a job
2734	Conns returns a list of all the clients in the cluster
2735	Clients returns a list of all clients in the cluster
2736	NewClient creates a new client
2737	RunFixedArgs runs the command line arguments .
2738	RunBoundedArgs is a wrapper around RunBoundedArgs .
2739	Run runs the command .
2740	ErrorAndExit logs an error message .
2741	ParseCommit parses a git commit .
2742	ParseBranch parses a branch .
2743	ParseFile parses a file .
2744	Set sets the string value .
2745	SetDocsUsage sets the documentation for the command
2746	makeCronCommits creates a new cron commit .
2747	Writer returns an io . Writer for the given name .
2748	Reader implements io . Reader .
2749	Delete deletes the given name .
2750	Walk is used to walk the given path .
2751	Exists checks if the given name exists
2752	GetBlock returns a block with the given hash .
2753	Health checks if the server is healthy
2754	split splits a path into a base path .
2755	ValidatePath validates path
2756	MatchDatum returns true if the data matches the given data .
2757	NewCacheServer creates a new cache server
2758	authorizePipelineOp authenticates a pipeline operation .
2759	sudo is used to authenticate the user
2760	setPipelineDefaults sets the default values for the pipeline .
2761	increment GC generation
2762	NewDebugServer creates a new debug server .
2763	Health returns the health status of the cluster .
2764	newObjBlockAPIServer creates a new instance of objBlockAPIServer .
2765	watchGC is used to watch the GC API
2766	splitKey splits a key into a string
2767	NewWriter creates a new writer .
2768	Write writes buf to w .
2769	PrintRepoHeader prints a writer to w .
2770	PrintRepoInfo prints information about the repository .
2771	PrintDetailedRepoInfo prints information about a repository .
2772	PrintBranch prints the current branch info .
2773	PrintCommitInfo prints information about a commit .
2774	PrintDetailedCommitInfo prints information about a commit .
2775	PrintFileInfo prints the contents of a file .
2776	PrintDetailedFileInfo prints information about a fileInfo .
2777	Add adds a string to the list .
2778	RetryNotify implements the Backoff function for Backoff .
2779	Get retrieves the cache from the cache
2780	Delete deletes the given id .
2781	PrintJobInfo prints information about a job .
2782	PrintPipelineInfo prints the pipeline information about the pipeline .
2783	PrintWorkerStatus prints the status of a worker .
2784	PrintDetailedJobInfo prints detailed information about a job .
2785	PrintDetailedPipelineInfo prints a PrintablePipelineInfo .
2786	PrintDatumInfo prints the datum of the datum .
2787	PrintDetailedDatumInfo prints detailed information about the datum .
2788	PrintFile prints a file
2789	ShorthandInput returns a string representation of the input .
2790	Retrieve retrieves credentials from Vault
2791	IsExpired returns true if the vault is expired
2792	NewBranch creates a new branch .
2793	NewCommit creates a new commit .
2794	NewCommitProvenance creates a new CommitProvenance
2795	NewFile returns a new File .
2796	CreateRepo creates a new repository
2797	InspectRepo inspects a repository
2798	ListRepo returns a list of RepoInfo
2799	DeleteRepo deletes a repository
2800	BuildCommit builds a commit .
2801	StartCommitParent starts a new commit .
2802	FinishCommit implements the API .
2803	InspectCommit is part of the API interface .
2804	BlockCommit is part of the API interface .
2805	ListCommit lists all commits in the repository .
2806	ListCommitF lists all commits in the given repository .
2807	ListCommitByRepo lists all commits in the repository .
2808	CreateBranch creates a new branch
2809	InspectBranch inspects a branch
2810	ListBranch returns a list of all branches .
2811	SetBranch is part of the API .
2812	DeleteBranch deletes a branch
2813	DeleteCommit deletes a commit
2814	FlushCommit is part of the API interface .
2815	FlushCommitF flushes all commits to the given repository .
2816	FlushCommitAll is part of the API interface .
2817	SubscribeCommit creates a new commit iterator .
2818	SubscribeCommitF is used to subscribe a commit .
2819	PutObjectAsync creates a new PutObjectWriteCloserAsync .
2820	PutObject is part of the APIClient interface .
2821	PutObjectSplit is part of the API . Reader interface .
2822	GetObject gets the object with the given hash .
2823	GetObjectReader returns io . ReadCloser
2824	GetObjects retrieves all objects from the given io . Writer .
2825	TagObject adds a tag to the object
2826	ListObject lists all objects in the object .
2827	InspectObject inspects the object
2828	GetTag gets the tag for the given tag .
2829	GetTagReader returns a reader for the specified tag .
2830	ListTag lists all tags
2831	Compact is part of the API interface .
2832	NewPutFileClient creates a new PutFileClient .
2833	PutFileOverwrite implements the PutFile interface .
2834	Close closes the file .
2835	CopyFile copies the contents of src to dest .
2836	GetFile is part of the API .
2837	GetFileReader returns a reader for a given commit .
2838	GetFileReadSeeker implements the GetFileReadSeeker interface .
2839	InspectFile is part of the API interface .
2840	ListFile lists all files in the repository .
2841	ListFileHistory lists all files in the given commit .
2842	ListFileF lists all files in the given commit .
2843	Walk is used to walk a file
2844	DeleteFile deletes a file
2845	Write implements io . Writer interface .
2846	Close implements the Put interface .
2847	PrettyPrintVersionNoAdditional returns a human - readable version of the version .
2848	recursiveBlockQuoteExamples recursively recursively recursively recursively .
2849	errMissingField returns an error if the field is missing .
2850	validateFields validates the fields of the request .
2851	putConfig stores the given config .
2852	getConfig retrieves the configuration from storage .
2853	Serve starts the server
2854	NewPuller creates a new puller
2855	PullTree pulls a tree from a tree .
2856	Push pushes a commit to the given repository .
2857	PushObj pushes an object to the repository .
2858	PushFile pushes a file to the given file .
2859	Dump dumps the debug information
2860	Profile writes a profile with the given profile .
2861	Binary writes data to the client .
2862	RegisterCacheStats registers a metric stats for a group .
2863	wait blocks until the counter is reached .
2864	RunWorkload runs a worker .
2865	createRepo creates a new repo
2866	advanceCommit is used to advance the commit to the worker .
2867	RandString returns a random string representation of a random string .
2868	NewReader returns a new io . Reader .
2869	iterDir iterates over the given path .
2870	FSSize returns the size of the hash tree .
2871	Diff returns the diff of the given path .
2872	Serialize implements the io . Writer interface .
2873	Deserialize deserializes the HashTree into the given io . Reader .
2874	Copy returns a new HashTree .
2875	Destroy destroys the database .
2876	PutFileOverwrite implements the PutFile interface .
2877	PutDirHeaderFooter adds a header to the database .
2878	PutFileHeaderFooter adds a file header to the database .
2879	deleteDir deletes a directory .
2880	NewReader returns a new io . Reader
2881	Read reads the next merge node .
2882	NewWriter returns a new Writer .
2883	Write implements the Writer interface .
2884	Copy implements io . Reader .
2885	Index returns the index of the writer .
2886	GetRangeFromIndex gets the index from the given index .
2887	NewFilter creates a new filter for the given tree .
2888	PathToTree returns the path to the given path .
2889	Merge merges the reader into the given writer .
2890	Hash returns the hash of the database .
2891	IsGlob returns true if the given pattern matches the given pattern .
2892	GlobLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject returns the hash of the given object .
2894	GetHashTreeTag returns the hash of the given file .
2895	PutHashTree creates a new object with the given tags .
2896	NewChildCursor returns a new ChildCursor .
2897	Next advances the cursor to the cursor .
2898	NewOrdered returns a new Ordered instance .
2899	MkdirAll implements the Mkdir interface .
2900	PutDir adds a directory to the order .
2901	Serialize implements the io . Writer interface .
2902	NewUnordered node constructor
2903	Ordered returns a sorted order .
2904	revokeUserCredentials revoke user credentials
2905	NewAPIServer creates a new APIServer .
2906	String returns a string representation of the pb .
2907	Get the pipeline info
2908	removeStr removes a string from the list .
2909	PublicCertToPEM converts a PEM - encoded certificate to a PEM - encoded certificate .
2910	GenerateSelfSignedCert generates a new certificate for the given address .
2911	ActivateCmd returns a command to activate the given metrics .
2912	DeactivateCmd returns a command to delete the specified port .
2913	LoginCmd creates a new login command
2914	LogoutCmd returns a cobra command .
2915	WhoamiCmd returns a cobra command
2916	CheckCmd returns a cobra command to check whether the given port is valid
2917	GetCmd returns a cobra command
2918	Set scope
2919	ListAdminsCmd returns a command to list admins .
2920	ModifyAdminsCmd mocks base method
2921	GetAuthTokenCmd returns a command to get auth token
2922	Use Auth token
2923	Cmds returns a list of commands for the given metrics
2924	ParseScope parses a string into a Scope .
2925	IsErrNotActivated returns true if the error is not active .
2926	IsErrPartiallyActivated returns true if the error occurred .
2927	IsErrNotSignedIn returns true if the error is not signed .
2928	IsErrBadToken returns true if the error is invalid .
2929	IsErrNotAuthorized returns true if the error is an error .
2930	IsErrInvalidPrincipal returns true if the error is invalid .
2931	IsErrTooShortTTL returns true if the passed error is invalid .
2932	NewDatumFactory returns a DatumFactory .
2933	NewCollection creates a new collection .
2934	Path returns the path of the collection .
2935	getIndexPath returns the index for the given key .
2936	get multi index path
2937	Upsert adds a value to the collection .
2938	get retrieves the value associated with the given key .
2939	List lists all items in the collection .
2940	Watch returns a watch . Watch .
2941	WatchByIndex returns a watcher for the given index .
2942	WatchOne returns a watcher for the given key .
2943	WatchOneF watches the given key .
2944	Get implements the Cache interface for Cache .
2945	Keys returns the keys in the cache .
2946	Clear clears the cache .
2947	NewHTTPServer creates a new http server
2948	NewDeployServer creates a new API server
2949	Export export images
2950	Import imports an image from the given io . Reader
2951	DatumTagPrefix returns the prefix of the given salt .
2952	NewPFSInput creates a new pfs .
2953	NewPFSInputOpts creates a new PFSInputOpts .
2954	NewJobInput creates a new JobInput
2955	NewPipelineInput creates a new PipelineInput .
2956	CreateJob creates a new job
2957	ListJob lists all jobs in the pipeline .
2958	List job
2959	FlushJob flushes all pending jobs to the given queue .
2960	FlushJobAll is part of the API interface .
2961	DeleteJob deletes a job
2962	StopJob stops a job
2963	RestartDatum is part of the APIClient interface .
2964	ListDatum returns a ListDatumResponse
2965	ListDatumF returns a list of DatumF .
2966	InspectDatum retrieves the datum of a given job ID .
2967	Next advances the LogsIter to the iterator .
2968	InspectPipeline inspects a pipeline
2969	ListPipeline returns a list of pipelines
2970	DeletePipeline deletes a pipeline
2971	StartPipeline starts a pipeline
2972	StopPipeline stops the pipeline
2973	RerununpackPipeline deletes a pipeline by name .
2974	CreatePipelineService creates a new Pipeline service
2975	GetDatumTotalTime returns the duration of the process .
2976	Mount is used to mount the given mountpoint
2977	NewBufPool creates a new BufPool .
2978	StorageRootFromEnv returns the storage root of the storage root .
2979	BlockPathFromEnv returns the path to the block .
2980	NewGoogleClient creates a new client
2981	NewGoogleClientFromSecret creates a new Google Cloud Client .
2982	NewGoogleClientFromEnv creates a new Google Cloud Client .
2983	NewMicrosoftClientFromSecret creates a new client from a secret
2984	NewMicrosoftClientFromEnv creates a new client
2985	NewMinioClientFromSecret creates a new minio client
2986	NewMinioClientFromEnv creates a new minio client
2987	NewAmazonClientFromSecret returns a new instance of Amazon AWS Client
2988	NewAmazonClientFromEnv creates a new AWS CloudCredentials from the environment variables
2989	NewClientFromURLAndSecret creates a new client from an object store .
2990	ParseURL parses a URL string into an object .
2991	NewClientFromEnv creates a new client from a storage backend
2992	NewExponentialBackOffConfig returns a new ExponentialBackoff instance
2993	Close closes the underlying reader .
2994	Close closes the backend .
2995	IsRetryable returns true if the client is retryable
2996	RunStdin runs the given command .
2997	RunIODirPath runs the given directory .
2998	NewAuthServer returns a new auth server .
2999	expiredClusterAdminCheck checks if the given credentials is expired
3000	getOneTimePassword returns the OTP password for the given username .
3001	hashToken returns the hash of the given token .
3002	getAuthToken returns the auth token for the context
3003	canonicalSubjects returns the canonical subject of the given subjects .
3004	Matches checks if the given string matches the provided pattern .
3005	OneOfMatches tests if the given string matches the provided pattern .
3006	Equal tests if the expected value is equal .
3007	NotEqual tests if the expected value is equal .
3008	oneOfEquals returns true if the given slice is equal to the given slice .
3009	NoneEquals tests if the expected value is equal .
3010	NoError is part of the interface .
3011	NoErrorWithinT returns an error if the given function fails .
3012	NoErrorWithinTRetry runs the given function on the given function .
3013	YesError indicates whether the given error is an error .
3014	NotNil tests if the object is not nil .
3015	Validate checks if the object is nil .
3016	False tests if the given value is false .
3017	NewSTM creates a new Txn .
3018	NewDryrunSTM initializes a new STM .
3019	newSTMRepeatable creates a new transaction .
3020	newSTMSerializable creates a new TSM serialized transaction .
3021	newSTMReadCommitted returns a txn . Txn .
3022	commit commits the transaction .
3023	Pipelines returns a collection of etcd .
3024	Jobs returns a collection of etcd jobs .
3025	NewTicker creates a new ticker .
3026	nodeToMap converts the given node into a map .
3027	ServiceAccount returns a service account .
3028	ClusterRole returns a new ClusterRole
3029	RoleBinding returns a new RoleBinding
3030	GetSecretEnvVars returns the env variables for the storage backend
3031	PachdService creates a service .
3032	GitookService returns a service service .
3033	EtcdDeployment returns a deployment deployment
3034	EtcdStorageClass returns an instance of EtcdStorageClass
3035	EtcdVolume creates a PersistentVolume .
3036	EcdNodePortService returns a ServicePortService .
3037	EcdHeadlessService returns an instance of EtcdService
3038	EtcdStatefulSet returns an instance of EtcdStatefulSet
3039	DashDeployment returns a Deployment
3040	DashService returns a Service .
3041	WriteSecret encodes a secret
3042	GoogleSecret returns a copy of the given credentials .
3043	WriteDashboardAssets encodes a dashboard asset .
3044	WriteLocalAssets writes the local assets to the given host .
3045	WriteCustomAssets encodes the object to the specified object .
3046	WriteAmazonAssets encodes an AWS CloudForms .
3047	WriteGoogleAssets encodes a Google Cloud Storage .
3048	WriteMicrosoftAssets writes a secret to the given container .
3049	Images returns a list of all the images in the environment .
3050	AddRegistry adds a registry to the registry
3051	withCanonicalRandomizationFactor returns a new ExponentialRandomizationFactor .
3052	Reset resets the interval .
3053	increment current interval
3054	NewBlockAPIServer creates a new BlockAPIServer .
3055	LocalStorage creates a local storage client .
3056	deleteJob deletes a job
3057	writeXML writes v to w .
3058	clean17HashtreePath returns the path to the path of the root directory
3059	NewFromAddress creates a new APIClient .
3060	getUserMachineAddrAndOpts returns the options associated with the environment variable .
3061	NewInCluster creates a new APIClient .
3062	Close closes the connection .
3063	DeleteAll deletes all the credentials
3064	SetMaxConcurrentStreams sets the maximum number of concurrent connections .
3065	WithCtx adds the context to the APIClient .
3066	NewDLock creates a new DLock .
3067	DatumID returns the datum of the given data .
3068	runUserErrorHandlingCode is used to run a user error
3069	HashDatum returns the hash of the pipeline .
3070	HashDatum15 returns the hash of the pipeline .
3071	Status returns the status of the worker .
3072	Cancel cancels the request
3073	mergeStats merges two processes .
3074	mergeChunk merges a chunk into a chunk .
3075	IsCommitNotFoundErr returns true if the error occurred .
3076	IsCommitDeletedErr returns true if the error occurred .
3077	IsCommitFinishedErr returns true if the error occurred .
3078	IsRepoNotFoundErr returns true if the given error occurred .
3079	IsBranchNotFoundErr returns true if the given error occurred .
3080	IsFileNotFoundErr returns true if the given error is not found
3081	Version returns the version of the version .
3082	validateRepoName validates repository name
3083	newDriver returns a new driver .
3084	inspectCommit inspects a commit .
3085	scratchCommitPrefix returns the prefix of the given commit .
3086	scratchFilePrefix returns the file prefix for the given file .
3087	getTreeForFile returns the hash for the given file .
3088	provenantOnInput returns true if there are any of the required inputs .
3089	nodeToFileInfo converts a node to a file .
3090	fileHistory retrieves the history of a file .
3091	upsertPutFileRecords upserts the given file .
3092	ReadRow reads a row from the stream .
3093	NewReporter returns a new Reporter
3094	ReportUserAction implements Reporter .
3095	FinishReportAndFlushUserAction returns a function that executes the given error .
3096	Read reads data from the reader .
3097	ActivateCmd creates a new instance of ActivateCommand
3098	GetStateCmd returns a cobra command
3099	Cmds returns a list of commands for the specified port
3100	NewConfiguration returns a new Configuration object
3101	Repos returns a collection of repositories .
3102	PutFileRecords returns a collection of file records for the given folder .
3103	Commits returns a collection of commits .
3104	Branches returns a collection of branches .
3105	OpenCommits returns a collection of openCommits .
3106	NewDAG node constructor
3107	NewNode creates a new node
3108	Sorted returns a sorted list of all the parents .
3109	Children returns a list of all the leaf nodes .
3110	 Ancestors returns the ancestors of the given ID .
3111	Desccendants returns a list of all descendants of the given id .
3112	Ghost returns a list of all children of the tree .
3113	NewPortForwarder returns a new PortForwarder
3114	Run starts a portforward .
3115	RunForDaemon is part of the PortForwarder interface .
3116	RunForSAMLACS is part of the PortForwarder interface .
3117	RunForDashUI is part of the PortForwarder interface .
3118	RunForDashWebSocket runs a dash socket .
3119	RunForPFS implements portforwarder .
3120	RunForS3Gateway is part of the PortForwarder interface .
3121	Lock the port file
3122	Close closes the PortForwarder .
3123	Unmarshal implements the json . Message interface .
3124	UnmarshalPrev implements the Event interface for Event .
3125	MakeWatcher creates a watcher .
3126	CheckType checks if the given template is valid
3127	NewPool creates a new pool
3128	Do implements the Pool interface .
3129	Close closes the pool .
3130	buildImage builds the docker image
3131	pushImage pushes the image to the docker registry
3132	newMinioClient creates a new minio client
3133	newMinioClientV2 creates a minio client
3134	newMinioWriter creates a new minioWriter .
3135	Close closes the writer .
3136	PipeRepo returns a Repo . Repo
3137	PipRcName returns the name of the pipeline .
3138	GetRequestsResourceListFromPipeline returns a ResourceList from a pipeline .
3139	GetLimitsResourceListFromPipeline returns a ResourceList from a pipeline .
3140	getNumNodes returns the number of nodes in the cluster
3141	GetExpectedNumWorkers returns the number of nodes in the cluster
3142	GetExpectedNumHashtrees returns the number of hashes for the given hash .
3143	FailPipeline is part of the EtcdService interface .
3144	JobInput creates a job from the pipeline .
3145	Create a pipeline request
3146	NewPipelineManifestReader returns a new PipelineManifestReader
3147	NextCreatePipelineRequest returns the next pipeline request .
3148	DescribeSyntaxError decodes the SyntaxError .
3149	UpdateJobState updates the job state .
3150	New returns a new UUID .
3151	Code returns the status of the HTTP error .
3152	NewHTTPError creates a new HTTPError .
3153	NewStorage creates a new storage object .
3154	DeleteAll implements storage . Storage .
3155	Chunk returns a slice of bytes
3156	ChunkReader implements io . Reader .
3157	NewStreamingBytesReader returns a new io . ReadCloser
3158	WriteToStreamingBytesServer writes the given io . Reader to the server .
3159	WriteFromStreamingBytesClient implements io . Writer
3160	NewSidecarAPIServer returns a new APIServer .
3161	NewEnterpriseServer creates a new enterprise server .
3162	validateActivationCode validates an activation code
3163	Activate is used to activate a new instance
3164	Deactivate is used to deactivate a new instance
3165	lookupExtensions returns the extension of the given dir .
3166	Start starts the process
3167	CombinedOutput returns the output of the command .
3168	StdinPipe returns an io . WriteCloser that writes to the command .
3169	StdoutPipe returns an io . ReadCloser from the process .
3170	redupEnvCase returns a slice of strings with the given environment variables .
3171	InputName returns the name of the input input .
3172	SortInput sorts the input in input .
3173	InputBranches returns a list of branch branches .
3174	ValidateGitCloneURL validates GitCloneURL
3175	containsEmpty checks if the given string is empty
3176	NewAPIServer returns a new API server .
3177	Ago returns a human - readable representation of the given timestamp .
3178	TimeDifference returns the time difference between the given time .
3179	Duration converts a duration to a human readable string .
3180	InspectCluster inspects a cluster
3181	Extract is part of the APIClient interface .
3182	ExtractAll is part of the APIClient interface .
3183	ExtractWriter is part of the APIClient interface .
3184	ExtractURL extracts the URL from the given URL .
3185	ExtractPipeline extracts the pipeline from the given pipeline
3186	Restore is part of the Admin interface .
3187	RestoreReader restores the given io . Reader .
3188	RestoreFrom is part of the APIClient interface .
3189	RestoreURL restores the given URL .
3190	IgnoreTypes returns a copy of the given type .
3191	AppendEllipsis appends the given diffs to the list .
3192	IsType returns true if the given type is a type .
3193	NameOf returns the name of the given function .
3194	PointerOf returns the pointer to a pointer .
3195	String returns a string representation of the edit script .
3196	stats returns statistics about the edit script .
3197	connect connects to dst .
3198	EquateNaNs returns an option that matches NaN .
3199	Index returns the path of the path
3200	Key returns the index of the index .
3201	String returns a string representation of the reporter .
3202	FormatType returns the text representation of the given type .
3203	formatMapKey returns a string representation of a map .
3204	formatString returns the string representation of a string .
3205	formatHex returns a string representation of u .
3206	formatPointer returns a string representation of the given value .
3207	Visit returns true if the given value is visited .
3208	retrieveUnexportedField returns the value for the given field .
3209	insert adds a new field to the list .
3210	matchPrefix returns true if the prefix matches the prefix .
3211	canonicalName returns the canonical name of the given type .
3212	FilterPath returns an option that filters the filter function .
3213	normalizeOption normalizes the given options .
3214	FlattenOptions converts src into dst .
3215	CanFormatDiffSlice returns true if v is a diff .
3216	formatASCII returns a string representation of a string .
3217	recoceAdjacentEdits computes the diff of the given edits .
3218	SortKeys returns a slice of keys .
3219	FormatDiff implements the Format interface .
3220	recoceAdjacentRecords returns a list of diffs in the list of diffs .
3221	Diff returns the difference between two strings .
3222	statelessCompare compares two steps .
3223	sanitizeValue returns the value for the given type .
3224	Check implements the Recorder interface .
3225	makeAddressable returns a copy of the given value .
3226	Marshal serializes the field into a Field .
3227	String returns the string representation of the field .
3228	Set implements the Tag interface .
3229	Inject injects a TextMapPropagator
3230	Extract extracts the TextMap from the context .
3231	ToLogRecord converts LogData to a LogRecord .
3232	New creates a new mock instance
3233	StartSpan creates a new span .
3234	RegisterInjector registers an injector
3235	RegisterExtractor registers a new extractor
3236	Inject injects the given span into the wire .
3237	Extract extracts the span from the trace .
3238	ContextWithSpan returns a context with the given span .
3239	Set sets the value for the given tag .
3240	Set sets the value for the given tag .
3241	Set sets the value of the flag .
3242	SetString sets the value of the ipv4 tag
3243	EmitString implements the MockKeyValue interface
3244	EmitLazyLogger implements the MockKeyValue interface for MockKeyValue
3245	RunAPIChecks runs an APICheck .
3246	CheckBaggageValues sets the default BaggageValues .
3247	CheckExtract specifies whether the APICheck option is set .
3248	CheckInject returns a new APICheckOption
3249	CheckAll returns an APICheckOption .
3250	UseProbe configures the APICheck .
3251	WithBaggageItem adds a new baggage item to the span .
3252	Tags returns a map of tags .
3253	Tag returns the tag associated with the given key .
3254	Logs returns a slice of logs
3255	Context returns the span context .
3256	SetTag sets the value of the span .
3257	SetBaggageItem sets the value of the span
3258	GarageItem retrieves the baggage item from the context .
3259	Finish implements the Span interface .
3260	FinishWithOptions implements the MockSpan interface .
3261	String returns a string representation of the MockSpan .
3262	LogFields is a mock
3263	logFieldsWithTimestamp adds a timestamp to the mock .
3264	LogKV logs the given key values .
3265	LogEvent logs an event .
3266	LogEventWithPayload adds a payload to the mock
3267	SetOperationName sets the OperationName field s value .
3268	registriesDirPath returns the path to the system .
3269	loadAndMergeConfig loads the configuration from the given directory .
3270	ParseReference parses a reference to an image reference
3271	NewReference creates a new image reference
3272	CheckAuth checks if a user is authorized
3273	doHTTP is a wrapper around http . HTTPClient
3274	detectPropertiesHelper is a helper function to detect whether or not the Docker proxy is enabled .
3275	detectProperties is a helper function for detectProperties
3276	getExtensionsSignatures returns the extensions of the given manifest .
3277	NewTransport creates a new http . Transport
3278	readRegistryConf reads the registry configuration from the system .
3279	GetRegistries returns a list of registered registries
3280	GetInsecureRegistries returns a list of registered registries .
3281	RegistriesConfPath returns the path to the system .
3282	NewOptionalBool returns a new OptionalBool instance
3283	changeState changes the state of the policy .
3284	Destroy the policy context
3285	policyIdentityLogentityLog returns the name of the specified policy .
3286	reqsForImageRef returns the requirements for the given image .
3287	ParseImageName parses an image name and returns an ImageReference .
3288	BlobInfoFromOCI1Descriptor returns a BlobInfo from the given descriptor .
3289	OCI1FromManifest creates a new OCI1 .
3290	OCI1FromComponents returns OCI1 . OCI1 .
3291	newReference creates a new Docker reference
3292	tagOrDigest returns the digest of the reference .
3293	updateEmbeddedDockerReference updates the embedded Docker image reference
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifest is used to copy the manifest updates
3296	createProgressBar creates a progress bar .
3297	copyConfig copies a blob from src .
3298	diffIDComputationGoboutine computes the diff of the given layer .
3299	computeDiffID computes the DiffID of the given stream .
3300	compressGoroutine writes a gzip file to dest .
3301	newDockerClient returns a docker client .
3302	defaultPolicyPath returns the default policy path
3303	NewPolicyFromFile creates a new policy from a file
3304	NewPolicyFromBytes returns a new Policy instance
3305	newPolicyRequirementFromJSON returns a PolicyRequirement from JSON .
3306	newPRSignedBy creates a new PRSignedBy using the given keypath .
3307	newPRSignedByKeyPath returns a new PRSignedByKeyPath
3308	NewPRSignedByKeyPath returns a new PolicyRequirement .
3309	newPRSignedByKeyData creates a new PRSignedByKey from the given key .
3310	NewPRSignedByKeyData returns a new PolicyRequirement instance
3311	IsValid returns true if the key is valid .
3312	newPRSignedBaseLayer creates a new PRSignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON returns a new PolicyReferenceMatch instance
3314	newPRMExactReference returns a new prmExactReference
3315	newPRMExactRepository returns a new PRMExactRepository
3316	newImageSource creates a new storage image source
3317	getBlobAndLayerID returns the blob ID of the blob .
3318	computeID computes the ID of the image .
3319	PutManifest adds a manifest to the storage .
3320	PutSignatures adds signature to the storage .
3321	newImage creates a new image .
3322	newImageSource creates a new ImageSource .
3323	LoadManifestDescriptor loads a manifest descriptor from an image reference
3324	Close closes the image source .
3325	append appends the list to the list .
3326	isMultiImage returns true if the given image is a multi - image .
3327	lockPath creates a new path lock
3328	unlockPath unlocks the path for the given path .
3329	view returns the contents of the cache .
3330	update updates the cache .
3331	compressedDigest returns the digest of the cache .
3332	appendReplacementCandidates returns a list of candidate candidates for the given bucket .
3333	indexExists checks if the index exists
3334	createSignature creates a signature for the given manifest
3335	ParseReference parses a reference to a reference .
3336	NewReference creates a new image reference
3337	getIndex returns the index of the image .
3338	LoadManifestDescriptor returns the manifest descriptor for the image .
3339	blobPath returns the path to the blob path .
3340	SignDockerManifest signs a manifest with the given digest .
3341	VerifyDockerManifestSignature verifies that the manifest is valid .
3342	newOpenshiftClient returns a new OpenShift client .
3343	doRequest sends a request to the server .
3344	getImage retrieves an image stream by name .
3345	convertDockerImageReference converts a docker image reference to docker image
3346	ensureImageIsResolved ensures that the image is resolved .
3347	newImageDestination creates a new imageDestination
3348	newUntrustedSignature creates a new untrustedSignature
3349	MarshalJSON implements the json . Marshaler interface .
3350	UnmarshalJSON implements the Unmarshaler interface .
3351	verifyAndExtractSignature verifies that the signature matches the given signature .
3352	RewriteReference rewrites a reference to a reference .
3353	getV1Registries returns the registry for the given configuration .
3354	getConfigPath returns the path of the system config
3355	GetRegistries returns a list of all registered registry configurations .
3356	readRegistryConf reads the config file from the config file .
3357	Manifest returns the manifest of the image .
3358	ConfigUpdate updates the image with the given config .
3359	parseImageAndDockerReference attempts to parse a Docker image from a Docker image .
3360	parseDockerReferences parses the given string and returns a reference to it .
3361	ListNames returns a sorted list of names .
3362	NewReference creates a new OSTree reference
3363	signaturePath returns the path to the manifest file .
3364	ValidateImageName validates image name
3365	SplitPathAndImage returns the path to the given reference .
3366	ValidateOCIPath validates the OCI path
3367	ValidateScope validates scope
3368	BlobInfoFromSchemaFromSchema converts a schema to a blobInfo struct .
3369	Schema2Manifest creates a Schema2 .
3370	Schema2Components creates a new Schema2 .
3371	SetAuthentication sets the credentials for the given registry .
3372	RemoveAuthentication removes authentication from the registry
3373	RemoveAllAuthentication removes all auth credentials
3374	readJSONFile reads a json file from the given path .
3375	modifyJSON is used to modify the json file
3376	findAuthentication attempts to find the auth credentials for the given registry
3377	NewDestination returns a new Destination
3378	AddRepoTags adds the tags to the destination .
3379	writeLegacyLayerMetadata writes the legacy metadata to disk .
3380	sendSymlink sends a link to the destination .
3381	sendBytes sends a file to the destination .
3382	sendFile sends a file to the destination .
3383	Commit commits the destination .
3384	imageMatchesRepo returns true if the repository matches the given repository .
3385	resolveImage attempts to resolve the image .
3386	Transport returns an ImageTransport .
3387	StringWithinTransport returns the string representation of the storage .
3388	PolicyConfigurationNamespaces returns the namespaces for the given storage .
3389	GzipDecompressor returns an io . ReadCloser from r .
3390	Bzip2Decompressor returns an io . ReadCloser from r .
3391	XzDecompressor returns an io . ReadCloser from r .
3392	DetectCompression returns the decompressor decompressor for the given input .
3393	newImageDestination creates a new imageDestination
3394	mountBlob is part of the DockerImageDest interface .
3395	bicTransportScope returns a BICTransportScope .
3396	newBICLocationReference returns a BICLocationReference .
3397	parseBICLocationReference parses a BICLocationReference into a BIC location .
3398	NewSourceFromStream creates a new source from a tar file
3399	readTarComponent reads the tar component from the source .
3400	ensureCachedDataIsPresent ensures that the source is present in the source .
3401	loadTarManifest loads the manifest from the source file .
3402	Close closes the source .
3403	newImageDestination creates a new imageDestination
3404	imageLoadGoroutine runs the image load goroutine .
3405	NewReference creates a new ImageReference
3406	createOCIRef creates a new temp file for the given image .
3407	createUntarTempDir creates a temp directory .
3408	destructorPrioritizeReplacementCandidatesCandidatesCandidatesCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCandidateCand
3409	newImageDestination creates a new imageDestination
3410	resolveExistingPathToFully returns the full path to the given path .
3411	newImageDestination creates a new imageDestination
3412	isDirEmpty returns true if the given path is empty .
3413	removeDirContents removes all files from the directory .
3414	GetRepositoryTags returns the tags for the given image .
3415	DefaultCache returns a BlobInfoCacheCache .
3416	compressedDigestLocked returns the digest of the cache .
3417	Close closes the archive .
3418	PutManifest stores the manifest in the image .
3419	Commit commits the image .
3420	tarDirectory creates a directory from src .
3421	ParseStoreReference parses a reference to a storage transport .
3422	Choose digest from manifest
3423	ChooseManifestInstanceFromManifestFromManifestList returns the digest of the manifest .
3424	manifestSchema1FromComponents builds a manifest from a manifest .
3425	manifestDigest returns the digest of the image .
3426	deleteImage deletes the image .
3427	Schema1FromComponents creates a new Schema1 .
3428	initialize initializes the schema1 .
3429	ToSchema2Config converts the schema to a protobuf file .
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns true if the digest matches the given digest .
3432	NormalizedMIMEType returns the normalized MIME type
3433	FromBlob creates a manifest from a manifest
3434	NewReference returns a new ImageReference .
3435	layerPath returns the path for the given digest .
3436	signaturePath returns the path to the given index .
3437	New creates a new pool .
3438	NewFunc returns a new pool .
3439	ProcessTimed is used to process a job
3440	SetSize sets the size of the pool .
3441	GetSize returns the size of the pool .
3442	TL returns the point of the rect .
3443	Br returns the position of the rectangle .
3444	CVBox returns the cvBox for the box .
3445	Points returns a copy of the box .
3446	FOURCC creates a new FOURCC .
3447	Merge merges the image .
3448	Split splits the image .
3449	AddWeighted adds a weighted image .
3450	And creates a new Image with the given src .
3451	AndWithMask adds a mask to the image .
3452	AndScalar creates a new scalar with the given value .
3453	AndScalararWithMask creates a new scalar with the given mask .
3454	Or creates a new image with the given src .
3455	OrUpdateMask creates a copy of the given image .
3456	OrScalar creates a new scalar with the given value .
3457	OrScalarWithMask adds a scalar to a scalar .
3458	AddWithMask adds a mask to the image .
3459	AddScalar adds a scalar to the image .
3460	AddScalarWithMask adds a scalar to a scalar .
3461	Subtract removes the image from src .
3462	SubtractWithMask removes the mask from src .
3463	SubScalar adds a scalar to a scalar .
3464	SubScalarWithMask adds a scalar to a scalar .
3465	SubScalarRev removes a scalar from a scalar .
3466	SubScalarWithMaskRevRev creates a new scalar with the given mask .
3467	AbsDiff computes the absolute diff of src .
3468	AbsDiffScalarar computes the diff of a scalar .
3469	MeanStdDevWithMask returns the variance of the given image .
3470	CreateSeq creates a new Seq .
3471	Push adds an element to the seq .
3472	Pop removes an element from the sequence .
3473	PushFront pushes an element to the stack .
3474	PopFront populates the given element .
3475	GetElemAt returns the element at the given index .
3476	RemoveAt removes the given index .
3477	Delay sets the delay
3478	BackOffDelay returns the duration of the given config .
3479	Error implements the error interface .
3480	Args adds arguments to the RequestBuilder .
3481	BodyString adds the body to the request .
3482	BodyBytes sets the body of the request body .
3483	Body sets the body of the request body .
3484	Option adds an option to the request .
3485	Header adds a header to the request .
3486	Send sends a request to the request .
3487	Exec executes the request .
3488	Next returns the next message .
3489	Cancel cancels the subscription .
3490	FileList returns the list of files in the given path .
3491	Cat returns a copy of the shell
3492	List lists all Ls links
3493	Pin adds a path to the shell
3494	Pins returns a list of pins
3495	Version returns the current version .
3496	SwarmPeers retrieves the list of swarm peers
3497	SwarmConnect creates swarm connection
3498	DagPutOptions creates a new DagPutOptions object .
3499	Pin specifies the pin to use .
3500	Kind specifies the kind of the dag .
3501	Hash sets the hash of the dag
3502	AddDir adds a directory to the shell .
3503	Publish is part of the Shell interface .
3504	PublishWithDetails returns a publish response .
3505	ResolveValue implements Plan interface .
3506	GenerateQuery generates a query for the query .
3507	EncodeValue encodes a QueryVariable .
3508	Lex implements Token .
3509	skipStatement skips the token .
3510	reset initializes the tokenizer .
3511	Preview returns a new Stmt .
3512	NewPlanValue creates a PlanValue .
3513	StringIn checks if a string is in the list
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena returns a new StringArena .
3516	NewString returns a new string .
3517	SpaceLeft returns the space left .
3518	ParseStrictDDL parses SQL statement .
3519	ParseNext parses the next token .
3520	Append appends a node to the given buffer .
3521	ExprFromValue returns an expression from the given value .
3522	Backtick returns a string representation of a string .
3523	NewValue creates a new Value .
3524	String returns the string representation of the value .
3525	EncodeSQL encodes the value .
3526	EncodeSQL encodes the InsertValues .
3527	EncodeSQL encodes a TupleEqualList .
3528	WalkStatement walks the statement .
3529	WalkSelect is used to walk a SELECT statement .
3530	BindVariablesEqual returns true if the bind variables are equal .
3531	New creates a new JWiddleware instance
3532	HandlerWithNext implements the Handler interface for JWT .
3533	FromAuthHeader extracts the authorization header from the request .
3534	FromParameter returns a TokenExtractor
3535	FromFirst returns a TokenExtractor from the request .
3536	getHelloPacket returns a new RPC RPC message
3537	NewFloodsubWithProtocols creates a new instance of PubSubnet .
3538	NewFloodSub creates a new instance of FloodSub .
3539	NewLRUBlacklist creates a new Blacklist .
3540	NewRandomSub node constructor
3541	NewGossipSub creates a new GossipSub .
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle is a functional option that sets the RateThrottle .
3544	WithBlacklist sets the Blacklist option .
3545	handleRemoveSubscription removes a subscription from the topic .
3546	handleAddSubscription is used to handle a subscription .
3547	announce sends a message to the peer .
3548	notifySubs sends a message to the subscriber .
3549	seenMessage returns true if the given id exists .
3550	subscribedToMsg returns true if the message is subscribed .
3551	msgID returns the message ID .
3552	pushMsg pushes a message to the peer
3553	validate ensures that the message is valid .
3554	validateSingleTopic checks if the given topic is valid .
3555	getValidators returns a list of validators
3556	Subscribe creates a subscription .
3557	SubscribeByTopicDescriptor implements PubSubscription . SubscribeByTopicDescriptor
3558	Get topics
3559	Publish publishes the given topic .
3560	ListPeers returns a list of all peers
3561	WithValidatorTimeout sets the validator timeout
3562	WithValidatorConcurrency sets the number of validator connections .
3563	RegisterTopicValidator registers the given topic .
3564	UnregisterTopicValidator unregisters a topic .
3565	DefaultMetricPrefix returns the default MetricPrefix .
3566	MetricWithPrefix returns a metric with the given prefix .
3567	NewClient creates a new client
3568	Call implements the Client interface .
3569	CallPeer invokes the given method .
3570	CallSC is part of the TChannel interface .
3571	ReadResponse reads the response from the given call .
3572	writeHeaders writes the response headers .
3573	ResponseWriter returns an http . ResponseWriter .
3574	ReadHeaders reads the headers from the reader .
3575	NewTCPRawRelay returns a new RelayRelay
3576	NewClient creates a new client
3577	Advertise is part of the Client interface .
3578	Handle implements the Handler interface .
3579	Start starts the server
3580	Port returns the port of the server .
3581	SetStrategy implements the PeerList interface for PeerList .
3582	Add adds a new peer to the list .
3583	GetNew returns a new Peer .
3584	Get retrieves a peer from the list .
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the PeerList .
3587	Len returns the number of peers .
3588	exists returns the peer score for the given host .
3589	getPeerScore returns the peer score for the given host .
3590	onPeerChange implements the PeerList interface for PeerList .
3591	updatePeer updates the peer .
3592	getConn returns the connection from the peer .
3593	GetConnection returns a connection .
3594	getConnectionRelay returns a connection to the peer .
3595	canRemove returns true if the peer is removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes a connection from the peer .
3598	ConnectionCloseStateChange is called when a connection is closed .
3599	Connect connects to the peer .
3600	BeginCall starts a new connection .
3601	NumConnections returns the number of connected connections .
3602	NumPendingOutbound returns the number of pending outbound connections .
3603	isEphemeralHostPort returns true if the given host is an ephemeralHostPort .
3604	Get returns the value associated with key .
3605	Set sets the value for the key
3606	ClearAll clears all keys
3607	NewChannel creates a new Channel
3608	Serve starts listening for the given listener .
3609	ListenAndServe listens on the given host .
3610	Register registers a handler for the given handler .
3611	PeerInfo returns the current peer info .
3612	GetSubChannel returns a SubChannel for the given service name .
3613	serve starts the connection .
3614	Ping is part of the Channel interface .
3615	StatsTags returns a map of tags .
3616	Connect creates a new connection .
3617	exchangeUpdated is part of the Channel interface .
3618	updatePeer updates the peer .
3619	addConnection adds a connection to the channel .
3620	removeClosedConn removes the connection from the channel .
3621	connectionCloseStateChange is called when a connection is closed .
3622	State returns the current channel state .
3623	NewReader returns a new Reader .
3624	ReadUint16 reads a uint16 from the reader .
3625	ReadString implements io . Reader .
3626	ReadLen16String reads a string from r .
3627	Register registers a new tchannel .
3628	Run is the main loop .
3629	Get returns a new relay timer .
3630	Put adds a timer to the pool .
3631	Start starts the timer .
3632	Release releases the timer .
3633	NewLogger creates a new Logger .
3634	NewTCPFrameRelay creates a new TCP frame relay
3635	sumTags returns a map of known tags .
3636	Isolated implements the SubChannel interface .
3637	Isolated returns true if the channel is isolated .
3638	Register registers a new subchannel .
3639	GetHandlers returns a map of registered handlers
3640	StatsTags returns the stats for the subscription .
3641	registerNewSubChannel registers a new subchannel with the given name .
3642	get retrieves a subscription by name .
3643	getOrAdd returns a new SubChannel with the given name .
3644	Discover is part of the Cluster interface .
3645	Start starts the client
3646	serve listens on the client .
3647	WriteRequest implements the http . Handler interface .
3648	ReadRequest reads a single request from the given call .
3649	NewReadBufferWithSize creates a new ReadBuffer with the given size .
3650	ReadByte implements the ReadBuffer interface .
3651	ReadBytes implements the ReadBuffer interface .
3652	ReadString implements io . Reader
3653	ReadUint16 reads a uint16 from r .
3654	ReadUint32 reads a uint32 from r .
3655	ReadUint64 reads a uint64 from r .
3656	ReadUvarint reads a uint64 from r .
3657	ReadLen8String returns the length of the buffer .
3658	ReadLen16String reads a string from r .
3659	FillFrom implements io . ReaderFrom interface .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte implements the WriteBuffer interface .
3662	WriteBytes implements io . Writer
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to w .
3665	WriteUint64 writes a uint64 to the buffer .
3666	WriteUvarint writes a uint64 to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes a string to w .
3669	WriteLen16String writes a string to w .
3670	DeferByte returns a copy of the buffer .
3671	DeferBytes implements the WriteBuffer interface for WriteBuffer .
3672	FlushTo implements io . WriterTo interface .
3673	Reset resets the buffer .
3674	Wrap implements the WriteBuffer interface .
3675	Update updates the uint16 ref .
3676	Update updates the uint32 value .
3677	Update updates the uint64 value .
3678	Update updates the given bytes .
3679	UpdateString updates the given string .
3680	ArgReader returns the next argument .
3681	finish is part of the interface .
3682	newWritableChunk returns a new writable chunk .
3683	writeAsFits writes bytes to w .
3684	newFragmentingWriter returns a new fragmenting writer .
3685	ArgWriter returns a new ArgWriter .
3686	BeginArgument implements the Writer interface .
3687	Write implements the io . Writer interface .
3688	Flush implements the underlying io . Writer interface .
3689	Close closes the underlying writer .
3690	handleCallRes is part of the Connection interface .
3691	Arg2Reader returns the arg2Reader for the response .
3692	handleError is used to handle an error message
3693	doneReading is part of the OutboundCallResponse interface .
3694	newFragment creates a new write fragment
3695	flushFragment flushes the given fragment .
3696	failed will fail if the request fails
3697	arg1Reader returns an arg1 . ArgReader .
3698	arg2Reader creates a new arg2Reader .
3699	arg3Reader returns the argReader for the request .
3700	argReader returns the argReader for the request .
3701	recvNextFragment is used to read the next fragment .
3702	releasePreviousFragment releases the previous fragment .
3703	failed will fail if the request fails .
3704	parseInboundFragment parses the given frame and returns it .
3705	NewContext creates a new context
3706	WithHeaders returns a context with the given headers .
3707	healthCheck checks if the connection is healthy .
3708	SetTimeout sets the timeout
3709	AddHeader adds a header to the context .
3710	SetHeaders sets the headers for this context
3711	SetConnectTimeout sets the ConnectTimeout field s value .
3712	SetRetryOptions sets the RetryOptions optional argument .
3713	SetTimeoutPerAttempt sets the timeout for the request
3714	SetParentContext sets the parent context
3715	Build builds a ContextWithHeaders .
3716	Override headers
3717	Read implements io . Reader
3718	ReadJSON reads JSON data from the reader .
3719	NewArgWriter returns a new ArgWriteHelper .
3720	Write implements the io . Writer interface .
3721	WriteJSON implements the io . Writer interface .
3722	Register registers a new http . Handler .
3723	Count returns the number of items in the list .
3724	Get returns the item associated with the given id .
3725	Add adds an item to the list .
3726	Entombomb deletes the given id .
3727	NewRelayer returns a new Relayer .
3728	Relay implements the Relayer interface .
3729	Receive is used to receive a response .
3730	handleNonCallReq is used to handle a non - nil response .
3731	addRelayItem adds a new relay item to the relay .
3732	failRelayItem attempts to fail if the given item fails .
3733	WriteStruct implements io . Writer
3734	ReadStruct reads a Thrift from the given io . Reader .
3735	EnsureEmpty ensures that the given stream is empty .
3736	NewServer creates a new server .
3737	Advert a hyperbahn host
3738	handleCallReqContinue is part of the Connection interface .
3739	dispatchInbound sends a request to the connection .
3740	CallOptions returns a CallOptions struct
3741	Response returns the response body .
3742	SendSystemError sends an error to the server .
3743	SetApplicationError sets the application error .
3744	Arg2Writer returns a new arg2Call object .
3745	doneSending sends a request to the server .
3746	newState returns a new State .
3747	rootType returns the root type .
3748	checkInclude checks if the given type is in the state .
3749	isResultPointer returns true if the given ThriftType is a pointer .
3750	goType returns the Go type for the given type .
3751	goTypePrefix returns the prefix for the given type .
3752	NewContext creates a new context
3753	newIncomingContext creates a new context .
3754	CurrentCall returns the current context .
3755	New returns a new rand instance .
3756	Health returns health status
3757	Headers returns the request headers
3758	ResponseHeaders returns a map of response headers
3759	SetResponseHeaders sets the response headers
3760	Child returns a new context with the given context .
3761	Wrap returns a new context with the given context .
3762	WrapWithHeaders wraps the request context with the given headers .
3763	WithoutHeaders returns a context with the given context .
3764	Notify implements the ErrNotifier interface .
3765	forwardPeerFrame forwards a frame to the peer .
3766	recvPeerFrame is used to receive a frame .
3767	recvPeerFrameOfType returns the frame of the peer s peer .
3768	shutdown shuts down the message exchange .
3769	newMessageExchangeSet returns a new messageExchangeSet .
3770	addExchange adds an ExchangeExchange to the queue .
3771	newExchange creates a new message exchange .
3772	deleteExchange deletes the given message .
3773	removeExchange removes an exchange from the queue .
3774	expireExchange is used to remove an existing exchange .
3775	forwardPeerFrame forwards a frame to the given frame .
3776	copyExchanges returns a copy of this messageExchangeSet .
3777	stopExchanges stops the message exchange .
3778	NewFrame creates a new Frame .
3779	ReadBody reads the body of the frame .
3780	WriteOut writes the frame to w .
3781	CanRetry returns true if the given error is a retry error
3782	HasRetries returns true if the request is retryable .
3783	SinceStart returns the duration of the request .
3784	AddSelectedPeer adds a new selected peer
3785	RunWithRetry runs the given function on the channel .
3786	ChecksumSize returns the size of the checksum .
3787	New returns a new checksum .
3788	parseTemplates parses a list of template files .
3789	NewStringSliceFlag returns a new slice of StringSliceFlag
3790	withStateFuncs returns a copy of the template .
3791	InspectOthers returns a list of all the channels in the channel .
3792	ReportInfo is part of the ChannelInfo interface .
3793	InspectState is part of the RootPeer interface .
3794	InspectState returns a map of registered subchannel state .
3795	InspectState returns a new instance of PeerRuntimeState .
3796	InspectState returns the state of the connection .
3797	InspectState is part of the RelayerRuntime interface .
3798	InspectState returns a new RelayItemState .
3799	InspectState returns a new ExchangeSetState .
3800	NewContext creates a new context .
3801	WriteResponse writes the response to the response .
3802	Wrap wraps http . HandlerFunc
3803	initFromOpenTracing initializes and initializes the span .
3804	startOutboundSpan starts a new span .
3805	intToIP4 converts ip4 to an IPv4 address .
3806	servicePeerToHostPort converts a service peer to a host .
3807	NewStatsdReporter creates a new StatsdReporter
3808	UnmarshalText implements the json . Unmarshaler interface .
3809	Push implements the heap . Interface .
3810	Pop removes the peer from the heap .
3811	updatePeer updates the peer score .
3812	removePeer removes the peer from the heap .
3813	pushPeer adds a peer score to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChannelClient
3816	Add a new peer
3817	Get returns the Peer for the given host .
3818	WithTimeout sets the timeout
3819	Methods returns a sorted list of methods .
3820	In inherited methods
3821	Arguments returns the fields of the method .
3822	ArgList returns the string representation of the method .
3823	CallList returns a string representation of the method .
3824	RetType returns the string representation of the method .
3825	WrapResult wraps the method of the method and returns the result .
3826	ReturnWith returns a string representation of the method .
3827	Declaration returns the declaration of the field .
3828	startIdleSweep starts a goroutine that starts a goroutine .
3829	start starts the idle loop
3830	Stop stops idle connections .
3831	ResolveWithGoPath resolves the GOPATH path for the given filename .
3832	setExtends sets the extensions for the given service .
3833	register registers a handler for the handler .
3834	NewClient creates a new client
3835	ListenIP implements net . ListenIP . ListenIP
3836	Close closes the listener .
3837	ReadArgsV2 reads args from rchannel .
3838	WriteArgs writes the arguments to the call .
3839	Call invokes the given method .
3840	CallSC is part of the TChannel interface .
3841	CallV2 calls the given callback .
3842	NewRealRelay creates a new Relay .
3843	NewServer creates a new server .
3844	RegisterHealthHandler registers a handler for the given health request .
3845	Handle handles a request .
3846	MetricsKey returns the metric key for the system .
3847	NewSystemError creates a new system error .
3848	NewWrappedSystemError returns a new instance of SystemError
3849	Error implements the Error interface for SystemError .
3850	GetContextError gets the error from the context .
3851	GetSystemErrorCode returns the system error code for the given error .
3852	ping sends a ping message to the connection .
3853	handlePingRes is part of the Connection interface .
3854	handle ping request
3855	SendSystemError sends an error message to the connection .
3856	connectionError returns an error if the connection fails .
3857	withStateLock is part of the Connection interface .
3858	withStateRLock sets the state of the connection .
3859	readFrames reads frames from the connection .
3860	writeFrames writes frames to the connection .
3861	hasPendingCalls returns true if the connection is pending .
3862	checkExchanges is used to check if the connection is available .
3863	closeNetwork closes the connection .
3864	getLastActivityTime returns the last activity time .
3865	Validate validates the service
3866	logFailedRegistrationRetry is used to log an error .
3867	initializeAdvertise is used to initialise the client .
3868	Service returns the payload of the service .
3869	TTL returns the TTL of the call .
3870	SetTTL sets the TTL of the request .
3871	finishedCall returns true if the frame is a frame .
3872	Flat returns a sorted list of all the platforms .
3873	Map applies the given string to the given string .
3874	MapSlice returns a copy of the given function .
3875	GetProtoConfig returns the proto configuration for the given config .
3876	MapExprStrings converts a string to a string representation .
3877	FlattenExpr creates an Expr . Expr .
3878	makePlatformStringsExpr creates a platformStringsExpr .
3879	String returns the string representation of the platform .
3880	Find returns the directory for the given directory .
3881	runGazelle runs the gzelle command .
3882	restoreBuildFilesInRepo restores the build files in the directory .
3883	FixLoads is used to fix LoadLoads .
3884	fixLoad removes the load from the given file .
3885	newLoadIndex returns the index of the given rules .
3886	removeLegacyGoRepository removes the Go code from the file .
3887	Compare compares two versions .
3888	ParseVersion parses a version string .
3889	EmptyFile creates a new File .
3890	LoadWorkspaceFile loads a file from the given path .
3891	LoadMacroFile loads a file .
3892	EmptyMacroFile creates a new file from a file .
3893	LoadData loads a file from a file .
3894	LoadWorkspaceData loads a file from a file .
3895	LoadMacroData loads a file from a file .
3896	ScanAST scans a file to a file .
3897	ScanASTBody parses the AST and returns a File .
3898	MatchBuildFileName returns the name of a build file .
3899	SyncMacroFile synchronizes the file from the file .
3900	MacName returns the macro name of the function .
3901	Sync synchronizes the files in the file .
3902	Format returns a copy of the file .
3903	Save saves the file to disk .
3904	HasDefaultVisibility returns true if the file has no visibility .
3905	NewLoad node constructor
3906	Symbol returns a list of all symbols .
3907	Has returns true if the given symbol exists .
3908	Add adds a symbol to the list .
3909	Remove removes the symbol .
3910	Insert adds an index to the list .
3911	NewRule creates a new Rule .
3912	SetKind sets the kind of the Rule .
3913	AttrKeys returns the set of keys in the rule .
3914	Attr returns the attribute for the given key .
3915	AttrString returns the string representation of a rule .
3916	AttrStrings returns the string representation of a rule .
3917	DelAttr removes a key from the rule .
3918	SetAttr sets the attribute of the rule
3919	PrivateAttrKeys returns a list of private keys .
3920	SetPrivateAttr implements the Rule interface for Rule .
3921	Insert adds a rule to the file .
3922	IsEmpty returns true if the rule is empty
3923	CheckInternalVisibility returns the visibility of the given relative path .
3924	New creates a new Label .
3925	Rel returns the label of the given repo .
3926	Equal returns true if two labels are equal .
3927	Contains returns true if the two labels are equal .
3928	generateFromPath takes a path and writes it to w .
3929	shouldCall returns true if the given dir is a valid dir
3930	shouldUpdate returns whether or not the given filter is updated .
3931	shouldVisit returns true if the given dir is in the mode .
3932	SquashRules removes all rules from src .
3933	runClient is used to run a goroutine
3934	UpdateRepo updates the repository
3935	NewRemoteCache creates a new remote cache
3936	Remote returns the remote cache for the given root .
3937	get retrieves the value from the cache
3938	ensure returns a copy of the cache .
3939	RelBaseName returns the base name for the given prefix .
3940	Clone returns a copy of the Config .
3941	IsValidBuildFileName returns true if the configuration is valid .
3942	check checks if the tag is valid .
3943	fileNameInfo returns the file name for the given path .
3944	readFileInfo returns the file info for the given path .
3945	protoFileInfo returns the fileInfo for the given path .
3946	AddRule adds a rule to the list .
3947	Finish implements the RuleIndex interface .
3948	buildImportIndex builds the rules for the given rule .
3949	IsSelfImport returns true if the source is a source .
3950	applyKindMappings applies the given list of maps to the given map .
3951	appendOrMergeKindMapping appends the given kind to the map .
3952	RuleName returns the name of the rule name .
3953	buildPackages builds a list of packages for the given package .
3954	selectPackage selects a package from the given dir .
3955	generateProto generates a new protobuf rule
3956	generateEmpty returns a slice of empty rules .
3957	ImportRepoRules imports the given file .
3958	MergeRules merges the given rules into a file .
3959	GenerateRule generates a new rule
3960	FindExternalRepo finds the external repository by name .
3961	ListRepositories returns a list of repository names .
3962	migrateLibraryEmbed is used to migrate a library .
3963	migrateGrpcCompilers is used to migrate grpc plugins .
3964	squashCgoLibrary is used to squash a Cgo library
3965	removeLegacyProto removes the legacy protobuf from the config file .
3966	removeLegacyGazelle removes the gz rule from the config file .
3967	selectPackage returns a new Go package .
3968	AddBuiltin registers a new builtin .
3969	MappedKind adds a mapping to the map .
3970	Resolver returns the resolver for the given rule .
3971	sortExprLabels sorts a list of strings .
3972	checkRulesGoVersion is a helper function to check if the rules are valid .
3973	preprocessTags initializes gc config
3974	setBuildTags sets the build tags
3975	splitValue splits a string into a slice of strings
3976	copyGoModToTemp copies a Go file to the given filename .
3977	findGoTool returns the path of the Go tool
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server
3980	watchDir is used to watch a directory
3981	listDirs returns a list of directory names .
3982	shouldIgnore returns true if the given path is ignored .
3983	recordWrite records the given path .
3984	getAndClearWrittenDirs returns a copy of dirSet .
3985	CombineHandlers returns a new http . HandlerFunc that adds handlers to the request .
3986	VerifyContentType verifies that the given content type is valid .
3987	VerifyMimeType returns an http . HandlerFunc that satisfies the http . Handler interface .
3988	VerifyBasicAuth verifies that the given username is valid .
3989	VerifyJSONRepresenting implements the http . HandlerFunc interface .
3990	VerifyFormKV implements http . HandlerFunc
3991	RespondWithProto creates a new http . HandlerFunc for the given message .
3992	RegisterFailHandlerWithT registers a new GomeFailHandler .
3993	EventuallyWithOffset returns an Assertion Assertion .
3994	ConsistentlyWithOffset returns an AsyncAssertion .
3995	Expect returns an assertion .
3996	Eventually returns an Assertion .
3997	Consistently returns an Assertion .
3998	TimeoutCloser implements io . Closer interface .
3999	TimeoutReader returns an io . ReadCloser that wraps the given io . Reader .
4000	TimeoutWriter returns an io . Writer that writes to w .
4001	Nested returns a nested nested error .
4002	SetMockService sets the mock service
4003	FindMachineByIdOrAddress finds a machine by its ID .
4004	Write writes data to w .
4005	Hijack implements the http . Conn interface .
4006	ListDeploys lists all deployments
4007	AddAll adds a new route to the router
4008	samlRequestTimeout returns the request timeout for the request .
4009	RegisterHandler registers a handler for the given path .
4010	RegisterHandlerVersion registers a new http . Handler for the http . Handler .
4011	Check returns a list of health checks
4012	DiscoverRepositoryPath returns the path for the given directory .
4013	OpenRepository opens a repository .
4014	RemoteURL returns the remote URL for the remote repository .
4015	List lists all apps in the indexer .
4016	Apps returns a list of app namespaces .
4017	List lists all AppNamespace in the indexer .
4018	StreamJSONResponse streams the response body
4019	DropDatabase drop database
4020	Collection returns a collection with the given name .
4021	SetLogger sets the logger
4022	Error logs an error .
4023	Errorf logs an error message
4024	Fatal logs a message .
4025	Debugf log message
4026	GetStdLogger returns the Logger interface
4027	Namespace returns the name of the cluster
4028	recreateContainers is part of the DockerProvisioner interface .
4029	checkProvisioner checks if the provisioner is provisioner
4030	checkDocker checks if the configuration is valid
4031	checkScheduler returns an error if the scheduler is invalid .
4032	checkRouter checks if the configuration is valid
4033	Available returns true if the unit is available .
4034	Get returns a Provisioner .
4035	Registry returns a list of provisioners
4036	Error returns the string representation of the error .
4037	validateVersion checks if the provided version is valid .
4038	ReadTarget reads the target target .
4039	WriteTarget writes the target file to the target directory .
4040	WriteOnTargetList writes a target label to target
4041	Conn returns a new storage connection .
4042	Apps returns a collection of apps .
4043	PoolsConstraints returns a collection of Pools .
4044	Users returns a collection of users .
4045	SAMLRequests returns a collection of SAML requests .
4046	AppLogCollection returns a collection of Logs .
4047	CreateAppLogCollection creates a new storage collection .
4048	LogsCollections returns a list of all logs in the storage .
4049	ArchiveBuildCmds returns the build command for a build .
4050	ArchiveDeployCmds returns a list of docker deploy commands
4051	DeployCmds returns the command to deploy commands .
4052	runWithAgentCmds runs the juju agent command .
4053	newApps creates a new apps .
4054	Commit commits a container
4055	processTags is used to process tags
4056	aggregateContainersBy returns the number of containers that match the given matcher .
4057	chooseNodeToAdd takes a list of nodes and returns a list of nodes in the cluster .
4058	chooseContainerToRemove removes a container from the cluster
4059	Get returns a Router by name .
4060	Default returns the default router
4061	Store stores the given router .
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for AppInformer .
4065	NewFilteredAppInformer constructs a new informer . Always prefer using an informer factory to get a shared informer instead of getting an independent one .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched App .
4068	NewSharedInformerFactory creates a new SharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new SharedSharedInformerFactory .
4070	Proxy is used to create a service
4071	UnbindUnit is part of the broker interface .
4072	Create creates a plan .
4073	Remove removes a plan .
4074	ensureDefault adds default settings to the storage .
4075	DeleteInstance removes an instance from the service .
4076	ToInfo implements ServiceInstance .
4077	Update updates the service instance .
4078	BindApp binds an app .
4079	BindUnit binds a unit to a service .
4080	UnbindApp unbinds an app .
4081	Status returns the status of the service .
4082	ProxyInstance is part of the Service interface .
4083	Inc increments the quota .
4084	SetLimit sets the limit .
4085	Set sets the quota .
4086	Get returns the quota .
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes an image from the registry
4089	Create creates a new platform .
4090	List lists all platforms .
4091	FindByName retrieves the platform by name .
4092	Update updates the platform .
4093	Remove removes a platform .
4094	Rollback rolls back a platform .
4095	GetPoolByName retrieves a pool by name .
4096	Manager returns a repository manager .
4097	Register registers a new repository manager
4098	start starts the sync syncer
4099	Shutdown shuts down the connection .
4100	GetForProvisioner returns a builder for the provisioner
4101	get returns a builder with the given name .
4102	Registry returns a slice of builders .
4103	RegisterQueueTask registers a queue task
4104	Apps returns a new AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements io . Writer
4109	ResetPassword reset password
4110	addKnownTypes adds all known types to the scheme .
4111	Register registers a shutdownable shutdown .
4112	Do implements the io . Writer interface .
4113	List images
4114	MigrateAppsCRDs migrates all apps in the cluster
4115	Register registers a new MigrateFunc .
4116	RegisterOptional registers a new MigrateFunc .
4117	Run runs the run command .
4118	Units returns the units of the app .
4119	MarshalJSON implements the json . Marshaler interface for App .
4120	AcquireApplicationLockWait waits for an application lock to be locked
4121	ReleaseApplicationLock releases an application lock
4122	GetByName gets the app by name .
4123	AddUnits adds a unit to the app .
4124	SetUnitStatus sets the unit status
4125	UpdateNodeStatus updates the node status
4126	available returns true if the app is available .
4127	Grant grants a user .
4128	Revoke revokes an app .
4129	GetTeams returns all the teams associated with the given name .
4130	setEnv sets env variables
4131	getEnv returns the environment variable with the given name .
4132	validateNew validates an app .
4133	validate validates the app .
4134	InstanceEnvs returns a map of environment variables
4135	Run runs the command
4136	GetUnits returns the units of the app .
4137	GetUUID returns the UUID of the app .
4138	Envs returns a map of env variables
4139	SetEnvs sets environment variables
4140	UnsetEnvs unset environment variables
4141	AddCName adds a C name to the app .
4142	Log adds a message to the app .
4143	LastLogs returns a list of all logs in the app .
4144	List lists all apps
4145	Swap is used to swap an existing app .
4146	Start starts the app .
4147	GetDbDriver returns a DbDriver for the given name .
4148	GetCurrentDbDriver returns the current DB driver
4149	NewForConfig creates a new client .
4150	GetAppFromUnitID returns the app s app .
4151	NewPipeline creates a new Pipeline
4152	Result returns the result of the pipeline .
4153	DecodeJsonPayload decodes a JSON payload
4154	UrlFor returns the URL for the request .
4155	GetCorsInfo returns the CorsInfo for the request .
4156	MiddlewareFunc returns a HandlerFunc that can be used to create a new HandlerFunc
4157	MiddlewareFunc returns a HandlerFunc that implements the Recorder interface .
4158	WriteHeader writes the response to the recorder .
4159	MakeRouter creates a new router .
4160	AppFunc returns a new http . HandlerFunc for the router .
4161	apedPath returns the absolute path of the request .
4162	escapedPathExp returns the escaped path of the given path .
4163	start starts the trie
4164	ofFirstDefinedRoute returns the first matched route matching the route .
4165	findRouteFromURL attempts to find a route from the router
4166	MiddlewareFunc returns a HandlerFunc that sets the content of the request .
4167	CloseNotify implements the http . ResponseWriter interface .
4168	MiddlewareFunc returns a HandlerFunc that sets the access log .
4169	executeTextTemplate executes the access log template
4170	RemoteUser returns the user s remote user .
4171	A query string
4172	StartTime returns the start time
4173	ArchiveRemoteAddr returns the remote address of the access log .
4174	ResponseTime returns the duration of the access log .
4175	MiddlewareFunc returns a middleware middleware that can be used to create a new one .
4176	EncodeJson encodes v to JSON
4177	WriteHeader writes the response header to w .
4178	MakePath returns the path of the route .
4179	MiddlewareFunc is a wrapper around RecoverMiddleware .
4180	WrapMiddlewares wraps middlewares with middlewares .
4181	MiddlewareFunc returns a HandlerFunc that wraps the given http . HandlerFunc .
4182	WriteHeader writes the response header to w .
4183	Hijack implements the http . Handler interface .
4184	Write implements io . Writer
4185	MiddlewareFunc returns a HandlerFunc that invokes the AuthBasicHandler .
4186	printDebug prints debug information .
4187	AddRoute adds a route to the router .
4188	printDebug prints debug information .
4189	FindRoutes returns a list of matched routes .
4190	FindRoutesAndPathMatched returns a list of matched routes .
4191	FindRoutesForPath returns a list of matched routes for the given path .
4192	Use adds middleware to the stack .
4193	MakeHandler creates a new http . Handler for the app .
4194	MiddlewareFunc returns a HandlerFunc that wraps the given HandlerFunc .
4195	MiddlewareFunc creates a middleware middleware .
4196	GetStatus returns the status of the response
4197	MiddlewareFunc returns a HandlerFunc that can be used to handle the request .
4198	Flush implements the http . ResponseWriter interface .
4199	MiddlewareFunc returns a HandlerFunc that invokes the access log .
4200	Fetch fetches data from S3 .
4201	sanityCheck checks if env is valid
4202	release closes the listener .
4203	fetchLoop is used to fetch the current state of the master
4204	forkLoop runs the fork loop .
4205	Init initializes the File .
4206	Fetch implements the File interface .
4207	Fetch fetches the headers from the HTTP request .
4208	NewConfig returns a new Config .
4209	Validate validates this config
4210	NewClient creates a new client
4211	AsyncClose is part of the PartitionConsumer interface .
4212	Close closes the partition consumer .
4213	MarkOffset adds an offset to the partition .
4214	NewConsumer creates a new consumer
4215	MarkOffsets removes offsets from the consumer .
4216	ResetOffset implements the Consumer interface .
4217	Close closes the consumer .
4218	hbLoop runs the heartbeat loop until it is closed .
4219	twLoop is part of the Consumer interface .
4220	commitLoop is part of the Consumer interface .
4221	fetchOffsets returns the offsets for the given subsets .
4222	MarkOffset marks the offset for the partition .
4223	ResetOffset resets the offset of the partition .
4224	Offsets returns a map of offsets .
4225	Actual is part of the InstanceGroup interface .
4226	Expected returns an instance of InstanceGroup
4227	Delete deletes the instance group
4228	GetReconciler returns a new cronciler .
4229	GetVersion returns the version
4230	GetVersionJSON returns the version of the version .
4231	Actual is part of the ResourceGroup interface .
4232	Expected returns a new instance of ResourceGroup .
4233	CreateCmd creates a new cobra command
4234	NewUbuntuCluster creates a new cluster
4235	ProviderConfig returns a ControlPlaneProviderConfig .
4236	SetProviderConfig sets the provider config
4237	MachineProviderConfigs returns a list of available provider configs .
4238	SetMachineProviderConfigs sets the provider config for the given machine .
4239	NewCluster creates a new cluster
4240	DeployControllerCmd returns a command to deploy a controller .
4241	NewRetrier creates a new Retrier .
4242	RunRetry runs the retry function .
4243	MustGenerateRandomBytes generates random bytes
4244	ExplainCmd returns a command .
4245	TimeOrderedUUID returns a string representation of a time . Time .
4246	GetConfigCmd returns the kubeconfig command
4247	RunAnnotated runs the given task .
4248	ListCmd returns a cobra command
4249	NewUbuntuCluster creates a new cluster
4250	EditCmd returns the edit command
4251	RemoveKey removes a key from the keyring
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual is part of the Firewall interface .
4254	Expected returns a new instance of Firewall .
4255	Apply applies the given resource to the given instance .
4256	Delete a firewall
4257	DeleteCmd creates a command
4258	NewStateStore creates a new cluster store
4259	Commit commits a cluster
4260	ApplyCmd returns a command to the given command
4261	ExpandPath expands the path to the given path
4262	CompletionCmd returns a cobra command
4263	AdoptCmd returns a cobra command
4264	StrEnvDef returns the name of the environment variable .
4265	IntEnvDef returns the int value of the environment variable
4266	BoolEnvDef returns true if the environment variable is empty .
4267	readFromFS reads a file from a file
4268	VersionCmd returns a cobra command
4269	NewSignalHandler creates a new handler .
4270	Register registers a new goroutine .
4271	NewUbuntuCluster creates a new cluster
4272	BeginningOfHour returns the beginning of the current time .
4273	BeginningOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the beginning of the current time .
4275	BeginningOfMonth returns the beginning of the current time .
4276	BeginningOfQuarter returns the beginning of the beginning of a month .
4277	BeginningOfYear returns the beginning of the current time .
4278	EndOfMinute returns the current time .
4279	EndOfHour returns the end of the current time .
4280	EndOfDay returns the time of the current time .
4281	EndOfWeek returns the current time .
4282	EndOfMonth returns the current time .
4283	EndOfQuarter returns the time of the current time .
4284	EndOfYear returns the end of the current time .
4285	MustParse is like Parse but panics .
4286	Between returns true if the beginning of the beginning of start and end time .
4287	ParseInLocation parses a string into a time . Time .
4288	MustParse is like Parse but panics .
4289	MustParseInLocation parses a string into a time . Time .
4290	Between returns true if the given time is between two times .
4291	NewChannelMemoryBackend returns a new ChannelMemoryBackend .
4292	Start starts the ChannelMemoryBackend
4293	Flush implements the ChannelMemoryBackend interface .
4294	Stop stops the channel .
4295	Formatted returns the formatted string representation of the record .
4296	Message implements the Record interface .
4297	SetBackend sets the current logger
4298	MustGetLogger returns a new logger .
4299	Reset resets the logger .
4300	IsEnabledFor returns true if the logger is enabled
4301	Criticalf logs an error
4302	Warningf logs a warning message
4303	Noticef implements Logger .
4304	Infof implements Logger .
4305	SetFormatter sets the formatter .
4306	MustStringFormatter returns a Formatter with the given format .
4307	formatFuncName returns the name of the function f .
4308	Log implements the LogFormatter interface .
4309	LogLevel returns the log level for the given level .
4310	AddModuleLevel returns a new LeveledBackend .
4311	GetLevel returns the level level for the given module .
4312	SetLevel sets the level of the module .
4313	IsEnabledFor returns true if the given module is enabled .
4314	MultiLogger creates a new MultiLogger
4315	Log implements the Logger interface .
4316	GetLevel returns the level of the backend
4317	SetLevel sets the log level .
4318	IsEnabledFor returns true if the module is enabled
4319	ConvertColors converts a slice of strings to a slice of strings .
4320	NewSyslogBackend creates a new syslog backend .
4321	NewSyslogBackendPriority returns a new SyslogBackend
4322	SetBackend sets the default logger
4323	NewCommander returns a new Commander instance
4324	Execute implements Command .
4325	Explain prints a summary of the command .
4326	ExplainGroup prints a summary of the command group .
4327	Explain prints a description of the command .
4328	dealias returns a command that matches the given command .
4329	Execute runs the command
4330	LoadFromData loads a config file .
4331	LoadFromReader loads a ConfigFile from an io . Reader
4332	ReloadData loads a config file .
4333	AppendFiles appends file names to the config file .
4334	GetKeyList returns the list of keys in the config file .
4335	SaveConfigData saves a config file .
4336	SaveConfigFile saves a config file
4337	Find returns a Selection containing the given selector .
4338	FindByXPath returns a Selection object with the given selector .
4339	FindByLink returns a Selection with the given text .
4340	FindByLabel returns a Selection containing the given label .
4341	FindByName returns a Selection by name .
4342	FindByClass returns a Selection object with the given text .
4343	FindByID returns a Selection by ID .
4344	First returns a new Selection object .
4345	FirstByXPath returns a Selection object with the given selector .
4346	FirstByLink returns a Selection with the given text .
4347	FirstByLabel returns a Selection containing the given label .
4348	FirstByName returns a Selection object with the given name .
4349	All returns a new MultiSelection .
4350	AllByXPath returns a MultiSelector with the given selector .
4351	AllByLink returns a new MultiSelection
4352	AllByLabel returns a new MultiSelection .
4353	AllByName returns a MultiSelection by name .
4354	AllByClass returns a new MultiSelection
4355	AllByID returns a new MultiSelection
4356	FindForAppium returns a Selection object that matches the given text .
4357	Timeout sets the timeout
4358	EnableOptions sets the Chrome options for the given option .
4359	JoinPage creates a new page with options .
4360	Destroy the session
4361	Reset resets the page .
4362	Navigate the page
4363	GetCookies returns a list of cookies
4364	SetCookie sets the cookie
4365	DeleteCookie deletes a cookie
4366	ClearCookies clears cookies
4367	URL returns the URL of the page .
4368	Size sets the window size .
4369	Screenshot is part of the Page interface .
4370	Title returns the title of the page .
4371	HTML returns the HTML of the page .
4372	PopupText returns the text of the popup
4373	Enter popup text
4374	Confirm popup
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame implements Page interface .
4377	SwitchToRootFrame implements the Page interface for Page .
4378	NextWindow updates the current window .
4379	CloseWindow closes the session .
4380	WindowCount returns the number of windows .
4381	LogTypes returns the list of all log types .
4382	MoveMouseBy moves the mouse to the page .
4383	DoubleClick executes the page .
4384	Click sends a button to the page
4385	Click executes the given selection .
4386	DoubleClick performs a deep copy of the selection .
4387	Fill fills the text with the given text .
4388	Tap sends a tap to the list .
4389	Touch sends an event to the selected element .
4390	FlickFinger flushes the finger to the current finger .
4391	ScrollFinger scrolls the element to the selected element .
4392	NewCapabilities creates a Capabilities .
4393	JSON returns the JSON representation of the capabilities .
4394	HasTitle returns a new GomeMatcher
4395	HasURL returns a new GomeMatcher
4396	HasPopupText returns true if the given text matches the given text .
4397	HasLoggedError returns a new Gome error .
4398	Text returns the text of the selected element .
4399	Active returns true if the selected element is active .
4400	Attribute returns the attribute of the element .
4401	CSS returns the current CSS element .
4402	Selected returns whether the element is selected .
4403	Visible returns true if the element is visible .
4404	Enabled returns true if the element is enabled
4405	HasCount returns a new GomeMatcher
4406	HasAttribute returns a new GomegaMatcher
4407	EdgeDriver creates a new WebDriver
4408	Selendroid creates a new WebSocket
4409	SwitchToFrame switches the frame to the current frame .
4410	Count returns the number of elements in the Selection .
4411	EqualsElement returns true if the two elements are equal .
4412	MouseToElement moves the element to the selected element
4413	loggingMiddleware returns an http . HandlerFunc that wraps the http . Handler interface .
4414	chainHandlers returns a middleware that wraps the given middleware .
4415	HTTPReverseProxy creates a http . Handler for HTTPS proxy .
4416	CheckInstallation checks if a version is in the current version .
4417	CheckVersion checks the version of the version .
4418	GetVersionForBinary returns the version for the given binary .
4419	getUser retrieves a user by ID
4420	login creates a new user .
4421	loginHandler handles the login request .
4422	logoutHandler is used to authenticate the user .
4423	viewHandler renders the login handler .
4424	Run starts the HTTP server .
4425	WithRequest sets the request body
4426	WillRespondWith sets the response with the response
4427	isJSONFormattedObject returns true if the given string is a JSON string .
4428	ByUsername retrieves a user by username
4429	ByID retrieves the user by ID .
4430	UserLogin creates a login request
4431	newClient creates a new PactClient
4432	NewClient creates a new client
4433	List servers
4434	UpdateMessagePact updates a pact message
4435	PublishPacts publishes a request
4436	getPort returns the port for the given URL .
4437	getAddress returns the address of the raw URL .
4438	sanitifyRubyResponse is used to sanitize the response
4439	Publish implements Publish .
4440	FindPortInRange returns the number of ports in a range
4441	EachLike returns a Matcher that matches the given content .
4442	Term creates a matcher for the given regexp .
4443	UnmarshalJSON handles deserialization of a MapMatcher .
4444	objectToString converts an object to a string
4445	match returns a Matcher that matches the given params .
4446	AddMessage adds a message to the pact .
4447	AddInteraction creates a new Interaction
4448	Teardown is part of the Pact interface .
4449	Verify verifies that the pact is valid .
4450	stateHandlerMiddleware is used to create a new state handler .
4451	VerifyMessageProviderRaw is used to verify a provider .
4452	VerifyMessageConsumerRaw is used to verify a message .
4453	VerifyProvider is part of the mock .
4454	NewService creates a new mock instance
4455	Setup the service manager
4456	addServiceMonitor starts a new service monitor
4457	removeServiceMonitor removes a service from the service manager .
4458	List lists all processes .
4459	Command returns a command .
4460	call executes a mock
4461	DeleteInteractions deletes all interactions
4462	AddInteraction adds an interaction to the mock
4463	WritePact writes a pact file
4464	ExpectToReceive sets the expectation of the message
4465	WithMetadata sets the Metadata field s value .
4466	AsType sets the type of the message
4467	UserLogin creates a user login
4468	Region returns the region s region .
4469	New creates a new S3 instance
4470	Bucket creates a new bucket .
4471	PutWriter creates a new writer for the given path .
4472	url returns the URL for the bucket .
4473	SetLogger sets the logger .
4474	InstanceKeys returns the keys for the specified role .
4475	EnvKeys returns the keys for the environment
4476	Sign the request
4477	getAWSKeys retrieves all AWS S3s from the environment .
4478	homeDir returns the home directory
4479	ACL sets the ACL header
4480	putPart is part of the Putter interface .
4481	Abort is part of the Putter interface .
4482	growPartSize returns true if the number of bytes size is larger than size .
4483	CheckDisallowed checks if the given spec is valid
4484	Process parses the given spec and returns an error .
4485	MustProcess panics if spec is not nil
4486	toTypeDescription returns the description of a type .
4487	Usage prints a tabular summary .
4488	Usagef is a helper function to generate usage information for usage
4489	Usaget parses the given spec as a string .
4490	Scan implements the Scanner interface .
4491	Value returns the current time value .
4492	NewTime returns a new Time .
4493	TimeFromPtr converts a pointer to a Time object .
4494	ValueOrZero returns the time of the time . Time .
4495	MarshalJSON implements the json . Marshaler interface for Time .
4496	SetValid sets the Time field s value .
4497	Ptr returns the current time . Time .
4498	NewBool node constructor
4499	BoolFromPtr returns a Bool from a bool .
4500	UnmarshalJSON implements the json . Unmarshaler interface .
4501	UnmarshalText unmarshals a Bool .
4502	MarshalJSON implements the json . Marshaler interface for Bool .
4503	SetValid sets the boolean value .
4504	NewString node constructor
4505	UnmarshalJSON implements the json . Unmarshaler interface .
4506	MarshalText implements the encoding of String .
4507	UnmarshalText unmarshals a string .
4508	SetValid sets the String field s value .
4509	StringFromPtr returns a string representation of a string .
4510	MarshalJSON implements the json . Marshaler interface for String .
4511	NewInt node constructor
4512	IntFromPtr converts int64 to int64 .
4513	UnmarshalJSON implements json . Unmarshaler
4514	MarshalText implements the encoding of Int64 .
4515	SetValid sets the Valid field s value .
4516	UnmarshalText unmarshals a string into a Int64 .
4517	MarshalText marshals b to b .
4518	SetValid sets the Float field s value .
4519	MarshalJSON implements the json . Marshaler interface for Time .
4520	UnmarshalJSON implements json . Unmarshaler
4521	UnmarshalText unmarshals a float64 .
4522	MarshalJSON implements json . Marshaler
4523	newGossipChannel creates a new gossip channel
4524	GossipUnicast is part of the gossipChannel interface .
4525	GossipBroadcast implements the gossip channel .
4526	Send sends a message to the gossip channel
4527	SendDown sends a message to the gossip channel
4528	gobEncode encodes a slice of items into a byte slice .
4529	newTokenBucket creates a new token bucket .
4530	wait blocks until the token has expired .
4531	capacityToken returns the expiration time .
4532	PrefixRangeEnd returns the end of the given prefix .
4533	newLocalPeer creates a new local peer
4534	getConnections returns a connection set of connections .
4535	createConnection creates a new connection
4536	doAddConnection adds a new connection to the local peer .
4537	startLocalConnection creates a new local connection
4538	SendProtocolMsg sends a message to the server .
4539	NewStatus returns a new instance of Status
4540	makePeerStatusSlice returns a slice of PeerStatusSlice .
4541	makeUnicastRouteStatusSlice returns a slice of unicast route status .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatusSlice .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatusSlice .
4544	makeTrustedSubnetsSlice returns a slice of trusted subnets .
4545	Range implements the EtcdServer interface .
4546	Put implements the EtcdServer interface .
4547	DeleteRange implements the EtcdServer interface .
4548	Txn implements the EtcdServer interface .
4549	Compact implements the EtcdServer interface .
4550	promoteInternalRaftRequest is used to propose an internal RPC request to send a request to the server .
4551	applyCompare returns the comparison of the given key .
4552	Desccriptions returns a list of all known peers .
4553	OnGC adds a callback to the peer .
4554	OnInvalidShortIDs registers a callback for invalid IDs .
4555	chooseShortID returns the short short ID of the peer .
4556	fetchWithDefault returns a new peer with the given name .
4557	Fetch fetches a peer by name .
4558	fetchAndAddRef fetches a peer by name .
4559	FetchByShortID retrieves a peer by its ID .
4560	GarbageCollect removes all peers from the peers .
4561	newRoutes creates a new route .
4562	OnChange adds a callback to the router .
4563	Unicast returns the IP of the given name .
4564	UnipastAll returns the IP address for the given name .
4565	Broadcast returns a list of peer names .
4566	BroadcastAll returns all peers for the given name .
4567	NewPeer creates a new peer
4568	Register registers a new gossip mesh .
4569	ReadFrom implements the Peer interface .
4570	WriteTo implements io . WriterTo interface .
4571	LocalAddr returns the address of the peer .
4572	OnGossip implements Peer .
4573	OnGossipBroadcast implements the peer . Peer interface .
4574	OnGossipUnicast implements the Peer interface for Peer .
4575	NewDefaultServer creates a new server .
4576	PeerNameFromUserInput creates a peer name from a given input string .
4577	bytes returns the bytes of the peer .
4578	NewRouter creates a new router
4579	sendAllGossip sends all gossip channels to the router .
4580	sendAllGossipDown sends all gossip channels to the router .
4581	broadcastTopologyUpdate is used to broadcast the topology update
4582	OnGossipUnicast implements the Router interface .
4583	OnGossipBroadcast is used to create a new GossipData
4584	Gossip returns a GossipDataData .
4585	OnGossip is part of the router .
4586	Encode encodes the topology data to the topology data .
4587	newState returns a new state .
4588	Merge merges the given mesh into the state .
4589	mergeReceived merges the given set of peers into the given set .
4590	mergeComplete merges the state of the given set .
4591	OnGossipBroadcast creates a new gossip gossip data
4592	OnGossip is used to update the gossip data
4593	generateKeyPair generates a random key pair
4594	formSessionKey creates a session key for the given secret key .
4595	newTCPCryptoState returns a new TCPCryptoState
4596	Send sends a message to the server .
4597	Send sends a message to the buffer .
4598	Send sends a message to the sender .
4599	Receive waits for the response to be received .
4600	Receive receives a message from the buffer .
4601	Receive receives a message from the server .
4602	newPeer creates a new peer
4603	incr returns the number of messages in the peer .
4604	Gossip returns the current state of the peer .
4605	OnGossipUnicast implements the peer . Peer interface .
4606	makeRaftPeer creates a new raft peer .
4607	String returns a string representation of the peer .
4608	forEachConnectedPeer iterates over all connected peers
4609	parsePeerUID parses a string into a PeerUID .
4610	Swap swaps the elements in the list .
4611	Less returns true if the given index is less than j .
4612	doIntro executes the given protocol version .
4613	filterV1Features returns a map of filter v1 .
4614	newConnectionMaker creates a new connection maker .
4615	connectionAborted is called when a connection is aborted .
4616	newGossipSender creates a new gossip sender
4617	Send sends the gossip data to the sender .
4618	Broadcast is used to broadcast the gossip data
4619	Flush flushes the gossip message .
4620	Sender creates a new gossipSender .
4621	Flush returns true if the sender is flushed
4622	findMainPath returns the path of the main process .
4623	Create a new channel
4624	Send a message
4625	SendJSON sends a JSON message to the client
4626	remapError is used to unmarshal an error .
4627	NamespacedContext returns a context with the given namespace .
4628	protoToItem converts the response to a protobuf response .
4629	singleError returns an error if the error occurred .
4630	Get retrieves the item from the cache .
4631	GetMulti returns a map with the given key .
4632	Delete deletes a key
4633	DeleteMulti deletes the given key .
4634	Increment increments the given value .
4635	IncrementExisting increments the given value .
4636	set sets the value of the given item .
4637	Get retrieves the item from the given key .
4638	Stats returns statistics about the memcache .
4639	Flush all memcache .
4640	RunInBackground starts a background process .
4641	List returns a list of modules .
4642	SetNumInstances sets the number of instances .
4643	Versions returns the versions of the given module .
4644	DefaultVersion returns the default version
4645	Start a module
4646	Stop the module
4647	Parentor returns the ancestor of the query .
4648	EventualConsistency is part of the Query interface .
4649	Project adds the projection to the query .
4650	Distinct returns a copy of the query .
4651	DistinctOn sets the distinct fields of the query .
4652	KeysOnly returns a copy of the query .
4653	Limit sets the limit of the query .
4654	Offset sets the offset of the query .
4655	BatchSize sets the size of the query .
4656	Start starts a new query .
4657	End implements the Query interface .
4658	Count returns the number of items in the query .
4659	Run executes the query .
4660	Next returns the next key .
4661	Cursor returns the cursor .
4662	String returns a string representation of the cursor .
4663	DecodeCursor decodes a cursor from a string .
4664	saveEntity saves the given key .
4665	Namespace returns a context with the given namespace .
4666	typeof returns the type of type name
4667	dot returns the name of the given type .
4668	joinFunc returns a string representation of a function .
4669	validPropertyName returns true if the name is valid .
4670	getStructCodec returns the struct for the given type .
4671	LoadStruct loads a struct from dst .
4672	SaveStruct saves a struct .
4673	ServingURL returns the URL of the image .
4674	DeleteServingURL deletes a blob from a blob .
4675	CurrentOAuth user
4676	OAuthConsumerKey returns the OAuth signer for the user .
4677	String returns the string representation of the User .
4678	LoginURL returns the URL for the given destination .
4679	LoginURLFederated creates a login URL for a user .
4680	LogoutURL returns the URL for the user .
4681	insertContext inserts a context into the context .
4682	NewClient creates a new client
4683	NewContext creates a new context
4684	NewRemoteContext creates a new context
4685	Debugf logs a message .
4686	GuestbookKey returns a copy of the guestbook .
4687	toRetryParameters converts the RetryOptions to a protobuf message .
4688	NewPOSTTask creates a new POST request
4689	ParseRequestHeaders parses the request headers
4690	Add creates a task queue
4691	AddMulti adds a batch of tasks to the queue
4692	Delete deletes a task
4693	DeleteMulti deletes a task queue
4694	Lease is part of the queue .
4695	LeaseByTag returns a list of tasks for the given queue .
4696	Purge removes a task queue
4697	ModifyLease is used to modify the task queue
4698	QueueStats returns the queue statistics for a given queue .
4699	IsTimeoutError returns true if the error is a timeout error .
4700	Func registers a function with the given key .
4701	Task returns a taskqueue .
4702	RequestHeaders retrieves the request headers from the request context .
4703	WithContext returns a context with the given context .
4704	WithAPICallFunc adds a context to the context
4705	APICall implements Service .
4706	ModuleHostname returns the hostname of the given module .
4707	AccessToken returns the access token
4708	PublicCertificates returns the certificates for the given app .
4709	ServiceAccount returns the service account .
4710	SignBytes signs the given bytes .
4711	fetch reads data from the reader .
4712	seek attempts to seek the given offset .
4713	multiKeyToProto converts a key into a slice of maps .
4714	referenceValueToKey converts a PropertyValue to a KeyValue .
4715	keyToReferenceValue converts a KeyValue into a PropertyValue
4716	Put implements the Put interface .
4717	PutMulti is a convenience method for PutMulti .
4718	Delete deletes a key
4719	DeleteMulti deletes a single key .
4720	deploy deploys command
4721	Next returns the next record .
4722	protoAppLogLogs returns a slice of AppLogLogs .
4723	protoToRecord converts a request to a record .
4724	Run executes the query .
4725	run reads the results from the stream .
4726	Current returns the current user
4727	IsAdmin returns true if the context is admin .
4728	isErrFieldMismatch returns true if the error occurred .
4729	Stat returns the blob info for the given blob key .
4730	Send sends the given blob key .
4731	UploadURL uploads a blob
4732	Delete deletes a blob key
4733	DeleteMulti deletes the given blob key .
4734	NewReader returns a new reader .
4735	Handle registers a new message .
4736	Send sends a message to the server .
4737	Invite invokes the Invoke method .
4738	Send sends a message to the server .
4739	GetPresence returns the presence of the given sender .
4740	GetPresenceMulti returns a list of all the presence of the given sender .
4741	newStructFLS returns a new FieldLoader .
4742	SaveStruct saves a struct to a struct .
4743	Namespaces returns the names of the namespace .
4744	Kinds returns the names of the given kind .
4745	RunInTransaction runs a transaction with the given context .
4746	Import returns true if the given file is imported .
4747	importSpec returns the importSpec for the given path .
4748	declImports returns true if the import path is imported .
4749	isPkgDot returns true if pkg is a pkg .
4750	isTopName returns true if the given name is a top name .
4751	isName returns true if the given expression exists .
4752	isCall returns true if the given function is a call .
4753	hasTo returns true if the node is a node .
4754	isEmptyString returns true if the expression is empty .
4755	countUses returns the number of statements in the given scope .
4756	AssignTo returns true if the given expression matches the given expression .
4757	newPkgDot node constructor
4758	moveTop moves the file to the file .
4759	matchLen returns the number of elements in the given string .
4760	deleteImport removes the import from the file .
4761	rewriteImport recursively recursively recursively recursively recursively recursively recursively .
4762	DefaultTicket returns the default ticket
4763	flushLog is used to flush log messages
4764	withDeadline adds a deadline to the context .
4765	KeepAlive implements the Conn interface .
4766	applyTransaction applies a transaction to a transaction .
4767	analyze returns a new app .
4768	buildContext creates a new context
4769	finalizeMain creates a new tar file for the given app .
4770	findInGopath returns the path of the given directory .
4771	copyTree copies a directory into a directory .
4772	copyFile copies a file to dst .
4773	checkMain checks if the main package is main .
4774	isMain returns true if f is main .
4775	readFile reads a file from a file .
4776	initField initializes the struct field .
4777	loadEntity loads a protobuf data from the proto .
4778	validIndexNameOrDocID returns true if the string is a valid index .
4779	Open opens a new index .
4780	Put implements the Index interface .
4781	Get retrieves a document from the index .
4782	Delete deletes the given id .
4783	DeleteMulti deletes all documents .
4784	Search implements the Indexer interface .
4785	fetchMore fetches the iterator .
4786	Next returns the next document .
4787	Facets returns all facets of the Iterator .
4788	DefaultBucketName returns the default bucket name
4789	valid returns true if the key is valid .
4790	Equal returns true if two Keys are equal .
4791	root returns the root of the key .
4792	marshal marshals a Key into a byte slice .
4793	String returns a string representation of the Key .
4794	Encode returns a string representation of the Key .
4795	DecodeKey decodes a base64 encoded key
4796	NewIncompleteKey creates a new Key .
4797	NewKey creates a new Key .
4798	AllocateIDs is used to allocate IDs .
4799	IsOverQuota returns true if the error is an error .
4800	ClassicContextFromContext creates a context from a context
4801	Send sends a message to the server .
4802	SendToAdmins sends a message to a message .
4803	Failures returns the number of failures
4804	decodeFieldNumberAndTyp3 decodes the number of bytes from b .
4805	checkTyp3 checks if the given type is valid .
4806	decodeTyp3 decodes a Typ3 .
4807	NewPrefixBytes creates a new PrefixBytes .
4808	getLengthStr returns the length of the type .
4809	collectImplementers implements the Codec interface for Codec .
4810	checkConflictsInPrio checks if the given type is in a conflict .
4811	constructConcreteType constructs a concrete type from the given type .
4812	MarshalBinaryLengthPrefixedWriter implements io . Writer
4813	MarshalBinaryBare implements the encoding . BinaryMarshaler interface .
4814	UnmarshalBinaryLengthPrefixed implements the Codec interface .
4815	UnmarshalBinaryBare implements the Codec interface for Codec .
4816	MustMarshalJSON implements the Codec interface for Codec .
4817	MustUnmarshalJSON implements the Codec interface for Codec .
4818	MarshalJSONIndent implements json . Marshaler
4819	newDataReader returns a new internal data reader .
4820	Read implements io . Reader
4821	ListenAndServeTLS listens on a TLS server .
4822	Produce is a wrapper around ProducerFunc
4823	PromoteHandlerFunc creates a HandlerFunc with the given arguments .
4824	Serve starts a server .
4825	Serve implements the Server interface .
4826	Fail implements the parser .
4827	WriteUsage implements the io . Writer interface .
4828	WriteHelp implements the io . Writer interface .
4829	MustParse parses the given dest and returns a Parser .
4830	Parse parses the given dest and returns an error .
4831	walkFields walks recursively recursively recursively recursively recursively recursively .
4832	Parse parses the arguments .
4833	setSlice sets the value of a slice .
4834	canParse returns true if the given type is a valid type .
4835	isBoolean returns true if the type is a boolean .
4836	NewFromMap creates a new Tree .
4837	Insert inserts a new element into the tree .
4838	Delete implements the Tree interface .
4839	DeletePrefix removes a prefix from the tree .
4840	deletePrefix removes a prefix from the tree .
4841	Get returns the value of the given string .
4842	LongestPrefix returns the longest prefix of the given string .
4843	Minimum returns the minimum value of the tree .
4844	WalkPrefix walks the tree rooted at the given prefix .
4845	recursiveWalk recursively recursively recursively recursively recursively .
4846	ToMap converts the tree into a map .
4847	checkIP returns the IP address of the given IP address .
4848	read uint32
4849	read uint32
4850	load a new IP2Location record
4851	Print a record
4852	Main is part of the GraphicsContext interface .
4853	SaveToPdfFile saves a PDF file to a file .
4854	CubicCurveTo implements the Path interface .
4855	ArcTo implements the PathTo interface .
4856	String returns a string representation of the Path .
4857	VerticFlip returns a copy of this path .
4858	NewGlyphCache returns a new GlyphCache
4859	Fetch fetches the glyphs from the glyphCache .
4860	renderGly renders the glyph .
4861	Copy returns a copy of this glyph .
4862	Fill returns the width of the glyph .
4863	Main is the main entry point .
4864	Draw draws the given graphic .
4865	Draw applies the color to the Painter .
4866	SetColor sets the color
4867	NewPainter creates a new Painter
4868	GetStringBounds returns the string representation of a string .
4869	calc recalculates the current font .
4870	SetFont sets the font
4871	ClearRect clears the gc image .
4872	drawString draws the given text .
4873	newGroup creates a new Group .
4874	newMask creates a new mask .
4875	embedsSVGFont embeds the given text .
4876	TraceQuad is the same as TraceQuad but does nothing .
4877	GetFontName returns the font name
4878	NewStackGraphicContext creates a new StackGraphicContext
4879	NewFolderFontCache returns a new FolderFontCache .
4880	NewSyncFolderFontCache creates a SyncFolderCache .
4881	Main is the main implementation of Graphics2 .
4882	NewPdf creates a new PDF object
4883	clearRect clears the rectangle .
4884	NewGraphicContext returns a new GraphicContext
4885	Clear clears the page .
4886	GetStringBounds returns the width of the given string .
4887	CreateStringPath creates a cursor for the given text .
4888	FillStringAt returns the cursor at the given point .
4889	SetStrokeColor sets the color of the stack .
4890	SetFillColor sets the color .
4891	SetLineDash sets the line dash coordinates .
4892	SetLineWidth sets the line width .
4893	Main is part of the Graphics interface .
4894	Draw draws the text .
4895	SaveToPngFile saves the image to the given image .
4896	LoadFromPngFile loads a png file from a file path .
4897	Resource returns a string representation of a resource .
4898	Output returns a string representation of a file .
4899	Main is the main implementation of the main image .
4900	Draw draws the given graphic .
4901	Main is part of the Graphics interface .
4902	Bangle draws a rectangle with the given height .
4903	Dash draws the given rectangle .
4904	CubicCurve creates a new CubicCurve .
4905	FillStroke fills the stroke with the given width .
4906	FillStyle fills the drawing style .
4907	PathTransform applies the given width to the given width .
4908	Star draws the given color .
4909	Draw draws an image .
4910	ConvertPath converts the path to a path .
4911	Main is the main entry point .
4912	Draw draws a new line .
4913	DrawContour draws a rectangle .
4914	Flatten is a helper for Flatten
4915	Clear clears the graphics .
4916	ClearRect clears the image .
4917	DrawImage draws an image .
4918	Main renders the graphic image .
4919	Draw draws the image .
4920	Draw draws the given rectangle .
4921	ChecksumString32S returns the hash of a string .
4922	ChecksumString64S returns the checksum of a string .
4923	NewS32 returns a new XXHash .
4924	NewS64 creates a new seed with seed seed .
4925	round64 computes the 64 - bit 64 - bit integer .
4926	Checksum32S returns the hash of the given seed .
4927	Checksum64S returns the checksum for a given seed .
4928	getStage returns the current stage .
4929	New returns a new Glg instance
4930	Get returns the glgg g . glg . glg . glg .
4931	SetMode sets the logger s mode .
4932	SetPrefix sets the prefix of the logger .
4933	GetCurrentMode returns the mode for the given level .
4934	InitWriter initializes the logger .
4935	SetWriter sets the logger s writer .
4936	SetLevelColor sets the color for the given color .
4937	SetLevelWriter sets the logger s level .
4938	AddStdLevel adds a new logger to the glggg .
4939	EnableColor sets the color of the glogg .
4940	EnableLevelColor enables the color of the glogg .
4941	DisableLevelColor disables the color .
4942	RawString converts a string to a string .
4943	TagStringToLevel converts a string to a string .
4944	Println prints a line to stdout .
4945	Fatal logs an error .
4946	Fatalf logs an error .
4947	isModeEnable returns true if the mode is enabled .
4948	CaptureMetrics wraps the http . Handler interface .
4949	get returns the value at the given key .
4950	Save writes data to disk
4951	SaveToFile saves a file to disk .
4952	Load loads data from the given reader .
4953	LoadFromFile loads data from a file
4954	Key returns the key for the given id .
4955	Value returns the value at the given id .
4956	Delete deletes the given key .
4957	Set sets the version of the version
4958	Compare compares two versions .
4959	Slice returns the version of the version .
4960	BumpMajor returns the version of the version .
4961	BumpMinor bumps the version of the version .
4962	BumpPatch is part of the Version interface .
4963	validateIdentifier validates the given identifier .
4964	newStream creates a new Stream .
4965	addSubscriber creates a new subscriber .
4966	New returns a new Server instance
4967	Close closes the server .
4968	CreateStream creates a new stream
4969	RemoveStream removes a stream from the server .
4970	StreamExists returns true if the given ID exists .
4971	Publish publishes an event .
4972	NewClient creates a new Client .
4973	Subscribe sends an event to the server .
4974	SubscribeChan subscribes to the given channel .
4975	SubscribeRaw sends a message to the client .
4976	Unsubscribe removes a channel from the client .
4977	NewEventStreamReader returns a new EventStreamReader
4978	ReadEvent reads an event from the stream .
4979	HTTPHandler is the handler for HTTP requests
4980	Add adds a new event to the event log .
4981	Replay implements the EventLogger interface .
4982	readKey reads a file from the given path .
4983	writeKey writes a private key to disk .
4984	AnyKey returns the signer for the given filename .
4985	sameDir returns a copy of the filepath .
4986	printAccount prints the account for the account .
4987	tpl template
4988	printUsage prints the usage of the command .
4989	FromRequest returns the address of the request
4990	Do executes the command .
4991	Do implements the DisableParams interface .
4992	Do executes the command .
4993	Do executes the command .
4994	Do executes the command .
4995	Do executes the command .
4996	Do executes the InspectWorker .
4997	SetForceUpdateOnPageLoad mocks base method
4998	Do executes the command .
4999	Do executes the command .
5000	Do executes the command
5001	Do executes the command .
5002	Do executes the command .
5003	Do executes the command .
5004	Do executes a bind command .
5005	Do executes the command .
5006	Error implements the Error interface for ErrorDetails .
5007	Do executes the release animations .
5008	Do executes the command .
5009	Do executes the command .
5010	Do executes the command .
5011	Do executes the command .
5012	Do executes the command
5013	Do executes the command .
5014	Do executes the command .
5015	Do executes the command .
5016	WithSamplingInterval sets the SamplingInterval field s value .
5017	WithSuppressRandomness sets the SuppressRandomness field s value .
5018	Do executes the command .
5019	Do implements the StopSamplingParams interface .
5020	Do executes the command .
5021	Do executes the command .
5022	Do executes the command .
5023	Do executes the StopViolationsReport command .
5024	String returns the string representation of the Modifier .
5025	WithNodeID sets the NodeID field s value .
5026	WithBackendNodeID sets the BackendNodeID field s value .
5027	WithObjectID sets the ObjectID field s value .
5028	WithFetchRelatives sets the FetchRelatives field s value .
5029	Do executes the command .
5030	WithClipRect sets the ClipRect field s value .
5031	Do executes the command .
5032	Do executes the command .
5033	Do executes the delete database .
5034	Do executes the deleteObjectStoreEntries command .
5035	WithKeyRange sets the KeyRange field s value .
5036	Do executes the command .
5037	Do executes the command .
5038	WithCallCount sets the CallCount field s value .
5039	WithDetailed adds the detailed detail params
5040	Do executes the command .
5041	Do executes the command .
5042	Stop implements the StopPreciseCoverageParams interface .
5043	Do executes the command .
5044	Do executes the command .
5045	Do executes the command .
5046	Do executes the collector .
5047	WithSamplingInterval sets the SamplingInterval field s value .
5048	Do executes the command .
5049	WithReportProgress sets the ReportProgress field s value .
5050	Stop implements the StopTrackingObjects interface .
5051	WithReportProgress sets the ReportProgress field s value .
5052	Do executes the command .
5053	WithBrowserContextID sets the BrowserContextID field s value .
5054	Do executes the command .
5055	WithBrowserContextID sets the BrowserContextID field s value .
5056	Do executes the command .
5057	Do executes the command .
5058	Do executes the command .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID adds the TargetID to the get window ID params
5061	Do executes the command .
5062	WithImage adds the image to the set dockTile params
5063	Do executes the command .
5064	Do executes the delete cache .
5065	Do executes the delete entry .
5066	WithPathFilter sets the PathFilter field s value .
5067	Do executes the command .
5068	Do executes the command .
5069	Do executes the markable state .
5070	WithIncludeUserAgentShadow sets the IncludeUserAgentShadowDOM field s value .
5071	Do executes the command .
5072	Do executes the command .
5073	Do executes the command .
5074	Do executes the command .
5075	WithNodeID adds the node ID to the resolve node ID params
5076	WithBackendNodeID sets the BackendNodeID field s value .
5077	WithExecutionContextID sets the ExecutionContextID field s value .
5078	Do executes the command .
5079	WithName adds the name to the set attributes params
5080	Do executes the command .
5081	Do executes the command .
5082	Do executes the command .
5083	Do executes the command .
5084	Do executes the command .
5085	Do executes the command .
5086	Do executes the command .
5087	SetEffectivePropertyValueForNodeArgs initializes SetEffectivePropertyValueForNodeArgs with the required arguments .
5088	Do executes the command .
5089	Do executes the command .
5090	Do executes the command
5091	Do executes the command .
5092	Do executes the command .
5093	Do executes the command .
5094	Do executes the command .
5095	Do executes the command .
5096	Do executes the command .
5097	WithNodeID sets the NodeID field s value .
5098	WithBackendNodeID sets the BackendNodeID field s value .
5099	WithObjectID sets the ObjectID field s value .
5100	WithSelector adds the selector to the highlight node params
5101	Do executes the hyperlight node .
5102	Do executes the command .
5103	Do executes the command .
5104	WithHighlightConfig sets the HighlightConfig field s value .
5105	Do executes the command .
5106	SetShowAdHighlights executes the command .
5107	SetMessage sets the Message field s value .
5108	Do executes the command .
5109	SetShowDebugBorders implements the SetShowDebugBordersParams interface .
5110	DoShowFPSCounter implements the SetShowFPSCounter interface .
5111	Do executes the command .
5112	SetShowScrollBottleneckRects implements the SetShowScrollBottleneck interface .
5113	SetShowHitTestBorders implements the SetShowHitTestBorders interface .
5114	SetShowViewportSizeOnResize sets the ShowViewportSizeOnResize optional argument .
5115	Do executes the command .
5116	Do executes the command
5117	WithErrorReason sets the ErrorReason field s value .
5118	WithRawResponse adds the raw response to the receive response params
5119	WithURL sets the URL field s value .
5120	WithMethod sets the Method field s value .
5121	WithPostData sets the PostData field s value .
5122	WithHeaders sets the Headers field s value .
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field s value .
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do executes the delete cookies .
5129	WithConnectionType adds the ConnectionType to the EmulateNetworkConditions params
5130	Do executes the command .
5131	Do executes the enable command
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the command .
5134	Do executes the command .
5135	Do executes the command .
5136	Do executes the command .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the secure cookie to the set cookie params
5141	WithHTTPOnly sets the HTTPOnly field s value .
5142	WithSameSite sets the SameSite field s value .
5143	WithExpires sets the Expires field s value .
5144	Do executes the command .
5145	Do executes the command .
5146	Do executes the command .
5147	Do executes the command .
5148	Do executes the command .
5149	Do executes the command .
5150	Do executes the ResetPageScaleFactor .
5151	Do executes the command .
5152	SetCPUThrottlingRate mocks base method
5153	WithColor adds the color to the set default background color override params
5154	SetDefaultBackgroundColorOverride sets the default background color override .
5155	WithScale adds the ScaleMetrics override params
5156	WithDontSetVisibleSize sets the DontSetVisibleSize field s value .
5157	WithScreenOrientation sets the ScreenOrientation field s value .
5158	Do executes the command .
5159	Do executes the command .
5160	Do executes the command .
5161	Do executes the command .
5162	Do executes the command .
5163	WithLatitude sets the LatitudeOverride field s value .
5164	WithLongitude adds the LongitudeOverride params
5165	WithAccuracy sets the Accuracy field s value .
5166	Do executes the command .
5167	Do executes the command .
5168	Do executes the command .
5169	WithMaxTouchPoints sets the MaxTouchPoints field s value .
5170	SetTouchEmulationEnabled mocks base method
5171	WithBudget adds the BudgetPolicy params
5172	WithMaxVirtualTimeStarvationCount sets the MaxVirtualTimeStarvationCount field s value .
5173	WithWaitForNavigation sets the WaitForNavigation field s value .
5174	WithAcceptLanguage sets the AcceptLanguage field s value .
5175	WithPlatform sets the Platform field s value .
5176	Do executes the command .
5177	Do executes the command .
5178	Do executes the command .
5179	WithButtons sets the Button field s value .
5180	Do executes the command .
5181	Do executes the command .
5182	Do executes the command .
5183	Do executes the command .
5184	Do executes the command .
5185	WithXverscroll sets the XOverscroll field s value .
5186	WithYOverscroll sets the Yoescroll field s value .
5187	Do executes the command .
5188	Do executes the command .
5189	Domain returns the domain name .
5190	WithDepth adds the depth to the get event listeners params
5191	Do executes the command .
5192	WithTargetName sets the TargetName field s value .
5193	Do executes the remove event listener .
5194	RemoveInstrumentationBreakpoint implements the RemoveInstrumentation interface .
5195	Remove the xHRBreakpoint params
5196	Do executes the command .
5197	Do executes the command line listener .
5198	Do executes the command .
5199	Do executes the command .
5200	WithExecutor returns a context with the given context .
5201	Execute executes the given context .
5202	AttributeValue returns the name of the node .
5203	xpath returns the path of the node .
5204	String returns the string representation of a NodeType .
5205	Do executes the command .
5206	Do executes the command .
5207	Do executes a StopCastingParams .
5208	Do executes the command .
5209	Do executes the StopObservingParams .
5210	Do executes the command .
5211	Do executes the command .
5212	WithObjectID sets the ObjectID field s value .
5213	WithArguments sets the Arguments field s value .
5214	WithExecutionContextID sets the ExecutionContextID field s value .
5215	WithObjectGroup sets the ObjectGroup field s value .
5216	Do executes the command .
5217	WithContextID sets the ContextID field s value .
5218	WithOwnProperties sets the OwnerProperties field s value .
5219	WithGeneratePreview sets the GeneratePreview field s value .
5220	WithExecutionContextID sets the ExecutionContextID field s value .
5221	WithObjectGroup adds the ObjectGroup to the query params
5222	Do executes the release .
5223	Do executes the command .
5224	Do executes the command
5225	Do executes the command .
5226	Do executes the command .
5227	Do executes the command
5228	Do executes the command .
5229	Do executes the command .
5230	Do executes the command .
5231	Do executes the command .
5232	WithBufferUsageReportingInterval sets the BufferUsageReportingInterval field s value .
5233	WithNoDisplayUpdates sets the NoDisplayUpdates field s value .
5234	WithScreenshot adds the screenshot to the begin frame params
5235	Do executes the command .
5236	WithClip adds the clip to the CaptureScreenshot params
5237	WithFromSurface sets the FromSurface field s value .
5238	WithWorldName sets the WorldName field s value .
5239	WithGrantUniverAccess sets the GrantUniverAccess field s value .
5240	Do executes the ResetNavigationHistory command .
5241	WithPromptText sets the PromptText field s value .
5242	Do executes the command .
5243	WithReferrer sets the Referrer field s value .
5244	WithTransitionType sets the TransitionType field s value .
5245	WithFrameID sets the FrameID field s value .
5246	Do the command
5247	WithLandscape sets the Landscape field s value .
5248	WithDisplayHeaderFooter sets the DisplayHeaderFooter field s value .
5249	WithPrintBackground sets the PrintBackground field s value .
5250	WithScale sets the Scale field s value .
5251	WithPaperWidth sets the PaperWidth field s value .
5252	WithPaperHeight sets the PaperHeight field s value .
5253	WithIgnoreInvalidPageRanges sets the IgnoreInvalidPageRanges field s value .
5254	WithFooterTemplate sets the footerTemplate field s value .
5255	WithPreferCSSPageSize sets the PreferCSSPageSize field s value .
5256	WithScriptToEvaluateOnLoad sets the ScriptToEvaluateOnLoad field s value .
5257	Do executes the reload command .
5258	DoExecuteOnNewDocument params
5259	Do executes the command .
5260	Do executes the command .
5261	Do executes the command .
5262	Do executes the command .
5263	Do executes the command .
5264	Do executes the command .
5265	WithDownloadPath adds the downloadPath to the set downloadBehavior params
5266	Do executes the command .
5267	Do executes the command .
5268	WithFormat sets the Format field s value .
5269	WithMaxWidth sets the MaxWidth field s value .
5270	WithMaxHeight sets the MaxHeight field s value .
5271	WithEveryNthFrame sets the EveryNthFrame field s value .
5272	Do executes the command .
5273	Do executes the command
5274	Do executes the command .
5275	Do executes the command .
5276	Do executes the command .
5277	Do implements the AddCompilationCache interface .
5278	Do executes the command .
5279	WithGroup adds the group to the generate test report params
5280	Do executes the command
5281	Do activate target
5282	WithBindingName sets the BindingName field s value .
5283	Do executes the command
5284	WithBrowserContextID sets the BrowserContextID field s value .
5285	WithSessionID sets the SessionID field s value .
5286	Do executes the command .
5287	Do executes the command .
5288	WithSessionID sets the SessionID field s value .
5289	Do executes the command .
5290	Do executes the command .
5291	Do executes the command .
5292	Do executes the command .
5293	WithPatterns sets the Patterns field s value .
5294	WithHandleAuthRequests sets the HandleAuthRequests field s value .
5295	Do executes the command .
5296	WithBody adds the body to the FulfillRequest params
5297	WithResponsePhrase sets the ResponsePhrase field s value .
5298	Do executes the FulfillRequestParams .
5299	WithURL adds the URL to the request params
5300	WithMethod sets the Method field s value .
5301	WithPostData sets the PostData field s value .
5302	WithHeaders sets the Headers field s value .
5303	Do executes the request .
5304	Do executes the command .
5305	Do executes the command .
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field s value .
5307	Do executes a command .
5308	Do executes the command
5309	Do implements the RemoveBreakpointParams interface .
5310	Do executes the command .
5311	Do executes the command .
5312	Do executes the command .
5313	Do executes the command .
5314	WithURL adds the URL to the set breakpointByURL params
5315	WithURLRegex sets the URLRegex field s value .
5316	WithScriptHash sets the ScriptHash field s value .
5317	WithColumnNumber sets the ColumnNumber field s value .
5318	WithCondition adds the condition to the set breakpointOnFunctionCall params
5319	Do executes the command .
5320	DoPauseOnExceptions executes the command .
5321	Do executes the command .
5322	WithDryRun sets the DryRun field s value .
5323	SetSkipAllPauses executes the given command .
5324	Do executes the command .
5325	WithBreakOnAsyncCall sets the BreakOnAsyncCall field s value .
5326	Do executes the step .
5327	Do executes the step command .
5328	Do implements StepOverParams .
5329	Listen implements net . Listen
5330	ListenClose implements net . ListenCloser
5331	Connected implements the Notify interface .
5332	Disconnected is part of the Notification interface .
5333	OpenedStream implements the NetworkBundle interface .
5334	CloseStream implements the notifyBundle interface .
5335	WithNoDial returns a context with the given reason .
5336	GetNoDial returns the value associated with the given context .
5337	WithDialPeerTimeout returns a context with the given timeout .
5338	Open opens a connection
5339	Prevpos returns the next position in the buffer .
5340	Last returns the last number of bytes .
5341	DeleteMostRecentBytes removes the number of bytes from the buffer .
5342	NewFloat64RingBuf returns a new Float64RingBuf .
5343	TwoContig returns a slice of float64 pointers .
5344	Earliest returns the last value in the buffer .
5345	Values returns a slice of float64 values .
5346	NewAtomicFixedSizeRingBuf returns a new AtomicFixedSizeRingBuf instance
5347	Reset resets the buffer .
5348	NewPointerRingBuf returns a pointer to a pointer to a pointer .
5349	TwoContig returns a slice of pointers .
5350	NumPage returns the number of pages .
5351	Font returns the font for the given name .
5352	Width returns the width of the font .
5353	Encoder returns the text encoding of the font .
5354	Implements the given string .
5355	Open reads a file from the file .
5356	NewReader creates a new Reader from the given io . Reader .
5357	NewReaderEncrypted returns a new Reader with the given size .
5358	Traverse the reader .
5359	Kind implements Value .
5360	newBuffer returns a new buffer .
5361	Paginate returns a pagination . Pagination
5362	CascadeDelete deletes the given collection .
5363	cascadeDeleteWithConfig is used to cascade a relationship to a cascade .
5364	cascadeSaveWithConfig is the same as cascadeSaveWithConfig .
5365	MapFromCascadeProperties creates a map from a document .
5366	Connect connects to the connection
5367	lowerInitial returns the lowercase of the given string .
5368	Find returns a new ResultSet .
5369	RawInformationQuery generates a raw query for a query .
5370	NewClient returns a new Client
5371	Close closes the client .
5372	startTLSIfRequired is used to start tls .
5373	startStream starts the stream .
5374	IsEncrypted returns true if the client is encrypted
5375	Recv returns a chat message .
5376	Send sends a message to the chat .
5377	SendOrg sends an org to the server .
5378	Send keep alive
5379	SendHtml sends a HTML message to the chat .
5380	nextStart returns the next start element .
5381	JoinProtectedMUC is a convenience method for joining a user .
5382	LeaveMUC is part of the server interface .
5383	AttachBuffer attaches an attachment to the message .
5384	Attach attaches a file to the message .
5385	Inline adds a file to the message .
5386	AddHeader adds a new header to the message .
5387	Potist returns a list of all the recipients of this message .
5388	Bytes returns a copy of the message .
5389	Send sends a message to the given address .
5390	GetHeader returns the name of the envelope .
5391	GetHeaderValues returns the values for the given name .
5392	SetHeader adds a header to the envelope .
5393	AddHeader adds a header to the envelope .
5394	DeleteHeader deletes a header
5395	AddressList returns the list of addresses for the given key .
5396	Clone returns a copy of the envelope .
5397	ReadEnvelope reads an envelope from r .
5398	EnvelopeFromPart returns an Envelope from the given part .
5399	parseTextOnlyBody parses the content of the body as text .
5400	parseMultiPartBody parses a single multipart content .
5401	matchHTMLBodyPart returns true if the body is a HTML body .
5402	ensureCommaDelimitedAddresses adds a comma separated string to the string .
5403	Date sets the date .
5404	From sets the address for the given address .
5405	Subject sets the Subject field s value .
5406	To sets the address to the given address .
5407	ToAddrs sets the address to the recipient .
5408	CC adds a new email address .
5409	CCAddrs sets the CCAddrs optional argument .
5410	ReplyTo sets the email address to the given address .
5411	Header adds a new header to the MailBuilder .
5412	AddAttachment adds a file attachment to the body .
5413	AddFileAttachment adds a file attachment to the file .
5414	AddInline adds a file to the mail builder .
5415	Equals compares two MailBuilder objects .
5416	Encode implements the io . Writer interface .
5417	encodeHeader encodes the header .
5418	encodeContent encodes the content into b .
5419	selectTransferEncoding returns the transfer encoding of the given content .
5420	set param value
5421	NewBase64Cleaner creates a new base64Cleaner .
5422	decodeToUTF8Base64Header decodes a base64 encoded string into a string .
5423	parseMediaType parses a string and parses it as a string .
5424	fixMangledMediaType attempts to fix the media type
5425	detectMultipartMessage returns true if the multipart content is multipart .
5426	detectBinaryBody returns true if the body is a binary body .
5427	BththMatchFirst returns the first part of the PartMatcher .
5428	BatchMatchAll returns a slice of all the elements in the list .
5429	DepthMatchFirst returns the first part of the PartMatcher .
5430	DepthMatchAll returns a list of all children of the given part .
5431	ToASCII converts a string to an ASCII string .
5432	NewPart creates a new Part .
5433	AddChild adds a new child to the parent .
5434	TextContent returns true if the part of the part of the part .
5435	setupHeaders sets the content of the media type .
5436	setup content headers
5437	convertFromDetectedCharset parses a CharsetCharset .
5438	Clone returns a copy of this Part .
5439	ReadParts reads a part of the io . Reader .
5440	parseParts parses a part of a part .
5441	UUID returns a string representation of uuid
5442	NewQPCleaner creates a new QPCleaner .
5443	Error implements the Error interface for Error .
5444	addError adds an error to the error list .
5445	addWarning adds a warning message .
5446	Wrap returns a copy of the given string .
5447	ConvertToUTF8String converts a string to UTF - 8 .
5448	JoinAddress returns a string representation of an address .
5449	Printf prints a formatted formatted message
5450	EnvelopeToMarkdown writes an envelope to the given writer .
5451	FormatPart writes the content of the given writer .
5452	newBoundaryReader creates a new boundary reader .
5453	Read implements io . Reader .
5454	Next returns the next boundary .
5455	Parse parses the given byte array and returns the result .
5456	Assign assigns a value to a byte array .
5457	NewRClient creates a new RClient
5458	NewRClientWithAuth creates a new RClient with the given port and password .
5459	Register registers a custom generator .
5460	Fuzz is a convenience function for fuzzing
5461	findFakeFunctionFor returns a function that returns a function for the given function name .
5462	Apply applies options .
5463	ToOption implements the Option interface for Options .
5464	Wait until the event channel is closed .
5465	send sends a query to the event channel .
5466	NewMovingAverage returns a new MovingAverage instance
5467	Set sets the value of the variable
5468	calcKeys50 calculates the keys for the given password .
5469	getKeys extracts the keys from the archive .
5470	checkPassword checks if a password is valid .
5471	parseFileEncryptionRecord parses the contents of a file .
5472	parseEncryptionBlock parses the contents of the archive .
5473	newArchive50 returns a new FileBlockReader
5474	Read implements the io . Reader interface .
5475	ReadByte implements io . Reader .
5476	newCipherBlockReader creates a new cipher block .
5477	newAesDecryptReader returns a new cipher block .
5478	limitByteReader returns a limited reader for the given io . Reader .
5479	Mode returns the file mode of the FileHeader .
5480	nextBlockInFile returns the next block in the file .
5481	next returns the next block header .
5482	Read implements the io . Reader interface .
5483	Read implements io . Reader
5484	Next returns the next file .
5485	NewReader creates a new io . Reader .
5486	OpenReader opens a ReadCloser .
5487	getV3Filter returns a v3 filter from the given byte slice .
5488	init initializes the decoder .
5489	readBlockHeader reads the header from the decoder .
5490	readCodeLengthTable reads the code length of the bit length .
5491	shrinkStates removes all states from the current state .
5492	expandStates expands all states in the context .
5493	pushByte adds a byte to the heap .
5494	genByte returns the next byte in the given index .
5495	findContext returns the current context .
5496	calculateAes30Params calculates the SHA256 hash for a given hash .
5497	parseDosTime parses a time . Time .
5498	decodeName decodes the name of a name .
5499	readExtTimes reads a compressed timestamp from the file .
5500	readBlockHeader reads a block header from the archive .
5501	newArchive15 returns a new instance of an archive .
5502	readFilter5Data reads the filter data from the reader .
5503	writeByte writes a byte to w .
5504	copyBytes copies the buffer from the buffer .
5505	read reads from the window .
5506	queueFilter adds a filter to the buffer .
5507	processFilters reads the filters from the stream .
5508	fill fills in the filter .
5509	Read implements io . Reader .
5510	readFull reads the contents of the given reader .
5511	findSig finds the signature from the bufio .
5512	execute executes the given command .
5513	newVM creates a new VM .
5514	limitBitReader returns a bitreader that can be used to read a bitreader .
5515	readUint32 reads a uint32 from r .
5516	step3 returns true if the given word is in the snowball .
5517	Stem returns the stem of the given word .
5518	step6 returns true if the given word is less than 1 .
5519	step5 returns true if the given word is in the snowball .
5520	step2a returns true if the given word is 2 .
5521	step4 returns true if the given word is in the snowball .
5522	Stem returns a stemmed stem with the given word .
5523	step1c returns true if the given snowball word is 1 .
5524	step3 returns true if the given snowball word is 3 .
5525	isStopWord returns true if the word is stop .
5526	capitalizeYUI is similar to capitalizeYUI
5527	step2 returns true if the snowball word is less than 1 .
5528	step3 attempts to step 3 .
5529	stepStep returns true if the given snowballword is a valid word .
5530	VnvSuffix returns the suffix of the given word .
5531	step1 returns true if the given snowball word is 1 .
5532	step2a returns true if the snowball is 2 .
5533	removePerfectiveGerundEnding returns true if the given snowball ends .
5534	removeAdjectivaluationEnding removes the end of the given snowball .
5535	step2b returns true if the snowball is 2 .
5536	step4 returns true if the given word is a valid word .
5537	step5 returns true if the snowball is in the snowball .
5538	Stem returns the stem of the given word .
5539	Stem prints the word to the given word .
5540	isStopWord returns true if the word is stop .
5541	isStopWord returns true if the word is a stop word .
5542	New returns a new SnowballWord
5543	RemoveLastNRunes removes the number of runes from the word .
5544	resetR1R2 resets the R1 word .
5545	slice returns a slice of runes .
5546	FitsInR1 returns true if the given x1 is in r1 .
5547	FitsInR2 returns true if x is in the given range .
5548	FitsInRV returns true if the given x is in r .
5549	FirstPrefix returns the first prefix of the given word .
5550	HasSuffixRunes returns true if the given suffix is a suffix .
5551	FirstSuffixIfIn returns the first suffix of the given suffix .
5552	RemoveFirstSuffixIf removes the first suffix from the given string .
5553	RemoveFirstSuffix removes the suffix from the given string .
5554	FirstSuffix returns the suffix of the given word .
5555	preprocess parses the given word .
5556	step0 returns true if the given word is in the snowball .
5557	step1 returns true if the given word is in the snowball .
5558	step2b returns true if the snowball is 2 .
5559	capitalizeYs returns the capitalization of the given word .
5560	unapitalizeYs populates the snowball word .
5561	stemSpecialWord returns a stemmed word from a word .
5562	isShortWord returns true if the word is a short word .
5563	step1 returns true if the given snowball word is 1 .
5564	Set sets the value for the given key .
5565	Get returns the value associated with the given key .
5566	Cleanup cleans up the goroutine
5567	getValues returns the values for the goroutine .
5568	linkGRs links to gRPC .
5569	unlinkGRs removes the goroutine ID .
5570	AppUri creates a new AppUri .
5571	CurlAppWithTimeout starts a goroutine with the given timeout .
5572	CurlApp creates a new http client .
5573	CurlAppRoot returns the URL for the app .
5574	GetTags returns a list of tags matching prefix .
5575	GetTagsAsUniqueStrings returns a slice of strings as strings .
5576	isTerminator returns true if the rune is a terminal .
5577	uniquify returns a slice of strings .
5578	New creates a new middleware middleware .
5579	Get retrieves a URL from the context .
5580	GenerateRSAKeyPair generates a new RSA key pair from the given io . Reader .
5581	Verify verifies that the given data is valid .
5582	Encrypt encrypts a public key
5583	Sign signs a private key .
5584	GetPublic returns the public public key
5585	Decrypt decrypts a private key
5586	UnmarshalRsaPrivateKey unmarshals a RsaPrivateKey from a byte slice .
5587	GenerateKeyPair generates a private key pair with the given bits .
5588	GenerateKeyPairWithReader returns a PrivKeyPair with the given io . Reader .
5589	GenerateEKeyPair generates a private key pair for the given curve name .
5590	UnmarshalPublicKey unmarshals a public key .
5591	MarshalPublicKey marshals a public key to a public key
5592	UnmarshalPrivateKey unmarshals a private key .
5593	MarshalPrivateKey encodes a private key
5594	KeyEqual returns true if the two keys are equal .
5595	GenerateECDSAKeyPair generates an ECSA key pair with the given io . Reader .
5596	GenerateECDSAKeyPairWithCurve creates a new private key pair with the given curve .
5597	ECDSAKeyPairFromKey creates a new instance of ECDSA private key .
5598	UnmarshalECDSAPrivateKey unmarshals a ECDS private key from the given data .
5599	UnmarshalECAPublicKey unmarshals an ECDSA public key .
5600	Equals returns true if the key is equal .
5601	Sign signs a private key .
5602	Equals returns true if the given key is equal .
5603	Verify verifies that the given signature is valid .
5604	GenerateSecp256k1Key generates a Privp256Key from src .
5605	UnmarshalSecp256PrivateKey decodes a secp256 private key .
5606	UnmarshalSecp256PublicKey decodes a Pubp256 public key .
5607	Equals returns true if the given key is equal .
5608	Sign signs the given data .
5609	Equals returns true if the given key is equal .
5610	Verify verifies the signature of the given signature .
5611	Raw returns the raw bytes of the private key .
5612	Sign signs the given message .
5613	Equals returns true if the key is equal .
5614	Verify verifies the public key .
5615	UnmarshalEd25519PublicKey decodes an Ed25519 public key .
5616	UnmarshalEd25519PrivateKey unmarshals an ed25519 private key .
5617	EditScriptForStrings implements the EditScript interface .
5618	EditScriptForMatrix returns a copy of the given matrix .
5619	WriteMatrix writes a matrix to the given matrix .
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the given file .
5622	TryLock tries to acquire a lock on the file .
5623	Unlock unlocks the lock .
5624	NewBase creates a new Base instance
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger adds a new logger
5627	LogWithTime logs a message at the given time .
5628	Log implements the Log interface .
5629	Warnm log message
5630	NewTemplateWithFuncMap creates a new Template with the given function .
5631	Execute implements the Template interface .
5632	NewTemplateMsg creates a new TemplateMsg .
5633	NewLogAdapterFor returns a new LogAdapter
5634	SetAttr implements the LogAdapter interface .
5635	LogWithTime implements LogAdapter .
5636	Log implements LogAdapter .
5637	Dbgm log message
5638	NewAttrsFromMap creates a new Attrs from a map
5639	NewAttrsFromAttrs creates a new Attrs from an Attrs .
5640	MergeAttrs merges the attributes of an Attrs .
5641	SetAttr implements the Attrs interface .
5642	GetAttr returns the attr for the given key .
5643	RemoveAttr removes the attribute associated with the given key .
5644	Attrs returns the attributes of the Attrs .
5645	Debugm log message
5646	Infom implements the Attr interface .
5647	Warningm logs a warning message .
5648	Errm returns an error with the given message .
5649	Errorm implements the Attr interface .
5650	Fatalm logs a message at the specified level .
5651	Dief is a convenience function for Dief .
5652	Diem generates a diem with the given arguments .
5653	ToLogLevel converts a string to a LogLevel .
5654	CallErr is a convenience function for CallErr .
5655	New creates a new StackdriverHook .
5656	Fire implements Logrus .
5657	Level sets the level of the stack
5658	ProjectID sets the project ID
5659	EntriesService adds an entry to the stack .
5660	LoggingService sets the logging service
5661	ErrorService sets the error service .
5662	HTTPClient returns an option that sets the HTTP client .
5663	MonitoredResource sets the specified resource .
5664	Error reporting error
5665	Labels sets labels on the stack
5666	PartialSuccess specifies whether or not the stackdriver has been completed .
5667	GoogleComputeCredentials returns an option that can be used to issue a Google Clouddriver .
5668	NewEncoder returns a new Encoder .
5669	NewDecoder returns a new Decoder .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register registers a codec with the given codec .
5673	Unregister removes a file from the registry .
5674	Lookup returns the codec for the given type .
5675	Codecs returns a map of codecs
5676	Type returns the string representation of the error .
5677	Install adds an adapter to the adapter .
5678	AdapterOf returns the adapter for the given type .
5679	AppendDuration appends a duration to a byte slice .
5680	formatInt returns the number of bytes in buf .
5681	NewDecoder returns a new decoder .
5682	NewStreamDecoder returns a new StreamDecoder .
5683	Unmarshal implements the unmarshaler interface .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the value of the given type .
5686	NewValueParser creates a new ValueParser .
5687	ParseTag parses a tag .
5688	NewEncoder returns a new Encoder .
5689	NewStreamEncoder returns a new StreamEncoder .
5690	NewPrettyEncoder returns a new Encoder .
5691	NewPrettyStreamEncoder returns a new StreamEncoder .
5692	Marshal marshals v to v .
5693	NewEncoder creates a new Encoder .
5694	EncodeArray implements encoder . EncodeArray .
5695	EncodeMap encodes a map .
5696	NewStreamEncoder creates a new StreamEncoder .
5697	Open opens the stream .
5698	Close closes the stream .
5699	Encode encodes v to the stream .
5700	newStructType creates a new struct type .
5701	lookup returns the cached struct for the given type .
5702	clear clears the cache .
5703	CheckUint64Bounds verifies the value of a uint64 .
5704	CheckInt64Bounds checks if a value is in the range .
5705	NewDecoder returns a new Decoder .
5706	Decode deserializes a value into a struct .
5707	DecodeArray decodes a JSON array .
5708	DecodeMap decodes a map into a map .
5709	NewStreamDecoder creates a new StreamDecoder .
5710	Len returns the length of the stream .
5711	Err implements StreamDecoder .
5712	Decode decodes a StreamDecoder .
5713	Encoder creates a StreamEncoder .
5714	init initializes flags .
5715	LevelFromString returns the level of the given string .
5716	NewBackend returns a new Backend .
5717	callsite returns a string representation of the given flag .
5718	print prints a log entry .
5719	Logger creates a new Logger .
5720	Trace implements Logger interface .
5721	Tracef implements Logger interface .
5722	Debug logs a debug message .
5723	Debugf implements Logger interface .
5724	Info logs a message .
5725	Infof implements Logger interface .
5726	Warn logs an error .
5727	Warnf logs a warning message .
5728	Error logs an error .
5729	Errorf implements Logger .
5730	Critical logs a critical message .
5731	Criticalf implements Logger interface .
5732	Level returns the log level .
5733	SetLevel sets the level of the logger .
5734	Concat concatenates a new Permission .
5735	HasPermission returns true if the permission is a permission
5736	ConcatPermissioner adds a Permissioner to the list of permissions .
5737	HasPermission returns true if the permission has permission permissions
5738	Register registers a new role with the given name .
5739	NewPermission returns a new Permission
5740	Get returns the checker for the given name .
5741	isPtrFromHeap returns true if the given address is a ptr .
5742	IsPtr returns true if the given address is a pointer .
5743	FindObject returns the object at the given address .
5744	ForEachObject iterates over all elements in the process .
5745	ForEachRoot iterates over all functions in the process .
5746	Addr returns the address of the given object .
5747	Size returns the size of x .
5748	Type returns the type of an object .
5749	ForEachRootPtr iterates over all nodes in the process .
5750	edge1 returns true if the given node is a node .
5751	setHeapPtr sets the address of the process .
5752	findHeapInfo returns the heap info for the given address .
5753	allocHeapInfo allocates the heap info for a heap .
5754	runtimeName returns the name of the type .
5755	readRuntimeConstants reads the runtime constants from the process .
5756	add adds a function to the list .
5757	sort sorts the list of entries .
5758	find returns the function for the given PCB .
5759	read reads the data from the PCTab .
5760	readVarint reads the value of a varint .
5761	useLine returns the command line for the command
5762	commandPath returns the path for the command .
5763	readCore reads and returns a core . Process .
5764	typeName returns the name of the process .
5765	fieldName returns the field name for the given type .
5766	typeFieldName returns the name of the type .
5767	FindFunc finds the function in the process .
5768	Core creates a new process .
5769	Address returns the address of the region .
5770	Int returns the int64 value .
5771	Uintptr returns the uintptr value .
5772	Cast returns a copy of the given type .
5773	Deref implements region .
5774	Uint64 returns the uint64 value .
5775	Uint32 returns the uint32 value .
5776	Int32 returns the int32 value .
5777	Uint16 returns the uint16 value .
5778	Uint8 returns the uint8 value .
5779	String returns the string representation of the region .
5780	SlicePtr returns a copy of the given region .
5781	SliceLen returns the length of the region .
5782	Field returns the region for the given field .
5783	ReadUint8 reads an address from the given address .
5784	ReadUint16 reads a single uint16 from the given address .
5785	ReadUint32 reads a single uint32 from the given address .
5786	ReadUint64 reads a single uint64 from the given address .
5787	ReadInt8 reads an int8 from the given address .
5788	ReadInt16 reads an int16 from the given address .
5789	ReadInt32 reads an int32 from the given address .
5790	ReadInt64 reads an int64 from the given address .
5791	ReadUintptr reads a uint32 from the process .
5792	ReadPtr returns the address of the given address .
5793	ReadCString reads a CString from the given address .
5794	Source returns the name of the mapping .
5795	findMapping returns the mapping for the given address .
5796	Max returns the maximum of b .
5797	Min returns the minimum of b .
5798	Align implements the Address interface .
5799	initialize is called when a node is created .
5800	calculate calculates the vertices of the vertices .
5801	eval returns the value of v .
5802	compress compresses the given VName into the ltdom .
5803	link adds an element to the tree .
5804	Reverse reverses the dominators .
5805	calcSize computes the size of the dom .
5806	objField returns a string representation of the field .
5807	Readable returns true if the given address matches the given address .
5808	ReadableN returns true if the given address is in the process .
5809	splitMappingsAt splits the address at the given address .
5810	DynamicType returns the type of the given type .
5811	Create creates a new image .
5812	Resolve resolves an IP address .
5813	Equal returns true if two tokens are equal .
5814	newDefaultClassifier returns a new TokenClassifier .
5815	Next returns the next token .
5816	NewTokenizer creates a new Tokenizer
5817	Split splits a string into a slice of strings .
5818	Between returns the difference between two strings .
5819	BetweenF returns the difference between two strings .
5820	Camelize converts a string to camelize string
5821	Capitalize returns a string representation of s .
5822	CharAt returns the character at index .
5823	CharAtF returns a string with the given index .
5824	ChompLeft returns the prefix of the given prefix .
5825	ChompLeftF returns a function that returns a string that can be used by the given prefix .
5826	ChompRight returns the suffix of the given suffix .
5827	ChompRightF is a wrapper around ChompRightF .
5828	ClassifyF returns the string representation of a string .
5829	Clean removes all spaces .
5830	Dumpherize returns a string representation of a string .
5831	EscapeHTML returns a string representation of the given string .
5832	DecodeHTMLEntities decodes HTML string
5833	EnsurePrefixF adds a prefix to the given prefix .
5834	EnsureSuffixF adds a suffix to the given suffix .
5835	Humanize returns a human readable human readable string
5836	Iif returns true if the condition is a condition .
5837	IndexOf returns the index of the given string .
5838	IsLower returns true if s is lower case insensitive .
5839	IsUpper returns true if the string is a uppercase .
5840	Left returns the right part of s .
5841	LeftF returns a function that returns the left of the left corner .
5842	Reverse returns a slice of strings
5843	Line returns a slice of strings
5844	Map returns a slice of strings
5845	Match returns true if the given pattern matches .
5846	task runs the build command .
5847	Pad returns the length of the given string .
5848	PadF is a wrapper around PadFunc .
5849	PadLeft returns the length of the given string .
5850	PadLeftF is a wrapper around PadLeftFunc .
5851	PadRightF is a wrapper around PadRightFunc .
5852	Pipe returns a copy of the pipe .
5853	QuoteItems returns a slice of strings
5854	ReplaceF replaces the replacement with the given replacement .
5855	ReplacePatternF is a wrapper around ReplacePatternFunc
5856	Reverse reverses a string .
5857	RightF returns a function that can be used by the given number .
5858	Slice returns the string representation of s .
5859	SliceF returns a copy of the given string .
5860	SliceContains checks if a slice contains a slice of strings
5861	SliceIndexOf returns the index of the given slice .
5862	Slugify returns a slugify string .
5863	StripPunctuation removes punctuation punctuation
5864	StripTags removes tags from the string
5865	Substr is part of the string .
5866	SubstrF returns a copy of the given index .
5867	TemplateWithDelimers returns a template with the given values .
5868	ToArgv converts a string into a slice of strings
5869	ToBool converts a string to a bool .
5870	ToBoolOr converts a string to bool
5871	ToIntOr converts string to int
5872	ToFloat32Or convert string to float32
5873	ToFloat64Or converts string to float64
5874	UnescapeHTML returns the string representation of the given string .
5875	WrapHTML returns a string representation of a HTML element
5876	WrapHTMLF is a wrapper around WrapHTMLFunc
5877	ReapChildren removes all children of the given pids .
5878	SdNotify sends a notification to the system .
5879	NewAuthenticator creates a new Authenticator .
5880	Endpoint returns an http . Handler for the given prefix .
5881	Unique returns a list of unique identifiers .
5882	Contains returns true if the given id exists .
5883	Includes returns true if all the items in the given subset .
5884	Require is defined on the Model interface .
5885	Enqueue adds a job to the store
5886	A new Authorizer
5887	Run runs an enforcer .
5888	And returns an Authorizer that matches the provided filters .
5889	Or creates an Authorizer with the given context .
5890	Enqueue implements the queue .
5891	Callbacks sends a callback to the queue .
5892	NewWatcher creates a new watcher .
5893	Add adds a new stream to the watch .
5894	Action returns a new Action .
5895	Write returns true if the operation is set
5896	String returns the string representation of the operation .
5897	Query returns the current context .
5898	Respond to the context
5899	EnsureApplication creates a new application .
5900	EnsureFirstUser adds a user to the store
5901	Callback returns a Callback .
5902	OpenStream opens a stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds tokens to the indexer .
5905	GetTokenData returns the token data .
5906	SetTokenData sets the token data .
5907	ValidSecret returns true if the given secret is valid .
5908	HashSecret hashes the application s secret .
5909	ValidPassword returns true if the user is valid .
5910	HashPassword sets the password for the user .
5911	MustCreateStore creates a new store
5912	CreateStore creates a new store
5913	Calls Collection .
5914	NewAssetServer returns a new http . Handler .
5915	DefaultGrantStrategy returns the default grant strategy .
5916	DefaultTokenData returns the default token data
5917	GenerateToken generates a token for the given resource .
5918	ParseToken parses a string and returns a TokenClaims .
5919	Emit returns a new Enforcer with the given matcher .
5920	MustGet returns the value for the given name .
5921	MustSet sets the field s value .
5922	NewGroup creates a new Group
5923	Add adds a controller to the group
5924	Endpoint returns an http . Handler for the given prefix .
5925	Add adds a field to the index .
5926	AddRaw adds an index to the indexer .
5927	Ensure ensures that the store exists .
5928	NewCatalog creates a new Catalog .
5929	Add adds a model to the catalog .
5930	All returns all the models .
5931	Visualize returns a string representation of the catalog .
5932	NewErrorReporter returns a new error .
5933	EnsureIndexes ensures that the store is valid .
5934	Emit returns an error with the given format .
5935	Compose returns a new http . Handler .
5936	Includes returns true if all of the given subset of the given set .
5937	Intersect returns the difference between two lists .
5938	Equal returns a new Error instance .
5939	RootTracer returns a new http . Handler for the request .
5940	NewTracerFromRequest creates a new Tracer from a request
5941	NewTracer returns a new Tracer .
5942	Push adds a span to the span .
5943	Last returns the last trace .
5944	Tag adds a key to the Tracer .
5945	Log implements the Tracer interface .
5946	Context returns the context s context .
5947	Pop removes all spans .
5948	Finish implements the Tracer interface .
5949	NewPool creates a new pool
5950	Add adds a task to the pool
5951	Run starts the pool .
5952	NewBodyLimiter returns a new BodyLimiter .
5953	LimitBody sets the body of the request .
5954	Called with the given handler .
5955	Only returns a Matcher that matches the provided operations .
5956	BasicAuthorizer creates a new BasicAuthorizer with the given credentials .
5957	ModelValidator creates a new validator .
5958	TimestampValidator creates a new TimestampValidator .
5959	RelationValidator returns a Callbackator that validates the given models .
5960	Inspect implements the Seek interface .
5961	NewRule creates a new Rule
5962	AddUnmatch adds unmatch to the rule
5963	Run runs the given rule .
5964	NewSecret returns a new Secret object
5965	NewObject returns a new Object object
5966	SetMetadata sets the metadata for the object .
5967	GetMetadata returns the metadata for the given key .
5968	GetMetadataAll returns the metadata for the object
5969	SetRule sets the rule for the given rule .
5970	SetObject sets the object of an object
5971	SetNline sets the Nline field s value .
5972	SetContent sets the content of the exception .
5973	Run returns true if the given secret matches the given secret .
5974	AddRule adds a rule to the list .
5975	LoadRulesFromFile loads rules from a file
5976	LoadRulesFromDir loads rules from the given directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enable rule
5979	DisableRule disable rule
5980	EnableRuleByRegexp implements the SeekRule interface .
5981	Disable rule by regexp
5982	LoadObjects loads objects from source .
5983	Group objects by metadata
5984	GroupObjectsByPrimaryKeyHash returns the list of objects for the given primary key .
5985	AddException adds an exception to the seek list .
5986	LoadExceptionsFromFile loads an exception from a file
5987	printPlainResults prints the results of the results .
5988	printJsonResults prints the results of the results
5989	NewXor64Source returns a new Xor64Source instance
5990	xor64 returns the value of x .
5991	next returns the next value .
5992	Seed sets the seed to seed .
5993	NewFrameSet creates a FrameSet .
5994	handleMatch is used to handle a single frame
5995	Index returns the index of the frame .
5996	Frame returns the index of the frame .
5997	HasFrame returns true if the frame contains a frame .
5998	FrameRangePadded returns the length of the frame set .
5999	Normalize implements FrameSet .
6000	FramesToFrameRange converts frames to a slice of frames .
6001	frameRangeMatches returns a slice of ranges matching the frame .
6002	toRange converts a range to a slice of ints .
6003	NewWorkManager creates a new work manager
6004	processSources processes all files in the given directory .
6005	isInputDone returns true if the input is in input .
6006	closeInputs closes the work manager .
6007	load loads the given paths from the given paths .
6008	loadRecursive attempts to load all files in the directory .
6009	preparePaths prepares a list of directories for the given paths .
6010	PadFrameRange returns the space range of frange .
6011	zfillString returns a string representation of a string .
6012	zfillInt returns a string representation of z .
6013	NewInclusiveRange creates a new InclusiveRange .
6014	String returns a string representation of the range .
6015	End returns the end of the range .
6016	Len returns the length of the range .
6017	Min returns the minimum value in the range .
6018	Max returns the maximum value of the range .
6019	Contains returns true if the range is in the range .
6020	findInRange returns the closest in range in range .
6021	Index returns the index of the range .
6022	String returns a string representation of the range .
6023	Len returns the number of blocks in the range .
6024	Start returns the number of blocks .
6025	End returns the end of the range .
6026	Min returns the minimum value in the range .
6027	Max returns the maximum value in the range .
6028	numRanges returns the number of blocks in the range .
6029	rangeAt returns the range at the given index .
6030	Append adds the given range to the list .
6031	AppendUnique appends the given range to the given range .
6032	Contains returns true if the given value contains the given value .
6033	Index returns the index of the given value .
6034	FrameRange returns the current frame range .
6035	FrameRangePadded returns the string representation of a FrameSequence .
6036	Index returns the index of the file .
6037	SetDirname sets the directory name
6038	SetPadding sets the padding of the file .
6039	SetPaddingStyle sets the padding style .
6040	SetExt sets the extension .
6041	SetFrameRange sets the frame range
6042	Len returns the number of frames .
6043	String returns a string representation of the FileSequence .
6044	Copy returns a copy of the fileSequence .
6045	NewClient creates a new Client .
6046	UnmarshalXML unmarshals a Header into a Header .
6047	UnmarshalXML unmarshals XML body .
6048	Call sends an HTTP request to the client .
6049	JSONDoc returns a JSON representation of a JSON document .
6050	AddLoader adds a new loader to the loader .
6051	JSONSpec returns a Document from the given path .
6052	Embedded creates a Document from a JSON document .
6053	Spec returns the document for the given path .
6054	Analyzed creates a Document from a JSON document .
6055	Expanded returns a new document .
6056	ResetDefinitions resets the definition of the document .
6057	Pristine returns the current page .
6058	OpenDb opens a GeoIP file .
6059	GetOrg returns the name of the given IP .
6060	GetRegion returns the region for the given IP address .
6061	GetRegionName returns the region name .
6062	GetCountry returns the country of the given IP
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close closes the RotatingFileHandler .
6065	String returns the string representation of the level .
6066	New creates a new Logger .
6067	Close closes the logger .
6068	SetLevelByName sets the level of the logger
6069	Output implements Logger interface .
6070	OutputJson implements Logger .
6071	Print prints the log .
6072	Println logs a message at level .
6073	Debug logs a message
6074	Debugln logs a message
6075	Error implements Logger .
6076	Errorln logs an error
6077	Info log message
6078	Infln implements Logger .
6079	Warn logs an error .
6080	Warnln logs an error .
6081	NewStreamHandler creates a new StreamHandler .
6082	Right returns the right part of the string .
6083	New creates a new api .
6084	setupMetadata returns a map of ResourceMetadata .
6085	recordTypes recursively recursively recursively recursively .
6086	appendSorted appends a new action to the list .
6087	parseDataType parses a single data type .
6088	parseParam parses the given path and returns it .
6089	newParam creates a new ActionParam
6090	toGoTypeTypeName converts a Go type to Go type .
6091	toGoTypeName converts a Go type to Go type .
6092	prify returns a string representation of o .
6093	isBuiltInType returns true if the given name is builtin .
6094	MatchHref returns true if the given href matches the given href .
6095	Substitute returns a copy of the patternPattern .
6096	MarshalJSON method of FileUpload
6097	Write multipart params
6098	Perform a request
6099	PerformRequestWithContext implements the http . Request interface .
6100	LoadResponse loads the response body from the API .
6101	ScheduleLocator returns a new ScheduleLocator .
6102	TemplateLocator returns a TemplateLocator .
6103	fetchDetails fetches the details of the environment .
6104	buildAliases builds the aliases for the given SSH config .
6105	serverArray returns a list of all the available servers .
6106	server returns the server for the given name .
6107	toPackageName returns the version of a package .
6108	loadFile loads a file from a file .
6109	main command line
6110	runCommand runs the command .
6111	CreateJSONResponse creates a http response
6112	AccountLocator returns a new AccountLocator instance
6113	AccountGroupLocator returns a new AccountGroupLocator instance
6114	AlertLocator returns a AlertLocator .
6115	AlertSpecLocator returns a AlertLocator .
6116	AuditEntryLocator returns a AuditEntryLocator .
6117	BackupLocator returns a backupLocator .
6118	ChildAccountLocator returns a new ChildAccountLocator instance
6119	CloudLocator returns a CloudLocator .
6120	CloudAccountLocator returns a CloudAccountLocator instance
6121	CookbookLocator returns a new CookbookLocator
6122	CookbookAttachmentLocator returns a new CookbookAttachmentLocator .
6123	CredentialLocator returns a CredentialLocator instance
6124	DatacenterLocator returns a DatacenterLocator instance
6125	DeploymentLocator returns a DeploymentLocator .
6126	HealthCheckLocator returns a HealthCheckLocator .
6127	IdentityProviderLocator returns a IdentityProviderLocator .
6128	ImageLocator returns a new ImageLocator .
6129	InputLocator returns a new InputLocator .
6130	InstanceLocator returns a instance of InstanceLocator
6131	InstanceTypeLocator returns a instance of InstanceTypeLocator
6132	IpAddressLocator returns a new IpAddressLocator instance
6133	IpAddressBindingLocator returns a new IpAddressBindingLocator instance
6134	MonitorMetricLocator returns a new MonitoringMetricLocator instance
6135	MultiCloudImageLocator returns a MultiCloudLocator instance
6136	MultiCloudImageMatcher returns a new MultiCloudMatcherLocator .
6137	MultiCloudImageSettingLocator returns a MultiCloudSettingLocator instance
6138	NetworkLocator returns a NetworkLocator instance
6139	NetworkGatewayLocator returns a new NetworkGatewayLocator instance
6140	NetworkOptionGroupLocator returns a NetworkOptionLocator instance
6141	NetworkOptionGroupAttachmentLocator returns a NetworkOptionAttachmentLocator .
6142	Oauth2Locator returns a new Oauth2Locator
6143	PermissionLocator returns a PermissionLocator
6144	PlacementGroupLocator returns a PlacementGroupLocator .
6145	PreferenceLocator returns a PreferenceLocator .
6146	PublicLocator returns a new PublicationLocator .
6147	PublisherLineageLocator returns a new PublicationLineLocator .
6148	RecurringVolumeAttachmentLocator returns a new RecurringVolumeAttachmentLocator .
6149	RepositoryLocator returns a RepositoryLocator .
6150	RepositoryAssetLocator returns a RepositoryAssetLocator .
6151	ResourceGroupLocator returns a ResourceGroupLocator .
6152	RightScriptLocator returns a RightLocator instance
6153	RightScriptAttachmentLocator returns a RightLinkLocator .
6154	RouteLocator returns a new RouteLocator .
6155	RouteTableLocator returns a new RouteTableLocator .
6156	RunnableBindingLocator returns a new RunnableBindingLocator instance
6157	SchedulerLocator returns a new SchedulerLocator
6158	SecurityGroupLocator returns a SecurityGroupLocator instance
6159	SecurityGroupRuleLocator returns a SecurityGroupLocator instance
6160	ServerLocator returns a new ServerLocator .
6161	ServerArrayLocator returns a new ServerArrayLocator .
6162	ServerTemplateLocator returns a ServerTemplateLocator .
6163	ServerTemplateMultiCloudImageLocator returns a ServerMultiCloudLocator instance
6164	SessionLocator returns a new SessionLocator .
6165	SshKeyLocator returns a SshKeyLocator .
6166	SubnetLocator returns a SubnetLocator .
6167	TagLocator returns a TagLocator .
6168	TaskLocator returns a TaskLocator instance
6169	UserLocator returns a UserLocator .
6170	UserDataLocator returns a UserDataLocator .
6171	VolumeLocator returns a VolumeLocator .
6172	VolumeAttachmentLocator returns a VolumeAttachment .
6173	VolumeSnapshotLocator returns a VolumeSnapshotLocator .
6174	VolumeTypeLocator returns a VolumeTypeLocator .
6175	RegisterCommands registers a new ActionCommands .
6176	ShowCommandHelp show command
6177	ShowAPIActions shows the command for the given command
6178	ShowHelp shows the help command
6179	ParseCommandAndFlags parses a command and returns a CommandTarget .
6180	validateFlagValue validates the flag value
6181	buildQuery builds an APIParams from a slice of values .
6182	buildPayload builds a new APIPParams .
6183	shortly shorten pattern
6184	cleanDescription removes the description of the description .
6185	fileExists checks if file exists
6186	AnalysisSnapshotLocator returns a new AnalysisSnapshotLocator instance
6187	BudgetAlertLocator returns a new BudgetAlertLocator instance
6188	CloudBillLocator returns a CloudFormator instance
6189	CloudBillMetricLocator returns a CloudFormationLocator instance
6190	CurrentUserLocator returns a new CurrentUserLocator .
6191	InstanceCombinationLocator returns a instance of InstanceCombinationLocator
6192	InstanceMetricLocator returns a instance of InstanceMetricLocator
6193	InstanceUsagePeriodLocator returns a instance of InstanceUsagePeriod .
6194	PatternLocator returns a PatternLocator .
6195	ReservedInstanceLocator returns a new ReservedInstanceLocator instance
6196	ReservedInstancePurchaseLocator returns a new ReservedInstanceLocator instance
6197	ScenarioLocator returns a ScenarioLocator .
6198	ScheduledReportLocator returns a ScheduledReportLocator
6199	TempInstancePriceLocator returns a new TempInstanceLocator instance
6200	UserSettingLocator returns a UserSettingLocator .
6201	readAllAsync reads all bytes from the io . ReadCloser .
6202	extractArg extracts a single argument from a list of arguments .
6203	write writes the output to the output .
6204	AppliedPolicyLocator returns a new AppliedPolicyLocator instance
6205	approvalLocator returns a new ApprovalLocator
6206	IntentLocator returns a new IncidentLocator .
6207	PolicyTemplateLocator returns a PolicyTemplateLocator .
6208	PublishedTemplateLocator returns a new PublishedTemplateLocator .
6209	DebugCookbookPathLocator returns a new DebugCookbookPathLocator instance
6210	DockerControlLocator returns a DockerControlLocator .
6211	EnvLocator returns an EnvLocator instance
6212	LoginControlLocator returns a new LoginControlLocator .
6213	ParseLocator returns a ProcLocator .
6214	Rl10Locator returns a Rl10Locator instance
6215	TSSLocator creates a new TSSLocator
6216	TSSControlLocator returns a TSSControlLocator .
6217	TSSPluginLocator returns a TSSPluginLocator instance
6218	NewAngularWriter returns a new AngularWriter .
6219	WriteResource writes the given resource to the writer .
6220	path returns the path of the action .
6221	mandatory returns true if the action is mandatory .
6222	New creates a new API instance
6223	FromCommandLine parses a command line from a command line .
6224	CanAuthenticate returns an error if the API is valid .
6225	Encrypt encrypts the given text using the given ciphertext .
6226	Decrypt decrypts the given text using the given ciphertext .
6227	guessType returns the type name for the given definition .
6228	addType adds a type to the api .
6229	extractCmdLineParams returns a slice of ActionParamParams for the given action .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes the header to the writer .
6232	WriteMetadata writes the metadata to the writer .
6233	location returns the location of the action .
6234	New creates a new API instance
6235	fromAPI returns a new api . API .
6236	BuildRequest builds an HTTP request for the given resource .
6237	setupMetadata returns the metadata for the metadata .
6238	NewDisplayer returns a Displayer .
6239	ApplySingleExtract applies the given extractor to the given string .
6240	ApplyExtract applies the given selector to the response .
6241	ApplyHeaderExtract applies the given header to the response .
6242	Output returns the string representation of the Displayer .
6243	NewAPIAnalyzer creates a new APIAnalyzer .
6244	Analyze creates a new apiserver .
6245	Analyze aliases
6246	LocatorFunc returns the name of the given attribute .
6247	ParseRoute parses a list of routes and returns a path pattern .
6248	isDeprecated returns true if the path is deprecated
6249	isQueryParam returns true if the argument is a query parameter .
6250	isPathParam returns true if the given path is a path .
6251	fetchAuditEntries fetches audit entries for an audit entry .
6252	formatTime formats a time
6253	printAudits prints audit entry
6254	extractUnique returns a copy of the given AuditEntry .
6255	getHref returns the href of the audit entry
6256	fail writes a formatted message to the given format .
6257	params returns the string representation of the Action .
6258	paramsInitializer returns a string representation of the params .
6259	commandLine returns the command line .
6260	toVerb converts a string to a string .
6261	escapeBackticks returns a string representation of the backticks .
6262	AccountPreferenceLocator returns a new AccountPreferenceLocator instance
6263	ApplicationLocator returns a new ApplicationLocator .
6264	EndUserLocator returns a new EndUserLocator instance
6265	NotificationRuleLocator returns a NotificationRuleLocator instance
6266	UserPreferenceLocator returns a UserPrefator .
6267	UserPreferenceInfoLocator returns a UserPreferenceInfoLocator instance
6268	LoadConfig loads the configuration from the given path .
6269	CreateConfig creates a new config file
6270	fromAPI creates a new api API .
6271	HostFromLogin returns the hostname of the given host .
6272	AnalyzeParam analyzes the target parameter .
6273	AnalyzeAttribute analyzes an attribute from a query string .
6274	AnalyzeType analyzes the type of type .
6275	CreateType creates an object for the given query .
6276	Ref returns the reference for the given reference .
6277	Type returns the type of the ref .
6278	Required returns the required fields .
6279	ID returns the ID of the ref .
6280	Service returns the service s service .
6281	Method returns the name of the endpoint .
6282	NewTypeRegistry returns a new instance of TypeRegistry
6283	GetNamedType returns the named type
6284	CreateNamedType creates a new named type .
6285	CreateInlineType creates an object with the given name .
6286	FinalizeTypeNames implements the TypeRegistry interface .
6287	Merge merges two resources .
6288	FinalizeTypeNames is the same as FinalizeTypeNames .
6289	uniqueTypeName returns the unique identifier for the given prefix .
6290	MandatoryParams returns a slice of ActionParams
6291	HasOptionalParams returns true if the action is optional .
6292	MakeUniq returns a unique string with the given base .
6293	NewClientWriter returns a new ClientWriter .
6294	WriteHeader writes the header to w .
6295	WriteResourceHeader writes a resource header to w .
6296	WriteType implements the io . Writer interface .
6297	WriteResource writes a resource
6298	WithTrail adds the trail to the evaluation .
6299	AnalyzeEndpoint analyzes the endpoint for an endpoint .
6300	NetworkInterfaceLocator returns a NetworkInterfaceLocator .
6301	NetworkInterfaceAttachmentLocator returns a NetworkInterfaceLocator .
6302	UnmarshalJSON implements the json . Unmarshaler interface .
6303	ExecutionLocator returns a new ExecutionLocator .
6304	NotificationLocator returns a NotificationLocator instance
6305	OperationLocator returns a new OperationLocator .
6306	ScheduledActionLocator returns a ScheduledActionLocator
6307	NewBasicAuthenticator creates a new Authenticator .
6308	NewSSAuthenticator returns a new Authenticator .
6309	newCookieSigner creates a new authenticator .
6310	Sign signs the request .
6311	CanAuthenticate checks if the given host is authenticated
6312	refresh refreshes the cookie .
6313	Sign adds the token to the request
6314	Sign signs the request .
6315	Sign authenticates a new session .
6316	SetHost sets the host
6317	CanAuthenticate is used to authenticate a user .
6318	extractRedirectURL extracts the URL from the response .
6319	buildURL builds a URL for the given path .
6320	GetAction returns the action with the given name .
6321	HasLink returns true if the resource exists
6322	findMatches returns a list of matched paths .
6323	NewPB creates a new HTTPClient
6324	newVariableDumpClient returns a new HTTPClient .
6325	newRawClient returns a new http . Client .
6326	DoHidden executes the given request .
6327	Do executes the given request .
6328	doImp executes the request and returns the response .
6329	getClientWithoutTimeout returns a http . Client with the given timeout .
6330	dumpRequest is used to dump an HTTP request
6331	writeHeaders writes headers to the client .
6332	copy hidden headers
6333	validateCommandLine validates command line
6334	APIClient returns a command for the given command line .
6335	RegisterClientCommands registers a client command
6336	Interactive sets the Logger .
6337	toPattern converts a path to a path pattern .
6338	WithClientIP adds a client to the context .
6339	ClientIP returns the IP address of the client .
6340	NewProducer creates a new producer
6341	StartProducer starts a producer
6342	Start starts the producer .
6343	Stop stops the producer .
6344	Publish is part of the Producer interface .
6345	PublishTo sends a message to the producer .
6346	NewLocalEngine returns a new LocalEngine
6347	validate validates the consumer config
6348	default defaults
6349	NewConsumer creates a new consumer
6350	StartConsumer starts a consumer .
6351	Start starts the consumer
6352	RateLimit returns a channel that can be used to receive messages .
6353	Write writes the response to w .
6354	ReadResponse reads the response from r .
6355	backoff attempts to back a random backoff .
6356	String returns the string representation of a FrameType .
6357	NewConsulEngine returns a new ConsulEngine
6358	ParseMessageID parses a string into a MessageID .
6359	WriteTo implements io . WriterTo interface .
6360	NewMessage creates a new Message .
6361	Finish implements the Message interface .
6362	Requeue implements the Message interface .
6363	ReadCommand reads a command from the given reader .
6364	funcMapMaker returns a map of FuncMap
6365	Funcs adds a function to the template map .
6366	Execute executes a template .
6367	RegisterPath registers a file with the given path .
6368	Asset returns the contents of the asset .
6369	Gob returns a list of files matching the given pattern .
6370	NameSpace creates a new AssetFileSystem .
6371	New creates a new Render
6372	RegisterViewPath registers the view path to the given path .
6373	SetAssetFS sets the AssetFS .
6374	Layout returns a Template .
6375	Funcs returns a new Template .
6376	Execute executes the given template .
6377	RegisterFuncMap registers a function with the given name .
6378	Asset returns the asset for the given name .
6379	NewPlainClient creates a new plaintext client
6380	Create creates a new io . Writer
6381	Open opens a new ReadCloser .
6382	Sign implements the http . Request interface .
6383	Sign is used to sign a request
6384	Readdir implements the FileReader interface .
6385	Find returns a list of nodes in the given path .
6386	Lex returns a channel for xpath .
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML parses an XML node from the given io . Reader .
6389	Call implements the Func interface .
6390	Parse parses an XPath expression .
6391	MustParse parses an XPath expression .
6392	Exec executes the XPath expression .
6393	ExecBool implements the XPath interface .
6394	ExecNum returns the number of nodes .
6395	ExecNode implements the XPath interface .
6396	MustExec is like Exec but panics .
6397	ParseExec parses a string and returns a result .
6398	CreateNode creates a new XML node
6399	GetChildren returns a list of children
6400	GetAttrs returns the attributes of the XMLE element .
6401	ResValue returns the string representation of the XML element .
6402	Parse parses an XML node .
6403	GetToken returns the token .
6404	ResValue returns the string representation of the node .
6405	Exec executes the given node .
6406	String returns a human - readable string representation of n .
6407	Num returns the number of digits .
6408	BuildNS returns a list of namespace names .
6409	GetAttribute returns the attribute of the node .
6410	GetAttributeVal returns the value of the given element .
6411	GetAttrValOrEmpty returns the value of an attribute if it is empty .
6412	FindNodeByPos finds a node by position .
6413	Marshal writes a node to w .
6414	MarshalStr returns a string representation of a node .
6415	NewLexer returns a new Lexer .
6416	NewLexerString returns a new lexer
6417	Split splits a string into a slice of strings .
6418	Register registers a new error .
6419	Get returns ErrDescriptor .
6420	GetAll returns a list of all registered errors .
6421	From returns an error from the given error .
6422	Descriptor returns ErrDescriptor .
6423	GetAttributes returns the attributes of the error .
6424	HTTPStatusCode returns the status code for the type .
6425	HTTPStatusCode returns the HTTP status code for the given error .
6426	HTTPStatusToType converts an HTTP status to an HTTP type .
6427	ToHTTP converts an error into an http . ResponseWriter .
6428	toImpl converts an error to an impl .
6429	MetadataFromIncomingContext returns metadata from incoming context
6430	MetadataFromOutgoingContext returns metadata about the given context .
6431	TokenFromMetadata returns token from metadata
6432	TokenFromIncomingContext returns a Token from a context
6433	OutgoingContextWithToken returns a context with the given token .
6434	KeyFromMetadata returns the key from metadata
6435	KeyFromIncomingContext returns the key from the context
6436	OutgoingContextWithKey returns a context with the given key .
6437	IDFromMetadata returns the ID of the metadata .
6438	IDFromIncomingContext returns a ID from a context
6439	OutgoingContextWithID returns a context with the given id .
6440	ServiceInfoFromMetadata extracts the metadata from metadata .
6441	ServiceInfoFromIncomingContext retrieves the service info from the context .
6442	OutgoingContextWithServiceInfo returns a context with the given service name .
6443	LimitFromMetadata returns the limit for the given metadata .
6444	OffsetFromMetadata returns the offset from metadata .
6445	LimitAndOffsetFromIncomingContext returns the limit for a given context
6446	OutgoingContextWithOffsetAndOffset returns a context with the given offset .
6447	before returns true if the given ScheduleItem is before the schedule .
6448	New returns a new Error instance
6449	WithNamespace adds a namespace to the logger
6450	Wrap creates a new namespace .
6451	WithField returns a logger with the given key .
6452	WithFields returns a logger with the given fields .
6453	Format returns the format of the given format .
6454	fix returns the value of v .
6455	GRPCCode returns codes for the type .
6456	GRPCCodeToType converts code codes to GRPC codes .
6457	GRPCCode returns the grpc code for the given error .
6458	FromGRPC converts a grpc error into an error .
6459	ToGRPC converts an error into a grpc error .
6460	IsEnabled returns true if the namespace is enabled
6461	Set sets the namespaces .
6462	Cause returns the cause of the error .
6463	parseCode parses a string into a code .
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor .
6465	StreamServerInterceptor is a wrapper around StreamServerInterceptor .
6466	UnaryClientInterceptor returns an UnaryClientInterceptor that invokes the given function .
6467	StreamClientInterceptor returns a StreamClientInterceptor .
6468	Interceptor returns a StreamClientInterceptor .
6469	Wrap wraps the given logger .
6470	NewCounter creates a new counter .
6471	NewRedisCounter returns a new instance of RedisCounter
6472	NewLimiter creates a new limiter .
6473	WithInsecure returns a new TokenCredentials instance
6474	WithTokenFunc returns a TokenCredentials with the given token .
6475	GetRequestMetadata returns the token metadata for the request .
6476	FieldsFromIncomingContext returns the fields of the given context .
6477	String returns the string representation of the type .
6478	UnmarshalText unmarshals text into a type
6479	fromString converts a string into a type .
6480	Start starts a goroutine .
6481	NewSimple returns a new SimpleQueue
6482	Wrap wraps the given logger .
6483	WithFilters adds filters to the filter .
6484	WithField returns a logger with the given key .
6485	WithFields adds the fields to the filter .
6486	FilterSensitive returns a FilterFunc that filters the given string .
6487	SliceFilter is a wrapper around FilterFunc .
6488	MapFilter creates a new filter with the given key .
6489	RestFilter adds a filter to the filter
6490	LowerCaseFilter returns a filter that matches the given filter .
6491	newBatchPoints returns a new BatchPoints .
6492	NewSinglePointWriter creates a new SinglePointWriter .
6493	Write implements the WritePointWriter interface .
6494	WithScalingInterval sets the scaling interval
6495	NewBatchingWriter returns a new BatchingWriter .
6496	Write writes a batch to the batch .
6497	MustParseLevel is like ParseLevel but panics .
6498	New creates a new Stream
6499	SetLogger sets the logger
6500	CloseRecv closes the stream .
6501	Stats returns the statistics of the stream .
6502	Run starts the stream .
6503	ServerOptions returns a grpc server option .
6504	ClientOptions returns a grpc . DialOption that can be used to authenticate the client .
6505	UnaryServerInterceptor returns a grpc . UnaryServerInterceptor .
6506	StreamServerInterceptor is a wrapper around StreamServerInterceptor
6507	UnaryClientInterceptor creates a new grpc client .
6508	StreamClientInterceptor returns a StreamClientInterceptor .
6509	defaults defaults to Config .
6510	Flush flushes the batch .
6511	New creates a new Handler
6512	HandleLog implements the Handler interface .
6513	New returns a random random random seed .
6514	Names returns the names of this URI template .
6515	String returns a string representation of the PerfDatum .
6516	RenderPerfdata returns a string representation of perfdata
6517	Exit logs an error message
6518	NewCheckWithOptions returns a new CheckWithOptions instance
6519	AddResult adds a result to the check .
6520	AddResultf adds a result to the check .
6521	String returns a string representation of the check .
6522	Exitf is part of the Check interface .
6523	Criticalf logs a critical message .
6524	Unknownf logs an ERROR message .
6525	NewDefaultStatusPolicy returns a default StatusPolicy
6526	NewStatusPolicy creates a new status policy
6527	ParseRange parses a range string .
6528	Check checks if the range is valid .
6529	CheckInt checks if a value is in the range
6530	CheckUint64 checks if the value is valid .
6531	NewClient creates a new client
6532	GetKeyMeta returns a KeyMeta for the given path .
6533	GetKeysInDirMeta returns all keys in the given path .
6534	GetKeyContent returns the content of a key .
6535	GetJobSummariesForProjects returns the job summary of a project .
6536	GetJobsForProject returns all jobs for a project
6537	GetJob returns a JobDetail
6538	CreateJob creates a new JobSummary
6539	CreateOrUpdateJob creates a job summary .
6540	DeleteJob deletes a job
6541	JobSummary returns the job summary
6542	GetSystemInfo returns the system info for the system .
6543	DateTime returns the timestamp of the system .
6544	GetAllProjects returns all projects
6545	GetProject returns a project
6546	CreateProject creates a project
6547	DeleteProject deletes a project
6548	SetProjectConfig sets the project config
6549	NewClient creates a new client
6550	NewClientbyToken returns a new Client instance
6551	SetDepth sets the depth of the client .
6552	ListDatacenters returns a list of Datacenters
6553	CreateDatacenter creates a Datacenter
6554	GetDatacenter returns a Datacenter
6555	UpdateDataCenter updates a datacenter .
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned waits for the given path to be completed .
6558	ListFirewallRules lists all firewall rules
6559	GetFirewallRule retrieves a firewall rule
6560	CreateFirewallRule creates a new firewall rule
6561	UpdateFirewallRule updates the firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	List load balancers
6564	GetLoadbalancer returns the loadbalancer
6565	Update load balancer properties
6566	DeleteLoadbalancer deletes load balancer
6567	ListBalancedNics returns a list of Nics .
6568	AssociateNic associates a new NIC .
6569	GetBalancedNic returns the nic for the given balancer .
6570	Delete balancer NIC
6571	ListLans returns a list of all LANs .
6572	GetLan retrieves a LAN from the cluster
6573	DeleteLan deletes the specified lan .
6574	ListNics returns a list of Nics .
6575	CreateNic creates a Nic object
6576	GetNic returns a Nic object
6577	UpdateNic updates the nic .
6578	DeleteNic deletes a nic .
6579	ListSnapshots returns a list of snapshots .
6580	GetSnapshot returns a snapshot of a snapshot
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates a snapshot
6583	ListIPBlocks returns a list of IP blocks .
6584	ReserveIPBlock reserves an IP block .
6585	GetIPBlock retrieves the IP block by ID .
6586	UpdateIPBlock updates an IP block .
6587	ReleaseIPBlock releases an IP block
6588	ListVolumes returns a list of volumes .
6589	GetVolume returns a volume .
6590	UpdateVolume updates a volume .
6591	CreateVolume creates a new volume .
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a new snapshot
6594	RestoreSnapshot restores the specified volume .
6595	ListServers returns a list of servers .
6596	GetServer returns a server .
6597	DeleteServer deletes a server
6598	ListAttachedCroms returns a list of images associated with the given dcid .
6599	AttachCdrom creates a new image .
6600	GetAttachedCrom returns the image associated with the cid .
6601	DetachCdrom removes a cdromromrom from the server .
6602	List attached volumes
6603	AttachVolume attaches a volume .
6604	GetAttachedVolume returns a volume for a given volume .
6605	DetachVolume detaches a volume .
6606	StartServer starts a server .
6607	ListLocations lists all Locations .
6608	GetRegionalLocations returns the locations of the given regid .
6609	GetLocation returns the location for the given location .
6610	GetContractResources retrieves a contract resource .
6611	List images
6612	GetImage retrieves an image by ID
6613	PrintHeaders prints the response headers
6614	ListGroups lists all groups
6615	GetGroup retrieves a group by ID
6616	CreateGroup creates a Group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	ListShares lists all shares
6620	GetShare returns a share with the given resource id .
6621	AddShare creates a share share .
6622	UpdateShare updates a share
6623	DeleteShare deletes a share
6624	List group users
6625	AddUserToGroup adds a user to a user
6626	DeleteUserFromGroup deletes user from a group
6627	ListUsers lists all users
6628	GetUser returns the user s user .
6629	CreateUser creates a new user
6630	UpdateUser updates a user
6631	DeleteUser deletes a user
6632	ListResources lists all resources
6633	GetResourceByType retrieves a resource by its type
6634	ListResourcesByType returns a list of resources for the given type .
6635	ListRequests lists all requests
6636	GetRequest returns a Request with the given id .
6637	GetRequestStatus returns the status of the given path .
6638	Close closes the writer .
6639	GetSerializableArgument returns the serialized value for serialized object
6640	BoolVar defines a boolean flag .
6641	Bool creates a bool flag .
6642	IntVar adds a variable to the environment variable .
6643	Int creates an int flag .
6644	Int64Var adds an int64 to the environment variable .
6645	Int64 returns a new int64 value .
6646	UintVar adds a uint variable to the environment variable .
6647	Uint creates a new uint flag .
6648	Uint64Var adds a uint64 to the environment variable .
6649	Uint64 creates a new uint64 .
6650	StringVar sets the value of the environment variable .
6651	String returns a string representation of the environment variable .
6652	Float64Var adds a float64 variable to the environment variable .
6653	Float64 creates a float64 value
6654	DurationVar adds a variable variable to the environment variable .
6655	Duration creates a new environment variable .
6656	Parse parses the environment variables .
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString reads a file from a file .
6659	LineReader returns a channel from the given io . Reader .
6660	LineReaderFrom returns a channel from the given path .
6661	FileExists checks if file exists
6662	FileExistsInPath returns true if file exists
6663	GetPathParts returns the path of the given path .
6664	GetAbsPathParts returns the path part of the path .
6665	RandomString returns a random string
6666	ParseAddress parses the given address string and returns it .
6667	HomeDir returns the home directory
6668	IsTCPPortAvailable returns true if port is a TCP port .
6669	RandomTCPPort returns the number of random TCP connections .
6670	HashString returns the hash of a key .
6671	Context returns the context s context .
6672	Token returns the token for the session .
6673	NewDaemon creates a new Daemon
6674	Close closes the daemon
6675	NewAccessTokenContext creates a new access token context
6676	AccessTokenFromContext returns access token from context
6677	RandomAccessToken generate random access token
6678	Init initializes the logger .
6679	Load loads the data from the given path .
6680	Start a session
6681	Get retrieves a session from the storage .
6682	List lists all sessions in the database .
6683	Exists checks if the given access token exists .
6684	Aband abandon the session
6685	SetValue sets the value for the given key .
6686	Delete deletes a session .
6687	Setup creates a new table .
6688	TearDown deletes the schema .
6689	initJaeger initializes a new logger .
6690	Usage prints a human - readable description .
6691	Build creates a new DoubleArray .
6692	Read implements io . Reader
6693	Get returns the node in the cluster .
6694	ExternalNodes returns the list of nodes in the cluster .
6695	GetOther returns the node with the given access token .
6696	GoString returns a string representation of Cluster
6697	Scan reads data from src .
6698	Value returns the value of the Bag .
6699	Has returns true if the given key exists .
6700	WriteTo implements io . WriterTo interface .
6701	ReadIndexTable reads an index table from r .
6702	New creates a new ActionBar
6703	RegisterAction registers a new action .
6704	Actions add action to ActionBar
6705	Render renders the action barbar .
6706	FuncMap returns a function that renders the edit button
6707	EditMode returns the edit mode of the action
6708	SwitchMode changes the current action .
6709	InlineEdit renders an inline edit page
6710	Error implements the Error interface for Error .
6711	ParseFile parses a file from a file .
6712	FindMachine finds a machine by name
6713	New creates a new Kace .
6714	CamelCase returns the camelcase of the given string .
6715	Pascal converts a string to camelcase .
6716	Snake returns the snake casing of the given string .
6717	SnakeUpperUpper converts a string to snake case insensitive .
6718	Kebab returns the key for the given string .
6719	KebabUpper converts a string to a string .
6720	isPathSafe checks if the given string is safe .
6721	Start the request
6722	ParseAuthHeaders parses the request header and returns a AuthCreds .
6723	Tracer adds a new tracer to the client .
6724	HTTPClient adds a client to the client .
6725	BasicAuth sets basic authentication .
6726	BearerAuth sets the access token
6727	CookieJar sets cookie jar
6728	SanitizerEnabled returns an error if the client is not valid .
6729	OpenFile opens a new ReadSeeker .
6730	RoundTrip is a wrapper around RoundTripper
6731	SetAuthHeader sets the auth header
6732	FileName returns the name of the file .
6733	newBuffersFromFiles returns a slice of buffer buffers .
6734	newFileBuffer returns a new FileBuffer .
6735	rewind reads the contents of the file .
6736	ConvertResponse converts a response into a Response .
6737	Set sets the value of the BoolOption .
6738	WriteAnswer writes a boolean value .
6739	String returns a string representation of a BoolOption .
6740	TriggerIncidentKey returns the incident key for the given key .
6741	TriggerWithDetails is a convenience function for TriggerWithDetails
6742	TriggerIncidentKeyWithDetails returns the incident key with the given details .
6743	Merge merges src into dst .
6744	setSource sets the source for the given source .
6745	convertString converts src into dst .
6746	Do executes the given function .
6747	NewFile returns a new io . Writer
6748	internalRun starts a goroutine .
6749	String returns a readable string representation of the Row .
6750	Tabulate returns a row of rows .
6751	AmazonRequest returns an error if there is an HTTP request .
6752	WriteTabularData writes a tabular data to w .
6753	Reduce reduces the number of buckets .
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore
6756	Resize resizes the given size .
6757	AddOutput adds a new output to the benchmark .
6758	RunBenchmarks implements Benchmarks .
6759	parseBool parses a byte array and returns a bool indicating whether it is a bool .
6760	checkInteger checks if the given byte is a valid integer .
6761	parseInt64 parses an int64 .
6762	parseInt32 parses an int32 .
6763	parseBigInt parses a big integer .
6764	parseBitString parses a bit string .
6765	parseObjectIdentifier parses an object as a string .
6766	parseBase128Int parses a 64 - bit integer .
6767	parseGeneralizedTime parses a time . Time .
6768	parsePrintableString parses a string as a string .
6769	isPrintable returns true if b is a printable .
6770	parseSequenceOf parses a sequence of sequences into a sequence of sequences .
6771	validLength returns true if the given offset is invalid .
6772	setDefaultValue sets default value
6773	UnmarshalWithParams unmarshals a value into a byte slice .
6774	parseFieldParameters parses the string representation of the field parameters .
6775	getUniversalType returns the tag number for the given type .
6776	DecodeString decodes a string into a byte slice .
6777	MailNotifier returns a list of MailNotifier .
6778	SaveMailNotifier saves a mail notification .
6779	RegisterProvider registers a provider with the given name .
6780	InitDb initializes MongoDb .
6781	Until waits until the given period is closed .
6782	logPanic logs an error .
6783	User returns a user by username
6784	Users returns a list of users
6785	SaveUser saves a user
6786	DeleteUser deletes a user
6787	LoadCACertFile loads a CA certificate from the given certificate
6788	NewAuth returns a new Auth instance
6789	ValidateRequest validates the request
6790	Process processes a request
6791	ValidateCN validates this Auth certificate
6792	Validate OU
6793	KeyLen returns the number of bytes in x .
6794	DefaultConfig returns the default config
6795	New creates a new CertSigner .
6796	New creates a new Vault instance
6797	DefaultServiceConfig returns a new ServiceConfig .
6798	NewService creates a new service .
6799	Delete deletes a cluster
6800	IsNoVaultHandlerDefined returns true if the given error is nil .
6801	New creates a new service .
6802	Create creates a new role
6803	CreateJob creates a new Job
6804	Run starts the worker
6805	newWatcher creates a new watcher .
6806	Start starts a watcher .
6807	Stop stops the watcher .
6808	Active returns true if the Watcher is active .
6809	Add adds a path to the watcher .
6810	watch is used to watch notifications .
6811	Watch returns a list of paths .
6812	State returns the current state of the watcher .
6813	Store stores an error in the request .
6814	Get retrieves an error from the request .
6815	Catch returns a middleware that wraps the given handler .
6816	Try creates a new http . Handler for the given handler .
6817	Recover returns a middleware middleware .
6818	main is the main loop of the event .
6819	SyncHandler creates a new http . HandlerFunc
6820	connect connects to the connection .
6821	send sends an update to the connection .
6822	NumConnections returns the number of connections .
6823	Push pushes the state to the queue .
6824	gopush populates the state of the current state .
6825	NewOutForward creates a new instance of OutForward
6826	Run starts the Tail file
6827	New creates a new Fluent instance .
6828	Close closes the connection .
6829	IsReconnecting returns true if the connection is reconnecting .
6830	connect connects to the fluent server .
6831	Notifier creates a GNotifier .
6832	NullNotification creates a GNotifier .
6833	New returns a new Identity
6834	Issue creates a new issuer .
6835	Subject sets the name of the given name .
6836	PrivateKey sets the private key
6837	NotBefore sets the value of the configuration .
6838	NotAfter sets the value for the given value .
6839	IssuingCertificateURL adds a certificate URL to the configuration .
6840	OCSPServer sets the OCSPS server
6841	New creates a new TelegramBotAPI .
6842	NewWithWebhook creates a new TelegramBotAPI .
6843	Close closes the Telegram BotBot API .
6844	GetMe returns the user s user .
6845	RunBot starts a bot .
6846	RunBotOnWebhook runs the bot on the given bot .
6847	NewOutgoingMessage creates a new OutgoingMessage .
6848	NewOutgoingLocation creates a new OutgoingLocation .
6849	NewOutgoingVenue creates a new OutgoingVenue
6850	NewOutgoingVideo creates a new OutgoingVideo
6851	NewOutgoingVideoResend creates a new OutgoingVideoResend
6852	NewOutgoingPhoto creates a new OutgoingPhoto .
6853	NewOutgoingPhotoResend returns a new OutgoingPhotoResend instance
6854	NewOutgoingSticker creates a new OutgoingSticker
6855	NewOutgoingStickerResend returns a new OutgoingSticker
6856	NewOutgoingVoice creates a new OutgoingVoice .
6857	NewOutgoingVoiceResend creates a new OutgoingVoiceResend
6858	NewOutgoingAudio creates a new OutgoingAudio instance
6859	NewOutgoingAudioResend creates a new OutgoingAudioResend
6860	NewOutgoingDocument creates a new OutgoingDocument .
6861	NewOutgoingDocumentResend returns a new OutgoingDocumentResend instance
6862	NewOutgoingForward creates a new OutgoingForward
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest returns a new OutgoingUserProfilePhotosRequest instance
6865	NewOutgoingKickChatMember returns a new OutgoingKickChatMember instance
6866	NewOutgoingUnbanChatMember returns a new OutgoingUnbanChatMember instance
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackResponseResponse
6868	NewInlineQueryAnswer creates a new inline query answer
6869	Type returns the type of MessageType .
6870	Type returns the type of the update .
6871	MarshalJSON method of Recipient
6872	querystring returns a copy of the outgoing request .
6873	Get base method
6874	Get base method
6875	querystring returns the query string as a query string .
6876	querystring returns the query string as a query string .
6877	querystring returns query string representation of a user profile .
6878	querystring returns query string representation of outbound video .
6879	querystring returns the string representation of the outgoing request .
6880	NewInlineQueryResultArticle returns a new inlineQueryResult instance
6881	NewInlineQueryResultPhoto creates a new inline query .
6882	NewInlineQueryResultGif creates a new inline query .
6883	NewInlineQueryMpeg4Gif creates a new inline query .
6884	NewInlineQueryResultVideo creates a new inline query .
6885	Send a user profile
6886	Send sends an outgoing chat action .
6887	Send sends an inline query .
6888	Send sends a kickChatMember to the channel .
6889	Send sends the UnbanChatChatMember to the outgoing UnbanChatMember member .
6890	Send sends a request to the response
6891	NewAPIClient creates a new APIClient .
6892	BeforeInsert updates the timestamp .
6893	ColumnName returns column name .
6894	New creates a new DB .
6895	From creates a From from the database .
6896	Where creates a Condition .
6897	OrderBy sets the ORDER BY clause .
6898	Limit sets the limit limit .
6899	Offset adds an offset to the database .
6900	Join creates a JoinCondition .
6901	Count creates a new count .
6902	Update implements the Update interface .
6903	Delete deletes the given object .
6904	Begin begins the database .
6905	Commit commits the database .
6906	Quote a string .
6907	SetLogOutput sets the output writer .
6908	selectToSlice selects a slice of rows .
6909	selectToValue selects a row from the database .
6910	fieldIndexByName returns the index for the given name .
6911	columns returns the columns for the given column name .
6912	tagsFromField returns a list of tags from the database .
6913	hasSkipTag returns true if the field is skipped .
6914	hasPKTag returns true if the field has the given field .
6915	isAutoIncrementable returns true if the field is autoincrementable .
6916	collectFieldIndexes collects all indexes in the database .
6917	findPKIndex returns the index for the given type .
6918	sizeFromTag returns the size of the given field .
6919	columnFromTag returns the column name for the given field .
6920	defaultFromTag returns the default value for the given field .
6921	Where adds a condition to the condition .
6922	And adds a condition to the condition .
6923	Or adds a condition to the condition .
6924	Like adds a LIKE clause to the query .
6925	Between adds two conditions to the condition .
6926	OrderBy sets the ORDER BY clause .
6927	Limit specifies limit limit .
6928	Offset adds offset to the condition .
6929	SetFormat sets the template
6930	Print prints the given query .
6931	Print logs a query .
6932	Quote returns a quoted string .
6933	SQLType returns the name of the sql .
6934	New creates a new archive .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next network adapter ID .
6937	total network adapters
6938	RemoveAllNetworkAdapters removes all network adapters
6939	RemoveNetworkAdapter removes a network adapter .
6940	NetworkAdapters returns a list of network adapters .
6941	newArchive returns a new archive
6942	GetFileReader returns a ReadCloser with the given name .
6943	ExtractToWriter extracts a file from the archive .
6944	ExtractToFile extracts a file from the archive .
6945	SharedFoldFoldParentsDir returns the shared folders for the guest .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot cleans up the snapshot .
6949	BusTypeFromID converts a BusType into a BusType
6950	Read reads the VMX file .
6951	Write writes the VMX file to disk .
6952	NewVirtualMachine creates a virtual machine .
6953	Vcpus returns the number of VCPus .
6954	VmxPath returns the path of the VM .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns true if the VM is read .
6957	InVMTeam returns true if the VM is a VM team .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current device state .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM shuts down the VM .
6963	updateVMX updates the VMX .
6964	SetMemorySize sets the size of the VM .
6965	SetNumberVcpus sets the number of virtual CPUs
6966	SetDisplayName sets the name of the virtual machine .
6967	SetAnnotation sets the annotation for the VM .
6968	SetVirtualHwVersion sets the virtual host version
6969	Error implements the Error interface .
6970	Errorf is a convenience wrapper for Errorf .
6971	Error implements the error interface .
6972	string returns the string representation of the stack .
6973	newStackFrame creates a stack frame .
6974	CaptureStack returns a slice of stack frames .
6975	parseFuncName parses the package name and package name .
6976	Stack logs an error .
6977	StackWithCaller calls StackWithCaller .
6978	Write implements the http . Writer interface .
6979	ResponseStatus returns the status of the response .
6980	httpResponseStruct returns the value of the response .
6981	SetDetectedContentType implements the http . ResponseWriter interface .
6982	New returns a new ServerError instance
6983	New creates a new DBError
6984	New creates a new ValidationError
6985	New returns a new NotFoundError instance
6986	StrLength returns the length of the field .
6987	StrLenIn returns the string representation of a string .
6988	StrIn returns a string representation of a field .
6989	GetEmail mocks base method
6990	MostSpecificType returns the most recent type of strings .
6991	FullTypeHierarchy returns the full hierarchy of the given hierarchy .
6992	SortTypes sorts a list of types .
6993	Delete removes a key from the store
6994	Set implements RedisStore .
6995	refresh refreshes the store .
6996	Get returns a redis store
6997	Destroy removes a session from the pool
6998	UpExpire is part of the RedisProvider interface .
6999	Use adds a handler to the middleware stack .
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds middleware to the router .
7002	Group creates a new RouterGroup
7003	Run starts the server
7004	create creates a new router
7005	Redirect redirects the given URL .
7006	Ok implements the http . Handler interface .
7007	Fail sends an error to the context .
7008	ResStatus returns the status of the request .
7009	Next implements the Handler interface .
7010	GetSession returns the current session
7011	GetBodyJSON returns the body of the request body .
7012	SetSession sets the session for the session
7013	FreshSession is used to update a session
7014	DeleteSession deletes a session
7015	Write implements the io . Writer interface .
7016	WriteHeader writes a header to w .
7017	New returns a new Client .
7018	setAllowLargeResults sets whether or not the client is allowed .
7019	connect connects to the client
7020	InsertRow inserts a row into the database .
7021	AsyncQuery is part of the Client interface .
7022	Query returns a list of query strings .
7023	stdPagedQuery is used to query the results of a query .
7024	largeDataPagedQuery is used to query the results of a large query .
7025	pagedQuery returns a slice of rows in the database .
7026	pageOverJob is a helper function to fetch the results for a job .
7027	Count returns the number of rows in the database .
7028	Work fetches the given url and returns the result .
7029	subworker is used to run a job
7030	worker starts a worker .
7031	supervisor runs the supervisor .
7032	Run starts the pool
7033	Add adds a function to the pool .
7034	Wait blocks until the pool is done .
7035	Results returns a slice of jobs .
7036	WaitForJob waits for a job to wait until the job has finished .
7037	Status returns the status of the supervisor .
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc
7039	WebSocketHandlerFunc is a wrapper around http . HandlerFunc
7040	StaticFile creates a static file .
7041	PreloadFile loads a preload file .
7042	InitHtmlTemplates initializes HTML templates .
7043	InitTextTemplates initializes text templates .
7044	Html creates a new HTML template
7045	Text creates a new text template
7046	InitWatcher initializes a watcher .
7047	CloseWatcher closes the watcher .
7048	Find returns the route for the given path .
7049	Add adds a new route to the router .
7050	NewRouterters creates a new router
7051	NewServerMux returns a new ServerMux .
7052	err implements the http . Handler interface .
7053	HandleFunc registers a handler for the router .
7054	handleError is part of the http . Handler interface .
7055	Redirect redirects url
7056	InitPProf initialize pprof
7057	StartSession starts a new session .
7058	compose returns a channel that can be used to select a slice of integers .
7059	repeated iterates over all elements in the list .
7060	permutations returns a slice of all elements in the slice .
7061	repeated_permutations returns a channel that can be used to select multiple times .
7062	gformat returns a string representation of a format .
7063	Errorm formats a formatted string with the given format .
7064	Fprintm writes a formatted string to w .
7065	Printm prints the given format as a string .
7066	Stringm returns a string representation of a format .
7067	Validate validates the password requirements
7068	MakeRequirements creates a PasswordStrengthRequirements from a string .
7069	sanityCheck returns true if the password is valid .
7070	password returns the password for the password .
7071	NewPassword creates a new password .
7072	NewPasswords creates a new password with the given requirements .
7073	addNums adds the number of digits to the given number .
7074	punctuate returns the punctuation of the given string .
7075	deprecated_init is used to create a new StdinSet
7076	Param adds a parameter to the set .
7077	Parse parses a ParamSet into a ParamSet .
7078	Unmarshal implements json . Unmarshaler
7079	GetDefaultHTTPClient returns a default HTTPClient
7080	DeviceInfo returns information about a device .
7081	DevicePresence returns the device presence
7082	StatusStatus returns the status of a push .
7083	DeleteNotification deletes a notification .
7084	NotifyDevice sends a push notification .
7085	Assert asserts that the given Tester is true .
7086	CreateFile creates a new file
7087	AddError adds an error to the form .
7088	AddFieldError adds an error to the form errors field .
7089	HasErrors returns true if the FieldErrors are set .
7090	NewError returns a new FormErrors instance
7091	NewFieldError creates a new form errors .
7092	ChainHandlers returns a new http . Handler for the given handlers .
7093	FinalHandler returns a new http . Handler for the http . Handler .
7094	Hash returns the MD5 hash of the given reader .
7095	IsHash checks if the given hash is a hash .
7096	WithBaseDir sets the directory for the given directory .
7097	WithFileFindFunc adds a function to the options map .
7098	WithTemplateFromFiles adds a template to the list of files
7099	WithTemplatesFromFiles returns an Option that sets the templates of the templates .
7100	WithTemplateFromStrings adds a string to the options map
7101	WithTemplatesFromStrings sets the templates from a slice of strings
7102	WithFunction adds a function to the options map .
7103	WithFunctions adds a function to the options map
7104	WithDelims sets the delimiter
7105	New creates a new Template
7106	Respond with status code
7107	Respond to respond with status code
7108	Respond with status code
7109	RenderTemplate renders a template with the given name .
7110	New returns a new Server .
7111	ServeUDP implements the Server interface for Server .
7112	Shutdown shuts down the server .
7113	QuicHeadersHandler creates a new http . Handler for the server .
7114	GetRequestIPs returns the IP address of the request
7115	DomainRedirectHandler returns an http . Handler for the domain .
7116	New returns a new Servers instance
7117	Add adds a new server to the server .
7118	TCPAddr returns the TCP address for the given name .
7119	UDPAddr returns the UDP address for the given name .
7120	Close closes all servers
7121	Shutdown shuts down the server
7122	Accept accepts a TLS connection and returns the connection .
7123	NewStaticFilesHandler creates a new http . Handler for the given filesystem .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON implements the json . Marshaler interface for Options .
7126	UnmarshalJSON handles deserialization of options .
7127	MarshalYAML implements the json . Marshaler interface for Options .
7128	UnmarshalYAML unmarshals options into options .
7129	NewHandler creates a new http . Handler .
7130	WithPanicResponse sets the panic response body
7131	WithPanicResponseHandler sets the panic response handler .
7132	New creates a new Handler .
7133	ServeHTTP implements the http . Handler interface .
7134	NewContextFunc returns a new instance of a context
7135	NewMapErrorRegistry returns a new MapErrorRegistry .
7136	AddError adds an error to the map .
7137	AddMessageError adds an error to the map .
7138	MustAddError adds an error to the map .
7139	MustAddMessageError creates an ErrorError with the given message .
7140	AddHandler adds a handler to the map .
7141	MustAddHandler adds a handler to the map .
7142	Handler returns the handler for the given error .
7143	New creates a new Client .
7144	Request sends a request to the client .
7145	JSONContext sends a JSON request to the client .
7146	StreamContext is part of the Client interface .
7147	Stream is part of the Client interface .
7148	JSONUnmarshal implements json . Unmarshaler
7149	ServeTCP implements the Server interface .
7150	ServeTCP implements the Server interface for Server .
7151	Shutdown shuts down the server .
7152	HandleMethods is used to handle HTTP requests
7153	NewSetHeadersHandler creates a new http . Handler for the given headers .
7154	New creates a new Server .
7155	HashedPath returns the path of the file .
7156	New returns a new instance of Service .
7157	HTMLHandler returns an http . Handler for the service .
7158	Status implements Service .
7159	StatusHandler is part of the Service interface .
7160	OnHandler implements Service .
7161	OffHandler implements Service .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON implements the json . Marshaler interface for PostArtifactRequest .
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON implements the json . Marshaler interface .
7166	MarshalJSON implements the json . Marshaler interface for TriggerHookRequest .
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON handles deserialization of a TriggerHookResponse .
7169	MarshalJSON implements the json . Marshaler interface for LaunchInfo .
7170	MarshalJSON implements the json . Marshaler interface for Var .
7171	MarshalJSON implements the json . Marshaler interface for Var1 .
7172	MarshalJSON implements the json . Marshaler interface for Var3 .
7173	MarshalJSON implements the json . Marshaler interface .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write implements io . Reader
7176	Seek implements io . Reader
7177	Read implements io . Reader
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON implements the json . Marshaler interface for RegionLaunchSpec .
7180	GenerateCode generates code for the API
7181	postPopulate is part of the APIEntry interface .
7182	CreateTemporaryCredentials creates a new Credentials object
7183	setURL sets the URL for the given URL .
7184	SignRequest signs a request .
7185	APICall implements the Client interface .
7186	SignedURL returns the URL for the given URL .
7187	MarshalJSON implements the json . Marshaler interface .
7188	bw256256 converts a byte slice into a byte slice .
7189	NewCubeHash returns a new cube hash .
7190	boxhash256256 computes the cube hash256 for the given data .
7191	Sum returns the sum of data .
7192	Take a slice of bytes into a slice of bytes .
7193	reduceSqueeRowZero reduces the number of rows in the given slice .
7194	reduceDuplexRow1 removes a row from the given slice .
7195	NewReaderByteCodeLoader creates a new ReaderByteLoader .
7196	LoadReader loads the given reader from the given reader .
7197	NewV3 creates a new UUID .
7198	txLiteral evaluates a literal expression .
7199	txFetchSymbol retrieves the symbol from the state .
7200	txMarkRaw is part of the State interface .
7201	txUnmarkRaw is part of the State interface .
7202	txPrint writes the output to stderr .
7203	txPrintRaw writes the output to stdout .
7204	NewLoopVar creates a new loop variable .
7205	txMakeArray creates a slice of values from the stack .
7206	txFunCallOmIsOm is a helper function for txn .
7207	DumpAST implements the flags .
7208	DumpByteCode adds a flag to the flag .
7209	Optimize optimizes the given vm .
7210	NewFuncDepot returns a new FuncDepot
7211	Get returns the value of the given key .
7212	Set implements the FuncDepot interface .
7213	NewFileTemplateFetcher returns a new FileTemplateFet instance
7214	LastModified returns the last modified time .
7215	Reader returns an io . Reader from the source .
7216	Bytes returns the bytes of the file .
7217	NewState returns a new State .
7218	PushFrame creates a new frame .
7219	PopFrame returns the next frame .
7220	CurrentFrame returns the current frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark returns the next mark .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a byte from the state .
7226	Reset resets the state of the state .
7227	DeclareVar implements the Frame interface .
7228	GetLvar gets the value at the given index .
7229	SetLvar implements the Frame interface for Frame .
7230	NewByteCode returns a new ByteCode
7231	Append appends an op to the byte list .
7232	AppendOp appends an op to the byte slice .
7233	String returns a string representation of the bytecode .
7234	NewCachedByteCodeLoader creates a new CachedByteCacheLoader .
7235	Load loads the cache from cache
7236	NewFileCache creates a new FileCache .
7237	GetCachePath returns the path for the given key .
7238	Get retrieves the cache from the cache
7239	Set implements the Cache interface
7240	Delete removes a file from the cache
7241	Get returns the cached cache .
7242	Set implements the Cache interface .
7243	Delete removes a key from the cache .
7244	NewStringLexer creates a new parser .
7245	NewReaderLexer creates a new parser .
7246	NewV4 returns a new UUID .
7247	Parse parses the given template and returns the parsed AST .
7248	ParseReader parses the given reader .
7249	Visit returns a channel of the AST node .
7250	String returns a string representation of the AST .
7251	Run runs the VM .
7252	DefaultParser initializes the parser .
7253	DefaultLoader is the default loader for testing
7254	DefaultVM initializes the VM .
7255	Get returns the value associated with the given key .
7256	NewHTTPSource creates a new HTTPS source
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a string from a template .
7259	Get returns the value associated with the given key .
7260	NewOp node constructor
7261	MarshalBinary implements the encoding . BinaryMarshaler interface .
7262	UnmarshalBinary unmarshals a byte slice into an op .
7263	ArgInt returns the value of the argument .
7264	ArgString returns the string representation of the op .
7265	AppendOp appends an op to the context .
7266	Compile compiles the given AST .
7267	NewV5 creates a new UUID .
7268	Sort sorts the lexical symbol list .
7269	Less returns true if the index is less than j .
7270	Swap implements the lexer interface .
7271	Copy returns a copy of the LexSymbolSet .
7272	Set implements the lexerSet interface .
7273	GetSortedList returns a list of SortedList
7274	Top returns the top level of the stack .
7275	Resize resizes the stack .
7276	Extend adds the given size to the stack .
7277	grow increases the minimum size of the stack .
7278	Get returns the value of the stack .
7279	Set implements stack . Interface .
7280	Push adds a value to the stack .
7281	Pop removes the stack from the stack .
7282	String returns a string representation of the Stack .
7283	GetHostIPs returns the IP address of the host .
7284	GetPrivateHostIPs returns a list of private IP addresses
7285	IsPrivate returns true if the given IP is a private network .
7286	Environ returns a list of environment variables
7287	get env variable
7288	flagAsEnv returns the name of the given name .
7289	NewPolicy creates a new Policy .
7290	CreateRandom creates a random random byte slice
7291	Shuffle shuffles a slice of bytes .
7292	Generate generates a random policy
7293	ExecutableFolder returns the name of the folder .
7294	Ignore returns a copy of the Sentinel .
7295	Sigs returns an option that sets the signal s signatures .
7296	Logf sets the logf function .
7297	Errorf returns an Option that sets the error message .
7298	New returns a new Sentinel instance
7299	Run starts the Sentinel server
7300	Shutdown implements Sentinel .
7301	ShutdownIgnore implements the Sentinel interface for Sentinel .
7302	Register registers a new server .
7303	Mux creates a new netmux .
7304	HTTP is used to register a new server
7305	IgnoreError returns true if the error is ignored .
7306	IgnoreNetOpError returns true if the error occurred .
7307	convertAndAppendContextFuncs converts a slice of func into a slice of func .
7308	router creates a new router
7309	build info
7310	Encode encodes v into JSON .
7311	Json creates a martini middleware .
7312	validateAndMap validates the given object with the given interface .
7313	Count returns the number of errors .
7314	Header returns a map of headers
7315	PreflightHeader returns a map of headers for the given origin .
7316	IsOriginAllowed checks if origin is allowed
7317	Allow returns an http . HandlerFunc that sets the request headers .
7318	Rendererer creates a new renderer .
7319	String returns a string representation of the AcceptLanguages .
7320	Languages returns a copy of the request .
7321	Prefix adds a prefix to the middleware .
7322	Basic returns an http . HandlerFunc that sets the given username .
7323	UpdateUser updates a user
7324	GetById retrieves the user by id .
7325	AddressToAccountId returns the account id for the given address .
7326	MutateChangeTrust updates the ChangeTrustOp .
7327	MutateChangeTrust is part of the Limit interface .
7328	Trust creates a new ChangeBuilder .
7329	RemoveTrust removes a trust .
7330	MutatePayment implements the Payload interface .
7331	MutatePayment is used to update the given value .
7332	MutatePayment is used to mutate a transaction .
7333	MutatePayment implements the Payload interface .
7334	MutateAccountMerge is part of the DestinationMergeBuilder interface .
7335	MustParse is like Parse but panics .
7336	Parse parses a value from a string .
7337	String returns a string representation of xdr .
7338	CreateOffer creates a new ManagedOffer .
7339	CreatePassiveOffer creates a new ManageOffer .
7340	UpdateOffer updates an existing offer .
7341	DeleteOffer deletes an offer .
7342	ManageOffer is part of the Manager interface .
7343	Mutate implements the ManageBuilder interface .
7344	MutateManageOffer mutates the amount of time .
7345	MutateManageOffer implements the Mdr interface .
7346	MutateManageOffer sets the RateOffer field s value .
7347	MutateOperation is part of the Source interface .
7348	String returns a human - readable representation of the price .
7349	Transaction creates a new TransactionBuilder .
7350	Mutate is part of the TransactionBuilder interface .
7351	Hash returns the hash of the transaction builder .
7352	HashHex returns the hash of the transaction builder .
7353	Sign implements the Signer interface .
7354	MutateTransaction mutates a TransactionBuilder
7355	MutateTransaction is part of the ChangeBuilder interface .
7356	MutateTransaction implements the CreateAccountBuilder interface for CreateAccountBuilder .
7357	MutateTransaction implements the Config interface .
7358	MutateTransaction mutates the transaction builder .
7359	MutateTransaction is part of the MapperBuilder interface .
7360	MutateTransaction is part of the ManageBuilder interface .
7361	MutateTransaction mutates the transaction hash .
7362	MutateTransaction adds a transaction to the transaction .
7363	MutateTransaction is part of the TransactionBuilder interface .
7364	MutateTransaction mutates the transaction text .
7365	MutateTransaction is part of the NetworkBuilder interface .
7366	MutateTransaction is part of the PaymentBuilder interface .
7367	MutateTransaction is part of the SetOptions interface .
7368	MutateTransaction is part of the SequenceBuilder interface .
7369	MutateTransaction is part of the Source interface .
7370	Scan implements the Scanner interface .
7371	InitialState returns the current state of the bundle .
7372	Changes returns the current state of the bundle .
7373	StateAfter returns the state after the given key .
7374	changes returns a list of all ledger entries in the bundle .
7375	MustDecode decodes the given version .
7376	Encode encodes src into a byte slice .
7377	MustEncode converts src to a byte slice .
7378	checkValidVersionByte checks if the given version is valid .
7379	Checksum returns the checksum of data .
7380	Validate checks if the data is valid
7381	LedgerKey implements the LedgerEntry interface .
7382	checkPlausible checks if the prefix is valid
7383	Address returns the string representation of the account ID .
7384	Equals returns true if the given account id is equal .
7385	SetAddress sets the account ID .
7386	ToXdrObject converts an asset to an xdr object .
7387	Through adds the given asset to the path .
7388	PayWith returns a PayWithPath with the given amount .
7389	continuationFraction takes a price and converts it to a decimal value .
7390	Mutate implements the MutexBuilder interface .
7391	MutateTX implements the MutexBuilder interface .
7392	Bytes returns the bytes of the transaction envelope .
7393	Base64 returns the base64 encoded string .
7394	MutateTransactionEnvelope implements the MutexBuilder interface .
7395	MutateSetOptions mocks base method
7396	MutateSetOptions mocks base method
7397	MutateSetOptions mocks base method
7398	MutateSetOptions mocks base method
7399	SetThresholds sets the threshold s threshold .
7400	MutateSetOptions mocks base method
7401	MutateSetOptions implements the SetOptions interface .
7402	MutateSetOptions mocks base method
7403	MutateCreateCreateAccount is part of the Destination interface .
7404	MutateCreateAccount creates a new account .
7405	Random returns a random random seed .
7406	Master is used to create a new Killer instance .
7407	Parse parses the given address .
7408	MustParse parses the given address and returns it .
7409	MutateAllowTrust sets the AllowTrustOp field s value .
7410	MutateAllowTrust implements the AllowTrustOp interface .
7411	MutateAllowTrust implements the AllowTrust interface .
7412	ToAsset creates an asset from an account .
7413	SetNative sets the Asset field s value .
7414	String returns the string representation of the asset .
7415	Equals returns true if the asset type is equal .
7416	MustExtract is part of the Asset interface .
7417	Unmarshal unmarshals the data from r .
7418	Marshal writes v to w .
7419	ValidEnum returns true if the given value is valid .
7420	NewPublicKey creates a new PublicKey
7421	MustEd25519 returns the U25519 field if it s non - nil zero value otherwise .
7422	NewNodeId returns a new NodeId instance
7423	NewAccountId returns a new account id
7424	ValidEnum returns true if the given value is valid .
7425	ArmForSwitch returns the switch value for the given switch type .
7426	NewAsset creates a new Asset .
7427	MustAlphaNum4 returns the asset number for the asset .
7428	GetAlphaNum4 returns the AlphaNum of the asset .
7429	MustAlphaNum12 returns the asset number
7430	GetAlphaNum12 returns the asset number of alpha .
7431	ValidEnum returns true if the given value is valid .
7432	ValidEnum returns true if the given entry is valid .
7433	ValidEnum returns true if the given value is valid .
7434	NewAccountEntryExt returns a new AccountEntryExt instance
7435	ValidEnum returns true if the given value is valid .
7436	NewTrustLineEntryExt returns a TrustLineExt instance
7437	ValidEnum returns true if the offer entry is valid .
7438	NewOfferEntryExt returns a new OfferEntryExt .
7439	NewDataEntryExt returns a new DataEntryExt .
7440	NewLedgerEntryData creates a new LedgerEntry
7441	NewLedgerEntryExt returns a new LedgerEntryExt .
7442	ValidEnum returns true if the given EnvelopeType is valid .
7443	ValidEnum returns true if the given value is valid .
7444	ArmForSwitch returns the switch code for the given switch type .
7445	NewAllowTrustOpAsset returns a new AllowTrustAsset instance
7446	MustAssetCode4 returns the value of asset code for the given asset .
7447	GetAssetCode4 returns the asset code for the given asset .
7448	MustAssetCode12 returns the value of asset code for an asset .
7449	GetAssetCode12 returns the asset code for the given asset .
7450	NewOperationBody creates a new operation body .
7451	MustCreateAccountOp returns the CreateAccountOp field if it s non - nil zero value otherwise .
7452	GetCreateAccountOp returns the CreateAccountOp field if it s non - nil zero value otherwise .
7453	MustPaymentOp returns the PaymentOp field if it s non - nil zero value otherwise .
7454	GetPaymentOp returns the payment op .
7455	MustPathPaymentOp returns the PathPaymentOp .
7456	GetPathPaymentOp returns the PathPaymentOp
7457	MustManageOfferOp returns a ManageOfferOp .
7458	GetManageOfferOp returns the ManageOfferOp field if it exists .
7459	MustCreatePassiveOfferOp returns a new CreatePassiveOpOp .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOpOp field if it s non - nil zero value otherwise .
7461	MustSetOptionsOp returns the SetOptionsOpOp .
7462	GetSetOptionsOp returns the set of options for the operation
7463	MustChangeTrustOp returns the ChangeTrustOp field if it s non - nil zero value otherwise .
7464	GetChangeTrustOp returns the ChangeTrustOp for the operation
7465	MustAllowTrustOp returns the AllowTrustOp field if it s non - nil otherwise .
7466	GetAllowTrustOp returns the AllowTrustOp for the operation
7467	MustDestination returns the AccountId of the operation
7468	GetDestination returns the AccountId of the operation
7469	MustManageDataOp returns the ManageDataOp field if it s non - nil zero value otherwise .
7470	GetManageDataOp returns the ManageDataOp for the operation
7471	ValidEnum returns true if the given value is valid .
7472	ArmForSwitch returns the arm for the given swo .
7473	NewMemo creates a new Memo .
7474	MustText returns the value of the Memo .
7475	GetText returns the text associated with the given value .
7476	MustId returns the id of the Memo .
7477	GetId returns the id of the Memo .
7478	MustHash returns the hash of the Memo .
7479	GetHash returns the hash of the Memo .
7480	MustRetHash returns the hash of the Memo .
7481	NewTransactionExt returns a new TransactionExt instance
7482	ValidEnum returns true if the given value is valid .
7483	ArmForSwitch returns the arm for the given switch .
7484	NewCreateAccountResult returns a new CreateAccountResult instance
7485	ValidEnum returns true if the passed value is valid .
7486	ArmForSwitch returns the arm for the given switch .
7487	NewPaymentResult creates a new PaymentResult
7488	ValidEnum returns true if the given value is valid .
7489	ArmForSwitch returns the ArmPayment for the given swagger .
7490	NewPathPaymentResult returns a new PathPaymentResult instance
7491	MustNoIssuer returns nil if the asset is not valid .
7492	GetNoIssuer returns the issuer associated with the given issuer .
7493	ValidEnum returns true if the given value is valid .
7494	ValidEnum returns true if the given value is valid .
7495	ArmForSwitch returns the arm for the given switch .
7496	NewManageOfferSuccessResult returns a new ManageOfferSuccessResult instance
7497	ArmForSwitch implements ManageOfferResult .
7498	NewManageOfferResult returns a new ManageOfferResult instance
7499	ValidEnum returns true if the given value is valid .
7500	ArmForSwitch returns the switch value for the specified switch .
7501	NewSetOptionsResult returns a SetOptionsResult instance
7502	ValidEnum returns true if the given value is valid .
7503	ArmForSwitch returns the switch value for the switch .
7504	NewChangeTrustResult creates a new ChangeTrustResult
7505	ValidEnum returns true if the given value is valid .
7506	ArmForSwitch returns the ArmForSwitch for the given switch .
7507	NewAllowTrustResult creates a new AllowTrustResult
7508	ValidEnum returns true if the given value is valid .
7509	ArmForSwitch implements AccountMergeResult .
7510	NewAccountMergeResult returns a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the value of this AccountMergeResult .
7512	GetSourceAccountBalance returns the AccountBalance field if it s non - nil zero value otherwise .
7513	ValidEnum returns true if the value is valid .
7514	ArmForSwitch returns the switch value for a switch .
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts returns an array of InflationPayouts .
7517	GetPayouts returns the list of Payouts .
7518	ValidEnum returns true if the given value is valid .
7519	ArmForSwitch implements ManageDataResult
7520	NewManageDataResult returns a new ManageDataResult instance
7521	ValidEnum returns true if the given value is valid .
7522	ArmForSwitch returns the ArmType for the given switch .
7523	NewOperationResultTr returns a new OperationResult instance
7524	MustCreateAccountResult implements the CreateAccountResult interface for OperationResult .
7525	GetCreateAccountResult implements the CreateAccountResult interface for OperationResult .
7526	MustPaymentResult returns the PaymentResult for this operation .
7527	GetPaymentResult returns the payment result
7528	MustPathPaymentResult returns the PathPaymentResult for the operation .
7529	GetPathPaymentResult returns the PathPaymentResult for the operation
7530	MustManageOfferResult returns the ManageOfferResult for the given operation .
7531	GetManageOfferResult returns the ManageOfferResult for the given operation .
7532	MustCreatePassiveOfferResult returns a new ManiveOfferResult instance
7533	MustSetOptionsResult returns the SetOptionsResultResult .
7534	GetSetOptionsResult returns the SetOptionsResult for the operation
7535	MustChangeTrustResult returns the ChangeTrustResult for the operation .
7536	GetChangeTrustResult returns the ChangeTrustResult
7537	MustAllowTrustResult returns the AllowTrustResult field if it s non - nil otherwise .
7538	GetAllowTrustResult returns the AllowTrustResult for the operation
7539	MustAccountMergeResult returns an AccountMergeResult if it is set or not .
7540	GetAccountMergeResult returns the AccountMergeResult field if it s non - nil otherwise .
7541	MustInflationResult returns an InflationResult .
7542	GetInflationResult returns the InflationResult
7543	MustManageDataResult returns the ManageDataResult for the operation
7544	GetManageDataResult returns the ManageDataResult for the operation
7545	ArmForSwitch returns the arm for the given switch .
7546	NewOperationResult creates a new OperationResult
7547	MustTr returns the value of this operation .
7548	GetTr returns the result of the operation
7549	ValidEnum returns true if the passed value is valid .
7550	ArmForSwitch returns the arm for the given switch .
7551	NewTransactionResultResult returns a new TransactionResult instance
7552	MustResults returns a list of operation results .
7553	GetResults returns the result of the transaction .
7554	NewTransactionResultExt returns a new TransactionResultExt .
7555	NewStellarValueExt returns a new StellarValueExt .
7556	NewLedgerHeaderExt returns a new LedgerHeaderExt .
7557	ValidEnum returns true if the given value is valid .
7558	ArmForSwitch implements the LedgerUpgrade interface .
7559	NewLedgerUpgrade creates a new LedgerUpgrade .
7560	MustNewLedgerVersion returns a new LedgerUpgradeVersion
7561	GetNewLedgerVersion returns the Ledger upgrade version
7562	MustNewBaseFee returns a new instance of NewBaseFeeUpgrade
7563	GetNewBaseFee returns a new instance of LedgerUpgrade
7564	MustNewMaxTxSetSize returns a new MaxMaxTxSetSize instance
7565	GetNewMaxTxSetSize returns the MaxMaxTxSet field if it s non - nil zero value otherwise .
7566	ArmForSwitch implements the LedgerKey interface for LedgerKey .
7567	NewLedgerKey creates a new LedgerKey .
7568	ValidEnum returns true if the given value is valid .
7569	ArmForSwitch returns the ArmID for the given bucket .
7570	NewBucketEntry creates a new bucket entry .
7571	MustLiveEntry returns the LedgerEntry for the given bucket .
7572	GetLiveEntry returns the LedgerEntry for the given bucket .
7573	MustDeadEntry returns the LedgerKey for the given bucket .
7574	GetDeadEntry returns the LedgerKey for the given bucket .
7575	NewTransactionHistoryEntryExt returns a new TransactionHistoryExt instance
7576	ArmForSwitch returns the arm for the given switch .
7577	NewTransactionHistoryResultEntryExt returns a new TransactionHistoryEntryExt instance
7578	NewLedgerHeaderEntryExt returns a new LedgerHeaderEntryExt instance
7579	NewScpHistoryEntry creates a new ScpHistoryEntry .
7580	ValidEnum returns true if the given value is valid .
7581	ArmForSwitch implements the LedgerChange interface .
7582	NewLedgerEntryChange creates a new LedgerEntryChange .
7583	MustCreated returns a new LedgerEntry .
7584	GetCreated implements the LedgerEntry interface .
7585	MustUpdated returns the updated LedgerEntry .
7586	GetUpdated returns the updated LedgerEntry .
7587	MustRemoved returns the LedgerKeyChange field if it s non - nil zero value otherwise .
7588	GetRemoved implements the LedgerEntry interface .
7589	MustState returns a new LedgerEntry .
7590	GetState implements the LedgerEntry interface .
7591	NewTransactionMeta returns a new TransactionMeta instance
7592	MustOperations returns the list of operations that have been set .
7593	GetOperations returns all operations associated with this transaction .
7594	ValidEnum returns true if the given value is valid .
7595	ValidEnum returns true if the given value is valid .
7596	ArmForSwitch returns the ArmID for the given switch .
7597	NewPeerAddressIp creates a new PeerAddressIp instance
7598	MustIpv4 returns the address of the peer address
7599	GetIpv4 returns the Ipv4 interface
7600	MustIpv6 returns the address of the peer address
7601	GetIpv6 returns the ipv6 address of the peer
7602	ValidEnum returns true if the given value is valid .
7603	ArmForSwitch returns the arm for the given SW message .
7604	NewStellarMessage creates a new StellarMessage .
7605	MustError returns an error if the message is invalid .
7606	GetError returns the error of the StellarMessage .
7607	MustHello returns the Hello field if it s non - nil zero value otherwise .
7608	GetHello returns the Hello message
7609	MustAuth returns the Auth field if it s non - nil .
7610	GetAuth returns the Auth field if it s non - nil otherwise .
7611	MustDontHave returns nil if the message is not present .
7612	GetDontHave returns the Dontain field if it s non - nil zero value otherwise .
7613	MustPeers returns the list of peers that have been set .
7614	GetPeers returns a list of peer addresses
7615	MustTxSetHash returns the MustSetHash field if it s non - nil zero value otherwise .
7616	GetTxSetHash returns the hash of the message .
7617	MustTxSet returns the current transaction set .
7618	GetTxSet returns the transaction set .
7619	MustTransaction returns the value of this message .
7620	GetTransaction returns the TransactionEnvelope with the given type .
7621	MustQSetHash returns the hash of the message .
7622	GetQSetHash returns the hash of the message
7623	MustQSet returns a new ScpSet .
7624	GetQSet returns the current quorum set .
7625	MustEnvelope returns an EnvelopeEnvelope .
7626	GetEnvelope returns the envelope s Envelope .
7627	MustGetScpLedgerSeq returns the value of ScpLedgerSeq .
7628	GetGetScpLedgerSeq returns the value of ScpLedgerSeq .
7629	ArmForSwitch returns the arm for the given switch .
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage .
7631	ValidEnum returns true if the passed value is valid .
7632	ArmForSwitch returns the switch value for the switch .
7633	NewScpStatementPledges returns a new ScpStatement instance
7634	MustPrepare returns a prepared StatementPrepare .
7635	GetPrepare returns the prepared statement .
7636	MustConfirm returns the Confirm field if it s non - nil zero value otherwise .
7637	GetConfirm returns the Confirm field if it s non - nil otherwise .
7638	MustExternalize returns the MustExternalize field if it s non - nil zero value otherwise .
7639	GetExternalize returns the Externalize field if it s non - nil zero value otherwise .
7640	MustNominate returns the minimum Nominate field if it s non - nil zero value otherwise .
7641	GetNominate returns the Nominate field if it s non - nil zero value otherwise .
7642	SafeUnmarshalBase64 unmarshals bytes into a byte slice .
7643	SafeUnmarshal unmarshals data into dest .
7644	SendAmount returns the amount of total amount of payments .
7645	LoadAccount loads an account from the client .
7646	SequenceForAccount returns the sequence number for the given account ID .
7647	SubmitTransaction is part of the Client interface .
7648	Equals returns true if the given key is equal .
7649	SetAccount sets the key for the given account .
7650	SetData implements the LedgerKey interface .
7651	SetOffer implements the LedgerKey interface for LedgerKey .
7652	SetTrustline implements the LedgerKey interface for LedgerKey .
7653	Add adds a new key to the ChDB .
7654	tryHash tries to find the hash of the hash of the given hash .
7655	HashIndexFromKey returns the hash of the given key .
7656	ReadInt reads an int64 from the reader .
7657	Read implements io . Reader
7658	Get returns the value of the given key .
7659	Iterate returns a Iterator that iterates over all keys .
7660	Write implements io . Writer interface .
7661	RegisterDatasources registers a map of datasources
7662	RegisterFonts registers fonts for the given path .
7663	New creates a new Map .
7664	NewSized returns a new Map .
7665	Load loads the map from the map
7666	Resize resizes the map .
7667	Free releases the map .
7668	SRS returns the SRS of the map .
7669	ZoomAll returns the ZoomAll of the map .
7670	ZoomTo sets the zoom to the map .
7671	Render renders the rendered image .
7672	RenderImage renders an image .
7673	RenderToFile renders a file to the map .
7674	SetBufferSize sets the size of the map .
7675	Search returns a list of search responses .
7676	Get returns a connection to the pool .
7677	put adds a connection to the pool .
7678	FluoToStereoF32 converts audio to a stereo byte slice .
7679	BitCrush computes the bit at the given factor .
7680	NormalizeMax normalizes the audio buffer
7681	Grain multiplies the given buffer .
7682	FluoDownmix computes the mono sampling of audio .
7683	Quantize multiplies the audio buffer .
7684	PCMScale computes the PCM scale .
7685	Stereo panics if panics .
7686	Leader returns the current leader
7687	IsLeader returns true if the candidate is leader
7688	NewResponse creates a new http . Response
7689	GetRequestID returns the request ID
7690	Log implements the MonitorableWriter interface .
7691	SendMailSSL sends a mail to the given address .
7692	Send sends a message to the mail service .
7693	WaitForI waits for the given connection to the given host .
7694	Get retrieves the configuration from the given environment .
7695	initConfig initializes the config file
7696	WritePluginResultsToDatabase writes all plugins to the database
7697	NewAuthController creates a new AuthController .
7698	Authenticate implements the AuthController interface .
7699	NewOAuth2Controller creates a new OAuth2Controller
7700	Refresh refreshes the request .
7701	Token implements the OAuth2Controller interface .
7702	Logging creates a new http . Handler for logging .
7703	SingleFile creates a new http . Handler for the given filename .
7704	Write writes data to w .
7705	Hijack implements the http . Handler interface .
7706	NewMongo creates a new MongoDB instance
7707	Disconnect disconnects the connection
7708	New creates a new table .
7709	PrintTable prints a table
7710	PrintHorizontal prints the given map to the given map .
7711	PrintRow prints a row .
7712	AddRow adds a row to the table .
7713	Print prints the table
7714	String returns a string representation of the table .
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a table .
7717	fieldString returns a string representation of a table .
7718	stringTableDash returns a string representation of the table .
7719	printMarkdownDash prints all dashboards in the table .
7720	stringMarkdownDash returns a string representation of the table .
7721	HashPassword returns the hash of the given password .
7722	EncodeOAuth2Code encodes an OAuth2 token
7723	DecodeOAuth2Code decodes an OAuth2Code from a JSON string
7724	NewServer creates a new server .
7725	Start starts the server
7726	Stop stops the server
7727	NewLoggingServeMux creates a new LoggingMux .
7728	Handler returns a handler for the given request .
7729	Handle registers a handler for the given pattern .
7730	HandleFunc registers a handler for the given pattern .
7731	Init initializes the database .
7732	WaitForConnection waits for a connection to the database .
7733	StoreFileInfo stores a file in the database
7734	StorePluginResults stores plugin results .
7735	CamelCase returns the camel case of the string .
7736	Getopt gets the value from the environment variable
7737	Getopts gets the environment variable from the environment variable
7738	GetSHA256 returns the SHA256 hash of the given file .
7739	RunCommand runs the command .
7740	RemoveDuplicates removes duplicate elements .
7741	Unzip copies the contents of the given archive .
7742	SliceContainsString returns true if a string contains a slice of strings
7743	NewSMTP creates a new SMTP .
7744	SendMail sends a message to the SMTP server .
7745	GetEnvironment returns the environment variable
7746	GetSMTP returns a config with the given environment .
7747	GetConfig returns the configuration for the given environment .
7748	GetEnvironment returns the environment for the environment
7749	GetMongo gets the mongo configuration
7750	TokenHandler returns an http . Handler for the given request .
7751	Receive receives a message from the server .
7752	Send sends a message to the server .
7753	allBoshReleaseNames returns a list of all the known releases .
7754	AddedProperty adds a new job to the delta job
7755	RemovedProperty removes a property from the delta .
7756	AddDeltaJob adds a delta job to the result .
7757	Concat adds the delta to the result .
7758	Read implements the ReadCloser interface .
7759	Pull pulls a release from the cache
7760	BuildJob builds a job
7761	LoadBoshRelease loads a git release .
7762	readBoshRelease reads a BoshRelease from r .
7763	readBoshRelease reads the GitRelease from r .
7764	readBoshJob reads a JsonRelease from the given io . Reader .
7765	NewRequest creates a new http . Request .
7766	PushCloudConfig pushes a cloud config to a cloud
7767	Generate generates an object from a file .
7768	CreateNewRecord creates a new record .
7769	NewShowCmd returns a new ShowCmd instance
7770	All implements the ShowCommand interface .
7771	GetDefaultTaskImageResource returns the default image resource
7772	AddRawJob adds a job to the queue .
7773	AddGroup adds a group to the queue
7774	GetResourceByName returns the ResourceConfig with the given name .
7775	AddRawResource adds a new resource to the queue
7776	AddResource adds a resource to the queue
7777	AddGithubResource adds a github resource to the queue
7778	AddBoshIORESource adds a new BoshIORESource .
7779	AddBoshDeploymentResource adds a new BoshDeployment resource
7780	AddGitResource adds a new git resource
7781	allJobNames returns a list of all job names for the job .
7782	NewDeploymentManifestFromFile returns a new DeploymentManifest instance
7783	NewDeploymentManifest returns a new Deployment
7784	AddRemoteRelease adds a release to the deployment
7785	AddRemoteStemcell adds a new Stemcell to the manifest
7786	Tag returns the tag for the given key .
7787	RemoveTag removes a tag from the manifest .
7788	LoadPivnetRelease loads a PIVnet release .
7789	FloshReleaseOrEmpty returns a new BoshReleaseOrEmpty instance
7790	readPivnetRelease reads the contents of the given file .
7791	decodeYaml decodes a YAML into an io . Reader
7792	NewZipWalker creates a new ZipWalker
7793	NewDiffCmd returns a new DiffCmd .
7794	All implements the DiffCommand interface .
7795	Job implements the DiffCommand interface .
7796	New returns a new Differ .
7797	StructName returns the struct name for the record .
7798	TypeName returns the name of the record .
7799	NewTgzWalker returns a new Walker .
7800	NewBackoff creates a new Backoff .
7801	Reset resets the backoff duration .
7802	NewExponential returns a new Backoff .
7803	NewExponentialFullJitter returns a new BackoffFitter .
7804	NewLinear creates a new Backoff .
7805	GetLineSize returns the size of a line .
7806	GetMaxSize returns the maximum size of the line .
7807	compute compiles the output .
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get appsApp params
7813	WithContext adds the context to the get appsApp params
7814	WithHTTPClient adds the HTTPClient to the get appsApp params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary deserializes into a RouteWrapper instance
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete appsApp params
7821	WithContext adds the context to the delete appsApp params
7822	WithHTTPClient adds the HTTPClient to the delete appsApp params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch appsAppRoutes route params
7825	WithContext adds the context to the patch appsAppRoutes route params
7826	WithHTTPClient adds the HTTPClient to the patch apps .
7827	WithApp adds the app to the patch app .
7828	WithBody adds the body to the patch app .
7829	WithRoute adds the route to the patch app .
7830	WithTimeout adds the timeout to the post appsAppRoutes params
7831	WithContext adds the context to the post appsAppRoutes params
7832	WithHTTPClient adds the HTTPClient to the postAppRoutes params
7833	WithApp adds the app to the post app .
7834	WithBody adds the body to the postAppRoutes params
7835	WithTimeout adds the timeout to the put appsAppRoutes route params
7836	WithContext adds the context to the put appsAppRoutes route params
7837	WithApp adds the app to the put app .
7838	WithBody adds the body to the PutAppsRoutes route params
7839	WithRoute adds the route to the PutAppRoutes route params
7840	WithTimeout adds the timeout to the get appsAppRoutes params
7841	WithContext adds the context to the get appsAppRoutes params
7842	WithHTTPClient adds the HTTPClient to the get appsAppRoutes params
7843	WithApp adds the app to the get app .
7844	WithTimeout adds the timeout to the patch appsApp params
7845	WithContext adds the context to the patch appsApp params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch app params
7848	WithBody adds the body to the patch appsApp params
7849	WithTimeout adds the timeout to the put appsApp params
7850	WithContext adds the context to the put appsApp params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put appsApp params
7853	UnmarshalJSON handles deserialization of a Task .
7854	MarshalJSON implements the json . Marshaler interface .
7855	Validate validates this task
7856	GetRanges returns a list of IPv4 addresses
7857	WithTimeout adds the timeout to the get appsAppRoutes route params
7858	WithContext adds the context to the get appsAppRoutes route params
7859	WithHTTPClient adds the HTTPClient to the get appsAppRoutes route params
7860	WithApp adds the app to the get app .
7861	WithRoute adds the route to the get apps_AppRoutes route params
7862	New creates a new Functions .
7863	SetTransport sets the transport
7864	WithTimeout adds the timeout to the delete AppAppRoutesRoute params
7865	WithContext adds the context to the delete appsAppRoutes route params
7866	WithHTTPClient adds the HTTPClient to the DeleteAppRoutes route params
7867	WithApp adds the app to the delete app .
7868	WithRoute adds the route to the delete AppAppRoutes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a new StoreStore
7873	Close closes the store .
7874	SetBackend sets the backend
7875	Ring returns the ring
7876	GetLocalID returns the local ID
7877	GetListenAddr returns the address of the server .
7878	Start starts the RingGroupStore
7879	shutdownFinished shuts down the server .
7880	Stop stops the server .
7881	Exit terminates the server .
7882	SelfUpgrade is part of the server interface .
7883	SoftwareVersion returns the current software version
7884	Shutdown shuts down the store
7885	Rant returns a Rant model .
7886	Profile returns the profile for the given username .
7887	Search returns a list of Rant models .
7888	Return a Rant model .
7889	WeeklyRants returns a list of Rants
7890	getUserId returns the user id of a user .
7891	Shutdown shuts down the store .
7892	FExists checks if a file exists
7893	outbound is part of the MessageStream interface .
7894	parse parses the message stream .
7895	Group creates a Group
7896	Group returns all groups in the domain .
7897	GetGroup returns a Group by name .
7898	Reticence returns the string representation of a string .
7899	CheckPassword checks if the passed string is valid .
7900	CleanUrl clean up the URL
7901	NewParameter creates a new Parameter .
7902	MakeParams creates a new Params instance .
7903	Parse parses a list of parameters .
7904	Email returns the email address
7905	Forwarder creates a Forwarder .
7906	Forwarders returns a list of forwarders .
7907	GetForwarder returns a Forwarder for the given domain name .
7908	New creates a new CGP .
7909	EscapeCommaSeparated converts a string to a comma separated string .
7910	Alias returns an alias for the account name .
7911	Email returns the email address
7912	Aliases returns all aliases .
7913	RealName returns the name of the account .
7914	Email returns the email address
7915	Account returns a new account .
7916	Account returns a list of account accounts .
7917	Exists returns true if the domain exists .
7918	Aliases returns the list of aliases .
7919	Domain returns the domain name .
7920	Domains returns the list of domains .
7921	New returns a new ErrErr .
7922	Wrap wraps a WrapErr and returns an error .
7923	mergeIn merges the given message into a message .
7924	wrapErrStr returns the string representation of the error .
7925	ConcatArgs returns the string representation of a string .
7926	MailingList returns a new MailingList
7927	Subscriber creates a subscription .
7928	Subscribers returns a list of subscribed subscriptions .
7929	MailingLists returns a list of MailingLists
7930	NewByteKeyItem returns a pointer to a byte slice .
7931	CompareBytes compares two bytes .
7932	CompareInt compares two int values .
7933	Malloc returns a pointer to a mempool .
7934	Free frees memory .
7935	Stats returns a string representation of the mempool .
7936	FreeOSMemory frees the OS memory .
7937	Add implements the Segment interface .
7938	NewSegment creates a new segment .
7939	Assemble adds segments to the builder .
7940	CompareNodeTable compares two nodes .
7941	New returns a new NodeTable .
7942	Stats returns a string representation of the node .
7943	MemoryInUse returns the memory size of the node .
7944	Get returns the value for the given key .
7945	Update implements the NodeTable interface .
7946	Remove implements the NodeTable interface .
7947	Close closes the table .
7948	MemoryInUse returns the memory usage of the node .
7949	debugMarkFree returns the block size of the node .
7950	Seek implements the Seek interface .
7951	Next implements Iterator .
7952	Refresh refreshes the iterator .
7953	Close closes the iterator .
7954	NewIterator returns a new iterator .
7955	SeekFirst moves the iterator to the iterator .
7956	Next advances the iterator .
7957	Seek moves the iterator to the iterator .
7958	Keys returns the keys in the list .
7959	Remove removes a key from the list .
7960	Add adds a node to the list .
7961	NewWithConfig returns a new Skiplist .
7962	FreeNode frees a node .
7963	MakeBuf creates a new ActionBuffer .
7964	Size returns the size of the item .
7965	NewLevel returns a new random number based on a random number .
7966	Insert inserts an item into the sketch .
7967	Insert2 inserts an item into the sketch .
7968	Insert3 inserts a new node at the given index .
7969	Delete removes a node from the store .
7970	DeleteNode deletes a node .
7971	GetRangeSplitItems returns a list of all items in the range .
7972	Bytes returns a slice of bytes .
7973	ItemSize returns the size of the item .
7974	KVFromBytes returns the value of a KV .
7975	CompareKV compares two byte slices .
7976	Emit implements the EventController interface .
7977	UnregisterHandler removes a handler from the event controller .
7978	IsHandlerRegistered returns true if the handler is registered
7979	CompareNitro returns the value of the Nitro .
7980	DefaultConfig returns the default config .
7981	Delete implements the Writer interface .
7982	GetNode returns a node from the store .
7983	SetKeyComparator sets the key comparison .
7984	UseMemoryMgmt is used to set memoryMgmt
7985	NewWithConfig creates a new Nitro instance
7986	MemoryInUse returns the number of memory in memory .
7987	Close shuts down the database .
7988	NewWriter returns a new writer .
7989	SnapshotSize returns the size of the snapshot .
7990	Encode writes the snapshot to w .
7991	Decode decodes the snapshot from r .
7992	Open implements the Snapshot interface .
7993	CompareSnapshot compares two snapshots .
7994	GC GC .
7995	GetSnapshots returns a slice of snapshots
7996	MemoryInUse returns the number of bytes in memory .
7997	CompareBS compares two barrier sessions .
7998	Acquire returns a new barrier session .
7999	Release releases the barrier .
8000	FlushSession flushes the session .
8001	Apply implements the StatsReport interface .
8002	AddInt64 adds an int64 to the stat .
8003	AddUint64 adds a uint64 to the stat .
8004	Merge merges stats into stats .
8005	GetStats returns the stats report
8006	NewIterator returns a new Iterator .
8007	SeekFirst moves the iterator to the iterator .
8008	SeekWithCmp returns true if the iterator is in the iterator .
8009	Seek moves the iterator to the iterator .
8010	Valid returns true if the iterator is valid .
8011	Delete deletes the iterator .
8012	Next advances the iterator .
8013	Init initializes SkuM1Client
8014	FromURL converts URL into URL string .
8015	ToURL converts a folder to a URL
8016	Size returns the size of the TupleHeader .
8017	WriteTo implements io . WriterTo interface .
8018	Static returns a handler for the given directory .
8019	Read reads the configuration file .
8020	Del removes a key from the config .
8021	WriteTo writes the configuration file to disk .
8022	checkSection returns the section of the line .
8023	checkLine checks if the line is valid
8024	checkComment returns true if the comment is a comment .
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack implements the http . Handler interface .
8027	CloseNotify implements the http . Handler interface .
8028	DateFormat specifies the format for the given format .
8029	Logger creates a new http . HandlerFunc
8030	GetAvailableInventory returns the inventory for the given task collection .
8031	Expiration sets the expiration time .
8032	Claimer sets the claimer for the given claims .
8033	Issuer specifies the issuer to use .
8034	User returns a TokenOpt .
8035	Password returns a TokenOpt .
8036	Extractor returns a TokenOpt from the request .
8037	TokenGenerator returns an http . Handler for the given token .
8038	Token returns the token for the request
8039	Claims returns the claims for the request
8040	String returns the string representation of the token .
8041	NewLexer creates a new Lexer .
8042	run runs the lexer .
8043	emit emits a token .
8044	skipWhitespace skips whitespace .
8045	next returns the next rune .
8046	LineNum returns the number of lines .
8047	Offset returns the offset of the current line .
8048	errorf implements the ErrorFunc interface .
8049	lexText consumes the next token .
8050	lexComment consumes a comment .
8051	New creates a new TupleType .
8052	AddVersion adds a version to the TupleType .
8053	Contains returns true if the given field exists .
8054	Offset returns the offset of the given field .
8055	Versions returns the version of the TupleType .
8056	SetPrivateMeta sets the PrivateMeta field s value .
8057	SetPublicMeta sets the PublicMeta field s value .
8058	GetRedactedVersion returns the Redacted version .
8059	Equal returns true if two tasks are equal .
8060	HTTP returns an http . Handler for the given verb .
8061	PutUint8 adds a uint8 to the buffer .
8062	PutInt8 adds an int8 to the buffer .
8063	PutUint16 inserts a uint16 value into a uint16 .
8064	PutInt16 inserts an int16 into a TupleBuilder .
8065	PutUint32 writes a uint32 to the buffer .
8066	PutInt32 adds an int32 to the buffer .
8067	PutUint64 adds a uint64 to the buffer .
8068	PutInt64 adds an int64 to the buffer .
8069	NewPackageList returns a new PackageList
8070	PutFloat32 adds a float32 to the buffer .
8071	Classic returns a new ClassicMartini instance
8072	Languages returns an Option that sets the language tags .
8073	Session sets the session .
8074	Context returns the current context value .
8075	URL returns the URL for the given prefix .
8076	Size returns the size of the size .
8077	GetRequestIDFromTaskResponse returns the request ID for the given task .
8078	PutString adds a string to the TupleBuilder .
8079	LoadDirectory loads directory from directory .
8080	LoadFile loads a package from a file .
8081	LoadPackage loads a package .
8082	NewDecoder returns a new decoder .
8083	NewDecoderSize returns a new DecoderSize .
8084	Panic returns an http . Handler that panics .
8085	DeployVApp is part of the VCloud interface .
8086	UnDeployVApp is part of the VCloud interface .
8087	Auth implements the FakeVClient interface .
8088	QueryTemplate is part of the VCloud interface .
8089	NewEncoder returns a new Encoder .
8090	Getter returns a Option that sets the given function .
8091	Setter sets the given nonce .
8092	Age sets the age of the options .
8093	Nonce returns an http . Handler for the given handler .
8094	NonceValueFromRequest returns a NonceStatus from the request context
8095	StoreNonce stores nonce .
8096	PutFloat32Array adds an array of float32 to the buffer .
8097	PutFloat64Array adds a float64 array to be encoded .
8098	Do executes a request .
8099	NewLease creates a new Lease
8100	Delete deletes the given task .
8101	Post creates a new lease
8102	ReStock returns the current state of the lease .
8103	Procurement returns the current state of the lease .
8104	InitFromHTTPRequest initializes the lease .
8105	Is returns true if the TupleType is the same .
8106	Offset returns the offset of the given field .
8107	WriteTo implements io . WriterTo interface .
8108	PutTuple adds the given field to the TupleBuilder .
8109	WriteString writes the given content as a string .
8110	NotFound writes a 404 message .
8111	Run starts the agent .
8112	NewWaitGroup creates a new WaitGroup .
8113	Add adds the queue to the queue .
8114	Wait blocks until the queue has completed .
8115	Gzip adds a new http . Handler to the http . Handler .
8116	New returns a new InnkeeperClient .
8117	Error writes the response with status code .
8118	Rendererer creates a new Render with the given options .
8119	NewClient creates a new PDU client
8120	GetTask gets a task by ID
8121	WriteImageToHTTP writes an image to w .
