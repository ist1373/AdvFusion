0	Close closes the query .
1	Exec executes the query .
2	contextDone is part of the context . Context interface .
3	NewEngine creates a new engine .
4	NewInstantQuery creates a new query .
5	NewRangeQuery creates a new query query .
6	exec executes the query .
7	umulativeSubqueryOffset returns the number of subquery offsets .
8	extractFuncFromPath extracts the path from the AST .
9	errorf implements evaluator .
10	recover is used to recover an error .
11	dropMetricName is used to drop a metric name
12	signatureFunc returns the signature function for the given function .
13	evalSubquery evaluates a subquery .
14	vectorSelectorSingle returns the value of a vector .
15	signatureFunc returns a function that returns a function that returns a function that returns a function that can be used to sign the given label .
16	VectorscalarBinOp returns a VectorBoolBinop .
17	scalarBinop returns the scalar of scalar .
18	shouldDropMetricName returns true if the item type is dropped .
19	NewEndpoints creates a new Endpoints .
20	calcTrendValue calculates the value of a trend value .
21	LinearRegression computes the slope of the given point .
22	dateWrapper is a helper function that returns a slice of values .
23	getFunction returns the function named by name .
24	Validate validates the ServiceDiscoveryConfig
25	Dedupe creates a new Deduper instance
26	Log implements the Logger interface .
27	Start starts the gate .
28	New returns a new Discovery instance .
29	ApplyConfig is part of the Handler interface .
30	isReady returns true if the handler is ready .
31	New creates a new http . FileSystem .
32	UnmarshalJSON handles deserialization of a TagValue .
33	Write writes the samples to the client
34	mergeSamples merges two samples .
35	Describe is part of the Client interface .
36	NewDiscovery creates a new discovery instance
37	newAuthTokenRoundTripper creates a new http . RoundTripper
38	newAuthTokenFileRoundTripper creates a new http . RoundTripper
39	isContainerNet returns true if the app is containernet
40	fetchApps returns a list of apps .
41	randomAppsURL returns a random URL for a list of apps .
42	apples target group
43	extractPortMapping extracts the port mapping of a port mapping
44	Load loads the configuration from the given string .
45	LoadFile loads a YAML file
46	resolveFilepaths resolves the filepaths in the given directory .
47	isZero returns true if the global config is zero .
48	CheckTargetAddress validates the target address
49	NewDiscovery creates a new Discovery .
50	shouldWatch returns true if the given name is watching .
51	shouldWatchFromName returns true if the discovery service has been watched .
52	getDatacenter returns the datacenter s datacenter
53	initialize initializes discovery .
54	watchServices is used to watch services .
55	watchService starts a service .
56	NewPod creates a new pod .
57	NewMatcher creates a new Matcher .
58	Matches returns true if the given string matches the given string .
59	SpanOperation returns the string representation of the query .
60	NewQueryStats returns a new QueryStats instance
61	NewDiscovery returns a new discovery .
62	UnmarshalYAML implements the json . Unmarshaler interface .
63	Hash returns the hash of the labels .
64	HashForLabels returns the hash of the given labels .
65	Copy returns a copy of the labels .
66	Get returns the value of the label
67	Has returns true if the label exists
68	Equal compares two labels .
69	Map returns a map of labels
70	New returns a new set of labels .
71	FromStrings converts strings to a slice of strings
72	NewBuilder creates a new builder .
73	Del deletes the given namespace .
74	Labels returns a list of labels .
75	NewStorage creates a new storage instance .
76	ApplyConfig applies the given config to the storage .
77	Querier creates a new Quer .
78	Close closes the storage .
79	RateLimit creates a new log limit .
80	newHypervisorDiscovery returns a HypervisorDiscovery .
81	New creates a new instance of the API .
82	RegisterGRPC registers a grpc server
83	HTTPHandler creates a http . Handler for the given grpc endpoint .
84	extractTimeRange extracts a time range from a given range .
85	Write implements io . Writer
86	Close closes the response writer .
87	newCompressedResponseWriter creates a new compressed response writer .
88	AlertTemplateData returns an instance of AlertData
89	Funcs adds a function to the template map .
90	ExpandHTML expands template files .
91	NewTarget creates a new Target
92	Metadata returns the metadata for the given metric .
93	hash returns the hash of the target target .
94	offset returns the offset of the target target .
95	Labels returns a list of labels .
96	DiscoveredLabels returns the labels for the target target .
97	SetDiscoveredLabels sets the discovered labels .
98	URL returns the URL for the target target .
99	LastError returns the last error
100	LastScrape returns the last recorded time .
101	LastScrapeDuration returns the last scrape duration
102	Health returns the health of the target target .
103	targetFromGroup returns a slice of targets from the target group .
104	FromTime converts time to time . Time .
105	Time converts a timestamp to a time . Time .
106	SetCORS sets the CORS header
107	Store writes data to the client
108	Name returns the name of the client .
109	Read implements prometheus . Client .
110	NewDiscovery creates a new discovery instance
111	createAzureClient creates azure client
112	newAzureResourceFromID creates a new azure resource .
113	String returns the string representation of the Timer .
114	Swap swaps the current timestamps .
115	String returns a string representation of TimerGroup
116	RegisterAdminHandler registers a gRPC client .
117	ParseExpr parses an expression .
118	ParseMetric parses a string and returns a labels .
119	ParseMetricSelector parses a list of labels .
120	newParser returns a new parser .
121	parseExpr parses an expression .
122	parseSeriesDesc parses a series of series descriptions .
123	typecheck returns the type of the given node .
124	next returns the next item .
125	peek returns the next item .
126	Errorf logs an error message .
127	error implements the parser interface .
128	expect returns the next item .
129	expectOneOf checks if the given item is a single item .
130	recover panics if err is nil .
131	expr returns an expression .
132	number parses the given value .
133	expectType asserts that the given value is a type .
134	Appender returns an appender .
135	Add adds a timestamp to the tracker
136	AddFast adds a metric to the tracker .
137	Commit commits the timestamp .
138	Add adds a new metric to the list .
139	Lint returns a list of problems .
140	lint returns a list of the given MetricFamily .
141	lintHelp returns a list of problems for the metric family .
142	lintMetricUnits returns a list of valid metric units .
143	lintCounter returns an error if the metric family does not exist .
144	Write writes samples to the client .
145	New creates a new pool .
146	Get returns the bucket with the given size .
147	Put puts a slice into the pool .
148	TotalSamples returns the total number of samples .
149	Vector returns the vector .
150	Scar returns the scalar value .
151	NewDiscovery creates a new discovery instance
152	NewQueueManager creates a new QueueManager .
153	Append appends the given series to the queue .
154	Start starts the queue
155	Stop stops the storage manager .
156	StoreSeries stores the series in the queue .
157	processExternalLabels processes external labels .
158	start starts a goroutine .
159	stop stops the shards .
160	enqueue adds a queue to the shards .
161	sendSamplesWithBackoff sends a batch of samples to a batch .
162	New returns a new Discovery instance
163	compileCORSRegexString creates a regexp from a string .
164	computeExternalURL computes the URL for the given URL .
165	sendAlerts sends alerts to a notification .
166	Validate validates this RuleGroups
167	Validate validates this rule
168	Parse parses the content of the given content .
169	ParseFile parses the given file and returns it .
170	TableLinkForExpression returns the URL for the given expression .
171	GraphLinkForExpression returns the URL for the given expression .
172	NewFanout returns a new instance of Fanout .
173	Close closes the fanoutines .
174	NewMergeQuer creates a new Quer .
175	Select returns a new seriesSet .
176	LabelValues returns the list of labels for the query .
177	LabelNames returns a list of labels for the query .
178	Close closes all queues
179	NewAlertingRule creates a new AlertingRule .
180	SetLastError sets the last error
181	LastError returns the last error
182	SetHealth sets the health policy
183	Health returns the health check .
184	for state
185	SetEvaluationDuration sets the evaluation duration
186	GetEvaluationDuration returns the evaluation duration
187	State returns the current state .
188	ActiveAlerts returns a list of alert alerts
189	currentAlerts returns a list of alerts .
190	refreshTargetGroups refreshes the target group .
191	writeOutput writes the output to disk .
192	Run starts the adapter .
193	NewAdapter creates a new Adapter
194	NewGroupMetrics returns a new Metrics
195	EngineQueryFunc returns a QueryFunc that returns a QueryFunc .
196	NewGroup creates a new Group
197	GetEvaluationDuration returns the evaluation duration
198	setEvaluationDuration sets the evaluation duration
199	GetEvaluationTimestamp returns the evaluation time .
200	setEvaluationTimestamp sets the evaluation timestamp .
201	evalTimestamp returns the timestamp of the group .
202	CopyState copies the rule into the group .
203	NewManager creates a new Manager
204	Stop stops the manager .
205	Update updates the rules for the given files .
206	LoadGroups loads groups from a file .
207	RuleGroups returns a slice of GroupGroups .
208	Rules returns all rules .
209	AlertingRules returns a list of alerting rules .
210	Collect collects metrics .
211	NewWALWatcher creates a new WALWatcher .
212	Start starts a watcher .
213	Stop stops the WALWatcher
214	findSegmentForIndex returns the index for the given index .
215	watch is used to watch .
216	readCheckpoint reads the checkpoint directory for the given checkpointDir .
217	getSegmentSize returns the size of a segment .
218	Printf logs a message
219	NewZookeeperTreeCache creates a new ZookeeperTreeCache .
220	NewManager creates a new manager
221	Name sets the name of the manager .
222	Run starts the manager .
223	ApplyConfig applies the given config to the manager .
224	StartCustomProvider starts a new provider
225	Run is part of the StaticProvider interface .
226	NewNerveDiscovery creates a new Discovery instance
227	NewServersetDiscovery creates a new Discovery instance
228	NewDiscovery creates a new Discovery structure
229	FuzzParseMetricSelector returns the number of samples in the given byte slice .
230	FuzzParseExpr parses a string and returns the number of bytes .
231	FuzzParseStmts parses a string and returns the number of bytes .
232	NewManager returns a new Manager .
233	Run starts the manager .
234	setJitterSeed sets the jitter for the given labels .
235	Stop stops the manager .
236	ApplyConfig applies the given config .
237	TargetsAll returns all the targets in the pool .
238	TargetsActive returns a map of active targets
239	TpsetsDropped returns a map of tracked targets
240	getFqdn returns the name of the Fqdn .
241	tagsFromMetric returns a map of tags for the given metric .
242	Write writes data to the client
243	QueryableClient returns a queryable .
244	Select is used to select a series .
245	ExternalLabelsHandler returns a Queryable .
246	Select is used to select a set of labels .
247	PrefferLocalStorageFilter returns a Queryable filter that can be used to query the next time .
248	RequiredMatchersFilter returns a Queryable filter that can be used to query the query .
249	Select selects a selectors from the query .
250	add external labels
251	newInstanceDiscovery returns a new instance of InstanceDiscovery
252	ResolvedAt returns true if the given timestamp is reached .
253	NewManager returns a new Manager .
254	ApplyConfig applies the given configuration to the manager .
255	Run starts a goroutine .
256	Send sends alerts to the manager .
257	Alertmanagers returns the list of alerts for alerts .
258	DroppedAlertmanagers returns the list of alerts that were dropped .
259	sendAll sends alerts to all alerts
260	Stop stops the manager .
261	sync synchronizes all alerts from the target group
262	alertManagerFromGroup builds a list of alerts from the target group .
263	String returns the string representation of the item .
264	isAggregatorWithParam returns true if the item is aggregator .
265	isComparisonOperator returns true if the item type is equal .
266	isSetOperator returns true if the item is set .
267	provision returns the highest priority .
268	next returns the next rune .
269	peek returns the next rune .
270	emit emits an item from the lexer .
271	linePosition returns the line position of the line .
272	nextItem returns the next item .
273	lex creates a new lexer .
274	lexInsideBraces parses a string and returns a lexicode . Token .
275	lexValueSequence parses a sequence sequence sequence .
276	digitVal returns the number of digits .
277	lexString consumes a string .
278	lexSpace scans a space .
279	lexLineComment consumes a line comment .
280	lexNumberOrDuration consumes a number of characters from a string .
281	scanNumber scans the number of characters .
282	lexIdentifier lexifier lexifier .
283	lexKeywordOrIdentifier parses a key - value pair .
284	isLabel returns true if s is a label .
285	Series returns the series of series .
286	Type returns the number of bytes .
287	nextToken returns the next token .
288	NewAPI creates a new instance of Query .
289	mergeLabels merges two labels .
290	Set implements storage . Storage interface .
291	Get returns the ready storage .
292	Querier implements storage . Storage interface .
293	Appender implements Storage .
294	Close closes the storage storage .
295	Adapter returns a storage adapter .
296	Open creates a new DB .
297	Appender returns an appender .
298	NewRegexp creates a Regexp from a string .
299	MustNewRegexp returns a new Regexp with the given string .
300	Process returns the labels for the given Config .
301	sum64 returns the sum of the hash .
302	stop stops the pool .
303	reload refreshes the pool .
304	Sync syncs all targets
305	sync synchronizes all targets in the pool .
306	appender creates a new appender .
307	Uname returns the name of the system .
308	DecodeReadRequest decodes the request body from the request .
309	EncodeReadResponse writes the response to w .
310	ToQuery creates a prometheus query .
311	FromQuery returns the query from the query .
312	ToQueryResult returns a prometheus query .
313	FromQueryResult converts a prometheus query into a SeriesSet .
314	Seek moves the cursor to the next time .
315	At returns the value at the current time .
316	Next returns true if the iterator is next .
317	NewBufferIterator creates a new BufferedSeriesIterator .
318	Reset resets the iterator .
319	ReduceDelta reduces the delta to the buffer .
320	PeekBack returns the next value in the buffer .
321	Seek attempts to seek to the next time .
322	Next returns true if the next series is next .
323	iterator returns a new iterator .
324	reduceDelta reduces the given delta to the ring .
325	nthLast returns the last nth element in the ring .
326	next returns the next token .
327	Unit implements the OpenMetricsParser interface .
328	Metric returns the metrics for the given series .
329	coalceBuckets returns a subset of buckets .
330	Collect implements the Collector interface .
331	NewTimestampCollector returns a new TimestampCollector
332	NewDiscovery returns a new Discovery instance
333	listFiles returns a list of all files in the directory .
334	watchFiles starts watching files .
335	stop stops the discovery discovery .
336	refresh is used to refresh all files .
337	readFile reads a file from a file
338	fileSource returns a string representation of a file .
339	NewRecordingRule creates a new RecordingRule .
340	Eval evaluates the recording rule
341	SetEvaluationDuration sets the evaluation duration
342	SetLastError sets the last error
343	LastError returns the last error
344	SetHealth sets the health check .
345	Health returns the health check .
346	GetEvaluationDuration returns the evaluation duration
347	HTMLSnippet returns a HTML snippet .
348	rate returns the rate of the rate .
349	tick is used to tick the interval
350	incr increments the number of events .
351	NewNode creates a new Node .
352	CheckConfig checks if the file is valid
353	CheckRules checks if files are valid
354	CheckMetrics implements prometheus . CheckMetrics .
355	QueryInstant runs the given query and returns the result .
356	QueryRange is used to query a range of time .
357	QuerySeries returns the series for the given URL .
358	QueryLabels returns the labels for the given URL .
359	UnmarshalJSON handles deserialization of a Group .
360	NewStreamReader returns a new io . ReadCloser
361	StatusMessage returns the string representation of the status code .
362	CopyTo copies the Args to dst .
363	Parse parses a string .
364	ParseBytes parses a byte slice .
365	QueryString returns the query string .
366	AppendBytes appends a slice of args to dst .
367	WriteTo implements io . WriterTo interface .
368	Del deletes the given key .
369	DelBytes removes a key from the slice .
370	Add adds a new value to the list .
371	AddBytesK adds a key to the array .
372	AddBytesKV adds a key to the Args .
373	AddNoValue adds a key to the list .
374	AddBytesKNoValue adds a key to the array .
375	Set sets the value for the given key .
376	SetBytesV sets the value for the given key .
377	SetBytesKV sets the value of a key
378	SetNoValue sets the value for the given key .
379	SetBytesKNoValue sets the value of a key .
380	Peek returns the next key .
381	PeekBytes returns the value of a key .
382	PeekMulti returns a slice of values
383	PeekMultiBytes implements the Args interface for Args .
384	Has returns true if the given key exists
385	HasBytes returns true if the given key exists .
386	GetUint returns the value of a given key .
387	SetUint sets the value of the given key .
388	SetUintBytes sets the value for a given key .
389	GetUfloat returns the value of a given key .
390	GetBool returns a bool indicating whether the key is a bool .
391	decodeArgAppendNoPlus returns a slice of bytes from src .
392	AppendHTMLEscape appends a string to dst .
393	AppendIPv4 appends ipv4 to dst .
394	ParseIPv4 parses an IPv4 string and returns an IPv4 address .
395	ParseUint parses a uint value from buf .
396	ParseUfloat parses a float64 from buf .
397	AppendQuotedArg appends a quoted string to dst .
398	CopyTo copies the dst to dst .
399	SetHash sets the hash of the URI .
400	SetHashBytes sets the hash of the URI .
401	SetQueryString sets the query string
402	SetQueryStringBytes sets the query string .
403	SetPath sets the path to the given path .
404	SetPathBytes sets the path to the given path .
405	SetScheme sets the scheme of the URI .
406	SetSchemeBytes sets the scheme of the URI .
407	Reset resets the URI .
408	SetHost sets the host name
409	SetHostBytes sets the host byte slice
410	RequestURI returns the request URI .
411	AppendBytes appends the destination URI to the request .
412	WriteTo implements io . WriterTo interface .
413	NewWriter creates a new writer .
414	NewPipeConns creates a new PipeConns .
415	Close closes the PipeConns .
416	LastUseTime returns the last time in the host .
417	AcquireRequest returns a new request .
418	AcquireResponse returns a response from the pool
419	DoDeadline is part of the LBClient interface .
420	DoTimeout sends a request to the server .
421	Do executes the given request .
422	Serve starts a new Serve .
423	ServeTLS implements the ServeTLS interface .
424	ServeTLSEed is used to serve TLS requests
425	ListenAndServe listens on the given address .
426	ListenAndServeUNIX is like ListenAndServe but accepts a Unix socket .
427	ListenAndServeTLS is like ListenAndServeTLS
428	ListenAndServeTLSEmbed listens on a TLS server .
429	TimeoutHandler creates a request handler for the given timeout .
430	TLSConnectionState returns the TLS connection state .
431	String returns a string representation of the request .
432	SetContentType sets the content of the request .
433	SetContentTypeBytes sets the content of the request .
434	FormFile returns the form of a multipart form
435	SaveMultipartFile saves a multipart file
436	RemoteAddr returns the remote address of the request .
437	Error implements the http . Handler interface .
438	Success sets the response body
439	SuccessString sets the response body
440	IfModifiedSince returns true if the request is modified .
441	NotFound implements the http . Handler interface .
442	Write writes data to the request .
443	WriteString writes a string to the request .
444	Logger returns a new logger .
445	NextProto adds a new route to the server .
446	ListenAndServe listens on the given address .
447	ListenAndServeUNServe listens on a Unix socket .
448	ListenAndServeTLS is like ListenAndServe but accepts a TLS connection .
449	ListenAndServeTLSmbed listens on a TLS server .
450	ServeTLS implements the Server interface for Server .
451	ServeTLSEmbed serves TLS certificates
452	AppendCertEmbed adds a certificate to the server .
453	Serve starts the server .
454	Shutdown shuts down the server .
455	WriteGzip writes data to w .
456	WriteGunzip writes data to w .
457	AppendGunzipBytes appends src to dst .
458	WriteDeflate writes data to w .
459	WriteInflate writes data to w .
460	AppendInflateBytes appends src to dst .
461	SetRequestURI sets the request URI
462	SetRequestURIBytes sets the RequestURIBytes field s value .
463	RequestURI returns the request URI .
464	SendFile sends a file to the response .
465	BodyWriter returns the body of the response .
466	BodyWriter returns the body of the request .
467	Body returns the body of the response body .
468	BodyWriteTo implements io . WriterTo interface .
469	BodyWriteTo implements io . WriterTo interface .
470	AppendBodyString appends a string to the response body .
471	SetBodyString sets the body of the response body
472	ResetBody resets the body .
473	SetBodyRaw sets the body of the response body .
474	ReleaseBody releases the body .
475	ReleaseBody is part of the Request interface .
476	SwapBody swaps the body of the body .
477	SwapBody swaps the body of the request .
478	Body returns the body of the request .
479	AppendBodyString appends a string to the request .
480	SetBodyString sets the body of the request .
481	ResetBody resets the body of the request .
482	CopyTo implements the CopyTo interface .
483	CopyTo implements the CopyTo interface .
484	WriteMultipartForm writes a multipart form .
485	Reset resets the response body .
486	Read limit body
487	WriteTo implements io . WriterTo interface .
488	WriteTo implements io . WriterTo interface .
489	Write writes the request to w .
490	Write writes the response to w .
491	SetLastModified sets the last modified timestamp .
492	PeekCookie gets the value of a cookie
493	ContentType returns the content of the response header .
494	SetServer sets the server header
495	SetServerBytes sets the server s bytes .
496	Host returns the host header
497	SetHost sets the host header
498	SetHostBytes sets the host header
499	SetUserAgent sets the user agent .
500	SetUserAgentBytes sets the UserAgentBytes field of the request header .
501	Method returns the request header .
502	SetMethod sets the method of the request header .
503	SetMethodBytes sets the method of the request header .
504	RequestURI returns the request URI .
505	SetRequestURI sets the request URI .
506	SetRequestURIBytes sets the RequestURIBytes optional argument .
507	HasAcceptEncoding returns true if the request header is acceptable .
508	HasAcceptEncodingBytes returns true if the given AcceptEncodingBytes matches the provided AcceptEncodingBytes .
509	Len returns the number of elements in the response .
510	Reset resets the response header .
511	SetCookie sets cookie
512	DelClientCookie deletes a cookie
513	DelCookie removes a cookie
514	DelCookie removes a cookie
515	DelAllCookies deletes cookies
516	Peek returns the next key .
517	PeekBytes returns the next byte slice .
518	Cookie returns the value for the given key .
519	CookieBytes returns the byte slice for the given key .
520	Cookie returns true if the cookie is a cookie
521	Read implements io . Reader .
522	Header returns the header of the response header .
523	AppendBytes appends the response header to dst .
524	Write writes the header to w .
525	WriteTo implements io . WriterTo interface .
526	Header returns the header of the request header .
527	AppendBytes appends the request header to dst .
528	ServeFileUncompressed writes a file to the request .
529	NewRequestHandler returns a new RequestHandler .
530	FileLastModified returns the time of a file .
531	CopyTo copies the cookie to the given source .
532	SetPath sets the path to the cookie
533	SetPathBytes sets the path to the cookie
534	SetDomain sets the domain
535	SetDomainBytes sets the domain bytes .
536	Expire returns the expiration time .
537	SetValue sets the value of the cookie
538	SetValueBytes sets the value of the cookie
539	SetKey sets the key .
540	SetKeyBytes sets the key for the cookie
541	Reset resets the cookie
542	AppendBytes appends a cookie to dst .
543	Cookie returns a copy of the cookie
544	WriteTo implements io . WriterTo interface .
545	Parse parses a string into a cookie .
546	ParseBytes parses a byte slice into a cookie .
547	appendResponseCookieBytes appends the cookies to the given bytes .
548	AcquireTimer returns a new timer .
549	Accept implements net . Conn .
550	Close closes the connection .
551	FileServer adds a path to the router
552	Reset resets the current route .
553	URLParam returns the URL parameter for the given key .
554	URLParam returns the URL parameter for the given key .
555	URLParamFromCtx returns the URL param for the given key .
556	Add adds a new route to the route params
557	ServerBaseContext creates a new http . Handler for the given context .
558	GetHead returns a new http . Handler for the request .
559	Ping sends a ping message
560	StripSlashes returns an http . Handler for the given route .
561	AllowContentType returns an http . Handler for the given content type .
562	GetReqID returns the request ID
563	HandlerFunc creates a new middleware middleware .
564	chain returns the middleware middleware for the middleware .
565	NewMux returns a new Mux .
566	ServeHTTP implements the Mux interface for Mux .
567	Use adds middleware to the middleware .
568	Handle registers a handler for mux .
569	HandleFunc registers a handler for the given pattern .
570	Method registers a handler for the given pattern .
571	MethodFunc registers a new http . HandlerFunc
572	Connect registers a new Mux .
573	Delete is a handler for Mux .
574	Get is a handler for Mux .
575	Head is the handler for Mux .
576	Options registers a new options for the Mux .
577	Patch implements the Mux interface for Mux .
578	Post adds a route to the Mux .
579	Put implements the Mux interface for Mux .
580	Trace registers a new http . HandlerFunc
581	NotFound adds a handler to the middleware .
582	MethodNotAllowed implements the Mux interface for Mux .
583	With adds middleware to the middleware .
584	NotFoundHandler returns an http . HandlerFunc that implements Mux .
585	MethodNotAllowedHandler returns an http . HandlerFunc that implements Mux .
586	handle adds a route to the router .
587	routeHTTP is the handler for RouteHTTP .
588	updateSubRoutes is used to update the sub - routes .
589	methodNotAllowedHandler writes a response to the http . ResponseWriter
590	RequestLogger creates a new http . Handler for the request .
591	GetLogEntry returns the log entry for the request
592	WithLogEntry adds a new log entry to the request .
593	NewLogEntry returns a new LogEntry
594	ContentCharset returns a new http . Handler for the given charset .
595	contentEncoding returns true if the content of the content of the given content .
596	split splits a string into a string .
597	addChild adds a new child node to the node .
598	findRoute attempts to find the route matching the given path .
599	ArticleCtx is part of the http . Handler interface .
600	SearchArticles returns a list of articles .
601	CreateArticle creates a new Article .
602	GetArticle gets the article .
603	UpdateArticle updates an Article .
604	DeleteArticle deletes an Article .
605	adminRouter returns a new http . Router
606	AdminOnly is part of the http . Handler interface .
607	paginate returns a new http . HandlerFunc
608	init initializes the response .
609	NewCompressor creates a new Compressor
610	Handler returns a new http . Handler for the request .
611	selectEncoder selects the encoder for the given header .
612	DefaultCompress returns a new http . Handler with default compression
613	Throttle returns an http . Handler for the given limit .
614	ThrottleBacklog creates a new http . Handler for throttling .
615	ServeHTTP implements the http . Handler interface .
616	NewWrapResponseWriter returns a WrapResponseWriter .
617	Routes returns a router for the resource
618	NewAWSProvider creates a new AWS provider .
619	newChanges returns a new instance of AWSProvider .
620	matchableZones returns a list of available zones .
621	isAWSLoadBalancer returns true if the endpoint is aws load balancer
622	isAWSAlias returns the alias for the given endpoint .
623	canonicalHostedZone returns the canonicalized hostname for the given hostname .
624	NewTXTRegistry creates a new TXTRegistry .
625	Records returns all records in the cache .
626	NewDomainFilter creates a new DomainFilter
627	Match returns true if the given domain matches the given domain .
628	IsConfigured returns true if the filter is configured
629	InMemoryWithLogging configures the InMemoryProvider .
630	InMemoryInitZones creates a new instance of InMemoryProvider
631	NewInMemoryProvider creates a new InMemoryProvider
632	CreateZone creates a new zone
633	Zones returns a map of all zones
634	validateChangeBatch checks if the given zone is valid
635	NewZoneTagFilter creates a new ZoneTagFilter
636	Match returns true if the zone matches the given tags .
637	NewIngressSource creates a SourceSource .
638	Endpoints returns the endpoints of the ingressSource .
639	filterByAnnotations filters out ingress rules
640	endpointsFromIngress returns the endpoints for ingress .
641	NewLabelsFromString creates a new labels from a string
642	Serialize returns a string representation of the Labels
643	KubeClient creates a kube client
644	IstioClient creates a new instance of the SingiClient
645	ByNames returns a slice of SourceGenerator .
646	BuildWithConfig builds a Source from the given configuration .
647	NewKubeClient creates a new kubernetes client
648	NewCRDClientForAPIVersionKind returns a RESTClient for the Kubernetes API .
649	NewCRDSource creates a new crd source
650	Match returns true if the zone matches the given zone .
651	NewInfobloxProvider creates a new InfobloxboxProvider
652	ApplyChanges is part of the interface .
653	NewServiceSource creates a new SourceSource .
654	Endpoints returns the endpoints of the service .
655	endpoints returns the endpoints of the service .
656	filterByAnnotations returns a list of services that match the provided annotations .
657	filterByServiceType filters services by serviceType .
658	Calculate returns a new plan .
659	NewExoscaleProvider creates a new ExoscaleProvider
660	ExoscaleWithLogging creates a new ExoscaleOption .
661	NewLinodeProvider creates a new LinodeProvider
662	NewTargets creates a new Targets
663	Same compares two targets .
664	IsLess returns true if the targets are equal .
665	NewEndpoint creates a new Endpoint
666	NewEndpointWithTTL returns a new Endpoint instance
667	GetProviderSpecificProperty returns the ProviderSpecificProperty for the given key .
668	Match returns true if the given zoneID matches the given zoneID .
669	ValidateConfig validates config
670	CreateRecord creates a new DNS record .
671	DeleteRecord deletes a record .
672	UpdateRecord updates a DNS record .
673	GetZone returns the zone for the given zone .
674	ListZones lists all zones .
675	Records returns a list of endpoint records .
676	ns1BuildRecord creates a new DNS record .
677	ns1SubmitChanges is used to submit a set of changes .
678	newNS1Changes returns a new instance of NS1 .
679	ns1ChangesByZone returns a map of names for the given zone .
680	All log levels
681	Apply applies the changes to the policy .
682	RunOnce is part of the Controller interface .
683	Run starts the controller .
684	NewCloudFlareProvider creates a new CloudFlareProvider
685	newCloudFlareChanges returns a list of cloudFlare changes
686	GetAccountID returns the account ID
687	NewDnsimpleProvider creates a new DnsimplementsProvider
688	Zones returns a map of zones
689	Records returns a list of all the DNS records .
690	newDnsimpleChange creates a new dnsimplementChange object
691	newDnsimpleChanges returns a list of dnsimplements
692	submitChanges is used to submit a set of records .
693	GetRecordID returns the record ID for the given zone .
694	dnsimplementsZone returns the zone for the given hostname .
695	CreateRecords creates a new dnsimplements
696	DeleteRecords deletes records from the specified endpoint .
697	UpdateRecords updates the records for the given endpoint .
698	ApplyChanges applies the changes to the given configuration .
699	NewGoogleProvider creates a Google CloudProvider
700	Records returns all records in the Google CloudProvider .
701	newFilteredRecords returns a list of DNS records for the given endpoint .
702	submitChange is used to submit a change .
703	separateChange returns a map of changes to the given zone .
704	newRecord creates a new DNS record set .
705	NewRcodeZeroProvider creates a new RcodeZero provider
706	Zones returns a list of all the zones .
707	Records returns a list of records for the given zone .
708	submitChanges is used to submit a set of changes
709	NewRcodezeroChanges returns a new RcodeZeroChange .
710	NewRcodezeroChange creates a new RRCetChange .
711	NewAlibabaCloudProvider creates a new Amazon CloudCloudProvider .
712	recordsForDNS returns a list of DNS records for the given domain .
713	private zone records
714	SaveService saves a service .
715	DeleteService deletes a service
716	newTLSConfig creates a new TLS config .
717	getETCDConfig returns a new etcd config
718	newETCDClient returns a new etcd client
719	NewCoreDNSProvider returns a new instance of CoreDNSProvider
720	Records returns a list of endpoint records .
721	NewRfc2136Provider creates a new rfc2136 provider
722	stringifyHTTPResponseBody returns the body of the response body .
723	NewPDNSProvider creates a new PDNSProvider .
724	mutateRecords is used to update a set of zones
725	NewAWSSDProvider creates a new AWSSDProvider
726	newSdNamespaceFilter returns a new SdNamespaceFilter
727	Records returns all instances of the AWS CloudSSDProvider
728	ApplyChanges is part of the AWS APIProvider interface .
729	ListNamespaces returns a list of namespaces .
730	GetServiceDetail retrieves a service .
731	ListInstancesByServiceID lists all instances of the specified service .
732	CreateService creates a new service
733	UpdateService updates the service
734	RegisterInstance registers a new service
735	DeregisterInstance deregisters a service
736	targetToInstanceID returns the string representation of the AWSSDProvider
737	matchingNamespaces returns a list of namespaces matching the given hostname .
738	 routing policy
739	isAWSLoadBalancer returns true if the given hostname is aws .
740	ResolveUpdate returns a new endpoint with the given options .
741	Less returns true if the given endpoint is less than equal .
742	NewDigitalOceanProvider creates a new DigitalOceanProvider
743	newDigitalOceanChange returns a new DigitalOceanChange .
744	getRecordID returns the ID of the domain .
745	digitalOceanChangesByZone returns a map of domain names for the given zone .
746	legacyEndpointsFromService returns a slice of Endpoints from a service .
747	legacyEndpointsFromMateService returns a slice of Endpoints from a service .
748	legacyEndpointsFromMoleService returns the endpoints for the given service .
749	getTargetsFromTargetAnnotation returns a list of targets associated with the given annotations .
750	acceptableType returns the name of the record .
751	endpointsForHostname returns the endpoints for the given host name .
752	NewDynProvider returns a new instance of DynProvider .
753	endpointToRecord converts an endpoint to an endpoint .
754	fetchAllRecordsInZone fetches all records in the zone .
755	Zones returns a list of all zones .
756	replaceRecord replaces the record with the given endpoint .
757	commit is used to commit a zone
758	Endpoints returns the list of all the children
759	newDesignateClient returns a new DesignateClient
760	remapEnv removes the environment from the map
761	createDesignateServiceClient creates a new googlecloud client .
762	ForEachZone iterates over all zones .
763	ForEachRecordSet iterates over all records in the given zone .
764	CreateRecordSet creates a record set .
765	UpdateRecordSet updates the record set .
766	DeleteRecordSet deletes a record set .
767	NewDesignateProvider creates a new DesignateProvider .
768	canonicalizeDomainNames returns the canonical names of the domain names .
769	normalizeDomainName returns the name of the domain name .
770	getZones returns a map of zones
771	getHostZoneID returns the ID of the given hostname .
772	addEndpoint adds a new endpoint to the endpoint .
773	NewIstioGatewaySource creates a new SourceGatewaySource .
774	filter by annotations
775	endpointsFromGatewayConfig returns the endpoints for the given gateway configuration .
776	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpoint .
777	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointList .
778	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointSpec .
779	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointStatus .
780	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Endpoint .
781	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Labels .
782	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProviderSpecific .
783	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Targets .
784	ensureTrailingDot ensures that the hostname is valid .
785	NewNoopRegistry creates a new NoopRegistry .
786	ApplyChanges is part of the RegisterRegistry interface .
787	Endpoints returns the endpoints of the source .
788	NewFakeSource creates a new fake source .
789	CreateTLSConfig creates a tls config . Config .
790	NewAWSSDRegistry creates a new AWSSDRRegistry .
791	ApplyChanges applies the changes to the current state .
792	LoadOCIConfig loads OCIConfig from disk
793	NewOCIProvider creates a new OCI provider
794	ApplyChanges applies changes to the current configuration .
795	newRecordOperation creates a new record operation .
796	opsByZoneByZone returns a map of records for a given zone .
797	NewAzureProvider creates a new Azure provider
798	getAccessToken returns the access token for the given environment .
799	Create creates a new disk image
800	createDiskImage creates a disk image
801	Save saves the virtual network interface
802	SaveIPv4 saves the ipv4 configuration
803	createHOSTlyAdapter creates a hostless adapter
804	list all available adapters
805	removeOrphanDHCPServers removes an orphan DHCP server from the VBoxManager .
806	addHostOnlyDHCPServer adds a HHCPServer
807	listDHCPServers returns a map of dhcp servers
808	checkIPNetNetCollision returns true if the given IP addresses are equal .
809	NewDriverNotSupported creates a new DriverNotSupported .
810	DriverName returns the driver name
811	MustBeRunning is part of the Driver interface .
812	NewDriver creates a new driver
813	migrateStringToSlice converts a string to a slice of strings .
814	DockerClient creates a docker client
815	CreateContainer creates a container
816	cleanupResourceIfExists is used to cleanup resources
817	NewDriver creates a new driver
818	GetSSHername returns the SSH username
819	Start the VM
820	Stop stops the VM .
821	Restart a VM
822	Remove deletes the virtual machine
823	getCloudInit returns the cloud data for the user .
824	GenerateCACertificate generates an X509 certificate
825	GenerateCert generates an X509 certificate
826	ReadTLSConfig returns the TLS config for the given address .
827	ValidateCertificate validates a certificate
828	IsVTXDisabled returns true if the device is enabled .
829	NewVBoxManager returns a new VBoxManager
830	driverPath returns the path to the driver
831	AuthenticateDeviceFlow is used to authenticate the given application .
832	AuthenticateServicePrincipal authenticates a service principal .
833	tokenFromFile extracts the token from the given resource .
834	deviceFlowAuth is used to authenticate a user token .
835	tokenCachePath returns the path to the token cache
836	 tenant ID
837	mkTokenCallback creates a new tokenRefreshCallback .
838	NewFmtMachineLogger returns a new instance of FactoryLogger
839	newComputeUtil returns a new ComputeUtil .
840	disk returns the current disk .
841	deleteDisk deletes a disk
842	StaticAddress returns the static address for the given address .
843	Open all firewall ports
844	instance returns the instance of the instance .
845	configureInstance is used to configure a new instance
846	addFirewallTag adds a firewall tag to the cluster
847	uploadSSHKey uploads a ssh key
848	parseTags parses a list of tags .
849	startInstance starts the provisioner .
850	waitForOp waits for the operation to be executed .
851	waitForRegionalOp returns the operation for the given zone .
852	waitForGlobalOp waits for a global operation to be executed .
853	IP returns the IP address for the given instance .
854	cmdOutput returns the output of the command .
855	setVmwareCmd sets the Vmware command
856	RegisterResourceProviders registers resource providers
857	CreateResourceGroup creates a resource group
858	CleanupVirtualNetworkIfExists is part of the AzureClient interface .
859	CreateSubnet creates a subnet
860	CleanupAvailabilitySetIfExists is part of the AzureClient interface .
861	GetPublicIPAddress returns the public IP address
862	GetPrivateIPAddress returns the private IP address for the specified resource .
863	deleteResourceIfExists deletes a resource .
864	waitVMPowerState waits until the given VM is reached .
865	checkResourceExistsFromError returns true if the error occurred .
866	osDiskStorageBlobURL returns the URL for the specified volume .
867	osDiskStorageContainerURL returns the path to the storage container .
868	NewKeyPair returns a new KeyPair
869	Fingerprint returns the fingerprint of the keyPair .
870	GenerateSSHKey generates SSH keypair
871	loadOrFindTenantID returns the tenant ID for the given subscription ID .
872	findTenantID returns the tenant ID for the given subscription ID .
873	saveTenantID saves tenant ID
874	Send sends a crash report .
875	Create implements the Driver interface .
876	DriverName returns the driver name
877	GetCreateFlags returns the flags for the device
878	GetMachineName returns the name of the device
879	GetSSHHostname returns the SSH host name
880	GetSSHKeyPath returns the SSH key path
881	GetSSHername returns the SSH username
882	Kill the device
883	Remove removes the device
884	Start the driver
885	Stop stops the driver
886	MigrateHostV1ToHostV1 converts HostV1 to HostV1 .
887	MigrateHostMetadataV1 converts a HostMetadataV1 to a HostMetadataV1 .
888	getNameAndPid returns the name of the process .
889	NewDriver creates a new driver
890	SetConfigFromFlags sets g . Config
891	PreCreateCheck is used to create a new instance
892	Create creates a new host
893	GetIP returns the IP of the host
894	GetState returns the state of the driver
895	Start starts the driver
896	Stop stops the driver
897	Remove removes the remote instance .
898	NewDriver creates a new driver
899	SetConfigFromFlags sets the flags for the driver
900	PreCreateCheck creates a new virtual machine
901	Create creates a new resource
902	Remove deletes a resource
903	GetIP returns the IP address of the machine .
904	GetURL returns the URL of the host
905	GetState returns the state of the VM .
906	Start starts the VM .
907	Stop stops the VM .
908	Restart a VM
909	create creates a virtual machine .
910	streaming runs streaming .
911	NewDriver creates a new Driver
912	waitForIP waits for the host to be started .
913	waitStopped waits until the host is stopped .
914	Start the VM
915	Stop stops the VM .
916	Remove removes the VM .
917	generateDiskImage generates disk image image .
918	GetIP returns the IP address
919	GetSSHKeyPath returns the SSH key path
920	GetSSHPort returns the SSH port
921	GetSSHername returns the SSH username
922	ResolveStorePath returns the path to the store
923	SetSwarmConfigFromFlags sets the SwarmConfig from the driver
924	IsVTXDisabledIncluded returns true if the VM is enabled .
925	getReleaseTag returns the tag for the given API .
926	getReleaseURL returns the URL for the given API .
927	version returns the version of the local installation .
928	DownloadISO downloads an ISO file
929	Authenticate is used to authenticate the client
930	GetInstanceIPAddresses returns the IP address for the given host .
931	targetHost returns the host name of the host .
932	machineCommand is used to create a command
933	runActionForeachMachine runs an action on the machine .
934	Create creates a new host .
935	GenerateRandomID generates random ID
936	GetCreateFlags returns a set of flags for the server
937	NewDriver creates a new driver
938	SetConfigFromFlags sets the flags for the driver
939	URL returns the host URL
940	newAzureClient returns a new azure client .
941	generateSSHKey generates the SSH key
942	parseSecurityRuleProtocol parses a security rule .
943	String returns the string representation of the state .
944	randomString returns a random string
945	GetCreateFlags returns the flags for the given VM .
946	generateKeyBundle generates a new tar bundle bundle
947	NewDriver creates a new Driver
948	PreCreateCheck checks if the driver is valid
949	validateNoIPCollisions checks if the given host is valid
950	getAvailableTCPPort returns the TCP port for the given port .
951	setPortForwarding is used to set the port forwarding port
952	getRandomIPinSubnet generates a random IP address based on the given baseIP address .
953	Detect returns a string representation of the shell .
954	vaultRenewDuration returns the duration for the given secret .
955	printVaultWarnings prints warnings
956	vaultSecretRenewable returns true if the secret is renewable .
957	transformSecret transforms a secret into a secret .
958	updateSecret updates the secret .
959	Display displays the template config .
960	NewVaultWriteQuery creates a new VaultWriteQuery .
961	sha1Map returns the SHA1 hash of the given map .
962	NewView creates a new View .
963	Data returns the current view .
964	DataAndLastIndex returns the last index of the view .
965	poll polls the view of the view .
966	fetch is part of the view .
967	NewCatalogNodeQuery creates a new CatalogNodeQuery .
968	Fetch fetches the node from the cluster
969	String returns a string representation of AuthConfig .
970	NewVaultListQuery creates a VaultListQuery .
971	Remember the given data .
972	Recall returns the value of the given dependency .
973	ForceSet sets the data for the given hash .
974	Get deletes the given dependency .
975	NewCatalogDatacentersQuery creates a new CatalogDatacentersQuery .
976	Fetch fetches the Datacenters from the client .
977	NewCatalogNodesQuery creates a new CatalogNodesQuery .
978	Fetch returns a list of nodes in the cluster .
979	Parse parses a string into a signal .
980	DefaultVaultConfig returns a default VaultConfig .
981	NewTemplate creates a new Template .
982	Execute executes the given template .
983	funcMap returns a FuncMap for the given function .
984	StringToFileModeFunc returns a map of file mode .
985	StringToWaitDurationHookFunc returns a map of waitDurationHookFunc .
986	ConsulStringToStructToStructFunc is a convenience function for Consul .
987	Key returns true if the given key exists .
988	Get returns the value associated with the given key .
989	Set sets the value for the given key .
990	SetX sets the value at the given key .
991	MapSet sets the value for the given key .
992	MapSetX implements the MapSet interface .
993	mapSet adds a new value to the map .
994	MapValues returns a slice of values .
995	init initializes Scratch .
996	Render implements the Render interface .
997	copyFile copies src to dst .
998	Copy returns a copy of the Config .
999	Merge merges the config into the config .
1000	Parse parses a string into a Config struct .
1001	Must returns a new Config .
1002	FromFile parses a file from a file .
1003	FromPath returns a Config from the given path .
1004	DefaultConfig returns the default config
1005	NewWatcher creates a watcher .
1006	Watch returns true if the dependency exists
1007	ForceWatching is used to force watching a watcher
1008	Remove removes a dependency from the watcher .
1009	Size returns the size of the watcher .
1010	Stop stops the watcher .
1011	Add adds a dependency to the set .
1012	Get implements the Set interface .
1013	List returns all dependencies in the set .
1014	Len returns the number of elements in the set .
1015	String returns a string representation of the set .
1016	DeepCopyAndSortTags returns a sorted list of tags .
1017	RespondWithMetadata returns a ResponseMetadata .
1018	regexpMatch returns a map of regexp matching regexp .
1019	NewCatalogServiceQuery returns a new CatalogServiceQuery .
1020	NewKVListQuery creates a new KVListQuery .
1021	NewDedupManager creates a new DedupManager .
1022	Start starts the DedupManager .
1023	Stop stops the daemon .
1024	createSession creates a new session
1025	IsLeader returns true if the given template is leader
1026	UpdateDeps updates the dependencies of the given template .
1027	setLeader sets the leader to the leader
1028	parseData loads the data from the given path .
1029	NewFileQuery creates a new FileQuery .
1030	NewCLI creates a new CLI
1031	Run runs the command
1032	stop the CLI
1033	loadConfigs loads the config from the given paths .
1034	logError logs an error .
1035	FileModeString returns a string representation of FileMode .
1036	SignalVal returns the signal val as a signal .
1037	SignalGoString returns a string representation of a signal .
1038	SignalPresent returns true if the signal is present .
1039	TimeDurationVal returns the duration of the given duration .
1040	TimeDurationGoString returns a string representation of a Time .
1041	CreateConsulClient creates a new ConsulClient
1042	Consul returns the Consul API client
1043	Vault returns the Vault client
1044	Stop stops the client
1045	NewVaultReadQuery creates a vault read query .
1046	NewKVGetQuery returns a new KVGetQuery instance
1047	NewVaultAgentTokenQuery creates a new VaultAgentTokenQuery .
1048	watch returns a channel that watches the token token .
1049	NewKVKeysQuery creates a new KVKeysQuery .
1050	New creates a new Child
1051	ExitCh returns the channel of the child of the child process .
1052	Pid returns the PID of the child .
1053	Command returns the command for the command .
1054	Start starts the child process
1055	Signal sends a signal to the daemon .
1056	Reload the child process
1057	Kill the child process
1058	Stop stops the child process .
1059	Env returns a list of environment variables .
1060	NewHealthServiceQuery creates a new HealthServiceQuery .
1061	Fetch fetches the health service .
1062	acceptStatus returns true if the status is in the list
1063	RetryFunc returns the retry function for retry .
1064	NewRunner creates a new Runner .
1065	Stop stops the runner .
1066	RenderEvents returns a map of timer events .
1067	Signal implements the Run interface .
1068	diffAndUpdateDeps updates the dependencies of the runner .
1069	templateConfigsFor returns the list of templates for the given template .
1070	TemplateConfigMapping returns a map of template configurations .
1071	All templates .
1072	childEnv returns a list of all the environment variables
1073	storePid is used to store a pid file
1074	deletePid deletes a pid file
1075	spawnChild creates a child of the child process .
1076	newQuiescence creates a Quiescence .
1077	tick is used to tick the timer .
1078	findCommand finds the command with the given templates .
1079	newWatcher creates a new watcher .
1080	NewCatalogServicesQuery returns a new CatalogServicesQuery .
1081	DefaultConsulConfig returns a default ConsulConfig
1082	StringToSignalFunc converts a string to a DecodeHookFunc .
1083	String returns a string representation of the WaitVar .
1084	NewVaultTokenQuery returns a new VaultTokenQuery
1085	NewLogFilter returns a new LogFilter
1086	ValidateLevelFilter checks if the given filter is valid
1087	datacentersFunc returns a list of all datacenters that are not in the given list .
1088	envFunc returns the environment variable as a string .
1089	executeTemplateFunc executes the given template with the given parameters .
1090	fileFunc returns a function that can be used to create a file .
1091	keyFunc returns a keyFunc that can be used to generate a key .
1092	keyExistsFunc returns true if the key exists .
1093	nodeFunc returns a function that can be used to create a catalog node .
1094	NodesFunc returns a function that returns a list of nodes .
1095	secretFunc returns a copy of the given secret .
1096	secretFunc returns a list of secrets that have been set .
1097	serviceFunc returns a list of health service services .
1098	servicesFunc returns a list of catalog services .
1099	treeFunc returns a list of key - value pairs .
1100	base64Decode decodes base64 encoded string
1101	base64Encode returns the base64 encoded string .
1102	base64URLDecode decodes base64 encoded string
1103	base64URLEncode returns the base64 encoded string .
1104	byTag returns a map of tags .
1105	split returns a map of key pairs
1106	splitHelper splits a key into a map .
1107	in returns true if v is in l .
1108	indent adds spaces to the string .
1109	join returns a comma separated string .
1110	parseBool parses a string into a bool .
1111	parseFloat parses a string into a float64 .
1112	parseInt parses string as int64 .
1113	parseJSON parses a JSON string into a map .
1114	parseUint parses a string into a uint64 .
1115	plugin runs the plugin .
1116	replaceAll replaces the given string with the given string .
1117	ReplaceReplaceAll returns a regexp with the given replacement .
1118	RegexMatch returns true if the given string matches the regex .
1119	split returns a slice of strings .
1120	timestamp returns the timestamp of a string .
1121	toJSON converts a JSON string into a string .
1122	toJSONPretty converts m to json . json . json
1123	toYAML converts m to YAML .
1124	toTOML converts m to a string .
1125	add adds b to b .
1126	modulo returns the modulo of b .
1127	Expired returns true if the item is expired
1128	SetDefault sets default value
1129	Add adds a value to the cache
1130	Get retrieves a value from the cache
1131	IncrementInt increments the value in the cache .
1132	Delete removes a key from the cache .
1133	DeleteExpired removes expired items from cache .
1134	Items returns a map of items in the cache .
1135	ItemCount returns the number of items in the cache .
1136	Flush removes all items from cache
1137	djb33 returns the 32 - bit 32 - bit 32 - 32 - 32 - bit - 32 - 32 - 32 - bit - 32 - bit - bit - 1 .
1138	LinkByName returns the link by name .
1139	NewMockTaskEngine creates a new mock instance
1140	AddTask indicates an expected call of AddTask
1141	GetTaskByArn mocks base method
1142	ListTasks mocks base method
1143	MarshalJSON mocks base method
1144	MustInit mocks base method
1145	StateChangeEvents mocks base method
1146	Version indicates an expected call of Version
1147	NewMockImageManager creates a new mock instance
1148	AddAllImageStates mocks base method
1149	AddAllImageStates mocks base method
1150	GetImageStateFromImageName mocks base method
1151	RecordContainerReference mocks base method
1152	StartImageCleanupProcess mocks base method
1153	NewEC2MetadataClient returns a new EC2MetadataClient
1154	DefaultCredentials returns the default role credentials
1155	GetDynamicData returns the dynamic data for the given path .
1156	GetMetadata returns the metadata for the given path .
1157	VPCID returns the VPC ID
1158	SubnetID returns the subnet ID for the given macnet .
1159	newRefreshCredentialsHandler creates a new refreshCredentialsHandler .
1160	handlerFunc returns a function that can be used to create a new IAML credentials .
1161	AckMessage is used to issue ack request .
1162	handleMessages is used to handle messages
1163	handleSingleMessage is used to handle a single message
1164	validRoleType returns true if the given role type is valid .
1165	newPayloadRequestHandler creates a payload request handler .
1166	handlerFunc returns a handler for the payload request
1167	AckMessageId sends ack message ID to the payload
1168	handleMessages is used to handle messages
1169	handleSingleMessage handles a single message
1170	addPayloadTasks adds the payload to the payload request
1171	addTasks adds a task to the queue
1172	handleUnrecognizedTask handles the unrecognized task .
1173	v2HandlersSetup is the handler for V2 .
1174	v3HandlersSetup is the handler for V3 .
1175	NewMockProvider creates a new mock instance
1176	IsExpired mocks base method
1177	IsExpired indicates an expected call of IsExpired
1178	Retrieve mocks base method
1179	NewMockContainerMetadataResolver creates a new mock instance
1180	ResolveContainer mocks base method
1181	ResolveContainer indicates an expected call of ResolveContainer
1182	ResolveTask mocks base method
1183	NewTaskResponse creates a new task response
1184	NewContainerResponse creates a new container response
1185	New creates a new Args command
1186	DefaultConfig returns the default config
1187	New creates a new http client
1188	RemoveFromTaskArray removes a task from the list .
1189	adjustForPlatform sets the Platform fields for the task .
1190	platformHostConfigOverride overrides the default value of the host .
1191	String returns the string representation of the EniAttachmentStatus .
1192	This is a helper function to generate a list of types .
1193	RetryRules returns the retry rules .
1194	NewMockTime creates a new mock instance
1195	After mocks base method
1196	AfterFunc mocks base method
1197	Now mocks base method
1198	Now indicates an expected call of Now
1199	Sleep mocks base method
1200	Sleep indicates an expected call of Sleep
1201	NewMockTimer creates a new mock instance
1202	Reset mocks base method
1203	Reset indicates an expected call of Reset
1204	Stop mocks base method
1205	Stop indicates an expected call of Stop
1206	AddAgentUpdateHandlers adds the update handler to the agent .
1207	sdkDockerClient returns the client sdk client .
1208	DockerStateToState converts a container to a container .
1209	MetadataFromContainer returns the metadata for a container
1210	ContainerEvents returns a channel for the given container .
1211	ListContainers returns a list of containers
1212	ListPluginsWithFilters lists all plugins .
1213	APIVersion returns the version of the docker client
1214	LoadImage loads the image from the image .
1215	UpdateContainerReference updates the container reference
1216	AddImageName adds an image name to the image .
1217	GetImageNamesCount returns the number of names in the image state .
1218	UpdateImageState updates the image state
1219	RemoveImageName removes the name from the image .
1220	HasImageName returns true if the given container name exists
1221	RemoveContainerReference removes a container reference
1222	SetPullSucceeded sets the PullSucceeded field s value .
1223	GetPullSucceeded returns true if the image is set
1224	MarshalJSON implements the json . Marshaler interface for ImageState .
1225	UnmarshalJSON handles deserialization of a TaskStatus .
1226	MarshalJSON implements the json . Marshaler interface for TaskStatus .
1227	NewClient creates a new CNI client
1228	SetupNS is used to setup a namespace
1229	CleanupNS cleans up the namespace
1230	ReleaseIPResource releases an IP address
1231	add adds a network configuration to the network
1232	del deletes the specified network configuration .
1233	createBridgeNetworkConfigWithIPAM creates a bridge configuration with the given IP address .
1234	create bridge network configuration
1235	constructNetworkConfig builds the network configuration for the given plugin .
1236	createIPAMNetworkConfig creates a new IPAM configuration
1237	Version returns the version of the plugin .
1238	Capabilities returns the capabilities of the plugin .
1239	New creates a new UdevWatcher .
1240	newWatcher creates a new UdevWatcher .
1241	PeriodicicReconciliation is used to perform a periodic reconcile .
1242	recomputeOnce reconciles the specified network interfaces .
1243	sendENIIStateChange is used to send an ENI update to an ENI .
1244	buildState returns the state of the given link .
1245	sendENIStateChangeWithRetries sends the given mac address to the specified network .
1246	Close closes the client .
1247	signRequestFunc is used to sign a request .
1248	publishMetrics is used to publish metrics
1249	publishMetricsOnce publishes metrics
1250	metricsToPublishMetricsRequests returns a list of metrics for the given metric .
1251	publishHealthMetrics publishes health metrics .
1252	publishHealthMetricsOnce publishes metrics to the server .
1253	createPublishHealthRequests creates a new instance of PublishHealthRequest
1254	copyMetricsMetadata creates a new MetricsMetadata .
1255	copyTaskMetrics returns a copy of the taskMetrics .
1256	copyHealthMetadata returns a copy of the healthMetadata .
1257	copyTaskHealthMetrics returns a copy of the taskHealthMetrics .
1258	UnmarshalJSON handles deserialization of a ResourceMap .
1259	NewVolumeResource creates a new volume resource
1260	KnownCreated returns true if the volume is created
1261	setMountPoint sets the mount point
1262	GetMountPoint returns the mount point
1263	Create creates a volume resource
1264	Cleanup cleans up a volume resource
1265	MarshalJSON method of VolumeResource
1266	UnmarshalJSON handles deserialization of VolumeResource .
1267	NewMockClientCreator creates a new mock instance
1268	NewASMClient mocks base method
1269	NewASMClient indicates an expected call of NewASMClient
1270	NewTransportProtocol returns a new TransportProtocol .
1271	String returns the string representation of the TransportProtocol .
1272	UnmarshalJSON handles deserialization of a TransportProtocol .
1273	MarshalJSON implements the json . Marshaler interface for TransportProtocol .
1274	NewMockManager creates a new mock instance
1275	GetTaskCredentials mocks base method
1276	RemoveCredentials mocks base method
1277	SetTaskCredentials mocks base method
1278	GetDockerAuthFromASM returns a AuthConfig from a secret
1279	GetSecretFromASM returns secret value
1280	NewMockCgroupFactory creates a new mock instance
1281	Load mocks base method
1282	Load indicates an expected call of Load
1283	LoadImage loads the image from the docker container
1284	NewCgroupResource creates a new CgroupResource
1285	Create creates a cgroup resource
1286	Cleanup cleans up the cgroup resource
1287	MarshalJSON marshals CgroupResourceResource into CgroupResource
1288	UnmarshalJSON handles deserialization of cgroupResource .
1289	GetCgroupRoot returns the cgroup root directory
1290	GetCgroupMountPath returns the cgroup mount path
1291	Initialize initializes the CgroupResourceResource
1292	LoadImage loads an image from the container
1293	NewECRFactory returns a new ECRFactory .
1294	GetClient returns a new ECR client
1295	getClientConfig returns an AWS CloudFormation config
1296	NewMockAuditLogger creates a new mock instance
1297	GetContainerInstanceArn mocks base method
1298	GetContainerInstanceArn indicates an expected call of GetContainerInstanceArn
1299	Log mocks base method
1300	Log mocks base method
1301	NewMockInfoLogger creates a new mock instance
1302	Info indicates an expected call of Info
1303	Info indicates an expected call of Info
1304	taskShouldBeSent returns true if the event was sent .
1305	send sends an event to the scheduler .
1306	sendContainerStatusToECS sends an event to a container .
1307	sendTaskStatusToECS sends a task status to the server .
1308	setContainerChangeSent sets the container change status
1309	setTaskChangeSent sets the status of a task .
1310	setTaskAttachmentSent sets the AttachmentAttachment field s value .
1311	GetSecretsFromSSM returns the secrets from the given names
1312	main is the main implementation of the main function .
1313	IsRetriableError returns true if the container is retriable .
1314	NewMockFile creates a new mock instance
1315	Chmod mocks base method
1316	Chmod indicates an expected call of Chmod
1317	Write mocks base method
1318	NewMockOS creates a new mock instance
1319	Create indicates an expected call of Create
1320	IsNotExist mocks base method
1321	OpenFile mocks base method
1322	RemoveAll mocks base method
1323	NewMockSSMClientCreator creates a new mock instance
1324	NewSSMClient mocks base method
1325	NewSSMClient indicates an expected call of NewSSMClient
1326	NewMockEC2MetadataClient creates a new mock instance
1327	DefaultCredentials mocks base method
1328	DefaultCredentials indicates an expected call of DefaultCredentials
1329	GetDynamicData mocks base method
1330	InstanceIdentityDocument mocks base method
1331	NewMockHttpClient creates a new mock instance
1332	GetInstanceIdentityDocument mocks base method
1333	GetUserData mocks base method
1334	GetUserData indicates an expected call of GetUserData
1335	NewMockClient creates a new mock instance
1336	DescribeECSTagsForInstance mocks base method
1337	NewMockClientSDK creates a new mock instance
1338	CreateTags mocks base method
1339	DescribeTags mocks base method
1340	DescribeTags indicates an expected call of DescribeTags
1341	NewStateManager returns a new StateManager .
1342	Save saves the state manager .
1343	Load loads state from state
1344	ValidDependencies returns true if the given task is valid
1345	dependenciesCanBeResolve returns true if the container can be resolved .
1346	onSteadyStateIsResolved returns true if the container has been started .
1347	newAgent creates a new agent
1348	printECSAttributes prints the capabilities of the agent .
1349	start starts the container
1350	doStart starts the container .
1351	newTaskEngine creates a new task engine .
1352	setClusterInConfig sets the configuration for the current cluster
1353	getEC2InstanceID returns the instance ID of the EC2 API
1354	constructVPCSubnetAttributes constructs a set of VPCSubnet attributes for the VPC .
1355	registerContainerInstance registers a new container instance
1356	reregisterContainerInstance is used to reregister a container instance
1357	startAsyncRoutines starts asyncRoutines
1358	startACSSession starts a new ACS session
1359	getContainerInstanceTagsFromEC2API returns the tags for the EC2 API .
1360	mergeTags merges two EC2 tags .
1361	SlicesDeepEqual returns true if two slices are equal .
1362	IsAWSErrorCodeEqual returns true if the given error is an error .
1363	MapToTags maps tags to tags
1364	CredentialsHandlerImpl is part of the http . Handler interface .
1365	processCredentialsRequest processes a request from a request
1366	NewTaskHandler creates a new task handler
1367	AddStateChangeEvent adds a state change event to the container
1368	startDrainEventsTicker starts a goroutine to start a container .
1369	taskStateChangesToSend returns a list of task state changes
1370	batch container state
1371	flushBatchUnsafe deletes a batch of tasks from a container
1372	getTaskEventsUnsafe returns a copy of the task events .
1373	submitTaskEvents is part of the EventHandler interface .
1374	sendChange sends an event to the scheduler .
1375	submitFirstEvent is part of the EventHandler interface .
1376	getTasksToEventsLen returns the number of tasks to be processed .
1377	handleInvalidParamException is part of the EventHandler interface .
1378	NewMockControl creates a new mock instance
1379	Exists mocks base method
1380	Init indicates an expected call of Init
1381	NewQueue creates a new queue
1382	Reset resets the queue .
1383	Add adds a container to the queue
1384	GetLastStat returns the last stat
1385	GetRawUsageStats returns the usage of the queue .
1386	getCWStatsSet returns the WST statsSet from the queue .
1387	NewMockCNIClient creates a new mock instance
1388	Capabilities mocks base method
1389	Capabilities indicates an expected call of Capabilities
1390	CleanupNS mocks base method
1391	ReleaseIPResource mocks base method
1392	SetupNS mocks base method
1393	SetupNS indicates an expected call of SetupNS
1394	ContainerAssociationsHandler returns an http . Handler for a container .
1395	ContainerAssociationHandler returns an http . Handler for the given task .
1396	NewManager returns a new Manager .
1397	Create creates a new container
1398	Update updates a container
1399	Clean deletes the metadata
1400	parseAuthData parses the given auth data and returns a DockerAuths .
1401	ServeHTTP implements the http . Handler interface .
1402	NewJitteredTicker creates a new ticker
1403	getTaskEnIIPluginVersionAttribute returns the Attribute version of the ECSEN plugin .
1404	NewMockECDK creates a new mock instance
1405	CreateCluster mocks base method
1406	ListTagsForResource mocks base method
1407	NewMockECSSubmitStateSD creates a new mock instance
1408	SubmitContainerStateChange indicates an expected call of SubmitContainerStateChange
1409	NewMockECSClient creates a new mock instance
1410	DiscoverPollEndpoint indicates an expected call of DiscoverPollEndpoint
1411	GetResourceTags mocks base method
1412	NewTaskEngine creates a new task engine
1413	NewMockStateManager creates a new mock instance
1414	NewStateManager mocks base method
1415	NewStateManager indicates an expected call of NewStateManager
1416	NewMockSaveableOption creates a new mock instance
1417	AddSaveable mocks base method
1418	AddSaveable indicates an expected call of AddSaveableOption
1419	NewECSClient creates a new ECSClient
1420	CreateCluster creates a cluster
1421	RegisterContainerInstance registers a new container instance
1422	Connect connects to the client
1423	IsReady returns true if the client is ready .
1424	SetReadDeadline sets the read deadline .
1425	Disconnect disconnects the client
1426	WriteMessage sends a message to the server .
1427	ConsumeMessages reads messages from the server .
1428	handleMessage handles incoming requests .
1429	AllTasks returns all the tasks in the state .
1430	AllImageStates returns all image states .
1431	AllENIAttachment returns all ENIAttachment instances .
1432	ENIIByMac returns the ENII attachment for the given MAC address .
1433	AddENIAttachment adds an ENIi attachment
1434	RemoveENIAttachment removes an ENII attachment from the Docker Engine .
1435	GetAllContainerIDs returns all the IDs of the container
1436	ContainerByID returns the container by ID .
1437	ContainerMapByArn returns a map of container names for the given ARN .
1438	TaskByShortID returns the list of tasks that match the given CID .
1439	TaskByID returns the task by ID
1440	TaskByArn returns the task by ARN .
1441	AddTask adds a task to the Docker engine .
1442	AddContainer adds a container to the container
1443	AddImageState adds a new image state to the Docker engine .
1444	RemoveTask removes a task from the container
1445	taskToIPUnsafe returns the IP address for the given ARN .
1446	removeV3EndpointIDToTaskUnsafe removes the V3 endpoint ID from the container .
1447	RemoveImageState removes the image state from the image .
1448	AddTaskIPAddress adds a new IP address to the Docker engine .
1449	GetTaskByIPAddress returns the task by IP address .
1450	storeV3EndpointIDToTaskUnsafe is used to store the V3 endpoint ID .
1451	storeV3EndpointIDToDockerIDUnsafe sets the V3 endpoint ID .
1452	DockerIDByV3EndpointID returns the ID of the V3 endpoint .
1453	TaskARN3ByV3EndpointID returns the name of the given V3 endpoint .
1454	v1HandlersSetup is the handler for V1 .
1455	String returns the string representation of the DockerContainer .
1456	NewContainerWithSteadyState returns a new ContainerWithSteadyState
1457	GetKnownStatus returns the status of the container .
1458	SetKnownStatus sets the status of the container .
1459	GetDesiredStatus returns the status of the container
1460	SetDesiredStatus sets the desired status of the container
1461	GetSentStatus returns the status of the container
1462	SetSentStatus sets the sent status of the container
1463	SetKnownExitCode sets the known exit code .
1464	GetKnownExitCode returns the known exit code .
1465	SetRegistryAuthCredentials sets the ECRA authentication credentials .
1466	ShouldPullWithExecutionRole returns true if the container is run in the container
1467	GetSteadyStateStatus returns the StatefulStateStatus field if it s non - nil zero value otherwise .
1468	IsKnownSteadyState returns true if the container is known .
1469	IsMetadataFileUpdated returns true if the container is updated
1470	SetMetadataFileUpdated sets metadata file
1471	IsEssential returns true if the container is essential .
1472	SetCreatedAt sets the created timestamp .
1473	SetStartedAt sets the start time .
1474	SetFinishedAt sets the finished time .
1475	GetCreatedAt implements the Container interface for Container .
1476	GetStartedAt returns the start of the container
1477	GetFinishedAt implements the Container interface for Container .
1478	SetLabels sets the labels of the container
1479	GetLabels returns the labels of the container
1480	SetKnownPortBindings sets the known port bindings .
1481	GetKnownPortBindings returns all known port bindings .
1482	SetVolumes sets the volumes for the container
1483	GetVolumes returns the volumes for the container
1484	SetNetworkSettings sets network settings
1485	GetNetworkSettings returns network settings
1486	SetNetworkMode sets the network mode for the container
1487	GetNetworkMode returns the network mode for the container
1488	SetHealthStatus sets the health status of the container
1489	GetHealthStatus returns the Status of the container
1490	BuildContainerDependency builds a ContainerDependency for the given container
1491	updateAppliedStatusUnsafe updates the status of the given application .
1492	SetAppliedStatus sets the ApplicationStatus field s value .
1493	GetAppliedStatus returns the current application status .
1494	ShouldPullWithASMAuth checks if the container has access to the registry
1495	SetASMMDockerAuthConfig sets the container auth config
1496	SetV3EndpointID sets the V3 endpoint ID
1497	GetV3EndpointID returns the V3 endpoint ID
1498	InjectV3MetadataEndpoint implements the Container interface .
1499	ShouldCreateWithSSMSretret returns true if the container has access to the container
1500	ShouldCreateWithASMSecret returns true if the container has been set
1501	getMetadataFilePath returns the metadata file path for the given container .
1502	Get task metadata directory
1503	MarshalJSON implements the json . Marshaler interface .
1504	UnmarshalJSON implements json . Unmarshaler
1505	NewASMSecretResource returns a new ASMSretretResource
1506	Create creates a new secret resource
1507	retrieveASMSecretretrieves the secret data for the given secret .
1508	get required secrets
1509	clearASMSecretValue clears secret data
1510	MarshalJSON implements the json . Marshaler interface .
1511	UnmarshalJSON implements the json . Unmarshaler interface .
1512	Create creates a Cgroup .
1513	Remove removes cgroup from cgroup
1514	Exists checks if cgroupPath exists
1515	validateCgroupSpec validates the cgroup spec
1516	handleInactivityTimeout handles incoming requests .
1517	NewImageManager creates a new image manager
1518	RecordContainerReference records a container reference to a container
1519	RemoveContainerReferenceFromImageState removes a container from the image .
1520	getImageState returns the image state for a container
1521	removeImageState removes the image state from the imageManager .
1522	Merge merges the given configuration into a Config .
1523	NewConfig returns a new instance of Config .
1524	trimWhitespace removes whitespace
1525	validateAndOverrideBounds ensures that the Docker container is valid
1526	NewTaskStatsResponse returns a map of task stats
1527	NewSession creates a new session .
1528	Start session
1529	startACSSession starts a new ACSSession
1530	waitForDuration returns true if the given delay has been reached .
1531	createACSClient creates a new client for acs .
1532	acsWsURL returns the acs url for the given cluster .
1533	newDisconnectionTimer creates a new timedout timer .
1534	anyMessageHandler returns a function that can be called when a connection is received .
1535	validateIPRules validates ip rules
1536	WriteJSONToResponse writes a response to w .
1537	ValueFromRequest returns the value from the request .
1538	GetMuxValueFromRequest returns the value for the given request .
1539	LimitReachedHandler returns an http . Handler for the auditLogger .
1540	UnmarshalJSON handles deserialization of TransitionDependencySet .
1541	Add adds a sequence to the queue .
1542	Done removes the sequence from the queue .
1543	NewMockCgroup creates a new mock instance
1544	Add mocks base method
1545	Add mocks base method
1546	Delete indicates an expected call of Delete
1547	MoveTo mocks base method
1548	OOMEventFD mocks base method
1549	Processes mocks base method
1550	Stat mocks base method
1551	Subsystems mocks base method
1552	TaskStatsHandler returns an http . Handler for the given task .
1553	GetKnownAPIVersions returns the list of available versions .
1554	NewMockUdev creates a new mock instance
1555	Monitor mocks base method
1556	Monitor indicates an expected call of Monitor
1557	SetInferenceDevices sets the InferenceDevices field s value .
1558	SetDeviceName sets the DeviceName field s value .
1559	SetDeviceType sets the DeviceType field s value .
1560	DefaultConfig returns the default config
1561	platformString returns the string representation of the platform .
1562	MapTaskToContainerStatus maps a container status to a container .
1563	Error implements the error interface for MultiErr .
1564	NewMultiError creates a new MultiError .
1565	GetPullCredentials gets the pullCredentials from the ECRA API
1566	SetPullCredentials sets the pullCredentials
1567	GetDockerAuthConfig returns docker auth configuration
1568	SetDockerAuthConfig sets docker auth configuration
1569	NewMockSecretsManagerAPI creates a new mock instance
1570	CancelRotateSecret mocks base method
1571	CancelRotateSecret indicates an expected call of CancelRotateSecret
1572	CancelRotateSecretRequest mocks base method
1573	CancelRotateSecretWithContext mocks base method
1574	CreateSecret mocks base method
1575	CreateSecretRequest mocks base method
1576	CreateSecretWithContext mocks base method
1577	DeleteResourcePolicy mocks base method
1578	DeleteResourcePolicyRequest mocks base method
1579	DeleteResourcePolicyWithContext mocks base method
1580	DeleteSecret mocks base method
1581	DeleteSecretRequest mocks base method
1582	DeleteSecretWithContext mocks base method
1583	DescribeSecret mocks base method
1584	DescribeSecretRequest mocks base method
1585	DescribeSecretWithContext mocks base method
1586	GetRandomPassword mocks base method
1587	GetRandomPasswordRequest mocks base method
1588	GetRandomPasswordWithContext mocks base method
1589	GetResourcePolicy mocks base method
1590	GetResourcePolicyRequest mocks base method
1591	GetResourcePolicyWithContext mocks base method
1592	GetSecretValue mocks base method
1593	GetSecretValueRequest mocks base method
1594	GetSecretValueWithContext mocks base method
1595	ListSecretVersionIds mocks base method
1596	ListSecretVersionIdsPages mocks base method
1597	ListSecretVersionIdsPagesWithContext mocks base method
1598	ListSecretVersionIdsRequest mocks base method
1599	ListSecrets mocks base method
1600	ListSecretsPages mocks base method
1601	ListSecretsRequest mocks base method
1602	ListSecretsWithContext mocks base method
1603	PutResourcePolicy mocks base method
1604	PutResourcePolicyRequest mocks base method
1605	PutResourcePolicyWithContext mocks base method
1606	PutSecretValue mocks base method
1607	PutSecretValueRequest mocks base method
1608	PutSecretValueWithContext mocks base method
1609	RestoreSecret mocks base method
1610	RestoreSecretRequest mocks base method
1611	RestoreSecretWithContext mocks base method
1612	RotateSecret mocks base method
1613	RotateSecretRequest mocks base method
1614	RotateSecretWithContext mocks base method
1615	TagResource mocks base method
1616	TagResourceRequest mocks base method
1617	UntagResource mocks base method
1618	UntagResourceRequest mocks base method
1619	UntagResourceWithContext mocks base method
1620	UpdateSecret mocks base method
1621	UpdateSecretRequest mocks base method
1622	UpdateSecretVersionStage mocks base method
1623	UpdateSecretVersionStageRequest mocks base method
1624	UpdateSecretVersionStageWithContext mocks base method
1625	UpdateSecretVersionStageWithContext mocks base method
1626	UpdateSecretWithContext mocks base method
1627	createBindsEnv creates a list of bind bindings for the given bind directory
1628	parseMetadataAtContainerCreate parses the metadata and returns a Metadata instance .
1629	parseMetadata parses the metadata for a container
1630	Parse docker container metadata
1631	parse network metadata
1632	Initialize initializes the NvidiaGPUManager
1633	SetGPUIDs sets the GPU IDs
1634	SetDriverVersion sets the driver version
1635	GetDriverVersion returns the driver version
1636	GetDevices returns the device devices
1637	NewMockLicenseProvider creates a new mock instance
1638	GetText mocks base method
1639	GetText indicates an expected call of GetText
1640	NewMockBackoff creates a new mock instance
1641	Duration mocks base method
1642	Duration indicates an expected call of Duration
1643	UnmarshalText unmarshals text into a MetadataStatus
1644	After returns a channel with the given duration .
1645	AfterFunc implements the DefaultTime interface .
1646	Since returns the duration of t .
1647	NewMockTaskResource creates a new mock instance
1648	ApplyTransition mocks base method
1649	Cleanup mocks base method
1650	GetCreatedAt mocks base method
1651	GetTerminalReason mocks base method
1652	Initialize indicates an expected call of Initialize
1653	KnownCreated mocks base method
1654	MarshalJSON indicates an expected call of MarshalJSON
1655	NextKnownState mocks base method
1656	SetAppliedStatus mocks base method
1657	SetAppliedStatus indicates an expected call of SetAppliedStatus
1658	SetCreatedAt mocks base method
1659	SetDesiredStatus mocks base method
1660	SetKnownStatus mocks base method
1661	StatusString mocks base method
1662	NewMockLoader creates a new mock instance
1663	LoadImage indicates an expected call of LoadImage
1664	Error implements the error interface for ContainerNotFound .
1665	String returns a string representation of a DockerContainerEvent .
1666	UnmarshalJSON deserializes into a TaskVolume instance
1667	MarshalJSON method of TaskVolume
1668	NewSSMClient creates a new SSM client
1669	GetClient returns the client s client .
1670	getWindowsReplaceableVersions returns a list of Docker versions for Windows .
1671	getWindowsSupportedVersions returns a list of docker versions supported by the docker client
1672	PortBindingFromDockerPortBinding returns a slice of PortBinding
1673	NewASMAuthResource creates a new ASMAuthResource
1674	Create creates a new auth resource
1675	GetRequiredASMResources returns the required params
1676	GetExecutionCredentialsID returns the current executionCredentialsID .
1677	clearASDMDockerAuthConfig clears the docker auth config
1678	GetASMDockerAuthConfig returns the AuthConfig for the given secret
1679	MarshalJSON implements the json . Marshaler interface .
1680	UnmarshalJSON implements the json . Unmarshaler interface .
1681	ContainerMetadataHandler returns a handler for container metadata
1682	GetContainerResponse returns a container response
1683	GetContainerNetworkMetadata returns network metadata for a container
1684	Initialize initializes the CgroupResourceResource
1685	StartDefaultTerminationHandler starts the default termination handler .
1686	FinalSave is part of the engine engine .
1687	String returns the string representation of the cache .
1688	NewECRAuthProvider returns a new DockerAuthProvider
1689	getAuthConfigFromCache retrieves the AuthConfig from the cache
1690	getAuthConfigFromECR retrieves an auth token from the ECR API
1691	IsTokenValid checks if a token is valid .
1692	createTaskResponse creates a task response
1693	NewTaskStateChangeEvent creates a new TaskStateChangeEvent
1694	NewContainerStateChangeEvent creates a new container state change event .
1695	SetTaskTimestamps sets the TaskTimestamps field s value .
1696	ShouldBeReported returns true if the task state is reported .
1697	GetIPV4Addresses returns the list of IPV4 addresses
1698	GetIPV6Addresses returns the list of IPV6 addresses
1699	String returns the string representation of the Env .
1700	ENIIFromACS creates an ENI from an ECI interface .
1701	ValidateTaskEnII validates an ECS network interface
1702	NewMockPlugins creates a new mock instance
1703	Scan mocks base method
1704	Scan indicates an expected call of Scan
1705	TaskFromACS creates a task from an ACS task
1706	initializeDockerVolumes initializes the required volumes .
1707	addTaskScopedVolumes adds a container to the container .
1708	updateContainerVolumeDependency is used to update container volumes
1709	initializeCredentialsEndpoint initializes the credentials endpoint
1710	initializeContainersV3MetadataEndpoint sets the V3MetadataEndpoint .
1711	requiresASMMDockerAuthData returns true if the task does not exist .
1712	initializeASMAuthResource initializes the AWS AMMAuth resource
1713	requiresSSMSECretret returns true if the task is set
1714	initializeSSMSretretResource initializes the SSMSretretryResource
1715	getAllSSMSretretRequirements returns all the secrets required for the task .
1716	requiresASMSECretret returns true if the task is set
1717	initializeASMSecretResource initializes a new ASMSECretryResource
1718	getAllASMSecretRequirements returns a map of secrets that can be used to get the secrets for the task .
1719	BuildCNIConfig builds a CNIConfig struct
1720	convertENITIIConfig converts an EnvIPConfig to an environ .
1721	convertAppMeshToCNIConfig converts an AppMesh to an AppMesh .
1722	HostVolumeByName returns the volume by name .
1723	UpdateMountPoints updates the mount point for the container
1724	DockerConfig returns the docker client configuration
1725	DockerHostConfig returns the host config for a container
1726	ApplyExecutionRoleLogsAuth implements the TaskConfig interface for TaskLogger .
1727	shouldOverrideNetworkMode returns true if the container is enabled .
1728	applyENIIHostname applies the hostname to the task .
1729	shouldOverridePIDMode returns true if the task is enabled .
1730	shouldOverrideIPCMode returns true if the given container is enabled .
1731	UpdateStatus updates the task status
1732	UpdateDesiredStatus updates the status of the task .
1733	SetKnownStatus sets the status of the task .
1734	GetKnownStatus returns the status of the task .
1735	GetKnownStatusTime returns the known status of the task .
1736	SetCredentialsID sets the credentials for the task .
1737	GetCredentialsID returns the credentials associated with the task .
1738	SetExecutionRoleCredentialsID sets the execution role ID
1739	GetExecutionCredentialsID returns the current execution of the task .
1740	GetDesiredStatus implements TaskStatus .
1741	SetDesiredStatus sets the desired status of the task .
1742	GetSentStatus returns the status of the task .
1743	SetSentStatus sets the SentStatus field s value .
1744	SetTaskENI sets the ENII in the task .
1745	GetTaskENI returns the ENI ENI environment
1746	SetAppMesh sets the app mesh
1747	GetAppMesh returns the app mesh
1748	GetStopSequenceNumber returns the stop sequence number
1749	SetStopSequenceNumber sets the stop sequence number
1750	SetPullStartedAt sets the PullStartedAt field s value .
1751	GetPullStartedAt returns the time of the task .
1752	SetPullStoppedAt sets the PullStoppedAt field s value .
1753	GetPullStoppedAt implements the Task interface for TaskStoppedAt .
1754	SetExecutionStoppedAt sets the ExecutionStoppedAt field s value .
1755	GetExecutionStoppedAt returns the execution time .
1756	stringUnsafe returns a string representation of a task .
1757	RecordExecutionStoppedAt implements the Task interface .
1758	GetResources returns the resources associated with the task .
1759	getResourcesUnsafe returns a slice of tasks that are not safe for concurrent access .
1760	AddResource adds a resource to the task
1761	SetTerminalReason sets the terminal reason
1762	GetTerminalReason returns the terminal reason
1763	PopulateASMAuthData populates the signature data from the container
1764	getSSMSretsResource returns the set of secrets for the task
1765	Populates secrets
1766	getASMSecretsResource returns the set of secrets for the task .
1767	getPIDMode returns the PID mode
1768	getIPCMode returns the IPC mode for this task
1769	AssociationByTypeAndContainerAndContainer returns the association names of the given container .
1770	AssociationByTypeAndName returns the association by name .
1771	newAttachENIHandler creates a new attachENI .
1772	handlerFunc returns a function that implements the AttachTask interface .
1773	handleMessages handles messages .
1774	handleSingleMessage implements the AttachTask interface .
1775	addENIAttachmentToState is used to add an ENIIAttachment to the attach task
1776	validateAttachTaskNetworkInterfacesMessage validates an AttachTaskInterfacesMessage
1777	ForceSave mocks base method
1778	ForceSave indicates an expected call of ForceSave
1779	NewMockClientServer creates a new mock instance
1780	AddRequestHandler mocks base method
1781	AddRequestHandler mocks base method
1782	Connect indicates an expected call of Connect
1783	Disconnect mocks base method
1784	IsConnected mocks base method
1785	MakeRequest mocks base method
1786	SetAnyRequestHandler mocks base method
1787	SetConnection mocks base method
1788	SetReadDeadline mocks base method
1789	ShouldReportToBackend returns true if the container status is in the state of the container .
1790	BackendStatus returns the current state of the container .
1791	UnmarshalJSON handles deserialization of a ContainerStatus .
1792	MarshalJSON method of ContainerStatus
1793	UnmarshalJSON implements the json . Unmarshaler interface .
1794	MarshalJSON implements the json . Marshaler interface for ContainerHealthStatus .
1795	publishMetrics publishes metrics .
1796	NewMockDockerClient creates a new mock instance
1797	APIVersion mocks base method
1798	ContainerEvents mocks base method
1799	ContainerEvents indicates an expected call of ContainerEvents
1800	CreateContainer mocks base method
1801	CreateVolume mocks base method
1802	DescribeContainer mocks base method
1803	InspectContainer mocks base method
1804	InspectImage mocks base method
1805	KnownVersions mocks base method
1806	KnownVersions indicates an expected call of KnownVersions
1807	ListContainers mocks base method
1808	ListImages mocks base method
1809	ListPlugins mocks base method
1810	ListPluginsWithFilters mocks base method
1811	PullImage mocks base method
1812	RemoveImage mocks base method
1813	StopContainer mocks base method
1814	WithVersion mocks base method
1815	NewMockCache creates a new mock instance
1816	Delete mocks base method
1817	Get mocks base method
1818	Set mocks base method
1819	Set mocks base method
1820	newManagedTask creates a new managed task
1821	monitorTask ensures that the container is running .
1822	emitCurrentStatus emits the current status of the task
1823	waitForHostResources waits until the task is running .
1824	waitSteady waits for the status of the task to wait for the state to be running .
1825	runningState returns true if the task is running .
1826	cleanupCredentials removes credentials from the pool
1827	waitEvent waits for an event to be sent to the container .
1828	handleResourceStateChange is used to handle a resource state change
1829	emitContainerEvent emits a container event .
1830	releaseIPInIPAM releases the specified IP address
1831	handleStoppedToRunningContainerTransition is called when a container is stopped .
1832	handleEventError is used to handle an event .
1833	handleContainerStoppedTransitionError is called when a container is stopped .
1834	progressTask is used to process a task
1835	isWaitingForACSExecutionCredentials returns true if the given credential is valid .
1836	startContainerTransitions starts a container transition
1837	startResourceTransitions is used to start a resource transition
1838	transitionResource applies the given resource to the task .
1839	applyResourceState updates the state of the given resource .
1840	waitForStopReported returns true if the task is stopped .
1841	NewFactory returns a new instance of Factory .
1842	FindClientAPIVersion finds the docker version of the docker client
1843	getClient returns a new docker client .
1844	findDockerVersions returns a list of docker versions for the given endpoint .
1845	runAgent runs the agent .
1846	sleepCtx blocks until the given duration expires .
1847	TaskMetadataHandler creates a task metadata handler .
1848	Subscribe registers a new event handler .
1849	broadcast sends events to the event stream .
1850	Unsubscribe removes an event from the event stream .
1851	WriteToEventStream implements EventStream .
1852	Listen starts the event stream .
1853	Start listening for events
1854	SetLevel sets the log level
1855	ForModule creates a new logger with the given module .
1856	NewMockWebsocketConn creates a new mock instance
1857	ReadMessage mocks base method
1858	SetWriteDeadline indicates an expected call of SetWriteDeadline
1859	Get indicates an expected call of Get
1860	NewSSMSecretResource creates a new SSMSretretResource
1861	Create creates a new secret resource
1862	getGoRoutineMaxNum returns the number of bytes in the secret .
1863	retrieveSSMSretretrieveByRegion retrieves the secrets for a given region .
1864	retrieveSSMSretretrieves the secrets for a given region .
1865	clearSSMSretretValue clears secret data
1866	GetCachedSecretValue returns the cached secret value for the given secret key .
1867	SetCachedSecretValue sets the secret key
1868	Clean mocks base method
1869	SetAvailabilityZone mocks base method
1870	SetContainerInstanceARN mocks base method
1871	SetHostPublicIPv4Address mocks base method
1872	NewMockDockerMetadataClient creates a new mock instance
1873	InspectContainer indicates an expected call of InspectContainer
1874	JsonKeys returns a slice of keys
1875	TaskContainerMetadataHandler handles the request metadata for a container
1876	Write container metadata
1877	Write task metadata
1878	Init initializes the Linux task
1879	Error implements the error interface .
1880	Retry returns true if the error is retryable
1881	NewMockDockerStateResolver creates a new mock instance
1882	State indicates an expected call of State
1883	printLicense prints the license
1884	Load loads the Cgroups from the given path .
1885	New creates a new Cgroups object
1886	timeoutAndMoveOn moves the given function to the given function .
1887	UnmarshalJSON implements the json . Unmarshaler interface .
1888	Init initializes the Docker task
1889	MustInit initializes the docker daemon
1890	isTaskManaged returns true if the given ARN is managed .
1891	synchronizeState synchronizes the state of the Docker task .
1892	filterTasksToStartUnsafe returns a slice of tasks that can be used to filter containers .
1893	updateContainerMetadata updates container metadata
1894	synchronizeContainerStatus synchronizes the container status .
1895	checkTaskState is used to check the status of a task .
1896	sweepTask removes a container from the container
1897	startTask starts a new task
1898	openEventStream opens an event stream .
1899	handleDockerEvents handles all Docker events .
1900	handleDockerEvent handles a Docker event .
1901	AddTask adds a task to the Docker engine
1902	ListTasks returns a list of all tasks .
1903	GetTaskByArn returns the task by ARN .
1904	imagePullRequired checks if the specified image is required
1905	cleanupPauseContainerNetwork cleans up the network namespace
1906	updateTaskUnsafe is called when a task is unmodified .
1907	transitionContainer transitions a container to a container
1908	applyContainerState updates the state of the given container .
1909	Version returns the current version
1910	NewMockSSMClient creates a new mock instance
1911	GetParameters mocks base method
1912	GetParameters indicates an expected call of GetParameters
1913	NewMockFactory creates a new mock instance
1914	FindClientAPIVersion mocks base method
1915	FindKnownAPIVersions mocks base method
1916	GetDefaultClient mocks base method
1917	NewMockFileSystem creates a new mock instance
1918	Copy mocks base method
1919	Exit mocks base method
1920	MkdirAll mocks base method
1921	Open mocks base method
1922	ReadAll mocks base method
1923	Remove mocks base method
1924	Rename mocks base method
1925	TeeReader mocks base method
1926	initializeTaskENIDependencies initializes the task endpoints .
1927	setVPCSubnet sets the VPC subnet
1928	startUdevWatcher starts a watcher .
1929	IncrementCallCount increments the count of callCount .
1930	NewMockTaskEngineState creates a new mock instance
1931	AddContainer mocks base method
1932	AddENIAttachment mocks base method
1933	AddImageState mocks base method
1934	AddTaskIPAddress mocks base method
1935	AllImageStates mocks base method
1936	AllImageStates indicates an expected call of AllImageStates
1937	AllTasks mocks base method
1938	ContainerByID mocks base method
1939	ENIIByMac mocks base method
1940	GetAllContainerIDs mocks base method
1941	RemoveENIAttachment mocks base method
1942	RemoveImageState mocks base method
1943	RemoveTask mocks base method
1944	RemoveTask indicates an expected call of RemoveTask
1945	TaskARN3ByV3ID mocks base method
1946	TaskByArn mocks base method
1947	UnmarshalJSON mocks base method
1948	String returns the string representation of a container .
1949	UnmarshalJSON handles deserialization of a ContainerType .
1950	MarshalJSON implements the json . Marshaler interface for ContainerType .
1951	parseNanoTime parses a time . Time .
1952	NewMockResponseWriter creates a new mock instance
1953	Header mocks base method
1954	Header indicates an expected call of Header
1955	WriteHeader mocks base method
1956	WriteHeader indicates an expected call of WriteHeader
1957	compareDockerVersions compares two docker versions .
1958	SignHTTPRequest signs an HTTP request with the given credentials .
1959	GetClient returns the client s client .
1960	getAgentVersions returns a list of all the version versions .
1961	dockerCPUShares returns the number of CPU shares .
1962	verifyTasksMetadata verifies that the tasks are valid .
1963	verifyTaskMetadata validates task metadata
1964	verifyContainerMetadata validates container metadata
1965	NewMockResult creates a new mock instance
1966	GetAsVersion mocks base method
1967	GetAsVersion indicates an expected call of GetAsVersion
1968	Print mocks base method
1969	Print indicates an expected call of Print
1970	ContainerCreate mocks base method
1971	ContainerInspect mocks base method
1972	ContainerList mocks base method
1973	ContainerRemove mocks base method
1974	ContainerStart mocks base method
1975	ContainerStats mocks base method
1976	ContainerStop mocks base method
1977	Events mocks base method
1978	ImageImport mocks base method
1979	ImageInspectWithRaw mocks base method
1980	ImageList mocks base method
1981	ImageLoad mocks base method
1982	ImagePull mocks base method
1983	ImageRemove mocks base method
1984	Ping mocks base method
1985	PluginList mocks base method
1986	VolumeCreate mocks base method
1987	VolumeInspect mocks base method
1988	VolumeRemove mocks base method
1989	ResolveTask resolves the given Docker container ID .
1990	ResolveContainer resolves a container with the given ID .
1991	synchronizeState synchronizes the container stats .
1992	addAndStartStatsContainer adds stats to the container
1993	MustInit initializes the container stats
1994	waitToStop waits until the container is stopped .
1995	removeAll removes all tasks from the container
1996	addContainerUnsafe adds a container to the container
1997	addToStatsContainerMapUnsafe adds a container to the container .
1998	GetInstanceMetrics returns the metrics for the specified container
1999	GetTaskHealthMetrics returns the health metrics for the given container
2000	stopTrackingContainerUnsafe is used to stop the container .
2001	handleDockerEvents is used to handle docker events
2002	removeContainer removes a container
2003	newDockerContainerMetadataResolver returns a new DockerContainerMetadataResolver .
2004	taskContainerMetricsUnsafe returns the container metrics for the given container .
2005	resetStatsUnsafe resets the stats for the container .
2006	ContainerDockerStats returns the stats for a container
2007	newMetricsMetadata returns a new MetricsMetadata .
2008	compareSemver returns the number of semver .
2009	ExtractVersion extracts the version number from a string .
2010	GetIAMRoleCredentials returns the IAM role credentials
2011	GenerateCredentialsRelativeRelativeURI returns a string representation of the CredentialsRelativeURL .
2012	IAMRoleCredentialsFromACs returns an IAMRoleCredentials from an AWS CloudFormation template
2013	SetTaskCredentials implements the TaskManager interface .
2014	GetTaskCredentials returns a TaskCredentials with the given ID .
2015	RemoveCredentials removes credentials from the pool
2016	verify response fields
2017	Getpid mocks base method
2018	Getpid indicates an expected call of Getpid
2019	AppMeshFromACS creates a new AppMesh from an app .
2020	buildAppPorts builds the list of available ports .
2021	buildEgressIgnoredIPs builds a list of EgressIgnoredIPs .
2022	buildEgressIgnoredPorts returns a slice of EgressIgnoredPorts .
2023	appendDefaultEgressIgnoredIPs appends the list of defaultEgressIPs .
2024	IsInstanceTypeChangedError returns true if the given error occurred .
2025	NewNamedError returns a DefaultNamedError
2026	Error implements the error interface for ResourceInitError .
2027	BuildLinuxResourceSpec builds a LinuxResourcesSpec
2028	buildExplicitLinuxCPUSpec builds a Linux CPU CPU CPU .
2029	buildImplicitLinuxCPUSpec builds a Linux CPU CPU CPU .
2030	buildLinuxMemorySpec builds a Linux MemoryMemorySpec .
2031	platformHostConfigOverride is part of the TaskConfig interface .
2032	OverrideCgroupParent overrides the default CgroupRoot .
2033	GetMACAddress returns the MAC address for the given device .
2034	retrieve retrieves the macaddress for the given macaddress .
2035	retrieveOnce retrieves the mac address from the device .
2036	IsValidNetworkDevice checks if the device is valid
2037	ReceiveMessage implements the EventLogger interface .
2038	GetAuthorizationToken retrieves the authorization token from the registry
2039	NewMockEngine creates a new mock instance
2040	ContainerDockerStats mocks base method
2041	ContainerDockerStats indicates an expected call of ContainerDockerStats
2042	GetInstanceMetrics mocks base method
2043	GetInstanceMetrics indicates an expected call of GetInstanceMetrics
2044	GetTaskHealthMetrics mocks base method
2045	RetryWithBackoff calls RetryWithBackoff function .
2046	RetryWithBackoffCtx attempts to retry a retryable backoff .
2047	RetryNWithBackoff calls RetryNWithBackoff function .
2048	RetryNWithBackoffCtx will retry a function that will retry the backoff function .
2049	AddJitter adds a jitter to the given duration .
2050	NewMockIOUtil creates a new mock instance
2051	WriteFile mocks base method
2052	WriteFile mocks base method
2053	DescribeECSTagsForInstance returns the tags for the specified instance ID .
2054	TaskContainerStatsHandler returns an http . Handler for the given container .
2055	WriteTaskStatsResponse implements the http . ResponseWriter interface .
2056	Write container stats
2057	NewTaskResponse creates a new task response
2058	NewContainerResponse creates a new container response
2059	NewPortBindingsResponse returns a slice of PortBindings
2060	NewVolumesResponse returns a list of VolumeResponse
2061	NewTasksResponse returns a new TasksResponse
2062	NewPublishMetricsRequest creates a new instance of PublishMetricsRequest
2063	NewPublishHealthMetricsRequest creates a new instance of PublishHealthMetricsRequest
2064	StartListening starts an infinite buffer .
2065	CopyEvents copies events from the buffer .
2066	Consume waits for the buffer to be consumed .
2067	ContainerStatsHandler returns a handler for container stats .
2068	NewMetricsClient returns a new MetricsClient
2069	NewMockECDKDK creates a new mock instance
2070	NewMockECRFactory creates a new mock instance
2071	GetClient indicates an expected call of GetClient
2072	NewMockECRClient creates a new mock instance
2073	GetCredentialsEventType returns the CredentialsEventType for the given role type .
2074	NewMockGPUManager creates a new mock instance
2075	GetDevices mocks base method
2076	GetGPUIDsUnsafe mocks base method
2077	SetDevices indicates an expected call of SetDevices
2078	SetDriverVersion mocks base method
2079	SetDriverVersion indicates an expected call of SetDriverVersion
2080	SetGPUIDs mocks base method
2081	SetRuntimeVersion mocks base method
2082	NewMockRoundTripper creates a new mock instance
2083	RoundTrip mocks base method
2084	RoundTrip indicates an expected call of RoundTripper
2085	NewMockNetLink creates a new mock instance
2086	LinkByName mocks base method
2087	LinkByName indicates an expected call of LinkByName
2088	LinkList mocks base method
2089	LinkList indicates an expected call of LinkList
2090	NewMockCNI creates a new mock instance
2091	AddNetwork mocks base method
2092	AddNetworkList mocks base method
2093	DelNetwork mocks base method
2094	DelNetwork indicates an expected call of DelNetwork
2095	DelNetworkList mocks base method
2096	NewLRUCache creates a new cache .
2097	Get returns the value associated with the given key .
2098	Set adds a value to the cache .
2099	Delete removes a key from the cache .
2100	StartTimer starts a timer .
2101	IsSent returns true if the attachment is sent
2102	SetSentStatus sets the AttachmentStatus field s value .
2103	StopAckTimer stops the timer .
2104	HasExpired returns true if the entity is expired .
2105	String returns the string representation of the Encode .
2106	stringUnsafe returns a string representation of an Encode
2107	StartMetricsSession starts the metrics session
2108	StartSession starts a telemetry session
2109	heartbeatHandler creates a new HeartbeatHandler .
2110	AckPublishMetricHandler creates a new AckPublishMetricHandler .
2111	AckPublishHealthMetricHandler creates a new AckPublishHealthMetricHandler .
2112	anyMessageHandler is called when a client is received
2113	formatURL returns a string representation of the endpoint
2114	native returns the current GtkStackSwitcher .
2115	native returns a copy of the combo box .
2116	native returns a copy of the box .
2117	native returns a copy of the AppChooser .
2118	native returns a copy of the AppChooserWidget .
2119	native returns a copy of the PixbufFormat .
2120	native returns a copy of the alignment .
2121	native returns the current GtkMisc object .
2122	native returns the current application window .
2123	TypeString returns the string representation of the Variant .
2124	GetString returns the string representation of the Variant .
2125	GetStrv returns a slice of strings
2126	IsType returns true if the given type is a type .
2127	native returns the current GdkFrameClock object .
2128	native returns the native GoFrameTimings .
2129	native returns the native GdkMonitor .
2130	native returns a copy of the screen .
2131	native returns the GVariantBuilder .
2132	String returns the string representation of the Status .
2133	ToError implements Status .
2134	native returns the current GtkLevelBar .
2135	native returns a copy of the AccelGroup .
2136	native returns a copy of the AccelMap .
2137	dataRaw returns the value of the list .
2138	native returns the current context .
2139	native returns the current GtkTextView .
2140	String returns a string representation of the VariantType .
2141	Native returns the current GtkApplication object .
2142	native returns a copy of the MenuShell
2143	native returns the current GtkStyleContext .
2144	NewMatrix creates a new matrix .
2145	native returns a copy of the matrix .
2146	InitTranslate initializes the matrix .
2147	InitScale initializes the matrix .
2148	InitRotate initializes the matrix .
2149	Translate moves the matrix to the matrix .
2150	Scale scales the matrix .
2151	Rotate rotates the matrix .
2152	Multiply multiplies two matrix .
2153	native returns a copy of the PaperSize .
2154	native converts the GLKContext to a GLKContext .
2155	native returns a copy of the ButtonBoxBox .
2156	native returns a copy of the TextIterIter .
2157	native returns a copy of this MainContext .
2158	native returns a pointer to a GtkTreeColumn .
2159	native returns the current GVariantIter .
2160	Next returns the next element .
2161	LookupAction looks up a action by name .
2162	AddAction adds an action to the action map .
2163	RemoveAction removes a action .
2164	native returns a copy of the surface .
2165	NewSurface creates a new surface .
2166	nativeToDialog returns the gtk_widget object .
2167	AddFont adds font path to font
2168	native returns a copy of the label .
2169	native returns a copy of the VariantDict .
2170	native returns a copy of the Actionable .
2171	native returns a copy of the header .
2172	native returns a copy of the list .
2173	native returns a deep copy of the list .
2174	native returns a copy of the view .
2175	native returns a pointer to a GtkSearchBar .
2176	BindProperty binds the given object to the target object .
2177	Get source object
2178	GetTarget returns the target binding .
2179	GetFlags returns the flags of the binding .
2180	native returns a copy of the FontChooser .
2181	native returns a pointer to a GtkFont .
2182	ChangeActionState changes the action state .
2183	Activate the action group
2184	native returns the current Gtk widget .
2185	native returns a copy of the allocation .
2186	native returns the current GtkArea .
2187	native returns a copy of the TreeView .
2188	SetSearchEqualSubstringMatch sets the search function to match the search function .
2189	goMarshal is used to marshal the given function .
2190	gValueSlice converts a slice of values into a slice .
2191	IdleAdd creates a new source with the given arguments .
2192	TimeoutAdd adds a timeout to the source .
2193	sourceAttach attaches the source to the source .
2194	native returns a copy of the object .
2195	Take returns a pointer to a pointer to a pointer .
2196	GetPropertyType returns the type of a property
2197	Native returns the value of this object .
2198	InitI18n initializes a new I18n .
2199	Local returns the local locale .
2200	native returns the native GoShortcutsSection .
2201	native returns the native Go ShortcutsGroup .
2202	native returns the native GoShortcuts .
2203	SimpleActionGroupNew creates a new SimpleActionGroup
2204	ActionNameIsValid returns true if the action name is valid .
2205	GetName returns the name of the action .
2206	GetState returns the current state .
2207	GetStateHint returns the current state of the action .
2208	GetParameterType returns the VariantType field if it s non - nil zero value otherwise .
2209	GetStateType returns the current state type .
2210	ChangeState changes the current state .
2211	Activate activates the action .
2212	SimpleActionNew creates a new SimpleAction .
2213	Simple Action Action
2214	SetEnabled sets the enabled action .
2215	PropertyActionNew creates a new property action .
2216	native returns a copy of this Adjustment .
2217	native returns the current GtkAssistant .
2218	native returns a copy of the bin .
2219	native returns a copy of the ColorButton .
2220	native returns a copy of the cellRend .
2221	native returns a copy of the cellRend .
2222	native returns a copy of the cellRendbuf .
2223	native returns a copy of the cellRendText .
2224	native returns a copy of the cellRendTend .
2225	native returns a copy of this CheckButton .
2226	native returns a copy of this CheckMenuItemItem .
2227	native returns a copy of the clip .
2228	WaitIsTextAvailable returns true if the current Clipboard is available .
2229	WaitForText returns the text for the clipboard
2230	WaitIsRichTextAvailable returns true if the buffer has been read .
2231	WaitIsUrisAvailable returns true if the clipboard is available .
2232	WaitIsImageAvailable returns true if the clipboard is available .
2233	SetImage sets the image
2234	WaitForImage waits for the given image and returns it .
2235	WaitIsTargetAvailable returns true if the target is target .
2236	WaitForContents returns a copy of the contents of the clipboard .
2237	native returns a copy of the container .
2238	native returns the default CssProvider .
2239	native returns a copy of the dialog .
2240	native returns the current GtkEntry .
2241	native returns a copy of the EntryBuffer .
2242	native returns a copy of the EntryCompletion .
2243	native returns a pointer to a GtkEvent .
2244	native returns the current GtkExpander .
2245	native returns a copy of the FileChooser .
2246	native returns a copy of the FileChooserButton .
2247	native returns a copy of the FileChooserDialog .
2248	native returns a copy of the FileChooserWidget .
2249	native returns a copy of the FileFilter .
2250	native returns a copy of the frame .
2251	native returns the native image .
2252	native returns a pointer to a GtkGrid .
2253	native returns the native image .
2254	SetSize sets the size of the layout .
2255	GetSize returns the size of the layout .
2256	native returns a copy of this LinkButton .
2257	native returns a copy of the listStore .
2258	native returns a copy of the MenuButton .
2259	native returns a copy of the MenuItem .
2260	SetLabel sets the label
2261	GetLabel returns the label
2262	native returns a pointer to a GtkMessageDialog .
2263	native returns the current GtkNotebook .
2264	Native returns the window .
2265	native returns a copy of the Orientable interface .
2266	native returns a copy of the overlay .
2267	native returns a copy of the panics .
2268	native returns the current GtkProgressBar .
2269	native returns a pointer to a GtkButton .
2270	native returns a pointer to a GtkMenuItem .
2271	native returns a copy of the range .
2272	NativeCloser returns a new GtkCloser .
2273	Native returns a new GtkFilter .
2274	native returns a copy of the scale .
2275	native returns a copy of the scrollbar .
2276	native returns a copy of the ScrolledWindow .
2277	native returns the native Go search entry .
2278	native returns a copy of the selection data .
2279	GetData returns the data of the selection data
2280	GetData returns the data for a given pointer .
2281	SetData sets the data for the given element .
2282	DragSetIconPixbuf sets the color of the image .
2283	native returns the current GtkSeparator .
2284	native returns a copy of the separator .
2285	native returns a copy of the separator .
2286	native returns a copy of the spin button .
2287	native returns a copy of the Spinner .
2288	native returns a pointer to a GtkStatus .
2289	native returns a copy of the switch .
2290	native returns a copy of the TextTag .
2291	native returns a copy of the TextTagTable .
2292	native returns a copy of the TextBuffer .
2293	SelectRange selects a TextBuffer .
2294	native returns a copy of the ToggleButton .
2295	native returns the current GtkTool .
2296	native returns a pointer to a GtkTool .
2297	native returns a copy of the ToggleToolButton .
2298	native returns a pointer to a GtkTool .
2299	native returns the current GtkTreeIter .
2300	Native returns the GtkTreeModel .
2301	TreePathFromList creates a TreePath from the given list .
2302	native returns a copy of the TreePath .
2303	GetIndices returns the index of the tree .
2304	native returns a copy of the TreeSelection .
2305	GetPath returns the path of the tree .
2306	GetModel returns the current tree .
2307	Valid returns true if the TreeRowReference is valid .
2308	native returns a copy of the TreeStore .
2309	Insert inserts a new tree .
2310	SettingsGetDefault returns the default settings .
2311	Native returns a copy of the TextMark .
2312	native returns a copy of the pattern .
2313	native returns a copy of the window .
2314	native returns a GdkAtom .
2315	GdkAtomIntern creates a new Atom from a given atom .
2316	native returns the native device .
2317	native returns a copy of the cursor .
2318	native returns the current GdkDeviceManager .
2319	native returns the native GdkDisplay object .
2320	native returns the current GdkDragContext .
2321	native returns the native GdkEvent .
2322	XRoot returns the xroot value of x .
2323	YRoot returns the YAR root .
2324	SetColors sets the color
2325	native returns a copy of the window .
2326	ClosureNew creates a new Closure .
2327	native returns a copy of the color chooser .
2328	native returns a copy of the ColorChooserDialog .
2329	native returns a copy of the source .
2330	Translate adds a translation to the context .
2331	Scale scales the context .
2332	Rotate rotates the given angle .
2333	Transform applies the given matrix to the given matrix .
2334	SetMatrix sets the matrix .
2335	GetMatrix returns the matrix .
2336	UserToDevice converts a device to a device .
2337	UserToDeviceDistance returns the distance between the current device .
2338	DeviceToUser converts a device to a device .
2339	DeviceToUserDistance returns the device to the device .
2340	Draw draws an image .
2341	Length returns the length of the stream .
2342	Decode decodes the audio stream .
2343	IsMouseButtonPressed returns true if the mouse button is pressed .
2344	Touches returns a slice of touchpoints .
2345	paeth converts b to b .
2346	filterPaeth is a helper function to filter the pixel data from pixel .
2347	MipmapLevel returns the depth of the mipmap .
2348	showConsoleWindowOnWindows will hide windows window on windows .
2349	DepthMask sets the depth of the given flag .
2350	EdgeFlag sets the edge flag .
2351	Tex image
2352	QuadVertices returns a slice of vertices .
2353	PutVertex implements the Image interface .
2354	scaleUpdater is used to scale up a scale update .
2355	NewBoard creates a new Board .
2356	Update updates the board .
2357	Move moves the board to the board .
2358	Size returns the size of the board .
2359	Draw draws the board image .
2360	ClearIndex clears the index .
2361	CreateProgram creates a new program
2362	DebugMessageCallback registers a callback for debug message
2363	GetError returns the value of the error .
2364	GetGraphicsResetStatus returns the value of GraphicsResetStatus
2365	LineWidth sets the width of the given width .
2366	PassThrough allows you to pass through the passed token
2367	PointSize sets the size of the given size .
2368	IsReady returns true if the context is ready .
2369	NewPlayerFromBytes creates a player from a context .
2370	Close closes the player .
2371	Seek moves the player at the given offset .
2372	decode decodes the image .
2373	Decode decodes an image from r .
2374	DecodeConfig decodes an image from r .
2375	Add adds a new color .
2376	IsButtonPressed returns true if the game is pressed .
2377	ButtonName returns the name of the game .
2378	AppendHookOnBeforeUpdate appends a hook to the given function .
2379	DebugPrint writes a string to the image .
2380	GamepadIDPressedPressed returns the ID of the game .
2381	Seek implements the Stream interface .
2382	decode decodes the audio stream .
2383	MovePieceToLeft moves the piece to the given position .
2384	RotatePieceRight returns the angle of the given piece .
2385	RotatePieceLeft returns the angle between two points .
2386	flushable returns true if the line block has been flushed .
2387	flushableLine returns true if the block is a block .
2388	flushLine is used to flush the line .
2389	intersect returns the intersection between two lines .
2390	rayCasting returns a slice of rays .
2391	Str returns the string representation of a string .
2392	Close closes the stream .
2393	NewWorld creates a new world .
2394	init initializes the world .
2395	Update updates the world .
2396	Draw draws the world .
2397	DrawLine draws an image .
2398	DrawRect draws a rectangle .
2399	NewGame creates a new game .
2400	Update updates the game .
2401	Draw draws the game image .
2402	IsKeyJustReleased returns true if the key has been released .
2403	KeyPressDuration returns the duration of a key .
2404	IsMouseButtonJustReleased returns true if the mouse button is pressed .
2405	MouseButtonPressDuration returns the current mouse button .
2406	JustConnectedGamepadIDs returns the IDs of the game .
2407	IsGamepadJustDisconnected returns true if the given id is a valid game .
2408	IsGamepadPressPressed returns true if the given button is pressed .
2409	IsGamepadButtonJustReleased returns true if the game has been released .
2410	GamepadButtonPressDuration returns the duration of the game button .
2411	JustPressedTouchIDs returns a slice of intids .
2412	IsTouchJustReleased returns true if the given id is a touch .
2413	TouchPressDuration returns the touch duration for the given id .
2414	viewportSize returns the size of the image .
2415	Loop starts a goroutine .
2416	Run runs the given function .
2417	Internal image size
2418	square computes the square of the given frequency .
2419	playNote returns the text for the given score .
2420	assumeAt returns the pitch at the given frequency .
2421	playNote tracks a music song
2422	Draw draws an image .
2423	String returns a string representation of the GeoM .
2424	Reset resets the geometry .
2425	Concat concatenates two GeoM .
2426	Rotate rotates the geometry .
2427	Invert returns a copy of the geometry .
2428	ScaleGeo scales the given coordinates .
2429	TranslateGeo returns a GeoM GeoM .
2430	RotateGeo rotates the given angle .
2431	newFramebufferFromTexture creates a framebuffer from the given texture .
2432	newScreenFramebuffer creates a new framebuffer .
2433	aque returns true if the image is opaque
2434	writeIDATs writes an ID to the encoder .
2435	levelToZlib returns the level of zlib .
2436	Encode encodes the given image .
2437	Encode encodes the image .
2438	NewImage creates a new image
2439	NewScreenFramebufferImage returns a new ImageFramebuffer instance
2440	internalSize returns the size of the image .
2441	makeStale makes sure the image is stale .
2442	ReplacePixels replaces the image with the given width .
2443	DrawTriangles draws a triangles image .
2444	appendDrawTrianglesHistory appends the images to the image .
2445	makeStaleIfDepending on the image .
2446	readPixelsFromGPU reads the image from the image .
2447	resolveStale checks if the image is stale
2448	dependsOn returns true if the image is in the image .
2449	backingImages returns a map of ImageImages .
2450	hasDependency returns true if the image doesn t exist .
2451	Dispose the image .
2452	IsInvalidated returns true if the image is invalid .
2453	NewImage creates a new image
2454	Pixels returns the contents of the image .
2455	CopyPixels copies the image into the image .
2456	Pos returns the position of the tile .
2457	NextPos returns the next position .
2458	NewTile creates a new tile .
2459	MoveTiles moves the tiles at the given dir .
2460	Update updates the current tile .
2461	String returns a string representation of a ColorM .
2462	ScaleColor scales a color .
2463	TranslateColor converts a color .
2464	RotateHue rotates a new color .
2465	availableFilename returns the filename for the given prefix .
2466	appMain is part of the interface .
2467	repeatingKeyPressed returns true if the key is pressed .
2468	totalBytes returns the total number of bytes .
2469	newArrayBuffer creates a new buffer buffer .
2470	enable enables the layout of the buffer .
2471	disable disables the layout .
2472	reset resets the current state .
2473	areSameFloat32Array returns true if two floats are equal .
2474	NewInfiniteLoopWithIntro creates a new infinite loop .
2475	Read implements io . Reader
2476	Seek implements the Seek interface .
2477	remove removes the image .
2478	resolveStaleImages resets the old images .
2479	MoveForward moves the player to the player .
2480	RotateRight moves the player to the player .
2481	RotateLeft moves the player to the player .
2482	updateGroundImage updates the ground image .
2483	drawGroundImage draws an image .
2484	String returns the string representation of the dir .
2485	Update updates the mouse .
2486	Dir returns the dir of the input .
2487	Read implements io . Reader
2488	Size returns the size of the image .
2489	Fill implements the Image interface .
2490	Bounds returns the bounds of the image .
2491	Dispose the image
2492	NewImage creates a new Image .
2493	makeVolatile makes sure the image is valid .
2494	isFullscreen returns true if the user is full .
2495	glfwSize returns the size of the window .
2496	getScale returns the scale of the screen .
2497	actualScreenScale returns the size of the screen .
2498	setScreenSize sets the size of the user .
2499	currentMonitor returns the current monitor .
2500	CopyImage returns a copy of the image .
2501	appendVertices adds vertices to the queue .
2502	EnqueueDrawTrianglesCommand adds the given graphics to the image queue .
2503	Enqueue adds a command to the queue .
2504	Flush flushes all commands .
2505	Exec executes the DrawTriangles command .
2506	CanMerge returns true if the image is merged with the given image .
2507	Exec replaces the image with the specified offset .
2508	Exec executes the command .
2509	Exec is part of the interface .
2510	Exec executes the command .
2511	Executes the screenbuffer image .
2512	schemaHostNetworkPolicy returns a map of HostNetworkPolicy .
2513	expandHostNicFailureCriteria returns a new HostNicFailureCriteria .
2514	flattenHostNicFailureCriteria recursively recursively recursively recursively .
2515	expandHostNicOrderPolicy creates a HostNicPolicyPolicy .
2516	FlattenHostNicOrderPolicy is a helper function to flatten all the fields of the given resource .
2517	expandHostNicTeamingPolicy creates a HostNicPolicy object
2518	FlattenHostNicTeamingPolicy is a helper function to flatten a hostname policy .
2519	expandHostNetworkSecurityPolicy creates a HostNetworkSecurityPolicy object
2520	flattenHostNetworkSecurityPolicy updates the host security policy
2521	expandHostNetworkTrafficShapingPolicy returns a new HostNetworkTrafficPolicy instance
2522	flattenHostNetworkTrafficPolicy flattens a HostNetworkTrafficPolicy .
2523	expandHostNetworkPolicy creates a HostNetworkPolicy .
2524	FlattenHostNetworkPolicy recursively flattens a HostNetworkPolicy .
2525	schemaHostNasVolumeSpec returns a schema for the host .
2526	expandHostNasVolumeSpec returns a new instance of HostNasVolumeSpec .
2527	FlattenHostNasVolume is a helper to flatten host names
2528	isNasVolume returns true if the given type isNasVolumeFileSystem .
2529	expandVMVVSPortgroupPolicy expands a VMware DVSP policy policy
2530	flattenVMwareDVSPortgroupPolicy flattens a VMware DVSP policy .
2531	expandDVPortgroupgroupConfigSpec returns a DVPortgroupConfigSpec from the given schema .
2532	flattenDVPortgroupgroupConfigInfo flattens a DVPortgroupConfigInfo structure .
2533	expandClusterHostGroup expands a cluster group by name .
2534	FlattenClusterHostGroup flattens a cluster host to a cluster
2535	resourceVSphereComputeClusterClusterHostGroupFluteIDFlushID is a helper function that returns the string representation of the cluster .
2536	resourceVSphereComputeClusterHostGroupFetchObjects retrieves a list of ClusterComputeObjects .
2537	netifKey returns a string representation of netifKey
2538	matchGateway returns true if the given address matches the given address .
2539	expandCustomGlobalIPSettings expands custom settings
2540	expandCustomizationLinuxPrep returns a new CustomizationLinuxLinux .
2541	expandCustomGuiRunOnce returns a new CustomizationGuiRunOnce .
2542	expandCustomGuiUnattachedUnattachedUnattached returns a new CustomizationGuiUnattachedUnattachedUnattached .
2543	expandCustomizationIdentification converts a CustomizationIdentification to a CustomizationIdentification .
2544	expandCustomizationUserData returns a CustomizationUserData
2545	expandCustomizationSysprep returns a new CustomizationSysprep .
2546	expandCustomSysprepText returns a CustomizationSysprepText .
2547	expandCustomIPSettingsIPV6Spec is used to expand custom ipv6 address
2548	expandCustomIPSettings is used to expand custom IP addresses
2549	expandSliceOfCustomizationAdapterMapping returns a slice of CustomizationAdapterAdapterMapping
2550	ExpandCustomizationSpec expands custom custom custom custom customization spec
2551	ValidateCustomizationSpec validates a custom customization spec
2552	schemaHostVirtualSwitchBridgeBridge returns a schema . schema for the host .
2553	expandVirtualSwitchSwitchSwitchBeaconConfig returns a new HostVirtualSwitchBeaconConfig instance
2554	FlattenHostVirtualSwitchSwitchBeaconConfig is a helper to flatten a virtual machine .
2555	expandLinkDiscoveryProtocolConfig returns a pointer to a LinkDiscoveryProtocolConfig .
2556	flattenLinkDiscoveryProtocolConfig sets the LinkDiscoveryProtocolConfig .
2557	expandVirtualSwitchSwitchBondBridge returns a new instance of HostVirtualSwitchBondBridge
2558	FlattenHostVirtualSwitchBondBridge is a helper function to flatten the interface .
2559	schemaHostVirtualSwitchSpec returns the schema for the virtual machine .
2560	expandHostVirtualSwitchSpec returns a new instance of HostVirtualSwitchSpec
2561	FlattenHostVirtualSwitchSpec is a helper to flatten all HostVirtualSwitchSpec .
2562	saveHostVirtualSwitchID saves the virtual machine s virtual machine ID
2563	virtualSwitchSwitchIDsFromResourceID converts the given resource ID into a string .
2564	expandStorageDrsVrsVMConfig is used to expand storage drs .
2565	flattenStorageDrsVMConfigInfo flattens the storage DrsVrsVmConfigInfo structure .
2566	resourceVSphereStorageDrsOverrideFlushIDFlushIDFlattenID returns the value of the vSphere cloud .
2567	resourceVSphereStorageDrsOverrideFindEntryFindEntryFindEntry finds the storage drs in the given pod .
2568	NetworkInterfaceSubresourceSchema returns a map of NetworkInterfaceSubresource schemas .
2569	NewNetworkInterfaceSubresource creates a new NetworkInterfaceSubresource .
2570	NetworkInterfaceDiffOperation is part of the interface interface .
2571	Read network interfaces
2572	baseVirtualEthernetCardToBaseDevice converts BaseVirtualEthernetCard to base64 .
2573	baseVirtualDeviceToVirtualEthernetCard converts BaseVirtualEthernetCard to base64 .
2574	virtualEthernetCardString returns the string representation of an interface .
2575	Create creates a new network device .
2576	Read implements the NetworkInterface interface .
2577	Delete deletes a virtual device
2578	ValidateDiff is part of the NetworkInterface interface .
2579	nicUnitRange returns the number of devices in the specified range .
2580	hostStorageSystemFromHostSystemID returns the host storage system .
2581	FromUUID returns an instance of the given UUID .
2582	virtualMachineFromSearchIndex returns a reference to a virtual machine .
2583	virtualMachineFromContainerView retrieves the virtual machine view from the container .
2584	Properties retrieves the properties of a virtual machine .
2585	WaitForGuestIP waits for the given guest IP address to be assigned to the specified guest .
2586	WaitForGuestNet waits for a virtual machine to be assigned to a virtual machine .
2587	Create creates a virtual machine .
2588	Clone clones a virtual machine .
2589	Customize sets custom customization
2590	MoveToFolder moves a virtual machine to a virtual machine .
2591	Relocate is part of the virtual machine .
2592	MOIDForUUID returns the MOID for the given UUID .
2593	UUIDForMOID returns the UUIDForUUID for the given mongo .
2594	MOIDsForUUIDs returns the list of UUIDs for the given UUID .
2595	UUIDsForMOIDs returns the UUIDsForUUIDs for the given mongo .
2596	UUIDsForManagedObjectReferences returns the UUIDsForManagedObjects for the given object .
2597	MOIDs returns the IDs of the MOID results
2598	ManagedObjectReferences returns a list of ManagedObjectReferences
2599	UUIDs returns the list of UUIDs for the given UUID .
2600	FromKey retrieves a port group by its ID
2601	FromMOID returns a DistributedVirtualPortgroup .
2602	FromPath returns the port for a given name
2603	Properties retrieves the properties of the service .
2604	Create creates a new DVPortgroup .
2605	Properties returns the properties of the datastore .
2606	MoveToFolder moves a folder to a folder .
2607	MoveToFolderRelativeHostRelativeHostID moves a folder to a folder .
2608	Browser returns a new host datastore .
2609	SearchDatastore searches for a datastore by name .
2610	FileExists returns true if the datastore exists .
2611	FromPath returns a virtual machine by name .
2612	FromID retrieves a VApp from the VM .
2613	IsVApp returns true if the given resource is a VApp .
2614	Create creates a virtual app .
2615	Update updates the vapp config
2616	ResourceIDString returns a string representation of a resource ID .
2617	SliceInterfacesToStrings converts a slice of strings to a slice of strings .
2618	SliceStringsToInterfaces converts strings to slice of strings
2619	SliceInterfacesToManagedObjectReferences returns a slice of ManagedObjectReferenceReferences
2620	BoolStringStringPtrState returns the string representation of a string .
2621	ValidateBoolStringPtr returns an error if the value is valid .
2622	BoolPolicy creates a BoolPolicy .
2623	GetBoolPolicy returns the value for a given key .
2624	SetBoolPolicy sets the value for a given key .
2625	StringPolicy returns a new StringPolicy instance
2626	GetStringPolicy returns a string representation of a resource .
2627	SetStringPolicy sets the value of a string
2628	LongPolicy creates a new LongPolicy .
2629	GetLongPolicy returns the long policy for the given key .
2630	SetLongPolicy sets the LongPolicy field s value .
2631	AllFieldsEmpty returns true if v is empty .
2632	DeRef returns the value of v .
2633	Less implements the Sort interface .
2634	Swap implements the Sort interface .
2635	hostDatastoreSystemFromHostID returns a HostDatastoreSystem .
2636	availableScsiDisk returns a new instance of the specified volume .
2637	diskSpecForCreate creates a new volume spec .
2638	diskSpecForExtend returns the volume spec for a given volume .
2639	removeDatastore removes a datastore .
2640	queryVmfsDatastoreExtendOptions returns a slice of VfsDatastoreOptions .
2641	extendVmfsDatastore creates a new datastore .
2642	resourceVSphereComputeClusterClusterImportDefaults sets the default values for the given resource .
2643	resourceVSphereComputeClusterApply creates a ClusterComputeResource .
2644	resourceVSphereComputeClusterApplyTags applies the specified resource to the given cluster .
2645	resourceVSphereComputeClusterReadResources reads the specified resource from the cluster .
2646	resourceVSphereComputeClusterApplyAttributes is used to create a new cluster .
2647	resourceVSphereComputeClusterReadAttributes reads the CSphereClusterResource from the given resource .
2648	resourceVSphereComputeClusterGetClusterGetClusterGetCluster returns a ClusterComputeResource .
2649	resourceVSphereComputeClusterFromPath returns a ClusterComputeResource from the given path .
2650	resourceVSphereComputeClusterSaveDatacenter is used to create a new cluster .
2651	resourceVSphereComputeClusterNameAndPath is used to create a new cluster .
2652	resourceVSphereComputeClusterApplyChanges is used to create a new cluster .
2653	resourceVSphereComputeCluteResourceChange is used to create a new cluster .
2654	resourceVSphereComputeClusterValusterValidate checks if the cluster is empty .
2655	resourceVSphereComputeClusterApplyDelete deletes a cluster .
2656	resourceVSphereComputeClusterDataFlushDataFlushData is a helper function for creating a new cluster config .
2657	expandClusterConfigSpecEx returns a new ClusterConfigSpec for the given resource .
2658	FlattenClusterConfigSpecEx is used to flatten a cluster spec
2659	expandClusterDasConfigInfo returns a new ClusterDasConfigInfo .
2660	FlattenClusterDasConfigInfo is a helper function to flatten a cluster datastore .
2661	expandBaseClusterDasAdmissionControlPolicy returns the baseclusterDasPolicy for the given policy .
2662	FlattenBaseClusterDasAdmissionControlPolicy is a helper function to flatten ACLs .
2663	expandClusterFailoverResourcesAdmissionControlPolicy returns a new ClusterFailoverControlPolicy .
2664	FlattenClusterFailoverResourcesAdmissionControlPolicy is a helper function to flatten ACLs .
2665	expandClusterFailoverLevelControlPolicy creates a ClusterFailoverControlPolicy .
2666	FlattenClusterFailoverControlPolicyAdmissionControlPolicy is a helper function to flatten ACLs for cluster .
2667	expandClusterFailoverControlAdmissionControlPolicy returns a new ClusterFailoverControlPolicy .
2668	flattenClusterFailoverControlPolicyControlPolicy is used to flatten ACLs for a cluster
2669	expandClusterDasVMSettings returns a new ClusterDASVMSSettings object
2670	FlattenClusterDASVMSettings flattens a cluster DASVMS settings from a cluster
2671	expandClusterVMComponentProtectionSettings returns a new ClusterVmComponentProtectionSettings
2672	flattenClusterVMComponentProtectionSettings is a helper function for creating a new cluster .
2673	expandClusterVMToolsManagementMonitoringSettings expands cluster settings
2674	FlattenClusterVMToolsManagementMonitoringSettings is a helper function to flatten the given schema .
2675	expandClusterDpmConfigInfo expands cluster dpm config data
2676	flattenClusterDpmConfigInfo converts a ClusterDPMConfig into a struct .
2677	expandClusterDrsConfigInfo returns a new ClusterDrsConfigInfo .
2678	FlattenClusterDrsConfigInfo is a helper function to flatten a ClusterDRSConfigInfo .
2679	expandResourceVSphereVSphereComputeClusterComputeClusterClusterOptions returns a list of options for the specified resource .
2680	expandClusterInfraUpdateHaConfigInfo returns a new ClusterInfraUpdateConfigInfo .
2681	flattenClusterInfraUpdateHaUpdateConfigInfo updates the cluster info for a cluster
2682	expandClusterOrchestrationInfo expands cluster info
2683	FlattenClusterOrchestrationInfo is a helper to flatten a cluster .
2684	expandClusterProactiveDrsConfigInfo returns a new ClusterProactiveDrsConfigInfo .
2685	flattenClusterProactiveDrsConfigInfo is a helper function for creating a new cluster .
2686	Properties returns the properties of a storage pod .
2687	Create creates a new storage pod .
2688	ApplyDRSConfiguration applies the given storage configuration to the given pod .
2689	Rename implements storage . Storage .
2690	MoveToFolder moves a folder to a folder .
2691	StorageDRSEnabled returns true if the pod is enabled .
2692	CreateVM creates a virtual machine .
2693	CloneVM clones a virtual machine .
2694	ReconfigureVM refreshes the virtual machine .
2695	RelocateVM allocates a virtual machine .
2696	HasDiskCreationOperations returns true if there is a volume creation operation
2697	IsMember returns true if the pod is a member .
2698	NewConfig creates a new Config object
2699	Client returns a VSphereClient
2700	EnableDebug enables debug mode
2701	sessionFile returns the session s session file .
2702	vimSessionFile returns the path of the Vim session file .
2703	restSessionFile returns the rest of the rest of the given rest .
2704	SaveVimClient saves a virtual client to disk .
2705	SaveRestClient saves a REST client
2706	restoreVimClient is used to restore a VIM client from the config file
2707	readRestSessionID reads a REST session from the config file .
2708	LoadVimClient loads a vim client from the config
2709	LoadRestClient loads a REST client
2710	SavedVimSessionOrNew creates a new instance of the vSphere client
2711	SavedRestSessionOrNew creates a new REST API client .
2712	wait waits for the response to be completed .
2713	selectEventsForReference returns a list of events for a given entity .
2714	getDatastore returns the datastore s datastore .
2715	resourceVSphereVirtualMachineUpdateReconfig is part of the VSphere interface .
2716	resourceVSphereVirtualMachineCreateWithSDARRS creates a virtual machine .
2717	resourceVSphereVirtualMachineCreateStandard creates a virtual machine .
2718	resourceVSphereVirtualMachineCreateClone creates a virtual machine .
2719	resourceVSphereVirtualMachineRollback creates a virtual machine .
2720	resourceVSphereVirtualMachineUpdateLocationRelocateWithSDRSLocationRelocateRelocateRelocateWithSDRSLocationRelocateSpec replaces the virtual machine with the specified location .
2721	applyVirtualDevices takes a list of virtual devices and applies it to disk .
2722	expandClusterDpmHostConfigInfo converts a ClusterDpmHostConfig into a ClusterDpmHostConfig .
2723	flattenClusterDpmHostConfigInfo converts a ClusterDpmHostConfig into a struct .
2724	resourceVSphereDPMHostOverrideFlushFlushIDFlattenFlattenID is a helper function that returns a string representation of the hostname .
2725	resourceVSphereDPMHostOverrideFindEntryFindEntryFindEntry finds the DPMHostConfig for the given host .
2726	resourceVSphereVirtualDisk creates a new resource .
2727	createHardDisk creates a hard disk .
2728	searchForDirectory searches for a directory for a given directory .
2729	processMountOperations is used to process a mount operation
2730	processUnmountOperations is used to process a unmount operation
2731	isEligibleTagEndpoint returns true if the client is valid .
2732	tagCategoryByName retrieves a category by name .
2733	tag by name
2734	tagsSchema returns a schema . Schema .
2735	tagTypeForObject returns the tag for the given object .
2736	readTagsForResource reads the tags for a resource .
2737	diff returns the diff of two tags .
2738	processAttachOperations is part of the interface .
2739	tagsClientIfDefined returns the tags for the given resource .
2740	processTagDiff is a helper function to process tags .
2741	expandDVSContactInfo returns a DVSContactInfo .
2742	flattenDVSContactInfo recursively recursively recursively recursively .
2743	expandDistributedVirtualHostMemberMemberConfig returns a DistributedVirtualHostMemberConfigSpec from the given map .
2744	flattenDistributedVirtualSwitchHostMember is a helper function to flatten all the fields of a DistributedVirtualHostMember .
2745	expandSliceOfDistributedVirtualSwitchHostConfigSpec returns a slice of DistributedVirtualSwitchHostConfigSpecConfigSpec .
2746	flattenSliceOfDistributedVirtualSwitchHostMember is a helper function to flatten all the hosts from a list of distinct hosts .
2747	expandVMIXIpConfig returns a new VMwareIpfixConfig object
2748	flattenVMwareIpfixConfig sets the VMwareIpfixConfig .
2749	flattenDvsHostInfrastructureResource flattens a DvsHostInfrastructureResource .
2750	expandDVSNameArrayUplinkArrayPplinkPortPolicy returns a slice of DVSNameSlinkPortPolicy
2751	flattenDVSNameArrayUplinkPortArrayPplinkPortPolicy is a helper function to flatten a DVS name
2752	expandVMDVSConfigSpec returns a new VMwareDVSConfigSpec instance
2753	FlattenVMwareDVSConfigInfo flattens a VMware DVSDVSConfig into a VM object
2754	schemaDVSCreateSpec returns a schema representation of the VCS configuration .
2755	expandDVSCreateSpec creates a DVSCreenSpec from the given resource .
2756	getWithRestart returns the value for the given key .
2757	vAppSubresourceSchema returns the schema schema for v1 .
2758	expandVirtualMachineBootOptions expands virtual machine bootstrap options .
2759	FlattenVirtualMachineBootOptions is used to set the virtual machine bootstrap options .
2760	expandVirtualMachineFlagInfo returns a new virtual machine flag .
2761	FlattenVirtualMachineFlagInfo is used to set the virtual machine flag .
2762	expandToolsConfigInfo returns a ToolsConfigInfo for the given resource .
2763	FlattenToolsConfigInfo is a helper function for flatten tools .
2764	schemaVirtualMachineResourceAllocation returns a schema for a virtual machine .
2765	expandVirtualMachineResourceAllocation returns a ResourceAllocationInfo .
2766	expandLatencySensitivity returns a new LatencySensitivity .
2767	flattenLatencySensitivity sets the latencySensitivity .
2768	FlattenVirtualMachineResourceAllocation is a helper function for flattenames the given resource .
2769	flattenVAppConfig is a helper to flatten vapp_v1_Vm_config .
2770	expandVirtualMachineConfigSpec expands virtual machine config spec
2771	FlattenVirtualMachineConfigInfo sets the virtual machine configuration for the given type .
2772	expandVirtualMachineConfigChanged is used to expand virtual machine config changes .
2773	getMemoryReservationLockedToMax returns the value for the given resource .
2774	FromPathOrDefault returns a ResourcePool with the given name .
2775	Properties returns the properties of the resource pool .
2776	ValidateHost validates a host
2777	OSFamily returns the OS family for the given guest .
2778	Create creates a new resource pool
2779	Update updates the resource pool
2780	MoveIntoResourcePool moves a resource pool to the pool .
2781	expandClusterDasVMConfigInfo returns a ClusterDasVmConfigInfo for the given VM .
2782	flattenClusterDasVasVMConfigInfo implements the Config interface for ClusterDASVm .
2783	resourceVSphereHAVMOverrideFlattenFlattenIDFlattenIDFlattenID is a helper function that returns a string representation of the virtual machine .
2784	resourceVSphereHAVMOverrideFindEntryFindFindEntryFindEntry finds the vSphere configuration for the given VM .
2785	schemaHostPortGroupSpec returns the schema for the port group
2786	and expand host port group
2787	FlattenHostPortGroupSpec is a helper to flatten host port groups .
2788	calculatePorts returns the set of ports for the given port group .
2789	ports a port group
2790	saveHostPortGroupID saves the given resource group ID
2791	getPortGroupIDsFromResourceID converts the given resource ID into a string .
2792	BaseFromPath returns the base resource from the given path
2793	BaseFromReference returns an instance of BaseComputeResource
2794	BaseProperties returns the properties of the resource .
2795	BasePropertiesFromReference returns the properties of the resource .
2796	DefaultDevicesFromReference returns the default devices for the given guest .
2797	OSFamily returns the OS support for the given guest .
2798	EnvironmentBrowserFromReference builds an EnvironmentBrowser from the given resource .
2799	Properties returns the properties of the cluster .
2800	Create creates a new cluster .
2801	MoveToFolder moves a folder to a host .
2802	Reconfigure is part of the ClusterComputeResource interface .
2803	Delete deletes the specified resource .
2804	IsMember returns true if the host is a member of the host .
2805	MoveHostsInto moves a host to a host .
2806	MoveHostsOutOf moves the host to a host .
2807	expandVmwareDistributedVirtualSwitchVlanVlanIDSpec is used to expand VmarshalVirtualSwitchVlanVLANs .
2808	FlattenVmarshalVmarshalVmarshalVirtualSwitchVlanIDSpec is an autogenerated conversion function .
2809	expandVmwareDistributedVirtualSwitchTrunkVunkTrunkSpec expands the VmarshalVirtualTrunkSpec to the specified range .
2810	FlattenVmarshalVunkDistributedVirtualSwitchTrunkVunkSpec is a helper function to flatten VLANs .
2811	expandVmarshalVmarshalVmarshalVirtualSwitchPvlanSpec returns a VmarshalVirtualSwitchPvlanSpec .
2812	FlattenVmarshalVmarshalVmarshalVirtualSwitchPvlanSpec is a helper to flatten VmarshalVmarshalVlan virtual machine .
2813	expandBaseVmwareDistributedVirtualSwitchVlanVlanSpec returns the base vlaned virtual machine .
2814	FlattenBaseVmarshalVmarshalVmarshalVirtualSwitchVlanSpec flattens the VmarshalVirtualSwitchVlanSpec from the given schema .
2815	expandDVSFailureCriteria returns the DVSFailureCriteria for the given resource .
2816	flattenDVSFailureCriteria recursively flattens a DVSFailureCriteria .
2817	expandVMUplinkUplinkPortOrderPolicy returns a list of VMware uplink ports .
2818	flattenVMwareUplinkUplinkPortOrderPolicy sets the VMwareUplinkPolicyOrderPolicy field s value .
2819	expandVmwareUplinkPortTeplinkPortTeamingPolicy returns a new VminkUplinkPolicy .
2820	flattenVmwareUplinkUplinkPortTeplinkPolicy flattens a vmarshalUplinkPolicy into a vmapper .
2821	expandDVSSecurityPolicy returns a new DVSSecurityPolicy .
2822	flattenDVSSecurityPolicy flattens a DVSSecurityPolicy into a struct .
2823	expandVMUplinkLacplinkLacplinkLacPolicy expands a VMware UplinkLacp policy .
2824	FlattenVMwareUplinkLacplinkLacpPolicy flattens a VMwareUplinkLacp policy .
2825	expandDVSTransfficPolicyIngressPolicyIngressPolicyIngress returns a pointer to a DVSTrapPolicy instance
2826	flattenDVSTrafficPolicyIngressPolicyIngressPolicyIngress sets the DVSTrapPolicyIngressPolicy field s value .
2827	expandVMDVSPortSetting returns a new VMwareDVSPortSetting
2828	FlattenVMwareDVSPortSetting flattens a VMwareDVSPortSetting from a VMware VM .
2829	expandClusterDrsVrsConfigInfo expands cluster Drs vrs .
2830	FlattenClusterDrsVMConfigInfo is a helper function to flatten cluster drs .
2831	resourceVSphereDRSVMOverrideParseIDParseID parses a string and returns the string representation of the resource .
2832	resourceVSphereDRSVMOverrideFindEntryFindEntryFindEntry finds the DRSVMs for the given VM .
2833	resourceVSphereComputeCliAffinityRuleFuncRuleFluteIDFlushRule returns the value of the given key .
2834	schemaDatastoreSummary returns the schema summary of the datastore .
2835	flattenDatastoreSummary flattens a datastore summary of datastore .
2836	resourceVSphereDatastoreFolderOrStorageClusterPath returns the path to the given resource .
2837	resourceVSphereDatastorePathFromStorageClusterPath reads the data from the datastore .
2838	CdromSubresourceSchema returns a copy of the subresource .
2839	NewCdromSubresource creates a new CdromSubresource
2840	CdromDiffOperation creates a CdromDiffOperation
2841	ValidateDiff validates the CDROM configuration
2842	Create creates a new controller .
2843	Read reads the data from the device
2844	Update implements the Config interface .
2845	Delete deletes a virtual device .
2846	mapCdrom is used to map a Cdromore .
2847	VerifyVAppTransport verifies the VAppTransport .
2848	verifyVAppCdromIos verifies if the given device is valid
2849	DatastorePathFromString returns a DatastorePath from the given path .
2850	IsVmdkDatastorePath returns true if the given path is vmd .
2851	QueryDiskType returns the virtual disk type
2852	Delete deletes a virtual disk
2853	fapfaultFault returns the error if the error occurred .
2854	vmSoapFault returns true if the error occurred .
2855	taskFault returns an error if the task fails .
2856	IsManagedObjectNotFound returns true if the given error occurred .
2857	isNotFoundError returns true if the given error is not found
2858	IsAnyNotFoundError returns true if err is a non - nil error
2859	IsResourceInUseError returns true if the given error occurred .
2860	isConcurrentAccessError returns true if the given error is a concurrent access error .
2861	RenameObject implements the RenameMethod interface .
2862	VaultValidateVirtualCenter is part of the VCenter interface .
2863	parseVersion parses a version string .
2864	parseVersionFromInfo parses a VSphere version and returns it .
2865	ParseVersionFromClient returns a VSphere version from a VM .
2866	String returns a string representation of a VSphereVersion .
2867	ProductEqual returns true if the two VSphereVersion is equal .
2868	After returns true if the vSphere version is greater than or equal .
2869	Equal returns true if two VSphereVersion objects are equal .
2870	expandClusterVMGroup expands a cluster group by name .
2871	FlattenClusterVMGroup flattens a cluster vm .
2872	resourceVSphereComputeClusterGroupFindEntryFindEntryFindEntry finds the VM vSphere VM and returns the corresponding cluster vSphere vm .
2873	resourceVSphereComputeCluteObjectsFetchObjectsFetchObjects retrieves a list of ClusterComputeObjects .
2874	resourceVSphereResourcePoolApplyTags applies a resource pool to a resource pool .
2875	resourceVSphereResourcePoolReadTags reads a resource pool from a resource pool
2876	expandClusterAffinityRule returns a new ClusterAffinityRuleSpec .
2877	FlattenClusterAffinityRuleSpec is a helper function for creating a new ClusterAffinityRuleSpec .
2878	resourceVSphereComputeClusterRuleFindEntryFindEntryFindEntryFindEntry finds the virtual affinity rule for the given key .
2879	ConfigSchema returns a schema . Schema .
2880	VirtualMachineCloneSchema returns a schema for the virtual machine .
2881	ValidateVirtualMachineClone validates a virtual machine .
2882	validateCloneSnapshots validates the given template .
2883	ReferenceProperties returns the properties of the given network .
2884	SystemOrDefault returns the default host system .
2885	Properties returns the host system .
2886	ResourcePool returns a resource pool
2887	hostSystemNameFromID returns the host name for the given ID .
2888	NameOrID returns the name of the host .
2889	EnterMaintenanceMode is used to enter a maintenance mode .
2890	Exit maintenance mode
2891	dvsFromUUID retrieves a vvm_vm_vm_switch virtual machine
2892	dvsFromPath returns the Vmarshall virtual machine from the given path .
2893	dvsProperties retrieves the properties of the virtual machine .
2894	upgradeDVS is used to upgrade a virtual machine .
2895	enableDVSNetworkResourceManagement is used to enable network resources
2896	resourceVSphereDatastoreDatastoreAffinityRuleFuncRuleFunc returns a string containing the value of the given key .
2897	resourceVSphereDatastoreAffinityRuleFindRuleFuncRuleFindEntryFindEntryFindEntryFindEntryFindEntryFindEntryFindEntry finds the value of the given key in the pod .
2898	resourceVSphereDatastoreAffinityRuleFindRuleByName retrieves the list of virtual affinity rules for a given pod .
2899	resourceVSphereDatastoreAffinityRuleFetchObjectsRuleFetchObjects retrieves the data from the given pod .
2900	controllerTypeToClass returns the type of the controller type .
2901	Addr returns the address of the subresource .
2902	HasChange returns true if the given key exists .
2903	GetChange returns the value associated with the given key .
2904	GetWithRestart is part of the Subresource interface .
2905	GetWithVeto implements the Subresource interface for Subresource .
2906	SetRestart sets the restart parameter
2907	Hash returns the hash of the subresource .
2908	computeDevAddr computes the name of the device .
2909	splitDevAddr splits the id of the id and returns the ID of the device ID .
2910	findVirtualDeviceInListControllerSelectFunc returns a function that returns true if the given controller can be found .
2911	findVirtualDeviceInListDeviceSelectFunc returns a function that can be used to find virtual devices in the given controller .
2912	findControllerForDevice finds the controller for the given controller .
2913	FindVirtualDeviceByAddr finds the virtual device with the given address .
2914	FindVirtualDevice finds a virtual device by its ID .
2915	String returns the string representation of the subresource .
2916	swapSCSIDevice swaps the given controller and switches it to the specified controller .
2917	NormalizeSCSIBus normalizes the SCSI controller .
2918	setSCSIBusSharing sets the SIBusSharing field s value .
2919	createSCSIController creates a new instance of the specified controller .
2920	ReadSCSIBusType returns the type of the specified controller .
2921	ReadSCSIBusSharing implements the ReadSIBus interface .
2922	pickSCSIController returns a base controller .
2923	ControllerForCreateUpdate returns the controller for the given controller .
2924	applyDeviceChange applies the given set of changes to the given list .
2925	DeviceListString returns a string representation of a VirtualDeviceList
2926	DeviceChangeString returns a string representation of the given devices .
2927	subresourceListString returns a string representation of a subresource list
2928	scsiControllerListString returns the string representation of the controller .
2929	AppendDeviceChangeSpec appends DeviceChangeSpecSpec to the given slice .
2930	expandClusterDependencyRule returns a new ClusterDependencyRuleInfo .
2931	flattenClusterDependencyRuleInfo flattens a clusterDependencyRuleInfo structure .
2932	resourceVSphereComputeClusterRuleParseIDRuleParseID parses a string and returns the string representation of the given ID .
2933	resourceVSphereComputeClusterRuleFetchObjectsRuleFetchObjects retrieves a list of ClusterComputeObjects from the given cluster .
2934	resourceVSphereDatastoreApplyCreateCreateCreateCreateCreateCreateCreate creates a new storage .
2935	resourceVSphereDatastoreClusterApplyTags applies the specified resource to the specified resource .
2936	resourceVSphereDatastoreClusterReadsReadClusterReads reads a vSphere datastore .
2937	resourceVSphereDatastoreClusterApplyAttributes is the same as ResourceVSphere .
2938	resourceVSphereDatastoreClusterReadsReadClusterReads reads from the given resource .
2939	resourceVSphereDatastoreClusterApplySDusterConfig applies the given datastore config to the specified resource .
2940	resourceVSphereDatastoreClusterHasSDusterConfigChange returns true if the given resource is set .
2941	resourceVSphereDatastoreClusterGetPodGetPodGetPodGetPod returns a StoragePod from the given resource .
2942	resourceVSphereDatastoreClusterGetPodFromPath retrieves a pod from the given path .
2943	resourceVSphereDatastoreClusterSaveNameAndPath is used to create a vSphere datastore .
2944	resourceVSphereDatastoreClusterApplyNameChanges is used to create a new cluster .
2945	resourceVSphereDatastoreClusterChange is used to create a new cluster .
2946	resourceVSphereDatastoreClusterValusterValuster checks if the given pod is empty .
2947	resourceVSphereDatastoreClusterDelete deletes a datastore cluster .
2948	resourceVSphereDatastoreDatastoreClusterFlusterFlusterFlushData is used to create a vSphere datastore .
2949	expandStorageDrsPodConfigSpec returns a new StorageDrsPodConfigSpec suitable for testing .
2950	FlattenStorageDrsPodConfigInfo is a helper function for flatten StorageDrs .
2951	expandStorageDrsAutomationConfig returns a new StorageDrsAutomationConfig .
2952	flattenStorageDrsAutomationConfig is a helper function for flatten StorageDrs .
2953	expandStorageDrsIrsLoadBalanceConfig returns a new StorageDrsIoLoadBalanceConfig object .
2954	flattenStorageDrsIoLoadBalanceLoadBalancerConfig is used to flatten storage data from storage .
2955	expandStorageDrsSpaceLoadBalanceLoadBalancerConfig returns a new instance of StorageDrs .
2956	flattenStorageDrsSpaceLoadBalanceLoadBalancerConfig is used to flatten the storage definition for storage .
2957	expandStorageDrsOptionSpec returns a slice of StorageDrsOptionSpec for the given resource .
2958	FlattenStorageDrsOptionSpec is a helper function to flatten the storage definition for storage .
2959	resourceVSphereFolderMigrateState is used to create a VSphereFolderMigrateState .
2960	resourceVSphereFolderMigrateStateV1 migrates a VSphere VM .
2961	getDatacenter returns the datacenter s datacenter
2962	datacenterFromID retrieves a datacenter by ID
2963	NewDiskSubresource creates a new DiskSubresource .
2964	DiskApplyOperation is part of the Resource interface .
2965	diskApplyOperationDelete deletes a delete operation .
2966	diskApplyOperationCreateUpdateUpdate updates an existing disk .
2967	DiskMigrateRelocateRelocateOperation returns a list of disks that match the specified resource .
2968	DiskCloneRelocateOperation returns a list of disks that match the specified resource .
2969	DiskImportOperation is part of the Resource interface .
2970	ReadDiskAttrsForData returns a map of disks for the given data .
2971	Create creates a new disk .
2972	Read implements the DiskSubresource interface .
2973	Update implements the DiskSubresource interface .
2974	Delete deletes the specified device .
2975	DiffExisting implements the DiskSubresource interface for DiskSubresource .
2976	DiffGeneral returns the diff of the disk subresource .
2977	normalizeDiskDatastore normalizes disk datastore .
2978	Relocate implements the DiskSubresource interface .
2979	String returns the string representation of the disk .
2980	expandDiskSettings expands disk settings to disk .
2981	createDisk creates a new virtual disk .
2982	assignDisk assigns a controller to disk .
2983	findControllerInfo returns the controller info for the controller .
2984	diskRelocateListString returns a string representation of diskRelocateSpec .
2985	diskRelocateString returns the string representation of a disk .
2986	Less returns true if the given index is in the list .
2987	Swap implements the sort . Interface interface .
2988	Less implements the sort . Interface .
2989	Swap swaps the index and j .
2990	datastorePathHasBase returns true if b is a base path .
2991	findVirtualDisk returns the virtual disk for the given list .
2992	diskCapacityInGiB returns the size of the given disk .
2993	hostNetworkSystemFromHostSystem returns the host system .
2994	hostNetworkSystemFromHostSystemID returns the host system system system .
2995	hostVSwitchFromName retrieves the virtual network switch for the given name .
2996	hostPortGroupFromName retrieves the hostgroup from the given namespace .
2997	networkObjectFromHostSystem returns the network object for the given host name .
2998	resourceVSphereLicenseUpdate is used to update a VSphere license
2999	isKeyPresent checks if the given key exists
3000	UpdateLabel updates a label
3001	DecodeError decodes a license manager .
3002	resourceVSphereVSphereVContainerApplyTags processes a VSphere VSphere VSphere VM .
3003	resourceVSphereVSphereVContainerRead reads a VSphere VSphere VSphere VSphere VM .
3004	expandClusterVMHostRuleInfo expands cluster rule rules
3005	FlattenClusterVMHostRuleInfo is a helper function to flatten the given schema .
3006	resourceVSphereVirtualMachineMigrateState is used to create a virtual machine .
3007	migrateVSphereVirtualMachineStateV3 is used to migrate vSphere state .
3008	NewEnvironmentBrowser creates a new environment browser .
3009	DefaultDevices returns the default devices for the given key .
3010	OSFamily returns the name of the given guest .
3011	QueryConfigOptionDescriptor returns a list of virtual machine config option descriptions
3012	RootFromDatacenter implements the RootPath interface for RootPath .
3013	PathFromDatacenter returns the path from the given datacenter .
3014	SplitDatacenter splits the given inventory path .
3015	SplitRelativeFolder returns the relative path of the given inventory path .
3016	NewRootFromPath creates a new root path from the given path .
3017	datacenterPathFromHostSystemID returns the path for the given host .
3018	datastoreRootPathFromHostPath returns the root path for the given host .
3019	validateDatastoreFolder validates a folder .
3020	validateHostFolder validates a host .
3021	validateVirtualMachineFolder validates a virtual machine .
3022	validateNetworkFolder validates a network folder .
3023	NormalizePath returns the path of the given value .
3024	MoveObjectTo moves the object to the given folder .
3025	Properties returns the properties of a folder .
3026	FindType returns the type of the given folder .
3027	ToServerListQuery returns a string representation of the server .
3028	Index returns the index of the given values .
3029	Any returns true if all the values in the given list .
3030	client returns an HTTP client for the given path .
3031	lookupProject returns the project id for a project
3032	lookupZones returns a list of zones for a given project
3033	lookupAddrs returns the list of addresses for the specified zone .
3034	New returns a new Discover instance
3035	WithUserAgent sets the user agent
3036	WithProviders returns an Option that sets the provider s providers .
3037	Names returns the names of the provider .
3038	Help returns a string representation of the Discover .
3039	Addrs returns a list of all known providers .
3040	String returns a string representation of the Config .
3041	PodAddrs returns a list of pod addresses .
3042	argsOrEnv returns the environment variable for the given environment variable .
3043	Addrs returns a list of addresses for the given service .
3044	setLog sets the logger
3045	discoverErr returns an error if the error is not found
3046	valueOrEnv returns the value of the environment variable
3047	newVSphereClient creates a vSphere client
3048	newVimSession creates a new vSphere client
3049	newRestSession creates a new REST client .
3050	Addrs returns the address of the provider .
3051	tagIDFromName returns the tag ID for a given category .
3052	tagCategoryByName retrieves a category by name .
3053	tagByName retrieves a tag by name .
3054	virtualMachineIPsForTag returns the IP addresses for the specified tag .
3055	virtualMachinesForTag returns a list of virtual machines for the specified tag .
3056	ipAddVirtualMachines returns a list of IP addresses for virtual machines .
3057	virtualMachineFromMOID retrieves a virtual machine from a VM .
3058	virtualMachineProperties retrieves the properties of a virtual machine .
3059	buildAndSelectGuestIPs builds a list of IP addresses for a virtual machine .
3060	skipIPAddr returns true if the IP address is skipped .
3061	virtualMachineNames returns a list of virtual machine names .
3062	validateAndWrapHandler returns a handler that invokes the handler .
3063	validateAndWrapHandlers returns a slice of handlers that can be used to wrap the given handlers .
3064	NewWithLogger creates a new Macaron instance
3065	Handlers adds handlers to the middleware .
3066	Use adds a new handler to the middleware .
3067	ServeHTTP implements the http . Handler interface .
3068	SetURLPrefix sets the URL prefix for the given prefix .
3069	SetConfig sets the configuration for the given source .
3070	String returns the string representation of the request body .
3071	RemoteAddr returns the remote address
3072	HTML renders the HTML page .
3073	HTMLSet renders a set of status code .
3074	Query returns the request form
3075	QueryTrim returns a string with the given name .
3076	QueryStrings returns a slice of strings
3077	QueryEscape is part of the Query interface .
3078	QueryBool returns true if the given name exists .
3079	QueryInt returns the value of the query .
3080	QueryInt64 returns int64 value
3081	QueryFloat64 returns the float64 value
3082	SetParams sets the value for the given name .
3083	GetFile is part of the request .
3084	SaveToFile saves a file to disk .
3085	GetCookie gets cookie
3086	GetCookieInt returns the value of a cookie
3087	GetCookieInt64 returns the value of a cookie
3088	GetCookieFloat64 gets a float64 value
3089	SetSecureCookie sets the value of the cookie
3090	GetSecureCookie returns the cookie with the given key .
3091	SetSuperSecureCookie sets the cookie with the given value .
3092	GetSuperSecureCookie returns the cookie with the given secret .
3093	ServeContent implements the http . Handler interface .
3094	ServeFileContent implements the http . Handler interface .
3095	ServeFile serves a file
3096	ChangeStaticPath changes the current path to the current path
3097	getNextWildcard parses a wildcard pattern .
3098	getRawPattern converts a raw string to a raw string
3099	URLPath returns the path of the leaf .
3100	NewRouteMap creates a new route map
3101	getLeaf returns the leaf of the route .
3102	add adds a route to the route .
3103	Name sets the name of the route .
3104	handle adds a route to the router .
3105	Handle registers a handler for the given route .
3106	Combine returns a new ComboRouter .
3107	NotFound adds handlers to the router .
3108	InternalServerError sets the error handler for the router .
3109	URLFor returns the URL for the named route .
3110	Name sets the name of the route
3111	NewResponseWriter creates a new ResponseWriter .
3112	Logger creates a new Logger .
3113	NewTplFile creates a new TplFile
3114	NewTemplateFileSystem returns a new TemplateFileSystem .
3115	NewTemplateSet returns a new TemplateSet .
3116	GenerateETag generates an etag for the given file .
3117	Populate populates values from the given values .
3118	String returns a string representation of the object .
3119	Provide implements the Graph interface .
3120	Populate populates the graph .
3121	Objects returns all the objects in the graph .
3122	newPubSub creates a new pubsub subscription
3123	Stat implements the PubSub interface .
3124	New creates a new app .
3125	configure configures the config file .
3126	ParseConfig parses the prometheus config .
3127	ReloadConfig reloads the config
3128	stopListeners stops the app .
3129	MarshalText implements the encoding of Offset .
3130	UnmarshalText sets the Offset field s value .
3131	MarshalText implements the encoding of Protocol .
3132	UnmarshalText implements Protocol . Unmarshaler
3133	UnmarshalText unmarshals a string into a Duration .
3134	NewOptions returns a new Options instance
3135	Stat implements Kafka .
3136	New creates a new cache .
3137	SetMaxSize sets the maximum size of the cache
3138	GetShard returns a Shard with the given key .
3139	Add adds points to the cache .
3140	Pop removes a point from the cache .
3141	ParseCarbonlinkRequest parses a carbonlink request .
3142	NewCarbonlinkListener returns a new CarbonlinkListener
3143	OnePoint creates a new point .
3144	NowPoint returns a pointer to a new point .
3145	Copy returns a copy of this Points .
3146	ParseText parses a string into a Point
3147	Eq returns true if two points are equal .
3148	Match returns a Schema matching the given metric .
3149	ParseRetentionDefs parses a list of retention definitions
3150	RestoreFromFile restores the contents of the given file .
3151	RestoreFromDir restores a directory from the app .
3152	Restore implements the App interface .
3153	Root is a helper function for testing
3154	delete deletes the given key .
3155	NewWhisper creates a new Whisper
3156	NewWhisperAggregation creates a new WhisperAggregation
3157	match returns the match for the given metric .
3158	oldPlain returns a slice of points to a point .
3159	UpdateIntegrationPD request
3160	GetIntegrationPD returns the details of the integration .
3161	Create an IntegrationSlack request
3162	UpdateIntegrationSlack updates an IntegrationSlackRequest .
3163	GetIntegrationSlack returns the IntegrationSlackRequest field if it s non - nil zero value otherwise .
3164	CreateIntegrationAWSAccount creates a new IntegrationAWSAccount instance
3165	GetIntegrationAWSAccount retrieves all the AWS AWSAccount items .
3166	DeleteIntegrationAWSAck deletes an integration account
3167	ListIntegrationGCP returns a list of IntegrationGCP objects .
3168	CreateIntegrationGCP creates a new integration .
3169	UpdateIntegrationGCP updates an IntegrationGCP update request
3170	DeleteIntegrationGCP deletes an integration group
3171	GetDashboardList returns the dashboard list
3172	GetDashboardLists returns a list of DashboardLists
3173	CreateDashboardList creates a new DashboardList .
3174	UpdateDashboardList updates the dashboard list .
3175	GetDashboardListItems retrieves the list of dashboard items for the given ID .
3176	Snapshot is part of the Client interface .
3177	SearchHosts returns a list of host names .
3178	SearchMetrics returns metrics for a given search .
3179	CreateAlert creates a new alert .
3180	UpdateAlert updates an alert .
3181	GetAlert retrieves an alert .
3182	GetAlerts returns a list of alerts
3183	CreateComment creates a comment
3184	CreateRelatedComment creates a comment
3185	EditComment update comment
3186	CreateMonitor creates a monitor .
3187	UpdateMonitor updates a monitor .
3188	GetMonitor returns a monitor .
3189	GetMonitorsByName returns a list of Monitors by name .
3190	GetMonitorsByTags returns a list of monitored monitors .
3191	GetMonitors returns a list of monitors
3192	GetSyntheticsLocations returns a list of Synthetics locations .
3193	GetBool returns the value of bool if it s non - nil zero value otherwise .
3194	GetIntOk returns the value of int
3195	GetStringOk returns the value of a string .
3196	GetJsonNumberOk returns the value of a json .
3197	GetPrecision returns the precision of the given precision .
3198	GetStringId returns the id of the given id .
3199	GetDashboard gets the dashboard
3200	GetDashboards returns a list of dashboards
3201	CreateDashboard creates a dashboard .
3202	UpdateDashboard updates the dashboard .
3203	InviteUsers is part of the Client interface .
3204	CreateUser creates a new user
3205	GetUsers returns a list of users
3206	GetUser retrieves a user by ID
3207	UpdateUser updates a user
3208	DeleteUser deletes a user
3209	GetBoard returns a board .
3210	DeleteBoard deletes a dashboard
3211	CreateBoard creates a new board .
3212	UpdateBoard updates the board .
3213	NewClient creates a new client
3214	SetKeys sets the API key
3215	Validate returns true if the client is valid .
3216	MuteHost mocks base method
3217	UnmuteHost mocks base method
3218	GetSilenced returns the Silenced field if it s non - nil zero value otherwise .
3219	GetSilencedOk returns true if the alert is silenced .
3220	HasSilenced returns true if the alert is silenced
3221	GetState returns the State field if it s non - nil zero value otherwise .
3222	GetStateOk returns the StateOk field if it s non - nil zero value otherwise .
3223	HasState returns true if the alert is set
3224	GetAlertIdOk returns the alertId field if it s non - nil zero value otherwise .
3225	GetKey returns the Key field if it s non - nil zero value otherwise .
3226	GetKeyOk returns the KeyOk field if it s non - nil zero value otherwise .
3227	HasKey returns true if the API key exists
3228	GetFacetOk returns the FacetOk field if it s non - nil zero value otherwise .
3229	GetOrder returns the Order field if it s non - nil zero value otherwise .
3230	GetOrderOk returns the OrderOk field if it s non - nil zero value otherwise .
3231	HasOrder returns true if the order of the query group has been set .
3232	GetAuthorHandle returns the AuthorHandle field if it s non - nil zero value otherwise .
3233	GetAuthorHandleOk returns the AuthorHandle field if it s non - nil zero value otherwise .
3234	HasAuthorHandle returns true if the board is authorized .
3235	GetIsReadOnly returns the IsReadOnly field if it s non - nil zero value otherwise .
3236	GetIsReadOnlyOk returns true if the board is read or not .
3237	HasIsReadOnly returns true if the board is read .
3238	GetLayout returns the LayoutLayout field if it s non - nil zero value otherwise .
3239	GetLayoutOk returns the LayoutLayout field if it s non - nil zero value otherwise .
3240	HasLayout returns true if the BoardWidget is set .
3241	GetShowPresent returns the ShowPresent field if it s non - nil zero value otherwise .
3242	GetShowPresentOk returns the ShowPresentOk field if it s non - nil zero value otherwise .
3243	HasShowPresent returns true if the change is present .
3244	GetChannelName returns the ChannelName field if it s non - nil zero value otherwise .
3245	GetChannelNameOk returns the ChannelName field if it s non - nil zero value otherwise .
3246	HasChannelName returns true if the channel has a channel name .
3247	GetTransferAllUserComments returns the TransferAllUserComments field if it s non - nil zero value otherwise .
3248	GetTransferAllUserCommentsOk returns the TransferAllUserComments field if it s non - nil zero value otherwise .
3249	HasTransferAllUserComments returns true if this ChannelSlackRequest has been set .
3250	GetHostName returns the HostName field if it s non - nil zero value otherwise .
3251	GetHostNameOk returns the HostName field if it s non - nil zero value otherwise .
3252	HasHostName returns true if the check has a host name
3253	GetTimestamp returns the Timestamp field if it s non - nil zero value otherwise .
3254	GetTimestampOk returns the TimestampOk field if it s non - nil zero value otherwise .
3255	HasTimestamp returns true if the check is Timestamp .
3256	GetRelatedId returns the RelatedId field if it s non - nil zero value otherwise .
3257	GetRelatedIdOk returns the RelatedId field if it s non - nil zero value otherwise .
3258	HasRelatedId returns true if the comment is related to this comment .
3259	GetImageURL returns the ImageURL field if it s non - nil zero value otherwise .
3260	GetImageURLOk returns the ImageURL field if it s non - nil zero value otherwise .
3261	HasImageURL returns true if the condition is set or not .
3262	GetInvert returns the Invert field if it s non - nil zero value otherwise .
3263	GetInvertOk returns the InvertOk field if it s non - nil zero value otherwise .
3264	HasInvert returns true if the condition is in a conditional format
3265	GetIcon returns the Icon field if it s non - nil zero value otherwise .
3266	GetIconOk returns the IconOk field if it s non - nil zero value otherwise .
3267	HasIcon returns true if the CreatedBy field exists .
3268	GetCustomImageUrl returns the CustomImageUrl field if it s non - nil zero value otherwise .
3269	GetCustomImageUrlOk returns the CustomImageUrl field if it s non - nil zero value otherwise .
3270	HasCustomImageUrl returns true if the custom image is custom image .
3271	GetInverted returns the Inverted field if it s non - nil zero value otherwise .
3272	GetInvertedOk returns the InvertedOk field if it s non - nil zero value otherwise .
3273	HasInverted returns true if the DashboardConditional field exists .
3274	GetDashboardCount returns the DashboardCount field if it s non - nil zero value otherwise .
3275	GetDashboardCountOk returns the DashboardCount field if it s non - nil zero value otherwise .
3276	HasDashboardCount returns true if the dashboard has a dashboard .
3277	GetModified returns the Modified field if it s non - nil zero value otherwise .
3278	GetModifiedOk returns the ModifiedOk field if it s non - nil zero value otherwise .
3279	HasModified returns true if the dashboard is modified
3280	GetActive returns the Active field if it s non - nil zero value otherwise .
3281	GetActiveOk returns the ActiveOk field if it s non - nil zero value otherwise .
3282	HasActive returns true if the Downtime is active .
3283	GetCanceled returns the Canceled field if it s non - nil zero value otherwise .
3284	GetCanceledOk returns the value of the CanceledOk field if it s non - nil zero value otherwise .
3285	HasCanceled returns true if the Downtime has been canceled .
3286	GetMonitorId returns the MonitorId field if it s non - nil zero value otherwise .
3287	GetMonitorIdOk returns the MonitorId field if it s non - nil zero value otherwise .
3288	HasMonitorId returns true if the Downtime has been set .
3289	GetParentId returns the ParentId field if it s non - nil zero value otherwise .
3290	GetParentIdOk returns the ParentId field if it s non - nil zero value otherwise .
3291	HasParentId returns true if the Downtime has been set .
3292	GetRecurrence returns the Recurrence field if it s non - nil zero value otherwise .
3293	GetRecurrenceOk returns the Recurrence field if it s non - nil zero value otherwise .
3294	HasRecurrence returns true if the Downtime has been recorded .
3295	GetTimezone returns the Timezone field if it s non - nil zero value otherwise .
3296	GetTimezoneOk returns the TimezoneOk field if it s non - nil zero value otherwise .
3297	HasTimezone returns true if the Downtime has been set .
3298	GetAlertType returns the alertType field if it s non - nil zero value otherwise .
3299	GetAlertTypeOk returns the alertType field if it s non - nil zero value otherwise .
3300	HasAlertType returns true if the event is alert type
3301	GetEventType returns the EventType field if it s non - nil zero value otherwise .
3302	GetEventTypeOk returns the EventTypeOk field if it s non - nil zero value otherwise .
3303	HasEventType returns true if the event type is set .
3304	GetPriority returns the Priority field if it s non - nil zero value otherwise .
3305	GetPriorityOk returns the PriorityOk field if it s non - nil zero value otherwise .
3306	HasPriority returns true if the event has priority
3307	GetSourceType returns the SourceType field if it s non - nil zero value otherwise .
3308	GetSourceTypeOk returns the SourceTypeOk field if it s non - nil zero value otherwise .
3309	HasSourceType returns true if the event type is a source type
3310	GetDefinition returns the GraphDefinition field if it s non - nil zero value otherwise .
3311	GetDefinitionOk returns the GraphDefinition field if it s non - nil zero value otherwise .
3312	HasDefinition returns true if the graph is defined .
3313	GetIncludeNoMetricHosts returns the IncludeNoMetricHosts field if it s non - nil zero value otherwise .
3314	GetIncludeNoMetricHostsOk returns the IncludeNoMetricHosts field if it s non - nil zero value otherwise .
3315	HasIncludeNoMetricHosts returns true if this graph is in the graph .
3316	GetIncludeUngedHosts returns the IncludeUngedHosts field if it s non - nil zero value otherwise .
3317	GetIncludeUngedHostsOk returns the IncludeUngedHosts field if it s non - nil zero value otherwise .
3318	HasIncludeUngedHosts returns true if the GngroupedHosts is included in this graph .
3319	GetVal returns the Value field if it s non - nil zero value otherwise .
3320	GetValOk returns the Validate field if it s non - nil zero value otherwise .
3321	HasVal returns true if this GraphDefinitionMarker is set .
3322	GetOrderDirection returns the OrderDirection field if it s non - nil zero value otherwise .
3323	GetOrderDirectionOk returns the OrderDirection field if it s non - nil zero value otherwise .
3324	HasOrderDirection returns true if the GraphDefinitionRequest is set .
3325	GetStacked returns the Stacked field if it s non - nil zero value otherwise .
3326	GetStackedOk returns the StackedOk field if it s non - nil zero value otherwise .
3327	HasStacked returns true if the GraphDefinitionRequest is set .
3328	GetLastNoDataTs returns the LastNoDataTs field if it s non - nil zero value otherwise .
3329	GetLastNoDataTsOk returns the LastNoDataTs field if it s non - nil zero value otherwise .
3330	HasLastNoDataTs returns true if the group has no data set .
3331	GetLastNotifiedTs returns the LastNotifiedTs field if it s non - nil zero value otherwise .
3332	GetLastNotifiedTsOk returns the LastNotifiedTsOk field if it s non - nil zero value otherwise .
3333	HasLastNotifiedTs returns true if the group has been updated .
3334	GetLastResolvedTs returns the LastResolvedTs field if it s non - nil zero value otherwise .
3335	GetLastResolvedTsOk returns the LastResolvedTs field if it s non - nil zero value otherwise .
3336	HasLastResolvedTs returns true if the group is resolved .
3337	GetLastTriggeredTs returns the LastTrigTs field if it s non - nil zero value otherwise .
3338	GetLastTriggeredTsOk returns the LastTrigTs field if it s non - nil zero value otherwise .
3339	HasLastTriggeredTs returns true if the group has been tracked .
3340	GetTriggeringValue returns the TriggeringValue field if it s non - nil zero value otherwise .
3341	GetTriggeringValueOk returns the TriggeringValueOk field if it s non - nil zero value otherwise .
3342	HasTriggeringValue returns true if the GroupingValue is enabled .
3343	GetEndTime returns the EndTime field if it s non - nil zero value otherwise .
3344	GetEndTimeOk returns the EndTimeOk field if it s non - nil zero value otherwise .
3345	HasEndTime returns true if the host is end time .
3346	GetOverride returns the Override field if it s non - nil zero value otherwise .
3347	GetOverrideOk returns the override field if it s non - nil zero value otherwise .
3348	HasOverride returns true if the host is override
3349	GetFill returns the Fillmap field if it s non - nil zero value otherwise .
3350	GetFillOk returns the FillOk field if it s non - nil zero value otherwise .
3351	HasFill returns true if this HostmapRequest is a valid hostmap
3352	GetSize returns the HostmapRequest field if it s non - nil zero value otherwise .
3353	GetSizeOk returns the HostmapRequest field if it s non - nil zero value otherwise .
3354	HasSize returns true if the HostmapRequest has been set .
3355	GetRoleNameOk returns the RoleName field if it s non - nil zero value otherwise .
3356	GetAccountIDOk returns the AccountID field if it s non - nil zero value otherwise .
3357	GetAuthProviderX509CertURL returns the AuthProviderX509CertURL field if it s non - nil zero value otherwise .
3358	GetAuthProviderX509CertURLGet returns the AuthProviderX509CertURL field if it s non - nil zero value otherwise .
3359	HasAuthProviderX509CertURL returns true if the IntegrationGCCertURL field s value .
3360	GetAuthURI returns the AuthURI field if it s non - nil zero value otherwise .
3361	GetAuthURIOk returns the AuthURI field if it s non - nil zero value otherwise .
3362	HasAuthURI returns true if the request has auth URI
3363	GetClientID returns the ClientID field if it s non - nil zero value otherwise .
3364	GetClientIDOk returns the ClientIDOK field if it s non - nil zero value otherwise .
3365	HasClientID returns true if the client has a client ID
3366	GetClientX509CertURL returns the ClientX509CertURL field if it s non - nil zero value otherwise .
3367	GetClientX509CertURLGet returns the ClientX509CertURL field if it s non - nil zero value otherwise .
3368	HasClientX509CertURL returns true if the ClientX509CertURL field s value .
3369	GetHostFiltersOk returns the HostFiltersOk field if it s non - nil zero value otherwise .
3370	GetPrivateKey returns the PrivateKey field if it s non - nil zero value otherwise .
3371	GetPrivateKeyOk returns the PrivateKeyOk field if it s non - nil zero value otherwise .
3372	HasPrivateKey returns true if this is a private key
3373	GetPrivateKeyID returns the PrivateKeyID field if it s non - nil zero value otherwise .
3374	GetPrivateKeyIDOk returns the PrivateKeyID field if it s non - nil zero value otherwise .
3375	HasPrivateKeyID returns true if this is a private key ID
3376	GetTokenURI returns the TokenURI field if it s non - nil zero value otherwise .
3377	GetTokenURIOk returns the TokenURI field if it s non - nil zero value otherwise .
3378	HasTokenURI returns true if the current token URI is present .
3379	GetClientEmailOk returns the ClientEmailOk field if it s non - nil zero value otherwise .
3380	GetProjectIDOk returns the ProjectID field if it s non - nil zero value otherwise .
3381	GetAPITokenOk returns the APIToken field if it s non - nil zero value otherwise .
3382	GetSubdomainOk returns the SubdomainOk field if it s non - nil zero value otherwise .
3383	GetID returns the ID of the LogSet
3384	GetIDOk returns the ID of the LogSet
3385	HasID returns true if the LogSet is set .
3386	GetPerUnit returns the PerUnit field if it s non - nil zero value otherwise .
3387	GetPerUnitOk returns the PerUnitOk field if it s non - nil zero value otherwise .
3388	HasPerUnit returns true if the MetricMetadata has been set .
3389	GetShortName returns the ShortName field if it s non - nil zero value otherwise .
3390	GetShortNameOk returns the ShortName field if it s non - nil zero value otherwise .
3391	HasShortName returns true if the MetricMetadata is present .
3392	GetStatsdInterval returns the StatsdInterval field if it s non - nil zero value otherwise .
3393	GetStatsdIntervalOk returns the StatsdIntervalOk field if it s non - nil zero value otherwise .
3394	HasStatsdInterval returns true if the MetricMetric is set .
3395	GetOverallState returns the OverallState field if it s non - nil zero value otherwise .
3396	GetOverallStateOk returns the OverallStateOk field if it s non - nil zero value otherwise .
3397	HasOverallState returns true if the monitor is overall state .
3398	GetOverallStateModified returns the OverallStateModified field if it s non - nil zero value otherwise .
3399	GetOverallStateModifiedOk returns the OverallStateModifiedOk field if it s non - nil zero value otherwise .
3400	HasOverallStateModified returns true if the MonitorStateModified field s value .
3401	GetBackgroundColor returns the BackgroundColor field if it s non - nil zero value otherwise .
3402	GetBackgroundColorOk returns the BackgroundColorOk field if it s non - nil zero value otherwise .
3403	HasBackgroundColor returns true if the annotation is background color .
3404	GetContent returns the Content field if it s non - nil zero value otherwise .
3405	GetContentOk returns the Content field if it s non - nil zero value otherwise .
3406	HasContent returns true if the note is content of the note
3407	GetShowTick returns the ShowTick field if it s non - nil zero value otherwise .
3408	GetShowTickOk returns the ShowTickOk field if it s non - nil zero value otherwise .
3409	HasShowTick returns true if the note is set .
3410	GetEnableLogsSample returns the EnableLogsSample field if it s non - nil zero value otherwise .
3411	GetEnableLogsSampleOk returns the EnableLogsSample field if it s non - nil zero value otherwise .
3412	HasEnableLogsSample returns true if the options are enabled .
3413	GetEscalationMessage returns the EscalationMessage field if it s non - nil zero value otherwise .
3414	GetEscalationMessageOk returns the EscalationMessage field if it s non - nil zero value otherwise .
3415	HasEscalationMessage returns true if the options are set .
3416	GetEvaluationDelay returns the EvaluationDelay field if it s non - nil zero value otherwise .
3417	GetEvaluationDelayOk returns the EvaluationDelay field if it s non - nil zero value otherwise .
3418	HasEvaluationDelay returns true if the options field s value .
3419	GetIncludeTags returns the IncludeTags field if it s non - nil zero value otherwise .
3420	GetIncludeTagsOk returns the IncludeTags field if it s non - nil zero value otherwise .
3421	HasIncludeTags returns true if the options are included .
3422	GetLocked returns the Locked field if it s non - nil zero value otherwise .
3423	GetLockedOk returns the LockedOk field if it s non - nil zero value otherwise .
3424	HasLocked returns true if the options are locked .
3425	GetNewHostDelay returns the NewHostDelay field if it s non - nil zero value otherwise .
3426	GetNewHostDelayOk returns the NewHostDelayOk field if it s non - nil zero value otherwise .
3427	HasNewHostDelay returns true if the Options field s value .
3428	GetNotifyAudit returns the NotifyAudit field if it s non - nil zero value otherwise .
3429	GetNotifyAuditOk returns the GetAuditOk field if it s non - nil zero value otherwise .
3430	HasNotifyAudit returns true if the options are allowed .
3431	GetQueryConfig returns the QueryConfig field if it s non - nil zero value otherwise .
3432	GetQueryConfigOk returns the QueryConfigOk field if it s non - nil zero value otherwise .
3433	HasQueryConfig returns true if the options are set .
3434	GetRenotifyInterval returns the RenotifyInterval field if it s non - nil zero value otherwise .
3435	GetRenotifyIntervalOk returns the RotateIntervalOk field if it s non - nil zero value otherwise .
3436	HasRenotifyInterval returns true if the options are set .
3437	GetRequireFullWindow returns the IncludeFullWindow field if it s non - nil zero value otherwise .
3438	GetRequireFullWindowOk returns the AllowFullWindowOk field if it s non - nil zero value otherwise .
3439	HasRequireFullWindow returns true if the options are required .
3440	GetThresholds returns the Thresholds field if it s non - nil zero value otherwise .
3441	GetThresholdsOk returns the ThresholdCount field if it s non - nil zero value otherwise .
3442	HasThresholds returns true if the options are set .
3443	GetThresholdWindows returns the ThresholdWindows field if it s non - nil zero value otherwise .
3444	GetThresholdWindowsOk returns the ThresholdWindows field if it s non - nil zero value otherwise .
3445	HasThresholdWindows returns true if the options are set .
3446	GetTimeoutH returns the Timeout field if it s non - nil zero value otherwise .
3447	GetTimeoutHOk returns the timeout field if it s non - nil zero value otherwise .
3448	HasTimeoutH returns true if the options are set .
3449	GetSeconds returns the Seconds field if it s non - nil zero value otherwise .
3450	GetSecondsOk returns the Seconds field if it s non - nil zero value otherwise .
3451	HasSeconds returns true if the period is second .
3452	GetLogSet returns the LogSet field if it s non - nil zero value otherwise .
3453	GetLogSetOk returns the LogSet field if it s non - nil zero value otherwise .
3454	HasLogSet returns true if the query is set .
3455	GetQueryIsFailed returns the QueryIsFailed field if it s non - nil zero value otherwise .
3456	GetQueryIsFailedOk returns true if the query should be executed .
3457	HasQueryIsFailed returns true if the query is a query .
3458	GetQueryString returns the QueryString field if it s non - nil zero value otherwise .
3459	GetQueryStringOk returns the query string if it s non - nil zero value otherwise .
3460	HasQueryString returns true if the query string is a query string .
3461	GetTimeRange returns the TimeRange field if it s non - nil zero value otherwise .
3462	GetTimeRangeOk returns the TimeRange field if it s non - nil zero value otherwise .
3463	HasTimeRange returns true if the query is time range .
3464	GetUntilDate returns the UntilDate field if it s non - nil zero value otherwise .
3465	GetUntilDateOk returns the Time field if it s non - nil zero value otherwise .
3466	HasUntilDate returns true if the recurring date is within the record .
3467	GetUntilOccurrences returns the NumberOccurrences field if it s non - nil zero value otherwise .
3468	GetUntilOccurrencesOk returns the NumberOccurrences field if it s non - nil zero value otherwise .
3469	HasUntilOccurrences returns true if the recursively has been set .
3470	GetAPIKey returns the APIKey field if it s non - nil zero value otherwise .
3471	GetAPIKeyOk returns the API key if it s non - nil zero value otherwise .
3472	HasAPIKey returns true if the request has the API key .
3473	GetComment returns the Comment field if it s non - nil zero value otherwise .
3474	GetCommentOk returns the CommentOk field if it s non - nil zero value otherwise .
3475	HasComment returns true if the request has a comment .
3476	GetDashboard returns the Dashboard field if it s non - nil zero value otherwise .
3477	GetDashboardOk returns the Dashboard field if it s non - nil zero value otherwise .
3478	HasDashboard returns true if the dashboard has a dashboard .
3479	GetEvent returns the Event field if it s non - nil zero value otherwise .
3480	GetEventOk returns the EventOk field if it s non - nil zero value otherwise .
3481	HasEvent returns true if the request is event .
3482	GetTags returns the TagsMap field if it s non - nil zero value otherwise .
3483	GetTagsOk returns the TagsMap field if it s non - nil zero value otherwise .
3484	HasTags returns true if the request has tags
3485	GetThreshold returns the Threshold field if it s non - nil zero value otherwise .
3486	GetThresholdOk returns the Threshold field if it s non - nil zero value otherwise .
3487	HasThreshold returns true if the rule has a threshold .
3488	GetXaxis returns the XatterAxis field if it s non - nil zero value otherwise .
3489	GetXaxisOk returns the XatterAxis field if it s non - nil zero value otherwise .
3490	HasXaxis returns true if the ScatterDefinition is set .
3491	GetShared returns the Shared field if it s non - nil zero value otherwise .
3492	GetSharedOk returns the SharedOk field if it s non - nil zero value otherwise .
3493	HasShared returns true if the screen is shared .
3494	GetAggr returns the Aggr field if it s non - nil zero value otherwise .
3495	GetAggrOk returns the AggrOk field if it s non - nil zero value otherwise .
3496	HasAggr returns true if the series is agr .
3497	GetDisplayNameOk returns the DisplayName field if it s non - nil zero value otherwise .
3498	GetLength returns the Length field if it s non - nil zero value otherwise .
3499	GetLengthOk returns the length of the series .
3500	HasLength returns true if the series has length .
3501	GetScope returns the Scope field if it s non - nil zero value otherwise .
3502	GetScopeOk returns the ScopeOk field if it s non - nil zero value otherwise .
3503	HasScope returns true if the series has scope .
3504	GetUnits returns the UnitPair field if it s non - nil zero value otherwise .
3505	GetUnitsOk returns the UnitPair field if it s non - nil zero value otherwise .
3506	HasUnits returns true if the series is unset .
3507	GetServiceKeyOk returns the ServiceKeyOk field if it s non - nil zero value otherwise .
3508	GetOperator returns the Operator field if it s non - nil zero value otherwise .
3509	GetOperatorOk returns the OperatorOk field if it s non - nil zero value otherwise .
3510	HasOperator returns true if the field s value .
3511	GetProperty returns the Property field if it s non - nil zero value otherwise .
3512	GetPropertyOk returns the PropertyOk field if it s non - nil zero value otherwise .
3513	HasProperty returns true if the PropertyAssertion field s value .
3514	GetRequest returns the Request field if it s non - nil zero value otherwise .
3515	GetRequestOk returns the RequestOk field if it s non - nil zero value otherwise .
3516	HasRequest returns true if the request has a request
3517	GetIsMobile returns the IsMobile field if it s non - nil zero value otherwise .
3518	GetIsMobileOk returns the IsMobileOk field if it s non - nil zero value otherwise .
3519	HasIsMobile returns true if the device is mobile .
3520	GetUserAgent returns the UserAgent field if it s non - nil zero value otherwise .
3521	GetUserAgentOk returns the UserAgentOk field if it s non - nil zero value otherwise .
3522	HasUserAgent returns true if the UserAgent field s value .
3523	GetRegion returns the Region field if it s non - nil zero value otherwise .
3524	GetRegionOk returns the RegionOk field if it s non - nil zero value otherwise .
3525	HasRegion returns true if the location is a region
3526	GetFollowRedirects returns the FollowRedirects field if it s non - nil zero value otherwise .
3527	GetFollowRedirectsOk returns the FollowRedirectsOk field if it s non - nil zero value otherwise .
3528	HasFollowRedirects returns true if the FollowRedirects field s value .
3529	GetMinFailureDuration returns the MinFailureDuration field if it s non - nil zero value otherwise .
3530	GetMinFailureDurationOk returns the MinFailureDurationOk field if it s non - nil zero value otherwise .
3531	HasMinFailureDuration returns true if the MinFailureDuration field s value .
3532	GetMinLocationFailed returns the MinLocationFailed field if it s non - nil zero value otherwise .
3533	GetMinLocationFailedOk returns the MinLocationFailedOk field if it s non - nil zero value otherwise .
3534	HasMinLocationFailed returns true if the MinLocationFailed field s value .
3535	GetTickEvery returns the TickEvery field if it s non - nil zero value otherwise .
3536	GetTickEveryOk returns the TickEvery field if it s non - nil zero value otherwise .
3537	HasTickEvery returns true if the ticker is set .
3538	GetBody returns the Body field if it s non - nil zero value otherwise .
3539	GetBodyOk returns the BodyOk field if it s non - nil zero value otherwise .
3540	HasBody returns true if the body is a body .
3541	GetMethod returns the Method field if it s non - nil zero value otherwise .
3542	GetMethodOk returns the MethodOk field if it s non - nil zero value otherwise .
3543	HasMethod returns true if the SyntheticsRequest is set .
3544	GetTimeout returns the Timeout field if it s non - nil zero value otherwise .
3545	GetTimeoutOk returns the Timeout field if it s non - nil zero value otherwise .
3546	HasTimeout returns true if the SyntheticsRequest is set .
3547	GetConfig returns the Config field if it s non - nil zero value otherwise .
3548	GetConfigOk returns the ConfigConfig field if it s non - nil zero value otherwise .
3549	HasConfig returns true if the SyntheticsTest is set .
3550	GetDeletedAt returns the DeletedAt field if it s non - nil zero value otherwise .
3551	GetDeletedAtOk returns the DeletedAt field if it s non - nil zero value otherwise .
3552	HasDeletedAt returns true if the SyntheticAt field s value .
3553	GetModifiedBy returns the ModifiedBy field if it s non - nil zero value otherwise .
3554	GetModifiedByOk returns the ModifiedByOk field if it s non - nil zero value otherwise .
3555	HasModifiedBy returns true if the condition is modified .
3556	GetMonitorStatus returns the MonitoringStatus field if it s non - nil zero value otherwise .
3557	GetMonitorStatusOk returns the MonitorStatus field if it s non - nil zero value otherwise .
3558	HasMonitorStatus returns true if the monitor status is enabled .
3559	GetPublicId returns the PublicId field if it s non - nil zero value otherwise .
3560	GetPublicIdOk returns the PublicId field if it s non - nil zero value otherwise .
3561	HasPublicId returns the PublicId field if it s non - nil zero value otherwise .
3562	GetDefault returns the Default field if it s non - nil zero value otherwise .
3563	GetDefaultOk returns the DefaultOk field if it s non - nil zero value otherwise .
3564	HasDefault returns true if the template variable is default
3565	GetPrefix returns the Prefix field if it s non - nil zero value otherwise .
3566	GetPrefixOk returns the Prefix field if it s non - nil zero value otherwise .
3567	HasPrefix returns true if the template variable is a prefix .
3568	GetCritical returns the Critical field if it s non - nil zero value otherwise .
3569	GetCriticalOk returns the CriticalOk field if it s non - nil zero value otherwise .
3570	HasCritical returns true if the threshold is critical .
3571	GetCriticalRecovery returns the CriticalRecovery field if it s non - nil zero value otherwise .
3572	GetCriticalRecoveryOk returns the CriticalRecoveryOk field if it s non - nil zero value otherwise .
3573	HasCriticalRecovery returns true if the threshold is critical .
3574	GetOk returns the Ok field if it s non - nil zero value otherwise .
3575	GetOkOk returns the OkOk field if it s non - nil zero value otherwise .
3576	HasOk returns true if t is ok
3577	GetTimeAggregator returns the TimeAggregator field if it s non - nil zero value otherwise .
3578	GetTimeAggregatorOk returns the TimeAggregator field if it s non - nil zero value otherwise .
3579	HasTimeAggregator returns true if the ThresholdCount field s value .
3580	GetUnknown returns the Unknown field if it s non - nil zero value otherwise .
3581	GetUnknownOk returns the UnknownOk field if it s non - nil zero value otherwise .
3582	HasUnknown returns true if t is unknown .
3583	GetWarning returns the Warning field if it s non - nil zero value otherwise .
3584	GetWarningOk returns the Warning field if it s non - nil zero value otherwise .
3585	HasWarning returns true if t is a warning .
3586	GetWarningRecovery returns the WarningRecovery field if it s non - nil zero value otherwise .
3587	GetWarningRecoveryOk returns the WarningRecoveryOk field if it s non - nil zero value otherwise .
3588	HasWarningRecovery returns true if t is a warning .
3589	GetRecoveryWindow returns the RecoveryWindow field if it s non - nil zero value otherwise .
3590	GetRecoveryWindowOk returns the RecoveryWindowOk field if it s non - nil zero value otherwise .
3591	HasRecoveryWindow returns true if the recovery window has a recovery window .
3592	GetTriggerWindow returns the TriggerWindow field if it s non - nil zero value otherwise .
3593	GetTriggerWindowOk returns the TriggerWindowOk field if it s non - nil zero value otherwise .
3594	HasTriggerWindow returns true if t is a trigger window .
3595	GetQueryType returns the QueryType field if it s non - nil zero value otherwise .
3596	GetQueryTypeOk returns the QueryTypeOk field if it s non - nil zero value otherwise .
3597	HasQueryType returns true if the TileDefRequest is set .
3598	GetTextFilter returns the TextFilter field if it s non - nil zero value otherwise .
3599	GetTextFilterOk returns the TextFilter field if it s non - nil zero value otherwise .
3600	HasTextFilter returns true if the TileDefRequest is enabled .
3601	GetFrom returns the TimeRange field if it s non - nil zero value otherwise .
3602	GetFromOk returns the TimeRange field if it s non - nil zero value otherwise .
3603	HasFrom returns true if the time range is in the range .
3604	GetLive returns the Live field if it s non - nil zero value otherwise .
3605	GetLiveOk returns the LiveOk field if it s non - nil zero value otherwise .
3606	HasLive returns true if the time range is live .
3607	GetTo returns the TimeRange field if it s non - nil zero value otherwise .
3608	GetToOk returns the time range of time range .
3609	HasTo returns true if the time range is a time range .
3610	GetShowLegend returns the ShowLegend field if it s non - nil zero value otherwise .
3611	GetShowLegendOk returns the ShowLegendOk field if it s non - nil zero value otherwise .
3612	HasShowLegend returns true if the TimeseriesDefinition is set .
3613	GetLineType returns the LineType field if it s non - nil zero value otherwise .
3614	GetLineTypeOk returns the LineTypeOk field if it s non - nil zero value otherwise .
3615	HasLineType returns true if the line type is a line type
3616	GetLineWidth returns the LineWidth field if it s non - nil zero value otherwise .
3617	GetLineWidthOk returns the LineWidth field if it s non - nil zero value otherwise .
3618	HasLineWidth returns true if the line width is a line width
3619	GetNewStatus returns a new ToggleStatus instance
3620	GetNewStatusOk returns the StatusOk field if it s non - nil zero value otherwise .
3621	HasNewStatus returns true if the toggle status is enabled .
3622	GetService returns the Service field if it s non - nil zero value otherwise .
3623	GetServiceOk returns the ServiceOk field if it s non - nil zero value otherwise .
3624	HasService returns true if the TraceServiceDefinition is present .
3625	GetShowBreakdown returns the ShowBreakdown field if it s non - nil zero value otherwise .
3626	GetShowBreakdownOk returns the ShowBreakdownOk field if it s non - nil zero value otherwise .
3627	HasShowBreakdown returns true if the TraceServiceDefinition is enabled .
3628	GetShowDistribution returns the ShowDistribution field if it s non - nil zero value otherwise .
3629	GetShowDistributionOk returns the ShowDistributionOk field if it s non - nil zero value otherwise .
3630	HasShowDistribution returns true if the TraceServiceDefinition is enabled .
3631	GetShowErrors returns the ShowErrors field if it s non - nil zero value otherwise .
3632	GetShowErrorsOk returns the ShowErrorsOk field if it s non - nil zero value otherwise .
3633	HasShowErrors returns true if the TraceServiceDefinition is set .
3634	GetShowHits returns the ShowHits field if it s non - nil zero value otherwise .
3635	GetShowHitsOk returns the ShowHitsOk field if it s non - nil zero value otherwise .
3636	HasShowHits returns true if the TraceServiceDefinition is set .
3637	GetShowLatency returns the ShowLatency field if it s non - nil zero value otherwise .
3638	GetShowLatencyOk returns the ShowLatencyOk field if it s non - nil zero value otherwise .
3639	HasShowLatency returns true if the TraceServiceDefinition is enabled .
3640	GetShowResourceList returns the ShowResourceList field if it s non - nil zero value otherwise .
3641	GetShowResourceListOk returns the ShowResourceList field if it s non - nil zero value otherwise .
3642	HasShowResourceList returns true if the TraceServiceList field s value .
3643	GetSizeFormat returns the SizeFormat field if it s non - nil zero value otherwise .
3644	GetSizeFormatOk returns the SizeFormat field if it s non - nil zero value otherwise .
3645	HasSizeFormat returns true if the TraceServiceDefinition is set .
3646	GetSpanName returns the SpanName field if it s non - nil zero value otherwise .
3647	GetSpanNameOk returns the SpanName field if it s non - nil zero value otherwise .
3648	HasSpanName returns true if the span is a span .
3649	GetFromTs returns the FromTs field if it s non - nil zero value otherwise .
3650	GetFromTsOk returns the FromTsOk field if it s non - nil zero value otherwise .
3651	HasFromTs returns true if the trigger has been set .
3652	GetToTs returns the ToTs field if it s non - nil zero value otherwise .
3653	GetToTsOk returns the ToTsOk field if it s non - nil zero value otherwise .
3654	HasToTs returns true if the trigger has been set .
3655	GetAlertID returns the AlertID field if it s non - nil zero value otherwise .
3656	GetAlertIDOk returns the AlertID field if it s non - nil zero value otherwise .
3657	HasAlertID returns true if the Widget is alert .
3658	GetAutoRefresh returns the AutoRefresh field if it s non - nil zero value otherwise .
3659	GetAutoRefreshOk returns the AutoRefreshOk field if it s non - nil zero value otherwise .
3660	HasAutoRefresh returns true if the widget is auto refresh .
3661	GetBgcolor returns the Bgcolor field if it s non - nil zero value otherwise .
3662	GetBgcolorOk returns the Bgcolor field if it s non - nil zero value otherwise .
3663	HasBgcolor returns true if the Wgcolor is enabled
3664	GetColumns returns the Columns field if it s non - nil zero value otherwise .
3665	GetColumnsOk returns the Columns field if it s non - nil zero value otherwise .
3666	HasColumns returns true if the widget has a column .
3667	GetHTML returns the HTML field if it s non - nil zero value otherwise .
3668	GetHTMLOk returns the HTML field if it s non - nil zero value otherwise .
3669	HasHTML returns true if the Widget is HTML .
3670	GetLayoutVersion returns the LayoutVersion field if it s non - nil zero value otherwise .
3671	GetLayoutVersionOk returns the LayoutVersionOk field if it s non - nil zero value otherwise .
3672	HasLayoutVersion returns true if the widget has a layout version .
3673	GetLegend returns the legend field if it s non - nil zero value otherwise .
3674	GetLegendOk returns the field if it s non - nil zero value otherwise .
3675	HasLegend returns true if the Widget is set .
3676	GetManageStatusShowTitle returns the ManageStatusShowTitle field if it s non - nil zero value otherwise .
3677	GetManageStatusShowTitleOk returns the ManageStatusShowTitle field if it s non - nil zero value otherwise .
3678	HasManageStatusShowTitle returns true if the WidgetStatusShowTitle is set .
3679	GetManageStatusTitleAlign returns the ManageStatusTitleAlign field if it s non - nil zero value otherwise .
3680	GetManageStatusTitleAlign returns the ManageStatusTitleAlign field if it s non - nil zero value otherwise .
3681	HasManageStatusTitleAlign returns true if the WidgetStatusTitle is set .
3682	GetManageStatusTitleSize returns the ManageStatusTitle field if it s non - nil zero value otherwise .
3683	GetManageStatusTitleSizeOk returns the ManageStatusTitleSize field if it s non - nil zero value otherwise .
3684	HasManageStatusTitleSize returns true if the WidgetStatusTitleSize is set .
3685	GetManageStatusTitleText returns the ManageStatusText field if it s non - nil zero value otherwise .
3686	GetManageStatusTitleText returns the ManageStatusTitleText field if it s non - nil zero value otherwise .
3687	HasManageStatusTitleText returns true if the WidgetStatusTitle is set .
3688	GetMonitor returns the ScreenboardMonitor field if it s non - nil zero value otherwise .
3689	GetMonitorOk returns the MonitorMonitor field if it s non - nil zero value otherwise .
3690	HasMonitor returns true if the widget has a monitor
3691	GetMustShowBreakdown returns the MustShowBreakdown field if it s non - nil zero value otherwise .
3692	GetMustShowBreakdownOk returns the MustShowBreakdownOk field if it s non - nil zero value otherwise .
3693	HasMustShowBreakdown returns true if the Widget is visible .
3694	GetMustShowDistribution returns the MustShowDistribution field if it s non - nil zero value otherwise .
3695	GetMustShowDistributionOk returns the MustShowDistributionOk field if it s non - nil zero value otherwise .
3696	HasMustShowDistribution returns true if the Widget is visible .
3697	GetMustShowErrors returns the MustShowErrors field if it s non - nil zero value otherwise .
3698	GetMustShowErrorsOk returns the MustShowErrorsOk field if it s non - nil zero value otherwise .
3699	HasMustShowErrors returns true if the Widget is invalid .
3700	GetMustShowHits returns the MustShowHits field if it s non - nil zero value otherwise .
3701	GetMustShowHitsOk returns the MustShowHitsOk field if it s non - nil zero value otherwise .
3702	HasMustShowHits returns true if the Widget is visible .
3703	GetMustShowLatency returns the MustShowLatency field if it s non - nil zero value otherwise .
3704	GetMustShowLatencyOk returns the MustShowLatencyOk field if it s non - nil zero value otherwise .
3705	HasMustShowLatency returns true if the Widget is visible .
3706	GetMustShowResourceList returns the MustShowResourceList field if it s non - nil zero value otherwise .
3707	GetMustShowResourceListOk returns the MustShowResourceListOK field if it s non - nil zero value otherwise .
3708	HasMustShowResourceList returns true if the WidgetList is set .
3709	GetParams returns the Params field if it s non - nil zero value otherwise .
3710	GetParamsOk returns the ParamsOk field if it s non - nil zero value otherwise .
3711	HasParams returns true if the Widget is set .
3712	GetServiceService returns the ServiceService field if it s non - nil zero value otherwise .
3713	GetServiceServiceOk returns the ServiceServiceOk field if it s non - nil zero value otherwise .
3714	HasServiceService returns true if the Widget is service .
3715	GetSizeVersion returns the SizeVersion field if it s non - nil zero value otherwise .
3716	GetSizeVersionOk returns the SizeVersionOk field if it s non - nil zero value otherwise .
3717	HasSizeVersion returns true if the Widget has been set .
3718	GetTextSize returns the TextSize field if it s non - nil zero value otherwise .
3719	GetTextSizeOk returns the text size of the Widget .
3720	HasTextSize returns true if the Widget has a text size
3721	GetTick returns the Tick field if it s non - nil zero value otherwise .
3722	GetTickOk returns the TickOk field if it s non - nil zero value otherwise .
3723	HasTick returns true if the Widget has a tick .
3724	GetTileDef returns the TileDef field if it s non - nil zero value otherwise .
3725	GetTileDefOk returns the TileDef field if it s non - nil zero value otherwise .
3726	HasTileDef returns true if the Widget is a tile definition
3727	GetTitleText returns the TitleText field if it s non - nil zero value otherwise .
3728	GetTitleTextOk returns the TitleText field if it s non - nil zero value otherwise .
3729	HasTitleText returns true if the widget has a title text .
3730	GetURL returns the URL field if it s non - nil zero value otherwise .
3731	GetURLOk returns the URL field if it s non - nil zero value otherwise .
3732	HasURL returns true if the Widget is a URL .
3733	GetCompute returns the ComputeCompute field if it s non - nil zero value otherwise .
3734	GetComputeOk returns the ComputeOkQuery field if it s non - nil zero value otherwise .
3735	HasCompute returns true if the Widget is Compute
3736	GetIndex returns the Index field if it s non - nil zero value otherwise .
3737	GetIndexOk returns the IndexOk field if it s non - nil zero value otherwise .
3738	HasIndex returns true if the widget has index .
3739	GetSearch returns the SearchOrLogQuerySearch field if it s non - nil zero value otherwise .
3740	GetSearchOk returns the SearchOrLogQuery field if it s non - nil zero value otherwise .
3741	HasSearch returns true if the widget has a search .
3742	GetHideValue returns the HideValue field if it s non - nil zero value otherwise .
3743	GetHideValueOk returns the HideValueOk field if it s non - nil zero value otherwise .
3744	HasHideValue returns true if the widget is set .
3745	GetImageUrl returns the ImageUrl field if it s non - nil zero value otherwise .
3746	GetImageUrlOk returns the ImageUrl field if it s non - nil zero value otherwise .
3747	HasImageUrl returns true if the Widget is a valid image .
3748	GetAliasName returns the AliasName field if it s non - nil zero value otherwise .
3749	GetAliasNameOk returns the AliasName field if it s non - nil zero value otherwise .
3750	HasAliasName returns true if the WidgetMetadata field exists .
3751	GetSearchBy returns the SearchBy field if it s non - nil zero value otherwise .
3752	GetSearchByOk returns the searchByOk field if it s non - nil zero value otherwise .
3753	HasSearchBy returns true if the WidgetProcessQuery is set .
3754	GetIncludeUnits returns the IncludeUnits field if it s non - nil zero value otherwise .
3755	GetIncludeUnitsOk returns the IncludeUnitsOk field if it s non - nil zero value otherwise .
3756	HasIncludeUnits returns true if the x axis is in the axis .
3757	dump dump the template
3758	newAccessor creates a new accessor .
3759	addIdent adds an identifier to the template .
3760	addSelectorExpr adds a selectorExpr .
3761	addMapType adds a map to a map .
3762	addArrayType adds a new ArrayType to the array .
3763	CreateDowntime creates a new Downtime
3764	UpdateDowntime updates the downtime
3765	GetDowntime returns the Downtime of the given id .
3766	GetDowntimes returns a list of Downtimes
3767	MarshalJSON implements the json . Marshaler interface for APIKey .
3768	UnmarshalJSON implements the json . Unmarshaler interface .
3769	Get API keys
3770	Get API key
3771	Create API key
3772	Delete API key
3773	PostMetrics is part of the Client interface .
3774	GetScreenboard returns the screenboard
3775	GetScreenboards returns a list of screenboards
3776	Create a new screenboard
3777	UpdateScreenboard updates the screen board .
3778	ShareScreenboard shares a screen .
3779	RevokeScreenboard deletes a screen .
3780	GetTags returns the tags for the given source .
3781	GetHostTags returns the tags for the given host .
3782	AddTagsToHost adds tags to the host
3783	Remove host tags
3784	redactError returns the error of the client .
3785	doRequestWithRetries sends a request to the server .
3786	PostEvent creates a new event .
3787	GetEvent retrieves an event by id
3788	GetEvents returns a list of events .
3789	ViewMetricMetadata returns the MetricMetadata for the given name .
3790	PostCheck is part of the Client interface .
3791	WriteObject implements io . Writer
3792	ReadObject implements io . Reader
3793	SetParams sets the params
3794	SetMeta sets the meta data
3795	SetResult sets the Result field s value .
3796	SetError implements the Error interface for Error .
3797	Close closes the connection .
3798	Reply sends a response to the server .
3799	ReplyWithError sends a response with the given ID .
3800	LogMessages implements the Conn interface .
3801	HandlerWithError creates a HandlerWithErrorConfigurer .
3802	Handle implements the Handler interface .
3803	ReadObject implements io . Reader
3804	PickID sets the ID of the request .
3805	String returns the string representation of the node .
3806	ccIP returns the CRC of the given IP .
3807	Stats returns the statistics of the server .
3808	NewServer creates a new Server .
3809	SetIPBlockList sets the IP block list
3810	AddNode adds a node to the server
3811	getNode returns the node for the given address .
3812	Ping implements the Server interface .
3813	add response nodes
3814	findNode is used to find a node
3815	Bootstrap initializes the tombstoneStats .
3816	NumNodes returns the number of nodes in the server .
3817	Nodes returns a list of nodes .
3818	Close closes the server .
3819	IsGood returns true if the node is good .
3820	NumContacted returns the number of contacts .
3821	Announce creates a new announce .
3822	maybeAnnouncePeer sends a peer to a peer .
3823	Close closes the announce .
3824	NewUUID returns a new UUID .
3825	SetNodeInterface sets node interface
3826	NodeID returns the node ID
3827	SetNodeID sets the node ID
3828	NodeID returns the node ID
3829	ParseBytes parses a UUID into a UUID .
3830	MustParse parses a string into a UUID .
3831	FromBytes converts a UUID into a UUID .
3832	Must panics if err is nil .
3833	Variant returns the variant of the UUID .
3834	Time returns the time of the UUID .
3835	MarshalText encodes a UUID into a byte array .
3836	UnmarshalText implements the Unmarshaler interface for UUID .
3837	UnmarshalBinary unmarshals a UUID into a UUID .
3838	RunCursorAt runs the cursor at the cursor .
3839	Run runs the select command .
3840	New returns a new ScreenBuf instance
3841	Clear clears the screen .
3842	Write implements the io . Writer interface .
3843	Flush flushes the screen .
3844	Styler returns a string representation of the given attribute .
3845	New creates a new List .
3846	Prev implements the List interface .
3847	Search implements the List interface .
3848	CancelSearch cancels the list .
3849	SetStart sets the cursor .
3850	SetCursor sets the cursor .
3851	Next advances the cursor .
3852	PageUp implements the List interface .
3853	PageDown moves the cursor to the list .
3854	Items returns the items in the list .
3855	NewCursor creates a new cursor
3856	correctPosition updates the cursor position .
3857	format returns a string representation of the cursor .
3858	Format returns a string representation of the cursor .
3859	FormatMask returns a string representation of the cursor .
3860	Replace replaces the cursor .
3861	Position sets the cursor position .
3862	Move moves the cursor to the cursor .
3863	Backspace moves the cursor to the cursor .
3864	Listen starts the cursor at the given position .
3865	AggregateIssueChan returns a channel which can be used to issue a channel .
3866	StaticCallee returns the value of this function .
3867	Func returns the name of the package .
3868	Var returns the global variable name
3869	Const returns the name of the package .
3870	Type returns the type of the package .
3871	getGoPath returns the path to the global path
3872	addPath adds a path to the list of paths .
3873	configureEnvironmentForInstall configures the environment variables for the environment .
3874	UnmarshalStrict unmarshals a raw byte slice .
3875	Decode decodes a value into a struct .
3876	Close closes the encoder .
3877	save a single key
3878	align returns the alignment of x .
3879	lintName returns the name of the given name .
3880	sanityCheck checks if a function is valid .
3881	mustSanityCheck panics if the function fails .
3882	findDuplicate returns a new duplicate block with the given block .
3883	newIssuePathFromAbsPath creates a new IssuePath from a given path .
3884	NewIssue creates a new issue .
3885	SortIssueChan returns a channel that can be sent to a channel .
3886	binaryBinopop computes the logical binary expression .
3887	expr returns the value of the expression .
3888	stmtList adds a function to the builder .
3889	assignOp adds a function to the builder .
3890	localValueSpec returns the value of the given function .
3891	arrayLen returns the length of the expression .
3892	switchStmt is used to switch a statement .
3893	typeSwitchStmt is a helper function to create a type switch .
3894	forStmt iterates over a statement .
3895	rangeStmt iterates over the expression .
3896	buildFunction builds the function for the given function .
3897	buildFuncDecl builds the function for the given function .
3898	Build the program
3899	objectOf returns the object of the package .
3900	typeOf returns the type of the package .
3901	expect returns the expected event type .
3902	peek returns the next event type .
3903	prepare returns a copy of the node .
3904	Parse parses a string into a slice of strings .
3905	ParseVerb parses a string .
3906	terminates returns true if the given function returns true .
3907	readReaderRead reads data from the given buffer .
3908	Set the input reader
3909	yaml_emitter_initializes a new yaml .
3910	Write a buffer to the writer
3911	Set the output writer
3912	yaml_mapping_start_start_start_start_start_start event
3913	yaml_flush_flush is used to flush the buffer
3914	processConversion is a helper function to process the conversion function .
3915	processCompositeLiteral checks if the given node is a composite .
3916	processCgoExported is a helper function to process CgoExported .
3917	WritePackage writes a package to the given package .
3918	NewLinter creates a new Linter .
3919	IsStub returns true if the function is a stub .
3920	CheckUnexportedReturn is a helper function to check if the given function is not exported .
3921	CreateProgram creates a new program .
3922	IsIgnored returns true if the directive is ignored .
3923	Unmatched returns a map of matched directives .
3924	LoadFiles loads a list of files .
3925	ForArch returns a new Sizes with the given architecture .
3926	ConvertFrom returns true if the given type is converted to a type .
3927	Enumerate a node .
3928	IsBlank returns true if the given expression is blank .
3929	Dereference returns a pointer to a pointer .
3930	TCPDialCheck returns a check for the given address .
3931	HTTPGetCheck returns a check for a given URL .
3932	DNSResolveCheck looks up a DNS check for a given host .
3933	NewHandler creates a new http . Handler .
3934	NewMetricsHandler creates a new metrics handler .
3935	Timeout returns an error if the check fails .
3936	NewPinger creates a new Pinger .
3937	Network returns the IP address for the given network .
3938	AddIP adds a new IP address
3939	AddIPAddr adds a new IP address
3940	RemoveIP removes an IP from the Pinger .
3941	RemoveIPAddr removes an IP address from the pool .
3942	MakeLang creates a new slug
3943	Substitute returns a substring that matches the given string .
3944	SubstituteRune returns a string representation of a rune .
3945	Parse parses the command line flags and returns an error .
3946	Sum returns the hash of the given byte array .
3947	Reset resets the contents of xx .
3948	Write implements the io . Writer interface .
3949	Sum32 returns the hash of the xxh .
3950	ChecksumZero calculates the checksum of the checksum .
3951	Uint32Zero returns the uint32 value of x .
3952	UncompressBlock decodes src into dst .
3953	NewReader returns a new Reader .
3954	Reset resets the reader .
3955	readUint32 reads a uint32 from the reader .
3956	Write implements io . Writer .
3957	compressBlock writes the compressed data to w .
3958	Flush writes the data to the writer .
3959	Close closes the stream .
3960	Reset resets the writer .
3961	writeUint32 writes a uint32 to the Writer .
3962	Uncompress is a wrapper for Uncompress .
3963	Compress compresses the given flags .
3964	Fuzz returns the number of bytes .
3965	NewClient creates a new client
3966	Subscribe implements Client .
3967	Start starts the client
3968	PushEvent sends a message to the client
3969	New creates a new EventBus
3970	doSubscribe creates a new event handler
3971	Subscribe sends an event to the event bus .
3972	HasCallback returns true if the given topic is registered
3973	Unsubscribe unsubscribes the specified topic .
3974	Publish implements the EventBus interface .
3975	NewNetworkBus creates a new NetworkBus
3976	Start starts the network bus
3977	NewServer creates a new Server .
3978	HasClientSubscribed returns true if the client has a subscription .
3979	Start starts the server .
3980	Register registers a subscription .
3981	Valid checks if the TTL is valid .
3982	HasValidTLD returns true if the given domain is valid .
3983	IsInTLDMap returns true if the label is in tldMap
3984	Execute parses the given certificate and returns it .
3985	lintReversedIPAddressLabels parses the given IP address labels .
3986	CheckRDNNSequenceWhiteSpace checks if the given byte sequence is valid .
3987	IsIA5String returns true if the string is aIA5 string
3988	AllAlternateNameWithIAAS5 returns true if the given extension is a subnet .
3989	IsEV returns true if the given object is an EVID .
3990	Execute is part of the onion interface .
3991	getData fetches data from url
3992	getGTLDData returns the GTLD data for the given ICLD data .
3993	delegatedHTLDs returns a list of delegated GTLDs .
3994	validateGTLDs validates a list of TTLs .
3995	init initializes the flag .
3996	IsNameAttribute returns true if the object is a name attribute .
3997	MarshalJSON implements json . Marshaler
3998	String returns the string representation of the LintStatus .
3999	EncodeLintDescriptionsToJSON serializes the given io . Writer to w .
4000	LintCertificate returns a ResultSet .
4001	CheckApplies checks if the given cert is valid
4002	failResult returns a new LintResult .
4003	CheckEffective checks if the certificate is effective
4004	GetExtFromCert returns the extension associated with the given certificate .
4005	TypeInName returns true if the given name matches the given name .
4006	Get mapped policies
4007	printJSON prints v to stdout .
4008	UnmarshalJSON implements the json . Unmarshaler interface .
4009	NewClient creates a new client
4010	NewEnterpriseClient creates a new client
4011	Query executes a query .
4012	Mutate mocks base method
4013	populateFiles populates files .
4014	detectPath attempts to detect the current path .
4015	pathUp moves the file to the current directory .
4016	pathDown moves the file to the current directory .
4017	Destroy removes the base control .
4018	preload adds a row to the database .
4019	value returns the value of the row .
4020	RefreshScreen refreshes the screen .
4021	AddWindow creates a new window
4022	DestroyWindow removes a window .
4023	IsDeadKey returns true if the term is dead .
4024	SetTextDisplay sets the label .
4025	CreateRadioGroup creates a new RadioGroup
4026	Slected returns the number of selected elements .
4027	SelectItem returns true if the RadioGroup is selected
4028	SetSelected returns true if the given id is selected
4029	AddItem adds an item to the group
4030	NewColorParser returns a new ColorParser .
4031	NextElement returns the next element .
4032	SetTitle implements the EditField interface .
4033	SetMaxWidth sets the maximum width .
4034	SetSize sets the size of the edit field .
4035	PopAttributes removes all attributes from the canvas .
4036	PushClip adds a clip to the stack .
4037	PopClip removes the clip from the stack .
4038	InClipRect returns true if the given rectangle contains the given rectangle .
4039	SetScreenSize sets the size of the screen .
4040	Symbol returns the symbol of the cell .
4041	SetClipRect sets the clip rectangle .
4042	ClipRect returns a copy of the given canvas .
4043	DrawHorizontalLine draws a horizontal line .
4044	DrawVerticalLine draws a vertical line .
4045	DrawRawText draws the text from the given text .
4046	DrawTextVertical draws the text in the given text .
4047	DrawRawTextVertical draws a text text from the given text .
4048	DrawFrame draws a frame .
4049	FillRect fills the rectangle with the given width .
4050	TextExtent extracts text from text .
4051	EnsureVisible ensures that the item is visible .
4052	Clear clears the list .
4053	AddItem adds a item to the list .
4054	SelectItem selects an item from the list .
4055	Item returns the item in the list .
4056	FindItem finds the item in the list
4057	PartialFindItem returns the first found item in the list .
4058	SelectedItemText returns the selected item text .
4059	RemoveItem removes the item from the list .
4060	SysColor returns the color for the given color .
4061	SysObject returns the name of the given object .
4062	SetThemePath sets the theme path
4063	loadTheme loads theme .
4064	ReloadTheme reloads theme .
4065	ThemeInfo returns the theme for the given name .
4066	Ellipsize returns the string representation of a string .
4067	CutText cuts the text to the given string .
4068	AlignText returns the alignment of the given string .
4069	SliceColorized returns the string representation of a string .
4070	ColorToString returns a string representation of the color .
4071	MainLoop runs the main loop .
4072	CreateEditField creates a new edit field .
4073	ChildAt returns the child of the given parent .
4074	DeactivateControls removes all active controls .
4075	ActivateControl activates a control .
4076	FindChild finds a child of the given parent .
4077	IsMouseClickEvent returns true if the event is clicked .
4078	FindFirstControl returns the first occurrence of the given function .
4079	ActiveControl returns the active control .
4080	FindFirstActiveControl returns the first active control of the given parent .
4081	SendEventToChild sends an event to the given event .
4082	CalcClipper computes the Clipper of c .
4083	ClippedParent returns a copy of this Control .
4084	ControlInRect returns true if the given coordinate is in the given rectangle .
4085	CreateAlertDialog creates a ConfirmationDialog
4086	ProcessEvent returns true if the checkbox is enabled .
4087	SetState sets the state of the checkbox .
4088	State returns the current state .
4089	SetAllow3State sets whether the check box is allowed .
4090	SetSize sets the width of the check box .
4091	ScrollTo moves the frame to the frame .
4092	EnsureColVisible ensures that the column is visible .
4093	EnsureRowVisible ensures that the row is visible .
4094	Columns returns a slice of Columns .
4095	SetColumnInfo sets the column info .
4096	OnKeyPress sets the key press .
4097	OnDrawCell sets the draw cell .
4098	SetSelectedRow sets the selected row .
4099	SetSelectedCol sets the selected column .
4100	SetSelected sets the current value .
4101	OnChange is called when a change is changed
4102	SetText sets the text of the text view .
4103	SetWordWrap sets the wordWrap .
4104	LoadFile loads a text view from a file .
4105	AddText appends text to the buffer .
4106	Value returns the current progress bar .
4107	SetLimits sets the maximum value .
4108	Step returns the current progress bar .
4109	secondaryColors returns the color of the progress bar .
4110	SetSecondaryColors sets the secondary color of the progress bar .
4111	SetAutoSize sets auto size
4112	SetBarGap sets the gap .
4113	SetMinBarWidth sets the minimum width .
4114	SetShowTitles sets the title for the chart .
4115	SetLegendWidth sets the width of the chart .
4116	OnDrawCell adds a function to the draw cell .
4117	SetShowMarks sets the MarkMarks field s value .
4118	OnKeyDown implements the Window interface .
4119	SetMaximized sets the maximum size of the window .
4120	SetVisible sets the visible window .
4121	SetTop sets the top of the chart
4122	SetAutoScale sets auto scale
4123	SetHilitePeaks sets the HilitePeaks .
4124	loadEnv loads environment variables
4125	Get returns the value associated with the given key .
4126	MustGet returns the environment variable with the given key .
4127	Set sets the environment variable
4128	MustSet is used to set the environment variable
4129	GoPaths returns the list of Go paths .
4130	CurrentModule returns the current module .
4131	request sends an HTTP request to the server .
4132	validate validates the notification request
4133	NewNetworkNumber returns a new NetworkNumber
4134	ToIP converts the network number to a network .
4135	Equal returns true if two NetworkNumber objects are equal .
4136	Next returns the next network number .
4137	Prev returns a copy of the current network .
4138	NewNetwork creates a new Network .
4139	Masked returns a copy of the network .
4140	Contains returns true if the network is contained in the network .
4141	Covers returns true if the two networks are equal .
4142	LeastCommonBitPosition returns the number of bits in the network .
4143	Equal returns true if two Network objects are equal .
4144	Mask returns the mask of the mask .
4145	NextIP returns the next IP address .
4146	PreviousIP returns the IP address of the given IP .
4147	newPrefixTree creates a new prefix .
4148	Insert inserts an entry into the queue .
4149	Remove removes the prefix from the prefix .
4150	Contains returns true if the given IP is in the prefix .
4151	String returns a string representation of the prefix .
4152	walkDepth returns a channel for the prefix of the prefix .
4153	newBruteRanger returns a new instance of a new brute - trip .
4154	Insert inserts an entry into the router .
4155	Remove removes the given network .
4156	Contains returns whether the given IP is contained in the given IP .
4157	ParseMessage parses a string and returns a Message .
4158	NewClient creates a new client
4159	Say sends a message
4160	Send a message
4161	Join joins a channel .
4162	Depart deletes a channel
4163	Disconnect disconnects the connection .
4164	Connect connects to the IRC server
4165	Userlist returns the userlist of the channel
4166	handleLine handles incoming messages .
4167	Execute a pipeline command
4168	Execute the list of users
4169	calculate returns the classification of the given components .
4170	Execute executes the command
4171	Execute executes the command
4172	Execute the space quota
4173	Execute executes the command line arguments
4174	Execute the space users
4175	Execute executes the command
4176	Execute executes the command
4177	Contains returns true if the space name contains a space .
4178	Execute executes the command
4179	Execute executes the command
4180	Org returns a list of orgs
4181	GetGlobalConfig returns the global config
4182	GetOrgConfigs returns a list of all orgConfigs
4183	GetSpaceDefaults returns the space definition for the given yaml .
4184	AddOrgToConfig adds an org to the config manager
4185	AddSpaceToConfig adds a space configuration to the YAML file
4186	CreateConfigIfNotExists creates a config directory
4187	DeleteConfigIfExists deletes the config directory
4188	ExecuteSpaceCommand implements the command .
4189	Execute executes the command
4190	DeleteSpace deletes a space
4191	NewExportManager creates a new import manager
4192	Contains returns true if the orgName contains the orgName
4193	UpdateOrgs updates an existing organization
4194	UpdateSpaces updates the space for the given space
4195	allDesiredSegments returns a list of all the required paths .
4196	ListUsers returns a list of users
4197	Execute the space configuration
4198	RemoveUnknownVisibilites removes the status of the service .
4199	DisablePublicServiceAccess disables a service .
4200	ListServiceInfo returns information about a service .
4201	Execute executes the command
4202	Execute executes the command
4203	ExecuteOrgConfiguration executes the command
4204	ExecuteSpaceCommand implements the DeleteSpaceCommand interface .
4205	Execute executes the command
4206	NewKeyProvider creates a new secret provider
4207	NewConfiguration creates a new configuration .
4208	NewConfigurationTrustProvider creates a new instance of Configuration
4209	NewValidator returns a new JWTValidator
4210	ValidateRequest validates the request
4211	ValidateRequestWithLeeway validates the request with leeway
4212	Claims validates the JWT token
4213	NewJWKClient creates a new JWKClient
4214	NewJWKClientWithCache creates a new JWKClient
4215	GetKey returns the key associated with the given ID .
4216	GetSecret returns the secret associated with the given request .
4217	FromMultiple creates a RequestTokenExtractor from the given request .
4218	FromParams returns a JWT token from the request .
4219	NewMemoryKeyCacher creates a new MemoryKeyCacher .
4220	Get retrieves the key from the cache
4221	Add adds a key to the cache
4222	keyIsExpired returns true if the key is expired .
4223	handleOverflow is called when the cache is overflow .
4224	Patch writes a patch to the given io . Writer .
4225	Diff implements io . Writer .
4226	validColor returns true if the color is valid .
4227	New returns a Spinner instance .
4228	Start starts the Spinner .
4229	Stop stops the Spinner .
4230	Reverse reverses the Spinner .
4231	Color sets the color .
4232	UpdateSpeed updates the speed of the Spinner .
4233	UpdateCharSet updates the current character set .
4234	 erase the current line
4235	GenerateNumberSequence generates a sequence sequence sequence sequence number
4236	header returns the header of the stream .
4237	NewMultiplex creates a new Multixx .
4238	Accept accepts a stream and returns a Stream .
4239	NewNamedStream creates a new stream .
4240	encodeInt encodes an int64 into a uint64 .
4241	Center returns the center of the box .
4242	Round implements the Box interface .
4243	BoundingBox creates a BoundingBox with the given hash .
4244	BoundingBoxIntWithPrecision returns a Box with the given bits .
4245	DecodeCenter returns the center of the given hash .
4246	Neighbors returns a copy of the given hash .
4247	NeighborsIntWithPrecision returns the number of bits in the given hash .
4248	NeighborsIntWithPrecision returns the number of neighbors in the given hash .
4249	spread returns the spread of x .
4250	newEncoding creates a new encoding .
4251	Encode encodes x to the encoding .
4252	InitArgs initializes LinuxFactory .
4253	InitPath initializes a LinuxFactory .
4254	StartInitialization starts the container .
4255	newConsole creates a new console .
4256	mount mounts the console to the console .
4257	DupStdio performs a deep copy of the console .
4258	open opens the linux console .
4259	spname returns the name of the given file .
4260	finalizeNamespace is used to close the namespace
4261	joinExistingNamespaces joins the namespaces of the given namespaces .
4262	setupUser sets up the user for the user .
4263	killCgroupProcesses kills all processes in the process .
4264	addUidGidMappings adds a new UidMappings to the container .
4265	dropBoundingSet removes all buckets from the whitelist .
4266	drop removes all capabilities from the whitelist .
4267	ensureParent ensures that the root directory exists .
4268	Pid returns the pid of the process .
4269	Signal implements the Process interface .
4270	NewConsole creates a new console .
4271	setupRootfs initializes the rootfs rootfs .
4272	createDevices creates a new device
4273	createDeviceNode creates a device node
4274	remountReadonly attempts to remount the given path .
4275	joinCpuset is used to join a cgroup file .
4276	joinBlkio creates a new blkio .
4277	execSetns is part of the process .
4278	GetAllSubsystems returns all subsystems
4279	GetCurrentCgroupDir returns the current cgroup directory
4280	Capture returns a copy of the stack trace .
4281	getCgroupParamUint returns a uint64 value from cgroupFile .
4282	GetAdditionalGroupsPath returns the group path for the given group
4283	addArgsFromEnv adds args to the environment variable
4284	InitLabels initializes the list of labels
4285	SetFileLabel sets the file label
4286	SetFileCreateLabel sets the file label
4287	Relabel relabels the given file .
4288	NetworkGetRoutes returns the list of routes for the given route .
4289	CreateBridge creates a bridge .
4290	DeleteBridge deletes a bridge
4291	AddToBridge implements net . Interface .
4292	DelFromBridge implements net . Interface .
4293	labelIndex returns the index of the given label .
4294	getSelinuxuxMountPoint returns the Linuxfs mount point for the Linux filesystem .
4295	SelinuxEnabled returns true if the socket is enabled
4296	Setfilecon sets the file for a file
4297	Getfilecon gets the file from a file
4298	badPrefix checks if the given file is invalid .
4299	Chcon adds a file to the file system .
4300	DupSecOpt returns a slice of strings
4301	attach attaches the given network .
4302	Add adds a new Syscall to the context .
4303	Load initializes the context
4304	newGraph creates a new graph .
4305	MakeDisjointSet creates a new DisjointSet .
4306	FindSet returns a DisjointSet by name .
4307	Union creates a new union of two sets .
4308	Me returns the current user
4309	ListProjects lists all projects
4310	DisableProject disable project
4311	FollowProject returns a new project .
4312	GetProject retrieves a project by name
4313	ListRecentBuilds lists all builds .
4314	List recent builds .
4315	ListBuildArtifacts returns a list of artifacts for a build .
4316	AddSSHUser adds a new SSH user to the project .
4317	Build creates a build .
4318	ParameterizedBuild is used to query the build parameters
4319	BuildOpts creates a build .
4320	ClearCache removes the cache .
4321	DeleteEnvVar deletes an environment variable
4322	AddSSHKey adds an SSH key to the project
4323	GetActionOutputs returns the output of the action .
4324	ListCheckoutKeys returns a list of all the checkout keys .
4325	CreateCheckoutKey creates a new checkout key
4326	GetCheckoutKey returns the checkout key
4327	DeleteCheckoutKey deletes a checkout key
4328	New creates a new Client .
4329	Clone returns a copy of the client .
4330	Count counts the number of buckets .
4331	Gauge is used to gauge metrics .
4332	Timing adds a value to the bucket .
4333	Send sends a timer to the bucket .
4334	Unique adds a unique value to the bucket .
4335	Flush flushes the client .
4336	Close closes the connection .
4337	SampleRate sets the rate .
4338	Prefix adds a prefix to the config .
4339	TagsFormat sets the tags for the given tag .
4340	Tags adds tags to the server .
4341	flush flushes the buffer .
4342	BuildQwerty builds a new graph .
4343	BuildDvorak builds a new Dvorak .
4344	BuildKeypad builds a new graph .
4345	BuildMacKeypad builds a new graph .
4346	BuildLeet builds a new graph .
4347	DictionaryEntropy returns the entropy of a given score .
4348	SpatialEntropy computes the distance of the given algorithm .
4349	RepeatEntropy returns the entropy of the given token .
4350	SequenceEntropy returns the length of the sequence length .
4351	ExtraLeetEntropy returns the entropy of the given password .
4352	Date entropy
4353	Momimatch returns a list of matchers that match the given password .
4354	Null returns the number of bytes in a byte slice .
4355	Number returns the number of bytes .
4356	Array returns the number of elements in the array .
4357	FindRange returns a slice of bytes from a slice .
4358	Object reads an object from a byte slice .
4359	FindKey finds a key from the given key .
4360	FindIndex searches the index for a given index .
4361	Dot returns the dot representation of a key .
4362	Chain is a wrapper around ChainFunc
4363	Index returns the index of the given index .
4364	Range returns the range of bytes in the range .
4365	String returns the string representation of a string .
4366	Boolean returns the value of a boolean .
4367	Must panics if an error occurs .
4368	Parse parses the given selector and returns a new Op .
4369	Any returns the number of bytes in an array .
4370	ProxyRequestFromContext retrieves the request from the context
4371	DurationValue returns the DurationValue field if it s non - nil zero value otherwise .
4372	Base64Value returns the Base64Value field if it s non - nil zero value otherwise .
4373	UIValue returns the URI field if it s non - nil zero value otherwise .
4374	EmailValue returns the email address
4375	HostnameValue returns the Hostname field if it s non - nil zero value otherwise .
4376	IPv4Value returns the IPv4 address
4377	IP6Value returns the IPv6 value of the IPv6 address .
4378	CIDRValue returns the CIDR value .
4379	MACValue returns the MAC value .
4380	UUIDValue returns the string representation of the UUID .
4381	UUID3Value returns the UUID field if it s non - nil zero value otherwise .
4382	UUID4Value returns the UUID field if it s non - nil zero value otherwise .
4383	UUID5Value returns the UUID5Value field if it s non - nil zero value otherwise .
4384	Returns the ISBN value for the given string .
4385	Returns the ISBN10 value of the ISBN10 .
4386	Returns the ISBN13 value of the ISBN1313 .
4387	CreditCardValue returns the credit card value .
4388	SSNValue returns the SSN field if it s non - nil zero value otherwise .
4389	HexColorValue returns the hex color value .
4390	RGBColorValue returns the current RGBColor value .
4391	PasswordValue returns the password value .
4392	MarshalJSON implements the json . Marshaler interface for ObjectId .
4393	MarshalEasyJSON implements the json . ObjectMarshaler interface for ObjectId .
4394	UnmarshalJSON implements the json . Unmarshaler interface .
4395	UnmarshalEasyJSON handles deserialization of a ObjectId .
4396	SetBSON sets the value of the object
4397	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ObjectId .
4398	IsHostname checks if the given string is a hostname
4399	IsEmail checks if a string is a email address
4400	MarshalJSON implements json . Marshaler
4401	MarshalEasyJSON implements the json . Marshaler interface for Base64 .
4402	UnmarshalJSON implements json . Unmarshaler
4403	UnmarshalEasyJSON implements the json . Unmarshaler interface .
4404	SetBSON sets the base64 value
4405	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Base64 .
4406	MarshalJSON implements json . Marshaler
4407	MarshalEasyJSON implements json . Marshaler .
4408	UnmarshalJSON implements json . Unmarshaler
4409	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new URI .
4410	MarshalJSON implements the json . Marshaler interface .
4411	MarshalEasyJSON implements the json . Marshaler interface .
4412	UnmarshalJSON implements json . Unmarshaler
4413	UnmarshalEasyJSON implements the json . Unmarshaler interface .
4414	SetBSON sets the SON field s value .
4415	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Email .
4416	MarshalEasyJSON implements the json . Marshaler interface for Hostname .
4417	SetBSON sets the hostname
4418	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Hostname .
4419	MarshalEasyJSON implements the json . Marshaler interface for IPv4 .
4420	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new IPv4 .
4421	MarshalEasyJSON implements the json . Marshaler interface for IPv6 .
4422	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new IPv6 .
4423	MarshalEasyJSON implements the json . Marshaler interface for CIDR .
4424	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new CIDR .
4425	MarshalEasyJSON implements the json . Marshaler interface .
4426	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new MAC .
4427	MarshalEasyJSON implements the json . Marshaler interface for UUID .
4428	SetBSON sets the UUID field s value .
4429	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID .
4430	MarshalEasyJSON implements the json . Marshaler interface .
4431	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID .
4432	MarshalEasyJSON implements the json . Marshaler interface .
4433	UnmarshalJSON implements json . Unmarshaler
4434	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID4 .
4435	MarshalEasyJSON implements the json . Marshaler interface .
4436	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID5 .
4437	MarshalEasyJSON implements io . Writer .
4438	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN .
4439	MarshalEasyJSON implements json . Marshaler .
4440	UnmarshalEasyJSON implements the json . Unmarshaler interface .
4441	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN10 .
4442	MarshalEasyJSON implements the json . Marshaler interface .
4443	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN1313 .
4444	MarshalEasyJSON implements the json . Marshaler interface for CreditCard .
4445	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new CreditCard .
4446	MarshalEasyJSON implements the json . Marshaler interface for SSN .
4447	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new SSN .
4448	MarshalJSON implements json . Marshaler
4449	MarshalEasyJSON implements the json . Marshaler interface .
4450	UnmarshalJSON implements json . Unmarshaler
4451	UnmarshalEasyJSON handles deserialization of a HexColor .
4452	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new HexColor .
4453	MarshalEasyJSON implements the json . Marshaler interface .
4454	UnmarshalJSON implements the json . Unmarshaler interface .
4455	UnmarshalEasyJSON handles deserialization of a RGBColor .
4456	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new RGBColor .
4457	MarshalJSON implements json . Marshaler
4458	MarshalEasyJSON implements the json . Marshaler interface .
4459	SetBSON sets the password
4460	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Password .
4461	IsDateTime returns true if the string is a date time .
4462	ParseDateTime parses a string into a DateTime .
4463	UnmarshalText unmarshals a string .
4464	Scan implements the sql . Scanner interface .
4465	Value returns the current date .
4466	MarshalJSON implements json . Marshaler
4467	MarshalEasyJSON implements the json . Marshaler interface for DateTime .
4468	UnmarshalJSON implements json . Unmarshaler
4469	UnmarshalEasyJSON implements the json . Unmarshaler interface .
4470	SetBSON sets the Duration field s value .
4471	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DateTime .
4472	IsDuration returns true if the string is a duration .
4473	ParseDuration parses a string into a duration .
4474	Scan implements sql . Scanner .
4475	Value implements driver . Value .
4476	MarshalJSON implements json . Marshaler
4477	MarshalEasyJSON implements the json . Marshaler interface .
4478	UnmarshalJSON implements json . Unmarshaler
4479	UnmarshalEasyJSON implements the json . Unmarshaler interface .
4480	SetBSON sets the Duration field s value .
4481	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Duration .
4482	DateValue returns the DateValue field if it s non - nil zero value otherwise .
4483	IsDate returns true if the string is a valid date .
4484	UnmarshalText unmarshals a string into a Date
4485	Scan implements the sql . Scanner interface .
4486	Value returns the current date .
4487	MarshalEasyJSON implements the json . Marshaler interface .
4488	UnmarshalJSON implements json . Unmarshaler
4489	UnmarshalEasyJSON implements the json . Unmarshaler interface .
4490	SetBSON sets the BSON object
4491	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Date .
4492	DateTimeValue returns the DateTime field if it s non - nil zero value otherwise .
4493	NewSeededFormats returns a new Registry .
4494	Add adds a new format to the format .
4495	GetType returns the type for the given name .
4496	DelByName removes the name from the format .
4497	DelByFormat removes the format from the format .
4498	ContainsName returns true if the given name contains name .
4499	ContainsFormat returns true if the string is contained in the format .
4500	Parse parses a string representation of a format .
4501	Sequence returns a FilterFunc that returns a FilterFunc .
4502	Contents returns the contents of the list .
4503	Items returns a FilterFunc that accepts a slice of strings .
4504	Repeat creates a new filter .
4505	Numbers returns a FilterFunc that sets the number of numbers .
4506	Uniq returns a FilterFunc that returns a FilterFunc .
4507	UniqWithCount is a wrapper around FilterFunc that returns a FilterFunc that filters out .
4508	Reverse returns a new filter .
4509	SampleWithSeed returns a FilterFunc that applies the given seed to the given seed .
4510	First returns a FilterFunc that uses the given arguments .
4511	Last returns the last element in the list .
4512	DropLast drops the last element in the list .
4513	Text adds the text to the sort .
4514	TextDecreasing removes the number of elements .
4515	Num adds n to the sort .
4516	NumDecreasing removes n from the sort .
4517	By sorts the sort filter by sorting .
4518	flipLast returns the last element in the sort .
4519	RunFilter runs the filter .
4520	RunFilter runs the filter .
4521	Grep returns a Filter that matches the regexp .
4522	GrepNot returns a filter that matches the given string .
4523	LimitArgs sets the limit arguments .
4524	Cat returns a filter that can be used to filter files .
4525	ReadLines reads lines from reader .
4526	IsComment returns true if the line is a comment .
4527	NewHostsLine returns a HostsLine
4528	IsWritable returns true if the host is writable .
4529	Flush flushes the host to the host .
4530	Add adds an IP address to the host .
4531	Remove removes a host from the host .
4532	NewHosts returns a new Hosts
4533	NewOpenAPISchemaFor implements the OpenAPI interface .
4534	Validate validates this object
4535	FlattenToV1 converts a list of objects into an array of objects .
4536	ParseVersion parses the version of the version .
4537	FetchVersion returns the server s version .
4538	SetMetaDataAnnotation sets the metadata for the object
4539	SetMetaDataLabel sets the label for the given key .
4540	ResourceNameFor returns the resource name for the given object .
4541	FqName returns the name of the object .
4542	String returns a string representation of the ImageName .
4543	RegistryRepoName returns the name of the image name
4544	RegistryURL returns the URL of the image .
4545	ParseImageName parses image name and returns an image name .
4546	NewRegistryResolver creates a new Resolver .
4547	NewLogFormatter returns a new Formatter .
4548	NewMemcachedDiscoveryClient returns a new CachedDiscoveryClient
4549	ClientForResource returns the resource for the given resource .
4550	formatDiff returns a string representation of the diff .
4551	isEmptyValue returns true if the value is empty .
4552	depTier returns the total tier for the given domain .
4553	New returns a new Lexer .
4554	NextToken returns the next token .
4555	InnerText implements the BlockStatement interface for BlockStatement .
4556	MarkdownHelper renders the given HTML template .
4557	Parse parses a string .
4558	NewHelperMap creates a HelperMap .
4559	AddMany adds a helper to the HelperMap
4560	ForegroundRenderer renders the rendered template with the given template .
4561	Render renders the given input .
4562	RunScript runs the given input .
4563	NewTemplate creates a new Template .
4564	Parse parses the template .
4565	Exec executes the given compiler .
4566	Clone returns a copy of the template .
4567	Render renders the given string .
4568	BlockWith implements the BlockContext interface for BlockContext .
4569	Has returns true if the key exists
4570	export returns a map of values .
4571	NewContextWith returns a new context with the given data .
4572	NewContextWithContext returns a new Context instance
4573	Aggregate aggregates and returns a slice of buckets .
4574	Less returns true if the bucket is less than this bucket .
4575	parseDump parses a goroutine and parses it into a goroutine .
4576	hasPathPrefix returns true if the given path is a path prefix .
4577	getFiles returns the list of files in the given goroutine .
4578	splitPath splits a path into a slice of strings .
4579	isFile returns true if p is a file .
4580	rootIn returns the path of the root of the root directory .
4581	findRoots attempts to find the root of the root directory
4582	String returns the string representation of the function .
4583	Name returns the name of the function .
4584	PkgName returns the package name .
4585	IsExported returns true if f is exported
4586	IsPtr returns true if the argument is a pointer to a pointer .
4587	Equal returns true if the Args are equal .
4588	similar to compare two Args .
4589	merge merges two Args .
4590	Equal returns true if two Call objects are equal .
4591	sanity returns true if the call is similar to this function .
4592	merge returns a copy of this call .
4593	PkgSrc returns the package s Src path .
4594	updateLocations updates the location of the source directory .
4595	Equal returns true if the stack is equal .
4596	compare returns true if the stack is in the stack .
4597	merge merges the stack into the stack .
4598	Less returns true if the stack is less than one .
4599	Equal returns true if the signature is equal .
4600	match returns true if the signature matches the signature .
4601	merge merges the signature into a new Signature .
4602	Less returns true if the signature is less than the signature .
4603	CreatedByString returns a string representation of the signature .
4604	nameArguments returns the name of the goroutine .
4605	CalcLengths calculates the total length of the stack .
4606	functionColor returns the color of the given line .
4607	RoutineColor returns the color for the given bucket .
4608	BucketHeader returns a string representation of the bucket .
4609	callLine returns the line of the line .
4610	StackLines returns the line lines of the given signature .
4611	addGoroutine adds a goroutine to the cache .
4612	load loads the cache from the cache .
4613	getFuncAST returns the function of the given function .
4614	fieldToType returns the name of the field .
4615	extractArgumentsType extracts the list of arguments from a function .
4616	Reset resets the template .
4617	Unlock the mutex
4618	RUnlock is part of the MWMut interface .
4619	other implements the Locker interface .
4620	getSourceLines returns the lines of the given file .
4621	stack returns a slice of bytes .
4622	NewWithAlphabet creates a new uuid string
4623	numToString converts a string to a string .
4624	stringToNum converts a string to a string .
4625	newAlphabet creates a new alphabet .
4626	Index returns the index of the given element .
4627	reduce returns a copy of the given string .
4628	Is returns true if the given error is an error .
4629	Error implements the error interface .
4630	ErrorStack returns the string representation of the error .
4631	TextStyle returns the string representation of the text .
4632	NewPointsIndex creates a new points index .
4633	NewExpiringPointsIndex returns a new PointsIndex .
4634	Get returns the point at the given id .
4635	GetAll returns all the points in the point .
4636	Add adds a new point to the index .
4637	Remove removes the given id .
4638	Range returns a slice of points in the point .
4639	KNearest returns the nearest point of the points in the given point .
4640	PointsWithin returns a slice of points within the given point .
4641	newMultiValueCounter returns a new MultiValueCounter .
4642	newAverageAccumulator returns a new AverageAccumulator .
4643	newGeoIndex creates a new GeoIndex .
4644	AddEntryAt returns the entry at the given point .
4645	GetEntryAt returns the entry at the given point .
4646	Range returns the range of the given point .
4647	NewClusteringIndex returns a new ClusteringIndex .
4648	NewExpiringClusterIndex returns a new ClusteringIndex
4649	Range returns a slice of points in the cluster .
4650	KNearest returns the nearest point of the given point .
4651	Push adds an element to the queue .
4652	Pop removes the element from the queue .
4653	Peek returns the next item in the queue .
4654	PeekBack returns the next item in the queue .
4655	ForEach iterates over all elements in the queue .
4656	Clone returns a copy of the set .
4657	NewCountIndex creates a new CountIndex .
4658	NewExpiringCountIndex returns a new CountIndex .
4659	Range returns a slice of points in the index .
4660	KNearest returns the nearest point of the given point .
4661	DirectionTo returns the direction of the given point .
4662	bearingTo returns the bearing of the given point .
4663	computeSquareDistance returns the approximate distance between two points .
4664	newResult creates a new result .
4665	NewSource creates a new source .
4666	new helper method
4667	newHelperMethodDoctype creates a helper function that returns a helper function that returns a helper function .
4668	NewFile creates a new File .
4669	Load loads a template from the given path .
4670	getCache returns the cached template for the given name .
4671	setCache adds a template to the cache
4672	FlushCache refreshes the cache .
4673	newPlainTextInner creates a new plainTextInner .
4674	newEmptyElement creates a new empty element .
4675	newComment creates a new comment .
4676	new helper method
4677	ParseSource parses the contents of a source .
4678	parseBytes parses a string and returns a list of elements .
4679	appendChildren appends a list of children to the given source .
4680	newHTMLComment creates a new HTML comment
4681	new helper method
4682	newHelperMethodConditionalComment creates a helper function that returns a helper function that returns a helper function that returns a helper function .
4683	CompileResult compiles a result into a template .
4684	CompileResultWithTemplate compiles the result into a template .
4685	AppendChild appends a child element to the element .
4686	writeChildren writes the contents of the element .
4687	newElementBase returns a new ElementBase .
4688	readFiles reads the contents of a file .
4689	readFile reads a file from a file .
4690	findIncludes attempts to find all files in the given file .
4691	findIncludePaths finds all paths in the given file .
4692	hasFile checks if a file exists
4693	newHelperMethodCSS creates a helper function that returns a helper function that returns a helper function that returns a new helper function .
4694	newElement creates a new element
4695	new helper method
4696	setAttributes sets the attributes of the HTML tag .
4697	noCloseTag returns true if the HTML tag is closed .
4698	IsBlockElement returns true if the element is a block element .
4699	newHTMLTag creates a new HTML tag .
4700	extractTagName extracts the tag name from the string .
4701	extractID extracts the ID from a string .
4702	extract classes from string
4703	parseTokens parses a string and returns a list of tokens .
4704	newPlainText creates a plain text .
4705	isHelperMethod returns true if the line is a helper function .
4706	isHelperMethodOf returns true if the given name is a helper function .
4707	isPlainText returns true if the line is a plain text .
4708	isComment returns true if the line is a comment .
4709	isHTMLComment returns true if the line is HTML .
4710	isAction returns true if the line is a action .
4711	fileName returns the name of the line .
4712	childOf returns true if the given element is a child of the line .
4713	newLine creates a new line .
4714	indent returns the indentation of the given string .
4715	InitializeOptions initializes options .
4716	AddNoCloseTagName adds a CloseTagName to the options list .
4717	DeleteNoCloseTagName deletes the specified name .
4718	Asset returns the asset associated with the given name .
4719	newAction creates a new Action .
4720	AddRelayTransport adds a transport to the transport .
4721	NewRelay creates a new Relay .
4722	ParseJSONBody parses the given io . Reader .
4723	New creates a new Runner .
4724	RunGroup runs the given group .
4725	ParseFile parses a list of files into a group .
4726	ParseLine parses a string into a Line .
4727	Capture returns the string representation of the line .
4728	Bytes returns a slice of bytes .
4729	Equal returns true if val is equal .
4730	Type returns the string representation of the value .
4731	NewServer returns a new http . Handler
4732	PrettyPrintAsJSON prints a JSON string to stdout .
4733	StringMarshalJSON returns a string representation of the given data .
4734	StringMD5Hex returns a string representation of a string .
4735	StringSHA1Base64 returns the base64 encoded string
4736	StringJoinFormat returns a string representation of a string .
4737	StringJoin returns a string representation of a slice .
4738	Less implements sort . Interface .
4739	Swap swaps two strings .
4740	StringMap returns a slice of strings
4741	StringFilter returns a slice of strings
4742	StringFindBetween returns the difference between two strings .
4743	StringFind finds a string with the given token .
4744	EncryptAES encrypts a plaintext using AES ciphertext .
4745	DecryptAES decrypts the given ciphertext using the given ciphertext .
4746	PanicIfErr panics on error .
4747	AsError converts an error to an error .
4748	FirstError returns an error if the error is not nil .
4749	LastError returns the last error .
4750	AsErrorList converts an error to an ErrorList .
4751	Error returns a string representation of the ErrorList .
4752	Last returns the last error
4753	Collect adds an error to the list .
4754	HTTPCompressHandler creates a new http . HandlerFunc
4755	HTTPPostJSON sends an HTTP POST request to the given URL .
4756	HTTPDelete deletes the given URL .
4757	HTTPUnmarshalRequestBodyJSON unmarshals the request body into the request body .
4758	GetWriter returns a new flate writer .
4759	ReturnWriter implements FlushPool .
4760	GetWriter returns a writer for the given destination .
4761	ReturnWriter implements gzip . Writer .
4762	FileGetLines retrieves a list of lines from a URL .
4763	FileGetLastLine returns the last line of the given URL .
4764	FileSize returns the size of the file .
4765	BytesHead returns the contents of the given data .
4766	BytesMap converts a function to a slice of bytes .
4767	BytesFilter returns a slice of bytes in a slice .
4768	ReflectSetStructFieldString sets the field s value .
4769	ReadBinary reads the number of bytes from the given io . Reader .
4770	WriteFull implements io . Writer
4771	ReadLine reads a line from the reader .
4772	WaitForStdin is like WaitForStdin but panics .
4773	GetenvDefault returns the default value for the given key .
4774	NetIP returns the network address of the net . IP address .
4775	RealNetIP returns the IP address of the network .
4776	Load loads the configuration from the given configuration .
4777	LoadJSON loads the configuration from the given configuration .
4778	LoadTOML loads the configuration from the given configuration .
4779	LoadBytes loads the configuration from the given source .
4780	LoadJSONBytes loads the JSON bytes from src .
4781	LoadTOMLBytes loads the TOML bytes from src .
4782	LoadWithEnvJSON loads the environment variables from the given configuration .
4783	LoadWithEnvTOML loads the environment variables from the given configuration .
4784	LoadWithEnvBytes loads the environment from the given src .
4785	LoadWithEnvJSONJSONBytes loads an env from the given src .
4786	LoadWithEnvTOMLBytes loads the EnvTOMLBytes from src .
4787	Crop returns a copy of the image .
4788	computeSize computes the size of the given rectangle .
4789	computeCropArea computes the computed crop area .
4790	NewOr returns a new instance of the given command .
4791	NewLongThen returns a new instance of Wait
4792	Command returns a string representation of git command
4793	Exec runs the git command .
4794	stopProcess stops the process .
4795	runCmd runs the command .
4796	runCmdOutput runs the command with the given arguments .
4797	Init initializes the git backend
4798	writeScriptFile writes a script file to disk .
4799	gitWrapperScript returns a copy of git wrapper for GitWrapper .
4800	bashScript returns a bash script that can be used to build a script .
4801	handleToken is used to handle a token
4802	Handle handles a request .
4803	handleSignature handles the request signature .
4804	setup initializes the webhook .
4805	parseURL parses a URL and returns a URL .
4806	Start starts the repo
4807	add adds a service to the list .
4808	Repo returns the repository with the given index .
4809	String returns the string representation of the repository .
4810	Val returns the string representation of the RepoURL .
4811	Pull implements the Repo interface .
4812	pull is used to pull a commit .
4813	checkoutCommit commits the given commit hash .
4814	gitCmd runs git command
4815	Prepare prepares a git repository .
4816	lastRecentCommit returns the last commit of the repository .
4817	originURL returns the URL of the repository .
4818	execAnd executes the command
4819	Stdin sets stdin to stdin
4820	Stdout sets stdout to stdout
4821	Stderr sets stderr to stdout
4822	Mkdir mocks base method
4823	MkdirAll implements the MkdirAll interface .
4824	Stat implements the os . FileInfo interface .
4825	LookPath returns the path to the given file .
4826	TempFile returns a temporary file with the given prefix .
4827	ReadDir reads a directory from the given directory .
4828	Command creates a new git command
4829	NewTicker returns a new Ticker
4830	TimeSince returns the time since the given time .
4831	handleSignature is used to handle a request
4832	Error implements the error interface .
4833	hookName returns the name of the hook handler .
4834	ServeHTTP implements the http . Handler interface .
4835	hostname returns the hostname
4836	genOptionsCDBC generates options for options .
4837	genQueryOptions returns the query options for the query .
4838	convertOptions converts the options into a slice of strings .
4839	mode returns the file mode for the given path .
4840	registerAlias registers a new alias for the given alias .
4841	Register registers a scheme .
4842	Unregister removes the given name .
4843	has returns true if b contains a b .
4844	SchemeDriverAndAliases returns the scheme for the given name .
4845	GenerateFromURL generates a URL from a URL .
4846	GenOpaque generates opaque url
4847	GenPostgres generates postgres for the given URL .
4848	GenSQLServer generates a SQLServer .
4849	GenerateMyMySQL generates the MySQL database for the given URL .
4850	GenOracle generates a URL from a URL .
4851	GenFirebird generates a URL for the URL .
4852	GenADODB generates a URL for the given URL .
4853	GenODBC generates a URL for the given URL .
4854	GenOLEBCBC generates an OLE CDBC URI
4855	GenClickhouse generates a URL from a URL .
4856	GenVoltDB generates a URL for the given URL .
4857	GenPresto generates a Presto .
4858	GenCassandra generates a random string
4859	GenSnowflake generates a random snowflake URL
4860	String returns a string representation of the URL .
4861	Short returns the string representation of the URL .
4862	Normalize normalizes the URL into a URL .
4863	NewLimiter creates a new RateLimiter .
4864	Has returns true if the given id exists .
4865	Attempted returns the number of times in the given ID .
4866	Left is part of the RateLimiter interface .
4867	Attempt attempts to attempt to attempt to attempt to attempt to attempt to attempt to attempt to increment the given ID .
4868	IsPublicIP returns true if the given IP is a public IP address .
4869	ParseForwarded parses a forward IP address string and returns a string .
4870	In returns true if the parameter is in the mode
4871	Out returns true if the parameter is in the mode .
4872	SetLobReader sets the LobReader .
4873	Error implements the error interface .
4874	SetIdx sets the idx .
4875	Code returns the number of errors .
4876	Position returns the position of the error .
4877	Level returns the level of the error .
4878	Text implements the error interface .
4879	IsWarning returns true if the error is a warning .
4880	IsError returns true if the error is an error .
4881	IsFatal returns true if the error is a fatal error .
4882	Size returns the number of bytes in bytes .
4883	StringSize returns the size of a string .
4884	FullRune returns true if p is a fullRune .
4885	DecodeRune decodes a rune .
4886	RuneLen returns the length of the rune .
4887	On returns true if the tracer is enabled
4888	SetOn sets whether or not the given function is enabled .
4889	read reads the segment header .
4890	Go starts the sniffer .
4891	Write implements the SessionConn interface .
4892	NewSession creates a new session .
4893	QueryDirect is part of the Session interface .
4894	ExecDirect executes a query .
4895	Prepare prepares a prepared query .
4896	Exec executes the statement .
4897	DropStatementID deletes a statement .
4898	Call executes the statement .
4899	Query implements the Session interface .
4900	FetchNext implements the Session interface .
4901	CloseResultsetResultID closes the session set .
4902	Commit commits the transaction .
4903	NewReader returns a new Reader .
4904	NewReaderSize returns a new ReaderSize .
4905	GetError implements io . Reader .
4906	Skip implements io . Reader .
4907	ReadB reads b from the reader .
4908	ReadFull implements io . Reader .
4909	ReadBool reads a boolean from the reader .
4910	ReadInt16 reads an int16 from the reader .
4911	ReadUint16 reads a uint16 from the reader .
4912	ReadInt32 reads an int32 from the reader .
4913	ReadUint32 reads a uint32 from the reader .
4914	ReadInt64 reads an int64 from the reader .
4915	ReadUint64 reads a uint64 from the reader .
4916	ReadFloat32 reads a float32 from r .
4917	ReadFloat64 reads a float64 from the reader .
4918	ReadCesu8 reads from the reader .
4919	NewWriter returns a new Writer .
4920	NewWriterSize creates a new writer .
4921	Flush flushes the writer .
4922	WriteZeros writes z to w .
4923	Write implements io . Writer
4924	WriteB writes b to w .
4925	WriteBool writes a bool to w .
4926	WriteInt8 writes an int8 to w .
4927	WriteInt16 writes an int16 to w .
4928	WriteUint32 writes a uint32 to w .
4929	WriteInt64 writes an int64 to the writer .
4930	WriteFloat32 writes a float32 to w .
4931	WriteFloat64 writes float64 to w .
4932	WriteString writes a string to the writer .
4933	WriteCes8 writes bytes to w .
4934	WriteStringCes8 writes a string to w .
4935	DataType returns the type of the type .
4936	Name returns the name of the column .
4937	NewBasicAuthConnector creates a new Connector
4938	Locale returns the local locale
4939	FetchSize implements Connector .
4940	Timeout implements Connector .
4941	TLSConfig returns the TLS configuration for this Connector .
4942	SetTLSConfig sets TLS configuration
4943	SessionVariables returns the current session variables .
4944	SetSessionVariables sets session variables
4945	BasicAuthDSN returns the URL for the connection .
4946	Row adds a row to the database .
4947	readShortUtf8 reads a uint8 from rd .
4948	NewLob returns a new Lob object
4949	TokenString returns the string representation of a token .
4950	NewScanner returns a new scanner .
4951	Next returns the next rune .
4952	RandomIdentifier generates a random identifier
4953	String returns the string representation of the identifier .
4954	Parse parses a string into a byte slice .
4955	Serialize serializes parts into a byte slice .
4956	Align the data to the given byte slice .
4957	Xor returns a copy of the two byte slices .
4958	Slice returns a slice of slices .
4959	Random returns a random byte slice
4960	Concat concatenates a slice of arrays .
4961	Unwrap a slice of arrays
4962	UInt64ToBytes converts a uint64 to a byte slice .
4963	UInt32ToBytes converts a uint32 to a byte slice .
4964	Dump returns a string representation of a byte array .
4965	Decode decodes a base64 encoded string .
4966	Encode encodes data into a byte slice .
4967	Decode decodes a string into a string
4968	DecodeBytes decodes a token from a string .
4969	DerivePBKDF2 returns a copy of the given password .
4970	ReadPrivate reads a private key from the given bytes .
4971	ReadPublic reads a public key from the given bytes .
4972	AddPk77 adds the given data to the given data .
4973	RemovePkcs7 removes padding from the given block .
4974	ContainerMetrics returns the metrics for the given app .
4975	SortRecent returns a sorted list of log messages .
4976	SortContainerMetrics sorts a list of containers .
4977	New creates a new Consumer .
4978	TailingLogs is part of the Consumer interface .
4979	TailingLogsWithoutReconnect is part of the Consumer interface .
4980	Stream is part of the Consumer interface .
4981	StreamWithoutReconnect is part of the Consumer interface .
4982	Firehose is part of the Consumer interface .
4983	FirehoseWithoutReconnect creates a new instance of Firehose .
4984	FilteredFirehose returns a channel that can be used to receive events .
4985	SetOnConnectCallback implements the Consumer interface for Consumer .
4986	Close closes the consumer
4987	zpool runs zpool command
4988	GetZpool returns a Zpool instance
4989	Destroy destroys zpool
4990	ListZpools lists all zpools
4991	Error implements the error interface .
4992	zfs runs zfs command
4993	GetDataset returns a Dataset
4994	Clone clones a snapshot .
4995	Unmount is part of the Dataset interface .
4996	Mount is part of the Dataset interface .
4997	ReceiveSnapshot reads a snapshot from the given io . Reader
4998	SendSnapshot sends a snapshot to disk
4999	Destroy destroys the Dataset
5000	Rename implements the Dataset interface .
5001	Snapshot is part of the Dataset interface .
5002	Rollback rolls back a snapshot .
5003	Children returns a list of all the children of the dataset .
5004	Diff implements the Datode interface .
5005	MSb32 returns the number of bytes in x .
5006	msb64 returns the number of bytes in n .
5007	EncodeAll encodes src into dst .
5008	DecodeAll decodes the selector from src .
5009	canPack returns true if the passed bits can be packed .
5010	pack28 packs a uint32 into a uint32
5011	pack14 packs a uint32 into a uint32
5012	pack9 packs 8 bytes
5013	pack7 packs 8 bytes
5014	DecodeAll returns the number of elements in src .
5015	Out returns the bytes of the client .
5016	Step implements the Client interface .
5017	DialWithTimeout creates a new session with timeout
5018	ParseURL parses a URL into a DialInfo struct
5019	LiveServers returns a list of active servers .
5020	DB returns a Database instance .
5021	C creates a collection with name .
5022	With adds the session to the database .
5023	With adds a new session to the collection .
5024	Logout shuts down the database .
5025	LogoutAll shuts down the session
5026	RemoveUser removes a user from the database .
5027	New returns a new session .
5028	Copy returns a copy of the session .
5029	Clone returns a copy of the session .
5030	Close closes the session .
5031	Refresh refreshes the session .
5032	SetSyncTimeout sets the sync timeout
5033	SetSocketTimeout sets the session timeout
5034	SetCursorTimeout sets the cursor timeout .
5035	SetPoolLimit sets the pool limit
5036	Safe returns a safe copy of the session .
5037	Fsync is part of the Session interface .
5038	FsyncUnlock implements the Session interface .
5039	Repair returns a copy of the collection .
5040	Iter returns an iterator for the pipe .
5041	One implements the Pipe interface .
5042	Batch sets the number of batches .
5043	IsDup returns true if the error is a DUP error .
5044	DropCollection deletes the collection .
5045	Skip skips the given number .
5046	Limit sets the limit of the query .
5047	SetMaxScan sets the maximum number of rows .
5048	LogReplay implements the Query interface .
5049	CollectionNames returns the names of the collection .
5050	DatabaseNames returns the names of the database .
5051	Timeout returns true if the iterator is expired .
5052	Count returns the number of documents .
5053	Count returns the number of elements in the collection .
5054	VersionAtLeast returns true if the version is at least one version .
5055	BuildInfo returns information about a build .
5056	setSocket sets the session
5057	writeQuery writes the query to the database .
5058	Acquire is part of the MongoCluster interface .
5059	Release releases the cluster
5060	syncServersLoop is used to synchronize servers .
5061	Close closes the mongo server .
5062	RecycleSocket deletes the given socket .
5063	AbendSocket shuts down the mongo server .
5064	BestFit implements the MongoServer interface .
5065	Add adds a template to the render .
5066	Instance creates a new instance of Render .
5067	loadTemplate loads a template from the template .
5068	New returns a new Render .
5069	Create creates a new Render .
5070	Validate validates the template
5071	tokenFor returns the token for the transaction .
5072	NewRunner creates a new Runner .
5073	Run runs the transaction .
5074	ResumeAll resets all pending transactions .
5075	Resume resets the state of the runner .
5076	SetChaos sets the Chaos settings for the given Chaos .
5077	Connect connects to the database .
5078	ErrorHandler implements gin . HandlerHandler .
5079	assert asserts that the transaction has the given revision .
5080	Server returns the mongo server
5081	ServerInfo returns the server info
5082	InitialAcquire implements the MongoSocket interface .
5083	Acquire creates a new mongo server
5084	Release releases the connection .
5085	SetTimeout sets the timeout
5086	Error implements the Error interface .
5087	Error implements the Error interface for StructErrors .
5088	New creates a new Validate .
5089	Field adds a field to the field .
5090	FieldWithValue adds a value to the field .
5091	Create creates a new article .
5092	Edit the article
5093	List lists all articles .
5094	Update updates the article .
5095	Delete deletes a document .
5096	ObjectIdHex converts a string to an ObjectId .
5097	IsObjectIdHex returns true if the given string is an object ID .
5098	NewObjectId returns a new ObjectId
5099	NewObjectIdWithTime returns a new ObjectId with the given time .
5100	MarshalJSON implements the json . Marshaler interface for ObjectId .
5101	byteSlice returns the byte slice of the given object .
5102	Time returns the time of the object .
5103	Counter returns the number of bytes in the object .
5104	Insert inserts documents into bulk .
5105	Run executes the bulk operation .
5106	hasLengthOf returns true if the field contains the given field .
5107	hasMinOf returns true if the given field is greater than 1 .
5108	hasMaxOf returns true if the given field is greater than max .
5109	Connect connect to MongoDB
5110	SetDebug sets debug mode
5111	Remove removes a file .
5112	SetChunkSize sets the chunk size
5113	SetId sets the id .
5114	SetName sets the file name
5115	SetContentType sets the content type of the file .
5116	Size returns the size of the GridFile .
5117	SetUploadDate sets the upload date .
5118	Abort implements the GridFile interface .
5119	Write implements the io . Writer interface .
5120	Read implements the io . Reader interface .
5121	setCursorPosition sets the cursor position .
5122	collectAnsiIntoWindowsAttributes is used to collect an ANSI int64 values .
5123	invertAttributes returns the mask of the given windows .
5124	simulateLF returns true if the window has been read .
5125	executeLF executes the command line .
5126	effectiveSr returns the effective scroll region .
5127	scroll is used to scroll the screen .
5128	scrollLine scrolls the cursor to the screen .
5129	bytesToHex converts a byte slice to a hex string .
5130	readCloser reads the contents of the file .
5131	New creates a new cached downloader
5132	populateCache is used to populate the cached cache
5133	Log a message
5134	Output prints the color .
5135	Success sets the color of the color
5136	Info implements Color interface .
5137	Error implements the Color interface .
5138	Warn implements Color interface .
5139	Running implements the Color interface .
5140	Log a message
5141	Output prints a human readable message
5142	Error implements the Error interface .
5143	Log a message
5144	Output prints the given message .
5145	Success sends a message to the UI
5146	Info implements the interface .
5147	Error implements the interface .
5148	Warn writes a warning message .
5149	Running is part of the UI interface .
5150	New returns a new BasicUI instance
5151	AddColor creates a new ColorUI .
5152	Log a message
5153	NewMongoStore creates a new MongoStore .
5154	New creates a new session .
5155	Push adds a new segment to the stack .
5156	Pop removes the segment from the stack .
5157	Peek returns the next segment .
5158	RecordMetricsWithRecorder is used to record metrics .
5159	Init initializes the engine
5160	errNo returns an error if the given error is not nil .
5161	caller returns the name of the given function .
5162	doInit initializes the Relicion .
5163	RequestShutdown shuts down the request .
5164	NewTx creates a new transaction .
5165	NewRequestTx creates a new transaction .
5166	NewBackgroundTx creates a new background transaction .
5167	Start starts the transaction .
5168	End implements the Transaction interface .
5169	StartGeneric starts a generic segment .
5170	StartDatastore starts a new datastore .
5171	StartExternal starts an external segment .
5172	EndSegment implements the Transaction interface .
5173	ReportError reports an error .
5174	WithTx adds a transaction to the context .
5175	FromContext returns a Tx with the given context .
5176	TraceExternal is part of the Tracer interface .
5177	TraceGeneric is part of the Trace interface .
5178	TraceDatastore is part of the database .
5179	trace returns a Trace with the given name .
5180	Serve creates a new http . HandlerFunc
5181	Purge removes all items from the cache .
5182	RemoveOldest implements the LRU interface .
5183	Keys returns the keys in the cache .
5184	removeElement removes the entry from the cache .
5185	DefaultCluster returns a default Cluster
5186	NewClusterWithHost returns a new Cluster with the given host .
5187	AddHost adds a host to the cluster .
5188	Host returns the host of the cluster .
5189	RemoveHost removes a host from the cluster .
5190	Hosts returns all the hosts in the cluster .
5191	Less returns true if two columns are equal .
5192	Less returns true if the field s value is equal .
5193	Index returns the index for the given name .
5194	Indexes returns the index of the Schema .
5195	HasIndex returns true if the schema exists .
5196	NewPQLBaseQuery creates a new PQLBaseQuery .
5197	Add adds a query to the query .
5198	NewPQLRowQuery creates a new PQLRow .
5199	String returns a readable string representation of the IndexOptions .
5200	OptIndexKeys returns an option setter for options .
5201	OptIndexTrackExistence sets the trackExistence optional argument .
5202	NewIndex creates a new Index .
5203	Fields returns the fields of the Index .
5204	HasField returns true if the given field exists .
5205	Field returns the field with the given name .
5206	BatchQuery creates a new QueryBatchQuery .
5207	RawQuery creates a new PQL query .
5208	Intersect returns a new PQLRowQuery .
5209	Not returns a new PQLRowQuery .
5210	Count returns the number of rows .
5211	Options returns a new QueryBaseQuery .
5212	GroupBy returns a new PQL query .
5213	GroupByLimit returns a new PQL query .
5214	GroupByFilter creates a GroupByFilter .
5215	OptFieldTypeSet sets the field s value .
5216	OptFieldTypeInt sets the field s value .
5217	OptFieldTypeTime sets the field s value .
5218	OptFieldTypeMutex sets the field s value .
5219	Row returns a new PQL row .
5220	Set sets the row ID .
5221	SetTimestamp sets the timestamp .
5222	ClearRow removes a row from the field .
5223	RowTopN creates a new row .
5224	FilterAttrTopN is used to filter an attribute from a row .
5225	Store stores the given row ID .
5226	NotNull returns a new PQLRowQuery .
5227	Between returns a new PQLRowQuery .
5228	SetIntValue sets the int value for the field .
5229	NewPQLRowsQuery creates a new PQLRowsQuery .
5230	Rows returns a PQLRowsQuery .
5231	RowsLimit returns a new PQLRowsQuery .
5232	Result returns the result of the query .
5233	MarshalJSON implements the json . Marshaler interface for RowResult .
5234	NewURIFromHostPort creates a new URI .
5235	NewURIFromAddress creates a new URI .
5236	SetScheme sets the scheme of the URI .
5237	SetHost sets the host .
5238	Normalize returns a string representation of the URI .
5239	Equals returns true if this URI is equal .
5240	ValidLabel returns true if the given label is valid .
5241	ValidKey returns true if the key is valid .
5242	NewClient creates a new Client .
5243	Query creates a QueryResponse .
5244	CreateIndex creates a new index .
5245	CreateField creates a new field .
5246	EnsureIndex adds an index to the client .
5247	EnsureField adds a field to the client .
5248	DeleteIndex deletes an index .
5249	DeleteField deletes a field .
5250	SyncSchema synchronizes the given schema .
5251	Schema returns a new Schema .
5252	ImportField imports a field from the client .
5253	ExportField returns a reader for the given field .
5254	Status returns the status of the client .
5255	httpRequest sends a request to the server .
5256	doRequest creates a http . Response with the given parameters .
5257	statusToNodeShardsForIndex returns a map of nodes for the given index .
5258	ExperimentalReplayImport implements the Client interface for ServerReplayImport .
5259	viewByTimeUnit returns the string representation of the given time .
5260	OptClientSocketTimeout specifies the timeout for a client .
5261	OptClientConnectTimeout sets the timeout for a client .
5262	OptClientPoolSizePerRoute sets the pool size per route .
5263	OptClientTotalPoolSize sets the total number of total pool size
5264	OptClientTLSConfig specifies the TLS configuration for the client .
5265	OptClientManualServerAddress is a functional option to set the default server .
5266	ExperimentalOptClientLogImports is a functional option for testing .
5267	OptQueryColumnAttrs sets the QueryColumnAttrs field s value .
5268	OptQueryShards sets the shards for the given shards .
5269	OptQueryExcludeAttrs specifies whether the query should be excluded .
5270	OptQueryExcludeColumns specifies whether the query should be excluded .
5271	OptImportThreadCount sets the number of threads to use .
5272	OptImportBatchSize specifies the number of batch size .
5273	OptImportStatusChannel sets the status of the import .
5274	OptImportClear allows you to specify a clear option .
5275	OptImportRoaring returns an Option that sets default values .
5276	OptImportSort is an option to set the sorting function .
5277	Read reads data from the reader .
5278	ColumnUnmarshalerWithTimestamp returns a RecordUnmarshaller for the given timestamp .
5279	NewIterator returns a new Iterator .
5280	NewColumnIterator creates a new Iterator .
5281	NewColumnIteratorWithTimestampFormat returns a new Iterator with the given timestamp format .
5282	NewValueIterator creates a new iterator .
5283	NextRecord returns the next record .
5284	FieldValueUnmarshaller returns a RecordUnmarshaller .
5285	MergeConfig merges two config values .
5286	stringFormat returns a string representation of a Config .
5287	valuesFromLine returns a slice of elements from the given line .
5288	widthsFromLines returns the width of the given line .
5289	Format returns a string representation of the line .
5290	Build is used to build a URL
5291	Build is used to build a new path
5292	braceIndices returns the indices of the given string .
5293	Extract extracts the result from the request .
5294	mergeValues merges two values into u2 .
5295	redirectPath redirects the given path to the URL .
5296	CompileRegexp returns a Regexp . Regexp
5297	MatchString returns true if the given string matches the given string .
5298	Values returns the url for the given string .
5299	Revert converts a regexp to a string
5300	RevertValid validates the given values .
5301	write writes a regular expression .
5302	NewMulti creates a new Cmp .
5303	New returns a new Cmp instance
5304	CompareFile compares two files .
5305	readPartial reads and returns the number of bytes read .
5306	postEOFheck checks if the given buffer is less than bytes .
5307	Stats returns a list of stats
5308	Info returns information about the SSH proxy
5309	RunCommand executes a command .
5310	IsExist checks if the given error is Exist
5311	return true if the file exists
5312	Contain returns true if the given file contains a given file .
5313	ContainString returns true if the given filename contains a string .
5314	init initializes the environment .
5315	StartLogger starts the logger .
5316	openDBFile opens a database file .
5317	backup is used to backup files
5318	New returns a Packager .
5319	RegisterCrypt registers a function with the given function .
5320	New returns a new Crypter .
5321	NewFromHash returns a new Crypter .
5322	Text implements the Scanner interface .
5323	Exec runs the command .
5324	ExecSudo runs the command with the given arguments .
5325	nextUID returns the next user in the database .
5326	nextGUID returns the next gid file .
5327	NextSystemUID returns the UID of the system .
5328	NextSystemGID returns the next system id .
5329	NextUID returns the next ID .
5330	NextGUID returns the next gid .
5331	NewShadow returns a new Shadow instance
5332	parseShadow parses a shadow back into a shadow .
5333	LookupShadow looks up a shadow by name
5334	Add adds a shadow to the shadow .
5335	Copy copies source to dest .
5336	Create creates a new file
5337	loadConfig loads the config .
5338	NewEdit returns a new edit .
5339	AppendString appends a string to the edit .
5340	Comment adds a comment to the editor .
5341	CommentOut adds a comment to the editor .
5342	CommentM writes a comment to the file .
5343	CommentOutM writes a comment to the given file .
5344	ReplaceN replaces n runes with the given filename .
5345	ReplaceAtLine replaces an existing replacer with the given filename .
5346	ReplaceAtLineN replaces an existing line at the given filename .
5347	init initializes the settings .
5348	getSettingsForUid returns the settings for the given user .
5349	Sets the contents of a file
5350	Sets the contents of the given file .
5351	Set sets the value of the key
5352	MSet is used to set the keyset .
5353	SetForUid sets the UID for the given user
5354	MSetForUid sets the UID for the given UID .
5355	SetSys sets the value for the given key .
5356	MSetsysys syscall . Sets .
5357	SetysForUid sets the value for the given key .
5358	MSetsysysForUid returns an error if the given UID is set .
5359	NewGShadow creates a new GShadow
5360	parseGShadow parses a GShadow .
5361	lookupUp looks up the GShadow field for the given field .
5362	LookupGShadow looks up a GShadow by name .
5363	Add adds a GShadow to GShadow .
5364	NewUser creates a new user .
5365	NewSystemUser creates a new user .
5366	IsOfSystem returns true if the user is in the system .
5367	parseUser parses a user .
5368	lookupUp attempts to look up the user s value for a user .
5369	LookupUID looks up uid by uid
5370	LookupUser looks up a user by name
5371	GetUsername returns the username
5372	GetUsernameFromEnv gets the username from the environment
5373	AddUser adds a user to the user
5374	AddSystemUser adds a user to the system .
5375	Add adds a user to the user
5376	DelUser deletes a user
5377	ParseFile parses a file and returns a Config object .
5378	Print prints the config .
5379	Getbool returns the value of the given key .
5380	GetInt returns the value associated with key .
5381	Get uint value
5382	GetFloat returns the value of a key
5383	Set implements the Config interface .
5384	Run runs the command
5385	NewInfo returns a new info .
5386	OwnerHas returns true if the user has a permission .
5387	GroupHas returns true if the given permissions is a group .
5388	OthersHas returns true if the given perm is in the list
5389	OwnerHas returns true if the given name exists .
5390	lookupCrypter attempts to lookup the plaintext for a shadow .
5391	Passwd sets the user s password .
5392	Passwd adds a password to the GShadow .
5393	ChPasswd adds a password to the user
5394	ChGPasswd sets the password for the given group .
5395	LockUser locks the given user .
5396	NewGroup creates a new Group
5397	NewSystemGroup creates a new Group .
5398	IsOfSystem returns true if the group is a system .
5399	parseGroup parses a row into a group .
5400	lookupUp looks up the value for a given field .
5401	LookupGID looks up a group by its ID
5402	LookupGroup looks up group by name
5403	Getgroups returns a list of groups
5404	GetgroupsName returns the group name of the group
5405	AddGroup adds a group to a group
5406	AddSystemGroup adds a system group to the system .
5407	Add adds a new group to the group
5408	DelGroup deletes a group
5409	AddUsersToGroup adds a user to a group
5410	DelUsersInGroup deletes a group by name
5411	checkGroup checks if the given value is a group
5412	Detect returns the distro distribution .
5413	AddSystem adds a system to the world .
5414	AddSystemInterface adds an interface to the world .
5415	AddEntity adds an entity to the world
5416	Update updates the world .
5417	RemoveEntity removes the entity from the world .
5418	NewBasics returns a new instance of BaseEntity .
5419	AppendChild adds a new child entity to the entity .
5420	Less returns true if i is less than j .
5421	Swap swaps the identifier of the IdentifierSliceSliceSlice .
5422	NewGroup creates a new group
5423	Members returns all members of this group .
5424	Leave removes the member from the group .
5425	Add creates a new member
5426	Broadcast implements the Group interface .
5427	Send sends a message to the group .
5428	Send sends a message to the member .
5429	update updates the item with the given priority .
5430	NewBot creates a new bot .
5431	Uptime returns the current time
5432	handleIncomingMessages handles incoming messages .
5433	handleOutgoingMessages handles outgoing messages .
5434	WaitFor waits for a message to be sent .
5435	StandardRegistration sends a password to the bot .
5436	sendUserCommand sends a user command .
5437	SetNick sets the nick
5438	Run starts the bot .
5439	ChMode sets the mode of the channel .
5440	Close closes the bot .
5441	AddTrigger adds a handler to the bot .
5442	Handle returns true if the given message matches the given message .
5443	StartUnixListener starts a Unix listener
5444	redackSession is used to authenticate a session .
5445	End returns true if this call is stopped
5446	EndedUnsuccessful returns true if the call was canceled .
5447	Cancel cancels a request .
5448	Hookup is part of the CallService interface .
5449	Redirect sends a request to the client .
5450	Create creates a new call .
5451	MakeCall creates a new call .
5452	GetCallsInRange returns a CallIterator for the given range .
5453	GetNextCallsInRange returns the next call to next call .
5454	GetRecordings returns a list of records for the given call .
5455	GetRecordingsIterator returns the RecordingsIterator for the given call .
5456	Get returns a voice price .
5457	Get takes a number of VoicePrice and returns it .
5458	GetPage returns the NextPricePage instance
5459	Get returns the details of the PromotionPrice .
5460	GetPage returns the page for the given page .
5461	Delete deletes a key
5462	GetAlertsInRange returns a list of alerts in the specified range .
5463	GetNextAlertsInRange returns an alert page for a given range .
5464	Description returns the description of the alert .
5465	StatusCode returns the status of the alert .
5466	Friendly returns the human - readable representation of the direction .
5467	SendMessage creates a new message
5468	GetPage returns the page of the page .
5469	GetMessagesInRange returns all messages in a given range .
5470	GetNextMessagesInRange returns the next message in the given range .
5471	Get retrieves a queue by ID .
5472	Create creates a new queue
5473	Delete deletes the specified id .
5474	GetConferencesInRange returns a ConferenceIterator for a given range .
5475	GetNextConferencesInRange returns a new ConferencePageIterator .
5476	NewPhoneNumber creates a new PhoneNumber
5477	Friendly returns the string representation of the phone number .
5478	NewTwilioTime returns a new TwilioTime
5479	price returns a string representation of the given unit .
5480	capitalize converts a string to a human - readable string .
5481	Delete deletes a call .
5482	NewPricingClient returns a new Client instance
5483	NewClient creates a new client
5484	CreateResource creates a new resource
5485	MakeRequest creates a new HTTP request
5486	Delete deletes an application .
5487	URL returns the name of the recording .
5488	Delete deletes the recording .
5489	Get retrieves a message by ID .
5490	Buy a phone number
5491	Get retrieves a single phone number by its ID .
5492	Release releases the specified number .
5493	GetPage returns the page for the given page .
5494	Get retrieves a subscription by ID .
5495	Delete deletes a transcription .
5496	Get returns the details of the country .
5497	GetPage returns the page of the country .
5498	Next implements PageIterator .
5499	NewNextPageIterator creates a new page iterator .
5500	containsResultsInRange returns true if the end of the range is in the range .
5501	exesOutsideRange returns a slice of indexes in the range .
5502	NewDefaultLogger creates a new default logger .
5503	initLoggerBySize initializes logger .
5504	initLoggerByDaily initializes the logger .
5505	fileMonitor starts the file monitor .
5506	fileCheck checks if the file is valid
5507	Close closes the file .
5508	logWriter implements the Logger interface .
5509	Printf logs a formatted message
5510	Print implements the Logger interface .
5511	Println prints a log message
5512	SetMaxFileCount sets the maximum number of files .
5513	SetMaxFileSize sets the maximum size of the file .
5514	fileSize returns the size of file .
5515	GetProfile retrieves a profile by ID .
5516	Handler handles the request .
5517	DeleteGetStartedButton deletes all active buttons
5518	NewWebURLButton creates a new ButtonButton
5519	NewPostbackButton creates a new Button
5520	NewPhoneNumberButton creates a ButtonButton
5521	string_concat concatenates two strings .
5522	commonKind returns the common representation of v1 .
5523	pushNumberValue pushes a value to the stack .
5524	unsizedKind returns the kind of the given value .
5525	LuaToString returns the string representation of lua .
5526	mark marks the given value .
5527	push pushes the value to the stack .
5528	copySliceToTable copies the given value into a struct .
5529	GoToLua calls Go to go through the Lua state .
5530	NewLuaObject creates a new LuaObject .
5531	NewLuaObjectFromName creates a new LuaObject from Lua .
5532	NewLuaObjectFromValue creates a new LuaObject from Lua .
5533	Close closes the Lua object .
5534	Get retrieves the value from the object .
5535	GetObject returns a pointer to a LuaObject .
5536	Push populates the LUA object
5537	Set the value of a struct .
5538	Iter returns a new LuaTableIter .
5539	NewClient creates a new client
5540	NewClientWithServerInfo creates a new client with the given credentials .
5541	Status sets the status of the client .
5542	Join a room
5543	Part is part of the Client interface .
5544	Say sends a message to room
5545	PrivSay implements Client .
5546	KeepAlive ensures that the client is alive
5547	RequestRooms is part of the Client interface .
5548	RequestUsers sends a request to the client
5549	Copy copies src into dst .
5550	ToTable converts a string into a tabular data .
5551	NumRows returns the number of rows .
5552	LongestLine returns the longest line of the Scenario .
5553	LongestLine returns the longest line of the feature .
5554	BuildAndRunDirWithGoTags builds and builds a buildAndBuildTags from the given directory .
5555	assembleImportPath returns the absolute path of the given file .
5556	Sum returns the digest of the digest .
5557	Decode decodes a Reader from a Reader .
5558	retryPutPart attempts to retry an error if it fails .
5559	putPart uploads the object to the object .
5560	Abort deletes all multipart objects .
5561	WaitInstanceUntilReady waits for the given instance to be ready to be ready to be ready to be used .
5562	FindPerformancePrice finds the price for the given price .
5563	FindPerformanceSpacePrice returns the price for a given volume .
5564	FindPerformanceIOPSPrice returns the price for the given capacity .
5565	WithTimeout adds the timeout to the get vmsByStates params
5566	WithContext adds the context to the get vmsByStates params
5567	WithStates adds the states to the get vmsByStates params
5568	WithPayload adds the payload to the update vm .
5569	WithTimeout adds the timeout to the orderByFilter params
5570	WithContext adds the context to the OrderByFilter params
5571	WithBody adds the body to the order by body params
5572	Delete a instance
5573	Fetch is part of the Registry interface .
5574	Update updates the agent settings
5575	NewHTTPClient returns a new SoftLayerVMPool
5576	New creates a new SoftLayerVMPool instance
5577	SetTransport sets the transport
5578	Validate validates this Vms response
5579	WithTimeout adds the timeout to the get vmsByDeployment params
5580	WithContext adds the context to the get vmsByDeployment params
5581	WithDeployment adds the deployment to the get vmsByDeployment params
5582	WithTimeout adds the timeout to the update vMPar params
5583	WithContext adds the context to the update vMPar params
5584	WithBody adds the body to the update vMPar params
5585	NewAgentSettings creates a new agent settings
5586	ConfigureNetworks sets the NetworkSettings field s value .
5587	DetachPersistentDisk removes the persistent disk with the specified identifier .
5588	Validate validates this ClientTLSOptions object
5589	WithTimeout adds the timeout to the find vmsByFilters params
5590	WithContext adds the context to the get vmsByFilters params
5591	WithBody adds the body to the find vms filter params
5592	WithTimeout adds the timeout to the delete vMPar params
5593	WithContext adds the context to the delete vMPar params
5594	WithCid adds the cid to the delete vMPar params
5595	WithPayload adds the payload to the add vm o k response
5596	Validate validates this state
5597	WithTimeout adds the timeout to the update vm .
5598	WithContext adds the context to the update vm .
5599	WithBody adds the body to the update vm state params
5600	WithCid adds the cid to the update vm .
5601	WithTimeout adds the timeout to the add vMPar params
5602	WithContext adds the context to the add vMPar params
5603	WithBody adds the body to the add vMPar params
5604	Validate validates this AgentOptions
5605	WithTimeout adds the timeout to the list vMPar params
5606	WithContext adds the context to the list VMPar params
5607	Validate validates this error
5608	WithPayload adds the payload to the OrderByFilter o k response
5609	Validate validates this error type
5610	WithTimeout adds the timeout to the get vmByCid params
5611	WithContext adds the context to the get vmByCid params
5612	WithCid adds the cid to the get VMByCid params
5613	Validate validates this VM response
5614	LoadCodec returns a new codec .
5615	MustLoadCodec returns a new WordCodec .
5616	loadBank loads a wordlist from the given bank .
5617	bytelenFromWords returns the length of the length of the word .
5618	GetIndex returns the index of the word .
5619	Sum returns the sum of bz .
5620	Equals returns true if the given privKey is equal .
5621	Generate generates a new private key .
5622	Set adds a key to the map .
5623	NewPrivKeyLedgerSec2Key1 creates a new PrivKeyLedger .
5624	ValidateKey implements the PrivKey interface .
5625	Sign signs the given message .
5626	getPubKey returns the public key associated with the key .
5627	Equals returns true if this PrivKeySegment is equal .
5628	SimpleHashFromHashers returns the hash of the given items .
5629	Verify verifies the hash of the proof .
5630	computeHashFromAunts computes the hash of the given index .
5631	ComputePrivateKey computes the private key for the given path .
5632	ComputeBTCAddressForPrivKey returns the address for the given privKey .
5633	SignBTCMessage signs a message with the given private key .
5634	ComputeMastersFromSeed computes the Masters from the given seed .
5635	ComputeWIF computes the WIF .
5636	DerivePublicKeyForPath returns the public key for the given path .
5637	DerivePrivateKey extracts a private key from a private key .
5638	DerivePublicKey extracts the public key from the given public key .
5639	addPoints adds a point to the point .
5640	addScalars adds a scalar to a slice .
5641	HexDecode decodes hex encoded string
5642	I64 computes the I64 hash of the given key .
5643	BTCAddrFromPubKeyBytes returns the address of the given pubkey bytes .
5644	BTCAddrBytesFromPubKeyBytes returns the hash of the given pubkey bytes .
5645	WIFFromPrivKeyBytes creates a WIFKeyBytes from a byte slice .
5646	PubKeyBytesFromPrivKeyBytes returns the serialized public key bytes .
5647	ReverseBytes reverses a slice of bytes .
5648	getLedger returns the Ledger for the given device .
5649	CreateLedger creates a new Ledger .
5650	CreateOffline implements the KeybaseKeybase interface .
5651	Recover implements the KeybaseService interface .
5652	List returns all info in the database .
5653	Get retrieves the info from the database .
5654	Sign implements the KeybaseKeybase interface .
5655	ExportPubKey returns the public key for the given name .
5656	ImportPubKey imports a public key from the database .
5657	Update implements the KeybaseKeybase interface .
5658	randBytes returns the random bytes of the given number .
5659	GenerateFromPassword generates a new hash from a salt .
5660	CompareHashAndPassword compares the given password and password .
5661	Cost returns the cost of the given hash .
5662	decodeCost decodes the cost of the given input .
5663	ASTToString returns a string representation of a AST .
5664	writeByte writes a byte to the buffer .
5665	writeString writes a string to the buffer .
5666	print prints the given AST .
5667	printInner prints out all the fields of the type .
5668	printBase prints the base .
5669	printDimension prints the dimensions of the array .
5670	printArgs prints the arguments .
5671	parenthesize parses the AST AST .
5672	printInner prints the inner state of the output .
5673	printOneInner prints a list of inner methods .
5674	isEmpty returns true if the AST is empty .
5675	Filter returns the name of the filter
5676	ToString returns a string representation of an AST .
5677	ToAST returns the AST of the given name .
5678	doDemangle parses the given name and options .
5679	copy returns a copy of the state .
5680	fail panics on error .
5681	failEarlier attempts to fail if the given decoder fails .
5682	adv advances the current state .
5683	checkChar checks if a character is valid .
5684	Error implements the error interface .
5685	adjustErr adjusts the error of the given error .
5686	hasReturnType returns true if the AST is a type .
5687	isCDtorConversion returns true if the AST is a CDtorConversion .
5688	javaResource returns the string representation of the resource .
5689	mergeQualifiers merges two Qualifiers .
5690	setTemplate adds a template to the state .
5691	clearTemplateArgs clears the arguments .
5692	exprList returns a list of expressions .
5693	cloneSuffix returns a clone of the given AST .
5694	simplicate returns the AST of the AST .
5695	findArgumentPack returns the ArgumentPack for the given AST .
5696	doDemangle applies the given name to the given name .
5697	options returns a slice of options .
5698	MultipartForm creates a new multipart form .
5699	Json creates a new http . Handler for the request .
5700	validateStruct validates a struct .
5701	ErrorHandler writes an error to the response .
5702	Get returns the value associated with the given locale .
5703	SetMessage implements the SetMessage interface .
5704	Idle implements the Client interface .
5705	IdleWithFallback implements the Client interface .
5706	putToBottom adds the given address to the Sentinel .
5707	defaultPool returns a new Redis pool .
5708	close closes the Sentinel .
5709	MasterAddr returns the master address
5710	SlaveAddrs returns the list of slave addresses .
5711	Addr returns the address of the slave .
5712	Available returns true if the slave is available .
5713	Slaves returns a slice of slaves
5714	LinelAddrs returns the list of Sentinel addresses for Sentinel .
5715	Close closes the Sentinel .
5716	NewServerList creates a new ServerList
5717	NewFromServers returns a new Client instance
5718	Close closes the connection .
5719	Get retrieves a item from the client
5720	GetMulti gets a list of items from the server .
5721	Set sets the item .
5722	Add adds an item to the client .
5723	CompareAndSwap implements the Client interface .
5724	Delete deletes a key
5725	Increment increments the given value .
5726	Flush flushes the server .
5727	ChildClosing returns a channel that is closed .
5728	OnClosingContext returns a new context .
5729	OnClosedContext implements gop . Process . Context .
5730	LimitChan returns a channel that can be sent to the channel .
5731	WithParent creates a new process with the given parent .
5732	WithContextAndTeard returns a ProcessAndTeard with the given context .
5733	SetTeardown sets teardownFunc
5734	doClose closes the process .
5735	CloseAfterChildren closes all children of the process .
5736	Ticker creates a new ticker
5737	TickerGo starts a goroutine that runs the given ticker .
5738	Identify creates a CustomerIO object
5739	Track tracks the event
5740	TrackAnonymous tracks an anonymous event
5741	Delete deletes a customer
5742	AddDevice adds a device
5743	DeleteDevice deletes a device
5744	initLocales creates a new language based on the provided options .
5745	I18n returns a middleware handler for the given options .
5746	FetchCheck fetches a check for a given CID .
5747	FetchChecks returns a list of checks for a given configuration .
5748	New creates a new API instance .
5749	Get is part of the API .
5750	Post is part of the API .
5751	apiRequest sends a request to the API .
5752	FetchGraph fetches a graph from the given CID .
5753	FetchGraphs returns a list of graphs .
5754	UpdateGraph updates the graph
5755	CreateGraph creates a new graph
5756	DeleteGraph deletes a graph .
5757	DeleteGraphByCID deletes the given CID .
5758	FetchCheckBundle retrieves a check bundle from the given CID .
5759	FetchCheckBundles returns a list of checkBundles
5760	UpdateCheckBundle updates a checkBundle
5761	DeleteCheckBundle deletes a CheckBundle .
5762	DeleteCheckBundleByCID deletes a check bundle .
5763	Gauge adds a metric to the metric .
5764	SetGauge sets the gauge
5765	AddGauge adds a gauge to the metric .
5766	RemoveGauge removes a gauge from the metric .
5767	RemoveGaugeFunc removes metrics from the metric metrics .
5768	get the metric type
5769	FetchCheckBundleMetrics fetches a CheckBundleMetrics from the given CID .
5770	UpdateCheckBundleMetrics updates a checkBundleMetrics .
5771	getBroker returns an instance of the broker
5772	getBrokerCN gets the CN from the broker .
5773	selectBroker returns a list of brokers that match the given broker .
5774	kerkerSupportsCheckType returns true if the given check type is supported
5775	FetchMetricCluster fetches metrics from the given CID .
5776	FetchMetricClusters returns a list of MetricClusters
5777	UpdateMetricCluster updates a metric cluster
5778	CreateMetricCluster creates a new metric cluster
5779	DeleteMetricCluster deletes a metric cluster
5780	DeleteMetricClusterByCID deletes a metric from the cluster
5781	loadCACert loads the CAC cert pool
5782	fetchCert fetches the certificate from the CA
5783	FetchAccounts returns a list of account accounts .
5784	UpdateAccount updates an account .
5785	FetchAnnotation fetches an annotation from the configuration .
5786	FetchAnnotations retrieves all annotations from the API .
5787	UpdateAnnotation updates an annotation
5788	CreateAnnotation creates a new annotation
5789	DeleteAnnotation deletes an annotation
5790	DeleteAnnotationByCID deletes an annotation .
5791	FetchOutlierReport fetches the outlier report from the given CID .
5792	FetchOutlierReports returns a list of OutlierReports
5793	UpdateOutlierReport updates the outlier report
5794	CreateOutlierReport creates a new OutlierReport .
5795	DeleteOutlierReport deletes out the outlier report
5796	DeleteOutlierReportByCID deletes out the given CID .
5797	FetchUsers returns a list of users
5798	UpdateUser updates a user
5799	SetMetricTags sets the metrics for the given metric .
5800	AddMetricTags adds a metric tags to the metric .
5801	FetchMetric fetches a metric from the given CID .
5802	FetchMetrics fetches metrics from the API .
5803	UpdateMetric updates metrics
5804	FetchAcknowledgement retrieves a Ackgement from an ACID .
5805	FetchAcknowledgements returns a list of all acknowledgements
5806	UpdateAcknowledgement updates an acknowledgement .
5807	CreateAcknowledgement creates a new acknowledgement
5808	Reset reset metrics
5809	snapshot is used to snapshot the metrics
5810	Timing implements Counter .
5811	RecordValue records a metric value
5812	RecordCountForValue implements Counter .
5813	SetHistogramValue sets the histogram value .
5814	RemoveHistogram removes the histogram
5815	NewHistogram returns a Histogram .
5816	RecordValue implements the Histogram interface .
5817	checkBundleSearch returns a CheckBundle with the given criteria .
5818	createNewCheck creates a new CheckBundle
5819	makeSecret returns a random secret
5820	fetchCheckBySubmissionURL fetches a check for a given submission .
5821	Initialize initializes the trap manager .
5822	IsReady returns true if the check manager is ready .
5823	Get submission URL
5824	ResetTrap resets the pool .
5825	RefreshTrap refreshes the ticker .
5826	FetchRuleSetGroup retrieves a set of rule sets .
5827	FetchRuleSetGroups retrieves a list of RulesSetGroups
5828	UpdateRuleSetGroup updates an existing rule set .
5829	CreateRuleSetGroup creates a new RuleSet
5830	DeleteRuleSetGroup deletes a rule set .
5831	DeleteRuleSetGroupByCID deletes rule by given CID .
5832	FetchDashboard fetches a dashboard .
5833	FetchDashboards returns a list of dashboards .
5834	UpdateDashboard updates a dashboard .
5835	CreateDashboard creates a dashboard
5836	DeleteDashboard deletes a dashboard
5837	DeleteDashboardByCID deletes a dashboard .
5838	SetText sets the text value
5839	SetTextValue sets the text value
5840	RemoveText removes a text from the metric .
5841	RemoveTextFunc removes text from the metric metrics .
5842	FetchAlert fetches an alert from the given CID .
5843	FetchAlerts returns a list of alerts
5844	FetchRuleSet fetches a RuleSet from the given CID .
5845	FetchRuleSets retrieves the list of rules from the API .
5846	UpdateRuleSet updates a rule set .
5847	CreateRuleSet creates a new RuleSet
5848	DeleteRuleSet deletes a rule set
5849	DeleteRuleSetByCID deletes rule set by given CID .
5850	IncrementByValue adds a value to the metric .
5851	Set sets the counter for the given metric .
5852	RemoveCounter removes a counter .
5853	RemoveCounterFunc removes the counter function from the counter .
5854	PromptOutput returns a copy of the metrics .
5855	Flush sends metrics to the collector .
5856	FetchWorksheet fetches the given CID .
5857	FetchWorksheets returns a list of worksheet names .
5858	UpdateWorksheet updates a workheet .
5859	CreateWorksheet creates a new Worksheet
5860	DeleteWorksheet deletes the given workspace .
5861	DeleteWorksheetByCID deletes the given CID .
5862	FetchContactGroup fetches a contact group by its ID .
5863	FetchContactGroups returns a list of contact groups
5864	UpdateContactGroup updates a contact group
5865	CreateContactGroup creates a contact group
5866	DeleteContactGroup deletes a contact group
5867	FetchBroker fetches a Broker by its ID .
5868	FetchBrokers returns a list of brokers
5869	ActivateMetric activates the specified metric .
5870	AddMetricTags adds a set of tags to the check manager
5871	addNewMetrics adds new metrics to the check manager .
5872	inventoryMetrics returns a list of available metrics .
5873	countNewTags returns a count of new tags
5874	Pluralize returns the plural form of the ruleset .
5875	Singularize returns the name of the given word .
5876	Capitalize returns the name of the ruleset .
5877	Camelize returns the name of the ruleset .
5878	getSuitableAlgFromCurve returns an Algorithm based on the curve .
5879	getAlgFromKeyData extracts the key from the given pem .
5880	buildEncArgs encodes the arguments into a JSON string .
5881	doDec decodes a signed token .
5882	doEnc encodes a JWT .
5883	Transport configures the GServiceAccount .
5884	Proxy configures the GServiceAccount .
5885	Expiration sets the expiration time .
5886	Encode encodes an object into a byte slice .
5887	PeekHeaderField reads the next header from buf .
5888	PeekAlgorithm reads an algorithm from buf .
5889	PeekAlgorithmAndIssuer retrieves an AlgorithmAndIssuer from buf .
5890	NewEllipticSigner creates a new elliptic signer .
5891	NewTokenSource creates a new token source
5892	Client returns an http . Client that can be used to authenticate .
5893	Sign implements the RSA method .
5894	Verify verifies the signature of the signature .
5895	NewRSASigner returns a new Signer .
5896	getFieldWithTag returns the field with the given tag .
5897	decodeToObjOrTagWithTagWithTag decodes the given object into a json object .
5898	grabenEncodeTargets returns an array of EncodeTargets .
5899	encodeTargets encodes an object into a byte slice .
5900	peekField reads a token from buf .
5901	ExpiresIn sets the expiration time .
5902	Claim adds a claim to the token .
5903	Transport is an option to set the default transport
5904	NewHMACSigner creates a new HMACSigner .
5905	FromJSON returns a new GServiceAccount instance
5906	FromReader creates a GServiceAccount from an io . Reader
5907	FromFile creates a GService from the given path .
5908	Signer returns the signer for the GSE account .
5909	Encode encodes the given object .
5910	UnmarshalText unmarshals bytes from buf .
5911	DecodeUnverifiedToken decodes an Unverified Token from a byte slice .
5912	PublicKey returns the public key for the keystore .
5913	PrivateKey returns the private key .
5914	RegisterLocation registers a location for the given location .
5915	NewArena returns a new Arena instance
5916	NewSkiplist returns a new skipset .
5917	Init initializes the Iterator .
5918	Value returns the value of the iterator .
5919	Set implements the Iterator interface .
5920	SetMeta sets the meta for the iterator .
5921	Delete deletes the iterator .
5922	isSameArray returns true if two slices are equal .
5923	New creates a new client
5924	WriteIndentedN writes n to w .
5925	WriteIndentedNented writes b to w .
5926	NewReporter creates a new Reporter .
5927	PostCount returns the post count for the given user .
5928	PostCountTime is a helper for PostCount
5929	PostValue writes a value to the stat .
5930	PostValueTime writes a timestamp to the given user .
5931	PostEZCount writes an EZ count for the given stat key .
5932	PostEZCountTime writes an EZCount time .
5933	PostEZValue writes an EZ value to the given stat .
5934	PostEZValueTime writes an EZ value to the given time .
5935	PostCount adds a new stat to the reporter .
5936	PostCountTime adds a timestamp to the reporter .
5937	PostCountOne implements the Reporter interface .
5938	PostValue adds a new stat value to the reporter .
5939	PostValueTime adds a timestamp to the reporter .
5940	PostEZCountOne implements the Repository interface .
5941	PostEZCount adds an entry to the reporter .
5942	PostEZCountTime adds a timestamp to the reporter .
5943	PostEZValue adds an ez value to the reporter
5944	PostEZValueTime adds a timestamp to the reporter .
5945	NewBatchReporter creates a new BatchReporter .
5946	cleanHost clean up the host
5947	GetHost returns the current host .
5948	Rescan returns a scan for the host .
5949	Diff returns the diff of the host .
5950	ToString returns a string representation of the Host .
5951	Init initializes Scan .
5952	AddHosts adds a config to the scan .
5953	SetHosts sets the Hosts field s value .
5954	AddPorts adds ports to the scan .
5955	SetPorts sets the Ports field s value .
5956	SetTCPPorts sets the TCPPorts field s value .
5957	SetUDPPorts sets the ConfigUDPorts field s value .
5958	AddFlags adds flags to scan .
5959	IntenseAllTCPPorts returns a Scanner .
5960	ToString returns a string representation of a Scan .
5961	CreateNmapArgs creates a list of Nmap arguments
5962	uint16ListToStringList converts a slice of uint16 to a slice .
5963	ToString returns a string representation of the port .
5964	Counter returns the current counter .
5965	Increment increments the counter .
5966	NewHOTP creates a new HOTP .
5967	URL returns the URL for the given label .
5968	QR returns the QR code for the given label .
5969	truncate truncates a byte slice .
5970	FromURL creates a new HOTP from the given URL .
5971	GenerateHOTP generates a new HOTP with random digits .
5972	YubiKey returns the key for the given input .
5973	IntegrityCheck returns the number of checksum .
5974	Check checks if the given code is valid .
5975	Marshal serializes the HOTP packet .
5976	Unmarshal unmarshals a HOTP packet .
5977	NewWriterPool creates a new WriterPool .
5978	Get implements io . Writer .
5979	Len returns the number of bytes in the pool .
5980	NewReaderPool creates a new ReaderPool .
5981	Get implements io . Reader .
5982	SetRate sets the rate of the pool .
5983	Len returns the number of bytes in the pool .
5984	NewMeasuredWriter returns a new MeasuredWriter .
5985	BytesPerSec returns the number of bytes per second .
5986	NewMeasuredReader returns a new MeasuredReader .
5987	BytesPer returns the number of bytes period .
5988	BytesPerSec returns the number of bytes per second .
5989	ThrottledReader creates a ThrottlerReader from the given io . Reader .
5990	ThrottledWriter returns a ThrottlerWriter that wraps the given io . Writer .
5991	NewDNSServer returns a new DNSServer .
5992	qualifiedSrv returns the name of the DNS service .
5993	lookupSrvHosts returns a list of SRV records for the DNS server .
5994	GetA returns the A record associated with the given name .
5995	SetA sets the IP address
5996	DeleteA deletes a DNS record
5997	SetSRV sets the SRV record
5998	DeleteSRV deletes a SRV record
5999	Json converts JSON into a Typed struct
6000	Must converts a JSON string to a type .
6001	JsonReader returns a TypedReader from the given reader .
6002	JsonFile loads a json file from the given path .
6003	JsonArray converts a JSON array into a TypedArray .
6004	JsonFileArray returns a slice of JSON arrays
6005	Bool returns true if the given key is a bool .
6006	BoolOr returns true if the given key exists .
6007	BoolMust returns true if the given key exists .
6008	BoolIf returns true if the given key exists .
6009	IntOr returns the value of the given key .
6010	IntMust returns the int value if it exists .
6011	IntIf returns the value of the given key .
6012	FloatOr returns the float64 value as float64 .
6013	FloatMust returns the float64 value if it exists .
6014	FloatIf returns the float64 value as float64 .
6015	StringOr returns the string representation of the given key .
6016	StringMust returns the string value for the given key .
6017	TimeOr returns the time of the given key if it exists .
6018	TimeMust returns the time for the given key .
6019	TimeIf returns the time of the given key .
6020	ObjectMust returns an object with the given key .
6021	InterfaceOr implements the interface .
6022	InterfaceMust returns the interface for the given key .
6023	InterfaceIf returns true if the given key exists .
6024	Bools returns a slice of bool values
6025	BoolsOr returns a slice of bool or nil if not found
6026	Ints returns a slice of ints .
6027	Ints64 returns a slice of int64 values
6028	Flats returns a slice of float64 values
6029	Strings returns a slice of strings
6030	Objects returns a list of all objects in the given key .
6031	ObjectIf returns a list of objects that match the given key .
6032	GetSessions returns all sessions for the given channel .
6033	ObjectChange is part of the Handler interface .
6034	AutoOfferingPopUp returns a list of jobs for a given account .
6035	MarshalJSON implements json . Marshaler
6036	Scan is used to scan log messages .
6037	NewWorker creates a new worker .
6038	NewLoggerBase creates a new LoggerBase .
6039	Log logs a message .
6040	PreAccountAddBalanceApprove adds the given job to the worker .
6041	PreAccountAddBalance adds the given job to the database .
6042	AfterAccountAddBalance is part of the Worker interface .
6043	AfterAccountReturnBalance is part of the Worker interface .
6044	AccountUpdateBalances is part of the Worker interface .
6045	PreAccountReturnBalance implements the Worker interface for Worker .
6046	GetOfferingUsage returns the number of available offerings .
6047	GetProductUsage returns the number of available products .
6048	AddMapping adds a mapping to the map .
6049	DeleteMapping deletes a port mapping
6050	PostCheque sends a message to the given channel .
6051	NewHTTPClient creates a new http client
6052	NewServer creates a new server .
6053	AddHandler adds a handler to the server .
6054	ListenAndServe listens on the server .
6055	Recover is used to recover a service .
6056	ConnStr returns the string representation of a connection .
6057	NewDBFromConnStr creates a new reformaster .
6058	NewDB creates a new reformer .
6059	GetCountry returns the country of the given field .
6060	Endpoint returns the endpoint for the given key .
6061	NewServer creates a new server .
6062	NewMonitor creates a new Monitor .
6063	initLastProcessedBlock initializes the last processed block with the given role .
6064	Start starts the monitor .
6065	newClient creates a new client
6066	Loop starts a goroutine .
6067	Offering implements the Client interface .
6068	Endpoint implements the Client interface .
6069	Ping sends a ping to the server .
6070	GetEthTransactions returns the EthTransactions for the given transaction .
6071	AgentSeal is used to decrypt the given agent .
6072	ClientOpen opens a client for the given agent .
6073	PackWithSignature encodes a message using the given private key .
6074	UnpackSignature decodes a signature .
6075	VerifySignature verifies the signature of the given message .
6076	signature returns the signature of the given private key .
6077	GetObject retrieves an object from the database .
6078	GetObjectByHash gets the object by hash .
6079	ToError converts an error to an Error .
6080	SetPassword sets password
6081	UpdatePassword updates password
6082	GetToken returns the token for the given password .
6083	NewProcessor creates a new Processor .
6084	NewConfig returns a new Config .
6085	NewQueue creates a new queue
6086	AddWithDataAndDelay adds a job to the queue
6087	AddWithData adds a job to the queue
6088	AddSimple adds a simple job to the queue .
6089	AddWithDelay adds a job to the queue
6090	Subscribe sends a subscription to the queue
6091	Unsubscribe unsubscribes the given subscription .
6092	TopUpChannel implements the Handler interface for TopUpChannel .
6093	ChangeChannelStatus changes the status of a channel .
6094	GetAgentChannels returns a list of AgentChannels
6095	GetChannelsUsage implements the Handler interface for Handler .
6096	GetClientChannels returns a list of available clients .
6097	ReadSetting returns the setting for the given key .
6098	ReadUintSetting reads a uint value from the database .
6099	ReadBoolSetting reads the value from the database .
6100	SuspendChannel is part of the Processor interface .
6101	ActivateChannel activates a service
6102	TerminateChannel is part of the Processor interface .
6103	ExportPrivateKey export private key
6104	GetAccounts returns a list of account accounts .
6105	GenerateAccount generates a new account
6106	ImportAccountFromHex creates a new account from the given token .
6107	ImportAccountFromJSON imports an account from the given token
6108	TransferTokens adds a token to the handler .
6109	UpdateBalance updates an existing account .
6110	UpdateAccount updates an account .
6111	GetLastBlockNumber returns the last block number associated with the given token .
6112	GetEndpoint returns the endpoint for the given product .
6113	SetProductConfig updates the specified config .
6114	NewWriterLogger creates a new logger .
6115	NewFileLogger creates a new logger
6116	NewClient creates a new client
6117	Parse parses the given config .
6118	Map adds a mapping to the map
6119	AddMapping adds a mapping to the discovery .
6120	DeleteMapping deletes a mapping
6121	ReadFile reads a file from a file
6122	GetUserRole gets the user role
6123	NewHandler creates a new Handler .
6124	NewBackend creates a new backend
6125	addTimeout adds a timeout to the backend
6126	PendingNonceAt returns the pending nonce at the given account .
6127	SuggestGasPrice returns the amount of gas price in the backend .
6128	EstimateGas returns the gas estimate for the given call .
6129	CooperativeClose is part of the backend interface .
6130	GetTransactionByHash returns a transaction by hash .
6131	RegisterServiceOffering registers a service offering .
6132	PTCBalanceOf implements the backend interface for backend .
6133	PTCIncreaseApproval is part of the backend interface .
6134	PSCBalanceOf implements backend .
6135	PSCAddBalanceERC20 creates a transaction from the backend .
6136	PSCGetOfferingInfo implements the backend interface .
6137	PSCGetChannelInfo is part of the backend interface .
6138	EthBalanceAt implements the backend interface for backend .
6139	PSCSettle is part of the backend interface .
6140	PSCRemoveServiceOffering removes a service offering from the backend .
6141	PSCPopupServiceOffering is part of the backend interface .
6142	FilterLogs is part of the backend interface .
6143	HeaderByNumber returns the header for the given number .
6144	PTCAddress returns the current PTC address .
6145	PSCAddress returns the PSC address .
6146	NewHandler creates a new handler .
6147	keyFromChannelData returns the key from the given channel .
6148	AgentAfterChannelCreate creates a new agent after the given job .
6149	AgentAfterChannelTopUp is part of the Worker interface .
6150	AgentAfterUncooperativeCloseRequest is part of the Worker interface .
6151	AgentAfterUncooperativeClose is part of the Worker interface .
6152	AgentAfterCooperativeClose is part of the Worker interface .
6153	AgentPreServiceSuspend is part of the AgentService interface .
6154	AgentPreServiceUnsuspend is part of the AgentService interface .
6155	AgentPreServiceTerminate implements the AgentPreService interface .
6156	AgentAfterOfferingMsgPublish is part of the Worker interface .
6157	AgentAfterOfferingDelete deletes an existing job .
6158	AgentPreOffOfferingDelete deletes an existing agent .
6159	checkInPeriod checks if the given period is in the given period .
6160	AgentPreOfferingPopUp implements the Worker interface .
6161	AgentAfterOfferingPopUp implements the Worker interface .
6162	Print prints the given version .
6163	Error returns the string representation of the error .
6164	Message returns the string representation of a message .
6165	Respond to the server
6166	Respond to the server
6167	handlePay handles a request .
6168	getOpenBlockNumber returns the block number for the given job .
6169	Offering implements the Handler interface .
6170	HandlersMap returns a map of handlers for the worker .
6171	Version returns the version of the database .
6172	Migrate migrations
6173	NewMonitor creates a new Monitor .
6174	Run starts the monitor .
6175	VerifyBillingLags verifies that the account has been loaded .
6176	VerifySuspendedChannelsAndUnsuspends verifies that the given account is unuspended .
6177	VerifyChannelsForInactivity verifies that all channels have been consumed .
6178	VerifySuspendedChannelsAndTryVerify implements the Monitor interface .
6179	NewLogger creates a new logger .
6180	BalanceClosingHash returns the balance of the given block .
6181	Run starts a port
6182	RecoverPubKey attempts to recover a public key from the given transaction .
6183	GetTemplates returns a list of template templates
6184	CreateTemplate creates a new template
6185	CreateProduct creates a new product .
6186	UpdateProduct updates a product .
6187	GetProducts returns all available products .
6188	NewHandler creates a new Handler .
6189	EncryptedKey encrypts a private key using the given private key .
6190	ExecuteCommand executes the command
6191	AddMapping adds a mapping to the specified port .
6192	DeleteMapping deletes a port mapping
6193	NewMonitor creates a new Monitor .
6194	GetOfferingIncome returns the value of an offering .
6195	GetProductIncome returns the details of the given product .
6196	GetTotalIncome returns the total amount of total in the channel
6197	Up000011 migrates a migration .
6198	GetSettings returns the settings for the given token .
6199	UpdateSettings updates a set of settings
6200	IsIPv4 returns true if the given string is a valid IP address .
6201	IsHostname returns true if the given string is a hostname .
6202	IsNetPort returns true if the string is a valid network port
6203	IsTLSCert returns true if the given block contains a certificate .
6204	ValidateJSON validates a JSON object
6205	NewConfig returns a new Config instance
6206	ReadJSONFile reads data from a file
6207	WriteJSONFile writes a JSON file to a file .
6208	IsUUID returns true if the given string is a UUID .
6209	ExeDirJoin returns the path of the given directory .
6210	RootPath returns the path of the root directory .
6211	Caller returns a string representation of the file .
6212	CheckConnection checks if the given port is connected to the given port
6213	ClientAfterChannelCreate is part of the Worker interface .
6214	ClientEndpointCreate creates a new endpoint
6215	ClientAfterUncooperativeClose is part of the Worker interface .
6216	ClientAfterCooperativeClose is part of the Worker interface .
6217	ClientPreServiceTerminate is part of the Worker interface .
6218	ClientPreServiceSuspend is part of the Worker interface .
6219	ClientPreServiceUnsuspend is part of the Worker interface .
6220	ClientPrecooperativeClose is part of the Worker interface .
6221	ClientPreChannelTopUp implements the Worker interface .
6222	ClientAfterChannelTopUp is part of the Worker interface .
6223	ClientPrecooperativeCloseRequest is part of the Worker interface .
6224	ClientAfterUncooperativeCloseRequest is part of the Worker interface .
6225	ClientAfterOfferingMsgPublish is part of the Worker interface .
6226	ClientAfterOfferingPopUp implements the Worker interface .
6227	ClientAfterOfferingDelete is part of the Worker interface .
6228	DecrementCurrentSupply decrements the current job .
6229	GetEndpoints returns all endpoints for the given channel .
6230	GetGUISettings gets the GUISettings
6231	SetGUISettings sets the GUI settings
6232	HandleFunc registers a handler for the given pattern .
6233	RequireHTTPMethods is defined on the Server interface .
6234	RequireBasicAuth is a wrapper for RequireBasicAuth .
6235	New creates a new service .
6236	EndpointMessage implements Service .
6237	ConnChange is part of the Handler interface .
6238	FromBase64ToHex converts base64 string to base64 .
6239	HexToBytes converts hex string to hex string
6240	ToBytes converts a base64 string into a byte slice .
6241	ToHash returns the hash of the given base64 .
6242	HexToHash returns the hash of the given hex string .
6243	HexToAddress converts a hex string to an Ethereum address .
6244	BytesToUint32 converts b into a uint32 .
6245	Uint32ToBytes converts a uint32 to a byte slice .
6246	Uint64ToBytes converts a uint64 to a byte slice .
6247	Uint192ToBytes converts x to a uint64 .
6248	HashPassword returns the SHA256 hash of the given salt .
6249	ValidatePassword validates password
6250	GetUint64Setting gets uint64 value from database .
6251	ChannelKey returns the channel key for the given agent .
6252	MinDeposit returns the minimum value of the offer .
6253	AcceptOffering implements the Handler interface .
6254	ChangeOfferingStatus implements the Handler interface .
6255	GetClientOfferings returns a list of available clients .
6256	GetAgentOfferings returns the offerings for the given product .
6257	setOfferingHash implements the Handler interface for Handler .
6258	fillOffering is used to fill an existing offer .
6259	UpdateOffering updates an existing offer .
6260	CreateOffering creates and returns a new ID .
6261	GetClientOfferingsFilterParams returns a GetClientOfferFilterParams instance
6262	PingOfferings is used to ping a ping on the server
6263	NewServer creates a new server .
6264	Mux returns a new ServeMux .
6265	NewLogger creates a new Logger .
6266	Printf logs a formatted message
6267	GetURL returns the URL for the given path .
6268	NewHTTPRequest creates a new HTTP request .
6269	NewHTTPRequestWithURL creates a new http . Request .
6270	Send sends a request to the server .
6271	Check checks if the token is valid
6272	Make creates a new token
6273	GetLogs returns the Logs for the given token .
6274	AuthClient is used to authenticate a client
6275	StartSession starts a new session .
6276	UpdateSession updates a session .
6277	OfferingMessage creates a new instance of OfferingMessage
6278	ValidMsg validates the given schema .
6279	NewClient creates a new client
6280	PanicHunter panics on error
6281	ParseRequest parses the request and parses it into the server .
6282	Save saves the specified ipvs .
6283	NewClient creates a new client
6284	ParseRate parses the request and returns a RateLimit .
6285	SetOutputPath sets the output path
6286	UpdateConfig updates the global configuration .
6287	SetTracerPath sets the path to the given path
6288	SetOutputPath sets the output directory
6289	SetPipes sets the current pipe
6290	AppendOptionWithPrefix appends the given prefix to the list .
6291	MarshalRaw implements the Marshaller interface .
6292	MarshalString implements the Marshaller interface .
6293	MarshalBytes implements the Marshaller interface .
6294	MarshalBool implements the Marshaller interface .
6295	MarshalUint32 marshals a uint32 into a byte array .
6296	MarshalUint64 encodes a uint64 into a byte array .
6297	ElementSizeExceeded returns an error if the field exceeds the given size .
6298	nextSpecialChar returns the next character in bytes .
6299	nextSpecialChar returns the next character in bytes .
6300	NewDecoder returns a new decoder .
6301	Register registers the given constructor function .
6302	MustRegister registers a new constructor
6303	Create creates a new dependency
6304	cacheCreateFromType creates a new instance of the given type .
6305	NewDependencyInjector returns a new dependencyInjector
6306	NewServiceContainer returns a new ServiceContainer
6307	AssetUrl returns the asset URL for the given name .
6308	Prefix returns a new AssetPipeline .
6309	ServeHTTP implements the http . Handler interface .
6310	getResponse gets the response from the request .
6311	isValid returns true if the controller is valid .
6312	NewHandler creates a new ControllerHandler .
6313	Handler returns an http . HandlerFunc that sets g . HandlerFunc .
6314	SetRequest sets the request
6315	Session returns the current session .
6316	RenderView renders a template .
6317	RenderTemplate renders a template .
6318	RedirectRoute returns a new RedirectResponse
6319	UrlFor returns the URL for the given route name .
6320	CookieValue returns cookie value
6321	BodyData returns the body of the request .
6322	QueryValue returns the value for the given key .
6323	FormValueOrDefault returns the form of the form of the form
6324	UrlValue returns the URL value for the given key .
6325	Contains returns true if the string contains a substring .
6326	RemoveStringsFromString removes a string from a string slice .
6327	Map returns a slice of strings
6328	Equal returns true if two strings are equal .
6329	Uniq removes all items from the list
6330	NewCookieSigner creates a new CookieSigner .
6331	EncodeCookie encodes the cookie
6332	DecodeCookie decodes a cookie
6333	DecodeValue decodes a cookie .
6334	EncodeValue encodes a cookie .
6335	ServeHTTP implements the http . Handler interface .
6336	NewSprocketsServer creates a new SphereetsServer .
6337	normaliseKey normalizes a key
6338	StopAndLog stops the monitor
6339	MonitorFunc implements Monitor interface .
6340	MonitorReflectedFunc implements the Monitor interface .
6341	LogRequest sends a request to the request .
6342	CommonLogHandler creates a new http . Handler for common logging .
6343	ServeHTTP implements the http . Handler interface .
6344	UrlUsername returns the URL for this LogData .
6345	UrlFor returns the URL for the given route .
6346	AbsoluteUrlFor returns the absolute URL for the given name .
6347	Parse parses a JSON byte array and panics .
6348	LoadFromEnv loads an environment variable from the environment variable .
6349	RegexPath returns an http . Handler for the given regexp .
6350	CacheControl returns an http . Handler for the given request .
6351	transform converts a string into a map .
6352	DiscoverWalk walks the given app .
6353	DiscoverEndpoints returns a list of Endpoints for the given app .
6354	JSONFieldsFromStruct converts a struct into a slice of struct fields .
6355	StructFieldFromJSONName returns the name of a struct field .
6356	Enumerate returns an Enumerator .
6357	Release releases the message .
6358	Wrap wraps an error and returns a new error .
6359	causer returns a new error .
6360	From creates a context from the context .
6361	With adds a context to the context .
6362	Format formats a string to the context .
6363	NewWriter returns a new Writer .
6364	Levels returns a map of level levels .
6365	SetLevel sets the level of the writer .
6366	Suppress adds the given levels to the writer .
6367	IsSuppressed returns true if the writer is suppressed .
6368	Handle adds a handler to the writer .
6369	SetOutput sets the output writer
6370	Enumerate iterates over the directory
6371	All returns true if the predicate matches the predicate predicate .
6372	All returns true if the iterator contains a predicate .
6373	Any returns true if the iterator contains all elements .
6374	Anyp returns true if the predicate matches the predicate .
6375	AsEnumerable returns an array of Enumerable .
6376	First returns the first element of the given subject .
6377	Merge merges all elements in the collection .
6378	PallelSelector returns a new Iterator .
6379	ParallelSelect returns a new Iterator .
6380	Reverse reverses the iterator .
6381	Select returns a new Enumerable .
6382	Select creates a new Iterator .
6383	SelectMany creates a new Enumerable with the given subject .
6384	SelectMany will select all elements in the given list .
6385	Single iterates over all elements .
6386	Singlep returns a set of predicate predicates .
6387	Skip returns a new skips .
6388	splitN splits a channel into a slice of iterators .
6389	Take takes a subject and returns a new Enumerable .
6390	Take a number of elements in the iterator .
6391	TakeWhile takes a predicate and returns a new one or more than one .
6392	TakeUntil takes a slice of iterators and returns a new Iterator .
6393	Tee returns a copy of the iterator .
6394	ToSlice converts an array of Enumerator to a slice .
6395	Where adds a predicate to the predicate .
6396	Where returns a new Enumerator .
6397	ReleaseBuffer releases the buffer pool
6398	NewStack creates a new stack .
6399	Enumerate implements the Event interface .
6400	IsEmpty returns true if the stack is empty .
6401	Push adds an entry to the stack .
6402	Pop removes the stack from the stack .
6403	Peek returns the next item in the stack .
6404	Size returns the size of the stack .
6405	NewLinkedList returns a new LinkedList
6406	AddBack adds an entry to the list .
6407	Enumerate implements the Listener interface .
6408	Get returns the value associated with the given position .
6409	IsEmpty returns true if the list is empty .
6410	Length returns the length of the list .
6411	PeekBack returns the next item in the list .
6412	PeekFront returns the first element in the list .
6413	RemoveFront removes the first element from the list .
6414	RemoveBack implements the Link interface .
6415	Sort implements the sort . Interface .
6416	Sorta sorts the list of strings .
6417	Sorti implements the sort . Interface interface .
6418	String returns a string representation of the LinkList .
6419	Swap swaps the elements in the list .
6420	merge merges two lists .
6421	split splits the tree into the tree .
6422	Add adds an entry to the queue .
6423	Enumerate implements queue .
6424	IsEmpty returns true if the queue is empty .
6425	Length returns the length of the queue .
6426	Next returns the next item in the queue .
6427	Peek returns the next item in the queue .
6428	ToSlice returns a slice of values from the queue .
6429	EnableVirtualTerminalProcessing enables virtual terminal process
6430	unquote returns a copy of the given input .
6431	countScalars returns the number of elements in the slice .
6432	IsTerminal returns true if the writer is terminal .
6433	Add adds an entry to the list .
6434	AddAt adds an entry to the list .
6435	Enumerate implements Listener .
6436	Get returns the value associated with the given position .
6437	IsEmpty returns true if the list is empty .
6438	Length returns the number of items in the list .
6439	Remove removes an item from the list .
6440	Set implements the List interface .
6441	String returns a string representation of the list .
6442	Swap swaps the elements in the list .
6443	MarshalText implements the encoding . TextMarshaler interface .
6444	UnmarshalText implements json . Unmarshaler
6445	repl returns a string representation of the given time .
6446	Format returns a string representation of the format .
6447	logName returns the name of the log .
6448	Monotonic returns the monotonic time .
6449	set sets the severity of the severity .
6450	Set sets the severity value .
6451	set sets the value of the level .
6452	match returns true if the file matches the pattern .
6453	match returns true if the given path matches the given path .
6454	match returns true if the file matches the given line .
6455	NewLogger creates a new Logger .
6456	SetLogDir sets the log dir directory
6457	SetLogToStderr implements the Logger interface .
6458	SetAlsoLogToStderr implements the Logger interface .
6459	setVState sets the log level .
6460	getBuffer returns the buffer s buffer .
6461	putBuffer adds a buffer to the buffer .
6462	output writes the given line to the logger .
6463	timeoutFlush is used to close the logger .
6464	stack returns a slice of stack traces .
6465	exit logs an error .
6466	rotateFile rotates a new log file
6467	createFiles creates a new log file .
6468	flushDaemon is used to flush the daemon
6469	lockAndFlushAll locks all log entries in the log .
6470	flushAll is used to flush all log messages .
6471	Add implements Bundle .
6472	Join is part of the Bundle interface .
6473	NewBundle creates a new Bundle
6474	Expand expands tokens .
6475	CacheFunc returns an http . HandlerFunc for the given body .
6476	CacheFasthttp creates a new http . Handler for the request .
6477	CacheFasthttpFunc is a wrapper around CacheFunc
6478	ContentType returns the content of the response .
6479	ServeHTTP implements the http . Handler interface .
6480	New creates a new http server .
6481	AcquireResponseRecorder creates a new ResponseRecorder .
6482	ReleaseResponseRecorder releases the response .
6483	Claim returns true if the request is claimed
6484	Rule sets the rule .
6485	Reset resets the content of the entry .
6486	NoCache sets the default cache
6487	clientOAuth returns a clientOAuthAuthentication
6488	authenticate is used to authenticate a token
6489	apiKeyAuthentication creates a new apiKeyAuthentication .
6490	authenticate is used to authenticate a request
6491	serviceOAuth returns a service OAuthAuthentication
6492	authenticate is used to authenticate a request
6493	OAuthService creates an OAuth service .
6494	CreateAuthorizeUrl creates an authorization URL
6495	RefreshTokens refreshes the OAuth tokens
6496	NewTokens returns a new OAuth tokens
6497	NewTokensFromRequest returns a new OAuth tokens
6498	Request sends a request to the server .
6499	createRequest creates a new request
6500	executeRequest is part of the http . Request interface .
6501	simulateRequest returns the data for the given endpoint .
6502	ApiKeyClient returns a client with the given secret key .
6503	OAuthClient creates a new client for OAuth tokens
6504	Get calls Get method
6505	GetBalance returns the balance of the account .
6506	GetAllAddresses returns all addresses for the given params
6507	GenerateReceiveAddress generates a new address
6508	SendMoney creates a transaction .
6509	RequestMoney creates a transaction .
6510	ResendRequest is part of the Client interface .
6511	CancelRequest cancels a request .
6512	CompleteRequest is part of the Client interface .
6513	CreateButton creates a new button
6514	CreateOrderFromButtonCode creates a new order from a button .
6515	CreateUser creates a new user
6516	Buy creates a new transfer .
6517	GetContacts returns a list of contacts
6518	GetCurrencies returns a list of currencies
6519	GetExchangeRates returns the list of exchange rates .
6520	GetExchangeRate returns the exchange rate
6521	GetTransactions returns a list of transactions .
6522	GetOrders returns a list of orders
6523	GetTransfers returns a list of transfers
6524	GetBuyPrice returns the price for the given quantity .
6525	GetSellPrice returns the price for the given price .
6526	GetTransaction retrieves a transaction by ID
6527	GetOrder returns the order associated with the given id .
6528	GetUser returns the user s users .
6529	NewSerialDispatcher creates a new Dispatcher .
6530	AppendHandlers appends the handlers to the dispatcher .
6531	DispatchOptional implements SerialDispatch .
6532	NewParallelDispatcher creates a new Dispatcher .
6533	ReleaseMsg is part of the Conn interface .
6534	ReleaseBuffer releases the buffer
6535	Close closes the connection .
6536	Write is part of the Conn interface .
6537	Accept returns the TCP connection .
6538	AddDialer adds a Dialer to the Dialer .
6539	subDialerForAddr returns a Dialer for the given address .
6540	rawConnDial returns a connection to the given address .
6541	MultiaddrProtocolsMatch returns true if the two Multiaddrs match the provided Multiaddr .
6542	MultiaddrNetMatch returns a Multiaddr that matches the given protocols .
6543	get returns the value of the given key .
6544	getArray returns a slice of values
6545	Build params
6546	unsetGPGAgentInfo is used to unset GPG agent .
6547	AssumeSend sends a message to the agent .
6548	NewData returns a new Data object
6549	NewDataFile creates a new data file .
6550	NewDataBytes returns a new Data object
6551	NewDataReader returns a new DataReader
6552	NewDataWriter returns a new DataWriter .
6553	NewDataReadWriter creates a new DataReadWriter .
6554	NewDataReadWriteSeeker returns a new DataReadWriteSeeker
6555	Close closes the data .
6556	Name returns the name of the data file .
6557	NewCommand creates a new command
6558	Arg adds a new argument to the command .
6559	String returns a string representation of the command .
6560	Columns returns a list of column names .
6561	Get returns the value associated with the given column .
6562	GetBool returns the value of a float .
6563	GetInt returns the value at the given column .
6564	GetSlice returns a slice of values
6565	GetString returns a string representation of a record .
6566	GetTime returns the value of the given column .
6567	ChangeContactModattr returns a new instance of the given contact .
6568	ChangeContactModTRr changes the contact of a contact .
6569	ChangeContactModattr returns a new instance of the contact .
6570	ChangeCustomContactVar creates a new custom controller .
6571	ChangeCustomHostVar creates a new custom host variable
6572	ChangeCustomSvcVar creates a new instance of the command
6573	ChangeHostCheckTimeperiod creates a new instance of a hostcheck command
6574	ChangeHostModattr changes the given host name to the given value .
6575	ChangeSvcModattr creates a new instance of the command
6576	DelAllSvcComments deletes all Svc comments
6577	DisablePassiveSvcChecks disables the specified service .
6578	DisableServiceFlapDetection detaches a service .
6579	DisableSvcCheck disables a service .
6580	DisableSvcEventHandler disables the specified service .
6581	DisableSvcFlapDetection detaches the specified service .
6582	DisableSvcNotifications disables a service notification
6583	EnablePassiveSvcChecks returns a command to enable the service .
6584	EnableSvcCheck enables a service .
6585	EnableSvcEventHandler is used to enable service events
6586	EnableSvcFlapDetection returns a command to enable a service .
6587	EnableSvcNotifications enables service notification
6588	RemoveSvcAcknowledgement removes a service acknowledgment from a service .
6589	StartObsessingOverSvc starts an OBSESS command
6590	StopObsessingOverSvc stops the given hostname .
6591	NewQuery creates a new Query .
6592	Columns adds columns to the query .
6593	Filter adds a rule to the query .
6594	And adds n to the query .
6595	Negate returns a new query .
6596	WaitObject is part of the Query interface .
6597	WaitCondition adds a condition to the query .
6598	WaitConditionNegate adds a condition to the query .
6599	WaitTrigger adds a trigger to the query .
6600	WaitTimeout adds a timeout to the query .
6601	KeepAlive sets the current query .
6602	ReadTimeout sets the timeout for the query .
6603	String returns a string representation of the query .
6604	NewClient creates a new client
6605	NewClientWithDialer creates a new client with dialer .
6606	Exec executes a request .
6607	xtoi2 returns the number of bytes in s .
6608	Mask returns the mask of the address .
6609	New creates a new OuiDb .
6610	Lookup returns the address for the given address .
6611	 Vendor lookup
6612	Contains returns true if the address block contains the given address .
6613	ThttledReader returns an io . Reader that wraps the given io . Reader .
6614	NewThrottledBucket creates a new bucket .
6615	NewCmdWithRunner creates a new CmdWithRunner .
6616	MustNewCmdWithRunner creates a new CmdWithRunner .
6617	importBreakPaths returns a list of import path declarations .
6618	SelfProxyCmderSupplier returns a new Cmdderr with the given options .
6619	SupplierWithPrependedArgs returns a Cmdderr with the given arguments .
6620	SelfCmder returns the Cmdderr for the given executable .
6621	CmderWithPrependedArgs initializes Cmdderder with prepended arguments .
6622	NewSeeforRouter returns a new SeeforRouter instance
6623	ServeHTTP implements the http . Handler interface .
6624	Before adds middleware to the stack
6625	After adds middleware to the chain .
6626	UseTimer creates a new Timer .
6627	NewRouter creates a new Router
6628	ServeHTTP implements the http . Handler interface for Router .
6629	Group creates a GroupRouter .
6630	findChild returns the path of the route .
6631	insertChild inserts a new child node .
6632	Get returns the counter for the given name .
6633	ServeHTTP implements the http . Handler interface .
6634	main is the main middleware .
6635	NewGroupRouter creates a new GroupRouter .
6636	RouteMiddleware creates a middleware middleware .
6637	RouteHandlerFunc returns an http . HandlerFunc that wraps the http . HandlerFunc .
6638	RectFromSphere creates a Rectangle from a vector .
6639	CopyRect returns a copy of the rectangle .
6640	Size returns the size of the rectangle .
6641	Overlaps returns true if the Rectangle is overlap .
6642	String returns a string representation of the Rectangle .
6643	Dx returns the distance of the rectangle .
6644	D returns the height of the rectangle .
6645	In returns true if the Rectangle is in the Rectangle .
6646	Approx returns true if the given y are equal .
6647	ApproxEpsilon returns true if the given points are equal .
6648	SetXYZ sets z to z .
6649	Vector3Dist2DSqr returns the distance between two vectors .
6650	Copy returns a copy of the vector .
6651	Assign assigns the vector to the vector .
6652	Dist2D returns the distance between two vectors .
6653	Dist2DSqrr returns the distance between two vectors .
6654	Cross returns a deep copy of the vector .
6655	Dot2D returns the vector of two vectors .
6656	NewRay returns a new Ray .
6657	IntersectRect computes the intersection of the rectangle .
6658	SupportedFunc returns an error if the request is unsupported
6659	NewSigner returns a new Signer .
6660	NewVerifier creates a new Verifier .
6661	Request creates a request .
6662	Status returns the status of the given ID .
6663	Cancel the cancellation request
6664	Discover returns a Discovery response .
6665	NewClient creates a new client
6666	Push adds a value to the stack .
6667	Pop removes the value from the stack .
6668	PopLast returns the last element .
6669	Peek returns the value at the top level .
6670	PeekN returns the next item in the stack .
6671	Vecf32 returns a Vec representation of a vector .
6672	Veci returns the vector of the vector .
6673	Add adds v to the vector .
6674	Sub returns the difference between two vectors .
6675	In returns true if r is in r .
6676	Len returns the length of the vector .
6677	ApproxFuncEqual returns true if the two vectors are equal .
6678	Merge adds a new handler to the map .
6679	Respond status code
6680	NewServer creates a new Server .
6681	Callback sends a request to the client .
6682	ErrNotFound returns ErrNotFound error
6683	ErrUnsupportedRequestType returns an error if the request type is unsupported
6684	ErrUnsupportedIdentity returns an error for the given identity .
6685	ErrMissingRequiredField returns an error if the field is missing .
6686	ErrInvalidRequestSignature returns an error if the request is invalid .
6687	DatabaseServers returns all database servers .
6688	SnapshotDatabaseServer creates a new database snapshot
6689	ResetPasswordForDatabase creates a new database server .
6690	Servers returns a list of servers .
6691	Server returns a new server .
6692	DestroyServer deletes a server
6693	LockServer implements Client .
6694	UnlockServer unlocks the server
6695	SnapshotServer returns an image .
6696	FullConsoleUrl returns the full URL for the server .
6697	FirewallRule returns a firewall rule
6698	ServerGroups returns a list of servers .
6699	ServerGroup returns a server group by ID .
6700	AddServersToServerGroup adds servers to the server group
6701	MoveServersToServerGroup moves a server group to a server .
6702	LoadBalancers returns a list of load balancer
6703	LoadBalancer returns a load balancer .
6704	AddNodesToLoadBalancer creates a load balancer
6705	Remove listeners from load balancer
6706	LockResource locks a resource
6707	FirewallPolicies returns a list of firewall policies
6708	FirewallPolicy returns a firewall policy
6709	ApplyFirewallPolicy applies the specified policy .
6710	Extract is part of the GetAuthResult interface .
6711	APIClients returns a list of all API clients
6712	APIClient returns a new ApiClient .
6713	ResetSecretForApiClient creates a new API client .
6714	Images returns the list of images .
6715	Image returns a new image .
6716	Accounts returns a list of all accounts .
6717	Account returns the account for the specified identifier .
6718	CloudIPs returns a list of cloudips
6719	CloudIP returns a cloud IP .
6720	MapCloudIPtoServer maps a cloud IP to a cloud
6721	setAuthHeader sets the access token
6722	Auth retrieves the AuthResult from the client .
6723	Collaborations returns a list of collaborators
6724	Collaboration returns a collaboration .
6725	DatabaseSnapshots returns a list of database snapshots .
6726	DatabaseSnapshot returns the current database snapshot .
6727	Scan is used to scan a list of alive IPs
6728	ToFile converts a file to a file
6729	ToWriter converts a URL into a Writer .
6730	FromURL reads a file from the given io . Reader .
6731	ForPeriod returns the number of bytes for a given period .
6732	QRCodeData returns the URL for the given label .
6733	RandomSecret generates a random secret
6734	DefaultPeerConfig returns a default PeerConfig
6735	PubKey returns the public key for the peer .
6736	OnStart implements Peer .
6737	Send sends a message to the peer .
6738	WriteTo implements io . WriterTo interface .
6739	Equals returns true if the peer is equal .
6740	FuzzConnAfter returns a net . Conn with the given duration .
6741	NewMConnectionWithConfig creates a new MConnection .
6742	This will attempt to recover the MConnection .
6743	Send sends a message to the MConnection .
6744	TrySend implements the MConnection interface for MConnection .
6745	CanSend returns true if the channel has been sent .
6746	sendRoutine sends a goroutine to the server .
6747	sendSomeMsgPackets is used to send messages to the MConnection .
6748	sendMsgPacket sends a message to the channel .
6749	nextMsgPacket returns the next packet packet .
6750	writeMsgPacketTo implements io . WriterTo interface .
6751	recvMsgPacket reads a packet from the wire format .
6752	hash24 returns the hash of the given input .
6753	incrNonce increments a nonce .
6754	List returns a list of all peers
6755	listenRoutine listens on the listener .
6756	NewAddrBook creates a new AddrBook .
6757	OnStart implements the AddrBook interface .
6758	RemoveAddress removes an address from the store .
6759	loadFromFile loads the address from a file .
6760	Save saves the AddrBookBook .
6761	addToOldBucket adds a new address to the store .
6762	expireNew is used to purge a new address .
6763	DialSeeds attempts to dial the seeds of the given seeds .
6764	NewNetAddressStrings returns a slice of net . NetAddressStrings
6765	NewNetAddressIPPort creates a new net . NetAddress
6766	Equals returns true if all the fields are equal .
6767	Dial implements net . Conn . Dial .
6768	Valid returns true if the address is valid .
6769	RereachabilityTo implements the NetAddress interface .
6770	NewPEXReactor creates a new PEXReactor .
6771	OnStart implements the Reactor interface .
6772	Receive sends a message to the peer .
6773	RequestPEX sends a PEX request to the peer .
6774	SendAddrs sends an address to the peer .
6775	IncrementMsgCountForPeer implements the PeerReactor interface .
6776	DecodeMessage decodes a Pex message .
6777	NewReader creates a new reader .
6778	LogOnPanic logs an error .
6779	Wrap wraps the http . Handler interface .
6780	Start starts the logger .
6781	New creates a new service .
6782	Wrap returns an http . HandlerFunc that wraps the provided HTTPClientVerifier .
6783	GetString returns a string representation of a given key
6784	GetInt returns the int value for the given key .
6785	RegisterDriver registers a new driver
6786	Open creates a new hub .
6787	SendEvents sends events to the given channel .
6788	Unmarshal unmarshals data into JSON
6789	Publish sends a message to the hub .
6790	Subscribe creates a new channel
6791	getChannel returns a channel for the given name .
6792	remove removes a channel from the hub .
6793	Open creates a new hub .
6794	Publish publishes a message to the given channel .
6795	Subscribe subscribes to the given channels .
6796	MakeHub creates a new hub
6797	Func returns the duration of a Fibond .
6798	roundIndex returns a slice of int values .
6799	Dir returns the directory of the current user .
6800	Ask asks the user to ask the user .
6801	InteractionCount returns the number of interactions .
6802	TimeElapsed returns the duration of the session .
6803	History implements the Session interface .
6804	Bool returns the value of a flag .
6805	String returns a string representation of a flag .
6806	Fail will fail if t is successful .
6807	Fail returns true if t is failed
6808	Logf logs a formatted message
6809	Error implements the error interface .
6810	Errorf implements the error interface .
6811	Init initializes the API .
6812	Value returns the value of the client
6813	Child returns a new client .
6814	Push creates a new client
6815	Update updates an existing value .
6816	Remove the given path
6817	Rules returns the rules for the specified rules .
6818	SetRules update rules
6819	Call executes the given method .
6820	SetTraceInfo implements the Trace interface .
6821	Finish implements the Trace interface .
6822	ServeMetrics serves metrics .
6823	DumpMetrics dump metrics
6824	NewEventLog creates a new EventLog .
6825	Printf prints a formatted event
6826	Errorf logs an error message
6827	SetLogger sets the logger .
6828	ServeHTTP implements the http . Handler interface .
6829	TitleFromContext extracts the trace ID from the context .
6830	NewContext creates a new context .
6831	New creates a new API client
6832	NewWithClient creates a new client with the given client .
6833	Devices returns a list of devices
6834	Device returns a device by name .
6835	PushNote push a note
6836	PushLink sends a link to the device
6837	PushSMS sends a message to the device .
6838	Me returns the user s users .
6839	Push pushes data to the server
6840	PushNote push a note
6841	PushNoteToChannel sends a note to the server .
6842	PushLink push a link
6843	PushLinkToChannel sends a link to the channel .
6844	PushSMS sends a message to the server .
6845	Subscription returns a subscription .
6846	PushNote sends a message to the subscription .
6847	PushLink sends a link to the subscription .
6848	NewCachedLoader creates a new cache .
6849	Import imports data from cache
6850	Initialize initializes the cache .
6851	Get retrieves a value from cache
6852	MustGetString returns a string with the given key .
6853	MustGetBool retrieves a bool from the cache
6854	MustGetInt gets the value from the cache
6855	MustGetDuration returns the duration for the given key .
6856	NewRandomDNSBalancer creates a new DNS balancer
6857	writeServiceToCache writes the cache to the cache
6858	StringToLabels converts a string to a label
6859	SetClockSequence sets the clock sequence .
6860	Trace logs a message .
6861	Debug log message
6862	Info log message
6863	Warn log message
6864	Error logs an error .
6865	Critical log message
6866	SendPaste sends a paste request to the API server .
6867	GetPasteTextById retrieves the paste text from the API .
6868	ExecAndWait implements the Executor interface .
6869	ExecutorName sets the executor name
6870	Exe sets the Exe optional argument .
6871	Args sets the arguments .
6872	Dir specifies the directory for the given directory .
6873	Env sets environment variables
6874	Writer sets the writer to the writer .
6875	StdoutWriter sets the stdout writer
6876	StdoutPrefix sets the StdoutPrefix optional argument .
6877	StderrWriter sets the StderrWriter
6878	StderrPrefix sets the StderrPrefix optional argument .
6879	Build implements the ExecStreamerBuilder interface .
6880	MakeWidget creates a Widget .
6881	SetText sets the label
6882	AddLabel adds a label to the Window .
6883	fprint writes a formatted cell to w .
6884	setCell sets the cell .
6885	resize resizes the window .
6886	render renders the window .
6887	focusWidget sets the current window .
6888	focusPrevious sets the current window .
6889	keyHandler implements the WindowHandler interface .
6890	Color returns a string representation of a color .
6891	EscapedLen returns the length of the given string .
6892	Unescape returns the string representation of a string .
6893	init initializes the function .
6894	initKeyHandler initializes the key handler .
6895	Init initializes the terminal .
6896	Deinit initializes the window .
6897	NewWindow creates a new Window
6898	flush flushes the current cell .
6899	focusWindow refreshes the window .
6900	resizeAndRender resizes the window .
6901	Panic panics .
6902	Exit exits the terminal
6903	AddList adds a new list to the Window .
6904	Append appends a string to the list .
6905	Focus the editor .
6906	SetText sets the text
6907	AddEdit adds a new edit to the Window .
6908	Make authorization headers
6909	Start starts the session .
6910	FetchEntity retrieves the identifier of the Identity
6911	SaveEntity saves an object to the database
6912	DeleteEntity deletes an entity
6913	FetchChildren retrieves all children of the given parent .
6914	CreateChild creates a new child Identifier
6915	AssignChildren assigns a list of children to the given parent .
6916	NextEvent returns the next event .
6917	String returns a string representation of Identity
6918	NewPushCenter creates a new PushCenter
6919	RegisterHandlerForIdentity registers a handler for the given identity .
6920	UnregisterHandlerForIdentity removes the given identity from the PushCenter
6921	HasHandlerForIdentity returns true if the given identity is registered
6922	Start starts the PushCenter
6923	Stop stops the push center
6924	Logger returns the default logger
6925	String returns a string representation of FetchingInfo .
6926	NewClient creates a new HTTP client
6927	Post sends the given metrics to the client .
6928	MetricID returns the name of the given tags .
6929	SplitMetricID returns the name of the metric ID
6930	NewRateScale creates a new RateScale .
6931	Snapshot returns a copy of the rate .
6932	NewDeriveScale creates a new DeriveScale .
6933	Update updates the value .
6934	Snapshot returns a copy of the reservoir .
6935	Update implements the Gauge interface .
6936	Snapshot returns the snapshot of the gauge .
6937	NewUnstarted returns a new Registry .
6938	Subscribe adds a reporter to the registry .
6939	Get returns the metric with the given tags .
6940	Register registers a new metric .
6941	Fetch fetches metrics from the registry .
6942	Size returns the number of instruments .
6943	Tags returns the tags of the Registry .
6944	SetTags sets the tags .
6945	AddTags adds tags to the registry .
6946	Close closes the Registry .
6947	New creates a new Reporter
6948	Metric adds a metric to the Reporter .
6949	FilterBefore is used to filter a set of rows in the store .
6950	Set sets the value of the environment variable
6951	SetStr sets key value
6952	Get returns the value of the environment variable
6953	String returns a string representation of the EnvVar .
6954	Add adds a value to the set .
6955	AddAll adds all values to the set .
6956	Remove removes a value from the set .
6957	RemoveAll removes all values from the set .
6958	Contains returns true if the set contains the given value .
6959	ContainsAll returns true if the set contains all values .
6960	ContainsFunc returns true if the set contains f .
6961	Clear clears the set .
6962	Iterator iterates over all elements in the set .
6963	Items returns the items in the set .
6964	ItemsFunc returns a list of items in the set .
6965	fixWeekend is a helper function to fix a week .
6966	GetHolidays returns a list of Holiday codes for the given country .
6967	GetInt returns the value of a key
6968	GetFloat gets float64 value
6969	GetBool returns true if the given key exists
6970	Exists checks if the key exists
6971	getValue returns the value for the given key
6972	Load loads a GConfig file
6973	loadPath loads the path from the config file
6974	New returns a new Reader .
6975	readMimetypes reads a file from a file .
6976	Get returns the content of the given file .
6977	SetHeader sets the content of the request .
6978	GetFileSize returns the size of a file .
6979	ListenAndServe starts listening on the server .
6980	SendRequest sends a request to the server .
6981	SendRequestArr sends a request to the server .
6982	Close closes the server .
6983	Ws the websocket connection .
6984	SafeCreateS3Bucket creates a new S3Bucket object
6985	NewWriter returns a new WriteCloser
6986	NewReader returns a new ReadCloser .
6987	Delete deletes the given path .
6988	CertAtuh retrieves the certificate from the context
6989	Params sets the request parameters
6990	Next implements the ReqCtx interface .
6991	Result returns the result of the response .
6992	ErrorData is part of the Response interface .
6993	MiddlewareList creates a middleware middleware .
6994	LogFactory creates a new logger .
6995	NewRouter returns a new Router
6996	Request adds a route to the router .
6997	Middleware implements the Router interface .
6998	NotFound implements http . Handler interface
6999	NewMysqlDump creates a new MysqlDump object
7000	NewRemoteMysqlDump creates a new MysqlDump .
7001	Import import file
7002	Dump implements the sql . Writer interface .
7003	NewRemoteExecutor creates a new executor
7004	Execute executes a command
7005	World implements http . Hello
7006	Name returns the name of the Hello .
7007	NewPgDump creates a new PgDump .
7008	NewPgRemoteDump creates a new PgDump .
7009	Import import file
7010	New creates a new IrcText .
7011	SetFg sets the foreground color .
7012	SetBg sets the color of the color
7013	HandlerBuilder builds a new Handler for the given type .
7014	Logger with prefix
7015	NewEncoder creates a new Encoder
7016	Parse parses the content of the request .
7017	Responder returns a Responder
7018	NewErrorStatus returns a new error .
7019	ConvertErrorStatus converts an error to an error .
7020	Read implements the FileEntry interface .
7021	EntrySize returns the size of the header .
7022	NewLager creates a new logger .
7023	URLParts returns the URL parts of the request .
7024	URLPart returns the URL part of the request .
7025	StoreParam adds a value to the context .
7026	GetParam gets the param from the context
7027	Int32 returns the int32 value
7028	Uint returns the uint value of the parameter .
7029	UInt32 returns the uint32 value as uint32 .
7030	Float32 returns the float32 value
7031	UploadFile uploads a remote operation
7032	RemoveRemoteFile removes the remote file
7033	GetRemoteFile returns the remote file
7034	NewConn creates a new connection .
7035	RemoteAddr returns the remote address of the websocket connection .
7036	SendRequest sends a request to the server .
7037	SendRequestArr sends a request to the server .
7038	Close closes the connection .
7039	sendResponse sends a response to the server .
7040	send sends a message to the websocket connection .
7041	receive receives a message from the websocket connection .
7042	setConn sets the websocket connection .
7043	startReceive starts a goroutine .
7044	NewPbo creates a new Pbo object
7045	NewReadWriteCloser creates a new mock instance
7046	Read implements io . Reader
7047	Write implements io . Writer
7048	SafeRemoveSSH removes a file at the given path .
7049	SafeCreateSSH creates a new file with the given name .
7050	SafeCreate creates a new file .
7051	HMAC creates a HMAC HMAC HMAC .
7052	Scaffold returns a handler for the given platform .
7053	Route adds a route to the router .
7054	Group adds a pattern to the router .
7055	Platform adds a platform to the router .
7056	Handle registers a new route .
7057	Options adds options to the router .
7058	Use adds middleware to the router .
7059	NotFound implements Handler .
7060	AddHandlerBuilder adds a handler to the router .
7061	ServeErrorPage implements the http . Handler interface for ErrorHandler .
7062	GetErrorHandler returns an error handler for the given status code .
7063	SetErrorHandler sets the error handler .
7064	SetErrorHandlerFunc sets the error handler for the given status code .
7065	Echo sends a request to the server .
7066	UnmarshalBinary unmarshals a ConfigArg into a ConfigArg .
7067	attrIdentify parses the given io . Reader .
7068	ATARead returns the ATA read from the given reader .
7069	attaWrite writes the given io . Reader to the given io . Reader .
7070	calculateLBA calculates the LBA value of a LBA .
7071	MarshalBinary implements the Marshaler interface .
7072	UnmarshalBinary implements the Unmarshaler interface .
7073	MarshalBinary implements the encoding . BinaryMarshaler interface .
7074	New creates a new Fixture .
7075	FromYAML creates a new FAML from a database .
7076	FromJSON creates a Fixture from a database .
7077	MarshalBinary encodes the directive .
7078	MarshalBinary implements the Marshaler interface for MACMaskArg .
7079	NewSendToLogger creates a new LogToLogger .
7080	NewMulti creates a new LogBackend .
7081	OuterLog creates a new io . Writer .
7082	PublishPort is part of the RunConfig interface .
7083	Name sets the name of the run config
7084	AddArgs adds args to RunConfig
7085	NewCORSHandler returns a new CORI .
7086	CreatePreflight creates a new preflight route
7087	ServeHTTP implements the http . Handler interface .
7088	Handle implements the Handler interface .
7089	NewRandomSourceListSecure returns a new RandomSourceList
7090	Handle implements syslog . Handler .
7091	Close closes the syslog handler .
7092	hasDatePrefix checks if a string is a valid date prefix .
7093	Match returns the pattern matching the given string .
7094	Match returns the match of the given string .
7095	MatchRune returns true if the given rune matches the given rune .
7096	Match returns the index of the given string .
7097	Alloc allocates a new instance of RefCount .
7098	Free releases the reference count .
7099	Infof log message
7100	Warningf logs a warning message
7101	Errorf logs an error message
7102	Fatalf logs an error
7103	ToPhone converts phone number to phone number
7104	ToURL converts a string to a URL
7105	ToSSN converts a string to a string .
7106	ToMorseCode converts a string to a string .
7107	ToPirateSpeak converts a string to a string
7108	ToIRSA converts a string to a string .
7109	newDefaultLogger returns a default logger .
7110	Logf implements Logger . Logger .
7111	Section returns the list of sections .
7112	Options returns the options for the given section .
7113	OptionMap returns a map of option names
7114	Comments returns the comments for the given section .
7115	AddComment adds a comment to the config .
7116	Parse parses a config file into a Config struct .
7117	Write implements the io . Writer interface .
7118	Get returns the value associated with the given key .
7119	Set sets the section of the config .
7120	Delete deletes a section
7121	Convert converts a value to a struct .
7122	Postpone sets the expiration time .
7123	Filter returns a new LogBackend .
7124	Op creates a new operation .
7125	ApplyRuleIf applies the given rule to the given condition .
7126	ApplyRuleIfElse applies the given rule to the given rule .
7127	AuthHandler returns an http . Handler for the request .
7128	HasBin returns true if the Docker container is in bin .
7129	Run runs the command .
7130	GetReader gets the header from the header .
7131	SetName sets the Name field s value .
7132	SetValue sets the Value field s value .
7133	SetWriter sets the Header field s value .
7134	encryptionKey returns the key for the entity .
7135	NewContentNegotiator returns a new ContentNegotiator
7136	NewJsonXmlContentNegotiator returns a new ContentNegotiator .
7137	Negotiate returns the content of the given request .
7138	AddEncoder adds an encoder to the encoder .
7139	getEncoder returns the encoder for the given request .
7140	CanSign returns true if the public key is valid .
7141	ByWinnings returns a sorted list of winnings .
7142	WaitFunc waits for the given interval and returns true if the timeout is reached .
7143	FormatDialAddress returns a string representation of NetworkNode .
7144	SetFromDocker sets the docker port
7145	Read implements io . Reader .
7146	readByte reads a random byte from a random byte slice .
7147	RecoverHandlerJson is a wrapper around http . HandlerFunc
7148	DefaultServiceConfig returns a default service config .
7149	NewService creates a new service .
7150	RunLight runs the image .
7151	initConfig initializes the config file .
7152	HasExposedPorts returns true if the container is exposed
7153	Inspect inspects the container
7154	Kill the container
7155	NetworkNodes returns a list of network nodes .
7156	Remove removes the container
7157	WaitStartup waits until the container is ready .
7158	NewHandler creates a new Handler .
7159	Handle implements the Handler interface .
7160	NewCounter creates a new Counter
7161	Metrics returns the metrics for the counter .
7162	Retrieve fetches an asset from the given sources .
7163	Compile compiles the source of the given source .
7164	readBlockAt returns the block at the given offset .
7165	writeTo implements io . WriterTo interface .
7166	Push adds data to the stack .
7167	Pop populates the stack .
7168	Peek returns the current state of the stack .
7169	PeekHeader returns the last header of the stack .
7170	IterateBackward iterates over the stack and returns the next block .
7171	IterateForward iterates over the next block .
7172	Close closes the stack .
7173	OpenStack creates a new stack .
7174	NewStack creates a new stack .
7175	NewSessionCache creates a new session cache
7176	getInvalidTokenError returns an error if the token is invalid .
7177	Get retrieves a token from the cache .
7178	Add adds a token to the cache .
7179	Delete a token
7180	Set adds a token to the session cache .
7181	NewClient creates a new client
7182	connect connects to the client
7183	writeMessage sends a message to the client .
7184	readMessage reads a message from the client .
7185	Stop stops the client .
7186	GetChannels returns a list of channels
7187	JsonWrite writes a json response to w .
7188	JsonRead returns true if the body is a JSON body .
7189	VerifyKeySignature verifies the signature of the public key .
7190	NewUser creates a new user
7191	Next implements the http . Handler interface .
7192	ServeHTTP implements the http . Handler interface .
7193	UseHandler adds a handler to the route .
7194	HandleMethod registers a handler for a route .
7195	Handle registers a handler for the route .
7196	Get registers a handler for GET method .
7197	Post adds a POST route to the router .
7198	Put adds a route to the router .
7199	Patch adds a route to the router .
7200	Delete adds a route to the router .
7201	Options adds options to the route .
7202	NewSalter returns a new Salter
7203	Boken returns a copy of the salt .
7204	Token returns the token for the given size .
7205	getRandomBytes returns a random byte slice of random bytes
7206	NewNewsItem creates a new NewsItem
7207	Write implements the io . Writer interface .
7208	Write implements the io . Writer interface .
7209	Write implements the io . Writer interface .
7210	Write implements the io . Writer interface .
7211	GetLogger returns a logger with the given name .
7212	RemoveLogger removes a logger from the logger .
7213	WaitForAllUnprocessedRecords waits for all unprocessed records to be processed .
7214	run starts the logger .
7215	WaitForUnprocessedRecords blocks until the current log record is reached .
7216	SetBufferLength sets the buffer length .
7217	AddHandler adds a handler to the logger .
7218	ClearHandlers clears all handlers
7219	SetLevel sets the logger .
7220	log sends a message to the logger .
7221	Logf implements Logger .
7222	Log implements Logger .
7223	Emergencyf implements Logger .
7224	Alertf logs an alert message
7225	Criticalf logs an error
7226	Errorf implements Logger .
7227	Warningf logs a warning message .
7228	Noticef implements Logger .
7229	Infof implements Logger .
7230	Debugf implements Logger .
7231	SetHandler sets the handler
7232	SetMethodHandler sets the handler for the given route .
7233	GetHandler returns the handler for the given route .
7234	getChildEntry returns the entry for the given pattern .
7235	MergePatterns merges two entries .
7236	AddEntry adds a new entry to the entry .
7237	addPatterns adds patterns to the entry list .
7238	execPrefix returns the route for the route .
7239	visit returns the route for the given route .
7240	getExecMatch returns the matching route matching the given route .
7241	MergeRoutes merges all routes into the given Routes .
7242	Debugln logs a debug message
7243	Debugf logs a formatted debug message
7244	Verbosef logs a verbose message
7245	Infoln logs a message at level .
7246	Infof implements Logger interface .
7247	Okln logs a message
7248	Okf implements logger .
7249	Fatalln is part of the logger interface .
7250	Fatalf logs an error message
7251	ShouldDebug returns true if the logger is enabled
7252	SetDebug sets debug level
7253	Facility returns the facility of the logger .
7254	NewFacility creates a new logger
7255	removeNonDigits removes all digits from the format .
7256	removeNonWordChars removes non - terminal characters .
7257	urlEncodeSpaces replaces all spaces in the format .
7258	randomSelect returns the number of elements in the slice .
7259	NewStdFormatter creates a new StdFormatter .
7260	Get returns the chain with the given chain .
7261	parseMatcher parses a matcher pattern .
7262	isMatchPattern reports whether s is a match pattern .
7263	routeSplitFunc returns the route split function .
7264	SplitPath splits a route into a slice of routes .
7265	isNextSuffixPattern returns true if the next pattern matches the pattern .
7266	PeekNextPattern returns the next pattern of the next pattern .
7267	NewPlayer creates a new player .
7268	Push adds a reader to the reader .
7269	NewCatering creates a new Catering
7270	GroupByMonths returns a map with the given season .
7271	validateTournamentInfo validates a tournament .
7272	NewTournament creates a new tournament .
7273	IndexOf returns the index of a string .
7274	IndexOfIgnoreCase returns the index of the given string .
7275	NewCache creates a new cache .
7276	Count returns the number of entries in the cache .
7277	Flush flushes the cache
7278	removeExpired checks if the cache is expired
7279	NewImage creates a new image
7280	Exists checks if the image exists
7281	Pull pulls the image
7282	Run creates a container
7283	Setup initializes the image .
7284	NewLocation creates a new Location .
7285	PortAt returns the port at the given index .
7286	SplitPort returns the port for the specified port .
7287	Priority returns the priority of the system .
7288	OK returns true if the syslog .
7289	Format returns a string representation of the record .
7290	Open opens a bolt database .
7291	Begin begins a transaction .
7292	View implements the DB interface .
7293	CopyFile copies a file at the given path .
7294	CreateBucketIfNotExists creates a new bucket .
7295	Delete deletes the given key .
7296	ForEach iterates over all buckets in the bucket .
7297	ForEachGob iterates over all buckets in the bucket .
7298	Put implements the Put interface .
7299	Value adds a value to the bucket .
7300	Update updates the given key .
7301	OpenBucket opens a bucket .
7302	CreateBucketIfNotExists creates a new bucket .
7303	Delete removes a key from the bucket .
7304	GobValue implements the Bucket interface .
7305	NextSequence returns the next sequence .
7306	Put implements the Bucket interface .
7307	PutGob stores a key in the bucket .
7308	Drop deletes the database .
7309	HandleError implements the Error interface .
7310	Handle implements the WriteHandler interface .
7311	Handle implements Handler .
7312	WaitPeerListening waits for a given network address .
7313	NewEvent creates a new Event .
7314	Subscribe adds a handler to the bus .
7315	Unsubscribe removes all handlers from the bus .
7316	Publish creates a new event
7317	HandleOnly is a wrapper around HandlerFunc
7318	ContextWithPublisher returns a context with the given publisher .
7319	PublisherContext returns the current context .
7320	PublishNamedEvent publishes the given event .
7321	Publish event
7322	PublishNamedEventContext publishes an event to the given context .
7323	String returns the string representation of the level .
7324	UnmarshalJSON handles deserialization of a Level .
