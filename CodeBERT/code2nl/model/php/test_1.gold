0	Get the administrator role create it if it does not exists .
1	Get or create user .
2	Delete a MenuItem for a given BREAD .
3	Auto generate Categories Translations .
4	Return the Highest Order Menu Item .
5	Create a default index name .
6	Create a MenuItem for a given BREAD .
7	Update the table .
8	Updates the table .
9	Get the table diff to rename columns .
10	Get the table diff to rename columns and indexes .
11	Get columns that were renamed .
12	Get indexes that were renamed .
13	Method for returning specific thumbnail for model .
14	Generate thumbnail URL .
15	Determine if the given user can change a user a role .
16	Get a collection of the dashboard widgets .
17	Prepare menu translations .
18	Save changes made to the translator attributes .
19	Determine if the given model can be viewed by the user .
20	Create BREAD .
21	Store BREAD .
22	Edit BREAD .
23	Update BREAD .
24	Delete BREAD .
25	Add Relationship .
26	Get Relationship Field .
27	Handle password fields .
28	Store new database table .
29	Edit database table .
30	Update database table .
31	Show table .
32	Destroy table .
33	Build the URL to sort data type by this field .
34	Display menu .
35	Check if this model can translate .
36	Load translations relation .
37	Get a single translated attribute .
38	Get entries filtered by translated value .
39	Save translations .
40	Describes given table .
41	Create Permission for a given BREAD .
42	Add storage symlink alert .
43	Register the commands accessible from the Console .
44	Remove translations images and files related to a BREAD item .
45	Delete all images related to a BREAD item .
46	Order BREAD items .
47	Get BREAD relations data .
48	Replace relationships keys for labels and create READ links if a slug is provided .
49	Add SoftDelete to the given stub .
50	Validates bread POST request .
51	Get fields having validation rules in proper format .
52	Verifies an id token and returns the authenticated apiLoginTicket . Throws an exception if the id token is not valid . The audience parameter can be used to control which id tokens are accepted . By default the id token must have been issued to this OAuth2 client .
53	Retrieve and cache a certificates file .
54	are PEM encoded certificates .
55	phpseclib calls phpinfo by default which requires special whitelisting in the AppEngine VM environment . This function sets constants to bypass the need for phpseclib to check phpinfo
56	Attempt to exchange a code for an valid authentication token . Helper wrapped around the OAuth 2 . 0 implementation .
57	Fetches a fresh access token with a given assertion token .
58	Fetches a fresh OAuth 2 . 0 access token with the given refresh token .
59	Adds auth listeners to the HTTP client based on the credentials set in the Google API Client object
60	Returns if the access_token is expired .
61	Verify an id_token . This method will verify the current id_token if one isn t provided .
62	This functions adds a scope to be requested as part of the OAuth2 . 0 flow . Will append any scopes not previously requested to the scope parameter . A single string will be treated as a scope to request . An array of strings will each be appended .
63	Helper method to execute deferred HTTP requests .
64	Set the auth config from new or deprecated JSON config . This structure should match the file downloaded from the Download JSON button on in the Google Developer Console .
65	create a default google auth object
66	Gets the number of times the associated task can be retried .
67	Send the next part of the file to upload .
68	Used by the IO lib and also the batch processing .
69	Return the type of a passed in value
70	Utility function that merges multiple combine calls for multi - key templates .
71	Utility function to encode and trim values
72	Executes a Psr \ Http \ Message \ RequestInterface
73	Decode an HTTP Response .
74	Initialize this object s properties from an array .
75	Create a simplified object suitable for straightforward conversion to JSON . This is relatively expensive due to the usage of reflection but shouldn t be called a whole lot and is the most straightforward way to filter .
76	Handle different types of values primarily other objects and map and array data types .
77	If there is an internal name mapping use that .
78	Returns true only if the array is associative .
79	Builds out a default http handler for the installed version of guzzle .
80	Find config . php either user defined or from standard location
81	Define core constants that have not been user defined in config . php
82	Check if we emulate prepare statements and set bool flag accordingly
83	Die with an error message
84	Return SQL queries performed
85	Global variables are deprecated . For backwards compatibility only .
86	Read all options from DB at once return bool
87	Add an option to the DB
88	Delete option from DB
89	Registers a new constraint with the system . Constraints are used by the routes as placeholders for regular expressions to make defining the routes more human - friendly .
90	Sets the default namespace to use for Controllers when no other namespace has been specified .
91	Sets the default controller to use when no other controller has been specified .
92	Sets the default method to call on the controller when no other method has been set in the route .
93	Will attempt to discover any additional routes either through the local PSR4 namespaces or through selected Composer packages .
94	Sets the default constraint to be used in the system . Typically for use with the resource method .
95	Returns the raw array of available routes .
96	Returns one or all routes options
97	A shortcut method to add a number of routes at a single time . It does not allow any options to be set on the route or to define the method used .
98	Adds a temporary redirect from one route to another . Used for redirecting traffic from old non - existing routes to the new moved routes .
99	Determines if the route is a redirecting route .
100	Grabs the HTTP status code from a redirecting Route .
101	Specifies a single route to match for multiple HTTP Verbs .
102	Specifies a route that is only available to OPTIONS requests .
103	Limits the routes to a specified ENVIRONMENT or they won t run .
104	Attempts to look up a route based on it s destination .
105	Examines the HTTP_HOST to get a best match for the subdomain . It won t be perfect but should work for our needs .
106	Reset the routes so that a FeatureTestCase can provide the explicit ones needed for it .
107	Even in PHP7 some errors make it through to the errorHandler so convert these to Exceptions and let the exception handler log it and display it .
108	Checks to see if any errors have happened during shutdown that need to be caught and handle them .
109	Determines the view to display based on the exception thrown whether an HTTP or CLI request etc .
110	Given an exception and status code will display the error to the client .
111	Gathers the variables that will be made available to the view .
112	Determines the HTTP status code and the exit status code for this request .
113	Describes memory usage in real - world units . Intended for use with memory_get_usage etc .
114	Creates a syntax - highlighted version of a PHP file .
115	Alpha with spaces .
116	Compares value against a regular expression pattern .
117	Checks for a correctly formatted email address
118	Validate a comma - separated list of email addresses .
119	Checks a URL to ensure it s formed correctly .
120	Checks for a valid date and matches a given date format
121	For Uploaded file move
122	Verifies that a credit card number is valid and matches the known formats for a wide number of credit card types . This does not verify that the card is a valid card only that the number is formatted correctly .
123	Checks the given number to see if the number passing a Luhn check .
124	Move a file .
125	Moves the Zend Escaper files into our base repo so that it s available for packaged releases where the users don t user Composer .
126	Moves the Kint file into our base repo so that it s available for packaged releases where the users don t user Composer .
127	Initialize the session container and starts up the session .
128	Configure session ID length
129	Handle temporary variables
130	Sets user data into the session .
131	Get user data that has been set in the session .
132	Push new value onto session value that is array .
133	Remove one or more session properties .
134	Sets data into the session that will only last for a single request . Perfect for use with single - use status update messages .
135	Retrieve one or more items of flash data from the session .
136	Mark a session property or properties as flashdata .
137	Retrieve all of the keys for session data marked as flashdata .
138	Sets new data into the session and marks it as temporary data with a set lifespan .
139	Returns either a single piece of tempdata or all temp data currently in the session .
140	Mark one of more pieces of data as being temporary meaning that it has a set lifespan within the session .
141	Unmarks temporary data in the session effectively removing its lifespan and allowing it to live as long as the session does .
142	Retrieve the keys of all session data that have been marked as temporary data .
143	Takes care of setting the cookie on the client side . Extracted for testing reasons .
144	Restricts the number of requests made by a single IP address within a set number of seconds .
145	Attempts to determine the best mime type for the given file extension .
146	Attempts to determine the best file extension for a given mime type .
147	Sets the URI to redirect to and optionally the HTTP status code to use . If no code is provided it will be automatically determined .
148	Sets the URI to redirect to but as a reverse - routed or named route instead of a raw URI .
149	Helper function to return to previous page .
150	Adds a key and message to the session as Flashdata .
151	Runs through all of the filters for the specified uri and position .
152	Runs through our list of filters provided by the configuration object to get them ready for use including getting uri masks to proper regex removing those we can from the possibilities based on HTTP method etc .
153	Ensures that a specific filter is on and enabled for the current request .
154	Returns the arguments for a specified key or all .
155	Converts the object to display nicely in the Chrome Logger UI .
156	Attaches the header and the content to the passed in request object .
157	Handles setting up the locale perhaps auto - detecting through content negotiation .
158	Sets the locale string for this request .
159	Attempts to detect if the current connection is secure through a few different methods .
160	A convenience method that grabs the raw input stream and decodes the JSON into an array .
161	Fetch an item from GET data .
162	Fetch an item from POST .
163	Fetch an item from POST data with fallback to GET .
164	Fetch an item from GET data with fallback to POST .
165	Fetch an item from the COOKIE array .
166	Returns an array of all files that have been uploaded with this request . Each file is represented by an UploadedFile instance .
167	Retrieves a single file by the name of the input field used to upload it .
168	Sets up our URI object based on the information we have . This is either provided by the user in the baseURL Config setting or determined from the environment as needed .
169	Based on the URIProtocol Config setting will attempt to detect the path portion of the current URI .
170	Provides a convenient way to work with the Negotiate class for content negotiation .
171	Will parse the REQUEST_URI and automatically detect the URI from it fixing the query string if necessary .
172	Build a DSN from the provided parameters
173	A Factory method to return the appropriate formatter for the given mime type .
174	Checks if Honeypot field is empty ; if not then the requester is a bot
175	Attach a honeypot to the current response .
176	Handles the actual resizing of the image .
177	Crops the image .
178	Get GD version
179	Get Image Resource
180	Add Foreign Key
181	Foreign Key Drop
182	Field attribute UNSIGNED
183	Field attribute DEFAULT
184	Process primary keys
185	Process foreign keys
186	Sets the current locale to use when performing string lookups .
187	Parses the language string for a file loads the file if necessary getting the line .
188	Advanced message formatting .
189	A simple method for including files that can be overridden during testing .
190	Adds a new base_uri value . Can be either a URI class or a simple string .
191	Adds a new valid endpoint for valid image sources . Can be either a URI class or a simple string .
192	Adds a new valid endpoint for valid video and audio . Can be either a URI class or a simple string .
193	Adds a new valid endpoint for manifest sources . Can be either a URI class or simple string .
194	Adds a new valid endpoint for Flash and other plugin sources . Can be either a URI class or a simple string .
195	Limits the types of plugins that can be used . Can be either a URI class or a simple string .
196	specifies an HTML sandbox policy that the user agent applies to the protected resource .
197	Adds a new valid endpoint for javascript file sources . Can be either a URI class or a simple string .
198	Adds a new valid endpoint for CSS file sources . Can be either a URI class or a simple string .
199	DRY method to add an string or array to a class property .
200	Scans the body of the request message and replaces any nonce placeholders with actual nonces that we ll then add to our headers .
201	Based on the current state of the elements will add the appropriate Content - Security - Policy and Content - Security - Policy - Report - Only headers with their values to the response object .
202	Gets the Collector s title .
203	Ensures the data has been collected .
204	Parses the params attribute . If an array returns untouched . If a string it should be in the format key1 = value key2 = value . It will be split and returned as an array .
205	Given the library string attempts to determine the class and method to call .
206	Retrieve the results of the query . Typically an array of individual data rows which can be either an array an object or a custom class name .
207	Returns the results as an array of custom objects .
208	Returns the results as an array of arrays .
209	Returns the results as an array of objects .
210	Wrapper object to return a row as either an array an object or a custom class .
211	Returns a row as a custom class instance .
212	Returns a single row from the results as an array .
213	Returns a single row from the results as an object .
214	Assigns an item into a particular column slot .
215	Returns the first row of the current results .
216	Returns the last row of the current results .
217	Returns the next row of the current results .
218	Returns an unbuffered row and move the pointer to the next row .
219	Match - maker
220	Checks two Accept values with matching values to see if their params are the same .
221	Runs the current command discovered on the CLI .
222	Displays basic information about the Console .
223	Handles creating and displaying the
224	Allows for a simple manual form of pagination where all of the data is provided by the user . The URL is the current URI .
225	Stores a set of pagination data for later display . Most commonly used by the model to automate the process .
226	Sets the path that an aliased group of links will use .
227	Returns the total number of pages .
228	Returns the number of the current page of results .
229	Tells whether this group of results has any more pages of results .
230	Returns the last page if we have a total that we can calculate with .
231	Returns the URI for a specific page for the specified group .
232	Returns the full URI to the next page of results or null .
233	Returns the full URL to the previous page of results or null .
234	Returns the number of results per page that should be shown .
235	Returns an array with details about the results including total per_page current_page last_page next_url prev_url from to . Does not include the actual data . This data is suitable for adding a data object to with the result set and converting to JSON .
236	Ensures that an array exists for the group specified .
237	Returns the number of years of difference between the two .
238	Returns the number of months difference between the two dates .
239	Returns the number of weeks difference between the two dates .
240	Returns the number of days difference between the two dates .
241	Returns the number of hours difference between the two dates .
242	Returns the number of minutes difference between the two dates .
243	Returns the number of seconds difference between the two dates .
244	Convert the time to human readable format
245	Parses the connection binds and returns an instance of the driver ready to go .
246	Creates a new Forge instance for the current database type .
247	Checks a property to see if it has changed since the entity was created .
248	Checks the datamap to see if this column name is being mapped and returns the mapped name if any or the original name .
249	Converts the given string|timestamp|DateTime|Time instance into a \ CodeIgniter \ I18n \ Time object .
250	Cast as JSON
251	Should the application auto - discover the requested resources .
252	Works with the current Query Builder instance to return all results while optionally limiting them .
253	Returns the first row of the result set . Will take any previous Query Builder calls into account when determining the result set .
254	A convenience method that will attempt to determine whether the data should be inserted or updated . Will work with either an array or object . When using with custom class objects you must ensure that the class will provide access to the class variables even if through a magic method .
255	Takes a class an returns an array of it s public and protected properties as an array suitable for use in creates and updates .
256	Inserts data into the current table . If an object is provided it will attempt to convert it to an array .
257	Compiles batch insert strings and runs the queries validating each row prior .
258	Provides a shared instance of the Query Builder .
259	Ensures that only the fields that are allowed to be updated are in the data array .
260	Removes any rules that apply to fields that have not been set currently so that rules don t block updating when only updating a partial row .
261	Returns the model s defined validation rules so that they can be used elsewhere if needed .
262	Override countAllResults to account for soft deleted accounts .
263	Set the HTTP Authentication .
264	Set form data to be sent .
265	Sets the correct settings based on the options array passed in .
266	Get the request method . Overrides the Request class method since users expect a different answer here .
267	Fires the actual cURL request .
268	Takes all headers current part of this request and adds them to the cURL request .
269	Parses the header retrieved from the cURL response into our Response object .
270	Does the actual work of initializing cURL setting the options and grabbing the output .
271	Migrate to a schema version
272	Retrieves list of available migration scripts for one namespace
273	checks if the list of available migration scripts list are consistent if sequential check if no gaps and check if all consistent with migrations table if downgrading if timestamp check if consistent with migrations table if downgrading
274	Grabs the full migration history from the database .
275	Extracts the migration class name from a filename
276	Retrieves current schema version
277	Stores the current schema version .
278	Removes a single history
279	Ensures that we have created our migrations table in the database .
280	Check ; runs the validation process returning true or false determining whether validation was successful or not .
281	Takes a Request object and grabs the input data to use from its array values .
282	Sets an individual rule and custom error messages for a single field .
283	Get rule group .
284	Set rule group .
285	Loads all of the rulesets classes that have been defined in the Config \ Validation and stores them locally so we can use them .
286	Sets the error for a specific field . Used by custom validation methods .
287	Attempts to find the appropriate error message
288	Split rules string by pipe operator .
289	Resets the class to a blank slate . Should be called whenever you need to process more than one array .
290	A recursive method to convert an array into a valid XML string .
291	Cleans the paths of filenames by replacing APPPATH SYSTEMPATH FCPATH with the actual var . i . e .
292	Sets and overwrites any current URI information .
293	Retrieve the user information component of the URI .
294	Retrieve the query string
295	Returns the value of a specific segment of the URI path .
296	Set the value of a specific segment of the URI path . Allows to set only existing segments or add new one .
297	Builds a representation of the string from the component parts .
298	Parses the given string an saves the appropriate authority pieces .
299	Sets the scheme for this URI .
300	Sets the port portion of the URI .
301	Sets the path portion of the URI .
302	Sets the path portion of the URI based on segments .
303	Sets the query portion of the URI while attempting to clean the various parts of the query keys and values .
304	Checks the value to see if it has been urlencoded and decodes it if so . The urlencode check is not perfect but should catch most cases .
305	Adds a single new element to the query vars .
306	Filters the query variables so that only the keys passed in are kept . The rest are removed from the object .
307	Encodes any dangerous characters and removes dot segments . While dot segments have valid uses according to the spec this URI class does not allow them .
308	Saves our parts from a parse_url call .
309	Combines one URI string with this one based on the rules set out in RFC 3986 Section 2
310	Given 2 paths will merge them according to rules set out in RFC 2986 Section 5 . 2
311	Used when resolving and merging paths to correctly interpret and remove single and double dot segments from the path per RFC 3986 Section 5 . 2 . 4
312	Appends a value to the list of values for this header . If the header is a single value string it will be converted to an array .
313	Prepends a value to the list of values for this header . If the header is a single value string it will be converted to an array .
314	Returns a URL to the previous page . The previous page is NOT the page before the current page but is the page just before the first page .
315	Returns a URL to the next page . The next page is NOT the page after the current page but is the page that follows the last page .
316	Returns the URI of the first page .
317	Returns the URI of the last page .
318	Returns the URI of the current page .
319	Starts a timer running .
320	Stops a running timer .
321	Returns the duration of a recorded timer .
322	Returns the array of timers with the duration pre - calculated for you .
323	Add a table alias to our list .
324	Orchestrates a query against the database . Queries must use Database \ Statement objects to store the query and build it . This method works with the cache .
325	Performs a basic query against the database . No binding or caching is performed nor are transactions handled . Simply takes a raw query string and returns the database - specific result id .
326	Returns an instance of the query builder for this connection .
327	Creates a prepared statement with the database that can then be used to execute multiple statements against . Within the closure you would build the query in any normal way though the Query Builder is the expected manner .
328	Escape the SQL Identifiers
329	This function enables you to call PHP database functions that are not natively included in CodeIgniter in a platform independent manner .
330	Returns an array of table names
331	Determine if a particular table exists
332	Determine if a particular field exists
333	Returns an object with field data
334	Returns an object with key data
335	Returns an object with foreign key data
336	Retrieve an environment - specific configuration setting
337	Provides external libraries a simple way to register one or more options into a config file .
338	Does the heavy lifting of actually retrieving the file and verifying it s age .
339	Writes a file to disk or returns false if not successful .
340	Get Directory File Information
341	Get File Info
342	Handles some basic app and environment setup .
343	Launch the application!
344	Handles the main request logic and fires the controller .
345	Start the Benchmark
346	Get our Response object and set some default values including the HTTP protocol version and a default successful response .
347	Force Secure Site Access? If the config value forceGlobalSecureRequests is true will enforce that all requests to this site are made through HTTPS . Will redirect the user to the current page with HTTPS as well as set the HTTP Strict Transport Security header for those browsers that support it .
348	Determines if a response has been cached for the given URI .
349	Caches the full response from the current request . Used for full - page caching for very high performance .
350	Generates the cache name to use for our full - page caching .
351	Replaces the memory_usage and elapsed_time tags .
352	Try to Route It - As it sounds like works with the router to match a route against the current URI . If the route is a redirect route will also handle the redirect .
353	Now that everything has been setup this method attempts to run the controller method and make the script go . If it s not able to will show the appropriate Page Not Found error .
354	Instantiates the controller class .
355	Runs the controller allowing for _remap methods to function .
356	Gathers the script output from the buffer replaces some execution time tag in the output and displays the debug toolbar if required .
357	If we have a session object to use store the current URI as the previous URI . This is called just prior to sending the response to the client and will make it available next request .
358	Modifies the Request Object to use a different method if a POST variable called _method is found .
359	Attempts to create the desired cache handler based upon the
360	Determines the alias name based on the table
361	WHERE NOT IN
362	Internal WHERE IN
363	Platform independent LIKE statement builder .
364	Starts a query group .
365	Ends a query group
366	Sets the OFFSET value
367	The set function .
368	Get SELECT query string
369	Returns a finalized compiled query string with the bindings inserted and prefixes swapped out .
370	Count All query
371	Count All Results query
372	Insert batch statement
373	Get INSERT query string
374	Get UPDATE query string
375	Get DELETE query string
376	Decrements a numeric column by the specified value .
377	Compile the SELECT statement
378	Compile WHERE HAVING statements
379	Compile GROUP BY
380	Compile ORDER BY
381	Returns the SQL string operator
382	Called within the view to display the timeline itself .
383	Returns a sorted array of timeline data arrays from the collectors .
384	Returns an array of data from all of the modules that should be displayed in the Vars tab .
385	Rounds a number to the nearest incremental value .
386	Makes a copy of itself to the new location . If no filename is provided it will use the existing filename .
387	Get image properties
388	Releases the lock if any .
389	Attaches Honeypot template to response .
390	Prepares the template by adding label content and field name .
391	Returns the result set as an object .
392	Set columns . Takes a one - dimensional array as input and creates a multi - dimensional array with a depth equal to the number of columns . This allows a single array with many elements to be displayed in a table that has a fixed column count .
393	Clears the table arrays . Useful if multiple tables are being generated
394	Set table data from a database result object
395	Set table data from an array
396	create file target path if the set path does not exist
397	Get error string
398	Save the uploaded file to a new location .
399	Verifies if the file s size in Kilobytes is no larger than the parameter .
400	Uses the mime config file to determine if a file is considered an image which for our purposes basically means that it s a raster image or svg .
401	Checks to see if an uploaded file s mime type matches one in the parameter .
402	Checks an uploaded file to verify that the dimensions are within a specified allowable dimension .
403	Fetches one or more items from a global like cookies get post etc . Can optionally filter the input when you retrieve it by passing in a filter .
404	Saves a copy of the current state of one of several PHP globals so we can retrieve them later .
405	Migrates the database up or down to get to the specified version .
406	Reads an existing database table and collects all of the information needed to recreate this table .
407	Called after fromTable and any actions like dropColumn etc to finalize the action . It creates a temp table creates the new table with modifications and copies the data over to the new table .
408	Modifies a field including changing data type renaming etc .
409	Creates the new table based on our current fields .
410	Copies data from our old table to the new one taking care map data correctly based on any columns that have been renamed .
411	Converts fields retrieved from the database to the format needed for creating fields with Forge .
412	Converts keys retrieved from the database to the format needed to create later .
413	Attempts to drop all indexes and constraints from the database for this table .
414	CSRF Set Cookie
415	Sets the CSRF Hash and cookie .
416	Returns a new Time instance with the timezone set .
417	Returns a new Time instance while parsing a datetime string .
418	Return a new time with the time set to midnight .
419	Returns an instance set to midnight yesterday morning .
420	Returns an instance set to midnight tomorrow morning .
421	Returns a new instance based on the year month and day . If any of those three are left empty will default to the current value .
422	Returns a new instance with the date set to today and the time set to the values passed in .
423	Returns a new instance with the date time values individually set .
424	Provides a replacement for DateTime s own createFromFormat function that provides more flexible timeZone handling
425	Returns a new instance with the datetime set based on the provided UNIX timestamp .
426	Takes an instance of DateTime and returns an instance of Time with it s same values .
427	Converts the current instance to a mutable DateTime object .
428	Returns the age in years from the current date and now
429	Are we in daylight savings time currently?
430	Sets the month of the year .
431	Sets the day of the month .
432	Sets the minute of the hour
433	Sets the second of the minute .
434	Helper method to do the heavy lifting of the setX methods .
435	Returns a new instance with the date set to the new timestamp .
436	Determines if the datetime passed in is equal to the current instance . Equal in this case means that they represent the same moment in time and are not required to be in the same timezone as both times are converted to UTC and compared that way .
437	Ensures that the times are identical taking timezone into account .
438	Returns a Time instance with the timezone converted to UTC .
439	Callback function for preg_replace_callback that applies Javascript escaping to all matches .
440	Callback function for preg_replace_callback that applies CSS escaping to all matches .
441	Converts a string to UTF - 8 from the base encoding . The base encoding is set via this class constructor .
442	Converts a string from UTF - 8 to the base encoding . The base encoding is set via this class constructor .
443	Attempts to get a single file from the collection of uploaded files .
444	Given a file array will create UploadedFile instances . Will loop over an array and create objects for each .
445	Navigate through a array looking for a particular index
446	set download for binary string .
447	set download for file .
448	get content length .
449	Set content type by guessing mime type from file extension
450	get download filename .
451	get Content - Disposition Header string .
452	set header for file download .
453	output download file text .
454	output download text by file .
455	We map all un - routed CLI methods through this function so we have the chance to look for a Command first .
456	Actually runs the command .
457	Scans all Commands directories and prepares a list of each command with it s group and file .
458	Creates the default
459	Returns a new instance of the Database Seeder .
460	To migrate all namespaces to the latest migration
461	Adds a test to run .
462	Runs through all of the tests that have been added recording time to execute the desired number of iterations and the approximate memory usage used during those iterations .
463	Get results .
464	Sets the raw query string to use for this statement .
465	Returns the final processed query string after binding etal has been performed .
466	Returns the start time in seconds with microseconds .
467	Returns the duration of this query during execution or null if the query has not been executed yet .
468	Stores the error description that happened for this query .
469	Swaps out one table prefix for a new one .
470	Escapes and inserts any binds into the finalQueryString object .
471	Handles auto - loading helper files .
472	Register the loader with the SPL autoloader stack .
473	Registers namespaces with the autoloader .
474	Get namespaces with prefixes as keys and paths as values .
475	A central way to require a file is loaded . Split out primarily for testing purposes .
476	Sanitizes a filename replacing spaces with dashes .
477	Locates all PSR4 compatible namespaces from Composer .
478	Given a string or DateTime object will return the date modified by the given value . Returns the value as a unix timestamp
479	Returns an excerpt of the given string .
480	Strips quotes from the environment variable value .
481	Resolve the nested variables .
482	Select a specific database table to use .
483	Executes the query against the database .
484	Prep the query
485	Returns the last error code and message .
486	Execute the query
487	Fetch Field Names
488	The cache class provides a simple way to store and retrieve complex data for later .
489	The CLI Request class provides for ways to interact with a command line request .
490	The CURL Request class acts as a simple HTTP client for interacting with other servers typically through APIs .
491	The Honeypot provides a secret input on forms that bots should NOT fill in providing an additional safeguard when accepting user input .
492	Responsible for loading the language string translations .
493	The Logger class is a PSR - 3 compatible Logging class that supports multiple handlers that process the actual logging .
494	The Negotiate class provides the content negotiation features for working the request to determine correct language encoding charset and more .
495	The Parser is a simple template parser .
496	The Request class models an HTTP request .
497	The Response class models an HTTP response .
498	The Redirect class provides nice way of working with redirects .
499	The Router class uses a RouteCollection s array of routes and determines the correct Controller and Method to execute .
500	The Security class provides a few handy tools for keeping the site secure most notably the CSRF protection tools .
501	The URI class provides a way to model and manipulate URIs .
502	The Validation class provides tools for validating input data .
503	Displays the commands on the CLI .
504	Pads our string out so that all titles are the same length to nicely line up descriptions .
505	Generate CSV from a query result object
506	Generate XML data from a query result object
507	Can be used by a command to run other commands .
508	Loads the specified seeder and runs it .
509	Value should be within an array of values
510	Equal to or Less than
511	The field is required when any of the other required fields are present in the data .
512	The field is required when all of the other fields are present in the data but not required .
513	Attempts to validate the URI request and determine the controller path .
514	Sets the sub - directory that the controller is in .
515	Set request route
516	Sets the default controller based on the info set in the RouteCollection .
517	Retrieve the file size .
518	Moves a file to a new location .
519	Returns the destination path for the move operation where overwriting is not expected .
520	The static method used during Events to collect data .
521	Returns timeline data formatted for the toolbar .
522	Attempts to locate a file by examining the name for a namespace and looking through the PSR - 4 namespaced files that we know about .
523	Examines a file and returns the fully qualified domain name .
524	Searches through all of the defined namespaces looking for a file . Returns an array of all found locations for the defined file .
525	Ensures a extension is at the end of a filename
526	Find the qualified name of a file according to the namespace of the first matched namespace path .
527	Checks the application folder to see if the file can be found . Only for use with filenames that DO NOT include namespacing .
528	Builds the output based upon a string and any data that has already been set . Cache does not apply because there is no key .
529	Extract first bit of a long string and add ellipsis
530	Sets several pieces of view data at once .
531	Sets a single piece of view data .
532	Renders a section s contents .
533	Used within layout views to include additional views .
534	Logs performance data for rendering a view .
535	Sets another image for this handler to work on . Keeps us from needing to continually instantiate the handler .
536	Make the image resource object if needed
537	Resize the image
538	Rotates the image on the current canvas .
539	Flips an image either horizontally or vertically .
540	Overlays a string of text over the image .
541	Reads the EXIF information from the image and modifies the orientation so that displays correctly in the browser . This is especially an issue with images taken by smartphones who always store the image up - right but set the orientation flag to display it correctly .
542	Retrieve the EXIF information from the image if possible . Returns an array of the information or null if nothing can be found .
543	Combine cropping and resizing into a single command .
544	Run the server
545	Parse a String
546	Parse a tag pair
547	Extracts noparse blocks inserting a hash in its place so that those blocks of the page are not touched by parsing .
548	Re - inserts the noparsed contents back into the template .
549	Parses any conditionals in the code removing blocks that don t pass so we don t try to parse it later .
550	Over - ride the substitution field delimiters .
551	Handles replacing a pseudo - variable with the actual content . Will double - check for escaping brackets .
552	Checks the placeholder the view provided to see if we need to provide any autoescaping .
553	Makes a new plugin available during the parsing of the template .
554	Create Image Resource
555	Returns a single header object . If multiple headers with the same name exist then will return an array of header objects .
556	Determines whether a header exists .
557	Sets a header and it s value .
558	Removes a header from the list of headers we track .
559	Sets the HTTP protocol version .
560	Takes a header name in any case and returns the normal - case version of the header .
561	Configure Session ID regular expression
562	Gets the response response phrase associated with the status code .
563	Set the Link Header
564	Sets the Content Type header for this response with the mime type and optionally the charset .
565	Returns the current body converted to JSON is it isn t already .
566	Retrieves the current body into XML and returns it .
567	Handles conversion of the of the data into the appropriate format and sets the correct Content - Type header for our response .
568	A shortcut method that allows the developer to set all of the cache - control headers in one method call .
569	Sends the output to the browser .
570	Sends the headers of this HTTP request to the browser .
571	Set a cookie
572	Checks to see if the Response has a specified cookie or not .
573	Returns the cookie
574	Sets a cookie to be deleted when the response is sent .
575	Actually sets the cookies .
576	Force a download .
577	Create new configuration instances or return a shared instance
578	Find configuration class and create instance
579	Returns a shared instance of any of the class services .
580	The Autoloader class is the central class that handles our spl_autoload_register method and helper methods .
581	The file locator provides utility methods for looking for non - classes within namespaced folders as well as convenience methods for loading helpers and libraries .
582	Reset shared instances and mocks for testing .
583	Inject mock object for testing .
584	Will scan all psr4 namespaces registered with system to look for new Config \ Services files . Caches a copy of each one then looks for the service method in each returning an instance of the service if available .
585	Get input from the shell using readline or the standard STDIN
586	Asks the user for input .
587	Validate one prompt field at a time
588	Outputs a string to the CLI without any surrounding newlines . Useful for showing repeating elements on a single line .
589	Outputs an error to the CLI using STDERR instead of STDOUT
590	Waits a certain number of seconds optionally showing a wait message and waiting for a key press .
591	Returns the given text with the correct color codes for a foreground and optionally a background color .
592	Takes a string and writes it to the command line wrapping to a maximum width . If no maximum width is specified will wrap to the window s max width .
593	Gets a single command - line option . Returns TRUE if the option exists but doesn t have a value and is simply acting as a flag .
594	Returns a well formatted table
595	Provides a single simple method to return an API response formatted to match the requested format with proper content - type and status code .
596	Used for generic failures that no custom methods exist for .
597	Used after successfully creating a new resource .
598	Used after a resource has been successfully deleted .
599	Used when the client is either didn t send authorization information or had bad authorization credentials . User is encouraged to try again with the proper information .
600	Used when there is a server error .
601	Do whatever processing this filter needs to do . By default it should not return anything during normal execution . However when an abnormal state is found it should return an instance of CodeIgniter \ HTTP \ Response . If it does script execution will end and that Response will be sent back to the client allowing for error pages redirects etc .
602	Ensures that we have a events file ready .
603	Returns an array of listeners for a single event . They are sorted by priority .
604	Removes a single listener from an event .
605	Is this a referral from another site?
606	Set the Platform
607	Set the Browser
608	Set the Robot
609	Set the Mobile Device
610	Field attribute TYPE
611	initialize config .
612	show qrCode on console .
613	init qrCode style .
614	format XML for Content .
615	make a heartbeat every 30 minutes .
616	handle a sync from wechat .
617	log the message .
618	get uuid .
619	show a login qrCode .
620	waiting user to login .
621	login wechat .
622	store config to cache .
623	before init success .
624	after init success .
625	open wechat status notify .
626	download multimedia .
627	get a resource through api .
628	download resource to a default path .
629	check if got a new message .
630	get a message .
631	generate a sync key .
632	print in terminal .
633	print message .
634	send a text message .
635	fetch all contacts through api .
636	create and save contacts to collections .
637	fetch group members .
638	store group members .
639	report while exception .
640	Exception that make vbot couldn t work .
641	Raises an exception when the key type is not the expected type
642	Splits the JWT string into an array
643	Parses the header from a string
644	Parses the claim set from a string
645	Returns the signature from given data
646	Negotiates language with the user s browser through the Accept - Language HTTP header or the user s host address . Language codes are generally in the form ll for a language spoken in only one country or ll - CC for a language spoken in a particular country . For example U . S . English is en - US while British English is en - UK . Portuguese as spoken in Portugal is pt - PT while Brazilian Portuguese is pt - BR .
647	Return all the accepted languages from the browser .
648	Cache the routes separately for each locale .
649	Build the route cache file .
650	Registers app bindings and aliases .
651	Registers route caching commands .
652	Set and return current locale .
653	Returns an URL adapted to the route name and the locale given .
654	Return an array of all supported Locales .
655	Return an array of all supported Locales but in the order the user has specified in the config file . Useful for the language selector .
656	Returns current locale direction .
657	Returns current language .
658	Returns current regional .
659	Check if Locale exists on the supported locales array .
660	Returns the translation key for a given path .
661	Returns the translated route for the path and the url given .
662	Returns the translated route for an url and the attributes given and a locale .
663	Create an url from the uri .
664	Normalize attributes gotten from request parameters .
665	Load the cached routes for the application .
666	Returns the path to the cached routes file for a given locale .
667	encode message set N . B . MessageSets are not preceded by an int32 like other array elements in the protocol .
668	encode signal part
669	encode signal topic
670	decode produce topic pair response
671	decode produce partition pair response
672	decode message set N . B . MessageSets are not preceded by an int32 like other array elements in the protocol .
673	decode message N . B . MessageSets are not preceded by an int32 like other array elements in the protocol .
674	Encapsulation of stream_socket_client
675	Encapsulation of stream_select
676	Unpack a bit integer as big endian long
677	check unpack bit is valid
678	Determines if the computer currently running this code is big endian or little endian .
679	Get kafka api version according to specify kafka broker version
680	Get kafka api text
681	Store a before middleware route and a handling function to be executed when accessed using one of the specified methods .
682	Store a route and a handling function to be executed when accessed using one of the specified methods .
683	Mounts a collection of callbacks onto a base route .
684	Get the request method used taking overrides into account .
685	Return server base Path and define it if isn t defined .
686	Maps a URL pattern to a callback function .
687	Routes the current request .
688	Gets the current route .
689	Checks if a URL matches the route pattern . Also parses named parameters in the URL .
690	Dispatches an event .
691	Gets an assigned callback .
692	Clears an event . If no name is given all events are removed .
693	Executes a chain of method filters .
694	Executes a callback function .
695	Calls a function .
696	Invokes a method .
697	Initialize request properties .
698	Gets the body of the request .
699	Gets the request method .
700	Gets the real remote IP address .
701	Parse query parameters from a URL .
702	Sets the HTTP status of the response .
703	Adds a header to the response .
704	Sets caching headers for the response .
705	Sends a HTTP response .
706	Initializes the framework .
707	Custom error handler . Converts errors into exceptions .
708	Custom exception handler . Logs exceptions .
709	Maps a callback to a framework method .
710	Registers a class to a framework method .
711	Gets a variable .
712	Unsets a variable . If no key is passed in clear all variables .
713	Starts the framework .
714	Stops the framework and outputs the current response .
715	Routes a URL to a callback function .
716	Stops processing and returns a given response .
717	Sends an HTTP 500 response for any errors .
718	Redirects the current request to another URL .
719	Sends a JSON response .
720	Sends a JSONP response .
721	Handles ETag HTTP caching .
722	Handles last modified HTTP caching .
723	Registers a class .
724	Loads a registered class .
725	Gets a single instance of a class .
726	Gets a new instance of a class .
727	Autoloads classes .
728	Adds a directory for autoloading classes .
729	Gets the output of a template .
730	Gets the full path to a template file .
731	Check if graph contains cycle
732	Get average height of graph
733	Collapses array into a one - dimensional one by imploding nested keys with -
734	Find files in path
735	Traverse node and return 1 if node has not been visited yet
736	Get the list of all root nodes
737	Returns the installed packages from the composer . lock file .
738	Advance progress bar
739	Detects ANSI support
740	Process the function if no parameters were found .
741	Set sniff properties and hand off to child class for processing of the token .
742	Initialize the class for the current process .
743	Add a fixable PHPCS message to the output stack as either a warning or an error .
744	Merge a pre - set array with a ruleset provided array .
745	Get the last pointer in a line .
746	Check if this variable is being assigned a value .
747	Check if a particular token is prefixed with a namespace .
748	Check if something is only being sanitized .
749	Check if something is being casted to a safe value .
750	Get the index keys of an array variable .
751	Get the index key of an array variable .
752	Check whether a variable is being compared to another value .
753	Check if a token is inside of an array - value comparison function .
754	Check what type of use statement a token is part of .
755	Get the interpolated variable names from a string .
756	Checks if a function call has parameters .
757	Count the number of parameters a function call has been passed .
758	Get information on a specific parameter passed to a function call .
759	Find the array opener & closer based on a T_ARRAY or T_OPEN_SHORT_ARRAY token .
760	Determine the namespace name an arbitrary token lives in .
761	Get the complete namespace name for a namespace declaration .
762	Check whether a T_CONST token is a class constant declaration .
763	Check whether a T_VARIABLE token is a class property declaration .
764	Check whether the direct wrapping scope of a token is within a limited set of acceptable tokens .
765	Prepare the punctuation regular expression .
766	Transform an arbitrary string to lowercase and replace punctuation and spaces with underscores .
767	Transform a complex string which may contain variable extrapolation .
768	Groups of classes to restrict .
769	Process an arbitrary T_STRING token to determine whether it is one of the target constants .
770	Process the parameters of a matched define function call .
771	Retrieve a list of misspellings based on an array of matched variations on the target word .
772	Callback to process each confirmed key to check value .
773	Pass config data to PHPCS .
774	Get the tab width as passed to PHPCS from the command - line or the ruleset .
775	Check that global variables imported into a function scope using a global statement are not being overruled .
776	Add the error .
777	Set up the regular expressions for each group .
778	Verify is the current token is a function call .
779	Verify if the current token is one of the targetted functions .
780	Handle variable variables defined in the global namespace .
781	Check if a variable name might need a prefix .
782	Validate an array of prefixes as passed through a custom property or via the command line .
783	Record the potential prefix metric .
784	Cache the groups .
785	Validate that a valid value has been received for the alignMultilineItems property .
786	Determine based on the raw parameter value whether a file parameter points to a local data stream .
787	Processes the variable found within a double quoted string .
788	Merge a custom whitelist provided via a custom ruleset with the predefined whitelist if we haven t already .
789	Should the token be ignored ?
790	Determine the line indentation whitespace .
791	Create an indentation string .
792	Throw an error and fix incorrect array alignment .
793	Fix incorrect array alignment .
794	Determine if a range has a falsy value .
795	Check for inconsistencies between single and plural arguments .
796	Check the string itself for problems .
797	Determine if we have a valid classname for the target token .
798	Verify if the current token is one of the targetted classes .
799	See if the classname was found in a namespaced file and if so add the namespace to the classname .
800	Registers the tokens that this sniff wants to listen for .
801	Unserializes and executes a closure .
802	Gets a single message from SQS queue and sets the visibility to reserve message .
803	Closes connection and channel .
804	Validates the namespace .
805	Pushes job into queue .
806	Listens file - queue and runs new jobs . It can be used as daemon process .
807	Executes a job . The command is internal and used to isolate a job execution . Manual usage is not provided .
808	Handles message using child process .
809	Runs all jobs from queue .
810	Takes one message from waiting list and reserves it for handling .
811	Moves expired messages into waiting list .
812	Converts the closure to a job object .
813	Deletes message by ID .
814	Runs worker .
815	Provides public access for handleMessage
816	Sets signal handlers .
817	Checks signals state .
818	Reserves message for execute .
819	Deletes reserved message .
820	Reads the entire document .
821	parseGetElements parses everything in the current sub - tree and returns a an array of elements .
822	Parses all elements below the current element .
823	Reads all text below the current element and returns this as a string .
824	Parses the current XML element .
825	Grabs all the attributes from the current element and returns them as a key - value array .
826	Returns the function that should be used to parse the element identified by it s clark - notation name .
827	Create a new context .
828	Restore the previous context .
829	Returns a fresh xml writer .
830	Parses a document in full .
831	Parses a document in full and specify what the expected root element name is .
832	Generates an XML document in one go .
833	Map an xml element to a PHP class .
834	Writes a value object .
835	Parses a clark - notation string and returns the namespace and element name components .
836	The deserialize method is called during xml parsing .
837	This method is called during xml parsing .
838	Opens a new element .
839	Write a full element tag and it s contents .
840	Writes a list of attributes .
841	Writes a new attribute .
842	Return all relations from a fully qualified model class name .
843	Validate the job name .
844	Validate the command .
845	Transform a CronJon into a ShellJob .
846	Sets the current span in scope until the returned callable is called . It is a programming error to drop or never close the result .
847	Completes and reports the span
848	Returns the current span in scope or null if there isn t one .
849	Converts the context as - is to a Span object
850	Starts the span with an implicit timestamp .
851	Sets the string name for the logical operation this span represents .
852	Associates an event that explains latency with the current system time .
853	For a client span this would be the server s address .
854	Generates a new CSRF token and attaches it to the Request Object
855	Get token from storage
856	Get the most recent key pair from storage .
857	Remove the oldest tokens from the storage array so that there are never more than storageLimit tokens in the array .
858	Quickly create an already configured sanitizer using the default builder .
859	Set attributes from a DOM node to a sanitized node .
860	Read the value of a DOMNode attribute .
861	Finds the default entity to display when the backend index is not defined explicitly .
862	Finds the default menu item to display when browsing the backend index .
863	It returns the short type name of the given FQCN . If the type name is not found it returns the given value .
864	Resolves from type options of field
865	Utility method which initializes the configuration of the entity on which the user is performing the action .
866	The method that returns the values displayed by an autocomplete field based on the user s input .
867	The method that is executed when the user performs a list action on an entity .
868	The method that is executed when the user performs a edit action on an entity .
869	The method that is executed when the user performs a show action on an entity .
870	The method that is executed when the user performs a new action on an entity .
871	The method that is executed when the user performs a delete action to remove any entity .
872	The method that is executed when the user performs a query on an entity .
873	The method that is executed when the user performs a batch action to any entity .
874	It updates the value of some property of some entity to the new given value .
875	Performs a database query to get all the records related to the given entity . It supports pagination and field sorting .
876	Creates Query Builder instance for all the records .
877	Performs a database query based on the search query provided by the user . It supports pagination and field sorting .
878	Creates Query Builder instance for search query .
879	Creates the form builder of the form used to create or edit the given entity .
880	Retrieves the list of form options before sending them to the form builder . This allows adding dynamic logic to the default form options .
881	Creates the form object used to create or edit the given entity .
882	Creates the form used to delete an entity . It must be a form because the deletion of the entity are always performed with the DELETE HTTP method which requires a form to work in the current browsers .
883	Generates the backend homepage and redirects to it .
884	Exchange default admin controller by custom entity admin controller .
885	Normalizes the different shortcut notations of the menu config to simplify further processing .
886	Returns the entire configuration of the given entity .
887	Checks whether the given action is enabled for the given entity .
888	Returns the full action configuration for the given entity and view .
889	Remove this filter when the Symfony s requirement is equal or greater than 4 . 2 and use the built - in trans filter instead with a %count% parameter .
890	Creates a Doctrine ORM paginator for the given query builder .
891	It processes the given backend configuration to generate the fully processed configuration used in the application .
892	Adds to the request some attributes with useful information such as the current entity and the selected item if any .
893	Looks for the object that corresponds to the selected id of the current entity .
894	Returns a closure normalizing the form html attributes .
895	Takes the entity metadata introspected via Doctrine and completes its contents to simplify data processing for the rest of the application .
896	Returns the built - in actions defined by EasyAdmin for the given view . This allows to provide some nice defaults for backends that don t define their own actions .
897	Deal with form constraint violations . This method has to be executed with a negative priority to make sure that the validation process is done .
898	Finds the values of the given entity which match the query provided .
899	This method allows to define the entity configuration is several files . Without this Symfony doesn t merge correctly the entities config key defined in different files .
900	Transforms the two simple configuration formats into the full expanded configuration . This allows to reuse the same method to process any of the different configuration formats .
901	The name of the entity is included in the URLs of the backend to define the entity used to perform the operations . Obviously the entity name must be unique to identify entities unequivocally .
902	Normalizes the view configuration when some of them doesn t define any configuration .
903	Merges the form configuration recursively from the form view to the edit and new views . It processes the configuration of the form fields in a special way to keep all their configuration and allow overriding and removing of fields .
904	Creates the query builder used to get all the records displayed by the list view .
905	Checking if the field name contains a . is not enough to decide if it s a Doctrine association . This also happens when using embedded classes so the embeddedClasses property from Doctrine class metadata must be checked too .
906	This methods makes some minor tweaks in fields configuration to improve the user experience .
907	Returns the list of excluded field names for the given view .
908	Filters a list of fields excluding the given list of field names and field types .
909	run a command . it is support windows
910	delete or drop
911	DESCRIBE or desc or DELETE
912	UPDATE | USE
913	this is for the String .
914	Builds a loggerClosure to be called from inside the Provider to update the command line .
915	Log exception if logger defined for persister belonging to the current listener otherwise re - throw .
916	Builds TypeConfig objects for each type .
917	Should return all configuration available from the data source .
918	Gets all registered providers .
919	Gets all providers for an index .
920	Gets the provider for an index and type .
921	Adds knp paging sort to query .
922	Builds mappings for an entire index .
923	Builds mappings for an entire index template .
924	Builds mappings for a single type .
925	Fixes any properties and applies basic defaults for any field that does not have required options .
926	Logs a query .
927	Transforms an object to an elastica document with just the identifier set .
928	Returns the number of results .
929	Returns the paginated results .
930	Delete all template indexes
931	Gets an index by its name .
932	Gets the persister for an index and type .
933	Recreates an index populates its types and refreshes the index .
934	Refreshes an index .
935	Transforms an object into an elastica object having the required keys .
936	transform a nested document or an object property into an array of ElasticaDocument .
937	Attempts to convert any type to a string or an array of strings .
938	Transforms the given object to an elastica document .
939	Retrieves a query builder to be used for querying by identifiers .
940	Gets an index template by its name .
941	Deletes and recreates all indexes .
942	Deletes and recreates the named index . If populating creates a new index with a randomised name for an alias to be set after population .
943	Deletes and recreates a mapping type for the named index .
944	Switching aliases .
945	Loads the configured index finders .
946	Loads the optional provider and finder for a type .
947	Creates and loads an ElasticaToModelTransformer .
948	Creates and loads an object persister for a type .
949	Loads a pager provider for a type .
950	Loads doctrine listeners to handle indexing of new or updated objects .
951	Map Elastica to Doctrine events for the current driver .
952	Loads a Type specific Finder .
953	Loads the index manager .
954	Load index template manager
955	Makes sure a specific driver has been loaded .
956	Loads and configures the serializer prototype .
957	Creates a default manager alias for defined default manager or the first loaded driver .
958	Returns the array node used for dynamic_templates .
959	Returns the array node used for types .
960	Returns the array node used for _id .
961	Returns the array node used for _source .
962	Returns the array node used for _routing .
963	Returns the array node used for _parent .
964	Returns the array node used for _all .
965	Adds the configuration for the indexes key .
966	Adds the configuration for the index_templates key .
967	Transforms an array of elastica objects into an array of model objects fetched from the doctrine repository .
968	Return whether the object is indexable with respect to the callback .
969	Builds and initialises a callback .
970	Processes a string expression into an Expression .
971	Retreives a cached callback or creates a new callback if one is not found .
972	Returns the variable name to be used to access the object when using the ExpressionLanguage component to parse and evaluate an expression .
973	Sets the randomised root name for an index .
974	Switches an index to become the new target for an alias . Only applies for indexes that are set to use aliases .
975	Builds an ElasticSearch request to rename or create an alias .
976	Cleans up an index when we encounter a failure to rename the alias .
977	Close an index .
978	Returns the name of a single index that an alias points to or throws an exception if there is more than one .
979	Log the query if we have an instance of ElasticaLogger .
980	Looks for new objects that should be indexed .
981	Looks for objects being updated that should be indexed or removed from the index .
982	Delete objects preRemove instead of postRemove so that we have access to the id . Because this is called preRemove first check that the entity is managed by Doctrine .
983	Persist scheduled objects to ElasticSearch After persisting clear the scheduled queue to prevent multiple data updates when using multiple flush calls .
984	Record the specified identifier to delete . Do not need to entire object .
985	Checks if the object is indexable or not .
986	Returns custom repository if one specified otherwise returns a basic repository .
987	Creates an elastica document with the id of the doctrine object as id .
988	Return repository for entity .
989	Make a new Hashids client .
990	Register the factory class .
991	Verify if the hash of the given parameter is correct
992	Create a Guzzle client .
993	Adds a cookie to the current cookie jar .
994	Adds Cookie headers to the supplied request .
995	Removes expired cookies .
996	Create an unique identifier for the cookie . Two cookies with the same identifier may have different values .
997	Add a single HTTP header line .
998	Add HTTP headers . The input array is all the header lines from the HTTP message . Optionally including the status line .
999	Populates uri method and entityBody used to generate the Authentication header using the specified request object . Appends the Authentication header if it is present and has been able to be calculated .
1000	Sets the options to be used by this class .
1001	Returns either the current value of clientNonce or generates a new value if clientNonce is null . Also increments nonceCount .
1002	Calculates the value of HA1 according to RFC 2617 and RFC 2069 .
1003	Calculates the value of HA2 according to RFC 2617 and RFC 2069 .
1004	Returns the full Authentication header for use in authenticating the client with either Digest or Basic authentication .
1005	Calculates the value of response according to RFC 2617 and RFC 2069 .
1006	Returns the Quality of Protection to be used when authenticating with the server .
1007	Calculates the hash for a given value using the algorithm specified by the server .
1008	Parses the Authentication - Info header received from the server and calls the relevant setter method on each variable received .
1009	Parses a string of name = value pairs separated by commas and returns and array with the name as the index .
1010	Parses the WWW - Authenticate header received from the server and calls the relevant setter method on each variable received .
1011	Sets the hashing algorithm to be used . Currently only uses MD5 specified by either MD5 or MD5 - sess . RFCs are currently in draft stage for the proposal of SHA - 256 and SHA - 512 - 256 . Support will be added once the RFC leaves the draft stage .
1012	Sets the HTTP method being used for the request .
1013	If a string contains quotation marks at either end this function will strip them . Otherwise it will remain unchanged .
1014	Adds parameters to the existing ones .
1015	Convert from Buzz style headers to PSR style .
1016	Convert from PSR style headers to Buzz style .
1017	Populates the supplied response with the response for the supplied request .
1018	This is a blocking function call .
1019	See if any connection is ready to be processed .
1020	Create a multi curl handle and add some properties to it .
1021	If we got no requests in the queue do a clean up to save some memory .
1022	Returns true if the current cookie matches the supplied request .
1023	Returns true of the current cookie has expired .
1024	Returns true if the current cookie matches the supplied domain .
1025	Returns true if the current cookie matches the supplied path .
1026	Populates the current cookie with data from the supplied Set - Cookie header .
1027	Release a cUrl resource . This function is from Guzzle .
1028	Prepares a cURL resource to send a request .
1029	Sets options on a cURL resource based on a request .
1030	Send a PSR7 request .
1031	Records an entry in the journal .
1032	Run the Command to create the tmp image file
1033	Add a cover page object to the output
1034	Add a TOC object to the output
1035	Run the Command to create the tmp PDF file
1036	This method creates a temporary file if the passed argument is neither a File instance or URL nor contains XML or HTML and is also not a valid file name .
1037	Create a Guzzle client for future usage .
1038	Create a middleware stack with given middleware .
1039	Create the request to be sent .
1040	Create promise of sending HTTP request with the specified parameters .
1041	Generate the request options using the given service options and stored information .
1042	Creates the promise to send the context .
1043	Throws ServiceException if the received status code is not expected .
1044	Adds HTTP POST parameter to the specified
1045	Adds metadata elements to headers array
1046	Adds the header that indicates the location mode to the response header .
1047	Validates if properties is valid or not .
1048	Gets property value and if the property name is not found return null .
1049	Sets property value .
1050	Sets entity property .
1051	Creates new entity property .
1052	Checks if the entity object is valid or not . Valid means the partition and row key exists for this entity along with the timestamp .
1053	Creates GetTableResult from HTTP response body .
1054	Computes the authorization signature for blob and queue shared key .
1055	Returns authorization header to be included in the request .
1056	Computes canonicalized headers for headers array .
1057	Computes canonicalized resources from URL using Table formar
1058	Computes canonicalized resources from URL .
1059	Converts this signed identifiers to XML representation .
1060	Construct the signed identifiers from a given parsed XML in array representation .
1061	Add a signed identifier to the ACL .
1062	Remove the signed identifier with given ID .
1063	Sets the batch operations .
1064	Adds operation to the batch operations .
1065	Adds insertEntity operation .
1066	Adds deleteEntity operation .
1067	Creates CopyFileResult object from parsed response header .
1068	Creates QueueMessage object from parsed XML response of ListMessages .
1069	Creates QueueMessage object from parsed XML response of PeekMessages .
1070	Creates QueueMessage object from parsed XML response of createMessage .
1071	Initializes static members of the class .
1072	Returns a StorageServiceSettings with development storage credentials using the specified proxy Uri .
1073	Gets a StorageServiceSettings object that references the development storage account .
1074	Gets the default service endpoint using the specified protocol and account name .
1075	Creates StorageServiceSettings object given endpoints uri .
1076	Creates a StorageServiceSettings object from the given connection string .
1077	Creates a StorageServiceSettings object from the given connection string . Note this is only for AAD connection string it should at least contain the account name .
1078	Given array of MIME parts in raw string this function converts them into MIME representation .
1079	Parses given mime HTTP response body into array . Each array element represents a change set result .
1080	Creates ListSharesResult object from parsed XML response .
1081	Sets shares .
1082	This function does the real retry job .
1083	Apply and operation between two filters
1084	Apply or operation on the passed filers
1085	Apply eq operation on the passed filers
1086	Apply ne operation on the passed filers
1087	Apply ge operation on the passed filers
1088	Apply gt operation on the passed filers
1089	Apply lt operation on the passed filers
1090	Apply le operation on the passed filers
1091	Setter for location
1092	Unserializes given serialized string to array .
1093	Creates PeekMessagesResult object from parsed XML response .
1094	Create GetEntityResult object from HTTP response parts .
1095	Creates contexts for batch operations .
1096	Creates operation context for the API .
1097	Creates MIME part body for batch API .
1098	Constructs HTTP call context for deleteEntity API .
1099	Constructs HTTP call context for updateEntity mergeEntity insertOrReplaceEntity and insertOrMergeEntity .
1100	Constructs HTTP call context for insertEntity API .
1101	Constructs URI path for entity .
1102	Creates a promie that does the actual work for update and merge entity APIs .
1103	Adds query object to the query parameter array
1104	Encodes OData URI values
1105	Creates promise to query the tables in the given storage account .
1106	Creates new table in the storage account
1107	Creates promise to create new table in the storage account
1108	Gets the table .
1109	Creates the promise to get the table .
1110	Deletes the specified table and any data it contains .
1111	Creates promise to delete the specified table and any data it contains .
1112	Quries entities for the given table name
1113	Updates an existing entity or inserts a new entity if it does not exist in the table .
1114	Creates promise to update an existing entity or inserts a new entity if it does not exist in the table .
1115	Replaces an existing entity or inserts a new entity if it does not exist in the table .
1116	Creates a promise to replace an existing entity or inserts a new entity if it does not exist in the table .
1117	Updates an existing entity in a table . The Update Entity operation replaces the entire entity and can be used to remove properties .
1118	Creates promise to update an existing entity in a table . The Update Entity operation replaces the entire entity and can be used to remove properties .
1119	Updates an existing entity by updating the entity s properties . This operation does not replace the existing entity as the updateEntity operation does .
1120	Creates promise to update an existing entity by updating the entity s properties . This operation does not replace the existing entity as the updateEntity operation does .
1121	Deletes an existing entity in a table .
1122	Creates promise to delete an existing entity in a table .
1123	Gets table entity .
1124	Creates promise to get table entity .
1125	Does batch of operations on the table service .
1126	Creates promise that does batch of operations on the table service .
1127	Creates ListDirectoriesAndFilesResult object from parsed XML response .
1128	Sets Directories .
1129	Sets files .
1130	Creates a Directory object using the parsed array .
1131	Creates UpdateEntityResult from HTTP response headers .
1132	Sets queryParams .
1133	Sets statusCodes .
1134	Removes header from the HTTP request headers .
1135	Add an entry to history
1136	Append the new entry to saved file path .
1137	Creates new QueryTablesResult object
1138	Creates ListMessagesResult object from parsed XML response .
1139	Sets queueMessages field .
1140	Initializes the connection string source providers .
1141	Throws an exception if the string is not of a valid hostname .
1142	Throws exception if the string is not of a valid uri .
1143	Validate if method exists in object
1144	Validate if string is date formatted
1145	Validate if the provided array has key throw exception otherwise .
1146	Constructs the range string according to the set start and end
1147	Creates promise to list all queues in the storage account .
1148	Clears all messages from the queue .
1149	Adds a message to the queue and optionally sets a visibility timeout for the message .
1150	Creates promise to add a message to the queue and optionally sets a visibility timeout for the message .
1151	Creates a new queue under the storage account .
1152	Creates promise to create a new queue under the storage account .
1153	Deletes a specified message from the queue .
1154	Creates promise to delete a specified message from the queue .
1155	Deletes a queue .
1156	Creates promise to delete a queue .
1157	Returns queue properties including user - defined metadata .
1158	Creates promise to return queue properties including user - defined metadata .
1159	Lists all messages in the queue .
1160	Creates promise to list all messages in the queue .
1161	Retrieves a message from the front of the queue without changing the message visibility .
1162	Creates promise to retrieve a message from the front of the queue without changing the message visibility .
1163	Generates a shared access signature at the account level .
1164	Validates and sanitizes the signed service parameter
1165	Validates and sanitizes the signed resource type parameter
1166	Validates and sanitizes the signed permissions parameter
1167	Validates and sanitizes the signed protocol parameter
1168	Removes duplicate characters from a string
1169	Generate the canonical resource using the given account name service type and resource .
1170	Error message to be parsed .
1171	Gets the request ID of the failure .
1172	Gets the Date of the failure .
1173	Sets middlewares .
1174	Validate if the given middleware is of callable or IMiddleware .
1175	Parses the connection string .
1176	Generates an invalid connection string exception with the detailed error message .
1177	Extracts key at the current position .
1178	Extracts the string until the given quotation mark .
1179	Skips specified operator .
1180	Parses the given array into signed identifiers
1181	Add the provided headers the date then sign the request using the authentication scheme and return it .
1182	Creates a setting value condition using the passed predicate .
1183	Creates a setting value condition that validates it is one of the passed valid values .
1184	Tests to see if a given list of settings matches a set of filters exactly .
1185	Sets entity next row key .
1186	Sets entity next partition key .
1187	Converts the type to string if it s empty and validates the type .
1188	Validates that the value associated with the EDM type is valid .
1189	Serializes EDM value into proper value for sending it to Windows Azure .
1190	Serializes EDM value into proper value to be used in query .
1191	Converts the value into its proper type .
1192	Creates ServiceProperties object from parsed XML response .
1193	Gets the array that contains all the CORSes .
1194	Initializes the default sources .
1195	Constructs array of tables from HTTP response body .
1196	Constructs JSON representation for entity .
1197	Constructs array of entities from HTTP response body .
1198	Sets start .
1199	Validate the permission against its corresponding allowed permissions
1200	Creates URI path for file or share .
1201	Helper method to create promise for getShareProperties API call .
1202	Helper method to create promise for setShareProperties API call .
1203	Create a promise to return a list of the shares under the specified account
1204	Creates a new share in the given storage account .
1205	Creates promise to create a new share in the given storage account .
1206	Deletes a share in the given storage account .
1207	Returns all properties and metadata on the share .
1208	Sets quota of the share .
1209	Creates promise to set quota the share .
1210	Returns only user - defined metadata for the specified share .
1211	Updates metadata of the share .
1212	Creates promise to update metadata headers on the share .
1213	Sets the ACL and any share - level access policies for the share .
1214	Creates promise to set the ACL and any share - level access policies for the share .
1215	List directories and files under specified path .
1216	Creates promise to list directories and files under specified path .
1217	Creates a new directory in the given share and path .
1218	Creates a promise to create a new directory in the given share and path .
1219	Deletes a directory in the given share and path .
1220	Gets a directory s properties from the given share and path .
1221	Creates promise to get a directory s properties from the given share and path .
1222	Gets a directory s metadata from the given share and path .
1223	Sets a directory s metadata from the given share and path .
1224	Create a new file .
1225	Creates promise to create a new file .
1226	Deletes a file in the given share and path .
1227	Creates a promise to delete a new file in the given share and path .
1228	Reads or downloads a file from the server including its metadata and properties .
1229	Creates promise to read or download a file from the server including its metadata and properties .
1230	Gets a file s properties from the given share and path .
1231	Creates promise to get a file s properties from the given share and path .
1232	Sets properties on the file .
1233	Creates promise to set properties on the file .
1234	Gets a file s metadata from the given share and path .
1235	Sets a file s metadata from the given share and path .
1236	Creates promise to set a file s metadata from the given share and path .
1237	Writes range of bytes to a file . Range can be at most 4MB in length .
1238	Creates promise to write range of bytes to a file . Range can be at most 4MB in length .
1239	Creates a file from a provided content .
1240	Creates a promise to create a file from a provided content .
1241	Clears range of bytes of a file . If the specified range is not 512 - byte aligned the operation will write zeros to the start or end of the range that is not 512 - byte aligned and free the rest of the range inside that is 512 - byte aligned .
1242	Creates promise to clear range of bytes of a file . If the specified range is not 512 - byte aligned the operation will write zeros to the start or end of the range that is not 512 - byte aligned and free the rest of the range inside that is 512 - byte aligned .
1243	Lists range of bytes of a file .
1244	Creates promise to list range of bytes of a file .
1245	Abort a file copy operation
1246	Creates promise to abort a file copy operation
1247	Sets operation type .
1248	Adds or sets parameter for the operation .
1249	Creates a array of responses from the batch response body .
1250	Compares between two responses by Content - ID header .
1251	Creates BatchResult object .
1252	Gets the attributes of a specified object if get attributes method is exposed .
1253	Serializes given array . The array indices must be string to use them as as element name .
1254	Create an instance with parsed XML response with CORS root .
1255	Creates promise to get the properties of the service .
1256	Sets the properties of the service .
1257	Creates the promise to set the properties of the service .
1258	Creates promise that retrieves statistics related to replication for the service . The operation will only be sent to secondary location endpoint .
1259	Creates ListQueuesResult object from parsed XML response .
1260	Sets queues .
1261	Parse secondary endpoint url string from a primary endpoint url .
1262	Serializes given array into xml . The array indices must be string to use them as XML tags .
1263	Converts string into boolean value .
1264	Converts a given date string into \ DateTime object
1265	Generate ISO 8601 compliant date string in UTC time zone
1266	Converts a string to a \ DateTime object . Returns false on failure .
1267	Convert base 256 number to decimal number .
1268	Check if all the bytes are zero .
1269	Append the delimiter to the string . The delimiter will not be added if the string already ends with this delimiter .
1270	Static function used to determine if the request is performed against secondary endpoint .
1271	Gets the location value from the headers .
1272	Calculates the content MD5 which is base64 encoded . This should be align with the server calculated MD5 .
1273	Validate if the resource type is for the class .
1274	Creates an instance with the given response headers .
1275	Create the retry handler for the Guzzle client according to the given attributes .
1276	Create the retry decider for the retry handler . It will return a callable that accepts the number of retries the request the response and the exception and return the decision for a retry .
1277	Decide if the given status code indicate the request should be retried .
1278	Adds optional query parameter .
1279	Adds optional header .
1280	Creates GetFileResult from getFile call .
1281	Serialize the message headers .
1282	Serialize the request exception .
1283	Creates CreateMessageResult object from parsed XML response .
1284	Create InsertEntityResult object from HTTP response parts .
1285	Creates new QueryEntitiesResult instance .
1286	Convert a http headers array into an uniformed format for further process
1287	Creates a File object using the parsed array .
1288	Apply the middlewares to the handler .
1289	Overrides Fractal s getter for available includes .
1290	Overrides Fractal s method for including a relation .
1291	Resolve scoped includes for the given scope .
1292	Set the error code and message .
1293	Add additional data to the error .
1294	Set the error serializer .
1295	Get the serialized response output .
1296	Make a resource from the given data and transformer and set the resource key .
1297	Manually set the cursor on the resource .
1298	Manually set the paginator on the resource .
1299	Include relations to the transform .
1300	Exclude relations from the transform .
1301	Filter fields to output using sparse fieldsets .
1302	Set the serializer .
1303	Transform and serialize the data and return the transformed array .
1304	Prepare requested relations for the transformation .
1305	Eager load all requested relations except the ones defined as an include method in the transformers . We also strip away any parameters from the relation name and normalize relations by swapping null constraints to empty closures .
1306	Format pagination data .
1307	Format cursor data .
1308	Merge includes into data .
1309	Register a transformable to resource key binding .
1310	Resolve a resource key from the given data .
1311	Resolve a transformable item from the given data .
1312	Resolve a transformer from a class name string .
1313	Render an exception into an HTTP response .
1314	Make an error array from the given error code and message .
1315	Transform the given resource and serialize the data with the given serializer .
1316	Parse the transformation options .
1317	Parse the fieldsets for Fractal .
1318	Parse the given fieldset and append any related resource keys .
1319	Resolve included segments that are a direct child to the given resource key .
1320	Register a message mapped to an error code .
1321	Resolve a message from the given error code .
1322	Clean the data in the given array .
1323	Register a transformable to transformer binding .
1324	Resolve a transformer from the given data .
1325	Resolve a transformer from the transformable element .
1326	Register Laravel bindings .
1327	Register Lumen bindings .
1328	Decorate response factories .
1329	Register serializer bindings .
1330	Register error bindings .
1331	Register Fractal bindings .
1332	Register transformer bindings .
1333	Register transformation bindings .
1334	Bootstrap the Laravel application .
1335	Set the paginator s underlying collection .
1336	Format the error data .
1337	Get a list of whitelisted relations that are requested including nested relations .
1338	Get a list of default relations including nested relations .
1339	Extract available root relations from the given list of relations .
1340	Extract all nested relations under a given identifier .
1341	Wrap the identifier of each relation of the given list of nested relations with the parent relation identifier using dot notation .
1342	Applies any query constraints defined in the transformer to the list of relaations .
1343	Resolve a query constraint for a given relation identifier .
1344	Resolve a relation from a model instance and an identifier .
1345	Resolve a list of transformers from a list of relations mapped to transformers .
1346	Make a resource .
1347	Include a related resource .
1348	Include a related resource from a model and cache the resource type for following calls .
1349	Indicates if the resource should be cached .
1350	Make resource from the given data .
1351	Make resource from the given resource .
1352	Instatiate a new resource instance .
1353	Indicates if the data belongs to a collection resource .
1354	Resolve a resource key .
1355	Decorate the response with the given decorator .
1356	Respond with a successful response .
1357	Normalize the data for a resource .
1358	Normalize a relationship .
1359	Set resource data for the transformation .
1360	Convert an exception to another exception
1361	Convert a default exception to an API exception .
1362	Render an error response from an API exception .
1363	Make a new transformation to transform data without serializing .
1364	Configure the terminal to work with CliMenu
1365	Add multiple Items to the menu
1366	Set Items of the menu
1367	Set the selected pointer to the first selectable item
1368	Adds a custom control mapping
1369	Removes a custom control mapping
1370	Display menu and capture input
1371	Retrieve the item the user actually selected
1372	Execute the current item
1373	If true we clear the whole terminal screen useful for example when reducing the width of the menu to not leave leftovers of the previous wider menu .
1374	Draw the menu to STDOUT
1375	Draw a menu item
1376	Close the menu
1377	Select default item
1378	Is there an item with this index and can it be selected?
1379	Set the item index which should be selected . If the item does not exist then throw an exception .
1380	Get the currently selected item - if no items are selectable then throw an exception .
1381	Minimal multi - byte wordwrap implementation which also takes break length into consideration
1382	Generates the ansi escape sequence to set the colours
1383	Calculate the contents width
1384	Get padding for right had side of content
1385	Shorthand function to set all borders values at once
1386	Flash a message on top of the menu which disappears on any keystroke .
1387	Calculate the co - ordinates to write the messages
1388	Write an empty row
1389	Write some text at a particular column
1390	Set the raw string of text
1391	Calculate the length of the art
1392	Display confirmation with a button with the given text
1393	Retrieve or build the named connection .
1394	Make a new connection .
1395	Get the configuration for a named connection .
1396	Compresses the input byte array into stream .
1397	Test whether a given option has been seen .
1398	Define additional command - line arguments . These are appended to those defined when the constructor was called .
1399	Define full set of command - line arguments . These replace any currently defined .
1400	Define multiple configuration options from an associative array . These are not program options but properties to configure the behavior of Zend_Console_Getopt .
1401	Define additional option rules . These are appended to the rules defined when the constructor was called .
1402	Return the current set of options and parameters seen as a string .
1403	Return the current set of options and parameters seen as an array of canonical options and parameters .
1404	Return the current set of options and parameters seen in Json format .
1405	Return the current set of options and parameters seen in XML format .
1406	Return the state of the option seen on the command line of the current application invocation .
1407	Return a useful option reference formatted for display in an error message .
1408	Define aliases for options .
1409	Define help messages for options .
1410	Parse command - line arguments and find both long and short options .
1411	Parse command - line arguments for short options . Short options are those preceded by a single - character . Short options may be clustered .
1412	Parse command - line arguments for a single option .
1413	Define legal options using the gnu - style format .
1414	Define legal options using the Zend - style format .
1415	Return the completed signed Authorization Header
1416	Prepare the base String for OAuth 1 to sign
1417	Helper method to format the HTTP method
1418	Set a random nonce for the signature
1419	Add all OAuth query paraemters to the signature string string
1420	Get SQL query specified by object s members
1421	A static factory to create Http Client .
1422	Gets the log destination folder
1423	Logs the Platform Request to Disk .
1424	Verifies if operation is available for some entity
1425	Prepare service class reflection
1426	Return WSDL as XML string
1427	Copy given file to publicSchemaPath
1428	Cast numeric empty value to string
1429	Reads the configuration from the config file and converts it to custom config objects which the end developer will use to get or set the properties .
1430	Initializes API Entity Rules
1431	Returns array in a OperationControlList rules format from XML
1432	Initialize OAuth Settings from Simple XML Reading from SDK . config or specific file rightnow the default OAuth module is OAuth 1 .
1433	Initialize Compression Serialization format Settings from Simple XML Reading from SDK . config
1434	Initialize BaseURL and log Settings from Simple XML Reading from SDK . config
1435	Gets the List of entity value with particular key
1436	Validates the input string is a well formatted xml string
1437	Verifies current settigns
1438	Get all WebhooksService Class under WebhooksService directory
1439	When given a WehbooksService name check if the given class name is defined on the WehbooksService directory
1440	Return array of options suitable for using with SoapServer constructor
1441	Check for valid URN
1442	Attach a function as a server method
1443	Attach a class to a server
1444	Attach an object to a server
1445	Return a server definition array
1446	Set server persistence
1447	Get SoapServer object
1448	Handle a request
1449	Deregister a fault exception from the fault exception stack
1450	Generate a server fault
1451	Throw PHP errors as SoapFaults
1452	Return the OAuth 2 Access Token Obj from the login helper .
1453	Step 1 of OAuth 2 protocol . Return the OAuth 2 Authorization URL .
1454	Get a new access token based on the refresh token
1455	Provide OAuth 1 token generation for OAuth 2 token . This function currently is not available on QUickBooks Online yet .
1456	Parse the JSON Body to store the information to an OAuth 2 Access Token
1457	A helper function to check Null value
1458	Generate Authorization Header based on Client ID and Client Serect
1459	Generate header for refresh Token
1460	Handle possible errors and react
1461	Support json_last_error_msg in PHP 5 . 2
1462	Converts stdClass objects into object with specified type It tries to learn type from JSON responce
1463	Serializes the specified entity .
1464	The input will always be an asscoiate array So we will judge based on this two situration
1465	Add a complex type by recursivly using all the class properties fetched via Reflection .
1466	Ger WSDL file contents
1467	Add bindings to WSDL
1468	Add port type
1469	Add XML Schema types
1470	Add operations to binding
1471	Add Port operations
1472	Return true if given type is local false in case the type is not from xsd or tns namespaces
1473	Add SOAP Service
1474	Return target namespace for given DOMXPath object
1475	Return array of namespaces of the document
1476	Save generated classes to directory
1477	Load includes in XML Schema
1478	Convert XSD to XML suitable for further processing
1479	Save PHP files to directory structure
1480	Convert XML URI to PHP complient namespace
1481	Set the baseURL associated with this Acess Token
1482	Return the number of seconds for refresh token The implementation of Quickbooks Online OAuth 2 always return an 8726400 seconds refresh token . This method is not useful now
1483	Return the number of seconds for access token The implementation of Quickbooks Online OAuth 2 always return an one hour access token . This method is not useful
1484	Return the refresh Token
1485	Return the access Token
1486	Update an access token after creating a new access token or making a refresh tokan API call
1487	Marshall a POPO object to be XML
1488	Unmarshall XML into a POPO object presumably the XML came from an IPP v3 API call
1489	Parse an XML string into an array of IPPIntuitEntity objects
1490	set options for curl
1491	Set the curl TLS Version and check if TLS 1 . 2 is supported
1492	Handles Exception thrown to the user .
1493	Verifies type and creates entity object
1494	Returns order list of possible valid names of object type
1495	Finilizes created metadata description with few more info
1496	Unmarshal XML string to corresponding PHP binding
1497	Gets the serializer mechanism using the service context and the depending on the request and response .
1498	Gets the compression mechanism using the service context and the depending on the request and response .
1499	Gets the Request Response Logging mechanism .
1500	Connect a complex type to a given strategy .
1501	Return default strategy of this composite
1502	Return specific strategy or the default strategy of this type .
1503	Create a complex type based on a strategy
1504	Create reflection based on class name
1505	Collect comments for defined properties . It will be used to extract meta data
1506	Creates new instance of target class with specified values It also adjusts any nested type based on suplied metadata (
1507	Converts object values into domain model entities . This function is array - compatible version of
1508	Creates instance of specified type and returns it as result .
1509	Returns true if value can be converted into domain model instance
1510	Converts value into domain model object
1511	Returns metadata description of property from model
1512	Set the corresponding settings for the dataService based on ServiceContext
1513	Set the SyncRest Handler for the DataService . If the client Name changed the underlying Client that SyncRestHandler used will also changed .
1514	Set a new directory for request and response log
1515	Set a new Minor Version
1516	Disable the logging function
1517	Enable the logging function
1518	The client Name can be either curl guzzle or guzzlehttp .
1519	New Static function for static Reading from Config or Passing Array The config needs to include
1520	After the ServiceContext is complete also set the LoginHelper based on the ServiceContext .
1521	Update the OAuth 2 Token that will be used for API calls later .
1522	Setups serializers objects for responces and requests based on service context
1523	Updates an entity under the specified realm . The realm must be set in the context .
1524	Creates an entity under the specified realm . The realm must be set in the context .
1525	Deletes an entity under the specified realm . The realm must be set in the context .
1526	Uploads an attachment to an Entity on QuickBooks Online . For security reason text file is not supported for uploading .
1527	Sends entity by email for entities that have this operation
1528	Retrieves specified entities based passed page number and page size and query
1529	Append the Pagination Data to the Query string if it is not appended
1530	Retrieves all entities by name
1531	Returns List of entities changed after certain time .
1532	Serializes oblect into specified format
1533	Returns post request depends on configuration and entity rule jsonOnly
1534	Wraps and returns RequestParameters object
1535	Methods provides workaround to successfully process TaxService response
1536	Returns PDF filename based on entity type and id
1537	Simple verification for entities which can be returned as PDF
1538	Creates new batch
1539	Parse input date - time string into unix timestamp
1540	Checks if input string is a valid timestamp or not
1541	Verifies input and returns unix timestamp
1542	Get the Company Information
1543	Returns current rules for what operation is supported and what is not for QuickBooks Online API entity
1544	A helper method to get Access Token Key . People may have a typo on the key name
1545	A helper method to get Refresh Token Key . People may have a typo on the key name
1546	A helper method to get redirect URL . People may have a typo on the key name
1547	Moves file from temp location to specified folder and name
1548	Creates filename based on name and prefix . It generates uniqid - like string if name is ommited
1549	generate Error from OAuth Exception
1550	Based on the HTTP Response body set the Intuit Error elements .
1551	Check if the format is standard Intuit Response format . This is to prevent Intuit Return random Structured Error .
1552	Do not parse the response . Just set it as it is .
1553	Parse the response from different http client response and set the Intuit response .
1554	This is used to set the detailed error coming from QuickBooks Online detail
1555	Parse the raw Http Response Header to associated array to be consumered . It will also store the Content - Type of the response .
1556	Find the headers for response find the Content - type header and intuit_tid header and set it .
1557	Find the headers for response find the intuit_tid header and set it .
1558	Get App Menu
1559	Reconnect generates a new OAuth access token and invalidates the OAuth access token used in the request thereby extending the life span by six months .
1560	Set a new uri for this WSDL
1561	Set a strategy for complex type detection and handling
1562	Add an operation to a binding element
1563	Add a documentation element to any element in the WSDL .
1564	Add WSDL Types element
1565	Add a complex type name that is part of this WSDL and can be used in signatures .
1566	Echo the WSDL as XML
1567	This function makes sure a complex types section and schema additions are set .
1568	Configure the OAuth 1 or OAuth 2 values from a passed array
1569	Check if passed array has mininum required fields
1570	Gets the base Uri for a QBO user .
1571	Currently the Object serailziation and deserilization only supports XML format .
1572	Currently the Object serailziation and deserilization only supports XML format . To be Supported Currently it is only a place holder
1573	Disable Log the request and response to disk
1574	Set a new Location for Log instead of the default Location
1575	Update OAuth 2 Access Token with the new Token Value
1576	Return class properties from array with indent specified
1577	Return the result of the Request if there is no error . If the Batch request is Query the result will be an array of items . If the Batch request is create update or ddelete it will be the entity .
1578	Set the location at which the WSDL file will be availabe .
1579	Return the current Uri that the SOAP WSDL Service will be located at .
1580	Detect and return the current script name without parameters
1581	Set the strategy that handles functions and classes that are added AFTER this call .
1582	Set the Class the SOAP server will use
1583	Add a Single or Multiple Functions to the WSDL
1584	Proxy to WSDL dump function
1585	Update the Service Context of the request .
1586	Sending an request to QuickBooks Online based on the Request parameters body and URI .
1587	The API call to generate OAuth 1 signatures and make API call
1588	Get OAuth1 Authroization Header based on Query Parameters BaseURL
1589	The OAuth 2 API call
1590	Get OAuth2 Authroization Header based on OAuth 2 Access Token
1591	Log API Reponse to the Log directory that user specified .
1592	Log API Request to the Log directory that user specified .
1593	Parse a String xml to DOM structure for easy read
1594	This step is required since the configuration settings might have been changed .
1595	Based on the request determine the URL Endpoint
1596	Append Minor Version to the URI
1597	Check The HTTP MEthod from the requestParameters make sure it is either GET or POST
1598	Get the query parameters from the complete URL used for sign signature for OAuth 1 .
1599	Accept anything if content type is not XML or Json
1600	A helper function to convert Query to Array
1601	Using the token to encrypt payload and compare with sig
1602	Encrypt the payload based on hash algorithm and verifier Token
1603	Gets the IntuitBatchResponse with the specified id .
1604	Removes batchitem with the specified batchitem id .
1605	Helper function for store the error message and code from Fault returned from QuickBooks Online
1606	Prepare IdsException out of Fault object .
1607	Return array of options suitable for using with SoapClient constructor
1608	Set request style
1609	Set message encoding method
1610	Set proxy port
1611	Set HTTPS client certificate path
1612	Set Stream Context
1613	Set the string to use in User - Agent header
1614	Do request proxy method .
1615	Initialize SOAP Client object
1616	Add SOAP input header
1617	Return a list of available functions
1618	Return a list of SOAP types
1619	Return the ArrayOf or simple type name based on the singular xsdtype and the nesting level
1620	Append the complex type definition to the WSDL via the context access
1621	Prepare WSDL DOM model
1622	Add operations to bindings
1623	Add operations to port
1624	Create ref element
1625	Create an element with complex type
1626	Create simple element
1627	Resolve short namespace to long or return the same code if not found
1628	Parse Doc comments
1629	Test if an array is an associate array
1630	Convert the payLoad of webhook to object
1631	use Token to verifier the payload is sent from Intuit
1632	A helper to check if a key is a complex type of an Object
1633	Find the Method by given parameter on FacadeHelper . php Class
1634	Construct an IPPReferenceType based on passed Array or String . If it is passed as an array handle it . If it is passed as a String . Construct an array and put the String on the value If it is passed as an obj compare it with IPPReferenceType and return the object
1635	If passed params is array the first element of Array is used in IPPid . If passed params is not an array the the value is used for Ippid . If passed params is an obj the the value is simply returned .
1636	Override the content from Object B to Object A Don t use array_merge here . As the NUll Value will be overriden as well Remove the !empty check . For integer or string that is 0 it needs to be passed and set .
1637	Get headers for the QuciKbooks Online Response
1638	Set the SSL certifcate path and corresponding varaibles for cURL
1639	Convert an Array to Curl Headers
1640	Allow only specific classes
1641	Needs to run in the start of the life cycle since the rest of workflow uses it .
1642	Set the name attribute on the model .
1643	Scope to find tags by name .
1644	Boot the trait .
1645	Attach one or multiple tags to the model .
1646	Detach one or multiple tags from the model .
1647	Add one tag to the model .
1648	Remove one tag from the model
1649	Determine if a given tag is attached to the model .
1650	Query scope for models that have all of the given tags .
1651	Query scope for models that have any tag .
1652	Query scope for models that do not have all of the given tags .
1653	Query scope for models that does not have have any tags .
1654	Rename one the tags for the called class .
1655	Get the most popular tags for the called class .
1656	Returns the Related Pivot Key Name with the table alias .
1657	Returns the Foreign Pivot Key Name with the table alias .
1658	Create a new alias to use on scopes to be able to combine many scopes
1659	Convert a delimited string into an array of tag strings .
1660	Return an array of tag models for the given normalized tags
1661	Build a delimited string from a model s tags .
1662	Build a simple array of a model s tags .
1663	Get all Tags for the given class or all classes .
1664	Get all Tags that are unused by any model .
1665	Rename tags across all or only one model .
1666	Get the qualified table name for the Tag model .
1667	Get the qualified table name for the Tag model s pivot table .
1668	Translates the human readable names into the payload ones and saves them along with the values .
1669	Build URL which is sent to Google Analytics
1670	Prepares all the Single Parameters to be sent to GA .
1671	Prepares compound parameters inside collections to be sent to GA .
1672	Replaces a placeholder for the index passed .
1673	Gets the debug response . Returns empty array if no response found .
1674	Gets the full endpoint to GA .
1675	Sends a hit to GA . The hit will contain in the payload all the parameters added before .
1676	Build the options array for the http client based on the Analytics object options .
1677	Build and returns URL used to send to Google Analytics .
1678	Validates the minimum required parameters for every GA hit are being sent .
1679	Sets a parameter action to the value specified by the method call .
1680	Sets the value for a parameter .
1681	Adds an item to a compund parameter collection .
1682	Gets the value for a parameter .
1683	Gets the index value from the arguments .
1684	Gets the fully qualified name for a parameter .
1685	Sends request to Google Analytics .
1686	Parse the given options and fill missing fields with default values .
1687	Gets the human readable items for the parameter .
1688	Set a custom supported card brand with a regular expression to match it .
1689	Set the credit card year .
1690	Validate this credit card . If the card is invalid InvalidCreditCardException is thrown .
1691	Returns a masked credit card number with only the last 4 chars visible
1692	Credit Card Brand
1693	Get raw data for a track on the credit card magnetic strip based on the pattern for track 1 or 2 .
1694	Split the full name in the first and last name .
1695	Sets the card billing name .
1696	Sets the card shipping name .
1697	Get the cardholder s birthday .
1698	Sets the cardholder s birthday .
1699	Initialize the object with parameters .
1700	Set a single parameter
1701	Sets the card .
1702	Validates and returns the formatted amount .
1703	Sets the payment amount as integer .
1704	Sets the payment currency code .
1705	Get the payment currency number .
1706	Get the number of decimal places in the payment currency .
1707	Format an amount for the payment currency .
1708	Replace the contents of this bag with the specified items
1709	Validate that the current Response is a valid redirect .
1710	Convert a string to camelCase . Strings already in camelCase will not be harmed .
1711	Validate a card number according to the Luhn algorithm .
1712	Resolve a gateway class to a short name .
1713	Resolve a short gateway name to a full namespaced gateway class .
1714	This method alters the query to return a clean set of object with a working set of Object .
1715	Returns the model s metadata holding the fully qualified property and the last property name .
1716	Get pager by pagerType .
1717	Retrieve the parent alias for given alias . Root alias for direct association or entity joined alias for association depth > = 2 .
1718	Add an IDS object via IPP
1719	Find a record by ID number
1720	Authenticate against a QuickBooks SOAP server
1721	Set the application id of the parent client
1722	Set the credit card information for this customer
1723	Get credit card information for this customer
1724	Add a new class to QuickBooks
1725	Get an employee by ID
1726	Set the signature method
1727	Catch and handle a 500 error from QuickBooks
1728	Example of a login success hook implemented as an object method
1729	Tell whether or not a specific element is repeatable
1730	Tell whether or not an element exists
1731	Re - order an array to match the schema order
1732	Call a callback function
1733	Call a static method of a class and return the result
1734	Get a customer by name
1735	Set the class application ID
1736	Get the billing address
1737	Set the application ID for the shipping method
1738	Set the application ID for the payment method
1739	Override for the default SQL generation functions MySQL - specific field generation function
1740	Recursive helper function - get child at location
1741	Add a child XML node at a particular path
1742	Get an array of child nodes for this XML node
1743	Remove an attribute from the XML node
1744	Resursive helper function for converting to XML
1745	Get an array represtation of this XML node
1746	Helper function for converting to an array mapping paths to tag values
1747	Save this XML node structure as an XML file
1748	Save the XML node structure as a JSON document
1749	Shorten a string to a specific length by truncating or abbreviating the string
1750	Decode a UTF - 8 string to an entity encoded string
1751	Parse a DSN style connection string
1752	Extract the requestID attribute from an XML stream
1753	Parse a requestID string into it s action and ident parts
1754	Check if a given IP address lies within a CIDR range
1755	Create a user for the QuickBooks Web Connector SOAP server
1756	Disable a user for the QuickBooks Web Connector SOAP server
1757	Generate a unique hash from a bunch of variables
1758	Tell whether or not a given object has a ListID or TxnID associated with it
1759	Initialize the backend driver
1760	Tell whether or not a driver has been initialized
1761	List all of the QuickBooks object types supported by the framework
1762	List all of the QuickBooks actions the framework supports
1763	Escape a string for the database
1764	Generate and return a . QWC Web Connector configuration file
1765	SOAP endpoint for the Web Connector to connect to
1766	Issue a request to QuickBooks to add a customer
1767	Handle a response from QuickBooks indicating a new customer has been added
1768	Catch and handle errors from QuickBooks
1769	Fetch the item currently being processed by QuickBooks
1770	Create a recurring event which will be queued up every so often ...
1771	Fetch the next recurring event from the recurring event queue
1772	Tell the number of queued items left in the queue for a given user
1773	Get a list of records from the queue for use in a report
1774	Tell how many commands have been processed during this login session
1775	Log an error that occured for a specific ticket
1776	Get the last error that occured
1777	Resolve a ticket string to a QuickBooks username
1778	Check to see whether or not a ticket is for a valid unexpired login session
1779	End a log - in session
1780	Create a user account with the given username and password
1781	Initialize the driver class
1782	Tell whether or not the driver class has been initialized
1783	Log a message to the QuickBooks log
1784	Call any user - defined hooks hooked into a particular type of event
1785	Fetch OAuth tokens with the data provided to you in the SAML request
1786	Massage any optional configuration flags
1787	Queue up recurring events that are overdue to be run
1788	Extract a unique record identifier from an XML response
1789	Extract the status code from an XML response
1790	Extract the status message from an XML response
1791	Call the mapped function for a given action
1792	Call a user - defined hook
1793	Call an error - handler function and update the status of a request to ERROR
1794	Queue up a request for the Web Connector to process
1795	Find an item by name
1796	Tell whether or not a string starts with another string
1797	Execute an SQL query and return the result resource
1798	Extract the contents from a particular XML tag in an XML string
1799	Extract the attributes from a tag container
1800	Encode a string for use within an XML document
1801	Decode a string for use within an XML document
1802	Returns TRUE if an OAuth token exists for this user FALSE otherwise
1803	Load OAuth credentials from the database
1804	Handle an OAuth request login thing
1805	This function returns the html for displaying the Blue Dot menu
1806	Take a qbXML schema and transform that schema to an SQL schema definition
1807	Transform an XML document into an SQL schema
1808	Set a value within the object
1809	Get a value from the object
1810	Set a FullName field
1811	Set a boolean value
1812	Set a date
1813	Get a date value
1814	Removes a key from this object
1815	Get a qbXML schema object for a particular type of request
1816	Convert this QuickBooks object to an XML node object representation
1817	Tell whether or not the SQL driver has been initialized
1818	Add a new department to QuickBooks
1819	Get the name of this customer
1820	Sets the name as first and last .
1821	Apply default options to an array of configuration options
1822	Get information about the status of a connection to QuickBooks
1823	Deletes purchase order .
1824	Read an open file descriptor XML file or string
1825	Load the XML parser with data from a string or file
1826	Parse an XML document into an XML node structure
1827	Convert this object to a valid qbXML request
1828	Handle a QuickBooks error indicating that nothing matched a search
1829	Resolve a ticket string back to a ticket ID number
1830	Write a configuration variable to the database
1831	Read configuration information
1832	Create a new user for the SOAP server
1833	Get the default user
1834	Log a user in
1835	Check to see if a log in session is valid
1836	Store the last error which occured
1837	Register a recurring event for a particular user
1838	Dequeue a recurring even that is schedule to be run
1839	Add an item to the queue
1840	Fetch the queue item currently being processed by QuickBooks
1841	Tell how many items are in the queue
1842	Tell how many items have been processed during this session
1843	Write a message to the log file
1844	Execute an SQL query against the database
1845	Get a list of the fields within an SQL table
1846	Get a list of objects back from the database
1847	Update a record in the SQL table
1848	Request to enter Interactive Mode with the Web Connector
1849	Register a recurring event
1850	Tell the number of items currently in the queue
1851	Get the address
1852	Authenticate to the IPP web service
1853	Get a company by realmID
1854	Deletes vendor credit .
1855	Make an HTTP request
1856	Sign on to the QBMS service to fetch a session ticket
1857	Create a unique transaction requestID from a set of parameters
1858	Refund a credit card a given amount
1859	Initialize the queueing object
1860	Get an adapter class instance
1861	Merge configurations with the defaults
1862	Send the correct HTTP headers for this request
1863	Houses the instance of the soap server and creates the mappings for errors function callbacks
1864	Create an instance of a request type object
1865	Handle a SOAP request
1866	Apply a user - defined function to every single data field in the object
1867	Charge a credit card
1868	Get information about a charge that was made previously
1869	Get information about a debit that was made previously
1870	Refund a transaction
1871	Store a card via the QuickBooks Payments API
1872	Store a card from a token via the QuickBooks Payments API
1873	Get a card via the QuickBooks Payments API
1874	Get all cards associated with a customer via the QuickBooks Payments API
1875	Delete a card via the QuickBooks Payments API
1876	Handle an error if set in the returned data
1877	Perform a Quickbooks Payments operation via HTTP
1878	Map an application primary key to a QuickBooks ListID or TxnID
1879	Map a QuickBooks ListID or TxnID to an application primary key
1880	Pass a request to QuickBooks
1881	Restrict the queueing maps to only do these actions and dont do these actions maps
1882	Returns TRUE if the current version if it s greater than or equal to the required version
1883	Fetch a list of deleted things from QuickBooks
1884	Handle a list of deleted items from QuickBooks
1885	Void a transaction
1886	Receive a response from QuickBooks about a voided transaction
1887	Generate a qbXML InvoiceMod request to update an invoice
1888	Generate a JobTypeAdd qbXML request to send to QuickBooks
1889	Used to build the xml that limits the results to only updated results
1890	Flushes all caches in specified groups .
1891	Flushes caches by tags optionally only in specified groups .
1892	Try resolving short command names and aliases If that fails we return the command name as is and let the application throw an exception .
1893	Called from Composer
1894	Load all ext_localconf files in order until given extension key
1895	Load all ext_table files in order until given extension key
1896	Loads ext_localconf . php for a single extension . Method is a modified copy of the original bootstrap method .
1897	Loads ext_tables . php for a single extension . Method is a modified copy of the original bootstrap method .
1898	Handles the case when LocalConfiguration . php file already exists
1899	Execute all scheduled tasks
1900	Execute a single task
1901	Actually execute the migration to the new schema
1902	Lock backend for editors
1903	Unlock backend for editors
1904	Create admin backend user
1905	List available upgrade wizards
1906	Generate PackageStates . php file
1907	Fix folder structure
1908	Setup TYPO3 with extensions if possible
1909	Executes the given action and outputs the serialized result messages
1910	Create the dispatcher from within a composer plugin context
1911	Useful for creating the object during the runtime of another command
1912	Basic factory method which need the exact path to the typo3 console binary to create the dispatcher
1913	Execute a command in a sub process
1914	Formats and echoes the exception for the command line .
1915	Creates instance of an upgrade wizard
1916	Wraps a text and adds indentation to new lines
1917	Submit frontend request
1918	Make URL absolute so that the core fake frontend request bootstrap correctly configures the environment for trusted host pattern .
1919	Check TYPO3 version constraints of extensions
1920	List upgrade wizards
1921	Execute a single upgrade wizard
1922	Execute all upgrade wizards that are scheduled for execution
1923	This is where the hard work happens in a fully bootstrapped TYPO3 It will be called as sub process
1924	Checks for broken extensions
1925	Performs all necessary operations to integrate extensions into the system . Instead of using buggy TYPO3 API we created our own instead . This might be removed once the bug is fixed in TYPO3 .
1926	Get default structure object hierarchy
1927	Creates the folder structure for one extension
1928	Default definition of folder and file structure with dynamic permission settings
1929	Generate the XML Schema for a given class name .
1930	Add attribute descriptions to a given tag . Initializes the view helper and its arguments and then reads out the list of arguments .
1931	Add documentation XSD to a given XML node
1932	Resolves and checks the current command method name
1933	Maps arguments delivered by the request object to the local controller arguments .
1934	Calls the specified command method and passes the arguments .
1935	Creates a logger which outputs to the console
1936	Returns a short description of this command
1937	Get parsed annotations if command has any
1938	Get synopsis for this command either short or long
1939	Removes all occurrences of the specified step from this sequence
1940	Executes all steps of this sequence
1941	Invokes a single step of this sequence and also invokes all steps registered to be executed after the given step .
1942	Performs all necessary operations to integrate an extension into the system . To do so we avoid buggy TYPO3 API and use our own instead .
1943	Set up all active extensions
1944	Removes all extensions that are not marked as active
1945	List extensions that are available in the system
1946	Truncate all DB tables prefixed with cf_
1947	Handles an error by converting it into an exception .
1948	Allows to register one or more script objects that implement this interface This will be called in the Plugin right before the scripts are executed .
1949	Asks the user to select a value
1950	Asks a question to the user
1951	Asks a confirmation to the user .
1952	Asks a question to the user the response is hidden
1953	Asks for a value and validates the response
1954	Asks for a value hide and validates the response
1955	Subclass Symfony list command to be able to register our own text descriptor
1956	Writes the log record
1957	Returns the list of performed update types including the count
1958	Adds to the number of updates performed for a schema update type
1959	Adds to the list of errors occurred for a schema update type
1960	Remove configuration option
1961	Show configuration value
1962	Show active configuration value
1963	Show local configuration value
1964	Set configuration value
1965	Actions to take after extension has been installed
1966	Creates a Message object and adds it to the FlashMessageQueue .
1967	Copy typo3 console binary to root directory taking several possible situations into account
1968	Generate Fluid ViewHelper XSD Schema
1969	Initializes the package system and loads the package configuration and settings provided by the packages .
1970	Tell Extbase TYPO3 and PHP that we have another implementation
1971	Tell Extbase about this implementation
1972	Sets a value in LocalConfiguration . php
1973	Convert a value to the type belonging to the given path
1974	Returns the type of a value in given config path
1975	Checks if target and actual type is scalar
1976	Checks if the given command can be executed in current application state
1977	Extbase has its own validation logic so it is disabled in this place
1978	Executes the command to find any Extbase command
1979	Checks PHP sapi type and sets required PHP options
1980	If detected TYPO3 version does not match the main supported version overlay compatibility classes for the detected branch by registering an autoloader and aliasing the compatibility class with the original class name .
1981	Handle the given command input and return the exit code of the called command
1982	Renders Exception with trace and nested exceptions with trace .
1983	Output formatted exception .
1984	Output formatted trace .
1985	Shorten file name if inside extension or core extension .
1986	Displays an error message
1987	Import mysql queries from stdin
1988	Execute the command in a sub process but execute some automated migration steps beforehand
1989	Output schema result
1990	Output at cli context imported static database content .
1991	Perform necessary database schema migrations
1992	Builds the sequence for the given run level
1993	Essential steps for a minimal usable system
1994	System with complete configuration but no database
1995	Flush all caches in specified groups
1996	Flush cache by tags
1997	List cache groups
1998	Hydrate values from callable .
1999	Register this dictioanry as used .
2000	Tree Iterator .
2001	Returns object JSON representation required by PayPal . The PayPal REST API requires the use of JSON_UNESCAPED_SLASHES .
2002	Get transaction description .
2003	Get OAuth 2 . 0 access token .
2004	Is there a bearer token and is it still valid?
2005	Set the request startTime
2006	Set the request endTime
2007	Get all issues of specific type .
2008	Runs console application
2009	Simplifies path to fit in specific width
2010	Shows error and terminates script
2011	Divide first level of tokens hierarchy by comma
2012	Removes all T_WHITESPACE tokens from tokens hierarchy
2013	Calls function - usage checker
2014	Adds issue to the report
2015	Checks that terminal supports colors
2016	Returns size of terminal on Windows
2017	Attempts to locate the specified identifier .
2018	Attempt to locate a class by name .
2019	We can only load functions if they already exist because PHP does not have function autoloading . Therefore if it exists we simply use the internal reflection API to find the filename . If it doesn t we can do nothing so throw an exception .
2020	Our wrapper simply records which file we tried to load and returns boolean false indicating failure .
2021	url_stat is triggered by calls like file_exists . The call to file_exists must not be overloaded . This function restores the original file stream issues a call to stat to get the real results and then re - registers the AutoloadSourceLocator stream wrapper .
2022	Compile constant expressions
2023	Compile class constants
2024	Find all class and function reflections in the specified file
2025	Check to see if the line is within the boundaries of the reflection specified .
2026	Get all the classes available in the scope specified by the SourceLocator .
2027	Create a reflection of a class s property by its name
2028	Create a reflection of an instance s property by its name
2029	Get the DocBlock type hints as an array of strings .
2030	Get an array of reflections found in some code .
2031	Given an array of Reflections try to find the identifier .
2032	Create a reflection of a parameter using a class name
2033	Create a reflection of a parameter using an instance
2034	Create a reflection of a parameter using a closure
2035	Does this method allow null for a parameter?
2036	Get the ReflectionType instance representing the type declaration for this parameter
2037	Set the parameter type declaration .
2038	Get all the functions available in the scope specified by the SourceLocator .
2039	Create a reflection of a method by it s name using a named class
2040	Create a reflection of a method by it s name using an instance
2041	Find the prototype for this method if it exists . If it does not exist it will throw a MethodPrototypeNotFound exception .
2042	Is the method a constructor .
2043	Create a reflection and return the string representation of a named class
2044	Create from a Class Node .
2045	Construct a flat list of all methods from current class traits parent classes and interfaces in this precise order .
2046	Fetch an array of all methods for this class .
2047	Does the class have the specified method method?
2048	Get the value of the specified class constant .
2049	Get the constructor method for this class .
2050	Get the properties for this class .
2051	Get the parent class if it is defined . If this class does not have a specified parent class this will throw an exception .
2052	Gets the parent class names .
2053	Get the traits used if any are defined . If this class does not have any defined traits this will return an empty array .
2054	Given an AST Node \ Name create a new ReflectionClass for the element .
2055	Checks whether the given object is an instance .
2056	Checks whether the given class string is a subclass of this class .
2057	Checks whether this class implements the given interface .
2058	Checks whether this reflection is an instantiable class
2059	Checks whether this is a reflection of a class that supports the clone operator
2060	This method allows us to retrieve all interfaces parent of the this interface . Do not use on class nodes!
2061	Set the value of a static property
2062	Set whether this class is final or not
2063	Remove the named method from the class .
2064	Add a new method to the class .
2065	Add a new property to the class .
2066	Remove a property from the class .
2067	Check to see if a reflector is of a valid type specified by this identifier .
2068	Create a reflection and return the string representation of a class instance
2069	Pass an instance of an object to this method to reflect it
2070	Reflect on runtime properties for the current instance
2071	Create an AST PropertyNode given a reflection
2072	Populate the common elements of the function abstract .
2073	We must determine if params are optional or not ahead of time but we must do it in reverse ...
2074	Get the number of required parameters for this method .
2075	Get an array list of the parameters for this method signature as an array of ReflectionParameter instances .
2076	Get a single parameter by name . Returns null if parameter not found for the function .
2077	Check if the function has a variadic parameter .
2078	Set the return type declaration .
2079	Retrieves the body of this function as code .
2080	Fetch an array of all return statements found within this function .
2081	Find all identifiers of a type
2082	Create a reflection of a class s constant by Const Node
2083	Returns constant value
2084	Returns a bitfield of the access modifiers for this constant
2085	Generates class or interface PHPDoc .
2086	Converts HTML to Markdown and explode .
2087	Extracts cardinality of properties .
2088	Extracts the cardinality of a property .
2089	Tests if a type is an enum .
2090	Creates a map between classes and properties .
2091	Converts a namespace to a directory path according to PSR - 4 .
2092	Uses PHP CS Fixer to make generated files following PSR and Symfony Coding Standards .
2093	Checks if a property exists in GoodRelations .
2094	Extracts cardinality from the Good Relations OWL .
2095	Gets a property URL .
2096	Converts a Schema . org range to a PHP type .
2097	Gets class or interface name to use in relations .
2098	Writes closing tags to current file
2099	Flushes buffer into file
2100	Adds a new item to sitemap
2101	Adds a new single item to sitemap
2102	Adds a multi - language item based on multiple locations with alternate hrefs to sitemap
2103	Returns an array of URLs written
2104	Sets whether the resulting files will be gzipped or not .
2105	Adds sitemap link to the index file
2106	Deflate data in a deflate context and write it to the target file
2107	Make sure all data was written
2108	Deflate buffered data
2109	Sets the expiration date of generated keys
2110	Sets the parameters for the primary key of generated key - pairs
2111	Sets the parameters for the sub - key of generated key - pairs
2112	Builds a GnuPG key usage string suitable for key generation
2113	Gets a user id object from parameters
2114	Parses a user id object from a user id string
2115	Checks if the process is running
2116	Ends the process gracefully
2117	Sets the operation that is being performed by the engine .
2118	Handles error values in the error output from GPG
2119	Check exit code of the GPG operation .
2120	Set data for the process execution .
2121	Create Crypt_GPG_BadPassphraseException from operation data .
2122	Get registered passphrase for specified key .
2123	Get a name for the used hashing algorithm .
2124	Sets whether or not this sub - key can sign data
2125	Sets whether or not this sub - key can encrypt data
2126	Parses a sub - key object from a sub - key string
2127	Parses a date string as provided by GPG into a UNIX timestamp
2128	Deletes a public key from the keyring
2129	Gets a key fingerprint from the keyring
2130	Encrypts string data
2131	Encrypts a file
2132	Encrypts and signs data
2133	Encrypts and signs a file
2134	Decrypts and verifies string data
2135	Decrypts and verifies a signed encrypted file
2136	Signs a file
2137	Adds a key to use for decryption
2138	Adds a key to use for encryption
2139	Adds a key to use for signing
2140	Adds a key to one of the internal key arrays
2141	Imports a public or private key into the keyring
2142	Exports a private or public key from the keyring
2143	Decrypts and verifies encrypted signed data
2144	Prepares command input
2145	Prepares command output
2146	Gets the available keys in the keyring
2147	Sends a command to the GPG subprocess over the command file - descriptor pipe
2148	Resets the GPG engine preparing it for a new operation
2149	Runs the current GPG operation .
2150	Sets the operation to perform
2151	Sets the PINENTRY_USER_DATA environment variable with the currently added keys and passphrases
2152	Gets the version of the GnuPG binary
2153	Get data from the last process execution .
2154	Set some data for the process execution .
2155	Closes the internal GPG subprocess
2156	Closes a the internal GPG - AGENT subprocess
2157	Closes an opened pipe used to communicate with the GPG subprocess
2158	Forces automatically started gpg - agent process to cleanup and exit within a minute .
2159	Gets the location of a binary for the current operating system
2160	Gets the location of the PinEntry script
2161	Displays debug text if debugging is turned on
2162	Gets the primary sub - key of this key
2163	Gets whether or not this key can sign data
2164	Gets whether or not this key can encrypt data
2165	Sets the log file location
2166	Logs a message at the specified verbosity level
2167	Connects this pinentry to the assuan server
2168	Parses an assuan command and performs the appropriate action
2169	Initializes the PINs to be entered by this pinentry from the environment variable PINENTRY_USER_DATA
2170	Disconnects this pinentry from the Assuan server
2171	Parses the currently requested key identifier and user identifier from the description passed to this pinentry
2172	Sends the PIN value for the currently requested key
2173	Sends information about this pinentry
2174	Gets data ready to send to the assuan server
2175	Wraps strings at 1 000 bytes without splitting UTF - 8 multibyte characters
2176	Sends raw data to the assuan server
2177	Generates an array with all translations .
2178	Text to include as a comment before the start of the PO contents
2179	Add one or more lines depending whether the string is multiline or not .
2180	Retrieves the main file data of the plugin or theme .
2181	Creates a POT file and stores it on disk .
2182	Returns the copyright comment for the given package .
2183	Sets default POT file headers for the project .
2184	Retrieves metadata from a file .
2185	Retrieves metadata from a string .
2186	Resolve the callee of a call expression using known formats .
2187	Returns wether or not a comment precedes a node . The comment must be before the node and on the same line or the one before .
2188	Determines whether a file is valid based on given matchers .
2189	Determines whether or not a directory has children that may be matched .
2190	Recursively gets all PHP files within a directory .
2191	Splits a single PO file into multiple JSON files .
2192	Builds a mapping of JS file names to translation entries .
2193	Removes strings from PO file that only occur in JavaScript file .
2194	Marks a list of updates as successful .
2195	Marks a list of updates .
2196	Set status for update keys .
2197	Checks an array of bulletpoints on a checklist .
2198	Checks all the bulletpoints on a checklist .
2199	Updates and saves progress of the update checklist .
2200	Prints a page about Droopler distribution .
2201	Generates hash for the specified config .
2202	Compares config name hash wit provided hash .
2203	Import a config file .
2204	Import many config files at once .
2205	Install modules .
2206	Check link to download file .
2207	Checking link was created before 24h .
2208	Redirect to home page and show drupal message
2209	Send file to browsers .
2210	Gets an array of data items for rows from the set data .
2211	Get Total count of data items .
2212	Prepares string to have almost the same behaviour as with a database removing accents and latin special chars .
2213	Set a two - dimentional array .
2214	Returns an instance of type .
2215	Returns the options resolved .
2216	Render grid block .
2217	Cell Drawing override .
2218	Filter Drawing override .
2219	Column Operator Drawing override .
2220	Has block .
2221	Walks down a SelectStatement AST node modifying it to retrieve a COUNT .
2222	Sets Source to the Grid .
2223	Handle the grid redirection export etc ..
2224	Reads data from the request and write this data to the session .
2225	Process mass actions .
2226	Process exports .
2227	Store permanent filters to the session and disable the filter capability for the column if there are permanent filters .
2228	Configures the grid with the data read from the session .
2229	Prepare Grid for Drawing .
2230	Writes data to the session .
2231	Get a column by its identifier .
2232	Returns true if column exists in columns and lazyAddColumn properties .
2233	Sets order of Columns passing an array of column ids If the list of ids is uncomplete the remaining columns will be placed after .
2234	Adds Mass Action .
2235	Add a tweak .
2236	Returns tweaks Add the url of the tweak .
2237	Returns a tweak .
2238	Returns tweaks with a specific group .
2239	Adds Row Action .
2240	Sets template for export .
2241	Adds Export .
2242	Returns Route URL .
2243	Set value for filters .
2244	Sets Limits .
2245	Return count of available pages .
2246	Sets the max results of the grid .
2247	Return true if if title panel is visible in template - internal helper .
2248	Return true if filter panel is visible in template - internal helper .
2249	Return true if pager panel is visible in template - internal helper .
2250	Sets on the visibility of columns .
2251	Sets off the visiblilty of columns .
2252	Redirects or Renders a view - helper function .
2253	Extract raw data of columns .
2254	Returns an array of the active filters of the grid stored in session .
2255	Returns the filter of a column stored in session .
2256	A filter of the column is stored in session ?
2257	Sets the initial QueryBuilder for this DataGrid .
2258	Draw cell .
2259	Return column visibility .
2260	set column order .
2261	Set column width .
2262	set filter data from session | request .
2263	get filter data from session | request .
2264	Set column align .
2265	Return column filter operators .
2266	Add column .
2267	Sets order of Columns passing an array of column ids If the list of ids is uncomplete the remaining columns will be placed after if keepOtherColumns is true .
2268	Add route parameter .
2269	Map the parameter .
2270	Render action for row .
2271	Add a grid type .
2272	Add a column type .
2273	Sets the Container associated with this Controller .
2274	gets the export Response .
2275	Get data form the grid .
2276	Get data form the grid in a flat array .
2277	set template .
2278	get parameter .
2279	Get the list of actions to render .
2280	Delete all items from the cart
2281	Add an item to the cart
2282	Removes an item from the cart
2283	Returns all items of a given type from the cart
2284	Redirects the user to the hosted login page
2285	If the user is logged in returns the user information .
2286	Use this to either enable or disable the remember function for users .
2287	Callback action that should be called by auth0 logs the user in .
2288	Calculates count of characters in string .
2289	Slices string like python .
2290	Lower case .
2291	Upper case .
2292	Returns the enabled function mock .
2293	Automatically disable function mocks after the test was run .
2294	Defines the mocked function in the given namespace .
2295	Get single flags view .
2296	Get country code based on locale .
2297	Returns the language code .
2298	Returns the language long code .
2299	Returns the language name .
2300	Set locale if it s allowed .
2301	Set locale and return home url .
2302	Set locale and return back .
2303	This function checks if language to set is an allowed lang of config .
2304	Finds the first index where the given callable returns true .
2305	Removes the element at the given index and returns it .
2306	Extracts element from the head while the passed callable returns true .
2307	auth login with server
2308	auth oauthbearer with server
2309	Send the message
2310	connect the server SUCCESS 220
2311	SMTP STARTTLS SUCCESS 220
2312	SMTP AUTH LOGIN SUCCESS 334 SUCCESS 334 SUCCESS 235
2313	SMTP AUTH OAUTHBEARER SUCCESS 235
2314	SMTP AUTH XOAUTH2 SUCCESS 235
2315	SMTP RCPT TO SUCCESS 250
2316	SMTP DATA SUCCESS 354 SUCCESS 250
2317	SMTP QUIT SUCCESS 221
2318	get smtp response code once time has three digital and a space
2319	set mail from
2320	set mail fake from
2321	Finds a file by class name while caching lookups to WinCache .
2322	Finds a file by class name while caching lookups to APC .
2323	Loads a list of classes and caches them in one big file .
2324	Adds brackets around each namespace if it s not already the case .
2325	Writes a cache file .
2326	Gets an ordered array of passed classes including all their dependencies .
2327	Adds prefixes .
2328	Registers a set of classes .
2329	Finds a file by class name while caching lookups to Xcache .
2330	Parses the given text considering the full language .
2331	Given a set of lines and an index of a current line it uses the registed block types to detect the type of this line .
2332	Parses the block at current line by identifying the block type and parsing the content
2333	Returns a map of inline markers to the corresponding parser methods .
2334	Prepare markers that are used in the text to parse
2335	Parses inline elements of the language .
2336	Parses emphasized and strong elements .
2337	identify a line as the beginning of a HTML block .
2338	Consume lines for an HTML block
2339	identify a line as the beginning of a fenced code block .
2340	identify a line as a headline
2341	Consume lines for a headline
2342	Remove backslash from escaped characters
2343	Parses a link indicated by [ .
2344	Parses an image indicated by ! [ .
2345	Parses an inline code span .
2346	Consume lines for a code block element
2347	identify a line as the beginning of an unordered list .
2348	Renders a list
2349	Consume lines for a blockquote element
2350	Consume link references
2351	Renders a headline
2352	Parses the strikethrough feature .
2353	identify a line as the beginning of a table block .
2354	Consume lines for a table
2355	render a table block
2356	Parses urls and adds auto linking feature .
2357	Core 3 . 3 . 4 Processing rules .
2358	Shortcut for creating an XML element .
2359	Shortcut for creating an XML element that contains CDATA - wrapped text .
2360	Checks if there is at least one image of type default
2361	Checks if the provided value is empty .
2362	Verifies that property keys for use in CSV export don t contain characters that could break the format fatally .
2363	Creates an exporter for the desired output format .
2364	Add a value to the property element .
2365	Validates the export page against the schema . In case of violations an exception is thrown .
2366	Shortcut to easily add the name of the item .
2367	Shortcut to easily add the summary of the item .
2368	Shortcut to easily add the description of the item .
2369	Shortcut to easily add the price of the item .
2370	Shortcut to easily add the bonus of the item . The value must be a numeric .
2371	Shortcut to easily add the sales frequency of the item . The value must be a positive integer .
2372	Shortcut to easily add the date added value of the item .
2373	Shortcut to easily add the sort value of the item .
2374	Validates given value . Basic implementation is validating against an empty string but is overridden when checking values more specific .
2375	Fetches content of a hook .
2376	Insert a hook in repository using a symlink .
2377	Set a hook in repository .
2378	Removes a hook from repository .
2379	Count commits without offset or limit .
2380	Returns the reference list associated to the repository .
2381	Instanciates a commit object or fetches one from the cache .
2382	Instanciates a tree object or fetches one from the cache .
2383	Instanciates a blob object or fetches one from the cache .
2384	Returns log for a given set of revisions and paths .
2385	Returns the size of repository in kilobytes .
2386	Executes a shell command on the repository using PHP pipes .
2387	Returns description of repository from description file in git directory .
2388	This command is a facility command . You can run any command directly on git repository .
2389	Clones the current repository to a new directory and return instance of new repository .
2390	Returns the parent commits .
2391	Returns the first line of the commit and the first 50 characters .
2392	Find branch containing the commit .
2393	Initializes a repository and returns the instance .
2394	Checks the validity of a git repository url without cloning it .
2395	Clone a repository to a local path .
2396	Clone a repository branch to a local path .
2397	Internal method to launch effective git clone command .
2398	Returns lines grouped by commit .
2399	Returns all lines of the blame .
2400	Returns a reference by name .
2401	Returns all branches .
2402	Returns all locales branches .
2403	Returns all remote branches .
2404	Returns content of the blob .
2405	Determine the mimetype of the blob .
2406	Export a diff as array .
2407	Parse a text which represents an email and splits it into fragments .
2408	Returns a SQL string in a readable human - friendly format .
2409	Returns the column name .
2410	Creates a collection of Column objects .
2411	Creates a Column object .
2412	Creates a Table object .
2413	Converts this query into an SQL string by using the injected builder . Optionally can return the SQL with formatted structure .
2414	Boot the cacheable eloquent trait for a model .
2415	Store the given cache key for the given model by mimicking cache tags .
2416	Get cache keys from the given file .
2417	Flush cache keys of the given model by mimicking cache tags .
2418	Forget the model cache .
2419	Reset cached model to its defaults .
2420	Generate unique cache key .
2421	Cache given callback .
2422	Method validates HPP request object using JSR - 303 bean validation .
2423	Method validates HPP response hash .
2424	Helper method for adding a autoSettleFlag
2425	Helper method for adding a returnTss
2426	Helper method for adding a validateCardOnly
2427	Helper method for adding a dccEnable
2428	Helper method for adding a cardStorageEnable
2429	Helper method for adding a offerSaveCard
2430	Helper method for adding a payerExists
2431	Helper method for adding the Hpp Version
2432	Generates default values for fields such as hash timestamp and order ID .
2433	Base64 encodes all Hpp Request values .
2434	Base64 decodes all Hpp Request values .
2435	Base64 encodes the HPP response values .
2436	Base64 decodes the HPP response values .
2437	Exists for the performance
2438	Unpack results stored inside deferred resolvers .
2439	Apply post - process callbacks to all deferred resolvers .
2440	Converts a cursor to its array key .
2441	Converts a cursor to an array offset .
2442	foreach list .
2443	Creates a request bag according to the JSON RPC protocol . The API will be able to understand it . The result is encoded as a JSON string .
2444	Returns a string array with all sentences from the response .
2445	Uses the DeepL API to split a text into a string array of sentences . This method might throw an exception so you should wrap it in a try - catch - block .
2446	Tries to detect the language of a text and returns its language code . The language of the text has to be one of the supported languages or the result will be incorrect . This method might throw an exception so you should wrap it in a try - catch - block . Especially it will throw an exception if the API was not able to auto - detected the language .
2447	Getter for the array with all supported language codes
2448	Get the devault values used in new rows
2449	Store a row in the cache .
2450	Returns a row from the cache .
2451	Check if a row with a specific id exists .
2452	Returns a row with a specific id .
2453	Store a row with a specific id .
2454	Remove a row with a specific id .
2455	Returns the foreign key .
2456	Delete all rows in the database
2457	Get the field class name .
2458	Set a config value
2459	Returns the FieldFactory instance used by the tables .
2460	Execute a query and returns the statement object with the result .
2461	Execute a callable inside a transaction .
2462	Starts a transaction if it s not started yet .
2463	Check whether the value is valid before save in the database
2464	Check whether a value is set or not
2465	Edit the values using an array
2466	Delete the row in the database
2467	Relate this row with other rows
2468	Unrelate this row with other rows
2469	Unrelate this row with all rows of other tables
2470	Creates a select query of a table related with this row
2471	Return the real field name
2472	List of QuotaLimit definitions for the service . Used by metric - based quotas only .
2473	List of MetricRule definitions each one mapping a selected method to one or more metrics . Used by metric - based quotas only .
2474	Logging configurations for sending logs to the producer project . There can be multiple producer destinations each one must have a different monitored resource type . A log can be used in at most one producer destination .
2475	Logging configurations for sending logs to the consumer project . There can be multiple consumer destinations each one must have a different monitored resource type . A log can be used in at most one consumer destination .
2476	Collection of advice provided for this change useful for determining the possible impact of this change .
2477	Configuration for network endpoints . If this is empty then an endpoint with the same name as the service is automatically generated to service all defined APIs .
2478	Defines the logs used by this service .
2479	Defines the metrics used by this service .
2480	Describes all violations in a client request .
2481	A list of operations that matches the specified filter in the request .
2482	Optional view for the returned Role objects .
2483	The names of the permissions this role grants when bound in an IAM policy .
2484	The current launch stage of the role .
2485	Billing configurations for sending metrics to the consumer project . There can be multiple consumer destinations per service each one must have a different monitored resource type . A metric can be used in at most one consumer destination .
2486	Application specific response metadata . Must be set in the first response for streaming APIs .
2487	Defines a set of authentication providers that a service supports .
2488	A list of full type names of requested contexts .
2489	A list of full type names of provided contexts .
2490	The values must be monotonically increasing .
2491	The updated role .
2492	Subpages of this page . The order of subpages specified here will be honored in the generated docset .
2493	Filters the types of keys the user wants to include in the list response . Duplicate key types are not allowed . If no key type is provided all keys are returned .
2494	Optional . The recipient at the address . This field may under certain circumstances contain multiline information . For example it might contain care of information .
2495	The stack trace entries indicating where the error occurred .
2496	Monitoring configurations for sending metrics to the producer project . There can be multiple producer destinations each one must have a different monitored resource type . A metric can be used in at most one producer destination .
2497	Monitoring configurations for sending metrics to the consumer project . There can be multiple consumer destinations each one must have a different monitored resource type . A metric can be used in at most one consumer destination .
2498	Requirements for additional authentication providers .
2499	Associates a list of members to a role . Multiple bindings must not be specified for the same role . bindings with no members will result in an error .
2500	Metrics to update when the selected methods are called and the associated cost applied to each metric . The key of the map is the metric name and the values are the amount increased for the metric against which the quota limits are defined . The value must not be negative .
2501	The top level pages for the documentation set .
2502	The action that was performed on a Binding . Required
2503	All files used during config generation .
2504	The public keys for the service account .
2505	The list of matching service accounts .
2506	The current custom role support level .
2507	Policy delta between the original policy and the newly set policy .
2508	Must be in increasing order of value field .
2509	The list of features enabled on this endpoint .
2510	List of per consumer project - specific properties .
2511	Describes all quota violations .
2512	The output format of the private key . GOOGLE_CREDENTIALS_FILE is the default output format .
2513	Which type of key and algorithm to use for the key . The default is currently a 2K RSA key . However this may change in the future .
2514	A list of messages that carry the error details . There is a common set of message types for APIs to use .
2515	The delta for Bindings between two policies .
2516	The output format of the public key requested . X509_PEM is the default output format .
2517	The list of matching roles .
2518	Define parameters . Multiple names may be defined for a parameter . For a given method call only one of them should be used . If multiple names are used the behavior is implementation - dependent . If none of the specified names are present the behavior is parameter - dependent .
2519	Gets the cache file name
2520	Checks that the cache conditions are respected
2521	Checks if the target filename exists in the cache and if the conditions are respected
2522	Write data in the cache
2523	Get data from the cache
2524	Get or create the cache entry
2525	Checks if WordPress is installed .
2526	Runs the standard WordPress installation process .
2527	Transforms an existing single - site installation into a multisite installation .
2528	Installs WordPress multisite from scratch .
2529	Displays the WordPress version .
2530	Security copy of the core function with Requests - Gets the checksums for the given version of WordPress .
2531	Runs the WordPress database update procedure .
2532	Gets download url based on version locale and desired file type .
2533	Returns update information .
2534	Caches the download and uses cached if available .
2535	Upgrade WordPress core .
2536	Build table from array data .
2537	Add custom css for hiding boxes with no frame in screen options .
2538	Move meta boxes after title .
2539	Get meta post type .
2540	Get meta box title .
2541	Render the meta box
2542	Setup meta box .
2543	Get meta data from type class and merge with the parent meta data .
2544	Load the file and setup file path file name and class name properties .
2545	Setup meta data .
2546	Determine if the property is disabled or not .
2547	Create a new instance of the given type or a empty core property if no type is given .
2548	Get child property .
2549	Get option value .
2550	Get post id .
2551	Get the html id attribute value .
2552	Get html name for property with or without sub property and row number .
2553	Match property slug with given slug value .
2554	Prepare value before database .
2555	Check if the property is allowed to render by the conditional rules .
2556	Set property option value .
2557	Set property setting value .
2558	Setup properties .
2559	Setup property options .
2560	Setup options slug .
2561	Setup options settings .
2562	Add attachment fields .
2563	Save attachment post data .
2564	Check if the entry type is a singleton .
2565	Get property meta value .
2566	Format property value from the property .
2567	Get current property .
2568	Load property value from the property .
2569	Get store from factory .
2570	Get property option or default value .
2571	Determine if the property can be rendered or not .
2572	Render the property .
2573	Output hidden input field that cointains which property is used .
2574	Render label for the property .
2575	Render the final html that is displayed in the table .
2576	Render Conditional rules as script tag with JSON .
2577	Get value from the database .
2578	Decode property .
2579	Get post data .
2580	Pre get deep keys and value .
2581	Prepare post data . Will decode property options recursive .
2582	Prepare properties data for saving .
2583	Sanitize data before saving it .
2584	Delete property value .
2585	Get right meta function for right type and context .
2586	Geta property value for right meta type .
2587	Update property meta .
2588	Clear cache values on update property meta .
2589	Filters the fields displayed in the post revision diff UI .
2590	Output hidden meta boxes .
2591	Load post new action Redirect to right url if no page type is set .
2592	Redirect post location when post is in iframe mode .
2593	Setup admin entry .
2594	Rename meta key for page type .
2595	Get field slug .
2596	Get the source value .
2597	Setup source callable .
2598	Setup the rule and assign properties with values .
2599	Preboot all types and setup the current type if any .
2600	Add custom body class when it s a page type .
2601	Output Papi page type hidden field .
2602	Get Entry Type instance .
2603	Add docs links to plugin row meta .
2604	Update page type to front page type when updating which page that should be used as front page .
2605	Filter the link query results .
2606	Get module templates by post id .
2607	Prepare load value .
2608	Save properties with a post id of zero .
2609	Render metabox .
2610	Switch page type if all checks pass .
2611	Overwrite post data in posts table .
2612	Pre save page template and page type .
2613	Save meta boxes .
2614	Save custom fields for revision post .
2615	Save properties .
2616	Restore to post revision .
2617	Check if post id is valid or not .
2618	Check if the property should be displayed by the rules .
2619	Get the display by relation .
2620	Get rule slug .
2621	Prepare rules .
2622	Determine if the page type is allowed by capabilities and post type .
2623	Get body css classes .
2624	Get child page types that lives under the current page type .
2625	Get labels that should be changed when using fill_labels option .
2626	Get post type supports that will be removed .
2627	Remove post type support action .
2628	Remove meta boxes .
2629	Setup page type .
2630	Setup post types array .
2631	Setup page templates if templates is a array .
2632	Add filters to filter TinyMCE buttons .
2633	Remove filters that filter TinyMCE buttons .
2634	Get row results .
2635	Change value after it s loaded from the database and populate every property in the repeater with the right property type .
2636	Prepare properties get properties options object check which properties that are allowed to use .
2637	Prepare property for JSON .
2638	Remove all repeater rows from the database .
2639	Render property JSON template .
2640	Render repeater head .
2641	Render repeater rows .
2642	Register options properties .
2643	Get setting value for a property .
2644	Prepare settings response .
2645	Get value from database .
2646	Get users as dropdown items .
2647	Initialise Papi .
2648	Load Localisation files .
2649	Require files .
2650	Deactivate Papi if the WordPress version is lower then 4 . 6 .
2651	Determine if items are strings or not .
2652	Prepare properties and set right slug and value .
2653	Get file by id or meta value .
2654	Get matching value based on key from a file .
2655	Save file with a meta value or id .
2656	Set a parameter or an object .
2657	Call closure .
2658	Get class prefix .
2659	Determine if a given type is a singleton or not .
2660	Add key and value to the container once .
2661	Unset value by identifier .
2662	Override labels with labels from the entry type .
2663	Page items menu .
2664	Setup menu items for real post types .
2665	Menu callback that loads right view depending on what the page query string says .
2666	Autoload Papi classes .
2667	Get registered sidebars as dropdown items .
2668	Get labels from post types .
2669	Parse query arguments .
2670	Parse post query arguments .
2671	Parse term query arguments .
2672	Get real query arguments without Papi Query specific arguments .
2673	Get result .
2674	Add help tabs .
2675	Add new meta box with properties .
2676	Call parent register if it exists to collect boxes on the parent entry type .
2677	Convert properties to properties objects .
2678	Get admin body css classes .
2679	Get boxes from the page type .
2680	Get property from entry type .
2681	Get root properties .
2682	Merge boxes with same title .
2683	Setup entry type .
2684	Add a new tab .
2685	Load value from database .
2686	Prepare link array with post id . If it gets a post id bigger then zero it will use the permalink as url .
2687	Prepare value for the database .
2688	Determine if the taxonomy type is allowed by taxonomy type .
2689	Render term edit form .
2690	Filter the post .
2691	Prepare response .
2692	Setup REST API fields .
2693	Get format args that will be passed into CLI Formatter .
2694	Render file .
2695	Get box option .
2696	Convert value from a property .
2697	Get converted value .
2698	Get deep value .
2699	Get property value .
2700	Equal conditional rule .
2701	Not equal conditional rule .
2702	Greater then conditional rule .
2703	Not in array conditional rule .
2704	Like conditional rule .
2705	Get between values .
2706	Between conditional rule .
2707	Not between conditional rule .
2708	Get sort option value .
2709	Get sort options for relationship property .
2710	Get items to display from settings .
2711	Sort the values .
2712	Sort the values on update .
2713	Get meta type value .
2714	List Papi types .
2715	Generate html for tabs and properties .
2716	Generate layout slug .
2717	Get layout by slug .
2718	Change value after it s loaded from the database and populate every property in the flexible with the right property type .
2719	Prepare properties .
2720	Render layout input .
2721	Render repeater row .
2722	Add form fields to edit tags page .
2723	Prepare taxonomy types add standard taxonomy if it should be added .
2724	Setup hooks for all taxonomies .
2725	Add ajax url to Papi JavaScript object .
2726	Handle Papi ajax .
2727	Get entry type via GET .
2728	Get posts via GET .
2729	Get property html via GET .
2730	Get properties via POST .
2731	Get rules result via GET .
2732	Get shortcode via GET .
2733	Get terms via GET .
2734	Get fields that exists on a term .
2735	Rename meta key for taxonomy type .
2736	Add custom table header to page or taxonomy type .
2737	Add custom table column to page or taxonomy type .
2738	Add entry type as a sortable column .
2739	Filter posts on load if page_type query string is set .
2740	Filter page types in post type list .
2741	Format the value of the property before it s returned to the application .
2742	Get labels from taxonomies .
2743	Get terms for specified taxonomy .
2744	Get matching value based on key from a term .
2745	Prepare property value .
2746	Search for stocks .
2747	Get historical data for a symbol .
2748	Get quote for a single symbol .
2749	Get exchange rate for two currencies . Accepts concatenated ISO 4217 currency codes .
2750	Retrieves currency exchange rates . Accepts concatenated ISO 4217 currency codes such as GBPUSD .
2751	Fetch quote data from API .
2752	Get attributes for column header tag
2753	Render column cell
2754	Render column cells appends
2755	Get all images within images directory without seeds subdirectories
2756	Set eager load fields
2757	Set default values for instance
2758	Get title as string
2759	Append element label and error label to form element and wrap it with div
2760	Append error label to element and wrap it with div
2761	Wrap content with div
2762	Add class to attributes array
2763	Register all admin routes
2764	Register routes to admin assets
2765	Register login and logout routes
2766	Add new process to the set .
2767	Get array of processes in the set having given status
2768	Build out - tree graph from defined Processes and their relations .
2769	Optimize order of processes using given strategy .
2770	Get count of processes status
2771	Get result counts of done processes
2772	Mark all dependant processes of given process as failed
2773	Get all wrapped processes that depends on process of given name .
2774	Print output from process
2775	Print error output from process
2776	Initialize check arguments and options values etc .
2777	Get version that should be downloaded ; if not set attempt to retrieve latest released version
2778	Get complete URL of the file to download
2779	Execute the download
2780	Select first option which text partially matches the argument .
2781	Store legacy of test under a custom name
2782	Store legacy of test getLegacyFilename is called to generate filename from the test class name
2783	Reads legacy of test getLegacyFilename is called to generate filename from the test class name . Raises exception if it is not found .
2784	Reads legacy specified by custom name . Raises exception if it is not found .
2785	Test if server URL is accessible and we can connected there
2786	Test if remote server is really a Selenium server and is ready to accept connection
2787	Get name of the cloud service we are connected to .
2788	Guess port for given service
2789	Detect cloud service using server status response
2790	Build Process instance for each testcase file
2791	Get array of groups that cause this class to be excluded .
2792	Take screenshot and HTML snapshot of the page and save it .
2793	Get url based on relative path of specific snapshot . In our implementation we prepend artifact s URL to given relative path to make it clickable in Jenkins output .
2794	Instantiate listeners in given directory and register them to given dispatcher
2795	Get full path to results file .
2796	Encapsulate given attribute value into valid xpath expression .
2797	Optimize order of tests in given tree based on their defined delay . The aim is to run as first processes having the longest delay of their sub - dependencies .
2798	Guess most appropriate data type acceptable by JSON
2799	Check if process is not running longer then specified timeout return error message if so .
2800	Resolve result of finished process
2801	Get array of unique executors
2802	Setup capabilities specific for continuous integration server
2803	Add custom configuration options that should be added to the default ones . Can be set only before initialization because the configuration is then immutable .
2804	Retrieve given configuration options values from environment . If value is not found throw and exception .
2805	Set queued processes without delay as prepared
2806	Flush output of the process
2807	Return a collection with the User favorited Model . The Model needs to have the Favoriteable trait
2808	This function counts all types of tests scenarios and writes in class members
2809	This function updates values in Summary block for each type of scenarios
2810	This function moves Summary block in the bottom of result report
2811	This function updates + and - button for viewing test steps in final report
2812	Add this Object to the user favorites
2813	Remove this Object from the user favorites
2814	Toggle the favorite status from this Object
2815	Check if the user has favorited this Object
2816	Return a collection with the Users who marked as favorite this Object .
2817	Return the permissions used in the module .
2818	This would enter the necessary language file contents to respective language files .
2819	Creating View Files .
2820	Creating Table File .
2821	Creating Event Files .
2822	Generating the file by replacing placeholders in stub file .
2823	getting the stub folder path .
2824	Checking the path for a file if exists .
2825	Checking if the table exists .
2826	select one random server
2827	select all the servers
2828	select one server
2829	select one server according to the key
2830	call a redis command
2831	set the current db
2832	delete a key
2833	set a value
2834	check if a key exist
2835	return the type of a key
2836	set the key ttl
2837	use for debugging !
2838	execute multiple commands
2839	return an array or server with the number of keys stored on each
2840	add a task to the execution list
2841	Dispatch custom event
2842	Factorisation of the timing method find the value timed
2843	Replaces a string with a method name
2844	Merge config tags with tags manually sent with the event
2845	dispatchMemory dispatch a memory event
2846	dispatchRequestTime dispatch the request time . This time is a fake one because some actions are performed before the initialization of the request It is ~100ms smaller than the real kernel time .
2847	Create new event object
2848	Match SRID in EWKT object
2849	Match spatial geometry object
2850	Match a coordinate pair
2851	Match a number and optional exponent
2852	Match a list of coordinates
2853	Match nested lists of coordinates
2854	Match MULTIPOLYGON value
2855	Match GEOMETRYCOLLECTION value
2856	Match token at current position in input
2857	Create exception with descriptive error message
2858	Creates an array of Response objects from a given response array
2859	Returns if exists the request time
2860	Creates an http client to consume the phantomjs API
2861	Sends a command to the browser
2862	Get redirect url if response is a redirect
2863	Check and fix render options
2864	Renders a page or selection to a file given by path
2865	Renders base64 a page or selection to a file given by path
2866	Find elements given a method and a selector
2867	Find elements within a page method and selector
2868	Set an attribute to the given element in the given page
2869	Sends the order to execute a key event on a given element
2870	Sends the command to select and option given a value
2871	Set the debug mode on the browser
2872	Sets or unsets web proxy .
2873	Get all the network traffic that the page have created
2874	Gets the cookies on the browser
2875	Sets a cookie on the browser expires times is set in seconds
2876	Get the javascript errors found during the use of the phantomjs
2877	Returns the javascript errors found
2878	Creates a new node
2879	Compiles a variable node
2880	Creates a trie node
2881	Flushes any text from the buffer
2882	Lexes a number lexeme
2883	Lexes a punctuation lexeme
2884	Lexes a quoted string lexeme
2885	Lexes a text character lexeme
2886	Lexes a variable name lexeme
2887	Adds a route to the collection
2888	Gets the route with the input name
2889	Creates a trie
2890	Normalizes a name
2891	Tests the current token to see if it matches the input type and optionally the input value and throws an exception if the token did not match
2892	Gets the current token
2893	Gets the next token if there is one
2894	Gets the next token if the current one matches the input type and optionally performs a value check
2895	Peeks ahead at the next token
2896	Adds a child to this node
2897	Adds a child node and recursively merges all its children too
2898	Gets all the child nodes
2899	Adds a literal child node
2900	Adds a variable child node
2901	Builds all the route builders in the registry
2902	Creates a group of routes that share similar options
2903	Creates a route builder with some values already set
2904	Applies a group s attributes to the input route builder
2905	Applies a group s constraints to the input route builder
2906	Applies a group s middleware to the input route builder
2907	Applies all the group options to a route
2908	Registers the built - in rule factories
2909	Gets the list of matching route candidates for a particular node
2910	Builds a route object from all the settings in this builder
2911	Binds the controller the route uses to be a method
2912	Binds a custom attribute to the route This is useful for custom route constraint matching
2913	Binds many custom attributes to the route This is useful for custom route constraint matching
2914	Binds constraints to this route
2915	Binds many middleware bindings to the route
2916	Binds a single middleware class to the route
2917	Parses a punctuation token
2918	Parses a text token
2919	Parses a stream of tokens and adds it to an abstract syntax tree
2920	Parses a stream of variable tokens
2921	Parses a single variable rule
2922	Gets whether or not a segment matches this node
2923	Group routes with the given attributes
2924	Map a controller to a route and set basic attributes
2925	Dispatch routes and run the application
2926	Check if given request method matches given route method
2927	Check if given request domain matches given route domain
2928	Check if given request uri matches given uri method
2929	Run the controller of the given route
2930	Arrange parameters for given method
2931	Convert route to regex
2932	Convert route parameter to regex
2933	Map a controller to given route for all the http methods
2934	Define a parameter pattern
2935	Generate URL for given route name It returns Null if route with given name is not found .
2936	Prepare router to dispatch routes
2937	Gets the URI .
2938	Validates the Wechat s response and returns it whether the status code is 200 .
2939	Validates the Bit . ly s response and returns it whether the status code is 200 .
2940	Validates the Sina s response and returns it whether the status code is 200 .
2941	Gets a provider by name .
2942	Implement Etag support .
2943	Get formatted details for an IP address .
2944	Format details and return as an object .
2945	Get details for a specific IP address .
2946	Set the IP address key to the specified value .
2947	If cache maxsize has been reached remove oldest elements until limit is reached .
2948	Make post request
2949	return error html .
2950	set group route .
2951	Parse path .
2952	check route is variable route or not .
2953	To avoid memory leaks clear variable route cache with LRU when data out of array length .
2954	set map tree .
2955	get redirect url
2956	check middlewares .
2957	run dispatch .
2958	init db connections .
2959	create http response header .
2960	get http response header .
2961	get last insert ID for postgresql
2962	create Dependency injection params .
2963	set a singleton instance .
2964	get a singleton instance .
2965	register class instantiate class set instance to singleton .
2966	get Instance from reflection info .
2967	get Instance if instance is not singleton set it to singleton .
2968	run class method .
2969	run http app .
2970	Initialize some devices like redis \ database ...
2971	set pipes single mode .
2972	init redis clients .
2973	Subscribe to a set of given channels for messages . read_write_timeout = > 0 to solve the timeout problem
2974	Subscribe to a set of given channels with wildcards .
2975	reset all attribute memory - resident mode need manual reset attr
2976	wrap prepare sql
2977	prepare and execute if timeout auto reconnect
2978	bind all params
2979	set table prefix
2980	add backquote sto field support alias mode prefix mode func mode
2981	parse argurment create build attr store bind param
2982	store build attr to tmp
2983	restore build attr from tmp
2984	do sub build
2985	set select cols
2986	build where string
2987	build orWhere string
2988	build whereIn string
2989	build whereBetween string
2990	build whereNull string
2991	build whereBrackets string
2992	build whereExists string
2993	build whereInSub string
2994	build groupBy string
2995	build having string
2996	build orHaving string
2997	build orderBy string
2998	build join string
2999	build rightJoin string
3000	get paginate data
3001	get assoc data
3002	get assoc row data
3003	get field list
3004	native query add auto reconnect
3005	native prepare add auto reconnect
3006	begin Transaction add auto reconnect
3007	ExceptionHandler handle .
3008	Generate nanoid via optional modes
3009	The original API of nanoid . Use it be careful Please make sure you have been implements your custom GeneratorInterface as correctly . Otherwise use the build - in default random bytes generator
3010	Generate secure URL - friendly unique ID . By default ID will have 21 symbols to have same collisions probability as UUID v4 .
3011	Normalize DSN connection string .
3012	Returns new Query object with connection already set .
3013	Execute Expression by using this connection .
3014	Starts new transaction .
3015	Commits transaction .
3016	Rollbacks queries since beginTransaction and resets transaction depth .
3017	Return last inserted ID value .
3018	Resets arguments .
3019	Recursively renders sub - query or expression combining parameters .
3020	Soft - escaping SQL identifier . This method will attempt to put escaping char around the identifier however will not do so if you are using special characters like . ( or escaping char .
3021	Render expression and return it as string .
3022	Return formatted debug output .
3023	Executes expression and return whole result - set in form of array of hashes .
3024	Executes expression and return first value of first row of data from result - set .
3025	Executes expression and returns first row of data from result - set as a hash .
3026	Specify a table to be used in a query .
3027	Adds condition to your query .
3028	Renders one condition .
3029	Implements GROUP BY functionality . Simply pass either field name as string or expression .
3030	Sets field value for INSERT or UPDATE statements .
3031	Set options for particular mode .
3032	Orders results by field or Expression . See documentation for full list of possible arguments .
3033	Switch template for this query . Determines what would be done on execute .
3034	Limit how many rows will be returned .
3035	Parses a . env string
3036	Gets the regex matches in the string
3037	Constructs a ParseException message
3038	Returns if value starts with a value
3039	Get variable matches inside a string
3040	Checks to see if the variable has a parameter expansion
3041	Fetches and sets the parameter expansion
3042	Fetches the parameter type symbol
3043	Splits the parameter expansion into variable and default
3044	Parses and sets the variable and default if needed
3045	Parses and sets the variable parameter to default
3046	Checks to see if a variable exists
3047	Get variable value
3048	Parses a . env key
3049	Opens the . env parses it then returns the contents
3050	Parses the . env line by line
3051	Parses a line of the . env
3052	Parses a export line of the . env
3053	Gets the key = value items from the line
3054	Returns the contents of the . env
3055	Start a single task .
3056	Start a workflow instance .
3057	Find a workflow instance .
3058	Return Wait timestamp or duration depending on methods used .
3059	Return properties of a class and all its inheritance hierarchy .
3060	Configure the sitemap source manager .
3061	Fix the sitemap configuration .
3062	Adding source with his group .
3063	Add context related BlockService if found .
3064	Initialize breadcrumb menu .
3065	Get all the fonts that are residing in the fonts directory and have the right extention . Index them by path as key and pathinfo array as value
3066	Load a font and get all unicode characters available in that font .
3067	Generate a css file that creates font families for each font file in the font directory
3068	1 . Hash password using bcrypt - base64 - SHA256 2 . Encrypt - then - MAC the hash
3069	For migrating from an older version of the library
3070	Runs the analysis of the given website with all given parameters .
3071	This function creates the credentials header for the command line .
3072	Returns an array representing the configuration .
3073	Filter foreign domains before request is fired
3074	Initializes all the commands .
3075	Find all the templates in the bundle and in the kernel Resources folder .
3076	Find templates in the given bundle .
3077	Execute a command .
3078	Get the string between the given start and end .
3079	Sanitize the string for teasing .
3080	Replace the first occurrence of a string .
3081	Replace the last occurrence of a string .
3082	Get the possessive version of a string .
3083	Get a segment from a string based on a delimiter . Returns an empty string when the offset doesn t exist . Use a negative index to start counting from the last element .
3084	Alias for find .
3085	PayUMoney Encrypt Function
3086	PayUMoney Decrypt Function
3087	CCAvenue Encrypt Function
3088	CCAvenue Decrypt Function
3089	Citrus Encrypt Function
3090	Citrus Decrypt Function
3091	EBS Encrypt Function
3092	Add a range
3093	Add a modifier
3094	Add a range of pages
3095	Add raw PDF from string
3096	Add PDF from file
3097	Add files using iterator
3098	Factory method for creating a Linked CRS object from properties .
3099	Set optional CRS and BoundingBox arguments passed to a constructor .
3100	Creates an UnserializationException for a value with an invalid type .
3101	Creates an UnserializationException for a property with an invalid type .
3102	Factory method for creating a Named CRS object from properties .
3103	Get the path to the application configuration files .
3104	Get the application namespace .
3105	Loads the configs for Cache and puts data into the container .
3106	Returns a new master node that can be used to derive subnodes
3107	Returns a string representing the native balance
3108	Returns the balance in stroops
3109	Returns the numeric balance of the given asset
3110	Returns an AssetAmount representing the balance of this asset
3111	Returns the balance of a custom asset in stroops
3112	Returns the hex - encoded checksum for the raw bytes in the entropy
3113	Utility method to convert a bitstring to hex .
3114	Converts a mnemonic to raw bytes
3115	This is called by asset issuers to authorize a trustline established by a client account
3116	This is called by asset issuers to revoke a trustline established by a client account
3117	Child classes MUST call this method to get the header for the operation and then append their body
3118	Variable - length opaque data
3119	Encodes an optional data value as XDR .
3120	Returns an array of unique sha256 hashes in this bucket level
3121	Returns true if the account exists on this server and has been funded
3122	If set TrustLines are created with authorized set to false requiring the issuer to set it for each TrustLine
3123	If set the authorized flag in TrustLines can be cleared . Otherwise authorization cannot be revoked
3124	Returns the raw bytes of the checksum for the public key
3125	Reads a fixed opaque value and returns it as a string
3126	Parses the raw response data and populates this object
3127	Adds signatures using the given keypairs or secret key strings
3128	Submits the transaction contained in the TransactionBuilder to the network
3129	Parse a textual representation of patches and return a list of patch objects .
3130	Take a list of patches and return a textual representation .
3131	Increase the context until it is unique but don t let the pattern expand beyond Match - > maxBits .
3132	Given an array of patches return another array that is identical .
3133	Compute and return the score for a match with e errors and x location . Accesses loc and pattern through being a closure .
3134	Initialise the alphabet for the Bitap algorithm .
3135	Convert a diff array into a pretty HTML report .
3136	Crush the diff into an encoded string which describes the operations required to transform text1 into text2 . E . g . = 3 \ t - 2 \ t + ing - > Keep 3 chars delete 2 chars insert ing . Operations are tab - separated . Inserted text is escaped using %xx notation .
3137	Given the original text1 and an encoded string which describes the operations required to transform text1 into text2 compute the full diff .
3138	Compute the Levenshtein distance ; the number of inserted deleted or substituted characters .
3139	Find the differences between two texts . Assumes that the texts do not have any common prefix or suffix .
3140	Do a quick line - level diff on both strings then rediff the parts for greater accuracy . This speedup can produce non - minimal diffs .
3141	Given the location of the middle snake split the diff in two parts and recurse .
3142	Determine the common prefix of two strings .
3143	Determine the common suffix of two strings .
3144	Determine if the suffix of one string is the prefix of another .
3145	Do the two texts share a substring which is at least half the length of the longer text? This speedup can produce non - minimal diffs .
3146	Does a substring of shorttext exist within longtext such that the substring is at least half the length of longtext?
3147	Split two texts into an array of strings . Reduce the texts to a string of hashes where each Unicode character represents one line .
3148	Gets a list of phones from the given notifiable .
3149	Get the major Laravel version number .
3150	Register the regular Pug compiler .
3151	Get the configuration which is keyed differently in L5 vs l4 .
3152	Common pug compiler constructor .
3153	Lazy load Pug and return the instance .
3154	Returns cache path .
3155	Get an option from pug engine or default value .
3156	Determine if the view at the given path is expired .
3157	Return path and set it or get it from the instance .
3158	Get the AmoCRM client instance .
3159	Get the AmoCRM B2BFamily helper instance .
3160	Return a hashed print from input file or content .
3161	Resolve a template file path .
3162	Display a template .
3163	Get options from extensions list and default options .
3164	Cleanup previously set options .
3165	Reset all static options filters and extensions .
3166	Get a renderer with global options and argument options merged .
3167	Add a filter . Throws an exception if the name is already taken .
3168	Add a keyword . Throws an exception if the name is already taken .
3169	Same method as cacheDirectory but with textual human - friendly output .
3170	Run the CLI applications with arguments list return true for a success status false for an error status .
3171	Yield all available methods .
3172	Dump the list of available methods as textual output .
3173	Get the errors which are specific to MetaDescription
3174	Get the list for the GridField
3175	Mark duplicate attributes
3176	Find duplicate attributes within a list
3177	Remove pages with empty attributes
3178	Update the columns needed when importing from CSV
3179	Handle the incoming request .
3180	Get elapsed time
3181	Read reponses from connection
3182	Convert arguments to string
3183	Get and validate command arguments
3184	Throw exception if command not supported by this version of Redis
3185	Register Rediska autoload
3186	Unregister Rediska autoload
3187	Get Rediska path
3188	Get a list of connections by key name
3189	Get connection by channel name
3190	Get channels by connection
3191	Get parameter or parameters by pattern
3192	Set value to parameter
3193	Throw if config not supported by Redis
3194	Create a new queue
3195	Delete a queue and all of it s messages
3196	Return the approximate number of messages in the queue
3197	Send a message to the queue
3198	Get messages in the queue
3199	Delete a message from the queue
3200	Get total elapsed time
3201	Set value to a hash field or fields
3202	Array magic for set a field
3203	Increment field value in hash
3204	Remove field from hash
3205	Write session data
3206	Subscribe to channel or channels
3207	Publish a message to channel
3208	Add message response to buffer
3209	Throw if PubSub not supported by Redis
3210	Catch unserialize notice
3211	Create a new queue in the queues set
3212	Delete a queue from the queues set
3213	Get queues cache . Fetches data from redis on first call .
3214	Marks the given keys to be watched for conditional execution of a transaction .
3215	Flushes all the previously watched keys for a transaction .
3216	Add command to transaction
3217	Create new post
3218	Read your posts
3219	Create a new instance of Rediska_Zend_Log_Writer_Redis
3220	Add the specified member to the Sorted set
3221	Get count of members from sorted set by min and max score
3222	Get Sorted set by score
3223	Remove members from sorted set by score
3224	Increment score of element
3225	Get Sorted set by Rank
3226	Remove all elements in the sorted set at key with rank between start and end
3227	Get rank of member
3228	Store to key union between the sorted sets
3229	Store to key intersection between sorted sets
3230	Get Sorted set values
3231	Add array to Sorted set
3232	Set Rediska client name
3233	Get Rediska connection instance by key name
3234	Get all Rediska connection instances
3235	Chain method to work with keys on specified by alias server
3236	Subscribe to PubSub channel or channels
3237	Get Redis server configuration
3238	Set key distributor . See options description for more information .
3239	Get Rediska serializer
3240	Get command instance
3241	Get command lower name and throw exception if command not present
3242	Execute pipelined commands
3243	Add command to pipeline
3244	Write command to connection
3245	Set response callback
3246	Transfrom Multi Bulk command to string
3247	Append value to the end of List
3248	Append value to the head of List
3249	Trim the list at key to the specified range of elements
3250	Set a new value as the element at index position of the List
3251	Insert a new value as the element after the reference value
3252	Insert a new value as the element before the reference value
3253	Insert a new value as the element before or after the reference value
3254	Delete element from list by value
3255	Return and remove the first element of the List
3256	Return and remove the first element of the List and block if list empty or not exists
3257	Return and remove the last element of the List
3258	Return and remove the last element of the List and block if list empty or not exists .
3259	Add array to List
3260	Load value with given id from cache
3261	Save some string datas into a cache record
3262	Remove a cache record
3263	Clean some cache records
3264	Set the frontend directives
3265	Return an array of stored cache ids which don t match given tags
3266	Return an array of metadatas for the given cache id
3267	Cleans up expired keys and list members
3268	Add the specified member to the Set
3269	Remove the specified member from the Set
3270	Move the specified member from one Set to another atomically
3271	Return the intersection between the Sets
3272	Return the union between the Sets
3273	Return the difference between the Sets
3274	Get Rediska instance
3275	Set key value
3276	Set and expire
3277	Returns the bit value at offset in the string value stored at key
3278	Get value if value not present set it from chain method
3279	Users who follow given userId
3280	Users who are followed by given userId
3281	Start following given userId
3282	Move key to other Db
3283	Set expire time
3284	Get rediska and set specified connection
3285	Set access mode
3286	Add Rediska Return true if new instance and false if instance overwrited
3287	Get all Rediska instances
3288	Instance from options if not yet
3289	Increment the count for the specified subject .
3290	Resets the counter for the specified subject .
3291	Get the bucket associated with the current time .
3292	Adds the commands needed for the increment function
3293	Adds the commands needed for the count function
3294	Create socket connection
3295	Get read buffer
3296	Read length bytes from connection stram
3297	Read line from connection stream
3298	Set read timeout
3299	If a stream context is provided use it creating the socket .
3300	Read and throw exception if somthing wrong
3301	Validates the nonce against given context .
3302	Create a persisting queue and bind it to an exchange
3303	Acknowledge the reception of the message .
3304	Acknowledge an error during the consumption of the message
3305	Returns the message parameters
3306	Run the daemon
3307	Stop the daemon
3308	Build the exception from another timeout exception .
3309	Build the Handler .
3310	Handle the return value .
3311	Return the driver for your system
3312	Aknowledge an error during the consumption of the message
3313	Close the connection
3314	Consumes a message .
3315	Replace model name .
3316	Parse the name and format according to the root namespace .
3317	Process dataTables editor action request .
3318	Process create action request .
3319	Display success data in dataTables editor format .
3320	Process edit action request .
3321	Process remove action request .
3322	Perform a single access check operation on a given attribute subject and token .
3323	Build html report .
3324	Reads a zero - byte terminated string from the current position of the byte buffer
3325	Loads the global unlock percentages of all achievements for the given game
3326	Closes the underlying socket
3327	Reads the given amount of data from the socket and wraps it into the buffer
3328	Sends the given packet to the server
3329	Reads a single packet from the socket
3330	Executes the given command on the server via RCON
3331	Requests a challenge number from the server to be used for further requests
3332	Wraps the given command in a RCON request packet and send it to the server
3333	Connects the TCP socket to the host with the given IP address and port number
3334	Returns a list of game server matching the given region and filters
3335	Updates the item definitions of this schema using the Steam Web API
3336	Converts a 64bit numeric SteamID as used by the Steam Community to a SteamID as reported by game servers
3337	Converts a SteamID as reported by game servers to a 64bit numeric SteamID as used by the Steam Community
3338	Resolves a vanity URL of a Steam Community profile to a 64bit numeric SteamID
3339	Fetches the friends of this user
3340	Fetches the games this user owns
3341	Fetches the groups this user is member of
3342	Returns this user s 64bit SteamID
3343	Returns the time in minutes this user has played this game in the last two weeks
3344	Returns the total time in minutes this user has played this game
3345	Fetchs data from the Steam Community by querying the XML version of the profile specified by the ID of this Steam ID
3346	Rotate this server s IP address to the next one in the IP list
3347	Initializes the sockets to communicate with the Source server
3348	Authenticates the connection for RCON communication with the server
3349	Connects the UDP socket to the host with the given IP address and port number
3350	Creates a new instance of the cacheable object or returns an already cached one
3351	If available returns the cached instance for the object it is called on
3352	Returns whether an object with the given ID is already cached
3353	Saves this object in the cache
3354	Returns a complete list of all values for the cache IDs of the cacheable object
3355	Initializes the sockets to communicate with the GoldSrc server
3356	Tries to establish RCON authentication with the server with the given password
3357	Closes the socket
3358	Receives the specified amount of data from the socket
3359	Waits for data to be read from this socket before the specified timeout occurs
3360	Sends the specified data to the peer this socket is connected to
3361	Loads the news for the given game with the given restrictions
3362	Returns the class symbols for each class this player has equipped this item
3363	Returns the number of members this group has
3364	Returns the members of this group
3365	Fetches a specific page of the member listing of this group
3366	Loads information about and members of this group
3367	Returns the item schema
3368	Updates the contents of the backpack using Steam Web API
3369	Returns the name for each bot this player has equipped this item
3370	Returns all Golden Wrenches
3371	Sets the Steam Web API key
3372	Fetches data from Steam Web API using the specified URL
3373	Sends the given RCON packet to the server
3374	Returns a list of players currently playing on this server
3375	Sends the specified request to the server and handles the returned response
3376	Sends a A2S_INFO request to the server and measures the time needed for the reply
3377	Sends a A2S_PLAYERS request to the server and updates the players data for this server
3378	Extends a player object with information retrieved from a RCON call to the status command
3379	Returns the leaderboard for the given game and leaderboard ID or name
3380	Returns an array containing all of a game s leaderboards
3381	Loads the leaderboards of the specified games into the cache
3382	Returns the entry on this leaderboard for the user with the given SteamID
3383	Returns the entries on this leaderboard for a given rank range
3384	Loads leaderboard data for the given parameters
3385	Loads leaderboard data for the given user
3386	Parses leaderboard entries from the given XML data
3387	Creates a new or cached instance of the game specified by the given XML data
3388	Returns whether the given version of the game with the given application ID is up - to - date
3389	Returns the overall number of players currently playing this game
3390	Creates a stats object for the given user and this game
3391	Displays the specified work orders parts and inventory .
3392	Creates a new event .
3393	Displays the specified event .
3394	Updates an event .
3395	Deletes the specified event .
3396	Displays the specified work order .
3397	Displays the form for editing the specified work order .
3398	Updates the specified work order .
3399	Displays the form for taking inventory stock and attaching it to the specified work order .
3400	Processes taking quantity from the stock and inserting it into the work order .
3401	Displays the form for returning parts to the inventory .
3402	Processes returning parts back into the inventory .
3403	Displays the users specified work request .
3404	Displays a users work request .
3405	Updates a users work request .
3406	Deletes a users work request .
3407	Filters inventory results by specified location .
3408	Creates a new report on the specified event .
3409	Displays the form for adding attachments to the specified work order .
3410	Processes uploading and adding attaachments to the specified work order .
3411	Displays the work order attachments .
3412	Displays the form for editing the specified work order attachment .
3413	Updates the specified work order attachment .
3414	Deletes the specified work order attachment .
3415	Returns a new form of the specified work order report .
3416	Returns an html icon class of the type of notification by retrieving it from the configuration file .
3417	Displays all the stock movement entries for the specified stock for the specified inventory .
3418	Displays a stock movement record .
3419	Rolls back an inventory stock movement .
3420	Retrieves the revised status attribute .
3421	Retrieves the revised priority attribute .
3422	Closes all sessions on the current work order .
3423	Checks if the user is currently checked into the current work order .
3424	Returns an HTML label for the work orders started at date .
3425	Returns an HTML label for the work orders completed at date .
3426	Completes the work order by saving the completed at timestamp to now .
3427	Returns a new table of all statuses .
3428	Returns a new form of the specified status .
3429	Displays all priorities .
3430	Creates a new priority .
3431	Displays the form for editing the specified priority .
3432	Updates the specified priority .
3433	Filters query by the inputted inventory item stock quantity .
3434	Filters query by the inputted inventory sku .
3435	Mutator for showing the total current stock of the inventory item .
3436	Retrieves the revised metric attribute .
3437	Retrieves a valid operator from the specified string .
3438	Allows all columns on the current database table to be sorted through query scope .
3439	Returns the full path of the uploaded file .
3440	Displays all statuses .
3441	Creates a new status .
3442	Displays the form for editing the specified status .
3443	Updates the specified status .
3444	Displays the form for creating a variant for the specified inventory item .
3445	Creates a variant of the specified inventory item .
3446	Displays the form for creating a work order report .
3447	Creates a new work order report .
3448	Returns a new table of all work orders .
3449	Returns a new table of all work orders assigned to the current user .
3450	Displays a table of all unique sessions on the specified work order .
3451	Returns a new form for work orders .
3452	Returns a new form for the specified work order comment .
3453	Uploads and attaches files for the current relation .
3454	Returns a new table of all assets .
3455	Returns a new form for the specified asset .
3456	Returns a table of all inventory items .
3457	Returns a table of stocks for the specified inventory item .
3458	Returns a new form for creating a new inventory item .
3459	Returns a new navbar for the inventory stocks index .
3460	Processes storing the attachment record .
3461	Updates the specified ticket upload .
3462	Returns a new table of all metrics .
3463	Returns a new table of all revisions .
3464	Uploads images and attaches them to the specified asset .
3465	Displays the asset image .
3466	Updates the specified asset image upload .
3467	Displays all metrics .
3468	Creates a new metric .
3469	Displays the form for editing the specified metric .
3470	Displays all assets .
3471	Creates a new asset .
3472	Displays the form for editing the specified asset .
3473	Updates the specified asset .
3474	Allows all tables extending from the base model to be scoped by ID .
3475	Returns the proper response to user . If the request was made from ajax then an json response is sent . If a request is a typical request without ajax a user is sent a redirect with session flash messages .
3476	Returns input from the client . If clean is set to true the input will be ran through the purifier before it is returned .
3477	Returns the complete nested set table in a nested list .
3478	Renders the specified category and it s children in single dimension array .
3479	Registers view composers during boot .
3480	Deletes the current attachment as well as the file .
3481	Displays all stocks for the specified inventory item .
3482	Displays the from for creating a stock for .
3483	Creates a new stock on the specified item .
3484	Displays the specified items stock .
3485	Displays the form for editing the specified items stock .
3486	Updates the specified inventory stock .
3487	Deletes the specified inventory stock .
3488	Displays all meters for the specified asset .
3489	Displays the form for creating a new meter for the specified asset .
3490	Creates a new meter for the specified asset .
3491	Displays the specified meter for the specified asset .
3492	Displays the form for editing the specified meter for the specified asset .
3493	Updates the specified meter attached to the specified asset .
3494	Deletes the specified meter for the specified asset .
3495	Creates a new notification for the specified work order .
3496	Updates the specified notification for the specified work order .
3497	The work order started at formatted string .
3498	The work order completed at formatted string .
3499	Displays the current users assigned work orders .
3500	Returns a new form for the specified comment .
3501	Returns the number of hours a session lasted with decimals .
3502	Presents the correct start date formatted for editing .
3503	Presents the correct end date formatted for editing .
3504	Presents the correct end time formatted for editing .
3505	Presents the API events recurrence frequency in a nicer format .
3506	Returns the API events actual recurrence frequency array .
3507	Returns the API events actual recurring days array .
3508	Returns the events tags view .
3509	Create a new stock entry for the specified inventory item .
3510	Updates the specified stock for the specified inventory .
3511	Removes the specified stock from the specified inventory .
3512	Returns a new table of all the specified work orders attachments .
3513	Returns a new form for the specified work order attachment .
3514	Handle a login request to the application .
3515	Send the response after the user was authenticated .
3516	Attaches roles depending on the users active directory group .
3517	Captures the Inventory Stock models deleted event and cascades the delete to all of it s movements .
3518	Captures the Inventory Stock models restored event and cascades the restore to all of it s movements .
3519	Returns a new table of all priorities .
3520	Returns a new form for priorities .
3521	Returns a new table of stocks for the specified inventory item for work order part selection .
3522	Returns a new form for taking stock from the specified inventory for the specified work order .
3523	Returns a new form for putting the stock from the specified work order back into inventory .
3524	Deletes the specified inventory item .
3525	Generates a new session flash message .
3526	Displays the form for creating a report for the specified work order .
3527	Creates a new report for the specified work order .
3528	Displays all of the specified eventables events .
3529	Creates a new event and attaches it to the specified eventable .
3530	Displays the specified event attached to the specified eventable .
3531	Updates the specified event attached to the specified eventable .
3532	Deletes the specified event attached to the specified eventable .
3533	Filters results by specified category .
3534	Returns a form for the login page .
3535	Uploads manuals and attaches them to the specified asset .
3536	Displays the asset manual .
3537	Updates the specified asset manual upload .
3538	Attaches the specified work order to the specified asset .
3539	Removes the specified work order from the specified asset .
3540	Creates a new work order customer update .
3541	Processes deleting a work order update .
3542	Displays all stocks and variants available for selection .
3543	Displays the form for taking inventory for the specified work order .
3544	Processes taking inventory for the specified work order .
3545	Displays the form for putting inventory from the work order back into the specified stock .
3546	Processes returning stock from the work order back into the specified inventory .
3547	Displays all work requests .
3548	Displays the form for editing the specified work request .
3549	Updates the specified work request .
3550	Shows the form for creating a new category or category node if an ID is supplied .
3551	Processes storing a new category or storing a new category underneath another if an ID is specified .
3552	Show the form for editing the specified category .
3553	Processes updating the specified category .
3554	Processes removing the specified category .
3555	Returns a new table of all work order sessions .
3556	Displays unique sessions per worker and totals their hours .
3557	Captures the Inventory models deleted event and cascades the delete to all of it s stocks .
3558	Captures the Inventory models restored event and cascades the restore to all of it s stocks .
3559	Displays all inventory items .
3560	Creates a new inventory item .
3561	Displays the specified inventory item .
3562	Displays the form for editing the specified inventory item .
3563	Returns a new table of all stocks of the specified inventory item .
3564	Returns a new table of all movements for the specified inventory stock .
3565	Returns a new form of the specified inventory stock .
3566	Returns a new navbar for the inventory stock index .
3567	Returns a new table of all parts attached to the specified work order .
3568	Displays all inventory available for selection .
3569	Returns a new navbar for the work order parts table .
3570	Displays all sessions for the specified work order .
3571	Starts the current users session for the specified work order .
3572	Ends the current users session for the specified work order .
3573	Returns the change of a stock .
3574	Creates a note for the specified inventory .
3575	Displays the specified inventory note .
3576	Updates the specified note for the specified inventory .
3577	Deletes the specified note attached to the specified inventory .
3578	Accessor for viewing the last movement of the stock .
3579	Accessor for viewing the user responsible for the last movement .
3580	Accessor for viewing the quantity combined with the item metric .
3581	Returns the stocks put back some work order button view .
3582	Returns the stocks put back all work order button view .
3583	Ends a maintenance workers session on a work order .
3584	Returns a new table of all work requests .
3585	Returns a new form for the specified work request .
3586	Assigns workers to the specified work order ID .
3587	Removes the specified assignent from the specified work order .
3588	Create a datalist box field .
3589	Create a placeholder select element option .
3590	Get the form appendage for the given method .
3591	Render a custom component .
3592	Prepare the component data while respecting provided defaults .
3593	Register Blade directives .
3594	Create a new model based form builder .
3595	Format the label value .
3596	Create a HTML reset input element .
3597	Create a submit button element .
3598	Get value from current Request .
3599	Generate a HTML link to an asset .
3600	Generate a HTML link to a named route .
3601	Create the HTML for a listing element .
3602	Build an HTML attribute string from an array .
3603	Register the HTML builder instance .
3604	Register the form builder instance .
3605	Create a search input field .
3606	Create a datetime input field .
3607	Create a file input field .
3608	remove the first line of xml string
3609	Load a given locale - file as base for the dictionary
3610	parse a dictionary - file to create an ini - file from it .
3611	Get all patterns for a given word .
3612	Unify the given locale to a default format .
3613	Pass the given string through the given tokenizers
3614	Split the given input into tokens using punktuation marks as splitter
3615	Set the options - object for this filter
3616	Add an item to the registry .
3617	Get an array of hyphenation - patterns for a given word .
3618	Set the filters
3619	Add a filter to the options - array
3620	Set the tokenizers to use
3621	Add a tokenizer to the tomeizer - list
3622	Create an Option - Object by parsing a given file .
3623	Get the text of the pattern
3624	Get the pattern of this instance
3625	Set the Options
3626	Get the Options
3627	Add a Dictionary to the Hyphenator
3628	Add a Filter to the Hyphenator
3629	Add a tokenizer to the tokenizer - registry
3630	Get the tokenizers
3631	Get the dictionaries
3632	Get the filters
3633	This method does the actual hyphenation .
3634	Get the hyphenation pattern for the contained tokens
3635	Hyphenate a Token - Object
3636	Set the default home - Path
3637	Get the default Home - Path
3638	Set the instance - home - Path
3639	Create a new Hyphenator - Object for a certain locale
3640	autoload classes .
3641	Replace a given token with an array of new tokens
3642	Get a Token entry by it s key
3643	Merge the given Hyphenation patterns to one pattern for the given token
3644	Get a Filters entry by it s key
3645	Pass the given string through the given Filter
3646	Returns application token
3647	batch process orders
3648	Perform migration scripts on a single order .
3649	Convert shipping and tax columns into modifiers
3650	Performs calculation function on un - calculated orders .
3651	legacy function for working out popularity
3652	This module always requires a page model .
3653	Create a payment model and provide link to redirect to external gateway or redirect to order link .
3654	Map shop data to omnipay fields
3655	Create a new payment for an order
3656	Complete payment processing - send receipt - update order status accordingling - fire event hooks
3657	Determine if an order can be placed .
3658	Convert ISO abbreviation to full translated country name
3659	Set payment method
3660	Gets the selected payment method from the session or the only available method if there is only one .
3661	Send customer a confirmation that the order has been received
3662	Notify store owner about new order .
3663	Sends an email to the admin that an order has been cancelled
3664	Helper for creating a url
3665	This is used here and in VariationForm and AddProductForm
3666	Handle index requests
3667	Displays order info and cart contents .
3668	Create SQL where filter
3669	Save the changes to the form
3670	Save the changes to the form and redirect to the checkout page
3671	Retrieve a modifier of a given class for the order . Modifier will be retrieved from database if it already exists or created if it is always required .
3672	Get unit price for this item . Fetches from db or Buyable based on order status .
3673	Calculates the total for this item . Generally called by onBeforeWrite
3674	Intersects this item s required_fields with the data record . This is used for uniquely adding items to the cart .
3675	Recalculate total before saving to database .
3676	Overloaded relationship for getting versioned variations
3677	Convert address to a single string .
3678	Get location of user
3679	A form for updating cart items
3680	Calculates shipping cost based on Product Weight .
3681	Calculate the total weight of the order
3682	Sums up all of desired field for items and multiply by quantity . Optionally sum product field instead .
3683	Add up the totals of all the order items in this list .
3684	Save selected attributes - somewhat of a hack .
3685	Override viewer to get correct template for first step
3686	Get related product - live version if in cart or - historical version if order is placed
3687	Adds variations specific fields to the CMS .
3688	Pass an array of attribute ids to query for the appropriate variation .
3689	Generates variations based on selected attributes .
3690	Make sure variations are deleted with product .
3691	Returns the first available component with the given class or interface .
3692	Get combined form fields
3693	Validate every component against given data .
3694	Get combined data
3695	Set data on all components
3696	Helper function for saving data from other components .
3697	Get the current order or return null if it doesn t exist .
3698	Set the current cart
3699	Helper that only allows orders to be started internally .
3700	Adds an item to the cart
3701	Remove an item from the cart .
3702	Remove a specific order item from cart
3703	Sets the quantity of an item in the cart . Will automatically add or remove item if necessary .
3704	Update quantity of a given order item
3705	Finds or makes an order item for a given product + filter .
3706	Finds an existing order item .
3707	Store old cart id in session order history
3708	Get the tax amount to charge on the order .
3709	Convert a numeric price to the shop currency
3710	set image based on filename
3711	Adds paragraphs to content .
3712	Get list of allowed countries
3713	For shops that only sell to a single country this will return the country code otherwise null .
3714	Convert iso country code to English country name
3715	Get the cart and do last minute calculation if necessary .
3716	Finds or creates values for this type .
3717	Returns a dropdown field for the user to select a variant .
3718	Retrieve a set of products based on the given parameters . Checks get query for sorting and pagination .
3719	Loop down each level of children to get all ids .
3720	Return children ProductCategory pages of this category .
3721	Recursively generate a product menu starting from the topmost category .
3722	Override the nested title defaults to show deeper nesting in the CMS .
3723	Add print button to order detail form
3724	Render order for printing
3725	Get the next step action
3726	Restrict list to non - hidden statuses
3727	Replace gridfield detail form to include print functionality
3728	Helper function for reducing a field set to a given subset in the given order .
3729	Modifies the incoming value by adding subtracting or ignoring the value this modifier calculates .
3730	Set up CheckoutPage_Controller decorators for managing steps
3731	Redirect back to start of checkout if no cart started
3732	Check if passed action is the same as the current step
3733	Get the numerical position of a step
3734	Returns the link to the checkout page on this site
3735	Return the products for this group .
3736	If no cents on the price trim those off .
3737	Add product fields to CMS
3738	Helper function for generating list of categories to select from .
3739	Helper function for generating a list of additional categories excluding the main parent .
3740	Get ids of all categories that this product appears in .
3741	The raw retail price the visitor will get when they add to cart . Can include discounts or markups on the base price .
3742	If the product does not have an image and a default image is defined in SiteConfig return that instead .
3743	Behaviour can be overwritten by creating a processPaymentResponse method on the controller owning this form . It takes a Symfony \ Component \ HttpFoundation \ Response argument and expects an SS_HTTPResponse in return .
3744	Make payment for a place order where payment had previously failed .
3745	Form action handler for CancelOrderForm .
3746	Get credit card fields for the given gateways
3747	Add an order to the session - stored history of orders .
3748	Get historical orders for current session .
3749	Get the order via url ID or form submission OrderID . It will check for permission based on session stored ids or member id .
3750	Build a form for cancelling or retrying payment for a placed order .
3751	Create member account from data array . Data must contain unique identifier .
3752	Get member by unique field .
3753	Link the current order to the current member on login if there is one and if configuration is set to do so .
3754	Get the past orders for this member
3755	Used for storing the quantity update link for ajax use .
3756	Allow choosing from an existing address
3757	Create CMS fields for cms viewing and editing orders
3758	Adjust scafolded search context
3759	Hack for swapping out relation list with OrderItemList
3760	Calculate the total
3761	This is needed to maintain backwards compatiability with some subsystems using modifiers . eg discounts
3762	Calculate how much is left to be paid on the order . Enforces rounding precision .
3763	Get the link for finishing order processing .
3764	Check if an order can be paid for .
3765	Prevent deleting orders .
3766	Check if an order can be viewed .
3767	Gets the name of the customer .
3768	Get billing address if marked to use seperate address otherwise use shipping address or the member default billing address .
3769	Create a unique reference identifier string for this order .
3770	Force creating an order reference
3771	delete attributes statuslogs and payments
3772	Provide i18n entities for the order class
3773	Render the cart with editable item fields .
3774	Add quantity variation and remove fields to the item set .
3775	Returns the link or the URLSegment to the account page on this site
3776	Return a link to view the order on the account page .
3777	Browses WP - CLI packages available for installation .
3778	Lists installed WP - CLI packages .
3779	Gets the path to an installed WP - CLI package or the package directory .
3780	Updates all installed WP - CLI packages to their latest version .
3781	Uninstalls a WP - CLI package .
3782	Gets a Composer instance .
3783	Gets all of the community packages .
3784	Gets the package index instance
3785	Displays a set of packages
3786	Gets a package by its shortened identifier .
3787	Gets the installed community packages .
3788	Gets an installed package by its name .
3789	Gets the name of the package from the composer . json in a directory path
3790	Gets the absolute path to the WP - CLI packages composer . json .
3791	Creates a default WP - CLI packages composer . json .
3792	Get the version to use for raw github request . Very basic .
3793	Guesses the version constraint from a release tag .
3794	Reads the WP - CLI packages composer . json checking validity and returning array containing its path contents and decoded contents .
3795	Sets a data object for persisting by adding its id and type to the serialised vars
3796	Sets custom configuration settings from the job data .
3797	Run the task
3798	Clear out stale jobs based on the cleanup values
3799	Adds a job to the queue to be started
3800	Copies data from a job into a descriptor for persisting
3801	Check the current job queues and see if any of the jobs currently in there should be started . If so return the next job that should be executed
3802	Runs an explicit check on all currently running jobs to make sure their processed count is incrementing between each run . If it s not then we need to flag it as paused due to an error .
3803	Checks through ll the scheduled jobs that are expected to exist
3804	Attempt to restart a stalled job
3805	Prepares the given jobDescriptor for execution . Returns the job that will actually be run in a state ready for executing .
3806	Is execution time too long?
3807	Is memory usage too high?
3808	Convert memory limit string to bytes . Based on implementation in install . php5
3809	Return the SQL filter used to get the job list - this is used by the UI for displaying the job list ...
3810	Process the job queue with the current queue runner
3811	Process all jobs from a given queue
3812	Adds a RunBuildTaskJob to the job queue for a given task
3813	Logs the status of the queued job descriptor .
3814	Logs the number of current jobs per queue
3815	Reload descriptor from DB
3816	Implement this method in the task subclass to execute via the TaskRunner
3817	Pause this job but only if it is waiting running or init
3818	Resume this job and schedules it for execution
3819	Called to indicate that the job is ready to be run on the queue . This is done either as the result of creating the job and adding it or when resuming .
3820	Gets the path to the queuedjob cache directory
3821	Called when the job has completed and we want to cleanup anything the descriptor has lying around in caches or the like .
3822	Get all job messages as an HTML unordered list .
3823	Get the last job message as a raw string
3824	Return a string representation of the numeric JobType
3825	Return a map of numeric JobType values to localisable string representations .
3826	Note that this is duplicated for backwards compatibility purposes ...
3827	On any restart make sure to check that our temporary file is being created still .
3828	Outputs the completed file to the site s webroot
3829	Run tasks on the given queue
3830	Handle the actions and apply any changes to the GridField
3831	Defines the title of the job
3832	This is called immediately before a job begins - it gives you a chance to initialise job data and make sure everything s good to go
3833	Lets process a single node and publish it if necessary
3834	Resolves the queue name to one of a few aliases .
3835	Get an array representing the properties of a model .
3836	Runs interactive shell
3837	Saves the source map to a file
3838	Writes on a shared memory block
3839	Reads from a shared memory block
3840	Lists registered sidebars .
3841	Lists widgets associated with a sidebar .
3842	Adds a widget to a sidebar .
3843	Updates options for an existing widget .
3844	Moves the position of a widget .
3845	Deactivates one or more widgets from an active sidebar .
3846	Deletes one or more widgets from a sidebar .
3847	Resets sidebar .
3848	Checks whether a sidebar is a valid sidebar
3849	Checks whether the specified widget is on the sidebar
3850	Gets the widget s name option index sidebar and sidebar index from its ID
3851	Repositions a widget within a sidebar or move to another sidebar .
3852	Gets a widget s instantiated object based on its name
3853	Cleans up a widget s options based on its update callback
3854	Get a random integer within the specified range .
3855	Get a random string of the specified length .
3856	Encode a string of raw bytes .
3857	Decode an encoded string .
3858	Add a search path for custom generators .
3859	Remove a registered generator path .
3860	Get a supported random data generator .
3861	Populate the available generators array .
3862	Show the group as an horizontal row using the specified configuration . This method should be called last when the label and controls are all initialized .
3863	Make the input read only
3864	Open a form
3865	Add an addon before the field
3866	Add an addon after the field
3867	Add the child elements corresponding to the given addons
3868	Set the control size
3869	Replace callbacks . The supplied function should take a callback id and return a callback of its own .
3870	fahrenheit in the supplied callback
3871	Get the names of children nodes
3872	Get the names of all properties
3873	Get the evaluated contents of the view at the given path .
3874	Save values for a set of keys to cache
3875	Detect the correct driver for selenium
3876	Returns the Aperture F - number
3877	Returns the Author
3878	Returns the Headline
3879	Returns the Credit
3880	Returns the source
3881	Returns the Jobtitle
3882	Returns the ISO speed
3883	Returns the focus distance if it exists
3884	Returns the width in pixels if it exists
3885	Returns the height in pixels if it exists
3886	Returns the title if it exists
3887	Returns the caption if it exists
3888	Returns the copyright if it exists
3889	Returns the keywords if they exists
3890	Returns the camera if it exists
3891	Returns the horizontal resolution in DPI if it exists
3892	Returns the vertical resolution in DPI if it exists
3893	Returns the software if it exists
3894	Returns the focal length in mm if it exists
3895	Returns the creation datetime if it exists
3896	Returns the colorspace if it exists
3897	Returns the mimetype if it exists
3898	Returns the filesize if it exists
3899	Returns the orientation if it exists
3900	Returns GPS coordinates if it exists
3901	Extract GPS coordinates from components array
3902	Setter for the exiftool binary path
3903	Getter for the exiftool binary path Lazy loads the default path
3904	Returns the output from given cli command
3905	Hydrates given array of data into the given Exif object
3906	Extract GPS coordinates from formatted string
3907	Accessor for the data mapper
3908	Accessor for the data hydrator
3909	Set array of options in the current object
3910	Adds an EXIF section to the list
3911	Returns an array of IPTC data
3912	Factory for the reader
3913	Generates default prefix for strategy .
3914	Normalizes the strategies configuration and initializes the strategies .
3915	Translate list values .
3916	Queue up a StaticCacheFullBuildJob Check for startAfter param and do some sanity checking
3917	Do some processing yourself!
3918	Collect all changes for the given context .
3919	Execute URL deletions enqueue URL updates .
3920	Returns extension which is no longer in metadata - garbage
3921	Returns extensions list by module id .
3922	Get template blocks defined in database .
3923	Get module settings defined in database .
3924	Check supported metadata version
3925	checks if module file exists on directory switches between metadata version for checking checks also for namespace class if metadata version = 2 . 0
3926	Analyze versions in metadata checks if metadata version is same as database entry for metadata
3927	Analyze extended class information in metadata and database .
3928	Analyze template block information in metadata and database .
3929	Analyze settings in metadata ans settings .
3930	Analyze templates in metadata ans settings .
3931	Analyze controller in metadata
3932	Analyze file in metadata
3933	Analyze events in metadata ans settings .
3934	Parse and return module ids from input
3935	Parse and return shop config objects from input
3936	Get all available module ids
3937	important method for oxrun to bootstrap oxid
3938	Get active module object .
3939	Returns initialized cache instance
3940	Returns initialized module installer instance
3941	Fix module states task runs version extend files templates blocks settings and events information fix tasks
3942	remove extensions that are not registered by any module
3943	Add module template files to config for smarty .
3944	Add module files to config for auto loader .
3945	Add module events to config .
3946	Add module id with extensions to config .
3947	Add module version to config .
3948	compares 2 assoc arrays true if there is something changed
3949	Adds settings to database .
3950	Add controllers map for a given module Id to config
3951	Add extension to module
3952	get List of packages
3953	Collect info about module state .
3954	Fix module settings .
3955	Method to create an Http instance .
3956	Finds an available TransportInterface object for communication
3957	Get the HTTP transport handlers
3958	Configure the cURL resources with the appropriate root certificates .
3959	Method to get a response object from a server response .
3960	Check if redirects are allowed
3961	Method to send the OPTIONS command to the server .
3962	Method to send the HEAD command to the server .
3963	Method to send the TRACE command to the server .
3964	Method to send the PATCH command to the server .
3965	Returns true if given path matches a glob expression .
3966	Search for parameter with specific key in extra composer configuration block
3967	Combine multiple glob expression lists into one list
3968	Register shop packages installer .
3969	Returns true if given relative path matches against at least one glob expression from provided list .
3970	Returns true if the supplied globMatcher indicates a match for at least one item in given glob expression list .
3971	Get the path to shop s source directory .
3972	Creates package installer .
3973	Copies all shop files from vendors to source directory .
3974	Overwrites files in core directories .
3975	Copy shop source files from package source to defined target path .
3976	Copy shop s configuration file from distribution file .
3977	Copy shop s setup files from package .
3978	Return true if config file is not configured or missing .
3979	Copy files from source to installation by filter .
3980	Return filtered files .
3981	Return absolute path to file from installation .
3982	Overwrites theme files .
3983	Copy files from package source to defined target path .
3984	If module source directory option provided add it s relative path . Otherwise return plain package path .
3985	Convert given flat file system structure into nested one .
3986	Return an iterator which iterates through a given directory tree in a one - dimensional fashion .
3987	Copy whole directory using given glob filters .
3988	Copy file using given glob filters .
3989	Run model generation action
3990	Traverse all classes and inherit properties from parents
3991	Converts the model into an array for usage in ld + json .
3992	Adds BreadcrumbList schema . org markup based on the application view breadcrumbs parameter
3993	Renders ld + json data
3994	Set the string which represents the HTML file to be sent as email by rendering a template .
3995	Generate the HTML ready to be sent as email .
3996	Resolve path to absolute if any bundle is mentioned
3997	Is the actual subset expected?
3998	Does the expected subset exist in the actual array?
3999	Assert that the HTTP status matches the expected status .
4000	Assert that there is content with the expected media type .
4001	Assert a JSON HTTP message with an expected status .
4002	Assert a JSON API HTTP message with an expected status .
4003	Assert that a resource was fetched .
4004	Assert that an exact resource or resource collection was fetched .
4005	Assert that a resource collection was fetched in the expected order .
4006	Assert that a to - many relationship was fetched .
4007	Assert that a to - many relationship was fetched in the expected order .
4008	Assert that a resource was created with a client generated id .
4009	Assert a no content response .
4010	Assert an exact top - level meta response without data .
4011	Assert the document contains an exact single error that matches the supplied error and has a status member .
4012	Assert the HTTP message contains the supplied error within its errors member .
4013	Assert the HTTP status contains the supplied errors .
4014	Get the JSON API document .
4015	Set the expected resource type for the data member of the JSON document .
4016	Assert that an exact resource was fetched .
4017	Assert response is a JSON API resource updated response .
4018	Assert response is a JSON API resource deleted response .
4019	Assert that the expected resource is included in the document .
4020	Assert that the included member contains the supplied resource .
4021	Assert that the top - level meta matches the expected values .
4022	Assert that the top - level meta is exactly the expected meta .
4023	Assert that the top - level links are exactly the expected links .
4024	Assert the HTTP status contains the supplied exact errors .
4025	Assert that the value at the pointer has the expected JSON API resource .
4026	Assert that the value at the pointer has the expected JSON API resource identifier .
4027	Assert that the expected value is in the document at the specified path .
4028	Assert that the value at the specified path is not the expected value .
4029	Assert that a list in the document only contains the specified hashes .
4030	Assert that a list in the document only contains the specified values .
4031	Assert that a list in the document contains the hashes in the specified order .
4032	Assert that a list in the document contains the values in the specified order .
4033	Assert that a list in the document only contains the specified identifiers .
4034	Assert that a list in the document contains the identifiers in the specified order .
4035	Assert that the document has a list containing the expected resource .
4036	Assert that a list in the document at the specified path contains the expected hash .
4037	Assert that a list in the document at the specified path contains the expected value .
4038	Assert that the included member contains the supplied hash .
4039	Assert the document contains a single error that exactly matches the supplied error .
4040	Assert the document contains the supplied error within its errors member .
4041	Assert the document contains the exact supplied error within its errors member .
4042	Safely create a document .
4043	Cast a document to an instance of this document class .
4044	Create a document from a string .
4045	Decode a JSON string into a document .
4046	Get a value from using a JSON pointer .
4047	Check if an item exists using JSON pointers .
4048	Assert that all the provided members exist .
4049	Assert that the provided members do not exist .
4050	Does the actual value match the expected value?
4051	Does the expected subset appear within the actual value?
4052	Is the supplied value a resource identifier?
4053	Recursively sort a JSON hash or JSON list for comparison .
4054	Does the value identify a resource?
4055	Send a request to retrieve the next page of results . Hook for subclasses to implement .
4056	Send a message to a user .
4057	Respond with a reply to a user .
4058	Set a list of allowed types for the given option .
4059	Writes a message to the output .
4060	Write a message to the output but only if Debug is enabled .
4061	Add a new message to the output of the validator .
4062	Get the count for a type ;
4063	Find the variables in a single line array
4064	Find the variables in a multi line array
4065	Validates that two arrays contain the same strings
4066	Returns true when all elements of this iterable are not empty otherwise returns false
4067	Returns an iterator that containing accumulated elements
4068	As the manual says If two members compare as equal their order in the sorted array is undefined . This means that the sort used is not stable and may change the order of elements that compare equal .
4069	Returns an unsafe array built from this iterator
4070	Returns an array with keys from this iterator
4071	Returns an iterator where one or more iterables are zipped together
4072	Returns an array with values from this iterator
4073	Reduce an iterator to a single value
4074	Compute the key for an element
4075	Make an iterator that returns consecutive groups from this iterable . Generally this iterable needs to already be sorted on the same key function .
4076	Reduce an iterable to a single value
4077	Returns a reduction closure
4078	Dump the event for discovery purposes .
4079	Get the value of a config key from the Extra section .
4080	Escapes namespace prefixes in predicates .
4081	Parses and IRI checks if it is complaint with compacted IRI definition .
4082	Naive approach on Drupal field to JSON - LD type mapping .
4083	Will persist all previously made changes if there were any .
4084	Returns an JSON - LD Context for a entity bundle .
4085	Helper function to normalize field items .
4086	returns true even when file does not exist
4087	Get a translated version of the field item instance .
4088	Constructs the entity URI .
4089	Gets the typed data IDs for a type URI .
4090	Build a specific backend instance .
4091	Fetches an entry from the cache .
4092	Runs a user function .
4093	Write an error .
4094	Ask the user a question .
4095	Persist s the passed row .
4096	Create the data .
4097	Override array .
4098	Insert data into the db and obtain the inserted records .
4099	Get the primary key of a table .
4100	Set the active user .
4101	Copy stubs to their paths .
4102	Finds a replaces variables in given files .
4103	Serialize the additional_data attribute of the passed array .
4104	Return s TRUE if the additional data contains a swatch type .
4105	Returns the swatch type for the attribute with the passed code and entity type ID .
4106	Seed the database .
4107	Get the fully qualified seeder name .
4108	Load s and return s the EAV attribute option swatch with the passed option ID and store ID
4109	Return s the EAV entity attribute with the passed attribute + attribute set ID .
4110	Load s and return s the EAV attribute option with the passed entity type ID and code store ID and value .
4111	Returns the EAV attribute option of attribute with the passed ID with the highest sort order .
4112	Creates the database seeders folder if it doesn t exist .
4113	Make a database seeder .
4114	Initialize the EAV attribute option with the passed attributes and returns an instance .
4115	Start a Drupal DB Transaction .
4116	Return s the EAV catalog attribute with the passed ID .
4117	Set public path .
4118	Add parameters to the request .
4119	Creates a mock HTTP response .
4120	Execute the menu handler and construct the response .
4121	Injects parameters into the request .
4122	Return s the EAV attribute with the passed code .
4123	Clean up the global data after importing the bunch .
4124	Pre - load and temporary persist the attribute ID for the passed EAV attribute .
4125	Publish records from chado to entities .
4126	Assert string exists in response body .
4127	Get the json response as an associative array .
4128	Assert that the response has the given structure .
4129	Bootstrap Drupal .
4130	Gets Drupal root path .
4131	Look for environment variable file .
4132	Read env files .
4133	Perform the publishing .
4134	Load the database seeders .
4135	Return s the entity type for the passed code of if no entity type code has been passed the default one from the configuration will be used .
4136	Returns the entity type ID for the passed code or if no entity type code has been passed the default one from the configuration will be used .
4137	Sends the request .
4138	Prepare url for request .
4139	Accepts a distributed trace payload .
4140	Stop instrumenting the current transaction immediately .
4141	Sets the New Relic app name which controls data rollup .
4142	Create user - related custom attributes . newrelic_add_custom_parameter is more flexible .
4143	Starts a new transaction usually after manually ending a transaction .
4144	Redirect with Handling against url .
4145	Prepare s the arguments for the passed reflection class by applying the values from the passed configuration array to the apropriate arguments . If no value is found in the configuration the constructor argument s default value is used .
4146	Append s the exception suffix containing filename and line number to the passed message . If no message has been passed only the suffix will be returned .
4147	Wraps the passed exeception into a new one by trying to resolve the original filname line number and column name and use it for a detailed exception message .
4148	Parse the passed CSV file .
4149	Return s the EAV attribute group with the passed ID .
4150	Return s the attribute groups for the passed attribute set ID whereas the array is prepared with the attribute group names as keys .
4151	Return s the EAV attribute group with the passed entity type code attribute set and attribute group name .
4152	Factory method to create a new lexer configuration instance .
4153	Load s and return s the EAV attribute option value with the passed option ID and store ID
4154	Creates and returns the file resolver instance for the subject with the passed configuration .
4155	Return s an array with the Magento 2 configuration .
4156	Return s the logger with the passed name by default the system logger .
4157	Factory method to create new plugin instance .
4158	Merge s and return s the entity with the passed attributes and set s the status to update .
4159	Creates and returns the number converter instance for the subject with the passed configuration .
4160	Cast s the passed value based on the backend type information .
4161	Return s the entity type code to be used .
4162	Return s the attributes for the attribute set of the product that has to be created .
4163	Return s an array with the available user defined EAV attributes for the actual entity type .
4164	Return s the EAV attribute with the passed attribute code .
4165	Returns an array with the available categories and their resolved path as keys .
4166	Return s an array with the available categories and their resolved path as keys by store view ID .
4167	Return s the header value for the passed name .
4168	Add s the header with the passed name and position if not NULL .
4169	Map the passed attribute code if a header mapping exists and return the mapped mapping .
4170	Clean up the global data after importing the variants .
4171	Register the passed observer with the specific type .
4172	Register the passed callback with the specific type .
4173	Return s the array with callbacks for the passed type .
4174	Imports the passed row into the database . If the import failed the exception will be catched and logged but the import process will be continued .
4175	Prepare s the store view code in the subject . If the store_view_code row doesn t contain any value the default code of the default store view will be set .
4176	Return s the store ID of the store with the passed store view code
4177	Return s the root category for the actual view store .
4178	Resolve the original column name for the passed one .
4179	Return s the original data if available or an empty array .
4180	Query s whether or not the actual column contains original data like filename line number and column names .
4181	Wraps the passed exeception into a new one by trying to resolve the original filname line number and column names and use it for a detailed exception message .
4182	Append s the exception suffix containing filename and line number to the passed message . If no message has been passed only the suffix will be returned
4183	Get new file name if the same is already exists .
4184	Upload s the file with the passed name to the Magento media directory . If the file already exists the will be given a new name that will be returned .
4185	Delete the file with the passed name .
4186	Return s an array with all available EAV entity types with the entity type code as key .
4187	Return s an EAV entity type with the passed entity type code .
4188	Serializes the elements of the passed array by using the instances CSV configuration options .
4189	Unserializes the elements of the passed value by using the instances CSV configuration options .
4190	Return s the target directory the CSV files has to be exported to .
4191	Factory method to create a new export configuration instance .
4192	Passes the configuration and initializes the serializer .
4193	Unserializes the elements of the passed string .
4194	Serializes the elements of the passed array .
4195	Return s the prepared statement .
4196	Initializes the proceessor with the prepared statements .
4197	Parses the string with the additional attributes as CSV and returns an array .
4198	Create a unique identifier for the passed core_config_data entity .
4199	Resolve s the cache key .
4200	Add the passed value to the cache .
4201	Query whether or not a value for the passed cache key exists . If yes the value will be returned else an exception will be thrown .
4202	Flush the cache or the value with the passed key .
4203	Return s the EAV attribute set with the passed ID .
4204	Return s the attribute sets for the passed entity type ID whereas the array is prepared with the attribute set names as keys .
4205	Load s and return s the EAV attribute set with the passed entity type ID and attribute set name .
4206	Load s and return s the EAV attribute set with the passed entity type code and attribute set name .
4207	Creates and returns the export adapter for the subject with the passed configuration .
4208	Quotes a string for use in a query .
4209	Return s an array with the URL rewrites for the passed entity type and ID .
4210	Return s an array with the URL rewrites for the passed entity type entity and store ID .
4211	Notify the observers .
4212	Check if the column count is consistent with comparing other rows .
4213	Query whether or not a value for the column with the passed name exists .
4214	Factory method to create new subject instance .
4215	Creates and returns the serializer instance .
4216	Return s an array with the available EAV attributes for the passed entity type ID and attribute set name .
4217	Return s an array with the available EAV attributes for the passed option value and store ID .
4218	Return s an array with the available EAV attributes for the passed is user defined flag .
4219	Return s an array with the available EAV attributes for the passed is entity type and user defined flag .
4220	Return s an array with the available EAV attributes for the passed is entity type .
4221	Return s the first EAV attribute for the passed option value and store ID .
4222	Prepare the observers defined in the system configuration .
4223	This method tries to resolve the passed path and returns it . If the path is relative the actual working directory will be prepended .
4224	Creates a new directroy .
4225	Register the passed attribute under the specified key in the registry .
4226	Raises the value for the attribute with the passed key by one .
4227	This method merges the passed attributes with an array that has already been added under the passed key .
4228	Factory method to create new filesystem adapter instance .
4229	Return s an array with all available categories by store view ID .
4230	Return s an array with the root categories with the store code as key .
4231	The factory method that creates a new emitter instance .
4232	Prepare the listeners defined in the system configuration .
4233	Removes the passed directory recursively .
4234	Return s the configured swift mailer instance .
4235	Initializes the file resolver for the import process with the passed serial .
4236	Loads the files from the source directory and return s them sorted .
4237	Return s the array with the SQL statements that has to be prepared .
4238	Creates and returns the import adapter for the subject with the passed configuration .
4239	Prepare the callbacks defined in the system configuration .
4240	Returns the array with the global data necessary for the import process .
4241	Returns the SQL statement with the passed ID .
4242	Creates and returns the date converter instance for the subject with the passed configuration .
4243	Add the passed product type artefacts to the product with the last entity ID and overrides existing ones with the same key .
4244	Append s the passed product type artefacts to the product with the last entity ID .
4245	Return the artefacts for the passed type and entity ID .
4246	Create s and return s a new empty artefact entity .
4247	Export s the artefacts to CSV files .
4248	Return s an array with all available link types with the link type code as key .
4249	Return s an array with all available image types for the passed entity type code and frontend input type with the link type code as key .
4250	Converts the passed date into a Magento 2 compatible date format .
4251	Converts the passed number into a float value .
4252	Executes the passed subject .
4253	Returns the elements the filenames consists of converted to lowercase .
4254	Returns the values to create the regex pattern from .
4255	Resolves the pattern value for the given element name .
4256	Prepares and returns the pattern for the regex to load the files from the source directory for the passed subject .
4257	Prepares and returns an OK filename from the passed parts .
4258	Query whether or not the basename without suffix of the passed filenames are equal .
4259	Return s an array with the names of the expected OK files for the actual subject .
4260	Queries whether or not the passed filename should be handled by the subject .
4261	Query whether or not the passed CSV filename is in the OK file . If the filename was found the OK file will be cleaned - up .
4262	Return s an array with the available tax classes and their class names as keys .
4263	Warms the cache for the passed repository .
4264	Return s an array with the available store websites and their code as keys .
4265	Return s an array with the available stores and their store codes as keys .
4266	Returns the category varchar values for the categories with the passed with the passed entity IDs .
4267	Returns the category varchar values for the categories with the passed with the passed entity ID .
4268	Returns an array with the available customer groups and their code as keys .
4269	Returns the primary key member name for the actual Magento edition .
4270	Remove all the empty values from the row and return the cleared row .
4271	Return markup from a Blade template
4272	Registers all rest routes for events
4273	Get the query params for collections
4274	Sanitize end date . Add 1 day to include events occurring on end date
4275	Get all events between two dates
4276	Sanitize and adds data to event list
4277	Set category languages and define translations
4278	Stuff to do before save
4279	Do after save
4280	Saves location as meta data
4281	Saves additional locations as meta data
4282	Saves categories as taxonomy terms
4283	Saves groups as taxonomy terms
4284	Saves tags as taxonomy terms
4285	Save event occasions to integrate_occasions table
4286	Apply language and translations to the event . Compatible with the plugin Polylang
4287	Find an event by it s original id
4288	Check if the event passes one of the taxonomy filters
4289	Remove expired occasions from databse
4290	Remove events that has been deleted from API
4291	Remove expired events from databse
4292	Filter by taxonomies if add or not to add
4293	Delete empty event taxonomies
4294	Display a list with location from API
4295	Save location module metadata on save
4296	Decode assets json to array
4297	Remove meta boxes from edit Event view
4298	Unserialize and implode arrays
4299	Implode arrays into strings
4300	Registers the post type with WP
4301	Adds a column to the admin list table
4302	Set up table columns
4303	Setup sortable columns
4304	Set table column content with callback functions
4305	Save or update taxonomy term
4306	Automatically add new terms to Group filter option if the parent is selected
4307	Remove all values that are empty except the value 0
4308	Get all values that are empty
4309	Delete meta data from db if it s deleted from API
4310	Saves the event and it s data
4311	Checks if a attachment src already exists in media library
4312	Return form markup
4313	Add date arguments to event permalink URL
4314	Add where statements
4315	Get single event date
4316	Get next event occasion date in time
4317	Get the closest value from array of values
4318	Get date parts as array
4319	Save area coordinates as option
4320	Enqueue required styles and scripts for admin ui
4321	Enqueue required styles and scripts on front views
4322	Format short start date
4323	Start cron jobs
4324	Import publishing groups from Event Manager API
4325	Create database table if not exist
4326	Creates event occasion database table on plugin activation
4327	Check if event already exist and return it s id
4328	Request to Api
4329	Get event occasions
4330	Get event meta data
4331	Limits event description
4332	Get event that occurs nearby a locations and within given distance
4333	Handles updating the settings for the current Display Events widget instance .
4334	Get events on pagination click
4335	Get included Events
4336	Return categories filter
4337	Return categories available for filtering
4338	Return groups filter
4339	Return tags filter
4340	Return list with filterable ages
4341	Callback for the submenu page . Forms to complete authorization .
4342	Sanitize array with input data
4343	Add event data to single view
4344	Import user groups when saving settings
4345	Add term children to user group value
4346	Replace content if occasion has custom content .
4347	Remove lead content if the occasion has custom content
4348	Get custom occasion content
4349	Register event categories as taxonomy
4350	Register event tags as taxonomy
4351	Register event groups as taxonomy
4352	Add buttons to start parsing xcap and Cbis
4353	Start parsing event importer
4354	Accept or deny an event . Changes post status to draft if denied .
4355	Creates the SSH Tunnel for us .
4356	Verifies whether the tunnel is active or not .
4357	Runs a command and converts the exit code to a boolean
4358	Sets the signal to be handled by either the closure or the built in signal handler .
4359	Built in Signal Handler .
4360	Run the given process .
4361	Create a frontend editor for the given table .
4362	Create the dc - general and return it s environment instance .
4363	Retrieve the instance of a widget for the given property .
4364	Render the widget for the named property .
4365	Process the input values from the input provider and update the information in the value bag .
4366	Process a single property .
4367	Remember current POST data and overwrite it with the values from the value bag .
4368	Handle the event to process the action .
4369	Factory method which creates an Imagine instance .
4370	Sets limits for the Imagick driver .
4371	Injects the settings .
4372	Handle the build widget event .
4373	Try to resolve the class name for the widget .
4374	Get special labels .
4375	Create the edit mask .
4376	This method triggers the event to update the parent child relationships of the current model .
4377	Process input and return all modified properties or null if there is no input .
4378	Trigger the pre persist event and handle the prePersist function if available .
4379	Trigger the post persist event and handle the postPersist function if available .
4380	Get a translated label from the translator .
4381	Build the field sets .
4382	Handle the submit and determine which button has been triggered .
4383	Determine the headline to use .
4384	Handle the persisting of the currently loaded model .
4385	Configure CAS Client|Proxy
4386	Maintain backwards compatibility with config file
4387	Configure SSL Validation
4388	Retrieve a specific attribute by key name . The attribute returned can be either a string or an array based on matches .
4389	Check for the existence of a key in attributes .
4390	Logout of the CAS session and redirect users .
4391	Set the code . Used in constructor to ensure the code meets the requirements for a status code .
4392	Try to get model row number or key . Return row number column if exists .
4393	Detect if cursor value is integer or not . Extract key type from model if possible otherwise just check cursor value type
4394	Split the request into fragments and find the api resource
4395	Add a two - dimensional array to the container where every outer array element becomes a container and every inner array element becomes an element of the corresponding container .
4396	Build a query which will return only one page from original data set matching cursor parameters
4397	Add statement which will include number of rows in original data set into query which returns one page
4398	Buld query around model clone without scopes that may affect query result .
4399	generates an activationlink from geiven key
4400	assigns an user to a key if not already claimed
4401	returns the action connected to the given key
4402	Read request paging data
4403	Registriert die gefundenen Templates bei Contao .
4404	Register certain handlers via Dingo \ API facade
4405	Security gateway throws AuthorizationException without HTTP code set . Render AccessDeniedHttpException instead to produce 403 HTTP code instead of 500
4406	Dingo API does not handle default Laravel validation exception . Wrap it into ValidationHttpException processed properly
4407	Replace model not found exception to guarantee 404 error instead of 500
4408	Entfernt ein Element vom Stack .
4409	Gets components array from bower API .
4410	Attaches handlers on Queue events .
4411	Send request to server with api_key and return a Response .
4412	Check the package exists in Asset - Packagist .
4413	Synchronizes file system packages to the database .
4414	Updates expired packages .
4415	Build an Client form multiple connection .
4416	Get URL form config .
4417	Return the correct default port if not manually set .
4418	Make sure the EntityManager is installed if we have configured it .
4419	Terminate a process and any of its children .
4420	Lock a book s theme .
4421	Unlock a book s theme .
4422	Clone a book .
4423	Build filter param values .
4424	Build parameter filter widgets .
4425	Tables sorted in order of their dependencies .
4426	Check if all related databases are configures with migrations .
4427	Configure all related databases with migration table .
4428	Get every available migration with valid meta information .
4429	Execute one migration and return it s instance .
4430	Rollback last migration and return it s instance .
4431	Clarify migration state with valid status and execution time
4432	Migration table all migration information will be stored in it .
4433	Render values and options into source .
4434	Mount indents for column and index options .
4435	Set table primary keys index . Attention you can only call it when table being created .
4436	Create table schema . Must be last operation in the sequence .
4437	Update table schema . Must be last operation in the sequence .
4438	Drop table . Must be last operation in the sequence .
4439	Rename table . Must be last operation in the sequence .
4440	Execute blueprint operations .
4441	Internal method to fetch all migration filenames .
4442	Request new migration filename based on user input and current timestamp .
4443	Boot the app .
4444	Boot up Laravel .
4445	Load the initializer .
4446	Load argument resolver
4447	Get the configuration for MailTrap .
4448	Fetch a MailTrap inbox .
4449	Request a new Guzzle client .
4450	After each scenario reboot the kernel .
4451	Resolves context constructor arguments .
4452	Open pre - mocked StreamInterface by it s unique uri .
4453	Get stats based on wrapped StreamInterface by it s mocked uri .
4454	Helper method used to correctly resolve StreamInterface stats .
4455	Check if given uri or stream has been allocated .
4456	Register StreamInterface and get unique url for it .
4457	Free uri dedicated to specified StreamInterface . Method is useful for long living applications . You must close resource by yourself!
4458	Executes the given command and optionally returns a value .
4459	Try to expand the current node if it s an empty one and return whether the expansion worked or not .
4460	Expose the public methods of a class or object with an optional prefix .
4461	Handle an XML - RPC request and return a response for it .
4462	Call an XML - RPC procedure .
4463	render the html input for the widget
4464	Turn a regular XML - RPC server into one that supports various XML - RPC capabilities .
4465	Extract parameter and return type information from a documentation comment .
4466	List the methods supported by the server .
4467	Return possible signatures for a method .
4468	Get help about a procedure .
4469	Perform several calls to XML - RPC methods in a single go .
4470	Load an XRL class or interface .
4471	Return XRL s version .
4472	Display this script s usage .
4473	Parse a boolean out of some text . 0 off or false can be used to represent \ c false while 1 on or true can used to represent \ c true .
4474	Return the content of a file .
4475	Parse the arguments passed to this script .
4476	Run this CLI script .
4477	Returns whether a given service has already been resolved into its final value or is still a callable .
4478	Return an XML writer that will be used to produce XML - RPC requests and responses .
4479	This method must be called when the document is complete and returns the document .
4480	Returns an XML reader for some data .
4481	Read a node from the XML reader and return it .
4482	Read a node from the document and throw an exception if it is not an opening tag with the given name .
4483	Read a node from the document and throw an exception if it is not a closing tag with the given name .
4484	Read a node from the document and throw an exception if it is not a text node . Otherwise return its content .
4485	Check the type of a value .
4486	Build a checkbox field .
4487	Build an email field .
4488	Build a select field .
4489	Register sections with WordPress .
4490	Register a section to the settings page with WordPress .
4491	Register fields of a section with WordPress .
4492	Register a setting and its data with WordPress .
4493	Create captcha html element
4494	Create javascript api link with language
4495	Display multiple captcha on page
4496	Build captcha by attributes
4497	Uploads an asset to the Moovly API .
4498	Fetches one project .
4499	Fetches all projects .
4500	Creates a template .
4501	Fetches a template .
4502	Fetches all templates the bearer has access to .
4503	Registers a new Job request in the Moovly API . This expects a Job model . Use the JobFactory and the ValueFactory to create this .
4504	Gets a job .
4505	Gets all the jobs that were made with a template .
4506	Returns the current user .
4507	Get the user s personal library .
4508	Makes sure the API of newly created jobs is as complete for values as possible .
4509	Search for and return the LDAP user by a specific attribute .
4510	Pass the configuration to be loaded for the LdapTools Configuration class .
4511	Based on the LDAP error code and the LDAP type throw any specific exceptions detected .
4512	A rather ugly way of allowing compatibility with the resolver component for pre 2 . 6 versions .
4513	If no LDAP credentials are in the config then attempt to use the user supplied credentials from the login . But only if we are using the LdapUserProvider .
4514	If the domain needs to a different context for the request then switch it .
4515	If the passed domain is not the current context then switch back to it .
4516	Determine whether or not the exception should be masked with a BadCredentials or not .
4517	Get the UsernamePasswordToken based off the Request parameters .
4518	Add the domain name for the login request to the token if specified .
4519	Handles transforming the value as it currently is to the value the DB expects .
4520	Get all the properties from the entity that have a LdapObject annotation defined .
4521	Based on an array of IDs for LDAP objects set the property to either a LdapObject for LdapObjectCollection .
4522	Get the specified ID for each LDAP object and save it to an array .
4523	Make Symfony aware of the LDAP listener factory and add the compiler pass .
4524	Get the values of a set of choices .
4525	Get the LDAP objects from LDAP . Optionally only get those specified by the passed values .
4526	Get all of the operations recorded by the profiler . Or get the operations for a specific domain .
4527	Set the roles for the user based on LDAP group membership .
4528	Check all of the groups that are valid for a specific role against all of the LDAP groups that the user belongs to .
4529	Check each LDAP group to see if any of them have an attribute with a specific value .
4530	Logs a message .
4531	Save the media to disk and DB
4532	Update the meta data of a certain media file .
4533	Get all the media assigned to the current model instance
4534	Perform the actual delete of the database row and removal of the file from the filesystem
4535	Parse the optional arguments and merge them with the defaults
4536	Helper function to process the media filename according to the settings
4537	Checks if a file exists and creates a new name if it does
4538	Appends _X to the file s basename if it already exists
4539	Get the alt text for the file from options then from db otherwise
4540	Get the Title text for the file from options then from db otherwise
4541	Get the Name text for the file from options then from db otherwise
4542	Calculate the weight of the image from options then from existing media then compared to others in the group
4543	Insert the media into the database
4544	Remove any media that already exists for the current group type
4545	Write the media to the file system
4546	Clone a file from passed Media Object to a new Media location on disk
4547	Creates the passed directory if it doesn t exist
4548	Clone an existing media item onto a new model instance .
4549	Boot configure .
4550	Register BladeSvgSage and SvgFactory with the Sage container .
4551	Register Directives with Blade .
4552	Returns the config .
4553	Returns the rendered SVG for the image specified .
4554	Transmit a QtiSm Runtime Variable to the target Result Server as an Item Result .
4555	Transform a QTI Datatype value to a value compliant with result server .
4556	Add a variable to be transformed into its IMS PCI JSON Representation for a later output .
4557	Whether or not a given QTI Variable contains the QTI Placeholder File .
4558	Whether or not a given QTI Variable contains a QTI File value .
4559	Transform a TAO serialized result value to its QtiDatatype equivalent .
4560	Create a new revision from an object
4561	Recursive arrayDiff .
4562	Set the client IP address .
4563	Set the origin language .
4564	Set the origin of the object submission .
4565	Resolve the origin of the user data .
4566	Set when the object was created .
4567	Event called before _creating_ the object .
4568	Process the item .
4569	Event called before _updating_ the object .
4570	Determine if the current slug is unique .
4571	Generate a unique URL slug for routable object .
4572	Set the object route URI .
4573	Set the route s last creation date .
4574	Set the route s last modification date .
4575	Customize the template s options .
4576	Set this object s immediate parent .
4577	Get the children directly under this object .
4578	Get all the objects on the same level as this one .
4579	Retrieve an object from the storage source by its ID .
4580	Retrieve an object from the cache store by its ID .
4581	Add an object to the cache store .
4582	Retrieves the category items directly within it .
4583	Retrieve the object s URL slug pattern .
4584	Retrieve route prefix for the object s URL slug pattern .
4585	Retrieve route suffix for the object s URL slug pattern .
4586	Determine if the slug is editable .
4587	Set the object s URL slug .
4588	Generate a URL slug from the object s URL slug pattern .
4589	Generate a route from the given pattern .
4590	Filter the given value for a URI .
4591	Route generation .
4592	Retrieve the object s URI .
4593	Convert a string into a slug .
4594	Finalize slug .
4595	Delete all object routes .
4596	Create a route collection loader .
4597	Retrieves all revisions for the current objet
4598	Set the object s publication date .
4599	Set the object s expiration date .
4600	Set the object s publication status .
4601	Retrieve the object s publication status based on publication and expiration dates .
4602	Renders the admin help pagge
4603	Rewrite the app s routes
4604	Resets the pointer in the data set to the beginning
4605	Returns the next item in the data set passing it to the formatter if defined
4606	Route site log pages
4607	Browse site log files
4608	View a single log file
4609	Browse Site Events
4610	Returns an array of extra permissions for this controller
4611	Browse all items
4612	Delete an item
4613	Restore an item
4614	Sort items into order
4615	Determines whether a localised item can be delted
4616	Returns the string to use as the single title
4617	Any dropdown style filters to include on the index page
4618	Extract data from post variable
4619	Returns the item being requested thorwing a 404 if it s not found
4620	Returns the user to the index pagel if a referrer is available then go there instead This is useful for returning the user to a filtered view
4621	Adds a new option
4622	Add multiple options
4623	Returns a specific option
4624	Executes the appropriate method behaviour
4625	Updates the status of multiple request items in a batch
4626	Updates the download ID of multiple requests
4627	Initial touch point for admin all requests are routed through here .
4628	Searches modules and the app for valid admin controllers which the active user has permission to access .
4629	Looks for admin controllers in specific locations
4630	Loads a specific admin controller
4631	Attempts to load an AdminClass
4632	Routes the request to the appropriate controller
4633	Loads a view in admin taking into account the module being accessed . Passes controller data and optionally loads the header and footer views .
4634	Generates a CSV and sends to the browser if a filename is given then it s sent as a download
4635	Load a single view taking into account the module being accessed .
4636	Loads the admin search component
4637	Returns a value from a filter object at a specific key
4638	Loads the admin pagination component
4639	Automatically decides what type of cell to load
4640	Load the admin user table cell component
4641	Load the admin date table cell component
4642	Load the admin dateTime table cell component
4643	Load the admin boolean table cell component
4644	Load the admin settings component table component
4645	Adds a button to Admin s header area
4646	Generates a dynamic table
4647	Saves the user s admin nav preferences
4648	Executes the app
4649	Create the Model
4650	Escapes items to be written to the CSV
4651	Adds a new action to the navGroup . An action is menu item essentially .
4652	Sets a piece of admin data
4653	Unsets a piece of admin data
4654	Handles the setting and unsetting of admin data
4655	Completely clears out the admin array
4656	Get a list of log files
4657	Looks for an app version of the file
4658	Load all Admin orientated JS
4659	Load all Admin orientated CSS
4660	Load services required by admin
4661	Autoload component items
4662	Provides some backwards compatability
4663	Manage Site settings
4664	Takes a multi line input and converts it into an array
4665	Recursively gets all the settings from the settings array
4666	Returns a specific source by its slug
4667	Returns a specific format by its slug
4668	Executes a DateExport source then passes to a DataExport format . Once complete the resulting file is uploaded to the CDN and the object s ID returned .
4669	Marks a request as failed recording why it failed and informs the recipients
4670	Adds a new changelog item
4671	Save the changelog items
4672	Fetches all objects optionally paginated .
4673	Applies common conditionals
4674	Formats a single object
4675	Handles GET requests
4676	Validates user input ; adds the model to the response
4677	Returns an arry of the model s class name and the item s ID
4678	Formats the response object
4679	Sets the date for the calendar
4680	Add a daily event to the calendar
4681	Sets the first day of the week
4682	Print debug message
4683	Submit a Custom Payment
4684	Assign engagements to the list of activities
4685	Assign to specific engagement the list of activities
4686	Generate Earning Reports for a Specific Freelancer
4687	Generate Earning Reports for a Specific Freelancer s Team
4688	Generate Earning Reports for a Specific Freelancer s Company
4689	Generate Earning Reports for a Specific Buyer s Team
4690	Generate Earning Reports for a Specific Buyer s Company
4691	Get list of engagements
4692	Get specific engagement
4693	Get full url based on global constant
4694	Get list of offers
4695	Run a specific action
4696	Generate Financial Reports for a Specific Account
4697	Get user roles
4698	Get by specific user
4699	Invite to Interview
4700	Generating Agency Specific Reports
4701	Generating Company Wide Reports
4702	Get Users in Team
4703	Get list of jobs
4704	Get specific job by key
4705	Post a new job
4706	Edit existend job
4707	Delete existend job
4708	Get Auth User Info
4709	Get Specific User Info
4710	Get by type
4711	Get a specific room information
4712	Get a specific room by offer ID
4713	Get a specific room by application ID
4714	Get a specific room by contract ID
4715	Create a new room
4716	Send a message to a room
4717	Update a room settings
4718	Update the metadata of a room
4719	Get snapshot info by specific contract
4720	Update snapshot by specific contract
4721	Delete snapshot by specific contract
4722	Get active Milestone for specific Contract
4723	Get all Submissions for specific Milestone
4724	Create a new Milestone
4725	Edit an existing Milestone
4726	Delete an existing Milestone
4727	Run API request
4728	Publishes all the config file this package needs to function
4729	Make Request To AccountKit
4730	Get All User Data
4731	Display a list of contact .
4732	Display contact .
4733	Show the form for creating a new contact .
4734	Show contact for editing .
4735	Update the contact .
4736	Remove the contact .
4737	Make gadget View
4738	Returns field of contact .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the given contact .
4741	Determine if the given user can delete the given contact .
4742	Show contact s list .
4743	Extract required data from html source
4744	Try to get previews from as many parsers as possible
4745	Get a preview from a single parser
4746	Add parser to the beginning of parsers list
4747	Remove parser from parsers list
4748	Add default parsers
4749	Contrast the given hex based color .
4750	Enclose the provided string with slashes .
4751	Convert the interval string to the mysql constant .
4752	Register the application s response macros .
4753	Returns a region grouped array .
4754	Return a flat array .
4755	Get the table keys based on the relation .
4756	This determines the foreign key relations automatically to prevent the need to figure out the columns .
4757	Client connection details .
4758	Convert a semantic version string to a number .
4759	Scope a given key value .
4760	Set available_at attribute .
4761	Get the payload .
4762	Convert bytes to a word .
4763	Convert an integer timeset to pretty .
4764	Convert seconds to words .
4765	Truncate a string .
4766	Add permissions to a topic
4767	Confirm a subscription to a topic
4768	Create an SNS topic
4769	Get the attributes of a topic like owner ACL display name
4770	List subscriptions that user is subscribed to
4771	List subscribers to a topic
4772	List SNS topics
4773	Publish a message to a topic
4774	Remove a set of permissions indentified by topic and label that was used when creating permissions
4775	Set a single attribute on a topic
4776	Subscribe to a topic
4777	Create Platform endpoint
4778	Publish a message to an Endpoint
4779	Perform and process a cURL request
4780	Transform the standard AmazonSNS XML array format into a normal array
4781	Clear all tasks
4782	QuTee - Higher the number higher the priority ; Beanstalkd - Lower the number higher the priority
4783	Run the worker get tasks of the queue run them
4784	Customize the tabs on the settings screen .
4785	Get the invitation for the given code .
4786	Create the default settings tabs configuration .
4787	Generate a coupon instance from the given Stripe coupon instance .
4788	Get the coupon for a given code .
4789	Get the current coupon for the authenticated user .
4790	Get the team for the given ID .
4791	Get all of the available roles that may be assigned to team members .
4792	Update the user s profile information .
4793	Validate the incoming request to update the user s profile .
4794	Update the user s e - mail address on Stripe .
4795	Install the default JavaScript file for the application .
4796	Install the environment variables for the application .
4797	Subscribe the user to a new plan .
4798	Change the user s subscription plan .
4799	Update the user s billing card information .
4800	Update the extra billing information for the user .
4801	Cancel the user s subscription .
4802	Resume the user s subscription .
4803	Download the given invoice for the user .
4804	Set the price of the plan .
4805	Set the currency symbol used by the plan .
4806	Specify the number of trial days the plan receives .
4807	Set the tier of the plan .
4808	Set the features of the plan .
4809	Get the current user of the application .
4810	Create a new user of the application based on a registration request .
4811	Create a new user of the application .
4812	Create the default user instance for a new registration .
4813	Create the subscription on Stripe .
4814	Register the given user with the provider .
4815	Determine if the given token is valid for the given user .
4816	Delete the given user from the provider .
4817	Show the settings dashboard .
4818	Invite a user to the team by e - mail address .
4819	Remove a user from the team by their ID .
4820	Send an invitation for the given team .
4821	Accept the given team invitation .
4822	Create a new custom tab instance .
4823	Get an array of the displayable tabs .
4824	Define the resources used by Spark .
4825	Bind the Spark services into the container .
4826	Notify the given user about a new invoice .
4827	Handle a cancelled customer from a Stripe subscription .
4828	Create a new team for the given user and data .
4829	Get all of the teams for the user .
4830	Get all of the pending invitations for the user .
4831	Attach a user to a given team based on their invitation .
4832	Get plan matching a given ID .
4833	Get all of the monthly plans for a given tier .
4834	Get the team that user is currently viewing .
4835	Determine if the given team is owned by the user .
4836	Get the user s role on a given team .
4837	Create a new team .
4838	Show the edit screen for a given team .
4839	Update the team s owner information .
4840	Switch the team the user is currently viewing .
4841	Update a team member on the given team .
4842	Remove a team member from the team .
4843	Remove the user from the given team .
4844	Destroy the given team .
4845	Get the response from a custom validator callback .
4846	Call a custom Spark updater callback .
4847	Update the user s password .
4848	Enable two - factor authentication for the user .
4849	Validate an incoming request to enable two - factor authentication .
4850	Disable two - factor authentication for the user .
4851	Send the post - authentication response .
4852	Generate a redirect response to the two - factor token screen .
4853	Verify the two - factor authentication token .
4854	Show the application registration form .
4855	Validate the new registration .
4856	Validate a new registration using the default rules .
4857	Validate that the provided coupon actually exists on Stripe .
4858	Log the user out of the application .
4859	Flash zprava s podporou translatoru
4860	Creates a new event instance .
4861	Registers an exception .
4862	Exports the exception .
4863	Imports the exception .
4864	Normalizes the given event into an Event instance .
4865	Gets a WordPress event handler wrapper .
4866	Creates an event instance in cache .
4867	Checks if an event instance exists in cache for the given event name .
4868	Gets the cached event instance for the given name creating it if needed .
4869	Removes a cached event instance .
4870	Creates a wrapper for a WordPress event handler containing and replacing it .
4871	Exports an exception .
4872	Converts an exported exception back into a Throwable .
4873	Removes a hook handler from a WordPress event .
4874	Replaces a WordPress hook instance .
4875	Returns the amount of work to do . Give this worker a break will you?
4876	Clears too old references .
4877	Sends a message to the pool . Only usable in the worker thread .
4878	Dereferences a task . Decrements the worker s busy counter . This method is automatically called by the task .
4879	This method MUST be always invoked in the worker when booting up .
4880	Parallelizes a given function across a number of available workers collects the values passing the truth test and reconstructs the array .
4881	Parallelizes a given flattening function across a number of available workers collects their return values and flattens the final array . Whether the resulting array is an actual flat map depends on the given callable .
4882	Parallelizes a given function across a number of available workers collects their return values and reconstructs the array .
4883	Creates a parallelized function from a callable and the arguments .
4884	Converts the result into a multi reason exception or returns the result .
4885	Sets the argument count value to pass to the native WordPress action and filter hooking functions .
4886	Causes WordPress to execute all handlers of the specified hook .
4887	Calls the callback functions added to a filter hook .
4888	Adds a hook handler to a WordPress event .
4889	Wrapper for the function result . Closures get called . Promises get resolved and their resolve value get sent upstream to the pool .
4890	Resumes whatever the implementation would do . Adds the timer or resumes all streams .
4891	Stops whatever the implementation would do . Cancels the timer or pauses all streams .
4892	Destroys the messenger . And everything .
4893	Gets the ResourceSocket for the worker .
4894	Removes the ResourceSocket of the worker .
4895	Prepares the worker if needed .
4896	Attaches a handler for a method on this instance .
4897	Computes a hash of a given callable .
4898	Write some data into the stream .
4899	Pipes all the data from this readable source into the given writable destination . Automatically sends all incoming data to the destination . Automatically throttles the source based on what the destination can handle .
4900	Handles read .
4901	Handles write .
4902	Checks for errors on the socket .
4903	Removes the read listener .
4904	Removes the write listener .
4905	Decodes a message .
4906	Attaches the pool timer to the loop .
4907	Cancels only the pool timer . Workers continue to run .
4908	Submits the work to a worker . Resolves with the worker who accepted the job .
4909	Submits the work to a specific worker .
4910	Submits the task to a worker and returns a promise which resolves or rejects with the resolve value of the task .
4911	Submits the task to a specific worker and returns a promise which resolves or rejects with the resolve value of the task .
4912	Stops a worker correctly and gracefully .
4913	Removes a worker correctly .
4914	Sends a message to the worker thread .
4915	Broadcasts a message to all workers .
4916	Timer tick . Used when using the timer implementation .
4917	Internal Timer tick .
4918	Spawns a new worker .
4919	Checks whether the worker is alive or spawns a new one .
4920	Checks periodically whether the worker has shutdown .
4921	Handles a message received from a worker .
4922	Handles a stream close .
4923	Read bytes .
4924	Read uuid .
4925	Read list .
4926	Read map .
4927	Read variable length integer .
4928	Read variable length decimal .
4929	Register the service on the IoC container .
4930	Load the package config files .
4931	Send a single message .
4932	Validate a response from the API to check for errors
4933	Send messages in bulk .
4934	Check status for single id
4935	Send the queued messages .
4936	Generate the CSV to send .
4937	Send the message .
4938	Set the message .
4939	Calculate from the message string how many SMSes it may have to span .
4940	Parse a phone number .
4941	Send the status query
4942	Finds dynamic entries by the given parameters .
4943	Returns the number of found entities .
4944	Adds the filters from the given array to the QueryBuilder .
4945	Depending on the given search term this function filters the result based on search fields .
4946	Depending on the given dates this function filters the result based on the created date .
4947	Get field .
4948	Get fields .
4949	Build by dynamic entity .
4950	Build by type .
4951	Build admin mail configuration by dynamic entity .
4952	Build website mail configuration by form translation .
4953	Get file fields by dynamic .
4954	Get collection id by dynamic .
4955	Get email from dynamic .
4956	Get email .
4957	Returns formType and the built form .
4958	Create form .
4959	Load Form entity .
4960	Get defaults .
4961	Get webspace key .
4962	Check checksum with given parameters .
4963	Create a checksum and encode with secret and given parameters .
4964	Return dynamic form entries .
4965	Returns the fields for a dynamic form .
4966	Delete dynamic form entry .
4967	Get filters .
4968	Get form .
4969	Convert value to string .
4970	Get media urls .
4971	For performance generate route only once .
4972	Get choices .
4973	Returns options for multichoice form type like select multiple select radio or checkboxes .
4974	Returns FormView by given params .
4975	On Kernel request .
4976	Get translation .
4977	Get field by key .
4978	Get fields not in array .
4979	Return a localized array of the object .
4980	Form action .
4981	Form only action .
4982	Handle form submit .
4983	Handle form only submit .
4984	Generates a token for the form .
4985	Get errors .
4986	Handle form .
4987	Save form .
4988	Upload media .
4989	Map media ids .
4990	Get media data .
4991	Returns array of Mailchimp lists of given account defined by the API key .
4992	Get builder .
4993	Returns the prefix of the template block name for this type .
4994	Create collection .
4995	Load collection id .
4996	Get item width number .
4997	Get last width .
4998	Handles the specified exception thrown by PDO and tries to throw a more specific exception or error instead
4999	Sets the hostname
5000	Sets the unix socket
5001	Sets whether to keep the database in memory only
5002	Sets the file path
5003	Sets the database name
5004	Sets the charset
5005	Makes sure that the connection is active and otherwise establishes it automatically
5006	Configures this connection by setting appropriate attributes
5007	Selects from the database using the specified query and returns what the supplied callback extracts from the result set
5008	Get list of message queues
5009	Get information about queue . Also returns queue size .
5010	Push a message on the queue
5011	Push multiple messages on the queue
5012	Get the message with the given id .
5013	Touch a Message on a Queue Touching a reserved message extends its timeout by the duration specified when the message was created which is 60 seconds by default .
5014	Release a Message on a Queue Releasing a reserved message unreserves the message and puts it back on the queue as if the message had timed out .
5015	Add alerts to a queue . This is for Pull Queue only .
5016	Remove alert from a queue by its ID . This is for Pull Queue only .
5017	Delete a Message Queue This call deletes a message queue and all its messages .
5018	Updates the queue object
5019	Creates a queue
5020	Replace old Subscribers with new ones Older subscribers will be removed .
5021	Remove Subscribers from a Queue
5022	Generate and output the data as JSON .
5023	Generate and output the data as XML .
5024	Generate a xml element from the input data .
5025	Generate and output the data as CSV .
5026	Flatten an array .
5027	Execute the CLI task
5028	Format the raw array for the command line report
5029	Format the usage stats
5030	Formats the uptime to be friendlier
5031	Add a server to the memcache pool .
5032	Add an array of servers to the memcache pool
5033	Spend a few tenths of a second opening a socket to the requested IP and port
5034	Retrieve a value from memcache
5035	Add a value to the memcache
5036	Delete a value from the memcache
5037	Inject a cache client interface to interact with a custom cache service
5038	Retrieve a value from the cache using the provided key
5039	Delete a key from the cache
5040	Make Invalid Argument Exception .
5041	Populate Builder .
5042	Set Options .
5043	Set Notification .
5044	Set Data .
5045	Encases a string in CDATA tags and escapes any existing CDATA end tags already present in the string .
5046	Get URL without authentication data . Note that this method may set a channel parameter if there is none already .
5047	Returns a full URL with authentication data . The type of authentication is determined from the configuration . Note that this method may set a channel parameter if there is none already .
5048	Get URL with advanced authentication encryption .
5049	Get URL with simple authentication encryption .
5050	Get URL with HTTP authentication .
5051	If no channel is set try to fill it from configuration data .
5052	Set one product IDs to get similar records for .
5053	Returns the attributes based on which similar records are determined as well as the source product s values of those attributes . If no ID has been set there will be a warning raised and an empty array will be returned .
5054	Returns similar records for the ID previously specified . If no ID has been set there will be a warning raised and an empty result will be returned .
5055	Writes a string to the target file . Opens file if not already open .
5056	Loads a class .
5057	Sets the target parameter .
5058	Trigger a search data import .
5059	Trigger a suggest data import .
5060	Changes the keys in a Parameters object according to the given mapping rules .
5061	Ensures that the passed parameters object has a channel parameter by adding one if necessary .
5062	Adds keys to an array of parameters according to the given require rules .
5063	Adds an appender to the pool . The appender must be named for this operation .
5064	Retrieves an appender from the pool by name .
5065	Log a message object with the TRACE level .
5066	Log a message object with the DEBUG level .
5067	Log a message with the WARN level .
5068	Log a message using the provided logging level .
5069	Logs an already prepared logging event object .
5070	This method creates a new logging event and logs the event without further checks .
5071	Remove the appender passed as parameter form the Logger .
5072	Starting from this Logger search the Logger hierarchy for a non - null level and return it .
5073	Returns the hierarchy used by this Logger .
5074	Returns a Logger by name . If it does not exist it will be created .
5075	Destroy configurations for logger definitions
5076	Configures log4php .
5077	Creates a logger configurator instance based on the provided configurator class . If no class is given returns an instance of the default configurator .
5078	Set the maximum amount of recommendations to be fetched .
5079	Add one or multiple product IDs to base recommendation on in addition to any IDs previously set .
5080	Returns recommendations for IDs previously specified . If no IDs have been set there will be a warning raised and an empty result will be returned .
5081	Track a detail click on a product .
5082	Track a product which was added to the cart .
5083	Track a product which was purchased .
5084	Track a click on a recommended product .
5085	Track login of a user
5086	Set a list - like array of product IDs to compare .
5087	Returns the attributes which can be compared and whether the products in question differ in each of those attributes . If no IDs have been set there will be a warning raised and an empty array will be returned .
5088	Returns the records corresponding to the IDs previously specified . If no IDs have been set there will be a warning raised and an empty result will be returned .
5089	Converts the event and formats it according to setting in the Formatting information object .
5090	Setter function for boolean type .
5091	Setter function for LoggerLevel values .
5092	Setter for file size .
5093	Setter function for numeric type .
5094	Setter function for string type .
5095	Set the location information for this logging event . The collected information is cached for future use .
5096	Returns the time when the application started as a UNIX timestamp with microseconds .
5097	Returns the time in milliseconds passed from the beginning of execution to the time the event was constructed .
5098	Returns a request object all wired up and ready for use .
5099	Get the tag cloud from FACT - Finder as an array of TagQuery s .
5100	Set the maximum amount of tag queries to be fetched .
5101	In case of a collision of keys the existing feedback string will be overwritten .
5102	Set one or multiple product numbers to get campaigns for overwriting any numbers previously set . Note that multiple numbers will only be considered for shopping cart campaigns . For product detail campaigns only the first number will be used .
5103	Add one or multiple product numbser to get campaigns for in addition to any numbers previously set .
5104	Set the page id to get landing page campaigns .
5105	Sets the adapter up for fetching campaigns on product detail pages
5106	Sets the adapter up for fetching campaigns on shopping cart pages
5107	Returns campaigns for IDs previously specified . If no IDs have been set there will be a warning raised and an empty result will be returned .
5108	Get the product campaigns from FACT - Finder as the string returned by the server .
5109	Adds a non - literal converter to the converter chain .
5110	Determines which converter to use based on the conversion word . Creates an instance of the converter using the provided formatting info and option and returns it .
5111	Parses the formatting modifiers and produces the corresponding LoggerFormattingInfo object .
5112	Override level setter to prevent setting the root logger s level to null . Root logger must always have a level .
5113	Adds a renderer to the map .
5114	Sets a custom default renderer class .
5115	Returns the appropriate renderer for a given class name .
5116	Get parameters which are allowed in server URLs .
5117	Loads and parses the INI configuration file .
5118	Converts the provided INI configuration file to a PHP array config .
5119	Parses a logger definition .
5120	Parses an configuration line pertaining to an appender .
5121	Parses a renderer definition .
5122	Appends the event to syslog .
5123	Parses a syslog option string and returns the correspodning int value .
5124	Parses the facility string and returns the corresponding int value .
5125	Parses the priority string and returns the corresponding int value .
5126	Appends a new event to the mongo database .
5127	Converts an Exception into an array which can be logged to mongodb .
5128	Closes the connection to the logging database
5129	Configures log4php based on the given configuration . The input can either be a path to the config file or a PHP array holding the configuration .
5130	Parses layout config creates the layout and links it to the appender .
5131	Set this to true to only retrieve the IDs of products instead of full Record objects .
5132	Value for parameter followSearch for followups on initial search like filters pagination ... Either from search results searchParams request parameters or from search results simiFirstRecord . Returns 0 if no parameter followSearch could be acquired .
5133	Adds a new filter to the filter chain this filter is a part of . If this filter has already and follow up filter the param filter is passed on until it is the last filter in chain .
5134	Set a response for the current connection settings along with the URL which was used to obtain the response .
5135	Set the session id for personalization .
5136	Compares two logger levels .
5137	Returns an Off Level
5138	Returns a Fatal Level
5139	Returns an Error Level
5140	Returns a Warn Level
5141	Returns an Info Level
5142	Returns a Debug Level
5143	Returns a Trace Level
5144	Returns an All Level
5145	Convert the input argument to a level . If the conversion fails then this method returns the provided default level .
5146	Read a predefined var .
5147	Converts the value to a level . Throws an exception if not possible .
5148	Converts a value to string or throws an exception if not possible .
5149	Performs value substitution for string options .
5150	Returns a named logger instance logger . If it doesn t exist one is created .
5151	Get target of the current request .
5152	Processes the conversion pattern and creates a corresponding chain of pattern converters which will be used to format logging events .
5153	Produces a formatted string as specified by the conversion pattern .
5154	Adds a filter to the end of the filter chain .
5155	Checks whether the message level is below the appender s threshold .
5156	Triggers a warning for this logger with the given message .
5157	Get the suggestions from FACT - Finder as an array of SuggestQuery s .
5158	Expects a fully qualified class name . if the leading namespace is omitted or FACTFinder we first check whether there is a custom class in namespace FACTFinder \ Custom \ then we look in FACTFinder \ . If none of them exist it also checks if the name is the class name itself . Note that classes in the \ Custom namespace should inherit the class they overwrite - otherwise some of the type hinting within the library might break .
5159	Implements the usual roll over behaviour .
5160	Acquires a database connection based on parameters . Parses the insert pattern to create a chain of converters which will be used in forming query parameters from logging events .
5161	Appends a new event to the database .
5162	Converts the logging event to a series of database parameters by using the converter chain which was set up on activation .
5163	Generates a link to be used on the page that leads to the client from a set of server parameters . Note that the link will still be UTF - 8 encoded . If the page uses a different encoding conversion to that encoding has to be done when actually rendering the string to the page .
5164	Returns all feedback texts for the given label concatenated with PHP_EOL .
5165	Returns an array with the pushed products from all campaigns . Note that if a product shows up in multiple campaigns it will be duplicated in the result of this function .
5166	Returns an array with the active questions from all campaigns .
5167	Returns an array with the root questions of the advisor trees from all campaigns .
5168	Additional validation for the date pattern .
5169	Appends a logging event .
5170	Find a permission by the given permission id
5171	Find a permission by the given permission value
5172	Render the current item
5173	Setup the layout used by the controller .
5174	Display a list of all users
5175	Show new user form view
5176	Create new user
5177	Activate a user since the dashboard
5178	View user account
5179	List of groups
5180	Edit group action
5181	Remove user from group
5182	Add a user in a group
5183	Validate group informations
5184	Include some specific files from the src - root .
5185	Register helpers in app
5186	Index loggued page
5187	Login post authentication
5188	List of permissions
5189	Create new permission
5190	Delete a permission
5191	Write pagination on the pdf
5192	Internal method to authenticate a set of credentials Credentials can be found in the SiteCatalyst Admin Console Admin > Admin Console > Company > Web Services
5193	Uses UUID Version 4
5194	Returns true if an option for the given flag is set .
5195	Gets the rule associated with the given flag .
5196	Returns true if the given flag expects a parameter .
5197	Returns true if the given flag is required .
5198	Returns true if the given flag is optional .
5199	Parses the given arguments according to this parser s rules . An exception will be thrown if any rule is violated .
5200	Returns true if the given string is considered a parameter .
5201	this is necessary because order matters with the PHP SoapClient Essentially we fill in all the parameters with null values
5202	Authenticate a user for all next requests
5203	Get the report API
5204	Get the permissions API
5205	Get the company API
5206	Get the OAuth API
5207	Send a request to the server receive a response decode the response and returns an associative array
5208	Retrieve the elements to call from your report suite
5209	Retrieve events for your report suites
5210	Returns a report synchronously calling getReport every two seconds until the report is ready
5211	Determines next sleep time for report queue checking . Uses an incredibly complex backing off algorithm so that long requests don t have to check as often .
5212	Parse Provided options
5213	Get Data from Pixabay API
5214	Get Images from Pixabay API
5215	Get Videos from Pixabay API
5216	Prints a string to STDOUT
5217	get table safeUp definition with primary key
5218	get table safeDown definition
5219	truncate table data
5220	get column key
5221	drop column key
5222	add forengin key
5223	drop foreign key
5224	Returns the columns definition .
5225	Returns the primary key definition .
5226	get table comment
5227	Returns the schema type .
5228	Returns the other definition .
5229	print all over the table name without table prefix
5230	generate migration file - type = 0 generate table 1 generate table data 2 generate add key 3 generate add foreign key
5231	print the createTable code .
5232	print the dropTable code .
5233	Unified generate file interface
5234	Unified printf interface
5235	Get relevant data with array style for generating file function
5236	printf some thing at the terminal and record start time
5237	printf some thing at the terminal and record end time
5238	print conclusion at the terminal
5239	Fetch content from URL
5240	Process and populate class for results
5241	Build a complete webservices URL
5242	Return all AD groups in configured search locations including all nested groups . Uses groups_search_locations if defined otherwise falls back to NULL which tells LDAPGateway to use the default baseDn defined in the connection .
5243	Get a particular AD group s data given a DN .
5244	Return all AD users in configured search locations including all users in nested groups . Uses users_search_locations if defined otherwise falls back to NULL which tells LDAPGateway to use the default baseDn defined in the connection .
5245	Get a specific AD user s data given a GUID .
5246	Get a specific AD user s data given a DN .
5247	Get a specific user s data given an email .
5248	Get a specific user s data given a username .
5249	Get a username for an email .
5250	Given a group DN get the group membership data in LDAP .
5251	Sync a specific Group by updating it with LDAP data .
5252	Creates a new LDAP user from the passed Member record . Note that the Member record must have a non - empty Username field for this to work .
5253	Creates a new LDAP group from the passed Group record .
5254	Update the Member data back to the corresponding LDAP user object .
5255	Ensure the user belongs to the correct groups in LDAP from their membership to local LDAP mapped SilverStripe groups .
5256	Change a members password on the AD . Works with ActiveDirectory compatible services that saves the password in the unicodePwd attribute .
5257	Delete an LDAP user mapped to the Member record
5258	Modify rows altering their values
5259	Connect to Handler Socket
5260	Disconnect from server
5261	Receive one string from server string haven t trailing \ n
5262	Send command to server
5263	Encode string for sending to server
5264	Decode string from server
5265	Read response from server
5266	Authenticate a connection
5267	Ensures response times are the same across all scenarios i . e . email exists or doesn t this helps to avoid issues where malicious users could find if an email is legitimate based on response time
5268	Create the user in LDAP provided this configuration is enabled and a username was passed to a new Member record .
5269	Write DataObject without triggering this extension s hooks .
5270	Get message from session
5271	Factory method for the lost password form
5272	Show the password sent page after a user has requested to reset their password .
5273	Query the LDAP directory with the given filter .
5274	Return a particular LDAP group by objectGUID value .
5275	Changes user password via LDAP .
5276	Administrative password reset .
5277	Move an LDAP object from it s original DN location to another . This effectively copies the object then deletes the original one .
5278	Performs the login but will also create and sync the Member record on - the - fly if not found .
5279	Try to authenticate using the fallback authenticator .
5280	Assertion Consumer Service
5281	Generate this SP s metadata . This is needed for intialising the SP - IdP relationship . IdP is instructed to call us back here to establish the relationship . IdP may also be configured to hit this endpoint periodically during normal operation to check the SP availability .
5282	Converts a little - endian hex - number to one that hexdec can convert
5283	callback for select request
5284	Selects all rows with key relative as described
5285	Split the hash into its calculated hash and salt .
5286	Create the appropriate db driver given a config .
5287	Get a table definition .
5288	Get all of the tables in the database .
5289	Move the primary key index into the correct place for database drivers .
5290	Compare two index definitions to see if they have the same columns and same type .
5291	Get a single row from the database .
5292	Build a standardized index name from an index definition .
5293	Encode a string using a secure specification .
5294	Generate a random string suitable for use as an encryption or signature key .
5295	Get information about a supported spec name .
5296	Sign a string with hmac and a hash method .
5297	Verify the signature on a secure string .
5298	Verify that a timestamp hasn t expired .
5299	Pop a string off of the end of an encoded secure string .
5300	Pushes a string on to the end of an encoded secure string .
5301	Twiddle a value in an encoded secure string to another value .
5302	Gets the error message from an error .
5303	Add an error .
5304	Gets the main error message for the validation .
5305	Get or set the error status code .
5306	Get the message for this exception .
5307	Gets all of the errors as a flat array .
5308	Check whether or not a particular field is has errors .
5309	Parse a schema in short form into a full schema array .
5310	Require one of a given set of fields in the schema .
5311	Validate data against the schema .
5312	Validate a field .
5313	Validate an array .
5314	Validate a base64 string .
5315	Validate a boolean value .
5316	Validate a date time .
5317	Validate a float .
5318	Validate and integer .
5319	Validate an object .
5320	Validate a required field .
5321	Validate a string .
5322	Validate a unix timestamp .
5323	Get all of the available addons or a single addon from the available list .
5324	Start up the addon framework .
5325	Get the cached file or hydrate the cache with a callback .
5326	A an array that maps class names to physical paths .
5327	Get all of the enabled addons or a single addon from the enabled list .
5328	Return the info array for an addon .
5329	Scan an addon directory for information .
5330	Scan an individual addon directory and return the information about that addon .
5331	Scan a directory for addons .
5332	Start an addon .
5333	Gets the response headers that were set on the exception .
5334	Call a callback with an array of parameters checking for events to be called with the callback .
5335	Bind an event handler to an event .
5336	Bind a class declared event handlers .
5337	Dumps all of the bound handlers .
5338	Fire an event .
5339	Fire an event with an array of arguments .
5340	Chain several event handlers together .
5341	Checks if a function exists or there is a replacement event for it .
5342	Get the event name for a callback .
5343	Get all of the handlers bound to an event .
5344	Checks if an event has a handler .
5345	Checks if a class method exists or there is a replacement event for it .
5346	Get the literal value .
5347	Set the literal value .
5348	Split the salt and hash from a single hash .
5349	Get or set the default path .
5350	Get a setting from the config .
5351	Load configuration data from a file .
5352	Save data to the config file .
5353	Get all of the matched routes for a request .
5354	Add a new route .
5355	Finalize the result from a dispatch .
5356	Tests whether a controller action exists .
5357	Find the allowed http methods on a controller object .
5358	Try matching a route to a request .
5359	Tests whether an argument fails against a condition .
5360	Gets or sets the response that is currently being processed .
5361	Create a Response from a variety of data .
5362	Gets or sets the content type .
5363	Gets or sets the asset that will be rendered in the response .
5364	Set the content type from an accept header .
5365	Translate an http code to its corresponding status message .
5366	Gets or sets a cookie .
5367	Gets or sets a global cookie .
5368	Get or set the meta data for the response .
5369	Get or set the data for the response .
5370	Gets or sets headers .
5371	Gets or sets global headers .
5372	Normalize a header key to the proper casing .
5373	Flush the headers to the browser .
5374	Alter a table by creating a new table and copying the old table s data to it .
5375	Rename a table .
5376	Drop an index .
5377	Create an index .
5378	Force a value into the appropriate php type based on its Sqlite type .
5379	Get the primary or secondary keys from the given rows .
5380	Get the all of tablenames in the database .
5381	Create and return a new route .
5382	Gets or sets the route s conditions .
5383	Gets or sets the allowed http methods for this route .
5384	Gets or sets the mappings array that maps parameter names to mappings .
5385	Gets or sets the global mappings array that maps parameter names to mappings .
5386	Determine whether or not a parameter is mapped to special request data .
5387	Get the mapped data for a parameter .
5388	Tests whether or not a route matches the allowed methods for this route .
5389	Gets or sets the route pattern .
5390	Dispatch the matched route and call its callback .
5391	Convert a path pattern into its regex .
5392	Execute a query on the database .
5393	Build a sql select statement .
5394	Convert an array into a bracketed list suitable for MySQL clauses .
5395	Build an insert statement .
5396	Build an upsert statement .
5397	Construct a column definition string from an array defintion .
5398	Return the SDL string that defines an index .
5399	Get an array of column orders so that added columns can be slotted into their correct spot .
5400	Get the translation format from the database .
5401	Translate a row from one row format to another .
5402	Check for a correct password .
5403	Encode hash .
5404	Gets or sets the current request .
5405	Gets or updates the default environment .
5406	Parse request information from the current environment .
5407	Parse the various server variables to build the global environment .
5408	Check for specific environment overrides .
5409	Get a value from the environment or the entire environment .
5410	Set a value from the environment or the entire environment .
5411	Retrieves all message headers .
5412	Get the host and port but only if the port is not the standard port for the request scheme .
5413	Sets the file extension of the request .
5414	Set the path with file extension .
5415	Set the full path of the request .
5416	Sets the port .
5417	Get an item from the query string array .
5418	Set an item from the query string array .
5419	Get an item from the input array .
5420	Gets the query on input depending on the http method .
5421	Sets the query on input depending on the http method .
5422	Get the full url of the request .
5423	Set the full url of the request .
5424	Construct a url on the current site .
5425	Split the file extension off a path .
5426	Reset the internal state of this object so that it can be re - used .
5427	Define a column .
5428	Get an array column def from a structured function call .
5429	Define the primary key in the database .
5430	Execute the table def against the database .
5431	Set the name of the table .
5432	Add or update an index .
5433	By default the production environment allows all and every other environment allows none Custom paths can be set by publishing and editing the config file
5434	Retrieve a list of records
5435	Retrieve a specific record
5436	Validate card payment details without making a payment
5437	Get a single attribute value
5438	Set attribute values
5439	Check if the specified method name is supported by this model
5440	Check if request data contains all of the required attributes to create a new record
5441	If a Judo ID is not set use the value from configuration
5442	Summary of the error
5443	Build a new model object
5444	Returns string representation of error
5445	Make a GET request to the specified resource path
5446	Make a POST request to the specified resource path
5447	Generic model methods
5448	Check if object contains all of the required attributes
5449	Checks for existence of an array element key .
5450	Render the notifications script tag
5451	Add a notification
5452	This method allows you to create deliveries from two locations . It s only used by the JsonToJob converter you cannot create you own route .
5453	Converts a Job into a Stuart Job as JSON .
5454	Converts a JSON formatted Stuart Job into a Job object .
5455	Frees resources associated with the server and closes the server .
5456	Frees resources associated with the datagram and closes the datagram .
5457	Creates a new instance of a DashboardChart
5458	Handles a request for a record in the table
5459	A controller action that handles the reordering of the list
5460	A link to this item as managed by the editor belonging to a dashbaord panel
5461	Provides a form to edit or create an object managed by the editor
5462	Saves the DetailForm and writes or creates a new object managed by the editor
5463	Gets a list of all the items in the RSS feed given a user - provided URL limit and date format
5464	Gets the recent edited pages limited to a user provided number of records
5465	Ensures that new members get the default dashboard configuration . Once it has been applied make sure this doesn t happen again if for some reason a user insists on having an empty dashboard .
5466	Override to check if there is a custom template for this panel otherwise fall back .
5467	Gets the link to view all records in a GridField
5468	Gets a link to create a new record in a GridField
5469	Gets the GridFields for a given page
5470	Gets the grid field instance given the selected page and GridField name
5471	Gets the name of the tab for the selected grid field name . Allows direct linking to the edit form to expose the grid .
5472	Gets the records in this GridField summary . Provides edit links and a title label
5473	Given a requested page get the GridField names and provide a JSON response
5474	Request account data from Google Analytics
5475	Clean error message from Google API
5476	Process filter string clean parameters and convert to Google Analytics compatible format
5477	Report Account Mapper to convert the JSON to array of useful PHP objects
5478	Report Object Mapper to convert the JSON to array of useful PHP objects
5479	Case insensitive array_key_exists function also returns matching key .
5480	Authenticate Google Account with OAuth2
5481	Return the URL to be requested optionally adding GET variables
5482	Perform http POST request
5483	Perform http GET request
5484	Perform http request
5485	HTTP request using PHP CURL functions Requires curl library installed and configured for PHP
5486	HTTP request using native PHP fopen function Requires PHP openSSL
5487	Gets a list of the recently uploaded files to the CMS
5488	Duplicates this panel . Drills down into the has_many relations
5489	Override to check if there is a custom template for this panel otherwise fall back
5490	Gets the link to view all records in ModelAdmin
5491	Gets the records in this ModelAdmin summary . Provides edit links and a title label
5492	Given a requested ModelAdmin subclass get the managed models and provide a JSON response
5493	Provides custom permissions to the Security section
5494	A controller action that handles the reordering of the panels
5495	A controller action that handles setting the default dashboard configuration
5496	A controller action that handles the application of a dashboard configuration to all members
5497	Renders the panel in this request
5498	Delets the panel in this request
5499	Gets the configuration form for this panel and handles the form input
5500	Processes the form input and writes the panel
5501	Gets the icon for the panel . Use the icon of the subject page when possible otherwise fall back on a default icon .
5502	A factory method that converts seconds to minutes . GA works in seconds .
5503	Gets the GAPI object . Creates if necessary .
5504	Gets the configuration FieldList for this panel
5505	A template access to determine if the credentials have been entered
5506	Gets the path to the subject page of the analytics . Can be a native SiteTree object or a custom path
5507	Gets the title of the chart . A composite of date range and path
5508	Returns a 4 - bytes floating - point
5509	Returns an variable number of bytes
5510	Converts the endianess of a number from big to little or vise - versa
5511	Returns an unsigned integer from the bit level
5512	Returns a signed integer from the bit level
5513	Returns an Unsigned 16 - bit Integer
5514	Returns a Signed 16 - bit Integer
5515	Returns an Unsigned 64 - bit Integer
5516	Returns a Signed 64 - Bit Integer
5517	Report the provided Trace to a backend .
5518	Returns an array representation of a callback which will be used to write batch items .
5519	Parses the robots . txt - file related to the given URL and returns regular - expression - rules corresponding to the containing disallow - rules that are adressed to the given user - agent .
5520	Function returns all RAW lines in the given robots . txt - content that apply to the given useragent - string .
5521	Returns an array containig regular - expressions corresponding to the given robots . txt - style Disallow - lines
5522	Retreives the content of a robots . txt - file
5523	Returns the Robots . txt - URL related to the given URL
5524	Initiates a crawler - process
5525	Starts the cralwer by using multi processes .
5526	Starts the loop of a child - process .
5527	Checks if the crawling - process should be aborted .
5528	Creates the working - directory for this instance of the cralwer .
5529	Retruns summarizing report - information about the crawling - process after it has finished .
5530	Adds a regular expression togehter with a priority - level to the list of rules that decide what links should be prefered .
5531	Sets the basic follow - mode of the crawler .
5532	Sets a limit to the number of bytes the crawler should receive alltogether during crawling - process .
5533	Sets the working - directory the crawler should use for storing temporary data .
5534	Assigns a proxy - server the crawler should use for all HTTP - Requests .
5535	Sets the timeout in seconds for connection tries to hosting webservers .
5536	Sets the timeout in seconds for waiting for data on an established server - connection .
5537	Resumes the crawling - process with the given crawler - ID
5538	Sets the base - URL of the crawling process some rules relate to
5539	Filters out all non - redirect - URLs from the URLs given in the PHPCrawlerDocumentInfo - object
5540	Checks whether a given URL matches the rules .
5541	Adds a rule to the list of rules that decide which URLs found on a page should be ignored by the crawler .
5542	Adds a bunch of rules to the list of rules that decide which URLs found on a page should be ignored by the crawler .
5543	Marks the given URL in the cache as followed
5544	Checks whether there are URLs left in the cache that should be processed or not .
5545	Returns all URLs currently cached in the URL - cache .
5546	Adds an bunch of URLs to the url - cache
5547	Starts the clock for the given benchmark .
5548	Stops the benchmark - clock for the given benchmark .
5549	Resets all clocks for all benchmarks .
5550	Returns all registered benchmark - results .
5551	Returns the current time in seconds and milliseconds .
5552	Creates the sqlite - db - file and opens connection to it .
5553	Returns the distinct - hash for the given URL that ensures that no URLs a cached more than one time .
5554	Gets the priority - level of the given URL
5555	Adds a Link - Priority - Level
5556	Adds a bunch of link - priorities
5557	Adds a PHPCrawlerDocumentInfo - object to the queue
5558	Returns a PHPCrawlerDocumentInfo - object from the queue
5559	Returns the PHPCrawlerUrlPartsDescriptor - object for the given URL .
5560	Sets the source - URL of the document to find links in
5561	Checks for a redirect - URL in the given http - header and adds it to the internal link - cache .
5562	Adds post - data together with an URL - regex to the list of post - data to send with requests .
5563	Updates the status of the crawler
5564	Registers the PID of a child - process
5565	Returns alls PIDs of all running child - processes
5566	Kills all running child - processes
5567	Returns the IP for the given hostname .
5568	Checks whether the hostname of the given URL is already cached
5569	Removes a visitor from the traverser .
5570	Traverses an expression .
5571	Filter a collection for entries matching the expression .
5572	Check that the result of a method call matches an expression .
5573	Formats a value as string .
5574	Formats a list of values as strings .
5575	Used to store a dynamic variable in Configure .
5576	Used to read and delete a variable from Configure .
5577	Gets the names of the configured Engine objects .
5578	Expands a flat array to a nested array .
5579	Split token conditions .
5580	Check a key against a token .
5581	Cache inflected values and return if already available .
5582	Set the instances to the Wrapper .
5583	Outputs a stack trace based on the supplied options .
5584	Protected export function used to keep track of indentation and recursion .
5585	Handle the events .
5586	Parse the message and return an array with informations about the message .
5587	Get file path
5588	Loads a plugin and optionally loads bootstrap files .
5589	Load the plugin path configuration file .
5590	Will load all the plugins located in the default plugin folder .
5591	Loads the bootstrapping files for a plugin or calls the initialization setup in the configuration .
5592	Read a config file and return its contents .
5593	This method can be used to define configuration .
5594	Read a config variable or all the config .
5595	Loads the list of modules in the DirectoryIterator .
5596	Check if the module exist in the plugin list . Primary used when we need to load a module and the module doesn t exists in the application itself .
5597	Unload a module from the Framework .
5598	Reloads a module by first calling unload and then load .
5599	Returns the time when a module was loaded or false if we don t have it .
5600	Returns if a module has been modified or - 1 if we do not have it
5601	Returns the module if we have it or false if we don t have it .
5602	Check if we have loaded a certain module .
5603	Creates a new Module in our list .
5604	Get the value related to the specified key
5605	Set the string value in argument as value of the key .
5606	Returns the values of all specified keys . For every key that does not hold a string value or does not exist the special value false is returned . Because of this the operation never fails .
5607	Sets multiple key - value pairs in one atomic command .
5608	call method by redis client
5609	before of method
5610	afterReturning of method
5611	the key of profile
5612	Applies the specified prefix to all the arguments .
5613	Applies the specified prefix only to even arguments in the list .
5614	Applies the specified prefix to the keys of an EVAL - based command .
5615	Set the expires property by adding lifetime to the created property .
5616	Sets the length of generated token .
5617	Read bytes from socket
5618	Send data to socket
5619	Check if command s requirements are met
5620	Check if current client protocol version matches server version
5621	Recursively encodes data to OrientDB representation
5622	Return string of last found key
5623	Prepare command execution
5624	Execute command by sending data to server receive initial reply
5625	Read raw data from socket
5626	Read long from socket . Returns int
5627	Read string from socket including its length
5628	Read bytes stream from socket including int length
5629	Read entire record from socket
5630	Add byte stream to outgoing data . Length is calculated automatically
5631	Unpacks 64 bits signed long
5632	Resets Record data keeping className and clusterID intact
5633	Get the component props as an associative array
5634	Render the component with the given props
5635	Render the arguments as class - names after applying some rules
5636	Get possible iDEAL issuers .
5637	Get allowed payment methods .
5638	Process the API response with allowed payment methods .
5639	Create a new iDEAL order .
5640	Create a new SEPA order .
5641	Create a new SOFORT order .
5642	Create a new Payconiq order .
5643	Create a new credit card order .
5644	Create a new Bancontact order .
5645	Create a new Cash On Delivery order .
5646	Create a new Klarna order .
5647	Create a new PayPal order .
5648	Create a new Home Pay order .
5649	Create a new AfterPay order .
5650	Create a new order .
5651	Get a single order .
5652	Post a new order .
5653	update the order status to captured
5654	Create a new Order with the iDEAL payment method .
5655	Create a new Order with the credit card payment method .
5656	Create a new Order with the SEPA payment method .
5657	Create a new Order with the SOFORT payment method .
5658	Create a new Order with the Bancontact payment method .
5659	Create a new Order with the Paypal payment method .
5660	Create a new Order with the HomePay payment method .
5661	Create a new Order with the Payconiq payment method .
5662	Create a new Order .
5663	Returns a new array with all elements which have a null value removed .
5664	Create a new API client .
5665	Get API endpoint based on product
5666	Check if provided value is ISO 3166 - 1 alpha - 2 country standard
5667	Build an array or a json string that represents the body of a payment request
5668	Execute a payment or an authorization that was previously approved by the client .
5669	Capture payment that was previously authorized by the client or witha credit card .
5670	Authorize a payment
5671	Create a payment
5672	Returns an access token object if paypal accepts the given credential
5673	Build an instance of PayPalRestApiClient \ Model \ Link given an array
5674	Build an instance of PayPalRestApiClient \ Model \ Capture given an array
5675	Build an instance of PayPalRestApiClient \ Model \ Amount given an array
5676	Build an array that represents paypal redirection urls
5677	Build an instance of PayPalRestApiClient \ Model \ AccessToken given an array
5678	Build an array of PayPalRestApiClient \ Model \ Transaction instances given an array of arrays
5679	Build an array that represents a paypal transactions array
5680	Sends a request and chatches exception if something does wrong .
5681	Build an instance of PayPalRestApiClient \ Model \ Payment given an array
5682	Build an instance of PayPalRestApiClient \ Model \ PaymentAuthorization given an array
5683	Build an instance of PayPalRestApiClient \ Model \ Payer given an array
5684	Build an array that represents a paypal payer
5685	Build an instance of PayPalRestApiClient \ Model \ Authorization given an array
5686	Obfuscate a string to prevent spam - bots from sniffing it .
5687	Make safer .
5688	Get form value from the eloquent model .
5689	Check if has a form mutator .
5690	Get a ReflectionClass Instance .
5691	Generate a link to a Favicon file .
5692	Generate a HTML link .
5693	Generate an ordered list of items .
5694	Generate an un - ordered list of items .
5695	Get the model value that should be assigned to the field .
5696	Create a text input field .
5697	Create an e - mail input field .
5698	Create a tel input field .
5699	Create a number input field .
5700	Create a url input field .
5701	Create a color input field .
5702	Get the check state for a checkbox input .
5703	Get the action for a url option .
5704	Get the action for a route option .
5705	Get the action for an action option .
5706	Inserts the string at the given position in the buffer .
5707	Returns the position of the given pattern in the buffer if it exists or false if it does not .
5708	Replaces the character in the buffer at the given position with the given string .
5709	Removes the character at the given index from the buffer .
5710	Reads data from the stream socket resource based on set length and read - to byte .
5711	Parse a given file and insert into databaase using closure .
5712	Read the file and get line count Not very efficient but does the job well ...
5713	Unzip the file
5714	Get Remote File Size
5715	Returns files array after removing entries in ignoreTables config option and adding custom countries from countries config option if necessary
5716	Closes the stream and rejects any pending promises .
5717	Returns bytes from the buffer based on the current length or current search byte .
5718	Moves to the given position in the buffer .
5719	Inserts the given string into the buffer at the current iterator position .
5720	Replaces the byte at the current iterator position with the given string .
5721	Removes the byte at the current iterator position and moves the iterator to the previous character .
5722	Publish the directory to the given directory .
5723	Closes the socket .
5724	Return admin1 information in result
5725	Return country information in result
5726	Build a query to find major cities . Accepts wildcards eg . Helsin%
5727	Build a query to find major ccountries . Accepts wildcards eg . %Finland%
5728	Generic query used by scopes but you can call it with custom feataure codes .
5729	Creates the queued redirects provided we can find the node .
5730	Has the Uri changed at all .
5731	Build redirects in all dimensions for a given node .
5732	Gets the node in the given dimensions and workspace and redirects the oldUri to the new one .
5733	Removes a redirect
5734	Check if the current node type is restricted by Settings
5735	Check if the current node path is restricted by Settings
5736	Collects all hostnames from the Domain entries attached to the current site .
5737	Creates an UriBuilder instance for the current request
5738	Decodes the name
5739	Validate the name of a short url
5740	Generate the page picker link
5741	Display list info in the backend
5742	Register Actions and Filters
5743	Plugin Action Links
5744	Get Plugin Version
5745	Get Remote Version
5746	Override Upload File Validation
5747	Sanitize SVG Uploads
5748	Parse Readme Contributors
5749	Extract Plugin Slug From Path
5750	Pull Plugin Contributors
5751	Validates the file passed to see if it is a file and is readable
5752	Gets the supported loader for the passed file
5753	Loads raw content from the file
5754	Creates the defined options into a way that Vars can use
5755	Return whitelisted tags
5756	Return whitelisted protocols
5757	Return whitelisted domains
5758	Sanitize a domain - like string for more level comparison .
5759	Sanitize attribute value
5760	Sanitize IRI value
5761	Callback handler for sanitizing CSS URLs
5762	Read an SVG file as contents or path .
5763	Remove comments and interpreter tags from an SVG file
5764	Duplicates the flags from one string to another
5765	Get loaders and make extensions for the loaders
5766	Pre parse the loaders for use in make loaders
5767	Makes namespace loaders from loader strings
5768	Parses the options so Vars can use them
5769	Makes the CacheProvider with the options
5770	Sets the base path if the options have been set and the cache path if the cache path has not been set but the base path has
5771	Makes the LoaderProvider with the options
5772	Sets the replacement variables if the option has been set
5773	Loads the cached file into the current class
5774	Gets the _globals from the file and merges them if merge_globals is true
5775	Searches the resource stack for a certain resource
5776	Creates a relative prefix for the store
5777	Creates the FileResource|ResourceProvider from the resource
5778	Adds content to the parent contents
5779	Returns the supported files using the extensions from the loaders in the entity which is a directory
5780	Merges the content and the parent content together
5781	The internal get function for getting values by their key
5782	Port of array_key_exists to \ ArrayAccess
5783	Parses the string for the types of variables
5784	Parses the string based on the type of variable
5785	Fetches the variable matches in the string
5786	Fetches the variable from the stores
5787	Checks to see if the variable exists
5788	Does the replacements in the string for the variable
5789	Export from a DOMDocument object .
5790	Remove nodes from a DOMNodeList
5791	Remove node from a DOMDocument
5792	Set the Vars base path
5793	Make the paths used for the filename variable
5794	Search for imports in the files and does the replacement variables
5795	Parses the contents inside the content array
5796	Use the import arrays to import resources
5797	Creates the resource from the import then imports it
5798	Creates resource from the import
5799	Creates the correctly formatted resource name with paths
5800	Import resource into the imported resources and merge contents
5801	Checks if the passed boolean value is true or false
5802	Gets the boolean value from the string
5803	Return MIME aliases for a particular file extension .
5804	Assign a new extension to a filename .
5805	Check extension and MIME pairing .
5806	Check Allowed Aliases
5807	Creates the replacement variable content from a file or array
5808	Returns the supported files in the directory recursively
5809	Makes usable resource paths from path strings
5810	Checks the cache to see if there is a valid cache available
5811	Transfer the contents of the parent Vars object into a file for cache
5812	Sets a new value for the assets version parameter
5813	Reads and parses file with parameters
5814	Send a REST request .
5815	Set cURL options common to all requests
5816	Perform a GET request with cURL
5817	Perform a PUT request with cURL
5818	Perform a DELETE request with cURL
5819	Perform a POST request with cURL
5820	Perform a HEAD request with cURL
5821	Execute a cURL request .
5822	Install a REST API XQuery extension
5823	Add bucket objects .
5824	Read an XML document from the database .
5825	Write an XML document to the database .
5826	Check if XML content is valid .
5827	Set up range values .
5828	Get the values setting as a DOMElement object .
5829	Add values options to an element .
5830	Add aggregate setting to an element .
5831	Get the common search parameters as an associated array .
5832	Retrieve the search results using the REST client .
5833	Retrieve the key - value search results for JSON content using the REST client .
5834	Retrieve the key - value search results where the key is an element name for XML content using the REST client .
5835	Highlight hits in the given content based on the given query
5836	Return a REST client based on current configuration .
5837	Return a REST client to the management API .
5838	Return a REST client to the admin API .
5839	Create and return a REST API based on current configuration .
5840	Return a Database object .
5841	Return an Options object .
5842	PSR - 0 autoloader .
5843	Get the query options as XML .
5844	If an option value is set create a DOM element with an option name and value and append it to the root element of the options node .
5845	If an option value is set create a DOM element with an option name and XML string value and append it to the root element of the options node .
5846	Read the query options from the database .
5847	Write the query options to the database .
5848	Delete the query options from the database .
5849	Set the query options .
5850	Read a document from the database .
5851	Write a document to the database .
5852	Delete a document from the database . Note that no properties for object are changed .
5853	Read document metadata from the database .
5854	Write document metadata to the database .
5855	Delete document metadata . Metadata reverts to default metadata state .
5856	Set the document content from the file system .
5857	Get the mimetype of a file .
5858	Keep track of our soap calls for performance and debugging
5859	Every response will be an array of the responses even if its just one response
5860	This converts an array of key = > value pairs into a flat array of one of the keys values
5861	Kick off LDAP Sync Process in CUCM - Name of LDAP Dirctory and true to start or false to stop .
5862	Get a complete list of the names of all phones
5863	Including specific fields to return in the list function .
5864	Search Phone by Name
5865	Search Phone by Key
5866	Get all the information regarding one specific phone by name
5867	Get an array of directory numbers by phone name
5868	Get an array of every device pool name
5869	Get an array of site names
5870	This function will need to get every phone in a device pool and then build a list of every LINE that is returned .
5871	Get Phone Line Details of the phone by Name
5872	This returns an associative array for each of the above types
5873	GET DETAILED STUFF
5874	Only way I want to support removing items is by UUID this is for safety because object names may not be unique
5875	Add capabilities .
5876	Get the latitude metadata .
5877	Get the longitude metadata .
5878	Get the format type of the body .
5879	Get error message from REST response body .
5880	Get the resource and params as a URL string .
5881	Create a REST API via a post to the MarkLogic rest - apis endpoint . It will not create an API if there already exists one with the same name .
5882	Delete a REST API .
5883	Sleep until a request is successful .
5884	Check if a REST API with the same name exists on the server .
5885	Get the term as a DOMElement object .
5886	Add term options to an element .
5887	Add facet options to an element .
5888	Add a fragment - scope setting to an element .
5889	Set the image content from the file system and also set the EXIF data .
5890	Get a search result corresponding to a URI .
5891	Get a search result corresponding to an index .
5892	Get a facet by its name .
5893	Add constraint metadata .
5894	Get the metadata extracts as a DOMElement object .
5895	Add one or more preferred elements for snippetting .
5896	Get the results transformation settings as a DOMElement object .
5897	Add collections metadata .
5898	Delete collections metadata .
5899	Add permissions metadata .
5900	Delete permissions metadata .
5901	Delete property metadata .
5902	Get the metadata object as XML .
5903	Load the metadata object from XML .
5904	Enables the Static Proxies by injecting the Container object and registering the Alias Loader for autoloading
5905	Sets the Container object that provides the actual subjects instances
5906	Compare the constraints present .
5907	Compare the indexes present .
5908	Compare if the fields are present in the fixtures .
5909	Gets a list of fixture files .
5910	Compare the fields present .
5911	Set the form type
5912	Set the form type to horizontal
5913	Create a form label field .
5914	Create a form error helper field .
5915	Create a form group element .
5916	Create a form action button .
5917	Create a button link .
5918	Create an alert item with optional emphasis .
5919	Create a form password field .
5920	Create a form file field .
5921	Create a button link to url .
5922	Create a secure button link to url .
5923	Create a button link to route .
5924	Create a button link to action .
5925	Create a button link to an email address .
5926	Create a none alert item .
5927	Replace subject by callback or by string .
5928	Return exception message without function name .
5929	Retrieve a value from Redis
5930	Save a value to Redis
5931	Removing the basket position
5932	Cleaning the entire basket
5933	Updating the positions of the basket such as changing the number of
5934	Gets the string value of a literal in the N3 library
5935	Gets the type of a literal in the N3 library
5936	Gets the language of a literal in the N3 library
5937	Creates an IRI in N3 . js representation
5938	Creates a literal in N3 . js representation
5939	Checking the MD5 sign .
5940	Building XML response .
5941	When handling tokenize as a variable we can hotswap its functionality when dealing with various serializations
5942	The input can be a string or a stream .
5943	De - obfuscates an obfuscated database ID .
5944	Obfuscates a database ID .
5945	Return a fully configured factory
5946	Loads a statement with a group as an actor .
5947	Loads a statement including a reference to another statement .
5948	Loads a statement including a result .
5949	Loads a statement including a sub statement .
5950	Creates an option .
5951	Loads a statement result .
5952	hook into the rendering for transformation of HTML to PDF
5953	hook into the Rendering of files the manager to hook in is the viewhelper insertfiles
5954	proxy in case that you just got a name and have to find the associated file - entity maybe this is redundant and can be deprecated
5955	give a summary of all inserted Files this is for having access to those files in the post - process
5956	remove unwanted or layout related data
5957	Attach an own ViewResolver
5958	Transform the HTML to PDF this is a post - rendering - process
5959	Look for a template with the Suffix . pdf . phtml
5960	Registers an option .
5961	Gets an option .
5962	Loads an activity profile document .
5963	Loads an agent profile document .
5964	Loads a state document .
5965	Add a behavior to be executed later .
5966	Add a value to be returned when the builder is executed .
5967	Add a default behavior .
5968	Add a default value .
5969	Execute the feature .
5970	Create and return a new Behavior .
5971	Waive the default behavior for this feature .
5972	Set the behavior and it s args .
5973	Start collecting metrics about this feature .
5974	Stop collecting metrics about this feature .
5975	Execute the behavior s callable and return the result .
5976	Create a new collection consisting of every n - th element .
5977	Get the first item from the collection .
5978	Get the last item from the collection .
5979	Get the max value of a given key .
5980	Create a collection of all elements that do not pass a given truth test .
5981	Get the collection of items as a plain array .
5982	Results array of items from Collection or Arrayable .
5983	Check if a feature slug is enabled for a particular bucket index .
5984	Parse a human readable map into a map of bitmasks .
5985	Creates a Instance of HashMap
5986	Get a configured Bucket instance .
5987	Set the Zumba \ Swivel \ Map object .
5988	Create a new Builder instance .
5989	Set the Swivel Bucket .
5990	Get multiple tables and their properties
5991	Get any properties related to the table
5992	Create one or more tables by array of table properties
5993	Create a single table by name and additional properties
5994	Create multiple table fields
5995	Create a single table field by name and additional properties
5996	Create multiple table relationships
5997	Create a single table relationship by name and additional properties
5998	Update one or more tables by array of table properties
5999	Update properties related to the table
6000	Update multiple table fields
6001	Update properties related to a table field
6002	Update multiple table relationships
6003	Update properties related to a table relationship
6004	Delete multiple tables and all of their contents
6005	Delete a table and all of its contents by name
6006	Set a target character length for text in a field .
6007	Delete all table entries but keep the table
6008	Retrieve the LDAP pagination cookie
6009	Resets the iterator to the initial state . This method is required by the interface Iterator .
6010	Escape a string for use in an LDAP filter or DN
6011	Add entries to LDAP directory
6012	Compare value of attribute found in entry specified with DN
6013	Open connection to an ldap server
6014	Send LDAP pagination control
6015	Bind to LDAP directory
6016	Get the current value for given option
6017	Add attribute values to current attributes
6018	Delete attribute values from current attributes
6019	Replace attribute values with new ones
6020	Modify an LDAP entry
6021	Modify an existing entry in the LDAP directory
6022	Modify the name of an entry
6023	Bind to LDAP directory using SASL
6024	Search LDAP tree
6025	Set the value of the given option
6026	Check the ldap status code and throw exception on error
6027	Adds a set .
6028	Computes the reference set used for iterate over the product .
6029	Computes the product and return the whole result .
6030	Return an array of names of a particular type of resource .
6031	Return the metadata about a particular schema resource .
6032	Compares two table names . The table names can be either quoted or unquoted . This method will consider both cases .
6033	Builds a SQL statement for adding a primary key constraint to an existing table .
6034	Builds a SQL statement for creating a new DB view of an existing table .
6035	Binds a value to a parameter .
6036	Extracts the PHP PDO type from DF type .
6037	Extracts the DreamFactory simple type from DB type .
6038	Extracts the default value for the column . The value is type - casted to correct PHP type .
6039	Adds an element to the data array
6040	Take parameters and return a valid Druid Query .
6041	Create a Guzzle Request object using the given JSON parameters
6042	Execute a Druid query using the provided query generator parameters and response payload handler .
6043	Set the HTTP Method .
6044	Set the protocol .
6045	Generate a Druid query s JSON POST body
6046	Configure the aggregators for this request .
6047	Configure the filters for this request .
6048	Configure the post aggregators for this request .
6049	Registers Twitter TypeAhead Bootstrap plugin and the related events
6050	Validates the query has the necessary parameters
6051	Converts the current object into a JSON representation to be used as a query
6052	Display the SwaggerUI interface
6053	Prepare the migration database for running .
6054	Determine if the given table has a given column .
6055	Get the data type for the given column name .
6056	Modify a table on the schema .
6057	Drop a table from the schema .
6058	Drop all tables from the database .
6059	Rename a table on the schema .
6060	Execute a raw SQL Command
6061	Creates a file object from a file an uploaded file .
6062	Creates a file object from a file on the disk .
6063	Creates a file object from raw data .
6064	Creates a file object from url
6065	After model is deleted - clean up it s thumbnails
6066	Returns the last modification date as a UNIX timestamp .
6067	Generates a unique name from the supplied file name .
6068	Delete all thumbnails for this file .
6069	Delete file contents from storage device .
6070	Checks if directory is empty then deletes it three levels up to match the partition directory .
6071	Returns true if a directory contains no files .
6072	Check file exists on storage device .
6073	Generates and returns a thumbnail url .
6074	Generates a thumbnail filename .
6075	Returns the default thumbnail options .
6076	Generate the thumbnail
6077	Define the public address for the storage path .
6078	Define the internal working path override this method to define .
6079	Create the column type definition for a enum type .
6080	Create the column type definition for a timeTz type .
6081	Create the column type definition for a timestampTz type .
6082	Curl WRITEFUNCTION handler
6083	Compilation Optimization Minification of assets js . Use the Closure Compile API .
6084	Register specifics for TastyIgniter .
6085	Adds leading slash from a URL .
6086	Adds a route to the router on any HTTP method
6087	Adds a route to the router that only match if the HTTP method is GET
6088	Adds a route to the router that only match if the HTTP method is POST
6089	Adds a route to the router that only match if the HTTP method is PUT
6090	Adds a route to the router that only match if the HTTP method is PATCH
6091	Adds a route to the router that only match if the HTTP method is DELETE
6092	Add a route to the router that only match if the HTTP method is OPTIONS
6093	Adds a route to the router that only match if the HTTP method is HEAD
6094	Renders the template .
6095	Get a source instance .
6096	Create a new migration at the given path .
6097	Ensure that a migration with the given name doesn t already exist .
6098	Get the migration stub file .
6099	Get the full path to the migration .
6100	Scope a query to only include activities by a given causer .
6101	Scope a query to only include activities for a given subject .
6102	Single level arrays only
6103	Get all of the migration paths .
6104	Clear all compiled view files .
6105	Define the parameters
6106	Define the headers
6107	Define proxy setting
6108	Define the cookies
6109	Define a cookie
6110	Define the options
6111	Send the request & return the response
6112	Build a HTTP request
6113	Execute the blueprint against the database .
6114	Build the table definition for table creation
6115	Build all columns indexes references to commands
6116	Specify an index for the table .
6117	Create a new float column on the table .
6118	Create a new double column on the table .
6119	Create a new decimal column on the table .
6120	Add nullable creation and update timestamps to the table .
6121	Add nullable creation and update timestampTz to the table .
6122	Add the proper columns for a polymorphic table .
6123	Add nullable columns for a polymorphic table .
6124	Add a new column to the blueprint .
6125	Create a default index name for the table .
6126	Add an element to an array using dot notation if it doesn t exist .
6127	Collapse an array of arrays into a single array .
6128	Get an item from an array .
6129	Get an item no null from an array .
6130	Get a value from the array and remove it .
6131	Map an array recursively
6132	Explode the value and key arguments passed to pluck .
6133	Sort a words list by their levenshtein distance of word .
6134	Convert a value to Capitalize case .
6135	Make a string s first character uppercase .
6136	Transform a Location instance into a string representation .
6137	The URL component is used to generate all kind of urls in the application
6138	Return the composer command line
6139	Construit les parametres de la requete .
6140	Construit les headers de la requete .
6141	Construit le proxy de la requete
6142	Construit les cookies de la requete
6143	Register an observer with the Model .
6144	Register a model event with the dispatcher .
6145	Bind some nicer events to this model in the format of method overrides .
6146	Remove all of the event listeners for the model .
6147	Prepares a query derived from the location model .
6148	Retrieve a location by their unique identifier .
6149	Retrieve a location by their unique slug .
6150	Flash a general message .
6151	Flash an overlay modal .
6152	Clear all registered messages .
6153	Adds a route to the router with task as class .
6154	Called upon bootstrap the application . Adds to container services desired services .
6155	Register Migrations \ Prefix
6156	Register Migrations \ Storage
6157	Boot the service provider .
6158	Convenient method for where like clause
6159	Get an array with the values of dates .
6160	Find a model by its primary key or return fresh model instance with filled attributes to use with forms .
6161	Return the user authenticated
6162	Log out of the application
6163	Log a user into the application
6164	Retrieve a user by his identifier & remember token .
6165	Retrieve a user by credentials
6166	Register db profiler
6167	Register view profiler
6168	Write the migration file to disk .
6169	Get the event names that should be recorded .
6170	Dump an array
6171	Return id for given object|array|resource
6172	Generate hash id for given array
6173	Check if an array contains any recursion
6174	Check if an object contains any recursion
6175	Dumps information about a variable
6176	List all commands available .
6177	Describe a \ Phalcon \ Cli \ Router \ Route
6178	Add directories to the class loader .
6179	Get the normal file name for a class .
6180	Load the mapped class for a directory prefix and relative class .
6181	If a file exists require it from the file system .
6182	Load the manifest into memory .
6183	Write the manifest array to filesystem .
6184	Get storage driver .
6185	Load a locale from a given path .
6186	Set the query constraint .
6187	Parse data coming from the database .
6188	Create a new query builder instance .
6189	Check if console has color support
6190	Applies the style to a given text .
6191	Get the ran migrations .
6192	Get list of migrations .
6193	Run the pending migrations at a given path .
6194	Run up a migration instance .
6195	Get the migrations for a rollback operation .
6196	Rollback the given migrations .
6197	Rolls all of the currently applied migrations back .
6198	Reset the given migrations .
6199	Run down a migration instance .
6200	Pretend to run the migrations .
6201	Get all of the migration files in a given path .
6202	Deleting Compiled Files
6203	Define the primary column
6204	Define a column
6205	Define a timestampable column . Automatically add the Timestampable behavior .
6206	Define a softDeleted column . Automatically add the SoftDelete behavior .
6207	Add column type
6208	Define a column type
6209	Check if option has been passed
6210	Returns true if the parent_id value in the database is different to the current value in the model s dirty attributes
6211	Adds a query scope to add conditions to query object
6212	Accessor for path attribute which is a string consisting of the ancestors of each node separated by > .
6213	Return the service to register
6214	Configuration cache .
6215	Generates SQL for rename table
6216	Boot the sortable trait for this model .
6217	Primary slug column of this model .
6218	Query scope for finding similar slugs used to determine uniqueness .
6219	Sends SQL statements to the database server returning the success state . Use this method only when the SQL statement sent to the server return rows
6220	Sends SQL statements to the database server returning the success state . Use this method only when the SQL statement sent to the server doesn t return any rows
6221	Returns an array of Phalcon \ Db \ Column objects describing a table
6222	Returns the first row in a SQL query result
6223	Dumps the complete result of a query into an array
6224	Inserts data into a table using custom RDBMS SQL syntax
6225	Updates data on a table using custom RDBMS SQL syntax
6226	Deletes data from a table using custom RDBMS SQL syntax
6227	Appends a LIMIT clause to sqlQuery argument
6228	Generates SQL checking for the existence of a schema . table
6229	Generates SQL checking for the existence of a schema . view
6230	Creates a table
6231	Creates a view
6232	Drops a view
6233	Adds a column to a table
6234	Modifies a table column based on a definition
6235	Drops a column from a table
6236	Adds an index to a table
6237	Drop an index from a table
6238	Adds a primary key to a table
6239	Drops primary key from a table
6240	Adds a foreign key to a table
6241	Drops a foreign key from a table
6242	Lists table indexes
6243	Lists table references
6244	Gets creation options from a table
6245	Renders HTML code for custom panel .
6246	Generates SQL to add a column to a table
6247	Generates SQL to modify a column in a table
6248	Generates SQL to delete a column from a table
6249	Generates SQL to delete an index from a table
6250	Generates SQL to add the primary key to a table
6251	Generates SQL to delete a foreign key from a table
6252	Generates SQL to create a table
6253	Generates SQL to create a view
6254	Generates SQL to drop a table
6255	Generates SQL to drop a view
6256	Bind all of the application paths in the container .
6257	Returns true if a database connection is present .
6258	Register the logger
6259	Boot the application services .
6260	Get the fillable attributes of a given array .
6261	Determine if the given attribute may be mass assigned .
6262	Format given number .
6263	Determine if the provided currency is active .
6264	Return all currencies .
6265	This methods registers the middlewares to be used by the application
6266	Attach an Listener
6267	Generate a unique hash for this order .
6268	Sets the new password on user requested reset
6269	Checks if the provided user reset password code is valid without actually resetting the password .
6270	Attempts to activate the given user by checking the activate code . If the user is activated already an Exception is thrown .
6271	Do the ask of an question
6272	Register currency provider .
6273	Register middleware was attached in the route .
6274	Attach a ControllerMiddleware .
6275	Return the reflection class of an object or a class
6276	Set the value of a property of an object or a class
6277	Get the value of a property of an object or a class
6278	Invoke a method of an object or a class
6279	Stores cached content into the file backend and stops the frontend
6280	Checks if cache exists and it hasn t expired
6281	Get the user selected currency .
6282	Returns a boolean determining coordinates equality
6283	Get the content of a block .
6284	Create a new event binding .
6285	Sort the listeners for a given event by priority .
6286	Destroys an event binding .
6287	Fire an event and call the listeners .
6288	Returns the internal dependency injector
6289	Determine if a header exists with a specific key .
6290	Set multiple headers .
6291	Return the header builded for the HTTP Request
6292	Check if coordinates have the same ellipsoid .
6293	Returns a more descriptive error message if application debug mode is turned on .
6294	Runs a local web server
6295	Start the session the first time some component request the session service
6296	Convert to DateTime object .
6297	Prepare the output file and directory .
6298	Get a pretty printed string of code from a file while applying visitors .
6299	Parses PHP code into a node tree .
6300	Database connection is created based in the parameters defined in the configuration file
6301	Get node s lft and rgt values .
6302	Limit results to ancestors of specified node .
6303	Add node selection statement between specified range .
6304	Add constraint statement to descendants of specified node .
6305	Get descendants of specified node .
6306	Include depth level into the result .
6307	Get wrapped lft and rgt column names .
6308	Get only nodes that have children .
6309	Order by node position .
6310	Move a node to the new position .
6311	Make or remove gap in the tree . Negative height will remove gap .
6312	Get patch for columns .
6313	Get patch for single column .
6314	Get statistics of errors of the tree .
6315	Fixes the tree based on parentage info .
6316	Rebuild the tree based on raw data .
6317	Boot the purgeable trait for a model .
6318	Adds an attribute to the purgeable attributes list
6319	Removes purged attributes used before saving .
6320	Returns the original value of a single attribute .
6321	Get a specific key from the settings data .
6322	Set a specific key to a value in the settings data .
6323	Unset a key in the settings data .
6324	Save any changes done to the settings data .
6325	Make sure data is loaded .
6326	This method is called on any attempt to compile a function call
6327	Runs all optimization
6328	Called after the execution of handler
6329	Add the limit header information to the response .
6330	Bind and return the limiter instance .
6331	Update the attributes .
6332	Log that a migration was run . Overrides the parent method and allows insertion of group data
6333	Create the migration repository data store .
6334	Get a query builder for the migration table .
6335	Database name fulltext index or similar NULL if not applicable
6336	set attribute to html element
6337	append attribute to html element
6338	set html element content replace all child elements
6339	add html element content
6340	Register the given commands .
6341	Generate a cache for http kernel s routes .
6342	Return queries randed behind callback .
6343	Determine if the given key has been accessed too many times .
6344	Increment the counter for a given key for a given decay time .
6345	Get the number of attempts for the given key .
6346	Clear the hits and lockout for the given key .
6347	Get the number of seconds until the key is accessible again .
6348	Dotconst compile & cache .
6349	Register the native filesystem implementation .
6350	Hotswap the underlying instance behind the facade .
6351	Initiate a mock expectation on the facade .
6352	Create a fresh mock instance .
6353	Determines whether a mock is set as the instance of the facade .
6354	Resolve the facade root instance from the container .
6355	Process the results of a singular select query .
6356	Process the results of a select query .
6357	Helper to break down template content in to a useful array .
6358	Process the data in to an update action .
6359	Attach all require event to make the listener
6360	Detach all event attached to the EventsManager
6361	Handle the geocoder request .
6362	Handle the reverse geocoding request .
6363	Get the status for the given ran migrations .
6364	List all routes .
6365	List the Http Routes
6366	Apply options to curl resource
6367	Apply curl info to response
6368	Compile loaded & parsed ini files to php files .
6369	Start a process
6370	Wait until process end or wait time
6371	Stop a process
6372	Stop & Close the resources
6373	Execute a process
6374	Build an memory optimized autoloader
6375	Generate phalcon loader
6376	Fill in data where it s missing .
6377	Get an item from an object .
6378	Get an item no null from an object .
6379	Get an item from an array or object using dot notation .
6380	Set an item on an array or object using dot notation .
6381	Registers itself as error and exception handler .
6382	Handle an php Error
6383	Logs the error and dispatches an error controller .
6384	Resolve a migration instance from a file .
6385	Should the message be logged?
6386	Register a file log handler .
6387	Register a daily file log handler .
6388	Register the logger class .
6389	SetUp Object to be ready for connect
6390	Do when SQL error occurs .
6391	Every item id added in LiTag envelope .
6392	Get an property from the entity .
6393	Set a given property on the entity .
6394	Set the array of entity properties .
6395	Get the entity original attribute values .
6396	Determine whether an attribute should be cast to a native type .
6397	Get the properties that have been changed since last sync .
6398	NavBar header code
6399	Add Dropdown Submenu .
6400	Add new button into Group
6401	Flush Messages .
6402	Add item into page body
6403	Add another CSS definition to stack .
6404	Get either a Gravatar URL or complete image tag for a specified email address .
6405	Set the item at the given offset .
6406	Returns database object instance .
6407	Locale Class handler
6408	Add params to url
6409	Turn all URLs in clickable links .
6410	Insert columns into table foot
6411	Include an CSS file call into page .
6412	Returns the current URL . This is instead of PHP_SELF which is unsafe .
6413	Build Post Data
6414	List of availble locales
6415	Find Locale Code for browser language
6416	Use Effective locale to requested
6417	Set up one of properties
6418	Obtain Status Messages
6419	Returns all countries .
6420	Every item id added in \ Ease \ Html \ LiTag envelope .
6421	Set object name .
6422	Set Ansi Color
6423	Get color code for given message
6424	Helper method for performing GET request to NetLicensing API services . Finds and returns first suitable item with type resultType from the response .
6425	Helper method for performing POST request to NetLicensing API services . Finds and returns first suitable item with type resultType from the response .
6426	Helper method for performing DELETE request to NetLicensing API services .
6427	Gives you value of KEY Column
6428	Odstrani polozku z pole dat pro MySQL .
6429	Reindex Array by given key .
6430	Recursive draw object and its contents
6431	Determines the vendor on whose behalf the call is performed
6432	Obtain item count
6433	Is object empty ?
6434	Escapes special characters in a string for use in an SQL statement .
6435	Perform connect to database .
6436	Insert array values as new database row
6437	Generuje fragment MySQL dotazu z pole data .
6438	Set Up PDO for curent usage .
6439	Carousel Slide .
6440	Add Navigation buttons .
6441	Add Status Message to all registered loggers
6442	Add Status Object to stack
6443	Returns name of tag .
6444	Returns property tag value .
6445	Finalize modal .
6446	clones an early runner when frequency is reached before current run finishes
6447	Create new Dynamic Tab
6448	Outputs the debug message .
6449	Attach a listener .
6450	Do the actual work of attaching the listener .
6451	Detatch an observer from an event .
6452	Remove all events for an observer .
6453	Checks to see if the pod belongs to this toolbox .
6454	Get the ArangoDB - PHP connection .
6455	Automatically determines which handler we need and return it .
6456	This generates a binding parameter for filtering so that it does not clash with any user defined parameters .
6457	Normalises the exceptions thrown by ArangoDB - PHP .
6458	Create a database using the current connection s settings and add it as a connection .
6459	Delete a database .
6460	Get information about a database .
6461	Lists all databases availiable .
6462	Get a cloned connection with targetting a database .
6463	Selects the connection as current connection . Any method executed through the client will use this connection .
6464	Get a toolbox for a connection .
6465	Adds a model formatter to the client . Once the the model formatter is added it will be used to determine what models to load in all future operations .
6466	Loads a model from the server using the collection type and the id .
6467	Create a graph using the current connection s settings and add it as a connection . A connection is automatically added to the client using the name of the graph so you need to be careful that it does not overwrite another connection with the same name .
6468	Rename a collection .
6469	Get information about an index .
6470	Loads a model from the server using the collection type and the id . Returns null if the pod could not be found or loaded .
6471	Process the result after storing a pod .
6472	Converts an array of documents into pods . The documents in each array can be an ArangoDB - PHP document edge or vertex or an associative array .
6473	Converts an associative array to a pod .
6474	Converts an ArangoDB - PHP document edge or vertex into a pod .
6475	Convinence function to instantiate a vertex hook up its events and set up its model .
6476	Convinence function to instantiate an edge hook up its events and set up its model .
6477	Convinence function to instantiate a document hook up its events and set up its model .
6478	Convinence function that sets up the model for a pod and associates the model with it .
6479	Because transactions are executed in 1 go this helps us deteremine if the pod has a previous command to store it . We can then use its id to work with it in the transaction .
6480	Convinence function to add commands to the transaction .
6481	Validates the type to make sure it is valid in the current context . For graphs a type other than edge or vertex would be invalid .
6482	Cleans the api response so that you always get a list of elements .
6483	Crawles a url .
6484	Parses a url node .
6485	Parses an image node .
6486	Parses a string node .
6487	Parses a date note .
6488	Search for the class s file and require it .
6489	Start coverage proccess
6490	Prepare and init config
6491	Create an edge connecting this vertex to another vertex .
6492	Get all inbound edges to this vertex . The edges can be filtered by their labels and AQL .
6493	Returns an ArangoDB - PHP vertex object representing this vertex .
6494	Converts any string or array of strings to UTF8 .
6495	Create a collection .
6496	Delete a collection .
6497	Renames a collection .
6498	Deletes all the documents inside the collection but leaves the indexes and metadata intact .
6499	Get information about a collection .
6500	Get statistics from a collection .
6501	Counts the number of documents in a collection .
6502	Load a collection on the server .
6503	Unload a collection on the server .
6504	Get information about an index . Returns null if the index does not exist and returns an array of index information if it does .
6505	Get the fields that are used to store geo coordinates for the first index for this collection .
6506	Returns a random document from a collection .
6507	Determines the collection name to use . For graphs it converts vertex and edge into the appropriate collection names on the server .
6508	Delete a user from the server .
6509	Get information about a user .
6510	Delete all the AQL functions within a namespace .
6511	List the AQL functions registered on the server and optionally filter by namespace .
6512	Get the server version .
6513	Get detailed information about the server .
6514	Get the unix timestamp of the server with microsecond precision
6515	Set a property for this pod .
6516	Remove a property for this pod .
6517	Get the value of a property from the pod .
6518	Set the id for this pod . The id is only allowed to be set once because once saved to the server the id can t be changed .
6519	Sets the distance information to the pod . This is intended to be used by the API and is not for public comsumption .
6520	Reset the meta data of the pod so that it appears as a new one . The existing user added data is not reset .
6521	Return an associative array representation of this document .
6522	Returns a JSON representation of this document .
6523	Returns a JSON representation of this document for transactions .
6524	Returns an ArangoDB - PHP document object representing this pod .
6525	Load this pod with document data from a ArangoDB - PHP document object .
6526	Load this pod with document data from an array .
6527	When this pod recieves an event process it accordingly . In this case the pod simply calls the various functions in model before and after each event .
6528	Set the to vertex of the edge .
6529	Get the id of the to node by checking for it in the actual _to property or checking an internal property . This is used because when documents are retrieved from the server we will not have a model in the _to property . This allows us to lazy load any vertices we need later .
6530	Set the from vertex of the edge .
6531	Get the id of the to node by checking for it in the actual _from property or checking an internal property . This is used because when documents are retrieved from the server we will not have a model in the _from property . This allows us to lazy load any vertices we need later .
6532	Returns an ArangoDB - PHP edge object representing this edge .
6533	Begin a transaction .
6534	Commit the transaction .
6535	Clear the saved information for the transaction .
6536	Add a collection that will be locked for reading .
6537	Add a collection that will be locked for writing .
6538	Pause the transaction so that operations after this point are not part of the transaction .
6539	Resume the transaction so that operations after this point are part of the transaction .
6540	Add a command to be executed for the transaction .
6541	Search the commands for an action and its object . If a match is found the position and id is returned . The search starts in reverse direction .
6542	Convinence function to generate a random name for each command that will be sent to the server .
6543	Create a graph using the current connection s settings and add it as a connection . You do not need to set the vertex and edge collections . They are automatically named for you .
6544	Delete a graph .
6545	Get information about a graph .
6546	Get all outbound edges to this vertex . The edges can be filtered by their labels and AQL .
6547	Returns the filter config
6548	Render the complete filter widget
6549	Render all filter widgets
6550	Opens the HTML container
6551	Closes the HTML container
6552	Opens the listfilter form
6553	Closes the listfilter form
6554	Determines if any ListFilter parameters are set
6555	Outputs the search button
6556	Outputs the filter reset link
6557	Renders a back - to - list button using the ListFilter - relevant named params
6558	Get persistent storage key for ListFilter form handling
6559	checks URL for any Filter Parameter
6560	Splits the search term in value to multiple terms and constructs a OR - style conditions array for each term for each field to be searched .
6561	Make sure options arrays are flattened and consolidated before they are used for value checking . This applies to optgroup - style arrays currently
6562	Formats and enriches field configs
6563	Converts POST filter data in array format to a URL
6564	Adds ListFilter - relevant named params to the given url . Used for detail links
6565	Set fields given as keys in FilterList and paginator conditions to given values if not set by URL .
6566	Build SQL query
6567	Reduce all elements to a single value using a callback .
6568	Validate that a value has a specific type .
6569	Cast a value to the specific type or throw an error .
6570	Registers services on the container .
6571	Make a new bugsnag client instance .
6572	Setup user detection .
6573	Setup the client paths .
6574	Add a stub which does nothing but can be replaced later .
6575	Get a pipeline builder where a stub is replaced .
6576	Create a new pipeline
6577	Use another iterator as keys and the current iterator as values .
6578	Get a limited subset of the elements using an offset .
6579	Sort all elements of an iterator .
6580	Set variables .
6581	Set a variable .
6582	Return output pathname .
6583	From the name of a script get a script descriptor if valid otherwise return None
6584	Is this an allowed script mixture?
6585	Convert string into array of Unicode code points as integers
6586	Do the actual work . All child classes will need to implement this
6587	Return an array of layouts directories .
6588	Add globals variables .
6589	Process each generators .
6590	Set a feed param
6591	Extract array params
6592	Runs a Git command on the repository .
6593	Sort array by date item .
6594	Removes an item by Id
6595	Replace an Item by an other
6596	Merge 2 feeds
6597	Auto slice the items to keep the good number of items
6598	Does the username pass Unicode legality and script - mixing checks?
6599	Insert a batch of spoof normalization records into the database .
6600	Write Feed Items
6601	Assign current pointer
6602	Fill the inner buffer
6603	Sort items by date .
6604	Import array config to current config .
6605	Set config data .
6606	Set source directory .
6607	Set destination directory .
6608	Layout file finder .
6609	Layout fall - back .
6610	Parse file content .
6611	Get section .
6612	Get permalink .
6613	Set config .
6614	Builds a new website .
6615	Return version .
6616	Filter by variable .
6617	Sort by date .
6618	Create an URL .
6619	Minify a CSS or a JS file .
6620	Compile style file to CSS .
6621	Calculate estimated time to read a text .
6622	Hash file with sha384 .
6623	Collects pages with menu entry .
6624	Renders a feed
6625	Loads a feed
6626	Start sniffing the content .
6627	test against particular type .
6628	Start Sniffing array .
6629	Run the tests on the input .
6630	Updates a schedule
6631	Renders the feed
6632	Create an Item node
6633	Extract the author email
6634	Extracts the Comments URI
6635	Check if the content has any XML syntax markers that would result in invalid XML if inserted into an XML document . If it does the content should either be wrapped in a CDATA section or have all of it s special XML characters converted into entities .
6636	Collects taxonomies from pages .
6637	Creates node pages .
6638	Compile all view files .
6639	Compile all views files in path .
6640	Compile single view file .
6641	Generates a DIFF .
6642	Parser for Github s DIFF format .
6643	Boot active extensions .
6644	Shutdown all extensions .
6645	Register all active extension to dispatcher .
6646	Create an event listener or execute it directly .
6647	Load available service providers .
6648	Write the manifest file .
6649	Register deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map configuration to allow orchestra to store it in database .
6653	Register domain awareness from configuration .
6654	Detect all extensions .
6655	Get an option for a given extension .
6656	Publish an extension .
6657	Register an extension .
6658	Get extension route handle .
6659	Activating an extension .
6660	Refresh extension configuration .
6661	Reset extension .
6662	Exclude GENERATOR_TYPE_IDENTITY && GENERATOR_TYPE_CUSTOM Because most of the time they are custom auto - incrementers
6663	Create an instance of the orchestra theme driver .
6664	Bootstrap plugin .
6665	Bootstrap configuration .
6666	Bootstrap the form .
6667	Bootstrap menu handler .
6668	Bootstrap sidebar placeholder .
6669	Bootstrap validation rules .
6670	Attach event listener .
6671	Start theme engine this should be called from application booted or whenever we need to overwrite current active theme per request .
6672	Set the theme this would also load the theme manifest .
6673	Boot and Load theme starter files .
6674	Resolving the theme .
6675	Get available theme paths .
6676	Get theme autoload files from manifest .
6677	Validate provided theme .
6678	Get all available theme by type .
6679	Render the macro .
6680	Converts a date string to a \ DateTime according to the date format given
6681	Verify safe mode status .
6682	Add a new path to finder .
6683	Detect available extensions .
6684	Get manifest contents .
6685	Generate a proper manifest configuration for the extension . This would allow other part of the application to use this configuration to migrate load service provider as well as preload some configuration .
6686	Get composer . lock data .
6687	Guess extension name from manifest .
6688	Guess extension path from manifest file .
6689	Resolve extension namespace name from manifest .
6690	Validate extension name .
6691	Register the service provider for view finder .
6692	Register the service provider for theme .
6693	Detect available themes .
6694	Set current theme for request .
6695	Boot theme resolver .
6696	Register the service provider for Extension .
6697	Register the service provider for Extension Config Manager .
6698	Register the service provider for Extension Finder .
6699	Register the service provider for Extension Safe Mode Checker .
6700	Execute extension processing .
6701	Get the scheme for a raw URL .
6702	Build route .
6703	Get route domain .
6704	Get route group .
6705	Determine if the current request URI matches a pattern .
6706	Get route prefix .
6707	Get route root .
6708	Get base url .
6709	Resolve base url from given path .
6710	Safely parses the input string .
6711	Validate if there is duplicated keys in the input yml string
6712	Activating the extension .
6713	Deactivating the extension .
6714	Register extension service providers .
6715	Register extension plugin .
6716	Boot all extensions .
6717	Start the extension .
6718	Fire events .
6719	Get list of available paths for the extension .
6720	Load autoloader file .
6721	Process any deprecated tags that this function comment has .
6722	ErrorCatcher constructor .
6723	Generate a full error log consisting of a
6724	A simplified back trace for quickly identifying route . reverse array to make steps line up chronologically
6725	Add an alert to the array . If the view is not executed CarbonPHP will not handle the global alert .
6726	If a callable function is passes the interpreter will attempt to fork using the pncl library and then execute the desired closure . If no arguments are passed than the current execution environment will become Demonized . All masks will be set to 0 and the new working environment will be the root dir . This can be exceptionally dangerous and should only be used if your absolutely sure you know whats going on .
6727	This will safely execute a passed closure if the pncl library in not found in the environment . This should only be used when the callable function does not access or modify the database or session . Carbon uses this when realtime communication using named pipe is requested . It only speeds up execution however it is not required and will never throw an error .
6728	Generate a url slug segment
6729	Check for collisions iff we need to update the slug and upate the model with the confirmedsafe value before writing
6730	Headers can only be sent and set if output has not already started . If we attempt to set a header after output has started store it and send on the next request .
6731	Cookies are a pain to set up as they also rely on headers not being sent . This method makes setting cookies easy with three params .
6732	Clear all active cookies in the current session
6733	Request is a blanket method for other data validation procedures .
6734	storeFiles attempts to store files currently in the storage set
6735	Removes passed arguments from the set
6736	Preforms a regex expression using preg_match on each member of the set
6737	Removes HTML chars from a given set
6738	Returns found integers between the given min and max if set . If no max or min is set just validate integers .
6739	Triggered early in the request when a flush is requested Deletes the less . php cache folder and regenerates
6740	Process any less files and return new filenames
6741	Open the SSH connection
6742	Execute a SSH command
6743	returns 127 . 0 . 0 . 1 if you are using a local development server otherwise returns false .
6744	This function uses common keys for obtaining the users real IP . We use this for verbo se operating systems support .
6745	This will open a named pipe on our server . This is used for sending information between two active processes on the server . Generally each user can send data real time to each other using this method . Keep in mind that the fifo file must be unique to the users listening on it .
6746	Registers a deployer
6747	Returns a deployer
6748	Adds a server to the list
6749	Adds a list of servers
6750	Returns a server
6751	Deploys to the server using the deployer
6752	Returns the array of options
6753	Processes the opening section of a class declaration .
6754	Returns Modified Ajax Action Slug
6755	Triggers A Callback to a ajax request
6756	Triggers A AjaxCallback
6757	Handles Multiple Ajax Requests .
6758	Checks for the given key in the given method and returns it .
6759	godaddy has me on a 64 bit computer
6760	Variables given will be cached between requests . Variables should be provided as string names referencing the global scope .
6761	Clear any variables given to the start method . This does not stop caching just removes all data from current variables and cache .
6762	Tests if an input is valid PHP serialized string .
6763	Process a request for a slugged item .
6764	Attempt to bind a closure to the working scope . This would mean the calling class not the class which uses the Singelton trait
6765	This handles our users state . If the user goes form logged - in to logged - out the outer html - wrapper will be sent .
6766	This will remove our session data from our scope and the database
6767	This function was created to make sure all socket request come from an existing user who has a session stored in our database . If database session storage is turned off this method will fail and exit .
6768	This is required for the session save handler interface . Do no change .
6769	This is our garbage collector . If a session is expired attempt to remove it . This function is executed via a probability . See link for more details .
6770	Check if route matches with rule depending on regular expression which defines them .
6771	Get list fields
6772	Tells if the the given page is this page .
6773	Loads the ClassMetadata for the given class
6774	Create property condition for the translated checkbox .
6775	Get the list of plugins installed and init them .
6776	Return the list of all plugin available installed and not installed .
6777	Prepare Twig to be use into views
6778	Set the default language for this user .
6779	Check if token is valid if not throws and error .
6780	Get the view render as string .
6781	Add a global JS variable to the view
6782	Add Script into the cue of Script vars .
6783	Add Style into the cue of style vars .
6784	Get the content of the view with the template vars replace it .
6785	Get the view content but included into a template .
6786	Get all the scripts included the default scripts defined in the config file .
6787	Get all the styles . file .
6788	Return or Echo the install folder .
6789	Main Function used to check if the request have autorization to access into the controller and action required .
6790	Return a normal access array .
6791	Get the list of roles chain . For example if admin have user as parent role it returns the admin and user role .
6792	Return the user language properties .
6793	Translates the given choice message by choosing a translation according to a number .
6794	Returns the list of translations .
6795	Get the translation array .
6796	Get the translation .
6797	Calculate the basic translation .
6798	Generate the toggle command information .
6799	Build a attribute toggle operation for all languages of the MetaModel .
6800	Create the property conditions .
6801	Is the function to start the Framework . Is usually call in index .
6802	This method will create the view the core and controller and execute the action .
6803	Execute the Access Control List throws and ControllerException if is not allowed .
6804	Execute the Authentication system throws and ControllerException if the session is not longer valid .
6805	Resolve the route .
6806	Set the libraries from the config and set the structure from the config file .
6807	Return the instance of the library class .
6808	Creates the Concret controller with the constructor parameters and
6809	Call a class and a method trying to pass the method recive in the request . If the request doesn t have the parameters it is set to false .
6810	This function returns the arguments of the method in class send it in the parameters .
6811	Return the role and user attributes from the given token .
6812	Return user information given id user .
6813	Method collects list of options that will be rendered inside the select tag .
6814	Set a bulk of input parameters from and array .
6815	Get the input var .
6816	Function to filter the input var . Is it define as public to replicate the logic for every var that you want .
6817	Open connection if is not already open .
6818	Close connection if is still open .
6819	Execute SQL and return the object .
6820	Do a select query to Database and return the result in a array type .
6821	Do a insert query to Database and return the id of the row inserted .
6822	Do a delete query to Database and return the number of deleted rows .
6823	Do a update query to Database and return the number of updated rows
6824	Function to declare a user as a guess .
6825	Set the user id .
6826	Set the username .
6827	Set the role id
6828	Set the role name
6829	Indicates whether the constraint is valid
6830	Return all the plugin installed classes found in the concrete path .
6831	Given a path it give the directories .
6832	Given the plugin directory it search based on plugin structure if exists a pluginFactoryClass to call to get ready the plugin .
6833	Open the given path file and search for a plugin implementation . It returns the class name in a positive case .
6834	Get the string representation of the anonymous function .
6835	Execute the process .
6836	Check the operating system call appropriate execution method .
6837	Execute the shell process for the Windows platform .
6838	Set a custom path to the autoload . php file .
6839	Returns true if the process ID is still active .
6840	Kill the current operation process if it is running .
6841	Reset everything to cleanup .
6842	Create Uri object with string
6843	Checks if the drivers in the array parameter could be used . Returns first found one
6844	Returns an array . Element 0 - image resource . Element 1 - width . Element 2 - height . Returns FALSE on failure .
6845	Returns calculated proportional width from the given height
6846	Returns calculated proportional height from the given width
6847	Binary formatter static proxy
6848	Metric formatter static proxy
6849	Creates the session driver with provided options
6850	Initializes a new session driver
6851	Parses the URL encoded body .
6852	Generates an URL from current request data
6853	Retrieve an request server parameter stored with provided name
6854	Removed some commands from default input definition .
6855	Register Bluzman commands
6856	Get Model path
6857	Add Force Option
6858	Add Model Argument
6859	Validate Model Argument
6860	Add Table Argument
6861	Validate Table Argument
6862	Get Table instance
6863	Small wrapper for simplify code
6864	Handle the request and return a response .
6865	Returns whether or not the stream is seekable .
6866	Creates the parser based on the parsers map with provided stream
6867	Adds a body parser to parsers map
6868	Add Module Argument
6869	Add Controller Argument
6870	Create a new request .
6871	Create a new server request .
6872	Create a new stream from a string .
6873	Create a stream from an existing file .
6874	Create a new uploaded file .
6875	Create a new URI .
6876	Format input into a human - friendly string for display
6877	Format a float value with given suffix
6878	Normalize bytes value
6879	Normalize precision value
6880	Return an instance with the provided HTTP method .
6881	Sets the request URI
6882	Get the target from the uri
6883	Pushes a middleware to the stack
6884	Get the Reason Phrase for provide code
6885	Retrieve the chat message .
6886	Retrieve User information .
6887	Get the extension from filename
6888	Normalize given filename . Accented characters becomes non - accented and removes any other special characters . Usable for non - unicode filesystems
6889	Returns the remaining contents in a string
6890	Set the right path for wp - login and wp - admin .
6891	Add subfolder path to wp - includes path .
6892	Set the right links in Adminbar .
6893	Fix double backslashes in app folder .
6894	Init all filter .
6895	Set wordpress folder name .
6896	Resolve full filesystem path of given URL . Returns FALSE if the URL cannot be resolved
6897	Encode URL Path
6898	Decode URL Path
6899	Get the content of the given directory . Returns an array with filenames or FALSE on failure
6900	Database profiling log .
6901	write normal logs .
6902	write memory usage logs .
6903	Write time load logs .
6904	Write other sections logs .
6905	Flips the file s array keys .
6906	Set stream of uploaded file .
6907	Retrieve the hash value using the contents of file .
6908	Retrieve the media type of file .
6909	Retrieve query string arguments .
6910	Is AJAX request ?
6911	Method to convert a siren JSON string into a Siren document object
6912	Helper method to convert an entities data array to an array of entity objects
6913	Helper method to convert an action data array to an array of action objects
6914	Helper method to convert a fields data array to an array of field objects
6915	Helper method to convert a link data array to an array of link objects
6916	Send out an HTTP requests returning a promise
6917	Call the HTTP server returning the response
6918	Prepares the cURL handler options
6919	Sets the URL for cURL to use
6920	Sets the headers from the request
6921	Creates a response from cURL execution result
6922	Splits the cURL execution result into header and body
6923	Parses the HTTP message headers from header part
6924	Count total log type in the Logs section .
6925	display the profiler data results .
6926	gather included files and its size .
6927	gather input get
6928	gather input post
6929	gather input session
6930	get microtime .
6931	Summary start and end of match key in a section .
6932	Creates the uploaded file objects within a normalized files tree
6933	Helper function to recursively create UploadedFile objects
6934	Move the innermost key to the outer spot
6935	Recursively merge provided arrays
6936	Process an incoming server request and return a response optionally delegating response creation to a handler .
6937	Show the form for adding .
6938	Show the model form for editing .
6939	Edit a model .
6940	Where to go after a successful edit?
6941	AJAX for reordering objects .
6942	Delete a model by ID .
6943	Retrieve normalized file upload data .
6944	Create a new instance with the specified uploaded files .
6945	Check if provided files array is valid
6946	Loads the headers form request
6947	Return an instance with the specified derived request attribute .
6948	Return an instance that removes the specified derived request attribute .
6949	Check if given modification time is newer than client - side one . If not the method will tell the client to get the content from its own cache . Afterwards the script process will be terminated . This feature requires the PHP to be configured as Apache module .
6950	Retrieves a message header value by the given case - insensitive name .
6951	Sets the response status code
6952	Process an incoming server request and return a response optionally delegating response creation to an handler .
6953	Get the MySQL version of the server .
6954	Performs an authentication
6955	return all users
6956	Return all deactivated users
6957	Inserts new user
6958	Returns a prepared metric options string .
6959	Sets the locale on the settings page based upon to the locale of the post
6960	Check if string is encrypted Container
6961	Check if string is encrypted String
6962	Dump the definition .
6963	Export an array .
6964	Pre global process of the extension .
6965	Post global process of the extension .
6966	Create parse exceptiion for missing token
6967	Return constructed instance of Container Type
6968	Undo soft delete
6969	New class extensions process .
6970	New config classes process .
6971	Process the config class .
6972	Process the class .
6973	Set the definitions .
6974	Returns a definition by name .
6975	Remove a definition
6976	Set the config classes .
6977	Generate the containers .
6978	Dump containers .
6979	Abstract Type methods
6980	Set RPC server address .
6981	Execute one RPC method without response .
6982	Execute one RPC method .
6983	Create response from exception and request .
6984	Parser http response .
6985	Make a request and wait response in blocking mode . After response start subscription .
6986	Wait subscription message before doing action
6987	After action done worker - subscriber stop subscription and by push socket send action s info
6988	Formats layout template file names .
6989	Write json representation of type value to file You can specify second argument to call json_encode with params
6990	Convert value to dashed case
6991	Returns a new SliceableStringy instance given start stop and step arguments for the desired slice . Start which indicates the starting index of the slice defaults to the first character in the string if step is positive and the last character if negative . Stop which indicates the exclusive boundary of the range defaults to the length of the string if step is positive and before the first character if negative . Step allows the user to include only every nth character in the result with its sign determining the direction in which indices are sampled . Throws an exception if step is equal to 0 .
6992	Returns an array of indices to be included in the slice .
6993	Returns a prepared option string .
6994	Validates the values array and throw an exception if it contains invalid elements .
6995	Creates an option and return it .
6996	Coordinating work with ReplyStack as sub - process
6997	Getter for value . Supports dot notation . Can retrieve value from objects arrays Containers instances of ArrayableContract and ObjectContract .
6998	Appends new matchers
6999	Compares two images and create a diff gif images and a compare image .
7000	Compares two images . If they not looking equal a gif image of both the expected and result image will be created .
7001	Creates a comparison image when the images looking equal .
7002	Compares two images . Returns true if they looking equal and false otherwise .
7003	Add HTTP POST route
7004	Adds a new URL routing rule to the routing table after converting any of our special tokens into proper regular expressions .
7005	Returns a Route object if matching URL is found
7006	Runs the router matching engine and then calls the matching route s callback . otherwise execute the not found handler
7007	Redirects to another URL
7008	Parses parameters from URI as per the given route s pattern
7009	Gets a date from a file
7010	it s not only handleGallerySaveImage now . We use it for save texy images too
7011	Get http request
7012	Post http request
7013	Set auth header
7014	Returns Sonic configuration option
7015	Validates a configuration array
7016	Returns an excerpt of a string by breaking at new lines
7017	Convert errors into ErrorException objects
7018	Adds a . to each extension given
7019	Check for widget id presence
7020	Set cxenseUserId from Cookie . Might not work on WILLOW FRONTEND
7021	Return An array with total documents and matches
7022	Return String with appended delimiter and content .
7023	Return String with prepended content and delimiter .
7024	Return true if String matches the supplied pattern false otherwise .
7025	Limit the number of words in a String .
7026	Generates random Unique User Identifier
7027	Join arrayable elements with a String
7028	Convert all applicable characters to HTML entities .
7029	Get part of String
7030	Limit the number of characters in a String .
7031	Truncates the string to a given length while ensuring that it does not split words . If word will be in the middle of limit minus one word will be returned .
7032	Parse GET data .
7033	Encrypt and sign a String into a JWT token .
7034	Construct from proper encrypted String with JWT .
7035	Convert String Type to Container Type . If String is proper json serialized or file path with json or serialized than it will grab contents decode it and construct Container from it .
7036	Generate a parser from a grammar definition
7037	Set settings object
7038	Get documents from search result
7039	Set page limit to the search array
7040	Set page number for calculating the correct starting offset
7041	Retrieve number from any type or return default .
7042	Retrieve value that can be used in search methods .
7043	Construct proper Bool from string using grammar .
7044	Return grammar to construct Bool from string .
7045	Executes the command to create a gif image of the passed source images ...
7046	Returns the command to create a gif image of the passed source images .
7047	lookup next n tokens
7048	Format a number with grouped thousands and return String .
7049	Returns if a property exists by name .
7050	Returns a property by name .
7051	Remove property by name .
7052	Returns if exists a method by name .
7053	Return a method by name .
7054	Remove a method by name .
7055	Parses Markdown file headers for metadata
7056	Runs all hooks registered to the specified hook name
7057	Loads all plugins from the plugins directory
7058	Does the initial setup for the router . This entails creating the routes for the application mainly
7059	Getter . Supports dot notation .
7060	Setter . Supports dot notation .
7061	Push value to specified key
7062	Search for specified value return key on success otherwise false . If value is nested deeper than 1 level dot notation key will be returned . You can specify strict search with 2 argument .
7063	Key an associative array by a field .
7064	Unique Container items .
7065	Return items only with numeric keys .
7066	Return joined Container items .
7067	Concatenate values of a given key as a string .
7068	Get new Container with the values of a given key . 1 Argument is key to make value from . 2 Argument is key from the same Arrayable which will be the key .
7069	Return split Container items into chunks wrapped with new Container .
7070	Return filtered Container . You can specify recursive filter with the second argument .
7071	Apply a user function to every Container item . You can specify recursive walk with the second argument .
7072	Merge Arrayable with Container .
7073	Merge Arrayable with specified key in Container .
7074	Increase Container to the specified length with a value .
7075	Return pseudo - random index from Container .
7076	Return pseudo - random item from Container .
7077	Cut a slice of a Container . You can return result or assign to Container with the forth argument .
7078	Create new Container of all elements that do not pass a given truth test .
7079	Remove key from Container . Supports dot notation .
7080	Reverse Container items .
7081	Group an associative array by a field or callback value .
7082	Return copy of Container except given index .
7083	Return rest items after given index .
7084	Return rest items after given key .
7085	Calculate difference of Container and given Arrayable .
7086	Take all items recursively by key .
7087	Get a value from a Container and remove it .
7088	Return intersection with Arrayable . You can specify second argument to with additional index check .
7089	Find all items by key or key value pairs . You can specify second parameter to preserve keys reset .
7090	Construct from Json .
7091	Construct from file . Contents can be json or serialized array .
7092	Construct from serialized .
7093	Construct from Encrypted Container .
7094	Construct from string .
7095	Find where condition is array .
7096	Recursively traversing tree .
7097	Convert iterator to array .
7098	Get the group by key value .
7099	Recursive filter .
7100	Recursive unset .
7101	Unique items recursively .
7102	Retrieve proper key .
7103	Simple implementation add or edit object
7104	Returns a prepared compose options string .
7105	Gets file excerpts from all files
7106	Fetch a flattened array of a nested array element .
7107	Remove one or many array items from a given array using dot notation .
7108	Get an item using dot notation .
7109	Check if an item exists using dot notation .
7110	Set item to a given key using dot notation .
7111	Search value in Traversable and return key using dot notation .
7112	Renders a library .
7113	Deny public access .
7114	New access token entity .
7115	Sets the autocomplete input ID .
7116	Sets the autocomplete bound .
7117	Adds a type to the autocomplete .
7118	Removes a type from the autocomplete .
7119	Gets a specific component restriction .
7120	Sets the component restrictions .
7121	Adds a component restriction .
7122	Removes a component restriction .
7123	Sets the autocomplete input attributes .
7124	Sets an autocomplete attribute .
7125	Identipattern generator .
7126	Convert image format .
7127	Compress image .
7128	Compress SVG image .
7129	Compress PNG image .
7130	Decode image data URL .
7131	One pixel image .
7132	Extension to format .
7133	Format to extension .
7134	Extension to MIME type .
7135	Format to compression type .
7136	Format to compression quality .
7137	Set format extension .
7138	Change format extension .
7139	Parse format args .
7140	Sends a service request .
7141	clean input data
7142	Max allowed file upload size .
7143	Renders a circle .
7144	Is it a valid version?
7145	Is it a valid dev version?
7146	Is it a valid stable version?
7147	CSRF generator .
7148	CSRF input markup .
7149	CSRF verifier .
7150	Create from globals .
7151	Get all data .
7152	Get form data .
7153	Get parsed JSON body .
7154	Normalize ampersands .
7155	Renders a map map type ID .
7156	First from full name .
7157	Last from full name .
7158	Convert name to acronym .
7159	Convert name to var .
7160	Is a string in HTML format?
7161	UUID64 validator .
7162	Shard ID from UUID64 .
7163	Validate shard ID .
7164	Type ID from UUID64 .
7165	Validate type ID .
7166	Local ID from UUID64 .
7167	Validate local ID .
7168	UUID64 parser .
7169	UUID64 builder .
7170	Renders a polyline .
7171	Sets the circle center .
7172	Sets the latitude
7173	Sets the longitude .
7174	Sets if the coordinate is wrap .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Gets the available geocoder status .
7178	Get a cached value .
7179	Key sub - path .
7180	SHA - 1 cache keys .
7181	Get a class instance .
7182	Search values containing regex patterns against a string .
7183	Gets template .
7184	Password strength .
7185	Checks for SRI in process .
7186	Checks for SRI in memcache .
7187	Checks for SRI in map .
7188	Checks for SRI in map cache .
7189	Check contents .
7190	Cache the SRI hash .
7191	Memcache the SRI hash .
7192	Get the SRIs map .
7193	Get SRIs map cache .
7194	URL is local?
7195	Validate var .
7196	Convert var to acronym .
7197	Convert var to slug .
7198	Convert var to camelCase .
7199	Renders a size .
7200	Is role - based address?
7201	Parse addresses .
7202	Parse headers .
7203	Parse attachments .
7204	Parse a content - type header to a representation name
7205	convert a representation name including version to the corresponding class
7206	Calculates percentage difference .
7207	Base64 URL - safe encoding .
7208	Base64 URL - safe decoding .
7209	Nonce generator .
7210	Nonce input markup .
7211	Nonce verifier .
7212	Sets the distance matrix routes .
7213	Human time difference .
7214	Returns a traversable set of cache items .
7215	Renders a marker .
7216	Build json for Bulutfonxm
7217	Renders a marker shape .
7218	Renders a scale control style .
7219	Validate slug .
7220	Is slug reserved?
7221	Convert slug to name .
7222	Convert slug to var .
7223	Sets the polyline coordinates .
7224	Store modules for fast load .
7225	Get all modules .
7226	Parse template .
7227	Set template vars .
7228	Has a parent?
7229	Parent template vars .
7230	Get a child template .
7231	Get the console command options .
7232	Renders a rotate control .
7233	Escape HTML markup deeply .
7234	Unescape HTML markup deeply .
7235	Execute an action on the controller .
7236	Renders a kml layer .
7237	Get cache value by key .
7238	Set|update cache key .
7239	Clear the cache .
7240	Namespace a key .
7241	Namespace primary key .
7242	Servers differ? i . e . current vs . active .
7243	Maybe add server connections .
7244	Renders the autocomplete HTML container .
7245	Renders the autocomplete javascripts .
7246	Renders the autocomplete .
7247	Register the seed console command .
7248	Closes a request early .
7249	Disables GZIP compression .
7250	Sets the directions waypoint location .
7251	Sets the directions waypoint stopover flag .
7252	Error reason .
7253	Set file extension .
7254	Change file extension .
7255	Checks if the option exists .
7256	Gets a specific option .
7257	Sets a specific option .
7258	Removes an option .
7259	Modify the request and add information from the matched route to it .
7260	Sets the zoom control style .
7261	Decodes a hash ID .
7262	Sets the geocoder results
7263	Sets the geocoder results status .
7264	Is valid UTF - 8?
7265	Is a browser engine .
7266	Normalizes directory separators deeply .
7267	Get page URL .
7268	Sets if the the distance matrix request avoids hightways .
7269	Sets if the the distance matrix request avoids tolls .
7270	Sets the request destinations .
7271	Adds a destination to the request .
7272	Adds an origin to the request .
7273	Sets the distance matrix request region .
7274	Sets the distance matrix request language .
7275	Sets the distance matrix request travel mode .
7276	Sets the distance matrix request unit system .
7277	Gets the available control positions .
7278	Sets the directions response status .
7279	Renders an overview map control .
7280	Renders the bound .
7281	Renders the bound s extend of a marker .
7282	Print statistics .
7283	Sets the cluster markers .
7284	Sets the marker cluster helper helpers .
7285	Gets a specific marker cluster helper .
7286	Sets the map extension helpers .
7287	Gets a specific extension helper .
7288	Removes an extension helper .
7289	Renders the map container .
7290	Renders the html map stylesheets .
7291	Renders the map javascripts .
7292	Renders the javascript libraries .
7293	Renders JS code just before the generated one .
7294	Renders JS code just after the generated one .
7295	Renders the javascript container .
7296	Renders the javascript container coordinates .
7297	Renders the javascript container bounds .
7298	Renders the javascript container points .
7299	Renders the javascript container sizes .
7300	Renders the javascript container map .
7301	Renders the javascript container circles .
7302	Renders the javascript container encoded polylines .
7303	Renders the javascript container ground overlays .
7304	Renders the javascript container polygons .
7305	Renders the javascript container polylines .
7306	Renders the javascript container rectangles .
7307	Renders the javascript container info windows .
7308	Renders the javascript container maker images .
7309	Renders the javascript container marker shapes .
7310	Renders the javascript container marker cluster .
7311	Renders the javascript container KML layer .
7312	Renders the javascript container event manager .
7313	Renders the js container extra .
7314	Renders the map .
7315	Renders the map center .
7316	Renders the map bound .
7317	Computes the coordinates of a map .
7318	Computes the bounds of a map .
7319	Computes the points of a map .
7320	Computes the sizes of a map .
7321	Computes the marker images of a map .
7322	Computes the marker shapes of a map .
7323	Computes the marker info windows of a map .
7324	Renders the map controls in the json builder .
7325	Renders a map control in the json builder .
7326	UUID v1 generator .
7327	UUID v3 generator .
7328	UUID v4 generator .
7329	UUID v4 generator x 2 .
7330	Get module by name .
7331	Run function for each module .
7332	Filter modules .
7333	Add module to repository .
7334	Sets the geocoder request address .
7335	Sets the geocoder request coordinate
7336	Sets the geocoder request bound .
7337	Sets the geocoder request region .
7338	Sets the geocoder request language .
7339	Loads route file .
7340	Gets route .
7341	YAML parser .
7342	Set no - cache flags .
7343	Sorts by key .
7344	Current request method .
7345	Current scheme ; lowercase .
7346	Current host name ; lowercase .
7347	Current root host name ; lowercase .
7348	Is an SSL scheme?
7349	Current URL is on a localhost?
7350	Sets the geometry location type .
7351	Matches zero or more escapable chars and anything that s not vertical whitespace .
7352	Gets the available directions status .
7353	Current overload data .
7354	Overload property data .
7355	Writable overload property data .
7356	Setup overloads .
7357	Open a URL from the command line .
7358	Sets the anchor of the marker image
7359	Sets the origin of the marker image
7360	Sets the scaled size of the marker image
7361	Sets the size of the marker image .
7362	Renders an info window .
7363	Renders the info window open flag .
7364	Configures the json builder in order to render an info window .
7365	Register module providers .
7366	Get module asset .
7367	Load modules routes .
7368	Is function callable?
7369	Renders a ground overlay .
7370	Emit the response .
7371	Set a cache sub - key .
7372	Get a cache sub - key .
7373	Unset a cache sub - key .
7374	Unset a cache sub - key pattern .
7375	Add a new cache ref - key .
7376	Unset a cache ref - key .
7377	Unset a cache ref - key pattern .
7378	Renders a map type control .
7379	Escape single - quote .
7380	Single - quote encapsulation .
7381	Double - quote encapsulation .
7382	Renders a map type control style .
7383	Sign an url for business purpose .
7384	Get search highlighter .
7385	SHA - 1 modulus shard ID .
7386	Assign shard ID .
7387	Sets the step travel mode .
7388	Sets the prefix of the javascript variable .
7389	Select menu options .
7390	Dropdown menu items .
7391	Renders the street view control
7392	Normalizes end of line chars deeply .
7393	Match a regex pattern against other values .
7394	Normalizes HTML whitespace deeply .
7395	Bracket special chars .
7396	URL to WRegx URI pattern .
7397	Sets the width unit size .
7398	Sets the height unit size .
7399	Defuse keygen .
7400	Is a SHA - 256 hash?
7401	Stripe query string .
7402	Array from query vars .
7403	Build a URL - encoded query string .
7404	Adds a signature .
7405	Removes a signature .
7406	Checks a signature .
7407	Sets the marker shape coordinates .
7408	Adds a coordinate to the marker shape if the type is poly .
7409	Get update or create customer .
7410	Update existing customer .
7411	Smallest currency unit .
7412	Get scope entity .
7413	Renders a scale control .
7414	Generates geocoding URL according to the request .
7415	Builds the geocoder results accordint to a normalized geocoding results .
7416	Builds a geocoder result according to a normalized geocoding result .
7417	Builds the gecoder address components according to a normalized geocoding address components .
7418	Builds a geocoder address component according to a normalized geocoding address component .
7419	Builds a geocoder geometry according to a normalized geocoding geometry .
7420	Processes the given request .
7421	Generates distance matrix URL API according to the request .
7422	Parses & normalizes the distance matrix API result response .
7423	Builds the distance matrix response according to the normalized distance matrix API results .
7424	Builds the distance matrix response rows according to the normalized distance matrix API results .
7425	Builds a distance matrix response row according to the normalized distance matrix API response row .
7426	Builds a distance matrix response element according to the normalized distance matrix API response elements .
7427	Renders a point .
7428	Get collection of string representations of each parameter
7429	Get a collection of Parameter objects from a collection of string representations of the same
7430	Current request headers .
7431	Send yes - cache headers .
7432	Send no - cache headers .
7433	Get slug for status code .
7434	Get message for status code .
7435	Status header .
7436	Parses headers .
7437	Strips PHP tags .
7438	Register migrations .
7439	Register translations .
7440	Sets the pixel offset .
7441	Sets the info window open event .
7442	Renders a pan control .
7443	Gets the available mouse events .
7444	Sets the map type IDs .
7445	Add a map type ID .
7446	Sets the map type control style .
7447	Sets an unencrypted cookie .
7448	Gets an unencrypted cookie value .
7449	Renders a dom event .
7450	Renders a dom event once .
7451	Renders an event .
7452	Renders an event once .
7453	Renders an animation .
7454	Renders a zoom control .
7455	Max execution time .
7456	Check a slug for bad words .
7457	Gets the address components .
7458	Sets address components .
7459	Sets the geocoder result partial match flag .
7460	Get a user gravatar .
7461	Sets the map center .
7462	Checks if the map option exists .
7463	Sets the map options .
7464	Gets a specific map option .
7465	Sets a specific map option
7466	Removes a map option .
7467	Checks if the stylesheet option exists .
7468	Sets the stylesheet options .
7469	Gets a specific stylesheet option .
7470	Sets a specific stylesheet option .
7471	Removes a stylesheet option .
7472	Sets the map type control .
7473	Sets the overview map control .
7474	Sets the map pan control .
7475	Sets the map rotate control .
7476	Sets the map scale control .
7477	Sets the map street view control .
7478	Sets the map zoom control .
7479	Add a map marker .
7480	Add a map info window .
7481	Add a map polyline .
7482	Adds an encoded polyline to the map .
7483	Add a map polygon .
7484	Add a map rectangle to the map .
7485	Add a circle to the map .
7486	Add a ground overlay to the map .
7487	Stores a value into the cache .
7488	Removes the current key from the cache .
7489	Sets if the the directions request avoids hightways .
7490	Sets if the the directions request avoids tolls .
7491	Sets the directions request destination .
7492	Sets if the directions request optimizes waypoints .
7493	Sets the directions request origin .
7494	Sets if the directions request provides route alternatives .
7495	Sets the directions request region .
7496	Sets the directions request language .
7497	Sets the directions request travel mode .
7498	Sets the directions request unit system .
7499	Sets the directions request waypoints .
7500	Adds a waypoint to the directions request .
7501	Checks if the directions request is valid .
7502	POST JSON data .
7503	Log issue & generate exception .
7504	Log for review .
7505	Write lines to log file .
7506	Cleans log event name .
7507	Maybe rotate log files .
7508	Remote HTTP communication .
7509	Parse a markdown document with metadata .
7510	Build a Document from the parsed data .
7511	Parse a dection of the document .
7512	Parse metadata into an array .
7513	Parse route .
7514	Get a template .
7515	Get remote connection .
7516	Get remote hash .
7517	Convert to ASCII .
7518	Gets the available distance matrix status .
7519	Strip leading indents .
7520	Sets the leg steps .
7521	Routes the given request .
7522	Builds the directions response according to the normalized directions API results .
7523	Builds the directions routes according to the normalized directions API routes .
7524	Builds the directions route according to the normalized directions API route .
7525	Builds the directions legs according to the normalized directions API legs .
7526	Buildd the directions leg according to the normalized directions API leg .
7527	Builds the directions steps according to the normalized directions API steps .
7528	Builds the directions step according to the normalized directions API step .
7529	Lighten the color .
7530	Darken the color .
7531	Saturate the color .
7532	Desaturate the color .
7533	Get the mix between this and the given color .
7534	Start session .
7535	Is it a valid WS version?
7536	Is it a valid WS dev version?
7537	Is it a valid WS stable version?
7538	WS version to date .
7539	WS version to time .
7540	With no - cache headers .
7541	Success response .
7542	Error response .
7543	Output response .
7544	Sets the route legs
7545	Sets the route warnings .
7546	Sets the routes waypoint order .
7547	Renders a zoom control style .
7548	Get metadata from the document .
7549	Issue token .
7550	Filter resource request .
7551	Access token repository .
7552	Add slashes deeply .
7553	Remove slashes deeply .
7554	Renders the API .
7555	Sets the distance matrix row elements .
7556	Renders a control position .
7557	Current visitor s IP address .
7558	Region code for IP address .
7559	Country code for IP address .
7560	An AJAX request?
7561	An API request?
7562	Doing a REsT action?
7563	Doing an action?
7564	subscribe new user to a given listid
7565	get a user from a given listid with a given email
7566	update status user to a given listid to a given email
7567	delete a user to a given listid to a given email
7568	SHA - 1 color generation .
7569	Adjust luminosity .
7570	Cleans a hex color .
7571	Empty numeric config arrays .
7572	Create request .
7573	Create request body .
7574	Empty numeric arrays .
7575	Renders a rectangle .
7576	Array to HTML markup .
7577	Array to XML handler .
7578	Renders a marker with the js map container .
7579	License key .
7580	Gets the libraries needed for the map .
7581	Escapes order direction .
7582	Serialize closure .
7583	Unserialize closure .
7584	Maybe serialize value .
7585	Maybe unserialize value .
7586	Get Embedly markup .
7587	Get Embedly cache .
7588	Via WordPress .
7589	Renders an encoded polyline .
7590	Sets the south west coordinate .
7591	Sets the north east coordinate .
7592	Gets the center of the bound .
7593	Bytes represented by notation .
7594	Determines remote file size .
7595	Unparses a URL .
7596	Renders a coordinate .
7597	Renders a marker image .
7598	Parses xml according to pluralization rules .
7599	Pluralizes xml .
7600	Gets the INVALID DISTANCE MATRIX REQUEST TRAVEL MODE exception .
7601	Host parser .
7602	Unparses a host .
7603	Sets the marker position .
7604	Sets the marker animation .
7605	Sets the marker icon .
7606	Sets the marker shadow .
7607	Sets the marker shape .
7608	Default header id = callback .
7609	First image URL .
7610	Strips HTML attributes deeply .
7611	Sets the rectangle bound .
7612	Get error slug .
7613	Get error messages .
7614	Get error data .
7615	Add error .
7616	Adds a coordinate to the polygon .
7617	Load an HTML document
7618	Minify the loaded HTML document
7619	indent HTML code
7620	Creates and injects the organization reference to an user entity .
7621	Creates a view model for success view script with set password form .
7622	Gets the referenced organization entity .
7623	Creates a view model for the error page view script .
7624	Add the asset using our version of the exlixer loader .
7625	Reverse the order of scripts .
7626	Add the asset first using our version of the exliser loader .
7627	Add new asset after another asset in its array .
7628	Add a meta attribute .
7629	Return meta .
7630	Load local files for a given controller .
7631	Load a file .
7632	Creates a query for filtering organizations
7633	Processes the invitation of an user by an organization owner .
7634	Validates an email address .
7635	Loads or creates an user .
7636	Loads the organization from the database and sets the reference type .
7637	Executes a proxy call to the associated organization entity .
7638	Gets a cursor for all hiring organizations .
7639	Find a organizations by an name
7640	Finds the main organization of an user .
7641	Finds the organization an user is employed by .
7642	creates a new Organization no matter if a organization with this name already exists also creates a new Name but link this Name to another OrganizationName - Link if this Name already exists
7643	Look for an drafted Document of a given user
7644	Set the elements for the contact form
7645	Returns true if a User is an employee of the organization
7646	Updates the organizationsPermissions to allow all employees to view this organization .
7647	Sets the name of an organization
7648	Sets the Permissions of an Organization
7649	Gets the Logo of an organization
7650	Sets the Contact Data of an organization
7651	Gets the list of employees
7652	Gets an employee by User or ID .
7653	Gets a list of Employees by a user role
7654	Sets creation options .
7655	Initializes the fieldset .
7656	Gets the organization form container .
7657	Returns image URI
7658	Store an image as a file in a file system
7659	Extract values from an object
7660	Converts a value for hydration . If no strategy exists the plain value is returned .
7661	Checks if the user may create jobs according to the organization permissions .
7662	Configure the Form width Options
7663	Validate the order number passed to the bank . it needs to pass the following test
7664	3DES Function provided by Redsys
7665	builds signature from the data sent by Redsys in the reply
7666	Validates notification sent by Redsys when it receives the payment
7667	Sing request sent to Gateway
7668	Overrides base class request method to automatically add authentication options to request .
7669	Fetches TicketArticle objects of this Ticket object .
7670	Executes a request .
7671	Executes POST request .
7672	Executes PUT request .
7673	Fetches TicketArticle objects for given ticket ID .
7674	Gets value of object .
7675	Fetches object data for given object ID .
7676	Fetches object data for all objects of this type . Pagination available .
7677	Creates a new object with the current data .
7678	Updates an existing object with the current data .
7679	Deletes the data of this object . If data contains an ID the object will also be deleted in Zammad .
7680	Returns the URL for the given method name including its replaced placeholders .
7681	Fetches tags of an object .
7682	Adds a tag to an object .
7683	Fetches tags for given search term . Pagination available .
7684	Removes a tag from an object .
7685	Tear down a shared memory segment created for the given file
7686	High level function to fetch the proxy type
7687	Return connection info for long polling .
7688	LongPoll loop .
7689	We wanna send our current VkJs to Vk execute .
7690	This method takes Closure as argument so every element from response will go into this Closure .
7691	This method will return one element if id is not specified or element of array otherwise .
7692	Return recursive wall instance .
7693	Querying API for a data .
7694	Used to validate rights .
7695	Set one param .
7696	Set many params .
7697	API Request will return RequestTransaction .
7698	todo Process response .
7699	Will return token if everything is OK .
7700	Method converts code to token .
7701	Hits To Items
7702	Search By Query
7703	Will convert object_something . cool . today . midday TO object_something . cool . today . midday . Will convert object . something . cool . today TO object . something . cool . today . Will convert object . something . cool TO object . something . cool . Will convert object . something TO object . something . Will convert object TO object .
7704	Will convert object . something . cool . today TO object_something . cool . today . Will convert object . something . cool TO object . something . cool . Will convert object . something TO object . something . Will convert object TO object .
7705	Will convert object . something . cool . today TO object_something_cool . today . Will convert object . something . cool TO object_something . cool . Will convert object . something TO object . something . Will convert object TO object .
7706	Convert the PHP date format to Bootstrap Datetimepicker date format
7707	Convert the Bootstrap Datetimepicker date format to PHP date format
7708	Add configuration Picker
7709	Bind the appropriate AlexaResponse type to the IoC container
7710	Register the middleware .
7711	Resumes from the previous position
7712	Get the alexa request
7713	Add the request middleware to the beginning of the middleware stack on the Lumen application instance .
7714	Validate a given rule against a route and request .
7715	Create a new Route object .
7716	Get a particular session value by key
7717	Update a slot
7718	Get the route validators for the instance .
7719	Compile the route into a Symfony CompiledRoute instance .
7720	Get the certificate from the certificate provider
7721	Build the valid Alexa response object
7722	Send through our custom router
7723	Gather the application middleware besides this one so that we can send our request through them exactly how the developer wanted .
7724	Persist the certificate contents to data store so it s retrievable using the certificate chain uri
7725	Retrieve the certificate give the certificate chain s uri from the datastore
7726	Calculate the path that the certificate should be stored
7727	Trims whitespace from the given words and assigns the array to the custom protected words property .
7728	Capitalizes the given string according to AP rules .
7729	Normalises the given string ready for capitalisation .
7730	Processes the given array of string parts .
7731	Processes the first words in any sentences within the given array of parts .
7732	Processes the last word - like item in the given array of parts .
7733	Processes the given word .
7734	Replaces all matches of the given regular expression pattern in the given string with the given replacement . If an error occurs returns the original string .
7735	Checks for the existence of and returns professional suffix
7736	Breaks name into individual words
7737	Checks word against list of common honorific prefixes
7738	Checks word against array of common lineage suffixes
7739	For internal use only .
7740	Helps chop your content down to a manageable size .
7741	Replaces emoticons and Emoji name codes in text with their actual Unicode Emoji characters .
7742	Returns the first word in the string or an empty string if the source string is empty .
7743	Returns whether a thingy is stringy .
7744	Returns the last word in the string or an empty string if the source string is empty .
7745	Lowercases any Roman numerals found in the string .
7746	Parses text through Markdown .
7747	Calculates the units of time required for an average person to read the given passage of text .
7748	c . f . PHP - Typography
7749	Gets the substring after the first occurrence of a separator . If no match is found returns an empty string .
7750	Gets the substring after the last occurrence of a separator . If no match is found returns an empty string .
7751	Gets the substring before the first occurrence of a separator . If no match is found returns an empty string .
7752	Gets the substring before the last occurrence of a separator . If no match is found returns an empty string .
7753	Returns a trimmed string with the first letter of each word capitalized .
7754	Returns a string with whitespace removed from the start and end of the string .
7755	Returns a string with whitespace removed from the start of the string .
7756	Returns a string with whitespace removed from the end of the string .
7757	Typogrify applies a full suite of typographic treatments to beautify your web typography .
7758	Uppercases any Roman numerals found in the string .
7759	Replaces the space between the last two words in a string with a &nbsp ; to prevent widowing .
7760	Get the value settings by name .
7761	Loads the icon information from the composer . json .
7762	Generates an array result for the object .
7763	Display the blog index page .
7764	Display a blog post page .
7765	Store the newly created tag in the database .
7766	Show the form for editing a tag .
7767	Update the tag in storage .
7768	Delete the tag .
7769	Display the tools page .
7770	Manually Flush the Application Cache .
7771	Create and download an archive of all existing data .
7772	Enable Application Maintenance Mode .
7773	Disable Application Maintenance Mode .
7774	Configuration files .
7775	Translation files .
7776	View files .
7777	Display the user profile page .
7778	Update the user profile information .
7779	Actions to be taken when user is successfully authenticated .
7780	Get the currently installed version of Canvas .
7781	Return the fields and values to create a new post from .
7782	Enables the extension .
7783	Disables an extension .
7784	Uninstalls an extension .
7785	Runs the database migrations for the extension .
7786	Loads all bootstrap . php files of the enabled extensions .
7787	Sanitise the input from the request . In this case the input is type casted where required .
7788	Display the application home page .
7789	Return the field values from the model .
7790	Return data for a tag index page .
7791	Return data for normal index page .
7792	Store a newly created Post .
7793	Update the Post .
7794	Publish a themes public assets . Themes MUST have public assets .
7795	Publish a themes views .
7796	Deactivate all themes . Set canvas to unthemed state .
7797	Generate a default theme .
7798	The id s of the enabled extensions .
7799	Get General Middleware .
7800	Get Safe Middleware .
7801	Get Admin Middleware .
7802	Get blog main path .
7803	Get blog prefix .
7804	Get admin prefix .
7805	Get auth prefix .
7806	Get password prefix .
7807	Display search result .
7808	Get the transaction data
7809	Scan a single file .
7810	Scan a file or directory recursively using multiple threads .
7811	Scan a file or directory recursively .
7812	A wrapper to cleanly read a response from clamd .
7813	Processes a single uploaded file - sanitize the name - validates the file - if valid moves the file to the container
7814	Validates a file according to the rules configured on the handler
7815	Sanitize the name of the uploaded file by stripping away bad characters and replacing invalid characters with underscore _
7816	Delete the file from the container
7817	Moves a temporary uploaded file to a destination in the container
7818	Returns the list of available themes names in an array .
7819	Generate an asset path for current theme .
7820	Return filemtime of given asset or null if asset doesn t exists
7821	Get root writable path .
7822	Make directory .
7823	Make file .
7824	Get assets writable path .
7825	Get default template .
7826	Save the selected translation to resources .
7827	Fetch a translation form Loco .
7828	Update the translation in Loco .
7829	If there is something wrong with the translation please flag it .
7830	Create a new asset in Loco .
7831	Download all the translations from Loco . This will replace all the local files . This is a quick method of getting all the latest translations and assets .
7832	Upload all the translations from the symfony project into Loco . This will override every changed strings in loco
7833	Synchronize all the translations with Loco . This will keep placeholders . This function is slower than just to download the translations .
7834	Update the file system after the Response has been sent back to the client .
7835	Copy the parent configuration to the children .
7836	Add a hash value to the script - src .
7837	Returns the value for the CSP header based on the loaded configuration .
7838	Searches the composer class map .
7839	Searches the composer PSR - x class maps .
7840	Using afterSave afterCreate or afterUpdate to set relationships is often very useful . afterSave is called on both update and create .
7841	This method is called before fetchMany and fetchSingle . We use it to add functionality that should be present on every query .
7842	This method is called after fetchMany and fetchSingle . It is most useful to append attributes onto more than one model for stuff that can t easily be done via the query builder . Sometimes for example a subselect or join or groupby can mess with the paginator .
7843	Sync item data for a new wastage .
7844	Sync items for an existing wastage . Updates the item entry if it exists or creates them if they don t .
7845	Find the item entry of a specific product key in a collection of items .
7846	Check the integrity of an item model . Add missing data if necessary .
7847	Build the pivot table data for a particular item .
7848	Fill an entity s attributes .
7849	Set up the repository s default criteria .
7850	Perform an action .
7851	Perform a before or after action .
7852	Validate a set of attributes against a certain action .
7853	Perform a query .
7854	Toggle pagination .
7855	Toggle throwing of exceptions .
7856	Apply the repository s criteria onto a query builder .
7857	Update an entity with the given attributes and persist it .
7858	Perform a query fetching an array of columns .
7859	Get a specific row by key in the repository .
7860	Get a specific row by criteria .
7861	Get a collection of rows by a criteria . This resets all previously pushed criteria .
7862	Get a collection of rows by an array of primary keys .
7863	Get a list of columns from the repository .
7864	Get a new query that searches by attributes .
7865	Convert placeholders in values of any config section
7866	Sets the path where views are located .
7867	Sets - up headers and starts transfering bytes
7868	method for getting mime type of a file
7869	This will map an exception action to a controller . Will look for an instance of the mapped exception to the thrown exception .
7870	Adds or overwrites the given aspect .
7871	Adds or overwrites the given pointcut .
7872	Returns a PointcutDefinition or false if none found .
7873	Returns all files elegible for scanning for classes .
7874	Returns true if the given filesystem entry is interesting to scan .
7875	Returns a human readable string description of the given error type .
7876	Main action . Will use the action mapper to get a controller that can handle the given Action and then the viewresolver to get a View that can render the returned ModelAndView from the controller .
7877	Calls the specified method from the specifed object using the specified arguments map .
7878	Call this one to see if this peer has any activity in the socket .
7879	Returns a bean definition .
7880	Will try to search and replace the properties found in the given value .
7881	Resolves all values for constructor arguments definitions in a bean definition .
7882	Instantiates a bean using the constructor .
7883	Instantiates a bean using a factory class .
7884	Instantiates a bean using a factory bean .
7885	Instantiates a bean .
7886	Creates whatever beans this definition depends on .
7887	Will inject into the given dispatcher the necessary information to aspects will be run correctly .
7888	Applies all aspects specifically defined for this bean definition .
7889	Looks for any global aspects that may apply to this bean and applies them .
7890	Applies specific bean aspects and global defined aspects .
7891	This will create a new bean injecting all properties and applying all aspects .
7892	Calls init method and register shutdown method .
7893	Tries to inject by looking up a method of the given name .
7894	Tries to inject by looking up a property by name .
7895	Returns a bean .
7896	This will return a container
7897	Will look for aware kind of interfaces and inject whatever necessary .
7898	Called when a signal is caught .
7899	Called by php to load a given class . Returns true if the class was successfully loaded .
7900	Returns a new bean definition a copy of this one .
7901	This one will populate the map indexed by annotations names so we can then get all classes with a particular annotation name .
7902	Initializes SimpleXML Object
7903	Initialize SimpleXML .
7904	Call this to close the server .
7905	Call this to bind the socket and start listening for connections . Will also set the socket non blocking .
7906	After disconnecting a peer this will release all the associated information .
7907	This will return a proxy class source .
7908	This will return a full proxy - method - parameter source .
7909	This will return a full proxy - method source .
7910	This will give you the name of a proxy class as a string . The class will already exist in the vm .
7911	Initializes yaml contents .
7912	Initialize YAML contents .
7913	Loads pami and initializes everything .
7914	Opens the connection to ami . Also calls _load if it has to .
7915	Factory for cache implementations .
7916	Runs the AfterDefinition point of the lifecycle .
7917	Runs the BeforeCreate point of the lifecycle .
7918	Runs the AfterCreate point of the lifecycle .
7919	Runs the BeforeAssemble point of the lifecycle .
7920	Runs the AfterAssemble point of the lifecycle .
7921	Opens syslog .
7922	Returns interceptors for a given method name or false if none was set .
7923	Returns exception interceptors for a given method name or false if none was set .
7924	Will chain and return the result of the chained call of interceptors .
7925	The proxy will call this method when an aspected method throws an exception .
7926	The proxy will call this method when an aspected method is called .
7927	Call this to close the connection .
7928	Call this to read data from the server . Returns the number of bytes read .
7929	Call this to open the connection to the server . Will also set the socket non blocking and control the connection timeout .
7930	Add model objects .
7931	Build URI for editor based on file path and line .
7932	Overwrite application editor config with Whoops Editor .
7933	Resolve file path when using Homestead .
7934	List values of field published with label .
7935	Finds the Page model based on alias value . If the model is not found a 404 HTTP exception will be thrown .
7936	Create a new link .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the update page .
7938	Registers widget translations .
7939	Registers required script for the plugin to work as DatePicker .
7940	Returns the vote for the given parameters .
7941	Format the fromEmail parameter for the Swift_Mailer .
7942	Loads the user for the given username or email address .
7943	Reconstitute a User object from stored data .
7944	Factory method for creating a new User instance .
7945	Encode a plain text password and set it on the given User object .
7946	Test whether a given plain text password matches a given User s encoded password .
7947	Test whether the current user is authenticated .
7948	Get a single User instance that matches the given criteria . If more than one User matches the first result is returned .
7949	Find User instances that match the given criteria .
7950	Get SQL query fragment common to both find and count querires .
7951	Count users that match the given criteria .
7952	Insert a new User instance into the database .
7953	Update data in the database for an existing user .
7954	Delete a User from the database .
7955	Validate a user object .
7956	Clear User instances from the identity map so that they can be read again from the database .
7957	Log in as the given user .
7958	Initialize the signal handler .
7959	Reap any dead children
7960	Wait for any child to be ready
7961	Return the next available result .
7962	Return results from all workers .
7963	Apply a worker to the working or pending queue
7964	Return the total jobs that have NOT completed yet .
7965	Write the data to the socket in a predetermined format
7966	Read a data packet from the socket in a predetermined format .
7967	Revert data to the previous version .
7968	Register action .
7969	Action to handle email confirmation links .
7970	Login action .
7971	Action to resend an email confirmation message .
7972	View user action .
7973	Edit user action .
7974	Validate the user object .
7975	Returns routes to connect to the given application .
7976	Retrieve a map of accepted priorities with the responsible formatter .
7977	Retrieve the formatter to use for the current request .
7978	Update the response by formatting the payload .
7979	Find a . env file by traversing up the filesystem
7980	Determine the preferred content type for the current request
7981	Create a new application
7982	Run the application
7983	Use the action collaborators to get a response .
7984	Execute the domain to get a payload using input from the request .
7985	Execute the responder to marshall the payload into the response .
7986	Get the response with the status code from the payload .
7987	Returns a command class name based on a resource mapping .
7988	This method can be used in a controller before dispatching a command to pipe it . It will check if the command has commands to run in the command pipeline .
7989	Returns an integer for pagination based on a model s class .
7990	Loop through Request params creating where statements .
7991	Initialises the service provider .
7992	Allows additionnal methods .
7993	Gets the route s pattern .
7994	Returns the route s token structures .
7995	Gets the route s regular expression pattern .
7996	Gets the route s variables and their associated pattern in case of array variables .
7997	Checks if the route instance matches a request .
7998	Combines route s variables names with the regex matched route s values .
7999	Dispatches the route .
8000	Returns the route s link .
8001	Compiles the host s patten .
8002	Checks if a host matches a host pattern .
8003	Returns the host s link .
8004	Tokenizes a route pattern . Optional segments are identified by square brackets .
8005	Tokenizes patterns .
8006	Tokenizes segments which are patterns with optional segments filtered out . Only classic placeholder are supported .
8007	Splits a pattern in segments and patterns . segments will be represented by string value and patterns by an array containing the string pattern as first value and the greedy value as second value .
8008	Builds a regex from a tokens structure array .
8009	Scopes an options array according to the instance scope data .
8010	Adds a route .
8011	Groups some routes inside a new scope .
8012	Routes a Request .
8013	Normalizes a request .
8014	Routes a request .
8015	Returns a route s link .
8016	Clears the router .
8017	Creates and returns the JS code . The JS code is used to initialize the VIS instances in charge of displaying the workflow .
8018	Get token value
8019	Get token and store it
8020	Get list of address books
8021	List email addresses from book
8022	Add new emails to address book
8023	Get cost of campaign based on address book
8024	Create new campaign
8025	Add new sender
8026	Activate sender using code
8027	Get list of subscriptions for the website
8028	Set state for subscription
8029	Create new push campaign
8030	Get hash name
8031	Sends a query to the provided url and return the response body .
8032	Send a request to the comodo API and decodes the response as given
8033	Checks if a valid account has been provided
8034	Decodes a responseString separated by new lines and returns an response array
8035	Decodes a responseString encoded in query - string - format and returns an response array
8036	Fetches the mail recursively through the folders .
8037	Marks the mail with the processed flag
8038	Tries to find out what Comodo wanna tell us ...
8039	Refunds a ordered certificate
8040	Function apply for a certificate
8041	Function update for a certificate
8042	Function to revoke order
8043	Function to get details of a certificate
8044	Function to get the DCV e - mail address - list
8045	Function to do a sslcheck
8046	Function to call WebHostReport api
8047	Function to enter the DCV code coming from DCV E - Mail
8048	Function to create an exception for API errorcodes
8049	Render the meta tags .
8050	Set the Meta description .
8051	Reset the title and description fields .
8052	Register the bindings .
8053	Render the open graph tags .
8054	Add a raw entry to the sitemap .
8055	Prepare the data .
8056	Check if the sitemap contains an url .
8057	Validate the data for a sitemap entry .
8058	Fill all commands that don t have an index set
8059	Fill all commands that don t have a type set
8060	Set the index to operate on
8061	Set the type to operate on
8062	Set the index settings used predominantly for index creation
8063	Delete an index
8064	Create an index
8065	Update the settings of an index
8066	Execute the RawRequest
8067	Return a JSON representation of the final search request
8068	Sets the query or queries that will be executed
8069	Sets the facets to operate on
8070	Composes the final query aggregating together the queries filters facets and associated parameters
8071	Convert a parameter list into a composed parameter request array
8072	Add a new node to the ES cluster
8073	Must clause of Bool
8074	The document to delete
8075	Accepts an array of Commands or a BatchCommand
8076	Perform the delete operation
8077	Create new Request and add it to the request queue
8078	Perform POST request
8079	Perform PUT request
8080	Perform DELETE request
8081	Run all queued requests
8082	Override and add options
8083	Triggered just prior to a request being executed Inject a random node into the Request object
8084	Autodetect the nodes in this cluster through Cluster State API
8085	The document to index
8086	Perform the indexing operation
8087	This is all horribly terible and will be ripped out as soon as possible .
8088	Simple helper function to check if the current command is populated If not create a new one
8089	Get model gallery
8090	Create an album record on database
8091	Save album with a random name in database
8092	Generate a random album name
8093	Create or find the requested album
8094	Remove all versions of the picture from the storage after delete the record from the database
8095	Return configured main image resize attributes
8096	Add image styles configured in bootstrap . php
8097	Remove all versions from a picture from the database and from the server
8098	Save picture information in database
8099	Create extra images from a original one bases on styles defined on bootstrap . php
8100	Constructor of the class .
8101	Creates a blank image of given width height and background color .
8102	Configure galleries and create mysql tables
8103	Configure database to use this plugin
8104	Create the config file copying the config . php . install file
8105	Verify that all service operations have summaries set before continuing
8106	Output docs for each service operation in Markdown format .
8107	Gallery link helper
8108	Render a gallery with thumbnails
8109	This method use a album object to loop in all pictures and show them using a bootstrap html pattern .
8110	Load scripts for using on showroom
8111	Delete an image and all its versions from database
8112	Sort pictures from an album
8113	Returns a list of channelSection resources that match the request criteria .
8114	Starts a worker and begins listening for incoming payload . This method should not be invoked when new object is constructing because a Worker can be cloned before starting working .
8115	Stops a worker and ends the process
8116	Stops a worker and kills the process
8117	Sends payload to worker
8118	The first method that is being called when the worker starts .
8119	Forks current process . The parent thread will be returned to calling code . The child thread will execute callback and exit after that .
8120	Get saml authnRequest .
8121	Parse saml response .
8122	Return all managed binaries .
8123	Pending binaries are binaries that are supported but have not been installed .
8124	Fetch and save binaries .
8125	Update a single binary .
8126	Start the Selenium server .
8127	Remove all binaries from the install path .
8128	Assert that the selenium server can start .
8129	Register selenium binary and drivers with the process .
8130	Create a binary mock .
8131	Validate and return acceptable URL value .
8132	Get the linux filename .
8133	Overrides default save behavior to first decompress an archive format before saving it to a directory .
8134	Callback used when progress is made requesting .
8135	Watch for update progress and advance a progress bar .
8136	Get the message to initially display to the user .
8137	Get the result message .
8138	Inserts an element into the pipeline at the given position .
8139	Applies the given converter to the given item either if no filter is given or if the filter returns true .
8140	Applies the given converter to the given field in the given item if no filter is given or if the filters returns true for the field .
8141	Writes the given item to the given writer if the no filter is given or the filter returns true .
8142	Get authentication response transport from request .
8143	Return true if password meets the criteria set by the password policy .
8144	Create if doesn t exists a taxonomy given name .
8145	Is a value valid ?
8146	Get descriptor .
8147	Get env .
8148	Get client ip .
8149	Get current url .
8150	Unparse query string .
8151	Isset magic .
8152	Return all information about a given address
8153	Do inclusions .
8154	Do actions .
8155	Shifts an item in an array one down .
8156	Shifts an item in an array one up .
8157	Update the FormRead entity for the admin backend .
8158	Check the aggregate for a field with the propertyName boolean property and return the fields value .
8159	Checks of the provided item matches or its child items .
8160	Executes a function on a matching item .
8161	Gets a item by its uuid from the aggregate .
8162	Replace variables .
8163	Load JSON data .
8164	Load JSON file .
8165	Set the address s Latitude and Longitude
8166	Get the address s coordinates
8167	Returns info from the messageBus .
8168	Redirects to the edit page of a Form Aggregate by its uuid .
8169	Displays the Form Aggregate create form .
8170	Removes an item from a Form Aggregate .
8171	Checks whether the autoload dump event is used
8172	Determines the plugin class names of a package
8173	Returns the install name of a package
8174	Guesses the install name of a package
8175	Maps the root package s extra data to a package
8176	Rewrites the pico - plugin . php in Composer s vendor dir
8177	Returns the root package of a composer instance
8178	Returns the installation path of a package
8179	Returns and initializes the installation directory of the given type
8180	Modify palette if bootstrap is used .
8181	Creates an meta palette of a palettes .
8182	Create exception for the current context .
8183	Enter the heme context .
8184	Build context config .
8185	Get the color for an identifier .
8186	Rotate the color value .
8187	Convert hsv value to rgb value .
8188	Enter a context .
8189	Leave current context and enter the context which was used before .
8190	Switch to another context .
8191	Load configuration from bundle files .
8192	Set the config types arguments .
8193	Get all templates . A templatePrefix can be defined using eval . templatePrefix .
8194	Generate the page picker .
8195	Get all articles and return them as array .
8196	Get all modules prepared for select wizard .
8197	Execute all registered template modifiers .
8198	Parse current template .
8199	Register a tagged services to an definition argument . Returns false if service does not exist .
8200	Initialize bootstrap environment .
8201	Initialize Layout .
8202	ensure method has no body
8203	Compiles a Pug - string to PHTML .
8204	Compiles any Node that has a matching method for its type .
8205	Throws a Compiler - Exception .
8206	Gets the corresponding built - in PHP type .
8207	Gets the FileReflector associated with the class .
8208	Gets the DocBlock for this property .
8209	Gets the DocBlock from a property .
8210	Gets DocBlock from accessor or mutator method .
8211	Gets an array containing the PHP type and the class .
8212	Login to Wallhaven .
8213	Initialize HTTP client .
8214	Get token for login .
8215	Search for wallpapers .
8216	Iterates over registered extractors and return the first value found .
8217	Get wallpaper tags .
8218	Download the wallpaper .
8219	Execute the search with the specified filters .
8220	Download all wallpapers in list .
8221	Tries to extract type information from mutators .
8222	Tries to extract type information from accessors .
8223	Extracts data from the PHP 7 reflection type .
8224	Does the class have the given public property?
8225	Gets the accessor method .
8226	Gets the mutator method .
8227	Extracts a property name from a method name .
8228	Setup the Laravel extension .
8229	Creates a Laravel application .
8230	modify an option in the ini file . If the option doesn t exist it is created .
8231	modify several options in the ini file .
8232	remove a section from the ini file .
8233	move values of a section into an other section and remove the section .
8234	rename a value .
8235	rename a section .
8236	read an ini file .
8237	read an ini file and merge its parameters to the given object . Useful to merge to config files . Parameters whose name starts with a _ are not merged .
8238	merge two simple StdClass object .
8239	format a value to store in a ini file .
8240	modify an option in the latest ini file . If the option doesn t exist it is created .
8241	modify several options in the latest ini file .
8242	return all values of a section from all ini files .
8243	remove an option from all ini file .
8244	remove a section from all ini file .
8245	modify an option in the overrider ini file . If the option doesn t exist it is created .
8246	modify an option in the master ini file . If the option doesn t exist it is created .
8247	modify several options in the master ini file .
8248	return the value of an option from the master ini file only . If the option doesn t exist it returns null .
8249	return all values of a section from the both ini files .
8250	remove an option from the two ini file .
8251	remove an option from the master ini file only .
8252	says if there is a section with the given name .
8253	return all values of a section in the ini file .
8254	Creates a loader for the service config file
8255	Get loader class name based on short name
8256	Set cookie .
8257	Interactively determine the file and convert it
8258	Choose file from cli input or interactively
8259	Prompt the user to choose the bundle whose config they want to convert
8260	Write the new config to the same directory as the original file
8261	Creates a dumper for use only by the given container
8262	Convert a config represented as a string to some other format
8263	Called by PHP to read session data .
8264	Compile the routes into a displayable format .
8265	Sort the array using the given callback .
8266	Set the offset to start limiting from .
8267	Get the data bound to the view instance .
8268	Put the created content to file .
8269	Get a modified OptionsReader instance .
8270	Run the given route within a Stack onion instance .
8271	Gather the middleware for the given route .
8272	Convert a multi - dimensional array into a single - dimensional array without keys .
8273	Load the configuration items from all of the files .
8274	Get a Closure that represents a slice of the application onion .
8275	Parse full pipe string to get name and parameters .
8276	Run an console command by name .
8277	Define default values for the arguments of the command .
8278	The PHP executable .
8279	The Cerebro executable .
8280	Runs the current command .
8281	Get the default input definitions for the applications .
8282	Creates a route tree from the supplied routes .
8283	Adds a route to the node tree .
8284	Get the right Matcher .
8285	Create a new FilesystemManager instance .
8286	Create a new CachedFactory instance .
8287	Returns the accumulated execution time of statements .
8288	Returns the peak memory usage while performing statements .
8289	Profiles a call to a PDO method .
8290	Resolves an alias .
8291	Checks whether the resolver matches a given pattern and optional translation .
8292	Create a new twig engine instance .
8293	Extend ViewFactory .
8294	Extend EngineResolver with twig extension .
8295	Create a twig environment .
8296	Create a twig bridge loader .
8297	Parse the data array .
8298	Create a rule object .
8299	Create a negative or optional validator instance .
8300	Chain validator to a chained validator object .
8301	Parse a string based rule .
8302	Parse a parameter list .
8303	Starts a local web server in the background .
8304	Stop a running web server .
8305	Get the address from the pid file .
8306	Check if a server is running .
8307	Create a new server command process .
8308	Returns the list of listeners for an event .
8309	Removes an event listener from any events to which it was applied due to pattern matching .
8310	Checks whether a string contains any wildcard characters .
8311	Adds an event listener for all events matching the specified pattern .
8312	Read the mandatory options .
8313	Builds a multidimensional config array .
8314	Get a prepared response with the transformed exception .
8315	Create a response for the given exception .
8316	Get the displayer instance .
8317	Get the filtered list of displayers .
8318	Sort displayer after the first found accept header .
8319	Add the route to any look - up tables if necessary .
8320	Add a recipient to the message .
8321	Create a new AssetsRenderer instance .
8322	Register base collectors .
8323	Register all found collectors in config .
8324	Extend viserio events with data collector .
8325	Create new session manager instance .
8326	Create a route dispatcher instance .
8327	Create a router instance .
8328	Create a url generator instance .
8329	Set the application environment from command - line arguments .
8330	Get the environment argument from the console .
8331	Return the javascript for the Debugbar .
8332	Build toml file from given array .
8333	Run through all arrays .
8334	Transform metadata .
8335	Get the loader paths .
8336	Build configured path table .
8337	Returns the whoops instance .
8338	Add the necessary where clauses to the route based on its initial registration .
8339	Merge the group stack with the controller action .
8340	Add a controller based route action to the action array .
8341	Prepend the last group uses onto the use clause .
8342	Prefix the given URI with the last prefix .
8343	Update the group stack with the given attributes .
8344	Create a sanitizer instance .
8345	Register a callback to run before a bootstrapper .
8346	Register a callback to run after a bootstrapper .
8347	Run the given array of bootstrap classes .
8348	Calls callbacks on bootstrap name .
8349	Get a new random session ID .
8350	Merge new flash keys into the new flash array .
8351	Load the session data from the handler .
8352	Read the session data from the handler .
8353	Write values to handler .
8354	Resolve the current page or return the default value .
8355	At least check if the input string does not have null - byte and is a UTF - 8 valid string .
8356	Extend viserio events manager with a new event .
8357	Gets an array of files to lint .
8358	Get a finder instance of Twig files in the specified directories .
8359	Validate the template .
8360	Output the results of the linting .
8361	Output the results as text .
8362	Parse the middleware group and format it for usage .
8363	Checks if a mandatory param is missing supports recursion .
8364	Get configuration for provided dimensions .
8365	Run a validator against given config .
8366	Checks if a deprecation exists and triggers a deprecation error .
8367	Route a resource to a controller .
8368	Get the base resource URI for a given resource .
8369	Format a resource parameter for usage .
8370	Extract the resource and prefix from a resource name .
8371	Add the destroy method for a resourceful route .
8372	Get the URI for a nested resource segment array .
8373	Get the action array for a resource route .
8374	Get the name for a given resource .
8375	Resolve from container .
8376	Private delegate callable middleware for the pipe .
8377	Gets an array of argument files to lint .
8378	Returns client IP address .
8379	Check that a given string is a valid IP address .
8380	Find out the client s IP address from the headers available to us .
8381	Set the domain being used by the transport .
8382	Check if given input is a string object or array .
8383	Validates if given object or string has a middleware interface .
8384	Create a new TranslationManager instance .
8385	Create a new Schedule instance .
8386	Get computed data .
8387	Create a new SwiftMailer instance .
8388	Create a mailer or queue mailer instance .
8389	Set a global address on the mailer by type .
8390	Creates a tooltip group from array .
8391	Creates a tab slider .
8392	Creates a table .
8393	Create a dropdown menu content .
8394	Create a metrics .
8395	Converts the variable into a serializable Data instance .
8396	Get the cloner used for dumping variables .
8397	Get a HtmlDumper instance .
8398	Appends the supplied code to the builder .
8399	Appends the supplied code and a new line to the builder .
8400	Add extensions to twig environment .
8401	Sort the middleware by the given priority map .
8402	Splice a middleware into a new position and remove the old entry .
8403	Create a aggregate log driver instance .
8404	Create an emergency log handler to avoid white screens of death .
8405	Create an instance of the single file log driver .
8406	Create an instance of the daily file log driver .
8407	Create an instance of the syslog log driver .
8408	Create an instance of the error log log driver .
8409	Create an instance of the Slack log driver .
8410	Create a custom log driver instance .
8411	Create an instance of any handler available in Monolog .
8412	Push given processors to monolog .
8413	Create a new server request from a set of arrays .
8414	Get the singular form of an English word .
8415	Attempt to match the case on two strings .
8416	Establish a connection .
8417	Create a new console application instance .
8418	Merge route groups into a new array .
8419	Format the suffix for the new group attributes .
8420	Detect if a custom environment file matching the APP_ENV exists .
8421	Load a custom environment file .
8422	Get a transport instance .
8423	Make a new transport instance .
8424	Check if the given transport is supported .
8425	Create an instance of the SMTP Swift Transport driver .
8426	Create an instance of the Mailgun Swift Transport driver .
8427	Create an instance of the SparkPost Swift Transport driver .
8428	Create an instance of the Amazon SES Swift Transport driver .
8429	Create a new Repository instance .
8430	Update RouteTreeNode class .
8431	Register needed events to event manager .
8432	Extend the twig environment .
8433	Register viserio twig extension .
8434	Get all allowed http methods .
8435	Adds the supplied route to the matched route data map .
8436	Returns whether or not the stream is a pipe .
8437	Add a new mime type with extension .
8438	Add a new parser .
8439	Parse given file path or content string .
8440	Get supported parser on extension or mime type .
8441	Auto detect the payload data type using finfo and pathinfo .
8442	Setup config and class .
8443	Returns the duration of a request .
8444	Stops a measure .
8445	Adds a measure .
8446	Identify the given exception .
8447	Generate v4 UUID .
8448	Set validated headers .
8449	Validate the HTTP protocol version .
8450	Test that an array contains only strings .
8451	Filter array headers .
8452	Get the number of seconds the client should wait before retrying their request .
8453	Get configured invoker .
8454	When an invalid type is encountered .
8455	Decorate CacheItemPool instances .
8456	Decorate SimpleTraceableCache instances .
8457	Gets the value of an environment variable . Supports boolean empty null and base64 prefix .
8458	Get the value without the reference keyword .
8459	Replace parameter key with given value in data string .
8460	Creates the table to store sessions which can be called once for setup .
8461	Return a PDO instance .
8462	Lazy - connects to the database .
8463	Get all of the files for the application .
8464	Render css and js into html elements .
8465	Get the last modified time of any assets .
8466	Run the given cron job .
8467	Do not allow the cron job to overlap each other .
8468	Extend monolog with a processor .
8469	Extend viserio profiler with a data collector .
8470	A simplexml_import_dom wrapper .
8471	Loads an XML file .
8472	Loads an XML string .
8473	Converts an xml value to a PHP type .
8474	Validates DOMDocument against a file or callback .
8475	Convert a string from its PO representation .
8476	Checks if entry is a header .
8477	Export reference infos .
8478	Export obsolete entries .
8479	Export previous entries .
8480	Export multi - lines from given line . Throws a exception if state is not found or broken comment is given .
8481	Add the headers found to the translations instance .
8482	Check if is file .
8483	Check if error is a int or a array then set it .
8484	Set the fill the right variable .
8485	Validate retrieve stream .
8486	Takes an id of the service as the first argument . Any other arguments are passed to the Mockery factory .
8487	Parse given command string .
8488	Parse arguments .
8489	Parse options .
8490	Parse the token into its token and description segments .
8491	Validates the name attribute .
8492	Validates a value .
8493	Stores data into current scope .
8494	Get all the addresses this email should be sent to including to cc and bcc addresses .
8495	Create an instance of the MongoDB cache driver .
8496	Create an instance of the Redis cache driver .
8497	Create an instance of the Predis cache driver .
8498	Create an instance of the Flysystem cache driver .
8499	Create an instance of the Memcached cache driver .
8500	Create an instance of the Memcache cache driver .
8501	Gets a Collector by name .
8502	Complie all added routes to a router handler .
8503	Creating a template for the router class .
8504	Compile the counter for the segments check .
8505	Compile the route http method match switch .
8506	Compile disallowed http method or not found data check .
8507	Compile the found route data .
8508	Returns a DebugProcessor instance if one is registered with this logger .
8509	Get computed log error levels .
8510	Group log level together .
8511	Get the listener .
8512	Adds this pattern s listener to an event .
8513	Removes this pattern s listener from all events to which it was previously added .
8514	Transforms an event pattern into a regular expression .
8515	Get a value from a nested array based on a separated key .
8516	Set nested array values based on a separated key .
8517	Process array through all parameter processors .
8518	Process through all parameter processors .
8519	Render an exception to the console .
8520	Renders the editor containing the code that was the origin of the exception .
8521	Renders the trace of the exception .
8522	Gets the backtrace from an exception .
8523	Returns an iterator for the inspected exception s frames .
8524	Format the given function args to a string .
8525	Returns the contents of the file for this frame as an array of lines and optionally as a clamped range of lines .
8526	Returns the full contents of the file for this frame if it s known .
8527	Normalize a view name .
8528	Resolves an entry by its name . If given a class name it will return a new instance of that class .
8529	Resolve a class .
8530	Resolve a method .
8531	Resolve a parameter .
8532	Resolve an array of \ ReflectionParameter parameters .
8533	Get the reflection object for a method .
8534	Check if something is a function .
8535	Merge some dynamically resolved parameters with some others provided parameters by the user .
8536	Write a new file .
8537	Write the contents of a file .
8538	Update a file using a stream .
8539	Decrypts a stream .
8540	Encrypts a stream .
8541	Decrypts a string .
8542	Encrypts a string .
8543	Returns a stream representation of a string .
8544	Create a new transport factory .
8545	Create a new swift mailer manager .
8546	Gets xliff file version based on the root version attribute . Defaults to 1 . 2 for backwards compatibility .
8547	Get the right xliff schema from version .
8548	Internally changes the URI of a dependent xsd to be loaded locally .
8549	Parse the given visibility value .
8550	Sanitize a dataset using rules .
8551	Apply global sanitizer rules .
8552	Execute sanitization over a specific field .
8553	Execute a sanitizer using the appropriate method .
8554	Resolve a callback from a class and method pair .
8555	Resolve a command from expression .
8556	Create a new command .
8557	Reflect default values from callable .
8558	Check if callable is valid .
8559	Check if the callable represents a static call to a non - static method .
8560	Create a new CookieJar instance .
8561	Parse individual element .
8562	Add node .
8563	Add collection node .
8564	Create the root element .
8565	Return a anonymous class with a castObject function .
8566	Gets the called listeners .
8567	Gets the not called listeners .
8568	Validate SameSite value .
8569	Normalizes the expiration value .
8570	Remove the leading . and lowercase the domain as per spec in RFC 6265 .
8571	Processes path as per spec in RFC 6265 .
8572	Get timestamp as cookie string format .
8573	Start new event .
8574	Apply helpers .
8575	Filter a helper from string .
8576	Apply filter on string .
8577	Logs for missing translations .
8578	Collect messages about all translations .
8579	Get display type from format .
8580	Display errors in json format .
8581	Get a generator of files .
8582	Get content from stdin .
8583	Get item from dirs .
8584	The event name must only contain the characters A - Z a - z 0 - 9 _ and . .
8585	Convert a number string to bytes .
8586	Remove non - numeric characters in the string to cast it to a numeric value .
8587	Get config on adapter name .
8588	Make a new driver instance .
8589	Adds a loader to the translation extractor .
8590	Create a new Alias loader .
8591	Get real - time proxy cache path .
8592	Push the command onto the given queue instance .
8593	Determine if the given command should be queued .
8594	Create an instance of the cookie session driver .
8595	Create an instance of the Migrating session driver .
8596	Create the cache based session handler instance .
8597	Build the session instance .
8598	Build the encrypted session instance .
8599	Parse the given action into an array .
8600	Return the first element in an array passing a given truth test .
8601	Parse xliff notes .
8602	Convert a UTF8 string to the specified encoding .
8603	Tag all keys with given tag .
8604	Create a log manager instance .
8605	Confirm before proceeding with the action .
8606	Get the default confirmation callback .
8607	Injects the web debug toolbar into the given Response .
8608	Collect data and create a new profile and save it .
8609	Create template .
8610	Create profile with all datas .
8611	Parse the string level into a Monolog constant .
8612	Start the session for the given request .
8613	Store the current URL for the request if necessary .
8614	Remove the garbage from the session if necessary .
8615	Add the session cookie to the application response .
8616	Create a response from string .
8617	Return path to template without the need for the extension .
8618	Normalize the Twig template name to a name the ViewFinder can use .
8619	Parse the given view name or array .
8620	Add the content to a given message .
8621	Send a Swift Message instance .
8622	Determines if the message can be sent .
8623	Create a new message instance .
8624	Call the provided message builder .
8625	Creates a view string for the email body .
8626	Handle dispatching of a found route .
8627	Prepare the request uri path .
8628	Generates a router file with all routes .
8629	Generate a cache directory .
8630	Get the data path for a file .
8631	Check if the right option are given .
8632	Get the right parser .
8633	Require file .
8634	Require file once .
8635	Create a hard link to the target file or directory .
8636	Set directories .
8637	Add directory .
8638	Import a language from file .
8639	Add message catalogue .
8640	Set fallback for a language .
8641	Get fallback for a language .
8642	Add a new presenter .
8643	Check for more pages . The last item will be sliced off .
8644	Contains resolved hostname if available .
8645	Finds the front controller in root path .
8646	Finds a host and port .
8647	Searching for the port between 8000 and 8100 .
8648	Escapes a string for output in an HTML document .
8649	Sort all datas from collectors .
8650	Create the aggregate stream that will be used to upload the POST data .
8651	Extracts trans message from PHP tokens .
8652	Seeks to a non - whitespace token .
8653	Extracts the message from the iterator while the tokens match allowed message tokens .
8654	Extend PDO with our TraceablePDODecorater .
8655	Decrypt the cookies on the request .
8656	Encrypt the cookies on an outgoing response .
8657	Duplicate a cookie with a new value .
8658	Register the given command with the console application .
8659	Get the cerebro application instance .
8660	Merge composer project dir settings with the default narrowspark dir settings .
8661	Get the path to a template with a named path .
8662	Get the segments of a template with a named path .
8663	Find the given view in the list of paths .
8664	Get an array of possible view files .
8665	Get information s about given event .
8666	Render Cookies into a response .
8667	Wrap Twig Environment .
8668	Returns collected messages .
8669	Adds a message .
8670	Register a short - hand name for a middleware .
8671	Get collected logs .
8672	Handle a view exception .
8673	Get a ErrorException instance .
8674	Get the cache path .
8675	Ensure that the given alias has an existing real - time statical proxy class .
8676	Format the statical proxy stub with the proper namespace and class .
8677	Register the Markdown engine implementation .
8678	Prepares a string to be outputed into a file .
8679	Adds tcomment to the output .
8680	Adds reference to the output .
8681	Adds flags infos to the output .
8682	Adds previous info to the output .
8683	Adds msgid to the output .
8684	Add msgid_plural to the output .
8685	Adds key with msgstr to the output .
8686	Adds a header to the output .
8687	Get all paginations page links .
8688	Create a connector instance based on the configuration .
8689	Finalize the event s command syntax with the correct user .
8690	Determine if the Cron expression passes .
8691	Run the command in the foreground .
8692	Run the command in the background .
8693	Call all of the before callbacks for the cron job .
8694	Call all of the after callbacks for the cron job .
8695	Schedule the cron job to run between start and end time .
8696	Check if startTime and endTime are before and after midnight .
8697	Merge same matcher together .
8698	Optimize matcher and matcher order .
8699	Change matcher for a faster one if available .
8700	Optimizing the matcher order unknown types are added last .
8701	Create a new HtmlDisplayer instance .
8702	Create a new ViewDisplayer instance .
8703	Create a new WhoopsPrettyDisplayer instance .
8704	Get the number of recipients .
8705	Bootstrap the kernel for HTTP requests .
8706	Convert request into response .
8707	Render the exception to a response .
8708	Pipes the request through given middleware and dispatch a response .
8709	Compile parameters for a command .
8710	Set the value at a given offset .
8711	Get a configured instance of invoker .
8712	Bind a plain value .
8713	Bind a value which need to be resolved each time .
8714	Bind a value which need to be resolved one time .
8715	Resolve a plain value from the container .
8716	Resolve a service from the container .
8717	Resolve a singleton from the container .
8718	Extend a resolved subject .
8719	Format a class binding .
8720	Get the message ID from the response .
8721	Convert email dictionary with emails and names to array of emails with names .
8722	Gets MIME parts that match the message type . Excludes parts of type \ Swift_Mime_Attachment as those are handled later .
8723	Convert a Swift Mime Message to a Postmark Payload .
8724	Applies the recipients of the message into the API Payload .
8725	Applies the message parts and attachments into the API Payload .
8726	Applies the headers into the API Payload .
8727	Check the requirements for the command .
8728	Get the extension used by the view file .
8729	Get the right view object .
8730	Determine if a given string ends with a given substring .
8731	Render Cookies into a Request .
8732	Create a list of Cookies from a Cookie header value string .
8733	Replaces the thrown exception .
8734	Sets the exit code .
8735	Get the URL for a given route instance .
8736	Prepare route patch with all parameters and encode the path .
8737	Check if a scheme is required .
8738	Add the port and scheme to the uri if necessary .
8739	Replace all of the wildcard parameters for a route path .
8740	Replace all of the named parameters in the path .
8741	Add a query string to the URI .
8742	Get the query string for a given route .
8743	Parse arguments to the where method into an array .
8744	Get the bound route controller middleware .
8745	Get the bound route controller disabled middleware .
8746	Add a request cookie to the stack .
8747	Split a string to array .
8748	Inject the provided Content - Type if none is already present .
8749	Limit the number of words in a string .
8750	Generate a random string of a given length and character set .
8751	Replace the first occurrence of a given value in the string .
8752	Replace the last occurrence of a given value in the string .
8753	Helper function for replaceLast and replaceFirst .
8754	Get the verbosity level in terms of Symfony s OutputInterface level .
8755	Run the console command .
8756	Call another console command .
8757	Call another console command silently .
8758	Get the value of a command argument .
8759	Get the value of a command option .
8760	Prompt the user for input .
8761	Prompt the user for input with auto completion .
8762	Give the user a single choice from an array of answers .
8763	Format input to textual table .
8764	Write a string as standard output .
8765	Write a string as information output .
8766	Write a string as comment output .
8767	Write a string as question output .
8768	Write a string as error output .
8769	Write a string as warning output .
8770	Configure the console command using a fluent definition .
8771	Specify the arguments and options on the command .
8772	Get the transmission ID from the response .
8773	Get all the addresses this message should be sent to .
8774	Render the page with given info .
8775	Determine if the exception shouldn t be reported .
8776	Report or log an exception .
8777	Add the transformed instance .
8778	Convert errors into ErrorException objects .
8779	Shutdown registered function for handling PHP fatal errors .
8780	Register the PHP exception handler .
8781	Register the PHP shutdown handler .
8782	Prepare exception in a fatal error handler .
8783	Get the transformed exception .
8784	Get the exception level .
8785	Determine if the exception is in the do not report list .
8786	Add a new dumper .
8787	Dump data in your choosing format .
8788	Get supported dumper on extension or mime type .
8789	Get a loggable string out of a Swiftmailer entity .
8790	Tries to maps hyphenated parameters to a similarly - named non - hyphenated parameters in the function signature .
8791	Converts a Unicode code point to its UTF - 8 encoded representation .
8792	Create a new QueueingDispatcher instance .
8793	Optimizes the supplied route tree .
8794	Extract parent nodes from route tree nood .
8795	Returns the SQL string with any parameters used embedded .
8796	Safely opens a PHP stream resource using a filename .
8797	Create a new stream based on the input type .
8798	Copy the contents of a stream into a string until the given number of bytes have been read .
8799	Copy the contents of a stream into another stream until the given number of bytes have been read .
8800	Read a line from the stream up to the maximum allowed buffer length .
8801	Set the default path and domain for the jar .
8802	Get the path and domain or the default values .
8803	Get the Whoops handler .
8804	Retrieve the host from the URI instance .
8805	Validate the HTTP method .
8806	Create and return a URI instance .
8807	Returns the filename without the extension from a file path .
8808	Changes the extension of a path string .
8809	Create a cache manger instance .
8810	Initiate a mock expectation on the static proxy .
8811	Resolve the statical proxy root instance from the app .
8812	Determines whether a mock is set as the instance of the static proxy .
8813	Get the given handler segment for the given command .
8814	Transform a SplFileInfo to a Http File and check if the file exists .
8815	Sets the Content - Disposition header with the given filename .
8816	Automatically sets the Last - Modified header according the file modification date .
8817	Sets the value .
8818	Describes an object if supported .
8819	Describes the application commands .
8820	Sort all application commands on namespace .
8821	Prepare request and response cookie infos and create a cookie tab .
8822	Prepare request attributes check of route object .
8823	Prepare request headers .
8824	Prepare server parameter . Hide all keys with a _KEY|_PASSWORD|_PW|_SECRET in it .
8825	Post Parameters from parsed body .
8826	Converts the supplied value into a valid ini representation .
8827	Get a crypted aware connection instance .
8828	Get the cache configuration .
8829	Adapt the filesystem implementation .
8830	Parses the supplied route pattern into an array of route segments .
8831	Generate a segment regex .
8832	Get a full configured invoker class .
8833	Checks various object types for existence .
8834	Get the target language from file .
8835	Create a new VarDump Connection instance .
8836	Create a new DumpServer instance .
8837	Check whether a file exists .
8838	Get normalize or prefixed path .
8839	Get content from a dir .
8840	Filter directory contents by type .
8841	Determine if the session and input CSRF tokens match .
8842	Add the CSRF token to the response cookies .
8843	Sanitize collected messages .
8844	Counter for message types .
8845	Sorte messages to the right type .
8846	Add a stream to the AppendStream .
8847	Closes each attached stream .
8848	Decode image stream
8849	Decode extension in image stream
8850	Decode Image Descriptor from image stream
8851	Decode Image data from image stream
8852	set orderDir property
8853	get data set of collection
8854	load collection from API2
8855	method to build City objects from multidimension array
8856	method to build PSTNNetwork objects from multidimension array
8857	method to load pstn networks from API2
8858	method load cities from API2
8859	Method to get regions from DIDWW API
8860	method get city by id
8861	Fix of encryption
8862	get collection of pstn rates
8863	update pstn rates from countries collection
8864	update pstn rates from pstnnetworks collection
8865	factory to build mapping object by params array
8866	Returns delay of current instance
8867	Determines if instance has transparent colors
8868	Decodes disposal method of frame
8869	Decodes width and height of frame to size object
8870	Decodes offsets into object
8871	Sets frame offset
8872	get _country property
8873	get object state as array
8874	create object from flat array
8875	create object from array
8876	create DIDNumber using DIDWW API2
8877	generte uniqueHash for order create API call
8878	method to generate authString property from userName and password properties
8879	load amount from API2
8880	method to call didww api 2 soap method
8881	Returns particular frame
8882	Adds offset to first frame without offset
8883	Adds size to first frame without size
8884	Returns loops of animation
8885	Determines if image has global color table
8886	Get number colors in global color palette
8887	Returns background color index
8888	Adds value to first frame without this particular value
8889	Adds new frame with given property
8890	convert object to array with snaked keys
8891	method to return list of all balances from API
8892	method to return list of all balances indexed by customer id
8893	method to return list of DidwwBalance objects from API
8894	method to change customer balance with funds value
8895	method to set current value of customer balance from API
8896	Set canvas dimensions
8897	Setup encoder from Decoded object
8898	Create and add new frame from GD resource
8899	Encode image data
8900	Build logical screen descriptor
8901	Build Netscape extension
8902	Build encoded Frame
8903	Build encoded graphics control extension for frame
8904	Build encoded image descriptor for frame
8905	create did number for order
8906	change API2 order autorenew enable
8907	renew order for current period
8908	reload didnumber by number or order id
8909	update mapping of did number
8910	generate unique hash for did renew operation
8911	Determines if a target IP address is within a particular IP address range .
8912	Get the parameter with the the given name or return the default value if the parameter is not set .
8913	Make sure the metadata and key are linked both ways .
8914	Set metadata for a specific service This will override all meta data matching service and key .
8915	Same as setMetaData but will append the data instead of overriding .
8916	Removes a service from the container and releases the shared instance if it has been loaded .
8917	Release a shared resolved service from the container . This will force the service to reload when accessed again .
8918	Retrieve a service from the container .
8919	Resolve a service instance from the given factory object .
8920	Resolves a service instance from a provider and stores the result inside the shared services if needed .
8921	Register a service provider . This will call the provides method on the given service provider instance .
8922	Binds a service factory to the container .
8923	Creates and binds a service factory by class name and arguments .
8924	Binds an unshared factory instance to the service container .
8925	Binds a shared factory instance to the service container .
8926	Get the resolver type of the given service name .
8927	Add a service argument of type
8928	Add arguments with a simple array
8929	Resolve the current arguments from the given container instance and return them as array
8930	Construct your object or value based on the given container .
8931	Set the tokens of the current parser
8932	Retrives the current token based on the index
8933	Get the next token based on the current index If the token does not exist because its off index false is returend .
8934	Skip all upcoming tokens of the given type
8935	Return all remaining tokens
8936	Get all tokens until the next token with given type
8937	Retruns all tokens until the opened scope is closed again
8938	Create new unexpected token exception
8939	Starts a new parser with the remaining or given tokens
8940	Start the code parser and return the result
8941	Sets the container name This will also update the containerClassName and containerNamespace
8942	Add a service by string and arguments array .
8943	Add services by an array
8944	Add a service definition instance to the container builder .
8945	Import data from a container namespace
8946	Checks if the given string is valid and not numeric &
8947	Generates the normalizedServiceNames array .
8948	Generate the container class code string
8949	Generate the service resolver method name for the given service
8950	Generate arguments code
8951	Generate the containers parameter property
8952	Generate the resolver types array
8953	Generate the resolver mappings array
8954	Generate the resolver methods
8955	Create value node from the given token
8956	Validate if the given type and assing it
8957	This method will generate a mapping file of container files found in required composer packages . This mapping file can be imported into a container namespace .
8958	Get the tokens value as php native type .
8959	Is this a value token?
8960	Checks if an element with the given key already exists
8961	Pushes an assignable node to the array elements
8962	Converts the current array to a PHP array This will throw an exception when the array contains a reference to a service or parameter
8963	Get the next token from our code
8964	Start the lexer and retrieve all resulting tokens .
8965	Handles incoming webhook requests .
8966	Runs a shell command logs and handles the result .
8967	Backup the database .
8968	Create a new directory parallel to the webroot and clone the project into that directory .
8969	Copy the . env file from the new deploy directory .
8970	Update composer and run composer update .
8971	Run npm update .
8972	Run any necessary database migrations .
8973	Symlinks the new deploy directory to the webroot .
8974	Resolve a service with the given name
8975	Set the cache directory
8976	Create a container with the given name . You can pass an array with services
8977	Handles the HTTP request .
8978	Import paths from vendor container map
8979	Is the given path name binded?
8980	Simply returns the contents of the given file
8981	Returns the code of in the current namespace binded file .
8982	Parse the given container file with the current namespace
8983	Handle a container file scope
8984	Handle a scope import statement
8985	Handle a parameter definition
8986	Create final service arguments from an arguments array node
8987	Handle a service definition
8988	Construct a single service definition object from an array
8989	Adds a method call to the service definition the arguments should be set as an array .
8990	Adds a method call to the service definition the arguments must be set with a ServiceArguments instance .
8991	Sets meta data for the given key
8992	Determines whether or not the Request originated from Github .
8993	Verifies the authenticity of a webhook request from Github .
8994	Set the parameters value
8995	Get name of workot in human readable time .
8996	Convert point to string readable by Endomondo
8997	Send the Webhook
8998	Set workout type id .
8999	Get time of end of workout . It can be manual set or it is counted based on start and duration .
9000	Get array of points as single string .
9001	Get GPX of workout .
9002	Called by the DebugBar when data needs to be collected
9003	Get the hydrated models without eager loading .
9004	Gets the AJAX payload from the POST request .
9005	Retrieves the response from the handle s callback function .
9006	Executes the specified callback function passing in with the supplied arguments .
9007	Sanitizes and validates a handle name .
9008	Determines whether all validations have passed .
9009	Runs a single validation .
9010	Create a column for a device .
9011	Add a reset for a device .
9012	Get a size for a device .
9013	Build css classes .
9014	Tests whether the current user has the specified role .
9015	Start a new row .
9016	Get the current column .
9017	Automatically walk throw the grid .
9018	Begin a new row .
9019	Get the column resets for the current position always as html .
9020	Get index .
9021	Migrate form legacy column set editor .
9022	The main handler for the specfied handle .
9023	Handles the Ajax action .
9024	Registers the callback function to handle the request .
9025	Registers the validation settings .
9026	Handles a response .
9027	Determines the type of response to return .
9028	Sends the appropriate HTTP headers for the response type .
9029	Sends the response body in the appropriate format .
9030	Returns the content fetched from a given resource .
9031	Returns whether method is supported by GeoIP2 .
9032	Toggle the visibility state .
9033	Check if user has access .
9034	Build the grid .
9035	Get column as class string .
9036	Add column clear fix for a specific column and size .
9037	Add clear fix for a column .
9038	Get resets for a column .
9039	Check if column as a clear fix for a specific size .
9040	Get column resets as string .
9041	Registers an instance handle .
9042	Enqueues the library s scripts .
9043	Generates nonces for each of the registered handles .
9044	Get grids from the database .
9045	Use the parse template hook to inject column and row classes .
9046	Add clear fixes for a column .
9047	Get all grid elements .
9048	Create the row class .
9049	Create the column classes .
9050	Build columns .
9051	Fetch the database result .
9052	Prepare the css classes .
9053	Build the column resets .
9054	Create the grid by id .
9055	ParseTemplate hook being used to beatify the backend view .
9056	The isVisibleElement hook is used to dynamically load the grid definitions from the database .
9057	Load columnset definition for the form field .
9058	Load all grids from the database .
9059	Prepare the container by loading the grid and parse it as subcolumns definition .
9060	Update the subcolumns definition .
9061	Add column set field to the colsetStart content element .
9062	Append column sizes fields dynamically to the palettes .
9063	Replace subcolumns getAllTypes method to load all created columnsets .
9064	Get grids .
9065	Get columns for a a specific module .
9066	Create the order values .
9067	Get column numbers .
9068	Read a value
9069	Check if a key exists
9070	Remove specified key
9071	Read the value associated with the specified key or associate the specified key with the value returned by invoking the callback .
9072	Re - flash data
9073	Parse the insert tag .
9074	Get a walker for the subscribed event .
9075	Translate event params .
9076	Genera l array dei parametri per l encrypt
9077	Genera l array dei parametri per il decrypt
9078	save data to dynamic database ;
9079	Check validator with field .
9080	Override base method .
9081	Set entity data .
9082	Render by locale .
9083	Get field data .
9084	Get list fields data .
9085	Check valid entity .
9086	Save field data .
9087	Pass dynamicFields to view
9088	Get list fields by locale .
9089	Get list repeater field by locale .
9090	Get entities by fieldID .
9091	Find entities by entityID type and fieldId .
9092	Duplicate field of page .
9093	Get and inital group data that match with rule .
9094	Check validation of field .
9095	Render hmtl of group .
9096	Save group field data .
9097	Get GroupFields base on rule .
9098	Parse and Match rule with options .
9099	Initial fields of each group and assign to GroupFields array .
9100	Get field of data in browser .
9101	Sets a pixel at the given position
9102	Gets the pixel state at a given position
9103	Gets a line
9104	Gets all lines
9105	Gets a dot from the pixel map .
9106	Autovivification for a canvas position .
9107	Set data per group .
9108	create list controller when user post data from browser .
9109	Set list control of repeater .
9110	Set field control data .
9111	Set header repeater .
9112	Save field data to database .
9113	Show group field .
9114	Get repeater data by fieldId .
9115	Read template name defined in comments .
9116	If the template name is not defined in comments build a default .
9117	Set model and value .
9118	Get Entity or RepeaterTranslation model by locale .
9119	Get htmlId .
9120	get html name .
9121	Save field or repeater fild .
9122	Save normal field .
9123	Save repeat data for field of repeater .
9124	get value of option .
9125	Move the pen forward
9126	Move the pen drawing if the pen is down .
9127	Check task ancestors to find if it have a given task as parent
9128	Check task ancestors to find if it have a given task as child
9129	Reset the state object To be used before execution
9130	Test the input with the given set of conditions True by default
9131	Configure available condition rules in a wrapper option
9132	Configure available condition rules
9133	Softly check if an input key match a value or not
9134	Check if the input property is empty or not
9135	Get process duration in seconds
9136	Replace all contextualized values from options
9137	Try to find a best candidate for next display
9138	Map the previous task code to an input code
9139	Check if the received inputs match the defined mappings
9140	If there is no base_path then the given path from input should be absolute
9141	Sorter callback for process codes
9142	Create or recreate an iterator from input
9143	Condition is inversed during flush
9144	Warning! This method will rewind the file to the beginning before and after counting the lines!
9145	This methods rewinds the file to the first line of data skipping the headers .
9146	This allows to use transformer codes suffixes to avoid limitations to the transformers option using codes as keys This way you can chain multiple times the same transformer . Without this it would silently call only the 1st one .
9147	Group all task by dependencies
9148	Get the main task group that will be executed It may be defined by the entry_point or the end_point or simply the first task
9149	Assert the process does not contain circular dependencies
9150	Cross all relations of a task to find all dependencies and append them to the given array
9151	Sort the tasks by dependencies
9152	Resolve a task by checking if parents are resolved and processing roots and BlockingTasks
9153	Fetch task service and run additional setup for InitializableTasks
9154	Browse all children for FlushableTask until a BlockingTask is found
9155	Save the state of the import process
9156	Validate a process
9157	Validate if this model is correctly implemented
9158	Return model data in an array
9159	Return table field from Model
9160	Unset a relation value from magic setter
9161	Format class name without namespace to store a relation name
9162	Add a OneToOne relation
9163	Add a OneToMany relation
9164	Add a ManyToMany relation
9165	Return model array fetched from database with custom mysql query
9166	Return model collection fetched from database with criteria
9167	Find one model from criteria
9168	Count number of model in database from criteria
9169	Build an InternalQueryHelper to select models
9170	Build a select mysql query for this model from criteria in parameters return a raw mysql fetch assoc Using Raw SQL _setVal assume that you properly filter user input
9171	Hydrate model from a fetch assoc including OneToOne relation auto get field
9172	Delete this model from database
9173	Update model field in database
9174	Insert model in database
9175	Configure the collection to keep memory of added or removed elements .
9176	Perform operations on the collection without remembering them .
9177	Retrieve a model by its primary key .
9178	Remove a model from the collection .
9179	Get the index of a model .
9180	Save all items in the collection .
9181	Prefix fields from where associated array with table name
9182	Prefix fields from orderBy associated array with table name
9183	Get the column definition without the column name attached .
9184	Register a db table .
9185	Make a query object for the selected db table .
9186	Make a complex query object .
9187	Get the model for a table .
9188	Maybe install a table .
9189	Maybe delete a table .
9190	Check if a table is installed .
9191	Fire a plugin event on a given table .
9192	Do the saving for a post .
9193	Get the referenced column .
9194	Parse defaults based on the column types .
9195	Create a new FluentQuery object from a model .
9196	Select certain columns .
9197	Select a single column .
9198	Select all results .
9199	Select an expression such as COUNT .
9200	Filter results by a condition .
9201	Generate a Where tag .
9202	Add a nested where clause .
9203	Add a where condition checking an already joined table to the main where clause .
9204	Add a OR where clause .
9205	Perform a date based where query .
9206	Perform a meta query .
9207	Order the results by a given column .
9208	Order results by a previously calculated expression .
9209	Group the results by a given column .
9210	Group the results by a given column after applying an expression to it .
9211	Simple join statement .
9212	Perform a join but instead of comparing to a simple value use a correlated sub query to find the match .
9213	Paginate results .
9214	Execute a callback over every row chunking by a certain number .
9215	Perform this query while loading a set of relations .
9216	Parse the nested relations .
9217	Fill an array by array dot notation .
9218	Make the limit tag for this query .
9219	Build the SQL statement .
9220	Update the meta cache .
9221	Find a model by its primary key .
9222	Find many models by their primary keys .
9223	Find a model by its primary key or throw an exception .
9224	Find a model by its primary key or create a new model .
9225	Find the first model matching a given a set of attributes or construct a new one .
9226	Find the first model matching a given set of attributes or construct and save a new one .
9227	Find a model matching a given set of attributes . If it does not exist a new model is constructed with the given set of attributes .
9228	Handle eager loading of relations .
9229	Handle a nested eager loaded .
9230	Assert the operator is valid .
9231	Prepare a column .
9232	Escape a value .
9233	Set PicORM global configuration
9234	Get the value of a column .
9235	Create the object .
9236	Add an additional order by clause .
9237	Sanitize inputs and save state .
9238	Convert this select statement to retrieve all columns .
9239	Build an eager load map .
9240	Do the saving for a comment .
9241	Get a default arg .
9242	Query the database and store the results .
9243	Parse the results returned from the DB .
9244	Build the select query .
9245	Parse the orderby query . There is always a default or .
9246	Parse the pagination query .
9247	Check if two things are numerically equivalent .
9248	Check if there are changes .
9249	Execute query and fetch models from database
9250	Delete model in collection
9251	Update models in collection with specified values
9252	Return total page available
9253	Paginate collection to match a num page
9254	Execute query to count number of model in database without limit
9255	Remove limit from fetch query and count the number of models in database
9256	Whether a offset exists
9257	Offset to set
9258	Offset to retrieve
9259	Build a sql statement .
9260	Boot this model if it has not been previously booted .
9261	Boot any traits this model uses .
9262	Fill this model s attributes .
9263	Make a function call with a given attribute guarded .
9264	Make a function call with a given attribute unguarded .
9265	Determine if a given attribute is fillable .
9266	Set an attribute s value .
9267	Set an attribute s value in the attributes storage .
9268	Get an attribute s or relation s value .
9269	Get an attribute s value from storage .
9270	Retrieves an attribute s value and calls the accessor method if it exists .
9271	Get an attribute s value from the internal attributes array .
9272	Get all relations this model has .
9273	Get a relation s controller object .
9274	Set the value for a relation .
9275	Get a relation s value .
9276	Refresh the attributes on this model .
9277	Get the attributes that have been changed since the last sync .
9278	Retrieve an instance of this model by its primary key .
9279	Create a new object from a query builder .
9280	Get data for a primary key .
9281	Check if data is cached .
9282	Update a certain value .
9283	Persist this model s changes to the database .
9284	Save the has foreign relations .
9285	Save loaded relations .
9286	Save model as an insert query .
9287	Save this model as an update query .
9288	Perform cleanup after a save has occurred .
9289	Delete this object from the database .
9290	Create multiple models at once .
9291	Fire a model event .
9292	Register a model event listener .
9293	Get the data we d like to cache .
9294	Register a global query scope .
9295	Create a new query builder without certain global scopes applied .
9296	Perform a query with a given set of relations .
9297	Convert the model to an array .
9298	Get the actual comparison value to be checked .
9299	Override the value method . Handles recursion of nested Where clauses .
9300	Retrieve a row by the primary key
9301	Retrieve a specific column s value by the primary key
9302	Helper function for get_by and get_many_by methods .
9303	Retrieve the number of rows matching a certain where clause
9304	Insert a new row
9305	Update a row
9306	Delete a row identified by the primary key
9307	Delete many rows .
9308	Generate an Exception object from a DB error .
9309	Do the saving for a term .
9310	Make a FluentQuery object .
9311	Fetch results for an eager loading query .
9312	Create new values set for multiple insert query
9313	Set values for update query
9314	Add field to select
9315	Reset select and add a new field
9316	Configure object for UPDATE query and set the main table name
9317	Configure object for DELETE query and set the main table name
9318	Configure object for INSERT query and set the main table name
9319	Add FROM clause with table name and optional alias
9320	Add JOIN clause
9321	Alias to add WHERE clause with AND operator
9322	Alias to add WHERE clause with OR
9323	Reset the order clause from query
9324	Set LIMIT clause
9325	Delete the limit clause from query
9326	Initialize the TrashSupport trait .
9327	Get the results of the relation .
9328	Load the results of a relation from the cache .
9329	Load a collection of models from the cache .
9330	Cache the results of a relation .
9331	Cache a collection of results .
9332	Cache a single result .
9333	Maybe register cache events .
9334	Do the saving for a user .
9335	Set the model s last updated date whenever meta changes .
9336	Returns app config parameters like app . name app . version and app . base_path as array
9337	Returns true if the container . cache parameter does not exist or is false
9338	Creates a container instance
9339	Loads the container config from YAML files in the config directory
9340	Build the column name for a table .
9341	Save all models that are being persisted .
9342	Persist the removed models .
9343	Persist the added models .
9344	add UUID when creating
9345	Create a new filter instance .
9346	API Model Contract
9347	Converts a given LESS assets file into a CSS
9348	Builds the result file name
9349	Parsing Less File
9350	Send the pushover message
9351	Get a non running message from the queue .
9352	Count queue messages .
9353	Atomically acknowledge and send a message to the queue .
9354	Send a message to the queue .
9355	Helper method to validate keys and values for the given sort array
9356	Short cut to append a message string into the message collection
9357	Return a message collection of the selected type If the type does not exists the object is created
9358	Copy all messages from source to this object
9359	Gets a parameter or an object .
9360	Checks if a parameter or an object is set .
9361	Extends an object definition .
9362	Registers a service provider .
9363	Tag a service
9364	Find all service ids with a given tag
9365	Boots the current kernel .
9366	Initializes the data structures related to the bundle management .
9367	Returns the kernel parameters .
9368	Validate according to the current retriever . If retriever is set then it will use validateWithRetriever otherwise it will use validateWithoutRetriever .
9369	Validate changing the namespaces locations to local resources and downloading them if they does not exists
9370	Validate just using the SchemaValidator it will not retrieve any resource and perform all validations using internet
9371	Get container if it doesn t exist create it
9372	Output a JS asset from the container
9373	Output a CSS asset from the container
9374	Get all assets of a given type from a given container
9375	Sort and retrieve assets based on their dependencies
9376	Verify that an asset s dependency is valid .
9377	Return an object with default validators included in the PostValidator object
9378	Return a new instance of an XsdRetriever depending on the property localResourcesPath .
9379	Return a new instance of an XsltRetriever depending on the property localResourcesPath .
9380	Return a CertificadoValidator with the CadenaOrigen property set to the value of the newCadenaOrigen method
9381	Create a CFDI Reader it has to be valid otherwise a exception will be thrown
9382	Handle the command
9383	Set a new cookies into the collection
9384	Get cookie value
9385	Get first value in array from closure
9386	Check if password is valid
9387	Return the node in the path inside the Comprobante Returns null if the node does not exists The node retrieved is always a copy
9388	Get the attribute content of a comprobante or child node Return an empty string if the node or the attribute does not exists
9389	Utility function to create a child
9390	Utility function to copy contents from one element to other without namespaces
9391	Private helper to locate a node
9392	Check if posted value is valid
9393	Add queries for doctrine off the DebugStack logger
9394	Add timers to profiler
9395	Calculate the human - readable file size with units .
9396	Append a validator into the list of validators this will search if the validator object does not exists
9397	Remove a validator from the list of validators
9398	Return a registered instance of a validator identified by index
9399	Use this function to build the validate object from arguments values
9400	Run this script
9401	Run only a filename used in the run loop
9402	Try and authorize a user based on credentials
9403	Check if user is logged in
9404	Login a given user
9405	Logout a user
9406	Add a constraint to the validator
9407	Validate given input
9408	Redirects to a URL .
9409	Gets the Bundle directory path .
9410	Get a message by index
9411	Overwrite to change the way the custom post type name is determined . This value is fed into the PostTypeBuilder . If an existing post type of the same name exist it will load the existing configuration to allow modification .
9412	Returns a list of functions to add to the existing list .
9413	Resolve handler for command
9414	Configure this helper class
9415	Compute the sum of a collection of nodes considering an attribute
9416	Gets and clears input from the stack .
9417	Sets the Taxonomy Meta Box Order .
9418	Overwrite to change the way the taxonomy name is determined . This value is fed into the TaxonomyBuilder . If an existing taxonomy of the same name exist it will load the existing configuration to allow modification .
9419	Redirects the user to another URL .
9420	Register commands from bundles
9421	Gets the metadata of all classes of a bundle .
9422	Gets the metadata of all classes of a namespace .
9423	Find and configure path and namespace for the metadata collection .
9424	Add an asset to the array of registered assets .
9425	Returns a response
9426	Save an item into the cache
9427	Load the string content as a CFDI This is exposed to reuse the current object instead of create a new instance
9428	Procedure to drop schemaLocations that are not allowed If the schemaLocation is empty then remove the attribute
9429	Procedure to remove all nodes that are not from an allowed namespace
9430	Procedure to remove not allowed xmlns definitions
9431	If the delegated MetaDataBinding hasn t been set yet assume the current post as a PostType object . Use to bind Registery items .
9432	Set binding on any Registry items that delegate to a MetaDataBinding .
9433	Return the file name based on the class name that is dashed lower case . This file name format is used by WordPress .
9434	Return the Timber context with the View s context values added .
9435	Render the View after initialzing the bindings and context
9436	Load config files
9437	Match a given path
9438	Create a route section
9439	Create a route group
9440	Starts a new block .
9441	Stops a block .
9442	Outputs a block .
9443	Returns a callable for the given controller .
9444	Returns an instantiated controller
9445	Determine if the given path is a valid URL .
9446	Returns the path to the template file .
9447	Convenience method to push the helper sets of a given entity manager into the application .
9448	Convenience method to push the helper sets of a given connection into the application .
9449	Called by the WordPress include_template filter so we can intercept it and render our registered View object instead .
9450	Open the form
9451	Add a group of data transformers
9452	Execute a public API request
9453	Execute a market API request
9454	Execute an account API request
9455	Prepare the attributes .
9456	Add an extra meta .
9457	Returns the current row of a result set as an object
9458	Teh infamous dialog box
9459	The easiest way to retrieve a database connection . Works as a singleton and returns a connection with the default parameters
9460	ACID Transactions ONLY WORKS WITH INNODB TABLES !
9461	Loads the Maniacode GUI Toolkit . This should be called before doing anything with the toolkit
9462	Renders the Maniacode if no return the script will be stopped
9463	Connect to the service
9464	Set service watch settings
9465	Sets the background color of the element using a 3 - digit RGB hexadecimal value . For example fff is white and 000 is black
9466	Applies an image to the element
9467	Set the image id of the element used for internationalization
9468	Applies an image to the highlighter state of the element
9469	Set the image focus id of the element used for internationalization
9470	Imports links and actions from another Manialink element
9471	Get the seo config .
9472	Set the seo config .
9473	Get the seo translation .
9474	Get a list item from collection with given key . If item does not exist an empty array is returned .
9475	Removes all styles
9476	Create a redirect url .
9477	Get all inbound numbers associated with your Nexmo account
9478	Factory for getting instances on cache objects . You specify the driver to use as a parameter and it automatically falls back to the NoCache driver if not found
9479	Loads the Manialink GUI toolkit . This should be called before doing anything with the toolkit .
9480	Creates a new Manialink frame with an optionnal associated layout
9481	Closes the current Manialink frame
9482	Redirects the user to the specified Manialink
9483	Append some XML code to the document
9484	Build the redirector .
9485	Sets the gap between the layout outer border and its content
9486	Declare a font to use with onImage function
9487	Draw a string with on an image method will be choose depending on the size wanted
9488	Draw a string with on an image using fast method . There can be glitches when using small sizes
9489	Draw a string with on an image using quality method . Slow with big text size
9490	Get the redirect url .
9491	Get the redirected URLs .
9492	Get the cached redirection urls .
9493	Sets the size of the navigation icons
9494	Sets the button selected and change its styles accordingly
9495	Send a marketing message from Nexmo s shared short code .
9496	Sets the data to play
9497	Returns the LIMIT x x string depending on both values
9498	Returns string like name1 = value1 name2 = value2
9499	Retrieves a GET parameter or the default value if not found
9500	Retrieves a GET parameter or throws an exception if not found or null
9501	Retrieves a POST parameter or throws an exception if not found or null
9502	Restores a GET parameter to the value it had when the page was loaded
9503	Redirects to the specified route with with names of GET vars as parameters of the method
9504	Creates a link to the specified route with with names of GET vars as parameters of the method
9505	Returns an URL with the request parameters specified as method arguments
9506	Increment position X
9507	Increment position Y
9508	Increment position Z
9509	Sets the position of the element
9510	Sets the scale factor of the element . 1 = original size 2 = double size 0 . 5 = half size
9511	Sets the vertical alignment of the element .
9512	Sets the horizontal alignment of the element
9513	Sets the alignment of the element
9514	Sets the width of the element
9515	Sets the height of the element
9516	Sets the size of the element
9517	Adds a navigation button to the menu
9518	Adds a vertical gap before the next item
9519	Get the all status codes .
9520	Get the all status names .
9521	Fallback exception handler when nothing works . It tries to dump the exception in a file at the app root and prints a message .
9522	Computes a human readable log message from any exception
9523	Computes a short human readable log message from any exception
9524	Handle the missing pages redirection .
9525	Tries to read the specified file and save it
9526	Returns the Current URL .
9527	Returns the X position of an element in relation to another element and according to their respective alignments
9528	Returns the Y position of an element in relation to another element and according to their respective alignments
9529	Returns the position of an element in relation to another element and according to their respective alignments
9530	Get base query to select minimal date_applied for transactions by asset type or account IDs . Add appropriate where clauses after build .
9531	Quotes string data to use inside SQL queries .
9532	Reset all balances starting from date .
9533	Compose query to delete balances filtered by asset types and date .
9534	Add autoload configuration of packages managed by Composer
9535	Returns all available service ids of this container
9536	Tries to determine the return type of a service . At first we try to determine the type from the return annotation which is in most cases more useful because it could specify an interface instead of an concrete implementation . As fallback we get an instance of the service and return the type
9537	Collect transactions and compose daily balances updates .
9538	Extract existing balance on the date or create new empty entity .
9539	Retrieves hierarchical list of the class ancestors .
9540	Change header content type
9541	Parser for headers
9542	Convert dotted string to a nested array . Append the value to the last nested array .
9543	Builds nested array with the specified keys .
9544	Validate given asset type or get all types .
9545	Validate balances for one asset type .
9546	Get datestamp for the last day of available balances .
9547	Parse the response of the provider
9548	Checks if mutator exists and returns the mutated value .
9549	Let the client fetch the given url as image .
9550	Retrieve the imaginary url .
9551	Generates the copy from the sheets . Language files and JSON for storage .
9552	Parse provided csv document .
9553	Append sheet array by locale . If array is provided append the sheets to the same locale .
9554	Save backup strings in JSON format
9555	Get all accounts by asset type code .
9556	Get asset type ID for the given account .
9557	Get account data by customer ID & asset type code .
9558	Return MageID for customer that represents store owner in accounting . Create new system customer if it is not exist yet .
9559	Add new transaction and update current balances .
9560	Converts the key id and secret in the keys suitable for every strategy
9561	Parse response of the Opauth object
9562	Call the provider for the authentication
9563	render Renders the view using the given data
9564	Get all asset types .
9565	Send the server response .
9566	Set token with the response data
9567	Verify the api token from request .
9568	Provided url must be a valid google doc url .
9569	Register the Client singleton .
9570	Register the Token singleton .
9571	Register for console .
9572	Initialize the session if none exists .
9573	Returns a static property value as an array extended by a similar values provided by parent classes .
9574	Set the status .
9575	Get tokens as tree
9576	Find all tokens in code
9577	Find end of quoted string
9578	Find end of url
9579	Check for valid css rule return either code or rule token
9580	Merge words list to string
9581	Get token with selectors list
9582	Get list of selectors from list of words
9583	Convert to tree
9584	Set the current app key for the request .
9585	Get the app key of the current api client .
9586	Add JSON type to the Accept header for the request .
9587	Get base query to select maximal date for existing balances by asset type or account IDs . Add appropriate where clauses after build .
9588	Does the actual unpublishing called from cron
9589	Saves the unpublish settings and sets up scheduled task
9590	Check if current post type is activated in settings
9591	Generate an api token .
9592	Generate an api token for the given app key .
9593	Verify an api token .
9594	Generate HTTP headers with a new token .
9595	Generate query data with a new token .
9596	Return ID of the system customer .
9597	Fit the image when resizing it .
9598	Get the string representation of all manipulations that need to be executed on the given resource .
9599	Create transaction and update balances in account table .
9600	Fill object values via array .
9601	Returns the URI with the given start and stop component .
9602	Set the user info .
9603	Set the port .
9604	Set the path .
9605	Returns the segment at the given index or null if the segment at the given index doesn t exists .
9606	Returns the value to which the specified key is mapped or null if the query map contains no mapping for the key .
9607	Convert list of tokens to string
9608	Return an aggregate value of given property .
9609	Get the configuration of the strategy
9610	Build the configuration params for the Opauth library
9611	Perform DB to API data conversion directly .
9612	Get account data or create new account if customer has no account for the requested asset .
9613	Add operation with list of transactions and change account balances .
9614	Extract IDs from sessions if both are empty .
9615	Validate transactions .
9616	Set the headers .
9617	Set the header .
9618	Add the header .
9619	Remove the header .
9620	Register a prefix
9621	Register a prefix = > paths map
9622	Find a file for the given class name
9623	Try locating the given path using all registered suffixes
9624	Convert an object to array .
9625	Clean the given array .
9626	Set the api result code .
9627	Initialize the URI .
9628	Initialize the headers .
9629	Initialize the uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Checks if a content type header exists with the given content type .
9633	Generate our own files .
9634	Invokes the correct command
9635	Prints the given data in a table
9636	Prints the given error to the console
9637	Displays this message
9638	Returns the available commands
9639	Build the directory for the class if necessary .
9640	Append to a file a particular stub .
9641	Open haystack find and replace needles save haystack .
9642	Dispatch the given request URI
9643	Fill the template with the contents
9644	Returns the Page object for the current URI
9645	Returns the response for the current page URI
9646	Returns the response for the page URI or NULL if no data was found
9647	Returns the Page for the page URI or NULL if no data was found
9648	Returns the alias for the given URI or the original URI if no alias is defined
9649	Displays a single I18nMessage model .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Add IDs to headlines
9652	Invokes the dispatcher
9653	Invokes the CLI dispatcher
9654	Register any package services .
9655	Returns a Markdown Parser instance
9656	Get the path to the blade files .
9657	Get the path to the migrations location .
9658	Find the page with tie given identifier
9659	Returns the page file name for the given page identifier
9660	Returns the meta data for the given page identifier
9661	Returns all available page names
9662	Returns all available pages for the given path
9663	Show success message and run composer dump - autoload .
9664	Loads the messages from database .
9665	Sends activation mail .
9666	Perform a fuzzy string searching .
9667	Renders the template
9668	Renders the given expression
9669	Returns the assigned variable value
9670	Find Classes in Bundles
9671	Prepare the configuration values
9672	Returns the sanitized hostname
9673	Returns the configuration
9674	Displays a single I18nTranslation model .
9675	Updates an existing I18nTranslation model . If update is successful the browser will be redirected to the view page .
9676	Deletes an existing I18nTranslation model . If deletion is successful the browser will be redirected to the index page .
9677	Finds the I18nTranslation model based on its primary key value . If the model is not found a 404 HTTP exception will be thrown .
9678	Lists all pages
9679	Returns the parsed content
9680	Returns the sorting position in a menu
9681	Returns the URI of the page
9682	Returns the URL read from the meta data or NULL if it is not set
9683	Returns the pages title
9684	Send a GET request .
9685	Build the request url .
9686	Handle the response .
9687	Initializes the shared configuration
9688	Show the processing time
9689	Returns the template
9690	Returns the value for the key path of the given object
9691	Set Root Directory
9692	Find Class Reflections
9693	Get Class Reflection Instance
9694	Uploads the file if success returns json array for media data
9695	Upload to file and insert into media table
9696	Round down to the nearest 15 minutes As a special case round the first period down to 0 .
9697	return the new serialized model with only needed fields to update
9698	Register a net entity in the UnitOfWork storage
9699	Compare serialize object and returns only modified fields
9700	add defined identifiers to given model
9701	get entity id from string or array
9702	Returns list of tags from model
9703	Obtains an object class name without namespaces
9704	Configure the tab element factory .
9705	Before deletion remove media file from source and also delete from relation table
9706	Create title for media
9707	Renders PDF File
9708	Renders all supported image files
9709	convert data as array to entity
9710	convert API response to Collection containing entities
9711	convert list of data as array to Collection containing entities
9712	convert array to entity
9713	guess collection classname according to response data
9714	Build and cache a site map .
9715	Get a navigation .
9716	Get the iterator .
9717	Normalizes the user - entered tags .
9718	return the value of an extra property
9719	Creates random string default lenght is 8
9720	Helper function to limit the words in a string
9721	Helper function to recusively get all files in a directory
9722	Strip tags and limit description
9723	Check if given time slots overlap
9724	Create an array of non overlapped time slots
9725	Merge all overlapped time slots into single time slot
9726	get a path
9727	Merge default parameters .
9728	Executes request .
9729	Render the backend view .
9730	Get the tab navigation iterator .
9731	Get the grid iterator .
9732	Parsing BB - codes before save of model .
9733	Parsing of BB - codes .
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	If content id and type provided then do join return boolean
9736	Uploads the file and update database
9737	Update data information of media
9738	Returns list of media in json format
9739	Get data about requested media and return as row
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the index page .
9741	Setter for attributeList
9742	return default serialize model with null value or empty array on relations
9743	Create the directories for the files .
9744	Export the views .
9745	Export the controllers .
9746	Export the routes .
9747	Check all required packages
9748	Copy jQuery plugins folder from AdminLTE package
9749	Copy Less and Js files
9750	Copy Less folders
9751	Returns settings grouped by categories
9752	Create instance from a serialized definition
9753	Create nav item from an array definition .
9754	finds and return content of requested block by name
9755	Gets the module
9756	serialize entity for POST and PUT
9757	return a model class name for a given key
9758	getClassMetadata for model name
9759	getClassMetadata for id
9760	Returns hierarchical data of pages
9761	Returns the given pages as a branch .
9762	remove from cache
9763	Returns array of tags by tag type
9764	Returns tag names and their corresponding weights . Only the tags with the top weights will be returned .
9765	Update count of tags already exists if tag does not exists insert it
9766	Decrement frequency if less then or equal to zero then delete row
9767	Get all tab parent options .
9768	Generate the columns .
9769	Count the required separator fields which should be created .
9770	Create separators .
9771	Create the stop element .
9772	Create a tab element .
9773	Get related stop element .
9774	Add an image to each record
9775	Return basic select options for the record .
9776	Returns lists of status available
9777	Returns types available
9778	Returns type label
9779	return array of listing order
9780	Find and replace text Accepts find as string or array
9781	Get the nex item .
9782	Get the title of the current item .
9783	Generates code for active field
9784	Register a new resource .
9785	Get resource by given name or create a new one .
9786	Call a resource controller and action .
9787	Create a new dispatch .
9788	Resolve dispatcher dependencies .
9789	Find nested parameters from route .
9790	Find route action and parameters content attributes from either restful or resources routing .
9791	Resolve action from restful controller .
9792	Resolve action from resource controller .
9793	Get action name .
9794	Dispatch the resource .
9795	Display Pickup List
9796	Retrieve Shipping Method Calculator
9797	Retrieve Shipping Method
9798	Map a child resource attributes .
9799	Build resource schema .
9800	Update Shipping Address on cart summary
9801	Call the given controller instance method .
9802	Handle Illuminate \ Http \ Response content .
9803	Handle response callback .
9804	Handle abort response .
9805	Is response none html .
9806	Setup for actions and options
9807	Get options from public Action properties
9808	Removes the item from the pool .
9809	Persists a cache item immediately .
9810	Formats a message as a block of text .
9811	Fetches a value from the cache .
9812	Persists data in the cache uniquely referenced by a key with an optional expiration TTL time .
9813	Persists a set of key = > value pairs in the cache with an optional TTL .
9814	Deletes multiple cache items in a single operation .
9815	Determines whether an item is present in the cache .
9816	Generates label s HTML element .
9817	Get all category name
9818	Get tree structures
9819	Emulate terminal typing
9820	Apply the commonly used REST path members to the class .
9821	PSR - 4
9822	Sets the AWS account id .
9823	Translates AWS SNS Exceptions to DF Exceptions If not an AWS SNS Exception then null is returned .
9824	Gets the console application .
9825	Executes the command . Connects with the PayPro API and returns the response .
9826	Return the names and values of all the constants in the enum
9827	List all containers just names if noted
9828	Update a container with some properties
9829	Check if a blob exists
9830	Generate JWT Token using private key
9831	Decode JWT Token using public key
9832	Extract payload of jwt token without validations
9833	Verify the number of segments to assert a valid token
9834	Verify expiration contraint and return the timestamp of expiration date . If null will return null too and token will never expire
9835	Builds a SQL statement for creating a new index .
9836	Extracts the default value for the column . The value is typecasted to correct PHP type .
9837	Add previous button
9838	Add next button
9839	Get page button value
9840	Method which reveals the true value of an object if it has a known interface . Note this resolves also all Traversable instances to an array
9841	Checks whether a value is an object type
9842	Checks whether a value is empty
9843	Transforms an arbitrary data structure into a record graph
9844	Parse the transaction response
9845	Returns a DatagridConfigurator by name .
9846	Returns whether the given DatagridConfigurator is supported .
9847	Returns a writer class by the class short name
9848	Returns the fitting writer according to the content negotiation . If no fitting writer could be found null gets returned
9849	Transforms a normalized date into a localized date string .
9850	Initialize the datagrid view .
9851	Tries to read the provided payload with a fitting reader . The reader depends on the content type of the payload or on the reader type if explicit specified . Then we validate the data according to the provided schema
9852	Parses the payload and returns the data in a normalized format
9853	Writes the payload with a fitting writer and returns the result as string . The writer depends on the content type of the payload or on the writer type if explicit specified
9854	Returns a fitting reader for the given content type or throws an unsupported media exception . It is also possible to explicit select a reader by providing the class name as reader type .
9855	Returns a fitting writer for the given content type or throws an not acceptable exception . It is also possible to explicit select a writer by providing the class name as writer type .
9856	Before hook .
9857	After hook .
9858	After step hook .
9859	Initialize the Laravel framework .
9860	Boot the Laravel application object .
9861	Opens web page using route name and parameters .
9862	Opens web page by action name
9863	Normalize an action to full namespaced action .
9864	Checks that current url matches route
9865	Checks that current url matches action
9866	Assert that the session has a given list of values .
9867	Assert that the form errors are bound to the View .
9868	Assert that specific form error message is set in the view .
9869	Set the currently logged in user for the application . Takes either an object that implements the User interface or an array of credentials .
9870	Inserts record into the database .
9871	Transforms a number type into localized number .
9872	Returns a preconfigured \ NumberFormatter instance .
9873	Converts a flat array into a nested object using a seperator
9874	Converts a nested array into a flat using a seperator . The prefix and result parameter are used internally for performance reason and should not be used
9875	Replaces all associative arrays with stdClass in an arbitrary array structure
9876	Returns a new ColumnInterface instance .
9877	Configures a header view for the type hierarchy .
9878	Configures a cell view for the type hierarchy .
9879	Creates a new Column instance .
9880	Determines whether this type is a compound .
9881	Get the gateway base data
9882	Get the shipping data
9883	Get the invoice data
9884	Send the request
9885	Returns the trimmed data .
9886	Converts a fully - qualified class name to a block prefix .
9887	Transforms a normalized format into a localized money string .
9888	In XML we have now information about the data type but in the jsonschema we require a specific type . This method tries to guess the correct type
9889	Add a column to the builder .
9890	Checks whether the file upload is valid
9891	Create filename query signature . Attention this method work only for resources located in public directory .
9892	Updtes the edit form based on whether it is being edited or not
9893	Extension hook for LeftAndMain subclasses
9894	Extension hook for GridFieldDetailForm_ItemRequest
9895	Handles ajax pings to create a RecordBeingEdited lock or update an existing one
9896	a URI or a URI and JWT authentication information .
9897	specified channel for all of the configured PubControlClient instances .
9898	load lang .
9899	Send verification request
9900	Apply parse_url parts to a URI .
9901	Store a newly created User in storage .
9902	Show the form for editing the specified User .
9903	Update the specified User in storage .
9904	Remove the specified User from storage .
9905	Create new mPDF instance .
9906	Build host .
9907	Build guzzle request based on Guzzle client version .
9908	Execute callable chain and return callable result .
9909	Check if class available
9910	is provided in the request queue .
9911	the consumer makes an asynchronous publish call .
9912	the queue .
9913	request was successfully published .
9914	Returns key by given cursor position .
9915	Set the internal cursor to the first value in the array of data .
9916	an error will be raised .
9917	Set one or more configuration properties
9918	header and a list of items to publish .
9919	message with the specified URI headers and content .
9920	specified channel on the configured endpoint .
9921	PSR - 7 interfaces support multiple headers per type whereas SilverStripe classes do not .
9922	Get the protocol version - either from a previously set value or from the server
9923	valid data .
9924	load translate .
9925	set local of validation errors message .
9926	Get validation errors .
9927	it with the specified num_calls and callback values .
9928	Generates the edit lock warning message displayed to the user
9929	Checks to see if the current user can and has elected to edit the record anyway
9930	Check if the given offset exists in the set of data .
9931	Provide a callback to use for sorting the data .
9932	Parse the birthday
9933	Return the birthday in given format
9934	Validate birthday if it is valid then return the birth year month and day
9935	Parse constellation by the given month and day
9936	Translate the constellation
9937	Response when ACL is updated .
9938	Response when sync roles succeed .
9939	on roles list
9940	on create or edit role
9941	on user create or edit
9942	On area create
9943	Form View Generator for Antares \ Model \ User .
9944	Create a handler .
9945	Find one object by a set of criteria or create a new one .
9946	Get a new managed object instance .
9947	Get object factory .
9948	Remove object filtered by a set of criteria .
9949	Remove first object filtered by a set of criteria .
9950	Remove objects .
9951	Refresh objects .
9952	Detach objects .
9953	Get supported magic method .
9954	Internal method call .
9955	Run manager action .
9956	Flush managed objects .
9957	Prepare collection tag from bits of information .
9958	Set pagination configuration .
9959	Set current page .
9960	Update the permission in storage .
9961	Get configured paginator .
9962	Return paginated elements filtered by criteria or throw an exception if none found .
9963	Boot extension components .
9964	booting acl memory
9965	Load Package Components
9966	Add new Validation Types
9967	Prepare before the Model is actually saved
9968	Performs validation on the model and return whether it passed or failed
9969	Merges saving validation rules in with create and update rules to allow rules to differ on create and update .
9970	Purges unneeded fields by getting rid of all attributes ending in _confirmation or starting with _
9971	Auto - hashes the password parameter if it exists
9972	Disable all filters .
9973	Disable filter .
9974	Restore all disabled filters .
9975	Restore disabled filter .
9976	prepare datatable row actions
9977	Assign Role to User
9978	Checks whether a status code can be considered successful .
9979	Returns current controller template name .
9980	View form generator for Antares \ Model \ Role .
9981	edit action presenter
9982	View create user page .
9983	View edit user page .
9984	Store a user .
9985	Update a user .
9986	Destroy a user .
9987	Save the user .
9988	Is this path within the given path?
9989	Return registered type .
9990	Return collection etag .
9991	Return timestamp field name .
9992	Return timestamp hash .
9993	Run the query and return DB result .
9994	Return ID - s of matching records .
9995	Return number of records that match conditions set by the collection .
9996	Return model table name .
9997	Return order by .
9998	Set how system should order records in this collection .
9999	Return conditions .
10000	Set collection conditions .
10001	Set join table name .
10002	List ACL collection .
10003	Update ACL metric .
10004	Sets logger for daemon .
10005	Starts daemon .
10006	Stops daemon .
10007	Kills daemon .
10008	Set finder .
10009	Return where part of the query .
10010	Return number of records that match the given criteria .
10011	Return first record that matches the given criteria .
10012	Return array of ID - s that match the given criteria .
10013	Prepare SQL and load one or more records .
10014	Check if we should load by type field or by type class .
10015	Construct SELECT query for the given fields based on set criteria .
10016	fetch modules list
10017	find smashed resource
10018	Define all permission and make usable from laravel application
10019	Assign Role to user
10020	Remove Role from user
10021	View create a role page .
10022	View edit a role page .
10023	Store a role .
10024	Update a role .
10025	Delete a role .
10026	Save the role .
10027	import permissions when copy
10028	Acl rules form
10029	Clear analytics data
10030	Clear message data
10031	make resource instance of left pane
10032	Show the form for editing the specified resource .
10033	Scopes roles by configuration
10034	Creates select for statuses
10035	Get actions column for table builder .
10036	Get user roles column for table builder .
10037	Update an instance .
10038	Return producer for registered type .
10039	Register producer instance for the given type .
10040	Register producerby providing a producer class name .
10041	Return object from object pool by the given type and ID ; if object is not found return NULL .
10042	Return object from object pool by the given type and ID ; if object is not found raise an exception .
10043	Add object to the object pool .
10044	Add object to the pool .
10045	Return number of records of the given type that match the given conditions .
10046	Find records by type .
10047	Return select by ID - s query for the given type .
10048	Return a list of escaped field names for the given type .
10049	Return escaped list of fields that we can order by .
10050	Return trait names by object .
10051	Recursively get trait names for the given class .
10052	adaptee controls on form instance
10053	verify whether checkbox should be checked
10054	Makes OXID eShop page entity .
10055	Sets login event for tracking .
10056	Sets email for tracking .
10057	Get a site path object if the URL is within the Elgg site or false if not .
10058	Analyze a URL .
10059	Builds basket product category path .
10060	Return true if field values match .
10061	Load data from database row .
10062	Create a copy of this object and optionally save it .
10063	Revert field to old value .
10064	Return all field value .
10065	Set specific field value .
10066	Insert record in the database .
10067	Update database record .
10068	Return an array with potentially refreshed values of generated fields .
10069	Validate field value by comparing it to a reference value using a closure .
10070	Generate a URI from the named route .
10071	Response when storing user succeed .
10072	Return field errors .
10073	Check if a specific field has reported errors .
10074	Add error to array .
10075	Returns formatted product title .
10076	Sets message if it was sent .
10077	Sets if newsletter have been subscribed .
10078	Sets user registration action to an object .
10079	Disable event subscriber .
10080	Restore disabled event subscribers .
10081	Disable all listeners for an event .
10082	Disable listener for an event .
10083	Restore all disabled listeners .
10084	Restore disabled listeners for an event .
10085	Get subscriber class name .
10086	Is an event subscriber .
10087	Get event listeners .
10088	Hashes active user ID and returns it .
10089	Hashes active user email and returns it .
10090	Generate cache key . Optionally you can pass a class name as the first parameter and if this class will contain constant named VERSION than it will be mixed up with the result key .
10091	Generate cache keys . The last parameter must be an array
10092	Sends a get request and recieves results
10093	Check if property exists
10094	Get a value
10095	Navigate through the item and get the value
10096	Set a value
10097	Set a value creating the structure if required
10098	Navigate through the item and set the value
10099	Get a particular value back from the config array
10100	Navigate through the item and remove the value
10101	Creates the logger functionality in Helper
10102	Boot the application events .
10103	Set mail config
10104	Checks if the key is set returns it if true
10105	Converts a value to its php representation .
10106	Get the page size for pagination
10107	Register the Capsule service .
10108	Validates the user input data
10109	Get things started .
10110	Hook into WordPress .
10111	Load script to dismiss notices .
10112	Display all the notices .
10113	Register a notice .
10114	Dismiss a notice via ajax .
10115	Dismiss notice into the database .
10116	Dismiss notice for an user .
10117	Dismiss a global notice .
10118	Restore a notice previously dismissed .
10119	Restore a notice for the current user .
10120	Restore a globally dismissed notice .
10121	Get list of dismissed notices .
10122	Check if a notice is dismissed .
10123	Get a registered notice .
10124	Refine a single item using the supplied callback .
10125	Refine a collection of raw items .
10126	Return any required attachments . Check if the attachment needs to be filtered if so they run the callback and then return the attachments .
10127	Get the items to be refined from the raw object .
10128	Set the attachments you want to bring with the refined items .
10129	Get the classes needed for each attachment .
10130	Check the attachment method exists on the class being attached if it does then run the method .
10131	Set the class to be used for the attachment .
10132	Merge a set of data into another .
10133	Returns the headers from a response
10134	Get Card Reference
10135	Get Customer Reference
10136	Strip the namespace from a given class or object and get only the class name .
10137	Get the namespace from a given class or object .
10138	Finds an adder method for the given object . Thanks to the alice library for this code snippet .
10139	Initialize the mappings from the class metadata . The mapping will be split in field mappings and association mappings .
10140	Sets data used for translations
10141	Reads a property from an object .
10142	Displays the first install screen .
10143	This method is called before the operation be executed the changes made in Record will be save
10144	Triggered after operation be executed the changes made in Record has no effect in storage
10145	Extend collection with entities from another one
10146	Append entities to collection
10147	Prepand entity to the begining of collection
10148	Returns isset on entity property when collection has only one element
10149	Returns last entity from collection
10150	Returns element moved by offset from the current key
10151	Checks if collection has entity with field equals to given value
10152	Search for an element with given property and value
10153	Shift an entity off the begining of collection
10154	Filter collection from entities not matching criteria given in callback
10155	Get collection of entities matching criteria given in callback
10156	Splits collection into chunks
10157	Extract a slice of the collection
10158	Returns collection of collections created by spliting first Collection to a parts
10159	Unset values from an offset or offsets
10160	Eliminates entities that contains the same value in given property
10161	Return an collection with elements in reverse order
10162	Return values from all entities from given property
10163	Bind two collections
10164	Group entities inside collection to sepearate Collections
10165	Parse scope configuration passed as a second argument for applyScopes method
10166	Parse scope arguments from request parameters
10167	Typecast a variable
10168	Registers a set of annotation - based entities .
10169	convert path to namespaced classname
10170	Prepare data for insert
10171	Update data and cache
10172	Parse the filters of fields
10173	Parse the values of the fields
10174	convert array to object
10175	Returns the label for the menu item .
10176	Returns the one of additionnal style
10177	Returns the list of additionnal style
10178	Returns the absolute URL with parameters if required .
10179	convert object to array
10180	Configure the instance with reference properties
10181	Parse the connection name and choose a source to it
10182	Allow use this field like readonly in read filtering and getting it in record
10183	convert namespaced classname to path
10184	Fire the job .
10185	Delete the job from the queue .
10186	Returns the ORM metadata descriptor for a class .
10187	Flushes all changes to objects that have been queued up to now to the database . This effectively synchronizes the in - memory state of managed objects with the database .
10188	Finds an Entity by its identifier .
10189	Clears the EntityManager . All entities that are currently managed by this EntityManager become detached .
10190	Removes an entity instance .
10191	Refreshes the persistent state of an entity from the database overriding any local changes that have not yet been persisted .
10192	Gets the repository for an entity class .
10193	Determines whether an entity instance is managed in this EntityManager .
10194	Factory method to create EntityManager instances .
10195	Xcdr Soap Webservice method .
10196	Perform merge on associative array
10197	Function to perform merge . Do not call it directly .
10198	Handles the addition of lines .
10199	Handles removal or modification of lines
10200	Parse and save wsapi cdr record .
10201	Register a number of WordPress globals in the container .
10202	applies config options to expected vars
10203	collect vars and sets them to the DIC
10204	Pop the next job off of the queue .
10205	Insert a job record into database .
10206	Cisco IOS XCDRProvider Set Attribute Request
10207	convert string to camelcase
10208	Method with the responsibility of create a record of model
10209	Read records with the filters informed
10210	Update the record given
10211	Remove the given record of database
10212	Recycle a destroyed record
10213	Get total of records based on filters
10214	Get a proxy object for a given container entry .
10215	closes all remaining logger instances
10216	Load and register widgets
10217	Load end register theme options
10218	Xml RPC events
10219	Add a child element
10220	Store a newly created Permission in storage .
10221	Show the form for editing the specified Permission .
10222	Update the specified Permission in storage .
10223	Remove the specified Permission from storage .
10224	Sets the \ ManiaLivePlugins \ Standard \ TeamSpeak \ TeamSpeak3 \ Adapter \ AbstractAdapter object using this transport .
10225	Returns the adapter type .
10226	Blocks a stream until data is available for reading if the stream is connected in non - blocking mode .
10227	Search channels .
10228	Search games .
10229	Parameter return as array .
10230	Parameter return as object .
10231	Parameter return as JSON .
10232	Parameter return as string .
10233	Parameter return as integer .
10234	Parameter return as float .
10235	Parameter return as boolean .
10236	Generates an hydrator class
10237	Find all class properties recursively using class hierarchy without removing name redefinitions
10238	Generate code for the hydrator constructor
10239	Generate code for the hydrate method
10240	Calculates differences between
10241	Checks and creates if necessary and possible folder to store and local composer . json
10242	Find a single child by attribute
10243	Find all children by attribute
10244	Finds a single child by option .
10245	Finds all children by option .
10246	Register the specified binding into the container
10247	Register the view parser
10248	Register the WxWidgets launcher
10249	Returns the Driver instance from the configuration .
10250	Create invalid result .
10251	Starts a timer .
10252	Subscribes to a signal and returns the signal handler .
10253	Unsubscribes from a signal .
10254	Get pretty value by type
10255	Sets the key of a column .
10256	Returns the list of columns based on a query .
10257	Sets the properties of a column .
10258	Strips the table schema from the table name .
10259	Selects a virtual server by ID to allow further interaction .
10260	Selects a virtual server by UDP port to allow further interaction .
10261	Returns the port of a virtual server matching the given ID .
10262	Returns the first TeamSpeak3_Node_Server object matching the given name .
10263	Returns the first TeamSpeak3_Node_Server object matching the given unique identifier .
10264	Creates a new virtual server using given properties and returns an assoc array containing the new ID and initial admin token .
10265	Deletes the virtual server specified by ID .
10266	Starts the virtual server specified by ID .
10267	Stops the entire TeamSpeak 3 Server instance by shutting down the process .
10268	Returns a list of permissions available on the server instance .
10269	Returns the IDs of all clients channels or groups using the permission with the specified ID .
10270	Returns the ID of the permission matching the given name .
10271	Returns the name of the permission matching the given ID .
10272	Returns the internal category of the permission matching the given ID .
10273	Returns an array containing the value of a specified permission for your own client .
10274	Writes a custom entry into the server instance log .
10275	Authenticates with the TeamSpeak 3 Server instance using given ServerQuery login credentials .
10276	Deselects the active virtual server and logs out from the server instance .
10277	Sets a single value in the current ServerQuery connection info .
10278	Get validator for name .
10279	Sets the CURL content from request .
10280	Parses the CURL result into a PageFetcherResponse .
10281	Returns array of module configuration that should be stored in application config . Array should be ready to merge in app config . Used both for web and console .
10282	Get a option constant from its name
10283	Build the options constant using the bitwise operator
10284	User API callback
10285	Ping Securepass API
10286	Set the an element attribute
10287	Returns a rounded string with the currency symbol
10288	Returns a rounded number without currency If the number is negative the currency is within parentheses
10289	Returns the amount rounded to the correct number of decimal places for that currency
10290	Pass in an array of percentages to allocate Money in those amounts . Final entry in array gets any remaining units . If the percentages total less than 100 remaining money is allocated to an extra return value .
10291	Takes a list of element specifications creates the elements and injects them into the provided fieldset
10292	Get authenticated user .
10293	Make happen ...
10294	Search for valide router
10295	Get the request method used taking overrides into account
10296	Abraham Lincoln lived in a log cabin
10297	Returns a Javascript formatted name from a database formatted one hello_world = > helloWorld
10298	Converts bytes to a human readable value .
10299	Converts a given codec ID to a human readable name .
10300	Converts a given group type ID to a human readable name .
10301	Converts a given permission type ID to a human readable name .
10302	Converts a given log level ID to a human readable name and vice versa .
10303	Converts a specified log entry string into an array containing the data .
10304	Custom filtering on Status
10305	Get all traits that uses for model
10306	Call a trait method and return a result or null in not exists . This method builds a full method name checks it and calls if exists .
10307	Call trait event methods .
10308	Get all attribute labels . This method merges a model attributeLabels with attribute labels of all used traits .
10309	Get all attribute hints . This method merges a model attributeHints with attribute hints of all used traits .
10310	Returns a multi - dimensional array containing the reply splitted in multiple rows and columns .
10311	Parses a ServerQuery error and throws a TeamSpeak3_Adapter_ServerQuery_Exception object if there s an error .
10312	Parses a ServerQuery reply and creates a \ ManiaLivePlugins \ Standard \ TeamSpeak \ TeamSpeak3 \ Helper \ String object .
10313	Returns the authenticated identity or null if no identity is available
10314	Returns true if and only if an identity is available
10315	Restore a record after soft deleting .
10316	Get user .
10317	Get user followed games .
10318	Gets any notices relevant to the present time context and current users
10319	Get channel .
10320	Escapes a string using the TeamSpeak 3 escape patterns .
10321	Unescapes a string using the TeamSpeak 3 escape patterns .
10322	Get team .
10323	Add result to container .
10324	Get stream .
10325	Get streams .
10326	Get featured streams .
10327	Get authenticated user streams .
10328	Get streams summary .
10329	Get gameList games .
10330	Get the value of the text box
10331	Queries the TSDNS server for a specified virtual hostname and returns the result .
10332	Returns configurables sections . Loads them from files if not loaded .
10333	Sends a text message to the client .
10334	Kicks the client from his currently joined channel or from the server .
10335	Downloads and returns the clients avatar file content .
10336	Bind this elements events to the wxPHP event handler
10337	Connect the event to the top - level window
10338	Returns a single variable from the query string .
10339	Returns the applications base address .
10340	Sends a prepared command to the server and returns the result .
10341	Waits for the server to send a notification message and returns the result .
10342	Uses given parameters and returns a prepared ServerQuery command .
10343	Returns the TeamSpeak3_Node_Host object of the current connection .
10344	Lists installed extensions
10345	Writes updated extensions file
10346	Set the parent element
10347	Returns an array of Column instances from a table .
10348	Returns a transcoder instance .
10349	Gets array item by case - insensitive key .
10350	Sets array item by case - insensitive key .
10351	Gets any notices relevant to the present time and current users
10352	Shows installed extensions
10353	Process API requests to github and packagist
10354	Common method to access from web via ajax requests . Builds a ReportingChain and immediately fires it .
10355	Adds deactivation task into ReportingChain if Extension is active
10356	Adds activation task into ReportingChain if Extension is not active
10357	Adds uninstall task into ReportingChain
10358	Runs separated ReportingTask
10359	Returns the TeamSpeak3_Node_Client object matching the given name .
10360	Downloads and returns the channels icon file content .
10361	Sends a text message to all clients in the channel .
10362	Deletes the channel .
10363	Converts and signs a PHP object or array into a JWT string .
10364	Sign a string with a given key and algorithm .
10365	Decode a JSON string into a PHP object .
10366	Writes all configuration to application configuration file
10367	Bootstrap method to be called during application bootstrap stage .
10368	Creates a copy of the channel group and returns the new groups ID .
10369	Sends a text message to all clients residing in the channel group on the virtual server .
10370	Get Form class name for this controller
10371	Get a Product entity
10372	Get all Product entities .
10373	Create a Product entity .
10374	Update a Product entity .
10375	Delete a Product entity .
10376	Reads entire file into a string .
10377	Converts JSON encoded string into a PHP variable .
10378	Read and decode a JSON file .
10379	Normalize an ID
10380	Cleans array of attributes based on valid input .
10381	Set the label value
10382	Add an element to the collection
10383	Get the top - level window element
10384	Remove the element from the collection
10385	Get an element by its ID
10386	Loads state from file
10387	Saves state to file
10388	Sets the data type .
10389	and no event is launched when needed join power is modified ...
10390	Fetching localized data from defined field according to package current version
10391	Fetching localized data from defined field from for example installed . json file data who has no versions array inside
10392	Fetching data from defined field according to package current version
10393	Fetching data from defined field from for example installed . json file data who has no versions array inside
10394	Humanizes github Readme . md file content We adopt github retrieves Readme . md as json string where content field contains base64 encoded markdown
10395	Prepares migration command
10396	Builds ReportingTask and places it into certain group . Also if group is not exists yet it will be created with necessary parameters such as group_notifications = 0 .
10397	Match if URL matches a route definition .
10398	Regex parser for named routes .
10399	Check strictness .
10400	Returns the profiler timer used for this connection adapter .
10401	Loads the transport object object used for the connection adapter and passes a given set of options .
10402	Get default attributes for Blameable behavior . If you need to set a custom attributes just add a blameableAttributes field to your model .
10403	Get default attributes for Timestamp behavior . If you need to set a custom attributes just add a timestampAttributes field to your model .
10404	Evaluates the attribute value and assigns it to the current attributes .
10405	Init a trait . There is an event attaching here .
10406	before_request Hook for PHP Requests
10407	after_request Hook for PHP Requests
10408	Reads data from the stream .
10409	Writes data to the stream .
10410	Restore from the file dump
10411	Creating a dump
10412	initializes the menu for a specific plugin
10413	adds button for the plugin .
10414	Fire the install command
10415	Go through each column and find the largest value of that field
10416	Go through each column and find the lowest value of that field
10417	Transform Json to Associative Array .
10418	Register ORM on Application
10419	Sets a file to upload .
10420	Sets a post field .
10421	Sets the raw content .
10422	Instantiate a concrete instance of the given type .
10423	Bind an abstract definition to a concrete implementation .
10424	Get the concrete type for a given abstract .
10425	Relay events to all listeners .
10426	Returns the possible type of a channel spacer .
10427	Returns the possible alignment of a channel spacer .
10428	Adds a set of specified permissions to a channel . Multiple permissions can be added by providing the two parameters of each permission .
10429	Removes a set of specified permissions from a channel . Multiple permissions can be removed at once .
10430	Adds a set of specified permissions to a client in a specific channel . Multiple permissions can be added by providing the two parameters of each permission .
10431	Removes a set of specified permissions from a client in a specific channel . Multiple permissions can be removed at once .
10432	Returns a list of files and directories stored in the specified channels file repository .
10433	Returns the TeamSpeak3_Node_Client object matching the given ID .
10434	Returns the TeamSpeak3_Node_Client object matching the given unique identifier .
10435	Moves a client to another channel .
10436	Kicks one or more clients from their currently joined channel or from the server .
10437	Removes a set of specified permissions from a client . Multiple permissions can be removed at once .
10438	Returns the TeamSpeak3_Node_Servergroup object matching the given ID .
10439	Returns the TeamSpeak3_Node_Servergroup object matching the given name .
10440	Adds a set of specified permissions to the server group specified . Multiple permissions can be added by providing the four parameters of each permission in separate arrays .
10441	Returns an ordered array of regular server groups available based on a pre - defined set of rules .
10442	Returns the TeamSpeak3_Node_Channelgroup object matching the given ID .
10443	Returns the TeamSpeak3_Node_Channelgroup object matching the given name .
10444	Adds a set of specified permissions to the channel group specified . Multiple permissions can be added by providing the two parameters of each permission in separate arrays .
10445	Restores the default permission settings on the virtual server and returns a new initial administrator privilege key .
10446	Uploads a given icon file content to the server and returns the ID of the icon .
10447	Creates and returns snapshot data for the selected virtual server .
10448	Returns a specified number of entries from the servers log .
10449	Writes a custom entry into the virtual server log .
10450	Internal callback funtion for sorting of client objects .
10451	Internal callback funtion for sorting of group objects .
10452	Internal callback funtion for sorting of file list items .
10453	Creates a copy of the server group and returns the new groups ID .
10454	Returns the internal path of the node icon .
10455	Returns a possible classname for the node which can be used as a HTML property .
10456	Returns the HTML code to display a TeamSpeak 3 viewer .
10457	Filters given node list array using specified filter rules .
10458	Write PHP file
10459	Retrieves the generated hydrator FQCN
10460	Connects to a remote server .
10461	Disconnects from a remote server .
10462	Reads a single line of data from the stream .
10463	Can the factory create an instance for the service?
10464	Store a newly created Role in storage .
10465	Update the specified Role in storage .
10466	Remove the specified Role from storage .
10467	Get resource .
10468	Returns a string for the current corpus element which can be used as a HTML class property . If the current node is a channel spacer the class string will contain additional class names to allow further customization of the content via CSS .
10469	Returns a HTML img tag which can be used to display the status icon for a TeamSpeak_Node_Abstract object .
10470	Returns a string for the current corpus element which contains the display name for the current TeamSpeak_Node_Abstract object .
10471	Returns a HTML img tag which can be used to display the country flag for a TeamSpeak_Node_Client object .
10472	Sends a valid file transfer key to the server to initialize the file transfer .
10473	Sends the content of a file to the server .
10474	Returns the content of a downloaded file as a \ ManiaLivePlugins \ Standard \ TeamSpeak \ TeamSpeak3 \ Helper \ String object .
10475	Get the SessionContext object
10476	Get the TypeManager object
10477	Get the database connection object
10478	Remove database connection by name
10479	Process Security Filters
10480	Dispatches client requests to proper objects print the returned html text .
10481	Get the parameter from the url
10482	Render a bizview
10483	Validate the request from client .
10484	Dispatch request to view
10485	Goto default view of module
10486	Goto default view of user
10487	Initialize User Profile
10488	Get user preference
10489	Get default user perm
10490	Get the current view name
10491	Set the current view name
10492	Get the current view set
10493	Set current view set
10494	Sets the root directory of the application . This method can only be invoked at the beginning of the constructor .
10495	Get module path of application .
10496	Vyhleda podle hashe
10497	Zkontroluje zda je hash vytvoren z daneho retezce
10498	Read array meta - data and store to meta - object
10499	Will set the Default Transport object for the mail object based on the supplied accountname
10500	A convenience function that will issue an email based on the parameter provided Will log email attempts but will NOT run the body through a template
10501	Log that an email attemp was made . We assume it was successfull since \ Zend_Mail throws an exception otherwise
10502	Gets infor about a particular tag
10503	Get openbiz library php file path for autoload remove metadata package searching
10504	Load class of MetaObject
10505	Get core path of class
10506	Find class file location from cache dictionary .
10507	Create an Alumni from a Person and a set of supplementary attributes .
10508	Add a job to the schedule .
10509	Process the schedule and run all jobs which are due .
10510	The job should run at the specified time .
10511	When render table it return the table header ; when render array it return the display name
10512	Flatten the given exploded path into a string representation .
10513	Return default configuration for zend - mvc applications .
10514	Creates a new cURL reuest and adds to the request queue for processing
10515	Runs through the request queue and processes completed requests
10516	Get plot data array
10517	Draw the XY type plot
10518	Get the point make number
10519	Get the font number
10520	I AM SINGLETON We don t need to go instantiating all these objects more than once here
10521	Get attribute by key
10522	Set attributes by group and key
10523	Get attribute by group and key . It will return null if doesn t exists
10524	Find a model by its primary key . If not then ne instance is being created .
10525	Get repository model s instance .
10526	Create Unique ID if function is not string
10527	Call the all hook which will process the functions hooked into it .
10528	Appending Hooks Function if hooks existor just append the hooks
10529	Check if hook name exists
10530	Call hook from existing declared hook record
10531	Replace Hooks Function this will replace all existing hooks
10532	Count all existences Hook
10533	Check if hook has doing
10534	Check if action hook as execute
10535	Add route on router .
10536	Add middleware on pipe .
10537	Start process dispatcher .
10538	Perform logic to actually signal the execution .
10539	Sets a parameter defined in an unique key ID . You can set objects as a closures .
10540	Returns a raw definition . Used when a closure is set and you want to get the closure not the result of it .
10541	Encrypts the value provided . The default key will be used if none specified .
10542	Decrypts the value provided . The default key will be used if none specified .
10543	Returns the default key .
10544	Calculate the arguments for the enclosed object .
10545	Devuelve el tipo para el bind
10546	Link an app to this route .
10547	Get a sub route for the specified route part . If a child node does not exist yet it will be created .
10548	Serialize the route .
10549	Unserialize the route from serialized PHP data
10550	Vrati pocatecni rok - aktualni rok . V pripade ze se shoduji pouze aktualni
10551	Vrati aktualni cas na milivteriny
10552	Vrati nazev dne
10553	Vrati zkraceny nazev dne
10554	Vrati nazev mesice
10555	Vrati zkraceny nazev mesice
10556	Vrati lokalizovany format data
10557	Lokalizovane datum s casem
10558	Register some internal services
10559	Create a new Section record
10560	Set the session owner
10561	Removes comments from a multi line string while preserving any comments that mention licenses authors copyrights or the source URL of the code . This ensures that minification does not break most open source licenses which require attribution .
10562	Minify CSS by removing unneeded code .
10563	Adds global variable to view
10564	Encloses and input string with double quotes .
10565	Generic explode function .
10566	Pass a string get the desired Role object or null .
10567	Adds a Role OBJECT to the ArrayCollection . Can t type hint due to interface so throws Exception .
10568	Never use this to check if this user has access to anything!
10569	User error handler
10570	User exception handler
10571	Get output error message
10572	Print out call stack of the error
10573	Sets the name of the check . When null or a non - string value is given a random name is set .
10574	Adds the given value under the given key to the settings of the result . The setting may have a group name to more easily separate them on export . If no group name is specified the check s default setting group name is used as the default .
10575	Adds the given value under the given key to the settings of the result . The setting may have a group name to more easily separate them on export . If no group name is specified the check s default setting group name is used as the default . This setting may be written to a cache to be available on re - runs of the check .
10576	Offset to unset
10577	Set the current sync state .
10578	Compute current sync data from execution state .
10579	Create an expression context bound to this execution .
10580	Terminate this path of execution will also terminate all child executions .
10581	Register the given child execution with the parent execution .
10582	Is being used to notify a parent execution whenever a child execution has been terminated .
10583	Toggle scope of the execution .
10584	Create a new child execution and register it with the process engine .
10585	Create a nested execution as child execution .
10586	Find all child executions .
10587	Fetch all variables visible to the execution .
10588	Get the value of the given variable eighter from the current scope or inherited .
10589	Get the value of the given variable in the current scope .
10590	Set the given variable in the scope root passing a value of null will remove the variable .
10591	Set the given variable in the current scope setting a variable to a value of null will remove the variable from the current scope .
10592	Remove a variable will remove the variable from all parent scopes up to the scope root .
10593	Remove the given variable from the current scope .
10594	Register commands to execute the behavior of the given node .
10595	Put the execution into a wait state .
10596	Signal the execution in order to continue from a wait state .
10597	Take a transition from the given node .
10598	Introduce a new concurrent root as parent of this execution .
10599	Load message from file
10600	Get message from CONSTANT translate and format it
10601	Get \ Zend Template
10602	Validates the given path and throws an exception if it is not a regular directory or readable .
10603	Validates the given path and throws an exception if it is not a regular directory or writable .
10604	Validates the given file path and throws an exception if it is not a regular file or writable .
10605	Validates the given file path and throws an exception if it is not a regular file or readable .
10606	Validates the given value using the PHP filter_var with FILTER_VALIDATE_EMAIL option .
10607	Validates the given value using the PHP filter_var with FILTER_VALIDATE_IP .
10608	Validates the given value using the PHP filter_var with FILTER_VALIDATE_IP and flag FILTER_FLAG_IPV4 .
10609	Validates the given value using the PHP filter_var with FILTER_VALIDATE_IP and flag FILTER_FLAG_IPV4 | FILTER_FLAG_NO_RES_RANGE .
10610	Validates the given value using the PHP filter_var with FILTER_VALIDATE_IP and flag FILTER_FLAG_IPV6
10611	Initialises a view .
10612	Checks to see if the given attribute is in the list of public attributes .
10613	Checks to see if the given method is in the list of public class methods .
10614	Returns an array of parameter names for the given method instance .
10615	Tries to find the correct reflection method .
10616	Converts the object into an array .
10617	Will perform the message send . Will return anyhow an array with the response
10618	Returns a blank line .
10619	Returns the number of columns in the terminal windows .
10620	Returns an error block .
10621	Adds padding and line breaks to the content to make it fit inside the terminal windows with a proper word cesure .
10622	Vlozi do pole na dane misto
10623	Create rules chain
10624	Complete the password grant
10625	Get a metadata based object instance . It returns the instance the internal object map or create a new one and save it in the map .
10626	Create a new metadata based object instance
10627	Register Prefix location and extension of MetaObject
10628	Gets the access token from an oAuth request
10629	Gets a users feed
10630	Gets media liked by the current user
10631	Sets a relationship between a particular user and the currently authenticated user
10632	Set object properties
10633	Find and return all
10634	Count all rows in database table
10635	Find and return specific row
10636	Create new row
10637	Build a select - query
10638	Execute the query built
10639	Check if it can proceed with callback
10640	Creates a link .
10641	Pick data to parent form
10642	Parse Picker Map into an array
10643	Take an array of raw \ ReflectionClass objects and return an array of self
10644	Do some initial setup work
10645	Get fielf by column name
10646	Get key search rule . The key search rule is used to find a single record by given key values
10647	Set record array to internal data structure
10648	Save old recrod used in update record when old record value is needed in the action
10649	Get record array by converting input indexed - Value array to Field - Value pairs
10650	Conver sql array to record array
10651	Set sql record array to internal data
10652	Get join input record
10653	Get join search rule
10654	Returns the method of the current request .
10655	Returns the requested relative URL after . It includes the query part if any .
10656	Gets options from configuration based on name .
10657	Get or make the singleton instance .
10658	Issue an access token
10659	Writes all or specific groups of settings as a shell file and returns a message with some information about that .
10660	Decodes the json contents readed from the given file into an array
10661	Check if a totp corresponds to a key and a stamp .
10662	Lists all Comment models .
10663	Do update record
10664	Main entry point
10665	A natural language version of implode .
10666	Render the excel output with CSV format
10667	Render excel data
10668	Get raw data to display in the spreadsheet . header and data table
10669	Get session variables data of this object
10670	Get object property
10671	Get the active record
10672	Set the active record according to the record id
10673	Fetches SQL result rows as a sequential array according the query rules set before .
10674	Fetches SQL result rows as a sequential array without using query rules set before .
10675	Run query and get the query results without affecting DataObject internal state by default it gets number of records starting from the first row . if pageNum > 0 it gets number of records starting from the first row of the page
10676	Count the number of record according to the search results set before . It ignores limit setting
10677	Run query with current search rule and returns PDO statement
10678	Get the number of records according the Select SQL
10679	Get record from result setand move the cursor to next row
10680	Add sort - cut key scripts
10681	Get a config key
10682	Bootstrap the application
10683	Authenticate User that stored in database
10684	Set the request property
10685	Sets the maxage property
10686	Fixes common programmer typos and less than precise mime types from fileinfo . so .
10687	Sets the MIME type the file will be served with . Does not compensate for all errors in declared MIME types but will compensate for some .
10688	Attempts to detect if serving a text file .
10689	Are we serving the full file or just part of it?
10690	Sets class properties needed to generate a unique Etag and to serve the file .
10691	Is the browser cached version okay?
10692	Reads the file or portion of binary file from the filesystem and sends it to the client .
10693	Send headers and then the file for binary file .
10694	Cleans up line breaks and attempts to convert files to UTF8 .
10695	Minify JavaScript . By default turned off extend class to enable .
10696	Minify CSS . By default turned off extend class to enable .
10697	Word Wrap text files . Turned off by default extend class to use .
10698	Reads text file from filesystem and sends to browser .
10699	Serves text content .
10700	Set the access - control - allow - origin header .
10701	Serve the file .
10702	Will register the provider to be used later on .
10703	Denormalizes data back into an object of the given class .
10704	Checks whether the given class is supported for denormalization by this normalizer .
10705	Validates data .
10706	Validates model s data .
10707	Localized string which represents the type of the menu item .
10708	Builds the targeting url based upon the given type if the current item .
10709	Go to next wizard page
10710	Skip current wizard page
10711	Go to previous wizard page
10712	Finish the wizard process
10713	Clean up the sessions of view and all forms
10714	Render this form
10715	Generates a TOTP key .
10716	Check if a return value is empty . A value is considered empty if it cannot be accessed or if it is countable and count is 0 or if PHP s empty - operator returns true when the vallue is passed .
10717	Evaluate the given ternary shortcut callback a is evaluated returns result of a if it is not empty otherwise returns result of b .
10718	Check if the given value is contained within the given container . Supported container types are arrays and traversable objects .
10719	Merge to another MetaIterator object
10720	Build App object and load config .
10721	Notify Helper Create a generic event and dispatch the event
10722	Count items by group
10723	Aggregate with custom group
10724	Find a document with support for conditions
10725	Get array of MongoIds of this objects
10726	Normalize date from ISO8601 if is string it returns a DateTime object
10727	Check the Form is in the lib
10728	Render this WebPage .
10729	Get current page URL
10730	Initialize all form objects .
10731	Compares the given values according to the comparison operator the second value might have and returns whether the evaluation is true .
10732	Returns the integer value of the given value .
10733	Find all . php source files in the specified path or any subdirectory and return them in an array .
10734	Register a namespace with the autoloader .
10735	Build or rebuild the class cache . This will scan all defined PSR4 paths for . php files deduce the resulting classname from the path and add the path to the cache .
10736	Find the class name of the Composer autoloader . The name starts with ComposerAutoloader and has a random suffix . Therefore the list of class names is obtained and all class names are compared with this pattern .
10737	Get the Composer vendor directory using the Composer autoloader class name provided .
10738	Get a list of class loaders that may be able to load the specified class or namespace . The resulting list is ordered so that the most specific class loader comes first and the most generic comes last .
10739	Gets the value of the given attribute through middleware or locally as a fallback .
10740	Sets the value of the given attribute through middleware or locally as a fallback .
10741	Return a new Printable with the given string limit .
10742	Return a new Printable with the given array limit .
10743	Return a formatted string from the given string .
10744	Return a formatted string from the given array .
10745	Return a formatted string for the given key = > value pair .
10746	Return a formatted strinf for the given array value .
10747	Return a formatted string from the given object .
10748	Reject is called when a task throws an exception
10749	Register routes translations views and publishers .
10750	Render view object
10751	Render smarty template for view object
10752	Render PHP template for view object
10753	Set headers of view
10754	Creates an instance of comment .
10755	Find files and directories in a directory . The contents are filtered on . php files and files .
10756	Sort the modules check if anything has changed
10757	Get all routes available from all modules . If the routes have already been determined they will be used . Clear the cache to redo this .
10758	Render menu items
10759	Render single menu item
10760	Zapise jako csv radek
10761	Define options supported by this command and set name description and help texts .
10762	Reads configuration via default or given config file handler
10763	Runs all checks and collects results in a report .
10764	Runs the export with the collected report from the checks .
10765	Write the cachable settings from the run checks to a cache file for later reuse .
10766	Creates a cache instance and tries to load it according to command line argument or config .
10767	Initializes the command just after the input has been validated .
10768	reads the result of a command .
10769	Links the command with the current STD streams .
10770	Whether or not the given value is a chainable object .
10771	Validate input on EasyForm level default form validation do nothing . developers need to override this method to implement their logic
10772	Checks if given item meets all criteria
10773	Complete the client credentials grant
10774	Get string used in sql - with single quote or without single quote in case of number
10775	Get the value of the field .
10776	Save the old value to an internal variable
10777	Get default value of the field
10778	Get the value when a new record is created
10779	Get the value when a record is updated
10780	Check if the field is a required field
10781	Check value type
10782	Check if the field has valid value
10783	Find resource file path .
10784	Prepend theme namespace if namespace not set .
10785	Set loader theme .
10786	Register theme for future using .
10787	Add theme paths to loader .
10788	Return the array offset corresponding to an array key .
10789	Returns the array key corresponding to a given array offset .
10790	Returns the standard deviation of numeric array values .
10791	Apply middleware to this route
10792	Get route action .
10793	Extract the path parameters for the given URI .
10794	Does the given scheme match this route s scheme?
10795	Does the given hostname match the route s hostname?
10796	Does the given URI match the route s URI?
10797	Fetch records in tree structure
10798	Fetch node path
10799	List all children records of a given record
10800	Returns an array of ISetting instances that match the given criterias from the successful results of this report .
10801	Get link of LabelText
10802	Get text of label
10803	Get new record
10804	Sets a secret token .
10805	Vrati cislo v binarni velikosti
10806	Vrati zformatovane cislo
10807	Add a join table and cloumn in the sql statement
10808	Add SQL expression in the sql statement sqlExpr has format of ... join1 . column1 ... join2 . column2 ... . Replace join with alias
10809	Reset SQL to be empty
10810	Add order by clause
10811	Add other SQL clause
10812	Add association in the SQL
10813	Get the SQL statement
10814	Get item value of array
10815	Index action - runs the console application
10816	Get list of default template location
10817	Render draw the element to show description
10818	Return all available Google fonts .
10819	Determines whether this setting s group matches the given groups .
10820	Validate user input data and trigger error message and adjust BizField if invalid .
10821	Validate uniqueness Uniqueness = fld1 fld2 ; fld3 fld4 ; ...
10822	Check if the current record can be updated
10823	Check if the current record can be deleted
10824	Update record using given input record array
10825	Create an empty new record
10826	Generate Id according to the IdGeneration attribute
10827	Insert record using given input record array
10828	Delete current record or delete the given input record
10829	Get auditable fields
10830	Run DataObject trigger
10831	Get all fields that belong to the same join of the input field
10832	Pick the joined object s current record to the current record
10833	Is need to generate Id?
10834	Execute the checks that are defined in the config and generate a report to consume by others .
10835	Initializes the internal report instance being used to collect the results of the checks .
10836	Resolve to a Route instance or throw exception
10837	Resolve the action parameters for dependency injection .
10838	Returns whether a cached value for a setting from the loaded cache exists that matches the given criterias .
10839	Returns the first setting from the loaded cache that matches the given criterias .
10840	Returns an array of settings matching the given criterias .
10841	Loads the settings from the configured or default location .
10842	Sets the given location as the cache location to use .
10843	Finds individual CSS rules and evaluates them for needed prefixes then replaces the rules with the prefixed rule as needed .
10844	Properly prefixes the align - items property .
10845	Properly prefixes the align - content property .
10846	Properly prefixes the align - self property .
10847	Properly prefixes the flex property & value .
10848	Properly prefixes the justify - content property .
10849	Interpets the given parameters into a set of CSS rules to insert in replacement of the rule being evaluated .
10850	Adds a comment to a particular media
10851	A convenience method for making DELETE requests via the request object
10852	Filter media by types
10853	If there is a preferred image this one will be returned . If not the first one of the collection will be returned .
10854	Multiple placeholders can be set for a specific content - type keep in mind that one will be set for this session . Server - side relating a specific random placeholder as a preferred one is a WIP .
10855	Create a CssRule object from an existing CSS string .
10856	The properly formatted CSS rule .
10857	Checks Eloquent - specific method resolution methods .
10858	Renders the sitemaps index .
10859	Renders the sitemap .
10860	Then coerce that into a simple nested array .
10861	Checks if the access token is valid or not
10862	Reads in the access token from the headers
10863	Sends the method call to each item .
10864	Compares the type against the before and after results to determine if a call from the methods type changed the context before the next middleware class could access it .
10865	Queues a command according to it s priority .
10866	Triggers the given callback can be extended in order to wrap interceptors around execution of commands .
10867	Get global placeholder
10868	Creates a PHP archive file with all files necessary to run Environaut standalone .
10869	Get a regex pattern by name
10870	Merge parent route Group configs in with child group .
10871	Remove a record from current record set of current association relationship
10872	Remove record many to many
10873	Remove record many to one
10874	Get the model s relationships in array form .
10875	Read meta data
10876	Read metadata collection
10877	Set Prefix Package
10878	Check is allow access?
10879	Build the object
10880	Returns configured Idiorm instance
10881	Add a resolver type
10882	Return a resolver instance
10883	Replace a resolver with a custom instance
10884	Resolve a reference of a specific type
10885	Set the authorativeness of the resolvers
10886	Register a module
10887	Sort the modules on precedence
10888	Set the precedence for a module on all resolvers .
10889	Discover the module configuration based on the Composer configuration
10890	Find modules in the specified path
10891	Get element by field
10892	Register services to the application container .
10893	Convert Formatted String To Value
10894	Convert Value To Formatted String
10895	Format value to number
10896	Unformat a number to value
10897	Format value to date
10898	Unformat a date to value
10899	Format value to date time
10900	Unformat a datetime to value
10901	Format value to currency
10902	Unformat a currency to value
10903	Format value to phone number
10904	Convert a formatted datetime to another format
10905	Parse formatted date to time value
10906	Render a DSN for MySQL
10907	Render a DSN for PostGreSQL
10908	Flattens Map of DSN Parts using a Delimiter .
10909	insert one record into a table
10910	insert multiple records into a table
10911	Get the default request query without base
10912	Get an instance from the container
10913	Format query string
10914	Format query value
10915	Set bind value
10916	Get Database profile
10917	Writes all or specific groups of settings as a plain text file and returns a message with some information about that .
10918	Strong Password checks if the string is strong i . e . the password must be at least 8 characters and must contain at least one lower case letter one upper case letter and one digit
10919	Built - in \ Zend email check
10920	Built - in \ Zend date check using YYYY - MM - DD
10921	Get error message
10922	Adapter constructor .
10923	cuando una tabla hereda de otra sobreescribir esta funcion
10924	Get new Id
10925	Get a new SYSID from the id_table . You can get SYSID for a table with prefix and base converting
10926	Get new GUID ID is generated before executing insert sql
10927	Get ID with SQL
10928	Checks the visibility of the given attribute before returning its value .
10929	Set the formatter based on the type of format selected in app . inc
10930	Either open a new file with the correct string or remove a previous closing string
10931	Close a file with the correct string depending on the configured format
10932	Get path based on config options
10933	Returns a specific formatter instance depending on the file extension of the given export file location .
10934	Get the generic manager for this Controller
10935	Render the pdf output
10936	Save PDF to file and inform download link to client
10937	Gets or sets the base URL to be used with all REST calls .
10938	Creates a cURL session with the necessary options headers and endpoint to communicate with the UCRM Server .
10939	Sends multiple HTTP GET Request to the specified endpoints of the base URL .
10940	Sends a HTTP POST Requests to the specified endpoint of the base URL .
10941	Sends multiple HTTP POST Requests to the specified endpoints of the base URL .
10942	Push a new job onto the queue .
10943	Create a payload string from the given job and data .
10944	Gets a content element identifier from an content element key .
10945	Gets a content element signature from an extension and content element identifier .
10946	Alias for the contentElementSignature function .
10947	Get image title
10948	Remove the record out of the associate relationship
10949	Sort Record for list form
10950	Filters the view children by a view column .
10951	Filters the view children by the current system language .
10952	Sets class field value by DB field name
10953	Returns array which used for update or insert SQL operations
10954	Fills class fields by SQL returned data
10955	Rozbaleni adresare ZIP
10956	Prida source do zipu
10957	Rozbaleni adresare GZ
10958	Cteni ze souboru po radcich
10959	Vrati velikost souboru nebo slozky
10960	Vrati nazvy trid v souboru
10961	Add a route
10962	Resolve a request into its route .
10963	Resolve the flattened key into the actual value .
10964	See if config has given key .
10965	Lazy load configuration files .
10966	Load a file and assign it to the key .
10967	Return all available background details .
10968	Opens a connection to the Twitter Streaming API .
10969	Checks the HTTP response code recieved from the server .
10970	Handles the message from twitter .
10971	Determines if the received json is a message from twitter .
10972	Reads the size of the next chunk from the stream .
10973	Connects to the Twitter API and starts reading the stream .
10974	Get property of element
10975	Get default value
10976	Get hidden status
10977	Get text of element
10978	Get shortcut key function map
10979	Get context menu
10980	Get function of element in JavaScript format
10981	Get redirect page
10982	Get function type
10983	Set form name that contain element and EventHandler
10984	Adjust form name
10985	Get formed function
10986	parse function string and get functionName and functionParams
10987	Calls the given method on the given middleware .
10988	Clears the results for a new call .
10989	The method that will trigger the event and exception if set for halted calls .
10990	Resets the entire object .
10991	Creates the object for the child element
10992	Convert an integer counter into a string of 8 bytes .
10993	Makes a GET request
10994	Makes a POST request
10995	Makes a request
10996	Determines whether or not curl will follow redirects over SSL See the constructor for details but there are cases in which if curl can t verify the certificate of an SSL request AND PHP is in safe_mode OR there are open_basedir restrictions it will not follow a redirect . There s a fix for this that involves parsing all the response headers from a request and detecting a Location header but that s kind of a hack as it bypasses the whole point of SSL . This method left for posterity . Or something ...
10997	Check Effective Time
10998	It parses URL encoded data detects encoding converts coding to internal encoding and set values to the array
10999	Se usa cuando llegan objetos de Ajax
11000	Render form object
11001	Render smarty template for form object
11002	Render PHP template for form object
11003	View an entity
11004	Create a new entity
11005	Call a static method on the entity .
11006	Use an a particular middleware once at this spot using the given identifiers .
11007	Initializes all necessary commands
11008	Updates a user .
11009	Gets the settings from plugin . tx_t3vcontent . settings .
11010	Queries GWS to generate a Group given an identifier . Identifier may be group id or group regid
11011	Queries GWS to for direct members of the group . Members are added to the object .
11012	Queries GWS to for effective members of the group . Members are added to the object .
11013	parses Membership data and saves it to the Group object
11014	parses History data and saves it to the Group object
11015	Parses out affiliate information from the GWS XHTML . Successful queries will also be added to the Group object .
11016	Parses out group information from a search .
11017	Get view object
11018	Get an element object
11019	Get error elements
11020	Rerender sub forms who has dependecy on this form . This method is called when parent form s change affect the sub forms
11021	Sets the bundle class
11022	Get translation key .
11023	Get full list of dictionary with translated words from dictionary .
11024	Load cache configuratoon
11025	Remove a cache
11026	get a list of all caches
11027	clean all cache
11028	Make directory recursively
11029	Reads a config file from the given location and returns it s data as an associative array .
11030	Returns a specific reader instance depending on the file extension of the given config file location .
11031	Add a branch dangling from this branch .
11032	Add route to this leaf .
11033	Find the matching branch for the given URI path part .
11034	Get the next branch or create a new one .
11035	Finds all the comments of issue given ordering by createdAt . The result can be more strict adding user and createAt criteria . Can do limit and offset .
11036	Get Wordpress contents already registered .
11037	Get WordPress Categories registered .
11038	Get WordPress Menus registered .
11039	Get WordPress Pages registered .
11040	Get WordPress Posts registered .
11041	Get WordPress Post Types registered .
11042	Get WordPress Tags registered .
11043	Get WordPress Taxonomies registered .
11044	Get WordPress Terms registered .
11045	Add a module to the search path of the SubResolver .
11046	Set the precedence value of a module
11047	Get the precedence value of a module
11048	Clear the cached resolved files
11049	Obtain the cached data . The cache is cleared when the sort order does not match the cache .
11050	Helper method that searches the core and modules for a specific type of file . The files are evaluated in alphabetical order and core always comes first .
11051	Parser Uri request
11052	Save Session data of this object
11053	Get current step
11054	Get form inputs
11055	Cancel clean up the sessions of view and all forms
11056	You can register a class just once .
11057	Get input value from a specific container .
11058	Delete file or directory at given path
11059	Convert config to seconds
11060	Vrati klicova slova z textu
11061	Vrati email z textu
11062	Vrati retezec ktery se v textu vyskytuje
11063	Redirect the API call to the micro service
11064	Execute all up - migrations loaded from the given config .
11065	Execute all up - migrations found in the given directory .
11066	Set token ID
11067	Listen to the given queue in a loop .
11068	Returns whether the key exists or not .
11069	Generates the HTTP request string .
11070	Generates an OAuth signature .
11071	Add a new node to the process .
11072	Add a new transition between 2 nodes to the process .
11073	Adds the given setting to the internal lists of settings .
11074	Adds the given setting to the internal list of settings .
11075	Returns the internal list of settings emitted by the processed check .
11076	Returns the internal list of cachable settings emitted by the processed check .
11077	Return all settings or the settings of the specified groups as an array .
11078	Return all cachable settings or the cachable settings of the specified groups as an array .
11079	Returns all settings from the given array that match the groups and flag .
11080	Returns all or just the matching settings of the given groups as an associative array .
11081	Render HTML Tree
11082	Render the html tree
11083	Render single node item
11084	Runs the process
11085	Registers the bundles for the given environment
11086	Instantiates the bundles that must be autoconfigured parsing the autoload_namespaces . php file generated by composer
11087	Handles the default options all commands have in common .
11088	Autoloads the given class if it exists .
11089	Load the given collection .
11090	Internal redirect without creating an instance of kernel
11091	Working only with inputs where type is text or password
11092	Set query parameter for parameter binding in the query
11093	Set limit of the query .
11094	Get database connection
11095	Get the property of the object . Used in expression language
11096	Get the object instance defined in the object reference
11097	Set the association of the object
11098	Use the parser to parse a docblock into annotations and create annotation objects .
11099	Create an in - memory Sqlite database very fast but not durable!
11100	Create a Sqlite DB using the given file to store data .
11101	Retorna o objeto iField referente ao campo de nome indicado .
11102	Identifica se o campo com o nome indicado existe neste modelo de dados .
11103	Retorna um array contendo o nome de cada um dos campos existentes neste modelo de dados .
11104	Retorna um array associativo contendo todos os campos definidos para o modelo atual e seus respectivos valores iniciais .
11105	Checks if user is authorized to watch an index of the entities .
11106	Checks if user is authorized to create an entity .
11107	Gets a nested value from an object
11108	put your code here
11109	Defaults to Environaut \ Export \ Export .
11110	Defaults to Environaut \ Report \ Report .
11111	Defaults to Environaut \ Runner \ Runner .
11112	Defaults to Environaut \ Cache \ Cache .
11113	Build update sql UPDATE table SET col1 = val1 col2 = val2 ... WHERE idcol1 = id1 AND idcol2 = id2
11114	Build delete - sql DELETE FROM table WHERE idcol1 = id1 AND idcol2 = id2
11115	Get style of element
11116	Returns a \ DOMNodeList of all child elements of the element .
11117	Returns the value of the given attribute or returns the given default value if the attribute is missing .
11118	Returns all attributes including their values for the element .
11119	Returns first child of the element with the given name .
11120	Depending on the values of the literalize and space attributes of the element the transformed or literal value of the value is returned
11121	uses the cache if it was configured or calculates the plain output every request otherwise .
11122	Handle the arguments passed to the middleware and return the new response . By default this will automatically try to call a class method that corresponds to the method named give to the object .
11123	Checks the given method and determines if it passed the black and white lists and can be called .
11124	Is a getter request .
11125	Is a setter request .
11126	Prepare the Guzzle Client
11127	Get the response body from the response and try to parse it to array or object .
11128	Decode the JSON String
11129	Set single session variable of a stateful object
11130	Get single session variable of a stateful object
11131	Save session variables of all stateful objects into sessionid_obj file
11132	Clear session variables of all stateful objects
11133	Save a JSON array in session
11134	Set view history data of given bizform into session file
11135	Starts timer .
11136	Stops timer and displays elapsed time .
11137	Keeps lap time .
11138	Resets timer .
11139	Checks whether the given input value leads to an executable that matches the configured version_mask parameter .
11140	return redirect page and target array
11141	Handle the exception from DataObj method report the error as an alert window
11142	Process URL to get the form param and add the form in the FormRefs
11143	Returns baseURI .
11144	This method attempts to validate that the record in the resultset is indeed a record that matched the identity provided to this adapter .
11145	This method abstracts the steps involved with making sure that this adapter was indeed setup properly with all required pieces of information .
11146	Checks the visibility of the given attribute before setting it to the given value .
11147	Convert the model instance to an array .
11148	Get from list
11149	Returns a formatted string consisting of all messages from the results of the given report .
11150	Call middleware pieces .
11151	Call the registered middleware getters .
11152	Sends the request to the method MiddleMans and returns the final response .
11153	Sends the request to the setter MiddleMans and returns the final response .
11154	Getter and setting for the exception catching property .
11155	Clears the given middleware group or all if none given .
11156	Disable the given middleware .
11157	Enable the given middleware .
11158	Retrieves the middleware by key and group with a variable fallback .
11159	Looks for the given group id in the middle collection creating a new instance if it doesn t exist .
11160	Define the default group setting .
11161	Determine if the instance has a given middleware .
11162	Checks the disabled status of the given middleware .
11163	Checks the enabled status of the given middleware .
11164	Resolve the defined middleware and include it here if it exists .
11165	Get the collection calls .
11166	Add a new middleware to beginning of the stack if it does not already exist .
11167	Add a new middleware to end of the stack if it does not already exist .
11168	Sets the context for the middleware .
11169	Calls the given middleware and returns the result as if part of the middleware chains .
11170	Writes the current set of ISetting instances to the cache file location .
11171	Get forms or the form to hide or show . When It has one form It hasn t the ATTRIBUTES property
11172	Parses the json file and sets up the object
11173	Find the outgoing transition to be taken by the given execution .
11174	Generate Js function to send ajax request .
11175	Generate Js function to send ajax form data .
11176	Generate link tag with js function to send ajax request
11177	Generate submit button tag with js function to send ajax form
11178	The key should be a native string so it will cast what it can with a fallback . The goal of this is to normalize associative keys and allowing the developer to decide if they want to included non - associative keys .
11179	Determines if the given middleware value is a string that can be instantiated . Note that it does not check an application container .
11180	Checks to see if the given value has a lot of middleware or just one .
11181	Resolve the given middleware .
11182	Resolve the given middleware or throw an exception if the argument isn t valid .
11183	Resolve a group of middleware .
11184	Resolve a group of middleware or throw an exception if one is not valid .
11185	Resolve a single middleware .
11186	Resolve a single middleware or throw an exception if it fails .
11187	render the report output
11188	Get unique string by time and MD5
11189	Check if the user has a role or roles .
11190	Check if the user has role .
11191	return a hash for a list of params
11192	Get information regarding a specific transfer
11193	Perform a cURL session
11194	Allow view access
11195	Get match view
11196	Writes all or specific groups of settings as a PHP file and returns a message with some information about that .
11197	Loads XML from a string and registers the Environaut configuration namespace if the XML document is an Environaut configuration file .
11198	Validates the current document according to the given schema file .
11199	Validates the current document according to the given schema file content .
11200	Substitutes XIncludes present in the current document .
11201	Returns the nodeValue of the child element with the given name .
11202	Returns the DomElement with the given name .
11203	Set the default namespace that should be used when accessing elements via convenience methods and bind it to the internal xpath instance .
11204	Registers the default Environaut namespace on the internal xpath instance of the given DomDocument instance .
11205	Returns whether the given document instance is an Environaut configuration file .
11206	Re - instantiates the internal xpath instance and then registers the Environaut config namespace if necessary .
11207	Formats the given libXml error as a multiline string .
11208	Get a sorted array of resolvers applicable to the input element .
11209	Check authorize parameters
11210	Parse a new authorize request
11211	Complete the auth code grant
11212	Print output .
11213	Get form all inputs or one input if controlName is given
11214	Replace the form content with the provided html text encoded html string returns to browser it ll be processed by client javascript .
11215	Show popup an alert window on the client browser . Encoded html string returns to browser it ll be processed by client javascript .
11216	Show error message .
11217	Close popup window
11218	Run client script
11219	Redirect page to the given view . Encoded html string returns to browser it ll be processed by client javascript .
11220	Append more scripts - js include js code
11221	Get append scripts
11222	Append more styles - include and sections
11223	Get appended styles
11224	Include base client library scripts
11225	Include RTE scripts
11226	Include CKEditor scripts
11227	Include PropWindow scripts
11228	Include validator scripts
11229	Execute all action
11230	Compose action message
11231	Make array from string with semi colon delimited
11232	Process error of form object
11233	Set the sub forms of this form . This form is parent of other forms
11234	Popup a selection EasyForm in a dynamically generated WebPage
11235	Set request parameters
11236	Fetch record set
11237	Get element Id
11238	Generate list for AutoSuggest element Also supports elements that have hidden values
11239	Render context menu code
11240	Render html content of this form
11241	Get event log message
11242	Get on event elements
11243	Run event log
11244	Get the element that issues the call .
11245	Set client scripts auto add javascripts code to the page
11246	Remove a layer by its classname .
11247	Run the middleware stack .
11248	Vytvori objekt z retezce intervalu
11249	Generates a TOTP code .
11250	Decodes a base 32 string .
11251	Returns an iterator with the files and directories in the current directory .
11252	Returns an array with the files and directories in the current directory .
11253	Returns an array with the directories in the current directory .
11254	Returns an array with the files in the current directory .
11255	Returns true if the file has been created .
11256	Returns true if the directory has been created .
11257	Returns true if the file is succesfully moved .
11258	Returns true if the file is succesfully renamed .
11259	Returns true if the directory is succesfully removed .
11260	Define o nome do campo .
11261	Define o nome completo da classe que determina o tipo deste campo .
11262	A classe informada deve implementar a interface AeonDigital \ DataFormat \ Interfaces \ iFormat .
11263	Define um novo valor para este campo .
11264	Retorna o valor atual deste campo em seu formato de armazenamento .
11265	Save all related entities .
11266	Add children to a related entity .
11267	From a query builder filter models based on input and processor and return the resulting models . Since order is important the returned Collection will be a plain laravel collection!
11268	Output a resource or a collection of resources
11269	Convert collections or resources to arrays .
11270	Returns the form markup for the captcha
11271	Verifies a user s captcha entry from POST Data
11272	Get the service object
11273	render the Exception to the end user if the Exception is an instance of BaseSerializerException call our custom renderer else call the parent render method
11274	render exceptions of type HttpException
11275	render exceptions of type CakeException
11276	render exceptions of type BaseSerializerException
11277	render exceptions of type ValidationBaseSerializerException
11278	render the HttpException for a JSON request
11279	render the HttpException for a JSON API request
11280	render the CakeException for a JSON request
11281	render the CakeException for a JSON API request
11282	render the BaseSerializerException in the general case
11283	render the BaseSerializerException for a JSON request
11284	render the BaseSerializerException for a JSON API request
11285	render the ValidationBaseSerializerException in the general case
11286	render the ValidationBaseSerializerException for a JSON request
11287	render the ValidationBaseSerializerException for a JSON API request
11288	Opens an existing session .
11289	Create a new session or open existing session .
11290	Prepare the text if the text has no length return false to indicate something went wrong
11291	Display one Title
11292	Helper function to output a number of lines that have the full width
11293	ConsoleProvider constructor .
11294	On kernel response .
11295	DebugBarProvider constructor .
11296	Creates a secure session
11297	Checks session IP and user agent are still the same
11298	Creates a fresh session Id to make it harder to hack If the site is very slow in parts increase the expiry time 10 seconds is a good default which allows ajax calls to work without losing the session
11299	Checks whether the session has expired or not
11300	Link layers together .
11301	Extract request param from backbone model request
11302	Before content function
11303	print CLI header
11304	Parse raw template body .
11305	Remove extra indentation from a string .
11306	Handle the request and return the response coming from the next callable .
11307	Parse URL and return query string as assoc array
11308	bind content to theme
11309	Method attempts to apply the generated regexp to the URI and if successful returns a list of parsed parameters .
11310	Function to take a value and turn it into a justification constant
11311	List the local pdf files stored in Docs Home
11312	Parses the main page html to extract the links to pdf documents
11313	Evaluates if a link to a pdf document is not a valid domains document pdf and should be excluded
11314	Calculates a hash for the file and stores the content in docs home folder
11315	Checks if a file exists in docs home folder
11316	This returns the correct number for a list item depending on the current nesting level
11317	End the current ordered or unordered list
11318	Display one paragraph which will be word - wrapped according to the left margin and width specified in the HTML object .
11319	Create a new line with the styling of the paragraph
11320	Trains the dataSet following the Linear Regression Algorithm
11321	Makes a linear prediction of input based on coefficients
11322	Initializes this handler by creating the table if it not exists
11323	Writes the record down to the log of the implementing handler
11324	Helper function to draw one list item
11325	Start an ordered list
11326	CacheProvider constructor .
11327	get name allowed return
11328	This method generates a form based on the section config . The for handle contains the section handle or the FQCN of the section entity . By pasing along SectionFormOptions this method can determine of the form is meanth to update or create new data .
11329	If you use SexyField with symfony you might want to inject the formFactory from the framework If you use it stand - alone this will build a form factory right here .
11330	Load fixtures from YML files contained in iterator .
11331	Build absolute url of given path in given context
11332	Respond to the install command .
11333	Move files out of the vendor directory and into the project directory that are in the plugin s install directory .
11334	First time installation of framework . For first - time installation we create the project directory and modify the configuration file .
11335	Respond to an update command .
11336	Update a package . In particular new install files will be moved to the correct location .
11337	Uninstalls a plugin if requested .
11338	Delete the given plugin .
11339	Remove the files in the destination directory whose names match the files in the source directory .
11340	Delete a directory and all of its contents .
11341	Set the colors of a column
11342	Calculate the text area by taking the width and subtracting any padding
11343	Run the data through and make the width as wide as the widest text
11344	Get by date
11345	Get date value
11346	Cast an attribute to a native PHP type .
11347	Convert the model s attributes to an array .
11348	Set the item at a given offset .
11349	Retrieves a menu by its name .
11350	Store value to cookie
11351	Returns the definition to register in the container .
11352	Parses all imports .
11353	Parses definitions .
11354	Loads a YAML file .
11355	Resolves services .
11356	AutoloadProvider constructor .
11357	Returns an instance of the Crypto library
11358	Humanize the size bu add a Prefix
11359	Set the bullet string for lists
11360	Set the column definition for one column
11361	Simply add up all the column widths
11362	Whether there is at least one header defined in the column definitions
11363	Return an array of the header text found in the header definitions
11364	Helper function to ensure the data is correct
11365	Calculate the width of any automatically calculated widths
11366	Draw the grid of data
11367	Create a new session .
11368	Create a new file safely .
11369	Saves the data for the sessionID atomically .
11370	Acquire a lock for the session
11371	This method returns a form to be rendered with Twig . It will return a view validate and save the form data .
11372	Constructs a new ReflectionProperty object from property and class name . If object already exists in cache it will taken from there instead of creating new object
11373	Return the facts generated from the command . If as_json is true the command must produce valid json .
11374	Parse flat results in the form fact1 = value1 fact2 = value2
11375	Find and return first object by its tableIdColumn and use its data to populate this instance .
11376	Find and return first object found by search criteria and use its data to populate this instance .
11377	Find and return all .
11378	Find and return all matching the search criteria .
11379	Create new row .
11380	Update row using a custom where - statement .
11381	Turns route notation in a regular expression
11382	Inserts custom patterns in the existing regular expression
11383	calculate the mean of the dataSet
11384	Build the HTTP client to talk to the API .
11385	Sets the file to stream .
11386	Add a remote template .
11387	Check cache file TTL .
11388	Convert placeholders to blocks in the source .
11389	Get template metadata array .
11390	Creates a definition provider .
11391	Returns a specific result by key
11392	Save the results of a given formula to keep in the history
11393	Adds a menu header .
11394	Creates a drop down menu item from item .
11395	Checks if the attributes are granted against the current authentication token and optionally supplied object .
11396	Create a new file download response .
11397	get Api Url
11398	set Cover List
11399	get Data By Type
11400	get Data By Url
11401	Install route patterns .
11402	Checks if a date string is valid
11403	wrap GUI frame
11404	Run an Artisan console command by name .
11405	Constructs a new ReflectionMethod object from method and class name . If object already exists in cache it will taken from there instead of creating new object
11406	Create a new session
11407	Send an entity . Try put first if 404 create it with POST .
11408	List the files in the providers dir to create new objects .
11409	Instantiate a provider from a file
11410	Fetch the facts from the providers
11411	Fill from facts from providers for caching .
11412	Record a Domain Event
11413	Apply a Domain Event to the aggregate
11414	call plugin functions
11415	Draw the table of data
11416	Starts a new calculus using the formula sent . It resets the calculus by emptying the history of calls
11417	See if the layout should be enabled .
11418	Initialize a style to the state of a terminal
11419	Override a style if anything is set to null then don t change the value of the recipient object
11420	Clear out all formatting
11421	Set the text color
11422	Set the fill color
11423	Set both text and fill colors
11424	Switch the text and fill colors
11425	Constructs a new ReflectionFunction object from function name and store it in cache . If object already exists in cache it will taken from there instead of creating new object
11426	Run some checks then autoload our plugins .
11427	Filter show_advanced_plugins to display the autoloaded plugins .
11428	This sets the cache or calls for an update
11429	Get the plugins and mu - plugins from the mu - plugin path and remove duplicates . Check cache against current plugins for newly activated plugins . After that we can update the cache .
11430	This accounts for the plugin hooks that would run if the plugins were loaded as usual . Plugins are removed by deletion so there s no way to deactivate or uninstall .
11431	Get monolog instance for a specific channel
11432	Read config array and initialize all loggers
11433	Create new logger instance with given configuration and store it in array with channel name
11434	Get a list of eZ Platform content object Locations .
11435	Constructs a new ReflectionClass object from class name and store it in cache . If object already exists in cache it will taken from there instead of creating new object
11436	Get interfaces ReflectionObjects implemented by class
11437	Get parent ReflectionClass object
11438	Get class ReflectionMethods objects array list .
11439	Get class ReflectionProperty objects array list .
11440	What type of request is this?
11441	Adds a style sheet .
11442	Gets an aggregated style sheet .
11443	Rewrites the paths of referenced resources .
11444	Wraps resource content in media rules where appropriate .
11445	Moves import rules to the start of the style sheet .
11446	Get data from archive
11447	Remove from archive
11448	Get archive path
11449	Get session archive file path
11450	Cleanup merged array values from instances of IgnoreArrayValue ReplaceArrayValue UnsetArrayValue
11451	Filters array according to rules specified .
11452	It should return an array with terminal screen sizes
11453	Generates a style tag .
11454	Generates a script tag .
11455	Generates a mailto hyperlink .
11456	Renders Bootstrap static form control .
11457	Generates a Bootstrap static form control for the given model attribute .
11458	Adds the specified CSS style to the HTML options .
11459	Create destination path if it does not exist
11460	Define what files needs to be published
11461	Initializes the application component .
11462	Logs in a user .
11463	Regenerates CSRF token
11464	Logs in a user by cookie .
11465	Returns the URL that the browser should be redirected to after successful login .
11466	Redirects the user browser to the login page .
11467	Renews the identity cookie . This method will set the expiration time of the identity cookie to be the current time plus the originally specified cookie duration .
11468	Updates the authentication status using the information from session and cookie .
11469	Checks if the user can perform the operation as specified by the given permission .
11470	Get the days of week .
11471	Save file to directory
11472	Executes this query using the bound parameters and their types .
11473	Turns the query being built into a bulk delete query that ranges over a certain table .
11474	Turns the query being built into an insert query that inserts into a certain table
11475	Creates and adds a join to the query .
11476	Specifies one or more restrictions to the query result . Replaces any previously specified restrictions if any .
11477	Specifies a restriction over the groups of the query . Replaces any previous having restrictions if any .
11478	Converts this instance into a DELETE string in SQL .
11479	Creates a new positional parameter and bind the given value to it .
11480	Bind the logger interface .
11481	Bind the logger .
11482	Set status code
11483	Get Response body with formatting
11484	Redirects the browser to the specified URL .
11485	Create Response instance
11486	Get prepared headers array
11487	Get cookies prepared for Set - Cookie header
11488	Get default formatters
11489	Extract the authUser and authPass from the BASE64 encoded string .
11490	Returns a list of scenarios and the corresponding active attributes .
11491	Fill scenarios with attributes
11492	Returns the form name that this model class should use .
11493	Returns the list of attribute names . By default this method returns all public non - static properties of the class . You may override this method to change the default behavior .
11494	Performs the data validation .
11495	Validates multiple models . This method will validate every model . The models being validated may be of the same or different types .
11496	Translates a message to the specified language . Or returns a TranslationPromise for further translation
11497	Autodetect mime type relies on php fileinfo extension
11498	Adds normalized plugins to the Http client .
11499	Gets the request options creates the request sends it and returns new response object .
11500	Class autoloader to scan bundles directory
11501	Get the events .
11502	Set the properties for a listener annotation .
11503	Get a listener from a listener annotation .
11504	Returns one or all set options
11505	Sets all or one option
11506	Fetches a single keyvalue by key type and key value
11507	Fills the entity from and array .
11508	Register a directory of Doctrine entities .
11509	Modify the entity manager
11510	Check all prophecies for predictions
11511	Helper function to process each element in the section and handle the extends inheritance attribute .
11512	Verify the class and method of a dispatch .
11513	Verify the class and property of a dispatch .
11514	Verify the function of a dispatch .
11515	Verify the closure of a dispatch .
11516	Verify the dispatch s dispatch capabilities .
11517	Get a dispatch s dependencies .
11518	Get a dispatch s arguments .
11519	Dispatch a class method .
11520	Dispatch a class property .
11521	Dispatch a class .
11522	Dispatch a function .
11523	Dispatch a closure .
11524	Dispatch a callable .
11525	Get the arguments as a string .
11526	Get the arguments from the request .
11527	Parse request arguments to split by options and arguments .
11528	Generiert einen Link zu einer bestimmten Route .
11529	Return an instance with the specified HTTP protocol version .
11530	Filter header values .
11531	Inject a header in a headers array .
11532	Returns current time formatted in ISO - 8601 at UTC timezone
11533	Checks cookie array for correctness possibly updating its domain path and expires fields
11534	Stores a cookie in the jar
11535	Adds cookies set in HTTP response to the jar
11536	Returns all cookies matching a given request URL
11537	Returns all cookies stored in a jar
11538	Returns string representation of object
11539	Constructs the object from serialized string
11540	Checks whether a cookie domain matches a request host .
11541	Get the right object for executing a command .
11542	Compiles arguments for getopt .
11543	Get help for command .
11544	Retrieve the frontend object
11545	Convert expression from one NumberSystem to another
11546	Parse the part of an expression .
11547	Assign the key s value to the property list . Handles the nest separator for sub - properties .
11548	Unicode aware trim method Fixes a PHP problem
11549	Set the input encoding for the given string
11550	Creates a new iterator exception instance .
11551	Initializes the component by configuring the default message categories .
11552	Fill url language prefixes
11553	Returns the message formatter instance .
11554	Start a new transaction
11555	Get the url for the API request
11556	Returns a querystring parameters array
11557	Returns an array of lines to send back to IRC when the http request is successful
11558	Returns a message generated from the api request to use in the final response
11559	Get budgets by account id .
11560	Get current language .
11561	Parse the Accept - Language header present in the request and return an ordered list of languages preferred by the user - agent .
11562	Binds given value into the container .
11563	Resolves the given class dependencies .
11564	Ensures the URL passed in is valid
11565	Is this variable live in published mode?
11566	If we re publishing returns proper php
11567	if an object isn t already wrapped in Silverstripe s stuff wrap it appropriately either in a viewableWrapper or dataobject set
11568	returns the given field as a casted date object
11569	Makes a session identifier based on the session id .
11570	Encrypts the session data .
11571	Decrypts the session data .
11572	Calculates the key to be used in the session encryption .
11573	Sets the encryption algorithm
11574	Sets the hashing algorithm
11575	Prepares a SET parts for an UPDATE SQL statement .
11576	Paramameters initalisation prior to request handling
11577	Gets the value of a request parameter . If not defined gets its default value .
11578	Validates existence of the current attribute based on relation name
11579	Validates existence of the current attribute based on targetAttribute
11580	Check whether value exists in target table
11581	Get clause to MySql syntaxe
11582	Renders and returns the modal response .
11583	Returns the localized version of a specified file .
11584	Separates any underlying resources from the stream . After the stream has been detached the stream is in an unusable state .
11585	Read data from the stream .
11586	Create a new Request instance .
11587	Creates a new request with values from PHP super globals .
11588	Set the SERVER parameters .
11589	Set the headers parameters .
11590	Returns the path being requested relative to the executed script .
11591	Returns the path being requested with no query string .
11592	Returns the HTTP host being requested .
11593	Sets the request method .
11594	Gets the request intended method .
11595	Gets the mime type associated with the format .
11596	Gets the format associated with the mime type .
11597	Gets the request format .
11598	Render the template .
11599	Initialize with React HTTP and Socket servers Used in web application
11600	Add middleware to application
11601	Create RequestApplicationInterface instance from react request
11602	Registers a path alias .
11603	Set aliases from config
11604	Get error log level by error code
11605	Gets the data to be used for the actual reflection .
11606	Gets the arguments the proxied method expectes .
11607	Generates the data to be used for the actual reflection .
11608	Generate string representing the set of properties to be reflected .
11609	Generate string representing the set of methods to be reflected .
11610	Generates a unique name to be used to identify the created proxyclass .
11611	Adds prefix for global namespace to the type hint of each parameter of the method .
11612	Determine if the given method may be proxied .
11613	Filters the list of ReflectionMethods down to those actually proxyable .
11614	Walks recursivly throught an array and concatinates the found info to a string .
11615	Returns the parameters of a function or method .
11616	Authenticates via the client with github api token and then creates the webhook using the hooks model and the packagist username and api token
11617	Loads the message translation for the specified language and category . If translation for specific locale code such as en - US isn t found it tries more generic en .
11618	Setup the application .
11619	Bootstrap the config .
11620	Bootstrap core functionality .
11621	Bootstrap the container .
11622	Get an environment variable .
11623	Set the environment variables class .
11624	Get the config .
11625	Abort the application due to error .
11626	Redirect to a given uri and abort the application .
11627	Return a new response from the application .
11628	Return a new redirect response from the application for a given route .
11629	Helper function to get a new view .
11630	Get a configuration item .
11631	Ensure that a given key is valid .
11632	Validate the descriptor key AND ensures that the given descriptor is of the correct type according to the schema .
11633	Returns the cache invalidation settings .
11634	Sets the cache invalidation settings .
11635	Load the configuration infos
11636	Get the log file path
11637	Verify if a password is correct against a hash value .
11638	Sets if the path has to exist TRUE when the path must exist FALSE when not existing paths can be given
11639	Renders the progress .
11640	Generates a bar
11641	Intercept the soapServer method call in order to handle the call thrue the process method Return php variables the soap server will transform it in a soap response
11642	Init and return the soap server Use wsdl mode or not depending of the wsdl object param
11643	On flush event handler .
11644	Post flush event handler .
11645	Invalidates the entity http cache .
11646	Adds tag to invalidate .
11647	Choice Form sexe
11648	Sets a new callback for this filter
11649	Calls the filter per callback
11650	Return the filling percentage of the backend storage
11651	Get all SEO data for model
11652	Set SEO data
11653	Get SEO data
11654	Converts a value into boolean .
11655	Get the ordinate of a point of the circle by its abscissa
11656	Get the abscissa of a point of the circle by its ordinate
11657	Add Attachment Method
11658	Encodes and returns the email . Also stores it in the encoded member variable
11659	Encodes and saves the email into file . File must exist . Data will be appended to the file .
11660	Encodes given email part into file
11661	Adds a subpart to current mime part and returns a reference to it
11662	Encodes data to quoted - printable standard .
11663	Encodes the parameter of a header .
11664	Encodes header parameter as per RFC2047 if needed
11665	Explode quoted string
11666	Encodes a header value as per RFC2047
11667	Encodes the given string using base64 or quoted - printable . This method makes sure that encoded - word represents an integral number of characters as per RFC2047 .
11668	Return the admin messages view .
11669	Get one line
11670	Renders menu items .
11671	Executes actions before the Controller
11672	Public frontend to set an option
11673	Returns a string with all spaces converted to given replacement non word characters removed and the rest of characters transliterated .
11674	Converts a list of words into a sentence .
11675	Extracts the data for the object gallery from the array data given normalizes them and returns them .
11676	Indicates whether the session is valid .
11677	Get the first error for a given field using the provided format defaulting to the normal Bootstrap 3 format .
11678	Set whether the cookie will be available for cross - site requests .
11679	Clean Crowdin translations and add a header
11680	Find class names inside given namespace
11681	Get namespace directory path
11682	Get possible namespace paths
11683	Explode namespace to possible prefixes
11684	Get prefixes from loader
11685	Sets the key in the session . The filters are merged with the defaults as well as the data for this filter in the session .
11686	Merges the passed array with the session data and updates the session .
11687	Gets all or a single key from the session .
11688	Returns the current page from the query . If the page is not set it will return page 1 .
11689	Returns the query string based on the filters and page in the session .
11690	Retrieves the filters from the session as an array possibly multi dimensional . It will try to
11691	Creates the filter form and pulls the filter values from request .
11692	Stores the full list of record IDs in the session .
11693	Returns the configured KNP Paginator instance .
11694	Finds the previous and next IDs in the record list . Returns an array with the first key as the previous and second key as the next system ID . Either key can be NULL if there is no previous or next .
11695	Gets all support data in an array .
11696	Put a field object in the collection .
11697	Processes input options sets connection without database selected . If default connection change overrides existing connection helper .
11698	Gets connection params
11699	Is the database installed
11700	Return an sql string accordingly to the internat database adapter
11701	Execute the query and return a Zend \ Db \ Resultset \ ResultSet object
11702	Get a repository instance .
11703	Set a model for creation on transaction commit .
11704	Set a model for saving on transaction commit .
11705	Remove a model previously set for creation or save .
11706	Commit all items in the transaction .
11707	Get a pdo store by name .
11708	Get the store config .
11709	Get the store from the config .
11710	Ensures the password is valid
11711	Parse from strings
11712	Accept string parsing
11713	Compare for negociation
11714	Get the radius of the Earth at a specific latitude .
11715	Convert a coordinate into Degree Minute Second format .
11716	Convert Degrees Minutes Seconds to Decimal for a coordinate .
11717	Render of a production error
11718	Render of a debug error
11719	Log the exception in history . log
11720	Creates a configuration file for the extract command using command line options specified .
11721	Creates a configuration file template for the extract command .
11722	Writes messages into PHP files .
11723	Writes messages into POT file .
11724	Create a new Time from an array .
11725	Create a new time from a string .
11726	Create a new time from a date .
11727	Create a new time from seconds .
11728	Invalidates tags .
11729	Flushes the tag manager .
11730	Encodes the tags .
11731	Register the resources if needed
11732	Returns an array with all cookies .
11733	Set a response cookie .
11734	Removes a cookie from the array but does not unset it in the browser .
11735	Ask for user input confirm the answers and continue until the user is satisfied
11736	Gets the labels used in the args
11737	returns a viewable wrapper around the session
11738	Obtains the primary key for the named table .
11739	Obtains the foreign keys information for the named table .
11740	Obtains the indexes information for the named table .
11741	Obtains the unique constraints information for the named table .
11742	Obtains the check constraints information for the named table .
11743	Obtains the default value constraints information for the named table .
11744	Get a setting value .
11745	Will check user access depending on the driver being used . Defaults to using laravel Auth Guard driver
11746	Toggle the DISTINCT flag in a SELECT query .
11747	Set the columns for the SELECT query .
11748	Setup a JOIN table .
11749	Setup a INNER JOIN table .
11750	Setup a LEFT JOIN table .
11751	Setup a LEFT OUTER JOIN table .
11752	Setup a RIGHT JOIN table .
11753	Setup a OUTER JOIN table .
11754	Setup a FULL OUTER JOIN table .
11755	Set grouping fields to the query .
11756	Add AND conditions for groups in HAVING clauses .
11757	Add OR conditions for groups in HAVING clauses .
11758	Setup fields for the ORDER BY clause .
11759	Set a LIMIT and optional OFFSET .
11760	Set an OFFSET to the LIMIT clause .
11761	Build the SELECT query .
11762	Renders the link .
11763	Renders the button .
11764	Renders the locale switcher .
11765	Write an algebraic function of the line
11766	Get the ordinate of a point of the line by its abscissa
11767	Get the abscissa of a point of the line by its ordinate
11768	Find a record by primary key throw a NotFoundException if record does not exists
11769	Find a record by unique key and trhow an exception id record cannot be found
11770	Test if a record exists
11771	Test if a record exists by a predicate
11772	Delete a record by predicate
11773	Delete a record or throw an Exception
11774	Update data into table
11775	Insert data into table
11776	Return table relation reader
11777	Return table primary keys
11778	Return primary key if multiple primary keys found will throw an exception
11779	Return list of table columns
11780	Execute a statement
11781	Return primary key predicate
11782	Check if all columns exists in table
11783	Parses the content as array .
11784	Parses the content as objects .
11785	Sets the return type of responses .
11786	Register the filters and actions with WordPress .
11787	Create a callable to enqueue resources .
11788	Define the type .
11789	Define the name .
11790	Define the position .
11791	Define the damage .
11792	Define the hit level .
11793	Define the meter gain .
11794	Define the inputs .
11795	Add a cancel ability .
11796	Define the frames required to start .
11797	Define the frames displaying the move .
11798	Define the frames required to recover .
11799	Define the difference of frame with the target gets hit to get back to the neutral state .
11800	Define the difference of frame with the target on guard to get back to the neutral state .
11801	Build the desired move .
11802	Note to self - Slack Webhook URLs have a default channel but can be configured to send to any BackTrace class has an error generator
11803	Parse segments data and params into a path .
11804	Parse data for replacements .
11805	Validate a datum .
11806	Find a segment with a param key .
11807	Call Repository generator if user confirms
11808	Ensures the name passed in belongs to a valid class
11809	Returns TRUE if the object is an image
11810	Must return the counting of all model objects
11811	Get console path info
11812	Resolves the current request into a route and the associated parameters .
11813	Return an instance with the specified scheme . This method MUST retain the state of the current instance and return an instance that contains the specified scheme . Implementations MUST support the schemes http and https case insensitively and MAY accommodate other schemes if required . An empty scheme is equivalent to removing the scheme .
11814	Return an instance with the specified user information . This method MUST retain the state of the current instance and return an instance that contains the specified user information . Password is optional but the user information MUST include the user ; an empty string for the user is equivalent to removing user information .
11815	Return an instance with the specified host . This method MUST retain the state of the current instance and return an instance that contains the specified host . An empty host value is equivalent to removing the host .
11816	Return an instance with the specified port . This method MUST retain the state of the current instance and return an instance that contains the specified port . Implementations MUST raise an exception for ports outside the established TCP and UDP port ranges . A null value provided for the port is equivalent to removing the port information .
11817	Parse a single query key = value pair into an existing php array
11818	Parse a key - buffer to place value in array
11819	Sets the query string to the specified variable in the query string .
11820	Sets the specified variable in the query string .
11821	Returns a string representation of this URL .
11822	Normalizes the URL
11823	Returns an Net_URL2 instance representing an absolute URL relative to this URL .
11824	URL is fragment - only
11825	Returns a Net_URL2 instance representing the canonical URL of the currently executing PHP script .
11826	Returns a Net_URL2 instance representing the URL used to retrieve the current request .
11827	Returns the value of the specified option .
11828	A simple version of http_build_query in userland . The encoded string is percentage encoded according to RFC 3986 .
11829	This method uses a regex to parse the url into the designated parts .
11830	- Print display trace data in shell
11831	Translate message to given language . Or suggest language by backtrace
11832	Dirty method to suggest translation language
11833	Get the list of all new states .
11834	To remove canonical states name in the list to avoid error .
11835	To enable and disable states according validations rules .
11836	Get all categories by id .
11837	Displays the login page .
11838	Logs the user out and then redirects to the homepage .
11839	Tries to connect social account to user .
11840	Get build parameter value
11841	Adds a html part to the mail .
11842	Adds an image to the list of embedded images .
11843	Adds a file to the list of attachments .
11844	Get the contents of the given file name as string
11845	Adds a text subpart to the mimePart object and returns it during the build process .
11846	Adds a html subpart to the mimePart object and returns it during the build process .
11847	Adds an html image subpart to a mimePart object and returns it during the build process .
11848	Adds an attachment subpart to a mimePart object and returns it during the build process .
11849	Encodes headers as per RFC2047
11850	Validate and set build parameters
11851	Checks a value and sets error message
11852	Initializes the application component . This method overrides parent implementation by loading the authorization data from PHP script .
11853	Loads authorization data from persistent storage .
11854	Saves authorization data into persistent storage .
11855	Saves the authorization data to a PHP script file .
11856	Create a new json response .
11857	Sets the JSONP callback .
11858	Sets options used while encoding data to JSON .
11859	Get Main layout template
11860	Get words as string .
11861	Update a record .
11862	Delete a record .
11863	Configure PM options
11864	Load config file content
11865	Get memory_limit directive in bytes
11866	Provides an opportunity for extending classes to modify the model in some way when they themselves are not directly responsible for the model creation .
11867	The final rendering of the tool
11868	Add a plugin to the application
11869	Get a config value
11870	Generate a route URL
11871	Create a GET route
11872	Create a HTML response
11873	Create a REDIRECT response
11874	Sets the path segments .
11875	Creates a proxy object using a fluent interface .
11876	Provides an instance of the given class without invoking it s constructor
11877	Retrieves all entities .
11878	Retrieves certain columns of entities .
11879	Retrieves all entities by page .
11880	Retrieves a single entity .
11881	Persists an entity .
11882	Deletes an entity .
11883	Retrieves the number of records in the table .
11884	Creates a new QueryBuilder instance that is pre - populated for this entity name .
11885	Creates a new QueryBuilder instance that is pre - populated for this entity name . Applies scopes to the query builder as well .
11886	Applies the order by request to the query builder .
11887	Creates a NoResultException from a QueryBuilder
11888	Replaces placeholders within a given query with the actual values . Used for debugging .
11889	Adds a method instance
11890	Returns the method with the given name
11891	Stops the main loop and exits the work function
11892	Adds new headers the current HTTP headers set .
11893	HTTP2 server push
11894	Object builder to create and use the Http request client . In this case is set up as default Guzzle Http client .
11895	Object builder to create and use the Photo model of a specific service .
11896	Creates an instance of range with the given argument .
11897	Start new or resume existing session
11898	Update the current session id with a newly generated one
11899	Write session data and end session
11900	Free all session variables
11901	Destroys all data registered to a session
11902	Decodes session data from a session encoded string
11903	Return current cache expire
11904	Returns static class instance which can be used to obtain meta information .
11905	gets module options for select
11906	Get the matrix size
11907	Define the object s walk flag
11908	Define the object s array access flag
11909	Set the matrix contents
11910	Get a cell value by index according to matrix s flags
11911	Set a value by index according to matrix s flags
11912	Rewind a matrix according to its flag value
11913	Go to previous index according to matrix s flag value
11914	Seek to current x less 1
11915	Seek to current y less 1
11916	Seek to previous cell
11917	Go to next index according to matrix s flag value
11918	Seek to current x plus 1
11919	Seek to current y plus 1
11920	Go to next cell
11921	Seek to index according to matrix s flag value
11922	Get current value according to matrix s flag value
11923	Get current index according to matrix s flag value
11924	Test if current value is valid according to matrix s flag value
11925	Test if current x line is valid
11926	Test if current y column is valid
11927	Count the number of values according to matrix s flag value
11928	Seek x and y to an offset
11929	Seek x and y to an integer offset
11930	Test if an offset exists
11931	Get an offset value
11932	Set an offset value
11933	Validates the property value .
11934	Adds allowed view methods for an object
11935	Adds allowed controller methods for an object
11936	Set the main table on which the query operates .
11937	Set the list of tables on which a SELECT query operates .
11938	Add conditions for SELECT UPDATE and DELETE queries with an AND operator .
11939	Add conditions for SELECT UPDATE and DELETE queries with an ON operator .
11940	Set a static rule for a spec . This is a single string value
11941	Set Static Rule Reference .
11942	Resolve named filters and convert them to filter objects .
11943	Marks the ending of an HTML body section .
11944	Registers a JS file .
11945	Registers a JS code block defining a variable . The name of variable will be used as key preventing duplicated variable names .
11946	Return the default locations of user and system configuration files
11947	Static singleton method . If you want to keep only one instance of this class in use this method will give you a reference to the last created PEAR_Config object if one exists or create a new object .
11948	Reads the existing configurations and creates the _channels array from it
11949	Merges data into a config layer from a file . Does the same thing as readConfigFile except it does not replace all existing values in the config layer .
11950	Writes data into a config layer from a file .
11951	Reads configuration data from a file and returns the parsed data in an array .
11952	Retrieve the default channel .
11953	Returns a channel - specific configuration value prioritizing layers as per the layers property .
11954	Set the list of channels .
11955	Get the type of a config value .
11956	Get the documentation for a config value .
11957	Get the short documentation for a config value .
11958	Get the parameter group for a config key .
11959	Get the list of parameter groups .
11960	Get the list of the parameters in a group .
11961	Get the list of allowed set values for a config value . Returns NULL for config values that are not sets .
11962	Get all the current config keys .
11963	Remove the a config key from a specific config layer .
11964	Temporarily remove an entire config layer . USE WITH CARE!
11965	Tells what config layer that gets to define a key .
11966	Tells whether a given key exists as a config value .
11967	This is to allow customization like the use of installroot
11968	Helper function to process each element in the section and handle the _extends inheritance attribute .
11969	Replace any constants referenced in a string with their values
11970	Get parameter callback .
11971	Check if the set value on this enum is a valid value for the enum .
11972	Get the valid values for this enum .
11973	Get the reflection valid values .
11974	Set the enum value .
11975	Initialize a task instance with the parameters
11976	Unlike other tasks the installed file name is passed in instead of the file contents because this task is handled post - installation
11977	Record a success event
11978	Record a idle event
11979	Get amount estimated . It is real amount without virtual amounts .
11980	Get the request methods .
11981	Disable All Automatic Updates 3 . 7 +
11982	Check the outgoing request
11983	Hide all noctices in wp - admin
11984	Test if point A is part of one of quadrilateral s segments
11985	Test if the quadrilateral is a parallelogram
11986	Get multidimenional array value
11987	Check if the last key from chain is defined
11988	Find an application
11989	Find all applications
11990	Compare two number systems .
11991	Get all digits of a given number according to this number - system .
11992	Build a number based on given digits .
11993	Check if a string value is a valid number of this system .
11994	wrap all redis calls to handle profiling
11995	Generate cache key from method arguments .
11996	handle connection management
11997	Returns a string representation of the given command including arguments
11998	Get Mongo document from domain event message .
11999	Get domain event message from Mongo document .
12000	Reset state of service
12001	This is here to format standard form validation errors so that we can use customized error messaging instead of the 1 message only practice from using annotations .
12002	Called after all forms have been validated . Passed the validation result
12003	Utility method for attaching a form data event listener Utility method for attaching a form data event listener for a form by a given tag . The optional callable method should accept and return a Param object .
12004	Generate forms from entities
12005	Modify array to remove the specified value
12006	Ensures generateEntities is only ever invoked once . Fires the EVENT_CONFIGURE_ENTITY event on each entity to allow for any configuration .
12007	Utility to replace an entity at a tag
12008	Removes some elements from being validated ; best used for subforms
12009	Handler for subform data
12010	Function meant to be run as a callback for attacheToMainEntity .
12011	Adds response to the queue
12012	Creates a new HTTP_Request2_Response object from a string
12013	Creates a new HTTP_Request2_Response object from a file
12014	Makes an entity the head version .
12015	Determines if the entity needs a new version created .
12016	Persists an entity . Creating a new version of it if needed .
12017	Clears old versions of an entity .
12018	Removes the path directories if they are empty .
12019	Check the distant source key .
12020	Copies or moves the distant source key to target key .
12021	Reconnects the file system adapter if possible .
12022	Returns whether the key is distant .
12023	Recursively create a long directory path
12024	Find a single entity given its id .
12025	Create a new model .
12026	Save an existing model given criteria to find . If no criteria specified uses all model properties .
12027	Delete an existing model .
12028	Validate the passed entity .
12029	Select entities by given criteria .
12030	Build a select query statement by given criteria .
12031	Set the criteria in the query builder .
12032	Set an array criterion in the query builder .
12033	Set the order by options in a query builder .
12034	Save or create or delete a row .
12035	Set properties for save delete or create queries .
12036	Set properties for save create or delete statements .
12037	Get an entity with all its relations .
12038	Ensure all required properties have been passed .
12039	Execute broadcast operations
12040	Execute an operation to broadcast!
12041	Get script source link .
12042	Display Captcha .
12043	Display image Captcha .
12044	Display audio Captcha .
12045	Verify Response .
12046	Calls the reCAPTCHA siteverify API to verify whether the user passes CAPTCHA test using a PSR - 7 ServerRequest object .
12047	Get script tag .
12048	Get script tag with a callback function .
12049	Check key .
12050	Check if the value is a string value .
12051	Send verify request to API and get response .
12052	Initializes the view component .
12053	Finds the view file based on the given view name .
12054	Static helper for rendering any php file
12055	Registers all the post types added
12056	Generates a new token object
12057	Generates a new memory token object ; decrypted token is stored in memory during execution
12058	Builds the project path from the basePath and the given project folder then executes the composer prototyp and composer update commands with the commandBuilder and the shell .
12059	Callback for message filter .
12060	Normal but significant events .
12061	Interesting events .
12062	Detailed debug information .
12063	Print raw message
12064	Profiler shortcut method for end
12065	Log message to STDOUT
12066	Convert message to string
12067	Convert exception to string
12068	Colorize text for console
12069	Get callee data from backtrace array
12070	Replace placeholders in text
12071	Format mixed value as a String
12072	Search SEO data . If not found will be returned new SEO model with empty data
12073	Get table name of SEO data table for ActiveRecord
12074	Delete all SEO data for ActiveRecord
12075	Save SEO data
12076	Creates the connection
12077	PEAR_Command_Common constructor .
12078	Return a list of all the commands defined by this class .
12079	Return a list of all the command shortcuts defined by this class .
12080	Returns the help message for the given command
12081	Returns the help for the accepted arguments of a command
12082	Execute update after update command has been executed if applicable .
12083	Parse database config and prepare DSN
12084	Escape values for using in queries
12085	Helper function to add a template root directory .
12086	Count the number of objects in a collection having the given value .
12087	Count the number of objects in a collection with the given values .
12088	Creates a query builder .
12089	Returns the EntityManager loading it if it hasn t been created yet .
12090	Get current path from request & current controller
12091	Instance loader and setter
12092	Clear a container entry
12093	Global bundle getter
12094	Global bundle setter
12095	Clear a container bundle entry
12096	Invalidates the cache .
12097	Create the dependency database if it doesn t exist . Error if the database is newer than the code reading it .
12098	Get a list of the actual dependencies of installed packages that depend on a package .
12099	Get a list of dependencies of this installed package
12100	Register dependencies of a package that is being installed or upgraded
12101	Remove dependencies of a package that is being uninstalled or upgraded .
12102	Rebuild the dependency DB by reading registry entries .
12103	Register usage of the dependency DB to prevent race conditions
12104	Release usage of dependency DB
12105	Load the dependency database from disk or return the cache
12106	Write out the dependency database to disk
12107	Auto load extensions
12108	Register theme module
12109	Render sections of given location inside wrapper
12110	Error action default
12111	Set the foreground .
12112	Set the background .
12113	Set foreground or background to black .
12114	Set foreground or background to red .
12115	Set foreground or background to green .
12116	Set foreground or background to yellow .
12117	Set foreground or background to blue .
12118	Set foreground or background to magenta .
12119	Set foreground or background to cyan .
12120	Set foreground or background to white .
12121	Set foreground or background to default .
12122	Set a color .
12123	Remove an option .
12124	Format a message .
12125	Logs a command
12126	Parse uploaded file .
12127	WARNING - do not use this function unless you know what you re doing
12128	Determines whether this package . xml has post - install scripts or not
12129	Initialize post - install scripts for running
12130	Directly set the array that defines this packagefile
12131	This should only be used to retrieve filenames and install attributes
12132	Return configure options array if any
12133	Determines whether this package claims it is compatible with the version of the package that has a recommended version dependency
12134	Determines whether the passed in package is a subpackage of this package .
12135	Get the contents of a dependency group
12136	Key - friendly array_splice
12137	Builds the bundle .
12138	Try to get the true modulo
12139	This method is an alternative to the native a % b using the entire part method . The result will always be in range [ 0 ; b [ and have the same sign as b .
12140	Called when the request notifies us of an event .
12141	Logs the given message to the configured target .
12142	Configure query to work with repository entity .
12143	Get related entity alias used in query . Will be used entity class name without namespace
12144	Turns the query being built into a bulk delete query that ranges over a certain entity type .
12145	Turns the query being built into a bulk update query that ranges over a certain entity type .
12146	Creates and adds a query root corresponding to the entity identified by the given alias forming a cartesian product with any existing query roots .
12147	Sets a new value for a field in a bulk update query .
12148	Specifies a grouping over the results of the query . Replaces any previously specified groupings if any .
12149	Adds a grouping expression to the query .
12150	Specifies an ordering for the query results . Replaces any previously specified orderings if any .
12151	Adds an ordering to the query results .
12152	Limit max number of results
12153	Limit results with selected page .
12154	Fetch first entity .
12155	Fetch first column of first result row .
12156	Fetch all entities .
12157	Auto append parameter and replace them with the parameter name .
12158	Find unused parameter name .
12159	A parseCallMethods function .
12160	A callFunctionalityFields function .
12161	Checks a value whether to be an array if its empty and when not an empty array if it s an associative one .
12162	Return a description of the given subject .
12163	Timestamp log a event with a time .
12164	Print all timestamp to a table .
12165	Returns load time of the page
12166	Get the most time consuming domain .
12167	Render card header
12168	Render card top image
12169	Render card body
12170	Render card footer
12171	Get route group name if empty no grouping
12172	Returns properties corresponding to the options for the action id Child classes may override this method to specify possible properties .
12173	Returns the help information for the anonymous arguments for the action .
12174	Returns the help information for the options for the action .
12175	Returns the header collection . The header collection contains incoming HTTP headers .
12176	Returns whether this is an Adobe Flash or Flex request .
12177	Returns the raw HTTP request body .
12178	Returns the request parameters given in the request body .
12179	Returns the schema and host part of the current request URL .
12180	Returns the relative URL of the entry script . The implementation of this method referenced Zend_Controller_Request_Http in Zend Framework .
12181	Get server parameters
12182	Returns the content types acceptable by the end user .
12183	Returns the languages acceptable by the end user . This is determined by the Accept - Language HTTP header .
12184	Gets the Etags .
12185	Returns the token used to perform CSRF validation .
12186	Generates an unmasked random token used to perform CSRF validation .
12187	Get default server parameters
12188	Fired on login
12189	Crops a file and returns crop s web path
12190	Returns the name for a cropped file
12191	Crops a file
12192	Returns image size info
12193	Gets the permutations of paths to the given file .
12194	Get annotations from a given string .
12195	Get annotation matches .
12196	Set a matched annotation .
12197	Set the annotation s arguments .
12198	Get the properties for a matched annotation .
12199	Process the properties .
12200	Filter a string of arguments into an key = > value array .
12201	Determine if a value is a defined constant .
12202	Get an annotation model from the annotations map .
12203	Clean a match from asterisks and new lines .
12204	Return array of subscribed events
12205	Handler for the main commands
12206	Handler for the help command
12207	Get a single provider class by command
12208	Add a left join to the query .
12209	Add a right join to the query .
12210	Add a right join where clause to the query .
12211	Get the SQL representation of the query .
12212	Fetch all values of a single column from the result set into an array .
12213	Set the object name
12214	Set the object structure
12215	Set the object database name
12216	Set the object model name
12217	Build the object model
12218	Build an array of the object fields
12219	Register the validation factory .
12220	Service locator config for Logger component .
12221	Returns the site ID that target elements should have .
12222	Return parent record
12223	Renders a single collapsible item group
12224	Executes the query and returns all results as an array .
12225	Executes the query and returns a single row of result .
12226	Executes the query and returns the first column of the result .
12227	Returns the number of records .
12228	Returns a value indicating whether the query result contains any row of data .
12229	Makes and records specific method call for object prophecy .
12230	Searches for calls by method name & arguments wildcard .
12231	PEAR_Registry constructor .
12232	Make sure the directory where we keep registry files exists .
12233	Make sure the directory where we keep registry files exists for a non - standard channel .
12234	Make sure the directory where we keep registry files for channels exists
12235	Get the name of the file where data for a given channel is stored .
12236	Get the name of a channel from its alias
12237	Get the alias of a channel from its alias or its name
12238	Lock the registry .
12239	Determine whether a channel exists in the registry
12240	Determine whether a mirror exists within the deafult channel in the registry
12241	Determines whether the parameter is an alias of a channel
12242	Retrieve a raw array of channel data .
12243	For future expandibility purposes separate this
12244	Does this filter match?
12245	Retourne l url de TinyMCE
12246	Create an instance of the class sets the value property and returns the object .
12247	Get Doctrine Entity Manager
12248	Resolve a given class name .
12249	Check the field is the given value .
12250	Determines if the given route exists . If a parameter is provided it will determine whether the routes are fetched by name or action .
12251	Creates a directory hard copy
12252	Initializes the widget . If you override this method make sure you call the parent implementation first .
12253	Returns next date of given date in given format
12254	Returns previous date of given date in given format
12255	Creates an array of consecutive dates
12256	Get file object
12257	Get dir object
12258	Open file with given flags
12259	Create a file
12260	Put contents into file
12261	Get file contents
12262	Perform chmod operation
12263	Lock file for some time or until some operation is not finished
12264	Get promise of unlocking file
12265	Ensure that object is implementing FileInterface
12266	Ensure that object is implementing DirectoryInterface
12267	Check if unlock timer is set or create it
12268	Create from global environment
12269	Render the section
12270	Add an on clause to the join .
12271	Add an on where clause to the join .
12272	Add an on where is null clause to the join .
12273	Array to collection
12274	Specifies if the move is a normal special or super .
12275	Get entry from DB
12276	Update existing entry in DB
12277	Downgrades the application by reverting old migrations .
12278	Truncates the whole database and starts the migration from the beginning .
12279	Displays the migration history .
12280	Displays the un - applied new migrations .
12281	Creates a new migration .
12282	Downgrades with the specified migration class .
12283	Migrates to the specified apply time in the past .
12284	Migrates to the certain version .
12285	Load the database adapter
12286	Connexion to the database
12287	Add a query and its results in the object cache
12288	Get a query from the object cache if so
12289	Execute an array query
12290	Add a table in the database
12291	Add fields in a table
12292	Get infos of a table in the database
12293	Check if a table exists in the database
12294	Build a query string to add a field in a table
12295	Escape a string using the internal PHP adapter function
12296	Clear all query constructors
12297	Build the condition of a query
12298	Add a WHERE string to a query
12299	Alias for a WHERE statement with a IN sign
12300	Alias for a OR WHERE statement
12301	Alias for a AND WHERE statement
12302	Set the ORDER BY condition of a query
12303	Global query construction using the query constructors values
12304	Execute the query constructing it with the query constructors values
12305	Execute a single query constructing it with the query constructors values
12306	Get All SmarTwig Extensions
12307	Return current instance
12308	Change store path
12309	Loading structure from YAML files First loading structure . yml if it exists
12310	Return array with structure for specified model
12311	Save structure to relative YML file
12312	Dumps current database data to YML files
12313	Load data from YML files into database with replacing
12314	Get list of transactions for given account between specified dates .
12315	Set query state
12316	Get Query commands queue length
12317	Process current queue
12318	Execute simple query
12319	Set connection status
12320	Handle message response callback
12321	Data processing callback
12322	Cancel current request
12323	Redirect the user to the provider authentication page .
12324	Obtain the user information from the provider .
12325	Unlink the social account .
12326	Update the social settings .
12327	Check if the provider is enabled or not .
12328	Set the configuration to run socialite with a defined provider .
12329	Registers the social account .
12330	Cleanup callback for timer
12331	Pack record into array with needed format
12332	Unpack data from record
12333	Create cleanup timer
12334	Determine if the top level of a selected path has a submenu to display
12335	Set value for field account_id
12336	Set value for field user_id
12337	Get Account data object .
12338	Get User data object .
12339	Pass the exception to be handled by the successor .
12340	Clears html tags from source string
12341	Set up any additional configuration variables that file roles require
12342	Get a list of file roles that are valid for the particular release type .
12343	Return an array of roles that are affected by the baseinstalldir attribute
12344	Shortens a string to the given length and appends the additional string that can be wrapped by a link when a wrap url is set .
12345	Sets a new blocksize
12346	Get config data by its key
12347	Generate config files names
12348	Merge config data with given one
12349	Read configs and merge
12350	Read particular config file
12351	Normalize config file path
12352	Apply domain event message to aggregate .
12353	Record payload and meta data into a new domain event message .
12354	Sets one of the object related object
12355	Automatic snippet invalidation Do not call manually
12356	Useful for cases where you don t want automatic AJAX to kick in .
12357	If AJAX then forward else redirect .
12358	Init plugins and extra plugins on the engine
12359	Set many variables
12360	Fetch prepared string template and return complete html document
12361	Load plugins from a directory
12362	Build a BusinessHours from an array .
12363	Create a new BusinessHours with a different timezone from an existing BusinessHours .
12364	Flatten days intervals .
12365	Validation warning . Does not mark the object contents invalid .
12366	Get the contents of a file listed within the package . xml
12367	Parses imports statement on YML file .
12368	Parses YAML into a PHP array .
12369	Sets YML parameters
12370	Calculates length of the request body adds proper headers
12371	Execute the command
12372	serialize any value
12373	Ensures that only one entity can be published at a time .
12374	Sets the ClassName value .
12375	Sets the IdColumn value .
12376	Sets the NameColumn value .
12377	Sets the DataColumn value .
12378	Sets the LifetimeColumn value .
12379	Sets the ModifiedColumn value .
12380	Sets the CreatedColumn value .
12381	Return all the providers supported .
12382	Returns all the available providers .
12383	Add filters to check that the request and repsonse formats are supported by the application .
12384	Set defaults and build the conneg service .
12385	This before middleware validates whether the application will be able to respond in a format that the client understands .
12386	This before middleware validates that the request body is in a format that the application understands .
12387	Returns saved values one by one until last one then continuously returns last value .
12388	Attempt to discover a channel s remote capabilities from its server name
12389	For simpler unit - testing
12390	Retrieve the directory that downloads will happen in
12391	Detect recursive links between dependencies and break the cycles
12392	Set up the dependency for installation parsing
12393	Get the value of a specific argument value from current parsed URL
12394	Outputs a new line
12395	Returns the available commands the Console provides
12396	Register NoCaptcha service .
12397	Register Validator rules .
12398	Register Form Macros .
12399	Parse a channel . xml file . Expects the name of a channel xml file as input .
12400	Parse channel information from different sources
12401	Return an XML document based on previous parsing and modifications
12402	Validation error . Also marks the object contents as invalid
12403	Get the URL to access a base resource .
12404	Empty all protocol definitions
12405	Set a channel s protocols to the protocols supported by pearweb
12406	Get the unserialized XML representing a mirror
12407	Set the package validation object if it differs from PEAR s default The class must be includeable via changing _ in the classname to path separator but no checking of this is made .
12408	Add a protocol to the provides section
12409	Add a protocol to a mirror s provides section
12410	Retrieve the name of the validation package for this channel
12411	Retrieve the object that can be used for custom validation
12412	Returns a value indicating whether a property can be read .
12413	Returns a value indicating whether a property can be set .
12414	Returns PHP code for a cached container that can be loaded quickly on runtime .
12415	Loads the cache parameters for all entries .
12416	Adds an entry to the container .
12417	Returns value for the container entry with the given identifier .
12418	Returns container entry for the given identifier .
12419	Tells if the entry with the given identifier exists in the container .
12420	Removes an entry from the container .
12421	Apply attribute conditions
12422	Creates an multidimensional array out of an array with keynames
12423	helper callback for extracting Archive_Tar errors
12424	Return models configuration file
12425	Get models definition according to options
12426	Save model definition
12427	Get internal metadata reader
12428	Set value for field bank_name
12429	Set value for field bank_color
12430	Set value for field bank_parser
12431	Aggregates a collection of CSS resources .
12432	Download and return a resource .
12433	Create local copy of remote images .
12434	Creates a validator object .
12435	Validates a single attribute . Child classes must implement this method to provide the actual validation logic .
12436	Validates a given value . You may use this method to validate a value out of the context of a data model .
12437	start the app
12438	catch fatal error
12439	build url with controller action and url param
12440	Returns the canonical URL of the currently requested page .
12441	Normalizes route and makes it suitable for UrlManager . Absolute routes are staying as is while relative routes are converted to absolute ones .
12442	Application is working if all tests are OK & no down exception is set
12443	Returns all view names in the database .
12444	Retrieve an item from the cache by key .
12445	Store an item in the cache .
12446	Store multiple items in the cache for a given number of minutes .
12447	Retrieve an item from the cache and delete it .
12448	Store an item in the cache if the key does not exist .
12449	Get an item from the cache or store the default value .
12450	Remove an item from the cache .
12451	Returns only digits from source string . If string is 11 chars length and first char is 7 then that char is stripped
12452	Config application s wide options
12453	Get option from input or config array
12454	Get option with typecast
12455	Load config data from file
12456	Load config data
12457	Render config as table in console
12458	Get string representation of value
12459	Normalize config array key path
12460	set this as a package . xml version 2 . 1
12461	Reset the listing of package contents
12462	Reset dependencies prior to adding new ones
12463	Set the kind of package and erase all release tags
12464	Get the current release tag in order to add to it
12465	Add a file to the current release that should be installed under a different name
12466	Add a file to the current release that should be ignored
12467	Add an extension binary package for this extension source code release
12468	Add a configureoption to an extension source package
12469	Set an installation condition based on php version for the current release set
12470	Set an installation condition based on operating system for the current release set
12471	Set an installation condition based on architecture for the current release set
12472	Generate a valid change log entry from the current package . xml
12473	Returns TRUE if the object is a video file
12474	Scan video infos
12475	Set value for field transaction_date
12476	Set value for field transaction_amount
12477	Set value for field transaction_type
12478	Set value for field transaction_comment
12479	Set value for field category_id
12480	Set value for field account_id_virtual
12481	Create a new interval from time strings .
12482	Create a database connection to SQLite ot MySQL based on a configuration array .
12483	Factory for a Sqlite connection .
12484	Factory for a MySQL connection .
12485	Run a query using a prepared statement and return an appropriate value .
12486	Get a list of tables in the database .
12487	Run a query using a prepared statement and return the first row .
12488	Run a query using a prepared statement and return the first column of the first row .
12489	Find out if the database contains a table .
12490	Find out if a table in the database contains a column .
12491	Finds the Primary Key fields of a table .
12492	Get a list of the table fields .
12493	Log a query to the configured logger .
12494	Listen to the bootstrap event
12495	Optimize the application .
12496	Sets the encryption keys
12497	Sets private keys
12498	Sets envelope keys
12499	Sets a internal compression for values to encrypt
12500	Returns a formatted form of the datetime property if the property is not null
12501	Suppression d un utilisateur
12502	Returns nth argument if has one null otherwise .
12503	Creates the migration history table .
12504	Adds a filter to the chain
12505	Returns a value filtered through a specified filter class without requiring separate instantiation of the filter object .
12506	If applicable populate the query s primary model into the related records inverse relationship .
12507	Finds the related records and populates them into the primary models .
12508	Populate relation for single primary model
12509	Populate relation for multiple primary models
12510	show all the invalid properties with reasons .
12511	Flattens a multidimensional array by using a glue
12512	Generate entity from model class
12513	Checks if two Text objects are equal
12514	Checks if this Text object ends with another Text object
12515	Checks if this Text object contains another Text object
12516	Get part of this Text object
12517	Replaces parts of this Text object based on a search and replace
12518	Replaces parts of this Text object based on a search and replace via a regex
12519	This method is called at the beginning of inserting or updating a record .
12520	This method is invoked before deleting a record .
12521	Repopulates this active record with the latest data .
12522	Updates the whole table using the provided attribute values and conditions .
12523	Deletes rows in the table using the provided conditions .
12524	Inserts a row into the associated database table using the attribute values of this record .
12525	Inserts an ActiveRecord into DB without considering transaction .
12526	Deletes an ActiveRecord without considering transaction .
12527	Returns provided list of all classes returned by the container methods .
12528	Tells the identifier to use for the given provider method .
12529	Return all the values that are not default in Prismic
12530	Returns all available command names .
12531	Displays the overall information of the command .
12532	Create controller helper
12533	Handles uncaught PHP exceptions .
12534	Handles fatal PHP errors .
12535	Logs the given exception .
12536	Get trace from exception
12537	Reduce length of exceptions stack trace
12538	Proxy to Helper with added parameter at given position
12539	Proxy to Helper with added RequestApplicationInterface parameter at given position
12540	Inject variable to arguments array at given position
12541	Ensure that string is not a Translation promise
12542	Authenticates using the configuration authentication method and the creates the API using the the repository api
12543	Generalize the local config based on the parser class object .
12544	create a random string
12545	Get the entity as an array for saving to the data store .
12546	Registers a custom error class in addition to the internal ones . Note that custom errors unique id starts from 0x1000 .
12547	Show form with auth items for user .
12548	Request information for countries . If no parameter is passed the complete list of countries will be searched .
12549	Encode au format HTML
12550	Returns the default reason phrase for the given code or all reason phrases
12551	Returns either the named header or all response headers
12552	Returns the body of the response
12553	Decodes the message - body encoded by deflate
12554	Check if entity exists in source
12555	Clear entity data
12556	conn sta checking
12557	Get all headers from server .
12558	Get the correct HTTP header name .
12559	Write messages to the console .
12560	Write a message to the console .
12561	Set the null types
12562	Find the file in the possible paths
12563	Get an array of possible files .
12564	Start the session .
12565	Get an item from the session .
12566	Set an item into the session .
12567	Remove a session item .
12568	Get a csrf token for a unique token id .
12569	Validate a csrf token .
12570	Convert word in to the human format .
12571	Deletes a file or a complete directory tree
12572	Moves the source to the destination . Both parameter have to be a full paths . On success the return value will be the destination path . Otherwise it will be boolean false .
12573	Cleans up a filename string from all characters which can make trouble on filesystems .
12574	Dispatch an event if the dispatcher is loaded
12575	This method will be used by set_error_handler
12576	This method will be used by register_shutdown_function
12577	Saves item .
12578	Returns the error as a string with all necessary details .
12579	Return XML object .
12580	Convert tag format into PHP array .
12581	Load and parse a configuration file
12582	Parse and set a configuration array
12583	Get a configuration stack or entry
12584	Rebuild a configuration array
12585	Parse a configuration stack or entry
12586	Parse a configuration stack array recursively
12587	Create a join clause constraint segment .
12588	Compile a where null clause .
12589	Compile an insert statement into SQL .
12590	Compile an update statement into SQL .
12591	Compile a delete statement into SQL .
12592	Wrap a value in keyword identifiers .
12593	Sets argument wildcard .
12594	Sets custom promise to the prophecy .
12595	Sets custom prediction to the prophecy .
12596	Checks provided prediction immediately .
12597	This method create a new service gallery object to interact with the external api service .
12598	Takes account credentials and calls the user object to make the requests to get the api authorization .
12599	+ \ Labi \ Operators \ CreatorInterface
12600	- \ Labi \ Operators \ CreatorInterface
12601	Scans CSS content for resources .
12602	This method takes a callable type that takes the wrapped value of the current Some as it s arguments and returns an Option type . The Option type returned by the passed in callable is returned by this method
12603	This function takes a callable as a predicate that takes the wrapped value of the current Some as it s argument . If the predicate returns true the current Some is returned . If the predicate returns false a new None is returned .
12604	Execution of a callback array on an entry of the data array
12605	Execution of one callback on a value returning it by reference
12606	Parse a function name for a callback extracting the arguments if so
12607	Creates and returns constraints for a file field
12608	Calculates and returns values for the size constraint
12609	Get controller if applicable
12610	Get controller action if applicable
12611	Resolve route for request
12612	Parse data from dispatcher
12613	Process response from controller action
12614	Get Exception by Router error code
12615	Get terminal width and height
12616	Get the current operating system
12617	Full aliasing of internationalization
12618	Full \ CarteBlanche \ App \ Locator handler
12619	Formats the value as an HTML - encoded plain text .
12620	Formats the value as a mailto link .
12621	Formats the value as a decimal number .
12622	Formats the value in bytes as a size in human readable form for example 12 KB .
12623	Shows create form .
12624	Shows update form .
12625	Checks for existing class file of a given classname
12626	Set corresponding fields in an object from result set .
12627	Retrieve first column in results set
12628	Filters out trashed entities .
12629	Filters everything except trashed entities .
12630	Emulates request resolving in console
12631	Get the value and if it s set unset it
12632	Retrieves a message header value by the given case - insensitive name . This method returns an array of all the header values of the given case - insensitive header name . If the header does not appear in the message this method MUST return an empty array .
12633	Return an instance without the specified header . Header resolution MUST be done without case - sensitivity . This method MUST be implemented in such a way as to retain the immutability of the message and MUST return an instance that removes the named header .
12634	Return an instance with the specified message body . The body MUST be a StreamInterface object . This method MUST be implemented in such a way as to retain the immutability of the message and MUST return a new instance that has the new body stream .
12635	Get icon type .
12636	Get all types objects .
12637	Bind a class to a template with specified parameters
12638	Renders an exception using ansi format for console output .
12639	Colorizes a message for console output .
12640	Get cookie for Set - Cookie header
12641	Convert cookie data array to Set - cookie header string
12642	Combine individual sections with their parent section
12643	Walk a key split by the key separator into an array up and set the respective value on the leaf
12644	Explodes string into array optionally trims values and skips empty ones .
12645	Send a mail report to the website contact
12646	The not found error page
12647	Extract parameters value from path
12648	Gets controller instance . Controller instance is produced with factory of name from request or default name from configuration .
12649	get button html code
12650	get item option html code
12651	Evaluates a PHP expression .
12652	Get A Zone based on the Name
12653	PUT OR POST
12654	Return a synthetic table
12655	Return a transaction object
12656	Return default metadata reader associated to an adapter
12657	Set value for field category_parent_id
12658	Get BudgetCategory data object .
12659	Get list of CategoryWord data objects .
12660	Flush the cache .
12661	Add cached key .
12662	Remove cached key .
12663	Flush the cache data .
12664	Additionally converts 1 1 and true to true and 0 0 and false to false
12665	Create a Param instance
12666	Converts an iterable collection into a raw array
12667	Fires when command is loaded into console application
12668	Add a route group to the array
12669	Get all annotations for a class and its members by type .
12670	Set the properties for a service annotation .
12671	Get a service from a service annotation .
12672	Get a service context from a service context annotation .
12673	Get cache component
12674	Get query builder
12675	Create inner component
12676	To get the token from a stated class .
12677	To get the token from a stated class instance .
12678	List packages in a category of a REST server
12679	Return an array containing all of the states that are more stable than or equal to the passed in state
12680	Compiles the command that will be executed
12681	Generates a list of arguments to be appended onto the executed path .
12682	Executes the process .
12683	Write the template on disk
12684	Replace values on stream template
12685	Set a single route .
12686	Helper function to set a GET addRoute .
12687	Helper function to set a POST addRoute .
12688	Helper function to set a PUT addRoute .
12689	Helper function to set a PATCH addRoute .
12690	Helper function to set a DELETE addRoute .
12691	Helper function to set a HEAD addRoute .
12692	Get a route by name .
12693	Get a route url by name .
12694	Get a route from a request .
12695	Get a route by path .
12696	Determine if a uri is valid .
12697	Dispatch the route and find a match .
12698	Setup routes .
12699	Set a dynamic route s properties .
12700	Validate the route url .
12701	Try to match a static route by path and method .
12702	Try to match a dynamic route by path and method .
12703	Get a matched static route .
12704	Get a matched dynamic route .
12705	Dispatch a route s before request handled middleware .
12706	Dispatch a route s after request handled middleware .
12707	Get a response from a dispatch .
12708	Setup the router from cache .
12709	Setup annotated routes .
12710	Renders the header HTML markup of the modal
12711	Renders the toggle button .
12712	Get gettext file class
12713	Returns an array or other iterable object containing results
12714	Add where clauses to the query
12715	Default search hook for datatables
12716	This function is passed the datatables search query value and should appropriately filter the query builder object based on what makes sense for this entity .
12717	If there is some ordering that needs to be applied do it here
12718	Set the offset for the query results
12719	Set the limit for the query results
12720	Finds an element in this domain which has the specified ID
12721	Allows you to track which tables you have already joined on this query
12722	Returns the column name selected for the sort
12723	Uses datatables request paramters to determine the column name to order by
12724	Check if a Phonenumber is valid
12725	replace XML entities
12726	reverse XML entities
12727	build an xml declaration
12728	build a document type declaration
12729	create string representation of an attribute list
12730	Collapses empty tags .
12731	create a tag
12732	create a start element
12733	split qualified name and return namespace and local part
12734	check whether string is valid XML name
12735	Dispatch callable object
12736	Tag response event handler .
12737	Invalidate tags event handler .
12738	Performs validation before the entity is persisted .
12739	Interpolates context values into the message placeholders .
12740	Test if two points are in the same space type
12741	Test if two points are in the same position
12742	Get the intersection point between two lines
12743	Test if two segments are perpendiculars
12744	Test if two segments are parallels
12745	Get the directions between two points for each axis
12746	Get the directions between two points
12747	Executes query and returns all results as an array .
12748	Prepare query with relations
12749	Removes duplicated models by checking their primary key values . This method is mainly called when a join query is performed which may cause duplicated rows being returned .
12750	Executes query and returns a single row of result .
12751	Validate a header value .
12752	Assert a header value is valid .
12753	Query the service and save result
12754	Build the request uri for all common parameters
12755	Sets the language for the result
12756	Set the used mediatype
12757	Set the result format
12758	Set the limit
12759	Set the entity for the result
12760	Set the attribute you want to search in the iTunes store . This is relative to the set media type .
12761	Set a custom callback function you want to use when returning search results . This setting works only when result format is set to RESULT_JSON
12762	Set the flag indicating whether or not you want to include explicit content in your search result
12763	Returns all photo currently available in a gallery .
12764	Logging method .
12765	Create and register a temporary directory .
12766	Returns information about a package file . Expects the name of a gzipped tar file as input .
12767	Returns information about a package file . Expects the name of a package xml file as input .
12768	Returns information about a package file . Expects the contents of a package xml file as input .
12769	Returns package information from different sources
12770	get article with defined Id with all stored offer data
12771	get all articles with all stored offer data
12772	search article by EAN and return resultset
12773	Set up a logger to write to logFile
12774	Set up the logger to send an email
12775	Reads a logfile line by line and makes it into an array
12776	Creates an array from one log line
12777	Application specific shutdown handling
12778	Defines the request to treat
12779	Distributes the application actions controllers and views
12780	Load a new bundle namespace and map it to its path
12781	Add a booting error
12782	Initialize a path from a constant
12783	References a path value
12784	Get a path value
12785	Build an app absolute path
12786	Get current user name running the app
12787	Define the current kernel mode
12788	Load the default configuration file
12789	Initializes the component .
12790	Loads asset bundle class by name .
12791	Returns the asset converter .
12792	Generate a CRC32 hash for the directory path . Collisions are higher than MD5 but generates a much smaller hash string .
12793	Adds a list of contacts to the replytolist
12794	Creates a new user with the provided details
12795	Runs when the library is loaded to authenticate and resume the user session
12796	Calculate a mathematical expression that uses pokemath - numbers
12797	Get provider URL to fetch user details
12798	Execute raw query
12799	Generates the meta tags containing CSRF token information .
12800	Generates a label tag .
12801	Generates a button tag .
12802	Generates a submit button tag .
12803	Generates a submit input button .
12804	Generates a reset input button .
12805	Generates a hidden input field .
12806	Generates a password input field .
12807	Process checkbox and radio options array
12808	Set the hours .
12809	Set the minutes .
12810	Set the seconds .
12811	Check if the time elements are valid .
12812	Write a file .
12813	Write a file with a stream .
12814	Update an existing file .
12815	Update an existing file with a stream .
12816	Write a file or update a file depending on existence .
12817	Write a file or update a file depending on existence with a stream .
12818	Rename a file .
12819	Copy a file .
12820	Get a file s meta data .
12821	Get a file s mime type .
12822	Get a file s size .
12823	Get a file s timestamp .
12824	Get a file s visibility .
12825	Set a file s visibility .
12826	Set a file s visibility to public .
12827	Set a file s visibility to private .
12828	List the contents of a directory .
12829	Get the local flysystem adapter .
12830	Get the s3 flysystem adapter .
12831	Process current request
12832	This method retrieves the request body in any supported format and deserializes it .
12833	checks the access for this operation based on the annotations defined for this operation
12834	Parses a DocBlock comment into an array of lines .
12835	Construct a path with the directory separator prepended .
12836	authentication client with defined login and password ; return Auth Object
12837	get data from url
12838	parse Json data and return data as array
12839	get all data from url
12840	Get related entity alias used in query . Will be used entity class name without namespace .
12841	Gets an ExpressionBuilder used for object - oriented construction of query expressions .
12842	Creates a new result set mapping builder for this entity . The column naming strategy is INCREMENT .
12843	Finds entity ids .
12844	Retrieve the minimum value of a given column ..
12845	Retrieve paginator .
12846	Indicates whether the given argument is an entity .
12847	Get the object identifier single or composite .
12848	Indicates whether the given entity is valid .
12849	Returns the object and its properties as an array .
12850	Files filter .
12851	Returns the maximum size allowed for uploaded files .
12852	If bag container have given key .
12853	Handle a console input .
12854	Terminate the kernel request .
12855	Category component for account categories list .
12856	Process the request and generate output .
12857	Initialize application using config data .
12858	Throws predefined exception .
12859	Gets all field data in an array .
12860	Initializes the application component . This method overrides the parent implementation by establishing the database connection .
12861	Returns the children for every parent .
12862	Checks whether there is a loop in the authorization item hierarchy .
12863	Invalidate all cache
12864	Get the last migration batch number .
12865	Create HTML response
12866	Create JSON response
12867	Create template response
12868	Ask for others layers
12869	Returns the current adapter instantiating it if necessary
12870	Sets compression adapter
12871	Set static prefix value .
12872	Gets named http request value .
12873	The home page of the controller
12874	Page of system installation
12875	Page of system errors
12876	Get serializer instance
12877	Returns new version of filename . abc . 2 . ext - > abc . 3 . ext ; abc . 4 - > abc . 5 abc - > abc . 1
12878	Returns the xml|json as string array or object .
12879	It return the xml|json as an array .
12880	It return the xml|json as an object .
12881	Calls the dynamic repository and calls the results from the query
12882	Sets the default server and content type headers and response code if not is setted allready .
12883	Set message body
12884	Returns a array with the values of this Response
12885	Returns a validation rule that validates this entity for uniqueness ignoring other versions .
12886	Returns the S3 URL for the file at the specified key . expiration determines how long the URL will work downlaodAs specifies what the file name should start as when downloading
12887	Return a Zend \ Db \ Adapter \ Adapter connection from an existing ADODb connection
12888	Return internal adodb internal connection id
12889	Show error to user
12890	Creates a subclass of HTTP_Request2_Exception from curl error data
12891	Callback function called by cURL for reading the request body
12892	Callback function called by cURL for saving the response headers
12893	Callback function called by cURL for saving the response body
12894	Prida kolekci prikazu
12895	Vypise cas a text
12896	Vypise napovedu pro danou tridu v konzoli
12897	Vypise napovedu pro danou tridu v HTML
12898	Vypise retezec na jeden radek
12899	Function to upload images into WYSIWYG
12900	The function is intended for cleaning html code
12901	Actions to take before saving the owner of this behavior .
12902	Actions to take after loading the owner of this behavior .
12903	JSON decodes the given attribute on the owner of this behavior .
12904	Create new parser .
12905	Set the locales which are accepted
12906	Determine the value of a localized string and compare it to a given value
12907	Establishes a tunnel to a secure remote server via HTTP CONNECT request
12908	Checks whether current connection may be reused or should be closed
12909	Disconnects from the remote server
12910	Handles HTTP redirection
12911	Checks whether another request should be performed with server digest auth
12912	Checks whether another request should be performed with proxy digest auth
12913	Sends the request body
12914	Reads a part of response body encoded with chunked Transfer - Encoding
12915	Builds sql select
12916	Builds sql where criteria
12917	Builds sql join criters
12918	Builds group by statement ..
12919	Handles dependecies when certain fields are selected or searched
12920	Helper function that merge mapping ids to arrRows
12921	used to remove HTML|nonsense chars from THEAD TH of render table for csv output
12922	Tests that there was at least one call .
12923	Service function to decode YAML
12924	Do a package . xml 1 . 0 replacement with additional package - info fields available
12925	Prepare and execute a query .
12926	Insert new records into a database table .
12927	Modify records in a database table .
12928	Either update or insert records depending on whether they already exist or not .
12929	Select data from the database .
12930	Get all of the selected rows from your query at once .
12931	Get all of the id s from your query or whatever the first column you requested is .
12932	Get only the first row from your query .
12933	Get only the first value of the first row from your query .
12934	Prepare a query to be executed .
12935	Execute a prepared statement .
12936	Get the next row from an executed SELECT statement .
12937	Returns information about the previously executed query .
12938	Parse the supplied value and return the interpreted value
12939	Perform regexp replacement as filter
12940	Dispatch the request via the router .
12941	Terminate the found route s middleware .
12942	Start element handler for XML parser
12943	End element handler for XML parser
12944	Runs a command to convert asset files .
12945	Send the webhook to slack
12946	Adds or modifies the uploadable behavior
12947	Configure the request based on a JSON
12948	Open Session - retrieve resources .
12949	Read session data .
12950	Destroy Session - remove data from resource for given session id .
12951	Write Session - commit data to resource .
12952	Creates a widget instance and runs it . The widget rendering result is returned by this method .
12953	Returns the ID of the widget .
12954	This method is invoked right before the widget is executed .
12955	Check that RequestApplicationInterface is set
12956	Get a record in the database
12957	Delete a record from the database table
12958	Get all the records in a database table
12959	Insert or Update a record in a database table
12960	Main controller action . OK
12961	Load items .
12962	Verify if account is really owned by current user and return account object .
12963	Load navbar for budgets pages
12964	Check for budget month .
12965	Do any unusual setup here
12966	Instantiates the route s class and calls the route s methods using the parameters found in the url
12967	Outputs a human readable name base on firstname and surname if they exist for the user but falling back on username otherwise
12968	Save any changes to user properties that may have been made to the database
12969	Changes the password for the current user takes current password then the new password twice as inputs
12970	Define the implementation for the contextual binding .
12971	Get writer for name with options .
12972	Parse version string
12973	Compare with another version
12974	Returns the direct children for the model with the given parent id .
12975	Get the parent of a model .
12976	Returns the parents for this node .
12977	Recursively turn a container and its childs into an array
12978	Apply one or mor modifier callbacks
12979	Creates a CSS resource from URL .
12980	Return the messaging address book view .
12981	Return the messaging compose view .
12982	Return the messaging message view .
12983	Manage message flags .
12984	Append the extensions to the paths .
12985	Destroys a session .
12986	Add one or more autoload entries .
12987	Remove an autoload entry .
12988	Remove an aggregate object .
12989	Parses the command - line options .
12990	The actual implementation of the argument parsing code .
12991	Parse short option
12992	returns the commandline arguments of a function
12993	Creates a nested array representing the structure of a directory
12994	Creates a nested array representing the structure of a directory and files
12995	The rm command for removing files . Supports multiple files and dirs and also recursive deletes
12996	Make directories .
12997	Creates temporary files or directories . This function will remove the created files when the scripts finish its execution .
12998	Remove temporary files created my mkTemp . This function is executed at script shutdown time
12999	The find command
13000	Get new log .
13001	Set value for field budget_id
13002	Get Budget data object .
13003	Get list of Transaction data objects .
13004	Prepare a value for INI
13005	Sets the URL for this request
13006	Sets the request method
13007	Sets the autentification data
13008	Adds a cookie to the request
13009	Sets the request body
13010	Returns the request body
13011	Adds a file to form - based file upload
13012	Attaches a new observer
13013	Detaches an existing observer
13014	Sets the last event
13015	Sets the adapter used to actually perform the request
13016	Sets the cookie jar
13017	Sends the request and returns the response
13018	Tries to detect MIME type of a file
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Filter by conditions
13024	Return an instance with the specified status code and optionally reason phrase . If no reason phrase is specified implementations MAY choose to default to the RFC 7231 or IANA recommended reason phrase for the response s status code . This method MUST be implemented in such a way as to retain the immutability of the message and MUST return an instance that has the updated status and reason phrase .
13025	+ \ Labi \ Operators \ RemoverInterface
13026	Check attached event listeners for particular event
13027	Get the data for a field
13028	Use a predefined error message
13029	Returns a AccessDeniedHttpException .
13030	Envia un mensaje flash
13031	commits the last transaction
13032	this method formats date for this connection
13033	this method formats time for this connection
13034	this method formats boolean for this connection
13035	this method sets the timezone for this connection
13036	Fetch a service with supplied parameters . This method will call create for a new service and store them for later use .
13037	Check if there is an instance in the container
13038	Create a class with supplied parameters .
13039	Add a resolver
13040	Add an already created service to the container .
13041	Get pool of connections
13042	Execute simple statement without parameters
13043	Execute statement with parameters
13044	Create new connection
13045	Get least busy connection with idle state or at least with minimum queued queries count
13046	Installs the assets under the web root directory .
13047	Get the reflection class instance for a class name .
13048	Get class version annotation for a class name .
13049	Search for class name by version id
13050	Get migrations for a class .
13051	Find all the options required for all the migrations for this class .
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Set the client filename
13057	Get the file extension or guess it from MIME type if so ...
13058	Get the file miem string if possible
13059	Get the file size in human readable string
13060	Get the last access time on the file and return it as a DateTime object
13061	Get the creation time on the file and return it as a DateTime object
13062	Get the last modification time on the file and return it as a DateTime object
13063	Create a file with a content string and returns the created filename
13064	Retrieve all applications
13065	Find application by ID
13066	Create an application
13067	Delete an application
13068	Update an application
13069	Get the closest business hours date interval before the given date .
13070	Get the closest business hours date interval after the given date .
13071	Build a new date time interval for a date .
13072	Get the business hours day before the day number .
13073	Get the business hours day after the day number .
13074	Retrieve configuration information about a file role from its XML info
13075	Commits a transaction .
13076	Rolls back a transaction .
13077	Sets the transaction isolation level for this transaction .
13078	Get DB connection
13079	Set the backend gd of imagick to use
13080	Log a debug message .
13081	Log an info message .
13082	Log a notice message .
13083	Log a warning message .
13084	Log a error message .
13085	Log a critical message .
13086	Log a alert message .
13087	Log a emergency message .
13088	Log a message .
13089	Uses PropertyAccess component to return the object property value .
13090	Returns a truncated html string .
13091	PEAR_Installer constructor .
13092	Delete a package s installed files does not remove empty directories .
13093	Add a file operation to the current file transaction .
13094	Download any files and their dependencies if necessary
13095	Set the list of PEAR_Downloader_Package objects to allow more sane dependency validation
13096	Test if point A is in one of the triangle s segments
13097	Creates a new iterating exception instance .
13098	Register all ordercloud components on the specified Container .
13099	Add a array values to attribute collection .
13100	Change class collection values .
13101	Add classes from collection to attributes collection .
13102	Creates a JSON column .
13103	Register a binding if it hasn t already been registered .
13104	Bind a shared Closure into the container .
13105	Bind a new callback to an abstract s rebind event .
13106	Determine if a given type is shared .
13107	Get a Closure to be used when building a type .
13108	Get the dependency for the given call parameter .
13109	Get the contextual concrete binding for the given abstract .
13110	Dispatch middleware .
13111	Dispatch after request processed middleware .
13112	Dispatch terminable middleware .
13113	Display the web service documentation for the requested service
13114	Return the WSDL file for a soap web service
13115	set default parameters for Minify
13116	Converts a date and time string into timestamp
13117	Converts a timestamp into many date infos
13118	Converts a date into another format
13119	Calculates time left from an timestamp in the future
13120	Return the basic properties of the model as an array
13121	Tests that there was exact amount of calls made .
13122	To parse options detect parameters and replace them by parameter .
13123	To register a parameter to use during yaml parsing .
13124	Strips all trailing whitespaces
13125	Outputs debug breakpoint and terminates the current script
13126	retrieves a list of avaible Packages from master server and downloads them
13127	Add an instance of a class . This will be returned when the user tries to create a the object
13128	Create a new instance of a given class
13129	Shows profile settings form .
13130	- Check variable exist
13131	- Get variable by namespace
13132	Make a new instance of Response .
13133	View response builder .
13134	Json response builder .
13135	JsonP response builder .
13136	Redirect to response builder .
13137	Redirect to a named route response builder .
13138	Ensures the valid passed in is a valid email
13139	Get the difference in years
13140	Get the difference in weekdays
13141	Get the difference in seconds
13142	Get the difference in a human readable format .
13143	Get the commands .
13144	Set the properties for a command annotation .
13145	Get a command from a command annotation .
13146	Gets path to model uploaded files .
13147	Finds the Item model based on its primary key value . If the model is not found a 404 HTTP exception will be thrown .
13148	Use to set up a param tag for use in creating a paramgroup
13149	Make a request .
13150	Make a get request .
13151	Make a post request .
13152	Make a head request .
13153	Make a put request .
13154	Make a patch request .
13155	Make a delete request .
13156	hide password from dsn
13157	Adds a new named checkpoint which measures the time between now and the last checkpooint .
13158	Merge current data with provided
13159	This method reads the configuration from a file .
13160	Return a given package instance
13161	this is only to be called when static publishing is starting
13162	resets the init code to the base config file
13163	Outputs the static config code if needed . This should be placed in a function in Page_Controller and called from template .
13164	evaluates the given php code unless we re currently publishing in which case it returns php code that will echo the return value of the eval d code .
13165	Sets up the default template paths
13166	Path should be relative to BASE_PATH
13167	factory method to create a new wrapper object . if we re static publishing and an appropriate helper class is available it will use that instead . A helper class shouldn t be needed very often but would be used if you wanted a totally different class for publishing vs normal mode
13168	Returns all schema names in the database except system schemas .
13169	Returns all table names in the database .
13170	Refresh table schema indexes primary key and other metadata
13171	Get table metadata
13172	Get table metadata from DB
13173	Sets the metadata of the given type for the given table .
13174	Returns the cache key for the specified table name .
13175	Returns an option
13176	Determine system TMP directory and detect if we have read access
13177	Initialize migrations . Calls parent init method then loads current authManager instance .
13178	Create role . If role already exists doesn nothing .
13179	Assigns child role to parent
13180	Register a new function prophecy into the registry
13181	Call the registered function mock
13182	Get parameter value
13183	Resolves parameters inside a string
13184	Convert a query to an associative array of metadata .
13185	Download and parse the twitter page corresponding to a query .
13186	Renders tab panes .
13187	Registers a new user account . If registration was successful it will set flash message .
13188	Sets the initialization vector
13189	Open a cipher
13190	Initialises the cipher with the set key
13191	Takes credentials and URLs checks credentials and gets tokens . Returns an account with their credentials .
13192	Checks the token credentials and returns an object with its account data .
13193	Makes the http request to the checkUrl and gets an object with account data . Additionally it adds token credentials data to the object by if needed .
13194	Object builder to create auth plugin extension for request client . In this case it creates GuzzleAuth object by default .
13195	Add token credentials to the object .
13196	Checks the credentials and returns the name of the auth system used if credentials are not founds returns false .
13197	Checks if the credentials are using OAuth1 . 0 .
13198	Checks if the credentials are using OAuth2 . 0 .
13199	Closes the stream and any underlying resources .
13200	Attaches a new stream .
13201	Returns the remaining contents in a string .
13202	Set the stream .
13203	This method writes the configuration to a file .
13204	Get virtual account . Return empty account instance if no account id virtual is given .
13205	Get previous account .
13206	Update virtual account
13207	Enables query cache for this command .
13208	Set connection to use with
13209	Fetch results row
13210	Creates an INSERT command with RETURNING statement .
13211	Executes the SQL statement . This method should only be used for executing non - query SQL statement such as INSERT DELETE UPDATE SQLs . No result set will be returned .
13212	Logs the current database query if query logging is enabled and returns the profiling token if profiling is enabled .
13213	Executes the SQL statement and returns the value of the first column in the first row of data . This method is best used when only a single value is needed for a query .
13214	Performs the actual DB query of a SQL statement .
13215	Check query string by pattern
13216	Execute SQL statement internally
13217	Invoke closure using arguments .
13218	Checks if a layer is defined or not
13219	Prepare the required DOM IDs used by the global template
13220	Distribute the current request route
13221	Render an application error page view
13222	Render a debug application page view
13223	Render a view
13224	Init the plugin and start listening to messages
13225	Set up all the canned responses
13226	Register short code
13227	Remove short code
13228	Parse short code tag
13229	Parse short code attributes
13230	Retrieve information about a remote package to be downloaded from a REST server
13231	List a category of a REST server
13232	Sort releases by version number
13233	Get array for an id
13234	Get all hours in an array
13235	Parse a page
13236	Get list of account for given user .
13237	The application message .
13238	The usage message and description .
13239	Get the usage path .
13240	The arguments section .
13241	The options section .
13242	Get an options name for the options section .
13243	Warning! This will generate roll history randomly
13244	Set the table columns to retrieve
13245	Set a habing option
13246	Add a where condition
13247	Add an inner table join to the search
13248	Add an left outer table join to the search
13249	Add an right outer table join to the search
13250	Return SQL string
13251	Return record as an array
13252	Prefix table join condition
13253	Get a single item from the collection .
13254	Set a new item into the collection .
13255	Remove an item from the collection .
13256	Compile INSERT INTO
13257	Set up a new error stack
13258	Return a single error stack for this package .
13259	Internal error handler for PEAR_ErrorStack class
13260	Set an error code = > error message mapping callback
13261	Sets a default callback to be used by all error stacks
13262	Pop an error off of the error stack
13263	Pop an error off of the error stack static method
13264	Determine whether there are any errors on the stack
13265	Retrieve all errors since last purge
13266	Determine whether there are any errors on a single error stack or on any error stack
13267	Get a list of all errors since last purge organized by package
13268	Standard error message generation callback
13269	Registers an array with identifier value pairs to the container as mixed entries .
13270	Registers the given provider as a callable and applicable methods as provider methods .
13271	Registers classes that can be wired automatically based on constructor arguments .
13272	Loads the parameter identifiers based on the constructor arguments and provided overrides .
13273	Sets the targetpath to use
13274	Compression mode to use Eighter Gz or Bz2
13275	Get routes .
13276	Set the route properties from arguments .
13277	Get all classes routes .
13278	Get a new route with controller route additions .
13279	Get a route from a route annotation .
13280	Bind the route annotations .
13281	Formats response data in JSON format .
13282	Formats response data in JSONP format .
13283	Retrieve the host and port component of the URI .
13284	Retrieve the scheme host and port components of the URI .
13285	Return an instance with the specified host .
13286	Return an instance with the specified port .
13287	Return an instance with the specified path .
13288	Return an instance with the specified query string .
13289	Return an instance with the specified URI fragment .
13290	Determine whether this uri is on a standard port for the scheme .
13291	Validate a scheme .
13292	Validate a port .
13293	validate a downloaded package against installed packages
13294	validate a package . xml 1 . 0 dependency
13295	Convert a 1 . 0 dep into a 2 . 0 dep
13296	Add or remove s from the end of a word
13297	Break down a delimited statement into set of string separated by comma
13298	Create an array of elements in the format array_key = array_value of the argument array supplied
13299	Check for the existence of a table in the database being used
13300	Map a class to a database table
13301	Get the table name that maps to a given class model
13302	Process the version tag .
13303	The channel - discover command
13304	Execute the login command .
13305	Execute the logout command .
13306	Do the real work replaces the seperator to search for with the replacement seperator
13307	Fetching migration class to file name under requested path .
13308	Build and cache migration files map
13309	Use for dynamic publishing actions
13310	Run the request and get response .
13311	Check URL .
13312	Transforms a value from the transformed representation to its original representation .
13313	Creates AppBuilder using newly built container .
13314	Creates AppBuilder from loaded persisted container .
13315	Returns all dependencies needed by AppBuilder as array .
13316	Cancel changes made on a file
13317	Create a local branch
13318	Delete a local branch
13319	Push a branch to the origin
13320	Create a pull request on Github
13321	Clone the Github project
13322	Message callback function used when running the phpize program . Extracts the API numbers used . Ignores other message types than cmdoutput .
13323	Run an external command using a message callback to report output . The command will be run through popen and output is reported for every line with a cmdoutput message with the line string including newlines as payload .
13324	Makes all the OAuth process to connect the app with the API only with the client credentials the oauth endpoints urls and an URL to get the user data and token credentials .
13325	Adds a new file or directory as target to the existing ones
13326	Returns only the new filename without moving it But existing files will be erased when the overwrite option is true
13327	Internal method to resolve the requested source and return all other related parameters
13328	Get service instance with service id
13329	Generate service instance
13330	Set a service instance
13331	Set alias service id
13332	Get parameter with a parameter id
13333	Set a parameter value with a parameter id
13334	Get service definition
13335	Set service definition
13336	Initialize the task .
13337	Copies data from an existing event into this one .
13338	Return a simple list of entries in the table .
13339	Tests if an input is valid PHP serialized string
13340	Executes preset callback .
13341	Add route handling
13342	Find controllers in given namespaces and register as routes
13343	Search controller by name and action ID
13344	Register controller in routes
13345	Register controller that uses Annotations
13346	Register controller that does not use Annotations
13347	Get default action
13348	To register a new observer .
13349	To unregister a previous registered observer .
13350	Set the channel name based on the basename given in the constructor
13351	Execute the command received from the Job
13352	Adds a flash message .
13353	Redirect to the referer .
13354	Adds http cache tags and sets the shared max age .
13355	Initialize the plugin .
13356	Finalize the route in preparation for dispatching
13357	Returns the configuration directory .
13358	Tests that there were no calls made .
13359	This method creates and returns connection implementaion based on the configuration property connection - class
13360	Configures the StfalconTinymceBundle .
13361	Set some of the editors capabilities
13362	Create a locator from the PATH and PATHEXT environment variables .
13363	Create a locator using semicolon - separated PATH and PATHEXT strings .
13364	Returns the constant choices .
13365	Returns whether the constant is valid or not .
13366	Check if function arguments match the provided types
13367	Check value against the provided type
13368	Return a Zend \ Db \ Adapter \ Adapter object from an existing pdo connection
13369	create the path for the cache file
13370	Build the WSDL cache file path
13371	Update the WSDL cache file
13372	Generate the WSDL content
13373	Load the class or service definition for doc purpose
13374	Return an array of all the soap controllers class available in the application
13375	Builds the assetic configuration .
13376	Builds the bootstrap_css asset collection configuration .
13377	Get uri param
13378	Change base uri
13379	Add a route .
13380	Get a static route .
13381	Determine if a static route exists .
13382	Get a dynamic route .
13383	Determine if a dynamic route exists .
13384	Get a named route .
13385	The place where extending classes should create and register new Views
13386	Hack to let the file_exists function search in include_path
13387	Convert this number into a other number - system .
13388	Compare two numbers .
13389	We use this to convert every number to decimal for calculations .
13390	Add two number together . The number - system of the result will be the one of the number who s was the called object .
13391	Subtract two numbers . The number - system of the result will be the one of the number who s was the called object .
13392	Multiply two numbers . The number - system of the result will be the one of the number who s was the called object .
13393	Divide two numbers . The number - system of the result will be the one of the number who s was the called object .
13394	Return a Zend \ Db \ Adapter \ Adapter object from an existing mysqli connection
13395	System path aliases list .
13396	Searches all path aliases .
13397	Replaces all new module classes content with empty template .
13398	Reads until either the end of the socket or a newline whichever comes first
13399	Turns on encryption on a socket
13400	Throws an Exception if stream timed out
13401	Register a new route with the given verbs .
13402	Set items .
13403	Build attributes .
13404	Prepare the name and id attributes .
13405	Check data Attribute .
13406	Adds a resource to the queue .
13407	Create a new Day .
13408	Create a DayInterface object from an array .
13409	Check if an interval array is all day .
13410	Configure the request based on a JSON usually received on the workload from a GearmanJob from the nginx .
13411	Sets the server info
13412	Sets the headers .
13413	Sets POST fields
13414	Sets GET fields
13415	Get a header by name
13416	Returns a array with the values of this Request
13417	Add a new command .
13418	Add a parsed command .
13419	Get a command by name .
13420	Remove a command .
13421	Match a command by path .
13422	Get all commands .
13423	Setup the console .
13424	Setup the console from cache .
13425	Get a cacheable representation of the commands .
13426	Sets a new seperator
13427	Add an event listener .
13428	Add a listener to many events .
13429	Determine whether an event has a specified listener .
13430	Remove an event listener .
13431	Determine whether an event has listeners .
13432	Add a new event .
13433	Remove an event .
13434	Trigger an event .
13435	Setup the events .
13436	Setup the events from cache .
13437	Init a template engine . Accepts array of options
13438	Set template as string . It is HTML document to fetch later as a template
13439	Fetch prepared template and return complete html document
13440	Loads the configuration using the reader instance .
13441	Saves the configuration with the writer instance .
13442	Initializes the reader instance .
13443	Initializes the writer instance .
13444	Returns the default options .
13445	Encrypt the given data .
13446	Decrypt the given session data .
13447	Generate secret key .
13448	Throw error description to Stdout
13449	Render exception view
13450	Get view file for exception depending on its code|httpStatusCode
13451	Get error response
13452	Get exception data as string or array
13453	Get StdioLogger instance
13454	Read session data and returns serialized|encoded data
13455	Write session data to storage
13456	Destroy a session
13457	Update timestamp of a session
13458	Extract session data from record
13459	Extract session timestamp from record
13460	Get data from cache storage
13461	Get message with variables
13462	Get constraint syntaxe
13463	Add auto increment
13464	Get add key syntaxe
13465	Get add foreign key syntaxe
13466	Get column syntax
13467	Run the loader to execute all of the hooks with WordPress .
13468	Creates a new iteration exception instance .
13469	Renders collapsible toggle button .
13470	Get Response object
13471	Return the module name .
13472	Load class reflection
13473	Load object reflection
13474	Load property reflection
13475	Get called method from abstract reflection function
13476	Get class properties
13477	Set value to property
13478	Set value to properties
13479	Load class annotations
13480	Clear internal storage
13481	Check that class is instantiable
13482	Get class method reflection
13483	Get class reflection
13484	Check class method arguments for consistency
13485	Get reflection from cache
13486	Save reflection to cache
13487	Get object cache key
13488	Get class name of object or its reflection
13489	Returns the first line of PHPDoc block .
13490	Get class PHPDoc parsed
13491	Get method or property PHPDoc parsed
13492	init db instance by config
13493	Accepts foundation class maps to a FlashMessenger namespace
13494	Unindent given string
13495	post - process data
13496	Specific data are stored into an array and are returned when it receive an failure returns null .
13497	This function makes the request to get images sources from a photo and returns them as an array .
13498	Extracts an array of images from the photo array and returns them .
13499	Finds a position with first placeholder
13500	Build route path with placeholders replace and searching in router paths
13501	Search in router for predefined paths
13502	Replace placeholders in path
13503	Initializes this component .
13504	Preload all messages from source
13505	Find categories by string pattern|wildcard
13506	Check if a property is set .
13507	Send response .
13508	Gets the HTML content associated with the given exception .
13509	Format path .
13510	Formats an array as a string .
13511	Escape HTML .
13512	Sets the data to be validated .
13513	Transform a string to a collection of Input .
13514	Forget about a connection on disconnect .
13515	Neutralise the existing timer if present and create a new timer .
13516	Callback called after the inactivity period is reached .
13517	Callback called after the CTCP PING timeout is reached .
13518	Get proxy command handler for aggregate .
13519	Page of application configuration
13520	Load bundles from project configuration
13521	Load messages from message directory .
13522	Set the HTTP headers for the request .
13523	Set the server CGI environment variables .
13524	Execute a POST request .
13525	Send a JSON RPC request .
13526	Connexion to the BDD
13527	Escape a string using the internal PHP sqlite function
13528	Initializes the bundle . If you override this method make sure you call the parent implementation in the last .
13529	Does the table have a slug field
13530	Gets a table special field if found
13531	Gets a list of fields by their type
13532	Formats a RFC compliant GMT date HTTP header . This function honors the y2k_compliance php . ini directive and formats the GMT date corresponding to either RFC850 or RFC822 .
13533	Negotiates language with the user s browser through the Accept - Language HTTP header or the user s host address . Language codes are generally in the form ll for a language spoken in only one country or ll - CC for a language spoken in a particular country . For example U . S . English is en - US while British English is en - UK . Portugese as spoken in Portugal is pt - PT while Brazilian Portugese is pt - BR .
13534	Negotiates charset with the user s browser through the Accept - Charset HTTP header .
13535	Negotiates content type with the user s browser through the Accept HTTP header .
13536	Parses a weighed Accept HTTP header and matches it against a list of supported options
13537	Parses and sorts a weighed Accept HTTP header
13538	Sends a HEAD HTTP command to a server and returns the headers as an associative array .
13539	Convert the given string from one into another charset . Uses mb_convert_encoding or iconv if available .
13540	Get an entityManager
13541	Get the objects structure from a specific database
13542	Get a table entry from a specific database
13543	Get a table structure from a specific database
13544	Get an auto - object model
13545	Build the objects structure from a specific entity
13546	Formatte un texte d erreur
13547	Check for new budget month to add
13548	Check for budget
13549	Get budget month by budget id & month
13550	Set value for field account_id_parent
13551	Set value for field account_is_main
13552	Get AccountUser data object .
13553	Get Bank data object .
13554	Parse data from file .
13555	Get icon type
13556	Process query to SQL
13557	Escape on value using database driver specific
13558	Create a new redirect response .
13559	Set the redirect uri to secure .
13560	Redirect back to the referer .
13561	Throw this redirect .
13562	Filter the commands by type and name .
13563	Sort commands by name .
13564	The command section .
13565	Initialize the session parametesr . Only opens the session automatically if the user sent us a cookie that looks like it contains a reference to a session . That avoids creating sessions for users who are not logged in .
13566	Start time . If name is null start global timer .
13567	Get Time time .
13568	Display timer value
13569	Initialize a provided item .
13570	Initialize whole application
13571	Initialize basic components
13572	Locate configs path
13573	Get composer class loader
13574	Create instance of class
13575	Get instance of config reader
13576	Initialize DI container
13577	Initialize application object
13578	Determine if the storage and input CSRF tokens match .
13579	Get the CSRF token from the request .
13580	Uses the DarkSky API to retrieve weather data
13581	Gets the current weather and a simple prediction for the next hour .
13582	Gets the precipitation at a specific place and time .
13583	This method uses the Google Maps Geocoding API to retrieve the lat and long for the given location .
13584	Add an error message to the response .
13585	Converts an intensity value to a string .
13586	Get a class s annotations .
13587	Get a class s members annotations .
13588	Get a class s and class s members annotations .
13589	Get a property s annotations .
13590	Get a property s annotations by type .
13591	Get a class s properties annotations .
13592	Get a method s annotations .
13593	Get a method s annotations by type .
13594	Get a class s methods annotations .
13595	Get a function s annotations .
13596	Filter annotations by type .
13597	Set the base annotation model values .
13598	Get a class s reflection .
13599	Get a property s reflection .
13600	Get a method s reflection .
13601	get a function s reflection .
13602	Get dependencies from parameters .
13603	Get the length of the segment
13604	Get the middle of the segment as a \ Maths \ Geometry \ Point object
13605	Runs the widget . This registers the necessary JavaScript code and renders the form open and close tags .
13606	Generates a form field . A form field is associated with a model and an attribute . It contains a label an input and an error message and use them to interact with end users to collect their inputs for the attribute .
13607	Determine if the given configuration value exists .
13608	Gets the directory name transformed to be displayed as a title
13609	Scan the current directory
13610	Send a raw HTTP header .
13611	Returns a list of response headers ready to send
13612	Using for creating database
13613	Return list of tables from connected database
13614	Update database from array
13615	Updates relations in database
13616	Updates many to many tables
13617	Generate whole SQL definition for table
13618	Generate part of SQL definition for column
13619	Generate part of SQL definition for Indexes
13620	Generate part of SQL definition for Constraints
13621	return the Keyvalues objects for a given keytype
13622	return the keyvalue - > keyname pairs for all elements that match a keytype
13623	Get all annotations for class
13624	Get class annotation by its class|interface name
13625	Get all annotations for property
13626	Get property annotation by its class|interface name
13627	Get all annotations for method
13628	Get method annotation by its class|interface name
13629	Get doctrine annotation reader
13630	Get method reflection
13631	Get data from cache
13632	Set data to cache
13633	this method get the path array from string key
13634	Process key . Ensure that key is string
13635	To check if the required event class name .
13636	Build event retrieve current enabled states of the instace and compute difference with last enabled states .
13637	Effectue la moyenne des valeurs du tableau
13638	Changes how the results are ordered .
13639	Reads the constructor s type - hints .
13640	Returns the value at the given path .
13641	Sets the value at the given path .
13642	Returns the objects filtered by the given path value .
13643	Set the mail s sender information .
13644	Add a recipient .
13645	Add a Reply - To address .
13646	Add a copy recipient .
13647	Add a blind copy recipient .
13648	Add an attachment from the filesystem .
13649	Generate all cache files .
13650	Store the referer URL in session
13651	Get the referer URL in session
13652	Build an application URL with a set of arguments
13653	Download a fresh Crowdin package
13654	Extract the Crowdin package
13655	Undo changes possibly made to the default locale translations
13656	Find position of first occurrence of string in a string .
13657	Builds backend sidebar menu .
13658	Construye el menu de ejemplo
13659	Registers the migration repository .
13660	Wrapper for parent funciton . Switches on and off livepub publishing .
13661	+ \ Labi \ Operators \ UpdaterInterface
13662	Loads messages from a PO file .
13663	Get all categories list
13664	Retrieve the filename from headers .
13665	Validate uploaded files .
13666	Result object initialisation
13667	Get pattern form array
13668	Set attributes of result object
13669	Detect by Key
13670	- Check script execute on shell
13671	Get the application config as a Params object
13672	Get the current latitude in Degrees Minutes Seconds notation .
13673	Get the current longitude in Degrees Minutes Seconds notation .
13674	Find a range of latitudes given a center point .
13675	Find a range of longitude given a center point .
13676	Get the distance between this location and another one .
13677	Loop through all the filters and only return if all match
13678	Creates tables from config
13679	Bundle multiple schemas
13680	Get a point of the object
13681	Publish the command .
13682	Should be implemented to return a true or false as to whether this handler supports the given request .
13683	Return the response if appropriate or false if no response could be generated .
13684	Retrieve REST data but always retrieve the local cache if it is available .
13685	Check if given string ends with specified substring . Binary and multibyte safe .
13686	Counts words in a string .
13687	Create an acting as user save it and return it
13688	Initializes the application component . This method is required by IApplicationComponent and is invoked by application .
13689	Starts the session .
13690	Open session internal method
13691	Registers session handler .
13692	Ends the current session and store session data .
13693	Frees all session variables and destroys all data registered to a session .
13694	Updates the current session ID with a newly generated one .
13695	Session read handler .
13696	Session write handler .
13697	Session destroy handler .
13698	Adds a session variable . If the specified name already exists the old value will be overwritten .
13699	Removes a session variable .
13700	Removes all session variables .
13701	Returns a flash message .
13702	Returns all flash messages .
13703	Sets a flash message . A flash message will be automatically deleted after it is accessed in a request and the deletion will happen in the next request . If there is already an existing flash message with the same key it will be overwritten by the new one .
13704	Adds a flash message . If there are existing flash messages with the same key the new one will be appended to the existing message array .
13705	Removes a flash message .
13706	Removes all flash messages . Note that flash messages and normal session variables share the same name space . If you have a normal session variable using the same name it will be removed by this method .
13707	If session is started it s not possible to edit session ini settings . In PHP7 . 2 + it throws exception . This function saves session data to temporary variable and stop session .
13708	Starts session and restores data from temporary variable
13709	Create session cookie
13710	Validate the date is after a given date .
13711	Validate the date is after a given date with a given format .
13712	Validate that an attribute matches a date format .
13713	Checks that registered method predictions do not fail .
13714	Creates an multidimensional array out of an string notation and adds a value to the last element .
13715	Expected to return \ Zend \ ServiceManager \ Config object or array to seed such an object .
13716	Executes the rule associated with the specified auth item .
13717	process multiple dependencies that have a name like package deps
13718	Parse fragments from a json document . For internal usage .
13719	Make a new View .
13720	Set the variables .
13721	Set a single variable .
13722	Escape a value for output .
13723	Get the template directory .
13724	Set the layout for the view template .
13725	Set the template for the view .
13726	Output a partial .
13727	End a block .
13728	Render the templates and view .
13729	Get the full path for a given template .
13730	Render a template .
13731	Render a layout path .
13732	Set a route as an array from a route object .
13733	Get the separation line .
13734	Output the header message .
13735	Get a list of installed AbuseIO notifications and return as an array
13736	Create and return a Collector object and it s configuration
13737	Sets the key .
13738	Returns whether the uploadable should be renamed or not .
13739	Guess file extension .
13740	Guess file name .
13741	Set rename .
13742	Download local file .
13743	Handle tinymce upload .
13744	Kernel exception event handler .
13745	Fetches an url and returns the returned data
13746	EXECUTE AND CLOSE
13747	SET COOKIE FILE
13748	MANY CHOOSE ONE
13749	Lists all Item models .
13750	Initializes the widget options . This method sets the default values for various options .
13751	Write configuration to file .
13752	Extracts and returns the exception value from the given context .
13753	Converts an exception into an array .
13754	Renders a view file as a PHP script .
13755	Determines whether given name of the file belongs to the framework .
13756	Returns human - readable exception name .
13757	called when the content is generated and potentially sent except the body end tag and the html end tags . This method can output directly some contents .
13758	generate a list of urls for minify . It combines urls if possible
13759	Set value for field budget_amount_default
13760	Set value for field budget_date_start
13761	Set value for field budget_date_end
13762	Set value for field budget_is_recurrent
13763	Set value for field budget_month_bitmask
13764	Get list of BudgetCategory data objects .
13765	Get list of BudgetMonth data objects .
13766	Safe SQL execution
13767	Generate PDO error
13768	Searches for an autoloader instance in the given path
13769	This method contains the logic to be executed when applying this migration . Child classes may override this method to provide actual migration logic .
13770	This method contains the logic to be executed when removing this migration . The default implementation throws an exception indicating the migration cannot be removed . Child classes may override this method if the corresponding migrations can be removed .
13771	Creates and executes an INSERT SQL statement . The method will properly escape the column names and bind the values to be inserted .
13772	Creates and executes a batch INSERT SQL statement . The method will properly escape the column names and bind the values to be inserted .
13773	Creates and executes an UPDATE SQL statement . The method will properly escape the column names and bind the values to be updated .
13774	Creates and executes a DELETE SQL statement .
13775	Builds and executes a SQL statement for renaming a DB table .
13776	Builds and executes a SQL statement for dropping a DB table .
13777	Builds and executes a SQL statement for truncating a DB table .
13778	Builds and executes a SQL statement for dropping a DB column .
13779	Builds and executes a SQL statement for renaming a column .
13780	Builds and executes a SQL statement for changing the definition of a column .
13781	Builds and executes a SQL statement for creating a primary key . The method will properly quote the table and column names .
13782	Builds and executes a SQL statement for dropping a primary key .
13783	Builds a SQL statement for adding a foreign key constraint to an existing table . The method will properly quote the table and column names .
13784	Builds a SQL statement for dropping a foreign key constraint .
13785	Builds and executes a SQL statement for creating a new index .
13786	Builds and executes a SQL statement for dropping an index .
13787	Builds and execute a SQL statement for adding comment to column .
13788	Builds a SQL statement for adding comment to table .
13789	Builds and execute a SQL statement for dropping comment from column .
13790	Builds a SQL statement for dropping comment from table .
13791	Execute command promise with description printing and time elapsed
13792	Save un log
13793	Ensures the regex passed in is valid
13794	Extracts capture groups from a given Text object
13795	Splits a given Text object based on this regular expression
13796	Replaces parts of a Text object based on a search and replace via this regex
13797	Returns the form plugins configuration .
13798	Retourne l url de Securimage
13799	Return the entity with the ID in the parameter
13800	Return the entity with the ID in the parameter . If it does not exist a new instance is returned .
13801	Return an array of the model which belongs to the repository
13802	Save the model into the database
13803	Delete the instance from the database
13804	Return the instances which have the ID in the parameter array
13805	Return the models which have the ID in the parameter array . The keys of the returning array are the IDs of the models .
13806	Send a cookie without urlencoding the cookie value
13807	Connects to a remote host via proxy
13808	Save a record in database
13809	Set record data
13810	Return an array version of the record
13811	Get field value
13812	Set a field
13813	Return primary key predicate on record
13814	Parse a path and get its parts .
13815	Validate a path s opening and closing tags .
13816	Split segments based on ending bracket within the segments .
13817	Parse a path with no optionals .
13818	Get a param s replacement .
13819	Cache a value in the model s cache collection .
13820	Flush the model s cache .
13821	Receives the Http client response it is processed and stores it into the object properties .
13822	Invoke object method using arguments .
13823	Returns content type of file
13824	Regenerate session id
13825	Return a new session ID
13826	Create GC periodic timer
13827	Sets the content .
13828	Sets the buttons .
13829	Adds the button .
13830	Validates the modal type .
13831	Validates the modal size .
13832	Register crowdin commands in the application .
13833	Archive_Tar Class constructor . This flavour of the constructor only declare a new Archive_Tar object identifying it by the name of the tar file . If the compress argument is set the tar will be read or created as a gzip or bz2 compressed TAR file .
13834	This method add a single string as a file at the end of the existing archive . If the archive does not yet exists it is created .
13835	Detect and report a malicious file name
13836	Parses user events for commands and emits them as events .
13837	Get object from other version .
13838	Get unique keys on table
13839	Return unique table primary key
13840	Return composite primary keys
13841	Get priority .
13842	Get validator .
13843	Loads MIME types from the specified file .
13844	Loads MIME aliases from the specified file .
13845	Removes a file or symlink in a cross - platform way
13846	Convert octal permissions to string
13847	Convert string representation of permissions to octal
13848	+ \ Labi \ Database \ Utility \ Join
13849	- \ Labi \ Database \ Utility \ ConditionInterface
13850	+ \ Labi \ Operators \ SearcherInterface
13851	Compile CREATE TABLE
13852	Loads all modules contained in app and builds them .
13853	Gets built container .
13854	Listens to channel messages and lets everyone know who owes what to the swear jar .
13855	Create a SELECT query statement .
13856	Set the table on which to perform the query statement .
13857	Add a value for a column to set .
13858	Add a where condition to the query statement . - Each additional use will add an AND where condition .
13859	Add an additional OR where condition to the query statement .
13860	Add an order by ascending to the query statement .
13861	Add an order by descending to the query statement .
13862	Get the built query string .
13863	Set a where condition .
13864	Set an order by condition .
13865	Get a SELECT query .
13866	Get an INSERT query .
13867	Get an UPDATE query .
13868	Get an DELETE query .
13869	Get the SET part of an INSERT query .
13870	Get the WHERE part of a query statement .
13871	Get the ORDER BY part of a query statement .
13872	Walk the given expression to build up the PHPCR - ODM query builder .
13873	Registers a new user
13874	Allows not admin user to edit thier profile
13875	Retrieve our version string from the VERSION file .
13876	Create Route with given params
13877	Handle incoming request
13878	Resolve app action
13879	Get app home URL
13880	Registers a component definition with this locator . Overridden to inject application instance
13881	Restaure un utilisateur
13882	Retourne les informations d un utilisateur en fonction de son id
13883	Retourne les utilisateurs actifs
13884	Saves messages to an MO file .
13885	Recherche la position d une valeur dans la liste
13886	Finds records corresponding to one or multiple relations and populates them into the primary models .
13887	Advances the reader to the next row in a result set .
13888	Returns a single column from the next row of a result set .
13889	Returns an object populated with the next row of data .
13890	Reads the whole result set into an array .
13891	Returns the number of columns in the result set . Note even there s no row in the reader this still gives correct column number .
13892	Collects the foreign key column details for the given table .
13893	Get server version promised
13894	Register all defined routes in dispatcher
13895	Parse routes data to obtain path expressions those used for URL building
13896	Build path expression from router path
13897	Set an alias to the container .
13898	Bind a service to the container .
13899	Bind a context to the container .
13900	Get a service model from a context model .
13901	Check whether a given service exists .
13902	Check whether a given service has context .
13903	Get a service from the container .
13904	Make a service .
13905	Get a singleton from the container .
13906	Get a provided service from the container .
13907	Get the context service id .
13908	Setup the container .
13909	Setup the container from cache .
13910	Setup service providers .
13911	Get a cacheable representation of the service container .
13912	Returns an array of address lines .
13913	Sets a new compression level
13914	Get controller ID
13915	Register controller actions in router
13916	Resolve controller action
13917	This method is invoked right before an action is executed .
13918	This method is invoked right after an action is executed .
13919	Render view partially
13920	Render for AJAX request
13921	Get actions list
13922	Render view in layout
13923	Render view internal function
13924	Normalize action name
13925	Resolve error as rendered html
13926	Resolve error as array formatted
13927	Get error data as array
13928	Get name of exception
13929	Validate that user can perform that action
13930	Convert controller action method name to it s ID
13931	Convert controller action ID to method name
13932	Change a color format to hexadecimal
13933	Change a color format to RGBA
13934	Return the dominant color for an image
13935	Gets input from STDIN and returns a string right - trimmed for EOLs .
13936	Gives the user an option to choose from . Giving ? as an input will show a list of options to choose from and their explanations .
13937	Append the filename to the array of paths .
13938	Get PgClient instance
13939	Execute SQL statement string
13940	Write the stream to a path .
13941	Create a request from the supplied superglobal values .
13942	Search for a header value .
13943	Strip the query string from a path .
13944	Marshal the host and port from the request header .
13945	Normalize an array of file specifications .
13946	Checks if string ends with another string
13947	Returns a random string
13948	Create edges between versions graph
13949	Find shortest path between versions
13950	Create a resource
13951	Fetch all or a subset of resources
13952	Update a resource
13953	Sets the response status code .
13954	Set response headers .
13955	Returns the Date header as a DateTime instance .
13956	Sets the Date header .
13957	Set a response cache control .
13958	Get a response cache control .
13959	Remove a response cache control .
13960	Returns true if the response is worth caching under any circumstance .
13961	Returns the age of the response .
13962	Marks the response stale by setting the Age header to be equal to the maximum age of the response .
13963	Returns the value of the Expires header as a DateTime instance .
13964	Returns the number of seconds after the time specified in the response s Date header when the response should no longer be considered fresh .
13965	Sets the number of seconds after which the response should no longer be considered fresh by shared caches .
13966	Sets the response s time - to - live for shared caches .
13967	Modifies the response so that it conforms to the rules defined for a 304 status code .
13968	Is response invalid?
13969	Is response informative?
13970	Is response successful?
13971	Is the response a redirect?
13972	Is there a client error?
13973	Is the response a redirect of some form?
13974	Is the response empty?
13975	Cleans or flushes output buffers up to target level .
13976	Initialize the Request .
13977	Validate a method .
13978	Locates the given command in the user s path .
13979	Locates all versions of the given command in the user s path .
13980	Retrieve any non - local packages
13981	Remove packages to be downloaded that are already installed
13982	Detect duplicate package names with differing versions
13983	This will retrieve from a local file if possible and parse out a group name as well . The original parameter will be modified to reflect this .
13984	Gets extracted parametrs .
13985	Enable debug mode .
13986	Get budget amount difference
13987	Add month to bitmask
13988	Check if bitmask have given month .
13989	Returns the length of the body to use in Content - Length header
13990	Returns the boundary to use in Content - Type header
13991	Loads the user for the given username .
13992	Creates new user account . It generates password if it is not provided by user .
13993	SET IP AND PORT
13994	Returns a rendered view .
13995	Publish stream to event listeners .
13996	Scans all linked resources .
13997	Add parameters to the paramter list of this message .
13998	Get message contents from MessageCache .
13999	Encrypt a message .
14000	Decrypt a message .
14001	Decrypt a message originally encrypted from an array .
14002	Encrypt a json array .
14003	Decrypt a message originally encrypted from an object .
14004	Retrieve any option via interception of the parent s statically held options including the local option for a tag cache .
14005	Initialize the object with default values and first settings
14006	Remplace les champs magiques des assets - concernant uniquement les champs magiques des composants de type FORM
14007	Convert the given Psi Query into a Doctrine ORM QueryBuilder instance .
14008	Builds a text version of the RichText fragment
14009	Builds a HTML version of the RichText fragment
14010	Transforms a block into HTML
14011	Return an instance with the specified cookie appended to the Set - Cookie header as expired .
14012	Send the response .
14013	Validate a status code .
