0	Convert a string to a URL .
1	Downloads a daily video .
2	Downloads data from a URL .
3	Return a string representation of text .
4	Print a log message .
5	Print a message .
6	Print a wtf message .
7	Detect OS OS platform .
8	Download a Youtube video .
9	Get information about the video .
10	Get the URL for a video .
11	Get the URL for a given URL .
12	Normalize a text message .
13	Download a web browser .
14	Download data from the stream .
15	Download a single video by id
16	Match all patterns in text .
17	Parse query parameter .
18	Get the content of a URL .
19	Perform a POST request .
20	Parses host and port .
21	Get a room ID from a room URL .
22	Get the title of a topic .
23	Download all topics from a course .
24	Downloads a list of boards for the given topic .
25	Check if a task exists .
26	Get the list of events from the queue .
27	Get a connection object
28	Retrieves the AWS credentials from the snowflake .
29	Get the value of a field .
30	Copies the information from the database .
31	Copies a table to a file .
32	Execute the upload .
33	Get the maximum partition of a table .
34	Get a connection object
35	Get the current task state .
36	Restart workers .
37	Get the connection object .
38	Translate a list of values into a dictionary .
39	Get an instance of an instance .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get an instance of the specified instance .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance of an instance .
48	Start a proxy proxy .
49	Stop the sqlite proxy .
50	Get the version of the proxy .
51	Create a new connection .
52	Retrieve a connection .
53	Delete a connection .
54	Gets the OsidProxyProxyProxyProxyProxy instance .
55	Get the database hook .
56	Clean up the database .
57	Reserved TCP port .
58	Normalize a job id .
59	Get the error code for an error .
60	Clears the dag run .
61	Clears all task instances .
62	Sets the state of the dag .
63	Print performance statistics .
64	Execute the scheduler .
65	Invoke the Lambda function .
66	Create a new evaluation operation .
67	Create a directory .
68	Convert string to float .
69	Make a datetime aware datetime .
70	Make a naive naive datetime .
71	Create a datetime object .
72	Get a connection to the database .
73	Returns a session object .
74	Run the given endpoint .
75	Check if the response is valid .
76	Execute a request .
77	Create a session .
78	Decorator for creating a session .
79	Reset the database .
80	Return a string representation of an exception .
81	Retrieve records from the database .
82	Get a pandas DataFrame from the database .
83	Runs the given SQL statement .
84	Insert rows into table .
85	Get the Cosmos API client .
86	Check if a collection exists .
87	Create a new collection .
88	Check if a database exists .
89	Create a new database .
90	Delete a database .
91	Delete a collection .
92	Insert documents into the database .
93	Delete a document .
94	Get a document by its ID .
95	Get all documents in the database .
96	Get a function by name .
97	Create a new function .
98	Update a function .
99	Upload a zip file .
100	Delete a function .
101	Retrieves the dependencies of the task .
102	Determine whether the dependency is a dependency .
103	Returns a generator that yields a list of failures .
104	Parse S3 configuration file .
105	Get the credentials for a given region .
106	Get a connection object
107	Flush the buffer .
108	Check if a file is a ZIP file .
109	List all files in a directory .
110	Construct a TaskInstance
111	Start the daemon process .
112	Terminate the manager .
113	Exit the signal .
114	Start the dag .
115	Start the dag .
116	Start the dag .
117	Refresh the dag directory .
118	Print the statuses of the file
119	Clear error errors .
120	Log stats for a file .
121	Sets the new filepaths .
122	Wait until the process is finished .
123	Called when the process has been processed .
124	End the child process .
125	Create a new SSH client .
126	Create a transfer job .
127	Get a transfer job .
128	List all transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel an operation .
132	Pause an operation .
133	Resume an operation .
134	Wait for a given job .
135	Returns a list of tasks that match the given task .
136	Return the number of slots in the pool .
137	Run a command .
138	Remove an option .
139	Get the section for a given section .
140	Gets the list of keys for this project .
141	Begin a transaction .
142	Commit a project .
143	Look up a project by name .
144	Rolls a transaction .
145	Run a query against the database .
146	Get an operation by name .
147	Delete an operation .
148	Wait until the operation is completed .
149	Export a bucket to a bucket .
150	Import a storage bucket from a bucket .
151	Publish a message .
152	Returns the hostname of the given function .
153	Gets the connection .
154	Analyze a document .
155	An annotate a document .
156	Verify a text document .
157	Return a list of template fields for the given module .
158	Generate a template role for a role .
159	Disconnect the database .
160	Prepare the classpath to use .
161	Check if the task id exists .
162	Detect if the ticket has been cached .
163	Convert an object to a dictionary .
164	Yield chunks of items .
165	Apply a function to the given iterable .
166	Chain multiple tasks .
167	Print a table of rows .
168	Render a log file .
169	Get a connection to the API .
170	Wait for an operation .
171	Convert a string to a string .
172	Handles the task execution .
173	Runs a pull command .
174	Fetch a celery task .
175	Calculate the number of tasks in the process .
176	Return the number of tasks in the process .
177	Set default value .
178	Get the connection to the server .
179	Create a new job .
180	Get a job from a project .
181	Wait until a job is completed .
182	Create a new version .
183	Set the default version .
184	List versions of a project .
185	Delete a version .
186	Create a new model .
187	Get a model by name .
188	Write items to a batch .
189	Integrate all plugins in the system .
190	Returns the default executor .
191	Get the executor for the given name .
192	Event handler .
193	Get the connection to the database .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Get a list of pools .
198	Create a new pool .
199	Delete a pool .
200	Create a container group .
201	Gets the status of the current state .
202	Gets the list of messages for an instance .
203	Returns a list of logs .
204	Delete a container .
205	Check if a container exists .
206	Apply decorator to decorator .
207	Constructs the index query for the query .
208	Check to see if the message is present .
209	Finds the specified dag .
210	Gets the list of tasks associated with this workflow .
211	Gets the task instance .
212	Gets the previous previous run .
213	Gets the previous scheduled scheduled task .
214	Update the state of the task .
215	Verify that the task is valid .
216	Perform an HTTP request .
217	Convert airflow variables into a dictionary .
218	Trigger a controller .
219	Send a metric .
220	Query metrics for a given query .
221	Get a dag by id
222	Kill all zombie jobs .
223	Add a dag to the dag .
224	Collect all dags of the dag .
225	Return a report report .
226	Add a datetime to a datetime .
227	Format a datetime to a datetime .
228	Check if a directory exists .
229	Check if the file is a directory .
230	Clear all tasks that have been completed .
231	Try to return the number of trials .
232	Generate a command .
233	Get the current state of this task .
234	Record the task instance .
235	Refresh the task instance .
236	Clears the XComputedComputedComposition data .
237	Return the key for this task .
238	Returns True if the task has been completed .
239	Return the next retry date .
240	Check if the request is ready to be ready .
241	Checks if the pool is available .
242	Gets the dag run for the given dag .
243	Push a value to the X .
244	Pull the task from the queue .
245	Initialize the context .
246	Close the file .
247	Retrieves the connection .
248	Start a new instance .
249	Set the machine type .
250	Get the instance template template .
251	Insert an instance of an instance .
252	Gets the instance group manager for a given resource .
253	Patch an instance of InstancesGroupManager .
254	Wait until an operation is completed .
255	Check if a bucket exists .
256	Create a bucket .
257	Check if a prefix is a prefix .
258	List all available prefixes .
259	List all keys in a bucket .
260	Check if a key exists .
261	Get a key from a bucket .
262	Read a key from the bucket .
263	Select an object from a S3 bucket .
264	Check if the given key is valid .
265	Get a key from a wildcard .
266	Load a file .
267	Load data from a string .
268	Load data from a file .
269	Load an object from a file .
270	Copies an object from a source bucket .
271	Query the database .
272	Convert a value to a dictionary .
273	Send email to email .
274	Gets the client .
275	Recognize speech .
276	Execute the SparkQL query .
277	Load the entry point plugins .
278	Check if a plugin is valid .
279	Skip all tasks in the given dag .
280	Gets the OsidSession associated with this client .
281	Check if a file exists .
282	Upload a file to a local filesystem .
283	Return a list of all paths in the given path .
284	Execute the query .
285	Unzip an input file .
286	Execute mssql query .
287	Decorator for logging .
288	Build metrics for a function .
289	Creates a cgroup .
290	Delete a cgroup .
291	Parse hostname and hostname .
292	Perform an API call .
293	Get the connection object
294	Perform a query .
295	Describe an object .
296	Get all available fields for a given object .
297	Get an object from a Salesforce
298	Convert a datetime to a pandas DataFrame .
299	Write an object to a file .
300	Get a MongoDB connection .
301	Get a collection of MongoDB objects .
302	Replace documents in the collection .
303	Returns True if the email is a mail attachment .
304	Retrieve mail attachments .
305	Download mail attachments .
306	Gets the list of attachments for the given name .
307	Retrieves the contents of the file .
308	Put records into a record .
309	Get the status of a task .
310	Send email to email .
311	Send a SMTP email .
312	Process the result value .
313	Check if a blob exists .
314	Check if a container exists .
315	Load a string from a blob .
316	Read a blob from a blob .
317	Delete a file .
318	Return a list of MLSDs .
319	Get the FTP connection .
320	List all files in a directory .
321	Retrieve a file from a remote file .
322	Store a file to a local file .
323	Get the modification time .
324	Execute the websocket hook .
325	Get a file object .
326	Check if a directory exists .
327	Check if a file exists .
328	List all files in a shared directory .
329	Create a directory .
330	Load a file .
331	Load a string from a file .
332	Load a file from a stream .
333	Get the connection object .
334	Copy a source object to another object .
335	Download an object from a bucket .
336	Upload a file to the bucket .
337	Check if a bucket exists .
338	Verify that the given object is updated .
339	Delete a blob .
340	List all objects in a bucket .
341	Get the size of the file .
342	Get the CRC of the given object .
343	Get the MD5 hash of a bucket .
344	Create a bucket .
345	Compose the given source and destination objects .
346	Determine if the secondary status of the secondary job has changed .
347	Gets the status of a job .
348	Upload a file to S3 .
349	Configure S3 resources .
350	Check if the S3 URL is valid .
351	Get a log connection .
352	Create a training job .
353	Create a tuning job .
354	Create a new transform job .
355	Create a new endpoint .
356	Describe training jobs .
357	Check the status of a job .
358	Check the training status of a training job .
359	Start the data flow .
360	Run migrations .
361	Run migrations .
362	Delete an instance .
363	Create an instance of InstanceInstance
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the command line for the server .
368	Prepare a list of dictionaries .
369	Load a DataFrame from a DataFrame .
370	Load a table from a file .
371	Get the metastastore client .
372	Check if a table exists .
373	Check if a table exists .
374	Get a connection to the Hive server .
375	Get the results from the database .
376	Write a CSV file to a CSV file .
377	Get records from the database .
378	Get a pandas DataFrame from the database .
379	Gets the client s client .
380	Get the endpoint endpoint .
381	Send a message to the webhook .
382	Bind parameters to a string .
383	escape escape characters
384	Cast a string to a BQ field .
385	Validate that value is a valid value .
386	Get the database connection .
387	Build a BigQuery service .
388	Check if a table exists .
389	Create a new table .
390	Patch a table .
391	Cancel a query .
392	Delete a table .
393	Updates a table .
394	Grant access to a view .
395	Get a dataset .
396	Get a list of datasets .
397	Insert rows into a table .
398	Execute an operation .
399	Execute a sequence of parameters .
400	Return the next page .
401	Query the database .
402	Make sure that the given remote_dir exists .
403	Create a queue .
404	Send a message to the queue .
405	Run a command .
406	Called when the user has finished .
407	Main entry point .
408	Build HTML header .
409	Builds the container
410	Builds the jchart chart
411	Create an axis .
412	Create an axis .
413	Get the connection to the database .
414	Decorator for logging .
415	Decorator to wrap a response .
416	Get the last run of a dag .
417	Create a new DAG run .
418	Send a message to the server .
419	Return a json response .
420	Open a zip file .
421	Generate a cache key .
422	Gets the OsidServiceClient .
423	An annotate video .
424	Get the API key .
425	Get a session object .
426	Execute an alert .
427	Build a protobuf message .
428	Execute the operation .
429	Get the client s connection .
430	Runs a query .
431	Check the status of a query .
432	Poll the query status .
433	Get the connection object .
434	Handle rate limit .
435	Perform a GET request .
436	Get all partitions for a given table .
437	Get a table by name .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Return a list of snapshots .
442	Restore a snapshot from a snapshot .
443	Create a snapshot .
444	Execute Slack API call .
445	Create a new job .
446	Filter files by size .
447	Filters out ignored extensions .
448	Execute the S3 pipeline .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dict to a protobuf .
453	Waits for an operation .
454	Get an operation by name .
455	Add a cluster to the cluster .
456	Create a new cluster .
457	Fetch a cluster .
458	Get the webhook endpoint endpoint .
459	Build the message payload .
460	Execute the webhook .
461	Encrypts the given key .
462	Import a table .
463	Import a query from the database .
464	Export a table .
465	Returns the connection to the client .
466	Synthesize input data .
467	Close the upload .
468	Returns a list of all the containers in the container .
469	Get environment variables .
470	Returns a list of all the secrets in the cluster
471	Get the security context .
472	Get the link links for the given operator .
473	Execute the heartbeat .
474	Launch a process .
475	Start the dag .
476	Check if the process is running .
477	Exit the signal .
478	Update import errors .
479	Process all tasks in the dag .
480	Change the state of a task .
481	Get the number of connections for the given states .
482	Change the state of the task_instances .
483	Enqueue task instances .
484	Execute a list of executables .
485	Change the state of the task .
486	Process execution events .
487	Process a file from a file .
488	Update the status of a task .
489	Manage the task state .
490	Gets the dag for a given run .
491	Returns a list of tasks for the given dag .
492	Execute the run_dates of the run_run_run_dates .
493	Sets the state of the dag .
494	Runs the current workflow .
495	Callback called when the job is executed .
496	Get the client .
497	Get an instance of an instance .
498	Apply a function to an instance .
499	Create a new instance .
500	Update an instance of an instance .
501	Delete an instance .
502	Get an instance of an instance
503	Create a new database .
504	Updates an existing DB .
505	Delete an instance .
506	Check if an attachment is present .
507	Prepare additional parameters .
508	Return the connection to the cluster .
509	Check if table exists .
510	Check if a table exists .
511	Builds a command line command .
512	Submit a Spark application .
513	Process a spark log file .
514	Process the driver log output .
515	Get the task runner runner .
516	Waits until the job completes .
517	Execute the SQLAlchemy query .
518	Configure CSV file .
519	Write the schema to the local file .
520	Return a dict of column types for this schema .
521	Convert a mysql type to a string .
522	Execute the Sql command .
523	Apply a function to the pipeline .
524	Get the extra data from the connection
525	Return a list of dates for a given range .
526	Scale time in seconds .
527	Calculate the days of a day .
528	Initialize a role .
529	Delete a role .
530	Get the roles of the user .
531	Returns a list of all the permissions for this user .
532	Check if the user has a role .
533	Check if the given view is a permission .
534	Remove permissions from the database .
535	Merge a permission .
536	Update the admin view view .
537	Create a permission view for the given view .
538	Creates a permutation for the given dag .
539	Return a new Fernet object .
540	Check if the table exists .
541	Gets the catalog hook for the given catalog .
542	Send a message to the queue .
543	Get the connection to the server .
544	Get the connection to the webhook .
545	Check if the given path exists .
546	r Upload a file .
547	Gets the connection to the broker .
548	Get the URI for this connection .
549	Convert a field to a dictionary .
550	Convert time to a dictionary .
551	Get a Redis connection .
552	Get a pandas DataFrame from the database .
553	Execute a SQL statement .
554	Set autocommit .
555	Insert rows into a table .
556	Serialize a cell .
557	Get the health of the job .
558	Add extra links to the request .
559	Get a connection to the cloud .
560	Execute Slackhook .
561	Gets the credentials for this user .
562	Authenticate to the server .
563	Decorator to catch exceptions .
564	Decorator to fall back to AWS API .
565	Return a list of unfinished tasks .
566	Prepare command line arguments for Spark .
567	Convert a PIL image into a tensor .
568	Normalize a tensor .
569	r Resolve an image to an image .
570	r Pad an image .
571	Wrapper around crop .
572	Resize a cropped image .
573	Flip an image .
574	Return the perspective of an image .
575	Flip an image .
576	Creates a crop of an image .
577	Adjust the brightness of an image .
578	Adjust the contrast ratio of an image .
579	Adjusts an image to an image .
580	Adjust hue to hue .
581	r Adjust gamma and gamma .
582	Rotate an image .
583	Transform an image into an image .
584	Convert an image to a PNG image .
585	Save an image to a file .
586	Find all classes in dir
587	Reads an image file .
588	Reads data from a file .
589	Reads a list of files from a file .
590	Calculate accuracy of a target .
591	Setup the distribution for the given master .
592	Download a URL from a URL .
593	Return a list of directories in a directory .
594	List files in a directory .
595	Download a file from Google Drive .
596	Get the parameters of the image .
597	Generate a set of parameters .
598	Get parameters for a given image .
599	Return a list of parameters for a given hue .
600	Calculate the parameters of the image .
601	Download the file and download the file .
602	Download all the files in the process .
603	Download the zip archive .
604	Get the theme name .
605	Returns a list of autocomplete results .
606	Sets the settings for a request .
607	Return a list of all the themes in a directory .
608	Search for a full search query .
609	Return the result of a response .
610	Default custom gradients .
611	Determine the variance of a uniform distribution .
612	Calculate the log - likelihood of the learning curve .
613	Calculate the number of students .
614	Expand docstring .
615	Get the name of a distribution .
616	Build a random variable .
617	Create a random variable .
618	Create a random distribution variable .
619	Predict the state of the model .
620	Calculate the forecast time series .
621	Return the maximum value of x .
622	Assert that x is finite .
623	Assert that the given rank is greater than the given rank .
624	Return the size of an event .
625	Evaluate an iterable of tensors .
626	Convert the given identifier to a float .
627	Calculate the size of the specified component size .
628	Return an iterator over the next callable .
629	Decorator for decorator .
630	A decorator that yields tape data .
631	Calculate the logistic model .
632	Visualize a prediction .
633	Build a batch of inputs .
634	Check that the map values are valid .
635	Calculate the trace of a state .
636	Call a function with the given arguments .
637	Compute the gradients of a function .
638	Concatenate a new structure into a broadcast .
639	Decorator to transform a log - likelihood function .
640	Calculate leapfrog steps .
641	Compute the hypothesis step for a given state .
642	Calculate the Hamiltonian of a Hamiltonian .
643	Signs a tensor .
644	Deserialize a model from a config file .
645	Convert x to tensor .
646	Create a scale operator .
647	Decorator to create a random walk function .
648	Generate a random random walk function .
649	Convert an event to a tensor .
650	r Returns the entropy of the distribution .
651	Concatenate the log - likelihood of the model .
652	Helper function to validate inputs .
653	Ensure that tensorflow is installed .
654	Compute log - likelihood of features .
655	Get the coverage type of coverage .
656	Calculate the covariance of the covariance .
657	Compute standard deviation .
658	Return the variance of the covariance .
659	Make a positive axis .
660	Squares a tensor .
661	Compute the standard deviation .
662	Invokes the given zeros .
663	Compute the linear transition matrix .
664	Compute the transition transition transition transition .
665	r Sample a sample sequence .
666	Return a list of permutations for each dimension .
667	Gets the indices of the given sequence .
668	Calculate the base size of a number of bases .
669	Return a list of minimes that are less than max .
670	Calculate the eps of the machine .
671	Compute the hhangager for the given value .
672	Fix the step size .
673	Run a bracket search .
674	Runs a line search .
675	Perform a single line search .
676	Prepare arguments for evaluation .
677	Prints a list of values .
678	Calculate the quadratic norm of a quadratic model .
679	Calculate the quadratic model for a given range .
680	Check if a quadrature parameter is valid .
681	Determine the batch shape of an event .
682	Interpolate a set of coordinates .
683	Interpolate a quadratic scale .
684	Scale an operator .
685	Concatenate vectors .
686	Calculate the log vector of a vector .
687	Compute the log vector of a vector .
688	Compute the vector matrix for a vector .
689	Extract log - probability probabilities from the distribution .
690	Compute the log - likelihood of the model .
691	Compute posterior marginal marginal marginal marginal marginal distribution .
692	Compute the posterior mode .
693	Choose a random random direction .
694	Sample next step .
695	Try to call a function to call a function .
696	Helper function for padding .
697	Perform a single step step .
698	Builds a pretrained distribution from a model .
699	Builds the tensor of the model .
700	Minimize a loss function .
701	Compute the moments of a time series .
702	Calculate the initial value for the given time series .
703	Broadcast a batch of distributions .
704	Creates a multi - joint adjoint .
705	Summarize a list of distributions .
706	Calculate the mean of the observed time series .
707	Expand trailing trailing dimensions .
708	Normalize a masked time series .
709	Creates a mixture of posterior draws .
710	Returns the range of the range .
711	Calculate the summary of the distribution .
712	Decorator to make a function signature .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Compute the KL divergence between two distributions .
716	Builds a list of distributions .
717	Resolve the distribution graph .
718	Compute the entropy of the distribution .
719	Check if the argument is a valid function .
720	Create a summary of the image .
721	Visualize the reconstruction of the reconstruction .
722	Visualize the quantile analysis .
723	Summarize distribution parameters .
724	Summarize the mean of the tensor .
725	Compute the tensor .
726	Initialize the state of the batch .
727	Compute the tensor .
728	Convert inputs to tensor .
729	Generate the likelihood of the model .
730	Recursively reconstructs the model .
731	Sample the static prior distribution .
732	Compute the dynamic prior distribution .
733	Return batch shape .
734	Return batch shape .
735	Create a new state model .
736	Sample prior sampling .
737	Compute the min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max
738	Convert a vector to a square shape .
739	Sort a list of values .
740	Sort a list of values .
741	Convert x to ndarray .
742	Calculate the n - th derivative of x .
743	Convert ndarray to ndarray .
744	Log a log - likelihood .
745	Calculate the log likelihood of a series .
746	Compute the standard deviation .
747	Return the log - likelihood of x .
748	Compute the log - likelihood of the text .
749	Benchmark a text message .
750	Determine whether the marginal distribution is marginal .
751	Gets the marginal distribution of the model .
752	Returns the index of the Gaussian distribution .
753	Create an image stack for an image .
754	Perform a single step .
755	Bootstrap the model .
756	Return the difference between two vectors .
757	Calculate the value of the tensor .
758	Prevent derivative of 2D derivative .
759	Compute the distribution of the distribution .
760	Split the covariance matrix into a list .
761	Decompose a model from a model .
762	Compute the decomposition of a model .
763	Decompose a forecast .
764	Convert a tensor to a sparse sparse tensor .
765	Decorator for operator operator .
766	Return a string representation of a tensor .
767	Return the sample shape .
768	Return the sample shape .
769	Return the value of the sample .
770	Evaluate a value .
771	Return numpy array .
772	Calculate the normalization of a prior distribution .
773	Create a default template template .
774	Calculate unit norm norm .
775	Calculate the log - likelihood of the model .
776	Calculate the log normalization of the log .
777	Return the common dtype of a list .
778	Creates a summary of the statistic .
779	Broadcast a tensor .
780	Return the density of the peak .
781	Compute the effective sample size .
782	Compute the effective sample size .
783	Calculate the log reduction of a single state .
784	Return the size of x .
785	Cast a list of states to a secondary state .
786	Calculate the quadratic Gaussian Gaussian Gaussian Gauss .
787	Calculate the quantiles of a linear distribution .
788	Merge two dictionaries .
789	Remove a mapping from the field .
790	Merge two values .
791	Return a deep copy of x .
792	Creates a list of steps in a batch .
793	Find the best index of x .
794	Creates a slice of x and y .
795	Generate a sample of x .
796	Slice a sample of x .
797	Decorator to create a set of values .
798	Decorator for log - likelihood .
799	Get the input arguments for a function .
800	Volution convolution layer .
801	Builds a tree with the given value .
802	Decorator to ensure that the value is None .
803	Returns True if the state of the given state is zero .
804	Parses a single step .
805	Calculate the log likelihood of the target .
806	Randomly random variates .
807	Create a new locator for the given shape .
808	Default normalization function .
809	Default normalization function .
810	Deserialize a Lambda function .
811	Serialize a Lambda function .
812	Concatenate a new structure into a new structure .
813	Convert a tensor to a tensor .
814	Convert arguments to a tensor .
815	Call fn with args .
816	Get the attributes of the tensor .
817	Creates a new mixture of latent factors .
818	Pack images into numpy arrays .
819	Download a file .
820	Creates a fake input and returns a list of inputs .
821	Validate block sizes .
822	Check if inputs are broadcast .
823	Multiply multivariate normalization .
824	Calculate the Bernier curve .
825	Normalize a tensor .
826	Create a poisson distribution .
827	Calculate the Euler method for the given state .
828	Gets the drift drift .
829	r Compute the log correction for the given state .
830	Call the function function on the given state .
831	Return a list of variables for a given state .
832	Convert a matrix matrix to a matrix .
833	Sample shape .
834	Apply a function to the output .
835	Apply a function to the output .
836	Determine the distance between k and n .
837	Return a list of sample distributions .
838	Calculate the tensor of the tensor .
839	Creates a L2D latent variable .
840	Get a list of topics .
841	Generate a dataset from a dataset .
842	Creates a fake input function for training .
843	Builds the inputs for the input dataset .
844	Minimize gradients .
845	Add a model to the tensor .
846	Save images to file .
847	Visualize training images .
848	Loads a text dataset from a file .
849	Convert dtype to numpy .
850	Returns the base type of the given dtype .
851	Return True if dtype is a boolean .
852	Return True if dtype is a complex type .
853	Return the maximum value of a dtype .
854	Return the name of the given dtype .
855	Return size of dtype .
856	r Assert that all items are in the same type .
857	Assert that tensor is a float .
858	Minimize the objective function .
859	Determine the Nelder algorithm .
860	Return a function that accepts a single value .
861	Return a function that expands the given face .
862	Decorator that returns a function that returns a function that can be applied to a function .
863	Reduce the best fit of a single solution .
864	Replace the given index with the given index .
865	Checks if the solution is valid .
866	Prepare the arguments for the objective function .
867	Prepare the arguments for the given objective function .
868	Prepare the arguments for the objective function .
869	Evaluate an objective function .
870	Plots weight probabilities for weighting .
871	Plots the predicted predictions .
872	Create a fake fake data .
873	Return a dictionary of configuration parameters .
874	Initialize a tf . config .
875	Multiply matrix .
876	Compute the standard deviation of a statistic .
877	Assigns the log_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand_expand
878	Convert x to a column .
879	Generate random random random noise .
880	Calculate the random distribution .
881	Pick a scalar condition .
882	Calculate the log probability for each event .
883	Calculate the probability for the given event .
884	Rotate x and y .
885	r Normalize a batch of data .
886	Validate the BatchNorm layer .
887	Splits a single parameter into a single batch .
888	Convert distribution parameters to a dictionary .
889	Apply a step to a single step .
890	Apply a slice of slices to a list of slices .
891	Concatenate a batch of slices .
892	Fit model .
893	Compute the convergence criterion for a given model .
894	Prepare the arguments for the model .
895	Return the number of columns in x .
896	Return a decorator that will be used in a function .
897	Helper function to copy a docstring of a function .
898	Get the constant value for a predicate .
899	Return the rank of a tensor .
900	Creates a case for the given function .
901	Yield the name of the given name .
902	Compute the mean standard deviation of a mixture matrix .
903	Create a tracer for a scalar .
904	Create a diagonal scaling factor .
905	Create shapes from locus .
906	Check if a scalar is diagonal .
907	Check if a scalar distribution is valid .
908	Pad multi - dimensional mixture tensors .
909	Pick a scalar condition .
910	Move a dimension to another dimension .
911	Ensures that x is a valid integer .
912	Check if two shapes are equal .
913	Get the static value of a variable .
914	Check if dtype is unsigned .
915	Returns true if the given dtype is signed .
916	Return the largest integer value for the given dtype .
917	Return the smallest integer value for the given dtype .
918	Checks if the given type is an integer .
919	Evaluate a categorical shape .
920	Computes the log of the log combinations of counts .
921	Rotate x - axis .
922	Pick a vector from a vector .
923	Precast a broadcast shape .
924	Generate a new seed .
925	Creates a tridiagag .
926	Return the size of x .
927	Process a quadratic quadratic model .
928	Return the parent of the parent frame .
929	Expand a vector .
930	Create a new tensor .
931	Validate a list of dimensions .
932	Validate a permutation .
933	Return the shape of the event .
934	Concatenate two tensors .
935	Return the dimensions of x .
936	Merge two tensor .
937	Return a new tensor with the given rank .
938	Assert that the target_shape is equal to the same shape .
939	Increment the shape of the batch shape .
940	Builds backward step step .
941	Calculate the posterior smoothing smoothing .
942	Build kwargs for kwargs .
943	Calculate the Gaussian Gaussian model .
944	Calculate the predicted transition matrix .
945	Builds the mean of the mean and time step .
946	Build the covariance of the covariance matrix .
947	Generate a k - step step for a single step .
948	Propagate the mean and variance of the mean .
949	Propagate covariance matrix .
950	Compute the smoothing smoothing .
951	Generate a random sample of the sample .
952	Compute the posterior marginal marginal marginal marginal marginal posterior .
953	Calculate Mean Mean Mean Mean .
954	Compute covariance covariance covariance matrix .
955	Convert latent variables to latent variables .
956	Calculate the log normalization of the model .
957	Compute the mean mode .
958	Rotate the given samples .
959	Sample a 3D distribution .
960	Return a copy of a function .
961	Remove values from a dictionary .
962	Recursively recursively recursively recursively recursively .
963	Get sample samples .
964	Return True if x is a named tuple .
965	Choose the base case .
966	Choose the accepted value for the given accepted accept .
967	Calculate the sum of the input value .
968	Compute the value of a function .
969	Call function to call function .
970	Starts a loop .
971	Perform a trace of the trace .
972	Decorator to make a set of kernel results .
973	Decorator to make a wrapper around a kernel .
974	Set the parameters of a kernel .
975	Replace event_shape_shape .
976	Replace event_shape_shape .
977	Check if shape is valid .
978	Returns True if the given input is true .
979	Returns the initial state of the initial state .
980	Perform a linear search search step .
981	Restrict a value to a given position .
982	Update the position of the current position .
983	Checks if the given objective is correct .
984	Broadcast value to target .
985	Calculate the harmonic number .
986	Returns a function that returns the default value for the given probability .
987	Extract the field from the kernel .
988	Get the states of the exchange states .
989	Calculate the variance of the variance .
990	Compute the log - likelihood function for the given state .
991	Apply a function to the transform function .
992	Return the inverse of the given state .
993	Perform a transition on the current state .
994	Evaluate a conditional condition .
995	Convenience function .
996	Convenience function for testing .
997	Convenience function to apply a second step .
998	Update the evaluation function .
999	Apply a function to a bracket .
1000	Compute the inverse function .
1001	Constructs an iterable of intervals .
1002	Returns true if the given value is a positive integer .
1003	Checks if the given value is a valid wolfe .
1004	Compute the difference between two values .
1005	Create a new step action policy .
1006	Perform a single step on the graph .
1007	Compute the log correction of the log correction .
1008	Perform a single step .
1009	Initialize the kernel results .
1010	Creates a Bayesian model .
1011	Resolve convolution layer .
1012	Create an encoder .
1013	Decorator to create a tensor .
1014	Creates a prior distribution with the given parameters .
1015	Sample a sequence of chains .
1016	Compute the exponential density of a vector .
1017	Determine the probability of a model .
1018	Train a model .
1019	Load NPS data from file .
1020	Initialize parameters .
1021	Determine the klass function for the given type .
1022	Read image from file .
1023	Download all sprites .
1024	Creates a character for a given skin .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a sprites dataset .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels .
1031	Create fake image data .
1032	Count the number of integers .
1033	Find bins in x .
1034	Create histogram histogram .
1035	Compute the quantiles of the quantiles .
1036	Retrieves the static ndims of x .
1037	Convert an axis to a list of dimensions .
1038	Make a list of static values for a given axis .
1039	Moves the dimensions of the given axis .
1040	Sort tensor .
1041	Creates a list of components for this component .
1042	Calculate the amariance of a log .
1043	Reverse log - likelihood .
1044	Compute the Jacobian of the tensor .
1045	Calculate the log of the log .
1046	Calculate the squared entropy of a log - likelihood .
1047	Calculate the diagonal of a tensor .
1048	Compute the power power of a given log .
1049	Calculate the log of the log .
1050	Compute Jacobian Jacobian Jacobian .
1051	Modifies the variance of the log .
1052	Calculate the dual factor of the dual factor .
1053	Calculate the symmetric correlation function .
1054	Calculate the covariance of the covariance .
1055	Compute the SCSI helper function .
1056	Assert that the ndims is consistent .
1057	Batch batch .
1058	Broadcast event .
1059	r Calculates the expectation of the mean of the distribution .
1060	Broadcast an event .
1061	Minimize the objective function .
1062	Compute the inverse of the inverse matrix .
1063	Update the inverse of the inverse graph .
1064	Calculate the inverse of the inverse function .
1065	Multiply multiprix .
1066	Compute tensor product of tensor .
1067	Transpose matrices .
1068	Pad a number of ndims to a numpy array .
1069	Summarize the number of n dimensions .
1070	Compute the sqrt .
1071	Get the common dtype of a list .
1072	Minimize the objective function .
1073	Returns the initial state of the initial optimizer .
1074	Gets the search direction for the given state .
1075	Create an empty queue for the given element .
1076	Add a queue to the queue .
1077	Return true if x is positive .
1078	Returns true if x is less than max_bound .
1079	Creates a uniform correlation matrix .
1080	Compute the correlation matrix of the correlation matrix .
1081	Calculate the confidence interval for the given samples .
1082	Calculate the real volume of the volume .
1083	Calculate the VonMCCDF data .
1084	Calculate the normal density of a given concentration .
1085	Perform a single step .
1086	Minimize the objective function .
1087	Gets the initial arguments for the initial population .
1088	Finds the best value of a population .
1089	Checks if the given population is valid .
1090	Get the starting population of the population .
1091	Batch crossover .
1092	Gets the mutator for the given population .
1093	Get the mixices of the given size .
1094	Ensure that tensor is a list .
1095	Convert a tensor to a tensor .
1096	Calculate the soft threshold .
1097	Clips the given value .
1098	Builds a list of training images .
1099	Plot the images in a file .
1100	Convert a list of productions to a string .
1101	Compute the latent state .
1102	Evaluate latent model .
1103	Calculate the integral of x .
1104	Calculate the inverse of the given value .
1105	Compute the rank of a matrix .
1106	Pin an array .
1107	Solve the lu solver for the given upper bounding .
1108	Compute the inverse inverse matrix .
1109	Builds a list of assertion assertions .
1110	Verify that all inputs are valid .
1111	Compute a sparse sparse sparse matrix .
1112	Check if matrix is valid .
1113	Compute the log likelihood of the model .
1114	r Fit the model .
1115	Generates a list of slices for a given number of blocks .
1116	Generates a mask for the input blocks .
1117	Creates a dense dense layer .
1118	Create a list of input inputs .
1119	Create a list of degrees from the input shape .
1120	Given a list of degrees return a list of degrees .
1121	Creates a mask for a mask .
1122	Builds the input shape .
1123	Call this function .
1124	Generate a random sample of samples .
1125	Creates a dummy ndarray of ddiag .
1126	Decorator for observing time series .
1127	Convert parameters to weights .
1128	Return the depth of the graph .
1129	Return the best order of the tree .
1130	Return a function that will be applied to the chain .
1131	Builds the probability chain .
1132	Compute the covariance loss loss .
1133	Calculate the optimal posterior posterior of the model .
1134	Builds the last day of a season .
1135	Builds a set of residuals and returns the residuals .
1136	Build a seasonal transition matrix .
1137	Builds a seasonal signal transition transition signal .
1138	Create a transition transition transition transition transition .
1139	Check if the observation data is empty .
1140	Validate observation data .
1141	Add a new scheduler to the scheduler .
1142	Set the checkpoint for the given checkpoint .
1143	Set the gradient of the gradient .
1144	Optimize the model .
1145	Sets the training summary .
1146	Sets the summary summary .
1147	Create an optimizer .
1148	Set training data .
1149	Sets the summary trigger .
1150	Reads the data set of data sets .
1151	Retrieve a list of news files from a source directory .
1152	Get a list of wv2v2 v2v2 v2v2 .
1153	Compile the given optimizer .
1154	Fit the model .
1155	Evaluate the given data .
1156	Predict the data .
1157	Get a list of mappings from a dataset .
1158	Preprocess the MIST dataset .
1159	Returns the end of the end of the end of the end .
1160	Validate an optimizer .
1161	Get the value of the file .
1162	Call a function on a bigDL function .
1163	Calls Java function .
1164	Convert an RDD into a Python object .
1165	Convert an object into a Python object .
1166	Get the activation layer .
1167	Create a new NDArray from a ndarray .
1168	Get the label of the image .
1169	Read a pandas DataFrame from a file .
1170	Write a file to a file .
1171	Get the image of the image .
1172	Get the image of the local image .
1173	Return the label of the image .
1174	Returns a pandas DataFrame .
1175	Predict the model .
1176	Fit the model .
1177	Transform the image to the given dataset .
1178	Save a keras model to disk .
1179	Build Keras model .
1180	Predict the model class .
1181	Sets the weights of the tensor .
1182	Get the weights of the layer .
1183	Save the tensorflow .
1184	Run the evaluation .
1185	Load a torch from a file .
1186	Load Keras from tensor .
1187	Creates a Criteria .
1188	Load weights from a json file .
1189	Loads the imdb database .
1190	Build Keras model .
1191	Get input shape .
1192	Get the output shape .
1193	Get the MNIST dataset .
1194	Read the data sets from the data directory .
1195	Get the path of the bigDL file .
1196	Determine if Spark is running .
1197	Export a checkpoint .
1198	Save a variable to a variable .
1199	Expand a tile .
1200	Precompute all symbols in a trie .
1201	Simple simple attention .
1202	Calculate attention .
1203	Compute the translation of two sequences .
1204	Get the log file .
1205	Log a message .
1206	Generate a summary of gradients .
1207	Dump the weights to disk .
1208	Read data from config file .
1209	Train a model .
1210	Connect to agent .
1211	Convert labels to labels .
1212	Convert probabilities to probabilities .
1213	Create a session .
1214	Load model .
1215	Get the moment of the model .
1216	Update the graph variables .
1217	Calculate the recall of the target function .
1218	Process a word .
1219	Convert tensor to tensor .
1220	Creates a BNN network .
1221	Convenience function for stacked RNN .
1222	Convert tensor to tensor .
1223	Create embedding layer .
1224	Creates a concatenation layer .
1225	Compute the concatenation of the input tensor .
1226	Creates a cnnnn model .
1227	Compute the LSTM model .
1228	Convenience function to create a tensor .
1229	Convenience function for training .
1230	Convenience function for tensor .
1231	Drop a tensor .
1232	Builds the network .
1233	Builds the convolution layer .
1234	Build basic network network .
1235	Train a batch .
1236	Predict a batch of labels .
1237	Make a list of sentence vectors .
1238	Convert a list of tuples to a list of tuples .
1239	Calculate the accuracy of a sentence .
1240	Verify that the given URL is valid .
1241	Extract certificates from a certificate .
1242	Verify a certificate chain .
1243	Verify a signature .
1244	Verify that the signature is signed .
1245	Return a list of all the controls .
1246	Returns a list of all the bots in the bot .
1247	Returns a list of telegram controls .
1248	Returns a list of all the autocomplete commands .
1249	Main entry point .
1250	Decorator for decorator .
1251	Decorator for decorator .
1252	Calculate accuracy .
1253	Calculate the accuracy of the predictions .
1254	Pre - trained embedding .
1255	Read data from a data file .
1256	Creates a dummy agent .
1257	Convert x to numpy .
1258	Pretty print metrics .
1259	Populate the settings directory .
1260	Load the model .
1261	Save the model .
1262	Create a train operation .
1263	Search for a given word .
1264	Calculate the default cost .
1265	Start the timer .
1266	Handle a request .
1267	Perform an agent .
1268	Generate a response .
1269	Handle an intent .
1270	Handle the launch message .
1271	Handle error messages .
1272	Pretty print this structure .
1273	Calculate the loss of loss .
1274	Build a model from a config file .
1275	Interactive model .
1276	Predict a model from a stream .
1277	Reads the input file and returns a list of tuples .
1278	Create a function from a module name .
1279	Registers a metric name .
1280	Get a metric by name .
1281	Convert a label from a string .
1282	Calculate the best value of the best value .
1283	Encode tokens .
1284	Read requirements file .
1285	Calculate log loss loss .
1286	Export the weights to the given hub .
1287	Show details of an item .
1288	Create an Ecommerce agent .
1289	Main entry point .
1290	Download a file from a source file .
1291	Truncate a file .
1292	Download a file from a URL .
1293	Recursively update an editable dictionary .
1294	Convert URL to MD5 .
1295	Set a query parameter .
1296	Return a dictionary representation of the response .
1297	Return the JSON representation of the control .
1298	Returns a dictionary of the card action action .
1299	Return the JSON representation of this control .
1300	Generate the bot .
1301	Calculate the F1F1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1
1302	Calculate recall recall .
1303	r Check if the GPU is available .
1304	Parse a config property .
1305	Parse a config file .
1306	Expand path to path .
1307	Create a Component from a dictionary .
1308	Runs the request .
1309	Delete a conversation .
1310	Refresh valid certificates .
1311	Verify that the signature is valid .
1312	Handle a request .
1313	Create a class from a string .
1314	Registers a model class .
1315	Get a model from the registry .
1316	Get the GLM model path for a model .
1317	Create a GLM model .
1318	Creates a H2ClusterClusterClusterClusterCluster instance .
1319	Shut down the server .
1320	Check if the server is running .
1321	Show the status of the cluster
1322	List all jobs
1323	Return a list of time zones .
1324	Populate self from self . h2 .
1325	Return a list of metal parameters .
1326	Starts a test function .
1327	Get a summary of a Frame .
1328	Delete a frame .
1329	Get model builders .
1330	Validate model parameters .
1331	Compute the metrics for a given model .
1332	Get model metrics .
1333	Delete a model .
1334	Convert the data to a table .
1335	Run an EC2 instance .
1336	Terminate instances .
1337	Stop instances .
1338	Start a list of instances .
1339	Reboot instances .
1340	Waits for an SSH server .
1341	Get the full name of a function .
1342	Finds a function from a python code .
1343	Return a string representation of a function .
1344	Wrap text with indentation .
1345	Join the model .
1346	Train the model .
1347	Fit the model .
1348	Get the parameters of the estimator .
1349	Handle signal handler .
1350	Delete output directory .
1351	Removes a remote sandbox .
1352	Get the port from the server .
1353	Parse the cloud size of the cloud .
1354	Stop the process .
1355	Stop the client .
1356	Get the IP address .
1357	Get the port s port
1358	Get the roc metric for this model .
1359	Determine the size of the model .
1360	Calculate the mean error between two targets .
1361	Calculate the mean squared error .
1362	Calculate the median error .
1363	Compute the variance of the variance between two targets .
1364	Assert that a variable is a valid type .
1365	Assert that the value matches the given regex .
1366	Assert that the condition is a valid value .
1367	Retrieves a list of arguments .
1368	Check if a variable is a valid type .
1369	Get the name of a type .
1370	Generate lambda code for lambda code .
1371	Check if a variable is valid .
1372	Checks if a variable is valid .
1373	Get the config object .
1374	Read configuration file .
1375	Generate a list of log files .
1376	Execute the progress bar .
1377	Store the progress bar .
1378	Calculate the model parameters .
1379	Estimate the progress of the progress bar .
1380	Guess the next poll interval .
1381	Compute the progress bar .
1382	Calculate the progress of the progress bar .
1383	Draw a text file .
1384	Compute the width of the widget .
1385	Get terminal size .
1386	Set the encoding of the file .
1387	Fit the model to the model .
1388	Get a frame from a frame .
1389	Refresh the frame .
1390	Returns the type of the given column .
1391	Return the columns of a column .
1392	Display the summary of the display .
1393	Describe the frame .
1394	Return the head of this table .
1395	Multiply matrix .
1396	Return a list of all levels in the graph .
1397	Return the number of levels .
1398	Sets the level of this frame .
1399	Set the levels of the domain .
1400	Rename the table .
1401	Set the names of the column names .
1402	Set the name of the frame .
1403	Return True if the given item is a single item .
1404	Modify the column column column column .
1405	Compute the column column column column .
1406	Print the structure
1407	Return a pandas DataFrame as a pandas DataFrame .
1408	Remove a column from the table .
1409	Compute the quantile of the distribution .
1410	Concatenate multiple frames .
1411	Bind data to DataFrame .
1412	Bind data to a row .
1413	Split a frame into a single frame .
1414	Gets a group by its name .
1415	Fill the dataframe with the given axis .
1416	Implementation of impute method .
1417	Merge two columns .
1418	Return the lower level of a variable .
1419	Insert missing values .
1420	Compute the variance of the variable .
1421	Corresponds to coroutine
1422	Return the distance between two points .
1423	Return the factor of the column .
1424	Split a string into a string .
1425	Count the number of rows matching the given pattern .
1426	Return a new row with the given index .
1427	Strips a horizontal frame .
1428	Compute the entropy of the graph .
1429	Return the number of substrings for the given path .
1430	Compute the table of data .
1431	Plot the histogram of the histogram .
1432	Return the index of the expression .
1433	Subtracts the given pattern .
1434	Return the top level of this frame .
1435	Return an expression with the given pattern .
1436	Return an astroid node .
1437	Return the difference between two frames .
1438	Return an array of NaNs .
1439	Return the minute of the minute .
1440	Runs the H2Frame with the given seed .
1441	Generate a random split split .
1442	Shortcut to cut the frame .
1443	Return the index of the index .
1444	Apply an expression to the graph .
1445	Parse a text string .
1446	Parse a file .
1447	Move data to the current position .
1448	Unparse the token .
1449	Get the size of the model
1450	Get the centers of the model .
1451	Return the center of the model .
1452	Connect to the server .
1453	Make an API request .
1454	Verify that the version of the given version is available .
1455	Import a path from a path .
1456	Upload a file to a file .
1457	Import a file .
1458	Import a Hive table .
1459	Import a SQL table .
1460	Import a SQL table .
1461	Parse a single frame into a frame .
1462	Return a copy of a dataframe .
1463	Get a model from a model .
1464	Get a grid by id
1465	Retrieves a frame from a frame .
1466	Download a POJO file .
1467	Download a CSV file .
1468	Download all logs from a directory .
1469	Export a file to a file .
1470	Convert a DataFrame into a DataFrame .
1471	Display a demo .
1472	Load a dataset from a file .
1473	Create metric metrics for a given model .
1474	Creates a new key .
1475	Upload a custom metric to a custom metric .
1476	Check if a frame id is valid .
1477	Return a human readable human readable string .
1478	Normalizes a slice .
1479	Check if slice is a slice .
1480	Predict a pandas dataframe
1481	Predict a yaml file .
1482	Decorator for deprecated functions .
1483	Join this job .
1484	Return a deep copy of the model .
1485	Print the summary of the model .
1486	Show hyperparameters .
1487	Get hyperparameters for hyperparameters .
1488	Get the hyperparameters of the hyperparameters .
1489	Gets the model for the given model .
1490	Fetches the model with the given thresholds .
1491	Returns a pandas DataFrame of the model .
1492	Retrieve the targets of the model .
1493	Plot the scatter plot .
1494	Translate a name into a string .
1495	Indent indentation .
1496	Extracts the run code from the given log file .
1497	Main entry point .
1498	Close the session .
1499	Get the session id .
1500	Start logging .
1501	Prepare data for data
1502	Prepare the payload for a file .
1503	Log a transaction .
1504	Log the end of the response .
1505	Log a message .
1506	Processes a response from a file .
1507	Print a message .
1508	Get the automaton for the given project .
1509	Downloads a project from the database .
1510	Download a model from the model .
1511	Fit the model .
1512	Transform the data to the model .
1513	Return the inverse of the matrix .
1514	Extracts a string from a string .
1515	Find the node name of a node .
1516	Find the git hash of the git branch .
1517	Finds the build timeout for the given function .
1518	Check if the build_failure fails .
1519	Find the build id for the build_id .
1520	Extract the build URL from a URL .
1521	Extracts the java message from the java file .
1522	Save a json dictionary to a json file .
1523	Update the summary file .
1524	Write file content to file .
1525	Write a Java message to a Java file .
1526	Load a list of Java modules .
1527	Normalize enum constants .
1528	Returns a list of synonyms for a word .
1529	Poll the job .
1530	Convert the Json model to a file .
1531	Fetches the fit frame .
1532	Compute the percentile of a sorted list of values .
1533	Returns the default value for the parameter .
1534	Return the actual values of the model .
1535	Creates a deep feature .
1536	Get the score of the model .
1537	Show the model .
1538	Compute the variance of the model .
1539	Returns the residual degrees of the model .
1540	Return the coefficients of the model .
1541	Downloads a file from the repository .
1542	Downloads a MOJ file .
1543	Save model details .
1544	Checks that the predicted targets are expected .
1545	Return a list of cross - validation models .
1546	Generate GBM model .
1547	Run a deep learning model .
1548	Generate a GLM model .
1549	Wait for a key press .
1550	Return the dataframe as a pandas DataFrame .
1551	Show the table .
1552	Start a jar .
1553	Try to find the local server .
1554	Yields the path of the jar file .
1555	Get the stats table for this model .
1556	Create a csv writer .
1557	Convert a package to a path .
1558	Convert a directory path to a relative path .
1559	Parse a list of functions .
1560	Generate documentation for a given module .
1561	Return a list of all the modules in this directory .
1562	Write API docs to the API .
1563	Write the index to the file .
1564	Return a list of cell values .
1565	Load the json message from a JSON file .
1566	Add new message to new message .
1567	Update the message dictionary .
1568	Extract a message from a file .
1569	Save a json file .
1570	Print a JSON file .
1571	Parse arguments .
1572	Print help message .
1573	Find all files in a directory .
1574	Find magic magic magic .
1575	Main entry point .
1576	Transform a dataframe into an H2Frame .
1577	Returns a summary of all tests that have been dumped .
1578	Extracts a report to a report .
1579	Plot the ROC curve .
1580	Compute the confusion matrix .
1581	Determine if we are available .
1582	Removes all data from a month .
1583	Return a list of endpoint groups .
1584	Updates the site .
1585	Return a json string .
1586	Comment for a user .
1587	Get a list of credentials .
1588	Returns True if the user has a given user .
1589	Returns True if the media matches the given hashtag .
1590	Check if user is a bot .
1591	Read a list of items from a file .
1592	Sets the message .
1593	Define a message .
1594	Downloads a resource .
1595	Guess the service information from a spec file .
1596	Update a power command .
1597	Delete a single application .
1598	Create a new application .
1599	Returns the URI for the request .
1600	Get a connection to the request .
1601	Perform a HTTP request .
1602	Execute script actions .
1603	Checks if the given name is available .
1604	Purge a vault .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Loads a CLI profile .
1608	Get the credentials for a given resource .
1609	Resolve an app .
1610	Checks to see if the name is available .
1611	Open a HTTP request .
1612	Sets the timeout for this client .
1613	Set the request header .
1614	Get all the response headers .
1615	Send a request to the server .
1616	Returns the status of the client .
1617	Return the status of the client .
1618	Return the response body .
1619	Sets the client certificate .
1620	Send a request to the server .
1621	Set request header .
1622	Send a request to the server .
1623	Get the response body .
1624	Get the id of the given id .
1625	Returns the serialized serialized serialization name .
1626	Verify the face of a face .
1627	Add a job .
1628	Get properties from an entry .
1629	Get children of a node .
1630	Find the namespace of the given child .
1631	Convert an XML string to a namespace .
1632	Return a Region instance from a service string .
1633	Return the availability of a namespace .
1634	Convert an XML string to a Metadata object .
1635	Replace the content of a runbook .
1636	Retrieve a list of recommendations for a given domain .
1637	Updates the specified kb .
1638	Gets the members of a user .
1639	Build a package from a repository .
1640	Import data from a resource group .
1641	Publish a resource .
1642	Renew the session .
1643	Replaces a word with the given word .
1644	Adds a new value to a secret .
1645	Gets the storage account properties .
1646	Gets the storage keys for a given service .
1647	Restore storage keys .
1648	Create a new storage account .
1649	Updates a storage account .
1650	Delete a storage account .
1651	Check if a storage account is available .
1652	Fetches information about a host .
1653	Create a host service .
1654	Delete a host .
1655	Create a deployment .
1656	Delete a deployment .
1657	Switches a deployment .
1658	Change the deployment configuration .
1659	Update a deployment status .
1660	Upgrade a deployment .
1661	Walk the upgrade domain .
1662	Reboot a role .
1663	Delete role instances .
1664	Check if a service is available .
1665	Returns a list of certificates for a given service .
1666	Get a certificate certificate .
1667	Add a new service certificate .
1668	Delete a service certificate .
1669	Gets the management certificate .
1670	Adds a new certificate .
1671	Delete a certificate .
1672	Get the affinity group properties .
1673	Create a new affinity group .
1674	Delete an affinity group .
1675	List subscription operations .
1676	Create a new reserved IP address .
1677	Delete a reserved IP address .
1678	Associate a reserved IP address .
1679	Associate a reserved IP address .
1680	Get a reserved IP address .
1681	Retrieves a role by its name .
1682	Create a virtual machine .
1683	Adds a role to the specified service .
1684	Update a role .
1685	Delete a role .
1686	Capture a role .
1687	Start a role .
1688	Start a new role .
1689	Restart a role .
1690	Shutdown a role .
1691	Shut down a service .
1692	Add a DNS server .
1693	Update a DNS server .
1694	Deletes a DNS server .
1695	Get a list of resource versions .
1696	Replicate a VM .
1697	Unplicate a VM .
1698	Share an image .
1699	Create a virtual machine .
1700	Delete a VM .
1701	List VM images .
1702	Updates an existing VM .
1703	Add a new OS image .
1704	Updates an image .
1705	Update an OSM image .
1706	Delete an image .
1707	Retrieves a data disk .
1708	Add data to disk .
1709	Update a data disk .
1710	Delete a data disk .
1711	Add a disk .
1712	Update a disk .
1713	Delete a disk .
1714	Summarize a management group .
1715	Build the receiver .
1716	Fetch next messages from the queue .
1717	Renames the lock .
1718	Create a new virtual machine .
1719	Convert a single group to a single group .
1720	Display screen text .
1721	Create a new key .
1722	Import a key from a vault .
1723	Update a key .
1724	Sets a secret .
1725	Sets a certificate .
1726	Create a connection string from a connection string .
1727	Get a subscription .
1728	List subscription subscriptions .
1729	Send messages to the server .
1730	Get the sender s sender .
1731	Get the receiver for this entity .
1732	Gets the sender for the given sender .
1733	Parse an async operation .
1734	Perform a GET request .
1735	Perform a POST request .
1736	Waits until an operation is completed .
1737	Retrieves the operation status .
1738	Update the request header .
1739	Builds a Travis CI project .
1740	Gets a list of certificates .
1741	Get a list of regions .
1742	Returns a list of namespaces .
1743	Get the namespace of a service .
1744	Create a new namespace .
1745	Delete a service .
1746	Check availability of a service .
1747	Get a list of topics .
1748	Gets a list of notifications .
1749	Get a list of relays .
1750	Get metrics for a given metric .
1751	Get metrics for a given topic .
1752	Get metrics for a given metric .
1753	Get metrics for a given service .
1754	Create a new environment .
1755	Create a new Venv environment .
1756	Create a new server .
1757	Set the admin password .
1758	List all available quota quotas .
1759	Gets a list of event logs .
1760	Create a firewall rule .
1761	Updates a firewall rule rule .
1762	Delete a firewall rule rule .
1763	List firewall rules .
1764	Fetches a list of services .
1765	Create a new database .
1766	Update a database .
1767	Delete a database .
1768	List all databases .
1769	Retrieve a list of agreements .
1770	Close the service .
1771	Close the receiver .
1772	Get the session state .
1773	Sets the session state .
1774	Receive a deferred message .
1775	Merge a reservation .
1776	Validate a challenge .
1777	Purge a single table .
1778	Handles the error handler .
1779	Create a new queue .
1780	Delete a queue .
1781	Get a queue by name .
1782	Create a new topic .
1783	Get a topic .
1784	Create a new rule .
1785	Gets a single rule .
1786	List the rules for a given topic .
1787	Create a new subscription .
1788	Get a subscription .
1789	List subscriptions .
1790	Send a message to a topic .
1791	Unlocks a subscription .
1792	Send a batch of messages .
1793	Unlocks a queue .
1794	Receive a queue message .
1795	Receive a subscription message .
1796	Create an event .
1797	Updates an event .
1798	Get an event by its name .
1799	Send a message to a hub .
1800	Update the HTTP header header .
1801	Get the authorization token .
1802	Check if token is expired .
1803	Get a token from the server .
1804	Update query parameters .
1805	Reset the service profile .
1806	Delete a message from the queue .
1807	Unlock the queue .
1808	Refresh the lock .
1809	Add a request to the client .
1810	Serializes this batch .
1811	Get information about the cluster .
1812	Get the cluster health policy .
1813	Unprovision an application .
1814	Gets a list of repair tasks .
1815	Submit a property batch .
1816	Handle HTTP error handler .
1817	Start a network trace .
1818	Lists the difference between two slots .
1819	Swaps an existing slot .
1820	Gets the specified event type .
1821	Create a new face from a stream .
1822	Handle redirect redirect .
1823	Create a new MigrationInstance
1824	Publish events .
1825	Move resources to a resource group .
1826	Set the profile .
1827	Lists all the results in the specified management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a topic .
1831	Delete a topic .
1832	Create a new subscription .
1833	Create a connection from a connection string .
1834	Get the properties of this service .
1835	Check if the lock is expired .
1836	Create a new session .
1837	Create a new subscription .
1838	Export the request rate limit .
1839	Handle the output queue .
1840	Add a new task to the queue .
1841	Handles task threads .
1842	Builds a configuration dictionary .
1843	Reset the user s password .
1844	Start a new environment .
1845	Create a message from a service .
1846	Convert an etree element into a Rule object .
1847	Convert an XML element to a queue .
1848	Convert an etree element into an XML element .
1849	Convert an XML element to a subscription .
1850	Create a new certificate .
1851	Delete a certificate .
1852	Get a client from a client .
1853	Get a client from a json dictionary .
1854	Creates a client from a client .
1855	Parse a list of enum results .
1856	Get the properties of an entry .
1857	Delete a certificate .
1858	Retrieves a queue by its name .
1859	List all queues .
1860	Retrieves a topic .
1861	List all topics .
1862	Receive deferred messages .
1863	Sends a deferred message .
1864	Retrieves the site details .
1865	Create a new site .
1866	Delete a site .
1867	Updates a site .
1868	Restart a website .
1869	Gets the metrics for the given metrics .
1870	Gets the metric definitions for a given website .
1871	Retrieves the publish profile .
1872	Get a publish profile .
1873	Update policy policies .
1874	Create a cloud service service .
1875	Checks to see if a job collection exists .
1876	Gets a single job collection .
1877	Perform a backup operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Connect to the sender .
1881	Get the certificate from the given path .
1882	Load cookies from the cache .
1883	Return the width of the terminal .
1884	Get the cut prefix of a string .
1885	Prints the given message .
1886	Format a file size .
1887	Format an elapsed time .
1888	Create a status line .
1889	Print a progress bar .
1890	Generate a list of segment numbers .
1891	Yield segments .
1892	Wait for the given time .
1893	Put a segment into the queue .
1894	Add a value to the queue .
1895	Retrieve the parameters from a file .
1896	Extract the noncecece from the response .
1897	Find vpid by url
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse a query string .
1901	Iterate over keys in a dictionary .
1902	Spawn a new process .
1903	Iterate over all tags in the given tag .
1904	Parse a multipart manifest .
1905	Determine the JSON encoding of a JSON string .
1906	Parse a JSON response .
1907	Parse an XML document .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Return the message as a string .
1912	Create a log record .
1913	Login to Live .
1914	Load a plugin .
1915	Updates a query with the given parameters .
1916	Iterate over all tags .
1917	Return a list of required plugins .
1918	Check if a file exists .
1919	Create an output file .
1920	Create http server server .
1921	Iterate over HTTP requests .
1922	Generate a stream of streams .
1923	Write a stream to a stream .
1924	Open a stream from a stream .
1925	Write a stream to a stream .
1926	Read a stream from a stream .
1927	Handle a streaming stream .
1928	Fetch streams from plugins .
1929	Fetch a list of streams .
1930	Resolve a stream name .
1931	Format a list of valid streams .
1932	Parse the given URL .
1933	Print all available plugins .
1934	Authenticate a Twitch user .
1935	Load plugins .
1936	Setup command line arguments .
1937	Setup console output .
1938	Setup HTTP session .
1939	Setup plugins .
1940	Setup the options for a stream .
1941	Log the current version .
1942	Get the stream id of the stream .
1943	Gets the frames of the given text .
1944	Set the value of an option
1945	Get the option for the given key .
1946	Set a plugin option .
1947	Get a plugin option .
1948	Resolve a URL .
1949	Load plugins .
1950	Convert seconds to seconds .
1951	Check if a string contains a string .
1952	Check if a string contains a string .
1953	Check if a string contains a string .
1954	Get the value of an attribute .
1955	Apply a function to a function .
1956	Convert a function to a map .
1957	Validate that a URL is valid .
1958	Find the element in xpath
1959	Find all elements in XML .
1960	Find the player URL for a player .
1961	Load the data from a string .
1962	Return the best match of a given command .
1963	Logs a user .
1964	Extracts the stream id from HTML .
1965	Extract stream info from HTML .
1966	Login to login .
1967	Add a function to the map .
1968	Calls API endpoint .
1969	Start a session .
1970	Get information about a media .
1971	Creates a new API client .
1972	Compress a string .
1973	Return a string representation of a character .
1974	Return a string representation of a string .
1975	Read bytes from the stream .
1976	Return the value of the code .
1977	Return the explanation of the code .
1978	Set the decode table .
1979	Set the length of the table .
1980	Show the code of the code .
1981	Read a tuple from the stream .
1982	Return the description of the table .
1983	Return the value of the given index .
1984	Return the span of the given index .
1985	Return the value of the given index .
1986	Return the mymemonic for the given index .
1987	Return a string representation of the given index .
1988	Compile the action table .
1989	Evaluate the given action .
1990	Generate hexadecimal data .
1991	Process the stream .
1992	Return the number of bytes in the buffer .
1993	Returns True if the stream is uncompressed .
1994	Read a block type .
1995	Convert a list of ints to IMTF
1996	Read a list of prefixes .
1997	Calculate the color of a color .
1998	Calculate the polygon of the given colors .
1999	Create an ArrowTable from a dataset .
2000	Patch a dataset .
2001	Add a vector to the voxel .
2002	Add a vector to the virtual vector .
2003	Generate graphiziz graph .
2004	Count the number of values in the column .
2005	Apply a mapping to a map .
2006	Creates a new app .
2007	Convert a list of files into a DataFrame .
2008	Create a new SAM message from a SAM file .
2009	Creates a dataset from a dataset .
2010	Create a DataFrame from a list of arrays .
2011	Create a new scalar from a scalar array .
2012	Create a DataFrame from a pandas DataFrame .
2013	Read a CSV file from a CSV file .
2014	Create a remote server .
2015	Generate a Zeovian .
2016	Concatenate a list of ds .
2017	Create a VRangeRange .
2018	Open a dataset .
2019	Evaluate a dataset .
2020	Decorator for decorator .
2021	Return a list of all the columns in the dataset .
2022	Run a task .
2023	Sort the layout .
2024	Get information about a file .
2025	Clear the background .
2026	Wait for the next plot .
2027	Open a document .
2028	Write a file to a file .
2029	Combine two arrays .
2030	Return numpy array .
2031	Compute the first element of an expression .
2032	Compute the mean of the given expression .
2033	Calculate the sum of the sum of expressions .
2034	Calculate the standard deviation .
2035	Calculate the covariance of the data .
2036	Calculate the minimum value of the given expression .
2037	Compute the minimum value of the expression .
2038	Calculate the median of the given expression .
2039	Creates a plot of widgets .
2040	Calculate the number of pixels in the image .
2041	Plot the HEALPixPix image .
2042	Create a 3D 3D 3D 3D plot .
2043	Return the dtype of the given expression .
2044	Get the private directory for this server .
2045	Get the state of the model .
2046	Set the current state .
2047	Remove virtual meta data from disk .
2048	Write virtual meta data to disk .
2049	Write meta data to disk .
2050	Return a list of subspace expressions .
2051	Set the variable s value .
2052	Evaluate the given variable name .
2053	Evaluate the block mask .
2054	Convert a DataFrame to a dictionary .
2055	Return a copy of the DataFrame .
2056	Convert a pandas DataFrame to a pandas DataFrame .
2057	Convert an ArrowFrame to an ArrowTable .
2058	Convert a Table to a Table .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Adds a vector to the cartesian coordinates .
2062	Add a vector to the cartesian coordinates .
2063	Adds a vector to the cartesian coordinates .
2064	Adds a vector to the cartesian coordinates .
2065	Add virtual rotations to a vector .
2066	Add a vector to the cartesian coordinates .
2067	Add a vector to the grid .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a new variable .
2071	Delete a variable .
2072	Return the tail of this list .
2073	Print the head of the table .
2074	Return a pandas DataFrame .
2075	catenate two tables
2076	Sets the current row .
2077	Return a list of column names .
2078	Removes the data from the DataFrame .
2079	Return a new DataFrame .
2080	Extracts a list of tuples .
2081	Generate a random sample .
2082	Split a random distribution into a random distribution .
2083	Splits an array into chunks .
2084	Sort a list of values .
2085	Return a new DataFrame .
2086	Undo the selection .
2087	Redirect the selected selection .
2088	Return True if the selected selection is selected .
2089	Select a selection expression .
2090	Select rows that are missing .
2091	Drop NaN .
2092	Select a bounding box .
2093	Select a bounding box .
2094	Select a circle .
2095	Select an ellipse .
2096	Select a selection .
2097	Sets the selection of this selection .
2098	Set selection .
2099	Create a new selection .
2100	Find the valid name of the column .
2101	Return the root nodes of the graph .
2102	Generate graphiziziz graph .
2103	Add a categorical column .
2104	Convert a column to an integer .
2105	Return a Dataset object .
2106	Return the length of the array .
2107	Helper method to add a new DataFrame .
2108	Concatenate two DataFrames .
2109	Export the contents of the HDF5 file .
2110	Add a column to the DataFrame .
2111	Patch DataFrame .
2112	Register a function .
2113	Fill a numpy array .
2114	Return the day of the given x .
2115	Return the day of the given x .
2116	Determine if the year is a leap year .
2117	Return a pandas DataFrame .
2118	Return a pandas DataFrame .
2119	Return the month name of a month .
2120	Return the datetime of a datetime
2121	Return the day name of a datetime .
2122	Returns a datetime with the given year .
2123	Return the datetime of the datetime .
2124	Return a pandas DataFrame .
2125	Return the second time series of two pandas DataFrame
2126	Convert a string to a string .
2127	Concatenate two strings .
2128	Return True if string matches the given pattern .
2129	Count the number of occurrences in a string .
2130	Find the first occurrence of a string .
2131	Get a column from a string .
2132	Return the index of a string .
2133	Convert a string to a string .
2134	Convert a string to a string .
2135	Pad a column to a string .
2136	Convert a string to a string .
2137	Find the first occurrence of a string .
2138	Return the index of a string .
2139	Convert a string to a string .
2140	Convert a string to a string .
2141	Slice a string into a string .
2142	Convert a string to a string .
2143	Convert a string to a string .
2144	Convert a string to a string .
2145	Gets the autocomplete of an array .
2146	Return a copy of the array .
2147	Write properties to a file .
2148	Write comment to file .
2149	Write a property to a file .
2150	Iterate over properties .
2151	Yield lines from file .
2152	Show all available versions .
2153	Renames a keyword argument .
2154	Sets the fftlib library .
2155	Track the beat .
2156	Adjust the pitch to the audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time to frames .
2160	Encode a MIDI note .
2161	Calculate the melometers for a given frequency .
2162	Calculate the frequency of melis .
2163	Fetches the FFT frequency of a given frequency .
2164	Calculate the frequency frequencies for a given frequency .
2165	Calculate the frequency of the melometers .
2166	Calculate weight based on the given frequency .
2167	Time series of timeseries .
2168	Generate a sample of samples .
2169	Convenience function to generate a CQT .
2170	Calculate the CQT for a given sample .
2171	Calculate the frequency of a CQ file .
2172	Calculate the frequency of the filter .
2173	Truncate a list of CQs .
2174	Compute the response response .
2175	Calculate the number of samples for each channel .
2176	Decompress a signal .
2177	Calculate the cost function cost for each step .
2178	Determines the backstep of the step .
2179	Convenience function for v1 .
2180	Compute the vigenvalues of a transition matrix .
2181	Return a uniform uniform uniform state .
2182	Compute the transition loop .
2183	Compute the transition cycle .
2184	Compute the transition matrix .
2185	Determine the onset of the onset .
2186	Calculate the totalness of the onset of the onset .
2187	Calculate the onset of an event .
2188	Calculate the onset of a set of samples .
2189	r Create a CSV file .
2190	Write an audio file to a file .
2191	Convert data to cmap .
2192	Create a waveplot plot .
2193	Set the current image .
2194	Calculate mesh coordinates .
2195	Check the axes of the axes .
2196	Scale axes .
2197	Calculate the frequency of a set of frequency points .
2198	Calculate the basis of a melis band .
2199	Calculate the frequency of the frequency of a chord .
2200	Calculate the coordinates of a chromosome .
2201	Calculate the number of frames in a frame .
2202	Estimate the pitch of the pitch curve .
2203	Calculate the spectrum of the spectrum
2204	Calculate the HSSS algorithm .
2205	Calculate the harmonic harmonic harmonic of a given function .
2206	Compute the probability of the given data .
2207	Determine the time of a time series .
2208	Calculate the pitch shift of the given samples .
2209	Return a list of audio samples .
2210	Convert a frame to a frame .
2211	Removes samples from the given frame .
2212	Splits samples into samples .
2213	Calculate the phase of a phase .
2214	Convert the amplitude to an amplitude .
2215	Calculate the spectral spectrogram .
2216	Saves the samples of the audio file .
2217	Transformer decomposition .
2218	Return a n - dimensional n - dimensional n - dimensional array of data .
2219	Perform a filter on the network .
2220	Calculate the density of a mesh .
2221	Calculate chroma from chroma
2222	Decorator to wrap a float .
2223	r Calculate the constant frequency of a given frequency .
2224	r Calculates the frequency of the frequency of the frequency of the frequency of the frequency .
2225	Convert a CQ chromosome to CQ .
2226	Calculate the bandwidth of a window .
2227	Get the window of a given window .
2228	r multiprocessing function .
2229	r Calculate the frequency frequencies for a given frequency .
2230	Fill a window with window length .
2231	Summarize a window .
2232	Return the diagonal of a window .
2233	Calculate the spectral centroid of the spectrum .
2234	Calculate the spectral waveform .
2235	Compute the spectral density of a spectral spectrum .
2236	Calculate polygon features .
2237	Calculate the cross - correlation rate .
2238	Calculate the chroma frequency of a chromosome .
2239	r Compute the chroma quantile of chromatic data .
2240	Calculate the density of a mesh .
2241	Compute the Jaccardian between two sets .
2242	Compute the overlap between two intervals .
2243	Match intervals between intervals .
2244	Match intervals between intervals .
2245	Match a list of events .
2246	Calculate the effectiveness of a set of samples .
2247	Interpolate harmonics .
2248	Calculate the harmonics of the harmonics .
2249	Calculate the harmonically harmonic harmonics .
2250	Load audio file .
2251	Load audio data from file .
2252	Convert audio to mono .
2253	Resample samples to a given target .
2254	Calculate the autocorrelation of the given data .
2255	Compute the lpc for the given order .
2256	Creates a list of clicks .
2257	Calculate the tone of a frequency .
2258	Calculate the chirp for a given frequency range .
2259	Get all files in a directory .
2260	Strip the audio audio .
2261	Parse command line arguments .
2262	Simulate the PSS algorithm .
2263	r Track a beat track .
2264	Calculate the beat beat tracker .
2265	Calculate the sample score for a given onset .
2266	Calculate the beat rate for a given period .
2267	Return the last beat score .
2268	Convert a recurrence into a lag matrix .
2269	Convert a lag matrix to a given lag matrix .
2270	Decorator to wrap a timedelta function .
2271	Subtract segments from data .
2272	Compute the aggregation of the data .
2273	Calculate the path of a path .
2274	Detect the onset of the onset .
2275	Create a frame from a YAML frame .
2276	Validate audio data .
2277	Validate x .
2278	Adjust the length of the length of the data .
2279	Sort a list of axes .
2280	Normalize a Sensor object .
2281	Return the maximum value of x .
2282	Parses the peak data .
2283	Parses a sparse matrix .
2284	Roll a sparse matrix .
2285	Convert x to float
2286	Convert a slice to a slice .
2287	Synchronize data from data .
2288	Perform softmask on X .
2289	Convert x to float
2290	Convert frames to video .
2291	Read the current image .
2292	Get a frame from the buffer .
2293	Convert a frame to a file .
2294	Track the progress bar .
2295	Compute the progress bar .
2296	Flip an image from an image .
2297	Rotate an image by angle .
2298	Clip a bbox box .
2299	Convert bbox to bbox .
2300	Convert a bboxes image to an image .
2301	Implementation of padding .
2302	Convert an image to an image .
2303	Scale the size of a size
2304	Resize an image .
2305	Resize an image .
2306	Resize a scale .
2307	Register a file handler .
2308	Returns the priority of the given priority .
2309	Decompose an array of values .
2310	Display an image .
2311	Visualize bboxes .
2312	Read a flow file .
2313	Write the flow to a file .
2314	Decompose a tensor .
2315	Loads a state dictionary from a module .
2316	Load a model from a model .
2317	Convert a state dict to a dictionary .
2318	Save a checkpoint .
2319	Initialize optimizer .
2320	Initialize the logger .
2321	Return the current optimizer .
2322	Register a hook .
2323	Run the workflow .
2324	Register training hooks .
2325	Convert a video to a file .
2326	Resize a video .
2327	Cut a video file .
2328	Concatenate video list .
2329	Return a list of items from a file .
2330	Create a dictionary from a file .
2331	Convenience function for convolution .
2332	Create an object from a dictionary .
2333	Read an image file .
2334	Create an image from a file .
2335	Write image to file .
2336	Convert an RGB color image to a 2D image .
2337	Convert an image to RGB color .
2338	Convert inputs to an iterable .
2339	Checks if a sequence is a sequence of sequences .
2340	Slice a list of lens .
2341	Decorator to check if necessary .
2342	Calculate the average of all values .
2343	Scans a list of devices .
2344	Convert a color into a tuple .
2345	Get the time of the timer .
2346	Start the timer .
2347	Return the elapsed time .
2348	Get the elapsed time of the timer .
2349	Display a flow of flow .
2350	Convert a flow to RGB color .
2351	Create a color wheel .
2352	Calculate accuracy of a target .
2353	Scans a list of inputs .
2354	Concatenate kwargs .
2355	Fetch the response .
2356	Return a json string .
2357	Return the text as a string .
2358	Handle a callback .
2359	Run multiple requests .
2360	Make a request .
2361	Start the master .
2362	Normalize a task .
2363	Parse YAML file .
2364	Return the wheel name .
2365	Get the name of the archive .
2366	Add additional requirements to the metadata .
2367	Convert egginfo to distutils
2368	Create a message .
2369	Suggests a suggestion .
2370	Create an attachment .
2371	List attachments .
2372	Create an attachment .
2373	Create a Trace object .
2374	Set the telemetry client .
2375	Reads the contents of a container .
2376	Write changes to the database .
2377	Deletes the specified keys .
2378	Creates an item from the store .
2379	Creates a dictionary with the given attributes .
2380	Sanitize key .
2381	Creates and creates a new database .
2382	Get database database .
2383	Get a container .
2384	Creates an event from the query .
2385	Returns a ConversationReference object .
2386	Get the name of the step .
2387	Returns True if the given channel is supported .
2388	Determines if a card is allowed .
2389	Get channel id .
2390	Checks if the token is valid .
2391	Create a CardCard .
2392	Return the parameters of this Definition .
2393	Return a copy of this instance .
2394	Return the inverse gate .
2395	Set the value of the circuit .
2396	Return a copy of this object .
2397	Convert a string to a string .
2398	Return the QAML expression .
2399	Run the given circuit .
2400	Processes a single step .
2401	Return a list of all the results .
2402	Dump the result of the flow .
2403	Creates a FlowController with the given arguments .
2404	Calculate the base base base base .
2405	Parse a single gate .
2406	Compute a single gate matrix .
2407	Compute the eigenvalues of a matrix .
2408	Calculate the eigenvalues of a matrix .
2409	Convenience function to compute the eigenvalues .
2410	Convert a circuit to a DAG .
2411	Evaluate the fit function .
2412	Calculate the fit of a function .
2413	Plot the coherence matrix .
2414	Return the raster data .
2415	Plot raster data .
2416	Split a list of parameters into a list of parameters .
2417	Compute the uid of the ui .
2418	Convert y zy to y zeros .
2419	Validate the quantum state .
2420	Trim the image .
2421	Gets the gate for the given instruction .
2422	Convert a circuit into an Instruction .
2423	Runs the given dag .
2424	Find the best subset of the network .
2425	Create a new barrier .
2426	Calculate average data .
2427	Process a bitmap .
2428	Process a node .
2429	Process a node .
2430	Processes a QNode .
2431	Process a node .
2432	Process a condition .
2433	Create a DAG .
2434	Return the duration of a channel .
2435	Get the start time of a channel .
2436	Return the stop time for the given channels .
2437	Yield instruction instructions .
2438	Check that the value is a valid type .
2439	Dump data to a dictionary .
2440	Loads additional data from the given list .
2441	Create a validation schema .
2442	Validate instance .
2443	Validate the model .
2444	Serializes this model to a dictionary .
2445	Load a model from a dictionary .
2446	Convenience function for Fourier .
2447	Return a copy of the trace matrix .
2448	Convert a density matrix to a vector .
2449	Deserialize a vector matrix .
2450	Convert a polynomial matrix into a matrix .
2451	Takes an array and returns an array of values .
2452	Return the outer product of two vectors .
2453	Return the concurrence of a given state .
2454	Calculate the entropy of a vector .
2455	Calculate the entropy of a state .
2456	Calculate the mutual entropy of a state .
2457	Compute the entropy of a matrix .
2458	Compute the eigenvalue of the eigenvalue .
2459	Flatten a schedule into a schedule .
2460	Shift a schedule .
2461	Insert a schedule into a new schedule .
2462	r Insert a child of a child .
2463	Convenience method to compute a uuid .
2464	Get the backend status .
2465	Start the iteration .
2466	Calculate the time for the current iteration .
2467	Disassemble an experiment .
2468	Returns the distance between two strings .
2469	Create a quaternion object from an axis .
2470	Creates a quaternion from an angle .
2471	Normalize a quaternion .
2472	Convert a matrix to a matrix .
2473	Convert this matrix to a zeros .
2474	Process data from data .
2475	Plot a histogram of data .
2476	Check if the value is a valid value .
2477	Checks that the given index is valid .
2478	Check if matrix is a square matrix .
2479	Check if matrix is diagonal .
2480	Check if a matrix is symmetric .
2481	Returns true if matrix is a symmetric matrix .
2482	Check if a matrix is positive .
2483	Check if matrix is identity matrix .
2484	Returns True if matrix is a symmetric matrix .
2485	Convert data to a qubit .
2486	Convert data to a superopop .
2487	Convert data to krai .
2488	Convert the input data into a tuple .
2489	Convert data to PPM .
2490	Convert data to stderr .
2491	Convert data to an operator .
2492	Convert an operator to an operator .
2493	Convert an operator to an operator .
2494	Return a copy of the input data .
2495	Return a copy of the input data .
2496	Convert the krai data into a polynomial .
2497	Convert data to krai .
2498	Convert a list of tuples into a list of tuples .
2499	Convert a list of samples to a tensor .
2500	Convert a list of krains to a tensor .
2501	Convert a list of kubernetes .
2502	Convert input data into a tuple .
2503	Convert the input data to a qubits .
2504	Normalize matrices .
2505	Transform a matrix into a matrix .
2506	Checks if n qubits are numpy .
2507	Hide ticklines .
2508	Set the label of the axes .
2509	Clears all points .
2510	Add vectors to the list .
2511	Add an annotation .
2512	Render the plot .
2513	Plot the front of the surface .
2514	Show the figure .
2515	Calculate the qubits of a qubits .
2516	Return the top level of the top level .
2517	Return the mid - part of the middleware .
2518	Return the bot .
2519	Return the length of the bot .
2520	Return the parameters for the instruction .
2521	Return the label for the given instruction .
2522	Return a latex representation of this node .
2523	Compile circuit .
2524	Filter warnings .
2525	Get information about the local hardware .
2526	Check if the given port is connected .
2527	Check the status of a job .
2528	Convert a timeseries to a constant .
2529	Calculate the square of the given times .
2530	Calculate the triangle of a triangle .
2531	Calculate the cosine of the given times .
2532	r Fix Gaussian width .
2533	r Compute Gaussian Gaussian Gaussian Gaussian .
2534	Compute the Gaussian derivative of a Gaussian distribution .
2535	r Compute the Gaussian Gaussian distribution .
2536	Creates a passman manager .
2537	Creates a passgraph for the given basis .
2538	Returns True if the given register is a valid bit register .
2539	Return a copy of this circuit .
2540	Return the inverse of the inverse .
2541	Appends an instruction to an instruction .
2542	Attach an instruction .
2543	Add a QuantumCircuit circuit .
2544	Check if qubits are duplicated .
2545	Checks that the qarg is a valid QQK .
2546	Checks that the circuit is valid .
2547	Check that the circuit is compatible .
2548	Return a string representation of the instruction .
2549	Draw circuit .
2550	Return the size of the gate .
2551	Return the width of the QR code .
2552	Count the number of operations .
2553	Return number of connected components .
2554	Bind the parameters to the circuit .
2555	Bind a parameter to the given parameter .
2556	Draw a pulse of samples .
2557	Perform a forward search on the network .
2558	Map free gates to free gates .
2559	Calculate the distance between the layout .
2560	Return the score of a step .
2561	Return a copy of the DAG .
2562	Transform the layout to the given layout .
2563	Create swap ops for a given edge .
2564	Runs the mapping .
2565	Add a physical qubit .
2566	Add an edge to the graph .
2567	Return a subgraph with the given nodes .
2568	Return the physical qubits of the graph .
2569	Returns True if the graph is connected to the graph .
2570	Compute the distance matrix .
2571	Compute the distance between two qubits .
2572	Compile circuit .
2573	Convenience method to create a cuid .
2574	Return the inverse of this instruction .
2575	Ensure that the gate is in the gate .
2576	Set the value of the given value .
2577	Subscribe to the event .
2578	Called by the dispatcher .
2579	Remove an event from the event .
2580	Publish an event .
2581	Initialize a qubits .
2582	Define the gate .
2583	Return the gates for the gate .
2584	Calculate the angles of a complex complex .
2585	Multiply multiple qubits .
2586	Check if value is a virtual machine .
2587	Return a copy of this layout .
2588	Combine an edge map into a dictionary .
2589	Compute the CCT instruction .
2590	Insert a schedule .
2591	Checks if the given name is valid .
2592	Convert a list of gates into a list of gates .
2593	Runs the transition matrix .
2594	Update layer .
2595	Return a list of Pauli components .
2596	r Creates a label from a string .
2597	Initialize the QTree instance .
2598	r Compute the difference between two points .
2599	Convert this matrix into an operator .
2600	Convert the circuit to a Quantum circuit .
2601	Update the zipy .
2602	Update the xarray of x .
2603	Inserts a new pauli .
2604	Append pauli to the database .
2605	Delete a set of indices .
2606	Generate a random random integer .
2607	Create a Pauli object from a Pauli .
2608	Get the outcome of a qubit .
2609	Add a sample to the sample .
2610	Add an instruction to the qubit .
2611	Add a qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state of the state vector .
2615	Validate sample samples .
2616	Run a job .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initialize the unit .
2621	Returns the unitary of the unit .
2622	Run a job .
2623	Ensure that the experiment is valid .
2624	Checks whether the bits is a bit integer .
2625	Runs the given dag .
2626	Check if interval is overlapping .
2627	Shift the given time .
2628	Shift the given time .
2629	Returns the start time for the given channels .
2630	Return the stop time for the given channels .
2631	Check if the given timeseries are overlapping .
2632	Merge multiple times .
2633	Shift the given time to the given time .
2634	Report a comment .
2635	Processes a rho matrix .
2636	Plot the state of a state machine .
2637	Return a new rz gate .
2638	Swaps the given ttl .
2639	Initialize the backend .
2640	Create a program graph .
2641	Select next next program .
2642	Gets the best cost of the gate .
2643	Gets the best best qubits for the given prog .
2644	Run the program .
2645	Return a list of instruction lists .
2646	Return the inverse of the gate .
2647	Sets the values of the gate .
2648	Set the value of the gate .
2649	Returns True if the matrix is a unit matrix .
2650	Return the conjugate of the matrix .
2651	Transpose this operation to a tensor .
2652	Return the power of the operator .
2653	Return the shape of the output .
2654	Convert an Instruction to an operator .
2655	Swap the mapper layer .
2656	Split a bitstring into a bitstring .
2657	Format the memory memory .
2658	Format a single byte array .
2659	Formats a list of memory levels .
2660	Format counts of counts .
2661	Formats the state of a vector .
2662	Format a matrix .
2663	Decorator to submit a job .
2664	Submit a job .
2665	Return the status of this job .
2666	Returns True if the given frequency is within the given range .
2667	Plots the multivariate multivariate matrix .
2668	Get the qubits of the qubit .
2669	Get the MASTA file for the user .
2670	Run the given circuit .
2671	Plots the state of a sphere .
2672	Choose the number of k k k k k .
2673	Return the index of the lexic index .
2674	Plots the state of a matrix .
2675	Returns a list of unique names that are unique .
2676	Get the node node .
2677	Return a sample of a sample .
2678	Sample a sample .
2679	Calculate a square waveform .
2680	Return a sampling of a signal .
2681	Return a sampling of the triangle .
2682	Calculate the cosine of a sample .
2683	Sample a sample .
2684	r Sample a Gaussian sample .
2685	r Compute the derivative of a sample .
2686	Sample a Gaussian sample .
2687	Calculate the distance between two axes .
2688	Serializes the tree to a string .
2689	Get the backend instance .
2690	Rename a register .
2691	Remove all operations from the node .
2692	Add a quantum register .
2693	Add a new classical register .
2694	Add a wire to the wire .
2695	Check if a condition is valid .
2696	Return a list of all bits in the condition .
2697	Add a node to the graph .
2698	Apply an operation to the graph .
2699	Checks that the edge map maps to edge maps .
2700	Checks if the wire map is valid .
2701	Map a condition to the wire .
2702	Extend a graph from the graph .
2703	Compose the state of the given circuit .
2704	Checks if the wires are valid .
2705	Make predictions for a node .
2706	Calculate the predicates of the input graph .
2707	Return the topological nodes of the graph .
2708	Iterate over all edges .
2709	Return a list of all nodes in the graph .
2710	Return a list of gate nodes .
2711	Return a list of namedtuple names .
2712	Return a list of QG gates .
2713	Return the predecessors of the given node .
2714	Return a list of predecessors of a node .
2715	Return the ancestors of the given node .
2716	Returns a list of successors of the given node .
2717	Remove a node from the graph .
2718	Removes a node from the graph .
2719	Remove a node from the graph .
2720	Remove a node from the graph .
2721	Remove nodes from a node .
2722	Return a list of all nodes in the graph .
2723	Generator for serialization .
2724	Yield multi - layer layers .
2725	Collect all nodes in the graph .
2726	Yield all nodes in the wire .
2727	Count the number of operations .
2728	Return the summary information .
2729	Create a Tomography object from a basis .
2730	Calculate the Pauli parameters for a given circuit .
2731	Creates a tomography set .
2732	Process a tomography set .
2733	Create a list of tuples for a given circuit .
2734	Calculate the MOC data .
2735	Calculate the marginal counts for each measurement .
2736	Fit a tomography model to the given data .
2737	Calculate the fit of the fit .
2738	Compute the projection of the given basis .
2739	Calculate the linear inverse of a function .
2740	Calculate the w . rho .
2741	Calculate wigner data .
2742	General gate function .
2743	Check the status of a job .
2744	Monitor a job .
2745	Calculate the Euler angles .
2746	Simplify a Uuler .
2747	Run the graph on the graph .
2748	Display the qubits table .
2749	Build the history of the job history .
2750	Plot a histogram of jobs .
2751	Draw the pulse .
2752	Convenience method to create a cuid .
2753	Build a QuantumCircuit circuit .
2754	Perform a transpose of circuits .
2755	Runs the given circuit config .
2756	Execute an experiment .
2757	Get the drive channel .
2758	Return the control channel .
2759	Return the measurement channel .
2760	Acquire the given queue .
2761	Convenience function to compute the state of the input .
2762	Build an assembly .
2763	Unset the QKitikitikit .
2764	Plot the state of a state .
2765	Process the frequency of two channels .
2766	Sets the input data .
2767	Pop the lexer .
2768	Push a file to the lexer .
2769	Run the given dag .
2770	Get the bounding method for the given instruction .
2771	Convenience method to convert a sequence of parameters into a dictionary .
2772	Convert a frame to a frame .
2773	Convert a value to a persistent value .
2774	Convert an instruction to a drive .
2775	Convert a snapshot to a snapshot .
2776	Updates the annotated annotation .
2777	Generate a sampling function .
2778	Filter all backend instances .
2779	Resolve a backend name .
2780	Convert a dag into a QuantumCircuit .
2781	Make a dictionary of observable observations .
2782	Updates the symbol with the given name .
2783	Verify that the given gate is declared .
2784	Verify that the expression is valid .
2785	Verify a gate .
2786	Verify that a register is valid .
2787	Verify that the object is valid .
2788	Find the column of the column .
2789	Parse debug value .
2790	Parse the given data .
2791	Run the parser .
2792	Parse the input file .
2793	Creates a crz . crz .
2794	Calculate the basis of a string .
2795	Return the density of a matrix .
2796	Calculate the purity of a state .
2797	Run the given dag .
2798	Render a backend .
2799	Update the backend info .
2800	Generate jobs for jobs .
2801	Runs the graph on the graph .
2802	Get a backend by name .
2803	Return the shape of the multipartition .
2804	Generator that yields a list of registers .
2805	Truncate a float .
2806	r Generate latex data .
2807	Get the width of the image .
2808	Get the page page page .
2809	Load schema from file .
2810	Returns a validator for the given schema .
2811	Loads the schema for the given schema .
2812	Validate a JSON dict .
2813	Format a list of exceptions .
2814	Perform the majority of the majority of two nodes .
2815	Unmutation of a function .
2816	Generate a latex source file .
2817	Draw a matplotlib plot .
2818	Generate a random unit .
2819	Generate a random density matrix .
2820	Generate a GRI matrix .
2821	Compute the density of a random distribution .
2822	Returns the density of the density of the distribution .
2823	Returns a list of all children of this node .
2824	Perform a power operation on the matrix .
2825	Compute the sub - components of a sub - graph .
2826	Convert an Instruction instruction to a subclass .
2827	Run the given dag .
2828	Convert circuits to a QK object .
2829	Runs the given dag .
2830	Run the given dag .
2831	Define the gate .
2832	Validate the given value .
2833	Check that the value is valid .
2834	Sets the value of this QTTT .
2835	Sets the rol ttl .
2836	Reshape the input dimension .
2837	Return a tuple of input dimensions .
2838	Return a tuple of output dimensions .
2839	Return a copy of this DataFrame .
2840	Return the power of the power .
2841	Return a tuple of dimensions .
2842	Compute the eigenvalues of a matrix .
2843	Deserialize a value .
2844	Serialize a value into an object .
2845	Check that the given value is valid .
2846	Compute the difference between two states .
2847	Compute the derivative of a function .
2848	Return the inverse of this snapshot .
2849	Set label .
2850	Determine whether this node is a unit .
2851	Convert the operator to an operator .
2852	Convert a QuantumChannel into an Instruction .
2853	Initialize the operator .
2854	Sort a model by name .
2855	Patch a string to a string .
2856	Return a list of locale maps .
2857	Return a list of all available locale languages .
2858	Check if tokens are valid .
2859	Split a string into a string .
2860	Parse a date string .
2861	Parse a date string .
2862	Checks if the given string is valid .
2863	Translate a date string .
2864	Parse a date string .
2865	Generate an ARM generator .
2866	Convert an exception to an exception .
2867	Convert an HTTP request to an HTTP error .
2868	Read the configuration file .
2869	Compose the configuration for all streams .
2870	Get information about the stream .
2871	Compose the configuration and return the configuration .
2872	Log out stdout .
2873	Expand a string from a string .
2874	Reads the config file .
2875	Prepare the stepper .
2876	Generate the STPD file .
2877	Reads the options from the cache .
2878	Saves the current configuration to disk .
2879	Create a std file .
2880	Create a new step .
2881	Return the rps of the given duration .
2882	Execute a subprocess .
2883	Decodes a list of monitors .
2884	Create a list of points for a given label .
2885	Publish a key .
2886	Count the number of codes .
2887	Stop the pool .
2888	Iterate over all workers .
2889	Initialize logging .
2890	Add user options .
2891	Configure the configuration .
2892	Shutdown graceful shutdown .
2893	Collect data from the results .
2894	Called when a callback is received .
2895	Get a marker for a given marker type .
2896	Parse a duration string .
2897	Start the agent .
2898	Start the agent .
2899	Determine the UDP port port .
2900	Add the JVM components to the JVM .
2901	Terminate the process .
2902	Read data from a list of stats .
2903	Create a Criteria for the given criterion .
2904	Get the configuration from a file .
2905	Create the startup config file .
2906	Check if disk is available .
2907	Check if memory is available .
2908	Get terminal size .
2909	Get the right line of the widget .
2910	Truncate a list of lines .
2911	Render the left side panel .
2912	Render the screen .
2913	Add info to the widget .
2914	Calculate the rectangle of a rectangle .
2915	Returns the length of the given line .
2916	Create a load plan .
2917	Get the level of the level .
2918	Add info to the widget .
2919	Send a request to the server .
2920	Load plugins .
2921	Gets the plugin for the given type .
2922	Return a list of plugins matching the given type .
2923	Collects artifacts from a file .
2924	Add an artifact to the collection .
2925	Create a temporary file .
2926	Load configuration files .
2927	Flush the config file .
2928	Return a list of option options .
2929	Find all sections in the config .
2930	Decode statistics from a chunk .
2931	Get information about the phantom .
2932	Prepare the agent configuration .
2933	Poll data from agent .
2934	Send data to the monitor .
2935	Determine the configuration of the configuration .
2936	Handle data items .
2937	Parse the agent data from a block of data .
2938	Subscribe to channels .
2939	Run the event loop .
2940	Close the stream .
2941	Perform an HTTP request .
2942	Submit a new order .
2943	Gets the order for the given order .
2944	Get the position of a symbol .
2945	List assets .
2946	Get asset by symbol .
2947	Create a sub - plan .
2948	Check if a dict is a dictionary .
2949	Convert a dict to a dict .
2950	Construct an event handler .
2951	Construct a JSON log event handler .
2952	Create a Config object from a file .
2953	Get the repository configuration .
2954	Format a GraphQL query .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines .
2957	Get next event .
2958	Execute a pipeline .
2959	Wait for all processes .
2960	Creates a field for a given dag type .
2961	Build an execution plan .
2962	Builds a pipeline .
2963	Build a sub - pipeline .
2964	Returns the name of a pipeline .
2965	Construct a list of subcommands .
2966	Release a new version
2967	Creates a pipeline definition .
2968	Decorator to create an input schema .
2969	Creates a selector for the given config .
2970	Block text block .
2971	Downloads a file from S3 .
2972	Uploads a file object to S3 .
2973	A decorator that raises an exception .
2974	Create a new directory .
2975	Context manager for user context manager .
2976	Creates a logger for the given run config .
2977	Returns True if the step has been completed .
2978	Returns True if the step is skipped .
2979	Returns the result of the transform .
2980	Returns the result of the transform .
2981	Returns the failure data .
2982	Creates a PermissionDict with the given fields .
2983	Check if a dataset is valid .
2984	Checks if a table is valid .
2985	Execute core transform .
2986	Decorator to create a DAG type .
2987	Create a resource definition .
2988	Create an event .
2989	Convert an execution plan to a list of steps .
2990	Get the connection parameters .
2991	Create a new connection to the database .
2992	Creates a new cursor .
2993	Close the database .
2994	Creates a model from a dictionary .
2995	Convert the value to a Python object .
2996	Creates a new form field field .
2997	Convert a value into a Python object .
2998	Apply filter filters .
2999	Compute a numpy numpy numpy array .
3000	Compute nfps for nfps
3001	Compute the best partition for the given size .
3002	Calculate optimal optimal partitions .
3003	Calculate the correlation between two points .
3004	Initialize slots from seed .
3005	Return the number of bytes in bytes .
3006	Serializes the hash to a file .
3007	Deserialize a BLAML hash .
3008	Update the hash of the hash .
3009	Merge the minimum number of elements .
3010	Creates a union of a min_hash .
3011	Index a list of entries .
3012	Iterate over the items in the cache .
3013	Calculate the minimum number of samples .
3014	Remove a key from the cache .
3015	Update the bits of a bitmap .
3016	Calculate the number of occurrences of the model .
3017	Merge self and self .
3018	Clear all registers .
3019	Calculate the apk for the given prediction .
3020	Compute the mean of the given predictions .
3021	Index all the hash tables .
3022	Perform a permutation of a min_hash .
3023	Close the cache .
3024	Orders a list of dictionaries .
3025	Return a copy of the given config .
3026	Get user details .
3027	Get social login login .
3028	Select text from text .
3029	Parse a scoped scope .
3030	Parse a statement .
3031	Parse a value .
3032	Increment the next line .
3033	Parse a config .
3034	Add an exception to an exception .
3035	Convert a string to a string .
3036	Create a new session .
3037	Ensure that the given function is a wrapped function .
3038	Decorator for decorator .
3039	Format a value .
3040	Clear configuration variables .
3041	Bind a binding parameter to a function .
3042	Returns the parameter for the given binding key .
3043	Return True if the given function is a parameter .
3044	Get the cached argspec for the given function .
3045	Get the positional parameter names for a function .
3046	Get a list of positional arguments for a function .
3047	Get the default values for a function .
3048	Create a scope scope .
3049	Decorator to configure a decorator .
3050	Return a string representation of a configuration string .
3051	Parse a configuration string .
3052	Register a filereader .
3053	Parse a config file .
3054	Parse configuration files .
3055	Parse the given value .
3056	Finalize the configuration .
3057	Iterate over flattened values .
3058	Iterate over configuration values .
3059	Add a constant value to the configuration .
3060	Create a new enum from enum enum .
3061	Return a list of selector matching the given selector .
3062	Returns a list of all matched matches .
3063	Return the minimum value for the given selector .
3064	Return a string representation of a search query .
3065	Parse the retry timeout .
3066	Validate the property value .
3067	Return a description of the property .
3068	Set the value .
3069	Get the item by id
3070	Initialize the object .
3071	Set default headers .
3072	Prepare the request .
3073	Get a single thing .
3074	Handle a message .
3075	Create a new thing .
3076	Delete a thing .
3077	Start the server .
3078	Return the description of the action .
3079	Start the action .
3080	Finish the task .
3081	Return the event description .
3082	Get IP address .
3083	Returns a list of IPv4 addresses .
3084	Set the value of the given value .
3085	Notify external update .
3086	Return a description of this Thing .
3087	Sets the href of this resource .
3088	Return a list of property descriptions .
3089	Returns a list of all action descriptions .
3090	Return a list of event descriptions .
3091	Add a property .
3092	Remove a property .
3093	Get the value of a property .
3094	Get the properties of this object .
3095	Set the value of a property .
3096	Get an action by id .
3097	Add a new event .
3098	Add a new event .
3099	Perform an action .
3100	Remove an action from the queue .
3101	Add a list of available actions .
3102	Remove an event from the list .
3103	Add an event to the event .
3104	Remove an event from the event .
3105	Notify a property .
3106	Send a message to the server .
3107	Notify an event .
3108	Add annotations to the model .
3109	Update the database .
3110	Create a bulk insert .
3111	Inserts the model into the database .
3112	Creates a new model .
3113	Builds a Postgresql query .
3114	Checks if the given model is valid .
3115	Get the update fields for the model .
3116	Handle a model .
3117	Delete model from sender .
3118	Checks if the given field is a valid case .
3119	Resolve the expression .
3120	Return a string representation of the table .
3121	Return a copy of this model .
3122	Add additional conditions to the database .
3123	Check if the given field is a valid field .
3124	Insert values into the database .
3125	Creates a new record for the given field .
3126	Renames a new table .
3127	Drops the required field .
3128	Return the name of the required field .
3129	Create a SQLite index .
3130	Create a new command .
3131	Get the base backend base class .
3132	Prepare the database .
3133	Get the value of the field .
3134	Formats the query result .
3135	Return a list of SQL statements .
3136	Rewrite the database .
3137	Rewrite a SQL query .
3138	Rewrite a SQL statement .
3139	Build a list of conflict targets .
3140	Get the model field by name .
3141	Formats a field name .
3142	Formats the given field name .
3143	Create a unique unique unique unique unique values .
3144	Rename a table .
3145	Drop a unique unique field .
3146	Generate a unique unique unique constraint name .
3147	Iterate over unique keys .
3148	Add a new condition .
3149	Return the SQLAlchemy SQL statement .
3150	Calculate the top level level of a distribution .
3151	Compute the variance between two samples .
3152	Compute the difference between two samples .
3153	Return True if the given sample is significant .
3154	Return a sorted sorted list of nodes .
3155	Return a generator that yields the number of qubits .
3156	Play the board .
3157	Select the position of a board .
3158	Play a player .
3159	Filter a list of benchmarks .
3160	Expand a benchmark name .
3161	Generate a list of strings .
3162	Initialize benchmarks .
3163	Returns the domain of the domain .
3164	Fetch messages from a channel .
3165	Parse a list of posts .
3166	Fetch a user .
3167	Fetch a specific category .
3168	Fetch items from the feed .
3169	Setup command parser .
3170	Fetch a specific category
3171	Get a list of bugs .
3172	Get comments for a bug .
3173	Get the history of a bug .
3174	Get a list of attached bugs .
3175	Get a list of notes for an issue .
3176	Fetch merged merge requests .
3177	Get a list of merge notes .
3178	Get a list of merged versions for a merge .
3179	Retrieves a list of merged merges .
3180	Merge a merge .
3181	Get a list of versions of a merge .
3182	Get the merged version of a merge .
3183	Get a list of notes .
3184	Fetches a list of entities .
3185	Fetches a list of notes .
3186	Calculate the amount of time .
3187	Fetch items from the repository .
3188	Initialize rate limit
3189	Setup command line arguments .
3190	Fetch items from the given category .
3191	Get the metadata for a user .
3192	Get the members of a conversation .
3193	Get information about a channel .
3194	Fetches information about a user .
3195	Setup command line arguments .
3196	Get the timestamp of the datetime
3197	Parse a list of bugs .
3198	Parse bugs .
3199	Parse a bug report .
3200	Log out a bug .
3201	Gets the metadata of the metadata .
3202	Get a list of bugs .
3203	Get a list of bugs .
3204	Get a bug activity .
3205	Fetch a specific category .
3206	Fetch events from a category .
3207	Fetch events from a group .
3208	Return a generator of comments .
3209	Get a list of VRPs .
3210	Fetch questions from a question .
3211	Fetch comments from a question .
3212	Build a Question object from an HTML page .
3213	Get a list of questions .
3214	Get HTML for a question .
3215	Get comments for a given post .
3216	Parse a question .
3217	Parse a list of answers .
3218	Parse the page number of pages .
3219	Parse user info .
3220	Fetch items from a category .
3221	Parse a list of reviews .
3222	Retrieves the latest reviews for the given date .
3223	Get the version of the server .
3224	Gets the reviews for the given item .
3225	Retrieves the next group item .
3226	Execute a command .
3227	Execute a command .
3228	Execute a remote command .
3229	Setup command line arguments .
3230	Fetch the issue data .
3231	Fetch issue attachments .
3232	Fetch a list of issues .
3233	Fetch activities .
3234	Fetch user data
3235	Get information about a user .
3236	Get an issue .
3237	Get a list of issues .
3238	Get the URL for this project .
3239	Fetch items from a page .
3240	Get a list of subscriptions .
3241	Find the group id
3242	Fetch data from url
3243	Setup command line arguments .
3244	Generate uuid for uuid
3245	Fetch data from a backend .
3246	Fetch an archive from an archive .
3247	Return a list of all modules in the given package .
3248	Fetch data for a given category .
3249	Fetch metadata from archive .
3250	Filter the classification data .
3251	Parse arguments .
3252	Set the authentication arguments .
3253	Set the archive arguments .
3254	Set the output arguments .
3255	Execute the given backend .
3256	Initialize the archive .
3257	Get the metadata for the given item .
3258	Parse a MBox box .
3259	Fetch messages from a mailbox .
3260	Copy a mbox box to a container .
3261	Validate a message .
3262	Convert a message to a dictionary .
3263	Get a message from a mailbox .
3264	Fetch a list of items .
3265	Fetch all items from the repository .
3266	Parse git log file .
3267	Initialize the git repository .
3268	Setup command line arguments .
3269	Parse the stream .
3270	Clone a git repository .
3271	Count the number of objects in the repository .
3272	Determine if the repository is detached .
3273	Update git repository .
3274	Sync git repository .
3275	Get a list of git repositories .
3276	Get a git repository .
3277	Show a git repository .
3278	Fetch and return a list of packages .
3279	Read commits from a packet .
3280	Recursively update references in the repository .
3281	Return a list of refs for this repository .
3282	Update a git repository .
3283	Execute a command .
3284	Read stdout from stdout .
3285	Execute a git command .
3286	Fetch a list of tweets .
3287	Fetch items from a category .
3288	Get a list of tweets .
3289	Create a command parser .
3290	Fetch items by category .
3291	Fetch items from a category .
3292	Parse hits and return the results .
3293	Fetch a list of hits .
3294	Get the metadata for a given item .
3295	Get the metadata for a particular item .
3296	Fetch a list of pull requests .
3297	Fetch repo info .
3298	Get a list of issues for a given issue .
3299	Get a list of comment comments .
3300	Gets the issue assignments for the given user .
3301	Gets the list of reviews for a given pull number .
3302	Get the list of commits for a given commit number .
3303	Get a list of comments for a comment .
3304	Get a user by login .
3305	Fetch a list of issues .
3306	Get a list of issues .
3307	Get a list of pull issues .
3308	Get the repository for this repository .
3309	Retrieve a list of reviews for a given number .
3310	Get a list of commits .
3311	Gets the reviews for a comment .
3312	Get information about a user .
3313	Get a list of orgs
3314	Get the rate limit .
3315	Gets the rate limit limit for each token .
3316	Choose the API token .
3317	Check if token is valid .
3318	Update rate limit .
3319	Initialize metadata .
3320	Store an archive to the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Generate a hash for a given URI .
3324	Verify the archive .
3325	Load metadata from the archive .
3326	Count the number of rows in the archive .
3327	Create an archive .
3328	Remove an archive .
3329	Search for archives .
3330	Search for archive files .
3331	Iterate over all files .
3332	Check if a file is compressed .
3333	Generate a range of months between two dates .
3334	Parse a message into a dictionary .
3335	Remove invalid characters from raw XML .
3336	Convert a raw XML string into a dict .
3337	Parse all issues in JSON format .
3338	Get a list of issues .
3339	Issue an issue .
3340	Get a user .
3341	Execute a Redis client .
3342	Fetch data for a given category .
3343	Fetch data from repository .
3344	Get a GitHub repository .
3345	Map custom fields to custom fields .
3346	Filter custom fields .
3347	Parse a page of issues .
3348	Get all items in a given url .
3349	Get a list of issues .
3350	Get comments for a given issue .
3351	Retrieves the fields of the field .
3352	Fetch items by category .
3353	Get a list of jobs
3354	Get a list of Builds for a given job .
3355	Parse a page of questions .
3356	Get a list of questions .
3357	Setup command line arguments .
3358	Fetch all reviews .
3359	Get the maximum date of the given reviews .
3360	Fetch pages from the page .
3361	Get all pages of a page .
3362	Get a list of recent pages .
3363	Fetch a single message .
3364	Parse a JSON string .
3365	Returns True if the given chat matches the given chats .
3366	Get a list of updates .
3367	Fetch all articles in a category .
3368	Return metadata for item
3369	Parse an article .
3370	Fetch data from the server .
3371	Fetch a single article .
3372	Fetch data from remote server .
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Setup the rate limit limit .
3376	Wait for rate limit .
3377	Update rate limit .
3378	Parse a text file .
3379	Return a list of archives for the given date .
3380	Return a list of all the files in the directory .
3381	Parse the stream .
3382	Parse a JDOT timestamp .
3383	Parse a command line .
3384	Fetch topics from a category .
3385	Parse a list of topics .
3386	Get a topic .
3387	Post a POST request .
3388	Fetch tasks from a category .
3389	Parse a JSON string into a list of tasks .
3390	Parse a JSON string .
3391	Get all tasks from the server .
3392	Get all transactions .
3393	Get a list of users .
3394	Get a list of phidids
3395	Perform a HTTP request .
3396	Return the metadata for a given item .
3397	Parse the contents of a JSON file .
3398	Get the contents of a resource .
3399	Get historical content .
3400	Parse the measurement .
3401	Get the capabilities of a service .
3402	Reads a resource from the server .
3403	Read a string from a string .
3404	Parses the measurement time series .
3405	Build the URL for the base URL .
3406	Find the elements of a complex type .
3407	Construct a schema schema .
3408	Get the description of a feature .
3409	Processes a complex input input .
3410	Get a list of movies .
3411	Get a list of tv_list
3412	Get movies .
3413	Get information about a specific ID .
3414	Retrieve the alternative titles .
3415	Retrieve a list of credits .
3416	Get a list of external IDs .
3417	Get a list of keywords .
3418	Gets a list of recommendations .
3419	Get release dates .
3420	Get all releases .
3421	Get a list of translations .
3422	Get a list of movies .
3423	Get a list of reviews .
3424	Get a list of changes .
3425	Get upcoming upcoming upcoming requests .
3426	Get the current playing play .
3427	Returns a list of all popular popular users .
3428	Get the top level of the top level .
3429	Get the account states .
3430	Update rating .
3431	Get a list of movies .
3432	Retrieves a list of tickets for a particular user .
3433	Get information about the credit ID .
3434	Retrieve a TVTV .
3435	Get information about the server .
3436	List movies .
3437	Get information about this session .
3438	List movies .
3439	Create a new token .
3440	Validate a token .
3441	Create a new session .
3442	Create a new guest session .
3443	Gets the rated movies .
3444	Get the status of the item
3445	Create a list of lists .
3446	Removes an item from the session .
3447	Clears the list .
3448	Gets the content of the content .
3449	Gets the similarity of the model .
3450	This method is called when the interaction is loaded .
3451	Get information about a series .
3452	Get the credits for the given season .
3453	Retrieve a list of external Ids .
3454	Get information about a series .
3455	Get the credits for a series .
3456	Get a list of external IDs .
3457	Set the values of the response .
3458	Get a movie .
3459	Get a collection of collections .
3460	Get information about a TV .
3461	Get person information .
3462	Get company company .
3463	Get keyword keywords .
3464	Perform a multi - level operation .
3465	Normalize a string .
3466	Calculate the number of refs for the given refs .
3467	Convert a reference to a sequence of references .
3468	Calculate the error of a given x .
3469	Return a list of text blocks between two sources .
3470	r Returns a list of descriptor descriptors .
3471	Register a JSON descriptor .
3472	r Register a descriptor .
3473	Prints a progress bar .
3474	r Check if descriptor is a descriptor .
3475	Return a JSON representation of this object .
3476	Return the coordinate of this component .
3477	r Calculate the atomic angle of the sphere .
3478	r Calculate surface area area .
3479	r Creates a molecule from a molecule .
3480	Create a descriptor from a JSON object .
3481	r Fill the missing values .
3482	r Drop all missing values .
3483	r Return a list of items .
3484	r Return a dictionary of the keys as a dictionary .
3485	r Return the name of this object .
3486	Decorator for logging .
3487	Decorator to register a function .
3488	Print progress message .
3489	Display a message .
3490	Fail if an exception is raised .
3491	Get a temporary file for the given target .
3492	Set the target file .
3493	Remove temporary files .
3494	Get the full path of the path .
3495	Returns a list of legal parameters for the given method .
3496	Merge keyword arguments .
3497	Add options to CLI options .
3498	Terminate the queue .
3499	Add a task .
3500	Join all workers .
3501	Process all tasks .
3502	Get S3 keys from S3 environment .
3503	Read S3 keys from S3 .
3504	Get S3 keys from S3 configuration file .
3505	Initialize S3 keys from S3 .
3506	Connect to S3 .
3507	List all buckets .
3508	Walk a directory and return a list of paths .
3509	Return a list of local files .
3510	Expand a list of source files .
3511	Upload a file to a local directory .
3512	Put files into a directory .
3513	Create a bucket .
3514	Updates the specified target .
3515	Print a list of files .
3516	Download a single file from the given source .
3517	Retrieves a list of files .
3518	Copies a single file to a directory .
3519	Copy files from source to source .
3520	Delete all files from a source .
3521	Return a list of relative paths .
3522	Sync local directory to destination directory .
3523	Return the hash of the file .
3524	Get the MD5 hash of the file .
3525	Create a directory .
3526	Checks if a remote key is valid .
3527	Return True if path matches the given path .
3528	Iterate through a S3 bucket .
3529	Add conditions to the object .
3530	Get the path of a file .
3531	Look up a S3 bucket .
3532	Read a file from a file .
3533	Upload a file to a file .
3534	Verify that the file is downloaded .
3535	Write a file to a file .
3536	Copy a file to another object .
3537	Run a command .
3538	Validate command arguments .
3539	Pretty print an object .
3540	Prints a list of buckets .
3541	Create a new M3 bucket .
3542	Put a file to the server .
3543	Retrieves a list of files .
3544	List files in S3
3545	Synchronously sync files .
3546	Handle cp3 files .
3547	Copy files from S3 .
3548	Delete files from S3 .
3549	Message handler for S3 .
3550	Print the total size of the S3 file .
3551	Match a date string .
3552	Match a time string .
3553	Match the given value .
3554	Check the value of a dict .
3555	Discover the connected routers .
3556	Listen for messages .
3557	Get data from a hub .
3558	Push data to the server .
3559	Get the encryption key .
3560	Report exception handler .
3561	Include the webbar .
3562	Ensures the logging handler for logging .
3563	Get the request .
3564	Initialize a Rollbar .
3565	Decorator for lambda function .
3566	Report a message .
3567	Search for a title .
3568	Create an agent log file .
3569	Build the user data for the user .
3570	Add lambda data to lambda context .
3571	Add request data .
3572	Check if frame is set .
3573	Builds the request data .
3574	Build server data .
3575	Build a JSON payload .
3576	Main entry point .
3577	Convert a string to a string .
3578	Convert a Hangulul letter to a string .
3579	Checks if the given letter is a string .
3580	Add a word to the given word .
3581	Checks if the given node is inside an exception .
3582	Return True if node is a lambda function .
3583	Get all elements of a node .
3584	Checks if the given astroid is an exception .
3585	Checks if a node is a superclass .
3586	Check if node is an error .
3587	Determine if the argument is a default value .
3588	Checks if a function is a function that is a function .
3589	Check if the given node is an ancestor of the given node .
3590	Assign the parent node to the parent node .
3591	Decorator to store messages .
3592	Collect fields from a string .
3593	Get the name of a call .
3594	Check if an exception is inherited .
3595	Check if the given type is an error .
3596	Determine if a function is a property of a function .
3597	Determine whether a function is a decorator .
3598	Finds an exception handler for the given node .
3599	Checks if the given block is an exception .
3600	Returns a list of exception handlers .
3601	Check if an exception is ignored .
3602	Checks if the given node is abstract .
3603	Implementation of inferring .
3604	Return the type of a node .
3605	Determine if a function is a partial function .
3606	Determines if the given node is enabled .
3607	Return a list of qualified names .
3608	Get the name of a module .
3609	Reverse a list of nodes .
3610	Writes a graph to a graph .
3611	visit an import node
3612	visit an import node
3613	Check the position of the import .
3614	Record an import node .
3615	Check the imports of the import tree .
3616	Check if a module is relative to the import node .
3617	Add an imported module .
3618	Check if the module is deprecated .
3619	Check if the given module is preferred .
3620	Report external dependencies .
3621	Filter the dependency graph .
3622	Get default default options .
3623	Insert default options .
3624	Returns True if the node is visible
3625	Get callbacks for the given node .
3626	visit a node
3627	Check if the message is consistent .
3628	visit a node
3629	Check whether a datetime is a datetime .
3630	Check for open mode .
3631	Handle messages .
3632	Display messages .
3633	Get the title of a node .
3634	Set default options .
3635	Returns True if the given node is visible .
3636	Add a class to the class .
3637	Get the ancestors of a node .
3638	Iterate over all children of the given class .
3639	Extract classes from a class node .
3640	Called when the node is closed .
3641	visit an import node
3642	Extracts a class from the project .
3643	Get a list of diagram diagrams .
3644	Check if the owner is ignored .
3645	Return a list of names that match the given attribute .
3646	Ensure that the member is a member .
3647	Check if the given statement is a parent .
3648	Check if a variable is a variable .
3649	Checks if a variable is a valid variable .
3650	visit an attribute .
3651	Visitor for assignment .
3652	Check if the callable is a callable .
3653	visit a node .
3654	Iterate over all interfaces .
3655	Create a project from files .
3656	visit a package node
3657	visit a function
3658	visit a node
3659	Handle assignment attributes .
3660	visit an import node
3661	visit an import node
3662	Compute the module for the given module .
3663	Imports a module .
3664	Get ANSI code code .
3665	Colorize an ASCII string .
3666	Register a new parser .
3667	Handle a message .
3668	Display the layout .
3669	Handle a message .
3670	Open the graph .
3671	Write a node .
3672	Write an edge to the stream .
3673	Check if a function is valid .
3674	Process a raw string .
3675	Visit the layout .
3676	Visit the evaluation section .
3677	visit a table
3678	Write a table to a table .
3679	Add a new message to a new name .
3680	Registers the given checker .
3681	Register a message .
3682	Check if a symbol is valid .
3683	Raise an exception if the symbol is a duplicate .
3684	Raise an exception if there is a duplicate message .
3685	Return list of message definitions .
3686	Returns a string representation of a message .
3687	Print help messages .
3688	List all messages .
3689	Initialize the plugins .
3690	Return the number of CPU cores .
3691	Report a summary of messages .
3692	Fix import paths .
3693	Load a list of modules .
3694	Load plugin configuration .
3695	Set the value of the option .
3696	Register a checker .
3697	Disable the report .
3698	Determine if the user is enabled .
3699	Returns a list of all checks .
3700	Returns a list of all the checks for the master .
3701	Prepare a list of checkers .
3702	Expand a list of modules .
3703	Set the current module .
3704	Check if the AST node is valid .
3705	Report the evaluation report .
3706	Help for help messages .
3707	Print the full documentation .
3708	List messages .
3709	List all checks .
3710	Normalize text .
3711	Get the module id for the given node .
3712	Decode a line into a string .
3713	Check if the given file name matches the given blacklist .
3714	Register a module .
3715	Return a comment string .
3716	Formats an option value .
3717	Format a section .
3718	Format options .
3719	Insert a child .
3720	Append a child node to this node .
3721	Return the parents of this node .
3722	Format the layout .
3723	Get the content of a table .
3724	Compute the content of the layout .
3725	Collect the block lines from the module .
3726	Handle ignored messages .
3727	Register a report .
3728	Generate report reports .
3729	Add stats to stats .
3730	Returns the name of the given node .
3731	Get the setter for the given node .
3732	Checks if the given value is a function .
3733	Return a list of exception types .
3734	Processes a module .
3735	Process a module .
3736	Process a comment .
3737	Checks if the given name is an import statement .
3738	Checks if a statement is a statement .
3739	Return the method overridden by name .
3740	Extract extra extra information from a module .
3741	Detects the global scope for the given frame .
3742	Checks if the given name is assigned to the given name .
3743	Mark a node as a new node .
3744	visit a global node
3745	Checks if the class is ignored .
3746	Checks if the given node is an upper scope .
3747	Check if the given node is unpacked .
3748	Check if the given node is valid .
3749	Return a list of packages .
3750	Install packages .
3751	Run the installation .
3752	Report the similarities between two statistics .
3753	Runs a single similarity function .
3754	Add a new line to the stream .
3755	Compute a list of SIMs .
3756	Prints a list of sims .
3757	Given a list of lines find the common common common lines .
3758	Iterate over all subsets .
3759	Iterate over a list of lines .
3760	Creates a list of lines for each line .
3761	Compare a call to a callable .
3762	Checks if an attribute is an attribute .
3763	Determine if a value is a default value .
3764	Determine whether or not the same parameters are different .
3765	Try to infer a callable .
3766	Set access to a node .
3767	visit a class
3768	Check that the MRO is consistent .
3769	Checks if the given base class is valid .
3770	Check if a function is a function .
3771	Checks if the function is a superclass .
3772	Mark a function as a function .
3773	Checks if the given node is a slot .
3774	visit a name node
3775	Check that the members of the given node has been accessed .
3776	Check if the class is a subclass of classes .
3777	Check if a method is valid .
3778	Determine whether the method is a mandatory method .
3779	Checks if the given body is raised .
3780	Checks that the given exception is a valid exception .
3781	visit a function node
3782	Display the report .
3783	Checks if the given type is a namedtuple .
3784	Check if an enum is an enum .
3785	Checks if the given class is a dataclass class .
3786	Opens the stats .
3787	visit a class node
3788	Called when the class is declared .
3789	Visit a node .
3790	Check if a boolean expression is a boolean .
3791	Check if the docstring is a docstring .
3792	Formats a template .
3793	Checks if the given token is a trailing comma separated list .
3794	Check if the given node is an astroid .
3795	Checks if the given node is a simplified expression .
3796	Check if the given node is an iterable .
3797	Check if an exception is an exception .
3798	Raise an exception if it is not an iterable .
3799	Check if the given node is nested .
3800	Determine the type of a node .
3801	Check if the given node is a merge .
3802	Checks if a comparison node is a common comparison .
3803	Checks if a node is an operator .
3804	Check if a node is consistent .
3805	Returns True if the given node is a callable .
3806	visit a node .
3807	Check if the graph is available .
3808	Runs a directory .
3809	Write packages to the graph .
3810	Write classes to the graph .
3811	Sets the printer .
3812	Set the printer for the given file .
3813	Return True if the current version is not available .
3814	Format the help message .
3815	Get environment variables .
3816	Runs the given filename .
3817	Execute a python command .
3818	Get cycles of vertices .
3819	Get the source source .
3820	Generate the graph for the graph .
3821	Format a section .
3822	Registers a MessageHandler .
3823	Disable a message .
3824	Enable a message .
3825	Return the symbol symbol for a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Prints the documentation for the given options .
3829	Print the documentation for the given checker .
3830	Returns the length of the line length .
3831	Return the indentation of a line .
3832	Return the indent of the token .
3833	Handle line start .
3834	Get the valid indentation of the tokens .
3835	Indent brackets .
3836	Return a continuation of the next block .
3837	Push a token to the stack .
3838	Add a new line .
3839	Check if a token is a list of tokens .
3840	Check if token is valid .
3841	Check if the given tokens are valid .
3842	Checks if the given token is a valid space .
3843	visit a statement .
3844	Check if the statement is a single statement .
3845	Check if line is valid .
3846	Check for indentation level .
3847	Checks if a node is an iterable .
3848	Checks if the given node is an import statement .
3849	visit a name node
3850	visit a node
3851	visit an attribute
3852	visit an exception handler .
3853	Check if an exception is raised .
3854	Finds the pylintrc file .
3855	Validate the given value .
3856	Expand the default value for the option .
3857	Match the long option .
3858	Registers the given options .
3859	Set provider option option .
3860	Set the value of a global option .
3861	Generate a configuration file .
3862	Load the config file .
3863	Loads a command line configuration .
3864	Add a help section .
3865	Print help message .
3866	Load default defaults .
3867	Return the name of an option .
3868	Get the option definition .
3869	Iterate over all options .
3870	Check if the given function is a callable .
3871	Check if a string is a complex format string .
3872	visit a module
3873	visit a import node
3874	visit an import node
3875	visit a call node
3876	Check if a format string is valid .
3877	Checks if the node is a loop .
3878	Gets the break loop for a break node .
3879	Checks if the given loop is valid .
3880	Get the properties of the given config .
3881	Determine the name of a function .
3882	Report stats for a given type .
3883	Determine if the given node is redefined .
3884	Check if a call is a callable .
3885	visit a star
3886	Check if the given node is non - global .
3887	visit a node
3888	Checks if the given node is a loop .
3889	Check if the given node is a loop .
3890	Opens the stats .
3891	visit a node
3892	visit a call node
3893	visit an assertion
3894	visit a dict node
3895	Check if node is reachable .
3896	Checks if the given node is closed .
3897	Checks if the given node is reversed .
3898	visit an assignment node
3899	Check the name of a given node .
3900	Check if the docstring is valid .
3901	Check if a literal is a literal .
3902	Add a new node to the graph .
3903	Parse a subgraph .
3904	visit a module .
3905	Add a checker .
3906	Walk the AST node .
3907	Add a relationship to this object .
3908	Get the relationship for a given object .
3909	Returns a list of attribute names for the given node .
3910	Returns a list of all methods of the given node .
3911	Add an entity to the graph .
3912	Returns a list of all the names of the class .
3913	Return a list of all classes of this node .
3914	Get a class by name .
3915	Return a list of all modules .
3916	Get a module by name .
3917	Get a module by name .
3918	Add a module to the module .
3919	Delete the grant .
3920	Query the model .
3921	Get user by username .
3922	Retrieves an object by ID .
3923	Set a new token .
3924	Set a grant .
3925	Get a single client .
3926	Prepare a request .
3927	Initialize the app .
3928	Get a remote application .
3929	Perform a request .
3930	Perform an authorization request .
3931	Handle OAuth2 authentication .
3932	Handle OAuth2 OAuth2 .
3933	Handles authentication response .
3934	Decorator to handle authorization response .
3935	Hash a token .
3936	Create a new client .
3937	Create a client session .
3938	A decorator for insecure authentication .
3939	Confirm the authorization request .
3940	Decorator for requests .
3941	Get client secret secret
3942	Gets the secret token for the given client .
3943	Get the access token for the given client .
3944	Get the default realms for a client .
3945	Gets the realms for the given token .
3946	Returns the redirect URL for the given token .
3947	Get the RSA key from the client .
3948	Validate client key .
3949	Validate a request token .
3950	Validate access token .
3951	Validate that the given request is valid .
3952	Validate the request URI .
3953	Validate that the given token is valid .
3954	Verify that the given token is valid .
3955	Verify a request token .
3956	Verify that the realm is valid .
3957	Save access token .
3958	Save a request token .
3959	Save a verifier to the server .
3960	Return the error URI .
3961	Confirm a request .
3962	Verify a request .
3963	Get client credentials from client .
3964	Checks if the client is required .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scope scope for the given refresh token .
3968	Confirm a refresh token .
3969	Return default redirect uri .
3970	Get default scopes for a given client .
3971	Destroy an authorization token .
3972	Save the authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate a grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate a set of scopes .
3981	Validate username and password .
3982	Revoke a token .
3983	Update the request data .
3984	Convert a dictionary into a dictionary .
3985	Change the HTTP header .
3986	Register a remote application .
3987	Create a remote application .
3988	Extract parameters from a request .
3989	Convert text to bytes .
3990	Decode base64 encoded text .
3991	Create a Response object .
3992	Get cached clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check if an exception is valid .
3996	Check if the key is valid .
3997	Load the private key from the server .
3998	Check if a private key is valid .
3999	Check if a private key is valid .
4000	Check that the revocation is revoked .
4001	Check revocation revocation revocation .
4002	Create a certificate .
4003	Create a certificate .
4004	Decorator to make a function callable .
4005	Loads a certificate file .
4006	Set the password for the user .
4007	Use this method to use the SSL chain .
4008	Use this method to load a certificate file .
4009	Use this method to use the SSL certificate .
4010	Add a certificate to the certificate .
4011	Use this method to pass a private key to a private key .
4012	Use this method to pass a private key to a private key .
4013	Load the client from the client .
4014	Set the depth of the SSL certificate .
4015	Load a temporary file .
4016	Set the cipher list .
4017	Sets the client list of client certificates .
4018	Add a client to the client .
4019	Sets the connection callback for the SSL server .
4020	Sets the TLTP session .
4021	Sets the connection callback for the given callback .
4022	Sets the protobuf of the protocol .
4023	Sets the ALPNC callback .
4024	Set the OCSP service callback .
4025	Set the OCSP server callback .
4026	Sets the client callback .
4027	Sets the SSL context .
4028	Get the name of the server
4029	Set the TLS host name .
4030	Receive a message from the socket .
4031	Read bytes from the buffer .
4032	Read bytes from the socket .
4033	Activate the SSL connection .
4034	Shut down SSL .
4035	Get the list of cipherhers .
4036	Get a list of client names .
4037	Set the SSL state .
4038	Generate a random server .
4039	Generate a random client .
4040	Get the master key .
4041	Export an SSL message .
4042	Get a session object .
4043	Get the name of the cipher .
4044	Get the current cipher .
4045	Get the current cipher version .
4046	Get the protocol version .
4047	Get the next negotiated protocol message .
4048	Sets the protobuf of the SSL protocol .
4049	Get the negotiated ALPN protocol for the given cipher .
4050	Create a new memory buffer .
4051	Convert binary data into a string .
4052	Set the time of a time zone .
4053	Convert a timestamp to a string .
4054	Get a curve by name .
4055	Dump public key to a public key .
4056	Load a public key .
4057	Sign a data message .
4058	Verify a signature .
4059	Dump a certificate .
4060	Convert the private key to a public key .
4061	Generate an RSA key .
4062	Check if the key is valid .
4063	Load elliptic curves .
4064	Get the elliptic curves .
4065	Convert the curve to EC2 .
4066	Return the string representation of the certificate .
4067	Return a list of the components of the certificate .
4068	Return the full name of the certificate .
4069	Get the data as a string .
4070	Convert this certificate to a certificate .
4071	Sets the public key .
4072	Get a public key .
4073	Returns the name of the subject .
4074	Add extensions to the stack .
4075	Return a list of extension extensions .
4076	Verify that the certificate is valid .
4077	Return the cryptography certificate .
4078	Set the version of the certificate .
4079	Get a public key .
4080	Set the public key .
4081	Sign a public key .
4082	Get the signature of the certificate .
4083	Return the digest of a public key .
4084	Set the serial number .
4085	Get the serial number .
4086	Gets the number of days after the given amount .
4087	Gets the date of the given amount .
4088	Returns True if the timer is expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the name of the certificate .
4092	Set the subject name .
4093	Add extensions to the certificate .
4094	Get an extension object .
4095	Add a certificate .
4096	Add a certificate to the store .
4097	Set the time of a time .
4098	Initialize the certificate .
4099	Create an exception from the context .
4100	Verify the certificate .
4101	Set the serial number .
4102	Get the serialized serial number .
4103	Set the reason .
4104	Retrieves the reason for this certificate .
4105	Set the revocation date .
4106	Convert this certificate to a certificate .
4107	Return a list of revocation revocation values .
4108	Get the issuer name .
4109	Sign a certificate .
4110	Export a certificate .
4111	Get the name of this object .
4112	Set the CA certificates .
4113	Exports the certificate .
4114	Sign a private key .
4115	Verify that a key is valid .
4116	Encode this SPEKI .
4117	Get a public key .
4118	Sets the public key .
4119	Create an exception from an error queue .
4120	Convert text to bytes .
4121	Return a list of tokens .
4122	Get metadata for service .
4123	Return a list of issues .
4124	Builds the annotations for the given card .
4125	Get all boards .
4126	Returns a list of lists of lists of lists .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Return the URL for the given path .
4130	Get a list of urls for the given URL .
4131	Convert a field to a dictionary .
4132	Get a list of issues .
4133	Return a list of pull requests .
4134	Aggregate issues .
4135	Returns the default value for the given key .
4136	Return a list of template templates .
4137	Validate a service configuration .
4138	Returns True if the given issue is included .
4139	Create a table from a grid
4140	Evaluate the given command .
4141	Get the integer value for the given section .
4142	Pull issues from a git repository .
4143	Get data from url
4144	Get a list of values from a URL .
4145	Find the local task id for the given issue .
4146	Merge two fields into a single field .
4147	Build a dictionary of tuples from the given targets .
4148	Parse a string into a dictionary .
4149	Get the credentials for this client .
4150	Reverse a list of ngrams .
4151	Calculate the posterior values of a gene set .
4152	Calculate the correction correction for the given data .
4153	Compute the zscore score .
4154	Plots a pandas dataframe .
4155	Adjust the axes of the axes .
4156	Prepare argparse parser .
4157	Creates a parser for a preprocessor .
4158	Creates a new figure .
4159	Adds the enrichment to the gene .
4160	Calculate the enrichment score for a gene .
4161	Compute the rank of the estimator .
4162	Calculate the rank of the data .
4163	Compute the probability of a set of points .
4164	Calculate the significance of a gene .
4165	Returns a pandas DataFrame .
4166	Get dataset datasets .
4167	Get the attributes of a dataset .
4168	Returns a list of filters
4169	Query the genes in the database .
4170	Creates a GSEA SeqE surface .
4171	Creates a single sample of a single sample .
4172	Perform a pre - rank rank ranking .
4173	Generate a replist with the given indices .
4174	Set the number of cores .
4175	Load geneets from a set of genes .
4176	Returns a list of library libraries .
4177	Download enrichment files .
4178	Compute heatmatrix matrix .
4179	Save the results as a dictionary .
4180	Load gene data .
4181	Run the gene - sample data .
4182	Run the GSSE algorithm .
4183	Runs the samples in the sample .
4184	Run the enrichment score .
4185	Save the enrichment scores to a file .
4186	Run the genemetrics .
4187	Enrich gene enrichment .
4188	Parse the gene sets .
4189	Parse gene list .
4190	Send a list of genes .
4191	Check to see if the gene list contains genes .
4192	Get background background data .
4193	Run enrichment .
4194	Create a cube .
4195	Creates an icosphere object .
4196	Return a list of torusors .
4197	Generate a set of vertices for a given script .
4198	Create a cube .
4199	Get color values from a color file .
4200	Check if a list is a list .
4201	Make a list of lists .
4202	Write a filter .
4203	Create a L3 loop for the given loop .
4204	Merge two vertices .
4205	Closes a closure .
4206	Splits the vertices of the given faces .
4207	Generate a list of polygons .
4208	Translate a script to a script .
4209	Rotate a script .
4210	Scale a script .
4211	Calculate the cosine function .
4212	Wrapper around a cylinder .
4213	Convert a script to a circle .
4214	Rotate a 2D curve .
4215	Convert a latex texture to a texture .
4216	Convert a mesh to a mesh .
4217	Generate a uniform mesh .
4218	Generate a preprocessing layer .
4219	Convenience function to generate a vector of vertices .
4220	Return a list of all elements in the script .
4221	Return a list of vertices for a given filter .
4222	Create a filter function for a given function .
4223	Write a function to a vertex .
4224	Calculate the vertices of a script .
4225	Return a spherical vertices .
4226	Join a script .
4227	Rename a mesh .
4228	Change the current layer .
4229	Create a new layer .
4230	Delete a script .
4231	Handle an error .
4232	Create a temporary file .
4233	Add a new layer .
4234	Remove a layer from the stack .
4235	Save the script to a file .
4236	Run a script .
4237	Main entry point .
4238	Generate the distance distance between the given image .
4239	Create a disk disk .
4240	Generate a mesh element .
4241	Convenience function to generate a clustering .
4242	Creates a flat list of flat vectors .
4243	Returns a list of triangles for a given script .
4244	Generate a list of voxes .
4245	Measure the topology of a script .
4246	Parse the topology .
4247	Parses the haff distance from a log file .
4248	Generate a function for rendering a function .
4249	Write a filter to a VOR .
4250	Generate a cyclic cycle .
4251	Return the axis of x y .
4252	Computes the cross - crossing between two vectors .
4253	Multiply multiple scalar values .
4254	Add a new vertex attribute to an attribute .
4255	Flips the faces of the given filter .
4256	Generate a set of points for a script .
4257	Generate a filter for a given template .
4258	Generate a filter for a script .
4259	Sort a list of polygons .
4260	Measure the topology .
4261	Evaluate all the measurements in a file .
4262	Measure the dimensions of a file .
4263	Lowercase extension .
4264	Patch request class .
4265	Return the config file for the given set .
4266	Configure upload_set_set .
4267	Get the configuration for this request .
4268	Return the URL for the upload .
4269	Return the path to the file .
4270	Check if the given extension is allowed .
4271	Resolve a conflict with the given name .
4272	Get the version information from a file .
4273	Remove duplicate duplicates .
4274	Get the difference between two objects .
4275	Format a list of objects .
4276	Truncate memory usage .
4277	Return a list of code events .
4278	Return the total overhead of this object .
4279	Compute the memory usage of this process .
4280	Runs the current package .
4281	Execute the module .
4282	Compute the profiling function .
4283	Runs the profiling .
4284	Get a list of module names .
4285	Run a subprocess .
4286	Return the name of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function .
4290	Replace the system arguments .
4291	Sample a signal .
4292	Insert a stack into the stack .
4293	Fill the number of sample counts .
4294	Format a node into a dictionary .
4295	Return a dictionary of callable calls
4296	Return a dict containing the sample information .
4297	Generate the profile for the given object .
4298	Return the profiling function .
4299	Transform profiler stats into a dictionary .
4300	Get the profile information .
4301	Generate a profile object .
4302	Execute the profile .
4303	Initialize database .
4304	Show the guests book .
4305	Add a new entry to the database .
4306	Run the profiler .
4307	Start HTTP server .
4308	Handle HTML root .
4309	Handle text content .
4310	Handle GET requests .
4311	Perform a POST request .
4312	Send HTTP response .
4313	Check if the given module is a standard directory .
4314	Record a line .
4315	Generate a list of stdout lines .
4316	Fill the heatmap map .
4317	Skip source code .
4318	Return a dict with the heatmap .
4319	Format heatmap .
4320	Return a dict with the heatmap .
4321	Return a dict with the heatmap .
4322	Run profiler .
4323	Run the given function .
4324	Calculate the probability of the model .
4325	Compute the log - likelihood of the model .
4326	Fit the model .
4327	Count the number of vocab .
4328	Sort vocabulary .
4329	Limits the features in the given vocabulary .
4330	Fit the input matrix .
4331	Transforms the given matrix into a matrix .
4332	Convert this object to a scalar .
4333	Fit the model .
4334	Predict the model .
4335	Fit the linear regression model .
4336	Fit the model .
4337	Fit the model to the model .
4338	Calculate the score for the given step .
4339	Fit the model .
4340	Calculate the score of the given estimator .
4341	Fit the model .
4342	Predict the model .
4343	Predict classifier .
4344	Checks that the given RDD is valid .
4345	Fit the given data .
4346	Fit the model to the model .
4347	Fit the SVD to the SVD .
4348	Transforms a sparse matrix to a sparse array .
4349	Yields an iterable of blocks .
4350	Generate a list of block tuples .
4351	Return a RDD of a RDD .
4352	Apply a function to the RDD .
4353	Return the shape of the array .
4354	Convert the RDD to a list .
4355	Apply a function to each column .
4356	Return the bits of a file .
4357	Return True if path is a root directory .
4358	Check configuration file .
4359	Read configuration file .
4360	Execute a command .
4361	Execute a command .
4362	Execute ssh command
4363	Validate the configuration .
4364	Get the headers for this object .
4365	Return the body of the response .
4366	Returns the URL for this device .
4367	Get the URL for the webhook .
4368	Convert a pkt packet to a string .
4369	Print discovery information .
4370	Discover devices .
4371	Execute the device .
4372	Send a confirmation message .
4373	Push a device to the device .
4374	Execute a device .
4375	Run all devices .
4376	Convert a transaction to a Transaction .
4377	Find the ledger file .
4378	Checks if the given version is compatible .
4379	Get the full description of a file .
4380	Reads a preprocessing measure .
4381	Return the default value for the given width .
4382	Render a badge .
4383	Generate a list of unicode characters .
4384	Generate a list of unicode characters .
4385	Calculate the length of a character .
4386	Write a JSON file to a JSON file .
4387	Convenience function for convolution .
4388	Compute the Gaussian kernel .
4389	Convert an image to grayscale .
4390	%prog summary
4391	Compute the SIM image .
4392	Compute the SIMS image .
4393	Destroy the device .
4394	Set the current code version .
4395	Get the status of the server .
4396	Print status .
4397	Convert a connection to a node .
4398	Try to connect to the server .
4399	Register a new connection .
4400	Handle incoming messages .
4401	Called when a command is raised .
4402	Check if a node is connected to this node .
4403	Connect to a node .
4404	Called when a connection is received .
4405	Called when a message is received .
4406	Called when a connection is disconnected .
4407	Add a new node to the network .
4408	Drop a node .
4409	Send a message to the server .
4410	Destroy the node .
4411	Add an item to the queue .
4412	Appends an item to the heap .
4413	Get the value of the item .
4414	Acquire a lock .
4415	Returns True if the lock is locked .
4416	Release a lock .
4417	Decorator to check if a function is valid .
4418	Decorator to ensure that the token is required .
4419	Set a list of hosts .
4420	Create an Elasticsearch index .
4421	Migrate an index to an index .
4422	Remove metadata from a report .
4423	Saves a list of aggregated aggregated reports .
4424	Extract XML from an XML file .
4425	Parse an aggregate report .
4426	Convert a CSV report to a CSV file .
4427	Parse a report file .
4428	Get the capabilities of the given server .
4429	Save the results to a report .
4430	Generate a zip file .
4431	Send an email to a report .
4432	Save the report report to the report .
4433	Saves the report report to disk .
4434	Decode base64 encoded data .
4435	Get the base URL for the given domain .
4436	Get the reverse DNS name from an IP address .
4437	Convert a human - readable timestamp to a datetime object .
4438	Download a GeoIP address from an IP address .
4439	Get information about an IP address .
4440	Convert an email message to a message .
4441	Convert string to list .
4442	Parse a report file .
4443	Perform a drain on the server .
4444	Publish a message .
4445	Publish a message .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from the server .
4449	Send a message to the server .
4450	Select the next server .
4451	Process an error message .
4452	Process an error .
4453	Connect to the server .
4454	Process ping .
4455	Process a message .
4456	Process server info .
4457	Process the connection .
4458	Flush data from the server .
4459	Read data from the server .
4460	Calculate the coords of a dataset .
4461	Decode a list of images .
4462	Load features from a list of features .
4463	Load features from a list of images .
4464	Calculate the correlation correlation between two images .
4465	Return the dot product of the image .
4466	Select feature selection .
4467	Gets a list of samples for a given dataset .
4468	Returns a list of feature names .
4469	Classifier for classify regions .
4470	Classifier for classification .
4471	Fit the model .
4472	Set the class weight .
4473	Fit the cross validation .
4474	Fit a dataset .
4475	Calculate the average of regions in a dataset .
4476	Get a random image from a dataset .
4477	Returns a list of top - level words .
4478	Calculate the correlation between two points .
4479	Calculate the FFT of a set of points .
4480	Load activations .
4481	Create an image table .
4482	Returns a list of the IDs of the given features .
4483	Add features to this table .
4484	Returns a list of feature names .
4485	Get a dictionary of feature counts .
4486	Load a dataset from a file .
4487	Save the features to a file .
4488	Get the image data .
4489	Get feature data .
4490	Returns a list of all the names of the given features .
4491	Returns a list of the IDs of the given features .
4492	Return a list of features matching the given search .
4493	Get the IDs of the given expression .
4494	Convert DataFrame to CSR .
4495	Decorator for deprecated functions .
4496	Transform a matrix into a matrix .
4497	Convert a matrix to a matrix .
4498	Apply the transformation to the given coordinate .
4499	Mask the image .
4500	Get the mask of the image .
4501	Load images from file .
4502	Save image to file .
4503	Set the logging level .
4504	Expand an address to an address .
4505	Normalize a string .
4506	Parse an address from a string .
4507	Return a list of tuples containing a list of values .
4508	Convert an object to a dictionary .
4509	Get the price for a given ticker .
4510	Returns a pandas DataFrame for a given metric .
4511	Retrieves a list of news from the server .
4512	Perform a request .
4513	Retrieves the token info from the client .
4514	Perform a request .
4515	Get album tracks .
4516	Retrieve an artist .
4517	Get album albums .
4518	Get a list of artists .
4519	Gets a list of artists .
4520	Get a list of artists .
4521	Retrieve a category by its id .
4522	Fetches a list of tracks .
4523	Get a list of categories .
4524	Fetches the featured list .
4525	Request a new release .
4526	Get a list of recommendations .
4527	Returns a list of all the users in the user .
4528	Get album albums .
4529	Get all albums .
4530	Returns the total number of albums .
4531	Return a list of Artist objects .
4532	Get the current track .
4533	Get the player .
4534	Get available devices .
4535	Return a list of all recent players .
4536	Replace a playlist .
4537	Reorder a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a list of tracks .
4541	Get all tracks .
4542	Return the URL for the given URL .
4543	Get a single album .
4544	Get an artist .
4545	Get a track .
4546	Get a user by ID .
4547	Get album albums .
4548	Get a list of artists .
4549	Search for a search .
4550	Convert string to ID .
4551	Decorator that checks the given attribute .
4552	Create a client from a client .
4553	Generate a URL for a client .
4554	Return the attributes of this client .
4555	Return a string representation of the attribute .
4556	Builds a list of tracks .
4557	Get all tracks .
4558	Pause the device .
4559	Transfer a player .
4560	Retrieves an object from the API .
4561	Retrieves the data from the server .
4562	Convert a month to a string .
4563	Updates the docstrings of the code .
4564	Check if the version is greater than the current version .
4565	Return True if the given version is a git version .
4566	Checks if the version is deprecated .
4567	Backup the backup .
4568	Restore the file content .
4569	Checks if the given line is ignored .
4570	Parse options .
4571	Extract base base base base url .
4572	Convert a string to a format string .
4573	Perform a GET request .
4574	Get HTTP status code .
4575	Check if a domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if ip is valid .
4578	Check if ipv4 is valid .
4579	Check if url is valid .
4580	Load configuration file .
4581	Make sure the user is safe .
4582	Download the URL for a file .
4583	Get the entry URL for this entry .
4584	Print the header .
4585	Process a file .
4586	Prints a domain .
4587	Set the URL to the file .
4588	Prints a log message .
4589	Format a domain name into a string .
4590	Extract domain domains from a file .
4591	Return a list of file - like objects .
4592	Get the URL of the file .
4593	Switch a variable .
4594	Determine if the user is available .
4595	Generate the URL for the URL .
4596	Get the structure for this project .
4597	Create a directory .
4598	Delete the tree .
4599	Sets the path to the config file .
4600	Load configuration file .
4601	Install the production config .
4602	Install the database configuration .
4603	Install a PSL file .
4604	Install directory structure .
4605	Merge the values from the config .
4606	Load the configuration file .
4607	Split a version string into a tuple .
4608	Checks if the given version is a list of versions .
4609	Check if the project is cloned .
4610	Helper function to handle exceptions .
4611	Returns the path to the output directory .
4612	Generate a unified output file .
4613	Generate status file
4614	Return True if the file is not present .
4615	Extract extensions from a file .
4616	Load the data from the database .
4617	Return a regular expression .
4618	Convert an element into a hierarchical structure .
4619	Load the database .
4620	Return the URL for the given extension .
4621	Return a generator that yields all extensions of the domains .
4622	Updates the database .
4623	Return a list of minions that match the request .
4624	Retrieves the data from the file .
4625	Backup the job .
4626	Add a list of files to the database .
4627	Remove a file from the cache
4628	Return a list of all the files in the file .
4629	Process the simulation .
4630	Get the contents of a file .
4631	Write content to file .
4632	Check if a record exists .
4633	Write the expiration date to the server .
4634	Sets the URL for the given extension .
4635	Generate the header .
4636	Return a list of header data .
4637	Return the header of the header .
4638	Return the data for the given size .
4639	Return the size of a header .
4640	Colorify data .
4641	Print the JSON representation of the output .
4642	Returns the data for the given template .
4643	Saves the output to the database .
4644	Calculate the number of seconds in seconds .
4645	Format execution time .
4646	Return a list of files in a directory .
4647	Delete all databases .
4648	Delete all files in the database .
4649	Return the hash of the file .
4650	Return the hash of the data .
4651	Get the hash of the algorithm .
4652	Execute the command .
4653	Remove a key from the dictionary .
4654	Rename the given key .
4655	Merge two dictionaries .
4656	Write a JSON file to a JSON file .
4657	Writes the main dictionary to a file .
4658	Convert the path to a directory .
4659	Write data to file .
4660	Read data from file .
4661	Formats the main list .
4662	Merge two lists .
4663	Return a list of all the elements in this list .
4664	Match the match .
4665	Replace the contents of the string .
4666	Count the number of tests .
4667	Calculate the total number of samples .
4668	Logs the results of the report .
4669	Check if the URL is valid .
4670	Check if the domain is valid .
4671	Check if this element is a subdomain .
4672	Returns the type of the test .
4673	Reformat historical errors .
4674	Retrieve the history from the database .
4675	Backup the database .
4676	Return the timestamp of the database .
4677	Return the content of the database .
4678	Check if the database is present in the database .
4679	Retrieve information about the user .
4680	Backup the database .
4681	Check if the database is in the database .
4682	Checks if the timestamp is in the database .
4683	Get the expiration date for this user .
4684	Add the user to the database .
4685	Get the permissions for a Travis test .
4686	Run the Travis test .
4687	Lookup a namespace and return a namespace .
4688	Determine if a user is available .
4689	Get the URL for the HTTP status code .
4690	Get the reference to the domain
4691	Get the current object for this object .
4692	Return a list of standard library paths .
4693	Return a list of standard names .
4694	Iterate over unused lines .
4695	Generate a list of unused imports .
4696	Generator that yields line number of imported lines .
4697	Generator for import_import_names .
4698	Yield the number of unused lines .
4699	Generate a duplicate line number of messages .
4700	Create a dictionary of messages from a dictionary .
4701	Return a list of strings .
4702	Extract package name .
4703	Check if a line is a single line .
4704	Checks if the given line is a single line .
4705	Filter imports from a file .
4706	Break a line into a string .
4707	Filter source code .
4708	Get a list of messages from a line .
4709	Filter star import imports .
4710	Filter a duplicate key .
4711	Checks if a key is a valid entry .
4712	Return True if the value is a literal .
4713	Generate a list of blank lines .
4714	Generate a list of strings from a source file .
4715	Get indentation .
4716	Get the end of the line .
4717	Fix the source code .
4718	Split a string into a list .
4719	Check if a file is a python file .
4720	Returns True if the given filename is excluded .
4721	Find all files in a directory .
4722	Main entry point .
4723	Reads the lease .
4724	Writes the lease to the server .
4725	Write the cancellation request to the server .
4726	Reads the cancellation response .
4727	Create a new name .
4728	Reads the digest .
4729	Writes the object to the stream .
4730	Create a new Digest object .
4731	Reads the application information .
4732	Write the application information .
4733	Create a new ApplicationContext .
4734	Reads the derivation parameters .
4735	Write the parameters to a file .
4736	Reads the request payload .
4737	Writes the request to the server .
4738	Reads the response .
4739	Writes the response to the server .
4740	Read signature .
4741	Writes the metadata to a file .
4742	Read signature .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Gets the attributes of a managed object .
4747	Get an attribute from a managed object .
4748	Set the attributes of a managed object .
4749	Set the value of a managed object .
4750	Check if the given policy is allowed .
4751	Writes the request to the stream .
4752	Create a new secret .
4753	Set the value of a setting .
4754	Load server configuration file .
4755	Process a bind parameter .
4756	Processes the result value .
4757	Reads the integer value from the stream .
4758	Writes the integer value to the stream .
4759	Validate the value .
4760	Reads a big integer .
4761	Writes the number of bits to an integer .
4762	Validate the value .
4763	Validate the enum .
4764	Read the value from the stream .
4765	Writes a boolean value to the stream .
4766	Write the boolean value to a boolean .
4767	Validate the value .
4768	Read the interval .
4769	Validate the interval .
4770	Returns a dictionary with the encryption key .
4771	Set the key - value of the key .
4772	Validate the key .
4773	Validate the secret .
4774	Validate the opaque value .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to an attribute .
4777	Returns the bitmask for the given enumeration .
4778	Get a list of enumerations from an enumeration .
4779	Checks if the given value is a bitmask .
4780	Reads the Keypair from the request .
4781	Writes the template to a file .
4782	Reads the private key pair .
4783	Writes the data to the server .
4784	Reads the attribute list .
4785	Writes the attribute to the server .
4786	Reads a list of attributes .
4787	Writes a list of attributes to a file .
4788	Return a list of json files .
4789	Scan the policy files to disk .
4790	Run the policy .
4791	Get the certificate from the database .
4792	Get the extended key from the certificate .
4793	Get the common name of a certificate .
4794	Get the client identity from a certificate .
4795	Reads the request payload .
4796	Writes the request to the server .
4797	Read the response payload .
4798	Write the response to the server .
4799	Convert an object into a Python object .
4800	Reads the payload .
4801	Reads the Keyword from the payload .
4802	Writes the object to a file .
4803	Check if the given attribute is supported .
4804	Returns True if the given attribute is deprecated .
4805	Returns True if the given object is a valid attribute .
4806	Returns True if the given attribute is allowed .
4807	Returns the valid value for the given config file .
4808	Reads the payload .
4809	Writes the response to the server .
4810	Reads the attribute of the attribute .
4811	Writes the attribute to a file .
4812	Reads the attributes from the stream .
4813	Writes the attributes to a file .
4814	Reads the noncece .
4815	Writes the signature to the file .
4816	Reads the username .
4817	Write the credentials to a file .
4818	Reads the device credentials .
4819	Writes the device to a file .
4820	Reads credentials from the input stream .
4821	Write the credentials to a file .
4822	Reads the MAC key .
4823	Writes the MAC key .
4824	Reads the key - value data .
4825	Write the data to the stream .
4826	Reads the key specification .
4827	Writes the stream .
4828	Read the extension .
4829	Writes the extension .
4830	Create an extension .
4831	Read the revocation code .
4832	Writes the revocation code to the stream .
4833	Validate the revocation code .
4834	Reads the contents of the object .
4835	Write this object to a file .
4836	Reads the contents of the object .
4837	Writes the data to a file .
4838	Reads the RNG parameters .
4839	Writes the parameters to a file .
4840	Read the profile information .
4841	Write the profile information to a file .
4842	Write the validation information .
4843	Reads the capabilities .
4844	Writes the data to a file .
4845	Stop all connections .
4846	Start the server .
4847	Reads the payload from the payload .
4848	Writes the template to a file .
4849	Reads the response payload .
4850	Writes the response to the server .
4851	Creates a symmetric key .
4852	Create an asymmetric key pair .
4853	Calculate the HMAC MAC .
4854	Encrypts the given ciphertext .
4855	Encrypt a symmetric encryption key .
4856	Encrypts a symmetric ciphertext .
4857	Decrypts a symmetric ciphertext .
4858	Create RSA RSA key pair .
4859	Derive the encryption key .
4860	Create a RSA private key .
4861	Verify a signature .
4862	Reads the signature .
4863	Write the payload to the server .
4864	Reads the usage of the allocation .
4865	Convert a KMIP protocol version to KMIP .
4866	Read the protocol version .
4867	Write the protocol version .
4868	Reads authentication credentials .
4869	Writes the credentials to the server .
4870	Reads the request payload .
4871	Read the certificate .
4872	Write the certificate .
4873	Authenticate the user .
4874	Reads the response payload .
4875	Writes the response to the archive .
4876	Start the session .
4877	Read the response payload .
4878	Check if the profile is supported .
4879	Derives a key from the object .
4880	Get attributes for a given uuid .
4881	Get a list of attribute names .
4882	Perform a query .
4883	Sign a data request .
4884	Open the client .
4885	Close the client .
4886	Creates a new key .
4887	Create a new keypair .
4888	Register a managed object .
4889	Create a new key .
4890	Derives a key from the given object .
4891	Finds the specified items in the cache .
4892	Check if the user is valid .
4893	Retrieves an object by its id .
4894	Get the attributes of a given uuid .
4895	Activate a device .
4896	Revokes a revocation reason .
4897	Perform MAC operation .
4898	Builds the crypto parameters for the given value .
4899	Build the encryption key .
4900	Build a MAC key .
4901	Builds a key specification for the given value .
4902	Builds the common attributes for this operation .
4903	Build the name of the attribute .
4904	Reads the query payload .
4905	Writes the query to the server .
4906	Writes the object to the stream .
4907	Reads the attributes of the request .
4908	Writes the response to the server .
4909	Get a single entry from a group .
4910	Get a list of named group names .
4911	Get all entries in a group .
4912	Load the object from the module .
4913	Create an entry from an entry string .
4914	Start a live server .
4915	Generate project files .
4916	Generate a controller .
4917	Generate action .
4918	Generate a new form .
4919	Generate model .
4920	Generate macro macros .
4921	Create a new directory .
4922	Rewrite a file with the given name .
4923	Return a string representation of the given value .
4924	Check if a url is valid .
4925	Encodes an object into a string .
4926	Decode a JSON - encoded string .
4927	Decorator for JSON response .
4928	Return the absolute URL for the given endpoint .
4929	Load the configuration from the environment .
4930	Sign a user .
4931	Get the current user s current user .
4932	Create a Flask app .
4933	Registers a jinjaja template .
4934	Register a blueprint .
4935	Register an error handler .
4936	Registers a Flask app .
4937	Write dataframe to a CSV file .
4938	Read data from a CSV file .
4939	Serialize a DataFrame to a DataFrame .
4940	Deserialize a DataFrame .
4941	Update the dataframe .
4942	Update the raw data .
4943	Returns the contents of the download URL .
4944	Upload a dataframe to a file .
4945	Upload data from a raw data type .
4946	Opens the contents of the dataset .
4947	Read the contents of the datastore .
4948	Read the contents of the datastore .
4949	Convert this DataFrame to a DataFrame .
4950	Gets the intermediate data for the given port .
4951	Get all experiments .
4952	Get dataset datasets .
4953	Get a dataset .
4954	Publish a function .
4955	Publish a service .
4956	Decorator to add annotations to a function .
4957	Decorator to register a function .
4958	Attach a function to the given content .
4959	Find all global global globals .
4960	Return a copy of this object .
4961	Look up a color string .
4962	Draws a cron .
4963	Calculate the elliptic curve .
4964	Calculate the Jacobian curve .
4965	Builds a list of choices from the tree .
4966	Get options for a command .
4967	Registers a list of items .
4968	Creates a dynamic layout for the given template .
4969	Initialize the cache
4970	Delete all sites in the cache .
4971	Get an entry from the cache .
4972	Update an entry in the cache .
4973	Set the value of the cache .
4974	Initialize the context .
4975	Resolve the name of the given language .
4976	Returns True if the current app is active .
4977	Calculate the depth of a tree .
4978	Get the current item in the tree .
4979	Returns the URL for the given item .
4980	Initialize a site .
4981	Get the attribute of the current page .
4982	Returns the parent of the parent item .
4983	Menu menu menu .
4984	Check if the given item is allowed .
4985	Returns a list of breadcrumbs .
4986	Generate a tree for the given tree .
4987	Get the children of a navigation item .
4988	Get the children of a tree .
4989	Update the children of a tree .
4990	Filter a list of items .
4991	Get the parent item of the tree .
4992	Cluster tree .
4993	Resolve a variable name .
4994	Parse a sitree tree .
4995	Parse a sitree node .
4996	Parse a site tree .
4997	Parse a site menu .
4998	Render a template .
4999	Parse a tag .
5000	Get the name of a model .
5001	Registers a model admin class .
5002	Redirect to redirects .
5003	Redirect to the next item .
5004	Add a new item .
5005	Called when an item is changed .
5006	Returns the form of the tree .
5007	Gets the tree for the given item .
5008	Move an item to a tree .
5009	Saves the model to the model .
5010	Returns a list of URLs for the given tree .
5011	Dump a model to a model .
5012	Create a new tree .
5013	Create an item .
5014	Imports the given app .
5015	Returns the model class for the given settings .
5016	Create a Config object from a mapping .
5017	Create a Config object from a file .
5018	Create a Config from a file .
5019	Create a Config object from an instance .
5020	Create a Zipkin object .
5021	Create a new header for a new span .
5022	Returns the context of the current context .
5023	Start the transport .
5024	Stop tracing .
5025	Update binary annotations .
5026	Add a signed binary annotation .
5027	Set the span name .
5028	Create a new endpoint .
5029	Creates a new endpoint with the given name .
5030	Build a V1 span .
5031	Encode a list of protobufs .
5032	Create protobuf protobuf .
5033	Convert hexid to bytes .
5034	Returns the protobuf for the given kind .
5035	Convert an endpoint to a protobuf endpoint .
5036	Convert annotations to a protobuf .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create a new endpoint .
5040	Creates a new endpoint with the given service name .
5041	Create a list of annotations .
5042	Create a binary annotation list .
5043	Create a new span .
5044	Convert a span to bytes .
5045	Encodes a list of bytes into bytes .
5046	Determine if the span is valid .
5047	Convert a list of spans to a list of strings .
5048	Push an object to the stack .
5049	Encode a span .
5050	Create a JSON endpoint for the given endpoint .
5051	Encode protobuf .
5052	Decode a list of spans .
5053	Convert a Thrift to a Thrift .
5054	Deserialize a ThriftType .
5055	Convert a ThriftType object into a dict .
5056	Deserialize a span .
5057	Convert a trace ID to a string .
5058	Convert an unsigned integer to an unsigned integer .
5059	Writes a hex value to a hex string .
5060	Decorator to fix preprocessing date .
5061	Set the current transaction code .
5062	Set the ID for the given tag .
5063	Set the tag for a tag .
5064	Parse the data .
5065	Parse the contents of a file .
5066	Join a string .
5067	Return the content of a response .
5068	Limits a rate limit .
5069	Perform a request .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the stream .
5075	Decode a string .
5076	Encode a term .
5077	Add an address to the server .
5078	Send messages to the queue .
5079	Set the remote service callback .
5080	Stop the discovery service .
5081	Clears all local services .
5082	Search for services .
5083	Construct a SOAP message .
5084	Discover the system log level .
5085	Gets the tag associated with this object .
5086	Returns a list of all children of this model
5087	Returns a list of all children of a model .
5088	Save the model to the cluster .
5089	Create a model from a serialized data structure .
5090	Validate that all unique forms are valid .
5091	Check if the form is changed .
5092	Generate a valid address .
5093	Generate the checksum of the address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt a seed for a seed .
5097	Validate signature signatures .
5098	Get the key for the given index .
5099	Get the key for the given address .
5100	Creates a new KeyIterator .
5101	Create a sponge .
5102	Apply an iterable to the given iterable .
5103	Slice a list of tuples .
5104	Transforms the state of the state .
5105	Get a list of digests .
5106	Get a list of private keys .
5107	Prepare a multi - transfer transaction .
5108	Add a list of tuples to a list of strings .
5109	Convert an integer to a list of tuples .
5110	Add two values to the right .
5111	Add two lists to the right .
5112	Print a seed .
5113	Returns a list of all transactions .
5114	Get input inputs .
5115	Get a list of addresses .
5116	Retrieves all transfers from the database .
5117	Prompts a transaction .
5118	Replay a bundle .
5119	Send a transfer command .
5120	Send a test to the device .
5121	Resolve an adapter .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Parse the response and return the response .
5126	Initialize a response .
5127	Add a digests digest .
5128	Get the address of the address .
5129	Generator that yields a generator that yields a generator .
5130	Create a new address from a digest .
5131	Generate the address for the given key .
5132	Return a list of transaction objects .
5133	Iterate over all transactions in the given seed .
5134	Returns a list of bundle bundles for a given transaction .
5135	Checks if the given encoding is valid .
5136	Get codec info .
5137	Encodes an input string .
5138	Decode a byte string .
5139	Finds all addresses in the given seed .
5140	Add a command to the controller .
5141	Create a Transaction object from a string .
5142	Return the JSON representation of this object .
5143	Returns the signature of the signature .
5144	Set the state of this transaction .
5145	Return a list of message messages .
5146	Return a list of tuples .
5147	Groups all the transactions in this transaction .
5148	Find all commands in a package .
5149	Execute the request .
5150	Apply a filter to the filter .
5151	Get the url of a job .
5152	Return a list of errors .
5153	Checks if the validator is valid .
5154	Creates a validator validator .
5155	Gets the list of bundle signatures for the given group .
5156	Get the signature of a group .
5157	Traverse a bundle .
5158	Start an interactive API client .
5159	Generate random seed .
5160	Get the digest of the hash .
5161	Signs the input transaction .
5162	Pretty print this object .
5163	Subtracts an integer from the given iterable .
5164	Slice the given tensor .
5165	Add a context to the context .
5166	Return the security level .
5167	Increment the legacy tag .
5168	Return the tag of this transaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all inputs .
5172	Signs all inputs in the bundle .
5173	Create a list of inputs .
5174	Convert a value to a standard integer .
5175	Decompress a G1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 .
5176	Prime the inverse of a field .
5177	Load a JSON file from a JSON file .
5178	Find all words that match the given category .
5179	Find the synonym for the given word .
5180	Expand abbreviations .
5181	Split text into description .
5182	Return a list of categories
5183	Generate a random colour .
5184	Plot the component .
5185	Reads a legacy character from a string .
5186	Create a TimeSeries from the given name .
5187	Generate a random color .
5188	Create a color from a file .
5189	Load a CSV from a CSV file .
5190	Convert this row into a CSV format .
5191	Return the maximum width of the column .
5192	Get the decoration of a component .
5193	Get the attribute of the decorated function .
5194	Get the component for a given color .
5195	Plot a list of dictionaries .
5196	Create a new text from a lexicon .
5197	Return the summary of the component .
5198	Creates a Rock Ridge Component class .
5199	Process a row .
5200	Parse a list of tuples .
5201	Return True if all elements are not equal .
5202	Return a unique unique unique values .
5203	Create a list of intervals from the given basis .
5204	Clean up longitude data .
5205	Create a list of latitudes from a file .
5206	Build a list of dictionaries .
5207	Create a CSV from a CSV file .
5208	Create an interval from an image .
5209	Create a stripe from a log .
5210	Create a Descriptor from a string .
5211	Create an interval from a file .
5212	Return a copy of this object .
5213	Convert this object to a CSV file .
5214	Convert the structure to a string .
5215	Plot a list of axes .
5216	Get data for a given field .
5217	Extract data from a log file .
5218	Finds the contents of the collection .
5219	Find overlaps overlaps .
5220	Find all gaps in the graph .
5221	Return a copy of the stripe .
5222	Return a copy of the strip .
5223	Return a copy of this component .
5224	Return a copy of this object .
5225	Computes the intersection between two objects .
5226	Merge overlapping gaps .
5227	Plot the histogram .
5228	Return a copy of this object .
5229	Return a copy of this image .
5230	Compute the quality of the tests .
5231	Convert hex string to hex string
5232	Returns the log likelihood of an image .
5233	Get the field name .
5234	Get a list of jobs .
5235	Parse a job .
5236	Update a token .
5237	Get all available allocations .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get information about a deployment .
5241	Delete a node .
5242	Dynamically drain a node .
5243	Gets an eligible node .
5244	List files .
5245	Get a stream of the given id .
5246	Get a file .
5247	Join a agent .
5248	Update servers .
5249	Force the given node .
5250	Get a list of nodes .
5251	Get a list of evaluations .
5252	Get all namespace names .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revokes a job .
5257	Starts a stable release .
5258	Deletes a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Get deployments .
5262	Get a random value for a given object .
5263	Generate a random mutator .
5264	Get a string of the given object .
5265	Generate a random object .
5266	Convert unicode string to unicode .
5267	Run the server .
5268	Stop the server .
5269	Generate a HTML file .
5270	Starts the server .
5271	Fuzzes the given object .
5272	Execute a command .
5273	Get output from stdin .
5274	Finish the process .
5275	Close the process .
5276	Start the server .
5277	Execute the given object .
5278	Encode a JSON string .
5279	Build a random string .
5280	Return a string representation of the grammar .
5281	Build a string representation of the query .
5282	Build a random value .
5283	Builds the algorithm .
5284	Build and return a build object .
5285	Builds the grammar .
5286	Shutdown the process .
5287	Run the process .
5288	Start the process .
5289	Generate a random float .
5290	Add a new definition .
5291	Add a category to the catalog .
5292	Generate the grammar for the given category .
5293	Perform fuzzing on the given element .
5294	Returns the fuzzer for the given config .
5295	Retrieves the first element of the json .
5296	Decorator for decorator .
5297	Handles the signal handler .
5298	Kill the process .
5299	Pause a command .
5300	Resume a command .
5301	Stop the process .
5302	Restart a command .
5303	Returns a list of all events .
5304	Sets the user s mood .
5305	Set the avatar .
5306	Get the URL for a given URL .
5307	Get a contact by id
5308	Get a user by ID .
5309	Returns a list of all the bots associated with this user .
5310	Get a user object from the API .
5311	Search for a specific user .
5312	Returns a list of all invite requests .
5313	Creates a new instance from raw data .
5314	Merge two objects .
5315	Merge an object .
5316	Sync the sync state .
5317	Reads the token from the user .
5318	Write token to file .
5319	Verify a user token .
5320	Refresh Skype token
5321	Get the user id
5322	Gets the registration token .
5323	Synchronously synchronously sync all the users .
5324	Checks if a user is valid .
5325	Authenticate a token .
5326	Authenticate a user .
5327	Sets the presence of a user .
5328	Ping a user .
5329	Get a list of conversations .
5330	Gets the chat chat .
5331	Create a new thread .
5332	Convert a URL to a URL .
5333	Convert a chat URL to a chat .
5334	Iterate over the given function .
5335	Return unicode string .
5336	Detect the format of the handler .
5337	Parse the given text .
5338	Serialize this post .
5339	Load YAML file .
5340	Export metadata .
5341	Export metadata to JSON .
5342	Determine if the string matches the pattern .
5343	Return a list of items .
5344	Return a list of sub - lists of all sublists .
5345	Convert a string to a string .
5346	Return a list of arguments .
5347	Return a list of all arguments that match the given pattern .
5348	Parses a list of strings .
5349	Return a string representation of a trie .
5350	Check the index of the given key .
5351	Insert a string with the given index .
5352	Calculate the atomic part of a character .
5353	Return a list of sub - spans for a given type .
5354	Shrink a range of ranges .
5355	Inserts a new span with the given index .
5356	Returns the level of the nesting level .
5357	Return the shadow of the span .
5358	Return a string representing the extended link .
5359	Convert the span to a dictionary .
5360	Print a pretty printable .
5361	Return a list of parameter names .
5362	Return a list of parser functions .
5363	Return a list of templates .
5364	Return a list of link links .
5365	Return a list of comments .
5366	Return a list of external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	r Return a list of lists of lists of lists .
5370	Return a list of all tags .
5371	Iterate over all sub - spans .
5372	Return a list of all ancestors of the given type .
5373	Return the parent of the given type .
5374	Return the mode of the list .
5375	Get an argument by name .
5376	Normalize a template .
5377	Remove duplicate arguments .
5378	Remove duplicate arguments .
5379	Set the value of the argument .
5380	Get an argument by name .
5381	Check if the argument is a valid argument .
5382	Remove an argument from the list .
5383	Convert a string to a string .
5384	Finds the given ellipsoid .
5385	Parse a URL from a URL .
5386	Parse a GeoJSON file .
5387	Convert an EPSG string into a CPS object .
5388	Convert a CRI string to a CRI string .
5389	Creates a crontab object from a string .
5390	Convert a string from a string .
5391	Write the record to the file .
5392	Read a VLRL file from a data stream .
5393	Parse a list of GeoJSON objects .
5394	Parses a GeoJSONTuple .
5395	Gets the dimensions of the given type .
5396	Gets the id for the given type .
5397	Create a new point from another point .
5398	Copy all fields from another record .
5399	Append the given value to the array .
5400	Returns a list of all the dimensions of the array .
5401	Create a new zeros .
5402	Read data from a stream .
5403	Create a new point from a compressed buffer .
5404	Calculate the x - axis of x .
5405	Calculate the y axis .
5406	Return the zeros in the header .
5407	Add an extra dimension to the data .
5408	Write the data to disk .
5409	Write a file to a file .
5410	Write this file to a file .
5411	Build a dict representation of a point format .
5412	Builds a list of dtypes .
5413	Convert a point to a point format .
5414	Return the minimum version of the file format .
5415	Checks if a file is compatible with the given version .
5416	Get a list of vlrs .
5417	Extract a list of LVL objects from a list of LVL objects .
5418	Read a VLRL file from a data stream .
5419	Return True if there are all points in a list of points .
5420	Return True if the file is a list of points .
5421	Raises an exception if the file is not present .
5422	Read header .
5423	Read a list of LVL objects from the stream .
5424	Read the points from the stream .
5425	Reads the data from the stream .
5426	Read a waveform packet .
5427	Read and return a list of evrs .
5428	Check if the given position is not present .
5429	Opens a file .
5430	Read from a file .
5431	Create a SkyData object from a header .
5432	Create alas data structure .
5433	Convert a point to a file .
5434	Merge two lists .
5435	Reads a scalar .
5436	Return the date of the date .
5437	Set the date .
5438	Calculate the minimum min and y .
5439	Set the minimum value of the minimum value .
5440	Return a list of max_max .
5441	Set the maximum value of the maximum value .
5442	Returns a list of scales .
5443	Return the offset of the coordinates .
5444	Parses a file version .
5445	Convert a version to a new version .
5446	Unpack an array .
5447	Pack an array into an array .
5448	Return a list of missing dimensions .
5449	Return a list of sub - fields .
5450	Return the number of bytes in bytes .
5451	Returns True if the waveform is a waveform .
5452	Main entry point .
5453	Return the checksum of the given command .
5454	Print a hex formatted string .
5455	Verify that the response is valid .
5456	Return a list of bits in a set of bits .
5457	Generate a query string .
5458	Run a server .
5459	Connect to the server .
5460	Start monitoring .
5461	Displays the given code .
5462	Clear alarm .
5463	Set the output of the output .
5464	Keep the connection to the server .
5465	Monitor monitor status .
5466	Close the writer .
5467	Purge the database .
5468	Guess the type of a notebook .
5469	Get the file id .
5470	Get a note from the database .
5471	Create a new note from the database .
5472	Get a directory .
5473	Convert a list of file records to a file .
5474	Create a directory from the database .
5475	Create a model from the database .
5476	Save a notebook to the database .
5477	Save model to file .
5478	Rename a file .
5479	Delete a file .
5480	Ensure the user exists in the database .
5481	Delete a user .
5482	Create a directory .
5483	Check if a directory exists .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return a list of directories in a directory .
5488	Check if a file path exists .
5489	Select a file for a given user .
5490	Return the default fields for a file .
5491	Get a file from the database .
5492	Get a file from the database .
5493	Get the file id .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save the contents of a file .
5497	Generate notebook files .
5498	Delete remote checkpoints .
5499	Generate a set of checkpoints for a remote file .
5500	Generate notebook notebooks .
5501	Encrypts a row in the database .
5502	Receive the contents of a user .
5503	Derive a private key from a password .
5504	Derives a list of passwords from a user .
5505	Creates a new password for a given password .
5506	Decorator to memoize a function .
5507	Get the name of a column .
5508	Convert a row to a dict .
5509	Convert a row to a dictionary .
5510	Creates a new checkpoint .
5511	Create a remote checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Returns a list of all the checks for a given path .
5515	Rename a remote file .
5516	Delete all remote checkpoints .
5517	Delete the remote database .
5518	Resolve the path to the given path .
5519	Apply a prefix to the given model .
5520	Decorator to handle a path .
5521	Decorator to handle a path .
5522	Decorator to handle new files .
5523	Called when the manager is changed .
5524	Get a root directory .
5525	Normalize an API path .
5526	Split a path into an API path .
5527	Convert nb bytes to bytes .
5528	Read bytes from a file .
5529	Decode a base64 encoded file .
5530	Create a file from a file .
5531	Return a list of all paths in the given path .
5532	Decorator to handle a 404 error .
5533	Create a new user .
5534	Split list of files into directories .
5535	Iterate over all files in a directory .
5536	Iterate over all files .
5537	Iterate over all files in a directory .
5538	Receives all users in the database .
5539	Receives the user with the given user .
5540	Unencrypt all users .
5541	Unencrypt a user .
5542	Create an alembiccii file .
5543	Upgrade the database .
5544	Sanitize a block .
5545	Add an instance to the queue .
5546	Load instances from a list of instances .
5547	Insert an instance of a block .
5548	Load data from embedding .
5549	Validate data .
5550	View the admin page .
5551	Return a JSON representation of this object .
5552	Hide the authenticated fields .
5553	Remove all fields from the request .
5554	Get a published publish .
5555	Returns a list of queryset objects .
5556	Returns a list of queryset objects .
5557	Get the value of the field .
5558	Validate widget .
5559	Validate a zone .
5560	Check if a UUID is valid .
5561	Get the permissions for this user .
5562	Modify permissions .
5563	Validate the author .
5564	Save a zone .
5565	Get the data for this field .
5566	Prepare the data for this field .
5567	Render a template .
5568	Get the settings for this Integration .
5569	Callback for callback .
5570	Get the settings for a given integration .
5571	Update the settings .
5572	Signs a user .
5573	Return a string with the given tag name .
5574	Render a zone .
5575	Save the featured image .
5576	Save a subsection of a subsection .
5577	Get the extension of the image .
5578	Returns the URL for the image .
5579	Save image to image .
5580	Save image to file .
5581	Get the database connection .
5582	Gets a single stream for a given file object .
5583	Reads data from the stream .
5584	Consume the given amount of requests .
5585	Sets the consumer for the given token .
5586	Process the scheduled consumer .
5587	Compute the exponential rate for a given time .
5588	Record the consumption rate .
5589	Download a file .
5590	Poll for a transfer .
5591	Returns a list of callbacks for a given transfer .
5592	Return a copy of a dictionary .
5593	Decrement the counter .
5594	Finalize the callback .
5595	Check if a file is a special file .
5596	Acquire a tag .
5597	Release a lock .
5598	Adjust the number of chunks in the file .
5599	Add a file to a file .
5600	Get the write task task .
5601	Gets the download manager for download .
5602	Perform a download operation .
5603	Main entry point .
5604	Return a list of write requests .
5605	Determines if the file is a readable object .
5606	Upload a file .
5607	Download a file from a bucket .
5608	Copy a copy of a bucket .
5609	Delete a bucket .
5610	Shutdown the system .
5611	Cancel a message .
5612	Waits until the client is received .
5613	Read data from file .
5614	Wrapper around openchunks .
5615	Get the upload manager for the given transfer object .
5616	Set the exception .
5617	Set the result .
5618	Set the exception .
5619	Return the result of the result .
5620	Cancel a message .
5621	Submit a task .
5622	Add a function to the callback .
5623	Add a function to the container .
5624	Called when the client is done .
5625	Submit a task .
5626	Add a callback to the future .
5627	Upload a file .
5628	Download a file .
5629	Iterate through the step decorator .
5630	Parse the decorator arguments .
5631	Refreshes the step of a step .
5632	Iterate through the function decorator .
5633	Decorator to handle step arguments .
5634	Refresh the current step .
5635	Select the python parser .
5636	List all items in a team .
5637	Create a new team .
5638	Update membership .
5639	Delete a membership .
5640	Retrieves a cat fact .
5641	POST a webhook
5642	List items in a room .
5643	Delete a membership .
5644	Validate base URL .
5645	Check if a string is a web URL .
5646	Open a local file .
5647	Checks that the given type is valid .
5648	Create a dictionary from a dictionary .
5649	Checks if the response code is valid .
5650	Convert json data to json .
5651	Convert a string to a string .
5652	List all items in a team .
5653	Create a new team .
5654	Update a room .
5655	Delete a room .
5656	List all items in the organization .
5657	Returns the timestamp of the event .
5658	Get access token .
5659	Create an object .
5660	Update a webhook .
5661	Delete a webhook .
5662	Fix API endpoint .
5663	Set the rate limit .
5664	Update headers .
5665	Absolute absolute URL .
5666	Perform a request .
5667	Get a GET request .
5668	Get pages from url .
5669	Get items from a URL .
5670	Perform a POST request .
5671	Delete a URL .
5672	Create a new login .
5673	List all users .
5674	Create a new room .
5675	Delete a message
5676	Create a new email .
5677	Get a single person .
5678	Update a person .
5679	Delete a person .
5680	Retrieves the object from the API .
5681	Iterate over all items .
5682	List all items in the API .
5683	Create a new object .
5684	Update a team .
5685	Delete a team .
5686	List all items in a resource .
5687	Serialize data into a tuple .
5688	Get a new OAuth token .
5689	Get the last activity .
5690	Post a webhook service .
5691	Retrieves the public URL for the network .
5692	Delete a webhook .
5693	Create a webhook .
5694	Create webhook .
5695	Run the console command .
5696	Read the telegram .
5697	Read telegram .
5698	Creates a DMRMS protocol .
5699	Creates a DSM connection object .
5700	Create a connection to a TSM .
5701	Handle data received from Telegram .
5702	Called when a connection is closed .
5703	Handle a telegram .
5704	Parse a Telegram message .
5705	Get the version of a file .
5706	Ensure that the python version is supported .
5707	Find all the packages in the given directory .
5708	Create a new command class .
5709	Creates a function for the given function .
5710	Run a command .
5711	Ensure that targets are required .
5712	Decorator to wrap a command .
5713	Get the file handler for the given package .
5714	Return a list of data files for the given data .
5715	Get package data .
5716	Compile a regular expression .
5717	Yield the path of the given path .
5718	Translate a glob pattern into a string .
5719	Join a list of strings .
5720	Translate a glob pattern into a string .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write the table to the database .
5724	Write triggers to the database .
5725	Write a table to the database .
5726	Write the contents of a table to a file .
5727	Process a row .
5728	Write indexes to the database .
5729	Write a table to the database .
5730	Write all triggers to the database .
5731	Return the number of items in the queue .
5732	Enqueue the given data
5733	Start a task .
5734	Builds a query for the given query .
5735	Serialize a datetime object to a JSON string .
5736	Connect to the database .
5737	Execute a SQL query .
5738	Connect to database .
5739	Run the benchmark .
5740	Connect to the pool .
5741	Look up the number of errors .
5742	Return the size of the connection .
5743	Called when the connection fails .
5744	Return a simple SQLAlchemy expression .
5745	Update a table .
5746	Connect to the database .
5747	Setup the table .
5748	Destroy this table .
5749	Start a step .
5750	Stop step .
5751	Loads a list of steps .
5752	Disconnect from API .
5753	Connect to the server .
5754	Connect to websocket .
5755	Handle incoming message .
5756	Stop timers .
5757	Send ping .
5758	Called when a ping is received .
5759	Send an API request .
5760	Unsubscribe messages .
5761	Handles the system handler .
5762	Initialize the API client .
5763	Handler for error messages .
5764	Handle data handler .
5765	Unsubscribe a channel
5766	Handle authentication handler .
5767	Handle a configuration .
5768	Update the timestamp of a channel .
5769	Reset the connection .
5770	Get a list of candles .
5771	Configure the configuration .
5772	Subscribe to a ticker .
5773	Unsubscribe a tick .
5774	Subscribe to a book .
5775	Unsubscribe a book .
5776	Subscribe to a book .
5777	Unsubscribe a book .
5778	Subscribe to all trades .
5779	Unsubscribe from a pair of trades .
5780	Subscribe to Candles .
5781	Unsubscribe from a pair of candles .
5782	Authenticate the API .
5783	Cancel an order .
5784	Handle a command .
5785	Handle device command .
5786	Handle notification notification .
5787	Create a new device type .
5788	Publish an event .
5789	Update a device .
5790	Fetches a list of clients .
5791	Returns a list of bundled bundles
5792	Create a bundle .
5793	Update a schema definition .
5794	Disconnects the client .
5795	Connect to the client .
5796	Subscribe to the device .
5797	Subscribe to the device .
5798	Subscribe to the device .
5799	Publish a command .
5800	Called when a message is received .
5801	Handle a device event .
5802	Handle device status .
5803	Handle the application status .
5804	Get a single event from the device .
5805	Get all events for a device .
5806	Make an API call .
5807	Send a Mmt request .
5808	Get the status of a device .
5809	Close the index .
5810	Count the intersection of the given coordinates .
5811	Get the nearest neighbors of the given coordinates .
5812	Get the bounding box .
5813	Delete an index .
5814	Create an index from the stream .
5815	Load byte array .
5816	Delete an object .
5817	Check if an error is raised .
5818	Load the application .
5819	Initialize Flask application .
5820	Starts the server .
5821	Convert a value to a string .
5822	Crop the center of the image .
5823	Process an image .
5824	Process an image .
5825	Process an image .
5826	Convert an image to a string .
5827	Process placeholder image .
5828	Save the model to a file .
5829	Updates the pi field for the given instance .
5830	Save the form data to the form .
5831	Creates the form field for this image .
5832	Convert obj to string .
5833	Automatically autocorator .
5834	Unregisters the specified size .
5835	Unregisters a filter .
5836	Return the URL for this image .
5837	Builds a list of filters .
5838	Returns the root folder for this image .
5839	Get the size of the file .
5840	Gets the size of the file folder .
5841	Delete files from the given file .
5842	Preprocess an image .
5843	Preprocess an image .
5844	Preprocess a PNG image .
5845	Retrieve an image from disk .
5846	Save image to file .
5847	Return a string representation of the PPI .
5848	Create a new image .
5849	Render a widget .
5850	Gets the context for this widget .
5851	Builds attributes from base attributes .
5852	Get the resized filename for the given image .
5853	Get the path to a file .
5854	Validate a list of sizes .
5855	Get image url from image key .
5856	Get the rendition key for the given key .
5857	Format instruction instruction .
5858	Format a function .
5859	Decode a bytecode from a bytecode .
5860	Decode a module .
5861	Decorator for deprecated functions .
5862	Create a new connection .
5863	Close the protocol .
5864	Read the result from the server .
5865	Perform an HTTP request .
5866	Parse an agent result .
5867	Checks the status of an application .
5868	Reset the given uuid .
5869	Get all instances of this instance .
5870	Get metadata for a given path .
5871	Returns a list of primary keys .
5872	Deserialize the given value .
5873	Get an instance of the given value
5874	Get the declared fields for the given schema .
5875	Loads the model from the database .
5876	Split the model into a dictionary .
5877	Delete a table .
5878	Create a snapshot .
5879	List snapshots .
5880	Restore a snapshot .
5881	Delete a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Update the index of the epoch .
5885	Convert text to text .
5886	Apply a function to the given data .
5887	Decorator to process text .
5888	Process text .
5889	Perform parallel processing .
5890	Generate the maximum length of the document .
5891	Return a pandas DataFrame of the corpus .
5892	Map a parameter type to a list of parameters .
5893	Parse a list of interfaces .
5894	Return the inverse of the inverse .
5895	Update the state of the undo .
5896	Return a copy of this instance .
5897	Return a copy of this node .
5898	Return True if the given dict is the same order .
5899	Return the inverse of an iterable .
5900	Clears the current window .
5901	Move a key to the next node .
5902	Write text to a temporary file .
5903	Returns a list of all contacts
5904	Merge configuration arguments .
5905	Load a list of addresses from the config file .
5906	Prepare the search query for the query .
5907	Create a new contact
5908	Return a list of birthdays .
5909	Returns a list of phone numbers
5910	List all contacts .
5911	Modify a contact .
5912	Remove a contact from a VCard .
5913	Execute a source command .
5914	Merge multiple subcommands .
5915	Make a copy of a subcard .
5916	Get action by alias .
5917	Convert a boolean value to a boolean value .
5918	Create a contact object from a given address .
5919	Create a new address from a file .
5920	Create a contact from a given address .
5921	Create a new contact from the given user .
5922	Returns a list of names for the given name .
5923	Add a category .
5924	Parse a type value into a tuple .
5925	Convert a list into a string .
5926	Convert a string to a datetime object .
5927	Compare two uids
5928	Return a list of all contacts
5929	Return a list of names matching the given query .
5930	Search for a given query .
5931	Search for an address .
5932	Get a list of tuples .
5933	Get the short UID of a given uuid .
5934	Iterate over VCF files .
5935	Load a VCard object .
5936	Get an instance of the given name .
5937	Return a list of available architectures .
5938	Return a list of available architectures .
5939	Returns the argument spec for the given function .
5940	Dispatch a parser .
5941	Safely print a prompt .
5942	Encodes the given output file .
5943	Guess a dictionary of keyword arguments .
5944	Add commands to the parser .
5945	Decorator to create a new name .
5946	Decorator for argparse arguments .
5947	Prompt the user for a given action .
5948	Replace the query with the given parameters .
5949	Return a copy of the pattern .
5950	Get the cached result of the query .
5951	Return the first item of the model .
5952	Delete entities from the database .
5953	Delete entity from entity .
5954	Return a string with the given prefix .
5955	Estimate the work for a given index .
5956	Search for the specified filter .
5957	Count the number of filters .
5958	Return the connection to the model .
5959	Return a list of strings .
5960	Refresh indices from model .
5961	Clean old old index .
5962	Add a new object .
5963	Get information about a given pk .
5964	Write data to a Redis server .
5965	Save this object .
5966	Delete this object .
5967	Get a list of objects from the database .
5968	Registers a function with the given type .
5969	Open a semaphore .
5970	Get CPU number of CPU cores .
5971	Sends the result of the work queue .
5972	Process a worker .
5973	Add a call to the queue .
5974	Ensure that all processes are running .
5975	Decorator to wrap a CloudPickable object .
5976	Start the server .
5977	Dynamically create a new connection object .
5978	Get a new executor for reuse .
5979	Wait until the job completes .
5980	Get the preprocessing data for the given process .
5981	Prepare the process
5982	Close all file descriptors .
5983	Terminate a process .
5984	Terminate a process .
5985	Get the exit codes for all processes .
5986	Format exit codes .
5987	Main entry point .
5988	Ensure that the process is running .
5989	Print an event .
5990	Run the main program .
5991	Interactively interact with a terminal .
5992	Split a string into a list of strings .
5993	Get the stack of the current frame .
5994	Run a hook on the given object .
5995	Clears the stack .
5996	Get integer value .
5997	Get integer value .
5998	Process commands .
5999	Start a new source file .
6000	Return the next token .
6001	Print an error message .
6002	Read a command line .
6003	Close the connection .
6004	Convert a message into a byte string .
6005	Disassembles a byte string .
6006	Count the number of frames in a frame .
6007	Get the name of a function .
6008	Print stack trace trace .
6009	Look up a subcommand .
6010	Shortcut for short help
6011	Add a subcommand .
6012	Run a subcommand .
6013	Run the debugger .
6014	Show a category .
6015	Runs the line number of lines .
6016	Find the traceback of a frame .
6017	Map a thread name to a thread .
6018	Get integer value .
6019	Get the value of an option .
6020	Set the value of a boolean .
6021	Set the value of an integer .
6022	Display a boolean indicating whether the value is enabled .
6023	Show the value of the debugger .
6024	Show the value of the debugger .
6025	Checks if a function is a def statement .
6026	Check if a class is a class .
6027	Queries a thread .
6028	Checks if the terminal is enabled .
6029	Determine if a color is darker .
6030	Return the signature of a frame .
6031	Return a list of all the display names .
6032	Display the display of a frame .
6033	Return a string representation of the number .
6034	Read message from socket .
6035	Prints debug information .
6036	Handle a subcommand .
6037	Runs the given arguments .
6038	Print a list of strings .
6039	Look up a signal by its number .
6040	Look up a signal by name .
6041	Determine if a name is valid .
6042	Set a signal for a signal .
6043	Adjusts the signature of the siglers .
6044	Print information about a signal .
6045	Handle a signal .
6046	Sets the print method .
6047	Process a signal .
6048	Convert a filename to a filename .
6049	Search for a file .
6050	Extract a file from a python script .
6051	Return a list of python files
6052	Write a message .
6053	Run the program .
6054	Columnize commands .
6055	Processes a traceback .
6056	Close the connection .
6057	Write a message to the socket .
6058	Return a list of qualified identifiers .
6059	Process a string .
6060	Add an ignore filter .
6061	Determine if a file exists .
6062	Return the filename of the module .
6063	Returns True if the trace is started .
6064	Checks if the given frame is stopped .
6065	Set the next step .
6066	Return the stack traceback for the given file .
6067	Runs the given file .
6068	Checks if the function name is valid .
6069	Delete a breakpoint .
6070	Delete a breakpoint .
6071	Enable breakpoints .
6072	Enable a breakpoint .
6073	Delete a breakpoint .
6074	Open an input file .
6075	Read a line from the prompt .
6076	Prompt the user .
6077	r Mark whitespace .
6078	r Return the number of digits .
6079	Return a Future with the given query .
6080	Restore the login session .
6081	Load a module .
6082	Iterate over all documents .
6083	Main entry point .
6084	Convert a file to a stream .
6085	Open a JSON file .
6086	Normalize data from a stream .
6087	Convert a date string to a float .
6088	Detect the file encoding .
6089	Yield lines from file .
6090	Convert filename to UTF - 8 bytes .
6091	Open a CSV file .
6092	Read rows from CSV file .
6093	%prog txt file
6094	Connect to a given URL .
6095	Save a token to a file .
6096	Perform a request .
6097	Delete a path .
6098	Wait until the build is reached .
6099	Get the root URL .
6100	Save a token to the user .
6101	Perform a JSON response .
6102	Post data to the server .
6103	Change the path of the given path .
6104	Get the default account s default account .
6105	Return the documentation for this resource .
6106	Wait until a job exists .
6107	Get the raw text of a given path .
6108	Print the output of a CSV file .
6109	Read parameters from a JSON file .
6110	Simplify a document .
6111	Create a new project .
6112	Creates a new project .
6113	Main entry point .
6114	Upload a stream to a stream .
6115	Upload a file to a file .
6116	Main entry point .
6117	Create a new user s credentials .
6118	Login to page .
6119	Post login page .
6120	Get data from a resource .
6121	Fetch data for the given period .
6122	Prepare the view .
6123	Initialize the view .
6124	Fetches and returns the response .
6125	Handle a message .
6126	Update menu .
6127	Return a list of static urls .
6128	Event handler for changes
6129	Event handler for changes
6130	Create a widget .
6131	Initialize the widget
6132	Destroy this widget .
6133	Add a child to the widget .
6134	Removes the child from the widget .
6135	Yield the child widgets .
6136	Set attribute value .
6137	Update the proxy .
6138	Called when a change is changed .
6139	Return a list of nodes that match the given query .
6140	Prepare the object .
6141	Initialize widget .
6142	Sets the HTML widget .
6143	Update the mode .
6144	Update the block block .
6145	Update the children of this node .
6146	Read the contents of a file .
6147	Print an error message .
6148	Print command line arguments .
6149	Get product by name .
6150	Create a new session .
6151	Reset the current session .
6152	Get a list of all stores .
6153	Sets the delivery system .
6154	Get a menu catalog
6155	Add item to basket .
6156	Add an item to the basket .
6157	Adds a product to the basket .
6158	Remove an item from the basket .
6159	Sets the payment method .
6160	Process payment options .
6161	Get a GET request .
6162	Perform a POST request .
6163	Call the API method .
6164	Append an item to the menu .
6165	Add an entry to the list .
6166	Draws the menu .
6167	Process user input .
6168	Select the selected item .
6169	Parses a menu .
6170	Return the top level of the given value .
6171	Compute the top - level top - level top - level aggregation .
6172	Convert a pandas DataFrame to a pandas DataFrame .
6173	Convert a datetime to a datetime object .
6174	Change date format .
6175	Cast a DataFrame to a DataFrame .
6176	Compute the rank of a DataFrame .
6177	Returns a pandas DataFrame with the given values .
6178	Convert a DataFrame to a DataFrame .
6179	Round a dataframe to a given column .
6180	Absolute absolute values .
6181	Return pivot table .
6182	Return a new DataFrame with the given values .
6183	Group a dataframe .
6184	Calculate cumulative cumulative sum of columns .
6185	Add a new row to a DataFrame .
6186	Decorator for decorator .
6187	Decorator to log a message .
6188	Decorator to log time .
6189	Decorator for logging functions .
6190	Rename a DataFrame .
6191	Calculate the sum of the values of a DataFrame .
6192	Combine a pandas DataFrame .
6193	Get the value of a function call .
6194	Remove old entries from a cache directory .
6195	Roll up a set of levels in a list .
6196	Return a pandas DataFrame .
6197	Return a pandas DataFrame with the given values .
6198	Fill values in a DataFrame .
6199	Add a date offset to an offset .
6200	Add a date to a date object .
6201	Add a date to a date object .
6202	Parse a date string .
6203	Filter a DataFrame with a given date .
6204	Calculate the percentage of a DataFrame .
6205	Calculate the ADF family for the given parameters .
6206	Returns a list of optimizer updates .
6207	Returns a list of training parameters .
6208	Add optimization parameters to the network .
6209	Compute the first step of x .
6210	Prepare the input layer .
6211	Compute the tensor .
6212	Apply a function to the map .
6213	Initialize the target vector .
6214	Report the report .
6215	Train the model .
6216	Sample the given inputs .
6217	Compute the alignments of the matrix .
6218	Compute the context of the context .
6219	Concatenate tensor .
6220	Pad the dataset .
6221	Compute the rms of a parameter .
6222	Print the elapsed time .
6223	Computes the cost of the given data .
6224	Run the benchmark .
6225	Build the loop variables for the loop .
6226	Iterate over the loop .
6227	Calculate the momentum of a model .
6228	Test if the train is training .
6229	Skip all batches .
6230	Load model parameters .
6231	Train the model .
6232	Run the training step .
6233	Runs the validation .
6234	Prints a classification map .
6235	Get the current data set .
6236	Apply a function to the tensor .
6237	Report the current parameters .
6238	Return a variable of tensor .
6239	Create a dataset from a dataset .
6240	Return a shared copy of the given value .
6241	Stack layer layers .
6242	Stack all layers .
6243	Encodes the network .
6244	Decodes the input data .
6245	Create a Gaussian kernel .
6246	Register a new layer .
6247	Monitor output outputs .
6248	Returns a list of all available parameters .
6249	Setup variables for the input tensor .
6250	Compute the output of the output .
6251	Save network parameters to disk .
6252	Load parameters from disk .
6253	Report the network .
6254	Register a list of parameters .
6255	Register updates .
6256	Register training updates .
6257	Register a list of monitors .
6258	Compute the norm of a tensor .
6259	Dump an element to a file .
6260	Load an object from a file .
6261	Load a model from a path .
6262	Create a new request .
6263	Decode a user s state .
6264	Parse credentials .
6265	Filter the request_token_type .
6266	Login to WSGI .
6267	Normalize a dictionary .
6268	Convert items to a dictionary .
6269	Parse a query string .
6270	Resolve a provider class .
6271	Create a cookie .
6272	Saves the cookie .
6273	Get the value of the cookie .
6274	Get the data for this object .
6275	Calculate the signature of the signature .
6276	Serialize a value into a string .
6277	Check if the expiration time is valid .
6278	Returns True if the timer is expired .
6279	Serialize the credentials .
6280	Return True if the content is a binary string .
6281	Return the content of the response .
6282	Create a new OAuth object .
6283	Access the user info
6284	Decorator for login .
6285	Login to the user .
6286	Generate a session key .
6287	Set the value of a key .
6288	Generate a random signature .
6289	Log a message .
6290	Check if the given category is an HTTP status code .
6291	Split a URL into parts .
6292	Decorator to register a cross - origin .
6293	Set the headers for a request .
6294	Get the keyword arguments for a given app instance .
6295	Convert an object into a string .
6296	Ensure that an iterable is an iterable .
6297	Checks if a given b is a distance .
6298	Decorator for deprecated functions .
6299	Deserialize audio segment .
6300	Create a AudioSegmentSegment from a file .
6301	Create a audio segment from a numpy array .
6302	Execute a command .
6303	Filter audio stream .
6304	Fetches a FFT file .
6305	Generate a frame of frames .
6306	Normalize the SPL segment .
6307	Combine the audio segment .
6308	Resample the samples .
6309	Serialize the state .
6310	Create a spectrogram .
6311	Determine the offset of the first offset of the offset .
6312	Gets the offset of the next onset of an onset .
6313	Returns the offset of the onset of the onset of the onset .
6314	Matches onset offsets for onset offsets .
6315	Given an onset of the onset of the onset of the onset of the onset .
6316	Update segmentation mask .
6317	Return the id of the front of the given index .
6318	Returns a generator that yields the first onset of the onset .
6319	Return a list of offsets for a given onset .
6320	Removes the overlap between two segments .
6321	Remove the front of the front of a list .
6322	Gets the breakpoints for each front of each face .
6323	Merge two segments .
6324	Split masks into masks .
6325	Reduce a set of elements to the same shape .
6326	This function is called when the signal is executed .
6327	Perform a bandpass filter .
6328	Highlight low - level filter .
6329	Convert a list of tuples into a tensor .
6330	Expand a data set to a dataset .
6331	Check if two elements are equal .
6332	Generate a list of aggregated values .
6333	Parse the audit matrix .
6334	Convert a list of tuples into a tensor .
6335	Updates the index of the config file .
6336	Extract files from the requirements file .
6337	Retrieves a list of streams .
6338	Resolve a value from a string .
6339	Return a list of Streams matching predicate predicate .
6340	Handle an error message .
6341	Push data to the stream .
6342	Push data to the channel .
6343	Get information about the stream .
6344	Open a stream .
6345	Calculate time in seconds .
6346	Create a child element .
6347	Return the next sibling element .
6348	Return the previous sibling of this element .
6349	Sets the name of the element .
6350	Set the value of the element .
6351	Append a child element to the element .
6352	Append a child to the element .
6353	Append an element to an element .
6354	Append a new element to another element .
6355	Removes a child from the node .
6356	Retrieves the results of the stream .
6357	%prog pairs of words
6358	Run autocomplete command .
6359	Compute the edge of a sentence .
6360	Iterate through a pipe .
6361	Return an iterator over the given function .
6362	Convert a word to a string .
6363	Print a fuzzy word .
6364	Print a fuzzy index .
6365	Extract the results from the results .
6366	Print help .
6367	Print information about the database .
6368	Print a DB key .
6369	Print the geometries of the geometries .
6370	Execute a GET request
6371	Print information about a specific field .
6372	Prints the score of a word .
6373	Compare two strings .
6374	Send a response to the server .
6375	Return a list of requests .
6376	Retrieves the bits from an array .
6377	Convert a list of bits into a bitarray .
6378	Convert a slice to a slice .
6379	Find all files in a directory .
6380	Return the value of an iterable .
6381	Generate a single statement for a given unit .
6382	Return the shift of a signal .
6383	Calculate the log of x .
6384	Returns True if the given number is a positive integer .
6385	Add a case statement .
6386	Define default statements .
6387	Register a VCDD .
6388	Sends the simulation to the simulation .
6389	Logs a change .
6390	Render a WDLProcess instance .
6391	Add agents to an interface .
6392	Gets the parent of this unit .
6393	Return a distinct iterable of iterable .
6394	Return a generator that yields each item in the collection .
6395	Flatten an iterable .
6396	Merge nested elements into the nested list .
6397	Remove all signals from the network .
6398	Checks if the given expression is a number of statements .
6399	Merge two processes .
6400	Reduces a list of processes .
6401	Send a write request .
6402	Serialize a unit to a unit .
6403	Return the name of the output of the output .
6404	Return a list of all drivers that don t exist .
6405	Register a signal .
6406	Creates an architecture with the given name .
6407	Gets the maximum number of statements for a given statement .
6408	Calculate the maximum number of statements .
6409	Write data to memory .
6410	Change the direction of this interface .
6411	Loads declared declarations .
6412	Gets the signature for this interface .
6413	Returns the physical name of this entity .
6414	Return the bits of this interface .
6415	Returns the sensitivity sensitivity of an operation .
6416	Evaluate operator .
6417	Convert a value to a binary value .
6418	Replace the bits in the given shape .
6419	Return the number of words in the given range .
6420	Group words by offset .
6421	Print interface to stdout .
6422	Return a list of frames from a Transformer .
6423	Iterate over all words .
6424	Pack data into memory .
6425	Clean the signal meta data .
6426	Determines the enclosing enclosing statements .
6427	Determine the sensitivity sensitivity of signals .
6428	Retrieves the context for this statement .
6429	Called when the result is done .
6430	Merge two collections .
6431	Return True if statements are merged in statements .
6432	Merge statements into a list of statements .
6433	Merge statements into a list of statements .
6434	Reduce a list of statements into a single statement .
6435	Called when the event is triggered .
6436	Sets the parent statement .
6437	Register a list of statements .
6438	Deletes the graph .
6439	Registers a given name .
6440	Returns the signature for the given name .
6441	Clean up the subnet .
6442	Iterate over all fields .
6443	Unpack data from a struct .
6444	Convert the value to a signed integer .
6445	Sets the sensitivity sensitivity for the given process .
6446	Evaluate conds .
6447	Connects a simulation to the given subunit .
6448	Create a new update .
6449	Decorator to create a new value .
6450	Return a vector representing a vector .
6451	Register a hardware process .
6452	Evaluate a parameter .
6453	Set the value of the parameter .
6454	Create a HypeType from an interface .
6455	Finalize the memory .
6456	Get the index of the index .
6457	Creates a new value from a value .
6458	Return a copy of the signature .
6459	Replaces the value of the given type .
6460	Iterate over the specified interfaces .
6461	Connects to the specified target .
6462	Pack an integer into an interface .
6463	Convert a romidex to a ROM .
6464	Convert the target to the target .
6465	Register an interface .
6466	Reduce the value of a value .
6467	Reduce a scalar value .
6468	Get the name of a class .
6469	Returns the serialization for the given object .
6470	Create a HDL type .
6471	Return a string representation of a container .
6472	Get the base condition .
6473	Return the bit - bit bits for the given width .
6474	Get a constant name .
6475	Cut the driver to the driver .
6476	Loads the value from an array .
6477	Loads a struct from a hdl struct .
6478	Loads the contents of the given type .
6479	Return the width of the item .
6480	Iterate through all of the items in the stack .
6481	Decorator to sign a value .
6482	Merges two statements into this statement .
6483	Returns the indentation of the given indent .
6484	Check if a property exists .
6485	Register a parameter .
6486	Update the parameters of this object .
6487	Register a unit .
6488	Register an interface .
6489	Register a list of items .
6490	Return the driver s driver .
6491	Evaluate the operands .
6492	Create a new operation with the given operands .
6493	Add indentation to context .
6494	Try to connect to a unit .
6495	Applies clk to clk
6496	Try to connect to cls
6497	Try to connect to cls
6498	Try to connect to RST .
6499	Convert an object to a RST .
6500	Iterate through a set of bits .
6501	Serialize an expression into an expression .
6502	Serialize an object into a serialized unit .
6503	Helper method for serialization .
6504	Returns the full name of this object .
6505	Create a new association .
6506	Prepare a simulation model .
6507	Convert a model to a simulation model .
6508	Connects the specified units to the given model .
6509	Creates a simulation .
6510	Called when the method is called .
6511	Connect to a signal .
6512	Register a new signal .
6513	Connect to the target .
6514	Return the target of the target .
6515	Determines whether the given process is evicted .
6516	Add a process to the queue .
6517	Add a signal to the scheduler .
6518	Schedules the future updates .
6519	Schedule all values in the queue .
6520	Resolve the conflict strategy .
6521	Run the combobox process .
6522	Runs the sequence of sequences .
6523	Apply all values to the simulation .
6524	Reads a value from a signature .
6525	Write a value to the signal .
6526	Add a new process .
6527	Simulate the simulation .
6528	Decorator to create an operation .
6529	Convert a list of statements into a tensor .
6530	Creates a new HWProcessor .
6531	Calculate the distance between two hashes .
6532	Calculate the average of the image .
6533	Calculate the distance between two images .
6534	Setup the device .
6535	Update the current state .
6536	Pause the device .
6537	Update the volume .
6538	Update the volume .
6539	Set the volume level .
6540	Reset the board .
6541	Get a piece of a square .
6542	Removes a piece of piece from a square .
6543	Set the piece of a piece .
6544	Checks if the given move is present .
6545	Determine if the player is a tip .
6546	Checks if the game is a game .
6547	Checks if this node is valid .
6548	Determines if the trajectory is valid .
6549	Removes the move from the game .
6550	Generate a list of strings .
6551	Push a UUID into the list .
6552	Generate a zer hash of the board .
6553	Returns the symbol for this piece .
6554	Return an instance of the given symbol .
6555	Return a string representation of this piece .
6556	Create a new UUID from a string .
6557	Parse a list of commits .
6558	Parse a commit .
6559	Load config from config .
6560	Execute a command from a command line .
6561	Add command line arguments to argparse .
6562	Load configuration file .
6563	Generate a yaml file .
6564	Generate markdown markup .
6565	Cast a value to a string .
6566	Returns a list of dates between two dates .
6567	Parse a date string .
6568	Load a currency file .
6569	Set the missing values for the given currency .
6570	Compute the missing rates for a given currency .
6571	Get the rate for a given currency .
6572	Convert a currency to a currency .
6573	Return a list of iterable items .
6574	Evaluate a frame .
6575	Read a record from the file .
6576	Write data to file .
6577	Map memory to memory .
6578	Return the comments of the file .
6579	Add an array to the file .
6580	Close the data file .
6581	Compute the position at the given time .
6582	Close the file .
6583	Load the data from the dataframe .
6584	Compute the smoothed data .
6585	visit a call node .
6586	visit a BatchOp node .
6587	visit a dict node
6588	visit a join statement .
6589	Visitor for logging .
6590	visit an exception .
6591	Detect logging level .
6592	Get the name of a handler .
6593	Get the id of a value .
6594	Check if the given node is a bare exception .
6595	Check that the exception is raised .
6596	Delete an existing file .
6597	Decorator for creating a db widget .
6598	Render the rendered PDF .
6599	Render the response .
6600	Convert a string to a URL .
6601	Configure the given module .
6602	Convert string to lowercase .
6603	Initiate the index of the collection .
6604	Parse a list of prices .
6605	Load lines from a file .
6606	Parses the given line .
6607	Translate a symbol to a string .
6608	Load symbol maps .
6609	Get the default session .
6610	Add a price .
6611	Import data from CSV file .
6612	Get latest latest price
6613	List prices .
6614	Download prices from a list of prices .
6615	Remove price entries from a list .
6616	Get the default session .
6617	Add a new symbol to the ledger .
6618	List all maps .
6619	Get symbol by symbol .
6620	Read lines from a file .
6621	Maps the given entity to the given entity .
6622	Convert a model to a PriceModel .
6623	Read configuration file .
6624	Returns the path to the config file .
6625	Create user config file .
6626	Returns the path of the config file .
6627	Get the contents of the config file .
6628	Set the value of an option .
6629	Get a configuration value .
6630	Save the configuration to disk .
6631	Parse a symbol .
6632	Add a price .
6633	Add a price to the database .
6634	Download the price for a given symbol .
6635	Returns the session object .
6636	Get prices for a given date .
6637	Get prices for a given date .
6638	Removes all the prices in the system .
6639	Prune prices for a given symbol .
6640	Download a price from a market .
6641	Returns a list of all the securities .
6642	Return the state of the current state .
6643	Update the children of this node .
6644	Return the children of this tree .
6645	Decorator that decodes a function callable .
6646	Checks if the given name is equal .
6647	Assert that the AST is equal to the AST .
6648	Checks if the given text contains the given text .
6649	Check if the given package is imported .
6650	Checks if text matches the given text .
6651	Checks if the given index is a valid output .
6652	Ensure that the error is raised .
6653	Checks if a student has been selected .
6654	Check if a function is valid .
6655	Get the result of a process .
6656	Updates the given solution .
6657	Check if an instance is an instance of an instance .
6658	Return a list of all defined items .
6659	Create a child node .
6660	Get the parser for the given tree .
6661	Test if the context is a context .
6662	Checks if the given state is present .
6663	Ensures that the given name is not present .
6664	Check if the given index is valid .
6665	Check if the argument is a valid argument .
6666	Check if a function is valid .
6667	Calculate the real likelihood of the model .
6668	Initialize the application .
6669	Initialize the LDAP configuration .
6670	Add a server to the server .
6671	Remove a connection from the stack .
6672	Deletes the given exception .
6673	Authenticate using LDAP .
6674	Authenticate using LDAP .
6675	Authenticate using LDAP search .
6676	Gets the groups associated with the given user .
6677	Get user information about the LDAP server .
6678	Get user information for a given username .
6679	Get an object from the LDAP server .
6680	Creates a connection with the given context .
6681	Create a connection object .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Search for a container .
6685	Search for labels .
6686	Search for collection .
6687	Search for all images .
6688	Send a message to the bot .
6689	Print a message .
6690	Update the S3 registry .
6691	Update the headers .
6692	Requests the client s secrets .
6693	Download a URL from a URL .
6694	Perform a GET request .
6695	Update authorization token .
6696	Create a folder .
6697	Read the response from the server .
6698	Get the bucket s bucket .
6699	Update client secrets .
6700	Initialize the client .
6701	Load the secrets .
6702	Prints a list of logs .
6703	Return a list of all logs .
6704	Create a new folder .
6705	Initialize the transfer client .
6706	List all containers .
6707	Show the status of the backend .
6708	Add a value to the backend .
6709	Remove secrets from a backend
6710	Activate a backend .
6711	Delete a backend .
6712	Update the base image .
6713	Basic auth header .
6714	Generate a signature .
6715	Generate a header for a request .
6716	Delete a URL .
6717	Perform a HEAD request .
6718	Perform a GET request .
6719	Verify SSL certificate .
6720	Delete an image .
6721	Return a dictionary of installed versions
6722	Return a list of requirements for a given module .
6723	Get the version of the singularity .
6724	Check if version is installed .
6725	Return the path of the current working directory .
6726	Returns the thumbnail thumbnail for the given image .
6727	Run a command .
6728	Get metadata for the given image .
6729	Update the Dropbox account
6730	Print the output of the output .
6731	Kill all commands .
6732	List logs .
6733	Returns a list of all the collections in the container .
6734	Update SSL secrets .
6735	Update the credentials .
6736	Get the client s client .
6737	Display an IPython notebook .
6738	Get manifest manifest .
6739	Get the manifest for a given repository .
6740	Get the download cache for the given directory .
6741	Extract environment variables from Docker environment .
6742	Update the git repository .
6743	Updates the secret secret
6744	Get the metadata for this project .
6745	Get the settings for a client .
6746	Get the value for the given name
6747	Update a client s settings .
6748	Authenticate with the given name .
6749	List builders .
6750	Load a list of templates .
6751	Get the IP address for a given name .
6752	Runs the web server .
6753	Return a list of containers .
6754	List all containers in the container .
6755	Main entry point .
6756	Main entry point .
6757	Initialize the database .
6758	Get the build template .
6759	List all available endpoints .
6760	List all available endpoints .
6761	List all files in a given endpoint .
6762	Creates a shared shared share .
6763	Reads secrets from the client .
6764	Gets the discovery service .
6765	Delete an object .
6766	Delete a file .
6767	Delete an instance .
6768	Return a list of subparsers .
6769	Generate a random string .
6770	Get the temporary directory for a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Get the hash of a file .
6774	Read content from a file .
6775	Read json file .
6776	Clean up files .
6777	Push a file to disk .
6778	Create a new collection .
6779	Get a collection by name .
6780	Get a container by name .
6781	List containers .
6782	Return the details of a container .
6783	Rename a container .
6784	Move a file to the container .
6785	Remove the image .
6786	Add a container to the registry .
6787	Push a file to the server .
6788	Parse a header from a recipe .
6789	Find a single recipe by name .
6790	Create a build package for a build .
6791	Run the build .
6792	Update metadata metadata .
6793	Formats a container name .
6794	Return True if the user is enabled .
6795	Emit an error message .
6796	Write a message to the stream .
6797	Print a table of rows .
6798	Push a container to the container .
6799	Get a template by name .
6800	Get manifest manifest .
6801	Get the build template .
6802	Update client secrets .
6803	Return a repr of a class .
6804	Yields errors .
6805	Create a proxy from a file .
6806	Return the URL for a user .
6807	Gets the URL for the avatar .
6808	Check if a gravatar has a valid avatar .
6809	Gets the URL for the avatar .
6810	Yield chimera blocks .
6811	Compute the chimera for the given blocks .
6812	Enumerate a set of residues in a molecule .
6813	Iterate over a molecule .
6814	Normalize mol mol .
6815	Apply transformations to a molecule .
6816	Calculate the similarity of a molecule .
6817	Validate the given smiles .
6818	Disconnect a molecule .
6819	Convert a list of smiles to a string .
6820	Enumerate a list of peptides .
6821	Convert a molomer to a string .
6822	Standardize mol .
6823	Return the parent of the molomer .
6824	Return the largest fragment of a molecule .
6825	Remove a molecule from a molecule .
6826	Sets the atoms of a molecule .
6827	Return the charge of a molecule .
6828	Return the parent of a molecule .
6829	Main entry point .
6830	Removes the fragments from the molecule .
6831	Choose the largest fragments .
6832	Evaluate the Fourier model .
6833	Get the statistics for a given user .
6834	Get all members of the org
6835	Get all teams in the organization
6836	Get a list of repositories .
6837	Get the total number of contributors .
6838	Get a list of pull requests .
6839	Get all issues in the repo
6840	Get the readme .
6841	Get the license .
6842	Get all commits .
6843	Write a JSON file to the org .
6844	Write totals to file .
6845	Write files to file .
6846	Check if file path exists .
6847	Remove a date from a file .
6848	Return a list of GO organizations .
6849	Create an enterprise session .
6850	Check rate limit limits .
6851	Connect to GitHub .
6852	Iterate over repositories .
6853	Get the organization .
6854	Write a file to a file .
6855	Create a project from a git repository .
6856	Initialize a project .
6857	Convert a license to a string .
6858	Retrieves information about the current collector .
6859	Get all releases .
6860	Get a list of referrers .
6861	Retrieves the data for the given type .
6862	Write a JSON file to disk .
6863	Write the data to a file .
6864	Check if a data file exists .
6865	Write data to file .
6866	Write references to file .
6867	Processes a JSON file .
6868	Processes a URL from a URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get all members of the org
6872	Write the user to a file .
6873	Connect to a session .
6874	Connect to GitLabLab .
6875	Iterate over all projects .
6876	Clone git repository .
6877	Calculate the labor hours for a given month .
6878	Remove a dictionary from a dictionary .
6879	Read the query from the database .
6880	Query git repository .
6881	Submit a git query .
6882	Waits for a reset time .
6883	Count the number of seconds .
6884	Load data from file .
6885	Save data to file .
6886	Create a VFS connection .
6887	Creates a TFS client .
6888	Create a TFS client .
6889	Creates a TFS client .
6890	Creates a TFS client .
6891	Get git repositories for a project .
6892	Retrieves the list of branches for a given project .
6893	Get a list of recent commits .
6894	Calculate total total number of commits .
6895	Write the history to a file .
6896	Configure the backend .
6897	Returns a MetricsInterface for the given thing .
6898	Sets the metrics for the given stat .
6899	Starts a timer .
6900	Decorator to register a timer .
6901	Generate a tag .
6902	Log a timing information .
6903	Log a histogram .
6904	Roll up the stats from the ledger .
6905	Convert a list of elements to an enum .
6906	Convert a value to an enum value .
6907	Convert a value to a Python object .
6908	Return the value for the given value .
6909	Resolve the given path .
6910	Projects a list of tuples into a dictionary .
6911	Calculate mean value .
6912	Mark the number of times .
6913	Calculate the mean rate .
6914	Mark the value as a new value .
6915	Send a metric to the server .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a metric to the batch .
6919	Get the value of an option
6920	Convert JSON data to JSON .
6921	Set default value .
6922	Return a dictionary mapping codes to a dictionary .
6923	Get a list of divisions .
6924	Convert a list of ints to a mapping .
6925	Solve the lattice matrix .
6926	Creates a view .
6927	Create a form view .
6928	Create a view view view .
6929	Create an API view .
6930	Create a generic API view .
6931	Add a model set to the model .
6932	Read a file descriptor from a stream .
6933	Read data from file .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Register a new watch .
6937	Remove a watch .
6938	Register a watcher .
6939	Setup the server .
6940	Get an event .
6941	Touch the message .
6942	Set the value of the interval .
6943	Calculate the failure .
6944	Close the connection .
6945	Determine if the connection is active .
6946	Connect to a connection .
6947	Perform a lookup request .
6948	Sets the limit of the connection .
6949	Prompt up a message .
6950	Add a callback to the event .
6951	Remove a callback .
6952	Trigger an event .
6953	Publish a message .
6954	Set the feature transform .
6955	Calculate the prediction .
6956	Calculate theta .
6957	Parse a log file .
6958	Clean up fastq files .
6959	Merge default adapters .
6960	%prog trimfile
6961	Read the depth of a depth file .
6962	Main entry point .
6963	Set the template .
6964	Set the main channel names .
6965	Get user channel information .
6966	Render a template .
6967	Return the template string .
6968	Set channel channels .
6969	Update the main sink .
6970	Sets the secondary channel .
6971	Update the attributes of this component .
6972	Sets the status of the pipeline .
6973	Set the raw inputs .
6974	Set the secondary inputs .
6975	Set extra inputs .
6976	Parse coverage header .
6977	Parse assembly file .
6978	Get the GC content of a sequence .
6979	Filter a list of contigs .
6980	Return the length of the assembly .
6981	Write the assembly to a file .
6982	Writes the assembly report to the output file .
6983	Remove whitespace from text .
6984	Checks if the given pipeline_string is valid .
6985	Check sanity checks for a pipeline .
6986	Parse a pipeline .
6987	Determine the source of the source .
6988	Parse a string from a string .
6989	Establish a linear connection .
6990	Creates a fork for a given source .
6991	Add unique identifiers to the pipeline .
6992	Remove unique identifiers from the pipeline .
6993	Checks if the file is required .
6994	Convert a header to a dictionary .
6995	Return the number of minutes in seconds .
6996	Return the size of the given string .
6997	Get a list of pipeline processes .
6998	Clears all processes .
6999	Update the barrier status .
7000	Retrieve a log file .
7001	Assign the resources to the resource .
7002	Update the process stats .
7003	Parse log file .
7004	Update the inspect .
7005	Display the screen .
7006	Updates the current screen .
7007	Adjusts the right side of the right side .
7008	Get the last line of the log file .
7009	Prepare the static pipeline .
7010	Convert the tree to a dictionary .
7011	Get the hash of the pipeline .
7012	Gets the next flow file path .
7013	%prog samfile
7014	Main entry point .
7015	Runs the brew command .
7016	Return a recipe for a recipe .
7017	List recipes .
7018	Validate a pipeline string .
7019	Build an upstream pipeline .
7020	Builds a pipeline .
7021	Define a pipeline for a pipeline .
7022	Run the pipeline .
7023	Return a string representation of a component .
7024	Write a report to a file .
7025	Main entry point .
7026	Fix the alignment of the assembly file .
7027	Clean up fastq files .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over all filters .
7031	Get the contig ID of a contig .
7032	Get the plot data for each sample .
7033	Write the report data to the report .
7034	Run the assembly report .
7035	Parse assembly file .
7036	Get summary statistics .
7037	Returns a list of labels for the given window .
7038	Calculate the GC term for a given length .
7039	Gets the GC score of the contigs .
7040	Main entry point .
7041	Write a JSON report to a JSON file .
7042	Return the index of a list of biased values .
7043	%prog trim bedfile
7044	Calculate the minimum number of samples .
7045	Get summary information from a summary file .
7046	Check to see if a summary file exists .
7047	Parse a log file .
7048	Parse the name of a process name .
7049	Add a dependency .
7050	Returns True if the given template is rooted in the given template .
7051	Build header .
7052	Build the footer header .
7053	Set channel channels .
7054	Sets up the main process .
7055	Set secondary channels
7056	Sets the status of the process .
7057	Return a string representation of a resource .
7058	Return a string representation of the container .
7059	Return the parameters of the process .
7060	Return a merged configuration string .
7061	Return the manifest string .
7062	Set configuration parameters .
7063	Write the tree to a file .
7064	Render a pipeline .
7065	Write configuration files to project .
7066	Export the parameters of the process .
7067	Export a list of directives .
7068	Retrieves a list of Docker containers .
7069	Builds the configuration .
7070	Sets the kmermer range of kmermers .
7071	Main function to run sparser .
7072	Get the report ID for this pipeline .
7073	Update the status of a trace file .
7074	Updates the log file .
7075	Send a report to the server .
7076	Initialize a live report .
7077	Close the server .
7078	Convert a list of adapters to a file .
7079	Main entry point .
7080	Saves the results to the output file .
7081	Main entry point .
7082	Generate the version of the build .
7083	Main function to run the analysis .
7084	Return a string representation of a message .
7085	Parse a list of procs .
7086	Collect a process from a pipeline .
7087	Guess the signature of a file .
7088	Gets the minimum range of quality strings .
7089	Returns a list of all encoding of the given range .
7090	Parse coverage file .
7091	Filter the assembly file .
7092	%prog filtered samtools
7093	Evaluate minimum coverage .
7094	Get the size of the assembly file .
7095	Parse assembly file .
7096	Convert camel case name to camel case .
7097	Collect the process map from the components .
7098	Main entry point .
7099	Compute a cube for a given sample .
7100	Map the data to the data .
7101	Calculate the median of the data .
7102	Compute the Gaussian Gaussian Gaussian Gaussian distribution .
7103	Compute the squared distance of a matrix .
7104	Compute the n - dimensional n - dimensional n .
7105	Apply Gaussian filter .
7106	Compute the N - dimensional N - dimensional N .
7107	Calculate the circular shift matrix .
7108	Compute the embedding matrix .
7109	Plot the format of the output file .
7110	Plot the boundaries of a set of boundaries .
7111	Plot a list of labels .
7112	Plot the groundtruth for a given track .
7113	Plot the tree of a tree .
7114	Returns a list of all the features in the given range .
7115	Convert a list of features to a FFT .
7116	Calculate the similarity similarity between the given indices .
7117	Fit the scatter model .
7118	Perform the fit of the scatter .
7119	Read references from an audio file .
7120	Find and return an estimate of an estimation .
7121	Save estimations to a file .
7122	Gets the list of all possible algorithms .
7123	Return a dictionary of configuration parameters .
7124	Get dataset files .
7125	Read a list of dictionaries .
7126	Get the duration of a feature file .
7127	Write a time series to a file .
7128	Return the filename of the dataset
7129	Align the segments in a song .
7130	Estimate the beat beat .
7131	Read the beat beat beat .
7132	Compute the beat features .
7133	Read features from the file .
7134	Write features to file .
7135	Returns a list of the names of the global variables .
7136	Compute frame timeseries .
7137	Get the frame timeseries .
7138	Get the features of the audio file .
7139	Select features .
7140	Preprocess the algorithm .
7141	Preprocesses a set of labels .
7142	Main entry point .
7143	Print results .
7144	Compute the estimate of the estimated results .
7145	Compute the gain gain for a given interval .
7146	Process a single track .
7147	Get the results file name .
7148	Processes a single file .
7149	Add a config variable .
7150	Compute all features in a file .
7151	Process a set of features .
7152	Calculate the Gaussian cost .
7153	Calculate the normalization of a function .
7154	Calculate the maximum value of the given range .
7155	Normalize a matrix .
7156	Gets the time frame of the given duration .
7157	Remove empty segments from a list of labels .
7158	Searches a list of clicks .
7159	Merge two labels .
7160	Process the segmentation level .
7161	Align the end of the end of the end of the hierarchy .
7162	Compute the distance between two nodes .
7163	Calculate the K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - T - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K -
7164	Return the clustering data .
7165	Calculate the kmeans .
7166	Compute the BIC model .
7167	Calculate the magnitude of x .
7168	Convert a JSON string to a list of bounds .
7169	Convert a JSON string to a list of bounds .
7170	Convert a JSON string to a list of labels .
7171	Convert a json file to a list of beats .
7172	Compute the FFT of the FFT .
7173	Compute the label of a matrix .
7174	Filter activation matrix .
7175	Get the boundaries of a set of boundaries .
7176	Gets the label for the given labels .
7177	Runs the h5 algorithm .
7178	Runs the FASTA .
7179	Run the audio algorithm .
7180	Processes a track .
7181	Process audio file .
7182	Update the weights of the weights .
7183	Main entry point .
7184	Decorator for decorator .
7185	Calculate accumulator .
7186	Create a new task .
7187	Yields a stream of strings .
7188	Send a stream to the target stream .
7189	Create a new URL for a given interface .
7190	Get a translator for a given source .
7191	Return a dictionary of translation tables .
7192	Print the language table .
7193	Remove nodes from a network .
7194	Convert a network to HDF5 file .
7195	Create a network from a HDF5 file .
7196	Set the variable variables .
7197	Aggregate a list of variables .
7198	Get a list of node IDs for each node .
7199	Plots the given data .
7200	Set the polynomial for the given category .
7201	Calculate the nearest neighbors of a given category .
7202	Return a list of low - level connectivity nodes .
7203	Processes a node
7204	Make an OSM query for a given query .
7205	Build a node query string .
7206	Get a list of nodes from a node .
7207	Check if value is a regular expression .
7208	Compare the value of the given value .
7209	Decorator for fluent functions .
7210	Return True if value is equal to expression .
7211	Trigger the given method .
7212	Check if the request matches the given request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set body .
7216	Convert data to JSON .
7217	Set the value of a key .
7218	Add a list of functions to the target list .
7219	Trigger a request .
7220	Add a URL to the request .
7221	Add headers to the request .
7222	Ensures that the header matches the given names .
7223	Ensures that the header matches the given headers .
7224	Set the content of the request .
7225	Add params to the request .
7226	Set the body of the request .
7227	Sets the JSON response .
7228	Set the XML document .
7229	Write a file .
7230	Persist the object .
7231	Set the error message .
7232	Create a response .
7233	Match the given request .
7234	Activate a function .
7235	Sets the mock engine .
7236	Enable network .
7237	Create a mock .
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Checks if the given request is enabled .
7242	Returns True if the request matches the given request .
7243	Return a copy of this request .
7244	Activate a function .
7245	Context manager .
7246	Add an interceptors to the engine .
7247	Removes the given name .
7248	Get the settings for a given connection .
7249	Return the SQLAlchemy SQL statement .
7250	Pre - save the model .
7251	Return the placeholder placeholder for the given value .
7252	Get a column from the database .
7253	Return the placeholder for the given key .
7254	Creates a list of values from a data dictionary .
7255	Calculate the base regression model .
7256	Return the covariance matrix .
7257	Recursively recursively recursively recursively recursively .
7258	Calculate the average of the states .
7259	Applies the variance of the signal .
7260	Compute the variance of the tree .
7261	Compute the regression model .
7262	Find the best root of the tree .
7263	Sets the temperature of the time series .
7264	Calculate the branch counts for each branch .
7265	Calculates the cost of a branch .
7266	Attach the tree to the tree .
7267	Calculate the cost of the model .
7268	Convert a profile profile to a profile .
7269	Normalize a profile .
7270	Sets the GTRTR .
7271	Sets the GTRTR model .
7272	Set the length of the sequence length .
7273	Attach sequences to the tree .
7274	Prepare the tree .
7275	Prepare node nodes .
7276	Calculate the distance between the tree .
7277	Recursively reconstruct the alignment of the tree .
7278	Compute the Mutation matrix for a branch .
7279	Return the expanded sequence of the given node .
7280	Calculate the FITCH profile .
7281	Compute the state of a given node .
7282	Find the intersection between two arrays .
7283	Calculate the total length of the sequence .
7284	Compute the log likelihood of the tree .
7285	Return the branch length of the branch .
7286	Optimize the branch length .
7287	Optimize the branch length .
7288	Calculate the optimal length of a node .
7289	Optimize the sequence length of sequences .
7290	Retrieve the alignment of the tree .
7291	Calculate the Q - Gaussian Q .
7292	Creates a new gtrr .
7293	Calculate standard standard standard deviation .
7294	Checks if the matrix is correct .
7295	Compute the probability of tq .
7296	Compute the optimal optimal solution for the given sequence .
7297	Compute the optimal optimization for the given sequence .
7298	Compute the probability of a profile .
7299	Compute the evolution of a profile .
7300	Calculate the log likelihood of a sequence .
7301	Set the branch length .
7302	Calculate the clock model for this tree .
7303	Plot the root of the tree .
7304	Resolve polygons from tree .
7305	Print the log likelihood of the model .
7306	Add a new clustering model .
7307	Find the best root of the tree .
7308	Assign a tree to a tree .
7309	Create GTRTR model .
7310	Read VCF file .
7311	Recursively create a new ancestral tree .
7312	Calculate the FWHM for the given distribution .
7313	Calculate the distribution of the distribution .
7314	Multiply a Distribution .
7315	Assign the date to the tree .
7316	Setup the tree for the tree .
7317	Calculate the time tree .
7318	Calculate the likelihood of the tree .
7319	Convert a list of dates to date .
7320	Calculate the uncertainty for a given node .
7321	Calculate the maximum probability of a node .
7322	Return the minimum value of an interpolation .
7323	Compute the median of an object .
7324	Convert datetime to numeric date .
7325	Create a DataFrame from the clock model .
7326	Connect to the server .
7327	Close the connection .
7328	Receive instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Initialize a handshake .
7332	Convert unicode string to unicode .
7333	Load an instruction .
7334	Encode an arg .
7335	Encodes the instruction .
7336	Return the URL for a class .
7337	Returns the URL for this instance .
7338	Return the URL for the given class .
7339	Download a file .
7340	Retrieves the parent object for this model .
7341	Prompts user credentials .
7342	Login to a solver .
7343	Display information about a user .
7344	Print a user .
7345	Return a copy of this filter .
7346	Return a copy of this chromosome .
7347	Return a copy of this chromosome .
7348	Retrieve facet facets .
7349	Process filters .
7350	Get next page .
7351	Execute the query .
7352	Migrate a dataset .
7353	Run solver .
7354	Download a vault from a local folder .
7355	Create a new instance from the given values .
7356	Log an OAuth2 token .
7357	Perform an HTTP request .
7358	Retrieves the child object .
7359	Cancel this object .
7360	Parse SNPs .
7361	Convert a row to a dictionary .
7362	Get the credentials from the server .
7363	Save the configuration to a file .
7364	Format a value as a string .
7365	Normalize tabular data .
7366	Build a string representation of a row .
7367	Build a horizontal line .
7368	Return a list of row attributes for the given row .
7369	Format a table into a table .
7370	Creates a new dataset .
7371	Validate a vault path .
7372	Uploads a file to a folder .
7373	Validate a vault path .
7374	Validate the API URL .
7375	Add a manifest to the manifest .
7376	Iterate over records .
7377	Evaluate the expression .
7378	Set the format of the format .
7379	Register a new formatatter .
7380	Format data to output .
7381	Iterate over a table .
7382	Get the user s config directory .
7383	r Returns a list of system configs .
7384	Read the default config file .
7385	Read configuration files .
7386	Return the user config file .
7387	Return a list of system config files .
7388	Return a list of all files in this directory .
7389	Write default config file .
7390	Read configuration files .
7391	Truncate a string .
7392	Replace a string with replacement .
7393	Execute a list of commands .
7394	Applies options to the specified options .
7395	Apply a command to the given command .
7396	Initialize the options .
7397	Run the peepir .
7398	Run the HTML command .
7399	Convert a string to a string .
7400	Formats the number of rows .
7401	Formats a row of headers .
7402	Create a vertical table .
7403	Generate a table of data .
7404	Render a template .
7405	Checks if the given type is valid .
7406	Checks if the given type is valid .
7407	Check if type is a binary type
7408	Generate a new key .
7409	Generate a new RSA key pair .
7410	Find all objects in the cache .
7411	Insert an image into an image .
7412	Export a panel .
7413	Return the first day of the given weekday .
7414	Repeat the number of times .
7415	Repeat the given start and end .
7416	Repeats the frequency of the week .
7417	Handle a single chunk .
7418	Generate a list of variants .
7419	Export a list of variants to a list of variants .
7420	Export a list of variants .
7421	Update a user .
7422	Returns a list of variants for a given institute .
7423	Get a variant .
7424	Return a string representation of a variant .
7425	Verify that a variant is valid .
7426	Creates a new CID for the given study .
7427	Returns a list of variants of the cancer variant .
7428	Perform a variant of a variant .
7429	Delete an evaluation .
7430	Returns a dictionary containing the acms parameters .
7431	Upload a panel .
7432	Download and download a file .
7433	Return a list of genes for a given gene .
7434	Add missing peaks .
7435	Link gene genes .
7436	Make a MIME request .
7437	Get a list of nodes that match the given token .
7438	Get the coordinate coordinates for a chromosome .
7439	Return the subcategory of the subcategory
7440	Calculate the length of the variant length .
7441	Get the end of the end of a variant
7442	Parse the coordinates of a variant .
7443	%prog clobfile
7444	Update panels .
7445	Update a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Save a delivery report .
7449	Return a list of phenotype terms .
7450	List the whitelist of whitelist .
7451	Build phenotype .
7452	Get the gene for a given chromosome .
7453	Convert a query to a JSON string .
7454	Show information about the institute .
7455	Show transcript transcripts .
7456	Display event events .
7457	Return a list of variant variants .
7458	Return a list of variants for a given institute .
7459	Return a string representation of a variant .
7460	Creates a svg variant
7461	Parse a variant .
7462	Generate a CSV header for a case .
7463	Get the variant information for a gene .
7464	Get predictions from genes .
7465	Creates a variant for a variant .
7466	Find the BAM file .
7467	Get observations for a particular variant .
7468	Parse a gene .
7469	Return a string representation of the transcript .
7470	Gets the end of the variant .
7471	Return the frequency of the variant .
7472	Generate a human - readable human readable human readable string .
7473	Generate a URL for a variant .
7474	Return a URL for a variant .
7475	Generate a URL for a given variant .
7476	Generate a URL for this variant .
7477	Return the human readable human readable string .
7478	Returns a list of the parents of a variant .
7479	Return a list of callers for a given variant .
7480	Returns a dictionary of variants of cancer variants .
7481	Export a CLVar to a dictionary .
7482	Gets the clinver for the given experiment .
7483	Return a dictionary of variants for a specific variant .
7484	Perform a CAS request .
7485	Create an evaluation object .
7486	Upload a panel from a file .
7487	Create a CSV file .
7488	Export a list of genes
7489	Parses acls session .
7490	Parse a list of compound compounds .
7491	Show all genes for a given build .
7492	Build a pedigree from an indep .
7493	Load variants from a cluster .
7494	Return the case of a case .
7495	Run the collection .
7496	Instantiates an institute .
7497	Updates an institute .
7498	Get file handle .
7499	Calculate the net number of net .
7500	Get the next frame of the network .
7501	Check that the year is valid .
7502	Check if the given month is a day of day .
7503	Parse the case data .
7504	Add pedata information to a dictionary .
7505	Parses a single sample .
7506	Parse a list of individuals .
7507	Parse a case .
7508	Parses a ped file .
7509	Build an Evaluation object .
7510	Create a report for a given case .
7511	Return True if pvs is a path
7512	Determine whether the path is a valid path .
7513	Return True if b is a bp .
7514	Calculate the ACM terms of an ACM term .
7515	Add gene info for a variant .
7516	Fetch variants from a case .
7517	Return a list of VariantVariant variants .
7518	Retrieve a variant from a document .
7519	Returns a list of variants of the gene .
7520	Return a list of evidence for a given institute .
7521	Returns a list of all causal relations .
7522	Checks to see if the case of the case of the case .
7523	Returns a generator that yields all the variations of the variant .
7524	Delete variants from a case .
7525	Return a list of variants in a variant .
7526	Evaluate the variant of a case .
7527	Gets the VCF for a specific variant .
7528	Return a list of variants for a given sample name .
7529	Get a MongoDB connection .
7530	Extracts the objects from a list of variants .
7531	Generate the header header header header header header .
7532	Return a list of CSV lines .
7533	Load transcripts .
7534	Loads an image from the database .
7535	Builds an exononon object from the given exon .
7536	Delete a panel .
7537	Delete indexes .
7538	Delete a user .
7539	Delete all genes .
7540	Delete all exons from the build .
7541	Delete a case .
7542	Get a list of individuals .
7543	Parses a match_id .
7544	Show the case of the case .
7545	Loads a user from the database .
7546	Login to a user .
7547	Build an institute .
7548	Delete an event .
7549	Create an event .
7550	Fetch events for a particular experiment .
7551	Get a list of user events .
7552	Add phenotype to phenotype .
7553	Removes a phenotype from the database .
7554	Create a comment .
7555	Parse a variant of individual individuals .
7556	Check the coordinates of a chromosome .
7557	Get the terms of the hpo .
7558	Export transcript transcripts .
7559	Load a list of exonons
7560	Load a region .
7561	Get all events for a given month .
7562	Returns a queryset with the given duration .
7563	Parse requirements file .
7564	Check if a panel exists .
7565	Update a panel .
7566	Create a new panel .
7567	Export a panel .
7568	Get information about the archive .
7569	Migrate a scenario .
7570	Migrate an archive to a given case .
7571	Perform a research scenario .
7572	Load genes from a HMC file .
7573	Run the hpo query .
7574	Create a Flask app .
7575	Configure the application .
7576	Register blueprint blueprint .
7577	Configure coverage .
7578	Get aliases for a given symbol .
7579	Build a panel .
7580	Export variants to the database .
7581	Export variants to a VCF .
7582	Get a VCF entry for a variant .
7583	Run a MongoDB server .
7584	Generate a md5 key .
7585	Initialize the database .
7586	Initialize the database .
7587	Run the index .
7588	Setup the database .
7589	Run the demo .
7590	Setup the database .
7591	Run the institute .
7592	Given a list of genes return a list of genes .
7593	Show panel panels .
7594	Adds an institute to the database .
7595	Update an institute .
7596	Fetch an institute .
7597	Check if a date is a valid date .
7598	Get a date object from the given date .
7599	%prog hpo_gen_graph
7600	Parse a rank_score entry .
7601	Create a new user .
7602	Check for MongoDB connection .
7603	Initialize the app .
7604	Loads a report .
7605	Add a user to the database .
7606	Perform a pileup .
7607	Load a list of exonons .
7608	Updates the conditions for a case .
7609	Add gene links to genes .
7610	%prog hg ggnc . hg
7611	Parses a HCF file .
7612	Parses the hgccn file .
7613	Gets the open variable for the given institute .
7614	Updates the clinid for the given sid .
7615	Get the clinid for a given submission .
7616	Add a case to the database .
7617	Update the clinid session .
7618	Retrieves a list of CID submissions .
7619	Delete a clinid object .
7620	Convert a case to a list of CID variables .
7621	Parses a hpo file .
7622	Return a list of genes .
7623	Get a single gene .
7624	Get a list of genes .
7625	Check if the panels are valid .
7626	Loads a clinical variant .
7627	Load a scopes from a config file .
7628	Decorator to decorate a template .
7629	Return an instance of institute_id .
7630	Return a list of institute institutions .
7631	Get the gene ID for a given gene .
7632	Update a panel .
7633	Load a list of diseases from a MIM file .
7634	Load the disease terms for a given gene .
7635	Parses a list of frequencies .
7636	Parse the frequency of a variant .
7637	Parses the variant frequencies .
7638	List users .
7639	Builds a HNC gene for a given gene .
7640	Load a panel .
7641	Loads an IMM image from the database .
7642	Compare the mappings of the mappings
7643	Updates the mappings for the given gene .
7644	Add a panel to the database .
7645	Gets a panel by its id .
7646	Delete a panel .
7647	Fetch a gene by name .
7648	Gets the genes of a panel .
7649	Convert a panel to a dictionary .
7650	Update a panel .
7651	Add a panel to the database .
7652	Applies changes to a panel .
7653	Return a set of clinical symbols for a given case .
7654	List all cases in a case .
7655	Emulate a single record .
7656	Load indexes from the database .
7657	Update all indexes in the database .
7658	Drop all indexes .
7659	Build a query query for the given query .
7660	Build a query from the database .
7661	Add cls to cls
7662	Add a query to the query .
7663	Add a gene filter to the query .
7664	Delete a database .
7665	Parse a CSV file .
7666	Builds a clsigig object from a cli file .
7667	Load genes from the database .
7668	Load transcript data .
7669	Load data from the database .
7670	Fetch a gene by its identifier .
7671	Get the HNC ID for a given HNC symbol .
7672	Fetch genes for a given symbol .
7673	Get all genes in the build .
7674	Returns the number of genes for this build .
7675	Drop all genes in the database .
7676	Drop transcripts .
7677	Drop the exonons collection .
7678	Returns a list of transcripts for this build .
7679	Build a dictionary of genes for a given build .
7680	Get gene by symbol .
7681	Get a list of genes for a given build .
7682	Returns a list of genes for the given build .
7683	Convert hgcg to hg .
7684	Add a gene id to the database .
7685	Gets the intervals for each chromosome .
7686	Updates an omim profile
7687	Get a list of Case objects .
7688	Creates a Case object .
7689	Determine the match criteria for a given institute .
7690	Attempt to match the match criteria .
7691	Delete a match .
7692	Return the report report for a given institute .
7693	Returns the PDF report for the given case .
7694	Determines the case of a particular case .
7695	Add a phenotype to the database .
7696	List phenotypes for a given institute .
7697	Delete events .
7698	Show the status of an institute .
7699	Assign a case to an institute .
7700	Generate a list of terms for a given term .
7701	Mark the validation validation .
7702	Mark a variation .
7703	Send a delivery report .
7704	Share an institute .
7705	Reverse an institute .
7706	Open a research institute .
7707	Send a VCF to a VCF file .
7708	Send a multi - cluster command .
7709	Generate a list of Case objects .
7710	Generate a report for a specific case .
7711	Get the coverage report for a particular sample .
7712	Get the submissions for a given institute .
7713	Creates a CSV file for the given case .
7714	Updates the synopsis of the given case .
7715	Returns a list of diseases that match the given criteria .
7716	Convert a VCF into a VCF .
7717	Creates a multi - case for a given institute .
7718	Returns a list of all violations in the given institute .
7719	Add a MEMM to the MEM .
7720	Delete a MIME request .
7721	Returns a list of matches matching the given case .
7722	Perform a match on a match .
7723	Update gene genes .
7724	Parse a variant call .
7725	Build a transcript from a transcript .
7726	Load an institute .
7727	Parses a single variant from a variant .
7728	Load a case from a VCF file .
7729	Update a variant .
7730	Update the variant rank .
7731	Update the variants of a variant .
7732	Updates variants of variants .
7733	Update all compounds in the database .
7734	Updates the compounds for a given case .
7735	Load a variant .
7736	Insert a variant .
7737	Load variants from the database .
7738	Assign a case to a case .
7739	Create a new event .
7740	Determine if a candidate is a candidate .
7741	Mark the case of a case .
7742	Order the validation for a given variant .
7743	Returns a list of Sanger objects .
7744	Validate a Variant .
7745	Mark the case of a case .
7746	Update a partial variant .
7747	Updates the ACMS for the given experiment .
7748	Parses a chromosome .
7749	Parse a simple simple simple string .
7750	Generate a document ID for a document .
7751	Convenience function to convert the genes to a single gene .
7752	Return the variant ID for a variant .
7753	Fetch the number of cases for a given institute .
7754	Update a list of gene genes .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Saves a case to the database .
7759	Update the case id for a case .
7760	Submit an evaluation .
7761	Returns a list of evaluation evaluations .
7762	Parse transcript lines .
7763	Parse a list of genes .
7764	Parses a list of transcripts .
7765	Parses an ensembl file into a dictionary .
7766	Parse a list of ensembl genes .
7767	Parse a list of nucleotide lines .
7768	Parse ensembl and return a dictionary of ensembl .
7769	Initialize logger .
7770	Parse the OIM header .
7771	Parse the MIB header .
7772	Get a list of mappings from a genotype file .
7773	%prog cli
7774	Convert string to float
7775	Format a month .
7776	Format the given day .
7777	Format a month name .
7778	Populate the popup .
7779	Get information about a panel .
7780	Parse a gene string into a dictionary .
7781	Parse gene lines .
7782	Parse a gene panel .
7783	Get a list of diseases .
7784	Update the hpo_terms for the given context .
7785	Return a dictionary of all users .
7786	Parses the population and returns a dictionary .
7787	Parses the presence of a variant .
7788	Get information about the general case .
7789	Gets a list of Case Groups .
7790	Render a JSON response .
7791	Calculate the year and year
7792	Check if the event is cancelled .
7793	Fetch a hpo term .
7794	Search the terms for a given query .
7795	Gets the disease term .
7796	Fetch a list of disease terms .
7797	Load a disease term .
7798	Generate a list of genes for a given term .
7799	Read hdf5 file .
7800	Initialize the frequency of the channels .
7801	Setup time series for time series
7802	Read a filter from a file .
7803	Compute the lst position of the segment .
7804	Generate the DCI bin coordinates .
7805	Print information about the header
7806	Calculate the extent of the plot .
7807	Plot the waterpoint of the waterframe .
7808	Plot time series data .
7809	Write filter to file .
7810	Calculate the bandpass ratio of the band .
7811	Convert data to masked data .
7812	Apply the MUCM to the MEM .
7813	Calculate the PSF model for a given dataframe .
7814	Calculate the frequency of a string .
7815	Write a POL file to a string .
7816	Calculate the closest element of x .
7817	Rebuild a numpy array .
7818	Unpack a numpy array .
7819	Calculate the difference between two streams .
7820	Plots the stderr .
7821	Calculate the calibration data for a channel .
7822	Plot the gain offsets for a given channel .
7823	Open a file .
7824	Setup selection range .
7825	Calculate the selection size .
7826	Calculate the selection shape .
7827	Setup the channels for the file .
7828	Setup the frequency of the channel
7829	Populate timestamps .
7830	Populate the frequency of the channel .
7831	Calculate the number of channels for each channel .
7832	Calculate the number of blobs .
7833	Determine if the data is a certain size .
7834	Read data from file .
7835	Read data from file .
7836	Read a row from the stream .
7837	Read data from the container .
7838	Update the header
7839	Print information about the file .
7840	Write file to file .
7841	Write the hdf5 file to disk .
7842	Write hdf5 file to HDF5 file .
7843	Get a list of blob dimensions .
7844	Get the chunk size of the file .
7845	Grab the data from the plot .
7846	%prog gpfile
7847	Read header from file .
7848	Find the number of blocks in the file .
7849	Print stats .
7850	Plot histogram .
7851	Generate a filter header .
7852	Find the header size of a file .
7853	%prog build command
7854	%prog hdf5 file
7855	Calculate the frequency of data .
7856	Convenience function to integrate a set of channels .
7857	Calculate the frequency fluxes for a given spectrum .
7858	Calculate the center of a channel .
7859	Calculate the FFT ratio for each channel .
7860	Calculate the dietry decomposition of a river .
7861	Determine the TensorSystem for the given axis .
7862	Calculate flux flux flux flux .
7863	Return the length of the header .
7864	Check if a file is a filter .
7865	Fix the value of a header .
7866	Generate a signature header string .
7867	Convert an angle to a string .
7868	Calculate the number of integers in a file .
7869	Convert the current frame to a dictionary .
7870	Creates a sub - parser .
7871	Create a parser .
7872	Remove comments from text .
7873	Add a default name to a string .
7874	Parse a line of records .
7875	Parse a list of records from a string .
7876	Parse a zone file .
7877	Return a copy of the given field .
7878	Parse a schema string .
7879	Convert a Python class to a Python package .
7880	Generate a source code for the given schema .
7881	Decorator to disable auto - register .
7882	Dump a record to a dict .
7883	Load a JSON object from a JSON string .
7884	Load a JSON string from a JSON string .
7885	Add a new schema to the database .
7886	Get the schema for the given record .
7887	Return a dict representation of this object .
7888	Add a mixin to a mixin .
7889	Create a new class from a metaclass class .
7890	Generate a schema for a given record .
7891	Get the root schema .
7892	Yield lines from a mr file .
7893	Write the output to the output file .
7894	Add a new value to the given key .
7895	Query the search string .
7896	Fetch a search result .
7897	Return all entities in this resource .
7898	Gets an entity from the database .
7899	Return a new quote with another quote .
7900	Escape a filter .
7901	Calculate the rotation matrix .
7902	Construct the covariance matrix .
7903	Calculate the vradiance of the vradiance .
7904	Calculate the standard deviation of a parameter .
7905	Calculate the magnitude of the GMS error .
7906	Calculate the magnitude of a GMS error .
7907	Make a plot plot
7908	Calculate the average number of steps .
7909	Calculate the angular distance between two points .
7910	Transform coordinates to cartesian coordinates .
7911	Transform sky coordinates to sky coordinates .
7912	Transform the covariance matrix into a matrix .
7913	Calculate the error factor for a given observable .
7914	Creates a plot of the plots .
7915	Make a plot plot of a set of values .
7916	Return a function that returns the result of the function .
7917	Decorator to raise an exception .
7918	Unquotes the given value .
7919	Perform a collection of functions .
7920	Removes all elements from the list .
7921	Filter the collection .
7922	Return a collection of items .
7923	Drop the collection .
7924	Return a copy of this collection .
7925	Find a node by name .
7926	Return a list of sensors for the system .
7927	Iterate over a group .
7928	Register a list of options .
7929	Return a string representation of the event .
7930	Builds a list of scheduled jobs .
7931	Prints the performance of the CPU .
7932	Print the performance of the CPU .
7933	Prints the results of the problem .
7934	Clean up the code .
7935	Round a number to a number .
7936	Return a list of blocks .
7937	Calculate cache access for the cache
7938	Calculate the number of cycles .
7939	Analyze the kernel .
7940	Analyze the memory in memory .
7941	Remove comments from a list of lines .
7942	Strip a list of labels .
7943	Gets the best best block of blocks .
7944	Select the pointer of the given block .
7945	Print a list of blocks for the given assembly .
7946	Inserts a list of Markdown lines .
7947	Run an assembly analysis .
7948	Main entry point .
7949	Simulate the model .
7950	Generate a space between start and end points .
7951	Get the last modified time of the given directory .
7952	Checks if the argument is an argument .
7953	Main entry point .
7954	Main entry point .
7955	Convert a symbol to an integer .
7956	Convert a multi - dimensional variable into an array .
7957	Transform a multi - dimensional array into an array .
7958	Find the type of the given astroid .
7959	Convert a function to an iterable .
7960	Checks if the kernel is valid .
7961	Set a constant value .
7962	Substitutes the given expression .
7963	Return a list of array sizes .
7964	Calculate the relative offset of a variable .
7965	Remove duplicates from the source .
7966	Return the length of the iteration length .
7967	Iterate over the loopstack stack .
7968	Returns a list of all the symbols in this list .
7969	Compile a list of Symbolicy symbols .
7970	Compute the relative representation of the matrix .
7971	Convert the global iterator to the global iterator .
7972	Return a generator of global variables .
7973	Convert a set of indices to a global iterator .
7974	Returns the maximum number of global variables .
7975	Print kernel info .
7976	Print information about the variables .
7977	Print information about the constants .
7978	Print kernel code .
7979	Convert a math expression into a float .
7980	Returns a list of offsets for the given array .
7981	Get the basename of a file .
7982	Get the index type of the loop .
7983	Build a list of constants .
7984	Returns a list of all block declarations .
7985	Returns a list of kernel nodes for the kernel .
7986	Build a list of array declarations .
7987	Find inner loop .
7988	Builds a list of variables for the given array .
7989	Builds a dummy callable callable .
7990	Build the kernel definition .
7991	Build a list of scalar declarations .
7992	Get the kernel code .
7993	Build a kernel call .
7994	Return the main code for the main code .
7995	Run the analysis analysis .
7996	Build an executable file .
7997	Convert a string to a sympy .
7998	Get the identifier of the file .
7999	Get the last modified datetime .
8000	Get a list of cached caches .
8001	Calculate the bandwidth of the cache .
8002	Get the compiler for the compiler .
8003	Parse an event string into a tuple .
8004	Ensure that the data is within the given range .
8005	Return the path to the header file .
8006	Align the number of elements in the cache .
8007	Returns a list of all loaders in the cache
8008	Returns the number of hits in the cache
8009	Returns the number of misses in the cache .
8010	Returns a list of all stores .
8011	Returns a list of all evictions in the cache .
8012	Get information about the memory hierarchy .
8013	Fix an environment variable .
8014	Configure the argument parser .
8015	Report the performance of the report .
8016	Parse the description of a text file .
8017	Raises an exception if it fails .
8018	Build a purchase item .
8019	Record the purchase of an item .
8020	Get course content for a course .
8021	Get the content of a course .
8022	Update the unordered list of users .
8023	Sends a course to a course .
8024	Send an offer to an offer .
8025	Get the logger configuration .
8026	Attempts to retry the given order .
8027	Fulfill the given order .
8028	Retrieves the Sailtrauth client .
8029	Get the value of a key .
8030	Set the value of the cache .
8031	Get a configuration variable .
8032	Returns the filename for the given variable .
8033	Get the value of a python version .
8034	Return the EX version of the EOS package .
8035	Return a dictionary of file references .
8036	Populate the dev_data_data_data .
8037	Return a list of external files .
8038	Set default values for this table .
8039	Prepare the extension info .
8040	Get the extension name for the given index .
8041	Return a list of short refs .
8042	Get the value of a column .
8043	Update the value of a value .
8044	Update the device .
8045	Set default values .
8046	Add fields to this record .
8047	Populate a serialized index .
8048	Insert a value into the database .
8049	Removes the data from the database .
8050	Registers a new record .
8051	Register a link .
8052	Create a regex pattern .
8053	Return the remaining duration of this time .
8054	Serialize this event .
8055	Perform HTTP request .
8056	Get a list of service services .
8057	Try to create a directory .
8058	Configure a service .
8059	Register agent state .
8060	Set recording state .
8061	Update the event status .
8062	Update agent state .
8063	Return the configuration file .
8064	Update configuration file .
8065	Check if the HTTPS server is running .
8066	Initialize the logger .
8067	Return a list of screenshots .
8068	Serve an image .
8069	Run all modules .
8070	Parses a VCF file .
8071	Get the schedules for a given schedule .
8072	Starts the scheduler .
8073	Run the agent loop .
8074	Create an error response .
8075	Make a JSON response .
8076	Return the status of a service .
8077	Return a list of events .
8078	Get an event .
8079	Delete an event .
8080	Modify an event .
8081	Get a list of configuration parameters .
8082	Creates an ingest request .
8083	Start recording .
8084	Render a fragment .
8085	Return a list of resource resources .
8086	Serializes this object to a dictionary .
8087	Create a Fragment object from a dict .
8088	Add content .
8089	Add a fragment to the fragment .
8090	Add a fragment to the URL .
8091	Initialize the JavaScript function .
8092	Return a string representation of this resource .
8093	Convert a resource to HTML .
8094	Render the response .
8095	Render the given fragment .
8096	Render a standalone HTML fragment .
8097	Calculate the Fourier coefficient for a given p .
8098	Convert values to a pandas array .
8099	Get the values of the error table .
8100	Compute the posterior histogram for each chromosome .
8101	Compute the error table .
8102	Return a summary of a table .
8103	Compute error statistics .
8104	Calculate the cutoff statistic for the given criteria .
8105	Calculate the score of an input file .
8106	Implementation of PEPF .
8107	Extract peptide peptide .
8108	Implementation of protein protein .
8109	Subtracts samples from input file .
8110	Reduce an oww file into the output file .
8111	Proper function for backward compatibility .
8112	Filter the sqml file .
8113	Get a group by id .
8114	Create a new group .
8115	Delete a group .
8116	Get members of a group .
8117	Update a group .
8118	Get the number of members of a group .
8119	Determine if a group is available .
8120	Modify a configuration file .
8121	Create a dataset .
8122	Decrypt a key .
8123	Get the stdout of the stdout .
8124	Get the stdout of the command .
8125	Get stdout from stdout .
8126	Get the debug command .
8127	Yields the contents of the input file .
8128	Return a stream of stdout and stdout .
8129	Return a stream of stdout .
8130	Context manager for debugging .
8131	Delete an account .
8132	Ensure container is empty .
8133	Decorator to create a file .
8134	Decorator to return a function that wraps the given file .
8135	Write an error message .
8136	Print help message .
8137	Print usage .
8138	Print version .
8139	Send a request .
8140	Post an account .
8141	Delete an account .
8142	Put a container .
8143	Perform a HEAD request .
8144	Get an object from a container .
8145	Put an object to a container .
8146	Post an object to a container .
8147	Resolve an option .
8148	Return a copy of this object .
8149	Write headers to file .
8150	Login to the client .
8151	Generate a temporary URL .
8152	Convert a value to a string .
8153	Run a command on a container .
8154	Get a client .
8155	Encrypts a key and returns it .
8156	Decrypt a key from a stream .
8157	Creates a directory structure .
8158	Create a new account .
8159	Put a container into a container .
8160	Get the content of a manifest .
8161	Create a container .
8162	Generate a temporary URL for a given path .
8163	Print the transitive information .
8164	Print help message .
8165	Check if the buffer is empty .
8166	Encrypt a key .
8167	Get the status of a repository .
8168	Get a pull request .
8169	Get pull requests .
8170	Writes the slug to the explorer .
8171	Get a list of SliderItems .
8172	Render a hero slider .
8173	Acquire the reader .
8174	Release the reader .
8175	Acquire the lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task .
8179	Return a list of all tasks in the queue .
8180	Convert this class to a dictionary .
8181	Create a Task object from a dict .
8182	Execute a PermissionJob .
8183	Initializes the archive .
8184	Run the job .
8185	Execute the backend .
8186	Create an Elasticsearch index .
8187	Create a new mapping .
8188	Encodes a JSON - encoded JSON string .
8189	Write items to the writer .
8190	Add a task to the scheduler .
8191	Remove a task .
8192	Yield items from the queue .
8193	Validate arguments .
8194	Parse archive arguments .
8195	Perform a job .
8196	Schedule a job .
8197	Cancel a task .
8198	Start the job .
8199	Listen to the server .
8200	Run the scheduler .
8201	Schedule a task .
8202	Cancel a task .
8203	Handle a job .
8204	Handle a failed job .
8205	Build a job arguments .
8206	Get a secret by name .
8207	Register a view .
8208	Register an admin view .
8209	Reverse a URL .
8210	Returns the name of the view .
8211	Get the version of the version .
8212	Resolve the given key .
8213	Get the engine configuration for a given scheme .
8214	Parse a path .
8215	Parse a database configuration file .
8216	Parse a database URL .
8217	Create a new user .
8218	List the user s data .
8219	Create a new password .
8220	Build a URL for the given field name .
8221	Parse a boolean value .
8222	Parse an integer value .
8223	Get the parser parser .
8224	Get settings from Django settings .
8225	Create a model from a model .
8226	Encode a base64 encoded string .
8227	Create a Field from a field .
8228	Creates a validator for the given data structure .
8229	Compute the product product of a parameter dictionary .
8230	Find unique unique points in a list .
8231	Configure logging parameters .
8232	Decorator to configure the logging configuration .
8233	Make sure the log file exists .
8234	Return a list of strings .
8235	Rename a file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Print progress bar .
8239	Replace the options in the parser .
8240	Convert a string to a string .
8241	Find multiprocessing options .
8242	Find the multiprocessing dict from a dictionary .
8243	Check if the log file is configured .
8244	Handle the parsing configuration .
8245	Handle a dictionary of dicts .
8246	Creates the logging handlers .
8247	Finalize the tool .
8248	Start the stream .
8249	Write a stream to the stream .
8250	Return True if the results are equal .
8251	Compare two parameters .
8252	Decorator to create a new run .
8253	Decorator to mark a deprecated function .
8254	Decorator to create a new kwargs .
8255	Decorator to change a keyword argument .
8256	Decorator for retry .
8257	Add a prefix to the namespace .
8258	Add parameters to network .
8259	Run the network .
8260	Compute the Euler decomposition of a trajectory .
8261	Add parameters to the function .
8262	Difference between two values .
8263	Create a storage service .
8264	Create a new storage service .
8265	Add the parameters to a trajectory .
8266	Difference between two values .
8267	Compress the contents of a file .
8268	Return True if the group is in a group .
8269	Builds the parameters for the model .
8270	Pre - build model .
8271	Build model .
8272	Builds the model for the given trajectory .
8273	Build the pre - build connections for the given traj .
8274	Builds the connections from the network .
8275	Add parameters to the simulation .
8276	Compute the factor factor for a given neuron .
8277	Compute the mean factor factor for a given neuron .
8278	Compute the mean of a trajectory .
8279	Add stats to the network .
8280	Add monitors to the network .
8281	Create a directory for the given traj .
8282	Plot the result of a traj .
8283	Print the graph of the spikes .
8284	Analyze a trajov model .
8285	Get the number of batches .
8286	Iterate over the tensor .
8287	Returns a list of the names of this node .
8288	Returns the function of the node .
8289	Renames the name of this object .
8290	Set the details of the current branch .
8291	Convert a node to a node .
8292	Remove a sub - tree from a node .
8293	Delete a node .
8294	Remove a node from the root node .
8295	Remove a branch .
8296	Translate a short name to a shortcut .
8297	Add prefix to the root node .
8298	Determine the type of a node .
8299	Add a new node to the graph .
8300	Add a node to the tree .
8301	Create a link .
8302	Check that the names of names are valid .
8303	Creates a new node .
8304	Creates an instance of the given type .
8305	Sets the details of a tree .
8306	Iterate over all nodes .
8307	Create a child iterator for the given node .
8308	Recursively traversal traversal of a tree .
8309	Perform fast search for a given node .
8310	Find a node in the tree .
8311	Return a list of candidates that match the given name .
8312	Get the children of this node .
8313	Add a new group .
8314	Add a leaf to the node .
8315	Returns a list of all the directories in the network .
8316	Determine the tree .
8317	Get the parent of this node .
8318	Add a new group .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf .
8322	Removes the child .
8323	Remove a child from the group .
8324	Returns True if the item contains the given item .
8325	Get the default value for the given key .
8326	Get the children of this node .
8327	Get the group s groups .
8328	Return a list of all leaf leaves .
8329	Gets the list of links .
8330	Store a child by name .
8331	Store a single segment .
8332	Load a child by name .
8333	Load the data from the network .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a configuration .
8342	Evaluate the maximum number of individual individuals .
8343	Add commit variables to the commit .
8344	Create git commit commit .
8345	Flatten a nested dictionary .
8346	Return a nested dictionary with nested keys .
8347	Print a progress bar .
8348	Get the arguments for a function .
8349	Get the kwargs for the given function .
8350	Format a timestamp .
8351	Connect to a TCP port .
8352	Make sure the directory exists .
8353	Reset the index .
8354	Return a string representing the remaining remaining time .
8355	Convert the object to a dictionary .
8356	Remove a key from the annotations .
8357	Convert the annotation to a string .
8358	Creates a new result object .
8359	Make a shared copy of the given key .
8360	Create a shared shared data .
8361	Perform a GET request .
8362	Retrieves the data node .
8363	Returns True if the item is supported .
8364	Create a shared shared data object
8365	Makes a multiprocessing callable .
8366	Lock a client .
8367	Send shutdown signal .
8368	Finalize the connection .
8369	Start the client .
8370	Send a request to the server .
8371	Acquire a lock .
8372	Listen to the server .
8373	Send data to the server .
8374	Detect the fork process .
8375	Handle data from data .
8376	This method is called when the container is done .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store a storage object .
8380	Store a message .
8381	Store references to the given trajectory .
8382	Decorator to parse configuration parameters .
8383	Collect values from a section .
8384	Collect configuration parameters .
8385	Parse the config file .
8386	Add parameters to the config file .
8387	Convert a binary number to a binary integer .
8388	Create a random state .
8389	Plot a rule .
8390	Calculate the cellular state of a cell .
8391	Main function for testing .
8392	Called when the update is updated .
8393	Gets the overlay group .
8394	Load data from a message .
8395	Store a message to the store .
8396	Load multiple items from a list of items .
8397	Check that the hdf5 properties are valid .
8398	Store a list of iterable items .
8399	Close the HDF5 file .
8400	Extract the file information from the file .
8401	Backup a trajectory .
8402	Read rows from a row .
8403	Prepare the merged data for the given trajectory .
8404	Load meta data from a traj file .
8405	Load a branch .
8406	Check if the current version of the current version of the current version .
8407	Fill the run_table table into a table .
8408	Load a trajectory from a trajectory .
8409	Store an overview of the trajectories .
8410	Creates a view of the view table .
8411	Store a trajectory .
8412	Store a branch branch .
8413	Create a tree for a given trajectory .
8414	Load a tree of nodes from a tree .
8415	Store all nodes in a tree .
8416	Add a table entry to the table .
8417	Retrieves a table from a table .
8418	Get all nodes of the given path .
8419	Sets the attributes of the given data .
8420	Recursively recursively recursively recursively recursively .
8421	Add a row to the table .
8422	Insert a row into the table .
8423	Extract the insert data from an item .
8424	Takes a string and returns a truncated string .
8425	Create a new group .
8426	Creates a new group of the given key .
8427	Store annotations .
8428	Load annotation annotations .
8429	Store a group group .
8430	Loads a graph from the graph .
8431	Loads all annotations from a traj file .
8432	Extract missing flags from a dictionary .
8433	Add a summary to the table .
8434	Add meta info to the table .
8435	Parses the contents of a given dictionary .
8436	Store the value of a parameter .
8437	Writes data to a file .
8438	Write a shared table to a file .
8439	Write an object to a dictionary .
8440	Write data to pandas DataFrame .
8441	Write a data array to another .
8442	Write data to a file .
8443	Delete a link .
8444	Removes all parameters from the given instance .
8445	Write data to a table .
8446	Convert a pandas DataFrame into a dict .
8447	Convert a column into a table .
8448	Get the maximum length of a list of strings .
8449	Parses the contents of the HDF5 file .
8450	Read a list of dictionaries from a leaf .
8451	Reads a shared data node and returns it .
8452	Read data from a table .
8453	Read an array from a HDF5 file .
8454	Loads a trajory trajectory .
8455	Return the name of a set .
8456	Set property properties .
8457	Add a list of dynamic dynamic imports .
8458	Set the run_run .
8459	Iterate over the trajectory .
8460	Rename the trajectory .
8461	Set the value of the model .
8462	Set the parameters of a parameter .
8463	Prepare the experiment .
8464	Get the value of the given run .
8465	Check if the run is completed .
8466	Removes the parameters from the disk .
8467	Copy a node from a node .
8468	Extracts the parameters from the build dictionary .
8469	Update the run information .
8470	Add a single run info .
8471	Lock the parameters .
8472	Lock the model parameters .
8473	Finalize the model .
8474	Loads the project s skeleton .
8475	Loads the given object and returns it .
8476	Create a backup file .
8477	Makes a list of wildcards .
8478	Merge multiple trajectories .
8479	Merge multiple runs into a single run .
8480	Rename a full name .
8481	Merge the derived parameters .
8482	Merge all links in the collection .
8483	Merge the config into the config .
8484	Merge two dictionaries .
8485	Merge the results into a dictionary .
8486	Migrate this trajectory to a file .
8487	Store the trajectory .
8488	Restore default values .
8489	Sets the index of the specified parameter .
8490	Make a single run .
8491	Return a list of all run names .
8492	Get the run information .
8493	Find the index of the given function .
8494	Start the trajectory .
8495	Finalize the run .
8496	Set the start of the run
8497	Sets the result of the run .
8498	Construct an instance of the constructor .
8499	Return a copy of a dictionary .
8500	Finalize the run .
8501	Retrieves the config dictionary .
8502	Return the results of the results .
8503	Store the given trajectory .
8504	Load items from a trajectory .
8505	Remove items from the iterator .
8506	Delete all links in the graph .
8507	Remove children from the tree .
8508	Remove items from a trajectory .
8509	Wrapper around pool_wrapper .
8510	Creates a frozen pool with the given arguments .
8511	Configure pool .
8512	Configure the frozen pool .
8513	Process a single run .
8514	Configure the scopopop .
8515	Run a single run .
8516	Configure logging .
8517	Configure niceness .
8518	Runs a single process .
8519	Run a single run .
8520	Wrapper for logging .
8521	Load a class from a string .
8522	Create a new class .
8523	Get the length of the parameter .
8524	Return a string representation of the evaluation .
8525	Checks if two values are equal .
8526	Get the value of the parameter .
8527	Explicitly explore a parameter .
8528	Expand a list of values to the specified range .
8529	Check if the data is valid .
8530	Store the object s data .
8531	Loads the parameter from disk .
8532	Loads the data from the parameter dictionary .
8533	Checks if two values are equal .
8534	Checks if the given data is supported .
8535	Serialize a sparse matrix .
8536	Return the names of the names of the names in the SparseSet .
8537	Convert data to a sparse matrix .
8538	Load the data from a parameter dictionary .
8539	Store the contents of the object .
8540	Loads the parameter from disk .
8541	Translate key to key .
8542	Return a string representation of the file .
8543	Convert the data to a dict .
8544	Set the value of a variable .
8545	Get the value of the result .
8546	Set the value of a single item .
8547	Checks if a sparse matrix is supported .
8548	Store the data to a sparse dictionary .
8549	Load data from a sparse dictionary .
8550	Set a single item .
8551	Saves the object to a dictionary .
8552	Load the data from a dictionary .
8553	Merge all files .
8554	Upload a file to a file .
8555	Download a file .
8556	Create a session .
8557	Merge multiple trajectories .
8558	Start a job .
8559	Multiply two vectors .
8560	Run the Euler integration .
8561	Preprocess the firing rate for each neuron .
8562	Add parameters to the experiment .
8563	Add an analysis to the traj .
8564	Execute the given network .
8565	Execute a network run .
8566	Extracts all sub -urations from traj .
8567	Execute a network run on the network .
8568	Add parameters to the network .
8569	Runs the simulation .
8570	Run the network .
8571	Run the network .
8572	Create a filename from a traj file .
8573	Get next iterator .
8574	Merge all files in a folder .
8575	Handle SIGINT signal .
8576	Load configuration from a file .
8577	Request the PIN pin .
8578	Request access token .
8579	Refresh access token
8580	Get all thermostatats
8581	Write the token to the file .
8582	Sets the HACAC mode .
8583	Sets the fan of the fan .
8584	Sets the temperature temperature for the given index .
8585	Sets the climate for a given index .
8586	Delete a vacation .
8587	Resume a program .
8588	Send a message to the server .
8589	Sets the humidity of a temperature .
8590	Generate a delay in seconds .
8591	Generate a timeout .
8592	Generate a renew request .
8593	Generate a new renewal time .
8594	Return a dictionary of all the attributes of this FSM .
8595	Reset the client .
8596	Get the timeout for a given state .
8597	Set the timeout for a given function .
8598	Send discovery to the server .
8599	Select offer offer .
8600	Send a request .
8601	Sets the timeouts for this client .
8602	Process incoming packet .
8603	Check if the DN is received .
8604	Initialize the current state .
8605	Set the bounding state .
8606	Refresh the current state .
8607	Sets the state of the server .
8608	End the current state .
8609	Send an error message .
8610	Called when the response is received .
8611	Called when the request is reached .
8612	Raises an exception if necessary .
8613	Called when a timeout is received .
8614	Receive an offer .
8615	Called when a packet is received .
8616	Called when a packet is received .
8617	Called when a packet is received .
8618	Receive a new NACK packet .
8619	Receive an ACK packet .
8620	Receive a NACK packet .
8621	Called when the lease is received .
8622	Set the value of the query .
8623	Add a new value .
8624	Remove a value from the query .
8625	Get the status of the server
8626	Create the output of the output .
8627	Main entry point .
8628	Validate a message .
8629	Reads a list of tuples from a file .
8630	Add a waveform to the data .
8631	Convert a TDM file to a file .
8632	Compares the difference between two strings .
8633	Create a patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if a patch exists .
8637	Backup a backup file .
8638	Add a file to a file .
8639	Run the command .
8640	Create a directory .
8641	Copy this directory to a directory .
8642	Link the link to the file .
8643	Copy this file to another directory .
8644	Get the directory for this file .
8645	Backup the contents of a file .
8646	Refresh a patch .
8647	Unpatch a patch .
8648	Unpatch the topology .
8649	Unset all pending patches .
8650	Apply a patch to the database .
8651	Applies the next patch to the database .
8652	Apply all patches to the database .
8653	Read a series of patches .
8654	Save a series of patches .
8655	Add a patch to the list .
8656	Inserts a list of patches .
8657	Add patches to the list of patches .
8658	Remove a patch .
8659	Return a list of patches for the given patch .
8660	Return a list of patches for a given patch .
8661	Return a list of patches for a given patch .
8662	Replace a new patch .
8663	Create a new version .
8664	Check the version of the database .
8665	Add a parser to the parser .
8666	Add parser to parser .
8667	Adds the parser to the parser .
8668	Set subparsers .
8669	Add subparser to parser .
8670	Check if a patch exists .
8671	Check if a patch is in the current directory .
8672	Tries to revert a file .
8673	Import a patch .
8674	Import patches from the quilt file .
8675	Creates a new waypoint .
8676	Return a list of nodes that are missing .
8677	Add a node .
8678	Build a route .
8679	Create a route name for the given name .
8680	Get the agency id for a relation .
8681	Process all nodes .
8682	Create a relation relation .
8683	Create a dummy data data from a list of stops .
8684	Patch a list of agencies .
8685	Create a dummy trip for a trip .
8686	Write the contents of the zip file .
8687	Write the contents of the compressed files to a file .
8688	Build an agency .
8689	Extract all stops from a node .
8690	Build a shape from a list of nodes .
8691	Return a list of supported versions .
8692	Send an APU packet .
8693	Attempt to authenticate the device .
8694	Register a device .
8695	Authenticate a device .
8696	Register a device .
8697	Convert a string to a string .
8698	Wrap a function as a function that wraps a function .
8699	Decorator to wrap a class .
8700	Return True if the filepath matches the given filepath .
8701	Returns the email address for the given email .
8702	Returns the entry for the given entry .
8703	Convert a markdown string to a string .
8704	Starts the server .
8705	Record an error message .
8706	Convert a URL to an image .
8707	Convert a string to an image .
8708	Decorator for validation .
8709	Check if size is larger than size
8710	Check if width is greater than size
8711	Check if height is greater than size
8712	Parse a category .
8713	Parse a list of tuples .
8714	Iterate over all items in the tree .
8715	Save an error message .
8716	Parse the feed .
8717	Parse an item into a dictionary .
8718	Get the instance of the model .
8719	Save an item to the database .
8720	Download a file .
8721	Load the source file .
8722	Iterate over the contents of the CSV file .
8723	Set the network access to the sandbox .
8724	Run a command .
8725	Add files to the container .
8726	Add a new file to the container .
8727	Get a list of enrollments .
8728	Gets all enrolments for a given course .
8729	Gets the list of enrollmentments .
8730	Gets all enrollments for a given section .
8731	Get a list of enrollments .
8732	Activate a user .
8733	Gets the roles of a given account .
8734	Gets the roles of an account .
8735	Gets the effective roles for a given account .
8736	Gets a single canvas .
8737	Get a role by id .
8738	Gets a canvas .
8739	Gets a Course by its Id .
8740	Returns a list of all courses in the account .
8741	Gets a list of courses for a given account .
8742	Get all courses in a account .
8743	Gets the published courses for the given account .
8744	Get a list of courses for a given regid .
8745	Create a canvas .
8746	Updates the given course id .
8747	Get activity activity .
8748	Gets the grades for a given term .
8749	Get statistics for a given term .
8750	Gets the activity for the given site .
8751	Gets the list of analyses associated with the given id .
8752	Get a list of student summaries .
8753	Gets the student activity for the given user .
8754	Gets the student messages for the given course .
8755	Get a list of external tools .
8756	Returns a list of external external tools .
8757	Create a new external tool .
8758	Update external tool .
8759	Delete an external tool .
8760	Check that the required parameters are required .
8761	Get the current user .
8762	Gets the list of users for a given course .
8763	Gets the list of users for a given course .
8764	Create a new user .
8765	Gets a list of loggedins .
8766	Update a user .
8767	Get next page .
8768	Get the URL for the given URL .
8769	Get the resource URL for the given URL .
8770	Get the URL for a given URL .
8771	Creates a new resource .
8772	Perform a POST request .
8773	Delete a resource .
8774	Gets the list of admin admins .
8775	Create a new user .
8776	Create a new admin .
8777	Delete an admin .
8778	Delete an admin .
8779	Create a new grade .
8780	Gets a canvas .
8781	Get a section by id .
8782	Gets the list of sections for a given course .
8783	Gets a list of sections for a given course .
8784	Gets the sections of a course .
8785	Gets a list of sections for a course .
8786	Creates a new section .
8787	Update the current section .
8788	Gets a list of Queries .
8789	Gets a canvas .
8790	Gets the list of accounts for a given account .
8791	Updates the given account .
8792	Updates the SIS account .
8793	Gets the OsidSession associated with the given account .
8794	Updates the user settings .
8795	Get a term by id
8796	Imports a CSV file .
8797	Import a CSV file .
8798	Gets the status of a SIS import .
8799	Build a zip file .
8800	Get assignment assignments .
8801	Update an assignment .
8802	Return a list of available reports .
8803	Gets a list of reports .
8804	Create a report .
8805	Create a report report .
8806	Create a report .
8807	Create a report report .
8808	Get the data for a report .
8809	Get report status .
8810	Delete a report .
8811	Move detection detection to image .
8812	Flip layer detection .
8813	Get a dictionary from an object .
8814	Get the configuration from the request .
8815	Return the empty value .
8816	Parse keyword arguments .
8817	Create metrics from the registry .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics for the given configs .
8821	Get a metric by name .
8822	Handle the homepage .
8823	Handle metrics .
8824	This function is used to get the information about the event .
8825	Fix the HTTP request .
8826	Perform a GET request .
8827	Return a list of information about the pods .
8828	Return a list of results .
8829	Encode data to JSON .
8830	Perform a GET request .
8831	Get a GET request .
8832	Delete a URL .
8833	Put a URL to the server .
8834	Create a POST request .
8835	Process a query .
8836	Group a list of sentences .
8837	Disambiguate PDF .
8838	Disambiguate a query .
8839	Create a segment .
8840	Get language language .
8841	Fetch a concept
8842	Fit the model .
8843	Calculate the accuracy of each feature .
8844	Fit the model to the model .
8845	Fit the model to the model .
8846	Compute the accuracy of the model .
8847	Fit a set of targets .
8848	Transform features into a new feature .
8849	Compute the score of each feature .
8850	Predict the model .
8851	Generate a list of model models .
8852	Plot the MDR grid of a mdr .
8853	Return a dictionary of configuration values .
8854	Return the config value for a given key .
8855	Convert a list of members to a vector .
8856	Convert a list of members to a vector .
8857	Evaluate a file .
8858	Evaluate the given stream .
8859	Evaluate a string .
8860	Bootstrap a module .
8861	Run the given code .
8862	Return a multi - level function for a given function .
8863	Add a method to the map .
8864	Add a new method .
8865	Get the method for the given key .
8866	Remove a key from a dictionary .
8867	Remove a method from the list .
8868	Check if a macro is a macro .
8869	Return the locator for the given form .
8870	Parse the form of the form .
8871	Ensure that the recursively contains the recursively .
8872	Assert that the given node is a tree .
8873	Resolve a bare symbol .
8874	Resolve a symbol from a variable .
8875	Parse AST node .
8876	Check if the variable name is a shadow variable .
8877	Add a new symbol .
8878	Map entries to a list of strings .
8879	Return a string representation of a sequence .
8880	Return a string representation of an object .
8881	Return a string representation of an object .
8882	Ensure that the node is missing .
8883	Execute the given form .
8884	Execute a module .
8885	Compile a module .
8886	Compile a Python code code .
8887	Return a sequence of sequences .
8888	Makes a string and returns a new string .
8889	Remove a string from a string .
8890	Return the fraction of the numerator .
8891	Create a logging handler for logging .
8892	Create a map from a dictionary .
8893	Iterate over all elements in a collection .
8894	Decorator to wrap a function in a context .
8895	Reads a namespace from the context .
8896	Read a collection of collections .
8897	Read a list of lists .
8898	Read a vector .
8899	Read a set of values .
8900	Read a map from the given context .
8901	Read a string from a string .
8902	Read a symbol .
8903	Read keyword keyword .
8904	Read meta data .
8905	Read a list of functions .
8906	Read a list of quoted quotes .
8907	Expand a list of lexic symbols .
8908	Process a lexic form .
8909	Read a syntax form .
8910	Reads and returns a new line .
8911	Read a leefine form .
8912	Read a character from a character .
8913	Read a regular expression .
8914	Reads data from a reader .
8915	Read the next comment .
8916	Reads the next loop and returns it .
8917	Read an iterable from a stream .
8918	Read a string from a string .
8919	Read data from a file .
8920	Update the position of the line .
8921	Push the stack to the stack .
8922	Return the next token .
8923	Generate a bytecode string .
8924	Retrieves the base code for the given file .
8925	Get the cache from a file .
8926	Return a list of all imported imports .
8927	Find a module by name .
8928	Execute a compiled module .
8929	Execute a module .
8930	Execute a module .
8931	Create a symbol .
8932	Return a list of identifiers for the given text .
8933	Creates a kwargs dictionary .
8934	Return a keyword for the given name .
8935	Takes a list of nodes and returns a list of nodes .
8936	Load an attribute .
8937	Decorator to generate an astroid .
8938	Generate an iterable of iterables .
8939	Convert a PyPy AST to a Python AST .
8940	A decorator that adds a function to the AST .
8941	A decorator that adds a function to the AST .
8942	Determine if a variable is dynamic .
8943	Determine if a variable is redefined .
8944	Convert an expression to an AST .
8945	Creates a function for the given function .
8946	Determine if a function is not a warning .
8947	Convert a Python object to a Python AST .
8948	Return the name of a function .
8949	Convert a function to a Python AST .
8950	Convert a function to a Python AST .
8951	Convert a function to a Python AST .
8952	Convert a function to a Python AST .
8953	Convert a Python object to a Python AST .
8954	Convert a PyPy AST to a Python AST .
8955	Convert an AST node into a Python AST .
8956	Convert a quote into a Python AST .
8957	Convert a recursively recursively .
8958	Convert a recursively recursively .
8959	Convert a node to a Python AST .
8960	Convert an AST node to a Python AST .
8961	Convert a Python object to a Python AST .
8962	Convert a node to a Python AST .
8963	Convert a variable name to a python object .
8964	Convert a variable to a Python AST .
8965	Convert an AST node into an AST .
8966	Convert a Python class to a Python object .
8967	Convert a YAML form to a Python object .
8968	Convert a list of constants into a Python object .
8969	Convert a list of literal expressions into a generator .
8970	Generate a PyPy AST .
8971	Yield all imported modules .
8972	Return an astroid from a module .
8973	Creates a namespace variable .
8974	Set a set of members .
8975	Set a set of members .
8976	visit an exception .
8977	visit an expression .
8978	visit a function
8979	visit a node .
8980	visit a node .
8981	Create a module .
8982	Return the first element of an object .
8983	Return the length of an object .
8984	Return the number of elements in the collection .
8985	Return an iterator over the next sequence .
8986	Consume a sequence of sequences .
8987	Convert an object to a sequence .
8988	Concatenate a sequence of sequences .
8989	Associates an object with the given values .
8990	Convenience method for concatenation .
8991	Decorator to apply a function to a function .
8992	Deletes an object .
8993	Check if two values are equal .
8994	Divide a number .
8995	Sort a collection into a sequence .
8996	Returns True if the given collection contains the given key .
8997	Get the value of the given key .
8998	Convert an object into a Python object .
8999	Convert an object into a Python object .
9000	Return a string representation of the object .
9001	Collect arguments from a list .
9002	Decorator that wraps the given function .
9003	Decorator for decorator .
9004	Decorator that wraps the given meta data .
9005	Decorator to create a function .
9006	Resolve a symbol by its name .
9007	Resolve a variable .
9008	Add a new python variable to the given symbol .
9009	Initialize a dynamic variable .
9010	Create a new variable .
9011	Internally internals .
9012	Finds a variable by name .
9013	Find a variable by its name .
9014	Resolve a variable by its name .
9015	Add default import imports .
9016	Add a new alias .
9017	Return a new variable with the given symbol .
9018	Return a copy of the given symbol .
9019	Find a variable by symbol .
9020	Add a new import .
9021	Returns the module for the given symbol .
9022	Add a new reference to this node .
9023	Returns the reference to the given symbol .
9024	Return a list of all references in the given namespace .
9025	Refreshes all references in this namespace .
9026	Create a new namespace .
9027	Create a new namespace .
9028	Get a namespace .
9029	Remove a namespace .
9030	Return completion of completion .
9031	Return a fully qualified alias for the given prefix .
9032	Recursively recursively recursively recursively recursively .
9033	Returns the complete completions for the given symbol .
9034	Returns the complete completions for the given value .
9035	Returns a list of all the names of the given text .
9036	Return a tuple of the arguments .
9037	Return a list of members .
9038	Return a list of members .
9039	Change the representation of the given style .
9040	Decrypt a JWT token .
9041	Encrypt a JWT using JWT .
9042	Delete a cache .
9043	Convert this selector to a Python object .
9044	Close the writer .
9045	Parse a SQL query string .
9046	Write a NDB model to a file .
9047	Decode an object to a dictionary .
9048	Decode a date string .
9049	Decode the given value .
9050	Decode an object .
9051	Validate the version string .
9052	Generate changelog .
9053	Return a list of connected components .
9054	Compute the topological ordering of a graph .
9055	Sets the parent object .
9056	Gets the parent object s parent .
9057	Add an operator to the graph .
9058	Add an element to the graph .
9059	Add two elements to the expression .
9060	Creates an operator .
9061	Decorator for logging .
9062	Parse a message from a received message .
9063	Convert a list of tuples into a dict .
9064	Check if a given command is valid .
9065	Prepare commands for sending commands .
9066	Flush incoming messages .
9067	Enable mode .
9068	Saves the template to disk .
9069	Load a scan from a file .
9070	Get information about the device .
9071	r Increment a file .
9072	Find the package json file .
9073	Parse package json file .
9074	Handle HTTP error .
9075	Validate the response .
9076	Generate a list of waveforms .
9077	Interpolate a deprecation vector .
9078	Gets the independent vector vector for the given waveform .
9079	Verify that the waveform is compatible .
9080	Loads the system manifest .
9081	Return a tuple of Python modules .
9082	Run the trace of the given module .
9083	Shortcut to shorten a URL .
9084	expand short url
9085	Get the url of a short URL .
9086	Get the statistics for a given filter .
9087	Get the statistics of the database .
9088	r Print a command .
9089	Execute a shell command .
9090	Log a message .
9091	Decorator for caching methods .
9092	Iterate over chunks .
9093	Decorator to yield chunks .
9094	Flatten an iterable .
9095	Dispatches a signal .
9096	Print a table from a table .
9097	Creates a dummy name .
9098	Convert a human readable string to a string .
9099	Command line interface .
9100	Run the trace function .
9101	Prints a list of all the dependencies in a file .
9102	Add a common common entry to the list .
9103	Creates a list of Python modules .
9104	Convert an operator to a string .
9105	Chunk noise .
9106	Splits data into chunks .
9107	r Write data to a file .
9108	Return the bounding form of the waveform .
9109	Build the units for the given indepoint .
9110	Create a new operation .
9111	Calculate the state of the current state .
9112	Validate that the minimum interval is valid .
9113	r Calculates the cosine of a waveform .
9114	r Calculates the acoshosh .
9115	r Return an array of arcs .
9116	r Compute the angle of a waveform .
9117	r Calculates the average variance of a waveform .
9118	r Calculates the derivative of a waveform .
9119	r Return the derivative of a waveform .
9120	r Fourier transform .
9121	r Calculate the Fourier transform .
9122	r Fourier transform .
9123	r Fourier transform .
9124	r Calculate the frequency of a wavefunction .
9125	r Fourier transform .
9126	r Calculate the Fourier transform .
9127	r Calculate the phase of a waveform .
9128	r Calculate the value of a waveform .
9129	r Integrate a waveform .
9130	r Calculates the group delay .
9131	r Return the log of a waveform .
9132	r Calculate the coverage of a waveform .
9133	r Calculate the integral of a waveform .
9134	r Return the maximum length of a waveform .
9135	r Returns the minimum length of a waveform .
9136	r Return the phase of a waveform .
9137	r Convert a waveform to a float .
9138	r Compute the square of a waveform .
9139	r Substitute a waveform .
9140	r Compute a waveform .
9141	r Convert a waveform to a float .
9142	r Convert a waveform into an integer .
9143	r Calculate the variable value of a variable .
9144	Finds the system with the given path .
9145	Get the short description of a long description .
9146	Build an expression .
9147	Return the next item in a delimiter .
9148	Return a list of functions for the given expression .
9149	Takes a list of strings and returns a list of tuples .
9150	Parse an expression .
9151	Remove duplicates from expression .
9152	Split text into a list of strings .
9153	Convert a number to an integer .
9154	r Removes a number from a string .
9155	r Converts a number to a string .
9156	r Parse a number of letters .
9157	r Calculate the fraction of a string .
9158	r Calculate the png from a string .
9159	r Calculates the power power power from a string .
9160	r Calculates the suffix of the given suffix .
9161	r Remove extra dimensions from an expression .
9162	Convert a number to a string .
9163	Convert a number to a number .
9164	Find the source of the source file .
9165	Returns True if the app is a default extension .
9166	Bundle bundle .
9167	Returns the trace of the given app .
9168	Determine if the dependency tree is a hash tree .
9169	Format hexadecimal string to hexadecimal
9170	Parse a docstring .
9171	Return a list of functions that are valid .
9172	Add an action to the given module .
9173	Split a line into a single line .
9174	Check if the context is initialized .
9175	Return the help text for a function .
9176	Find a function by its name .
9177	List all functions in the context .
9178	Check if a flag is a flag .
9179	Process arguments .
9180	Extract the value from a keyword argument .
9181	Invoke a function from a line .
9182	Invoke the given line .
9183	Invoke the given line .
9184	Parse a parameter .
9185	Parse a docstring .
9186	Classify section name .
9187	Convert a line into a single line .
9188	Join a list of paragraphs .
9189	Return a string representation of the document .
9190	Convert a value to a type .
9191	Convert binary data to binary .
9192	Returns the size of the given type .
9193	Format a value to a type .
9194	Validate the given type .
9195	Check if the given type is a known type .
9196	Split a type into a complex type .
9197	Instantiate a complex type .
9198	Get the type of the given type .
9199	Check if a given type is a valid format .
9200	Add a type to the specified type .
9201	Load a type from a module .
9202	Checks if the spec is valid .
9203	Add a parameter to this parameter .
9204	Sets the type of the type .
9205	Set the return value for this object .
9206	Attempt to match a short name .
9207	Return the type of the parameter .
9208	Return the signature of the signature .
9209	Formats the given value .
9210	Convert a positional argument to an argument .
9211	Check if a function is valid .
9212	Convert a value to a validator .
9213	Return a string representation of this class .
9214	Convert this object to a dictionary .
9215	Execute a function call .
9216	Parse validators .
9217	Find all the objects in a container .
9218	Get a context from a module .
9219	Get the help of a function .
9220	Decorator to register a parameter .
9221	Decorator to annotate a function .
9222	Decorator to register a type .
9223	Add a context to the context .
9224	Decorator to annotate a function .
9225	Decorator to annotate a function .
9226	Return a short description of a function .
9227	Loads a cron command .
9228	Install the registry .
9229	Prints all tasks .
9230	Remove a crontab .
9231	Create a new schema .
9232	Load project config file .
9233	Save project config .
9234	Defines a class with the given name .
9235	Gets the dependencies of this project .
9236	Decorator to add a function to the project .
9237	Initialize a project .
9238	Sets the value of the item .
9239	Sets the value of this object .
9240	Creates a new instance from an iterable .
9241	Set the value of the option .
9242	Set the values of a set of values .
9243	Apply a function to the given function .
9244	Decorator to collect arguments .
9245	Decorator to call the function .
9246	Apply a function to a function .
9247	View the current state .
9248	Convert a state to a list .
9249	Overrides a set of sets .
9250	Set the value of the state .
9251	Iterate over the given iterable .
9252	Return the kind of this object .
9253	Main entry point .
9254	Return the distance between two elements .
9255	Handles the game .
9256	Iterate over all robots .
9257	End the game .
9258	Move player to player .
9259	Play a game .
9260	Make a new mouse move .
9261	Returns the winner winning winner .
9262	Generate a list of possible positions .
9263	Process an item .
9264	Open the spider .
9265	Uploads the chunk to the queue .
9266	Create a file object from a JSON file .
9267	Get account state .
9268	Get asset state .
9269	Get a block by name .
9270	Get the block hash for the given block index .
9271	Get the total fee for the given block index .
9272	Get a contract state
9273	Get a raw raw transaction .
9274	Get the storage storage .
9275	Retrieves a transaction by its index .
9276	Invoke a script .
9277	Invoke a script .
9278	Invoke a script .
9279	Send a raw raw transaction .
9280	Validate a JSON string .
9281	Send a request to the server .
9282	Checks if a string is valid .
9283	Checks if a string is a hash .
9284	Encode a list of parameters .
9285	Decode the invocation stack .
9286	Decorator for creating a keyword argument .
9287	Apply a datetime to a datetime .
9288	Apply a datetime to a datetime .
9289	Save the rendered HTML to a file .
9290	Render the barcode .
9291	Calculate the checksum of the distribution .
9292	Render code .
9293	Connect to the server .
9294	Main entry point .
9295	Downloads a remote file .
9296	Uploads a remote file to local storage .
9297	Deletes the specified configuration files .
9298	Show the differences between the specified configuration file .
9299	Parse environment variable .
9300	Configure basic authentication .
9301	Set the API key .
9302	Get json content from folder .
9303	Get schema schema .
9304	Returns the schema for the given schema .
9305	Get the resolution of the schema .
9306	Validate the given object .
9307	Returns a list of valid examples .
9308	Returns a list of valid examples .
9309	Build an auth URL for the user .
9310	Process authorization code .
9311	Retrieve access token .
9312	Get the user id .
9313	Get a list of directories for a given folder .
9314	Create a directory .
9315	Add a comment .
9316	Convert object to unicode .
9317	Sets the dropdown target for this object .
9318	Handles drag operation .
9319	Sets the default window .
9320	Open the inspector .
9321	Open a shell .
9322	Makes sure the given font is a valid font .
9323	Load an HTML page .
9324	Get the value of a tag .
9325	Send an outgoing message .
9326	Display the help dialog .
9327	Called when a mouse event is clicked .
9328	Move the cursor to the selected position .
9329	Resizes the selection .
9330	Called when a cursor is pressed .
9331	Delete selected objects .
9332	Create a copy of the selection .
9333	Refresh the current image .
9334	Calculate the position of this widget .
9335	Gets the data for the given item .
9336	Sets the Widget data .
9337	Finds the data for the given data .
9338	Remove an item from the list .
9339	Remove all items from the list
9340	Remove all columns from the table .
9341	Sets the selected item .
9342	Get the string of the selected item .
9343	Associate the client s data .
9344	Appends an item to the list .
9345	Return a string representation of an object .
9346	Find an object by name .
9347	Create a new copy of this object .
9348	Add a child to the window .
9349	Replaces the parent with the parent .
9350	Draw background tiles .
9351	Draw the background .
9352	Draw the label .
9353	Find all modules in a directory .
9354	Return a list of column names for each column .
9355	Reset the grid .
9356	Update all values in the grid
9357	Updates the column attributes
9358	Sort data by column .
9359	Clears all rows .
9360	Create a combo box
9361	Sets the value of the editor .
9362	Update the current cell .
9363	Check if a key is pressed
9364	Sets the start of the editor .
9365	Decorator to register a type .
9366	Enable a menu .
9367	Check if the menu is enabled .
9368	Enable the top level .
9369	Check if the top level is enabled .
9370	Remove a menu .
9371	Submit a form .
9372	Set the object tag .
9373	visit an html table
9374	Returns the documentation for the given object .
9375	Makes a signature .
9376	Import a module by name .
9377	Add a role to an object .
9378	Show a popup dialog .
9379	Prompt the user to enter a prompt .
9380	Select a font dialog
9381	Select a color dialog .
9382	Choose a directory .
9383	Display a text dialog .
9384	Set the children of the item .
9385	Set icon icon .
9386	Show the window .
9387	Parse the given file .
9388	Save a resource to a file .
9389	Create a new window .
9390	Create a component from the given resource .
9391	Connect to the given component .
9392	Convert an attribute name to a Python object .
9393	Write data to clipboard .
9394	Finds the documentation for the given name .
9395	Loads an object into the tree .
9396	Inspect the given object
9397	Activate an item .
9398	Updates the tree .
9399	Show the context menu .
9400	Convert the given value to an image .
9401	Decorator to register an expression .
9402	Decorator to register a node .
9403	Assert the current path to the current path .
9404	Assert that the current path is not present .
9405	Check if path exists .
9406	Checks if the current path exists .
9407	Select the option .
9408	Apply a filter to the given value .
9409	Get a browser instance .
9410	Return the xpath of the expression .
9411	Return True if the filter matches the filter .
9412	Switch frame to current frame .
9413	Accept an alert .
9414	Accepts a confirmation .
9415	Displays a confirmation .
9416	Accept a prompt .
9417	Displays a prompt .
9418	Save the page to a file .
9419	Save the screenshot .
9420	Raise exception if server fails .
9421	Return True if value matches the given value .
9422	Check if a field is checked .
9423	Checks if the field is a valid field .
9424	Checks if a field is a valid field .
9425	Checks if a field is a valid field .
9426	Assert that text matches the given text .
9427	Assert that text matches the given text .
9428	Assert that title matches the given title .
9429	Assert that the title matches the given title .
9430	Checks if the given title exists .
9431	Checks if the given title exists .
9432	Find all objects matching the given query .
9433	Find the first matching element .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator to register a property .
9438	Decorator to register a function .
9439	Check if an error occurs .
9440	Calculate the count of the count .
9441	Checks if the given size is available .
9442	Checks if the given options matches the given options .
9443	Return the failure message .
9444	Checks if the given number matches the given options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Return a regular expression .
9448	Checks if the given session is valid .
9449	Resize the window to the window .
9450	Start the server .
9451	Decorator to set the value of a property .
9452	Creates a new class method .
9453	Separate class method .
9454	Return the traceback of the traceback .
9455	Return a string representation of an object .
9456	Gets the logger for the given instance .
9457	Sets the logger .
9458	Call the API method .
9459	List all channels .
9460	List all users .
9461	Create a message .
9462	Translate a message to Slack .
9463	Send a Slack message .
9464	Reads a channel .
9465	Run Slack API .
9466	Run Slackware .
9467	Return the difference between two dictionaries .
9468	Colorize a message .
9469	Called when a task starts .
9470	Print the status of the task .
9471	Print the stats from the stats .
9472	Prints the status of a task .
9473	Convert a prefix to a prefix .
9474	Decorator to check if the value is empty .
9475	Add a model .
9476	Returns a dictionary containing the elements of the element .
9477	Load data from a dictionary .
9478	Convert a dict to a dictionary .
9479	Parse the configuration .
9480	Parse the state of the device .
9481	Translate configuration into a string .
9482	Load all filters
9483	Find the mapping file for a given path .
9484	Convert a model to a dictionary .
9485	Return the difference between two files .
9486	HTTP POST request .
9487	Returns the URL for the authorization code .
9488	Get a token from the API .
9489	Parse query parameters .
9490	Parse a URL .
9491	Build a URL from a base URL .
9492	Handle exceptions .
9493	Create a Response object .
9494	Create a redirect response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get a token from the client .
9499	Get the authorization code for a given URI .
9500	Get token from POST request .
9501	Get the authorization token .
9502	Open a USB device .
9503	Read bytes from the device .
9504	Read bytes from the device .
9505	Read data from device .
9506	Write bytes to the device .
9507	Write data to the device .
9508	Write data to the device .
9509	Return the CDN URL for the CDN .
9510	Create a copy of this object .
9511	Create a copy of a local file .
9512	Create a copy of a remote file .
9513	Construct a file from a file .
9514	Upload a file .
9515	Upload a URL from a URL .
9516	Upload a URL to a given URL .
9517	Return a list of file URLs .
9518	Construct a group from a group .
9519	Create a new group .
9520	Perform a request .
9521	Yields a sequence of sequences .
9522	List the items in a list .
9523	Generate a bar .
9524	Perform a POST request .
9525	Get the current home mode .
9526	List cameras .
9527	Get information about a camera .
9528	Get a snapshot of the camera .
9529	Disable a camera .
9530	Retrieve a camera event .
9531	Save a camera event .
9532	Update camera settings .
9533	Returns True if the last item is the last item
9534	Get a list of nodes from a list .
9535	Get the value of the lvl .
9536	Retrieves the VMS merge merge .
9537	Get the grid span span .
9538	Returns the first cell at the given index .
9539	Returns True if style is False otherwise False .
9540	Return True if the text is bold .
9541	Determine if a string is an italic style .
9542	Determine whether a line is a line .
9543	Return True if the title is a title
9544	Get text content of text .
9545	Get the relationship info for a tree .
9546	Get the document data from a file .
9547	Returns the ordered list of the ordered list type .
9548	Build a list of items from a list of lists .
9549	Build a tracer for the given row .
9550	Build a table from a table .
9551	Get the content of a tag .
9552	Remove tag from tag .
9553	Find a dataset by url .
9554	Load mappings from numpy array .
9555	Load a CIFAR file .
9556	Plot a list of images .
9557	Plot weights of weights .
9558	Plot the filters .
9559	Create a batch of arrays .
9560	Encode the given text .
9561	Generate batch batches .
9562	Generate a sequence of sequences .
9563	Add a random weight matrix .
9564	Encodes the given data .
9565	Decode the given layer .
9566	Find the output of the layer .
9567	Compute the accuracy of the model .
9568	Return the predicted value .
9569	Predicts the probability of the model .
9570	Predict log - likelihood .
9571	Compute the score of the data .
9572	Batch batch .
9573	Batch batches .
9574	Load network .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Yields a list of outputs .
9578	Return a list of params matching patterns .
9579	Create a new graph from a graph .
9580	Return a list of variables .
9581	Calculate the accuracy of the output .
9582	Scan input outputs .
9583	Build an activation layer .
9584	Generate a random numpy array .
9585	Set the loss .
9586	Creates a dataset .
9587	Train the model .
9588	Generate the hash of the layer .
9589	Builds the graph graph .
9590	Return a list of inputs .
9591	Return a list of variables .
9592	Find a layer by name .
9593	Compute the forward forward function .
9594	Predict the model .
9595	Compute the score .
9596	Save model to file .
9597	Load a model from a file .
9598	Compute the loss of the model .
9599	Build the graph of the graph .
9600	Return the output size of the layer .
9601	Convert inputs to outputs .
9602	Bind the graph to the graph .
9603	Resolve inputs to the layer .
9604	Resolve the output shape of the layer .
9605	Logs the layer .
9606	Log the parameters of the parameter .
9607	Convert string to string format .
9608	Resolve the shape of the layer .
9609	Find a parameter by key .
9610	Add a bias vector .
9611	Convert the model to a dictionary .
9612	Calculate the log - likelihood of the model .
9613	Compute the log - likelihood of the image .
9614	Add a tier .
9615	Remove a tier .
9616	Get a tier by name .
9617	Convert this object to an EAF file .
9618	Add a point to the list .
9619	Add an interval to this interval .
9620	Remove an interval from the interval .
9621	Removes the given time .
9622	Iterate over all intervals .
9623	Returns a list of all the intervals in the tier .
9624	Indent the given element .
9625	Add an annotation to the table .
9626	Add a new CVV entry .
9627	Add a description description to the vocabulary .
9628	Add an external reference to the external reference .
9629	Add a language .
9630	Add a lexicon reference to the lexicon .
9631	Add a linguistic type to the language .
9632	Add a link to a file .
9633	Add a new locale .
9634	Add a link to the linked file .
9635	Add a tier .
9636	Clean up time slots .
9637	Extracts the intervals from the given range .
9638	Generate an annotation id .
9639	Generate the timestamp for the given time .
9640	Returns a list of child tiers for a given ID .
9641	Get the full time interval .
9642	Returns a list of references for the given time .
9643	Returns a list of references for the given time .
9644	Returns a list of tuples for the given type .
9645	Merge a list of tuples .
9646	Remove all annotations from the given tier .
9647	Removes a CV description from the current language .
9648	Remove a license .
9649	Removes all links from the media .
9650	Remove a property from this object .
9651	Remove a reference from the given id .
9652	Removes all linked files from this list .
9653	Remove a tier .
9654	Remove all tiers from a list .
9655	Rename a tier .
9656	Shift the number of annotations to the given time .
9657	Main entry point .
9658	Print debug information .
9659	Get the base level of the given text .
9660	Get embedding levels .
9661	Determine the implicit embedding .
9662	Calculate the level of all levels .
9663	Recursively resolve all possible types .
9664	Given a list of strings return a list of strings that can be used to resolve them .
9665	Reverse a sequence of characters .
9666	Recursively reorder all possible levels .
9667	Process a file .
9668	Convert a list of lines into a list .
9669	Add a value to the object .
9670	%prog cli
9671	Ensure that the binding is compatible .
9672	Show a GUI .
9673	Discover the gui
9674	Deletes the host .
9675	Add a file menu .
9676	Ensure that the selected selection is selected .
9677	Return the current time .
9678	Display the GUI .
9679	Setup the types of all types .
9680	Return the cumulative data of the data .
9681	Get a list of values for each axis .
9682	Draw a constant line .
9683	Load the parameters from the graph .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to data .
9687	Creates a list of filters .
9688	Add data to conf
9689	Draw the graph .
9690	Calculate the left border of the chart .
9691	Calculate the right border .
9692	Calculate the margin .
9693	Add a popup to the popup .
9694	Calculate the bottom of the bottom border .
9695	Draw the graph .
9696	Create a new data point .
9697	Draws the x labels of the xlabel .
9698	Draws the y - y labels of the y axis .
9699	Draws the horizontal guidelines for the given label .
9700	Draw the y - axis of the y - axis .
9701	Draw the title of the graph
9702	Render CSS styles .
9703	Create an SVG document .
9704	Returns a list of stylesheet objects for this instance .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server
9708	Send a message .
9709	Dispatch patterns .
9710	Create a new nick .
9711	Handle ping ping .
9712	Handle the server .
9713	Enter the event loop .
9714	Register a new node .
9715	Run a task .
9716	Decorator to require a boss .
9717	Return a list of commands .
9718	Register a message .
9719	Execute a command .
9720	Add a new nick .
9721	Sends an email to the user .
9722	Sets the password reset .
9723	Validate password strength .
9724	Verify that the user is valid .
9725	Delete a user .
9726	Checks if the request is allowed .
9727	Return an instance of this pool .
9728	Return an instance of the client .
9729	Get the TLS client .
9730	Return the service name .
9731	Wrapper around docker method .
9732	Execute a Docker container .
9733	Poll the Docker service .
9734	Stop docker service .
9735	Filter the queryset .
9736	Updates the password .
9737	Update the password .
9738	Validate the email address .
9739	Create a new user .
9740	Delete a token .
9741	Initialize the email confirmation .
9742	Perform a POST request .
9743	Update the expiration time .
9744	Context manager for password reset
9745	Send an email to an email .
9746	Sets the password for a notification .
9747	Sets the email handler for validation .
9748	Authenticate a request .
9749	Authenticate the given key .
9750	Show notebook content .
9751	Processes a list of widgets and updates them .
9752	Generate a custom custom javascript callback for a change .
9753	Returns the widget with the given name .
9754	Render an object .
9755	Create a text widget .
9756	Return a list of named objects .
9757	Get the owner of a method .
9758	Assign the auth credentials to the user .
9759	Ping the server .
9760	Get information about the server .
9761	Get the health of the cluster .
9762	Convert a number of bytes to a readable number .
9763	Calculate the total total load of the system .
9764	Return the size of the memory
9765	Get information about the current network .
9766	Return a list of all volumes .
9767	Get a volume by id
9768	Return the size of a volume
9769	Return the percentage of the volume .
9770	Calculate the volume of a volume .
9771	Return the maximum volume of a volume .
9772	Get the disk by id
9773	Login to the server .
9774	Perform a GET request .
9775	Execute a GET request .
9776	Update the entry .
9777	Get the system information .
9778	Get the storage storage .
9779	Constructs a context from a request .
9780	Get tenant token .
9781	Build the attributes of the widget .
9782	Set a set of apps .
9783	Remove apps from apps
9784	Return a dictionary of global settings .
9785	Perform a GET request .
9786	Get the value of a key .
9787	Change the value of the config file .
9788	Migrate the config file
9789	Start webserver .
9790	Waits for the server .
9791	Get the access token for the user .
9792	Check if the token is present .
9793	Refresh the access token .
9794	Refresh access token .
9795	Create a manifest .
9796	Split a path into a full path .
9797	Return True if the given bucket exists .
9798	Extract the run id from a file .
9799	Clean up a dictionary .
9800	Add a manifest to a manifest .
9801	Checks if a manifest is a manifest .
9802	Extract the schema from a schema URI .
9803	Fix the schema .
9804	Parse a list of contexts .
9805	Parse an unstructured event .
9806	Transform a line to a JSON string .
9807	Convert an event to JSON .
9808	Get the name of a template .
9809	Print the context of the context .
9810	Print a list of variables .
9811	Formats the given sqlite html .
9812	Return a string representation of the Django context .
9813	Format a dictionary of dictionaries .
9814	Styles the given text .
9815	Format an object as a string .
9816	Print a pretty printable object .
9817	Get a token from a string .
9818	Return a list of tokens from a string .
9819	Convert a latex text into a latex text .
9820	Sets the output of the tex_dir .
9821	Read the input file .
9822	Convert latex to latex .
9823	r Converts a string to a unicode string .
9824	Convert a string to unicode .
9825	Get information about the organization .
9826	Get a list of boards .
9827	Returns a list of member members .
9828	Update the organization .
9829	Remove a member .
9830	Add a member to a member .
9831	Add a member .
9832	Retrieves the list of information about the server .
9833	Create a new card .
9834	Get information about the label .
9835	Fetches a list of items .
9836	Update a label .
9837	Update a label .
9838	Get the authorization URL .
9839	Get the card information .
9840	Get a board .
9841	Retrieves a list of all the items from the API .
9842	Gets the list of checks for the given list .
9843	Add a comment .
9844	Adds an attachment to a file .
9845	Add a checklist .
9846	Add a label to the database .
9847	Add a label to the database .
9848	Add a member .
9849	Gets the members of the member .
9850	Gets the list of cards .
9851	Get a list of organizations .
9852	Create a new board .
9853	Decorator to register a method .
9854	Get the board information .
9855	Returns a list of lists of lists of lists .
9856	Returns a list of all the labels .
9857	Get a single card .
9858	Returns a list of all the checks for this server .
9859	Get an organization .
9860	Update a board .
9861	Add a list of lists .
9862	Create a new label .
9863	Fetches information about the checklist .
9864	Get the card .
9865	Returns a list of ItemList objects .
9866	Update a checklist .
9867	Add a new item .
9868	Remove an item from the server .
9869	Update a checklist .
9870	Update a checklist .
9871	Add authorization parameters to the API .
9872	Check for errors and raise an error .
9873	Build a URL for the given path .
9874	Fetch the JSON data from the server .
9875	Create an organization .
9876	Create a new board .
9877	Create a new label .
9878	Create a new list .
9879	Create a new Card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organization .
9883	Get a board .
9884	Retrieves a list of objects .
9885	Get a card .
9886	Get a list of checks .
9887	Get a member .
9888	Extract domain from URL .
9889	Convert text to plain text .
9890	Convert text to raw text .
9891	Convert text to raw text .
9892	Set the password for a service .
9893	Split text into text .
9894	Mark the text as a regex .
9895	Mark the beginning of the end of the given text .
9896	Main entry point .
9897	Creates a Cipher object .
9898	Get the mode of the cipher .
9899	Return the priority of the encryption key .
9900	Checks if the configuration is valid .
9901	Publish a message .
9902	Make a unique identifier .
9903	Connect to the server .
9904	Handle CONNECT packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode an unsigned integer value .
9908	Encodes a value to a string .
9909	Decode the length of a string .
9910	Encodes the header .
9911	Encodes the message .
9912	Decode a packet .
9913	Encodes the response .
9914	Decode a packet .
9915	Decode a packet .
9916	Encodes the message .
9917	Encodes the message .
9918	Decode a packet .
9919	Encodes the message .
9920	Encodes the payload .
9921	Decode packet .
9922	Decode a packet .
9923	Get the URL for the API .
9924	Perform a GET request .
9925	Refresh all blocks .
9926	Formats the data from the data .
9927	Fit data to the model .
9928	Fit the kmeans .
9929	Fit the mean shift of data .
9930	Fit the model .
9931	Predict clusters from data .
9932	Map clusters to clusters .
9933	Sort clusters by clustering .
9934	Convert datetime to datetime object .
9935	Calculate total number of points .
9936	Calculate the total time of a time series .
9937	Parses a unit .
9938	Pretty print an element .
9939	Analyze a string and return it .
9940	Extracts the name of the mass name from a string .
9941	Collapse data into a directory .
9942	Convert a boolean array to a numpy array .
9943	Convert a list of tuples .
9944	Compute the smoothing of a window .
9945	Compute the gradients of a window .
9946	Finds the minimum value of x .
9947	Calculate the mean shift of data .
9948	Calculate the kmeans .
9949	Cluster Dataset .
9950	Returns a list of all the names in the given file .
9951	Read the configuration from the config file .
9952	Read latools config file .
9953	Prints the list of all available tools .
9954	Copy the RSM table to a file .
9955	Create a config file .
9956	Change the default configuration .
9957	Removes a filter from a filtered list .
9958	Return a subset of filenames .
9959	Calculate the density of the data .
9960	Plot the autoscale plot .
9961	Creates a new set of time intervals .
9962	Return the ratio of the data .
9963	Calculate calibration data .
9964	Sample stats .
9965	Calculate the abundance of this time .
9966	Filter the threshold for a given threshold .
9967	Filter the gradients with the given threshold .
9968	Calculate correlation coefficient .
9969	Filter the correlation filter .
9970	Add a filter to the filter
9971	Get the parameters of the filter .
9972	Plot histogram of data .
9973	Calculate summary statistics .
9974	Load the reference data from a file .
9975	Find the type of the given type .
9976	Return a list of elements in a list of elements .
9977	Calculate the mass of a molecule .
9978	Generate a list of keywords .
9979	Ensure that the predicate is a predicate .
9980	Reduce the stack into a tuple .
9981	Calculate the Gaussian distribution of the Gaussian distribution .
9982	Compute Gaussian Gaussian Gaussian Gauss .
9983	Calculate standard deviation .
9984	Returns a list of samples for the given subset .
9985	Plots the density of the data .
9986	Calculate the weight of the background .
9987	Calculate the background of the background .
9988	Subtracts the background data .
9989	Calculate ratio .
9990	Creates a new subset of samples .
9991	Filter the thresholds based on the thresholds .
9992	Fit a classifier to the model .
9993	Applies a classifier to the model .
9994	Filter the correlation between samples .
9995	Filter the filtered data .
9996	Filter the filtered data .
9997	Return a string representation of this sample .
9998	Add a filter to the filter .
9999	Filter the number of samples in the dataset .
10000	Calculate the gradient of the gradient .
10001	Calculate the gradient of the gradient .
10002	Plots the histogram of the analysis .
10003	Plot the traces of the analysis .
10004	Generates the gradient plot of the model .
10005	Filters the given analyzers .
10006	Sample stats .
10007	Get statistics for each sample .
10008	Export the data to the report .
10009	Export the traces to the analysis .
10010	Save the log file .
10011	Write the data to the file .
10012	Read a file from a file .
10013	Apply a function to a map .
10014	Plots the plot of the plot .
10015	Calculate the variance of a Gaussian distribution .
10016	Calculate the median of a set of samples .
10017	Determine noise noise .
10018	Calculate expay decay .
10019	Add a new filenames .
10020	Removes the given name from the list .
10021	Clears the configuration .
10022	Remove all the components of this component .
10023	Determine whether the filter matches the filter .
10024	Convert a key into a Python object .
10025	Return the filter for the given filter .
10026	Get information about the component
10027	Log a function .
10028	Write log file .
10029	Read a log file .
10030	Decorator to authenticate a function .
10031	Get information about a modem .
10032	Send a message .
10033	Parse a SQL string .
10034	Return the URL for the given URL .
10035	Return the thumbnail of the thumbnail .
10036	Generate code for code .
10037	Return the code of the code .
10038	Return the URL for this object .
10039	Get the output file name .
10040	Process notebook .
10041	Create pybython notebook
10042	Download data from file .
10043	Create thumbnail .
10044	Get description of the description .
10045	Scale the image to the image .
10046	Save the thumbnail to the image .
10047	Copy the thumbnail image .
10048	Get the URL for the given file .
10049	Return a generator that yields all languages in the database .
10050	Return default value for the field .
10051	Process a thumbnail file .
10052	Save image to file .
10053	Refresh the thumbnail .
10054	Returns a list of all the thumbnail objects .
10055	Create a thumbnail .
10056	Delete the image .
10057	Create a new thumbnail .
10058	Retrieve a thumbnail of a given source .
10059	Delete a thumbnail .
10060	Receive a message .
10061	Subscribe to the given number .
10062	Return the state of the state .
10063	Register a provider .
10064	Send a message to the client .
10065	Create a blueprint blueprint .
10066	Return a list of all registered providers .
10067	Receive a message .
10068	Receive status .
10069	Decorator for JSON API .
10070	Forward an object .
10071	Sign a signed transaction .
10072	Estimate the gas gas for a given address .
10073	Estimate the gas gas gas gas gas .
10074	Write bytes to the stream .
10075	Read a line from the device .
10076	Send a message to the server .
10077	Return a string representation of this message .
10078	Return True if the message is a valid header .
10079	Attach an attachment to this object .
10080	Register a new service .
10081	Create a Config object from a module .
10082	Register a new resource .
10083	Return the value of a key .
10084	Raises an exception if the value is not an exception .
10085	Setup the data .
10086	Calculate the mean of a wavelength .
10087	Calculate the Jacobian equation .
10088	Initialize the backend .
10089	Login to the backend .
10090	Returns a list of domains
10091	Get all pages in the backend .
10092	Patch an object .
10093	Delete an endpoint .
10094	Return True if path is a file volume .
10095	Create a junction file .
10096	Initialize logging .
10097	Raise an error message .
10098	Claims the contents of a file .
10099	Return a new column header for each column .
10100	Parses a VCF file .
10101	Initialize population stats from VCF .
10102	Parses the VCF and returns a list of VCFs .
10103	Split data into lines .
10104	Return the prefix of a line .
10105	Extracts the line terminator from a string .
10106	Read next line from file .
10107	Find the previous previous line .
10108	Return a list of lines .
10109	Return a list of lines .
10110	Return the next line of the file .
10111	Parses a list of VCF files .
10112	Parse a VCF record .
10113	Return a list of tag values for each sample .
10114	Format a VCF record .
10115	Join the info dictionary .
10116	Formats the field of the sample .
10117	Return the field field for the sample .
10118	Return the string representation of this VCF record .
10119	Add a new sample tag .
10120	Add a new filter .
10121	List available categories .
10122	Constructs a ProductFormForm .
10123	Creates a staff product form .
10124	Add an error .
10125	Decorator for memoize function .
10126	Creates a model for the given model .
10127	Retrieves the items of the cart .
10128	Send an email .
10129	Iterate over all OSM streams .
10130	Parse an OMM file .
10131	Iterate over OpenMMs .
10132	Returns True if the user has a condition .
10133	Returns True if user matches the filter
10134	Calculate the quantity of the user .
10135	Filter a list of products .
10136	Returns a queryset for the given user .
10137	Perform a filter on the user .
10138	Perform a filter on the user .
10139	Filter the conditions for a user .
10140	Decorator to modify a function .
10141	Creates a new customer .
10142	Extend reservation duration .
10143	Apply a voucher .
10144	Validate the cartesian product .
10145	Fix invalid errors .
10146	Recursively recalculate discount discounts .
10147	Add discounts to the product .
10148	Create a report view .
10149	Yields a list of rows .
10150	Returns the form of the form .
10151	Render data .
10152	List all reports .
10153	Returns a list of items for the given invoice .
10154	Return a summary of the sales account .
10155	Retrieve a list of payments .
10156	Retrieve credit notes .
10157	List product status .
10158	List discount items .
10159	List product items .
10160	Returns a list of invoice prices for the given invoice .
10161	Creates a credit note
10162	Returns a queryset .
10163	List attendees .
10164	Returns a list of user registrations .
10165	Pass through to provider inventory .
10166	Return the missing categories for the given context .
10167	Return the credit note for the given context .
10168	Determine if the user has expired .
10169	Gets the registration for the given customer .
10170	Edit a profile .
10171	Handle a profile .
10172	Retrieve a product category .
10173	Handle products for a given category .
10174	Handle a voucher .
10175	Called when a user is clicked .
10176	Access an invoice .
10177	Render an invoice .
10178	Render a manual payment .
10179	Refunds the invoice .
10180	Applies a credit note .
10181	Modifies the registration .
10182	Extend a reservation .
10183	Send email mail to email
10184	Render badges .
10185	Render a badge .
10186	Return a list of available discounts .
10187	Return a queryset with the given conditions .
10188	List all available products .
10189	Applies the credit to the invoice .
10190	Calculates the cancellation of this invoice .
10191	Generate a random access token .
10192	Evaluate a function .
10193	Get object from given name .
10194	Creates a new invoice .
10195	Creates a new invoice .
10196	Generate a cartesian product .
10197	Applies credit notes to the given invoice .
10198	Checks if the user is visible .
10199	Refresh the invoice .
10200	Validate that this invoice is valid .
10201	Updates the payment .
10202	Mark the invoice .
10203	Checks if the invoice is valid .
10204	Update the validity of the invoice .
10205	Validate invoice .
10206	Refunds this invoice .
10207	Send an email .
10208	Update the annotation .
10209	Convert a schema into a flat dictionary .
10210	Print out download files .
10211	Download a field from the output file .
10212	Get project data .
10213	Retrieves a list of processors .
10214	Print processor inputs .
10215	Reverse a string .
10216	Uploads a processor to the processor .
10217	Upload a file to a file .
10218	Download data from a given field .
10219	Return a list of subclasses .
10220	Get the repository for the current project .
10221	Get a list of variants for a given variant .
10222	Generate a list of variants for each variant .
10223	Search the coordinates of a coordinate query .
10224	Return a list of variants that match the given query .
10225	Update the cache .
10226	Uniq a sequence of sequences .
10227	Authenticate the API .
10228	Return a list of selected items .
10229	Get the saved data for the given issue .
10230	Move the given issue data to the database .
10231	Get the saved task data
10232	Retrieve a single task .
10233	Save the current version to disk .
10234	Apply a value to the data .
10235	Decorator for transport function .
10236	Flush a queue .
10237	Create a task .
10238	Formats a list of task numbers .
10239	Create a new task .
10240	Return a list of data types for this project .
10241	Log a log message .
10242	Initialize the serial port .
10243	Sets the polling values for the polling function .
10244	Combine the VCF header .
10245	Render the readings in the database .
10246	Sets the context of the request .
10247	Calculate the number of points for a given point .
10248	Set the maximum period of a given period .
10249	Set the user password .
10250	Unpack the given data .
10251	Convert raw data into a dictionary .
10252	Render a serialized JSON string .
10253	Calculate the CRC of a meter .
10254	Split a date into a datetime object .
10255	Returns the number of months for the current month .
10256	Set the CTR ratio .
10257	Assign a schedule .
10258	Assign a season to a given season .
10259	Sets the series of season schedules .
10260	Assigns a holiday to a holiday .
10261	Reads the scheduler .
10262	Extract a schedule from a schedule .
10263	Reads a month .
10264	Extract the month from a month .
10265	Reads holidays from the scheduler .
10266	Extracts the holiday date from the given holiday .
10267	Reads the settings .
10268	Write a command to the server .
10269	Send a password to the device .
10270	Updates the observer observers .
10271	Initialize LCD lookup .
10272	Perform a request .
10273	Perform a request .
10274	Perform a request .
10275	Make sure that we need to be used .
10276	Calculate the field factors .
10277	Set the lcd command .
10278	Sets the delay .
10279	Serialize the serial port .
10280	Set the pulse ratio of the input .
10281	Sets the password for this device .
10282	Set the LCDD value .
10283	Iterate over fields .
10284	Iterate over schema fields .
10285	Return a list of paragraphs .
10286	Generate a random string .
10287	Returns a summary of the statistics .
10288	Return a string representation of the given text .
10289	Show a text message .
10290	Return a summary of the results .
10291	Parse arguments .
10292	Initialize the results .
10293	Run the test .
10294	Run the given config file .
10295	Transform a description of a node .
10296	Iterate over a description of a node .
10297	Transform a function to a function .
10298	Takes an example of the given body and returns it .
10299	Return a list of arguments .
10300	Register a path to a file .
10301	Convert source code to code .
10302	Apply arguments to a parser .
10303	Load a file by name .
10304	Load a source from a path .
10305	Iterate over all files in a directory .
10306	Checks that the given location is valid .
10307	Return a list of messages from the receiver .
10308	Add a command to a file .
10309	Remove a configuration file .
10310	Restart a message .
10311	Call the function and return the results .
10312	Get a process monitor .
10313	Create a service .
10314	Refresh a session .
10315	Remove expired nodes .
10316	Remove a node .
10317	Get the last update of the node
10318	Get all nodes in the cluster
10319	Refresh the session .
10320	Increment times in seconds .
10321	Deletes a node .
10322	Return a list of tuples separated by delimiter .
10323	Check if the given path is a directory .
10324	Merge the current status .
10325	Checks if the given value exists .
10326	Query the value of the given value .
10327	Decorator for constants .
10328	Splits a function into an iterable .
10329	Convert a function to a function .
10330	Run a process .
10331	Create a new service .
10332	Parse a parser .
10333	Creates a parser for a given literal .
10334	Parse a parser .
10335	Create a new RepeationParser instance .
10336	Creates a Repeated RepeatedRepeatedRepeated RepeatedRepeated string .
10337	Create a new Repeated repetition .
10338	Parses a regular expression .
10339	Check the state of the given location .
10340	Close the state .
10341	Check if the state is valid .
10342	Add a heart .
10343	Add a master to the master .
10344	Deletes a checkpoint from a checkpoint .
10345	Freeze a checkpoint file .
10346	Save the graph to the graph .
10347	Save a graph to a file .
10348	Save weights from a checkpoint .
10349	Restore a checkpoint from a checkpoint .
10350	Parse a token .
10351	Render a tag .
10352	Validate arguments .
10353	Get context data .
10354	Parse a template .
10355	Get the context data for the given context .
10356	Convert caffe model to tensorflow .
10357	Sets up the tensorflow model .
10358	Save the graph to the graph .
10359	Generate rows from a sequence .
10360	Return a list of strings .
10361	Yields elements from iterable .
10362	Remove duplicate duplicates .
10363	Return the next item from iterable .
10364	Return a generator that yields an iterable .
10365	Partition a list of bins .
10366	Convert an item to an iterable .
10367	Ignore exceptions .
10368	Return duplicate duplicates .
10369	Evaluate an iterable .
10370	Swap an item in the partition .
10371	Split a key into a dictionary .
10372	Get all queues in the queue .
10373	Reset the iterator .
10374	Parse a variable .
10375	Create a template tag .
10376	Return a public public key .
10377	Return a list of SQLAlchemy tables .
10378	Iterate over objects .
10379	Select a selector by selector .
10380	Parse a selector .
10381	Produce a list of validators .
10382	Return a list of parents of the given leafs .
10383	Return a list of ancestors of the given leafs .
10384	Return a list of siblings of the given leafs .
10385	Parse a child node .
10386	Return a list of nodes matching the given object .
10387	Ping a TCP port .
10388	Perform a GET request .
10389	Delete the cache .
10390	Set the value of a key .
10391	Get a tuple from the store .
10392	Returns True if the given key is present .
10393	Check if the given timestamp is valid .
10394	Converts a JSON string from a JSON string .
10395	Deserialize an XML string .
10396	Return the content of the response .
10397	Read a file from the log file .
10398	Return a list of rows .
10399	Validate a token .
10400	Creates the engine .
10401	Validate that a token is valid .
10402	Create a new token .
10403	Calculate the counter between two numbers .
10404	Calculate the counter between two points .
10405	Calculate the average duration .
10406	Setup output outputs .
10407	Setup the sources
10408	Send an event to the queue .
10409	Starts the watch watcher .
10410	Parse format string .
10411	Parse a line .
10412	Validate that the field is valid .
10413	Validate a request .
10414	Verify access token .
10415	Return the device name .
10416	Warning if node is not a node .
10417	Connect to the request .
10418	Create a secret link .
10419	Send an access request .
10420	Send confirmation notification .
10421	Send an email verification request .
10422	Send a request to an access request .
10423	Send a message to a notification .
10424	Create an object .
10425	Validate a token
10426	Revoke the link .
10427	Create a new request .
10428	Get a single user by its id .
10429	Confirm email .
10430	Accepts a request .
10431	Sends a request .
10432	Create a secret link .
10433	Generate a hash for a given version .
10434	Verify that a message is valid .
10435	Checks if the given record is allowed .
10436	Create an access request .
10437	Confirm a user s confirmation .
10438	Get the SSH client .
10439	Sort the selected column .
10440	Return the selected element .
10441	Return a list of items .
10442	Get the version of the file .
10443	Set the version of the file .
10444	Initialize the SSH configuration .
10445	Start timer .
10446	Called when the client is running .
10447	Delete a secret .
10448	Create a new connection
10449	Stop the connection .
10450	Empty queue events .
10451	Called when the event is received .
10452	Create a client .
10453	Create an Elasticsearch client
10454	Encode an event .
10455	Encode a message .
10456	Decode a message from a string .
10457	Send multiple events .
10458	Generate a file .
10459	Retrieve a file preview .
10460	Send a message to the server .
10461	Run the message loop .
10462	Logs the time of the simulation .
10463	Respond to the server .
10464	Abort the SASL session .
10465	Prepare a sequence of strings .
10466	Return the admin footer .
10467	Build a payment parameter .
10468	Build the payment parameters .
10469	Payment an alias .
10470	Get the version of the version .
10471	Initializes the GUI .
10472	Decorator for creating the filesystem .
10473	Configure shortcuts .
10474	Activate a file
10475	Sets the selected item .
10476	Sets the location of the widget .
10477	Finalize the options .
10478	Runs the given resource .
10479	Run a clean command .
10480	Fetch all children .
10481	Refresh all children of this node .
10482	Return the icon for the given index .
10483	Run a subprocess .
10484	Get the maxfd of the resource .
10485	Close a file descriptor .
10486	Close openfd file .
10487	Redirect to target stream .
10488	Set widgets for a form .
10489	Import a module from the app .
10490	Import project modules .
10491	Return a fully - qualified expression .
10492	Get the URL for the given object .
10493	Get the URL for the given object .
10494	Check if a file path is valid .
10495	Checks if a URL is valid .
10496	Return the absolute path for the given filename .
10497	List all objects in the bucket .
10498	Build the workflows for the workflow .
10499	Execute the request .
10500	Move the project to the project .
10501	Create a directory .
10502	List the contents of the archive .
10503	Restore project .
10504	Create a new ApiClient instance .
10505	List all files in the storage folder .
10506	Download file .
10507	Check if a path exists .
10508	Gets the parent of the given path .
10509	Create a directory .
10510	Upload a file to the local storage .
10511	Delete a folder .
10512	Validate a storage path .
10513	Create a new StorageClient .
10514	Create a new StorageInstance
10515	Get the details of an entity .
10516	Set metadata .
10517	Get metadata for a given entity .
10518	Update metadata .
10519	Delete metadata for a given entity .
10520	List projects .
10521	Get details about a project .
10522	Create a project .
10523	Delete a project .
10524	Create a new folder .
10525	Get the details of a folder .
10526	Delete a folder .
10527	Upload the content of a file .
10528	Copy the content of a file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Serialize a record .
10532	Return a copy of the service .
10533	Set the headers of the request .
10534	Return a copy of this object .
10535	Add a new exception to this instance .
10536	Returns a list of the list of all available fields .
10537	Add a function to the map .
10538	%prog gcfvcf file
10539	Run the autocorator .
10540	Sort the list .
10541	Return a list of datetime objects .
10542	Load data from folder .
10543	Add a new Tuple to the list .
10544	Calculate the sum of the data .
10545	Return a rxcom client .
10546	Create a new user .
10547	Parse a list of vns results .
10548	Parse release results .
10549	Parse a list of producers .
10550	Parse a list of characters .
10551	Parse a list of tags .
10552	Parse a list of users .
10553	Add files to tarball .
10554	Iterate over all files in a directory .
10555	Copy a file to a file .
10556	Creates a list of parameters from the master .
10557	Return a list of docker image parameters for this instance .
10558	Refresh metadata .
10559	Run mutate mutate mutate .
10560	Create a new metadata .
10561	Return a list of streams .
10562	Export device data .
10563	Search for VNDB .
10564	Parse search results .
10565	Add a stream to the database .
10566	Reset the API .
10567	Return a list of users .
10568	Create a BHA index file .
10569	Connect to the server .
10570	Add a stream to the database .
10571	Add a new stream to the database .
10572	Insert a value into the cache .
10573	Sync the cache to the database
10574	Start the sync process .
10575	Stop the synchronously .
10576	Download a job from a URL .
10577	Uploads a file to S3 .
10578	Print labels .
10579	Print an ontology tree .
10580	Get the mean size of the sample
10581	Get the Docker container id .
10582	Run a star index .
10583	Create a new schema .
10584	Export data to a stream .
10585	Get the device .
10586	Get labels for ontology .
10587	Get the hierarchy of ontology .
10588	Run a tool .
10589	Populate the parser .
10590	Get the contents of the config file .
10591	Get the mountpoint path for this container .
10592	Add an option to the parser .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Set the authentication token .
10596	Handle the response .
10597	Ping the server
10598	Create a new path .
10599	Update a path .
10600	Delete a path .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of devices .
10604	%prog cut fasta
10605	Run FASTA file .
10606	Run samtools
10607	Runs the SAML command .
10608	Run sampler .
10609	Mark duplicate duplicates .
10610	Sorts a list of Picard files
10611	Run the base_recation .
10612	Run kwargs .
10613	Run rsemsem . rsem file .
10614	Get the user s identities for a test .
10615	Send a command .
10616	Subscribe to a stream .
10617	Connect to websocket .
10618	Connect to the server .
10619	Receive a subscription .
10620	Connect to the websocket connection .
10621	Called when the connection is closed .
10622	Called when the connection is closed .
10623	Called when a connection is received .
10624	Ensure that the connection is alive .
10625	Select variants from VCF .
10626	%prog variant filter
10627	Generate a new variant for a given gene .
10628	Apply a variant to a VCF .
10629	Combine variant variants .
10630	Check if a BAM file exists .
10631	Load handlers from a handler .
10632	Write configuration to a JSON file .
10633	Read configuration file .
10634	Get the term for a given ontology .
10635	Search for an ontology .
10636	Suggest a specific ontology .
10637	Iterate over terms in ontology .
10638	Iterate over the labels of the ontology .
10639	Iterate over labels .
10640	Iterate over all children of the ontology .
10641	%prog fastq fastq
10642	Add a stream to the database .
10643	Create a Flask application .
10644	Start the Spark container .
10645	Starts the Spark container .
10646	Start the datastore .
10647	Stops the HDFS server .
10648	Check if the container is running .
10649	Generate tokens from a file .
10650	Lookup a zone by name .
10651	Fetch information from a DNS zone .
10652	Merge all configuration sets .
10653	Validate the changeset .
10654	Given a list of members return the best score .
10655	Calculate the fitness score .
10656	Calculate the cost of the group .
10657	Calculate the median cost of this group .
10658	Return the parameters of the parameter .
10659	Get all members of this process .
10660	Add a parameter .
10661	Generate a generator for generation .
10662	Normalize items into a dictionary .
10663	Iterate over the environment variables .
10664	Called when an exception is raised .
10665	Transform a list of packages into a dictionary .
10666	Transform a type to a string .
10667	Convert XML element to XML .
10668	Convert xhtml to HTML .
10669	Convert a docstring to a string .
10670	Open an HTML document .
10671	Drop this tree .
10672	Drop this tag .
10673	Get element by id
10674	Return the CSS selector for the given expression .
10675	Return a list of members of a logger .
10676	Returns a dictionary of the counts for each test .
10677	Check if the class is a single class .
10678	Check if a module is a single module .
10679	Validate request parameters .
10680	Validate a request .
10681	Decode a path to a file .
10682	Escape an iterable .
10683	Return the encoding name for the given encoding .
10684	Detect the BOM header .
10685	Get the remote address from the remote host .
10686	Convert an object to an integer .
10687	Parse a string .
10688	Parse a file .
10689	Convert an HTML tree to a tree .
10690	Get the current traceback .
10691	Return the exception as a string .
10692	Render the summary of the traceback .
10693	Generate a plaintext traceback .
10694	Return a list of lines of the source code .
10695	Render the source table .
10696	Parse egg info .
10697	Return a list of index URLs for the project .
10698	Find all versions of a project .
10699	Find the installed requirements for a requirement .
10700	Sort list of links .
10701	Get the content type of a URL .
10702	Return a list of links .
10703	Verify that this object is valid .
10704	Find all data files in the given package .
10705	Return a list of files that match the given package .
10706	Parse a requirements file .
10707	Join a list of lines .
10708	Ignore comments .
10709	Compile a marker .
10710	visit an environment variable
10711	visit an attribute
10712	Convert a value into a Python object .
10713	Return a copy of the current context .
10714	Push the context to the context .
10715	Remove the current context .
10716	Return a copy of this request .
10717	Match the request .
10718	Push a request to the stack .
10719	Make a relative path relative to a relative path .
10720	Determines if the given distirement is an immutable .
10721	Register a URL for the given URL .
10722	Register a function to be called when a function is called .
10723	Register an error handler .
10724	Decorator to yield a generator that yields a generator that yields a generator .
10725	Return the response class .
10726	Generate URL for given endpoint .
10727	Return a path to a directory .
10728	Get the root path for the given module .
10729	Creates a jinja template .
10730	Run a command .
10731	Returns the cookie domain name .
10732	Return the cache for the given link .
10733	Check if the given package is a root directory .
10734	Generate a list of directories for the given distribution .
10735	Check if a wheel is installed .
10736	Build a wheel .
10737	Iterate over symbols .
10738	Decorator to ensure fresh rates are refreshed .
10739	Add egg info to the command .
10740	Write a marker file .
10741	Return True if the virtualenv is running .
10742	Returns the username of the current user .
10743	Generate a distutils scheme .
10744	Parse the cache control header .
10745	Retrieve a cached request .
10746	Cache the response to the cache .
10747	Update the cache cache cache .
10748	Load a template file .
10749	Install the site .
10750	Save the path to the file .
10751	Convert a value to a string .
10752	Add filters to the filter .
10753	Configure the handler .
10754	Add handlers to logger .
10755	Add a logger to the logger .
10756	Execute a file .
10757	Replace a temporary directory .
10758	Get the URL for the git repository .
10759	Get the value of an object .
10760	Generate a new source .
10761	Compile the template .
10762	Get the default cache for the application .
10763	Find egg_eggs in a zip file .
10764	Find the distribution for a given path .
10765	Declare a namespace .
10766	Get the mapper of a class .
10767	Find the adapter for the given interface .
10768	Ensure a directory exists .
10769	Iterate over all entries in a group .
10770	Check if the given dist_version is compatible .
10771	Gets the best match for a given request .
10772	Evaluate the given text .
10773	Evaluate the given text .
10774	Format a record .
10775	Format a number of currencies .
10776	Parse a string .
10777	Return the decimal number of digits .
10778	Return the decimal precision of a number .
10779	Calculate the scientific notation .
10780	Return the total number of seconds .
10781	Parse a list of requirements .
10782	Return a tuple that can be used to be patched .
10783	Checks that the given requirement is valid .
10784	Fetch egg and build the egg
10785	Prints a dice roll .
10786	Convert an object to an object .
10787	Create a price object .
10788	Validate request .
10789	Get the method from the app .
10790	Apply a method to the server .
10791	Return the blueprint object .
10792	Returns the URL of the blueprint .
10793	Decorator to add errors to an error message .
10794	Make sure that the distribution is installed .
10795	Add a new requirement .
10796	Recursively walk the requirements of the given requirements .
10797	Check if a requirement is installed .
10798	Applies the dependencies to the dependencies .
10799	Get all namespace packages
10800	Serialize object to JSON .
10801	Tokenize an annotation .
10802	Merge two tokens .
10803	Copy annotations to src .
10804	Compress a list of tokens .
10805	Yields a list of tokens .
10806	Expand a list of tokens .
10807	Finds the unbalanced end of the end of the end .
10808	Convert a list of chunks into a list of strings .
10809	Flattens an element from an element .
10810	Split text .
10811	Create a start tag .
10812	Return the end of the tag .
10813	Serialize an HTML fragment .
10814	Fix insert tags .
10815	Extract a constant from a symbol .
10816	Return the cache URL for the AWS service .
10817	Reloads a link .
10818	Kill comments .
10819	Create a document from a string .
10820	Decorator to wrap a function to return a JSON response .
10821	Gets the tree for the given tree type .
10822	Export the repository to the repository .
10823	Get the revision for the given location .
10824	Decorator for setup .
10825	Return the name of the module .
10826	Propagate exceptions .
10827	Return the path to the instance .
10828	Update template context .
10829	Handle an HTTP exception .
10830	Tries to trap an HTTP request .
10831	Handle an exception .
10832	Raise an exception if the request was raised .
10833	Perform a request .
10834	Return default response response .
10835	Creates a URL for the given request .
10836	Inject values from the given endpoint .
10837	Generate a unique value .
10838	Handle requirements .
10839	Convert a requirement to a string .
10840	Convert a package to a metadata file .
10841	Iterate over all modules .
10842	Iterate over all classes in the module .
10843	Return a list of all methods in the class .
10844	Find the basename of the given name .
10845	Check if the given path is a valid module .
10846	Iterate over all files in a directory .
10847	Yields the path of the module .
10848	Dump keyword arguments to json .
10849	Load the default values from a json file .
10850	Set the value of a mapping .
10851	Increment a value .
10852	Dump an object to a string .
10853	Builds a dictionary of options for a request .
10854	Populate the link .
10855	Ensure the source directory exists .
10856	Removes the temporary source directory .
10857	Get the distribution information .
10858	Get data from the stream .
10859	Extract headers from HTTP headers .
10860	r Convert a URI to a URI .
10861	r Return the cache directory for the application .
10862	Return the user s data directory .
10863	Return the log directory for the application .
10864	Return the user s config directory .
10865	Return a list of configuration directories .
10866	Iterate over modules .
10867	Restart the process .
10868	Convert string to string .
10869	Try to find the cert bundle .
10870	Parse an HTML document .
10871	Parse an HTML document .
10872	Parse a fragment .
10873	Translate a word .
10874	Convert data to a list of tokens .
10875	Bind the server to the server .
10876	Report the report .
10877	Load the bytecode from a file .
10878	Convert a list of kwargs to a dictionary .
10879	Run a command .
10880	Get the version of the python version .
10881	Return a list of Distribution objects for a given location .
10882	Find external links .
10883	Open a URL .
10884	Process a URL .
10885	Return a list of paths that are removed .
10886	Initialize path info .
10887	Add a package to a package .
10888	Add a directory to a directory .
10889	Check if user is enabled .
10890	Add user - installed packages .
10891	Set the quit command .
10892	Alias to alias .
10893	Set default encoding .
10894	Force the global global egg .
10895	Fixes the class path to the classpath .
10896	Run a subprocess .
10897	Check if the given extension is a python extension .
10898	Convert the source code to the source code .
10899	Run the application .
10900	Get a resource from a resource .
10901	Generate the user agent .
10902	Check if a URL is a URL .
10903	Unpack a link to a file .
10904	Download a URL from a URL .
10905	Check if a file is downloaded .
10906	Format a currency .
10907	Register an exchange .
10908	Decode the response .
10909	Return default template context .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Checks if the given name is a declared variable .
10915	visit a name node
10916	visit a template
10917	visit an import statement
10918	Creates a new WELF file .
10919	Decorator to execute a function .
10920	Start a service .
10921	Convert obj to unicode string .
10922	Return a list of requirements matching requirements .
10923	Populate the requirements set .
10924	Exports the given location .
10925	Lookup an Amazon Product Product .
10926	Iterate over pages .
10927	Return the ancestor of this element .
10928	Return a list of all children of this element .
10929	Get the element of the given path .
10930	Get the text of the element .
10931	Get the date of the element
10932	Returns the price of the price .
10933	Returns the price of the item .
10934	Send a request to the cache .
10935	Build a response from the cache .
10936	Return the attribute of an attribute .
10937	Convert string to title .
10938	Sort a list of values .
10939	Group the given attribute .
10940	Apply a function to a map .
10941	Create a logger .
10942	Compute the difference between two strings .
10943	Verify that a value is signed .
10944	Derive the secret .
10945	Returns the signature for the given value .
10946	Sign a value .
10947	Verify the signature .
10948	Unsigned signature .
10949	Sign a value .
10950	Validate a signed value .
10951	Serializes an object to a string .
10952	Handle a server error .
10953	Return a list of all installed packages .
10954	Return a list of all parent packages .
10955	Yield all files in a base directory .
10956	Prepare the response and return the response .
10957	Unpack a file .
10958	Unpack a wheel .
10959	Install scripts .
10960	Renders all nodes in the graph .
10961	Redraw the canvas .
10962	Get a node by id
10963	Changes the connection to the graph .
10964	Add edges to the graph .
10965	Called when a component is changed .
10966	Handles mouse click .
10967	Called when the diagram has changed
10968	Clears the diagram .
10969	Remove the domain changed from the domain .
10970	Maps the domain to the domain .
10971	Unmap all nodes in the model .
10972	Map an element to an element .
10973	Sets the style of a dot plot .
10974	Parses the contents of a string .
10975	set font font
10976	Processes a ellipse .
10977	Process a Polygon .
10978	Create a Polyline .
10979	Process a text text .
10980	Print an image .
10981	Render a GridFS file .
10982	Save an object to a file .
10983	Load a dot file .
10984	Returns True if the point is within the given point .
10985	Draw the bounds of the rectangle .
10986	Create a new DAG .
10987	Connect to the database .
10988	Parses the dot code and returns it .
10989	Create a new graph .
10990	Open a file .
10991	Save the model .
10992	Save the graph to a file .
10993	Configure the model .
10994	Configure node nodes
10995	Configures the edges of the model .
10996	Show the current state of the agent .
10997	Add a new node .
10998	Add a new edge to the graph .
10999	Add a subgraph .
11000	Add a new cluster .
11001	Get the current graph .
11002	Edit options .
11003	Configure the dot code .
11004	Called when the user exits .
11005	Move the coordinates to the origin .
11006	Save a file to a file .
11007	Load data from a file .
11008	Save the file to a file .
11009	Load an object from a file .
11010	Creates a new alias .
11011	Parse a file .
11012	Return the start words .
11013	Add a Markov chain .
11014	Remove a chain .
11015	Build a chain from the chain .
11016	Generate a random sentence .
11017	Create a new program .
11018	Add a new node .
11019	Delete a node .
11020	Get a node by id
11021	Delete an edge from the graph .
11022	Add a new edge to the graph .
11023	Add a subgraph .
11024	Called when the program is loaded .
11025	Set the list of nodes in the graph .
11026	Parse a DOT file .
11027	Parse a dot file .
11028	Builds a topology graph from the graph .
11029	Build a graph from the graph .
11030	Get the time of the given seconds .
11031	Formats a duration .
11032	Set a new path
11033	Creates a new view .
11034	Split sequence into numpy arrays .
11035	Yields a list of tuples .
11036	Main entry point .
11037	Get all children of an object .
11038	Append a child to the object .
11039	Insert a child .
11040	Remove a child from an object .
11041	Called when a node is removed .
11042	Called when a node has changed .
11043	Get the label for the object .
11044	Set the label of the object .
11045	Called when the label is changed .
11046	Initialize the panel .
11047	Update the editor .
11048	Add listeners to the graph .
11049	Replace all nodes in this object .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Replaces a new edge with the given name .
11053	Called when an event is changed .
11054	Add edges to the graph .
11055	Parses a DOTD directive .
11056	Event handler for drawing
11057	Creates a node from a table .
11058	Create an edge factory for a given row .
11059	Prepare a MongoDB proxy .
11060	Parses the DAGD directive .
11061	Parses the XDT directive .
11062	Called when drawing changes .
11063	Set the position of the component .
11064	Update the position of the component .
11065	Handles the right button .
11066	Show information about the stylesheet .
11067	Draw the main layer .
11068	Returns True if the point is within the polygon .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the loop .
11072	Get the full URL for the page .
11073	Render links to page .
11074	Render the links to the page .
11075	Check if the content type matches the given pattern .
11076	Select the content type matching the given pattern .
11077	Rewrite a URL .
11078	Remove a URL from a URL .
11079	Create a URL for a user .
11080	Normalize host name .
11081	Find all modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of modules in a module .
11084	List all classes in the given module .
11085	Return a list of all classes in a module .
11086	Ensure a directory exists .
11087	Put text into the blob .
11088	Check if a card number is valid .
11089	Get git version .
11090	Load a module .
11091	Add a path to the list .
11092	Find a module by name .
11093	Split a line into a list .
11094	Remove all namespace names .
11095	Return the version of the version .
11096	Create a new instance from YAML .
11097	Merge the action dictionary .
11098	Execute all actions .
11099	Initialize a YAML configuration from a dictionary .
11100	Add details about a message .
11101	Emulate a rate limit .
11102	Returns the context for the given value .
11103	Log a new account .
11104	Add a URL to the queue .
11105	Start the workers .
11106	Set the value of a key .
11107	Get a key .
11108	Recursively recursively recursively recursively recursively .
11109	Returns the index of the given kubernet .
11110	Delete a kvstore .
11111	Plot the heatmap of the given data .
11112	Add a new month to the given timestamp .
11113	Add a date to the given date .
11114	Returns True if the month is a valid month .
11115	Set the music service .
11116	Set the storage service .
11117	Read data from a CSV file .
11118	Load a JSON file from a JSON file .
11119	Write data to a JSON file .
11120	Return a list of labels that correspond to labels .
11121	Calculate the average of the data .
11122	Compute the importance of a feature .
11123	Restore data .
11124	Merge two dictionaries .
11125	Decorator to register a function .
11126	Decorator to apply a function to a function .
11127	Find all registered blocks .
11128	Verify that the given block is valid .
11129	Register a block .
11130	Unregister a given block type .
11131	Convert a file to MP3 .
11132	Return the version of the desired version .
11133	Handle SSL redirect redirect .
11134	Initialize celery .
11135	Queue an email .
11136	Parse the Accept header .
11137	Parse the cache header .
11138	Parse content type .
11139	Parse a forward header .
11140	Parse a list of strings .
11141	Parse parameter list .
11142	Resize the width of the image .
11143	Add a value to the link .
11144	Download a YouTube URL .
11145	Connect to Google Drive .
11146	Upload a file .
11147	Connect to the music folder .
11148	Write sky parameters to disk .
11149	Update sky files
11150	Read HIP AMI from file .
11151	Scale the phi .
11152	Read water absorption from file .
11153	Reads the water scattering from a file .
11154	Read the input file from a file .
11155	Write a file to a file .
11156	Build the bb . bb
11157	Build the absorption .
11158	Calculate the total average of the total concentration .
11159	Builds all of the IOPs .
11160	Batch parameters .
11161	Read data from a file .
11162	Convert a string to float
11163	Reads a report file .
11164	Set signal handlers .
11165	Process a signal .
11166	Default handler .
11167	Pause a signal .
11168	Abort a signal .
11169	Process a signal handler .
11170	Unregisters an event .
11171	Fetch a metric for a given metric .
11172	Returns a sorted list of metric names .
11173	Return a list of iterable elements .
11174	Print an item to stdout .
11175	Print an iterable of iterable .
11176	Sets the signature of the function .
11177	Extracts the signature from the instance .
11178	Creates a new argument with the given arguments .
11179	Checks if the given file is not present .
11180	Return the file key .
11181	Convert a VQL value to a VQU .
11182	Read a table from data .
11183	Parse the archive header .
11184	Get the duration of seconds .
11185	Print the details of the game .
11186	Sets the GUI data .
11187	Display the results of the report .
11188	Writes the batch file to a batch file .
11189	Calculate the data of the data .
11190	Display the graphics connection .
11191	Prints the information about the grid
11192	Display the error message .
11193	Hide the error message .
11194	Execute the plan .
11195	Cancel the plan .
11196	Queries the system .
11197	Save the figure
11198	Open the log file .
11199	Open the document .
11200	Sets up the required actions
11201	Mouse event handler .
11202	Move the mouse to the screen .
11203	Display a graphic on the screen .
11204	Returns a list of LockSet objects for the given blockchain .
11205	Sign a private key .
11206	Return the hash of the signature .
11207	Check if the quorum is valid .
11208	Issue the amount of funds .
11209	Returns the last lock for this block .
11210	Returns the last block of the block .
11211	Returns the last locked locks for this block .
11212	Get the timeout for a given proposal .
11213	Called when a peer is received .
11214	Make a list of private keys .
11215	Calculate the delay .
11216	Send a message to the server .
11217	Creates a proxy for a given chain .
11218	Returns the native contract class for the given address .
11219	Register a native contract .
11220	Update the filter .
11221	Receive a remote transaction .
11222	Create an image from a VGG .
11223	Convert an image to VGG .
11224	Fetches the given layer name .
11225	Get the output layer output .
11226	Get the features of the layer .
11227	Create a new key .
11228	Finish the job .
11229	Load data from a file .
11230	Put items into the database .
11231	Release the given table .
11232	Returns a list of table names for the table .
11233	Decorator to fix the compiler .
11234	Find and return the version of the client .
11235	Get the value of the config
11236	Set the value of the config .
11237	Print a table .
11238	Execute a command .
11239	Get the value of a key .
11240	Writes the default configuration to the config file .
11241	Sets the filter filters .
11242	Serializes the data to a file .
11243	Convert a string to a string .
11244	Convert a string to a float .
11245	Convert a string into a dictionary .
11246	Convert a string to a dictionary .
11247	Wrap text with indentation .
11248	Detect devices .
11249	Set the center of the center
11250	Calculate the result of the PSD .
11251	Wait for the result .
11252	Updates the pysampler .
11253	Read data from file .
11254	Write the data to a file .
11255	Submit a function .
11256	Convert a time interval to a number of times .
11257	Calculate the frequency of a frequency range .
11258	Create a buffer buffer .
11259	Initialize the audio data .
11260	Stop the stream .
11261	Sets the PSD .
11262	Perform a sweep .
11263	Sets the address of the device .
11264	Run cql command .
11265	Filter the given number of times .
11266	Mask a datetime .
11267	Mask a datetime .
11268	Convert a list of datetime objects to a list of datetime objects .
11269	Delete a datetime from a datetime .
11270	Convert dates to a list of dates .
11271	Remove dates from dates .
11272	Gets the SPI command .
11273	Read a bit integer .
11274	Write a bit integer to a bit integer .
11275	Get the bit number of bits .
11276	Watch for port events .
11277	Handle a function that handles all functions .
11278	Updates the GPIO interface .
11279	Sets the edge between the GPIO edge .
11280	Wait until a file exists .
11281	Register a pin function .
11282	Remove a pin .
11283	Enable InterruptInterrupt interrupts .
11284	Send an SPI message to the device .
11285	Render a tabular form .
11286	Check if the form is valid .
11287	Render a form .
11288	Extract the version from a package .
11289	Returns the form of the form .
11290	Check the status of the response .
11291	Get a GET request .
11292	Get the download link for a file .
11293	Upload a file .
11294	Upload a file .
11295	Upload a remote file .
11296	Get remote upload status .
11297	List folder folders .
11298	Returns a list of all files in the folder .
11299	Calculate the humidity of a temperature .
11300	Calculate the temperature of a temperature .
11301	Publish this command .
11302	Calculate the CRC of the given data .
11303	Verify that data is valid
11304	Unpack a date string .
11305	Determine if the archive is a revision .
11306	Send a wakeup signal .
11307	Send a command to the device .
11308	Read a DPM file .
11309	Get a new archive of the weather data
11310	Parse archive fields .
11311	Update weather data .
11312	Initialize the logger .
11313	Return a list of all public services .
11314	Calculate the wind speed
11315	Sets the properties of the model
11316	Set keyword arguments .
11317	Publish the command .
11318	Decorator for requests .
11319	Initialize the app .
11320	Checks if all requirements are available .
11321	Add an override to the current context .
11322	Pop the current context .
11323	Context manager .
11324	Add a new context .
11325	Pop the current context .
11326	Add additional additional additions .
11327	Duplicate a list of field names .
11328	Retrieve stats from results .
11329	Extract parameters from a query .
11330	Run a query .
11331	Return a pandas DataFrame .
11332	Get the graph of the graph .
11333	Creates a pie chart .
11334	Plot the plot .
11335	Plot a bar chart .
11336	Return a CsvResult object .
11337	Checks if the given permission is required .
11338	Returns the context data for this widget .
11339	Return a sorted list of widgets .
11340	Return a list of widgets that have been updated .
11341	Register a dashboard widget .
11342	Unregister a widget .
11343	Gets the last update of the dashboard .
11344	Get the widget s settings .
11345	Save a widget to the dashboard .
11346	Determine whether this object has been updated .
11347	Convert an array to an array .
11348	Create a new numpy array .
11349	Concatenate arrays .
11350	Check if the argument is an argparse .
11351	Helper function to format axes .
11352	Wrapper around Spark .
11353	Align the shape of the axes .
11354	Convert an array to Spark .
11355	Determine the TensorD array .
11356	Return an array of partitions .
11357	Apply a function to each element .
11358	Chunks the data into chunks .
11359	Apply a function to each chunk .
11360	Apply a function to a map .
11361	Returns a list of all the values of the plan .
11362	Remove padding from the given number .
11363	Get the number of chunks of a plan .
11364	Return a list of slices for a given plan .
11365	Returns the mask of the given indices .
11366	Return a copy of this dataset .
11367	Stack an array of values .
11368	Align data to the axis .
11369	Return the first value of the array .
11370	Compute the statistics for the given axis .
11371	Return the mean of the data .
11372	Return the variance of the variable .
11373	Return the standard deviation .
11374	Return the sum of the sum of each axis .
11375	Return the maximum value of the given axis .
11376	Return the minimum value of the given axis .
11377	Creates a chunk of data .
11378	Swap the data to the given array .
11379	Transpose the given axes .
11380	Swap the axes to the axis .
11381	Return a new copy of this array .
11382	Reshape the given shape .
11383	Slice the data into a slice .
11384	Convert a DataFrame to an array .
11385	Clone the data .
11386	Convert the array to an array .
11387	Return a tuple of tuples .
11388	Return a tuple of arguments .
11389	Ensure that the shape is an array of axes .
11390	Return true if two arrays are equal .
11391	Convert an array to a list of indices .
11392	Return a slice of slices .
11393	Check if two axes are transposed .
11394	Checks if new keys are equal to the same size .
11395	Concatenate a list of values .
11396	Expand an array with extra dimensions .
11397	Takes a rDD and returns a list of tuples .
11398	Decorator to add a function to the wrapped function .
11399	Look up a class by name .
11400	Return a copy of the array .
11401	Transpose an array of axes .
11402	Return a copy of the array .
11403	Transpose an array of axes .
11404	Create a new numpy array .
11405	Create a new Numpy array .
11406	Concatenate arrays .
11407	Compute the log likelihood of the given data .
11408	Returns the probability of the given data .
11409	Calculate the density of the given data .
11410	Calculate the best alpha of the given data .
11411	Calculate the best alpha - likelihood of the data .
11412	Plots the plot of the data .
11413	Calculate the likelihood of the model .
11414	Sanitize a TensorBoard .
11415	Configure analytics .
11416	List tag tags .
11417	Return the MD5 hash of the file .
11418	Calculate the SHA256 hash .
11419	Return the SHA256 hash of the key .
11420	Parse a long - byte string .
11421	Decode a public key .
11422	Parse options .
11423	Process RSA key .
11424	Parses the ssh key .
11425	Parses an EC2 signature .
11426	Processes an Ed25519 key .
11427	Parses the key and returns the key .
11428	Perform a step .
11429	Perform a step .
11430	Get the list of mechs .
11431	Store the credentials .
11432	Main entry point .
11433	Initialize a package .
11434	Create audio file .
11435	Return the HTML for the django page .
11436	Normalize django frontend .
11437	Generate the stylesheet .
11438	Generate a django . django . django . django
11439	Generate django . django . django
11440	Generate django . django
11441	Generate the django table .
11442	Return the CSS tables for the django query .
11443	Generate the django table for the django table .
11444	Generate a django . django_query
11445	Render the django scroll window .
11446	Generate a django scroll window .
11447	Return the HTML for the django backend .
11448	Generate a django backend .
11449	r Render the given value .
11450	Iterate over the user s auth hashes .
11451	Calculate the expiration time .
11452	Get the token for a user .
11453	Serialize a User object into a dictionary .
11454	Deserialize a profile .
11455	Update a profile .
11456	Authenticate a user .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get the username for a user .
11460	Create a new user .
11461	Log a user .
11462	Log out the user .
11463	Login to the server .
11464	Login to a user .
11465	Login to a user .
11466	Change password .
11467	Sets the password for a user .
11468	Reset password .
11469	Merge two lists .
11470	Read a file .
11471	Gets the metadata for the given object .
11472	Get a list of Metadata objects for a given model .
11473	Return the object id for the given model .
11474	Return a list of objects for a given model .
11475	Get an object by its id
11476	Set default forwards .
11477	Sets the default value for the model .
11478	Truncate a table .
11479	Automatically truncate the database .
11480	Restore the database .
11481	Initialize options .
11482	Finalize options .
11483	Run the build app .
11484	Convert a path to a directory .
11485	Generate random seed .
11486	Return the state of the state
11487	Generate random string .
11488	Decorator for API endpoint .
11489	Iterate over the API endpoint .
11490	Clears the cache map .
11491	Print the given value .
11492	Validate keyword arguments .
11493	Open the WSGI server .
11494	Close the connection .
11495	Called when a message is received .
11496	Generate a frame from a message .
11497	Process a request .
11498	Dispatch a message .
11499	Receive a connection .
11500	Receive a ping .
11501	Subscribes a sub - channel to a sub - channel .
11502	Receive an unsubscribe .
11503	Receive a method .
11504	Generate server info .
11505	Start a server .
11506	Main entry point .
11507	Print a message .
11508	Stop the server .
11509	Start the daemon process
11510	Start the database .
11511	Poll until a connection is received .
11512	Determines the greenlet .
11513	Generate a random random string .
11514	Dynamically instantiate the API .
11515	Return a dictionary with the given arguments .
11516	Get an object by name .
11517	Add a record to the log .
11518	Decorator to create a middleware middleware .
11519	Add a route context to the given module .
11520	Add a resource to a resource .
11521	Run the application .
11522	Send a message .
11523	Send an APNS request to an APN .
11524	Fetch a list of APNs .
11525	Send a message .
11526	Send a message to GCM .
11527	Send a JSON response .
11528	Send data to the server .
11529	Get a model from a module .
11530	Generate a fast forward selection .
11531	Search for a given term .
11532	Translate a given term .
11533	Get trending data .
11534	Gets GIFs .
11535	Creates a new screen .
11536	Upload a file to the given file .
11537	Normalize data .
11538	Fetch data from API endpoint .
11539	Translate a GIF to a GIF .
11540	Yields trending images .
11541	Fetches a GIF by id
11542	Uploads a gif to a file .
11543	Creates an access control object .
11544	Authenticate user .
11545	Upload a YouTube video .
11546	Check the status of a video .
11547	Update a video .
11548	Delete a video .
11549	Check if video is available .
11550	Render a video .
11551	List videos .
11552	Upload a video .
11553	Upload a YouTube video .
11554	Upload a YouTube video .
11555	Delete a video .
11556	Get video entry .
11557	Save the video .
11558	Delete video .
11559	Update metadata .
11560	Update a metadata field .
11561	Update the item .
11562	Load a node from a string .
11563	Return a string representation of the tree .
11564	Load a file from a file .
11565	Read a file .
11566	Parse a node .
11567	Create a new node .
11568	Create a new label .
11569	Parse an ASCII string .
11570	Get node by label .
11571	Remove nodes from tree .
11572	Recursively resolve polytomies .
11573	Removes internal names from the node .
11574	Remove leaf names .
11575	Decorator to ensure that the user is authenticated .
11576	Dispatches a JSON string .
11577	Ensure that the given feature is set .
11578	Get an argument from the request .
11579	Get a list of arguments from the request .
11580	Called when a callback is called .
11581	Get a cookie .
11582	Clears a cookie .
11583	Authenticate the user .
11584	Retrieve the authenticated user .
11585	Generate request parameters .
11586	Redirect to the user .
11587	Perform a GET request .
11588	Retrieve the authenticated user .
11589	Concatenate url into url
11590	Parse header .
11591	Add a value to the header .
11592	Get a list of HTTP headers .
11593	Parse a line .
11594	Parse headers .
11595	Normalize a HTTP header .
11596	Convert value to unicode .
11597	Convert value to unicode .
11598	Convert a string to a string .
11599	Convert object to unicode .
11600	Setup authentication plugin .
11601	Iterate over all subclasses .
11602	Select the policy for the given origin .
11603	Return the occupancy of a grid .
11604	Write a box to a file .
11605	Write pdb file
11606	Given a list of molecules return a list of normalized numbers .
11607	Resize a pylaboxel .
11608	Write a list of molecules to a file .
11609	Iterate over the given file .
11610	Add a message to the user .
11611	Message messages to users .
11612	Get messages from user .
11613	Process the response .
11614	Check that the config file is correct .
11615	Verify that a message name is valid .
11616	Extract data from config file .
11617	Retrieve the password from the config file .
11618	Update config data
11619	Update the user s password
11620	Create a new profile .
11621	Display information about a message .
11622	Get data from user .
11623	Get the auth dict from the user .
11624	Configure a profile .
11625	Write data to a message .
11626	Writes a message to the config file .
11627	Add attachments .
11628	Send a message to the server .
11629	Send a message .
11630	Create a message from a message type .
11631	Creates a credential property .
11632	Validate a property .
11633	Validate a message type .
11634	Validates that the given value is a twilio .
11635	Validate a Slack post .
11636	Validate the WAP app .
11637	Send a coroutine .
11638	Add a message to the client .
11639	Get the body of a file .
11640	Remove arguments from kwargs
11641	Send a message to a message .
11642	Get the chat ID for a given username .
11643	Send a message to the server .
11644	Send a message .
11645	Get the SMTP server .
11646	Generate email .
11647	Add headers to the header .
11648	Add a body to the body .
11649	Add attachment attachments .
11650	Get the SMTP session .
11651	Return the SMTP socket .
11652	Get a SMTP session .
11653	Send a message to the server .
11654	Save tags to file .
11655	Unload the image .
11656	Gets the region of the image .
11657	Validate that this object is valid .
11658	Clears the internal cache .
11659	Writes the contents of this object .
11660	Read data from file .
11661	Delete this chunk .
11662	Resize the chunk size .
11663	Insert a new chunk .
11664	Save the data to a file .
11665	Delete the file .
11666	Parse a file .
11667	Process a line .
11668	Add block lines to source file .
11669	Draw a string with the given text .
11670	Parse an ISO8601 date string .
11671	Convert words to HTML .
11672	Make HTML for the given word .
11673	Make a HTML string for the given words .
11674	Make HTML code for HTML code .
11675	Generate HTML code for each item .
11676	Save the metadata to a file .
11677	Update the parents of a file .
11678	Run a game .
11679	Register a mapping .
11680	Retrieve the given controller .
11681	Register a free key .
11682	Generate a signature for the given string .
11683	Return the headers for the request .
11684	Send a request .
11685	Send a GET request .
11686	Send POST request .
11687	Send a delete request .
11688	Convert a value into an APE value .
11689	Send a request to the server .
11690	Perform an API request .
11691	List hosted hosts .
11692	Create a host zone .
11693	Gets a list of resource records .
11694	Change the resource_set_record_set_record_set_set_record_set_record_set_record_set_record_record_set_record_set_record_name
11695	Draw an image .
11696	Draw an image from an image .
11697	Return the size of the packet .
11698	Replace all pages in a file .
11699	Find the last byte of a file .
11700	Set the section name .
11701	Add markup to docstring .
11702	Processes the given content .
11703	Get the markdown for the given tag .
11704	Create a new hosted zone .
11705	Lock a file object .
11706	Insert a file at the given offset .
11707	Delete bytes from file .
11708	Convert data to UTF - 8 bytes .
11709	Add a new route to the route .
11710	Parse the request information .
11711	Return the width of a string .
11712	Returns True if the object is modified
11713	Delete a resource .
11714	Save the resource to the database .
11715	Parse the ID3 header .
11716	Convert ID3 to ID3 .
11717	Read bytes from file .
11718	Remove all keys from a key .
11719	Load a frame .
11720	Update the media .
11721	Update the version of the current version .
11722	Unload sound .
11723	Play a sound .
11724	Sets the loop of the audio loop .
11725	Return a list of glyphs .
11726	Given a list of glyph names return a list of glyph names .
11727	Dump a string to a file .
11728	Writes an array to a file .
11729	Main entry point .
11730	Check if a file exists .
11731	Return a list of file names .
11732	Parse a host zone .
11733	Parses a list of names in a zone set .
11734	Write blocks of blocks .
11735	Group padding .
11736	Delete the metadata .
11737	Save metadata to file .
11738	Parses a DNS alias .
11739	Parses a list of RR records .
11740	Parse an RRSet .
11741	Delete a hosted zone .
11742	Add a new record .
11743	Create a new record .
11744	Create a record .
11745	Create a new CRS record .
11746	Create a new MXRecord record .
11747	Create a new DNS record .
11748	Create a new PTR record .
11749	Create a new SPF record .
11750	Create a new SRV record .
11751	Create a new TXT record .
11752	Register a new TXXX key .
11753	Get the values of a change .
11754	Writes a change set to a change .
11755	Writes a change set of changes to the server .
11756	Initialize the logger .
11757	Get alias for alias .
11758	Return a list of dictionaries .
11759	Join a list of attributes .
11760	Initialize the app .
11761	Initialize the bars .
11762	Bind a bar .
11763	Return a dictionary of arguments .
11764	Return the URL for this endpoint .
11765	Determine if the current request is current .
11766	Validate a metric class .
11767	Get a statistic model by name .
11768	Calculate statistics .
11769	Automatically autodelist .
11770	Create a CSV file .
11771	Sets the status of the monitor .
11772	Get a list of variable names from a variable .
11773	Get the value of a variable .
11774	Retrieves the next colour from the GCEBO .
11775	Retrieves the geometries from a request .
11776	Get the number of widgets for a given request .
11777	Display a display widget .
11778	Returns a pandas chart for the given metric .
11779	Retrieves the geometries of the geometries .
11780	Return a dict of GeoJSON objects .
11781	Returns a list of active stats .
11782	Register a new gadget .
11783	Get the context data
11784	Print an error message .
11785	Decorator for validation .
11786	Return a list of input lines .
11787	List input items .
11788	Write out file to file .
11789	Get the schedule for a given year .
11790	Returns the winner of the game .
11791	Return the season s season .
11792	Return a pandas dataframe
11793	Get the surface of the game .
11794	Gets the coin balance .
11795	Get weather information .
11796	Get information about the article .
11797	Sets the games for a given year .
11798	Returns a pandas DataFrame
11799	Get a table of team stats .
11800	Return a list of votes .
11801	Returns a pandas DataFrame .
11802	Returns the year of the year .
11803	Get the stats for the player .
11804	Switch a directory to a directory .
11805	Decorator to cache the given url
11806	Get the class id of a class .
11807	Decorator for memoization .
11808	Returns the age of the year
11809	Get the stats table for a table .
11810	Get the stats for the game .
11811	Returns the stats table for this table .
11812	Get the stats table for the given kind .
11813	Get the stats table for the given kind .
11814	Get the stats table .
11815	Get the stats table .
11816	Returns the stats table for the given kind .
11817	Get a list of games for a given year .
11818	Delete the current session .
11819	Expand the details of a dataframe
11820	Add features to a list of features .
11821	Add feature features to a team .
11822	Calculate the probability of a line .
11823	Return a list of results .
11824	Return a list of year and year .
11825	Get the name of the team .
11826	Returns a list of boxes for a given year .
11827	Get the metadata for a given year .
11828	Return a list of coaches for a given year .
11829	Calculate the schedule for a given year .
11830	Fetches the off of the given year .
11831	Returns the DCinator for the given year .
11832	Get the stadium s stadium .
11833	Retrieves the scheme for the given year .
11834	Return the alignment of the given year .
11835	Return a pandas DataFrame from the given year .
11836	Get HTML for a given URL .
11837	Flatten a list of links .
11838	Convert a URL to a URL .
11839	Convert keyword arguments to dict
11840	Read the contents of a file .
11841	Insert a new queue .
11842	Return the next read queue .
11843	Close the queue .
11844	Get the data from a dataset .
11845	Retrieves the remainder of the given path .
11846	Get a queue of the given path .
11847	Return a generator that yields a generator that yields a generator .
11848	Parse a pb file .
11849	Dump an object to a file .
11850	Read a variable from the stream .
11851	Iterate over all objects .
11852	Close the stream .
11853	Write data to the buffer .
11854	Flush the output buffer .
11855	Get the name of the game directory .
11856	Updates the input text .
11857	Create a fake movie .
11858	Evaluate traits .
11859	Wait for a condition .
11860	Wait until all traits are present .
11861	Add ignored exceptions .
11862	Get the volume .
11863	Execute the main source .
11864	Send a message to the server .
11865	Get the status of the device .
11866	Removes power off .
11867	Power on the device .
11868	Set the volume .
11869	Select source .
11870	Decorate a request .
11871	Calculate the CRC of a plain text .
11872	Redirect a value to a string .
11873	Download a song .
11874	Returns a list of all links in the HTML .
11875	Check if a song exists .
11876	Parse a song .
11877	Generate a URL for a song .
11878	Parses url and returns url
11879	Parse a song .
11880	Get the content of a page .
11881	Download a file from a URL .
11882	Download a file .
11883	Return a list of station codes .
11884	Get information about a location .
11885	Parse an observation response .
11886	Get information about a station .
11887	Return a list of paths that match the index .
11888	Return a list of all compiler extensions .
11889	Return the mimetypeetype for this environment .
11890	Return the result of the compiler .
11891	Return the compiler extension for the compiler .
11892	Register a new processor .
11893	Unregister a given mimetype .
11894	Returns a list of all the paths in this list .
11895	Register default default values .
11896	Imports the Qt module .
11897	Get the network node .
11898	Add a network name to the network .
11899	Deletes a network name .
11900	Import settings from config file .
11901	Export settings to a file .
11902	Gets the directory for this plugin .
11903	Iterate over the system keys .
11904	Handler for error handling .
11905	Get a table .
11906	List all DynamoDB tables .
11907	Fetch items from a category .
11908	Get metadata for a given item .
11909	Get the metadata for the given item .
11910	Fetches the owner of a crate .
11911	Fetches the owner of a crate .
11912	Fetch versions of a crate .
11913	Fetch the version of a crate .
11914	Fetch data from a crate .
11915	Retrieves the summary of the category .
11916	Retrieves a list of crates .
11917	Retrieve a crate .
11918	Get the attribute of a crate .
11919	Fetch items from a path .
11920	Fetch a specific category .
11921	Fetch items from a category .
11922	Get a list of questions .
11923	Fetch a specific category .
11924	Get the metadata for a given item .
11925	Determine the metadata for a particular item .
11926	Get all items from the API .
11927	Return the buffer list .
11928	Get the IO priority of the IO .
11929	Close the queue .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all pending blocks .
11933	Returns a list of all events in the queue .
11934	Fetch a specific category .
11935	Retrieves a list of cells
11936	Parse the feed and return the results .
11937	Returns the export formats for the given pid .
11938	Returns the permissions for this user .
11939	Create a blueprint .
11940	Create a route rule .
11941	View a record .
11942	Renders the given record .
11943	r Export a record .
11944	Run a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Send a timing request .
11949	Sets the timing of the given time .
11950	Send a gauge .
11951	Send a gauge to the specified rate .
11952	Set the value of a metric .
11953	Send data to the server .
11954	Return a batch of batches .
11955	Creates a unit .
11956	Flush the remote server .
11957	Creates a new permission checker .
11958	Create a BatchClient .
11959	Flush all batches .
11960	Creates a TCP client .
11961	Creates a user object .
11962	Implements an operator .
11963	Convert a term to an OpenMath object .
11964	Convert an object to a Python object .
11965	Convert an object to an OpenMath object .
11966	Registers a function to be used to register a conversion function .
11967	Decorator to register a converter to a Python object .
11968	Initialize the app .
11969	Validate choices .
11970	Split kwargs into a dictionary
11971	Registers the given field type .
11972	Create a value for the given object .
11973	Returns the default form for the given form .
11974	Decorator for generating a random field .
11975	Creates a random choice for a given field .
11976	Return the decimal value for a field .
11977	Return email data .
11978	Returns a datetime for the given field .
11979	Returns a datetime . datetime object .
11980	Convert a field to a float .
11981	Convert a field to integer values .
11982	Generate time data for a given field .
11983	Choose a random choice .
11984	Return a list of choice choices .
11985	Choose a random choice .
11986	Encode an object to a Python object .
11987	Publish a package .
11988	tag version
11989	Decorator that returns a random value .
11990	Load a python module from a python module .
11991	Builds a class from the given state .
11992	Return a list of OML objects .
11993	Creates an otuples from a list of tuples .
11994	Decode data into bytes .
11995	Encodes data into bytes .
11996	Convert a value to a float .
11997	Format a number .
11998	Convert a number to a float .
11999	Convert numpy array to numpy array .
12000	Convert an array to a compressed array .
12001	Add a workspace .
12002	Remove a workspace .
12003	Return a list of workspace names .
12004	Get a list of ws
12005	Check if a workspace exists .
12006	Sync a workspace .
12007	Clone the given url and return it .
12008	Check if ndio is available
12009	Convert an array to a list of vectors .
12010	Create a vector from a list of voxels .
12011	Prints the current workspace .
12012	Print a new repository .
12013	Set the console handler .
12014	Execute a command .
12015	Load an image from a png file .
12016	Save numpy array to file .
12017	Save a numpy array of numpy arrays .
12018	Print the status of a workspace .
12019	Print status information .
12020	Get the block size .
12021	Upload data to BLOC .
12022	Load an image from a file .
12023	Save numpy array to file .
12024	Load a TIFF file .
12025	Write configuration to the config file .
12026	Clone the given URL .
12027	Get the version of yaml .
12028	Prints the name of the given name .
12029	A decorator to print an option .
12030	Reserve a list of IDs .
12031	Merge multiple IDs from a channel .
12032	Returns True if the token is propagated .
12033	List projects .
12034	Get a remote dataset .
12035	List all available datasets .
12036	Parse a command line .
12037	Show the current workspace .
12038	Show information about a workspace .
12039	Show all available workspace
12040	Return the URL for the given endpoint .
12041	Guess the format of a file extension .
12042	Open a file .
12043	Convert an input file to a file .
12044	Build the graph for the given site .
12045	Compute the invocations of the graph .
12046	Convert a graph to a graph .
12047	Convert a list of dictionaries into a dictionary .
12048	Return the RAM type of a given type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a JSON representation of a dataset .
12052	Create a dataset dictionary .
12053	Create a channel dictionary .
12054	Convert a project to a dictionary .
12055	Identify image size .
12056	Uploads data to the server .
12057	Find the path to a workspace .
12058	Get all public tokens .
12059	Get information about a project
12060	Set metadata .
12061	Get the URL for the given URL .
12062	Perform a POST request .
12063	Delete a URL .
12064	Load data from hdf5 file .
12065	Save data to HDF5 file .
12066	Parses a sequence of genes in a tree .
12067	Return a copy of the virtual machine .
12068	Instantiates a jupyter .
12069	Ensure that the given state is exclusive .
12070	Calculate the percentage of part of the data .
12071	Get the cached stats for the server .
12072	Return a list of cached servers
12073	Return a dictionary of context data .
12074	View the server status .
12075	Render a memcache .
12076	Display the stats for a given server .
12077	Render a memcache cache .
12078	Return a human readable number of bytes .
12079	Find the configuration for the given configuration .
12080	Add directories to the environment .
12081	Apply the config to the application .
12082	Return the path of the file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure the logger .
12086	Create a file .
12087	Applies the config to the config .
12088	Return the path of the current parent .
12089	Remove the directory .
12090	Prepare all children .
12091	Remove all children .
12092	Return the path to the given path .
12093	List all files in this directory .
12094	Write data to file .
12095	Read a file .
12096	Add a file to the list .
12097	Save the data to disk .
12098	Load YAML file .
12099	Clean up the directory .
12100	Load plugins .
12101	Update a dictionary with the given dictionary .
12102	Create a child node .
12103	Resolve the given path .
12104	Get the value of the container .
12105	Update the configuration .
12106	Loads the config file .
12107	Convert an object to a string .
12108	Build a callback for a URL .
12109	Process the input stream .
12110	Send the output to the socket .
12111	Send RPC request .
12112	Read socket input from socket .
12113	Write socket output to socket .
12114	Decorator to check if a function is called .
12115	Get the set of modes for the remote .
12116	Configure the target node .
12117	Returns the source address .
12118	Returns the target address .
12119	Called when the session is closed .
12120	Create a new sender .
12121	Request a new sender .
12122	Create a new receiver .
12123	Request a new receiver .
12124	Destroy a link .
12125	Close the session .
12126	Process an event .
12127	Extend Markdown Markdown .
12128	Called when the receiver is closed .
12129	Called when the receiver failed .
12130	Get the host port for a given address .
12131	Connect to a host .
12132	Create a server socket
12133	Return the number of processes that have been processed .
12134	Decorator to mark a function as a function .
12135	Process a connection .
12136	Return the output of the output stream .
12137	Create a new sender .
12138	Remove a sender from a given link .
12139	Create a new receiver .
12140	Called when the connection failed .
12141	Check if connection is active .
12142	Called when a connection is closed .
12143	Called when an error occurs .
12144	Decorator for creating a twilio .
12145	Return the color string .
12146	Return a list of font files
12147	Sets the compression option .
12148	Add an object to the PDF .
12149	Write a stream to the stream .
12150	Write a stream to the stream .
12151	Add text to the page .
12152	Set the color scheme .
12153	Set default font .
12154	Add a page to the page .
12155	Set font size .
12156	Add text to the page .
12157	Add new line .
12158	Add a pie chart .
12159	Output the list of pages .
12160	Return a list of orientation changes .
12161	Output a list of fonts .
12162	Output a list of images .
12163	Outputs the screen .
12164	Compute the transform matrix .
12165	Calculate the absolute position of the current position .
12166	Set the style style .
12167	Rotate the angle between two points .
12168	Set information about the object .
12169	Sets the zoom mode .
12170	Close the document .
12171	Write the header to the file .
12172	Add pages to the page .
12173	Writes the contents of the resource .
12174	Write the information to the server .
12175	Creates a catalog .
12176	Write the trailer to the file .
12177	Flatten a sequence of sequences .
12178	Generate a sequence of sequences .
12179	Generate a sequence of sequences .
12180	Generate a sequence of sequences .
12181	Checks if the given length is fit .
12182	Checks if the given length is fit .
12183	Returns True if x is greater than x .
12184	Returns True if the variable is greater than the given coordinate .
12185	Return a copy of the cursor .
12186	Add x to x .
12187	Add y to the y axis .
12188	Draws the cursor .
12189	Create a new tag .
12190	List tags .
12191	Get a list of labels .
12192	Update a label .
12193	Delete a tag .
12194	Create a tag .
12195	List all tags .
12196	Get a list of tags for the given label .
12197	Create a new hook .
12198	List hooks .
12199	Update a hook .
12200	Create a new alert
12201	List alert alerts .
12202	Update an alert .
12203	Setup Sphinx .
12204	Return the path to the theme directory .
12205	Post a log entry .
12206	List all logs .
12207	Get information about a given log .
12208	Finds the position of a piece of a piece .
12209	Calculate the duration of the time .
12210	Update the model .
12211	Compute the computation .
12212	Return the binning .
12213	Freeze the array .
12214	Receive data from the socket .
12215	Yield lines from the buffer .
12216	Return a generator that yields the buffer .
12217	Get the status of the server .
12218	Generate info .
12219	Display information about a message .
12220	Send a command .
12221	List capabilities .
12222	Get mode mode .
12223	Shut down the server .
12224	Return a datetime object .
12225	help for help
12226	Generate new group groups .
12227	Generate a new news feed .
12228	Generate a list of news .
12229	Generate a list of active groups .
12230	Generate a list of active times .
12231	List all NEWS groups .
12232	Generate a list of the names of the output .
12233	List extensions .
12234	Generate a list of dictionaries .
12235	Return a list of all keyword arguments .
12236	Get a group .
12237	Get the next article .
12238	Get an article .
12239	Perform a HEAD request .
12240	Return the body of a message .
12241	Get the xtitle of a given pattern .
12242	Add an XDR header .
12243	Send an XDR message .
12244	A generator that yields the x - y bytes of the given range .
12245	Generate a PEP packet .
12246	Generate a list of X .
12247	Compress the feature feature .
12248	Send a POST request .
12249	Return the offset of the given value .
12250	Convert value to timestamp .
12251	Convert a datetime object into a datetime object .
12252	Perform a POST request .
12253	Delete an API .
12254	Perform a GET request .
12255	List all scheduled queries .
12256	List all tags .
12257	Get a list of tags .
12258	Create a new notification .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new trigger .
12262	Delete a log entry .
12263	Unparse a range .
12264	Parse a news group .
12265	Parse a header from a line .
12266	Unpack headers from headers
12267	Perform a POST request .
12268	Run a test suite .
12269	Return a string representation of a docstring .
12270	Decorator for decorator .
12271	Return the default docstring for a docstring .
12272	Set the value of the value .
12273	Check that the value is a valid type .
12274	Return the value of the variable .
12275	Check if value is a scalar .
12276	Calculate symmetric error error .
12277	Set errors .
12278	Sets the value of this object .
12279	Import metrics from self . metrics
12280	Extract metrics from a dictionary .
12281	Filter the metrics .
12282	Call the API to call the API .
12283	Return an expression expression .
12284	Return operator operator .
12285	Add a new text to the terminal .
12286	Initialize missing properties .
12287	Returns a list of parameter names .
12288	Return a list of parameter values .
12289	Return a list of error errors .
12290	Clears all derived values .
12291	Set the method s method .
12292	Get environment variables .
12293	Get the URL parameters for the request .
12294	Perform a GET request .
12295	Delete the object .
12296	Perform a POST request .
12297	Perform a POST request .
12298	Call the API method .
12299	Validate the scene name .
12300	Verify the type of the given satellite .
12301	Get the size of a remote file .
12302	Download the images from the scene .
12303	Validate bands .
12304	Connect to the EPG .
12305	Add a prefix to a prefix .
12306	r Return the timezone for a given zone .
12307	Normalize a timezone .
12308	Convert an iterable into a string .
12309	Return a list of line positions .
12310	Convert a source line to a point .
12311	Print the results of the results .
12312	Removes the results from this query .
12313	Create a new object from a list of files .
12314	Set the chance of a game .
12315	Main entry point .
12316	Creates a rule .
12317	Converts a string to a string .
12318	Parse the grammar .
12319	Returns a list of all rules .
12320	Return a list of comments .
12321	Return a list of directives .
12322	Return the output source source source .
12323	Compile the template .
12324	Return a string representing the imported imports .
12325	Return a string representation of the parser .
12326	Returns the class definition as a string .
12327	Get the entry point for this rule .
12328	Get the definition of a rule .
12329	Get the source source source .
12330	Return a string representation of a rule .
12331	Convert an expression into an AST .
12332	Convert a node to an AST node .
12333	Return a list of operands with the given operands .
12334	Remove group groups from the given operand .
12335	Convert an AST node to an AST node .
12336	Convert an AST node to an AST node .
12337	Convert a terminal to an AST .
12338	Convert an option group to a string .
12339	Convert a repetition group to a string .
12340	Convert an AST to an AST .
12341	Convert an AST node to an AST .
12342	Convert an AST node into an AST .
12343	Convert an AST node to an AST .
12344	Convert an iterable to a list of operands .
12345	Convert an iterable to an iterable .
12346	Return a list of all directives that match the given predicate .
12347	Flatten a child node .
12348	Parse a comment .
12349	Handle the response .
12350	Create a new ID for the given id .
12351	Remove a hotkey .
12352	Add arguments to the parser .
12353	Configure logging level .
12354	Validate arguments .
12355	Convert a list of nodes to a prefix .
12356	Convert an operator to an operator .
12357	Reduce a list of operator nodes .
12358	Add arguments to the parser .
12359	Load the plugin .
12360	Get a metric definition .
12361	Returns the number of fields in the table .
12362	Returns a list of metrics for this metric .
12363	Escape metrics .
12364	Prints the fields of the field .
12365	Prints the metrics table .
12366	Generate Markdown definitions .
12367	Parse the given text .
12368	Attempts to attempt to attempt to attempt to attempt .
12369	Add arguments to the parser .
12370	Parse a time string .
12371	Output a CSV file .
12372	Output a JSON formatted string .
12373	Output a JSON string .
12374	Output the results of the results .
12375	Determine if the node is a valid default .
12376	Print a root node .
12377	Retrieves the repetition of the given region .
12378	Get a terminal node .
12379	Retrieves a repetition of text .
12380	Extract the exclusion of the given text .
12381	Count leading whitespace .
12382	Extract text from text .
12383	Return the position of the parser .
12384	Returns True if this node is empty .
12385	Add ignored ignored .
12386	Check if value is a type .
12387	Convert this node into a flattened tree .
12388	Return a copy of this node .
12389	Merge two nodes .
12390	Return a new type .
12391	Parses the contents of this node .
12392	Return the position of the current position .
12393	Return the maximum position of the read position .
12394	Move the next character to the next character .
12395	Generate next line .
12396	Move the previous line .
12397	Return the last line of the last line .
12398	Increment the cursor position .
12399	Save current context .
12400	Restore the current context .
12401	Return a string representation of this message .
12402	Set the name of this object .
12403	Count the number of variables .
12404	Count the number of functions .
12405	Updates the number of functions .
12406	Update the scope .
12407	Return a new scope .
12408	Update the intersection of this set .
12409	Return the intersection of the current scope .
12410	Update the difference between two sets .
12411	Return a new scope with the given signature .
12412	Update the symmetric difference between two sets .
12413	Return symmetric symmetric symmetric symmetric difference .
12414	Add a new signature .
12415	Removes the specified signature .
12416	Removes a signature from the list .
12417	Returns a list of all the values in this state .
12418	Return the signature of the signature .
12419	Returns the last signature of the signature .
12420	Get the value of a signature .
12421	Get a scope by name .
12422	Get a signature by name .
12423	Returns a list of all symbols in this scope .
12424	Decorator to inject a new interpreter .
12425	Normalize an AST node .
12426	Set the value of this node .
12427	Yield the values of the data .
12428	Check if a hit is hit .
12429	Compute the signature of the signature .
12430	Resolve the resolution of the target .
12431	Returns a list of resolved names .
12432	Sets the resolution of the given type .
12433	Delete local file .
12434	Delete a S3 bucket .
12435	Delete a file .
12436	Save local file to local file .
12437	Save the object to a file .
12438	Save object to file .
12439	Get a list of S3 bucket names .
12440	Create an enum enum .
12441	Check if a function is valid .
12442	Add a callable to the chain .
12443	Add a method to the class .
12444	Decorator to register a class .
12445	Decorator to define a rule .
12446	Decorator to register a directive .
12447	Decorator for decorator .
12448	Bind a rule to destination .
12449	Check if the stream is read .
12450	Push the rules to the tree .
12451	Populate the rule tree .
12452	Get the value of a node .
12453	Parse a stream .
12454	Begin a tag .
12455	End a tag .
12456	Set the rules .
12457	Set hooks for hooks .
12458	Set the directive directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Checks if the given text is in the stream .
12462	Return True if the stream is read .
12463	Read a character .
12464	Check if the current context is read .
12465	Check if the context is ignored .
12466	Set the hit_type of the cluster .
12467	Sets the cluster_type of the cluster .
12468	Checks that the hits match the given hits .
12469	Add a rule name .
12470	Add a rule to the parser .
12471	Add a rule .
12472	Add sequences to the parser .
12473	Add alternatives to the parser .
12474	Add a range to the parser .
12475	Add a new rule .
12476	Add a capture .
12477	Add a binding to the parser .
12478	Add a hook to the parser .
12479	Set the value of a parameter .
12480	Parse a string .
12481	Parse a single character .
12482	Validate a parameter .
12483	Set the name of a hook .
12484	Add a hook parameter .
12485	Gets the rules for the given rule .
12486	Ignore the csv file .
12487	Add a new state .
12488	Return a dot representation of the graph .
12489	Write the dot file to a dot file .
12490	Write PNG to PNG file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	Reset the living state .
12494	Implementation of inferring .
12495	Instantiates a sub - expression .
12496	Infer the identifier of an identifier .
12497	Initiate a literal expression .
12498	Dump all nodes in the local cache .
12499	Parse a rule rule .
12500	Return the exit statement .
12501	Return a list of statements .
12502	visit a node
12503	visit a node .
12504	visit a hook .
12505	visit a rule
12506	Visitor for capture .
12507	visit a scope .
12508	Return an AST node .
12509	Visit a sequence of expressions .
12510	visit an expression .
12511	Return a list of AST nodes .
12512	Return an astroid node .
12513	Convert a string to a string .
12514	Set indentation .
12515	Convert a list into a string .
12516	Print a list of nodes .
12517	Populate a sequence of sequences .
12518	Populate a new edge register .
12519	Builds the state tree tree .
12520	Return true if value is equal to value .
12521	Create a Grammar object from a string .
12522	Create a Grammar object from a file .
12523	Parse the given source .
12524	Parse a file .
12525	Sets the value of a node .
12526	Set the value of a node .
12527	Get the subnode node .
12528	Default serializer for serialization .
12529	Get a list of dids from a query .
12530	Dump a deposition into a dictionary .
12531	Get a list of records from the database .
12532	Get a list of records from the database .
12533	Extract BibDocDocDoc from BibTeX file .
12534	Dump a BibDoc to a file .
12535	Returns the number of checks for the database
12536	Check if a BibDocDoc is a BibDoc .
12537	Dump an object to a dict .
12538	Returns the number of users in the account
12539	Dump a uuid to a dictionary .
12540	Get a list of featured communities .
12541	Return a list of modified records from the database .
12542	Return a set of modified record IDs for a given date .
12543	Get a list of roles for a collection .
12544	Get a list of revisions for a given record .
12545	Return a list of dictionaries for a record .
12546	Serialize a MARC XML file .
12547	Get a list of records from the database .
12548	Dump a record to a file .
12549	Dump data into a dictionary .
12550	Load a model from the database .
12551	Collect all things in a dict
12552	Initialize the application context .
12553	Decorator for memoization .
12554	Return the run SQL query string .
12555	Get a list of roles for a given action .
12556	Get a list of actions for the given query .
12557	Dump data to a dict .
12558	Load a token from a token .
12559	Import data from a record .
12560	Returns the config value for the given config variable .
12561	Dump an object to a dict .
12562	Get a list of users from the database .
12563	Get user accounts .
12564	Dump user information to a dictionary .
12565	Loads a deposit deposit .
12566	Creates a new record from the database .
12567	Load a record from the database .
12568	Load records from a source file .
12569	Return a list of records for a given record .
12570	Load data from a list of files .
12571	Load communities from sources .
12572	Load users from sources .
12573	Loads a list of dependencies .
12574	Return a list of profiling statistics .
12575	Main entry point .
12576	Dump the profiler .
12577	Delete the current profile .
12578	Delete the current profile .
12579	Get the current status .
12580	Disable timestamp .
12581	Load a user .
12582	Calculate translation of images .
12583	Convert images to a list of images .
12584	Add one or more dimensions to the array .
12585	Create a new record .
12586	Create a record .
12587	Update a record .
12588	Create a persistent persistent identifier .
12589	Delete a record .
12590	Creates a new file .
12591	Create a new file object .
12592	Delete all buckets .
12593	Return a list of persistent identifiers .
12594	Prepare the list of revisions
12595	Prepare the list of files
12596	Prepare the list of pids for this repository .
12597	Check if the record is deleted .
12598	Load a community .
12599	Load a featured community .
12600	Dump a thing to a file .
12601	Check if a thing exists .
12602	Delete event handlers .
12603	Calculate the magnitude of a vector .
12604	Normalize a vector .
12605	Transform the data to a texture .
12606	Ensures that the data is already created .
12607	Sets the length of the data .
12608	Set the parent .
12609	Get the pivot point for the given data .
12610	Start animation .
12611	Set the state of this object .
12612	Unset the current state .
12613	Set the state of the mesh .
12614	Unset state .
12615	Ensure that the model has been created .
12616	Redraw the model .
12617	Draw the model .
12618	Set the model .
12619	Write reports to a file .
12620	Create a test suite .
12621	Add a menu .
12622	Redraw the label
12623	Redraw the label
12624	Draw the background .
12625	Delete a widget .
12626	Redraw the label
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label to the panel .
12630	Add a button to the dialog .
12631	Exit the menu .
12632	Add a button to the dialog .
12633	Add a button to the dialog .
12634	Update the progress bar .
12635	Render actors .
12636	Render the scene .
12637	Creates a new step .
12638	Check if a resource exists .
12639	Add a category .
12640	Get the image texture .
12641	Get a model object by name .
12642	Load model .
12643	Get model data from cache .
12644	Load a model from a JSON file .
12645	Add a widget .
12646	Draw this menu .
12647	Redraw the background .
12648	Redraw the window .
12649	Checks if the mouse position is within the specified position .
12650	Calculate the number of samples .
12651	Add a layer .
12652	Get the region of the buffer .
12653	Draw an array of vertices .
12654	Add a new action .
12655	Execute the action .
12656	Register a new registry .
12657	Add a layer .
12658	Draw the layout .
12659	Delete the layer .
12660	Return a list of border lines .
12661	Get the offset of this widget .
12662	Returns the size of the widget .
12663	Read a mesh from a hdf5 file .
12664	Creates a connection to a network .
12665	Set the fields of this object .
12666	Add fields to the list .
12667	Check if all elements are valid .
12668	Return the space of this element .
12669	Calculate the centroid of the mesh .
12670	Calculate angles for each element .
12671	Compute the edges of the graph .
12672	Return a pandas DataFrame .
12673	Convert a tag to a node .
12674	Set the surface of the surface .
12675	Convert a set of surface elements to a surface .
12676	Return the metadata of the field .
12677	Return a pandas DataFrame .
12678	Make sure the workdir exists .
12679	Run the postprocess .
12680	Runs the gmsh mesh .
12681	Read a history file .
12682	Read a field from a file .
12683	Convert a list of lists into a string .
12684	Calculate the equivalence of a node .
12685	Return a string representation of a dataset .
12686	Parse the response .
12687	Perform a GET request .
12688	Write the XYZ report to a file .
12689	Writes a field to a field .
12690	List available component types .
12691	Return the error message for the given instance .
12692	Checks if the given descriptor is raised .
12693	Sets the data of the data .
12694	Get the time mode for the given axis .
12695	Set the options for plotting .
12696	Create a class from the given function name .
12697	Process all notifications .
12698	Convert value to float .
12699	Convert a string to a float .
12700	Render a GraphR renderer .
12701	Convert unicode string to unicode .
12702	Clean HTML from HTML .
12703	Returns True if the given MIME type matches the given type .
12704	Clean up the domain name .
12705	Return a list of domain names .
12706	Creates a hash for a key .
12707	Collect words from a sentence .
12708	Index the contents of a stream .
12709	Return a list of hash keys for the given hash .
12710	Calculate the total frequency for the given hashes .
12711	Iterate over the hash of a hash .
12712	Iterate over the top - level hash index .
12713	Create a stream of stream items .
12714	Create a stream item from a stream .
12715	Create a content item from a stream .
12716	Read a variable .
12717	Reads an object from the stream .
12718	Serialize a stream key .
12719	Convert a stream item into a dictionary .
12720	Context manager for working directory .
12721	Remove prefix from a string .
12722	Remove suffix from a string .
12723	Checks if the given string is a sequence of strings .
12724	Create a cube .
12725	Start the server .
12726	Shut down the server .
12727	Register a route .
12728	Decorator to register an error handler .
12729	Return the content of a file .
12730	Return the error handler for the response .
12731	Add a route to the route .
12732	Resolve a route .
12733	Try to resolve a route .
12734	Normalize pattern .
12735	Return the response body .
12736	Add a header .
12737	Set a cookie .
12738	Return the status of the response .
12739	Return the content type .
12740	Get the value of a key .
12741	Removes a path from a path .
12742	Return a list of open files
12743	Print the file stats .
12744	Run a new work unit .
12745	Attempt to fetch a file from a file .
12746	Get the lines of a file .
12747	Generate a random species pair .
12748	Generate a random adjacency pair .
12749	Morphs the given sentence .
12750	Display similarity information .
12751	Gets the HATK for a given sentence .
12752	Display entities .
12753	Calculate the short sum of a single sample .
12754	List keywords .
12755	Display the chronology information .
12756	Create a new stage .
12757	Create a list of stages .
12758	Initialize all stages .
12759	Run the given string .
12760	Runs all files in the given directory .
12761	Runs the given transform .
12762	Replace the given configuration with the given config .
12763	Create a Flask application .
12764	Generate a list of names for each sentence .
12765	Returns a list of all the segments in the chain .
12766	Return True if any of the given chain matches the given chain .
12767	Look up the tags for a match .
12768	Match a stream of tokens .
12769	Create a scanner file .
12770	Align a chunk to a chunk .
12771	Terminate the child process .
12772	Multiply multipy .
12773	Fix email addresses .
12774	Generate sentence sentences .
12775	Make a list of labels for a stream .
12776	Create a list of sentences from the stream .
12777	Convert HTML entities to unicode string .
12778	Create a file - like file .
12779	Create a scanner file .
12780	Remove whitespace from a string .
12781	Align a chunk to a chunk .
12782	Convert a stream to absolute paths .
12783	Instantiate a pipeline .
12784	Generate a chunk from a file .
12785	Convert HTML to HTML .
12786	Convert HTML tags to HTML .
12787	Creates a clean file from a file .
12788	Remove a span from a string .
12789	Main entry point .
12790	Load a stage .
12791	Load the external files from the given path .
12792	Loads a module from a module .
12793	Initialize a stage .
12794	Read bytes from an iterator .
12795	Check if the given URL is valid .
12796	Return a list of labels .
12797	Yield all files in a directory .
12798	Yields a list of tasks .
12799	Returns a random number of random rows .
12800	Generate tokens from sentence .
12801	Returns a list of sentences .
12802	Decorator for retry .
12803	Verify that the given data is valid .
12804	Get a bucket s bucket .
12805	Deserialize a stream .
12806	Retrieves a chunk from a bucket .
12807	Convert a stream id to a kvlid .
12808	Convert a key to a stream .
12809	Return the key for the given stream .
12810	Main entry point .
12811	Build a parser .
12812	Add xpaths to an XML stream .
12813	Convert a sentence to a list of tokens .
12814	Convert a list of characters to a list of characters .
12815	Generator that yields a list of characters from a string .
12816	Add a new tag .
12817	Return the text of the element .
12818	The text index of the text .
12819	Yield all descendants of an element .
12820	Return a list of elements that match the given source .
12821	Select an element by name .
12822	Return a list of names matching the given pattern .
12823	Select an attribute of an element .
12824	Gets the siblings of the child .
12825	Pretty print an XML element .
12826	Called when an input file is installed .
12827	Execute an input file .
12828	Convert svg to PDF file .
12829	Convert a PNG file to PNG .
12830	Get the environment for the given file .
12831	Setup the template file .
12832	Fill the contents of the document .
12833	Save the content of the template .
12834	Create a document from a template file .
12835	Fill an SVG document .
12836	Render a file .
12837	Render a file .
12838	Parse an XML string .
12839	Parse an HTML document .
12840	Parse HTML fragment .
12841	Insert text into the tree .
12842	Insert a new node .
12843	Return a clone of this node .
12844	Execute the command line .
12845	Return a string representation of a node .
12846	Insert a child into the tree .
12847	Parse config file .
12848	Get the credentials for the Google API .
12849	Create a datetime object from the config .
12850	Create a calendar .
12851	Main entry point .
12852	Get the extension of a file .
12853	Add an extension to a file .
12854	Get a temporary file .
12855	Remove all files in a directory .
12856	Convert csv file to JSON .
12857	Replace content with new content .
12858	Parse the tag .
12859	Check if the next tag is a link .
12860	Create an HTML tag .
12861	Create a strong strong link .
12862	Creates a new line .
12863	Parse attributes from a tag .
12864	Remove line breaks .
12865	Parse a URL .
12866	Parse an attribute .
12867	Translate a dictionary into a dictionary .
12868	Serialize this object to a JSON string .
12869	Find all files in a folder .
12870	Concatenate strings .
12871	Return the first part of the given part .
12872	Iterate over the contents of the given part .
12873	Generate the length of a string .
12874	Yield a boolean value .
12875	Iterate over a sequence of expressions .
12876	Look up a table in a table .
12877	Replaces the given SVG code .
12878	Check if a svg file is a SVG file .
12879	Merge two svg files .
12880	Merge PDF files .
12881	Implements a svg file .
12882	Embeds a SVG file .
12883	Check input inputs .
12884	Check if the function is valid .
12885	Recursively recursively recursively .
12886	Create a template for the given template .
12887	Recursively recursively recursively recursively recursively .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert obj to boolean .
12891	Serialize an AST node .
12892	Change the encoding of the file .
12893	Save a QR code .
12894	Launch a sound .
12895	Execute a command .
12896	Convert a PDF file to PDF .
12897	Returns a list of all the options for the given type .
12898	Transform a Geometry object to a Geometry .
12899	Create a Geometry object from a GeoJSON object .
12900	Expand self to self .
12901	Computes the intersection between two sets .
12902	Return True if the intersection of the other intersecting box .
12903	Create a polygon object .
12904	Create a new DataFrame from a ZNM .
12905	Write the data to a file .
12906	Selects a table of conditions .
12907	Create a table of nucleotide sequences .
12908	Return the intersection of this table .
12909	Return a table with the given table .
12910	Return the odd number of elements .
12911	Return the odd number of elements .
12912	Return the number of elements that are equal .
12913	Returns the error of the table .
12914	Calculate the mean of the error .
12915	Compute the binding energy .
12916	Calculate the number of n - n - n - dimensional n - dimensional n - dimensional n .
12917	Calculate the S1N1 n - th nthn .
12918	Calculate the S2p2p2p2p2p2p2 .
12919	Calculate the S1 p1 p1 p1 .
12920	Generate a table of relative coordinates .
12921	Create a DB session .
12922	Derive the key from the master .
12923	Bootstrap database .
12924	Search for a domain .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract the hgs from a file .
12928	Return the absolute path prefix for the given path .
12929	Return the SID of the SID .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file .
12933	Return a list of available drivers .
12934	Return an instance of the given path .
12935	Convert geojson to an array .
12936	Convert raster to raster
12937	Open a raster file .
12938	Create a new image from the given data .
12939	Copies the source to the destination .
12940	Return a list of options
12941	Create a raster object .
12942	Sets the GeometryTransform .
12943	Read an array of values .
12944	The envelope of the envelope .
12945	Return the image driver .
12946	Create a new raster .
12947	Return the masked array of the mesh .
12948	Retrieves the ndata data .
12949	Read a raster file .
12950	Resample the image .
12951	Save image to file .
12952	Sets the projection .
12953	Rewrite the data to a file .
12954	Calculate the chunk length of a chunk .
12955	Look up the alphabet for the given alphabet .
12956	Encode a single chunk .
12957	Convert a chunk to a long integer .
12958	Get a chunk of data .
12959	Decorator to memoize a function .
12960	Returns a regex for the given file .
12961	Normalize date format .
12962	Detect the timezone for the given locale .
12963	Convert this object to a dictionary .
12964	Activate pdb hook .
12965	Pretty print an object .
12966	Handle a job .
12967	Main worker function .
12968	Run a worker pool .
12969	Sets the classification .
12970	Send a message to the queue .
12971	Turn on a device .
12972	Turn a switch on the device .
12973	Enable brightness on the device .
12974	Turn off a device .
12975	Send a message to the queue .
12976	Send a message to the server .
12977	Creates an adapter object .
12978	Corresponds to IDD Field Nature .
12979	Update the configuration dictionary .
12980	Reset all defaults .
12981	Set config files .
12982	Iterate over all option values .
12983	Generate default values for all options .
12984	Create a config file .
12985	Update configuration dictionary .
12986	Read a configuration file .
12987	Read configuration files .
12988	Return a list of names for a section .
12989	Return a list of sections for this command .
12990	Solve the options for a command .
12991	Add options to parser .
12992	Build the parser .
12993	Parse command line arguments .
12994	Compile command line command .
12995	Execute a command .
12996	Execute bash command .
12997	Execute bash command .
12998	Start a master server
12999	Create a new worker .
13000	Handle a single line .
13001	Close the connection .
13002	Handle a job .
13003	Handle a response .
13004	Close the job .
13005	Run all jobs in the master .
13006	Close the server .
13007	Called when a waiter is done .
13008	Add a result .
13009	Wait for changes to be completed .
13010	Load the next job .
13011	Set the result of the job .
13012	Add a result to the queue .
13013	Cancel the queue .
13014	Wait until the job is finished .
13015	Distributed jobs .
13016	Add a new job to the database .
13017	Get the current job .
13018	Retrieve a job .
13019	Add a result to this job .
13020	Called when the job is set .
13021	Close the dialog .
13022	Sanitize a list of strings .
13023	Return True if the given object matches the given regex .
13024	Get all entries in the cache .
13025	Get the EC2 region .
13026	Filter a list of entries .
13027	Get a host name .
13028	Create a new instance from a dictionary .
13029	Get the attribute of the attribute .
13030	Sort a list of entries .
13031	Return a string representation of the table .
13032	Creates an instance from an instance .
13033	Return True if the filter matches the filter
13034	Display the public IP address .
13035	Render a list of entries .
13036	Add a timestamp to the logger .
13037	Setup logging .
13038	Create a logger .
13039	Create a Celery server
13040	Get information about a worker .
13041	Delete a worker .
13042	Configure a switch option
13043	Return a dict of configuration options .
13044	Set the configuration of a config string .
13045	Called when a config file has changed
13046	Creates a complete completion file .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare a table of rows .
13051	Colorize the given number .
13052	Get the color of a string .
13053	Return a random color .
13054	Get input from prompt .
13055	Check if a user is authenticated .
13056	Check if token is valid .
13057	Decorator to ensure that a resource is authenticated .
13058	Check if the process is running .
13059	Import a module .
13060	Get the network IP address .
13061	Perform a request .
13062	Prepare a POST request .
13063	Start the application .
13064	Render a template .
13065	Run a command .
13066	Stream a list of commands .
13067	Stream a list of commands .
13068	Get the network days of a given date .
13069	Get the path of a command .
13070	Build a ssh command .
13071	Builds a SCP command .
13072	Copy a file to a remote host .
13073	Creates a copy of a remote file .
13074	Run ssh command .
13075	Connect to a SSH server .
13076	Load a LSI profile .
13077	Initialize a LSIProfileProfile profile .
13078	Add a relationship to the database .
13079	Returns a list of all the related relationships .
13080	Load all relationships from source .
13081	Add a content type .
13082	Load a part of the content type .
13083	Search for the given name .
13084	Parse a content type .
13085	Parse a chat string .
13086	Build a JWT object .
13087	Assign the force field to the force field .
13088	Calculate the maximum NPNP parameters .
13089	Return a dict of field parameters .
13090	Convert this object to a stream .
13091	Return a generator that yields all the segments that match the given name .
13092	Copy a directory to a directory .
13093	Open a bucket .
13094	Uploads a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload content to bucket .
13097	List all files in a directory .
13098	Return a list of all directories in the given directory .
13099	Create a prefix .
13100	Delete a file .
13101	Ensure that the user is logged in .
13102	Return a human readable string .
13103	Delete a bucket .
13104	Return the URL for the current site .
13105	Decorator to silence spaces .
13106	Gets the URL for a project .
13107	Return a string containing the base URL .
13108	Calculate the interaction energy of an AMPA .
13109	Calculate the internal energy of an AMP object .
13110	Returns a list of all hotspots for each sample .
13111	Get a token from a host .
13112	Upload a ltd file .
13113	Check if a Travis event is skipped .
13114	Purge a surrogate key .
13115	Register a build .
13116	Confirm a build URL .
13117	Recursively recursively recursively recursively recursively .
13118	Main entry point .
13119	Edit a file .
13120	List files in a directory .
13121	Split a path into a list .
13122	Find the files in a path .
13123	Get editor editor .
13124	Process a module .
13125	Generate a chart .
13126	Generate HTML for a chart .
13127	Serialize data to a DataFrame .
13128	Patch JSON data .
13129	Convert a json string to HTML .
13130	Convert dict to pandas DataFrame
13131	Write HTML to a file .
13132	Creates a chart for the given data type .
13133	Encode X and y - axis fields .
13134	Create a GitHub role for a GitHub user .
13135	Return the tarball URL for the app .
13136	Create an app .
13137	Delete an app .
13138	Decorator to create an iterator .
13139	Generate a random integer .
13140	Generate a random IP address .
13141	Generate a date .
13142	Returns a session object .
13143	Make an API request .
13144	Create a new build .
13145	Check the build status .
13146	Generate a sequence of sequences .
13147	Decorator for memoization .
13148	Decorator for unique unique values .
13149	Register subcommands .
13150	Get the root parser .
13151	Return the description of the documentation .
13152	Return the help string .
13153	Run the command .
13154	Encodes the data into a string .
13155	Retrieves a list of tuples .
13156	Gets the last activity of the activity .
13157	Get activity list .
13158	Get activity data for a given athlete .
13159	Return the endpoint endpoint endpoint .
13160	Returns the activity endpoint for the given athlete .
13161	Get a request for a given endpoint .
13162	Create a tarball .
13163	Return a URL for the given view .
13164	Return the title of the language .
13165	Return a human readable person .
13166	Get the last name of the last language .
13167	Render the data
13168	Set the dataset .
13169	Render the chart .
13170	Check the type of a chart .
13171	Return the URL for the API .
13172	Wrapper around openview
13173	Save image to file .
13174	Open a URL .
13175	Fetches the image of this image .
13176	Write url to file .
13177	Calculate the SHA256 hash .
13178	Calculate the amount of floats .
13179	Decorator for creating an entity class .
13180	Return the contents of the object .
13181	Return a list of signed JWT keys .
13182	Unpack a metadata statement .
13183	Sign a metadata statement .
13184	Evaluate a metadata statement .
13185	Recursively check the metadata for a federation .
13186	Extends a MMS request to a request .
13187	Parse command line arguments .
13188	Add command line arguments .
13189	Applies log levels to log levels .
13190	Log a message .
13191	Convert a word to a dictionary .
13192	Iterate over all words in a word .
13193	Convert a class name to a string .
13194	Transform a dataframe into a list of timeseries .
13195	Get the last value of a given time series .
13196	Validate page number .
13197	Get the number of items from an iterator .
13198	Change the mode of a file .
13199	Create an internal service service .
13200	Create a signed signer service .
13201	Sign a request .
13202	Create a new request .
13203	Update a metadata statement .
13204	Update the signature .
13205	Yield the contents of a bundle .
13206	Create a bundle from the given data .
13207	Returns the urls for the given asset type .
13208	Generate HTML tags for given asset type .
13209	Generate HTML tags for an asset .
13210	Parse a URL .
13211	Find links in a URL .
13212	Connect to AMP server .
13213	Get the list of modules for this project .
13214	Import services from the service
13215	Convert a string to a date .
13216	Select fields from a document .
13217	Convert datapoints to a date .
13218	Print the cursor cursor .
13219	Print the cursor to the cursor .
13220	Returns a list of tasks for the given dependency graph .
13221	Add default deprecation .
13222	Add default attributes to a project .
13223	Add default sequences to the database .
13224	Add a new user to the database .
13225	Add a new post to the database .
13226	Create a new shot .
13227	Create all tasks in a project .
13228	Connect to a peer .
13229	Send a message to the server .
13230	Get a config value from a section .
13231	Decorator to add a function to a function .
13232	Decorator to add a function to a function .
13233	Decorator to add a function to a function .
13234	Decorator to add a glance to an event .
13235	Decorator to add a new event type .
13236	Decorator to add a key to a key .
13237	Decorator to add a heatprocessor to a function .
13238	Add a factory to the registry .
13239	Remove a factory .
13240	Connect to the given factory .
13241	Receive data from a connection .
13242	Remove a connection .
13243	Call the remote command .
13244	Create a new connection .
13245	Called when a connection is received .
13246	Send data to the server .
13247	Send data to the server .
13248	Destroy a connection .
13249	Get the local protocol for a given connection .
13250	Called when a remote connection is received .
13251	Disconnect the given connection .
13252	Convert a string to a string .
13253	Prints the right side of the given string .
13254	Convert a version number into a string .
13255	Identify a unit .
13256	Assert that the given value is a unit .
13257	Pad the data to a block .
13258	Unpad data with padding .
13259	Signs the signature of the request .
13260	Gather metadata for metadata .
13261	Prints a list of words .
13262	Parse arguments .
13263	Prints a list of words .
13264	Called when a packet is received .
13265	Close the type of a type .
13266	Create a new RPC stub .
13267	Ping a remote call .
13268	Return a regex for the command .
13269	Deserialize a string from a string .
13270	Convert an object to a string .
13271	Verify that the metadata is valid .
13272	Parse the response from the remote server .
13273	Dump a database to a database .
13274	Returns a list of all databases
13275	Return a list of local files for a given path .
13276	Synchronize a folder with the given bucket .
13277	Decorator to ensure that token is required .
13278	Authenticate a user .
13279	Builds the given package .
13280	Return an instance of Readable .
13281	Load data from a JSON file .
13282	Sign a JWT using JWT .
13283	Creates a signed signed signed signature .
13284	Add a library to the library .
13285	Deserialize a test directory .
13286	Main entry point .
13287	Return the score of a letter .
13288	Compute the score of a word .
13289	Return a list of word lists of words .
13290	Checks if a string is valid .
13291	Main entry point .
13292	Main entry point .
13293	Send a string to the server .
13294	Gets the response for a command .
13295	Parse command line arguments .
13296	Run a response .
13297	Write the response to the transport .
13298	Called when a connection is lost .
13299	Build a protobuf .
13300	Create a Keyjar object from a JSON string .
13301	Load a key from a JSON file .
13302	Process a message .
13303	Process a message .
13304	Process a notification .
13305	Processes a glance .
13306	Process a message .
13307	Process a message .
13308	Processes a heat collector .
13309	Start the server .
13310	Print a message to stdout .
13311	Print a message to stdout .
13312	Register a new command .
13313	Register a new command .
13314	Convert a value to a string .
13315	Initialize the value from a string .
13316	Updates the completion dictionary of completions .
13317	Start the connection .
13318	Initialize a MQQMQ connection .
13319	Initialize the service modules .
13320	Initialize the listeners .
13321	Initialize the Cinder listeners .
13322	Initialize the listeners .
13323	Initialize the listeners .
13324	Initialize the heatmap .
13325	Listen for OpenStackStack .
13326	Get song info .
13327	Download song from song .
13328	Execute the instruction .
13329	Loads a name from the registry .
13330	Call the function callable .
13331	Dump a database to a database .
13332	Render the given code .
13333	Run the application .
13334	Run the application .
13335	Cleans up a directory .
13336	Copy a directory to a directory .
13337	Decorator for debugging .
13338	Get the mime time .
13339	Check if a file has changed
13340	Sync the database
13341	Clear the directory .
13342	Perform a scrape .
13343	Download the image .
13344	Check if the image has changed .
13345	Convert a template tag to a template .
13346	Find and return the caller s caller .
13347	Get the definition of the PE component .
13348	Main entry point .
13349	Find a symbol by name .
13350	Returns True if the given peep is contained in the PE .
13351	Returns True if the given peep is a valid PE .
13352	Returns the data type of the data type .
13353	Returns a list of related attributes for the given ROC .
13354	Creates an enum .
13355	Creates a function for the given model .
13356	Create an external entity .
13357	Creates a function for the given model .
13358	Creates a constant and returns a constant .
13359	Creates an operation .
13360	Creates a derived attribute .
13361	Creates a class for the given object .
13362	Create an associative association .
13363	Creates a linked association .
13364	Create an association .
13365	Create a component component .
13366	Send a call to the server .
13367	Accept a reply .
13368	Send a reply to the server .
13369	Raise an exception .
13370	Send a call to the client .
13371	Establish a worker for a given call .
13372	Dispatch a reply to the remote server .
13373	Guess the type of the given value .
13374	Deserialize a value from a string .
13375	r Return a new line .
13376	r Return the rpc expression .
13377	Retrieve a feature from the database .
13378	Get all documents in the database .
13379	Put items into a list .
13380	Delete a document .
13381	Delete all documents .
13382	Delete the index .
13383	Iterate over a set of hits .
13384	Iterate over the IDs of the given keys .
13385	Scan a prefix for a given prefix .
13386	Iterate over prefixes .
13387	Iterate over the results .
13388	Iterate over the results of a query .
13389	Iterate over keywords .
13390	Iterate over keywords .
13391	Iterate over all documents in the database .
13392	Return a list of feature names .
13393	Create a list of keys that match the given keys .
13394	Create a new index .
13395	Create the mapping for the field type .
13396	Get the index mapping .
13397	Retrieves the field types for the given type .
13398	Create a composite index from a query .
13399	Return the number of bytes in a file .
13400	Count the number of bytes in the database .
13401	Return a pretty formatted string .
13402	Run the docopt command .
13403	Return a string representation of an error message .
13404	Convert an object to a pretty formatted string .
13405	Generate a unique identifier .
13406	Check that the constraint is unique .
13407	Check if a link is valid .
13408	Check if a subtype is a subtype .
13409	Generate a feature index .
13410	Transform a value to a string .
13411	Put items into the database .
13412	Delete all records from the database .
13413	Scan a sequence of keys in a table .
13414	Iterate over all keys in the table .
13415	Scan a value in the table .
13416	Returns the index prefix for the given index .
13417	Return the index prefix for the given index .
13418	Scan the index prefix for the given index .
13419	Define an index .
13420	Put an index into the database .
13421	Put a value into the database .
13422	Generate index keys for the given index .
13423	Returns the index for the given index .
13424	Check the pypi package name .
13425	Add a direction to the given language .
13426	Get the type of the type
13427	Get the attribute of an object .
13428	Build the core type for the core .
13429	Builds an enum type .
13430	Build an XML type for a complex type .
13431	Builds the user type for a user .
13432	Build the type of the type
13433	Build an XML class .
13434	Build a component of the component .
13435	Build an XML schema .
13436	Convert a XML string to a string .
13437	Fetches a list of banners .
13438	Set the position of the position .
13439	Decorator to track a function .
13440	r Equivalent to a double precision .
13441	r Mark a note .
13442	r Return an array of an array .
13443	r Return the level tag .
13444	r Return a new GEG element .
13445	r Assert that the given token is equal .
13446	r Return the DOT file .
13447	r Return the LST clause .
13448	r Return the RST block .
13449	r Return the question .
13450	r Return the LSTAN string .
13451	r Return the next token .
13452	r Return the number of expansions .
13453	Create a queue .
13454	Delete a message
13455	List all queues .
13456	Returns a list of all exchanges .
13457	Purge a message .
13458	Create a MIME message .
13459	Read the contents of the image .
13460	Return True if text is visible .
13461	Main entry point .
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Serialize a class .
13465	Main entry point .
13466	Search for a given query .
13467	Partition a collection .
13468	Runs the robot .
13469	Helper function to return a translation string .
13470	Find the link between two instances .
13471	Sets the attributes of this object .
13472	Compute the lookup key for the given instance .
13473	Compute the index of the given instance .
13474	Returns the type of the attribute .
13475	Create an instance of this instance .
13476	Iterate over all instances of this instance .
13477	Add a class to the class .
13478	Send a message .
13479	Receive a message from a socket .
13480	%prog dead code
13481	Parse emails .
13482	Decorator for registering a function .
13483	Return a dictionary of the rpc spec .
13484	Normalize a POST request .
13485	Read next value .
13486	Accepts an SSPS instance .
13487	Accepts a CPCC CDC .
13488	Accepts an ephemeral packet .
13489	Get the brightness of the image .
13490	Match pattern .
13491	Find the first occurrence of the text .
13492	Return the selection for a character .
13493	Called when the cursor is changed .
13494	Return the exception information .
13495	Create a new interactive prompt .
13496	Get an instance of mapper .
13497	Add a function to the URL .
13498	Add a function to the URL .
13499	Add a function to the store .
13500	Add a function to the store .
13501	Perform a GET request .
13502	Execute the console .
13503	Updates the pressed cursor .
13504	Determine whether the key is pressed .
13505	Removes the previous previous history .
13506	Generate a new history .
13507	Handle the reply reply .
13508	Check if the current state is locked .
13509	Get the edited history for the given index .
13510	Set the history .
13511	Store the history of the input buffer .
13512	Close the user .
13513	Build a collection of records .
13514	Convert a collection to a pandas DataFrame .
13515	Returns a Pandas DataFrame with the given data .
13516	Set the attributes of this object .
13517	Subscribe to the topic .
13518	Log a message .
13519	Merge lists of lists .
13520	Iterate over the given view .
13521	Convert a notebook to a notebook .
13522	Get the platform version .
13523	Get the importer for the given path .
13524	Return a string representing a string .
13525	Parse version string .
13526	Determine whether a set of requirements are set .
13527	Add a new dist .
13528	Return a list of all installed plugins .
13529	Get the cached file path for the given archive .
13530	Parse a string .
13531	Parse the package info .
13532	Computes the dependencies of the dependencies .
13533	Parses the given filename .
13534	Collapse leading whitespace .
13535	Hide a completion event .
13536	Show a completion event .
13537	Get the current text cursor .
13538	Updates the current selection .
13539	Register an admin site .
13540	Return a list of disk partitions .
13541	Get the number of CPU times .
13542	Returns a list of cpu times .
13543	Read raw bytes from the console .
13544	Read raw data from stdout .
13545	Updates the tab bar .
13546	Create a new tab .
13547	Add a new frontend .
13548	Add a menu to the menu .
13549	Generate dynamic dynamic dynamic magic magic .
13550	Populate the magic menu menu .
13551	Close the window .
13552	Return the password for a given password .
13553	Check if the given password is valid .
13554	Generate a boolean for a boolean element .
13555	Return a string representation of an item .
13556	Gets the autocomplete_boolean .
13557	Toggles the given object .
13558	Checks if the user has changed .
13559	Returns True if the user can be deleted .
13560	Add children to the graph .
13561	Create a BBI tree .
13562	Submit a list of jobs .
13563	Validate the given tree .
13564	Make a color table .
13565	Return a ColorSchema object .
13566	Add a color scheme to this table .
13567	Sets the active color scheme .
13568	Return the path to the home directory .
13569	Handle subprocess .
13570	Handle the input request .
13571	Wait for the kernel .
13572	Sets the current style .
13573	Get the format for the given token .
13574	Get the format of the given document .
13575	Get the format of a token .
13576	Find a command for a given command .
13577	Normalize a path .
13578	Checks that the given package name is valid .
13579	Checks that the entry points are valid .
13580	Return True if the source is blank .
13581	Takes a string and returns True if there is no blank lines .
13582	Transform a line to a string .
13583	Transform a line to an IPython file .
13584	Transform a line into a string .
13585	Transform an IPython line into a string .
13586	Parses the given line and returns True .
13587	Return True if the current line is a new line .
13588	Find the indentation of a line .
13589	Store the given lines .
13590	Reset the raw raw data .
13591	Handle cell magic magic .
13592	Append lines to the cell .
13593	Apply a cell to the source .
13594	Push a list of lines .
13595	Initialize observers .
13596	Post a notification .
13597	Returns a set of observers for a notification .
13598	Add a callback to the registry .
13599	Create a new job .
13600	Update status .
13601	Print information about a group .
13602	Flushes a group .
13603	Return the status of the job .
13604	Report the status of this job .
13605	Initialize the background job .
13606	Insert a value into the list .
13607	Return a copy of this object .
13608	Declare a special variable .
13609	Declare a list .
13610	Declare a set of sets .
13611	Set the current working directory .
13612	Move the given state to the given state .
13613	Calculate the energy of a state .
13614	Return a dict of default values .
13615	Check if the table exists .
13616	Convert a line to a dictionary .
13617	Render a list of expressions .
13618	Print a warning message .
13619	Parse the config file .
13620	Create a table of rows .
13621	Create a link .
13622	Generate javascript file .
13623	Return CSS file .
13624	Create an image .
13625	Subtract a value from a value .
13626	Multiply a value .
13627	Divide a value .
13628	Modify a value .
13629	Return the name of a model .
13630	Split a line into a string .
13631	Add options to the parser .
13632	Add a builtin .
13633	Remove a builtin .
13634	Removes all builtins from the registry .
13635	Find the URL for the given index .
13636	Generate link links .
13637	Split a list of strings into a list of strings .
13638	Main entry point .
13639	Add a new action .
13640	Add an action to the parser .
13641	Run command line .
13642	Print coverage information .
13643	Print help message .
13644	%prog args
13645	Execute python code .
13646	Print debug information .
13647	Unserialize a list of tuples .
13648	Set the display hook .
13649	Log errors .
13650	Return True if url is a URL .
13651	Validate a URL .
13652	Validate a container .
13653	Get a set of keys from a set of keys .
13654	Return a list of random ports .
13655	Creates a remote function .
13656	Creates a parallel function .
13657	Map a sequence of sequences .
13658	Get the tail of the readline .
13659	Set the auto - indentation of this file .
13660	Initialize the log file
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a function that will be called once .
13664	Create a new main module .
13665	Cache the main module .
13666	Initialize user settings .
13667	Return a list of all namespace names for the user .
13668	Reset the current session .
13669	Delete a variable .
13670	Reset the list of selectors .
13671	Push variables to the stack .
13672	Determine if the given name is an astroid .
13673	Extracts a property from a property .
13674	Find an object by name .
13675	Implementation of inspect method .
13676	Initialize the history manager .
13677	Show traceback traceback .
13678	Show traceback traceback .
13679	Show traceback traceback .
13680	Show a syntax error .
13681	Prepare the readline .
13682	Execute the given text .
13683	Add a custom completer .
13684	Sets the completer for the current frame .
13685	Run a magic magic function .
13686	Find magic magic by name .
13687	Define a macro .
13688	Run a command .
13689	Rewrite input .
13690	Return a dictionary of the names of the user s names .
13691	Return a dictionary of user expressions .
13692	Evaluate an expression .
13693	Execute a file .
13694	Run cell magic magic .
13695	Run a single cell .
13696	Run a list of AST nodes .
13697	Enable the plugin .
13698	Expand a variable with the given arguments .
13699	Create a temporary file .
13700	Extract the input lines from the given range .
13701	Find the source code for the given target .
13702	Called when the session is executed .
13703	Publish a message .
13704	Send a message to a target .
13705	Decorator to skip a function .
13706	Decorator for test failures .
13707	Decorator to mark deprecated warnings .
13708	List all profiles in a directory .
13709	Return a list of bundled profiles .
13710	Find the version of a request .
13711	Run a command .
13712	Return the filename of a file .
13713	Read next line .
13714	Send a string to the stream .
13715	Send an integer to the device .
13716	Prepare a regex pattern .
13717	Evaluate a pattern .
13718	Evaluate the incoming data .
13719	Prepare regex patterns .
13720	Search for the given buffer .
13721	Search for the buffer .
13722	Decorator for logging .
13723	Unpack a directory .
13724	Print a message .
13725	Return the last error message .
13726	Check the output of a command .
13727	Find the source file for a given filename .
13728	Return the list of arcs in the file .
13729	Return a list of all arcs that are missing .
13730	Returns a list of all the arcs in the graph .
13731	Return a list of branch lines .
13732	Return total number of branches .
13733	Return a list of missing branches .
13734	Return a dictionary of the branches of the branch .
13735	Set precision .
13736	Calculate the total number of statements .
13737	Returns a string representation of the PCF .
13738	Highlight text highlighting .
13739	Highlight keywords .
13740	Highlight keywords .
13741	Run the given function .
13742	Unquote quotes .
13743	Indent a string .
13744	Generate a marquee string .
13745	Format screen .
13746	Determines the given text .
13747	Return a list of paragraphs in text .
13748	Find the optimal optimal number of rows .
13749	Get the default value for the given list .
13750	Compute a matrix of items .
13751	Return a list of all fields .
13752	Build the kernel arguments .
13753	Initialize SSH connections .
13754	Pretty print an object .
13755	Print a representation of an object .
13756	Helper function to get the mro . mro .
13757	Print a pretty printable .
13758	Generate a sequence of sequences .
13759	A decorator to create a function that returns a dict .
13760	Print the top level of the superclass .
13761	Print a regular expression .
13762	Print the type of an object .
13763	Prints a function to be printed .
13764	Print an exception .
13765	Set a function for a given type .
13766	Fetch a function by its name .
13767	Write an object to the buffer .
13768	Break a breakable .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print an object .
13772	Return a list of terminal colors .
13773	Writes a row to a row .
13774	Get the text of the clipboard .
13775	Get clipboard from clipboard .
13776	Get text from the clipboard .
13777	Return the path to the build directory .
13778	Replace keys in a dictionary .
13779	Extract dates from an object .
13780	Convert a datetime object to a string .
13781	Return the date as a string .
13782	Convert obj to JSON .
13783	Checks if the site directory exists .
13784	Install a script .
13785	Waits for the given time .
13786	Create a parser .
13787	Convert the source files to a Python file .
13788	Main entry point .
13789	Builds a Package Finder object .
13790	Change log level .
13791	Default logger .
13792	Called when a flag is changed .
13793	Print aliases for aliases .
13794	Print the help message .
13795	Print subcommands .
13796	Print help information .
13797	Print examples .
13798	Update config .
13799	Initialize a subcommand .
13800	Convert all flags to a list of flags .
13801	Parse command line arguments .
13802	Load config file .
13803	Generate configuration file .
13804	Downsample a numpy array .
13805	Generator for formatting information .
13806	Write a message .
13807	Change the configuration of this class .
13808	Get the help string for the given class .
13809	Get the help of a trait .
13810	Generate a configuration section .
13811	Clears the instance of the class .
13812	Creates a new instance of a subclass .
13813	Format a test failure .
13814	Print a crash handler .
13815	Flush the current socket .
13816	Start the channel .
13817	Read n bytes from file .
13818	Read an error message .
13819	Process a command .
13820	Split a string into a string .
13821	Compress a dhist histogram .
13822	Create a new magics class .
13823	Record a magic function .
13824	Decorator to mark magic magic .
13825	Decorator to mark a magic function .
13826	Return a dictionary of all the magic functions in a dictionary .
13827	Registers a magic magic object .
13828	Register a function .
13829	Convert a string to a string .
13830	Parse options .
13831	Add an option to the table .
13832	Generate a page .
13833	Create a new task .
13834	Get information about a task .
13835	Get function from taskinfo .
13836	Calculate the next run .
13837	Submit a new task .
13838	Run a task .
13839	Runs the simulation .
13840	Run a task .
13841	Run the given function .
13842	Find the URL for the config file .
13843	Connect to the kernel .
13844	Print the test steps .
13845	Create an event .
13846	Run the process .
13847	Filter a list of namespace names .
13848	Return a list of namespace names from a namespace .
13849	Mutate the options of a dict .
13850	Draw the figure .
13851	Flush all figures .
13852	Send a figure .
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate a random port .
13856	Initialize a notebook .
13857	Handle SIGINT signal .
13858	Called when the user exits .
13859	Shut down the kernel .
13860	Calculate price options .
13861	Replace text with the given text .
13862	Render a template .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix the version of the metadata
13866	Return True if the given object is a list of strings .
13867	Get the partition of a sequence .
13868	Decorator to handle pypi .
13869	Run a file .
13870	Run the given source .
13871	Report coverage information .
13872	Create an XML file .
13873	Fetch the pi file for a given file .
13874	Return a list of freq frequencies .
13875	Compute the number of digits in a file .
13876	Yield digits from a file .
13877	Calculate the frequency of digits .
13878	Calculate the frequency of digits .
13879	Calculate the number of digits
13880	Plots the fraction of two figures .
13881	Plot the number of digits in a single digit
13882	Print a debug message .
13883	Reverse view .
13884	Returns True if the given prefix is a private key .
13885	Create a test suite .
13886	Debug script .
13887	Debug script .
13888	Execute a module .
13889	Return a dictionary of all the files in the cache .
13890	Compress all files in the cache .
13891	Return a list of all files in this directory .
13892	Check if a record is allowed .
13893	Return True if record matches the given record .
13894	Format an error message .
13895	Embedded InteractiveShell shell .
13896	Main loop .
13897	Create a new CSV writer .
13898	Prepare a list of translation directories .
13899	Write a list of poids to a file .
13900	Write the header to a file .
13901	Subscribe to a user .
13902	Initialize a parser .
13903	Run a Python module .
13904	Run a python code file .
13905	Create code from a file .
13906	Create a Python code from a file .
13907	Convert an item into a table .
13908	Set the current value .
13909	Cancel completion .
13910	Select the index of a row .
13911	Select the index .
13912	Select the selected index .
13913	Select the index of the index .
13914	Select the right index .
13915	Update list of items .
13916	Calculate the frequency of words .
13917	Print word frequencies .
13918	Convert XML element to XML .
13919	Write this object to a file .
13920	Validate a pin .
13921	Sends a shared share to a shared share .
13922	Deletes a shared pin .
13923	Sends a user to the specified user .
13924	Delete a pin .
13925	Subscribe to a topic .
13926	List all subscribed subscriptions .
13927	Decorator to monitor a task .
13928	Start the progress bar .
13929	Start a task .
13930	Context manager for subtasks .
13931	Update the progress bar .
13932	Create a new progress monitor .
13933	Set the number of tasks .
13934	Create an HTML page .
13935	Make sure that the build directory is correct .
13936	Load a configuration file .
13937	Load configuration file .
13938	Reads the contents of a file .
13939	Load a flag from the config .
13940	Decode a list of arguments .
13941	Load configuration from the config file .
13942	Load configuration from the config file .
13943	Parse arguments .
13944	Convert the config data into a dictionary .
13945	Find a module by name .
13946	Stop the callback .
13947	Start the process .
13948	Stop the process .
13949	Starts a signal .
13950	Return the command line arguments .
13951	Start the process .
13952	Send a remote file to the remote server .
13953	Fetch a remote file .
13954	Count the number of engines .
13955	Start the engine .
13956	Start a new job .
13957	Return default context .
13958	Parse a job id .
13959	Write the batch script to the batch .
13960	Start the batch .
13961	Create a context menu .
13962	Append an image to the file .
13963	Append a PNG image to the screen .
13964	Appends a svg to the list .
13965	Add an image to the editor .
13966	Copy image to clipboard .
13967	Get image by name .
13968	Insert an image .
13969	Insert a svg image into the clipboard .
13970	Save image to file .
13971	Called when the client has changed .
13972	Initialize environment variables .
13973	Rewrite the input to the user .
13974	This method is called when the user is called .
13975	Sets the next input .
13976	Read a configuration file .
13977	Get a list of values from a section .
13978	Returns a list of values for the given option .
13979	Initialize the environment variable .
13980	Initialize this object from a dictionary .
13981	Load the config file .
13982	Set an attribute from a config file .
13983	Expand the given path .
13984	Set a list of delimited strings .
13985	Split a line into a single line .
13986	Return a list of keywords matching the given keyword .
13987	Return a list of attributes matching the given text .
13988	Called when the mode is changed .
13989	Return a list of files matching the given text .
13990	Return a list of aliases matching the given text .
13991	Return a list of strings matching the given text .
13992	Return the default arguments for the given object .
13993	Complete text completion .
13994	Attempt to complete text .
13995	Determine if a test matches a test .
13996	Return a list of matches matching the given criteria .
13997	Extract subdict from recursively .
13998	Return True if the user is pressed .
13999	Write the output prompt to the output .
14000	Write format data to stdout .
14001	Log output to the console .
14002	Raise an exception if it does not exist .
14003	Convert a string to a timestamp .
14004	Event handler for event loop
14005	Dispatch a control message .
14006	Dispatch a message .
14007	Start the shell .
14008	Flushes the shell stream .
14009	Publish a PyPI .
14010	Abort a request .
14011	Clear the response .
14012	Convert a topic to a string .
14013	Shutdown the socket .
14014	Adds the context to the context .
14015	Remove modules from context .
14016	Absolute absolute path .
14017	Checks if a file exists .
14018	Check if obj is a class .
14019	Check if a package is a package .
14020	Get package name from filename .
14021	Convert a label to a string .
14022	Returns the last key for the given regex .
14023	Creates a new function with the given module .
14024	Creates a new class .
14025	Get the CPU number of CPUs .
14026	Returns the command line of the process .
14027	Return a list of all open files .
14028	Return a list of connected connections .
14029	Check if a user exists .
14030	Resolve a class path .
14031	Calculate the total percentage of the total percentage .
14032	Decorator for memoization .
14033	Decorator for deprecated functions .
14034	Logs the document .
14035	Get the GPG key .
14036	Ensure the temporary directory exists .
14037	Clear temp file .
14038	Upload a document to the spreadsheet .
14039	Syncs the gsv file
14040	Download the CSV file .
14041	Uploads the file to the local directory .
14042	Clear the contents of the file .
14043	Connect to the Qt console
14044	Check if a URL is accessible .
14045	Check if the content of a URL contains content .
14046	Get the response code .
14047	Compare the content of the content type .
14048	Compare the response code .
14049	Validate data .
14050	Clear output output .
14051	Finds the given command .
14052	Create a code unit factory .
14053	Return the name of the root directory .
14054	Open the source file .
14055	Return True if the file is a python file .
14056	Return the total number of seconds .
14057	Return the result of the result .
14058	Wait until the result is reached .
14059	Returns a dictionary with the results of the engine
14060	Abort the message .
14061	Return the elapsed time .
14062	Wait for all tasks .
14063	Publish the content of the given content .
14064	Wait for all outputs to be finished .
14065	Wait until a message is completed .
14066	Absolute absolute path .
14067	Prepare a list of patterns .
14068	Return the separator for the given string .
14069	Find all python files in a directory .
14070	Return the relative filename for the given filename .
14071	Return canonical filename .
14072	Extract data from a file .
14073	Return True if the given path matches the given path .
14074	Return True if filepath matches the given pattern .
14075	Map filename to filename .
14076	Loop through the kernel .
14077	Loop through the kernel loop .
14078	Loop through the kernel .
14079	Loop through the kernel kernel .
14080	Loop through the kernel .
14081	Enable gui .
14082	Calculate the GO E .
14083	Calculate the difference between two vectors .
14084	Calculate the difference between two groups .
14085	Initialize a step .
14086	Parse a configuration file .
14087	Parse a step configuration .
14088	Initialize crash handler .
14089	Load the config file .
14090	Initialize the profile directory .
14091	Generate the default config file .
14092	Write the file .
14093	Clears the file .
14094	Return a dictionary of all lines in the file .
14095	Return a dictionary of all arcs .
14096	Write data to file .
14097	Read a file from a file .
14098	Read data from a file .
14099	Read a file from a file .
14100	Combine parallel data .
14101	Add a line of line data .
14102	Add arc data to the graph .
14103	Add a hash to the file .
14104	Return a summary of the summary .
14105	Parses a list of lines .
14106	Main loop .
14107	Replace the contents of a single line .
14108	Returns a string with the given prompt .
14109	Edit syntax .
14110	Check if the editor is valid .
14111	Exit the user .
14112	Get the version of the VCS .
14113	Create a new frontend .
14114	Initialize the default colors .
14115	Get information about this node .
14116	Convert a Robj object to a RDD .
14117	Returns the source code for the given object .
14118	Sets the colors of the model .
14119	toggle the colors
14120	Return a string representation of the traceback .
14121	Format traceback traceback .
14122	Format a list of strings .
14123	Format an exception .
14124	Show exception .
14125	Run the debugger .
14126	Sets the current mode .
14127	Decorator to ensure that the user is required .
14128	Ensure that a list of modules are imported .
14129	Add a line .
14130	Add a section to this section .
14131	Get the function name .
14132	Return the code code for the given expression .
14133	Render a function .
14134	Determine the value of a value .
14135	Render a template .
14136	Return a dict with default values .
14137	Registers a given type .
14138	Fetch a function by its name .
14139	Convert a float to float .
14140	Return a list of user config files .
14141	Configure the configuration .
14142	Configure logging .
14143	Configure the working directory .
14144	Print a page of pages .
14145	Display a page of text .
14146	Show a page of pages .
14147	Get the pager command .
14148	Get the start of the start of a page .
14149	Prints a string of text .
14150	Print basic unicode code .
14151	Convert a latex object to a PNG string .
14152	Convert a latex object to a string .
14153	Returns True if the given object is a string .
14154	Pretty print a latex object .
14155	Add options to parser .
14156	Validate a list of strings .
14157	Validate a dictionary .
14158	Run the loop .
14159	Handle incoming messages .
14160	Execute the given code .
14161	Complete a complete request .
14162	Get information about an object .
14163	Get a history request .
14164	Shut down the server .
14165	Flush the queue .
14166	Send input to the server .
14167	Start the interactive channel .
14168	Stop the shell .
14169	Check if the shell is running .
14170	Load the connection file .
14171	Write the connection to the database .
14172	Start the kernel .
14173	Shut down the kernel .
14174	Starts the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Send a signal to the kernel .
14178	Check if the kernel is alive .
14179	Return the shell channel .
14180	Returns the sub - channel of this channel .
14181	Get the hb channel .
14182	Bind an IPython kernel .
14183	Log a message .
14184	Get the extension classes for the given class .
14185	Perform a pre - step step .
14186	Preprocess the given step .
14187	Finalize the extension .
14188	Iterate over egg_dir .
14189	Checks if the given module is a module .
14190	Launch a new IPApplication instance .
14191	Save the connection information to a file .
14192	Load configuration from config file .
14193	Load secondary config file .
14194	Execute parallel execution .
14195	Enable autocopy .
14196	Disable autocomplete .
14197	Run the given cell .
14198	Run the heart beat heartbeat .
14199	Run a task .
14200	Remove a task from a message .
14201	Patch the agent .
14202	Add a method to an object .
14203	Connect to the server .
14204	Receive a connection .
14205	Gets the proxy agent .
14206	Validate form .
14207	Delete the object .
14208	Saves the user to the model .
14209	Report the coverage .
14210	Check if all modules are loaded .
14211	Run the editor .
14212	Fix an error message .
14213	Get the clipboard from the clipboard .
14214	Add a function to the chain .
14215	Get the metadata for a given path .
14216	Configure the configuration .
14217	Import a package by name .
14218	Try to attempt a password using a password .
14219	Try to attempt a password from the server .
14220	Try to connect to the SSH server .
14221	Connect to a tunnel .
14222	Open a tunnel .
14223	Stop the scheduler .
14224	Unwrap an exception .
14225	Register a new engine
14226	Unregister an engine .
14227	Handle the reply reply .
14228	Flush all notifications .
14229	Flush the results from the queue .
14230	Flush control packets .
14231	Flush the control packets .
14232	Flush the given socket .
14233	Starts the spin loop .
14234	Stop the spin thread .
14235	Stops the server .
14236	Wait for a list of jobs .
14237	Send a request to the client .
14238	Send a request .
14239	Get the result of the specified message .
14240	Get the status of the specified targets .
14241	Purge the results of the results .
14242	Get the history of the hub .
14243	Send a query to the database .
14244	Return a set of names in a set of names .
14245	Get the byte parser .
14246	Return a list of lines matching the given regex .
14247	Parse the text and return a list of tokens .
14248	Returns the first line of the first line .
14249	Return the first line of the given lines .
14250	Parse source code .
14251	Return a list of arcs .
14252	Return a list of exit codes .
14253	Returns a list of the children of the code .
14254	Generate a list of byte lines .
14255	Iterate over all statements in the parser .
14256	Return a string representation of the block stack .
14257	Split chunks into chunks .
14258	Validate the given chunks .
14259	Yield a list of arc arcs .
14260	Return all chunks of the parser .
14261	Returns all arcs in the parser .
14262	%prog options
14263	Start the coverage .
14264	Report coverage report .
14265	Checks if a file is a file .
14266	Parse a distribution name .
14267	Open a URL .
14268	Fetch the distribution for a given requirement .
14269	Get the parent of the given object .
14270	Return the name of this engine .
14271	Render a template .
14272	Configure the configuration .
14273	Format an error .
14274	Split data into a list of integers .
14275	Convert a notebook to a notebook .
14276	Convert a hex color string to RGB values .
14277	Get a list of color colors .
14278	Get the font .
14279	Handle the reply reply .
14280	Handle a history request .
14281	Handle Python output .
14282	Handle display data .
14283	Starts all interactive channels .
14284	Execute a file .
14285	Process an error message .
14286	Process the given item .
14287	Set default styles .
14288	Edit the editor .
14289	Make a text prompt for a given number .
14290	Make a continuation of a prompt .
14291	Set the stylesheet .
14292	Set the syntax of the highlight .
14293	Handle the response .
14294	Signs the request parameters .
14295	Transform data into a dictionary .
14296	Get virtual machine memory .
14297	Get the CPU number of CPUs .
14298	Get the PID of the process .
14299	Get the number of processes .
14300	Return a list of process threads .
14301	Return a list of file - like objects .
14302	Get the commit hash of a package .
14303	Get information about a package .
14304	Return sys . sys . sys
14305	Return number of CPU cores .
14306	Return number of CPU CPUs .
14307	Get next result set .
14308	Fetch a single row .
14309	Fetch rows from the database .
14310	Fetch all rows .
14311	Connect to a peer .
14312	Read a JSON file .
14313	Read a notebook .
14314	Read data from a string .
14315	Writes a numpy array to a file .
14316	Write nbb to file .
14317	Convert the metadata to a metadata file .
14318	Load the value from a dictionary .
14319	Returns True if the given name matches the given name .
14320	Determine whether a class is a class .
14321	Determine whether a directory is a directory .
14322	Checks if the given file exists .
14323	Determines if a function is available .
14324	Checks if the given method is a valid method .
14325	Determine if a module is available .
14326	Get lines from a file .
14327	Prints a list of command lines .
14328	Print list of lines .
14329	Run a command line .
14330	Returns the conversion factor for a given date .
14331	Convert a value to a currency .
14332	Compute the price for a given range .
14333	Get the encoding of the stream .
14334	Returns the default encoding of the stream .
14335	Write the connection to the database .
14336	Initialize the heartbeat .
14337	Log connection info .
14338	Initialize the session .
14339	Initialize the output stream .
14340	Initialize the kernel .
14341	Initialize the connection .
14342	Register a new controller .
14343	Convert content to HTML .
14344	Convert a Markdown document to HTML .
14345	Convert a domain name to a domain name .
14346	Sets the options for this test .
14347	Configure the exclusion list .
14348	Determine if a directory exists .
14349	Determine if the specified extensions are linked to this library .
14350	Call all functions in a list .
14351	Call all functions in a list .
14352	Append a function to the wrapped function .
14353	Insert a function at index .
14354	Format usage information .
14355	Initialize the application .
14356	Write PID file .
14357	Remove PID file .
14358	Get PID from the profile file .
14359	Construct a parser .
14360	Return the name of the magic function .
14361	Highlight a text block .
14362	Replace the given block .
14363	Set the format of the frontend .
14364	Copy the clipboard to the clipboard .
14365	Execute a shell command .
14366	Prompt the user .
14367	Checks if the tab is pressed .
14368	Create a context menu .
14369	Check if a key is pressed .
14370	Inserts a continuation line .
14371	Handle complete response .
14372	Ensure that the given expression is silenced .
14373	Handle the user callback .
14374	Handle the reply reply .
14375	Handle input request .
14376	Called when the kernel is dead .
14377	Handle response info .
14378	Handle Python output .
14379	Handle a message .
14380	Handle shutdown shutdown .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the kernel .
14384	Restart a kernel .
14385	Called when the client is called .
14386	Completes completion .
14387	Process an error message .
14388	Process a message .
14389	Called when the cursor has changed .
14390	Add a plugin .
14391	Chain plugins .
14392	Generate a generator of plugins .
14393	Simple helper function to run the plugin .
14394	Configure plugins .
14395	Load plugin plugins .
14396	Load plugins .
14397	Convert a latex string to a PNG file .
14398	Convert latex data to latex .
14399	Convert a string to a file .
14400	Check if the project exists .
14401	Iterate over processes .
14402	Returns the CPU percentage of the CPU .
14403	Return a dictionary containing the attributes of this object .
14404	Return the name of the process .
14405	Return the path to the executable .
14406	Get the children of this process .
14407	Get the CPU percentage of the CPU .
14408	Get the memory percentage of the CPU .
14409	Get memory maps .
14410	Check if the process is running .
14411	Stops the process .
14412	Resume the process .
14413	Kill the process .
14414	Wait for the process .
14415	Connect to the kernel .
14416	Hook to hijack the GUI .
14417	Determine if the given IP is a shadow .
14418	Initialize the transformer .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the default handlers .
14425	Register a new handler .
14426	Unregister a handler .
14427	Fetch a prefixed line from a line .
14428	Find the handler for the given line .
14429	Transform a line into a single line .
14430	Fetch a line from a line .
14431	Convert a list of lines into a string .
14432	Check if the user is installed .
14433	Check if a line is valid .
14434	Check if a line is available .
14435	Check if the given line is an alias .
14436	Handle a line .
14437	Handle an IPython notebook .
14438	Handle a command line .
14439	Handle an IPython notebook .
14440	Handle a line .
14441	Handle a command line .
14442	Filter the text widget .
14443	Called when an event is entered .
14444	Called when the tooltip is called .
14445	Show information about a callable .
14446	Show a tip .
14447	Hide the cursor position .
14448	Decorator for proxied attributes .
14449	Convert path to absolute path .
14450	Validate a schema .
14451	Return the masked mask .
14452	Determine if the virtualenv is running .
14453	Parses a list of word frequencies .
14454	Decorator for view decorator .
14455	Return a list of default aliases .
14456	Define an alias .
14457	Define alias .
14458	Validate an alias .
14459	Call the given alias .
14460	Transform an alias to the given alias .
14461	Expand aliases .
14462	Generate an HTML directive .
14463	Reset the image .
14464	Split a string into a string .
14465	Get the color for a given color .
14466	Returns the format of the text .
14467	Generate a JWT token .
14468	Decorator for creating a mutable object .
14469	Clean up the JWT .
14470	Checks if the given time is available .
14471	Validate a JWT token .
14472	Create a new semaphore .
14473	Return the common prefix for the given items .
14474	Filter event handler .
14475	Return the size of the widget .
14476	Check if text is cut .
14477	Check if the clipboard is paste .
14478	Clear the input buffer .
14479	Cut text .
14480	Execute the input .
14481	Get the input buffer .
14482	Sets the input buffer .
14483	Set font font .
14484	Insert text into clipboard .
14485	Prints the current printer .
14486	Prompt the cursor to the top cursor .
14487	Reset the font .
14488	Append text to the clipboard .
14489	Appends html to HTML .
14490	Append text to HTML .
14491	Append text to plain text .
14492	Clear the temporary buffer .
14493	Completes the completion .
14494	Fill a temporary buffer .
14495	Return True if the key is pressed .
14496	Create a control widget
14497	Create a ControlControlControlControl object .
14498	Called when an event is clicked .
14499	Get the plain text text .
14500	Get the end cursor position .
14501	Gets the cursor cursor cursor position .
14502	Get the line of the input cursor .
14503	Get the prompt cursor .
14504	Get the selection cursor .
14505	Inserts the text prompt .
14506	Inserts the contents of the cursor .
14507	Insert text into plain text .
14508	Insert text into text .
14509	Keep the current cursor position .
14510	Cancel the keyboard .
14511	Append text to page .
14512	Prompt the user .
14513	Read a line .
14514	Set the continuation prompt .
14515	Set the cursor to the top cursor .
14516	Show a prompt .
14517	Adjust scrollbars .
14518	Main entry point .
14519	Copies the config file to the config file .
14520	Create a profile directory .
14521	Find a profile by name .
14522	Convert a function to a key .
14523	Read a file .
14524	Return a list of input lines .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to file .
14528	Add a new heart .
14529	Add a heart failure handler .
14530	Handle ping heartbeat .
14531	Return a list of batch sizes .
14532	Convert path to filename .
14533	Iterate over all files .
14534	Print the number of elapsed times .
14535	Calculate the time for a given interval .
14536	Extracts the Windows SDK configuration from a file .
14537	Uncache a zip directory .
14538	Convert an argument to a string .
14539	Check if the given dist_dir exists .
14540	Set the options for the installation .
14541	Create a new home directory .
14542	Check if an archive file exists .
14543	Decorator to create a proxy object .
14544	Decorator to set an object .
14545	Create a new heading node .
14546	Create a new metadata node .
14547	Create a new author .
14548	Check if a directory exists .
14549	Unquote a filename
14550	Get the filename of the given name .
14551	Find a file in a directory .
14552	Get the home directory .
14553	Get the xdgd directory of the xdgd .
14554	Get IPython directory .
14555	Get the IPython package directory .
14556	Get the path of a module .
14557	Return the number of dependencies of the given dependencies .
14558	Return the hash of a file .
14559	Checks if the given IPython config file exists .
14560	Update a list of dictionaries .
14561	Get a list of suggestions for a given object .
14562	Returns a list of dictionaries for a given object .
14563	Return the relative path of this workspace .
14564	Return a list of globals .
14565	r Returns a list of lines .
14566	Read the MD5 file .
14567	Start profiling .
14568	Print the profiler report .
14569	Finalize the profiler .
14570	Handle keyboard events .
14571	Enable the window .
14572	Disable the window .
14573	Disable Qt .
14574	Enable Gtk .
14575	Enable the Qt widget .
14576	Enable pyglet .
14577	Saves the waveform to the given time .
14578	Initialize the database .
14579	Execute a SQL statement .
14580	Get information about a session .
14581	Returns a list of the last last rows .
14582	Get a list of ranges from a string .
14583	Return the history of the history file .
14584	Update a session .
14585	Reset the current session .
14586	Generator that yields a range of ranges .
14587	Store the output of the database .
14588	Write the output to the database .
14589	Stop the history .
14590	Get number of CPU cores .
14591	Get cpu times .
14592	Get disk partitions .
14593	Return a list of PIDs .
14594	Return a human readable string .
14595	Format a list of statements .
14596	Shortcut for Shortcut .
14597	Decorator for caching functions .
14598	Join a list of regexes .
14599	Deletes a file .
14600	Update the MD5 value .
14601	Update cluster profiles
14602	Start a cluster .
14603	Stop a cluster .
14604	Search for a given command .
14605	Prints stdout .
14606	Find the code units of the coverage .
14607	Report the coverage files .
14608	Decorator for raising exceptions .
14609	Set traceback .
14610	Decorate a timedelta function .
14611	Initialize the extension .
14612	Initialize code .
14613	Run the code in the notebook .
14614	Run startup files .
14615	Run the executable files .
14616	Run command line code .
14617	Run the module .
14618	Decorator for decorator .
14619	Get the filename of a file .
14620	Read data from file .
14621	Escapes quotes .
14622	Report the coverage report .
14623	Copy static files to static files .
14624	Write HTML to file .
14625	Compute the hash of a file .
14626	Generate index file .
14627	Read the status of the coverage file .
14628	Write status to a directory .
14629	Compare two lists .
14630	Get a slice from a sequence .
14631	Split a sequence into chunks .
14632	Read configuration files .
14633	Read manifest files .
14634	Convert a glob pattern to a regular expression .
14635	Return True if filename matches the given filename .
14636	Return a list of versions of git files .
14637	Start the kernel .
14638	Shut down the kernel .
14639	Kill a kernel .
14640	Get a kernel by id .
14641	Get the list of available kernel ports .
14642	Returns the notebook for the given kernel .
14643	Start the kernel .
14644	Shut down the kernel .
14645	Interrupt the specified kernel .
14646	Restart a kernel .
14647	Creates a new IO stream .
14648	Create a shell stream .
14649	Creates a new hbker stream .
14650	Reset the instance of this instance .
14651	Export HTML to HTML .
14652	Export HTML to a file .
14653	Ensure image tag is UTF - 8 .
14654	Fix html content .
14655	Export the file to the editor .
14656	Get a unique instance of the given class .
14657	Given a list of terms return the query that match the query .
14658	Get text query string .
14659	Gets the date for the given date field .
14660	Return a query for the given date .
14661	Get the query for the given field .
14662	Sets the case sensitive fields .
14663	Add options to the parser .
14664	Validate the attribute of the attribute .
14665	Checks if the method is a valid method .
14666	Rotate the text .
14667	Patch pyqmqmqmqmqmq . pyqmqmq . pyqmqmqmq .
14668	Parse a schema from a schema .
14669	Return the websocket URL .
14670	Reserialize a reply to a JSON response .
14671	Inject a cookie from the request .
14672	Starts the heartbeat .
14673	Start the hbb .
14674	Stop the hbbb .
14675	Load the file .
14676	Get the index for the given index .
14677	Sets the index of the block .
14678	Edit the editor .
14679	Show the current block .
14680	Show all the blocks .
14681	Generate a series of objects .
14682	Perform a batch of batches .
14683	Run a function on multiple threads .
14684	Run a parallel process .
14685	Decorator to wrap an object .
14686	Decorator for creating a decorator .
14687	Get the source source from the source code .
14688	Return a list of lines that match the given position .
14689	Prints a progress bar .
14690	Clean up all engines .
14691	Preprocess a step .
14692	Called when the given function is called .
14693	Save messages to the client .
14694	Sync the results of the results .
14695	Perform the spin of the function .
14696	Return a list of messages .
14697	Get a message from the queue .
14698	Decorator for creating a property .
14699	Returns a list of all the fields in the field .
14700	Parse a URL .
14701	Return a list of module names .
14702	Returns a list of all root modules
14703	Enable completions .
14704	Return a list of modules from a module .
14705	Return a list of executable files
14706	Returns the completion of the command .
14707	Convert an attribute to a string .
14708	Configure the plugin .
14709	Report the test suite .
14710	Add an exception to the test .
14711	Add a test case .
14712	Add a test result .
14713	Generate a random number of bytes .
14714	Return a weighted weighted weighted weighted weighted weight .
14715	Register a new engine .
14716	Unregister an engine .
14717	Handle the pending tasks .
14718	Dispatch a task .
14719	Fail if the task has expired .
14720	Fail if a message is reachable .
14721	Attempt to run a task .
14722	Save a job to the queue .
14723	Add a task to the queue .
14724	Dispatch the result of the result .
14725	Handle the result .
14726	Called when a dependency is done .
14727	Update the dependency graph .
14728	Start logging .
14729	Logs the current logging state .
14730	Log a line .
14731	Write data to the log file .
14732	Stop logging .
14733	Create a new Worksheet .
14734	Add a command to the list .
14735	Add a regex to the registry .
14736	Yields a list of strings .
14737	Returns a generator that yields all matches the given key .
14738	Create a new notebook directory .
14739	Return a list of notebook names .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Returns the path for the given notebook .
14744	Get the path of the notebook .
14745	Get a notebook .
14746	Get a notebook object .
14747	Create a new notebook .
14748	Save notebook .
14749	Save notebook to notebook .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Yield tokens from a list of tokens .
14754	Generate a list of tokens .
14755	Load the default config file .
14756	Return a list of default classes .
14757	Parse command line arguments .
14758	Initialize the terminal .
14759	Initialize the interactive shell .
14760	Initialize the banner .
14761	Return a string representation of an object .
14762	Parse an identifier name .
14763	Set the default value for this object .
14764	Called when the given handler is changed .
14765	Return a list of traits in a class .
14766	Get the metadata for a given trait .
14767	Validate the given value .
14768	Returns the default value for the default value .
14769	Checks whether the given set is complete .
14770	Returns True if this is a boolean or False otherwise .
14771	Return a dictionary of dependencies .
14772	Return the depth of a tree .
14773	Prints a tree tree .
14774	Disambiguate a DNS URL .
14775	Return a list of all elements of the given value .
14776	Validate a list of targets .
14777	Dispatch a monitor .
14778	Dispatch a query .
14779	Handle a new heartbeat .
14780	Handle a heart failure .
14781	Saves a task to a task .
14782	Saves the task result .
14783	Save a message to the server .
14784	Send a connection to the client .
14785	Register a new engine
14786	Unregister an engine .
14787	Finish the engine .
14788	Shut down the client .
14789	Delete the results from the server
14790	Extract data from a record .
14791	Get the results from the client .
14792	Get history of a message .
14793	Send a query to the database .
14794	Change the current working directory .
14795	Decode a complete command .
14796	Run a command .
14797	Execute the command .
14798	Handle a message .
14799	Return True if the message is in the session .
14800	Report files .
14801	Recursively annotate a file .
14802	Get the version of the installed version .
14803	Convert obj to unicode .
14804	Extract headers from a message .
14805	Check if the message is valid .
14806	Create a new message
14807	Sign a list of messages .
14808	Serialize message .
14809	Send a message .
14810	Send a message to the stream .
14811	Receive a message from the socket .
14812	Fetch identities from a list of identities .
14813	Unserialize a message .
14814	Save SVG document to file .
14815	Copy a svg file to the clipboard .
14816	Convert a string to an SVG file .
14817	Get information about the object .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the arguments for the given object .
14821	Return the documentation for the given line .
14822	Find the file in the object .
14823	Find the source lines of an object .
14824	Get the definition of an object .
14825	Return a string representation of the header .
14826	Print info about a message
14827	Print the definition of an object .
14828	Print the documentation of an object .
14829	Print the source of an object .
14830	Print a file .
14831	Format a list of fields .
14832	Prints the information about the object .
14833	Search for a given pattern .
14834	Creates a thread and returns a thread .
14835	Decorator for decorator .
14836	Find the best match in the corpus .
14837	Return a string representation of this element .
14838	Return the XML representation of this document .
14839	Load all modules in a package .
14840	Convert a dictionary into a dictionary .
14841	Merge data into a dictionary .
14842	Convert an object into a Python object .
14843	Convert raw text into a string .
14844	Get a list of figures for a figure .
14845	Print a figure .
14846	Decorator for mplots
14847	Select a figure .
14848	Find and return the gui backend .
14849	Activate a matplotlib backend .
14850	Configure inline settings .
14851	Activate the program .
14852	Truncate the trace .
14853	Start the thread .
14854	Stop the thread .
14855	Start tracing .
14856	Installs the traceback .
14857	Start tracing .
14858	Stop the collector .
14859	Pause the coverage .
14860	Resume all traces .
14861	Get the line data .
14862	Recursively collect exceptions .
14863	Render a traceback traceback .
14864	Start the coverage .
14865	Return the canonical directory for the given morf .
14866	Return source source code for given file .
14867	Determines if the given frame is valid .
14868	Check if a file is traceable .
14869	Prints warnings .
14870	Check if the source is a list of packages .
14871	Start the parser .
14872	Called when the process is stopped .
14873	Exclude the given regex
14874	Exclude a list of regex patterns .
14875	Saves the data to the database .
14876	Combine parallel data .
14877	Collect the data from the collector .
14878	Perform analysis analysis .
14879	Compute the analysis of the analysis .
14880	Perform analysis analysis .
14881	Compute the report report .
14882	Perform an annotation report .
14883	Report HTML report .
14884	Report the coverage report .
14885	Display a list of objects .
14886	Displays the content of an object .
14887	Display a list of objects .
14888	Display an image .
14889	Display a jpeg image .
14890	Display a list of objects .
14891	Displays JSON data .
14892	Displays javascript content .
14893	Reload the data from the file .
14894	Find the path of the command .
14895	Execute a command .
14896	Forward a forward event loop .
14897	Run the given line .
14898	Find the launcher class for the given class name .
14899	Starts the cluster .
14900	Build a launcher .
14901	Start the engine .
14902	Start the IP cluster .
14903	Get a Flask app .
14904	Check if the event loop is running .
14905	Start the event loop .
14906	Creates a QApplicationApplication object .
14907	Checks if the given app is running .
14908	Start the event loop .
14909	Create canvas canvas .
14910	Draws a cross product of a point .
14911	Draw a line .
14912	Set the text at the given position .
14913	Create an image from an image .
14914	Get uuid of uuid
14915	Generate a unique unique key from the cache .
14916	Get domain name from URL .
14917	Get arguments from url .
