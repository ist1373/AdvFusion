0	Emit the given value into the queue .
1	Wraps an ObservableSource .
2	Returns an Observable with the given sort function .
3	Simplified method .
4	Creates a new UnicastProcessor .
5	Creates a new executor .
6	Returns true if the given Publisher is subscribed .
7	Convert a value to a FlowableX map .
8	Resets the configuration .
9	Creates a Publisher from a CompletableSource .
10	Creates a Publisher from a SingleSource .
11	Retry one or more times .
12	Requests that the given object is not null .
13	Returns the identity of the identity .
14	Creates a new callable .
15	Creates a new value for a given value .
16	Creates a cast function .
17	Creates a new unicast subject .
18	Creates a new UnicastSubject .
19	Creates a new immutable subject .
20	Creates a new unicast subject .
21	Gets the error from the queue .
22	Returns the result of the exception .
23	Returns true if the given timeout is blocking .
24	Drain the maximum value of a queue .
25	Request a subscription .
26	Called when the subscriber is completed .
27	Called when the queue is completed .
28	Returns the value of the notification .
29	Returns the error of the notification .
30	Checks if the observer is valid .
31	Sets the next observer .
32	Validates that the next subscription is valid .
33	Sets the next subscription to the given subscriber .
34	Add a cap to the given array .
35	Multiplies the capacity of a bit .
36	Adds the specified number to the specified number .
37	Convert an exception to a NullPointerException .
38	Adds an object to the list .
39	Shutdown the pool .
40	Creates a new scheduler .
41	Sets a new subscription .
42	Emits the loop .
43	Wraps the given error .
44	Flatten the given Throwable .
45	Throw an exception if the given exception is thrown .
46	Clear all resources .
47	Returns the number of resources .
48	Returns true if the given ObservableSource satisfies the given function .
49	Convert a value to a ScalarX map .
50	Accepts the given subscriber and returns true if the given subscriber is available .
51	Accepts an observer to the given observer .
52	Start the stream .
53	Start unbounded subscription .
54	Appends an item to the queue .
55	Get the Disposable resource .
56	Called when the stream is complete .
57	Called when an error occurred .
58	Called when the queue is complete .
59	Concatenate an Observable Observable .
60	Concatenate a map of elements .
61	Sorts the elements in the stream .
62	Waits until the count is reached .
63	Perform a request .
64	Add a new PublishDisposable .
65	Removes the given subscribers .
66	Enables a flowable flowable .
67	Parses the annotations from the given method .
68	Sets the delay .
69	Create an error response .
70	Calculates the delay for the given time .
71	Create sample data .
72	Returns a HttpMethod .
73	Searches for the given username .
74	Encodes the given password .
75	Checks if the given password matches the given encoded password .
76	Checks if the version is valid .
77	Checks if the spring version is disabled .
78	Returns the application version .
79	Configure an attribute exchange .
80	Configure OAuth2 client .
81	Create an OAuth2 resource server .
82	Gets the required channel registry for this application .
83	Returns true if the given attribute matches the given value .
84	Retrieve the entry for the given DN .
85	Search for single attribute values .
86	Searches for multiple attributes .
87	Search for a single entry .
88	Builds the search controls .
89	Lookup the primary keys for the given IDs .
90	Builds the details for the given user .
91	Create embedded server .
92	Creates servlet filter .
93	Create the JASApi filter .
94	Creates a whitelisted type .
95	Inserts the spring security filter chain .
96	Returns the token for the given series .
97	Returns a list of granted authorities .
98	Creates a new cipher .
99	Sets the properties of the application .
100	Perform the security request .
101	Checks if the current user has been authenticated .
102	Perform authentication .
103	Checks if the response length has been written .
104	Maps the given authorities into a set of granted authorities .
105	Sets the login process .
106	Updates the authentication defaults .
107	Updates the access defaults .
108	Maps a password value to a string .
109	Extract the cookie from the request .
110	Encodes cookie tokens .
111	Sets a cookie .
112	Resolves the given parameter .
113	Gets the query string .
114	Gets the port port .
115	Returns the principal s principal .
116	Logout the session .
117	Authenticate an authentication token .
118	Builds the URL for the LDAP server .
119	Sets the context environment properties .
120	Returns the redirect url .
121	Ends the HTML tag .
122	Initializes the user details .
123	Gets the user details .
124	Adds the Pkce parameters to the map .
125	Checks if the request is authenticated .
126	Checks if the request is valid .
127	Checks if the service ticket request is valid .
128	Checks if the authentication token is authenticated .
129	Checks if the request is proxy request .
130	Creates a MethodSecurityExpression root .
131	Get the JWKSet from the web client .
132	Utility method to encode a string .
133	Get the granted authorities for the current user .
134	Loads the user details .
135	Gets the preauthenticated principal .
136	Concatenate two arrays .
137	Returns a copy of a byte array .
138	Returns a list of granted authorities .
139	Parses the given map into a map .
140	Gets the grantedAuthority collection .
141	Adds a GrantedAuthorityCollection to the collection .
142	Gets the preauthenticated principal .
143	Gets a shared object .
144	Builds the redirect URL for the given request .
145	Invokes interceptor .
146	Checks if the given role is valid .
147	Adds a list of roles to the list of roles .
148	Process auto login cookie .
149	Create a persistent login token .
150	Attempt to attempt to switch the user to the given username .
151	Attempt to attempt to exit the user .
152	Sets the exit user .
153	Display the public contact .
154	The spring security filter chain .
155	Decodes a JWT .
156	Check if the access token is authorized .
157	Checks if the request is authorized .
158	Convert a Jwt JWT to a list of granted authorities .
159	Generate a CSRF token .
160	Display admin permissions .
161	Displays the add permissions for a contact .
162	Add a new permission .
163	Delete a permission .
164	Returns the role with the default prefix .
165	Create a UserDetailsResourceFactory from a string .
166	Gets the value of an attribute .
167	Returns the first attribute value for the given name .
168	Encodes a string into a byte array .
169	Decodes a byte array .
170	Looks up the parameter names for the given type .
171	Add a new contact .
172	Find the attributes of the given method .
173	Adds a secure method to the registry .
174	Get all config attributes .
175	Returns true if the method name matches the given method name .
176	Configures the request matcher .
177	Handle bind exception .
178	Returns a random contact .
179	Clear authentication attributes .
180	Gets a field by its name .
181	Creates service url .
182	Creates a redirect URL .
183	Extracts the prefix of the SHA - prefix .
184	This method is called when the application is initiated .
185	Check if the filter stack is valid .
186	Returns all registered types .
187	Extracts the cause of the given throwable .
188	Register access manager .
189	Converts a list of granted authorities to a set of certificates .
190	Returns true if the two byte arrays are equal .
191	Sets the default failure url .
192	Sets the resolve hidden inputs .
193	Builds the request URL .
194	Checks if the given URL is absolute .
195	Returns the list of attribute names for the given identifier .
196	Converts an identifier into an identifier .
197	Creates an ACL entry .
198	Creates an object identity .
199	Updates the given ACL .
200	Saves the request .
201	Creates a new ServerWebExchangeMatcher .
202	Creates a new ServerWebExchangeMatcher .
203	Creates a new TextEncryptor .
204	Creates a TextEncryptor .
205	Creates a new TextEncryptor .
206	Writes the headers to the response .
207	Determine the target URL .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Get the directory with the given id .
211	Build a DistinguishedName .
212	Creates shared objects .
213	Configure the login configuration .
214	Get current date
215	Parse a date string .
216	Update cache .
217	Sets the details of the authentication request .
218	Returns the security name for the subject .
219	Gets the webSphere groups for the given security name .
220	Change the user s password .
221	Build the DN of the group .
222	Checks if the list of sessions are allowed .
223	Copies the details of the given AuthenticationToken .
224	Returns a list of filter filters .
225	Returns a list of filtered filters .
226	Returns the application context .
227	Returns the full name of the given dn .
228	Set session attributes .
229	Creates a preemptive authentication scheme .
230	Sets the filters .
231	Adds a filter to the request .
232	Creates a basic authentication scheme .
233	Creates an authentication scheme .
234	Creates a new authentication scheme .
235	Sets the specified URI .
236	Prints a response to a stream .
237	Creates a new RestAssuredConfig instance .
238	Sets the default query parameters for this query .
239	Configure the default object mapper .
240	Sets the JAXObjectMapperFactory .
241	Creates a new RestAssuredMockConfig instance .
242	Creates a new RestAssuredMockConfig instance .
243	Creates a new instance of RestAssuredMapper .
244	Creates a new RestAssuredMockConfig instance .
245	Creates a new RestAssuredMockConfig instance .
246	Creates a new RestAssuredMockConfig instance .
247	Creates a new RestAssuredMockConfig instance .
248	Creates a new instance of RestAssuredMockConfig .
249	Creates a new RestAssuredMvcConfig instance .
250	Creates a new RestAssuredMvcConfig instance .
251	Creates a new RestAssuredMvcConfig instance .
252	Creates a new RestAssuredMvcConfig instance .
253	Allow all hostnames .
254	Declares a set of namespaces .
255	Creates a new XmlPathConfig .
256	Perform a request .
257	Sets the default headers .
258	Sets the connection to the connection .
259	Set the control name .
260	Add a header .
261	Sets basic credentials .
262	Set NTLM credentials .
263	Creates a new Headers .
264	Resets the configuration .
265	Set a header .
266	Build the response .
267	Sets the value of this cookie .
268	Returns a DetailedCookieMatcher that matches the given comment .
269	Matcher for expiry date .
270	Returns a DetailedCookieMatcher .
271	Matches the path against the given path .
272	Matcher for secured cookie .
273	Returns an instance of HttpCookieMatcher .
274	Returns a DetailedCookieMatcher .
275	Returns a DetailedCookieMatcher .
276	Expect a header with the expected value .
277	Sets a header .
278	Sets a cookie .
279	Creates a ProxySpecificationSpecification .
280	Creates a new JsonPathConfig .
281	Default parser for default parser .
282	Creates a new LogConfig instance .
283	Enable logging for requests .
284	Creates a new HTTP request .
285	Creates a new MultiPartConfig .
286	Add an attribute .
287	Add a header .
288	Adds a multipart part to the request .
289	Add a result handler to the request .
290	Sets the specified parameter value .
291	Add additional parameters to the request .
292	Creates a HttpClientConfig .
293	Creates a new HttpClientConfig instance .
294	Gets the value of a given path .
295	Returns the int value of the given path .
296	Returns the byte value as a byte .
297	Returns the short value as a short value .
298	Returns the float value as a float .
299	Returns the double value of the given path .
300	Returns the long value of the given path .
301	Gets a list of objects from the specified path .
302	Returns a map with the given path .
303	Gets the object at the specified path .
304	Sets the body of the request .
305	Add a cookie .
306	Add a parameter to the request .
307	Add a parameter to the request .
308	Creates a new MockMvcParamConfig instance .
309	Creates a filter that matches the given matcher .
310	Creates a new Cookie .
311	Cleans up the state of the collection .
312	Index all bindings .
313	Returns the binding for the given key .
314	Convert a string binding to a string .
315	Clean up the dependencies of the given binding .
316	Removes the jit bindings from the jit bindings .
317	Gets the internal dependencies of the given binding .
318	Creates an uninitialized binding .
319	Get all parameters from the given parameters .
320	Binds the given injector .
321	Binds a logger .
322	Checks if the given annotation is missing .
323	Checks if the method is overridden .
324	Initializes the delegate .
325	Returns the type of the given type .
326	Resolve all types of the given types .
327	Returns the canonical type for the given type .
328	Prepare the builtin converter .
329	Normalize the class loader .
330	Checks if the class loader is a class loader .
331	Checks if a member is public .
332	Fix the annotations .
333	Request the injection of the given instance .
334	Validates the injections .
335	Creates a new instance of the constructor .
336	Returns the request dispatching the given request .
337	Creates a factory for the given key .
338	Make a scoped scope .
339	Normalize a path .
340	Generate an annotation .
341	Determine if the annotation is retained .
342	Find the scope annotation for the given annotations .
343	Returns the key for the given type .
344	Returns the name of a key .
345	Initializes the delegate .
346	Adds a direct type binding .
347	Gets the constructor in the cache .
348	Checks if the interceptor is a scope .
349	Creates a new RealMapBinder .
350	Gets the key for the given key .
351	Creates a new instance of the constructor .
352	Writes a message to the stream .
353	Creates a module for the given module .
354	Returns the list of registered methods .
355	Checks if the given type is not valid .
356	Checks if the constructor has a matching parameters .
357	Gets dependencies for the given instance .
358	Removes all dependencies from the given set .
359	Checks if the given dependency is valid .
360	Gets the binding for the given method .
361	Invokes the given method .
362	Gets the missing implementation for the given key .
363	Creates a new Real Multibinder .
364	Returns the key for the new item .
365	Finds the next filter .
366	Checks if the constructor has an annotation .
367	Gets the internal constructor .
368	Gets the dependencies for this factory .
369	Creates a module from a module .
370	Gets the annotation .
371	Gets the line number for the given member .
372	Initialize the lookup .
373	Creates a new callable .
374	Creates a new callable .
375	Validates the given key .
376	Gets a member in the cache .
377	Creates an instance of MemberInjector .
378	Gets the injectors for the given injection point .
379	Creates a Key for the given type .
380	Returns the strategy strategy for the given annotation .
381	Creates an annotation strategy for the given annotation type .
382	Prune stacktrace .
383	Returns the binding source .
384	Format error messages .
385	Creates a new message .
386	Creates a message from the given Throwable .
387	Creates a new message .
388	Converts an object to an object source .
389	Checks if the given class name is skipped .
390	Get a stack trace element from a list of modules .
391	Main entry point .
392	Push a dependency to the stack .
393	Push a state to the state .
394	Creates a new instance of the given instance .
395	Provides the given provider .
396	Process a connection event .
397	Add a connection event processor .
398	Get the result of the future .
399	Checks that the given Throwable is thrown .
400	Register a new processor .
401	Register the default processor .
402	Returns the processor for the given command code .
403	Try to get the url from the given URL .
404	Decode the protocol code .
405	Get all connections .
406	Scan all pool tasks .
407	Get the connection pool .
408	Create a connection to the given URL .
409	Remove a connection from the pool .
410	Determine if the given connection pool is valid .
411	Create a connection pool .
412	Close a connection .
413	Called when the connection is closed .
414	Close the connection .
415	Set the value of an attribute .
416	Register a user processor .
417	Register a user - interest .
418	Dispatch the RPC request .
419	Deserialize a request .
420	Preprocess a RemotingContext .
421	Log a timeout message .
422	Debug debug message .
423	Process a message .
424	Invoke a command with the specified timeout .
425	Send a request to the server .
426	Converts a bit set to a byte array .
427	Converts a byte integer into a BitSet .
428	Add a reconnect task .
429	Stop the heal thread .
430	Creates a RemotingCommand .
431	Filter the list of connections .
432	Monitor the connection pool .
433	Close the last select connections .
434	Returns a boolean value .
435	Logs a message .
436	Checks if the request is a request timeout .
437	Returns a UserProcessor .
438	Get a connection from the list of connections .
439	Returns the value of the given key .
440	Returns the value of a property .
441	Resolve a response object .
442	Converts a response command to a response object .
443	Converts a response command to a throwable .
444	Get detail error message .
445	Create a new RpcServerException
446	Print the connection trace to the logger .
447	Creates a new event loop group .
448	Parse remote address .
449	Parse local address .
450	Parse remote IP address .
451	Parse remote host name .
452	Parse local IP address .
453	Parses remote port .
454	Parses the local port .
455	Parses a socket address from a socket address .
456	Add a connection to this pool .
457	Removes a connection from the pool .
458	Get the current connection .
459	Registers a custom serializer .
460	Returns the custom serializer for the given class name .
461	Register custom serializer .
462	Returns the custom serializer for the given command code .
463	Start the connection .
464	Check if remote address is connected .
465	Initializes the write buffer .
466	Creates a frame with the given opcode .
467	Performs a batch of bytes .
468	Sets the code for this connection .
469	Validates the given payload .
470	Update the payload .
471	Checks if the given protocol is valid .
472	Translate the length of a single frame check length .
473	Translate a single frame to a single frame .
474	Generate the final key .
475	Process a FrameContinuous frame .
476	Process the frame binary .
477	Log a runtime exception .
478	Process the frame text .
479	Process a frame .
480	Process a frame .
481	Processes a frame closing .
482	Checks if the buffer size limit is exceeded .
483	Get the payload from the buffer list .
484	Gets the total buffer size .
485	Translate the HTTP request to the client .
486	Translate the HTTP header into a HandshakeBuilder .
487	Decode a socket .
488	Close the connection to the server .
489	Close the connection to the server .
490	Generates the HTTP response for the given error code .
491	Send text to WebSocket .
492	Resets the websocket connection .
493	Connect to the websocket client .
494	Gets the port number .
495	Send a handshake request to the server .
496	Sets the connection timeout .
497	Stop the websocket connection .
498	Start the websocket timer .
499	Restart connection timeout .
500	Called when a connection is lost .
501	Cancels the connection failed .
502	Creates a ServerHandshakeBuilder .
503	Sends a ping frame .
504	Stop the connection .
505	Returns the port of the server .
506	Perform additional reads .
507	Accepts a connection to the server .
508	Performs a read operation .
509	Performs a write operation .
510	Setup the websocket server thread .
511	Ensure that the thread is running .
512	Shutdown the server .
513	Gets the socket .
514	Broadcast data to websocket .
515	Broadcast text to websocket .
516	Send a message to the websocket .
517	Fill the draft data .
518	Transfer a byte buffer to a destination .
519	Start the persistence unit .
520	Returns the entity manager .
521	Adds a transaction to the database .
522	Convert arguments to a SealaBuffer .
523	Wrap a list of arguments .
524	Get the message for the given key .
525	Get the message for the given keys .
526	Determine if the given key is defined .
527	Returns a copy of the specified languages .
528	Gets the preferred language .
529	Set the language .
530	Sets the bindings .
531	Sets the bindings .
532	Sets the bindings .
533	Sets the overrides of this builder .
534	Sets the overrides .
535	Sets the overrides .
536	Disable module classes .
537	Call this method .
538	Execute a request .
539	Get an existing file .
540	Returns a binding for the given scope .
541	Creates a new Tuple .
542	Creates a new Tuple .
543	Returns the executor .
544	Creates a new JPAConfig .
545	Creates a new JPAConfig .
546	Creates a new JPAConfig .
547	Creates a string with the given callback name .
548	Creates a JsonNode with the given callback name .
549	Add a constraint validator .
550	Creates a new instance of the given key .
551	Returns a method that matches the given method name .
552	Handles client errors .
553	Handles a bad request .
554	Invoked when the request is forbidden .
555	Called when a request is not found .
556	Handles a server error .
557	Log a server error .
558	Convert a throwable error to a useful exception .
559	On dev server error .
560	This method is called when a server error occurs .
561	Creates a BuildDocHandler from the given files .
562	Creates a BuildDocHandler from a directory .
563	Create a BuildDocHandler from the given directory .
564	Creates a new BuildDocHandler from the given directory .
565	Creates a BuildDocHandler from a jar file .
566	Consume the data stream .
567	Creates a HttpEntity from the given content .
568	Creates a HttpEntity from a string .
569	Creates a new HttpEntity .
570	Creates a response with status code .
571	Creates a response with status code .
572	Creates a new HTTP response .
573	Sends a response to the response .
574	Sets the status of a file .
575	Find a user by id
576	Returns a new language .
577	Creates a new URL .
578	Create a new request with the given fragment .
579	Returns the absolute URL for the given request .
580	Returns the webSocket URL for the given request .
581	Creates a new connection for the given connection .
582	Creates a connection function for the given connection .
583	Creates a Server instance for the given router .
584	Converts an object to a JsonNode .
585	Converts a JsonNode to a Class .
586	Parse a JSON string .
587	Parse an input stream .
588	Returns the relative path to the target directory .
589	Returns the canonical path for the given URL .
590	Returns a list of displayable constraints .
591	Returns the displayable constraint for the given constraint .
592	Simplified method .
593	Checks if the given class array is assignable .
594	Parse cron expression .
595	Returns the next interval in the given date .
596	Creates a new AhcWSClient .
597	Creates a GuiceApplicationBuilder .
598	Creates a new request .
599	Sets a session variable .
600	Sets a flash message .
601	Returns a binding with the given instance .
602	Returns a binding with the given annotation .
603	Convert this Binding to a Java Binding .
604	Creates a new binding from the given provider .
605	Creates a binding for the given instance .
606	Returns the binding of the given key .
607	Converts the given provider to a provider .
608	Returns a list of available languages .
609	Returns the preferred language for the given application .
610	Creates a new evolution reader from the given map .
611	Creates a new evolution reader for the given evolution .
612	Removes all evaluations from the database .
613	Returns a new instance of GuiceApplication .
614	Returns a new GuiceApplicationLoader .
615	Returns a GuiceApplicationBuilder with the given modules .
616	Load the Guice application .
617	Load a Guice application .
618	Load a Guice application .
619	Creates a GuiceApplicationBuilder .
620	Encodes a cookie .
621	Get the entity manager .
622	Gets the entity manager .
623	Push an entity to the pool .
624	Creates a Flow with the given splitter .
625	Creates a Flow from the given flow .
626	Creates a Flow from an actor .
627	Convert an array of arguments to a list of arguments .
628	Fill the form .
629	Gets the global errors .
630	Returns the JSON representation of the error .
631	Returns the value of the given key .
632	Creates a new DynamicForm instance .
633	Parses the given text .
634	Parses the given text .
635	Prints the given T .
636	Prints the given type .
637	Returns the string representation of the given type .
638	Registers the converter .
639	Register a formatter .
640	Register an annotation formatter .
641	Encodes a cookie .
642	Select nodes matching a given node .
643	Convert a list to a Seq .
644	Convert an array to Seq .
645	Convenience method for creating a Seq .
646	Creates a Mapped WebSocket acceptor .
647	Accepts and returns a WebSocket .
648	Sets the accessibility of the given object .
649	Calculates the cost of the primitive type .
650	Calculates the total cost cost for the given executable .
651	Calculates the cost cost of an object .
652	Get the message at the given key .
653	Get the message at the specified key .
654	Creates a new database from the database .
655	Creates a new ParallelSorter .
656	Sorts the given index using the given comparator .
657	Merge the elements in the sort order .
658	Invokes the method .
659	Cast a type to a type .
660	Loads an argument .
661	Emit a field .
662	Parses the given type .
663	Unbox a type .
664	Process an array .
665	Called when a null value is null .
666	Resolve all declared classes .
667	Get all methods from superclass .
668	Filter the list of constructors .
669	Sets the superclass .
670	Gets a field with the given names .
671	Add a method .
672	Returns the cardinality of the given value .
673	Sets the naming policy .
674	Finds all methods in the given array .
675	Resolve a child path .
676	Reads a file .
677	Set the host .
678	Creates a new HTTP request .
679	Creates a new HTTP request .
680	Creates a new HTTP request .
681	Create a POST request .
682	Creates a new HTTP request .
683	Creates a PATCH request .
684	Creates a DELETE request .
685	Creates a HEAD request .
686	Create a new HTTP request .
687	Creates a new HTTP request .
688	Set the path to the request .
689	Adds cookies to the request .
690	Adds a query to the request .
691	Adds a query to the request .
692	Sets the query string .
693	Returns the query string .
694	Returns the host url .
695	Basic authentication .
696	Set the host header .
697	Prepare the request .
698	Sends the response and returns the response handler .
699	Removes a range from the first handler .
700	Returns the length of the exception table .
701	Collect all interceptors .
702	Collect all action filters .
703	Collect all action results .
704	Collects all actions from the actions manager .
705	Sets a simple property .
706	Gets a property from the bean .
707	Extracts the reference from the property name .
708	Gets the writer .
709	Sets an object reference .
710	Returns the object reference .
711	Returns the object reference .
712	Returns the descriptor for the given tableRef .
713	Finds the tableDescriptor for the given columnRef .
714	Returns the alias for the given table .
715	Registers a table reference .
716	Lookup the table reference for the given table reference .
717	Registers a hint .
718	Serializes the given value into the given JsonContext .
719	Inject attributes from servlet request .
720	Inject parameters from servlet request .
721	Inject the uploaded files into the target files .
722	Convert a property name to a column name .
723	Convert a column name to a property name .
724	Converts a column name to a column name .
725	Store a value in a prepared statement .
726	Prepare the value for the given type .
727	Get all wrappers .
728	Resolves the given wrapper class .
729	Creates a new instance of the given class .
730	Converts a path to a system .
731	Returns the path to the given filename .
732	Split a filename into a string .
733	Returns the relative path relative to the target path .
734	Registers a component .
735	Add a new action config .
736	Start the Homer .
737	Configures the default actions .
738	Register the madvoc components .
739	Exclude excluded jars .
740	Include jars .
741	Include the included entries .
742	Exclude excluded entries .
743	Scan jar file .
744	Scans the given root directory .
745	Returns the signature of the given type .
746	Scan the given paths .
747	Start scan .
748	Creates a new transaction .
749	Returns the default scope .
750	Gets a new global scope .
751	Creates a new madvocScope .
752	Decode a char array .
753	Prepare a CSRF token .
754	Ensure that the token is valid .
755	Checks if a CSRF token is valid .
756	Creates a BeanCopy from a source object .
757	Creates a new bean .
758	Visit a property .
759	Initialize the entity .
760	Resolve a scope .
761	Register a petite bean .
762	Register a bean .
763	Removes a bean from the container .
764	Resolve bean names for a given type .
765	Registers an injection point .
766	Registers a property in the specified bean .
767	Register a SetInjectionPoint .
768	Registers an injection point in the specified bean .
769	Register a new init method .
770	Register a kill method .
771	Register a Petite provider .
772	Registers a provider .
773	Checks if the given type matches the given type .
774	Define multiple parameters .
775	Invokes the intercept method .
776	Resolve java version .
777	Push an int to the stack .
778	Checks that the given argument is valid .
779	Returns the name of the advice field .
780	Returns the name of the advice method .
781	Load special method arguments .
782	Load static method arguments .
783	Load virtual method arguments .
784	Loads a method argument .
785	Store a method argument .
786	Prepare the return value .
787	Creates a key signature key .
788	Creates a new array .
789	Store an array into an array .
790	Extract encoding from content type .
791	Checks if the flags are empty .
792	Resolve auth token .
793	Requests the authorization for the given realm .
794	Prepares a download request .
795	Prepare the response for the response .
796	Returns all cookies in the request .
797	Reads the request body from the request .
798	Read the request body from the request .
799	Stores the context path .
800	Store the context path to the current context .
801	Checks if a GET parameter is a GET parameter .
802	Prepare the parameters for the request .
803	Copies the parameters from the given servlet request .
804	Invokes the given body .
805	Render body .
806	Render the body as a string .
807	Invokes the init method .
808	Call the destroy method .
809	Creates a new bean instance .
810	Inject parameters from bean definition .
811	Rewrite the action path .
812	Adds a header .
813	Adds a value to the map .
814	Put a base property .
815	Put a profile property .
816	Gets a profile property .
817	Resolve macros .
818	Extracts the properties from the profile .
819	Convert a byte array to a stream .
820	Hash a password
821	Checks if the given plaintext is valid .
822	Copy all bytes from the stream .
823	Copy the buffer to the output stream .
824	Parses the action and returns a new Action instance .
825	Resolve action config .
826	Detects the alias for the given action .
827	Reads the action interceptors .
828	Reads the action filters .
829	Read package action path .
830	Read method action path .
831	Parses the method alias .
832	Create a new ActionRuntime .
833	Called when the response was modified .
834	Apply an advice to the target class .
835	Injects the target object into the proxy .
836	Visits an annotation .
837	Resolve real name .
838	Resolve json name .
839	Returns the type data for the given type .
840	Lookup the type data for the given type .
841	Find the type of the given type .
842	Resolve a Json name .
843	Returns the real name of the given type .
844	Returns the content of the file .
845	Copies the bootstrap methods from the class reader .
846	Sets the major version of the class .
847	Puts the constant pool .
848	Puts the bootstrap methods .
849	Add a constant field reference to the symbol .
850	Add a constant reference to a constant .
851	Add a constant reference to a constant pool .
852	Adds a constant reference to a constant .
853	Add a constant to the constant pool .
854	Adds a constant to a constant .
855	Add a constant to the symbol pool .
856	Adds a constant to the cache .
857	Add a constant name and descriptor .
858	Add a constant name and type .
859	Add a constant to the constant pool .
860	Adds a constant to the symbol .
861	Add a constant to the constant pool .
862	Adds a constant to the symbol .
863	Add a constant to the symbol .
864	Add a constant to the symbol .
865	Add a constant to the constant pool .
866	Add a constant reference to a constant .
867	Adds a constant to the symbol pool .
868	Add a constant to a constant .
869	Add a bootstrap method .
870	Add a new type to the table .
871	Returns the hash of the given name .
872	Clear all entries .
873	Returns all the values of the given name .
874	Returns an iterator over the elements of this map .
875	Returns all entries in this map .
876	Expand the buffer .
877	Appends a char sequence to the buffer .
878	Visits an annotation .
879	Visits the end of the end of the chain .
880	Creates the first method of the first chain .
881	Creates the first chain of the first method call .
882	Parses a path .
883	Push a field to the path .
884	Configures the servlet context .
885	Execute the target method .
886	Gets all field descriptors .
887	Creates a bean definition for the given type .
888	Converts the given transaction to a DbTransactionMode .
889	Reads a property from the source .
890	Put all entries in the map .
891	Appends a buffer to the buffer .
892	Writes the object to the writer .
893	Writes the object to the output stream .
894	Writes the stream to the output stream .
895	Returns the value of the given key .
896	Returns the value of the specified key .
897	Returns the value of the given key .
898	Returns the value of the given key .
899	Returns the value of the given key .
900	Returns the value of the given key .
901	Adds a value to the map .
902	Use this method to open a folder .
903	Receive messages from the folder .
904	Updates the flags for this message .
905	Closes the folder if it is opened .
906	Look up the name of a named parameter .
907	Alias for the target .
908	Validate action .
909	Adds a violation .
910	Sets the raw content type .
911	Sets the download file .
912	Sets the target stream .
913	Sets the target class .
914	Sets the target class .
915	Processes the target class .
916	Create a new proxy .
917	Define the target class .
918	Creates a new instance of the class .
919	Dumps the class in debug mode .
920	Creates a new email address .
921	Add a new email address to the request .
922	Create a new email address .
923	Add a reply to the email address .
924	Sets the CC address .
925	Create a text message .
926	Create a new email message .
927	Add a header .
928	Get the value of a property .
929	Returns the boolean value for the given name .
930	Returns the int value of the specified name .
931	Returns the long value of the specified name .
932	Returns the resolved parameter names .
933	Serialize a key value .
934	Lookup a path alias .
935	Resolve alias .
936	Resolve the result path .
937	Resolve the result path .
938	Returns the last index of the given string .
939	Returns the last index of the given string .
940	Returns the index of the given string .
941	Strip the last camel word .
942	Resolve the schema name .
943	Resolve column descriptors .
944	Initialize the key .
945	Mix the given d .
946	Removes the remainder from the given index .
947	Calculate the key schedule .
948	Initialize the key message .
949	Encrypts the given content into a byte array .
950	Converts a byte array to a long array .
951	Removes any boundaries from a string .
952	Returns the path for this method .
953	Creates a compressed file .
954	Gzip file .
955	Ungzip a file
956	Returns a list of all the entries in a zip file .
957	Unzip a zip file .
958	Adds a zip entry to the zip file .
959	Adds the given content to the zip file .
960	Get field descriptor .
961	Gets a property descriptor .
962	Sets the request bundle name .
963	Sets the session locale .
964	Returns the locale of the session .
965	Filter the parameters for a bean name .
966	Add a list of profiles .
967	Gets the longian value from the buffer .
968	Reads a stream from the input stream .
969	Reads a label .
970	Get the offset of the type annotation .
971	Reads the elements of an annotation .
972	Read verification type info .
973	Read the bootstrap methods attribute .
974	Recursively inspects the constructor .
975	Returns the ctor descriptor for the given arguments .
976	Gets the map for the request .
977	Creates the map for the request .
978	Convert an array to an array .
979	Initializes the decora .
980	Sets the consumer consumer .
981	Add a path to the search file .
982	Add a path to the search file .
983	Include patterns .
984	Exclude patterns .
985	Adds a path to the list .
986	Find all files .
987	Initialize the list of files .
988	Returns an iterator over all files .
989	Resolve the bean s wiring mode .
990	Resolve the name of the bean .
991	Gets the output writer .
992	Get the output stream .
993	Returns the class name .
994	Returns a string representation of the constructor .
995	Returns the method descriptor for the given type .
996	Returns a string representation of the method .
997	Append descriptor .
998	Gets the size of this stream .
999	Get the number of arguments and return the number of arguments .
1000	Sets the rollback for this transaction .
1001	Commit all resources .
1002	Rollback all resources .
1003	Request a resource for the given resource type .
1004	Removes a name from the stack .
1005	Write a string to the stream .
1006	Writes a unicode character .
1007	Write a character sequence .
1008	Sets the parsing error log level .
1009	Start a new region .
1010	Returns true if the value contains the given string .
1011	Register a pseudo - function .
1012	Lookup a pseudo - pseudo - function .
1013	Visits this class as a proxy .
1014	Visits an annotation .
1015	Make the static initialization block .
1016	Creates proxy constructor .
1017	Process superclasses .
1018	Find the last item in the given range .
1019	Convert a string to a string .
1020	Replace the instruction instructions .
1021	Gets the attribute prototypes .
1022	Register default values .
1023	Register a type .
1024	Lookup the type of the given class .
1025	Lookup the SQL type for the given class .
1026	Creates a ProxyInfo instance
1027	Creates a ProxyInfo instance
1028	Create a ProxyInfo instance
1029	Returns the number of transaction transactions .
1030	Returns the number of transactions with the given status .
1031	Associate a transaction .
1032	Ensure that the given transaction is part of the current transaction .
1033	Lookup a resource manager .
1034	Creates a proxy object .
1035	Append method name .
1036	Returns the left and padding of the given string .
1037	Converts a value to a pretty string .
1038	Converts a string to camelCase .
1039	Formats a paragraph .
1040	Convert tabs to spaces .
1041	Escape a string .
1042	Unescape a string .
1043	Gets a bean .
1044	Get a bean by name .
1045	Initialize bean definition .
1046	Invokes the provider method .
1047	Register a bean .
1048	Sets a bean property .
1049	Get a property by name .
1050	Shutdown all beans .
1051	Resolve method parameters .
1052	Process the body of the body .
1053	Get the value of the property .
1054	End the root node .
1055	Creates a new element node .
1056	Add a tag .
1057	Remove the last child node from the parent node .
1058	Returns the query string .
1059	Get the action class name .
1060	Calculates the size of the given number .
1061	Iterate over the given collection .
1062	Iterate over the given array .
1063	Replace the given string with the given substring .
1064	Replaces the given substring with the given substring .
1065	Replace the given string with the given substring .
1066	Replace the first substring with the given string .
1067	Replace the first character with the given substring .
1068	Replaces the last occurrence of the given string with the given string .
1069	Replace the last character with the given substring .
1070	Removes a substring from the string .
1071	Removes a character from a string .
1072	Checks if all strings are empty .
1073	Returns true if all strings are empty .
1074	Converts a value to a String array .
1075	Changes the first character of the first character .
1076	Converts a string to a title .
1077	Compress a string to a string .
1078	Returns true if the string starts with the given substring .
1079	Returns true if the string ends with the given character .
1080	Returns the number of occurrences of the given string .
1081	Compares two strings .
1082	Returns the index of the given string .
1083	Strip the leading char from the string .
1084	Remove trailing char from string
1085	Removes a char from a string .
1086	Strip a character from a string .
1087	Strip a character from a string .
1088	Crops all strings .
1089	Trim whitespace .
1090	Removes whitespace from a string .
1091	Returns the index of the region of the given string .
1092	Joins a collection of strings .
1093	Joins an array of objects .
1094	Converts the source to a string .
1095	Checks if the given string is equal to the given index .
1096	Renders a string with a prefix .
1097	Prefix a string .
1098	Adds suffix to string .
1099	Returns the substring of the given string .
1100	Remove a substring from a string .
1101	Removes prefix from a string .
1102	Remove suffix from string
1103	Cut a string from a string .
1104	Inserts a string into a string .
1105	Repeat the given string .
1106	Reverse a string .
1107	Returns the longest prefix between two strings .
1108	Returns the common prefix of the given strings .
1109	Shortcut to shorten a string .
1110	Convert string to upper case
1111	Remove quotes from a string .
1112	Convert bytes to hex string
1113	Converts a string to a byte array .
1114	Detect the quote character .
1115	implements the visitor .
1116	Visit an enum .
1117	Visits an annotation .
1118	Registers a type .
1119	Registers a new entity .
1120	Removes an entity from the database .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Injects the target object into the target object .
1124	Lookup the properties of the given type .
1125	Detect the database and configure the database .
1126	Closes the output stream .
1127	Write a byte to the buffer .
1128	Perform a filter on the request .
1129	Returns the name of the message .
1130	Converts the buffer to a byte array .
1131	Writes the data to a file .
1132	Writes the data to the output stream .
1133	Append an argument to a string .
1134	Prepend the argument to the given argument .
1135	Change type type .
1136	Sets the content of the text .
1137	Register a type converter .
1138	Lookup a type converter .
1139	Selects a CSS selector .
1140	Selects a list of nodes .
1141	Processes selectors .
1142	Selects the first node of the given query .
1143	Recursively walk the descendants of the descendant nodes .
1144	Recursively walk the tree .
1145	Adds an element to the list .
1146	Returns true if the given node matches the given index .
1147	Convert a packed string to a map .
1148	Refill the buffer .
1149	Page query .
1150	Remove select from the SQL statement .
1151	Removes the FROM FROM from the SQL statement .
1152	Removes the last order by the last order .
1153	Decode a HTML string .
1154	Detects the name of an entity .
1155	Builds a SQL statement .
1156	Build the LIMIT SQL statement .
1157	Resolve the column descriptors .
1158	Finds a column by its name .
1159	Returns the column descriptor for the given property name .
1160	Returns the property name for the given column name .
1161	Get column name .
1162	Returns the id of the given object .
1163	Sets the id of the object .
1164	Returns the key value for the given object .
1165	Appends a string to the array .
1166	Sets the index .
1167	Expand the array .
1168	Calculates the length of the array .
1169	Creates a message that is mixing between two beans .
1170	Creates a proxy bean .
1171	Runs the body of the body .
1172	Initialize the cache .
1173	Checks if a file is valid .
1174	Sets the watch file .
1175	Start the timer .
1176	Called when a file is changed .
1177	Add an enumeration .
1178	Compute the size of the field info .
1179	Puts the field info .
1180	Creates a new Target instance .
1181	Writes the value of the given property .
1182	Decorate the content of a page .
1183	Parses the given page content .
1184	Writes the decorated page content to the writer .
1185	Writes the content of the given decora tag .
1186	Start the server .
1187	Run the process .
1188	Creates an IMAP store .
1189	Create a gzip response stream .
1190	Initializes the hint .
1191	Appends the alias to the query builder .
1192	Append column name .
1193	Add a rule .
1194	Apply filters to the given value .
1195	Processes the inclusion of the given value .
1196	Processes excludes .
1197	Returns the pseudo class name .
1198	Adds all elements to this collection .
1199	Find the insertion point at the given index .
1200	Register an annotation configuration .
1201	Registers a new action configuration .
1202	Lookup an action configuration .
1203	Add a new action config .
1204	Setup system properties .
1205	Validate the given value .
1206	Find the last table .
1207	Fixes the elements of the table .
1208	Registers session beans .
1209	Gets the session map .
1210	Initialize this class .
1211	Adds an advice to the method .
1212	End the bundle .
1213	Add a profile to the profile .
1214	Extract profiles and add them to the list of profiles .
1215	Adds the given value to the map .
1216	Convert a typedescriptor to a class name .
1217	Convert a type reference to a name .
1218	Converts a typedescriptor to a signature .
1219	Convert a type to a typeref .
1220	Adds a consumer to the list of consumers .
1221	Creates a collection of objects .
1222	Convert a value to a single element .
1223	Convert a value to a collection .
1224	Convert a collection to a collection .
1225	Converts the given value to a collection .
1226	Add a line number .
1227	Visits the line number of lines .
1228	Adds a forward reference to the source code .
1229	Adds a forward reference to the source .
1230	Resolve instruction instructions .
1231	Mark subroutine .
1232	Add subroutine to the list of subroutine .
1233	Compare two numbers .
1234	Fix the accent .
1235	Put a byte value into the buffer .
1236	Creates a new ByteVector .
1237	Add a short value .
1238	Creates a new ByteVector .
1239	Creates a new ByteVector .
1240	Add an int to the buffer .
1241	Creates a new ByteVector .
1242	Add a long value to the buffer .
1243	Put a byte array into the buffer .
1244	Increases the size of the buffer .
1245	Authenticate user via http session .
1246	Authenticate user via authentication .
1247	Authenticate user with basic authentication .
1248	Find the default message for the given locale .
1249	Returns the bundle bundle .
1250	Get the value at the given index .
1251	Sets the ID of the entity .
1252	Saves an entity .
1253	Updates an entity .
1254	Updates a property .
1255	Updates a property .
1256	Find entity by id .
1257	Finds an entity by property name .
1258	Find one entity by criteria .
1259	Deletes an entity from the database .
1260	Deletes an entity .
1261	Count the number of entities .
1262	Increase the value of a property .
1263	Decrease a property .
1264	Returns a list of entities for the given target .
1265	List all entities .
1266	Clears the cache .
1267	Returns the set of entries for this attribute .
1268	Put a value in the cache .
1269	Removes a value from the cache .
1270	Returns the current stack trace .
1271	Returns the stack trace of the given Throwable .
1272	Gets the stack trace chain .
1273	Returns the exception chain of the given Throwable .
1274	Converts an exception to a string .
1275	Converts a Throwable to a string .
1276	Builds a message .
1277	Unwraps a Throwable .
1278	Registers the parser for the given class .
1279	Register a new madvocComponent class .
1280	Gets the system class loader .
1281	Get a resource as a stream .
1282	Get a resource as a stream .
1283	Reads a class from a class .
1284	Reads a class from a class .
1285	Add a new route .
1286	Creates a new route with the given value .
1287	Parse request parameters .
1288	Convert a value to a collection .
1289	Invokes the setter method .
1290	Set the value for a given index .
1291	Creates a bean property .
1292	Extracts the type from the bean property .
1293	Stops the session .
1294	Starts the session .
1295	Converts a LocalDate to a Date object .
1296	Converts a local date time to a calendar .
1297	Define a proxy .
1298	Adds a check to the map .
1299	Resolve the validation context .
1300	Adds the checks to the cache .
1301	Collects all annotations for the given property descriptor .
1302	Collect annotation checks for annotations .
1303	Copies the default check properties .
1304	Encode a URI component .
1305	Encode a string .
1306	Encode a scheme .
1307	Encode a host .
1308	Encodes a port .
1309	Encode a path .
1310	Encode a query .
1311	Encode a query parameter .
1312	Encode a fragment .
1313	Inspects the properties of the bean .
1314	Gets all property descriptors .
1315	Returns the set of cookies .
1316	Unzip content .
1317	Close the connection .
1318	Checks if the given scope is accepted .
1319	Prints the routes .
1320	Encrypts the given content .
1321	Decrypts encrypted content .
1322	Convert a map to a bean .
1323	Generate a list from a list .
1324	Sets the value of a property .
1325	Convert a map into a Map .
1326	Compares the column name .
1327	Sets the default header .
1328	Send a request to the server .
1329	Send a request to the server .
1330	Adds default headers .
1331	Read the cookies from the http response .
1332	Adds cookies to the request .
1333	Send an email .
1334	Set the subject .
1335	Set the message s sent date .
1336	Set the headers for the given email .
1337	Set people to recipients .
1338	Sets the recipient s recipients .
1339	Add body data to message .
1340	Sets the content of the given email message .
1341	Creates a MIME body part .
1342	Returns the content type of the content header .
1343	Saves the resultSet to the database .
1344	Closes all result sets .
1345	Close the query .
1346	Closes the connection .
1347	Sets the fetch size of the query .
1348	Sets the maximum number of rows .
1349	Executes the update statement .
1350	Execute count query
1351	Gets the generated keys .
1352	Returns the query string .
1353	Creates an instance of the specified aspect class .
1354	Returns a collection of elements .
1355	Returns a stream of elements of the given iterator .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Prints a log message .
1359	Returns the caller class name .
1360	Shortcut to shorten class name .
1361	Sets the excluded types .
1362	Serializes the given object to the given target .
1363	Serializes an object into a string .
1364	Clone the given object .
1365	Writes an object to destination .
1366	Reads an object from a file .
1367	Converts an object to a byte array .
1368	Converts a byte array to an object .
1369	Resolve the mapping table names .
1370	Creates the table names table names .
1371	Reads a column value from the database .
1372	Caches the result set into the cache .
1373	Resolve provider definition .
1374	Converts a table name to a table name .
1375	Checks if the connection is valid .
1376	Render view .
1377	Locate the target view .
1378	Gets the writer .
1379	Get the output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Write a string to the buffer .
1383	Authenticate the user .
1384	Returns a JSON representation of the token .
1385	Login via BasicAuth
1386	Logout user session .
1387	Converts a URL to a container .
1388	Create a directory .
1389	Create a directory .
1390	Copy a file to a destination .
1391	Copy a directory .
1392	Move a file to a directory .
1393	Moves a directory .
1394	Delete a directory .
1395	Read UTF - 8 chars from file .
1396	Read chars from file .
1397	Writes data to destination .
1398	Write a string to a file .
1399	Appends a string to a file .
1400	Read bytes from a file .
1401	Write bytes to destination .
1402	Append data to destination .
1403	Copies src to dest .
1404	Delete a file .
1405	Creates a temporary directory .
1406	Checks if a file is binary .
1407	Checks if the source directory exists .
1408	Checks if the given source file exists .
1409	Prints the usage command .
1410	Resolve action method .
1411	Register an action .
1412	Register a path alias .
1413	Returns true if the next iteration is next .
1414	Creates a new CharArraySequence from a given value .
1415	Execute the target method .
1416	Matches the upper case of the given string .
1417	Creates a new CharSequence .
1418	Returns the URLs of the given classloader .
1419	Add bccs to the email .
1420	Registers a type .
1421	Lookup the type of the given type .
1422	Parse the input stream .
1423	Returns the value of the specified parameter .
1424	Returns the value of the given parameter .
1425	Get a file upload .
1426	Get file upload array
1427	Initialize the filter .
1428	Parse the given template .
1429	Find the end of the macro .
1430	Count the number of escapes .
1431	Build query string .
1432	Parse a query string .
1433	Prepare header parameter name .
1434	Extract media type .
1435	Convert a node to a HTML string .
1436	Convert a node to a string .
1437	Configure the MADOCOC .
1438	Reset the map .
1439	Configures the parser .
1440	Replies the mapping for the given path .
1441	Parses a String into a List .
1442	Parse a string into a Map .
1443	Resolve lazy value .
1444	Skip an object .
1445	Parse a string .
1446	Parse string content .
1447	Parses a unicode character .
1448	Parse unquoted string content .
1449	Parse a number .
1450	Parse array content .
1451	Creates a new constructor .
1452	Creates a simple method wrapper .
1453	Resolve the raw type name .
1454	Resolve a reference from a property descriptor .
1455	Resolve references from the given parameters .
1456	Reads all annotations from the given method .
1457	Build the default references .
1458	Build the default reference for a property descriptor .
1459	Remove duplicate names from all beans .
1460	Convert references to bean references .
1461	Convert an annotation value to a bean .
1462	Runs the given consumer .
1463	Finds a method by its name .
1464	Finds the constructor for the given class .
1465	Resolve all interfaces .
1466	Compare two parameters .
1467	Force access to an accessible object .
1468	Creates a new instance of the given class .
1469	Returns the superclasses of the given type .
1470	Returns the child class of the given object .
1471	Returns the jar file for the given class .
1472	Sleeps a thread .
1473	Sleep the thread .
1474	Wait until the object is interrupted .
1475	Creates a new thread factory .
1476	Get the value of the supplier .
1477	Visit a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visits a parameter annotation .
1481	Visits a field in the visitor .
1482	Visits a method in the visitor .
1483	Visits a dynamic dynamic dynamic method .
1484	Visit a jump instruction .
1485	Visits a multi - op array .
1486	Visits a code block .
1487	Visits a local variable annotation .
1488	Convert properties to a writer .
1489	Process the input stream .
1490	Returns the next element .
1491	Move the next element to the next element .
1492	Join two arrays .
1493	Join two arrays .
1494	Resizes the given buffer .
1495	Appends a new element to the buffer .
1496	Removes an array from the given buffer .
1497	Returns the index of the given value .
1498	Returns the index of the given array .
1499	Returns the index of the given byte array .
1500	Enable XHTML mode .
1501	Parses the given content .
1502	Parses the LagartoParser .
1503	Compute the maximum stack and local stack .
1504	Ends the current basic block .
1505	Collect attribute prototypes .
1506	Injects the given target object .
1507	Register a pseudo - class .
1508	Lookup a pseudo - pseudo - class .
1509	Invokes the given action .
1510	Returns the names of all properties of the given type .
1511	Visit all properties .
1512	Returns true if the given property name matches the given rule .
1513	Resolve the given type .
1514	Reads the parameters from the filter config .
1515	Sends a bundle file .
1516	Lookup a bundle file .
1517	Lookup the file for the given file .
1518	Registers a bundle .
1519	Creates the digest of the given source .
1520	Create a bundle .
1521	Resets the bundle files .
1522	Fixes CSS relative URLs .
1523	Update column .
1524	Creates a table name .
1525	Gets a DB session .
1526	Convert a value to a single element .
1527	Parse the signature for a signature .
1528	Resolve a set of property types .
1529	Checks if the given property type is ignored .
1530	Open a connection to the database .
1531	Open the transaction .
1532	Close the transaction .
1533	Commit a transaction .
1534	Rollback a transaction .
1535	Create a Properties from a file .
1536	Create a Properties object from a string .
1537	Load properties from a string .
1538	Returns a subset of properties .
1539	Load properties from a classpath .
1540	Get the value of a property .
1541	Resolve all variables in properties .
1542	Resolves a property .
1543	Resolve scope .
1544	Gets the transaction mode .
1545	Register the annotations .
1546	Reads the transaction annotation .
1547	Accepts a node .
1548	Returns true if the given node matches the given node .
1549	Accepts a list of nodes .
1550	Unescape a value .
1551	Build the JsonPackages .
1552	Clone this node .
1553	Detach the parent node .
1554	Add a child node to this node .
1555	Inserts a node at the given index .
1556	Inserts a new child node .
1557	Inserts a new child node .
1558	Inserts a new child node .
1559	Inserts a new child node .
1560	Remove all child nodes .
1561	Find the child node with the given name .
1562	Filters the children of this node .
1563	Checks if the current node is valid .
1564	Initializes the child elements .
1565	Initializes the sibling names .
1566	Initializes the child nodes .
1567	Change owner document .
1568	Returns the previous sibling name .
1569	Gets the text content of this node .
1570	Returns the HTML representation of this element .
1571	Gets the inner HTML of this element .
1572	Visit all child nodes .
1573	Returns the CSS path of this node .
1574	Defines a decora tag .
1575	Process the tag attribute .
1576	Defines the decora tag .
1577	Add a ProxyAspect .
1578	Add a root package .
1579	Adds the root package for the given action class .
1580	Find the root package for the given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Adds a name pattern to the list of props .
1584	Iterate over all targets .
1585	Iterate over all targets in the given scope .
1586	Iterates over all targets in the given scope .
1587	Extracts the parameters from the target parameters .
1588	Creates the target targets for the given action .
1589	Creates an action method argument .
1590	Sets the session created .
1591	Called when a session is destroyed .
1592	Adds a value to the list .
1593	Adds an array to the list .
1594	Removes an element from the list .
1595	Resolves the target value .
1596	Called when the action is not found .
1597	Converts a value into a String .
1598	Filter the given action filter .
1599	Returns the name of the pseudo - function .
1600	Resolve the given type .
1601	Creates a socket socket .
1602	Get the number of attributes .
1603	Get all action results .
1604	Checks if the given char is equal .
1605	Finds the first occurrence of the given match .
1606	Finds the first occurrence of a char in the source array .
1607	Add command line arguments .
1608	Add environment variable .
1609	Run the command line .
1610	Invokes the given listener .
1611	Copies the frame from the given frame .
1612	Returns the abstract type for the given type .
1613	Get the abstract type from a descriptor .
1614	Sets the input frame from an API format .
1615	Get the abstract type .
1616	Sets the value of a local type .
1617	Push an abstract type .
1618	Pushes an abstract type .
1619	Removes elements from the stack .
1620	Pop the type from the given descriptor .
1621	Adds an initialized type .
1622	Returns the type of the given abstract type .
1623	Puts an abstract type .
1624	Removes the cache from the cache .
1625	Schedules the cache .
1626	Visits a module .
1627	Visit a nest host .
1628	Visits the outer class .
1629	Visitor for annotations .
1630	Visit a nested member .
1631	Visits a class .
1632	Visits a field .
1633	Get the current thread session .
1634	Closes the thread session .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Read the request body .
1638	Calculates the first item index of a page .
1639	Calculates the first item index of the given page request .
1640	Returns true if the given value matches the given value .
1641	Converts a char array to a raw byte array .
1642	Finds the first occurrence of the first occurrence of the given match .
1643	Resolve the node name .
1644	Resolve attribute name .
1645	Renders an attribute .
1646	Load properties from a file .
1647	Load properties from a file .
1648	Load properties from input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Load properties from a classpath .
1652	Returns the value of the given key .
1653	Sets the value of a property .
1654	Extract properties from the profile .
1655	Extract the properties from the given target .
1656	Extract all subProperties from the given target .
1657	Extracts a map of profiles .
1658	Adds a map to the map .
1659	Resolve active profiles .
1660	Get all profiles .
1661	Returns a list of profiles for a given name .
1662	Add a property injection point .
1663	Adds a setInjectionPoint to the set of sets .
1664	Adds a method injection point .
1665	Adds the initialization method points to the init method .
1666	Add the destroy method points to the destroy method .
1667	Resolve target class .
1668	Injects the target object into the target object .
1669	Returns the type of the target class .
1670	Finds a field descriptor .
1671	Returns the type of the field .
1672	Resolve the key type .
1673	Resolve component type .
1674	Creates a JsonResult object .
1675	Creates a JSON response .
1676	Resolves the HTTP method name from the given method name .
1677	Returns true if the pattern matches the pattern .
1678	Resolve the loading strategy .
1679	Resolve a resource .
1680	Loads a class .
1681	Returns the URL for the given resource .
1682	Waits for the current thread .
1683	Detect annotation type .
1684	Builds an injection point .
1685	Recursively visit the property .
1686	Returns the URLs of the given classloader .
1687	Sets the bean .
1688	Updates the bean .
1689	Load property descriptor .
1690	Getter for getter .
1691	Returns the setter for the given property .
1692	Connect to the database .
1693	Adds an iterator to the collection .
1694	Prints the log .
1695	Stop the joyer .
1696	Creates a socket .
1697	Creates a SSL socket .
1698	Returns the default SSL socket factory .
1699	Get the socket factory .
1700	Generates a random string from the given array .
1701	Returns a random string with the given start and end .
1702	Returns a random string with random characters .
1703	Creates a new instance of the given type .
1704	Injects the given value into the target object .
1705	Convert a value to a type .
1706	Visits a provider .
1707	Creates a default type cache .
1708	Put a value into the map .
1709	Gets all method descriptors .
1710	Resolve IP address .
1711	Returns the IP address as an integer .
1712	Checks if the input string is valid .
1713	Resolve host name .
1714	Download bytes from a URL .
1715	Downloads a URL from a URL .
1716	Download a file .
1717	Injects the request parameters .
1718	This method is called when an action request is injected .
1719	Creates a new socket .
1720	Creates a new socket .
1721	Returns the index of the primitive class name .
1722	Loads a class from an array .
1723	Load an array class by its component type .
1724	Shutdown all beans .
1725	Creates a binary search for an array .
1726	Creates a new BinarySearch .
1727	Exclude excluded rules .
1728	Sets the inclusion of the given string .
1729	Includes the given template .
1730	Start the tag .
1731	Register a component .
1732	Resolve column type .
1733	Preprocess query string
1734	Creates a new ResultSetMapper .
1735	Returns the generated key for the given type .
1736	Populate the generated keys .
1737	Creates a bean wrapper .
1738	Sets a bean from the query .
1739	Sets the query parameters .
1740	Sets the list of objects .
1741	Inserts the next chunk after the previous chunk .
1742	Returns the type of the given entity .
1743	Finds the given column reference .
1744	Resolve the table alias .
1745	Resolves the given object .
1746	Append the missing whitespace .
1747	Returns an enumeration of the file parameter names .
1748	Include the given page .
1749	Returns the URL for the request .
1750	Returns the request URI .
1751	Resolve parameter names .
1752	Start the petite container .
1753	Stop the petite container .
1754	Adds a subject to the email filter .
1755	Filter the message id .
1756	Adds a FromAddress to the email address .
1757	Create a new email address .
1758	Add a cc address to the email address .
1759	Add a bcc address .
1760	Adds a flag to the query .
1761	Add a flag to the email filter .
1762	Filter the received date .
1763	Sets the sent date .
1764	Sets the size of the filter .
1765	Adds a filter to the list of emails .
1766	Creates or concatenate the given email filters .
1767	Adds a filter to the filter .
1768	Concatenates a search term .
1769	Encodes a byte array into a string .
1770	Convert a value to a byte array .
1771	Checks if the request is gzip or not .
1772	Validates the given target .
1773	Validates the given context .
1774	Use this method to enable profiles .
1775	Set the enabled profiles .
1776	Checks if the given list of profiles are valid .
1777	Parses the request body .
1778	Converts the date to milliseconds .
1779	Adds the JulianDate to this JulianDate .
1780	Subtracts the JulianDate from the JulianDate .
1781	Set the fraction .
1782	Initialize the parser .
1783	Emit a comment .
1784	Error message .
1785	Creates a hash of the given password .
1786	Generate a PbK2 .
1787	Converts a hex string into a byte array .
1788	Resolve provider definitions .
1789	Sets the name of the email attachment .
1790	Sets the content id for the given name .
1791	Resolve the content type .
1792	Parse the signature .
1793	Compute the size of the attributes .
1794	Serializes the module attributes .
1795	Converts a string to a string .
1796	Decodes a query string .
1797	Start the database .
1798	Check connection provider .
1799	Visits a method signature .
1800	Visit the end of the class .
1801	Creates a method signature .
1802	Convert an object to a CSV string .
1803	Converts a string to a String array .
1804	Resolve the injection point .
1805	Creates a class reader for the given class .
1806	Returns the class reader for the given advice .
1807	Encrypt a string .
1808	Decrypt a string
1809	Get a logger by name .
1810	Set the cookie name .
1811	Creates an action request .
1812	Creates a bean wrapper .
1813	Destroy bean .
1814	Shutdown all beans .
1815	Gets the list of messages .
1816	Starts the cluster .
1817	Run the report .
1818	Print an error message .
1819	Prints the number of messages per second .
1820	Maps an existing file to the specified location .
1821	Close the session .
1822	Performs the actual work .
1823	Compute the position of the buffer .
1824	Appends a buffer to the buffer .
1825	Append padding to the buffer .
1826	Close the session .
1827	Poll the error response .
1828	Stop replay .
1829	Event handler .
1830	Called when an image is unavailable .
1831	Returns the status indicator for the given channel .
1832	Reads a channel status indicator .
1833	Set the limit .
1834	Appends a buffer to the buffer .
1835	Poll the subscription .
1836	Maps the loss report to a file .
1837	Snapshot snapshot .
1838	Creates a default header .
1839	Sets the key buffer .
1840	Add a label to the buffer .
1841	Connect to the server .
1842	Try to connect to the server .
1843	Close the session .
1844	Start recording request .
1845	Stop recording request .
1846	Receive a replay request .
1847	Stop the replay request .
1848	List recordings .
1849	Sets the list of records for this request .
1850	List recording records .
1851	Encode a recording request .
1852	Get the recording position for the recording .
1853	Gets the stop position of the request .
1854	List recording subscriptions .
1855	Checks if the given channel matches the given tag .
1856	Returns the destination address for the given URI .
1857	Returns the description of this message .
1858	Add a new image to the queue .
1859	Insert a packet into the buffer .
1860	Find the controlToggle for the given counters .
1861	Put a value to the request .
1862	Returns the channel tag .
1863	Returns the entity tag .
1864	Add session id to channel .
1865	Get tag from string value .
1866	Appends padding to the buffer .
1867	Update the publisher limits .
1868	Create a new buffer position .
1869	Returns the label name for the given type .
1870	Scan for available bytes .
1871	Clears the URI string .
1872	Validates that the URI is valid .
1873	Set the prefix of the URI URI .
1874	Set the media URI .
1875	Set control mode .
1876	Set the term length .
1877	Set the term offset .
1878	Sets the linger period .
1879	Open datagram channel .
1880	Close the connection .
1881	Checks if the given buffer is valid .
1882	Receive data from buffer .
1883	Sends a new retransmit .
1884	Process timeouts .
1885	Returns the status of the given status .
1886	Creates a new counter .
1887	Reset the buffer .
1888	Validate this buffer .
1889	Compute the length of a vector .
1890	Calculates the maximum term window length .
1891	Validate socket buffer length
1892	Validates the page size .
1893	Validates the session id range .
1894	Validate unblock timeout .
1895	Set the error code .
1896	Resets the leader .
1897	Encodes the cluster members .
1898	Adds a list of members to the cluster .
1899	Closes all members of the cluster .
1900	Checks if the cluster is active .
1901	Computes the quorum position of the cluster .
1902	Resets the log positions of the cluster .
1903	Checks if the given cluster is valid .
1904	Checks if the members of the members of the members of the cluster .
1905	Checks if the cluster member has a majority vote .
1906	Determine the member of the cluster .
1907	Validate member endpoint endpoint
1908	Checks if two clusters are equal .
1909	Checks if the given cluster member is unanimous .
1910	Checks if the cluster is quorum .
1911	Checks if the given member ends with the given endpoint .
1912	Find the index of the given member .
1913	Remove a member from the cluster .
1914	Returns the highest id of the cluster .
1915	Maps an existing CNC file to the specified location .
1916	Check if the driver is active .
1917	Check if driver is active .
1918	Check if the driver is active .
1919	Requests the driver to terminate the driver .
1920	Returns the length of the frame length .
1921	Set the length of a frame length .
1922	Write a frame type .
1923	Set the flags in the buffer .
1924	Set the offset offset of the buffer .
1925	Write a frame ID to the buffer .
1926	Find the counter id by recording the record id .
1927	Find the counter id by session id .
1928	Returns the record id for the given counter .
1929	Check if the counter is active .
1930	Write a message to the status message .
1931	Recursively reload all entries from the file .
1932	Find the last term .
1933	Create recovery plan .
1934	Creates a recovery plan .
1935	Appends a new entry to the index .
1936	Appends a snapshot to the log .
1937	Commit the given log position .
1938	Write a tombstone entry .
1939	Closes the connection .
1940	Adds a new buffer to the buffer .
1941	Unblocks the given buffer .
1942	Get the channel from the buffer .
1943	Set the channel name .
1944	Check the length of the term length .
1945	Check the size of the page size .
1946	Sets the active term count .
1947	Computes the position of the given term .
1948	Compute log length .
1949	Stores the default frame header .
1950	Applies the default header to the buffer .
1951	Rotates the tail of the log .
1952	Initialise the tail of the metadata .
1953	Returns the offset offset of the given term .
1954	Get the tail of the tail of the metadata buffer .
1955	Sets the raw tail of the metadata .
1956	Set token buffer .
1957	Creates a new counter .
1958	Find the counter id of the counter .
1959	Checks if the counter is a replay .
1960	Get the snapshot recording id .
1961	Convert flags to chars array .
1962	Add a channel to the message .
1963	Adds a buffer to the cluster .
1964	Wraps the buffer .
1965	Commit the buffer .
1966	Abort the buffer .
1967	Main entry point .
1968	Closes the runner .
1969	Computes the position of the terminal .
1970	Creates a new counter .
1971	Find the counter ID for the given service id .
1972	Snapshot snapshot .
1973	Creates a new AtomicCounter with the given name .
1974	Close the connection .
1975	Dispatch a recording descriptor .
1976	Adds a new slab .
1977	Set a byte at the specified index .
1978	Add a new statistics .
1979	Calculates the rows for the given filter .
1980	Convert a list type to a group type .
1981	Convert a struct type into a GroupType .
1982	An annotated message .
1983	Ends the previous bit - packed bit .
1984	Reads an object from the input stream .
1985	Reads a list of footers .
1986	Read summary file .
1987	Reads the footer .
1988	Reads the next row group .
1989	Reads the next row group .
1990	Reads and returns a DictionaryPage .
1991	Adds a new writer to the pool .
1992	Removes a writer .
1993	Update the allocation size .
1994	Register a scale callback .
1995	Start the stream .
1996	Start a block .
1997	Start a column .
1998	Write a dictionary to the output stream .
1999	Write data page .
2000	Write a column chunk to the output stream .
2001	Ends the current block .
2002	Copies the input stream to the given position .
2003	Serialize this file .
2004	Merge metadata files .
2005	Write the metadata file to a file .
2006	Writes the metadata file .
2007	Merge the given file metadata into the given file .
2008	Reads the value of the property .
2009	Checks if the given schema is null .
2010	Returns the coalesce of the given objects .
2011	Convert a string to an object .
2012	Creates a ThriftMetaMetaData from a Map .
2013	Creates a ThriftMetaMeta object from a Thrift class .
2014	Returns the extra meta data .
2015	Write a null value .
2016	Writes the current page .
2017	Initialize the data from a page .
2018	Initializes the values buffer buffer .
2019	Checks if the given type is an enum .
2020	Calculates the bit widths for the miniBlockBuffer .
2021	Throw an exception if an exception is thrown .
2022	Returns the statistics for the given type .
2023	Get the builder for the given type .
2024	Merge statistics .
2025	Returns the non null value of the given schema .
2026	Creates a new TaskAttemptAttemptContext .
2027	Invokes the method .
2028	Writes the members to a string .
2029	Merge the fields of this group .
2030	Initializes the map from the reporter .
2031	Returns the filter for the given configuration .
2032	Reads all the files in parallel .
2033	Generates a list of splits .
2034	Writes the given record .
2035	Checks if the given descriptor is valid .
2036	Serialize the given proto class .
2037	Creates a DirectCodecFactory .
2038	Ensure that the required fields are missing .
2039	Checks that a set of fields are valid .
2040	Reads a file meta data .
2041	Closes the writer .
2042	Sets the schema .
2043	Adds a primitive type to the class .
2044	Assert that the given column is valid .
2045	Cast value to int .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from a Parquet schema .
2048	Creates a new schema mapping .
2049	Write data page header .
2050	Skip the current record to the next record .
2051	Write an object to the configuration .
2052	Removes the cache entry from the cache .
2053	Adds a new value to the cache .
2054	Returns the current value for the given key .
2055	Writes the given value to the given schema .
2056	Writes a value to a record .
2057	Set the glob pattern .
2058	Outputs the given content .
2059	Opens a file .
2060	Creates a new unbound record filter .
2061	Convert a StructType to a MessageType .
2062	Creates a GroupType for the given repetition .
2063	Creates a list of elements of a list of elements .
2064	Gets the merged key value for this key value .
2065	Retrieves the split from the given input file .
2066	Returns a map of fields by name .
2067	Resolve schema access .
2068	Gets the input files from the input file .
2069	Checks that the input files are valid .
2070	Get input files from a directory .
2071	Returns a new unbound record filter .
2072	Creates a ListConsumer for a given type .
2073	Initialize the map .
2074	Merge two tuples into a tuple .
2075	Sum up a tuple of tuples .
2076	Reads a struct .
2077	Read a map entry .
2078	Writes an integer to the buffer .
2079	Reads an int from a byte buffer .
2080	Sets the schema .
2081	Creates a new topic if it exists .
2082	Duplicate pipeline stages .
2083	Create a stage bean .
2084	Create interceptor .
2085	Create interceptor .
2086	Parse schema .
2087	Converts millis to days .
2088	Get the Avro schema from the header .
2089	Upgrade V1 .
2090	Returns the length of the buffer .
2091	Copy the blobstore resources to the staging directory .
2092	Resets the query .
2093	Report a thread health report .
2094	Register a thread .
2095	Stores the control hub configuration .
2096	Check if the user is authenticated .
2097	Updates the pipeline configuration .
2098	Upgrade the given stage .
2099	Upgrade the stage configuration .
2100	Upgrade services to a service .
2101	Upgrade stage .
2102	Get the list of fields that are not null .
2103	Checks if the given name is a system class .
2104	Adds an element to the list .
2105	Add an element to the list .
2106	Returns the value or the default value if not present .
2107	Adds the reported errors to the list of stages .
2108	Gets the descriptor from the given proto file .
2109	Get all file descriptors .
2110	Populates the default values for the given file descriptor .
2111	Get the descriptor for the given message type .
2112	Convert a protobuf message to a SDC field .
2113	Convert a record to a protobuf message .
2114	Convert a field to a protobuf message .
2115	Upgrade to Jersey config .
2116	Checks to see if the connection is complete .
2117	Convert a kudu type to a Field .
2118	Creates a field from the given result .
2119	Intercept the interceptor .
2120	Gets the current line .
2121	Add missing configs to stage .
2122	Parse the response .
2123	Adds the response headers to the response .
2124	Write the response header to the record .
2125	Writes the response header to the record header .
2126	Save the metadata file .
2127	Configure the client .
2128	Parses the headers of the request .
2129	Increment the source offset .
2130	Parse pagination result .
2131	Adds the headers to the response .
2132	Resolve request headers .
2133	Process the response .
2134	Checks if a property is defined in the configuration .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Gets credentials from the given path .
2138	Preview a preview .
2139	Copies the buffer to the buffer .
2140	Remove logical duplicate duplicates .
2141	Clears the batch .
2142	Find the main line of the main file .
2143	Resolves the given chunk chunk .
2144	Closes the connection .
2145	Escape a string .
2146	Gets the flow control settings .
2147	Gets the channel provider provider .
2148	Put a batch into the queue .
2149	Compile a regular expression .
2150	Computes the digest of the digest expression .
2151	Adds a dictionary to the grammar .
2152	Adds a reader to the parser .
2153	Stop the aggregator .
2154	Rolls the current data window .
2155	Serializes an object .
2156	Deserialize a string .
2157	Deserialize a file .
2158	Writes the record .
2159	Resolve an EL expression .
2160	Generates an inner field from a list of fields .
2161	Get the table name .
2162	Get the database name from the metadata record .
2163	Get the internal field of the metadata record .
2164	Get the location of the metadata record .
2165	Returns the location of the custom location .
2166	Get Avro schema from metadata record .
2167	Get the data format for the metadata record .
2168	Creates a new schema metadata field builder .
2169	Validate partition information .
2170	Generates a path to a partition path .
2171	Serialize schema to HDFS .
2172	Sets the parameters for the given operation .
2173	Get system configuration .
2174	Parses a timestamp from a string .
2175	Formats a template with the given arguments .
2176	Start the push context .
2177	Checks if the given record is valid .
2178	Filter autogenerated field names .
2179	Send an error message to the error handler .
2180	Parse a jar name .
2181	Parse the given URL .
2182	Creates a new instance of CouchbaseConnector .
2183	Closes the client .
2184	Validate configuration .
2185	Get label from string code
2186	Verifies that the given config definition exists .
2187	Read a secret .
2188	Gets the operation from the header .
2189	Write a document .
2190	Builds a sub - doc fragment .
2191	Creates a SQL statement for the given table .
2192	Configure the SASL client .
2193	Take a set of messages and return the result .
2194	Commit the given offset .
2195	Sets the consumer error .
2196	Injects the given stage .
2197	Get a list of definitions .
2198	Gets the lineage publisher definition .
2199	Formats a column name .
2200	Formats a value .
2201	Get the pipeline configuration .
2202	Creates a draft fragment .
2203	Get pipeline information .
2204	Import a pipeline .
2205	Returns the file path for the given record .
2206	Gets the operation from the given record .
2207	Get field path .
2208	Poll an event .
2209	Get the runner .
2210	Get the idle runner .
2211	Adds a runner to the queue .
2212	Destroy the queue .
2213	Validates that the container has been destroyed .
2214	Checks if the given stream name exists .
2215	Gets the last shard id .
2216	Process the queue .
2217	Handle SQL exception .
2218	Returns the hash of the column .
2219	Compare two files .
2220	Retrieve the PID from the process .
2221	Validates the fields of the given record .
2222	Gets the proxy user .
2223	Rolls the active stats .
2224	Snapshot statistics .
2225	Checks if the given path exists .
2226	Writes the records to the given batch .
2227	Writes the data to the given batch .
2228	Writes the records to the given iterator .
2229	Generates a notification event .
2230	Detects a new partition .
2231	Update HDFS record .
2232	Process the given group .
2233	Checks if two stages are equal .
2234	Main entry point .
2235	Configure the client and build the client .
2236	Resolve request headers .
2237	Gets the HttpMethod .
2238	Fill null types .
2239	Get the null value of a field .
2240	Load schema from registry .
2241	Registers a schema .
2242	Load schema from registry
2243	Get the schema id from a subject .
2244	Load schema from registry
2245	Writes the schema ID to the output stream .
2246	Detect the schema id .
2247	Returns the default values for the given schema .
2248	Parses all records from a message .
2249	Logs the details of the dependency .
2250	Gets the bad records for the given error sink .
2251	Initializes the schema generator .
2252	Gets the outward edge vertices for the given vertex .
2253	Gets the inward edge vertices for the given vertex .
2254	Serializes an offset map .
2255	Deserializes the offset map .
2256	Queue a report .
2257	Gets a report from the API .
2258	Determines if the HDF checkpoint is valid .
2259	Writes the metadata to the main checkpoint file .
2260	Deletes an object .
2261	Handle error handling .
2262	Handle an archive .
2263	Gets the reader .
2264	Release the reader .
2265	Sets the DPMBaseURL value .
2266	Add a default header .
2267	Parses a date string .
2268	Escape a string .
2269	Gets the client .
2270	Initializes the GPU database .
2271	Get the metadata for the given table .
2272	Creates a bulkInserter .
2273	Creates a new event builder .
2274	Build a schema .
2275	Convert Oracle operation to SDC code .
2276	Add jars to job .
2277	Add jars to the job .
2278	Checks if the given field is a field order .
2279	Check if the given field name matches the given field name .
2280	Gets the offset of a file .
2281	Pre - premain method .
2282	Get the number of parallelismism
2283	Run a query .
2284	Convert a list of fields to a map .
2285	Get the description of a table .
2286	Validates that the table accepts insertions .
2287	Gets the column type for the given field .
2288	Checks if the field is nullable .
2289	Get the schema schema for the given table .
2290	Gets the column properties for the given table .
2291	Returns the class for the given type .
2292	Initialize the client .
2293	Get the topic .
2294	This method is used to upgrade the configuration .
2295	Gets the input stream .
2296	Get the output stream .
2297	Checks if the file exists .
2298	Parses the given permissions .
2299	Validate all services available .
2300	Create a new aggregator .
2301	Gets the unit type for the given klass .
2302	Creates a new AggregatorData .
2303	Creates a group by name .
2304	Start the data provider .
2305	Stop the aggregator .
2306	Rolls the aggregator data .
2307	Acquire a login manager .
2308	Release this LoginManager .
2309	Converts globals to regex .
2310	Lists all objects in S3 .
2311	Stop the pipeline .
2312	Produces an empty batch of empty batches for the given runner .
2313	Creates a failure snapshot .
2314	Convert a record to bounding statement .
2315	Sets the configuration .
2316	Generate a KUD lookup key .
2317	Handles the partitioning mode .
2318	Reads a line from the reader .
2319	Rolls the current usage timer .
2320	Enable DPM configuration .
2321	Disable a user .
2322	Normalizes the DPM base URL .
2323	Retrieves the user s login token .
2324	Logout a user .
2325	Update the token file .
2326	Update DPM properties .
2327	Creates a schema field for the given type .
2328	Returns the complex schema for the given field .
2329	Get the decimal scale of a field .
2330	Returns the default value for the given schema .
2331	Initialize the metrics .
2332	Compares two files .
2333	Returns the index of the given group .
2334	Gets the list of group names .
2335	Checks if the given string is escaped .
2336	Returns true if the given string is a slashes escaped char .
2337	Checks if the given string is inside a char class .
2338	Count the number of openParens .
2339	Extract group info from named pattern .
2340	Replace the given string with the given pattern .
2341	Do a GET request
2342	Refresh the schema for the given schema and table .
2343	Checks if the transaction is expired .
2344	Get the offset of this file .
2345	Reads the next line .
2346	Create a detached stage .
2347	Convert a string to a Number .
2348	Parses a single part .
2349	Parse the values from the buffer .
2350	Lookup the primary key columns .
2351	Create custom field mapping .
2352	Get SQL type name .
2353	Returns the table name .
2354	Set primary keys .
2355	Handle SQL exception .
2356	Processes a batch of tasks .
2357	Prepares the pipeline context .
2358	Finish a batch context .
2359	Flatten the fields of a field .
2360	Create a DetachedStageRuntime instance .
2361	Execute the given record .
2362	Gets the parameters for the given operation .
2363	Gets the condition for partition .
2364	Validates that the given offset is stored .
2365	Returns a list of BundleContentGeneratorDefinitionDefinitionDefinition objects .
2366	Gets the non - empty list of arguments .
2367	Returns the operation for the given operation .
2368	Convert bytes to human readable format .
2369	Scan the current live file .
2370	Returns the number of pending files .
2371	Checks if the given name is whitelisted .
2372	Checks if the given versions are equal .
2373	Main method for testing .
2374	Propagate runtime configuration .
2375	Validates the report description .
2376	Creates a JdbcRecordWriter .
2377	Creates a JdbcRecordWriter .
2378	Upgrade V1 to V2 .
2379	Extract named groups from raw data .
2380	Commit a consumer .
2381	Creates a new embedded SDC .
2382	Sets the fields in the record .
2383	Returns a list of pipeline changes that have changed changes .
2384	Creates a RemoteDataCollectorResult .
2385	Creates a new gauge .
2386	Gets the parameters for the given operation .
2387	Generate header attributes .
2388	Validate a record .
2389	Handle temporary files .
2390	Gets the input stream for the given record .
2391	Creates a DataFileStream from the input stream .
2392	Writes the input file .
2393	Check if input field is valid .
2394	Check if input field is encrypted .
2395	Checks that the input field is decrypted .
2396	Checks if the input field is decrypted .
2397	Encrypts the given field .
2398	Sets the pattern for this pattern .
2399	Appends a replacement to the pattern .
2400	Gets the named groups .
2401	Replace all properties with the given replacement pattern .
2402	Ensure the avro schema exists .
2403	Returns the value of a global variable .
2404	Create the start event .
2405	Create a stop event record .
2406	Fixes the offset for the given offset .
2407	Extract the runtime type from the given field .
2408	Execute a SQL query .
2409	Execute a set of table properties .
2410	Execute a database .
2411	Execute SQL query .
2412	Execute query .
2413	Execute a batch of pipelines .
2414	Iterate over all streams in the pipeline .
2415	Gets the offset of the pipeline .
2416	Checks if the pipeline is stopped .
2417	Accepts a consumer .
2418	Gets the insert id for the given record .
2419	Gets the value from a field .
2420	Set the fragment in the record .
2421	Sets the document in the record .
2422	Sets the N1QL row in the record .
2423	Handle the whole file data format .
2424	Returns true if the given sequence is incomplete .
2425	This method is called by the class loader .
2426	Sets the stage creator .
2427	Logout the user .
2428	Sets the exceptions from the configuration .
2429	Replace variables in a path
2430	Ensures that the given path is valid .
2431	Main entry point .
2432	Returns the path to the directory .
2433	Rename a temporary file .
2434	Determine if the record is roll .
2435	Returns true if the given string matches the given pattern .
2436	Get the offset of the file context .
2437	Returns the remaining wait time .
2438	Gets the offsets for the given offset map .
2439	Creates and initializes the stage library .
2440	Create a StageLibraryDelegateDelegate .
2441	Creates a StageLibraryDelegate instance .
2442	Returns the value of the given metric .
2443	Find the header end of the header .
2444	Returns the size of the request body .
2445	Save a byte buffer to a file .
2446	Creates a new SSLServer socket .
2447	Returns the mime type for a file .
2448	Handles the interceptor .
2449	Stop all connections .
2450	Add routes to the router .
2451	Send the response .
2452	Send the body to the output stream .
2453	Creates a new response .
2454	Use this method to determine whether or not the request is allowed .
2455	Sets a cookie .
2456	Unload the queue .
2457	Decode a base64 value .
2458	Encodes a value into a string .
2459	Sets the table name .
2460	Returns the name of the principal .
2461	Registers a session repository .
2462	Resolve principal name .
2463	Returns a redis session .
2464	Get the JNDI name from the given model node .
2465	Returns the canonical names of the given view method .
2466	Registers a single synchronized synchronization .
2467	Called when the pre - completion list is completed .
2468	Gets the current transaction .
2469	Deploys the BeanDeployment .
2470	Determines whether the given persistence unit is valid .
2471	Gets the service config dependencies .
2472	Decrement the read lock count .
2473	Increment the read lock count .
2474	Add a service .
2475	Handles the restore calculation .
2476	This method is called when the deployment is deployed .
2477	Determines the top level of the top level of the static classes .
2478	Create a JSEArchiveArchiveMeta .
2479	Sets the config file and file name .
2480	Gets the JSESecurityMetaData from the given list of security constraints .
2481	Returns a map of servlet paths for the given POJO endpoint .
2482	Returns a map of servlet classes for the given POJO .
2483	Resolve the view .
2484	Get the available connections .
2485	Parse core environment element .
2486	Parse process id element .
2487	Returns the path address of the operation .
2488	Set path address .
2489	Get the value of the attribute value .
2490	Returns true if the operation is included in the operation .
2491	Creates a composite operation .
2492	Creates a new operation .
2493	Creates a new operation .
2494	Create a read attribute operation .
2495	Create a write attribute operation .
2496	Create an undeefine attribute .
2497	Returns the value of the entry .
2498	Registers a URL context factory .
2499	Removes a URL context factory .
2500	Loads the validator providers .
2501	Modify the deployment .
2502	Configure the servlet class .
2503	Modify the context root .
2504	Get the transport class name .
2505	Sets the runAs identity for the given security context .
2506	Populates the runAsIdentity .
2507	Process management resources .
2508	Injects the given property .
2509	Returns true if the given class type matches the given property type .
2510	Finds a method by its name .
2511	Finds a field by its name .
2512	Initialize the options .
2513	Derives the usage information from the request .
2514	Collect a JDR report .
2515	Collect the JDR report .
2516	Register a resource adapter .
2517	Unregisters a resource adapter .
2518	Register transformations .
2519	Write the parameters to the output stream .
2520	Read an exception .
2521	Gets the lock owner .
2522	Release the lock .
2523	Add a log to the server .
2524	Add the CDIF flag .
2525	Gets the component view .
2526	Invokes the given endpoint .
2527	Gets the component view method .
2528	Checks if the view method matches the view method .
2529	Creates a ResourceResourceResource for the given ManagementAdaptor .
2530	Gets the security metadata for the given endpoint .
2531	Get the domain of the current security domain .
2532	Ensures that the given security domain is valid .
2533	Set the IDL name .
2534	Returns the absolute name of the entry .
2535	Creates a JNDIName from the given name .
2536	Deploys the deployment .
2537	Handle a request .
2538	Checks if the transaction is in a transaction .
2539	Returns the transaction Synchronization registry .
2540	Get the connection factory .
2541	Returns the last component name .
2542	Checks if name is empty .
2543	Creates a new nameNotFoundException .
2544	Creates a new NamingException .
2545	Creates a new NamingException .
2546	Creates a new CannotProceedException .
2547	Creates a new NamingEnumeration .
2548	Rebind the given name .
2549	Get the activeMQ component .
2550	Parse connection attributes .
2551	Creates a new component instance .
2552	Returns the resource root for the given resource .
2553	Resolve runtime name .
2554	Creates a listener for the listener .
2555	Gets the primitive analysis .
2556	Shutdown the thread .
2557	Returns a list of URL patterns for the given URL pattern .
2558	Get the servlets metadata .
2559	Returns the list of servletMappings .
2560	Gets the security constraints .
2561	Returns the login config for the given JBossWebMeta .
2562	Gets the context params .
2563	Gets the web resource collections .
2564	Gets the initialization parameters for the servlet .
2565	Creates a new security constraint .
2566	Creates a new web resource collection .
2567	Creates a new JBossServlet .
2568	Creates a new servlet mapping .
2569	Creates a new auth constraint .
2570	Creates a new user data constraint .
2571	Creates a new ParamValueMeta object .
2572	Creates a new ParamValueMeta object .
2573	Register the session interceptors .
2574	Process the injection targets .
2575	Stop the container .
2576	Get the JNDI name from the model .
2577	Resolve the attribute .
2578	Returns the type of the pattern .
2579	Determine if the given resource adapter is pooled .
2580	Determine if the given resource adapter is external .
2581	Get the activeMQ server name .
2582	Returns the default persistence unit name .
2583	Start the activity .
2584	Stop the activity .
2585	Suspends the server .
2586	Resume the server .
2587	Called when the invocation is completed .
2588	Register a new transaction .
2589	Start the resource .
2590	Stop the resource .
2591	Returns the name of the capability service .
2592	Creates a list of resource roots .
2593	Returns all the class loader classes for the given deployment unit .
2594	Determines if the given pu is a class transformer .
2595	Checks if the given pu is a bootstrap bootstrap .
2596	Allow the default data source to be used .
2597	Determines whether the given entity manager should be skipped .
2598	Gets the ORB properties for the given environment .
2599	Initialize an applet .
2600	Initialize MethodHandlers .
2601	Sets the active naming store .
2602	Validate the default values .
2603	Checks the type of the given parameter type .
2604	Looks up the default value for the given annotation array .
2605	Validate the base type .
2606	Gets the deferred entity managers .
2607	Returns a string representation of a transaction .
2608	Add cache dependency dependencies .
2609	Extract dialects .
2610	Detect dialect dialect .
2611	Identify dialect .
2612	Checks the database for the database .
2613	Converts a string to a DateTime object .
2614	Set node name .
2615	Mark the deployment unit .
2616	Reads the parameters from the input stream .
2617	Write the result to the output stream .
2618	Writes an exception to the output stream .
2619	Lookup the given class and return it .
2620	Begin a new SFSB .
2621	Ends the stack trace .
2622	Get the current SFSBootStack invocation .
2623	Add a call to the stack .
2624	Removes the stack from the stack .
2625	Get the current state of the stack .
2626	Deploys the deployment .
2627	Processes managed beans .
2628	Process phase listeners .
2629	Returns the IDL name for the given class .
2630	Insert a single primitive .
2631	Convert Java ID to IDL name .
2632	Checks if the given string is reserved .
2633	Returns the signature of a class .
2634	Returns the signature of the method .
2635	Returns the name of a primitive type .
2636	Returns a BatchPermission by name .
2637	Gets the transaction scope .
2638	Put a value into the cache .
2639	Convert a security role into a ModelNode .
2640	Gets the latest entity version for the given entity .
2641	Gets a map of Timer objects from a file .
2642	Gets the directory for the given timedObjectId .
2643	Adds a listener to the target scope .
2644	Remove a listener .
2645	Fire an event .
2646	Closes the consumer .
2647	Add a private credential .
2648	Returns the object instance of the given object .
2649	Adds the transaction interceptor for the given view .
2650	Sets the substring of the given string .
2651	Create the transport configuration .
2652	Add a relative name to the resource adapter .
2653	Get the root deployment unit .
2654	Returns the service name .
2655	Creates a view configuration .
2656	Creates a new ViewBindingSource .
2657	Returns a list of interceptors for the given method .
2658	Adds a view interceptor to the proxy factory .
2659	Adds an interceptor to the view .
2660	Returns a list of interceptors for the given method .
2661	Add client interceptor .
2662	Add a client interceptor .
2663	Sets the data for the given type .
2664	Throw an exception .
2665	Gets the JAX Endpoint endpoint .
2666	Gets the JAXPJson endpoint .
2667	Get the endpoint name .
2668	Returns the endpoint class name .
2669	Returns the servlet metadata for the given name .
2670	Returns the required attachment for the given unit .
2671	Returns the optional attachment with the given key .
2672	Gets the JBossWebMetaData from the deployment .
2673	Gets the JBosserviceMetaData associated with the given name .
2674	Gets the EJBEndpoint metadata for the given class name .
2675	Get the context root of the deployment .
2676	Returns the class for the given name .
2677	Gets a resource .
2678	Gets a collection of resources .
2679	Returns a list of resources for the given path .
2680	Closes the entity manager .
2681	Get the entity manager .
2682	Register the cleanup listener .
2683	Processes the WARM deployment .
2684	Updates the server configuration .
2685	Returns true if the class is public .
2686	Creates a new endpoint .
2687	Create a new deployment deployment .
2688	Checks if the deployment is a JAXRS deployment .
2689	Sets the next timeout .
2690	Sets the timer state .
2691	Merges the deployment data .
2692	Deploys the deployment .
2693	Add remote transaction dependencies .
2694	Gets all interceptors .
2695	Checks if the method is a method level .
2696	Checks if the given element is a single element .
2697	Returns the type of the given class .
2698	Returns the type of the given parameter .
2699	Returns a resource definition resource definition .
2700	Returns a resource definition resource definition .
2701	Creates a resource definition resource definition .
2702	Parses the name of the given name .
2703	Converts a string to a string representation of a string .
2704	Parse a name component .
2705	Shutdown the IOPObject .
2706	Converts an object to a reference .
2707	Authenticate a user .
2708	Checks if the given class is matching the given type .
2709	Lookup a binding .
2710	Unbind a JNDiName .
2711	Instantiate a bean .
2712	Configure the bean configuration .
2713	Dispatch a lifecycle joinpoint .
2714	Get the current selector context .
2715	Creates a bean name .
2716	Returns the service name for the given class .
2717	Get the class by name .
2718	Processes annotations .
2719	Performs the post processing of the persistence step .
2720	Validates a descriptor .
2721	Creates the deployment .
2722	Creates the web application descriptor .
2723	Returns the auth method for the given deployment .
2724	Deploys the deployment .
2725	Handle stateless session .
2726	Create a stub for the given class .
2727	Gets an anonymous object id .
2728	Gets the list of persistent persistence providers .
2729	Clears the cache provider specific providers .
2730	Add persistence provider .
2731	Finds the parent class loader .
2732	Deploys the deployment .
2733	Adds a list of pu services to the deployment .
2734	Sets the annotations for the given deployment .
2735	Get persistence provider adaptor .
2736	Saves the persistence provider for the given deployment .
2737	Lookup persistence provider .
2738	Gets the annotations for the given URI .
2739	Creates the EJBArchive metadata for the given deployment .
2740	Build the enterprise bean metadata .
2741	Refreshes the model .
2742	Get the container analysis .
2743	Lookup the container analysis .
2744	Creates a new container analysis .
2745	Returns the IDL module name .
2746	Converts an integer to a hex string .
2747	Convert long to hex string .
2748	Checks if the method is accessor .
2749	Checks if the method is a mutator .
2750	Checks if the method is non - application exceptions .
2751	Get the name of an attribute .
2752	Returns the name of the accessor .
2753	Checks if the method names are overridden .
2754	Determines the case name of the analysis .
2755	Escape an IR name .
2756	Parse XML environment element .
2757	Parse the default context propagation element .
2758	Process the attributes of an XML stream .
2759	Loads a provider by name .
2760	Create a new add operation handler .
2761	Deploys the deployment .
2762	Writes an attribute .
2763	Returns the methodIntf for the given invocation context .
2764	Creates a new session .
2765	Extracts the destination name from the given address .
2766	Register a set of endpoint handlers .
2767	Gets the names of the given job name .
2768	Initialize the job .
2769	Returns the URI for the request .
2770	Create a ResolveResult from a URL .
2771	Lookup an object by name .
2772	Bind an object to the specified name .
2773	Unbind the specified path .
2774	Returns an enumeration of the given name .
2775	Calls the given NamingContext .
2776	Destroy a subcontext .
2777	Invoke a new context .
2778	Create a subcontext .
2779	Lookup a link .
2780	Add a property to the environment .
2781	Removes a property from the environment .
2782	Add transformations .
2783	Parses a credential .
2784	Remove a security domain .
2785	Lookup the JNDI for the given context .
2786	Creates a ModularReference .
2787	Creates a new ModularReference .
2788	Creates a ModularReference .
2789	Gets the IDL type for the given type .
2790	Wait for a Security Domain .
2791	Computes the masked password .
2792	Initializes the security vault .
2793	Start the vault session .
2794	Prints the description of the given attribute .
2795	Display the vault configuration .
2796	Configure the vault configuration .
2797	Checks if the given value is null .
2798	Get the deployment service name .
2799	Inserts a value into an array .
2800	Returns true if the given permission is allowed .
2801	Returns the string representation of the action .
2802	Returns the name of the log file .
2803	Send a notification change notification .
2804	Get the state of the given object .
2805	Returns the value of the given type .
2806	Returns the context service name .
2807	Get all interceptors .
2808	Adds an interceptor .
2809	Add a dependency .
2810	Returns the interceptors for the given method .
2811	Returns all interceptors for the given method .
2812	Adds an interceptor to the timeout .
2813	Adds an interceptor to the interceptor .
2814	Adds an interceptor to the interceptor .
2815	Add preDestroyInterceptor .
2816	Adds an interceptor to the interceptor .
2817	Adds an interceptor to the interceptor .
2818	Sets the component create service .
2819	Remove JNDI aliases .
2820	Accepts the connection context .
2821	Returns the service name of a component .
2822	Returns the context service name of a module .
2823	Returns the bind info for the given environment .
2824	Returns the bindInfo for the given JNDI name .
2825	Gets the cache for this domain .
2826	Gets the value of the value of this property .
2827	Gets the value of the value of a type code .
2828	Creates a subsystem root node .
2829	Parse the XML configuration .
2830	Start the service .
2831	Adds the WeldIntegration service .
2832	Returns a ServiceOperator service name .
2833	Add a component .
2834	Add a message destination .
2835	Get the components for a given view type .
2836	Gets all components of a given component .
2837	Returns a set of views for a given component .
2838	Resolves a message destination .
2839	Builds the transformers2 .
2840	Rejects the attribute with the given attributes .
2841	Renames an attribute .
2842	Pop the identity from the context cache .
2843	Loads the modules for the module .
2844	Checks that the version is valid .
2845	Compute the slot for the JSF version .
2846	Returns the constant type code for the given class .
2847	Adds a new type code to the given class .
2848	Ensure that the given module contains the given name .
2849	Add interfaces to a container .
2850	Adds the base values to the list of base values .
2851	Adds a class .
2852	Adds an interface to the interface .
2853	Add a value to a ValueDef .
2854	Add an exception .
2855	Returns the class level for the given annotation .
2856	Checks if the transaction is enabled .
2857	Start the service .
2858	Stop the root context .
2859	Checks if the given method type is allowed .
2860	Checks if the transaction is valid .
2861	Get all component classes .
2862	Gets the timers for the transaction .
2863	Get extra parameters .
2864	Get parameters from configuration .
2865	Converts a type to a class .
2866	Converts the given value to a String .
2867	Returns the types of the values of the given values .
2868	Checks if the given type names are equal .
2869	Returns the next binding .
2870	Gets the next binding list .
2871	Map a binding to a binding .
2872	Observe resources .
2873	Close the health check .
2874	Returns the reference for the given locator .
2875	Returns the handle for the given locator .
2876	Converts a value to an enum .
2877	Skips the input stream .
2878	Checks if the given element is not present .
2879	Add a component description .
2880	Add a class loader to the deployment .
2881	Unbind a name .
2882	Lookup the given name .
2883	Lists the names of the given name .
2884	List bindings .
2885	Adds a factory to the registry .
2886	Creates a new SetupContext handle .
2887	Creates the IO subsystem .
2888	Create the welcome content handler .
2889	Get a bean from the pool .
2890	Calculates the operation analysis map .
2891	Collects the metrics for the given resource .
2892	Prepare the deployment unit .
2893	Deploys a deployment unit .
2894	Publishes the deployment .
2895	Stops the web application .
2896	Start the Weld container .
2897	Registers an endpoint configuration .
2898	Retry a timer .
2899	Post timeout processing .
2900	Returns the methods of the class .
2901	Get the declared fields of a class .
2902	Returns the constructor for the given class .
2903	Gets a method from a class .
2904	Adds the active messaging extension .
2905	Checks if the parameter is allowed for the given resource type .
2906	Migrate generic transport .
2907	Cancels the current state .
2908	Checks if the state is running .
2909	Sets the type of this property .
2910	Checks if the given index is the indexed function .
2911	Estimate the estimate for the given class .
2912	Find all classes in a directory .
2913	Returns the list of classes of the given package .
2914	Gets the generic type of a field .
2915	Evaluates if the given record matches the given condition .
2916	Determine the field type of the given field .
2917	Updates a record .
2918	Find record by ID
2919	Gets the minimum nodes for the given node .
2920	Moves the left and equalities from the given list of leaves .
2921	Adds orderByProjections to the query .
2922	Extract sub queries .
2923	Checks if a cluster is from the cluster .
2924	Handles the class with the given index .
2925	Checks if the given class is a diamond hierarchy .
2926	Gets the order direction of the query .
2927	Checks if the given key condition is valid .
2928	Find the best index for the given indexes .
2929	Builds the index search descriptor for the given index .
2930	Computes the common factors for the given index .
2931	Create a new ODocumentFieldHandling strategy .
2932	Allow access to the user .
2933	Checks if the given resource is defined for the given resource .
2934	Returns a string representation of the cluster status .
2935	Initialize system database .
2936	Load local databases .
2937	Remove a member from the cluster .
2938	Elects a new lock manager .
2939	Assigns the lock manager to the cluster manager .
2940	Commit the current transaction .
2941	Rollback the current transaction .
2942	Updates the identity for the given record .
2943	Updates the record cache .
2944	Prepare file creation .
2945	Moves a file to the specified target .
2946	Returns a list of patterns that match the pattern .
2947	Checks if local node is local .
2948	Adds characters to the builder .
2949	Check if the socket is connected .
2950	Merges two byte arrays into two byte arrays .
2951	Splits a short value into a byte buffer .
2952	Execute the command .
2953	Put a single value into the index .
2954	Removes a value from the given key .
2955	Execute the query .
2956	Executes the first execution of the specified arguments .
2957	Creates a new stream .
2958	Checks to see if the given offset is valid .
2959	Replace the content file with the given content file .
2960	Execute a command .
2961	End the request .
2962	Add a new host
2963	Begin a request .
2964	Gets the current database instance .
2965	Returns the connection for the given channel id .
2966	Kill the connection .
2967	Interrupt the connection .
2968	Disconnect a channel .
2969	Push distrib config to client
2970	Swaps the entry at the given index .
2971	Close all records .
2972	Synchronize schema .
2973	Updates the metadata .
2974	Returns the last record .
2975	Returns the next character .
2976	Execute the command .
2977	Called when the operation is asynchronous .
2978	Register a new storage algorithm .
2979	Returns the number of open files .
2980	Checks if the expression is indexed .
2981	Move the specified position to the buffer .
2982	Fills the buffer with the specified length .
2983	Executes the next execution step .
2984	Execute full execution step .
2985	Evaluate a record .
2986	Execute the command .
2987	Load the configuration from the database .
2988	Parses an OQL command .
2989	Execute the request .
2990	Update the schedule starting at the given start node .
2991	Add an index definition .
2992	Creates a new projection item for the given aggregate .
2993	Converts the given document into an object .
2994	Returns the collate for the given document .
2995	Returns the string value as a string .
2996	Updates the probe .
2997	Execute the command .
2998	Build a JSON document from a file .
2999	Checks if the given password is valid .
3000	Creates a hash from the input string .
3001	Checks if algorithm is supported .
3002	Creates a new index .
3003	Returns a list of vertices .
3004	Returns an iterator over edges .
3005	Returns the partition key .
3006	Returns the number of tasks for this task .
3007	Gets the features .
3008	Checks if the given page index is valid .
3009	Parse the timeout .
3010	Parse the lock strategy .
3011	Create a cluster .
3012	Free the cluster .
3013	Start the cache .
3014	Shutdown the connection .
3015	Creates a new instance of the given entity .
3016	Grant access to the given resource .
3017	Revokes a permission .
3018	Returns true if the given record is deleted .
3019	Bind parameters to the query parameters .
3020	Reset the table .
3021	Returns the index of the given item .
3022	Calculates a random 32 - bit integer .
3023	Creates a new index .
3024	Removes all indexes from the database .
3025	Returns the index of the given schema .
3026	Returns the linked class .
3027	Converts this document to a stream .
3028	Remove a listener .
3029	Register a database .
3030	Cancel a request .
3031	Creates a new ODatabaseDocument instance .
3032	Merge the given value into this object .
3033	Replace the object with the given reference .
3034	Transforms the result into a map .
3035	Execute the command .
3036	Closes the pool .
3037	Unregisters a storage resource .
3038	Returns a set of the names of all the functions in the system .
3039	Returns the names of all collate factories .
3040	Returns a set of all of the names of all commands .
3041	Gets the field size and type and type and type .
3042	Write status code to the response .
3043	Write headers to the response .
3044	Write records to the response .
3045	Write a record .
3046	Send an HTTP response .
3047	Sends a stream to the response .
3048	Opens a database object .
3049	Close the database .
3050	Listen for changes .
3051	Called when a component is completed .
3052	Push the metrics to the snapshot .
3053	Add a write cache to the cache .
3054	Adds a storage counter to the snapshot .
3055	Populates a new WALCounters .
3056	Push a component counter to the snapshot .
3057	Stops the write cache timer .
3058	Stops the cache timer .
3059	Stop the full checkpoint timer .
3060	Stop the commit timer .
3061	Stop the log record .
3062	Stop the WALFlush timer .
3063	Parse a SQL statement .
3064	Initialize the receive messages .
3065	Initialize the server .
3066	Removes the record from the database .
3067	Sets a property .
3068	Removes a property from the graph .
3069	Checks if a class is in the schema .
3070	Wrap an OIndexCursor .
3071	Define a vertex attribute .
3072	Define an edge attribute strategy .
3073	Gets the list of new records for the given class .
3074	Gets the list of new records for the given cluster id .
3075	Adds an entry to the index .
3076	Merges the given set into the given set .
3077	Handles the update operation .
3078	Checks if the given function is an indexed function .
3079	Prepare the keys for the given index .
3080	Write a page to the buffer .
3081	Reads the specified page .
3082	Truncates the specified page index .
3083	Open the WAL file .
3084	Check if replication is active .
3085	Gets the new node strategy .
3086	Checks if the execution mode is synchronous .
3087	Determine if the read - write - write - write - write - write - write - to - write - write - write - write - write - write - to - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
3088	Returns a map of all servers in the cluster .
3089	Returns a set of servers in the cluster .
3090	Checks if a cluster is contained in the cluster .
3091	Checks if a server is contained in the cluster .
3092	Get master servers .
3093	Get all servers configured in cluster .
3094	Returns a set of cluster names .
3095	Returns a set of cluster names in the cluster .
3096	Returns the owner of the cluster .
3097	Returns the owner of the cluster .
3098	Returns a list of servers configured in the cluster .
3099	Returns a set of registered servers .
3100	Returns a set of DataCenters .
3101	Returns the write quorum of the given data center .
3102	Checks if the cluster is sharded .
3103	Returns a list of servers for the given data center .
3104	Returns the data center of the specified server .
3105	Returns the read quorum for the given cluster name .
3106	Returns the value of the write quorum .
3107	Get cluster configuration .
3108	Gets the configuration for the given data center .
3109	Clears the initialization stack .
3110	Returns the index of the given index .
3111	Drop an index .
3112	Add a vertex .
3113	Adds an edge to the graph .
3114	Get a vertex by id .
3115	Get all vertices of a given class .
3116	Returns an iterator over the edges of the given class .
3117	Gets an edge by its id .
3118	Use this to reuse this graph .
3119	Shutdown the database .
3120	Returns the vertex base type .
3121	Get a vertex type .
3122	Creates a new vertex type .
3123	Drop a vertex type .
3124	Gets an edge type .
3125	Create an edge type
3126	Gets an element by id .
3127	Drop a key index .
3128	Creates a key index .
3129	Remove the background exception listener .
3130	Fire the background event listener .
3131	Stop monitoring .
3132	Registers a profiler .
3133	Unregisters a profiler .
3134	Fetch the WriteCacheCounters .
3135	Fetch the statistics for the system .
3136	Fetch the statistics for the given component .
3137	Compress a JSON response .
3138	Returns the value of the specified property .
3139	Detaches an object from the object .
3140	Returns the version of the given object .
3141	Execute a command .
3142	Sets the dirty state of this object .
3143	Unset the dirty record .
3144	Returns all the types of the indexes .
3145	Returns a set of all the engines .
3146	Returns the list of missing nodes .
3147	Returns a list of all the conflict responses .
3148	Gets the best response group .
3149	Compute the quorum response .
3150	Returns a list of all the received responses .
3151	Get the execution plan .
3152	Checks if the given target is indexed .
3153	Returns the library code for the given database .
3154	Release the database engine .
3155	Returns the next position in the given file .
3156	Updates the size of the tree .
3157	Returns the value at the specified index .
3158	Returns true if the index should be used by the given index .
3159	Finds the index of the outside of the given string .
3160	Jump all whitespaces in the given text .
3161	Jump to the next character in the specified range .
3162	Sets the fetch plan .
3163	Enqueue a repair record .
3164	Cancel a record .
3165	Enqueue a cluster .
3166	Get the dependencies for the given pattern .
3167	Creates a pojo object .
3168	Registers entity classes .
3169	Registers entity classes .
3170	Sets the class handler .
3171	Acquire a database .
3172	Returns the number of available connections .
3173	Acquire a database .
3174	Executes the synchronization of the database .
3175	Lookup a provider with the given class loader .
3176	Checks to see if the memory memory is available .
3177	Creates a vertex from a JSON object .
3178	Creates an edge from a JSON object .
3179	Converts an element into a JSON object .
3180	Creates an object from an element .
3181	Execute the import process .
3182	Returns the status of the current job .
3183	Get the active data center of the cluster .
3184	Extracts the algorithm from the given cipherTransform .
3185	Creates a new OSymmetricKey from the given configuration .
3186	Creates an asymmetric key from a file .
3187	Creates a new OSymmetricKey from an input stream .
3188	Encrypts a byte array with the given bytes .
3189	Save the key to the stream .
3190	Save the keystore to a keystore .
3191	Sets the child context .
3192	Adds an object to the unique result .
3193	Gets the value of the given field .
3194	Authenticate the user .
3195	Returns the value of the given key .
3196	Get the current record .
3197	Read the current record .
3198	Get the transaction graph .
3199	Gets the noTx instance .
3200	Setup connection pool .
3201	Get a property by name .
3202	Stop a transaction .
3203	Parse a statement .
3204	Returns the next token .
3205	Returns the next token .
3206	Generate a parse exception .
3207	Get a list of vertices .
3208	Removes the vertex from the graph .
3209	Adds an edge to the graph .
3210	Adds an edge to the graph .
3211	Get the connection class .
3212	Returns the connection for the given direction .
3213	Process broken records .
3214	Returns a map of all registered methods .
3215	Execute a local request .
3216	Returns the number of nodes with the given status .
3217	Backup the output stream .
3218	Wait for next retry
3219	Returns the argument at the specified position .
3220	Returns the number of parameters in the request .
3221	Connect to the server .
3222	List databases .
3223	Get server info
3224	Checks if the database exists .
3225	Drop a database .
3226	Freeze a database .
3227	Release a database .
3228	Get cluster status
3229	Execute the command .
3230	Get the current graph .
3231	Parses the retry command .
3232	Saves a record to the database .
3233	Deletes a record .
3234	Returns the authentication header .
3235	Authenticate a user .
3236	Checks if the user is authorized .
3237	Runs the server .
3238	Adjusts the beginning of a new line .
3239	Sets the value of a bucket .
3240	Returns the object pointer to the given offset .
3241	Ends an atomic operation .
3242	Acquire exclusive lock .
3243	Changes the maximum size of the memory cache .
3244	Listen to the given host .
3245	Read parameters from the server configuration .
3246	Shutdown the logger .
3247	Adds an item to the list .
3248	Removes an entry from the cache .
3249	Acquire a lock .
3250	Returns the value of the given key .
3251	Clears the cache .
3252	Close the given key .
3253	Empty read buffers .
3254	Adds a task to the queue .
3255	This method is called when the read buffer is written .
3256	Put an entry in the read buffer .
3257	Returns the closest power of the given value .
3258	Handles an event .
3259	Convert a key to an enum .
3260	Convert all enum values to Enum .
3261	Returns the object serializer for the given type .
3262	Initializes the shutdown queue .
3263	Gets the engine by name .
3264	Execute the simple performance .
3265	Execute the query .
3266	Adds a new reader to the reader .
3267	Authenticate an OAuth token .
3268	Create the metadata for the user .
3269	Acquire a read lock .
3270	Returns the vertex of the given direction .
3271	Returns the id of the graph .
3272	Sets the value of the given property .
3273	Removes a property from the graph .
3274	Clears the cache .
3275	Deletes all subtrees .
3276	End the batch .
3277	Create a vertex .
3278	Parses the strategy .
3279	Gets the positions from the embedded collection .
3280	Execute the command .
3281	Check if the given field value is a link .
3282	Fill the record with the given data .
3283	Sets the version of the record .
3284	Returns the type of the record .
3285	Initializes the database instance .
3286	Prints the stack trace .
3287	Execute the index query .
3288	Convert a link to a record .
3289	Register a command instance .
3290	Create a server user configuration .
3291	Analyze the given conditions .
3292	Creates the indexed property for the given item .
3293	Attach this object to the object .
3294	Gets the index class .
3295	Sets the next value for the current value .
3296	Truncate the class .
3297	Add a base class .
3298	Adds the polymorphicClusterIds to the index .
3299	Converts a link to a stream .
3300	Release a pointer to the pool .
3301	Checks if the memory leak is unreleased .
3302	Clears the pool .
3303	Converts a byte array to int .
3304	Handles opening the database .
3305	Installs the cluster for the given class .
3306	Dump the status of the cluster .
3307	Returns the index of the given array .
3308	Returns the index of the given array .
3309	Returns the set of cluster names for this target .
3310	Handle the result .
3311	Returns the number of temporaryRID for this query .
3312	Report a tip .
3313	Parses a fetch plan .
3314	Parses a keyword .
3315	Optimize the sort .
3316	Returns the status of this batch .
3317	Execute the command .
3318	Handle JVM error .
3319	Validates an index value .
3320	Rollback the current transaction .
3321	Execute a command .
3322	Registers a cluster .
3323	Sets the property value .
3324	Execute the command .
3325	Executes the sync command .
3326	Deletes a record .
3327	Called when a record is registered .
3328	Delete a record .
3329	Count the number of views in the database .
3330	Count the number of classes in the database .
3331	Activate the current thread .
3332	Registers a storage encryption algorithm .
3333	Returns the relative position of the given position .
3334	Parses the next word .
3335	Parse the next word .
3336	Parses the next characters in the parser .
3337	Parses the next keyword .
3338	Check if the given character is a separator .
3339	Execute the command .
3340	Clears the configuration files .
3341	Returns the offset of the byte array .
3342	Extracts the token from the token .
3343	Acquire access token .
3344	Copies the access token .
3345	Checks if there are more characters .
3346	Reads a line from the given array .
3347	Reads a line from the buffer .
3348	Reads the number of bytes from the stream .
3349	Skip the specified number of bytes .
3350	Ensures that the given offset is valid .
3351	Merges a sorted sorted sort .
3352	Swap two arrays .
3353	Performs a parallel search .
3354	Returns the murmurHash of the given integer .
3355	Returns the murmurHash of the given long .
3356	Write a byte buffer to the file .
3357	Truncates the specified size .
3358	Set the position of the file .
3359	This method is called when the consumer is finished .
3360	Waits until all tasks are completed .
3361	Find all matches matching the given query .
3362	Returns a set of all the types that have the same type .
3363	Clean up all snapshots .
3364	Returns the hash of the given field .
3365	Checks if two fields are equal .
3366	Removes references outside of the closure .
3367	Called when an announcement is completed .
3368	Called when a cycle is completed .
3369	Read header tags .
3370	Extracts the primary key from the given object .
3371	Clear all segments .
3372	Reads ordinal values from the input stream .
3373	Returns the size of this bit set .
3374	Returns the field value for the given row .
3375	Copies the given ByteData to the specified destination position .
3376	Copies the data to the specified destination position .
3377	Returns true if two bytes are equal .
3378	Copies the given src to the given destination position .
3379	Copies the given data to the given destination position .
3380	Read from the given input stream .
3381	Writes the buffer to the given stream .
3382	Ensure that the given segment index is available .
3383	Get the position of a field .
3384	Calculates the total number of elements in the list .
3385	Checks if the given dataset has a collection of collections .
3386	Generate the files for the given package .
3387	Generate the files for the given dataset .
3388	Returns true if the given index matches the given index .
3389	Get the record key .
3390	Creates a field path for a primary key .
3391	Creates a field path for hash index .
3392	Creates a field path for the given prefix .
3393	Adds an object to the map .
3394	Initializes the field values .
3395	Returns true if the given key contains the given key .
3396	Calculates the change percentage .
3397	Add a field to the filter .
3398	Returns a list of all schemas in the given collection .
3399	Initialize the default version .
3400	Gets the value at the specified index .
3401	Find all records matching the given field .
3402	Find all records matching the given field .
3403	Sets the list of matched elements .
3404	Sets the list of elements that match the given paths .
3405	Calculate the hash of the results .
3406	Restore the latest state of the snapshot .
3407	Run the cycle .
3408	Exclude the given key .
3409	Recursively exclude references .
3410	Write the header to the stream .
3411	Calculates the metrics for a particular type .
3412	Writes the data to the buffer .
3413	Write a fixed length int to a byte buffer .
3414	Writes a fixed length long length .
3415	Adds an ordinal to the pool .
3416	Sort the list of free orders .
3417	Computes the hash of the given key .
3418	Hash the given key .
3419	Resizes the storage .
3420	Find the preferred ordinal for the given preference .
3421	Prepare the pointers for writing .
3422	Compare two byte arrays .
3423	Recursively grow the map .
3424	Rehash the given key .
3425	Creates a new empty key array .
3426	Checks if the given match matches the given match index .
3427	Find a match by key .
3428	Swaps the current state of the current state .
3429	Returns the size of the hash table .
3430	Runs the background cycle .
3431	Writes the snapshot to the output stream .
3432	Write the delta to the output stream .
3433	Adds the given schema to the set of schemas .
3434	Converts a field path to a param name .
3435	Reindex the hash index .
3436	Finds matches the given query .
3437	Trigger an async refresh .
3438	Trigger an async refresh .
3439	Add a new type diff .
3440	Calculates the differences of the type diff .
3441	Write a value to the output stream .
3442	Write a VInt to the output stream .
3443	Write a VInt to a byte array .
3444	Read a VInt from the input stream .
3445	Read a value from the input stream .
3446	Adds a child to the layout .
3447	Refresh the scrolling view size .
3448	Updates the layout for the layout .
3449	Perform the pull event .
3450	Overrides the scrolling of the view .
3451	Creates a new rule builder .
3452	Adds the given facts to the rule builder .
3453	Creates a new rule builder .
3454	Creates a RuleBuilder .
3455	Creates a new rule builder .
3456	Creates a new rule builder .
3457	Creates a new rule builder .
3458	Creates a new rule builder .
3459	Creates a new rule builder .
3460	Returns an instance of the given rule .
3461	Gets the field of an annotation .
3462	Gets an annotation from a class .
3463	Gets an annotation .
3464	Register a rule .
3465	Updates a rule status .
3466	Gets the rule status map .
3467	Returns a RuleBookBuilder with the given result type .
3468	Adds an action to the rule builder .
3469	Adds an action to the rule builder .
3470	Reset the default value .
3471	Add a new rule to the rule book .
3472	Returns the list of rules for this package .
3473	Reads an empty line from a table .
3474	Convert a list of services to an array .
3475	Get the ports from the build configuration .
3476	Extract services from config .
3477	Parse service port mapping .
3478	Adds a service port to the list .
3479	Removes a service port from the list .
3480	Add missing ports .
3481	Appends an image stream to a file .
3482	Checks if the given service port is equal .
3483	Converts a service name to a port .
3484	Get service host and port
3485	Adds a value to the map .
3486	Merge the given map into the given map .
3487	Merge two maps .
3488	Put all values to the given map .
3489	Wait until a pod is ready .
3490	Validates the given value .
3491	Converts an entity to a list of items .
3492	Get resource version .
3493	Checks if a pod is ready to be ready .
3494	Returns the current context .
3495	Checks if the given name matches the given name .
3496	Checks if the given path contains a resource .
3497	Reads and merges the given file .
3498	Convert environment variables to EnvVarList .
3499	Merges two resources .
3500	Merge a map of strings and remove empty strings .
3501	Checks if the pod spec is local .
3502	Read configuration from file .
3503	Adds a port to the map .
3504	Get docker config string
3505	Gets the plugin configuration .
3506	Gets the secret configuration .
3507	Downloads a file from a given URL .
3508	Compare two versions .
3509	Merges the given profile into a ProcessorConfig .
3510	Lookup a profile by name .
3511	Reads a profile from a classpath .
3512	Reads a profile from a classpath .
3513	Finds the profile for the given directory .
3514	Returns a list of paths for the given extension .
3515	Reads a list of profiles from an input stream .
3516	Get image pull policy
3517	Is openShift mode?
3518	Gets the replica count for the given resource config .
3519	Returns the first child of the given element .
3520	Installs an existing template .
3521	Remove tag by name
3522	Apply a namespace to the given entity .
3523	Applies a project to the project .
3524	Applies a project request .
3525	Returns the namespace for the given entity .
3526	Called when the application is applied .
3527	Creates the resource builder .
3528	Ensures that the given builder is enabled .
3529	Get environment variables .
3530	Returns the number of seconds in seconds .
3531	Converts a duration string to a BigDecimal number .
3532	Scan files in the build directory .
3533	Disable OpenShift features .
3534	Checks if the given list of ingress rules exist .
3535	Parse the mapping from a mapping file .
3536	Gets the generator context .
3537	Extract the generator config .
3538	Gets the Enricher context .
3539	Extracts the enric configuration .
3540	Gets the default icon .
3541	Copies the app config files .
3542	Get properties from a resource .
3543	Gets the Spring Boot Bootstrap version .
3544	Creates a list of service objects .
3545	Enrich all enricers .
3546	Returns the raw configuration map .
3547	Gets the flattened map .
3548	Extract watcher config .
3549	Returns the template for the given resource .
3550	Gets the timestamp for the build .
3551	Gets the value for the given key .
3552	Returns the configuration map .
3553	Prepare the list of processors for the given type .
3554	Adds the builder to the builder .
3555	Returns the default value for the docker image .
3556	Get image name .
3557	Gets the registry registry .
3558	Checks if the configuration is online .
3559	Gets the external service URL .
3560	Returns the boolean value of the given property .
3561	Creates a Jest client .
3562	Create an internal node .
3563	Scan all registered plugins .
3564	Creates an instance of American ExpressionsBalance .
3565	Gets the balances balance .
3566	Creates a new PayPal payment resource .
3567	Perform a GET request .
3568	Perform a POST request .
3569	Creates a VenmoConfiguration from a JSON object .
3570	Collect device data .
3571	Collect device data .
3572	Collect device data .
3573	Get PayPal client metadata id
3574	Checks if the signature is valid .
3575	Returns the value of the given name .
3576	Parses a list of payment methods .
3577	Returns the checkout configuration for the browser .
3578	Gets the browser configuration for the browser .
3579	Perform a GET request .
3580	Perform a POST request .
3581	Perform a POST request .
3582	Start a request .
3583	Publish a local payment .
3584	Adds a listener to the configuration .
3585	Remove a listener .
3586	Request billing agreement .
3587	Called when an activity is received .
3588	Parse PayPal account .
3589	Add Nouns to the list of words .
3590	Removes words from a list of words .
3591	Converts a list of tokens to a Java string .
3592	Extracts the words from the given tokens .
3593	Removes tokens from a list of tokens .
3594	Fetch a buffer from the given channel .
3595	Join NALUnits into a byte buffer .
3596	Joins a list of NALUnits into a byte buffer .
3597	Returns the profile for the given int .
3598	Generate a fixed precision number of taps .
3599	Reads the next marker from the buffer .
3600	Reads the next marker .
3601	Get the max available frame .
3602	Modify a file .
3603	Copies the contents of a file .
3604	Returns the duration of the edit box .
3605	Converts a frame number to a time value .
3606	Converts a time value to a frame .
3607	Calculate the media to edit the media .
3608	Convert edited time to media time .
3609	Convert a video frame to a QTFrame .
3610	Queries the time of a movie .
3611	Convert timecode to timecode frame .
3612	Formats the timecode for a timecode track .
3613	Calculates a 7 - bit integer .
3614	Sets the value at the specified index .
3615	Returns true if the color space matches the given color .
3616	Computes the size of the given size .
3617	Creates a new MP4Demuxer .
3618	Read the cache .
3619	Creates a WAV header .
3620	Create a WAV header .
3621	Parses the audio decoder .
3622	Encodes a symbol .
3623	Reads the decoder image marker .
3624	Split a movie box into a single edit .
3625	Decode a frame .
3626	Sets the big endian .
3627	Perform a deblock .
3628	Encodes a native frame .
3629	Encodes the given length into a byte array .
3630	Returns the length of the given length .
3631	Add a packet .
3632	Reposition the file .
3633	Decode a binary bin .
3634	Decodes a bit bypass to a byte array .
3635	Gets the next marker .
3636	Returns a SampleFrequency for a given int .
3637	Predict a plan .
3638	Starts the given block .
3639	Calculates the coefficients of a block .
3640	Finalize the block .
3641	Concatenates the bits of a bit buffer .
3642	Reverse a 32 - bit integer .
3643	Reverse a range of bits .
3644	Sets the cursor to the given frame .
3645	Get the pixel buffer from the frame store .
3646	Returns the position of the group change point .
3647	Convert a byte array to an int array .
3648	Convert an array to a byte array .
3649	Convert audio format to float buffer .
3650	Converts a float buffer to a byte buffer .
3651	Interleave the input stream .
3652	Removes all bytes from the input stream .
3653	Returns the size of the video .
3654	Builds a map of boxes out of the box out of the boxes .
3655	Builds a map of pixels for a given size .
3656	Read a ULBatch from a byte buffer .
3657	Reads an array of integers from the buffer .
3658	Calculate the MVPredictionMedian median of a matrix .
3659	Encodes a frame .
3660	Encodes a PNG frame .
3661	Encodes a Picture .
3662	Gets the supported codecs .
3663	Gets the supported tags .
3664	Adds a reference to the cache .
3665	Deletes all references .
3666	Flush all references .
3667	Load a library .
3668	Unpack a library .
3669	Delete temporary files .
3670	Get the default layout .
3671	Get a channel from a layout .
3672	Create a new MediaPacket .
3673	Gets the version information .
3674	Get the default time base .
3675	Creates a new Demuxer .
3676	Play video .
3677	Display the video at the given time .
3678	Create a CodecDescriptor .
3679	Prints an option to a stream .
3680	Registers a factory .
3681	Generate unique name .
3682	Create a new MediaAudioResample .
3683	Gets the supported video frames .
3684	Gets the supported videoPixel formats .
3685	Gets the supported audio samples .
3686	Gets the supported audio formats .
3687	Gets the supported audio channel layouts .
3688	Sets the flag flag .
3689	Set the flag2 flag .
3690	Gets the Decoder from the stream .
3691	Returns a demuxer .
3692	Gets the muxer format .
3693	Create a new filter graph .
3694	Returns the type of the bitstream filter .
3695	Gets a byte buffer .
3696	Creates a new audio frame .
3697	Resample a media picture .
3698	Validates the given image .
3699	Validate the picture .
3700	Get the filter graph .
3701	Get the meta data .
3702	Returns the CPUArch .
3703	Gets the CPUArch from a string .
3704	Gets the OS family name .
3705	Gets the OS family family from a string .
3706	Play a sound .
3707	Loads a library .
3708	Sets the loaded library .
3709	Loads a library .
3710	Initialize search paths .
3711	Checks if a library is loaded .
3712	Records a screen .
3713	Deletes the memory pool .
3714	Returns a MuxerStream .
3715	Get the Muxer stream .
3716	Create a set script transaction .
3717	Decode a base58 encoded string .
3718	Generate a random seed .
3719	Get a transaction .
3720	Returns a list of transactions for a given address .
3721	Get a list of transactions .
3722	Get a list of blocks in a range .
3723	Get block by signature
3724	Send a transaction .
3725	Sets a script .
3726	Compile a script .
3727	Writes a primitive array .
3728	Flush the buffer .
3729	Write an object to memory .
3730	Reads a class from the class .
3731	Write an object to the buffer .
3732	Sets the mmF data .
3733	Returns the specificity of a class .
3734	Resizes the memory store .
3735	Removes an element from the index .
3736	Write a string to the buffer .
3737	Sets the output stream .
3738	Create a JSTConfiguration instance .
3739	Create a StructConfiguration instance .
3740	Calculates the size of an object .
3741	Clears the cache .
3742	Get the object input from the input stream .
3743	Gets the input stream input .
3744	Get a copy of an object from the buffer .
3745	Get the output stream output .
3746	Register cross platform class mapping .
3747	Returns the class name for the given class .
3748	Write an integer to the stream .
3749	Writes a raw integer .
3750	Writes an integer to the stream .
3751	Write an array .
3752	Write a byte array to the buffer .
3753	Get the cached field info .
3754	Called when an object is written .
3755	Called when the object has been written .
3756	Gets the serialization info for the given class .
3757	Writes an array of objects .
3758	Sets the buffer length .
3759	Write an array .
3760	Finish the change tracking .
3761	Snapshot changes .
3762	Registers an object for writing .
3763	Writes an object to a byte array .
3764	Convert a byte array to an object .
3765	Reads a byte array from the buffer .
3766	Reads an int from the stream .
3767	Removes the number of bytes from the queue .
3768	Sets the thread pool enabled .
3769	Start embedded cassandra .
3770	Clean the data from the Cassandra driver .
3771	Copy a resource to a directory .
3772	Print information about a thread .
3773	Checks if the given node is a remote port .
3774	Creates a new subscriber state .
3775	Get the map of opnxors .
3776	Calculate the output shape .
3777	Returns true if the given NArray is true or not .
3778	Returns true if the given condition is equal to the given condition .
3779	Returns true if the given condition matches the given condition .
3780	Returns a boolean array with the given condition .
3781	Applies a condition to a given number .
3782	Returns the first index of the first index .
3783	Creates a FlatProperties object .
3784	Creates a FunctionProperties from a FlatProperties .
3785	Converts a list of properties to a FlatBuffer .
3786	Sets the given Throwable .
3787	Set the exception if it s not null .
3788	Merge two coordinates .
3789	Parses a list of floats .
3790	Returns the nd4j4j type for the given type .
3791	Shutdown the transport .
3792	Get the current device architecture .
3793	Convert col to an image .
3794	Performs a pooling on an image .
3795	Creates a CompressionDescriptor .
3796	Creates a batch of batches .
3797	Validates an array of arrays .
3798	Set the data type .
3799	Creates a new n - dimensional array .
3800	Convert a collection of matrices to a flat array .
3801	Computes the linear products of the given tensor .
3802	Creates a complex ndarray .
3803	Creates a complex value with the specified value .
3804	Creates a complex value with the given value .
3805	Checks if the current state is replicated .
3806	Subtracts a complex number from a complex number .
3807	Returns the fraction of the given complex number .
3808	Calculate the ceiling of a complex number .
3809	Negate a complex number .
3810	Returns the absolute value of a complex number .
3811	Returns the power of a complex number .
3812	Creates an instance of Aeron .
3813	Computes the binarization of the feature matrix .
3814	Returns a new DataSet with the given number of examples .
3815	Gets the memory footer .
3816	Convert an exception to a string .
3817	Get the full hostname from a full hostname .
3818	Convert an array of strings to a string .
3819	Converts a byte array to a hex string .
3820	Get a list of strings from a string .
3821	Split a string into an array of strings .
3822	Split a string into an array .
3823	Find the next character in the given string .
3824	Escape HTML .
3825	Joins a list of strings .
3826	Converts a string to camelCase .
3827	Replace all occurrences of the given template .
3828	Get the stack trace .
3829	Convert an array to an inverse matrix .
3830	Returns the element at the given n .
3831	Returns true if the current device has access to this device .
3832	Returns true if the current device is active .
3833	Creates a pair of shape information .
3834	Creates an array of shape information .
3835	Returns true if the shape is a vector .
3836	Get the order of an array .
3837	Returns the offset for the given index .
3838	Convert indices to indices .
3839	Get a short from the buffer .
3840	Reallocate the data buffer .
3841	Copies the specified number of bytes to the given buffer .
3842	Get the constant buffer for the given array .
3843	Returns the kafka URI .
3844	Compute the power of ndarray .
3845	Log the log of ndarray .
3846	Compute the maximum value of ndarray .
3847	Returns the max value of the first element in the second .
3848	Compute the minimum value of a scalar .
3849	Computes the minimum value of the first element in the second .
3850	Stabilize ndarray .
3851	Compute expm1 .
3852	Log 1 - 1 - 1 .
3853	Prepare the bounds .
3854	Adjusts the scheme to the upper bounding algorithm .
3855	Returns next data set .
3856	Simplified method .
3857	Build an allocation shape .
3858	Checks if the given name exists in the environment variable .
3859	Reads the data from the stream .
3860	Clears the tail of the tail queue .
3861	Create an INDArray from a numpy array .
3862	Create an INDArray from a file .
3863	Creates a new PagedPointer .
3864	Attaches an object to the registry .
3865	Check if the server is started .
3866	Execute the given op .
3867	Flush the queue .
3868	Gets the input stream .
3869	Get the affinity for a thread .
3870	Attaches a thread to a device .
3871	Get the next device .
3872	Returns the operating system name .
3873	Calculates the ARCH type .
3874	Publish an INDArray .
3875	Starts the instrumentation application .
3876	Creates a DataBuffer .
3877	Checks if the operation is an int .
3878	Add a complex number to the result .
3879	Process the message .
3880	Gets the average pooling for the given inputs .
3881	Determine the depth of the given inputs .
3882	Resets the state of this class .
3883	Returns the class name for the given op .
3884	Store the new array with the given shape .
3885	Get the shape of the array .
3886	Evaluate the evaluation .
3887	Compress a double array .
3888	Expand a complex array of complex numbers .
3889	Returns the center of the given array .
3890	Truncate ndarray .
3891	Pad the ndarray with the given shape .
3892	Returns the iamax of an array .
3893	Broadcast an array .
3894	Processes the message .
3895	Calculates the gamma of the given precision .
3896	Returns the square root of the square .
3897	Creates a new BigDecor .
3898	Returns the root of the given root .
3899	Compute the exponent of x .
3900	Computes the exponent of the given context .
3901	Returns the power of x .
3902	Returns a BigDecimal fraction of the given number .
3903	Calculates the sin from x .
3904	Calculate the tan .
3905	Computes the cosine of x .
3906	Calculates the sinh of x .
3907	Calculate tanh .
3908	Calculates the integral of x .
3909	Calculates the sum of the given x .
3910	Calculates the Gamma of the given x .
3911	Returns a BigDecimal with the given number of parameters .
3912	Scale a BigDecimal to a BigDecimal .
3913	Scale the given x .
3914	Convert an error to an integer .
3915	Stores a function with the given id .
3916	Returns the inputs for the given function .
3917	Updates an array with the given name .
3918	Add a shape to a shape .
3919	Associate an array with the given variable .
3920	Returns the property for the given function instance .
3921	Add a property for the given function .
3922	Adds a function to the output of the given function .
3923	Add arguments for the given function .
3924	Checks if the given function is a valid vertex .
3925	Evaluate the given inputs .
3926	Creates a new variable .
3927	Creates a new one - like - like - like .
3928	Returns the zeros with the given input .
3929	Removes an argument from a function .
3930	Sets the gradient for the given variable name .
3931	Gets the average pooling of the specified inputs .
3932	Creates a GRUCell .
3933	Execute the given list of operations .
3934	Creates a new block statement .
3935	Execute the given function name .
3936	Execute a function with the same name .
3937	Execute the back and return the result .
3938	Add a place holder .
3939	Returns a pointer to the given bytes .
3940	Returns the length of the given type .
3941	Returns the DType for the given allocation mode .
3942	Get the data type from the context .
3943	Gets the number of ops in the given name .
3944	Destroy all workspace .
3945	Prints the statistics for the current thread .
3946	Performs a trmv .
3947	Receive an INDArray .
3948	Execute the given accumulation .
3949	Performs the threshold decoding of the given encoded image .
3950	Get node name
3951	Invokes a scalar operation .
3952	Assert that the current workspace is open .
3953	Returns the negative log likelihood of the given labels .
3954	Requests a tick .
3955	Attempt to request to the current state .
3956	Release the current thread .
3957	Returns the current state of the current state .
3958	Build the environment .
3959	Process a message .
3960	Initializes the dataset from the dataset .
3961	Initializes the host collector .
3962	Returns the pointer to the given buffer .
3963	Synchronizes the data buffer .
3964	Applies the given gradient to the history .
3965	Synchronize the given allocation point .
3966	Creates an INDArrayIndex from an index .
3967	Get the properties for this function .
3968	Returns true if there are any placeholders .
3969	Compute the difference between two variables .
3970	Format an INDArray .
3971	Import a graph from a graph .
3972	Convert a complex array to a Blob object .
3973	Load a complex NDArray .
3974	Saves an object to the database .
3975	Copies the real vector to the given array .
3976	Copies the imaginary data to the given array .
3977	Compute the epsi .
3978	Assign two complex arrays .
3979	Returns the rows of the specified row .
3980	Put a row at the specified row .
3981	Put a column at the specified index .
3982	Subtracts the result of a complex array .
3983	Creates a new instance with the given result .
3984	Subtracts the result of the given result .
3985	Adds the given result to the result .
3986	Assigns the value to the given value .
3987	Reverse a complex array .
3988	Compute the eigenvalues of a matrix .
3989	Compute the symmetric generalized eigenvalues .
3990	Returns the iamax of the given array .
3991	Copies the data from x and y .
3992	Scales a scalar .
3993	Processes a message .
3994	Returns the number of nonzero counts for the given weights .
3995	Performs the reduction of the reduction .
3996	Returns the constructor for the given class .
3997	Returns the constructor for the given class .
3998	Invokes the method handle .
3999	Returns the annotation of the given annotation .
4000	Returns the declared annotation of the given class .
4001	Checks if the given class is a declared annotation .
4002	Creates a new proxy instance .
4003	Load an entity from the given entity .
4004	Save the given pojo .
4005	Create a MemcacheService .
4006	Returns the metadata for the given kind .
4007	Query all keys in the database .
4008	Performs a hybrid query .
4009	Performs a normal query .
4010	Performs a projection query .
4011	Gets the number of items in the database .
4012	Returns an iterable of iterators .
4013	Load the results from the iterator .
4014	Convert a path to a string .
4015	Creates a key for the given pojo .
4016	Compare two objects .
4017	Creates a Key for the given key .
4018	Convert a Key to a Key .
4019	Get the kind of the given class .
4020	Checks if the given type is missing .
4021	Checks if the given type is supertype .
4022	Returns the direct super types of the given type .
4023	Captures the given type .
4024	Get translator for given type .
4025	Returns the populator for the given class .
4026	Checks if the class is an index instruction .
4027	Checks if the method is of the given method .
4028	Returns a list of all properties of the given class .
4029	Gets the key metadata for this entity .
4030	Gets the value for the given key .
4031	Execute the query .
4032	Fetch pending pending data .
4033	Add indexed discriminators .
4034	Registers a subclass .
4035	Gets the component component type .
4036	Returns the type of a map key .
4037	Creates a forward path .
4038	Returns the path to the final path .
4039	Returns a string representation of this node .
4040	Returns the depth of this path .
4041	Put all buckets in the cache .
4042	Empty the cache .
4043	Caches the given bucket into the cache .
4044	Get all keys from the cache
4045	Returns the keys of the given buckets .
4046	Finds the keys for the given class .
4047	Sets the entity s key .
4048	Sets the id of the object .
4049	Gets the parent key .
4050	Register subclasses .
4051	Checks if two types are common .
4052	Transform the owner of the given class .
4053	Returns the annotation for the given type .
4054	Adds all values to the session .
4055	Load a key .
4056	Executes the next round .
4057	Translates a map of entities .
4058	Fetch all keys in the specified set .
4059	Loads an entity .
4060	Create a raw key .
4061	Returns the raw key .
4062	Returns the id of the given key .
4063	Converts a URLSafeKey to a KeyEngine .
4064	Creates a new transaction for a transaction .
4065	Create a new transaction .
4066	Executes a single transaction .
4067	Returns true if the given object matches the given conditions .
4068	Returns the Objectify object .
4069	Get the async datastore .
4070	Returns the metadata for the given object .
4071	Creates a new key range .
4072	Creates a new objectifier .
4073	Close the stackify context .
4074	Checks if the list is homogeneous .
4075	Creates a Ref .
4076	Gets the value from the cache .
4077	Adds a value to the map .
4078	Checks if this future is done .
4079	Generates the conditions for the given class .
4080	Execute the engine .
4081	Returns the container for the given type .
4082	Get a stat .
4083	Unwraps the given Throwable .
4084	Returns the translator for the given type .
4085	Returns the translation for the given class .
4086	Creates a translator for the given type .
4087	Load property from container .
4088	Get property from container .
4089	Sets the value of the given property .
4090	Saves the value of the given property .
4091	Gets the value of the given object .
4092	Writes the extensions to the wire format .
4093	Writes the content category .
4094	Write the content categories .
4095	Process a snippet .
4096	Returns an iterator over bids .
4097	Find the bid with the given id .
4098	Updates the seatbid .
4099	Remove bids from the response .
4100	Returns an iterable of Imps with the given request .
4101	Reads all extensions .
4102	Checks if the token is empty .
4103	Registers a new message reader .
4104	Registers a new extension .
4105	Process the bidet .
4106	Process fields .
4107	Updates an iterable of objects .
4108	Returns a list of objects that match the given filter .
4109	Get the name of the current node .
4110	Start an object .
4111	Start an array .
4112	Returns the next token .
4113	Writes an int to the given field .
4114	Write a list of strings .
4115	Write a list of ints .
4116	Writes a list of long values to an array .
4117	Write a list of Enums .
4118	Resolves a URL .
4119	Fixes the base query parameters .
4120	Gets the host segments .
4121	Returns the host of the given URL .
4122	Get the page from a URL .
4123	Loads a list of values from a map
4124	Extract configuration element from configuration
4125	Gets the protocol .
4126	Generate the WARC info .
4127	Extracts the refresh URL from the given value .
4128	Returns the metadata for the given target URL .
4129	Filter the metadata .
4130	Adds a URL to the queue .
4131	Clean up a field name .
4132	Gets the charset from a byte array .
4133	Gets the charset from the given content .
4134	Gets the charset from the given buffer .
4135	Determines if the given content is sniffer .
4136	Set the value of a key .
4137	Get the first value of the given key .
4138	Get a list of cookies from a string .
4139	Checks if the cookie matches the given URL .
4140	Returns the cache key .
4141	Get the robots set from the cache .
4142	Extract meta tags .
4143	Called when a request is received .
4144	Returns true if the given URL matches the given URL .
4145	Filters the given URL string .
4146	Read rules from a file .
4147	Process query parameters .
4148	Load the navigation filters from the configuration file .
4149	Add a record format to the GzipHDFBolt .
4150	Tries to throttle queries .
4151	Triggered when the query is triggered .
4152	Creates a ParseFilter from the configuration file .
4153	Append a new node .
4154	Ignore whitespace .
4155	Add a processing instruction .
4156	Adds a character to the document .
4157	Add a CDATA character .
4158	Start DTD .
4159	Start a prefix mapping .
4160	Returns the value for the given tuple .
4161	Trims the given text .
4162	Checks if a custom interval is valid .
4163	Create a URLFilters from the configuration file .
4164	Sets the number of items .
4165	Resolve the size and state of a measurement .
4166	Sets the DrawableDrawable .
4167	Sets the angle .
4168	Updates the selected position .
4169	Invalidate a wheel item .
4170	Convert position to wheel position .
4171	Update the velocity .
4172	Returns the contrast color for the given entry .
4173	Returns the value of the given value .
4174	Writes coverage data .
4175	Returns the next byte buffer .
4176	Sets a string value .
4177	Creates an array of strings .
4178	Creates an array from a string .
4179	Creates an array from an array of strings .
4180	Convert a string array into an Array .
4181	Gets the forecast time interval offset from the grrib2 record .
4182	Shows the main window .
4183	Shows the icon .
4184	Calculates the size estimate for a grid .
4185	Main entry point .
4186	Creates a new unit name .
4187	Creates a new unit name .
4188	Make a plural form .
4189	Returns true if the given date is included in this range .
4190	Returns a new DateRange with the given clip .
4191	Extend the date range .
4192	Extend the end of this date .
4193	Sets the start .
4194	Sets the end date .
4195	Sets the duration .
4196	Calculates the duration of the interval .
4197	Add a map .
4198	Prints a yyer error message .
4199	Gets the name of this node .
4200	Converts the parameters to a string representation .
4201	Open a DSP file .
4202	Computes the bounds of the bounds .
4203	Synchronize the current time range
4204	Compute the chunking chunks .
4205	Register a new directory .
4206	Processes events .
4207	Set the reference date .
4208	Open a feature dataset .
4209	Wrap a feature .
4210	Determines if the given feature type is ok .
4211	Find feature type .
4212	Writes a catalog .
4213	Convert catalog to HTML
4214	Returns the HTML for the current page .
4215	Returns the user head of the user .
4216	Make a dynamic catalog .
4217	Add global services to the catalog .
4218	Initialize the http session .
4219	Get the content of a given URL .
4220	Put a content to a URL .
4221	Get the front page .
4222	Make a catalog for the given match .
4223	Extracts the geospatial coverage from a group .
4224	Get a single Dataset by type name .
4225	Returns true if two vertices are equal .
4226	Creates a unit ID .
4227	Parse a GradsAttribute .
4228	Read the top of the topology file .
4229	Convert two shorts to int .
4230	Converts a byte array to an integer .
4231	Gets the date from the given julian days .
4232	Make a valid netcdf object .
4233	Checks if the given name is valid .
4234	Open the RDF file .
4235	Read record data .
4236	Read record data from a section .
4237	Fill non - memory variables .
4238	Creates a time struct for the given time index .
4239	Creates a GradsTime struct .
4240	Checks if the given string is a time template .
4241	Adds a function to the server .
4242	Returns a BoolFunction instance .
4243	Gets a BTFunction .
4244	Loads a new server side .
4245	Gets the level name for a grid record .
4246	Returns the level description of the given GridRecordRecord .
4247	Gets the level unit for the given level .
4248	Get the projection type .
4249	Checks if the given GridRecord is a vertical coordinate .
4250	Returns true if the layer is a layer .
4251	Make a coordinate transform .
4252	Creates a dummy variable for a given coordinate .
4253	Creates a projection from a GeoCoordTransform .
4254	Main entry point .
4255	Saves the information to the preferences .
4256	Returns a copy of this Chronology .
4257	Writes the number of bytes .
4258	Writes an array of datapype to the given DapType .
4259	Write bytes to the output stream .
4260	Write bytes to the output stream .
4261	Initialize the map .
4262	Creates a CalendarDateRange .
4263	Creates a GDS2G2G .
4264	Parse a DDS string .
4265	Parses a string into a DAS array .
4266	Swaps the header .
4267	Reads the data from a row .
4268	Main entry point .
4269	Writes an ACN constraint .
4270	Writes the headers andSS capabilities to the XML file .
4271	Writes the operations to the XML file .
4272	Read all files .
4273	Scan a log file .
4274	Get the grid type for a grid .
4275	Find the grid with the given parameter .
4276	This method is used to convert the data into a float array .
4277	Unpack the data from the data .
4278	Parses the grid into a grid .
4279	Unpack a Grib1 .
4280	Unpack a Grib22 record .
4281	Print all the grid records .
4282	Gets the next bit value .
4283	Creates a new DateTime from the given calendar .
4284	Creates a CalendarDate from the given date .
4285	Creates a CalendarDate from the given milliseconds .
4286	Creates a new CalendarDate from the given calendar .
4287	Parses a Udunits string .
4288	Returns the difference between two dates .
4289	Creates a new CDM array .
4290	Setup the download parameters .
4291	Escape a string .
4292	Creates a slice of Slice objects .
4293	Unwraps a netcdf file .
4294	Returns true if the dimension is a variable length .
4295	Compute the effective shape .
4296	Adds a date to the calendar .
4297	Multiply two units .
4298	Divide two units .
4299	Divide two units .
4300	Raise a unit .
4301	Convert this unit to a derived unit .
4302	Convert this unit to a derived unit .
4303	Converts a derived unit to a derived unit .
4304	Returns the canonical representation of this DerivedUnit .
4305	Read data from a section .
4306	Read data from the data set .
4307	Flattens a list of station names .
4308	Find a service by name .
4309	Gets the size of the segment .
4310	Gets the start of the gate .
4311	Gets the number of channels for the given data type .
4312	Writes the XML to the output stream .
4313	Returns the preferred layout size .
4314	Verify that the given path matches the given path .
4315	Generates the ProxyDsResolver for the given CrawlableDataset .
4316	Creates a CalendarUnit from the given calendar name .
4317	Creates a new instance of the given calendar .
4318	Creates a CalendarUnitUnit .
4319	Calculates the offset from a reference to a reference .
4320	Creates a calendar date .
4321	Gets the quantity of this unit .
4322	Check if a file is valid .
4323	Read station names from a file .
4324	Read data from a variable .
4325	Reads an array of integers .
4326	Reads the data from the given variable .
4327	Calculates the elevation of an angle .
4328	Calculate the step of a range .
4329	Calculates the angle of the given azim .
4330	Calculates the data from the data .
4331	Calculates the nyquist fraction of the waveform
4332	Creates a vertical transform .
4333	Set debug flags .
4334	Sets the extension index .
4335	Read data from a variable .
4336	Checks if a variable is missing .
4337	Returns the bounds of the bounding box .
4338	Finalize the structure .
4339	Adds a tab to the buffer .
4340	Pad a string to a space .
4341	Converts an integer to a string .
4342	Returns a string with the given length .
4343	Format a byte size .
4344	Prints the given d .
4345	Prints the double fraction of the given d .
4346	Returns a string representation of a shape .
4347	Finish this slice .
4348	Convert the constraints to a string .
4349	Compose two slice .
4350	Compute the value of the given slice .
4351	Dump bytes to a byte buffer .
4352	Dump bytes to a byte buffer .
4353	Returns the EarthEllipsoid for the given name .
4354	Returns the Earth ellipsoid of the given epsgid .
4355	Decodes vlen data .
4356	Decode vlen data .
4357	Extract URLs from a URL .
4358	Returns the text content of the given URL .
4359	Filter the input stream .
4360	Read data from v2 .
4361	Adds an attribute to the collection .
4362	Removes an attribute .
4363	Removes an attribute from the map .
4364	Returns a list of time units in time units .
4365	Add an action source listener .
4366	Convert a string to a DateUnit .
4367	Returns the ISO 8601 date from a string .
4368	Returns the date origin of the date scale .
4369	Returns the date as a Date object .
4370	Convert a value to a Date object .
4371	Calculates the value of the given date .
4372	Convert a double value to a string .
4373	Gets the space spacing in the grid .
4374	Add dimensions to netcdf file .
4375	Add coordinate axis .
4376	Creates the projection .
4377	Add GDS parameters to a variable .
4378	Adds a coordinate system variable .
4379	Creates a new LineCoord .
4380	Creates a PSR .
4381	Create the mercator .
4382	Calculates the MSGEGationaryaryaryaryaryaryaryaryaryary .
4383	Sets the coordinates of the grid .
4384	Reads an XML Dataset .
4385	Reads a dataset scan .
4386	Read metadata from a dataset .
4387	Gets the level of the level .
4388	Checks if a file is valid .
4389	Write a byte array to the stream .
4390	Sets the name of the attribute .
4391	Returns the coordinate name for a given axis .
4392	Get coordinate name .
4393	Build the XML representation of the error .
4394	Build the DAP exception .
4395	Break level levels .
4396	Creates a z coordinate axis .
4397	Creates new variables with new dimensions .
4398	Creates a coordinate axis from a reference variable .
4399	Returns a float as a float .
4400	Runs the grib2 file .
4401	Wrap a netcdf file .
4402	Open a file .
4403	Clears all coordinate systems .
4404	Returns the coordinate axis for the given type .
4405	Returns the coordinate axis of the given name .
4406	Find a coordinate system by name .
4407	Find a coordinate transform by name .
4408	Determine if the given enhance mode is allowed .
4409	Set the values of a variable .
4410	Sets the values of a variable .
4411	Creates an Array .
4412	Returns the offset of this vector .
4413	Checks if a file exists .
4414	Returns a list of all features in the given rectangle .
4415	Recursively discards the values of a vector .
4416	Add a new MetadataMetadata object to the metadata .
4417	Add a document to the document .
4418	Removes a document from the document .
4419	Gets the max bytes of the segment .
4420	Checks if the netcdf file isMine
4421	Add a dataset .
4422	Gets the names of the convention names .
4423	Build a string representation of the convention attribute .
4424	Build the coordinate systems .
4425	Recursively find the coordinate axes .
4426	Find the coordinate systems for the given variable .
4427	Make the coordinate systems .
4428	Make the minimal coordinate system for the given variable .
4429	Checks if the given variable is a coordinate axis .
4430	Adds a coordinate to the coordinate map .
4431	Subtracts the data from the given dataset .
4432	Set the filter .
4433	Mark a dataset .
4434	Deletes a record from the database .
4435	Initialize the server .
4436	Count the value of the given name .
4437	Add a new prefix .
4438	Compares two tables .
4439	Compare two tables .
4440	Returns the group scope .
4441	Pass an attribute to the DAPNode .
4442	Checks if the given time range is valid .
4443	Returns true if the iterator is next .
4444	Register a class name .
4445	Register a new DSP .
4446	Check if the given class is registered .
4447	Unregister a DSP class .
4448	Factory method for creating a new Grib2T tables .
4449	Gets the forecast time interval for the given pds .
4450	Gets the time interval offset from the grrib2 record .
4451	Get the vertices for a given code .
4452	Finalize this node .
4453	Sorts the list of nodes .
4454	Returns the raf file for the given file .
4455	Find a variable with the given attribute .
4456	Find a variable with the given attribute value .
4457	Find the name of a variable with attribute value .
4458	Find a variable with the given attribute name .
4459	Finds the structure of a Structure .
4460	Checks if the given dataset is a record structure .
4461	Gets the value of the given key .
4462	Get feature type .
4463	Get the name of a variable .
4464	Returns the value of the coordinate at the given index .
4465	Calculates the distance between two points .
4466	Get the coordinate values .
4467	Creates a new coordinate axis .
4468	Finds the closest bound to the given bounds .
4469	Get the name of the attribute .
4470	Add an action to the menu .
4471	Returns the match for the given path .
4472	Start the project .
4473	Returns the index of the match of the given data .
4474	Adds a picture to the cache .
4475	Report the cache .
4476	Stop background loading .
4477	Stop background loading
4478	Creates a GET request .
4479	Creates a new HTTP method .
4480	Generates a random number of floats .
4481	Generates a random number .
4482	Read data from a variable .
4483	Gets the provider for the given URI .
4484	Read the station table .
4485	Returns the index of the given grpc .
4486	Removes a variable from the list .
4487	Converts a Hgt2 Hgt2 Hgt2 .
4488	Read data from a section .
4489	Set the number of colors
4490	Calculate the transform .
4491	Convert a URI to a AuthScope .
4492	This method is called when the grid is finished .
4493	Returns true if this factor is reciprocal of another factor .
4494	Get the catalog for a given directory .
4495	Finds and returns the index of the given value .
4496	Reads the metadata from the given URL .
4497	Read metadata content .
4498	Adds metadata to the metadata element .
4499	Validate the metadata content .
4500	Read catalog configuration .
4501	Reads a DatasetElement from the given XML source .
4502	Reads a DatasetElement from the given parent .
4503	Reads a DatasetFilterElement .
4504	Reads the result service element .
4505	Creates a catalog configuration element .
4506	Creates a new DatasetSource element .
4507	Creates a new Dataset .
4508	Create a DatasetFilterElement .
4509	Creates a result element from the catalog .
4510	Returns true if flag is set .
4511	Constructs the menu .
4512	Add a menu to the menu .
4513	Add parameters to a table .
4514	Parses a parameter .
4515	Get a gempak parameter .
4516	Reads the contents of the input stream .
4517	Read bytes from input stream .
4518	Replace the file template with the given name .
4519	Sets the station info .
4520	Accepts the input buffer .
4521	Show the format info .
4522	Gets the bitmap from the bitmap file .
4523	Sets the netcdf file .
4524	Set debug flags .
4525	Parse the name of a name .
4526	Returns true if dstructure is a group .
4527	Gets the dimension length of a variable .
4528	Returns the shared dimension .
4529	Constructs a list of dimensions .
4530	Returns true if the given dtype is unsigned .
4531	Read data from server
4532	Gets the icon from the given name .
4533	Get image resource
4534	Create a cursor for the given name .
4535	Read data from a file .
4536	Read data from a layout .
4537	Read data from layout .
4538	Creates a primitive array .
4539	Convert byte array to UTF - 8 charset .
4540	Convert a char array to a byte array .
4541	Convert byte array to char array
4542	Reads a section .
4543	Creates an array structure from a section .
4544	Returns the string representation of a member .
4545	Gets the value of a member at the given index .
4546	Returns the value of a member .
4547	Compute the members of a DAP variable .
4548	Add dimensions to netcdf file .
4549	Create a Crawlable Dataset .
4550	Normalize path .
4551	Adds an explicit dataset to the cache .
4552	Add a dataset scan .
4553	Finalize the dataset .
4554	Creates a list of datasets .
4555	Gets the typical dataset .
4556	Create a Dataset .
4557	Put a resource control
4558	Adds a point to the graph .
4559	Gets the bb upper bounding box .
4560	Gets the BBLower of this Point .
4561	Validate this filter .
4562	Returns true if the given dataset matches the given dataset .
4563	Adds all features to the given dataset .
4564	Parse a constraint .
4565	Evaluate the clause .
4566	Prints the constraint .
4567	Prepares a NetcFile from an XML file .
4568	Set shared dimensions .
4569	Checks for unknown dimensions .
4570	Find group by name .
4571	Read the Xlink content .
4572	Returns the standard URI for this dataset .
4573	Sets the projection .
4574	Add a layout component .
4575	Invalidate the layout .
4576	Remove the layout component .
4577	Returns the minimum size of the container .
4578	Layout the container .
4579	Returns true if the given coordinate is a valid coordinate system .
4580	Returns the maximum value of the radial axis .
4581	Open an HTTP URL .
4582	Convert geographic coordinates to a latitude
4583	Calculates the distance between two points .
4584	Convert GO to geos
4585	Converts a scan geometry to a sweep angle .
4586	Convert a sweep angle to a scan .
4587	Sets the coordinates of the runtimes .
4588	Write a point observation to a file .
4589	Rewrite a point to a file .
4590	Returns an ArraySequence .
4591	Returns the full name of this node .
4592	Returns the unique ID of this entity .
4593	Returns the access for the given service type .
4594	Returns the InvDataset with the given name .
4595	Gets the parent catalog .
4596	Returns a list of all the metadata for this object .
4597	Find a service by name .
4598	Gets all the variables for the given vocabulary .
4599	Find all the catalogs in the given list .
4600	Escape a path .
4601	Add a new element to the array .
4602	Extracts the interpolation from the array .
4603	Computes the Rho of the earth .
4604	Returns a string representation of the exception .
4605	Creates a Structure from a gemreader .
4606	Creates a variable for missing parameters .
4607	Creates a parameter variable .
4608	Add global attributes .
4609	Gets the size of a stnVar .
4610	Creates an array of arrays .
4611	Gets the next state of the given state .
4612	Checks if the given token is an error .
4613	Prints the output of the stack .
4614	Read DMR from the input stream .
4615	Read the error message .
4616	Read data from the buffer .
4617	Reads the header from the input stream .
4618	Convert iso string to date
4619	Read a table from a URL .
4620	Transfer a group into a group .
4621	Gets the STN file .
4622	Open a network file .
4623	Returns the beginning of the given index .
4624	Returns the end of the given index .
4625	Creates all the runtime collections .
4626	Sets the edit value .
4627	Returns the type of the given format .
4628	Convert ECF coordinates to a vector .
4629	Clean up a unit .
4630	Clean up the name of the given name .
4631	Checks if the given unit is a unitless unit .
4632	Creates a note .
4633	Returns the variable id for the given variable .
4634	Parse DAS table .
4635	Find the DodsV for the given name .
4636	Find the data for the given DodsV .
4637	Finds a child by index .
4638	Gets the parent group .
4639	Returns the dimension of the given index .
4640	Returns the index of the specified dimension .
4641	Get the units string .
4642	Returns the shape as a section .
4643	Returns a copy of this variable .
4644	Sets the enum type .
4645	Read a list of ranges .
4646	Reads a scalar string .
4647	Read data from the stream .
4648	Read data from a section .
4649	Writes a CDL file .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the dimensions .
4653	Reset the shape .
4654	Sets the dimensions of this variable .
4655	Reset dimensions .
4656	Sets the dimension at the specified index .
4657	Sets the cache data .
4658	Gets all the dimensions of this Dimension .
4659	Set the bounding box .
4660	Finish all vertices .
4661	Gets all Dataset objects .
4662	Returns true if the path matches the given path .
4663	Opens a CDMD file .
4664	Build DMR dataset .
4665	Recursively build a sequence of sequences .
4666	Builds the Dap variable references .
4667	Finds the matching Enum of the given EnumNode .
4668	Returns the core dimension of the specified dimension .
4669	Recursively scans a Buf file .
4670	Process a buffered message .
4671	Perform a POST request .
4672	Gets the transform .
4673	Determines if the image is rotated .
4674	Get the map area .
4675	Convert the world to a point .
4676	Parses the zoom of the current pixel .
4677	Perform a zoom .
4678	Calculate the coordinates of a bounding box .
4679	Add a listener .
4680	Remove a listener .
4681	Send an event .
4682	Send an event to the list of listeners .
4683	Print a command line .
4684	Print a command line .
4685	Print variable data .
4686	Print a variable data section .
4687	Prints the structure data .
4688	Prints an array to a PrintWriter .
4689	Print an array .
4690	Writes a NetcML file .
4691	Read attribute value .
4692	Adds a parameter to the coordinate matrix .
4693	Main entry point .
4694	Reads an object from a DAP variable .
4695	Determines whether the given GridRecord is ascending .
4696	Returns true if the unit is compatible with this unit .
4697	Returns the label for the given quantity .
4698	Set bit offset .
4699	Convert a number of bytes to a UInt
4700	Convert a bit integer to a bit integer .
4701	Open a connection .
4702	Get the DAS file .
4703	Gets the DDS command .
4704	Gets the complete component for the given CE .
4705	Convert a projection to a latLon point
4706	Gets the IDV Dataset catalog .
4707	Convert a DateRange to a DateRange .
4708	Check if the file is valid .
4709	Handle the satellite information .
4710	Handle sensor information .
4711	Reads the root element .
4712	Clean character data .
4713	Unescape a string .
4714	Escape URL query .
4715	Unescape a URL query .
4716	Decode a backslash string .
4717	Convert a string to a string .
4718	Adds the global attributes to the netcdf file .
4719	Swaps the byte at the given offset .
4720	Swap a byte array into an integer .
4721	Swap double to double .
4722	Swap float to float
4723	Swap double to double .
4724	Converts a short value to a byte array .
4725	Converts an int to a byte array .
4726	Converts a long to a byte array .
4727	Creates a new subset of the specified range .
4728	Writes the XML document .
4729	Calculate the C .
4730	Start the XML file .
4731	Writes the features to the XML file .
4732	Add levels to the grid .
4733	Adds dimensions to netcdf file .
4734	Add a variable to the netcdf file .
4735	Find the coordinate transform .
4736	Returns the index of the given record .
4737	Shutdown the disk cache .
4738	Get the file for the given location .
4739	Get the file or cache if it exists .
4740	Show the cache files .
4741	Clean up the cache .
4742	Calculate the bearing between two points .
4743	Calculate the bearing between two points .
4744	Main method for testing .
4745	Finds a point in the Earth .
4746	Finds a point at the given point .
4747	Finds a point in the world .
4748	Load a picture in the thread .
4749	Loads picture .
4750	Loads the source picture .
4751	Stop the image .
4752	Returns true if the image should be loaded .
4753	Returns the size of the image .
4754	Sets the source image .
4755	Returns the URI for this dataset .
4756	Creates a field descriptor .
4757	Transfer data to a list of DataDescriptor
4758	Count the number of bits in the subkeys .
4759	Compares two DataDescriptor objects .
4760	Loads the header .
4761	Load data from the stream .
4762	Get field by name .
4763	Get a double array by name .
4764	Get a list of strings by name .
4765	Returns a list of boolean values for the given name .
4766	Returns the name of the field .
4767	Returns the names of the field names .
4768	Runs the DbaseFile .
4769	Gets the attributes .
4770	Sets the attribute .
4771	Removes an attribute from the database .
4772	Gets the DAP group .
4773	Gets the container s container .
4774	Returns the short name of the short name .
4775	Get the path of the container .
4776	Get the path of the group .
4777	Compute the FQN name of the FQN .
4778	Returns true if this node is top level .
4779	Compiles the DAP data .
4780	Add a new value to the bean .
4781	Returns the value of the specified key .
4782	Returns the value of the given key .
4783	Read data from a file .
4784	Prints the contents of this DSP .
4785	Print a compound instance .
4786	Writes an element to a string .
4787	Writes an element to a file .
4788	Writes the XML element to the output stream .
4789	Write the given element to the writer .
4790	Create a new dimension element .
4791	Creates a coordinate transform from a DCID .
4792	Returns an array of int values for the given attribute .
4793	Create a base unit .
4794	Duplicate a unit .
4795	Creates the base unit database .
4796	Determine the unit of a unit .
4797	Returns the SI SI SI .
4798	Find the coordinate of the given axis .
4799	Finds the closest point in the axis .
4800	Returns a subset of the values in the given range .
4801	Open a feature dataset .
4802	Open a feature dataset .
4803	An annotated dataset .
4804	Read data from a file .
4805	Parse the URI parts .
4806	Converts a string to a string .
4807	Normalize units .
4808	Compile the root group .
4809	Finalize the metadata .
4810	Returns the element at the given key .
4811	Put a value into the map .
4812	Gets the current date .
4813	Print XML attributes .
4814	Print an XML attribute .
4815	Checks if a DAP attribute is special .
4816	Prints the dimensions of a variable .
4817	Check if a file is valid .
4818	Set area attributes .
4819	Set the navigation attributes .
4820	Returns the type of the calibrator .
4821	Set the attributes of the image .
4822	Finds the coordinates of a table .
4823	Find the coordinate of a given type .
4824	Find coordinate axis by type .
4825	Find the coordinate axis by type .
4826	Find the dimension by type .
4827	Find the best coordinate system .
4828	Finds the dependent coordinate of the given coordinate .
4829	Get a variable by name .
4830	Deserialize the data from the server .
4831	Read marker .
4832	Write marker .
4833	Fatal error .
4834	Creates a new time series .
4835	Main entry point .
4836	Returns a String array of String members .
4837	Get the list of parameters
4838	Sets the stations .
4839	Sets the selected station .
4840	Redraw the image .
4841	Reads a rectangle .
4842	Write an object to the stream .
4843	Add units to this unit .
4844	Adds a unit .
4845	Adds a symbol .
4846	Get a unit by its name .
4847	Adds a unit to the unit map .
4848	Adds a unit to the unit map .
4849	Adds a unit to the map .
4850	Add a menu to the menu .
4851	Finds a Grib2 record by its ID .
4852	Read data from a dataset .
4853	Serialize this dataset into a DataOutputStream .
4854	Gets the value of the parameter values from the RDD .
4855	Constructs a new projection .
4856	Open a feature dataset .
4857	Open a feature dataset .
4858	Open a netcdf dataset .
4859	An annotated dataset .
4860	Remove duplicates from the given list .
4861	Add a partition .
4862	Create a GribCollectionMutableCollection from the index file .
4863	Creates a new instance of RegExpressionEnhancer .
4864	Returns a new instance of RegExpressionMatcher .
4865	Writes a query to a file .
4866	Read the structure data from a section .
4867	Sets the image .
4868	Sets the buffered image .
4869	Sets the zoom to fit .
4870	Paint the component .
4871	Tries to extract the time from the start time .
4872	Tries to extract the Tdattim from the input array .
4873	Convert idt to datatype
4874	Calculates the day of the month
4875	Returns the LVD coordinate for the given IV .
4876	Swap 4 bytes from the given array .
4877	Returns the packing type for the given type .
4878	Returns the data type for the given type .
4879	Read data from input stream .
4880	Write Dods to the output stream .
4881	Returns the tag associated with the given code .
4882	Returns the next image .
4883	Returns the size of the given type .
4884	Calculates the sum of an array .
4885	Sets the spatial grid .
4886	Sets the overlap .
4887	Clears the grid .
4888	Mark if the given rectangle is clear if it is clear .
4889	Finds the intersection of a rectangle .
4890	Finds the intersection of a point .
4891	Finds the closest closest point to the given point .
4892	Calculates the distance between two points .
4893	Create a new base unit .
4894	Search for a service .
4895	Search for a service type
4896	Decodes the path extension .
4897	Checks if the given location is a DDD .
4898	Checks if the given location is valid .
4899	Send data to the output stream .
4900	Returns the name of the fqn .
4901	Returns the name of the fqn .
4902	Finds a file in the specified path .
4903	Locates a relative path .
4904	Extract bytes from buffer .
4905	Get the structure of the given variable .
4906	Returns null if the path is empty .
4907	Joins an array of strings .
4908	Checks if the path is a drive letter letter letter .
4909	Gets all protocol protocols .
4910	Convert an index to a slice of slices .
4911	Convert an offset to a slice of slices .
4912	Checks if slices are contiguous .
4913	Checks if the slice is a single point .
4914	Convert a slice of slices to an index .
4915	Read data from a file .
4916	Sets the station info .
4917	Sets the short names .
4918	Read a feature collection from a catalog .
4919	Add a new DAP node to this group .
4920	Update the groups .
4921	Find a variable by name .
4922	Returns the axis type .
4923	Returns the stats type for the given time range .
4924	Subtracts the intersection of the longitude coordinates .
4925	Gets the list of ranges .
4926	Sets defaults to the default properties .
4927	Returns the session ID .
4928	Sets the maximum number of redirects .
4929	Sets the session to use .
4930	Closes all methods .
4931	Set the authentication and proxy credentials .
4932	Track a session .
4933	Set global credentials provider .
4934	Validates the given URL string .
4935	Creates a new Index .
4936	Compute the stride of the given shape .
4937	Creates a new index .
4938	Reduce the index of this index .
4939	Creates a new index .
4940	Transpose an index .
4941	Performs a permutation .
4942	Gets the iterator for the given maa array .
4943	Returns the value of the current element .
4944	Set the index .
4945	Set the value of the specified dimension .
4946	Sets the dimension of the index .
4947	Get the time interval name .
4948	Creates a calendar date range from the given calendar .
4949	Creates a list of date - time dates .
4950	Create a list of gempak parameters .
4951	Returns a list of all the files in the file .
4952	Creates a GempackStation object from the given header .
4953	Gets the names of the station keys .
4954	Returns a list of dates .
4955	Returns the index of the given id .
4956	Returns the file type .
4957	Indent indentation .
4958	Sets the number of indentions .
4959	Creates a GribIndex from a single file .
4960	Add a directory scan .
4961	Checks if the scan has been scanned .
4962	Searches for the first scan .
4963	Set debug flags .
4964	Add a new variable .
4965	Write a file to a file .
4966	Validates an XML document .
4967	Convert the constraints to a string .
4968	Sets the original variable .
4969	Reads the data from the stream .
4970	Reads data from a section .
4971	Returns true if all variables have been converted .
4972	Convert the data structure to an array .
4973	Recursively converts the members of a StructureMembers .
4974	Find the variable with the given org name .
4975	Checks if a variable has a data structure .
4976	Overrides the set of variables .
4977	Checks if the resource control is authorized .
4978	Creates an empty sequence .
4979	Creates an ArraySequence from a sequence of parameters .
4980	Creates a sequence of parameters .
4981	Add vertices attribute .
4982	Reads a catalog from a URI string .
4983	Reads an XML document from a string .
4984	Reads a catalog from a string .
4985	Writes the catalog to the output stream .
4986	Returns the metadata converter for the given key .
4987	Creates a unitless ID .
4988	Multiply two units .
4989	Divide a unit by another unit .
4990	Converts the input array to a derived unit .
4991	Checks if this unit is compatible .
4992	Write a simple geometry .
4993	Writes a point to a point .
4994	Write a line to a string .
4995	Write a polygon .
4996	Pull attribute from node .
4997	Returns the subtree of the given parent node .
4998	Parse the response .
4999	Pass an attribute to the DAPNode .
5000	Returns a string representation of a variable .
5001	Factory method to create a new ArrayStructure .
5002	Sets the data array .
5003	Factory method to create an ArrayStructure
5004	Gets the geometry type .
5005	Creates a station for a given station data .
5006	Compiles an AST node .
5007	Compile the filter expression .
5008	Define a constraint definition .
5009	Creates an ArrayObject .
5010	Returns true if the bounding box is contained within this rectangle .
5011	Extend the given point .
5012	Extend the rectangle .
5013	Returns the intersection of the given rectangle .
5014	Add two arrays .
5015	Returns true if two arrays are conformable .
5016	Checks if a shape is conformable .
5017	Convert an array to an array .
5018	Copies an array to an array .
5019	Copies the given array to the given array .
5020	Copies an array of objects to another .
5021	Returns the minimum value of an array .
5022	Sets the value of the array .
5023	Creates a catalog builder .
5024	Factory method to create a ProjectionAdapter
5025	Unescape a DAP identifier .
5026	Converts a string to a URL .
5027	Unescape a URL .
5028	Convert a string to a string .
5029	Convert a string to a string .
5030	Tokenize an escaped name .
5031	Finds the index of the escaped name .
5032	Convert backslash to DAP .
5033	Read an atomic scalar variable .
5034	Get the path of the cursor .
5035	Returns the UID of the given class .
5036	Returns the JComponent for the given component .
5037	Compile the data from the dataset .
5038	Compiles the structure of the given variable .
5039	Compile a DAP structure .
5040	Compiles a sequence of sequences .
5041	Compiles a sequence from a DAP sequence .
5042	Reads the LEFT from the stream .
5043	Get a field by name .
5044	Get field value .
5045	Set a field value .
5046	Add a field .
5047	Add a checkbox field .
5048	Add a date field .
5049	Add a double field .
5050	Add a new field .
5051	Add a password field .
5052	Add a text field .
5053	Add a TextCombo field .
5054	Add a text area .
5055	Add a heading .
5056	Adds a component to the layout .
5057	Adds a row to the layout .
5058	Find the active frame .
5059	Get the cell spacing .
5060	Gets the factors .
5061	Multiply two factors .
5062	Returns the factors of the given factor .
5063	Returns true if this factor is reciprocal of this Dimension .
5064	Returns true if this factor is a dimensionless factor .
5065	Factory method for creating a new Grib1 param table .
5066	Factory method to create a Grib1 param table .
5067	Add a parameter to the lookup table .
5068	Adds a parameter table to the table .
5069	Raise the unit of this unit .
5070	Convert a float array to a derived unit .
5071	Initialize the unit table .
5072	Create a vertex variable .
5073	Reads the name of the file .
5074	Gets the short value from the byte array .
5075	Gets an int from a byte array .
5076	Reads a float from bytes .
5077	Gets the double value from the byte array .
5078	Adds an alias to an alias .
5079	Adds a symbol .
5080	Creates a converter for the given unit .
5081	Sets the structure data .
5082	Set the point feature data .
5083	Draws all shapes .
5084	Gets a list of shapes .
5085	Processes the input stream .
5086	Read buffer from input stream .
5087	Reads the next bytes from the input stream .
5088	Reads data from the stream .
5089	Skip the given number of bytes .
5090	Adds dimensions to netcdf file .
5091	Calculates the index for the given record .
5092	Check if a file is valid .
5093	Open the RDF file .
5094	Read data from a variable .
5095	Reads a single row of data .
5096	Create a dataset from a netcdf dataset .
5097	Creates a new variable .
5098	Fire the event area .
5099	Sets the map area .
5100	Set the map area .
5101	Sets the location of the map area .
5102	Sets the projection .
5103	Adds the menu to the menu .
5104	Determines the redraw timer .
5105	Set the screen size .
5106	Sets the selected variable .
5107	Returns the value at the specified offset .
5108	Returns the double value of the given index .
5109	Get the object at the given index .
5110	Get the name of a section
5111	Reads a scaled int from the buffer .
5112	Find a parameter by name .
5113	Returns true if the next element is next .
5114	Switches byte order .
5115	Returns the time steps for the given filename .
5116	Returns the file name for the given index .
5117	Get file names .
5118	Get the path to the DDF file .
5119	Returns the full path to the full path .
5120	Add a Chsub .
5121	Convert a reference to a time coordinate .
5122	Read a WMO file .
5123	Get uncompressed data from the buffer .
5124	Parses the code for the given code .
5125	Parses a circle .
5126	Checks the message header .
5127	Parses the number of points
5128	Parses the code for the given code .
5129	Parses an unlinked vector .
5130	Gets the levels of the given array .
5131	Gets the dual interpolation levels of the input .
5132	Adds a variable to a netc file .
5133	Adds a parameter to the network .
5134	Uncompressed data from buffer .
5135	Get a UInt from a byte array .
5136	Converts a byte array into an integer .
5137	Convert a byte array to a byte array .
5138	Perform a DMR query .
5139	Returns the DAPRequest object for this request .
5140	Sends an error response .
5141	Sets the anchor point .
5142	Draws the given point .
5143	Returns the bounds of the rectangle .
5144	Returns the bounds of the last point .
5145	Parses the given text .
5146	Replace all columns in a structure .
5147	Ensures that the memory size of the memory array is okay .
5148	Convert a RandomAccessFile .
5149	Read an unsigned unsigned integer from a file .
5150	Read an integer from a RandomAccessFile .
5151	Convert a RandomAccessFile to a uint32 .
5152	Read a 32 - bit integer from a RandomAccessFile .
5153	Read a float from a RandomAccessFile .
5154	Calculates a float from a 32 - bit integer .
5155	Reads an 8 - bit integer .
5156	Counts the number of bits in a bitmap .
5157	Constructs a copy of this projection .
5158	Returns a string representation of the WKS .
5159	Escape a string .
5160	Convert a string to a string .
5161	Split a string into a list of strings .
5162	Creates a new FmrcInv instance .
5163	Returns the service name for the given path .
5164	Compute the projected components .
5165	Returns the reference time .
5166	Creates a new ArrayStructure .
5167	Main entry point .
5168	Reads a Grib1 record .
5169	Checks if the netcdf file isMine
5170	Creates a projection from a netcdf dataset .
5171	Acquire the area .
5172	Returns true if the date is before the given date .
5173	Returns true if the date is before the given date .
5174	Returns true if the given date is after the given date .
5175	Set the value of the given type .
5176	Add a coordinate system .
5177	Sets the units string .
5178	Gets the units string .
5179	Initialize the configuration .
5180	Reads a catalog from a catalog .
5181	Process a list of datasets .
5182	Read catalogs in a directory .
5183	Checks if the given lon is between two points
5184	Convert a latitude to a string .
5185	Convert longitude to a string .
5186	Compares this quantity .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Make a tree path .
5190	Open the catalog .
5191	Sets the catalog .
5192	Sets the catalog .
5193	Find the coordinate of a variable .
5194	Write a VInt to the stream .
5195	Writes a string to the stream .
5196	Read chars from the stream .
5197	Set debug flags .
5198	Add a member .
5199	Hide a member .
5200	Gets the list of member names .
5201	Find a member by name .
5202	Gets the bitmap from the bitmap file .
5203	Restore the state of the table .
5204	Returns an iterator over the selected rows .
5205	Returns the index of the model .
5206	Returns the value of a member .
5207	Returns the scalar value for a member .
5208	Returns the value of the given member .
5209	Gets the float value for a member .
5210	Gets the value of a JavaArray .
5211	Returns the byte value for the given member .
5212	Returns the byte array as a byte array .
5213	Get the value of a scalar value .
5214	Gets the value of an array .
5215	Get the value of a scalar .
5216	Returns the short array of the given member .
5217	Returns the value of a scalar .
5218	Returns the value of the given member .
5219	Get the value of a scalar character .
5220	Gets the value of a Java array .
5221	Write a single dataset .
5222	Determines if the given dataset is usable .
5223	Creates a new Dataset .
5224	Copies the metadata from another dataset .
5225	Gets the metadata for this instance .
5226	Adds a product .
5227	Print the missing values .
5228	Show the summary of the report .
5229	Find the record at the given time .
5230	Dump the log record .
5231	Generates a long name for the given record .
5232	SubsetByInterval sets the coordinates for the given range .
5233	Checks if two bytes are equal .
5234	Parses a DMR document .
5235	Process attributes .
5236	Add a list of Coordinate objects .
5237	Sets the Gauss coordinates for the given number of points .
5238	Parses a variable selector .
5239	Creates a string representation of a section spec .
5240	Determines if a bounding box is a box .
5241	Close the connection .
5242	Execute the HTTP method .
5243	Identifies the encoding of a network .
5244	Determine the coordinate of a given axis .
5245	Set the stream .
5246	Reads the next character from the stream .
5247	Start the task .
5248	Converts a string to a URI .
5249	Convert a URI to a URI .
5250	Returns null if the string is empty .
5251	Convert a prefix to a string .
5252	Checks if the given dataset is valid .
5253	Copy information from GribCollection .
5254	Gets the list of file names .
5255	Sets the indexRaf file .
5256	Get the index of the index file .
5257	Close the index .
5258	Returns the number of counters .
5259	Add a global attribute .
5260	Add a global attribute .
5261	Delete a global attribute .
5262	Rename a global attribute .
5263	Add a variable attribute .
5264	Add a variable attribute .
5265	Deletes a variable attribute .
5266	Rename a variable attribute .
5267	Make the file subtype .
5268	Writes the XML representation of the WFS .
5269	Writes the members of the geometry .
5270	Writes the station observations to the XML document .
5271	Writes the station collection to XML .
5272	Write DSR to DSR .
5273	Send a DXR request to the server .
5274	Write an error response .
5275	Close the connection .
5276	Flush the buffer .
5277	Constructs a copy of this projection .
5278	Returns true if the element is contained in the set .
5279	Returns the element at the specified index .
5280	Returns a new range with the specified origin .
5281	Read data .
5282	Reads data from the layout .
5283	Returns a subset of the subset of this vector .
5284	Returns a list of catalogs .
5285	Cleans up the database tracker .
5286	Sets the parameters .
5287	Returns a DataChunkIteratorIterator for the given section .
5288	Creates a double array of ints .
5289	Gets the bounding box boundaries .
5290	Checks the requested variables for the requested variables .
5291	Returns the data structure for the given name .
5292	Get the resource path for a given location .
5293	Add vertices to netcdf file .
5294	Read PIB file .
5295	Finalize the metadata .
5296	Copies the inherited metadata from the parent .
5297	Copies the metadata from this object to another .
5298	Extracts the metadata from the given data .
5299	Sets the contributors .
5300	Adds a new dataset to the list .
5301	Removes a dataset from this catalog .
5302	Replace the given dataset with the given ID .
5303	Add a service .
5304	Remove a service .
5305	Sets the services local .
5306	Removes the metadata from the local metadata .
5307	Gets the user property .
5308	Validate this dataset .
5309	Returns a list of descriptors .
5310	Constructs a path to a path .
5311	Gets the capabilities .
5312	Gets a feature .
5313	Check if the request parameters are valid .
5314	Handler for HTTP request .
5315	Get the capabilities of a URL .
5316	Returns the length of the file .
5317	Returns the last modified timestamp .
5318	Add a dataset to the dataset .
5319	Sends a file to a file .
5320	Send a string to the response .
5321	Set the content length .
5322	Get the URI of the request .
5323	Returns the path to the request path .
5324	Returns the request url .
5325	Get a parameter from the request .
5326	Save the preferences .
5327	Writes a directory .
5328	Sets the bit offset of the bitmap .
5329	Creates a new BitCounterUncompressed .
5330	Count the number of bits in the replication table .
5331	Append a line to the history .
5332	Creates a DocumentCollection document for a station .
5333	Gets the capabilities document .
5334	Get the record at the given coordinates .
5335	Gets the coordinate at the specified index .
5336	Adds an item to the list .
5337	Handle an exception .
5338	Returns the slice at the specified index .
5339	Step the next segment .
5340	Get a map of NCE process names .
5341	Returns the feature type of the specified endpoint .
5342	Set the value of the type .
5343	Factory method to create a GDS1G .
5344	Copy the input stream to the output stream .
5345	Reads the contents of a file .
5346	Read contents from input stream .
5347	Writes the contents of a string to the output stream .
5348	Copies a file into the output stream .
5349	Copies the given RAF file to the output stream .
5350	Copy a directory tree to a directory .
5351	Reads a file from a file .
5352	Read a file .
5353	Write contents to file .
5354	Writes a string to a file .
5355	Writes the input stream to a file .
5356	Handles parsing errors .
5357	Handler for DAP2Exception
5358	Displays a bad URL .
5359	Perform a GET request to the server .
5360	Print the catalog information .
5361	Print the status of the request .
5362	Print the error page .
5363	Gets the reference date .
5364	Read variables from a section .
5365	Read a NcML Collection from a string .
5366	Opens a NCMLCollection .
5367	Replace the given string with the given characters .
5368	Clean up a byte array .
5369	Converts a string to a string .
5370	Converts a string to a string .
5371	Make a valid CDMObject name .
5372	Match two strings .
5373	Pads a string to a string .
5374	Pad a string to a string
5375	Removes a substring from the string .
5376	Remove a character from the string .
5377	Removes a character from a string .
5378	Collapse all whitespace characters .
5379	Replace the given string with the given character .
5380	Replace all occurrences of the given string with the given string .
5381	Replaces the given string with the given value .
5382	Replaces the substring with the given substring .
5383	Replaces the substring with the given substring .
5384	Removes the given string from the given string .
5385	Replace the given string in the given string .
5386	Replaces the given string with the given string in the given string .
5387	Replaces the substring with the given substring .
5388	Trim the given string .
5389	Process events .
5390	Check the state of the state .
5391	Update the state .
5392	Show unique templates .
5393	Gets the list of InvDataset .
5394	Release resources .
5395	Creates a copy of a StructureData .
5396	Copies an ArrayStructure from an ArrayStructure .
5397	Copies a structure to an array of bytes .
5398	Copies a structure to an array of bytes .
5399	Copies a structure to an array .
5400	Gets the total time interval in hours .
5401	Creates a new Section .
5402	Creates a table analyzer .
5403	Get the first feature type .
5404	Recursively analyze feature types .
5405	Sync the contents of the file .
5406	Gets the gaussian latitudes .
5407	Swaps the given byte array to the given offset .
5408	Swap float to float
5409	Swaps the byte at the given offset .
5410	Find the coordinate axes .
5411	Adds a parameter to the coordinate matrix .
5412	Returns the common parent of this group .
5413	Returns true if this group belongs to this group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds a dimension to the group .
5417	Adds a group to this group .
5418	Adds an enumeration to this group .
5419	Adds a variable to this group .
5420	Removes a dimension by its name .
5421	Convert a path to a relative group .
5422	Convert DDS alias field names to DAS alias names .
5423	Print DAS object
5424	Get a variable by name .
5425	Writes a grid to a grid .
5426	Replace missing values with missing values .
5427	Replace missing values and scale .
5428	Calculates the xlon starting at the given offset .
5429	Writes a grid .
5430	Writes the exception to the XML response .
5431	Returns the name of the nc4 library .
5432	Creates a top - level index file based on the configuration .
5433	Returns the type of the collection .
5434	Update grib collection .
5435	Update leaf collection .
5436	Open a GribCollection from RDF file .
5437	Opens a GribCollection .
5438	Open a GribCollection from a data file .
5439	Returns true if the URL matches the given pattern .
5440	Adds a triple to the registry .
5441	Find the entry in the cache .
5442	Sets the well - known triple .
5443	Load the rc file .
5444	Insert a triple into the list .
5445	Returns a list of Dataset objects .
5446	Find a dataset by name .
5447	Sets the feature .
5448	Gets the shapes of the feature set .
5449	Convert a list of features to a shape .
5450	Compares the string with the given string .
5451	Start the progress monitor .
5452	Checks if the index file exists in the collection .
5453	Normalizes the given list of EnsCoord objects .
5454	Sets the element at the specified index .
5455	Returns the structure data for the given index .
5456	Copies the members of a structure .
5457	Get a scalar object .
5458	Convert a member to a double .
5459	Convert a scalar integer to an integer .
5460	Get a float value from a member .
5461	Get the byte value of a member .
5462	Returns the value of the specified member .
5463	Get a char from a member .
5464	Get the string value of a member .
5465	Returns an ArrayStructure .
5466	Returns an ArraySequence object .
5467	Returns an ArrayObject object for the given member .
5468	Returns the minimum value of the given value .
5469	Evaluate expression .
5470	Returns a string representation of the constraint .
5471	Checks if the given node is references .
5472	Returns true if the given variable matches the given filter .
5473	Returns the number of variables in the given struct .
5474	Compute the enums .
5475	Compute the groups .
5476	Compiles a CECON constraint .
5477	Check if a file is valid .
5478	Creates the action properties .
5479	Returns the byte order of the byte order .
5480	Set the byte order .
5481	Find a key by name .
5482	Find file header .
5483	Get the file header .
5484	Prints the list of parts .
5485	Get the data pointer for the given part .
5486	Reads the data from the given word .
5487	Reads a string from a file .
5488	Unpack a DMP object .
5489	Returns a string representation of a bit .
5490	Write a netcdf file to a channel .
5491	Parse a base type .
5492	Parse a grid element .
5493	Parses an alias .
5494	Decodes a keyDescriptor .
5495	Replies the data for the given keys .
5496	Get the filename of the dataset .
5497	Gets the type of the feature type .
5498	Returns true if two values are equal .
5499	Returns true if the given node is references .
5500	Parse a unit .
5501	Properties of an object .
5502	Checks if the variable is tiled .
5503	Calculates the best time from the complete time .
5504	Convert latlon to a projection
5505	Show the time series .
5506	Convert a list of attributes to a Map .
5507	Gets the value of the value .
5508	Returns the value at the given index .
5509	Write a CDL file .
5510	Sets the string value .
5511	Sets the attribute values .
5512	Sets the values of the array .
5513	This method is called when a scan is started .
5514	Generate a proxy for a proxy .
5515	Schedule a message .
5516	Set the Tredds Dataset .
5517	Jumptd datatype
5518	Jumptd datatype
5519	Sets the dataset .
5520	Prepare the UI .
5521	Creates the tools frame .
5522	Convert a list of coordinates to a string .
5523	Returns the lesser rank of the given axis .
5524	Finds the axis with the given type .
5525	Gets the projection of this coordinate .
5526	Returns true if the geometry is geoXY .
5527	Determines whether this coordinate is a regular expression .
5528	Returns true if the given subset is a subset of the given set .
5529	Returns true if the given list contains all the given axes .
5530	Returns true if the given axis contains the given name .
5531	Returns true if the given list contains the specified dimension .
5532	Checks if the given list of axes are present in the list .
5533	Returns true if the given axis type contains the given axis .
5534	Clone this DAPNode .
5535	Returns the selected bean .
5536	Returns a list of all the selected beans .
5537	Returns the list of selected cells .
5538	Sets the selected bean .
5539	Restore the state of the table .
5540	Create a new UnknownUnit .
5541	Close the stream .
5542	Checks if the variable is a extra variable .
5543	Checks if the variable is a coordinate .
5544	Find the coordinate for a given coordinate .
5545	Add data variables to the table .
5546	Adds the parent join to the parent .
5547	Creates a station object from a structure data structure .
5548	Creates a new DAPNode .
5549	Factory method to create a SimpleUnit instance
5550	Factory method for creating a new unit .
5551	Creates a unit from the given name .
5552	Checks if the given unit string is compatible with this unit .
5553	Checks if the given unit is a date unit .
5554	Returns true if the given string is a time unit .
5555	Get the conversion factor .
5556	Convert a value to a unit .
5557	Returns true if the unit is unknown .
5558	Returns the value of this unit .
5559	Creates a new RelOpClause .
5560	Creates a new BoolFunctionClause .
5561	Creates a new BTFunctionClunction .
5562	Create a grayscale image .
5563	Recursively crawl the catalog .
5564	Calls the given Dataset .
5565	Recursively crawl a catalog .
5566	Get a file or cache .
5567	Get the file or cache if it exists .
5568	Sets the debugging flag .
5569	Returns the list of all files .
5570	Close the file .
5571	Sets the position of the file .
5572	Flush the buffer .
5573	Read data from file .
5574	Reads an array from the stream .
5575	Read an int from the stream .
5576	Reads an array of integers .
5577	Reads a long array from the stream .
5578	Reads a float from the stream .
5579	Reads a double array .
5580	Reads a string .
5581	Reads a string from the stream .
5582	Write a boolean array to the stream .
5583	Write a short array to the stream .
5584	Write a char array to the stream .
5585	Writes an array of integers .
5586	Write a long array to the stream .
5587	Write a float array to the stream .
5588	Write a double array to the stream .
5589	Write a string to the stream .
5590	Write a byte array to the stream .
5591	Searches for the given match .
5592	Appends a query to the query string .
5593	Creates a new MCollection .
5594	Find the index of the partition .
5595	Checks if the index is leaf .
5596	Constructs the list of children .
5597	Scan for all children .
5598	Read MFileReader from indexReader .
5599	Returns a list of all the gridsets .
5600	Acquire a FileCacheable .
5601	Remove a cache file .
5602	Removes a file from the cache .
5603	Release a file .
5604	Calculates the 4 - bit value of a 4 - bit integer .
5605	Update the cache element in the cache .
5606	Clears the cache .
5607	Make the vertical transform .
5608	Determines if the current location is a global coordinate .
5609	Returns true if the vertices of the vertices of the vertices .
5610	Finds the coordinates from the given coordinates .
5611	Finds the coordinates of a bounding box .
5612	Find the index from a latLon
5613	Finds the index of the coordinates in the given latitude .
5614	Get the position of the item
5615	Gets the item at the specified pixel .
5616	Iterate over the MFileCollection .
5617	Get remote logs .
5618	Get the name of a subcenter .
5619	Convert a unit string to a field .
5620	Creates a new CalendarPeriod .
5621	Creates a CalendarPeriod .
5622	Calculate the difference between start and end .
5623	Returns the conversion factor for the given date .
5624	Gets the value in milliseconds .
5625	Gets the offset of the given start date .
5626	Synchronizes the index file .
5627	Initialize the tables .
5628	Adds a date root to the tree .
5629	Find the longest path matching the given path .
5630	Finds the data root for the given request path .
5631	Convert the data root to a DataRoot
5632	Get calendar date range .
5633	Reindex a list of coordinates .
5634	Creates a new netcdf file .
5635	Add a group .
5636	Add an enum type .
5637	Delete a group attribute .
5638	Rename a group attribute .
5639	Add a record to the file .
5640	Aborts the connection .
5641	Writes the properties of the bean .
5642	Extracts the metadata from a Tredds dataset .
5643	Divide two units .
5644	Convert this unit to another unit .
5645	Converts a derived unit to a derived unit .
5646	Convert a nested variable to an array .
5647	Convert a variable to an array .
5648	Convert data to an array .
5649	Closes all databases .
5650	Open the database .
5651	Convert a value to a Period .
5652	Ensure that the array contains the minimum capacity .
5653	Returns the value at the specified index .
5654	Make a catalog for a given directory .
5655	Make a proxy for a proxy .
5656	Returns the coordinate type .
5657	Creates a Grib2P2Pd2Pds2Pds2 .
5658	Calculates the time .
5659	Apply the scale factor to the given value .
5660	Parse local concept file .
5661	Adds a local concept .
5662	Clean up a line
5663	Stores the given parameter .
5664	Writes the grib1_Trib1 table to a file .
5665	Writes the lookup table to a file .
5666	Prints the local concepts
5667	This method is used to write gcmf1 .
5668	Returns a DatasetSourceType instance .
5669	Expand all the items in the catalog .
5670	Expand all datasets in this dataset .
5671	This method is used to generate a list of datasets .
5672	Generates a list of Dataset objects .
5673	Name of the given dataset .
5674	Loads a picture from an image .
5675	Stops the loading of the given URL .
5676	Change the status of a source picture .
5677	Called when the source is loaded .
5678	Creates a thread in thread .
5679	Returns the size of the image .
5680	Returns the size of the image .
5681	Gets the merged parts .
5682	Builds the header for the given station .
5683	Returns a list of the names of the CKUA .
5684	Checks if the given part is valid .
5685	Set the root directory
5686	Set the root directory .
5687	Get the cache file .
5688	Clean up cache files .
5689	Clean the disk cache .
5690	Checks if fxy is a buf table .
5691	Creates a new coordinate axis .
5692	Creates a new coordinate axis .
5693	Returns true if the type is numeric .
5694	Gets information about this Dimension .
5695	Gets the calendar from the attribute .
5696	Sets the list of rows .
5697	Returns the selected row .
5698	Increment the selected row .
5699	Returns the index of the model .
5700	Sets the selected index .
5701	Sort an array of strings .
5702	Swap two strings .
5703	Gets an existing file .
5704	Rotate a longitude .
5705	Create an XMLStore from a file .
5706	Create an XMLStore from an input stream .
5707	Creates an XMLStore from a resource .
5708	Create a standard filename for the given app name .
5709	Save the preferences file .
5710	Save the preferences .
5711	Write an atomic variable .
5712	Writes the data to the serializer .
5713	Writes the data structure to the output stream .
5714	Writes a sequence of data to the output stream .
5715	Write a record to the output stream .
5716	Check if the file is valid .
5717	Gets the Wmo ID for the IMM .
5718	Read a row from the input stream .
5719	Returns the value at the given index .
5720	Reads the data from the given rdf2 file .
5721	Reads the data from a PNG file .
5722	Read the contents of this object .
5723	Create a file for a given location .
5724	Estimate the size of a grid file .
5725	Create a file for a given location .
5726	Sets the stations .
5727	Sets the selected station .
5728	Selects a station .
5729	Selects the closest station from the world .
5730	Gets the selected station .
5731	Returns the name of the given type .
5732	Get a list of all stations .
5733	Get a station by name .
5734	Get the data iterator for a station .
5735	Gets the data iterator for the given station .
5736	Read data from a ray .
5737	Computes the dot product of this vector .
5738	Returns the norm of the vector .
5739	Normalizes this matrix .
5740	Sets the services from the given iterable .
5741	Get a parameter by id .
5742	Returns the local parameter associated with the given id .
5743	Add a new prefix .
5744	Add a symbol .
5745	Returns the prefix for the given string .
5746	Checks if the source is valid .
5747	Returns the value of a parameter .
5748	Calculates the CRC of the data .
5749	Returns true if the data is a thin buffer .
5750	Returns the index of the given field name .
5751	Returns the time range of the time range .
5752	Returns the time coordinate .
5753	Sets the next polygon .
5754	Sets the previous polygon .
5755	Finds a property by name .
5756	Sets the current projection .
5757	Creates a subset of times from the given parameters .
5758	Registers IO provider .
5759	Register the IOService provider .
5760	Register the IOService provider .
5761	Checks if the IOServiceProvider is registered .
5762	Removes the given IOServiceProvider .
5763	Check if a file is open .
5764	Open a file in memory .
5765	Open a file in memory .
5766	Open a file in memory .
5767	Open a file in memory .
5768	Find a global attribute by name .
5769	Convert the URL to a NcML file .
5770	Writes the CDM to the output stream .
5771	Writes a CDL file to a PrintWriter .
5772	Writes the CDL definition to the given format .
5773	Add an attribute .
5774	Add a new attribute .
5775	Adds a group to this group .
5776	Adds a dimension to this group .
5777	Removes a dimension from this group .
5778	Adds a variable to this group .
5779	Add a variable to this group .
5780	Add a string to the group .
5781	Removes a variable from the group .
5782	Send an ISP message .
5783	Make a record structure .
5784	Finalize this group .
5785	Read a section section .
5786	Reads a variable from a section .
5787	Read an array of arrays .
5788	Read a variable section .
5789	Returns the full name of a node .
5790	Make a full path with the given name .
5791	Checks if the given mfile is included in the file .
5792	Checks if a file is excluded .
5793	Returns true if the given MFileFilter is true .
5794	Appends a value to the vector .
5795	Dispatch the given value .
5796	Force the value of the given type .
5797	Checks if the string is a byte value .
5798	Checks if the string is a short value .
5799	Checks if the string is an int .
5800	Check if a string is a UInt
5801	Checks if the string is a float .
5802	Checks if the string is a double value .
5803	Gets the data type .
5804	Checks if the given Dataset is viewable .
5805	Checks if a string is valid .
5806	Checks if the given string is valid .
5807	Checks if the given string is valid .
5808	Determines whether path is a file path .
5809	Converts a Unicode code point to a string .
5810	Get the value of a parameter .
5811	Compare two GridDefRecord objects
5812	Process the input stream .
5813	Processes the buffer .
5814	Remove quotes .
5815	Mark stack variables .
5816	Write NcML file to file .
5817	Returns the value of the given key .
5818	Writes a CDL file .
5819	Creates a station .
5820	Validate this result service .
5821	Gets the azimuth value .
5822	Gets the elevation of the message .
5823	Gets the latitudes .
5824	Returns the longitudes as longitudes .
5825	Gets the altitudes .
5826	Gets the azimuths .
5827	Gets the elevation of the tile .
5828	Sets the subset of this Structure .
5829	Returns a structure with the given name .
5830	Add a member variable .
5831	Sets the list of members .
5832	Sets the parent group .
5833	Calculates the size of all elements of this variable .
5834	Reads a single structure .
5835	Reads a vector structure .
5836	Returns a new StructureDataIterator .
5837	get data category
5838	Returns the class name .
5839	Add a parameter .
5840	Gets the header .
5841	Convert a latlon rectangle to a projection .
5842	Returns the version of the version .
5843	Returns the position of the zis positive .
5844	Delete the next file .
5845	Set the color scale parameters .
5846	Renders the plan view .
5847	Returns true if this H5Group is a child of this group .
5848	Returns the type of a message type .
5849	Install all columns in the table .
5850	Set the API key .
5851	Creates a Label .
5852	Creates a Label .
5853	Creates a Label .
5854	Connect to the server .
5855	Gets the list of IP types .
5856	Creates a new connection .
5857	Purges a logger .
5858	Compiles all compiled classes .
5859	Compiles the given class .
5860	Adds a source code to the compiler .
5861	Read the graphic control frame .
5862	Get the next frame of the frame .
5863	Gets the list of persons .
5864	Initializes the list of listeners .
5865	Get person by id
5866	Add a new validation message .
5867	Sets the person id .
5868	Creates a view model for the given view .
5869	Creates a view model from the given view .
5870	Loads the countries .
5871	Load the subdivisions .
5872	Adds a property to the bean .
5873	Add an immutable field to the bean .
5874	Creates a new Java view step .
5875	Creates a new FxmlView .
5876	Clears the map .
5877	Creates the list of selected items .
5878	Access a member .
5879	Loads the FXML view from a file .
5880	Creates the FxmlPath for the given view type .
5881	Returns the style row for the given row .
5882	Gets the pixel value from the image .
5883	Get pixel values from image bytes .
5884	Validate image type .
5885	Creates a CoverageDataPngImage .
5886	Sets the tile data .
5887	Execute raw query .
5888	Wraps a query and returns a CursorResult .
5889	Executes the query .
5890	Execute a query .
5891	Handle query .
5892	Returns the row row for the given geometry .
5893	Registers a table .
5894	Retrieve the tile row for the given tile .
5895	Gets the coverage data for a tile .
5896	Gets the coverage data for a tile .
5897	Gets the coverage data for a tile .
5898	Gets the results from the request .
5899	Gets the results of the results of the tile .
5900	Gets the results from the tile matrix .
5901	Gets the results from the tile matrix .
5902	Get the tile matrix .
5903	Returns the value of the given tile row .
5904	Sets the icon .
5905	Returns the icon for the given geometry type .
5906	Open bindings .
5907	Converts a byte array to a bitmap .
5908	Converts bitmap to bytes .
5909	Creates a new table metadata .
5910	Delete a table .
5911	Gets the metadata for a GeoPackage .
5912	Get the ID of a GeoPackage .
5913	Creates a TableMetadata object .
5914	Creates a new extension .
5915	Returns the feature row .
5916	Executes a raw query .
5917	Performs a query .
5918	Query the cursor for the given envelope .
5919	Returns the number of points in the envelope .
5920	Query a user custom query .
5921	Builds the WHERE clause .
5922	Performs a query on the specified bounding box .
5923	Returns the number of features in the given bounding box .
5924	Query the given envelope .
5925	Performs a query on the specified range .
5926	Counts the number of pixels .
5927	Sets the data for this bitmap .
5928	Sets the data for this bitmap .
5929	Sets the bitmap configuration .
5930	Returns the number of tiles in the tile .
5931	Adjust the bounds .
5932	Adjust the google bounds .
5933	Adjust the bounds of the geo package .
5934	Adjust the geo package bounds .
5935	Get the bounding box .
5936	Get the tile grid .
5937	Query for a tile .
5938	Query for a tile .
5939	Returns the zoom level for the given length .
5940	Returns the zoom level for the given length .
5941	Query for the tile grid .
5942	Delete a tile .
5943	Counts the number of rows in the table .
5944	Checks if the tile matrix is google .
5945	Returns the pixel value of the specified image .
5946	Returns the pixel values of the image .
5947	Validate image type .
5948	Creates a new coverage image .
5949	Sets the pixel value at the specified position .
5950	Get a GeoPackage .
5951	Returns the current row .
5952	Move the cursor to the next invalid position .
5953	Query for a base feature .
5954	Delete a style from the database .
5955	Gets the rectangle of a rectangle .
5956	Returns a rounded rectangle .
5957	Delete missing databases .
5958	Create and close the GeoPackage .
5959	Check if a database is valid .
5960	Validate the database .
5961	Validate the database .
5962	Validate the database .
5963	Validates the database header .
5964	Checks if the database header is valid .
5965	Adds the internal databases to the database .
5966	Add external databases .
5967	Import a GeoPackage .
5968	Gets the GeoPackage metadata from the database .
5969	Returns the GeoPackageMetadata for the given path .
5970	Create a new GeometryMetadata .
5971	Populate the geometry metadata .
5972	Delete a GeoPackage .
5973	Create or update a geometry .
5974	Updates the geometry metadata .
5975	Returns the number of records for the given table .
5976	Creates a GeometryMetadata object .
5977	Updates the given content with the given values .
5978	Draw a tile .
5979	Returns a list of rows for the given IDs .
5980	Checks if the cursor is valid .
5981	Returns the mapping for the given table name .
5982	Get the simple attributes of a table .
5983	Get the mapping for a baseRelation .
5984	Gets the mapping for the given ID .
5985	Checks if the given user has a related mapping .
5986	Count the number of cursors .
5987	Registers the cursor wrapper .
5988	Reads a table from a GeoPackage .
5989	Retrieve a tile from a request .
5990	Draw a tile .
5991	Reject a tile .
5992	Retrieve the tile results .
5993	Calculate the drawOverlay .
5994	Sets the density of the drawing .
5995	Sets the line paint .
5996	Sets the polygon .
5997	Draw a tile .
5998	Draw a tile .
5999	Draw a tile .
6000	Returns the number of features in the tile .
6001	Gets the number of features for the given webMercator .
6002	Query the indexed features .
6003	Query the indexed features .
6004	Draws all features in a tile .
6005	Simplified method .
6006	Returns the point paint .
6007	Get the line paint .
6008	Gets the polygon .
6009	Gets the polygon fill .
6010	Gets the paint of the feature .
6011	Gets the style of the feature .
6012	Returns the Paint for the given style row .
6013	Returns the Paint for the given style id .
6014	Add a bitmap to the map .
6015	Create a bitmap from an icon .
6016	Quotes the values of the given values .
6017	Creates a bitmap .
6018	Recursively recycle the image .
6019	Get the bitmap for the layer .
6020	Gets the canvas .
6021	Creates the bitmap for the layer .
6022	Get the mapping for a feature table .
6023	Gets the StyleDao .
6024	Gets the IconDao .
6025	Gets the feature styles for a feature table .
6026	Get the styles for a feature table .
6027	Get the style for a feature table .
6028	Get the icons for a feature table .
6029	Get the icon for a feature table .
6030	Gets the feature styles for a feature row .
6031	Gets the feature styles for a feature table .
6032	Get the styles for a feature row .
6033	Gets the icons for a feature row .
6034	Gets the styles for a feature .
6035	Gets the icons for a feature .
6036	Sets the feature style .
6037	Sets the styles for a feature table .
6038	Sets the icons for a feature table .
6039	Sets the feature style .
6040	Sets the feature styles .
6041	Sets the styles for a feature row .
6042	Set the styles for a feature .
6043	Sets the style of a feature row .
6044	Sets the style for a feature row .
6045	Sets the style for the feature .
6046	Sets the icons for a feature row .
6047	Sets the icon for the feature table .
6048	Sets the icon .
6049	Sets the default icon .
6050	Sets the icon for the feature table .
6051	Creates a new style .
6052	Gets the icon .
6053	Inserts a style mapping .
6054	Delete table style .
6055	Delete table icon .
6056	Deletes the mapping for a feature table .
6057	Deletes the mapping from the table .
6058	Deletes a mapping from a feature id .
6059	Gets all the style IDs for a feature table .
6060	Returns all the icons for the given feature table .
6061	Get all style IDs for a feature table .
6062	Gets the icon IDs for the given feature table .
6063	Get the image bytes .
6064	Flushes the output stream .
6065	Gets the pixel value for the specified pixel .
6066	Read pixels from the image .
6067	Draw a feature .
6068	Draw a line path .
6069	Draw a polygon .
6070	Adds a line string to the path .
6071	Adds a polygon .
6072	Get a feature cache .
6073	Remove a feature row .
6074	Clears the cache .
6075	Gets the cached table styles .
6076	Gets the icon icons .
6077	Creates a new RTreeIndexTable .
6078	Sets the width of the column .
6079	Sets the height of the column .
6080	Gets the dimensions of this bitmap .
6081	Calculates a tile density .
6082	Reads the blob value from the given row .
6083	Read a table from a GeoPackage .
6084	Gets the color value .
6085	Validate a color .
6086	Creates a Color object .
6087	Get a GeoPackageManager instance .
6088	Sets the progress bar .
6089	Index all features in the given list .
6090	Check if the given row is indexed .
6091	Deletes a feature index .
6092	Deletes a feature index .
6093	Deletes a feature index .
6094	Delete a feature index .
6095	Checks if the index is indexed .
6096	Returns a list of all the indexed types .
6097	Query the results of a feature .
6098	Returns the number of features .
6099	Returns the bounding box .
6100	Query the features for the given bounding box .
6101	Returns the indexed type of the index .
6102	Get the internal file .
6103	Get the absolute path of a file .
6104	Gets the geometry type .
6105	Sets the geometry type .
6106	Checks if the URL has a bounding box .
6107	Replaces the location of the tile .
6108	Checks if the URL is a XYZZ .
6109	Replaces the bounding box with the given coordinates .
6110	Replace the bounds of a bounding box .
6111	Gets the geometry .
6112	Indexes a feature row .
6113	Updates the last indexed time .
6114	Delete the index .
6115	Delete the index for the given geometry .
6116	Checks if the feature is indexed .
6117	Execute the query .
6118	Returns a cursor for the given geometry .
6119	Counts the number of rows in the table .
6120	Returns a cursor for the given envelope .
6121	Returns the number of entries in the given envelope .
6122	Returns a cursor for the given bounding box .
6123	Counts the number of features in the given bounding box .
6124	Get the bounding box for the given projection .
6125	Gets the geometry metadata .
6126	Gets a feature row .
6127	Gets the feature row for the given geometry .
6128	Returns a list of tiles for a feature table .
6129	Returns a list of features for a tile table .
6130	Returns the bounding box for the given GeoPackage .
6131	Returns a UserCustomCursor with related IDs .
6132	Returns a list of unique IDs .
6133	Returns a list of unique IDs .
6134	Delete a user from the database .
6135	Deletes a related user from the database .
6136	Delete records by id
6137	Builds the WHERE clause for the given base id .
6138	Creates a new GeoPackage metadata .
6139	Delete a database .
6140	Rename a GeoPackageMetadata .
6141	Rename a GeoPackage .
6142	Get all GeoPackageMetadata .
6143	Get a GeoPackageMetadata .
6144	Get a GeoPackageMetadata .
6145	Get a GeoPackageMetadata object .
6146	Returns true if the given database exists .
6147	Returns a GeoPackageMetadata for the given path .
6148	Gets the metadata for the given name .
6149	Returns a list of metadata for the given name .
6150	Returns the names of the metadata for the given name .
6151	Creates a GeoPackageMetadata object .
6152	Called when a view is created .
6153	Add a parallax view .
6154	Create a new view .
6155	Creates a custom view .
6156	Append an event to the buffer .
6157	Find the configuration file from the system .
6158	Get a resource from the class loader .
6159	Configure the application configuration .
6160	Sets the status of a resource .
6161	Converts a socket address to a string .
6162	Creates a new thread pool .
6163	Starts the given converter .
6164	Append an event to the log .
6165	Adds a substitution property .
6166	Returns the value of a property .
6167	Compile the given topology .
6168	Evaluate an EOpt node .
6169	Parse a token .
6170	Escape the given string .
6171	Convert a fixed date to a regular expression .
6172	Start an event .
6173	Ends an event .
6174	Initialize the logger .
6175	Returns a ContextSelector with the given name .
6176	Setup the properties .
6177	Get the path of the external storage directory .
6178	Returns the path to the database .
6179	Get absolute file path .
6180	Evaluates the given LoggingEvent .
6181	Returns the value of the discriminator property .
6182	Updates the mask .
6183	Returns the filter decision for the given event .
6184	Creates the key manager .
6185	Creates the trust managers .
6186	Creates a key store from the system property .
6187	Get the location from the system property .
6188	Returns the URL for a resource .
6189	Returns true if the head of the head of the given head .
6190	Stop the logback context .
6191	Prints a warning message .
6192	Prints an error message .
6193	Prints the status of the given context .
6194	Handle a throwable exception .
6195	Gets the entry from the map .
6196	Ends the life of the given key .
6197	Returns a new FormatInfo instance .
6198	Rename a file .
6199	Checks if the source file is on disk .
6200	Get the environment variable .
6201	Gets the system property .
6202	Sets the MDC property map .
6203	Output the MDC for all keys in the map .
6204	Extracts the stack trace from the stack trace .
6205	Checks if the current class is in a framework .
6206	Add a new status .
6207	Add a new status listener to the list .
6208	Lookup an implicit action .
6209	Returns the applicable action list for the given element path .
6210	Sets the class loader .
6211	Get the value of a property .
6212	Get a boolean value .
6213	Converts the given name to lowercase .
6214	Gets the method descriptors .
6215	Gets the property descriptors .
6216	Starts the appender .
6217	Add a listener to the console .
6218	Parses a property definition .
6219	Returns the discriminator value for the given event .
6220	Determine if the event is discardable .
6221	Start the shutdown hook .
6222	End the logback hook .
6223	Checks if supported protocols are enabled .
6224	Returns enabled cipher suites .
6225	Returns a list of strings that are included in the given array .
6226	Converts a string to a scope .
6227	Set the properties of the given context .
6228	Add a new appender .
6229	Remove an appender .
6230	Detaches the given appender .
6231	Handle the parent level of the parent logger .
6232	Appends all appenders to the logger .
6233	Detaches the given appender .
6234	Creates a child logger with the given name .
6235	Called by the given marker .
6236	Log a log event .
6237	Create a new socket .
6238	Checks if the given file exists .
6239	Converts the level to integer .
6240	Returns the level of the given int .
6241	Returns the number of occurrences of a resource .
6242	Returns the URL for the given resource .
6243	Returns the class loader for the given object .
6244	Returns the class loader for the given class .
6245	Returns the class loader for the given class .
6246	Starts the appender .
6247	Returns the tag for the given event .
6248	Parses an XML element .
6249	Returns the separator index of the given name .
6250	Evaluate the given event .
6251	Get the client thread name .
6252	Checks if two files are equal .
6253	Start the session .
6254	Appends an event to the buffer .
6255	Sends the buffer to the buffer .
6256	Add a MDC value pair .
6257	Creates a DynamicConverter .
6258	Creates a composite converter .
6259	Determine the compression mode .
6260	Configure the given URL .
6261	Configure the given file .
6262	Configure the input stream .
6263	Build the interpreter .
6264	Configure the given input source .
6265	Synchronize the given event list .
6266	Returns the value of the specified property .
6267	Sets the name of this context .
6268	Returns true if the context has status listener .
6269	Returns the time of the last reset .
6270	Start the parser .
6271	Gets the effective converter map .
6272	Generate HTML header .
6273	Returns the footer of the file .
6274	Start an appender .
6275	End the appender .
6276	Creates a copy of the clients .
6277	Add a client .
6278	Remove a client .
6279	Returns a copy of the current context .
6280	Returns the value of the value of the given type .
6281	Returns the decision chain for the given marker .
6282	Checks if the OS is Android OS .
6283	Initialize the logger .
6284	Returns a list of files in a folder .
6285	Prints the status of the status .
6286	Convert a facility string to a specific type
6287	Get the database file for the given filename .
6288	Clears expired log files .
6289	Checks if the cache is expired .
6290	Subtracts a log event .
6291	Sends the secondary sub - append event to the given event .
6292	Binds an event to the SQLiteStatement .
6293	Converts an object to a string .
6294	Compute the reference mask .
6295	Merge the properties of the given event .
6296	Insert an exception .
6297	Returns the length of the prefix match .
6298	Returns the effective level of this status .
6299	Sets a property .
6300	Returns true if the given class is an instance of the constructor .
6301	Returns the child value for the given parent .
6302	Processes an include .
6303	Open a URL .
6304	Removes all the events from the recorder .
6305	Start the server .
6306	Returns true if the response is transient .
6307	Set default hosts .
6308	Creates the local index .
6309	Sync all data sources .
6310	Synchronously synchronizes the mirror .
6311	Wait for a task to be published .
6312	Lists all indexes in the database
6313	Converts a stream to a string .
6314	Convert a stream to a byte array .
6315	Consumes the connection to the given connection .
6316	Returns the list of hosts that are alive .
6317	Sets the type .
6318	Start the query .
6319	Put a value into the cache .
6320	Gets the value for the given key .
6321	Waits until all threads have completed .
6322	Compare two versions .
6323	Report an exception .
6324	Copies a directory into a directory .
6325	Initialize the simulator .
6326	Returns the value of a static field .
6327	Gets a method by its name .
6328	Format the given value as a string .
6329	Format a double .
6330	Format a long number .
6331	Reads a JSON syntax character .
6332	Returns the value of a hex character .
6333	Write a JSON string .
6334	Writes a number to the stream .
6335	Write a double value to a JSON .
6336	Read JSON string .
6337	Reads the number of characters .
6338	Reads an integer from the stream .
6339	Reads a double .
6340	Read JSON encoded from JSON .
6341	Execute a method call .
6342	Invoke a request .
6343	Enqueue a method call .
6344	Gets the file from the given location .
6345	Update the decoration .
6346	Refresh the repository view .
6347	Returns the resource history view .
6348	Open an editor .
6349	Report authentication failure failure .
6350	Prompts for authentication .
6351	Create the default page .
6352	Start animation .
6353	Sets whether this node should be kept .
6354	Sets whether or not this node should be omitted .
6355	Set owner .
6356	Add a condition factor .
6357	Creates a condition term from a stream .
6358	Returns true if the condition term matches the given condition .
6359	Returns the DDL content of the given rule source .
6360	Loads the configuration file .
6361	Reads the configuration file .
6362	Gets the menu .
6363	Add a response body .
6364	Add a href .
6365	Inserts a new link to the document .
6366	Removes a href from the root element .
6367	Add a prop stat .
6368	Returns the href of the element .
6369	Get the status of the node .
6370	Get the stack frame for the given value .
6371	Checks if the given class is a subtype of the given class .
6372	Checks if the given proposal contains the given proposal .
6373	Clone a node .
6374	Reset the stream .
6375	Creates the actions for this rule .
6376	Adds a connection to this connection .
6377	Returns the value of the specified property .
6378	Remove a connection .
6379	Sets the location of the location .
6380	Sets the property value .
6381	Sets the size of the dimension .
6382	Dump constraints .
6383	Add a lock entry .
6384	Adds a new vertex to this vertex .
6385	Removes a vertex from the vertex .
6386	Start the bundle .
6387	Stop the bundle .
6388	Gets the resource string .
6389	Gets the resource bundle .
6390	Gets the form builder for this rule .
6391	Set the date time .
6392	Sets the date time .
6393	Creates an error .
6394	Log an error .
6395	Add a field editor .
6396	Adjust the grid layout .
6397	Apply the font editor .
6398	Calculates the number of columns for this field .
6399	Initialize the field editor .
6400	Fire a property change event .
6401	Sets the active editor .
6402	Add to the tool bar .
6403	Determine dialect .
6404	Creates a new context .
6405	Saves the file .
6406	Creates the table listeners .
6407	Create the table .
6408	Put a URL with the given URL .
6409	Put a URL into the cache .
6410	Add a token .
6411	Add a node to this node .
6412	Sets the file .
6413	Add a condition .
6414	Adds a state token to the condition .
6415	Returns true if the condition matches the given condition .
6416	Get the property .
6417	Get the status of the node .
6418	Set property .
6419	Returns the last line of the last line .
6420	Returns the last non - dash line of the last line .
6421	Bind a binding .
6422	Bind a binding .
6423	Bind a message to the bundle .
6424	Creates a new process .
6425	Create the JBUnitJUnit .
6426	Gets the runtime id .
6427	Visits a retry node .
6428	Visit a node .
6429	Returns the dot id of the given object .
6430	Add a remove element .
6431	Add a set of properties .
6432	Creates a new locator .
6433	Creates a new PresentationReconciler .
6434	Returns true if the given object is equal .
6435	Returns true if the given condition matches the given condition .
6436	Creates a ConditionToken from the stream .
6437	Creates the list of pages .
6438	Perform a HTTP DELETE request .
6439	Perform a POST request
6440	Get the status of a job .
6441	Executes the pull operation .
6442	Handle pull results .
6443	Sets the value at the given index .
6444	Creates a new ActiveLock .
6445	Filter proposals by prefix
6446	Reads the prefix from the document .
6447	Calculates the row list for the given root node .
6448	Draws the canvas .
6449	Returns the edit part for the given model element .
6450	Returns the image descriptor for the given path .
6451	Declares an image registry .
6452	Adds a vertex to the graph .
6453	Returns the index of the given vertex .
6454	Returns the width of the table .
6455	Dump all vertices .
6456	Optimize the table .
6457	Load the RTE model .
6458	Initializes the graphical viewer .
6459	Draw a new graph .
6460	Returns the DroolsBreakpoint for the given source .
6461	Sets the href attribute .
6462	Determine if the server can talk to .
6463	Copy a file to a destination .
6464	Evaluate a multi status response .
6465	Extract a list of properties from a MultiStatus object .
6466	Gets the content of the resource .
6467	Returns the list of locked locks .
6468	Gets a property by its name .
6469	Returns the HEAD request .
6470	Lock this node .
6471	Moves a node to the specified destination .
6472	Checks if the location is in a valid location .
6473	Refresh the lock .
6474	Removes the specified property names .
6475	Remove a property .
6476	Sets the content of a file .
6477	Sets the properties of a collection .
6478	Sets a property .
6479	Unlock a lock .
6480	Updates the given version .
6481	Performs the version control .
6482	Deletes a node .
6483	Check status code .
6484	Checks if a property has a child .
6485	Write the request body .
6486	Converts a byte array to a hex string .
6487	Converts an array to a hex string .
6488	Sets whether this node is all the properties of this node .
6489	Sets whether the node is a property name .
6490	Set property .
6491	Strip the last word .
6492	Update the tree .
6493	Write the content to the stream .
6494	Step over the stack .
6495	Mark parser errors .
6496	Skip whitespace .
6497	Adds a resource to the given location .
6498	Commit the changes of a file .
6499	Gets the age of the cookie .
6500	Gets the content length .
6501	Returns the maximum number of forwards .
6502	Returns true if the option should be overwritten .
6503	Returns true if the request has been processed .
6504	Gets the timeout .
6505	Put a value in the context .
6506	Sets the timeout .
6507	Open a DSL file .
6508	Parse a file .
6509	Extracts the metadata from a string .
6510	Strip the object metadata .
6511	Add tokens to the root node .
6512	Get the children of a condition .
6513	Get the children of the given object .
6514	Add a child node to the list .
6515	Print the tree .
6516	Print a node .
6517	Prints the number of tabs .
6518	Reads a JsonValue from a string .
6519	Get image descriptor .
6520	Invoke the request .
6521	Sets the request header field .
6522	Creates a new RuleLauncher .
6523	Create the rule .
6524	Create the rule flow .
6525	Creates a new test flow sample .
6526	Returns the list of installed IUsable units .
6527	Create an image .
6528	Returns the field name .
6529	Returns the evaluator for this node .
6530	Returns the field value .
6531	Add Guvnor properties from a file .
6532	Executes a baseline control .
6533	Bind a member .
6534	Returns a locator for the given name .
6535	Optimize the graph .
6536	Initializes the controls .
6537	Validates the resource group .
6538	Generate a unique entity tag .
6539	Returns the opposite of the given vertex .
6540	Validate a list of OAuth objects
6541	Checks if the user has the right user .
6542	Gets the username for the given ID .
6543	Adds a user to the user .
6544	Verifies the OAuth OAuth OAuth OAuth OAuth OAuth OAuth OAuth OAuth OAuth OAuth OAuth OAuth 2 .
6545	Clears the password .
6546	Returns the public ID of the given OTP .
6547	Checks if the given string is valid .
6548	Creates a new evaluation .
6549	Creates a new evaluation .
6550	Clears the cache .
6551	Checks if the Jdk is a Jdk .
6552	Returns the package name .
6553	Returns the class name of the class .
6554	Returns the unique descriptor for the given object .
6555	Returns the type of the given argument .
6556	Checks if two classes are equal .
6557	Returns the appropriate method for the given property .
6558	Get the value of a property .
6559	Returns a map of property descriptors .
6560	Gets the property descriptor from the given class .
6561	Gets a read method .
6562	Reads a character from the buffer .
6563	Parse a projection expression .
6564	Select all expressions .
6565	Returns the long value of the given value .
6566	Returns the value of the given value .
6567	Converts a value to a BigInteger .
6568	Returns a BigDecimal representation of the given value .
6569	Returns the value of the given value .
6570	Returns the type of the given value .
6571	Convert a value to a type .
6572	Convert a value to an integer .
6573	Returns the type of two numeric types .
6574	Returns the number of numeric types of two objects .
6575	Creates a new Integer .
6576	Pop the current evaluation .
6577	Generate the OGNL getter method .
6578	Generate the ognl setter method .
6579	Flattens the tree .
6580	Initializes this node .
6581	Escape a character .
6582	Sets the root context .
6583	Returns the value of the given expression .
6584	Set the value of an expression .
6585	Sets the value of the given tree .
6586	Checks if the expression is constant constant .
6587	Returns the default watch service id .
6588	Wait until the server is started .
6589	Reads the file as a string .
6590	Reloads the class loader .
6591	Gets an Archiver .
6592	Check if the archiver has problems .
6593	Reads a file as a String .
6594	Creates a new project .
6595	Add system property .
6596	Add system property .
6597	Open a new folder dialog .
6598	Change the directory .
6599	Refresh the button state .
6600	Creates a new file observer .
6601	Return the selected folder .
6602	Creates a new folder .
6603	Checks if a file is valid .
6604	Start a background job .
6605	Start a new list .
6606	Ends the list .
6607	Handle motion .
6608	Get the crop rect .
6609	Compute the layout .
6610	Register the listener .
6611	Add spans to the text .
6612	Get the view s view .
6613	Get the dropdown view .
6614	Convert text to RTF format .
6615	Calculates the text within a paragraph .
6616	Creates a unique file for the given file .
6617	Determine the original file path .
6618	Returns the namespace for the given name .
6619	Returns the local name of the given name .
6620	Sets an attribute value .
6621	Sets an attribute .
6622	Get font name
6623	Get font name .
6624	Adds new buffer to the buffer .
6625	Write a byte array to the buffer .
6626	Write a byte to the buffer .
6627	Writes the input stream to the buffer .
6628	Writes the buffer to the output stream .
6629	Returns a copy of the buffer .
6630	Sets the font size .
6631	Convert path to Unix separator .
6632	Recursively recomputes the focus .
6633	Ensure that the view is visible .
6634	Sets the center of the highlighted view .
6635	Reset the document locator .
6636	Validate the given value .
6637	Register a new element type .
6638	Sets an attribute .
6639	Adds a child element to the parent .
6640	Returns the element type .
6641	Gets the entity associated with the given name .
6642	Clean up paragraphs .
6643	Apply the given value to the given editor .
6644	Checks if a domain is valid .
6645	Executes the given operation .
6646	Redo the editor .
6647	Replace all occurrences of the given string .
6648	Get the thread status .
6649	Sets the options for this thread .
6650	Checks if the given thread is valid .
6651	Decode a file descriptor .
6652	Get the set of font fonts .
6653	Gets the font fonts for the given context .
6654	Get the system font names .
6655	Initialize the HTML document .
6656	Gets the reader from the input stream .
6657	Gets the input stream from the system .
6658	Add an attribute to the new element .
6659	Expand entities from source .
6660	Lookup an entity from the schema .
6661	Restart the given element .
6662	Removes an element from the stack .
6663	Restart an element .
6664	Returns the prefix of the given name .
6665	Checks if the given prefix is foreign key .
6666	Removes quotes from a string .
6667	Split a string into a list of strings .
6668	Rectify an element .
6669	Convert a string to a name .
6670	Save the state of the instance .
6671	Destroy the editor .
6672	Starts the main thread .
6673	This method is called from the main thread .
6674	Gets the base matrix for the given bitmap .
6675	Calculates the maximum zoom level .
6676	Checks if the given editor is present in the editor .
6677	Finds all spans in the given paragraph .
6678	Encodes a URL .
6679	Decode query string .
6680	Determine if a directory is pickle .
6681	Rotate a bitmap .
6682	Sets the output writer .
6683	Write a character to the output stream .
6684	Write a string to the output stream .
6685	Checks whether the given value is a boolean attribute .
6686	Writes the given string to the given string .
6687	Write namespace declarations .
6688	Write a name to the XML .
6689	Creates a stream if it exists .
6690	Wait for a stream activation .
6691	Complete the snapshot snapshot of the target store .
6692	Waits until the next request is reached .
6693	Gets a list of records for the given request .
6694	Perform an action with retry .
6695	Performs an action on Amazon AWS AWS API .
6696	Checks if a bucket is accessible .
6697	Loads the entities from the store .
6698	Trigger wildcard expansion .
6699	Replace the string with the given pattern .
6700	Delete all characters from a string .
6701	Add a resourceLint report .
6702	Updates the properties of the configuration .
6703	Gets the configuration properties .
6704	Creates an input stream from the wro file .
6705	Convert preProcessors map to postProcessor
6706	Compile the given content .
6707	Reloads the cache with the specified value .
6708	Reloads the current state of the model .
6709	Creates a servlet request with the given location .
6710	Returns a transformer for the given suffix .
6711	Called when an error occurs .
6712	Send a redirect to the server .
6713	Process a resource .
6714	Creates a handler for the given resource .
6715	Locate the given URI .
6716	Creates the WroConfiguration object .
6717	Register change listeners .
6718	Process request .
6719	Sets the WroConfigurationFactory .
6720	Identify the group names .
6721	Merges the imported model .
6722	Locate the given URI .
6723	Apply post processors .
6724	Decorator to decorate the processor .
6725	Processes a resource .
6726	Split a string into an array of strings .
6727	Loads properties from an input stream .
6728	Parse the properties from a string .
6729	Creates a WroManagerFactory .
6730	Persist resource fingerprints .
6731	Checks if the given group is target group .
6732	Extend the plugin classpath .
6733	Returns the resource resource as a stream .
6734	Initializes the WroManagerFactory .
6735	Sets the model transforms .
6736	Compile the given content .
6737	Processes and merges all resources in the given list .
6738	Processes and merges all resources .
6739	Runs the preprocessing process .
6740	Apply preProcessors to the given resource .
6741	Decorates a ResourcePreProcessor .
6742	Persist the fallback storage .
6743	Returns all fields of the given object .
6744	Rewrite the css uri .
6745	Computes the new image location .
6746	Add model transformer .
6747	Serves the processed bundle .
6748	Initializes the aggregated folder path .
6749	Extract variables from the body body .
6750	Parses the given CSS .
6751	Replace variables with the given variables .
6752	Converts a resource post processor to a preProcessor .
6753	Checks if the resource type is eligible .
6754	Apply gzip response .
6755	Creates a new path pattern processor .
6756	Creates a new PathPatternProcessor .
6757	Creates a new resource change handler .
6758	Sets the fingerprint of the resource .
6759	Processes a CSS import .
6760	Filter the collection .
6761	Checks if the request is minimized .
6762	Finds the imports from the given CSS content .
6763	Computes the absolute URL to the absolute path .
6764	Creates a string representation of the given items .
6765	Gets the list of aliases .
6766	Creates a new Scriptable object .
6767	Evaluates the given reader .
6768	Evaluate a script .
6769	Process the bundle .
6770	Checks if the request is a handler .
6771	Creates the request path for the given cache key .
6772	Rename a group .
6773	Computes the destination folder .
6774	Process a group .
6775	Checks if the resource has changed .
6776	Locates a resource with the given URI .
6777	Creates a generic object pool .
6778	Locates a stream for a given URI .
6779	Open a JAR file .
6780	Extract the path from the URI .
6781	Returns true if the request is minimized .
6782	Add a new URILocator to this instance .
6783	Decorator to create a WroModelFactory .
6784	Add a require .
6785	Process the script .
6786	Log the summary .
6787	Processes a resource .
6788	Gets the lock for the given key .
6789	Creates a process .
6790	Parse the contents of a string .
6791	Returns the task info .
6792	Returns the compilation command .
6793	Parse header .
6794	Add no cache headers .
6795	Returns the path info from the given location .
6796	Returns the servlet path from the given location .
6797	Checks if the given path matches the given path .
6798	Load a regexp pattern with the given key .
6799	Copies a reader to a writer .
6800	Create a temporary file .
6801	Clean image url .
6802	Sets the given attribute .
6803	Generate data URI .
6804	Generate data URI .
6805	Sets the context .
6806	Unset the context .
6807	Check if the cache is changed .
6808	Called when an exception occurred .
6809	Check if resource change is changed .
6810	Updates the hash for the given group .
6811	Returns true if the given resource type matches the given resource type .
6812	Create a process .
6813	Encodes a serializable object .
6814	Processes all group elements .
6815	Parse a group .
6816	Creates a group from an element .
6817	Parse resource element .
6818	Gets the resources for the given group .
6819	Logs the timer .
6820	Stop a named timer .
6821	Get a named timer .
6822	Get a named timer .
6823	Prints the status of the saturation statistics .
6824	Wrap all workers .
6825	Updates the workers that have been processed .
6826	Updates the finished counters for the current state .
6827	Updates the counter with the given value .
6828	Default visit method .
6829	Instantiates the taxonomy .
6830	Ensure that the input is loaded .
6831	Restore the state of the state .
6832	Determines if the current state is consistent .
6833	Restore the taxonomy .
6834	Restore instance taxonomy .
6835	Returns the evidence for the given conclusion .
6836	PreExecute the worker .
6837	Invalidate all reasons .
6838	Gets the list of possible individuals .
6839	Gets the list of individuals that have been removed .
6840	Creates an UnsupportedOperationException exception .
6841	Remove an element from the array .
6842	Removes the element at the given position .
6843	Returns the position of the element at the given index .
6844	Returns true if the given element is contained in the array .
6845	Adds an element to the array .
6846	Check the number of occurrences .
6847	Add a class to this class .
6848	Adds a rule application timer .
6849	Put a key value into the array .
6850	Removes an entry from the list .
6851	Expand the map .
6852	Recursively shrink the map .
6853	Saves configuration file to disk .
6854	Prints the declarations of a class .
6855	Gets all nodes of a node .
6856	Clears the collection .
6857	Combine multiple hashes .
6858	Combine a list of hashes .
6859	Copy input stream to output stream .
6860	Returns a new IncompletenessMonitor with additional reasons .
6861	Process a taxonomy .
6862	Submit an input .
6863	Append the given ElkObject to the appender .
6864	Mark the query as computed .
6865	Add a direct type node .
6866	Checks if the given chain is valid .
6867	Returns a set of elements that match the given condition .
6868	Creates a set of elements from an input set .
6869	Adds an element to the list .
6870	Remove an object from the list .
6871	Add a new ClassConclusionCounter .
6872	Log the memory usage .
6873	Sets the configuration options .
6874	Shutdown the reasoner .
6875	Prints the header .
6876	Prints the given values .
6877	Returns a string with n characters .
6878	Adds a rule counter to this rule .
6879	Write a resource .
6880	Returns the action parameter for the given name .
6881	Returns the property descriptor for the given property path .
6882	Get the required parameters .
6883	Checks if the given class is a single value type .
6884	Add a link to the link .
6885	Sets the media type .
6886	Add a HREFLANG language .
6887	Add a revision .
6888	Add a link parameter .
6889	Expand an Affordance .
6890	Gets the list of rels .
6891	Gets the list of revisions .
6892	Returns true if all required parameters are not satisfied .
6893	Convert the value to a String .
6894	Determine if the property is hidden .
6895	Returns true if the given property contains the given property .
6896	Returns true if the input property is implicit or not .
6897	Checks if the request is required .
6898	Returns the default value .
6899	Get the parameter name .
6900	Gets the property name or parameter name .
6901	Get the vocab from the mixin .
6902	Returns the query string .
6903	Append the form to the form .
6904	Creates an input button .
6905	Appends the input field to the form .
6906	Adds an AffordanceBuilder to the builder builder .
6907	Returns a copy of this URI template .
6908	Remove optional parameters from the given list of parameters .
6909	Get the first node by name
6910	Get the first node by rel .
6911	Returns an iterator over the UberNode .
6912	Creates a new PersistentHashMap .
6913	Creates a new PersistentTreeMap .
6914	Creates a new PersistentTreeMap .
6915	Returns an ordered set of entries .
6916	Returns the last key .
6917	Creates a copy of a source .
6918	Fills the given iterable and returns the result .
6919	Drop a predicate .
6920	Performs a fold with the given identifier .
6921	Creates a Tuple2 .
6922	Matches the given item and returns the result .
6923	Register a list of types .
6924	Returns the element at the given index .
6925	Appends an element to the list .
6926	Concatenate a list of items .
6927	Creates a mutable set of items .
6928	Creates a mutableVec .
6929	Creates a set of items from the given items .
6930	Creates a new immutable vector .
6931	Convert an array of items to an unmodifiable element .
6932	Returns the indentation of the given length .
6933	Returns a string representation of an array .
6934	Creates a lazy reference .
6935	Apply the given producer to the producer .
6936	Insert an item at the given index .
6937	Creates a new array with the specified length .
6938	Suspent the current thread .
6939	Called when the transaction is started .
6940	Builds a list of service components from a container .
6941	Validates a directory .
6942	Create the inheritance link .
6943	Copy all methods of the given class .
6944	Copies the given methods to the destination .
6945	Determines the tree tree .
6946	Removes a SbbEntity from the session .
6947	Returns true if the parameter is enabled .
6948	Returns the list of references that are not referenced by this service .
6949	Install service .
6950	Uninstalls a ServiceComponent .
6951	Determines if the given resource name is referenced by this service .
6952	Gets the set of parameters for the given SBB .
6953	Reset all usage parameters .
6954	Get profiles for a given profile table .
6955	Returns the profile activity activity .
6956	Gets a profile by its index .
6957	Display the result .
6958	Converts an array of objects into a String .
6959	Execute an event .
6960	Bind a name to the cache .
6961	Unbind a name .
6962	Lookup a name in the cache .
6963	Returns a map of name bindings .
6964	Returns the next event .
6965	Returns true if this TraceLevel is higher than other .
6966	Extracts a jar from a jar file .
6967	Write a stream to the output stream .
6968	Put an object with the given key .
6969	Attaches a SBB entity to this node .
6970	Detaches a SBB entity .
6971	Returns true if this node is attached to this node .
6972	Gets the list of children attached to this node .
6973	Attach a timer to this node .
6974	Detaches a timer .
6975	Returns true if this node has been attached .
6976	Gets the list of timers for this node .
6977	Add a name bound to the namespace .
6978	Removes a name from the namespace .
6979	Returns true if the names of the names bound to this node .
6980	Returns the names of the names bound to this node .
6981	Sets the value of a CMP attribute .
6982	Gets the value of the comparison attribute .
6983	Returns the copy of this node .
6984	Initializes MBeanNotificationInfo .
6985	Send a usage notification .
6986	Download a remote dU .
6987	Update deployed components .
6988	Install a deployable unit .
6989	Uninstall a deployment unit .
6990	This method is called when an uninstall is installed .
6991	Show the status of the deployment .
6992	Checks if the given record is a logable .
6993	Gets the logger for the given record .
6994	Returns a set of Slee Components that refer to the given component .
6995	Gets a set of SBB entities .
6996	Gets the permissions for this policy .
6997	Gets the code sources for this policy .
6998	Checks if a profile exists .
6999	Removes the profile .
7000	Updates the configuration properties .
7001	Called when the service is started .
7002	Called when the application is stopped .
7003	Activate this entity .
7004	Deactivates the entity .
7005	Schedule all activities .
7006	Removes the entity .
7007	Get the resourceAdaptor interface .
7008	Called when a service is active .
7009	Derive activity handle .
7010	Called when an activity is ended .
7011	Updates the current configuration .
7012	Verify that the configuration is valid .
7013	Stops the raaphor .
7014	Called when a resource is active .
7015	Unconfigures the resource adaptor .
7016	Unset the resourceAdaptorContext
7017	Unset the faultTolerantContext
7018	Build the profile attribute map .
7019	Resume the queue .
7020	Returns the name of the activity context .
7021	Removes the management parameters .
7022	Returns the usage mbean for the given parameter set .
7023	Decorate the abstract class .
7024	Fire an event .
7025	Fire an event .
7026	Get the profile for a given profile .
7027	Get the service usage parameter set .
7028	Get the abstract methods from a class .
7029	Get interface methods from interface class .
7030	Creates an object pool .
7031	Removes an object pool from the pool .
7032	Checks if the given notification is owner of the notification .
7033	Raises an alarm .
7034	Get the usage parameter set .
7035	Gets the specification descriptor for this event .
7036	Checks if the given URL is accepted .
7037	Initialize the deployment .
7038	Start the deployment .
7039	Stop the deployment .
7040	Show the status of the deployment .
7041	Executes after commit actions .
7042	Execute after commit actions .
7043	Executes after rollback actions .
7044	Executes before commit actions .
7045	Executes before commit actions .
7046	Returns a list of all registered Tracer names .
7047	Creates a tracer .
7048	Remove replication data .
7049	Registers the editor editor .
7050	Processes the given SleeComponent .
7051	Returns the object pool .
7052	Creates an object pool .
7053	Ends the activity .
7054	Start an activity .
7055	End an activity .
7056	Checks that the given event type is valid .
7057	Fire an event .
7058	Generate a new SbbLocal object .
7059	Make the getter method .
7060	Convert a string to an integer .
7061	Sets the profile ID .
7062	Extracts the message from the given string .
7063	Returns true if the given object contains the given object .
7064	Returns true if the collection contains all children .
7065	Removes all elements from the collection .
7066	Returns true if this level is higher level .
7067	Reads the current state .
7068	Clean up the class pool .
7069	Record a profile call .
7070	Gets a profile object .
7071	Parses a profile object .
7072	Sets the component ID .
7073	Generate an activity context .
7074	Generate concrete methods .
7075	Sets the cache attribute .
7076	Add a name binding .
7077	Removes the names of the names of the names of the given name .
7078	Remove a name binding .
7079	Attach a timer to the cache .
7080	Removes all timers from the cache .
7081	Attaches the Sbb entity to the cache .
7082	Detaches a Sbbentity entity .
7083	Gets the SbbAttachmentSet from the cache .
7084	Ends the activity context .
7085	Add a component .
7086	Gets the external dependencies .
7087	Checks if the dependency is satisfied .
7088	Checks if the deployment has already been deployed .
7089	Gets the install actions .
7090	Gets the uninstallable action .
7091	Determine if the component is refer to .
7092	Close a profile .
7093	Get the name of a profile name .
7094	Sets the write mode .
7095	Called when a profile is set .
7096	This method is called when the profile is set .
7097	Called by getCmpField
7098	This method is called after the getCmpField method is called by the method .
7099	This method is called when the method invocation is called before the method invocation .
7100	This method is called after the method invocation is invoked .
7101	Delete a path .
7102	Create default constructor
7103	Create the default usage parameter setter .
7104	Creates the SbbEntity and sets the SbbEntity field .
7105	Creates the fire - event methods .
7106	Creates a new SbbActivityInterface method .
7107	Add a new query expression .
7108	Bind a key to the given name .
7109	Rebind the name of the named object .
7110	Decorate the abstract class .
7111	Invokes a method and returns the result .
7112	Get real field name .
7113	Sets the value of the given field .
7114	Returns the value of the given field .
7115	Sets the profile context .
7116	Initialize the profile .
7117	Unset the profile context .
7118	Gets the profile local object .
7119	Fires a new profile if needed .
7120	Gets the profile cmp2 .
7121	Create a new class .
7122	Create the inheritance link .
7123	Add an annotation .
7124	Add member values to annotation .
7125	Returns the activity context for the given activity .
7126	Gets the class pool .
7127	Sets the deployment unit .
7128	Deletes the class loader .
7129	Execute an activity .
7130	Checks if the given class is an interface .
7131	Get all methods of a class .
7132	Resolve an entity .
7133	Checks that the given tracer name is valid .
7134	Returns a collection of profiles for a given query .
7135	Checks the dependencies of the given component .
7136	Creates a temporary DU deployment directory .
7137	Gets the entity manager .
7138	Start the container .
7139	Switch the class loader to use .
7140	Make a proxy call .
7141	Checks if the transaction is valid .
7142	Converts the last access time to a TTL string .
7143	Returns true if the profile is visible .
7144	Gets the profile for the current profile .
7145	Returns the list of logger names for the given regex .
7146	Resets the logger level .
7147	Clear loggers .
7148	Add a logger .
7149	Add a socket handler .
7150	Removes a handler from the logger .
7151	Convert a tracer name to a logger name .
7152	Sync the log4j logger .
7153	Assign the log4j level to the trace level .
7154	Resets the cache flags .
7155	Sends a trace notification .
7156	Checks that the tracer name is valid .
7157	Write an object to the output stream .
7158	Reads an object from the input stream .
7159	Add a direct dependency .
7160	Gets all the dependencies of this class .
7161	Finds a class by its name .
7162	Finds a resource by name .
7163	Returns an enumeration of resources for the given name .
7164	Create and register a profile .
7165	Resume a transaction .
7166	Returns a set of SbbIDs for this component .
7167	Gets the list of resourceAdaptor entities .
7168	Initializes the Slee .
7169	Shutdown the application .
7170	Validate the state transition .
7171	Generate the name of the usage parameter set .
7172	Set the value of a field .
7173	Build a PolyJDBC .
7174	Adds a value to the query .
7175	Run a transaction .
7176	Creates a RegionRequest from a string .
7177	Returns the bounding box .
7178	Resolve the image .
7179	Gets the type of the resource .
7180	Sets the view hints .
7181	Add a view to this resource .
7182	Sets the renderings .
7183	Add a new renderings .
7184	Merge multiple profiles .
7185	Merge this image with another .
7186	Construct a RotationRequest from a string .
7187	Converts a string to a size request .
7188	Initializes the adb connection .
7189	Get the dump of the device
7190	Handle pop box .
7191	Push a handle to the device .
7192	Clean up temporary files .
7193	Pulls the dump file from the device .
7194	Get the crash log file .
7195	Removes all tabs from the text editor .
7196	Indent spaces .
7197	Tokenize HTML .
7198	Markdown the given text .
7199	Escape special characters .
7200	Adds an exception to the queue .
7201	Close all statements .
7202	Find the parent class for the given type .
7203	Writes the stylesheet to a file .
7204	Write a bit vector to the stream .
7205	Appends a bit string to a bit vector .
7206	Reads from the input stream .
7207	Gets a list of JSON objects .
7208	Gets a list of values from a path .
7209	Set the klov report .
7210	Add a screenshot to the screen .
7211	Set system info .
7212	Creates a selector .
7213	Creates a selector for the given property .
7214	Extracts all annotations from the given annotations .
7215	Extracts all annotations for a given property .
7216	Finds the annotations of a property .
7217	Gets the property descriptor for the given type .
7218	Determine the value of an object expression .
7219	Converts a map to a class .
7220	Creates a Mapper from a Map .
7221	Creates a new Mapper from a Map .
7222	Convert an object to a Map .
7223	Convert an object to a Map .
7224	Get the values of an annotation .
7225	Creates a composite validator .
7226	Lookup the validator and initializes all validators .
7227	Lookup the validator for the given validation meta data .
7228	Applies validation properties to the validator .
7229	Remove a property from the map .
7230	Update the current time .
7231	Returns the size of the cache .
7232	Returns the hash of the given object .
7233	Creates the default options .
7234	Opens the database .
7235	Write multiple values to the database .
7236	Removes all keys from the database .
7237	Returns an iterator over all keys in the database .
7238	Load all data from the database .
7239	Closes the database .
7240	Returns the number of elements in an array .
7241	Returns the number of elements in the array .
7242	Calculates the variance of the given values .
7243	Returns the mean of the given values .
7244	Invokes a method from an object .
7245	Returns the sum of the elements in the array .
7246	Converts a timestamp to a string .
7247	Returns true if the object matches the given criteria .
7248	Creates a new criterion .
7249	Creates a criteria from a list of objects .
7250	Creates a Criteria from a JSON string .
7251	Adds an array of integers .
7252	Returns the maximum value of the given array .
7253	Returns the first element of the given list .
7254	Returns the last element of the given list .
7255	Returns the last element of the given list .
7256	Returns the first element of the given list .
7257	Returns the first element in the list .
7258	Returns the first element in the array .
7259	Processes array of maps .
7260	Handle collection of maps .
7261	Creates an object from a map .
7262	Returns the value of the given key .
7263	Create a toolTip with the given name .
7264	Generates the label value for a field name .
7265	Add a char to the buffer .
7266	Process the read queue .
7267	Processes write operations .
7268	Start the data store .
7269	Returns the string at the given index .
7270	Returns a copy of the given string .
7271	Returns true if the given string is in the given string .
7272	Adds a character to a string .
7273	Add an object to a string .
7274	Converts a string to a string .
7275	Split a string into a String array .
7276	Split a string into a String array .
7277	Split a string into a String array .
7278	Convert a char array to a String array .
7279	Converts a string to camelCase .
7280	Checks if a string is inside a string .
7281	Converts a string to a lower case .
7282	Converts a number to a string .
7283	Creates a new Sort .
7284	Sorts the given list .
7285	Returns the comparator for this field .
7286	Returns a list of comparators .
7287	Checks if the given value is in the map .
7288	Checks if the given value is equal .
7289	Checks if two values are equal .
7290	Calculates the sum of the given values .
7291	Round up the given number of integers .
7292	Sorts the given list by ascending order .
7293	Sorts the given list by ascending order .
7294	Sets the field value from the given map .
7295	Converts an object to a List .
7296	Creates the SQL for the given table .
7297	Returns a copy of the given list .
7298	Checks if the given value is a string .
7299	Checks if the given class is a string .
7300	Checks if a class has a field .
7301	Returns the first field of the given class .
7302	Returns the sortable field .
7303	Compare two cache entries .
7304	Compare two entries .
7305	Sorts the given list .
7306	Sorts a list of objects .
7307	Sort the entries in the given map .
7308	Sorts the given map by ascending order .
7309	Sort the keys in the given map .
7310	Sorts the given array by ascending order .
7311	Creates a comparator .
7312	Returns a comparator that implements the UniversalComparator .
7313	Get the value of the given key .
7314	Returns the value of the specified key .
7315	Gets the order of the order .
7316	Remove entries from the cache .
7317	Dynamically initializes the given value .
7318	Returns a buffered buffer .
7319	Determines if the process is exiting .
7320	Manage the input stream .
7321	Called when the flush is flushed .
7322	Start monitoring .
7323	Start the writer .
7324	Gets the value associated with the given key .
7325	Performs the main query .
7326	Performs the filter .
7327	Sets the time of the file .
7328	Sync the file to disk .
7329	Clean up the output stream .
7330	Write buffer to file .
7331	Writes the buffer to disk .
7332	Initialize the output stream .
7333	Store all values in the store .
7334	Converts a key to a byte array .
7335	Reads the meta data from the given class .
7336	Extracts the validator meta data from a string .
7337	Reads the validator metadata from the given class .
7338	Extract the validator meta data from the given class name .
7339	Extract validator meta data from annotations .
7340	Convert an annotation data to a validatorMetaData object .
7341	Split a string into a string .
7342	Split a string into a String array .
7343	Split a string by delimiters .
7344	Remove characters from a string .
7345	Split a string into a String array .
7346	Parse a string from a string .
7347	Parse a string .
7348	Parse a string from a string .
7349	Get a property by path
7350	Get the fields from an object .
7351	Returns the type of the given property .
7352	Injects a property into an object .
7353	Set the value of a property .
7354	Gets the value of a property .
7355	Get the value of a property .
7356	Get the value of a property .
7357	Initialize this message .
7358	Creates a message for the given key .
7359	Create a message .
7360	Converts a list of keys to a list of values .
7361	Returns the current subject .
7362	Parses a JSON string .
7363	Send a request to the server .
7364	Delete a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	Lists all the resources in the given path .
7368	Trigger the replication operation .
7369	Query the value of a single document .
7370	Sets the descending order .
7371	Sync all documents in the database .
7372	Get DesignDocument from database .
7373	Get all design documents from desk .
7374	Get a design document from a desk .
7375	Saves the replicator document .
7376	Find the replicator document .
7377	Find all replicator documents .
7378	Remove a document from the database .
7379	Find a single entity by id .
7380	Finds all documents in the database .
7381	Checks if a document exists in the database .
7382	Bulk bulk operation .
7383	Performs a PUT request .
7384	Performs a PUT request .
7385	Perform a POST request .
7386	Delete a URI .
7387	Validates the response .
7388	Sets the request body .
7389	Add an attachment .
7390	Returns the changes result .
7391	Reads a continuous stream .
7392	Convert a Money to a string .
7393	Shutdown the pool .
7394	Writes data to the stream .
7395	Add tags to a metric .
7396	Verify that all temporary tables have been created .
7397	Get the name of a namespace .
7398	Checks if the request is a query .
7399	Send authentication request .
7400	Returns the verb of the HTTP request .
7401	Generate the SubjectAccessReview for a subject .
7402	Handle request result .
7403	Handles a request failure .
7404	Initialize the system .
7405	Returns a list of scheduled jobs .
7406	Creates a list of buckets .
7407	End the exchange .
7408	Fetch all rows from a bucket .
7409	Creates a new buckets .
7410	Send a message to the producer .
7411	Send a single message
7412	Send a message to the producer .
7413	Searches for the cursor .
7414	Sets the value for the given property .
7415	Add a file to the zip archive .
7416	Replace the entry with the given text .
7417	Build the zip file .
7418	Generate metrics for a component .
7419	Fetches the content of a content .
7420	Fetch the content of an order item .
7421	Uploads a link to the ExportTransformation .
7422	Generate a new file generator .
7423	Creates a new directory .
7424	Ends the end of the object .
7425	Register a model adaptor .
7426	Register a new attribute .
7427	Prepare the template .
7428	Add a new domain object .
7429	Sets a property .
7430	Adds a child object to the collection .
7431	Creates a Supplier from a directory .
7432	Copies the input stream to the given output stream .
7433	Parse a file .
7434	Parses an XML document .
7435	Returns all elements in the given parent .
7436	Returns a stream of nodes in the given parent .
7437	Returns the first child element of the given parent .
7438	Returns all elements in the given parent .
7439	Validates an XML document .
7440	Main entry point .
7441	Creates a new content builder .
7442	Create a content builder from a resource .
7443	Process an entry .
7444	Ascii characters encodes a string .
7445	Sets the signature .
7446	Remove whitespace from the array .
7447	Sign the request handler .
7448	Sets the data to the recorder .
7449	Complete multipart upload .
7450	Invokes the notification .
7451	Adds an entry to the notification .
7452	Checks if the cache has expired .
7453	Get a notification .
7454	Get addressees .
7455	Get the addressee .
7456	Get events by notification
7457	Get an event .
7458	Returns the URL for a notification .
7459	Get a single entry .
7460	Get the authentication token .
7461	Returns the number of notifications .
7462	Adds new categories to the list of categories .
7463	Fetch SSP notification .
7464	Creates a notification response .
7465	Map a response to a notification response .
7466	Map a NotificationEntry to a NotificationEntry .
7467	Attaches the actions to the notification .
7468	Normalizes a SSP entry .
7469	Get the notification category .
7470	Get the notification source .
7471	Invokes the notification .
7472	Reads a notification from a file .
7473	Gets the school id from the given request .
7474	Extract user id from response .
7475	Invokes the notification .
7476	Returns a map of notification attributes .
7477	Normalizes a GeoTuple3 .
7478	Returns true if the given box is contained within the given box .
7479	Computes the closest point to the given point .
7480	Computes the sign of this point .
7481	Sets the Se3 .
7482	Sets the transformation matrix .
7483	Convert a rectangle to a polygon .
7484	Convert a polygon polygon .
7485	Computes the bounding box .
7486	Bounds the bounding box .
7487	Returns the center of the quadrilateral .
7488	Calculates the vertex average of the polygon .
7489	Compute the convex hull .
7490	Removes all vertices from a polygon .
7491	Calculates the average of the closest point of a polygon .
7492	Computes the area of a polygon .
7493	Checks if a quadrilateral is contained in a quadrilateral .
7494	Checks if the given point is a triangle .
7495	Returns the intersection of two lines .
7496	Returns the intersection of two lines .
7497	Computes the intersection of a line .
7498	Computes the intersection of a line segment .
7499	Computes the intersection of a polygon .
7500	Returns true if the ellipse is contained within the given ellipse .
7501	Calculates the intersection of a rectangle .
7502	Get the value at the given index .
7503	Convert matrix to quaternion .
7504	Rotate rotation matrix
7505	Set rotation matrix
7506	Rotate the rotation matrix .
7507	Rotate the rotation matrix .
7508	Sets the rotation matrix .
7509	Convert an Euler type to a matrix .
7510	Returns the rotation of the given axis .
7511	Sets the slope .
7512	Extracts a twist coordinate from a motion .
7513	Sets the transformation matrix .
7514	Interpolate the origin with the given angle .
7515	Solve the SVD .
7516	Solves a point on a point .
7517	Returns the length of the side of the given index .
7518	Returns true if the point is inside this point .
7519	Convert a Conicussian general .
7520	Convert a Conicussian general form to a DMatrix .
7521	Convert a Conicola to a Parabola .
7522	Convert a Parabola .
7523	Divide two points .
7524	Convert a GeoTuple to a matrix .
7525	Convert a matrix into a GeoTuple .
7526	Sets the rotation axis .
7527	Returns the distance between two angles .
7528	Returns true if the line is intersect .
7529	Checks if the given point is contained in the plane .
7530	Computes the intersection of a line .
7531	Interpolate the given Se2 .
7532	Extract quaternion from quaternion .
7533	Process the input array of points .
7534	Sets the motion of the Segment .
7535	Convert a Segment to a homogeneous matrix .
7536	Convert a Segment to a homogeneous matrix .
7537	Calculate the axis of the Segment .
7538	Checks if two Seq objects are equal .
7539	Convert latlon to unit vector
7540	Computes the circle of the given point .
7541	Calculates the circle radius of a circle .
7542	Calculates the closest point between two lines .
7543	Calculate the closest point of a line .
7544	Find the closest point in the plane .
7545	Calculates the closest point of a line segment .
7546	Finds the closest point in the given vertex .
7547	Transforms a Se2 Segment .
7548	Transforms a Se2 Segment .
7549	Returns true if the quadr is equal to the given quadr .
7550	Computes the acute angle between two lines .
7551	Convert a LinePolar2 .
7552	Convert a line to a LinePolar2 .
7553	Convert a line segment to a line parameter .
7554	Convert a LineSegment2 .
7555	Convert a point to a line .
7556	Convert a point to a line parameter .
7557	Convert a line parameter to a linePolar2 .
7558	Convert a line parameter to a line .
7559	Convert a line to a line parameter .
7560	Convert a PlaneNormal3 object to a Plane .
7561	Convert a PlaneTangent3 to a Plane .
7562	Convert a plane to a plane .
7563	Convert two points to a 3D point .
7564	Convert a plane to a world .
7565	Returns true if the given T is identical to the given T .
7566	Creates a copy of this instance .
7567	Compute the norm of the vector .
7568	Compute the t . t .
7569	Returns true if all elements are uncountable .
7570	Returns true if the parameter is equal to the given parameter .
7571	Returns the center of this point .
7572	Computes the acute angle between two lines .
7573	Checks if the given point is infinite .
7574	Returns a list of points for a given point .
7575	Convert a point to a Point3 .
7576	Returns the difference between two points .
7577	Checks if two vectors are equal .
7578	Sets the rectangle length .
7579	Convert an ellipse polygon .
7580	Compute a point to a point .
7581	Computes the angle of a point .
7582	Computes the tangent of the given ellipse .
7583	Select the tangent between two points .
7584	Get the corner of a point .
7585	Calculates the distance between two lines .
7586	Calculates the distance between two points .
7587	Computes the distance between two points .
7588	Calculates the distance between two points .
7589	Calculates the distance between the cylinder .
7590	Returns the distance between two segments .
7591	Computes the distance between two segments .
7592	Calculates the distance between two points .
7593	Computes the distance between two points .
7594	Returns the distance of the polygon .
7595	Computes the distance between two points .
7596	Calculates the distance between two lines .
7597	Returns the distance between two points .
7598	Returns the distance between two points .
7599	Add transformation .
7600	Calculate the closest point of a line segment .
7601	Returns the closest point of the given ellipse .
7602	Compute the polynomial curve .
7603	Creates a new Vector3D vector .
7604	Compute the perpendicular coordinate of a vector .
7605	Checks if two vectors are equal .
7606	Normalizes a vector .
7607	Creates a matrix from a vector .
7608	Convert a matrix to a vector .
7609	Calculates the distance between two points .
7610	Sets the ellipse .
7611	Normalizes this vector .
7612	Computes the triangle between two points .
7613	Calculate the quadrilateral .
7614	Calculates the integral of a polygon .
7615	Returns the mean of the given list .
7616	Returns a list of points for the given points .
7617	Compute the normal normalization of a vector .
7618	Returns true if the polygon is convex .
7619	Multiply the given scalar .
7620	Returns the maximum value of this vector .
7621	Calculates the distance between two points .
7622	Calculates the distance between two points .
7623	Generates a random list of points .
7624	Returns a list of points for a given point .
7625	Returns a list of points for a given mean .
7626	Calculates the mean of the points .
7627	Calculates the mean of the given points .
7628	Invalidate all cached credentials .
7629	Invalidate all Jwt contexts .
7630	Combines the given collection with the given collection .
7631	Gets the features for the server .
7632	Gets the list of features from the server .
7633	Gets the features from the server .
7634	Parses the inclusion of the XML file .
7635	Parse the feature manager .
7636	Downloads the features from the given product .
7637	Gets the list of open libraries that are open .
7638	Checks if the given list of features are present .
7639	Returns true if the given collection contains the given target .
7640	Returns the next product version .
7641	Extracts the symbolic name from the jar .
7642	Finds the map based on the given directory .
7643	Checks if the given file is a replacement jar .
7644	Extract version from file name .
7645	Compare two strings .
7646	Get product info .
7647	Checks if the given artifact is bootstrap .
7648	Returns the value of the specified property .
7649	Determines if the file is a working directory .
7650	Move back to center
7651	Checks if two objects are equal .
7652	Loads an integer from a string .
7653	This method is used to throw an exception
7654	Verify the image .
7655	Swaps the puzzle with the given target .
7656	Calculates the distance between two cells .
7657	Prints a formatted message .
7658	Prints a formatted message .
7659	Makes sure that the number of pixels have been loaded .
7660	Write a variable to the log .
7661	Returns a random integer from a range .
7662	Returns a random uniform distribution .
7663	Generates a random polynomial .
7664	Generates a random number from an array .
7665	Main method for testing
7666	Capitalizes the first character .
7667	UnCapitalize the first character .
7668	Fix path .
7669	Convert a CriteriaJoin to a String
7670	Returns a string representation of the token .
7671	Filter the authorization token .
7672	Extracts the auth token from a cookie list .
7673	Register Guice bindings .
7674	Get all permissions for the given parent .
7675	Adds a projection to the list .
7676	Convert JobInfo to JobDetail .
7677	Convert a trigger to a trigger .
7678	Set the count interval values .
7679	Set the start time of the trigger .
7680	Send a mail item .
7681	Writes the buffer to the output stream .
7682	Initializes the scheduler .
7683	Gets the fields of a class .
7684	Returns a map of field names .
7685	Convert an exception to a response .
7686	Configures the encryptor .
7687	Generates the hash for the user agent .
7688	Generate token string
7689	Send a message .
7690	Generates a strong password .
7691	Change the password .
7692	Get a user by account name .
7693	Hash password .
7694	Verifies that the given account name is valid .
7695	Verify the password strength .
7696	Provides the search model .
7697	Commit the transaction .
7698	Handles the error if the transaction is active .
7699	Start the transaction .
7700	Configure field by name .
7701	Checks if the token is authorized .
7702	Parses the given object .
7703	Gets the response for the service .
7704	Creates a new constraint .
7705	Creates a new Restriction .
7706	Creates a new restriction .
7707	Creates a new restriction .
7708	Creates a new restriction .
7709	Creates a new restriction .
7710	Creates a new restriction .
7711	Creates a new restriction .
7712	Create a new namespace manager .
7713	Returns a new resource representation of this resource .
7714	Returns a new resource representation of this resource .
7715	Returns a new resource representation of this resource .
7716	Returns a new resource representation of this resource .
7717	Decode a byte array .
7718	Encodes a string into a byte array .
7719	Compares two streams .
7720	Moves a file from src to dst .
7721	Touch files .
7722	Returns the base name of the file .
7723	Add padding .
7724	Returns the short name of a class .
7725	Gets the super types of the given class .
7726	Verify the given password .
7727	Reads a string from the system .
7728	Appends a byte to the buffer .
7729	Appends a byte array to the buffer .
7730	Creates a copy of the given array .
7731	Returns a new Fraction .
7732	Returns a new Fraction .
7733	Creates a new Fraction .
7734	Creates a new Fraction .
7735	Returns the maximum value of the given values .
7736	Returns the minimum value of the given values .
7737	Checks if the given condition is valid .
7738	Fetches the metadata for a location .
7739	Fetches the metadata for a given latitude .
7740	Fetch the metadata for a given latitude .
7741	Returns a list of forecasts for the given hours .
7742	Find the nearest forecast .
7743	Fetch a weather forecast .
7744	Creates a new MetadataForecastForecastForecast .
7745	Creates a new MetadataForecastForecastForecast .
7746	Creates a Location from a string .
7747	Fetch the available metadata .
7748	Returns the name of the wind symbol .
7749	Find the Beaufort level for the given point .
7750	Create a URI .
7751	Returns true if the current date is a Sun .
7752	Returns the point forecast for the given date time .
7753	Returns the best fit for the given date .
7754	Fetch the content for the given latitude and latitude .
7755	Fetches the metadata for the specified location .
7756	Updates the database .
7757	Invokes a string method .
7758	Acquire the object from the source .
7759	Creates a ReferencedObject .
7760	Returns a reference to the given class .
7761	Returns the configuration for the given class .
7762	Returns true if the given bootstrap configuration is enabled .
7763	Creates a class iterator for the given service .
7764	Get the decoder .
7765	Returns a list of all registered services .
7766	Gets a module by its type .
7767	Acquire an input stream .
7768	Returns the size of the data source .
7769	Creates a reference to the given data .
7770	Returns the index of the component .
7771	Returns the prefix of this name .
7772	Returns true if the compiler is colored .
7773	Execute a regular expression .
7774	Finds the first occurrence of a dfa .
7775	Substitute subexpression .
7776	Recursively computes the intersection of a subexpression .
7777	Returns true if the subexpression matches the given expression .
7778	Clone out the arcs .
7779	Optimize subtree .
7780	Mark the subtree .
7781	Recursively creates a NFA node from the tree .
7782	Parse a subtree .
7783	Removes the arc from the given state .
7784	Creates a non - word sequence .
7785	Creates a new word .
7786	Scans a number number .
7787	Parse brackets .
7788	Scan plain text .
7789	Creates a new lacons .
7790	Add a char to the next character .
7791	Perform a vector of Unicode characters .
7792	Returns the color for the given character .
7793	Creates a new color .
7794	Subtracts a color from a range .
7795	Called when the color is complete .
7796	Add a color chain to the chain .
7797	Removes the colorchain from the colorchain .
7798	Dump all color descriptions .
7799	Lexes the beginning of the lexicode .
7800	Add prefixes .
7801	Perform a lexicestring .
7802	Returns the color for the given codepoint .
7803	Initializes the state set .
7804	Returns the last selected state of the state set .
7805	Returns a set of Unicode classes .
7806	Returns the UnicodeSet for the given class name .
7807	Calculates the carcsort of the given position .
7808	Dump the string representation of the structure .
7809	Creates a new state .
7810	Move the arcs to the given state .
7811	Moves all ins from the given state .
7812	Copies the state of the given state .
7813	Copy the arcs to the given state .
7814	Drop a state .
7815	Free the state of the state .
7816	Creates a new arc .
7817	Dump the state of the given state .
7818	Set special colors .
7819	Dump nfa .
7820	Dump a state .
7821	Dump the arcs to a string .
7822	Dump the arcs into a string .
7823	Dump an Arc .
7824	Performs the optimization .
7825	Analyze the chain .
7826	Combine two arcs .
7827	Clean up the state .
7828	Mark this state as reachable .
7829	Mark the current state as possible .
7830	Fixes all empty states .
7831	Removes an Arc .
7832	Get rule parameters .
7833	Gets the report interpreter plugins .
7834	Get report plugins .
7835	Gets the RuleSelection .
7836	Run the command line .
7837	Returns the error message .
7838	Gather standard options .
7839	Gathers the options from the given tasks .
7840	Gets the names of the taskFactory .
7841	Execute a command line .
7842	Gets the command line .
7843	Execute a task .
7844	Reads properties from the given command line .
7845	Prints the help message .
7846	Gets the home directory .
7847	Creates the class loader .
7848	Returns a set of all the cells in this cell .
7849	Returns a set of all the intersecting ids .
7850	Returns the URI for the given method .
7851	Add a route to the router .
7852	Returns the number of routes .
7853	Add a route to the router .
7854	Add a route to the router .
7855	Add a route to the router .
7856	Returns true if the request matches the given request path .
7857	Returns true if the given property is equal .
7858	Gets the store file name .
7859	Compare two folders .
7860	Compare two entries .
7861	Compare two bookmarks .
7862	Sets the servlet class .
7863	Gets the dependencies of the servlet .
7864	Find a class by its name .
7865	Parse the Authorization header .
7866	Returns a new ProtectedFunctionMapper .
7867	Add a function to the map .
7868	Get the map for the given function .
7869	Resolve a function for the given prefix .
7870	Sets the values of the character array .
7871	Resolve a variable .
7872	Parses a tag file .
7873	Parses an XML file .
7874	Parses a tag file .
7875	Parses the given XML file .
7876	Creates a Compiler .
7877	Gets a resource as a stream .
7878	Calculates the last modification time .
7879	Returns a list of all classes that have been loaded .
7880	Checks if the classloader is a classloader .
7881	Starts the given class and resources .
7882	Reads the stream header .
7883	Returns a paginationResult with the given data set .
7884	Creates a MetaKey from a string .
7885	Fill requirements .
7886	Gets the tag file for the given tag .
7887	Parses the XML file .
7888	Returns the checksum of the given file .
7889	Get the size of a file .
7890	Validate channel name .
7891	Sets the given block number .
7892	Locates the block at the given position .
7893	Gets the MavenArtifacts for the given channel .
7894	Updates the state of the opts .
7895	Calculates the price of a single price .
7896	Calculates the long price for the given position .
7897	Calculates the normal match prices .
7898	Checks that the given position is expected .
7899	Checks that the character is invalid .
7900	Recursively scans all the files in the jar .
7901	Scan a TLD file .
7902	Add a JspServletWrapper .
7903	Gets the parent class loader .
7904	Sets a bytecode .
7905	Gets the timecode for the given name .
7906	Save a bytecode to a file .
7907	Checks if the JSPServlet is valid .
7908	Initialize the classpath .
7909	Start the thread .
7910	Stop the thread .
7911	Runs the compiler .
7912	Find a channel by name .
7913	Find a channel by its name .
7914	Updates the deploy group cache .
7915	Returns a list of DeployGroups .
7916	Copies the input stream to the output stream .
7917	Parse a JSP file .
7918	Parses the attributes and returns the attributes .
7919	Parse a quoted string .
7920	Add include directives .
7921	Parse JSP attribute and body and body .
7922	Add an attribute .
7923	Add a child node .
7924	Returns an iterator over all attributes .
7925	Find all children of this node .
7926	Find all children of the given name .
7927	Returns a copy of this MavenCoordinates .
7928	Find the alias for a variable name .
7929	Sets the thread .
7930	Unset the thread .
7931	Finds the current print stream .
7932	Write a value to the writer .
7933	Write a field to the writer .
7934	Creates a new element .
7935	Adds a new element to the given parent .
7936	Write the character to the writer .
7937	Sets the writer .
7938	Re - allocates the buffer .
7939	This method is used to map the EL function .
7940	Returns the current state of the given key .
7941	Registers a storage provider .
7942	Stream data from the data path .
7943	Display a monitor .
7944	Checks if a channel is authenticated .
7945	Finish the stream .
7946	Creates a Gson instance .
7947	Encodes the symbol .
7948	Returns the union of the provided meta data .
7949	Get the Throwable from the request .
7950	Checks if the coordinate is valid .
7951	Finish the stream .
7952	Returns the exception of the request .
7953	Evaluate an expression .
7954	Creates a prefix from the OSGI service .
7955	Checks if the given path is XML .
7956	Parse a tag file .
7957	Load a tag file .
7958	Removes all generated classes from the compiler .
7959	Main entry point .
7960	Sets the URI root .
7961	Scan all files in a directory .
7962	Find the URI root of the given file .
7963	Initializes the system class loader .
7964	Move the position to the next position .
7965	Returns true if the given string matches the given string .
7966	Returns true if the given string matches the given string .
7967	Skip the given limit .
7968	Skip the given limit .
7969	Skip the given tag .
7970	Parse a token .
7971	Removes a file .
7972	Make unclassified coordinates .
7973	Filters a list of objects in the given list .
7974	Gets the required ids of the required factories .
7975	Sets the schema resource prefix .
7976	Set the DTD resource prefix .
7977	Encode a prefix .
7978	Convert a node to a TreeNode .
7979	Merge all errors into the result .
7980	Initializes Binder .
7981	Scan all channels in the given context .
7982	Unqualify path .
7983	Invokes the given tag .
7984	Returns a byte array with the specified size .
7985	Gets an array of ints .
7986	Creates an artifact from a collection of artifacts .
7987	Get a resource as a stream .
7988	Validates the tag library .
7989	Push a stream to the stack .
7990	Get the encoding of a file .
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Returns the real path for the given path .
7994	Returns the URL for the given path .
7995	Returns the stream as a stream .
7996	Get the paths of a resource .
7997	Log a message .
7998	Add a filter .
7999	Get buffer size .
8000	Returns the memory usage of the given dictionary .
8001	Sets the preset dictionary .
8002	Move the buffer to the buffer .
8003	Fill the given buffer into the buffer .
8004	Process pending bytes .
8005	Returns the length of the match .
8006	Returns the length of the next match .
8007	Verify that the match matches the match .
8008	Move the current position to the buffer .
8009	Resets the buffer .
8010	Flush the buffer .
8011	Clears the buffer .
8012	Flush the response .
8013	Close the response .
8014	Write a string to the stream .
8015	Creates a char buffer .
8016	Javac error
8017	Convert the meta data to a list .
8018	Generate the java class .
8019	Compile the compilation .
8020	Remove generated files from servlet .
8021	Initializes java compiler .
8022	Checks if the given path is in the web framework .
8023	Returns a quoted string .
8024	Generate declarations .
8025	Compiles the tags pool .
8026	Generate XML prolog .
8027	Generate the post -amble .
8028	Generate postamble .
8029	Generate the HTML for the page .
8030	Generate the attribute attributes .
8031	Read properties from an input stream .
8032	Export a channel .
8033	Validates the XML view .
8034	Returns the handler for the given handler class .
8035	Parses an expression .
8036	Select the previous property group .
8037	Checks if the given URI is a JSP page .
8038	Print a comment .
8039	Prints a string with indentation .
8040	Prints a string .
8041	Prints a multi line .
8042	Converts an expression into an XML string .
8043	Checks that the given scope is valid .
8044	Escape a string .
8045	Validate expressions .
8046	Gets the tag handler class name .
8047	Convert a path to a Java class name .
8048	Split a path into a string .
8049	Make a Java identifier .
8050	Moves a character from a character .
8051	Checks if the given key is a Java Keyword .
8052	Adds a property to the map .
8053	Returns the modifier for the given modifier .
8054	Returns a sorted set of keys in the given map .
8055	Runs the database .
8056	Returns the basename of the given name .
8057	Put a value into the cache .
8058	Loads the database .
8059	Build metrics collection .
8060	Resolves a number .
8061	Write an object to the output stream .
8062	Returns the TTL for the given rollup type .
8063	Creates prepared statements .
8064	Track delayed metrics .
8065	Track delayed metrics .
8066	Reads an unsigned double value from the input stream .
8067	Writes the number of bytes to the output stream .
8068	Gets all properties of the default properties .
8069	Creates a new container .
8070	Schedule all slots in the scheduler .
8071	Clears the state of the given slot .
8072	Add an event listener .
8073	Add an event listener .
8074	Removes the specified event .
8075	Send an event to the queue .
8076	Returns a list of registered listeners .
8077	Get remote name .
8078	Appends a rollup event to the stream .
8079	Parses a timestamp .
8080	Start the server .
8081	Returns the rollup type for the given type .
8082	Creates an IOContainer instance from the configuration .
8083	Adds a TTL map to the table .
8084	Computes the maximum number of headers .
8085	Formats a list of headers .
8086	Formats the output of the given output .
8087	Registers the metrics .
8088	Set the thread pool name .
8089	Add a metric to the metric index .
8090	Returns the complete set of metrics for the given metric index .
8091	Returns a list of tokens for the given locator .
8092	Execute a rollup operation .
8093	Calculates a granularity from a given interval .
8094	Calculates the granularity of the given duration .
8095	Sets the server time .
8096	Get unique host names .
8097	Returns the maximum number of connections per host
8098	Gets a list of MetricColumn families .
8099	Insert metrics into metrics .
8100	Insert metrics into metrics .
8101	Gets the locators for the given slot .
8102	Get metric names from elasticsearch .
8103	Converts the given query string to a regex .
8104	Starts the storage manager .
8105	Stop the uploader .
8106	Checks if the given location is in the current batch .
8107	Checks if the given locator is in the discovery layer .
8108	Checks if the given locator is present in the token layer .
8109	Determine if the given location is a valid locator .
8110	Sets the locator for the given slot .
8111	Maps a range of ranges to a range .
8112	Returns an iterator over a range of ranges .
8113	Inserts the metrics into the database .
8114	Inserts the metrics into the metrics table .
8115	Determine if the metric is delayed .
8116	Gets the bound statement for the given metric .
8117	Gets the metadata value for the given locator .
8118	Returns a serializer for the given type .
8119	Checks if the given headers are valid .
8120	Checks if the response is valid .
8121	Inserts a list of documents in Elasticsearch .
8122	Check if the metrics are valid .
8123	Check if the download directory has been downloaded .
8124	Returns a new Extractor instance .
8125	Returns true if the given OS name matches the given OS .
8126	Start the rabbitMQ process .
8127	Stop the rabbitMQ process .
8128	Creates a new PnSignalingParams instance .
8129	Add ice servers .
8130	Adds a new ICE server to this peer .
8131	Send a message to the client
8132	Send a message to the client
8133	Gets the list of Webiters .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefinedAnyField property .
8136	Sets the JAXBehlder value .
8137	Gets the multimediaAnhang property value .
8138	Gets the status of the JVM .
8139	Gets the status of the JAXB .
8140	Gets the status of the system .
8141	Gets the ImportModus value for the import modus .
8142	Gets the attribute value .
8143	Gets the value of the WaehrType property .
8144	Gets the bodenbel property value for this JAXB .
8145	Sets the region .
8146	Sets the area property .
8147	Sets the address .
8148	Sets the description .
8149	Sets the RentCollectionPeriod field value .
8150	Sets the furnace property .
8151	Sets the phone1 field .
8152	Sets the phone2 field .
8153	Sets the contactName value .
8154	Sets the phoneInfo value .
8155	Sets the main email address .
8156	Sets the CC email address .
8157	Sets the externalId field .
8158	Sets the agentId value .
8159	Sets the Epart field .
8160	Sets the jahgang .
8161	Sets the Gebgaude value .
8162	Sets the BueroTypedTypedTypedTyping value .
8163	Checks if the given value is numeric .
8164	Sets the Gebiete value .
8165	Sets the gruppe value .
8166	Sets the agent .
8167	Gets the property value .
8168	Sets thestand status value .
8169	Gets the list of user defined extensions .
8170	Sets the zeiteinheit value .
8171	Gets the zimmer field value .
8172	Gets the haus value .
8173	Gets the BueroPrazen property value .
8174	Gets the value of gastgewerbebe .
8175	Gets the LandUnders field value .
8176	Gets the Sonstige field value .
8177	Gets the zinshaus object .
8178	Gets the terrain value .
8179	Sets the Ufangung field .
8180	Sets the Wohnung type .
8181	Returns the ISO 2 country code for the given country .
8182	Gets the country country from ISO3 code .
8183	Returns the ISO3 country code for the given country .
8184	Extracts the country code from ISO3 code
8185	Returns the name of the country .
8186	Translate a country name .
8187	Gets the annotation value for the annotation .
8188	Sets the category category .
8189	Gets the PDF of the PDF .
8190	Sets the AktionArt field value .
8191	Sets the realestateitems value .
8192	Sets the pacht field value .
8193	Upgrade the document to a previous version .
8194	Upgrade the document to a previous version .
8195	Gets the content of the document .
8196	Returns the names of the field names .
8197	Sets the blick value .
8198	Sets the pauschalm value .
8199	Sets the monatsmiete value .
8200	Gets the parkplist value .
8201	Sets the lastenumber field .
8202	Sets the zustandArt field value .
8203	Gets the value of the field property .
8204	Handle validation event .
8205	Dump the record to the writer .
8206	Returns the value of the specified position .
8207	Prints the current row of this record .
8208	Sets the value for the given position .
8209	Sets the Ctype field .
8210	Sets the haustypypion value .
8211	Gets the value of the energiot gate .
8212	Sets the keller value .
8213	Sets the grundst type .
8214	Sets the GESchlAttr attribute value .
8215	Sets the Hallen property value .
8216	Gets the value of the Wiedholger property .
8217	Gets the value of teilogenerated field s value .
8218	Upgrade the document .
8219	Gets the value of the probe .
8220	Gets the Wunschch .
8221	Sets the artifact value .
8222	Sets the Modus field value .
8223	Gets the emailSonstige value .
8224	Gets the telSonstige value .
8225	Sets the handel property value .
8226	Downgrades the given document .
8227	Sets the API value for this JAXB .
8228	Sets the Url2 field value .
8229	Sets the JAXBlement value .
8230	Gets the row value for this row .
8231	Sets the DistanZUSport field .
8232	Gets the Anhang field value .
8233	Gets the objekt kategorie type .
8234	Gets the Objekstand value for this object .
8235	Gets the HausentialTyporie value .
8236	Gets the value of the busstriptor property .
8237	Gets the value of VermarkTungs property .
8238	Gets the list of interessentents .
8239	Sets the Wertion field value .
8240	Sets the Ackerland field value .
8241	Sets the Bauerstung field s value .
8242	Sets the bootsstaende value .
8243	Sets the bero value .
8244	Sets the Camping value .
8245	Sets the Doppelhaus value .
8246	Sets the Einfilization field .
8247	Sets the EInzelHandel field value .
8248	Sets the EInzelKleinKlein value .
8249	Sets theGaragen field value .
8250	Sets the gRarten value .
8251	Sets the gastronomie field .
8252	Sets the Gewerbe value .
8253	Sets the hotel .
8254	Sets the industry value .
8255	Sets the keineBebung value .
8256	Sets the kleewer value .
8257	Sets the lager value .
8258	Sets the mehrfam field .
8259	Sets the obstagger field value .
8260	Sets the parkhaus value .
8261	Sets the producer value .
8262	Sets the Reihenhaus value .
8263	Sets theStella value of the Steepoint .
8264	Sets the velocity value .
8265	Sets the WAL element .
8266	Sets the annotation value .
8267	Gets the Wohnung field value .
8268	Gets the grundstance field value .
8269	Gets the EInzelHandel field value .
8270	Gets the HallenProdProd field value .
8271	Gets the parken value .
8272	Gets the value of the freizeitempotent property .
8273	Gets the list of objektZs .
8274	Gets the Stellplist field value .
8275	Sets the maxDauer value .
8276	Gets the feature property .
8277	Sets the zimmer type .
8278	Upgrade the document .
8279	Sets the keineAngabe value .
8280	Sets the errdwame value .
8281	Sets the solarheigung value .
8282	Sets the pellethung value .
8283	Sets the gas value .
8284	Sets the OLElement value .
8285	Sets the fernwame value .
8286	Sets the Strom field value .
8287	Sets the kohle value .
8288	Generate a random string .
8289	Generate a random string .
8290	Generate a random string .
8291	Gets the WohnKategorizationTyporie value .
8292	Sets the BENUTER value .
8293	Sets the OBJKTE value for this JIS .
8294	Gets the feed index .
8295	Sets the mob value .
8296	Gets the list of serviceleistungs .
8297	Sets the SubAdministrativeArea value .
8298	Sets the city .
8299	Sets the locality value .
8300	Downgrades the given document .
8301	Upgrade the XML document .
8302	Sets the LandTyping field value .
8303	Gets the field field value .
8304	Upgrade the document to another version .
8305	Gets the ad - type value for this Adjax .
8306	Sets the Gastgewty field value .
8307	Sets the platz field value .
8308	Gets the value of the datenabel property .
8309	Gets the klimine value for the kliminebar .
8310	Gets the image .
8311	Sets the price type .
8312	Sets the new development availability value .
8313	Sets the directions value .
8314	Sets the CO2Rating field value .
8315	Sets the energy rating value .
8316	Sets the view details .
8317	Sets the property status .
8318	Sets the pictures value .
8319	Sets the bbubar attribute value .
8320	Upgrade the document .
8321	Sets the parken value .
8322	Sets the alter attribute value .
8323	Sets the freizeitit .
8324	Sets the telefonart field value .
8325	Sets the emailart field value .
8326	Sets the Overseas field value .
8327	Sets the OverseerRental field value .
8328	Creates a simple simple field .
8329	Gets the FehlerList field .
8330	Sets the ERBacht field value .
8331	Gets the StpSonie field value .
8332	Gets the value of the ValueLists property .
8333	Sets the minDauer value .
8334	Sets the zinsTypedTyping value for the zinsheet .
8335	Gets the photo value .
8336	Sets the metadata value for this Feed .
8337	Sets the projects .
8338	Sets the properties of the feed .
8339	Downgrades the given document .
8340	Upgrade the document from the previous version .
8341	Gets the immobilie property value .
8342	Gets the objekt value .
8343	Gets the list of FehlerListelements .
8344	Gets the status of the job .
8345	Sets the Sonstige type .
8346	Sets the Distanz field s value .
8347	Gets the value of the distanzen property .
8348	Gets the Distanzen field value .
8349	Checks if the given exception is compatible with the given exception .
8350	Sets the bindings .
8351	Bind a namespace to the namespace .
8352	Remove a binding .
8353	Checks if the given content is an opening tag .
8354	Consumes the given line tokens .
8355	Consume a line from a line .
8356	Returns the index of the given line .
8357	Initializes the logging configuration .
8358	Start a new namespace .
8359	Adds an iterator to the collection .
8360	Adds an option to the list .
8361	Add a string to the option .
8362	Add an integer option .
8363	Add a long option .
8364	Add a double option .
8365	Add a boolean option .
8366	Parse the arguments .
8367	Creates a new instance of the given class .
8368	Called when the throttle has been reached .
8369	Sets the target object .
8370	Prepare the static method .
8371	Finds the matching method of the target class .
8372	Converts an integer into a string .
8373	Serializes an object into a byte array .
8374	Deserialize a byte array .
8375	Gets the child element by its name .
8376	Gets the value of a child element .
8377	Returns a list of child elements .
8378	Returns true if the given node matches the desired name .
8379	Returns true if the given node matches the given node name .
8380	Set the length of a string .
8381	Monitor a handle .
8382	Adds a reference to the registry .
8383	Starts the monitor thread .
8384	Calculate mobile phone number
8385	Start a prefix mapping .
8386	Ends the given prefix mapping .
8387	Add a callback to the future .
8388	Parses the jar .
8389	Returns the color of the selected item .
8390	Sets the list of values .
8391	Returns the color of the selected item .
8392	Sets the text size .
8393	Calculates the width of the item .
8394	Gets the introspection .
8395	Returns the names of the names of the test library .
8396	Get the keyword arguments for the given keyword .
8397	Returns the documentation for the given keyword .
8398	Main entry point .
8399	Stop the server .
8400	Starts the server .
8401	Convert a file to a JSON string .
8402	Converts a file to a JSON string .
8403	Convert input stream to JSON .
8404	Convert properties to JSON .
8405	Convert a Map to a JSON string .
8406	Convert a map of values to a string .
8407	Converts a map of values to an object .
8408	Convert properties to JSON .
8409	Returns the radius of the shadow .
8410	Creates a new OcspFetcher .
8411	Finds the certificate for the given certificate .
8412	Executes the markdown file .
8413	Preprocess markdown files .
8414	Replaces variables with the given pattern .
8415	Gets the title of the line .
8416	Add title to html file .
8417	Replace variables with the given variables .
8418	Updates the relative paths in the html .
8419	Copies the files from a directory .
8420	Checks if the given path is valid .
8421	Wrap the slider content .
8422	Fills the fade width .
8423	Fills the fade width .
8424	Calculates the percentage of the given width .
8425	Overrides the overlap of the view .
8426	Gets the launch intent .
8427	Launch activity .
8428	Get a list of Todo objects
8429	Gets a list of fact sheets .
8430	Download file from response .
8431	Build the http client .
8432	Create access control entity .
8433	Update data model .
8434	Create full export
8435	Gets a list of export types .
8436	Set the OAuth2 token .
8437	Set client credentials .
8438	Process graphQL request .
8439	Get bookmark list
8440	Add permissions to a graph .
8441	Writes the given graph to the specified graph .
8442	Adds a set of rulesets to this graph .
8443	Close the client .
8444	Execute a SELECT statement .
8445	Create a MarkLogicDataset .
8446	Limit the number of threads .
8447	Resize a geometry .
8448	Rotate the rotation .
8449	Gets the gravity value .
8450	Strip profiles .
8451	Set the text font .
8452	Creates a new image .
8453	Add an image .
8454	Parse the given arguments .
8455	Prints the usage of a class .
8456	Extract time unit from string
8457	Parses the given object .
8458	Execute the given URL .
8459	Execute the given file .
8460	Interpret the given file .
8461	Sort a list of rectangles .
8462	Render a template text .
8463	Get the xml file for the given slide number .
8464	Checks if the given mouse event is in the range .
8465	Computes the overlap between two elements .
8466	Execute a message .
8467	Execute a message .
8468	Require a resource .
8469	Get the temporary directory .
8470	Creates a log value map .
8471	Log a message .
8472	Log an event .
8473	Log a message .
8474	Log a message .
8475	Log a message .
8476	Log a message .
8477	Log an event .
8478	Log a message .
8479	Log a message .
8480	Log an error message .
8481	Log an error .
8482	Adds the context to the logger .
8483	Starts a StenoEvent .
8484	Writes a list of keys to the given list .
8485	Serialize a throwable object .
8486	Returns the log value .
8487	Gets the stack trace element from the stack .
8488	Encode a value .
8489	Create a database .
8490	Checks if the given array position is valid .
8491	Parses the save attribute .
8492	Saves the value of the attribute in the context .
8493	Refreshes the cell from the given context .
8494	Parses the save attribute string .
8495	Gets the saveAttrList from the row .
8496	Get the save attribute from a list of column names .
8497	Sets the saveObjects in hidden columns .
8498	Sets the save attributes for the given sheet .
8499	Set the save attributes for a row
8500	Prepares the context for the given cell .
8501	Format a number .
8502	Sets the shift attributes .
8503	Sets the workbook .
8504	Gets the WSSEvaluationWorkbook .
8505	Gets the formula evaluation .
8506	Calculates the maxColCounts for this sheet .
8507	Loads a web sheet .
8508	Loads a web sheet .
8509	Load workSheet by tab name
8510	Executes the export file .
8511	Saves the model .
8512	Saves the submission .
8513	Populate the component .
8514	Returns the current sheet configuration .
8515	Reads the serialization of the serialization .
8516	Returns the locale for the given component .
8517	Gets the picture .
8518	Gets the cell helper .
8519	Get picture helper .
8520	Gets the validation handler .
8521	Gets the chart helper .
8522	Convert a list of shared forms into a Ptg array .
8523	Converts a Ptg into a Ptg array .
8524	Convert a Ptg array to a Ptg array .
8525	Creates a new Ptg .
8526	Gets the list of rows for the given row .
8527	Builds a list of serialized rows from the given list .
8528	Fixes a ref to another row
8529	Builds the dynamic row for the given Ptg .
8530	Builds the dynamic row for a given area .
8531	Get the background color for the plot .
8532	Gets the x color from the given index .
8533	Find the auto fill color for the given theme .
8534	Get the XColor from the scheme .
8535	Gets the XSS color from the given color .
8536	Returns the XColor with the specified index .
8537	Convert a XSSF color to a color .
8538	Convert XSSF color to RGB format .
8539	Get the background color from a cell
8540	Find the component name from the class .
8541	Populates the attributes for the given cell .
8542	Finds the attributes of the given object .
8543	Sets an object property .
8544	Gets the value of an object property .
8545	Setup control attributes .
8546	Finds a list of validates for the given cell .
8547	Setup the cells for a cell .
8548	Setup the cells for the given cell .
8549	Setup the picture cell .
8550	Initializes the charts map .
8551	Get the chart title
8552	Sets the style of the chart .
8553	Creates a pie chart .
8554	Setup the bar style .
8555	Initialize the charts map .
8556	Gets the id from the chart .
8557	Initializes the anchor map .
8558	Generate a single XSSF chart .
8559	Returns a collection of collection objects .
8560	Get the full name from the row .
8561	Recursively rebuild the upper level formula .
8562	Setup the upper level formula .
8563	Builds the cell formula for the given cell .
8564	Gathers a list of rows by full name .
8565	Change the index number in the shift map .
8566	Change the upper level length of the upper level .
8567	Change index number of columns in hidden columns .
8568	Sets the full name in the row .
8569	Get the original row number from the row .
8570	Set the original row number in the row .
8571	Finds the parent rows for the given shift map .
8572	Returns a list of rows mapped to the given name .
8573	Find an item in a collection .
8574	Builds the current config range from the source .
8575	Checks if a row index is static .
8576	Checks if a row is static .
8577	Replaces the attribute value with the given cell .
8578	Returns a map of cells in the specified sheet .
8579	Returns a list of skipped cells in a sheet .
8580	Adds the skip cell to the list .
8581	Builds the comment comments from a sheet .
8582	Builds the comment comment from the given cell .
8583	Builds the configuration map .
8584	Gets the sheet configuration .
8585	Build a FormCommand from a sheet configuration .
8586	Verifies the last cell of the last cell .
8587	Builds a sheet .
8588	Remove the last row from the sheet .
8589	Builds the command list from a sheet .
8590	Sets the parent for a child command .
8591	Determines whether the given list is a single command .
8592	Match the command to the given form .
8593	Creates a copy of the template for the template .
8594	Builds the command list .
8595	Process a method line .
8596	Process a command line line .
8597	Move a comment to a map .
8598	Create a config command .
8599	Builds the attribute map from the command line .
8600	Gets the sheet configuration from the given form .
8601	Sets the footer for the form .
8602	Set the body of the form of the form .
8603	Sets the header of the cell configuration .
8604	Delete a row
8605	Remove ranges from the shift map .
8606	Returns a list of all the names of the given row .
8607	Gets the first command from the given parts .
8608	Inserts a new object in the context .
8609	Deletes the object in the context .
8610	Prepares a collection of items in the context .
8611	Index all commands in the given source range .
8612	Checks if a row is allowed for the given row .
8613	Inserts a single template into a template .
8614	Evaluate a single cell .
8615	Evaluates the cell formula .
8616	Checks if the string is a UserFormula .
8617	Creates a new cell comment .
8618	eval boolean expression
8619	Removes all cells in a sheet .
8620	Removes a single row from a sheet .
8621	Removes the cached cell from the given sheet .
8622	Removes all rows in the body of the body in the body .
8623	Loads a picture .
8624	Loads a chart from the chart .
8625	Creates a new value for the given value .
8626	Get the value of a cell
8627	Gets the value of the cell s value .
8628	Get the string value of a cell .
8629	Returns a string representation of the cell s value .
8630	Set cell value .
8631	Sets the value of a cell .
8632	Sets the value of a cell value .
8633	Sets the value of a cell value .
8634	Set cell value .
8635	Copy rows from src to dest .
8636	Copies a single row to another row .
8637	Copy a cell to another cell .
8638	Copies the cell s value to the given cell .
8639	Copies a cell to a new cell .
8640	Clones a cell .
8641	Creates a comment anchor .
8642	Creates a comment .
8643	Match comment settings .
8644	Gets the XMLDrawing from a cell .
8645	Get the CTShape from a cell .
8646	Gets the cell style from the source sheet .
8647	Convert a poi cell to a cell .
8648	Get the row index from the component attributes .
8649	Gets the initial init rows from the sheet configuration .
8650	Gets the FacesRow from the given row .
8651	Gets the FacesCell from the body .
8652	Returns the PoiCell from the given sheet .
8653	Get the key from a poi cell
8654	Get a tie cell in the map
8655	Returns the current data context name .
8656	Evaluate expression .
8657	Evaluate the expression .
8658	Writes the row index .
8659	Remove a row from the map .
8660	Merge multiple rows into this table .
8661	Recursively recover the serialized serial row .
8662	Returns the type of the chart .
8663	Convert a string to a BasicStrokeke .
8664	Initialize chart data .
8665	Sets up the chart data .
8666	Initializes XSSF anchor map .
8667	Initializes the XSSF map for the chart .
8668	Returns the chart id associated with the chart .
8669	Gets the chart id from the given attributes .
8670	Builds a list of objects .
8671	Saves the data in the context .
8672	Receives all cached formulas .
8673	Returns the poi cell with the given row index .
8674	Returns the FacesCell with the given row index .
8675	Restore data context .
8676	Gets the last collection of data .
8677	Determine if the given name should be restored .
8678	Restore data context .
8679	Shift the current row of the current row
8680	Sets the first row of this cell .
8681	Set the last row of the last row
8682	Builds the cells for a row .
8683	Builds a single cell .
8684	Reads the serialized data from the input stream .
8685	Builds the categories list .
8686	Builds the series list from a list of series objects .
8687	Builds a chart from a list of chart objects .
8688	Gets the color list from the given cell list .
8689	Get the CTDPt from a list of CTPDt objects .
8690	Sets the command index map .
8691	Gets the pictures map .
8692	Creates a map of pictures from a sheet
8693	Index the picture in the map .
8694	Generate picture style .
8695	Generate chart style .
8696	Gets the anchor size .
8697	Gets the pattern .
8698	Get the chart .
8699	Recover the cell .
8700	Returns the row style of the cell .
8701	Gets the font style .
8702	Returns the color of a cell .
8703	Returns a string representation of the cell font .
8704	Get the cell style .
8705	Gets the column style .
8706	Get the alignment of a cell .
8707	Returns the vertical alignment of a cell .
8708	Calculates the total height of the given sheet .
8709	Setup the cell style .
8710	Returns the input type for the cell type .
8711	Get a set of resource paths .
8712	Get a resource as a stream .
8713	Remove prefix from a resource .
8714	Evaluate input type .
8715	Find a bean by name .
8716	Convert a short array to a string .
8717	Round the given value .
8718	Get tab type .
8719	Returns the tab style .
8720	Returns the default date pattern .
8721	Returns the decimal separator for the default locale .
8722	Returns the default separator for the default locale .
8723	Sets the tie command list .
8724	Builds the list of events for each cell .
8725	Builds the watch list for the given cell .
8726	Add a new row to the list .
8727	Checks if the string is a command string .
8728	Parse widget attributes .
8729	Returns the attribute key for the given cell .
8730	Parses the given comment attributes .
8731	Find the bracket position of a pair .
8732	Parse command attributes .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Split an attribute into an array of strings .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parses a comment to a map .
8741	Finds the first non cell name in the input string .
8742	Remove characters from a string
8743	Get Excel column name .
8744	Convert column name to int
8745	Get a cell by reference .
8746	Convert height units to pixels .
8747	Checks if a string is a date .
8748	Parse a date string .
8749	Checks if a string is numeric .
8750	Determine if the given character is continue .
8751	Sets an object property .
8752	Compare two cells
8753	Returns true if the given range is inside the given range .
8754	Clear hidden columns .
8755	Delete hidden columns .
8756	Delete a cell from the row .
8757	Process the event .
8758	Refresh the status of the cell .
8759	Validate that a row is valid .
8760	Validates the value of the given property .
8761	Check the error message in the context
8762	Validate all rules for a single cell
8763	Checks if the given value is valid .
8764	Validates the given cell .
8765	Validate the current page .
8766	Validates a row in the current page .
8767	Validate a row
8768	Refresh the cells in the current page .
8769	Refresh the cells in the table .
8770	Sets the submit mode in the view .
8771	Checks if the current tab is valid .
8772	Clears the cell .
8773	Loads the header rows .
8774	Loads a header row from a range .
8775	Fill the max column cells .
8776	Returns the header for the given cell .
8777	Gets the width of the cell .
8778	Loads the header row with the given range .
8779	Calculates the width of a cell .
8780	Clears the workbook .
8781	Initializes the tabs .
8782	Load data .
8783	Refresh the data for this cell .
8784	Refresh the data for the given row .
8785	Refreshes the data for a cell
8786	Finds the tab by name .
8787	Load a work sheet .
8788	Prepares the work sheet .
8789	Sets the first page page .
8790	Save the view map to the view map
8791	Setup the row info .
8792	Load body rows .
8793	Builds the body of the body row .
8794	Refresh the cell .
8795	Process the refresh cell .
8796	Create dynamic columns .
8797	Add a repeat row
8798	Refreshes the body of the body of the body .
8799	Sets the state of the request .
8800	Checks if the current state has been saved .
8801	Returns the constructor for the given type .
8802	Writes input stream to output stream .
8803	Write a long value to the writer .
8804	Write a string to the writer .
8805	Set the traffic stats tag .
8806	Add a bitmap .
8807	Add a file descriptor .
8808	Removes a parameter .
8809	Add a header .
8810	Clears the request .
8811	Call this method .
8812	Call the stop method .
8813	Bind to the streaming service .
8814	Unbind a radio service .
8815	Drop the listener .
8816	Store the image to disk .
8817	Converts a stream to a string .
8818	Converts a stream to a string .
8819	Send data to the output stream .
8820	Returns the number of bytes available .
8821	Close the stream .
8822	Reads data from the stream .
8823	Reset the buffer position .
8824	Sends the start header .
8825	Send the disposition header .
8826	Send the content type header .
8827	Send transfer encoding header .
8828	Send the end of the header .
8829	Send the end of the output stream .
8830	Send parts to the output stream .
8831	Returns the length of the parts of the parts of the given parts .
8832	Checks if the given URI is a redirect .
8833	Sends the response to the response .
8834	Set the date header .
8835	Sets the HTTP headers for the given file .
8836	Sets the content type header .
8837	Close the channel .
8838	Sends the disposition header .
8839	Send data to the output stream .
8840	Installs the cache .
8841	Ensure that the working directory exists .
8842	Retrieves the cache response .
8843	Creates a new input stream for the given snapshot .
8844	Reset the image .
8845	Returns a new instance of the websocket context .
8846	Validate a keystore .
8847	Replaces the scale type .
8848	Stop the listener .
8849	Get a pending intent .
8850	Disconnects the connection .
8851	Bind to the service .
8852	Unbind service .
8853	Notifies the view changes .
8854	Ensure that the channel is open .
8855	Handle accept data .
8856	Reset the response .
8857	Waits for loading .
8858	Sets the text of a text view .
8859	Hide soft input .
8860	Show soft input .
8861	Toggle soft input .
8862	Calculates the width of the pixel width .
8863	Called when an exception occurred .
8864	Clear cache cache .
8865	Populate image .
8866	Cancel image loading .
8867	Creates an image consumer .
8868	Sets the result of the image .
8869	Set the loading image .
8870	Start an image loader .
8871	Add an image to the cache .
8872	Release the given buffer .
8873	Called when a URL connection is prepared .
8874	Adds a parameter to the request builder .
8875	Connect to the server .
8876	Returns the MD5 hash of the given text .
8877	Returns a string representation of the given type .
8878	Returns a string representation of a CUBLUS .
8879	Checks if the result is valid .
8880	Check the result of a cublas result .
8881	Add a lexeme .
8882	Adds the ending for the given id .
8883	Returns the estimate of the given wordform .
8884	Prints a long description .
8885	Verifies that the given attribute is valid .
8886	Converts an AttributeValues into a String .
8887	Verifies the attribute of the given tag .
8888	Remove kamols from a tag .
8889	Get all metrics for a given application .
8890	Get query string .
8891	Process JSON data .
8892	Parse a JSON string .
8893	Get the connection configuration .
8894	Perform a request .
8895	Gets the GC4 code for the GC code .
8896	Gets the gc4 code set .
8897	Gets the gc4 column set .
8898	Gets the GC10 code .
8899	Gets the GC10 code set .
8900	Gets the gc10 column set .
8901	Get the ID of a column element .
8902	Returns the value of the given row .
8903	Returns the column with the given ID .
8904	Get all keys in a column set .
8905	Returns the key of the given ID .
8906	Checks if the given column is a key .
8907	Creates a new column .
8908	Creates a new key .
8909	Sets the number of lines to skip .
8910	Adds a column to the index .
8911	Creates a new GCPC code document .
8912	Gets the gc4 code set .
8913	Gets the gc4 column set .
8914	Creates a new GC10 code document .
8915	Gets the gc10 code set .
8916	Gets the gc10 column set .
8917	Returns a validator that validates the code list .
8918	Returns a validator that validates the code list .
8919	Returns a validator that validates the column set .
8920	Returns a validator that validates the code list .
8921	Returns a validator that validates the code list .
8922	Returns a validator that validates the column set .
8923	Send logs to server
8924	Sets the logger .
8925	Returns the current log level .
8926	Returns true if the current thread has been captured .
8927	Sets the maximum log file size .
8928	Prepend metadata to a message .
8929	Append the stack metadata .
8930	Creates a JSON object .
8931	Logs the location of the location .
8932	Set user identity .
8933	Get the byte array from a file .
8934	Start the location updates .
8935	Size of the given region .
8936	Dump the partitioned region .
8937	Sets the size of the local region .
8938	Reads a snapshot record .
8939	Prints the number of time stamps .
8940	Gets the time values for the given index .
8941	Convert a file to a chart .
8942	Returns the pool for the given server name .
8943	Returns the pool for the given locator .
8944	Checks if the given region is an existing region .
8945	Get a member of a member
8946	Returns a list of hosts .
8947	Look up the IP address for the given host .
8948	Checks if the given data is an error .
8949	Execute the given function with the given function .
8950	Flatten a collection of objects .
8951	Executes a query with the given parameters .
8952	Creates a new cache listener for the given consumer .
8953	Creates a new cache listener for deletion .
8954	Handle an exception .
8955	Gets the onRegionFilterKeyFacts field s value .
8956	Execute the given function .
8957	Returns a list of host names .
8958	Execute the given function context .
8959	Returns the name of the application .
8960	Construct the security client .
8961	Get a region by name .
8962	Get a region from the cache .
8963	Constructs the comparison between two sources .
8964	Checks if the given value is at the given timestamp .
8965	Closes this resource .
8966	Write CSV files to CSV files .
8967	Main entry point .
8968	Returns a new JMX instance .
8969	Stop members on a host
8970	Shut down a member
8971	Shutdown all members of the JMX system .
8972	Shutdown the given redundancy zone
8973	Store a pagination map .
8974	Read results by page number .
8975	Import a region .
8976	Checks if remote locators match the specified locators .
8977	Executes the given function context .
8978	Builds the hash map for the given region .
8979	Returns the value of the given column .
8980	Checks if the given type is an integer .
8981	Serializes an object into a byte array .
8982	Deserialize a byte array .
8983	Creates a new instance of the given class .
8984	Checks if the given element is an id .
8985	Checks if the given column is valid .
8986	Checks if the given element is a super type .
8987	Returns the schema for this table .
8988	Generates the java code .
8989	Emits the getId field .
8990	Convert the query to an Observable .
8991	Checks if the given column name is equal to the given column name .
8992	Returns the value of the given string .
8993	Capitalizes a string .
8994	Returns true if the given type is a type of the given type .
8995	Returns a builder with descending order .
8996	Reads the temperature .
8997	Returns the type of the given type .
8998	Print a message .
8999	Log an error message .
9000	Gets the icon fonts .
9001	Returns a list of all icons .
9002	Creates the sld editor layout .
9003	Gets the background of the dialog .
9004	Calculates the power of px .
9005	Sets the values of the array .
9006	Returns the power of a given px .
9007	Returns the root root of the given px .
9008	Expand the given exponent .
9009	Returns the ln of x .
9010	Creates a new line with the given scale .
9011	Calculate the arctan .
9012	Calculate the arctanTaylor .
9013	Returns the sqrt .
9014	Prints the Pi line information .
9015	Returns the timestamp of the given time .
9016	Sets the limits .
9017	Add a float to the buffer .
9018	Prints the number of bars .
9019	Returns a new Complex .
9020	Returns the complex representation of this complex .
9021	Multiplies a complex complex .
9022	Divide two complex numbers .
9023	Sets the matrix .
9024	Returns the row vector at the given index .
9025	Returns the column at the given index .
9026	Sets the values of the array .
9027	Transpose this matrix to a matrix .
9028	Add this matrix to this matrix .
9029	Returns a new matrix with the given matrix .
9030	Returns a new matrix with the given k .
9031	Multiplies the matrix with the given matrix .
9032	Prints the contents of the table
9033	Sets the image .
9034	Validate the coefficient values .
9035	Compute the next position .
9036	Clears the form .
9037	Converts the given StyledLayerDescriptorInfo to XML .
9038	Converts a RawLayerDescriptor to a SldI .
9039	Validates a StyledLayerDescriptor .
9040	Validates the given SLD .
9041	Returns the area of the given x1 .
9042	Sets the matrix .
9043	Sets the values .
9044	Returns the inverse of this matrix .
9045	Computes the determinant of the matrix .
9046	Computes the norm of the matrix .
9047	Solve the given b .
9048	Prints the decomposition of the matrix .
9049	Performs the forward elimination .
9050	Performs a forward substitution on the matrix .
9051	Substitute the backstitution matrix .
9052	Computes the optimal solution of the matrix .
9053	Convert a square matrix .
9054	Returns the next non - zero value .
9055	Sets the iteration procedure .
9056	Compute the next position
9057	Checks the position of the position of the tree .
9058	Compute the next position
9059	Checks if two points are equal .
9060	Adds the given addend to the sum .
9061	Multiplies the number of bits .
9062	Raise the power of a given base base .
9063	Sets the iteration procedure .
9064	Gets the SldManager instance .
9065	Convert a long value to a char array .
9066	Decompose decomposition .
9067	Prints the value of this object .
9068	Validates the given biased exponent .
9069	Validates that the given floating point is a floating point .
9070	Validates a double exponent .
9071	Validates a double exponent .
9072	Creates a new SldGwtService instance .
9073	Returns the central distribution .
9074	Returns the next polar value .
9075	Returns the next ratio .
9076	Creates a set of prime algorithms .
9077	Returns the factors of a given number .
9078	Sets the iteration procedure .
9079	Compute the next position
9080	Checks the position of the current position .
9081	Sets the JavaFX application .
9082	Set the configuration .
9083	Sets the default configuration .
9084	Initializes the fxml loader .
9085	Add a latlng .
9086	Gets the host port from the service .
9087	Returns the attribute definition for the given attribute definition .
9088	Evaluate an attribute definition .
9089	Sanitize a tag .
9090	Add an address to the request .
9091	Compiles a list of components .
9092	Returns a set of names for the service .
9093	Returns a list of service instances for the given name .
9094	Returns a list of all the users logged in .
9095	Gets the meta data for a decimal number .
9096	Change password for logged in user .
9097	Get all users .
9098	Get the gravatar for a given email address .
9099	Get the gravatar for a user .
9100	Populate fields from Elasticsearch .
9101	Returns the Elasticsearch field type .
9102	Creates a new flow step .
9103	Updates a flow step .
9104	Get a flow step .
9105	Get a flow step by step
9106	Get all steps by flow
9107	Delete a flow step .
9108	Delete a flow step
9109	Populate table fields .
9110	Close the connection .
9111	Handles the incoming message .
9112	Called when the connection is closed .
9113	Gets the echo message from the return value .
9114	Get personal inventory items .
9115	Create a new table record .
9116	Delete a form container
9117	Gets a list of form flows for a form .
9118	Get a list of form data for a form .
9119	Get the most recent form data for the given form .
9120	Create a new form container for the given form .
9121	Unlock a form container .
9122	Unlock a form container
9123	Maps a form to a form .
9124	Convert a string to a list of RoleList objects .
9125	Create a form definition .
9126	Updates a form definition .
9127	Get a form definition by ID .
9128	Get form definition by name .
9129	Returns a list of all logged in user .
9130	Delete a form definition .
9131	Get storage key from form
9132	Initialize the memcached client .
9133	Shutdown the memcached client .
9134	Converts a string to a long .
9135	Convert a document to PDF
9136	Gets the field values for the given form .
9137	Create a flow step rule .
9138	Creates a flow step .
9139	Creates a flow step .
9140	Updates a flow step rule .
9141	Update flow step .
9142	Updates a flow step .
9143	Move a flow step rule into a FlowStepRule .
9144	Move a flow step rule to a flow step .
9145	Delete a flow step rule .
9146	Delete flow step .
9147	Delete a flow step .
9148	Initialize the session .
9149	Get all user queries .
9150	Get all roles .
9151	Get the service ticket as hexadecimal
9152	Creates a field with the specified mask .
9153	Create a field text field .
9154	Creates a new FieldSpinner .
9155	Create a FieldDecider .
9156	Create a field table .
9157	Updates a field with the specified mask .
9158	Update field text .
9159	Updates a field s value .
9160	Updates the decimal slider .
9161	Update a field .
9162	Get field by name
9163	Get the form fields for a form .
9164	Get the form fields for a form type .
9165	Delete a field .
9166	Delete a field .
9167	Returns the meta data for a table field .
9168	Update a field value .
9169	Get or create an index .
9170	Creates a new flow .
9171	Updates a flow .
9172	Get a flow by id
9173	Get a flow by name .
9174	Delete a flow
9175	Delete a flow
9176	Update a field value .
9177	Gets all field values .
9178	Get the id and title and title
9179	Decrypt and decrypt the initial packet .
9180	Close the connection and clean up it .
9181	Initialize a new request .
9182	Gets the exception message .
9183	Create admin user .
9184	Get access token .
9185	Get user profile info .
9186	Executes a POST request .
9187	Executes a POST request .
9188	Returns the response handler for the given URL .
9189	Check if the connection is valid
9190	Gets the client .
9191	Gets the path to the user trust store .
9192	Closes the connection .
9193	Get Fluid items for a given job view
9194	Send a form to the flow .
9195	Called when the connection is closed .
9196	Handles a message .
9197	Send a message .
9198	Send a message to the server .
9199	Closes the user session .
9200	Execute a native SQL query .
9201	Request a license request .
9202	Applies License to License .
9203	Creates a field text .
9204	Creates a new field paragraph .
9205	Creates a field paragraph with the specified route .
9206	Creates a field multi - choice field .
9207	Creates a field - time field .
9208	Update field text .
9209	Update field paragraph text .
9210	Update field date and time .
9211	Updates the decimal form of a field .
9212	Update a field value .
9213	Create a field value .
9214	Get configuration by key .
9215	Get all configuration configurations .
9216	Create a new attachment .
9217	Get an attachment by its ID .
9218	Delete an attachment .
9219	Delete an attachment .
9220	Parse a jar file .
9221	Sets the class loader .
9222	Checks if the parent element is a rule .
9223	Checks the name of the rule .
9224	Checks if the element is valid .
9225	Gets the schema node .
9226	Checks if the form is a valid form .
9227	Raises an exception if it is not present .
9228	Converts the given value to a type .
9229	Creates a CliInterface .
9230	Creates a cli instance with the given options .
9231	Parse the given arguments .
9232	Parses the given arguments .
9233	Build the URL builder for the given path .
9234	Remove a footer view .
9235	Gets the value at the given point .
9236	Calculates the gradient of a vector .
9237	Calculates the value of a 3D value from a 2D vector .
9238	Calculates the value of the value of a uniform value .
9239	Calculates the cubic interpolation between two points .
9240	Calculate the angle of a curve
9241	Sets the bounds .
9242	Performs all plugins in the given event .
9243	Process the event .
9244	Gets the account ID for the given event .
9245	Apply rules to rule entity .
9246	Gets the event serializer .
9247	Creates a new file .
9248	Creates a temporary folder .
9249	Restore the properties of the system .
9250	Creates the delegate implementation .
9251	Adds an object to the collection .
9252	Sets a property .
9253	Gets the value of a property .
9254	Returns the next state of the current state .
9255	Process the queue .
9256	Returns the type of the given type .
9257	Get a parameterized type .
9258	Returns the type of the given type .
9259	Print the stack trace .
9260	Print the stack trace .
9261	Replace the object with the given object .
9262	Run the task .
9263	Sets the task .
9264	Check if the task is accepted .
9265	Returns true if the task was rejected .
9266	Checks if the task is started .
9267	Checks if the task is completed .
9268	Stops the task .
9269	Gets the job .
9270	Put a job into the queue .
9271	Converts the given name to a blocking mode .
9272	Reads the block .
9273	Setup the parser .
9274	Adds a reader to the catalog .
9275	Copies the readers from the catalog .
9276	Creates a new catalog .
9277	Load system catalogs .
9278	Parse the catalog .
9279	Parses the catalog files .
9280	Parse catalog file .
9281	An unknown entry point .
9282	Parse all catalogs .
9283	Resolve a DCType .
9284	Resolve the document .
9285	Resolve a system .
9286	Resolve local URI .
9287	Resolve subordinate catalogs .
9288	Convert the system ID to absolute path .
9289	Normalizes a URI .
9290	Encodes a byte .
9291	Adds a delegate to the delegate .
9292	Create a SoftValueRef .
9293	Fire a Throwable .
9294	Add a throwable .
9295	Creates the implementation of the delegate .
9296	Compares this TimerTaskTask .
9297	Get the value of the host .
9298	Get an object from the list .
9299	Sets an object at the specified index .
9300	Removes all objects from the queue .
9301	Add a new entry type .
9302	Returns the entry type for the given name .
9303	Returns the number of arguments for the given type .
9304	Returns the value of the given argument .
9305	Set the context class loader .
9306	Swaps the timeout .
9307	Removes a node from the queue .
9308	Cleanup the timeout extension .
9309	Loads a class .
9310	Preload the protocol .
9311	Create a URLStreamHandler for the given protocol .
9312	Checks if the handler package is valid .
9313	Gets the value of this class .
9314	Creates a set of delegate implementations .
9315	Creates a new synchronized counter .
9316	Creates a new longirectional .
9317	Checks if the namespace is in the namespace .
9318	Checks if the stream is notification .
9319	Rebind the given name .
9320	Returns the object instance for the given object .
9321	Returns the substring of the given string .
9322	Split a string into a string .
9323	Joins a byte array into a String .
9324	Convert an object to a string .
9325	Returns the value of the blocking mode .
9326	Creates the entry map .
9327	Returns the value of the given key .
9328	Returns the value of the given key .
9329	Removes a timer from the cache .
9330	Flush the cache .
9331	Returns a list of all keys that are valid .
9332	Sets the resolution timer .
9333	Returns a TimedEntry .
9334	Get all children of a given element .
9335	Gets a single child element by its name .
9336	Gets an optional child element .
9337	Returns the content of the element .
9338	Returns the content of the given element .
9339	Gets the content of an element .
9340	Set the maximum queue size .
9341	Sets the blocking mode .
9342	Sets the blocking mode .
9343	Execute a task .
9344	Resolves a system .
9345	Resolve a URL to a catalog .
9346	Resolve an external system .
9347	Resolve an external public URL .
9348	Returns a Resolver for a given command .
9349	Append vector to Vector .
9350	Resolve all the system reverses .
9351	Resolve a system id .
9352	Resolve all local systems .
9353	Resolve all local systems .
9354	Resolve all subordinate catalogs .
9355	Read catalog from a file .
9356	Reads a catalog .
9357	Connect to the file .
9358	Get the output stream .
9359	Checks if the next node is the next node .
9360	Helper method to delete a node .
9361	Returns the value of the header .
9362	Creates a snapshot entry .
9363	Sets the right value for this index .
9364	Creates a logger .
9365	Print a list of objects .
9366	Returns the short name of the class .
9367	Returns the string representation of the class .
9368	Returns the names of all properties in the system .
9369	Gets a property group .
9370	Returns the constructor for the given type .
9371	Creates a copy of a serializable object .
9372	Convert an object to an object .
9373	Initialize the JNDI map .
9374	Updates the jndi map .
9375	Returns a set of keys in the map .
9376	Returns a set of values in the map .
9377	Remove a property listener .
9378	Fire the event listeners .
9379	Fire a property removed .
9380	Fire a property changed event .
9381	Fire the event changed .
9382	Returns the prefix of the property name .
9383	Load properties from the given reader .
9384	Load properties from a class .
9385	Gets a property group by index .
9386	Returns true if the entity is resolved .
9387	Resolve the system id .
9388	Resolve a system ID .
9389	Resolve the classpath from the system .
9390	Sets the value of the given text .
9391	Normalizes a public ID .
9392	Encode a public ID .
9393	Decodes the given URI .
9394	Replace the given string with the given string .
9395	Start the timer .
9396	Stop the current thread .
9397	Creates a new StopWatch instance .
9398	Compares two hashes .
9399	Generates the hashcode for the given byte array .
9400	Generates the hash code for the given array .
9401	Creates the map .
9402	Sets the field value .
9403	Returns the next token .
9404	Initializes the property editors .
9405	Adds a vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth search .
9409	Determines the depth of the given vertex .
9410	Find the vertex by the given data .
9411	Find all cycles in the graph .
9412	Normalize a string .
9413	Parse XML string .
9414	Parse an XML stream .
9415	Parses an input stream .
9416	Creates a new element .
9417	Resolve a qualified qualified name .
9418	Copy attributes from srcElement to dest .
9419	Returns true if the given node is a child of the given node .
9420	Get all child elements of a node .
9421	Returns the text content of a node .
9422	Get all child elements of the given node .
9423	Gets the parent element .
9424	Adds a resource to the queue .
9425	Reads a catalog from an input stream .
9426	Reads a catalog from a file .
9427	Returns the host address .
9428	Resolve a single entity .
9429	Set system property value .
9430	Display the class info .
9431	Describes the given class .
9432	Strip the package name .
9433	Returns the package name .
9434	Loads the given class .
9435	Returns the primitive wrapper for the given type .
9436	Get all interfaces of the given class .
9437	Returns all interfaces of the given class .
9438	Returns true if the given type is a primitive wrapper .
9439	Instantiate an object from the given property .
9440	Gets an attribute for an attribute .
9441	Returns an attribute setter for the given attribute .
9442	Convert parameter name to Java class .
9443	Get a property from the system .
9444	Get a list of filenames .
9445	Removes all weak objects from the queue .
9446	Returns an iterator over the set of objects .
9447	Creates a URL for the given protocol protocol .
9448	Returns a set of entries in the map .
9449	Add a property listener .
9450	Remove a property listener .
9451	Checks if value is null .
9452	Finds a property editor .
9453	Registers an editor .
9454	Converts a string to a property editor .
9455	Gets the context loader .
9456	Returns the ApplicationDeadlockException if the exception is dead .
9457	Schedule a timeout .
9458	Runs the thread pool .
9459	Creates a subcontext .
9460	Lookup an object by name .
9461	Checks that the given object is valid .
9462	Append the class info .
9463	Get a transition .
9464	Read properties .
9465	Parse verbosity .
9466	Determine if the resource is relative to the configuration .
9467	Gets the catalog files .
9468	Get catalog files .
9469	Determine whether or not the user is public .
9470	Determine if the static catalog is used .
9471	Resolves the given entity .
9472	Resolve the given href .
9473	Make absolute path to absolute path .
9474	Resolve a class .
9475	Invokes the given value .
9476	Returns the local name of the element .
9477	Returns the namespace URI for the given node .
9478	Returns the namespace URI .
9479	Returns a list of elements .
9480	Gets the input stream .
9481	Load properties from a file .
9482	Read properties from the file .
9483	Adds an edge to the graph .
9484	Adds an edge to the graph .
9485	Add an incoming edge to the graph .
9486	Checks if the edge is a edge .
9487	Removes an edge from the graph .
9488	Finds the edge of the given destination .
9489	Returns the edge of the given edge .
9490	Returns the cost of the given vertex .
9491	Generates a jar file .
9492	Returns true if the iterator is next .
9493	Fire an event .
9494	Install JVM type provider .
9495	Cleans up a folder .
9496	Dispatch an action .
9497	Returns the event stream for the given type .
9498	Creates a fully - qualified file path .
9499	Returns a stream of records for the given rights .
9500	Creates a stream with the right rights .
9501	Returns a Stream that contains multiple rights .
9502	Returns a stream that matches the given rights .
9503	Returns true if the page is allowed for robots .
9504	Checks that the given command is generated .
9505	Main entry point .
9506	Main entry point .
9507	Gets the sum of words .
9508	Parse the superclass arguments .
9509	Initiates the JDB resource loader .
9510	Checks if the data source is valid .
9511	Returns an iterator over the given type .
9512	Creates an array of elements of a given class .
9513	Creates a list of types of a given class .
9514	Creates a collection of instances of the given type .
9515	Returns a list of all of the given type .
9516	Creates a new instance of the right type .
9517	Creates a right right right .
9518	Validates the given type .
9519	Validates the given type .
9520	Try to create a failure .
9521	Connects a JDB connection to the database .
9522	Run the specified SQL in the database .
9523	Execute a query in the database .
9524	Returns an array of boolean values .
9525	Filter the query by example
9526	Execute the upgrade .
9527	Backup the table .
9528	Restore the table .
9529	Sets the empty text .
9530	Dump data to a CSV file .
9531	Unescape a quoted string .
9532	Get a list of values from a CSV row .
9533	Converts a CSV string into a Map .
9534	Convert a map to a CSV string .
9535	Joins a list of strings .
9536	Joins a list of strings .
9537	Reads the database from the index .
9538	Writes the index to the index .
9539	Checks if the entity is valid .
9540	Returns the base Dao class for the given entity .
9541	Get the bind type .
9542	Import a CSV file from a database .
9543	Backup all tables in the database .
9544	Restore all tables from the database .
9545	Writes the index file to the index file .
9546	Creates a query with the given parameters .
9547	Creates a typed query .
9548	Render the query .
9549	Delete a record .
9550	Saves the object to the database .
9551	Updates the given object .
9552	Adds a WHERE clause to the query .
9553	Subquery builder .
9554	Returns the next stack in the stack .
9555	Returns an empty stack .
9556	Adds a plan to the map .
9557	Select a plan .
9558	Select the plan at the given position .
9559	Set plan variables .
9560	Gets the belief at the given index .
9561	Gets the parents of this node .
9562	Gets the children of this node .
9563	Returns a new byte array .
9564	Creates a new logger .
9565	Step step .
9566	Sets the goals .
9567	Pause the user input .
9568	Initializes the IntentionSelection pool .
9569	Initializes the intention selection threads .
9570	Start a thread selection thread .
9571	Shutdown all threads .
9572	Register an extension .
9573	Reset all agents .
9574	Loads an agent from a class name .
9575	Processes plans for a goal type .
9576	Creates the agents in the catalog .
9577	Loads a class .
9578	Loads a JVM extension .
9579	Checks if two objects are equal .
9580	Returns a string representation of the application .
9581	Parse command line arguments .
9582	Parses the given argument .
9583	Execute the given query .
9584	Returns the object at the specified index .
9585	Find an object by name .
9586	Push an object to the list .
9587	Returns the object at the specified index .
9588	Push an object to the list .
9589	Removes an object from the list .
9590	Returns the type of the object .
9591	Returns true if the query matches the given query .
9592	Main entry point .
9593	Converts a string to a byte array .
9594	Post a goal .
9595	Send a message to the agent .
9596	Send a message to the agent .
9597	Gets the game s goals .
9598	Creates a new belief set .
9599	Add a beliefset to the beliefbase .
9600	Evaluate a query .
9601	Suspends the agent .
9602	Gets the field by name .
9603	Registers a neighbor .
9604	Builds a random name .
9605	Runs all agents .
9606	Checks if the execution stack is valid .
9607	Removes all agents from the agent .
9608	Manages a goal .
9609	Shutdown the pool .
9610	Sets the agent id .
9611	Move the given pin to the given pin .
9612	Initialize the program .
9613	Wait until the agent is idle .
9614	Finish all agents .
9615	Returns true if all pools are idle .
9616	Returns the poolid for the given agent id .
9617	Returns the expression for the given expression .
9618	Sets the expression .
9619	Creates a join expression .
9620	Joins the given properties into a join .
9621	Finds a join for the given property .
9622	Returns true if the range is reached .
9623	Gets the upload stream .
9624	Handles the request .
9625	Checks if the given parameter is present .
9626	Get parameter value .
9627	Parse content type parameters .
9628	Configure transaction manager .
9629	Gets the target file .
9630	Writes an artifact to the output file .
9631	Sets the value of the instance field .
9632	Gets the constructor for the given class .
9633	Builds a string representation of the configuration .
9634	Gets the interface method .
9635	Returns the type of the given field .
9636	Gets the dependency value for the given class .
9637	Persist the contents of the file .
9638	Sets the default link .
9639	Sets the default link template .
9640	Handles the links .
9641	Adds links to the response .
9642	Parse the body of the body .
9643	Parse a link object .
9644	Returns the value of the given key .
9645	Handles the capabilities .
9646	Checks if the given method is allowed .
9647	Register instance processor .
9648	Register an instance factory .
9649	Register an instance processor .
9650	Register a class processor .
9651	Gets an instance of the specified interface .
9652	Add a new argument .
9653	Creates a list of target files .
9654	Returns the XML representation of this object .
9655	Initialize the builder .
9656	Checks if the template is a reference to the given template .
9657	Create a ParameterizedTemplateModel from a Reader .
9658	Creates a parameterized template model .
9659	Sets the request path .
9660	Returns a stream that contains the given start index .
9661	Returns an instance of the given string .
9662	Sets the value of a field .
9663	Add a capture to the logger .
9664	Remove an appender from the logger .
9665	Clear the logender .
9666	Reads the parameters from the request .
9667	Parses the model .
9668	Resolve all proxies .
9669	Gets the list of files .
9670	Parse a directory .
9671	Returns true if the model is fully resolved .
9672	Find all EObjects in the given set .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Reads the next line from the reader .
9677	Sets the value of the specified parameter .
9678	Sets the value of the specified parameter .
9679	Execute a large SQL statement .
9680	Converts a string to an object type .
9681	Merge the template with the given template name .
9682	Get the model directory .
9683	Gets the template directory .
9684	Write the given value to the response .
9685	Start the web UI .
9686	Configure the web window .
9687	Prints the view .
9688	Writes the input stream to the output stream .
9689	Invokes the method .
9690	Attaches the HTTP request .
9691	Detaches the request .
9692	Get the cookies .
9693	Dump the HTTP request context .
9694	Gets the list of all registered meters .
9695	Configure event stream .
9696	Sets the remote host .
9697	Returns the value of the given parameter .
9698	Remove prefix from path .
9699	Returns the common directory of the given directory .
9700	Convert absolute path to relative path
9701	Convert relative path to absolute path .
9702	Returns the depth of the given path .
9703	Dump a HTTP error .
9704	Sends an object to the response .
9705	Adds a parameterized template .
9706	Adds a list of parameters to the list of parameters .
9707	Initialize the parameters .
9708	Finds the references to the given template file .
9709	Sets the save button .
9710	Deletes the dialog .
9711	Deletes the endpoint .
9712	Creates a new instance of the managed class .
9713	Gets the list of files .
9714	Gets the summary of the results .
9715	Returns the summary of the given directory .
9716	Returns the summary of a sub - summary row .
9717	Returns a new instance of the specified class .
9718	Gets the setup class .
9719	Get the list of model directories .
9720	Get the list of model resources .
9721	Sets the list of candidates .
9722	Load the configuration from the given input stream .
9723	Handles an error notification .
9724	Checks if the given parameter is an object .
9725	Reads an object from the given HTTP request .
9726	Reads an input stream .
9727	Extracts the parameter value from the given cell .
9728	Gets the hint value for this query .
9729	Checks if the request is a XHR request .
9730	Checks if the request is Android .
9731	Handle event event .
9732	Returns a list of properties with the given type .
9733	Returns the annotation for the given property .
9734	Log a message .
9735	Lookup information about a user .
9736	Determine whether the given JRuby host is a parser .
9737	Get the managed class .
9738	Gets a managed method .
9739	Process NotContainsException .
9740	Process the NotContains event .
9741	Gets the value of the given column .
9742	Returns true if the given class is a wrapper for the given type .
9743	Serialize the response .
9744	Returns the value of a cookie .
9745	Add a cookie .
9746	Remove a cookie .
9747	Iterate over all cookies .
9748	Gets the target file list .
9749	Add a new field .
9750	Compiles the class .
9751	Verify that the token is valid .
9752	Returns the value of the file .
9753	Ensure the given URI is a trailing slash .
9754	Login to the user .
9755	Gets the HTTP servlet request .
9756	Invokes the given method .
9757	Executes a managed method .
9758	Executes an immutable transaction .
9759	Returns the list of files .
9760	Get the last file .
9761	Returns the concrete configuration for the given parser .
9762	Checks if the given path is a valid path .
9763	Gets the list of factories for the given model type .
9764	Gets the session for the given instance key .
9765	Serialize the file .
9766	Read meta data .
9767	Handle the request .
9768	Clean up the database .
9769	PreDestroy all events .
9770	Handle all allowed methods .
9771	Uploads the blob .
9772	Delete the endpoint .
9773	Extract column parameters .
9774	Returns the names of the arguments .
9775	Adds a periodic task to the scheduler .
9776	Sets a timeout .
9777	Configure view .
9778	Returns the next file .
9779	Configures the application configuration .
9780	Print the banner banner .
9781	Prints stopped banner
9782	Create a Chameleon instance
9783	Register shutdown hook .
9784	Trigger the trigger .
9785	Trigger the event .
9786	Inserts a row into the table .
9787	Gets the counts of all files .
9788	setter for score - sets
9789	getter for variations - gets
9790	setter for variations - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections
9799	setter for sections - sets
9800	getter for sections - gets
9801	setter for sections - sets
9802	getter for uri - gets
9803	setter for uri - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidate answers
9813	setter for candidate answers
9814	getter for candidate answers
9815	setter for candidate answers
9816	getter for query
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	getter for hitList - gets
9821	setter for hitList - sets
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInSection - gets
9828	setter for offsetInSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspect - gets
9836	setter for aspect - sets
9837	getter for triples
9838	setter for triples - sets
9839	getter for source relation
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for IsObjUri - gets
9846	setter for object - sets
9847	getter for operator
9848	setter for operator
9849	getter for operator arguments
9850	setter for operator arguments
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variant - gets
9862	setter for variant - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences
9868	setter for occurrences
9869	getter for concept - gets
9870	setter for concept - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the next clear bit .
9878	Sets the given index .
9879	Free the given buffer .
9880	Creates a new CacheValue instance .
9881	Rehash the values in the array .
9882	Returns a string representation of the HELM2 notation .
9883	Checks if there are brackets in brackets .
9884	Extract details from a string .
9885	Convert to HELM222 .
9886	Add a new element .
9887	Main entry point .
9888	Check if a polymer ID is valid
9889	Check if a polymer ID is valid
9890	Checks if the connection details is connected .
9891	Check if a group ID is valid
9892	Checks if a string is repeated .
9893	Checks if the polymer is a peptide .
9894	Converts the notation to a JSON string .
9895	Gets a simple polymer .
9896	Gets the current group .
9897	Convert to HELM2 .
9898	Converts the polymer to a HELM2 .
9899	Convert connection to HELM2 .
9900	Returns a string representation of grouping .
9901	Convert annotation section to HELM2 .
9902	Returns a list of all the polymers in this list .
9903	Returns a PolymerNotation with the given id .
9904	Set PolymerElements .
9905	Convert a helm string to a helm .
9906	Sets the annotation .
9907	Sets the count value .
9908	Determine if the given string is a monomer .
9909	Determine if the given string is a monomer .
9910	Determine the type of the given string .
9911	Returns the value of the interval .
9912	Parse HELM HELM HELM .
9913	Parses the contents of a molecule .
9914	Defines the ambiguity for a group .
9915	Gets the statistics for this worker .
9916	Creates a new ADI graph .
9917	Creates a new ADI graph .
9918	Initializes the internal paths .
9919	Sort nodes by reachability .
9920	Subscribe to a pattern .
9921	Returns the number of subscriptions for a given pattern .
9922	Unsubscribe a pattern
9923	This method is called when a request is received .
9924	Send a reply to the server
9925	Returns true if the request is available .
9926	Shutdown the server .
9927	Checks if the given exception is not local .
9928	Unlock the state of this thread .
9929	Creates a new thread .
9930	Add a worker to the queue .
9931	Register a new worker .
9932	Deregister a worker .
9933	Signal the work queue .
9934	Run the worker .
9935	Waits for a work queue .
9936	Gets the number of unused task count .
9937	Returns the common submitter queue .
9938	Completes the completion complete completion .
9939	Creates a new ForkJoinTask .
9940	Create a new ForkJoinPool .
9941	Gets the result of the result .
9942	Builds a string with the given code .
9943	Gets the statistics of this thread pool .
9944	Creates an array of elements .
9945	Returns a copy of this list .
9946	Returns true if the given collection contains all elements of the given collection .
9947	Performs a fold on the given collection .
9948	Folds the first occurrence of the given collection .
9949	Push a task to the queue .
9950	Creates a new option from a nullable .
9951	Creates a new map of keys and values .
9952	Creates an empty list .
9953	Creates an AListMap with the given elements and values .
9954	Creates an AListMap with the given values .
9955	Returns a set of keys in the map .
9956	Normalize a resource name .
9957	Marshal a bounding type .
9958	Returns a String with the given start and end .
9959	Creates a binary search for the given list .
9960	Creates a binary search for the given list .
9961	Send an email .
9962	Send a message .
9963	Bind a route to the router .
9964	Binds a filter .
9965	Returns true if the given role has the given role .
9966	Returns the integer value of the given Long .
9967	Remove duplicate strings .
9968	Returns a string with the given value .
9969	Runs the run .
9970	Check if the user is login .
9971	Get the login user from the request .
9972	Get login user .
9973	Checks if the given password is valid .
9974	Saves the user in the cookie
9975	Get login key .
9976	Creates a cookie from a cookie .
9977	Writes the request to the given context .
9978	Append file separator .
9979	Returns the value of the specified parameter .
9980	Log a message .
9981	Get the call info for the given level .
9982	Converts a char array to a byte array .
9983	Converts a CharSequence to a byte array .
9984	Converts a byte array to a simple char array .
9985	Converts a character sequence to a byte array .
9986	Returns the locale data for the given code .
9987	Sends a promise to the future .
9988	Crop an image from the original image .
9989	Invokes the given invocation .
9990	Invokes the given invocation .
9991	Get REST operations .
9992	Renders an error .
9993	Renders a forbidden message .
9994	Returns the template for the given view .
9995	Parses the path and returns the path .
9996	Render data tables .
9997	Renders data tables .
9998	Sets the list of items .
9999	Sends the response to the response .
10000	Returns a list of all the bindings .
10001	Returns the current stack trace .
10002	Compact memory memory .
10003	Populates the local metrics collection .
10004	Encodes a string .
10005	Get the charset .
10006	Copy input stream to output stream .
10007	Copy bytes from input stream to output stream .
10008	Copies the input stream to the given writer .
10009	Copies the input stream to the given writer .
10010	Copies the given reader to the given writer .
10011	Copies the input stream to the given output stream .
10012	Copies the input stream to the output stream .
10013	Compare two streams .
10014	Compare two strings .
10015	Apply the pipeline to the pipeline .
10016	Returns the SQL statement for the given group name .
10017	Unmarshal a String from a String .
10018	Unzip a zip file .
10019	Creates a PermissionDialog fragment .
10020	Resume the dialog .
10021	Register a core value type .
10022	Returns true if the given string matches the given regex .
10023	Checks if a string is a mobile phone number .
10024	Checks if a string is a phone number .
10025	Checks if the given string is a birthday day .
10026	Checks if a string is a URL .
10027	Checks if a string is a date time .
10028	Performs the given HTTP request .
10029	Encode a base64 value .
10030	Decodes a base64 encoded string .
10031	Converts hex string to byte array .
10032	Read UTF - 8 properties from an input stream .
10033	Reads content from input stream .
10034	Read content from file .
10035	Write data to file .
10036	Copy the contents of a directory .
10037	Serializes the given document .
10038	Get a document from a file .
10039	Creates a Document object from a string .
10040	Creates a Document from an input stream .
10041	Checks if the given document is valid .
10042	Signs an XML document .
10043	Checks if the class is a cache safe .
10044	Returns true if the given class is a primitive array .
10045	Returns true if the given class is a primitive type .
10046	Resolve primitive type .
10047	Checks if the given type is assignable .
10048	Checks if the given value is assignable .
10049	Returns all interfaces of the given instance .
10050	Returns all interfaces of the given instance .
10051	Writes the configuration file .
10052	Get variables from URI .
10053	Put a permission .
10054	Create a Druid plugin .
10055	Binds the given extension to the given extension point .
10056	Returns the context of the given type .
10057	Returns the primitive representation of the given type .
10058	Convert an object to a type .
10059	Converts the given object to a type .
10060	Get a query parameter .
10061	Get a cookie parameter .
10062	Get a session parameter .
10063	Initialize the data source .
10064	Set the shared variables .
10065	Add a parameter to the query .
10066	Sets the value of a field .
10067	Shows the permission dialog .
10068	Checks if the given values are granted .
10069	Checks if the given value is denied .
10070	Find records by query
10071	Find the first record in the database .
10072	Checks if the model is new .
10073	Checks if the method is an exception .
10074	Process the queue .
10075	Put a value into the cache .
10076	Returns true if the string matches the given pattern .
10077	Reads arguments from the given arguments .
10078	Gets the protobuf entity .
10079	Checks if the given class is a protobuf entity .
10080	Gets all protobuf fields from the given class .
10081	Get the getter for the given field .
10082	Get the pojo setter for the given field .
10083	Get the object mapper .
10084	Gets the JsonFactory .
10085	Converts an object to a JSON string .
10086	Sets the borders .
10087	Gets the user record .
10088	Copy the attribute values to the target object .
10089	Copy the attribute values to the target object .
10090	Returns the value of the property .
10091	Sets a property .
10092	Add the app to the app .
10093	Saves the given token .
10094	Get the access token .
10095	Returns the default class loader .
10096	Gets a resource .
10097	Get a resource as a stream .
10098	Reads a class from a class .
10099	Initialize the URI .
10100	Initialize the scheme .
10101	Initialize the path .
10102	Sets the scheme .
10103	Set the userinfo .
10104	Set the host .
10105	Set the port number .
10106	Append a path to the path .
10107	Sets the query string .
10108	Sets the fragment .
10109	Returns the URI string representation of this URI .
10110	Creates a prepared statement .
10111	Initialize the service .
10112	Get the Muffin field from the URL .
10113	Set the muffin field .
10114	Get the contents of the clipboard .
10115	Sets the contents of the clipboard .
10116	Open a file dialog .
10117	Load services by type .
10118	Set service params
10119	Get service params
10120	Finds the parametrized service by id .
10121	Find a service by class .
10122	Parses a query response .
10123	Returns an iterator over the buffer .
10124	Get the encoding of the XML string .
10125	Gets the parent logger .
10126	Creates a new connection instance .
10127	Get authorization code
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit the executable declaration .
10131	Returns the value of the given key .
10132	Creates a new DeclarationFilter .
10133	Returns an instance of the DeclarationFilter .
10134	Returns a new DeclarationFilter .
10135	Returns a new DeclarationFilter .
10136	Gets the value of the map .
10137	Make sure the constructor is accessible .
10138	Prepare the object query for the given object .
10139	Replace slashes with hyphenhens .
10140	Converts a byte array to a hex string .
10141	Returns the indexes for the given name .
10142	Parses the named SQL statement .
10143	Converts a collection of objects to a protobuf .
10144	Sets the value of a protobuf field .
10145	Sets the value of a property .
10146	Checks if the given pathname is valid .
10147	Creates a new ResultSet instance .
10148	Parses the given list of labels .
10149	Extracts the values from the given values .
10150	Returns the generic type of the given type .
10151	Poll the pool .
10152	Perform a poll .
10153	Returns the declared field of the given class .
10154	Returns all methods of the given class .
10155	Returns the declared method of the given class .
10156	Returns a list of all methods of the given class .
10157	Returns a list of all the declared constructors .
10158	Dump a byte .
10159	Returns the index of the substring in the given string .
10160	Remove characters from a string .
10161	Clean up the subject .
10162	Initializes the audit .
10163	Initializes the message queue .
10164	Initializes the password validator .
10165	Initializes the authentication authenticator .
10166	Resolves a locale code .
10167	Lookup the locale info .
10168	Creates a new Statement instance .
10169	Clears the collection .
10170	Push an element to the list .
10171	Removes the element from the stack .
10172	Creates a new InputStream .
10173	Parses a list of properties .
10174	Checks if the given tokens matches the patterns .
10175	Move the current position of the current position .
10176	Returns true if the rectangle is enclosing .
10177	Returns true if the given rectangle contains the given coordinates .
10178	Returns the intersection of this rectangle .
10179	Returns a new Rectangular .
10180	Replace the x and x2 .
10181	Replaces the given Rectangular with the given Y .
10182	Returns the number of columns of a given column .
10183	Returns the number of rows of the given row .
10184	Get the bounds of a cell .
10185	Calculates the columns .
10186	Calculates the rows of the grid .
10187	Unwrap a ThrowableException .
10188	Main entry point .
10189	Handles the code update .
10190	Copies the code buffer to the given length .
10191	Render instructions .
10192	Initialize the application .
10193	Returns a copy of this QueryParameter .
10194	Add a child to this node .
10195	Clears the tree .
10196	Returns the next solution .
10197	Add instructions to the builder .
10198	Add instructions to the parent .
10199	Change the state of the work panel .
10200	Register a work panel .
10201	Updates the component flags .
10202	Creates a new decimal type .
10203	Evaluates the given term .
10204	Optimize the given list of words .
10205	Compares two collections .
10206	Sends the request to the response .
10207	Handles the start tag .
10208	Renders a button .
10209	Reset the model state .
10210	Initialize the model .
10211	Returns the value of the given key .
10212	Returns the index of the given key .
10213	Sets the value at the specified index .
10214	Removes a value from the map .
10215	Removes the element at the given index .
10216	Checks if a property exists .
10217	Sets the specified property .
10218	Returns the value of the given property .
10219	Returns true if the given primitive type is a primitive type .
10220	Initialize the setters .
10221	Decide the decision tree .
10222	Initialize the decision tree .
10223	Unify the query .
10224	Returns true if two variables are equal .
10225	Unify the given term .
10226	Compiles the query .
10227	Find the maximum number of arguments in the clause .
10228	Allocate the query registers for the given query .
10229	Gathers the position and occurrences of the given clause .
10230	Display the compiled predicate .
10231	Display the compiled query .
10232	Puts an integer into a byte buffer .
10233	Converts a ByteBuffer into a String .
10234	Returns the label of the attribute .
10235	Sets the value of the given value .
10236	Reads a term .
10237	Checks if a class name is loaded .
10238	Returns true if the given class is a sub type of the given class .
10239	Returns true if the given class is a sub type of the given parent .
10240	Returns true if the given class is a subtype of the given class .
10241	Returns a class with the given name .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor .
10244	Calls the given method over the given method .
10245	Call a method on an object .
10246	Call static method .
10247	Returns the constructor for the given class .
10248	Finds the setters for the given property name .
10249	Create a new Queue .
10250	Creates a new Queue .
10251	Get the type from an object .
10252	Resets the state of the algorithm .
10253	Returns the current state of the goal .
10254	Creates a new IntRange instance .
10255	Add a supported TZ to the endpoint .
10256	Adds an alternate dimension to the table .
10257	Add a new dimension table .
10258	Find free variables for a given query .
10259	Find all free variables in the given query .
10260	Compare two objects .
10261	Write an object to a file .
10262	Reads a stream from the input stream .
10263	Creates a new search node .
10264	Generate the trace indentation .
10265	Allocate the arguments for a function .
10266	Returns true if the given variable is the last argument of the given function .
10267	Returns the biggest classification class for the given property .
10268	Determines whether the given property has the same classification .
10269	Selects the best property of the given model .
10270	Construct a Functor .
10271	Creates a new variable .
10272	Executes the action on the given action .
10273	Returns a list of elements .
10274	Sets the texture .
10275	Paint the image .
10276	Creates a buffered image .
10277	Creates a Graphics2D .
10278	Create a binary image .
10279	Creates a new SISurface .
10280	Sets the queue search algorithm .
10281	Searches for the search .
10282	Searches for the given start states .
10283	Main entry point .
10284	Creates a clause .
10285	Parse a list of tokens .
10286	Construct a Functor .
10287	Parse a list of arguments .
10288	Returns a list of arguments .
10289	Parse a variable .
10290	Parse an integer literal .
10291	Returns a double literal .
10292	Parse a string literal .
10293	Parses a directive .
10294	Encode an operator .
10295	Initialize builtIns .
10296	Consume a token .
10297	Check if the token is consumed .
10298	Bind to the thread session .
10299	Rollback the transaction .
10300	Collects an iterator over the given iterator .
10301	Reserve a call point .
10302	Converts the given time to milliseconds .
10303	Convert ticks to years .
10304	Returns the ticks with the given hours .
10305	Calculates the ticks of the given ticks .
10306	Returns the ticks with the given number of seconds .
10307	Returns the ticks with the given year .
10308	Returns the number of ticks in the given month .
10309	Returns the ticks with the given date .
10310	Returns the millis start of the given year .
10311	Returns the month of a given year .
10312	Reads a byte array .
10313	Apply an entry to the given entry .
10314	Returns the entry for the given key .
10315	Cuckles the given entry .
10316	Rebuild the hash table .
10317	Saves the work panel .
10318	Sets the next available availability .
10319	Sets the previous value of this property .
10320	Sets whether or not the user has finished .
10321	Returns a WAMResolver instance .
10322	Returns an iterator over the set of variables .
10323	Calculates the expected value of the expected value .
10324	Calculates the probability for the given counts .
10325	Sets the ticks .
10326	Performs the action forward .
10327	Creates a new URL .
10328	Returns information about the request .
10329	Returns the list of headers .
10330	Get all cookies .
10331	Get the parameters of the request .
10332	Get the request scope .
10333	Get page scope .
10334	Returns the current session scope .
10335	Returns the application scope .
10336	Gets the user principal .
10337	Do the start of the request .
10338	Convert a Map to HTML table
10339	Searches for the given search state .
10340	Sets the current screen state .
10341	Recursively walk the given term .
10342	Compare two objects .
10343	Updates the registered registers .
10344	Notifies all listeners .
10345	Removes the given clause .
10346	Returns true if the given context is top level .
10347	Returns an array containing the elements of this element .
10348	Sets the arguments .
10349	Gets the fixity .
10350	Determines if the operator is in a fix .
10351	Returns the priority of the given operator .
10352	Updates the state of the current state .
10353	Register a workflow controller .
10354	Returns an EnumAttributeFactory for the given class .
10355	Creates a component factory .
10356	Returns the storage cell for the given variable .
10357	Returns true if the cell is bound to this cell .
10358	Sets the column attribute .
10359	Sets the row attribute .
10360	Returns the column attribute set .
10361	Returns the row attribute set .
10362	Internal method for insertion .
10363	Creates a new TimeRange instance .
10364	Creates a new StringPatternType instance .
10365	Returns true if the given value matches the given value .
10366	Creates the initial context .
10367	Updates the layout .
10368	Gets the value of this variable .
10369	Find the goal path for the goal .
10370	Join two paths .
10371	Cache the block for the given block .
10372	Get the properties of a resource .
10373	Sets the rate rate .
10374	Read data from the source .
10375	Skips the specified number of bytes .
10376	Gathers all disjunctions from a disjunction .
10377	Get int from bytes .
10378	Writes an int to a byte array .
10379	Write a 24 bit integer to a byte array .
10380	Get the 24 bit integer from a byte array .
10381	Get a short from a byte array .
10382	Writes a short value to a byte array .
10383	Get the child state for the given operator .
10384	Returns an iterator over all nodes in the tree .
10385	Returns the id of the attribute .
10386	Returns the label of the attribute .
10387	Sets the value of the attribute .
10388	Converts a string to an array .
10389	Converts an array to a string .
10390	Converts name to camelCase .
10391	Convert a string to a string .
10392	Returns the current configuration .
10393	List all handlers .
10394	Resolve the given function name .
10395	Sets the code for the given function name .
10396	Returns true if this attribute is subcategory .
10397	Returns the id of the attribute .
10398	Returns the value at the given level .
10399	Get the last value .
10400	Writes the path to the output stream .
10401	Reads an object from an object .
10402	Compute the Huzzle Huzzle .
10403	Modify the given c .
10404	Add an error message .
10405	Handle errors .
10406	Write a string to the output stream .
10407	Decodes the decision tree .
10408	Compares two elements .
10409	Returns an iterator over the remote connection .
10410	Returns the log base of the given value .
10411	Convert a value to a log base .
10412	Convert a value to a log base .
10413	Convert a integer value to a log base .
10414	Convert a long value to an integer .
10415	Convert a long value to an integer .
10416	Returns the number of characters in the given integer .
10417	Returns the integer count of the given value .
10418	Returns the number of characters in the given integer .
10419	Sets the head .
10420	Emits the list of instructions .
10421	Sets the current screen .
10422	Evaluates the given T .
10423	Returns the value of a property .
10424	Returns the properties of the given key .
10425	Gets the iterator iterator .
10426	Creates an array of array properties .
10427	Set the throttle rate .
10428	Evaluates the given number .
10429	Find the properties from the system .
10430	Get the properties from the system .
10431	Get properties from the classpath .
10432	Get the properties from the CWD file .
10433	Handles the given function .
10434	Get the value of this variable .
10435	Sets the substitution for the given term .
10436	Creates a new Queue .
10437	Clean up the connection .
10438	Appends an event to the server .
10439	Start the connector .
10440	Initialize the printers .
10441	Commits the transaction .
10442	Rollback the transaction .
10443	Request a write operation .
10444	Adds a cached operation to the cache .
10445	Acquire a global write lock .
10446	Release the global write lock .
10447	Ensures that this transaction has access to this transaction .
10448	Checks if the rule set is inside the ruleSet .
10449	Adds an element to the queue .
10450	Returns the next element in the queue .
10451	Put an element into the queue .
10452	Inserts an element into the queue .
10453	Returns the next object .
10454	Returns true if the property is a boolean .
10455	Get the value of a property .
10456	Returns the value of the specified property .
10457	Call a mixin scope .
10458	Sets the VisitorVisitor .
10459	Backtrack the current state .
10460	Retrieves the code from the buffer .
10461	Extract the bindings from the query .
10462	Decode a heap .
10463	Captures all fields of the object .
10464	Restores an object from an object .
10465	Returns the value of the specified attribute .
10466	Adds an attribute to the map .
10467	Get all field names for a given class .
10468	Execute the command .
10469	Adds an element to the queue .
10470	Removes the next item from the list .
10471	Creates a search node .
10472	Creates a Queue .
10473	Creates a new TermWalker .
10474	Creates a new TermWalker .
10475	Creates a new TermWalker .
10476	Creates a new TermWalker .
10477	Creates a new TermWalker .
10478	Loads properties from input stream .
10479	Get properties from a file .
10480	Get properties from a URL .
10481	Get properties from a file .
10482	Computes the size of the grid .
10483	Initializes font metrics .
10484	Add a property change listener .
10485	Add a property change listener .
10486	Remove a property change listener .
10487	Fire a property change event .
10488	Create a new DoubleRangeType instance .
10489	Perform a fade event .
10490	Shows the horizontal bar .
10491	Shows the left bar pane .
10492	Shows the right bar pane .
10493	Sanitize radio controls .
10494	Waits until the given T .
10495	Waits until the given T .
10496	Execute the command .
10497	Appends the classpath to the command line .
10498	Creates a new DateRange instance .
10499	Print the introspection .
10500	Initializes the console reader .
10501	Evaluate the given sentence .
10502	Evaluate the query .
10503	Creates a multi - type MultiTypeData object .
10504	Creates a MultiTypeData object from a byte array .
10505	Returns a MultiTypeData object for the given character .
10506	Returns a MultiTypeData object for the given ShortType .
10507	Returns a MultiTypeDataData object .
10508	Creates a multi - type MultiTypeData object .
10509	Returns a MultiTypeData object for a float .
10510	Creates a MultiTypeDataData object .
10511	Converts a string into a MultiTypeData object .
10512	Returns a MultiTypeData object for the given object .
10513	Convert a MultiTypeData to an Object .
10514	Sets an attribute value .
10515	Clears the given key .
10516	Expand the given key .
10517	Inserts a character at the specified position .
10518	Compares two objects .
10519	Parses operators .
10520	Gets the operators matching the given name .
10521	Checks if the given candidate is valid .
10522	Creates a new search node .
10523	Returns a string with the specified padding .
10524	Returns the error message .
10525	Gets the options in the command line .
10526	Returns the usage of the command line .
10527	Add trailing properties to the properties .
10528	Add options to the properties map .
10529	Add a new option .
10530	Parses free arguments from the given properties .
10531	Checks if the argument is valid .
10532	Compare two iterators .
10533	Gets the list of options for this file .
10534	Gets the options for this command .
10535	Sets the stemmer .
10536	Get the actual stemmer .
10537	Returns the stem of a word .
10538	Main entry point .
10539	Create a new FloatRangeType instance .
10540	Reset the buffer .
10541	Returns a string representation of the environment variable .
10542	Returns a string representation of the choice frame .
10543	Call internal method .
10544	Returns the next stack frame frame .
10545	Backtrack .
10546	Triggers the trail .
10547	Uninds the tail of an array .
10548	Determines the tail of the trail .
10549	Unify two WAM instructions .
10550	Unify a constant .
10551	Print the position of a slot .
10552	Returns a random start state .
10553	Checks if the given state is solvable .
10554	Returns a new child state with the given operator .
10555	Iterate over all possible operators .
10556	Pretty print the board
10557	Swaps the tile at the given location .
10558	Swaps the tile .
10559	Converts a string to a list of characters .
10560	Convert a character list to a state .
10561	Converts a log record to a log message .
10562	Convert log level to log4j .
10563	Enqueue an element .
10564	Requeue an element .
10565	Increment the size of the given record .
10566	Decrement the size and count .
10567	Signals that the threshold exceeds the threshold threshold .
10568	Lists the names of the given name .
10569	Lists all bindings in the context .
10570	Add a property to the environment variable .
10571	Removes a property from the environment variable .
10572	Run GCTill .
10573	Creates a Literal .
10574	Resolve a mixin reference .
10575	Push a variable reference .
10576	Sets the height of a row .
10577	Update the max column width .
10578	Executes the action on the page .
10579	Creates a new node with the given successor .
10580	Executes the action forward .
10581	Substitute the builtin clause .
10582	Initialise the symbol table .
10583	Run the top level check .
10584	Convert a list of arguments to a string .
10585	Compares two numbers .
10586	Starts the running state .
10587	Terminate the running state .
10588	Terminates the running state .
10589	Adds an element to the list .
10590	Calculates the ceiling of the given n .
10591	Updates the minimum of the minimum node .
10592	Compare two nodes .
10593	Inserts the given node into the tree .
10594	Restart the cache .
10595	Returns a set of all elements of the given method .
10596	Gets all elements of the given method .
10597	Find all solutions in a collection .
10598	Returns the next element in sequence .
10599	Restores the values from an object .
10600	Returns the value of the given property .
10601	Adds a value to the map .
10602	Sets the value of a property .
10603	Captures the properties of the object .
10604	Removes an element from the list .
10605	Convert modifiers to string .
10606	Converts a string to an integer .
10607	Converts a string to a date .
10608	Checks if a string is a date .
10609	Checks if a string is a time .
10610	Checks if a string is a date time .
10611	Creates a TokenSource from a string .
10612	Creates a token source from a file .
10613	Creates a token source for the given input stream .
10614	Checks if the given instruction is constant .
10615	Checks if a variable is a valid variable .
10616	Checks if the given instruction is non - arg .
10617	Gets the children of this node .
10618	Returns the argument at the given index .
10619	Returns an iterator over the arguments .
10620	Returns a string representation of the arguments .
10621	Retrieve the summary of a summary .
10622	Retrieve a list of records from the database .
10623	Execute SQL query .
10624	Emits the code of the given code .
10625	Set basic type .
10626	Queries the input stream .
10627	Print a variable binding .
10628	Convert a set of solutions to a map .
10629	Run the stream .
10630	Reads a packet from the stream .
10631	Returns the random time .
10632	Gets the current UUID time .
10633	Update the trackInfo .
10634	Update playlist info .
10635	Render the music output .
10636	Handle a resource request .
10637	Handle an event request .
10638	Fire a sound request .
10639	Initialize the parser .
10640	Start the server .
10641	Shutdown the connection .
10642	Reset the parser .
10643	Parses the packet and processes it .
10644	Process a packet .
10645	Sets the cli option .
10646	Create a chat .
10647	Initialize the content manager .
10648	Reset the contents of a map .
10649	Sets the value of a property .
10650	Add a new PacketFilter .
10651	Process the request .
10652	Reset properties .
10653	Initialize the smack packet .
10654	Send a packet to the server .
10655	Returns the next packet .
10656	Open a stream .
10657	Returns a list of all the descriptors .
10658	Returns true if the given descriptor contains the given descriptor .
10659	Add a listener to the event lifecycle .
10660	Shutdown the executor .
10661	Checks if two files are equal .
10662	Clean a byte buffer .
10663	Checks if the entry is valid .
10664	Mask a null value .
10665	Checks if two objects are equal .
10666	Returns the entry for the given key .
10667	Resizes the given capacity .
10668	Put all keys in the map .
10669	Removes an entry from the map .
10670	Removes the entry for the given key .
10671	Removes an entry from the map .
10672	Adds a new entry to the bucket .
10673	Creates a delegate for the given keys .
10674	Convert a value to a string .
10675	Encodes a byte array into a hexadecimal string .
10676	Encode a base64 encoded string .
10677	Encodes a byte array into a base64 encoded string .
10678	Iterate over the given collection .
10679	Sets the track selector .
10680	Sets the progress bar .
10681	Sets the controller changeable controller .
10682	Sets the volume changeable controller .
10683	Broadcast available playlists .
10684	Handle command resources .
10685	Handle a volume .
10686	Handle jump .
10687	Handle a select track .
10688	Gets the thread cache .
10689	Gets the request cache .
10690	Get alt field name .
10691	Returns a copy of the given map .
10692	Returns the shard path for the given id .
10693	Adapts an object to a session .
10694	Safely invoke method .
10695	Deletes a content tree .
10696	Updates an entity with the specified properties .
10697	Sets the ping interval .
10698	Schedule ping server .
10699	Adds all options to the command line .
10700	Checks if the given option is present .
10701	Parse command line arguments .
10702	Print the help message .
10703	Parse command line arguments .
10704	Initialize the connection .
10705	Start the TLS server .
10706	Get the compression handler .
10707	Request stream compression .
10708	Start stream compression .
10709	Notify the connection listener .
10710	Notify all reconnections .
10711	Register a SASL mechanism .
10712	Returns a list of SASL mechanisms .
10713	Returns the output of the output plugin .
10714	Log a message .
10715	Log an error message .
10716	Logs a message to the output stream .
10717	Creates a new start event .
10718	Create a start event .
10719	Notify listeners .
10720	Checks if a resource is available .
10721	Checks if the given source ID contains the given source ID .
10722	Checks if the resource is available .
10723	Provides a list of resources for the given IDs .
10724	Gets the cached value for the given key .
10725	Get the cache key .
10726	Removes the cache from the cache .
10727	Put the given key into the cache .
10728	Gets the location map .
10729	Includes the given file .
10730	Include jar files .
10731	Add a SASL mechanism to the server .
10732	Add a set of SASL mechanisms .
10733	Creates the debug logger .
10734	Activate the post process .
10735	Register standard events .
10736	Register an event listener .
10737	Registers an event ID .
10738	Calls the given consumer .
10739	Unregisters an event .
10740	Checks if the given event is available .
10741	Creates a DSE session .
10742	Creates a player error .
10743	Start playing audio .
10744	Stop the player .
10745	Send a command to the player .
10746	Creates a new broadcast request .
10747	Creates a broadcast answer .
10748	Append the URL to the URL .
10749	Add a query parameter .
10750	Add a query parameter .
10751	Add a query parameter .
10752	Add a query parameter .
10753	Get Playlist from event model .
10754	Launch the launch action .
10755	Check if the local host is running .
10756	Check if a URL exists
10757	Displays the browser .
10758	Creates an image icon .
10759	Main entry point .
10760	Returns an array with the given values .
10761	Returns the JSON representation of this object .
10762	Gets the value at the specified index .
10763	Returns the value of the given key .
10764	Returns the value of the given value .
10765	Gets a double value .
10766	Returns the value of the given value .
10767	Create a command resource resource .
10768	Verify that the command is valid .
10769	Verify that the command is valid .
10770	Verifies that the command is valid .
10771	Execute a batch of statements .
10772	Returns all subclasses of the given class .
10773	Get all subclasses of a given FQCN .
10774	Searches for the given class .
10775	Search for classes in a directory .
10776	Searches for the given class .
10777	Returns a list of Resource objects .
10778	Returns the number of maps .
10779	Process a packet .
10780	Get volume from event model
10781	Returns an error response .
10782	Create an error response .
10783	Checks if the given event is target .
10784	Sets the login enabled .
10785	Decorates a set of objects .
10786	Sets the name of the roster .
10787	Updates the state .
10788	Gets the list of all roster groups .
10789	Appends a RSM element to the query element .
10790	Parse a RSM query .
10791	Filter the list of RSM response objects .
10792	Create a leave event .
10793	Reload the roster .
10794	Create a roster entry .
10795	Returns all roster entries .
10796	Returns the presence of the given user with the given resource .
10797	Sets offline presence .
10798	Fired event listeners .
10799	Sets the digest .
10800	Generate a resource for the given resource model .
10801	Creates a player request .
10802	Gets the time of the event .
10803	Registers a listener .
10804	Initialize the properties file .
10805	Reload properties .
10806	Parse a stream error .
10807	Parse mechanisms .
10808	Parse the compression methods .
10809	Parse a packet extension .
10810	Decodes a value from a string .
10811	Verify that the event is valid .
10812	Get the PlaybackState from a resource .
10813	Get the secret key .
10814	Checks if the given subdomain is allowed .
10815	Put a value into the cache .
10816	Returns the key set for this reference .
10817	Returns the values of this reference .
10818	Purges the given reference .
10819	Returns the entry for the given key .
10820	Computes the hash of an entry .
10821	Creates a new reference entry .
10822	Checks if the event model is present .
10823	Sets the presence of the view .
10824	Update the presence .
10825	Delivers a message .
10826	Generate a script .
10827	Initializes the output directory .
10828	Load properties from a file .
10829	Write a file to a file .
10830	Get the progress of the event model .
10831	Decorates a collection of objects .
10832	Discover a list of service addresses .
10833	Get the configuration .
10834	Gets the thread pool .
10835	Creates a StopMusic object .
10836	Verify that the event is valid .
10837	Returns a DSECluster .
10838	Add a connection listener .
10839	Add a packet listener .
10840	Add a packet listener .
10841	Fire the send listeners .
10842	Add a packet interceptor .
10843	Fire the interceptors .
10844	Converts a property name to a value .
10845	Connect to the server .
10846	Get current thread id
10847	Checks if the given node is valid .
10848	Returns the key for the given value .
10849	Gets the value at the given index .
10850	Checks if the given index is valid .
10851	Lookup the node at the given index .
10852	Compares two objects .
10853	Returns the least node at the given index .
10854	Gets the most recent node at the given index .
10855	Returns the next node for the given index .
10856	Returns the most recent node at the given index .
10857	Checks if the given node is valid .
10858	Copies the color to the given color .
10859	Returns true if the node is redefined .
10860	Returns true if the given node is blacklisted .
10861	Gets the parent of the given node .
10862	Returns the parent node of the given node .
10863	Gets the right child of the given node .
10864	Gets the left child of the given node .
10865	Rotates the node at the given index .
10866	Rotates the right node .
10867	Determines a redBlack node .
10868	Reduce the redBlack delete node .
10869	Checks if the given object is null .
10870	Insert a new value into the map .
10871	Checks if the given key exists .
10872	Returns true if the given value contains the given value .
10873	Gets the value for the given key .
10874	Removes a value from the cache .
10875	Clears the tree .
10876	Returns the set of keys by key .
10877	Returns a collection of values by key .
10878	Returns the set of entries in this tree .
10879	Copies all entries from the map .
10880	Delete expired entries .
10881	Cleans up the cache .
10882	Activates the trusted credentials .
10883	Get a player request .
10884	Initializes a new RosterStore .
10885	Open the server store .
10886	Scan range of addresses .
10887	Returns the subnet address of the given address .
10888	Export this object to a hash .
10889	Import a trackInfo from a hash map .
10890	Add all application classes .
10891	Execute an application .
10892	Print the list of classes .
10893	Print the usage information .
10894	Main entry point .
10895	Create a MuteEvent .
10896	Create a MuteEvent .
10897	Get the schema for the given schema name .
10898	Writes a list of lines to a file .
10899	Determine if the executable is executable .
10900	Adds an option .
10901	Gets the schema fields .
10902	Gets a field by name .
10903	Returns the package name .
10904	Maps the content to the given base .
10905	Create an event listener .
10906	Sets the state of this iteration .
10907	Iterate over the given collection .
10908	Iterate over the iterator .
10909	Get track info from event model .
10910	Export the data as a Map .
10911	Import a resource model .
10912	Returns a BufferedImage with the given lines .
10913	Get image from url
10914	Get a JSONResult from a URL .
10915	Reverse the given map .
10916	Compute the multiplication matrix .
10917	Starts the daemon .
10918	Removes the object from the pool .
10919	Creates a stopped event .
10920	Get the current track .
10921	Update a new playlist .
10922	Shuffle the playlist .
10923	Verify that the capabilities are valid .
10924	Export the data from the queue .
10925	Escape a string .
10926	Send a challenge .
10927	Returns the JSON representation of this object .
10928	Runs the queue .
10929	Handles the event .
10930	Join all queues .
10931	Sets a property .
10932	Remove a property .
10933	Add a principal .
10934	Remove a principal .
10935	Called when the root window is closed .
10936	Ensures that the user has been recorded .
10937	Called when the event is fired .
10938	Returns true if the resource model is permanent .
10939	Sets the name of the roster .
10940	Returns true if the given key contains the given key .
10941	Checks if the given value contains the given value .
10942	Adds a value to the map .
10943	Clears the hash .
10944	Returns the hash of the given key .
10945	Checks if two keys are equal .
10946	Checks if two values are equal .
10947	Updates the capacity of the heap .
10948	Calculates the new capacity for the given capacity .
10949	Creates an iterator that returns an iterator over the entries .
10950	Loads the data from a stream .
10951	Register the module .
10952	Initializes the addon .
10953	Notifies that the connection has been failed .
10954	Notify that the connection has been reconnected .
