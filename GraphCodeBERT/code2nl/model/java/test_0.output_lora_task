0	Copies the stream to the specified sink .
1	Reads the contents of the stream .
2	Reads lines from the stream .
3	Reads data from the buffer .
4	Creates a new char buffer .
5	Reads more characters .
6	Start draining .
7	Converts an iterable to an array .
8	Returns true if the iterable is empty .
9	Creates a new Iterable .
10	Returns an iterator over the given elements .
11	Concatenates an iterable into an iterable .
12	Clear all elements .
13	Write bytes to the stream .
14	Parse a cache builder .
15	Creates a cache builder .
16	Creates a new Joiner .
17	Creates an ImmutableIntArray .
18	Returns an ImmutableIntArray .
19	Reads the input stream .
20	Read bytes from the input stream .
21	Write a map to a stream .
22	Write a Multiset .
23	Get a field setter for the given field name .
24	Start the stopwatch .
25	Adds an element to the collection .
26	Resizes the size of the given size .
27	Converts a byte array to an InetAddress .
28	Compress an array of zero zeros .
29	Convert hextets to IPv6 string
30	Create an InetAddress from a URI string .
31	Checks if the given IPv6 address is a valid IPv4 address .
32	Converts an IPv4 address to an IPv4 address .
33	Checks if the IP address is a TeredAddress .
34	Checks if the given IP address is at the given IP address .
35	Returns the IATAP IP address for the given IP address .
36	Returns the embedded IP address for the given IP address .
37	Checks if the given string is a mapped IP address .
38	Decrement the given address .
39	Creates a new BufferedReader .
40	Writes a byte array to a file .
41	Copies the given file to the given output stream .
42	Copies a file to a destination .
43	Touch a file .
44	Reads the first line of the given file .
45	Creates a builder with expected size .
46	Force the given key .
47	Creates a new MinMaxPriorityQueue .
48	Calculates the capacity of the queue .
49	Compute the Fmix code .
50	Creates a new element order .
51	Enter the lock .
52	Try to enter a lock .
53	Enter a Guard .
54	Enter a Guard .
55	Enter a Guard .
56	Checks if the Guard is locked .
57	Enter a Guard .
58	Checks if the Guard is interrupted .
59	Try to enter a Guard .
60	Waits for a Guard .
61	Wait until the Guard is interrupted .
62	Waits until the given guard is interrupted .
63	Gets the wait queue length .
64	Signal the waiter .
65	Signal all Guarders .
66	Begin the waiter for the Guard .
67	Ends the waiter .
68	Waits until the given number is satisfied .
69	Shutdown the executor .
70	Write a character sequence to the stream .
71	Execute all listeners .
72	Loads a 64 - bit 64 bit integer from a byte array .
73	Store a 64 - bit value at the specified offset .
74	Loads a 32 bit integer from a byte array .
75	Create a media type .
76	Parse a media type .
77	Return the type of the superclass .
78	Removes all elements from the given iterator .
79	Escape a string .
80	Returns a copy of the buffer .
81	Sets the concurrency level .
82	Builds a local cache .
83	Initializes the array of objects .
84	Adds a value to the distribution .
85	Calculates the new mean of the given value .
86	Rebuild hash table .
87	Returns the size of the given set size .
88	Creates a new immutable table .
89	Creates a new immutable table .
90	Returns a copy of the given table .
91	Returns the identity converter .
92	Creates a RegularImmutableTable for the given cell list .
93	Creates a new ImmutableMultiset .
94	Creates a new builder .
95	Removes occurrences of occurrences of the given occurrences .
96	Creates a new traversal of the given root node .
97	Creates a StringBuilder for the given size .
98	Injects the invariant of the given context .
99	Sets the map .
100	Removes all values from the map .
101	Concatenates an iterable of inputs .
102	Creates a FluentIterable .
103	Converts the delegate to an array .
104	Creates a new ImmutableMultimap .
105	Returns an immutable collection of entries .
106	Count the number of skipped bytes .
107	Reads the contents of the stream .
108	Computes the hash of this object .
109	Checks if the content of this ByteSource is equal .
110	Creates a new immutable range map .
111	Creates a new ImmutableRangeMap .
112	Creates a concatenated hash function .
113	Creates a new immutable set .
114	Set the expected node count .
115	Creates a lexicographical ordering .
116	Start the finalizer .
117	Creates a new immutable map .
118	Creates a new immutable map .
119	Creates a new ImmutableMap .
120	Creates a copy of a sorted map .
121	Computes the weak length of the weak hash .
122	Checks the state of the service .
123	List all files in a directory .
124	Returns true if the file is a directory .
125	Checks if two paths are equal .
126	Touch the given path .
127	Gets the parent path .
128	Checks if the given path is insecure .
129	Throw an exception .
130	Rehash the given hash .
131	Returns the segment for the given hash .
132	Creates an ImmutableList from the given list .
133	Converts a range into a new range .
134	Unregister a listener .
135	Gets the subscribers of an event .
136	Find all methods in the given listener .
137	Returns a copy of the given elements .
138	Returns an immutable list of elements .
139	Returns an immutable list of elements .
140	Creates a builder with expected size .
141	Concatenates two arrays .
142	Converts a collection into an array .
143	Checks if an element is not null .
144	Gets the Java LLA language .
145	Normalize wildcard type .
146	Returns an immutable list of elements .
147	Creates a builder with expected size .
148	Returns an immutable set of entries .
149	Finish a line .
150	Creates a new EntryTransformer .
151	Transform an entry into a MapEntry .
152	Converts an entry to an entry .
153	Returns the index map for the given list .
154	Returns a string representation of the pending future .
155	Update the buffer .
156	Creates a new immutable set from the given delegate .
157	Creates a new ImmutableSet .
158	Returns the sum of the values in the map .
159	Loads the finalizer .
160	Dispatch all listeners .
161	Copies the given URL from the given URL .
162	Post an event .
163	Set the concurrency level .
164	Sets the delegate map .
165	Returns a copy of this row .
166	Execute a task .
167	Transform a table into a table .
168	Creates a new TreeMultiset .
169	Adds the causal chain to the chain .
170	Expire after write after write .
171	Sets the priority .
172	Creates a host and port and port and port .
173	Creates a HostAndPort from a host .
174	Creates a HostAndPort from a string .
175	Gets the host and port and port .
176	Creates a new range with the given comparator .
177	Returns the reverse range .
178	Creates an ImmutableSet from the given delegate .
179	Creates a new ImmutableTypeMap .
180	Called when a lock is acquired .
181	Returns the subset of the given range .
182	Make immutable map entry .
183	Make immutable map entry .
184	Wraps a UnicodeEscaper .
185	Adds an entry to the distribution .
186	Creates a new ImmutableBiMap .
187	Creates a copy of an iterable .
188	Creates an identity function .
189	Creates a new PredicateFunction .
190	Unset the value of this property .
191	Checks if the entry is expired .
192	Reserve and return the wait length .
193	Returns the code point at the given index .
194	Ensures that the map has been reached .
195	Inserts an entry in the table .
196	Inserts an entry in the table .
197	Deletes the given entry from the table .
198	Deletes the given entry from the table .
199	Remove an entry from the table .
200	Removes an entry from the given entry hash .
201	Removes the value of the given entry .
202	Set the expected node count .
203	Set the expected edge count .
204	Returns the SQL statement with the given parameters .
205	Sets a parameter value .
206	Converts an object to a byte array .
207	Converts a byte array to an object .
208	Lock data line .
209	Saves an undo log .
210	Creates a RedisRedis template for the given Redis connection factory .
211	Returns the application map string .
212	Locate the resource path .
213	Creates a ConnectionInformation instance .
214	Map a throwable to a specific exception
215	Checks that the given method is not visible .
216	Get the default event bus .
217	Subscribes a subscriber .
218	Unsubscribe by event type
219	Unregister a subscriber .
220	Post a single event .
221	Returns the sticky event .
222	Removes a sticky event .
223	Remove a sticky event .
224	Lookup all event types for the given class .
225	Add interfaces to the list of interfaces .
226	Adds a subscriber to the event bus .
227	Attach to the Activity .
228	Prepares the error fragment .
229	Returns the title for the given exception .
230	Returns the message for the given exception .
231	Determine if the queue is complete .
232	Returns the value of the read .
233	Returns the element at the specified index .
234	OnErrorResume is executed .
235	Repeats the given number of elements .
236	Convert a supplier to a Mono .
237	Returns the value of the given sequence .
238	Returns a QueueSubscription .
239	Called when an error occurs .
240	Creates a new instance of the given instance .
241	Creates a scalar subscription .
242	Creates a new MonoIgnore from the given Publisher .
243	Creates a new wait strategy .
244	Creates a new Mono with the given Mono .
245	Returns a Mono that is empty .
246	Returns the first occurrence of this Mono .
247	Called when an error occurs .
248	Gets the map of listeners .
249	Creates a new MonoDelayUntilGenerator .
250	Drain the maximum value of a queue .
251	Try to subscribe a subscription to the given source .
252	Convert this FluxFlux to a UUID .
253	Creates a parallel collection with the given supplier .
254	Concatenate a map of values .
255	Execute a signal .
256	Perform a signal on a signal .
257	Synchronously executes a function on a signal .
258	Perform a signal on a request .
259	Convenience method to create a parallel map .
260	Creates a new Flux .
261	Validates all subscribers .
262	Concatenate a map with a map of values .
263	Concatenate a map with a delay delay .
264	Terminate the given instance .
265	Log a signal .
266	Start the task download .
267	Pause all tasks .
268	Get the size of the download .
269	Unbind service .
270	Sets the maximum number of connections to this file .
271	Pause all tasks .
272	Start the download task .
273	Tries to remove duplicate tasks from the list .
274	Add a task to the list .
275	Pause the queue .
276	Resume the queue .
277	Checks if the response is acceptable .
278	Returns the number of bytes for the given connection .
279	Sets the animated animation .
280	Sets the elevation of the light .
281	Sets the color of the label .
282	Add configuration properties .
283	Add model class comment .
284	Add an enum comment .
285	Add a getter comment .
286	Adds a general method comment .
287	Adds a comment .
288	Returns the fully qualified name of the class .
289	Get the select key .
290	Create a new package resource table .
291	Create a new package resource table .
292	Add missing attributes to the resource table .
293	Set the WIFI .
294	Add the minimum screen width to the qualifiers .
295	Instrument a native method .
296	Rewrite method body .
297	Returns true if the given method is a valid calendar .
298	Make public access to the class .
299	Make sure that the method is public .
300	Make sure the method is private .
301	Sets the traversal after the node .
302	Sets the traversal of the traversal .
303	Add a child node .
304	Push the default value to the stack .
305	Returns the mode of the given path .
306	Setup the activity controller .
307	Change the configuration .
308	Creates a new Activity .
309	Sets the phone state .
310	Expect a log message .
311	Returns whether the intent is exported .
312	Get the end point of the shape
313	Gets the point at the given point .
314	Creates a ResTable_config from the buffer .
315	Computes the difference between two resets .
316	Determines if the user is default .
317	Returns the bundle restrictions .
318	Add a user profile .
319	Add a user .
320	Connect to the socket .
321	Recursively intercepts a virtual method .
322	Adds the mapping to the map .
323	Add a mapping to the map .
324	Grant permissions for a user .
325	Denies the permissions for a user .
326	Selects a list of Sdks from the given configuration .
327	Get file from zip
328	Get the next request .
329	Add a HTTP response rule .
330	Add a HTTP response rule .
331	Stop the stream .
332	Add a HTTP response rule .
333	Add a Bluetooth device to the device .
334	Sets the thread priority .
335	Get the thread priority .
336	Returns the index of the number of bits of the specified number .
337	Sets the mode of the device .
338	Converts a string value to an integer .
339	Returns the type of a color .
340	Parse a float attribute .
341	Create an ImageDecoder .
342	Creates a new ImageDecoder .
343	Click menu item .
344	Call onActivityResult .
345	Start the lock task .
346	Stop the lock task .
347	Add a runnable to the queue .
348	Add a runnable to the queue .
349	Remove a scheduled runnable .
350	Advances the current runnable to the next runnable .
351	Appends the given amount to the current time .
352	Advances the next task to the next time .
353	Runs a scheduled task .
354	Bind service to service .
355	Sets the current time .
356	Returns true if the queue is idle .
357	Reset all messages .
358	Builds a Activity controller .
359	Builds a Activity controller .
360	Setup the activity .
361	Build a FragmentController .
362	Sends the given text to the chat .
363	Get the display size .
364	Gets the zip file for the given jar file .
365	Get all log items for a given tag .
366	Get all manifest manifests .
367	Returns the broadcast receiver for the given class name .
368	Deletes a notification channel .
369	Returns the Java version of the Java version .
370	Transforms a matrix .
371	Gets the value for the given key .
372	Load a resource bag .
373	Post a runnable .
374	Adds a runnable to the queue .
375	Add an activity if not present .
376	Add a service .
377	Add a receiver to the receiver .
378	Add a provider to the provider .
379	Add a new activity .
380	Add a service .
381	Add a receiver to the list of receivers .
382	Add a provider .
383	Removes a component from a component .
384	Remove a service .
385	Removes a provider from the provider .
386	Remove a receiver from a component .
387	Sets the resolver for the given intent .
388	Add the resolve info for the intent .
389	Add a package .
390	Add an intent filter to the activity .
391	Add an intent filter to the service .
392	Add an intent filter to the receiver .
393	Add an intent filter to the provider .
394	Find the parent script for the given locale .
395	Finds all ancestors in the given script .
396	Parses a package .
397	Returns the intent for the given activity class .
398	Verify that the given resTableType is valid .
399	Finds all the libraries in the project .
400	Gets the name of the organization .
401	Sets the permitted accessibility services .
402	Sets the permitted input methods .
403	Activate a reset token .
404	Returns a set of all the resources in the package group .
405	Gets the set of locales .
406	Open an asset .
407	Adds a list of packages to the service .
408	Runs the given runnable .
409	Execute the given Looperable .
410	Read a Parcelable object .
411	Write a byte array to the object .
412	Write a byte array to the specified buffer .
413	Serializes this object into a byte array .
414	Set the position of the data position .
415	Checks that the given item is consistent .
416	Returns the value of the next element .
417	Reads next item .
418	Reads a value from the data .
419	Reads zeros .
420	Reads a primitive .
421	Write an item to the buffer .
422	Reads bytes from input stream .
423	Get the native object id .
424	Returns the native object associated with a native object .
425	Call this method .
426	Sets the default network active .
427	Play a sound .
428	Load a sound .
429	Recursively reconstruct the widget view .
430	Creates a new widgets .
431	Invokes the SeekCompleteListener .
432	Invoke the listener .
433	Invokes an error listener .
434	Get the default display .
435	Sets the density of this object .
436	Sets the xdpi value .
437	Sets the YDpi value .
438	Sets the name of this object .
439	Sets the flags of this object .
440	Sets the width of the screen .
441	Sets the height of the screen .
442	Sets the real width of this object .
443	Sets the real height of this object .
444	Sets the rotation .
445	Sets the state of this object .
446	Release the connection .
447	Establish a route .
448	Returns the common super class for the given type .
449	Qualify the attribute name .
450	Navigate to the next node .
451	Checks if the given name is a supported feature .
452	Add an asset .
453	Returns a string representation of the resource qualifier .
454	Sets the specified qualifiers .
455	Builds a string from a character array .
456	Loads a service .
457	Loads a service .
458	Loads a service from the system .
459	Checks if the given device is granted to the given package .
460	Revokes the given package .
461	Add a USB device .
462	Remove a USB device .
463	Add a port .
464	Open a USB accessory .
465	Add data to the dropBoxManager .
466	Creates a media item .
467	Creates a deep proxy .
468	Returns the field of the given object .
469	Call an instance of the specified method .
470	Call an instance of the specified method .
471	Call static method .
472	Call static method .
473	Creates a new instance of the given class .
474	Call constructor .
475	Start the ring .
476	Get a typeface from the request .
477	Get the package resource table .
478	Dump the view .
479	Returns the inner text of the view .
480	Returns a list of all available wrappers .
481	Post intent .
482	Convert RGB color to HSV
483	Begin a new section .
484	Ends the trace .
485	Returns the provider for the given key .
486	Creates a new file object .
487	Run all tasks .
488	Run next task .
489	Request audio focus .
490	Abort an audio focus request .
491	Starts the native process .
492	Gets a byte buffer .
493	Queue input buffer .
494	Release output buffer .
495	Simulate time change .
496	Convert meta data to a bundle .
497	Convert SQL string to unicode .
498	Creates a packageInfo object .
499	Determines if the given package name is granted .
500	Applies the flags to the given componentInfo .
501	Returns the index of the requested permission .
502	Gets the badge icon .
503	Checks if the user has a profile owner .
504	Extract the code point from a string .
505	Returns an instance of reflection .
506	Returns the status of the given account .
507	Returns a collection of content observers for the given URI .
508	Add a display .
509	Change the display configuration .
510	Fixes the trace path .
511	Find the next value for the given value .
512	Reset calendar .
513	Parse the Cron expression .
514	Returns the index of the given argument .
515	Add an instruction to the stack .
516	Store an instruction in the given type .
517	Loads a number of arguments .
518	Loads the argument types .
519	Loads a local variable .
520	Stores a local type .
521	Swap two types .
522	Box a type .
523	Unbox a type .
524	If the given type is equal to the given type .
525	Visits a field in the visitor .
526	Get a static field .
527	Add a static field to the specified type .
528	Get a field .
529	Add a field to the given type .
530	Invokes an instruction .
531	Invokes a virtual method .
532	Invokes the constructor .
533	Invokes a static method .
534	Invokes an interface .
535	Throw an exception .
536	Checks if the type is cast .
537	Visit the first frame .
538	Initialize a frame .
539	Creates a new method item .
540	Creates a new item .
541	Creates a new item .
542	Creates a new name type item .
543	Gets the item at the given key .
544	Puts a number into the pool .
545	Puts two bytes into the pool .
546	Visit an enum .
547	Visits an annotation .
548	Calculates the position of the vertices in the given position .
549	Creates a JPEG image .
550	Visit a parameter .
551	Visits an annotation .
552	Visits a parameter annotation .
553	Visits a type in the visitor .
554	Visits a field in the visitor .
555	Visits a method in the visitor .
556	Visits a table switch .
557	Visits a LookupSwitch switch statement .
558	Visits a multi - op array .
559	Visits a local variable annotation .
560	Visits a line number .
561	Reads the frame type .
562	Set the initial state of the class .
563	Get the type of a local variable .
564	Sets the type of a local variable .
565	Push the type to the class writer .
566	Returns the type of a class .
567	Removes elements from the stack .
568	Removes a type from a description .
569	Initializes a variable .
570	Initialize the type .
571	Visits a source .
572	Visits the outer class .
573	Visits an annotation .
574	Visits a type annotation .
575	Extracts an int from the given range .
576	Get an object type .
577	Get the type of a method descriptor .
578	Returns the type of the return type .
579	Gets the number of arguments from a description .
580	Returns the type of the given buffer .
581	Generate descriptor .
582	Get the descriptor of a class .
583	Gets the opcode .
584	Put a byte into the buffer .
585	Creates a new byte vector .
586	Add a short to the buffer .
587	Creates a new byte vector .
588	Add an int to the buffer .
589	Add a long to the buffer .
590	Convert a string to a byte array .
591	Put a byte array into the buffer .
592	Increases the size of the buffer .
593	Get column name .
594	Sets the column mapping .
595	Returns the value of a property .
596	Initialize the configuration .
597	Returns the IOCase for the given name .
598	Convert a string to lowercase .
599	Returns the current value of the given change .
600	Sets the value of the property .
601	Creates an array with the given arguments .
602	Creates a set of null values .
603	Gets the global parameter .
604	Attaches the given columns to the given statement .
605	Get absolute path .
606	Parses the given checksum value .
607	Computes the MD5 checksum .
608	Get the class loader for the project .
609	Print settings .
610	Parse properties file .
611	Checks if the field is a valid field value .
612	Write the next line .
613	Determines if the given line contains special characters .
614	Processes a line .
615	Process a character .
616	Executes the update .
617	Returns the value of the given value .
618	Returns the value of the property .
619	Set the value of the property .
620	Adds aliases to the configuration .
621	Set the default value .
622	Generate a SQL statement .
623	Returns true if the column should be computed .
624	Adds a tag to the database .
625	Lists all locks .
626	Returns a list of all changes in the database .
627	Clears all checksums .
628	Parses a CSV file .
629	Processes a line .
630	Get property editor editor .
631	Loads the classes in a jar file .
632	Add a class to the class loader .
633	Returns the type of the given property .
634	Checks if an object has a property .
635	Set property value .
636	Returns the method for the given property .
637	Returns the method for the given property .
638	Get the methods of the object .
639	Reduce a collection of objects .
640	Gets the outgoing foreign keys .
641	Creates a CDI config .
642	Acquire the lock .
643	Get the simple path for a resource .
644	Checks if the given filter is filtered by the given filter .
645	Returns the value for the given column name .
646	Initialize the configuration .
647	Initializes the database .
648	Checks if two objects are equal .
649	Set the validation option if it is valid .
650	Adds a type to the database .
651	This method is called when the property is set .
652	Checks if the given string is trimmed .
653	Converts the given value to an object .
654	Main entry point .
655	Parses a command line argument .
656	Checks if a command is a command .
657	Checks if a command is a command .
658	Extracts an entry from a jar file .
659	Parse the default properties file .
660	Fixes the command line arguments .
661	Checks that the command is setup .
662	Check for missing command parameters .
663	Check for malformed command parameters .
664	Parse properties file .
665	Print help message .
666	Print the help message .
667	Parse command line arguments .
668	Gets the value of a command parameter .
669	Reads an Integer from a String .
670	Returns true if the expression matches the given expression .
671	Checks if the given instance is present in the database .
672	Creates a snapshot of the given database .
673	Create a snapshot .
674	Generates a list of child tables .
675	Clean the directory .
676	Split a multi line into a multi - line array .
677	Pad a string .
678	Returns a string with the given length .
679	Generates a random identifier
680	Removes the trailing whitespace from the given string .
681	Concatenates a string to a string .
682	Gets the catalog names for the given database .
683	Appends a clause to the list .
684	Appends a new clause to the list .
685	Prepend a new clause .
686	Inserts a new string before the given key .
687	Inserts a new string at the given key .
688	Returns the value of the given key .
689	Returns the subclause of the given key .
690	Writes the changes to the output stream .
691	Returns a list of available databases .
692	Returns a list of all internal databases .
693	Validates that the database is valid .
694	Returns a database data type .
695	Converts an object to SQL string .
696	Checks if the string is a date time .
697	Returns true if the database is a boolean .
698	Gets the concatenation string .
699	Returns true if the statement is valid .
700	Adds an artifact to the given list .
701	Returns the field of the given class .
702	Gets the alternate paths .
703	Returns true if the context matches the given context .
704	Creates a new resource accessor .
705	Closes the database connection .
706	Append the next character to the next character .
707	Determines if the next character is escaped .
708	Determines if the next character is escaped .
709	Gets the children of this node .
710	Sets the value of this node .
711	Returns the value of the given type .
712	Gets a child node .
713	Returns the value of the given node .
714	Returns the value of the given node .
715	Close all streams .
716	Is autoIncrement?
717	Checks if the given path is compressed .
718	Get a column by name
719	Gets a singleton instance .
720	Adds a tag to the database .
721	Create a precondition .
722	Checks if the given value is now or not .
723	Returns the value of the given parameter .
724	Set whether or not the constraint is valid .
725	Generate SQL for unique constraints .
726	Get the set parameters for the given change .
727	Get the required parameters for the given database .
728	Convert a value to a string .
729	Gets the serializable fields .
730	Get full path .
731	Creates the index lookup .
732	Returns the index of a column .
733	Returns the descriptor for the given column .
734	Returns the field for the given column .
735	Returns the column name .
736	Returns the descriptor for the given name .
737	Find a field by its name .
738	Checks if the given name matches the given name .
739	Loads the descriptor map .
740	Get column name .
741	Sets the column mapping .
742	Returns the size of the parameter .
743	Returns true if the given column type is a default value .
744	Returns a list of all changes that have been run .
745	Escape an object name .
746	Sets the value of the value of the column .
747	Sets the value of the column value .
748	Sets the default value for this column .
749	Unregister a change .
750	Returns a sorted set of names that have been defined .
751	Creates a new change object .
752	Prompts for non - local database .
753	Get the default schema name .
754	Checks if the database is safe .
755	Filter the list of rollback operations .
756	Returns the maximum number of digits for the database .
757	Checks that the given string is valid .
758	Creates a new XML node .
759	Assert that the object is null .
760	Checks if the given database is a sybase product name .
761	Create a new SqlVisitor instance .
762	Returns the hostname of the local host .
763	Get the local host name .
764	Adds the given schema to the database .
765	Adds the schema to the given procedure .
766	Encode hexadecimal data .
767	Returns a list of all the schemas in the database .
768	Reads the next line from the stream .
769	Returns the next line .
770	Checks if the reader is closed .
771	Start polling .
772	Starts the cache .
773	Sets the application configuration .
774	Gets an int property .
775	Gets a dynamic property .
776	Get a boolean property .
777	Gets a float property .
778	Gets a dynamic property .
779	Load properties from table .
780	Get a dynamic property .
781	Updates all properties .
782	Add a callback .
783	Remove all callbacks .
784	Gets the HTTP VerbUriRegex property .
785	Loads properties from input stream .
786	Add a property .
787	Update properties .
788	Adds a property to the configuration .
789	Deletes a property .
790	Clears the map .
791	Returns a Properties object .
792	Initialize the configuration .
793	Adds a configuration at the specified index .
794	Removes a configuration from the container .
795	Removes a configuration from the container .
796	Gets all keys in the configuration .
797	Returns an iterator over all keys in the configuration .
798	Returns true if the given key contains the given key .
799	Gets a list of configuration properties .
800	Returns a list of strings for the given key .
801	Load the configuration from the given configuration file .
802	Load properties from configuration .
803	Load properties from the configuration .
804	Poll the configuration .
805	Returns the angle of the given location .
806	Returns the value of the given key .
807	Creates a cloud balance generator .
808	Returns the name of the getter property .
809	Checks if the method is a getter method .
810	Add a hard constraint match .
811	Add a medium constraint to the rule .
812	Adds a soft constraint to the rule .
813	Clean up the path .
814	Calculates the standard deviation of this asset class .
815	Checks if the problem is valid .
816	Gets the problem scale for the given solution .
817	Generate a task name .
818	Checks if the request context has a request timeout .
819	Returns true if the task timeout is applied .
820	Creates a task with timeout .
821	Builds the build task .
822	Get the build task .
823	Creates a new build task .
824	Writes the failed failure information .
825	Creates a single trace from a shallow trace .
826	Batchable task .
827	Gets the name of a batch .
828	Perform a harvest .
829	Creates a default config client config .
830	Creates a consumer with the given predecessor and propagates it .
831	Creates a FusionTask .
832	Sets the engine property .
833	Creates a promise .
834	Propagate result from source to dest .
835	Create a summary summary for the given ID .
836	Creates a summary of a person .
837	Creates a list of connected connections .
838	Add a side effect to the task .
839	Creates a timeout with the given time .
840	Find the next node with the given node .
841	Appends the stack trace to the stack trace .
842	Monitor the log .
843	Checks if the current time is running .
844	Create a new RetryableTask with the given name .
845	Wrap a task .
846	Retry the retry operation .
847	Runs the given context .
848	Convert an object to an exception .
849	Sets the rest client .
850	Acquire lock .
851	Release lock .
852	Attempt to acquire the given plan .
853	Get the NingHttpClient .
854	Initializes the async http client .
855	Convenience method to consume all characters from the buffer .
856	Checks that all objects are null .
857	Checks that the string is empty .
858	Parse a transformation string .
859	Get file list .
860	Finds a GridFSDB file .
861	Find all files in the database .
862	Remove a file .
863	Remove all files from the database .
864	Put a value into the map .
865	Returns the value at the specified key .
866	Creates a builder .
867	Returns the maximum time .
868	Returns a new MongoCompressor with the given key .
869	Get the name of the cluster .
870	Returns the master address .
871	Checks if the server is master .
872	Returns the maximum number of documents .
873	Put a key .
874	Applies the majority concern to the given transaction options .
875	Returns true if the value is ok
876	Returns the error message .
877	Sets the read annotations .
878	Gets the index names for the given indexes .
879	Generate index name .
880	Validate the MD5 file .
881	Returns the codec for the given BSON type .
882	Calculates the size of the batch .
883	Parses a string .
884	Decodes the given reader using the default context .
885	Checks if the current state is valid .
886	Applies the given reader to the given reader .
887	Write extra elements .
888	Converts this object to a byte array .
889	Puts the object into a byte buffer .
890	Returns a string representation of the object .
891	Returns the short description of the connection .
892	Creates a new DBObjectBuilder .
893	Push a key to the stack .
894	Adds a result to the collection .
895	Add an error result .
896	Add a write error result .
897	Add an error result .
898	Gets the error message .
899	Saves the next node to the next node .
900	Returns the next node of the next node .
901	Returns the successor of this node .
902	Returns the predecessor of this node .
903	Returns the next node .
904	Returns the predecessor of this node .
905	Appends an element to the next element .
906	Prepend the element to the predecessor .
907	Deletes the node .
908	Replace the element with the given new element .
909	Execute the lock .
910	Selects the cluster .
911	Creates a primary preference .
912	Creates a secondary read preference .
913	Creates a secondary preference .
914	Returns a new ReadPreference .
915	Creates a new TaggableReadPreferredReadableReadPreference .
916	Creates a secondary read preference .
917	Creates a secondary read preference .
918	Returns a new TaggableReadPreference with the given tags .
919	Creates a new TaggedPreferredReadableReadPreference .
920	Creates a new TaggableReadPreference from a list of tags .
921	Returns the read preference for the given name .
922	Creates a new TaggedReadableReadable read preference .
923	Creates a new TaggedReadableReadable read preference .
924	Reads bytes from the input stream .
925	Reads an int from the input stream .
926	Reads an int from the buffer .
927	Read an int from the buffer .
928	Reads a long from the input stream .
929	Gets the list of credentials .
930	Get a random server .
931	Creates a MongoClient .
932	Returns a copy of this object .
933	Creates a new class model builder .
934	Gets a collection by name .
935	Drops the database .
936	Gets the names of all collections .
937	Execute a command .
938	Execute a command .
939	Check if a collection exists .
940	Execute the given code .
941	Get the stats for the database .
942	Remove a user from the database .
943	Returns the read preference for the given command .
944	Gets the codec for the given class .
945	Inserts a document .
946	Create a new update request .
947	Find a single object by id .
948	Rename a collection .
949	Creates a MapReduce command .
950	Execute aggregate query .
951	Creates a new index .
952	Creates a new index .
953	Finds and deletes the given query .
954	Sets the decoder factory .
955	Sets the db encoder factory .
956	Returns the list of indexes .
957	Drop an index .
958	Drop an index .
959	Returns true if the command is capped .
960	Sets the internal class for the given path .
961	Returns the class for the given path .
962	Sets the value of a field .
963	Sets the value for the given field .
964	Renames a field .
965	Increment the value of a field .
966	Multiply a number .
967	Sets the minimum value for a field .
968	Creates a new update .
969	Adds a value to a set .
970	Add a new value to a set of values .
971	Creates a new update .
972	Push an array of values .
973	Creates a new update .
974	Creates a BSON document from the given filter .
975	Pull all values from the given field .
976	Write queryPrologue .
977	Increment the number of connections to the server .
978	Gets the ancestors of the given class .
979	Creates a new ReplaceOptions instance .
980	Decodes a string into a byte array .
981	Encodes a byte array .
982	Returns the server address .
983	Gets the replica set status .
984	Returns a list of all databases .
985	Executes the Fsync command .
986	Lock the database .
987	Unlock the lock .
988	Returns a BSON number .
989	Returns a new ConnectionId with the specified server value .
990	Computes the ancestors of the given class .
991	Returns the JSON representation of this object .
992	Execute a batch operation .
993	Returns the expiration after the expiration time .
994	Creates a new DBObject object .
995	Get the logical session timeout .
996	Gets all server descriptors .
997	Returns the server description for the given server address .
998	Returns a list of all registered servers .
999	Returns a list of server s servers .
1000	Returns a list of servers with the specified tag set .
1001	Returns a list of all registered servers .
1002	Returns a list of all servers in this server .
1003	Returns a list of servers that have the specified tag set .
1004	Returns the description of the server .
1005	Creates a new MongoCredential .
1006	Creates a new MongoCredential .
1007	Creates a new MongoCredential .
1008	Creates a new MongoCredentialProperty with the given key .
1009	Creates a new MongoCredential .
1010	Gets the mechanism property .
1011	Convert this stream to a byte array .
1012	Add an object serializer .
1013	Creates a new update request .
1014	Encode this message .
1015	Write messagePrologue .
1016	Adds a document .
1017	Adds a collection to the collection .
1018	Backpatch message length
1019	Creates a chunk from the file .
1020	Returns a copy of this DBCursor .
1021	Returns true if the cursor is next .
1022	Retrieves the next object .
1023	Returns a list of all elements in the collection .
1024	Get the first record from the database .
1025	Gets the read preference .
1026	Gets the read concern .
1027	Put a value in the current context .
1028	Put a DBRef .
1029	Returns a new BulkWriteResult instance .
1030	Get the socket address .
1031	Gets the list of socket addresses .
1032	Creates a BsonFilter .
1033	Creates a new BsonFilter .
1034	Creates a new BsonFilter .
1035	Gets the boolean value for the given field .
1036	Creates a new BsonFilter .
1037	Creates a BsonFilter with the given filters .
1038	Creates a BsonFilter .
1039	Creates a boolean filter .
1040	Creates a Bson document .
1041	Creates a BsonFilter .
1042	Creates a Bson document matching the given field name .
1043	Creates a bounding box for the given field .
1044	Creates a filter for the given field .
1045	Gets the geo center of the given field .
1046	Filter the query on the given point .
1047	Creates a new BsonFilter document .
1048	Returns the flags for the given string .
1049	Returns the regex for the given character .
1050	Convert flags to regex .
1051	Set the text version .
1052	Specifies the index of the sphere .
1053	Creates a copy of DBCollectionFindOptions .
1054	Converts the given value to a type .
1055	Encode the given document .
1056	Execute the given connection .
1057	Creates a new bulk update request .
1058	Returns a new bulk update request builder .
1059	Execute the operation on the database .
1060	Initializes the mongo library .
1061	Creates a new MongoClient instance .
1062	Closes the mongo library .
1063	Enable SNI .
1064	Returns the type of the given object .
1065	Convert a JSON object to a DB object .
1066	Returns the description of the cluster .
1067	Creates a new update result .
1068	Get the content type .
1069	Returns the list of aliases .
1070	Returns the first key in the document .
1071	Encodes the given value with the given value .
1072	Returns a BSON document .
1073	Compress a list of bytes .
1074	Returns the value of the given key .
1075	Returns the boolean value of the given key .
1076	Gets the object id .
1077	Returns the value of the given field .
1078	Converts a BSON object to a canonical representation .
1079	Get a MongoCredential instance .
1080	Create a new client session .
1081	Gets the WTimeout value for this request .
1082	Returns a BSON document .
1083	Checks if the journal is acknowledged .
1084	Creates a new WriteConcern .
1085	Creates a new WriteConcern .
1086	Creates a new WriteConcern .
1087	Creates a majority write concern .
1088	Inserts a document .
1089	Returns a BulkWriteRequestBuilder .
1090	Execute a bulk operation .
1091	Returns a copy of this object .
1092	Adds a geoHaystack index .
1093	Returns a list of index names .
1094	Returns the value of the given key .
1095	Returns the value of the given key .
1096	Returns the value of the given key .
1097	Returns the value of the given key .
1098	Gets the value of the given key .
1099	Gets the value of the given key .
1100	Gets the value of the given key .
1101	Gets a double value .
1102	Gets a boolean value .
1103	Returns the value of the given key .
1104	Gets the value of the given key .
1105	Returns the value of the given key .
1106	Gets an object id .
1107	Returns the value of the given key .
1108	Gets a regular expression .
1109	Writes the given operation to the socket .
1110	Converts an object to a BSON document .
1111	Checks if the given value is null .
1112	Checks whether the given state is true .
1113	Gets a property by name .
1114	Builds the class model .
1115	Get the update options .
1116	Get the wrapper for the given class .
1117	Gets the wrapper for the given class .
1118	Returns a UUID as a UUID .
1119	Converts a UUID to a UUID .
1120	Parses a String .
1121	Reads a hex string .
1122	Skip whitespace .
1123	Parse a string .
1124	Parse a number .
1125	Parse an exponent .
1126	Parse an array .
1127	Adds a single update operation .
1128	Creates a connection with the specified connection id .
1129	Creates a new WriteConcernResult instance .
1130	Returns a new WriteConcernResult instance .
1131	Returns the embedded value of the embedded document .
1132	Constructs a list of values from a key .
1133	Merges the given options into the default options .
1134	Releases an item from the pool .
1135	Gets the pool .
1136	Close the pool .
1137	Write the buffer to the output stream .
1138	Throws an exception if the method is not valid .
1139	Throw an exception if the given state is not valid .
1140	Verifies that the BSON type is valid .
1141	Verifies the name of the element .
1142	Checks if the given method is valid .
1143	Parses the given value .
1144	Returns the BigDecimal value as a BigDecimal value .
1145	Returns a byte array of bytes .
1146	Adds a hint to the query .
1147	Returns a BSON document .
1148	Writes the given file to the given file .
1149	Write the chunk to the output stream .
1150	Removes the file from the database .
1151	Sets the sort document .
1152	Sets the sort document .
1153	Gets the namespace .
1154	Returns the name of the namespace .
1155	Creates a new instance of ChangeStream .
1156	Creates a new builder .
1157	Reset the connection pool .
1158	Creates a copy of the options .
1159	Get the WriteConcern .
1160	Returns the user agent string .
1161	Populate the properties from the environment .
1162	Checks if the given node is a valid user group key .
1163	Converts a list of user groups to granted roles .
1164	Get service endpoint endpoint .
1165	Creates a new azureAuth token filter .
1166	Get the list of Todo items .
1167	Registers a path to the given path .
1168	Builds the aggregators .
1169	Generates a summary of the results .
1170	Register a new directory .
1171	Creates a new property .
1172	Returns the type of the given name .
1173	Add a watch event .
1174	Adds a callback to the handler .
1175	Create a new MicrometerRegistry .
1176	Sets the template engine .
1177	Add a form to the form .
1178	Add a basic authentication pattern .
1179	Resolves the given value .
1180	Returns the path for the given pattern .
1181	Defines the given type .
1182	Returns a YAML representation of this object .
1183	Returns the status of the status .
1184	Returns the status code .
1185	Set the status of the response .
1186	Sets the media type .
1187	Run the enhancer .
1188	Sets the media type .
1189	Gets a query parameter .
1190	Gets a form parameter .
1191	Gets a header parameter .
1192	Returns the response for the given status .
1193	Sets the configurationurer .
1194	Reads data from the buffer .
1195	Creates a reactive reactive entity .
1196	Creates a new reactor .
1197	Creates a new completion stage .
1198	Creates a new Kotlin entity .
1199	Sets the content of the XSSEscapeType .
1200	Sets the HTML for this XSSEscape .
1201	Sets the JSON encoding .
1202	Set the css string .
1203	Get the attributes of the given path .
1204	Computes the css attribute .
1205	Parses the given value .
1206	Writes the given sequence .
1207	Handle a request .
1208	Determine the model properties .
1209	Returns the last event id .
1210	Sends an event .
1211	Put a model to the view .
1212	Put values in the view .
1213	Creates a class loader .
1214	Returns the class loader for the given project directory .
1215	Add attributes to the route method .
1216	Add an attribute .
1217	Add a custom parameter .
1218	Returns the status of the given status code .
1219	Creates a new Jdbi3 instance .
1220	Rewrite SQL statement .
1221	Sends an asset .
1222	Creates a new connection with the given configuration .
1223	Creates a new instance with the given configurationurer .
1224	Adds a job with the given job .
1225	Creates a new job with the specified configuration .
1226	Shutdown all events .
1227	Creates a new Cassandra cluster .
1228	Creates a new instance with the given status .
1229	Adds a module .
1230	Unauthenticated provider .
1231	Creates a form with the given pattern .
1232	Parse the application .
1233	Scan the given type .
1234	Adds a swagger to the API .
1235	Sets swagger .
1236	Create a new raml .
1237	Set raml .
1238	Processes the given file and returns the result .
1239	Receives the result of the recepcao .
1240	Receives the result of a MDFEReceion .
1241	Receive the result of the Cteacacacao .
1242	Receives the result of a MDFEcereceEvent .
1243	Receives the result of the CTE consumer .
1244	Receives the result of a MDFE connec .
1245	Returns the soap envelope .
1246	Get the namespace namespaces .
1247	Receive the result of the nfefault
1248	getLoteAssignations from a lote
1249	Convenience method to enqueued enqueues
1250	Retrieve the status of a user .
1251	Called when a coroutine has been sent
1252	Cancel a cancela notification
1253	This method is used to get the informations for a given number of parameters .
1254	Consulta una una de una una de una de unaado de una de unaado de una de una de una de una de unaado de una de unaado de una de unaado de una de una de unaado de una de una de unaado de una de unaado de una de unaado de una de unaado de unaado de una de unaado de unaado de una de unaado de unaado de unaado de
1255	Receives the result of the recepcao .
1256	Receives the result of the result of the response .
1257	Gets the Assinatura .
1258	Receives the result of the recepcao event .
1259	Cancels a cancela notification .
1260	Called when a MDF is received .
1261	Receives the result of the result of the MDFERetry .
1262	Cancels a message .
1263	Ensures that the server has been created .
1264	Ensures that the event has been processed .
1265	Receive a MDF status response .
1266	Evaluate the consulta status of a given OID
1267	Computes the updated X uu .
1268	Calculates the cosine similarity between two vectors .
1269	Compute the solver .
1270	Deletes a directory .
1271	Loads an instance of the specified class .
1272	Publish additional model data .
1273	Open a custom tab .
1274	Get the package name for the given context .
1275	Determine if the intent is special .
1276	Loads the ride request .
1277	Open a custom tab .
1278	Validate the session configuration .
1279	Creates a new intent .
1280	Edit a configuration handler .
1281	Main entry point .
1282	Shutdown the Mesos driver .
1283	Evaluate a task request .
1284	Evaluate the given task request .
1285	Evaluate a task .
1286	Sets the auto scalar callback .
1287	Disable a VM .
1288	Disable a VM by VM ID .
1289	Enable a VM .
1290	Shutdown the server .
1291	Returns true if the given list contains the specified properties .
1292	Returns the demo file info for the given source .
1293	Parses a CDOT match .
1294	Read packet .
1295	Reads a varint32 value .
1296	Reads a fixed int32 value .
1297	Read the engine type .
1298	Adds a child tag to this container .
1299	Add children to container .
1300	If the given Optional is null then return null .
1301	Returns a string representation of the HTML tag .
1302	Sets an attribute .
1303	Sets an attribute .
1304	Add an attribute .
1305	Add classes to the tag .
1306	Compress JS code
1307	Parse the contents of a string .
1308	Parse the contents of a string .
1309	Handles the displayed menu items .
1310	Sets the left action icon .
1311	Sets the background color .
1312	Open the menu .
1313	Close menu .
1314	Inflate the overflow menu .
1315	Sets the search key .
1316	Sets whether the search should be displayed .
1317	Sets whether the search is focused .
1318	Update the suggestions section height .
1319	Calculates the height of the suggestions .
1320	Sets the callback callback .
1321	Returns the MD5 checksum of the given filename .
1322	Configure SSL client .
1323	Reads the given JsonReader .
1324	Returns the name of the type abstract .
1325	Include nested packages in a package .
1326	Returns an immutable representation of a type .
1327	Create a TypeAdapter .
1328	Creates a new ImmutableSet .
1329	Returns an iterator over the elements of this collection .
1330	Returns the cache key for the given value .
1331	Get the name of the element .
1332	Returns the name of the resource .
1333	Creates a Predicate .
1334	Creates a FluentFuture .
1335	Returns the immutable map .
1336	Returns a string representation of the given type .
1337	Returns the next token buffer .
1338	Close the pool .
1339	Executes the given script body .
1340	Set proxy settings .
1341	Sets the HTTP proxy configuration .
1342	Sets the auto proxy configuration .
1343	Get the user s user client .
1344	Updates the entity definition from the entity definition .
1345	Adds the completion listener to the user .
1346	Deploys all processes to the tenant engine .
1347	Check if the task is selected .
1348	Get servlet context path .
1349	Get the servlet context path .
1350	Gets the process application information .
1351	Get the process application information for the given process .
1352	Create a user details service .
1353	Returns the value of the given value .
1354	Initialize Camel Context
1355	Checks if the given variable is set .
1356	Checks if the given variable is set .
1357	Open the view .
1358	Close menu .
1359	Updates the view positions .
1360	Get the position of the action view .
1361	Get the center of the action view .
1362	Calculates the position of the item s items .
1363	Gets the view content view .
1364	Gets the screen size .
1365	Restore the sub action from the menu .
1366	Sets the content view .
1367	Sets the position of the view .
1368	Attach the view to the view .
1369	Creates a new state for the given trigger .
1370	Ensure that the given trigger is permitted .
1371	Ensure that the given trigger should be ignored .
1372	Adds a trigger to the state .
1373	Gets the state of the given state .
1374	Adds an instance to the container .
1375	Set the overflow value .
1376	Merge two HttpHlls with the same value .
1377	Encodes a sequence of bytes .
1378	Decodes a sequence of bytes .
1379	Decodes a sequence element .
1380	Encodes a bit string into a byte array .
1381	Encode an octet string .
1382	Encodes the given length .
1383	Get a Logger instance .
1384	Log an exception .
1385	Log a warning .
1386	Log an error .
1387	Replace the path with the given path .
1388	Decode percent encoded value .
1389	Process content timestamps .
1390	Build a new instance of the given configuration provider .
1391	Adds a new value to the reservoir .
1392	Convert a byte array to a base64 string
1393	Decode a base64 encoded string .
1394	Flush the buffer .
1395	Dump the given URI to the given URI .
1396	Computes the alpha of the given weight .
1397	Propagate a future to a future .
1398	UnmodifiableFuture .
1399	UnmodifiableFuture .
1400	Creates a CompletableFuture .
1401	Returns the value of the given future .
1402	Try to get a value from a future .
1403	Try to get a value from a future .
1404	Try to get a value from a future .
1405	Checks if the given future is successful .
1406	Called when a list of futures have completed .
1407	Returns the first occurrence of the given iterable .
1408	Returns the first occurrence of the given list of futures .
1409	Returns a list of all the futures in the given list .
1410	Convert a listener to a CompletableFuture .
1411	Converts a CompletableFuture to a ListableFuture .
1412	Add an exception callback .
1413	Gets the histogram of buckets .
1414	Removes a node .
1415	Computes the maximum weight for the given node .
1416	Add a hash .
1417	Load properties from a file .
1418	Binds the global configuration for the given class .
1419	Returns the next duration for the given poll count .
1420	Calculates the fibion of the given value .
1421	Multiply a duration .
1422	Divides this duration .
1423	Finds a single field with the given strategy .
1424	Checks if the given field is valid .
1425	Throw exception if not found .
1426	Returns the field annotated with the given type .
1427	Creates a new condition factory .
1428	Creates a condition factory .
1429	Until the given atom is true .
1430	Until the given atomic value is true .
1431	Creates a new condition factory .
1432	Sets the default timeout .
1433	Sets the default timeout .
1434	Tokenize arguments .
1435	Escape quotes in a string .
1436	Serve static files .
1437	Load language configuration .
1438	Loads all messages for the application .
1439	Returns the URL for the given logback configuration file .
1440	Generate a random secret
1441	Builds a RunClassInSeparateJvmMachine .
1442	Get all artifacts from a list of artifacts .
1443	Resolve the Standalone class .
1444	Encrypt data .
1445	Decrypt data .
1446	Read the Jinja version .
1447	Registers a new path .
1448	Determine the mode of the current environment .
1449	Checks if the given mime type is valid .
1450	Builds a route .
1451	Starts the JVM .
1452	Creates the server url .
1453	Initialize the router .
1454	Processes all registered controllers .
1455	Sort the methods .
1456	Find all methods of the controller .
1457	Configure reflections .
1458	Checks if the method is allowed for the given method .
1459	Returns the HTTP method for the given method .
1460	Builds a controller method invocation .
1461	Returns the real class name of the given object .
1462	Checks if a class exists .
1463	Returns the source code for the given stack trace element .
1464	Adds a value to the cache .
1465	Returns the value of the given key .
1466	Checks if the value is serializable .
1467	Render the given key .
1468	Render raw string .
1469	Render a raw response .
1470	Get a cookie by name .
1471	Sets the response headers .
1472	Check if the application secret is set .
1473	Adds all items to the collection .
1474	Returns the position for the given item id .
1475	Switches the switch view .
1476	Remove active index .
1477	Returns the active indexes .
1478	Returns the title view of the given position .
1479	Returns the content view of the given position .
1480	Expands the item at the given position .
1481	Collapse an item .
1482	Gets the parent parent parent .
1483	Returns an array of Animators .
1484	Creates a bitmap from a view .
1485	Determines if the given position is disissable .
1486	Reset the current state .
1487	Reset the animation .
1488	Cancel an animation .
1489	Starts an animation .
1490	Calculates the delay for the given position .
1491	Concatenates a list of Animators .
1492	Handle nonCORS request .
1493	Adds a list of words to the buffer .
1494	Creates a bitmap from the iterator .
1495	Removes an element from the list .
1496	Resizes the buffer .
1497	Returns the size of the buffer .
1498	Combine two bitmaps .
1499	Adds a list of literals to the buffer .
1500	Fill all the literals in the list .
1501	Returns the bit set as a bit set .
1502	Returns the cardinality of this set .
1503	Returns true if the buffer is empty .
1504	Returns an iterator over the elements of this set .
1505	Returns true if this set is intersects .
1506	Returns an iterator over the set of integers .
1507	Parses the next run .
1508	Open the button .
1509	Close the icon .
1510	Sets the background color of the menu .
1511	Fetch the database name range from the given URL .
1512	Fetch the database name range from the given URL .
1513	Parses a jdbc url .
1514	Register a connection parser .
1515	Fetch the database name from the URL .
1516	Start the daemon .
1517	Copy a file to a file .
1518	Copies a file to a file .
1519	Install a binary file .
1520	Handle missing fields .
1521	Returns the enum value for the given class .
1522	Patch unresolved references .
1523	Recursively traverse the fields of the given JSON object .
1524	Convert a JSON string to a Java object .
1525	Convert JSONObjects to Java object .
1526	Recursively traverse the fields of the given JSON object .
1527	Store missing fields .
1528	Returns the raw type of the given type .
1529	Read an array .
1530	Reads a number .
1531	Reads a JSON string .
1532	Get a field from a class .
1533	Remove trailing quotes from the string .
1534	Convert an object to a JSON string .
1535	Format a JSON string .
1536	Adds a tab to the output .
1537	Writes the given object to the output stream .
1538	Writes an object to the output stream .
1539	Gets the custom writer for the given class .
1540	Writes an object to the given object .
1541	Tracks references to the given root .
1542	Trace all fields in the given object .
1543	Ensures that the map contains a JSON string .
1544	Write a collection element .
1545	Creates a map from a list of strings .
1546	Gets the source .
1547	Gets the topics .
1548	Gets the HJID field .
1549	Gets the document detail list .
1550	Creates an axis for the axis .
1551	Creates a default grid .
1552	Creates a new instance of the EnhancedLegendGrid instance .
1553	Creates a new legend with the legend .
1554	Creates a legend for the legend .
1555	Set the legend style .
1556	Creates a highlighter .
1557	Creates a highlighter .
1558	Creates a default pie chart .
1559	Creates a default plot default values .
1560	Gets the document attachment list .
1561	Creates the menu menu items .
1562	Creates the committee items .
1563	Create the overview page .
1564	Create overview content .
1565	Gets the list of kommuals .
1566	Configure authentication .
1567	Sets the list of ComplianceCheck objects .
1568	Sets the status map .
1569	Sets the resource type map .
1570	Gets the kommungun data .
1571	Gets the Uppdrag value for this person .
1572	Gets the proposal property .
1573	Returns the page path .
1574	Update ballot data .
1575	Gets the maximum size of the view .
1576	Initializes the party map .
1577	Adds the data to the data series .
1578	Creates a chart .
1579	AddBallData to the data series .
1580	Creates a map of org . org . org
1581	Adds a date for the given month .
1582	Creates a field .
1583	Create the display property converter .
1584	Returns the converter for the given type .
1585	Returns the type of the given property .
1586	Gets the document activities .
1587	Gets the user account account .
1588	Gets the country regions .
1589	Gets the AgainstProposalContainer .
1590	Gets the CommitteeProposalContainer .
1591	Gets the list of events .
1592	Returns the page id .
1593	Returns the page number of pages .
1594	Creates the panel content .
1595	Create page visit history .
1596	Adds the ticker data to the list .
1597	Adds the statistics to the data series .
1598	Sets the GoogleAuthScratchCodes value .
1599	Creates a GantTant for the given assignment list .
1600	Create a Ganttt .
1601	Returns a sorted set of entries sorted by their values .
1602	Adds a sub - role to the view .
1603	Strip dates after current date .
1604	Creates a gantt .
1605	Convert a number of days to a string .
1606	Loads the secret data source from the given reference .
1607	Send a message to the server .
1608	Gets the document PersonPersonReferenceList value .
1609	Clean up the decision .
1610	Returns the name of the document .
1611	Returns the short name of the commit .
1612	Block by user login attempts .
1613	Block by login attempt .
1614	Navigate to page .
1615	Gets the application manager .
1616	Show notification .
1617	Gets the topic .
1618	Adds the source indicators to the menu .
1619	Returns a map of topic Indicator indicators .
1620	Gets the address of the user .
1621	Add cache hints to cache .
1622	Gets the list of strings for the given property .
1623	Read a CSV file from the input stream .
1624	Creates the paging controls .
1625	Add a pagination link .
1626	Inserts a list of votes to the legislation .
1627	Inserts a single party .
1628	Gets the list of AllProposalList .
1629	Adds a value to the data series .
1630	Adds a report to the report .
1631	Adds the coverage data to the series .
1632	Adds an annotation to the chart .
1633	Adds an entry to the data series .
1634	Creates the report summary .
1635	Creates a list of role lists .
1636	Process all documents .
1637	Load and process the document list .
1638	Loads a list of documents from a URL .
1639	Reads a string from a reader .
1640	Reads the input stream from a URL .
1641	Gets the votering property .
1642	Gets the list of government body attachments .
1643	Gets the value of PersonAssignmentElement .
1644	Gets the person detail element .
1645	Creates a user account .
1646	Creates a row item .
1647	Creates a grid layout .
1648	Sends the country indicator for the given country .
1649	Gets the documentProposal .
1650	Gets the document activity activity container .
1651	Gets the document detail container .
1652	Gets the document attachment container .
1653	Gets the document reference container .
1654	Gets the document reference for the document .
1655	Gets the list of votes for the politician .
1656	Adds a list of documents to a series .
1657	Read missing person list .
1658	Append the content to the StringBuilder .
1659	Adds the fallback value to the string builder .
1660	Reencrypt Vault values .
1661	Gets the list of LandstingsValkers .
1662	Adds the commitee summary for the given entry .
1663	Adds an entry to the string builder .
1664	Adds the decision data to the chart .
1665	Add doc type data to chart
1666	Adds the doc type to the chart .
1667	Gets the userId from the SecurityContext .
1668	Returns the URL of the current page .
1669	Checks if the given role is allowed .
1670	Gets the map of page actions for the application .
1671	Gets the map of events for a given page .
1672	Gets the list of views for a given page .
1673	Adds a list of ViewApplicationEventDailyEventSummaryValues to the series .
1674	Update person assignments .
1675	Update assignment data .
1676	Handles input validation .
1677	Creates a new CreateApplicationEventRequestRequest .
1678	Validate request .
1679	Gets the human - readable representation of the request .
1680	Handle input violations .
1681	Creates the data chart for the given indicator .
1682	Initializes the application menu .
1683	Create admin menu .
1684	Creates a button link .
1685	Sets the result element .
1686	Get kie container .
1687	Gets Javers .
1688	Creates a new JaversAuditable .
1689	Returns the author provider .
1690	Create role summary .
1691	Adds a date to the map
1692	Adds the government body to the list .
1693	Converts a string to an integer .
1694	Adds the data to the map .
1695	Adds the government body to the map .
1696	Creates a government body from a row .
1697	Gets the personAssignmentData value for this person .
1698	Gets the person details .
1699	Gets the voting decision type map .
1700	Gets a map of CommitteeDecisionDecisionType objects .
1701	Adds the decision type to the data series .
1702	Displays the document attachments .
1703	Creates a header label .
1704	Build a secret key .
1705	Returns the summary of the rule summary .
1706	Add a rule .
1707	Creates a map from a list of votes .
1708	Checks if the given date is included in the document .
1709	Gets the date from the given string .
1710	Gets the list of parties .
1711	Creates a form for enable Google Authenticator .
1712	Creates a form for disabling Google Auth .
1713	Creates a new form button .
1714	Gets the document reference list .
1715	Gets the best guess date for the ballot .
1716	Checks if the given votes are equal .
1717	Try to find a valid vote date .
1718	Returns the IP address of the web browser .
1719	Returns the operating system operating system .
1720	Gets the list of committee votes .
1721	Gets the ListElectionalRegionalRegionalRegionalRegional regions .
1722	Gets the list of politician summaries for the politician .
1723	Adds the document history to the list of documents .
1724	Adds a new data series to the series .
1725	Adds data item to data series .
1726	Initializes the user command map .
1727	Performs the operation on the given service .
1728	Gets the list of votes .
1729	Gets the assignment list .
1730	Configure columns and hidden fields .
1731	Configure listeners .
1732	Creates a grid cell filter .
1733	Set column converter .
1734	Gets the document type for the view .
1735	Adds data series to data series .
1736	Gets the list of election types .
1737	Returns the detail summary item .
1738	Gets the admin region .
1739	Gets the income level .
1740	Gets the value of the LendingType property .
1741	Gets the BallDocumentData for this BallDocument .
1742	Gets the value of theBallDocumentElement .
1743	Main entry point .
1744	Encrypts the given value .
1745	Creates a standard encryptor .
1746	Decrypts a value .
1747	Gets the list of counties for this country .
1748	Gets the job context .
1749	Gets the list of portals .
1750	Returns the active user account .
1751	Gets the value of this document .
1752	Creates basic layout and footer .
1753	Creates the top header for the user context .
1754	Creates a vertical layout .
1755	Adds the logo to the header .
1756	Create top title header .
1757	Get the java mail sender .
1758	Get SMTP port .
1759	Find language data .
1760	Returns a list of supported languages .
1761	Creates a map of IssueConcern objects for the issue .
1762	Sets the namespace for the given input stream .
1763	Add chart .
1764	Returns the height of the chart .
1765	Get the name of the party .
1766	Gets the list of votes for the legislation .
1767	Authenticate a user .
1768	Checks if the system is Windows .
1769	Start the emulator .
1770	Unlock emulator .
1771	Writes the windows start script to a file .
1772	Writes the executable script to a file .
1773	Stop the emulator .
1774	Stop emulator .
1775	Send a command to the emulator .
1776	Builds the start command line .
1777	Determine the emulator .
1778	Returns the wait time for the emulator .
1779	Determine the options for the emulator .
1780	Determine if the emulator is available .
1781	Determine the emulator location .
1782	Unjar a jar file .
1783	Calculates the source mapping .
1784	Visit a dependency node .
1785	Resolve artifact .
1786	Wait until the device is connected .
1787	Wait for initial device list .
1788	Deploy the apk file .
1789	Deploy the project to the project .
1790	Deploy the apk file .
1791	Uninstalls the specified package .
1792	Extract package name from apk file .
1793	Extract package name from an artifact .
1794	Extracts the instrumentation runner from the given manifest file .
1795	Generates the RDL tables for the given libraries .
1796	Executes the specified device .
1797	Copy the input stream to the output stream .
1798	Copies the gdb server to the given architecture .
1799	Returns the Java executable executable .
1800	Get the path of the ProguardJar .
1801	Gets the shrinkedAndroidJar path .
1802	Get the path of the build tools .
1803	Get the main dex file path .
1804	Returns the path to the platform .
1805	Gets the AndroidJar .
1806	Get the platform s platform .
1807	Load SDK tools .
1808	Executes the artifact .
1809	Copy the manifest file .
1810	Extracts the source dependencies from the given artifact .
1811	Extracts the apklib library .
1812	Extracts the artifacts from an artifact .
1813	Checks if the artifact is available .
1814	Gets the package compare map .
1815	Generates the RJavaF file for the given apklib dependencies .
1816	Generates the RAR files for the given AAR dependencies .
1817	Generates the RDF file for an apk library .
1818	Checks if the artifact is present .
1819	Checks if the artifact is present .
1820	Gets the dex input files .
1821	Executes zipaligner .
1822	Check client secrets file .
1823	Adds the libraries to the classpath .
1824	Add classes to the classpath .
1825	Executes the configuration .
1826	Gets the GAV version .
1827	Collects the command line arguments .
1828	Get the JVM library for the given file name .
1829	Gets the toolchain .
1830	Get the path of the Ndk build .
1831	Read manifest file .
1832	Write manifest to manifest file .
1833	Export properties .
1834	Performs the version code update .
1835	Extract the architecture from an artifact .
1836	Returns the list of files in the given base directory .
1837	Encrypt data using the given key .
1838	Decrypt data from a string
1839	Read a name from a byte array .
1840	Converts a character to a hexadecimal character .
1841	Move the current position to the current position .
1842	Start listening .
1843	Stop the listener .
1844	Send the request to the server .
1845	Add a form field .
1846	Add a file part .
1847	Creates a BitmapDrawableDrawable .
1848	Preload a list of images .
1849	Detaches the image view from the image task .
1850	Add an image to the component manager .
1851	Checks if the image is cached .
1852	Recover all the work tasks .
1853	Stop the worker .
1854	Destroy the worker .
1855	Attach a CubeFragment to the container .
1856	Invalidate the cache .
1857	Clears the disk cache .
1858	Creates a new table .
1859	This method is used to create a new table .
1860	Write a bitmap to disk .
1861	Returns the input stream .
1862	Sets a string value .
1863	Deletes the cache entry .
1864	Commit the cache .
1865	Add a file to the request .
1866	Clears the memory cache .
1867	Resume the journal .
1868	Process the journal .
1869	Rebuild the journal .
1870	Trim the size of the cache .
1871	Handles the back button .
1872	Handles loading .
1873	Create a new ImageReuseInfo instance .
1874	Performs the request synchronously .
1875	Called when a request is finished .
1876	Get the response from the server .
1877	Sets the loading bitmap .
1878	Sets the right view .
1879	Download the image from the given URL .
1880	Adds an image view to the list .
1881	Removes the specified image view .
1882	On loading the image .
1883	Called when the image has been loaded .
1884	Returns the size of the size of the given size .
1885	Returns the size of the given key .
1886	Open disk cache .
1887	Flush disk cache .
1888	Get the disk cache .
1889	Delete a directory .
1890	Get the external cache directory .
1891	Get the usage of a file .
1892	Notify the drawable .
1893	Handles the resume .
1894	Returns the last item .
1895	Hide the view .
1896	Align the sheet with the given fab .
1897	Morphs a view from a fab
1898	Morphs the fab to the given fab
1899	Hide the overlay .
1900	Shows the sheet .
1901	Setup the toolbar .
1902	Setup the drawer .
1903	Setup the tabs .
1904	Setup the fabricFab .
1905	Updates the preferences for the given page .
1906	Updates the snack bar .
1907	Morphs a sheet to a sheet
1908	Morphs from a sheet .
1909	Hide suggestions .
1910	Returns a list of suggestions .
1911	Checks if the given input is an explicit character .
1912	Checks if the given character is a word breaking word .
1913	Checks if the given input is valid .
1914	Returns the index of the search index .
1915	Returns the index of the search index .
1916	Display the text counter .
1917	Disable spelling suggestions .
1918	Updates the text of the editor .
1919	Sets the mention span factory .
1920	Copy the text to the clipboard .
1921	Shows the contents of the text .
1922	Handles the clipboard .
1923	Updates the selection of the selected text .
1924	Called when the cursor is changed .
1925	Diselect all spans .
1926	Parse a duration string .
1927	Escape a string .
1928	Writes HTML to HTML .
1929	Creates a BufferedImage .
1930	Create a VolatileImage .
1931	Returns a string representation of the image .
1932	Maps the font to the specified family .
1933	Sets the shape of the shape .
1934	Sets the text renderer .
1935	Appends the optional element ID to the string .
1936	Gets the SVG path of the SVG path .
1937	Returns a string representation of a color .
1938	Returns a string representation of a color .
1939	Returns the stroke style .
1940	Gets the style style .
1941	Gets the SVG font style .
1942	Gets font metrics .
1943	Sets the current transformation .
1944	Sets the transformation .
1945	Sets the transform .
1946	Sets the clip .
1947	Registers a clip .
1948	Sets the clip .
1949	Clip the rectangle .
1950	Sets the clip .
1951	Gets the PNG bytes of the image .
1952	Draw a rendered image .
1953	Draws a renderable image .
1954	Gets the radial gradient element .
1955	Gets the clip path .
1956	Gets the parts of a string .
1957	Record a log level .
1958	Record a timing event .
1959	Track timeouts .
1960	Check client connection .
1961	Handle the request .
1962	Populate the backend request .
1963	Handles HTTP client errors .
1964	Handle backend client responses .
1965	Process the queue .
1966	Creates a service discovery service .
1967	Calls the method callbacks .
1968	Calls the service call .
1969	Create a local proxy .
1970	This method is called before a method call .
1971	Transform a method call to a method call .
1972	Stop the service .
1973	Start the call queue .
1974	Find service name .
1975	Load service endpoints by name .
1976	Convert srvRecord to endpoint definition .
1977	Checks the request type .
1978	Handle HTTP request .
1979	Handle a method call .
1980	Create a Consul instance .
1981	Get the DNS client .
1982	Creates a new receive queue .
1983	Gets the send queue .
1984	Convert a promise to a callback .
1985	Convert a promise to a callback .
1986	Creates a callback for the consumer .
1987	Load health services .
1988	Loads the health services for the given service .
1989	Gets a DNS client .
1990	Add a new instance to the queue .
1991	Process the queue .
1992	Remove a future from the queue .
1993	Create a CallbackCoordinator .
1994	Monitor callbacks .
1995	Monitor the callback for the callback .
1996	Wrap a callback with the given operation description .
1997	Build a proxy service .
1998	Build a proxy service .
1999	Handle a webSocket message .
2000	Starts the server .
2001	Add an event listener .
2002	Creates a service discovery service .
2003	Converts a JSON string to a class .
2004	Converts a Json array into a List .
2005	Converts an object to a JSON string .
2006	Converts a JSON string into a Map .
2007	Convert a value map to a map .
2008	Checks if a callback has a callback .
2009	Sets the callback for the given callback .
2010	Wrap the given callback .
2011	Adds a callback to the callback builder .
2012	Sets the callback for the given component class .
2013	Adds a callback to the callback builder .
2014	Adds a callback to the callback builder .
2015	Adds a callback to the call builder .
2016	Add a header .
2017	Checks if a service is registered .
2018	Ping the agent
2019	Register a service .
2020	Deregisters a service .
2021	Deregister a check
2022	Checks the status of a check .
2023	Checks if the given check is valid .
2024	Checks if the given check is a warning .
2025	Stop the server .
2026	Handle async callback .
2027	Send a message to the web server .
2028	Creates a proxy .
2029	Create a ReceiveQueueListener .
2030	Returns a new ReceiveQueue .
2031	Creates a Json send queue .
2032	Start a listener .
2033	Build service queue .
2034	Checks if the given node is ok .
2035	Fail if the service fails
2036	Enables the given request headers .
2037	Enable consul service discovery .
2038	Gets the admin builder .
2039	Gets the context metadata .
2040	Add an endpoint to the service manager .
2041	Add an endpoint service to the service manager .
2042	Add a new endpoint service .
2043	Add an endpoint service .
2044	Returns service endpoint endpoint .
2045	Configures the interceptors .
2046	Destroy a session .
2047	Load services by service name .
2048	Delete a key .
2049	Handle the request .
2050	Process the receive queue .
2051	Send an event to the event manager .
2052	Start the queue .
2053	Get the HTTP request .
2054	Remove an event connector .
2055	Forward an event .
2056	Flush the event connector .
2057	Reads a Microservice config from the given resource .
2058	Register a callback for a client call .
2059	This method is called when a method call is called .
2060	Extracts the request info from the request .
2061	Extract headers from HTTP request .
2062	Handle REST call .
2063	Handle a response from a service .
2064	Adds a request to the request .
2065	Adds an integer to the list .
2066	Adds an integer to the list .
2067	Adds an array to the list .
2068	Sets the value at the specified index .
2069	Returns the number of values of the given function .
2070	Called when the request is sent .
2071	Notifies listeners of change notification .
2072	Add default serializers .
2073	Get the parse from the given type .
2074	Verify that the number of leading zeros are allowed .
2075	Parse an unquoted field name .
2076	Handle an unexpected value .
2077	Skips a string .
2078	Parse a token .
2079	Decode base64 encoding .
2080	Checks if the string is a valid id .
2081	Checks if the given character is a valid id .
2082	Write a string to the output buffer .
2083	Append a char to the buffer .
2084	Append a character escape .
2085	Set conversion properties .
2086	Convert a Thrift class to a PigScript .
2087	Convert a schema to a StringBuilder .
2088	Open the index reader .
2089	Gets the progress bar .
2090	Convert a message to a tuple .
2091	Convert a FieldDescriptor to a Tuple .
2092	Convert a single field value into a tuple .
2093	Convert field value to Pig types .
2094	Convert a message descriptor to a schema .
2095	Convert a FieldDescriptor to a FieldSchema .
2096	Convert a single FieldDescriptor to a FieldSchema .
2097	Convert a message descriptor to PigScript .
2098	Convert a message descriptor to a PigScript .
2099	Convert a message to a PigScript script .
2100	Convert a single field to PigScript .
2101	Get a TStructDescriptor .
2102	Extract the enum map from the enum class .
2103	Creates a new PathFilter .
2104	Determine if the given proto class is dynamic .
2105	Returns the type of the given proto class .
2106	Returns the progress of the progress bar .
2107	Serialize the message .
2108	Sets the input format for the input .
2109	Sets the configuration for the given configuration key .
2110	Writes a list of strings to the configuration .
2111	Reads a string from the configuration .
2112	Write a list of strings to a configuration file .
2113	Reads a list of strings from the configuration .
2114	Verifies that the class is a Thrift class .
2115	Returns the value of the given field .
2116	Gets the value of a field .
2117	Returns the type of the given field .
2118	Write a single field .
2119	Converts a tuple into a Message .
2120	Convert a tuple to a single field .
2121	Adds a field to the builder .
2122	Convert a pig type to a ProtoType .
2123	Converts a TupleDescriptor into a Tuple .
2124	Convert a field to a Thrift value .
2125	Creates a new TBase instance .
2126	Sets the combined input format for the given configuration .
2127	Finds the splits in the input paths .
2128	Sets input paths .
2129	Get the input paths .
2130	Adds an input split to the list .
2131	Gets the locations of the hosts .
2132	Evaluate a delimiter .
2133	Creates a resource field schema .
2134	Reads a byte array from the input stream .
2135	Returns a tuple of tuples .
2136	Creates a base64 instance .
2137	Creates a new protobuf instance .
2138	Reads the next bytes from the stream .
2139	Reads the next bytes from the buffer .
2140	Reads the next bytes from the stream .
2141	Creates a new TaskAttemptContext .
2142	Creates a new MapContext .
2143	Creates a ThriftWritable .
2144	Creates a new instance of the class .
2145	Returns a new instance of the given class .
2146	Gets the builder builder .
2147	Maps an entry to the proto builder .
2148	Creates a new descriptor builder .
2149	Resolve message type name .
2150	Convert an object to a Message object .
2151	Convert an object to a Message .
2152	Builds a map entry .
2153	Map the field type to a proto message type .
2154	Recursively walk a path .
2155	Collect all paths from the given path .
2156	Get the size of a directory .
2157	Set the column number .
2158	Updates the local configuration for the job conf .
2159	Returns the parse method for the given message .
2160	Parses a message .
2161	Parses a message from an input stream .
2162	Write a tuple to the writer .
2163	Sets the class configuration .
2164	Set the type ref .
2165	Check the size of the container size .
2166	Sets the pattern .
2167	Converts a string to lowercase .
2168	Returns the ordinal of the given number .
2169	Creates a new protobuf .
2170	Creates a new lzo3 log file .
2171	Set the output format .
2172	Returns true if the given string matches the pattern .
2173	Replaces the pattern with the given pattern .
2174	Returns the plural form of the given word .
2175	Checks if the given word is uncountable .
2176	Returns the output stream for the given job .
2177	Verifies that the given writable class is valid .
2178	Creates a ThriftConverter .
2179	Returns a class with the given name .
2180	Returns a ThriftTypeRef for the given thrift class name .
2181	Finds the required columns for the given configuration .
2182	Sets the class configuration .
2183	Execute HTTP request .
2184	Add authorization header .
2185	Validate the response .
2186	Parses the given kind .
2187	Parses a JSON string .
2188	Formats a list of strings .
2189	Wait until the given interval is available .
2190	Adds the basic authentication header .
2191	Refresh the current token .
2192	Print a comment tree .
2193	Converts an object to an integer .
2194	Safely converts an object to a double value .
2195	Converts an object to a boolean value .
2196	Safely converts an object to a long value .
2197	Parse recursively .
2198	Parses a JSON string .
2199	Generates a signature for the endpoint .
2200	Sort the given map .
2201	Get oembed information .
2202	Create an instance of an Instagram object .
2203	Creates an object from a JSON string .
2204	Checks if two objects are null .
2205	Checks that a string is empty .
2206	Checks that the given URL is valid .
2207	Checks if the URL is valid .
2208	Creates a new Instagram client instance .
2209	Configure connection settings .
2210	Returns the body contents of the request body .
2211	Print a JSON response .
2212	Sets the callback for the callback .
2213	Sets the client id .
2214	Sets the client secret .
2215	Add an object to the Instagram Subscription .
2216	Sets the verification token .
2217	Sets the aspect .
2218	Sets the latitude for the specified latitude .
2219	Sets the longitude value for the specified longitude .
2220	Sets the radius for the specified radius .
2221	Delete a subscription .
2222	Delete all subscriptions .
2223	Get the list of subscriptions .
2224	Formats a map of strings .
2225	Converts a string to a percent - encoded string .
2226	Appends the parameters to the query string .
2227	Concatenates a map of parameters .
2228	Converts a query string into a Map .
2229	Throw an exception .
2230	Add a trade .
2231	Increase the number of results in the cache .
2232	Calculates the maximum drawdown .
2233	Gets the split index indexes for the given series .
2234	Calculates the regression line .
2235	Opens a new order .
2236	Build the chart time series .
2237	Generates a random decimal value from a given range .
2238	Generates a random tick .
2239	Increment the acceleration .
2240	Calculates the SAR value .
2241	Calculates the values of a trade .
2242	Fill the values to the end of the time series .
2243	Loads the logger configuration .
2244	Create OHLC dataset .
2245	Creates a new DataSeriesCollection .
2246	Adds the cash flow to the plot .
2247	Display the chart .
2248	Removes all ticks from the given number of ticks .
2249	Builds a list of ticks .
2250	Destroy all observers .
2251	Saves the state of the instance .
2252	Sends an event .
2253	Simplified method .
2254	Register a directory .
2255	Gets the class loader .
2256	Adds the required plugins to the classpath .
2257	Adds the dependencies to the classpath .
2258	Resolve executable dependencies .
2259	Find the executable artifact .
2260	Handle working directory .
2261	Returns the start date range .
2262	Get the bounds of this feed .
2263	Checks if the given distance is valid .
2264	Loads a table .
2265	Returns the size of the table .
2266	Set the field to null .
2267	Copy all tables from the database .
2268	Checks if a table exists in the database .
2269	Adds the required fields to the database .
2270	Registers snapshot namespace .
2271	Gets the ID of the trip .
2272	Execute the remaining records .
2273	Clean up the zip file .
2274	Export a table .
2275	Registers an error .
2276	Registers a new error .
2277	Export a feed .
2278	Loads a feed from a file .
2279	Validate a feed .
2280	Deletes all tables in the database .
2281	Creates a DataSource for the given URL .
2282	Add a new error info .
2283	Create a new GTFrror error .
2284	Creates a new GTFrror .
2285	Create a new GTFrror .
2286	Returns the average speed for a given pattern .
2287	Returns the average speed for the given trips .
2288	Gets the start time for the given Trip .
2289	Gets the end time for the given Trip .
2290	Get the distance of a pattern .
2291	Returns the average stop spacer for the given pattern .
2292	Copies an entity to a table .
2293	Creates a new ValidateFieldResult from the given result .
2294	Returns the number of errors in the database .
2295	Commit the database .
2296	Convert a HHHMMss string to a string .
2297	Compares this GTF error .
2298	Calculates the distance between two points .
2299	Creates a new field definition .
2300	Gets a grouped field for the given table .
2301	Convert an array of int array to an array .
2302	Returns a list of trips for a given stop .
2303	Returns the average heading for a given stop .
2304	Returns a map of route headways for a given stop .
2305	Returns the number of trips for a given route .
2306	Convert a JSON string to a JsonNode .
2307	Create a new document .
2308	Updates the stop times for the given pattern .
2309	Checks if references exist in the database .
2310	Verifies that the original stop stops are unchanged .
2311	Inserts a new StopStopTimes .
2312	Delete an entity .
2313	Handle statement execution .
2314	Returns the number of rows in the table .
2315	Gets the references for the given table .
2316	Returns the value for the given ID .
2317	Put a feed .
2318	Put a feed .
2319	Returns true if the given date is active .
2320	Initializes the GraphQL graph .
2321	Returns the list of editor fields .
2322	Returns a list of required fields .
2323	Returns a list of all required fields .
2324	Create SQL table .
2325	Generate insert statement .
2326	Returns a comma separated comma separated comma separated comma separated string .
2327	Generate a SQL UPDATE statement .
2328	Generate select query string .
2329	Generates a SQL statement for the given namespace .
2330	Generates a delete statement .
2331	Creates a SQL table from a database .
2332	Clone the stopTimes table .
2333	Returns the index of the key field .
2334	Ensure that the given namespace is valid .
2335	Returns the index of the given field .
2336	Returns the set of keys in the map .
2337	Create a GTFSFeed from a file .
2338	Finds the patterns for the given Trip ID .
2339	Get the distance of a trip .
2340	Get the speed of a trip .
2341	Returns a list of stop times for a given stop .
2342	Returns a list of services for a given date .
2343	Gets the agency time zone for a given stop .
2344	Creates a map of patterns for the given TripId .
2345	Set the idle timer .
2346	Enable the receiver .
2347	Report the idle state .
2348	Add a job status .
2349	Checks if the given job id matches the given jobId .
2350	Removes a job status .
2351	Reschedule a failed job .
2352	Clears the cache .
2353	Called when a start job is received .
2354	Sets the stop job .
2355	Checks if a job is stopped .
2356	Stores the given key .
2357	Put a String array to the bundle .
2358	Returns the value of the specified key .
2359	Put a PersistableBundle .
2360	Writes the message to the specified format .
2361	Gets the height of the view .
2362	Prints a message .
2363	Checks if the given properties are valid .
2364	Checks if the given parameters are valid .
2365	Prepare the XML for the given descriptor .
2366	Sets a property value .
2367	Converts a string to a string .
2368	Get the real path of a servlet .
2369	Verify the OAuth message .
2370	Verifies that the parameters are valid .
2371	Validate a request .
2372	Launch the launch .
2373	Builds a ToolConsumer profile .
2374	Validate the service credentials .
2375	Validate capabilities .
2376	Add custom properties to the launch properties .
2377	Checks if the list view is enabled .
2378	Searches for the specified view .
2379	Converts a safe URL to a safe URL .
2380	Convert a Safe style to a safe style .
2381	Convert a SafeScript to a SafeScript .
2382	Convert a SafeStyleSheet to a safe style .
2383	Converts a TrustedResourceUrl to a TrustedResourceUrl .
2384	Converts a SafeHtmlProto to a safe representation .
2385	Wrapper around angle radians .
2386	Calculates the number of decimal digits .
2387	Calculates the linear distance between two points .
2388	Creates a new quaternion .
2389	Computes the linear interpolation between two points .
2390	Calculates the trie of a trie .
2391	Returns the color of the given color .
2392	Returns the value of the given value .
2393	Returns the inverse of the inverse of the given value .
2394	Cast an object to a float .
2395	Cast an object to a byte .
2396	Cast an object to a short value .
2397	Cast an object to an Integer .
2398	Cast an object to a double .
2399	Cast an object to a Long .
2400	Cast an object to a Boolean .
2401	Returns the mean of the given values .
2402	Returns the remainder of the given number .
2403	Returns the shift to the given number .
2404	Returns a new Quaternion .
2405	Creates a new quaternion .
2406	Rotate this vector .
2407	Returns the length of the vector .
2408	Normalize this quaternion .
2409	Creates a quaternion .
2410	Creates a quaternion .
2411	Creates a quaternion .
2412	Creates a quaternion .
2413	Creates a quaternion .
2414	Creates a quaternion .
2415	Returns the minimum axis .
2416	Multiplies two complex values .
2417	Divide two complex numbers .
2418	Rotate this vector .
2419	Normalizes the complex complex .
2420	Creates a quaternion .
2421	Creates a Complexf .
2422	Converts an angle to a complex number .
2423	Returns the maximum axis .
2424	Hash a double value .
2425	Creates a new quaternion .
2426	Returns a new Quaternion .
2427	Creates a new quaternion .
2428	Returns the axis of this vector .
2429	Returns the axes of the axis .
2430	Creates a quaternion .
2431	Creates a quaternion .
2432	Creates a quaternion .
2433	Creates a quaternion .
2434	Creates a quaternion .
2435	Creates a quaternion from an angle .
2436	Multiply two complex numbers .
2437	Divide two complex numbers .
2438	Rotate this vector .
2439	Creates a quaternion .
2440	Creates a ComplexD object from x and y .
2441	Creates a ComplexD from a given angle .
2442	Move a child view .
2443	Move a child view .
2444	Sets the block span .
2445	Reduce the bounding box .
2446	Transform the type parameters to the given type .
2447	Creates a symbol reference .
2448	Creates a symbol reference for the given class .
2449	Returns true if the given type is a valid type .
2450	Returns the least upper bound of the given types .
2451	Returns the ground target type of the given lambda expression .
2452	Creates a non - wildcard parameter for a given type .
2453	Returns the union of the given types .
2454	Solves the type expression for a dot expression .
2455	Solves the constructor for the given object .
2456	Solve method call .
2457	Finds the given lambda expression in the map .
2458	Returns the qualified name of the class .
2459	Gets the type of this node .
2460	Checks if the break statement is exits .
2461	Checks if the statement is complete .
2462	Solves a type in the given type .
2463	Solves a method in the given type .
2464	Creates a new value from a resolved value declaration .
2465	Checks if the given method call is applicable .
2466	Returns true if the method call is a generic method call .
2467	Checks if expression is in assignment context .
2468	Predict a feature .
2469	Loads the model .
2470	Returns the index of the leaf node .
2471	Returns the leaf value for the given feature .
2472	Unattens a JSON string .
2473	Flattens the map .
2474	Flattens the flattened map into a Map .
2475	Concatenates a list of lists .
2476	Returns a stream of invalidations of an observable observable .
2477	Creates a new EventStream with the given observable .
2478	Returns a stream of animation frames .
2479	Merge a set of events into a stream .
2480	Wraps an ObservableList .
2481	Waits until the given function returns true .
2482	Simplified method .
2483	Returns a copy of this metadata .
2484	Strip the prefix of a known prefix .
2485	Configures the given digester .
2486	Processes class mapping annotations .
2487	Joins a list of strings .
2488	Initialize the device scan .
2489	Determine if the device is a phone .
2490	Determine if the user is webkit .
2491	Determine if the device is a mobile mobile device .
2492	Determine if the device is a BlackBerry .
2493	Determine if the browser is in the browser .
2494	Determine if the device is on the device .
2495	Determine if the device is a mobile device .
2496	Determine if the device is an operating system .
2497	Determine if the device is a mobile device .
2498	Determine if the mobile device is mobile .
2499	Detects if the device is a mobile device .
2500	Determines if the device is a mobile device .
2501	Checks if the given value is an EL expression .
2502	Returns true if the given value is contained in the given string .
2503	Builds the javascript script .
2504	Creates a new EL method .
2505	Checks if the given string is a field descriptor .
2506	Copies the response headers .
2507	Encode a URI query .
2508	Returns the URI as a URI .
2509	Build a query string .
2510	Returns the value of a parameter .
2511	Gets the values of a parameter .
2512	Add parameters to the URL .
2513	Derives the view id .
2514	Gets the URL pattern parser .
2515	Returns all validators for a given path parameter .
2516	Creates a QueryStringBuilder .
2517	Extract query string from url .
2518	Adds a parameter to the request .
2519	Gets the list of registered providers .
2520	Gets the number of negation count .
2521	Add a parameter to the navigation .
2522	Build the standard output string .
2523	Processes a class entry .
2524	Parse query string .
2525	Exclude the given parameters .
2526	Builds the URL for the given mapping .
2527	Sends an error message .
2528	Visit a class .
2529	Prepend the path to the request path .
2530	Strip the context path .
2531	Translate the given language to the given locale .
2532	Builds the DynViewId for the given faces .
2533	Process Dyna View .
2534	Returns the required type of the given class .
2535	Creates a proxy proxy .
2536	Gets the size of all fields of the given class .
2537	Gets all fields of the given class .
2538	Put a value into the map .
2539	Removes the given key from the map .
2540	Load the agent .
2541	Checks if the agent is available .
2542	Copy a file into a file .
2543	Checks if the given file is a file .
2544	Adds a directory to the archive .
2545	Initializes the zip output stream .
2546	Zip a file into a zip archive .
2547	Get the default manifest .
2548	Adds a section to the manifest .
2549	Write this character to the writer .
2550	Returns a list of warnings .
2551	Returns an existing section .
2552	Copy a file to a file .
2553	Add a new manifest .
2554	Zip a file into a zip archive .
2555	Clean up the manifest .
2556	Reset the manifest .
2557	Writes a list of directories .
2558	Grab files and directories and directories .
2559	Decompress the given file .
2560	Compress the source .
2561	Merge attributes from the given section .
2562	Sets the application .
2563	Adds an archive to the archive .
2564	Adds a directory to the archive .
2565	Compress the source .
2566	Adds resources to the zip archive .
2567	Add parent directories to the zip archive .
2568	Adds an entry to the archive .
2569	Creates a ZIP archive .
2570	Reset the archive .
2571	Compress a file .
2572	Compress a resource .
2573	Sets the maximum dynamic table size .
2574	Decode aULE 128 - bit integer .
2575	Returns the index of the given name .
2576	Returns the index of the given header .
2577	Creates a map of header names .
2578	Returns the length of the encoded length .
2579	Returns the length of the header .
2580	Add a header field .
2581	Sets the capacity of the buffer .
2582	Encode a header .
2583	Set the maximum header table size .
2584	Encode an integer .
2585	Encode a string literal .
2586	Encode a literal .
2587	Ensure that the buffer size is available .
2588	Gets the header field at the given index .
2589	Returns the header entry for the given header .
2590	Returns the index of the given name .
2591	Add a new header field .
2592	Returns the hash of the given name .
2593	Decodes the given buffer .
2594	Sets the default script names .
2595	Asserts that the given value is equal to the given expected value .
2596	Asserts that a short is equal to the expected value .
2597	Assert that the actual value is greater than the given expected value .
2598	Assert that the given float is greater than the expected value .
2599	Assert that the given character is equal .
2600	Assert that the given character is equal .
2601	Asserts that the given character is less than other .
2602	Asserts that the given character is greater than other .
2603	Asserts that the given character is greater than other .
2604	Asserts that the given character is less than other .
2605	Asserts that the given character is lowercase .
2606	Assert that the character is upper case .
2607	Asserts that the given array contains the given size .
2608	Asserts that the given array contains the given values .
2609	Assert that the given map contains the given key .
2610	Assert that the given map contains key .
2611	Assert that the given value contains the given value .
2612	Assert that the given value contains the given value .
2613	Assert that the map contains duplicate values .
2614	Assert that the given number is equal .
2615	Asserts that the given value is zero .
2616	Assert that the given value is not zero .
2617	Asserts that the given positive value is greater than zero .
2618	Asserts that the given value is less than zero .
2619	Assert that the given float is equal to the given offset .
2620	Assert that the value contains the given value .
2621	Assert that the expected value is equal .
2622	Asserts that the expected value is greater than or equal .
2623	Asserts that the expected value is less than the expected value .
2624	Asserts that the expected value is less than the expected value .
2625	Asserts that the given array contains the given values .
2626	Assert that a sequence contains a sequence of bytes .
2627	Assert that the given object is equal .
2628	Assert that two objects are equal .
2629	Assert that the given object is equal to the same instance .
2630	Asserts that two objects are equal .
2631	Assert that the given value is not equal .
2632	Assert that the given array is sorted .
2633	Creates a matcher that matches the given name .
2634	Checks if the string is empty .
2635	Get the middle name for a field name .
2636	Checks if the given field exists .
2637	Get the list of annotation resolvers .
2638	Sets the status of the given status .
2639	Reduce the class name and suffix .
2640	Returns the boolean value of the given property .
2641	Filter the response callback .
2642	Returns the annotation array as a String array .
2643	Send a JSON request to the server .
2644	Process a token .
2645	Handle password .
2646	Handle a ticket .
2647	Process a ticket .
2648	Collect claims from subject names .
2649	Handle authorization decision .
2650	Issue an access token .
2651	Computes the login id .
2652	Handles the authentication request .
2653	Handles an introspection request .
2654	Create service owner credentials .
2655	Creates the service credentials .
2656	Gets the JaxRs client .
2657	Creates a JAX client .
2658	Sets the connection timeout .
2659	Sets the read timeout .
2660	Execute API call .
2661	Handle authentication request .
2662	Process the introspection .
2663	Process access token info .
2664	Handle authentication request .
2665	Process authorization request .
2666	Checks if the user is authenticated .
2667	Process revocation request .
2668	Extract the client certificate from the request .
2669	Updates the repository metadata .
2670	Generate an X509 certificate .
2671	Get node name .
2672	Generate a relationship file .
2673	Commit the current commit .
2674	Adds a snapshot to a list of data .
2675	Get the name of a remote repository .
2676	Returns the next name of the given list .
2677	Send a message to Kafka .
2678	Send a message to a topic .
2679	Send a message to Kafka .
2680	Returns a set of cache names .
2681	Writes the sealed content to a file .
2682	Reads the contents of a ZipInputStream .
2683	Gets the target key for the given target name .
2684	Checks if the given path is enabled .
2685	Delete obsolete files .
2686	Parses a repo name .
2687	Check if a store exists
2688	Loads all artifacts from disk and stores them in disk .
2689	Loads an artifact from disk and stores it in the store .
2690	Creates a hosted repository from a zip file .
2691	Creates a new http client context .
2692	Creates a new http client .
2693	Perform a reponse .
2694	Called when a group is changed .
2695	Set system properties .
2696	Get a list of file ranges .
2697	Read messages from a stream .
2698	Creates a new table .
2699	Deletes the table .
2700	Delete a table .
2701	Uploads the specified permissions .
2702	Download permissions from the table .
2703	Sets the base defaults for this request .
2704	Extracts the storage error information from an input stream .
2705	Generate access condition condition .
2706	Generate access condition condition .
2707	Generate access condition condition .
2708	Applies the condition to the request .
2709	Applies the source condition to the request .
2710	Applies the append condition to the request .
2711	Applies the lease condition to the request .
2712	Applies the condition to the request .
2713	Verify that the conditional conditions are valid .
2714	Combines two filters .
2715	Sets the storage URI .
2716	Writes a shared access policy to a stream .
2717	Generates the request body body .
2718	Add canonicalized headers .
2719	Appends the canonicalized element to the builder .
2720	Calculates the canonical HTTP request .
2721	Calculates the canonicalized HTTP request headers .
2722	Computes the HMAC256 hash .
2723	Sign a table request .
2724	Gets the first occurrence of the given message .
2725	Adds a message to the queue .
2726	Clears the queue .
2727	Creates a queue .
2728	Creates a queue if it exists .
2729	Delete a queue .
2730	Delete a queue .
2731	Delete a message .
2732	Download attributes from the queue .
2733	Check if the queue exists .
2734	Returns the next message .
2735	Returns the next message of the queue .
2736	Retrieves all messages from the queue .
2737	Retrieve a message from the queue .
2738	Retrieve messages from the queue .
2739	Retrieves messages from the queue .
2740	Update a message .
2741	Updates a message .
2742	Upload permissions .
2743	Download permissions .
2744	Get the address of the queue .
2745	Get the hour metrics table .
2746	Gets the minimum metrics table for the given service .
2747	Returns the message content as a byte array .
2748	Returns the message content as a string .
2749	Parses a file and returns the list of files .
2750	Applies the continuation token to the query builder .
2751	Create a merge operation .
2752	Create a HttpURLConnection .
2753	Update an existing table .
2754	Sets the ACL .
2755	Serializes the service properties .
2756	Write retention policy .
2757	Write CORS properties to XML .
2758	Writes metrics to XML .
2759	Writes the logging properties .
2760	Aborts a copy of a file .
2761	Add a share snapshot .
2762	Creates a copy of a file .
2763	Creates a new HTTP request .
2764	Delete a share .
2765	Get the ACL for the given URI .
2766	Performs a GET request .
2767	Get file properties .
2768	Gets the range ranges for a given URI .
2769	Get share properties .
2770	Get share statistics .
2771	Get uri query builder .
2772	Gets the properties for the given URI .
2773	Performs a list of shares .
2774	Sets the share metadata .
2775	Set directory metadata .
2776	Create a directory .
2777	Delete a directory .
2778	Get the properties of a directory .
2779	List files and directories .
2780	Creates a PUT request .
2781	Performs a PUT request .
2782	Resize a file .
2783	Sets the metadata for the given URI .
2784	Sets a file metadata .
2785	Creates a snapshot of a share .
2786	Set file properties .
2787	Close the stream .
2788	Dispatch a read request to the file .
2789	Reads the stream .
2790	Reads data from the stream .
2791	Reset the file .
2792	Skip the given number of bytes .
2793	Runs a Blob from the view .
2794	Runs the queueing task .
2795	Runs the start of the table .
2796	Runs the sample payload .
2797	Outputs a text view .
2798	Prints an exception .
2799	Prints the start of the sample .
2800	Prints the information about a sample .
2801	Calculates the canonicalization of a table .
2802	Gets the last result of the request .
2803	Checks if the blob is correct .
2804	Updates the iterator .
2805	Start a copy of a Blob .
2806	Start a copy of a Blob .
2807	Start a copy of a file .
2808	Start a copy operation .
2809	Start a copy of a source .
2810	Start a copy operation .
2811	Creates a new storage .
2812	Creates a new file .
2813	Delete empty file .
2814	Download the contents of the file .
2815	Download file ranges .
2816	Opens an existing file .
2817	Opens a file in the storage .
2818	Creates a file output stream .
2819	Uploads a file from a file .
2820	Uploads a file from a file .
2821	Uploads a text content .
2822	Uploads a text content .
2823	Uploads a stream to the server .
2824	Upload a range of bytes to a file .
2825	Perform a put operation .
2826	Resizes this file .
2827	Uploads a stream to the storage .
2828	Uploads a file to the storage .
2829	Gets the parent name from the resource address .
2830	Gets the share .
2831	Appends a single URI to a single URI .
2832	Get the blob name from a URI .
2833	Returns the canonical path from the given credentials .
2834	Returns the container name from the given resource address .
2835	Get file name from resource address .
2836	Returns the share name from the given resource address .
2837	Returns the table name from the given resource address .
2838	Returns the resource name from the given resource address .
2839	Gets the container URI .
2840	Returns the share URI .
2841	Parse a query string .
2842	Generates a shared access signature for a blob .
2843	Generates a shared access signature hash for the given resource .
2844	Generates a shared access signature hash for a table .
2845	Creates a directory .
2846	Creates a new file if it exists .
2847	Delete a file .
2848	Check if the file exists .
2849	List files and directories .
2850	Get the share .
2851	Removes messages from a queue .
2852	Delete a message .
2853	Download attributes from a URI .
2854	Creates a HTTP GET request .
2855	Peek messages from the queue .
2856	Retrieve messages from a queue .
2857	Updates a message .
2858	Set the ACL .
2859	Get the ACL for the given URI .
2860	Split a string into a list of strings .
2861	Split a string into an EnumSet .
2862	Update the key .
2863	Gets the Hmac256 hash .
2864	Validate IP address .
2865	Decode a string .
2866	Encodes a byte array .
2867	Validate a base64 string .
2868	Validate container name .
2869	Validates a blob name .
2870	Validates a file name .
2871	Validates a table name .
2872	Gets a list of shared shares .
2873	Gets a list of shared shares .
2874	Gets a list of shares .
2875	Gets a list of shared shares .
2876	Gets the list of shares with the given prefix .
2877	Set the disabled entity cache .
2878	Get the date from the request .
2879	Returns the metadata for the given request .
2880	Returns true if the request is encrypted .
2881	Extracts the storage error information from the given reader .
2882	Parse the error details .
2883	Parse JsonErrorException .
2884	Gets the access identifiers from the given stream .
2885	Get the copy state of the request .
2886	Get file share attributes .
2887	Get the file directory attributes .
2888	Get file attributes .
2889	Returns the HTTP verb for the given operation type .
2890	Fire an event .
2891	Fire sending request event .
2892	Fire the response received .
2893	Fire the error handler .
2894	Fire the request completed event .
2895	Fired event handler .
2896	Assert that the continuation token is valid .
2897	Asserts that the given parameter is in the range .
2898	Asserts that the given value is greater than equal .
2899	Validate the max execution time timeout .
2900	Gets the remaining timeout .
2901	Determines whether a URI is a path style .
2902	Checks if the given URI is a host name .
2903	Formats the given ETag .
2904	Generates a new storage exception .
2905	Returns the standard header value for the given header .
2906	Parse a string from a string .
2907	Parses the given string into a DateTime object .
2908	Sanitize a URI to another URI .
2909	Log an HTTP error message .
2910	Log a HTTP response .
2911	Trims the end of a string .
2912	Trim the start of a string .
2913	Parses a date string .
2914	Gets the list location for the given token .
2915	Populates the default request options .
2916	Reads a string from the field .
2917	Reads a string .
2918	Reads a boolean value .
2919	Reads a date .
2920	Reads a double .
2921	Read a UUID .
2922	Reads an integer .
2923	Reads a long value .
2924	Read a URI .
2925	Read a delimiter .
2926	Try to peek a delimiter .
2927	Reads a field .
2928	Creates a retry policy .
2929	Returns true if the next segment is available .
2930	Sets the class type .
2931	Sets the resolver .
2932	Write a MIME boundary .
2933	Write MIME boundary closure .
2934	Writes the multipart content type .
2935	Adds a value to the query .
2936	Add a URI to the URI .
2937	Adds a header to the request .
2938	Create a HTTP URL connection .
2939	Creates a DELETE request .
2940	Get service properties .
2941	Returns the user agent .
2942	Sets the metadata for the given URI .
2943	Set service properties .
2944	Close the stream .
2945	Commits the contents of the file .
2946	Dispatch a write request to the file .
2947	Flush the buffer .
2948	Wait for the task to complete .
2949	Write data to the stream .
2950	Writes the stream to the stream .
2951	Write data to the stream .
2952	Get DNS name .
2953	Try to configure the dev storage account .
2954	Try to configure the service account .
2955	Creates a CloudAnalytics client .
2956	Creates a CloudBlobClient .
2957	Create a CloudFileClient .
2958	Create a CloudQueueClient .
2959	Creates a cloud table client .
2960	Generate the shared access signature .
2961	Generate the request id for the given entry .
2962	Generates the request id for the given table name .
2963	Initialize the request result .
2964	Translate an exception into a StorageException .
2965	Process the response .
2966	Parse the error details .
2967	Delete a table entity .
2968	Inserts a table entity .
2969	Inserts an entity into this table .
2970	Inserts an entity into the table .
2971	Merges the given entity into this table .
2972	Removes an entity from the table .
2973	Remove all entities from the collection .
2974	Replace the given entity .
2975	Checks if a single query has a single query .
2976	Lock the batch key .
2977	Creates a file .
2978	Delete a file if it exists .
2979	Download permissions for a file .
2980	Generate the shared access signature for this file .
2981	Upload permissions .
2982	Upload permissions .
2983	Returns the qualified URI for this file .
2984	Basic INSERT
2985	Performs basic batch operation .
2986	Perform basic query
2987	Sets up a new customer .
2988	Delete a customer .
2989	List all tables .
2990	Generates the list of tables for the given prefix .
2991	Execute a query on the table .
2992	Generate an iterator for the given query .
2993	Populate the version1 log .
2994	Get a list of queues from a stream .
2995	Translate HTTP status code .
2996	List all queues .
2997	List all queues .
2998	Retrieves a list of Queue objects .
2999	Gets a list of all queues in this queue .
3000	Lists all queues in the queue .
3001	Add a configuration to the XML catalog .
3002	Returns the unique ID for the given ID .
3003	Set the phase of the schema .
3004	Set the error handler .
3005	Sets the variable resolver .
3006	Set the schema resolver .
3007	Sets the entity resolver .
3008	Returns the bounding schema .
3009	Validates that the schema is complete .
3010	Applies schema validation to the given XML node .
3011	Resolve rule content .
3012	Returns the Schema for the given Schema .
3013	Returns the preprocessedSchema for the given Schema .
3014	Gets the preprocessed preprocessed schema .
3015	Reads a PSR schema .
3016	Returns the query binding for the given schema .
3017	Creates a preprocessed schema .
3018	Writes an XML element to a file .
3019	Writes an XML element to a stream .
3020	Writes an XML element to a writer .
3021	Applies a Schematron to the given XML resource .
3022	Applies the given schema to the given node .
3023	Removes a variable from the map .
3024	Removes all variables from the list .
3025	Returns a list of all the failed assertions that were failed .
3026	Gets the list of FailAssertions that are not equal .
3027	Returns a list of all the results that were successful .
3028	Returns a list of all the results that are not equal .
3029	Gets the list of FailAssertions .
3030	Sets the error level .
3031	Returns the query binding for the given name .
3032	Get a query binding by name .
3033	Loads a map of XPath functions .
3034	Formats a message .
3035	Formats a message into a string .
3036	Checks if the given node is valid .
3037	Check if a node is valid .
3038	Checks if a given resource is valid .
3039	Checks if the given source is valid .
3040	Creates a Schematron instance from the given schema .
3041	Get a Schematron XSLT provider from a given resource .
3042	Gets the error text .
3043	Gets the location of the given element .
3044	Writes an error message .
3045	Reads a PSActive from an XML element .
3046	Reads an AssertReport from XML .
3047	Reads an XMLDiagnostic from XML .
3048	Reads a PSD configuration from an XML element .
3049	Reads a directory from an XML file .
3050	Read an emphron from an XML element .
3051	Reads the extensions from an XML element .
3052	Reads an XMLInclude from an XML element .
3053	Reads an XML from an XML element .
3054	Reads a PSR name from an XML element .
3055	Reads an XMLNS from an XML element .
3056	Reads a PSP from XML .
3057	Reads the parameters from an XML element .
3058	Reads the pattern from an XML element .
3059	Reads the phase from an XML document .
3060	Reads a PSR rule from XML .
3061	Reads a schema from an XML schema .
3062	Reads a PSM from an XML document .
3063	Reads the title from an XML document .
3064	Reads a PSR value from an XML element .
3065	Creates a map based on the schema .
3066	Creates a regex that matches the given value .
3067	Mark the request as authorised .
3068	Checks if the request is authorized .
3069	Define a deferred action .
3070	Gets the deferred action for this request .
3071	Execute the authorization and execute the authorization .
3072	Checks if the given action is a deadbolt action .
3073	Gets the list of role names .
3074	Checks if the given subject is a role .
3075	Returns a filter function that checks if the given content is present .
3076	Returns the names of the given roles .
3077	Converts permissions to an array of strings .
3078	Returns a list of all strings in the given array .
3079	Determines whether or not a view is restricted .
3080	Overwrite the buffer to the output buffer .
3081	Convert the input buffer to the output .
3082	Set the bit mask .
3083	Encodes the given string into the buffer .
3084	Encodes a string using the given encoding .
3085	Maps the given name to the given encoder .
3086	Returns the encoder for the given context .
3087	Appends a char array to the output array .
3088	Encodes a string .
3089	Flushes the buffer to the writer .
3090	Flushes the leftovers .
3091	Observes a sensor .
3092	Returns the value of the given property .
3093	Execute a query .
3094	Builds a URL for the given query .
3095	Fetch the Sonar status from the given URL .
3096	Fetch the Sonar status from the given URL .
3097	Parses the response .
3098	Extracts artifacts from a build .
3099	Process uploads .
3100	Computes the identifier for the given transfer key .
3101	Computes the unique identifier for the origin .
3102	Validate an artifact .
3103	Checks if the build task is a config dependency .
3104	Returns true if the build task is direct to this build task .
3105	Parses a JSONPNC config file .
3106	Monitor artifacts .
3107	Update the final state of the build set .
3108	Gets the build task .
3109	Prompts to monitor the repository .
3110	Merges two edges into another graph .
3111	Reads a file from a file .
3112	Reads a string from a stream .
3113	Start a release .
3114	Clean up tasks .
3115	Returns the task id for the given build id .
3116	Creates a copy of a collection .
3117	Clean up temporary builds .
3118	Setup build repositories .
3119	This method is called when the notification is received .
3120	Add listeners to the websocket .
3121	Creates an artifact with the specified id .
3122	Sets the SSL client .
3123	Delete a temporary build .
3124	Delete a build config set .
3125	Builds a build set .
3126	Checks if the build set is empty .
3127	Get the environment driver .
3128	Returns true if the build configuration is not archived .
3129	Load build configurations .
3130	Store the given build result .
3131	Initialize build record builder .
3132	Returns a predicate that matches the build configuration .
3133	Returns true if the given URL is secured .
3134	Save artifacts .
3135	Saves the buildConfigSet record .
3136	Gets the build configuration for the given build configuration set .
3137	Determine if the current build is an ARB .
3138	Determines whether the given build is an ARB .
3139	Add a listener to the list of listeners .
3140	Returns the request parameters .
3141	Recursively collect dependency configurations .
3142	Create a BuildSetTaskTask .
3143	Creates a BuildSetTaskTask .
3144	Fill the build task set for the given build task .
3145	Gets all artifacts for a given build record .
3146	Add a trailing slash .
3147	Deserializes a string from a string .
3148	Serializes an integer array .
3149	Adds a task to the queue .
3150	Adds a task to the queue .
3151	Execute all ready tasks .
3152	Gets the given build task .
3153	Checks if the artifact origin is trusted .
3154	Add a build record .
3155	Remove a build record .
3156	Deletes a temporary build .
3157	Gets all dependency dependencies .
3158	Adds a dependency .
3159	Removes a dependency .
3160	Retrieve the clone name for a given date .
3161	Gets the configuration for the given provider .
3162	Instantiate an EmbeddedTomcat .
3163	Register an embedded server .
3164	Unregisters an embedded server .
3165	Store a value in the store .
3166	Find an extension by name .
3167	Concatenates a path to a path .
3168	Creates a new context .
3169	Parse a cookie value .
3170	Creates a HttpHeader .
3171	Creates a new HttpHeader .
3172	Creates a web app context .
3173	Execute all hooks .
3174	Process all annotations .
3175	Process a field .
3176	Creates a new Apache http client .
3177	Creates a default apache client .
3178	Handle body body .
3179	Creates the request URI .
3180	Adds headers to the request .
3181	Handle form parameters .
3182	Handle request body .
3183	Handle cookies .
3184	Creates an async http client .
3185	Parses Java version .
3186	Maps the given inputs to the given collection .
3187	Concatenates a list of values into a list .
3188	Returns a list of all elements in the given list .
3189	Creates a new HTTP response .
3190	Instantiate an EmbeddedJetty .
3191	Creates a default http client .
3192	Creates a new OkHttpClient .
3193	Find all fields of the given type .
3194	Finds the static fields of the given type .
3195	Returns a list of all static methods .
3196	Finds all static fields in the given type .
3197	Finds all static methods that match the given class .
3198	Sets the value of a field .
3199	Returns the value of the given field .
3200	Invokes the method .
3201	Format a date .
3202	Format a time .
3203	Adds headers to the request .
3204	Checks if value is blank .
3205	Removes the prefix from the given string .
3206	Joins a collection of strings .
3207	Handle query parameters .
3208	Handle request body .
3209	Handle form parameters .
3210	Adds cookies to the request builder .
3211	Adds headers to the request builder .
3212	Append a map to a string .
3213	Append a value to a string .
3214	Append a formatted value to a string .
3215	Gets the dialog from the distributed cache .
3216	Put a dialog into the cache .
3217	Remove a dialog from the cache .
3218	Initializes the stack after loading .
3219	Adds a transaction to the server .
3220	Prints the given entry .
3221	Loads the LDAP file .
3222	Dump the LDAP directory .
3223	Executes the LDAP command .
3224	Configure the component .
3225	Adds the dependencies to the container .
3226	Builds the list of URLs from the given classpath .
3227	Gets the dependencies for the given server type .
3228	Returns the artifact artifact for the given server type .
3229	Returns the server type .
3230	Creates a DSML format writer .
3231	Open a DSML file .
3232	Configure the server .
3233	Starts the server .
3234	Stops the UnboundID server .
3235	Returns the next record record .
3236	Execute the input source .
3237	Start the server .
3238	Stops the server .
3239	Create the root entry for the given partition .
3240	Start the OpenDJ server .
3241	Stops the server .
3242	Prints an entry .
3243	Gets the server type .
3244	Get the LDAP configuration .
3245	Send a metric builder .
3246	Report a metric .
3247	Reads a geometry type .
3248	Reads a point .
3249	Read a line string .
3250	Read a Polygon .
3251	Reads a MultiPoint .
3252	Reads a MultiLineString .
3253	Reads a MultiPolygon .
3254	Read a geometry collection .
3255	Read a circular string .
3256	Reads a compound curve .
3257	Read a curve .
3258	Read a polyhedral surface .
3259	Read a TIN .
3260	Read a Triangle .
3261	Write a Geometry to a ByteWriter .
3262	Write a point to a ByteWriter .
3263	Write a LineString to a ByteWriter .
3264	Write a polygon .
3265	Write a MultiPoint to a ByteWriter .
3266	Write a MultiLineString to a ByteWriter .
3267	Write a MultiPolygon .
3268	Write a geometry collection .
3269	Write a circular string .
3270	Write a compound curve .
3271	Write a curve polygon .
3272	Write a PolyhedralSurface .
3273	Write a TIN .
3274	Writes a triangle .
3275	Returns the code for the given geometry .
3276	Returns the code for the given geometry type .
3277	Get geometry type .
3278	Checks if the file exists .
3279	Gets the gcd .
3280	Shortcut to abbreviate a string .
3281	Creates a JsonValue .
3282	Creates a JMX object .
3283	Parses a string representation of the given string .
3284	Returns the value of the specified setting .
3285	Reads a JSON object from a string .
3286	Returns the value associated with the given name .
3287	Returns an iterator over the members of this Member .
3288	Resolves a placeholder for the given property .
3289	Returns the version of the JmxTransAgent .
3290	Read from a string .
3291	Adds a value to the list .
3292	Sets the value at the given index .
3293	Gets the value at the specified index .
3294	Returns a list of values .
3295	Returns an iterator over all values in the collection .
3296	Processes an event .
3297	Publish an event .
3298	Publish an event .
3299	Removes a child .
3300	Add a tag to the tag map .
3301	Adds a value to the attribute map .
3302	Invoke the attribute change listeners .
3303	Adds all values to the attribute map .
3304	Removes the attribute values from the attribute map .
3305	Push all the listeners to the list of listeners .
3306	Removes a value from the attribute map .
3307	Adds a value to the attribute set .
3308	Adds all values to the attribute set .
3309	Remove all values from the attribute set .
3310	Removes all attributes from the attribute set .
3311	Add a value change listener to this attribute .
3312	Checks if the attribute value is valid .
3313	Sets the RGBA color .
3314	Sets the color of the color .
3315	Sets the value of the color .
3316	Sets the color of the image .
3317	Load all tag classes .
3318	Returns the first substring of the given string .
3319	Clones a String array .
3320	Checks if the string contains whitespace characters .
3321	Strip whitespace .
3322	Removes all children of this tag .
3323	Add inner HTML tags .
3324	Removes all children from the list .
3325	Remove a child tag .
3326	Appends children to the list of children .
3327	Initializes the attributes .
3328	Get attribute by name .
3329	Mark the attribute as owner tag .
3330	Initialize the tag builder .
3331	Returns the children of this element .
3332	Returns the first child of the child .
3333	Returns the number of children of this node .
3334	Checks if a child tag contains a child tag .
3335	Gets the opening tag .
3336	Inserts the content of this tag .
3337	Set the value of the attribute .
3338	Replace all values in the attribute set .
3339	Add a WebSocket push listener .
3340	Remove a WebSocketPushListener .
3341	Removes from the browser context .
3342	Gets the tag repository .
3343	Set the nonce for the given value .
3344	Sets the border style .
3345	Sets the attribute value .
3346	Merge data array into a byte array .
3347	Removes all CSS properties from the cache .
3348	Returns true if the given CSS property contains the given CssProperty .
3349	Gets a map of CSS properties .
3350	Find tags by attribute .
3351	Finds a tag by attribute .
3352	Retrieves all attributes from the root tags .
3353	Builds all attributes from the tags stream .
3354	Find all attributes of a tag .
3355	Checks if a given tag exists .
3356	Checks if an attribute exists .
3357	Builds all attributes from the given tags .
3358	Gets the child text .
3359	Writes bytes to the stream .
3360	Sets the context path .
3361	Sets the context file .
3362	Adds the context to the template file .
3363	Returns a filter that matches the given content type .
3364	Returns a Filter that matches the given filter .
3365	Checks to see if there are no whitespace .
3366	Checks if the token is a line space .
3367	Parse a string .
3368	Scan all tokens .
3369	Parse a command .
3370	Parses a string .
3371	Prints the help message .
3372	Determines the maximum length of the command .
3373	Create a zip file .
3374	Reads the contents of a file .
3375	Creates a Filter .
3376	Writes an integer to the output stream .
3377	Write a 32 bit integer .
3378	Writes bits to the stream .
3379	Prints a list of SyntacticMarkers .
3380	Prints the SyntacticMarkers .
3381	Extracts the syntactic markers from the binary tree .
3382	Get the parent of this node .
3383	Get all parents of this node .
3384	Gets the ancestor of this node .
3385	Appends two ints to the array .
3386	Appends two arrays .
3387	Appends two arrays to the same length .
3388	Appends a new array to the array .
3389	Adds all the elements of the given list .
3390	Converts a collection of strings to a String array .
3391	Converts a collection of integers into an array .
3392	Sort a list of children .
3393	Determines whether the given children are sorted .
3394	Compares two arrays .
3395	Returns the build schema .
3396	Create the template extension point .
3397	Activate default plugins .
3398	Determine the system root directory .
3399	Determines the local root directory .
3400	Read a configuration file .
3401	Returns the instance of the given module .
3402	Start the application .
3403	Activate modules .
3404	Prints the error message .
3405	Checks if the task is ready .
3406	Parses the given arguments .
3407	Split a string into a Map .
3408	Returns the parent of the given type .
3409	Returns the parent of the given child .
3410	Substitute the given item in the given mapping .
3411	Returns the content type for the given file .
3412	Gets the entry for the given file .
3413	Prints the contents of the given entry .
3414	Print a binary file .
3415	Reads a list of items .
3416	Convert a path to a Trie .
3417	Creates a command descriptor .
3418	Gets the repository root directory .
3419	Resolve package dependencies .
3420	Scan all tokens .
3421	Creates a syntax error .
3422	Log the stack trace .
3423	Returns the indentation string .
3424	Execute the instruction .
3425	Adds a string to the array .
3426	Returns the name of the attribute .
3427	Gets the stack map attribute .
3428	Gets the local variable type attribute .
3429	Find the stack map for the given offset .
3430	Find the stack map index .
3431	Find the index of the stack map .
3432	Builds the initial map .
3433	Update the stack map entries .
3434	Updates the instructions in the instruction list .
3435	Set the current stack map .
3436	Print the stack map .
3437	Create a new stack map attribute .
3438	Returns the class name of the given type .
3439	Generate a stack map from a type .
3440	Generates a type from the stack map .
3441	Creates a local variable scope .
3442	Calculate stack types .
3443	Convert access flags to string .
3444	Convert instruction list to string .
3445	Convert attribute name to string .
3446	Checks that the method is valid .
3447	Checks that all methods are valid .
3448	Dumps the stack trace information .
3449	Dump methods .
3450	Add a new instruction to the start of the instruction .
3451	Returns the string representation of the constant pool .
3452	Resets the local variables for this method .
3453	Convert a type to a class .
3454	Adds a new type to an array of types .
3455	Sets the frame to the stack .
3456	Inserts the instruction into the instruction list .
3457	Prints the instruction map .
3458	Build instruction list .
3459	Calculate the live stack map types .
3460	Finds the position of the given string .
3461	Reads data from the stream .
3462	Flush the output .
3463	Creates a new WebSocket client .
3464	Checks if the ad is a valid ad .
3465	Returns the ad view for the given index .
3466	Called when an AdFailedAdFailed is failed .
3467	Gets the ad request .
3468	Gets the number of ads to publish .
3469	Returns the original content position for the given position .
3470	Returns the index for the given position .
3471	Checks if the given position is available .
3472	Checks if the given position is available for the given position .
3473	Returns the wildcard type of the given type .
3474	Checks if the given element is generics .
3475	Write a package name .
3476	Compress a type .
3477	Begin initializer .
3478	End a type .
3479	Emit a single line comment .
3480	Emit an annotation value .
3481	Ends a method .
3482	Returns the type of the given class .
3483	Print modifiers .
3484	Gets the psi class from the context .
3485	Finds and removes a method from the given parameters .
3486	Generate Psi classes .
3487	Ensures that the class implements the PsiClass interface .
3488	Checks if the given element is a class .
3489	Checks if the given type is of the given type .
3490	Returns the type of the given type .
3491	Get the package name .
3492	Gets the binary name for the given type .
3493	Generates a writer for the given fields .
3494	Returns true if the given type is a public class .
3495	Checks if the given type is public .
3496	Computes the determinant of the determinant matrix .
3497	Searches for the specified class .
3498	Creates a new Matrix .
3499	Converts a byte array to a list of bytes .
3500	Get a set of tuples from the client .
3501	Serializes the given key .
3502	Serializes a hash key .
3503	Deserializes a set of values from a set of values .
3504	Deserialize hash keys .
3505	Deserialize hash values .
3506	Deserialize a hash map .
3507	Deserialize a hash list .
3508	Deserializes a HashSet into a Map .
3509	Converts a domain address to a list of addresses .
3510	Parses a host address .
3511	Parses a port number .
3512	Sets the value of a key .
3513	Sync all data from redis
3514	Get a set of tuples from the client .
3515	Stop the leader .
3516	Returns a string representation of the executor .
3517	Set quorum .
3518	Checks the permission for the given path .
3519	Joins the parameters .
3520	Expire a key at the specified timestamp .
3521	Removes a value from the specified key .
3522	Increment the value of a key .
3523	Add a key to a set of scores .
3524	Range by score .
3525	Range by score .
3526	Saves the slave of the slave .
3527	Set a configuration parameter .
3528	Gets a bit at the specified offset .
3529	Gets the value of a key .
3530	Close the event selector .
3531	Process the HbMain process .
3532	Processes the selector .
3533	Loop through all sessions .
3534	Register a session .
3535	Adds a default header .
3536	Evaluates the number of requests .
3537	Returns the value of the given key .
3538	Returns the value of the given key .
3539	Add encoding .
3540	Create a stubbing .
3541	Encodes the claims .
3542	Creates a new Date object .
3543	Create a new token .
3544	Gets an error dialog .
3545	Connect to Google account .
3546	Logout and clear the session .
3547	Check if the edge cache is invalid .
3548	Get Baragon service status .
3549	Gets the global state of the global state .
3550	Get all load balancer groups .
3551	Returns a list of all available base paths .
3552	Retrieves a request by ID .
3553	Get all queued requests .
3554	Ensure that all targets are registered .
3555	Deregisters a list of targets .
3556	Ensure that the target group is equal to the target group .
3557	Ensure that all targets have been registered .
3558	Sets the href attribute .
3559	Creates a new MemberKey instance .
3560	flush line separator
3561	Flush the tag .
3562	Extracts the content from the given buffer .
3563	Read segment lines .
3564	Creates a new regex pattern pattern .
3565	Decorator for decorator .
3566	Unwraps the given instance .
3567	Builds the engine .
3568	Add a template locator .
3569	Add a resolver .
3570	Registers the given callback callback .
3571	Add a value converter .
3572	Add a context converter .
3573	Capitalize the given string .
3574	Append the given sequence .
3575	Builds the cache from the cache .
3576	Push the container to the stack .
3577	Adds a segment to the container .
3578	Validate the stack segment .
3579	Splits a string into an iterator .
3580	Decorator for decorator .
3581	Flush the buffer .
3582	Finds a field by its name .
3583	Registers the given helpers .
3584	Register a helper .
3585	Read segments before rendering .
3586	Invalidate all fragments .
3587	Returns the formatter for the given value .
3588	Get the local storage instance .
3589	Returns the session storage .
3590	Clears the cache .
3591	Returns true if the given key exists .
3592	Put a value into storage .
3593	Removes a value from the cache .
3594	Creates a new storage key .
3595	Creates a storage key .
3596	Creates a new storage key .
3597	Obtains the size of the button .
3598	Obtains the color from a typed array .
3599	Obtains the activated color from the typed array .
3600	Obtains the pressed color .
3601	Obtains the disabled color .
3602	Obtains the icon .
3603	Obtains the visibility animation duration .
3604	Adapts the shadow button .
3605	Adapts the image button size .
3606	Adapts the image button background .
3607	Creates the state of the state list .
3608	Creates a background drawable .
3609	Creates a new DrawableDrawable .
3610	Creates a background drawable .
3611	Creates a background drawable .
3612	Get the size of the button button .
3613	Animation animation .
3614	Creates an animation listener .
3615	Sets the size of the image .
3616	Obtains the thickness of the progress bar .
3617	Initializes the Paint .
3618	Initializes the angle animation .
3619	Creates a new angle property .
3620	Initializes the sweep animation .
3621	Creates a new sweep property .
3622	Creates an animation listener .
3623	Initializes the floating action buttons .
3624	Creates a listener for the floating action button .
3625	Initializes the hideFloating action button .
3626	Creates a listener that will be displayed on the button .
3627	Initializes the chips .
3628	Creates a new chip listener .
3629	Handle the state of the saved instance .
3630	Obtains the text .
3631	Obtains the color of the chip .
3632	Obtains the color .
3633	Obtains the icon .
3634	Obtains the closeable .
3635	Obtains the icon icon .
3636	Add a close listener .
3637	Remove a close listener .
3638	Sets the background color .
3639	Sets the close button .
3640	Returns a map of partialials .
3641	Get the script engine .
3642	Returns a map of the layout mappings .
3643	Check if a class is present .
3644	Gets the value of an annotation .
3645	Gets an input stream .
3646	Gets an input stream for the given names .
3647	Render a template .
3648	Add aliases .
3649	Add alias .
3650	Returns the listener for the given id .
3651	Runs a synchronous operation .
3652	Checks if the method is a callback .
3653	Called when a service is resumed .
3654	Called when an event is finished .
3655	Invokes an untagged operation .
3656	Invokes the specified operation with the specified tag .
3657	Cancel an operation .
3658	Cancel a tag .
3659	Checks if the given tag is running .
3660	Called when the operation finished .
3661	Store the result of the operation .
3662	Deliver the delivery delivery .
3663	Deliver the service result .
3664	Logs a message .
3665	Cancel an operation .
3666	Synchronized operation .
3667	Cancel all operations .
3668	Checks if an operation is cancelled .
3669	Runs the given operation .
3670	Creates an empty result result .
3671	Run asynchronous operation .
3672	Runs a synchronous synchronous synchronously .
3673	Sets the result of the result .
3674	Main entry point .
3675	Gets the modules .
3676	Main entry point .
3677	Checks if the current line is valid .
3678	Initialize the event listener .
3679	Get the MBeanServerConnection .
3680	Close the JMX server .
3681	Initializes the search text .
3682	Main entry point .
3683	Gets the validator .
3684	Returns a list of all the columns in the table .
3685	Returns a list of column names .
3686	Returns a list of all packages .
3687	Returns the content of the file .
3688	Writes the content of the file .
3689	Find a table by its name .
3690	Find a bean by its name .
3691	Returns the reference properties of a bean .
3692	Gets the visible properties for the given one .
3693	Update the versionable .
3694	Add a history .
3695	Configure the connection .
3696	Adds a SpecSpecNode to the database .
3697	Write a VmId to the database .
3698	Returns the IssueType for the given type .
3699	Get a single setting by its name .
3700	Returns a DataEntry object for the given name .
3701	Creates a BooleanEntry with the given name .
3702	Creates a new DataEntry .
3703	Display a workflow .
3704	Refresh the workflow .
3705	Recursively walk a component tree .
3706	Receive an upload file .
3707	Gets the address strength for this address .
3708	Convert a descriptor to a file descriptor .
3709	Gets the blockscoreError from the RetrofitError .
3710	Sets the answer .
3711	Determine the MD5 descriptor .
3712	Returns true if the given path matches the given path .
3713	Add an answer to the question .
3714	Gets the list of matches .
3715	Returns the address .
3716	Create a question set .
3717	Retrieve a question set .
3718	Returns the date of the birth date .
3719	Gets the address .
3720	Returns the incorporation date .
3721	Returns a list of candidates for the current revision .
3722	Search for a watchlist .
3723	Sets the date of the candidate .
3724	Sets the address .
3725	Retrieve a person .
3726	Retrieve a candidate from the API .
3727	Returns the authorization header .
3728	Returns the date of the birth end date .
3729	Gets the type parameter of the class .
3730	Gets a String property .
3731	Gets a boolean property .
3732	Returns the relative path to the given entry .
3733	Returns the error type .
3734	Returns the validation error type .
3735	Flushes all files in the cache .
3736	Recursively synchronizes the given file descriptor .
3737	Returns the cache for the given file descriptor .
3738	Creates the hierarchy for the given files .
3739	Find the number of unused port .
3740	Gets the value of a parameter .
3741	Set parameter values .
3742	Sets a parameter value .
3743	Adds a parameter value to the context .
3744	Gets the target command .
3745	Get the value of a wizard element
3746	Registers an OIDO ID .
3747	Creates a new node component .
3748	Creates a new Subtree .
3749	Returns the complement of the given set flavorors .
3750	Creates a set of indexes .
3751	Add an entry to the map .
3752	Removes the given key from the map .
3753	Get a random ID
3754	Gets the width of the current user .
3755	Sets the sort direction .
3756	Sets the column order order .
3757	Returns a list of fields sorted by column order .
3758	Handles the component tag .
3759	Replace the component tag body body body .
3760	Handles the click .
3761	Get a config instance .
3762	Renders the EAF header items .
3763	Renders all required Requests .
3764	Create a new tree node
3765	Returns the data line for the classification .
3766	This method is called by this class .
3767	Expand the current classification .
3768	Adds children to the parent class .
3769	Returns the list of class instances for the given instance .
3770	Returns the cache key .
3771	Add a highlight expression .
3772	Add start tags to the view .
3773	Add end tags .
3774	Creates a component with the given HTML tag .
3775	Gets the loading component .
3776	Called when the dialog is closed .
3777	Inserts a new wizard element .
3778	Gets the previous wizard element .
3779	Adds the parameters to the wizard .
3780	Evaluate an instance of the given instance .
3781	Adds the elements of the given UIClass .
3782	Updates the class elements .
3783	Adds a cell to the form .
3784	Evaluate the UI field .
3785	Evaluate the field set .
3786	Gets the elements of the class .
3787	Generate sub menu item
3788	Gets the events for a menu item .
3789	Get image from menu item
3790	Gets the behavior for the given class .
3791	Adds the component to the container .
3792	Gets the children of the given node .
3793	Make a request and return the response .
3794	Make a request and return the response .
3795	Perform an HTTP request .
3796	Performs an HTTP request .
3797	Converts the given body into an object .
3798	Renders the header .
3799	Handles validation errors .
3800	Launch a job .
3801	Add reference prefixes .
3802	Add additional metadata .
3803	Add a promotion category .
3804	Add a synonymCategories to this query .
3805	Add blacklist categories .
3806	Initializes the callbacks .
3807	Handles the request .
3808	Gets the resource stream .
3809	Returns the script script for the download frame .
3810	Send a keepalive message .
3811	Initialize the keepAlive task .
3812	Returns a list of UIUserSession objects .
3813	Process the component tag body .
3814	Handles rendering of the component .
3815	Creates a new embedded link .
3816	Parse the response .
3817	Parses the response .
3818	Parse the response .
3819	Parse the response .
3820	Gets the list of events for this field .
3821	Handles the component tag .
3822	Run the status of the job .
3823	This method is called when a component is called .
3824	Renders the header .
3825	Sets the default menu .
3826	Get the label of the button
3827	Gets the editable component .
3828	Sets the HTML header .
3829	Returns a list of DateTime objects as a String .
3830	Returns a list of DateTime objects .
3831	This method is called when the calendar is called .
3832	Destroy the executor service .
3833	Handles the click event .
3834	Sets the action tag .
3835	Handle multipart request .
3836	Resets the number of elements in the form .
3837	Initialize the login handler .
3838	Performs a filter on the request .
3839	Checks if login is valid .
3840	Called when the browser is executed .
3841	Gets the persistence script .
3842	Returns the list of menu items .
3843	Gets the menu for the menu .
3844	Creates a sub menu .
3845	Returns a string representation of the data .
3846	This method is used to get the data from the grid .
3847	Create the dialog .
3848	Handles the event .
3849	Adds a value to the table .
3850	Returns the index of the input .
3851	Adds a new row to the table .
3852	Adds children to the model .
3853	Returns the help text for a command .
3854	Creates a new UIStructur instance .
3855	Initialise this instance .
3856	Expand all child children .
3857	Sorts the model .
3858	Check if the table is hidden .
3859	Checks if the given instance is allowed for this instance .
3860	Execute the listener .
3861	Reset the value of the label .
3862	Binds the component to the component .
3863	Returns the data table for the index search .
3864	Executes the specified events .
3865	Returns the rendered content of the script .
3866	Gets the command for the given UUID .
3867	Returns the label of the button .
3868	Removes all unfinished tasks that are finished .
3869	Returns an iterator over all the jobs in the list .
3870	Returns the bridge with the given job name .
3871	Returns true if the user is logged in .
3872	Lazy login .
3873	Performs login .
3874	Logout the session .
3875	Add indexes to the query builder .
3876	Returns the model for the given instance id .
3877	Adds the components to the form .
3878	Creates a new MarkupContainer .
3879	Converts the date field values to HTML .
3880	Converts the field values to the field values .
3881	Handles validation errors .
3882	Validate field values .
3883	Evaluate form element .
3884	Validates the form .
3885	Check if the form is required .
3886	Returns a list of form panels .
3887	Shows the dialog .
3888	Initialize the servlet .
3889	Returns the complement of the given set of resources .
3890	Creates a set of resource types .
3891	Checks if the field is a checkout .
3892	Checks if the given field is access to the menu .
3893	Returns the type of the type .
3894	Initialize the menu .
3895	Reset the label .
3896	Removes all pages from the session .
3897	Handles a component tag .
3898	Sets the page menu .
3899	Returns the EFaps Session .
3900	Called when a request is started .
3901	Called when a request is finished .
3902	Registers a user session .
3903	Registers the activity .
3904	Adds a message connection to the session .
3905	Invalidate a session
3906	Removes a user session .
3907	Returns a set of all users .
3908	Returns the list of connections for a user .
3909	Returns the connection for the given session id .
3910	Returns the cache for the user session .
3911	Initialize the cache .
3912	Gets the current command .
3913	Executes the specified event type .
3914	Adds the behaviors for this field .
3915	Returns the width of the widget .
3916	Evaluate the label for the given field .
3917	Returns true if the field is a table field .
3918	Creates a new field configuration .
3919	Checks if the widget is visible .
3920	Respond to the response .
3921	Initializes the button .
3922	Gets the choices for the given input .
3923	Gets the datetime formatter .
3924	Handle GET request .
3925	Reads the menu .
3926	Returns the submenues for the given instance .
3927	Initialise the filter .
3928	Gets the list of instances .
3929	Add a filter to the table .
3930	Adds a filter to the table .
3931	Returns the filter filter .
3932	Returns a list of filter choices for the given field .
3933	Returns all the status of the given type .
3934	Store the filters for the table .
3935	Remove a filter .
3936	Creates a grid cell .
3937	Gets the list of instances .
3938	Returns the filter for the given field .
3939	Gets the command .
3940	Get title .
3941	Checks if the given filter is a date filter .
3942	Returns the row with the given id .
3943	Prints a file to a file .
3944	Returns the query string .
3945	Returns a list of all the nodes that are excluded .
3946	Determines if the node is applied .
3947	Fills the dimension provider .
3948	Build the hierarchy parameters .
3949	Checks if the given file is a root element .
3950	Check if the session has expired .
3951	Refreshes the cache entry .
3952	Clones the given object to the given object .
3953	Initialize the cache .
3954	Sets the cache properties .
3955	Get the cache property .
3956	Calculates the cache key .
3957	Get the cache properties .
3958	Sets an entry in the cache .
3959	Deletes a key from the cache .
3960	Deletes a local cache .
3961	Delete all caches .
3962	Delete all local caches .
3963	Returns the label for the given element .
3964	Sort the list of tabs .
3965	Generate a generic form .
3966	Generate HTML for a form element .
3967	Returns the rendered HTML for the given input element .
3968	Returns the HTML for the given element .
3969	Register a new application context .
3970	Creates a SelectInputInput .
3971	Builds all attributes for the given tag .
3972	Build the maximum length of the criterion .
3973	Get accepted content types .
3974	Checks if the session is a valid session .
3975	Creates a new CursorConverter .
3976	Initializes the loaders .
3977	Returns the profile of the given profile .
3978	Sets the listener .
3979	Get the document builder factory .
3980	Creates a DOM source from a file .
3981	Get a schema from a file .
3982	Parses the given XML file .
3983	Validates the given XML schema .
3984	Validates the given XML document .
3985	Adds a child to the list .
3986	Removes an attribute .
3987	Generate the velocity template .
3988	Returns the XML representation of this tag .
3989	Add service if not present
3990	Get service by device
3991	Handles the start command .
3992	Get all triggers for the given appIdentifier .
3993	Delete all triggers for the given app package .
3994	Delete a trigger .
3995	Get a single trigger from the database .
3996	Validate access token .
3997	Converts XML string to an object with XStream .
3998	Convert an XML string to an object .
3999	Converts XML string to JSON .
4000	Invokes the specified method .
4001	Checks if the current thread is valid .
4002	Log a method call .
4003	Loads an object from an input stream .
4004	Creates a new XML tag .
4005	Checks if the given query string matches the query string .
4006	Dispatch an invocation .
4007	Unregister a service .
4008	Generates a unique query id .
4009	Called when an instance is lost .
4010	Stop the query .
4011	Stop all queries .
4012	Connect to the component .
4013	Create a standard display view .
4014	Creates a spinner .
4015	Create a date view .
4016	Create a tag view .
4017	Creates a standard edit view .
4018	Send a notification .
4019	Returns the XML representation of this object .
4020	Sets the content view of the notification view .
4021	Returns the friendly name of the given field .
4022	Kill the scheduler .
4023	Initializes SPF context .
4024	Broadcast an event .
4025	Creates a view fragment .
4026	Initializes the profile data .
4027	Starts a crop .
4028	Handles the cropping image .
4029	Converts an object to a JSON string .
4030	Add a tag .
4031	Sets the tags .
4032	Save the given trigger .
4033	Delete a trigger .
4034	Start the notification .
4035	Start the local service .
4036	Add an attribute .
4037	Invokes the given method .
4038	Sets the selected items .
4039	Sets the selected indices .
4040	Returns a list of all the selected strings .
4041	Returns the selected indices .
4042	Refresh the view .
4043	Shutdown the application .
4044	Insert new line separator .
4045	Write to buffer .
4046	Converts an object to a JSON string .
4047	Loads the service .
4048	Binds a service to a service .
4049	Unbinds the service .
4050	Handle an error .
4051	Refresh the list of triggers .
4052	Adds a person to the database .
4053	Removes a person from the database .
4054	Register service .
4055	Get the app authorization by appId
4056	Registers a new application .
4057	Unregisters a service .
4058	Retrieves a person from the registry .
4059	Called when a message is received .
4060	Adds a device to the list of clients .
4061	Connect to the server .
4062	Returns the value of the given field .
4063	Checks if the field is modified .
4064	Stop the given tag .
4065	Stop all search queries .
4066	Lookup the given identifier .
4067	Gets a profile field from the profile .
4068	Returns the baseInfo for the given persona .
4069	Get a list of nodes from a XML string .
4070	Calls the main thread .
4071	Gets the personAuth from the received token .
4072	Create a new entry for the sent request .
4073	Creates a new entry for a contact request .
4074	Checks if a user exists in the database .
4075	Confirm a user is confirmed .
4076	Add a closing tag .
4077	Add an empty tag .
4078	Add an opening tag .
4079	Delete a file .
4080	Creates a temporary directory .
4081	Returns the proxy object .
4082	Returns the class for the given class .
4083	Computes the signature of a method .
4084	Creates a new instance of the given algorithm .
4085	Reset the connection .
4086	Creates a URL builder .
4087	Add a query parameter .
4088	Returns the value of a parameter .
4089	Add a query parameter .
4090	Adds parameters to the request .
4091	Adds a parameter to the request .
4092	Adds a query to the query .
4093	Validate the query string .
4094	Add a query .
4095	Rebuild the query parameters .
4096	Replace a parameter with the given name .
4097	Invokes the given method .
4098	Creates a shutdown proxy .
4099	Convert an object to a boolean .
4100	Gets the stack trace .
4101	Remove trailing trailing slash .
4102	Waits for shutdown .
4103	Add an empty tag .
4104	Add an attribute .
4105	Add attributes to the map .
4106	Extract information from a URL .
4107	Returns the root resource .
4108	List all resources .
4109	Creates a resource with the given relative path .
4110	Create a resource .
4111	Starts the process .
4112	Creates an external command .
4113	Start the command .
4114	Executes a command .
4115	Calculate the current tick .
4116	Returns the elapsed time .
4117	Add a tag .
4118	Add a tag .
4119	Indent the given block .
4120	Returns the end time of the given timeout .
4121	Add a new entry to the directory .
4122	Create a new RAM directory .
4123	Encodes a string into a string .
4124	Decodes a string .
4125	Creates a LeafResource from the given resource .
4126	Reverse the given array .
4127	Converts a set of types to an EnumSet .
4128	Load properties from a file .
4129	Load properties from a reader .
4130	Returns the string representation of the given time units .
4131	Compares two timespan objects .
4132	Returns the size of this MemorySize .
4133	Returns a new MemorySize .
4134	Compares the memory size .
4135	Creates a new MemorySize .
4136	Execute a callable .
4137	Adds a marker to the map .
4138	Removes a marker .
4139	Creates a bitmap descriptor from a view .
4140	Returns true if the file is related to the given file .
4141	Emit all events to the given subscriber .
4142	Get the state of the selected state .
4143	Initializes the ViewPager .
4144	Add all views .
4145	Returns the message for the given exception .
4146	Sets the number of unique IDs .
4147	Returns the integer value for the given character .
4148	Convert a char to a byte .
4149	Gets the timestamp .
4150	Gets the MAC fragment .
4151	Sets a property .
4152	Set Facebook user credentials .
4153	Set socialize credentials .
4154	Merge two properties .
4155	Creates a share .
4156	Handle non network share .
4157	Add a comment .
4158	Deletes a comment .
4159	Add a comment .
4160	Get a comment .
4161	Get a list of comments .
4162	Get comments by user .
4163	Get comments by entity key .
4164	Get comments by application .
4165	Shows a comment view .
4166	Parse a JSON string .
4167	Open a URL with the given parameters .
4168	Parse JSON response .
4169	Shows an alert .
4170	Log a message .
4171	Gets the runtime type of the given value .
4172	Sets the entity key .
4173	Builds the profile image url .
4174	Called when the image is changed .
4175	Generate an OAuth message .
4176	Normalizes the request parameters .
4177	Authorizes an activity .
4178	Authorize a user .
4179	Checks if the intent is valid .
4180	Logout session .
4181	Dialog dialog .
4182	Serialize a date .
4183	Link to the Activity .
4184	Link to the user .
4185	Link to the user .
4186	Post an entity to the user .
4187	Extend access token .
4188	Get the current permissions .
4189	Get the hash keys for the given package .
4190	Saves an entity .
4191	Gets the specified entity .
4192	Gets the specified entity .
4193	Get the list of entities .
4194	Get the list of entities .
4195	Create context menu menu .
4196	Subscribe to an entity .
4197	Checks if an entity is subscribed .
4198	Checks if the notification is registered .
4199	Returns the next token .
4200	Reads the next token .
4201	Reads an escape character .
4202	Shows the share dialog .
4203	Shows the share dialog .
4204	Creates a share via email .
4205	Creates a sharing link .
4206	Use this method to share the given entity .
4207	Send a share via SMS .
4208	Share a social network .
4209	Get a share .
4210	Get share list .
4211	Get a list of shares by user .
4212	Get share list by entity key .
4213	Get shares by application .
4214	Add a listener to the entity .
4215	Follows the given entity .
4216	Use this method to remove an entity .
4217	Gets the specified entity .
4218	Gets a specific link .
4219	Checks if an entity is liked .
4220	Get the likes of a user .
4221	Gets the likes of a given entity .
4222	Get Facebook Facebook .
4223	Collect the header parameters from the request .
4224	Collect body parameters .
4225	Collect query parameters .
4226	Creates a JsonWriter .
4227	Returns the default implementation of the default implementation .
4228	Replace new lines with new lines
4229	Shows the view bar .
4230	Returns a string representation of the address .
4231	Get the user s user .
4232	Get actions by application .
4233	Get actions by user id .
4234	Get actions by entity key .
4235	Get actions by user and entity .
4236	Closes a closing bracket .
4237	Sets the name of the given name .
4238	Parse a JSON document .
4239	Parses a JSON stream .
4240	Link to the user .
4241	Sets credentials for a consumer .
4242	Tweet a tweet .
4243	Performs a GET request .
4244	Send a Tweet .
4245	Tweet a photo .
4246	Gets a bitmap from a bitmap .
4247	Performs a POST request .
4248	Sets the text size .
4249	Sets the local image path .
4250	Saves a user asynchronously .
4251	Get a user by id .
4252	Save user settings .
4253	Sets the auto post preferences .
4254	Authenticate the user .
4255	Authenticate for read .
4256	Gets a static field .
4257	Returns the field name of the given value .
4258	Called when a message is received .
4259	Handle broadcast intent .
4260	Encodes a byte array into a byte array .
4261	Decode a base64 encoded byte array .
4262	View the given entity .
4263	Updates the notification settings .
4264	Decode form parameters .
4265	Converts a collection into a Map .
4266	Convert a header value to a header element .
4267	Put an object into the cache .
4268	Put an object into the cache .
4269	Put an object into the cache .
4270	Returns the value of the given key .
4271	Get the object associated with the given key .
4272	Checks if the given key exists .
4273	Extend the TTL for the specified key .
4274	Loads an image by its name .
4275	Loads an image from a URL .
4276	Parses a tag string .
4277	Formats a map of tags .
4278	Fixes encoded tags after prefix .
4279	Creates a new builder with the given name .
4280	Returns a string representation of the request .
4281	Convert domain name to human readable string .
4282	Converts a string to a string .
4283	Returns the value of a query parameter .
4284	Gets the query parameters for the given name .
4285	Returns the absolute path of this URL .
4286	Builds a URL from a scheme .
4287	Build a URL from a scheme .
4288	Convert the URI to a human readable string .
4289	Queries a stream with the specified parameters .
4290	Queries a stream with named parameters .
4291	Get the fields of a class .
4292	Fetches the next row .
4293	Gets the value of the given row .
4294	Returns the result as a local date .
4295	Gets the value of the given row .
4296	Gets the ZonedDateTime value for the given row .
4297	Returns the offset of the given row .
4298	Returns the offset of the given row .
4299	Gets the value of a column .
4300	Crop a Cdn path .
4301	Crop the crop center
4302	Crop a crop color .
4303	Resize the width of the specified width .
4304	Resize a Cdn path .
4305	Scale a crop image .
4306	Scale the crop center
4307	Use this API to blur the given strength .
4308	Returns a new Cdn path .
4309	Gets the preview of the image .
4310	Get project information .
4311	Get a file .
4312	Delete a file .
4313	Save a file .
4314	Execute a request .
4315	Checks if the response status code is valid .
4316	Creates a URI from a URL .
4317	Injects the object graph .
4318	Creates a new ApiBuilder .
4319	Find class by name .
4320	Loads a class by its name .
4321	Determines the next character in the given buffer .
4322	Add a word .
4323	Append char to StringBuilder .
4324	Get the value of the given value .
4325	Checks if the given class is a class .
4326	Copy the parse info to the zip file .
4327	Hash an instruction group .
4328	Ignore case insensitive case .
4329	Matches a unicode character .
4330	Matches a unicode range .
4331	Returns a rule that matches the specified characters .
4332	Matches the given characters .
4333	Creates a new rule .
4334	Creates a string that matches the specified characters .
4335	Ignore case insensitive case .
4336	Creates a new Optional .
4337	Adds an optional rule to a rule .
4338	Creates a repeat matcher .
4339	Creates a new rule .
4340	Creates a Rule from a string .
4341	Converts an object to a rule array .
4342	Convert an object to a rule .
4343	Push a value to the stack .
4344	Pop a value from the stack .
4345	Pop a value from the stack .
4346	Returns the value of the next element .
4347	Pushes a value to the stack .
4348	Returns true if the given context matches the given context .
4349	Returns true if this index is overlaps .
4350	Returns true if this index contains the given index .
4351	Returns a new IndexRange with the given range .
4352	Returns the bytecode for the given parser class .
4353	Add a word .
4354	Unwrap a Matcher .
4355	Register a listener .
4356	Post the given object .
4357	Get the sub context of this matcher .
4358	Returns a rule that matches the given number of repetitions .
4359	Returns the maximum number of repetitions .
4360	Creates a new repetition rule .
4361	Creates a new rule .
4362	Returns a Rule with the given range .
4363	Creates a new set of characters .
4364	Gets the deployment descriptor .
4365	Gets the authenticationConfiguration value .
4366	Returns a list of BW services .
4367	Adds the monitoring events to the list of monitors .
4368	Gets the global variable .
4369	Gets the base service .
4370	Gets the value of the event .
4371	Checks if the project directory exists .
4372	Read dependencies from a file .
4373	Launch a binary binary .
4374	Gets the value of the action .
4375	Delete a directory .
4376	Gets the final value of the final property .
4377	Gets the rulebase .
4378	Adds an alias to the list .
4379	Process a file .
4380	Gets the rest of the rest .
4381	Gets the value of the NVPairType property .
4382	Adds a dependency .
4383	Removes a dependency from the given pom .
4384	Checks if a dependency exists .
4385	Returns true if the given dependency is a dependency .
4386	Add a project to a project .
4387	Checks if the given path exists in the given pom .
4388	Get the artifact file .
4389	Executes the goal .
4390	Extracts the contents of a file .
4391	Updates repository instances .
4392	Gets the value for this message .
4393	Creates a new instance of the given class .
4394	Creates a proxy class .
4395	Creates an instance of the constructor .
4396	Start a statement executor .
4397	Start a callable statement .
4398	Start a result set timer .
4399	Mark the result set as a metric .
4400	Creates a new proxy .
4401	Wrap a connection .
4402	Wraps a statement .
4403	Wraps a prepared statement .
4404	Wrap a callable statement .
4405	Returns the type of the result set .
4406	Builds the arguments .
4407	Builds the command arguments .
4408	Executes the command .
4409	Executes the command .
4410	Sets the language .
4411	Gets the message for the given key .
4412	Converts a command line into a string .
4413	Formats HTML to HTML .
4414	Gets the cowFace from the command line .
4415	Gets the cow face .
4416	Extracts the template from the given string .
4417	Loads the given cow file .
4418	Converts the input stream to a string .
4419	Get the input stream from the given path .
4420	Get the input stream from the system .
4421	Checks if the given file is a cowfile .
4422	Converts the given filefile to an input stream .
4423	Get the cowfile for a given folder .
4424	Gets the files for the given folder .
4425	Get the row from the given mode .
4426	Sets the eyes .
4427	Sets the tongue language .
4428	Checks if the given mode is known .
4429	Parse command line arguments .
4430	Show command line help .
4431	Formats a bubble message .
4432	Wrap a message .
4433	Formats a message .
4434	Set the wordwrap .
4435	Returns the longest line length of a message .
4436	Log a message .
4437	Log a message .
4438	Log a list of messages .
4439	Joins the messages .
4440	Main entry point .
4441	Get all schemas in the database .
4442	Returns the schema for the given name .
4443	Initialize the git context .
4444	Resync the watcher .
4445	Gets the list of tables .
4446	Get a table by name .
4447	Writes the buffer to the given writer .
4448	Gets the catalog from the catalog .
4449	Get a catalog by name .
4450	Get the buffer of the buffer .
4451	Logs the given encoder .
4452	Logs the given writer .
4453	Creates a lexical position for the given file .
4454	Appends a string to the buffer .
4455	Write a segment to the writer .
4456	Returns the character at the given position .
4457	Returns the map of SQL data types .
4458	Get the column map .
4459	Get a column by name .
4460	Gets the list of columns .
4461	Returns the column at the given ordinal position .
4462	Get the imported tables .
4463	Returns the set of imported tables .
4464	Adds a new segment .
4465	Logs a character .
4466	Writes a string to the log .
4467	Put values into target values .
4468	Move the camera to the given location .
4469	Animate camera to include the given location .
4470	Draw a circle to a given rectangle .
4471	Creates an animation from a rectangle .
4472	Get the arc motion .
4473	Returns a StyleSpan .
4474	Creates a view of the view .
4475	Scale out the view of the view .
4476	Scale the view to the next next step .
4477	Returns the count of the count of the given uri .
4478	Concatenates an address to a string .
4479	Connect to Google API client .
4480	Creates a Fragment transaction .
4481	Returns the foreground color .
4482	Sets the listeners for the view .
4483	Returns the name of the given level .
4484	Creates an animation for the given source .
4485	Show soft input .
4486	Hide soft input .
4487	Checks if the cursor is in the cursor .
4488	Returns the number of documents .
4489	Returns the first integer in the cursor .
4490	Returns the first long value of the cursor .
4491	Get the first string of the cursor .
4492	Returns an array of ints .
4493	Returns all long values in the cursor .
4494	Returns all strings in the cursor .
4495	Loads the image .
4496	Returns the orientation of the view .
4497	Gets the span count .
4498	Add a rule to the view .
4499	Checks if the current position is read .
4500	Returns the current Looper .
4501	Returns the values of the given array .
4502	Returns the values of the given array .
4503	Check if the adapter has changed .
4504	Checks if the view is a drawable .
4505	Updates the current view .
4506	Updates the delete operation .
4507	Sets the elements for the given URI .
4508	Returns the number of bytes in the specified width .
4509	Returns a copy of the bitmap .
4510	Checks if the intent is available .
4511	Send an email to the specified list .
4512	Sets the default content view .
4513	Finds a fragment by pane .
4514	Creates a Bundle .
4515	Creates a new Intent .
4516	Creates a new intent .
4517	Creates a new intent .
4518	Creates a new intent .
4519	Get the size of the action bar .
4520	Get the background of the action bar .
4521	Checks if the current network is connected .
4522	Cleanup the difference between two lists .
4523	Creates a patch of diffs .
4524	Apply a function to the given value .
4525	Converts a SOAP message to a string .
4526	Get the profile properties for a profile .
4527	Checks if the given element is valid .
4528	Checks if the method is a getter method .
4529	Returns the value of the specified property .
4530	Checks if the class has no arguments .
4531	Gets the annotation from the given instance .
4532	Checks if method is nonVoid .
4533	Apply the context to the output stream .
4534	Returns a set of all wrappers for the given type .
4535	Returns a set of implicit context data providers .
4536	Returns a list of all registered types .
4537	Initializes the connector map .
4538	Sends the error report to the collector .
4539	Returns a set of connectors names .
4540	Gets the properties for the given connector name .
4541	Creates a connector .
4542	Checks if the given connector is configured .
4543	Checks if the method is a getter .
4544	Returns true if the method is public .
4545	Returns true if the method is compatible with the given method .
4546	Returns the field of the given method .
4547	Checks if the given method name is a getter method .
4548	Capitalizes the first character of a string .
4549	Decompose the first character of a string .
4550	Strip the getter prefix .
4551	Sends the error report to the client .
4552	Apply the given instance to the given context .
4553	Creates an instance of the given type .
4554	Gets the current profile .
4555	Open properties file .
4556	Sets the manual context overrides .
4557	Creates a TraceeContextBuilder .
4558	Checks if the given method throws an exception .
4559	Checks if the given class is a class .
4560	Gets the types of the given method signature .
4561	Checks whether the given Throwable is processed .
4562	Checks if the given size is equal .
4563	Assert that the value is not null .
4564	Returns the dropdown view .
4565	Reserve a term .
4566	Register a new term .
4567	Initializes the vocabulary .
4568	Returns the representation of this DataSet .
4569	Resolve a relative URI .
4570	Merge a path into a path .
4571	Remove dot segments from a path .
4572	Creates a new name .
4573	Returns the name of the given class .
4574	Creates a wildcard .
4575	Creates a wildcard .
4576	Creates a media type from a given type .
4577	Converts a media type to a header .
4578	Run the resolver .
4579	Compare this term .
4580	Returns a list of names for the given attachment id .
4581	Add a new attachment name .
4582	Returns the next attachment name .
4583	Creates a new name provider .
4584	Parses the given media type .
4585	Checks that the given string is valid .
4586	Returns the next character in the sequence .
4587	Run the update process .
4588	Convert this URI to a URI .
4589	Close the input stream .
4590	Determines if the given character is a name .
4591	Returns true if the given character is a name .
4592	Validates a token .
4593	Set the media type .
4594	Registers an adapter class .
4595	Creates an adapter for the given type .
4596	Adapts an object to a type .
4597	Adds a prefix to the map .
4598	Returns a new ImmutableNamespace with the given prefixes .
4599	Escape a character sequence .
4600	Execute a query .
4601	Add a name provider .
4602	Returns the name provider for the given container name .
4603	Unwraps the application .
4604	Returns true if the path is out of the path .
4605	Returns a new path with the given directory .
4606	Returns a new path with the given file .
4607	Parse the relative segments .
4608	Gets the type parameter for the given class .
4609	Creates a PrimitiveObjectFactory .
4610	Creates a VariantList .
4611	Resolve a single Individual .
4612	Returns a matcher that matches the given value .
4613	Returns a matcher that matches the given value .
4614	Returns a Matcher that matches the given value .
4615	Returns a matcher that matches the given value .
4616	Returns a matcher that matches the given value .
4617	Get Measures by year .
4618	Gets a measure .
4619	Get a CandidateRating .
4620	Get a rating .
4621	Get election by year
4622	Get election by zip
4623	Gets the stage candidates for a given stage .
4624	Get office address by office state
4625	Get Offices by type
4626	Get offices by level
4627	Get Offices by type
4628	Get Offices by branch level .
4629	Gets the counties of a specific state .
4630	Get the cities for the given state .
4631	Returns a list of officials associated with a local person .
4632	Perform a query .
4633	Get the state of a specific state .
4634	Returns a list of candidates for a given office type .
4635	Returns a list of candidates for the given zip .
4636	Get AddlBio .
4637	Retrieves information about a given candidate .
4638	Get a list of candidates for a given last name .
4639	Get a list of candidates for a given election .
4640	Get a list of candidates for a district .
4641	Gets the committees by type .
4642	Get a committee .
4643	Get committee members
4644	Get leadership information for a given state .
4645	Returns a list of leaders associated with the given leader .
4646	Sleeps the number of seconds .
4647	Start the timer .
4648	Wait until the current thread has finished .
4649	Close the thread .
4650	Merge the given stream .
4651	Split a map into a list .
4652	Creates a new CollectorSizer .
4653	Sorts the given map .
4654	Returns the first value of the given map .
4655	Checks if the given test is null .
4656	Assert that a test is null .
4657	Checks if the given value is not null .
4658	Checks if a set is empty .
4659	Checks if an array is null or empty .
4660	Get a string from a resource file .
4661	Get a set of words from a resource file .
4662	Gets the last modified time .
4663	Converts the input stream to a string .
4664	Get the bytes from the input stream .
4665	Reads a file from a file .
4666	Get the absolute path of a resource .
4667	Generate a random string .
4668	Generates a random long number .
4669	Join two arrays .
4670	Split a set into a list .
4671	Gets the start of the month .
4672	Returns the month end of the given time .
4673	Trims the given text .
4674	Capitalizes a string .
4675	Returns a string with the given separator .
4676	Joins a set of items .
4677	Get words from text .
4678	Trims the text down to the given size .
4679	Trim the text down to the given size .
4680	Converts a string to a list of characters .
4681	Returns the relevance of the given string .
4682	Unquote text .
4683	Returns the timezone of the given timezone .
4684	Checks if the filter has a specific tag .
4685	Checks if the given severity is a violation .
4686	Sets the icon for the given severity level .
4687	Sets the icon for the given severity level .
4688	Gets the list of tags .
4689	Set the next node .
4690	Sets the previous node and cleans up it .
4691	Finds a node from a socket .
4692	Finds all nodes in the given host .
4693	Get all nodes that are not dead .
4694	Add a node to this node .
4695	Removes a node from the socket .
4696	Mark the node as alive .
4697	Mark the node as dead .
4698	Send an event to the given node .
4699	Get the checkstyle version
4700	Configure resource locator .
4701	Builds an object from the given attributes .
4702	Creates the property values for the given attributes .
4703	Returns the current sequence for the given name .
4704	Compares this nodeID .
4705	Get the list of events .
4706	Returns a sorted set of packages in the given class .
4707	Sets the value of a property .
4708	Sets the value of a field .
4709	Returns a list of all methods of the given class .
4710	Invokes a method .
4711	Main entry point .
4712	Gets the value of a configuration attribute .
4713	Display rules summary .
4714	Returns true if the given rule matches the given rule .
4715	Creates a key for received events .
4716	Initialize the client .
4717	Wait until the cluster is started .
4718	Wait until the cluster is sent .
4719	Wait until the cluster is connected .
4720	Wait until the connection has finished .
4721	Close the cache .
4722	Prints the state of the cluster .
4723	Main entry point .
4724	Returns an ordered list of properties .
4725	Returns the hash code for the given version .
4726	Returns the total number of pages .
4727	Returns a list of all entries for the given page .
4728	Prepare the result data .
4729	Store results .
4730	Create a new object .
4731	Compare two tags .
4732	Migrate broken locales .
4733	Calculates the minHash of the given topic
4734	Gets the minimum minHash of the given xml .
4735	Converts XML string to minHash
4736	Validate topic relationships .
4737	Updates the content of the topic .
4738	Validates all tags in the topic .
4739	Sort classes by package .
4740	Executes the validation rule .
4741	Splits a string into a list of strings .
4742	Splits a string into a Pattern .
4743	Checks if the given string contains a prefix .
4744	Returns the factory class for the given class .
4745	Sends a message .
4746	Send a message .
4747	Executes the given function .
4748	Execute the query .
4749	Handles an exception .
4750	Formats the results .
4751	Add error message .
4752	Returns the error message .
4753	Checks if a socket is alive .
4754	Execute a thread .
4755	Checks if the given list contains resources .
4756	Merge deprecated info .
4757	Adds a limit to the query string .
4758	Gets the first locator from a string .
4759	Gets the size of a region .
4760	Checks if the cache is a valid cache .
4761	Remove all keys from a region .
4762	Perform a retry operation .
4763	Generate a buffered image .
4764	Draw the icon .
4765	Gets the buffered reader .
4766	Wait for a line .
4767	Execute the command .
4768	Parse command line arguments .
4769	Print help message .
4770	Constructs the CLI options .
4771	Aggregate single cluster member data .
4772	Checks if the given property is null .
4773	Parse command line arguments .
4774	Prints the help message .
4775	Constructs the CLI options .
4776	Find the command index .
4777	Extracts the launcher arguments .
4778	Extract command arguments .
4779	Main entry point .
4780	Print a debug message .
4781	Start the timer .
4782	Creates a set of regions .
4783	Processes the expiration policy .
4784	Sets the indentation token .
4785	Get the package s package .
4786	Start an event .
4787	Extract the ports set .
4788	Find and create a pool .
4789	Returns the name of the event source .
4790	Returns the category name for the given event source .
4791	Add a frame to the stack .
4792	This method is called when a method is executed .
4793	Returns a string representation of the class name .
4794	Sets the package extractors .
4795	Adds packages to the list of packages .
4796	Update the image data .
4797	Sets the ui file name .
4798	Extract the limit from the query string .
4799	Format the query results .
4800	Checks that the given object is valid .
4801	Runs the given process and waits for the given process .
4802	Runs a process with the start of the process .
4803	Runs a process with the given parameters .
4804	Stop the given process .
4805	Start the process .
4806	Redirects the process to the given process .
4807	Wait for startup confirmation .
4808	Generate a template file .
4809	Processes the cluster .
4810	Checks if the given type is a valid type .
4811	Checks if the method is compatible with the given interface .
4812	Get the implementation of the interface method .
4813	Get the type of a generic type .
4814	Resolves a type variable .
4815	Get the actual type arguments of an interface .
4816	Populate the pool .
4817	Adds the description description for the method .
4818	Retrieve a classifier from the pool .
4819	Get the destination .
4820	Gets the consumer consumer .
4821	Get producer producer .
4822	Gets the session .
4823	Get the connection .
4824	Sends a text message to the specified destination .
4825	Listen for messages to the specified destination .
4826	Receive a message from a destination .
4827	Stop the connection .
4828	Handle load from user data .
4829	Gets the pool configuration .
4830	Sets the ID of the model .
4831	Sets the model .
4832	Creates a new instance of the current thread .
4833	Removes a model from the model .
4834	Returns the event manager for the given event bus .
4835	Creates a clustered event manager .
4836	Convert a string to a string .
4837	Decodes the given map from the given map .
4838	Create service group .
4839	Close the server .
4840	Forward an event .
4841	Returns the annotations of the given method .
4842	Find an annotation .
4843	Returns a resource constructor for the given class .
4844	Returns the root resource class from the given class .
4845	Setup the classifiers .
4846	Gets the object .
4847	Returns the serialized byte array .
4848	Writes the serialized object to a file .
4849	Returns the leaf score for the given class distribution .
4850	Get the provider URL .
4851	Gets the context .
4852	Get the connection supplier .
4853	Builds a JMS service .
4854	Gets the type for the given jackson type .
4855	Returns the type of the given type .
4856	Perform introspection .
4857	Inspect the serializer .
4858	Inspects the given enum serializer .
4859	Inspect the given map serializer .
4860	Initializes the frame1 .
4861	Initialize frame3 .
4862	Inserts the frame to the database .
4863	Generates a random random number .
4864	Returns the next number .
4865	Main entry point .
4866	Convert a number to a string .
4867	Returns the random choice from the distribution .
4868	Returns the relative path to the given file .
4869	Add a file to the repository .
4870	Commit a commit .
4871	Moves a file from the working tree .
4872	Remove the current working directory .
4873	Checks if a file is valid .
4874	Checks if two lists are equal .
4875	Checks that an index is in the range .
4876	Get a client instance .
4877	Sets the preferred client type .
4878	Adds a repository to the repository .
4879	Add a file to a repository .
4880	Adds a file to a repository .
4881	Adds a file to the repository .
4882	Add a path to a repository .
4883	Adds a list of paths to a repository .
4884	Adds a list of files to the repository .
4885	Adds the dry run option to the response .
4886	Compare two releases .
4887	Add a repository to a repository .
4888	Adds a list of paths to a repository .
4889	Executes the commit processor .
4890	Set the git path .
4891	Creates a list of parameters .
4892	Returns the definition for the given function offset .
4893	Get the value of the parameter array .
4894	Checks if the given path exists .
4895	Creates a new branch .
4896	Delete a branch .
4897	Rename a branch .
4898	Get a list of branches .
4899	Commit all commits .
4900	Convert an object to a type .
4901	Converts an Integer to a Boolean .
4902	Converts a boolean value to an Integer .
4903	Converts a long value to a string .
4904	Returns the message for the given code .
4905	Returns the file belonging to the specified index .
4906	Adds a file to the list of deleted files .
4907	Add a file to the deleted files not updated .
4908	Add a modified file to the commit .
4909	Add a modified file to the list of files not updated .
4910	Add a new file to the new file .
4911	Add a new file to the given file .
4912	Add a file to untracked files .
4913	Creates a new parameter .
4914	Get the value of the parameter .
4915	Sets the verbose command .
4916	Sets the option to use .
4917	Sets the option to use .
4918	Sets the option to use .
4919	Sets the option to use .
4920	Gets the type of the function .
4921	Evaluate a function .
4922	Gets the value of the injection array .
4923	Executes the given function on the given arguments .
4924	Converts the given result into an object .
4925	Evaluate a value .
4926	Gets a branch of a repository .
4927	Delete a branch .
4928	Delete a branch .
4929	Rename a branch .
4930	Commit a commit .
4931	Get current branch .
4932	Clone a given ref .
4933	Get the status of the repository .
4934	Delete a repository .
4935	Gets the file at the given index .
4936	Gets the file from the specified index .
4937	Gets the file from the specified index .
4938	Gets the file from the specified index .
4939	Gets the file from the specified index .
4940	Get the file from untracked files .
4941	Gets the file from the specified index .
4942	Returns the error message .
4943	Returns the error message .
4944	Reset a repository .
4945	Adds a file to the list .
4946	Adds a copied file to the list of files .
4947	Adds a file to the list .
4948	Sets the files changed .
4949	Sets the lines deleted .
4950	Sets the lines inserted in the line .
4951	Executes the mv command .
4952	Returns the index of the first character in the given string .
4953	Get a DataResultSet from a Service .
4954	Returns a list of commits .
4955	Add a commit .
4956	Add a file to the commit .
4957	Executes a repository .
4958	Executes a repository .
4959	Clone a repository .
4960	Executes a repository .
4961	Executes a git checkout .
4962	Executes a git checkout .
4963	Checks if refType is valid .
4964	Gets the children of this file .
4965	Gets the file at the specified index .
4966	Clone a repository .
4967	Clone a repository .
4968	Sets a comment .
4969	Set delete options .
4970	Inject the service method .
4971	Injects service method .
4972	Sets the current branch .
4973	Clone a working directory .
4974	Executes the filter .
4975	Returns a list of all the resources for the given classloader .
4976	Sets the reset state .
4977	Adds a method to the map .
4978	Performs a filter .
4979	Close the database connection .
4980	Consume a database connection .
4981	Execute a query .
4982	Execute a raw query .
4983	Builds the command line .
4984	Returns the file at the specified index .
4985	Returns the deleted file at the specified index .
4986	Returns the modified file at the specified index .
4987	Returns the status of the file .
4988	Gets the head element .
4989	Gets the list of files .
4990	Returns the number of files .
4991	Returns true if the string matches the given string .
4992	Updates the list after the given entry .
4993	Removes the last entry from the cache .
4994	Removes expired entries from the cache .
4995	Updates the list after the given entry .
4996	Returns true if the first occurrence of the first occurrence of the given startAt .
4997	Get access token .
4998	Adds a request to the OAuth request .
4999	Get authorization URL .
5000	Performs the finish .
5001	Finish the project .
5002	Creates a new control .
5003	Returns the default java package name .
5004	Sets the visibility of the group .
5005	Returns the debug log message .
5006	Returns the query parameters as a list .
5007	Creates a new Palette .
5008	Add a new palette item .
5009	Gets the palette items .
5010	Configure table resize .
5011	Returns the selected template .
5012	Get the template string
5013	Load the saved preferences .
5014	Saves the last saved preferences .
5015	Sets the selected template .
5016	Updates the viewer input .
5017	Creates a new criterion .
5018	Creates a new member of the given path .
5019	Creates a new criterion with the given value .
5020	Creates the field editors .
5021	Gets the last path component .
5022	Initialize the container name .
5023	Validates the page .
5024	Checks if the content type is valid .
5025	Add default extension .
5026	Gets the project from the given path .
5027	Returns the user id .
5028	Creates a new page .
5029	Saves the current editor .
5030	Called when a resource is changed .
5031	Shows the page .
5032	Creates a log message .
5033	Convert an object to a string .
5034	Insert a timeline item .
5035	Insert a timeline item .
5036	Inserts a timeline item .
5037	Validates the response .
5038	Returns the query string for the given criteria .
5039	Get the template store .
5040	Gets the template context registry .
5041	Returns the action associated with the given action ID .
5042	Create a DBI instance .
5043	Appends the limit and offset to the SQL statement .
5044	Creates a new named property .
5045	Creates a new named property .
5046	Creates a named property .
5047	Creates a new Literal .
5048	Creates a new URI .
5049	Creates a new Literal .
5050	Creates a QName .
5051	Initializes the CORS request handler .
5052	Creates a new entity .
5053	Initializes the field .
5054	Updates the entity .
5055	Close all connections .
5056	Start the server .
5057	Validates an object .
5058	Validate arguments .
5059	Subscribe to a listener .
5060	Unregisters a listener .
5061	Unsubscribes a subscriber .
5062	Unsubscribe a message .
5063	Send a message .
5064	Get the next message from the queue .
5065	Returns true if the receipt contains a receipt .
5066	Removes a receipt from the list .
5067	Log a dead event .
5068	Converts a source object to a target class .
5069	Returns the priority for the given lines .
5070	Executes the command .
5071	Inject opts from cli parser
5072	Adjusts the arguments .
5073	Migrate a personality .
5074	Tag request .
5075	Handle the actual request .
5076	Handle preflight request .
5077	Sets the java dependency options .
5078	Checks if the Java home directory exists .
5079	Filter lines by regexp .
5080	Returns a string representation of the packages .
5081	Writes the dependencies to the output file .
5082	Compares this instanceProviderProvider .
5083	Gets the IOUtils class .
5084	Get image utils .
5085	Get the PriceUtils class .
5086	Get resource utils .
5087	Get the ZipUtils class .
5088	Get the digest utils .
5089	Gets the StringUtils class .
5090	Gets the resource service .
5091	Get the pricing service .
5092	Gets the instance service .
5093	Creates a set of objects for the given file .
5094	Creates a digital object .
5095	Stores the details of a property .
5096	Ensures the metadata for the given migrations .
5097	Creates a new SourceDetailDetailDetailDetail object .
5098	Validates that the threshold is valid .
5099	Validate arguments .
5100	Validates the given instance .
5101	Checks if a class is loaded .
5102	Check if the given URI is accepted .
5103	Loads a file .
5104	Run the command .
5105	Read all commands from the file .
5106	Post processing .
5107	PreProcesses the request .
5108	Migrate the database .
5109	Validate the database .
5110	Get the history of the database .
5111	Initialize the database .
5112	Converts a list of lines to a list of statements .
5113	Finds a NotableLink by its name .
5114	Update the link .
5115	Parses the given arguments .
5116	Send a command to the server .
5117	Returns a formatted string representation of the source code .
5118	Returns the link associated with the given link .
5119	Send a command .
5120	Get a JAXBContext .
5121	Creates a list of boxes .
5122	Creates a new box tree .
5123	Compute the background color of the box .
5124	Set the mapping file .
5125	Get the mapping file .
5126	Create a VersionRange from a string specification .
5127	Concatenate this box transform .
5128	Transform a rectangle into a Rectangle .
5129	Returns the minimum visual bounds of the box .
5130	Compute the visual bounds .
5131	Compute the bounds .
5132	Computes the content bounding box .
5133	Returns the top border of the element .
5134	Returns the bottom border of the element .
5135	Returns the left border of the element .
5136	Returns the right border of the element .
5137	Returns the color of the element .
5138	Determines whether the given child node is visible .
5139	Take the list of children of this box .
5140	Process the command .
5141	Creates a DataSource instance .
5142	Creates a new DataSource from the database .
5143	Setup the environment .
5144	Perform a query .
5145	Register a command .
5146	Register a command .
5147	Unregister a command .
5148	Execute a command line .
5149	Start the console .
5150	Returns a list of committees for the given state .
5151	Retrieve information about a specific committee .
5152	Creates a JMX connector .
5153	Returns the value of a property .
5154	Invokes the method .
5155	Search for a specific district
5156	Search for a district .
5157	Lookup a boundary .
5158	Get metadata for a given state .
5159	Create a MBean object .
5160	Register a new MBean .
5161	Unregisters a MBean .
5162	Validates a MBean .
5163	Generate a unique identifier .
5164	Adds a value to the parameter .
5165	Search for legislators by state
5166	Search for legislators by active state
5167	Search the legislators for the given state .
5168	Search for legislators .
5169	Retrieves a legislator by ID .
5170	Returns the ordinal value of this type .
5171	Sets the mapped class .
5172	Invokes the method .
5173	Returns the total number of seconds .
5174	Build the HTTP client .
5175	Creates a new HTTP request .
5176	Converts the response text to pid .
5177	Computes the XPath expression .
5178	Get the pid of a pid
5179	Creates a new configuration binding for a given class .
5180	Bind the configuration to the given configuration .
5181	Creates a new FilterPattern .
5182	Invokes the constructor .
