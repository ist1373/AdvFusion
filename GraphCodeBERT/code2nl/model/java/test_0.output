0	Copies the stream to the specified sink .
1	Reads the contents of the stream .
2	Read lines from the stream .
3	Read bytes from the buffer .
4	Gets a new character buffer .
5	Reads more characters from the reader .
6	Start draining .
7	Converts an iterable to an array .
8	Checks if iterable is empty .
9	Creates an iterator that returns a new Iterable .
10	Creates an iterator over the given elements .
11	Concatenates an Iterator over the given inputs .
12	Clear all elements from the iterator .
13	Writes bytes to the stream .
14	Parse the given StringBuilderSpec .
15	Returns the cache builder .
16	Creates a new joinable .
17	Returns an ImmutableIntArray with the given number of elements .
18	Returns an ImmutableArray with the given index .
19	Read data from the input stream .
20	Read bytes from the input stream .
21	Writes the given map to the given stream .
22	Writes a Multiset .
23	Gets a field setter .
24	Start the stopwatch .
25	Adds an element to the collection .
26	Resizes the size of the given size .
27	Converts a byte array to an InetAddress .
28	Compress the longest set of zeros .
29	Convert an array of hexets to an IPv6 string .
30	Convert a URI string to an IP address .
31	Checks if the given IPv6 address is compatible .
32	Convert an IPv4 address to an IPv4 address .
33	Checks if the given IP address is a TeredoAddress .
34	Checks if the given IP address is an IP address .
35	Returns the IP address of the given IP address .
36	Gets the embedded IP address of the given IP address .
37	Checks if the given string is a mapped IP address .
38	Decrement the given address .
39	Creates a new reader .
40	Writes a byte array to a file .
41	Copies a file from a file .
42	Copies a file to the given destination .
43	Touch a file .
44	Read first line from file .
45	Creates a builder with the expected size .
46	Force the given key to be overwritten .
47	Creates a new MinMaxPriorityQueue .
48	Calculates the capacity of the queue .
49	Compute the Fmix code .
50	Creates a new element order .
51	Tries to enter the lock .
52	Returns true if the lock is interrupted .
53	Enter the monitor .
54	Checks if the given guard is satisfied .
55	Enter the given Guard .
56	Checks if the monitor is satisfied .
57	Checks if a Guard is satisfied .
58	Checks if the monitor is interrupted .
59	Checks if the monitor is locked .
60	Waits until the Guard is satisfied .
61	Wait for uninterruptibly .
62	Waits for uninterruptibly .
63	Get the number of wait queue length .
64	Sets the next waiter .
65	Invoke all the waiters .
66	Begins the waiter for the given guard .
67	End the waiting for the given guard .
68	Waits for the given number of seconds until the given number of seconds .
69	Shutdown the given executor .
70	Writes a character sequence to the stream .
71	Execute all runnables .
72	Load 64 bits from a byte array .
73	Store a 64 - bit value at the specified offset .
74	Loads a 32 - bit integer from a byte array .
75	Creates a media type .
76	Parse a media type .
77	Returns the type of the superclass .
78	Removes all elements from an iterator .
79	Escape the given string .
80	Gets the buffer at the given index .
81	Sets the concurrency level .
82	Build a local cache .
83	Initializes the arrays .
84	Add a new value .
85	Calculates the new mean for the given value .
86	Rebuild the hash table .
87	Returns the size of the given set size .
88	Creates a new immutable table .
89	Creates a new immutable table .
90	Returns a copy of the given table .
91	Returns an instance of the identity converter .
92	Creates a RegularImmutableTable from a list of cells .
93	Creates a new ImmutableMultiset .
94	Creates a reverse order .
95	Retrieves the number of occurrences in the given collection .
96	Creates a new iterable over the given root .
97	Creates a StringBuilder for the given size .
98	Returns a type resolution for the given context .
99	Sets the map .
100	Removes all values from the map .
101	Concatenates an iterable over the given iterable .
102	Creates a fluent iterable .
103	Converts the delegate to an array .
104	Creates a new ImmutableMultimap .
105	Returns an immutable collection of entries .
106	Count the number of skipped bytes .
107	Read data from the stream .
108	Returns the hash of the hash .
109	Checks if two bytes are equal .
110	Creates an immutable range map .
111	Creates an immutable range map .
112	Creates a concatenated hash function .
113	Creates a new immutable set with the given element .
114	Set the expected node count .
115	Lexicographical order .
116	Start the finalizer .
117	Creates a new immutable map .
118	Creates an immutable map with the given key .
119	Creates a new ImmutableMap with the given values .
120	Creates a copy of the given SortedMap .
121	Computes the weak hash of the given bytes .
122	Check the state of the service .
123	List all files in a directory .
124	Checks if a file is a directory .
125	Checks if two files are equal .
126	Touch a file .
127	Gets the parent path .
128	Checks if the given path is insecure .
129	Throws an exception if the path fails .
130	Rehash a hash .
131	Gets the segment for the given hash .
132	Converts a list of elements to an immutable list .
133	Converts the given range into a new range .
134	Unregisters an event .
135	Get all subscribers of the given event .
136	Find all registered methods in the given object .
137	Returns a copy of the given iterable .
138	Returns an immutable list of elements .
139	Converts an array of elements into an immutable list .
140	Creates a builder with the expected size .
141	Concatenates two arrays .
142	Convert a collection to an array .
143	Checks if an element is not null .
144	Gets the JLA access .
145	Convert a wildcard type to a wildcard type .
146	Converts an array of elements into an immutable list .
147	Creates a builder with the expected size .
148	Returns the entry set .
149	Finish a line .
150	Creates a new EntryTransformer .
151	Transform an entry into a map .
152	Convert an entry to an entry function .
153	Returns an immutable map for the given collection .
154	Converts the value to a string .
155	Update the buffer .
156	Creates an immutable SortedSet from a SortedSet .
157	Creates a new ImmutableSetMultimap .
158	Returns the sum of the values in this map .
159	Load finalizer .
160	Dispatch all listeners .
161	Copies a URL from a URL .
162	Post the given event .
163	Set the concurrency level .
164	Sets the delegate mapping .
165	Returns a copy of this row .
166	Execute a task .
167	Transform a table into a table .
168	Creates a new TreeMultiset .
169	Adds the given cause to the chain .
170	Expire after the given duration .
171	Sets the priority .
172	Creates a HostAndPort from a string .
173	Creates a HostAndPort instance from a string .
174	Creates a HostAndPort from a string .
175	Gets the host and port and port .
176	Creates a new range with the given comparator .
177	Returns a copy of this range .
178	Converts a set of elements to an immutable set .
179	Creates a new immutable type mapping .
180	Called when a lock is acquired .
181	Returns the subset of the given range .
182	Make an immutable map entry .
183	Make an immutable map entry .
184	Wrap a Unicode Escaper .
185	Adds a new value to the stats .
186	Creates a new ImmutableBiMap .
187	Creates a copy of the given iterable .
188	Creates an identity function .
189	Creates a predicate for a predicate .
190	Returns the value of this value reference .
191	Checks if the given entry is expired .
192	Reserve the wait length and return the maximum length .
193	Returns the code point at the given index .
194	Ensures that all keys are in the same size .
195	Inserts an entry into the table .
196	Insert an entry into the table .
197	Delete an entry from the table .
198	Delete the entry from the table .
199	Removes an entry from the table .
200	Removes the key hash from the given entry .
201	Removes the value of the given entry .
202	Set the expected node count .
203	Set the expected edge count .
204	Returns the SQL statement with the given parameters .
205	Sets a parameter value .
206	Converts an object to blobs .
207	Converts a byte array to an object .
208	Lock the data line .
209	Saves an undo log .
210	Creates a Redis template for a Redis connection .
211	Get the application map .
212	Locate the resource path .
213	Creates a new ConnectionInformation instance .
214	Map a throwable to a specific exception .
215	Checks to see if the given class is visible .
216	Get the default event bus .
217	Subscribes a subscriber .
218	Removes a subscriber from the given event type .
219	Unregisters a subscriber .
220	Post a single event .
221	Returns the sticky event .
222	Remove a sticky event .
223	Remove a sticky event .
224	Lookup all event types for the given class .
225	Add interfaces to the list of interfaces .
226	Add a subscriber index .
227	Attach an Activity to the Activity .
228	Prepare the error fragment .
229	Get the title for the exception .
230	Gets the message for the given exception .
231	Determine if the queue is complete .
232	Returns the value associated with the given timeout .
233	Returns the element at the specified index .
234	OnErrorResume is executed when a failure is resumed .
235	Creates a new Flux .
236	Convert a callable to a Mono .
237	Returns the value of the given sequence .
238	Returns a QueueSubscription instance .
239	Handles an error .
240	Produce a new instance of the given instance .
241	Creates a new scalar subscription .
242	Creates a new MonoIgnore from the given Mono .
243	Creates a wait strategy for the given spin timeout .
244	Creates a Mono from this Mono .
245	Sets the default value of this Mono .
246	Creates a new Mono .
247	OnErrorResume is a callback that will be executed when a failure occurs .
248	Gets the map of all registered listeners .
249	Creates a new MonoDelayUntilGenerator .
250	Drain the maximum value of a queue .
251	Try to subscribe a scalar map .
252	Convenience method to convert the result to a new value .
253	Collects a collection of elements from a collection .
254	Concatenate a map with the given mapper .
255	Performs a parallel operation on a parallel signal .
256	Runs the given function on a parallel signal .
257	Performs a callback on a parallel signal .
258	Performs a request on a request .
259	Convenience method for creating a new Flux .
260	Creates a new Flux .
261	Validate all subscribers .
262	Concatenate a map .
263	Concatenate a map with a delay .
264	Terminate the given instance .
265	Log a signal .
266	Start the task download .
267	Pause all files .
268	Get the size of the download .
269	Unbinds a FileDownloadService
270	Sets the maximum number of tasks .
271	Pause all tasks .
272	Start the task .
273	Tries to divert from the list of tasks .
274	Add a task to the list .
275	Pause the queue .
276	Resume the queue .
277	Checks if the response is acceptable .
278	Finds the instance length for the given content range .
279	Sets the animation .
280	Sets the elevation of the light .
281	Sets the color of the label .
282	Add configuration properties .
283	Add a new model class comment .
284	Adds an enum comment .
285	Add a getter comment .
286	Add general method comment .
287	Adds a comment .
288	Returns the fully qualified name .
289	Gets the select key .
290	Create a new package resource table .
291	Create a new package resource table .
292	Add missing styleable attributes .
293	Sets the WIFI .
294	Adds the smallest screen width to the specified qualifiers .
295	Instrument the native method .
296	Rewrites the method body body .
297	Checks if the given method is a valid calendar .
298	Make sure the class is public .
299	Make sure the method is public .
300	Make sure the method is private .
301	Sets the traversal after the current node .
302	Sets the traversal before the node .
303	Add a child .
304	Push the default value to the stack .
305	Returns the mode of the given path .
306	Setup the ActivityController .
307	Change the current configuration .
308	Creates a new activity .
309	Sets the call state .
310	Expect a log message .
311	Determine if the intent is exported .
312	Get the end point of a shape
313	Gets the point at the given position .
314	Create a ResTableConfig object .
315	Returns the difference between two resets .
316	Determines if the user is default .
317	Gets the bundle restrictions .
318	Add a new user profile .
319	Add a user .
320	Connect to the socket .
321	Recursively intercepts a virtual method .
322	Adds the mapping to this DynamicRefTable .
323	Adds a mapping to the mapping table .
324	Grant permission to the user .
325	Denies permissions for a given user .
326	Selects and returns a list of Sdks .
327	Get the file from a zip file .
328	Gets the next request .
329	Add a HTTP response rule .
330	Adds a HTTP response rule to the request .
331	Stop the stream .
332	Adds a HTTP response rule .
333	Add a bluetooth route to the device .
334	Sets thread priority .
335	Get thread priority .
336	Returns the index of the number of bits in the given number .
337	Sets the mode of the app .
338	Converts a string to an integer .
339	Get the type of a color .
340	Parse a float attribute .
341	Creates a new ImageDecoder .
342	Creates a new ImageDecoder .
343	Click menu item .
344	Call an activity .
345	Start the lock task .
346	Stops the lock task .
347	Adds a runnable to the queue .
348	Adds a runnable to the queue .
349	Remove a scheduled runnable .
350	Advances to the next scheduled runnable .
351	Advances the current time .
352	Determines if the next task is running .
353	Run a scheduled task .
354	Binds a service to the service .
355	Sets the current time .
356	Returns true if the queue is idle .
357	Reset all messages .
358	Builds a new Activity .
359	Builds a new ActivityController instance .
360	Setup the activity .
361	Build a FragmentController .
362	Sends a text to speak .
363	Get the display size .
364	Gets the file system fs .
365	Get all log items for a given tag .
366	Returns a list of all available manifests .
367	Returns the broadcastReceiver for the given class name .
368	Delete a notification channel .
369	Get java version .
370	Transforms the given matrix .
371	Gets the value associated with the given key .
372	Load a resourceBag value .
373	Post a runnable .
374	Adds a runnable to the queue .
375	Add an activity if not present .
376	Add a service if not present .
377	Add a receiver to this activity .
378	Add a provider if not present .
379	Add an activity .
380	Add a service .
381	Add a receiver .
382	Add a provider .
383	Removes an activity from the specified component .
384	Removes a service from the registry .
385	Removes a provider from the provider .
386	Remove a receiver from this activity .
387	Sets the resolver for the given intent .
388	Add resolve info for intent .
389	Add a package .
390	Add an intent filter to the activity .
391	Add an intent filter to the service .
392	Add an intent filter for a receiver .
393	Add an intent filter to the provider .
394	Find the parent of the given locale .
395	Finds all ancestors in the given script .
396	Parse a package .
397	Get the intent for the given class .
398	Verifies that the resTable_type is valid .
399	Finds all libraries in the given resource directory .
400	Get organization name .
401	Sets the permitted accessibility services .
402	Sets the permitted input methods .
403	Activate a reset token .
404	Returns a set of resources that have been loaded .
405	Returns a set of all the available resources .
406	Open an asset .
407	Adds a list of packages to the service .
408	Runs the given runnable .
409	Execute the given runnable .
410	Reads the contents of the given class .
411	Writes a byte array to the underlying object .
412	Writes a byte array to the specified pointer .
413	Serializes this object into a byte array .
414	Sets the data position .
415	Checks if the given item is consistent .
416	Gets the next element .
417	Read next item .
418	Read the value of the next item .
419	Reads the number of zero bytes .
420	Reads a primitive .
421	Write an item to the buffer .
422	Read bytes from an input stream .
423	Gets the native object id .
424	Gets an object by its native id .
425	Call this method .
426	Sets the default network active .
427	Play a sound .
428	Loads a sound .
429	Recursively restore the view from the app .
430	Creates the widgets for the given app layout .
431	Invoke the seek listener .
432	Invokes the info listener .
433	Invokes an error listener .
434	Get the default display .
435	Sets the density of the screen .
436	Sets the xdpi .
437	Set the ydpi .
438	Sets the name of this object .
439	Sets the flags .
440	Sets the width of the screen .
441	Sets the height of the screen .
442	Sets the real width .
443	Sets the real height .
444	Sets the rotation .
445	Sets the state of the screen .
446	Release the connection .
447	Attempt to establish a route .
448	Returns the common superclass of the given type .
449	Qualify the given value .
450	Navigate to next node
451	Checks if the given name is a supported feature .
452	Adds an asset to the cache .
453	Returns a string representation of the resource qualified name .
454	Sets the configured Qualifiers .
455	Build a string from a byte array .
456	Loads a service .
457	Loads a service .
458	Load a service from the system property .
459	Checks if the given device is granted to the given package .
460	Revoke the given device .
461	Add a new USB device .
462	Remove a USB device .
463	Add a port .
464	Open a USB accessory .
465	Add data to DropBoxManager .
466	Creates a media item .
467	Creates a deep copy of the given class .
468	Gets a field from the given object .
469	Calls an instance method .
470	Call an instance method .
471	Call static method .
472	Call static method .
473	Creates a new instance of the given class .
474	Call constructor .
475	Start the Ring .
476	Get the type of the given request .
477	Get the compiletime resource table .
478	Dump the view .
479	Returns the inner text of the view .
480	Returns a list of all the broadcast listeners for the given intent .
481	Post an intent .
482	Convert RGB color to HSV
483	Start a new section .
484	Ends the current trace .
485	Gets the provider for the given key .
486	Creates a new file .
487	Run all tasks .
488	Run next task .
489	Request audio focus .
490	Notifies the audio focus request .
491	Starts the native stream .
492	Gets the buffer at the given index .
493	Queue input buffer .
494	Release output buffer .
495	Simulate time change .
496	Converts meta data to a bundle .
497	Converts a SQL string into a string .
498	Creates a package info object .
499	Checks if the given package is granted to the application .
500	Applies the flags to the componentInfo .
501	Returns the index of the requested permission .
502	Gets the badge icon .
503	Determines if the user owns the current user .
504	Extracts the code point from a string .
505	Constructor for reflection .
506	Get the status of an account .
507	Returns a collection of content observers for the given URI .
508	Add a new display .
509	Change the display config .
510	Fixes the trace path .
511	Find next value .
512	Resets the specified fields .
513	Parse a Cron expression .
514	Returns the index of the argument .
515	Visits an indirect instruction .
516	Adds an instruction to the stack .
517	Loads the specified number of arguments .
518	Loads the argument types .
519	Load a local variable .
520	Stores a local instruction .
521	Swaps two types .
522	Creates a new type .
523	Unboxing a type .
524	If the given type is equal to the given type .
525	Visit a field in the visitor .
526	Gets a static field .
527	Puts a static field .
528	Gets a field .
529	Adds a field to the stack .
530	Invoke an instruction .
531	Invokes a method .
532	Invoke constructor .
533	Invoke static method .
534	Invokes an interface .
535	Throw an exception .
536	Checks the type of the given type .
537	Visit the implicit first frame .
538	Start a new frame .
539	Creates a new method item .
540	Creates a new item .
541	Adds a string to the pool .
542	Creates a new name item .
543	Gets the item at the given key .
544	Puts two numbers .
545	Puts two bits .
546	Visits an enum .
547	Visits an annotation .
548	Calculate the position of the position of the given phase .
549	Creates a PNG image .
550	Visit a parameter .
551	Visits an annotation .
552	Visit a parameter .
553	Visit a type instruction .
554	Visit a field in the visitor .
555	Visit a method in the visitor .
556	Visits table switch instruction .
557	Visit a lookup switch statement .
558	Visit a multi - dimensional array .
559	Visit a LocalVariable annotation .
560	Visit a line number .
561	Read frame type .
562	Sets the initial state of the stack .
563	Returns the type of the given local variable .
564	Set the value of a local variable .
565	Pushes the type .
566	Returns the type of the given descriptor .
567	Removes elements from the stack .
568	Pop the stack .
569	Initializes a variable .
570	Initialize the type .
571	Visits the given source .
572	Visit the outer class .
573	Visits an annotation .
574	Visits a type annotation .
575	Extracts the bits from the given bs .
576	Get an object type .
577	Returns the types of the given method descriptor .
578	Get the type of the method descriptor .
579	Get the number of arguments and return the number of arguments .
580	Returns the type of the given buffer .
581	Get the descriptor for this object .
582	Get the descriptor of a class .
583	Get opcode .
584	Adds a byte to the buffer .
585	Put an integer into the vector .
586	Adds a short to the buffer .
587	Puts an integer into a byte vector .
588	Adds an integer to the buffer .
589	Adds a long to the buffer .
590	Adds a string to the buffer .
591	Adds a byte array to the buffer .
592	Increase the size of the buffer .
593	Get column name .
594	Sets the column mapping .
595	Gets the value of a property .
596	Initializes the configuration properties .
597	Returns the IOCase associated with the given name .
598	Converts a string to a lower case .
599	Returns the current value of this change .
600	Set the value of a change .
601	Creates an array of arguments .
602	Creates a new set with the given value .
603	Gets the global parameter .
604	Attach the parameters to the prepared statement .
605	Get absolute path .
606	Parses the given string value .
607	Computes the MD5 checksum .
608	Get the class loader for the project .
609	Print settings .
610	Parse properties file .
611	Checks if the current field value is set .
612	Write next line .
613	Checks if a string contains special characters .
614	Process a line .
615	Process the next character .
616	Execute the update .
617	Returns the value of the given value .
618	Returns the value of the property .
619	Set the value of the property .
620	Add aliases to the configuration property .
621	Sets the default value .
622	Generate SQL statement .
623	Returns true if the column should be computed .
624	Adds a tag to the database .
625	Lists all locks .
626	Gets the change set of changes .
627	Clears all checksums .
628	Parses a CSV from a CSV reader .
629	Process a line .
630	Gets the property editor .
631	Loads the classes in a jar file .
632	Add a class to the list of classes .
633	Returns the type of the specified property .
634	Checks if an object has a property .
635	Set property value .
636	Returns the method for the given property name .
637	Gets the write method .
638	Returns the methods for the given object .
639	Removes the collection from the collection .
640	Gets the outgoing foreign keys .
641	Creates a CDI config .
642	Locking lock .
643	Returns the path for the given resource name .
644	Returns true if the change is filtered by the given type .
645	Returns the value for the given column name .
646	Initializes the configuration .
647	Initialize database .
648	Checks if two objects are equal .
649	Sets whether the given foreign key is valid .
650	Add a type to the database .
651	This method is called when the connection is set .
652	Checks if a string is truncated .
653	Converts the given value to a value .
654	Main entry point .
655	Splits an argument into an array of arguments .
656	Checks if command is a command .
657	Checks if command is a command .
658	Extracts the file from the given jar entry .
659	Parse the default properties file .
660	Fixes command line arguments .
661	Checks if the command is setup .
662	Check for missing command parameters .
663	Check if the command parameters are malformed .
664	Parse properties file .
665	Prints the help message .
666	Prints the help text .
667	Parse command line arguments .
668	Returns the value of the command parameter .
669	Reads a value from a string .
670	Returns true if the expression matches the given runtimeLabels .
671	Checks if the given database is present in the database .
672	Creates a snapshot of the database .
673	Creates a snapshot .
674	Generate the children of the given database .
675	Clean up a directory .
676	Splits a multi line into a multi - line array .
677	Pad a string .
678	Returns a string with the given length .
679	Generate a random identifier .
680	Removes all whitespaces from the given string .
681	Concatenates a string to a string .
682	Gets the catalog names for the database .
683	Appends a clause to the list .
684	Appends a new clause to the list .
685	Prepend a string with the given key .
686	Inserts a new string with the given key .
687	Inserts a new string with the given key .
688	Returns the value of the given key .
689	Gets the subcluses of the given key .
690	Prints changes to the output stream .
691	Returns a list of all available databases .
692	Get all internal databases .
693	Validate the parameters .
694	Returns a database data type .
695	Converts an object to SQL .
696	Checks if the given string is a valid date time .
697	Returns true if the database is supported .
698	Returns a string representation of a list of strings .
699	Checks if the given statement is valid .
700	Adds an artifact to the given set of URLs .
701	Returns the field of the given class .
702	Gets the alternate paths for the given path .
703	Returns true if the context matches the given context .
704	Creates a new ResourceAccessor .
705	Closes the database connection .
706	Append the next character to the next character .
707	Determines if the next character is escaped .
708	Determines if the next character is escaped .
709	Gets the children of the given node .
710	Sets the value of this node .
711	Returns the value of the given type .
712	Gets a child node .
713	Get the value of a child node .
714	Gets the value of a child node .
715	Close all streams .
716	Returns true if the type is autoIncrement .
717	Checks if the given path is a compressed file .
718	Gets the column by name .
719	Gets a singleton instance .
720	Adds a tag to the database .
721	Create a Precondition instance .
722	Determines if the given string is now or not .
723	Returns the value of a parameter .
724	Sets whether or not the constraint is valid .
725	Returns SQL for unique constraints .
726	Gets the set parameters for the given change .
727	Get the required parameters for the given database .
728	Converts an object to a string .
729	Gets the serializable fields .
730	Get full path .
731	Create index lookup .
732	Returns the index of the given column .
733	Returns the descriptor for the given column .
734	Finds the field with the given column .
735	Returns the column name .
736	Returns the descriptor for the given name .
737	Finds the field by name .
738	Checks if the given name matches the given name .
739	Loads the property descriptor .
740	Returns the column name for the given column .
741	Sets the column mapping .
742	Get the size of the parameter .
743	Returns true if the given column type is supported .
744	Returns a list of ChangeSetStatus objects .
745	Escape an object name .
746	Sets the value of the column .
747	Sets the value of this column .
748	Sets the default value for this column .
749	Unregister a change .
750	Gets the names of all defined changes .
751	Create a change .
752	Prompts if the given database is running .
753	Get the default schema name .
754	Returns true if the database is safe .
755	Filter the rollback visitor .
756	Returns the maximum fractional digits for the database .
757	Checks if the given string is valid .
758	Create a new node .
759	Assert that object is not null .
760	Checks if the given database product name is a SybaseDB product .
761	Creates a new SqlVisitor instance .
762	Returns the hostname of the local host .
763	Get the local host name .
764	Adds a SQL statement to the database .
765	Adds a procedure to the database .
766	Encode hexadecimal data .
767	Gets the schema names for the given database .
768	Reads the next line .
769	Gets the next line from the stream .
770	Check if the reader is closed .
771	Start polling .
772	Starts the listener for the given path .
773	Sets the app conf folder .
774	Gets a dynamic int property .
775	Gets a dynamic property .
776	Gets a dynamic property .
777	Gets a dynamic float property .
778	Gets a dynamic property .
779	Load properties from a table .
780	Gets a dynamic property .
781	Updates all registered properties .
782	Add a callback .
783	Remove all callbacks .
784	Gets the verbUriRegex property value .
785	Load properties from input stream .
786	Adds a property .
787	Updates the properties .
788	Adds a property to the configuration .
789	Delete a property .
790	Clears the map .
791	Returns the properties of this object .
792	Loads the properties from the given source .
793	Add a configuration at the specified index .
794	Removes a configuration from the container .
795	Removes a configuration from the container .
796	Returns an iterator over all the keys .
797	Gets the keys of the given prefix .
798	Returns true if the given key exists .
799	Gets a list of configuration properties .
800	Gets a list of strings for the given key .
801	Loads the properties from a resource .
802	Load properties from configuration .
803	Load properties from the given properties .
804	Poll the configuration .
805	Returns the angle of the given location .
806	Returns the value for the given key .
807	Main entry point .
808	Getter for getter property name .
809	Checks if the given method is a getter method .
810	Add a hard constraint match .
811	Add a medium constraint match .
812	Add soft constraint match .
813	Clean up the path .
814	Calculates the standard deviation of the standard deviation .
815	Checks if the problem is valid .
816	Gets the scale scale for a solution .
817	Generate a task name .
818	Returns true if the request context has a request timeout .
819	Determines if the task timeout is applied .
820	Creates a task with timeout .
821	Builds a HttpResponse .
822	Gets the build task .
823	Creates a new graph .
824	Writes the generic failure information .
825	Creates a single trace from a shallow trace .
826	Create a batchable task .
827	Returns the name of the batch .
828	Implements the given consumer .
829	Creates a default configuration for default requests .
830	Compose a ConsumerTrace and return a ConsumerTrace .
831	Creates a FusionTask .
832	Sets an engine property .
833	Returns a Promise representing the given value .
834	Propagate a promise to the destination .
835	Creates a short summary for the given id .
836	Creates a summary of a person .
837	Creates a list of connected connections .
838	Adds a side effect to the task .
839	Creates a task with an error .
840	Finds the next node with the next node .
841	Append the stack trace to the stack trace .
842	Monitor the log .
843	Checks if the given time is stalled .
844	Creates a new retry task with the given name .
845	Wrap a task .
846	Retrieves a retry result .
847	Run the given context .
848	Converts an object to an exception .
849	Sets the client client .
850	Acquire a lock .
851	Release lock .
852	Attempt to acquire a plan .
853	Gets the NingHttpClient .
854	Initializes the async http client .
855	Consumes the given chars to the given chars .
856	Checks that the given objects are not null .
857	Checks if string is empty .
858	Parse a transform string .
859	Get the list of files in the database .
860	Returns a list of GridFSDBFile objects .
861	Find all files in the database .
862	Remove a file .
863	Removes all files from the database .
864	Put a value in the cache .
865	Gets the value at the specified key .
866	Creates a builder .
867	Returns the maximum time .
868	Returns a new MongoCompressor with the given key .
869	Get the name of this cluster .
870	Get master address .
871	Returns true if the server is master .
872	Returns the maximum number of documents in the cluster .
873	Adds a key to the query .
874	Applies theMajorityWriteConcern to the given transaction options .
875	Returns true if the value is ok
876	Returns the error message .
877	Set the read annotations .
878	Returns a list of indexes for the given indexes .
879	Generate index name .
880	Validate the MD5 file .
881	Gets the codec implementation .
882	Calculate the number of requests .
883	Parses a string .
884	Decodes the given BSON reader .
885	Checks if the given state is valid .
886	Pipe a BsonReader .
887	Write extra extra elements .
888	Converts the object to a byte array .
889	Put this object into a byte buffer .
890	Returns a string representation of the object .
891	Returns the short description of this message .
892	Creates a new BasicDBObjectBuilder .
893	Push a key to the stack .
894	Adds a result to the collection .
895	Adds an error result to the collection .
896	Add a write error result .
897	Add error result .
898	Gets the error .
899	Sets the next node .
900	Returns the next non - marked node .
901	Returns the successor of this node .
902	Find the predecessor of this node .
903	Returns the next node .
904	Returns the predecessor of this node .
905	Append an element to the next node .
906	Prepend an element to this node .
907	Deletes the next node .
908	Replace the element with the given new element .
909	Executes the lock .
910	Selects a list of servers .
911	Creates a new ReadPreferredReadPreference .
912	Creates a secondary read preference .
913	Creates a secondary read preference .
914	Get the nearest read preference .
915	Creates a new primary preferred read preference .
916	Creates a secondary read preference .
917	Creates a new SecondaryPreferredReadPreferredReadPreference .
918	Returns a new TaggableReadPreference that returns a new TaggedReadPreference .
919	Creates a new primary preferred read preference .
920	Returns a new TaggableReadPreference with the specified number of tags .
921	Returns the read preference .
922	Creates a new TaggedReadable read preference .
923	Creates a new TaggedReadable read preference .
924	Read bytes from the input stream .
925	Reads an int from the input stream .
926	Reads an integer from the buffer .
927	Read an int from the buffer .
928	Reads a long from the input stream .
929	Gets the credential list .
930	Get a random server .
931	Creates a new MongoClient .
932	Returns a copy of this object .
933	Creates a new ClassModelBuilder .
934	Gets a database collection .
935	Drop the database .
936	Get collection names .
937	Executes a command .
938	Execute a command .
939	Checks if a collection exists .
940	Executes the given code .
941	Get the stats from the database .
942	Removes a user from the database .
943	Gets the read preference .
944	Gets a codec .
945	Inserts a document into the database .
946	Performs a update operation .
947	Find a single document by id .
948	Rename a collection .
949	Creates a MapReduce command .
950	Explain an aggregate operation .
951	Create an index .
952	Creates a new index .
953	Find and remove the specified query .
954	Sets the decoder factory .
955	Sets the db encoder factory .
956	Gets the index information .
957	Drop an index .
958	Drop an index .
959	Returns true if the command is capped .
960	Sets the class for the given path .
961	Returns the class for the given path .
962	Set the value of a field .
963	Sets the value of a field .
964	Renames a field name .
965	Increment a number .
966	Multiplies a number .
967	Sets the minimum value of a field .
968	Gets the maximum value of a field .
969	Adds a field to a set .
970	Adds a set of values to a set .
971	Push a value to a field .
972	Push an array of values .
973	Pull a value from a field .
974	Create a BSON document from a filter .
975	Pull all values from a list .
976	Write queryPrologue .
977	Increments the number of connections for the given connection .
978	Gets the ancestors of the given class .
979	Create a ReplaceOptions object .
980	Decodes a string .
981	Encode a byte array .
982	Returns the server address .
983	Gets the replication status .
984	Returns a list of database names .
985	Fsync the database .
986	Synchronously lock the database .
987	Unlock the lock .
988	Returns the value as a Number .
989	Returns a new ConnectionId with the specified server value .
990	Computes the ancestors of the given class .
991	Returns the JSON representation of this object .
992	Execute a batch operation .
993	Returns the expiration time for the given time unit .
994	Convert the group to a DBObject .
995	Get the logical session timeout .
996	Returns a set of server descriptions .
997	Returns the server description for the given server address .
998	Returns a list of all servers .
999	Returns a list of servers .
1000	Returns a list of servers that match the given tag set .
1001	Returns a list of all known servers .
1002	Returns a list of all servers that are primary .
1003	Returns a list of servers that match the given tag set .
1004	Get the description of this server .
1005	Creates a MongoCredential instance .
1006	Creates a new MongoCredential credential .
1007	Creates a new MongoCredential .
1008	Creates a new MongoCredentialProperty with the given key .
1009	Creates a new MongoCredential .
1010	Gets the mechanism property .
1011	Convert this stream to a byte array .
1012	Adds an object serializer .
1013	Creates a new update request .
1014	Encodes the message .
1015	Write messagePrologue .
1016	Adds a document .
1017	Adds a document to the collection .
1018	Backpatch message length .
1019	Creates a chunk for a chunk .
1020	Creates a new DBCursor .
1021	Returns true if the cursor is reached .
1022	Try to find the next cursor .
1023	Returns a list of all the elements in the collection .
1024	Gets the first record from the database .
1025	Gets the read preference .
1026	Gets the readConcern .
1027	Put a value into the current state .
1028	Put a DBRef .
1029	Returns a new BulkWriteResult .
1030	Get the socket address .
1031	Returns a list of all the socket addresses .
1032	Creates a filter that matches the given value .
1033	Gets the filter for the given field .
1034	Returns a BsonFilter that matches the given value .
1035	Returns a Filter that matches the given value .
1036	Returns a Filter that matches the given value .
1037	Creates a BsonOrFilter .
1038	Creates a BsonFilter .
1039	Checks if the field exists .
1040	Returns a Bson object with the specified language .
1041	Creates a BsonFilter .
1042	Returns a BsonDocument that matches the given field name .
1043	Creates a filter that matches the given field name .
1044	Creates a filter that matches the given point .
1045	Returns a filter that matches the given coordinates .
1046	Filter the query on the given point .
1047	Creates a Bson document that matches the given distance .
1048	Returns the flags for the given string .
1049	Returns the regex for the given character .
1050	Returns a string representation of the given flags .
1051	Set the text version .
1052	Set the sphere version .
1053	Returns a copy of this DBCollectionFindOptions .
1054	Convert value to type .
1055	Encodes the given document .
1056	Execute a write operation .
1057	Creates an upsert request .
1058	Returns a new BulkUpdateRequestBuilder with the specified array filters .
1059	Executes the operation on the database .
1060	Initializes the mongo library .
1061	Creates a new MongoClient instance .
1062	Close the mongo library .
1063	Enables the specified host .
1064	Returns the type of the given object .
1065	Convert the result to a DBObject .
1066	Get the short description of this cluster .
1067	Acknowledged update result .
1068	Gets the content type .
1069	Returns the list of aliases .
1070	Get the first key .
1071	Encodes the given value .
1072	Returns a BSON document .
1073	Compress a list of bytes .
1074	Returns the value of the given key .
1075	Gets a boolean value .
1076	Gets an object id .
1077	Returns the value of a field .
1078	Convert an object from a BSON object .
1079	Gets a MongoCredential instance .
1080	Creates a new client session .
1081	Gets the value of the WTimeout .
1082	Returns a BSON document .
1083	Returns true if the journal is acknowledged .
1084	Creates a new WriteConcern .
1085	Creates a new WriteConcern .
1086	Creates a new WriteConcern .
1087	Creates amajorityWriteConcern .
1088	Inserts a document .
1089	Returns a BulkWriteRequestBuilder .
1090	Execute a bulk operation .
1091	Returns a copy of this object .
1092	Creates a new GeoHaystack index .
1093	Returns a list of index names .
1094	Gets the value for the given key .
1095	Gets a document by key .
1096	Gets the value for the given key .
1097	Gets the value for the given key .
1098	Gets the value of the given key .
1099	Gets the value for the given key .
1100	Gets the value for the given key .
1101	Gets a double value .
1102	Gets a boolean value .
1103	Gets the value for the given key .
1104	Gets the value for the given key .
1105	Gets the value for the given key .
1106	Gets an object id .
1107	Gets the value for the given key .
1108	Gets a regular expression .
1109	Writes the socket to the socket .
1110	Converts an object to BsonDocument .
1111	Checks if the given value is null .
1112	Checks if the given condition is true .
1113	Gets the property model by name .
1114	Builds the class model .
1115	Get the update options .
1116	Get the wrapper for the given class .
1117	Gets the wrapper for the given class .
1118	Returns the UUID as a UUID .
1119	Convert a UUID to a UUID .
1120	Parses a string .
1121	Reads a hex string .
1122	Skip whitespace .
1123	Parse a string .
1124	Parse a number .
1125	Parse an exponent .
1126	Parses an array .
1127	Update a single document .
1128	Returns a new ConnectionDescription with the specified connection ID .
1129	Creates a new WriteConcernResult .
1130	Creates a new WriteConcernResult .
1131	Gets the embedded value for the given keys .
1132	Constructs a list of values from the given key .
1133	Merges the given options .
1134	Releases an item from the pool .
1135	Gets a single item from the pool .
1136	Close all available resources .
1137	Write the buffer to the output stream .
1138	Throws an exception .
1139	Throws an exception .
1140	Verifies that the current BSON type is valid .
1141	Verifies the name of the element .
1142	Checks if the given method name is valid .
1143	Parses a value from a string .
1144	Returns the BigDecimal value .
1145	Returns the byte array of bytes .
1146	Sets the hint hint .
1147	Returns a BSON document .
1148	Writes the file to the specified file .
1149	Write the chunk to the output stream .
1150	Removes the file from the database .
1151	Sets the sort document .
1152	Set the sort document .
1153	Gets the namespace .
1154	Get the database name .
1155	Creates a new ChangeStream .
1156	Creates a new builder .
1157	Reset the connection .
1158	Creates a new MongoOptions instance .
1159	Returns the write concern .
1160	Get the user agent string .
1161	Populate the properties from the environment .
1162	Checks if the user group key is a valid user group .
1163	Converts a list of UserGroup to a GrantedAuthority .
1164	Gets the service endpoints for the given environment .
1165	Creates a new AzureADJWT token .
1166	Get all Todo items
1167	Registers the given path .
1168	Build the aggregators .
1169	Generates a summary of the resultset .
1170	Register a directory .
1171	Creates a new property .
1172	Returns the type of the given name .
1173	Add a watch event .
1174	Adds a callback to the handler .
1175	Creates a new MicrometerRegistry .
1176	Do the template with the given callback .
1177	Registers a form for authentication .
1178	Register a basic authentication pattern .
1179	Resolves the given value .
1180	Returns the path for the given pattern .
1181	Defines the given type .
1182	Returns a YAML representation of this object .
1183	Returns the status of the status .
1184	Returns the status code .
1185	Set response status .
1186	Sets the media type .
1187	Run Enhancer .
1188	Sets the media type .
1189	Gets a query parameter .
1190	Gets a form parameter .
1191	Get a header parameter .
1192	Returns the response for the given status .
1193	Sets the configurer configuration .
1194	Read bytes from the stream .
1195	Create a reactive store .
1196	Create a reactive reactor .
1197	Require completion stage .
1198	Creates a new Requery instance .
1199	Sets the JavaScript code .
1200	Sets the XSS attribute .
1201	Sets the JSON encoding .
1202	Sets the CSS style .
1203	Get the attributes of the given path .
1204	Returns the CSS CSS for the SVG element .
1205	Parses the given value .
1206	Writes a sequence to a file .
1207	Adds a handle to the request .
1208	Process the given type .
1209	Returns the last event id .
1210	Send an event .
1211	Put a value to the view .
1212	Put values into the model .
1213	Creates a class loader .
1214	Creates a class loader .
1215	Set the attributes .
1216	Add an attribute to the route method .
1217	Add a custom parameter .
1218	Returns the status of the given status code .
1219	Creates a new Jdbi3 instance with the given configuration .
1220	Rewrite a SQL statement .
1221	Sends an asset to the response .
1222	Creates a new instance with the given configuration .
1223	Sets the configuration with the given configuration .
1224	Sets the job with the given job .
1225	Creates a new job with the given job class .
1226	Shutdown all events .
1227	Creates a new Cassandra cluster .
1228	Creates a new response with the given status .
1229	Adds a module .
1230	Unauthenticated provider .
1231	Creates a new form with the given pattern .
1232	Parses the given application .
1233	Scan the specified type .
1234	Create a swagger tool .
1235	Set swagger .
1236	Sets raml .
1237	Set raml .
1238	Processes a file and returns the result .
1239	Receives the result of a Cterece
1240	Receives the result of a MDFeRece .
1241	Receive the result of the cteacciacciacciacciacciacciacciaccii
1242	Receives the result of a MDFElementEvent
1243	Receive a CTE result .
1244	Receive the result of a MDF EDF
1245	Creates a SOAP envelope .
1246	Get the namespace namespaces .
1247	Receives the result of the Nfea .
1248	Gets the LoteAssinado .
1249	Convenience method for ENVotes
1250	Retrieves the status of a service .
1251	Retrieves the coroutine for a given channel .
1252	Cancels a cancellation notification .
1253	This method is used to get the informations of an informacion .
1254	Simplified method to consultaCadastro .
1255	Receives the result of a Cterece
1256	Receives the result of the result of the result .
1257	Gets the assinertion .
1258	Receives the result of a CTEReceiveEvent
1259	Cancels a canceling notification .
1260	Receive a message from the MDFO .
1261	Receives the result of a MDFElement .
1262	Cancela de la de la de la de la de la de la de la de la de de la de la de de la de la de la de la de la de la de de de la de de la de la de la de la de de la de de la de de la de de la de de de la de de la de de de de de de de de de de de de de la de de de de de de de de de de de de de de de de de de de de de de de de de de de de de de de de de la de de de de de de de de de de de
1263	Enumerate a new MDF
1264	Ensures that the given event has been created .
1265	Receive a MFA status response .
1266	Evaluate the ConsultaStatusBah .
1267	Computes the update of the XU .
1268	Calculates the cosine similarity of x .
1269	Compute the solver .
1270	Delete all files in a directory .
1271	Loads an instance of the given class .
1272	Publish additional model data .
1273	Open a custom tab .
1274	Gets the package name to use .
1275	Determine if the given intent is available .
1276	Loads the ride request .
1277	Open a custom tab .
1278	Validate the configuration .
1279	Creates a new login intent .
1280	Edit configuration handler .
1281	Main entry point .
1282	Shutdown the mesos driver .
1283	Evaluate the task request .
1284	Evaluate the host attribute .
1285	Evaluate the task .
1286	Sets the auto scaling callback .
1287	Disable a VM .
1288	Disable VM by VM ID .
1289	Enables the given hostname .
1290	Shutdown the executor .
1291	Checks if the given properties contains the specified properties .
1292	Returns a CDemoFileInfo object for the given source .
1293	Returns the metadata for a CDOT match .
1294	Read the packet from the packet .
1295	Read a varint32 value .
1296	Read a fixed int32 value .
1297	Read the engine type .
1298	Add a child tag to this container .
1299	Add children to this container .
1300	If the optional function returns null .
1301	Render HTML tag .
1302	Sets an attribute .
1303	Sets an attribute .
1304	Adds a new attribute to this object .
1305	Sets the classes of the element .
1306	Compress JS code .
1307	Parse the contents of a string .
1308	Parses the contents of a string .
1309	Sets the width of the menu .
1310	Sets the icon icon color .
1311	Sets the background color .
1312	Open the menu .
1313	Close the menu .
1314	Inflates the overflow menu .
1315	Sets the search key .
1316	Sets whether the search button should be clicked .
1317	Sets whether the search is focused .
1318	Updates the height of the suggestions section .
1319	Calculates the height of the given suggestions .
1320	Sets the callback callback .
1321	Returns the MD5 checksum of the given filename .
1322	Configure SslClient .
1323	Reads an object from the given input stream .
1324	Returns the name of the type abstract .
1325	Returns the path of a package .
1326	Returns the name of the typeImmutable .
1327	Creates a type adapter for the given type .
1328	Creates an immutable set .
1329	Returns an iterator over the elements of this collection .
1330	Generate cache key .
1331	Returns the serialized name of the element .
1332	Returns the name of the resource .
1333	Creates a predicate that evaluates the given expression .
1334	Creates a FluentFuture .
1335	Gets the immutable map .
1336	Returns a string representation of the given type .
1337	Returns the next token buffer .
1338	Close the pool .
1339	Execute a script .
1340	Set proxy settings .
1341	Sets HTTP proxy configuration .
1342	Sets the auto proxy configuration .
1343	Create a user client for the user .
1344	Updates the fields from the entity definition .
1345	Adds the task completion listener to the user .
1346	Deploys all processes to the tenant engine .
1347	Check to see if the task is selected .
1348	Get the servlet context path .
1349	Get the servlet context path .
1350	Get the process application information .
1351	Get the process application information .
1352	Create a UserDetailsService .
1353	Cast a value to a serializable object .
1354	Initialize Camel Context
1355	Checks if a variable is set .
1356	Checks if a variable is set .
1357	Opens the view .
1358	Close the menu .
1359	Updates the position positions .
1360	Returns the position of the action view .
1361	Returns the center of the action view .
1362	Calculates the position positions of the action .
1363	Gets the activity content view .
1364	Get screen size .
1365	Restores the subaction view .
1366	Sets the content view .
1367	Sets the position of the view .
1368	Attaches the view .
1369	Creates a new state configuration .
1370	Specifies whether the given trigger is permitted .
1371	Sets whether or not the given trigger should be ignored .
1372	Adds a trigger to the state configuration .
1373	Returns the state representation of the given state .
1374	Add an instance to the container .
1375	Sets the overflow value for the given bucket .
1376	Merge two HLLs with another HLLs .
1377	Encodes a sequence of values into a byte array .
1378	Decodes a sequence .
1379	Decodes an optional sequence element .
1380	Encodes a bit string into a byte array .
1381	Encode a byte array .
1382	Encodes the given length .
1383	Get a logger instance .
1384	Log a debug message .
1385	Log a warning .
1386	Log an error message .
1387	Replace the path with the given path .
1388	Decode a percent encoded string .
1389	Process content timestamps .
1390	Builds a new instance of the given configuration provider .
1391	Update the value at the given timestamp .
1392	Encode a base64 encoded byte array .
1393	Decodes a base64 encoded string .
1394	Flushes the buffer .
1395	Dump the destination of the given URI .
1396	Computes the alpha for the given weight .
1397	Propagate the given Future to the given destination .
1398	Unmodifiable future .
1399	Unmodifiable future .
1400	Creates a CompletableFuture .
1401	Gets the value of a future .
1402	Gets the value of the given future .
1403	Try to get a value from a future .
1404	Try to get a value from a future .
1405	Checks that the given future is completed .
1406	Ensure that all futures are completed .
1407	Returns the first completion of the given iterable .
1408	Returns a CompletableFuture with the given set of futures .
1409	Returns a list of all the futures that have been completed .
1410	Converts a listener to a CompletableFuture .
1411	Converts a CompletableFuture to a ListableFuture .
1412	Adds an exception callback .
1413	Gets the histogram for the given bucket .
1414	Removes the given node .
1415	Computes the maximum weight of a node .
1416	Add a hash .
1417	Load properties from a file .
1418	Bind a ConfigDefaults to the specified configuration .
1419	Gets the next poll .
1420	Calculate the fib from the given value .
1421	Multiply a duration .
1422	Divide a duration .
1423	Finds a single field matching the given object .
1424	Checks if the given field is a valid class .
1425	Throw exception if not found .
1426	Returns the field annotated with the given annotation type .
1427	Creates a ConditionFactory with the given condition .
1428	Poll executor service .
1429	Waits until the condition is true .
1430	Waits until the given boolean is false .
1431	Creates a new condition factory .
1432	Sets the default timeout .
1433	Sets the default timeout .
1434	Tokenize a string .
1435	Helper method to escape quotes .
1436	Serve static file .
1437	Loads the language configuration .
1438	Load all the messages for the given language .
1439	Gets the URL for the given classpath .
1440	Generate a random secret
1441	Builds a RunClassInSeparateJvmMachine .
1442	Gets all artifacts from the given list of artifacts .
1443	Resolve standalone class .
1444	Encrypts a string using the secret key .
1445	Decrypt data .
1446	Read the Jinja version .
1447	Registers a path to the given path .
1448	Determines the Ninja mode from system properties .
1449	Checks if the given mime type is valid .
1450	Build a route .
1451	Starts the JVM .
1452	Creates a server url .
1453	Initialize the router .
1454	Processes all registered controllers .
1455	Sort methods .
1456	Find controller methods .
1457	Configure reflections .
1458	Checks if the method is allowed .
1459	Returns the HTTP method for the given method .
1460	Builds a controller method invocation .
1461	Returns the real class name for the given object .
1462	Checks if a class exists .
1463	Get the source code relative to a stack trace element .
1464	Adds a value to the cache .
1465	Gets a value from the cache .
1466	Checks that the given value is serializable .
1467	Renders a single value .
1468	Render raw string .
1469	Render raw bytes .
1470	Gets a cookie by name .
1471	Sets the response headers .
1472	Checks if the application secret is set .
1473	Adds all items to the collection .
1474	Returns the position for the given item id .
1475	Switches the switch to the view .
1476	Remove an active index .
1477	Returns all active indexes .
1478	Returns the title view for the given position .
1479	Returns the content view for the given position .
1480	Expands the specified position .
1481	Collapse the given position .
1482	Returns the content parent of the given position .
1483	Returns an array of Animators .
1484	Creates a bitmap from a view .
1485	Determines if the given position is disissable .
1486	Reset the velocity .
1487	Reset all animations .
1488	Cancel an existing animation .
1489	Starts an animation .
1490	Calculates the animation delay .
1491	Concatenates a list of animators into an array of Animators .
1492	Handle nonCORS request .
1493	Checks to see if the given buffer is empty .
1494	This method is used to materialize the iterator .
1495	Removes the next element from the list .
1496	Resizes the buffer .
1497	Returns the number of bytes in the buffer .
1498	Computes the xor of the given bitmaps .
1499	Adds a list of literals to the buffer .
1500	Fill the list of literals with the given literal .
1501	Returns the bit set as a BitSet .
1502	Returns the number of bits in this set .
1503	Returns true if all elements are empty .
1504	Returns an iterator over the elements in this set .
1505	Returns true if the set of bits intersects .
1506	Returns an iterator over the elements in the set .
1507	Parses the next run .
1508	Open the menu .
1509	Close the icon .
1510	Sets the background color .
1511	Fetch the database name range for the given URL .
1512	Fetch the database name range for the given URL .
1513	Parses the given URL into a ConnectionInfo object .
1514	Register a connection parser .
1515	Fetch the database name from a URL .
1516	Start the daemon .
1517	Copy a file to a file .
1518	Copies the assets to the given file .
1519	Install binary .
1520	Handle missing fields .
1521	Returns the enum value for the given class .
1522	Patch unresolved references .
1523	Traverses the fields of the given JsonObject .
1524	Convert JSON to Java object
1525	Convert JSONObjects to Java Object
1526	Traverses the fields of a JsonObject .
1527	Store a missing field .
1528	Returns the raw type of the given type .
1529	Reads an array from the given object .
1530	Reads a number .
1531	Read a JSON string .
1532	Returns the field of the given class .
1533	Remove leading quotes from a string .
1534	Convert an object to JSON .
1535	Format a JSON string .
1536	Add a new line to the output .
1537	Writes an array element to the given writer .
1538	Writes an object to the given writer .
1539	Gets a custom writer for the given class .
1540	Writes an object to the JSON file .
1541	Trace all references in the object .
1542	Trace the fields of the given object .
1543	Ensure that the given map is valid .
1544	Write a collection element .
1545	Creates a map from a list of strings .
1546	Gets the source value .
1547	Gets the topic .
1548	Gets the HJID column .
1549	Gets the document detail list .
1550	Creates a Axes XY axis .
1551	Creates a default grid .
1552	Creates an enhanced legend for the legend .
1553	Creates an enhanced legend for the legend .
1554	Creates a legend for the legend .
1555	Sets the legend style .
1556	Creates a highlighter .
1557	Creates a highlighter .
1558	Creates the default pie chart defaults .
1559	Creates a default drawable default values .
1560	Gets the document attachment list .
1561	Creates the menu item menu .
1562	Creates the committees for the committee menu .
1563	Creates the overview page .
1564	Creates the overview content .
1565	Gets the list of Kommunvals related to this entity .
1566	Configure the authentication token .
1567	Sets the list of ComplianceCheck objects .
1568	Sets the status map .
1569	Sets the resource type map .
1570	Gets the value of the Kommun .
1571	Gets the Uppagag value for this person .
1572	Gets the proposal .
1573	Get page path .
1574	Update the vote data .
1575	Gets the max size of the view .
1576	Initializes the party map .
1577	Add data to data series .
1578	Creates a chart chart .
1579	Adds the data to the data series .
1580	Creates a map of organizations from the given data .
1581	Adds the result for a month .
1582	Creates a password field .
1583	Create display property converter .
1584	Gets the converter for the given type .
1585	Returns the type of the given property descriptor .
1586	Gets the document activity activities .
1587	Gets the user account account .
1588	Gets the country regions .
1589	Gets the association container .
1590	Gets the CommitteeProposalContainer .
1591	Gets the events associated with this application .
1592	Returns the page id .
1593	Gets the page number from the parameters .
1594	Creates a vertical layout .
1595	Creates the page visit history .
1596	Adds the data to the list of robots .
1597	Adds the data to the data series .
1598	Sets the GoogleAuthScratchCodes value .
1599	Creates a role for the given assignment list .
1600	Creates a new Gantt .
1601	Returns a sorted set of entries sorted by values .
1602	Adds the same role to the given step .
1603	Strip dates after current date .
1604	Creates a gantt .
1605	Converts a number of days to a string .
1606	Loads the SecretXDataSource from the given reference .
1607	Send a message to the worker .
1608	Gets the list of DocumentPersonReference objects .
1609	Clean up a decision .
1610	Get the document name .
1611	Gets the short name of a commit .
1612	Block by user failed login attempts .
1613	Blocks if the given session is blocked .
1614	Navigate to the given rule .
1615	Gets the application manager .
1616	Show notification .
1617	Gets the topic .
1618	Adds source indicators to the menu .
1619	Returns a map of topic Indicator Indicator Indicator objects .
1620	Gets the address .
1621	Add cache hints to the cache .
1622	Gets the list of unique identifier for the given property .
1623	Read the CSV file from the input stream .
1624	Creates the pagination controls .
1625	Adds a pagination link to the page .
1626	Inserts the votes to the legislation .
1627	Insert a party .
1628	Gets the association list .
1629	Adds a value to the data series .
1630	Adds the report summary .
1631	Add annual summary data .
1632	Creates a chart .
1633	Adds the data series to the data series .
1634	Creates the report summary .
1635	Creates a list of roles for a role .
1636	Process all documents .
1637	Loads and processes a document list .
1638	Loads a list of documents from a URL .
1639	Reads a string from a reader .
1640	Reads a URL from a URL .
1641	Gets the votering .
1642	Gets the body of the legislation body .
1643	Gets the PersonAssignment element .
1644	Gets the person detail element .
1645	Creates a user account .
1646	Creates a row item .
1647	Creates a grid layout .
1648	Sends the indicator for the country indicator .
1649	Gets the document property .
1650	Gets the document activity activity .
1651	Gets the document detail container .
1652	Gets the document attachment container .
1653	Gets the document reference container .
1654	Gets the document reference container .
1655	Gets the list of authorizations for a single politician .
1656	Adds the document history to the data series .
1657	Reads missing person list .
1658	Append the content to the StringBuilder .
1659	Adds the fallback value to the StringBuilder .
1660	Reencrypt vault values .
1661	Gets the list of LandstingsValkals .
1662	Adds the summary summary of the given entry .
1663	Add an entry to a string .
1664	Adds the decision data rows to the chart .
1665	Adds the doc type data rows to the chart .
1666	Add DocTypeDecisionData rows .
1667	Gets the userId from the SecurityContext .
1668	Returns the URL of the current page .
1669	Checks if a role is in the security context .
1670	Gets the map of application action summary events .
1671	Gets the map of application events for the given page .
1672	Gets the list of alert events for the given page .
1673	Adds a list of ViewApplicationEventDailyEventSummaryValues to the series .
1674	Update existing person assignments .
1675	Update assignment data .
1676	Handles input validation .
1677	Creates a createApplicationEventRequest .
1678	Validate request .
1679	Gets the human readable message .
1680	Handles input violations .
1681	Creates the data indicator for the given indicator indicator .
1682	Initializes the application menu .
1683	Creates the admin menu .
1684	Creates a button link .
1685	Sets the result element .
1686	Get the Kie container .
1687	Gets the javers .
1688	Creates an instance of Javers .
1689	Gets the author provider .
1690	Creates the role summary .
1691	Adds the date to the map .
1692	Adds the legislation body to the list .
1693	Converts a string to an integer .
1694	Adds the data for the given year .
1695	Adds a government body to the map .
1696	Creates a new GovernmentBodyAnnualSummary from a row .
1697	Gets the person assignment data .
1698	Gets the person detail data .
1699	Gets a map of CommitteeDecision decisions .
1700	Gets the list of committees that belong to the organization .
1701	Adds the decision type to the data series .
1702	Display document attachments .
1703	Creates a header label .
1704	Builds a secret key .
1705	Returns the summary of the rule summary .
1706	Adds a rule violation .
1707	Creates a map from list of votes .
1708	Check if the document is included in the document .
1709	Gets the date from a string .
1710	Gets the related parties .
1711	Creates a form for enable google auth .
1712	Creates a form for disabling Google Auth Authentication .
1713	Creates a change button .
1714	Gets the document reference list .
1715	Gets the best guess date from the ballot container .
1716	Checks if a list of votes are valid .
1717	Try to find a valid date date .
1718	Returns the IP address .
1719	Gets the operating system name .
1720	Gets the list of CommitteeProposal objects .
1721	Gets the list of countryElectoral regions .
1722	Gets a map of authorizations for a single politician .
1723	Adds a new document history to a list of documents .
1724	Adds a new data series .
1725	Add data item to data series .
1726	Initializes the user command map .
1727	Performs the operation operation .
1728	Gets the vote data list .
1729	Gets the assignment list .
1730	Configure columns and hidden fields .
1731	Configures the selection listener .
1732	Creates a grid filter .
1733	Set column converter .
1734	Gets the document type map for the document type .
1735	Add data series to data series .
1736	Gets the list of election types .
1737	Gets the summary item .
1738	Gets the adminregion value .
1739	Gets the income level .
1740	Gets the value of the LendingType property .
1741	Gets the team document data .
1742	Gets the field s value .
1743	Main entry point .
1744	Encrypts a value .
1745	Creates a standard encryptor .
1746	Decrypts a value .
1747	Gets the list of countryElectoral regions .
1748	Gets the job context .
1749	Gets the portals .
1750	Gets the active user account .
1751	Gets the value of the document .
1752	Creates a basic layout with the given panel and footer .
1753	Creates the top header for the user context .
1754	Creates a vertical layout .
1755	Adds the logo to the header .
1756	Create top title header .
1757	Get the java mail sender .
1758	Get the SMTP port .
1759	Finds the language data for the given locale .
1760	Returns a list of supported languages .
1761	Creates a map of IssueConcern objects .
1762	Set the namespace for the given XML stream .
1763	Adds a chart .
1764	Returns the height of the chart .
1765	Get the name of the given party .
1766	Gets the list of authorizations for the user .
1767	Login to the session .
1768	Check if the system is Windows .
1769	Start the emulator .
1770	Unlock the emulator .
1771	Writes the start script .
1772	Writes the executable start script .
1773	Stop the emulator .
1774	Stop emulator .
1775	Send a command to the emulator .
1776	Builds the start command line .
1777	Determines the emulator .
1778	Determine the wait time .
1779	Determine the options .
1780	Determines the avd device .
1781	Determine the emulator location .
1782	Unjar a jar file .
1783	Calculates the source mapping for the source file .
1784	Visit the given dependency node .
1785	Resolve artifact .
1786	Wait until the device is connected .
1787	Wait for initial device list .
1788	Deploys apk file .
1789	Deploys the project .
1790	Deploys the given apk file .
1791	Uninstalls the given package .
1792	Extract package name from apk file
1793	Extracts the package name from an artifact .
1794	Extracts the instrumentation runner from the manifest file .
1795	Generate the RDD for the given libraries .
1796	Execute the Mojo .
1797	Copy the input stream to the output stream .
1798	Copies gdb server .
1799	Gets the Java executable .
1800	Returns the path to the proguard jar .
1801	Get the path to shrinkedAndroidJar .
1802	Get the path to the build tools directory .
1803	Returns the path to the main dex file .
1804	Get the path to the platform .
1805	Gets the Android jar file .
1806	Get the platform s platform .
1807	Load SDK tools .
1808	Execute the artifact .
1809	Copy the manifest .
1810	Extracts the apks sources from the project .
1811	Extracts the apklib artifact .
1812	Extracts the artifacts from an artifact .
1813	Checks for the apklib dependencies .
1814	Get the package compare map .
1815	Generate R Java R Java R .
1816	Generates the correct RAR files for the AAR .
1817	Generates the RDF file for the given apklib artifact .
1818	Checks if the artifact is present .
1819	Checks if the artifact is present .
1820	Gets the input files .
1821	Execute zipalign .
1822	Check client secrets .
1823	Add libraries to the classpath .
1824	Add classes to the classpath .
1825	Executes the configuration .
1826	Returns the version of the artifact .
1827	Collect the command line arguments .
1828	Get the JVM library for the given file name .
1829	Get the toolchain for the given file .
1830	Returns the path to the Ndk build .
1831	Read manifest .
1832	Writes the manifest to the manifest file .
1833	Export properties .
1834	Update the version code from the manifest .
1835	Extracts the architecture from an artifact .
1836	Returns the list of files in the given base directory .
1837	Encrypts a string with the given key .
1838	Decrypt a string with the given key .
1839	Read a name from a byte array .
1840	Converts a character to a digit .
1841	Try to move to the current position .
1842	Start listening .
1843	Stop listening .
1844	Send the request to the request .
1845	Adds a form field .
1846	Adds a file part .
1847	Creates a bitmap for the given bitmap .
1848	Preload images from the specified URL .
1849	Detaches the image view from the image task .
1850	Adds an image to this component manager .
1851	Checks if the image is available .
1852	Restarts the work status .
1853	Stop the worker .
1854	Destroy the work status .
1855	Attach a Cube fragment to the container .
1856	Invalidate the cache .
1857	Clears the disk cache .
1858	Creates a new table .
1859	Determine the capacity of the table .
1860	Write a bitmap to the cache .
1861	Gets the input stream .
1862	Sets a string value .
1863	Deletes the cache entry .
1864	Commits this cache entry .
1865	Adds a file to the request .
1866	Clear all memory cache .
1867	Resume the journal .
1868	Process the journal entry .
1869	Rebuild the journal .
1870	Trim the size of the cache .
1871	Called when the button is pressed .
1872	Called when loading is finished .
1873	Creates a new ImageReuseInfo .
1874	Performs the request synchronously synchronously .
1875	Notify the cache .
1876	Get the response from the server .
1877	Sets the loading bitmap .
1878	Sets the right view .
1879	Downloads the image to the given URL .
1880	Adds an image view to the list .
1881	Removes the specified image view .
1882	Called when the image is loaded .
1883	Handles the load task .
1884	Join the size of the size .
1885	Join the size tag with the given tag .
1886	Initializes the disk cache .
1887	Flushes disk cache .
1888	Gets the disk cache .
1889	Delete a directory .
1890	Gets the external cache directory .
1891	Returns the number of bytes in the given file .
1892	Notify the given drawable .
1893	Called when the user is paused .
1894	Returns the last item .
1895	Hide the view .
1896	Align the sheet with the given fab .
1897	Makes a view from theFab .
1898	Translates the given view to the given view .
1899	Hide the overlay .
1900	Shows the sheet .
1901	Setup the toolbar .
1902	Setup the drawer .
1903	Setup the tabs .
1904	Initializes the Fab sheet .
1905	Updates the fixed sheet .
1906	Updates the snackbar .
1907	Morphs a sheet into a sheet
1908	Morph a sheet from a sheet .
1909	Shows the suggestions for the current query .
1910	Returns the suggestions for the given query token .
1911	Returns true if the input is an explicit character .
1912	Returns true if the input is a wordbreak character .
1913	Checks if the input is a letter or digits .
1914	Gets the search index for the given cursor .
1915	Returns the index of the search index .
1916	Displays the text counter .
1917	Disable spelling suggestions .
1918	Updates the text count .
1919	Sets the MentionSpanFactory .
1920	Copies the contents of the text .
1921	Sets the contents of the text .
1922	Perform a paste on the clipboard .
1923	Updates the selection if necessary .
1924	Called when the cursor is changed .
1925	Sets all the selected mentions .
1926	Parse a duration string .
1927	Escapes a string to an XML string .
1928	Writes the HTML to a file .
1929	Creates a new BufferedImage .
1930	Creates a VolatileImage .
1931	Returns the string representation of this image .
1932	Maps the given family to the given family .
1933	Sets the shapeRendering value .
1934	Sets the text rendering .
1935	Append the element ID from the given hint .
1936	Gets the SVG path .
1937	Returns a string representation of a color .
1938	Generates a rgba color string .
1939	Sets the stroke style .
1940	Get svg fill style
1941	Get svg font style .
1942	Get font metrics .
1943	Scale the image to the specified scale .
1944	Sets the current transformation .
1945	Sets the transformation .
1946	Set the clip .
1947	Register a clip .
1948	Clip the clip .
1949	Clip the rectangle .
1950	Sets the clip .
1951	Gets the PNG data .
1952	Draws a rendered image .
1953	Draws a renderable image .
1954	Gets the radial gradient element .
1955	Returns the path to the clip path .
1956	Get the parts of a string .
1957	Record the log level .
1958	Record a timing event .
1959	Track timeouts .
1960	Check client connection .
1961	Handle the request .
1962	Creates the backend request and sends it to the client .
1963	Handle HTTP client errors .
1964	Handles the client response .
1965	Process the reactor .
1966	Creates a service discovery service .
1967	Perform a method call .
1968	Calls the method call .
1969	Creates a local proxy .
1970	Runs the given method call .
1971	Transform a method call to a method call .
1972	Stop the service .
1973	Start up the call queue .
1974	Finds the service name for the given DNS service name .
1975	Load service endpoints by name
1976	Convert a srvRecord to an endpoint definition .
1977	Checks the request type .
1978	Handle HTTP request .
1979	Handle a method call .
1980	Creates a Consul instance .
1981	Get a DNS client .
1982	Creates a new Queue .
1983	Get the send queue .
1984	Converts a promise to a callback .
1985	Converts a Promise to a callback .
1986	Create a callback for the given consumer consumer .
1987	Load health services .
1988	Loads healthy services for a service .
1989	Gets a DNS client .
1990	Add oneShotAfterTask .
1991	Process all queues .
1992	Remove a future from the queue .
1993	Create a new CallbackCoordinator .
1994	Monitor callbacks .
1995	Monitor the callback list .
1996	Wrap a callable with a timeout .
1997	Build proxy service .
1998	Builds a proxy service .
1999	Handle a web socket call .
2000	Starts the server .
2001	Add an event listener .
2002	Creates a service discovery service .
2003	Converts a JSON string into an object .
2004	Creates a list from a JSON array .
2005	Converts an object to a JSON string .
2006	Converts a JSON string into a Map .
2007	Converts a value map to a map .
2008	Checks if the given name has a callback .
2009	Sets the callback for the given type .
2010	Wrap the callbacks .
2011	Sets the callback for the given component class .
2012	Sets the callback for the given component class .
2013	Sets the callback for this component .
2014	Sets the callback for the given key .
2015	Adds an optional callback to the builder .
2016	Adds a header to the response .
2017	Checks if a service is registered .
2018	Ping the agent
2019	Register a service .
2020	Remove a service
2021	Deletes a check .
2022	Perform a check .
2023	Check if the given check is a valid check .
2024	Checks a check for a given check .
2025	Stop the server .
2026	Handle async callback .
2027	Send a message to the web server .
2028	Creates a proxy .
2029	Create a ReceiveQueueListener .
2030	Returns a new ReceiveQueue instance .
2031	Creates a json send queue .
2032	Start listener .
2033	Build service queue .
2034	Check if the service is ok
2035	Fail with the given error
2036	Enable logging for logging .
2037	Enable Consul service discovery .
2038	Gets the admin builder .
2039	Gets the context meta builder .
2040	Adds an endpoint service to the service .
2041	Adds an endpoint service to the service .
2042	Adds an endpoint service .
2043	Adds an endpoint service .
2044	Get service endpoint .
2045	Configure interceptors .
2046	Destroy a session .
2047	Loads the service endpoints .
2048	Delete a key
2049	Handle a request .
2050	Process the queue .
2051	Send an event to the queue .
2052	Starts the event bus .
2053	Gets the http request .
2054	Removes an event connector from the registry .
2055	Forward an event .
2056	Flushes all events .
2057	Reads a Microservice config file .
2058	Register a handler for a client call .
2059	This method is called when the method call is called .
2060	Extracts the request information from the request .
2061	Extract headers from the request .
2062	Handle REST call .
2063	Handles a response from a service to a service .
2064	Add a request to the request .
2065	Adds an integer to the list .
2066	Add an integer to the list .
2067	Adds new values to the list .
2068	Sets an element at the specified index .
2069	Reduces the values by the given function .
2070	Called when the request was sent .
2071	Notifies that the listener has been notified .
2072	Add default serializers .
2073	Gets the parse from the given type .
2074	Verify that there is no leading zeros .
2075	Parse unquoted field name .
2076	Handle an unexpected value .
2077	Skips a string .
2078	Checks if a token is valid .
2079	Decodes a base64 encoded base64 encoding .
2080	Checks if a string is a valid id .
2081	Checks if the given character is a valid id .
2082	Write a string to the buffer .
2083	Prepend the given character to the given buffer .
2084	Append a character escape .
2085	Set conversion properties .
2086	Convert a Thrift class to a Pig script .
2087	Returns a string representation of a Schema .
2088	Opens the index reader .
2089	Returns the progress of the current index .
2090	Convert a message to a tuple .
2091	Convert a field value to a protobuf .
2092	Convert a single field value to a tuple .
2093	Convert field value to Pig types .
2094	Convert a message descriptor to a schema .
2095	Convert a message descriptor to a FieldSchema .
2096	Convert a single field descriptor to a FieldSchema .
2097	Generates a Pig script .
2098	Convert a message descriptor to a pig script .
2099	Convert a message to a Pig script .
2100	Generate a script for a single field .
2101	Returns a TStructDescriptor .
2102	Extracts a map from a class .
2103	Creates a new instance of the index directory .
2104	Determines if the given class is dynamic .
2105	Returns a type reference to the given proto class .
2106	Returns the progress of the progress bar .
2107	Serialize the message .
2108	Set the input format .
2109	Sets the class configuration for the given configuration key .
2110	Writes a list of strings to a configuration .
2111	Reads a string from a configuration file .
2112	Write a list of strings to a configuration file .
2113	Reads a list of strings from a configuration file .
2114	Verifies that the given class is a Thrift class .
2115	Gets the value of a field .
2116	Gets the value of a field .
2117	Returns the type of the given field .
2118	Write a field to the proto .
2119	Convert a tuple to a Message .
2120	Convert a tuple to a single field descriptor .
2121	Adds a field to the builder .
2122	Convert Pig type to proto type .
2123	Convert a tuple into a Thrift object .
2124	Convert a field to ThriftValue .
2125	Creates a new TBase instance .
2126	Sets the combined input format for this configuration .
2127	Finds the indexes for the input paths .
2128	Set input paths .
2129	Gets the input paths .
2130	Adds a split split .
2131	Gets the locations of the hosts .
2132	Evaluate a delimiter .
2133	Create resource field schema .
2134	Reads bytes from the input stream .
2135	Returns a tuple of tuples .
2136	Creates a base64 base64 .
2137	Creates a new protobufConverter .
2138	Read next bytes from the stream .
2139	Reads the next byte array .
2140	Read next proto bytes from the stream .
2141	Creates a TaskAttemptContext .
2142	Creates a MapContext .
2143	Creates a new ThriftWritable instance .
2144	Creates a new instance of the class .
2145	Returns a new instance of a new instance .
2146	Gets the builder builder .
2147	Gets the proto builder builder .
2148	Creates a descriptor for the given field .
2149	Resolve message type name .
2150	Convert a thrift object to a Message .
2151	Convert a thrift object to a Message .
2152	Build map entry message .
2153	Map the field name to a proto message type .
2154	Recursively walk the given path .
2155	Collect all paths from the given path .
2156	Get the size of a directory .
2157	Set the column number .
2158	Update the job conf .
2159	Returns the method for parsing from the given class .
2160	Parse a message from the input stream .
2161	Parse a message from an input stream .
2162	Put a tuple into the writer .
2163	Sets the class conf for this job .
2164	Set the type ref .
2165	Check if the container size is valid .
2166	Sets the pattern .
2167	Converts a string to a lower case .
2168	Returns the ordinal of the given number .
2169	Creates a new protobuf instance .
2170	Creates a new LzoW3CLogInputStream .
2171	Set the output format .
2172	Returns true if the given word matches the pattern .
2173	Replace all occurrences of the given word .
2174	Returns the plural form of the given word .
2175	Checks if the given word is uncountable .
2176	Gets the output stream .
2177	Verifies that the given class is valid .
2178	Creates a new ThriftConverter .
2179	Gets the given class name .
2180	Returns the type of the given Thrift class .
2181	Returns a list of columns to read from the given configuration .
2182	Sets the configuration for the given class .
2183	Execute HTTP request .
2184	Adds the authorization header to the request .
2185	Validate the response .
2186	Parses the given kind .
2187	Parses a JSON string into a list of things .
2188	Formats a comma separated list .
2189	Wait until interval is reached .
2190	Adds the basic authentication header .
2191	Refresh the current token .
2192	Prints a comment tree .
2193	Converts an object to an integer .
2194	Converts an object to a double value .
2195	Converts an object to a boolean value .
2196	Converts an object to a long value .
2197	Parses a tree of comments .
2198	Parses a JSON string .
2199	Creates a signature for the given endpoint .
2200	Sort the map .
2201	Get information about an Oembed .
2202	Create an Instagram object .
2203	Creates an object from a response .
2204	Checks that two objects are not null .
2205	Checks that the given string is empty .
2206	Check if a URL is valid .
2207	Check if the URL is valid
2208	Creates a new InstagramClient instance .
2209	Configure connection settings .
2210	Returns the content of the request body .
2211	Pretty print JSON response .
2212	Add a callback to the Instagram subscription .
2213	Set the client ID .
2214	Set the client secret .
2215	Set the Instagram Subscription type .
2216	Sets the verification token .
2217	Sets the aspect .
2218	Sets the latitude of the Instagram subscription .
2219	Set the longitude of the Instagram subscription .
2220	Set the radius .
2221	Delete a subscription .
2222	Delete all subscriptions
2223	Get subscription list
2224	Formats a map .
2225	Encodes a string .
2226	Append parameters to query string .
2227	Concatenates a map of params into a string .
2228	Converts a query string into a map .
2229	Throw an exception .
2230	Add a trade .
2231	Increase the maximum length of the given index .
2232	Calculates the maximum drawdown .
2233	Gets the start index of the given interval .
2234	Calculates the regression line .
2235	Opens a new order .
2236	Builds a chart time series .
2237	Returns a random decimal decimal .
2238	Generate a random tick .
2239	Increment the acceleration .
2240	Calculates the SAR for the given index .
2241	Calculates the values of the trade .
2242	Fill the values to the end of the end .
2243	Loads the logger configuration .
2244	Create OHLCDataset Dataset .
2245	Creates a new DataSeriesCollection .
2246	Adds the cash flow .
2247	Display the chart .
2248	Removes all ticks from the maximum tick count .
2249	Builds a list of TickTicks .
2250	Destroy the group .
2251	Saves the state of the instance .
2252	Sends an event .
2253	Watch the given executor .
2254	Register a directory .
2255	Gets the class loader .
2256	Adds the plugins to the classpath .
2257	Adds the project dependencies to the classpath .
2258	Resolve executable dependencies .
2259	Find the executable artifact .
2260	Handle working directory .
2261	Gets the start date range for this feed .
2262	Get the bounds of the feed .
2263	Checks if the given distance and time is valid .
2264	Loads the table .
2265	Returns the size of the table .
2266	Set field to null .
2267	Copy all tables into a snapshot .
2268	Check if table exists .
2269	Adds the missing columns to the table .
2270	Registers a snapshot namespace .
2271	Get the ID of the trip .
2272	Execute the next batch .
2273	Clean up the zip file .
2274	Export a table to the table .
2275	Registers an error .
2276	Registers an error .
2277	Export a feed to a feed .
2278	Load data from a file .
2279	Validate a feed .
2280	Delete all tables in the database .
2281	Creates a new DataSource instance .
2282	Add information about the given key .
2283	Creates a new GTFSError .
2284	Creates a new GTFSError .
2285	Creates a new GTFSError .
2286	Returns the average speed for a given pattern .
2287	Returns the average speed for the given trips .
2288	Returns the start time for the given trips .
2289	Returns the end time for the given trips .
2290	Get the distance of a pattern .
2291	Returns the average stop spacing for a pattern .
2292	Copy entity to sql table .
2293	Creates a new ValidateFieldResult .
2294	Get the number of errors .
2295	Commits the database .
2296	Convert a string to a string .
2297	Compares this GTFSErrorError .
2298	Calculates the distance between two points .
2299	Defines a field definition .
2300	Gets a grouped field definition .
2301	Deduplicate int array .
2302	Get all trips for a given date .
2303	Returns the average headway for a given stop .
2304	Returns a map of route headways for a given stop .
2305	Get the headway for a given route .
2306	Creates a JsonNode from a string .
2307	Create a new document .
2308	Update the StopTimes for a pattern .
2309	Verifies that all references exist in the database .
2310	Verifies that two stops are unmodified .
2311	Inserts a new StopTimeTimes into the table .
2312	Delete an entity .
2313	Handle a statement execution .
2314	Returns the number of rows in the table .
2315	Returns a set of references for the given table .
2316	Returns the value for the given id .
2317	Create a new feed file .
2318	Put a feed into the database .
2319	Returns true if the given date is active .
2320	Initialize the GraphQL graph .
2321	Returns a list of field names .
2322	Returns all required fields .
2323	Returns a list of required fields .
2324	Create SQL table .
2325	Generate insert sql .
2326	Returns a comma separated comma separated comma separated comma separated comma separated comma separated comma separated comma separated comma .
2327	Generate UPDATE SQL statement .
2328	Generate a select statement for the given name .
2329	Generate a SQL query for all existing fields .
2330	Generate delete SQL statement .
2331	Creates a SQL table from a database .
2332	Clones all stop times in the table .
2333	Returns the index field index for the given field .
2334	Ensure that the given namespace is valid .
2335	Returns the index of the given field .
2336	Returns a set of keys in this map .
2337	Create a GTFS feed from a file .
2338	Finds all patterns in the trip .
2339	Get the distance of a trip .
2340	Get the speed of a trip .
2341	Returns a list of StopTimes for a given Stop .
2342	Returns a list of services for a given date .
2343	Get the agency time zone for a given stop .
2344	Create a map of TripPattern objects .
2345	Sets the idle timer .
2346	Enable the receiver .
2347	Sets the idle state .
2348	Add a job status .
2349	Returns true if the given job id matches the given job id .
2350	Removes a job status .
2351	Reschedule failed job .
2352	Clears the cache .
2353	Called when a start job is received .
2354	Receive a stop job .
2355	Checks if the job is tracking .
2356	Adds a string to the bundle .
2357	Stores a string array .
2358	Gets the value associated with the given key .
2359	Put a PersistableBundle .
2360	Writes the message to a parcel .
2361	Get the height of the view .
2362	Print a log message .
2363	Checks if the given properties are valid .
2364	Checks if the given properties are valid .
2365	Prepare the XML for export .
2366	Sets a property .
2367	Converts a string into a string .
2368	Get real path from servlet URL .
2369	Verify the OAuth message .
2370	Verify parameters .
2371	Validate request .
2372	Launch the profile .
2373	Builds the tool consumer profile .
2374	Validates that the service is valid .
2375	Validate capabilities .
2376	Add custom properties to the launch properties .
2377	Toggles the given view view .
2378	Scrolls the given view to the specified delta .
2379	Converts a SafeUrl to a SafeUrl .
2380	Creates a SafeStyleProto object .
2381	Creates a SafeScriptProto object .
2382	Converts a SafeStyleSheet to a SafeStyleProto .
2383	Converts a TrustedResourceUrl to a TrustedResourceUrl .
2384	Creates a SafeHtmlProto object .
2385	Wrap angle radians .
2386	Round the given input to the given number .
2387	Compute the lerp .
2388	Convert a quaternion to a quaternion .
2389	Compute the lerp .
2390	Computes the trie of a trie .
2391	Computes the blend of two colors .
2392	Returns the value of the given value .
2393	Calculates the inverse of a square .
2394	Cast an object to a float .
2395	Cast an object to a byte .
2396	Cast an object to a short value .
2397	Cast an object to an integer .
2398	Cast an object to a double .
2399	Cast an object to a long .
2400	Cast an object to a boolean .
2401	Returns the mean of the given values .
2402	Modifies the given value .
2403	Creates a shift to the given number .
2404	Returns a new quaternion .
2405	Returns a new quaternion .
2406	Rotate a quaternion .
2407	Returns the length of this vector .
2408	Normalize this quaternion .
2409	Creates a Quaternion .
2410	Creates a Quaternion .
2411	Creates a quaternion .
2412	Creates a quaternion .
2413	Creates a quaternion from a given angle .
2414	Creates a new quaternion .
2415	Returns the axis of the axis .
2416	Multiplies the complex of this complex .
2417	Divide two complex numbers
2418	Rotate this vector .
2419	Normalizes the complex fraction .
2420	Converts an angle to a quaternion .
2421	Creates a complex f .
2422	Creates a Complexf from the given angle .
2423	Get the maximum axis .
2424	Hash a double value .
2425	Returns a new quaternion .
2426	Returns a new quaternion .
2427	Divide a quaternion .
2428	Returns the axis of this vector .
2429	Returns the rotation angle of the axis .
2430	Creates a Quaternion object from a binary representation .
2431	Creates a Quaternion .
2432	Creates a quaternion from a rotation angle .
2433	Creates a quaternion from a rotation angle .
2434	Creates a quaternion from a given angle .
2435	Creates a quaternion from a given angle .
2436	Multiply two complex numbers .
2437	Divide two complex numbers
2438	Rotate this vector .
2439	Converts an angle to a quaternion .
2440	Creates a complex d .
2441	Creates a Complexd instance from the given angle .
2442	Move the view to the specified scale .
2443	Move a child view to the specified scale .
2444	Sets the block span for the given string .
2445	Reduce the bounding constraints .
2446	Transform the type parameters to the given type .
2447	Creates a symbol reference for the given symbol declaration .
2448	Creates a symbol reference for the given class .
2449	Checks if the given type is a valid type .
2450	Returns the least upper bound of the given types .
2451	Returns the ground target type of the given lambda expression .
2452	Computes the non - wildcard parameterization of the given type .
2453	Gets the union of the given types .
2454	Returns the type of the given dot expression .
2455	Solve the given object creation .
2456	Solve a method call .
2457	Finds the given lambda expression .
2458	Returns the qualified name for the given class or scope .
2459	Get the type of this node .
2460	Checks if the break statement is exits .
2461	Checks if the given statement is complete .
2462	Solve a type in a type .
2463	Solves a method in the given type .
2464	Creates a new value from a resolved value .
2465	Checks if the invocation is an invocation of an invocation .
2466	Checks if a method call is a generic method call .
2467	Checks if expression is in assignment context .
2468	Predict the features of a feature .
2469	Load the model .
2470	Returns the leaf index of the leaf node .
2471	Returns the value of the leaf value for the given feature .
2472	Unattens an object to a string .
2473	Flattens the source to JSON .
2474	Flattens an object to a map .
2475	Creates a concatenated view .
2476	Creates an event stream for an observable .
2477	Creates a new EventStream .
2478	Generate animation frames .
2479	Creates a new EventStream with the given set .
2480	Wrap an ObservableList .
2481	Waits until the condition is reached .
2482	Observes an observer .
2483	Returns a copy of this Metadata .
2484	Strip a known prefix .
2485	Configures a digester .
2486	Process class mapping .
2487	Joins the given values .
2488	Initialize the device scan .
2489	Determine if the device is a phone .
2490	Determine if the browser is a webkit .
2491	Determine if the device is a Windows mobile device .
2492	Determine if the browser is a BlackBerry .
2493	Determine if the browser is a S60 browser .
2494	Determine if the device is available .
2495	Determine if the mobile device is available .
2496	Determine if the operating system is available .
2497	Determine if the device is a Maemo table .
2498	Determine if the device is mobile .
2499	Determine if the device is a mobile device .
2500	Determine if the mobile device is available .
2501	Checks if the given value is an EL expression .
2502	Returns true if the given string contains the given value .
2503	Builds the script url .
2504	Creates an EL method .
2505	Checks if the given string is a field descriptor .
2506	Copy the headers from the proxy response .
2507	Encode a URI query .
2508	Convert this URI to a URI .
2509	Build a query string .
2510	Gets a parameter .
2511	Gets the values of a parameter .
2512	Add parameters to the URL .
2513	Returns the view id for the given view .
2514	Gets the URL pattern parser .
2515	Gets the validators for the given path parameter .
2516	Creates a new QueryStringBuilder instance .
2517	Extracts the query string from the URL .
2518	Adds a parameter to the request .
2519	Gets the provider type providers .
2520	Gets the negation count .
2521	Add a parameter to the navigation .
2522	Build the standard out of the standard output .
2523	Process a class entry .
2524	Parse query string .
2525	Sets the excluded parameters .
2526	Builds the URL for the given mapping .
2527	Sends an error message .
2528	Visits the given class .
2529	Prepend the URL to the request context .
2530	Strips the given URI .
2531	Translate the given value to the given locale .
2532	Builds the dynamic view id for the given faces .
2533	Process DynaView .
2534	Returns the required type of the given class .
2535	Gets an annotation proxy .
2536	Gets all fields of the given class .
2537	Get all fields of the given class .
2538	Put a value into the map .
2539	Removes the given key from the map .
2540	Load the agent .
2541	Checks if the agent is available .
2542	Copy a file into a file .
2543	Checks if the given file is the same .
2544	Adds a directory to the directory .
2545	Initializes the zip output stream .
2546	Zip a file into a ZIP archive .
2547	Get the default manifest .
2548	Adds a section to the manifest .
2549	Writes the text to the writer .
2550	Returns a list of all warnings .
2551	Returns an existing section .
2552	Copy a file to a file .
2553	Add a new manifest .
2554	Copies the contents of the given archive .
2555	Clean up the manifest .
2556	Reset the configuration .
2557	Writes a list of directories .
2558	Gets the zip files and directories and directories .
2559	Decompress the input stream .
2560	Compress the source .
2561	Merge attributes from the given section .
2562	Sets the deployment descriptor .
2563	Add an archive to the archive .
2564	Adds a directory to the archive .
2565	Compress the source .
2566	Add resources to the archive .
2567	Add parent directories to the archive .
2568	Adds a file to the archive .
2569	Creates an empty ZIP archive .
2570	Reset the archive .
2571	Compress the input stream .
2572	Compress a Plexus file .
2573	Sets the maximum dynamic table size .
2574	Decodes aULE128 from the input stream .
2575	Returns the index of the given name .
2576	Returns the index of the given header .
2577	Creates a map of header values .
2578	Returns the length of the encoded byte array .
2579	Returns the length of the header .
2580	Adds a header field .
2581	Sets the size of the buffer .
2582	Encode header .
2583	Set the maximum header table size .
2584	Encodes an integer into the output stream .
2585	Encode a string literal .
2586	Encode a literal .
2587	Ensures that the size of the buffer contains the given size .
2588	Gets the header field .
2589	Gets a header entry .
2590	Returns the index for the given name .
2591	Adds a header to the buffer .
2592	Returns the hash of the given name .
2593	Decodes the given buffer .
2594	Sets the default script names .
2595	Assert that the expected value is equal .
2596	Asserts that the expected value is equal to the expected value .
2597	Asserts that the expected value is greater than the given expected value .
2598	Asserts that the given value is greater than the given expected value .
2599	Assert that the given character is equal .
2600	Assert that the given character is not equal .
2601	Asserts that the given character is less than the given character .
2602	Assert that the given character is greater than the given character .
2603	Assert that the given character is greater than the given character .
2604	Assert that the given character is less than the given character .
2605	Asserts that the given character is lowercase .
2606	Asserts that the given character is upper case .
2607	Assert that the given array contains the expected size .
2608	Assert that the given array contains the given values .
2609	Assert that the given key contains the given key .
2610	Assert that the given key contains the given key .
2611	Assert that the given value contains the given value .
2612	Assert that the given value contains the given value .
2613	Assert that the given map contains duplicates .
2614	Assert that the given number is equal .
2615	Assert that the given value is zero .
2616	Assert that the given value is not zero .
2617	Assert that the given value is positive .
2618	Assert that the given value is less than zero .
2619	Assert that a float is equal to the given offset .
2620	Assert that the given value contains the given value .
2621	Assert that the expected value is equal .
2622	Assert that the expected value is greater than the expected value .
2623	Asserts that the expected value is less than the expected value .
2624	Asserts that the expected value is less than the expected value .
2625	Asserts that the given array contains the given values .
2626	Asserts that the given sequence contains the given sequence .
2627	Assert that the given object is equal .
2628	Assert that two objects are equal .
2629	Asserts that two objects are equal .
2630	Assert that the given object is not equal .
2631	Assert that the given values are not equal .
2632	Assert that the given array is sorted .
2633	Creates a matcher that matches the given name .
2634	Matches a string that is not empty .
2635	Get the middle name for a field name .
2636	Checks if the given field exists .
2637	Gets an annotation resolver .
2638	Sets the expected status of the method .
2639	Reduce class name .
2640	Gets the value of a property .
2641	Filter the request callback .
2642	Returns an array of class names .
2643	Send a JSONP request to the resource .
2644	Process the token .
2645	Handle password .
2646	Handles the authorization decision .
2647	Process a ticket .
2648	Collect claims from subject names .
2649	Handles the authorization decision .
2650	Issue a user info .
2651	Computes the login id .
2652	Handles authentication request .
2653	Handle introspection request .
2654	Creates the service owner credentials .
2655	Creates the credentials for the authentication service .
2656	Gets the JAXRs client .
2657	Creates a JAXR client .
2658	Sets the connection timeout .
2659	Sets the read timeout .
2660	Execute API call .
2661	Handle authorization request .
2662	Process the standard introspection .
2663	Process the user info .
2664	Handle authentication request .
2665	Process the authorization .
2666	Checks if the user has already been logged .
2667	Process the revocation .
2668	Extracts the client certificate from the request .
2669	Updates the implied repositories .
2670	Generate an X509 certificate .
2671	Get the name of the given node .
2672	Generate relationship file .
2673	Commits changes .
2674	Add snapshot data to the list .
2675	Gets the name of the remote repository .
2676	Returns the next unique name .
2677	Send a message to Kafka .
2678	Send a message to a topic .
2679	Send a message to Kafka .
2680	Returns a set of cache names .
2681	Creates a zip file .
2682	Reads the contents of a ZipInputStream and returns it .
2683	Gets the target key for the given target name .
2684	Checks if the given path is enabled .
2685	Delete obsolete files
2686	Parses the repo name and returns it .
2687	Checks if a store exists .
2688	Loads artifacts from disk and stores them in disk .
2689	Loads an artifact store from disk and stores it .
2690	Creates a hosted repository from an input file .
2691	Creates a new http client context .
2692	Creates a new http client .
2693	Repair the repository .
2694	Handle group members changed .
2695	Set system properties .
2696	Get the list of file ranges .
2697	Reads the messages from the given stream .
2698	Creates a table with the given options .
2699	Deletes the table .
2700	Delete an existing table .
2701	Upload permissions to table .
2702	Download permissions .
2703	Sets the base defaults for the request .
2704	Extracts the error information from an input stream .
2705	Generates an access condition for the given sequence number .
2706	Generates an access condition for the given sequence number .
2707	Generates an access condition for the given sequence number .
2708	Applies the condition to the request .
2709	Applies the source condition to the request .
2710	Applies the append condition to the request .
2711	Applies the lease condition to the request .
2712	Applies the sequence condition to the request .
2713	Verify that the given etag is valid .
2714	Combines two filters .
2715	Sets the storageUri .
2716	Write the shared access policy to a stream .
2717	Generate the message body .
2718	Add canonicalized headers .
2719	Appends canonicalized element .
2720	Calculate the canonicalized HTTP request .
2721	Calculates the canonicalized HTTP request header .
2722	Computes the HMAC256 hash .
2723	Sign a table request .
2724	Gets the first message from the list of messages .
2725	Adds a message to the queue .
2726	Clear the queue .
2727	Create a queue .
2728	Creates a queue if it exists .
2729	Deletes a queue .
2730	Delete a queue .
2731	Delete a message .
2732	Download attributes .
2733	Check if the queue exists .
2734	Get the next message from the queue .
2735	Returns an iterator over all messages in the queue .
2736	Retrieves messages from the queue .
2737	Retrieves a single message .
2738	Retrieves messages from the queue .
2739	Retrieve messages from the queue .
2740	Updates a message .
2741	Update a message .
2742	Upload permissions .
2743	Download permissions .
2744	Returns the address of the queue .
2745	Get the hour metrics table for the given service .
2746	Get the minimum metrics table for the given service .
2747	Returns the message content as byte array .
2748	Returns the message content as a string .
2749	Gets the list of file and directory items from the input stream .
2750	Applies the continuation token to the query builder .
2751	Perform a merge operation .
2752	Create a new HttpURL connection .
2753	Updates an existing table .
2754	Sets the ACL .
2755	Serializes the service properties to a byte array .
2756	Write retention policy .
2757	Write CORS properties to XML .
2758	Writes metrics to XML .
2759	Serializes the LoggingProperties .
2760	Abort a copy operation .
2761	Add a share snapshot to the query builder .
2762	Creates a copy of a file .
2763	Creates a share request .
2764	Delete a share .
2765	Gets ACL request .
2766	Gets a file .
2767	Get file properties .
2768	Get a list of file ranges .
2769	Get share properties .
2770	Get share statistics .
2771	Gets the URI query builder .
2772	Gets the properties of the given URI .
2773	List shares .
2774	Sets the share metadata for the given URI .
2775	Sets the metadata for a directory .
2776	Create a directory .
2777	Delete a directory .
2778	Get the properties of a directory .
2779	Lists all files and directories .
2780	Put a file to the given URI .
2781	Puts a file to the given URI .
2782	Sets the size of a file .
2783	Sets the metadata for the given URI .
2784	Set file metadata .
2785	Creates a snapshot of the given URI .
2786	Set file properties .
2787	Close the stream .
2788	Dispatch a read operation .
2789	Read data from the stream .
2790	Read data from the stream .
2791	Reset the file .
2792	Reads the number of bytes from the stream .
2793	Runs the BlobGetStartedTask .
2794	Runs the queueing task .
2795	This method is called when the table gets started .
2796	Runs the table payload for the given text view .
2797	Output a text view .
2798	Prints the exception from the sample .
2799	Prints the start of the sample .
2800	Prints information about a sample .
2801	Calculates the canonicalize of the table .
2802	Gets the last result of this request .
2803	Checks if the blob is correct .
2804	Updates the iterator .
2805	Start copy operation .
2806	Start copy operation .
2807	Start a copy of a file .
2808	Start copy operation .
2809	Start copy operation .
2810	Start copy operation .
2811	Creates a new file .
2812	Creates a new file .
2813	Delete empty file
2814	Downloads the contents of the file .
2815	Download file ranges .
2816	Opens a file writing to a file .
2817	Opens a write operation .
2818	Opens the file output stream .
2819	Uploads a file .
2820	Uploads a file .
2821	Uploads a text content .
2822	Uploads a string to a file .
2823	Uploads a stream to the specified stream .
2824	Upload a file into the storage .
2825	Put a file into the storage .
2826	Resizes the file .
2827	Uploads a stream to the server .
2828	Uploads a file to the storage .
2829	Gets the parent name from the resource address .
2830	Get the share .
2831	Append a single URI to a single URI .
2832	Get blob name from a URI .
2833	Get canonical path from storage .
2834	Gets the container name from the given URI .
2835	Get the file name from the resource address .
2836	Get the share name from a URI .
2837	Returns the table name from the given resource address .
2838	Get resource name from URI .
2839	Returns the container URI for the given blob address .
2840	Returns the share URI for the given file address .
2841	Parse a query string .
2842	Generates a signature for the shared access policy .
2843	Generates a shared access signature for a queue .
2844	Generates a shared access signature for a table .
2845	Creates a directory .
2846	Creates a new file with the given options .
2847	Deletes a file .
2848	Check if the file exists .
2849	Gets the list of files and directories .
2850	Get the share .
2851	Delete messages from the queue .
2852	Delete a message .
2853	Download attributes from a URI .
2854	Creates a request to the specified URI .
2855	Parses messages from the queue .
2856	Retrieves messages from the queue .
2857	Updates a message .
2858	Set ACL .
2859	Get ACL .
2860	Split a string into a list of strings .
2861	Split a string into an EnumSet .
2862	Update the HMAC hash .
2863	Gets the Hmac256 hash .
2864	Validates an IP address .
2865	Decodes a string .
2866	Encode a byte array .
2867	Validates a base64 string .
2868	Validates the container name .
2869	Validate blob name .
2870	Validates a file name .
2871	Validates the table name .
2872	Gets a list of shares .
2873	Gets a list of shares .
2874	Gets a list of shares .
2875	Gets a list of shares .
2876	Gets a list of shares with the specified prefix .
2877	Sets the reflection cache .
2878	Get the date from the request .
2879	Get the metadata for the given request .
2880	Returns true if the request is encrypted .
2881	Extracts the error information from the given reader .
2882	Parses the error details from the request .
2883	Parse JsonErrorException .
2884	Get the access identifiers from the given stream .
2885	Get copy state from request .
2886	Get file share attributes .
2887	Gets the file attributes from the request .
2888	Gets the file attributes .
2889	Returns the HTTP verb for the given operation type .
2890	Fire an event .
2891	Fire sending request event .
2892	Fires a ResponseReceivedEvent .
2893	Fires an error event .
2894	Fire the request completed event .
2895	Fires a retry event .
2896	Assert that the continuation token is valid .
2897	Asserts that value is in range .
2898	Assert that value is greater than min .
2899	Validate max execution time .
2900	Returns the remaining timeout for the operation .
2901	Determines if the URI is a path style style .
2902	Checks if the given URI is a host dns name .
2903	Formats the given etag .
2904	Generates a new StorageException .
2905	Get the standard header value .
2906	Parses a string from a string .
2907	Parse RFC1123 date from a string .
2908	Safely convert a base URI to another URI .
2909	Log an error message .
2910	Log a HTTP response .
2911	Trims the end of a string .
2912	Trims the start of a string .
2913	Parses a date string .
2914	Gets the list location mode for the given token .
2915	Populate the default queue options .
2916	Reads the field from the input stream .
2917	Reads a quoted string .
2918	Reads a boolean value .
2919	Read a date .
2920	Reads a double field .
2921	Read a UUID from the field .
2922	Reads an Integer .
2923	Reads a long value .
2924	Read a URI .
2925	Reads a delimiter from the stream .
2926	Parses a delimiter .
2927	Reads a field from the stream .
2928	Creates a new retry policy .
2929	Returns true if the next segment is available .
2930	Sets the class type .
2931	Sets the resolver .
2932	Write a MIME boundary .
2933	Writes a MIME boundary closure .
2934	Writes a multipart content type .
2935	Adds a value to the store .
2936	Add a URI to the URI .
2937	Adds a header to the request .
2938	Create a HTTP URL connection .
2939	Creates a HTTP request .
2940	Get service properties .
2941	Gets the user agent .
2942	Sets the metadata for the given URI .
2943	Set service properties .
2944	Close the stream .
2945	Commits the file .
2946	Dispatch a write operation .
2947	Flushes the buffer .
2948	Wait for the task to complete .
2949	Write data to the stream .
2950	Writes the data to the stream .
2951	Write data to the stream .
2952	Get DNS name .
2953	Try to configure the dev store .
2954	Attempt to configure a CloudStorage account .
2955	Creates a CloudAnalyticsClient .
2956	Creates a CloudBlobClient .
2957	Creates a cloud file client .
2958	Creates a CloudQueueClient .
2959	Creates a cloud table client .
2960	Generates the signature for the shared access policy .
2961	Generate the request id .
2962	Generate the request id for the given table name .
2963	Initialize this request .
2964	Converts the exception to an exception .
2965	PostProcesses the response .
2966	Parse the error stream .
2967	Delete an entity .
2968	Adds an entity to the table .
2969	Adds an entity to the table .
2970	Adds an entity to the table .
2971	Merges the given entity .
2972	Remove an entity .
2973	Removes all entities from the collection .
2974	Replace this table .
2975	Check if a single query is a single query .
2976	Lock the batch key .
2977	Creates a new file .
2978	Deletes the specified file .
2979	Download permissions .
2980	Generates the signature for the shared access policy .
2981	Upload permissions .
2982	Upload permissions .
2983	Get the qualified URI of this file .
2984	Create a new customer .
2985	Create a new Batch .
2986	Basic query .
2987	Inserts a new customer .
2988	Delete a Customer entity
2989	List tables .
2990	Generate a table query for the given prefix .
2991	Execute a query segment .
2992	Generate an iterator for a query .
2993	Populates the version1 header .
2994	Get a list of Queues from the given stream .
2995	Translate HTTP status code .
2996	List all queues .
2997	Returns a list of all queues .
2998	Gets a list of all queues .
2999	Gets a list of all queues .
3000	Retrieves a list of Queues segment segments .
3001	Add a configuration to the XML catalog .
3002	Returns a unique ID for the given ID .
3003	Sets the phase s phase .
3004	Set the error handler .
3005	Set the variable resolver .
3006	Set the schema resolver .
3007	Set the entity resolver .
3008	Gets the bound schema .
3009	Validate the schema .
3010	Apply schema validation to the given XML node .
3011	Resolve rule content .
3012	Returns the minimal schema for the given schema .
3013	Gets a preprocessed schema .
3014	Gets a preprocessedSchema from a schema .
3015	Reads the schema from a resource .
3016	Gets the query binding .
3017	Creates a preprocessed schema .
3018	Writes an XML element to a file .
3019	Writes an XML element to the specified stream .
3020	Writes an XML element to a writer .
3021	Apply a Schematronron .
3022	Apply a schema to the given node .
3023	Removes a parameter from the map .
3024	Removes all the specified variables from the specified list .
3025	Returns a list of all failedAssertions .
3026	Returns a list of all errors that match the given rule .
3027	Returns a list of SVRLSuccessfulReport objects .
3028	Gets all the results of the given Schematron .
3029	Returns a list of all the failedAssertions in the given SchematronOutputType .
3030	Sets the error level .
3031	Returns the query binding for the given name .
3032	Gets a query binding by name .
3033	Loads the XML file based on the input stream .
3034	Formats a message with the given arguments .
3035	Formats and returns the formatted message .
3036	Checks if the given node is valid .
3037	Checks if the given node is valid .
3038	Checks if the given resource is valid .
3039	Checks if the given source is valid .
3040	Creates a SchematronProvider from the given schema resource .
3041	Gets the Xmatron from the given resource .
3042	Helper method to get the error text .
3043	Returns the localized location for the given name .
3044	Writes an error to the error handler .
3045	Reads the active attribute from an XML element .
3046	Reads the AssertReport from XML .
3047	Reads and parses the given XML element .
3048	Reads a PSI schema from the XML element .
3049	Reads a Schematron from an XML element .
3050	Read an emph from an XML element .
3051	Read extension from XML .
3052	Reads the XML from an XML element .
3053	Reads a PSM from an XML element .
3054	Reads a PSR name from an XML element .
3055	Reads NSNS from XML .
3056	Reads a PSP from an XML element .
3057	Reads the parameters from an XML element .
3058	Reads a pattern from an XML element .
3059	Reads the phase from the XML .
3060	Reads a PSR rule from an XML element .
3061	Reads a schema from an XML schema .
3062	Reads a PSM from XML .
3063	Reads the title from an XML element .
3064	Reads the values of the given XML element .
3065	Creates a MapBasedNamespaceContext .
3066	Perform a regular expression .
3067	Mark the request as authorised .
3068	Checks if the request is authorized .
3069	Define a deadlock action .
3070	Gets a deferred action .
3071	Execute authorization and authorize the request .
3072	Checks if the given action is deadbolt action .
3073	Gets the roles of the subject option .
3074	Checks if the given role has a role .
3075	Creates a filter that matches the given content .
3076	Converts a list of roles to a string .
3077	Converts a list of permissions to an array .
3078	Returns a list of all of the given arguments .
3079	Returns true if the view is restricted .
3080	Overrides the overflow .
3081	Unflows the input buffer .
3082	Sets the bits of this bit .
3083	Encodes a string into a buffer .
3084	Encodes a string to a Writer .
3085	Map the given name to the given encoder .
3086	Returns the encoder for the given context name .
3087	Appends a character array to the given output array .
3088	Encode a string .
3089	Flushes the buffer to the writer .
3090	Flushes the buffer to the writer .
3091	Observes a sensor .
3092	Gets the value of a property .
3093	Executes the given query .
3094	Build the URL for the given query .
3095	Fetch the Sonar status from the given URL .
3096	Fetches the status of the Sonar status .
3097	Parses the QualityGateway response .
3098	Extract artifacts from the build .
3099	Process uploads .
3100	Computes the identifier of the package .
3101	Computes the generic identifier .
3102	Validate an artifact .
3103	Determines if the given build task has been configured .
3104	Returns true if the build task is direct to the given build task .
3105	Parse JSONPNC config .
3106	Monitor artifacts .
3107	Sets the status of the build set .
3108	Gets the build task .
3109	Monitor the repository .
3110	Merge two edges .
3111	Reads a file as a string .
3112	Reads the input stream as a string .
3113	Start a release .
3114	Clean up the task instances .
3115	Returns the task id for the given build id .
3116	Creates a copy of a collection .
3117	Removes expired builds .
3118	Setup build repository .
3119	This method is called when a BPM is created .
3120	Adds listeners to the repository .
3121	Creates a mock artifact .
3122	Sets the SSL client ssl request .
3123	Delete a temporary build .
3124	Delete a build config record .
3125	Builds the build set .
3126	Check if the build set is empty .
3127	Gets the environment driver .
3128	Returns a Predicate that is not archived .
3129	Load all build configurations .
3130	Store the result of the build .
3131	Initialize build record builder .
3132	Returns a predicate that matches the build configuration .
3133	Checks if the given URL is secured .
3134	Save artifacts to the cache .
3135	Saves the buildConfigSet record .
3136	Gets the build configuration for a build configuration set .
3137	Determines if the given build is an ARB .
3138	Determine if the builder has an ARB .
3139	Adds a listener to the list of listeners .
3140	Gets the process parameters .
3141	Collects dependencies for the given build configuration .
3142	Creates a build set task .
3143	Creates a build set task .
3144	Fill the build task set .
3145	Get all artifacts for a given build record .
3146	Adds a trailing slash .
3147	Deserialize a string .
3148	Serializes an array of integers into a string .
3149	Adds a task to the queue .
3150	Adds a task to the queue .
3151	Execute new ready tasks .
3152	Gets the task for the given build configuration .
3153	Checks if artifact is trusted .
3154	Add a build record .
3155	Remove a build record .
3156	Deletes a temporary build record .
3157	Returns all the dependencies of this build .
3158	Add a dependency .
3159	Removes a dependency from the build configuration .
3160	Retrieve a clone name from the given date .
3161	Gets the configuration for the given provider .
3162	Instantiate an embedded Tomcat Tomcat .
3163	Registers an embedded server .
3164	Unregisters an embedded server .
3165	Store a value in the store .
3166	Finds a value in the store .
3167	Concatenate a path to a path .
3168	Creates a context .
3169	Read a cookie from a raw string .
3170	Creates a new HttpHeader .
3171	Creates a new HttpHeader .
3172	Creates a web app context .
3173	Execute hook .
3174	Process all the fields of the given object .
3175	Process a field .
3176	Creates a new Apache http client .
3177	Creates a new Apache HTTP http client .
3178	Handle the request body .
3179	Create request URI .
3180	Adds headers to the request .
3181	Handle form parameters .
3182	Handles the request body .
3183	Adds cookies to the request .
3184	Creates an async http client .
3185	Parse Java version .
3186	Maps a collection of inputs to a list .
3187	Concatenates a list of values to a new value .
3188	Filters a list of elements .
3189	Creates a new HTTP response .
3190	Instantiate an EmbeddedJetty .
3191	Creates a new OkHttpClient .
3192	Creates a new OkHttpClient .
3193	Find all fields of a class .
3194	Finds the static fields of the given class .
3195	Find static methods .
3196	Finds all static fields that are annotated with the given class .
3197	Returns a list of static methods annotated with the given class .
3198	Setter for a field .
3199	Getter for a field .
3200	Invokes a method .
3201	Format a date .
3202	Format a time .
3203	Adds headers to the request .
3204	Checks if a string is blank .
3205	Removes a prefix from a string .
3206	Joins a collection of strings .
3207	Handle query parameters .
3208	Handle the request body .
3209	Adds the form parameters to the request builder .
3210	Handle the request headers .
3211	Adds headers to the request builder .
3212	Append a map to a Map .
3213	Append a list of values to a string .
3214	Append the given value to the given value .
3215	Gets the dialog from the distributed cache .
3216	Put a dialog into the distributed cache .
3217	Removes a dialog from the distributed cache .
3218	Initializes the stack with the given transport .
3219	Add a new transaction .
3220	Prints an entry .
3221	Loads the LDAP file .
3222	Dump the LDAP directory .
3223	Execute the LDAP .
3224	Configure a component .
3225	Adds the dependencies to the container .
3226	Builds the URLs of the given classpath elements .
3227	Gets the dependencies of a server .
3228	Gets the artifact from the server .
3229	Get server type .
3230	Creates a DSML format writer .
3231	Opens a DSML format .
3232	Configure the server .
3233	Start the server .
3234	Stops the UnboundID server .
3235	Returns the next record record .
3236	Execute the source .
3237	Start the server .
3238	Stops the server .
3239	Creates the root entry .
3240	Start the OpenDJ server .
3241	Stops OpenDJ server .
3242	Prints a DDL entry .
3243	Get the server type .
3244	Get the server configuration .
3245	Send a metric to the server .
3246	Report a metric .
3247	Reads a geometry type .
3248	Reads a Point from a ByteReader .
3249	Reads a LineString from a ByteReader .
3250	Reads a Polygon from a byte array .
3251	Read a MultiPoint from a ByteReader .
3252	Read a MultiLineString from a ByteReader .
3253	Reads a MultiPolygon from a byte array .
3254	Reads a geometry collection .
3255	Read a circular string .
3256	Read a compound curve .
3257	Read a CurvePolygon from a byte array .
3258	Reads a PolyhedralSurface from a byte array .
3259	Read a TIN .
3260	Read a Triangle from a byte array .
3261	Writes the given geometry to the given writer .
3262	Writes a point to a byte writer .
3263	Writes a line string .
3264	Writes a Polygon .
3265	Writes a MultiPoint to a MultiPoint .
3266	Writes a MultiLineString to the given writer .
3267	Writes a MultiPolygon .
3268	Writes a geometry collection .
3269	Writes a circular string .
3270	Write a compound curve .
3271	Write a curve polygon .
3272	Writes a Polyhedral surface .
3273	Writes a TIN .
3274	Writes a triangle .
3275	Returns the code for the given geometry .
3276	Returns the code for the given geometry type .
3277	Get geometry type .
3278	Checks if the file exists .
3279	Gets the gcd .
3280	Shortcut to abbreviate a string .
3281	Creates a JsonValue from a string .
3282	Creates a JMX object .
3283	Parses the given string .
3284	Get a string value from a map .
3285	Read a JSON object from a string .
3286	Gets the value associated with the given name .
3287	Returns an iterator over the members of this member .
3288	Resolve a placeholder value .
3289	Get the version of the JmxTransAgent .
3290	Read a JSON array from a string .
3291	Adds a value to the list .
3292	Sets the value at the given index .
3293	Gets the value at the given index .
3294	Gets the value of this agent .
3295	Returns an iterator over the values of this object .
3296	Process an event .
3297	Publish an event .
3298	Publish an event .
3299	Removes a child .
3300	Adds a tag to the tag map .
3301	Adds a value to the attribute map .
3302	Invokes the property change listeners .
3303	Adds all attributes to the attribute map .
3304	Removes the attribute value from the attribute map .
3305	Pushes all shared objects .
3306	Removes a value from the attribute map .
3307	Adds a value to the attribute set .
3308	Add all values to the attribute set .
3309	Removes all values from the attribute set .
3310	Removes all attributes from the attribute set .
3311	Add a value change listener to this attribute .
3312	Checks if the attribute value is valid .
3313	Sets the color of this color .
3314	Sets the color of this color .
3315	Sets the color of this color .
3316	Sets the color of this color .
3317	Load all tag classes .
3318	Returns the first substring of the given string .
3319	Clones an array .
3320	Returns true if the string contains whitespace .
3321	Strip whitespace .
3322	Removes all children from this object .
3323	Adds inner HTML tags to the list of children .
3324	Remove all children .
3325	Removes a child tag .
3326	Append children to the list of children .
3327	Initializes the attributes .
3328	Gets the attribute by name .
3329	Mark this attribute as owner tag .
3330	Initialize the builder .
3331	Returns an array of children as an array .
3332	Get the first child of this element .
3333	Returns the number of children of this node .
3334	Checks if a child has a child tag .
3335	Gets the opening tag .
3336	Inserts an element at the given parent .
3337	Set attribute value .
3338	Replaces all values in the given attribute values .
3339	Adds a WebSocket PushListener to the queue .
3340	Removes a WebSocket push listener .
3341	Removes tabs from the browser context .
3342	Gets the tag repository .
3343	Sets the nonce value for the WFFScript tag .
3344	Sets the border style .
3345	Sets the UUID value .
3346	Merge two data arrays .
3347	Removes all CSS properties .
3348	Returns true if the given cssProperty contains the specified property .
3349	Returns the CSS properties as a map .
3350	Find tags by attribute .
3351	Finds a tag by attribute .
3352	Find all attributes .
3353	Builds a stream of all tags .
3354	Find all attributes from the given tags .
3355	Check if a tag exists .
3356	Checks if an attribute exists .
3357	Builds a stream of attributes from a list of tags .
3358	Returns the text of this element .
3359	Write bytes to the stream .
3360	Sets the context path .
3361	Sets the context file .
3362	Adds the context to the embedded template .
3363	Returns a filter that matches the given content type .
3364	Creates a new Filter .
3365	Checks if there is an EOF file .
3366	Checks if the given token is a line space .
3367	Parses a string .
3368	Scans the input .
3369	Parse a command .
3370	Parses a string .
3371	Prints usage information .
3372	Determines the maximum length of the command .
3373	Creates a zip file .
3374	Read file contents .
3375	Creates a filter .
3376	Write an integer to the output stream .
3377	Write a 32 - bit integer .
3378	Writes a number of bits to the output stream .
3379	Print syntactic MarkerMarkers .
3380	Print SyntacticMarkers .
3381	Extracts a list of syntacticMarkers from a binary file .
3382	Gets the parent node .
3383	Gets the parents of this node .
3384	Gets the parent of this node .
3385	Appends a list of integers to the given array .
3386	Append two two arrays .
3387	Appends two integers to the given array .
3388	Append two arrays to the given type .
3389	Adds all elements to the collection .
3390	Converts a collection of strings to an array .
3391	Converts a collection of integers to an array .
3392	Sort a list of children .
3393	Returns true if the given array is sorted .
3394	Compares two arrays .
3395	Gets the build schema .
3396	Create the template extension point .
3397	Activate default plugins .
3398	Determine the system root .
3399	Determines the local root directory .
3400	Read a configuration file .
3401	Gets an instance of the given module .
3402	Start the loader .
3403	Activate all modules .
3404	Outputs the source error .
3405	Checks if the given task is ready .
3406	Parse a list of options .
3407	Split a string into a map .
3408	Gets the parent of the given type .
3409	Gets the parent of the given type .
3410	Substitute the given item to the given mapping .
3411	Returns the content type for the given file .
3412	Gets the entry for the given file .
3413	Prints the contents of a file .
3414	Print a binary file .
3415	Reads the items from the input stream .
3416	Creates a Trie from a path .
3417	Creates a command descriptor .
3418	Get the repository root directory .
3419	Resolve package dependencies .
3420	Scan the input .
3421	Creates a syntax error .
3422	Log the stack trace .
3423	Returns the indent string .
3424	Execute the instruction .
3425	Add a string to the array
3426	Get the name of the attribute .
3427	Gets the stack map attribute .
3428	Gets the local variable type attribute .
3429	Find the stack map entry .
3430	Find the index of the stack map .
3431	Find the index of the stack map .
3432	Build the uninitialized map .
3433	Update the stack map entries .
3434	Updates the uninitialized instruction stack .
3435	Set the stack map .
3436	Print the stack map .
3437	Creates a new stack map attribute .
3438	Returns the class name for the given type .
3439	Generate the stack map for the given type .
3440	Returns the type of the stack map .
3441	Creates a local variable scope .
3442	Calculate stack types .
3443	Returns a string representation of the access flag .
3444	Convert instruction list to string .
3445	Convert attribute name to string .
3446	Checks the given method generation .
3447	Checks all methods in the given class .
3448	Dump the stack trace .
3449	Dump all methods .
3450	Add a new instruction to the start .
3451	Returns the string representation of a constant .
3452	Resets the locals of the method .
3453	Convert a type to a class .
3454	Adds a new type to the array .
3455	Sets the frame .
3456	Inserts the instruction at the given instruction .
3457	Print instruction information .
3458	Build instruction list .
3459	Calculate the live stack map types .
3460	Finds the position of the given string .
3461	Read bytes from the given offset .
3462	Flush the output .
3463	Creates a new WebSocket client .
3464	Determine if the ad is a valid ad .
3465	Returns the ad view for the given index .
3466	Called when an ad to load an AdFailed .
3467	Gets the AdRequest .
3468	Returns the number of ads to be published .
3469	Get the original content position .
3470	Returns the index for the given position .
3471	Checks if the given position is available .
3472	Checks if the given position is available .
3473	Returns the wildcard type for the given type .
3474	Checks if the element is a generic type .
3475	Emits a package .
3476	Compress a type .
3477	Begin initializer .
3478	End a type declaration .
3479	Emit a single line comment .
3480	Emits an annotation value .
3481	End a method .
3482	Returns the type of the given type .
3483	Emits a set of modifiers .
3484	Gets the PSI class from the context .
3485	Finds and removes a method from the specified parameters .
3486	Generate Psi class .
3487	Makes sure that the class implements the psi code .
3488	Checks if the given element is a class .
3489	Checks if the given type is a type .
3490	Returns the type of the given type .
3491	Returns the name of the package .
3492	Returns the binary name for the given type .
3493	Generates a write to the given fields .
3494	Checks if the given type is public .
3495	Checks if the given type is public .
3496	Computes the determinant of the determinant .
3497	Find all classes matching the given criteria .
3498	Creates a generator that generates a random matrix .
3499	Get a list of bytes from a byte array .
3500	Retrieves a set of tuples from the client .
3501	Serializes the given key .
3502	Serializes the hash key .
3503	Deserialize a set of values .
3504	Deserialize hash keys .
3505	Deserialize hash values .
3506	Deserialize a map .
3507	Deserialize a map .
3508	Deserialize a HashSet .
3509	Creates a list from a domain address .
3510	Parse the host address .
3511	Parse a port number .
3512	Sets a value pair .
3513	Sync all data from redis
3514	Returns a set of tuples .
3515	Stops the leader election .
3516	Returns a string representation of the executor .
3517	Sets the quorum of a partition .
3518	Checks the permission for the given path .
3519	Join two parameters into a single byte array .
3520	Expire a key at the specified time .
3521	Decrement the specified number .
3522	Increment a number by integer .
3523	Add a key to a set of scores .
3524	Sets a range by score .
3525	Sends a score by score .
3526	Saves a slave of a slave
3527	Set a configuration parameter .
3528	Gets a bit at the specified offset .
3529	Gets the value of a key .
3530	Shutdown the event selector .
3531	Process the hbMain process .
3532	Perform IO processing .
3533	Loop through all sessions .
3534	Register a session .
3535	Add a default header .
3536	Sets the number of times that are received .
3537	Gets the value for the given key .
3538	Gets the value of the given key .
3539	Add encoding to request .
3540	Creates a stubbing .
3541	Encodes the given claims .
3542	Creates a new Date object .
3543	Create a new token .
3544	Gets the error dialog .
3545	Connects to Google account .
3546	Logout and clear the activity .
3547	Check if the edge cache is invalid .
3548	Get baragon service status
3549	Gets the global state of the global service .
3550	Get all load balancer groups
3551	Gets the list of all available base paths .
3552	Get a request by id .
3553	Gets a collection of requests .
3554	Ensure that all targets are registered .
3555	Deregisters removed targets .
3556	Ensure that the given targets are equal .
3557	Ensure that all targets have already been registered .
3558	Sets the href .
3559	Creates a new instance key .
3560	Processes a line separator .
3561	Flush the tag .
3562	Extracts the content from the given buffer .
3563	Read segment lines .
3564	Creates a regex pattern for the given configuration .
3565	Decorator to decorate a delegate .
3566	Unwrap a Decorator instance .
3567	Builds the engine .
3568	Add a template locator .
3569	Add a resolver .
3570	Registers a callback .
3571	Adds a value converter .
3572	Adds a context converter .
3573	Capitalize a string .
3574	Appends the given sequence to the given options .
3575	Builds the source cache .
3576	Push a container to the stack .
3577	Adds a segment to the stack .
3578	Validate the container .
3579	Splits a string into an iterator .
3580	Decorator for decorator .
3581	Flush the buffer .
3582	Finds a field by name .
3583	Registers all registered helpers .
3584	Registers a helper .
3585	Read segments from a container .
3586	Invalidate the given key part .
3587	Gets the formatter for the given value .
3588	Gets the local storage .
3589	Get session storage .
3590	Clears the cache .
3591	Checks if the given key exists .
3592	Put a value into storage .
3593	Removes an item from the cache .
3594	Creates a storage key .
3595	Creates a StorageKey for the given key name .
3596	Creates a storage key .
3597	Obtains the size of the button .
3598	Obtains the color of the button .
3599	Obtains the activation color from the given typed array .
3600	Obtains the pressed color .
3601	Obtains the disabled color .
3602	Obtains the icon from a typed array .
3603	Obtains the visibility animation for the given typed array .
3604	Adapts the shadow of the button .
3605	Adapts the image button size .
3606	Adapts the image button to the background button .
3607	Creates a DrawableDrawable DrawableDrawable .
3608	Creates a layer with the active color .
3609	Creates the background drawable for the layer .
3610	Creates the background drawable for the layer .
3611	Creates the background drawable .
3612	Get the size of the button button .
3613	Animates the visibility of the view .
3614	Creates an animation listener .
3615	Sets the size of the image .
3616	Obtains the thickness of the specified typed array .
3617	Initializes the paint .
3618	Initializes the animation animation .
3619	Creates an angle property .
3620	Initializes the SweepAnimator .
3621	Creates a new circle property .
3622	Creates an animation listener .
3623	Initializes the buttons .
3624	Creates a listener to listen action button .
3625	Initializes the button button .
3626	Creates a listener that will hide the button buttons .
3627	Initializes the chip .
3628	Creates a new chip listener .
3629	Handle the saved state .
3630	Obtains the text from the typed array .
3631	Obtains the color of the chip .
3632	Obtains the color of the chip .
3633	Obtains the icon from the typed array .
3634	Obtains the dialog from the given typed array .
3635	Obtains the icon icon from a typed array .
3636	Adds a close listener .
3637	Remove a close listener .
3638	Sets the background color .
3639	Sets the close button .
3640	Returns a map of partial names .
3641	Gets the script engine .
3642	Gets the layout mapping .
3643	Checks if the given class is present .
3644	Gets the value of an annotation .
3645	Gets an input stream .
3646	Gets the first input stream from the given names .
3647	Renders a template .
3648	Add aliases .
3649	Add an alias .
3650	Returns a ChronosListener .
3651	Run the given operation .
3652	Checks if method is a callback .
3653	Called when a service is resumed .
3654	Called when an event is processed .
3655	Invokes an untagged operation .
3656	Invoke the given operation .
3657	Cancel an operation .
3658	Cancel a request .
3659	Returns true if the given tag is running .
3660	Called when the operation finished .
3661	Store the result of the operation .
3662	Deliver the result .
3663	Deliver the given operation result .
3664	Logs a message .
3665	Cancel an operation .
3666	Starts a running operation .
3667	Cancel all operations .
3668	Returns true if the operation is cancelled .
3669	Runs the given operation .
3670	Creates an empty result .
3671	Run the given operation .
3672	Run synchronous synchronous synchronously .
3673	Called when the result is finished .
3674	Main entry point .
3675	Gets the modules .
3676	Main entry point .
3677	Checks if the buffer is valid .
3678	Initialize event listener .
3679	Gets the JMX server connection .
3680	Closes the JMX server connection .
3681	Initializes the view .
3682	Main entry point .
3683	Gets the validator .
3684	Returns a list of column names .
3685	Returns a list of column names .
3686	Get all packages .
3687	Returns the content of the file .
3688	Writes the content .
3689	Find a table by name .
3690	Find a bean by its name .
3691	Gets the reference properties of a bean .
3692	Gets the view properties for the given one .
3693	Update the versionable .
3694	Add a history .
3695	Customize the session .
3696	Creates a new requirement node .
3697	Write the entity to the database .
3698	Get IssueType by its name .
3699	Get a VmSetting by its name .
3700	Creates a string representation of a string field .
3701	Get a boolean field .
3702	Create a numeric field .
3703	Display a workflow .
3704	Refresh the workflow .
3705	Recursively walk a component tree .
3706	Receive a file .
3707	Gets the address strength .
3708	Converts a descriptor to a file descriptor .
3709	Get the blockscore error from the given exception .
3710	Score a question set .
3711	Digest the given input stream .
3712	Checks if the given path matches .
3713	Add an answer .
3714	Gets the matching info .
3715	Get address .
3716	Creates a new question set .
3717	Retrieves a question set .
3718	Returns the date of the birth date .
3719	Get address .
3720	Returns the incorporation date .
3721	Gets the revision history .
3722	Search for watchlists .
3723	Sets the dateOfBirth property .
3724	Sets the address .
3725	Retrieves a person .
3726	Retrieves a Candidate .
3727	Gets the authorization header .
3728	Returns the date of the birth end .
3729	Returns the type parameter of the given class .
3730	Gets a string property .
3731	Gets a boolean property .
3732	Returns the relative path for the given entry .
3733	Gets the error type .
3734	Gets the validation error code .
3735	Flushes all files in the directory .
3736	Synchronizes a collection of files .
3737	Returns a map of file descriptors .
3738	Creates the hierarchy for the given files .
3739	Find the unused port .
3740	Gets the value of a parameter .
3741	Sets the parameter values for this request .
3742	Sets a parameter value .
3743	Adds a parameter value to the context .
3744	Gets the target command .
3745	Get the value of a wizard
3746	Registers an OID .
3747	Creates a new node component .
3748	Creates a new subtree .
3749	Returns the complement of the given set .
3750	Creates a set of IndexFlavor objects .
3751	Adds an entry to the map .
3752	Removes the given key from the map .
3753	Get a random ID .
3754	Get the width of the user .
3755	Sets the sort direction .
3756	Sets the column order order .
3757	Returns a list of sorted column names .
3758	Sets the sort label for the component .
3759	Replace the component tag body .
3760	Sorts the page .
3761	Gets a config instance .
3762	Render the EFaps header items .
3763	Renders the required RequireScripts .
3764	Creates a JavaScript node script .
3765	Returns the data line for the classification .
3766	Initializes the classification .
3767	Expand all classes in the cache .
3768	Adds all child classes to the parent .
3769	Gets the keys of the class instance .
3770	Returns the cache key .
3771	Add highlight expressions .
3772	Add start tags .
3773	Add end tags .
3774	Gets a lazy load component .
3775	Gets the loading component .
3776	Close the page .
3777	Inserts a new element into the list .
3778	Get the previous wizard element .
3779	Add parameters to the wizard .
3780	Evaluates the instance of the instance .
3781	Adds the elements of the given UIClass .
3782	Updates the form elements .
3783	Adds a cell to the form .
3784	Evaluate the UI provider .
3785	Evaluate the field set .
3786	Gets the form elements of the class .
3787	Creates a sub menu item
3788	Gets the event javascript .
3789	Gets the image for the menu item .
3790	Gets an AjaxEventBehavior .
3791	Adds the component to the panel .
3792	Get the children of the given node .
3793	Make a request .
3794	Make a request .
3795	Perform an HTTP request .
3796	Make an HTTP request .
3797	Converts the given body into an object .
3798	Renders the header .
3799	Handles errors .
3800	Launch a job .
3801	Adds a reference to the index .
3802	Add additional metadata .
3803	Adds a promotion category to the query .
3804	Add synonymCategories .
3805	Adds a blacklist category to the query .
3806	Initialize the callbacks .
3807	Sets the request handler .
3808	Gets the resource stream .
3809	Get callbacks for the download frame
3810	Send a keepalive message
3811	Initialize the connection .
3812	Returns a list of UI user sessions .
3813	Process the HTML tag body .
3814	Render the component .
3815	Creates a dashboard link .
3816	Parses the given response .
3817	Parses a response .
3818	Safely parse response .
3819	Parses the response from the given response .
3820	Gets the events for this field .
3821	Process the component tag .
3822	Run the status of the job .
3823	Called when a component tag has been created .
3824	Renders the header .
3825	Sets the default menu .
3826	Get the label of the button .
3827	Gets the editable component .
3828	Sets the header of the header .
3829	Gets the date as a string .
3830	Returns a list of DateTime objects .
3831	This method is called when this method is called .
3832	Destroy the executor service .
3833	Called when the menu is clicked .
3834	Sets the action tag .
3835	Handle multipart request .
3836	Reset the set counter counter .
3837	Initialize the authentication handler .
3838	Perform a filter .
3839	Checks if login is valid .
3840	This method is called when the UI is executed .
3841	Gets the persistence script for the given UUID .
3842	Gets the print menu items .
3843	Gets the menu .
3844	Creates a sub menu .
3845	Returns the JS code for the given UI grid .
3846	Gets the data reload JS .
3847	Create the dialog .
3848	Handles the event .
3849	Adds a value to the row set .
3850	Returns the index for the given input name .
3851	Adds a new row to the table .
3852	Add children to the model .
3853	Gets the help for the command .
3854	Creates a new instance of the UI .
3855	Initialize this instance .
3856	Expands all children of this UI .
3857	Sorts the model .
3858	Checks if the row is hidden .
3859	Checks if the given instance is allowed .
3860	Execute the event handler .
3861	Require the label
3862	Binds the handler to this component .
3863	Get the data table .
3864	Execute the execution of the event .
3865	Returns the rendered content of the script .
3866	Gets the command .
3867	Returns the label of the button .
3868	Removes all finished tasks .
3869	Returns an iterator over all the jobs .
3870	Returns the bridge bridge with the given job name .
3871	Returns true if the user is logged in .
3872	Lazy login .
3873	Performs login .
3874	Logout the user .
3875	Adds an index to the query builder .
3876	Gets the model for the given instance .
3877	Adds the components to the form .
3878	Add a child to the body .
3879	Convert date field values to HTML
3880	Converts the field values to the appropriate converter .
3881	Handles errors .
3882	Validate field values .
3883	Evaluate form element .
3884	Validate form .
3885	Check if the form is required .
3886	Gets the form panels .
3887	Shows the dialog .
3888	Initialize the filter .
3889	Returns the complement of the given set of resources .
3890	Creates a set of resource types .
3891	Checks if the field is a checkout .
3892	Checks if the given field has access to the given type .
3893	Returns the name of the type icon .
3894	Initialize the menu .
3895	Require the label .
3896	Removes all pages from the session .
3897	Handles a component tag .
3898	Sets the menu item .
3899	Gets an EFaps session .
3900	Called when the request is started .
3901	Handles the end of the request .
3902	Registers a user session .
3903	Registers the activity .
3904	Adds a message connection to the session .
3905	Invalidate session
3906	Remove user session .
3907	Returns a set of user names .
3908	Returns a list of connections for a user .
3909	Returns the connection for the given session id .
3910	Gets the cache .
3911	Initialize the command .
3912	Gets the command .
3913	Execute the given event type .
3914	Adds the behaviors for this field .
3915	Returns the width of the widget .
3916	Evaluate the label .
3917	Returns true if the field is a table field .
3918	Create a simple field configuration .
3919	Returns true if the tablet is visible .
3920	Respond to the toolbar .
3921	Initializes the button .
3922	Returns a list of choice choices .
3923	Returns a DateTimeFormatter .
3924	Performs a GET request .
3925	Reads the menu .
3926	Reads the submenues for the given instance .
3927	Initialize the table .
3928	Gets the list of instances in this table .
3929	Add a filter to the list .
3930	Adds a filter to the table .
3931	Gets the filter .
3932	Gets the filter list for the given field .
3933	Gets the status of the given type .
3934	Store all the filters .
3935	Remove a filter .
3936	Gets the cell .
3937	Gets the list of instances of this instance .
3938	Returns the filter for the given field .
3939	Gets the command .
3940	Returns the title of the user .
3941	Checks if the given filter is a date .
3942	Returns the row with the given id .
3943	Prints the output of the UI .
3944	Returns the query string .
3945	Returns the list of excluded dimensions .
3946	Checks if a list of nodes are applied .
3947	Fills the dimensions of the given dimension .
3948	Builds the parameters for the hierarchy .
3949	Checks if the given XML file is a root element .
3950	Checks if the object has expired .
3951	Refreshes the cache entry .
3952	Try to clone the object .
3953	Initialize the cache .
3954	Sets the cache properties .
3955	Gets the cache property .
3956	Calculate the cache key .
3957	Gets the cache properties .
3958	Sets an entry in the cache .
3959	Deletes a key from the cache .
3960	Deletes a local cache .
3961	Deletes all caches .
3962	Deletes all local caches .
3963	Returns the label for the given element .
3964	Sorts the tab indexes .
3965	Generates a generic form .
3966	Generate HTML for a form element .
3967	Get the HTML for a form element .
3968	Returns the HTML for the given element .
3969	Register an application context .
3970	Builds a SelectInputInput .
3971	Builds the attributes for the tag .
3972	Build the maximum length of the criteria .
3973	Gets the accepted content types .
3974	Checks if the sessionId is the same as the sessionId .
3975	Creates a new CursorConverter .
3976	Initialize the loader .
3977	Gets the profile of the given SPFPerson .
3978	Sets the change listener .
3979	Creates a new DocumentBuilder .
3980	Creates a DOMSource from the given XML file .
3981	Gets a schema from a file .
3982	Parses the given XML file .
3983	Validate the given XML schema .
3984	Validate the XML document .
3985	Adds a child to the list .
3986	Remove an attribute .
3987	Creates a velocity template .
3988	Returns the XML representation of this tag .
3989	Add a service if not present .
3990	Gets the service by the given device .
3991	Handles the start command .
3992	Get all triggers for a given appIdentifier .
3993	Deletes all triggers for the given app package .
3994	Delete a trigger
3995	Get a trigger from the database .
3996	Validate access token .
3997	Converts a XML string to an object .
3998	Convert XML string to an object .
3999	Convert XML string to JSON .
4000	Invokes the specified method .
4001	Check if the current thread is running .
4002	Logs a method call .
4003	Loads an object from an input stream .
4004	Creates a new XML tag .
4005	Returns true if the query matches the query .
4006	Dispatch invocation .
4007	Unregisters a service .
4008	Generates a unique query ID .
4009	Called when the instance is lost .
4010	Stop the query .
4011	Stop all queries .
4012	Connect to the specified component .
4013	Creates a standard display view .
4014	Creates a spinner .
4015	Creates a date view .
4016	Creates a tag view .
4017	Creates a standard edit view .
4018	Send a notification .
4019	Convert this object to XML .
4020	Sets the content view .
4021	Returns the friendly name of the given field .
4022	Kill the scheduler .
4023	Initialize SPFContext .
4024	Broadcast an event .
4025	Creates a profile fragment .
4026	Initializes the profile data .
4027	Start a crop .
4028	Handles cropping .
4029	Converts an object to a JSON string .
4030	Add a tag .
4031	Sets the view tags .
4032	Save a trigger .
4033	Deletes a trigger .
4034	Starts the notification handler .
4035	Start local service .
4036	Adds an attribute to the map .
4037	Invoke a method .
4038	Sets the selection of the selected items .
4039	Sets the selected indices .
4040	Returns a list of all the selected strings .
4041	Returns a list of selected indices .
4042	Refresh the view .
4043	Shutdown the application .
4044	Insert new line .
4045	Write to the buffer .
4046	Converts an object to a string .
4047	Loads the service .
4048	Binds a service to the service .
4049	Disconnect from the service .
4050	Handle an error .
4051	Refresh all triggers
4052	Adds a person to the database .
4053	Removes a person from the database .
4054	Registers a service consumer .
4055	Gets the AppAuthorization by its ID .
4056	Register an application .
4057	Unregisters a service .
4058	Gets the persona for the given appIdentifier .
4059	Called when a message is received .
4060	Adds a new device to the list of clients .
4061	Connect to the middleware .
4062	Gets the value for the given field .
4063	Check if the field is modified .
4064	Stop search .
4065	Stop all search queries .
4066	Lookup the given identifier .
4067	Gets a profile field from the profile .
4068	Returns the base info for the given persona .
4069	Get a list of nodes from an XML string .
4070	On main thread .
4071	Gets the user auth from the received token .
4072	Creates a new entry for sent request .
4073	Creates a new entry for a contact request .
4074	Checks if the user has the current user .
4075	Confirms a request to the user
4076	Add a closing tag .
4077	Add an empty tag .
4078	Add an opening tag .
4079	Delete a file .
4080	Create a temporary directory .
4081	Gets the object from the proxy .
4082	Returns the class for the given class .
4083	Computes the signature of the method .
4084	Creates a new instance of the given algorithm .
4085	Reset the request .
4086	Creates a new URL builder .
4087	Adds a query parameter to the URL .
4088	Gets a parameter by name .
4089	Add a query parameter .
4090	Add parameters to the request .
4091	Adds a parameter to the request .
4092	Adds a query to the request .
4093	Validate the query string .
4094	Adds a query to this URI .
4095	Rebuild the query .
4096	Replace a parameter with the given name .
4097	Invokes the given method .
4098	Create a proxy proxy .
4099	Converts an object to a boolean .
4100	Returns the stack trace of the given Throwable .
4101	Remove trailing slash .
4102	Waits for shutdown .
4103	Adds an empty tag .
4104	Adds an attribute .
4105	Add attributes to the map .
4106	Extracts the resource info from a URL .
4107	Returns the root resource .
4108	List all resources in the given resource .
4109	Resolve a relative path .
4110	Creates a resource .
4111	Starts the process .
4112	Creates an external command .
4113	Start an external command .
4114	Executes an external command .
4115	Calculates the elapsed time .
4116	Returns the elapsed time .
4117	Add a tag .
4118	Add a tag .
4119	Indent the given block .
4120	Returns the end time of the given time .
4121	Add a new entry .
4122	Create a new RAM directory .
4123	Encode a string .
4124	Decodes a string .
4125	Creates a local cache resource .
4126	Reverse an array .
4127	Creates an EnumSet from the given types .
4128	Load properties from a file .
4129	Load properties from a reader .
4130	Returns the string representation of the given time units .
4131	Compares the timepan .
4132	Returns a copy of this MemorySize .
4133	Returns a new MemorySize instance .
4134	Compares two memory sizes .
4135	Creates a new MemorySize .
4136	Execute a callable .
4137	Adds a marker to the map .
4138	Remove a marker .
4139	Creates a BitmapDescriptor from a view .
4140	Returns a function that returns true if the file is related to the given file .
4141	Emit events from the given watch service .
4142	Gets the state of the selector .
4143	Initialize the ViewPager .
4144	Adds all views to the viewPager .
4145	Returns the message for the given exception .
4146	Sets the number of unique IDs .
4147	Convert a UUID to an integer .
4148	Maps a character to a byte .
4149	Get the timestamp .
4150	Get MAC fragment .
4151	Sets a property .
4152	Sets the Facebook user credentials .
4153	Sets the socialize credentials .
4154	Merges two properties .
4155	Create a share .
4156	Handle a non network share .
4157	Adds a comment .
4158	Deletes a comment .
4159	Adds a comment .
4160	Gets a comment .
4161	Gets comments .
4162	Get comments by user .
4163	Get comments by entity key .
4164	Get comments by application .
4165	Show comment view .
4166	Parses a JSON object .
4167	Open a URL using the given parameters .
4168	Parse JSON response .
4169	Shows an alert .
4170	Logs a message .
4171	Returns the runtime type for the given value .
4172	Sets the entity .
4173	Builds the URL for a profile .
4174	Called when the image is changed .
4175	Generate a request signature .
4176	Normalizes the request parameters .
4177	Authorizes a dialog .
4178	Authorize an activity .
4179	Validate an intent .
4180	Logout session .
4181	Show a dialog .
4182	Serialize a Date object into a Json object .
4183	Link to socialize .
4184	Link to socialize .
4185	Link to a socialize link .
4186	Creates a social network .
4187	Extend access token .
4188	Get the current permissions .
4189	Gets the hash keys for the given package .
4190	Saves an entity .
4191	Gets an entity .
4192	Gets a specific entity .
4193	Gets a list of entities .
4194	Gets a list of entities .
4195	On create context menu .
4196	Subscribe to an entity .
4197	Checks if the entity is subscribed .
4198	Check if a socialize session is registered
4199	Returns the next token .
4200	Next null .
4201	Read an escape character from the buffer .
4202	Shows the share dialog .
4203	Shows the share dialog .
4204	Shows share via email .
4205	Creates a share via GooglePlus .
4206	Use this method to share the given entity .
4207	Creates a share via SMS .
4208	Creates a social network .
4209	Get a share .
4210	Get share list .
4211	Get a list of shares by user .
4212	Get a list of shares by entity key .
4213	Get a list of shares by application .
4214	Add a listener to the specified entity .
4215	Add an entity to the given entity .
4216	Sends a listener to the specified entity .
4217	Gets the likes of the given entity .
4218	Gets a like object .
4219	Checks if an entity is liked .
4220	Gets the likes of a user .
4221	Get a list of likes by entity .
4222	Get Facebook instance .
4223	Collect the header parameters from the request .
4224	Collect body parameters .
4225	Collect the query parameters .
4226	Creates a JsonWriter .
4227	Creates a default implementation of the default implementation .
4228	Replace new lines with new lines .
4229	Reload the widget .
4230	Get the simple location of the address .
4231	Gets the authenticated user .
4232	Gets a list of actions by application .
4233	Gets a list of actions by userId .
4234	Get actions by entity key .
4235	Get actions by user and entity key .
4236	Closes a closing bracket .
4237	Defines the name of the writer .
4238	Parse a JSON document .
4239	Parses the given JSON reader .
4240	Link to a socialize link .
4241	Sets credentials .
4242	Send a tweet .
4243	Performs a GET request .
4244	Send a tweet .
4245	Send a tweet .
4246	Gets the scaled bitmap .
4247	Perform a POST request .
4248	Sets the text size .
4249	Called when the user is changed .
4250	Saves a user .
4251	Gets a user .
4252	Save user settings .
4253	Sets the auto post preferences .
4254	Authenticate the user .
4255	Authenticate to the user .
4256	Gets a static field .
4257	Get the name of a static field .
4258	Called when a message is received .
4259	Handle a broadcast event .
4260	Encode a byte array .
4261	Decodes a byte array .
4262	Creates a view .
4263	Called when the user is changed .
4264	Decodes a form into a HttpParameters object .
4265	Converts the given collection to a map .
4266	Creates a header element .
4267	Adds an object to the cache .
4268	Adds an object to the cache .
4269	Put an object into the cache .
4270	Returns the value of the given key .
4271	Gets an object from the cache .
4272	Checks if the given key exists .
4273	Extend a TTL object .
4274	Load an image by data .
4275	Load an image by URL .
4276	Parse the tag string .
4277	Formats a map of tags .
4278	Fixes the encoded tags in the given name .
4279	Creates a new builder with the given name .
4280	Returns a string representation of the message .
4281	Converts the domain name to a human readable string .
4282	Converts a string into a byte array .
4283	Gets the query parameter .
4284	Get the query parameters from the query string .
4285	Relivize this URL .
4286	Builds a URL from a scheme .
4287	Builds a URL from the given scheme .
4288	Returns a human readable representation of this URI .
4289	Queries a stream with ordinal parameters .
4290	Executes a query with named parameters .
4291	Gets the fields of the given class .
4292	Fetches the next row .
4293	Gets a LocalDateTime from the ResultSet .
4294	Returns the local date as a local date .
4295	Gets a local time from the ResultSet .
4296	Gets the value of the given JDBC date .
4297	Returns the offset of the result set .
4298	Returns the offset of the result set .
4299	Gets the value of the given column .
4300	Creates a crop image .
4301	Crop the crop center .
4302	Creates a crop of the image .
4303	Resize the width of the path .
4304	Resize a cdn path .
4305	Scale the crop crop .
4306	Scale the crop center .
4307	Add blur to the path .
4308	Sets the sharp strength .
4309	Create a new Cdn path .
4310	Get a project .
4311	Get a single file .
4312	Delete a file .
4313	Saves a file .
4314	Execute a command .
4315	Checks the response status code .
4316	Upload a URL from a URL .
4317	Injects the object graph .
4318	Creates a new builder .
4319	Find class by name .
4320	Loads a class .
4321	Finds the next character in the buffer .
4322	Adds a word to the trie .
4323	Appends a character to the buffer .
4324	Get the value and set the value .
4325	Checks if the given class is assigned to the given class .
4326	Copies the parse info to the file system .
4327	Hash an instruction group .
4328	Returns a rule that matches the given character .
4329	Matches a Unicode character .
4330	Matches a unicode range .
4331	Returns a rule that matches the given characters .
4332	Matches a wildcard .
4333	Creates a new rule .
4334	Matches a string to a string .
4335	Ignore case insensitive .
4336	Matches an optional rule .
4337	Creates a new rule .
4338	Repeat a rule .
4339	Creates a rule that matches the given rules .
4340	Creates a Rule from a string .
4341	Converts objects to an array of rules .
4342	Convert an object to a rule .
4343	Push a value to the stack .
4344	Pop a value from the stack .
4345	Pop a value from the stack .
4346	Returns the next element .
4347	Add a value to the stack .
4348	Match the given matcher .
4349	Returns true if this IndexRange contains this index range .
4350	Returns true if this index contains the given index .
4351	Gets the merged index range .
4352	Returns the byte array for the given parser class .
4353	Add a word .
4354	Unwrap a Matcher .
4355	Register a listener .
4356	Adds an object to the bus .
4357	Get the sub context of this matcher .
4358	Returns a rule that matches the given number of times .
4359	Returns a rule that matches the given number of times .
4360	Creates a new rule .
4361	Creates a new rule .
4362	Parse a range .
4363	Returns a copy of all of the given chars .
4364	Gets the deployment descriptor .
4365	Gets the authenticationConfiguration value .
4366	Returns a list of bw services .
4367	Add monitoring events to all services .
4368	Gets the global variable value .
4369	Gets the base service .
4370	Gets the value of the event .
4371	Check if the project directory exists .
4372	Reads dependencies from a file .
4373	Launch the TBCB binary .
4374	Gets the value of the action .
4375	Clean up the directory .
4376	Gets the final value of the final property .
4377	Gets the rulebase value for this Rule .
4378	Add an alias to the list .
4379	Process a file .
4380	Gets the rest of the rest .
4381	Gets the value of the NVPair property .
4382	Adds a dependency to a file .
4383	Removes a dependency from a POM file .
4384	Checks if a dependency exists .
4385	Checks if the given dependency exists .
4386	Add a project to a project .
4387	Checks if the given path exists .
4388	Get the artifact file .
4389	Execute the goal .
4390	Extracts the content of a file .
4391	Update repository instances .
4392	Gets the value of theAny property .
4393	Creates a new instance of the given class .
4394	Create a proxy class .
4395	Creates constructor .
4396	Starts a timer .
4397	Start a callable statement .
4398	Start the query timer for the given query .
4399	Mark the result set for the given query .
4400	Creates a new proxy .
4401	Wrap a connection .
4402	Wrap a statement .
4403	Wrap a prepared statement .
4404	Wrap a callable statement .
4405	Gets the result set type .
4406	Builds the arguments .
4407	Builds the command arguments .
4408	Execute the command .
4409	Execute the command .
4410	Sets the language .
4411	Gets the message for the given key .
4412	Simplified method .
4413	Formats the given command line .
4414	Gets the cowFace by its mode .
4415	Gets the cow face .
4416	Extracts the template from a string .
4417	Loads a cow file .
4418	Convert the input stream to a string .
4419	Returns the input stream for the given path .
4420	Get the input stream from the system .
4421	Checks if the given file is a cowfile .
4422	Convert a file to a cow input stream .
4423	Get the cowfile for a given folder .
4424	Gets the files of the given folder .
4425	Gets the channel for the given mode .
4426	Sets the eyes .
4427	Sets the language .
4428	Checks if the given mode is known .
4429	Parse command line arguments .
4430	Show command line help .
4431	Formats a message .
4432	Wrap a message .
4433	Formats a message .
4434	Sets the wordwrap .
4435	Returns the longest line length .
4436	Logs a message .
4437	Log a message .
4438	Log messages .
4439	Joins multiple strings .
4440	Main entry point .
4441	Gets all schemas in the database .
4442	Returns the schema for the given name .
4443	Called when the context is initialized .
4444	Resync watcher .
4445	Get all tables in the database .
4446	Get a table by name .
4447	Writes the buffer to the given writer .
4448	Gets the catalog catalogs .
4449	Get a catalog by name .
4450	Gets the buffer from the buffer .
4451	Log the given encoder .
4452	Writes the given writer to the given writer .
4453	Creates a LexicalPosition with the given file .
4454	Appends a string to the buffer .
4455	Write a segment .
4456	Returns the character at the given position .
4457	Gets the SQL data types .
4458	Gets the column map .
4459	Gets the column by name .
4460	Returns a list of column names .
4461	Returns the column at the specified position .
4462	Gets the imported tables .
4463	Gets the imported tables .
4464	Add a new segment .
4465	Write a character to the log .
4466	Log a string .
4467	Put multiple values into target values .
4468	Move the camera to the given location .
4469	Animates the camera to include the given location .
4470	Create an animation from a circle .
4471	Create an animation from a rectangle .
4472	Get the arc motion .
4473	Returns a style span with the specified index .
4474	Scale the view in the specified view .
4475	Scale the view to an animation .
4476	Scale the view to the given view .
4477	Gets the count of the query .
4478	Concatenate address lines .
4479	Connect to Google API client .
4480	Creates a FragmentTransaction .
4481	Returns the foreground color .
4482	Sets the listeners for the given views .
4483	Returns the name of the given level .
4484	Creates an animation for the given view .
4485	Shows the specified view .
4486	Hide the input .
4487	Checks if the cursor contains the given position .
4488	Count the number of documents .
4489	Returns the first int in the cursor .
4490	Returns the first long in the cursor .
4491	Get the first string from the cursor .
4492	Get all ints from cursor .
4493	Returns an array of all long values .
4494	Returns all strings in the cursor .
4495	Loads the image from the image .
4496	Get the orientation of the view .
4497	Get the span count for the given view .
4498	Add a rule to the view .
4499	Returns true if the stream is read .
4500	Get the current Looper instance .
4501	Returns a list of values .
4502	Returns the values of the given array .
4503	Check if the adapter has changed .
4504	Check if the view is a drawable .
4505	Update the image matrix .
4506	Performs a delete operation .
4507	Creates a SQL statement .
4508	Returns the number of bytes in the given width .
4509	Returns a copy of the given bitmap .
4510	Determine if the given intent is present .
4511	Send a mailto to a list of recipients .
4512	Sets the default content view .
4513	Find a Fragment by its name .
4514	Creates a Bundle with the given key .
4515	Creates a new Intent .
4516	Creates a new Intent .
4517	Creates a new Intent .
4518	Creates a new Intent .
4519	Get the size of the action bar .
4520	Gets the background of the action bar .
4521	Check if the network is connected .
4522	Checks if the diffs are equal .
4523	Creates a new list of patches .
4524	Converts the given value to an option .
4525	Convert SOAP message to string
4526	Gets the profile properties .
4527	Checks if the given element is valid .
4528	Checks if the given executable element is a getter .
4529	Gets the value of a property .
4530	Checks if the class has no arguments .
4531	Gets the annotation from the given instance .
4532	Checks if the method is nonVoid .
4533	Apply the given output element .
4534	Returns a set of all wrappers for the given type .
4535	Gets the implicit context data providers .
4536	Returns a list of available types .
4537	Initializes the connector .
4538	Sends the error report to the collector .
4539	Gets the connector configuration names .
4540	Gets the properties for the given connector name .
4541	Creates a connector .
4542	Checks if the given connector is configured .
4543	Checks if the given method name is a getter .
4544	Returns true if the method is public .
4545	Returns true if the method is compatible with the given method .
4546	Get the field of the given method .
4547	Checks if the given method name is a getter method .
4548	Capitalize first character in a string .
4549	Decompose first character of a string .
4550	Strip getter prefix .
4551	Sends an error message to the monitor .
4552	Apply the given instance to the given context .
4553	Creates a new instance .
4554	Gets the current profile .
4555	Opens a profile file .
4556	Sets the manual context override map .
4557	Creates a TraceeContextBuilder .
4558	Checks if the given method throws an exception .
4559	Checks if the given class is defined in the thrown exception .
4560	Returns the types of the given method signature .
4561	Checks whether or not the given throwable has been processed .
4562	Sets the size of the group .
4563	Assert that the given value is not null .
4564	Get the dropdown view .
4565	Reserve a term name .
4566	Registers a term .
4567	Initialize the vocabulary .
4568	Returns a DataSet representing the DataSet .
4569	Computes the relative URI relative to the target .
4570	Merges a path into a path .
4571	Remove dot segments from path .
4572	Create a new name .
4573	Returns the name of the given class .
4574	Creates a new media type .
4575	Creates a wildcard with a wildcard .
4576	Creates a MediaType from a string .
4577	Converts a media type to a header .
4578	Runs the resolver .
4579	Compares this term .
4580	Get the names of the pending attachment names .
4581	Add a new attachment name .
4582	Returns the next attachment name .
4583	Creates a new name provider .
4584	Parses the given media type .
4585	Checks if a quoted string is valid .
4586	Returns the next character point .
4587	Run the update process .
4588	Convert this URI to a URI .
4589	Close the input stream .
4590	Checks if the given character is a name .
4591	Checks if the given character is a name .
4592	Validates a token .
4593	Creates a new DataTransformator .
4594	Register the adapter class .
4595	Creates an adapter for the given source type .
4596	Adapts an object to a type .
4597	Adds a prefix to this namespace .
4598	Returns a new ImmutableNamespace with the given prefixes .
4599	Escapes a character sequence .
4600	Execute a query .
4601	Add a name provider .
4602	Returns the name provider for the given container name .
4603	Unwrap the application .
4604	Returns true if the path is out of the path .
4605	Returns a new path with the given directory .
4606	Returns a new path with the given file .
4607	Returns a path to a relative path .
4608	Returns the type parameter for the given class .
4609	Create a new primitive object factory .
4610	Creates a list of variants .
4611	Resolve a single Individual .
4612	Returns a matcher that matches the given value .
4613	Returns a matcher that matches the given value .
4614	Returns a matcher that matches the given value .
4615	Returns a matcher that matches the given value .
4616	Returns a matcher that matches the given value .
4617	Get the measures by year .
4618	Get a measure .
4619	Get vote rating
4620	Get rating .
4621	Get the votes by year state
4622	Get election by zip code
4623	Get the stage candidates for the given stage .
4624	Get address by office state
4625	Get offices by type
4626	Get offices by level
4627	Get offices by type level
4628	Get offices by branch level .
4629	Returns a list of counties .
4630	Get all cities
4631	Get a list of officials associated with the given id .
4632	Perform a query .
4633	Returns a list of candidates for the given state .
4634	Returns a list of candidates for a given office type .
4635	Get a list of candidates for a given zip .
4636	Get the addlBio .
4637	Get information about a specific candidate .
4638	Retrieves a list of candidate votes .
4639	Get the list of candidates for the election .
4640	Get a list of candidates for a district .
4641	Get committees by type
4642	Get a committee .
4643	Get committee members
4644	Get the leaders for the given state .
4645	Get the officials associated with the leader .
4646	Sleeps a thread .
4647	Starts the timer .
4648	Wait until the thread has finished .
4649	Close the thread .
4650	Merges a stream into a map .
4651	Split a map into a list .
4652	Creates a Collector with the given limit .
4653	Sorts the given map .
4654	Get first value from map .
4655	Assert that the given test is null .
4656	Assert that the given test is not null .
4657	Assert that value is not null or empty .
4658	Checks if the set is null or empty .
4659	Checks if the array is null or empty .
4660	Gets the resource as a string .
4661	Get a set of words from a resource file .
4662	Get the last modified time .
4663	Reads an input stream from an input stream .
4664	Reads the input stream from the input stream .
4665	Reads a file from a file .
4666	Get the absolute path of a resource .
4667	Generate a random string .
4668	Generates a random long .
4669	Join two arrays .
4670	Split a set into a list .
4671	Gets the month start .
4672	Returns the month end of the given time .
4673	Trims whitespace to null .
4674	Capitalize a string .
4675	Returns a string with the given arguments .
4676	Joins a set of items .
4677	Returns a list of words .
4678	Trims the text down to the given size .
4679	Trims the text down to the given string .
4680	Converts a string to a list of chars .
4681	Returns the relevance of a string .
4682	Unquote a string .
4683	Returns the timezone time for the given timezone .
4684	Returns the status of the filter .
4685	Checks if the given severity is a violation .
4686	Set the icon s icon .
4687	Set the icon s icon .
4688	Gets a list of tags .
4689	Sets the next node .
4690	Sets the previous node and clean it .
4691	Finds the node with the given port .
4692	Returns a set of nodes that match the given host .
4693	Returns a set of nodes that are not dead .
4694	Add a node to the list .
4695	Remove a node from the socket .
4696	Mark the node as alive .
4697	Mark the node as dead .
4698	Send an event to the node .
4699	Get the checkstyle version .
4700	Configure resource locator .
4701	Builds the object .
4702	Creates a map of properties for the given attributes .
4703	Returns the current sequence for the given name .
4704	Compares this nodeID .
4705	Get the list of events from the list .
4706	Finds the packages from the JavaDoc run .
4707	Sets the specified property .
4708	Sets a field with the given name .
4709	Returns a list of method annotated methods .
4710	Invokes a method .
4711	Main entry point .
4712	Gets the value of a configuration attribute .
4713	Prints the rules summary .
4714	Checks if the given rule matches the given rule .
4715	Creates a key - value pair .
4716	Initialize the client .
4717	Waits until the cluster has started .
4718	Waits until the cluster has been sent .
4719	Waits until all clusters are connected .
4720	Wait for a task .
4721	Closes the cache .
4722	Prints the state of the cluster .
4723	Main entry point .
4724	Returns an ordered list of property names .
4725	Returns the hash code for the given version .
4726	Get total number of pages
4727	Gets a list of entries for a page .
4728	Prepare the query data .
4729	Store results .
4730	Creates a new instance .
4731	Compares two tags .
4732	Recursively migrations .
4733	Calculates the minHash of the given topic .
4734	Gets the minimum number of minHashes .
4735	Convert XML string to min hash
4736	Validates that the topic is valid .
4737	Updates the content hash .
4738	Validates all tags in the topic .
4739	Sort classes per package .
4740	Execute the Enforcer rule .
4741	Splits a string into a list of strings .
4742	Splits a string into a list of patterns .
4743	Checks if a list contains a prefix .
4744	Gets the factory class for the given class .
4745	Send a message to the mail .
4746	Sends a message to the sender .
4747	Execute the zero function .
4748	Execute the query .
4749	Handle an exception .
4750	Formats the results .
4751	Add an error message .
4752	Returns the error message .
4753	Checks if the given host is alive .
4754	Executes a thread .
4755	Checks if a list of resources exists .
4756	Merges the configuration file .
4757	Adds a limit to the query string .
4758	Gets the first locator from a string .
4759	Get region size
4760	Determine if the cache is a client .
4761	Removes all keys from the region .
4762	Retry a retryable with exponential backoff .
4763	Generate a buffered image .
4764	Paint the icon .
4765	Get the reader .
4766	Wait for an input message .
4767	Execute the command .
4768	Parse the command line arguments .
4769	Prints the help command .
4770	Constructs the CLI options .
4771	Aggregate single cluster member data
4772	Checks if the given property is null .
4773	Parse the command line arguments .
4774	Prints the help command .
4775	Constructs the GnuOptions object .
4776	Finds the command index .
4777	Extracts the launcher arguments .
4778	Extracts the command arguments from the given arguments .
4779	Main entry point .
4780	Debug debug message .
4781	Start the timer .
4782	Creates a set of regions for the given map .
4783	Process the expiration policy .
4784	Sets the indentation token .
4785	Gets the package name .
4786	Start the event .
4787	Extracts the ports set .
4788	Find or create a pool .
4789	Get the name of the event source .
4790	Returns the category name of the event source .
4791	Injects a stack frame to the stack .
4792	Exit the method counter .
4793	Returns a string representation of the method counter .
4794	Sets the package extractors .
4795	Add packages to the given file .
4796	Update image data .
4797	Sets the ui file name .
4798	Extract the limit from the query string .
4799	Formats the query results .
4800	Checks if the given object is allowed to be valid .
4801	Runs the given process with the given id .
4802	Runs a process with the given parameters .
4803	Runs a process with the given parameters .
4804	Stops a new line in the process .
4805	Start the process .
4806	Redirects to stdout .
4807	Wait for startup confirmation .
4808	Generate a template file .
4809	Processes the process .
4810	Checks if the given type is a valid type .
4811	Checks if the method is compatible .
4812	Returns the implementation of the given method .
4813	Get the type argument of a generic type .
4814	Resolve a type variable .
4815	Returns the actual type arguments of the given class .
4816	Populate the pool .
4817	Add the return option description .
4818	Retrieves the object from the pool .
4819	Gets the destination for the given name .
4820	Gets a consumer consumer .
4821	Gets the producer producer .
4822	Gets the session .
4823	Get the connection .
4824	Sends a text message to the specified destination .
4825	Listen for text messages .
4826	Receive a message from a destination .
4827	Stop the connection .
4828	Handle load from user data .
4829	Gets the pool configuration .
4830	Sets the id of the model .
4831	Sets the model .
4832	Creates a new Weka model .
4833	Removes the given model .
4834	Returns the service manager for the given event bus .
4835	Creates an event manager .
4836	Encodes nonCodes in a string .
4837	Decodes the given map .
4838	Create service group .
4839	Close the server .
4840	Forward an event .
4841	Gets the resources of the given method .
4842	Find an annotation from the given type .
4843	Returns the constructor for the given class .
4844	Returns the root resource class from the given class .
4845	Setup the classifiers .
4846	Gets the object .
4847	Returns the serialized byte array .
4848	Writes the serialized object to a file .
4849	Calculates the leaf score from the class distribution .
4850	Get the provider URL .
4851	Gets the context .
4852	Gets the connection supplier .
4853	Builds a JMS Service .
4854	Returns the type of the given jacksonType .
4855	Gets the type of the given type .
4856	Do introspection .
4857	Inspect the given bean serializer .
4858	Inspect the given enum serializer .
4859	Inspect the given MapSerializer .
4860	Initialize frame information .
4861	This method is called when a frame is received .
4862	Inserts a frame into the database .
4863	Generate a new random element .
4864	Returns the next number .
4865	Main entry point .
4866	Returns the last name of a given number .
4867	Choose a random choice from a distribution .
4868	Returns the relative path of the given file .
4869	Create a new Git add .
4870	Commit a commit .
4871	Moves a file to a destination .
4872	Removes the repository .
4873	Checks the validity of a file .
4874	Checks if two lists are equal .
4875	Checks that the given index is in range .
4876	Gets a client instance .
4877	Sets the preferred client type .
4878	Add a repository to the repository .
4879	Adds a list of files to the repository .
4880	Adds a file to the repository .
4881	Adds a file to the repository .
4882	Add a path to the repository .
4883	Adds a list of files to the repository .
4884	Adds the given paths to the repository .
4885	Add a dry run .
4886	Compares the version of this version .
4887	Adds a repository to the repository .
4888	Add the given paths to the repository .
4889	Executes the commit process .
4890	Sets the git path .
4891	Creates a list of parameters .
4892	Get the definition table definition .
4893	Returns the value of the parameter array .
4894	Checks if a given file exists .
4895	Create a new branch .
4896	Delete a branch .
4897	Rename a branch .
4898	Get all branches .
4899	Commit all commits .
4900	Convert an object to a type .
4901	Converts an Integer to a Boolean .
4902	Converts a boolean value to an Integer .
4903	Converts a long value to a String .
4904	Returns the message for the given code .
4905	Gets the file holding the given index .
4906	Add a file to the deleted files .
4907	Add the deleted files not updated .
4908	Add a modified file to the file .
4909	Add a modified file to the list of modified files .
4910	Add new files to new files
4911	Add a new file to the given file .
4912	Add a file to untracked files .
4913	Creates a new parameter .
4914	Get the value of the parameter .
4915	Sets the verbose option .
4916	Sets the delete option .
4917	Sets the option to the delete option .
4918	Sets whether or not the option should be renamed .
4919	Sets whether or not this command should be used .
4920	Get the return type of the method .
4921	Evaluate a function .
4922	Gets the value array for injection .
4923	Runs a function on the script .
4924	Convert the result to an object .
4925	Evaluate a script .
4926	Gets a branch .
4927	Delete a branch .
4928	Delete a branch .
4929	Rename a branch .
4930	Commit a commit .
4931	Get current branch .
4932	Clones a given ref .
4933	Gets the status of the repository .
4934	Removes a repository .
4935	Gets the file at the given index .
4936	Gets the file from the given index .
4937	Gets the file from the given index .
4938	Gets the file associated with the given index .
4939	Returns the file corresponding to the given index .
4940	Get the file from untracked files .
4941	Gets the file from the given index .
4942	Returns the error message .
4943	Returns the error message .
4944	Reset a repository .
4945	Add a new file to the list .
4946	Adds a copied file to the given destination .
4947	Adds a file to the list of deleted files .
4948	Sets the files changed .
4949	Sets the lines deleted .
4950	Sets the lines inserted .
4951	Executes the mv command .
4952	Finds the index of the first character in the string .
4953	Gets the result set for the given service .
4954	Returns a list of commits .
4955	Add a new commit .
4956	Add a new commit file .
4957	Perform a checkout .
4958	Clones a repository .
4959	Perform a checkout .
4960	Perform a checkout .
4961	Executes a checkout .
4962	Executes a checkout .
4963	Checks if the given ref type is valid .
4964	Gets the children of the directory .
4965	Returns the removed file .
4966	Perform a checkout .
4967	Perform a checkout .
4968	Add a comment .
4969	Set delete options .
4970	Inject all service methods from the given class .
4971	Injects a service method .
4972	Sets the current branch .
4973	Clone the repository .
4974	This method is called by the filter .
4975	Returns an enumeration of resources that match the given classloader .
4976	Sets the reset type .
4977	Adds a method to the map .
4978	Performs a filter .
4979	Close the database connection .
4980	Consume a database connection .
4981	Execute a query .
4982	Execute raw query .
4983	Builds the command line .
4984	Returns the added file at the specified index .
4985	Returns the deleted file .
4986	Gets the modified file .
4987	Get the status of the current working directory .
4988	Get the head element .
4989	Gets the list of files .
4990	Get the number of files .
4991	Returns true if the string matches the given string .
4992	Updates the list after the given entry .
4993	Removes the last entry from the cache .
4994	Cleans up the expiration time .
4995	Updates the list after the given entry .
4996	Checks if the given string starts with the given index .
4997	Get access token .
4998	Sign the OAuth request .
4999	Get authorization URL .
5000	Performs the finish .
5001	Finish the project .
5002	Creates a control group .
5003	Gets the default Java package .
5004	Sets the visibility .
5005	Create a query string .
5006	Gets the query parameters .
5007	Creates the pane control .
5008	Add a new palette item .
5009	Gets the palette items for the given category .
5010	Configure the table resize .
5011	Returns the selected template .
5012	Gets the template string .
5013	Loads the saved preferences .
5014	Saves the saved preferences .
5015	Sets the selected template .
5016	Update the viewer input .
5017	Creates a new criterion .
5018	Creates a new criterion with the given value .
5019	Creates a new criterion with the given value .
5020	Creates the field editors .
5021	Get the last path component .
5022	Initialize the container name .
5023	Validates the page .
5024	Checks if the content type is valid .
5025	Adds the default extension to the file .
5026	Gets the project from the given path .
5027	Gets the userId from the request .
5028	Creates a new page .
5029	Saves the editor .
5030	Handle a resource change .
5031	Shows the page .
5032	Creates a log message for a query .
5033	Converts an object to a string .
5034	Insert a timeline item .
5035	Inserts a timeline item .
5036	Inserts a timeline item .
5037	Validates the response .
5038	Converts a criteria to a query string .
5039	Returns the template store .
5040	Gets the context type registry .
5041	Gets the action from the editor .
5042	Creates a DBI instance .
5043	Appends the LIMIT clause to the query builder .
5044	Creates a named property .
5045	Creates a named property .
5046	Creates a named property .
5047	Creates a new Literal .
5048	Creates a new URI .
5049	Creates a new Literal .
5050	Creates a QName .
5051	Initializes the CORS request .
5052	Create a new entity .
5053	Initializes the field .
5054	Update the entity .
5055	Close the connection .
5056	Start the server .
5057	Validate opts .
5058	Validate arguments .
5059	Subscribe a listener to the server .
5060	Unsubscribe a listener
5061	Unsubscribe a subscriber
5062	Unsubscribe a message .
5063	Send a message
5064	Get the next message from the queue .
5065	Checks if a receipt contains a receipt .
5066	Remove receipt from receipt
5067	Log dead event .
5068	Convert source to target class .
5069	Returns the priority for the given lines .
5070	Executes the given parser .
5071	Inject opts from the given class .
5072	Adjusts the arguments .
5073	Migrates the given personality .
5074	Tag the request .
5075	Handles the actual request .
5076	Handle a preflight request .
5077	Sets the options for the given options .
5078	Checks if the java directory exists .
5079	Filters a list of lines .
5080	Returns a string containing all packages in the package .
5081	Output the dependencies to the output file .
5082	Compares the instance provider .
5083	Returns the IOUtils instance .
5084	Get ImageUtils .
5085	Returns the PriceUtils instance .
5086	Returns the resourceUtils instance .
5087	Returns the ZipUtils instance .
5088	Returns the DigestUtils instance .
5089	Gets the StringUtils instance .
5090	Gets the resource service .
5091	Gets the pricing service .
5092	Gets the instance service service .
5093	Gets the id of a file .
5094	Creates a digital object .
5095	Store a list of properties .
5096	Ensure the metadata table exists .
5097	Creates and returns a SourceDetailDetailDetail object .
5098	Validates the threshold .
5099	Validate arguments .
5100	Validate opts
5101	Checks if the given class is a classpath .
5102	Returns true if the given URI matches the given URI .
5103	Loads a migration file .
5104	Runs the command .
5105	Reads all commands from the application .
5106	Handles post processing .
5107	PreProcesses the request .
5108	Execute a migration .
5109	Validate the database .
5110	Get database history .
5111	Initialize the database .
5112	Converts a list of lines to a list of statements .
5113	Finds the notable link for the given date .
5114	Updates a note .
5115	Parse command line arguments .
5116	Send a command to the server .
5117	Returns the formatted source code .
5118	Gets the link annotation .
5119	Send a command .
5120	Gets the JAXB context .
5121	Creates a list of boxes .
5122	Creates a box tree .
5123	Compute the background of the box .
5124	Sets the mapping file .
5125	Gets the mapping file .
5126	Creates a VersionRange from a string .
5127	Concatenate this BoxTransform .
5128	Transform a rectangle into a Rectangle .
5129	Returns the minimum bounds of the box .
5130	Compute the visual bounds .
5131	Compute the bounds of this box .
5132	Computes the bounds of the box .
5133	Returns the top border .
5134	Returns the bottom border .
5135	Returns the left border .
5136	Returns the right border .
5137	Returns the color of the element .
5138	Determines whether the given box is enclosing .
5139	Recursively take a list of children .
5140	Process the command .
5141	Creates a DataSource instance .
5142	Creates a new data source .
5143	Setup the environment .
5144	Executes the query .
5145	Registers a command .
5146	Registers a command .
5147	Unregister a command .
5148	Execute command .
5149	Starts the console .
5150	Search for committees by chamber
5151	Get information about a committee .
5152	Creates a JMX connector .
5153	Gets the value of a property .
5154	Invokes the specified method .
5155	Search for districts by state
5156	Search for the district .
5157	Lookup a boundary .
5158	Get the metadata for the given state .
5159	Create a MBean object .
5160	Register a new MBean .
5161	Unregisters a MBean .
5162	Validate MBean .
5163	Returns a random string .
5164	Add a value to the field .
5165	Search for legislators by state .
5166	Search for a given state .
5167	Search for a given state term .
5168	Search for a list of legislators .
5169	Retrieve a Legislator .
5170	Compares the ordinal of this enum .
5171	Sets the mapped class .
5172	Invokes the method .
5173	Returns the total number of seconds .
5174	Build the HTTP client .
5175	Creates a HTTP request .
5176	Converts a response to pid .
5177	Performs a XPath expression .
5178	Gets the pid .
5179	Creates a configuration binding for a given class .
5180	Binds the configuration to the given configuration .
5181	Creates a new FilterPattern .
5182	Invokes the constructor .
