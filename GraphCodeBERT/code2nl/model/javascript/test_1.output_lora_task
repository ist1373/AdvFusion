0	Creates an instance of Axios .
1	Cancel token
2	Checks if the given value is an ArrayBuffer .
3	Checks if the browser environment is standard .
4	Iterate over an array of objects
5	Extend an object to an object .
6	Write package manifest
7	Process an event .
8	Try to apply updates to the browser .
9	Try to apply updates to the current page
10	Formats a message .
11	Returns a UDecimalPad with the given precision .
12	Parse a segment .
13	Parse segments .
14	Parses an evtlink string .
15	Calculates the key provider .
16	Generates a random 32 - bit 32 - bit - bit 32 - bit - bit - bit - bit - bit - bit - entropy .
17	Adds an entropy to the entropy array .
18	Calculates the entropy of the given cpu entropy .
19	Decrypts the given message with the given key .
20	Initialize entropy .
21	Convert a value to a BigInteger .
22	Verify the given data .
23	Retrieves the hash of the given data .
24	Find comments in a message
25	Create a form group .
26	Create a new Loader
27	Create a new ItemContent
28	Table constructor .
29	Create a Rail instance
30	Creates a new button group .
31	Creates a GridRow .
32	Create a form field .
33	Creates a card content .
34	Create a new Item
35	Create a CommentAvatar instance
36	Create a statistic label .
37	Create a feed meta element
38	Creates a container .
39	Create a StepGroup
40	Creates a divider .
41	Creates a header .
42	Constructs a Grid .
43	Create a breadcrumb .
44	Creates a card description .
45	Create a new ItemGroup
46	Create a GridColumn
47	Create a new ItemImage
48	Create a CardGroup
49	Create a TableRow
50	Create a feed event .
51	Create a TabPane
52	Create a list of ListContent
53	Creates a new Buttonor .
54	Create a TableCell
55	Create a breadcrumb divider .
56	Create a MessageList .
57	Table footer .
58	Create a CommentGroup
59	Render a Reveal .
60	Create a Segment
61	Create a placeholder line .
62	Render a RevealContent
63	Create a feed like FeedLike
64	Create a placeholder element .
65	An accordion .
66	Create a placeholder image .
67	Create a Dropdown menu .
68	Create a ListIcon
69	Creates an HTML element .
70	Create a statistic group .
71	Create a statistic .
72	Create a new SegmentGroup
73	Create a TableHeaderCell
74	Create a feed .
75	Create a LabelGroup
76	Create a feed extra element .
77	Creates a Dropdown divider .
78	Create a feed summary .
79	Creates a step content .
80	Image constructor .
81	Calculates the size of a canvas .
82	Set the background color
83	Create a sprite from the body
84	Draw the body of the body
85	Create a new Body
86	Creates a page of pages .
87	Check if value is a window .
88	Normalize event handler options .
89	Generate a summary of the documentation page .
90	Returns a string representation of an item .
91	Create a new keyword
92	Checks if the given code is in astral set .
93	Transform metadata .
94	Find the package for a given filepath .
95	Toggle the specified class .
96	Flatten an array of values into an array .
97	Create a JSON document from a source directory .
98	Reduce an array with the given type .
99	Create a Markdown file .
100	Flatten options .
101	Appends a string to the list
102	Compare two nodes
103	Compare two nodes .
104	Calls the multiresDraw function .
105	Creates a new multiresNode .
106	Rotate a matrix
107	Convert a matrix to a matrix
108	Calculate the perspective of a shape
109	Process the loaded texture .
110	Check the zoom level
111	Rotate p .
112	Check if the view is in the view
113	Called when an image is loaded
114	Parse a tag
115	Handle an error
116	Clears the error message .
117	Called when the user has been clicked
118	Get the position of the mouse position
119	Handles mouse events .
120	Handles mouse click event .
121	Convert mouse event to coordinates
122	Handles the mousemove event .
123	Handles mouse events .
124	Called when the mouseTouch starts .
125	Called when a document is moved .
126	Called when the mouse wheel is clicked .
127	Called when a document is pressed .
128	Called when a document is pressed .
129	Change the value of a key .
130	Evaluate the animation .
131	Handles the animation .
132	Convert two quaternion to quaternion .
133	Computes the quaternion of a quaternion .
134	Event listener for orientation
135	Render pano image
136	Initialize the render callback .
137	Creates the hotSpots .
138	Destroy hotSpots created
139	Render HotSpot
140	Merge the scene s settings
141	Toggle the fullscreen window
142	Handles the fullscreen change event .
143	Convert hfovov to hfov
144	Stop animation .
145	Loads the UI .
146	Load scene .
147	Stop the orientation
148	Fire an event
149	Waits for a latch function .
150	Gets the position of a mouse event .
151	Convert a value to a float
152	Subtracts the difference between two integers .
153	Returns the difference between two numbers .
154	Get inline resources from string
155	Builds a Sass .
156	Creates a new FormioResourceRouter .
157	Create a Base Producer
158	Context constructor .
159	Creates an alternative for the given URL
160	Perform a request .
161	Handle the request response .
162	Handles the captcha .
163	Callback for submitCaptcha
164	Creates a new assets .
165	Gets the start of the start of the start of the container .
166	Add a function to an object
167	Add a new function to the object .
168	Copy a template from a template
169	Copy template files to a directory
170	Convert path to app name
171	Empty directory .
172	Exit the process
173	Load a template
174	Main entry point .
175	create a directory
176	Renames an option .
177	Print a warning message .
178	Write string to file
179	Bind a function to a function .
180	Adjust the options for a webpack configuration .
181	Define devTools middleware .
182	Called when the demo is loaded .
183	Prefix substrings .
184	Creates a canvas .
185	Calculate the area of the area .
186	Calculates the diagonal area for a pixel .
187	Calculates the diagonal area of the diagonal .
188	Generate a vector of patterns .
189	Creates a new vector from a set of patterns .
190	Calculates the delta between two nodes
191	Calculate the linear interpolation of a vector .
192	Check if the value is valid
193	Reset the position of the transfer .
194	Check if the target control is active
195	Update the source control
196	set target control
197	Check to move to the target control
198	Updates the scroll position .
199	Returns the score for the given score .
200	Calculate the score of a password .
201	Checks if the given string is a repetition .
202	Initialize the password
203	Construct a LevelUpArrayAdapter
204	Fixes the properties of a transaction .
205	Initialize transaction data .
206	Represents a TXRejectedError .
207	Constructs a RequestFunnel
208	Compile Sass .
209	Require a brocfile
210	Run math .
211	Read a packed byte array .
212	Handle union selections .
213	Handle selections .
214	Convert a column name to an AST node .
215	Convert a key to an AST node .
216	Strip the relay connection
217	Splits the selections into a single fragment .
218	Get the node for the given type .
219	Convert an array of data to a connection
220	Validate a row
221	Convert a key object to a where clause .
222	Clones the given frm to another .
223	Build a string from a string
224	Concatenate array
225	Convert a value to a string
226	Replace the text with the given placeholders .
227	Create a new audio node
228	Creates a new Media instance
229	Play the media .
230	Sets the position of the media
231	Pause media .
232	This function is called when the player has been acquired .
233	Called when the media is started .
234	Stops the media capture .
235	Release the media
236	Returns the full path to the given URI .
237	Convert a CDV file to an application .
238	Process the given src .
239	Parses a URI into a path and filename .
240	Context constructor
241	Returns the unique capabilities of the given capabilities .
242	Compare two capabilities .
243	Checks if the given directory is a cordova directory .
244	Cancels the project root .
245	Delete all svn files
246	Finds a list of plugins .
247	Builds the hooks runner
248	Extract the shebang interpreter .
249	Checks if a hook is disabled .
250	Initialize the command .
251	Returns a list of application hooks .
252	Gets the scripts for a hook .
253	Get application hooks from a directory .
254	Get the scripts from the config file
255	Get a list of plugin scripts
256	Get all plugins for a hook
257	Ensure the capabilities are unique .
258	Copy a new file to a directory
259	Construct a PluginSpec .
260	Get the path of a plugin file .
261	Runs a platform command .
262	Get a list of available engines
263	Get the list of plugins .
264	Get the dependencies of a plugin .
265	Creates a replacement for the given manifest file .
266	Check if the plugin is valid
267	Get the platform details from a directory .
268	Returns the platform name from the given name .
269	Process a message .
270	Run engine scripts .
271	Create a package json
272	Prepare platforms .
273	Register an icon .
274	Map image resources
275	Find the launch mode for the given platform .
276	Create a new AndroidManifest instance .
277	Checks that the requirements are not met .
278	Find the version of the given version
279	List all required requirements .
280	Validate task name
281	Update travis YAML files .
282	Update travis YAML files .
283	Translate travis YAML to a travis YAML file .
284	Checks if a given package is ignored .
285	Get the dependency URL for a repository .
286	Extract apis from services
287	Extracts the normalized values from the given attribute .
288	Recursive function for recursively .
289	Adds a numeric reference to the query .
290	Removes all values from the given attribute .
291	Adds a single facet to the query .
292	Adds a facet to the query .
293	Adds a facet to the query .
294	Adds a disjunctive facet to the query .
295	Add a tag to the query .
296	Removes a facet from the query .
297	Removes a facet from the query .
298	Removes a facet from the query .
299	Removes a facet from the query .
300	Removes the specified facet from the query .
301	Removes a disjunctive facet .
302	Removes a tag from the query .
303	Toggle a facet .
304	Adds a facet to the query .
305	Checks if the given facet is a valid facet .
306	Determine if the given facet is excluded .
307	Returns a list of disjunctiveFacets .
308	Sets a parameter value .
309	Set query parameters
310	Get the breadcrumb for a given facet .
311	Run a command
312	Compile the compiler .
313	Compile shared files .
314	Compile the compiled js code .
315	Compile Wasm .
316	Get plugin state
317	helper function for helpers
318	Create a batch from a sync stack
319	Initiate the configuration for the given user .
320	Set default values
321	Get the id of the payload
322	Creates a new VuexStore instance with the given options .
323	Parse CSV file .
324	Parse JSON file
325	Parses a JSON file .
326	Checks that the given typeSpec is valid .
327	Invokes the given callback .
328	Get the closest instance from the given node .
329	Get instance from node
330	Gets the node from the given instance .
331	Traverses the enter and panics if necessary .
332	Create a prefix map for the given style property .
333	Properties of a class .
334	Get the composition event type .
335	Determines if the top level is fallback to the fallback .
336	Get the value for a property .
337	Returns the target object for the given input type .
338	Determines if the top level of the given target type matches the given type .
339	Listen to a DOM event .
340	Get the DOM document of an event .
341	Construct a select event .
342	Set text content
343	Creates a serialized string for the given styles .
344	Appends the child node to the container .
345	Called when a component is mounted .
346	Calculates the unique async expiration time .
347	Converts a string to a JSON string .
348	Gets the options for a given rule .
349	Normalize a rule .
350	Finds the parent of a node .
351	Creates a copy of a node .
352	Returns the offset of the element in the DOM .
353	Calculates the offset of the element in the view .
354	Returns the first child of the current tree
355	Append the previous node to the list .
356	Append the current tree to the tree .
357	Strip the view from the given selector .
358	Get the pid of a process
359	Kill app by pattern
360	Returns a list of PIDs of the given port
361	Removes all webSocket handlers from the server .
362	Verify application platform .
363	Checks if a URL is a local host
364	Normalize platform version
365	Update the project file
366	Reset project file
367	Returns the additional run content for the given platform .
368	Get the WDA upgrade timestamp .
369	Parse container path
370	Push a file to the simulator .
371	Pulls a remote file from the simulator .
372	pull from remote device
373	Create a simulator .
374	Get an existing simulator .
375	Get the list of objects
376	Determine if the collision is intersect .
377	Get the current position of the game .
378	Parses the given search params
379	Construct a new RequestQueue
380	Create a new message tracker .
381	Connect to the server
382	Initialize socket tracker
383	Setup the client
384	Creates a graph from a grid
385	Removes the active class from the given path .
386	Iterate over the given array .
387	Convert an array to a map
388	Creates a new list of watched files .
389	Start watch timer
390	scan template and set token value
391	Converts a UTF - 8 byte code into a string .
392	Look up a unicode escape character .
393	Scans a token .
394	Get the name of a declaration .
395	Binds children to block scope .
396	Convert a node to a string
397	Unescape an identifier
398	Returns the enclosing block scope for the given node .
399	Checks if a declaration is a declaration .
400	Returns true if the node is an identifier .
401	Get expanded char codes
402	Returns true if the given span contains the given span .
403	Returns true if the token is a list terminator .
404	Parse entity name .
405	Finds the highest occurrence of the given position .
406	Gets the symbol of the given entity .
407	Resolve an entity name .
408	Checks if the given name is a reserved member name .
409	Checks if the given symbol is a export assignment .
410	Get the type of a given type .
411	Get the type of a binding element .
412	Get the type of a binding element .
413	Get the type of a variable declaration .
414	Get the type from a binding element .
415	Get a type from an object .
416	Get the local type parameters of the given symbol .
417	Gets the base constructor for the given type .
418	Returns true if the given node is a type reference .
419	Creates an instantiated symbol table .
420	Gets the union signatures for a given kind .
421	Gets the property of a given type .
422	Returns the type of the given type .
423	Returns the property of a given type .
424	Returns the flags of the given types .
425	Get a type from a class or interface .
426	Gets the type from the given node reference .
427	Add types to a set of types .
428	Checks if a given type is known .
429	Determines if the given object is related to this object .
430	Determine if a generic type is a generic type .
431	Returns true if the given node is assigned to the given node .
432	Returns the type of the given type .
433	Returns the type of the given parameter .
434	Returns the type of the initial type of the initializer expression .
435	Apply the mapper to the given context .
436	Checks if the given type is a valid index signature .
437	Returns the context for the given object .
438	Returns the actual type of an element .
439	Returns the non - generic signature of a given type .
440	Returns the signature of the given node .
441	Returns the symbol of the given attribute .
442	Checks if the given property is accessible .
443	Get the property name for an indexed expression .
444	Returns the first call signature of a given type .
445	Get the effective call arguments .
446	Gets the effective decorator type .
447	Returns the effective argument type of the given node .
448	Get the effective argument of an argument .
449	Get the effective argument of an argument .
450	Returns the error message for the given node .
451	Resolve a decorator .
452	Gets the signature for the given node .
453	Checks if the given node is a call expression .
454	Assigns the bindings of a node .
455	Checks the type parameter .
456	Get the type of a promise .
457	Checks if the given node is a decorator .
458	Checks the type of a type node .
459	Checks the type of a type annotation .
460	Checks if the given node is a decorator .
461	Checks whether this node has been captured .
462	Checks the initializer initializer .
463	Checks if a variable is a variable declaration .
464	Checks if an iterable is an element type .
465	Checks if a type parameter is valid .
466	Checks if the given node is valid .
467	Copy a symbol .
468	Gets the type of a class .
469	Gets the properties of a given type .
470	Returns the referenced export container .
471	Gets the referenced import declaration declaration .
472	Gets the value of the given node .
473	Returns the default export variable name .
474	Emits the source files .
475	Create a temporary variable name .
476	Create a unique name for a given base name .
477	Encodes the last record map to the source map .
478	Creates a temporary variable .
479	Indicates if two nodes are equal .
480	Generate an expression for an expression .
481	Try to emit the start of a variable declaration .
482	Emits an assignment to the given value .
483	Emits a temporary variable assignment .
484	Ensure the expression is an identifier .
485	Finds a file and returns it .
486	Read config file .
487	Parses a config file into a JSON object .
488	Remove dynamic properties from a node .
489	Gets the information about the given node .
490	Returns the best parameter index for the given arguments .
491	Gets the token at the given position .
492	Finds the token at the given position .
493	Returns the tag at the given position .
494	Strip quotes from quotes .
495	Fix token kind .
496	Checks if a node is a list element .
497	Finds the enclosing node in the given range .
498	Returns true if the range contains a range of ranges .
499	Checks if a comment is inside a comment .
500	Gets the semantic diagnostics for a given file .
501	Returns the completion name of the completion entry .
502	Gets the scope node for the given position .
503	Gets the completion symbol for the given object .
504	Try to get a list of symbols for a given name .
505	Try to find an ObjectLikeCompletionContainer
506	Filters the symbols of the given symbols .
507	Checks if the given node is a write access .
508	Gets the signature help items for a given file .
509	Checks whether the given symbol is a value of the given symbol .
510	Determine the type of a token type .
511	Get the parameters from the right side .
512	Calculate the health score
513	Handles the origin .
514	Translates the given element and returns the transform .
515	Determine if the tangle is valid
516	Creates a touch event .
517	Calculate the difference between two times
518	Start a touch event
519	Returns the value of the transform property .
520	Set style property
521	Set the transformation property .
522	Convert a path to a module
523	Get payload from token
524	Set the active chapter
525	Get chapter hash
526	Handle scrolling .
527	Insert an element at the given index .
528	Create a dropdown menu
529	Create a new button
530	Removes a button .
531	Remove buttons from the list of buttons
532	Toggle the sidebar .
533	Filter the summary
534	Initializes the popup
535	Initializes the sidebar
536	Add a new directive
537	Creates a new rule .
538	Constructor for Toxy
539	Get the index of a config file .
540	Parse a file .
541	Metadata constructor
542	Checks for udt types .
543	Prepared queries .
544	Driver error .
545	Creates a new error error .
546	Creates a new connection error .
547	Extend the given user options .
548	Validate policies options .
549	Validates the given protocol options .
550	Validates socket options .
551	Validates encoding options .
552	Set the default options for the given protocol version .
553	Get a map by name
554	Get data type name by code
555	Create a FrameHeader
556	Generate a timestamp .
557	Creates a mutable object .
558	Construct a Aggregate .
559	Constructs a Host
560	Constructs ConstantSpeculativeExecutionPolicy
561	Materialized view .
562	DataCollection constructor
563	Execute a test .
564	TableMetadata class .
565	Schema parser .
566	Schema parser .
567	Schema parser .
568	Get a SchemaParser instance for the given version .
569	Encode routing key .
570	get js files
571	SchemaFunction constructor
572	Copy buffer to buffer
573	Fix stack trace
574	Log a message .
575	Convert obj to lowercase properties
576	Recursively merge properties into target object .
577	Iterate over an array
578	Convert iterator to array
579	Binary search function .
580	Insert an item into an array .
581	Validate function .
582	Convert a string to a string
583	Create a promise wrapper for the given callback .
584	Create a whitelist policy .
585	Constructor for EventDebouncer .
586	Frame reader .
587	Creates a new connection .
588	Get a random clock id
589	Get node id
590	Gets the tick number .
591	Get the time of the given date .
592	Generate a buffer for a given time .
593	Encodes an encoder .
594	Returns the number of leading zeros .
595	Creates an index .
596	Sort files by key
597	Load the mode .
598	Update scrollbars
599	Restart the blinker .
600	Calculates the coordinates of the line at the given position .
601	Updates the contents of a document .
602	Sets the selection of an anchor .
603	Highlight a line .
604	Get the value of an element
605	Create a Flow
606	Remove an event from the list
607	Called when an event is fired
608	Reads the contents of an event .
609	Generate unique identifier
610	Sends the queue to the queue .
611	Creates a list of input files .
612	Add drag event listeners
613	Removes all DOM nodes from the DOM .
614	Check if the file is uploading .
615	Checks if the file has uploads .
616	Uploads the next chunk .
617	Adds a list of files to the flow
618	Removes a file from the list .
619	Returns the file with the given unique identifier .
620	Calculate the total size of the file .
621	Calculates the speed of the progress bar
622	Called when a chunk is finished .
623	Starts the upload .
624	Initialize the stream .
625	Calculates the progress bar
626	Returns true if the chunk is outstanding .
627	Calculate the average speed .
628	Reads the content of a file .
629	Creates a new XML request
630	Reads the data from the stream
631	Returns the status of the request .
632	Generate the data for the request .
633	Evaluate options
634	Iterate over all elements in an object
635	Create a new table
636	Check if database is valid
637	Insert table content
638	Count all records
639	Update a row
640	Create a header for a given string .
641	Properties of a Parameter .
642	Array constructor .
643	Constructor for TransformationParam
644	Properties of a RangeParam
645	Initialize the configuration .
646	Cloudinary implementation .
647	Get the mode of the given environment .
648	Resolve lodash
649	Creates a config object for the given name .
650	Finalize resource type
651	Create a new Drag object .
652	Iterate over an object
653	Reduce an object with the given function .
654	Checks if value is a plain object .
655	Log by type
656	Create a new element
657	Add a class to an element
658	Toggle the given class to the given element .
659	Returns the position of the pointer to the given element .
660	Append content to element .
661	Get the data for the given element .
662	Checks if the given element has data .
663	Removes the data from an element
664	Handle multiple events .
665	Removes events from an element .
666	Handle a single event .
667	Auto setup the media
668	Set autoSetup timeout
669	Set text content
670	Creates a throttled function .
671	Checks if the given type is a valid event type .
672	Creates a component .
673	Checks if the given function is valid .
674	Gets the value of a range .
675	Creates a new TimeRanges object .
676	Create a set of time ranges .
677	Creates a new TextTrackList
678	Get file extension
679	Load a track
680	Construct a color from a color
681	Checks if the player is available .
682	Parse option value .
683	Checks if the progress is available .
684	Finds the first choice between two choices
685	Mark a plugin as active .
686	Trigger setup event
687	Create a basic plugin wrapper
688	Create a new plugin factory
689	Get videojs .
690	Print the number of bytes
691	Sets the colors of the sortable data
692	Publish a message
693	Initialize the page
694	Returns the breakpoint for the given width
695	Create a handlebars environment .
696	Sets the options for the given parameters .
697	Set canvas width
698	Redraw the number of items
699	Sets up the index file
700	Gets the meta data .
701	Get the value of the given property .
702	Calculate viewport
703	Check if the current version is valid
704	Parse version string
705	Create a new cell accessor
706	Get all projects
707	Gets the server configuration .
708	Filter environment variables
709	Merges the given branch into a list of plugins .
710	Register a template
711	Get plugin template
712	Render a file
713	Remove a socket .
714	Adds a connection to the server .
715	Returns the status of the job .
716	Prepare a job
717	Remove attributes from model
718	Set the body of the request body
719	Validate the body of the request
720	Gets a project .
721	Check if user is logged in .
722	Checks if the user is authorized .
723	Parse a plugin block .
724	Find all nested directories in a directory .
725	Returns the absolute paths of the given file .
726	Finds the list of libraries in the appdir
727	Fix a PLIST file .
728	Generate accessor for an accessor
729	Returns the accessors for the given variable .
730	Evaluates the given AST
731	Checks if the given file exists in the bin .
732	Initialize the container
733	Set the value of an option .
734	Called when the runtime is run
735	Aborts the file reader .
736	Returns a list of events for a given type .
737	Remove an event listener
738	Bind a type to the container .
739	Checks if the given cap is valid
740	Get the version of the browser
741	Removes an object from the DOM
742	Returns the origin of the given URL .
743	Creates a new constructor
744	Returns the index of the given element .
745	Returns the difference between two arrays .
746	Returns the intersection between two arrays .
747	Parse size string
748	Add a new field to this object .
749	Get the value of the field
750	Checks if an object is a class name
751	Add class name to object
752	Checks if an object is a class name .
753	Returns the value of the specified property .
754	Get the position of the given node .
755	Get the iepos of the given node
756	Returns the width of the given node .
757	Remove events from an object
758	Preload data and send it to the server
759	Rotate image
760	Gets all entries in the directory
761	Create a new HTTP request
762	Set a header value
763	Get the response header
764	Set the mime type .
765	Send data to the request .
766	Called when an upload is finished .
767	Merge arguments into target object .
768	Destroy the image
769	Define a property on an object
770	Define a property .
771	SyntaxError .
772	Calculate a new curve .
773	Calculate the inverse of the given flip .
774	Calculates the number of elements in the tree
775	Calculates the number of points
776	Returns true if all ticks are equal
777	Calculate the date format for the given date .
778	Validate a chart model .
779	Calculates the ticks for the given domain .
780	Round up a number to a number .
781	Merge defaults with defaults
782	Suggest the tick number of ticks .
783	Detect number separators .
784	Create a transformer for the given file .
785	Checks if the given file is valid .
786	Handle a resource .
787	Warn all nodes .
788	Returns the closest path to the given pathname .
789	Get the hash of a URI
790	Get previous map
791	Set the path to the start path
792	Parse IPv4 address
793	Get the value of a given property .
794	Get a nested bottle .
795	Apply middleware to container .
796	Add a middleware .
797	Create a provider .
798	Add a new provider .
799	Create a new service
800	Create a new service
801	Create a service factory
802	Defines a value for a property
803	Set the value of a container .
804	Set the value of a property .
805	Define a constant .
806	Decorator for decorator .
807	Creates a new instance of a factory
808	Pop a bottle .
809	Register a service .
810	Reset all providers
811	Throw an exception if the given node is invalid .
812	Check if an expression is an event .
813	Register an event name .
814	Inspect a variable declaration .
815	Recursively inspect the program .
816	Recursively inspect an identifier .
817	Recursively inspect functions of contracts .
818	Recursively inspect a call expression .
819	Recursively inspect a pragma statement .
820	Applies the given source code to the given source code .
821	Inspect top level declaration .
822	Inspect a block statement .
823	Returns the source code for the given node .
824	Recursively inspect a variable declaration .
825	Construct a new RuleContext
826	Resolve the given upstream .
827	Resolve plugin config
828	write config file
829	Lint a string
830	Lint a file
831	Create CLI options .
832	Validate a list of options
833	Determines the visibility of a file .
834	Checks if a literal is hexadecimal
835	New Soundfont .
836	Create an oscillator player .
837	Instrument a sound font
838	Checks if the given library is a system library .
839	Creates a promise with a callback .
840	Start watching files
841	Resolve ignored options .
842	Ensure that a property is empty
843	Checks if a property is a valid number .
844	Add babel compiler .
845	Create an image loader .
846	Create a csv loader
847	Create a css loader .
848	Prepend an entry to the given entry .
849	Builds the webpack build .
850	Merge data into a new object
851	Adds a default value to the given type .
852	Adds a validator to the given type .
853	Convert a type to a type
854	Validate a type
855	Create a custom event .
856	Initialize a custom event .
857	Clean up runtime events .
858	Add runtime events .
859	Normalize an event .
860	Called when an event is pressed
861	Called when an event is moved .
862	Add tracking point
863	Updates the current position of the current drag .
864	Start deceleration .
865	Step the decceleration .
866	Calculates the bounds of the bounding box .
867	Initialize the components
868	Appends a new log to a file stream .
869	Searches for the given length .
870	Create a CronJob
871	Construct a Sandbox instance
872	Webtask constructor
873	Creates a new promise .
874	Returns the union of two arrays .
875	Wraps a list of listeners .
876	Wraps a callback to wrap a callback .
877	Returns the largest directory of the given directory .
878	Creates a new async function .
879	Creates an async iterator .
880	Creates a non - iterator that can be used as an asynchronous function .
881	Recursively traverse an object .
882	Convert a Tunk to a promise .
883	Returns the number of files .
884	Creates a copy of the given index .
885	Move index to target index .
886	Check if an index exists
887	Load a module .
888	Parse accept language .
889	Parse a language string
890	Returns the priority for the given language .
891	Specify a language specification .
892	Returns preferred languages .
893	Compare two strings
894	Parse the accept charset .
895	Parse a string .
896	Returns the priority priority for the given charset .
897	Specifies that the specified charset matches the specified character .
898	Get preferred charsetets .
899	Parse an encoding string .
900	Returns the priority priority for the given encoding .
901	Returns preferred encodings .
902	Parse the Accept header .
903	Parse the media type .
904	Get the priority priority for a given type .
905	Parse a media type .
906	Get preferred media types .
907	Returns the number of quotes .
908	Splits a key value pair into an array .
909	split media types
910	Splits the parameters into a string .
911	load webpack config
912	Assign value to object
913	Returns a string representation of the filter string .
914	Evaluate page
915	Wait for a page
916	Creates a phantom instance .
917	Get colors from image
918	Creates a Cubehelix array with the given steps .
919	Convert colors to image data
920	Compress a number of colors .
921	Convert data to color map
922	Start download .
923	Merge merge .
924	Create a new app channel .
925	handle error handler
926	Create a new app connection .
927	Handle error handler .
928	Application class .
929	Ensure that a queue is consumed .
930	Parse shard function .
931	Checks if two nodes are equal .
932	Dispatch node .
933	Join a single address
934	Returns the type of the given value .
935	Parses an event .
936	Define redirection descriptor .
937	Define a call descriptor .
938	Creates a custom wrapper for the given prototype .
939	Get the wrapper for the given proto .
940	Wrap an event .
941	Get the list of registered listeners .
942	Define an event attribute descriptor .
943	Define a custom event target .
944	Upload a file
945	Called when the retry failed .
946	handles mouse events
947	Create a teamcity instance
948	Convert integer to integer
949	Parse a JSON string .
950	Convert a value to a JSON string
951	Serialize a BSON object .
952	Create a virtual module .
953	Get filename from filename
954	Match semver version
955	Checks if the protocol is equal .
956	Compare two arrays
957	Returns a string representation of the source rule .
958	Get the timeline arguments .
959	Returns the name of the given method .
960	Dump files
961	Run zip package
962	Build the upload form
963	Clears the temporary directory .
964	Log an error
965	Run the given content and return the result .
966	Creates a new patch .
967	Perform a patch
968	Creates a new dependency object
969	Check if the script is in the script
970	Formats a URI .
971	Formats the given uri .
972	Convert uri to html
973	Load a global module
974	Fmix 32 - bit hash
975	Convert a 32 - bit 32 - bit hash to a 32 - bit hash
976	Bind keys to the given object .
977	Sets the parent node .
978	Replace a node with the given value .
979	Removes a value from the list .
980	Change the value of a node .
981	Get next node
982	Update a change event .
983	Creates a new instance of the given object .
984	Clean up nodes .
985	Processes the nodes of the given node .
986	Matches the nodes of the given node .
987	Recursively rehydrate an object
988	Render an object
989	Checks that the given features are valid .
990	Returns a string representation of an entity .
991	Deep merge configs
992	Load YAML config
993	Get base params
994	Get the config from a file
995	Define a property .
996	Makes a new logger .
997	Inject the manifest into the manifest
998	Injects the swagger tag .
999	Injects the async load page JS
1000	Rehype2react2react .
1001	Execute the given command
1002	Spawn a child process .
1003	Calculate slope2
1004	Checks if the given attribute is set .
1005	Create markup for a property .
1006	Wrap an event on the given element .
1007	Create a new update queue .
1008	Mount a component instance .
1009	Requests the given root node .
1010	Determine if the deadline should be yielded .
1011	Deletes a value from a node .
1012	Updates DOM properties .
1013	Simplified method .
1014	ExponentialBackoff strategy .
1015	Backoff constructor
1016	Constructor for a function call .
1017	Create a new Channel
1018	Connection constructor .
1019	Create a draggable object .
1020	Creates a new conjunction map .
1021	Sorts the given conjunction .
1022	Converts a program arguments to a predicate .
1023	Creates a function that returns a function that updates the program arguments .
1024	Process cycle observers .
1025	Creates a list of actions for a goal .
1026	Performs the next cycle .
1027	Apply a function to the given object .
1028	Define a new flow
1029	Apply a callback to the flow .
1030	Execute a function
1031	Pad the start of a string
1032	Creates a new SM2 curve .
1033	Create a new SM2KeyPair .
1034	Generate a gulp - translation function .
1035	Add an event listener .
1036	Remove an event listener .
1037	Creates a new view
1038	Creates a product .
1039	Create a Cart
1040	Invoked when an error is rejected .
1041	Fixes date
1042	Unbinds the slider
1043	Set the position of the current step .
1044	Creates a Google API client .
1045	Calculates the points for a given lat point .
1046	Determine if the enum value matches the given value .
1047	Converts an object to a ByteBuffer .
1048	Creates a new random number
1049	Pretty print date
1050	Creates a new logger .
1051	Run the request queue .
1052	Sets the jsonp client
1053	Validate parameter value .
1054	Convert a parameter declaration to yargs
1055	Convert config declaration to yargs
1056	Construct a new Ngram parser .
1057	Collect scenarios from an element .
1058	Called when a server has changed
1059	Render the component .
1060	Unmount the component .
1061	Extract data from data
1062	Create a new table .
1063	Handle an action .
1064	Called when the request is received
1065	Sets up the component s components .
1066	Called when the store is received .
1067	Remove data from the store
1068	Dispatches a table .
1069	Adds a filter to the table .
1070	Dispatches a table .
1071	Displays a select button .
1072	Selects a row index .
1073	Extract the value from the given attribute .
1074	Maps an object to an object .
1075	Apply a filter to the given object .
1076	Returns an array of elements in the given array .
1077	Adds an item to the array
1078	Replace an array with an array of objects .
1079	Returns the intersection between two arrays .
1080	Removes a listener from an object .
1081	Suspends an event .
1082	Called when a property has been changed .
1083	Sets the value of an object .
1084	Add a value to the list .
1085	Removes a key from the list .
1086	Iterate over all keys in the collection .
1087	Disconnect from an object .
1088	Filters a list of promises .
1089	Container constructor .
1090	Registers a factory .
1091	Remove a full name from the registry .
1092	Resolves a full name .
1093	Adds a type to the container .
1094	Add a new injection .
1095	Adds a factory to the factory .
1096	Get the value of a key
1097	Check if a key exists
1098	Recursively call the callback function .
1099	Converts a string to a camel case .
1100	Increment the value of a property .
1101	Decrement the value of a property .
1102	Creates a new class .
1103	Get the metadata for a property .
1104	Returns true if the given key matches the given value .
1105	Returns an array with the given value .
1106	Returns an array of all the keys in the collection .
1107	Removes an array of elements from the array .
1108	Updates an array of objects .
1109	Compute the reduce computed property .
1110	Adds an object to the collection .
1111	Remove objects from the collection .
1112	Send an event .
1113	Creates a promise for the fulfillment .
1114	Set the value of this promise .
1115	Removes actions from the given props .
1116	Invokes the action on the controller .
1117	Creates an insert operation .
1118	Removes a delete operation .
1119	Removes an array from the list .
1120	Create an ArrayOperation
1121	Constructs an ArrayOperationMatch
1122	Finds an operation at the given index .
1123	Removes an item from the collection .
1124	Adds a value to the collection .
1125	Removes an array of objects from the array .
1126	Removes all objects from the collection .
1127	Removes an object from the collection .
1128	Find an element by id
1129	Adds a class name to the element .
1130	Set the value of an element .
1131	Sets an element property .
1132	Returns the contents of this element .
1133	Add events to the application .
1134	Add event handler to the root element
1135	Returns the nearest instance of the given class .
1136	Get the property of the view .
1137	Returns the parent view of this view .
1138	Compile the template .
1139	Called when a property is changed .
1140	Sets the attribute bindings .
1141	Set a property on this object .
1142	Parse a property path .
1143	Create a new child view .
1144	Clears the view .
1145	Clears the view .
1146	Destroy a view .
1147	Triggers an event on the view
1148	Set the list of child views .
1149	Update the child views .
1150	Removes all children of this view .
1151	Create a new child view .
1152	Trigger an action .
1153	Evaluate unbound helpers
1154	Render a MetamorphView .
1155	Bind a property to a handle .
1156	Add metamorphism check
1157	Closes the current state .
1158	Setup the router .
1159	Initialize the route .
1160	Find the model for the given model .
1161	Get properties from model
1162	Gets a controller .
1163	Disconnects an outlet from the view .
1164	Registers the view parameters .
1165	Called when a link is clicked .
1166	Replaces the route with the given arguments .
1167	Checks if the given view name exists in the view .
1168	Removes all pending disconnections .
1169	Returns the URL of the current page .
1170	Replace the current history .
1171	Called when the browser is clicked .
1172	Set the path to the router .
1173	Resolves a full name .
1174	Returns the template name for the given name .
1175	Returns the main router .
1176	Initialize the container .
1177	Advances the application .
1178	Setup the event dispatcher .
1179	Registers the given namespace .
1180	Registers a new record .
1181	Registers the given type .
1182	Returns a list of all the namespaces .
1183	Adds a callback to the queue .
1184	Removes the waiters from the queue .
1185	Removes all methods from the test methods
1186	Add a callback to the prototype .
1187	Convert an object to a property descriptor .
1188	Normalize property descriptor .
1189	Checks if the current descriptor is compatible with extensible .
1190	Get a trap .
1191	Accessor for a property
1192	Wrap the object .
1193	Seal the target object .
1194	Triggers the wrapped object .
1195	Deletes a property .
1196	Iterate over the target .
1197	Returns the keys of the target object .
1198	Returns an iterator over the keys of this object .
1199	Creates an unwrapped method .
1200	Load an object from an object
1201	Serialize a record .
1202	Serialize a record .
1203	Recursively serializes a relationship to a model .
1204	Convert a relationship to a JSON object
1205	Extract meta data from store
1206	Remove meta data from the store
1207	Save the record array .
1208	Adds a new record to the collection .
1209	Creates a new record .
1210	Returns the id for the given type .
1211	Find a record by id
1212	Finds items by type
1213	Reload a record .
1214	Load records from records .
1215	Checks if the given type is a record .
1216	Get a record by id
1217	Find a record from the database .
1218	Returns an array of records for a given type .
1219	Unload all records .
1220	Returns an array of records for a given type .
1221	Commit the pending record .
1222	Updates a record .
1223	Assign a record to the database .
1224	Returns a mapping for a given type .
1225	Populate a new record .
1226	Push a payload to the store
1227	Update the metadata for the given type .
1228	Create a new record .
1229	Add unsaved records .
1230	Deep clone of object
1231	Called when the attribute has changed .
1232	Removes the given attribute .
1233	Sets the data for this record .
1234	Clears the model .
1235	Sets the callback for this model .
1236	Saves the model .
1237	Reloads the record .
1238	Set the value of an attribute .
1239	Iterate over all attributes of the model
1240	Recursively invokes the given callback function .
1241	Adds a property to the descriptor .
1242	Iterate over all relationships by name
1243	Clears the changed records .
1244	Add a record to the array
1245	Updates an array of records .
1246	Creates a new array of records .
1247	Registers a new record array .
1248	Registers a new record .
1249	Creates a new record array .
1250	Adds a new record to the collection .
1251	Add a new record to the record .
1252	Serialize a record .
1253	Returns an array of objects that match the given type .
1254	Returns a collection of fixture IDs .
1255	Serialize a record .
1256	Normalize a type .
1257	Normalize a single record .
1258	Normalize the given payload into the store .
1259	Adds the given payload to the store .
1260	Serialize a record .
1261	Adds the relationship to the model .
1262	Get a specific type
1263	Get a list of IDs for a given type .
1264	Serialize a record .
1265	Adds a record to the store .
1266	Delete a record .
1267	Returns the URL for the given type .
1268	Creates an AJAX request .
1269	Constructor for Inflector
1270	Convert a key to an id
1271	Serialize a record .
1272	Adds the relationship to the model .
1273	Returns the singular name of the given root .
1274	Removes links from data .
1275	Converts the given type to a hash
1276	Serialize a relationship into a JSON array .
1277	Updates the record with the given primary key .
1278	Updates the data for the given type .
1279	Returns the pluralize of a given type .
1280	Creates a new error object from a JAX request .
1281	Parse key value
1282	Set the value of an element
1283	Compile a list of nodes .
1284	Creates a wrapper for group elements .
1285	Replaces the given element with the given elements .
1286	Parse an array declaration .
1287	Checks if the given request url is a valid origin .
1288	Traverse the given node .
1289	New client .
1290	Creates a new connection
1291	Creates a new mark .
1292	Sends a request to the server
1293	Process bootstrap file
1294	Fixes the tsconfig
1295	Fixes the reference file
1296	Fix native script package
1297	Fix the angular package
1298	Fix the main module .
1299	Fix gitignore pattern
1300	Display the final help .
1301	Bind a function to an object
1302	Creates a new instance of the given object .
1303	Converts a call argument to an object .
1304	Sets the value of a call frame .
1305	Validate a string
1306	Loop through all associations
1307	Handle errors .
1308	Create a zip file
1309	Execute a command
1310	Convert file to string
1311	Merges two YAML files .
1312	Loads the given kes folder .
1313	Determine the KES class .
1314	Log a failure
1315	Get system bucket
1316	Builds a list of nested templates .
1317	Builds the KFS command .
1318	Builds a lambda
1319	Send a response to the cloud .
1320	Convert options to string
1321	Assign values to target .
1322	Creates a popup with the given post data
1323	Execute a popup .
1324	Opens a popup .
1325	Opens a popup with a post data
1326	Gets the wrapping content range for the given editor .
1327	Checks if the given range is between the given range .
1328	Returns true if the token is extracted from the editor .
1329	Get stylesheet completion .
1330	Get the completions for an editor .
1331	Get stylesheet snippets from a registry .
1332	Get markup snippets .
1333	Extract prefix from string
1334	Check if a marker is valid .
1335	Toggles the given property .
1336	Determine if an attribute has changed
1337	Returns the event handler for the given property name .
1338	Creates a derived property .
1339	Creates a new Image object
1340	Add shipit task
1341	Inject template
1342	Default check size
1343	Compute an int64 .
1344	Create a new DataStream instance .
1345	Get sandbox map
1346	Break sandbox .
1347	Remove sandbox variables
1348	Get the usage of an AST .
1349	Remove lmd events from AST
1350	Remove all items from the list
1351	Checks if the option is a preprocessor .
1352	Called when the module has been loaded
1353	Rebuild a layout object .
1354	Calculates the position of a row
1355	Finds the given class and returns it .
1356	Convert an object to a string
1357	Count the number of lines .
1358	Wrap a condition .
1359	Checks if a single condition is a single condition .
1360	Counts the number of lines .
1361	Assigns name to anonymous function
1362	Wrap conditionals
1363	Add a module .
1364	Calculate the coverage of a module
1365	Merge a mixins .
1366	Merge two objects
1367	Merge config from config directory
1368	Given a module path and a list of modules return a path .
1369	Merges the given flags into the config
1370	Add plugins from bundle config
1371	Generate the export code
1372	Wrap the code of a module .
1373	Get module type
1374	Convert a matrix to a d3 transform
1375	Start the mousewheel
1376	Calculates the delta of the behavior .
1377	Parse a string
1378	Parse the given XML document .
1379	Convert the given file to a string .
1380	Get url from url
1381	Get file from source
1382	Convert an error to an error .
1383	Checks if the response is valid .
1384	Executes a function call .
1385	Prepare the output directory
1386	Parses the given XML document .
1387	Run the input .
1388	generate input
1389	Generate input
1390	Normalizes an object .
1391	Ensure that the given name is missing .
1392	Prepare the options .
1393	Get the output path for the given page
1394	Map output file to output directory
1395	Creates a generator with the given options .
1396	Create output file
1397	Check if path exists
1398	Returns the path of the phantomjs script
1399	Start a phantomjs worker .
1400	Prepare options .
1401	Create a new listener for the given input stream .
1402	Creates a new lock factory .
1403	Creates a new notification .
1404	Start watcher .
1405	Add a snapshot to the snapshot .
1406	Check if output file exists
1407	Remove a file from the cache
1408	Removes the given output file .
1409	Write the snapshot to the output file
1410	Checks if a line is valid
1411	Get robots URL
1412	Get robots file
1413	Recursively bubble the values of the given values .
1414	Extracts the intersection between two ranges .
1415	Get the last ms timestamp
1416	Parse the given URL .
1417	prepare params
1418	Remove trailing trailing slash
1419	Get properties of an object
1420	Add event to the cluster
1421	Prepare the request .
1422	Add a request to the queue
1423	Get the metrics
1424	Make an HTTP request
1425	Return a promise of all promises .
1426	Returns the next node after the given index .
1427	Convert a value to a type .
1428	Creates a function that returns true if the given list is a valid regex .
1429	Called when a callback is called
1430	Creates an EJDBC implementation .
1431	Create a dummy text
1432	Creates a Backend
1433	Creates a css file .
1434	Run a series of tasks .
1435	Checks if the given document is a valid type .
1436	Pad a value to a string
1437	Resolves a collection definition .
1438	Assign roles to users .
1439	Get all the channels for a given document .
1440	Outputs the help message .
1441	Returns a human readable representation of an argument .
1442	Validates that the given object is valid .
1443	Builds a path to a path .
1444	Get business id
1445	Returns the default sync channels for the given document .
1446	Checks if the given value is an ISO8601 date string .
1447	Normalize an ISO 8601 time zone .
1448	Compare two strings
1449	Compare two dates
1450	Normalize the ISO8601 time zone .
1451	Start the process
1452	Executes the stop process
1453	Send a message
1454	Delete entity
1455	Saves an entity .
1456	Get a file from a module
1457	Get entity context
1458	Get a module
1459	Process the sources .
1460	Generate module catalog
1461	Log a module
1462	Build a list of Instance instances
1463	Builds a directory structure
1464	Generate a unique ID
1465	Run the genesis generation .
1466	Cache all modules
1467	Caches the given Apexes .
1468	Stop the broker
1469	Gets the given protocol module .
1470	Removes a directory .
1471	Get the mouse position of the mouse event .
1472	Proxy request to the proxy
1473	Inject proxy headers
1474	Parse a JSON - proxy configuration file
1475	Parses the contents of the config .
1476	Parse config map
1477	Parse command line arguments .
1478	Parse command line arguments
1479	Parse forwarding rule .
1480	Create an error with the given code .
1481	Update working state
1482	Fetch branches from the repository
1483	Initialize the repository .
1484	Ensure the given buffer is an array .
1485	Encode a string to a string .
1486	Compares two strings .
1487	Returns a set of merged files in the working directory .
1488	Get merged tree entries .
1489	Find the SHA of a file .
1490	Prepare the commit builder .
1491	Flushes a commit .
1492	Format an array of messages
1493	Push a repository to the repository
1494	Pull branches from the repository
1495	Compares two commits .
1496	Solves the given tree to the given tree .
1497	Merge a commit into a commit .
1498	Gets the resolved entries for a conflict .
1499	Add a blob to the cache
1500	Get the contents of a directory .
1501	Normalizes a git commit .
1502	Normalize a single commit .
1503	Returns a file object .
1504	Reads the contents of a file .
1505	Checks if filepath exists
1506	Remove a file .
1507	Move a file to a new file .
1508	Checks if the current state is changed .
1509	Setup the connection
1510	Configure Nock .
1511	Configure Expressions
1512	Configure lan proxy
1513	Clean up the server .
1514	Sets the changes of a file .
1515	Revert all changes in the repository .
1516	Revert a file
1517	Revert the current working directory
1518	Revert all removed changes
1519	Normalize path
1520	Checks if the given path contains the given path .
1521	Read all files in a directory .
1522	Move files to a directory
1523	Create a new branch .
1524	Updates the branch with the given branch name .
1525	Remove a branch .
1526	Fetch a blob from the repository
1527	Creates an OAuth2 token
1528	Creates a new PokitD instance .
1529	Convert a list of features to a string
1530	Add a feature to the map
1531	Add features to the lookup table .
1532	Convert a hash to an array
1533	Adds features to the array of features .
1534	Returns the hash of an array
1535	Generates a hash of arrays .
1536	Recursively train a single node
1537	Convert a dataset into an array of data .
1538	Recursively classify the given tree .
1539	Constructs a classifier classifier .
1540	Initialize the model .
1541	Initialize the weights .
1542	Initialize classifier
1543	Sets the number of tests .
1544	Calculates the explanations for the expected classes .
1545	Calculates the explanations of the expected classes .
1546	Calculates the explanations for the expected classes .
1547	Perform training training .
1548	Convert a model string to a model map
1549	Generate an annotation for a dataset .
1550	Constructs a SVM .
1551	Train training batch
1552	Convert a model string to a model map
1553	Performs training on the given sample .
1554	Initialize the multiclass class .
1555	Concatenates an array of options
1556	Preorder a node .
1557	Filters the relations for the given relation .
1558	Returns a list of files in the bundle
1559	Recursively walk the bundle resources .
1560	Returns a list of all resources .
1561	Returns a list of bundle names .
1562	Returns the bundle path for the given path .
1563	Create a new instance of the package .
1564	Load a bundle .
1565	Loads the ruleset for the given path .
1566	Returns true if the given path matches the given rule .
1567	Processes a resource .
1568	Add a resource
1569	Checks if the given filter is valid
1570	Given a list of packages return a list of packages .
1571	Returns a deep copy of all seeds in the order .
1572	Add a bundle to the bundle .
1573	Returns a deep copy of the object
1574	Create a Bundle instance
1575	Get the base scale for a given type .
1576	BufferedTracer .
1577	Build a gulp file
1578	Splits a string into chunks .
1579	Print the usage of gulp .
1580	Filter an array of elements
1581	Extracts the CSS from a bundle .
1582	Validates that the given id is valid .
1583	Groups a list of messages from a gettext .
1584	Recursively traverse all translations
1585	Find all available dependencies .
1586	Parse query string
1587	Stringify object
1588	Compile a single string .
1589	Bind events to DOM
1590	Constructor for the constructor .
1591	Inserts an element into the DOM
1592	Get the value of the given element
1593	Determines the dependencies of a module .
1594	Run the coverage report .
1595	Shortline constructor
1596	Find elements in a node .
1597	Main entry point
1598	Construct a Travis status http .
1599	Executes git command
1600	Creates a SlugDetectionError instance .
1601	Creates a scoped CSS from the given HTML .
1602	Combine the given templates and scopes .
1603	Creates a new InvalidSlugError instance .
1604	Checks to see if the local commit is valid .
1605	Trims the given string .
1606	Parse options .
1607	Serialize an object into a string .
1608	Render a page of pages .
1609	Get the path of a git url
1610	Renders the build files .
1611	Compile the index .
1612	Sort the list of mentions .
1613	Finds the emoji for a given match .
1614	Creates a fiber for the given function .
1615	Adds a selector to a selector .
1616	Finds the CSS selector for a selector .
1617	Create a new index .
1618	Insert a migration .
1619	Inserts a seed .
1620	Close the database .
1621	Parse parameters .
1622	Checks if the given props is a property .
1623	Create a gif file
1624	Checks if the given test level is log level .
1625	Get the value of a radio button .
1626	Convert attribute name to map
1627	Initializes the widget
1628	Initialize the widget .
1629	Called when a radio button is changed
1630	get cookies from cookie
1631	Get cookies from cookies
1632	set cookie value
1633	Determine if the cookie is valid
1634	Format a message
1635	Create zoom range path
1636	Synchronize the zoom range
1637	Adds selections to the chart
1638	Apply selection to the chart
1639	Create selections path
1640	Synchronize selection .
1641	Sets up the data that should be used to watch data .
1642	Sets up the data for the given watcher .
1643	Add an identifier to the chart
1644	Load an entity .
1645	Generate a new action
1646	Creates a new action creator .
1647	Returns a random delay between min and max .
1648	Logs the state of the action .
1649	Removes a subscriber from the list of subscribers .
1650	Removes all subscribed subscribers from a channel
1651	Add subscribers to a channel
1652	Get a list of events for a given channel .
1653	Get subscribers by event name
1654	Subscribe to a channel
1655	Unsubscribe from a channel
1656	Subscribe to a subscription
1657	Unsubscribes a subscription
1658	Executes a handler .
1659	Publish an event
1660	Resolve namespace
1661	Returns a promise that resolves to the given mapping .
1662	Gets the promise callback for the given type .
1663	Add a promise to the result of the promise .
1664	Create a new FakeModule instance
1665	Check if an object is a jQuery object
1666	Checks if an object is an event .
1667	Add properties to module
1668	Wrap a function with the given name and arguments .
1669	Register a module
1670	Sets an instance of the module .
1671	Start a single module
1672	Called when the object is initialized
1673	Start a single module
1674	Start a single module
1675	Creates a new instance of the given module .
1676	Creates a function to set the properties of a template
1677	Start all modules
1678	Stop a module
1679	Stop all instances of the module
1680	Stop a single module
1681	Stop all modules
1682	Stop a module by its id
1683	Remove a module .
1684	Delete a module
1685	Main entry point .
1686	Returns the value in the picker value
1687	Set the value of the picker
1688	Returns the value of the default value
1689	Create a Markdown serializer for the given indentation code .
1690	Converts a Markdown to a snapshot .
1691	Try to exit the suite .
1692	Enter root suite .
1693	Enter a snapshot
1694	Push a snapshot code to the current state
1695	Transform a suite .
1696	Transform a snapshot list
1697	Generate a suite header
1698	Helper function to create a delimiter
1699	Default path resolver for tests
1700	Format a list of snapshots .
1701	Format a list of snapshots .
1702	Creates a preprocessor for the given file .
1703	Creates a singleline plugin .
1704	Replace a new line with new lines .
1705	Condense blocks .
1706	Checks if a character list contains entities
1707	Convert hexadecimal to RGB format
1708	Renders a rule .
1709	Initialize the analytics object
1710	Debug function for debugging
1711	Checks if obj is a buffer
1712	Encode a number
1713	Decode a string
1714	Polling for polling .
1715	Triggers the given transport .
1716	Clean up the transport .
1717	Constructs a Backoff instance
1718	Extract comments from a string .
1719	Binds the ngModel controls .
1720	Creates an instance of the widget .
1721	Determine if the vowel vowel ends .
1722	Add an API to the server
1723	Get a JSON object from the remote server
1724	Splits the name of a method name .
1725	Copy content to client
1726	Prepare the stack trace
1727	capture stdout
1728	Hook for hook
1729	Start capturing a stream
1730	Wrapper around intercepting .
1731	Get the nearest value for a given value .
1732	Convert an integer to an integer .
1733	Adds a frame to the array .
1734	Creates a new transformer .
1735	Creates a concatenate .
1736	patch a node
1737	Called when the queue is done .
1738	Creates a setter for a node .
1739	Patch node data .
1740	Fire an event .
1741	Creates a delegate for the given root node .
1742	Create a new instance of a module
1743	Execute the given structure .
1744	Adds a where condition to the query builder .
1745	Handle multi - valued parameters .
1746	Get a KnexInstance
1747	Closes all knex instances .
1748	Creates a highlight node .
1749	Render the given source
1750	Creates a color arrow
1751	Parses the length of the value parser .
1752	Returns a promise with the given offset .
1753	Retrieve the results from the given outcomes .
1754	Finds the block at the given key at the given key .
1755	Read data from the stream
1756	Convenience method to create a new cursor from the buffer .
1757	Read header section
1758	Read keyword summary .
1759	Read keyword index .
1760	Read key block .
1761	Scan the key block table .
1762	Read record summary .
1763	Reads a record block .
1764	Reads the definition of the definition .
1765	Read an object from a file .
1766	Find the word for the given keyinfo .
1767	Returns the first word in the array .
1768	Recursively shrink the array .
1769	Searches for a given phrase .
1770	Match an offset by offset
1771	Checks if a modifier key is valid
1772	Creates a keycomb function for a keyFunc .
1773	Override this method to override keydown
1774	Override key press .
1775	Executes all registered extensions
1776	Parse an IMAP message .
1777	Gets a GPT .
1778	Read a GPT from the primary key .
1779	Stop the given function .
1780	Format a quantity .
1781	Format a quantity or tag .
1782	Format a value to a byte array .
1783	Formats a JSON object .
1784	Format a value .
1785	Formats input fields .
1786	Merge config files
1787	Parse properties .
1788	Extracts a string literal .
1789	Parse string literal
1790	Parse numeric literals .
1791	Parse an AST node .
1792	Invokes the given function .
1793	Matches an array of strings .
1794	Compile an AST node .
1795	Get the name of a tag .
1796	Evaluate an attribute value .
1797	Checks if the given code is unquoted .
1798	Set default value
1799	Read XML file
1800	Append UISource to the client
1801	Log an error message .
1802	Compiles the given schema .
1803	Add props to a table
1804	Perform a debounce function .
1805	Makes a matcher and returns a matcher .
1806	Finds a collection of models in a model .
1807	Log an error message
1808	Call the callback function .
1809	Finds the input element from the template element
1810	Get validation messages map
1811	Register a class .
1812	Configure an object
1813	Connect to MongoDB
1814	Start the shell
1815	Executes the given files .
1816	Wrap the given function .
1817	Handle error handling
1818	Generate tablature .
1819	Saves the object to the database .
1820	Create a pickler .
1821	Recursively iterates over all files
1822	Checks if the given file is a file .
1823	Checks if the given file is a directory .
1824	Process all files
1825	Process a file .
1826	Initializes the http server .
1827	Adds an element to an array .
1828	Creates an object interface
1829	Executes a HTTP transaction .
1830	Calculates the difference between two dates .
1831	Initialize an error handler .
1832	Calculates the difference between two dates .
1833	Consume a pair of pairs .
1834	Consume an array of strings
1835	Checks if a character is an identifier .
1836	Called when a cycle is reached
1837	Get json from file
1838	Updates the current level .
1839	Move the current level to the current level
1840	Decrypts the content of the given components .
1841	Encrypts the given text with the given IV .
1842	Encrypts a plain text .
1843	Unpack encrypted content .
1844	Derive a password from a password .
1845	Derives a private key from a password .
1846	Creates a stream with the given schema .
1847	Creates a stream from a buffer .
1848	Generates a random number of random elements .
1849	r Generate a random Rdos .
1850	Draw a single curve .
1851	Color path .
1852	Draws a list of paths
1853	Called when the brush is updated .
1854	Determine if the brush is selected
1855	Checks if two dimensions are consecutive .
1856	Convert a property to a property
1857	Get the property of the given property .
1858	Constructs a ReadFileCache .
1859	Called when a resource is done .
1860	Initialize the client
1861	Convert a message to a string
1862	Creates a new request .
1863	Process request options .
1864	Handles an event .
1865	Calls the cURL method
1866	Set the response headers
1867	Returns an instance of the given header .
1868	Sets the HTTP header .
1869	Sets the HTTP header .
1870	Creates a new HTTP header .
1871	Parse the given encoding .
1872	Convert options to an encoding string .
1873	Convert a string to an encoding .
1874	Encode a user auth .
1875	Creates a new vector .
1876	Creates a new formatted error object .
1877	Creates a new matrices
1878	Creates a new Vec2
1879	Creates a quaternion .
1880	Creates a new vector .
1881	Create a snackbar container
1882	Create a snackbar .
1883	Returns a copy of the options .
1884	Create a Snackbar instance
1885	Creates a Transform object .
1886	Creates a Triangle
1887	Returns true if the given string matches the given pattern .
1888	Execute a glob pattern
1889	Creates the options for the given pattern .
1890	Get the path of the bash shell .
1891	Memory driver
1892	Calculates the cost of all items in the given list
1893	Recursively walk a node
1894	Set the arguments .
1895	Invokes the callback function .
1896	Iterate over an array of items
1897	Apply the given array to the given array .
1898	Set the selected dates
1899	Start the server
1900	show success info
1901	Log a request .
1902	Add a property to an interface
1903	Initialize the token
1904	Send a request to the API .
1905	Get the access token
1906	returns an error
1907	Create a new address book
1908	Edit an address
1909	Remove address book
1910	Get address info
1911	Get emails from book
1912	Add email addresses
1913	Get email info
1914	Get the cost of a book .
1915	List campaigns
1916	Get book info
1917	Campaign statuses
1918	Get campaign stat by ref .
1919	Create a campaign
1920	Add a new sender
1921	Activate a sender
1922	Get sender activation mail
1923	Get email info
1924	Remove email from all book
1925	Get email stats by campaign
1926	Add email to blacklist
1927	Remove emails from blacklist
1928	Get email info by id
1929	Minify a file
1930	Write a file to the output path
1931	Create a cookie
1932	Set cookie value
1933	Get cookie value
1934	Delete a key
1935	Removes all keys from the map
1936	Convert a function to a function .
1937	Clone a gallery item
1938	Uploads a file
1939	Delete a file
1940	Setup dispatch handler .
1941	Returns the next date .
1942	Delete a service
1943	Request an action .
1944	Get Identifier
1945	Initiate integrations .
1946	Convert a schedule to an action
1947	Fetch a single item
1948	Send a request to the adapter
1949	Create a schema schema .
1950	Creates a new mapping .
1951	map from service
1952	Reads the tail of the queue .
1953	Returns the length of the tails of the buffer .
1954	Prepare pipeline .
1955	Cast the query parameters to an object
1956	Setup queue .
1957	Get meta data
1958	Set an action
1959	Set meta data
1960	Export to JSON schema
1961	Make a reference to a ref .
1962	Checks if the value is a valid card
1963	Find an option in the given choice
1964	Checks if a code constraint is a code constraint .
1965	Expire an item
1966	Transform a range into a string
1967	transformRangeAnchor converts a range to a range
1968	Returns true if the given endpoint matches the given endpoint .
1969	Create a new action .
1970	Authorize request .
1971	Create a request from an action
1972	Get service from schemas
1973	Synchronously synchronously sync data
1974	Creates a new instance of gulp .
1975	Creates a new color
1976	Creates a new instance .
1977	Map to service endpoint
1978	Process message body
1979	Creates a new proxy .
1980	Matrix matrix matrix .
1981	Convert a string to a URL
1982	Write an item to a JSON file .
1983	Write the source code to the file
1984	Write a labeled item
1985	Creates a new node .
1986	Creates a text node .
1987	Creates a new ElementNode .
1988	Creates a new instance of the class .
1989	Distribute the content of a file .
1990	Determine the takeout of takeout
1991	Parse line by line
1992	Commonality interface .
1993	Constructs a CommanalityMatrix .
1994	Creates a new ArrayVector
1995	Build an attribute matcher
1996	Returns true if the given element is a container .
1997	Returns the common parent of the given element .
1998	Parse style string
1999	Returns the distance between two nodes .
2000	Lexer .
2001	Initialize the parser .
2002	Creates an error .
2003	Creates a new variable .
2004	Create a new lexer .
2005	Parses a token .
2006	Create a new node .
2007	Creates a new token .
2008	Captures the given type .
2009	Creates a node .
2010	Parses the given string .
2011	Call the callback function .
2012	Iterate over the input .
2013	Parse a file .
2014	Notify the hook .
2015	Pause the request .
2016	Resume a paused pause
2017	Create a temporary directory
2018	Copy a string into a string
2019	Parse a simple string .
2020	Get the base config
2021	Post notification .
2022	generate username
2023	Link success callback .
2024	Link token to provider
2025	Handles OAuth error handling
2026	Token auth error handler
2027	Register provider .
2028	Register OAuth2 provider .
2029	Register a token provider
2030	Handles authentication .
2031	Creates a callback for the given provider .
2032	Creates a callback for the given provider .
2033	Get provider name from pathname
2034	Get provider token from pathname
2035	Checks if the user has a role
2036	Gets the location of the layer .
2037	Defines a map to a map
2038	Update all layers
2039	Add layers to the map
2040	Remove all layers from the map
2041	Gets the bounding box .
2042	Iterate over all markers in this group .
2043	Determine if a layer contains a given layer .
2044	Add a new layer to the map
2045	Remove the map from the map
2046	Remove an object from an array
2047	Add a new cluster
2048	Gets all children of this node .
2049	Sets the bounds of the cluster .
2050	Add a new marker to this node .
2051	Called when the slider is clicked .
2052	Add a new marker to the map
2053	Remove a layer from the map
2054	Add a marker to the map
2055	Interpolate path
2056	Returns an array of pages for the given index .
2057	Creates a new template engine .
2058	Properties of a job .
2059	Creates a new Worker .
2060	Handle drag events .
2061	Returns the index of the given value .
2062	Constructor for Tor .
2063	Returns a list of included files .
2064	Returns a list of default paths .
2065	Gets the list of package arguments .
2066	Gets the list of bowerjs arguments .
2067	Get the main field as an array
2068	Constructor for Tor .
2069	Run the given input file and return the results .
2070	Shutdown the device .
2071	Set the scan limit .
2072	Set the brightness of a device .
2073	Clear the display .
2074	Display a number .
2075	Generate example code
2076	Configure the given options .
2077	Check if a file exists
2078	Initialize the server .
2079	Recursively adds a path to the current location
2080	Removes deprecation from cycles .
2081	Creates a new series .
2082	Called when a value is read
2083	Finds and deletes the value of the given value .
2084	Finds and deletes all elements in target .
2085	Initialize the influxDB .
2086	Creates a new handler for a given message .
2087	Start the usage report .
2088	Creates a new reporter .
2089	Build options .
2090	Build the commands .
2091	Router constructor
2092	Get the default port by protocol .
2093	Removes all scripts from a node
2094	Returns the index of the given object .
2095	Returns a list of all elements of the given node .
2096	Get the value of a node .
2097	Checks if a variable is modified .
2098	Configure the config
2099	Returns whether the given string is escaped .
2100	Replace the string with the given matcher .
2101	Replace a string with the given matcher
2102	Send a message to the server
2103	Parses a message .
2104	JWT constructor
2105	Create a new token
2106	Set the cookie
2107	Returns the current state of the request .
2108	Verify that the token is valid .
2109	Creates a JWT with the given secret and options .
2110	Registers a JWT .
2111	Setup the component
2112	Create module factory
2113	Constructs a consulient endpoint .
2114	Handles incoming requests
2115	Handler for output handler
2116	Sets the selected category .
2117	Sets the scroll position .
2118	Create a Service
2119	Characteristic constructor .
2120	Migrate the schema to the database .
2121	Migrate database version .
2122	Normalize fetchBeforeObjectStores .
2123	Checks that the schema descriptors are valid .
2124	List records .
2125	Normalize a compound key path
2126	Iterate over the cursor .
2127	Handle cursor iteration .
2128	Fetch all records from an object store
2129	Fetch records from objectStore
2130	Write data to file
2131	Run a transaction .
2132	Convert a cursor direction to a native cursor direction .
2133	Create an index
2134	Fetch next page
2135	Execute an event listener
2136	Resolve the state of the instance .
2137	Run a query .
2138	Inserts a record into records .
2139	Find the index of a record in the records array .
2140	Prepare the query for the query .
2141	Prepare sorting algorithm .
2142	Prepare the filter for the given filter .
2143	Selects the storage for the given storage .
2144	Prepare the ordering specification for the query .
2145	Open a database connection .
2146	Handle connection error .
2147	Executes the given migrations .
2148	Splits a filter and compiles it into a single object .
2149	Returns a list of field paths .
2150	Set the value of a field .
2151	Returns the value of the given field .
2152	Upgrade the database schema .
2153	Creates a container .
2154	Creates the main section .
2155	Initialize a client .
2156	Class constructor .
2157	Creates plain text .
2158	Render a JSON array
2159	Render JSON error .
2160	Write a chunk .
2161	End the file .
2162	Cleans up the socket .
2163	Called when an error occurs .
2164	Removes all files from a directory
2165	List all boilerplate files
2166	Get the session data
2167	Create a new request
2168	Updates the packet .
2169	Creates a new Date object .
2170	Fetch data for a given request .
2171	Creates a new OGR image .
2172	Add csv params
2173	Add shapefile parameters
2174	Watch a schema file .
2175	Perform a purge request
2176	Creates a new Akamai purge chain .
2177	Mocks base method
2178	Iterate over the given object .
2179	Creates a deep copy of a source object .
2180	Creates a new instance of an object
2181	Merges the given property into destination .
2182	Merge properties from source to destination .
2183	Merge properties from source to destination .
2184	Mixins and mixins
2185	Creates a new directory with the given directory .
2186	Get the deployed revision of a system .
2187	Create a system .
2188	link system
2189	List containers .
2190	Fetch a single container
2191	Builds all containers for a given revision .
2192	Loads targets from the system .
2193	Creates a new revision and deploy it
2194	Publish a revision
2195	List revisions .
2196	Get the revision for a given identifier .
2197	Compile a system
2198	Commit a system
2199	Finalize the source report
2200	Injects the application code
2201	Fixes the files
2202	Find files in a directory
2203	Loads all files in the registry
2204	Write the resolver .
2205	build a container
2206	Finds a container by its identifier
2207	Set the app consts .
2208	Fetches the system s system .
2209	Register a system .
2210	Remove a user from the system
2211	Initialize the component .
2212	Processes the DOM element
2213	Add a child .
2214	Removes a child .
2215	Add a child to this element .
2216	Generate a template
2217	Checks if the system is valid
2218	Create a new repository .
2219	Register a system .
2220	Removes a system from the system .
2221	Write a file to the filesystem
2222	Get the revision of the system .
2223	Get the revision of a repository .
2224	Get the version of the given revision .
2225	Check if the repository exists
2226	Get the deployed revision of the system .
2227	Get the revision id for the given identifier .
2228	Configure the environment for the given base config .
2229	Returns a list of targets .
2230	Create a new relation .
2231	Add a sub - model type to this model .
2232	Add a relation to the model .
2233	Adds a relation to the model .
2234	Initialize the model .
2235	Create a new relation .
2236	Returns a collection of collections .
2237	Returns the type of the model .
2238	Returns the id of the given item .
2239	Returns the object associated with a given item .
2240	Unregister a model .
2241	Add a new relation to the database .
2242	Remove a model from the collection .
2243	Checks if this relation is a relation .
2244	Removes all related relations .
2245	Set the key contents of the model .
2246	Adds a model to the collection .
2247	Create a new relation .
2248	Sets the keys of the collection .
2249	Get a list of models .
2250	Returns the value of this model .
2251	Create a new model .
2252	Creates a new XSDatX object .
2253	Bitmap constructor
2254	Converts a value to a canonicalized object .
2255	Returns the empty representation of the given value .
2256	Calculate the number of words in the doc .
2257	Compile the js module
2258	Creates a function that raises an error
2259	Creates a new EventEmitter .
2260	Callback for processing
2261	Creates a Template instance .
2262	Creates a new function that can be invoked by the given rate .
2263	Get data from program
2264	Secure webhook endpoint
2265	POST POST request
2266	Verify that the request is valid .
2267	Update the refs .
2268	Initialize DockerCmdManager
2269	Recursively drill down the given object .
2270	Print a list of tasks .
2271	Format a column
2272	Creates a new TaskDoc .
2273	Creates a logger for logging .
2274	Check if item is a promise .
2275	Checks if a callback is a callback .
2276	Creates a new race .
2277	Define a task .
2278	Creates an await .
2279	Set a new timeout
2280	Handle the timeout event handler .
2281	Runs the given function .
2282	Runs a loop until it is reached .
2283	Reset the context .
2284	Register a hook
2285	Get tag by name
2286	Checks if a file is a whitelist .
2287	Construct a new SevenSegment .
2288	Callback for change
2289	Initialize removeObserver
2290	Parse property chains .
2291	Parses a function .
2292	Parse brackets .
2293	Add references to expression
2294	Creates a new promise .
2295	Asserts that the given error is thrown .
2296	Bind arguments .
2297	Get an array of exceptions .
2298	Determines if the left of the left of the left of the left and right parentheses .
2299	Determine if the left of the left of the left and right .
2300	Determine if the left and right whitespace of the left and right .
2301	Determine if the left and right whitespace is rejected .
2302	Define a configurable property
2303	Converts an argument to an integer .
2304	Converts an argument to a length .
2305	Creates an array iterator
2306	Creates a promise for resolving reactions .
2307	Get capabilities executor .
2308	Creates a new promise handler for the given promise .
2309	Creates an event from the given sequence .
2310	Called when an event is clicked .
2311	Reports if the given token is a trailing space .
2312	Reports the required space for the given token .
2313	Reports that the given token is required .
2314	Generate destination location
2315	Get the value of a key from the hash parts .
2316	Gets the git authors
2317	lookup github login
2318	Unpack output message .
2319	Calculate the RSA key
2320	Create a new RSA key .
2321	Called when the command is executed
2322	Checks if the node is installed .
2323	Install the package
2324	Prompts to the latest version
2325	Called when the node is installed
2326	Get a list of available versions
2327	Run the local install .
2328	Properties of a subject .
2329	Creates a DeferredSubject .
2330	Properties of a Promise .
2331	Get a value from the store .
2332	Recursively resolve references
2333	Format a string .
2334	Format an object .
2335	Export public key .
2336	Returns the primary version of the metadata .
2337	Format a map .
2338	Load an object from the store
2339	Merge the cache control control .
2340	Generate the expiration time for the given headers .
2341	Generate response headers .
2342	Checks if the object has expired .
2343	Format a set of values .
2344	Format an array .
2345	Reset data
2346	Serialise the given data into a JSON object .
2347	Splits data into an array
2348	Constructor for subject subject .
2349	Initialize a user .
2350	Initialize the source files .
2351	Create a new folder
2352	Copy the source directory to a temporary directory
2353	Replace the old file and replace it with the new content
2354	Converts the given path to a file name
2355	Parses the given path to the temporary directory
2356	Replace the content of the content with the given content .
2357	Creates a new directory .
2358	Scan text into tokens .
2359	Authenticate Keystone client .
2360	Find all parents
2361	Find the direct children of a class
2362	Generates a list of classes from a list of classes .
2363	Creates a list of classes for the given classes .
2364	Called when a class is loaded .
2365	Create a new Tag object
2366	Handle an option .
2367	Create a new Error object .
2368	Create a ChildAndParentRelationship relationship .
2369	Create a new ArtifactMetadata instance .
2370	Create a FeatureSet instance
2371	Get cookie from cookie
2372	Add a function to the publisher
2373	Create a ChangeInfo object .
2374	Create a new git repository
2375	Push a branch to the repository
2376	Run async synchronously .
2377	Run async function .
2378	Create a Comment object .
2379	Watch a directory .
2380	Add a directory to the list of files
2381	Start watching files .
2382	Checks if the directory is valid
2383	Notify the given path .
2384	Decorator to decorate a function .
2385	Create a mock instance
2386	Move time to the current time .
2387	Create a new scheduler
2388	Get unscheduler for a given id
2389	Runs all scheduled schedules .
2390	Start GC .
2391	Name of NameFormInfo
2392	Initialize OAuth2 .
2393	Check if value is in range
2394	Insert an item into the list .
2395	Validates a token .
2396	Event constructor .
2397	Creates a new parser .
2398	Returns a FeedbackInfo instance
2399	Reserve a reservation
2400	Properties of SearchInfo
2401	Asynchronously iterates over an array of elements .
2402	Safely call a function .
2403	Invokes the given function .
2404	Removes a set of elements from an array .
2405	Uniqify a set of elements
2406	Create a cache instance
2407	Recursively memoize a pattern
2408	Multiply multiple elements .
2409	Checks if the node is a block .
2410	Initializes the given pattern .
2411	Wrap an array of strings
2412	Formats the given character .
2413	Checks if two strings are padded .
2414	Create a new instance of Extglob .
2415	Matches a list of patterns matching the given patterns .
2416	Sync the contents of a source
2417	Creates a stream from a source
2418	Generate tasks from source
2419	Returns a list of tasks .
2420	Generates a list of tasks from the given patterns .
2421	Convert a list of patterns to a list of tasks .
2422	Returns a list of non - negative patterns .
2423	Groups patterns by baseDirectory .
2424	Convert a list of patterns to a task group .
2425	Finds a list of patterns that match the given pattern .
2426	Convert a pattern group to a task group .
2427	Checks if an entry matches a regular expression .
2428	Remove all entries from the cache
2429	Loads a file from a file
2430	Writes the object to disk .
2431	Load a document from cache
2432	Remove document from cache
2433	Sets the value of a given key .
2434	Fetches the next link
2435	Match files matching patterns .
2436	Match files .
2437	Check if filepath matches pattern
2438	Checks if a file matches a pattern .
2439	Check if a file matches a pattern .
2440	Match keys in an object
2441	Matches a pattern .
2442	Convert a glob to a regular expression .
2443	Wrap a glob
2444	Convert globals to regex .
2445	collapse string
2446	Exponential exponential expression
2447	Splits a string into an array .
2448	Filter an array of elements .
2449	Extract a string from a string .
2450	Wraps a string with prefix .
2451	Convert a pattern to a regular expression .
2452	Copy a value into the object .
2453	Recursively advance to the next token .
2454	Basic source map
2455	Compares the mapping of mapping strings .
2456	Compares the mapping between two mapping positions .
2457	Computes the source URL .
2458	Corked request .
2459	Clears the buffer .
2460	Properties of a node .
2461	Append a value to the compiler .
2462	Class constructor .
2463	Creates an error .
2464	Registers a compiler .
2465	Parse AST nodes .
2466	Parse Parser .
2467	Register a new parser .
2468	Add a new token
2469	Removes the given type from the stack .
2470	Returns the last node of the given node .
2471	Parses the given string .
2472	Registers a new token .
2473	Returns the next token .
2474	Returns the next token .
2475	Parse a string .
2476	Mixin compiler .
2477	Write the end of the buffer
2478	Convert range to string
2479	Add a function to the app .
2480	Wraps the given function .
2481	Returns a memoized function for a function .
2482	Creates a proxy for a given object .
2483	Creates a sub - register .
2484	Register a directory
2485	Update the container status
2486	Lists all files in a directory .
2487	Reads a directory structure .
2488	Convert a property name to an attribute
2489	Generate command commands
2490	Constructor for Limon
2491	Creates a task planner .
2492	Sets the color of a pixel
2493	Reset the strip
2494	Create a new definition
2495	Register a new language
2496	Creates a new promise .
2497	Apply a set of arguments .
2498	Call a set of objects
2499	Creates a new promise .
2500	Creates a new promise .
2501	Creates a new promise .
2502	This method is called when a performer is received .
2503	Creates a new instance of the given schema .
2504	Creates a new rule .
2505	Creates a list of breaks for each breakpoint .
2506	Destroy the resource
2507	Load the server configuration .
2508	save config file
2509	Get server options
2510	Get all resources in the store
2511	Convert url to url
2512	Determine if a ray is in a circle
2513	Get the URL for a tiebreak preference .
2514	Fetch a single resource
2515	Class constructor
2516	Get parameter names from function
2517	Get changed properties
2518	Updates the model .
2519	Find by class name
2520	Submits a template to a template
2521	Create a signature for the given parameters .
2522	Returns the next color of the given index .
2523	Update node color
2524	Update the main control box
2525	Sets the center of the graph .
2526	Determines if all nodes are fixed
2527	Fills all nodes in the target node .
2528	Find element by node
2529	Get the coordinates of an element .
2530	Get a SVG element from an element type
2531	Hide node context menu
2532	Checks if two nodes are connected .
2533	Called when a control is clicked
2534	Update the control level
2535	Called when the control menu is clicked .
2536	Called when a control is clicked .
2537	Called when the control table is clicked .
2538	Called when a control is clicked
2539	Hide node context menu
2540	Hide the context menu context
2541	Called when a node is clicked .
2542	Called when a node is clicked .
2543	Resize the graph .
2544	Called when the node is ticked
2545	Recursively recycle the graph
2546	Reverse graph links
2547	Updates the menu menu
2548	Updates the control table
2549	Updates the table ui .
2550	Calculates the zoom of the graph .
2551	Get window width
2552	Creates a new css checkbox
2553	Respond to success
2554	Handles a failure .
2555	Creates a new request .
2556	Create a new http server
2557	Setup the server
2558	Attach an event to an element
2559	Create a reply .
2560	Serve git file
2561	Processes a list of files
2562	package module
2563	Ebus constructor
2564	API client .
2565	Returns the first index of the given value .
2566	Get the scope url for the division
2567	Create a Customer object
2568	Creates a copy of an object
2569	Format a message with options .
2570	Create a zip archive
2571	Extracts a zip file from a source file
2572	Create a tarball archive
2573	Convert a file to a tar archive
2574	Make a directory .
2575	Iterate over the given stack .
2576	Iterate over the given filepath .
2577	Iterate over the given entity .
2578	Checks if file is a file .
2579	Checks if value is empty
2580	Handles click event .
2581	Constructs a ShellStream
2582	Creates a new instance
2583	Set the properties of this object
2584	Generate a binary representation of this object
2585	Generate a hash
2586	Creates a new instance of the macro
2587	Compiles the contents of the given contents .
2588	stream mode mode
2589	Called when the file is decoded .
2590	Create a journal .
2591	Log creation event .
2592	Log an execution event .
2593	Write event list to log file
2594	Get the URL for a team center
2595	Creates a new ArticleTranslation .
2596	Creates a macro action .
2597	Map obj to target
2598	Iterate over a list of items .
2599	This is a helper function that will be used for debugging .
2600	Gets the index of a primitive .
2601	Loads the given xhr request .
2602	Add a new file to the list of files
2603	batch forms
2604	Parse JSON string
2605	Get the URL for the given options .
2606	Reconnecting WebSocket
2607	Returns the first index of the first occurrence of the given array .
2608	Write path to parent directory
2609	Checks if the main files are valid .
2610	Class constructor .
2611	Add an object to the list
2612	Generate a chunk of items .
2613	Get a property name .
2614	Append the object to the index
2615	Returns a string representation of the property .
2616	Generate a new factory
2617	Generate code for the factory
2618	Returns a function that returns the value of the given instance .
2619	getter for property
2620	Creates a client .
2621	Create an image loader
2622	Load images from images
2623	Loads an image
2624	Convert images to src
2625	Sort images
2626	Build a builder for the given environment name .
2627	Validate an ID
2628	get uniques
2629	Set the function definition .
2630	Set the callback .
2631	Creates a Case .
2632	Create a Resource
2633	Returns a container slug for a resource .
2634	Returns a list of all files in the container
2635	Reads the contents of a chapter .
2636	Create a new container .
2637	Open a container
2638	Inspect a container
2639	Creates a new user preference .
2640	Returns an instance of the updater .
2641	Updates the AST .
2642	Gets the annotated node .
2643	Returns the location string for the given line .
2644	Creates a macro .
2645	Quick sort function .
2646	Calculates the pivot of an array .
2647	Partition an array .
2648	Sorts an array of elements .
2649	Search for a page
2650	Create a pipe stream .
2651	Wrap the methods of the process
2652	Connect to stdout
2653	Add error handlers to pipeline
2654	Resolve routes .
2655	Build a function from a resource
2656	Get the api key
2657	Get a resource
2658	Sign a message
2659	Hash a message
2660	Add signature headers to the request .
2661	Wait for a variable to be provided .
2662	Wait for an attribute to be present .
2663	Updates the current view
2664	Hide the view
2665	Merge all objects into an object
2666	Parse a quality value
2667	Get the brightness of a hexadecimal color
2668	Check if a command exists .
2669	Executes a command .
2670	Initialize dynamic versions
2671	Change all versions of the page
2672	Adds the settings for the given entry .
2673	Render an article
2674	Reset article .
2675	Load Google Fonts
2676	Sorts the elements by the given order .
2677	Creates a new NgInject .
2678	Check if the model has a model
2679	Get the scope URL for the user .
2680	Process a node .
2681	Create a new application .
2682	Ensure that the assertion is present .
2683	Creates a new company .
2684	Extracts an annotation from an AST .
2685	Gets the annotation candidates for the given node .
2686	Follow the given node .
2687	Shutdown the server
2688	Transforms the request body .
2689	Returns the number of characters in the given string .
2690	Create a colgroup
2691	Checks if a string is a short date .
2692	Check if a call expression is a require expression
2693	Subscribe to an event
2694	Create a git repository .
2695	Retrieves the public key from the given signature .
2696	Calculate the recovery parameter for the given curve .
2697	Add permissions to the user .
2698	Set permissions .
2699	The DAO implementation .
2700	Model constructor .
2701	Proxied model .
2702	Create a model proxy for a model .
2703	Get the target object from the model .
2704	Detect the destination type .
2705	Generate a random color
2706	Apply a function to the color
2707	Get the color of a pixel
2708	Set the color of the current color
2709	Creates a new PNG image .
2710	Write a PNG file to a stream
2711	Convert PNG image to PNG
2712	Returns true if two arrays are equal .
2713	Assert that the given function is a promise .
2714	Determine if the filepath is ignored .
2715	Render input prompt
2716	Calculates the color for the selected color
2717	Render errors .
2718	Get a REST response
2719	Performs a PUT request .
2720	Map a schema to a map .
2721	Create a YAML schema .
2722	Load yaml file
2723	Load theme .
2724	Load a theme from the given props
2725	Write data to destination
2726	Initialize the configuration .
2727	Redact the theme
2728	Writes the contents of a file .
2729	Returns a string representation of a map .
2730	Convert an object to a string
2731	Parses a value .
2732	Generate a random GUID
2733	Print an object property .
2734	Generates an array of values .
2735	A REST response
2736	Iterate over the given map .
2737	Register a component .
2738	Convert a component to a component .
2739	Run the JNS command
2740	Serialize a node .
2741	Get an attribute from the DOM .
2742	Initialize the schema .
2743	Inserts the given Sorters .
2744	Adds a sort to the list
2745	Removes a set of Sorters .
2746	Finds the first item in the collection .
2747	Set the value of an attribute .
2748	Checks if the input is checked .
2749	Focus the current element
2750	Removes the blur .
2751	Set the selection range
2752	Convert date to string
2753	Applies the given interval to the given interval .
2754	Calculate the difference between two dates .
2755	Converts a date to a date .
2756	Returns the options for the given message type .
2757	Parse a message type .
2758	Generate stdout .
2759	Assign options to the default options
2760	Loads all pages from the given paths .
2761	Write the result to the output stream .
2762	Creates a new function with the given parameter .
2763	Check if the browser is running
2764	Install the driver
2765	Initialize the browser
2766	Run mocha test
2767	Ends the session
2768	Updates a job .
2769	Finish the grunt task
2770	Render a response
2771	Merge a value into an option .
2772	Merge the given options into the options object
2773	Checks if the given key matches the given key .
2774	Converts a source object to an object
2775	Add reducers .
2776	Removes the given type from the given scope .
2777	Replaces the reducers with the given scope .
2778	Convert value to integer .
2779	Writes an error message .
2780	flush messages
2781	Get config from file
2782	Check if file is ignored .
2783	Extracts styles from src .
2784	Read the precommit hook .
2785	Loads a list of file checkser plugins .
2786	Removes a class from the DOM .
2787	Add a class name to the DOM .
2788	Sets the size of the image .
2789	Get the style of the given property .
2790	Set a property value
2791	Returns the view size of the element .
2792	Returns true if the element is transparent .
2793	Print the number of files .
2794	Encode a string
2795	Decode a string
2796	Generate a nonce
2797	Convert parameters to a header string
2798	Generate signature base string
2799	Calculate the signature of the application .
2800	Sets the values of this widget .
2801	Gets the values of the slot .
2802	Add translation .
2803	Sets the pressed buttons .
2804	Add new buttons to the list
2805	Sets the selected value .
2806	Construct a new RPC .
2807	Creates a new Channel
2808	Creates a continuable .
2809	Extract the description from the given description .
2810	Add a comment .
2811	Expect a keyword .
2812	Parse an array of elements .
2813	Parse a property expression .
2814	Parse postfix expression
2815	Parse unary expression .
2816	Recursively reinterpret an expression .
2817	Parse an expression statement .
2818	Parse a return statement .
2819	Extend properties to an object .
2820	refresh text
2821	Checks if a file is absolute .
2822	Repeat a string .
2823	Return a set of elements in an array .
2824	Prints the error message .
2825	Wrap a shell command .
2826	Writes a directory to disk
2827	Recursively mkdir recursively
2828	split path
2829	update stdout
2830	format arguments
2831	Construct a GNTP server .
2832	Create a new Growly instance
2833	Creates a new command .
2834	Returns the difference between two arrays .
2835	Returns the next token .
2836	Parse an identifier .
2837	Assigns a destructuring value .
2838	Returns an Assertion .
2839	Checks if the given object is an object .
2840	Initialize a command .
2841	Evaluate nargs .
2842	Set config options
2843	Extend aliases .
2844	Checks if the given key is an alias .
2845	Guess the type of the given key .
2846	Returns the maximum width of the table
2847	Normalize aliases .
2848	Returns a string representation of the given value .
2849	Find attribute value by name
2850	Get all passports
2851	Write a string to a file
2852	Create a directory .
2853	Checks if a directory is empty
2854	Construct a DatabaseDefinition instance .
2855	Redirect to the action
2856	Construct a GrelRequest object
2857	Handle a response .
2858	Split the content of the header .
2859	Scroll to the current position
2860	Scroll to the container
2861	Scroll to the current position
2862	Creates a new element .
2863	Add a list of actions
2864	Returns a string with the given number of characters .
2865	Upload a file to a file .
2866	Download a file transfer .
2867	Adds a filter to the collection .
2868	Iterate over all items in the map
2869	Returns a new collection of items in the collection .
2870	Remove an item from the map
2871	Remove items from the collection
2872	Returns the index of the given item .
2873	Checks if an item contains a given item .
2874	Returns a range of items .
2875	Returns the first occurrence of the given function .
2876	Returns a copy of this collection .
2877	Set the title of the month
2878	Set the year text
2879	Calculates the slots for the calendar
2880	Creates a column for the given name .
2881	Checks if the user has a public role
2882	Get the back button text
2883	Creates a new ghost element
2884	Plugin plugin .
2885	Default map function .
2886	Schedule a job
2887	Define a type .
2888	Undefine a type .
2889	Checks if the given type is valid .
2890	Returns the names of all registered types .
2891	Checks if a comment is a license .
2892	Get the value of a path .
2893	Loads the settings from a file .
2894	Returns the size of the given size .
2895	Returns the data for a form
2896	Returns the width of the window .
2897	Returns the orientation of the element
2898	Creates a new observable .
2899	Start the start event
2900	Compares two arrays .
2901	Compare two arrays .
2902	Convert a JSON object to an object .
2903	Sorts an array of items .
2904	Sorts the given mapping .
2905	Apply a function to the given function .
2906	Detect device classes .
2907	Detect window width
2908	Write CSV data to CSV
2909	Insert an array at the end of an array .
2910	Removes all models from the model .
2911	Removes a model from the collection .
2912	Returns true if the current path is the root of the URL .
2913	Get the template data for the given view .
2914	Clears the template cache .
2915	Clears the cached template for the given template .
2916	Clears the template cache .
2917	Copy a cache entry
2918	Create a template cache
2919	Update JSON data cache
2920	Register a cache alias .
2921	Returns true if the given error is a declarative error type .
2922	Create a custom error type
2923	Returns a callback for the given name .
2924	Add a command .
2925	Sets an event handler for a given type .
2926	Iterate over the events of the given entity .
2927	Add a callback to the promise .
2928	Removes the view from the view .
2929	Clears the view .
2930	Adds a region definition .
2931	Adds a region .
2932	Remove all registered regions
2933	Remove a region
2934	Load a template from the cache .
2935	Returns the compiled template .
2936	Render a template
2937	Extract the template helpers .
2938	Bind events to the model .
2939	Sets the events for this view .
2940	Delegate events .
2941	Destroy the component .
2942	Initialize the bindings .
2943	Trigger the event .
2944	Returns an array of child views .
2945	Serialize the collection .
2946	Render the template
2947	Listen to the collection .
2948	Adds a child to the collection .
2949	Resort the view s children .
2950	Render the collection .
2951	Add a new child view
2952	Returns a list of models added to the collection .
2953	Render the empty view .
2954	Add a child view
2955	Render a child view
2956	Render the view .
2957	Create a new child view
2958	Removes a child from the list .
2959	Gets the DOM fragment .
2960	Inserts a child view .
2961	Searches for a child view .
2962	Destroy the collection .
2963	Remove all child views .
2964	Listen to the collection .
2965	Serialize the model .
2966	Renders the view .
2967	Render the template
2968	Initializes the ViewView .
2969	Render the view .
2970	Destroy this item
2971	Add a list of regions
2972	Initializes the regions .
2973	Initializes the region manager .
2974	Returns the behavior for the given options .
2975	Parse a list of behaviors .
2976	Set the handler for the given behavior .
2977	Add a behavior to the view .
2978	Handle a route
2979	Create a new module .
2980	Initializes the regions .
2981	Initializes the region manager .
2982	Initialize the channel
2983	Stop the module .
2984	Add a module definition .
2985	Adds a definition to the module .
2986	Get the name of a function
2987	Returns the path of the path .
2988	Move the entry to the directory .
2989	Gets the parent directory .
2990	Recursively create a directory
2991	Retrieves the directory for the given path
2992	Write a file entry to disk .
2993	Returns a copy of an object .
2994	Called when the node is closed .
2995	Create a new MultiKeyCache
2996	Creates a new pipe .
2997	Creates a raw HTML tag .
2998	Create a complex template for the given template language .
2999	Get template language constructor
3000	Define a model .
3001	Creates a new model .
3002	Create a Point instance
3003	Sets the current tab of a tab bar
3004	Creates a new Point object
3005	Calculate the intersection of a line segment .
3006	Sets the Steroids socket .
3007	Called when a timeout is received .
3008	Returns the width of the given string .
3009	Merge the given source and destination .
3010	Copy source to destination .
3011	Add a property to the tracker
3012	Add a method to the tracker .
3013	Convert an object to a property list
3014	Constructs a SyncProxy
3015	Sets the content of the block .
3016	Convert attributes to an object
3017	Updates the current node .
3018	Initialize block initialization .
3019	Create a new block
3020	Creates a customizer customizer .
3021	Wrapper around the wrapped function .
3022	Iterate over the given options .
3023	Updates the value of the given property .
3024	Called when a lifecycle is destroyed .
3025	Called when the block is inserted .
3026	Removes a property from an object .
3027	Converts a hash to a hash
3028	Converts hash to camelCase properties .
3029	Returns a list of all the keys of a hash .
3030	Returns the results of a selector .
3031	Returns true if the component matches the given selector .
3032	Creates a new telemetry .
3033	Executes a SQLite transaction .
3034	Get an item by index
3035	create payload
3036	Ensure that the given types are valid .
3037	Assign value to parent
3038	Compare two nodes
3039	Returns a list of child nodes .
3040	Request file system .
3041	Creates a new request
3042	Checks if an error exists .
3043	Create a new package .
3044	Prewatch options .
3045	Add a filter to the list of filters
3046	Remove filters from the list of filters
3047	Wraps the result of the result function .
3048	Returns the result of the wrapped function or the result of the result .
3049	Creates a new Snapshot instance
3050	Converts a string to a string
3051	Create a new object
3052	Generate a unique id
3053	Parse an input stream .
3054	Checks if the given object is valid
3055	validate field fields
3056	Check if a field exists
3057	Check if a relationship exists
3058	Returns the object for the given type .
3059	Given a list of records return the results
3060	Returns true if the given object matches the given object .
3061	Adds the contents of the contents of the given body .
3062	Add top level to the list
3063	Create a Remoting method
3064	Called when a transaction is completed .
3065	Connect to the server
3066	Get transaction object .
3067	Create a new transaction
3068	Converts a transaction object to a JSON object .
3069	Adds a transaction to the queue .
3070	Send a request to the server
3071	This method is called when an action is called .
3072	Performs a request
3073	Add inline block fix
3074	Strip plain text files .
3075	Resolve the webbrains directory
3076	Creates a route .
3077	Transport decorator .
3078	Get a random value from an array
3079	Returns a random number of dinosaurs .
3080	Creates a Response
3081	Set the response body
3082	Send a JSON response
3083	Set the header for the given field .
3084	Parses the response body .
3085	Checks that the arguments are expected .
3086	Checks if the given arguments are present .
3087	Removes the next argument from the argument .
3088	Checks if the given index matches the expected value .
3089	Checks if the given value matches the expected value .
3090	Checks if the given value matches the expected value .
3091	Returns a string representation of the expected arguments .
3092	Checks that the given value is a valid type .
3093	Returns true if the given type is a valid type .
3094	Returns a string representation of the given value .
3095	Returns a string representation of a type .
3096	Generates a URL for a request .
3097	Get state from options
3098	Validate a resource
3099	Prune a string
3100	Attempt to attempt to render a JS file .
3101	Validate an array
3102	Add routes to the route
3103	Generate a random UUID
3104	Generate a random string
3105	Convert a string to a UUID
3106	Converts a string to an ArrayBuffer
3107	Hide the back button
3108	Log a message .
3109	Copy file to destination .
3110	Copy files from source to destination
3111	Replace the match files in the source .
3112	Unlink all files in the given location
3113	Checks if a directory exists .
3114	Checks if a file exists
3115	Returns a list of subdirectories with the given filename .
3116	Maximise path
3117	Returns a list of directories matching the given match .
3118	Compare two numbers
3119	Reduce a list of directories .
3120	Hide menu .
3121	Hide menu
3122	Updates the menu .
3123	Hide menu .
3124	Hide menu .
3125	Initialize the adapter
3126	Get the hierarchy of the configuration
3127	Get the list of backend configurations
3128	Get backend config
3129	Get file from backend
3130	Saves a file to the backend
3131	Get the overrides for the given backend .
3132	Called when a process is done .
3133	Fail if an error is thrown
3134	Get the data from the model
3135	Returns true if the given array contains the given values .
3136	clean up urls
3137	Parse jQuery query
3138	Initialize the tab .
3139	Convert object to string
3140	Get the anchor of the element
3141	Iterate over all items in the collection
3142	Get file entry
3143	Checks if text is present in the element .
3144	Initializes the container .
3145	Initializes the container
3146	Get a list item by index
3147	Creates a new script
3148	Loads a script element .
3149	Load a partial partial file
3150	Convert a record to an array
3151	Add a provider
3152	Removes a provider .
3153	Initialize the application .
3154	Get a controller instance
3155	Adds a new item to the list .
3156	Removes an item from the list
3157	Removes all items from the list
3158	Set the active item
3159	Returns all the items in this collection
3160	Check if the input element is selectable
3161	Converts a number to a number
3162	Convert a value to a number .
3163	Convert a value to a floating point
3164	Log a request .
3165	Convert object to date
3166	Handler for type conversion
3167	Define a route
3168	Creates a route URL .
3169	Create a password hash
3170	Converts a JSON object into an array .
3171	Decorates a node .
3172	Update the current node .
3173	Removes a node from the DOM
3174	Removes all children of this node .
3175	Destroy all child nodes
3176	Creates a new node .
3177	Removes a child node .
3178	Removes all child nodes .
3179	Sorts the list of children
3180	Expand all child nodes .
3181	Collapse this node .
3182	Add a new target to the controller
3183	Create a mask
3184	Generate a unique id
3185	Copy properties from source
3186	Removes all listeners from the DOM .
3187	Add an action .
3188	Remove property from config
3189	Create a new store
3190	Node constructor .
3191	Concatenates an array of strings
3192	Configure the reducer .
3193	Creates a new observable .
3194	Initializes dragstart .
3195	Relative to a relative path
3196	Rebase a file
3197	Look up a level level
3198	Logs to console
3199	Checks if a path is a simple id .
3200	Accept a node .
3201	Checks that the given node is required .
3202	Accept an array of elements .
3203	Compile the input .
3204	Reduce a list of child nodes .
3205	Node constructor
3206	Returns a promise .
3207	Called when the queue is running .
3208	Cancel the queue
3209	Set the values of this record .
3210	Gets all fields from the container
3211	Gets the field s focused field .
3212	Returns true if the point is within the given point .
3213	Executes a command sequence of commands .
3214	Replace references in the given AST .
3215	generate unique name
3216	Replace the class declarations in the AST .
3217	Parse a variable declaration .
3218	Create a new Item
3219	Creates a new instance of an event .
3220	Handle an event .
3221	Sets the pattern for this node
3222	Creates a new element with the given value .
3223	Initializes dhtml xhtml xhtml xhtml .
3224	Sets the data to be updated .
3225	Returns all models of this model .
3226	Get the model at the given index .
3227	Returns the first child of this model .
3228	Get the value of a path .
3229	Returns a list of models matching the given path .
3230	Generate a random token
3231	Reset the user s password
3232	Send a new email to the user
3233	Sort issues .
3234	Deduplicate collaborators .
3235	Extracts the number of sub - task numbers from a super issue .
3236	Format the issues .
3237	Merges the given issues with the given issues .
3238	Create a new sprinter instance
3239	Get the callback for the async callback .
3240	List available adapters
3241	Read config from adapter
3242	Write a config file to the adapter
3243	Render files .
3244	Handle translations .
3245	Get the context for the given context
3246	Render a page .
3247	Returns true if node is a named function .
3248	Returns the config for the given function .
3249	Checks if the given function is a valid function .
3250	Initialize the config object
3251	Bind event map
3252	Set a new delay
3253	Processes the result of the operation .
3254	Set the exception to the exception
3255	Returns the URL for the given request .
3256	Sets the date format .
3257	Sets the value of the picker .
3258	Clone an object
3259	Creates a new ImpulseBinBinBin .
3260	Initialize the component
3261	Add a class name to the list .
3262	Sets the position of the element .
3263	Show the animation .
3264	Set the size of the image
3265	Adds a component to the viewport .
3266	Calculates the alignment of a component .
3267	Set the current alignment info .
3268	Gets the parent component of this component .
3269	Destroy the model .
3270	Go through the list of items
3271	Handles the back action .
3272	Move a node to a leaf
3273	Hoist functions .
3274	Parse vehicle ID
3275	Format details .
3276	Get information about a given ID
3277	Called when a purchase is made .
3278	Purchase a purchase .
3279	Complete the purchase .
3280	Parses a key .
3281	Creates a new instance of sourceFunc .
3282	Called when an event is changed
3283	Returns a list of all values in this group
3284	Sets the value of the checkbox .
3285	Refresh the contents of the store
3286	Extracts the parameters from a string
3287	Initialize the store .
3288	Create a collection of items .
3289	Find an item by the given filter .
3290	Class constructor .
