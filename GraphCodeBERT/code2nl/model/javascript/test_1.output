0	Creates a new Axios instance
1	Cancel token .
2	Returns true if the given value is an ArrayBuffer .
3	Check if the browser environment is standard .
4	Iterate over all objects in an object
5	Append an object to an object
6	Write package manifest .
7	Process a bundle .
8	Try to apply updates .
9	Try to apply updates .
10	Format a message .
11	Pad a number to a number .
12	Parse a segment .
13	Parse segments stream .
14	Parses a qt link .
15	Calculate key provider
16	Generate a random 32 byte buffer .
17	Adds an entropy to the entropy array .
18	Calculate the entropy of the CPU entropy .
19	Decrypts a message using crypto .
20	Initialize entropy .
21	Convert x to BigInteger
22	Verify the given data .
23	Recursively recovers a hash from a string .
24	Find comments in a message .
25	Create a form group .
26	Loads a loader .
27	Create a new ItemContent
28	Creates a table .
29	Creates a RailType .
30	Creates a button group .
31	Create a GridRow .
32	Create a form field .
33	Creates a card content .
34	Create a new Item
35	Generate a Comment Avatar
36	Create a statistic label .
37	Create a feed meta element
38	Create a container .
39	Create a step group .
40	Divider divider
41	Create a header element
42	Creates a new grid .
43	Create a breadcrumb .
44	Creates a card description .
45	Create an ItemGroup
46	Render a GridColumn
47	Create an ItemImage
48	Render a CardGroup
49	Create a table row .
50	Create a feed event .
51	Create a TabPane
52	List content .
53	Creates a button .
54	Create a table cell .
55	Create a breadcrumb divider .
56	Create a new MessageList
57	Create a TableFooter
58	Create a comment group .
59	Render a Reveal .
60	Create a new Segment .
61	Create a placeholder line .
62	Render a RevealContent
63	Create a feed like element
64	Create a placeholder element .
65	An Accordion .
66	Create a placeholder image element .
67	Create a DropdownMenu
68	Creates a ListIcon .
69	Create an Advertisement .
70	Create a StatsGroup .
71	Create a statistic .
72	Create a new segment group .
73	Create a table header .
74	Create a feed .
75	Create a LabelGroup
76	Create a feed extra element
77	Create a DropdownDivider
78	Create a feed summary .
79	Create a step content .
80	Image constructor .
81	Calculate the size of the canvas .
82	set background color
83	Creates a PIX sprite .
84	Draws the body of the body
85	Creates a new object .
86	Creates a page of pages .
87	Checks if an object is a window .
88	Normalizes event handler options .
89	Generate a summary of the docs .
90	Returns a string representation of an item .
91	Define a keyword .
92	Check if the given code is in astral set
93	Transform metadata .
94	Find package name for given filepath
95	Toggle the class with the given name .
96	Convert a source to an array .
97	Creates a JSON document
98	Recursively dedupe an array .
99	Create a Markdown file
100	Flatten the given options .
101	append text to list
102	Compare two nodes .
103	Compare two nodes .
104	Draw all vertices
105	Creates a multiresNode .
106	Rotate a matrix
107	Make a matrix from a matrix
108	Calculate the perspective of a view .
109	Process the loaded texture
110	Checks the zoom level .
111	Rotate a p p p .
112	Determine if the view is in view
113	Called when an image is loaded .
114	Returns the value of the given tag .
115	Handle an error message
116	Clear error message
117	Displays the about message
118	Get mouse position
119	Handles the mouse click event .
120	Handles the mouse click event .
121	Convert mouse event to coordinates
122	Handle mouse move event
123	Called when the mouse is pressed .
124	Called when a document touches the cursor
125	Handles the mouse move event .
126	Called when the mouse wheel is clicked .
127	Called when a document is pressed
128	Called when a document is pressed
129	Change key number
130	Animation function for animation
131	Execute the animation
132	Convert TaitBryan to quaternion .
133	Computes the quaternion of theta .
134	Event listener for orientation
135	Initialize pano image
136	Initialize the rendering callback .
137	Creates the hot spots
138	Destroy HotSpots
139	Render hotSpot
140	Merge the settings from the scene .
141	toggle fullscreen
142	Event handler for fullscreen
143	Converts the hfov to the maximum height of the hfov .
144	Stop animation
145	Loads the UI .
146	Load scene .
147	Stop orientation .
148	Fire an event .
149	Waits for a latch function .
150	Get the offset of the mouse position
151	Convert a value to a float
152	Subtracts a number from another .
153	Returns the difference between two numbers .
154	Get inline resources from string
155	Builds a CSS from a source file
156	Create a formioResourceRouter .
157	Base Producer
158	Context manager .
159	Alternative function for creating a new alternative function
160	Perform a request .
161	Handles the request response .
162	Handles a captcha request .
163	Callback for submitCaptcha
164	Loads assets .
165	Returns the start of the start of the container .
166	Add a function to an object
167	Add a function to an object
168	Copies the template to the given template .
169	Copies the template files to the given directory .
170	Create app name from path
171	Ensure that a directory is empty
172	Exit the process
173	Load a template .
174	Main entry point .
175	create directory
176	Renames an option .
177	Print a warning message
178	Write a string to a file
179	Binds a function to a function .
180	Adjusts the options .
181	Create a devTools middleware middleware .
182	Called when the demo is loaded .
183	Prefix substrings .
184	Creates a canvas .
185	Smooth area
186	Calculates the diagonal area for a pixel .
187	Calculates the diagonal area between two points .
188	Generate a vector for the given patterns .
189	Builds a vector from the target vector .
190	Calculates the delta between two nodes .
191	Calculate the linear interpolation of a vector .
192	Check if the value is valid
193	Reset the element to move to the target
194	Check if the element is active
195	set source control
196	Check if the target control is disabled
197	Check to move to the move group
198	Update scroll position
199	Score text .
200	Calculates the score of a password .
201	Checks if a string is repeated .
202	Initialize the password
203	Create a new LevelUpArrayAdapter
204	Fixes transaction properties .
205	Initialize the transaction data .
206	Represents a TXRejectedError .
207	Creates a new request .
208	Compile Sass .
209	Require a brocfile
210	Run mathmath
211	Read an array of bytes .
212	Handle union selections .
213	Handle selections .
214	Convert column name to AST node
215	Convert a key to an AST node .
216	Strip the query from the query .
217	Splits the selections into a single fragment .
218	Get the node for the given type .
219	Convert an array of data to a connection
220	Validate rows
221	Convert a key object to a WHERE clause .
222	Clones an object to another .
223	Build a string .
224	Concatenate array
225	Convert value to string representation
226	Replace the text with the given placeholders .
227	Create an audio node
228	This method is called when the media is ready .
229	Play the media .
230	Sets the current time
231	Pause the media
232	Get the current time
233	Initialize media capture
234	Stops the media capture .
235	Release the media .
236	Returns the full path to the application .
237	Convert the given URI to an application .
238	Converts a file into an absolute path
239	Convert a URI to a path and filename
240	Context manager .
241	Get unique capabilities
242	Compare two capabilities
243	Determine if the given directory is a directory .
244	Determine the current project root .
245	Delete all files in a directory
246	Find all plugins in a directory
247	Builds hooks runner .
248	Extracts the shebang interpreter .
249	Checks if a given hook is disabled .
250	Initialize the command .
251	Gets the hooks for a hook .
252	Gets the scripts for a hook .
253	Get application hooks from a directory .
254	Get the script scripts from the config file .
255	Gets the script scripts for a hook .
256	Get all plugins for a hook
257	Ensure that the capabilities are unique .
258	Copy a new file to the given project
259	Construct a PluginSpec .
260	Get plugin file path
261	Runs the given command .
262	Get platform engines .
263	Get all plugin plugins
264	Gets the dependencies of a plugin .
265	Creates a replacement for the given change file .
266	Checks that the given plugin is valid .
267	Get the platform information from a directory .
268	Returns the platform name from the given name .
269	Process a message
270	Call engine scripts .
271	Create a package json file .
272	Prepare platforms .
273	Add an icon to the icon
274	Map image resources
275	Finds the launch mode for the given platform .
276	Constructor for AndroidManifest .
277	Assert that the given requirements are not met .
278	Find the version of the given version .
279	List all required requirements .
280	Validate a task
281	Convert a travisYMLYML document to a travisy .
282	Removes a travis YAML lines from the given version .
283	Transform travis yaml into a travis yaml file
284	Checks if a dependency is ignored .
285	Gets the dependency URL for a repository .
286	Extract apis from services
287	Extracts the values from the given attribute .
288	Recursively recursively recursively recursively .
289	Add a numeric reference to the query .
290	Removes numeric references .
291	Add a hierarchical facet .
292	Add a facet to the query .
293	Adds a filter to the query .
294	Adds a refinement to the query .
295	Add a tag to the query .
296	Remove a facet .
297	Removes the given facet .
298	Removes the given facet from the query .
299	Removes a facet from the query .
300	Removes a facet from the query .
301	Removes a facet from the query .
302	Removes a tag reference .
303	Toggle the given facet .
304	Add a facet to the query .
305	Checks if the given facet is refined .
306	Determine if the given facet is excluded .
307	Gets the disjunctive relations .
308	Sets a parameter .
309	Set query parameters
310	Get the breadcrumb of a facet .
311	Run a command
312	Compile the interpreter .
313	Compile shared files .
314	Compile JS code .
315	Compile Wasm .
316	Get plugin state .
317	Helper function for helpers
318	Make a batch from a syncstack .
319	Initiate a configuration module
320	Set default values
321	Get the id of the payload
322	Creates a new instance of vuex .
323	Parse CSV file
324	Parse JSON file
325	Parses a JSON file .
326	Checks that the given values are valid .
327	Invokes a guarded callback .
328	Gets the closest instance from node .
329	Get instance from node
330	Gets the node from an instance .
331	Traverses a traversal between two paths .
332	Creates a prefix map for the given style property name .
333	Class constructor .
334	Gets the composition event type .
335	Checks if the given top level is fallback .
336	Get the value for a property .
337	Gets the target value for the input event .
338	Determines if the top level of the top level of the top level of the top level of the target event .
339	Ensures that the specified event has been registered .
340	Get the document target document .
341	Constructs a select event .
342	Set text content
343	Creates a string representation of the given styles .
344	Append children to container
345	Called when a component is mounted .
346	Computes the unique async expiration for the current time .
347	Convert a JSON string to a string
348	Get the options for a given rule
349	Normalize a rule .
350	Find the parent of a node .
351	Converts a node into an object .
352	Get the offset of the element
353	Get the offset of the element in viewport
354	Returns the current node of the current node .
355	Append the previous node to the tree .
356	Append the current tree .
357	Strip the view from the given selector .
358	Gets the PID from the given pattern .
359	Kill app by pattern
360	Get list of PIDs for a given port .
361	Removes all webSocket handlers from the server .
362	Verify application platform .
363	Checks if a URL is a local host
364	Normalize platform version .
365	Update project file
366	Reset project file
367	Get additional run content
368	Get the WDAUpgrade timestamp for the given bootstrap path .
369	Parse container path .
370	Push file to simulator
371	Pull a remote file from a remote device .
372	pull from remote device
373	Creates a simulator .
374	Get an existing simulator .
375	Gets the list of objects
376	Determine if the collision is intersect .
377	Returns the rotation vector .
378	Creates a new URLSearchParams object .
379	Create a new RequestQueue
380	Create a new MessageTracker
381	Connect to the socket
382	Initialize socket tracker
383	Setup client .
384	Construct a graph from a grid
385	Removes the active CSS class .
386	Iterate over an array
387	Convert an array to a map
388	Creates a new watched file set .
389	Start watch timer
390	Scan template and set token value .
391	Convert a Unicode code point to a UTF - 8 string .
392	Checks for unicode escape characters .
393	Scan JSXx identifier .
394	Get the name of a declaration .
395	Binds the children of a node .
396	Convert node position to string
397	Unescape an identifier .
398	Gets the enclosing block scope .
399	Checks if the given name is a declaration .
400	Checks if the given node is an identifier .
401	Get expanded char codes .
402	Checks if the given span contains a span .
403	Checks if token is a listTerminator .
404	Parse entity name .
405	Finds the highest list element at the given position .
406	Returns the symbol of the given entity name .
407	Resolve entity name .
408	Checks if the given name is a reserved member .
409	Checks if the given symbol is in the export assignment .
410	Get the type of a property .
411	Get the type of a binding element .
412	Get the type of a binding element .
413	Get the type of a variable declaration .
414	Get the type of a binding element .
415	Creates a type from an object .
416	Get the type parameters of a class or interface .
417	Get the base constructor of a class .
418	Checks if the given node is an independent type reference .
419	Creates an instantiated symbol table .
420	Gets the union signatures of a given type .
421	Returns the property of a given object .
422	Returns the type of the given type .
423	Returns the property of a given type .
424	Returns the flags of the given types .
425	Get the type of a class or interface .
426	Get the type of a type alias .
427	Adds a set of types to a set of types .
428	Checks if the given type is a known property .
429	Returns the number of objects related to the given source .
430	Checks if the given type is a generic generic type .
431	Checks if a variable is assigned to a variable .
432	Returns the type of the given type .
433	Returns the type of the given parameter .
434	Gets the actual type for the initializer expression .
435	Apply the given mapper to the given type .
436	Checks if the given type is an index signature .
437	Returns the context for the given object .
438	Get the actual type of an element .
439	Returns the non generic signature for the given type .
440	Returns the signature for the given node .
441	Returns the symbol symbol for the given attribute .
442	Checks if the given property is accessible .
443	Gets the property name for the given index .
444	Get a single call signature .
445	Gets the effective call arguments .
446	Returns the effective argument type of the given node .
447	Get the effective argument type .
448	Gets the effective argument .
449	Gets the effective argument error node .
450	Gets the DiagnosticsHeaders for a given node .
451	Resolve a decorator .
452	Get the signature for the given node .
453	Checks a call expression .
454	Assigns the types of a binding pattern .
455	Checks the type parameter .
456	Get the type of a promise .
457	Checks if the given node is a decorator .
458	Check if a type node is an expression .
459	Checks if the given node is an expression .
460	Checks if node has decorators .
461	Checks if this node has been captured .
462	Checks the initializer of a parameter .
463	Checks if a variable is a variable declaration .
464	Checks if an iterable is an iterable .
465	Check type parameter declaration .
466	Checks if the given node is a source file .
467	Copies a symbol .
468	Get the parent type of a class .
469	Gets the properties of a given type .
470	Gets the referenced export container .
471	Gets the referenced import declaration .
472	Gets the value of the given node .
473	Gets the export default variable name .
474	Emits the source files .
475	Create a temporary variable name .
476	Creates a unique name for a given base name .
477	Encodes the last record map .
478	Creates a temporary variable .
479	Indicates if the given node is a different line .
480	Emits an expression node .
481	Emit a variable declaration .
482	Emit an assignment .
483	Emit a temporary variable assignment .
484	Ensure the given expression is an identifier .
485	Finds a file from a file .
486	Read config file
487	Parses a JSON file into a JSON object .
488	Remove dynamic properties .
489	Gets the information about the given call expression .
490	Selects the best argument for the given candidates .
491	Gets the token at the given position .
492	Finds the token at the given position .
493	Gets the Javascript tag at the given position .
494	Remove quotes from a string
495	Fixes token kind .
496	Checks if a list element is a list element .
497	Finds the closest node within the given range .
498	prepareRangeContainsError returns a function that returns a function that returns true if the error occurs .
499	Checks if the given token is inside a comment .
500	Returns the semantic diagnostics for the given file name .
501	Returns the name of the completion entry .
502	Gets the scope node .
503	Returns true if the object is a member of the given object .
504	Try to get a list of symbols for an import clause .
505	Try to find an object like ObjectLikeCompletionContainer
506	Filter JSXx attributes .
507	Checks if the given node is a write access .
508	Gets the signature help items for a given file .
509	Checks if the given symbol is a value of a value
510	Returns the type of a token type .
511	Gets the parameters from the right side of the assignment .
512	Score the health score .
513	The origin of the origin
514	Translates the drag transform and returns the rotation .
515	Determine if the transition is valid
516	Binds a touch event .
517	Calculate the difference between two times .
518	start touch event handler
519	Get the value of the transform property
520	Set style property
521	Sets the value of an element .
522	Convert a path to a module
523	Get payload from token
524	Sets the active chapter active .
525	Get chapter hash
526	Handle scrolling .
527	Inserts an element at the given position .
528	Create a dropdown menu
529	Create a button
530	Remove a button
531	Removes all buttons from the list
532	Toggle the sidebar .
533	Filter summary
534	Initialize the popup
535	Initialize the sidebar
536	Add a directive
537	Creates a new directive .
538	Toxy constructor
539	Get the index of a config file .
540	Parse a file .
541	Metadata constructor .
542	Check udt types
543	Properties of prepared queries .
544	Constructs a DriverError .
545	Represents a failure error .
546	Create a new connection error .
547	Extend the given options .
548	Validate policy options
549	Validate protocol options
550	Validates socket options
551	Validates the given options .
552	Sets the default pooling defaults .
553	Get a map by name
554	Get the name of a signature type .
555	A frame header .
556	Generate a timestamp .
557	Create a mutable object .
558	Construct a Aggregate .
559	Constructor for Host
560	Creates a ConstantSpeculativeExecutionPolicy .
561	Creates a new MaterializedView .
562	Constructs a DataCollection .
563	Execute a test
564	A table metadata .
565	A schema parser .
566	V2 schema parser .
567	Schema parser .
568	Get a SchemaParser instance
569	Encode routing key .
570	Get js files
571	SchemaFunction .
572	Creates a copy of the given buffer .
573	Fix the stack trace .
574	Log a message .
575	Convert properties to lowercase properties
576	Recursively merges the given object into a target object .
577	Iterate over an array
578	Convert an iterator to an array .
579	Binary search function
580	Inserts an item into an array .
581	Validate a function .
582	Repeat multiple times .
583	Wrapper for PromiseWrapper
584	Create a new PolicyPolicy
585	Creates a new EventDebouncer .
586	Construct a FrameReader .
587	Create a new connection .
588	Get a random clock id .
589	Generate a random node id
590	Gets the ticks for the given ticks .
591	Returns a timestamp with the given ticks .
592	Generate a buffer for a given date .
593	Create a new encoder .
594	Returns the number of leading zeros .
595	Construct an Index object .
596	Sort files by key
597	Loads the mode .
598	Update scrollbars
599	Restarts the blinker .
600	Returns the position of the line at the given position .
601	Updates the contents of a document .
602	Sets the selection .
603	Highlights a line .
604	Get the value of a property .
605	Creates a new Flow
606	Removes an event .
607	Fire an event .
608	Read data from webkit
609	Generate unique identifier .
610	Send the files to the queue .
611	Create a new input element
612	Add a drag event to the DOM .
613	Removes all DOM elements from the DOM .
614	Check if the file is uploaded
615	Checks if the file has been uploaded .
616	Upload next chunk
617	Creates a new flow file .
618	Remove a file from the list
619	Find a file by unique identifier
620	Calculate the total size of the file .
621	Calculate the average speed of the upload .
622	Handle an event .
623	Removes all chunks from the queue .
624	Abort the file .
625	Gets the progress of this chunk .
626	Check if the chunk is outstanding .
627	Calculate the average speed .
628	Read data from a file
629	Create a new XMLHttpRequest
630	Reads the file .
631	Returns the status of the request .
632	Gets the data for the request .
633	Evaluate opts
634	Iterate over all elements in an object
635	Create a new table
636	Check if the database is valid
637	Insert a table into a table
638	Count all records
639	Update a row
640	Create a header getter for a given string
641	Properties of a parameter .
642	Construct a new ArrayParam
643	Construct a TransformationParam
644	Create a new RangeParam
645	Creates a new configuration object .
646	Cloudinary implementation .
647	Get the mode of the given environment .
648	Resolve lodash
649	Creates a new config object .
650	Finalize resource type
651	Create a new drag .
652	Iterate over all keys in an object
653	Reduce an object from an object .
654	Returns true if value is an object .
655	Log a message by type
656	Create a new element
657	Add a class to an element
658	Toggle the given class .
659	Get pointer position
660	Append content to element
661	Get the data for an element
662	Checks if an element has data
663	Removes the data from an element
664	Handle multiple events
665	Removes events from an element
666	Handle an event .
667	Sets up the video elements
668	Set the auto setup timeout
669	Set the text content of an element
670	Truncates a function to be throttled .
671	Checks if the given type is valid .
672	Creates a new component .
673	Checks if the given index is valid .
674	Returns the value of the given value .
675	Creates a new TimeRanges object .
676	Create a list of time ranges
677	Creates a new text track .
678	Get file extension .
679	Loads a track
680	Constructs a color .
681	Checks if the volume is supported .
682	Parse option value
683	Checks if the current time is running .
684	Find the first occurrence of the first choice in the input array .
685	Mark a plugin as active .
686	Trigger a setup event .
687	Create a basic plugin .
688	Create a plugin factory .
689	Get a videojs object .
690	Prints the number of bytes to the console .
691	Sets the background color
692	Publish a message
693	Initialize page .
694	Returns the break point for the given width
695	Create a new HandlebarsEnvironment
696	Returns a string representation of the parameters .
697	Sets the canvas size .
698	Redraw the given number
699	Initialize the module .
700	Gets the tab data
701	Gets the value of a property .
702	Calculate viewport
703	Checks if the current version is valid .
704	Parse version string .
705	Create a new cell accessor
706	Get all projects
707	Get the config
708	filter environment variables
709	Merges all plugins into the given branch
710	Register a template .
711	Get a plugin template
712	Render a file
713	Remove a socket from the socket .
714	Adds a connection to the server .
715	Returns the status of a job .
716	prepare job
717	Remove all attributes from the model
718	Set body body
719	Require body
720	Handle an author .
721	Require a user .
722	Require admin or 401
723	Compile plugin block block
724	Find all nested files in a directory .
725	Get the absolute paths of the given file .
726	Finds all libraries in the appdir .
727	Fix a PLIST file .
728	Generate an accessor for accessor
729	Get accessors .
730	Evaluate an AST node
731	Checks if a binary file exists .
732	Initialize the container
733	Set an option .
734	Called when the runtime is run .
735	Abort the file .
736	Returns a list of event listeners
737	Remove an event listener
738	Binds a type to the event .
739	Checks if the given cap is valid .
740	Get the browser version
741	Removes an object from the DOM
742	Determines if the given URL matches the given URL .
743	Create a new instance
744	Returns the index of a given array .
745	Returns the difference between two strings .
746	Intersect two arrays
747	Parse size string
748	Add a field to this object .
749	Get the value of the field
750	Check if a class is a class name
751	Add class name to object
752	Check if a class name is a class name
753	Gets the value of a property .
754	Gets the position of the given node .
755	Get the position of the given node .
756	Get the size of a node
757	Remove events from an object
758	Preload data from a file
759	Rotate an image
760	Get all entries in the directory
761	Create a new HTTP request
762	Ensure that the given header is valid .
763	Get the response header
764	Set the mime type .
765	Sends data to the request .
766	Called when the request is finished .
767	Extend an object with the given arguments .
768	Destroy the image .
769	Defines a property .
770	define property
771	A SyntaxError
772	Apply a twist to the curve .
773	Sets the value of the given flip .
774	Calculates the distance between two points .
775	Calculates the distance between two points .
776	Returns true if the tick values are modulo .
777	Calculate the auto - date format for the given date .
778	validate chart model
779	Returns a list of ticks for the given domain .
780	Round a number to a number .
781	Merge defaults with defaults
782	Returns the number of ticks in the domain .
783	Detect number separators .
784	Creates a transformer for a file .
785	Validates a reference to a file
786	Handle a resource .
787	Warn all rules .
788	Get the closest path to the given path .
789	Get the hash of a URI
790	Get the previous map .
791	Sets the URL for the start path .
792	Parse IPv4 address
793	Retrieves a service from an object .
794	Get a nested bottle .
795	Apply a middleware to the container .
796	Add a middleware to the bottle .
797	Creates a new provider .
798	Add a new provider
799	Create a new service .
800	Create a new service
801	Create a service factory
802	Defines a property .
803	Set the value of a nested container .
804	Set the value of a property .
805	Define a constant .
806	Add a decorator to the bottle .
807	Creates an instance of a factory .
808	Pop a bottle instance .
809	Register a service .
810	Reset all providers
811	Throw an exception if the given node is invalid .
812	Checks if an expression is an event .
813	Register an event name .
814	Inspect a variable declaration .
815	Recursively inspect the program .
816	Inspects an identifier .
817	Recursively inspect a contract of contracts .
818	Inspects a call expression .
819	Recursively inspects a pragma statement .
820	Applies the rules to the source code .
821	Inspect the top level declaration .
822	Inspects a block statement .
823	Returns the source code for the given node .
824	Checks a variable declaration .
825	Construct a new RuleContext
826	Resolve upstream ruleset
827	Resolve plugin config
828	Write the configuration file
829	Lint the source code
830	Lint a file .
831	Create CLI options .
832	Validate options .
833	Checks the visibility of a file .
834	Checks if a literal is hexadecimal
835	Construct a new Soundfont object
836	Create an oscillator player .
837	Imports a sound font .
838	Checks if a system is a system library .
839	Promise a promise to a promise
840	Start watching watcher .
841	Resolve ignore option
842	Ensure that a property is empty .
843	Ensure that the given property is a valid value .
844	Create a new babel instance .
845	Create an image loader .
846	Csv loader .
847	Create a cssSvg loader .
848	Prepend an entry to the config .
849	Build webpack .
850	Merges the given data into another object .
851	Add a default value to a type
852	Add a validator to the given type
853	Create a new vue type .
854	Validate a type
855	Create a custom event .
856	Initialize a custom event .
857	Clean up the runtime events
858	Add runtime events to DOM
859	Normalize an event .
860	Called when an event is pressed
861	Handle mouse move event
862	Add tracking point
863	Updates and renders the drag .
864	start deceleration
865	Determine the velocity of the velocity .
866	Check the bounds of the bounding box
867	Initialize all components
868	Append a new log to a file .
869	Reads the data from the stream .
870	Create a CronJob
871	Properties of Sandbox .
872	Construct a Webtask object .
873	Wrap an executor .
874	Returns the union of the given array .
875	Wrap a list of listeners .
876	Wrap callback .
877	Find the largest of a directory .
878	Creates an async function .
879	Creates an async iterator .
880	Creates a non - iterator that can be used asynchronously .
881	Traverses a deep copy of an object .
882	Convert a promise to a Promise
883	Returns the number of files in the given directory .
884	Creates a copy of the specified index .
885	Move index to target index .
886	Check if index exists
887	Load a module .
888	Parse Accept - Language header
889	Parse a language string .
890	Returns the priority for the given language .
891	Determine if the specified language is a valid language .
892	Get preferred languages .
893	Compares two rules .
894	Parses the accept - charset .
895	Parse a string .
896	Returns the priority of the specified charset .
897	Determine if the specified charset matches the specified index .
898	Get preferred charset .
899	Parse the given string .
900	Returns the priority for the given encoding .
901	Get preferred encodings .
902	Parses the Accept header .
903	Parse a simple media type .
904	Get the priority of a media type .
905	Determine if a media type matches the specified type .
906	Get preferred media types .
907	Returns the number of quotes .
908	Splits a key value pair into an array .
909	Splits the media types into an array .
910	Splits a string into a list of parameters
911	Loads the webpack config file .
912	Assign value to obj .
913	Get filter string
914	Evaluate a page
915	Wait for a page
916	Creates a phantom instance .
917	Get the color of an image
918	Create a cubehelix array
919	Convert colors to image data
920	Compress an array of colors
921	Convert data to color map
922	Start download .
923	Merge merge options .
924	Create a new app channel .
925	Handle error handler
926	Create an app connection .
927	Handle error handler
928	Application constructor .
929	Assume the given queue and consume it .
930	Parse shard function
931	Checks if two nodes are equal .
932	Dispatch node .
933	Join a single peer
934	Returns the type of the given value .
935	Returns the private data object .
936	Defines a redirect descriptor .
937	Defines a call descriptor .
938	Defines a custom event .
939	Returns a wrapper for the given prototype .
940	Wrap an event .
941	Returns the listeners for the given event target .
942	Defines an event attribute descriptor .
943	Defines a custom event target
944	Upload a file
945	This function is called when the retry failed .
946	Handles mouse events .
947	A teamcity .
948	Convert an integer to a string
949	Parse a JSON string .
950	Serialize a value .
951	Serialize a BSON object .
952	create virtual module
953	Get the filename of a file .
954	Match semver .
955	Matches the protocol with the given sender .
956	Compare two arrays
957	Get source rule string
958	Get timeline arguments .
959	Find a class by its name .
960	Dump files
961	Start zip package
962	Build the upload form
963	Clears the temporary directory .
964	Errors an error
965	Executes the given content
966	Creates a new patch .
967	Run the given content
968	Create a new node .
969	Called when a script has been checked .
970	Formats a URI .
971	Formats the given URI .
972	Converts the given uri to an absolute path .
973	set global module
974	Fmix 32 bit hash
975	Compute the Fmix32 hash .
976	Binds keys to the given object .
977	Set the value of a parent node .
978	Replace a node with the given value .
979	Removes a value from the list .
980	Change the value of a node
981	get next node
982	Create a new change event .
983	Creates a new top level element .
984	Clean up a node
985	Processes a template node .
986	Match nodes in a node .
987	Recursively rehydrate the object
988	Render a HTML element
989	Checks that the given features are valid .
990	Returns a string representation of the entity names .
991	Deep merge configs
992	Load YAML file
993	Get the base params for a given base .
994	Get config from config file
995	Defines a property .
996	Shows a new logger
997	Injects the manifest to the manifest
998	Injects the swagger data from the data .
999	Injects asyncLoadPageJS .
1000	Convert rehype to React
1001	Execute the given method .
1002	Spawn a child process .
1003	Calculates the slope between two points .
1004	Determines whether or not a property is set .
1005	Creates a markup for a property .
1006	Captures a bubbling event .
1007	Create a new update queue .
1008	Mount an instance of the component instance .
1009	Requests the root of the given root .
1010	Determine if the given deadline is available .
1011	Deletes a value from a property .
1012	Updates the properties of the given element .
1013	Convert a code to a Promise
1014	ExponentialBackoff strategy .
1015	Create a new Backoff instance .
1016	Create a new function call .
1017	Create a new channel
1018	Creates a new connection .
1019	Draggable .
1020	Creates a new ConjunctionMap .
1021	Sort the timeseries .
1022	Convert program arguments to a predicate .
1023	Creates a function that takes a program arguments and returns a promise that satisfies the program .
1024	Process the observables .
1025	Get the actions selector for the goal tree .
1026	Performs the next cycle .
1027	Apply arguments to this object .
1028	Defines a new flow .
1029	Called when the flow is executed .
1030	Execute a flow
1031	Pads a string to a string .
1032	Creates a SM2 curve .
1033	Create a SM2KeyPair .
1034	Creates a new gulp .
1035	Add an event listener
1036	Remove an event listener
1037	Creates a new view .
1038	Properties of a Product .
1039	Create a cart .
1040	Called when an error is rejected .
1041	Fixes the date for a date
1042	Removes all data from the DOM
1043	Sets the position of the current step .
1044	Create a GoogleLogin object
1045	Creates a tile from the given latitude .
1046	Returns the name of the enum
1047	Convert an object to a string .
1048	Creates a random number .
1049	Pretty print date
1050	Create a logger .
1051	Run the request queue .
1052	Connects to the JSONP server
1053	Validate parameter value .
1054	Convert a parameter declaration to yargs
1055	Convert config declaration to yargs
1056	Creates a new Ngram parser .
1057	Collect scenarios from element element
1058	Called when the server is changed .
1059	Render the portal .
1060	Unmounts the portal .
1061	Filter the data
1062	Create a new table .
1063	Handle the action .
1064	Called when the request is changed .
1065	Creates a new instance of the component .
1066	Initialize the store .
1067	Remove data from the store
1068	Create a new table .
1069	Sends a filter .
1070	Performs a pagination action .
1071	Displays a select button .
1072	Displays the given row index .
1073	Extract a value from an attribute
1074	Convert an object to a map .
1075	Apply a filter to an object
1076	Returns an array of elements in an array .
1077	Add item to array
1078	Replaces an array with the given id .
1079	Computes the intersection between two arrays .
1080	Removes a listener from an object
1081	Suspending an event .
1082	Called when a property has changed .
1083	Sets the value of an object .
1084	Adds a key to the list .
1085	Removes a key from the list .
1086	Executes the given callback .
1087	Disconnects this binding .
1088	Filters all promises .
1089	Container constructor .
1090	Registers a factory .
1091	Removes the given name from the registry .
1092	Resolve the given full name .
1093	Adds a type injection .
1094	Add a new injection .
1095	Adds a factory to the factory .
1096	Get the value of a key
1097	Checks if a key exists
1098	Executes the given callback function .
1099	Convert string to camelCase
1100	Increment a new value .
1101	Decrement the specified value .
1102	Create a new class .
1103	Get the meta for a given key .
1104	Removes an item from the collection .
1105	Returns an array with the given value .
1106	Returns an array of all the keys in this collection .
1107	Removes the elements from the collection .
1108	Changes the elements of the array .
1109	Compute a reduce property .
1110	Add objects to this object .
1111	Remove objects from this object .
1112	Send an event
1113	Executes the promise and returns the promise .
1114	Sets the value of this object .
1115	Removes actions from the given props .
1116	Handles the action .
1117	Add a new insert operation .
1118	Removes a delete operation .
1119	Removes an array of operations .
1120	Create an array operation .
1121	Construct an ArrayOperationMatch .
1122	Finds the given index .
1123	Removes an item from the collection .
1124	Creates an array with the given key .
1125	Removes an array of objects at the given index .
1126	Removes all objects from the collection .
1127	Removes the object from the collection .
1128	Find an element by its id
1129	Add a class to this element .
1130	Sets an attribute value .
1131	Sets an element property .
1132	Returns the contents of this element .
1133	Add events to the application .
1134	Dispatches an event .
1135	Finds the closest instance of this view .
1136	Get the parent view of this view .
1137	Get the parent view of this view .
1138	Compile the view .
1139	Called when the binding is changed .
1140	Set the attributes of the view .
1141	Set the value of an attribute .
1142	Parses a property path .
1143	Render a child view .
1144	Clears the view .
1145	Clear the rendered view .
1146	Destroy a view .
1147	Trigger an event .
1148	Sets the children of the view .
1149	Update the children of the view .
1150	Remove all children from the view .
1151	Adds a new view to the collection .
1152	Trigger an action .
1153	Evaluate unbound helper
1154	Renders the view .
1155	Bind a property to a handle .
1156	Add meta tags .
1157	Exit the transition state
1158	Setup the router .
1159	Render the controller .
1160	Find the model from the given params .
1161	Get properties from model
1162	Get a controller by name .
1163	Disconnects the given outlet .
1164	Registers the given parameters .
1165	Called when a link is clicked .
1166	Replaces the route with the given arguments .
1167	Checks if the given view name exists .
1168	Removes all pending disconnections .
1169	Returns the URL of the current page .
1170	Replace the history .
1171	Called when the browser is clicked .
1172	Sets the path to the current location .
1173	Resolve a full name .
1174	Get the name of a template .
1175	Returns the router factory .
1176	Initialize the view .
1177	Advances the application .
1178	Setup the event dispatcher
1179	Registers the given namespace .
1180	Replace all records in the collection .
1181	Releases all records for the given type .
1182	Returns a list of all namespaces .
1183	Add a callback to the queue .
1184	Removes the waiters from the queue .
1185	Removes all the methods that have been removed .
1186	Add a callback to the prototype .
1187	Convert obj to a property descriptor
1188	Normalize property descriptor .
1189	Checks if the given descriptor is compatible .
1190	Get a trap .
1191	Creates an object with the given name .
1192	Calls the wrapped object .
1193	Seal the object .
1194	Calls the wrapped object .
1195	Deletes a property .
1196	Iterate over the target object .
1197	Returns the keys of the target .
1198	Returns the keys of the target object .
1199	Creates an unwrapped method that wraps the given primitive .
1200	Load an object from an object
1201	Serialize a record .
1202	Serialize a record .
1203	Serialize a relationship into a json object .
1204	Convert a record to a JSON object
1205	Extract metadata from the store
1206	Remove meta data from store
1207	Saves the record array
1208	Adds a record to the collection .
1209	Create a new record .
1210	Returns the id for the given type .
1211	Find a record by id
1212	Finds a collection by id .
1213	Reload a record .
1214	Load records from the collection .
1215	Checks if the given id exists .
1216	Get record by id
1217	Find a record from the database .
1218	Returns the record array for the given type .
1219	Unload all records .
1220	Returns an array of records that match the given query .
1221	Commits pending records .
1222	Updates a record .
1223	Assign a record to the database .
1224	Returns a mapping for the given type .
1225	Push a record into the database .
1226	Adds a payload to the store .
1227	Merge the metadata for the given type .
1228	Create a new record .
1229	Add unsaved records to data
1230	Clone an object
1231	Add messages to the model .
1232	Sets the value of the given attribute .
1233	Sets the data for this model .
1234	Removes the data from the model .
1235	Sends a callback to the model .
1236	Saves the model .
1237	Reload the record .
1238	Sets the value of an attribute .
1239	Executes all attributes of the model .
1240	Executes a callback on the model .
1241	Add a relationship to the proto .
1242	Runs all relationships by name
1243	Removes the changed records .
1244	Add a record to the array
1245	Update the records for the given type .
1246	Creates an array of many records
1247	Create a new record array
1248	Registers a new record .
1249	Creates an adapter for the given query .
1250	Add a new record to the list
1251	Add a new record to the record .
1252	Serialize a record .
1253	Finds all items in the given store .
1254	Returns a list of fixture IDs .
1255	Serialize a record .
1256	Normalize an object .
1257	Normalize the given payload into a single record .
1258	Normalizes the given payload into an array .
1259	Adds the given payload to the store .
1260	Serialize a record .
1261	Add a relationship to the model .
1262	Retrieves information about a given type .
1263	Get a list of IDs for a given type .
1264	Adds a record to the store .
1265	Update a record .
1266	Delete a record
1267	Get the url for a given type .
1268	Creates an AJAX request
1269	Initialize an inflector .
1270	Convert a key to a unique identifier .
1271	Serialize a record .
1272	Adds the relationship to the model .
1273	Returns the singularize of the given root .
1274	Remove links from the data
1275	Sets the hash for the given type .
1276	Serialize a record into a JSON object
1277	Updates the record with the primary key .
1278	Updates the payload with the given type .
1279	Convert a type to pluralize
1280	Creates an error from a jqx response .
1281	Parse a key value
1282	Set the value of an element .
1283	Compiles a list of nodes .
1284	Creates a linkFn wrapper for group elements .
1285	Replaces the given element with the given elements .
1286	Parse an array declaration .
1287	Checks if the given request url is the same .
1288	Traverses a node .
1289	Creates a new client .
1290	Creates a new connection .
1291	Creates a new node .
1292	Sends a request to the server
1293	Process bootstrap .
1294	Fixes tsconfig file .
1295	Fixes the references file .
1296	Fix the native script .
1297	Fixes the angular package
1298	Fixes the main module .
1299	Fixes gitignore pattern
1300	Display the final help .
1301	Binds a function to an object .
1302	Creates a new RemoteObject instance .
1303	Get the value of a callable object .
1304	Sets the value of a call frame .
1305	Validate a string
1306	Loop through all associations
1307	Handle errors .
1308	Zip a zip file
1309	Executes a command .
1310	Convert a file to a string
1311	merge yaml files
1312	Loads a KES override from a folder
1313	Determine the KES class for the given options .
1314	Logs an error
1315	Get system bucket .
1316	Builds the nested CFS configuration .
1317	Builds the KFS configuration .
1318	Build lambda .
1319	Send a response to CloudWatch .
1320	Convert options to string
1321	Assigns an object to target .
1322	Open a popup with the given URL .
1323	Execute a popup
1324	Open a popup
1325	Open a popup with the given URL .
1326	Returns the tag range for the given editor .
1327	Checks if the given range is between tags .
1328	Checks if the token is a valid token .
1329	Gets the completiontions of the stylesheet .
1330	Gets the completions for the given editor .
1331	Get a list of CSS snippets from the registry .
1332	Get a list of snippet snippets
1333	Extract prefix from string
1334	Checks if the given marker is valid .
1335	Toggles the given property .
1336	Returns true if the given attribute has changed .
1337	Returns a listener for the given property name .
1338	Creates a derived property .
1339	Properties of an image .
1340	Register a shipit task
1341	Inject template template
1342	Default check size
1343	Add an integer to the dst .
1344	Create a new DataStream
1345	Get sandbox map from sandbox
1346	Break a sandbox .
1347	Remove sandbox variables
1348	Get all events for a given AST
1349	Wipe lmd events
1350	Removes all items from the list
1351	Checks if the given option name is present .
1352	Called when a module is loaded
1353	Rebinds the given object hierarchy .
1354	Returns the position of a row .
1355	Finds a node by its name .
1356	Stringify object properties
1357	Counts the number of lines .
1358	Wrap a condition .
1359	Is a single condition?
1360	Count the number of lines .
1361	Set the name of the anonymous function .
1362	Wrap all conditions
1363	Add a module to the module
1364	Calculate the coverage of a module
1365	Merge mixins .
1366	Merge two objects
1367	Merges a config file into a deep copy of the config .
1368	Converts a module path to a directory
1369	Merges the given options into the config .
1370	Add plugins from bundle config
1371	Generate a JS code .
1372	Wrap the code in a module .
1373	Get module type
1374	Properties of a d3 transform .
1375	start mousewheel
1376	Calculate the zoom delta for the current behavior
1377	Parse a string
1378	Parses an XML document .
1379	Convert the given options to a string .
1380	Get a URL from the given options
1381	Get a file
1382	Convert an error to an error .
1383	Returns a string representation of the response .
1384	Executes the given nodeFunc .
1385	Prepare the output directory .
1386	Parses an XML document .
1387	generate input
1388	generate input
1389	generate input
1390	Normalize an object
1391	Sets the default defaults for the given name .
1392	prepare options
1393	Get the output path for the given page .
1394	Map the output file to the output directory .
1395	Executes the given generator .
1396	Get output file
1397	Check if path exists
1398	Returns the path to the phantom .
1399	Spawn a phantom script
1400	Prepare options
1401	Creates a new notification .
1402	Create a new lock factory .
1403	Creates a new notification .
1404	Start watcher .
1405	Add a snapshot to the server .
1406	Checks if the given output file exists .
1407	Remove the given output file
1408	Remove a file
1409	Save the page to the output file
1410	Checks if a line is a valid line .
1411	Get robots url
1412	Get robots file
1413	Convert a list of values into an array .
1414	Returns a list of all the cidr components that are excluded .
1415	Gets the last ms timestamp .
1416	Parse a url
1417	prepare params
1418	Strip trailing slash .
1419	Get all properties of an object
1420	Add events to the cluster
1421	prepare request
1422	Adds a request to the queue
1423	Get metrics
1424	Make a HTTP request .
1425	Returns a promise that resolves all promises .
1426	Returns the next node after the given index .
1427	Returns the type of the given value .
1428	Creates a function that accepts a list of strings .
1429	Creates a function that will bind to the database .
1430	Creates a new instance of the EJDBI impl .
1431	generate dummy text
1432	Create a new Backend instance
1433	Compile CSS files .
1434	Runs a sequence of tasks
1435	Checks if the given document is a valid type .
1436	Pads a string to a string .
1437	Resolves a collection definition .
1438	Assign roles to users .
1439	Get all channel channels for a document .
1440	Outputs help for the command .
1441	Returns the human readable argument name .
1442	Validate object properties
1443	Build the path for the item stack .
1444	Returns the business id for the given doc .
1445	Returns the default sync channels for the given document .
1446	Checks if the given value is an ISO8601 date string .
1447	Normalizes an ISO8601 time .
1448	Compare two strings
1449	Compare two dates
1450	Normalizes an ISO8601 time zone .
1451	Start the process
1452	Exit process
1453	send a message
1454	Delete entity
1455	Save entity .
1456	Get a file
1457	Get entity context
1458	Get a module
1459	Process the sources
1460	Generate module catalog .
1461	Log a module
1462	Builds a list of modules and processes them
1463	Recursively build a directory
1464	Generate a unique identifier
1465	Generate the genesis cache
1466	Cache all modules in the cache
1467	Cache the Apexes
1468	Stop the broker
1469	Gets the module module
1470	Removes a directory
1471	Get mouse position
1472	Proxy request .
1473	Inject proxy headers
1474	Parse a JSON proxy file .
1475	Parses the contents of a config file .
1476	Parse a config map
1477	Parse command line arguments
1478	Parse command line argument
1479	Parse forward rule .
1480	Creates a new error with the given code .
1481	Update the working state
1482	Fetch all branches from the repository .
1483	Initialize the repository .
1484	Ensure that an array is an array .
1485	Ensure that b is a string .
1486	Checks if two buffers are equal .
1487	Gets the merged file set .
1488	Get merged tree entries .
1489	Find the SHA of a file .
1490	Prepare commit .
1491	Flushes a commit .
1492	Formats the given color .
1493	Push a remote repository
1494	Pulls a branch
1495	Compare two commits .
1496	Solves the given treeConflict .
1497	Creates a new commit .
1498	Gets the resolved entries .
1499	Add blob to cache
1500	Get a tree from a directory
1501	Normalizes a github commit .
1502	Normalizes a github commit .
1503	Get a file object .
1504	Reads the contents of a file .
1505	Checks if the given filepath exists .
1506	Remove a file .
1507	Moves a file from the repository .
1508	Checks if a file is changed .
1509	Setup the connection
1510	Configure nock .
1511	Configure Expressions
1512	Configure lan proxy
1513	Clean up the config file
1514	Sets the changes of a file .
1515	Reverse all changes
1516	Reverse the given file path .
1517	Reverse changes for a directory
1518	Reverse all removed changes
1519	Normalize path .
1520	Checks if a directory contains a directory .
1521	Read all files in a directory
1522	Move files to a directory
1523	Create a new branch
1524	Update a branch
1525	Remove a branch .
1526	Fetch a blob from the repository
1527	Create a new access token
1528	Creates a new PokitDokd instance .
1529	Convert a feature array into a feature string .
1530	Add a feature to the map
1531	Add features to the table .
1532	Converts a hash to an array
1533	Add a list of features to the array
1534	Convert an array to a hash
1535	Hash array of arrays
1536	Recursively train a single node .
1537	Convert a dataset into a tree
1538	Recursively classify a sample .
1539	Classifier constructor .
1540	Initialize the model .
1541	Initializes the weights .
1542	Initialize classifier .
1543	Counts the number of elements in the stack .
1544	Calculates the explanations of the expected classes .
1545	Calculates the explanations of the expected classes .
1546	Computes the explanations of the expected classes .
1547	Train the model .
1548	Convert a model string to a model map .
1549	Generate an annotation .
1550	Constructs a new SVM .
1551	Train a dataset
1552	Convert a string to a model map .
1553	Performs the train on the given sample .
1554	Classifier constructor .
1555	Concatenate option data arrays
1556	Preorder a node .
1557	Filters the relations for the given relation
1558	Get all files in the bundle
1559	Recursively walk the bundle resources .
1560	Returns a list of all the resources .
1561	Returns a list of bundle names .
1562	Get bundle path
1563	Create a new instance of a package .
1564	Load a bundle .
1565	Load a bundle from the bundle .
1566	Checks if the given path matches the given rule .
1567	Add a resource to the bundle .
1568	Add a resource to the bundle .
1569	Checks if the given filter is valid
1570	Finds a list of packages in the package depths .
1571	Determines a list of seeds .
1572	Add a bundle to the bundle .
1573	Returns a copy of the given object .
1574	Create a Bundle .
1575	Get the base scales for a given type .
1576	Create a bufferedTracer .
1577	Build a gulp file
1578	Split a string into a string .
1579	Show usage .
1580	filter array
1581	Extracts the CSS from a bundle .
1582	Validates the given id .
1583	Group gettext items
1584	Traverses all translations in the given json .
1585	Find all known dependencies .
1586	Parse query string
1587	Stringify an object
1588	Compile a single string .
1589	Bind events to DOM
1590	Constructor for constructor
1591	Inserts the contents of an element
1592	Get the value of an element
1593	Determines the dependencies of the module .
1594	Create coverage report
1595	Create a new Shortline instance
1596	Find all elements in a node .
1597	Main entry point .
1598	Create Travis status http status
1599	Executes git command
1600	Creates a SlugDetectionError .
1601	Creates a scoped css object from the given scope .
1602	Combine css . css
1603	Construct a new InvalidSlugError .
1604	Checks that the given build commits are equal .
1605	Trims a slash .
1606	Parse options
1607	Serialize an object into a string .
1608	Render pages .
1609	Get the path of git url
1610	Renders all robots .
1611	Compile the index .
1612	Sort the mentions .
1613	Finds the emoji with the given match .
1614	Creates a function that invokes a function .
1615	Add a selector to the selector .
1616	Finds the CSS selector for a selector .
1617	Create a new index .
1618	Create a new migration .
1619	Insert a seed into the database .
1620	Close the database
1621	Parse parameters .
1622	Checks if the given props is a valid prop .
1623	Create a GIFCli file
1624	Checks whether the given test level should be logged .
1625	Gets the value of the attribute .
1626	Returns a map of boolean values for the given attribute name .
1627	Initialize the switch
1628	Initialize the switch .
1629	Called when the element is checked .
1630	Parse a cookie
1631	get cookies from cookies
1632	Set cookie value
1633	Determine if the cookie is valid
1634	Format a message
1635	Create zoom range path
1636	Synchronize zoom .
1637	Add selections to the chart
1638	Apply selection .
1639	Create selections path
1640	Synchronize selection .
1641	Setup the data watcher
1642	Sets the data size for the given watcher .
1643	Add an identifier to the chart
1644	Load an entity .
1645	Generate a new action .
1646	Creates a new action .
1647	Get a random delay between min and max .
1648	Logs the current state .
1649	Removes a subscriber from the list of subscribers .
1650	Removes all subscribers from a channel
1651	Add subscribers to a channel
1652	Returns an array of channel events for a given channel .
1653	Get subscribers by event name
1654	Subscribe to a channel
1655	Unsubscribe from a channel
1656	Subscribes a subscribed event .
1657	Unsubscribes a subscription
1658	Executes a handler .
1659	Publish data to the specified channel
1660	Resolve namespace .
1661	Returns a promise that resolves to the given mapping .
1662	Returns a function that returns a callback for the given type .
1663	Applies a promise to the result .
1664	Create a new FakeModule
1665	Check if object is a jQuery object
1666	Checks if an object is an event .
1667	Add properties to module
1668	Wrap a function with the given name .
1669	Register a module
1670	Set an instance of a module
1671	Start a single module
1672	Called when the object is initialized
1673	Start a single module
1674	Starts a single module .
1675	Create an instance of a module
1676	Returns a function to set the properties of a template object .
1677	Start all modules
1678	Stop a module .
1679	Stop all modules
1680	Stop a single module
1681	Stop all modules
1682	Stops all instances of a module .
1683	Removes a module .
1684	Delete a module
1685	Main entry point .
1686	Returns the value in the picker value
1687	Sets the value of the given value .
1688	Returns the value of the default value
1689	Create a MarkdownSerializer for the given indentCodeBlocks .
1690	Convert markdown to a snapshot
1691	Try to exit the suite .
1692	Enter the root suite .
1693	Enter a snapshot .
1694	Push a snapshot to the current state
1695	Transform a suite .
1696	Transform snapshot list .
1697	Generate a suite header .
1698	Converts a string to a string .
1699	Default path resolver for a suite
1700	Format a list of snapshots .
1701	Format a list of snapshots .
1702	Creates a snapshot of the snapshot .
1703	Create a single line plugin .
1704	Replaces newlines with newlines .
1705	Condense blocks .
1706	Checks if a character list contains entities
1707	Convert a hexadecimal hexadecimal hexadecimal representation of hexadecimal
1708	Processes a rule .
1709	Initialize the analytics object
1710	Debug function for debugging
1711	Determines if the given object is a buffer .
1712	Encode a number
1713	Decode a string .
1714	Creates a new transport .
1715	Called when the transport is upgraded .
1716	Cleanup the transport
1717	Create a new Backoff instance
1718	Extract comments from a string
1719	Binds the ngModel controls
1720	Create the SwiSlider instance
1721	Determine if a word is a vowel .
1722	Add an API to the API
1723	Get JSON data from remote server
1724	Split a method name into an array .
1725	Copy to remote client
1726	Prepare stack trace .
1727	capture stdout
1728	Hook for exec
1729	Starts a capture .
1730	Wrapper around interceptingIntercept
1731	Get the closest value for a given value
1732	Convert a number to an integer .
1733	Add frame to array
1734	Creates a concatenate with the given options .
1735	Creates a concatenate factory .
1736	Patch a node .
1737	Called when the queue is done .
1738	Creates a setter for each node .
1739	Patch node .
1740	Fire an event .
1741	Creates a delegate .
1742	Returns an instance of the module
1743	Write the given structure .
1744	Adds a WHERE clause to the query builder .
1745	Handle multi - valued parameters .
1746	Get a Knex instance
1747	Closes all instances
1748	Create a remarkjs highlight .
1749	Render the given source .
1750	Creates a new arrow .
1751	Computes the length of the value of the value parser .
1752	Creates a promise from a file
1753	Gets the results of the given outcomes .
1754	Finds the block at the given key at the given position .
1755	read data from buffer
1756	Convenience method to create a new cursor .
1757	Read header data from the input stream .
1758	Reads a keyword summary .
1759	Reads keywords from input .
1760	Read a key block block .
1761	Scan key block table
1762	Read the record summary .
1763	Read a record block from the input stream .
1764	Read the definition .
1765	Reads an object from the input stream .
1766	Finds the word for the given keyinfo .
1767	Return the first word in the array .
1768	Recursively shrink the array .
1769	Searches for a given phrase .
1770	Match offset by offset
1771	Check if a modifier key is valid
1772	Creates a key combo for a key function .
1773	Override this method to override a keydown event .
1774	Check if the key press is pressed .
1775	Executes a hook .
1776	Parse an IMAP message
1777	Creates a new GPT object .
1778	Reads a GPT from a backup .
1779	Stop a given function .
1780	Format a quantity .
1781	Format a quantity .
1782	Format a value .
1783	Format an object .
1784	Format a value .
1785	Format input fields .
1786	Merge config files
1787	Parse properties .
1788	Extracts a string literal .
1789	Parse a string literal .
1790	Parse a numeric value .
1791	Parse an AST node .
1792	Curry a function .
1793	Matches an array of matches .
1794	Compile an AST node .
1795	Get tag name
1796	Evaluate attribute value .
1797	Checks if the given code is unquoted .
1798	Set default value
1799	get xml file
1800	Append UISource to the client
1801	Log an error .
1802	Compiles the given schema .
1803	Add properties to a table
1804	Debounce a function .
1805	Makes a matcher .
1806	Finds all columns in the model class
1807	Log an error message
1808	Call a command .
1809	Finds the input element .
1810	Returns a map of validation messages
1811	Register a class .
1812	Configure an option
1813	Connect to MongoDB
1814	Start shell .
1815	Executes the given files
1816	Wrap a function .
1817	Handle error
1818	Generate a tablature from the given conf .
1819	Saves the object to the database .
1820	Creates a pickler .
1821	Recursively recursively recursively recursively
1822	Check if file is a file
1823	Checks if a file is a directory
1824	Process all files
1825	Process a file .
1826	Initialize the http server
1827	Adds an element to an array .
1828	Creates a new object interface .
1829	Executes an HTTP transaction .
1830	Calculate the difference between two dates .
1831	Init error handler
1832	Calculate the difference between two dates .
1833	Consume a pair .
1834	Consume an array .
1835	Checks if a character is an identifier .
1836	Called when a cycle occurs .
1837	Get json from file
1838	Pushes the current level to the current level .
1839	Move the current level to the current level
1840	Decrypts the encrypted content .
1841	Encrypt the given text .
1842	Encrypts the given text .
1843	Unpack encrypted content .
1844	Derive a key from a password .
1845	Generate a PbKDF2 .
1846	Creates a stream with the given schema .
1847	Creates a new decode stream .
1848	Generate a random RDD for a given graph .
1849	Generate a random RDSR .
1850	Draw a single curve
1851	Draw a color path
1852	Draws the paths
1853	Called when the brush is updated .
1854	Determine if the current data is selected
1855	Returns true if two dimensions are consecutive .
1856	Convert a property to an object
1857	Gets the property value for the given property .
1858	Constructs a ReadFileCache .
1859	Called when the cache is done .
1860	Initialize the client .
1861	Convert a message to a string .
1862	Creates a new request .
1863	Process request options
1864	Handle an event .
1865	Log a request
1866	Set the response headers
1867	Adds a header to the class .
1868	Sets the header .
1869	Sets the header of the object .
1870	Create a new instance of the header .
1871	Finds the given encoding .
1872	Convert a string to an encoding .
1873	Convert a string to a Buffer
1874	Encode a user auth .
1875	Creates a new Vec4 .
1876	Creates a new formatted error instance .
1877	Creates a new matrices .
1878	Creates a new Vec2 .
1879	Creates a new quaternion .
1880	Creates a new Vec3 .
1881	Create a snackbar container
1882	Creates a snackbar .
1883	Merge options with new options
1884	Creates a new stackbar instance .
1885	Properties of a Transform .
1886	Properties of a triangle .
1887	Executes a bash command .
1888	Executes a glob .
1889	Creates an options object based on a pattern .
1890	Returns the path to the bash shell .
1891	Memory driver .
1892	Calculates the cost of the item
1893	Recursively walk a subnode
1894	Adds the given dependencies to the dependencies .
1895	Execute the callback .
1896	Iterate over an array
1897	Map each item in an array
1898	Sets the date value for the given date string .
1899	start server
1900	Show success info
1901	Log a URL
1902	Set property values
1903	Initialize the token
1904	Send a request to the API
1905	Get access token
1906	Return an error message
1907	Create a new address book
1908	Edit address book
1909	Remove an address book
1910	Get information about a book
1911	Get emails from a book
1912	Add emails to a book
1913	Get email information
1914	Get the cost of a book .
1915	List campaigns .
1916	Get book info
1917	Get campaign stat by count
1918	Get a campaign stat by reference
1919	Create a new campaign
1920	Add a new sender
1921	Activate a sender .
1922	Get sender activation email
1923	Get email info
1924	Remove email from all books
1925	Get email statistics
1926	Add email to blacklist
1927	Remove email from blacklist
1928	Get email info
1929	minify file
1930	Write a file
1931	Create a cookie
1932	Set a cookie
1933	Get a cookie by key .
1934	Deletes a key
1935	Removes all keys from the list
1936	Convert a function to a function .
1937	Clone a gallery item
1938	Upload a file to the bucket
1939	Delete a file
1940	Setup dispatch .
1941	Get next date .
1942	Delete a service
1943	Request a request
1944	Get Identifier
1945	Integrate integrations .
1946	Convert schedule to action
1947	Fetch items from an action
1948	Send request to adapter
1949	Create a schema .
1950	Creates a mapping .
1951	Map from service to service
1952	Add tail info to the queue .
1953	Returns the number of tails of the head .
1954	Prepare a pipeline .
1955	Cast query params
1956	Setup a queue .
1957	Get meta data
1958	Sets an action .
1959	Set metadata for a service
1960	Export to JSON schema
1961	Make a reference to a ref .
1962	Checks if the value is a list or not .
1963	Find an option in the choice .
1964	Checks if the given identifier is a code constraint .
1965	Expire an existing item
1966	Transform a range
1967	Transform a range to a range
1968	Matches an endpoint for the given endpoint .
1969	Create an action .
1970	Authorize request .
1971	Create a request from an action .
1972	Get a service from schemas .
1973	Sync synchronously synchronously synchronously synchronously .
1974	Creates a new instance of the plugin .
1975	Returns a function that returns a string with the given colors .
1976	Creates a new instance of the module .
1977	Map to service endpoint
1978	Process message body
1979	Create a new instance of the given property .
1980	Constructs an element matrix .
1981	Convert a string to a URL
1982	Writes the expected value to a JSON file .
1983	Write the source code
1984	Save the datamapap
1985	Creates a new node .
1986	Creates a text node .
1987	Create a new ElementNode
1988	Creates new instance .
1989	Assign content to a file
1990	Detects the takeout of the selectors .
1991	Parse bookmarks
1992	Construct a CommonalityInterface .
1993	Construct a CommanalityMatrix .
1994	Creates an array of arrays .
1995	build attribute matcher
1996	Returns true if the given element is a container
1997	Returns the common parent of the given element .
1998	Parse style string
1999	Computes the distance between two nodes .
2000	Creates a lexer .
2001	Initialize the parser .
2002	Errors an error .
2003	Registers a variable .
2004	Registers a tag .
2005	Parses a tag .
2006	Creates a new node .
2007	Registers a block .
2008	Captures a block .
2009	Create a node .
2010	Add a new line .
2011	Call this function .
2012	Parses the input .
2013	Lexes a file .
2014	Notify hook .
2015	Pause the request .
2016	Resume a pause
2017	Create a temporary directory .
2018	Copy a buffer into a string
2019	Parse a simple string .
2020	Get the base config
2021	Post notification
2022	generate username
2023	Link success callback .
2024	Link token .
2025	Error handler
2026	Handle token auth error
2027	Register a provider .
2028	Register an OAuth2 provider .
2029	Register a token provider
2030	Handle social auth handler .
2031	Creates a passport callback .
2032	Create a passport token callback
2033	Get provider provider from pathname
2034	Get provider token from pathname
2035	Require a role
2036	Gets the location of the tile .
2037	Determine the map for the given crs .
2038	Update all layers
2039	Add layers to the map
2040	Remove all layers from the map
2041	Gets the bounds of the cluster .
2042	Iterate over all the markers in this group .
2043	Determine if the given layer has the given layer .
2044	Add a new layer to the map
2045	Remove the geometry from the map
2046	Remove an object from an array
2047	Add a new layer to the cluster
2048	Get all children of this cluster .
2049	Sets the bounds of the cluster .
2050	Add a new marker to this node .
2051	Updates the slider .
2052	Add a new marker to the map
2053	Remove a layer from the map .
2054	Add a marker to the map
2055	Interpolate a path
2056	Creates a function that returns a list of pages for the given index .
2057	Creates a new template engine .
2058	Properties of a job .
2059	Creates a new worker .
2060	Handle drag events
2061	Returns the index of the given value .
2062	Constructor for Tor .
2063	Gets the included files .
2064	Returns a list of default paths
2065	Returns a list of all the main packages .
2066	get bower jower json
2067	Get the main field as array
2068	Creates a proxy agent .
2069	Runs the specified directory .
2070	Shutdown the device .
2071	set scan limit
2072	Set the brightness of the specified address .
2073	Clears the given address .
2074	Display a number .
2075	Get example code
2076	Creates a new instance .
2077	Checks if a file exists .
2078	Starts the server .
2079	Recursively adds the dependencies to the current location
2080	Removes all dependencies from a cycle
2081	Creates a new series .
2082	Called when a value is read
2083	Finds and deletes the given value .
2084	Find and delete all items in target
2085	Initialize an InfluxDB instance .
2086	Creates a handler for the given handler .
2087	Starts the stats reporting .
2088	Creates a reporter .
2089	Build options .
2090	Build a table of commands .
2091	Router constructor
2092	Get default port by protocol
2093	Clear all script scripts
2094	Returns the index of an object .
2095	Gets the values of the given node list .
2096	Get the value of a static value
2097	Check if a variable is modified .
2098	Configure the config .
2099	Checks if the given string is escaped .
2100	Replace the given string with the given matcher .
2101	Replace all matches in the given string .
2102	Send a message
2103	Parse a message
2104	JWT constructor
2105	Create a new token
2106	Set the token
2107	Converts the request to an object .
2108	Validate the token
2109	Creates a new JWT .
2110	Creates a new JWT .
2111	Setup component .
2112	Define module factory .
2113	Create a consul client
2114	Handle incoming requests
2115	This function is called when the user is running
2116	Called when a category is clicked .
2117	Sets the scroll position .
2118	Construct a Service .
2119	Properties of a Characteristic .
2120	Migrate database .
2121	Migrate database version .
2122	Normalize fetchBeforeObjectStore objects
2123	Checks if schema descriptors are valid .
2124	List records for a given key range .
2125	Normalize compound object key
2126	Iterate over the cursor .
2127	Handle cursor iteration .
2128	Fetch all records from a transaction store .
2129	Fetch records from database store
2130	Write data to file
2131	Runs a transaction .
2132	Convert cursor direction to native cursor direction
2133	Creates a new index .
2134	Fetch next page
2135	Execute event listeners
2136	Resolve a value to the given state .
2137	Run query .
2138	Inserts a record into records .
2139	Find the insert index for a record .
2140	Prepare query for query
2141	Prepare sorting algorithm .
2142	Prepare filter optimization .
2143	Choose a query for a query .
2144	Prepare the order specification for the query .
2145	Open a database connection .
2146	Handle connection error .
2147	Executes all migration listeners .
2148	Split a filter into a single object
2149	Generate a list of field paths .
2150	Set the value of a field .
2151	Get the value of a given field .
2152	Upgrade a database schema .
2153	Create a new container .
2154	Creates a section .
2155	Client constructor .
2156	Creates a light .
2157	Create a plain text element
2158	Convert JSON to HTML
2159	Render JSON error .
2160	Write a chunk to the stream .
2161	End the file
2162	Removes all events from the stream .
2163	Handle an error .
2164	Clean up a directory
2165	Lists all boilerplate files
2166	get session data
2167	Create a new request
2168	Updates the payload .
2169	Calculate the step .
2170	Fetch data for a given request .
2171	Creates a new OGR layer .
2172	Parse csv file
2173	Add shapefile params
2174	Watch the given schema file path .
2175	Perform a purge request .
2176	Creates an instance of AkamaiPurgeChain
2177	Mocks mock
2178	Recursively iterates over an object
2179	Creates a new target object from source .
2180	Creates a new instance of the given proto .
2181	Merges the given property into destination .
2182	Merges the given property with the given property .
2183	Merge an object with a given property .
2184	Mixin mixins
2185	Recursively creates a directory .
2186	Fetch the deployed system .
2187	create system
2188	link system system
2189	List containers
2190	Fetch a container
2191	build all containers
2192	Loads a target from the system .
2193	This function is used to deploy a new revision .
2194	Preview a revision
2195	List revisions .
2196	Gets a revision .
2197	Compiles a system .
2198	Commit a system
2199	Finalize the source report
2200	Injects the app to the app
2201	Fixes all files in the registry .
2202	Find all files in the given directory .
2203	Load all files in the registry .
2204	Write the registry .
2205	build a container
2206	Finds a container by its identifier .
2207	Set appConsts .
2208	Create a new git repository
2209	Register a system .
2210	Remove a system .
2211	Initialize the root component .
2212	Processes the DOM element
2213	Add a child to this node .
2214	Removes a child from the DOM .
2215	Adds a child to the DOM .
2216	Generate a template
2217	Check to see if the system is valid .
2218	Create a new repository
2219	Register a system .
2220	Unlink a system .
2221	Write a file
2222	Get a specific revision
2223	Get the revision of a given revision .
2224	Get the version of the given revision .
2225	Opens a git repository .
2226	Get the revision of the given system .
2227	Get the revision id for the given identifier .
2228	Creates an object based on the base config .
2229	Returns a list of targets for the topology .
2230	Create a new relation instance .
2231	Add a sub - model to this model .
2232	Add a relation to this model .
2233	Add a relation to the model .
2234	Initialize the model .
2235	Create a new relation instance
2236	Get a collection of collections .
2237	Get model type by name
2238	Get the id of an item
2239	Get an object by its type
2240	Remove a model .
2241	Create a new RelationalModel .
2242	Remove a model from the collection .
2243	Determines if the relation is valid .
2244	Removes all related relations .
2245	Sets the key contents .
2246	Add a relation to the collection .
2247	Add the relation to the collection .
2248	Sets the keys of the collection .
2249	Fetch a relation .
2250	Returns the current model s id .
2251	Create a new model .
2252	Creates a new XSDatX .
2253	Construct a Bitmap object .
2254	Convert a value to an object .
2255	Returns the empty string representation of the given value .
2256	Calculate the number of words in the given word .
2257	Compile the module
2258	Creates a function that runs a functional pipeline function .
2259	Initialize the timer .
2260	Callback for processing
2261	Creates a new template .
2262	Creates a function that invokes the given function .
2263	get data
2264	Sets up webhook endpoint .
2265	POST POST request
2266	Verify the request signature .
2267	Update the refs
2268	Create a new DockerCmdManager instance
2269	Recursively drill down the given object .
2270	Prints a list of tasks .
2271	Format a text column .
2272	Creates a new task doc .
2273	Logs a message to the console .
2274	Check if item is a promise
2275	Checks if a function has a callback .
2276	Creates a race .
2277	Define a task .
2278	Send an await request to the queue .
2279	Create a new timeout
2280	Handle a timeout event .
2281	Run the given function .
2282	Run the given iterable .
2283	Reset the context .
2284	Add a hook .
2285	Get a tag by name
2286	Checks if a file is a pattern .
2287	Creates a new SevenSegment .
2288	Resolve changes
2289	Initialize a new RemoveObserver instance
2290	Parse property chains .
2291	Parse a function .
2292	Parse brackets .
2293	Add references to the expression
2294	Creates a new function that runs the next call .
2295	Asserts an AssertionError
2296	Bind arguments to a function .
2297	Get an array of exceptions .
2298	Checks to see if the given token is a space .
2299	Checks to see if the left of the left of the left of the left of the left of the left .
2300	Checks if the given token should be accepted .
2301	Determines whether or not the given token should be closed .
2302	Defines a configurable property .
2303	Converts an argument to an integer .
2304	Returns the length of the given argument .
2305	Creates an ArrayIterator .
2306	Promise a Promise .
2307	Creates a PromiseExecutorExecutor .
2308	Creates a PromiseResolutionHandler function that returns a Promise that resolves a Promise .
2309	Creates a new event .
2310	Handles click events .
2311	Reports that the given token is not ending .
2312	Reports that the given token is required .
2313	Reports that the given token is required .
2314	Generate the destination location
2315	Gets the value of a key from a hash .
2316	Gets a list of authorizations .
2317	lookup github login
2318	Unpack a message from a message .
2319	Generate RSA hash .
2320	Creates a new RSA key .
2321	Execute the command
2322	Check if node is installed .
2323	Install a package
2324	Prompt the current version
2325	Install the remote node
2326	List all available versions
2327	Runs the NVM .
2328	Properties of each element .
2329	Creates a deferred subject .
2330	Properties of PromiseSubject
2331	Retrieve a value from the store .
2332	Recursively resolves references to the given value .
2333	Format a string .
2334	Format an object .
2335	Export public key .
2336	Returns the primary key for the given metadata .
2337	Format a map .
2338	Loads an object from the cache .
2339	Merges the cache control controls .
2340	Generate the expiration time for the given headers .
2341	Generate response headers .
2342	Checks if the given expiry is expired .
2343	Format a set .
2344	Format an array .
2345	Reset data
2346	Recursively serialize data into an object
2347	Explode data into an array .
2348	Subject constructor .
2349	Initialize a user .
2350	Parse the input files
2351	Create a new folder
2352	Create a temporary directory
2353	Replace the old temp file with the same content
2354	Get the file configs
2355	Parses the parsed path and returns the parsed path
2356	Replaces the content of the old content
2357	Create a new directory
2358	Scan text .
2359	Constructs a Keystone client .
2360	Find all parents of a tree .
2361	Find all children of a class
2362	Make a list of classes
2363	Creates a list of children of a list of classes .
2364	Gets the parent class for the given doclet .
2365	Tag .
2366	Handle an option .
2367	Create an error object .
2368	Create a ChildAndParentsRelationship relationship .
2369	Creates a new ArtifactMetadata instance .
2370	FeatureSet constructor .
2371	Get cookie value
2372	Register a plugin .
2373	Create a ChangeInfo object
2374	Create a new remote repository .
2375	Push a branch to a remote branch .
2376	Run synchronously .
2377	Run asyncously .
2378	Creates a comment .
2379	Watch a directory .
2380	Add a directory to the list
2381	start watcher
2382	Checks if a directory exists
2383	Notify that the given path should be notified .
2384	Decorate a function .
2385	Create a mock instance
2386	Move the current time
2387	Create a new scheduler
2388	Gets the unscheduler for the given id .
2389	Runs all scheduled schedules .
2390	Start GC .
2391	NameFormInfo constructor
2392	Create a new OAuth2 instance
2393	Force a value to be in range
2394	Insert an item into the list
2395	Validates token .
2396	Event constructor .
2397	Creates a new token .
2398	Returns a FeedbackInfo instance
2399	Reservation object
2400	Returns a new SearchInfo instance
2401	Async function for async
2402	Safely call function .
2403	Wraps a function with the given function .
2404	Removes all elements from an array
2405	Uniqify a set of elements
2406	Base constructor .
2407	Recursively memoize a function .
2408	Multiplies the given number of elements .
2409	Checks if a node is a block .
2410	Initialize the given pattern .
2411	Wrap an array .
2412	Format padding .
2413	Check if two strings are padded
2414	Creates a new Extglob .
2415	Match a list of patterns .
2416	Sync a source
2417	Creates a stream from a source
2418	Generate a list of tasks .
2419	Get a list of tasks from a source
2420	Generate a list of tasks .
2421	Convert patterns to tasks .
2422	Returns a list of negative patterns that match the given patterns .
2423	Group patterns by base directory
2424	Convert a list of patterns to tasks .
2425	Finds a collection of patterns that match the given positive base base base .
2426	Convert a pattern to a task group .
2427	Returns true if the pattern matches the pattern .
2428	Remove all entries in the cache .
2429	Load a file from a file
2430	Writes the object to the file .
2431	Load a document
2432	Delete a document
2433	Sets a value in the cache .
2434	Gets the next link .
2435	Matches a list of files matching the given patterns .
2436	Match files matching a pattern .
2437	Check if a file path matches a pattern .
2438	Returns true if the file matches the given pattern .
2439	Check if a file matches a pattern .
2440	Match keys in an object .
2441	Matches a pattern .
2442	Convert a glob to a regular expression .
2443	Wrap a glob
2444	Creates a regex .
2445	collapse a string
2446	Exponential exponential expression .
2447	Split a string into a list of whitespace .
2448	Filters an array of elements .
2449	Extract a glob from a string
2450	Wrap a string .
2451	Converts a pattern to a regular expression .
2452	Copies the given value into this object .
2453	Attempts to advance the next token .
2454	Basic source map
2455	Compares the mapping for the original mapping .
2456	Compares the mapping between two definitions .
2457	Computes the source URL for the source map .
2458	Corked request .
2459	clear buffer
2460	Create a new node
2461	Append a value to the given node .
2462	Creates a new instance of the compiler .
2463	Errors an error .
2464	Call compiler .
2465	Compiles the AST node .
2466	Initialize parser .
2467	Registers a parser .
2468	Add a token to the stack .
2469	Removes an item from the stack .
2470	Returns the last element of the node .
2471	Parse a string
2472	Registers a new token .
2473	Return the next token .
2474	Parses the next token .
2475	Parse a string .
2476	Mixin compiler .
2477	Write a buffer to the end of the stream .
2478	Convert a range to a pattern .
2479	Define a function .
2480	Wrap a function .
2481	Return a memoized function for a function .
2482	Creates a proxy for a given object .
2483	Subregister a subregister .
2484	Register a directory .
2485	Set container status
2486	Lstat files .
2487	Read a directory structure .
2488	Converts a property name to an attribute name .
2489	Generate command - line commands
2490	Initialize Limon .
2491	Creates a task planner .
2492	Reset the given strip .
2493	Reset the given strip .
2494	Create a new definition
2495	Register a handler for the given type .
2496	Creates a new promise
2497	Apply arguments to the set .
2498	Call a set of objects
2499	Create a new promise .
2500	Add a promise to the promise
2501	Create a new promise .
2502	Executes the given performer .
2503	Create a new instance of the given schema .
2504	Create a new rule
2505	Creates a postcss rule for the given breakpoints .
2506	Destroy this definition
2507	Loads the configuration file .
2508	Save the config file
2509	Get server options
2510	Get all resources in the store
2511	Convert an object to a URL
2512	Determine if the given ray is in a circle
2513	Generate the URL for the scope
2514	Fetch a single page
2515	Module constructor
2516	Get the parameter names of a function
2517	Get changed properties
2518	Updates this definition .
2519	Find elements by selector
2520	Subscribes a template
2521	Creates a signature for the given parameters .
2522	Finds the color of the given index .
2523	Update node color
2524	Update the main control box
2525	Sets the center of the graph .
2526	Detects all nodes fixed .
2527	Calculates the fade out of a node
2528	Find element by node
2529	Get the coordinates of the element
2530	Get a SVG element from an element type
2531	Hide the context menu .
2532	Checks if two nodes are connected .
2533	Called when the control is clicked .
2534	Update the control level
2535	Called when a control menu is clicked .
2536	Called when the context is clicked .
2537	Called when a control table is clicked .
2538	Called when a control is clicked
2539	Hide the node context menu
2540	Called when a node is clicked .
2541	Called when a node is clicked .
2542	Called when a node is clicked .
2543	Resize the graph .
2544	Called when a node is clicked
2545	Recursively recycle the graph
2546	Reverse graph links
2547	Update the menu UI menu
2548	Updates the table UI
2549	Update the table uixtent
2550	Calculate the zoom of the node .
2551	Get window width
2552	Creates a new css instance
2553	Respond to success
2554	Handle an error
2555	Creates a request .
2556	Create a new http server
2557	Setup the server
2558	Attach an event to an element
2559	Represents a reply .
2560	Serve a file
2561	Process a file list
2562	package module
2563	Ebus constructor
2564	Create a new ApiClient
2565	Get the first index of a value .
2566	Get the scope of the division .
2567	Creates a new Customer .
2568	Creates a copy of an object .
2569	Format a message with options .
2570	Create a zip file
2571	Extract a zip file from a source file
2572	Create a tarball from source directory
2573	Extract a tarball from a source file
2574	Make a directory .
2575	Iterate over the given stack .
2576	Reads a filepath .
2577	Creates an iterator for the given entity .
2578	Checks if a file is a JS file .
2579	Checks if value is empty
2580	Click the menu .
2581	Create a shell stream .
2582	Constructor for constructor
2583	Sets the properties of this object .
2584	Generate a binary file for this instance
2585	Generate a hash
2586	Generate the code for the constructor
2587	Compiles the contents of a file .
2588	Streams the contents of a stream .
2589	Called when the file is decoded .
2590	Creates a journal .
2591	Log creation event
2592	Log an event .
2593	Report the event list
2594	Get the scope of the team center
2595	Creates a new ArticleTranslation object .
2596	Creates a MacroAction .
2597	Maps a JSON object to an object
2598	Creates a function that invokes the given function .
2599	This function is called when the code is a deprecated error .
2600	Returns the index of a primitive .
2601	Loads a network request .
2602	Add a new file to the list of files
2603	batch forms
2604	Parse JSON string
2605	Creates a URL for the scope .
2606	Reconnecting WebSocket .
2607	Returns the first index of an array in the given array .
2608	Write a path to a file
2609	Returns a list of main files
2610	Initialize the object .
2611	Add an object to the list
2612	Generate a chunk of items
2613	Get a property name .
2614	Extend the object .
2615	Returns a string representation of this object .
2616	Generate a factory .
2617	Generates code for the factory .
2618	Generate a function for the given instance .
2619	Getter for property getter
2620	Client constructor .
2621	Create a new ImageLoader
2622	Loads images
2623	Loads an image
2624	Convert images to src
2625	Sort images .
2626	Builds a function from a list of environment variables .
2627	Validate an ID
2628	Returns an array of unique elements
2629	Set the function definition
2630	Set the callback
2631	Class constructor .
2632	Creates a new resource .
2633	Returns a slug for a resource container .
2634	Returns a list of all content files
2635	Gets the content of a given chapter .
2636	Create a new container .
2637	Opens a container .
2638	Inspect a resource .
2639	Creates a new user preference .
2640	Returns an updater for an AST node .
2641	Update AST node .
2642	Get the annotated node .
2643	Returns the location string for the given line .
2644	Creates a Macro .
2645	Computes the sort of a sorted array .
2646	Computes the pivot point for a given position .
2647	Partition a set of elements .
2648	Sorts an array of elements in ascending order .
2649	Search for page
2650	Creates a pipe stream .
2651	Wrap all methods on the console .
2652	Connect to stdout
2653	Add error handlers
2654	Resolve routes .
2655	Build function for building a function .
2656	Get the API key
2657	Get a resource
2658	Sign a message .
2659	Hash a message
2660	Add signature headers .
2661	Wait for a variable to be evaluated .
2662	Wait for an attribute to be checked .
2663	Set the current view
2664	Remove the current view
2665	Merge all objects into an object
2666	Parse quality value
2667	Get the color of a hexadecimal color .
2668	Check if a command exists .
2669	Executes a command .
2670	Initialize dynamic list
2671	Change all versions
2672	Adds the settings for the article .
2673	Render an article
2674	Reset article .
2675	Load google fonts
2676	Sorts an array of elements by the given order .
2677	This function is used to inject a NgInject .
2678	Sets the model s model .
2679	Get the URL for a user
2680	Processes a node .
2681	Creates a new application .
2682	Assigns to the global environment
2683	Creates a new Company .
2684	Inspects an AST node .
2685	Gets the annotation candidates for the given node .
2686	Follow the given node .
2687	Shutdown the server .
2688	Transforms a request to a request .
2689	Calculate the number of characters .
2690	Create a new colgroup
2691	Determines if a string is a short date
2692	Checks if a call expression is a call expression .
2693	Subscribe to log
2694	Creates a new git repository .
2695	Recovery public key .
2696	calculatePubKeyRecovery parameter
2697	Add permissions to this object .
2698	Set the permissions for the given roles .
2699	The DAO implementation .
2700	Model constructor .
2701	Proxied model .
2702	Creates a proxy proxy .
2703	Gets the value of the model .
2704	Detect destination type
2705	Generate a random color
2706	Apply a function to the canvas
2707	Get the color of the image
2708	Set the color of the image
2709	Apply a factor to the image .
2710	Write a PNG image to a file .
2711	Convert PNG image to base64
2712	Returns true if two arrays are equal .
2713	Asserts that the given function is a helper function .
2714	Determine if filepath is ignored
2715	Render input prompt
2716	Calculates the color of the selected color .
2717	Render errors .
2718	Get a GET request
2719	PUT PUT request
2720	Properties of a given schema .
2721	Create a yaml schema .
2722	Load YAML file .
2723	Loads a theme .
2724	Loads a theme object
2725	Write data to destination .
2726	Initialize the configuration .
2727	Redact the theme
2728	Redirect to destination
2729	Returns a string representation of a map .
2730	Convert an object to a string
2731	Parse value .
2732	generate a random GUID
2733	Returns a string representation of an object .
2734	Returns a string representation of the given values .
2735	Construct a RESTResponse
2736	Iterate over a map .
2737	Register a component .
2738	Returns an instance of a component .
2739	This is a utility method that runs the Japptop .
2740	Serialize a node .
2741	Get the value of an attribute .
2742	Initialize the schema .
2743	Inserts a list of Sorters into the list .
2744	Sorts a list of Sorters .
2745	Removes all Sorters from the list
2746	Find the first item in the collection .
2747	Set the value of an attribute .
2748	Check if the input is checked
2749	Focus the input element
2750	Removes the blur element .
2751	Sets the selection range
2752	Convert date to string
2753	Calculate the given interval .
2754	Calculate the difference between min and max .
2755	Calculate a new date .
2756	Get the options for the given message type .
2757	Parse a message type
2758	Outputs stdout to stdout
2759	Assigns defaults to defaults
2760	Find all pages in the given path .
2761	Write the result to the file .
2762	Creates a function that invokes the given function .
2763	Check if Selenium server is running
2764	Install driver .
2765	Initialize webdriver instance
2766	Run mocha test
2767	End the selenium session
2768	Update the current job
2769	Finish the grunt task
2770	Render the response body
2771	Merges a value into an option .
2772	Merge options into options
2773	Determine if the given key is not present .
2774	Search for a source object
2775	Add a new reducer
2776	Removes the given scope and type .
2777	Replace the reducers
2778	Converts a value to an integer .
2779	Write an error message .
2780	Flush all messages
2781	Get config from file
2782	Checks if file is ignored .
2783	Extracts all styles from src
2784	Reads the precommit hook .
2785	Loads the checkers plugins .
2786	Remove a class from the DOM .
2787	Add a class name to the DOM .
2788	Sets the width of the image .
2789	Get the style of the specified property .
2790	Set the value of a property .
2791	Get the view size of the element
2792	Returns true if the element is transparent .
2793	Prints the number of files .
2794	Encode a string
2795	Decodes a string .
2796	Generate a nonce
2797	Returns a string representation of a header string .
2798	Generate signature base string .
2799	Generate the signature of the application .
2800	Sets the values of the slider .
2801	Gets the values of the items .
2802	Add translations to the given locale
2803	Sets the pressed buttons .
2804	Add new buttons to the list
2805	Sets the value of the selected value
2806	Create a new RPC .
2807	Create a new channel
2808	Creates a continuation .
2809	Extracts the description from a file .
2810	Add a comment .
2811	Expect keyword .
2812	Parse an array of elements .
2813	Parse a property function .
2814	Parse a postfix expression .
2815	Parse unary expression .
2816	Recursively reinterpret an expression .
2817	Parse an expression statement .
2818	Parse a return statement .
2819	Extend an object .
2820	refresh text
2821	Checks if a file is absolute .
2822	Repeat a string .
2823	Returns a set of elements in an array .
2824	Log an error message
2825	Wrap a command .
2826	Write a directory to a directory
2827	Creates a directory recursively .
2828	Splits a path into an array .
2829	update stdout
2830	Format diff .
2831	Construct a GNTP client
2832	Creates a new Growly instance .
2833	Creates a new command .
2834	Computes the difference between two arrays .
2835	Returns the next token .
2836	Parse an identifier .
2837	Parse a destructuring value .
2838	Assertion .
2839	Checks if the given object is an object .
2840	Executes a command .
2841	Add nargs to the next argument .
2842	Set config options
2843	Extend aliases .
2844	Checks if the given key is a valid flag
2845	Guess the type of a key .
2846	Returns the maximum width of the table .
2847	Normalize aliases .
2848	Returns a string representation of a value .
2849	Find the attribute value for an attribute
2850	Get passport passports
2851	Write a file
2852	Create a directory
2853	Check if a directory is empty
2854	Constructs a new database definition .
2855	Redirect to the current action .
2856	Construct a GRelRequest object
2857	Handle a response .
2858	Split the content of a header .
2859	Scroll the scroll to the specified position .
2860	Scroll to the container
2861	Scroll to the specified position .
2862	Creates a new container instance .
2863	Add a list of actions
2864	Converts a pattern to a string .
2865	Uploads a file to a file .
2866	Download file transfer .
2867	Apply a filter to the collection .
2868	Iterate over all items in the window
2869	Returns a new collection with the given function .
2870	Removes an item from the collection .
2871	Removes all items from the collection .
2872	Returns the index of the given item .
2873	Check if an item exists in the collection
2874	Returns a range of items in this collection
2875	Returns the index of the items in the collection
2876	Returns a copy of this collection .
2877	Set the title of the month
2878	Sets the year of the selected items .
2879	Calculate the slots in the calendar
2880	Calculate the number of days
2881	Checks if the user is public .
2882	Returns the back button text .
2883	Creates a proxy for the given element .
2884	Plugin plugin .
2885	Default map function
2886	Schedule a job
2887	Define a validator .
2888	Undefine a type .
2889	Check if a type is valid
2890	Returns a list of all defined names .
2891	Check if a comment is a license
2892	Get the value of a path .
2893	Load settings from a file .
2894	Returns the size of the element .
2895	Generate form data
2896	get document width
2897	Returns the orientation of the element
2898	Creates a new observable .
2899	Initialize the start event .
2900	Compares two arrays .
2901	Compare two arrays
2902	Convert a JSON object to an object
2903	Sorts the items in the collection .
2904	Sorts the given mapping .
2905	Apply a function .
2906	Detects the device class .
2907	Detects window width
2908	Creates a CSV file .
2909	Inserts an array at the specified position at the specified position .
2910	Remove all models from the model .
2911	Removes a model from the collection .
2912	Determines if the current path is a valid root .
2913	Returns the template data for the given view .
2914	Clears the template cache .
2915	Removes a template from the cache .
2916	Clears the template cache .
2917	Copy a cache entry .
2918	Creates a template cache for the given template .
2919	Update the data cache
2920	Registers a cache alias .
2921	Determines if the given error is a declarative view .
2922	Create a custom error type
2923	Returns a callback for the given name .
2924	Adds a command to the storage .
2925	Sets an event handler .
2926	Recursively iterates over all of the events .
2927	Add a callback to the future .
2928	Swap the view .
2929	Removes the view .
2930	Add region definitions .
2931	Add a new region
2932	Remove all regions
2933	Remove a region .
2934	Loads a template from the cache .
2935	Compile the template .
2936	Render a template
2937	Merge template helpers
2938	Bind events to the model .
2939	Delegates to the view .
2940	Unbinds the model events .
2941	Destroy the component .
2942	Initialize the view .
2943	Trigger the event .
2944	Get all child views .
2945	Serialize the collection .
2946	Render the template .
2947	Initialize the collection .
2948	Add a child to the collection .
2949	Sorts the view .
2950	Render the collection .
2951	Create a new child view
2952	Returns a list of models in the collection .
2953	Render the empty view .
2954	Add a child view .
2955	Render a child view .
2956	Render the view .
2957	Create a new child view
2958	Removes the specified view .
2959	Create a new document fragment .
2960	Inserts a child view into the collection .
2961	Sorts the given child view .
2962	Destroy the collection .
2963	Remove all child views
2964	Listen to the view
2965	Serialize the model .
2966	Renders the view .
2967	Render the template
2968	Creates a new ItemView .
2969	Renders the view .
2970	Destroy this item
2971	Add a list of regions
2972	Sets the regions .
2973	Initialize the region manager
2974	Returns the behavior class for the given key .
2975	Parse the given behaviors .
2976	Sets the triggers for the given behavior .
2977	Registers a new behavior .
2978	Handle a route
2979	Create a new module
2980	Sets the regions .
2981	Registers the region manager .
2982	Initialize the channel .
2983	Stop all modules .
2984	Add a module definition
2985	Add a definition .
2986	Get the name of a function .
2987	Returns the path of the path .
2988	Move this entry to another file .
2989	Gets the parent directory .
2990	Gets the directory .
2991	Initialize the file system .
2992	Writes a file entry .
2993	Returns a copy of an object .
2994	Called when the node is closed .
2995	Creates a new MultiKeyCache .
2996	Creates a new pipe with the given arguments .
2997	Creates the raw HTML for the given element .
2998	Creates a complex template .
2999	Get templates for a template language .
3000	Define a model .
3001	Creates a new model .
3002	Create a new Point
3003	Sets the active tab for the given tab .
3004	Create a new point from two points
3005	Computes the distance between the line segments .
3006	Sets the socoids socket .
3007	Timeout callback .
3008	Returns the width of a string .
3009	Convert source to destination .
3010	Copy source to destination .
3011	Add property names to tracker
3012	Add a method to the tracker .
3013	Convert an object to an object
3014	Constructs a SyncProxy object .
3015	Set the content of the block .
3016	Convert attributes to an object
3017	Returns a copy of this node .
3018	Initialize block init .
3019	Create a new block node .
3020	Creates a customizer customizer .
3021	Wraps the wrapped function .
3022	Add accessors to the iterator
3023	Set the value of the wrapper for the given property .
3024	Called when the lifecycle is removed .
3025	Called when the block is inserted .
3026	Creates a new object from an object
3027	Converts a hash to a hash .
3028	Convert properties to camelCase
3029	Returns a list of dashed keys for a hash .
3030	Executes the query against the given selector .
3031	Returns true if the component matches the given selector .
3032	Decorator for Telemetry
3033	Executes a SQL transaction .
3034	Get a single row by index .
3035	Create a payload for the given data .
3036	Ensure that the given types are valid .
3037	Assign an object to the given parent .
3038	Compare two nodes .
3039	Returns a list of child nodes .
3040	Request file system .
3041	Create a new request
3042	Check if a field exists
3043	Create the project .
3044	Prewatch options
3045	Add filters to the list
3046	Remove filters from the list
3047	Wraps the result of a function .
3048	Returns the result of the wrapped function .
3049	Snapshot instance .
3050	Converts a string to a string
3051	Create an object from an object
3052	Generate a unique identifier
3053	Parse a select statement
3054	Checks if the given object exists .
3055	Validates the given fields
3056	Check if a field exists
3057	Check if the given relationship exists
3058	Get an object by type
3059	Parses an array of records and returns the results
3060	Checks if the sequence matches the given object .
3061	Add the contents of a list of contents
3062	Add top level to top level
3063	Creates a new remoting method .
3064	Handles the callback .
3065	Connect to the server
3066	Gets a transaction .
3067	Creates a new transaction
3068	Serialize a transaction .
3069	Send a request to the queue .
3070	Send callbacks
3071	Creates a new transaction .
3072	Request a transaction
3073	Fix inline block fix .
3074	Stubs the contents of the given resource root .
3075	Resolve the webbrains directory .
3076	Create a route .
3077	Create a TelemetryTransport .
3078	Get a random value
3079	Returns a random number of dinosaurs .
3080	Creates a response .
3081	Set the response body
3082	Send JSON response
3083	Set a header value .
3084	Parses the response body
3085	Checks that the given arguments are valid .
3086	Checks that the expected arguments are expected .
3087	Raises an error if there is no arguments .
3088	Checks if the given index matches the expected value .
3089	Checks if the given value matches the expected value .
3090	Checks if the given value matches the expected value .
3091	Returns a string representation of the expected arguments .
3092	Checks if value is a valid type .
3093	Checks if the given type is valid .
3094	Returns the name of the given value .
3095	Returns the name of the given type .
3096	Generate a URL for a request
3097	Get the state from the given options .
3098	Validate a resource
3099	Prune a string .
3100	Attempt to render a JS file .
3101	Validates an array of indexes
3102	Add route routes
3103	Generate a UUID
3104	Generate a random string
3105	Convert string to Uint8Array
3106	Convert a string to an array .
3107	Hide the back button
3108	Log a message .
3109	Copy file from source to destination
3110	Copies the files matching the given match .
3111	Replace all files in the given source .
3112	Unlink all files in the given location .
3113	Check if a directory exists
3114	Validates a file path
3115	Returns a list of subdirectories with the given filename .
3116	Resolve path .
3117	Resolve directory matches .
3118	Compare two numbers
3119	Return a list of directories .
3120	Remove a menu
3121	Hide the menu
3122	Hide the menu
3123	Hide menu
3124	Show menu .
3125	Initialize the filesystem
3126	Get the hierarchy
3127	Gets the backend configuration
3128	Get backend config
3129	Get a file
3130	Saves a file to the backend .
3131	Get the overrides of the given backend .
3132	Done callback function
3133	Fail an error
3134	Apply the data to the model .
3135	Returns true if an array contains the given values .
3136	Cleans up a URL .
3137	Parse query object
3138	Initialize the tab .
3139	Convert an object to a string
3140	Get the anchor of the element
3141	Iterate over all items in the collection
3142	Get file entry
3143	Returns true if the element matches the given text .
3144	Initialize the container .
3145	Initialize the container .
3146	Get the item by index .
3147	Creates a script .
3148	Loads a script .
3149	Load a partial file
3150	Convert a record to an object
3151	Add a new provider
3152	Removes a provider
3153	Initialize the application .
3154	Get a controller instance
3155	Called when the item is added .
3156	Remove an item from the list
3157	Remove all items from the list
3158	Set the active item
3159	Get all items in this collection
3160	Checks if an element is selectable
3161	Parses a number .
3162	Convert a value to a number
3163	Convert a value to a floating point
3164	Logs the request .
3165	Convert an object to a Date object
3166	Handle type conversions
3167	Define a route
3168	Generate a route URL
3169	Creates a password hash .
3170	Creates a new SQL query .
3171	Decorate a node .
3172	Updates the current node .
3173	Remove a node from the DOM
3174	Remove all children of this node .
3175	Destroy all child nodes
3176	Adds a new node to the DOM .
3177	Remove a child node .
3178	Removes all child nodes .
3179	Sorts the list of children .
3180	Expand all child nodes
3181	collapse all children
3182	Dispatch the next target function
3183	Initializes the mask
3184	Generate a unique id
3185	Copy properties from source
3186	Remove all listeners
3187	Add an action .
3188	Remove a property from an object
3189	Create a new store
3190	Node constructor .
3191	Creates a concatenated string .
3192	Configure the reducer .
3193	Creates a new observable .
3194	Initialize the drag event .
3195	Returns the relative path of the given root .
3196	Rebase a relative path
3197	Returns the level of the given level .
3198	Log a message .
3199	Checks if a path is a simple identifier .
3200	Accept a key .
3201	Accepts a given node .
3202	Accepts an array .
3203	Compile the input .
3204	Reduces a list of child nodes .
3205	Node constructor .
3206	Add a promise to the queue .
3207	Executes the queue and returns a promise .
3208	Flush the queue .
3209	Set the values of this record .
3210	Returns a list of all fields of this container
3211	Gets the current field .
3212	Returns true if the point is within the given point .
3213	Executes ssh command sequence .
3214	Replace all references in the AST node .
3215	Generate a unique name .
3216	Replace class declarations .
3217	Parse a variable declaration .
3218	Create a new Item
3219	Handle an event .
3220	Bind an event to an event .
3221	Creates a new node with the given options .
3222	Creates a function that returns an array with the given value .
3223	Initializes a DHTMLXXTool object .
3224	Sets the data of the model .
3225	Returns all the children of this model .
3226	Returns the model at the given index .
3227	Returns the first element of this model .
3228	Get the value of a path .
3229	Gets the model s data .
3230	Generate a random token
3231	Reset a password token
3232	Send an email to the user .
3233	Sort issues .
3234	Removes all collaborators from the list of collaborators .
3235	Extracts subtask numbers from a super issue
3236	Format the issues .
3237	Merges issues and PRs into PRs
3238	Create a new Sprinter instance
3239	Gets a callback for the given callback .
3240	List available adapters
3241	Read a config file
3242	Write a config file to the adapter .
3243	Handle all files
3244	Handle translation files
3245	Get the context from the template
3246	Render a page .
3247	Checks if node is a named function .
3248	Get the config for a function .
3249	Checks if the given node is a valid function .
3250	Sets the config property .
3251	Bind event map to event emitter
3252	Sets a new delay .
3253	Execute the given operation .
3254	Sets the exception of an operation .
3255	Returns the URL for the given request .
3256	Change the value of a date .
3257	Sets the value of the picker .
3258	Clone an object
3259	Create a new ImpulseBinBin .
3260	Initialize the component .
3261	Add a class to the list
3262	Set the animation for this component .
3263	Shows an animation .
3264	Sets the size of the rectangle .
3265	Add a component to the viewport
3266	Calculates the alignment of a component .
3267	Sets the current alignment info .
3268	Gets the parent of this component .
3269	Destroy this component .
3270	Called when an item is clicked .
3271	Handles back to the last item
3272	Go to a leaf
3273	Removes all functions from a program .
3274	Parse vehicle ID
3275	Format details .
3276	Get information about a specific application
3277	This method is called when the user can be made .
3278	Purchase a purchase .
3279	Completes the purchase
3280	Parses a key .
3281	Creates a new instance of the source function .
3282	Called when an event is changed .
3283	Returns a list of all checked values
3284	Sets whether the given values are checked .
3285	Refresh the text
3286	Converts a string into an object
3287	Initialize the store
3288	Creates a new collection .
3289	Find item by filter
3290	Constructor .
