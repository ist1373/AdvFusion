0	Create an instance of Axios
1	A CancelToken is an object that can be used to request cancellation of an operation .
2	Determine if a value is a view on an ArrayBuffer
3	Determine if we re running in a standard browser environment
4	Iterate over an Array or an Object invoking a function for each item .
5	Extends object a by mutably adding to it the properties of object b .
6	This function writes a minimal package . json file for a compiled package . It defines name main author and license . It also defines types . n . b . types intended for development usage only .
7	Handle messages from the server .
8	Attempt to update code on the fly fall back to a hard reload .
9	This function reads code updates on the fly and hard reloads the page when it has changed .
10	Cleans up webpack error messages . eslint - disable - next - line no - unused - vars
11	Ensure a fixed number of decimal places . Safe for large numbers .
12	Parse a segment and convert it into json .
13	Parse a buffer to a array of segments
14	Parse a everiToken s QRCode Text
15	Calculate the value of keyProvider
16	Additional forms of entropy are used . A week random number generator can run out of entropy . This should ensure even the worst random number implementation will be reasonably safe .
17	Adds entropy . This may be called many times while the amount of data saved is accumulatively reduced to 101 integers . Data is retained in RAM for the life of this module .
18	This runs in just under 1 second and ensures a minimum of cpuEntropyBits bits of entropy are gathered .
19	This method does not use a checksum the returned data must be validated some other way .
20	Run self - checking code and gather CPU entropy .
21	xR mod m
22	Verify signed data .
23	Recover the public key used to create this signature using full data .
24	Targeted scripts can only be invoked by you the user eg via a right - click option on the Sites or History tabs
25	A set of fields can appear grouped together .
26	A loader alerts a user to wait for an activity to complete .
27	An item can contain content .
28	A table displays a collections of data grouped into rows .
29	A rail is used to show accompanying content outside the boundaries of the main view of a site .
30	Buttons can be grouped .
31	A row sub - component for Grid .
32	A field is a form element containing a label and an input .
33	A card can contain blocks of content or extra content meant to be formatted separately from the main content .
34	An item view presents large collections of site content for display .
35	A comment can contain an image or avatar .
36	A statistic can contain a label to help provide context for the presented value .
37	A feed can contain a meta .
38	A container limits content to a maximum width .
39	A set of steps .
40	A divider visually segments content into groups .
41	A header provides a short summary of content
42	A grid is used to harmonize negative space in a layout .
43	A breadcrumb is used to show hierarchy between content .
44	A card can contain a description with one or more paragraphs .
45	A group of items .
46	A column sub - component for Grid .
47	An item can contain an image .
48	A group of cards .
49	A table can have rows .
50	A feed contains an event .
51	A tab pane holds the content of a tab .
52	A list item can contain a content .
53	Button groups can contain conditionals .
54	A table row can have cells .
55	A divider sub - component for Breadcrumb component .
56	A message can contain a list of items .
57	A table can have a footer .
58	Comments can be grouped .
59	A reveal displays additional content in place of previous content when activated .
60	A segment is used to create a grouping of related content .
61	A placeholder can contain have lines of text .
62	A content sub - component for the Reveal .
63	A feed can contain a like element .
64	A placeholder is used to reserve splace for content that soon will appear in a layout .
65	An accordion allows users to toggle the display of sections of content .
66	A placeholder can contain an image .
67	A dropdown menu can contain a menu .
68	A list item can contain an icon .
69	An ad displays third - party promotional content .
70	A group of statistics .
71	A statistic emphasizes the current value of an attribute .
72	A group of segments can be formatted to appear together .
73	A table can have a header cell .
74	A feed presents user activity chronologically .
75	A label can be grouped .
76	A feed can contain an extra content .
77	A dropdown menu can contain dividers to separate related content .
78	A feed can contain a summary .
79	A step can contain a content .
80	An image is a graphic representation of something .
81	Gets the pixel ratio of the canvas .
82	Applies the background to the canvas using CSS .
83	Creates a body sprite
84	Creates a body primitive
85	Initialises body properties .
86	Dynamically creates pages in the static website
87	Until webidl2js gains support for checking for Window this would have to do .
88	Normalize the event listeners options argument in order to get always a valid options object
89	generate SUMMARY . md by config . json
90	Returns the n Items string for this node generating and caching it if it hasn t been created yet .
91	Succinct definitions of keyword token types
92	This has a complexity linear to the value of the code . The assumption is that looking up astral identifier characters is rare .
93	Transform token names to formats expected by Sassdoc for descriptions and aliases
94	Rough heuristic used to find the package name for a given file . Idea is to move upwards looking for directories that have a package . json file . Once we find one we report back the name from that file .
95	Copyright IBM Corp . 2016 2018
96	Copyright IBM Corp . 2018 2018
97	Create a JSON file of documented Sass items
98	Remove duplicate objects in require and usedBy arrays . Array objects have name and type properties sometimes nested in a context object .
99	Create a markdown file of documented Sass items
100	this . options create - component mix - in creates prototype chain so that options given in constructor argument wins over the one defined in static options property Flatpickr wants flat structure of object instead
101	Append list item
102	Sorting method for multires nodes .
103	Sorting method for multires node rendering .
104	Draws multires nodes .
105	Creates new multires node .
106	Rotates a 3x3 matrix .
107	Turns a 3x3 matrix into a 4x4 matrix .
108	Creates a perspective matrix .
109	Processes a loaded texture image into a WebGL texture .
110	Finds and applies optimal multires zoom level .
111	Rotates perspective matrix .
112	Checks if a vertex is visible .
113	Create renderer and initialize event listeners once image is loaded .
114	Extract the requested tag from the XMP data
115	Displays an error message .
116	Hides error message display .
117	Displays about message .
118	Calculate mouse position relative to top left of viewer container .
119	Event handler for mouse clicks . Initializes panning . Prints center and click location coordinates when hot spot debugging is enabled .
120	Event handler for double clicks . Zooms in at clicked location
121	Calculate panorama pitch and yaw from location of mouse event .
122	Event handler for mouse moves . Pans center of view .
123	Event handler for mouse up events . Stops panning .
124	Event handler for touches . Initializes panning if one touch or zooming if two touches .
125	Event handler for touch movements . Pans center of view if one touch or adjusts zoom if two touches .
126	Event handler for mouse wheel . Changes zoom .
127	Event handler for key presses . Updates list of currently pressed keys .
128	Event handler for key releases . Updates list of currently pressed keys .
129	Updates list of currently pressed keys .
130	Animates moves .
131	Animates view using requestAnimationFrame to trigger rendering .
132	Converts device orientation API Tait - Bryan angles to a quaternion .
133	Computes current device orientation quaternion from device orientation API Tait - Bryan angles .
134	Event handler for device orientation API . Controls pointing .
135	Initializes renderer .
136	Triggered when render initialization finishes . Handles fading between scenes as well as showing the compass and hotspots and hiding the loading display .
137	Creates hot spot elements for the current scene .
138	Destroys currently created hot spot elements .
139	Renders hot spot updating its position and visibility .
140	Merges a scene configuration into the current configuration .
141	Toggles fullscreen mode .
142	Event handler for fullscreen changes .
143	Clamps horzontal field of view to viewer s limits .
144	Stops auto rotation and animated moves .
145	Loads panorama .
146	Loads scene .
147	Stop using device orientation .
148	Fire listeners attached to specified event .
149	Waits for the latchFunction to return true before proceeding to the next block .
150	cross - browser utility functions
151	converts val to float and sets precision if missing
152	code for operands & | ^
153	code for + and -
154	Inline resources from a string content .
155	build sass content to css
156	The routes used to define a resource .
157	Provides common functionality for a kafka producer
158	Global context used to evaluate standard IUAM JS challenge
159	An example handler with destructuring arguments
160	This function is wrapped to ensure that we get new options on first call . The options object is reused in subsequent calls when calling it directly .
161	The argument convention is options first where possible options always before response and body always after response .
162	Parses the reCAPTCHA form and hands control over to the user
163	The callback used to green light form submission
164	Metalsmith plugin to include static assets .
165	Defines the limits where to start or stop the stickiness
166	Install an around function ; AOP .
167	Install a before function ; AOP .
168	Copy file from template directory .
169	Copy multiple files from template directory .
170	Create an app name from a directory path fitting npm naming requirements .
171	Check if the given directory dir is empty .
172	Graceful exit for async STDIO
173	Load template file .
174	Main program .
175	Make the given dir relative to base .
176	Generate a callback function for commander to warn about renamed option .
177	Display a warning similar to how errors are displayed by commander .
178	echo str > file .
179	similar to _ . bind except it puts this as first argument to f followed be other arguments and make context f s this
180	Allow config file to override the list of availiable platforms
181	Devtools middleware compatible with default React Native implementation
182	Handles demo load events .
183	Prefixes substrings within the given strings .
184	Creates a new canvas from raw image data .
185	A smoothing function for small U - patterns .
186	Calculates the area under the line p1 - > p2 for the pixel p using brute force sampling .
187	Calculates the area under the line p1 - > p2 . This includes the pixel and its opposite .
188	Calculates orthogonal or diagonal patterns for a given offset .
189	Assembles orthogonal or diagonal patterns into the final area image .
190	Computes the delta distance to add in the last step of searches to the right .
191	Calculates the bilinear fetch for a certain edge combination .
192	TIME VALIDATION FOR DATA ENTRY
193	ripristino stato iniziale
194	control active check & header check
195	controllo elementi source
196	controllo elementi target
197	elementi da aggiungere
198	Debounced scroll handling
199	Returns strings based on the score given .
200	Returns a value between - 1 and 100 to score the user s password .
201	Checks for repetition of characters in a string
202	Initializes the plugin creating and binding the required layers and events .
203	Level up adapter that looks like an array . Doesn t support inserts .
204	etheruemjs - tx s Transactions don t behave quite like we need them to so we re monkey - patching them to do what we want here .
205	Parses the given data object and adds its properties to the given tx .
206	raised when the transaction is rejected prior to running it in the EVM .
207	See if any payloads for the specified methods are marked as external . If they are external and match the method list process them one at a time .
208	Compile SASS to CSS .
209	Require a brocfile via either ESM or TypeScript
210	This is where the action is .
211	verbose for performance reasons ; doesn t affect gzipped size
212	we need to collect all fields from all the fragments requested in the union type and ask for them in SQL
213	the selections could be several types recursively handle each type here
214	tell the AST we need a column that perhaps the user didnt ask for but may be necessary for join monster to ID objects or associate ones across batches
215	keys are necessary for deduplication during the hydration process this will handle singular or composite keys
216	if its a connection type we need to look up the Node type inside their to find the relevant SQL info
217	instead of fields selections can be fragments which is another group of selections fragments can be arbitrarily nested this function recurses through and gets the relevant fields
218	A helper for resolving the Node type in Relay .
219	a function for data manipulation AFTER its nested . this is only necessary when using the SQL pagination we have to interpret the slice that comes back and generate the Connection Object type
220	validate the data they gave us
221	take the sort key and translate that for the where clause
222	this is utilized by some of the global state functionality in order to get a clone that will not continue to be modified as the GlobalState mutates
223	Create an string of given length filled with blank spaces
224	Create a string corresponding to a Dictionary or Array literal representation with pretty option and indentation .
225	Create a valid Swift string of a literal value according to its type .
226	For quiptext introduced in 0 . 1 . 044
227	Creates new Audio node and with necessary event listeners attached
228	Initiates the audio file
229	Start playing the audio
230	Seeks to the position in the audio
231	Pauses the playing audio
232	Gets current position in the audio
233	Start recording audio
234	Stop recording audio
235	Release the media object
236	Convert native full path to ms - appdata path
237	Converts cdvfile paths to ms - appdata path
238	Prepares media src for internal usage
239	Extracts path filename and filesystem type from Uri
240	Creates hook script context
241	Remove capabilities with same names
242	Comparator function to pass to Array . sort
243	Runs up the directory chain looking for a . cordova directory . IF it is found we are in a Cordova project . Omit argument to use CWD .
244	Cd to project root dir and return its path . Throw CordovaError if not in a Corodva project .
245	Recursively deletes . svn folders from a target path
246	list the directories in the path ignoring any files
247	Tries to create a HooksRunner for passed project root .
248	Extracts shebang interpreter from script source .
249	Checks if the given hook type is disabled at the command line option .
250	cordova - js
251	Returns all script files for the hook type specified .
252	Returns script files defined by plugin developers as part of plugin . xml .
253	Gets application level hooks from the directrory specified .
254	Gets all scripts defined in config . xml with the specified type and platforms .
255	Gets hook scripts defined by the plugin .
256	Gets hook scripts defined by all plugins .
257	Cleans up duplicate capability declarations that were generated during the prepare process
258	Same as copy file but throws error if target exists
259	Represents a parsed specification for a plugin
260	returns relative file path for a file in the plugin s folder that can be referenced from a project file .
261	Handles all cordova platform commands .
262	Returns all the platforms that are currently saved into config . xml
263	Returns all the plugins that are currently saved into config . xml
264	Returns a list of plugins which the given plugin depends on for which it is the only dependent . In other words if the given plugin were deleted these dangling dependencies should be deleted too .
265	This is a local function that creates the new replacement representing the mutation . Used to save code further down .
266	Helper function for checking expected plugin IDs against reality .
267	Gets platform details from a directory
268	Removes the cordova - prefix from the platform s name for known platforms .
269	Processes a single message as encoded by NativeToJsMessageQueue . java .
270	exec engine scripts in order to get the current engine version Returns a promise for the array of engines .
271	returns a promise
272	Calls platformApi . prepare for each platform in project
273	find the best matching icon for a given density or size
274	Gets a map containing resources of a specified name from all drawable folders in a directory .
275	Gets and validates AndroidLaunchMode prepference from config . xml . Returns preference value and warns if it doesn t seems to be valid
276	Wraps an AndroidManifest file
277	Checks the warnings that were printed by the CLI to ensure that the code is listing the correct reasons for failure . Checks against the global warnings object which is reset before each test
278	return the version if it is in the versions array return null if the version doesn t exist in the array
279	emits warnings to users of failed dependnecy requirements in their projects
280	Validates the structure of a task . json file .
281	Stop! YAMLtime! existingVersions is the output of getNodeVersionsFromTravisYML
282	existingVersions is the output of getNodeVersionsFromTravisYML
283	1 . fetch . travis . yml
284	Given a groups array a package path and a dependency name returns whether that dep is ignored for that package in any group
285	returns a url object if you pass in a GitHub repositoryURL returns a string with an npm URL if you just pass in a dependency name
286	extracts lists of methods from each service object .
287	Get the facet values of a specified attribute from a SearchResults object .
288	Sort nodes of a hierarchical facet results
289	Add a numeric filter for a given attribute When value is an array they are combined with OR When value is a single value it will combined with AND
290	Clear numeric filters .
291	Add a hierarchical facet to the hierarchicalFacets attribute of the helper configuration .
292	Add a refinement on a normal facet
293	Exclude a value from a normal facet
294	Adds a refinement on a disjunctive facet .
295	addTagRefinement adds a tag to the list used to filter the results
296	Remove a facet from the facets attribute of the helper configuration if it is present .
297	Remove a disjunctive facet from the disjunctiveFacets attribute of the helper configuration if it is present .
298	Remove a hierarchical facet from the hierarchicalFacets attribute of the helper configuration if it is present .
299	Remove a refinement set on facet . If a value is provided it will clear the refinement for the given value otherwise it will clear all the refinement values for the faceted attribute .
300	Remove a negative refinement on a facet
301	Remove a refinement on a disjunctive facet
302	Remove a tag from the list of tag refinements
303	Generic toggle refinement method to use with facet disjunctive facets and hierarchical facets
304	Adds a refinement on a hierarchical facet .
305	Returns true if the facet is refined either for a specific value or in general .
306	Returns true if the facet contains exclusions or if a specific value is excluded .
307	Returns the list of all disjunctive facets refined
308	Let the user set a specific value for a given parameter . Will return the same instance if the parameter is invalid or if the value is the same as the previous one .
309	Let the user set any of the parameters with a plain object .
310	Get the current breadcrumb for a hierarchical facet as an array
311	Runs a command using the specified arguments .
312	Compiles embedded intrinsics used by the targets below .
313	Compiles shared bitcode used to build the targets below .
314	Compiles the JavaScript target .
315	Compiles the WebAssembly target .
316	a function returning the state object
317	Merge if exists
318	Create a Firebase batch from a syncStack to be passed inside the state param .
319	A function that returns a vuex module object with seamless 2 - way sync for firestore .
320	Merge an object onto defaultValues
321	gets an ID from a single piece of payload .
322	Firebase Create vuex - easy - firestore modules . Add as single plugin to Vuex Store .
323	parseCSV - Parses a CSV file into a hierarchy structure .
324	parseJSON - Parses a hierarchical JSON file that requires no further transformation .
325	parseFlatJSON - Parses a flat JSON file into a hierarchy structure .
326	Assert that the values match with the type specs . Error messages are memorized and will only be shown once .
327	Call a function while guarding against errors that happens within it . Returns an error if it throws otherwise null .
328	Given a DOM node return the closest ReactDOMComponent or ReactDOMTextComponent instance ancestor .
329	Given a DOM node return the ReactDOMComponent or ReactDOMTextComponent instance or null if the node was not rendered by this React .
330	Given a ReactDOMComponent or ReactDOMTextComponent return the corresponding DOM node .
331	Traverses the ID hierarchy and invokes the supplied cb on any IDs that should would receive a mouseEnter or mouseLeave event .
332	Generate a mapping of standard vendor prefixes using the defined style property and event name .
333	PooledClass looks for destructor on each instance it releases .
334	Translate native top level events into event types .
335	Does our fallback mode think that this event is the end of composition?
336	Get the value for a property on a node . Only used in DEV for SSR validation . The expected argument is used as a hint of what the expected value is . Some properties have multiple equivalent values .
337	For IE8 and IE9 .
338	For almost every interaction we care about there will be both a top - level mouseover and mouseout event that occurs . Only use mouseout so that we do not extract duplicate events . However moving the mouse into the browser from outside will not fire a mouseout event . In this case we use the mouseover top - level event .
339	We listen for bubbled touch events on the document object .
340	Get document associated with the event target .
341	Poll selection to see whether it s changed .
342	Set the textContent property of a node . For text updates it s faster to set the nodeValue of the Text node directly instead of using . textContent which will remove the existing node and create a new one .
343	Operations for dealing with CSS properties . This creates a string that is expected to be equivalent to the style attribute generated by server - side rendering . It by - passes warnings and security checks so it s not safe to use this value for anything other than comparison . It is only used in DEV for SSR validation .
344	Persistent host tree mode An unfortunate fork of appendAllChildren because we have two different parent types .
345	Capture errors so they don t interrupt unmounting .
346	Creates a unique async expiration time .
347	If already stringified - return original content
348	webpack 1 compat loader options finder . Returns normalized options .
349	webpack 1 compat rule normalizer
350	start from node self
351	pure node self
352	left top point
353	right bottom point
354	the second child of currentTree root excluding dragging node
355	append to prev sibling
356	append to current tree
357	Check if the word View is appended to selector and if it is strip it out
358	Get the process id of the most recent running application having the particular command line pattern .
359	Kill a process having the particular command line pattern . This method tries to send SIGINT SIGTERM and SIGKILL to the matched processes in this order if the process is still running .
360	Get the IDs of processes listening on the particular system port . It is also possible to apply additional filtering based on the process command line .
361	Stops and removes all web socket handlers that are listening in scope of the currect session .
362	Verify whether the given application is compatible to the platform where it is going to be installed and tested .
363	Returns true if the urlString is localhost
364	Normalizes platformVersion to a valid iOS version string
365	Update WebDriverAgentRunner project bundle ID with newBundleId . This method assumes project file is in the correct state .
366	Reset WebDriverAgentRunner project bundle ID to correct state .
367	Return the WDA object which appends existing xctest runner content
368	Retrieves WDA upgrade timestamp
369	Parses the actual path and the bundle identifier from the given path string
370	Save the given base64 data chunk as a binary file on the Simulator under test .
371	Get the content of given file or folder from iOS Simulator and return it as base - 64 encoded string . Folder content is recursively packed into a zip archive .
372	Get the content of given file or folder from the real device under test and return it as base - 64 encoded string . Folder content is recursively packed into a zip archive .
373	Capability set by a user
374	Get a simulator which is already running .
375	Update list of entities to test for collision .
376	Bounding sphere collision detection
377	Returns the state of the dpad as a THREE . Vector2 .
378	Make a URLSearchParams instance
379	Queue to contain LDAP requests .
380	Track message callback by messageID .
381	Establish basic socket connection
382	Initialize socket events and LDAP parser .
383	After connect register socket event handlers and run any setup actions
384	A graph memory structure
385	will add start class if final
386	Iterates through array by index and performs the callback on each element of array until the callback returns a truthy value then returns that value . If no such value is found the callback is applied to each element of array and undefined is returned .
387	Creates a map from the elements of an array .
388	average async stat takes about 30 microseconds set chunk size to do 30 files in < 1 millisecond
389	this implementation uses polling and stat due to inconsistencies of fs . watch and efficiency of stat on modern filesystems
390	Sets the current tokenValue and returns a NoSubstitutionTemplateLiteral or a literal component of a TemplateExpression .
391	Derived from the 10 . 1 . 1 UTF16Encoding of the ES6 Spec .
392	Current character is known to be a backslash . Check for Unicode escape of the form \ uXXXX and return code point value if valid Unicode escape is found . Otherwise return - 1 .
393	Scans a JSX identifier ; these differ from normal identifiers in that they allow dashes
394	Should not be called on a declaration with a computed property name unless it is a well known Symbol .
395	All container nodes are kept on a linked list in declaration order . This list is used by the getLocalNameOfContainer function in the type checker to validate that the local name used for a container is unique .
396	This is a useful function for debugging purposes .
397	Remove extra underscore from escaped identifier
398	Gets the nearest enclosing block scope container that has the provided node as a descendant that is not the provided node .
399	True if the given identifier string literal or number literal is the name of a declaration node
400	Return true if the given identifier is classified as an IdentifierName
401	Replace each instance of non - ascii characters by one two three or four escape sequences representing the UTF - 8 encoding of the character and return the expanded char code list .
402	Returns true if span contains other .
403	True if positioned at a list terminator
404	The allowReservedWords parameter controls whether reserved words are permitted after the first dot
405	Finds the highest element in the tree we can find that starts at the provided position . The element must be a direct child of some node list in the tree . This way after we return it we can easily return its next sibling in the list .
406	This function is only for imports with entity names
407	Resolves a qualified name and any involved aliases
408	A reserved member name starts with two underscores but the third character cannot be an underscore or the
409	Check if the symbol is used in export assignment
410	Return the type of the given property in the given type or undefined if no such property exists
411	Return the type of a binding element parent . We check SymbolLinks first to see if a type has been assigned by contextual typing .
412	Return the inferred type for a binding element
413	Return the inferred type for a variable parameter or property declaration
414	Return the type implied by a binding pattern element . This is the type of the initializer of the element if one is present . Otherwise if the element is itself a binding pattern it is the type implied by the binding pattern . Otherwise it is the type any .
415	Return the type implied by an object binding pattern
416	The local type parameters are the combined set of type parameters from all declarations of the class interface or type alias .
417	The base constructor of a class can resolve to undefinedType if the class has no extends clause unknownType if an error occurred during resolution of the extends expression nullType if the extends expression is the null value or an object type with at least one construct signature .
418	A type reference is considered independent if each type argument is considered independent .
419	The mappingThisOnly flag indicates that the only type parameter being mapped is this . When the flag is true we check symbols to see if we can quickly conclude they are free of this references thus needing no instantiation .
420	The signatures of a union type are those signatures that are present in each of the constituent types . Generic signatures must match exactly but non - generic signatures are allowed to have extra optional parameters and may differ in return types . When signatures differ in return types the resulting return type is the union of the constituent return types .
421	If the given type is an object type and that type has a property by the given name return the symbol for that property . Otherwise return undefined .
422	For a type parameter return the base constraint of the type parameter . For the string number boolean and symbol primitive types return the corresponding object types . Otherwise return the type itself . Note that the apparent type of a union type is the union type itself .
423	Return the symbol for the property with the given name in the given type . Creates synthetic union properties when necessary maps primitive types and type parameters are to their apparent types and augments with properties from Object and Function as appropriate .
424	This function is used to propagate certain flags when creating new object type references and union types . It is only necessary to do so if a constituent type might be the undefined type the null type the type of an object literal or the anyFunctionType . This is because there are operations in the type checker that care about the presence of such types at arbitrary depth in a containing type .
425	Get type from reference to class or interface
426	Get type from reference to type alias . When a type alias is generic the declared type of the type alias may include references to the type parameters of the alias . We replace those with the actual type arguments by instantiating the declared type . Instantiations are cached using the type identities of the type arguments as the key .
427	Add the given types to the given type set . Order is preserved duplicates are removed and nested types of the given kind are flattened into the set .
428	Check if a property with the given name is known anywhere in the given type . In an object type a property is considered known if the object type is empty and the check is for assignability if the object type has index signatures or if the property is actually declared in the object type . In a union or intersection type a property is considered known if it is known in any constituent type .
429	Determine if two object types are related by structure . First check if the result is already available in the global cache . Second check if we have already started a comparison of the given two types in which case we assume the result to be true . Third check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are equal and infinitely expanding . Fourth if we have reached a depth of 100 nested comparisons assume we have runaway recursion and issue an error . Otherwise actually compare the structure of the two types .
430	Return true if the given type is part of a deeply nested chain of generic instantiations . We consider this to be the case when structural type comparisons have been started for 10 or more instantiations of the same generic type . It is possible though highly unlikely for this test to be true in a situation where a chain of instantiations is not infinitely expanding . Effectively we will generate a false positive when two types are structurally equal to at least 10 levels but unequal at some level beyond that .
431	Check if a given variable is assigned within a given syntax node
432	Narrow the given type based on the given expression having the assumed boolean value . The returned type will be a subtype or the same type as the argument .
433	Return contextual type of parameter or undefined if no contextual type is available
434	In a variable parameter or property declaration with a type annotation the contextual type of an initializer expression is the type of the variable parameter or property . Otherwise in a parameter declaration of a contextually typed function expression the contextual type of an initializer expression is the contextual type of the parameter . Otherwise in a variable or parameter declaration with a binding pattern name the contextual type of an initializer expression is the type implied by the binding pattern .
435	Apply a mapping function to a contextual type and return the resulting type . If the contextual type is a union type the mapping function is applied to each constituent type and a union of the resulting types is returned .
436	Return true if the given contextual type provides an index signature of the given kind
437	In an object literal contextually typed by a type T the contextual type of a property assignment is the type of the matching property in T if one exists . Otherwise it is the type of the numeric index signature in T if one exists . Otherwise it is the type of the string index signature in T if one exists .
438	In an array literal contextually typed by a type T the contextual type of an element expression at index N is the type of the property with the numeric name N in T if one exists . Otherwise if T has a numeric index signature it is the type of the numeric index signature in T . Otherwise in ES6 and higher the contextual type is the iterated type of T .
439	If the given type is an object or union type if that type has a single signature and if that signature is non - generic return the signature . Otherwise return undefined .
440	Return the contextual signature for a given expression node . A contextual type provides a contextual signature if it has a single call signature and if that call signature is non - generic . If the contextual type is a union type get the signature from each type possible and if they are all identical ignoring their return type the result is same signature but with return type as union type of return types from these signatures
441	Given a JSX attribute returns the symbol for the corresponds property of the element attributes type . Will return unknownSymbol for attributes that have no matching element attributes type property .
442	Check whether the requested property access is valid . Returns true if node is a valid property access and false otherwise .
443	If indexArgumentExpression is a string literal or number literal returns its text . If indexArgumentExpression is a constant value returns its string value . If indexArgumentExpression is a well known symbol returns the property name corresponding to this symbol as long as it is a proper symbol reference . Otherwise returns undefined .
444	If type has a single call signature and no other members return that signature . Otherwise return undefined .
445	Returns the effective arguments for an expression that works like a function invocation .
446	Returns the effective argument type for the provided argument to a decorator .
447	Gets the effective argument type for an argument in a call expression .
448	Gets the effective argument expression for an argument in a call expression .
449	Gets the error node to use when reporting errors for an effective argument .
450	Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression .
451	Resolves a decorator as if it were a call expression .
452	candidatesOutArray is passed by signature help in the language service and collectCandidates must fill it up with the appropriate candidate signatures
453	Syntactically and semantically checks a call or new expression .
454	When contextual typing assigns a type to a parameter that contains a binding pattern we also need to push the destructured type into the contained binding elements .
455	DECLARATION AND STATEMENT TYPE CHECKING
456	Gets the promised type of a promise .
457	Check a decorator
458	Checks a type reference node as an expression .
459	Checks the type annotation of an accessor declaration or property declaration as an expression if it is a type reference to a type with a value declaration .
460	Check the decorators of a node
461	this function will run after checking the source file so CaptureThis is correct for all nodes
462	Check that a parameter initializer contains no references to parameters declared to the right of itself
463	Check variable parameter or property declaration
464	When errorNode is undefined it means we should not report any errors .
465	Check each type parameter and check that list has no duplicate type parameter declarations
466	Fully type check a source file and collect the relevant diagnostics .
467	Copy the given symbol into symbol tables if the symbol has the given meaning and it doesn t already existed in the symbol table
468	Gets either the static or instance type of a class element based on whether the element is declared as static .
469	Return the list of properties of the given type augmented with properties from Function if the type has call or construct signatures
470	Emitter support When resolved as an expression identifier if the given node references an exported entity return the declaration node of the exported entity s container . Otherwise return undefined .
471	When resolved as an expression identifier if the given node references an import return the declaration of that import . Otherwise return undefined .
472	When resolved as an expression identifier if the given node references a nested block scoped entity with a name that hides an existing name return the declaration of that entity . Otherwise return undefined .
473	Return a temp variable name to be used in export default statements . The temp name will be of the form _default_counter . Note that export default is only allowed at most once in a module so we do not need to keep track of created temp names .
474	targetSourceFile is when users only want one file in entire project to be emitted . This is used in compileOnSave feature
475	Return the next available name in the pattern _a ... _z _0 _1 ... TempFlags . _i or TempFlags . _n may be used to express a preference for that dedicated name . Note that names generated by makeTempVariableName and makeUniqueName will never conflict .
476	Generate a name that is unique within the current file and doesn t conflict with any names in global scope . The name is formed by adding an _n suffix to the specified base name where n is a positive integer . Note that names generated by makeTempVariableName and makeUniqueName are guaranteed to never conflict .
477	Encoding for sourcemap span
478	Create a temporary variable with a unique unused name .
479	Returns true if the code was actually indented false otherwise . If the code is not indented an optional valueToWriteWhenNotIndenting will be emitted instead .
480	Emit ES7 exponentiation operator downlevel using Math . pow
481	Returns true if start of variable declaration list was emitted . Returns false if nothing was written - this can happen for source file level variable declarations in system modules where such variable declarations are hoisted .
482	Emit an assignment to a given identifier name with a given expression value .
483	Create temporary variable emit an assignment of the variable the given expression
484	Ensures that there exists a declared identifier whose value holds the given expression . This function is useful to ensure that the expression s value can be read from in subsequent expressions . Unless reuseIdentifierExpressions is false expr will be returned if it is just an identifier .
485	Get source file from normalized fileName
486	Read tsconfig . json file
487	Parse the text of the tsconfig . json file
488	Like removeComputedProperties but retains the properties with well known symbol names
489	Returns relevant information for the argument list and the current argument if we are in the argument of an invocation ; returns undefined otherwise .
490	The selectedItemIndex could be negative for several reasons . 1 . There are too many arguments for all of the overloads 2 . None of the overloads were type compatible The solution here is to try to pick the best overload by picking either the first one that has an appropriate number of parameters or the one with the most parameters .
491	Get the token whose text contains the position
492	The token on the left of the position is the token that strictly includes the position or sits to the left of the cursor if it is on a boundary . For example
493	Get the corresponding JSDocTag node if the position is in a jsDoc comment
494	Strip off existed single quotes or double quotes from a given string
495	when containing node in the tree is token but its kind differs from the kind that was returned by the scanner then kind needs to be fixed . This might happen in cases when parser interprets token differently i . e keyword treated as identifier
496	Returns true if node is a element in some list in parent i . e . parent is class declaration with the list of members and node is one of members .
497	find node that fully contains given text range
498	formatting is not applied to ranges that contain parse errors . This function will return a predicate that for a given text range will tell if there are any parse errors that overlap with the range .
499	Returns true if the position is within a comment
500	getSemanticDiagnostiscs return array of Diagnostics . If - d is not enabled only report semantic errors If - d enabled report both semantic and emitter errors
501	Get a displayName from a given for completion list performing any necessary quotes stripping and checking whether the name is valid identifier name .
502	Finds the first node that embraces the position so that one may accurately aggregate locals from the closest containing scope .
503	Aggregates relevant symbols for completion in object literals and object binding patterns . Relevant symbols are stored in the captured symbols variable .
504	Aggregates relevant symbols for completion in import clauses and export clauses whose declarations have a module specifier ; for instance symbols will be aggregated for
505	Returns the immediate owning object literal or binding pattern of a context token on the condition that one exists and that the context implies completion should be given .
506	Filters out completion suggestions from symbols according to existing JSX attributes .
507	A node is considered a writeAccess iff it is a name of a declaration or a target of an assignment
508	Signature help This is a semantic operation .
509	Returns true if there exists a module that introduces entities on the value side .
510	for accurate classification the actual token should be passed in . however for cases like disabled merge code classification we just get the token kind and classify based on that instead .
511	Digs into an an initializer or RHS operand of an assignment operation to get the parameters of an apt signature corresponding to a function expression or a class expression .
512	compute a backend health score with time + status codes
513	This is just a basic origin http server that lets us control status codes .
514	This is an example of custom transform function
515	start to consider only if movement exceeded MOVEMENT_THRESHOLD
516	Bind swipe gesture handlers for an element .
517	TouchInfo is an object containing the following extended informations about any touch event .
518	Callbacks on touchstart
519	return current element transform matrix in a cross - browser way
520	set current element transform matrix in a cross - browser way
521	Recompose a transform from decomposition t and apply it to element e
522	loader . vue = > module . loaders . vue
523	Retrieves the payload from a JWT
524	Set a chapter as active in summary and update state
525	Return the hash of link for a chapter
526	Handle user scrolling
527	Insert a jquery element at a specific position
528	Create a dropdown menu
529	Create a new button in the toolbar
530	Remove a button provided its id
531	Remove multiple buttons from an array of ids
532	Toggle sidebar with or withour animation
533	Filter summary with a list of path
534	Bind all dropdown
535	Bind keyboard shortcuts
536	Add directive helper .
537	Directive encapsulates a directive function providing convenient methods and abstractions used by toxy higher layers to manage and configure directives .
538	Creates a new Toxy HTTP proxy .
539	Returns updated index module requiring and exporting the newly created environment .
540	Add postcss support to the given webpack base configuration object
541	Represents cluster and schema information . The metadata class acts as a internal state of the driver .
542	check for udts and get the metadata
543	Allows to store prepared queries and retrieval by query or query id .
544	Contains the error classes exposed by the driver .
545	Represents an error when a query cannot be performed because no host is available or could be reached by the driver .
546	Represents a client - side error indicating that all connections to a certain host have reached the maximum amount of in - flight requests supported .
547	Extends and validates the user options
548	Validates the policies from the client options .
549	Validates the protocol options .
550	Validates the socket options .
551	Validates the encoding options .
552	Sets the default options that depend on the protocol version .
553	Returns the typeInfo of a given type name
554	Gets the data type name for a given type definition
555	classes Represents a frame header that could be used to read from a Buffer or to write to a Buffer
556	Generates a value representing the timestamp for the query in microseconds based on the date and the microseconds provided
557	Constructs a signed int64 representation .
558	Creates a new Aggregate .
559	Creates a new Host instance .
560	Creates a new instance of ConstantSpeculativeExecutionPolicy .
561	Creates a new MaterializedView .
562	Creates a new instance of DataCollection
563	Inserts multiple rows in a table limiting the amount of parallel requests .
564	Creates a new instance of TableMetadata
565	Used to parse schema information for Cassandra versions 1 . 2 . x and 2 . x
566	Used to parse schema information for Cassandra versions 3 . x and above
567	Used to parse schema information for Cassandra versions 4 . x and above .
568	Creates a new instance if the currentInstance is not valid for the provided Cassandra version
569	Wrapper function as encoding a routing key could throw a TypeError
570	This script is used to check that the samples run correctly . It is not a valid example see README . md and subdirectories for more information . List all js files in the directory
571	Creates a new SchemaFunction .
572	Creates a copy of a buffer
573	Appends the original stack trace to the error after a tick of the event loop
574	Uses the logEmitter to emit log events
575	Returns a new object with the property names set to lowercase .
576	Extends the target by the most inner props of sources
577	Uses the iterator protocol to go through the items of the Array
578	Convert the iterator values into an array
579	Searches the specified Array for the provided key using the binary search algorithm . The Array must be sorted .
580	Inserts the value in the position determined by its natural order determined by the compare func
581	Validates the provided parameter is of type function .
582	Returns a string with a value repeated n times
583	Wraps the callback - based method . When no originalCallback is not defined it returns a Promise .
584	Create a new policy that wraps the provided child policy but only allow hosts from the provided while list .
585	Debounce protocol events by acting on those events with a sliding delay .
586	Buffer forward reader of CQL binary frames
587	Represents a connection to a Cassandra node
588	Returns a buffer of length 2 representing the clock identifier
589	Returns a buffer of length 6 representing the clock identifier
590	Returns the ticks portion of a timestamp . If the ticks are not provided an internal counter is used that gets reset at 10000 .
591	Returns an object with the time representation of the date expressed in milliseconds since unix epoch and a ticks property for the 100 - nanoseconds precision .
592	Generates a 16 - length Buffer instance
593	Serializes and deserializes to and from a CQL type and a Javascript Type .
594	Returns the number of zero bits preceding the highest - order one - bit in the binary representation of the value .
595	Creates a new Index instance .
596	work - horse
597	STATE UPDATES Used to get the editor into a consistent state again when options change .
598	Re - synchronize the fake scrollbars with the actual size of the content . Optionally force a scrollTop .
599	Cursor - blinking
600	Coords must be lineSpace - local
601	Replace the range from from to to by the strings in newText . Afterwards set the selection to selFrom selTo .
602	Update the selection . Last two args are only used by updateDoc since they have to be expressed in the line numbers before the update .
603	Run the given mode s parser over a line update the styles array which contains alternating fragments of text and CSS classes .
604	Allow 3rd - party code to override event properties by adding an override object to an event object .
605	Flow . js is a library providing multiple simultaneous stable and resumable uploads via the HTML5 File API .
606	Remove event callback
607	Fire an event
608	Read webkit dataTransfer object
609	Generate unique identifier for a file
610	Upload next chunk from the queue
611	Assign a browse action to one or more DOM nodes .
612	Assign one or more DOM nodes as a drop target .
613	Un - assign drop event from DOM nodes
614	Returns a boolean indicating whether or not the instance is currently uploading anything .
615	should upload next chunk
616	Start or resume uploading .
617	Add a HTML5 File object to the list of files .
618	Cancel upload of a specific FlowFile object from the list .
619	Look up a FlowFile object by its unique identifier .
620	Returns remaining time to upload all files in seconds . Accuracy is based on average speed . If speed is zero time remaining will be equal to positive infinity Number . POSITIVE_INFINITY
621	Update speed parameters
622	For internal usage only . Callback when something happens within the chunk .
623	Abort current upload
624	Clear current chunks and slice file again
625	Get current upload progress status
626	Indicates if file is has finished uploading and received a response
627	Returns remaining time to finish upload file in seconds . Accuracy is based on average speed . If speed is zero time remaining will be equal to positive infinity Number . POSITIVE_INFINITY
628	Default read function using the webAPI
629	Makes a GET request without any data to see if the chunk has already been uploaded in a previous session
630	Uploads the actual data in a POST call
631	Retrieve current chunk upload status
632	Prepare Xhr request . Set query headers and data
633	If option is a function evaluate it with given params
634	Iterate each element of an object
635	Create a table | a json file The second argument is optional if ommitted the file will be created at the default location .
636	Checks if a json file contains valid JSON string
637	Insert object to table . The object will be appended with the property id which uses timestamp as value . There are 3 required arguments .
638	Count the number of rows for a given table .
639	Update a row or record which satisfies the where clause
640	Create a getter for the given header name .
641	Represents a single parameter
642	A parameter that represents an array
643	A parameter that represents a transformation
644	A parameter that represents a range
645	Cloudinary configuration class
646	Main Cloudinary class
647	Determine the build mode .
648	This function is used by webpack to resolve individual lodash modules
649	Generate a webpack configuration
650	Return the resource type and action type based on the given configuration
651	enable one - finger touch to drag
652	Array - like iteration for objects .
653	Array - like reduce for objects .
654	Returns whether an object appears to be a plain object - that is a direct instance of Object .
655	Log messages to the console and history based on the type of message
656	Creates an element and applies properties .
657	Add a CSS class name to an element
658	The callback definition for toggleElClass .
659	x and y coordinates for a dom element or mouse pointer
660	Normalizes and appends content to an element .
661	Returns the cache object where data for an element is stored
662	Returns whether or not an element has cached data
663	Delete data for the element from the cache and the guid attr from getElementById
664	Loops through an array of event types and calls the requested method for each type .
665	Removes event listeners from an element
666	Trigger a listener only once for an event
667	Set up any tags that have a data - setup attribute when the player is started .
668	Wait until the page is loaded before running autoSetup . This will be called in autoSetup if hasLoaded returns false .
669	Add text to a DOM element .
670	Wraps the given function fn with a new function that only invokes fn at most once per every wait milliseconds .
671	Whether a value is a valid event type - non - empty string or array .
672	A callback that is called when a component is ready . Does not have any paramters and any callback value will be ignored .
673	An object that contains ranges of time for various reasons .
674	Check if any of the time ranges are over the maximum index .
675	Create a time range object givent ranges of time .
676	Should create a fake TimeRange object which mimics an HTML5 time range instance .
677	Create an instance of this class ..
678	Returns the extension of the passed file name . It will return an empty string if passed an invalid path .
679	Load a TextTrack from a specifed url .
680	Construct an rgba color from a given hex color code .
681	Check if volume control is supported and if it isn t hide the Component that was passed using the vjs - hidden class .
682	Get the actual value of an option .
683	Wait for the first timeupdate with currentTime > 0 - there may be several with 0
684	Iterate over each innerArray element once per outerArray element and execute tester with both . If tester returns a non - falsy value exit early and return that value .
685	Marks a plugin as active on a player .
686	Triggers a pair of plugin setup events .
687	Takes a basic plugin function and returns a wrapper function which marks on the player that the plugin has been activated .
688	Takes a plugin sub - class and returns a factory function for generating instances of it .
689	Doubles as the main function for users to create a player instance and also the main library object . The videojs function can be used to initialize or retrieve a player .
690	Comment out if you didn t npm install lz - string
691	Randomizes whatever colors are currently being used .
692	Publishes a message to anyone who s subscribed to it .
693	this catches ALL nav clicks not just in the main navbar
694	This was added to get around some CSS nonsense with the homepage slider script . It adds a class to the body element that specifies the current viewport width .
695	For compatibility and usage outside of module systems make the Handlebars object a namespace
696	the params and contexts arguments are passed in arrays to fill in
697	Listen for data changes so we can keep track of the current canvas size .
698	bah! God this plugin sucks . Doesn t even pass in the slide number we re going TO .
699	The first step of the build process . This sets various settings in the main grunt config for the current build environment . These govern how the subsequent tasks behave .
700	Parses the generator fields and get the latest values .
701	Return options . prop if obj . prop is undefined otherwise return obj . prop
702	Save visible viewport boundary to viewportXXX variables
703	Check the release version in GitHub compare it with the installed version and notify the user if a new version is available .
704	Parses a semantic version string into an array of three integers .
705	Module repesenting a Cell Accessor
706	Get a sanitized listing of all projects along with the users who have access
707	main function . Get the config using rc
708	Filter process . env . FOO to process . env . strider_foo for rc s benefit
709	merge plugins from the DB with ones from strider . json . The latter overrides the former
710	Generate func for string template names
711	This generates a generator that will render the appropriate block in a form suitable for async . parallel .
712	Express 3 Template Engine
713	- > true if the socket was found and removed . false if it wasn t found
714	socket callback . Adds a new socket
715	failed passed errored running submitted
716	Prepare the job for execution save to database and fire off a job . new event .
717	remove attributes from a model
718	Custom middleware to save unparsed request body to req . content
719	Require the specified req . body parameters or else return a 400 with a descriptive JSON body
720	just link project but doesn t fail if there s no auth
721	Require a logged in session
722	Require admin privileges
723	Plugin block is the tag used to specify that the contents can be overridden by extensions .
724	return an array of strings with the absolute paths of the sub - apps found inside appdir
725	return a list of the libs that must be inside the app
726	get all dependencies from appbin recursively
727	ES7 is not yet here
728	Returns an accessor wrapped by error handling and args passing logic
729	Ensures a variable is set in the given environment container . Throws an EnvVarError if the variable is not set or a default is not provided
730	parse macro call
731	Warn if the bin references don t point to anything . This might be better in normalize - package - data if it had access to the file path .
732	Initializes the file - picker connects it to runtime and dispatches event ready when done .
733	Sets a new value for the option specified by name
734	we require this to run only once
735	Aborts preloading process .
736	Check if any handlers were registered to the specified event
737	Unregister the handler from the event or if former was not specified - unregister all handlers
738	Register a handler to the event type that will run only once
739	Checks if the runtime has specific capability
740	Get the version of the Flash Player
741	Cross - browser SWF removal - Especially needed to safely and completely remove a SWF in Internet Explorer
742	Check if specified url has the same origin as the current document
743	give child class a place to define its own methods
744	Find an element in array and return it s index if present otherwise return - 1 .
745	Returns elements of first array if they are not present in second . And false - otherwise .
746	Find intersection of two arrays .
747	Parses the specified size string into a byte value . For example 10kb becomes 10240 .
748	Append another key - value pair to the FormData object
749	Loop over the fields in FormData and invoke the callback for each of them .
750	Checks if specified DOM element has specified class .
751	Adds specified className to specified DOM element .
752	Removes specified className from specified DOM element .
753	Returns a given computed style of a DOM element .
754	Returns the absolute x y position of an Element . The position will be returned in a object with x y fields .
755	Returns the x y cordinate for an element on IE 6 and IE 7
756	Returns the size of the specified node in pixels .
757	Remove all kind of events from the specified object
758	here we go ... ugly fix for ugly bug
759	Transform canvas coordination according to specified frame size and orientation Orientation value is from EXIF tag
760	keep quering recursively till no more entries
761	Sets the request method request URL synchronous flag request username and request password .
762	Appends an header to the list of author request headers or if header is already in the list of author request headers combines its value with value .
763	Returns the header field value from the response of which the field name matches header unless the field name is Set - Cookie or Set - Cookie2 .
764	Sets the Content - Type header for the response to mime . Throws an InvalidStateError exception if the state is LOADING or DONE . Throws a SyntaxError exception if mime is not a valid media type .
765	Initiates the request . The optional argument provides the request entity body . The argument is ignored if request method is GET or HEAD .
766	Cancels any network activity .
767	Extends the specified object with another object .
768	Properly destroys the image and frees resources in use . If any . Recommended way to dispose moxie . image . Image object .
769	Defines property with specified descriptor on an object
770	Defines getter or setter depending on a type param
771	SyntaxError Holds information about bad syntax found in a message pattern
772	The twist of the 8 corners 0 < = twist < 3^7 . The orientation of the DRB corner is fully determined by the orientation of the other corners .
773	The flip of the 12 edges 0 < = flip < 2^11 . The orientation of the BR edge is fully determined by the orientation of the other edges .
774	Parity of the corner permutation
775	Parity of the edges permutation . Parity of corners and edges are the same if the cube is solvable .
776	Determine if all tickValues are modulo some interval value
777	Automatically calculate date frequency if not selected
778	Test whether a string is a valid Chartbuilder model
779	Generate an exact number of ticks given a domain
780	round_to_precision Round a number to N decimal places
781	Given a defaults object and a source object copy the value from the source if it contains the same key otherwise return the default . Skip keys that only exist in the source object .
782	Given a the domain of a scale suggest the most numerous number of round number ticks that it cold be divided into while still containing values evenly divisible by 1 2 2 . 5 5 10 or 25 .
783	Get thousands and decimal separators based on locale
784	Factory to create a transformer based on the given info and set .
785	Check if file references headings or files not in exposed .
786	Handle resources .
787	Utility to warn reason for each node in nodes on file .
788	Suggest a possible similar reference .
789	Get the hash of uri if applicable .
790	Returns an input map contents if a custom map path was specified
791	to add back in logging comment this line out
792	turns a dotted - decimal address into a UInt32
793	Iterator used to walk down a nested object .
794	Get a nested bottle . Will set and return if not set .
795	Function used by provider to set up middleware for each request .
796	Register middleware .
797	Create the provider properties on the container
798	Register a provider .
799	Private helper for creating service and service factories .
800	Register a class service
801	Register a function service
802	Define a mutable property on the container .
803	Iterator for setting a plain object literal via defineValue
804	Register a value
805	Register a constant
806	Register decorator .
807	Register an instance factory inside a generic factory .
808	Get an instance of bottle .
809	Register a service factory provider or value based on properties on the object .
810	Resets providers on a bottle instance . If names array is provided only the named providers will be reset .
811	For internal use . Throws if is passed an invalid AST node else does nothing .
812	Determines whether the given call name refers to an event declaration using scope resolution .
813	Stores each declared event in the file and its corresponding parent contract
814	collect all variable declarations from VariableDeclarators and DeclarativeExpressions
815	While exiting Progam Node all the vars that haven t been used still exist inside VariableDeclarations . Report them
816	As soon as the first use of a variable is encountered delete that variable s node from allVariableDeclarations
817	Set cursor to point to first visibility in order of vis . array . For each function Fi inside contract if Fi s vis is same as that pointed by cursor ignore func . If not check the pos in the order of Fi s vis . If ahead simply move cursor forward to Fi s vis . s position in array . If behind report func .
818	same could potentially be applied to FunctionDeclaration
819	Experimental pragmas if they exist must be above everything EXCEPT pragma solidity & other experimental pragmas .
820	Apply fixes to source code depending on whichever errors can be fixed .
821	Ensure level 1 indentation before all immediate children of top - level declarations
822	Ensure 1 extra indentation inside Block than before it
823	Function to retrieve the source code text being linted . Returns the complete source code if no node specified
824	statement like var x = 10 doesn t come under AssignmentExpression so needs to be checked separately
825	context object Constructor to set read - only properties and provide additional functionality to the rules using it
826	Given a ruleset name determine whether its a core set or a sharable config and load the rule config accordingly .
827	Create provided plugin s default rule configuration
828	Synchronously write the passed configuration to the file whose absolute path is SOLIUMRC_FILENAME_ABSOLUTE
829	Lint a source code string based on user settings . If autofix is enabled write the fixed code back to file .
830	Lint a file based on user settings
831	Function responsible for defining all the available commandline options & version information
832	Determine whether the options object supplied is valid according to the schema passed .
833	Find index of the first visibility modifier in declaration . Find the first non - VM before this first VM found above . If non - VM found report the VM .
834	Determine whether the provided literal is in Hex Notation
835	Create a Soundfont object
836	Returns a function that plays an oscillator
837	Load a soundfont instrument . It returns a promise that resolves to a instrument object .
838	Checks for lib using ldconfig if present or searching SYSTEM_PATHS otherwise .
839	Helper function to convert a callback to a Promise .
840	Estimates spent working hours based on commit dates
841	Takes string or array of strings
842	Require a prop to not be empty
843	Accept any number in the 0 = > 1 range
844	The thread - loader parallelizes code compilation useful with babel since it transpiles both application javascript and node_modules javascript
845	Images smaller than 10kb are loaded as a base64 encoded url instead of file url
846	Parse . csv files with PapaParse and return it in a JSON format
847	Url - loader for svgs in css
848	Add entryPoint at beginning of entry array
849	Create the production build and print the deployment instructions .
850	Helper that recursively merges two data objects together .
851	Adds a def method to the object returning a new object with passed in argument as default property
852	Adds a validate method useful to set the prop validator function .
853	Adds isRequired and def modifiers to an object
854	Validates a given value against a prop type object
855	the infamous substitute
856	attached at runtime
857	Removes all events set by this instance during runtime
858	Add all required runtime events
859	Creates a custom normalized event object from touch and mouse events
860	Initializes movement tracking
861	Handles move events
862	Records movement for the last 100ms
863	Calculate new values call update function
864	Initialize animation of values coming to a stop
865	Animates values slowing down
866	Determine position relative to bounds
867	get all components dirs
868	Writes a log to a file
869	seek last length bytes of file for EOCDR
870	Creates an object representing a CronJob
871	Creates an object representing a user s webtask . io credentials
872	Creates an object representing a Webtask
873	Updates to this class should also be applied to the the ES6 version in es6 - wrapped - promise . js .
874	Simple helper function that s probably faster than using Array filter methods and can be inlined .
875	for performance in the case where there are no handlers just the listener
876	Called each time an asynchronous function that s been monkeypatched in index . js is called . If there are no listeners return the function unwrapped . If there are any asyncListeners and any of them have callbacks pass them off to asyncWrap for later use otherwise just call the listener .
877	Finds the largest file in the given directory optionally performing a recursive search .
878	Function for creating a specific variant of the async function .
879	Function for creating iterable suspendable functions .
880	Function for creating non - iterable suspendable functions .
881	Object traversal with cloning .
882	Convert a thunk to a promise .
883	Returns the number of files in the given directory .
884	Copy the settings synonyms and rules of the source index to the target index
885	moves the source index to the target index
886	Does an Algolia index exist already
887	Load the given module .
888	Parse the Accept - Language header .
889	Parse a language from the Accept - Language header .
890	Get the priority of a language .
891	Get the specificity of the language .
892	Get the preferred languages from an Accept - Language header .
893	Compare two specs .
894	Parse the Accept - Charset header .
895	Parse a charset from the Accept - Charset header .
896	Get the priority of a charset .
897	Get the specificity of the charset .
898	Get the preferred charsets from an Accept - Charset header .
899	Parse an encoding from the Accept - Encoding header .
900	Get the priority of an encoding .
901	Get the preferred encodings from an Accept - Encoding header .
902	Parse the Accept header .
903	Parse a media type from the Accept header .
904	Get the priority of a media type .
905	Get the specificity of the media type .
906	Get the preferred media types from an Accept header .
907	Count the number of quotes in a string .
908	Split a key value pair .
909	Split an Accept header into media types .
910	Split a string of parameters .
911	Loads configuration while ensuring sounce - map is enabled
912	assigns values to an object creating keys in keyPath if they don t exist yet .
913	transforms the selectedValues from store into the X - Search - Filters string for analytics
914	Evaluates a function on the given page .
915	Waits for a function to evaluate to a given value on the given page
916	Creates a new Horseman .
917	Helpers here get image colors
918	create colormap by rotating cubehelix
919	return imagedata from colormap
920	return interpolated imagedata with only each
921	convert imagedata to colormap JSON
922	this can throw exceptions callers responsibility
923	ContentSync constructor .
924	Create consumer or publisher RabbitMQ channel
925	channel error handler
926	Create a RabbitMQ connection
927	connection error handler
928	Initialize a new Application inherits from EventEmitter
929	Start consuming message from app s queues
930	Convert a given string to the matching sharding function .
931	Checks if nodes are equal using the following by checking if they are both ignored have the same checksum or have the same contents .
932	Recursively trigger an event for a node and it s children . Only emits events for keyed nodes .
933	join this signaling server network
934	Returns a descriptive string for a datatype
935	Get private data .
936	Get the property descriptor to redirect a given property .
937	Get the property descriptor to call a given method property .
938	Define new wrapper class .
939	Get the wrapper class of a given prototype .
940	Wrap a given event to management a dispatching .
941	Get listeners .
942	Get the property descriptor for the event attribute of a given event .
943	Define a custom EventTarget with event attributes .
944	Perform upload to qiniu
945	Retry all failed files one by one
946	Mouse support No hover support .
947	Initialize a new Teamcity reporter for the browser .
948	Module dependencies .
949	Parse an Extended JSON string constructing the JavaScript value or object described by that string .
950	Converts a BSON document to an Extended JSON string optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified .
951	Serializes an object to an Extended JSON string and reparse it as a JavaScript object .
952	Make functions that will define virtual modules
953	!steal - remove - start
954	Match protocols using semver ~ matching .
955	Match protocols exactly .
956	Diff two arrays .
957	Turn the rules for a sourceType into a human - readable string
958	Get the arguments for the timeline based on parameter rules
959	find method in klass prototype chain
960	dump files to temporary directory
961	zip files package
962	upload package to web cache server
963	clear temporary infomation
964	abort process when error
965	dump dependency config
966	parse nej patch
967	eval content to dump nej patch
968	do nej define
969	check all html file
970	source map file path
971	nej module root
972	html path adjust
973	export klass or api
974	We don t use >>> 0 . We let the values negate . The only use of addition in Murmur uses the result of a multiplication which will be converted to unsigned integer by our 16 - bit at a time multiplication .
975	With this unused function we always make sure we have an unsigned integer value but it s not absolutely necessary . We re only interested in the integer value when we perform addition or write the value to our buffer . We do not do this within Murmur s mix function . I m leaving it in place for a benchmark where I can gauge the cost of >>> 0 .
976	Define getters & setters . This function is the internal entry point to a lot of functionality .
977	Special case for binding same node as parent .
978	The return value of this function is a Node to be added otherwise null .
979	Below are optimized array mutator methods . They have to exist within this closure . Note that the native implementations of these methods do not trigger setter functions on array indices .
980	Default behavior when a return value is given for a change function .
981	Find next node in a potentially sparse array .
982	Internal event listener to update data on input change .
983	Bind an object to the DOM .
984	Internal function to strip empty text nodes .
985	Internal function to remove bound nodes and replace them with markers .
986	Internal function to find and set matching DOM nodes on cloned nodes .
987	Rehydration of existing DOM nodes by recursively checking equality .
988	Internal function for rendering strings . The benchmark to beat is plain old string concatenation and for loops . Although this won t be faster it should work with more or less the same functionality as the DOM version .
989	Check if capabilities are available or throw an error .
990	Create String from BEM entitys
991	Merges an array of configs
992	Loads a file from GitHub
993	Computes parameters for the repository specified in base
994	Loads the specified config file from the context s repository
995	Sets a property on an object preserving its enumerability . This function assumes that the property is already writable .
996	Keep initialization idempotent .
997	inject manifest html fragment into page code
998	inject service worker registion fragment into page code
999	inject async load page js fragment
1000	Attach a react compiler .
1001	Promise wrapper for exec execFile
1002	spawn as Promised
1003	Calculate a one - sided slope .
1004	Checks whether a property name is a writeable attribute .
1005	Creates markup for a property .
1006	Traps top - level events by using event bubbling .
1007	Singly linked - list of updates . When an update is scheduled it is added to the queue of the current fiber and the work - in - progress fiber . The two queues are separate but they share a persistent structure . During reconciliation updates are removed from the work - in - progress fiber but they remain on the current fiber . That ensures that if a work - in - progress is aborted the aborted updates are recovered by cloning from current . The work - in - progress queue is always a subset of the current queue . When the tree is committed the work - in - progress becomes the current .
1008	Invokes the mount life - cycles on a previously never rendered instance .
1009	requestWork is called by the scheduler whenever a root receives an update . It s up to the renderer to call renderRoot at some point in the future .
1010	When working on async work the reconciler asks the renderer if it should yield execution . For DOM we implement this with requestIdleCallback .
1011	Deletes the value for a property on a node .
1012	Apply the diff .
1013	Measures the impact of running a certain script on your system . Monitors the cpu and memory usage of the whole tree of processes generated by the script provided .
1014	Exponential backoff strategy .
1015	A class to hold the state of a backoff operation . Accepts a backoff strategy to generate the backoff delays .
1016	Wraps a function to be called in a backoff loop .
1017	Channel constructor .
1018	Connection constructor .
1019	Make an element draggable .
1020	Maps conjunctions to a value .
1021	Sort timables into set of earlyConjuncts and laterConjuncts
1022	Construct the program arguments predicate
1023	Create a function to update a given program with the given program arguments
1024	Process observations for the current cycle
1025	Select the appropriate set of actions from the given goal trees such that constraints are not violated for the current cycle .
1026	Performs the state transition for a single cycle .
1027	converts native arguments object to an array and applies function
1028	defines a flow given any number of functions as arguments
1029	The flowState is the actual object each step in the flow is applied to . It acts as a callback to the next function . It also maintains the internal state of each execution and acts as a place for users to save values between steps of the flow .
1030	defines a flow and evaluates it immediately . The first flow function won t receive any arguments .
1031	Pads supplied string with character to fill the desired length .
1032	The SM2 elliptic curve
1033	SM2 public and private key pair
1034	plugin wrapper so streams can pipe to it .
1035	Add an event to an object and optionally adjust it s scope
1036	Remove an event from an object
1037	Creates a view model .
1038	Creates a new product .
1039	Renders the Mini Cart to the page s DOM .
1040	on rejection either retry or throw the error
1041	GitHub has a nasty habit of stripping whitespace from messages and losing the timezone . This information is required to make our hashes match up so we guess it by mutating the value till the hash matches . If we re unable to match we will just force the hash when saving to the cache .
1042	for test removed by Grunt
1043	just call set_position on the current values
1044	Google login client .
1045	Provides cell IDs of nearby cells based on the given coords and radius
1046	Utility method that finds the name of the key for a given enum value and makes it look a little nicer .
1047	Utility method to convert all Long . js objects to integers or strings
1048	Lehmer random module used by the app to generate request ids
1049	Takes an ISO time and returns a string representing how long ago the date represents .
1050	A little logger for this library to use internally . Basically just a wrapper around console . log with support for feature - detection .
1051	What is the requestQueue ?
1052	Send a JSONP request .
1053	Validates parameter value
1054	Converts parameter declaration to yargs
1055	Converts configuration declaration to yargs options
1056	This class recognizes single - byte encodings . Because the encoding scheme is so simple language statistics are used to do the matching .
1057	Collects a scenario object and templates from element
1058	Changed helper helps with notifying the server of a file change
1059	Creates a new detatched DOM node to render child components within .
1060	Unmounts the components rendered in the portal and removes the associated DOM node .
1061	Triggers quick filtering and advanced filtering of the data if either of those properties have been set .
1062	Creates an instance of Table .
1063	Handles all events sent from the dispatcher . Filters out to only those sent via the Table
1064	Requests data for a component when the filter property changes . When comparing filters we do a direct comparison in addition to a JSON stringify comparison . This fixes issues where the filters object is a new literal object every time but isn t actually changing . Using a JSON stringify has the downside of causing requestData to be called if the objects are in a different order but that is pretty unlikely to happen . The setTimeout insures that the currently dispatched action has completed the dispatching process before the request data action is kicked off .
1065	Used to add and remove the listeners required when requesting data from the server .
1066	Adds the listeners required when requesting data from the server .
1067	Removes the listeners required when requesting data from the server .
1068	Action for populating table data . Used both for initial and subsequent loads .
1069	Filters out table data that does not match the filter value for table cols that have quickFilter set to true .
1070	Moves the cursor forwards or backwards through paginated data .
1071	Bulk toggle selection for table rows .
1072	Selects or deselects a table row .
1073	Extract the value default translate filter behavior else if it is an attribute we need to get its value first
1074	Calls the map function on the passed object with a specified callback . This uses Ember . ArrayPolyfill s - map method when necessary .
1075	Calls the filter function on the passed object with a specified callback . This uses Ember . ArrayPolyfill s - filter method when necessary .
1076	Returns an array of indexes of the first occurrences of the passed elements on the passed object .
1077	Adds an object to an array . If the array already includes the object this method has no effect .
1078	Replaces objects in an array with the passed objects .
1079	Calculates the intersection of two arrays . This method returns a new array filled with the records that the two passed arrays share with each other . If there is no intersection an empty array will be returned .
1080	Remove an event listener
1081	Suspend listener during callback .
1082	called whenever a property has just changed to update dependent keys
1083	Sets the value of a property on an object respecting computed properties and notifying observers and other listeners of the change . If the property is not defined but the object implements the setUnknownProperty method then that will be invoked as well .
1084	Adds a value to the map . If a value for the given key has already been provided the new value will replace the old value .
1085	Removes a value from the map for an associated key .
1086	Iterate over all the keys and values . Calls the function once for each key passing in the key and value in that order .
1087	Disconnects the binding instance . Changes will no longer be relayed . You will not usually need to call this method .
1088	RSVP . filter is similar to JavaScript s native filter method except that it waits for all promises to become fulfilled before running the filterFn on each item in given to promises . RSVP . filter returns a promise that will become fulfilled with the result of running filterFn on the values the promises become fulfilled with .
1089	A lightweight container that helps to assemble and decouple components . Public api for the container is still in flux . The public api specified on the application namespace should be considered the stable api .
1090	Registers a factory for later injection .
1091	Unregister a fullName
1092	Given a fullName return the corresponding factory .
1093	Used only via injection .
1094	Defines injection rules .
1095	Used only via factoryInjection .
1096	Retrieve the value given a key if the value is present at the current level use it otherwise walk up the parent hierarchy and try again . If no matching key is found return undefined .
1097	Check for the existence of given a key if the key is present at the current level return true otherwise walk up the parent hierarchy and try again . If no matching key is found return false .
1098	Iterate and invoke a callback for each local key - value pair .
1099	Replaces underscores spaces or camelCase with dashes .
1100	Set the value of a property to the current value plus some amount .
1101	Set the value of a property to the current value minus some amount .
1102	Creates a new subclass .
1103	In some cases you may want to annotate computed properties with additional metadata about how they function or what values they operate on . For example computed property functions may close over variables that are then no longer available for introspection .
1104	Returns an array with the items that do not have truthy values for key . You can pass an optional second argument with the target value . Otherwise this will match any property that evaluates to false .
1105	Returns a new enumerable that excludes the passed value . The default implementation returns an array regardless of the receiver type unless the receiver does not contain the value .
1106	Returns a new enumerable that contains only unique values . The default implementation returns an array regardless of the receiver type .
1107	If you are implementing an object that supports Ember . Array call this method just before the array content changes to notify any observers and invalidate any related properties . Pass the starting index of the change as well as a delta of the amounts to change .
1108	If you are implementing an object that supports Ember . Array call this method just after the array content changes to notify any observers and invalidate any related properties . Pass the starting index of the change as well as a delta of the amounts to change .
1109	A computed property whose dependent keys are arrays and which is updated with one at a time semantics .
1110	Adds each object in the passed enumerable to the receiver .
1111	Removes each object in the passed enumerable from the receiver .
1112	Triggers a named event for the object . Any additional arguments will be passed as parameters to the functions that are subscribed to the event .
1113	Add handlers to be called when the Deferred object is resolved or rejected .
1114	Resolve a Deferred object and call any doneCallbacks with the given args .
1115	The collection of functions keyed by name available on this ActionHandler as action targets .
1116	Triggers a named action on the ActionHandler . Any parameters supplied after the actionName string will be passed as arguments to the action target function .
1117	Track that newItems were added to the tracked array at index .
1118	Track that count items were removed at index .
1119	see SubArray for a better implementation .
1120	Internal data structure to represent an array operation .
1121	Internal data structure used to include information when looking up operations by item index .
1122	Track that an item was added to the tracked array .
1123	Track that an item was removed from the tracked array .
1124	You can directly access mapped properties by simply requesting them . The unknownProperty handler will generate an EachArray of each item .
1125	primitive for array support .
1126	Clears the set . This is useful if you want to reuse an existing set without having to recreate it .
1127	Removes the last element from the set and returns it or null if it s empty .
1128	Use this to find children by ID instead of using jQuery
1129	Adds a class to the buffer which will be rendered to the class attribute .
1130	duck type attribute functionality like jQuery so a render buffer can be used like a jQuery object in attribute binding scenarios . Adds an attribute which will be rendered to the element .
1131	Adds a property which will be rendered to the element .
1132	Generates the HTML content for this buffer .
1133	Sets up event listeners for standard browser events .
1134	Registers an event listener on the document . If the given event is triggered the provided event handler will be triggered on the target view .
1135	Return the nearest ancestor that is an instance of the provided class .
1136	Return the nearest ancestor that has a given property .
1137	Return the nearest ancestor whose parent is an instance of klass .
1138	Called on your view when it should push strings of HTML into a Ember . RenderBuffer . Most users will want to override the template or templateName properties instead of this method .
1139	Set up an observer on the context . If the property changes toggle the class name .
1140	Iterates through the view s attribute bindings sets up observers for each then applies the current value of the attributes to the passed render buffer .
1141	Gets defined after initialization by _applyAttributeBindings
1142	Parse a path and return an object which holds the parsed properties .
1143	when a view is rendered in a buffer appending a child view will render that view and append the resulting buffer into its buffer .
1144	when a view is rendered in a buffer destroying the element will simply destroy the buffer and put the state back into the preRender state .
1145	once the view has been inserted into the DOM rerendering is deferred to allow bindings to synchronize .
1146	once the view is already in the DOM destroying it removes it from the DOM nukes its element and puts it back into the preRender state if inDOM .
1147	Handle events from Ember . EventDispatcher
1148	When a child view is removed destroy its element so that it is removed from the DOM .
1149	When a child view is added make sure the DOM gets updated appropriately .
1150	Called when a mutation to the underlying content array will occur .
1151	Called when a mutation to the underlying content array occurs .
1152	Triggers a named action on the controller context where the component is used if this controller has registered for notifications of the action .
1153	Renders the unbound form of an otherwise bound helper function .
1154	This is messed up .
1155	Binds a property into the DOM . This will create a hook in DOM that the KVO system will look for and update if the property changes .
1156	Defeatureify doesn t seem to like nested functions that need to be removed
1157	Clears the current and target route handlers and triggers exit on each of them starting at the leaf and traversing up through its ancestors .
1158	Initializes the current router instance and sets up the change handling event listeners used by the instances location implementation .
1159	This hook is the entry point for router . js
1160	A hook you can implement to convert the URL into the model for this route .
1161	A hook you can implement to convert the route s model into parameters for the URL .
1162	Returns the controller for a particular route or name .
1163	Disconnects a view that has been rendered into an outlet .
1164	This is called to setup observers that will trigger a rerender .
1165	Event handler that invokes the link activating the associated route .
1166	Transition into another route while replacing the current URL if possible . This will replace the current history entry instead of adding a new one . Beside that it is identical to transitionToRoute in all other respects .
1167	Determines if the view has already been created by checking if the view has the same constructor template and context as the view in the _outlets object .
1168	Gets an outlet that is pending disconnection and then nullifys the object on the _outlet object .
1169	Returns the current location . hash by parsing location . href since browsers inconsistently URL - decode location . hash .
1170	Replaces the current state .
1171	Register a callback to be invoked whenever the browser history changes including using forward and back buttons .
1172	Selects the best location option based off browser support and returns an instance of that Location class .
1173	This method is called via the container s resolver method . It parses the provided fullName and then looks up and returns the appropriate template or class .
1174	Look up the template in Ember . TEMPLATES
1175	If the application has not opted out of routing and has not explicitly defined a router supply a default router for the application author to configure .
1176	Automatically initialize the application once the DOM has become ready .
1177	Call advanceReadiness after any asynchronous setup logic has completed . Each call to deferReadiness must be matched by a call to advanceReadiness or the application will never become ready and routing will not begin .
1178	Setup up the event dispatcher to receive events on the application s rootElement with any registered customEvents .
1179	This creates a container with the default Ember naming conventions .
1180	Fetch the records of a given type and observe them for changes .
1181	Adds observers to a model type class .
1182	Loops over all namespaces and all objects attached to them
1183	This allows ember - testing to play nicely with other asynchronous events such as an application that is waiting for a CSS3 transition or an IndexDB transaction .
1184	unregisterWaiter is used to unregister a callback that was registered with registerWaiter .
1185	This removes all helpers that have been registered and resets and functions that were overridden by the helpers .
1186	This method is no longer needed But still here for backwards compatibility of helper chaining
1187	Adapted from ES5 section 8 . 10 . 5
1188	Returns a fresh property descriptor whose standard attributes are guaranteed to be data properties of the right type . Additionally any non - standard enumerable properties of attributes are copied over to the fresh descriptor .
1189	Performs all validation that Object . defineProperty performs without actually defining the property . Returns a boolean indicating whether validation succeeded .
1190	If getTrap returns undefined the caller should perform the default forwarding behavior . If getTrap returns normally otherwise the return value will be a callable trap function . When calling the trap function the caller is responsible for binding its |this| to |this . handler| .
1191	In the direct proxies design with refactored prototype climbing this trap is deprecated . For proxies - as - prototypes instead of calling this trap the get set has or enumerate traps are called instead .
1192	On success check whether the target object is indeed frozen .
1193	On success check whether the target object is indeed sealed .
1194	On success check whether the target object is indeed non - extensible .
1195	If name denotes a sealed property check whether handler rejects .
1196	The iterate trap should return an iterator object .
1197	Any own non - configurable properties of the target that are not included in the trap result give rise to a TypeError . As such we check whether the returned result contains at least all sealed properties of the target object .
1198	In ES6 this trap is called for all operations that require a list of an object s properties including Object . getOwnPropertyNames and Object . keys .
1199	returns a new function of zero arguments that recursively unwraps any proxies specified as the |this| - value . The primitive is assumed to be a zero - argument method that uses its |this| - binding .
1200	load all the contract identifiers into the global scope
1201	SERIALIZE Called when a record is saved in order to convert the record into JSON .
1202	serializeAttribute can be used to customize how DS . attr properties are serialized
1203	serializeBelongsTo can be used to customize how DS . belongsTo properties are serialized .
1204	serializeHasMany can be used to customize how DS . hasMany properties are serialized .
1205	EXTRACT The extract method is used to deserialize payload data from the server . By default the JSONSerializer does not push the records into the store . However records that subclass JSONSerializer such as the RESTSerializer may push records into the store as part of the extract call .
1206	extractMeta is used to deserialize any meta information in the adapter payload . By default Ember Data expects meta information to be located on the meta property of the payload object .
1207	Saves all of the records in the RecordArray .
1208	Overrides Ember . Array s replace method to implement
1209	Create a child record within the owner
1210	If possible this method asks the adapter to generate an ID for a newly created record .
1211	This method returns a record for a given type and id combination .
1212	This method makes a series of requests to the adapter s find method and returns a promise that resolves once they are all loaded .
1213	This method is called by the record s reload method .
1214	This method takes a list of records groups the records by type converts the records into IDs and then invokes the adapter s findMany method .
1215	Returns true if a record for a given type and ID is already loaded .
1216	Returns id record for a given type and ID . If one isn t already loaded it builds a new record and leaves it in the empty state .
1217	This method delegates a query to the adapter . This is the one place where adapter - level semantics are exposed to the application .
1218	This method returns a filtered array that contains all of the known records for a given type .
1219	This method unloads all of the known records for a given type .
1220	Takes a type and filter function and returns a live RecordArray that remains up to date as new records are loaded into the store or created locally .
1221	This method is called at the end of the run loop and flushes any records passed into scheduleSave
1222	This method is called once the promise returned by an adapter s createRecord updateRecord or deleteRecord is resolved .
1223	When an adapter s createRecord updateRecord or deleteRecord resolves with data this method extracts the ID from the supplied data .
1224	Returns a map of IDs to client IDs for a given type .
1225	Push some data for a given type into the store .
1226	Push some raw data into the store .
1227	If you have some metadata to set for a type you can call metaForType .
1228	Build a brand new record for a given type ID and initial data .
1229	If there are any unsaved records that are in a hasMany they won t be in the payload so add them back in manually .
1230	The created and updated states are created outside the state chart so we can reopen their substates and add mixins as necessary .
1231	Adds error messages to a given attribute and sends becameInvalid event to the record .
1232	Removes all error messages from the given attribute and sends becameValid event to the record if there no more errors left .
1233	If the adapter did not return a hash in response to a commit merge the changed attributes and relationships into the existing saved data .
1234	If the model isDirty this function will which discard any unsaved changes
1235	The goal of this method is to temporarily disable specific observers that take action in response to application changes .
1236	Save the record and persist any changes to the record to an extenal source via the adapter .
1237	Reload the record from the adapter .
1238	FOR USE DURING COMMIT PROCESS
1239	Iterates through the attributes of the model calling the passed function on each attribute .
1240	Iterates through the transformedAttributes of the model calling the passed function on each attribute . Note the callback will not be called for any attributes that do not have an transformation type .
1241	This Ember . js hook allows an object to be notified when a property is defined .
1242	Given a callback iterates over each of the relationships in the model invoking the callback with the name of each relationship and its relationship descriptor .
1243	This method is invoked whenever data is loaded into the store by the adapter or updated by the adapter or when a record has changed .
1244	Update an individual filter .
1245	This method is invoked if the filterFunction property is changed on a DS . FilteredRecordArray .
1246	Create a DS . ManyArray for a type and list of record references and index the ManyArray under each reference . This allows us to efficiently remove records from ManyArray s when they are deleted .
1247	Create a DS . RecordArray for a type and register it for updates .
1248	Create a DS . FilteredRecordArray for a type and register it for updates .
1249	Create a DS . AdapterPopulatedRecordArray for a type with given query .
1250	Register a RecordArray for a given type to be backed by a filter function . This will cause the array to update automatically when records of that type change attribute values or states .
1251	Internally we maintain a map of all unloaded IDs requested by a ManyArray . As the adapter loads data into the store the store notifies any interested ManyArrays . When the ManyArray s total number of loading records drops to zero it becomes isLoaded and fires a didLoad event .
1252	Proxies to the serializer s serialize method .
1253	Find multiple records at once .
1254	Implement this method in order to provide data associated with a type
1255	Implement this method in order to provide json for CRUD methods
1256	If you want to do normalizations specific to some part of the payload you can specify those under normalizeHash .
1257	Called when the server has returned a payload representing a single record such as in response to a find or save .
1258	Called when the server has returned a payload representing multiple records such as in response to a findAll or findQuery .
1259	This method allows you to push a payload containing top - level collections of records organized per type .
1260	You can use this method to customize the root keys serialized into the JSON . By default the REST Serializer sends camelized root keys . For example your server may expect underscored root objects .
1261	You can use this method to customize how polymorphic objects are serialized . By default the JSON Serializer creates the key by appending Type to the attribute and value from the model s camelcased model name .
1262	Called by the store in order to fetch a JSON array for all of the records for a given type .
1263	Called by the store in order to fetch a JSON array for the unloaded records in a has - many relationship that were originally specified as IDs .
1264	Called by the store when a newly created record is saved via the save method on a model record instance .
1265	Called by the store when an existing record is saved via the save method on a model record instance .
1266	Called by the store when a record is deleted .
1267	Builds a URL for a given type and optional ID .
1268	Takes a URL an HTTP method and a hash of data and makes an HTTP request .
1269	Inflector . Ember provides a mechanism for supplying inflection rules for your application . Ember includes a default set of inflection rules and provides an API for providing additional rules .
1270	Underscores relationship names and appends _id or _ids when serializing relationship keys .
1271	Underscores the JSON root keys when serializing .
1272	Serializes a polymorphic type as a fully capitalized model name .
1273	EXTRACT Extracts the model typeKey from underscored root objects .
1274	Convert snake_cased links to camelCase
1275	Normalize the polymorphic type from the JSON .
1276	Serialize has - may relationship when it is configured as embedded objects .
1277	Extract embedded objects out of the payload for a single object and add them as sideloaded objects instead .
1278	Extract embedded objects out of a standard payload and add them as sideloaded objects instead .
1279	The ActiveModelAdapter overrides the pathForType method to build underscored URLs by decamelizing and pluralizing the object type name .
1280	The ActiveModelAdapter overrides the ajaxError method to return a DS . InvalidError for all 422 Unprocessable Entity responses .
1281	Parses an escaped url query string into key - value pairs .
1282	Set a normalized attribute on the element in a way such that all directives can share the attribute . This function properly handles boolean attributes .
1283	Compile function matches each node in nodeList against the directives . Once all directives for a particular node are collected their compile functions are executed . The compile functions return values - the linking functions - are combined into a composite linking function which is the a linking function for the node .
1284	Wrapper for linking function which converts normal linking function into a grouped linking function .
1285	This is a special jqLite . replaceWith which can replace items which have no parents provided that the containing jqLite collection is provided .
1286	This is used with json array declaration
1287	Parse a request URL and determine whether this is a same - origin request as the application document .
1288	Traverse the specified AST .
1289	json - rpc - ws client
1290	json - rpc - ws connection
1291	Create a builder function for marks .
1292	Send the request using the socket
1293	Parses the bootstrap to figure out the default bootstrap component
1294	This fixes the TS Config file in the nativescript folder
1295	This fixes the references file to work with TS 2 . 0 in the nativescript folder
1296	Fix the NativeScript Package file
1297	Fix the Angular Package
1298	Fix the Main NativeScript File
1299	Fix . gitignore
1300	Display final help screen!
1301	Please use this bind not the one from Function . prototype
1302	This method cannot throw .
1303	Resolves a value from CallArgument description .
1304	Either callFrameId or functionObjectId must be specified .
1305	Validates a TileJSON
1306	load and set each association
1307	the default error handler
1308	Zips a list of files or directories
1309	Executes shell commands synchronously and logs the stdout to console .
1310	Checks if the input is a file if it is a file it reads it and return the content otherwise just pass the input as an output
1311	Merges two yaml files . The merge is done using lodash . merge and it happens recursively . Meaning that values of file2 will replace values of file 1 if they have the same key .
1312	Attempt to load a Kes override class .
1313	Based on the information passed from the CLI by the commander module this function determines whether to use the default Kes class or use the override class provided by the user
1314	In case of error logs the error and exit with error 1
1315	Discover and returns the system bucket used for deployment
1316	Builds templates nested in the main template using the specified config and cf file paths
1317	Builds uploads and deploy a Cloudformation based on options passed from the commander library
1318	Builds and uploads a lambda function based on the options passed by the commander
1319	Send response to the pre - signed S3 URL
1320	Return options converted to a string
1321	Polyfill Object . assign
1322	Create a form element add hidden inputs for all the post data and post it into a newly opened popup
1323	Open a popup using the first argument . Wait for it to close . Returns the window object
1324	Open a popup using the first argument . Wait for it to close and call the callback . Set the options string using the options object Returns the window object
1325	Open a popup using the first argument . Post the data into the open popup . Wait for it to close and call the callback . Set the options string using the options object Returns the window object
1326	Returns content range that should be wrapped
1327	Check if given range is a single caret between tags
1328	Check if abbreviation can be extracted from given position
1329	Returns completions for stylesheet syntaxes
1330	Returns all possible snippets completions for given editor context . Completions are cached in editor for for re - use
1331	Returns stylesheet snippets list
1332	Returns markup snippets list
1333	Extracts prefix from the end of given string that matches match regexp
1334	Ensures that given editor Emmet abbreviation marker contains valid Emmet abbreviation and updates abbreviation model if required
1335	Toggle boolean properties or properties that have a values array in its definition .
1336	Determine if the model has changed since the last change event . If you specify an attribute name determine if that attribute has changed .
1337	Returns a bound handler for doing event bubbling while adding a name to the change string .
1338	helper for creating derived property definitions
1339	The Image class .
1340	Shipit task .
1341	Only support for es5 modules
1342	A closure factory to build the checkSize function for most of our handlers
1343	Same except with 5 addends
1344	LmdBuilder LMD Package Builder
1345	Uses variable sandbox for create replacement map
1346	Brakes sendbox in one module
1347	wipe sandobx variable
1348	Collects all plugins events with usage and event index
1349	Wipes lmd_on lmd_trigger lmd_events variables from source
1350	wipe lmdEvents variables
1351	Applies or removes block from lmd_js
1352	Create stylesheet link
1353	A method assignment helper for hierarchy subclasses .
1354	Positions the specified row of nodes . Modifies rect .
1355	Lazily construct the package hierarchy from class names .
1356	Simple JSON stringify
1357	Walker for if nodes . It overrides countLine because we want to instrument conditions .
1358	This is the key function for condition coverage as it wraps every condition in a function call . The condition id is generated fron the lineId (
1359	Wheter or not the if decision has only one boolean condition
1360	Label nodes need special treatment as well .
1361	This function tries to extract the name of anonymous functions depending on where they are defined .
1362	This function wraps ternary conditionals in order to have condition coverage
1363	RequireJS & AMD - style define
1364	Calculate coverage total
1365	Merges mixins with config
1366	Config files deep merge
1367	Merges all config files in module s lineage
1368	Returns depends config file of this module
1369	Merges configs flags
1370	For now add plugins from build to bundle
1371	Wrapper for non - lmd modules files
1372	Aggregates all module wrappers
1373	Checks module type
1374	Compute x - scale and normalize the first row . Compute shear and make second row orthogonal to first . Compute y - scale and normalize the second row . Finally compute the rotation .
1375	store starting mouse location
1376	detect the pixels that would be scrolled by this wheel event
1377	Formats lmd config
1378	Parse a sitemap document For each qualifying url element in urlset call base . input Stops processing if an error occurs .
1379	Convert Buffer input call next or callback with error
1380	Retrieve the sitemap from a url and call to parse it .
1381	Retrieve the sitemap from a file and call to parse it .
1382	Prepend a message to an Error message .
1383	Simple response checker for remote files . Expected use in robots . txt or sitemap . xml only .
1384	Utility to promisify a Node function
1385	Make sure path exists so a sitemap write can succeed .
1386	Parse a sitemap index document For each qualifying sitemap element download parse the sitemap . Stops processing if an error occurs .
1387	Generate the input arguments for snapshots from a robots . txt file . Each input argument generated calls the listener passing the input object .
1388	Generate the snapshot arguments from a line oriented text file . Each line contains a single url we need a snapshot for .
1389	Generate the snapshot arguments from an array of pages . Stops processing if one fails .
1390	Normalize the given object to a function .
1391	If a normalized option was overriden but a default still undefined supply one . The result could still be undefined but only if the default is undefined .
1392	Prepare options for use by an input generator .
1393	Get an output path for a page .
1394	Using the options map the given page to an output path .
1395	Run the input generator .
1396	Generate the input Emit the event that contains the input hash
1397	Check if a path exists .
1398	Determine the default phantomJS module path . This is overridden by the phatomjs option .
1399	The worker task that launches phantomjs .
1400	Prepare html snapshots options .
1401	Run all the snapshots using the requested inputGenerator
1402	Create the lock factory .
1403	Notifier Constructor Polls the outputDir and when all the files exist calls the listener indicating the snapshots are done .
1404	Start a watch interval when a file exists remove it from our files array . If the files array is empty call the listener and stop the watch interval .
1405	Add a file to the files array if it s not there .
1406	Check if a file is being processed or has already been processed .
1407	Remove a file from the files array if it s there . Unprotected version .
1408	Remove a file from the files array if it s there . Protected version .
1409	The onReady callback
1410	Generate input for one line of a simple robots . txt file Does not support wildcards .
1411	Retrieves robots . txt from url and parses it .
1412	Reads the robots . txt file and parses it .
1413	Bubbles up values that do not nest to the furthest key .
1414	exclude b from a and return remainder cidrs
1415	get unique timestamp in miliseconds
1416	parsing host and port information from url
1417	convert JSON object to query params
1418	removing trailing slashes
1419	retrieve only specific properties from object
1420	internal method for events in case there is no consent for custom events but internal events has consents
1421	prepare request by adding basic info to it
1422	insert request to queue
1423	get metrics of the browser
1424	sending HTTP request
1425	Creates a promise that is resolved when all input promises have been settled . The returned Promise is resolved with an array of Promise . Inspection objects .
1426	Get the next word .
1427	Classify a word .
1428	Create a test based on a list of phrases .
1429	creating callback with collection rebuilding
1430	The nodejs database wrapper .
1431	used to start at 0 each time .
1432	Takes a set of reconnect options defined in README
1433	Create css build function
1434	Approximate gulp 4 . 0 series
1435	A type filter that matches on the document s type property
1436	Add the specified padding to the right of the given string value until its length matches the desired length
1437	Transforms the given collection definition which may have been defined as a single item a list of items or a function that returns a list of items into a simple list where each item has the specified prefix if any
1438	Assigns role access to users
1439	Retrieves a list of channels the document belongs to based on its specified type
1440	Output help information if necessary
1441	Takes an argument an returns its human readable equivalent for help usage .
1442	The following functions are nested within this function so they can share access to the doc oldDoc and validationErrors params and the attachmentReferenceValidators and itemStack variables
1443	Constructs the fully qualified path of the item at the top of the given stack
1444	Retrieves the ID of the business to which the document belongs
1445	Builds a function that returns the view add replace remove channels extrapolated from the specified base privilege name which is formatted according to the de facto Books convention of VIEW_FOOBAR ADD_FOOBAR CHANGE_FOOBAR and REMOVE_FOOBAR assuming the base privilege name is FOOBAR
1446	Check that a given value is a valid ISO 8601 format date string with optional time and time zone components
1447	Converts the given time to the number of milliseconds since hour 0
1448	Compares the given time strings . Returns a negative number if a is less than b a positive number if a is greater than b or zero if a and b are equal .
1449	Compares the given date representations . Returns a negative number if a is less than b a positive number if a is greater than b or zero if a and b are equal .
1450	Converts an ISO 8601 time zone into the number of minutes offset from UTC
1451	Call Start on the required Module Apexes
1452	Helper Functions as well as Entity definition
1453	Send a message from an entity to an Apex entity . If a callback is provided return when finished
1454	Delete an entity from the module s memory . If the entity is an Apex of a Module then delete all the entities found in that module as well .
1455	Save an entity file . Make sure that all nested files exist in the cache prior to saving said file
1456	Access a file that exists in the module . json
1457	Spin up an entity from cache into memory and retrievd its context otherwise just return it s context from memory
1458	For retrieving modules Modules come from the cache directory on the harddrive or the ModCache if its already been read to RAM .
1459	Reads in the given config and fills in the Sources Macros
1460	Create a list of all required modules and their brokers
1461	Add the module to the Modules object if unique
1462	Write the modules and all instances to the cache
1463	Build an object to represent a directory
1464	generate a 32 character hexidecimal pid
1465	Writes the system to the cache
1466	Write the modules to the cache
1467	Write the module Apexes to the cache
1468	Resolves the main promise created during genesis call
1469	load protocol to access modules
1470	Recursive directory deletion
1471	get mouse position
1472	injects any LAN proxy servers into the request
1473	inject any custom header values into a proxy request along with the x - forwarded - for x - forwarded - port and via headers
1474	reads a config file from either the config file specified on the command line or fallback to a file name json - proxy . config in the working directory return true if the file can be read otherwise return false
1475	parse a config structure overriding any values in config
1476	transform a config hash object into an array
1477	reads command line parameters
1478	argv . X will be an array if multiple - X options are provided otherwise argv . X will just be a scalar value
1479	parses rule syntax to create forwarding rules
1480	Return an error with a specific code
1481	Change workinState for a specific branch
1482	Fetch the list of branches in the repository and update them all . Will clear the WorkingStates of all branches that have updated .
1483	Initialize a new RepositoryState from the repo of a Driver . Fetch the branches and checkout master or the first available branch .
1484	Force conversion to an arraybuffer
1485	Force conversion to string with specific encoding
1486	Tests equality of two ArrayBuffer
1487	Returns a Seq of tree mixing changes and the fetched tree
1488	Returns a Map of TreeEntry with sha null when the content is not available as sha .
1489	Attempts to find a SHA if available for the given file
1490	Create a commit builder from the changes on current branch
1491	Flush a commit from the current branch using a driver Then update the reference and pull new workingState
1492	colorize strings and send to console . log
1493	Push a local branch to a remote repository
1494	Pulls changes for local branch from remote repository . Loses any pending changes on it .
1495	Computes a TreeConflict between to tree references . Fetches the trees from the repo . The list of conflicts is the minimal set of conflicts .
1496	Merge solved Conflicts back into a TreeConflict . Unsolved conflicts default to keep base .
1497	Create a merge commit builder
1498	Returns the final TreeEntries for a solved TreeConflict .
1499	Add a new blob to a cache instance
1500	Generate a files tree from the current branch taking pending changes into account .
1501	Normalize a commit coming from the GitHub commit creation API
1502	Normalize a commit coming from the GitHub commit listing API
1503	Stat details about a file .
1504	Read content of a file returns a String
1505	Return true if file exists in working tree false otherwise
1506	Remove a file
1507	Rename a file
1508	Returns true if the given file has the same content in both RepositoryState s current working state or is absent from both .
1509	Initializes the testing infrastructure needed for verifying the behavior of the core proxy library - nock express and httpServer .
1510	configures nock globally for a test run
1511	Configures an express instance on a dynamically assigned port for serving static files and proxying requests based on the config .
1512	Creates a simple LAN proxy using a vanilla HTTP server that verifies the state of the proxy credentials and the x - forwarded - url are correct .
1513	Teardown logic for the reusable test suites
1514	Set a new change to the current WorkingState . Attempt to resolve some cases like removing a file that was added in the first place .
1515	Revert all changes
1516	Revert change for a specific file
1517	Revert changes for a specific directory
1518	Revert all removed files
1519	Normalize a path
1520	Returns true if the path is under dir
1521	List files recursively in a directory
1522	Rename a directory
1523	Create a new branch with the given name .
1524	Fetch the list of branches and update the given branch only . Will update the WorkingState of the branch ( and discard previous
1525	Remove the given branch from the repository .
1526	Fetch a blob from SHA .
1527	a private function to automatically refresh the access token when receiving a 401 . Adds rejected requests to a queue to be processed
1528	Create a connection to the pokitdok API . The version defaults to v4 . You must enter your client ID and client secret or all requests made with your connection will return errors .
1529	convert an array of features to a single line in SVM - light format . The line starts with a space .
1530	add a single feature if it does not exist
1531	add all features in the given hash or array
1532	Convert the given hash of features to a numeric array using 0 for padding . If some features in the hash do not exist - they will be added .
1533	Convert all the given hashes of features to numeric arrays using 0 for padding . If some features in some of the hashes do not exist - they will be added .
1534	Convert the given numeric array to a hash of features ignoring zero values .
1535	Convert the given numeric arrays to array of hashes of features ignoring zero values .
1536	Recursive internal subroutine of trainOnline .
1537	Recursive internal subroutine of trainBatch .
1538	Recursive internal subroutine of classify .
1539	BinarySegmentation - Multi - label text classifier based on a segmentation scheme using base binary classifiers .
1540	Multilabel online classifier based on Perceptron and Passive - Aggressive .
1541	Tell the classifier that the given classes will be used for the following samples so that it will know to add negative samples to classes that do not appear .
1542	PartialClassification is a test classifier that learns and classifies the components of the labels separately according to the splitLabel routine . One of the examples could be classifying intent attribute value separately by three different classifiers . When performing test by trainAndTest module there is a check for toFormat routine if it exists then pretest format converting occurs .
1543	Record the result of a new binary experiment .
1544	Record the result of a new classes experiment per labels .
1545	Record the result of a new classes experiment .
1546	Record the result of a new classes experiment in a hash manner . Doesn t allowed to do a inner output all stats are put in hash
1547	Send the given dataset to svm_perf_learn .
1548	weights smaller than this are ignored to save space A utility that converts a model in the SVMPerf format to a map of feature weights .
1549	convert a single dataset to Weka ARFF string .
1550	in lib linear feature numbers start with 1
1551	Send the given dataset to liblinear_train .
1552	weights smaller than this are ignored to save space A utility that converts a model in the SvmLinear format to a matrix of feature weights per label .
1553	Tell the classifier that the given sample belongs to the given labels .
1554	MulticlassSegmentation - Multi - label text classifier based on a segmentation scheme using a base multi - class classifier .
1555	Sets the prop property on options to the concatenation of that property from both options and data if both exist . Otherwise if either exist exclusively that array will be set to the options . When neither exist nothing is done to the options object .
1556	Check and remove nodes recursively in preorder . For each composite node modify its children array in - place .
1557	Filters models so they are formatted correctly .
1558	Utility method for listing all files in a bundle .
1559	Utility method for listing all resources in a bundle .
1560	Returns a list of resources in all the bundles .
1561	Returns a list of all located bundle names . The names are not ordered .
1562	Returns the name of the bundle to which the path belongs .
1563	Creates the seed of a potential bundle .
1564	Makes a bundle out of a directory .
1565	Turns the path into a resource in the associated bundle if applicable .
1566	Processes the _skip rule to decide if the path should be skipped .
1567	Handles the file .
1568	Handles the resource .
1569	Determines whether a resource is filtered or not .
1570	Figures out which seed to use from the list of available packages . Select by depth then by semver .
1571	Figures out which bundles to use from the list . The returned list is sorted first by NPM package depth then by name .
1572	Creates a bundle from an NPM package and queues up files in the package .
1573	Creates a new object with the certain keys excluded . This is used instead of delete since that has performance implications in V8 .
1574	The Locator walks the filesystem and gives semantic meaning to files in the application .
1575	get a scale with logic for the x and y axis if the domain starts and finishes on the same number returns the mid range value
1576	Buffer traces and defer recording until maxTraces have been received or sendInterval has elapsed since the last trace was recorded .
1577	Analyzes given gulp instance and build internal cache for further printing
1578	Chunks given string into pieces making each chunk less or equal to OPTIONS . lineWidth taking into account safe word - break
1579	Prints usage help information for the given gulp instance . Usually it is used as a task within gulpfile . js in your project Please make sure all your comments are properly annotated
1580	a filter implementation that mutates the original array
1581	Extract CSS from a browserify bundle obj - > null
1582	Validate the regular placeholders of an item . This possibly modifies the given validationErrors .
1583	Group equal entries together The generated groups look like the given gettextItems only that they have locs instead of loc Where locs is an array of loc entries having a fileName line and column .
1584	This will traverse an l10n - JSON file and call the callback function for each translation item .
1585	Returns a Promise that returns a flat list of all the Elm files the given Elm file depends on based on the modules it loads via import .
1586	Parses URL query string .
1587	Stringifies an object to a URL query string .
1588	_compileAny Recursive helper for compiling ojml or any type
1589	Bind events to dom
1590	Views are special objects map properties together . This is a union of arguments With the remaining arguments becoming a list
1591	Set compiles and inserts in innerHTML
1592	Helper method that abstracts getting oj values
1593	tell us if anything with dependencies is missing something
1594	Application entry point .
1595	Creates a new instance of Shortline which can be used to prompt users for input .
1596	Defines the shape of a node in an XML document .
1597	Uploads a coverage report .
1598	Creates an instance of the travis - ci HTTP agent with a given endpoint and request options .
1599	Runs git with given arguments .
1600	Constructs a SlugDetectionError .
1601	Strips scoped style from html and return html and metadata .
1602	Returns a combined CSS from all component CSS and scopedCss .
1603	Constructs an InvalidSlugError .
1604	Checks that a build has an expected commit hash .
1605	Trims a single slash from the end of a string if present .
1606	Allows any option to be passed as a function which gets webpack s context as its first argument in case some info from the loader context is necessary
1607	The runtime contains functions which must be converted into strings without any escaping at all . Yes this method of doing so is insane . But it works!
1608	Renders all given pages as static HTML into the destination folder .
1609	Gets the path portion of a git URL .
1610	Pick env specific robots . txt
1611	compile hogan template and open index . html
1612	Sort users by username length . Longest usernames first .
1613	Case - insensitively get the correct emoji name from the possible emoji for an input string .
1614	Wrap a function in a fiber . Correctly handles expected presence of done callback
1615	Find matches for a regular expression in a string and push their details to parts Type is a for IDs b for classes attributes and pseudo - classes and c for elements and pseudo - elements
1616	Calculate the specificity for a selector by dividing it into simple selectors and counting them
1617	Adds an index to a collection
1618	Inserts a migration record into the migration collection
1619	Inserts a seeder record into the seeder collection
1620	Callback function to return mongo records
1621	Returns default params overrides if provided with values
1622	Tests whether the given props object contains a property with the name of propNameOrFunction .
1623	GifCli Converts the gif file into ASCII frames .
1624	Should I log?
1625	Return the true value for this specific checkbox .
1626	Get the value of the angular - bound attribute given its name . The returned value may or may not equal the attribute value as it may be transformed by a function .
1627	If the directive has not been initialized yet do so .
1628	Listen to model changes .
1629	Listen to view changes .
1630	get - get one several or all cookies
1631	filter - get array of cookies whose names match the provided RegExp
1632	set - set or delete a cookie with desired options
1633	test - test whether the browser is accepting cookies
1634	Shared functions Allow an error message to retain its color when split across multiple lines .
1635	Create nested options objects .
1636	Setup zoom event listeners which update the state
1637	Add passed selection to the chart .
1638	Apply earlier selections .
1639	Create nested options object .
1640	Listen to chart events to save selections into to state object .
1641	start watcher changes in small datasets compares whole object
1642	start watcher changes in big datasets compares length of records
1643	Add unique identifier for each chart
1644	Redux thunk action creator for performing asynchronous actions .
1645	Generation a Redux action object
1646	Generate action creators based on input arguments . The first argument is always treated as the Redux action type ; all other passed arguments are treated as property on the action object itself .
1647	Generate a random number in a given range and round to a given value
1648	Log Redux actions
1649	_removeSubscribers remove the subscribers to one channel and return the number of subscribers that have been unsubscribed .
1650	Loops per all the events to remove subscribers .
1651	_addSubscribers add all the events of one channel from the subscriber
1652	_getChannelEvents return the events array in channel .
1653	subscribersByEvent return all the subscribers of the event in the channel .
1654	Method to add a single callback in one channel an in one event .
1655	Method to unsubscribe a subscriber from a channel and event type . It iterates in reverse order to avoid messing with array length when removing items .
1656	subscribe method gets the oEventsCallbacks object with all the handlers and add these handlers to the channel .
1657	unsubscribe gets the oEventsCallbacks methods and removes the handlers of the channel .
1658	Method to execute handlers
1659	Publish the event in one channel .
1660	Create or get a namespace by a namespace defined as string
1661	Resolve dependency injection by default .
1662	Returns the promise callback by type
1663	Adds new callbacks to execute when the promise has been completed
1664	Module to be stored adds two methods to start and extend modules .
1665	Use jQuery detection
1666	Use Event detection and if it fails it degrades to use duck typing detection to test if the supplied object is an Event
1667	Add common properties and methods to avoid repeating code in modules
1668	wrapMethod is a method to wrap the original method to avoid failing code . This will be only called if bDebug flag is set to false .
1669	register is the method that will add the new module to the oModules object . sModuleId will be the key where it will be stored .
1670	Method to set an instance of a module
1671	start more than one module at the same time .
1672	Method to modify the init method to use it for extend .
1673	startSingleModule is the method that will initialize the module . When start is called the module instance will be created and the init method is called . If bSingle is true and the module is started the module will be stopped before instance it again . This avoid execute the same listeners more than one time .
1674	Start only one module .
1675	createInstance is the method that will create the module instance and wrap the method if needed .
1676	Sets properties and methods from a template object .
1677	startAll is the method that will initialize all the registered modules .
1678	stop is the method that will finish the module if it was registered and started . When stop is called the module will call the destroy method and will nullify the instance .
1679	stop more than one module at the same time .
1680	Stop only one module .
1681	stopAll is the method that will finish all the registered and started modules .
1682	Loops over instances of modules to stop them .
1683	remove is the method that will remove the full module from the oModules object
1684	_delete is a wrapper method that will call the native delete javascript function It s important to test the full code .
1685	Entry point .
1686	Returns the formatted item value
1687	Calls setValue and if it s a valid item value sets the input or element value
1688	Returns the input or element item value without formatting or defaultValue if it s empty string undefined false or null
1689	createMarkdownSerializer create a snapshot serializer .
1690	markdownToSnapshot converts snapshot from markdown format into native .
1691	tryExit tries to pop state until it has correct depth .
1692	enterRootSuite pushes root suite into the current state .
1693	enterSnapshot pushes snapshot into the current state .
1694	pushSnapshotCode adds snapshot to the current snapshot .
1695	transformSuite converts suite from native into markdown format .
1696	transformSnapshotList converts snapshot list from native into markdown format .
1697	suiteHeader serializes suite header .
1698	safeDelimiter tries to find a safe delimiter by appending backticks until it finally finds it .
1699	defaultPathResolver is a default path resolver for snapshot files .
1700	Renders a list of snapshots up to specified limit of lines
1701	Renders the message for unused snapshots warning
1702	Snapshot preprocessor .
1703	Single Line Plugin
1704	Replace newline characters with the passed string
1705	Condense an array of content blocks into a single block
1706	Check if a CharacterList contains entities
1707	Hex to RGB converter
1708	CSS rule handler
1709	Creates analytics . js method stubs
1710	Create a debugger with the given namespace .
1711	Returns true if obj is a buffer or an arraybuffer .
1712	Return a string representing the specified number .
1713	Return the integer value specified by the given string .
1714	Polling interface .
1715	When the socket is upgraded while we re probing
1716	Remove all listeners on the transport and on self
1717	Initialize backoff timer with opts .
1718	Extract code comments from the given string .
1719	Add ngModel controls to the directive . This allows the use of ngModel to set and get the value in the slider . It uses the noUiSlider API s get and set functions so no custom formatters need to be defined for ngModel . The ngModelOptions can be used .
1720	Creates a noUiSlider instance .
1721	method is nested because it s called recursively
1722	Used by ProxyDomain - derived classes to create an API method called apiName ; the API can have methods send and reply which are bound to self ; a promise is created in api . replied which is satisfied after the reply method has been called
1723	Gets JSON from the remote server
1724	Splits a string into domain and method
1725	Gets data from the remote server and copies it to the client
1726	Get native stack
1727	Captures stdout and stderr into an object for the provided execution scope .
1728	Listens to a provided stream and executes the provided function for every write call . Accepts options to silence the output going to the console .
1729	Starts a capture on the provided stream using the provided options and stream execution .
1730	Wraps capturing functions with quiet flags to allow for interception .
1731	function to find nearest value in select options
1732	Round x to the nearest integer choosing the even integer if it lies halfway between two .
1733	delay only used for debugging
1734	Patch polarity and valence properties on nodes with a value and word - nodes . Then patch the same properties on their parents .
1735	Factory to gather parents and patch them based on their childrens directionality .
1736	Patch all words in parent .
1737	Patch all parents .
1738	Factory to patch based on the bound config .
1739	Patch a polarity and valence property on node s .
1740	Fire a listener on a target
1741	DOM event delegator
1742	Shortcut method for creating lazy views .
1743	Converts an object into a persistent or temporary directory structure .
1744	Appends WHERE conditions to query builder based on given date parameters
1745	Use this to add an equation clause for the value which is either an object or an array
1746	Get Knex instance without validating the connection
1747	Attempts to close all registered knex instances
1748	Remark plugin for Highlight . js .
1749	Render Markdow using given processor .
1750	Appends an arrow head marker to the defs element to be used later .
1751	Test that the nodes from postcss - value - parser are a certain length . This uses strict equality by default but you can supply an alternate operator .
1752	var fd = null ; var fdFileName = null ;
1753	Harvest any resolved promises if all failed then return reasons .
1754	Given offset of a keyword after decompression return a record block info containing it else undefined if not found .
1755	Read data to an Uint8Array and decode it to text with specified encoding .
1756	Read raw data as Uint8Array from current offset with specified length in bytes
1757	Read header section parse dictionary attributes and config scanner according to engine version attribute .
1758	Read keyword summary at the begining of keyword section .
1759	Read keyword index part of keyword section .
1760	Read keyword entries inside a keyword block and fill KEY_TABLE .
1761	Delay to scan key table for debug onyl .
1762	Read record summary at the begining of record section .
1763	Read record block index part in record section and fill RECORD_BLOCK_TABLE
1764	Read definition in text for given keyinfo object .
1765	Read content in ArrayBuffer for give keyinfo object
1766	Find word definition for given keyinfo object .
1767	a oneway increased ticket used to cancel unfinished pattern match Reduce the key index array to an element which contains or is the nearest one matching a given phrase .
1768	Reduce the array to index of an element which contains or is the nearest one matching a given phrase .
1769	Search for the first keyword match given phrase .
1770	Match the first element in list with given offset .
1771	Determines whether the specified modifier keys match the modifier keys that were pressed .
1772	Creates a function to get and set the specified key combination .
1773	Event handler to insert or remove tabs and newlines on the keydown event for the tab or enter key .
1774	Event handler to prevent the default action for the keypress event when tab or enter is pressed . Opera and Firefox also fire a keypress event when the tab or enter key is pressed . Opera requires that the default action be prevented on this event or the textarea will lose focus .
1775	Executes all registered extension functions for the specified hook .
1776	Helper function that asynchronously converts ImapMessage instance to instance of Message class .
1777	GUID Partition Table
1778	return gpt }
1779	Limit the execution rate of a function using a leaky bucket algorithm .
1780	Format quantity values either encode to hex or decode to BigNumber should intake null stringNumber number BN
1781	Format quantity or tag if tag bypass return else format quantity should intake null stringNumber number BN string tag
1782	FormatData under strict conditions hex prefix
1783	Format object even with random RPC caviets
1784	Format various kinds of data to RPC spec or into digestable JS objects
1785	Format RPC inputs generally to the node or TestRPC
1786	Returns a merged set of yaml files
1787	Parse the property list of an object pattern .
1788	String literals might start with or
1789	A string literal list may contain strings or regular expressions .
1790	Parse numeric literals like 1 1 . 05 . 05 8e5 ...
1791	Parser entry point
1792	curry takes a function and a partial list of arguments and returns a function that can be executed with the rest of the arguments .
1793	m is an array of predicates a is the array to match
1794	Compile a single level of the AST
1795	Returns name of given matched token
1796	Consumes attribute value from given location
1797	Check if given character code is valid unquoted value
1798	If given key is set in the object it returns the associated value otherwise it sets the value to val and returns it .
1799	Read and Parse XML file from given path pass result to finish Any error that occurs is simpy thrown .
1800	append angoose - ui sources
1801	Show an error
1802	compile the model based on the server side schema
1803	Loop through all the top level props
1804	Debounces a function . Returns a function that calls the original fn function only if no invocations have been made within the last quietMillis milliseconds .
1805	Workaround for Q module with CLS
1806	end directiveFunc get a list of fields with a specific tag
1807	Emit an error
1808	Call a command
1809	Find the input element in the template . It will be one of input select or textarea . We need to ensure it is wrapped in jqLite \ jQuery
1810	Search through the originalDirective s element for elements that contain information about how to map validation keys to messages
1811	register module with angoose so it knows to publish it
1812	Set or get configurations .
1813	Creates a connection to the given url .
1814	Starts up a shell with the given context .
1815	Execute the given files in the context shared with the shell when started .
1816	Wrap async functions with animation etc
1817	Error reporting helper
1818	Display values in a table .
1819	Return a promise or nothing in sync mode or if the database hasn t changed
1820	The Picklr object .
1821	Recursively process files .
1822	File type determination .
1823	Directory type determination .
1824	Process all files under startDir using options .
1825	Does the actual audit or update of a single file .
1826	Initialize an HTTP server
1827	Sort an array by the name of existing property and add a first element into array
1828	Interface for building an object by configuration
1829	Create a new HTTP transaction
1830	Difference between dates which are passed in formats milliseconds days hours minutes
1831	Initialize an error handler for the HTTP router
1832	Difference between now and date which is passed in formats milliseconds days hours minutes
1833	Consumes full character pair if possible
1834	Consumes all character codes from given array right - to - left if possible
1835	Check if given character code belongs to HTML identifier
1836	pool for testing in place camelizeKeys
1837	Load JSON data from a companion file and store in file data .
1838	As the elevator s doors are currently opened we push any user request to go to a level on the level stack .
1839	When the elevator s doors are closed we wait for a request to move to another level .
1840	Decrypt text using AES - GCM
1841	Encrypt text using AES - CBC
1842	Encrypt text using AES - GCM
1843	Unpack encrypted content components from an encrypted string
1844	Derived key info
1845	The default PBKDF2 function
1846	Create transform stream to encode objects into Buffer .
1847	Create transform stream to decode binary data into object .
1848	Generates a binomial graph graph with n nodes .
1849	Generates a binomial graph graph with n nodes using a faster algorithm for sparse graphs .
1850	draw single cubic bezier curve
1851	draw single polyline
1852	draw many polylines of the same color
1853	This function can be used for live updates of brushes . That is during the specification of a brush this method can be called to update the view .
1854	data within extents
1855	Checks if the first dimension is directly left of the second dimension .
1856	Logically converts a property and its value based on the flow direction context
1857	Logically gets the direction of the given property based on the flow direction context
1858	ReadFileCache is an EventEmitter subclass that caches file contents in memory so that subsequent calls to readFileP return the same contents regardless of any changes in the underlying file .
1859	Fetch the resource and call done when it is fetched
1860	Shred takes some options including a logger and request defaults .
1861	this is a quick - and - dirty logger . there are other nicer loggers out there but the ones i found were also somewhat involved . this one has a Ruby logger type interface we can easily replace this provide the info debug etc . methods are the same . or we can change Haiku to use a more standard node . js interface
1862	The Shred object itself constructs the Request object . You should rarely need to do this directly .
1863	processOptions is called from the constructor to handle all the work associated with making sure we do our best to ensure we have a valid request .
1864	Set up some event magic . The precedence is given first to status - specific handlers then to responses for a given event and then finally to the more general response handler . In the last case we need to first make sure we re not dealing with a a redirect .
1865	Logs the curl command for the request .
1866	Construct a Response object . You should never have to do this directly . The Request object handles this getting the raw response object and passing it in here along with the request . The callback allows us to stream the response and then use the callback to let the request know when it s ready .
1867	Add getters .
1868	Add setters but as private methods .
1869	Add setters .
1870	Add both getters and setters .
1871	Get correct codec for given encoding .
1872	Codepage single - byte encodings .
1873	Codepage double - byte encodings .
1874	Generates the authentication parameter for the user Preference will be given to the token if it exists
1875	Instantiates a Vec4 object .
1876	Create a new EConstructor with the formatted format as a first argument .
1877	Instantiates a Mat44 object .
1878	Instantiates a Vec2 object .
1879	Instantiates a Quaternion object .
1880	Instantiates a Vec3 object .
1881	Create container for the snackbar
1882	Activate the listeners
1883	Compare the options to the default ones .
1884	Install function for Vue
1885	Instantiates a Transform object .
1886	Instantiates a Triangle object .
1887	Returns true if str matches the given pattern .
1888	Create the command to use
1889	Shallow clone and create options
1890	Get bash path
1891	Provides in memory storage and regular flush to disk .
1892	removes the items from craftable if result is picked up
1893	descend a specific node or descend all
1894	Registers dependencies that can be provided to the function
1895	Calls the function
1896	Applies the function iterator to each item in arr in parallel .
1897	Returns the results of interating the function on each item in an array .
1898	force wrap to true defining events callback
1899	start server with provided options
1900	show server starting information
1901	simple log middleware output the access log
1902	type = get | set
1903	Sendpulse API initialization
1904	Form and send request to API service
1905	Get token and store it
1906	Form error object
1907	Create address book
1908	Edit address book name
1909	Remove address book
1910	Get information about book
1911	List email addresses from book
1912	Add new emails to address book
1913	Get information about email address from book
1914	Get cost of campaign based on address book
1915	Get list of campaigns
1916	Get information about campaign
1917	Get campaign statistic by countries
1918	Get campaign statistic by referrals
1919	Create new campaign
1920	Add new sender
1921	Activate sender using code
1922	Request mail with activation code
1923	Get global information about email
1924	Remove email from all books
1925	Get email statistic by all campaigns
1926	Add email to blacklist
1927	Remove emails from blacklist
1928	Get information about email by id
1929	minify the result
1930	write result to file
1931	Create a cookie instance .
1932	Set a cookie value .
1933	Get a cookie value .
1934	Delete a cookie value .
1935	Clear all stored cookies optionally keeping the keys in the except array .
1936	Curry a binary function .
1937	Clone behaviour for gallery items used when creating a helper for the purpose of sorting .
1938	upload or update file function
1939	delete bucket file function
1940	Setup and return dispatch function . The dispatch function will call the relevant action handler .
1941	Get next time for a schedule . Will never return the current time even if it is valid for the schedule unless allowNow is true .
1942	Delete several items from a service based on the given payload .
1943	Normalize and map a request to an action and map and serialize its response .
1944	Get an ident item from service based on the meta . ident object on the action .
1945	Return an Integreat instance with a dispatch method . Use the dispatch method for sending actions to services for retrieving typed items and updating data .
1946	Create a queuable action from a schedule definition .
1947	Get several items from a service based on the given action object .
1948	Send the request with the adapter and return the response . Will serialize any data in the request and normalize any data in the response . The access object on the request must have status granted and will be returned on the response object .
1949	Create a schema with the given id and service .
1950	Return item mapper object with fromService and toService .
1951	Map the data going _to_ the service . Everything is handled by the mappings but this method make sure that the right types are mapped .
1952	this emits the data events on the watcher emitter for all fds
1953	return the total line buffer length from all active tails
1954	Prepare pipeline by replacing keys with functions or function objects from the collection object and remove anything that is not functions or function objects .
1955	Cast query params according to type
1956	Set up Integreat queue interface .
1957	Get metadata for a service based on the given action object .
1958	Set several items to a service based on the given action object .
1959	Set metadata on a service based on the given action object .
1960	Converts a group of specifications into JSON Schema .
1961	Create a JSON Schema reference to the specified type .
1962	Determine if a value or one of its ancestors is or was a list .
1963	Searches the aggregate options of a choice for the specified option .
1964	stealing from shr - expand Determine if a type supports a code constraint .
1965	Action to delete expired items .
1966	Transforms a range against an array of ops
1967	Transforms a range anchor taking into account whether it s the start or end
1968	Return the first matching endpoint from an array of endpoints that has already been sortert with higher specificity first . Type should match before scope which should match before action but the order here is taken care of by the required sorting .
1969	Create an action object .
1970	Authorize the request according to the setting on the relevant schema . Sets the access object with status property specifying whether access is granted or refused and returns the request .
1971	Complete missing props and allow only expected props on the request object .
1972	Get service from type or service id .
1973	Action to sync from one service to another .
1974	Task api that configures and loads gulp tasks .
1975	wrapper to pass bg
1976	Babel external helper module injector .
1977	Map the data coming _from_ the service . Everything is handled by the mappings but this method make sure that the right types are mapped .
1978	Process messages from Facebook Messenger .
1979	Create a function for mapping app properties onto the given prop namespace .
1980	Collects features and bind them to the node density
1981	node - s3 - encode - url
1982	Save expected file
1983	Save source file
1984	Save labeled flag
1985	Node General abstaction between all node types The rule is that this should contain the most obviouse implementation
1986	TextNode has a parent and a text containter
1987	ElementNode has a parent tagname and attributes
1988	extended class with the new prototype
1989	Distribute content to the cssfiles object
1990	Detect weather a selector should be extracted or not
1991	create tuple that
1992	The exposed API used in all . js
1993	Some abstact API for the commanality matrix
1994	Extend the rows or the collums
1995	Builds and attribute matching function complexity is for uncomfirmed performace sake
1996	Checks if container a is a container of b
1997	Find the common parent of a and b
1998	Parse style attribute intro object
1999	Calculate the tree distance between a and b
2000	Create a new Lexer for the given file and options .
2001	Create default delimiters and tags
2002	Set an error message with the current line number and column .
2003	Create a lexer for the given variable type .
2004	Create a tag lexer for the given type .
2005	Push AST node type onto parent . nodes
2006	Create an opening tag lexer for block name .
2007	Create a closing tag lexer for block name .
2008	Create a block lexer with opening and closing tags for the given name .
2009	Unshift node prop onto the AST
2010	Update lineno and column based on str .
2011	Run lexers to advance the curson position
2012	Get the next AST token
2013	Tokenize the given string .
2014	Hook for showing the automatic message
2015	pauses the timer
2016	resumes the timer
2017	Creates a temporary directory .
2018	This is not valid for simpleStrings
2019	This is not UTF - 8 compliant
2020	Build base config
2021	Public function to notify
2022	Adds numbers to a base name until it finds a unique database key
2023	Called after an account has been succesfully linked
2024	Called after an account has been succesfully linked using access_token provider
2025	Handles errors if authentication fails
2026	Handles errors if authentication from access_token provider fails
2027	Framework to register OAuth providers with passport
2028	A shortcut to register OAuth2 providers that follow the exact accessToken refreshToken pattern .
2029	Registers a provider that accepts an access_token directly from the client skipping the popup window and callback This is for supporting Cordova native IOS and Android apps as well as other devices
2030	This is called after a user has successfully authenticated with a provider If a user is authenticated with a bearer token we will link an account otherwise log in auth is an object containing access_token and optionally refresh_token
2031	Configures the passport . authenticate for the given provider passing in options Operation is login or link
2032	Configures the passport . authenticate for the given access_token provider passing in options
2033	Gets the provider name from a callback path
2034	Gets the provider name from a callback path for access_token strategy
2035	Requires that the user have the specified role
2036	Wire up rotation controls
2037	Use default CRS classes for common codes fallback to custom for all other codes .
2038	This recurses through all the map s layers to update layer positions after their positions moved .
2039	Takes an array of markers and adds them in bulk
2040	Takes an array of markers and removes them in bulk
2041	Override FeatureGroup . getBounds as it doesn t work
2042	Overrides LayerGroup . eachLayer
2043	Returns true if the given layer is in this MarkerClusterGroup
2044	Overrides FeatureGroup . onAdd
2045	Overrides FeatureGroup . onRemove
2046	Remove the given object from the given array
2047	Shared animation code
2048	Recursively retrieve all child markers of this cluster
2049	Zoom to the minimum of showing all of the child markers or the extents of this cluster
2050	Expand our bounds and tell our parent to
2051	show spiral instead of circle from this marker count upwards . 0 - > always spiral ; Infinity - > always circle
2052	Non Animated versions of everything
2053	If the given layer is currently being spiderfied then we unspiderfy it so it isn t on the map anymore etc
2054	Have to create a separate marker for each map else weirdness happens
2055	Interpolate the page path with pagination variables .
2056	Create a get pages utility for people to use when rendering .
2057	helper engine that can use a template from a string
2058	Job retry specification
2059	Options for a new worker
2060	generic drag event handler
2061	More reliable indexOf courtesy of
2062	A wrapper for the tor process containing its ChildProcess port number and data directory .
2063	Returns an Array containing the included locations .
2064	Returns an Array of default paths .
2065	Checks package . json for possible paths
2066	Checks bower . json for possible paths
2067	Returns an Array of the files mentioned in a main field If the value is noted without . js at the end it is appended .
2068	An HTTP Agent for proxying requests through Tor using SOCKS5 .
2069	Runs a local version of Inch .
2070	shutdown puts it into power saving sleep mode . call with false to wake it up .
2071	sets the number of pixels per row pretty much always 8 for most devices .
2072	sets the brightness of the LEDs 0 to 15
2073	clears the entire display
2074	pos is passed in as 0 to 7 0 on the left 7 on the right
2075	Compiles down an example . Async examples call an imaginary done function once they re done .
2076	Class to implement inner working of plugin .
2077	Checks synchroniously if given file or directory exists . Returns true or false .
2078	Hapi plugin function which adds i18n support to request and response objects .
2079	build a dependency tree from the flat mdeps list by recursing
2080	given a modules array with cycles - trim dependencies in each cycle
2081	Create a times series that you can report to .
2082	define the action
2083	Finds and deletes first encounter of value in target
2084	Finds and deletes all encounters of value in target
2085	Create an Influx Database Connection
2086	Create a handler timer for AMQP messages received through taskcluster - client . Please note that this relies on that messages format .
2087	Monitor CPU and memory for this instance .
2088	Create a stats handler for taskcluster - client clients which takes an option stats as function that will be call after an API call .
2089	Helpers Output option list
2090	Output command list
2091	Module main constructor
2092	Helper method to look up port by protocol .
2093	Replace scripts with ... and prune empty scripts
2094	holds functions and error handlers
2095	Get the element values of a given node list .
2096	Get the value of a given node if it s a static value .
2097	Check whether a given variable is modified or not .
2098	Define the output configuration .
2099	Check whether a given character is escaped or not .
2100	Replace a given string by a given matcher .
2101	eslint - disable - next - line valid - jsdoc Replace a given string by a given matcher .
2102	this provides some preventative error handling because the pubsub edge seems to be unstable
2103	data is message . data so it should have msg . topic and msg . message
2104	JWT - Class representing a JSON Web Token it s payload and it s status
2105	sign - generate a new token from the payload
2106	store - stores the JWT in the cookie
2107	toJSON - this function is called when the jwt is passed through JSON . stringify we don t want the secret or options to be stringified
2108	verify - verifies the JWT s token
2109	init - initialize jwt - express
2110	valid - requires that a JWT is valid
2111	setupComponent - Assumes it has been called in the context of a jasmine spec . - Creates a new HTML element and attaches to it an instance of this . Component - If a fixture is provided the fixture will serve as the component root .
2112	Load amd module before executing specDefinitions
2113	Middleware constructor function
2114	Incoming traffic middleware
2115	Outgoing traffic middleware
2116	When listing all categories and user taps on a given category
2117	When showing a single category and user taps the stack
2118	Service represents a set of grouped values necessary to provide a logical function . For instance a Door Lock Mechanism service might contain two values one for the desired lock state and one for the current lock state . A particular Service is distinguished from others by its type which is a UUID . HomeKit provides a set of known Service UUIDs defined in HomeKitTypes . js along with a corresponding concrete subclass that you can instantiate directly to setup the necessary values . These natively - supported Services are expected to contain a particular set of Characteristics .
2119	Characteristic represents a particular typed variable that can be assigned to a Service . For instance a Hue Characteristic might store a float value of type arcdegrees . You could add the Hue Characteristic to a Service in order to store that value . A particular Characteristic is distinguished from others by its UUID . HomeKit provides a set of known Characteristic UUIDs defined in HomeKitTypes . js along with a corresponding concrete subclass .
2120	Processes the schema descriptors to upgrade the database schema to the greatest version specified .
2121	Performs a single - version database migration to the schema described by the provided database schema descriptor .
2122	Normalizes the provided array of object store fetch descriptors to process before upgrading the database schema .
2123	Validates the types of the provided schema descriptors .
2124	Creates a promise that resolves to a record list containing the first page of records matching the provided filter .
2125	Normalizes the provided compound key represented as an object into a compound key representation compatible with the Indexed DB .
2126	Iterates the cursor to which the provided Indexed DB request resolves . The method will iterate the cursor over the records in this storage within the range specified when the cursor was opened until the provided callback does not request iterating to the next record or the last matching record is reached .
2127	Handles a single iteration of a Indexed DB cursor iterating the records in the storage .
2128	Fetches all records from the specified object stores using the provided read - write transaction .
2129	Extracts all records from the provided object store and preprocess them using the provided preprocessor .
2130	writeFileP Create the directory structure and then create the file .
2131	Runs the provided transaction operations on the specified object stores obtained from the provided transaction .
2132	Returns the cursor direction to use with the native Indexed DB API .
2133	Creates a new index in the provided object store according to the provided index schema .
2134	Fetches the next page of records in a new ready - only transaction and resolves into a record list containing the fetched records .
2135	Executes the provided event listeners with the provided parameters . Any errors thrown by the executed event listeners will be caught and logged to the console and then the remaining event listeners will be executed .
2136	Resolves the provided promise to the specified state and result value . This function has no effect if the provided promise has already been resolved .
2137	Executes the specified query using the provided cursor factory .
2138	Inserts the provided record into the sorted array of records and their primary keys keeping it sorted .
2139	Uses the binary search algorithm to find the index at which the specified record should be inserted into the specified array of records to keep the array sorted according to the provided comparator .
2140	Prepares the query that uses the specified filter and record order for execution on this storage .
2141	Calculates the best possible sorting optimization for the provided storages updating the provided map with sorting optimization scores for each storage .
2142	Calculates the best possible filtering optimizations for the provided storages updating the provided map with optimized filtering info and optimization score for each storage .
2143	Selects the storage on which the execute a query that should lead to the best possible performance . The method returns all the data necessary to execute the query .
2144	Preprocess the raw ordering specification into form that can be used in query optimization .
2145	Handles opening the connection to the database and wraps the whole process in a promise .
2146	Handles a database error encountered during connection establishing .
2147	Executes the currently registered database schema migration listeners with the provided arguments .
2148	Splits the provided filter object to two objects according the the provided storage key path . This is used to separate a complex filter object into an object optimizable into a key range and a simpler object that will be compiled into a filter predicate function .
2149	Generates an array containing all field paths in the provided object .
2150	Sets the specified field denoted by the specified field path on the provided object to the provided value .
2151	Retrieves the value from the provided object at the specified field path .
2152	Updates the schema of the provided Indexed DB database to the schema specified by the provided schema descriptors .
2153	Int - > Int - > Position - > Element - > Element
2154	Various template functions to render subsets of the UI
2155	Creates a dreamscreen client
2156	A representation of a light bulb DreamScreen HD DreamScreen 4K SideKick
2157	String - > Element
2158	Convert an array into an HTML fragment
2159	Produce an error document for when parsing fails .
2160	Write a chunk into memory .
2161	End the writing . Passes all arguments to a final write . Starts the process which will trigger error with a fatal error if any ; data with the generated document in string form if succesful . If messages are triggered during the process those are triggerd as warning s .
2162	Clean listeners .
2163	Close dangling pipes and handle unheard errors .
2164	clean out blacklisted content
2165	snap ls list saved boilerplates
2166	append session data
2167	return new request document create req cookie
2168	Constructor for the message class
2169	Constructor for the clock class
2170	Override request process so it first fetches the data needed for a page transition .
2171	Gets a set of OGR Parameters for an export
2172	Add parameters specific to a csv export
2173	Add parameters specific to a shapefile export
2174	file changes watcher
2175	Cornerstone function that sends a purge request to Akamai s CCU REST API It will return a promise . options is optional .
2176	Returns a new function pre - configured with the options that exist up to this point
2177	Initialize a Mock instance .
2178	globally resolve forEach enumeration
2179	merge in any properties to target that are excelusively only in source
2180	Create an object for the prototype
2181	Merge a single property
2182	Merges arrays by concatenating them
2183	Merges object recursively using merge function
2184	Mixes all mixins into the instance
2185	Copyright 2010 James Halliday ( mail
2186	get the full deployed system definition
2187	create a new blank system
2188	link a system from local fs
2189	list all of the available containers in a system
2190	build a container
2191	build all containers belonging to a system in series
2192	Supports target abbreviation
2193	deploy the specified revision to the nominated target handle if file is missing
2194	preview a system deploy
2195	get the revision history for a system
2196	get a specific revision
2197	compile the system into the various targets and commit them to the repository
2198	commit the system
2199	Finalize the task .
2200	Inject necessary code into the file app . js
2201	Fix module resolution in all found javascript files
2202	Find all files that match extension criteria
2203	Find and process all files
2204	Write registry file to resolver . js
2205	Build the container and update all instantiations of the container with the new speicific block and replace identifiers for new uuids
2206	find the container in the supplied target files return the container with the highest buildHead number
2207	Set global variables on worker & main threads else node
2208	ensures that the system repository is in place creates it if doesn t exist
2209	register a system
2210	unregister a system
2211	Init the object construct and process DOM
2212	Process DOM using defined DOM processors
2213	Add a child component
2214	Remove child component
2215	Attaches a component by replacing the provided element . Element must be an element inside the parent component .
2216	ensures that system has all required files
2217	checks if a directory is a system ( has all the required files and correct system . json and system . js
2218	create a new system repository
2219	create a new system by linking from local file system
2220	unlink system from the daemon
2221	commit a new version of the system the head of the commit log may be ahead of the actual deployed version of the system
2222	get the head revision for a system
2223	get a revision from the history with a specific version number
2224	get a revision from the history with abbreviation support
2225	get the currently deployed revision
2226	list all of the available revisions in the system
2227	find revision id by parital or full identifier
2228	Allows custom configuration from environment
2229	Determine the target containers - machine containers that have a proxy on them .
2230	Create a new Relation .
2231	Check if the given modelType is registered as another model s subModel . If so add it to the super model s _subModels and set the modelType s _superModel _subModelTypeName and _subModelTypeAttribute .
2232	Add a reverse relation . Is added to the relations property on model s prototype and to existing instances of model in the store as well .
2233	Deposit a relation for which the relatedModel can t be resolved at the moment .
2234	Try to initialize any _orphanRelation s
2235	Add a relation to all existing instances of relation . model in the store
2236	Find the Store s collection for a certain type of model .
2237	Find a model type on one of the modelScopes by name . Names are split on dots .
2238	Find the attribute that is to be used as the id on a given object
2239	Find a specific model of a certain type in the store
2240	Add a model to its appropriate collection . Retain the original contents of model . collection .
2241	Check if the given model may use the given id
2242	Remove a model from the store .
2243	Check several pre - conditions .
2244	When this . instance is destroyed cleanup our relations . Get reverse relation call removeRelated on each .
2245	Normalize and reduce keyContents to an id for easier comparison
2246	If a new this . relatedModel appears in the store try to match it to the last set keyContents
2247	Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany . If no collection is supplied a new collection will be created of the specified collectionType option .
2248	Normalize and reduce keyContents to a list of ids for easier comparison
2249	Retrieve related objects .
2250	Convert relations to JSON omits them when required
2251	Find an instance of this type in Backbone . Relational . store . - If attributes is a string or a number find will just query the store and return a model if found . - If attributes is an object and is found in the store the model will be updated with attributes unless options . update is false .
2252	Base class for many xtal - components
2253	A Bitmap represents an Image Canvas or Video in the display list . A Bitmap can be instantiated using an existing HTML element or a string .
2254	Return a new Thing that has the keys in sorted order . Recursive .
2255	If a value could have properties and has none this function is called which returns a string representation of the empty value .
2256	increment anchor count
2257	Compile the files .
2258	Creates an optimistic chain no checks before calling a function or accessing a property or calling a method
2259	Construct a new Rieussec stopwatch
2260	Callback for utils . applyAll
2261	Initializes Template with optionnally the given str and options .
2262	used to fix fs . watch on windows triggering cascading events the function fn can only be called once per rate
2263	get optional data from command line as json or file containing json or javascript
2264	adds the webhook authentication middleware module to the webserver
2265	Makes a POST request as a form to the given url with the options as data
2266	Verifies the SHA1 signature of the raw request payload before bodyParser parses it Will abort parsing if signature is invalid and pass a generic error to response
2267	This method forces the evaluator to sync with the current model in the case of a smart update
2268	This class manages the DockerCmd and handles dockerdesc . json
2269	drilldown Safely accesses deep properties of objects .
2270	Render output from tasks
2271	Return a text surrounded by space
2272	Return a new instance that is inherited from Gulp
2273	We are creating one generic version of logger .
2274	Try and idenfity if the given item is a promise or is promise like
2275	Figure out if a function declaration looks like it takes a callback Really this just checks the setup of a function for an argument - it cannot check if that argument is a function
2276	Like parallel but only return the first non - undefined non - null result
2277	Collection of items that have been deferred
2278	Queue up an await point This stops the execution queue until its satisfied that dependencies have been resolved
2279	Queue up a timeout setter
2280	The default timeout handler This function displays a simple error message and also fires the timeout hook
2281	Run a single function promise return promise factory or any other combination - then a callback when finished Take a function reference and treat it as a callback style function If the function returns a promise this behaviour is transformed into a callback style function
2282	Internal function to run a callback until it returns a falsy value
2283	}}} Reset all state variables and return the object into a pristine condition
2284	Hooks {{{ Set up a hook
2285	Return the first tag with a name = name
2286	Helper functions Checks blackList - and whitList - regex against the given file name and returns if this file can be deleted .
2287	Construct a new Seven object . Optionally pass a SevenConfig object to set properties . Each property of the SevenConfig object is optional . If the passed in config contains bad values an exception will be thrown .
2288	after dialog close wait for change
2289	there are no properties on a RemoveObserver every object that went as ref through this function can be used as this in any of the RemoveObserver methods
2290	Finds and parses the property chains in an expression .
2291	Handles a function to be called in its correct scope Finds the end of the function and processes the arguments
2292	Handles a bracketed expression to be parsed
2293	Prepends reference variable definitions
2294	Run once and lastest one
2295	Minimal assert function
2296	a custom bind function to bind arguments to a function without binding the context
2297	Produces an object with the opener and closer exception values
2298	Determines if an opener paren should have a missing space after it
2299	Determines if an closer paren should have a missing space after it
2300	Determines if an opener paren should not have an existing space after it
2301	Determines if an closer paren should not have an existing space after it
2302	set a value as configurable and non - enumerable
2303	7 . 1 . 4 ToInteger
2304	7 . 1 . 15 ToLength
2305	22 . 1 . 5 . 1 CreateArrayIterator Abstract Operation
2306	25 . 4 . 1 . 4 . 1 Promise Resolve Functions
2307	25 . 4 . 1 . 5 . 2 GetCapabilitiesExecutor Functions
2308	25 . 4 . 5 . 3 . 2 PromiseResolutionHandlerFunctions
2309	custom event stuff
2310	native DOM and event stuff
2311	Reports that there shouldn t be a space before the last token
2312	Reports that there should be a space after the first token
2313	Reports that there should be a space before the last token
2314	Get a random point offset from the origin
2315	Get a nested value from the specified object . Returns undefined if not found .
2316	returns array of strings like firstname lastname <email
2317	look for the email first . if no results look for the name .
2318	Unpacks Keyczar s output format
2319	Returns the keyhash for an RSA public key .
2320	Returns a key object for an RSA key .
2321	Extend grunt - exec
2322	Check for NVM
2323	Install missing packages
2324	Prompt to install
2325	Install latest compatible node version
2326	Check for available node versions
2327	Check for compatible node version
2328	A subject which executes its assertions on each element of an iterable .
2329	A class which functions as a subject but doesn t actually execute any assertions until the promise has resolved . Once the promise succeeds any method calls will be played back on the result value of the promise .
2330	Subject subclass which provides assertion methods for promise types .
2331	Retrieve value stored at key
2332	Resolve all references in value up to max depth
2333	Convert a string value to a printable string representation .
2334	Convert an object value to a printable string representation .
2335	Return a new keyczar containing the public part of key which must be an asymmetric key .
2336	find the primary version ; ensure we don t have more than one
2337	Convert a map value to a printable string representation .
2338	Load data from url and store at key
2339	Merge cacheControl with defaults
2340	Generate expiry object from headers
2341	Generate serialized headers object for response
2342	Check if expired
2343	Convert a set value to a printable string representation .
2344	Convert an array value to a printable string representation .
2345	Reset underlying data
2346	Retrieve serialisable data
2347	Resolve all nested references for data
2348	Represents the value being checked and provides assertion methods . Can be subclassed to provide assertion methods that are type - specific .
2349	FamilySearch user .
2350	initilize create directory process
2351	sync folder to create new directories with provided Configurations
2352	Copy refrence directory in temporary directory
2353	Process files that were recently copied in temp directory
2354	update refrence directory files names as per config provided by replaceFileName key
2355	get array of folders from base temp path
2356	update content of refrence directory files as per config provided by replaceContent key
2357	copy data from writed temp directory to destination drive
2358	string = > array
2359	OpenStack Keystone Identity API client .
2360	A recursive function that finds all the parents of a given class .
2361	Finds all the direct children of a given class name .
2362	Recursive function that creates a nested list of a class parents .
2363	Creates a list of child classes .
2364	Add names to the parents map for every new doclet
2365	A tag in the FamilySearch system .
2366	Handle the event of an option being seen .
2367	A common representation of an error on the FamilySearch platform .
2368	The FamilySearch - proprietary model for a relationship between a child and a pair of parents .
2369	A representation of metadata about an artifact such as a memory .
2370	A description of a FamilySearch feature .
2371	Get a cookie
2372	Listen to events in the events manager
2373	Information about a change .
2374	Ensure that there is a github remote named github .
2375	Push to github .
2376	Run the current child s test function synchronously .
2377	Run the current child s test function asynchronously .
2378	Comment on a discussion
2379	Recurse to find directories we can watch .
2380	Add a watchable directory to the map and list of directories we re watching .
2381	Iterate over the age - prioritized list and start fs watches .
2382	Check a directory for changes .
2383	Notify the master process that something changed .
2384	Decorate a mock function with chainable methods .
2385	Construct a MockDate using a Date constructor value .
2386	If mock time is moving forward schedule a time check .
2387	The getScheduler returns mocks for setTimeout and setInterval .
2388	The getUnscheduler returns mocks for clearTimeout and clearInterval .
2389	When mock . time . add is called run schedules whose time has come .
2390	Start a gc task if options dictate it . GC task will kick off occasionally to reap expired versions of records .
2391	Extra information about a name form .
2392	OAuth 2 token responses
2393	Sets value back to the given min - max range if necessary
2394	Insert item into the list at a given position
2395	object = > undefined
2396	A named event
2397	string = > object
2398	Information about feedback for places .
2399	LDS ordinance reservation
2400	Information about a search .
2401	Simultaneously processes all items in the given array .
2402	Calls a function with the given arguments and ensures that the error - first callback is _always_ invoked exactly once even if the function throws an error .
2403	Returns a wrapper function that ensures the given callback function is only called once . Subsequent calls are ignored unless the first argument is an Error in which case the error is thrown .
2404	there s 3 implementations written in increasing order of efficiency 1 - no Set type is defined
2405	3 - a standard Set type is defined and it has a forEach method
2406	Create an instance of Base with the given config and options .
2407	Memoize a generated regex or function . A unique key is generated from the method name pattern and user - defined options . Set options . memoize to false to disable .
2408	Multiply the segments in the current brace level
2409	Returns true if the given node does not have an inner value .
2410	Parses the given POSIX character class pattern and returns a string that can be used for creating regular expressions for matching .
2411	Wrap the string with the correct regex syntax .
2412	Format padding taking leading - into account
2413	If the string is padded returns a curried function with the a cached padding string or false if no padding .
2414	Customize Snapdragon parser and renderer
2415	The main function takes a list of strings and one or more glob patterns to use for matching .
2416	Synchronous API .
2417	Stream API .
2418	Return a set of tasks based on provided patterns .
2419	Returns a set of works based on provided tasks and class of the reader .
2420	Generate tasks based on parent directory of each pattern .
2421	Convert patterns to tasks based on parent directory of each pattern .
2422	Return only negative patterns .
2423	Group patterns by base directory of each pattern .
2424	Convert group of patterns to tasks .
2425	Returns those negative patterns whose base paths includes positive base path .
2426	Create a task for positive and negative patterns .
2427	Returns true if the entry match any of the given RegExp s .
2428	Sync the files and persist them to the cache
2429	Load the cache from the provided file
2430	Save the state of the cache identified by the docId to disk as a JSON structure
2431	Load a cache identified by the given Id . If the element does not exists then initialize an empty cache storage .
2432	Clear the cache identified by the given id . Caches stored in a different cache directory can be deleted directly
2433	Set a value for property key on cache name
2434	walk down the path swapping out linked pathparts for their real values
2435	The main function . Pass an array of filepaths and a string or array of glob patterns
2436	Return an array of files that match the given glob pattern .
2437	Returns true if the filepath contains the given pattern . Can also return a function for matching .
2438	Returns true if the filepath matches the given pattern .
2439	Returns true if a file path matches any of the given patterns .
2440	Filter the keys of an object with the given glob pattern and options
2441	Return a function for matching based on the given pattern and options .
2442	Create and cache a regular expression for matching file paths .
2443	Create the regex to do the matching . If the leading character in the glob is ! a negation regex is returned .
2444	Create and cache a regular expression for matching file paths . If the leading character in the glob is ! a negation regex is returned .
2445	Collapse repeated character sequences .
2446	Expand exponential ranges
2447	Handle patterns with whitespace
2448	Fast array filter
2449	Convert the given extglob string to a regex - compatible string .
2450	Convert string to a regex string .
2451	Create the regex to do the matching . If the leading character in the pattern is ! a negation regex is returned .
2452	Copy properties from the source object to the target object .
2453	Advance to the next non - escaped character
2454	A BasicSourceMapConsumer instance represents a parsed source map which we can query for information about the original file positions by giving it a file position in the generated source .
2455	Comparator between two mappings where the original positions are compared .
2456	Comparator between two mappings with deflated source and name indices where the generated positions are compared .
2457	Compute the URL of a source given the the source root the source s URL and the source map s URL .
2458	It seems a linked list but it is not there will be only 2 of these for each stream
2459	if there s something in the buffer waiting then process it
2460	Create a new AST Node with the given val and type .
2461	Shim to ensure the . append methods work with any version of snapdragon
2462	Create a new instance of Snapdragon with the given options .
2463	Throw an error message with details including the cursor position .
2464	Visit node .
2465	Compile ast .
2466	Create a new Parser with the given input and options .
2467	Set parser name with the given fn
2468	Push a token onto the type stack .
2469	Pop a token off of the type stack
2470	Get the previous AST node
2471	Update column based on str .
2472	Create a parser with open and close for parens brackets or braces
2473	Capture end - of - string
2474	Run parsers to advance the cursor position
2475	Parse the given string .
2476	Mixin source map support into compiler .
2477	For UTF - 8 a replacement character is added when ending on a partial character .
2478	Convert a range to a regex pattern
2479	Call plugin fn . If a function is returned push it into the fns array to be called by the run method .
2480	Wrap a named plugin function so that it s only called on objects of the given type
2481	Caches results of unary or binary function .
2482	Protects the given object by wrapping it in a Proxy .
2483	Get or build a sub register for an object .
2484	Try to handle as a directory .
2485	Creates a container status to be used as a precondition
2486	Update information about directory s content with lstat .
2487	Read a directory and return its structure as an object . Only Files Directories and Symlinks are included!
2488	Function converts dataset property name someValue to data - some - value .
2489	Generate the configure and detach commands for all root elements .
2490	> Initialize Limon with input and options . Both are completely optional . You can pass plugins and tokens to options .
2491	Creates a new planner
2492	Set the strip to a loading pattern . Triggered when the tests have started .
2493	Flash the strip with green lights indicating tests were successful .
2494	Creates a new resource .
2495	Register Loader of different Language
2496	generator to add callbacks to a bucked and possible fire them
2497	call a callback set
2498	call all the callback sets in a callback bucket
2499	promise generator - psuedo read - only
2500	pass judgement onto thy deferred
2501	the heart of the beast
2502	upon any action on the dependencies check the resolution
2503	Bolty main class
2504	Make a functional CSS rule
2505	Generate a complete set of responsive spacing helpers
2506	Allows a resource to be deleted .
2507	Returns current config
2508	Save current config
2509	Returns server options
2510	API data resource on local IndexedDB
2511	format a parsed object into a url string
2512	Treats ray like an infinite line see where it intersects circle .
2513	Scopes the url to the tournament league or flight
2514	Fetch is used by Tournament and list is being used by Flight . Can those be consolidated?
2515	JSON RPC library entry point
2516	returns the function parameters
2517	Get only changed properties as a hash .
2518	Allows a resource to be updated .
2519	By class name
2520	Include a sub - template in the current template specifying a data object
2521	Build output for displaying function parameters .
2522	Approach the desired contrast ratio by modifying the given component from the given starting value .
2523	Update DOM attributes
2524	Generate controlBox elements
2525	Centers the graph . All parameters can be either a number or a function evaluated for a number result .
2526	Helper function to determin if all nodes are fixed . This is run after any node is dragged and set to fixed .
2527	Fades and unfades connected nodes to a given targetNode .
2528	A helper to select a given SVG element from given node data .
2529	Pass in the element and the screen coordinates are returned .
2530	Gets a recycled SVG element from the pool svgElementMap or creates a new element for the given type . Any data specified by D3 will be copied to the element . Returns a function which is evaluated by D3 .
2531	Hides the node context menu if visible and removes any node highlighting . If an event is supplied it is checked against any existing context menu and is ignored if the context menu is within the parent hierarchy .
2532	Checks if a target node is connected to another given node by checking index or the linkedByIndex map .
2533	Handles responding to the dependencies radio group .
2534	Handles responding to the level slider .
2535	Handles responding to overflow menu selections .
2536	Handles a context click on a table row showing the related node context menu .
2537	Handles a context click on a table row showing the related node context menu . Defers to onNodeMouseOverOut .
2538	Handles clicks on zoom control buttons and invokes centerGraph with new scale value .
2539	Handles clicks on the node context menu invoking any active actions .
2540	Shows the node context menu
2541	Handles a mouse down action on a graph node . Hides any showing context menu . For left clicks the selected node becomes the drag target and related nodes are faded . Any other mouse button is ignored .
2542	Handles fading related nodes to the given targetNode if there is no currently selected node .
2543	Handles the window resize event .
2544	D3 tick handler for the forced graph layout .
2545	Recycles all SVG elements above the top level SVGGElement defining the graph .
2546	Reverses all graph links .
2547	Provides handling of changing menu text & material icons based on current state .
2548	Builds the table UI with all current node data and associates the active events on each row .
2549	Updates the node table max - height enabling scrolling as necessary .
2550	Determines a new scale that fits the entire graph into view .
2551	Get the the inner width of the browser window
2552	Adds link to CSS in the head if no CSS is loaded
2553	Sends successful HTTP reply
2554	Sends failed HTTP reply
2555	Builder for generic HTTP Request Handler
2556	HTTP Server Creation
2557	API server builder
2558	Cross - browser event listener
2559	Initialize a new Reply with the given parent and definition .
2560	Returns a Buffer of the specified file from the specified repo and commit reference . Recursively gets the tree instances until the last part which is gets the rawObject for and serves back over HTTP .
2561	Processes a list of files and produces the api routing for them
2562	package module for different environments
2563	polyfills the global setImmediate
2564	Common entry point for all API models
2565	returns - 1 if value being searched for isn t found . value cannot be object .
2566	Scopes the url to the season
2567	Initialize a new Customer with the given parent and definition .
2568	This does a shallow copy of objects . This is needed for objects such as Errors Otherwise some properties may not be available .
2569	Formats a message using the specified options .
2570	Zips up a directory .
2571	Extracts a zip to a directory . This will fail if the destination already exists .
2572	Create a Bzip2 compressed tar of a directory .
2573	Extracts a tar to a directory .
2574	Recursive promise - based mkdir .
2575	Expose small fabrication helper .
2576	Read directory and initialize JavaScript files .
2577	Return iterator for array or object .
2578	Make sure only valid JavaScript files are used as source . Ignore other files like . log files . Also allow constructors .
2579	Simple check to see if the provided stack is empty or falsy .
2580	menu link is a toggle sidebar links are close - only
2581	Main function for creating a shellstream
2582	A representation of an object in the profile
2583	Extend our properties based on specified object
2584	Generate the property getter
2585	Generate the name of the property initialization function . This is used to de - duplicate init functions for the same properties
2586	Generate the piece of code that initializes an instance of the object
2587	Read entire buffer and compile
2588	Read entire stream and process
2589	Call when finished with compression
2590	journal . js
2591	records the agent s validation and creation events in a temporary structure if log method is l or outputs the same events to the console if method is v
2592	records the agent s execution events in a temporary structure if log method is l or outputs the same events to the console if method is v
2593	outputs the contents of the temporary creation and execution structure to a specific file defined by the user ; if file is not defined outputs to a default file ; otherwise outputs error to the console
2594	Scopes the url to the team and member
2595	Initialize a new ArticleTranslation with the given parent and definition .
2596	Initialize a new MacroAction with the given parent and definition .
2597	Converts one JSON object to another using maps specified with from - > to array
2598	Executes a function as a promise for every item in a list .
2599	Old snake_case method
2600	According to tests this error - checking does not slow down execution . It s not necessary to worry about repetitive error - checking slowing down execution when this function is called inside a loop .
2601	Attach various of event listeners to a given XHR request .
2602	Add a filename to the list with its dependencies first
2603	Given a new LevelUp chain - style batch a denormalized Common Form and the output of commonform - merkleize for that Common Form add LevelUp put operations to the batch for the Common Form and each of its children .
2604	JSON . parse wrapped to take an errback .
2605	Builds the url based on crazy
2606	Extend WebSocket to automatically reconnect
2607	returns - 1 if array being searched for isn t found . if arrayToSearchFor contains objects this will always return - 1 .
2608	Recursively creates a file
2609	Is set by the task _read_overrides_and_resolutions
2610	The profile index where profile objects are contained .
2611	Add a profile object on the index
2612	Generates a divide - and - conquer nested if - statements up to maximum depth steps deep . After that it performs equality testing using a switch - case statement .
2613	Return the property variable name used to optimize for size the minified result .
2614	Resolve dependencies and arrange objects accoridng to priority and priority .
2615	Generate a table with all the property constants
2616	Generate the list of init functions used by the lookup fcatory to generate the items
2617	Generate the lookup factory by ID
2618	Generate the function to use for identifying an object
2619	Generate the function that is used to encode an object
2620	Initialize a new Client with the given options .
2621	Image collection loader
2622	Load a collection of images
2623	Image loaded checker
2624	Convert img to src
2625	Sort images after the originally order
2626	Build a default value getter .
2627	validates the agent s id according to the validity of the symbols used and the possibility of duplication inside the same agency
2628	returns a list of unique dependency agents
2629	setter for function property
2630	setter for callback property
2631	Initialize a new Case with the given parent and definition .
2632	Initialize a new Resource with the given parent and definition .
2633	Returns a properly formatted container slug .
2634	Returns an array of chapters in this resource container
2635	Returns the contents of a chunk . If the chunk does not exist or there is an exception an empty string will be returned .
2636	Creates a new resource container . Rejects with an error if the container exists .
2637	Opens an archived resource container . If the container is already opened it will be loaded
2638	Reads the resource container info without opening it . This will however work on containers that are both open and closed .
2639	Initialize a new UserPreference with the given parent and definition .
2640	Create an updater function for the esprima transform with the given error handler
2641	The updater function for the esprima transform
2642	Get the node that is annotated by the comment or throw if not present .
2643	Used to report errors
2644	Initialize a new Macro with the given parent and definition .
2645	Quick sort an array .
2646	Select the pivot element using the median - of - three rule .
2647	Partition a subarray according to the Hoare partitioning scheme .
2648	Insertion sort an array .
2649	Searches a resource .
2650	Main entrance function will create PipeStream or joined pipe based on input
2651	Function for wrapping default EventEmitter functions to return itself
2652	Function for connecting some events
2653	Function for adding internal event handlers
2654	Internal target resolver
2655	Builds the function for the resource .
2656	Returns the app api key required to make a service request
2657	Get or require the resource based on the class name .
2658	sign msg with the given key and alg
2659	hash the msg with the msg and alg
2660	Compute the signature headers date digest and authorization headers according to IETF I - D draft - cavage - http - signatures - 05 using rsa - sha256 algorithm
2661	Wait variable expression matches value
2662	Wait attribute matches value
2663	Realiza un unmount y renderiza la nueva vista .
2664	Elimina la vista actual y sus eventos en DOM .
2665	keeping it DRY
2666	Parse quality str returning an object with . value and . quality .
2667	Functions to calculate brightness
2668	Search command from PATH
2669	Execute with promises
2670	On Template changes recall plugins .
2671	Compare all currently selected Versions with their predecessor .
2672	Add article settings .
2673	Render Article .
2674	Render original Article and remove the current visible Article .
2675	Load google fonts .
2676	Return ordered entries by custom order and append not defined entries to the end .
2677	Esprima based explicitly
2678	a ) ngModel compares by reference not value . This is important when binding to an array of objects . b ) Regardless of data type also check whether the given model exists within the options - data
2679	Scopes the url to a user group or persona
2680	Add explicit dependency statements to the node .
2681	Create a new application .
2682	Globally include the chai expect module so each test doesn t need to manually require it
2683	Initialize a new Company with the given parent and definition .
2684	Find functions that are obvious angular entities .
2685	Find inject candidates
2686	Given a function or reference that points to one will resolve to the function node .
2687	Manage prepare for shutdown
2688	Transform body into ms - users message
2689	return text string value by adding up ascii value so the text is somewhat sorted when using a digital sort this is NOT an alphanumeric sort
2690	automatically add a colgroup with col elements set to a percentage width
2691	mmddyyyy ddmmyyyy or yyyymmdd
2692	Returns false if node is a require expression where the module path ends with . js .
2693	Listens for certain server events . Currently the only supported event is the log event which is triggered when Logia server receives a log .
2694	Create a instance of a GitCapsule .
2695	Recover a public key from a signature .
2696	Calculate pubkey extraction parameter .
2697	allows additional permissions for this acl
2698	Revoke a role
2699	DAO implementation .
2700	Model implementation based on Backbone . js Model implementation .
2701	ProxiedModel constructor . This will return a ProxyHandle to act as a Proxy for the created model .
2702	Create a Proxy for a Model . This function will return a new Proxy handle for the given Model .
2703	Get an attribute from the Model . This will first check for Model properties before checking the Model s internal attributes map .
2704	Private functions .
2705	Get a random color
2706	Execute a function on each point in an image
2707	Get the RGBA value of a coordinate
2708	Set the RGBA value of a coordinate
2709	Enlarge by some integer factor
2710	Get the base64 encoding
2711	Get the base64 encoding as a data URI
2712	This is a node - specific version of an anal structural equality test modeled on bits and pieces of many other versions of this check most notably deeper which is in turn based on the Node . js source s assert . deepEqual and the Underscore library . It doesn t throw and handles cycles .
2713	copied straight from tap - test . js
2714	Validates ignore option for given path
2715	Basic input prompt rendering .
2716	Will return a chalk function based on selected index etc ..
2717	Use app . import to add additional libraries to the generated output files . If you need to use different assets in different environments specify an object as the first parameter . That object s keys should be the environment name and the values should be the asset to use in that environment . If the library that you are including contains AMD or ES6 modules that you would like to import into your application please specify an object with the list of modules as keys along with the exports of each module as its value .
2718	Handle GET request .
2719	Handle PUT request .
2720	Returns a copy of the input in which any property that hasn t explicitly been expressed in the schema is stripped .
2721	Creates the YAML schema based on default and passed custom types .
2722	Loads a YAML file and parses it into an Object .
2723	Load theme variables from a YAML file .
2724	Retrieves theme variables from cached theme var or from file if need be
2725	Writes a string in a file .
2726	Initializes global variables . In particular merges defaults and custom options .
2727	Compiles build definitions and theme variables into a ready - to - import scss string .
2728	Builds the scss and writes it into destination file passed in options .
2729	Converts objects to a map typed scss variable
2730	Parses a Javascript Object and returns a sass map string
2731	Distinguishes between strings list and maps and calls the appropriate parser
2732	generate a guid that is tested unique against id s on the current doc
2733	Object to yaml string formatter
2734	Array to yaml string formatter
2735	Backend response .
2736	polyfilled Maps with es6 - shim might exist without for .. of
2737	Registers an item to be managed .
2738	Creates a new Component from the specified config object using the config object s xtype to determine the class to instantiate .
2739	runs a name . space
2740	Serializes a DOM element and its children recursively into a string .
2741	Returns the value of an attribute from the element s underlying DOM node .
2742	An eventual schema exists for a key - value object .
2743	This method adds all the sorters in a passed array .
2744	This method inserts all the sorters in the passed array at the given index .
2745	This method removes all the sorters in a passed array .
2746	This method returns the index that a given item would be inserted into a given array based on the current sorters .
2747	Helper method to update a specified attribute on the fieldEl or remove the attribute all together .
2748	Returns the checked value of this field
2749	Attempts to set the field as the active input focus .
2750	Attempts to forcefully blur input focus for the field .
2751	Attempts to forcefully select all the contents of the input field .
2752	Formats a date given the supplied format string .
2753	Provides a convenient method for performing basic date arithmetic . This method does not modify the Date instance being called - it creates and returns a new Date instance containing the resulting date value .
2754	Calculate how many units are there between two time .
2755	Align the date to unit .
2756	Returns options for specified message type
2757	Prepare message and return as string
2758	Main stdout function
2759	Assign user options to object
2760	Hogan render each page return rendered pages
2761	This gets executed before the original process . stdout . write
2762	helper function for asyncjs
2763	check if selenium server is already running
2764	install drivers if needed
2765	init WebdriverIO instance
2766	run mocha tests
2767	end selenium session
2768	update job on Sauce Labs
2769	finish grunt task
2770	Takes a request response and body object and return a response object for the send callback .
2771	wrapper for bellow each loop
2772	wrapper for set option
2773	So the gist of this funk is its a wrapper funk for the passed in args . I would take a look at whats happening below in the loop to get a better idea of whats going on but we are just passing the keyArgs into this funk
2774	recurse check these since there may be deeper options like tl to remove
2775	add - add reducers
2776	remove - remove reducers by scope & type
2777	replace - replace with new reducers
2778	Converts value to an integer .
2779	Write an error to the errors buffer
2780	Flush the errors buffer
2781	Get a JSON based config file
2782	Check if a filename matches an ignore pattern
2783	Replace non css content in a html file with empty lines
2784	Get file contents and file name from process . argv
2785	Load all file checking plugins
2786	Replaces a CSS class on the element with another . If the old name does not exist the new name will simply be added .
2787	Sets the specified CSS class on this element s DOM node .
2788	Set the size of this Element .
2789	Normalizes currentStyle and computedStyle .
2790	Wrapper for setting style properties also takes single object parameter of multiple styles .
2791	Returns the dimensions of the element available to lay content out in .
2792	Returns true if the value of the given property is visually transparent . This may be due to a transparent style value or an rgba value with 0 in the alpha component .
2793	Write a character to the screen indicating lint status
2794	rfc3986 compatable encode of a string
2795	rfc3986 compatable decode of a string
2796	Generate a nonce for the request
2797	Get a string of the parameters for the OAuth Authorization header
2798	Generate a signature base string for the request
2799	Sign the request
2800	Sets the values of the pickers slots .
2801	Returns the values of each of the pickers slots
2802	addTranslation - add translations
2803	We override initItems so we can check for the pressed config .
2804	Updates the pressed buttons .
2805	Resets the Select field to the value of the first record in the store .
2806	Represents an RPC interface
2807	An Channel is where messages are sent to and receive
2808	Subsequent invocation of the function returned from the jam function simply adds the given function to the chain .
2809	Extracts description from contents of a readme file in markdown format
2810	7 . 4 Comments
2811	Expect the next token to match the specified keyword . If not an exception will be thrown .
2812	11 . 1 . 4 Array Initialiser
2813	11 . 1 . 5 Object Initialiser
2814	11 . 3 Postfix Expressions
2815	11 . 4 Unary Operators
2816	11 . 13 Assignment Operators 12 . 14 . 5 AssignmentPattern
2817	12 . 4 Expression Statement
2818	12 . 9 The return statement
2819	This is used to modify the delegate .
2820	Munge \ n s and spaces in text so that the number of characters between \ n s is less than or equal to width .
2821	Returns true if a file path is absolute .
2822	Repeat the given string the specified number of times .
2823	2 - a simple Set type is defined
2824	Shows error message . Throws unless _continue or config . fatal are true
2825	Common wrapper for all Unix - like commands
2826	Returns false if dir is not a writeable directory dir otherwise
2827	Recursively creates dir
2828	Cross - platform method for splitting environment PATH variables
2829	Echoes stdout changes from running process if not silent
2830	Adds ANSI color escape codes if enabled .
2831	Create a new GNTP request of the given type .
2832	Interface for registering Growl applications and sending Growl notifications .
2833	Initialize a new Command .
2834	The base implementation of _ . difference which accepts a single array of values to exclude .
2835	We need a peek function . If it has an argument it peeks that much farther ahead . It is used to distinguish for ( var i in ... from for ( var i = ...
2836	fnparam means that this identifier is being defined as a function argument prop means that this identifier is that of an object property
2837	Check whether this function has been reached for a destructuring assign with undeclared values
2838	explicitly define this method as function as to have it s name to include as ssfi
2839	Returns true if the given object is an instanceof value or its typeof is the given value .
2840	add all options to the default command
2841	how many arguments should we consume based on the nargs option?
2842	set args from config . json file this should be applied last so that defaults can be applied .
2843	extend the aliases list with inferred aliases .
2844	check if a flag is set for any of a key s aliases .
2845	given a flag enforce a default type .
2846	return the maximum width of a string in the left - hand column of a table .
2847	make sure any options set for aliases are copied to the keys being aliased .
2848	format the default - value - string displayed in the right - hand column .
2849	find the value form with the given name in the attribute forms otherwise undefined
2850	Get s user s passports if not on DAO
2851	echo str > path .
2852	mkdir - p
2853	Tests if path is empty .
2854	of the storage scheme JCM include the epoch of the clock here?
2855	Navigate to the previous active action . This changes the page url .
2856	Creates a new instance of the GrelRequest class .
2857	Private method that handles HTTP responses we get from GitHub . This method will always be executed in the context of a GrelRequest .
2858	split markdown header
2859	Scrolls to the given location .
2860	Scrolls to the end of the scrollable view .
2861	Change the scroll offset by the given amount .
2862	Creates new Draggable .
2863	addActions - add actions util
2864	Returns a string with a specified number of repetitions a given string pattern . The pattern be separated by a different string .
2865	Send a file to a server
2866	Downloads a file from the server saving it into the Local File System
2867	This method will sort a collection based on the currently configured sorters .
2868	Executes the specified function once for every key in the collection passing each key and its associated item as the first two parameters .
2869	Filter by a function . Returns a _new_ collection that has been filtered . The passed function will be called with each object in the collection . If the function returns true the value is included otherwise it is filtered .
2870	Remove an item from the collection .
2871	Remove all items in the passed array from the collection .
2872	Returns index within the collection of the passed Object .
2873	Returns true if the collection contains the passed Object as an item .
2874	Returns a range of items in this collection
2875	Find the index of the first matching object in this collection by a function . If the function returns true it is considered a match .
2876	Creates a shallow copy of this collection
2877	Updates the monthText configuration
2878	Updates the yearText configuration
2879	Generates all slots for all years specified by this component and then sets them on the component
2880	Returns a slot config for a specified date .
2881	A private function for rendering decision
2882	Returns the text needed for the current back button at anytime .
2883	Creates a proxy element of the passed element and positions it in the same position using absolute positioning . The createNavigationBarProxy method uses this to create proxies of the backButton and the title elements .
2884	A Metalsmith plugin to extract untemplatized file contents .
2885	Default map will take the first this . header . length items from the object as the row values
2886	Schedule a new Job
2887	Define a new type .
2888	Undefine a type .
2889	Check value against type
2890	Return all defined type names
2891	don t include redundant license or copyright notice
2892	get setting key
2893	require src and merge with SETTINGS if exists
2894	Test if size has a unit otherwise appends the passed unit string or the default for this Element .
2895	Serializes a DOM form into a url encoded string
2896	Retrieves the document width
2897	Retrieves the current orientation of the window . This is calculated by determining if the height is greater than the width .
2898	Creates new Sortable .
2899	Enables sorting for this Sortable . This method is invoked immediately after construction of a Sortable unless the disabled configuration is set to true .
2900	Patch for objects
2901	Compare two object to produce a patch object .
2902	Convert over - the - wire JSON format back into typed patch object
2903	Sorts the collection by a single sorter function .
2904	Reorders each of the items based on a mapping from old index to new index . Internally this just translates into a sort . The sort event is fired whenever reordering has occured .
2905	Invoke . apply if value is a function otherwise return default value .
2906	Following functions are not executed on import anymore
2907	This function can be triggered on window resize
2908	array of change stamps
2909	Splices insert into array at index at .
2910	Remove a model or a list of models from the set .
2911	Internal method called by both remove and set .
2912	Does the pathname match the root?
2913	Returns the template data associated with a given view provided that the template is set to a non - empty string . Otherwise it returns undefined . Manages caching behind the scenes .
2914	Clears the cache as a whole .
2915	Removes one or more cache entries .
2916	Removes the template cache entry associated with a given view provided that a cache entry exists .
2917	Creates a copy of a cache entry and returns it . Protects the original cache entry from modification except for the _pluginData property which remains writable and can be accessed from the copy .
2918	Creates a cache entry for a given template property .
2919	Reads registered data attributes of a given element from the DOM and updates an existing jQuery data cache with these values .
2920	Registers an alternative way to access the cache and set up a custom compiler and loader . Intended for use by plugins .
2921	Checks if an error belongs to the error types of Backbone . DeclarativeViews .
2922	Creates and returns a custom error type .
2923	Get the currently registered handler for the specified name . Throws an exception if no handler is found .
2924	Execute a named command with the supplied args
2925	Attach the handlers to a given message system type
2926	generic looping function
2927	Add a callback to be executed . Callbacks added here are guaranteed to execute even if they are added after the run method is called .
2928	Displays a backbone view instance inside of the region . Handles calling the render method for you . Reads content directly from the el attribute . Also calls an optional onShow and onDestroy method on your view just after showing or just before destroying the view respectively . The preventDestroy option can be used to prevent a view from the old view being destroyed on show . The forceShow option can be used to force a view to be re - rendered if it s already shown in the region .
2929	Destroy the current view if there is one . If there is no current view it does nothing and returns immediately .
2930	Add multiple regions using an object literal or a function that returns an object literal where each key becomes the region name and each value is the region definition .
2931	Add an individual region to the region manager and return the region instance
2932	Empty all regions in the region manager and remove them
2933	internal method to remove a region
2934	Get the specified template by id . Either retrieves the cached version or loads it from the DOM .
2935	Internal method to load the template
2936	Render a template with data . The template parameter is passed to the TemplateCache object to retrieve the template function . Override this method to provide your own custom rendering and template handling for all of Marionette .
2937	Mix in template helper methods . Looks for a templateHelpers attribute which can either be an object literal or a function that returns an object literal . All methods and attributes from this object are copies to the object passed in .
2938	Overriding Backbone . View s delegateEvents to handle the triggers modelEvents and collectionEvents configuration
2939	internal method to delegate DOM events and triggers
2940	Overriding Backbone . View s undelegateEvents to handle unbinding the triggers modelEvents and collectionEvents config
2941	Default destroy implementation for removing a view from the DOM and unbinding it . Regions will call this method for you . You can specify an onDestroy method in your view to add custom code that is called after the view is destroyed .
2942	This method binds the elements specified in the ui hash inside the view s code with the associated jQuery selectors .
2943	import the triggerMethod to trigger events with corresponding methods if the method exists
2944	Returns an array of every nested view within this view
2945	Serialize the model or collection for the view . If a model is found the view s serializeModel is called . If a collection is found each model in the collection is serialized by calling the view s serializeCollection and put into an items array in the resulting data . If both are found defaults to the model . You can override the serializeData method in your own view definition to provide custom serialization for your view s data .
2946	Internal method to render the template with the serialized data and template helpers via the Marionette . Renderer object . Throws an UndefinedTemplateError error if the template is any falsely value but literal false .
2947	Configured the initial events that the collection view binds to .
2948	Handle a child added to the collection
2949	Internal method . This checks for any changes in the order of the collection . If the index of any view doesn t match it will render .
2950	Internal method . Separated so that CompositeView can have more control over events being triggered around the rendering process
2951	Internal method to loop through collection and show each child view .
2952	Allow the collection to be sorted by a custom view comparator
2953	Internal method to show an empty view in place of a collection of child views when the collection is empty
2954	Render the child s view and add it to the HTML for the collection view at a given index . This will also update the indices of later views in the collection in order to keep the children in sync with the collection .
2955	Internal Method . Add the view to children and render it at the given index .
2956	render the child view
2957	Build a childView for a model in the collection .
2958	Remove the child view and destroy it . This function also updates the indices of later views in the collection in order to keep the children in sync with the collection .
2959	Create a fragment buffer from the currently buffered children
2960	Append the HTML to the collection s el . Override this method to do something other than . append .
2961	Internal method . Check whether we need to insert the view into the correct position .
2962	Handle cleanup and other destroying needs for the collection of views
2963	Destroy the child views that this collection view is holding on to if any
2964	Configured the initial events that the composite view binds to . Override this method to prevent the initial events or to add your own initial events .
2965	Serialize the model for the view . You can override the serializeData method in your own view definition to provide custom serialization for your view s data .
2966	Renders the model and the collection .
2967	Render the root template that the children views are appended to
2968	Ensure the regions are available when the initialize method is called .
2969	LayoutView s render will use the existing region objects the first time it is called . Subsequent calls will destroy the views that the regions are showing and then reset the el for the regions to the newly rendered DOM elements .
2970	Handle destroying regions and then destroy the view itself .
2971	internal method to build regions
2972	Internal method to initialize the regions that have been defined in a regions attribute on this layoutView .
2973	Internal method to initialize the region manager and all regions in it
2974	Takes care of getting the behavior class given options and a key . If a user passes in options . behaviorClass default to using that . Otherwise delegate the lookup to the users behaviorsLookup implementation .
2975	Iterate over the behaviors object for each behavior instantiate it and get its grouped behaviors .
2976	Internal method to build all trigger handlers for a given behavior
2977	Internal method to create and assign the trigger handler for a given behavior
2978	process the route event and trigger the onRoute method call if it exists
2979	Create a module attached to the application
2980	Internal method to initialize the regions that have been defined in a regions attribute on the application instance
2981	Internal method to set up the region manager
2982	Internal method to setup the Wreqr . radio channel
2983	Stop this module by running its finalizers and then stop all of the sub - modules for this module
2984	Create a module hanging off the app parameter as the parent object .
2985	Add the module definition and add a startWithParent initializer function . This is complicated because module definitions are heavily overloaded and support an anonymous function module class or options object
2986	returns function signature name
2987	Returns the name of the entry excluding the path leading to it .
2988	Moves the entry to a different location on the file system .
2989	Looks up the parent directory containing the entry .
2990	Requests a Directory from the Local File System
2991	Requests a File Handle from the Local File System
2992	Truncates or extends the file to the specified size in bytes . If the file is extended the added bytes are null bytes .
2993	sorts keys for better readablity
2994	all dependencies done
2995	Multi - Key LRU cache .
2996	pipe Forward function composition .
2997	Creates a raw HTML string for a template . A comment containing the el configuration can be inserted into it .
2998	Creates the content of a complex template . It should contain as many pitfalls for correct processing as possible .
2999	Returns the language constructs for a given template language for use in template creation .
3000	Define a new model prototype .
3001	Base Model function constructor
3002	Create an instance of Point
3003	Updates this container with the new active item .
3004	Creates new LineSegment out of two points .
3005	Returns the point where two lines intersect .
3006	Public stuff Constructor
3007	The libraries don t support any close function so we need this to emulate it .
3008	String real width
3009	Recursivley copy a folder to a given destination if there are conflicts prompt the user .
3010	Shortcut for copying a folder and it s contents recursively to a given destination if the source does not exist it will do nothing .
3011	Add assignable properties for tracking .
3012	Add callable methods for tracking .
3013	Find all existing properties and methods in the object .
3014	JCM constructor should not be async delay until first operation
3015	Installing a new content .
3016	Getting object properties .
3017	Cloning a node .
3018	Initialization of the element .
3019	Creating an item .
3020	Inheritance events set property changes .
3021	Implementation of inherited event .
3022	The assignment of parameters accessors .
3023	Update element when a property is changed .
3024	The callback of the remote in DOM .
3025	The callback of the insert in DOM .
3026	Returns copy of obj without removeProp field .
3027	Returns a transformed hash in which all camelCased property names have been replaced by dashed property names . The input hash remains untouched .
3028	Returns a transformed hash in which all dashed property names have been replaced by camelCased property names . The input hash remains untouched .
3029	Returns an array of dashed key names which are the alternative names for all camel - cased key names in a hash .
3030	Returns an array of matched Components from within the passed root object .
3031	Tests whether the passed Component matches the selector string .
3032	Returns a decorated router that wraps node selection
3033	Executes an SQL statement .
3034	Returns a row at specified index returned by the SQL statement . If there is no such row returns null .
3035	Function that create a JSON structure to be logged
3036	Takes the arguments of a function ensures that the type provided is the type being bassed .
3037	Ensure object tree exists as dictated by the key
3038	This is a custom tree sorting algorithm . It uses the index property on each node to determine how to sort siblings . It uses the depth property plus the index to create a weight for each node . This weight algorithm has the limitation of not being able to go more then 80 levels in depth or more then 10k nodes per parent . The end result is a flat collection being correctly sorted based on this one single sort function .
3039	Private method used to deeply retrieve the children of a record without recursion .
3040	Requests access to the Local File System
3041	Performs Ajax request .
3042	Get unique error field name
3043	Create a project with the default files and folders .
3044	Add watchify args
3045	This method inserts all the filters in the passed array at the given index .
3046	This method removes all the filters in a passed array .
3047	The implementation of the merger result .
3048	Merging the result of the logical or .
3049	A mock of the ember Snapshot object
3050	Normalises a json string to a valid deserialisable json string
3051	A mock of the salesforce SObject object
3052	Generates a new fake salesforce id
3053	Returns an antlr4 parse tree for a select query string
3054	Validates a given objects against the schema
3055	Validates a list of field names against a type in the schema
3056	Validates a field name against a type in the schema
3057	Validates a relationship name against a type in the schema
3058	Get all SObjects of the given type
3059	Creates a wrapped result in the form that you would expect the salesforce soap api to return a result
3060	Runs the conditions in the condition set and returns a boolean as a result
3061	Add Contents for page
3062	Add to Top link for mark h
3063	Initialize the API
3064	Run any callbacks related to the transaction .
3065	React to the AJAX request being completed .
3066	Get transaction from XHR options .
3067	Configure a direct request .
3068	Gets the AJAX call info for a transaction .
3069	Add a new transaction to the queue .
3070	Combine any buffered requests and send them off .
3071	Configure a form submission request
3072	Sends a form request
3073	Work with options here
3074	When generating the . idea project WebStorm will remove any plain text files specified on first open if they do not exist . For example this lets files from a build be marked as plain text before they exist by stubbing an empty file at their expected position .
3075	Check if a Webstorm . exe exists in a given windows program files directory .
3076	Mostly from Express router Route .
3077	Returns a decorated transport adapter that writes telemetry data
3078	Get a random value from an array
3079	Returns a random dinosaur or more random dinosaurs if number is set
3080	Shims features of Express s response object in routes . Accepts a callback function to be called with the data to send .
3081	Sends a response
3082	Sends a JSON response
3083	Sets field header to value or accepts an object and applies those key value pairs to the Response object s headers .
3084	Formats response and calls initial callback
3085	Asserts that the arguments supplied are what s expected . If an argument can be multiples types use an array of acceptable types .
3086	Returns an array of all of the arguments shifted into the correct place .
3087	Capture groups of available arguments separated by ones that have been used .
3088	Checks if the current argument should be left for an optional argument .
3089	Counts the number of trailing consecutive optional arguments .
3090	Counts the number of leading required arguments .
3091	Returns a string of expected arguments vs actual .
3092	Asserts that the supplied value is of the supplied type .
3093	Determines if the argument is a valid type .
3094	Gets the pretty name for the type of the value .
3095	Gets the pretty name for the type .
3096	Generates a url based on a given Ext . data . Request object . Adds the params and callback function name to the url
3097	Retreive the state object descriptor from its name
3098	Validate a document against its resource
3099	trims end of string can trimmed back to next clean word or add suffix to end of trimmed string
3100	Attempt to validate the less file
3101	Validate the given value and make sure it is valid array indexes . The value must be a valid String
3102	Add ALL the routes!
3103	Generates a unique 36 character hyphenated GUID
3104	Generates a random string of text of a given length . Will generate an alpha - numeric string unless you specify a different character set as the second argument
3105	Converts a string value to Uint8array
3106	Converts a string value to an ArrayBuffer
3107	This is used for Blackberry SplitNavigation to monitor the state of child items in the bottom toolbar . if no visible children exist the toolbar will be hidden
3108	Logs a message to help with debugging .
3109	Shortcut to copy a file Synchronously
3110	If there are any files in the source folder that are a match copy them to the destination .
3111	Copy any number files that are a match to a regex to a given destination . If there are any files in the destination that are also a match replace them .
3112	If there are any files in the location folder that are a match remove them .
3113	Validate if a given path has a valid directory is it doesn t console . error with an optional custom message .
3114	Validate if a given path has a valid file is it doesn t console . error with an optional custom message .
3115	Find all subdirectories of the base recursively .
3116	Match the path defined by path elements where some may be RegExp . When there is more than one candidate prefer the one with greatest interger value .
3117	For a given directory find all files that match the result will be sorted with highest numeric index first .
3118	Rank a vs b based on any numeric component in their string .
3119	Pick the first existing directory from any of the given arguments .
3120	Removes a menu from a specified side .
3121	Shows a menu specified by the menu s side .
3122	Hides a menu specified by the menu s side .
3123	Hides all menus except for the side specified
3124	Toggles the menu specified by side
3125	Initializes the Hiera module .
3126	Gets the Hiera hierarchy .
3127	Retrieves all Hiera backend configurations .
3128	Gets configuration for a specific backend .
3129	Retrieves data from a Hiera file .
3130	Saves data to a Hiera file .
3131	Check for hierarchy overrides for a given file .
3132	wrap async success callback
3133	wrap async error callback
3134	We create this method because root is now a config so getRoot is already defined but in the old data package getRoot was passed a data argument and it would return the data inside of the root property . This method handles both cases .
3135	> Check any of values exists on arr .
3136	cleans url to be properly formatted
3137	return json query object
3138	A module that represents a componentTabs object a componentTab is a page composition tool .
3139	Serializes an object s properties into JSON string then URI encoded
3140	Gets the x y coordinates specified by the anchor position on the element .
3141	Executes the specified function once for every item in the collection .
3142	Creates or looks up a file .
3143	Validate if element s DOM node has text
3144	We create complex instance arrays and objects in beforeInitialize so that we can use these inside of the initConfig process .
3145	We override DataView s initialize method with an empty function
3146	Returns an item at the specified index .
3147	Inject a script element to document s head call onLoad and onError accordingly
3148	Load a script file supports both asynchronous and synchronous approaches
3149	Replaceable function to handle rendering
3150	Formats the data for each record before sending it to the server . This method should be overridden to format the data in a way that differs from the default .
3151	Adds an Ext . Direct Provider and creates the proxy or stub methods to execute server - side methods . If the provider is not already connected it will auto - connect .
3152	Removes the provider .
3153	Constructs a new Application instance .
3154	Returns the Controller instance for the given controller name .
3155	Initialize layout and event listeners the very first time an item is added
3156	Removes an item from this Container optionally destroying it .
3157	Removes all items currently in the Container optionally destroying them all .
3158	Animates to the supplied activeItem with a specified animation . Currently this only works with a Card layout . This passed animation will override any default animations on the container for a single card switch . The animation will be destroyed when complete .
3159	Used by ComponentQuery to retrieve all of the items which can potentially be considered a child of this Container . This should be overridden by components which have child items that are not contained in items . For example dockedItems menu etc
3160	There is - ms - user - select CSS property for IE10 but it seems it works only in desktop browser . So we need to prevent selection event .
3161	Checks whether or not the passed number is within a desired range . If the number is already within the range it is returned otherwise the min or max value is returned depending on which side of the range is exceeded . Note that this method returns the constrained value but does not change the current number .
3162	Snaps the passed number between stopping points based upon a passed increment value .
3163	Formats a number using fixed - point notation
3164	simple logger middleware
3165	simple string to native - type conversion middleware
3166	middleware that executes typeconvert on the query and the body
3167	convenience method to define a restify route
3168	convenience method to create a routing URL
3169	create password salt and hash
3170	A non recursive way to resolve our json schema to the create query .
3171	Ensures that the passed object is an instance of a Record with the NodeInterface applied
3172	Updates general data of this node like isFirst isLast depth . This method is internally called after a node is moved . This shouldn t have to be called by the developer unless they are creating custom Tree plugins .
3173	Removes a child node from this node .
3174	Clear the node .
3175	Destroys the node .
3176	Inserts the first node before the second node in this nodes childNodes collection .
3177	Removes this node from its parent .
3178	Removes all child nodes from this node .
3179	Sorts this nodes children using the supplied sort function .
3180	Expand this node .
3181	Collapse this node .
3182	set the next fn allowing the tail to advance
3183	Repaints the whole page . This fixes frequently encountered painting issues in mobile Safari .
3184	Generates unique ids . If the element is passes and it already has an id it is unchanged .
3185	Copies a set of named properties from the source object to the destination object .
3186	Removes this element from the document removes all DOM event listeners and deletes the cache reference . All DOM event listeners are removed from this element .
3187	Msutache Instance Methods
3188	helper method for deprecating a property
3189	Version 0 . 1 . 0 Create Store Objects
3190	join an array
3191	flatten an array and join it
3192	configureStore - create redux - store
3193	Creates new Droppable .
3194	Enable the Droppable target . This is invoked immediately after constructing a Droppable if the disabled parameter is NOT set to true .
3195	returns rel path of src from root
3196	returns rel appended to dest root
3197	Maps a given level value to the methodMap indexes above .
3198	Can be overridden in the host environment
3199	an ID is simple if it only has one part and that part is not .. or this .
3200	Visits a given value . If mutating will replace the value if necessary .
3201	Performs an accept operation with added sanity check to ensure required keys are not removed .
3202	Traverses a given array . If mutating empty respnses will be removed for child elements .
3203	Template is only compiled on first use and cached after that point .
3204	The allocation of the changed nodes .
3205	Represents a Kademlia node
3206	Gets a promise from the queue that will resolve when there is a slot available
3207	Signals the queue an item is done running
3208	Flushes the queue . Will reject any remaining promises
3209	Loads matching fields from a model instance into this form .
3210	Returns an array of fields in this formpanel .
3211	Returns the currently focused field
3212	Whether the given point is not away from this point within the given threshold amount .
3213	Sequentially execute a list of Promised based SSH command and returns a Promise whose value is resvoled as an array . This array contains objects that holds the SSH command success or error .
3214	- = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - replacement helpers
3215	- = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - naming - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -
3216	- = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - capturing specific code - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -
3217	- = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - code generation helpers - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -
3218	Storage model for DHT items which is serialized to JSON before being passed to the storage adapter
3219	Get a handle function for a given top
3220	Bind elements event type to fn .
3221	Active le recadrage
3222	Returns a new array with the same content as the input minus the specified values .
3223	Creates the dhtmlXToolbarObject inside its container .
3224	sets the data on the model
3225	an array of models in the current stack with the root as the first
3226	gets the model in the stack at the index negative values start at root
3227	returns the first model which passes the function
3228	returns the value at path but only looks in the data on this model
3229	retrieves value with path query
3230	Generate random token
3231	Lookup user by username
3232	If valid email send reset email using service
3233	Sorts array of issue objects by last updated date .
3234	Removes duplicate collaborators .
3235	Using regex finds subtasks within a super issue s body string and returns them in an array of issue numbers .
3236	Takes an array of issue objects and presents them differently depending on format . The only valid option now is network which groups super issue subtasks into a subtasks array on the super issue object .
3237	Given a list of issues and pull requests populate the additional properties that exist within any issues into the PR objects so they contain as much info as possible .
3238	Wrapper class around the GitHub API client providing some authentication convenience and additional utility functions for executing operations across the issue trackers of several repositories at once .
3239	This exists so we can populate an errors object from the async calls . Otherwise if there is an error passed to the async callback the async module will stop executing remaining functions .
3240	return a cached list of availables adapter unless forceRefresh is true
3241	read a config for given adapter at path
3242	write a config for given adapter in given path
3243	Handle non - i18n files
3244	Handle i18n files
3245	Get swig context
3246	Render pages with handle bar template
3247	Determines whether a function has a name .
3248	Gets the config for a given function .
3249	Checks the parens of a function node .
3250	Creates new TapRepeater .
3251	Bind to user supplied event map where key is event name
3252	Cancels any pending timeout and queues a new one .
3253	This method handles the processing of the response and is usually overridden by subclasses to do additional processing .
3254	Sets up an exception on the operation
3255	Generates a url based on a given Ext . data . Request object . By default ServerProxy s buildUrl will add the cache - buster param to the end of the url . Subclasses may need to perform additional modifications to the url .
3256	Updates the date format in the field .
3257	Called when the picker changes its value .
3258	Clones an object properties onto a new object
3259	ImpulseBin constructor .
3260	Creates new Component .
3261	Add or removes a class based on if the class is already added to the Component .
3262	Hides this Component optionally using an animation .
3263	Shows this component optionally using an animation .
3264	Sets the size of the Component .
3265	Shows this component by another component . If you specify no alignment it will automatically position this component relative to the reference component .
3266	Prepares information on aligning this to component using alignment . Also checks to see if this is already aligned to component according to alignment .
3267	Sets the current Alignment information called by alignTo
3268	Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector .
3269	Destroys this Component . If it is currently added to a Container it will first be removed from that Container . All Ext . Element references are also deleted and the Component is de - registered from Ext . ComponentManager
3270	Called when an list item has been tapped .
3271	Called when the backButton has been tapped .
3272	The leaf you want to navigate to . You should pass a node instance .
3273	bring all function declarations and exports containing them to top of the program
3274	Parse vehicle ID from the search results table
3275	Add current timestamp and results count to the output object
3276	Read all possible information about desired vehicle . Loads vehicle details page
3277	Checks if the current user is able to make payments .
3278	Will attempt to purchase this product .
3279	Attempts to mark this purchase as complete
3280	Simple fast parsing of OpenSSH RSA and DSA keys to programmatically access key type length and and multiple key formats
3281	Determines whether to execute a function as a constructor or a normal function with the provided arguments
3282	Fires the check or uncheck event when the checked value of this component changes .
3283	Returns an array of values from the checkboxes in the group that are checked .
3284	Set the status of all matched checkboxes in the same group to checked .
3285	Refreshes the view by reloading the data from the store and re - rendering the template .
3286	Utility method to process a params string in a snippet invocation and corretly parse out the various parameters in it .
3287	Returns an Array of contact objects .
3288	Create a new collection
3289	Find the first item matching filter
3290	Creates a new task .
