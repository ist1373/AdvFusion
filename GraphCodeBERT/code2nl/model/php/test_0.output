0	Checks if the given URL is supported .
1	Builds dependency info .
2	Build a list of dependencies from a list of dependencies .
3	Builds the dependencies for the given array .
4	Builds the dependency constraints for the given extension .
5	Builds the dependency constraints for a given package .
6	Parse a version constraint .
7	Parse version .
8	Install a package .
9	Check if the given origin is authorized .
10	Get current packages .
11	Mocks local repository .
12	Set optimize autoloader .
13	Set the classMapAuthoritative flag .
14	Copy a file to the cache .
15	Replace the version .
16	Returns the hash of the content of a composer file .
17	Get the repository .
18	Get the timestamp of a package .
19	Get repository data
20	Propagate a decision .
21	Revert the decision .
22	Add a package .
23	Remove a package .
24	Copy a file to a file
25	Get contents of a file
26	Get the contents of a remote file .
27	Write the package .
28	Register an error handler .
29	Filter required packages .
30	Append packages to the bucket .
31	Parse the given line .
32	Add a rule .
33	Add a reason .
34	Convert a job to text
35	Print version information .
36	Print the links for the given package .
37	Print license information .
38	Initializes the styles .
39	Generate a tree tree .
40	Fetches the root identifier .
41	Checks if a certificate is valid .
42	Get certificate names .
43	Parse package info
44	Dispatch a script event .
45	Dispatch package event .
46	Dispatch installer event .
47	Add a subscriber .
48	Get list of listeners
49	Get the list of scripts .
50	Push an event .
51	Add a new repository
52	Set the output progress .
53	Sets a downloader .
54	Get a downloader .
55	Download a package .
56	Update the installed package .
57	Remove package .
58	Resolve package install preference .
59	Add a suggested package .
60	Add suggestions from a package .
61	Check if a directory is empty
62	Unlink a file .
63	Removes a directory .
64	Returns the size of a file .
65	Normalizes a path .
66	Checks if a directory is a symlinked directory .
67	Resolves a symlinked directory .
68	Creates a junction directory .
69	Removes a junction directory .
70	Create a class loader .
71	Filter the package map .
72	Check if the given origin is authorized .
73	Authorize an OAuth token .
74	Request an access token
75	Sets the next position .
76	Removes the item from the collection .
77	Configure the dependencies .
78	Find a package .
79	Create a repository .
80	Suppress an error .
81	Call a callable .
82	Extracts the PEAR package .
83	Copy files from source to target .
84	Expand a path to a user .
85	Returns the name of the package .
86	Archive a package .
87	Get default normalizer .
88	Checks if the given rule matches the given rule .
89	Write a hash to the file .
90	Throw an error .
91	Parse JSON string
92	Validates a JSON string .
93	Returns true if the given path is excluded .
94	Checks if the given ignore file exists .
95	Find the best version of a package .
96	Read a channel .
97	Selects the REST version of a channel .
98	Add a path to the list of paths .
99	Add a prefix to the list of paths .
100	Sets a list of paths .
101	Sets the paths for the given prefix .
102	Finds the file for the given class .
103	Find the highest priority of the given literal .
104	Checks if the headers are limited .
105	Checks to see if the rule has the highest level .
106	Move a watch .
107	Enables the given URL .
108	Add an extension .
109	Get the current version .
110	Load installed plugins .
111	Add a plugin .
112	Collects dependencies from a package .
113	Returns the installation path for the given package .
114	Open a browser .
115	Executes a command .
116	Executes a local command .
117	Builds the command .
118	Get credential string
119	Get the password .
120	Checks if the user has authentication .
121	Create authentication from config
122	Create auth from url
123	Get the binary version .
124	Get error message .
125	Checks if the given name matches the given constraint .
126	Create a remove rule .
127	Ensure that the given package is present .
128	Get package base path .
129	Get the content of a PEAR channel .
130	Request XML from PEAR channel
131	Update local repository .
132	Disable plugins .
133	Get installer .
134	Check if a package is installed .
135	Ensure that the given package is valid .
136	Execute the given operation .
137	Install a package .
138	Update a package .
139	Uninstall a package .
140	Mark an alias .
141	Remove alias .
142	Returns the installation path for the given package .
143	Fix the HTTP header field .
144	Insert a rule .
145	Propagate a rule to the given rule .
146	Move a rule to the given node .
147	Process the given URL .
148	Creates a validator instance .
149	Check if a scenario is active .
150	Add an error message .
151	Creates a command .
152	Create a batch query result
153	Returns a batch query result .
154	Populate the given rows .
155	Execute the query .
156	Adds a select clause to the query .
157	Set where condition
158	Add a filter to the query .
159	Set the condition
160	Adds a condition to the query .
161	Adds a condition to the query .
162	Add parameters to the request .
163	Set query cache .
164	Creates a new instance from a query .
165	Serializes an array of links to a single link .
166	Load messages from a file
167	Load mime types .
168	Load mime aliases .
169	Unlink a file .
170	Filter the given path .
171	Creates a directory .
172	Matches a path to a path .
173	Find the first wildcard in a pattern .
174	Check if the action is optional .
175	Remove a key from an array
176	Remove value from array
177	Decode HTML data
178	Filters an array of values .
179	Load a bundle .
180	Load a dummy bundle .
181	Get asset converter
182	Publish a file
183	Get the URL of a file .
184	Initializes the content .
185	Render input .
186	Renders a strike .
187	Fetch data from database
188	Get column definition .
189	Sets the transaction isolation level .
190	Get table column information
191	Set the status code for an exception .
192	Sends the response .
193	Clear the response .
194	Sends a file .
195	Sends content as a file .
196	Sends a stream as a file .
197	Set download headers .
198	Sends a file to the client .
199	Redirect to a given URL .
200	Check if target relation exists .
201	Checks if a value exists .
202	Check if the given value exists .
203	Creates a query .
204	Move cursor to cursor
205	Wrap a text .
206	Get stdin .
207	Confirm user input
208	Select a user .
209	Format scalar value .
210	Get the XML element name .
211	Hash plugin options
212	Initializes the client options .
213	Register the JavaScript plugin .
214	Get the list of params
215	Resolve route parameters
216	Converts a value to a plain text .
217	Renders an image .
218	Returns the URL for the given value .
219	Converts a value to a boolean .
220	Format a number .
221	Normalizes numeric value .
222	Checks if the value is a normalized value .
223	Normalize numeric string value .
224	Converts a value to an integer .
225	Converts a value to a percent string .
226	Converts a value to a currency string .
227	Returns the names of all schemas .
228	Get table names .
229	Get the type of the given data
230	Get last insert ID
231	Inserts a table into the database .
232	Quote value
233	Quote a table name .
234	Unquote a table name .
235	Get column type .
236	Get cache key .
237	Set table metadata .
238	Normalize a row key .
239	Load table metadata from cache .
240	Save table metadata to cache
241	Initialize the formatter .
242	Renders the table .
243	Render attribute .
244	Export the log to the system .
245	Get a single column .
246	Fix primary key .
247	Initializes the session .
248	Destroy the session .
249	Regenerate session ID
250	Sets the session .
251	Removes a flash value
252	Remove all flash messages
253	Freeze session data
254	End the current widget .
255	Check if the widget is valid
256	Called when the widget is run .
257	Initializes the theme .
258	Render a view .
259	Finds the view file .
260	Render a view file .
261	Cast value to type
262	Deletes an object .
263	Close the session .
264	Escape column name .
265	Sets the logger .
266	Load messages from database .
267	Load messages from database .
268	Returns the context of the context .
269	Format a message .
270	Returns whether or not the user is enabled .
271	Renders the separator .
272	Returns response as JSON .
273	Convert data to XML
274	Renders data cell .
275	Render data cell
276	Print help message .
277	Notify all fixtures that are not loaded .
278	Notify all fixtures .
279	Notify all fixtures
280	Confirm all fixtures
281	Unload fixtures .
282	Output a list
283	Finds all fixtures in the given array .
284	Get fixtures config .
285	Set default header
286	Remove a header .
287	Tries to negotiate the response .
288	Determine the requested language .
289	Check if requested language is supported .
290	Checks if a variable exists .
291	Populate a relation .
292	Checks if an attribute exists .
293	Get attribute value .
294	Sets an attribute .
295	Get old attribute .
296	Check if the given attribute is changed .
297	Get dirty attributes .
298	Update the attributes of the model .
299	Check if the model is valid .
300	Refresh the current record .
301	Check if given keys are primary key .
302	Get the attribute label .
303	Returns the hint for the given attribute .
304	Reset dependent relations .
305	Sets the dependencies of a relation .
306	Get size limit .
307	Convert a string to bytes
308	Creates a rule .
309	Export log message .
310	Compose message .
311	Apply a table alias to the query .
312	Run the application .
313	Sets the runtime path .
314	Get vendor path .
315	Set vendor path
316	Renders a view .
317	Registers an asset bundle .
318	Register CSS file .
319	Register JS file .
320	Render body end
321	Normalizes a path info .
322	Converts a word to plural .
323	Convert a string to a human readable string .
324	Convert camelCase to camelCase
325	Convert a word to variablize .
326	Generate a sentence .
327	Send the message to the mailer .
328	Returns an instance of the class
329	Builds the hash for the given key .
330	Get a value from the cache .
331	Set multiple items .
332	Add multiple items .
333	Adds a value to the cache .
334	Get the sequence name for a given table .
335	Create a new column .
336	Find constraints for a table .
337	Extract column type .
338	Extract column size .
339	Registers the active form .
340	Creates a field .
341	Validate a model
342	Validates multiple models .
343	Render sort links .
344	Generates a mailto link .
345	Sets the active placeholder .
346	Merge css classes .
347	Remove css class
348	Returns the CSS style from an array .
349	Convert CSS style to array
350	Get attribute value .
351	Returns the input name for the given attribute .
352	Returns the input id for the given attribute .
353	Escape JS Regular Expression .
354	Tokenize pattern .
355	Prepare the model .
356	Initializes the controller .
357	Checks if the extension is a PHP extension .
358	Compare two bytes .
359	Check if upload max_max_size is greater than max_max_size
360	Normalize requirements .
361	Render errors .
362	Get client options
363	Render the table .
364	Renders the caption .
365	Render column group
366	Renders the footer .
367	Renders the filter .
368	Render table body
369	Returns a list of view names .
370	Checks if value is empty .
371	Determines whether or not the given stream is enabled .
372	Write a string to stdout
373	Get the options for the action .
374	Gets the property values .
375	Get action arguments .
376	Parse doc comment .
377	Get the size of the given verbose .
378	Render exception .
379	Render a call stack item .
380	Render a call stack .
381	Creates a link to the server .
382	Convert arguments to string
383	Get exception name .
384	Validate image .
385	Get order orders .
386	Get attribute orders .
387	Set attribute orders .
388	Get attribute order .
389	Generates a link .
390	Load default values .
391	Filter valid aliases .
392	Filters a condition .
393	Filter valid columns .
394	Update all records .
395	Update all counters
396	Delete all records
397	Get table schema .
398	Deletes the record .
399	Deletes the object .
400	Processes a Markdown .
401	Process a Markdown paragraph .
402	Purify content .
403	Override default settings
404	Prepare request headers
405	Add CORS headers
406	Determine if the browser is a flash .
407	Get body params
408	Get query parameter
409	Get the host info .
410	Sets the host name .
411	Encode a string to UTF - 8
412	Get the port
413	Sets the port .
414	Sets the secure port .
415	Returns the accepted content types .
416	Returns the list of available languages .
417	Gets the list of ETags .
418	Get all cookies
419	Check if the token is valid .
420	Run the block .
421	Initializes the database connection .
422	Begin the HTML tag .
423	Creates a hidden input .
424	Adjust the label for the label
425	Adds the error class to the form .
426	Get module instance
427	Set module instance .
428	Initialize the controller namespace .
429	Get unique ID .
430	Get base path
431	Get module by id
432	Get all modules
433	Set the modules .
434	Checks if the given class name is a valid class name .
435	Check if action is valid
436	Called when an action is executed .
437	Compare two values
438	Checks if a property is set .
439	Checks if a property has a property .
440	Checks if a property has a property .
441	Checks if the given method exists .
442	Determine if the event handler has been registered .
443	Removes an event .
444	Trigger an event .
445	Gets a behavior .
446	Detach behaviors .
447	Attaches the given behavior .
448	Render page buttons .
449	Initializes the cache .
450	Encode a value
451	Prepare insert query .
452	Updates a SQL statement .
453	Execute a DELETE statement
454	Drop primary key .
455	Drop a column .
456	Drop a foreign key .
457	Drop a column .
458	Drop a constraint .
459	Get column type .
460	Quote tables .
461	Build a SQL query string .
462	Build the condition .
463	Builds a condition .
464	Builds a condition .
465	Builds a condition .
466	Builds a condition .
467	Builds a condition .
468	Build a simple condition .
469	Run the given model .
470	Updates the database .
471	Downgrades the database .
472	Inserts a table into the database .
473	Inserts multiple rows into the database .
474	Update a table .
475	Delete a table
476	Create a table .
477	Rename a table .
478	Drop column .
479	Rename column .
480	Change a column .
481	Add primary key .
482	Add a foreign key .
483	Create a new index .
484	Drop an index .
485	Add comment on column
486	Add comment on table
487	Drop comment from table
488	Get all instances of the given attribute .
489	Find table constraints .
490	Find primary keys .
491	Adds a relation to the model .
492	Find a relation by name .
493	Index buckets .
494	Flush messages .
495	Get profiling information .
496	Get database profiling information .
497	Calculate the timings of the log .
498	Apply the path to the given path .
499	Write an integer .
500	Reads a string from a file .
501	Get header checkbox name .
502	Registers the css column .
503	Execute a batch insert .
504	Render the view .
505	Initializes the translations .
506	Get message formatter
507	Returns the translation source for the given category .
508	Compose fields and data fields .
509	Show the help for a given command .
510	List actions .
511	Format the help for an option .
512	Add data to cache
513	Updates new migrations .
514	Deletes the migration history .
515	Migrate a migration to a given version .
516	Mark migration history .
517	Clear the migration .
518	Generate class name .
519	Find migration path .
520	Migrate a migration .
521	Revert the migration .
522	Create a new migration .
523	Include migration file .
524	Migrate the migration to the given time .
525	Migrate a migration to the current version
526	Initializes the source .
527	Register asset files .
528	Fetch the tags for the project .
529	Generate package packages .
530	Sort Changelog by version
531	Split a file into a list of changes .
532	Sort the changelog .
533	Parses the given files .
534	Fixes file doc .
535	Fixes docblock indentation .
536	Remove a doc comment
537	Update doc comment
538	Serialize data provider .
539	Serialize pagination .
540	Add pagination headers .
541	Serialize model errors .
542	Serialize the models .
543	Initializes the log file .
544	Export the log file .
545	Rotate log files .
546	Get the SQL for a table .
547	Add the server to the cache
548	Add memcached servers .
549	Dump a variable as a string
550	List all caches .
551	Flush all caches .
552	Flush all caches .
553	Flush the schema .
554	Notify all caches .
555	Notify all caches .
556	Sets all components .
557	Build a conjunction condition .
558	Build block condition .
559	Build an attribute condition .
560	Build an operator condition .
561	Autoload class .
562	Log debug message .
563	Renders the summary .
564	Render sorting .
565	Get the script file path .
566	Sets the script file path .
567	Parse a date value .
568	Format a timestamp .
569	Encrypts data .
570	Validate data .
571	Generate password hash .
572	Validate password .
573	Compare two strings .
574	Unmask a masked token .
575	Get default value
576	Run the action .
577	Normalizes a route .
578	Returns the URL to the given URL .
579	Ensure the given URL is valid .
580	Get current route .
581	Get asset manager
582	Sets the asset manager .
583	Compress a bundle .
584	Load the configuration file .
585	Load the source bundles .
586	Loads the dependencies of a bundle .
587	Build target .
588	Adjust the dependency configuration .
589	Registers a bundle .
590	Compress javascript files .
591	Compress CSS files .
592	Combines js files into output file .
593	Combine CSS files
594	Compose circular dependency trace .
595	Deletes published assets .
596	Check guide guide .
597	Get a single row from the database .
598	Adds a join to the query .
599	Join the relation with the given relation .
600	Add a condition .
601	Add a condition .
602	Tokenize the query .
603	Checks if the given string starts with the given length .
604	Returns the substring of the given length .
605	Returns the index of the given string .
606	Tokenize a delimited string .
607	Tokenize operator .
608	Add token from buffer
609	Convert an asset .
610	Get a singleton instance .
611	Set a class definition
612	Set a singleton .
613	Builds a new instance of the given class .
614	Get the dependencies of a component .
615	Resolve dependencies .
616	Set definitions .
617	Parse an array .
618	Parse a string .
619	Validate data .
620	Generate dependency data .
621	Split a condition .
622	Set the request with the given parameters .
623	Create a list of models .
624	Find the relations with the given model .
625	Handle hhvm error
626	Set query cache .
627	Bind a parameter to the statement .
628	Binds a parameter to the database .
629	Query the query .
630	Inserts a table into the database .
631	Adds a batch of rows to the database .
632	Update a table .
633	Delete a table
634	Create a new table .
635	Rename a table .
636	Drop a table .
637	Truncate a table .
638	Adds a column to the table .
639	Rename column .
640	Drop primary key .
641	Add a foreign key .
642	Create a new index .
643	Add a unique unique column .
644	Add a default value .
645	Reset a sequence .
646	Checks if the database is valid .
647	Add comment on column
648	Add comment on table
649	Drop comment from table .
650	Drop comment from table
651	Drop a view .
652	Execute the query
653	Get cache key .
654	Execute a SQL statement .
655	Reset the query .
656	Initializes the lock .
657	Release a lock .
658	Calls the given callable .
659	Executes a callable .
660	Creates a command .
661	Begin a transaction .
662	Execute a callback .
663	Get the master instance .
664	Use master slave .
665	Open a pool from pool .
666	Render items .
667	Checks if the string starts with the given string .
668	Normalize a number
669	Generate dependency data .
670	Garbage collection
671	Update model .
672	Upgrade the model .
673	Generate a new column .
674	Normalize table row data
675	Returns the current page .
676	Sets the page number .
677	Get links .
678	Detect the search attribute type .
679	Validate condition
680	Validates a conjunction condition .
681	Validates an attribute condition .
682	Validates an operator condition .
683	Normalizes a complex filter .
684	Merge rules .
685	Get currency symbol .
686	Sort the models .
687	Get all children of a given name
688	Removes all items from the database .
689	Add rules .
690	Get url from cache
691	Check if action is active .
692	Creates a new view instance .
693	Compose the message .
694	Send multiple messages .
695	Check if message is valid
696	Called when a message is sent .
697	Install all extensions .
698	Run a command
699	Clone an application
700	Clone an extension
701	Clean up vendor directory
702	Find all directories in a directory
703	Parse the request body .
704	Set default roles
705	Get default role instances
706	Create a primary key .
707	Create a big primary key .
708	Create a column builder .
709	Create a string builder .
710	Create a tiny integer .
711	Create a small integer builder .
712	Create a new integer column .
713	Create a BigInteger builder .
714	Create a new float column .
715	Create a double column .
716	Create a new decimal column .
717	Create a datetime builder .
718	Create a timestamp .
719	Create a timestamp builder .
720	Create a binary column builder .
721	Create a money column .
722	Create column builder .
723	Check the database integrity .
724	Get unique identifier .
725	Render a view .
726	Get attribute value
727	Registers a new event handler .
728	Removes an event .
729	Add default primary key .
730	Creates a new model .
731	Get unique index information .
732	Evaluate attributes .
733	Convert the model to an array .
734	Initializes the model .
735	Get direct permissions by user .
736	Get all permissions for a user .
737	Save data to file
738	Save items .
739	Save assignment data .
740	Save rules .
741	Called when the view is started .
742	Called when the page is executed .
743	Initialize event handlers .
744	Get the fragment cache configuration .
745	Set unsigned key .
746	Build the default string .
747	Get the category category .
748	Build the complete string .
749	Load messages from a file .
750	Save messages to file
751	Validate slug .
752	Add rate limit headers .
753	Initializes the font file .
754	Renders the verification code .
755	Validate the input
756	Render image .
757	Render the image using the GD code .
758	Render image using Imagick .
759	Sets the collection of children .
760	Returns true if the type is a collection .
761	Returns the string representation of this code .
762	Checks if the pattern matches the given pattern .
763	Update collection offsets
764	Split a SQL statement into an array of statements .
765	Extracts the parameters from the given statement .
766	Set the identity .
767	Logs a user .
768	Regenerate csrf token
769	Checks if an error is a fatal error .
770	Returns an array of array expressions .
771	Create configuration file .
772	Create a configuration file .
773	Extract messages .
774	Extract messages from a file
775	Reset the sequence number .
776	Checks if the server supports fractional seconds .
777	Get default time type map .
778	Check if image is valid
779	Get cookie .
780	Get cookie value
781	Check if a cookie exists .
782	Add a cookie
783	Returns a list of translation files
784	Check if the cache is valid .
785	Generate the etag for the given seed .
786	Get the scenario scenarios .
787	Returns the name of the model .
788	Get attribute hint .
789	Returns the first error for the given attribute .
790	Get error summary
791	Add errors .
792	Clears all errors .
793	Get all attributes .
794	Get active attributes .
795	Load model data from data
796	Returns the end of the annotation .
797	Get the end of the array .
798	Insert a new token at the given index .
799	Removes whitespace from tokens .
800	Finds the start block .
801	Clear range leave comments .
802	Checks if two tags are together .
803	Determine if the given token is valid .
804	Checks if the given token is a return type .
805	Checks if the given token is a valid return .
806	Finds the return annotations for the given index .
807	Generate token tokens .
808	Sort the namespace .
809	Returns the sort order of the first namespace .
810	Convert a list of type names to comparable names .
811	Fix spaces outside the class element .
812	Fix spaces outside the class method .
813	Fix spaces in the given class .
814	Returns the index of a new line .
815	Fixes an annotation .
816	Gets a sequence of tokens from a list of tokens .
817	Fixes a single line .
818	Fixes new line .
819	Checks if a comment is a comment .
820	Fix backtick tokens .
821	Split the docblock into a list of lines .
822	Fixes whitespace after curly braces .
823	Gets the previous unset call .
824	Get the name of this line .
825	Set the name of the tag .
826	Checks if the given token is a struct .
827	Returns the indices of the given comment .
828	Check if a variable is valid .
829	Checks if the given token is a string .
830	Processes an exception .
831	Fixes the constructor .
832	Fix parent classes .
833	Find a function .
834	Returns a list of token types .
835	Finds the function name for the given function name .
836	Clears the cache .
837	Detect block type .
838	Creates a new tokens from an array .
839	Creates a new token from the given code .
840	Sets the size of the image .
841	Unset a token .
842	Sets the value at the given index .
843	Clear changed changes .
844	Clear empty tokens .
845	Ensure that the given index is a whitespace .
846	Generate partial code
847	Returns the next token of the given index .
848	Get the next non - whitespace sibling .
849	Get the previous token of the given index .
850	Returns the token of the given index .
851	Returns the index of the token at the given index .
852	Get the next token sibling .
853	Returns the first sibling of the given index .
854	Finds the sequence in the sequence .
855	Inserts a new token at the given index .
856	Override this method to override the given token .
857	Overrides the content of the range .
858	Set the current token .
859	Checks if all tokenKinds found in the given array .
860	Clears the given index .
861	Checks if the token is monolithic .
862	Get the cache value .
863	Change the code hash .
864	Registers a token .
865	Skip non array elements .
866	Check if the type is a type
867	Get previous block .
868	Checks if the given token is in a condition .
869	Creates a process for the given source .
870	Configure tokenizer .
871	Returns a list of allowed values .
872	Wrap a string .
873	Returns an array of annotations .
874	Get all annotations of a given type .
875	Converts a token into a new token .
876	Checks if a comment is a fixable indentation .
877	Checks if a class is a valid class .
878	Loads a rule set by its name .
879	Resolves the set of rules .
880	Resolve a set of rules .
881	Fix the types .
882	Normalize type .
883	Checks if the given token is a use function .
884	Returns the best delimiter for the given pattern .
885	Get custom token name .
886	Clear all tokens .
887	Checks if the given token is valid .
888	Checks if the given function is a strict function .
889	Checks if a token is clear .
890	Get the list of types .
891	Set the list of types .
892	Get normalized types .
893	Get the content of the tag .
894	Gets the arguments for the given token .
895	Finds the comparison end of the given token .
896	Finds the beginning of the comparison .
897	Fixes two tokens .
898	Checks if the given token is a lower case .
899	Returns the list of imports for the import .
900	Checks if the given index is an array .
901	Get the attribute attributes for the given index .
902	Checks if the given index is anonymous .
903	Checks if the given index is a lambda function .
904	Checks if the given index is a unary successor operator .
905	Checks if the given index is unary predefined .
906	Checks if the given index is binary operator .
907	Find classy elements .
908	Checks if the given token is short array .
909	Get header as comment .
910	Finds the header of the header .
911	Add blank content .
912	Move parameter annotations .
913	Move the return annotations .
914	Calculate bitmask .
915	Converts camelCase to underscores .
916	Calculate trailing whitespace indent .
917	Sort an array .
918	Sort fixers .
919	Get the end of the document .
920	Fixes the description .
921	Fixes annotations .
922	Ensure that two annotations are present .
923	Ensure that two annotations are separated .
924	Get invalid errors .
925	Get exception errors .
926	Get lint errors .
927	Get the block block block .
928	Delete a file
929	Remove all files
930	Transform tokens .
931	Clear all tokens .
932	Clear changed tokens .
933	Checks if this object is equal to another .
934	Checks if all other elements are equal .
935	Check if given key is case insensitive
936	Get the name for a token .
937	Returns a list of keywords for this token .
938	Checks if this object is a specific kind .
939	Checks if the content is whitespace .
940	Override this method to override this .
941	Get path .
942	Determine if the command is run .
943	Compute config files .
944	Parse the rules .
945	Set an option .
946	Handle the request .
947	Check if a script tag exists
948	Get Shopify API
949	Sanitize shop domain .
950	Create a HMAC hash .
951	Activate usage charges
952	Save a charge .
953	Authenticate user .
954	Redirect to the user .
955	Retrieve a charge
956	Check if the trial is active .
957	Gets the remaining days .
958	Calculate the remaining days of this trial .
959	Cancel the charge .
960	Handle the request .
961	Handle a job .
962	Build auth url .
963	Restores the shop .
964	Dispatch webhooks .
965	Dispatch script tags .
966	Dispatch after authentication .
967	Clean up shop .
968	Cancel a plan charge .
969	Get grant type
970	Set shop domain
971	Get the token for the user
972	Clears the session .
973	Creates a new shop .
974	Handle the request .
975	Get shop webhooks
976	Delete all webhooks
977	Get the URL from a name .
978	Validate shop .
979	Get response .
980	Get Shopify API
981	Get payment charge .
982	Show a confirmation page .
983	Process a plan .
984	Store a usage charge .
985	Get charge information
986	Get confirmation url
987	Get charge params
988	Activate a plan .
989	Save a charge .
990	Validates the given schema .
991	Get all rules .
992	Visit a document using the given rules .
993	Checks if a value is valid .
994	Get the description of a node .
995	Get the deprecation reason .
996	Checks if an item exists .
997	Removes an item from the store .
998	Get the type map .
999	Get type by name
1000	Get a directive by name .
1001	Checks if two types are overlap .
1002	Visit a node with type info .
1003	Parse HTTP request .
1004	Parse request parameters .
1005	Convert a result to a PSR response .
1006	Resolve type value
1007	Check if the given name is valid .
1008	Get suggestion list
1009	Default field resolver .
1010	Read a name .
1011	Read a number .
1012	Read digits .
1013	Read a comment .
1014	Move the cursor to the cursor position .
1015	Set validation rules .
1016	Checks if the given type is built in .
1017	Get all registered types .
1018	Merges two arrays .
1019	Creates an error from an error .
1020	Get the locations of this node .
1021	Returns a serializable representation of this source .
1022	Build the execution context .
1023	Execute an operation .
1024	Get operation root type .
1025	Get field entry key .
1026	Checks if a fragment condition matches the given type .
1027	Executes the given array of fields .
1028	Resolve field definition .
1029	Resolve or error or error
1030	Completes the value of a value .
1031	Completes the value of a value .
1032	Completes a value .
1033	Convert value to Promise
1034	Completes a list value .
1035	Complete a leaf value .
1036	Completes an abstract type .
1037	Complete object value .
1038	Executes the given array of fields .
1039	Print path .
1040	Process PR request .
1041	Wait for a promise .
1042	Print a block string .
1043	Prints an error .
1044	Highlight source code .
1045	Create an error from an exception .
1046	Converts an error to a safe trace .
1047	Create a new OperationParams instance .
1048	Get the value of a string
1049	Returns the values for the given variables .
1050	Get the values of a directive .
1051	Get the argument values for a given definition .
1052	Build an AST node .
1053	Build a schema from a document .
1054	Checks if a variable type is allowed for the given type .
1055	Finds the breaking changes for the given schema .
1056	Finds the removed types .
1057	Finds all types of the given schema .
1058	Finds the types removed from the union .
1059	Finds the values removed from the old schema .
1060	Finds the differences between two types .
1061	Finds the values added to the given schema .
1062	Finds the types added to the union .
1063	Find conflicts within a selection set .
1064	Collect conflicts within the given response map .
1065	Find conflict between two fields .
1066	Determines if two types conflict between two types .
1067	Find conflicts between two selection sets .
1068	Collect conflicts between two arrays .
1069	Collect conflicts between two fragments .
1070	Collect conflicts between two fragments .
1071	Returns a list of subfield conflicts .
1072	Get suggested type names .
1073	Get suggested field names .
1074	Returns an array representation of this object .
1075	Create a Node instance from an array .
1076	Check if a variable is missing .
1077	Creates a type from an AST node .
1078	Executes a query .
1079	Enable warnings .
1080	Parse the given source .
1081	Returns a Location object .
1082	Checks if the given kind is skip .
1083	Parses a token .
1084	Parses a keyword .
1085	Parses a name .
1086	Parse a document .
1087	Extract types from a schema .
1088	Get field definition .
1089	Get stub .
1090	Reorder order by column
1091	Aggregate a function
1092	Reload the model .
1093	Get fresh instance .
1094	Get root nodes .
1095	Returns the children of the given node .
1096	Get scope attributes .
1097	Converts a node to another node .
1098	Update the structure of this node .
1099	Resolve a node .
1100	Check if the node is moved .
1101	Get parent id .
1102	Checks if the node has changed .
1103	Fire move event .
1104	Quote identifier .
1105	Apply lock between two nodes .
1106	Write migration .
1107	Write model .
1108	Validates if the node has duplicates .
1109	Group roots by scope
1110	Get the key for scope .
1111	Map a list of nodes .
1112	Maps a list of nodes to an array .
1113	Recursively maps a tree into a tree .
1114	Boot the tree .
1115	Get qualified column names .
1116	Creates a new nested set query .
1117	Get the roots of the root .
1118	Get all leaves .
1119	Limit the depth of the query .
1120	Get the root node .
1121	Get ancestors from ancestors .
1122	Get the descendants of this node .
1123	Get the descendants of this node .
1124	Get the descendants of this model .
1125	Checks if this node is descendant of another node .
1126	Check if this node is a descendant of another node .
1127	Check if this node is an ancestor .
1128	Check if this node is an ancestor .
1129	Get the last sibling .
1130	Make the first child of the given node .
1131	Check if this object is in the same scope
1132	Check if this node is inside a subtree
1133	Sets the default left and right right .
1134	Store the new parent .
1135	Move this node to another parent .
1136	Sets the depth of the model .
1137	Set the depth of the tree .
1138	Destroy all descendants of this node .
1139	Shift the siblings of this node .
1140	Compute the depth of this node .
1141	Sets the selected value .
1142	Get available option values .
1143	Bootstrap the views .
1144	Bootstrap the config file .
1145	Get rule .
1146	Add conditional rules .
1147	Checks if the given attribute is a conditional rule .
1148	Get attribute name .
1149	Set default values
1150	Render the validation .
1151	Get validation data .
1152	Set the selector .
1153	Set the view .
1154	Creates a replacement for the given rule .
1155	Get message message .
1156	Validates a given attribute .
1157	Rule confirmation rule .
1158	Rule after rule .
1159	Returns the message for the given attribute .
1160	Fake validation data .
1161	Fake required data
1162	Fake file data
1163	Validates a field
1164	Throw a validation exception .
1165	Parse attribute name .
1166	Parse parameters .
1167	Validate JS remote request
1168	Set remote validation .
1169	Purges non - remote rules .
1170	Create a protected caller .
1171	Get protected property
1172	Call protected method
1173	Set the validator .
1174	Generate JavaScript validations .
1175	Convert a list of rules to JS rules .
1176	Checks if the given attribute is valid .
1177	Creates a validator instance .
1178	Get a validator instance .
1179	Get validation data .
1180	Validate a form request .
1181	Create form request .
1182	Creates a validator .
1183	Get session token .
1184	Wrap the validation .
1185	Resolve the given field .
1186	Resolve validation .
1187	Create a validator .
1188	Get the validator closure .
1189	Check if a rule is implemented
1190	Check if the given rule is remote .
1191	Add custom definition
1192	Add custom attributes .
1193	Add custom elements .
1194	Sets the request .
1195	Gets the list of extensions .
1196	Render HTML attribute .
1197	Render HTML attributes .
1198	Escape a value .
1199	Add a voter .
1200	Get a menu item .
1201	Check if the current item is current .
1202	Builds the item .
1203	Build extra extras .
1204	Render children .
1205	Render item .
1206	Renders a link .
1207	Move item to parent .
1208	Move a child to the given position .
1209	Slice the given item .
1210	Splits an item into an array .
1211	Recursively calls the given method .
1212	Check if value is truthy
1213	Returns the type of the given argument .
1214	Check if value is an object
1215	Check if two objects are equal .
1216	Sort an array .
1217	Returns a slice of values from an array .
1218	Set the configuration .
1219	Debug request .
1220	Validate sequence .
1221	Reduce an array of values .
1222	Wrap an expression .
1223	Resolve a URI parameter .
1224	Fill path params
1225	Build query parameters .
1226	Parse a delimited string .
1227	Parse JSON token .
1228	Parse an expression .
1229	Expression expression .
1230	Resolve configuration .
1231	Resolve options .
1232	Sets a value at the given offset .
1233	Ensure property type is valid
1234	Returns the XML representation of the object .
1235	Get element meta data
1236	Set attachment .
1237	Set property value
1238	Ensure property type is valid
1239	Returns the actual type of the given value .
1240	Convert property to XML
1241	Encode value .
1242	Determine the actual value for the given property .
1243	Returns the value of the given value .
1244	Generate a memoize function .
1245	Chain provider chain .
1246	Get credentials from environment variable .
1247	Loads the credentials file .
1248	Get the home directory .
1249	Create a Service instance
1250	Parse XML string
1251	Starts an element .
1252	Normalizes an element name .
1253	Creates a PHP object from a meta object .
1254	Checks if the given meta type is simple .
1255	Returns the value of the given meta object .
1256	Search for an expression .
1257	Creates a compiler .
1258	Creates a new variable .
1259	Write a string to the source
1260	Create access request .
1261	Creates a transaction node .
1262	Compile endpoint url .
1263	Create a request to accept a shipment
1264	Creates a Void request .
1265	Recover a label
1266	Creates a new label request .
1267	Create a request .
1268	Create a request .
1269	Get subscription .
1270	Creates the XML request .
1271	Checks if the response has no candidates .
1272	Check if the response is valid
1273	Checks if the address is ambiguous .
1274	Creates a request for the requested cost .
1275	Send a request to the server
1276	Check if MailInnovations are valid
1277	Create a request .
1278	Add location information .
1279	Extracts the space id from the data .
1280	Extracts the environment id .
1281	Build a File .
1282	Get field by id
1283	Add an unknown field .
1284	Resolve links for a resource type
1285	Fetch all resources for a given array .
1286	Creates an array of chunks for the given array of resources .
1287	Fetch a collection of resources from the API .
1288	Builds the content type collection .
1289	Set the type .
1290	Set Content Type
1291	Continue sync sync .
1292	Build the result from the response .
1293	Get the sync token from the response .
1294	Creates a resource pool .
1295	Checks if a field exists .
1296	Get the unresolved field for the given field .
1297	Resolve field links .
1298	Get the entries of this entry .
1299	Format a value .
1300	Returns the locale for the given locale .
1301	Parse JSON string .
1302	Get the default locale .
1303	Get a file .
1304	Show a discussion .
1305	Search for discussions .
1306	Destroy a post .
1307	Replace the url parameter with the given parameters .
1308	Get url parameter from url
1309	Removes HTML header tags .
1310	Generates a menu menu .
1311	Checks the signature of a request .
1312	Set connection timeout
1313	Sets the number of retries .
1314	Get the URL for a given path .
1315	Get a GET request .
1316	Create a POST request .
1317	Delete a given path .
1318	Make a PUT request .
1319	Clean up parameters
1320	Get curl options
1321	Make a request
1322	Parse HTTP headers .
1323	Encodes app authorization .
1324	Decodes a string .
1325	Creates a new request from the given consumer and token .
1326	Get request parameters .
1327	Returns the URL of the request .
1328	Get option value .
1329	Set a new value .
1330	Query to many relations .
1331	Query to one relation .
1332	Read record with filter parameters .
1333	Apply filters .
1334	Fill related records .
1335	Paginate query .
1336	Executes a query query .
1337	Get query parameters .
1338	Set default API .
1339	Add a record to the map .
1340	Checks if the given identifier exists .
1341	Find a record by identifier .
1342	Get the encoding parameters .
1343	Determine if the request is an index .
1344	Check if the resource is read .
1345	Check if resource is update resource .
1346	Checks if the resource is a delete resource .
1347	Checks if the request is read .
1348	Allow a resource type
1349	Allow any resource types .
1350	Add a list of resource types .
1351	Check if a resource type is allowed .
1352	Returns a collection of allowed fields .
1353	Returns a collection of invalid fields .
1354	Sorts the query .
1355	Get default sort parameter .
1356	Get the sort column .
1357	Add a relationship to the resource .
1358	Creates a new encoder .
1359	Create a media type .
1360	Create a new MediaType instance .
1361	Is the given media type?
1362	Checks if the given media type matches the given media type .
1363	Creates a new pagination instance .
1364	Register the application .
1365	Boot the middleware .
1366	Boot the response macros .
1367	Boot Blade directives .
1368	Bind service .
1369	Binds inbound request .
1370	Bind exception parser .
1371	Creates a validator .
1372	Checks if a field is fillable .
1373	Get all request data
1374	Filter commands .
1375	Runs commands with given parameters .
1376	Validate type member .
1377	Validate id member .
1378	Validate an identifier .
1379	Validates a relationship .
1380	Validate the given value .
1381	Validates the given value .
1382	Checks if the given key exists .
1383	Get data from document .
1384	Checks if a resource exists .
1385	Validates a member .
1386	Validates that member fields are not allowed .
1387	Add resource type .
1388	Check if resource is not supported .
1389	Check if resource exists .
1390	Check if resource does not exist .
1391	Check if resource fields exist .
1392	Determine if the request is a JSON API .
1393	Prepare Json API exception .
1394	Set media type .
1395	Set encoding .
1396	Update a resource .
1397	Deletes a resource .
1398	Get an error .
1399	Get errors .
1400	Returns an error response .
1401	Checks if the resource is no content .
1402	Get errors .
1403	Parse the response .
1404	Add a relationship to the model .
1405	Find related models .
1406	Get default attributes .
1407	Get model attributes .
1408	Get attribute keys .
1409	Create an error .
1410	Create an error .
1411	Create an error .
1412	Create an error for a resource .
1413	Create an error .
1414	Create an error .
1415	Create an error .
1416	Invalid query parameter .
1417	Failed errors .
1418	Create a new validation exception .
1419	Translate an error message .
1420	Format a pointer to a pointer .
1421	Create a BelongsToIdentity .
1422	Creates a new model instance .
1423	Add relationships to the query .
1424	Loads a record from the database .
1425	Get relationship paths .
1426	Convert path to include path .
1427	Get model relation for given field .
1428	Create an error collection .
1429	Fill soft delete .
1430	Deserialize a soft delete .
1431	Get soft delete field .
1432	Allow the given parameters
1433	Dasherize a value
1434	Decodes the given value .
1435	Converts a value to underscored .
1436	Convert a value to camelCase
1437	Converts a value to a camel case .
1438	Build class .
1439	Get stub stub .
1440	Get resource name .
1441	Replace the resource type .
1442	Replace record .
1443	Replace the application namespace .
1444	Get the stub for the given implementation .
1445	Determine whether or not the model should be queried .
1446	Get data for update .
1447	Get data for delete .
1448	Get data for a relationship .
1449	Get relationship rules .
1450	Create a validator for a resource .
1451	Creates a validator for deletion .
1452	Creates a validator .
1453	Returns a collection of excluded parameters .
1454	Validates a relationship .
1455	Validates a relationship .
1456	Validates a relationship .
1457	Get the next paginator .
1458	Get previous rows .
1459	Add a query to the query .
1460	Order descending order .
1461	Order by ascending order .
1462	Get column value
1463	Guess the column name .
1464	Guess the route key .
1465	Decodes a JSON string .
1466	Checks if the request is a body .
1467	Checks if the response is a body .
1468	Determine if the request is a JSON API .
1469	Get HTTP error status .
1470	Create Resolver instance
1471	Create response factory .
1472	Creates a validator validator .
1473	Create validator .
1474	Create validator .
1475	Create a validator for the given resource object .
1476	Creates a validator .
1477	Update a resource .
1478	Delete a resource
1479	Remove a relationship .
1480	Flips all resources
1481	Get default codec .
1482	Create an encoder .
1483	Register a provider .
1484	Creates a new instance of the given media type .
1485	Prepend the decodings to the stack .
1486	Push a decoder to the stack .
1487	Merge the decodings .
1488	Add new decodings .
1489	Add a condition to the query .
1490	Checks if the given media type matches the given media type .
1491	Convert an array to camelCase
1492	Get current link .
1493	Create a link for a resource type .
1494	Creates a new encoder from an array .
1495	Create a new encodings .
1496	Prepend new encodings .
1497	Push all encodings to the stack .
1498	Merge all encodings .
1499	Add new encodings .
1500	Add a condition to the query .
1501	Returns the encoding for the given media type .
1502	Returns the encoding for the given Accept header .
1503	Handle a request .
1504	Bind the API to the repository .
1505	Bind the current page resolver .
1506	Build query parameters .
1507	Create a new client .
1508	Creates a new instance from an array .
1509	Get resource URL .
1510	Get the url for a given field
1511	Get the URI of a relationship .
1512	Read a fetch request .
1513	Create a new record .
1514	Update a record .
1515	Delete a resource .
1516	Read a related resource .
1517	Read a relationship .
1518	Replace a relationship .
1519	Add a new relationship to the store .
1520	Remove a relationship .
1521	Get all processes .
1522	Process a record .
1523	Perform a search .
1524	Read a record .
1525	Create a new record .
1526	Update a record .
1527	Replace a relationship .
1528	Executes a transaction .
1529	Create route registration .
1530	Registers a resource registration .
1531	Creates a new exception instance .
1532	Deserialize a JSON API document .
1533	Check if the field is a fillable relation .
1534	Get the method name for a relation .
1535	Fill the record object .
1536	Fill relationships .
1537	Fill a relationship .
1538	Checks if the given request is a valid one .
1539	Checks if the request is a content .
1540	Set the column name .
1541	Set the column name .
1542	Create a CursorBuilder .
1543	Get the cursor .
1544	Checks if the given media types are encoded .
1545	Returns true if the given media type matches the given media type .
1546	Returns the JSON representation of the given request .
1547	Register custom routes .
1548	Register all processes .
1549	Authorizes a relationship .
1550	Get the relation .
1551	Determine if the record should be inverse .
1552	Get the adapter for the given relation .
1553	Get resource attributes .
1554	Validate resource relationships
1555	Get query validator without search .
1556	Get query rules without search .
1557	Default order .
1558	Checks if the query should be required .
1559	Fill the record with the given attributes .
1560	Get model key for given field .
1561	Deserialize attributes .
1562	Deserialize a value .
1563	Check if the given field is a date attribute .
1564	Set the resource type
1565	Get resource .
1566	Sets the binding parameters .
1567	Get the type of the resource .
1568	Get resource ID .
1569	Get resource identifier .
1570	Get resource .
1571	Get process ID
1572	Get the process .
1573	Get the process identifier .
1574	Get the default api .
1575	Get the API .
1576	Register a new api .
1577	Validates a document compliance .
1578	Create a new resource .
1579	Creates a new instance with the given type .
1580	Creates a new instance with the given ID .
1581	Returns a copy of this instance with the given attributes .
1582	Returns a copy of this instance with the given relationships .
1583	Get the relationships .
1584	Creates a new copy of this instance .
1585	Returns a copy of this instance with the given links .
1586	Get a pointer to a pointer .
1587	Get the pointer for a relationship .
1588	Get meta data .
1589	Invoke a hook .
1590	Invokes multiple hooks .
1591	Validate document data
1592	Validate resource .
1593	Validates the type and id
1594	Validates the resource type
1595	Validate the resource .
1596	Validate attributes .
1597	Validate relationships .
1598	Validate all resource fields
1599	Authenticate the user .
1600	Serialize a record .
1601	Inject robots tags .
1602	Get social image data
1603	Returns an array of variables .
1604	Handle an exception .
1605	Find all redirects .
1606	Find a redirect by path
1607	Save a new redirect record
1608	Create a new redirect record .
1609	Delete a redirect
1610	Checks if the URI is a redirect .
1611	Creates a DOM document .
1612	Set criteria id by type
1613	Closes the database connection .
1614	Send a command to the socket .
1615	Read session data .
1616	Returns the number of records .
1617	Execute a single column
1618	Get the value of an attribute .
1619	Builds all keys in the database .
1620	Build a single query .
1621	Builds a column from the database .
1622	Add a column name .
1623	Build the condition .
1624	Release a lock .
1625	Update all counters
1626	Builds a unique key .
1627	Use loggers .
1628	Use loggers .
1629	Get the monolog instance .
1630	Resolve the request .
1631	Get meta data
1632	Log a message .
1633	Fire log event .
1634	Boot the user .
1635	Setup event handlers .
1636	Format SQL query .
1637	Setup the queue .
1638	Get Guzzle Guzzle client .
1639	Setup callback .
1640	Set the path to the project root .
1641	Setup session tracking .
1642	Creates a Coordinate from a string .
1643	Returns the center of the center .
1644	Simplified polyline .
1645	Returns the distance between this coordinate .
1646	Returns the length of this segment .
1647	Calculates the angle between two points .
1648	Calculates the final angle between two points .
1649	Get latitudes
1650	Gets the list of lngs .
1651	Checks if the given geometry is a polygon
1652	Returns the perimeter of this segment .
1653	Returns the area of the polygon .
1654	Returns a copy of this Polygon .
1655	Handles connection requests .
1656	Add a message .
1657	Get an argument by name
1658	Get date time .
1659	Create a new suggestion .
1660	Set the reply .
1661	Render the media object .
1662	Add a message to the chat .
1663	Set image url
1664	Get all countries
1665	Get list of countries
1666	Enable TwoFactor
1667	Disable TwoFactor
1668	Purge all files in the folder
1669	Delete the folder
1670	Rename the folder
1671	Copy this folder to another folder
1672	Protect the folder .
1673	Check if the folder is protected .
1674	Synchronize the folder .
1675	Unsynchronize the folder
1676	Get the model instance .
1677	Get the hash of the folder
1678	Get file size
1679	Check if user is authorized .
1680	Handle user profile .
1681	Creates a copy of a user .
1682	Process session field .
1683	Get all modules
1684	Check admin status
1685	Check if admin is disabled
1686	Update current user
1687	Login action .
1688	Update style sheet
1689	Update the stylesheet
1690	Write style sheet .
1691	Compile a color .
1692	Shortcut to shorten hex
1693	Convert a color to an array
1694	Export style sheet
1695	Check style sheet name
1696	Finds the stylesheet by id .
1697	Remove frontend authentication .
1698	Loads a frontend user .
1699	Get file by name
1700	Unzip file .
1701	Convert a date to a Unix timestamp
1702	Get searchable pages
1703	Get the link for an item
1704	Purge old feeds .
1705	Add a cookie to the response .
1706	Clear response cookies .
1707	Checks if the response has a cookie .
1708	Removes entries from a URL
1709	Render ContaoBackendTemplate
1710	Replace insert tags .
1711	Set empty end time
1712	Get article alias
1713	Execute post actions hook
1714	Get the user instance .
1715	Check if the field has access to the given field .
1716	Check if page is allowed
1717	Check if the given table is editable .
1718	Handles the request .
1719	Get the list of news archive archives .
1720	Get the chunks from a unit .
1721	Returns a string representation of a string .
1722	Add a value to the global language
1723	Get image image
1724	Generate a random secret .
1725	Checks if the given configuration is valid .
1726	Checks if user status is valid .
1727	Find data by column
1728	Save the current record
1729	Regenerate session id .
1730	Check if the group is a member of the group .
1731	Trigger import user hook .
1732	Generate article content
1733	Get book pages
1734	Validate the given token .
1735	Get the provision URI for the given user .
1736	Get QR code .
1737	Load routes from plugins .
1738	Generate file
1739	Generate a template
1740	Check if the image is important .
1741	Check if filename is valid
1742	Generate a link .
1743	Generate an upload file
1744	Delete file .
1745	Show a file
1746	Add enclosure .
1747	Get all calendar calendars
1748	List single record
1749	Import a class
1750	Log a message .
1751	Returns the URL of the current page .
1752	Check if a language is installed .
1753	Get list of countries
1754	Get list of languages
1755	Get all time zones
1756	Set a cookie
1757	Returns the human readable size for the given size .
1758	Get formatted number
1759	Get session hash .
1760	An anonymize IP address .
1761	Reads a PHP file without tags .
1762	Convert xliff file to PHP file .
1763	Called when the controller is running .
1764	Check if the database is run .
1765	Colorize log entry
1766	Called when the request is authenticated .
1767	Get the relative request URI .
1768	List news articles
1769	Checks if the given key exists .
1770	Get errors as string
1771	Generate HTML with error code
1772	Get attribute value
1773	Validate field value
1774	Add attributes
1775	Check if option is checked
1776	Check if option is selected
1777	Get option selected
1778	Check if option is checked
1779	Get empty string or null if not null
1780	Generate a template
1781	Checks if path is insecure path
1782	Check if a file name is valid
1783	Count the items in the list of articles .
1784	Fetch items from the list of articles .
1785	Checks if the request is private .
1786	Generate an alias .
1787	Get active layout sections
1788	Edit an article
1789	Paste an article
1790	Prepare alias .
1791	Prepare the domain .
1792	Add host to request context .
1793	Get host and port and port .
1794	Get auto item items .
1795	Add frontend route
1796	Add the index route
1797	Adds the route to the route .
1798	Find class by name
1799	Returns the help for the field .
1800	Combines two strings .
1801	Switch to edit edit
1802	Initialize the picker
1803	Get the input field for the given value .
1804	Invalidate cache tags
1805	Get active groups
1806	Set new password
1807	Sets the date added to the database .
1808	Get all content elements
1809	Returns the group group group for the given element
1810	Adjusts the content for the given content type .
1811	Add content type
1812	Returns a list of all available forms .
1813	Set Rte syntax
1814	Gets the list of import wizard .
1815	Generate table import wizard
1816	Get the page pca .
1817	Delete an element
1818	Set the flag flags for a single record
1819	Extracts the video id from the video
1820	Extracts the vimeo id from a video
1821	Returns a list of pages for a given page .
1822	Adjust the user s permissions .
1823	List image size
1824	Get original row
1825	Set row data
1826	Merge a row into another array
1827	Mark a file as modified
1828	Save model instance
1829	Deletes the record from the database
1830	Refreshes the model .
1831	Detaches this object .
1832	Registers an alias .
1833	Unregisters an alias .
1834	Find model by id
1835	Find model by id
1836	Find multiple models by id
1837	Find one record by value
1838	Find a record by value
1839	Finds a model
1840	Get count by column
1841	Parse a file
1842	Registers the fragment .
1843	Get controller name .
1844	Generate a feed for a calendar .
1845	Get searchable pages
1846	Converts a timestamp to a Julian date .
1847	Parse articles
1848	Get meta fields
1849	Generate link .
1850	PreHandle Fragment .
1851	Generate next page
1852	Get next page .
1853	Translate insert tags .
1854	Find the current record in the database .
1855	Find the latest records for the given IDs .
1856	Get page layout
1857	Opens a file .
1858	Rename a file .
1859	Copies the contents of a source file .
1860	Copy files from source directory
1861	Change file mode
1862	Moves an uploaded file .
1863	Validates the given path .
1864	Clears the session data .
1865	Add the sender to the sender .
1866	Add sender name placeholder
1867	Validate session lifetime .
1868	Check if the user is enabled .
1869	Parse a file .
1870	Checks if the request is a CORS request .
1871	Generate AJAX AJAX request
1872	Convert files to paths
1873	Add bundle assets .
1874	Add component components .
1875	Get bundle package name .
1876	Create the table .
1877	Deletes the table .
1878	Deletes all records
1879	Protect the folder .
1880	Check if a folder is mounted
1881	Check if a file is valid
1882	Get all md5 files in a directory
1883	Finds a query
1884	Returns the count of the query
1885	Returns the items as a string .
1886	Returns the items as an array
1887	Get link to page
1888	Generate AJAX request
1889	Get path nodes
1890	Checks if the file is granted .
1891	Checks if the given line is granted .
1892	Checks if a file is synced .
1893	Handle authentication failure .
1894	Generate the file
1895	Add the Htaccess rule .
1896	Purge old files .
1897	Checks if a file is an existing file .
1898	Check if user is active .
1899	Create a resize configuration .
1900	Create an important part .
1901	Validate input
1902	Prepare query string
1903	Set the limit of the query
1904	Execute query
1905	Execute query
1906	Replace wildcards
1907	Escape params
1908	Get the name of the argument .
1909	Strips the namespace .
1910	Creates a template .
1911	Get controller type .
1912	Pick a picker
1913	Generate captcha
1914	Generate hashes for the given sum .
1915	Generate a question
1916	Generate a captcha question
1917	Find records by archive
1918	Find records by id
1919	Append the table to the schema .
1920	Get the SQL definition for the database .
1921	Get index length .
1922	Creates an image from a file .
1923	Creates a new image from the given dimensions .
1924	Sets the GD resource .
1925	Convert image to palette
1926	Returns the number of colors in the image .
1927	Check if the image is a semitransparent .
1928	Validate input .
1929	Generate HTML code
1930	Attach a file to the message .
1931	Attach a string to the message .
1932	Parses the template .
1933	Get locale string
1934	Get date string
1935	Generates a redirect .
1936	Get forward url
1937	Converts a value to a path .
1938	Adjust the user s permissions .
1939	Clears newsletter data .
1940	Check if email recipient is unique
1941	Check if the recipient is blacklisted .
1942	Generates a list of email recipients
1943	Replace tag tags .
1944	Loads a section .
1945	Get section sections .
1946	Returns a list of sections .
1947	Set cache headers .
1948	Generates a redirect .
1949	Show related records
1950	Resend token
1951	Renders a resend button .
1952	Finds a record by its parent .
1953	Find all active records for a given source .
1954	Find expired subscriptions .
1955	Returns a list of all style sheets for the current page .
1956	Returns the stylesheet link .
1957	Generate HTML tag
1958	Get task from input .
1959	Encode domain domain .
1960	Decodes a domain domain .
1961	Encode email address .
1962	Decode email address .
1963	Encode a URL .
1964	Decode a URL .
1965	Generate a list of files
1966	Find model by id
1967	Find model by id
1968	Find a record by id
1969	Find multiple models by id
1970	Find model by UUID
1971	Find multiple records by UUID
1972	Finds a project by path .
1973	Find multiple models by path
1974	Find multiple UUIDs .
1975	Find multiple files by folder
1976	Find multiple folders by folder
1977	Handle preview url creation .
1978	Add a flash message
1979	Generates the messages for the given scope .
1980	Generate flash messages .
1981	Reset all flash messages
1982	Check if the error has an error .
1983	Returns true if all messages have been submitted .
1984	Get all image sizes
1985	Returns an array of image sizes for the given user .
1986	Loads image sizes
1987	Filter options .
1988	Get root page from url
1989	Add url to url
1990	Jump to next page .
1991	Get login status .
1992	Get meta data
1993	Prepare meta description
1994	Check if page is applicable
1995	Generate RSS .
1996	Adjust the publication date .
1997	Dump configuration .
1998	Get locale .
1999	Get accepted languages .
2000	Fetch data from files
2001	Get all files .
2002	Get package version .
2003	Returns the version of the package version .
2004	Add attributes to the array
2005	Validate the email
2006	Remove recipients from email address
2007	Called when the exception is thrown .
2008	Loads a language file .
2009	Initialize global variables .
2010	Initialize the controller .
2011	Find calendar by id
2012	Add a namespace .
2013	Add namespace namespaces .
2014	Add classes .
2015	Load a class .
2016	Generate HTML markup
2017	Resize uploaded image
2018	Sets the image service .
2019	Sets the image target directory .
2020	Get searchable pages
2021	Find published by pid
2022	Find first page by host and language
2023	Find first published by pid
2024	Find table by alias
2025	Find published by id
2026	Returns a list of subpages for a given pid .
2027	Find published regular expressions .
2028	Find published regular expressions by id
2029	Find a fallback by hostname
2030	Find all pages that are published
2031	Find parents by id
2032	Find first active page by group groups
2033	Find a page with details
2034	Registers the domain .
2035	Unregisters the domain .
2036	Get absolute URL .
2037	Get slug options .
2038	Applies the URL to the legacy URL .
2039	Create a PictureConfiguration object .
2040	Creates a configuration item .
2041	Create a symlink .
2042	Validate a symlink .
2043	Finds a user by email id
2044	Create a PDO connection .
2045	Generate HTML code
2046	Get temporary directory
2047	On schema index definition .
2048	Creates a statement .
2049	Execute add log entry
2050	Find group by column
2051	Saves the group .
2052	Create a picture .
2053	Get template data .
2054	Get configuration item .
2055	Validate the input section
2056	Set root page type
2057	Check if root level is root level
2058	Set the redirect page for the page
2059	Generate sitemap .
2060	Schedules the current page .
2061	Generates the alias for the page
2062	Generate article .
2063	Purges the search index .
2064	Check if a feed alias exists
2065	Check if the given variable value is a jump to the given variable .
2066	Get page types
2067	Get page layouts
2068	Creates a copy of a page .
2069	Cut a page .
2070	Render a page .
2071	Get date and time and time
2072	Returns an array of all archived archives .
2073	Get all tables
2074	Purge all search tables .
2075	Purges the version table .
2076	Purge image cache
2077	Purge the script cache
2078	Purge page cache
2079	Purge internal cache
2080	Purge all registered members
2081	Purge expired tokens
2082	Generate XML files .
2083	Generate internal cache
2084	Rotate log files .
2085	Add multiple files
2086	Get the path for the given template .
2087	Get the default path for the given template .
2088	Initialize templates .
2089	Find published records by source
2090	Returns the number of published records .
2091	Generate a form field
2092	Initialize session
2093	Validate password
2094	Checks if the given scope is a scope
2095	Create date ranges
2096	Get week begin date
2097	Returns a regexp regexp .
2098	Convert a string to JS format
2099	Get the date format .
2100	Get timestamp format .
2101	Get numeric datim format .
2102	Resolve custom modifiers
2103	Checks if the layout is old .
2104	Get all templates .
2105	Generate a link for a FAQ .
2106	Get max upload file size
2107	Finds an option by id and id
2108	Finds all models in a table
2109	Returns an array of related records
2110	Set the list of related records .
2111	Ask for password .
2112	Generate 404 page .
2113	Generate article template
2114	Build menu node .
2115	Get field value .
2116	Add template warning .
2117	Get list of excluded fields
2118	Generate sql form
2119	Extracts from Dca .
2120	Get the database from the database .
2121	Get active modules .
2122	Add a file
2123	Add multiple files
2124	Get file URLs
2125	Returns the HTML markup for debugging .
2126	Handle css
2127	Fix path paths
2128	End the block
2129	Initialize the configuration .
2130	Mark the file as modified .
2131	Save the script .
2132	Add value to array
2133	Persist a config value
2134	Remove a key from the config
2135	Load configuration files .
2136	Loads the parameters .
2137	Escape variable value .
2138	Called when the installation is secured .
2139	Handles the HTTP response .
2140	Fetch all headers from the request .
2141	Sets the session session .
2142	Get session bag .
2143	Generate 403 page
2144	Handle bad credentials .
2145	Replace the contents of a string
2146	Generate email object
2147	Send newsletter .
2148	Remove newsletter subscriptions .
2149	Create a new user .
2150	Activate newsletter .
2151	Toggle visibility .
2152	Synchronize newsletter .
2153	Update the email address .
2154	Returns a list of newsletter articles for a given module .
2155	Get searchable pages
2156	Validate input
2157	Generate video tag
2158	Runs the update table .
2159	Runs the update .
2160	Update the layout .
2161	Update the layout .
2162	Run the update table .
2163	Updates the layout .
2164	Convert a single field to a single field .
2165	Convert multi - field values to a single field
2166	Convert an order field to an order field .
2167	Generate helper object
2168	Create content element
2169	Accept a license .
2170	Sets the password .
2171	Login login .
2172	Purge Symfony cache .
2173	Wrap Symfony cache .
2174	Set up the database connection .
2175	Adjust database tables .
2176	Import example .
2177	Get redirect response .
2178	Add defaults to the context .
2179	Generate Symlinks .
2180	Find all files in a directory .
2181	Filter nested paths .
2182	Render image size
2183	Creates a menu item .
2184	Get all events
2185	Initialize application .
2186	Fetch data from a table
2187	Fetch data by alias
2188	Registers a model instance .
2189	Unregister a model .
2190	Check if an object is registered
2191	Registers an alias .
2192	Check if an alias is registered .
2193	Send activation mail
2194	Activate an action
2195	Resend activation mail .
2196	Send admin notification
2197	Redirect to the user .
2198	Find a record by id
2199	Find a published record by id .
2200	Find published records by id
2201	Initialize the request .
2202	Strip all tags in a string
2203	Decodes HTML entities .
2204	Encode special characters .
2205	Find a POST value from the form
2206	Generate logout .
2207	Compile the yearly menu
2208	Check if a key exists .
2209	Fetch a row from the database
2210	Fetch an associative array
2211	Fetch a single row from the database
2212	Fetch a single field
2213	Get the first row from the result set
2214	Get the next item in the resultSet
2215	Get next row
2216	Get the last result of the result set
2217	Returns a list of all subscribed channels .
2218	Get list of fields
2219	Count published by pids .
2220	Find published data by pid
2221	Finds the published dates for a given list of pids .
2222	Returns the number of published records .
2223	Get template folders
2224	Renders the CSS .
2225	Handle exception .
2226	Render error screen .
2227	Render the edit header .
2228	Add breadcrumb .
2229	Generates a drag button
2230	Get target folders
2231	Checks if the user has a token .
2232	Get user list options
2233	Checks if the user is authorized .
2234	Show deleted records
2235	Generate a new calendar feed .
2236	Generate article content
2237	Generate PDF .
2238	Handle prepend locale .
2239	Add default server version .
2240	Get template group
2241	Get article object
2242	Get content element
2243	Generate a form element
2244	Get spellchecker string
2245	Get page status icon
2246	Checks if an element is visible .
2247	Generate margin .
2248	Add url to url
2249	Redirect to a URL .
2250	Replace old paths .
2251	Convert relative urls to relative urls
2252	Redirect to frontend page
2253	Get parent entries
2254	Remove nested paths .
2255	Removes all pages from an array .
2256	Set static URLs
2257	Add static url to the script
2258	Prepare the attributes for a widget
2259	Create a new version .
2260	Returns a list of files in a glob .
2261	Prepare query
2262	Execute a query
2263	Returns all tables in the database .
2264	Check if a table exists
2265	Check if a field exists
2266	Check if an index exists
2267	Get all fields of a table
2268	Check if a value is unique
2269	Lock tables .
2270	Get size of table
2271	Get UUID from database
2272	Quote an identifier .
2273	Get all modules
2274	Returns a list of accessible member properties .
2275	Get layout sections
2276	Get activation default value
2277	Get password default value
2278	Set page flags
2279	Get the value of a key
2280	Get HTTP Accept - Language header
2281	Get HTTP host .
2282	Check if current request is SSL
2283	Get the URL of the request .
2284	Get the IP address .
2285	Get the current host name
2286	Get user agent .
2287	Find active user by email address and username .
2288	Find an inactive member by email address .
2289	Activate recipient .
2290	Add a new recipient to the newsletter .
2291	Called when the page terminates .
2292	Get the current theme .
2293	Get all the themes
2294	Get tinyMCE4 language
2295	Get TinyTemplates
2296	Add a request to URL
2297	Handle run once .
2298	Finds all pages in a page .
2299	Add file meta information to the request
2300	Get system messages
2301	Convert layout sections to associative array
2302	Generate a DcaPicker wizard .
2303	Add custom layout sections
2304	Create page list
2305	Create page list
2306	Create a list of files
2307	Create file list
2308	Set important part
2309	Get important part
2310	Sets the zoom level .
2311	Get resized path .
2312	Get cache name
2313	Execute resize
2314	Prepare the image
2315	Prepare important part
2316	Prepare resize configuration .
2317	Computes the size of the image .
2318	Returns the path to the icon
2319	Resize an image .
2320	Create a new Image object
2321	Get image image
2322	Get pixel value .
2323	Get token
2324	Check if token is valid
2325	Checks if the given key exists .
2326	Creates a new instance from the database .
2327	Set row data
2328	Save the model
2329	Delete the model
2330	Get next element
2331	Fetches all data from the collection
2332	Validate input .
2333	Handle the request .
2334	Handle switch user .
2335	Initializes the token storage .
2336	Sets cookie headers .
2337	Set legacy table options .
2338	Initialize the table .
2339	Render dropdown .
2340	Get edit url
2341	Get the username .
2342	Get user id
2343	Internal implode recursively
2344	Create the file if it exists .
2345	Truncate the file .
2346	Close the file .
2347	Get file content
2348	Write content to file
2349	Rename the file .
2350	Copy this file to another file .
2351	Resizes the image
2352	Sends the file to the browser .
2353	Write data to file
2354	Get the redirect response .
2355	Checks if the user has a frontend user .
2356	Checks if the user has a backend .
2357	Get the user s username .
2358	Get the username of the backend .
2359	Check if the user is previewed .
2360	Find published by id
2361	Find all active active records .
2362	Find first active page by id
2363	Decodes HTML entities .
2364	Generate alias from string
2365	Prepare slug .
2366	Converts a string to a string
2367	Encode email address .
2368	Extract email address from string
2369	Splits an email into an array .
2370	Highlights a string .
2371	Splits a string into an array of values
2372	Convert string to xhtml
2373	Convert HTML string to HTML
2374	Convert src to insert tag
2375	Insert tag to src
2376	Sanitizes a file name .
2377	Convert string to UTF - 8 encoding
2378	Escapes special chars .
2379	Deserialize a string
2380	Trims a string from a string
2381	Strips the given path .
2382	Find published content by parent id
2383	Handles the request request .
2384	Handles the exception .
2385	Add a legend .
2386	Remove a field .
2387	Explode a palette .
2388	Generate a palette .
2389	Apply the fallback to the config .
2390	Find the legend for a given field .
2391	Adjusts the permissions for the user .
2392	Get all allowed calendars
2393	Add a file
2394	Add a string
2395	Close the archive .
2396	Convert unix date to hex
2397	Parse BbCode
2398	Change subscription status
2399	Notify subscribers .
2400	Output the template .
2401	Generate a route
2402	Preview a route .
2403	Translate a string
2404	Get asset URL .
2405	Minify html
2406	Generate style tag
2407	Generate script tag
2408	Flush all data
2409	Get an instance of the class
2410	Get database installer array
2411	Export a theme
2412	Add table tl theme
2413	Add the tl style sheet to the table
2414	Add a table to the table
2415	Add table tl image size
2416	Add table tl files
2417	Add data row
2418	Add a folder to the archive
2419	Add templates to the archive .
2420	Move resource to destination folder
2421	Copy a resource to a destination folder
2422	Delete a resource
2423	Update folder hashes
2424	Returns the hash of a folder
2425	Checks if the given path is synced .
2426	Checks if the given path is a file sync .
2427	Builds the menu item .
2428	Checks if the tl_cron has been completed
2429	Initialize the application .
2430	Render style sheet .
2431	Check if a category is valid
2432	Update the style sheet .
2433	Get a value from the session .
2434	Sets a variable to the session .
2435	Remove a key from the session .
2436	Get session data
2437	Set session data
2438	Append session data
2439	Creates a clone of the current context .
2440	Returns a string representation of this object .
2441	Decode a URL .
2442	Get the current user .
2443	Encrypt a value
2444	Decrypt a value
2445	Initializes the encryption module .
2446	Check if the user is allowed to edit a comment .
2447	Send notify of reply
2448	Send notification notifications .
2449	Render a comment .
2450	Invalidate source cache tag
2451	Handles the request .
2452	Get the locale from the request .
2453	Find a record by its id and pid
2454	Show all rows
2455	Copy all clipboard items
2456	Delete all records
2457	Delete all child children
2458	Redirect to the database
2459	Move the current item .
2460	Get pagination menu
2461	Convert a string to a canonical string .
2462	Generate HTML for dropzone
2463	Find sent by id
2464	Find sent by pids
2465	Check permission for comments
2466	Display welcome screen .
2467	Set impersonated logout .
2468	Returns an array of valid options .
2469	Maps the content of a content block .
2470	Returns the maximum depth of a content type .
2471	Find content .
2472	Find single content .
2473	Indexes content .
2474	Bulk index content .
2475	Delete content .
2476	Log warning .
2477	Perform a request .
2478	Get request headers .
2479	Get search fields .
2480	Map search field value .
2481	Internal search method .
2482	Generate query string .
2483	Get search targets .
2484	Get all search targets .
2485	Index documents .
2486	Commit the document .
2487	Perform a search query .
2488	Get the sort field name .
2489	Checks if the endpoint has multiple endpoints .
2490	Processes connection configuration .
2491	Configure search services .
2492	Defines endpoint definition .
2493	Returns a string representation of a range .
2494	Escape expressions .
2495	Adds the endpoint configuration .
2496	Get index field name .
2497	Get core criterion .
2498	Get language filter .
2499	Returns the filter for the given language codes .
2500	Get index field type .
2501	Get facet params .
2502	Map data to array
2503	Loads the messages and versions of the given wsdl .
2504	Extracts the messages and versions from a file .
2505	Load a WSDL document from a XML file .
2506	Evaluate XPath query .
2507	Loop through all operations in the given query .
2508	Create request .
2509	Finds the builder for the given message name .
2510	Analyze the response .
2511	Returns the status of an error .
2512	Sets the current status .
2513	Checks if the status of the status of the current status .
2514	Set consumer ID .
2515	Retrieve a PNR .
2516	Creates a PNRP .
2517	Add multiple PNR elements
2518	Retrieve a PNR and display it .
2519	List Queue
2520	Queue place pnr .
2521	Send a PNR ignore message .
2522	Call a message .
2523	Make message options .
2524	Loads information from AuthParams
2525	Get the consumer ID .
2526	Prepare the next message
2527	Get the endpoint from a WSDL file .
2528	Get action from WSDL file .
2529	Generate a GUID
2530	Make soap client options .
2531	Get stateful status code .
2532	Load optional segment information .
2533	Loads the inventory .
2534	Set session data
2535	Get all messages and versions and versions .
2536	Get the WSDL id for a message .
2537	Get a soap client .
2538	Init SOAP client
2539	Execute a SOAP client .
2540	Creates a segment name for a request .
2541	Analyze the response with the given error code .
2542	Analyze the response with an error message .
2543	Analyze the response with the given error code .
2544	Analyze the response with the given error code .
2545	Create a DOMXPath from a response .
2546	Returns the status of an error .
2547	Analyze the response .
2548	Returns the handler for the given message .
2549	Load client params .
2550	Load session handler .
2551	Loads the request creator .
2552	Gets the string between two strings .
2553	Load price from request options .
2554	Creates a price option group .
2555	Loads the price for a corporate transfer .
2556	Loads the obfees .
2557	Load MOP details .
2558	Loads the payment module .
2559	Load payment data .
2560	Create a MOPDetailedData object
2561	Loads the specific changes .
2562	Loads the geo code .
2563	Loads the business id .
2564	Generate a random string .
2565	Analyze the response .
2566	Check if the argument is not empty .
2567	Check if all arguments are not empty
2568	Checks if all arguments are valid .
2569	Check if any of the argument is true .
2570	Load the nonce base from the handler params
2571	Check if fop type is valid
2572	Load session handler .
2573	Load auth params .
2574	Load session handler params .
2575	Load request creator params
2576	Merge existing options .
2577	Checks if the price option key exists .
2578	Load arnk .
2579	Load customer references .
2580	Loads WSDL .
2581	Loads the soap client .
2582	Load the transaction flow link .
2583	Prepare the message for the next message
2584	Analyze the response .
2585	Loads references from params
2586	Loads the PNR elements .
2587	Load PNR actions .
2588	Add all itineraries .
2589	Add received from received data
2590	Set the arrival date .
2591	Load payment data .
2592	Creates a new RequestCreator instance .
2593	Loads the fee IDs .
2594	Loads the currency override .
2595	Get error message .
2596	Decode the process level .
2597	Checks if the next token is a valid token .
2598	Move next token .
2599	Skips the next token .
2600	Get the next token .
2601	Get the literal of a token .
2602	Execute the API .
2603	Execute the service .
2604	Execute the action .
2605	Sets the HTTP header .
2606	Delete an ACL item
2607	Execute image optimization .
2608	Get current version
2609	Get next version
2610	Determine the current version .
2611	Get the active version .
2612	Update the authentication dictionary .
2613	Prepare GAReq data
2614	Get the website name .
2615	Check if API key is valid
2616	Prepare custom variables
2617	Get country name
2618	Get site location .
2619	Generate a unique identifier .
2620	Send installed request
2621	Send validation request
2622	Send configuration request
2623	Returns the number of days from the installation .
2624	Send a request to GA
2625	Returns the HTML for the page .
2626	Constructs the ACL field .
2627	Render a cell template
2628	Returns options array
2629	Delete a dictionary
2630	Get the IP address
2631	Execute custom snippets
2632	Send purge request
2633	Execute histogram .
2634	Execute the action .
2635	Check if the current version is available .
2636	Get last version
2637	Updates a dictionary item .
2638	Get ACL items
2639	Get section by path
2640	Purges a URL
2641	Remove all keys from the collection
2642	Purge all items
2643	Purge a request
2644	Get customer information
2645	Check service details
2646	Clone an active version
2647	Add a comment .
2648	Upload vcl .
2649	Set a vcl as main .
2650	Validate a service version
2651	Activate a version .
2652	Upload a snippet .
2653	Update a snippet
2654	Check if a snippet exists
2655	Create a new condition
2656	Create a header
2657	Create a new response object
2658	Get a response object
2659	Create a new request
2660	Get request settings
2661	Delete a request .
2662	Returns a list of all the backends
2663	Configure backend .
2664	Send webhook to webhook
2665	Create a new dictionary
2666	List all items in a dictionary
2667	Get a single dictionary
2668	Get auth dictionary .
2669	Check if the user has a basic authentication .
2670	Create a list of items in a dictionary .
2671	Delete a specific item
2672	Updates a dictionary item .
2673	Get a single ACL
2674	Delete an ACL
2675	List ACL items
2676	Updates an ACL item .
2677	Delete an ACL item
2678	Update an ACL item
2679	Query historic stats .
2680	Get image optimization status
2681	Configure image options
2682	Get service details
2683	Get WAF settings
2684	Fetch HTTP request
2685	Called when the request is dispatched .
2686	Check image optimization status
2687	Unserialize config data
2688	Rotate a rotation .
2689	Resize the image .
2690	Get image size
2691	Get forceLossy url
2692	Get fastly url
2693	Compile the fastly parameters .
2694	Create an image .
2695	Execute Fastly Fastly .
2696	Extracts the result from the config
2697	Execute vcl .
2698	Updates the cache .
2699	Upgrade old config files
2700	Updates the country mapping .
2701	Execute all modules
2702	Save the file data
2703	Checks if the block is visible .
2704	Get content type options
2705	Checks if the current version is enabled .
2706	Get all modules
2707	Get WAF page response
2708	Cleans up the config .
2709	Called when the cache is enabled .
2710	Determine the domain details .
2711	Executes the authentication .
2712	Returns the HTML for the given element .
2713	Get the values of the pixel ratios .
2714	Get checked values
2715	Render the group .
2716	Add a text field
2717	Render element .
2718	Execute custom snippet
2719	Check if host is in domain list
2720	Sets the redirect URL for the given country .
2721	Get the message in the store .
2722	Handle the purge request .
2723	Dispatches an event .
2724	Dispatches the cache .
2725	Checks if an object is purged .
2726	Retrieve the authentication dictionary .
2727	Execute the action .
2728	Execute custom snippet
2729	Called when the image is enabled .
2730	Retrieves the authentication dictionary .
2731	Retrieve the backend details
2732	Clean up all pages .
2733	Execute the action .
2734	Called when the layout is generated .
2735	Called when the layout is enabled .
2736	Get list of countries
2737	Set the service ID .
2738	Set the token .
2739	Upload vcl
2740	Execute the block .
2741	Get all repository manifests
2742	Execute the service
2743	Execute the update event .
2744	Executes the purge request .
2745	Returns true if image optimization enabled .
2746	Returns true if image option is enabled .
2747	Get GeoIP mapping for a country
2748	Extracts the mapping from a string
2749	Get vcl file
2750	Get vcl snippets
2751	Validate a custom snippet
2752	Process blocked items .
2753	Get request for given path .
2754	Render plain text .
2755	On import event .
2756	Delete media .
2757	Get the permissions for a taxonomy .
2758	Calculate a new ratio .
2759	Get storage key
2760	Fetch all branches .
2761	Get log level mapping .
2762	Log a message .
2763	Checks if the repository is cloned .
2764	Run a git command .
2765	Check if the current branch is up to the current branch .
2766	Check if the current branch is ahead .
2767	Push a tag .
2768	Creates a new branch .
2769	Add a remote remote .
2770	Get remote URL .
2771	Clone repository .
2772	Initialize the application .
2773	Fetches a list of tags .
2774	Set private key
2775	Starts the git output .
2776	Parse repository name .
2777	Initializes a new git repository .
2778	Clone a repository
2779	Executes git command .
2780	Build options .
2781	Get the command line .
2782	Render shadow mark
2783	Render summary report .
2784	Indent output .
2785	Extracts the failure output from the given output .
2786	Checks if tokens are valid .
2787	Execute the analysis .
2788	Get the mutation of the tokens .
2789	Recursively reconstruct a string .
2790	Adds a mutation to the tokens .
2791	Returns true if the output is ok
2792	Get an option
2793	Get the cache directory .
2794	Sets the temporary directory .
2795	Get the temporary directory .
2796	Set adapter options .
2797	Get the adapter .
2798	Convert mutation to array
2799	Generate Humbug .
2800	Generate bean creation code .
2801	Generate non - lazy bean code .
2802	Parses a boolean value .
2803	Sets the proxy target directory .
2804	Search for profiles
2805	View action .
2806	View log action .
2807	Delete all request profiles
2808	Get filtered requests
2809	Get visible panels
2810	Initialize logging .
2811	Get all events .
2812	Get observers .
2813	Initializes the controller .
2814	Get a block by name .
2815	Add a collection
2816	Get all collections
2817	Add a model
2818	Get all models .
2819	Initialize queries .
2820	Returns the serialized info .
2821	Saves the current request .
2822	Initialize the model .
2823	Delete expired requests .
2824	Get expiration date .
2825	Translate a translation .
2826	Get request view url
2827	Format a number .
2828	Get options array
2829	Enable SQL profiler .
2830	Disable SQL profiler .
2831	Execute select query
2832	Show stacktrace .
2833	Initialize the query .
2834	Start rendering .
2835	Complete the rendered rendering .
2836	Get layout updates .
2837	Get information about the theme .
2838	Get request info
2839	Get request url
2840	Render array as text .
2841	Render array .
2842	Returns a tree as a tree .
2843	Get block tree
2844	Render a tree node
2845	Get request path
2846	Get the URL for a module
2847	Get module config file .
2848	Set the active module status
2849	Sets the system profile status .
2850	Set template hints .
2851	Search config for config
2852	Delete template hints
2853	Purge all profiles
2854	Returns a list of file updates for the given handle .
2855	Get the database updates for a specific layout .
2856	Initialize the query
2857	View handle .
2858	Display layout updates .
2859	Get HTTP method select
2860	Get select options
2861	Returns the range for the given log file .
2862	Start request .
2863	Get all log files
2864	Get last file position
2865	Get the content of a log file .
2866	Get total log line count
2867	Get the content of a file .
2868	PreDispatch action .
2869	Render array .
2870	Get extension status
2871	Get all modules
2872	Initialize the model
2873	Get request filters .
2874	Enable module status
2875	Get category category
2876	Convert a request to an array
2877	Search group class .
2878	Enable FPC debug .
2879	Enable template hints .
2880	Disable translate inline inline inline
2881	Get email body
2882	Get email address
2883	Get request info
2884	Start profiling .
2885	Save profiling information .
2886	Called when the controller is dispatched .
2887	Registers the layout .
2888	Called when a block is processed .
2889	Loads the collection .
2890	Loads the model .
2891	Handles the frontend response .
2892	Check if website is enabled
2893	Check if the given block can be captured .
2894	Initialize the query .
2895	Send email
2896	Captures the email .
2897	Replace the profiler .
2898	End a query .
2899	Returns a list of query models .
2900	Initialize the request object .
2901	Add response info
2902	Download config file
2903	Download a config file
2904	Send an email to the profile .
2905	Add email to profile
2906	Get the content of the mail .
2907	Get the content decoded content .
2908	Decode the subject .
2909	Get module version
2910	Execute SQL query
2911	Convert XML to array
2912	Format a number .
2913	Format memory size .
2914	Format a stacktrace .
2915	Get the list of files for the layout .
2916	Convert string to type
2917	Ensure the file path is writable .
2918	Append a setter .
2919	Update a setter .
2920	Delete a setter
2921	Save buffer to file
2922	Ensure the file is readable .
2923	Read lines from file
2924	Format a setter .
2925	Normalise value
2926	Load the contents of the file .
2927	Reset content .
2928	Get all keys in the database .
2929	Check if a key exists .
2930	Get the value of a key .
2931	Writes a setter .
2932	Set a key .
2933	Delete a setter .
2934	Save the file .
2935	Creates a backup file .
2936	Get backup files .
2937	Restore the current file .
2938	Delete all backup files
2939	Creates a new linear unit .
2940	Adds a unit definition .
2941	Returns the unit of the given unit .
2942	Checks if a unit is already registered .
2943	Check if the role has a permission .
2944	Assign a role .
2945	Remove a role .
2946	Sets the roles of the user .
2947	Grant a permission .
2948	Release a package .
2949	Dispatch the queue .
2950	Handle failed dispatch .
2951	Parse text .
2952	Prepare template
2953	Extract data from a template
2954	Finds the template for the given text .
2955	Initialize the PHP serial device .
2956	Close the device .
2957	Set character length
2958	Set stop bits .
2959	Set flow control mode
2960	Send a message
2961	Read a port .
2962	Serializes the buffer .
2963	Check if the user is authorized .
2964	Perform a request .
2965	Build a request .
2966	Create a request .
2967	Creates a response from data .
2968	Pick the metadata from the data
2969	Get a table gateway .
2970	Send a message to the server .
2971	Process all attachments .
2972	Determine the context .
2973	Wrap the given data .
2974	Analyze a closure .
2975	Binds the closure to the given scope .
2976	Serialize the closure .
2977	Unserialize a closure
2978	Get license by identifier .
2979	Get an exception by its identifier .
2980	Add a resource .
2981	Find the last imported path .
2982	Add a bundle .
2983	Make absolute path relative to absolute path .
2984	Returns the next token .
2985	Generate the index view .
2986	Generate form .
2987	Add a resource .
2988	Checks if a resource is in the annotation .
2989	Set the transport .
2990	Upload a file from a path
2991	Encode a record .
2992	Parse response .
2993	Initialize SMTP
2994	Encode a string .
2995	Encode a header .
2996	Set the value of a message
2997	Set the email address .
2998	Sets the reply to the email .
2999	Sets mail errors .
3000	Reset all recipients .
3001	Set the HTML for the message
3002	Sets the content of a message .
3003	Attach a file .
3004	Save the message to a file .
3005	Send a ping
3006	Jump to mail
3007	Set the layout .
3008	Get attribute value
3009	Fetch a template
3010	Set consumer key
3011	Follow a user .
3012	Unfollow a blog .
3013	Add a comment to the user .
3014	Uncomment a user .
3015	Delete a post .
3016	Reblog a post .
3017	Edit a post .
3018	Create a post .
3019	Get tagged posts .
3020	Get information about a blog .
3021	Get avatar avatar .
3022	Get the likes of a blog .
3023	Get the followers of a blog .
3024	Get blog posts
3025	Make a POST request
3026	Parse response .
3027	Make a request .
3028	Sets the consumer .
3029	Set the OAuth token
3030	Pause a session .
3031	Resume a session .
3032	Get the state of the session .
3033	Get the description of a session .
3034	Returns a list of items for a given item .
3035	Check if a key exists
3036	Persist the cache entry .
3037	Sets the data in the cache .
3038	Get the data for the given user .
3039	Checks if a user has been cached .
3040	Deletes a call .
3041	Persist the cache .
3042	Pack a time line .
3043	Unpacks a time line into a QTI TimeLine object .
3044	Encode data .
3045	Compiles all assessment items from a delivery .
3046	Save tool states
3047	Get tool states
3048	Initializes the session index .
3049	Initializes the compilation directory .
3050	Initializes the storage storage .
3051	Retrieve the item index .
3052	Get item index value
3053	Get the category engine .
3054	Persist a set of category items
3055	Get the last category output
3056	Save last category output
3057	Determines if the current assessment item is adapted .
3058	Checks if the template contains adaptive sections .
3059	Select Adaptive next item
3060	Get the current assessment item reference .
3061	Get current position
3062	Determine if the current section is moved .
3063	Save the results to the adapter .
3064	Store the result of a CATResult .
3065	Converts the given array of variables into an array .
3066	Process Synchronisation .
3067	Process the tool .
3068	Initializes the service context .
3069	End the timer .
3070	Save item state
3071	Save item response response
3072	Get item reference .
3073	Process the timeout
3074	Returns the rubric blocks for the given assessment item .
3075	Pause the runner .
3076	Process input data .
3077	Process output messages .
3078	Check if a channel exists .
3079	Gets the category information .
3080	Checks if the assessment section isAdaptive .
3081	Build options .
3082	Get the engine for the given endpoint .
3083	Get the assessment item reference .
3084	Gets an AssessmentItemRef by identifier .
3085	Gets the assessment item references for the given placeholder .
3086	Get the adaptive assessment section information .
3087	Validate the adaptiveAssessment section .
3088	Checks if the given assessment section is adaptive .
3089	Alter the timeout value .
3090	Stores trace variables .
3091	Store the data in the session storage .
3092	Loads the state from the state storage .
3093	Process data .
3094	Get available actions
3095	Resolve action .
3096	Displays the next item .
3097	Get item data .
3098	Returns the state of the given test session .
3099	Returns a list of items for the item .
3100	Get item data .
3101	Get all sub identifiers of an array .
3102	Get storage instance
3103	Load data from storage .
3104	Save state to storage
3105	Returns the store id .
3106	Get all events .
3107	Get item HREF index .
3108	Sets a category value .
3109	Returns the category value for a given section .
3110	Remove a category value
3111	Get storage service
3112	Persist a session .
3113	Set store id
3114	Clear all events .
3115	Store itemHref index .
3116	Set a category value .
3117	Returns the category value for the given section .
3118	Remove a category value
3119	Create a TimePoint from an array .
3120	Removes all points from the collection .
3121	Returns a subset of all points in this collection .
3122	Find all points matching the given tag .
3123	Computes the duration .
3124	Fixes a range .
3125	Clones a time point .
3126	Is start point?
3127	Checks if the given time point is an end point .
3128	Calculates the duration between two dates .
3129	Loads the data for a given item .
3130	Creates a service context .
3131	Persist a test session .
3132	Initializes the test session .
3133	Get rubric rubrics
3134	Get item data .
3135	Retrieves the state of an item .
3136	Set item state .
3137	Parse item response .
3138	Checks if the response is empty .
3139	Store the response response .
3140	Checks if the given item has feedback rules .
3141	Move the navigation to the given context .
3142	Move a step .
3143	Close the timeout .
3144	Finish a delivery .
3145	Pause a test session .
3146	Resume a test session .
3147	Check if the test session is closed .
3148	Checks if the item is completed .
3149	Returns the public URL for the given item .
3150	Send a comment
3151	Continue Interaction .
3152	Handle an event timeout .
3153	Stores a trace variable .
3154	Create a trace variable .
3155	Store an outcome variable .
3156	Returns the meta variable .
3157	Store a response variable .
3158	Get response variable
3159	Store the variables for the item .
3160	Store a variable in the result store .
3161	Returns the transaction id for the given item .
3162	Assert the QtiRunnerServiceContext
3163	Start timer .
3164	Ends the timer .
3165	Switch client store id
3166	Get the current assessment session .
3167	Check if the theme switcher is enabled .
3168	Get current theme id
3169	Get the index file for the item identifier .
3170	Checks if itemHref file exists .
3171	Get the map for testing .
3172	Update statistics .
3173	Gets the assessment item references .
3174	Get the time constraint .
3175	Get item label
3176	Creates a new Runner .
3177	Check if the section exits .
3178	Returns a list of all the class classes .
3179	Returns a list of items matching the given criteria .
3180	Determine if the client is a client container .
3181	Returns the maximum time remaining time .
3182	Returns the minimum time of the current time limit .
3183	Convert duration to milliseconds
3184	Serialize the source .
3185	Process a step .
3186	Start a new TimePoint
3187	Ends the time series .
3188	Get the first timestamp of a tag .
3189	Get last timestamp .
3190	Returns the last registered timestamp .
3191	Checks if the given time limit is exceeded .
3192	Save data to storage .
3193	Load data from storage .
3194	Get extra time
3195	Set the consumed extra time .
3196	Get the consumed extra time .
3197	Get the remaining extra time .
3198	Checks that the given timestamp is valid .
3199	Returns the range of time series .
3200	Returns the number of bytes in a binary array .
3201	Gets the items of a given item .
3202	Process CSS style declaration .
3203	Validate CSS property value .
3204	Detects the manual editing .
3205	Get the tags of the docblock .
3206	Parse response headers
3207	Splits a binary string into chunks .
3208	Encode a string
3209	Create OAuth2 Access Token
3210	Disable OAuth1 Access Token
3211	Checks if the given argument is valid .
3212	Load app info from json file
3213	Check if argument is null
3214	Disable access token .
3215	Get account info
3216	Start chunked upload .
3217	Continue a chunked upload .
3218	Finish chunked upload .
3219	Get the delta for a given cursor .
3220	Restore a file .
3221	Search file names .
3222	Create a shareable link
3223	Create a temporary link .
3224	Get a thumbnail .
3225	Create a folder
3226	Move a file to a file .
3227	Builds the URL for a GET request .
3228	Perform a GET request .
3229	Convert a string to a string
3230	Load a host from a json object
3231	Load AuthInfo from a JSON file
3232	Checks if a path is valid .
3233	Use this method to set external paths .
3234	Compare two strings .
3235	Get the total amount of items .
3236	Get total price
3237	Get total amount
3238	Run the calculation .
3239	Reset calculations .
3240	Set callback callback
3241	Create seeder .
3242	Get the display name attribute .
3243	Get shop url
3244	Returns true if the customer has been bought .
3245	Called when a charge is completed .
3246	Called when callback failed
3247	Add a cart item
3248	Removes an item from the cart .
3249	Checks if an item exists .
3250	Scope where current user is active .
3251	Find cart by user
3252	Creates a new order
3253	Clear the cart .
3254	Get item by sku
3255	Scope the query to the query
3256	Add a route to the router .
3257	Searches for SKU
3258	Scope by user .
3259	Create a transaction .
3260	Process a request .
3261	Places a payment .
3262	Called when a transaction is completed .
3263	Format price .
3264	Check if the order status code is changed .
3265	Removes lines from a string .
3266	Get file path .
3267	Opens a file .
3268	Close the file .
3269	Read lines from file .
3270	Append a line to the file .
3271	Write temporary file to file
3272	Set the configuration .
3273	Get data from database .
3274	Sets a new line .
3275	Delete a key
3276	Flush the database .
3277	Returns a list of keys .
3278	Get all data from database .
3279	Replace the given key .
3280	Normalize configuration .
3281	Set the directory .
3282	Set the extension .
3283	Set the cache .
3284	Set the formatter .
3285	Get source context
3286	On bootstrap .
3287	Get a plugin .
3288	Read data from a socket .
3289	Start the process .
3290	Join the process .
3291	Send a signal to the process .
3292	Create twitter link .
3293	Link the link to the share .
3294	Build the link .
3295	Get a list of fingers for a lead
3296	Converts a DOM document into an array .
3297	Run autocomplements .
3298	Check if file is an image
3299	Set headers .
3300	Make a POST request
3301	Make a request .
3302	Make a POST request .
3303	Get the HttpClient
3304	Append the signature to the request .
3305	Get fixed format
3306	Request an API request
3307	Build request params
3308	Generate the signature .
3309	Builds the signature key .
3310	Get access token .
3311	Get access token from API
3312	Get the cache key .
3313	Append app id and bucket to bucket .
3314	Uploads an image
3315	Set config value
3316	Initialize options from a spec string
3317	Push a value
3318	Renders the spec .
3319	Sets whether or not the given type isa .
3320	Get valid values
3321	Get suggestions .
3322	Checks if the option is a valid option .
3323	Consume an option token .
3324	Returns the next argument .
3325	Renders an option .
3326	Render options .
3327	Correct product assignment .
3328	Gets the price configurations .
3329	Get status of a token
3330	Create a file from a path
3331	Create a new instance from a resource .
3332	Creates a new instance from the given content .
3333	Create a new group
3334	Initialize a curl request
3335	Run a curl request
3336	Get integration data .
3337	Gets the input tag .
3338	Returns a string representation of a date .
3339	Get a list of groups
3340	Gets a list of files from the server .
3341	Get file list
3342	Get a list of groups
3343	Create a new file copy
3344	Process multiple files .
3345	Perform batch processing .
3346	Perform a HTTP request .
3347	Prepare a request .
3348	Prepare pagination params
3349	Get query string
3350	Get the path for the given type .
3351	Set request type
3352	Returns the user agent header .
3353	Update file info
3354	Creates a copy of this file .
3355	Get the URL of the resource .
3356	Get image path
3357	Get image tag
3358	Resize the image .
3359	Preview image preview
3360	Add a new operation .
3361	Checks if the container exists .
3362	Check if the container is fully loaded .
3363	Load the data from the API .
3364	Flush rewrite rules .
3365	Sets the postmalink .
3366	Get apache modules .
3367	Prepare event .
3368	Generates a string from the given metadata .
3369	Returns a string representation of a class .
3370	Get class by name
3371	Visit an association .
3372	Get form factory .
3373	Displays the page .
3374	Get filename .
3375	Opens a file .
3376	Create an image instance
3377	Reminders the password .
3378	Check if a link is visible
3379	Get default namespace
3380	Get model class
3381	Check if a role has a given role .
3382	Check if the given permission exists .
3383	Authenticate the user .
3384	Find the user .
3385	Get user role
3386	Authenticate a user .
3387	Send a reset link .
3388	Returns the redirect after confirmation .
3389	Get the redirect after registration .
3390	Returns the redirect afterResend confirmation .
3391	Confirm a confirmation .
3392	Resend confirmation .
3393	Register a user .
3394	Send confirmation to the user .
3395	Attempt to attempt a login .
3396	Create a mail message .
3397	Decode unreserved chars .
3398	Parse a string
3399	Get the schema .
3400	Make request .
3401	Get the value of the given selector
3402	Apply result callback .
3403	Load from YAML file
3404	Lock the command .
3405	Check if the current time limit is available .
3406	Load commands from a path .
3407	Set lock store .
3408	Get lock factory .
3409	Set the lock path
3410	Run a command .
3411	Format the current time .
3412	Called when the crawler is finished .
3413	Refresh the fields
3414	Fill the fields with the given fields .
3415	Update the fields of this model .
3416	Normalizes the fields for saving .
3417	Get value from language field
3418	Register Eloquent database .
3419	Instantiate service container .
3420	Deletes a record .
3421	Loads all users .
3422	Returns the number of users .
3423	Check if groups are selected
3424	Normalize the filter .
3425	Get a record by ID
3426	Sets the sort order .
3427	Add a filter .
3428	Paginate the collection .
3429	Checks if the properties are selected
3430	Retrieve data in cache .
3431	Returns the number of rows in the database .
3432	Normalize select fields
3433	Refresh the fields of this group .
3434	Refresh user groups
3435	Replace a group with a new group .
3436	Fetch all properties for a select
3437	Refresh the fields of the block .
3438	Fetches all sections of this block .
3439	Get the current section .
3440	Save property values
3441	Normalize properties .
3442	Sets the query using the given method and parameters .
3443	Checks if the field exists .
3444	Get field value .
3445	Get accessor for given field
3446	Get the accessor for a language field .
3447	Returns an array of fields .
3448	Get attribute value .
3449	Set attribute value .
3450	Get all child children .
3451	Record an event .
3452	Get the aggregate root of an aggregate .
3453	Determine the stream name .
3454	Creates a new AggregateType instance from an aggregate .
3455	Creates a new AggregateType instance from the given aggregate root class .
3456	Creates a new AggregateType from a string .
3457	Replay the history .
3458	Add a module .
3459	Add a new route
3460	Find a route .
3461	Register middleware .
3462	Process a request .
3463	Handle a request .
3464	Register a route .
3465	Register a post route .
3466	Register a route .
3467	Register a patch .
3468	Register a route .
3469	Register a route .
3470	Register a controller .
3471	Merge config with given config .
3472	Extract a configuration from a namespace .
3473	Set the value of a key .
3474	Handle the bot .
3475	Get the gateway address .
3476	Make a request .
3477	Returns a new instance with the localized title .
3478	Returns a copy of the message with the given locale .
3479	Creates a new instance with the given locale .
3480	Returns a new instance with the launch image .
3481	Include configuration file
3482	Returns a new instance with the given content .
3483	Returns a new instance with the mutable content .
3484	Returns a new instance with the specified threadId .
3485	Resolve JWT signature generator .
3486	Add default resolver .
3487	Resolve a WebToken JWT JWT .
3488	Try to resolve the JWT JWT signature generator .
3489	Create temporary file .
3490	Create a new payload with custom data
3491	Creates a new request with the given name .
3492	Creates a new Request with the given headers .
3493	Create a new Request with the given certificate .
3494	Returns a new instance with the certificate passphrase .
3495	Add a visitor .
3496	Send notification .
3497	Add default visitors .
3498	Creates a new HttpProtocolChainVisitor .
3499	Create a new device .
3500	Creates a new notification with the given apnId .
3501	Creates a new notification with the given collapseId .
3502	Initializes the curl resource .
3503	Prepares the CURL resource for a request .
3504	Create a send notification exception .
3505	Convert an APPS object to an array .
3506	Convert alert to array
3507	Perform diff between two strings .
3508	Computes the difference between two strings .
3509	Render the text from the given opcode .
3510	Converts a value to a string .
3511	Adjust the translation table .
3512	Returns a string representation of insertTranslations element .
3513	Export translations .
3514	Post missing keys .
3515	Returns the locale .
3516	Sets the locale .
3517	Returns true if the user is unpublished
3518	Sets whether or not the page is unpublished .
3519	Get the translations .
3520	Returns a choice .
3521	Login a user .
3522	Refresh token
3523	Get item by id
3524	Fetch all platforms
3525	Lookup a user by username
3526	Parse stat item
3527	Fetch a profile
3528	Get a list of friends
3529	Send an unreal client fetch request
3530	Send UnrealClient POST request
3531	Send a GET request
3532	Send a POST request
3533	Finds user object by given attribute .
3534	Create new user object
3535	Creates a new user object .
3536	Updates the account status .
3537	Gets the groups assigned to the LDAP user .
3538	Query LDAP user object .
3539	Get adldap provider
3540	Get sync options
3541	Get group assignment options .
3542	Get extension options .
3543	Create example role
3544	Check if a file exists .
3545	Writes a template to a file .
3546	Create a new user .
3547	Register the command .
3548	Create a new model .
3549	Register the repository .
3550	Register Emoji parser .
3551	Parse an inline image .
3552	Boot the model mutator .
3553	Set meta data
3554	Get the value of the field .
3555	Cast value .
3556	Set meta group
3557	Set meta type
3558	Set meta value
3559	Mutate value .
3560	Get the type of a value .
3561	Returns the type of the given value .
3562	Check if the value is a mutator .
3563	Get mutator .
3564	Cast value to string
3565	Get attribute .
3566	Set the set attribute .
3567	Returns an array of attributes .
3568	Creates a copy of the model .
3569	Decorator for hook .
3570	Unset hook .
3571	Gets the query hook .
3572	Set an attribute .
3573	Set an attribute .
3574	Update attribute value
3575	Remove an attribute .
3576	Returns a copy of this collection .
3577	Get meta query .
3578	Get meta select columns .
3579	Get meta query .
3580	Order by meta .
3581	Puck meta data .
3582	Adds a select clause to the query .
3583	Join meta .
3584	Adds a meta query to the query .
3585	Get meta operator .
3586	Unbind numeric values .
3587	Get meta constraint .
3588	Gets the meta constraint for a given column .
3589	Save meta attributes .
3590	Check if a meta key is allowed
3591	Set meta attributes
3592	Load meta attributes .
3593	Set fake mac address
3594	Get current mac address
3595	Register cp url rules .
3596	Create table tables .
3597	Create index indexes .
3598	Parse http request .
3599	Handle HTTP request .
3600	Creates a HTTP response from an exception .
3601	Collect an exception .
3602	Returns true if the application is debug .
3603	Creates a JsonResponse from an exception .
3604	Handle JSON request .
3605	Checks if the request is supported .
3606	Get a http handler
3607	Get table names .
3608	Get resource owner details .
3609	Get user locations
3610	Get device schedule
3611	Get next scheduled event
3612	Set target temperature mode
3613	Sets the target temperature .
3614	Sets the temperature of the specified temperature .
3615	Sets the temperature of the temperature .
3616	Set the fan mode .
3617	Set the fan mode .
3618	Set the fan mode on the device .
3619	Cancel fan mode .
3620	Set fan interval
3621	Use this API to use EcoTemp .
3622	EnableHumidifier .
3623	Converts a temperature to a temperature .
3624	Get the temperature in the user scale .
3625	Returns a list of devices .
3626	Get the default serial serial number .
3627	Get device network information .
3628	Get CURL certificate
3629	Safely touch a file .
3630	Validate items .
3631	Collects events .
3632	Get configuration .
3633	Get pool configuration
3634	List events .
3635	Get request middleware .
3636	Get the request middleware .
3637	Initialize the application .
3638	Show environment information .
3639	Check if the server is running .
3640	Get all values
3641	Get input value .
3642	Returns an array with the given keys .
3643	Remove a request from the request .
3644	Returns a new array with the given keys .
3645	Get old value .
3646	Clean a value
3647	Process a value .
3648	Register binput .
3649	Retrieves the value of a cookie .
3650	Get the template for the given template .
3651	Call parse template hooks
3652	Parse the template .
3653	Render a template
3654	Purge all meta models
3655	Get label text .
3656	Boot bootstrap .
3657	Try to dispatch event .
3658	Encode property values .
3659	Get subscribed services .
3660	Get filter rule .
3661	Add query parameters .
3662	Parse query string .
3663	Get value from service container
3664	Get value from source
3665	Convert a parameter array to a string
3666	Convert a parameter to a string
3667	Get row from table
3668	Generate the URL for the page .
3669	Get current filter url
3670	Determine the fragment fragments .
3671	Get folder URL fragment fragment .
3672	Get page candidates .
3673	Get page id from url
3674	Extract post data
3675	Collect attribute factories .
3676	Check if a column exists .
3677	Check if a field exists .
3678	Generate an AJAX request
3679	Build backend modules .
3680	Inject child tables into the local menu .
3681	Returns the jump to the page
3682	Get filter factory .
3683	Get filter url builder .
3684	Builds the native SQL statement .
3685	Compiles a filter rule .
3686	Adds a filter rule to the filter .
3687	Get attribute from filter operation .
3688	Calculate subfilter .
3689	Create button button .
3690	Handle createVariant action .
3691	Set variant base base base base .
3692	Get breadcrumb .
3693	Creates a new attribute .
3694	Get breadcrumb .
3695	Get breadcrumb elements .
3696	Extracts the id from a parameter .
3697	Check if the model is purged .
3698	Get the view definition .
3699	Parse the listing configuration .
3700	Handle sorting .
3701	Convert group type to render group type
3702	Get a legend .
3703	Get a property .
3704	Handle a duplicate model .
3705	Handle meta model .
3706	Get meta model frontend filter
3707	Render widget .
3708	Check the redirect parameters .
3709	Get frontend filter options
3710	Get filters .
3711	Generate element element
3712	Generates a clear - all clear - all content element
3713	Determine if the type is nested .
3714	Allow attribute types
3715	Add a known attribute type .
3716	Handles the get property options .
3717	Create a new exception .
3718	Get meta model from model
3719	Determine if the model should be handled .
3720	Validate input
3721	Handle delete event .
3722	Handle update event .
3723	Add meta model names .
3724	Builds the cache service .
3725	Builds the picker service .
3726	Creates a new instance from a query builder .
3727	Sanitize connection .
3728	Try to unserialize a value
3729	Returns an array of attribute names for the given interface .
3730	Returns the list of IDs matching the filter .
3731	Fetch rows from database
3732	Creates a new filter .
3733	Get attribute by name
3734	Save a simple column
3735	Save an attribute to the database .
3736	Update variant attributes .
3737	Create new item .
3738	Get the connection .
3739	Saves the base column columns .
3740	Returns a list of combinations for a given user group .
3741	Get label parameters .
3742	Deletes a model
3743	Set language .
3744	Get the meta model instance .
3745	Fetch model from config
3746	Set base config
3747	Extract sorting from config
3748	Get IDs from a filter .
3749	Get items by filter
3750	Get filter options
3751	Check if a value is unique
3752	Resets the default value for a given field .
3753	Save an item to the database .
3754	Save a collection of objects
3755	Check if two models are equal .
3756	Create a new variant
3757	Decode property value .
3758	Encodes the value from the widget .
3759	Build widget widget .
3760	Create conditions for a given palette .
3761	Get the legend .
3762	Get the condition chain .
3763	Get the property property .
3764	Get the visibility chain .
3765	Maps the translations to the given domain .
3766	Adds the translations to the input screen .
3767	Get filter options
3768	Resolve path .
3769	Collect all attributes from the meta model .
3770	Create a render setting .
3771	Fixes module modules .
3772	Build language string
3773	Build meta conditions .
3774	Get type names .
3775	Returns the maximum children of the given condition type .
3776	Runs the template
3777	Get parameter name
3778	Get label .
3779	Get filter options
3780	Get the filtered attribute .
3781	Determine filter value .
3782	Convert model to label
3783	Get the condition attribute for a specific setting .
3784	Encode property value from widget .
3785	Update the values for the given properties .
3786	Add an event listener .
3787	Get meta model by id
3788	Calculates the conditions for the model .
3789	Get set values
3790	Determine the available languages .
3791	Fetches the list of IDs for a given language .
3792	Get model by id
3793	Checks if the provider has variants .
3794	Checks the clipboard for the clipboard .
3795	Check if action is empty
3796	Checks if the given model is a root node .
3797	Checks if a model has a model .
3798	Check if the model has a variant with the current variable .
3799	Checks if the given model has no variants .
3800	Get meta model .
3801	Get the cache .
3802	Get the palette definition .
3803	Creates a palette property .
3804	Build a condition .
3805	Generate the html page
3806	Check if the attribute name is changed .
3807	Translate a legend
3808	Translate a property .
3809	Applies the legend conditions .
3810	Translate a list of rows
3811	Transform a condition .
3812	Transform a list of conditions into a property chain .
3813	Transform a list of rows into a group .
3814	Inject service container definitions .
3815	Process a meta model .
3816	Render the form .
3817	Fetch existing attributes .
3818	Generates the form for the given attribute .
3819	Translate checkbox caption .
3820	Performs the insert operation .
3821	Get the uri for the given table .
3822	Purge meta model cache
3823	Set page value
3824	Get filter parameters .
3825	Compiles the template .
3826	Check if the filter is active
3827	Get frontend filter value
3828	Add a url parameter
3829	Builds the filter url .
3830	Prepare frontend filter options
3831	Prepare frontend filter widget
3832	Validate widget .
3833	Get language value from array
3834	Add additional formatters
3835	Prepare template data
3836	Set language strings
3837	Get the base definition .
3838	Builds the panel
3839	Adds a submit element to the panel .
3840	Parse a panel row .
3841	Parse panel filter .
3842	Parse the sort element .
3843	Parse the search element .
3844	Updates the jump to the table .
3845	Updates the Dca settings published in the database .
3846	Convert sub - palettes to tables .
3847	Updates the tables in the database .
3848	Updates the database .
3849	Handle the event .
3850	Get the service container .
3851	Set the limit .
3852	Sets the sorting .
3853	Set the output format .
3854	Set meta model
3855	Set meta tags
3856	Prepare meta model
3857	Prepare the view
3858	Set the filter settings
3859	Add a filter rule
3860	Get attribute names .
3861	Prepare the pagination
3862	Get the output format .
3863	Get caption text
3864	Set title and description
3865	Render item list
3866	Get the basic basic definition .
3867	Handle the wizard .
3868	Get all configs
3869	Get meta model .
3870	Get the view .
3871	Get the language for a single language
3872	Get the jumpTos for a given filter .
3873	Get the base URL for a page .
3874	Remove empty page details
3875	Add a list of pages
3876	Get meta models
3877	Build the query .
3878	Add a sub filter .
3879	Adds a sub procedure to the filter builder .
3880	Get the jumpToLabel label .
3881	Get page details
3882	Determine the jump to the page .
3883	Get backend icon
3884	Creates a new setting .
3885	Collect all rules for a given parent .
3886	Collect rules .
3887	Render the edit button button .
3888	Get attribute names
3889	Get filter settings
3890	Build filter params for given element
3891	Loads the callback .
3892	Get filter parameter names
3893	Render edit button .
3894	Returns a list of attribute names for the given meta model .
3895	Get meta model .
3896	Returns the list of templates for the given type .
3897	Populate page picker
3898	Handle meta change .
3899	Sets the data for the table
3900	Search for a pattern
3901	Create column .
3902	Delete column .
3903	Rename column name
3904	Handles the get options .
3905	Get property names .
3906	Handles get options .
3907	Builds the data model .
3908	Set accepted extensions
3909	Add a path to the path .
3910	Get the URL for a file
3911	Fetch additional data
3912	Remap sorting sorting
3913	Sort files .
3914	Sort files by name .
3915	Sort files by date
3916	Sort a list of files by id
3917	Sort by random files
3918	Check if a file is uploaded
3919	Convert a list of values to meta models
3920	Add file models .
3921	Process a file
3922	Resize image
3923	Get the database connection .
3924	Get the value options .
3925	Decode property value .
3926	Encodes the value from the widget .
3927	Set the value of the option options .
3928	Get the options for the given attribute .
3929	Builds the meta data .
3930	Build property .
3931	Get or create a property .
3932	Set label .
3933	Set the description .
3934	Set excluded property .
3935	Set the searchable property .
3936	Set widget type .
3937	Set property options .
3938	Set the explanation .
3939	Set the value of the eval
3940	Set empty value
3941	Returns the maximum children of the given input type .
3942	Builds a list of languages .
3943	Prepare the widget widget .
3944	Search all files in a folder
3945	Load meta data container .
3946	Handle meta model .
3947	Handle non - meta model .
3948	Build the map .
3949	Build caption .
3950	Builds a button button .
3951	Checks if a value is empty .
3952	Check if array is empty
3953	Get attribute value
3954	Returns the variants of this variant .
3955	Get variant base .
3956	Get the siblings of this variant .
3957	Save item to meta model
3958	Register additional assets .
3959	Parse the data
3960	Parse an attribute .
3961	Returns the variant css class .
3962	Create a meta model .
3963	Checks if a column is reserved .
3964	Get json file
3965	Authenticate user .
3966	Get input screen .
3967	Get meta model by pid
3968	Create an attribute instance .
3969	Delete condition settings .
3970	Convert attribute id to name name .
3971	Get attribute options .
3972	Decode attribute value .
3973	Encode attribute value .
3974	Builds the meta data .
3975	Get the data provider definition .
3976	Handle the Encode property value .
3977	Add multiple edit commands .
3978	Parse model operations .
3979	Create command instance .
3980	Get a command instance .
3981	Get caption caption
3982	Extracts the user rights from the given token .
3983	Build the Backend menu section .
3984	Add a menu .
3985	Check if a route is active
3986	Returns a list of combinations for the user .
3987	Returns the combination of a given table name .
3988	Get the children of the given parent table .
3989	Get the input screen .
3990	Get input screens .
3991	Checks if a child is a child .
3992	Decode property value .
3993	Encodes the value from the widget .
3994	Build widget widget .
3995	Replaces all tags in a string
3996	Jump to the page
3997	Get item list
3998	Get attribute value
3999	Get the count for a given type
4000	Load meta model .
4001	Get meta data from table
4002	Get the count for a given ID
4003	Check if item is published
4004	Get meta model name .
4005	Create meta model instance .
4006	Create a meta model .
4007	Create meta model .
4008	Collect meta table names .
4009	Collect meta information .
4010	Get max pagination links .
4011	Get pagination string
4012	Calculate paginated paginated paginated .
4013	Calculate the paginated data .
4014	Get help wizard .
4015	Make sure the field is mandatory .
4016	Get widget class .
4017	Handle load callback .
4018	Initialize widget .
4019	Handle save callback
4020	Validate widget
4021	Validate input
4022	Returns the help for the widget .
4023	Build the options
4024	Handles the filter group .
4025	Add a condition to the property .
4026	Convert model to label .
4027	Get label comment .
4028	Returns the label for the model .
4029	Get label text .
4030	Get label pattern .
4031	Update image with disabled .
4032	PreCreate an inverse image .
4033	Add an element to the list
4034	Get label for table
4035	Returns a list of templates for the given base name .
4036	Fetch all templates from resource directory
4037	Get a list of templates for a folder .
4038	Returns a list of IDs matching the filter filters .
4039	Get the class for an option .
4040	Generates an option .
4041	Render the model .
4042	Render the value of a property .
4043	Add additional header fields .
4044	Remove variant attributes .
4045	Decode the value of the jumpToWidget .
4046	Encodes the value of the value from the widget .
4047	Build widget .
4048	Get filter settings
4049	Fetch the input screen for the given ID .
4050	Prepare input screen .
4051	Builds the condition tree .
4052	Fetch all properties for a given input screen .
4053	Fetches the conditions for the given user .
4054	Fetch the group sorting .
4055	Convert a list of properties to an array .
4056	Convert a legend to a legend .
4057	Convert an attribute to a legend .
4058	Draw attribute .
4059	Draw the legend .
4060	Compare two values .
4061	Returns the long message of the exception .
4062	Checks if the given array is empty .
4063	Calculates the difference between two arrays .
4064	Calculates the difference between two arrays .
4065	Get all the attributes of this setting .
4066	Handle the widget .
4067	Get the value of a given name .
4068	Configure meta models .
4069	Handle get options .
4070	Get the stylesheets .
4071	Get the javascript files .
4072	Scan files .
4073	Get user .
4074	Resolve the table configuration
4075	Set table mapping .
4076	Get meta model name .
4077	Returns a list of all the combinations of the current combination .
4078	Fetch input screen details
4079	Builds the input screen .
4080	Determines if the given meta model is standalone .
4081	Returns the rendering setting for the given meta model .
4082	Get input screen id
4083	Returns a list of all the input screens .
4084	Returns the parent of the given meta model .
4085	Create a breadcrumb store .
4086	Handle filter parameters .
4087	Transform a DSL term into a string
4088	Transform a DSLort into a string
4089	Builds the url .
4090	Delete a document .
4091	Create the payload for the operation .
4092	Set the term
4093	Set a wildcard field
4094	Get the query .
4095	Execute a GET request
4096	Build a RangeQuery
4097	Add a field .
4098	Get config value
4099	Set the index .
4100	Set the transport type .
4101	Create a new mapping
4102	Request an HTTP request .
4103	Perform a search .
4104	Parse a DSN string .
4105	Begin a bulk operation .
4106	Commits the bulk .
4107	Determine if the hint is available .
4108	Get skin file content
4109	Returns options array
4110	Convert an array to a tab list .
4111	Finds the file and line number .
4112	Returns the full path of a file .
4113	Get information about a block .
4114	Returns true if remote call is enabled
4115	Get remote call url
4116	Get the path of a block
4117	Checks if the block is within the cache .
4118	Returns the type of the given type .
4119	Add a type .
4120	Sets the type of the given type .
4121	Returns a proxy class .
4122	Get proxy file name
4123	Generate proxy classes .
4124	Generate proxy class .
4125	Generate methods for a class .
4126	Get the namespace namespace .
4127	Creates a new default annotation driver .
4128	Loads the metadata for the given class name .
4129	Creates a new query .
4130	Create a native query .
4131	Creates a Lucene query .
4132	Clear the document .
4133	Initialize object .
4134	Encrypt and append a tag
4135	Decrypt a ciphertext with the given length .
4136	Returns a string representation of the request .
4137	Process headers .
4138	Upload a media file
4139	Get OAuth parameters
4140	Get request string
4141	Get signature base string
4142	Get OAuth string
4143	Get all headers
4144	Get a GET request
4145	Validate credentials .
4146	Get the url for the request
4147	Get the response
4148	Find exceptions .
4149	Build multipart data .
4150	Get the binary file .
4151	Resets the call state .
4152	Get bearer token .
4153	Invalidate bearer token
4154	Get bearer token credentials .
4155	Build the request header .
4156	Add an interval .
4157	Add cron expression
4158	Run the schedule .
4159	Pop a job .
4160	Get the login URL .
4161	Modify a user .
4162	Search for media
4163	Make an API call
4164	Set access token
4165	Merge permission scope .
4166	Run a command .
4167	Returns a string representation of the class .
4168	Add a package .
4169	Tokenize package info .
4170	Pretty print package .
4171	Ask a package key .
4172	Run the migration .
4173	Check if migration file exists .
4174	Build the configuration .
4175	Get service providers .
4176	Get facades .
4177	Get the migration .
4178	Get the files .
4179	Check if the manager exists .
4180	Notify user .
4181	Get resources .
4182	Creates a new instance of this instance .
4183	Checks if a file contains a class .
4184	Get file by class
4185	Search service providers .
4186	Search for packages .
4187	Publish vendor file .
4188	Register the password strength .
4189	Dump constants .
4190	Dump methods .
4191	Dump method parameters .
4192	Dump PHP doc .
4193	Dump properties .
4194	Prints the magic info for the object .
4195	Generate an event for an object .
4196	Get the details of an event .
4197	Event handler .
4198	Event handler .
4199	Add constants .
4200	Add methods .
4201	Adds the methods to the object .
4202	Extracts the phpDoc from an event .
4203	Add properties to the event .
4204	Adds the properties of the properties .
4205	Returns the parameters for the given reflection method .
4206	Get property info .
4207	Get property info for a property
4208	Checks if an object is excluded .
4209	Get information about a method .
4210	Parse phpDoc param
4211	Get the constants .
4212	Filter constants by level
4213	Get column keys .
4214	Convert a row into an array
4215	Returns the keys of an object .
4216	Clear errors .
4217	Clear errors from log
4218	Clear log entries
4219	Clear the summary .
4220	Get log arguments .
4221	Returns an array of abstractions .
4222	Get the value of a specific key
4223	Get a configuration value
4224	Handle an exception .
4225	Handle shutdown .
4226	Registers the application .
4227	Unregisters the error handler .
4228	Build an error .
4229	Calculates the hash of the error .
4230	Parse a comment
4231	Finds the inherited doc .
4232	Get the content of a comment .
4233	Returns the hash of the given object .
4234	Splits a string into an array .
4235	Trims the given description .
4236	Email log message
4237	Get meta values
4238	Returns true if the log has been recorded .
4239	Start bootstrap .
4240	Event handler .
4241	Event handler .
4242	Process the built - in output .
4243	Handles shutdown .
4244	Builds the error list .
4245	Log PHP info .
4246	Log request .
4247	Log request headers .
4248	Event handler .
4249	Process log entry
4250	Get the meta data for a firephp event .
4251	Dump a method table .
4252	Event handler for output
4253	Process log entry .
4254	Builds the report .
4255	Build the fatal error .
4256	Builds the error message .
4257	Get all errors in a category
4258	Add a new subscriber interface .
4259	Get all subscribed subscribers .
4260	Checks if the given event name exists .
4261	Unsubscriber interface
4262	Subscribe an event to the queue
4263	Unsubscribe an event .
4264	Publish event listeners .
4265	Sort subscribers .
4266	Registers the stream wrapper .
4267	Close the directory .
4268	Opens a directory .
4269	Read directory contents .
4270	Rewind dir .
4271	Rename a file
4272	Close the stream .
4273	Returns true if the stream is closed .
4274	Flushes the stream .
4275	Lock the stream .
4276	Set file metadata
4277	Opens a file .
4278	Read data from file
4279	Sets the offset of the stream .
4280	Get information about the file .
4281	Get the position of the stream .
4282	Truncates the stream to the stream .
4283	Unlink a file
4284	Get file stat
4285	Process output .
4286	Process log entry .
4287	Get all subscribed subscriptions
4288	Log error message .
4289	Process a log entry .
4290	Process existing data .
4291	Publish meta data
4292	Get the value of a given path .
4293	Returns an array representation of an object
4294	Get the type of a value
4295	Log a message .
4296	Asserts that the assertion fails .
4297	Clear log messages .
4298	Count messages .
4299	Reset a counter .
4300	End the group end
4301	Log a group summary
4302	Uncollapse all groups .
4303	Start profiling .
4304	End the profile end
4305	Log a log event .
4306	Stores the current time .
4307	End time end
4308	Triggers the trace .
4309	Get a channel
4310	Get all channels
4311	Output the output .
4312	Set the error handler
4313	Autoloader class
4314	Log a group
4315	Returns the depth of the group .
4316	Get default services
4317	Get the default arguments .
4318	Set the log destination
4319	Interpolate a message .
4320	Merge two arrays .
4321	Get a value from an array .
4322	Build a string representation of an attribute
4323	Build an HTML tag .
4324	Returns the size of the given size .
4325	Get the information about the caller .
4326	Get client interface
4327	Check if a value is a list
4328	Parse attribute string
4329	Generate request id
4330	Serialize data into a string
4331	Unserialize a log message
4332	Build attribute value
4333	Build attribute value
4334	Get the css config
4335	Handle output .
4336	Close open groups .
4337	Returns the default output as default .
4338	Remove hidden entries from log
4339	Set the outputAs object
4340	Collapse errors .
4341	Ending the data .
4342	Start profiling .
4343	Pop a stack from the stack
4344	Push stack to stack
4345	Returns an array of lazy lazy loaded by the given name .
4346	Sets the given config .
4347	Get all configs
4348	Get config keys
4349	Normalize configuration array
4350	Set default values
4351	Set debug configuration
4352	Configure config
4353	Process log entry .
4354	Sets the file .
4355	Check if a timestamp is valid
4356	Dump a method table .
4357	Process log entries
4358	Process the given arguments .
4359	Add special characters .
4360	Dump a string
4361	Check if string is UTF8
4362	Convert a string to UTF - 8 .
4363	Convert string to UTF - 8
4364	Sets the current string .
4365	Handles an error .
4366	Returns the backtrace string .
4367	Email error message
4368	Returns the value for the given key .
4369	Build a table .
4370	Dump a value
4371	Renders a classname .
4372	Render debug event
4373	Builds a string of arguments .
4374	Builds the channel tree .
4375	Build group method .
4376	Build table footer
4377	Build table header .
4378	Build a table row .
4379	Dump an array .
4380	Convert a string to a string .
4381	Replace the visual white space .
4382	Process output .
4383	Builds a string of arguments .
4384	Dump an array
4385	Dump an object .
4386	Dump methods .
4387	Get the FE configuration for the given basket .
4388	Sets the configuration for the given order service .
4389	Respond to a transaction .
4390	Get xml provider
4391	Returns a list of attribute values .
4392	Check if the given attributes are valid .
4393	Cancel a payment .
4394	Capture a transaction .
4395	Checks if the feature is implemented .
4396	Refunds a payment
4397	Returns the form for the redirect response .
4398	Get transaction reference
4399	Save repay data .
4400	Saves the transaction reference
4401	Translate the given status .
4402	Get provider .
4403	Loads related layouts .
4404	Get the path of a location .
4405	Generate configuration file .
4406	Checks if the request matches the route .
4407	Get the current menu plugin .
4408	Handles the legacy controller .
4409	Render a template
4410	Add view parameters .
4411	Add menu plugin .
4412	Get the legacy preference value .
4413	On exception handler .
4414	Sets the page layout .
4415	Modify the tag .
4416	Event handler .
4417	Show layout layouts .
4418	Creates a request .
4419	Checks if the user is granted to the admin .
4420	Called when the user is logged in .
4421	Generate the legacy siteaccess .
4422	Intercepts the user .
4423	Ask the user access to the site .
4424	Executes the installation .
4425	Generate legacy autoloads .
4426	Ask for user input
4427	Ask for choice data
4428	Get a question .
4429	Get a choice question
4430	Writes the installation summary .
4431	Writes a section .
4432	Get runner .
4433	Create a new WatchdogSubscriber .
4434	Call a command .
4435	Creates a QlessException from an error message .
4436	Get config value
4437	Set a configuration value .
4438	Create a new job instance
4439	Unregister signals .
4440	Get the name of a signal .
4441	Get a list of messages from a topic .
4442	Get completed jobs .
4443	Get a list of jobs
4444	Get failed jobs for a group .
4445	Retrieve failed results .
4446	Get jobs tagged by tag
4447	Get jobs from worker
4448	Put a job .
4449	Pop a job .
4450	Pop a job by id
4451	Create a recurring job .
4452	Get stats for a given date .
4453	Check if the queue is paused .
4454	Register sync completion event .
4455	Attach an event handler .
4456	Returns the queue for the given event name .
4457	Detach event handler .
4458	Fire event .
4459	Fire an event .
4460	Fork a child process
4461	Handle child errors .
4462	Read error from socket
4463	Handle process exit status .
4464	Perform a child process .
4465	Run the given command .
4466	Normalize command arguments .
4467	Reload the cache .
4468	Set priority .
4469	Cancel a job .
4470	Completes the job .
4471	Receives a queue .
4472	Retry a message .
4473	Heartbeat the heartbeat .
4474	Perform the job .
4475	Fail the job .
4476	Track the track .
4477	Untrack a track .
4478	Get job instance
4479	Add tags to the tag .
4480	Sets the job data .
4481	Set the interval .
4482	Set the backlog .
4483	Receives a queue .
4484	Register a signal handler .
4485	Watch the watchdog .
4486	Broadcast a message .
4487	Send a message to the server .
4488	Send a message to the specified platform .
4489	Register a device .
4490	Create a topic .
4491	Register a device on a topic .
4492	Send a message to the topic .
4493	Set localized text .
4494	Get apns json . json
4495	Get the adm json .
4496	Get gcm json .
4497	Get Android Json JSON data .
4498	Returns a json string with the given limit .
4499	Merge two arrays .
4500	Returns true if this document matches the given selector .
4501	Get elements by class name
4502	Inserts a node after the given node .
4503	Replaces this node with the given replacement .
4504	Get an item by index .
4505	Get a list of organizations .
4506	Create a new organization .
4507	Create a new JWreated event .
4508	Decodes a JWT .
4509	Get tenant context .
4510	Called when the user was created .
4511	Decode a JWT event .
4512	Sets the locale for the controller .
4513	Convert this collection to an object
4514	Parse a string .
4515	Parse a file .
4516	Sets the sort order .
4517	Update parameter value .
4518	Called when the entity has been created .
4519	Gets a parameter .
4520	Set a parameter .
4521	Event handler .
4522	Loads the config .
4523	Load a zone definition .
4524	Create a Zone object from a definition .
4525	Creates a ZoneMember from a definition .
4526	Creates a ZoneMemberMember from the given definition .
4527	PrePersist entity .
4528	Load a permission .
4529	Handle request request .
4530	Sets the user UUID .
4531	Process loader .
4532	Sets the first result .
4533	Get list of tasks
4534	Sets the candidate group .
4535	PrePersist entity .
4536	Sets the tenantId in the database .
4537	PrePersist entity .
4538	Set tenant ID .
4539	Set the IndividualUuid
4540	Get a config value .
4541	Set a config value
4542	Sets the value of the entity .
4543	Add filter constraint .
4544	Handle kernel exception .
4545	Sets the sortBy property .
4546	Set the IncludeAssignedTasks field .
4547	Checks the health of the collection .
4548	Get all statum .
4549	Get a stat .
4550	Set the assignee .
4551	Get list of objects
4552	Check if a user exists .
4553	Called when the event was created .
4554	Decodes the decoded JWT .
4555	Add a join to the query builder .
4556	Set the organization Uuid
4557	Generate a unique id .
4558	Generates a UUID for the given entity .
4559	Executes the entity .
4560	Translate the given model .
4561	Transfer translations from model .
4562	Get all properties of a model .
4563	Pre - serialize parameter .
4564	Handle kernel exception .
4565	Creates a new JWT .
4566	Returns a list of form fields .
4567	Resolve a form .
4568	Returns the parent of the given permission .
4569	Cast a permission .
4570	Decrypt entity .
4571	Set anonymous UUID .
4572	Sets the identity UUID .
4573	Get all properties of an entity .
4574	Returns a list of localized properties .
4575	Get the count of the count
4576	Get resource object
4577	Get resource object
4578	Starts a resource .
4579	Get start form
4580	Encrypt model .
4581	Get the properties of the given model .
4582	Event handler .
4583	Decodes a JWT token .
4584	Creates a JWreated event .
4585	Decode a JWT event .
4586	Returns the signature of the request .
4587	Set the staff Uuid
4588	Sets the maximum number of results .
4589	Sets the value of the variable in the return value .
4590	Check if a form exists
4591	Sets the owner s owner .
4592	Submit an array of variables .
4593	Converts a string to a string .
4594	Loads the entity .
4595	Get the permissions for the given user .
4596	Get list of objects
4597	Set deserialize values .
4598	Generates the identity for the given model .
4599	Processes the request .
4600	Translate entity .
4601	Remove access permission .
4602	Encrypt data .
4603	Decrypt a string
4604	Parses a file .
4605	Set entity UUID
4606	Create a new app .
4607	Get statuses
4608	Create a new status .
4609	Register the MultiSelect plugin
4610	Set geo coordinates
4611	Get image
4612	Prepare the command .
4613	Set a scalar value .
4614	Set the range value .
4615	Build cluster .
4616	Validate configuration .
4617	Build a list of nodes .
4618	Checks if the object is required .
4619	Creates a new instance from a string .
4620	Build an object
4621	Build JSON object
4622	Pick a random node
4623	Execute a command .
4624	Pick a new node .
4625	Prepare the command .
4626	Create index query path .
4627	Prepare request data
4628	Prepare request URL
4629	Prepare request parameters
4630	Prepare request headers
4631	Prepare request method
4632	Handle response headers
4633	Get a header value
4634	Get all attachments .
4635	Attach mail listeners .
4636	Send an email .
4637	Create a new mail event .
4638	Build a MIME message .
4639	Attach attachments .
4640	Creates a helper plugin manager .
4641	Build job callback
4642	Get project name .
4643	Start the build .
4644	Stop jobs .
4645	Sets a dimension .
4646	Computes the positions of the matrix .
4647	Copy file to target file
4648	Get the value for a given key .
4649	Get service services .
4650	Parse environment variable .
4651	Clean all jobs .
4652	Remove all jobs .
4653	Get the list of jobs to remove .
4654	Get jobs from a project path
4655	Get job from image
4656	Create a new image .
4657	Run the command .
4658	Get Travis CI build strategy
4659	Get chain build strategy .
4660	Get a console logger
4661	Send the message to the queue .
4662	Send a message to the mail .
4663	Sets smtp
4664	Set dynamic content
4665	Create a message
4666	Configure the configuration .
4667	Sets the view .
4668	Generates the class for the given XHIR element .
4669	Generate the autoloader .
4670	Write the autoloader .
4671	Add a block to the body
4672	Set paths .
4673	Get template file .
4674	Add a callback .
4675	Add a string to the view
4676	Render the view
4677	Render the buffer
4678	Render a template file .
4679	Set template data
4680	Render the template .
4681	Starts the timer .
4682	Format a time .
4683	Stop timer .
4684	Set the value of the column normalization .
4685	Sets the query .
4686	Add a select expression .
4687	Set where clause
4688	Add a WHERE clause .
4689	Set group by expression
4690	Add a group by expression .
4691	Set where clause
4692	Adds a condition to the query .
4693	Sets the ORDER BY clause .
4694	Add an ORDER BY clause .
4695	Set limit by limit .
4696	Get a token from the session
4697	Validate session data
4698	Compare two hashes
4699	Returns an array of error messages
4700	Handle input .
4701	Create ciconia .
4702	Run command .
4703	Lint content .
4704	Get an offset .
4705	Returns a copy of the collection .
4706	Iterate over all objects .
4707	Process multiple words .
4708	Initialize Markdown .
4709	Initialize the text .
4710	Removes tabs .
4711	Wrap the end of the text .
4712	Escapes the text .
4713	Replace text with given pattern .
4714	Replace a string with the given string
4715	Split the text into a collection .
4716	Register a callback for an event .
4717	Emit an event .
4718	Process standard URL .
4719	Process block tags .
4720	Register a text .
4721	Process list items .
4722	Set text .
4723	Set an attribute .
4724	Render the tag .
4725	Add a rule .
4726	Returns the plural form for the given singular .
4727	Returns the singular value for the given plural .
4728	Sets the cache .
4729	Checks if a word is singular .
4730	Transcode a string to a string
4731	Convert unicode string to UTF - 8
4732	Set the expiration time .
4733	Sets the session .
4734	Write data to the session .
4735	Regenerate session id
4736	Process the messages middleware .
4737	Send exception message .
4738	Handle an exception .
4739	Clear all temporary files
4740	Clear the contents of a file
4741	Creates a probe definition .
4742	Determine if review option is required .
4743	Check if the user is valid
4744	Checks if the user is valid .
4745	Checks if the user is valid .
4746	Checks if the user is an error .
4747	Returns a list of plans .
4748	Returns the plan for the given plan code .
4749	Get addons for a plan
4750	Filter plans .
4751	Get price by plan code
4752	Sends the form to the request
4753	Get contact form method
4754	Start profiling .
4755	Stop profiling .
4756	Transform a value into a string .
4757	Transform an iterable .
4758	Transform cache annotation .
4759	Transform a template .
4760	Update stats .
4761	Flush the queue .
4762	Send data to socket
4763	Creates new user
4764	Validate delivery address
4765	Validates registration option
4766	Validate invoice address
4767	Convert XML object to PHP object
4768	Convert PHP object to DOM
4769	Starts the console .
4770	Render widget .
4771	Sets the status of a widget .
4772	Update widget config
4773	Order widget .
4774	Build a list of widgets
4775	Load widget config .
4776	Render widgets .
4777	Get the output of the given item .
4778	Add widget .
4779	Remove a widget .
4780	Clear widget cache .
4781	Add widget config .
4782	Remove widget config .
4783	Returns the module .
4784	Handle a message .
4785	Returns true if the given key exists .
4786	Returns the value at the given key .
4787	Set a value for a given key
4788	Insert data into database
4789	Update an existing record
4790	Insert a row into the database .
4791	Delete all rows from table
4792	Sets the SELECT clause .
4793	Sets the order .
4794	Set the GROUP BY clause .
4795	Execute aggregation
4796	Execute the query
4797	Fetch a single column from the query
4798	Get a single row by key
4799	Execute a query
4800	Add a query to the query
4801	Inject special bindings .
4802	Locates a directory .
4803	Render rich text .
4804	Get the template path .
4805	Get the lowest index number .
4806	Process a member variable comment .
4807	Schedule an event .
4808	Unschedule a specific event .
4809	Deactivate the site .
4810	Check if a cron is scheduled
4811	Creates a new ExpressionLanguage instance .
4812	Add a context value .
4813	Get a value from the storage .
4814	Creates a collection from a file .
4815	Returns the contents of this collection .
4816	Append a single row to the collection .
4817	Inserts a row in the collection
4818	Adds a field to the collection .
4819	Returns an iterator over the collection .
4820	Add a new field
4821	Get the value of a field
4822	Set a field value .
4823	Removes a field from the table .
4824	Removes a value from the row
4825	Replaces the value of a field with the given value .
4826	Returns the XML representation of this row .
4827	Finds a user by ID .
4828	Create a new charge
4829	Cancel a subscription .
4830	Get a single contact .
4831	Perform a retry .
4832	Fetch the payout for this bill .
4833	Get the authorization URL .
4834	Fetch access token
4835	Get a single payment .
4836	Create a new payment
4837	Confirm a resource .
4838	Creates a new limit .
4839	Make a request .
4840	Validate a webhook .
4841	Fetch a subresource
4842	Generate query string .
4843	Sort two arrays .
4844	Convert a string to singular form
4845	Call the API call
4846	Register aliases .
4847	Unregister the autoload function .
4848	Returns the destinations for the given file path .
4849	Create driver instance .
4850	Prepare the counter for the given value .
4851	Apply an id to a row .
4852	Get driver .
4853	Get the real rows of the current table .
4854	Get profiling information .
4855	Log a message .
4856	Set session params
4857	Get session params
4858	Get pagination list
4859	Returns a list of nodes in the given namespace .
4860	Push a job .
4861	Push a job .
4862	Create an envelope .
4863	Retry a job .
4864	Pop a queue .
4865	Get all jobs .
4866	Delete a job .
4867	Fail a job .
4868	Parses the given options .
4869	Create a DateFormat instance
4870	Convert entity to string
4871	Set the event prototype .
4872	Trigger event listeners .
4873	Initialize buttons
4874	Set the form id
4875	Get meta data
4876	Returns the vote for the given object .
4877	Factory method .
4878	Set the user .
4879	Pretty print size
4880	Get file resource .
4881	Get the content of the file .
4882	Get the permissions .
4883	Generate public alias .
4884	Add dependencies to the collection .
4885	Set exclude methods .
4886	Get a plugin instance
4887	Create an entity .
4888	Displays a page .
4889	View action .
4890	Render a page .
4891	Get target
4892	Get the generator .
4893	Compare two arrays
4894	End the capture .
4895	Render a button
4896	Starts the capture .
4897	Get the config directory .
4898	Check the cache
4899	Setup environment variables
4900	Load dotenv .
4901	Load configuration file .
4902	Get docker environment
4903	Create a Selector
4904	Creates the options for the given node .
4905	Get application by key
4906	Show the view model
4907	Event handler .
4908	Render a summary form .
4909	Render a Summary .
4910	Render summary .
4911	Injects the components of the page .
4912	Sets the given variables .
4913	Add a dependency .
4914	Add an entity to the collection .
4915	Add an array .
4916	Set the value .
4917	Set the request parameters .
4918	Set hidden parameter
4919	Attach input filters to fieldset .
4920	Set a tab .
4921	Set the current region .
4922	Removes a region from the matrix .
4923	Remove a type from a region
4924	Add a new class
4925	Get the types of the matrix .
4926	Returns the regions of the matrix .
4927	Sets a list of listeners .
4928	Set a listener for a given event .
4929	Attach listeners to the event manager .
4930	Remove all listeners .
4931	Update the values
4932	Render notification .
4933	Load all entities .
4934	Deletes an entity .
4935	Trigger an event .
4936	Get the permissions for the given resource .
4937	Creates a new nested class .
4938	Returns the options for the given name .
4939	Set allowed types
4940	Sets whether or not the element is multiple .
4941	Get allowed types
4942	Check if file count is valid
4943	Add base fieldset
4944	Grant a resource .
4945	Revokes the given resource .
4946	Builds the current user .
4947	Check permission .
4948	Finds drafts by criteria .
4949	Creates a query builder .
4950	Create a draft .
4951	Get target FQCN .
4952	Check the rating value .
4953	Call helper method .
4954	Initializes the headscript .
4955	Listen to the renderer .
4956	Proxy proxy method
4957	OnFlush events .
4958	Attach events to the event manager .
4959	Remove all listeners .
4960	Render form .
4961	Set the form .
4962	Add a view model .
4963	Add a view template .
4964	Add view variables .
4965	Get files from request
4966	Get all headers from the request .
4967	Get data from POST request
4968	Get query parameters
4969	Get parameters from event .
4970	Process the event .
4971	Convert a content item to another .
4972	Flattens a tree
4973	Prepare data
4974	Hydrate a tree .
4975	Find or create a child node .
4976	Factory method .
4977	Sends a message to the file .
4978	Filter value .
4979	Gets a form .
4980	Convert a DateTime to a MongoDB value .
4981	Convert value to PHP value
4982	Set options .
4983	Returns an iterator over all active forms .
4984	Set form params
4985	Sets a form parameter .
4986	Executes a form action .
4987	Set a form .
4988	Sets a list of forms .
4989	Enable a form .
4990	Disable a form .
4991	Get entity by key
4992	Map entity to form
4993	Get active form
4994	Returns the active form of the active form .
4995	Returns the next active form .
4996	Get column map .
4997	Sets search params
4998	Determines if the given object is valid .
4999	Fixes one or more content items .
5000	Remove a menu item .
5001	Remove a tab .
5002	Remove empty groups .
5003	Get the configuration .
5004	Create event manager instance .
5005	Attach listeners .
5006	Normalize listener options
5007	Initializes the status .
5008	Trigger the event collection .
5009	Sets the subject .
5010	Get permissions .
5011	Get the logger instance .
5012	Sets the injector .
5013	Attach listeners .
5014	Log a bootstrap event .
5015	Log a finish event .
5016	Log a job .
5017	Log a job end
5018	Check if field is enabled .
5019	Get field options
5020	Get field flags .
5021	Get field input specification .
5022	Copy an array of values into a target array .
5023	Determine whether or not the selected items should be selected .
5024	Find a leaf node .
5025	Render the dropzone .
5026	Get custom customization options
5027	Get the template template .
5028	Decorate class metadata .
5029	Finds a page by its id .
5030	Find page by conditions
5031	Set the loaded page .
5032	Get the current page .
5033	Extract data from a file
5034	Hydrate an array
5035	Set the email address .
5036	Show the dashboard .
5037	Set all images .
5038	Get image by key
5039	Set an image .
5040	Set the permissions .
5041	On bootstrap .
5042	Set notification listener .
5043	Add a notification .
5044	Sets the locale .
5045	Set paginator .
5046	Add a form to the stack .
5047	Get the result of the query .
5048	Call plugin .
5049	Checks if the entity is empty .
5050	Trigger an event .
5051	Trigger the event until the given event is reached .
5052	Get the content type .
5053	Set the response .
5054	Initialize the frontend .
5055	Get entity class name .
5056	Attach events .
5057	Get controller class name .
5058	Generates a badge .
5059	Generates a badge from a URI .
5060	Creates a new instance from a URI .
5061	Calculate width
5062	Returns the output of the curl .
5063	Output the output as JSON .
5064	Execute curl .
5065	Get information about a curl .
5066	Initialize curl .
5067	Set an option .
5068	Set an option .
5069	Reads information about a multi - request .
5070	Determine header tags .
5071	Traverse header tags .
5072	Get HTML menu .
5073	Create controller .
5074	Set output format
5075	Write log message to log
5076	Get all items
5077	Get item id
5078	Search for items
5079	Get post remap
5080	Create a new item
5081	Puts a resource .
5082	Delete a resource
5083	Look up a resource
5084	Validate user input
5085	Builds the url for the page
5086	Start a transaction .
5087	Commits a transaction .
5088	Returns a map of values for a given key .
5089	Returns a map of rows for a given key .
5090	Add a file to the database .
5091	Execute a query .
5092	Assemble the table .
5093	Rotate a table
5094	Execute a multisetet .
5095	Get default parts .
5096	Check if query exists
5097	Appends the given values to the list .
5098	Appends the given values to the query .
5099	Insert into a table .
5100	Add multiple values to the list .
5101	Add a VALUES expression expression
5102	Adds a select statement to the query .
5103	Appends a SET clause .
5104	Execute the query
5105	Adds a limit to the query .
5106	Set a SET statement
5107	Create a new connector .
5108	Append the descending order to the column
5109	Order by column
5110	Append a bind .
5111	Append a part .
5112	Set a part .
5113	Write a QTime
5114	Convert string to UTF - 8
5115	Submit an article .
5116	Submit an attachment .
5117	Delete an article
5118	Delete an attachment
5119	Assign options .
5120	Perform a request .
5121	Send a request .
5122	Set the authorization header .
5123	Get attachment end point
5124	Cast input to array
5125	Serve the dispatcher .
5126	Initialize the core .
5127	Read a QTime .
5128	Read a QDateTime .
5129	Convert string to UTF - 8 .
5130	Returns a new instance with the given string .
5131	Filter the port .
5132	Checks if the connection is a standard port .
5133	Creates a URI from a string .
5134	Creates a new URI .
5135	Extract data from collection .
5136	Handle shutdown .
5137	Handle an error .
5138	Handle exception .
5139	Add a middleware .
5140	Register a route .
5141	Run the application .
5142	Process the request .
5143	Create a photo .
5144	Create a photo .
5145	Called when a test is executed .
5146	Access the inbox for a given address .
5147	Get the opened email .
5148	Get the most recent email .
5149	Get full email
5150	Get email recipients
5151	Get the text after a string .
5152	Sort emails by creation date
5153	Add a configuration .
5154	Configure the configuration .
5155	Set the configuration .
5156	Get file name .
5157	Checks if the given route matches the given path .
5158	Create a Gallery
5159	Create Gallery object
5160	Get attachment by field
5161	Attach an item to the model .
5162	Attach a gallery .
5163	Serialize entity .
5164	Send email .
5165	Render the template .
5166	Filters a URI instance .
5167	Format a date instance .
5168	Converts non - ASCII characters to ASCII characters .
5169	Returns the type of the given value .
5170	Get name by type
5171	Get available ratios .
5172	Set the encoder .
5173	Creates a new article .
5174	Get property value
5175	Set a property .
5176	Add a new value to the collection .
5177	Creates a new collection .
5178	Filters the collection .
5179	Adds a new value to the collection .
5180	Add an array .
5181	Append a value to an array .
5182	Fill source from source
5183	Parse a single article .
5184	Look up a list of articles
5185	Add attachment to article
5186	Create an attachment object .
5187	Create a photo .
5188	Create a new Page
5189	Create a video .
5190	Filter a string .
5191	Handle a string .
5192	Add a new route .
5193	Dispatch request .
5194	Add routes to the collection
5195	Get the result of a method
5196	Add a search result .
5197	Get the version .
5198	Save the message to the queue .
5199	Validate options
5200	Set options .
5201	Build connection options .
5202	Open AMQP connection .
5203	Close the connection .
5204	Check if current URL is active
5205	Check if a string matches the current URL
5206	Check if all active routes are active .
5207	Check if a list of URLs are active .
5208	Convert a node to a string
5209	Convert the statements into a string .
5210	Creates a new application .
5211	Convert a node to a string .
5212	Get a constant constant .
5213	Get binding .
5214	Find a binding .
5215	Get the binding binding .
5216	Create an instance of the given class .
5217	Get the bindings for the application .
5218	Get hostname .
5219	Cast a predicate to a predicate .
5220	Checks if a path contains a path .
5221	Get source paths .
5222	Checks if a property exists .
5223	Get the value for the given value .
5224	Creates a factory for injection .
5225	Resolve the binding .
5226	Checks if the given type is a type .
5227	Bind a list .
5228	Creates an injector .
5229	Returns the enum value for the given name .
5230	Returns the enum instance for the given value .
5231	Get enum values
5232	Checks if this object is equal .
5233	Handle exception .
5234	Add a new entry
5235	Add a new entry to the registry .
5236	Get a new instance of the class .
5237	Get injection values for a method .
5238	Get the name of a method binding .
5239	Returns the type of the given parameter .
5240	Log an exception .
5241	Returns an array of exception fields .
5242	Get autoloads .
5243	Transform a target file into a file .
5244	Prefix namespace .
5245	Replace the given pattern with the given pattern .
5246	Get file contents
5247	Get all models .
5248	Find model by id
5249	Save a child .
5250	Save record to database
5251	Deletes the model .
5252	Find or create a new model .
5253	Find model by id
5254	Destroy a model .
5255	Make pagination .
5256	Set the Elasticsearch model .
5257	Search for entities
5258	Get a collection of models .
5259	Get all documents .
5260	Set options .
5261	Merge query .
5262	Merges a query into a query .
5263	Set query fields .
5264	Put an instance into the cache .
5265	Get not cached attributes .
5266	Merges two models .
5267	Escapes a value .
5268	Escapes a string .
5269	Translate a select statement
5270	Translate update statement .
5271	Translate delete statement
5272	Translate the ORDER BY clause .
5273	Returns a QueryBuilder instance
5274	Adds a group to the query .
5275	Adds a WHERE clause .
5276	Sets the ORDER BY clause .
5277	Add a WHERE clause .
5278	Add OR WHERE clause
5279	Generate WHERE clause
5280	Select a select statement
5281	Adds a function to the query .
5282	Get the value of a variable
5283	Insert data into database
5284	Set the limit
5285	Sets the limit of a page .
5286	Reset the query .
5287	Make a request
5288	Get request method name
5289	Request a POST request
5290	Execute curl request
5291	Detects a language .
5292	Build Gravatar URL
5293	Generate icon file .
5294	Generate icon file .
5295	Generate SVG files .
5296	Set font options
5297	Get options from xml document
5298	Add a glyph .
5299	Get glyphs
5300	Get glyph names
5301	Gets the CSS CSS .
5302	Convert a string to hexadecimal
5303	Convert a hex string to unicode .
5304	Get the path part of the document .
5305	Get the path part of the XML element
5306	Transform a path .
5307	Get path from polygon
5308	Get path from a rect
5309	Get a path from a circle
5310	Get path from ellipse
5311	Generate HTML file .
5312	Get the HTML for a font file .
5313	Generate HTML for HTML .
5314	Generate the code .
5315	Generate blocks .
5316	Convert the array to a collection
5317	Run the process .
5318	Wait for the process
5319	Checks if the process exits .
5320	Wait for child process
5321	Remove the file .
5322	Lock a callable .
5323	Register a signal handler .
5324	Dispatch signal handlers .
5325	Lock a task .
5326	Begins the profiler .
5327	End a profile .
5328	Get CPU info by lscpu
5329	Push data to buffer
5330	Get emoji pattern .
5331	Get emoji code list
5332	Generate a hahnunuator .
5333	Sets the signature .
5334	Sign a request .
5335	Generates a SHA - 1 - 1 - 1 - 1 - 1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
5336	Encode parameters .
5337	Creates a new API instance .
5338	Builds a soap client .
5339	Set the mode .
5340	Sets the balancing mode .
5341	Call a service method .
5342	Creates a soap client .
5343	Builds the soap client .
5344	Create a SOAP client .
5345	Request access to the user
5346	Request RemoteHands
5347	Revert a snapshot to another VPS
5348	Install an operating system .
5349	Install an operating system .
5350	Sets the password password .
5351	Sets the database password .
5352	Get supported namespaces
5353	Get supported authentication types .
5354	Get authentication data .
5355	Guess the class from an operation .
5356	Parse OpenAPI specification .
5357	Generate query param statements .
5358	Creates the parameters for the given operation .
5359	Creates the URL statements for the given operation .
5360	Create body statements .
5361	Create header statements .
5362	Create a context from the registry .
5363	Generate client files .
5364	Parses the given directory .
5365	Paint a test .
5366	Paint a failure .
5367	Paint an exception .
5368	Returns the content of the form .
5369	Checks if a string is an ASCII .
5370	Add a value pair .
5371	Attach an attachment .
5372	Merge the current query .
5373	Get value from request
5374	Create a new tag .
5375	Create a new input tag .
5376	Converts keys to lowercase
5377	Get attribute value
5378	Check if the column is enabled .
5379	Wrap the text .
5380	Set the value of the option .
5381	Get the value of the choice .
5382	Set the value of the selected options .
5383	Check if the value is a valid value .
5384	Sets the value of the attribute .
5385	Checks if the given id is an id .
5386	Check if a label is a label
5387	Sets the value of the widget .
5388	Checks if the given values are valid .
5389	Sets the value of the widget .
5390	Checks if the given value is possible .
5391	Get the value of the widget
5392	Paint the passed message .
5393	Paint a failure .
5394	Paint the error .
5395	Paint an exception .
5396	Paint the skip .
5397	Paint the given message .
5398	Paint a signal .
5399	Set the host host .
5400	Truncate host name
5401	Check if path is valid
5402	Check if the current token is expired .
5403	Fixes path .
5404	Restart the session .
5405	Set the age of cookies .
5406	Find the first match of a cookie
5407	Get cookie value .
5408	Checks if the cookie is valid .
5409	Returns a list of cookie pairs .
5410	Close the file .
5411	Write a message to the socket .
5412	Read data from socket
5413	Creates a new socket .
5414	Get the HTTP request line .
5415	Fetch the response .
5416	Send request to socket .
5417	Create a simple HTTP response .
5418	Write cookies to jar
5419	Parse HTTP header line .
5420	Parse a cookie
5421	Parses a raw HTTP header .
5422	Read all packets from socket
5423	Invokes the given method .
5424	Expect exception .
5425	Checks if the given exception is expected .
5426	Convert an exception to an Expectation .
5427	Get the interfaces of this class .
5428	Returns a list of all interfaces .
5429	Get the parent class .
5430	Checks if the interface is final
5431	Returns the parents of the given interfaces .
5432	Checks if the given interface is an abstract method .
5433	Checks if the given interface is an abstract method .
5434	Checks if the given interface is static .
5435	Get the signature for a method .
5436	Get the signature of a method .
5437	Add a pattern .
5438	Returns true if the subject matches the pattern .
5439	Add a pattern .
5440	Add a new entry pattern .
5441	Parse a raw string .
5442	Dispatch tokens .
5443	Invokes the parser .
5444	Reduce the raw regexes .
5445	Add skip patterns .
5446	Add in tag tokens .
5447	Add attribute tokens .
5448	Accepts a token .
5449	Accepts a token .
5450	Accepts an attribute token .
5451	Parse a response .
5452	Start an element .
5453	Accepts a tag .
5454	Checks if a named tag exists .
5455	Add content to the tag
5456	Add content to all open tags
5457	Adds an open tag to the open tags .
5458	Open a tag .
5459	Accepts a tag .
5460	Accepts a label end .
5461	Called when the page ends .
5462	Stretch the given url
5463	Get common path .
5464	Checks if the given url is within the current page .
5465	Add a realm .
5466	Set the identity for a realm .
5467	Find a realm from a URL .
5468	Add headers to the request .
5469	Overridden to overlay the test .
5470	Describes a pattern match .
5471	Get the value of a property .
5472	Get private property from object
5473	Checks if the widget matches the given widget .
5474	Creates an action .
5475	Get action .
5476	Encode widgets .
5477	Add widget .
5478	Add widget .
5479	Add a radio button .
5480	Add a checkbox .
5481	Returns the value of the selected widget .
5482	Sets the value of a field .
5483	Attach a label to the widget .
5484	Checks if a selector has a submit button .
5485	Checks if the image matches the given selector .
5486	Submit button .
5487	Submit image .
5488	Encodes the request .
5489	Parse command line arguments
5490	Add item to array
5491	Determine the difference between two parameters .
5492	Render arguments .
5493	Add an action .
5494	Find the first action .
5495	Find first slot matching parameters
5496	Registers a signature .
5497	Register an action .
5498	Expect arguments .
5499	Actual action .
5500	Replace wildcards .
5501	Check if the argument is an array .
5502	Determine if a method exists .
5503	Add a call .
5504	Get call count
5505	Registers a method .
5506	Register a value at the given time .
5507	Sets a value by value .
5508	Registers the given method .
5509	Expect arguments .
5510	Sets expected arguments .
5511	Set expected call count
5512	Set maximum call count .
5513	Set minimum call count .
5514	Expect a method call .
5515	Checks if a method is at least one of the given method .
5516	Register an error .
5517	Register an error .
5518	Invokes a method .
5519	Execute a call .
5520	Checks that the expectation is expected .
5521	Generate a mock instance
5522	Generate mock code
5523	Generate a subclass
5524	Generate a mock instance
5525	Creates the code for a class .
5526	Create the code for a subclass .
5527	Generates a new mock code .
5528	Creates the code for the given methods .
5529	Chain mocks .
5530	Chain mock expectations .
5531	Builds a chain of exceptions .
5532	Create code for overridden methods
5533	Paint a rectangle .
5534	Paint the results of a group .
5535	Divide a map of nodes
5536	Add a new frame
5537	Set a frame .
5538	Returns a list of frame focus names .
5539	Get the public name from the index .
5540	Set the focus by index .
5541	Set the focus .
5542	Clear the frame focus .
5543	Get all frames
5544	Returns the raw content of this frame .
5545	Returns the text of this frame .
5546	Get the transport error .
5547	Returns the current frame .
5548	Get the URL for this frame .
5549	Get base url
5550	Get request data
5551	Get the mime type .
5552	Get response code
5553	Get the current request .
5554	Get all headers
5555	Get all urls
5556	Returns the URL for the given ID .
5557	Tags all URLs with the given frame .
5558	Finds the form for the given method .
5559	Find a form element in the frame .
5560	Record an entry .
5561	Get parser .
5562	Parse a response .
5563	Loads a page
5564	Loads a frame
5565	Perform a HEAD request .
5566	Loads a given URL .
5567	Create a POST request .
5568	Create a PUT request .
5569	Delete a file
5570	Retrieve the page from the history .
5571	Retrieve the previous history .
5572	Authenticate user agent .
5573	Set a select field .
5574	Click submit button .
5575	Click submit button .
5576	Click submit button .
5577	Click an image
5578	Click image by name
5579	Click an image .
5580	Submit form by id
5581	Get link by label
5582	Click a link .
5583	Click a link .
5584	Click button .
5585	Check if a label is clicked
5586	Restarts the session .
5587	Get all cookies
5588	Sets cookies .
5589	Get the base cookie value .
5590	Sets the identity for the given realm .
5591	Fetch a response from a URL .
5592	Fetch a response from a URL .
5593	Fetch data from url
5594	Creates a request .
5595	Create a route .
5596	Invokes the given method .
5597	Create an error queue
5598	Add an error .
5599	Tries to tally the error .
5600	Returns the severity as a string .
5601	Paint the passed message .
5602	Paint failed message
5603	Paint an exception .
5604	Parses the given method .
5605	Paint the end of a method .
5606	Parses a group .
5607	Parses the group end of a group
5608	Called when a method is executed .
5609	Paint a group .
5610	Paint the test case .
5611	Paint a method node .
5612	Paint the assertion .
5613	Paint failure .
5614	Paint the case end .
5615	Paint the group end .
5616	Compares two nodes .
5617	Get total size
5618	Paint the header
5619	Paint failure .
5620	Extract coordinates from URL
5621	Chompose a URL
5622	Chompute path
5623	Parse the raw request .
5624	Set the coordinates
5625	Get the encoded request .
5626	Add a request parameter
5627	Returns the request as a string .
5628	Make absolute path .
5629	Extract absolute path .
5630	Get user identity .
5631	Paint the footer
5632	Remove trailing slash .
5633	Collect all files in a directory
5634	Handle a test .
5635	Paint an exception .
5636	Paint a failure .
5637	Paint the error .
5638	Checks if a test is invoked .
5639	Paint a group start .
5640	Paint the end of a group .
5641	Paint a test .
5642	Paint the end of a test .
5643	Make all reporters .
5644	Get the status of all reporters .
5645	Checks if the given test case is invoked .
5646	Create an invoker .
5647	Paints the end of a test .
5648	Paints the end of the report .
5649	Assign value to array
5650	Parses the given arguments .
5651	Add an explanation .
5652	Renders the overview .
5653	Returns the longest length of the given flag set .
5654	Render a set of flags .
5655	Parses the given response .
5656	Recursively walk the tree
5657	Create empty form .
5658	Add widget to form
5659	Index widget by id
5660	Collect select options
5661	Get attributes from a node
5662	Merges attributes into attributes .
5663	Removes quoted quotes .
5664	Collect frames from a node
5665	Returns the inner HTML of a node .
5666	Attach labels to widgets .
5667	Get type of value
5668	Describes the difference between two objects .
5669	Clips a string .
5670	Describes the difference between two values .
5671	Describes the difference between two strings .
5672	Describes the difference between two values .
5673	Describes the difference between two arrays .
5674	Check if two keys are equal .
5675	Describes the difference between two objects .
5676	Get the members of an object .
5677	Returns the difference between two strings .
5678	Extract response from response
5679	Set the default response .
5680	Get the text .
5681	Checks if a link is absolute .
5682	Returns a list of all frames in this frame .
5683	Get all URLs
5684	Get url by id
5685	Get the url from a link .
5686	Expand a URL to an absolute URL .
5687	Get form by selector
5688	Get form by image
5689	Get form by id
5690	Normalise HTML .
5691	Get the HTML for the page .
5692	Sets the edit button .
5693	Creates a form field .
5694	Displays the form .
5695	Save form data
5696	Get the form action action from the request .
5697	Sets the disabled fields for this field .
5698	Sets the disabled fields for this field .
5699	Finds a form action by its name .
5700	Get default button list
5701	Create a field list
5702	Check if a custom action is allowed .
5703	Bind GridField to GridField
5704	Returns the form field .
5705	Check if the record should be displayed .
5706	Check if the record should be displayed .
5707	Get the link for this action
5708	Transform this field to a button .
5709	Get button name .
5710	Returns the HTML for the button .
5711	Generates the button for this button .
5712	Add new item
5713	Update the edit form .
5714	Filter the field list .
5715	Saves a new record and adds it to the page .
5716	Saves the data and redirect to the page .
5717	Publish and add new data
5718	Publish and close the page
5719	Cancel the request
5720	Redirect to the next record
5721	Saves the previous record to the previous page .
5722	Saves an object .
5723	UnPublish this record .
5724	Get the top level controller .
5725	Save the form and redirect to the form
5726	Check if the record is published .
5727	Determine if the record is deleted .
5728	Sets the dropdown field .
5729	Binds the GridField to the form .
5730	Gets the HTML for the button .
5731	Get leagues .
5732	Get league information
5733	Get team teams
5734	Get league matches
5735	Get all matches for a team
5736	Get show parameters
5737	Select the renderer .
5738	Set default suffix
5739	Render the template .
5740	Log the duration of a request .
5741	Prefixed data .
5742	Get the parser for a content type .
5743	Parse content type .
5744	Returns the validation value for a given column .
5745	Get the debug trace string .
5746	Creates a form for creating a form .
5747	Validate where clause
5748	Removes last chars from a string
5749	Walk an array into a string
5750	Set the roles .
5751	Deletes a role by its primary key .
5752	Get all roles
5753	Returns a list of role IDs for the given roles .
5754	Sets the index filter .
5755	Executes a SELECT query .
5756	Returns a QueryBuilder with the given roles .
5757	Returns an array of permissions .
5758	Get the FROM clause .
5759	Build a permission .
5760	Get all permissions .
5761	Delete a permission .
5762	View view view .
5763	Get filter field value
5764	Dispatches the index reset view .
5765	Displays an admin view .
5766	Clears the mailer .
5767	Create a PHPMailer instance
5768	Add a column
5769	Sets the SQL statement .
5770	Get administrator administrator .
5771	Checks if a role has a given role .
5772	Get the roles string .
5773	Checks if the current user is Updatable .
5774	Check if the user is deleted .
5775	Lists all objects in the database .
5776	Add a SQL statement
5777	Adds a null value to the query .
5778	Set the SQL statement
5779	Get the first result of the query .
5780	Sets the navigation .
5781	Get the section for the given section .
5782	Handles a GET request .
5783	Enter event and notify event
5784	Route update operation .
5785	Add a column
5786	Handle a database record .
5787	Route get logout
5788	Execute the query
5789	Set validation rules .
5790	Set default value
5791	Determine if the permission is deleted .
5792	Set the constraints .
5793	Adds a constraint to a column .
5794	Add boolean values to the column values .
5795	Inserts a row into the table .
5796	Slimf middleware .
5797	Get route name .
5798	Route index .
5799	Returns an array with all admin roles
5800	Delete an administrator .
5801	Get delete cell
5802	Lists all permissions .
5803	Set whitelist .
5804	Checks if the value is valid .
5805	Increments the counter .
5806	Validate the field .
5807	Called when a custom tag is written .
5808	Deletes the Fusion tag .
5809	Update the search form .
5810	Update the searchable fields .
5811	Update the field fields .
5812	Sets the tags for the model .
5813	Gets the field s fields .
5814	Validate the Fusion tag .
5815	Called when the plugin is written .
5816	Called when a tag has changed .
5817	Returns a list of tag types .
5818	Update the tags for a Fusion object .
5819	Create alert alerts for given type .
5820	Transform files .
5821	Write data to container
5822	Render flash alert .
5823	Resolve options .
5824	Set HTTP method
5825	Encode the request .
5826	Set the encoding .
5827	Build url .
5828	Creates a new request .
5829	Create a new request .
5830	Prepare request .
5831	Execute a request
5832	Creates an instance of the response object .
5833	Convert a header into an array
5834	Set the status code
5835	Clear expired cache entries .
5836	Handle a request .
5837	Transform an object to an array
5838	Transform a URL into a URL .
5839	Trims the given string .
5840	Crops the image .
5841	Add a role
5842	Add additional fields to the task .
5843	Validates additional fields .
5844	Save additional fields .
5845	Executes the image resizer .
5846	Sends a message to syslog
5847	Sanitizes a file name
5848	Populate metadata .
5849	Builds the module content .
5850	Builds the form .
5851	Add toolbar buttons .
5852	Process data .
5853	Load virtual table
5854	Persist Flex Form
5855	Adds statistics and social link to Twitter .
5856	Initialize rulesets .
5857	Translates a string to a locale
5858	Notify notification .
5859	Get all the directories .
5860	Get all file types .
5861	Compiles the ruleset .
5862	Expands the ruleset .
5863	Expand the conversion mapping .
5864	Get directory pattern .
5865	Report additional storage claims .
5866	Get indexer .
5867	Get the orientation of a file .
5868	Extract metadata from a file .
5869	Create virtual storage object .
5870	Get basic metadata
5871	Converts a rational number to a decimal .
5872	Returns the transformation .
5873	Checks if a file is transparent .
5874	Checks if file is animated GIF file .
5875	Add image to container
5876	Get image file extensions
5877	Find an existing file .
5878	Update the metadata for the given file .
5879	Creates a new index .
5880	Access protected property .
5881	Process upload action
5882	Read a byte from a JPEG file .
5883	Called before the query .
5884	Normalize the order .
5885	Render dropdown .
5886	Resolve a TSDNS host
5887	Get icon name
5888	Get the class name .
5889	Get the HTML representation of this object .
5890	Filter a list of nodes
5891	Get permission type .
5892	Parse a log entry
5893	List audio templates .
5894	Retrieve an audio template .
5895	List image templates .
5896	Retrieve an image template .
5897	List video templates .
5898	Retrieve a video template .
5899	Returns a list of Functionalities .
5900	Retrieve a Functionality .
5901	List all groups .
5902	Retrieve a group .
5903	Retrieve the current user .
5904	List all roles .
5905	Retrieve a role .
5906	List account settings .
5907	Retrieve a single setting .
5908	List users .
5909	Retrieve a user .
5910	Create a new setting .
5911	Create a new user .
5912	Update a user .
5913	Add a user to a group .
5914	Update the last login attempt .
5915	Send password reset password
5916	Reset password
5917	Update a setting .
5918	Set secret key
5919	Sets the created date .
5920	Set the updated date .
5921	Get property by system name .
5922	Set property sets .
5923	Add a property set .
5924	Set filter items .
5925	Add a filter item
5926	List categories .
5927	Retrieve a category .
5928	Create a new category .
5929	Update a category .
5930	Remove a category
5931	Set the definition .
5932	Sets the end date .
5933	Sets the start date .
5934	Set the last login .
5935	Set the groups .
5936	Add a group
5937	Set the functionalities .
5938	Add a function to the list of functionalities .
5939	Set extra data .
5940	Add extra data
5941	Connect to Ts3 .
5942	Read data from the stream
5943	Fetch object from node
5944	Get a list of filters for a specific category .
5945	Fetches a freet text .
5946	Get a list of properties for a given system name .
5947	Get adapter type .
5948	Wait for read read
5949	Set the results .
5950	Add a media response .
5951	Add a folder response
5952	Sets the slide .
5953	Get channel list
5954	Create a new channel
5955	Get channel permissions
5956	Get a list of permissions for a channel .
5957	Get channel by name
5958	Get a client by its ID
5959	Get client by Uid
5960	Get a client by its ID
5961	Get server group by name .
5962	Get server group permissions
5963	Get server groups
5964	Get a channel group by its ID
5965	Get a list of permissions for a channel group .
5966	Reset the user s permissions
5967	Get temporary password list
5968	Sort group list .
5969	Sort file list
5970	Get the accounts controller
5971	Get the categories controller
5972	Get the deployment controller .
5973	Get the events controller
5974	Get filters .
5975	Get the folders
5976	Get Media Controller
5977	Get Moodboards controller
5978	Get objecttypes
5979	Get the propertysets controller
5980	Get socialmedia controller
5981	Builds a base URL from a URL .
5982	Get client .
5983	Set OAuth2 middleware
5984	Update credentials .
5985	Sets the access token .
5986	Get the access token .
5987	Sets the date range .
5988	Sets the updated date range .
5989	Set property criteria .
5990	Add a propertyCriteria .
5991	Sets the deployment date range .
5992	Sets the sort fields .
5993	Add a search sort .
5994	Set the subFolders .
5995	Add a folder response
5996	Sets the saved search .
5997	Sets the minimum value .
5998	Set the maximum value .
5999	Sets the protocol .
6000	Set image images .
6001	Add an image template
6002	Set the video templates .
6003	Add a video template .
6004	Set the categories .
6005	Add a category response
6006	Convert char to unicode
6007	Creates an instance from a hexadecimal string .
6008	Initialize file transfer .
6009	Sets the deleted date .
6010	Set date range
6011	Set comments .
6012	Add comment response
6013	List all protocols .
6014	Retrieve a protocol .
6015	Retrieve a DeploymentSite
6016	Create a new DeploymentSite
6017	Update a DeploymentSite
6018	Add media to deployment site
6019	Remove a site .
6020	Remove media from deployment site
6021	Set API key
6022	Make a request
6023	Make a curl request
6024	Set the metadata .
6025	Add meta data
6026	Sets the mime type .
6027	Set the uploaded file .
6028	Set the deployed files .
6029	Add a DeploymentFile
6030	Sets the childMedias .
6031	Add an item to the list
6032	Returns the deployed file with the given template id .
6033	Returns the metadata for the given section .
6034	Sets the mime type .
6035	Set commands .
6036	Add a command .
6037	Initialize the options
6038	Initializes the transport
6039	Create a custom event .
6040	Downloads events .
6041	Search for events .
6042	Create a session .
6043	Add a media usage .
6044	View an event .
6045	Render items .
6046	Register the plugin .
6047	List object types .
6048	Retrieve object type .
6049	Set properties .
6050	Add a property response
6051	List all folders .
6052	Retrieve a folder .
6053	Retrieves the parents of a folder .
6054	Create a new folder
6055	Add media to folder
6056	Update a folder .
6057	Remove media from folder
6058	Remove a folder
6059	Retrieve a media .
6060	Retrieve a file data
6061	List all deployments .
6062	Downloads a media file .
6063	List all folders
6064	List all mediaboards
6065	List all social media files .
6066	List social media
6067	List the media usage .
6068	List media versions .
6069	List comments .
6070	Download an archive .
6071	Uploads a file to a file .
6072	Update a media .
6073	Group media group .
6074	Restore a media .
6075	Sets a status .
6076	Upload a preview to a media file .
6077	Uploads a new version of a file .
6078	Create a comment .
6079	Combine multiple slides
6080	Update media .
6081	Remove a media .
6082	Remove a comment .
6083	Upload a file .
6084	Upload a new version .
6085	Retrieve a Moodboard .
6086	List all Moodboard templates .
6087	Retrieve a Moodboard template
6088	Create a Moodboard .
6089	Update Moodboard .
6090	Add media to Moodboard
6091	Remove a Moodboard .
6092	Remove media from moodboard
6093	Get a section from a string
6094	Checks if the string is UTF - 8
6095	Assign a permission to the client .
6096	Get the members of the client
6097	Get a GET request .
6098	Perform a POST request .
6099	Make a PUT request .
6100	Perform a DELETE request .
6101	List property sets .
6102	List property types .
6103	Request a command
6104	Wait for events
6105	Get the host .
6106	Get grid class .
6107	Get a list of permissions for a channel .
6108	Remove a client permission .
6109	Assign a permission to the channel .
6110	Get channel list
6111	Delete a channel
6112	Create a channel .
6113	Send a plugin command
6114	Get current version
6115	Get server port by id
6116	Get a server by name
6117	Get a server by uid
6118	Create a new server
6119	Delete a server
6120	Start a server .
6121	Get a permission by name
6122	Get a permission by its ID
6123	Login to client
6124	Logout user .
6125	Set the roles .
6126	Add a role
6127	Sets the expire date .
6128	Returns the text of the spacer class .
6129	Get Title Title
6130	Get the name of the current user .
6131	Get the suffix of the server .
6132	Get suffix flag
6133	Get an image
6134	Set the metadata .
6135	Perform a search .
6136	Search for folders .
6137	Perform a search .
6138	Parse a URI string .
6139	Check if a URI is valid
6140	Check if the user is valid .
6141	Check if the password is valid
6142	Check if path is valid
6143	Check if the URI is valid
6144	Checks if the given key exists .
6145	Check if the URI is valid
6146	Set the status code .
6147	Send response headers
6148	Set body body
6149	Send JSON response
6150	Set json body
6151	Redirect to the response .
6152	Renders the form
6153	Set property type
6154	Sets the value of the property .
6155	Converts the given value to a date .
6156	Redirect to a URL
6157	Redirect to current page
6158	Renders a link .
6159	Creates a URL for the given action .
6160	Set properties .
6161	Add a property request .
6162	Start monitoring .
6163	Get memory usage
6164	Set the data
6165	Set options .
6166	Write progress .
6167	Write performance information
6168	Write assertion failure .
6169	Writes an exception .
6170	Handle an exception .
6171	Handle a failure .
6172	Set the configuration .
6173	Read data from a file
6174	Delete a file
6175	Adds the right join clause to the query .
6176	Returns a unique array of unique values .
6177	Execute delete .
6178	Calculates the sort order .
6179	Load all columns from the query .
6180	Writes a log message .
6181	Returns the severity for the given error code .
6182	Redirect to a given URL .
6183	Add a message
6184	Displays flash messages .
6185	Clear flash messages
6186	Render a template .
6187	Assign value to view .
6188	Render data .
6189	Render JSONP .
6190	Render JSON .
6191	Run the controller .
6192	Load routes .
6193	Load models .
6194	Load controllers .
6195	Find controller files .
6196	Check if url is active
6197	Parse route params
6198	Parse GET request
6199	Transform a route parameter
6200	Get current path
6201	Add a new route
6202	Validate method call
6203	Creates a new Airbrake instance .
6204	Handle an error .
6205	Notify exceptions .
6206	Notify the error handler .
6207	Set a value for a given key .
6208	Load data from array
6209	Notify an error .
6210	Notify notification .
6211	Clean backtrace .
6212	Convert array to node
6213	Filter the array .
6214	Initialize the request .
6215	Get the parameters .
6216	Convert realm name to slug .
6217	Converts a thumbnail URL to an ID .
6218	Get period start .
6219	Returns the period end time .
6220	Authorize an application .
6221	Set HTTP client .
6222	Returns the elevation of the given latitude .
6223	Get menuPresence .
6224	Remove directory .
6225	Set the path to the current path .
6226	Check if the service is valid
6227	Remove an item from storage .
6228	Go to the file .
6229	Get all available permissions .
6230	Get module permissions
6231	Get all available permissions .
6232	Set the pickup point
6233	Add a child element
6234	Apply access mode .
6235	Create directory .
6236	Try to find a storage path .
6237	Returns a list of options
6238	Write content to storage .
6239	Returns the extension for the given mimetype .
6240	Returns the mime type for the given extension .
6241	Normalize path components .
6242	Reload the cache .
6243	Determine if the current path is open .
6244	Get the list of permissions for a group .
6245	Get all the storage files .
6246	Iterate over all files .
6247	Iterate over all directories .
6248	Get all permissions .
6249	Prepare the list of permissions .
6250	Filter nested groups .
6251	Create a GroupPresence .
6252	Creates a new instance of an autrouped group .
6253	Normalize an ACLPresence .
6254	Fetch shipping labels
6255	Search for pickup points
6256	Search for pickup points by text
6257	Check if the user is authorized .
6258	Checks if the given user is authorized .
6259	Checks if the given user roles are allowed .
6260	Get controller name .
6261	Get action map .
6262	Get the prefix map .
6263	Returns the next key .
6264	Creates a new promise .
6265	Resolve a response .
6266	Reject an exception .
6267	Opens a file .
6268	Checks if the given text is a curriculum .
6269	Get the name of the academic domain .
6270	Checks if the given domain matches the given domain .
6271	Throw exception .
6272	Opens a file .
6273	Check if the database extension is available
6274	Get the value of a key
6275	Read data from the file .
6276	Reads an integer from the CDB file .
6277	Read a 32 - bit integer from the stream .
6278	Finds the given key .
6279	Returns the next key .
6280	Get next key
6281	Build a DNS Resolver .
6282	Build http client .
6283	Build a HttpClient .
6284	Build a HttpClient
6285	Shift unsigned integer to unsigned integer
6286	Returns the hash of a string
6287	Build a react request .
6288	Builds a response .
6289	Set theme .
6290	Get the current theme
6291	Load a theme .
6292	Find theme by directory
6293	Scan the themes .
6294	Find the path for the given directory .
6295	Parse theme info .
6296	Migrate asset config .
6297	Register the navigation .
6298	Add an item to the list
6299	Add item to bar
6300	Render menu .
6301	Get the main navigation .
6302	Get the navigation .
6303	Get active nav items
6304	Process the navigation .
6305	Returns the distance between this point .
6306	Register the given providers .
6307	Add a success message .
6308	Set an attribute .
6309	Drop a database .
6310	Get command .
6311	Get table information .
6312	Get tables .
6313	Load constraint constraints .
6314	Sets the referenced columns .
6315	Sets the update action .
6316	Sets the delete action .
6317	Execute a SQL query
6318	Execute a query
6319	Execute the query
6320	Get column by name
6321	Adds a constraint to the table .
6322	Parse configuration .
6323	Get attribute value
6324	Start the file
6325	Stop the file .
6326	Get class name without namespace
6327	Generate SQL statements for the table .
6328	Returns the SQL SQL for the table .
6329	Get column comments .
6330	Register an effect .
6331	Register PostProcessor .
6332	Creates a response .
6333	Checks if the given string is valid .
6334	Attach handlers .
6335	Create a flash message .
6336	Overlay a message .
6337	Parses an XML document .
6338	Creates a new instance of the adapter .
6339	Returns the stream for the given XML document .
6340	Returns the search form .
6341	Initialize the class .
6342	Get the value of the enum .
6343	Checks if the object is equal .
6344	Creates an iterator from an iterable .
6345	Filter an iterable by class name .
6346	Concatenates two arrays .
6347	Returns true if the iterator evaluates to true .
6348	Returns the index of the given iterator .
6349	Limit an iterator over the given iterator .
6350	Gets the value at the given position .
6351	Returns the size of an iterator .
6352	Creates a new PartitionIterator .
6353	Try to find the first element .
6354	Set fake time
6355	Set timestamp
6356	Convert a timestamp to a timestamp .
6357	Returns the timestamp of the timestamp .
6358	Set timezone .
6359	Returns a new IterableIterable .
6360	Returns a new IterableIterable .
6361	Converts a duration to a DateInterval .
6362	Convert a duration to a duration .
6363	Starts the profiler .
6364	Returns the order of nulls .
6365	Returns the order of the results of the given function .
6366	Computes the compound of this collection .
6367	Returns the minimum element of the given traversable .
6368	Parses a string into a decoded TAF file .
6369	Compose two functions .
6370	Creates a callable for the given map .
6371	Add a classname
6372	Append another IteratorAggregate .
6373	Filter the collection by class name .
6374	Concatenate and concatenate all iterables .
6375	Get the first element .
6376	Returns a new IterableIterable .
6377	Converts the collection to an array .
6378	Read a store record .
6379	Read records from store
6380	Read an attempt .
6381	Reads the question attempts .
6382	Read all questions from a quiz .
6383	Reads the attempt_completed record .
6384	Reads the questions for a given feedback item .
6385	Read a course .
6386	Read a user .
6387	Read a discussion .
6388	Read a site .
6389	Reads a facetoface session
6390	Reads all the signups for a given session .
6391	Reads the scorms track for a given user .
6392	Creates a reverse order .
6393	Runs a callable .
6394	Runs a TryToFinally .
6395	Initializes the directory .
6396	Run the runnable .
6397	Add evolution to the entity .
6398	Instantiate an entity .
6399	Creates an array of events .
6400	Initializes the class map .
6401	Returns the file path for the given resource .
6402	Register the error handler .
6403	Checks if the date is valid .
6404	Propagate an exception if the given exception is an instance of the given exception .
6405	Consume the remaining tokens .
6406	Force script cache .
6407	Filter an iterable over the given predicate .
6408	Filter an iterable by class name .
6409	Creates a new IteratorAggregate .
6410	Concatenates multiple iterables .
6411	Returns true if the given iterable matches the given predicate .
6412	Returns true if all elements of the given iterable .
6413	Transform an iterable into an iterable .
6414	Limit an iterable over the given iterable .
6415	Get a value from an iterable .
6416	Returns an iterable over the given iterable .
6417	Returns the size of an iterable .
6418	Checks if iterable is empty .
6419	Starts the stopwatch .
6420	Stop the stopwatch .
6421	Returns a function that returns true if the given predicate evaluates to true .
6422	Get the menu
6423	Checks if the client is configured
6424	Get Google API client
6425	Get login URL .
6426	Completes a login .
6427	Get user profile
6428	Get Facebook object
6429	Get login URL .
6430	Attempt to complete a login .
6431	Get user profile
6432	Remove a display field .
6433	Get serialize vars
6434	Get login URL .
6435	Complete authentication .
6436	Get user profile information .
6437	Get the login URL .
6438	Completes the authentication .
6439	Get Twitter profile
6440	Transform a route .
6441	Get social login object
6442	Get all resources .
6443	Perform HTTP request
6444	Get the linked client
6445	Get login URL .
6446	Complete login .
6447	Get user profile
6448	Get best language match .
6449	Compare AcceptLanguage headers .
6450	Get the language values from the headers .
6451	Check if the session is logged in .
6452	Finds labels for a given text .
6453	Create a new HTTP body .
6454	Creates an exception for the given type .
6455	Checks if the input is valid .
6456	Assert that the element is selected .
6457	Redirect to the given URI .
6458	Writes a JSON response to the response .
6459	Fill the field with the given field .
6460	Click a radio button .
6461	Check if the image has a thumbnail .
6462	Add a header value .
6463	Try to get the first item from the cache .
6464	Determine if the response is a json .
6465	Checks if a multipart request is multipart .
6466	Creates a default boundary .
6467	Creates a stream from a string .
6468	Parse AcceptCharset header .
6469	Parse Accept header .
6470	Parse AcceptLanguage header .
6471	Parse content type header .
6472	Returns the best encoding for the given media type .
6473	Compare AcceptCharset headers .
6474	Renders the accepted AcceptCharset headers .
6475	Reads a form input from the body .
6476	Read the body as JSON .
6477	Read a multipart body from a multipart body .
6478	Checks if the given encoding is supported .
6479	Get client IP address .
6480	Returns the value of the cookie header .
6481	Returns the default content negotiation result .
6482	Asserts that there is no error messages .
6483	Filters a path .
6484	Filter query string .
6485	Check if the connection is a standard port .
6486	Create a request from the superglobals .
6487	Creates a HttpHeaders from a superglobals .
6488	Get client IP address .
6489	Add a header value .
6490	Get Drupal selectors .
6491	Get editor instance
6492	Gets the best media type match .
6493	Compare Accept media types .
6494	Rank accept media type headers .
6495	Visit a page .
6496	Get current id
6497	Switch to the current window
6498	Sets the screen resolution .
6499	Runs before step .
6500	Handles the after step .
6501	Returns the request target .
6502	Parse query string .
6503	Produces a message .
6504	Serialize parameters .
6505	Deserialize parameters .
6506	Serialize the return value .
6507	Deserialize the return value .
6508	Stop the job .
6509	Create handlers for the given job .
6510	Init handler .
6511	On deserialize event .
6512	Update the job .
6513	Copy a job to another job .
6514	Invokes the given job .
6515	Consume a message .
6516	Registers the registry .
6517	Set parameter type .
6518	Creates a new instance from a DateTime object .
6519	Unfreeze the message .
6520	Populate default value
6521	Register SMS gateway .
6522	Check if this field is compatible with another field .
6523	Check if this field is compatible with another .
6524	Get handler method name
6525	Create a new message .
6526	Resolve the given schema ID .
6527	Resolve the given type .
6528	Registers a map of classes .
6529	Find a schema by mixin .
6530	Find all messages for a mixin .
6531	Apply the analyzer .
6532	Builds the params for a message .
6533	Get a connection factory .
6534	Renders the error .
6535	Hydrate a property .
6536	Retrieves the data from the database .
6537	Register asset files .
6538	Initializes the panel .
6539	Transforms an iterator to an array .
6540	Loads data from the given identifier .
6541	Fetch one row from the database .
6542	Returns the current model .
6543	Get the current element .
6544	Get the current sharding key .
6545	Creates a new ExcelExcel instance
6546	Returns the content of the given sheet .
6547	Close the file .
6548	Returns the content of the current sheet .
6549	Add data to sheet
6550	Get the current value .
6551	Send a message
6552	Lock the process .
6553	Unlock the pid file .
6554	Remove line from file
6555	Stop the server .
6556	Log a message .
6557	Map the log level to the log level .
6558	Sets slug .
6559	Get phone number
6560	Split a path .
6561	Get relative path .
6562	Join path .
6563	Get data for a carrier
6564	Loads a class .
6565	Register class loader .
6566	Make a request .
6567	Get SMS link
6568	Create migration file .
6569	Unset all headers
6570	Get message .
6571	Returns the path for the given id .
6572	Register commands .
6573	Traverses the given path .
6574	Check if session is valid .
6575	Get session cookie .
6576	Stop the session .
6577	Returns a list of countries .
6578	Parse a URL .
6579	Set the parts of the request .
6580	Creates a new instance of a vector .
6581	Translate the given shift .
6582	Get session data .
6583	Creates a new random number of elements .
6584	Calculate the sum of n elements .
6585	Perform a callback .
6586	Execute curl request
6587	Set an option .
6588	Get a GET request
6589	Create a POST request
6590	PUT PUT request
6591	Parses the given type .
6592	Checks and returns a list of busters
6593	Parses the bluster tags .
6594	Get the documentation for a method .
6595	Get the comments of a method .
6596	Returns the summary of the lines .
6597	Returns the description of the given lines .
6598	Extracts the parameters from a comment .
6599	Get the type of the return type .
6600	Unlink all files
6601	Builds the url .
6602	Make the credentials .
6603	Make request token .
6604	Make an access token .
6605	Validate request token response
6606	Validate access token response .
6607	Get all records
6608	Get all provider records .
6609	Get id by field
6610	Get records by start date
6611	Returns the first error for the given attribute .
6612	Get dropdown map
6613	Get all settings .
6614	Validate settings .
6615	Checks if a method exists .
6616	Get endpoint result
6617	Map request parameters to array
6618	Parse endpoint name .
6619	Checks if the given controller name exists .
6620	Get a child controller
6621	Set the submenu .
6622	Add custom styles .
6623	Parse a response .
6624	Process a request .
6625	Put data into cache .
6626	Process a request .
6627	Get response data
6628	Get a value from the response .
6629	Authenticate the user .
6630	Callback for authentication .
6631	Get authentication URL .
6632	Request an access token .
6633	Request a profile .
6634	Parse the profile response .
6635	Bootstrap application .
6636	Initializes the language .
6637	Initializes the view parameters .
6638	Initialize the container .
6639	Initializes the navigation .
6640	Get container route route .
6641	Initialize the model .
6642	Encodes an ID .
6643	Decodes a hash .
6644	Get the status of a status .
6645	Formats a phone number .
6646	Authenticate the user .
6647	Callback for callback .
6648	Create database tables .
6649	Upload file .
6650	Unlink a file
6651	Append extra fields .
6652	Add extra data
6653	Remove extra data .
6654	Get request token .
6655	Normalize headers .
6656	Go through the controller
6657	Creates a failure response .
6658	Serialize the message .
6659	Get the list of endpoints
6660	Get controller controllers .
6661	Get controller method .
6662	Get a GET request
6663	Perform a POST request
6664	Instantiate the social information .
6665	Parse Facebook profile .
6666	Set body data
6667	Prepare the response .
6668	Output the response .
6669	Set movie params
6670	Get rating rating
6671	Restart rating .
6672	Restarts all ratings .
6673	Update rating .
6674	Restart the current rating
6675	Add meta boxes
6676	Render meta boxes
6677	Returns the relative time between two dates .
6678	Get date range
6679	Convert a date string to a string
6680	Get date time
6681	Called when the action is executed .
6682	Set security headers
6683	Sends success response .
6684	Send error response .
6685	Sends an error response .
6686	Show flash messages .
6687	Merge flash messages .
6688	Check if the request is post check
6689	Sets session and redirect url
6690	Check if the user can access to the user .
6691	Add a route .
6692	Adds a group to the middleware stack .
6693	Sort array by position
6694	Applies the active menu to the menu .
6695	Apply visibility to nav
6696	Hide method .
6697	Check if method is hidden
6698	Compare two versions .
6699	Set the build .
6700	Set pre - release pre - release
6701	Parses a string .
6702	Computes the precedence between two arrays .
6703	Get the signature of the given URL .
6704	Returns the base URL for the request .
6705	Get the writer factory .
6706	Before update .
6707	Handles the event .
6708	Get the reader factory .
6709	Sets the actual parameters .
6710	Parses headers .
6711	Convert url to parameters
6712	Convert string to array
6713	Get parameter by key
6714	Get request chain .
6715	Extracts the format from a request .
6716	Get the request chain from a URI .
6717	Set new parameters
6718	Set a parameter .
6719	Handle authorization response .
6720	Authorize the authorization code .
6721	Handle token response .
6722	Fetch access token
6723	Validate auth params
6724	Validate token params
6725	Get access token
6726	Get movie votes
6727	Set movie votes .
6728	Set the total votes
6729	Set movie rating
6730	Set the vote for a post .
6731	Get posts .
6732	Process message .
6733	Run the request .
6734	Handle exception .
6735	Get a middleware by name .
6736	Instantiate a provider .
6737	Uninstall the model .
6738	Run the AJAX action .
6739	Set custom options
6740	Add custom rating .
6741	Convert this request to a target .
6742	Apply the parameter to the request .
6743	Checks if the given configuration is supported .
6744	Handle a server request .
6745	Apply the response encoding .
6746	Get the translation of the translator .
6747	Bootstrap the application .
6748	Handle the request .
6749	Transform a collection
6750	Returns the transformer class .
6751	Create the transformer class .
6752	Returns a callable for the given message .
6753	Install web server .
6754	Create folder if not already exists
6755	Create a copy of a file
6756	Creates a new application .
6757	Determine if the given data is a nested property .
6758	Get message from message .
6759	Process the registry .
6760	Build cache key .
6761	Find a model by its criteria
6762	Expand all models .
6763	Append collection to collection .
6764	Handle insert .
6765	Update the sale .
6766	Handle address change .
6767	Handle an address change .
6768	Update the content change .
6769	Handle a sale event .
6770	Handles the state change .
6771	Checks if a sale update is needed .
6772	Determine if the invoice country is changed .
6773	Determine if the given sale is updated .
6774	Determine the delivery country changed .
6775	Update the sale key .
6776	Update the sale information .
6777	Update VAT data .
6778	Update VAT display mode .
6779	Configure accepted sales .
6780	Updates the exchange rate .
6781	Update the locale .
6782	Set form parameters .
6783	Set header parameters .
6784	Build query string .
6785	Build the form data string .
6786	Build headers .
6787	Fix default customer group .
6788	Get customer group .
6789	Asserts that the given shipment is supported .
6790	Merges cached units into cache .
6791	Create a notification .
6792	Builds the notification .
6793	Gets the tag source column .
6794	Get tag count
6795	Converts a list of tags to an array of values .
6796	Gets the values for a tag .
6797	Convert a database row into an array .
6798	Installs the package .
6799	Install country code
6800	Install currencies .
6801	Install taxes .
6802	Install tax groups .
6803	Install tax rules .
6804	Install customer groups .
6805	Generate a new entity .
6806	Creates a formatter instance .
6807	Creates a new instance with the given context .
6808	Format a number .
6809	Format a number .
6810	Returns a string representation of the rates .
6811	Get date formatter .
6812	Returns a DateTimeFormatter instance .
6813	Get the number formatter .
6814	Get the currency formatter .
6815	Builds a CSV file .
6816	Checks if this adjustment is equal to another .
6817	Builds the adjustments for the given type .
6818	Write invoice lines to invoice .
6819	Write invoice shipping line .
6820	Write the taxes line .
6821	Compare two values .
6822	Gets the goods number for a given tax rule .
6823	Returns the shipment number for the given tax rule .
6824	Get the tax account number .
6825	Get payment account number .
6826	Get the unpaid account number for a given customer group .
6827	Check if an action is valid
6828	Get the delivery delivery address .
6829	Prioritizes an assignment .
6830	Move assignment to target unit .
6831	Synchronizes the given supplier item .
6832	Get supplier order item from event .
6833	Check if user has a role
6834	Gets the FindBySupplier query .
6835	Check if the invoice is forbidden .
6836	Checks if a customer is valid .
6837	Map a key to an object
6838	Map all data to the map
6839	Get object by key
6840	Get data by key
6841	Returns the cache for the given key .
6842	Produce a concrete object .
6843	Call a Closure .
6844	Call in class_name
6845	Returns a list of seconds .
6846	Returns an array of hours .
6847	Adjust the hour of the hour
6848	Get the days of a month .
6849	Returns a list of months .
6850	Returns a list of years
6851	Returns the fuzzy span for a given timestamp .
6852	Check if payment term is valid
6853	Process the status of the payment .
6854	Find payment tokens .
6855	Transforms a Sale .
6856	Calculate the equinox of the given year .
6857	Calculate the equinox of the given year .
6858	Calculates the solver for the given year .
6859	Calculates the solver of the given year .
6860	Calculate the horner .
6861	Convert a value to a default value
6862	Register the factory .
6863	Register the manager .
6864	Update total totals .
6865	Update customer balance .
6866	Check if the invoice type is forbidden .
6867	Retrieve Sale from invoice .
6868	Build invoice payments
6869	Build the invoice list .
6870	Build payment list .
6871	Initializes the shipping method .
6872	Initializes the shipment point .
6873	Builds the item for the given sale item .
6874	Finds an item from the shipping item .
6875	Execute a query
6876	Determine if the given order is available .
6877	Build the revenue data .
6878	Get the revenue query .
6879	Finish the view .
6880	Transforms a shipping address .
6881	Transforms an address .
6882	Formats a number .
6883	Get all available types .
6884	Check if given type is valid .
6885	Returns a list of addresses for a given postcode .
6886	Lookup postcode metadata for a postcode
6887	Perform a GET request .
6888	Create an error exception .
6889	Gets the order assignments .
6890	Remove an assignment .
6891	Create assignment assignments for given item .
6892	Resolves the quantity of a sale item .
6893	Sort assignments .
6894	Compare stock unit by price
6895	Compare stock units by eda .
6896	Set a key value
6897	Binds a key to the session .
6898	Removes an item from the cache .
6899	Regenerate session ID
6900	Close the session .
6901	Destroy the session .
6902	Returns the URL for the current page .
6903	Render the page .
6904	Run a wildcard .
6905	Remove recipient .
6906	Add extra recipient .
6907	Remove extra recipient .
6908	Add a copy .
6909	Remove a copy .
6910	Add an extra copy .
6911	Remove an extra copy .
6912	Add an invoice
6913	Add a shipment .
6914	Remove a shipment .
6915	Add an attachment .
6916	Remove an attachment .
6917	Checks if the message is empty .
6918	Checks if the amount of adjustments has been set .
6919	Get all adjustments .
6920	Validate an identity .
6921	Get a tax group .
6922	Set tax group .
6923	Builds the key for a tax group .
6924	Get FindOneBySaleQuery
6925	Gets the query by country and weight .
6926	Checks if the resource is a state change .
6927	Send notification .
6928	Persist invoice .
6929	Check if the invoice is valid .
6930	Purges the invoice .
6931	Fills the invoice invoice .
6932	Checks if the invoice amount is in the invoice .
6933	Transforms a Sale .
6934	Get the operator operator .
6935	Format a message .
6936	Finds units by subject and states .
6937	Checks if an item exists in the list .
6938	Finds the position of a StockUnit .
6939	Add an item to the list
6940	Remove an item from the list .
6941	Gets the purchase cost .
6942	Schedules the subject stock .
6943	Returns the localized day of a given week
6944	Register class instance .
6945	Watch the payment .
6946	Returns a query builder for a regular expression .
6947	Creates a query builder query builder .
6948	Set due parameters .
6949	Gets the query by country and customer .
6950	Get the query by country and business .
6951	Get base query builder .
6952	Checks if a sale item is covered
6953	Resolve price .
6954	Returns the grid for the given country .
6955	Get the taxes for the given shipping method .
6956	Calculates the total amount of items .
6957	Renders a list of tokens .
6958	Set forced redirect .
6959	Update the expiration date .
6960	Creates a new epoch from AstroDate
6961	Creates a Julian epoch .
6962	Creates a new epoch .
6963	Returns the date as a Date object .
6964	Returns the year .
6965	Checks if the identity is empty .
6966	Clears the identity .
6967	Calculates the gross lines .
6968	Calculates the cost of a given document .
6969	Calculates the discount line .
6970	Calculates the amount of shipments .
6971	Sync the result with the given result .
6972	Build an entity from the given data .
6973	Build field value .
6974	Build an association value .
6975	Checks if an adjustment is immutable .
6976	Schedule the sale content change event .
6977	Create a new gateway .
6978	Normalizes an attachment .
6979	Get the client
6980	Find address by expression
6981	Factory method .
6982	Validate input data .
6983	Validate and return errors .
6984	Extract the input from the given data .
6985	Creates a context object .
6986	Create default context .
6987	Fill the customer with the given customer .
6988	Finalize the context .
6989	Add a rate .
6990	Translate a api doc .
6991	Get locale with suffix
6992	Returns the cache key for the given user id .
6993	Returns the cache key for the given user role .
6994	PrePersist the uploadable .
6995	Parse Apple price matrix .
6996	Parse Apple price matrix
6997	Returns a list of viewers for the view .
6998	Prepare a record for a given relation .
6999	Returns the CSS classes for the container .
7000	Returns the URL of the request .
7001	Get the HTTP method .
7002	Set the action .
7003	Matches a route against a route
7004	Format the format
7005	Format date .
7006	Format the day name
7007	Format the date .
7008	Format the day name
7009	Format the day name
7010	Format the week number .
7011	Formats a string .
7012	Format the month name .
7013	Format the month
7014	Format the month number
7015	Format the year .
7016	Formats a string .
7017	Formats a string .
7018	Formats a time string .
7019	Formats the given time .
7020	Format the mini value
7021	Formats a string .
7022	Format the timezone
7023	Format the timezone
7024	Get the formatter instance .
7025	Add a remember me cookie
7026	Checks if the cookie is valid .
7027	Automatic login .
7028	Get default implementation of default implementation .
7029	Returns the messages for the given quantity .
7030	Converts the message to an array .
7031	Finds the shipping item item .
7032	Run a migration .
7033	Get the last migration .
7034	Save migrations .
7035	Create migration table .
7036	Drop migration table .
7037	Computes the dependencies of the given tables .
7038	Get shipments .
7039	Returns the shipping date for this shipment .
7040	Checks if the payment subject is different .
7041	Set payment state .
7042	Get scaffold config .
7043	Handle source table names .
7044	Get meta model names .
7045	Get column names from table
7046	Build customer data .
7047	Build address data .
7048	Format a phone number .
7049	Builds the goods lines .
7050	Builds the discount lines for the given document .
7051	Add a phone number .
7052	Logs the current user .
7053	Returns an instance of the class .
7054	Generate the message ID header .
7055	Returns the offset of the given Julian day .
7056	Calculate day of year
7057	Checks if the given key exists .
7058	Get stockAdjustment from an event .
7059	Add a class .
7060	Remove a class .
7061	Set the CSS classes .
7062	Update customer balance .
7063	Get accepted states .
7064	Check if payment is supported
7065	Get auth actions
7066	Get user rights
7067	Get the accounting from an event .
7068	Get the units .
7069	Check if a unit is valid
7070	Round the given value .
7071	Update the updated message .
7072	Get TicketAttachment from event .
7073	Checks if the given state is better .
7074	Adds the details of the sale details .
7075	Add item details .
7076	Add discount details .
7077	Returns a list of document types for a sale document .
7078	Checks if the given sale type is supported .
7079	Get all available types .
7080	Called when the order is done .
7081	Sets the order of the order .
7082	Set the URI of this request .
7083	Set the request method
7084	Delete a cookie
7085	Sets the default conditions for default options .
7086	Set the option label for default options .
7087	Load a password from a password .
7088	Set error action
7089	Set default headers
7090	Remove default headers
7091	Match the route .
7092	Add a new route
7093	Checks if the given invoice is valid .
7094	Loads a SaleItem
7095	Throws an exception if an item is immutable .
7096	Get a block by name .
7097	Normalizes stock units .
7098	Find stock units .
7099	Computes the ceiling comparison .
7100	Compare two units .
7101	Returns the classes for the given type .
7102	Converts a URI to a URL .
7103	Get query string .
7104	Converts a title to a string .
7105	Processes the final section
7106	Calculates total amount of payments .
7107	Round the given amount .
7108	Get the precision of a currency .
7109	Returns the rounding increment .
7110	Get Ticket from EventEvent
7111	Check if the given reason is valid .
7112	Checks if user is authorized .
7113	Check if url is allowed
7114	Checks if the given mode is better .
7115	Get query builder .
7116	Watch the payment .
7117	Get the FindBySubjectQuery instance .
7118	Returns the query for the available stock .
7119	Get the minEda by subject
7120	Gets the findBySubjectAndSupplier query .
7121	Creates query builder query builder .
7122	Detects and applies the current language .
7123	Update ticket .
7124	Get Ticket Message from EventEvent
7125	Checks if two addresses are equal .
7126	Copy the address to target .
7127	Returns the details of the address .
7128	Add ranges .
7129	Checks if the notification has a notification .
7130	Get notifications .
7131	Update the total taxals .
7132	Update the exchange rate .
7133	Get supplier order order .
7134	Find or create a new line .
7135	Get the percentage percentage .
7136	Merge margin .
7137	Read number from file
7138	Get the constraints for a step .
7139	Get the groups for a step .
7140	Handle the quantity change .
7141	Register the factory factories .
7142	Register actions .
7143	Sort assignments .
7144	Removes comments from blog .
7145	Add custom fields .
7146	Save custom user settings .
7147	Get user settings .
7148	Get the total amount .
7149	Calculates the amount of the adjustment .
7150	Clears the provider .
7151	Checks if the subject identity is equal .
7152	Copies the subject identity from the given identity .
7153	Add a rule .
7154	Check if a role matches the given role .
7155	Returns the date if the date is lower than the given date .
7156	Set the subject data .
7157	Set stock state .
7158	Compile the query .
7159	Compiles a keyboard .
7160	Builds the view view .
7161	Initializes the view .
7162	Builds the taxes view .
7163	Builds the view lines view .
7164	Builds the discounts for the given sale .
7165	Build a discount line .
7166	Build the shipping line .
7167	Get options resolver .
7168	Update a tab .
7169	Resolve the tax rule .
7170	Resolve target country .
7171	Resolve tax rule .
7172	Resolve shipping country .
7173	Resolve customer target .
7174	Get a value from an array .
7175	Set a path to an array .
7176	Extract array from array
7177	Returns the values of a given key .
7178	Check if type is valid
7179	Get the type .
7180	Returns a list of valid types .
7181	Generate a number .
7182	Generate payment key .
7183	Update the exchange rate .
7184	Gets the FindAvailableByCountryAndWeight query .
7185	Builds a new StockUnit instance .
7186	Get the combination of the given quantity .
7187	Gets an assignment by its id .
7188	Build a list of assignments .
7189	Copy an Adjustment .
7190	Copy a SaleAttachment
7191	Copy a Sale Notification
7192	Copy a SaleItem
7193	Copy properties to target .
7194	Get thumbnail file .
7195	Called when the shipment is ready .
7196	Handles a release change .
7197	Sets the first order of the order .
7198	Fix order customer .
7199	Assign a SaleItem recursively .
7200	Detach a SaleItem
7201	Get the unit .
7202	Get the total amount .
7203	Add a discount .
7204	Get the discount .
7205	Returns the base value of this unit .
7206	Add a tax adjustment .
7207	Finalizes the taxes .
7208	Rounds the amount of units .
7209	Creates a new amount from a gross amount .
7210	Get auto login URL .
7211	Validate login token .
7212	Generate a login token .
7213	Configure the invoice .
7214	Performs a debit .
7215	Fix default tax group .
7216	Get TaxGroup from EventEvent
7217	Get the list of classes .
7218	Create migration .
7219	Updates the migrations .
7220	Create a JSON response
7221	Create order label
7222	Clear the shipment .
7223	Clear a parcel .
7224	Execute curl
7225	Returns the result of the last response .
7226	Get information about curl info
7227	Sets the CURL option .
7228	Parse HTTP header .
7229	Create a curl request
7230	Get margin percentage
7231	Load the result from the result .
7232	Create a new price from a currency .
7233	Asserts that the sale class is valid .
7234	Asserts that the given SaleItem is valid .
7235	Asserts that the item adjustment is valid .
7236	Returns the country code for the given phone number .
7237	Fix the invoice for the invoice .
7238	Fix the delivery default delivery default .
7239	Get customer address from event .
7240	Resolve the given subject class .
7241	Get default classes .
7242	Validate the request .
7243	Display the description .
7244	Load options .
7245	Builds the remaining items from the shipping item .
7246	Checks if the given sale item is a stock .
7247	Purges the given shipment .
7248	Dispatch sales event .
7249	Validates the shipment method requirements .
7250	Validates the delivery address .
7251	Validates the customer .
7252	Validates that the payment term is valid .
7253	Get the shipment method from an event .
7254	Checks if the given state is better than the given state .
7255	Check if the user is logged in .
7256	Get user .
7257	Check if url is allowed
7258	Merges the results of a SaleItem
7259	Calculates the real base value for a Sale .
7260	Creates a new Adjustment .
7261	Assert the adjustment type .
7262	Asserts the adjustment mode .
7263	Converts a Sale object to an amount .
7264	Validate item .
7265	Returns a collection of models .
7266	Find model by id
7267	Checks if the model has a given model .
7268	Returns a collection of records for a given class .
7269	Returns the model for the given model .
7270	Saves the model .
7271	Delete this record
7272	Delete rows from database
7273	Get table name .
7274	Decode value .
7275	Encode value .
7276	Get table column names .
7277	Get the current time .
7278	Get the input value .
7279	Get the file .
7280	Validate input rules
7281	Forward the request .
7282	Get current request .
7283	Update customer group and currency .
7284	Set response status
7285	Initializes the invoice subject subject .
7286	Get all invoice invoices .
7287	Get the invoice for the invoice .
7288	Set column for links .
7289	Watch the order .
7290	Check if the given mode is valid .
7291	Get the query by method and state .
7292	Get a list of users by a meta key .
7293	Save the status of a post .
7294	Initiate a post .
7295	Sends a mail to the client .
7296	Get email addresses for email addresses .
7297	Modify the next group to the next group .
7298	Append the signature to the message .
7299	Add the sender to the sender .
7300	Loads a class .
7301	Get target targets for sale .
7302	Get available transitions .
7303	Update the customer .
7304	Update customer .
7305	Schedule parent change events .
7306	Get customer from event .
7307	Creates a new instance of this instance .
7308	Creates a new instance of a Julian day .
7309	Get the current time .
7310	Returns the solstice of the given year .
7311	Calculate the solstice for a given year .
7312	Calculate the equinox of the given year .
7313	Set the Julian date
7314	Sets the time and seconds .
7315	Set date time .
7316	Set the timezone .
7317	Returns the Julian day of this calendar .
7318	Convert the Julian calendar to a Julian day .
7319	Add a time to the day
7320	Calculates the difference between two times .
7321	Returns the day of the year
7322	Calculate the sidereal time .
7323	Check the status of a date
7324	Get component component
7325	Checks if cache is enabled .
7326	Configure taxable mapping .
7327	Configure the identity mapping .
7328	Configure the vatNumberSubjectMapping .
7329	Configure payment term .
7330	Configure subject relapping .
7331	Configure stock subject mapping .
7332	Configure stock unit .
7333	Gets the stock unit mapper .
7334	Gets the subjectIdentityMapper .
7335	Add mappings to the class
7336	Get stock subject subject mapping .
7337	Create a new TgLog instance
7338	Create event .
7339	Send a message to the chat .
7340	Send an attachment .
7341	Assert that the given resource is deleted .
7342	Schedule supplier content change event .
7343	Initializes the stock state .
7344	Check if the shipment type is allowed .
7345	Modify submitted value .
7346	Calculate the quantity of the given item .
7347	Calculates the delivery quantity of a delivery item .
7348	Watch the order .
7349	Checks if a notification is a notification .
7350	Initializes the payment subject subject .
7351	Check if payment is paid .
7352	Calculate the remaining amount .
7353	Gets the provider provider .
7354	Get the URL for the given subject .
7355	Check if given size is valid
7356	Check if format is valid
7357	Check if payment state is valid
7358	Load price map .
7359	Get the default price map loader
7360	Returns the amount in stock .
7361	Update the weight total .
7362	Update the total amount of total amount .
7363	Update payment total amount .
7364	Update invoice total amount
7365	Resolve outstanding date .
7366	Checks if the given item is valid .
7367	Checks the invoice integrity .
7368	Checks the shipment integrity .
7369	Update stock price .
7370	Set the translations .
7371	Displays the profile .
7372	Update the profile .
7373	Update the password .
7374	Check if a key exists .
7375	Clear the queue .
7376	Fetch value from bag
7377	Fetch a float value
7378	Returns a boolean value for a given key .
7379	Fetch a value from the cache .
7380	Get the value of a key .
7381	Get route .
7382	Converts an associative array into a SQL statement .
7383	Converts an array of values to a string .
7384	Generate string
7385	Uploads uploaded files
7386	Move file .
7387	Generate thumbnails from files
7388	Fetches the HTTP header .
7389	Get the response .
7390	Set 404 response .
7391	Assigns a block to this object .
7392	Serialize this object .
7393	Unserialize the object
7394	Replace all values in the block .
7395	Get property by name
7396	Updates the address .
7397	Set header .
7398	Set status code .
7399	Redirect to the given URL .
7400	Get form error data .
7401	Get errors from form
7402	Get config value
7403	Reload configuration file
7404	Convert PHP files into a FileUpload object .
7405	Assigns data to the block .
7406	Replace all values in the block .
7407	Serialize this object .
7408	Merge a block into another .
7409	Returns the value at the specified offset .
7410	Set an item in the container .
7411	Combine multiple keys .
7412	Change file mode
7413	Get the response .
7414	Read data from file
7415	Get error message .
7416	Get max file size .
7417	Set view content .
7418	Set JSON content
7419	Set redirect .
7420	Get number of routes
7421	Initializes the product media value for the given attribute .
7422	Renders alert block .
7423	Register widget .
7424	Render the menu .
7425	Set the source .
7426	Check if the source is valid
7427	Render embedding .
7428	Render object .
7429	Login form .
7430	Add a region .
7431	Gets the mime type .
7432	Guess the mime type .
7433	Export danger files .
7434	Get the contents of a directory .
7435	Scan files .
7436	Prepares the product media value for the product media .
7437	Handle fatal errors .
7438	Render an exception .
7439	Initializes the product media gallery value .
7440	Reload a module .
7441	Checks if the given action has access to the given action .
7442	Displays a group .
7443	Creates a new group .
7444	Creates a new group .
7445	Displays a group .
7446	Update a group .
7447	Decrypts a data from a string
7448	Encrypt the data using the given password
7449	Execute a command .
7450	Sets the queue .
7451	Bootstrap menu .
7452	Render the RTL .
7453	Renders the trail .
7454	Get the first term of a post .
7455	Get taxonomies .
7456	Ensure the directory exists .
7457	Persist all entities .
7458	Set background color .
7459	Set the color .
7460	Lookup user by hash
7461	Send password reset email .
7462	Get the content of the view .
7463	Render template .
7464	Creates a new user .
7465	Creates a new file from uploaded file .
7466	Move uploaded file .
7467	Add a color
7468	Colorize a string
7469	Parse a color .
7470	Creates a new user .
7471	Creates a new user .
7472	Reset password .
7473	Edit a user .
7474	Update user .
7475	Configure email helper .
7476	Get entities by identifier .
7477	Download file .
7478	Get form for given entity .
7479	Get file content
7480	Get the mime type .
7481	Sets the content of the file .
7482	Change encoding .
7483	Returns true if the string starts with the given string .
7484	Returns true if the string ends with the given string .
7485	Returns the character at the given index .
7486	Returns the index of the string in the string .
7487	Returns the last index of the string .
7488	Append string to string
7489	Inserts a string at the given offset .
7490	Reverse the string .
7491	Set the length of the string .
7492	Removes characters from the string .
7493	Trim the string .
7494	Trim the string .
7495	Convert a string to an icon .
7496	Creates a message from a template entity .
7497	Create a Swift message from a template file .
7498	Creates a message from a template .
7499	Render a string .
7500	Make a JSON request .
7501	Clear cache .
7502	Get a group by namespace .
7503	Render a tf template .
7504	Get tf text
7505	Assign a namespace .
7506	Set the doc string
7507	Returns the string of the current token .
7508	Set whitespace .
7509	Set identifiers .
7510	Add an error
7511	Parse a linebreak .
7512	Get next token .
7513	Get next token .
7514	Returns the next token .
7515	Returns the next position of the given needle .
7516	Expect a token .
7517	Parse text .
7518	Parse comment .
7519	Parse a doctype .
7520	Parse cdata tag
7521	Parses the text .
7522	Parse a style tag .
7523	Parse a tag .
7524	Parses all tags .
7525	Selects a query
7526	Parse a file
7527	Parses a node .
7528	Minify JavaScript .
7529	Dump the location of the tag .
7530	Returns a string representation of the attributes .
7531	Returns a string representation of this tag .
7532	Gets the HTML text .
7533	Set inner text
7534	Get plain text as plain text
7535	Delete this node .
7536	Detach this node .
7537	Clear all children .
7538	Get root node .
7539	Check if the given tag is parent .
7540	Returns the index of this node .
7541	Set the index of this node .
7542	Returns the index of this element .
7543	Get the sibling of this node .
7544	Get next sibling .
7545	Get the namespace
7546	Set the namespace
7547	Get the encoding of the document .
7548	Returns the number of children .
7549	Delete a child .
7550	Wrap a node in the tree .
7551	Checks if a given attribute exists .
7552	Get children by callback
7553	Match tags .
7554	Match conditions
7555	Checks if the conditions match the given conditions .
7556	Get children by attribute .
7557	Get children by tag
7558	Execute query
7559	Get a single row
7560	Parses the next comparison .
7561	Parses a sibling .
7562	Parses a pipe .
7563	Parses the token .
7564	Parse comparison .
7565	Parse callback .
7566	Parse a single condition .
7567	Parse adjacent conditions .
7568	Parses a single CSS query .
7569	Get the job api service
7570	Get application service
7571	Get a GET request
7572	Perform a POST request
7573	Validate required fields
7574	Checks if there is a required value
7575	Get custom fields
7576	Configure data
7577	Set file field value
7578	Configure data
7579	Configure default data
7580	Verify url
7581	Verify the data .
7582	Verify required data
7583	Extract info from curl request
7584	Extract response from curl response
7585	Get SDK endpoint registry
7586	Sets the destination path
7587	Extracts the file name .
7588	Set the file name
7589	Configure cURL options
7590	Render template .
7591	Render a badge .
7592	Set form class .
7593	Open a form tag .
7594	Render a label .
7595	Render the label .
7596	Render the help block .
7597	Renders a font .
7598	Render a Glyphicon .
7599	Renders an alert message .
7600	Renders a button .
7601	Render buttons .
7602	Renders an error message .
7603	Renders an element .
7604	Renders an addon .
7605	Set the translator .
7606	Render the dropdown container
7607	Renders the dropdown options
7608	Render list items
7609	Process the request .
7610	Create a new user .
7611	Create a new user
7612	Returns true if the user is superadmin .
7613	Send email reset token
7614	Update profile .
7615	Encode a bearer token .
7616	Authenticate app .
7617	Perform API request
7618	Get account by name
7619	Set permission set .
7620	Creates a signed query string .
7621	Checks if the given request url matches the requested resource .
7622	Sign request URL .
7623	Sign request headers
7624	Perform a request .
7625	Check if a blob exists .
7626	Check if a container exists .
7627	Creates a container if it exists .
7628	Get the ACL for a container .
7629	Set a container ACL .
7630	Get the metadata of a container .
7631	Sets the metadata of a container .
7632	Put blob data .
7633	Put a block in the container .
7634	Put a block list .
7635	Returns a list of block lists for a given blob .
7636	Gets a blob instance .
7637	Get the properties of a blob .
7638	Generates a shared access URL .
7639	Creates a resource name .
7640	Check if a container name is valid .
7641	Get error message .
7642	Get the base URL .
7643	Parse metadata headers .
7644	Parse metadata element
7645	Get storage client .
7646	Get file name .
7647	Opens a file .
7648	Close the file .
7649	Flush the file .
7650	Unlink a file .
7651	Rename a file .
7652	Stat the URL of a file .
7653	Opens a directory .
7654	Reads a directory .
7655	Add a new address
7656	Add a reply to the reply
7657	Send mail
7658	Close the connection .
7659	Append an address .
7660	Format an address
7661	Set wordWrap
7662	Create the message body
7663	Add an attachment
7664	Returns an array of MIME attachments
7665	Encode a file
7666	Encode QP .
7667	Check if inline image exists
7668	Returns a formatted RFC 8601 formatted string
7669	Get server variable
7670	Get the server hostname
7671	Initialize the archive .
7672	Loads a subfile as a template .
7673	Stores the store .
7674	Loads a store from the store .
7675	Retrieves the contents of a file .
7676	Loads the contents of a file
7677	Search for files within a given string
7678	Checks if there are no sheets .
7679	Merge field values
7680	Deletes a slide .
7681	Prepare cell text
7682	Determine if the extension should be used .
7683	Get the main entry index
7684	Delete all elements in the Txt
7685	Delete column elements
7686	Calculate column number
7687	Generate a cell reference
7688	Opens a rels file
7689	Prepare the Cype extension
7690	Get chart info from file
7691	Garbage collection
7692	Convert the XML to an explicit item .
7693	Checks if the given file is a valid sheet .
7694	Get the list of drawings
7695	Initializes the slide list .
7696	Clean up the text
7697	Search for all slides in the given string
7698	Checks if the given file is a valid slide
7699	Clean the text
7700	Initialize the header footer
7701	Get the page of the current page .
7702	Get the markup for the open doc
7703	Initialize the open doc
7704	Parses the MSExcel file .
7705	Get attribute position
7706	Apply diff from start to start
7707	Applies the given diff to the current position .
7708	Replace source with new source
7709	Get the inner string of the text
7710	Updates the parent tag .
7711	Delete the tag
7712	Finds the name of the token
7713	Find the end tag .
7714	Switch to relative position
7715	Find start tag by prefix
7716	Finds the first element of the given tag .
7717	Get file state
7718	Prepare conv
7719	Convert HTML string to HTML
7720	Update array
7721	Displays the website .
7722	Prints an error message
7723	Convert an object to an array
7724	Set a quickReplies object
7725	Creates a button .
7726	Add a postback to the button
7727	Send a login button .
7728	Sets the text of the text .
7729	Set quick replies .
7730	Perform API request
7731	Returns true if the given data is supported .
7732	Deserialize a DateTime object
7733	Handles the response .
7734	Checks if the method is a HydraOperation .
7735	Adds metadata and operations to the metadata .
7736	Creates the properties for the given class .
7737	Get the annotation of an element .
7738	Serialize an entity .
7739	Deserialize data .
7740	Validate an entity
7741	Add a new operation .
7742	Checks if the given operation is supported .
7743	Set the value of an entity .
7744	Get the value of the property .
7745	Findter for getter
7746	Find the setter .
7747	Find the adder and remove the adder .
7748	Checks if the given method is accessible .
7749	Returns all metadata for the given class name .
7750	Get the metadata for a given class .
7751	Loads the metadata for the given class .
7752	Complete the metadata for the given class .
7753	Serialize an object into a JSON string .
7754	Deserializes a serialized data into an object .
7755	Deserialize the data .
7756	Set property value
7757	Process data .
7758	Load mapping information .
7759	Determine the Mapping driver configuration .
7760	Detects the metadata driver .
7761	Validate mapping configuration .
7762	Returns the context for the given class name .
7763	Get the document documentation .
7764	Creates an array of operations .
7765	Generate the document properties .
7766	Get context
7767	Loads the metadata for a given class name .
7768	Validate input data .
7769	Checks if the rules are valid .
7770	Returns an array of messages .
7771	Returns the message for the given field .
7772	Replace message format .
7773	Validate the given value against the given rule .
7774	Checks if a rule is skip .
7775	Handle errors .
7776	Get rule arguments .
7777	Extract field aliases from data .
7778	Extracts input data from array .
7779	Extract rules from data .
7780	Validate a unique value
7781	Get message by key
7782	Initialize the timezone
7783	Register timezone script .
7784	Add a parser .
7785	Sets the statement class .
7786	Create a Statement
7787	Set the account class .
7788	Set the contra account class .
7789	Sets the transaction class .
7790	Set the opening balance class .
7791	Set the closing balance class .
7792	Creates a new instance of the given class .
7793	Get statements from the given text .
7794	Get account number .
7795	Parse statement body .
7796	Get account number .
7797	Get statement number .
7798	Parse the given text .
7799	Get the line from the given text .
7800	Split the statements into a string .
7801	Split the text into a list of transactions .
7802	Parse a statement .
7803	Parse a statement body .
7804	Parse balance .
7805	Get opening balance .
7806	Get the nearest date time from the given date .
7807	Get the closing balance .
7808	Sets the number of retries .
7809	Returns the debug report
7810	Get package version
7811	Filter an array with the given needle .
7812	Convert a date to a string
7813	Convert a date to a string
7814	Process request .
7815	Upload an image
7816	Set the event .
7817	Set the secret
7818	Create a callback
7819	Settle the source .
7820	Store a workflow .
7821	Update a pipeline .
7822	Refresh pipelines .
7823	Updates a workflow .
7824	Calculate the half of the width
7825	Get the total width of the line
7826	Returns the length of the pipe .
7827	Get spaced pipe .
7828	Get spaces by word .
7829	Returns the left border with the given border .
7830	Returns the right border with the given border .
7831	Returns the space of the core .
7832	Get spaces by core .
7833	Generate the current pipe .
7834	Get the pipes by option .
7835	Get the namespace namespace .
7836	Delete all files in a workflow
7837	Register the service .
7838	Create a contact
7839	Get contact information
7840	Add a phone number
7841	Remove a phone number
7842	Handle a job .
7843	Call method if method exists
7844	Get device device .
7845	Send a message
7846	Cancel messages .
7847	Get message info
7848	Check the configuration .
7849	Dispatch a command .
7850	Marshal the command .
7851	Get a parameter from the command .
7852	Dispatch a workflow .
7853	Resolve request .
7854	Delete the given files .
7855	Register the application .
7856	Publish configuration .
7857	Register all commands .
7858	Register the pipeline repository .
7859	Register the WorkflowRunners hook .
7860	Register commands .
7861	Draws the polyline
7862	Set the pipes of the given workflow
7863	Draws a character .
7864	Draws the beginning of the pipe .
7865	Draws a border .
7866	Draw border on border
7867	Draw a border .
7868	Replace UTF - 8 .
7869	Draw the border .
7870	Draw border .
7871	Draw the end of the pipe .
7872	Send a message
7873	Get credit card
7874	Checks the configuration .
7875	Settle repository if exists .
7876	Generate request .
7877	Setup logview .
7878	Register log filesystem .
7879	Register the logviewer .
7880	Register log view .
7881	Read a log file .
7882	Get log view
7883	Delete a log view
7884	Show log view .
7885	Get log data .
7886	Get the list of levels .
7887	Parses the log .
7888	Get log files .
7889	Create a Log instance from the given date .
7890	Get the default project hook .
7891	Trigger a project .
7892	Set a property .
7893	Adds a property to the collection .
7894	Parse data .
7895	Register a custom provider .
7896	Create a new Uploader instance .
7897	Create a provider instance .
7898	Determine the name of the query .
7899	Check if provider alias exists .
7900	Upload a file .
7901	Upload file .
7902	Get full file name .
7903	Creates a new upload to a file .
7904	Renders the sides .
7905	Renders the toggle button .
7906	Renders the menu .
7907	Get label .
7908	Render dropdown .
7909	Renders the search input .
7910	Initializes the UI .
7911	Register the plugin .
7912	Renders the toggle button .
7913	Render the input .
7914	Renders the label .
7915	Registers the close button .
7916	Initializes the options .
7917	Render the input .
7918	Generates a label group .
7919	Renders the input .
7920	Opens a zip file
7921	Extract the filename from the zip archive .
7922	Check if path is valid
7923	Extract the filename from the zip archive .
7924	Extract files from a zip file
7925	Register a plugin .
7926	Fire event listeners .
7927	Register a namespace .
7928	Unregister a namespace .
7929	Set default group
7930	Set collection .
7931	Append data to collection .
7932	Load data from a data array .
7933	Load data from array
7934	Check if the given name is already loaded .
7935	Send a message
7936	Get a list of available orders .
7937	Creates a backup FTP file .
7938	Get a backup file .
7939	Delete a backup file .
7940	Set backup FTP access block .
7941	Set the boot device .
7942	Add secondary domains
7943	Delete secondary domains
7944	Get IP range .
7945	Delete monitoring notification notification
7946	Get line properties
7947	Reset the DAM port .
7948	Requests a PPP login by id
7949	Update domain properties .
7950	Order a backend
7951	Order a cache rule
7952	Sets the reverse properties of an IP block .
7953	Get spam .
7954	Get spam stats
7955	Sets a block of IP address .
7956	Gets the services for the billing account .
7957	Get the properties of this object .
7958	Check if ipv6 is enabled
7959	Get the number of pairs
7960	Determine if the user can change or not .
7961	Determine if the port can be reset .
7962	Determine whether or not the properties can change .
7963	Set IP monitoring notifications .
7964	Get monitoring notification notification .
7965	Get VoiceConsumptions
7966	Get the properties of a billing account .
7967	Sets the properties of a billing account .
7968	Get all fax consumers
7969	Get VoiceConsumptions
7970	Delete blacklists
7971	Get incoming message
7972	Delete an incoming message .
7973	Purchase a domain .
7974	Get sender .
7975	Create sender .
7976	Add secondary DNS domains
7977	Delete secondary domains
7978	Set SSH key
7979	Get session properties
7980	Get session files
7981	Get session properties
7982	Add a delete task
7983	Add a restore task
7984	Get current monitoring
7985	Get available options
7986	Get all models
7987	Sets snapshot properties .
7988	Delete a snapshot
7989	Get the properties of a template .
7990	Get PCA services
7991	Set SSH key
7992	Sets the password for the cloud .
7993	Get disk usage
7994	Get a list of servers
7995	Get vps list
7996	Validate hash context .
7997	Get specification string
7998	Get OpenSSL encryption options .
7999	Identify target name .
8000	Calculate the NTL response .
8001	Calculate the challenge response .
8002	Resolve input string .
8003	Create a new exception .
8004	Create an exception .
8005	Calculates the offset of the payload .
8006	Creates a new exception .
8007	Validates the given algorithm .
8008	Creates a new exception .
8009	Processes a raw key .
8010	Expand a string to 64 bit integer
8011	Set the parity bit .
8012	Create an instance of a challenge message .
8013	Get basic options .
8014	Prepare command .
8015	Execute a PDF command
8016	Close the stream .
8017	Check if a file exists .
8018	Get the URL of the object .
8019	Get the S3 client
8020	Parse the content .
8021	Perform a POST request .
8022	Add a field
8023	Synchronize a closure .
8024	Destroy the semaphore .
8025	Add a free process .
8026	Remove a process .
8027	Kill all processes .
8028	Register a free process .
8029	Register a free process ID .
8030	Get a free process .
8031	Get process details
8032	Validates an array of dates
8033	Load HTML content .
8034	Build the attributes from LDAP .
8035	Checks if a group is a member of the group .
8036	Convert a number to a number .
8037	Convert a number to a number
8038	Find a single LDAP entry .
8039	Build event data .
8040	Build a list of event dates .
8041	Format calendar events to JSON format
8042	Calculate the length of the event .
8043	Processes a semaphore .
8044	Set process title
8045	Select a list of sockets .
8046	Check if the socket has data .
8047	Send data to the socket .
8048	Receive data from the socket .
8049	Create a calendar event .
8050	Get calendar event .
8051	Get all events
8052	Get all events as JSON
8053	Delete calendar event
8054	Update a calendar event .
8055	Generate a random number
8056	Set the child process title .
8057	Set the parent process title .
8058	Sets the worker pool size .
8059	Sets the semaphore .
8060	Create a worker
8061	Run a worker process .
8062	Destroy the worker pool .
8063	Reaper the process .
8064	Returns the number of available workers .
8065	Get next worker
8066	Collect worker results .
8067	Run a task .
8068	Connect to LDAP .
8069	Bind to LDAP .
8070	Get domain controller strategy strategy .
8071	Retrieve a user by credentials .
8072	Validate credentials .
8073	Perform a POST request .
8074	Perform a DELETE request .
8075	Handle response .
8076	Perform a POST request .
8077	Delete an endpoint
8078	Builds the URL for the given endpoint .
8079	Get error messages
8080	Returns a list of all the reports .
8081	Add an error message
8082	Add a message to the report
8083	Get form errors
8084	Clear errors .
8085	Add a predefined error
8086	Clean the console .
8087	Get database connection
8088	Generate a new user password .
8089	Encode a number
8090	Generate a unique identifier
8091	Checks the hash of a hash .
8092	Decode a number .
8093	Get a value from the collection .
8094	Set the value of a key .
8095	Add a cookie
8096	Destroy the cookie
8097	Validate the IP address
8098	Convert data to collection
8099	Validate all rules
8100	Validate the input .
8101	Get a row from the database
8102	Get a PDO statement
8103	Build query string
8104	Execute query
8105	Run a SQL query
8106	Get email body
8107	Get template variables .
8108	Get the review from the owner .
8109	Get field with default value
8110	Starts the site .
8111	Queue the next run .
8112	Merges the list of members of the group .
8113	Returns the next review date .
8114	Add a review to the comment .
8115	Advances the next review date .
8116	Checks if the user can be reviewed .
8117	Sets the default review date .
8118	Creates a form for review .
8119	Submit review .
8120	Check if a record is submitted .
8121	Get review content form
8122	Returns the review form for the given page .
8123	Save review .
8124	Find a record .
8125	Checks if the request is a schema request .
8126	Generate a schema response .
8127	Find a UserIdentity by email .
8128	Find by password reset token
8129	Displays the profile .
8130	Add suggestions .
8131	Removes the filter .
8132	Get the source context
8133	Set source code
8134	Render a block .
8135	Displays a block .
8136	Sets the cache strategy .
8137	Get cache filename .
8138	Get template class .
8139	Load a template .
8140	Create a template .
8141	Check if a template is fresh .
8142	Clear cache files .
8143	Get the lexer .
8144	Tokenize a string
8145	Get the parser .
8146	Parses the token stream .
8147	Get the compiler .
8148	Compile the given node .
8149	Compile a template
8150	Initialize the runtime .
8151	Determine if the given class is registered .
8152	Returns the extension for the given class .
8153	Remove an extension .
8154	Add a function .
8155	Add a global variable .
8156	Add a path .
8157	Prepend a path .
8158	Register a user .
8159	Get the status of the user .
8160	Confirm the user .
8161	Block the user .
8162	Unblock the user .
8163	Register the plugin .
8164	Render a template
8165	Compile the template .
8166	Write a string to the source
8167	Add indentation .
8168	Undent indentation .
8169	Register the autoloader .
8170	Recover the user s password .
8171	Render a template
8172	Get the content of the source
8173	Add a callable .
8174	Check if a loop usage condition is valid .
8175	Optimize print node .
8176	Recover the password .
8177	Send a welcome message .
8178	Send mail .
8179	Login user .
8180	Set default strategy
8181	Get default strategy .
8182	Returns the duration of this profile .
8183	Get memory usage .
8184	Get the peak memory usage .
8185	Get the parent template .
8186	Displays a block .
8187	Checks if a block has a block .
8188	Returns the names of the block names .
8189	Get the value of a variable .
8190	Register user .
8191	Confirm an activation token .
8192	Guess the name of a file .
8193	Get template file .
8194	Render a template .
8195	Checks if the given node is a constant .
8196	Collect all templates .
8197	Collect tokens from the iterator .
8198	Returns the next token .
8199	Parses a token .
8200	Returns the next token .
8201	Export a job .
8202	Register a command .
8203	Peek a job .
8204	Reserve a job .
8205	Get the stats for a job .
8206	 bury job
8207	Put a job into the queue .
8208	Get a Pheanstalk instance
8209	Parse command line arguments .
8210	Parse connection .
8211	Builds the command signature .
8212	Validate a file path .
8213	Render a job .
8214	Get the stats for a given tube .
8215	Get server stats
8216	Get next job .
8217	Get the query parameter
8218	Check if limit is allowed
8219	Get IP address .
8220	Returns the subnet of the given IP address .
8221	Get entity id
8222	Get the limit for a given action .
8223	Increment counter .
8224	Log rate limit .
8225	Handle registration .
8226	Validate registration .
8227	Log a registration .
8228	Checks if the number of users are allowed .
8229	Read a file
8230	Write data to file
8231	Get item by url
8232	Read configuration file .
8233	Generate a token
8234	Check if a token is expired .
8235	Validate token storage .
8236	Check server configuration
8237	Generate configuration .
8238	Output module configuration .
8239	Set the authenticated authenticator .
8240	Save reset tokens .
8241	Get all files in a directory
8242	Handle login .
8243	Attempt to authenticate a user .
8244	Login a user
8245	Abort an existing user .
8246	Get password encoder .
8247	Encode password .
8248	Check password policy
8249	Determine if the user has a password .
8250	Rehash password
8251	Check if user name is valid
8252	Log invalid login attempt .
8253	Handles the login page .
8254	Handle registration .
8255	Handle password reset .
8256	Initializes the provider .
8257	Start authentication .
8258	Finish authentication .
8259	Get resource attribute
8260	Save login info .
8261	Save after login .
8262	Check if the request is valid
8263	Handles the state mismatch .
8264	Handles an OAuth2 error response .
8265	Handles an OAuth resource error .
8266	Lock the file .
8267	Close the file .
8268	Opens the file .
8269	Read data from file
8270	Check if a lock is unlocked
8271	Get key encoder .
8272	Validates the configuration section
8273	Validates user data .
8274	Asserts that the username is valid .
8275	Handle an event .
8276	Trigger an event .
8277	Called when the config is loaded .
8278	Handles request URL
8279	Handle request file .
8280	Check if page is loaded
8281	Registers the Twig plugin .
8282	On page rendering .
8283	Resolve real url
8284	Initialize the session
8285	Check session timeout
8286	Load default config .
8287	Create the container
8288	Loads the auth modules .
8289	Handles auth routes .
8290	Check if the user is valid
8291	Logout user .
8292	Checks if the given URL is accessible .
8293	Error handler .
8294	Opens a transaction file .
8295	Opens the file .
8296	Write data to file
8297	Create the backup file .
8298	Remove the backup file .
8299	Add a rule .
8300	Handle an event .
8301	Handles the login page .
8302	Assert that the given key is an array .
8303	Asserts that the given key is a boolean value .
8304	Asserts that the given key is an integer .
8305	Asserts that the given key is greater than the given key .
8306	Assert that the given key is a string .
8307	Assert that the given key contains the given key .
8308	Asserts that the given key is a string .
8309	Asserts that the given key is not present .
8310	Standardize url format .
8311	Apply defaults to a configuration array .
8312	Handle password reset .
8313	Start password reset
8314	Finish password reset .
8315	Check if a reset link is expired
8316	Start password reset session .
8317	Send reset mail
8318	Sets the minimum length .
8319	Matches the given regexp against the given regexp .
8320	Get all captcha results
8321	Report a bad captcha .
8322	Get the load data
8323	Add a pingback to the server
8324	Get pingbacks
8325	Delete a pingback
8326	Send a request to the user
8327	Recognize a captcha .
8328	Get captcha result
8329	Adds a condition to the query .
8330	Connect to the server .
8331	Constructs a PDO PDO DSN string .
8332	Returns a list of sequence names .
8333	Returns the SQL for the SELECT SQL statement .
8334	Add a scope
8335	Remove a scope
8336	Set value mutator .
8337	Set the values
8338	Set the result of the query
8339	Get the contents of a file
8340	Set a configuration file
8341	Initialize the user .
8342	Add data table
8343	Initialize all routes .
8344	Run the controller
8345	Initialize a namespace .
8346	Add a route
8347	Check if the given post is editable .
8348	Set the value .
8349	Returns an array of constants .
8350	Send mail to SMTP .
8351	Converts a tree to SQL level .
8352	Handle a signal .
8353	Shutdown the process .
8354	Build an enum .
8355	Build model .
8356	Generate models .
8357	Extract domain domain .
8358	Get a nice URL .
8359	Returns a list of dashboards .
8360	Start the queue .
8361	Initializes the translations .
8362	Register translations .
8363	Translate a key
8364	Set current language
8365	Create post timeline entry .
8366	Registers a mapping .
8367	Get mapping by name
8368	Validate configuration .
8369	Show the archive .
8370	Perform the mail .
8371	Shutdown the queue .
8372	Display the help page .
8373	Configure worker .
8374	Set a set of values
8375	Set where clause
8376	Sets the ORDER BY clause .
8377	Initialize session .
8378	Set action .
8379	Get the value of a given key .
8380	Apply filters to the given value .
8381	Execute the query
8382	Fetches the result .
8383	Fetch all rows from the database
8384	Sets the SELECT clause .
8385	Sets the GROUP BY clause .
8386	Set where clause
8387	Set the SELECT clause .
8388	Adds a join to the table .
8389	Adds a left outer join to the table .
8390	Add right outer join .
8391	Adds a full join to the table .
8392	List routes .
8393	Run the controller .
8394	Register a new route .
8395	Get the logger .
8396	Ensure the table exists .
8397	Get the definition .
8398	Get the schema for the given mapping .
8399	Display the toolbar .
8400	Render a button .
8401	Render the renderer
8402	Initialize the application .
8403	Loads a class from a class name .
8404	Register application .
8405	Run bootstrap .
8406	Get model name .
8407	Get the icon .
8408	Sets a cookie .
8409	Clear all cookies
8410	Connect to the database .
8411	Disconnect the server
8412	Check if connection is connected .
8413	Get the current connection .
8414	Get master link .
8415	Begin a transaction .
8416	Commits the database .
8417	Rollback a transaction
8418	Registers a database .
8419	Get database by alias .
8420	Render widget .
8421	Get the texture .
8422	Add a notice board item .
8423	Display mapping .
8424	Generate models .
8425	Get all active active users .
8426	Gets all inactive states for the given production .
8427	Get controller .
8428	Get icon icon
8429	Returns the icon icon for the given file type .
8430	Get faFile icon icon
8431	Start the worker .
8432	Get the DSN string for the database .
8433	Migrate migration
8434	Write migration .
8435	Delete this record .
8436	Returns an array with the given conditions .
8437	Count rows by conditions
8438	Set post link .
8439	Completes the list of files and editor links .
8440	Create a post .
8441	Update post .
8442	Render a JSON array
8443	Exit the job .
8444	Checks if the request is valid .
8445	Get the user from the incoming message .
8446	Convert a question .
8447	Send a request to the server .
8448	broadcast a message
8449	Add a contact
8450	Rename a contact .
8451	Set profile photo
8452	Checks if the given file uri exists
8453	Determine the filename of the file .
8454	Download media file from URL
8455	Add arguments for next command
8456	Execute drush command
8457	Injects the command line arguments .
8458	Update database .
8459	Get the current version
8460	Execute a command
8461	Get current page
8462	Get base url
8463	Get the protocol protocol .
8464	Get domain name
8465	Get the URI of the URI .
8466	Set url params
8467	Add backslash .
8468	Get active handlers list
8469	Log an emergency message .
8470	Log an alert message .
8471	Log a critical message .
8472	Log an error message .
8473	Writes a warning message .
8474	Writes a notice .
8475	Log a debug message .
8476	Log a message .
8477	Deletes the handler .
8478	Log a message .
8479	Bootstrap events .
8480	Run event handler .
8481	Get the name of the model .
8482	Get the operating system OS .
8483	Get kernel version
8484	Get hostname
8485	Get the CPU model name
8486	Get the vendor vendor .
8487	Get current CPU frequency
8488	Get the load percentage
8489	Get the CPU architecture .
8490	Get the boot time .
8491	Get the number of CPU processes
8492	Get the total memory of the system .
8493	Sets the fee list .
8494	Creates a fulfillment order .
8495	Get the fulfillment order .
8496	Get Fulfillment Preview
8497	Get package tracking details .
8498	List all FulfillmentOrdersByNextToken
8499	Updates a fulfillment order .
8500	Sets the cURL options .
8501	Sets the GetMatchingProductForIdResult field value .
8502	Sets the marketplaceIdList field value .
8503	Set the GetCompetitivePricForASINResult field s value .
8504	Confirm a request .
8505	Create a new InboundShipment
8506	Get BillOfLading
8507	Get package labels .
8508	Get the PrepInstructionsForASIN .
8509	Get PrepInstructions for SKU .
8510	Get transport content .
8511	List inbound shipments .
8512	List inbound shipment items by next token
8513	List inbound shipments .
8514	List inbound shipments by next token
8515	Put transport content .
8516	Update an InboundShipment
8517	Sets the InventoryRecommendations field s value .
8518	Sets the SelectionRecommendations field s value .
8519	Sets the pricingRecommendations field .
8520	Sets the fulfillmentRecommendations field s value .
8521	Sets the ListQualityRecommendations field s value .
8522	Sets the GlobalSellingRecommendations field s value .
8523	Set the AdvertisingRecommendations field .
8524	Set ItemList
8525	Sets the SellerSKU field s value .
8526	List Financial Event Groups .
8527	Convert a ListFinancialEventGroupsRequest to a ListFinancialEventGroup
8528	List Financial Event Groups by nextToken
8529	List Financial events .
8530	Convert ListFinancialEvents to ListFinancialEvents
8531	List Financial EventsByNextToken
8532	Convert ListFinancialEventsByToken to ListFinancialEventsByNextToken
8533	Sets the field s value .
8534	Set ChargeInstrumentList value
8535	Sets the ID field .
8536	Sets the RentalChargeList value .
8537	Sets the RentalFeeList value .
8538	Sets the Offer field value .
8539	Sets the PriceForASINResult field value .
8540	Set member value .
8541	Compile the message .
8542	Set plural form .
8543	Set the shipment event list .
8544	Sets the refund event list .
8545	Set the GuaranteeClaimEventList field s value .
8546	Set chargeback event list
8547	Sets the PayWithAmazonEventList field s value .
8548	Sets the ServiceProviderCreditEventList field s value .
8549	Sets the retention event list .
8550	Sets the RentalTransactionEventList field s value .
8551	Set the PerformanceBondEventList field s value .
8552	Sets the ServiceFeeEventList field s value .
8553	Sets the field s value .
8554	Sets the LoanServicingEventList field s value .
8555	Sets the adjustment event list .
8556	Parse a DOMElement from a DOMElement .
8557	Set field type
8558	Sets theFinancialEventGroupList field s value .
8559	Set the error field .
8560	Sets the product value .
8561	Cancel a shipment .
8562	Create a new shipment .
8563	Convert CreateShipment request .
8564	Get eligible shipping services .
8565	Convert GetEligibleShippingServicesRequest to parameters
8566	Gets the shipping service .
8567	Convert a GetShipment request to an array .
8568	Sets the category query list .
8569	Sets the SKUPrepInstructions field s value .
8570	Get last updated time .
8571	List recommendations .
8572	Convert ListRecommendations to ListRecommendations
8573	List recommendations by next token
8574	Sets the GetMyPriceForSKusResult field value .
8575	Set ItemChargeList
8576	Set ItemChargeAdjustmentList value
8577	Set ItemFeeList value
8578	Sets the ItemFeeAdjustmentList value .
8579	Sets the PromotionList field value .
8580	Sets the PromotionAdjustmentList field s value .
8581	Sets the PrepInstruction field value .
8582	Set the field value .
8583	Get the list of available offerings for a given SKU .
8584	Sets the ASIN field value .
8585	Sets the product group group list .
8586	Sets the price price .
8587	Sets the lowest OfferListingListingingListing value .
8588	Sets the ASINPrepInstructions field s value .
8589	Sets the report schedules .
8590	Sets the GetMatchingProductResult field value .
8591	Set the status field .
8592	Sets the filter options .
8593	List orders .
8594	List orders by next token
8595	Get service status .
8596	List marketplace participants .
8597	Lists all marketplace participants by the given request .
8598	Create a subscription .
8599	Convert a request to a subscription .
8600	Deletes a subscription .
8601	Convert a request to a DeleteSubscription
8602	Deregisters a destination .
8603	Convert a request to Deregister
8604	Get subscription .
8605	List registered destinations .
8606	List subscriptions .
8607	Convert a request to a list of subscriptions
8608	Register destination .
8609	Convert a request to a description .
8610	Update subscription .
8611	Convert a request to an update subscription .
8612	Sets the marketplace value .
8613	Sets the adjustment item list .
8614	Sets the FeedSubmissionInfo field s value .
8615	Sets the salesRank field value .
8616	Sets the ID field value .
8617	Sets the invalidSKU field value .
8618	Remove a block .
8619	Returns the block with the given key .
8620	Parse the source file .
8621	Compile the block .
8622	Sets the GetLowestListingsForSKUdesultingsForSKusResult value .
8623	Sets the OfferListingCount field value .
8624	Sets the shipping service service list .
8625	Sets the TemporarilyUnavailableCarrierList value .
8626	Sets the TermsAndConditionsNotAcceptedCarrierList value .
8627	Sets the GetCompetitivePricingForSKUuid field value .
8628	Creates a new instance from an XML document .
8629	Set theParticipation field s value .
8630	Set the GetLowestListForASINResult field s value .
8631	Set report info
8632	Set report Request Request Request
8633	Sets the orderChargeList value .
8634	Sets the orderChargeAdjustmentList value .
8635	Sets the shipmentFeeList field value .
8636	Sets the shipmentFeeAdjustmentList field s value .
8637	Sets the orderFeeList field value .
8638	Sets the OrderFeeAdjustmentList field value .
8639	Sets the direct payment list .
8640	Sets the shipment item list .
8641	Sets the shipmentItemAdjustmentList field s value .
8642	Get report request list by next token
8643	Cancel report requests .
8644	Get report request count
8645	Parse HTTP header .
8646	Get default CURL options
8647	Configure cURL options
8648	Add required parameters .
8649	Calculate the string to sign a request .
8650	Returns a formatted timestamp .
8651	Convert a request to a getReport
8652	Convert GetReportScheduleRequestCount to a request .
8653	Convert UpdateReportAcknowledgements .
8654	Convert a submit request to submit
8655	Convert a request to get report count
8656	Convert GetFeedSubmissionListByNextToken to GetFeedSubmissionList
8657	Convert a request to CancelFeedSubmissions
8658	Converts a request request to a request .
8659	Convert GetFeedSubmissionCount to GetFeedSubmissionCount
8660	Convert a request to a getReportList
8661	Convert the GetFeedSubmissionResult to a format .
8662	Convert GetFeedSubmissionList to GetFeedSubmissionList
8663	Convert a request request to a list of ReportRequest objects
8664	Convert a request to a managed report .
8665	Convert getReportRequestCount to get report request
8666	Sets the invalid ASININ field value .
8667	Set message message
8668	Sets the field s value .
8669	Computes the file system paths for the given resource configuration .
8670	Creates a new instance from a collection .
8671	Combine two arrays .
8672	Iterate over items from the collection .
8673	Iterate over all items from the collection .
8674	Map keys to keys .
8675	Merge a list of items .
8676	Flip an array .
8677	Returns a new collection with unique items .
8678	Creates a new collection of items .
8679	Sort the collection .
8680	Sorts the keys in the collection .
8681	Set a value in the bag .
8682	Set a path to the bag .
8683	Convert an iterable to an array .
8684	Creates an array from an iterable .
8685	Set a value at the given path .
8686	Remove a value from an array .
8687	Replaces all items in an iterable .
8688	Checks if the given array is a valid array .
8689	Flatten an iterable .
8690	Validate element values
8691	Symlink jquery file upload
8692	Checks if a symlink exists .
8693	Create a symlink .
8694	Parse a size .
8695	Format the given size .
8696	Configure Rbacac .
8697	Validate mandatory attributes
8698	Set an attribute
8699	Factory method for creating an SVG element
8700	Appends a child element to the list .
8701	Returns the string representation of this element .
8702	Save element as string
8703	Register view composer .
8704	Apply the model to the model .
8705	Extend the model .
8706	Sets the last folder ID
8707	Get the last folder ID
8708	Sets select columns .
8709	Qualify the translatable columns .
8710	Add a where clause .
8711	Add a where clause
8712	Add a WHERE clause .
8713	Add a WHERE clause .
8714	Add a sub query to the query .
8715	Get access token .
8716	Create a new model .
8717	Create a new model .
8718	Create a new model .
8719	Get a fresh model .
8720	Init translatable attributes .
8721	Get translatable attributes .
8722	Translate a locale .
8723	Translates the given locale .
8724	Get the translations .
8725	Get translation model .
8726	Checks if the locale is fallback .
8727	Get the dirty attributes .
8728	Change the current folder .
8729	Update folder name
8730	Returns true if the current user can select a folder .
8731	Whitelist a given address .
8732	Perform a challenge .
8733	Updates the given values .
8734	Increments an increment value .
8735	Decrement the value of a column .
8736	Insert a record into the database .
8737	Insert an ID into the database .
8738	Filter translatable values .
8739	Updates the model .
8740	Get the query .
8741	Get the delete query .
8742	Set the keys for the model .
8743	Start listening .
8744	Runs the loop .
8745	Reset listener .
8746	Get a listener instance
8747	Select the stream .
8748	Add a method call
8749	Load service provider from registry .
8750	Dumps a value .
8751	Add current message .
8752	Add a definition .
8753	Registers a definition provider .
8754	Starts the pool .
8755	Build a tracker .
8756	Creates a new instance of the subscription .
8757	Run the given iterable .
8758	Add a new tick .
8759	Uploads a new upload .
8760	Set line prefix .
8761	Write a log line .
8762	Upload a file .
8763	Delete an image .
8764	Creates a unique filename .
8765	Returns the next available variable name .
8766	Load configuration files .
8767	Register the base bindings .
8768	Register application aliases .
8769	Bootstrap the application .
8770	Bind the path to the container .
8771	Register providers .
8772	Mark a service provider .
8773	Register core container aliases .
8774	Get base url
8775	Get admin url
8776	Get route .
8777	Get the assets url
8778	Redirect to the URL
8779	Get the segment of the request .
8780	Generate the scheme .
8781	Save content to cache
8782	Finish the file .
8783	Register all publishes .
8784	Log a message .
8785	Get full url with query
8786	Generate commands .
8787	Render a script .
8788	Generates a link .
8789	Generate an image .
8790	Link an asset .
8791	Generate a meta tag .
8792	Generate HTML tag .
8793	Set environment key .
8794	Create new environment file with given key .
8795	Render a view .
8796	Load a helper .
8797	Trigger event .
8798	Register directives .
8799	Generate a password hash .
8800	Checks if the given value has a rehash .
8801	Sets a new value
8802	Get session data
8803	Set flash value
8804	Get flash value
8805	Creates a new cipher driver .
8806	Ensure the given alias exists .
8807	Set a cookie
8808	Get cookie value
8809	Delete a cookie
8810	Destroy the cookie
8811	Set a header .
8812	Set view content .
8813	Render blade view .
8814	Get POST data
8815	Get a GET request
8816	Get the value of a request
8817	Delete data from a file
8818	Get all files
8819	Get the value of the server
8820	Get client IP address .
8821	Filters a string .
8822	Add rules .
8823	Add a rule .
8824	Get error message
8825	Checks if the given data is valid
8826	Convert migration name to class name .
8827	Generate a token
8828	Creates an image .
8829	Generates an option .
8830	Get selected value .
8831	Get checkbox state
8832	Parses a string into tokens .
8833	Generate code from a pattern .
8834	Get the observer .
8835	Get the environment for the operating system .
8836	Set max retries .
8837	Check if the timeout is exceeded .
8838	Get the status of the process .
8839	Reads the stdout of the process .
8840	Set exit code
8841	Generate the URL for this page .
8842	Converts a string into an array .
8843	Save the user .
8844	Log a message .
8845	Builds the theme .
8846	Get blog posts
8847	Get archived blog posts .
8848	Render a tag .
8849	Get blog posts .
8850	Generate RSS feed .
8851	Returns a paginated list of posts
8852	Get current tag
8853	Get current category
8854	Get archive year
8855	Get the archive date .
8856	Increase the number of retries .
8857	Returns the relative path to the target directory .
8858	Creates an absolute path to the target directory .
8859	Copies the target directory to the target directory .
8860	OnPublish event .
8861	Determine if the current content is visible .
8862	Returns the link to the archive .
8863	Returns the HTML fragment for this field .
8864	Adds the query to the database .
8865	Run the task .
8866	Run a task .
8867	Log a task .
8868	Notify all runners .
8869	Attach a runner .
8870	Detach runner .
8871	Adds a callback to the event dispatcher .
8872	Build the attachment part .
8873	Build the MIME header .
8874	Add an attachment
8875	Get mime type
8876	Send the message to the sender .
8877	Format a date
8878	Safely send signal .
8879	Checks if the given path is valid .
8880	Checks if the given path is valid .
8881	Check if a relative path is valid .
8882	Check if a command is valid
8883	Get the quote
8884	Build package packages
8885	Send the request
8886	Parses the XML response .
8887	Checks if options are valid .
8888	Process request .
8889	Register a service .
8890	Get the value for a given key .
8891	Register a singleton service .
8892	Consume a container .
8893	Register a factory .
8894	Initialize the schema .
8895	Initialize event listeners .
8896	Get all records in the database .
8897	Insert data into database
8898	Update a record
8899	Update many records
8900	Updates the record with the given parameters .
8901	Update a batch .
8902	Delete a record
8903	Delete records by condition .
8904	Delete many records
8905	Drop down the table
8906	Count all records in the database .
8907	Get the number of autoincrement
8908	Set the creation of a row .
8909	Serialize a row
8910	Get callable function .
8911	Apply soft delete filter .
8912	Fetch primary key
8913	Set where clause
8914	Decode a value .
8915	Encodes the given value .
8916	Parse subject entry
8917	Get a single message .
8918	List messages .
8919	Parse the authority .
8920	Parse relation .
8921	Parse the relationship
8922	Apply a patch to the target document .
8923	Generate patch document .
8924	Merges two patch documents .
8925	Map JSON data to target class
8926	Fetch the config file .
8927	Fetch a generator .
8928	Add a generator .
8929	Generate a stack icon .
8930	Get stack icon element .
8931	Add a route
8932	Loads the modules .
8933	Add a dependency .
8934	Fetch a template
8935	Add a template .
8936	Create a new changeset
8937	Get the changeset .
8938	Update changeset .
8939	Close changeset .
8940	Download changeset .
8941	Expand Bbox changeset changeset
8942	Query changeset .
8943	Diff the changeset of the changeset
8944	Get user details
8945	Replace user preferences .
8946	Change a preference .
8947	Upload a trace .
8948	Download trace metadata .
8949	Constructs a URL .
8950	Add routers .
8951	Get capabilities
8952	Get map data
8953	Create a new node
8954	Create a new way
8955	Create a new relation .
8956	Get ways for a node
8957	Redact a redaction
8958	Validate response .
8959	Prepare an array parameter
8960	Send an HTTP request
8961	Creates a CSV from a Mink response .
8962	Extracts array criteria from array
8963	Extract the date criteria from the given array .
8964	Checks if the given key matches the given criteria .
8965	Rewrite count query
8966	Check if currency code exists
8967	Clean currency code .
8968	Load rates from file
8969	Initializes the storage file .
8970	Converts a Rate object to a JSON representation .
8971	Creates a Rate object from JSON .
8972	Paginate rates .
8973	Filter a list of sources
8974	Set the output format .
8975	Parses a CSV file .
8976	Get the type of an object
8977	Set a parameter .
8978	Get rate key
8979	Initialize the table .
8980	Build a Rate from a table row .
8981	Returns true if the given rate criteria matches the given criteria .
8982	Filter configurations by criteria .
8983	Asserts that two tables are identical .
8984	Assert that two tables are equal .
8985	Assert that two tables are equal .
8986	Get column columns .
8987	Parse a status line .
8988	Returns the status line .
8989	Get a Template instance
8990	Get templates .
8991	Build an ElggEntity instance .
8992	Returns an array of attribute names .
8993	Computes the probability of the sample .
8994	Update session data
8995	Add actions to the controller
8996	Build namespace .
8997	Checks if the directory is empty .
8998	Check if the path exists .
8999	Check if a file exists .
9000	Fix directory separator .
9001	Display the user column .
9002	Display time column .
9003	Renders the extra tablen
9004	Drop the month dropdown
9005	Get the log level
9006	Creates an instance of the entity .
9007	Sort collection by priority
9008	Prepare column .
9009	Sets the decimal value .
9010	Generate a character type .
9011	Set tinytext
9012	Sets text type .
9013	Set medium text
9014	Create a longtext field .
9015	Get the root view
9016	Mark all notifications .
9017	Get words from a string
9018	Get action words .
9019	Get keywords from a string .
9020	Get unique words .
9021	Returns a list of words by frequency .
9022	Get stop words .
9023	Checks if the given string is a confirmation .
9024	Checks if the given string is a valid word .
9025	Checks if a string contains a URL .
9026	Checks if a string contains an email .
9027	Checks if the given string is a question .
9028	Generate a collection of samples .
9029	Show an error .
9030	Displays an exception .
9031	Execute a callback .
9032	Loads the class metadata .
9033	Map field to datetime .
9034	Initializes the lock file .
9035	Persist a topic .
9036	Insert an entity
9037	Update an entity .
9038	Executes a query .
9039	Get entity by hash
9040	Get the maximum value of a column .
9041	Get the value of the environment .
9042	Empty environment variables
9043	Logs a message .
9044	Check if the file is rotation .
9045	Get config .
9046	Registers a type .
9047	Returns the type of the data type .
9048	Render a list of fields
9049	Render buttons .
9050	Check the log level .
9051	Get the message for the given message .
9052	Get menu items .
9053	Handles the recursive menu item .
9054	Create a relation table .
9055	Add a column to rename .
9056	Change column columns .
9057	Add a primary key .
9058	Add a foreign key .
9059	Add unique key .
9060	Set primary key .
9061	Get table data .
9062	Get table schema .
9063	Get the keys of the table .
9064	Attach the shared event handlers .
9065	Check if view resolver is valid
9066	Persist a message .
9067	Boot the UUID for the model .
9068	Convert value to string
9069	Purge expired records .
9070	Parses the given parts .
9071	Prepare an exception .
9072	Run a query .
9073	Get routes .
9074	Get route information .
9075	Add a new rule
9076	Add a tag .
9077	Add a new rule collection .
9078	Parse the context prefix .
9079	Parses the given URI .
9080	Parse a request element
9081	Parse request parameters .
9082	Parse remote host
9083	Parse GET request
9084	Add a new definition .
9085	Get the alias for the given abstract .
9086	Get the name of the detector .
9087	Attach a detector to the queue .
9088	Returns a slurp string .
9089	View body body
9090	Check if field is multipart .
9091	Normalize options .
9092	Puts a page partial .
9093	Get page partials
9094	Handle the entity .
9095	Validate the entity
9096	Update the entity .
9097	Called when the module is added .
9098	Initializes the theme manager .
9099	Serve the socket .
9100	Bind socket to socket
9101	Listen for socket .
9102	Build the SQL query .
9103	Parse the message .
9104	Parse user .
9105	Parse time .
9106	Get the theme object .
9107	Get the layout for the mvc event .
9108	Get the theme name .
9109	Get the resolver object
9110	Get the path name of the theme .
9111	Get the configuration .
9112	Set the visit time .
9113	Set up the controller
9114	Registers the controller .
9115	Set default actions
9116	Register a view .
9117	Unregister a view .
9118	Returns the best match for the given application .
9119	Register a controller .
9120	Register the router .
9121	Retrieve HTTP headers .
9122	Prepare request .
9123	Retrieves and parses the response .
9124	Appends the payload to the request .
9125	Handle parsing .
9126	Perform a request .
9127	Check if connection is ready .
9128	Check if content length is exceeded .
9129	Set the interceptor
9130	Create a new route .
9131	Load a YAML file .
9132	Validate configuration .
9133	Get a route by name .
9134	Set the last post
9135	Parse a URL .
9136	Clear a tag .
9137	Call a callable .
9138	Formats an array of camelCase names .
9139	Parse a URI .
9140	Parse a request from a server .
9141	Get parameter value
9142	Get all params
9143	Get a parameter from the request .
9144	Generate a random string
9145	Reset locale to locale
9146	Get a value from the session .
9147	Open socket .
9148	Mark a user as read .
9149	Mark a user as unread .
9150	Fetch all rows from the database .
9151	Get select options
9152	Render the field view .
9153	Returns a string representation of the URL .
9154	Parse parameters .
9155	Parse annotations .
9156	Get controller settings
9157	Call the action .
9158	Adds a control to the view .
9159	Redirect to the controller
9160	Adjust the request headers .
9161	Parse the response header .
9162	Adjust the number of bytes .
9163	Get a header value .
9164	Parse a rule .
9165	Get field fields
9166	Get validation status
9167	Set field validation status
9168	Parse a URL .
9169	Set timestamp creation .
9170	Update company profile .
9171	Get controller config .
9172	Get view helpers .
9173	Transforms a JSON menu .
9174	Converts a list of items to a flat array .
9175	Returns the URL from a route .
9176	Get all plugins .
9177	Map value to boolean
9178	Get database by id
9179	Get database configuration .
9180	Get view settings .
9181	Clears the cache .
9182	Store a value in the cache .
9183	Delete cache by key
9184	Get remember key .
9185	Convert data to array
9186	Merge parameters into array
9187	Embed campaign tags
9188	Connect to the endpoint
9189	Create presenter instance .
9190	Renders the current message .
9191	Convert an identifier to a format
9192	Initializes the theme .
9193	Initialize the theme .
9194	Add a child .
9195	Set the themes path .
9196	Get theme config .
9197	Get category tag .
9198	Get the redirect URL for the user .
9199	Get access token
9200	Upload media files .
9201	Creates a bearer token .
9202	Create a bearer token
9203	Get a GET request
9204	Get configuration item
9205	Initialize the seed file .
9206	Import tables .
9207	Import a table
9208	Truncate a table .
9209	Find the primary key .
9210	Print validation errors .
9211	Get the file .
9212	Check if a file exists .
9213	Returns an option parser .
9214	Creates a new static page .
9215	Update model .
9216	Delete a model
9217	Parse page links .
9218	Converts a page number to a key .
9219	Request a page number .
9220	Request all pages in the page
9221	Checks if an offset exists .
9222	Serialize the data .
9223	Unserialize data
9224	Set authorization token
9225	Preprocess data .
9226	Get a GET request .
9227	Create a POST request .
9228	Create a PUT request .
9229	Deletes a request .
9230	Make a PATCH request .
9231	Search for posts
9232	View model .
9233	Create a new post .
9234	Update blog .
9235	Creates a new banner .
9236	Update model .
9237	Gets the AmbiguityException message .
9238	Get the text of the graph .
9239	Checks if a foreign key is in inheritance relation .
9240	Render the language switcher .
9241	Get url for given language
9242	Handles the next request .
9243	Set cookie and locale
9244	Load configuration files .
9245	Parse dynamic route .
9246	Replace the first occurrence of a substring .
9247	Convert a string to a string .
9248	Convert a string to an upper case .
9249	Generate a route .
9250	Boot the application .
9251	Adds a compiler pass to the compiler .
9252	Initialize the container .
9253	Get container initializer .
9254	Handle a request .
9255	Get the root directory .
9256	Set a service .
9257	Get a service instance .
9258	Dump a container .
9259	Add a route .
9260	Checks if data is a cacheable
9261	Add a route .
9262	Add a route
9263	Add a named route .
9264	Create a controller .
9265	Register providers .
9266	Creates a string from a string .
9267	Convert a string to a string .
9268	Sets the timeout minutes .
9269	Set the phase phase .
9270	Loads the configuration file .
9271	Set the uri .
9272	Convert data to multipart .
9273	Parse bbcode
9274	Get the service configuration .
9275	On bootstrap event .
9276	Validate fields .
9277	Render REST response .
9278	Fetches the results by the given WHERE clause .
9279	Save a job .
9280	Deletes a WHERE clause .
9281	Get all pending jobs .
9282	Get all running jobs .
9283	Checks if a less file should be compiled .
9284	Checks if the given CSS file is valid .
9285	Compile a file .
9286	Create database table .
9287	Drop all tables .
9288	Truncate all jobs
9289	Returns the duration of the execution .
9290	Apply serialize metadata to array .
9291	Adds the CSS to the grid .
9292	Get the endpoint definition .
9293	Gets the assets URL for this module .
9294	Sets theme defaults .
9295	Build custom fields .
9296	Update documents .
9297	Update a single file
9298	Get the homepage
9299	Handle a batch request .
9300	Set options .
9301	Sets the schedule at the given time .
9302	Sets the scheduleLifetime value .
9303	Set success log log
9304	Set the failure log .
9305	Set emit events .
9306	Sets the allowed JSON API request .
9307	Sets the JSON API security hash .
9308	Register the Ckan API .
9309	Get a single item
9310	Perform a POST request .
9311	Execute a GET request
9312	Show the banner .
9313	Show information about the database .
9314	Clear storage .
9315	Determine the accept header .
9316	Filters a region .
9317	Transforms the image to the destination file .
9318	Rotate the image
9319	Render Markdown .
9320	Gets the list of echos .
9321	Compile Markdown .
9322	Register Markdown environment .
9323	Register Markdown parser .
9324	Register Markdown Renderer .
9325	Register Markdown .
9326	Register the engines .
9327	Register Markdown engine .
9328	Register MarkdownPhp engine .
9329	Register Markdown blade engine .
9330	Returns an array of image filters .
9331	Apply a region to an image
9332	Require field .
9333	 scaffold form field
9334	Return the degrees as degrees .
9335	Get the radians .
9336	Calculate the turn .
9337	Checks if the given angle is complementary .
9338	Checks if the given angle is supplementary .
9339	Get the value of a key .
9340	Load configuration files .
9341	Set the value of a key
9342	Populate array
9343	Add a new row
9344	Add a new column
9345	Returns the row at the given index .
9346	Get column at index
9347	Check if matrix is diagonal
9348	Check if the matrix is equal to another matrix .
9349	Checks if a matrix is multiply
9350	Transpose this matrix to another .
9351	Add a new matrix
9352	Compute the coefficient matrix .
9353	Returns the inverse matrix of this matrix .
9354	Subtracts a matrix from the matrix
9355	Computes the determinant of the matrix .
9356	Returns a new instance with the given uri .
9357	Remove a header .
9358	Get module path .
9359	Finalize the response .
9360	Process the middleware .
9361	Returns the norm of this matrix
9362	Calculate the argument
9363	Add a new value to this vector .
9364	Subtracts the value from the given z .
9365	Multiplies the given z .
9366	Divide two numbers
9367	Checks if two values are equal .
9368	Get globals .
9369	Resolve the request .
9370	Handle a request .
9371	Integration .
9372	Run the server .
9373	Display a pretty display .
9374	Creates a dispatcher .
9375	Render a template file .
9376	Checks if the given path matches the given template .
9377	Extract data from a file .
9378	Get all files in a directory
9379	Parse a route .
9380	Get route .
9381	Set a concrete class .
9382	Get a tag
9383	Get class name
9384	Get all icons .
9385	Get a list of icons
9386	Retrieve a route .
9387	Register a restful route .
9388	Set the namespace .
9389	Parse route .
9390	Returns the sort value for this table .
9391	Returns the sort value for the given group .
9392	Get the skip rows clause .
9393	Returns a new instance with the given status code .
9394	Executes the command .
9395	Builds the command .
9396	Sets an array of strings .
9397	Escape options .
9398	Returns the build builder .
9399	Computes the power of the given number .
9400	Export log messages .
9401	Sets http request .
9402	Builds the command .
9403	Creates a new collection .
9404	Prepare a component instance
9405	Add a middleware to the stack .
9406	Checks if the middleware is an action .
9407	Returns a callback for the middleware .
9408	Resolve a request .
9409	Transform middleware .
9410	Collect all routes .
9411	Throw exception .
9412	Get the authority .
9413	Creates an instance of Uri .
9414	Calculate the variance
9415	Set precision .
9416	Calculate the maximum value
9417	Calculate FWHM
9418	Calculate the value of a given x .
9419	Generate random samples
9420	Search for icons
9421	Get the contents of the stream .
9422	Get the metadata of the stream .
9423	Get the size of the file .
9424	Write a string to the stream .
9425	Returns the frequency of the frequency
9426	Builds the command .
9427	Render a template .
9428	Updates the field list .
9429	Get font icon classes .
9430	Get font icon tag .
9431	Get routes .
9432	Returns a random float value
9433	Check if two floats are valid .
9434	Set rho value
9435	Set theta .
9436	Returns a random random number .
9437	Returns an array of items
9438	Reset the matrix .
9439	Alias alias .
9440	Get the value of an instance .
9441	Get a random number
9442	Get the number of items without replacement .
9443	Set pack options
9444	Get package name .
9445	Get entity mapping .
9446	Returns the path to the config file .
9447	Get the list of symlinks .
9448	Get package path
9449	Check if method is allowed
9450	Extract path from path .
9451	LogDL stat details .
9452	Perform a query .
9453	Get a collection of documents .
9454	Parse a string .
9455	Get the query .
9456	Returns the offset of the page
9457	Add a countable attribute .
9458	Register admin routes .
9459	Get tickets .
9460	Delete tickets .
9461	Appends a value filter to the filter .
9462	Get event map .
9463	Sets the current page .
9464	Register log view .
9465	Get summary summary
9466	Get server modules .
9467	Initializes the object .
9468	Register route routes .
9469	Register log view .
9470	Load groups .
9471	Paginate items
9472	Respond to the delete action .
9473	Deletes a failed action
9474	Read a single value .
9475	Strip quotes .
9476	Get start date
9477	Returns an array of TopDownloads
9478	Get the list of days downloaded from the database .
9479	Respond to response
9480	Set the error code
9481	Respond to response
9482	Prepare folders .
9483	Convert this entity to an array
9484	Create an object from an array
9485	Check if the model is valid
9486	Check if required fields are set
9487	Install the modules .
9488	Returns a list of pages
9489	Get file data
9490	Get file data
9491	Get file list data
9492	Get application size .
9493	Get folder size
9494	Format size .
9495	Create a SphinxClient
9496	Get a paginated collection
9497	Get a single resource
9498	Save Entity
9499	Process a request .
9500	Checks if an event is supported .
9501	Watch watcher .
9502	Run Peridot command .
9503	Join the command .
9504	Listen for plugins
9505	Show the dashboard dashboard .
9506	List logs .
9507	Show log view .
9508	Show log by level
9509	Search for log entries .
9510	Download a log .
9511	Delete a log .
9512	Get list of log views .
9513	Set match mode .
9514	Add a faceted query .
9515	Initialize logger .
9516	Set the settings .
9517	Create a new database .
9518	Returns the usage string .
9519	Returns a string representation of the property closure .
9520	Get the alias usage .
9521	Add an alias .
9522	Updates a document .
9523	Get the configuration .
9524	Deploy the deployer .
9525	Parse command line arguments .
9526	Validate the input parameters .
9527	Parse an array of arguments
9528	Parse a single parameter .
9529	Validate required parameters
9530	Initialize the parser .
9531	Respond to the default response
9532	Preload aliases .
9533	Preload the command line arguments .
9534	Parse a quoted string .
9535	Parse a variadic parameter .
9536	Check if a parameter exists .
9537	Get the prefix of a parameter .
9538	Get the real name of a parameter .
9539	Returns the closure for the given parameter .
9540	Get parameter closure .
9541	Decode response body .
9542	Run sync action .
9543	Get the messages .
9544	Returns a list of all parameters that are not excluded .
9545	Create a virtual table
9546	Counts the number of records in a table
9547	Rank the text .
9548	Validate the uploaded file .
9549	Set the PDO .
9550	Get a PDO instance
9551	Sets the ORDER BY clause .
9552	Allow mime types
9553	Allow extensions .
9554	Set the name of the query .
9555	Get the upload handler .
9556	Add a closure closure .
9557	Add multiple parameters .
9558	Returns the full usage of the command .
9559	Resolve error handler
9560	Renders the close button .
9561	Make a response .
9562	Checks if the given exception is a type hint .
9563	Call handler .
9564	Make a fatal error exception .
9565	Add a hook .
9566	Add a hook .
9567	Register a configurator .
9568	Invokes the given configurator .
9569	Sets the container .
9570	Add a middleware
9571	Boot the console .
9572	Boot the application .
9573	Register providers .
9574	Register provider .
9575	Resolve the stack .
9576	Resolve the kernel .
9577	Register the Materialize plugin .
9578	Register the plugin .
9579	Set a logger .
9580	Defines a deferred channel .
9581	Get a channel .
9582	Get field validation options
9583	Add a cached route
9584	Returns the route for the given request .
9585	Return the URL of the URL .
9586	Create an external URL field .
9587	Get attribute value .
9588	Checks if the given node is set .
9589	Renders dropdown list
9590	Renders a radio button .
9591	Generates a radio list .
9592	Generates a checkbox .
9593	Generates a checkbox list .
9594	Create session handler .
9595	Creates a session storage instance .
9596	Creates a new session .
9597	Set flash messages .
9598	Flash input .
9599	Create a redirect response .
9600	Returns the length of this component .
9601	Add a vector to the vector .
9602	Computes the dot product of the vector .
9603	Returns the cross product of two vectors .
9604	Calculate the scalar product of two vectors .
9605	Computes the cross product of two vectors .
9606	Multiplier product by scalar
9607	Projects the given b to b .
9608	Returns the angle between two vectors .
9609	Check if vectors are valid .
9610	Get route url .
9611	Get asset URL .
9612	Get root URL .
9613	Register Guzzle client .
9614	Authenticate a token .
9615	Add a manager .
9616	Register commands .
9617	Register a subscriber .
9618	Register a stack middleware .
9619	Checks the captcha answer
9620	Perform a POST request
9621	Generate a query string
9622	Get a PDO instance .
9623	Get connection configuration .
9624	Create session handler .
9625	Get character by id
9626	Get a list of all models .
9627	Matches the given parameters .
9628	Validate params .
9629	Get route identifier .
9630	Verify the uploaded file .
9631	Set a setting .
9632	Get a setting value
9633	OnWriteWrite method
9634	Get the form field .
9635	Read file contents .
9636	Write content to file
9637	Handle authentication request .
9638	Returns an array of attributes .
9639	Set url
9640	Rebuild a URL .
9641	Validate the field .
9642	Resolve a path .
9643	Gets the driver s driver .
9644	Map params to urls
9645	Make a PDO connection .
9646	Build a route .
9647	Removes a parameter from the route builder .
9648	Get the constant values for a given class identifier .
9649	Returns the mapping for the given class name .
9650	Delete all options
9651	Creates a copy of this node .
9652	Initialize the form field .
9653	Add a loader .
9654	Get the loader for a given path .
9655	Adds a route to the route .
9656	Merge multiple routes .
9657	Mount routes .
9658	Creates a writer .
9659	Creates a reader .
9660	Identify the file type .
9661	Creates a reader for a file .
9662	Get reader type from filename
9663	Register a writer .
9664	Register a reader .
9665	Set a custom header .
9666	Writes a fill .
9667	Write gradient fill .
9668	Writes a pattern .
9669	Write font .
9670	Writes a border .
9671	Writes a cell style .
9672	Write border style .
9673	Write a number format to the XMLWriter .
9674	Returns a list of all conditional styles
9675	Get all fills in a spreadsheet
9676	Get all fonts for a spreadsheet
9677	Get all borders for a spreadsheet
9678	Returns a list of number formats for a spreadsheet .
9679	Creates a report from an XML element .
9680	Get column display name .
9681	Creates a new Contact object from XML .
9682	Initializes the report .
9683	Get country name
9684	Get storage .
9685	Set the storage .
9686	Returns a string with the given value .
9687	Serialize the collection .
9688	Computes the determinant of the matrix .
9689	Get data type
9690	Render a file
9691	Compile a file .
9692	Compile a string .
9693	Get token by id
9694	Checks if a file is read .
9695	Apply inline style .
9696	Create transactions .
9697	Find transaction type by name
9698	Generate HTML .
9699	Generate text
9700	Generate a list of paragraphs
9701	Creates a new XFWriter .
9702	Add a font .
9703	Add a color .
9704	Writes the worksheet .
9705	Calculate sheet offsets
9706	Write all number formats
9707	Writes the name of the defined name .
9708	Writes a short name .
9709	Write the codepage .
9710	Writes the window header .
9711	Write a bound sheet .
9712	Writes the Excel spreadsheet .
9713	Write EXternalsheet BIFF file .
9714	Write style .
9715	Write a number format .
9716	Write the country code
9717	Write the record ID .
9718	Write palette .
9719	Writes a marker group .
9720	Set Escher
9721	Get sample samples .
9722	Write a spreadsheet to a spreadsheet
9723	Get temporary folder
9724	Returns the filename for the given filename .
9725	Get temporary filename
9726	Logs a file .
9727	Log a file
9728	Initialize this instance from a XML element .
9729	Returns the date time .
9730	Sets the maximum percentage dimensions .
9731	Check if a file is read .
9732	Write the font .
9733	Sets the ARGB color .
9734	Set RGB color
9735	Returns an indexed color for the given index .
9736	Sets the worksheet .
9737	Set width
9738	Set the fitToHeight
9739	Set the fit to width
9740	Get print area
9741	Check if the print area is set .
9742	Adds a print area to the table .
9743	Sets the country .
9744	Sets the current state .
9745	Sets the city .
9746	Sets the quarter .
9747	Set the timezone .
9748	Check order status
9749	Calculate the size of a file
9750	Save pps to file
9751	Sets the images for the post .
9752	Set posts to review
9753	Get temporary directory
9754	Assert that a file is readable .
9755	Checks if the given type is a type .
9756	Checks if the given value is greater than the given value .
9757	Checks if the given value is less than the given value .
9758	Assert that the value is equal to the given value .
9759	Checks if a string contains a string .
9760	Checks if the given type matches the given type .
9761	Assert that the given class contains only one of the given class .
9762	Assert that the target is empty .
9763	Assert that the string ends with the given value .
9764	Assert that the given value is equal .
9765	Checks if the assertion exists .
9766	Assert that the given class is an instance of the target .
9767	Checks if the given value is less than the given value .
9768	Sets the length of the target .
9769	Match regular expression .
9770	Match format .
9771	Checks if the given value is less than the given value .
9772	Adds a property to the target object .
9773	Checks if the assertion is readable .
9774	Checks if a predicate is satisfied .
9775	Checks if a string starts with the given value .
9776	Throw exception .
9777	Checks if the given range is within the range .
9778	Checks if the assertion is writable .
9779	Assert that the given target is equal .
9780	Returns the length of the given value .
9781	Set flag .
9782	Parses an expression .
9783	Parse expression .
9784	Parse HTML code
9785	Parses a statement .
9786	Parses an escape token .
9787	Parses a filter value .
9788	Sets the conditions .
9789	Set the bottom right position
9790	Returns the formatted value .
9791	Returns the calculated value for this cell .
9792	Set the data type .
9793	Check if cell has data validation
9794	Gets the data validation .
9795	Sets the data validation .
9796	Checks if the cell has a hyperlink .
9797	Get the hyperlink .
9798	Set the hyperlink .
9799	Compare two cells .
9800	Set the renderer class .
9801	Set libXml loader options
9802	Get libXml loader options
9803	Set the creation time .
9804	Sets the modified timestamp .
9805	Read default data
9806	Reads the BSE record .
9807	Read blip JPEG image .
9808	Read an OPTION record
9809	Read client text box .
9810	Read client anchor .
9811	Make a GET request .
9812	Perform a PUT request .
9813	Deletes the given path .
9814	Add entries to blacklist
9815	Sets the worksheet .
9816	Write raw data
9817	Sets the viewview type .
9818	Compute the polynomial regression .
9819	Sets the segment size .
9820	Get a column .
9821	Shift a column .
9822	Write relationships to spreadsheet
9823	Write workbook relationships .
9824	Write worksheet relationships .
9825	Write drawing relationships
9826	Write a relationship .
9827	Set password .
9828	Get association name .
9829	Get association name .
9830	Get the association menu name .
9831	Register a resource .
9832	Sets the revisions password .
9833	Sets the workbook password .
9834	Convert pixels to cell width
9835	Create an image from a BMP file
9836	Opens a file .
9837	Creates a request with the given parameters .
9838	Creates a response with a JSON response .
9839	Creates an encrypted request .
9840	Creates an encrypted response .
9841	Create a signed JSON request .
9842	Creates a signed JSON response .
9843	Create a signed JSON request .
9844	Create a signed JSON response .
9845	Creates an encrypted request .
9846	Create a new request .
9847	Create a new response .
9848	Create a signed request .
9849	Create a signed response .
9850	Convert a string to a stream .
9851	Hash a password
9852	Set file path
9853	Set the expiration date .
9854	Append data to the buffer .
9855	Writes a BOF .
9856	Add a continuation header
9857	Check if cell is valid
9858	Check if cell value is in list
9859	Get stream data .
9860	Get int4d value from data
9861	Write the dimension to the XML writer .
9862	Write sheet format .
9863	Write cols to XMLWriter
9864	Write data validations .
9865	Write the hyperlinks to the XML writer .
9866	Write protected ranges
9867	Write merge cells
9868	Write print options
9869	Write page margins
9870	Write page setup .
9871	Writes the breaks of a sheet .
9872	Write sheet data
9873	Writes the drawings to the spreadsheet .
9874	Write legacy drawing .
9875	Write legacy footer header .
9876	Writes a spreadsheet .
9877	Write file version
9878	Writes the workbookPr .
9879	Write book view view
9880	Write workbook protection .
9881	Writes the calendar .
9882	Write a sheet .
9883	Writes the defined names to the spreadsheet .
9884	Writes the named ranges .
9885	Write the definition for a named name .
9886	Writes the defined name to the XML file .
9887	Initialize the permission .
9888	Get the permission .
9889	Parse response body
9890	Converts a response into an XML object .
9891	Create the hint .
9892	Create error .
9893	Get input properties
9894	Add a shipping method
9895	Convert a token to a reference
9896	Convert a number to a number
9897	Convert a string to a binary string .
9898	Convert a function to a string .
9899	Convert an error code to a string
9900	Advances the next token .
9901	Parse a formula .
9902	Check if cell address is in delete range
9903	Update cell reference
9904	Update cell range
9905	Update single cell reference
9906	Map a color to a palette
9907	Sets the block size .
9908	Set position
9909	Sets the position of the image .
9910	Convert this object to an array
9911	Creates an object from an array
9912	Initialize this object .
9913	Get field value .
9914	Create a menu .
9915	Render a Spreadsheet .
9916	Configure model configuration .
9917	Get the relations for a given model .
9918	Get table name .
9919	Finds the columns for the given model .
9920	Find relation relations .
9921	Find many many relations .
9922	Defines the relationship between two models .
9923	Require param
9924	Filter parameters .
9925	Handle collections .
9926	Handle arrays .
9927	Clean unwanted params
9928	Check if value is empty
9929	Handle unpermitted parameter .
9930	Set the filter type
9931	Gets a rule by its index .
9932	Add a rule
9933	Set the rule type .
9934	Set column value
9935	Set the operator operator .
9936	Sets the grouping rule .
9937	Check the sheet code name .
9938	Check the sheet title
9939	Adds a chart to the worksheet .
9940	Calculate column widths
9941	Set the title of the sheet
9942	Set protection .
9943	Set cell value .
9944	Get cell by column index
9945	Creates a new cell .
9946	Checks if a cell exists .
9947	Get a row dimension
9948	Get column dimension .
9949	Returns the style of the cell at the given position .
9950	Duplicate a cell .
9951	Duplicate conditional style .
9952	Set a cell .
9953	Merges two cells .
9954	Merge cells by column index .
9955	Unmerge cells by column
9956	Protects a cell
9957	Protects cells by column index .
9958	Unprotects cells .
9959	Unprotects cells by column
9960	Set auto filter by column
9961	Set the freeze pane .
9962	Inserts a new row at the given position .
9963	Removes a row from the cell
9964	Get a comment .
9965	Sets the selected cells .
9966	Sets a row from an array .
9967	Get a hyperlink
9968	Set a hyperlink .
9969	Returns a DataValidation instance
9970	Set data validation .
9971	Adjusts the range to fit the given range .
9972	Sets the code name of the sheet .
9973	Sets the format code .
9974	Sets the format code .
9975	Fill the builtin format codes .
9976	Returns the built - in format code for the given index .
9977	Prepare the file to be saved
9978	Execute a curl request
9979	Write comments .
9980	Write comment .
9981	Write VML comments
9982	Write a VML comment .
9983	Returns the data type for the given value .
9984	Initializes this object from a XML element .
9985	Map the vAlign value to the correct position .
9986	Map the hAlign to the correct position .
9987	Map border style .
9988	Generate HTML header
9989	Generate the navigation .
9990	Write an image in a cell
9991	Write a chart in a cell
9992	Generates the stylesheet
9993	Create CSS style
9994	Format a color
9995	Write comment .
9996	Check if the file is a delimiter .
9997	Infer the delimiter .
9998	Set shadow properties
9999	Set shadow color
10000	Sets the softEdges size .
10001	Add a decorator to the stack .
10002	Apply the given tag .
10003	Removes all files from a directory .
10004	Get string from HTTP status code
10005	Set ribbon xml data
10006	Get ribbon xml data
10007	Get all ribbon objects
10008	Disconnects all worksheet
10009	Create a new sheet .
10010	Add a new worksheet .
10011	Remove a sheet by index
10012	Get a specific sheet .
10013	Get a sheet by name
10014	Returns the index of a worksheet .
10015	Sets the active sheet index by name .
10016	Adds an external sheet to the worksheet .
10017	Add a named range .
10018	Remove a named range .
10019	Add a cell xf .
10020	Remove a cell xf index by index
10021	Add a cell style
10022	Remove a cell style by index
10023	Flatten an array .
10024	Flatten an array of values into an array .
10025	Get a contact
10026	Get contacts .
10027	Get contact by email
10028	Get contacts by external id
10029	Get contacts by filter id
10030	Update a contact
10031	Synchronize contacts .
10032	Unsubscribe a contact by email
10033	Add a UnsubscriptionRescriptionReceivedResubscription to a contact .
10034	Unsubscribe a contact
10035	Unsubscribe a contact
10036	Get blocked contacts .
10037	Create a custom field
10038	Renames a custom field .
10039	Try to load a simple XML file .
10040	Loads a spreadsheet .
10041	Returns a string representation of this Rule .
10042	Validate plugin .
10043	Set a piece of piece .
10044	Creates select form .
10045	Creates a form from the given type .
10046	Checks if the user is empty .
10047	Copy a directory recursively .
10048	Get colour by index
10049	Convert an object to an array
10050	Resolve the config .
10051	Resolve visible fields .
10052	Resolve a file path .
10053	Set the data type .
10054	Set data values
10055	Push a value .
10056	Get a cache item
10057	Checks if the given key exists .
10058	Save a cache item .
10059	Commits all deferred items .
10060	Set a meta value
10061	Create a new meta .
10062	Update meta value
10063	Get meta value .
10064	Get all meta data
10065	Sets the pieces .
10066	Generate a generator
10067	Register tags .
10068	Register decorators .
10069	Add a decorator to the tag .
10070	Creates a tag .
10071	Render the widget .
10072	Initialize a contact object .
10073	Get all drawings
10074	Initializes the database .
10075	Converts a control character to PHP code .
10076	Converts a control character to an XML string .
10077	Sanitize UTF - 8 chars
10078	Convert the given value to a string .
10079	Reverse a string .
10080	Get currency code
10081	Register the manager .
10082	Register the configurator .
10083	Register the router .
10084	Write text to stream
10085	Set the mapping for the given severity .
10086	Write debug log
10087	Creates a zip archive .
10088	Add an attachment to the message .
10089	Add an attachment to the message .
10090	Get the URL for the given identifier .
10091	Check options array
10092	Returns the identifier of an identifier .
10093	Get domain name .
10094	Get the srv for a given domain .
10095	Process the default avatar .
10096	Process size .
10097	Writes a BFF8 cell range .
10098	Set outline .
10099	Writes a label .
10100	Write a rich text string .
10101	Writes a string representation of a string .
10102	Writes a URL to a file .
10103	Write dimensions .
10104	Write the window2 header
10105	Write the default row height .
10106	Write the default column width
10107	Write column info .
10108	Writes the selection of the selected cells .
10109	Write merged cells .
10110	Write the layout layout .
10111	Write sheet protection .
10112	Writes a range of cell ranges .
10113	Writes the page setup .
10114	Write header .
10115	Write footer .
10116	Write hcenter header
10117	Write the VCenter header .
10118	Write the margin left .
10119	Write the margin .
10120	Writes the margin to the page .
10121	Writes the bottom margin .
10122	Write print headers
10123	Write print gridlines
10124	Write grid grid .
10125	Write auto filter info
10126	Write the Guts header .
10127	Writes the header to the writer .
10128	Writes the breaks .
10129	Write protect protection .
10130	Writes the Scenario header .
10131	Write object protect .
10132	Write password .
10133	Insert a bitmap .
10134	Position an image .
10135	Process a bitmap .
10136	Write the zoom scale
10137	Writes the mso drawing .
10138	Write page layout view .
10139	Writes the CF header .
10140	Reads the data from the data .
10141	Loads the object from a file .
10142	Read default value
10143	Read text object .
10144	Read BOF file .
10145	Generate a key from a block
10146	Read the style .
10147	Read a palette .
10148	Reads the marker group data .
10149	Reads the print gridlines .
10150	Read header .
10151	Reads the footer .
10152	Reads the horizontal header .
10153	Read the vertical center .
10154	Read page setup .
10155	Read mul rk row
10156	Reads the shared formula .
10157	Reads a boolean value .
10158	Reads the multilank block .
10159	Reads a label .
10160	Reads the marker data .
10161	Reads the pane .
10162	Reads the selection .
10163	Reads the sheet layout .
10164	Read range protection .
10165	Reads the next line .
10166	Read a BFF8 cell address .
10167	Read a BFF8 cell range .
10168	Get an integer value from the data .
10169	Write the spreadsheet settings .
10170	Sets the diagonal direction .
10171	Load custom fields from XML
10172	Returns a string representation of this object .
10173	Checks if a coordinate exists .
10174	Deletes a cell .
10175	Get the highest column .
10176	Get the highest row .
10177	Clone cell collection .
10178	Remove a row
10179	Remove a column
10180	Stores the current cell .
10181	Add a new cell .
10182	Unset the cell cells .
10183	Get all cache keys .
10184	Create a contact filter
10185	Decode a JSON string .
10186	Deserialize an object from an array
10187	Build authorization header .
10188	Initialize this object .
10189	Writes the VBAelation relationships to the spreadsheet .
10190	Get all SpContainers
10191	Validate parameters .
10192	Parse a string
10193	Get the preview of a query .
10194	Get last query
10195	Get pretty queries
10196	Creates a string from a worksheet
10197	Write a string to a string
10198	Write rows to XMLWriter
10199	Write cell span .
10200	Writes the stylesheet .
10201	Write cell merge value
10202	Sets the horizontal border .
10203	Sets the vertical vertical vertical .
10204	Sets the shrinkToFit value .
10205	Sets the indent .
10206	Sets the read order .
10207	Perform a GET request .
10208	Delete a resource
10209	Perform a request .
10210	Create a new contact
10211	Initialize this object .
10212	Convert this object to a CSV string
10213	Get the shared component .
10214	Set the color
10215	Scans a text element .
10216	Adds a list of items from an array
10217	Adds an item to the collection .
10218	Clean a complex number
10219	Convert a number to a number
10220	Get conversion groups .
10221	Get conversion group units .
10222	Create authentication form .
10223	Get the menu for a given model .
10224	Build menu menu .
10225	Get items for a model
10226	Creates a menu menu for the given model .
10227	Creates a page for a given model .
10228	Resolve model name .
10229	Set the language
10230	Returns a string representation of the context
10231	Write the document to the spreadsheet .
10232	Write a line to a file .
10233	Edit a user .
10234	Main entry point .
10235	Get image mime type
10236	Write default content type
10237	Returns an instance of the calculation engine .
10238	Wrap the result .
10239	Unwrap result .
10240	Calculate the value of a cell .
10241	Calculate formula value
10242	Get matrix dimensions
10243	Checks if a function is implemented .
10244	Returns a list of all implemented function names .
10245	Initializes the report .
10246	Convert ASCII string to UCS
10247	Generate a string from a string
10248	Generate a GUID .
10249	Get a random date
10250	Get driver license
10251	Get first name .
10252	Get last name
10253	Get full name
10254	Get street name
10255	Get the APartment
10256	Get a new Zipcode
10257	Get address .
10258	Get company name .
10259	Get phone number
10260	Get IP address .
10261	Get email address .
10262	Get an Internet .
10263	Get Credit Card
10264	Get Bank Account
10265	Get a person .
10266	Sets the rotation .
10267	Set the end color
10268	Create a new mail
10269	Sets html content .
10270	Sets the reply to a mailing .
10271	Add an attachment .
10272	Add custom properties
10273	Update a custom property
10274	Sets whether or not this cell is locked .
10275	Calculate the width of a text text .
10276	Calculate the width of a column
10277	Returns the default row height for the given font .
10278	Creates an XML document .
10279	Get cell coordinate from string
10280	Returns the absolute reference of a cell .
10281	Returns the absolute coordinate of a cell .
10282	Splits a range .
10283	Build a string representation of a range
10284	Get range boundaries
10285	Get column index from string
10286	Returns a string representation of a column index .
10287	Parse crontab .
10288	Get all cron jobs in the schedule
10289	Execute cron jobs .
10290	Store last run time
10291	Acquires a lock .
10292	Set default timezone
10293	Validate timezone .
10294	Converts excel timestamp to a timestamp .
10295	Convert a day string to a number
10296	Writes a Chart .
10297	Write title .
10298	Write a legend .
10299	Write data labels .
10300	Writes the plot series .
10301	Write the layout .
10302	Write print settings .
10303	Set whether or not the cache can be used .
10304	Resolve a key .
10305	Recursively recursively recursively .
10306	Sets the line style properties .
10307	Set glow properties
10308	Set glow properties
10309	Get the number of open opens .
10310	Get the number of open opens .
10311	Get all recipients .
10312	Gets the count of recipients .
10313	Get a list of clicks .
10314	Get count of clicks
10315	Get the count of clicks .
10316	Get the count of bounces .
10317	Gets the count of bounces .
10318	Get a list of blocks .
10319	Get number of blocks .
10320	Get a list of unsubscribers .
10321	Get number of unsubscribers .
10322	Get count of subscriptions
10323	Create query parameters .
10324	Create count query parameters
10325	Set database options .
10326	Add a new rule
10327	Create a new Rule object from XML .
10328	Returns the nesting level of the container .
10329	Set the images for the post
10330	Replace the image with the given state .
10331	Loads the given URL .
10332	Sets the size of the image .
10333	Initialize this object from XML .
10334	Sets the name of the calendar .
10335	Sets the superscript property .
10336	Calculates the distance between two cells .
10337	Convert two coordinates to two anchors .
10338	Returns the XML representation of this object .
10339	Check if a string is valid
10340	Check error code
10341	Validate columns .
10342	Check if a date is valid
10343	Extracts a range from a definition .
10344	Extracts step from definition .
10345	Apply steps to a range .
10346	Get next timestamp
10347	Get current element .
10348	Rewind the current time .
10349	Validate arguments set
10350	Validate the arguments
10351	Creates a new event channel .
10352	Get source by job .
10353	Fire event on event
10354	Get event name .
10355	Increments the number of attempts .
10356	Lock the lock out .
10357	Highlights a file .
10358	Log an error .
10359	Format backtrace .
10360	Handles fatal errors .
10361	Writes a message to the log file .
10362	Log an exception .
10363	Checks if the node is set .
10364	Set an item in the list .
10365	Log a login request .
10366	Logout .
10367	Register a user .
10368	Recover the user .
10369	Reset the user .
10370	Add a new script
10371	Register the scripts .
10372	Add styles to the theme
10373	Unify the cache
10374	Removes an item from the registry
10375	Validate a form
10376	Determine if all files are processed .
10377	Prepare the files for the given type
10378	Get routes to folder
10379	Check if a file is modified .
10380	Check if a file is modified .
10381	Unify the files
10382	Save external file
10383	Compress the content of a file
10384	Set new params
10385	Unify params
10386	Create initializer .
10387	Creates a new application .
10388	Handle TTL .
10389	Load XML file .
10390	Load XML string
10391	Get system temp directory
10392	Parse XML file .
10393	Check if operation type is valid
10394	Transforms an entity .
10395	Get shop ids
10396	Loads the class metadata .
10397	Process discriminator map .
10398	Performs the replacement of the given string .
10399	Start the command .
10400	Sets an item skip .
10401	Counts the number of sources .
10402	Create a new application .
10403	Called when an item is consumed .
10404	Get value from cache
10405	Sets a pair .
10406	Remove a key from the database
10407	Save a pair .
10408	Add a document parameter
10409	Get urls by document parameter
10410	Creates a temporary file .
10411	Invalidate the cache
10412	Load urls from document
10413	Load urls by type
10414	Create table .
10415	Update table .
10416	Add status field .
10417	Start a pipeline .
10418	Extract value from YAML array
10419	Parse a file
10420	Create a new pipeline .
10421	Add update field to update field
10422	Add a value to insertList
10423	Set trigger type
10424	Parse XML string
10425	Send headers to response .
10426	Output the response body .
10427	Initializes the services .
10428	Initialize storage storage .
10429	Initializes the storage storage for the database .
10430	Creates all the pipelines .
10431	Get shop id
10432	Create service services .
10433	Prepare service configs .
10434	Prepare the service configs .
10435	Perform a POST request .
10436	Returns a LoggerChannel instance .
10437	Inject the template .
10438	Set an attribute .
10439	Get next query line .
10440	Parse query .
10441	Get line type
10442	Create new pipe .
10443	Handle start statement .
10444	Handle a statement .
10445	Handle a parameter .
10446	Detect the query type .
10447	Perform a POST request .
10448	Call if method is enabled
10449	Load configuration data .
10450	Delete a key
10451	Get the TTL for the given key .
10452	Format a question .
10453	Assign a reset token .
10454	Reset password .
10455	Consume a single document .
10456	Set item .
10457	Convert this amount to another .
10458	Validate input .
10459	Finish the job .
10460	Create a new DiffItem
10461	Initialize the example .
10462	Get table name .
10463	Bind parameters to statement
10464	Recursively remove entries from database .
10465	Check if shop is valid
10466	Modify item .
10467	Creates an anonymous anonymous recipient .
10468	Get conversion factor .
10469	Perform a POST request .
10470	Lookup a user .
10471	Check out an item
10472	Check an item
10473	Renew an item .
10474	Lookup an item .
10475	Listen for event .
10476	Push an event .
10477	Display exceptions .
10478	Resolve item action .
10479	Add inline context to the query .
10480	Checks if a diff item is tracked .
10481	Returns a collection of documents .
10482	Get a session by name .
10483	Create a soft bounce message
10484	Create a spamComplaint .
10485	Get table mapping .
10486	Retrieve the mapping for a table .
10487	Applies mapping to the given mapping .
10488	Run a command .
10489	Unbuffer connection .
10490	Creates a new FloatType .
10491	Add a value to this FloatType .
10492	Subtracts the value from the given value .
10493	Multiply a float value
10494	Divide float value
10495	Modify the value of this float .
10496	Returns the exponent of the given value .
10497	Returns the sqrt .
10498	Returns the power of the given value .
10499	Checks if the value is greater than the given value .
10500	Checks if the value is less than the given value .
10501	Auto complete autocomplete .
10502	Set the parameters of a subject .
10503	Set a parameter .
10504	Register log levels .
10505	Register the stylesler .
10506	Register log menu .
10507	Register the Filesystem .
10508	Register logger .
10509	Attach an observer to the observers .
10510	Detach observer .
10511	Notify observers .
10512	Returns the order observers for the priority .
10513	Check if the given observer is update .
10514	Update observer state
10515	Increments the given key .
10516	Create photos collection
10517	Get media identifiers .
10518	Get product photo
10519	Get the user agent user agent .
10520	Adds a constraint to the table .
10521	Build table constants .
10522	Quote the index .
10523	Get the list of parents .
10524	Unset data from data store
10525	Set field value .
10526	Set field value from data
10527	Get IP address .
10528	Get IP address from proxy
10529	Normalize proxy header .
10530	Returns the JSON representation of this collection .
10531	Returns the number of items .
10532	Check if the collection is valid
10533	Get the last item .
10534	Checks if the given action is allowed .
10535	Get data by key
10536	Extract headers .
10537	Prepare headers
10538	Creates a new middleware instance .
10539	Sets many items .
10540	Add a type modification .
10541	Get filter configuration
10542	Create a new dispatch instance .
10543	Set the configuration .
10544	Set the sites .
10545	Set VirtualHost
10546	Set request .
10547	Set resolver .
10548	Set the template
10549	Set application .
10550	Dispatch the application .
10551	Determine the virtual host .
10552	Resolve application .
10553	Find a virtual host .
10554	Handle unknown host .
10555	Find the best match for a given URL .
10556	Build a list of log items .
10557	Dispatch the next job in the chain .
10558	Create a new I18n instance
10559	Setup translator .
10560	Initialize the controller .
10561	Creates a controller .
10562	Build controller name .
10563	Builds the action name .
10564	Creates a new variant .
10565	Format JSON response .
10566	Format JSONp response .
10567	Creates a new media .
10568	Create pagination .
10569	Get order parameters .
10570	Parse a sort string
10571	Check if the cache is valid .
10572	Sets the cache control header .
10573	Register session handler .
10574	Removes a value from the session .
10575	Apply the given text to the output form .
10576	Apply a style to a text
10577	Returns the value of a specific setting .
10578	Convert multiple resources to APIResponse data .
10579	Checks if the given string is equal .
10580	Create data store .
10581	Handle a request .
10582	Build the response .
10583	Dump the response .
10584	Create a temporary directory
10585	Create a temporary file .
10586	Register an entity .
10587	Clean up all entities .
10588	Build a charge from a transaction
10589	Builds a Payout from the given id .
10590	Checks if the given type is a type .
10591	Find product by id .
10592	Display the content .
10593	Convert the message to an array .
10594	Get view data
10595	Initialize view panel data
10596	Initialize the view panel row .
10597	Get the translation record for the given route .
10598	Initialize the request panel
10599	Debug debug code
10600	Returns the URL of this URL .
10601	Edit a query .
10602	Add a query .
10603	Check if a query is a query
10604	Set a query parameter
10605	Add multiple headers .
10606	Add a header .
10607	Check logged in user
10608	Handles password recovery .
10609	Sends classified answer
10610	Check the email address .
10611	Confirm a confirmation token .
10612	Displays a confirmation page .
10613	Authenticate user .
10614	Create a new repository .
10615	Configure the response .
10616	Set the lifetime of the response .
10617	Set the etag .
10618	Show step step .
10619	Send a form to the email .
10620	Boot the provider .
10621	Calculate percentage
10622	Creates a Whitelist object that matches the given class .
10623	Sync migrations .
10624	Check if the given migration file exists .
10625	Build the table .
10626	Get the document root .
10627	Get the cpu cores
10628	Computes the percentages of the given cores .
10629	Get hddd
10630	Get memory information
10631	Get the average load .
10632	Get all files matching the given pattern .
10633	Set the content of the model .
10634	Get an array from a JSON file
10635	Update event manager .
10636	Resolve the paths .
10637	Upload media .
10638	Process uploaded files .
10639	Processes external media URLs .
10640	Create a unique path .
10641	Add a WHERE clause
10642	Add OR WHERE clause
10643	Get the parent directory .
10644	Get relative path .
10645	Bind an instance to the binding .
10646	Execute the request
10647	Build custom messages .
10648	Normalize rules .
10649	Build unique rules .
10650	Get validator .
10651	Validates the model .
10652	Unset multiple keys .
10653	Checks if a property has a public property .
10654	Checks if a property is set .
10655	Group by function .
10656	Sorts the array .
10657	Returns a copy of this collection
10658	Sorts an array of sort functions .
10659	Normalize header name .
10660	Returns a new instance with the given headers .
10661	Remove cookies from the client .
10662	Remove a parameter from the current configuration .
10663	Sets the current parameter type .
10664	Returns a new instance with the given request .
10665	Enable block mode .
10666	Set the report URI .
10667	Build the ONDUP clause .
10668	Build an instance from a string .
10669	Creates an instance from an array .
10670	Converts an array of data into a DOM node .
10671	Convert an object to an array
10672	Add segments to path
10673	Get a cached value from the cache .
10674	Computes the comparison between two strings
10675	Convert a string into a string .
10676	Returns the right string of a string
10677	Split a string into an array
10678	Extracts the prefixed text from a text string .
10679	Calculate the standard deviation for a given slov .
10680	Generate a URL for a URL
10681	OnWriteWrite method .
10682	Convert a string to a string
10683	Get preferred preferred type .
10684	Bootstrap the application .
10685	Get a parameter
10686	Show permission error .
10687	Set default permissions
10688	Configure autoloader .
10689	Setup logging .
10690	Handle exception .
10691	Shutdown the application .
10692	Get a dialect statement
10693	Fixes a table .
10694	Starts the session .
10695	Select a column
10696	Returns an array representation of the message .
10697	Sends the response to the response .
10698	Check if a password is a valid password .
10699	Checks if the given date is a birth date .
10700	Checks if a phone number is a mobile phone number .
10701	Checks if the given number is a birth number .
10702	Calculates the complexity of a password .
10703	Loads a language file
10704	Get the model .
10705	Get entity manager
10706	Get user add form
10707	Apply criteria .
10708	Get many records .
10709	Get many records .
10710	Get model by id
10711	Get many records .
10712	Create a new model .
10713	Save many models .
10714	Update an existing model .
10715	Update model .
10716	Delete many models .
10717	Create model instance .
10718	Paginate the query .
10719	Add a thumbnail .
10720	Remove a thumbnail .
10721	Get the label
10722	Add a count column
10723	Execute raw query
10724	Get total number of rows
10725	Returns a list of all pages of the history .
10726	Returns a list of users
10727	Get the year .
10728	Get the month .
10729	Get the day .
10730	Get hour .
10731	Get the minute value .
10732	Get the number of seconds .
10733	Check if a year is leap year
10734	Set the lower value .
10735	Sets the upper value .
10736	Compares two numbers .
10737	Parse interval string .
10738	Search for all engines .
10739	Checks if the given query is supported .
10740	Initialize parameters .
10741	Build query string .
10742	Get a value from the data .
10743	Get a DateTime object
10744	Get an array of values
10745	Returns an array of object objects .
10746	Send JSON response to response .
10747	Sends items to the response .
10748	Send a 201 response .
10749	Send a response .
10750	Send a verb to the response .
10751	Initialize user .
10752	Get the state of the user .
10753	Returns the mobile mobile phone .
10754	Returns the date of the given user .
10755	Build table options
10756	Add a route .
10757	Get totals .
10758	Prepare header .
10759	Set a column .
10760	Builds a SET statement .
10761	Encode a string
10762	Set alternative account .
10763	Set payment type
10764	Generate the text .
10765	Generate PNG image
10766	Implementation of implode .
10767	Normalizes an account number .
10768	Convert an account to IBAN .
10769	Render the view .
10770	Resolve view name .
10771	Register a media type .
10772	Get a media type match .
10773	Creates a new instance with the given objects .
10774	Login by cookie
10775	Check if login is required
10776	Create a new Node from an array .
10777	Get total size
10778	Create a sprite .
10779	Add session cookie
10780	Add cache limiter headers .
10781	Get asset path
10782	Adds a clause to the query .
10783	Adds a WHERE clause .
10784	Parses the given URI .
10785	Run query .
10786	Run a query
10787	Displays online help .
10788	Get search facets .
10789	Sets search facets .
10790	Quote a string
10791	Register Twig service .
10792	Get user by id
10793	Delete a user .
10794	Process password recovery
10795	Formats a contact
10796	Displays a classified answer .
10797	Returns the encrypted password .
10798	Convert date string to SQL format
10799	Render page history .
10800	Render page history .
10801	Render page history actions
10802	Save page history .
10803	Delete page history
10804	Get BackOffice Users
10805	Builds the configuration .
10806	Get the config .
10807	Select a select statement
10808	Check if the request is renderable
10809	Get the list of templates for this field .
10810	Clear all objects
10811	Bind values to the query .
10812	Call Pipedrive API .
10813	Call a method on the wrapped instance .
10814	Set the data store
10815	Authenticate an authentication method .
10816	Writes messages to stdout .
10817	Writes a log message .
10818	Writes error messages .
10819	Write a comment .
10820	Writes a warning message .
10821	Writes a message to the console .
10822	Output a block of messages .
10823	Ask a question
10824	Confirm a question
10825	Prompt a user .
10826	Print a table
10827	Write a list of words .
10828	Sanitizes a file name .
10829	Creates a DirEntity entity .
10830	Create a file entity .
10831	Creates a file entity from a SplFileInfo object .
10832	Displays the search state .
10833	Adds a join to the table .
10834	Adds a column to the table .
10835	Compile a join clause .
10836	Compile a join .
10837	Build the ORDER BY clause .
10838	Sets a raw value
10839	Deletes the cache .
10840	Get raw data from cache
10841	Prints the greeting
10842	Refresh the sell prices .
10843	Refresh the product s selling price .
10844	Calculate the product price .
10845	Refresh product price
10846	Restore word case .
10847	Runs a command .
10848	Get table name .
10849	Fill document .
10850	Get mapping for given class .
10851	Executes a command .
10852	Print the given content .
10853	Set limit
10854	Build a list of columns
10855	Get location string .
10856	Checks if the given type exists .
10857	Get all registered markers .
10858	Iterate over each marker and return the result .
10859	Cache marker definitions .
10860	Creates a new instance of the given type .
10861	Create a new instance of the given type .
10862	Get the hashes .
10863	Creates an iterator .
10864	Generates a hash of all the hashes .
10865	Set the value of an instance property .
10866	Create new instance
10867	Returns a list of all rows in the database .
10868	Get model by id
10869	Get user by email
10870	Verify the given password .
10871	Check if login exists .
10872	Check if an email exists .
10873	Remove user from database
10874	Returns the hash of the given ID .
10875	Get the hash from a string
10876	Process a user .
10877	Check if a hash is valid
10878	Process the given hash .
10879	Convert an exception to an array
10880	Render previous exception .
10881	Check if path is valid
10882	Aggregate Ternary values .
10883	Report an exception .
10884	Report an error .
10885	Make an error
10886	Starts the session .
10887	Get a session .
10888	Add an option .
10889	Parse the options .
10890	Get input from stdin
10891	Returns the syntax of the command .
10892	Checks if the value is prime .
10893	Add a URI .
10894	Get a URI .
10895	Add a collection to the collection .
10896	Set the host name .
10897	Set the scheme .
10898	Get the scheme .
10899	Save entity data
10900	Validate the model .
10901	Load all entities .
10902	Load a relation .
10903	Delete a record
10904	Checks if the directory is empty .
10905	Get list of files
10906	Remove directory .
10907	Get query parameters
10908	Set an instance of the binding .
10909	Sets the injects .
10910	Add a decorator .
10911	Adds a marker to the definition .
10912	Convert date time to UTC timezone
10913	Set a variable .
10914	Execute the controller .
10915	Find the controller .
10916	Log script output .
10917	Check if the module is active
10918	Get user entity entity .
10919	Returns a list of all stop words .
10920	Get a string from a language .
10921	Set the headers .
10922	Sets the rows .
10923	Render the table .
10924	Render the line
10925	Renders a row .
10926	Render a cell .
10927	Update width .
10928	Execute SQL statement
10929	Get count of rows
10930	Count rows from table
10931	Count the number of rows in a table
10932	Checks if a given column has a given column value .
10933	Resolve params .
10934	Check if version is PHP .
10935	Check email .
10936	Authenticate user .
10937	Returns the obfuscated email address .
10938	Populate log entries .
10939	Get the value for a given key .
10940	Get the response .
10941	Get a modified response .
10942	Resets the current time .
10943	Encode a raw string .
10944	Called by prerenderEvent
10945	Called after a prerender event .
10946	Get body params
10947	Returns the accepted content types .
10948	Get the CSRF token
10949	Load the csrf token
10950	Combines two tokens .
10951	Validate a CSRF token
10952	Write the body to the response .
10953	If the request is not modified .
10954	If the request is not met .
10955	Redirect to the given URL .
10956	Replace params with params
10957	Move the file to the list
10958	Process files .
10959	Process a file .
10960	Prepares the file path to the given file .
10961	Restores the response from the response .
10962	Check if a log date is invalid .
10963	Get the uri .
10964	Get the host name
10965	Get the standard port .
10966	Get the scheme .
10967	Check if the current request is SSL
10968	Get the path of the request .
10969	Get query string
10970	Get request parameter
10971	Get a header value
10972	Get authentication username .
10973	Get auth password .
10974	Save the location .
10975	Populate the location owner .
10976	Send verification .
10977	Verify a user .
10978	Set verification code .
10979	Update entity .
10980	Remove entity .
10981	Get all log items
10982	Get memory information
10983	Get disk usage
10984	Get host ID
10985	Get PHP version
10986	Get max upload size
10987	Dump a value .
10988	Builds the configuration tree .
10989	Sets data for a given key .
10990	Checks if the given extension exists .
10991	Get file name .
10992	Splits the name of the file .
10993	Get file size
10994	Returns the size of the file .
10995	Write content to file
10996	Prepend a string to the file .
10997	Read a file .
10998	Get line count .
10999	Checks if the given locale matches the given locale .
11000	Returns the best locale based on the Accept header .
11001	Set the locale
11002	Set the redirect URL .
11003	Returns a new URL .
11004	Get path from url
11005	Sets the sandbox .
11006	Set the referer policy
11007	Set the URI for the SRI .
11008	Add report URI .
11009	Add a plugin type .
11010	Add default src src
11011	Get header value .
11012	Import schema file .
11013	Import data file .
11014	Set value .
11015	Convert seconds to time
11016	Add default listeners
11017	Run controller .
11018	Loads the view .
11019	Get route .
11020	Handle the event .
11021	Find tasks .
11022	List available tasks .
11023	Run a task
11024	Build group by clause
11025	Checks if a facet is set .
11026	Sets the country .
11027	Get the city .
11028	Sets the address field .
11029	Render geolocation
11030	Get the name of the submit model .
11031	Ensures the fields for the form .
11032	Check if the given attribute is supported .
11033	Initialize configuration .
11034	Load params from file
11035	Check error level
11036	Returns the label of an element
11037	Sets the reduction value .
11038	Walk through all elements in the tree .
11039	Store a node in the list .
11040	Walk through all elements in the tree .
11041	Store a leaf node .
11042	Store a text element in the list
11043	Check if a character is a space .
11044	Merge two masks .
11045	Read content from file
11046	Parse a list of containers
11047	Get value from parent variable
11048	Add a system variable to the datatree .
11049	Parses the info string .
11050	Protect spaces .
11051	Builds all data from a datatree
11052	Builds the contents of a datatree
11053	Format a datatree
11054	Print the contents of a datatree
11055	Get asset bundle .
11056	Generate url .
11057	Generate a path .
11058	Get data store
11059	Get all files in a given path .
11060	Get the value of this field .
11061	Get supported encodings .
11062	Checks if the given encoding is supported .
11063	Returns the encoding of the given encoding .
11064	Upper to upper case
11065	Get the icon .
11066	Add a mixin method .
11067	Compile mixins .
11068	Send a message
11069	Get the status data for the given identifier .
11070	Set a boolean value .
11071	Set an integer value .
11072	Set a float value .
11073	Set a string value .
11074	Set a date time .
11075	Set an array value .
11076	Get the HttpClient
11077	Get http adapter
11078	Formats a phone number .
11079	Get month name
11080	Get day name
11081	Generate a unique GUID .
11082	Generate a GUID for a namespace .
11083	Generate a password
11084	Delete a directory
11085	Unformat bytes .
11086	Get the octets of the given option .
11087	Get user platform .
11088	Get user browser .
11089	Checks if the given date is a valid holiday .
11090	Get the greeting for the given time .
11091	Calculates the distance between two points .
11092	Translate a text into a human readable string .
11093	Rewrite a string
11094	Get date from birth number
11095	Generate a pin
11096	Send a message to a room
11097	Returns the seconds between two dates .
11098	Calculate seconds between two dates .
11099	Returns the maximum number of items .
11100	Fill array with given size .
11101	Get country code
11102	Returns the country code for the given country code .
11103	Filters the results of the given scope .
11104	Registers the jQuery js plugin .
11105	Adds a table to the query .
11106	Add a having clause
11107	Checks if the request should be throttled .
11108	Log a request .
11109	Get all extensions .
11110	Find extensions directories .
11111	Executes the migration .
11112	Get migration files .
11113	Run all migrations .
11114	Rollback migrations .
11115	Reset all migrations .
11116	Drops the repository .
11117	Rollback migrations .
11118	Rolls a migration .
11119	Run the migration .
11120	Run a migration .
11121	Get pending migrations .
11122	Returns the last location of the movements .
11123	Get the current position of this game .
11124	Creates a new instance of Notify .
11125	Display the settings .
11126	Update settings .
11127	Render view .
11128	Get class name .
11129	Converts an array of arguments to a string .
11130	Match template arguments .
11131	Get root Backslash path .
11132	Execute the query
11133	Calculate the query
11134	Calculate the SELECT clause
11135	Calculate UPDATE statement
11136	Calculate INSERT query string
11137	Calculate WHERE clause
11138	Calculates the CREATE TABLE .
11139	Get set item
11140	Join the query string into a join string
11141	Get type string
11142	Get attribute attributes
11143	Run all classes .
11144	Process a class
11145	Scan a directory
11146	Move the object to the given location .
11147	Get a list of objects from a given location .
11148	Get all display objects for a given area
11149	Process the request .
11150	Sets the cache state .
11151	Get ExtDirect API .
11152	Set request parameters
11153	Returns true if probability is true .
11154	Get a random key from an array .
11155	Returns the value of the given values .
11156	Returns the value of an array .
11157	Handle a URL .
11158	Get video id .
11159	Creates an http request .
11160	Resolve a query .
11161	Get replacements .
11162	Get key from config
11163	Get response format .
11164	Get the published format .
11165	Get the duration format .
11166	Build header header
11167	Generate API .
11168	Get the api as an array
11169	Register the related models .
11170	Refresh the current session
11171	Get the filters .
11172	Encrypt the data using the given key .
11173	Decrypts data from a string
11174	Hash a string
11175	Verify the given hash .
11176	Generate random string
11177	Create a new file .
11178	Get the extension
11179	Get an item from cache
11180	Sets a cache value .
11181	Get all actions
11182	Cache a collection of actions .
11183	Get all actions
11184	Generate actions .
11185	Add a route to the array
11186	Set private chat updates .
11187	Get value from array
11188	Set a value in an array
11189	Parse json string
11190	Get transaction data
11191	Process the route
11192	Checks if the controller exists .
11193	Set the path to the site url
11194	Recursively fix the tree .
11195	Returns the result as an array .
11196	Checks if a value is set .
11197	Add an item to the collection
11198	Deletes a resource .
11199	Removes a delete from the container
11200	Check if the given item is a singleton
11201	Fetches the offset at the given offset .
11202	Returns the result as an array .
11203	Returns the maximum value of the collection .
11204	Returns a subset of the collection .
11205	Merge data into array
11206	Apply a callback to the collection .
11207	Returns an iterator over the content .
11208	Get value from data
11209	Login a subject .
11210	Add a registry .
11211	Check if a key exists in the cache
11212	Get a value from the cache .
11213	Remove the registry from the registry .
11214	Returns the number of records in the database .
11215	Call static method
11216	Set a singleton name
11217	Get route method .
11218	Dispatch route .
11219	Invoke a callback .
11220	Clean up resources .
11221	Validate route validator
11222	Checks if the request is valid
11223	Checks if the route matches .
11224	Get route routes .
11225	Get error callback
11226	Get the short name of a class .
11227	Sets the properties of this object .
11228	Get the URL for a section
11229	Initializes the client .
11230	Get a section
11231	Perform a POST request .
11232	Get location information
11233	Run the command .
11234	Check if value is null .
11235	Check if a reference is a reference loop .
11236	Redirect to the url
11237	Save the URL to the session
11238	Get the redirect URL .
11239	Run the validation .
11240	Define a custom check
11241	Check if a given field is valid
11242	Calls the given method .
11243	Sets the direction of the rotation .
11244	Set up the start of the game
11245	Get all migrations
11246	Get all migrations .
11247	Get the last migration
11248	Get all migrations .
11249	Log a migration .
11250	Delete migration .
11251	Get last batch number
11252	Check if repository exists
11253	Executes a callback .
11254	Drop all views .
11255	Run the given class .
11256	Resolve a class .
11257	Returns a list of all available seeds .
11258	Creates an invoker .
11259	Convert pascal name to snake case
11260	Convert snake name to camelCase
11261	Add a method to the collection
11262	Main entry point .
11263	Check if an instance is unique .
11264	Render a property .
11265	Load a model .
11266	Load a library
11267	Generate a view
11268	Creates a new instance .
11269	Gets the path for the given start point .
11270	Displays a template .
11271	Render a template .
11272	Handle response content .
11273	Sends a request .
11274	Install migration .
11275	Build the response .
11276	Get error message
11277	Get stubs .
11278	Populate the stub .
11279	Applies data to the view .
11280	Get error string
11281	Returns a random float .
11282	Populate the model .
11283	Populate model attributes
11284	Populate non - model data
11285	Checks if a placeholder attribute is a placeholder .
11286	Get the query object for the given attribute .
11287	Get the value of a custom attribute
11288	Get a relation .
11289	Get the model for a given attribute
11290	Get the models for a given attribute
11291	Get attribute data
11292	Get the attribute data for the given attribute .
11293	Get attribute data
11294	Get data attributes
11295	Get attribute value
11296	Get attribute value .
11297	Get models from table column
11298	Get all models from a custom relationship
11299	Get full class name
11300	Fetch data from database
11301	Get field name .
11302	Load all model attributes
11303	Checks if a path exists .
11304	Get name from string
11305	Validate email address
11306	Get player data from database
11307	Send a message to chat .
11308	Get entity from body
11309	Populate stub .
11310	Sets the mapping of messages .
11311	Returns the message for the given code .
11312	Build the auth string .
11313	Build a base string .
11314	Get normalized URL .
11315	Returns the normalized parameters .
11316	Handle use request
11317	Log a message .
11318	Get the base data
11319	Execute a SQL query
11320	Get a single row
11321	Get a single row
11322	Get the annotation class for the given action .
11323	Get the annotation method for the given request .
11324	Convert a string to a string
11325	Check if a string contains a suffix .
11326	Remove suffix from string
11327	Get the list of locations .
11328	Set the form field .
11329	Get human readable field .
11330	Returns whether the field is multiline .
11331	Set model .
11332	Sets the attributes of the model .
11333	Set field format .
11334	Get the value of the form .
11335	Returns the value of the form .
11336	Returns the base namespace for the module .
11337	Get migration class name .
11338	Get the primary key for a table .
11339	Get the module set of modules
11340	Generate rules for a table .
11341	Get model mapping .
11342	Set the designer .
11343	Add a new form field
11344	Remove a field .
11345	Render the form .
11346	Renders the fields .
11347	Render a field .
11348	Get a field by name .
11349	Sets the data .
11350	Get the data for this field .
11351	Submit the form .
11352	Get errors .
11353	Compress a dwnl snapshot
11354	Generate proxy class .
11355	Returns the value for the given name .
11356	Get the input filter .
11357	Add a block to the list .
11358	Remove a block .
11359	Update a permalink .
11360	Sets the sort keys .
11361	Check if a button is clicked
11362	Generates a mail tag
11363	Get mail list
11364	Generate a header tag
11365	Get list of addresses
11366	Format text .
11367	Get the mime type of a file .
11368	Deduplicate email addresses
11369	Check email arguments
11370	Convert a char to an ASCII string .
11371	Destroy a menu .
11372	Add a service definition .
11373	Creates a method injection .
11374	Get the injection hint for the given parameter .
11375	Check file upload
11376	Load all submodules .
11377	Get page text
11378	Add text to page
11379	Modifies the text content .
11380	Delete text container
11381	Renders the form .
11382	Creates a new pipeline .
11383	Build a middleware instance .
11384	Resolve all stages .
11385	Signs a URL to Google .
11386	Executes the query for a given calc .
11387	Hydrate the file .
11388	Create a BlockManager instance
11389	Get the log
11390	Get the status of the log .
11391	Create the main menu .
11392	Returns the instance of this instance .
11393	Activate error handler
11394	Sets the kind of report .
11395	Get the translated error code .
11396	Set file name in error file
11397	Parse fault .
11398	Removes a block from the page .
11399	Get custom field by type
11400	Creates a new instance from data .
11401	Sets the start at the beginning of the query .
11402	Get application code
11403	Get the app code for the given scene .
11404	Change current theme
11405	Create a CacheManager
11406	Create a new Item
11407	Trigger trigger events
11408	On bootstrap .
11409	Show the view
11410	Update a tag .
11411	Get users of a tag
11412	Batch user tags .
11413	Batch untagged users .
11414	Decrypt data .
11415	Calculate bonus bonus
11416	Save log operands
11417	Add piwik code
11418	Creates a new instance of the environment .
11419	Get the values for the given fields .
11420	Get cache item
11421	Constructs a SELECT SQL SELECT clause .
11422	Get information about a user .
11423	Get user list
11424	Get a list of available users .
11425	Get a remark .
11426	Returns a list of all blacklisted users .
11427	Converts this form to an object .
11428	Converts the items to an array .
11429	Run the route .
11430	Run a route .
11431	Get a GET request .
11432	Perform a HEAD request .
11433	Perform a query .
11434	Register resources .
11435	Delete a file
11436	Remove directory
11437	Initialize the application .
11438	Get default value
11439	Get all errors
11440	Get information about the current page .
11441	Set registry variable
11442	Get a value from the registry
11443	Get message by id
11444	Set the transport .
11445	Get the transport .
11446	Get the spooler instance
11447	Show a list of tables .
11448	Select one or more tables
11449	Fill the model attributes .
11450	Get the parent URI .
11451	Get parent key name .
11452	Get all actions .
11453	Get the public ID attribute .
11454	Autoload the model .
11455	Get device summary
11456	Get a list of device devices .
11457	Get a summary of a page
11458	Get a list of page summary statistics
11459	Attach a file to the file
11460	Sends the mail
11461	Enable an exception .
11462	Log a notice message .
11463	Displays an exception .
11464	Throw an error .
11465	Asserts the given expression .
11466	Writes a log file to the log file .
11467	Initializes the clear view .
11468	List responses .
11469	Show a response .
11470	Store a new question .
11471	Edit a response .
11472	Update the question .
11473	Delete a question .
11474	Sets the object .
11475	Sets the object type .
11476	Authenticate the user
11477	Boot the plugin .
11478	Add template slots .
11479	Send a request .
11480	Get json body
11481	Save the page .
11482	Save all pages .
11483	Returns a factory for the given class .
11484	Get the arguments for a function .
11485	Resolve a class argument .
11486	Resolve non - class argument .
11487	Call resolving callbacks .
11488	Set session name .
11489	Starts the session .
11490	Destroy the session
11491	Get all the keys
11492	Removes a value from the session .
11493	Removes all keys from the collection .
11494	Log a message .
11495	Show the page .
11496	Returns the current time .
11497	Get all records
11498	Locates a row by value .
11499	Creates a bulk insert .
11500	Setup database adapter
11501	Load the container .
11502	Displays a comment .
11503	Create a delete form .
11504	Set the slots for the given connection .
11505	Returns a list of slot slots .
11506	Set a connection to the connection .
11507	Serve the request .
11508	Validate a token
11509	Parse the message from the request .
11510	Parse a program .
11511	Unescape a string .
11512	Displays a request .
11513	Reset the password .
11514	Get named params .
11515	Get a named parameter .
11516	Update metadata .
11517	Generate an iOS pin icon .
11518	Generate HTML for HTML5 .
11519	Generate AndroidPinicon .
11520	Generate the WindowsPinicon .
11521	Removes event listeners
11522	Get item by name
11523	Parse bot list
11524	Parse a bot .
11525	Get DOM from url
11526	Resolve a template file .
11527	Register package helpers .
11528	Register custom helpers .
11529	Replace variables in a string
11530	Set permissions for a file .
11531	Returns a list of all slots in the given source directory .
11532	Cancels a list of folders .
11533	Read a file .
11534	Write content to file
11535	Bootstrap module .
11536	Cast a time to an instance
11537	Get request parameter
11538	Sets the items .
11539	Add a new block
11540	Resolve add options .
11541	Edit a profile .
11542	Confirm email .
11543	Change password .
11544	Confirm password reset .
11545	Change email confirmation .
11546	Change security question .
11547	Add a group .
11548	Get a group by name .
11549	Execute action .
11550	Prepare list of pagamentos
11551	Save a Consignment .
11552	Remove a Consignment .
11553	Dispatch dispatch confirmation .
11554	Cancel a Consignment .
11555	Get bonus totals
11556	Find a namespace parameter .
11557	Detects the namespace .
11558	Save the instance to the cache .
11559	Set week words
11560	Set shortcuts .
11561	Set the units .
11562	Get the week words for the given language .
11563	Converts a text string to a word break .
11564	Process a weak word .
11565	Get the application .
11566	Registers the given modules .
11567	Registers a dependency injection .
11568	Returns the number of records .
11569	Search for attachments
11570	Load an attachment
11571	Handles page editing .
11572	Process a structure .
11573	Send response headers
11574	Generates an HTML tag .
11575	Register the registration .
11576	Connect to a user
11577	Confirm confirmation .
11578	Resend confirmation .
11579	Configure logger .
11580	Returns the status of the tracker .
11581	Bootstrap CMS .
11582	Get the service definition .
11583	Convert an array to an instance
11584	Execute a calculation
11585	Sets the spooling directory .
11586	Start a new task
11587	End the task .
11588	Returns the duration of all tasks .
11589	Returns the matrix .
11590	Prints a title
11591	Upload a file to storage .
11592	Get full path .
11593	Get page data
11594	Add a new page .
11595	Get page ID
11596	Execute a dwnl bonus
11597	Set cache type
11598	Returns cache object
11599	Load the main config file .
11600	Get config value
11601	Get the base URL .
11602	Get the root component root .
11603	Align all pages in the theme .
11604	Notify the callback .
11605	Get the hash generator for the given description .
11606	Returns the name of the class .
11607	Update the profile .
11608	Confirm an email .
11609	Disconnect a network .
11610	Connect to a client .
11611	Moves the uploaded file .
11612	Resolve container .
11613	Create a new user .
11614	Update a nickname .
11615	Delete an account
11616	Invite invite .
11617	Get a list of records
11618	Compress phase 2 .
11619	Returns the current site .
11620	Get the current user
11621	Get the view
11622	Create a new API instance
11623	Close the session .
11624	Gets the content for the given operation .
11625	Process the content of a social media .
11626	Check if the process is running
11627	Lock the job .
11628	Get lock file .
11629	Create a write operation
11630	Returns a list of transactions .
11631	Get the transitions for a given period
11632	Group PvTrans data
11633	Save log operands
11634	Bind a page to a device .
11635	Get a list of pages for a device .
11636	Get devices by page id
11637	Get the table registry .
11638	Gets the authorities .
11639	Get column settings .
11640	Get current data
11641	Get column names .
11642	Get total items
11643	Get formatter .
11644	Get the connection .
11645	Adds a method getter to the getter .
11646	Generate a doc block .
11647	Parse a service file .
11648	Authenticate the user
11649	Creates a select select query
11650	Validate the result .
11651	Creates a product from the given data .
11652	Initialize REST route
11653	Initialize the database resource .
11654	Initialize multi db resources .
11655	Parse a DSN string .
11656	Get the name of the widget .
11657	Make a redirect
11658	Add entries to a file
11659	Remove entries from a file
11660	Read a string from a string
11661	Read from a file
11662	Save properties to XML
11663	Save properties to file
11664	Validates the given values
11665	Filter the element .
11666	Add a function .
11667	Add default function .
11668	Creates a remote client .
11669	Create an aggregate connection .
11670	Get a client by selector .
11671	Execute raw command .
11672	Handle error response .
11673	Checks if an offset exists .
11674	Set configuration options .
11675	Get the homepage template .
11676	Get a translation key .
11677	Check if a file is loaded .
11678	Loads a translation file .
11679	Log a message .
11680	Set path .
11681	Reads the data from the cache .
11682	Initialize action .
11683	Push a message .
11684	Register commands .
11685	Get cache path
11686	Gets the widget for a given location .
11687	Returns an ordered list of periods ordered by periods .
11688	Set the center .
11689	Checks if the period is valid .
11690	Process auth .
11691	Get meta data
11692	Builds a list of requests .
11693	Run the compilation .
11694	Get the compiler .
11695	Restore cache files .
11696	Normalise source files
11697	Translate a key .
11698	Get a service .
11699	Add a service .
11700	Get the cache pool .
11701	Get a component .
11702	Add a new element
11703	Returns the form container
11704	Returns the form object in the form
11705	Synchronize entity .
11706	Validate validators
11707	Displays the user .
11708	Create a new user
11709	Update a user .
11710	Confirm user confirmation .
11711	Block block .
11712	Performs AJAX validation .
11713	Get the data for the current period
11714	Get token from server
11715	Gets the cached token .
11716	Main entry point .
11717	Load all commands from a directory .
11718	Execute basic fetch query .
11719	Save the queue .
11720	Returns the number of posts .
11721	Get Carousel items
11722	Get all posts
11723	Collects the activity .
11724	Prepare the request .
11725	Assign a value to the view .
11726	Render the view .
11727	Set taxonomy id
11728	Fetch attribute value
11729	Update an attribute
11730	Validate the password .
11731	Generate slot .
11732	Generate blocks for the given array .
11733	Publish a published page .
11734	Hide page .
11735	Updates the OBDL
11736	Set url address
11737	Get domain .
11738	Normalize the address .
11739	Get the MD5 address .
11740	Export persons .
11741	Get person by id
11742	Add a new page .
11743	Remove a page .
11744	Register a new account .
11745	Get information about a ticket .
11746	Get the device .
11747	Gets the group .
11748	Get the page .
11749	Get the material .
11750	Get the relation .
11751	Get the stats .
11752	Open a comment .
11753	Close comment .
11754	List comments .
11755	Mark a message .
11756	Unmark a message .
11757	Delete a comment .
11758	Reply a comment .
11759	Delete a reply .
11760	Get array of properties
11761	Set property value
11762	Get property value
11763	Replace the stages with the given needle .
11764	Handle a stage .
11765	Remove an expression .
11766	Returns the index of the column .
11767	Clears the server list .
11768	Update the sentinel .
11769	Get a connection by role .
11770	Switch to the current node .
11771	Attempts to retry the command .
11772	Resolve module dependencies .
11773	Finds a component module by its type .
11774	Returns the maximum percentage for a personal bonus .
11775	Get the boolean value .
11776	Get the question .
11777	Append choice .
11778	Start the application .
11779	Build the class .
11780	Convert data to entity
11781	Converts an entity to an embedded document .
11782	Generate the source code for this node .
11783	Add a new page .
11784	Update a page .
11785	Get pagination
11786	Delete a page
11787	Get age by date
11788	Updates the TBDL
11789	Show files .
11790	Clears the given name .
11791	Set the email address .
11792	Set email address
11793	Sets the cc .
11794	Set bcc .
11795	Set attachment
11796	Set the subject subject .
11797	Set text
11798	Set html text
11799	Set the reply to the email address
11800	Replace the given substring .
11801	Hook to render a chart
11802	Import object .
11803	Import from app
11804	Check if a relation is a relation .
11805	Get the query .
11806	Chunk the query .
11807	Get a list of records .
11808	Paginate the query .
11809	Fill the relation config .
11810	Load the foreign object .
11811	Load local object .
11812	Sets the log in log .
11813	Get a list of items
11814	Show the installation step .
11815	Step 2 . 2
11816	Sets the step .
11817	Install the user .
11818	Set the service locator
11819	Add app dependencies .
11820	Get default value
11821	Prepare the items .
11822	Render admin header .
11823	Replace the middleware with the given middleware .
11824	Detect the encoding .
11825	Add BOM to the URI .
11826	Removes the BOM file .
11827	Returns an array of BOMs .
11828	Set URI .
11829	Get tags by tag
11830	Expand all items in the array .
11831	Creates a new instance of the given command .
11832	Get the cache
11833	Restore the configuration
11834	Store configuration .
11835	Save a user .
11836	Adds an action to the group .
11837	Get image url
11838	Sets a cache value .
11839	Convert image to jpeg image
11840	Get image size
11841	Extracts input from request parameters
11842	Get bind parameters
11843	Gets the ID for the given date type .
11844	Add an APPerson object .
11845	Returns a random address .
11846	Reset a column
11847	Save this record to the database .
11848	Check if the row is read only .
11849	Get the settings from the given namespace .
11850	Create fault response
11851	Show the response
11852	Set the layout .
11853	Redirect to given uri .
11854	Get a header by name .
11855	Get URL path .
11856	Check if the request is AJAX request .
11857	Remove a cookie
11858	Returns the handler associated with this object .
11859	Gets the handling of the given object .
11860	Sets the companion object .
11861	Get the companion key .
11862	Sets the paired data item .
11863	Set the handled data item .
11864	Saves session data .
11865	Get session data .
11866	Lock the given session identifier .
11867	Unlock the given session identifier .
11868	Destroy a session .
11869	Clears all files .
11870	Hide page .
11871	Builds a custom field .
11872	Sets the data key .
11873	Get access token .
11874	Renew the access token .
11875	Get module dir
11876	Returns a dump of a variable .
11877	Dump query result
11878	Gets the dump content .
11879	Returns the trace of the current context .
11880	Get the Runner instance .
11881	Run the application .
11882	Prepare field options
11883	Get ticket cache key .
11884	Get module handler
11885	Add a placeholder .
11886	Add a child structure .
11887	Get user identity .
11888	Gets the familiarity of the object .
11889	Get paginated paginate .
11890	Add required attributes .
11891	Creates a new custom field .
11892	Create new CustomField
11893	Creates an edit form .
11894	Encrypt data
11895	Decrypts a string
11896	Generate a new salt .
11897	Get the status log .
11898	Calculate the estimated time remaining time .
11899	Get the duration of the current time .
11900	Returns true if the object is most recent .
11901	Builds the URL .
11902	Caches the given asset .
11903	Get the description of the log interface .
11904	Get the log model .
11905	Get field type .
11906	Handle the middleware .
11907	Check if the app is full .
11908	Gets the changed time .
11909	Get required parameters .
11910	Get the default parameters .
11911	Removes a string from a string
11912	Set industry .
11913	Returns the current entry .
11914	Add a dynamic control .
11915	Creates an instance from a reader .
11916	Get the response .
11917	Creates a new Query instance .
11918	Register an injectable function .
11919	Gets the attribute value .
11920	Handles page removal .
11921	Recursive diff between two arrays
11922	Returns the total amount .
11923	Returns the price of the product .
11924	Update the permalink .
11925	Generate generated files .
11926	Sets the autoload directory .
11927	Run a single interface
11928	Get data interface
11929	Set data interface
11930	Returns the active custom fields .
11931	Generates a field .
11932	Generates an option .
11933	Render a view .
11934	Iterate over all elements in the array .
11935	Get primary key .
11936	Get the primary key .
11937	Find a query
11938	Find all records .
11939	Find one record .
11940	Returns the URL for the route
11941	Validate action .
11942	Validate the argument .
11943	Validate URL .
11944	Validate a GET request .
11945	Handle an event message .
11946	Get current user .
11947	Returns the priority of this widget .
11948	Get the signature for the request .
11949	Creates a base URL .
11950	Build authorization header .
11951	Get OAuth params
11952	Replaces the placeholders in the placeholders .
11953	Delete object from database
11954	Reset all properties of this object
11955	Generate routes .
11956	Adds a queue to the queue .
11957	Add renderer .
11958	Removes an element from the collection .
11959	Splice the collection .
11960	Reduce all elements in the collection .
11961	Iterate over all elements in the collection .
11962	Parse connection configuration .
11963	Set parameter value
11964	Check if a connection is a string
11965	Generate password hash .
11966	Renders the slots .
11967	Get the PID by name .
11968	Get auth class
11969	Set auth class
11970	Extend the expiration time .
11971	Handle command .
11972	Validate parameters .
11973	Check if the generic parameter is a generic parameter .
11974	Check if the first parameter is valid .
11975	Check if the second parameter is valid
11976	Handle command help .
11977	Get the interface object
11978	Transform a message .
11979	Transform a message .
11980	Query API .
11981	Check if the resource is accessible .
11982	Acquire a resource .
11983	Get configuration value .
11984	Boot the application .
11985	scanf string
11986	Read data from the stream
11987	Checks if the current line is a valid line .
11988	Reads a line from the stream .
11989	Sorts an entity .
11990	Toggle filter .
11991	Validates a slug .
11992	Convert the collection to an array .
11993	Sort collection by key
11994	Add data to the pipe .
11995	Get catalog from catalog data
11996	Generate a Doctrine entity
11997	Generate Doctrine2 entity
11998	Generate a Phalconcon .
11999	Perform a Phalcon query
12000	Execute Doctrine Query
12001	Convert Doctrine entity to query
12002	Generate a random hash
12003	Get session key
12004	Convert an object to an array
12005	Archive a block
12006	Returns an array of all the authorizations
12007	Get user s permissions
12008	Returns the messages for the given domain .
12009	Set the title .
12010	Add a link .
12011	Add block theme .
12012	Add Doctrine configuration .
12013	Instantiate compiler .
12014	Execute a connection
12015	Checks if the client is valid .
12016	Unwatch the monitor .
12017	Calculate the cache filename .
12018	Setup the queue .
12019	Adds the required properties .
12020	Adds the API method to the class .
12021	Generate parameter set .
12022	Generate check scope method .
12023	Add accessor methods .
12024	Generate constructor method .
12025	Generate the execute fragment
12026	Generates the docblock for the given method description .
12027	Add a command to the class .
12028	Adds an async method to the class .
12029	Generates a block filter block .
12030	Generate filter method .
12031	Add a create method to the class .
12032	Add dispatch method .
12033	Generates the dispatch method .
12034	Adds a method to the class .
12035	Create method generator .
12036	Add a method to translate response to an exception .
12037	Generate the class
12038	Remove a key from the session
12039	Send headers
12040	Get current user
12041	Returns the full name of the user .
12042	Update a profile
12043	Search for users
12044	Check if a question is view .
12045	Determine if the user has a question .
12046	Get the thumbnail of a video .
12047	Add a range
12048	Renders an element .
12049	Shows an image .
12050	Initialise HTTP client
12051	Creates a renderer exception .
12052	Get relation model field .
12053	Set a module .
12054	Remove a container
12055	Get module .
12056	Get labels .
12057	Get the target target .
12058	Returns the list of allowed targets .
12059	Sets the deletion target .
12060	Returns the label of the target .
12061	Returns the permissions for the given request path .
12062	Migrate a module .
12063	Checks if the given post is valid .
12064	Set flash bag
12065	Destroy the session
12066	Invoke RPC call
12067	Fetch all projects
12068	Fetch a project .
12069	Update project .
12070	Create a project .
12071	Get cfg params by rank
12072	Get customer IDs
12073	Returns a list of all registered customer ranks .
12074	Get a single child resource .
12075	Get a child resource .
12076	Store a child .
12077	Store a child in the database .
12078	Associates a child .
12079	Detach a child .
12080	Update a child .
12081	Delete a child .
12082	Gets a list of Media objects .
12083	Get all media objects
12084	Get an object from an Entity
12085	Stores a media object .
12086	Save configuration settings
12087	Create a validator .
12088	Check if the response is view .
12089	Determine if the given user is destroy .
12090	Sends the response to the request .
12091	Get the client
12092	Generate a route .
12093	Get domain URL .
12094	Get the md5 address .
12095	Shortcut to shorten text
12096	Generate sign code
12097	Check if the signature is valid
12098	Return a human readable date .
12099	Calculates the price for a given price .
12100	Calculates the price for a given taxon .
12101	Set the Accept header
12102	Set maximum size .
12103	Convert PHP size to bytes
12104	Handles the command .
12105	Handle an exception .
12106	Throw an error .
12107	Get page by name
12108	Change page from request
12109	Renames a page .
12110	Deletes a page .
12111	Persist all pages .
12112	Get foreign data model .
12113	Get unmapped foreign keys .
12114	Load foreign data items .
12115	Returns the tree tree of the given Throwable .
12116	Get a short name from a FQN
12117	Display a console exception .
12118	Get parameter value
12119	Get customer list
12120	Called when the view is created .
12121	Get last modified date
12122	Sets the last modified time .
12123	Called when an entry is updated .
12124	Get all languages .
12125	Returns the alias id for the given language .
12126	Validate the value
12127	Get a setting by name .
12128	Runs the command .
12129	Set the failed validation .
12130	Clears the timer .
12131	Handle errors .
12132	Add params to url
12133	Create a SettingsService instance
12134	List all questions .
12135	Display a question .
12136	Edit a question .
12137	Update a question .
12138	Deletes a question .
12139	Render widget .
12140	Get a message from the cache .
12141	Signup a user .
12142	Get the provider instance .
12143	Get user .
12144	Login user .
12145	Set a setting value
12146	Get the value of a setting .
12147	Check if an exception has been registered .
12148	Get exception code .
12149	Get reserved codes .
12150	Check reserved codes .
12151	Get role type .
12152	Determine if the user has access to the parent .
12153	Get the list of possible roles .
12154	Get required roles .
12155	Get the initial role .
12156	Get owner key .
12157	Get object type .
12158	Returns the level of the parent object .
12159	Get Title
12160	Get details widget .
12161	Returns true if the collector item is empty
12162	Get the form for the primary model .
12163	Get form segment .
12164	Create the database table .
12165	Create the permissions table .
12166	Create menu table .
12167	Create menu group .
12168	Create the property values for the given group .
12169	Create the property values table .
12170	Create tables .
12171	Get default factory for given class .
12172	Get default factory for given callable .
12173	Add reflection arguments .
12174	Add a scalar argument .
12175	Add a scalar argument .
12176	Add a class argument .
12177	Add a new argument .
12178	Get the Individual object .
12179	Get photo email .
12180	Get taxonomy package .
12181	Returns the primary key for the primary key .
12182	Returns the primary child of this object .
12183	Get a relationship
12184	Get a relationship by id
12185	Get a nice id .
12186	Get companion role id .
12187	Set default options
12188	Get the related object related to the given role .
12189	Get primary relation .
12190	Returns true if this node is active .
12191	Build the message message .
12192	Delegates to the cache .
12193	Handles the exception .
12194	Instantiate a class
12195	Extracts the arguments from the data .
12196	Get current URL .
12197	Convert JSON string to Block
12198	Converts a block to JSON .
12199	Join two JSON arrays
12200	Returns the data for the given object .
12201	Show media .
12202	Create a Response instance .
12203	Subscribe to admin .
12204	Convert the given text to a unicode .
12205	Generate a response .
12206	Create a pagination .
12207	Refresh the template
12208	Get a single widget
12209	Get the account for a given asset type
12210	Save transLogs to database
12211	Add a snippet .
12212	Gets a snippet .
12213	Get a middleware instance .
12214	Run the route
12215	Compiles the configuration .
12216	Generate the configuration files .
12217	Register the application .
12218	Shutdown the error handler .
12219	Error handler .
12220	Handle exception handler .
12221	Log an exception .
12222	Prepare error body .
12223	Get the current query .
12224	Paginate the query .
12225	Retry middleware .
12226	Inserts a new element into this node .
12227	Delete this node .
12228	Removes this node from the DOM .
12229	Replace this node with the given new element
12230	Delete all nodes in the DOM .
12231	Copy attributes from a SimpleXMLElement
12232	Clone children from another node
12233	Move this node to another .
12234	Returns the first element of the first element .
12235	Insert an XML element into the document .
12236	Insert a node into the DOM .
12237	Set an array of attributes
12238	Returns the inner HTML of this node .
12239	Returns the inner XML of the outer XML element .
12240	Get elements by class name
12241	Add a class .
12242	Returns a pretty - formatted XML representation of this object .
12243	Convert a filepath to XML
12244	Returns an array of nodes sorted by the given xpath .
12245	Sort the children of this node .
12246	Sort a list of nodes .
12247	Get node by name
12248	Execute an XPath query .
12249	Returns an array of all elements in the DOM .
12250	Get attribute value
12251	Get node value
12252	Add missing attributes .
12253	Dump the contents of this object .
12254	Add compiler .
12255	Remove compiler .
12256	Get the directory for the given directory .
12257	Get the search paths for a project .
12258	Returns an ordered list of compiler components .
12259	Compile the compiler .
12260	Cache custom fields
12261	Cache custom fields group
12262	Get custom field
12263	Render custom field .
12264	Add a path to the source file .
12265	Searches for source directories .
12266	Render cms blocks .
12267	Render a CMS block .
12268	Render the slots .
12269	Generate event names .
12270	Dispatch slot events .
12271	Get route URI .
12272	Execute the Decode tree
12273	Cast a date to an instance
12274	Creates a new instance from a format string .
12275	Get the path for a given template .
12276	Builds the template map .
12277	Update a group .
12278	Move a user to a group .
12279	Move users to group .
12280	Initializes the template assets manager .
12281	Get the preauth code .
12282	Stops the custom process .
12283	Render the layout .
12284	Get the head of the block .
12285	Returns the end of the block .
12286	Inserts a block .
12287	Sets the inset .
12288	Generate a loop .
12289	Make a block
12290	Returns the total number of posts .
12291	Find posts by search
12292	Find the last post .
12293	Update resource .
12294	Delete a resource
12295	Find by criteria .
12296	Filters the query .
12297	Get the rules for this model .
12298	Get the fillable columns .
12299	Get pivot fields .
12300	Store a child .
12301	Get child s children
12302	Get a child resource .
12303	Generate site map .
12304	Display a list of languages .
12305	Get admin list .
12306	Update HCLanguages
12307	Get date period
12308	Show the options .
12309	Reset password .
12310	Finds a file .
12311	Detect mime type .
12312	Write content to web directory
12313	Convert this object to an array
12314	Creates a new category .
12315	Sort categories .
12316	Edit a category .
12317	Load a Yaml file
12318	Get search query .
12319	Redirect to the given short URL .
12320	Get bundle location .
12321	Prepare input data .
12322	Runs the command .
12323	Ask questions .
12324	Execute the task .
12325	Execute the command .
12326	Upload an image
12327	Get parameter value
12328	Enqueue a script .
12329	Enqueue a style .
12330	Get the URL to be used for the given path .
12331	Get a reference .
12332	Adds an object to the repository .
12333	Check if the IP address is whitelist .
12334	Check if password is good
12335	Edit profile .
12336	Change password .
12337	Confirm email
12338	Change security question
12339	Get colored text .
12340	Print a message
12341	Print an error message .
12342	Print information about a message .
12343	Creates a new post .
12344	Displays a post .
12345	Edit a post .
12346	Create a delete form .
12347	Add an array of assets .
12348	Get connection initializer .
12349	Get a taxonomy by its ID
12350	Validate the session
12351	Invalidate session
12352	Check if the role is allowed
12353	Saves an autocomplete .
12354	Sets the view file path .
12355	Sets the variables of this object .
12356	Generate theme .
12357	Update the name of the entry .
12358	Registers a calendar .
12359	Decode hash id .
12360	Encode hash id .
12361	Get the publisher for a message .
12362	Set the database connection
12363	Initialize the builder .
12364	Update the source
12365	Initialize the client
12366	Get the next video .
12367	Get option value
12368	Set a header .
12369	Authenticate a user .
12370	Get an array item by key
12371	Add a new item
12372	Add a rule .
12373	Apply rule to field
12374	Run all rules .
12375	Appends a comparison to the list .
12376	Checks if two values are equal .
12377	Sets the user s admin .
12378	Loads the database .
12379	Handle the command line .
12380	Creates a new exception from a reflection parameter .
12381	Returns the number of views .
12382	Get last month
12383	Get hits per month
12384	Get hits per day
12385	Returns a list of permalinks by language .
12386	Parses the page .
12387	Show errors
12388	Logout event .
12389	Update credential hash .
12390	Set EntityPrototype
12391	Set hydrator .
12392	Returns a list of pages
12393	Saves site assets .
12394	Parses the given data .
12395	Initializes the connection .
12396	Add a where clause
12397	Adds a where clause to the query .
12398	Set the select statement
12399	Order by field
12400	Get the first record .
12401	Get all records
12402	Update a document .
12403	Replace a document .
12404	Create a new connection .
12405	Renders the page .
12406	Checks if the cache exists .
12407	Sets a value to the cache .
12408	Load configuration .
12409	Save configuration .
12410	Delete a group
12411	Get a list of items
12412	Get details of a group
12413	Add a new device .
12414	Remove a device .
12415	Initialize the view .
12416	Run Coding style report .
12417	Run copy paste command
12418	Run PHP code report .
12419	Run PHP dependency report
12420	Translates a singular message .
12421	Translates a plural number .
12422	Get all messages for a domain .
12423	Returns the translations for the given domain .
12424	Get authorization info .
12425	Get Authorizer token
12426	Get Authorizer info
12427	Get Authorizer option
12428	Set an Authorizer option .
12429	Get Authorizer list
12430	Sort criteria by key
12431	Generate content type filter .
12432	List Permalinks .
12433	Returns the maximum percentage of the given scheme .
12434	Checks if the given percent is infinity bonus .
12435	Adds a field to the list .
12436	Adds an extra field to the form .
12437	Add a form field .
12438	Get a form field .
12439	Render a template
12440	Get instance by key
12441	Attach an instance to the cache .
12442	Detach a given key .
12443	Add an Invoker .
12444	Runs an image
12445	Get the plan ID for a given period
12446	Sets the container .
12447	Run build dependencies .
12448	Run update_zinfo .
12449	Runs a check on the package .
12450	Run check_templates .
12451	Run check_php files
12452	Run update package .
12453	Generate a sample package .
12454	Create a new action
12455	Determine if the toolbar has toolbar .
12456	Install assets .
12457	Load data from table
12458	Create comment form .
12459	Show all custom groups
12460	Get all default groups
12461	Creates a form for a custom field .
12462	Create a new custom field .
12463	Creates a new custom field .
12464	Show custom field .
12465	Get the options available for the given entity .
12466	Creates a form to edit custom fields group .
12467	Render custom field .
12468	Get a media stream .
12469	Replace namespace .
12470	Set application config namespaces .
12471	Set the namespaces .
12472	Check if module is enabled
12473	Look for pre - minified asset
12474	Get a theme by its identifier .
12475	Get current theme
12476	Set current theme
12477	Get transformation transform .
12478	Connect to elFinder
12479	Generate options for upload .
12480	Find all slots in the template .
12481	Register the services factory .
12482	Map the entries in the tree by depth .
12483	Get plain bonus bonus .
12484	Get the default options .
12485	Checks if an adapter has a given behavior .
12486	Get all behaviors from an adapter .
12487	Enable logging .
12488	Write output to log file
12489	Set file path
12490	Converts a query to a string
12491	Build a WHERE clause .
12492	Generates an ORDER BY clause .
12493	Group by field selector
12494	Find a cluster
12495	Get a query from the database .
12496	Delete a cluster
12497	Delete many records
12498	Insert a single document .
12499	Insert multiple documents
12500	Update a document
12501	Converts a document to an array .
12502	Replace a document .
12503	Start a transaction .
12504	Rollback a transaction
12505	Commits a transaction .
12506	Execute query .
12507	Create a single document .
12508	Set the message type
12509	Build the message .
12510	Builds a preview message .
12511	Build a group .
12512	Login user .
12513	Copies a file to another .
12514	Creates a directory .
12515	Check if a path exists
12516	Delete a folder
12517	Move file to destination .
12518	Get all files in a folder
12519	Get a single calculation by its ID
12520	Get where parameters .
12521	Render a custom label .
12522	Render custom field .
12523	Update the arguments .
12524	Deserialize a JSON string .
12525	Release a lock .
12526	Clean up stale processes .
12527	Get data sources
12528	Returns the data source for the given model class .
12529	Get the foreign data source .
12530	Apply a quantity to the device .
12531	Get the status of a device .
12532	Update a device .
12533	Bind location to device .
12534	Get pagination .
12535	Fetches information for a specific plan .
12536	Authenticate user .
12537	Set related objects .
12538	Set the related models .
12539	Dasherize a string
12540	Convert a string to camelCase
12541	Generate random string
12542	Get the view .
12543	Get the link .
12544	Set the link .
12545	Listen for event .
12546	Register an event .
12547	Get the plugin plugin .
12548	Get a theme plugin .
12549	Boot the plugin .
12550	Install assets .
12551	Checks if the token is serialized .
12552	Add headers .
12553	Saves the temporary file .
12554	Create table .
12555	Displays a tag .
12556	Creates a delete form .
12557	Initialize the store
12558	Flush the cache
12559	Fix a file .
12560	Fixes file slashes .
12561	Send a message .
12562	Send a text message
12563	Send a news message
12564	Send a voice message
12565	Send an image
12566	Send a video message
12567	Send a card
12568	Preview a message .
12569	Preview a message .
12570	Preview a message .
12571	Preview a message .
12572	Preview a message
12573	Preview a video .
12574	Preview a message
12575	Preview a message .
12576	Preview text by name .
12577	Preview news by name .
12578	Preview a voice by name .
12579	Preview an image by name .
12580	Preview a video by name .
12581	Preview a card by name .
12582	Set the translator .
12583	Run the tool version .
12584	Generate the configuration file .
12585	Convert configuration file to YAML file .
12586	Create controller .
12587	Initialize the token table .
12588	Create token table .
12589	Send emails to email form
12590	Render dataTables .
12591	Checks if there is an array of parameters
12592	Returns the SQL string representation of this query .
12593	Sets the operator .
12594	Create a directory .
12595	Get the minifier .
12596	Determine if the file is minified .
12597	Get cache adapter
12598	Checks if a given namespace is enabled .
12599	Get config value
12600	Copies a file to a destination .
12601	Write data to file
12602	Delete a file
12603	Read file contents
12604	Upload a file
12605	Get file name
12606	Get file path .
12607	Make sure the file is safe .
12608	Get a child by type
12609	Returns the parent of the given type .
12610	Get all parents .
12611	Returns true if the object is checked .
12612	Get IP address
12613	Check required options
12614	Checks if the file is required .
12615	Add a new attribute
12616	Sets the attributes .
12617	Remove an attribute .
12618	Set file source
12619	Load foreign data items .
12620	Creates a new model .
12621	Sets a session variable .
12622	Register an event .
12623	Fire event .
12624	Sets headers .
12625	Get a GET request
12626	Perform a POST request .
12627	Format the formatter .
12628	Register the config file .
12629	Send message to device
12630	Pay an order .
12631	Prepare order .
12632	Query the order .
12633	Close a trade .
12634	Reverse the reverse order
12635	Get sign key
12636	Get sandbox sign key
12637	Connect to the database .
12638	Get all rows from a table
12639	Receive exceptions .
12640	Initializes the client .
12641	Add a value to the collection .
12642	Sets a value for a given key .
12643	Get widget id
12644	Get system id
12645	Render element .
12646	Set boolean value
12647	Set boolean value
12648	Get response data
12649	Build assets factory .
12650	Read file contents .
12651	Write text to file
12652	Get page text
12653	Get page text with base language
12654	Get page text
12655	Add a text container
12656	Modify text container .
12657	Delete a text container
12658	Get file name
12659	Sets the content of the page .
12660	Removes all outdated files
12661	Create an authorization application .
12662	Check if the contributor is defined .
12663	Get error message
12664	Require a package .
12665	Installs the application .
12666	Edit a block .
12667	Returns the input specification .
12668	Set cache options .
12669	Adds a namespace options .
12670	Opens a stream .
12671	Returns an emulator instance .
12672	Set the emulation .
12673	Set source files
12674	Get foreign model config .
12675	Get foreign model .
12676	Renders a block .
12677	Perform a removal removal .
12678	Returns the result as JSON .
12679	Boot the plugin .
12680	Check if a flag exists .
12681	Send message .
12682	Registers the profile configuration .
12683	Process all tasks .
12684	Sets a value at the given offset .
12685	Removes all rows from the database .
12686	Returns the type of the given value .
12687	Initialize the configuration .
12688	Loads a configuration file .
12689	Get configuration value .
12690	Merges the given configs .
12691	Output an error .
12692	Synchronize the page .
12693	Generate slot .
12694	Add an option .
12695	Get vendor directory
12696	Get available extensions .
12697	Get options .
12698	Archive a directory
12699	Perform ant patterns .
12700	Create a new instance of the cache .
12701	Set editor config .
12702	Get service by id
12703	Publish page .
12704	Get title attribute
12705	Get the HTML content attribute .
12706	Get all registered commands .
12707	Parse a signature .
12708	Run a command .
12709	Parse a string .
12710	Resolve an instance .
12711	Register an alias .
12712	Get the concrete flag of the concrete class .
12713	Resolve an instance .
12714	Resolve method parameters
12715	Resolve circular dependencies .
12716	Get a concrete instance from the given interface .
12717	Get the parameters of a method .
12718	Mark as resolved as resolved .
12719	Bind an abstract binding .
12720	Call an instance .
12721	Returns true if the binding is shared .
12722	Turns a concrete closure into a closure .
12723	Returns the content of the file .
12724	Reset the query
12725	Format the event .
12726	Creates a content model from a given array .
12727	Returns the value mapped to the template .
12728	Asserts that the given rule matches the given rule .
12729	Get options map
12730	Renders the navigation .
12731	Get the tasks .
12732	Handle signal signal .
12733	Registers a listener .
12734	Unregister a listener
12735	Set the key title .
12736	Map model to model name
12737	Translate field values
12738	Add a class .
12739	Remove a class .
12740	Set the required field .
12741	Get a tag .
12742	Removes a connection from the pool .
12743	Build slot map .
12744	Ask slot map
12745	Move a connection to the pool .
12746	Handle a command .
12747	Get input specification .
12748	Sets the pattern .
12749	Validates a SKU .
12750	Returns the user alias for the given user .
12751	Send a welcome message .
12752	Send confirmation message .
12753	Send a recovery message .
12754	Prepare curl request
12755	Parse response .
12756	Delete all custom fields for a custom field
12757	Route start .
12758	Create a new MediaLink instance
12759	Parse a string
12760	Dispatch event .
12761	Check if browser is available .
12762	Sets a cookie .
12763	Remove a cookie
12764	Add a header
12765	Add a HTTP header
12766	Run all headers .
12767	Set a key value
12768	Get a value from the store .
12769	Get the foreign database connection .
12770	Authorize a user .
12771	Authorize the given email .
12772	Register a new email .
12773	Authorize a user .
12774	Authorize a user .
12775	Read a namespace .
12776	Write the given namespace .
12777	Render the list of records .
12778	Get refresh instructions .
12779	Returns the value of the given key .
12780	Sets a state value .
12781	Decrypts encrypted data .
12782	Get all intersections
12783	Creates an array of intersections .
12784	Checks if the given mask is no result .
12785	Generate the intersection .
12786	Get the configuration .
12787	Get request data
12788	Set status code
12789	Load the foreign key .
12790	Create a view .
12791	Create a layout .
12792	Create a Snippet .
12793	Create a new droplet
12794	Delete a digital Ocean
12795	List all images
12796	Clear a queue
12797	Pad a string to a string
12798	Get lines from file
12799	Get file pointer
12800	Get the headers .
12801	Create a new item
12802	Get the pagination of the page .
12803	Returns an array of ADORD records
12804	Build column properties cache
12805	Get column name .
12806	Returns a collection of objects .
12807	Returns a collection of objects matching the given operator .
12808	Get primary key .
12809	Check if a column is primary key .
12810	Returns the foreign keys for the given table .
12811	Returns the foreign keys for the given table .
12812	Check if a column is foreign key .
12813	Returns a list of nullables for the given table .
12814	Returns a list of nullables for the given table .
12815	Check if a column is null .
12816	Gets the columns of a table .
12817	Fetch all cache keys
12818	Transform a command to a message .
12819	Set permissions .
12820	Executes a callback .
12821	Resolve dependencies .
12822	Resolve options .
12823	Create the contributor directory .
12824	Add block to slot
12825	Get slot definition .
12826	Save slot definition .
12827	Remove block from slot file
12828	Register custom functions .
12829	Set config value
12830	Compile the source .
12831	Handle a token found .
12832	Process modifiers .
12833	Generate a configuration method .
12834	Generate the factory method .
12835	Generate factory method .
12836	Create a directory .
12837	Build the site .
12838	Create a directory .
12839	Generate a filename
12840	Get the mime type of a file .
12841	Recursively delete a directory
12842	Remove all files from a directory
12843	Add a shortcut option .
12844	Loads the answer mapping .
12845	Process text type
12846	Runs the HTTP error page
12847	Loads a controller .
12848	Get page 403
12849	Get page 404
12850	Check if cache is valid
12851	Deletes the customer .
12852	Parses a symbol .
12853	Import a package .
12854	Process the pipeline .
12855	Go through all jobs .
12856	Perform the payload .
12857	Set the builtin queue .
12858	Called when the page is saved .
12859	Add a route .
12860	Get the dispatcher .
12861	Build the cache .
12862	Parse the given block .
12863	Returns a cached identity service .
12864	Handles the HTTP request .
12865	Clears quota .
12866	Initialize the locale .
12867	Initialize the options .
12868	Reset password .
12869	Binds a user to LDAP .
12870	Unbind the LDAP connection .
12871	Search for LDAP
12872	Set required element
12873	Get the validator chain .
12874	Save the configuration .
12875	Get json file
12876	Sets the namespace .
12877	Generate the image manifest .
12878	Set the value .
12879	Render the toolbar .
12880	Register the user .
12881	Get the foreign data item .
12882	Get unmapped keys .
12883	Get unmapped local keys .
12884	Get the translation of a foreign key .
12885	Returns the key translation for the given object .
12886	Set raw photo
12887	Get composer . json
12888	Returns the current theme .
12889	Get identity bundle .
12890	Creates a new view
12891	Redirect domain system system params
12892	Renders an element .
12893	Create a new account
12894	Close an open account
12895	Sets the person s person .
12896	Checks if the opening date is closed .
12897	Redirect to a given path .
12898	Translate a message .
12899	Get the response .
12900	Get response headers
12901	Adds the source to the builder .
12902	Add virtualization worker .
12903	Create cache adapter .
12904	Sets the access token .
12905	List resources .
12906	Get resource .
12907	Store a filter .
12908	Update a field .
12909	Get all the records
12910	Set the group .
12911	Get the count of the query
12912	Join the table .
12913	Set cache flag .
12914	Get the where clause .
12915	Get column reference .
12916	Convert result to models
12917	Get sum valor
12918	Find content type by name .
12919	Set the filters .
12920	Get total data
12921	Returns the number of remaining items .
12922	Returns the foreign data items .
12923	Returns all local data items .
12924	Get all local data items .
12925	Sets the search .
12926	Display a user .
12927	Get a list of all users
12928	Update a business .
12929	Get all entities .
12930	Attempt to attempt a confirmation .
12931	Creates a router .
12932	Generate content attribute .
12933	Generates a new Content object .
12934	Move a block to another directory .
12935	Resolve move options .
12936	Moves the archive directory .
12937	Changes the block name and name of the block
12938	Set min value
12939	Set max value
12940	Assert that the client is valid .
12941	Store permissions .
12942	Creates a form .
12943	Authenticate authentication .
12944	Set default queues
12945	Returns the tags list .
12946	Parse tags .
12947	Returns true if the owner has a tag attribute .
12948	Removes tag values from tags
12949	After saving the tags .
12950	Before deleting tags
12951	Deletes tags .
12952	Get all foreign parents .
12953	Returns a list of foreign keys .
12954	Convert a price string to an integer
12955	Get the registry object
12956	Remove an object
12957	Authenticate the user .
12958	Injects the given injects .
12959	Update a table
12960	Execute query
12961	Get database connection
12962	Get all tables .
12963	Check if database exists
12964	Get the per month
12965	Get icon .
12966	Get object type descriptor
12967	Get object type
12968	Render page .
12969	Transform the frontend to frontend .
12970	Get reflection and class object object
12971	Sets the position of the collection .
12972	Create entity manager
12973	Set the mapping configuration .
12974	Auto load mappings
12975	Register mapping .
12976	Parses the mapping .
12977	Determine the defaults for a given mapping .
12978	Detects the metadata driver .
12979	Register behaviors .
12980	Configure behavior .
12981	Preprocess the request
