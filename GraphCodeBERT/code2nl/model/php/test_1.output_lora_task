0	Get admin role .
1	Get user .
2	Deletes a breadcrumb .
3	Translations translations .
4	Get highest order item
5	Create a table name .
6	Handle the breadcrumb .
7	Update a table .
8	Update the table .
9	Get the renamed columns
10	Get the renamed diff .
11	Get renamed columns .
12	Get renamed indexes .
13	Get image thumbnail
14	Get thumbnail name .
15	Check if the user is edit .
16	Get the list of dimmers .
17	Prepare menu translations .
18	Save model attributes .
19	Checks if user has permission .
20	Create a breadcrumb .
21	Store breadboard .
22	Edit a table .
23	Update data type .
24	Delete a breadboard .
25	Add relationship .
26	Get the relationship field .
27	Handle the password .
28	Store a table .
29	Edit a database .
30	Update the database .
31	Display a table .
32	Delete a table .
33	Returns the sort by the given sort order .
34	Display a menu .
35	Returns true if the model is translatable .
36	Get translations .
37	Get translated attribute .
38	Applies a scope to the query .
39	Save translations .
40	Get a list of columns .
41	Add permission .
42	Add storage symlink .
43	Register console commands .
44	Clean up the data .
45	Delete bread images .
46	Orders a new data type .
47	Renders a relation .
48	Resolve relations .
49	Add soft delete .
50	Validates the given data .
51	Get fields with validation rules .
52	Verify id token
53	Retrieve certificates from a URL .
54	Gets the signed signon certificates .
55	Set phpsec constants
56	Fetches the access token with the given code .
57	Fetches the access token for the application .
58	Fetch access token with refresh token
59	Authorize the authorization .
60	Check if the token is expired .
61	Verify the ID token
62	Add a scope
63	Execute a request .
64	Set auth config
65	Create OAuth2 service .
66	Returns the number of retries .
67	Get the next chunk
68	Parse HTTP response .
69	Get data type
70	Combines a list of variables .
71	Get the value of the given value .
72	Execute a request .
73	Decode a response .
74	Map array types to array
75	Converts the model to an object
76	Converts a value into an array .
77	Returns the mapped name for the given key .
78	Checks if an array is associative array .
79	Create a new AuthHandler instance
80	Find the config file .
81	Define core constants .
82	Sets the state of the statement .
83	Called when an exception is thrown .
84	Get all queries .
85	Registers global variables .
86	Get all options
87	Add a new option
88	Delete an option
89	Add a placeholder .
90	Set default namespace .
91	Set default controller .
92	Set default method
93	Discover routes .
94	Sets the default placeholder .
95	Get all routes .
96	Get routes options .
97	Add multiple routes .
98	Add a redirect .
99	Checks if the route is a redirect .
100	Get the redirect code .
101	Add a route to the collection .
102	Add options to route collection .
103	Registers the given environment .
104	Reverse route
105	Determine the current subdomain .
106	Reset routes .
107	Handle error handler .
108	Shutdown the error handler .
109	Determines the view for the given exception .
110	Render an exception .
111	Collect information about the given exception .
112	Determine the status code for the given exception .
113	Returns the number of bytes .
114	Highlight a file .
115	Checks if the given value is an alpha - space .
116	Checks if a string matches a regular expression .
117	Validate email address
118	Validate email addresses
119	Check if a URL is valid .
120	Check if a date is valid
121	Creates a new error message .
122	Check if a credit number is valid
123	Checks if the given number is valid .
124	Move file to destination .
125	Move the Escaper .
126	Move kint to Kint
127	Start the session .
128	Configure session length .
129	Initialize session variables .
130	Sets data to session
131	Get session data
132	Push an array to the array
133	Removes a key from the session
134	Set flashdata
135	Get flash data
136	Mark a flash data
137	Get flash keys .
138	Set temporary data
139	Get the current session data
140	Mark session as temporary data
141	Remove temporary data from the session
142	Get temporary keys
143	Set session cookie
144	Check if the given key is valid .
145	Guess the type of an extension .
146	Guess the extension from the given type .
147	Redirect to the given URI .
148	Redirect route .
149	Redirect to previous session .
150	Set a message with the given key .
151	Run the given URI .
152	Initialize the application .
153	Enable a filter .
154	Returns an array of arguments .
155	Format an object
156	Send logs to the response .
157	Detect the locale .
158	Set the locale .
159	Checks if the current server is secure .
160	Get the body as JSON .
161	Get a GET request
162	Get post data
163	Get POST GET request
164	Get GET GET request
165	Get cookie value .
166	Get files .
167	Get a file by its ID .
168	Detect the URI .
169	Detect path .
170	Get the negotiation type .
171	Parse request URI
172	Build the DSN .
173	Returns a Formatter instance .
174	Checks if the request is valid .
175	Attach honeypot .
176	Resize image
177	Crop image
178	Get image version
179	Get resource path
180	Add foreign key
181	Drop foreign key .
182	Attribute unsigned attribute .
183	Set the default default value
184	Process primary keys .
185	Process foreign keys .
186	Set locale .
187	Get a line from the locale .
188	Format a message .
189	Loads a file .
190	Add base URI
191	Add an image source
192	Add media source
193	Add manifest to manifest
194	Add an object source
195	Add a plugin type .
196	Add a sandbox .
197	Add a script source
198	Add a style to the document .
199	Add an option .
200	Generate nonce .
201	Build headers .
202	Get title .
203	Collect log messages .
204	Prepare params
205	Determine the class for the given library .
206	Returns the result of the result .
207	Get custom result object
208	Get result array
209	Get result object
210	Get a single row
211	Get a custom row object
212	Get a row from the result array
213	Get a row object
214	Set row data
215	Returns the first row of the result .
216	Get last row
217	Get next row
218	Returns an unbuffered row .
219	Determine if the acceptable header is acceptable .
220	Determine if the acceptable parameters are acceptable .
221	Run the CLI command .
222	Show the header
223	Display links .
224	Generate links .
225	Store the current group .
226	Set path .
227	Get page count
228	Get current page
229	Checks if the group is more than one .
230	Get last page
231	Get page URI .
232	Returns the next page URI .
233	Returns the previous page URI .
234	Get the per page per page .
235	Returns the details of the pagination .
236	Ensures that the group has been created .
237	Returns the number of years
238	Get the number of months
239	Returns the number of weeks .
240	Returns the number of days
241	Returns the number of hours
242	Get the number of minutes
243	Returns the difference between two intervals .
244	Humanize time .
245	Load database connection .
246	Loads aForge instance .
247	Checks if a property is changed .
248	Maps a property to a property .
249	Mutate a date .
250	Cast value to json
251	Determine if an alias is discovered .
252	Find all records .
253	Get the first row
254	Save data .
255	Convert data to array
256	Insert data into database
257	Insert a row into the database .
258	Get the builder .
259	Protect fields .
260	Remove validation rules .
261	Get validation rules .
262	Count all results .
263	Set authentication .
264	Set form parameters
265	Parse options .
266	Get the method name .
267	Send a request to the server .
268	Applies the request headers .
269	Set response headers .
270	Executes a curl request .
271	Version migrations .
272	Find all migrations .
273	Check migrations .
274	Get history .
275	Get migration name .
276	Get current version
277	Add a new migration .
278	Remove a migration .
279	Ensure the table exists .
280	Check if value is valid
281	Set request data
282	Set rule .
283	Get rule group .
284	Set rule group .
285	Load rule sets .
286	Set error message .
287	Get error message .
288	Splits rules into an array .
289	Reset data .
290	Convert array to XML
291	Clean file names
292	Set URI .
293	Get user info
294	Get query string
295	Returns the segment at the given index .
296	Sets a new URI .
297	Create a URI string .
298	Set the authority .
299	Set the scheme .
300	Set the port .
301	Set path .
302	Refresh the path .
303	Set the query string .
304	Decode a value .
305	Add a query
306	Keep query parameters
307	Filter the path
308	Apply parts to the URI .
309	Resolve relative URI .
310	Merges a reference to a URI .
311	Remove dot segments from path
312	Append a value to the list
313	Prepend value to array
314	Returns the previous URI .
315	Returns the next URI .
316	Get the first page .
317	Get the last page .
318	Get current URI .
319	Start a timer .
320	Stop a timer .
321	Get elapsed time
322	Get all timers .
323	Add a table alias .
324	Execute a SQL query .
325	Execute a simple query
326	Create a new database instance
327	Prepare a prepared statement .
328	Escape identifiers .
329	Call a function on the database .
330	List all tables .
331	Check if a table exists .
332	Check if a field exists .
333	Get field data .
334	Get index data .
335	Get foreign key data .
336	Get the value of an environment variable .
337	Register all registered properties .
338	Get item from cache
339	Write data to file .
340	Get directory info
341	Get file info
342	Initialize the application .
343	Run the application .
344	Handle request .
345	Start benchmark .
346	Get the response object
347	Force secure access .
348	Display the cache .
349	Cache page .
350	Generate cache name
351	Display performance metrics .
352	Try to route the given routes .
353	Start the controller .
354	Create a controller .
355	Run controller .
356	Gather the output of the response .
357	Store previous URL .
358	Invoke the request method .
359	Get a cache handler .
360	Create alias from table
361	Add a WHERE clause .
362	Add WHERE clause
363	Generate a LIKE statement .
364	Start a WHERE clause
365	End the query .
366	Set the offset
367	Set the value of a key .
368	Compile the query .
369	Compile the query .
370	Returns the number of rows
371	Count all results in the query
372	Insert a batch into the database .
373	Compile insert query
374	Compile update query
375	Compile a delete query .
376	Decrement the value of a column .
377	Compile the query .
378	Compile WHERE clause .
379	Compile the GROUP BY clause .
380	Compile the ORDER BY clause .
381	Get operator operators
382	Renders the metrics .
383	Collects all metrics from the collector .
384	Collect all variables .
385	Round to the given number .
386	Copy the image to the specified path .
387	Get image properties
388	Release lock .
389	Attach honeypotents to the response .
390	Prepare the template
391	Fetch an object
392	Make an array of columns .
393	Clears the table .
394	Set the rows from the database
395	Set data from array
396	Set path .
397	Get error string .
398	Store the uploaded file .
399	Checks to see if the file has size .
400	Check if a file is an image
401	Determine if a file is in a file .
402	Determine if the file is max dimensions
403	Fetches global values for a given method .
404	Populates global globals .
405	Run migration .
406	Create data from a table
407	Run all foreign tables .
408	Modify a column .
409	Create a new table .
410	Copy data to the database .
411	Format fields .
412	Format keys .
413	Drop indexes .
414	Set CSRF cookie
415	Get the CSRF hash
416	Returns a new Time instance .
417	Parse a datetime string .
418	Returns a new instance of the current date .
419	Returns a Carbon instance .
420	Returns a new instance of the date .
421	Create a new instance from a date .
422	Create a Carbon instance from a timezone .
423	Create a new Time instance .
424	Create a Time instance from a datetime .
425	Create a Time instance from a timestamp .
426	Creates a new instance from a date time .
427	Returns a DateTime object .
428	Returns the age of the current page .
429	Determine if the current time is daylight savings .
430	Set the month .
431	Set the day .
432	Set the minute value .
433	Set the second value .
434	Set the value of the given value .
435	Set timestamp .
436	Checks if the given instance is equal .
437	Checks if the given time is equal .
438	Converts a time object to a DateTime object .
439	Returns the jsMatcher for the given string .
440	Returns the cssMatcher for the given matches .
441	Converts a string to UTF - 8 .
442	Converts a string to UTF - 8 .
443	Get a file by name
444	Create an UploadedFile object .
445	Get the value of a dot notation .
446	Sets the binary .
447	Sets the file path .
448	Returns the content of the file .
449	Set the content type .
450	Get the download file name .
451	Get the content disposition .
452	Build headers .
453	Send the request body .
454	Send body by file path
455	Removes an array of parameters
456	Run a command .
457	Create command list .
458	Get a database connection .
459	Get a seeder instance .
460	Determine if the command is a namespace .
461	Add a closure .
462	Run all tests .
463	Get the report .
464	Set query string
465	Returns the query string .
466	Get the start time
467	Get the duration .
468	Set error code .
469	Swaps the prefix of the query .
470	Compile the bindings .
471	Load helpers .
472	Register the classloader .
473	Add a namespace .
474	Returns the namespace for the given prefix .
475	Require a file .
476	Sanitize filename
477	Discover the namespaces .
478	Modify a date .
479	Creates a text excerpt .
480	Sanitize a value .
481	Resolve nested variables .
482	Set the database name
483	Execute SQL query
484	Prepare a SQL query .
485	Returns the error message .
486	Execute sql statement
487	Get field names .
488	Get a cache instance
489	Get CLI request .
490	Creates a CURL request .
491	Get honeypot instance
492	Returns a language instance .
493	Get the logger instance .
494	Get the negotiator .
495	Returns a parser instance .
496	Get an incoming request .
497	Get the response .
498	Create a redirect response .
499	Returns a router instance .
500	Get security instance .
501	Returns a URI instance .
502	Create a validation instance .
503	Display a list of commands .
504	Pad title .
505	Get a CSV from a Result
506	Get XML from Result
507	Execute a command .
508	Execute a seeder .
509	Check if a value is in a list .
510	Returns true if the string is less than the given string .
511	Checks if the given fields are required .
512	Checks if the given fields are required .
513	Validate a request .
514	Set the directory .
515	Set request parameters .
516	Set default controller .
517	Get file size
518	Move the file to another file .
519	Get the destination path .
520	Collect queries .
521	Format timeline data .
522	Locate a file .
523	Get classname from file
524	Search for a given path .
525	Ensure the path is a extension .
526	Find class name from path
527	Returns the location of the given file .
528	Render a view .
529	Returns the excerpt of the given string .
530	Set data .
531	Set variable value
532	Render a section .
533	Render a view .
534	Log performance data .
535	Set the image
536	Creates the resource instance .
537	Resize the image .
538	Rotate the image
539	Flip image .
540	Add text to the text
541	Reorient the image
542	Get the EXIF image
543	Fit the image
544	Run the server .
545	Render a template
546	Parses a variable and returns an array of pairs
547	Extract noparse blocks from template
548	Insert noparse blocks .
549	Parse conditionals .
550	Sets the delimiterers .
551	Replace a regular expression
552	Determine if the key should be escaped .
553	Add a plugin .
554	Create an image
555	Gets a header value .
556	Check if a header exists .
557	Set a header .
558	Remove a header .
559	Set the protocol version .
560	Get header name .
561	Configure session ID .
562	Returns the reason .
563	Set the link to the page .
564	Set the content type .
565	Get the JSON body .
566	Get the XML body .
567	Formats the body .
568	Set the response headers .
569	Sends the CSP header .
570	Sends the HTTP headers .
571	Set cookie
572	Checks if a cookie exists .
573	Get cookie by name
574	Delete a cookie
575	Send cookies .
576	Download a file .
577	Get a singleton instance
578	Create a new class
579	Get a shared instance
580	Get autoloader instance
581	Get file locator
582	Reset all modules
583	Inject a mock instance
584	Discover services .
585	Get input .
586	Prompts user input
587	Validate a field
588	Prints the given text .
589	Prints an error
590	Wait for the given seconds .
591	Colorize text
592	Wrap a string
593	Get option value
594	Generates a table of rows .
595	Respond to the response .
596	Respond to the response .
597	Respond to the response .
598	Respond to the response .
599	Assert that the user is authorized .
600	Fail server error
601	Check if the request is valid
602	Initialize the application .
603	Returns all registered listeners .
604	Remove a listener .
605	Checks if the current request is referrer .
606	Set platform platform .
607	Set browser browser .
608	Set robots .
609	Set the mobile device .
610	Parses the attribute type .
611	Initialize the configuration .
612	Show the QR code
613	Initialize QRCode style .
614	Format HTML content .
615	Heartbeat heartbeat .
616	Handle a check sync sync
617	Log message .
618	Get uuid
619	Show qrCode
620	Wait for login
621	Get the user s login
622	Save server configuration .
623	Before init success
624	Callback after success success
625	Send status notification
626	Download a message .
627	Get resource from message
628	Auto download .
629	Check if sync is sync
630	Sync the sync key
631	Generate sync key
632	Log a message
633	Log message .
634	Send a word
635	Fetch all contacts
636	Store a list of members
637	Fetch group members
638	Store members in an array .
639	Report an exception .
640	Throw a fatal exception .
641	Validate a key .
642	Split a JWT string into an array .
643	Parse header .
644	Parses the claims .
645	Parse a signature .
646	Determines the current language .
647	Get a list of available match languages .
648	Cache all routes for the given locale .
649	Build route cache file .
650	Register Laravel local locale .
651	Register routes .
652	Sets the current locale .
653	Get URL from route name
654	Get supported locale .
655	Gets the locale order order .
656	Get current locale direction
657	Get current locale .
658	Returns the current locale for the current locale .
659	Check if the given locale is supported .
660	Get route name from path
661	Find translated route by path
662	Finds translated route by url
663	Create a URL from a URI .
664	Normalize attributes .
665	Load the routes .
666	Returns the path to the route .
667	Encode a message set .
668	Encodes a produce partition .
669	Encodes a produce topic .
670	Produces a partition pair from the data .
671	Parses partition data .
672	Decode a message set .
673	Decode a message .
674	Create a new socket .
675	Selects a stream of sockets .
676	Unpack a byte array .
677	Check length of bytes
678	Checks if the system is a little endian .
679	Get API version .
680	Returns a string representation of the API .
681	Register a new route
682	Add a route to the route .
683	Add a new route .
684	Get request method
685	Get the base path
686	Add a route .
687	Returns the next route .
688	Get current route
689	Returns true if the pattern matches the pattern .
690	Run a filter
691	Get event .
692	Clears all events .
693	Filter all filters
694	Execute a callback .
695	Call a function .
696	Invokes a method .
697	Initialize the request
698	Get request body
699	Get request method
700	Get proxy IP address
701	Parse query string
702	Set status code .
703	Set a header .
704	Set the response headers .
705	Send the response .
706	Initialize the router .
707	Handle an error .
708	Handle exception .
709	Adds a callback to the framework .
710	Register a framework method .
711	Get the value of a variable .
712	Clears all variables .
713	Start the router .
714	Stop the response .
715	Register a route .
716	Halt the response
717	Handle an error
718	Redirect to the given URL .
719	Handle JSON response .
720	Parses JSON data .
721	Set the ETag header
722	Set the last modified time
723	Register a class .
724	Load an instance of a class
725	Get instance by name
726	Create a new instance of a class
727	Loads a class
728	Add a directory
729	Fetch a file
730	Returns the template for the given file .
731	Checks if the given graph is cycles .
732	Returns the average height of the graph .
733	Collapse an array .
734	Fetch all files from the given paths .
735	Traverses a tree node .
736	Get root nodes
737	Get the list of composer packages installed .
738	Advances the progress bar .
739	Determine if the stream is an ANSI terminal .
740	Process the target parameter .
741	Processes a PHP token
742	Initialize the phpcs file .
743	Add a fixable message .
744	Merges a custom array into an array .
745	Returns the last pointer to the last pointer .
746	Check if the given stack is an assignment .
747	Checks if the token is a namespace .
748	Checks if the given stack is sanitized .
749	Checks if the given stack is casted .
750	Get array of array access keys .
751	Get the access key from the stack
752	Checks if the stack is a comparison .
753	Checks if the stack is in array .
754	Get the type of the use type .
755	Get interpolated variables .
756	Determines if the function call is a function call .
757	Returns the number of parameters of a function call .
758	Get the value of a function call .
759	Finds an array of open brackets .
760	Determine the name of a namespace .
761	Returns the namespace name of a namespace .
762	Check if a class is a class constant .
763	Check if a class is a class property .
764	Checks if a scope is valid .
765	Prepare punctuation .
766	Transforms a string .
767	Transforms a complex string .
768	Get the list of deprecated classes .
769	Process an array of tokens .
770	Process parameter declarations .
771	Retrieve the mispellings from the stack .
772	Callback for pagination
773	Set config data
774	Get tab width
775	Process a global scope statement .
776	Add an error to the stack
777	Setup the groups .
778	Checks if a token is targetted .
779	Checks if the token matches the given token .
780	Process a variable variable variable .
781	Checks if a variable is prefixed .
782	Validates the prefixes .
783	Record potential prefixes .
784	Setup the groups .
785	Validate alignment items .
786	Checks if a stream is a local stream .
787	Process variable in string
788	Merges whitelist properties .
789	Check if token is ignored .
790	Get indentation of indentation .
791	Get indentation string .
792	Add an alignment error .
793	Fix alignment .
794	Checks if the given token is valid .
795	Compare two tokens .
796	Checks the text of the text .
797	Determine the target class name .
798	Checks if the token matches the given token .
799	Get the namespace name .
800	Registers tokens .
801	Execute the queue
802	Reserve a queue .
803	Close the connection .
804	Validates the namespace .
805	Push a job .
806	Listen for events .
807	Execute a process
808	Handle a message .
809	Runs the queue .
810	Reserve the queue .
811	Move expired time .
812	Before push event
813	Delete a message .
814	Run the worker .
815	Handle a message .
816	Initialize the process .
817	Checks if the current process is paused .
818	Reserve the queue .
819	Delete a job
820	Parse the XML document .
821	Parse the getElements
822	Parse XML tree
823	Reads text from the stream .
824	Parses the current element .
825	Parse attributes .
826	Get the deserializer for a given element name .
827	Push the context to the stack .
828	Removes the context from the stack .
829	Returns a Writer instance .
830	Parse an XML string
831	Parses a given XML document .
832	Write an element to the document .
833	Map a value to a value .
834	Writes a value to the writer .
835	Parse a Clark notation string .
836	Creates a new instance from a reader .
837	Creates a new instance from the given reader .
838	Start an XML element .
839	Write an element .
840	Write an array of attributes .
841	Write an attribute .
842	Get model relations .
843	Validate job name .
844	Validate a command .
845	Create a shell job .
846	Creates a closure that can be used to retrieve the current context .
847	Finish the progress .
848	Returns the current span .
849	Convert a trace context to a span .
850	Start recording .
851	Set the name of the trace .
852	An annotated value .
853	Set remote endpoint .
854	Generate new token
855	Get value from storage
856	Get the last key pair .
857	Enforces the storage limit .
858	Create a sanitizer .
859	Set attribute attributes .
860	Get attribute value from DOMNode
861	Process default entity configuration .
862	Process the default menu item .
863	Get the type name for a given type .
864	Get the form options for a property .
865	Initialize the entity .
866	Autocomplete action .
867	List all entities .
868	Edit an entity .
869	Displays an entity .
870	Creates new entity .
871	Delete entity .
872	Search for entities .
873	Execute batch action .
874	Update entity property .
875	Find all entities .
876	Create a list query builder .
877	Finds entities by given search query .
878	Create search query builder .
879	Create an entity form builder .
880	Get entity options
881	Create an entity form .
882	Create a delete form .
883	Redirect to Backend homepage .
884	Sets the controller controller .
885	Normalize menu config .
886	Get entity configuration .
887	Check if action is enabled .
888	Get action configuration .
889	Translate a message to a choice .
890	Creates a paginator for the given query builder .
891	Process the backend configuration .
892	Initialize the request .
893	Finds the current item in the entity .
894	Get the attributes for the form .
895	Process entity properties .
896	Get default actions
897	Handle violation errors .
898	Finds a list of entities .
899	Process config files .
900	Normalize entity config .
901	Returns unique entity name .
902	Normalize view config .
903	Merges the form config .
904	Creates a query builder .
905	Checks if the given field is a Doctrine association .
906	Process field config .
907	Get excluded field names .
908	Filter a list of fields .
909	Run a command .
910	Deletes an ordinal record .
911	Determine if the given statement is valid .
912	Checks if the given statement is valid .
913	Reads the length of a message .
914	Builds the progress bar .
915	Log a BulkException .
916	Get the types .
917	Get the index configuration .
918	Get all providers .
919	Get all registered providers .
920	Returns the provider instance .
921	Sets sorting .
922	Builds the index mapping .
923	Builds the index template mapping .
924	Builds the mapping .
925	Fix properties .
926	Log a query .
927	Converts an object to Elasticsearch document .
928	Returns the total number of hits .
929	Get elasticsearch results .
930	Delete a template index .
931	Returns the index .
932	Get persister .
933	Populate index .
934	Refresh index .
935	Transform an object into a document .
936	Transform nested objects into an array .
937	Normalizes a value .
938	Transform an object into a document .
939	Get entity query builder
940	Returns the index template .
941	Reset all indexes
942	Reset index .
943	Reset index type .
944	Switches index alias .
945	Loads the indexer .
946	Loads the type persistence .
947	Loads the entity transformer .
948	Loads the object persister .
949	Loads the type provider .
950	Loads a type listener .
951	Get the events for the given type .
952	Loads the typefinder .
953	Loads the index manager .
954	Loads the index template manager .
955	Loads the driver .
956	Loads the serializer .
957	Create default manager alias .
958	Returns the dynamic template node .
959	Gets the types node .
960	Returns node id node .
961	Gets the source node .
962	Get routing node .
963	Gets the parent node .
964	Gets the configuration node .
965	Add indexes section .
966	Add index templates .
967	Transforms Elasticsearch results into Elasticsearch objects .
968	Check if an object is indexable .
969	Builds a callback for the given type .
970	Builds an expression callback .
971	Get a callback for the given type .
972	Get expression variable name
973	Set root name
974	Switches an alias to the index .
975	Builds an alias request .
976	Clean up an existing index .
977	Closes an index .
978	Get the index of an alias .
979	Log a query .
980	PostPersist event .
981	Schedule the given entity .
982	Schedule a remove event .
983	Persist scheduled objects .
984	Schedule for the given object .
985	Check if an object is indexable .
986	Get repository by name
987	Transform an object to a document .
988	Returns the repository for the given type .
989	Creates a new Hashids .
990	Register the factory factory .
991	Verify the hash of a hash
992	Create a Guzzle http client .
993	Add a cookie
994	Add cookies to the request .
995	Clear expired cookies .
996	Returns the hash of the cookie
997	Add a header .
998	Parse HTTP headers .
999	Handle request .
1000	Set the request options .
1001	Get client nonce .
1002	Returns the SHA1 hash of the user .
1003	Get HA2 header
1004	Returns the header .
1005	Gets the response .
1006	Returns the qop option .
1007	Returns the hash of the given value .
1008	Parse authentication info .
1009	Parses the name and value pairs .
1010	Parse HTTP authentication header .
1011	Sets the algorithm .
1012	Sets the HTTP method .
1013	Unquote string
1014	Add parameters to the request .
1015	Convert headers to Buzz headers .
1016	Converts an array of headers to a PSR headers .
1017	Send a request to the queue .
1018	Send a request to the queue .
1019	Process the request .
1020	Initializes the cURL handle .
1021	Clean up the queue .
1022	Returns true if the request matches the given request .
1023	Checks if the object is expired .
1024	Checks if the cookie matches the given domain .
1025	Checks if the path matches the given path .
1026	Parse cookie header .
1027	Release a curl .
1028	Prepares the request builder .
1029	Set the options for the request .
1030	Send a request to the client .
1031	Record a request .
1032	Create image .
1033	Add a cover
1034	Add a toc .
1035	Create PDF file .
1036	Ensure that the given input is a URL or a file .
1037	Creates a Guzzle HTTP client .
1038	Create the middleware stack .
1039	Create a request .
1040	Sends a request to the server .
1041	Generate request options .
1042	Send a request to the client .
1043	Throws an exception if the response is not expected .
1044	Add a new post parameter .
1045	Add metadata headers .
1046	Add location header to response .
1047	Validate entity properties .
1048	Get property value
1049	Set property value
1050	Sets a property .
1051	Add a property .
1052	Check if the table is valid .
1053	Creates a GetTableResult from an ODataSerializer .
1054	Computes the signature .
1055	Get authorization header .
1056	Computes canonicalized headers .
1057	Computes the canonicalized resource for the given URL .
1058	Computes canonicalized resource .
1059	Convert this object to an XML string .
1060	Initialize the SignedIdentifier from an XML array .
1061	Add a signed identifier .
1062	Remove a signed identifier .
1063	Set operations .
1064	Adds an operation to the batch .
1065	Adds an entity to the batch .
1066	Adds a delete entity .
1067	Creates a copy of a copy file .
1068	Create a message from a list of PeekMessages .
1069	Creates a new QueueMessage object from the PeekMessage .
1070	Create a new QueueMessage object from the parsed response .
1071	Initialize the configuration .
1072	Get the dev storage account .
1073	Get the development storage account .
1074	Get service endpoint endpoint .
1075	Create storage service settings .
1076	Creates a new instance from a connection string .
1077	Creates a StorageServiceService instance from a token string .
1078	Encode mime multipart part of multipart .
1079	Decode a multipart request .
1080	Creates a list of shares .
1081	Set shares .
1082	Attempt to retry the request .
1083	Creates and returns a new Filter .
1084	Creates a new Filter .
1085	Applies a filter to the filter .
1086	Applies a filter to the filter .
1087	Apply geospatial filter .
1088	Applies a filter to the filter .
1089	Creates a new Filter .
1090	Applies LEFT operator .
1091	Sets the location .
1092	Unserialize a serialized object .
1093	Creates a new PeekMessagesResult instance .
1094	Creates a getEntityResult from the given body .
1095	Creates an array of operations .
1096	Constructs a batch context .
1097	Creates a multipart request body .
1098	Constructs a delete entity context .
1099	Constructs a PutOrMerge entity context .
1100	Constructs an insert entity context .
1101	Get entity path
1102	Perform an update operation on a table .
1103	Add optional query parameter to query params
1104	Encode an array of values .
1105	Query tables .
1106	Create a new table .
1107	Create a table .
1108	Get a table .
1109	Gets a table for a given table .
1110	Delete a table .
1111	Delete a table .
1112	Query entities .
1113	Insert an entity into a table .
1114	Insert or update an entity .
1115	Insert an entity .
1116	Insert an entity into a table .
1117	Update an entity .
1118	Updates an entity .
1119	Merges an entity into a table .
1120	Merge an entity .
1121	Delete an entity .
1122	Delete an entity .
1123	Get a single entity .
1124	Get an entity from a table .
1125	Batch operation .
1126	Execute a batch operation .
1127	Create a list of directories and return it .
1128	Sets the directories .
1129	Sets the files .
1130	Create a new Directory .
1131	Create an update entity result .
1132	Sets the query parameters .
1133	Set the status codes .
1134	Remove a header .
1135	Add a history entry .
1136	Append new entry to file .
1137	Creates a new QueryTablesResult .
1138	Create a list of QueueMessages .
1139	Sets the queue messages .
1140	Initialize connection source
1141	Check if a hostname is valid .
1142	Check if a URI is valid .
1143	Checks if method exists .
1144	Validate a date string .
1145	Check if a key exists .
1146	Returns a string representation of the range .
1147	List all queues .
1148	Clear messages .
1149	Create a message .
1150	Creates a new message .
1151	Create a queue .
1152	Create a queue .
1153	Delete a message .
1154	Delete a message .
1155	Delete a queue .
1156	Delete a queue .
1157	Get queue metadata .
1158	Get the metadata for a queue .
1159	List all messages .
1160	List all messages in a queue .
1161	Pull messages from a queue .
1162	Fetch messages from a queue .
1163	Generates a signed access token .
1164	Validate signed service .
1165	Validate a signed resource type .
1166	Validate signed permissions .
1167	Validate signed protocol .
1168	Validate a string with the given array .
1169	Generate canonical resource .
1170	Parse error message .
1171	Get request ID
1172	Get the date
1173	Set middlewares
1174	Validate middleware .
1175	Parse a connection string
1176	Create an exception .
1177	Extract key from string
1178	Extracts a string from a string .
1179	Skips the operator .
1180	Create a new ShareAclResult object .
1181	Handles the request .
1182	Creates a setting with the given predicate .
1183	Validate a setting .
1184	Checks if the given settings matches the given constraints .
1185	Set the next row key .
1186	Set the next partition key .
1187	Validate type .
1188	Validates the given value .
1189	Serializes the given value into a string .
1190	Serialize a query value .
1191	Unserialize a query value .
1192	Create service properties .
1193	Get the corses array
1194	Initialize environment variables .
1195	Parse table Entries .
1196	Returns a JSON representation of an entity .
1197	Parse the response body .
1198	Sets the start date .
1199	Validate a permission .
1200	Create a path for a share
1201	Get share properties .
1202	Sets the share properties .
1203	List shares .
1204	Creates a share .
1205	Create a share .
1206	Delete a share .
1207	Get share properties .
1208	Set share properties .
1209	Set share properties .
1210	Get share metadata .
1211	Set share metadata .
1212	Sets the metadata for a share .
1213	Sets a share ACL .
1214	Sets a share ACL .
1215	Gets the list of directories and files .
1216	Lists all directories in a share .
1217	Create a directory .
1218	Create a directory .
1219	Delete a directory .
1220	Get directory properties .
1221	Get the properties of a directory .
1222	Get directory metadata .
1223	Set directory metadata .
1224	Create a file .
1225	Creates a file .
1226	Delete a file .
1227	Delete a file .
1228	Get a file .
1229	Get a file asynchronously .
1230	Get file properties .
1231	Get file properties .
1232	Set file properties .
1233	Set file properties .
1234	Get file metadata .
1235	Set file metadata .
1236	Sets a file metadata .
1237	Put a file to a file .
1238	Updates a file with the specified range .
1239	Creates a file from a share .
1240	Creates a file asynchronously .
1241	Clear file range .
1242	Clear file range .
1243	List file range .
1244	List file ranges .
1245	Aborts a copy of a file .
1246	Abort a copy of a file .
1247	Sets the operation type .
1248	Adds a parameter to the batch .
1249	Constructs a list of response objects .
1250	Compares two headers .
1251	Create a BatchResult
1252	Get the attributes of an object
1253	Serializes an array .
1254	Create a new instance from a parsed response .
1255	Get service properties .
1256	Set service properties .
1257	Set service properties .
1258	Get service stats .
1259	Creates a list of queues .
1260	Sets the queues .
1261	Get secondary endpoint from primary endpoint
1262	Serialize an array .
1263	Converts an object to a boolean .
1264	Converts a date to a date time .
1265	Converts a date to an ISO 8601 format .
1266	Convert a value to a DateTime object .
1267	Converts a number to a decimal number .
1268	Checks if the given content is zero .
1269	Append a delimiter to a string
1270	Checks if the given request is sent to the server .
1271	Gets the location from the headers .
1272	Calculates the MD5 hash of a content .
1273	Validate the resource type .
1274	Create a new UpdateMessageResultResult instance
1275	Create a new connection .
1276	Creates a callback for retry .
1277	Determine if the given status code is valid .
1278	Adds an optional parameter to the query parameters .
1279	Adds an optional header .
1280	Creates a new FileResultResult instance .
1281	Serialize headers .
1282	Serialize a request exception .
1283	Create a new QueueMessageResult instance .
1284	Create an InsertEntityResult
1285	Creates a new QueryResultResult instance .
1286	Format headers .
1287	Create a File .
1288	Apply middleware to the middleware .
1289	Returns an array of available include relations .
1290	Call include method .
1291	Resolve scoped scope .
1292	Set the error message .
1293	Set data .
1294	Set the errorizer .
1295	Get error output .
1296	Set resource .
1297	Set cursor .
1298	Set paginator .
1299	Add multiple relations .
1300	Add relations to the query .
1301	Add multiple fields .
1302	Sets the serializer .
1303	Transforms the resource .
1304	Prepare relations .
1305	Load eager relations .
1306	Get pagination data .
1307	Returns a JSON representation of the cursor .
1308	Merge included data .
1309	Bind a transformable .
1310	Resolve the given data .
1311	Resolve transformable item .
1312	Resolve transformer .
1313	Render an exception .
1314	Create an error message .
1315	Create data from resource .
1316	Parse options .
1317	Parse the fieldsets .
1318	Parse the included fields .
1319	Resolve child relations .
1320	Register an error message .
1321	Resolve error message .
1322	Clean an array .
1323	Bind a transformable .
1324	Resolve data from data .
1325	Resolve transformer .
1326	Register Laravel services .
1327	Register Lumen bindings .
1328	Decorate a response factory .
1329	Register the serializer bindings .
1330	Register the error bindings .
1331	Register fractal bindings .
1332	Register transformer bindings .
1333	Register transformer bindings .
1334	Bootstravel application .
1335	Set collection items .
1336	Format an error message .
1337	Get the relations .
1338	Get the default relations .
1339	Extract relations from an array .
1340	Extract child relations .
1341	Wraps nested relations .
1342	Apply query constraints .
1343	Resolve query constraint .
1344	Resolve relation .
1345	Get the mapped transformers .
1346	Get resource .
1347	Include resource .
1348	Include resource from model .
1349	Checks if a resource is cached .
1350	Create a ResourceInterface instance .
1351	Create a resource from a resource .
1352	Instantiates a resource .
1353	Check if data is a collection .
1354	Resolve resource key .
1355	Registers the given decorator .
1356	Respond to the response .
1357	Normalize data .
1358	Normalize a relation .
1359	Transforms the given data .
1360	Convert an exception to an exception .
1361	Convert default exception to default exception .
1362	Render a response .
1363	Create a transform builder .
1364	Configures the terminal .
1365	Add items to the list
1366	Sets the selected items .
1367	Selects the first item .
1368	Registers a custom control mapping .
1369	Remove custom control mapping .
1370	Displays the terminal .
1371	Returns the selected item .
1372	Executes the selected item .
1373	Redraw the terminal .
1374	Draw the menu .
1375	Draws a menu item
1376	Close the menu .
1377	Set default selected item
1378	Checks if an index is selected .
1379	Sets the selected item index .
1380	Returns the selected item .
1381	Convert a string to a string .
1382	Generate the set of colours set
1383	Calculate the content width
1384	Returns the right side of the right side .
1385	Set border width .
1386	Display the menu .
1387	Calculate the coordinates of the menu
1388	Empty row .
1389	Write text to terminal
1390	Set the text
1391	Calculate the art length
1392	Display the menu .
1393	Get a connection .
1394	Make a connection .
1395	Get Elasticsearch configuration .
1396	Compress the request body
1397	Checks if a key exists .
1398	Add arguments to the command line
1399	Set arguments .
1400	Set options
1401	Add rules to the parser
1402	Convert options to string
1403	Returns an array of options .
1404	Convert options to JSON
1405	Convert options to XML
1406	Get a single option
1407	Returns the usage message .
1408	Set aliases .
1409	Set help .
1410	Parse the arguments .
1411	Parses the short option cluster .
1412	Parse a single option
1413	Add rules to rule mode
1414	Add rules to zendopt
1415	Get OAuth header .
1416	Returns the base URL for the request .
1417	Prepare HTTP method .
1418	Set the nonce value
1419	Appends OAuth parts to the query parameters .
1420	Get the query string
1421	Creates a new client .
1422	Get the log destination location
1423	Logs a list of service requests .
1424	Checks if the given entity is allowed
1425	Prepare reflection methods
1426	Returns the XML representation of the WSDL .
1427	Copy file to public path
1428	Cast value to string
1429	Reads a configuration from a file .
1430	Initialize the ACL rules .
1431	Populate json - only rules
1432	Initialize OAuth settings .
1433	Initialize the request and serialization format .
1434	Initialize service base URL
1435	Get entity by key
1436	Check if the input string is valid
1437	Verify the configuration .
1438	Load webhooks class names
1439	Checks if a webhook is valid .
1440	Get the options .
1441	Validate URN
1442	Add a function to the server
1443	Set the class
1444	Set the object .
1445	Gets the list of functions .
1446	Set persistence mode
1447	Create a SOAP server .
1448	Handle request .
1449	Remove a fault exception .
1450	Create a SOAPF fault object
1451	Handle PHP errors .
1452	Get OAuth2 Access Token
1453	Returns the authorization request URL .
1454	Refresh OAuth2 Access Token
1455	Migrate OAuth2 .
1456	Parse the OAuth2 access token from the response .
1457	Check if the token is empty
1458	Generate authorization header .
1459	Construct the refresh token .
1460	Check the result .
1461	Get the error message from an error code .
1462	Convert an object into an array
1463	Serialize an entity
1464	Remove null properties
1465	Add a complex type
1466	Get the WSDL .
1467	Add bindings .
1468	Add port type
1469	Add the types to the class .
1470	Add binding operations
1471	Add port operations
1472	Checks if the given type is a local type .
1473	Add services .
1474	Get target namespace
1475	Get namespace namespaces
1476	Save classes .
1477	Loads an XML document from a DOM document .
1478	Get the XML document
1479	Save PHP classes .
1480	Convert a namespace namespace to PHP PHP
1481	Set the base URL
1482	Gets the refresh token period .
1483	Returns the value of the access token .
1484	Get refresh token
1485	Get the access token
1486	Update access token .
1487	Get the post body from an array
1488	Create a PHP object from an XML string
1489	Parse an array of response objects
1490	Set a cURL option
1491	Get the version of the CURL
1492	Handle an exception .
1493	Verify variable type .
1494	Generate the names of an object
1495	Completes the property .
1496	Unmarshal an XML document .
1497	Get serializer
1498	Get the compressor .
1499	Get Request Logging Logging
1500	Adds a type to the composite map
1501	Get the default strategy
1502	Returns the strategy for the given type .
1503	Add a complex type .
1504	Create reflection class
1505	Populate property comments .
1506	Creates an instance of the given instance .
1507	Process property values .
1508	Creates a new instance of the given type .
1509	Checks if the given object is a valid type .
1510	Process property value .
1511	Get entity from model
1512	Update service context settings .
1513	Setup REST API client .
1514	Set log location
1515	Sets the minor version .
1516	Disable logging .
1517	Enable logging .
1518	Set client name .
1519	Configure the settings object
1520	Configure OAuth2 login helper .
1521	Update OAuth2 Token
1522	Setup serializers .
1523	Update an entity
1524	Add an entity
1525	Delete an entity
1526	Uploads an Uploadable object
1527	Send email
1528	Perform a query
1529	Append pagination info
1530	Find all entities
1531	Calls CDC method
1532	Execute the request .
1533	Initialize post request .
1534	Get request parameters .
1535	Fix tax service .
1536	Returns the export file name for the given entity .
1537	Check if an entity is allowed
1538	Create a new batch
1539	Convert a string to a timestamp
1540	Checks if the given timestamp is valid .
1541	Verify that the value is changed .
1542	Get company info
1543	Returns a list of IPs for QuickBooks .
1544	Get access token from array
1545	Get refresh token from array
1546	Get redirect URL .
1547	Save a file to a directory
1548	Generate file name .
1549	Generate error from OAuthException
1550	Parse the response body
1551	Check if the error body is in standard format
1552	Set the response as a response .
1553	Parses the response from the CURL response .
1554	Set fault handler
1555	Set response headers
1556	Set content type
1557	Set intuit tid
1558	Get App Menu
1559	Reconnect the connection
1560	Set uri .
1561	Sets the complex type strategy .
1562	Add a binding operation .
1563	Add a document to the document .
1564	Adds the types to the document .
1565	Add a type .
1566	Dumps the XML to a file .
1567	Add schema type to schema
1568	Creates a new OAuthConfig instance
1569	Check if OAuth token is valid
1570	Get the base URL
1571	Use this method to set Xml configuration .
1572	Sets the Json configuration .
1573	Disable logging
1574	Set the log location
1575	Update OAuth2 Access Token
1576	Get class properties .
1577	Returns the entity result .
1578	Set the URI
1579	Returns the URI for the request .
1580	Returns the request URI without parameters .
1581	Sets the complex type strategy .
1582	Set a class .
1583	Add a function to the WSDL
1584	Dump the WSDL file .
1585	Updates the service context .
1586	Send a request to the API .
1587	Perform OAuth1 API call
1588	Get OAuth1 Authorization header .
1589	Perform OAuth2 API call
1590	Get OAuth2 Authorization header
1591	Log a request to the log .
1592	Log a request to the API .
1593	Parses a string into a DOM document .
1594	Reset the compressor and serializer .
1595	Get the destination URL .
1596	Appends the minor version to the request URI .
1597	Checks the HTTP POST method .
1598	Parse a URL .
1599	Returns the accept content type .
1600	Convert query string to array
1601	Verify the given payload
1602	Encrypt the payload based on the token .
1603	Retrieve an intuitBatchResponse
1604	Remove a batch request
1605	Converts an array of exceptions to an array .
1606	Prepare a fault and return an exception .
1607	Get the options
1608	Set the request style .
1609	Set the encoding method .
1610	Set proxy port
1611	Set the HTTPS certificate
1612	Set the stream context
1613	Set the user agent .
1614	Do a soap request
1615	Initialize the SOAP client object
1616	Add a SOAP input header
1617	Get all functions
1618	Returns all the types of the soap client
1619	Get the type name for a singular type .
1620	Add an element to the schema .
1621	Prepare the XML document
1622	Add a binding operation .
1623	Add a port operation to a port
1624	Create a reference element
1625	Creates an element with a complex type .
1626	Creates a simple XML element .
1627	Resolves a short namespace .
1628	Parse doc comments
1629	Check if array is associative array
1630	Get webhooks event
1631	Verify that the token is valid
1632	Checks if the given key is in the complex list .
1633	Gets the reflection method .
1634	Get IPPReferenceType from array
1635	Get IPPid object
1636	Merge two objects
1637	Convert cURL headers to cURL
1638	Set SSL options
1639	Convert an array of headers to headers
1640	Add a warning .
1641	Resolve the configuration .
1642	Set the name of the tag .
1643	Scope by name .
1644	Boot the model .
1645	Add tags to model .
1646	Remove tags from the model .
1647	Add a tag .
1648	Remove a tag .
1649	Checks if a tag has a given tag .
1650	Scope all tags with the given tags .
1651	Filter the query on the query .
1652	Scope without tags .
1653	Sets the count of tags in the query .
1654	Rename a tag .
1655	Get popular tags .
1656	Get the qualified pivot key name .
1657	Get the name of a foreign key .
1658	Create new taggable alias .
1659	Build tag array
1660	Get tag model keys .
1661	Build a list of tags .
1662	Get tag array .
1663	Get all tags .
1664	Get all tagged tags .
1665	Renames a tag .
1666	Get the qualified tag table name .
1667	Get pivot table name .
1668	Save compound parameter data .
1669	Builds a query string .
1670	Gets the request parameters .
1671	Returns the payload payload for a compound collection .
1672	Add an index to the parameter .
1673	Get debug response
1674	Get the endpoint endpoint .
1675	Send a hit .
1676	Get HTTP client options .
1677	Get the URL for this request .
1678	Checks if required parameters are required .
1679	Sets the parameter to the given action .
1680	Set a single parameter .
1681	Add a new item to the collection .
1682	Get a single parameter .
1683	Get the index from the method arguments .
1684	Get the full parameter class .
1685	Performs a POST request .
1686	Parse request options .
1687	Returns a list of available items .
1688	Add a supported brand .
1689	Set year parameter .
1690	Validate credit card .
1691	Get the number of digits .
1692	Get the brand of the phone
1693	Get track by pattern
1694	Get the first name of a full name .
1695	Set billing name .
1696	Set shipping name .
1697	Returns the birthday date .
1698	Sets the birthday value .
1699	Initialize the request .
1700	Set a parameter .
1701	Set the card .
1702	Returns the amount of money .
1703	Set Money
1704	Set currency .
1705	Returns the currency number for the currency .
1706	Returns the number of decimal places .
1707	Format currency .
1708	Replace all items in the collection .
1709	Validates the response .
1710	Converts a string to camelCase
1711	Validate a number
1712	Get gateway short name
1713	Get gateway class name
1714	Get fixed query builder .
1715	Returns the parent metadata for the given property .
1716	Returns a Pager instance .
1717	Get parent alias .
1718	Add a new resource
1719	Find an item by ID
1720	Authenticate a user .
1721	Set the Application ID .
1722	Set credit card information
1723	Get Credit Card Information
1724	Add an item to the collection .
1725	Find an entity by ID
1726	Set the signature
1727	Handles an error
1728	Callback for user login .
1729	Check if a path is repeatable
1730	Check if a path exists
1731	Reorder a list of paths .
1732	Call a callback function .
1733	Call static method .
1734	Find a customer by name .
1735	Set the class application ID .
1736	Get Bill Address
1737	Sets the ShipMethodApplicationID value .
1738	Set payment method ID
1739	Generate field schema .
1740	Returns the child node at the given path .
1741	Add a child node at the given path .
1742	Returns all children of this node .
1743	Removes an attribute .
1744	Converts a node to XML
1745	Returns an array of all the items in the XML .
1746	Parse an array of paths
1747	Save XML to XML
1748	Save a JSON object to a file .
1749	Cast a string to a string
1750	Decode UTF - 8 characters
1751	Parse a DSN string .
1752	Extract request ID from XML
1753	Parse request ID
1754	Checks if a remote address is valid .
1755	Create a new user .
1756	Disable a user
1757	Generate unique hash
1758	Checks if there is a QuickBooks ID
1759	Initialize QuickBooks .
1760	Returns true if the database is initialized
1761	Returns a list of available objects .
1762	Returns a list of all available actions .
1763	Escape a string
1764	Configure the QWC configuration
1765	Configure the quickbooks .
1766	Add customer request
1767	Add customer response
1768	Catchall errors
1769	Queue a user .
1770	Enqueue a queue .
1771	Removes a user from the queue .
1772	Queues the queue left .
1773	Queue a report
1774	Queue a ticket .
1775	Log an error message .
1776	Called when a ticket is successful .
1777	Resolve a ticket .
1778	Check if a ticket is valid
1779	Logout a ticket .
1780	Create a new user .
1781	Initialize the driver .
1782	Check if the driver is initialized
1783	Log a message .
1784	Called when a hook is called
1785	Connect to OAuth
1786	Sets the default values for the client .
1787	Handle recurring events .
1788	Extracts the list of identifiers from the XML .
1789	Extracts the status code from the XML .
1790	Extract status message from XML
1791	Call mapper function
1792	Call a callback .
1793	Handle an error .
1794	Enqueue an action
1795	Find an item by name
1796	Checks if the string starts with the given string
1797	Execute SQL query
1798	Extracts the contents of a tag .
1799	Extracts the attributes from a tag .
1800	Encode a string .
1801	Decode a string .
1802	Check if a user exists
1803	Load an OAuth token
1804	Handle an OAuth request .
1805	Get widget menu .
1806	Convert XML schema to SQL definition
1807	Transforms a query to a table .
1808	Set an item
1809	Get a value from the object
1810	Set the full name of a full name .
1811	Set boolean type
1812	Set date type
1813	Get date type
1814	Removes a key from the collection .
1815	Get the schema object
1816	Create a new XML object
1817	Initialize the database .
1818	Add an item to the collection .
1819	Get name .
1820	Sets the name of the first name .
1821	Returns the default values for the given config .
1822	Get the status of a user .
1823	Delete a resource .
1824	Reads a value from a string
1825	Loads the XML file and returns it .
1826	Parse XML .
1827	Returns a QXML representation of the request .
1828	Called when an exception is found
1829	Resolve ticket id
1830	Write a config value
1831	Read config value from config
1832	Create a new user .
1833	Returns the user s username
1834	Auth login
1835	Checks if a ticket is authorized .
1836	Log an error message .
1837	Recursively queues a queue .
1838	Recursively deletes a queue .
1839	Queue a queue
1840	Queues the queue processing .
1841	Returns the number of items in the queue .
1842	Checks if a ticket is processed
1843	Logs a ticket .
1844	Execute SQL query
1845	Get the fields of a table .
1846	Select rows from a table
1847	Update a table
1848	Enqueue an interactive mode
1849	Run a recurring event .
1850	Returns the size of the queue .
1851	Get address .
1852	Authenticate a user .
1853	Finds a record by ID
1854	Delete a customer .
1855	Perform a CURL request
1856	Sign on the server
1857	Generate a hash for a transaction
1858	Refund a Card
1859	Initialize the queue .
1860	Factory method to create a new adapter
1861	Returns the default settings .
1862	Sets HTTP headers
1863	List all bookbooks
1864	Creates a new RequestFactory instance
1865	Handle HTTP request .
1866	Walk through all data
1867	Charge a transaction .
1868	Get a charge .
1869	Get a payment .
1870	Refund a payment
1871	Store a credit card
1872	Store a card from a token
1873	Get a credit card
1874	Get a list of cards .
1875	Delete a card
1876	Handle errors .
1877	Perform a HTTP request .
1878	Map to QuickBooks ID
1879	Map a function to an application ID
1880	Add a request to the queue
1881	Filter a list of actions
1882	Check if the current version is required
1883	List deleted query
1884	List deleted query response
1885	Creates a transaction for a transaction .
1886	Create a transaction for a transaction .
1887	Add a new sales receipt
1888	Add a new job type
1889	Builds the filter for the given action
1890	Flushes all caches .
1891	Flushes all tags in the cache .
1892	Finds a command by its name .
1893	Run the command .
1894	Checks if the given extension is loaded .
1895	Check if extension file is loaded
1896	Load the extension for the given extension key
1897	Load extension tables for extension
1898	Checks if the installation is valid .
1899	Execute scheduled tasks .
1900	Execute a single task
1901	Migrate the given statements .
1902	Lock the backend .
1903	Unlocks the backend .
1904	Create admin command .
1905	Returns a list of available upgrades .
1906	Generate package states .
1907	Get the folder structure .
1908	Executes the extension command .
1909	Executes an action with the given arguments .
1910	Creates a new instance of the command line .
1911	Create a new instance of typo3 command .
1912	Create a new PHP command .
1913	Executes a command .
1914	Handle an exception .
1915	Create a new upgrade wizard .
1916	Wrap a string with indentation .
1917	Execute a request .
1918	Make absolute URL .
1919	Check extension constraints .
1920	List wizards .
1921	Executes the wizard command .
1922	Executes the upgrade command .
1923	Executes a subprocess command .
1924	Checks if an extension is compatible .
1925	Setup the extensions .
1926	Returns the root node .
1927	Get extension structure .
1928	Creates the structure structure for the given packages .
1929	Generate XML for the given class name .
1930	Adds attributes to the XML element .
1931	Adds the documentation to the XML document .
1932	Resolve the command method name .
1933	Map command arguments to controller arguments .
1934	Call command method .
1935	Creates a default logger .
1936	Returns the short description of the command .
1937	Parse definitions .
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invokes the start step .
1941	Invokes the given step .
1942	Setup extensions .
1943	Setup the active extensions .
1944	Remove inactive packages .
1945	List available extensions .
1946	Flush database cache tables .
1947	Handle an error .
1948	Register the installer script .
1949	Select a single choice .
1950	Ask a question .
1951	Ask a confirmation question .
1952	Ask hidden response .
1953	Validate a question .
1954	Ask the response and validate the response .
1955	Executes the command .
1956	Write a log record .
1957	Returns the number of performed updates .
1958	Adds a list of updates to the database .
1959	Adds errors to the collection .
1960	Removes the configuration from the given paths .
1961	Show the current configuration .
1962	Show the active configuration .
1963	Show local configuration .
1964	Set the value of a file .
1965	Called when the application is installed .
1966	Add a flash message .
1967	Safely copies the contents of a file .
1968	Generate XSD schema .
1969	Initializes the package manager .
1970	Override this method to override the class name
1971	Register an implementation of the extension class .
1972	Sets the value of a local configuration value .
1973	Convert value to target type
1974	Get the type
1975	Checks if the given type can be converted to a target type .
1976	Check if the given command is available .
1977	Configure the command .
1978	Executes the command .
1979	Ensure that the command is required
1980	Initializes the compatibility layer .
1981	Run the command .
1982	Render an exception .
1983	Outputs an exception .
1984	Outputs the trace trace .
1985	Returns the full filename for the given file name .
1986	Display an error message .
1987	Execute MySQL command .
1988	Executes a subprocess command .
1989	Render the schema result .
1990	Render static data .
1991	Updates the schema updates .
1992	Build a sequence of runLevels .
1993	Builds a Sequential sequence .
1994	Build the basic runtime configuration .
1995	Flush groups .
1996	Flush all cache tags
1997	List all registered cache groups .
1998	Hydrate the dictionary .
1999	Trace the dictionary .
2000	Returns the number of files in a directory .
2001	Convert data to JSON
2002	Returns the description of the transaction .
2003	Get the token
2004	Checks if the token is valid .
2005	Set start time
2006	Set end time
2007	Get all issues
2008	Run the scan .
2009	Normalizes a path to a path .
2010	Exit with error
2011	Split a list of tokens into a delimited array .
2012	Trim whitespaces .
2013	Call function usage checker function
2014	Add a new record .
2015	Determines whether or not the terminal is enabled .
2016	Get windows terminal size
2017	Attempts to find the autoload for the given identifier .
2018	Locates a class by its name .
2019	Locates a function by its name .
2020	Open the autoloader
2021	Get file statuses
2022	Compile a constant .
2023	Compile a class constant .
2024	Compute the reflections .
2025	Checks if the given line number contains the given line number .
2026	Returns all class classes .
2027	Create a property from a class name .
2028	Create a property from an instance .
2029	Returns a list of string types .
2030	Finds all reflections of a given type .
2031	Finds reflection by identifier .
2032	Create a reflection instance from a class name and parameter .
2033	Creates a reflection instance from the given class and parameter name .
2034	Create a parameter from a closure .
2035	Checks if the node is null .
2036	Get the type of this node .
2037	Set the parameter type .
2038	Returns all functions in the source .
2039	Creates a reflection method from a class name .
2040	Creates a method from an instance of an instance .
2041	Get the prototype of this method .
2042	Checks if the class is a constructor .
2043	Export a class name .
2044	Creates a new class from the given node .
2045	Get all methods of this class .
2046	Returns a list of all methods of this class .
2047	Check if a method exists .
2048	Returns the value of a constant .
2049	Get the constructor .
2050	Get all properties of this class .
2051	Returns the parent class .
2052	Returns all parent classes .
2053	Get the traits of the class .
2054	Returns the class for the given node .
2055	Checks if the given object is an instance of the class .
2056	Checks if the given class is a subclass .
2057	Checks if the given interface is implemented .
2058	Returns true if the class is instantiable .
2059	Checks if the object is a cloneable .
2060	Gets the interfaces hierarchy hierarchy .
2061	Set static property value .
2062	Set the final state of the class .
2063	Removes a method from the class .
2064	Add a new method .
2065	Add a property .
2066	Remove a property .
2067	Checks if the given reflector is a Reflectionor .
2068	Export a class instance
2069	Create a reflection class .
2070	Get runtime properties .
2071	Creates a property node node .
2072	Populate the function abstract .
2073	Set the optional option flag .
2074	Returns the number of required parameters .
2075	Returns an array of parameters .
2076	Get parameter by name
2077	Checks if the parameter is a variadic parameter .
2078	Set the return type .
2079	Get body code
2080	Get the return statements as an array .
2081	Returns an array of identifiers by type .
2082	Creates a new reflection instance .
2083	Returns the value of the constant .
2084	Gets the modifiers .
2085	Generate documentation .
2086	Format the doc .
2087	Extract properties from the graph .
2088	Extracts the cardinality of a property .
2089	Checks if the given type is an enum .
2090	Creates a map of properties for the given types .
2091	Convert namespace to directory
2092	Fix css files .
2093	Check if a relationship exists
2094	Returns the cardinality of the given ID .
2095	Get the URL for a property .
2096	Convert field to PHP type
2097	Get relation name .
2098	Finish the file .
2099	Flush the buffer .
2100	Add a new item .
2101	Adds a single language item .
2102	Add multi - language items .
2103	Returns a list of urls for the given site .
2104	Set gzip .
2105	Add a sitemap .
2106	Write data to file .
2107	Finish the file .
2108	Finish compression .
2109	Set the expiration date .
2110	Set the key params
2111	Set the sub key params
2112	Returns the usage string for the given usage .
2113	Get user id
2114	Parse a string from a string .
2115	Check if the process is running .
2116	Terminate the process .
2117	Parse an operation .
2118	Handle the error message .
2119	Set the error code
2120	Sets the value of the request .
2121	Handle bad passphrase errors .
2122	Parses a PIN entry
2123	Returns the hash algorithm name .
2124	Sets whether the user can sign .
2125	Set whether or not the user can encrypt .
2126	Parse a string
2127	Parse a date string
2128	Delete a public key
2129	Get fingerprint
2130	Encrypt data .
2131	Encrypt a file
2132	Encrypts the given data .
2133	Encrypt a file
2134	Decrypts encrypted data
2135	Decrypt a file
2136	Sign a file .
2137	Add a decrypt key
2138	Add encrypt key
2139	Add sign key
2140	Add a key to the array
2141	Import a key
2142	Export a key
2143	Decrypt and verify the given data .
2144	Prepare input data .
2145	Prepare output file .
2146	Get private keys
2147	Send a command
2148	Reset the command .
2149	Run the command .
2150	Set the operation .
2151	Sets the PIN entry .
2152	Get the version information .
2153	Get process data
2154	Set process data
2155	Closes the subprocess .
2156	Close the agent launch process .
2157	Close the pipe
2158	Close idle agents .
2159	Finds the executable executable .
2160	Get pin entry
2161	Print debug message
2162	Get primary key .
2163	Checks if the key is valid .
2164	Check if the key can be encrypted .
2165	Set the log file .
2166	Log a message .
2167	Connect to the pinentry
2168	Parse a command line .
2169	Initialize the pin entry
2170	Disconnects the server .
2171	Sends a PIN message .
2172	Send the current pin
2173	Send a GET command
2174	Convert data to word wrapper
2175	Convert a string to a string
2176	Send data to stdout
2177	Builds a list of translation messages .
2178	Set comment before header
2179	Add multiple lines to the array
2180	Get the main theme data .
2181	Extract translations from file
2182	Get file comment
2183	Set default headers
2184	Get file data from file
2185	Extract headers from a string .
2186	Resolves a call expression .
2187	Checks if the comment is a comment .
2188	Calculate match score score .
2189	Checks if the given directory matches the given matchers .
2190	Get files from a directory .
2191	Makes a json file
2192	Build a list of translations .
2193	Remove JS strings from source file
2194	Mark a list of updates .
2195	Mark all updates .
2196	Set success by hook .
2197	Check the list of resources for a list of lists
2198	Check to see if the list is updated
2199	Save progress .
2200	Render Dropler .
2201	Generate hash from database
2202	Checks if a configuration is valid .
2203	Import a configuration file .
2204	Import configs .
2205	Install modules .
2206	Check if link is active .
2207	Check if link is active .
2208	Go to home .
2209	Get a single file .
2210	Get items from data
2211	Get total count from data
2212	Prepare a string for comparison
2213	Set data .
2214	Resolve type .
2215	Resolve options .
2216	Render a grid
2217	Get the cell cell
2218	Returns the filter filter for the given column .
2219	Render grid column operator .
2220	Checks if a template exists .
2221	Walk the select statement .
2222	Set the source
2223	Check if the request is ready to be redirected .
2224	Process request data .
2225	Process a mass action
2226	Processes an export
2227	Process filters .
2228	Process session data .
2229	Prepare the query .
2230	Set a session data
2231	Get a column by id
2232	Check if a column exists
2233	Set columns order order
2234	Add a mass action .
2235	Add a tweak .
2236	Get Tweak tweaks .
2237	Get a Tweak instance
2238	Get Tweaks group .
2239	Add a row action .
2240	Set template template
2241	Add export .
2242	Get route url
2243	Set the filters .
2244	Set limits .
2245	Get page count
2246	Set maximum results .
2247	Check if the title section is visible .
2248	Determines if the filter is visible .
2249	Check if the limit is visible
2250	Show the show columns .
2251	Hide columns .
2252	Get grid response .
2253	Get raw data .
2254	Gets the session filters .
2255	Get a filter by its id
2256	Checks if a filter has a filter .
2257	Initialize the query builder .
2258	Render a cell .
2259	Checks if the export is visible .
2260	Sets the order .
2261	Sets the size of the column .
2262	Set query data
2263	Returns the result of the query .
2264	Set the align
2265	Get operators .
2266	Add a column .
2267	Set columns order .
2268	Add route parameters
2269	Get route parameters .
2270	Render a row
2271	Add a new type .
2272	Add a column .
2273	Set the container .
2274	Get response headers .
2275	Get grid data
2276	Get flat grid data .
2277	Set the template
2278	Get parameter by name
2279	Get the list of actions to render .
2280	Clear all items .
2281	Adds an element to the cart .
2282	Remove an item from the collection .
2283	Returns all items in the collection .
2284	Login a user
2285	Get user information .
2286	Set the remember user .
2287	Callback for the user .
2288	Returns the length of a string
2289	Slice a string
2290	Converts a string to lower case
2291	Converts a string to upper case
2292	Get a mock instance
2293	Register a new test listener .
2294	Defines a function to create a new mock instance .
2295	Display a language flag .
2296	Get country code
2297	Get the code for the given name .
2298	Returns the language for the language .
2299	Get locale name
2300	Set locale .
2301	Redirect to the page .
2302	Redirect to the current locale .
2303	Set locale .
2304	Returns the index of the elements in the collection .
2305	Removes an element from the collection .
2306	Returns a copy of the elements in the collection .
2307	Set auth login
2308	Set OAuth token
2309	Send message
2310	Connect to SMTP server
2311	Start tls
2312	Auth login
2313	Auth OAuth OAuth Bearer
2314	Authenticate XOAuth2 .
2315	Sets up the recipient to the given recipient .
2316	Parses data .
2317	Quit the connection .
2318	Get the code from the server
2319	Set the email address .
2320	Set fake from email
2321	Find a file in the cache .
2322	Finds a file .
2323	Load a collection of classes .
2324	Fixes namespace declarations .
2325	Write cache file to disk .
2326	Get the ordered list of classes .
2327	Add a set of prefixes .
2328	Add a prefix to the list of paths .
2329	Returns the file for the given class .
2330	Parses the given text .
2331	Detect block type .
2332	Parse block .
2333	Get inline markers .
2334	Prepare marker markers .
2335	Parse inline text .
2336	Parses an emph strong mark .
2337	Determine if the given line is an HTML tag .
2338	Consumes the content of the current line .
2339	Determine if the given line is aenced code .
2340	Determine if the line is a header .
2341	Parse the header .
2342	Replace escape characters .
2343	Parse a link .
2344	Parse an image .
2345	Parse inline code .
2346	Consume the content of a line
2347	Determine if the line is a line .
2348	Renders a block .
2349	Parse a quote .
2350	Parses a reference line
2351	Renders the header .
2352	Parses a markdown .
2353	Determine if the line is a table .
2354	Parse a table
2355	Render a table
2356	Parses a markdown url .
2357	Checks if the subject ID matches the given format .
2358	Creates a new DOM element .
2359	Creates a new element with the given text .
2360	Validate image .
2361	Check if value is empty
2362	Check for illegal column keys .
2363	Create an Exporter instance
2364	Add a value to the list
2365	Validate the given DOMDocument .
2366	Add a new name
2367	Add a summary .
2368	Add a description .
2369	Add price .
2370	Add a bonus .
2371	Add salesFrequency
2372	Add a date added to the user .
2373	Add a sort .
2374	Validate value .
2375	Get a hook .
2376	Sets a symlink .
2377	Set a hook .
2378	Remove a hook .
2379	Count the number of commits .
2380	Gets references .
2381	Get a commit object .
2382	Returns the tree for the given hash .
2383	Returns a Blob object .
2384	Get a list of revisions .
2385	Get the size of the repository .
2386	Executes a git command .
2387	Get the description of the repository .
2388	Run a command .
2389	Clone the repository .
2390	Get all parents .
2391	Get short message
2392	Get all branches in the repository .
2393	Initialize a repository .
2394	Check if a repository is valid .
2395	Clone a repository .
2396	Clone a branch .
2397	Clone a repository
2398	Gets the group of lines .
2399	Get the lines of the file .
2400	Get a reference by its name .
2401	Get all branches .
2402	Get local branches .
2403	Get remote branches
2404	Get file content
2405	Get the mimetype .
2406	Returns an array representation of the diff .
2407	Parse the given text .
2408	Writes the given query to the format .
2409	Write column name .
2410	Create an array of columns .
2411	Creates a new column .
2412	Create a new table .
2413	Get the SQL statement .
2414	Boot the cacheable model .
2415	Store cache key .
2416	Get cache keys
2417	Flush cache keys .
2418	Clears the cache .
2419	Reset cache config
2420	Generate cache key
2421	Cache query .
2422	Validate HppRequest
2423	Validate the response .
2424	Add auto - settle flag
2425	Set the returnTss attribute .
2426	Add a validator to the card .
2427	Add dcc enable flag
2428	Set card storage enable
2429	Set OfferSave card
2430	Set PayerExists
2431	Add hpp version
2432	Generate default values
2433	Encode this message .
2434	Decode the account .
2435	Encode this message .
2436	Decode this message .
2437	Get field config rules .
2438	Unpack a deferred result .
2439	Decorator to resolve a value .
2440	Convert cursor to key
2441	Convert cursor to offset
2442	Compile the list of nodes .
2443	Create request data
2444	Get all sentences .
2445	Split text into sentences
2446	Detect language .
2447	Get language codes .
2448	Returns the default values for this table .
2449	Cache a row
2450	Get a row from the cache .
2451	Checks if an offset exists .
2452	Get a row
2453	Set the value of a row
2454	Remove an item from the cache .
2455	Get the join field for the given table .
2456	Delete the model .
2457	Returns the class name for the given type .
2458	Set config value
2459	Get field factory
2460	Execute a query .
2461	Execute a transaction .
2462	Begin a transaction .
2463	Check if data is valid
2464	Checks if a value exists .
2465	Edits the given values .
2466	Delete the model .
2467	Relate the given rows .
2468	Relate all rows in this relation .
2469	Relate all tables .
2470	Selects a table from a table .
2471	Returns the value for the given name .
2472	Sets the limits .
2473	Sets the metric rules .
2474	Sets the producer destinations .
2475	Set consumer destinations .
2476	Set advices .
2477	Set Endpoints .
2478	Sets the logs .
2479	Sets the metrics .
2480	Set field violations .
2481	Sets the operations .
2482	Set the view view .
2483	Sets the included permissions .
2484	Sets the stage .
2485	Set consumer destinations .
2486	Sets the extensions .
2487	Sets the providers .
2488	Sets the requested request .
2489	Sets the required fields .
2490	Sets the bounds .
2491	Set the role .
2492	Sets the subpages .
2493	Set the key types .
2494	Sets the recipients .
2495	Sets the stack entries .
2496	Set producer destinations .
2497	Set consumer destinations .
2498	Sets the requirements .
2499	Sets the bindings .
2500	Sets the metric cost for this metric .
2501	Sets the pages .
2502	Sets the action value .
2503	Sets the source files .
2504	Sets the keys of the service account .
2505	Sets the accounts .
2506	Sets the custom roles support .
2507	Set policy delta .
2508	Sets the exemplar value for this Distribution .
2509	Set features .
2510	Set properties .
2511	Sets the violations of the quota .
2512	Set the private key type .
2513	Set the key algorithm .
2514	Sets the details .
2515	Sets the bindings for the binding .
2516	Public key type .
2517	Set the roles .
2518	Sets the system parameters .
2519	Get the cache file for the given filename .
2520	Checks if the given conditions are valid .
2521	Check if a file exists
2522	Set the contents of a file
2523	Get cache file
2524	Get or create a cache file
2525	Check if the blog is installed .
2526	Install the WordPress plugin .
2527	Install multisite .
2528	Install multiple sites .
2529	Prints the current version .
2530	Get the checksums for a given version
2531	Update the database .
2532	Get the download URL for the given version .
2533	Returns a list of available updates .
2534	Download a package .
2535	Upgrade the current version
2536	Builds a table .
2537	Displays the header .
2538	Move meta box .
2539	Get post type
2540	Get title .
2541	Render meta box .
2542	Setup meta box .
2543	Get meta data
2544	Set the file path
2545	Setup meta data .
2546	Determine if this plugin is disabled .
2547	Creates a new property .
2548	Get a child property .
2549	Get a single option
2550	Get post id
2551	Generate a unique identifier .
2552	Returns the slug of the slug .
2553	Checks if a slug matches a slug .
2554	Prepare a value .
2555	Determines if the given rules are allowed .
2556	Set an option
2557	Set a setting value
2558	Setup properties .
2559	Setup options .
2560	Returns the slug for the given options .
2561	Setup settings settings .
2562	Updates the form fields .
2563	Save post meta data
2564	Check if the post type exists
2565	Get the value of a property
2566	Format a value .
2567	Get a property
2568	Loads the value of a property .
2569	Factory method for creating a new page .
2570	Returns the value of a property .
2571	Determines if the current page can be rendered .
2572	Renders the row .
2573	Render hidden field
2574	Render the label .
2575	Renders the HTML row .
2576	Renders the rules .
2577	Get the value of the post .
2578	Decode a property .
2579	Get post data .
2580	Get the deep deep deep keys and value .
2581	Prepare post data .
2582	Prepare the properties of an array .
2583	Convert a value to a string
2584	Delete a cache
2585	Returns the function name for the given context .
2586	Get the value for a given slug .
2587	Updates the cache
2588	Update cache data
2589	Get the diff between two revisions .
2590	Add hidden meta box .
2591	Load post type .
2592	Redirect to the post - frame
2593	Check if the post type is setup .
2594	Rename a post .
2595	Get field slug .
2596	Get the source
2597	Setup source source
2598	Setup rules .
2599	Initialize the admin .
2600	Generates the body of the admin body .
2601	Render the edit form .
2602	Get the entry type .
2603	Add meta data for a plugin .
2604	Update front page .
2605	Generate a list of WordPress links for a page .
2606	Returns a list of templates for a given ID .
2607	Prepare the value for the given property .
2608	Save meta data .
2609	Render metabox .
2610	Save a post
2611	Updates the post data .
2612	Update meta data .
2613	Save meta data .
2614	Save a revision .
2615	Save properties .
2616	Restore post revision .
2617	Check if a post is valid
2618	Display the given rules .
2619	Determines whether or not a relation should be displayed .
2620	Get the slug of a rule .
2621	Prepare rules .
2622	Check if the current user is allowed .
2623	Get body classes .
2624	Returns all child types .
2625	Get labels .
2626	Returns a list of supported post types .
2627	Remove post type support .
2628	Remove meta boxes .
2629	Sets up the post type .
2630	Setup post types .
2631	Setup page templates .
2632	Add mce buttons
2633	Remove mce buttons .
2634	Get the results of a row
2635	Loads the value for a given value .
2636	Prepare a list of properties .
2637	Prepare a property for a property .
2638	Remove repeater rows from a post
2639	Render a JSON template .
2640	Renders the header .
2641	Renders multiple rows .
2642	Register options .
2643	Get the value for a given key .
2644	Prepare the response .
2645	Returns the ID of the user .
2646	Get the list of users .
2647	Initialize the plugin .
2648	Load the textdomain .
2649	Loads the classes .
2650	Deactivate plugin .
2651	Check if the item is a string
2652	Prepare the properties .
2653	Get the file s file .
2654	Get file value
2655	Update file value
2656	Bind an identifier to the container .
2657	Call a closure .
2658	Get the prefix of a class
2659	Check if a class is a singleton .
2660	Get a singleton instance .
2661	Remove an item from the cache .
2662	Override the labels for the given entry type .
2663	Add menu items .
2664	Generate the menu menu menu .
2665	Render page view
2666	Autoload plugin
2667	Get the list of registered sidebar items .
2668	Get the labels for the post type .
2669	Parse arguments .
2670	Parse post arguments .
2671	Parse term arguments .
2672	Get query arguments
2673	Get the result of the query .
2674	Add help tabs .
2675	Add box .
2676	Register the parent class .
2677	Convert properties to array
2678	Get body classes
2679	Get all boxes .
2680	Get a property by its slug .
2681	Returns a list of all the properties .
2682	Merge multiple boxes
2683	Register the plugin .
2684	Tabular tabular
2685	Loads a value from a post .
2686	Prepare a link array .
2687	Update the value of a link .
2688	Check if a taxonomy is allowed
2689	Display the edit form .
2690	Prepare the post type .
2691	Prepare the meta data
2692	Register post type .
2693	Get format arguments .
2694	Render a file
2695	Get an option
2696	Convert a value to a property
2697	Get the value of a conditional rule .
2698	Get the value of a nested field .
2699	Returns the value of the given rule .
2700	Checks if the given rule is equal .
2701	Checks if the given rule is equal .
2702	Returns true if the rule is greater than the given rule .
2703	Checks if the given rule is not in the list .
2704	Returns true if the given rule matches the given rule .
2705	Gets the value between two values .
2706	Checks if the given rule is between the given rule .
2707	Checks if the given rule is between two values .
2708	Get sort option
2709	Get sort options
2710	Get a list of posts .
2711	Sorts the given values .
2712	Update post values .
2713	Get the meta type of an entry .
2714	List entry types .
2715	Renders the tabs .
2716	Returns a unique identifier for a given key .
2717	Get the layout by slug .
2718	Loads the value for a given value .
2719	Prepare layout properties .
2720	Render a layout input
2721	Renders the repeater row .
2722	Add taxonomy fields .
2723	Prepare taxonomy types .
2724	Setup taxonomies hooks .
2725	Generate the AJAX URL
2726	Handle AJAX request
2727	Get entry type
2728	Get posts .
2729	Get a property
2730	Get a list of properties
2731	Get a list of rules .
2732	Get shortcode
2733	Get the terms .
2734	Get the properties of a term .
2735	Rename a term .
2736	Manage page type columns .
2737	Sets the column type for the post type .
2738	Set the sortable columns .
2739	Prepare posts for posts .
2740	Restrict the page types .
2741	Format the value for a given value .
2742	Get the labels .
2743	Get the terms for a given taxonomy .
2744	Get the value of a term .
2745	Prepare a value .
2746	Search for a user .
2747	Get historical data
2748	Get a single quote .
2749	Get exchange rate .
2750	Get exchange rates .
2751	Fetch a list of quotes .
2752	Get the attributes for the header .
2753	Render a cell .
2754	Render append append
2755	Get all images
2756	Set the request parameters .
2757	Set default values
2758	Returns the value of the given parameter .
2759	Create a group .
2760	Wrap the given content .
2761	Wrap a group .
2762	Add class to options array
2763	Register routes .
2764	Register assets routes .
2765	Register auth routes .
2766	Add a testcase .
2767	Get a process by status
2768	Builds out the tree .
2769	Optimize the tree .
2770	Count the status of the process .
2771	Count the results of the process .
2772	Fills the dependencies of the given class .
2773	Returns the dependency tree for the given class .
2774	Outputs the given output .
2775	Write error output .
2776	Initialize the server .
2777	Get the version of the current version .
2778	Get the file url .
2779	Download file .
2780	Selects the selected text with the given text .
2781	Save legacy data .
2782	Save data to database .
2783	Loads a legacy language .
2784	Load legacy legacy legacy .
2785	Check if the server is accessible .
2786	Determine if the server is running .
2787	Get the cloud service
2788	Guess the port for the given host .
2789	Detect cloud service by status
2790	Builds the process .
2791	Gets the excluded groups .
2792	Take a screenshot and save it .
2793	Returns the snapshot URL for the given path .
2794	Instantiates all registered listeners .
2795	Get file path
2796	Quote xpath attribute
2797	Computes the optimal distance between the tree .
2798	Cast a value to a guess type .
2799	Check the process timeout .
2800	Resolve the result .
2801	Get all executors .
2802	Setup ci capabilities .
2803	Set custom configuration options .
2804	Retrieve configuration values .
2805	Dequeues all queued processes .
2806	Flush the process output .
2807	Get favorite items .
2808	Count summary of scenario
2809	Update summary table .
2810	Move summary table .
2811	Update button buttons
2812	Add a favorite .
2813	Remove favorites .
2814	Toggle favorites .
2815	Check if user is favorites .
2816	Gets favorites by user .
2817	Get permissions .
2818	Inserts translation files .
2819	Create view files .
2820	Create migration .
2821	Create events .
2822	Generate a file .
2823	Get the stub path .
2824	Checks if the path exists .
2825	Check if a table exists
2826	Select a random redis server
2827	Set all redis
2828	Select a redis server
2829	Set a single key server
2830	Call redis command
2831	Set current database
2832	Removes all keys from the cache
2833	Set the value of a key
2834	Check if a key exists
2835	Type of a key
2836	Expire a key
2837	Flush all keys
2838	Execute multi - process
2839	Get database size
2840	Add a function to the list
2841	Dispatch an event .
2842	Add a timing event .
2843	Replace the configuration placeholder for the given event name .
2844	Merges the configuration of the given event .
2845	Dispatch memory usage .
2846	Dispatch request time .
2847	Create a new instance from a console event .
2848	Parse the SRID
2849	Parse geometry .
2850	Parse a point .
2851	Calculate coordinate
2852	Parse a point list
2853	Parse a list of point lists .
2854	Parse multi polygon
2855	Parse geometry .
2856	Match a token .
2857	Creates an error message .
2858	Creates a list of response parts .
2859	Get request time
2860	Create API client
2861	Send a command
2862	Returns the redirect URL .
2863	Checks if the options are valid .
2864	Render a path
2865	Render a base64 image
2866	Finds all pages
2867	Finds elements within a given page .
2868	Set an attribute value .
2869	Key event event .
2870	Select an option .
2871	Set debug mode .
2872	Set proxy .
2873	Get network traffic .
2874	Get all cookies
2875	Set cookie
2876	Get javascript errors
2877	Returns the error message .
2878	Compile the AST node .
2879	Compiles a route variable .
2880	Create a TrieNode .
2881	Flush text buffer .
2882	Lex a number .
2883	Lexical punctuation .
2884	Lex quoted string .
2885	Lexes text char
2886	Lexes a variable name .
2887	Add a route .
2888	Get named route .
2889	Create a new trie node .
2890	Normalize a name .
2891	Expect a token .
2892	Get the current token .
2893	Returns the next token .
2894	Gets the next token .
2895	Returns the next token .
2896	Add a child node .
2897	Add a child node .
2898	Get all children of this node .
2899	Adds a literal node to the list .
2900	Add a variable child node .
2901	Build all routes .
2902	Add group options .
2903	Create a new RouteBuilder .
2904	Apply group attributes .
2905	Apply group constraints .
2906	Apply group middleware .
2907	Applies the group routes to the group template .
2908	Register rule factories .
2909	Iterate over all nodes in the given node .
2910	Build the route .
2911	Add a method to the route .
2912	Add an attribute .
2913	Add multiple attributes .
2914	Add multiple constraints .
2915	Add middleware bindings .
2916	Add middleware .
2917	Parse punctuation .
2918	Parse text .
2919	Parse tokens .
2920	Parse a variable .
2921	Parse variable rule .
2922	Checks if the given segment is a valid route .
2923	Adds a group to the router .
2924	Add a new route .
2925	Dispatch routes .
2926	Checks if the request method is valid .
2927	Checks if the route is valid .
2928	Compares the URI against the route URI .
2929	Run the route .
2930	Returns the parameters for the given method .
2931	Parse a route .
2932	Parse a regex parameter .
2933	Add a route .
2934	Define a route .
2935	Returns the URL for the given route name .
2936	Prepare the request .
2937	Get uri .
2938	Validate API response .
2939	Validate API response .
2940	Validate API response .
2941	Get a provider by name .
2942	Handle the request .
2943	Get details of an IP address
2944	Format details object .
2945	Get IPinfo for given IP address
2946	Sets a value to the cache .
2947	Manage the size of the cache .
2948	Performs a POST request .
2949	Generate HTML code .
2950	Group routes .
2951	Parse path .
2952	Checks if a variable is a variable .
2953	Called when a variable is cached
2954	Sets the map tree tree .
2955	Get redirect URL .
2956	Check the middleware
2957	Run a request .
2958	Initialize database connection
2959	Check if headers are valid
2960	Returns the value of a header .
2961	Insert a new record into the database
2962	Get dias params
2963	Set a singleton instance
2964	Get a singleton instance
2965	Register a concrete instance .
2966	Get a new instance of a class
2967	Get a singleton instance
2968	Run the given method .
2969	Run the request .
2970	Initialize the database .
2971	Add pipe .
2972	Initialize Redis connection
2973	Subscribe to a channel
2974	Subscribe to a channel .
2975	Reset the table .
2976	Wrap prepare SQL statement
2977	Execute the query
2978	Bind parameters to PDO
2979	Wrap a table .
2980	Wrap a row
2981	Builds a condition string .
2982	Store build attributes .
2983	Replace build attributes
2984	Builds a sub - builder .
2985	Select columns .
2986	Add a WHERE clause .
2987	Add OR WHERE condition
2988	Add a WHERE clause
2989	Adds a WHERE clause .
2990	Add a WHERE clause .
2991	Adds a where clause to the query .
2992	Add WHERE condition
2993	Add a WHERE clause
2994	Set group by field
2995	Adds a WHERE clause .
2996	Adds a WHERE clause .
2997	Sets the ORDER BY clause .
2998	Joins a table .
2999	Adds a builder to the table .
3000	Get paginate results
3001	Get all results
3002	Returns the result of the query
3003	Get list of fields
3004	Execute SQL query
3005	Prepare a prepared statement .
3006	Start a transaction .
3007	Handle an exception .
3008	Generate a random id
3009	Generate a random id
3010	Generate a random random string
3011	Normalize a DSN .
3012	Create a DQL query .
3013	Executes the given expression .
3014	Begin a transaction .
3015	Commits a transaction .
3016	Roll back a transaction .
3017	Get the last insert ID
3018	Resets a tag .
3019	Consume the given SQL code .
3020	Escape the given value .
3021	Render the template
3022	Get debug query
3023	Get all results
3024	Get single row
3025	Get a single row
3026	Set a table
3027	Add a WHERE clause .
3028	Render a condition .
3029	Add a group .
3030	Set a field .
3031	Add option to select
3032	Sets the order .
3033	Set template mode
3034	Limit query
3035	Parse a string .
3036	Fetches the end of a string .
3037	Create a message for the given line .
3038	Checks if the given string starts with the given string .
3039	Fetches variables for a variable .
3040	Checks if the variable is a parameter expression .
3041	Fetch a parameter expression .
3042	Fetch parameter expansion symbol .
3043	Split a variable name into an array .
3044	Parse a variable parameter .
3045	Assign a variable to a variable .
3046	Check if a variable exists .
3047	Get a variable .
3048	Parse a key .
3049	Parse content .
3050	Parse raw content .
3051	Parse a line .
3052	Parse an export line
3053	Parse a line value .
3054	Returns the content of the content .
3055	Start a task .
3056	Start a workflow .
3057	Returns a workflow object .
3058	Get the time and duration from the buffer .
3059	Get class properties .
3060	Configure sitemap .
3061	Fixes the configuration .
3062	Add a new source .
3063	Event handler .
3064	Returns the root menu .
3065	Get fonts .
3066	Get icon names
3067	Get font CSS
3068	Encrypts and encrypts the given password .
3069	Upgrade a legacy version .
3070	Execute the configuration .
3071	Writes smoke credentials .
3072	Get config array
3073	Checks if the current URI is filtered .
3074	Register commands .
3075	Returns all templates .
3076	Find templates in a bundle .
3077	Execute a command .
3078	Returns a new instance of the given string .
3079	Sanitize a string
3080	Replace the first occurrence of the string in the string .
3081	Replace the last occurrence of a string .
3082	Creates a new string .
3083	Returns a new string with the given delimiter .
3084	Returns true if the string contains the given needle .
3085	Encrypts the password
3086	Decrypt the response
3087	Encrypt a plain text
3088	Decrypts encrypted text
3089	Encrypts the email address
3090	Decrypt the response .
3091	Encrypts the token and returns the hash
3092	Add a range .
3093	Add modifier .
3094	Add a range of pages .
3095	Add raw source .
3096	Add a file source .
3097	Adds an iterator to the collection .
3098	Unserialize a LinkedCRS object .
3099	Set optional constructor arguments .
3100	Creates a new instance of the given value .
3101	Creates a new instance of the given property .
3102	Creates a new instance from a JSON string .
3103	Get the config path .
3104	Get the namespace .
3105	Loads the cache provider .
3106	Creates a master node .
3107	Get the native balance .
3108	Returns the native balance of the balance .
3109	Returns the balance value for a given asset .
3110	Returns the balance of the asset .
3111	Returns the balance of the given asset .
3112	Returns the hexumum of the given entropy bytes .
3113	Converts a bitstring to a hex string .
3114	Convert mnemonic to entropy bytes
3115	Authorize a trustline .
3116	Revokes a trustline .
3117	Returns the XDR representation of this message .
3118	Converts a value into a byte array .
3119	Returns a string representation of a XDR Encode .
3120	Get unique hashes .
3121	Checks if an account exists .
3122	Set the authentication flag .
3123	Set auth revocable
3124	Get public key checksum
3125	Convert an opaque string to an opaque string .
3126	Parse raw data .
3127	Sign the signature of the transaction .
3128	Submit a transaction .
3129	Create a patch object from a text string .
3130	Converts patches to text .
3131	Add the context to the patch .
3132	Deep copy of patches .
3133	Calculate the bitap score for a bitmap .
3134	Returns alphabetical alphabetically .
3135	Pretty print the changes
3136	Returns a string representation of the diff .
3137	Builds a diff from a string .
3138	Computes the levenshtein of the diff .
3139	Computes the diff between two strings .
3140	Computes the line mode .
3141	Computes the difference between two lines .
3142	Returns the common prefix between two strings .
3143	Returns the common suffix between two strings .
3144	Returns the longest overlap between two strings .
3145	Checks if two strings are equal .
3146	Returns the best match between two strings .
3147	Converts a text1 text1 to a string .
3148	Get recipients .
3149	Get the current version .
3150	Register pug compiler .
3151	Get the configuration .
3152	Initialize the plugin .
3153	Get the pug
3154	Get the cache path .
3155	Get a single option
3156	Check if a file is expired .
3157	Extract path .
3158	Get the client instance
3159	Get B2BFamily instance
3160	Prints the hash of a string
3161	Resolve a file .
3162	Display a file .
3163	Extract extension options .
3164	Removes an option from the renderer .
3165	Reset all options .
3166	Get the renderer instance .
3167	Add a filter .
3168	Add a keyword .
3169	Execute the template directory .
3170	Run the command .
3171	Get available methods .
3172	List available methods .
3173	Returns an array of errors .
3174	Returns a list of all the meta data .
3175	Mark duplicates .
3176	Find duplicate items .
3177	Remove empty attributes .
3178	Process a record .
3179	Handle all releases .
3180	Get elapsed time
3181	Reads the contents of the command .
3182	Convert arguments to string
3183	Validate arguments .
3184	Throw exception if the command is not supported
3185	Register the autoloader .
3186	Unregister the autoloader
3187	Get rediska path
3188	Returns a list of connections by key name .
3189	Get a connection by name .
3190	Get channel by connection
3191	Retrieves a configuration value from the database .
3192	Set config value
3193	Throws an exception if the transaction is not supported .
3194	Create a queue
3195	Delete a queue
3196	Returns the number of queues .
3197	Sends a message to the queue
3198	Receive messages from queue
3199	Delete a message
3200	Get total elapsed time
3201	Set the value of a field
3202	Set the value of a field
3203	Increment the value of a field .
3204	Remove a field from the database
3205	Write data to Redisk
3206	Subscribe to a channel
3207	Publish a message
3208	Add message to buffer
3209	Throws an exception if not supported
3210	Called when an error occurs .
3211	Add a queue
3212	Remove a queue
3213	Returns the queue cache .
3214	Watch a set of keys
3215	Unwatch watcher .
3216	Add a command .
3217	Creates a new post
3218	List posts .
3219	Creates a new Logger instance
3220	Add a value to the set
3221	Returns the length of the set by score .
3222	Get a set by score
3223	Remove a set by score
3224	Increment a value for a given value .
3225	Get a set byRank
3226	Removes the specified rank from the set .
3227	Returns the rank of a given value .
3228	Combines a set of sets .
3229	Computes the intersection of a set of sets .
3230	Returns an array of all items in the collection .
3231	Create a set of values from an array .
3232	Set name .
3233	Get a connection by key name
3234	Get the list of connections .
3235	Set the connection to the database .
3236	Subscribe to Redisk
3237	Get a Rediska connection
3238	Set the key distributor .
3239	Get the serializer
3240	Returns a new instance of Rediska .
3241	Get the name of a command .
3242	Execute all commands .
3243	Add a command to the pipeline .
3244	Writes the command .
3245	Set the response callback
3246	Transforms a multi - bulk command .
3247	Append a value to the list
3248	Prepend a value to the list
3249	Truncate a list
3250	Set a value in the list
3251	Insert a value into the list .
3252	Insert a value into the list .
3253	Insert a value into the list
3254	Remove a value from the list
3255	Removes the item from the list
3256	Removes the item from the list
3257	Removes the item from the list
3258	Removes an item from the list
3259	Create a new item from an array
3260	Load a transaction by id
3261	Save data to the database
3262	Remove an item from the database
3263	Removes all IDs from the cache .
3264	Set the cache directives .
3265	Returns a list of IDs that match the given tags .
3266	Get meta data
3267	Collect garbage collection .
3268	Add a value to the set
3269	Remove a value from the set
3270	Moves a value to a set
3271	Compares two sets .
3272	Combines a set of sets .
3273	Returns the difference between two sets .
3274	Get Rediska instance
3275	Set a value
3276	Set and expire a value
3277	Set a bit at the specified offset .
3278	Get or set a value
3279	List followers .
3280	Displays a user .
3281	Follow the current user
3282	Move the item to the database
3283	Set the expiration time .
3284	Get rediska
3285	Set the stream mode .
3286	Add a Rediska
3287	Get all instances .
3288	Create an instance of Rediska
3289	Increment the value of the given subject .
3290	Reset a subject
3291	Get bucket name .
3292	Set multi - increment transaction part .
3293	Sets the number of items in the transaction .
3294	Create a socket connection .
3295	Get the read buffer .
3296	Read data from redis server
3297	Reads a single line .
3298	Set the read timeout .
3299	Get stream context
3300	Read and throw an exception
3301	Validate a nonce .
3302	Binds a queue to the queue .
3303	Ack message .
3304	Nack a message
3305	Get message properties .
3306	Start the daemon .
3307	Stop the daemon .
3308	Builds a new connection .
3309	Builds a queue handler .
3310	Send a sync message .
3311	Get the driver for the given connection .
3312	Nack a message .
3313	Close the connection .
3314	Consume a message .
3315	Replace the model .
3316	Qualify class name .
3317	Process an action .
3318	Create a new model .
3319	Convert data to json
3320	Update a model .
3321	Remove a model .
3322	Checks if the given subject is logged in .
3323	Render a document .
3324	Get the next byte string
3325	Get all achievements for an app .
3326	Close the connection .
3327	Receive a single packet .
3328	Send a packet to the socket .
3329	Get a reply from the master
3330	Execute a command .
3331	Get the challenge .
3332	Send a RCON command
3333	Connect to the server
3334	Get all servers
3335	Fetch the schema
3336	Convert Community ID to Steam ID
3337	Convert Steam ID to Community ID
3338	Resolve a vanity URL .
3339	Fetches the list of friends .
3340	Fetch all available games .
3341	Fetches the user s groups .
3342	Get steam id .
3343	Get the recent playtime for a given app id .
3344	Get the total playtime for a given app id
3345	Fetch information about the profile .
3346	Rotate IP address
3347	Initialize socket
3348	Check if the user is authenticated
3349	Connect to a socket .
3350	Create a new object
3351	Returns an instance of the cached instance .
3352	Checks if the cache is cached .
3353	Cache the cache .
3354	Get cache IDs .
3355	Initialize the socket
3356	Attempt to authenticate the user
3357	Close the socket .
3358	Reads data from the socket .
3359	Selects a socket .
3360	Send data to socket
3361	Get all news items for an app .
3362	Returns an array of all classes that are equipped .
3363	Get member count
3364	Get the members of this group .
3365	Fetch the members of a member .
3366	Fetch all members of the member
3367	Get the item schema .
3368	Fetch all items from the Steam API .
3369	Get all available bots .
3370	Retrieves a list of all the goldenWrenches .
3371	Set the API key .
3372	Request a Steam API request .
3373	Send data to the socket .
3374	Get the player hash .
3375	Handles the response for a request .
3376	Update the ping
3377	Update the players .
3378	Add information to the player .
3379	Get leaderboard by id
3380	Get leaderboards .
3381	Load leaderboards .
3382	Get the game leader for the given steam id .
3383	Get the leaderboard entry for the given range .
3384	Loads the data from the request .
3385	Load data from steam id
3386	Parse the game leader .
3387	Creates a new Steam game .
3388	Checks if the app is up to the current application .
3389	Get the number of players .
3390	Get the game stats .
3391	Display a work order .
3392	Store an event .
3393	Display an event .
3394	Update an event .
3395	Delete an event .
3396	Show a work order .
3397	Edit a work order .
3398	Update a work order .
3399	Get take action
3400	Add parts to work order .
3401	Get Put Put
3402	Updates the parts of a work order .
3403	Display a work request .
3404	Edit a work request .
3405	Update a work request .
3406	Delete a work request .
3407	Scope the search query .
3408	Store an event .
3409	Create a new work order .
3410	Store an attachment .
3411	Display an attachment .
3412	Edit an attachment .
3413	Update an attachment .
3414	Destroy an attachment .
3415	Formats a report .
3416	Get icon icon .
3417	Display the inventory .
3418	Show the movement .
3419	Rollback a movement .
3420	GetRevisedStatus attribute .
3421	GetRevisedPriority attribute .
3422	Close all sessions .
3423	Check if user is logged in
3424	Returns a human readable label .
3425	Get the completion date .
3426	Complete a status .
3427	Display the status table .
3428	Create a new workflow .
3429	Display a list of priorities .
3430	Store a queue .
3431	Edit a priority .
3432	Update a priority .
3433	Scope stock query .
3434	Scope SKU .
3435	Get the current stock attribute .
3436	GetRevisedMetric attribute .
3437	Get operator operator
3438	Sets the sort order .
3439	Get the full path of the file .
3440	Display status .
3441	Store status .
3442	Edit status .
3443	Update status .
3444	Create a new variant .
3445	Store a new item .
3446	Create a report .
3447	Store a report .
3448	Display the work order .
3449	Table assignments .
3450	Display the sessions for a work order .
3451	Create a new work order .
3452	Formats a comment .
3453	Handle uploaded files .
3454	Display a table .
3455	Create a new asset .
3456	Display the inventory .
3457	Display the inventory .
3458	Create a form .
3459	Display a navbar .
3460	Store an attachment .
3461	Update an attachment .
3462	Render a table .
3463	Generates a table of revisions .
3464	Store an image .
3465	Display an image .
3466	Update an attachment .
3467	Display metrics .
3468	Store a metric .
3469	Edit a metric .
3470	Display assets .
3471	Store asset .
3472	Edit an asset .
3473	Update an asset .
3474	Scope the query .
3475	Returns the response .
3476	Get input value
3477	Returns a list of children of the selected node .
3478	Get rendered node options
3479	Boot the view .
3480	Delete attachment file .
3481	Display the inventory .
3482	Create a new stock .
3483	Store inventory .
3484	Display the inventory .
3485	Edit an item .
3486	Update an inventory .
3487	Destroy an item .
3488	Display an asset .
3489	Create an asset .
3490	Store a new meter .
3491	Display an asset .
3492	Edit a meter .
3493	Update a meter .
3494	Delete an asset .
3495	Store a work order .
3496	Update a notification .
3497	Formats the started time .
3498	Formats the completed time .
3499	Display all work orders .
3500	Create a form .
3501	Get hours hours
3502	Format the start date
3503	Format the end date
3504	Formats the end time .
3505	Format the frequency of the event
3506	Returns the frequency of an event
3507	Determine the frequency of a rule
3508	View tags .
3509	Store an inventory .
3510	Update the stock .
3511	Delete a stock .
3512	Render a table .
3513	Creates a form .
3514	Authenticate the user .
3515	Handles user authentication .
3516	Handle ldap user .
3517	Deletes the movements .
3518	Restore the movements .
3519	Display a table .
3520	Create a new workflow .
3521	Generate a table .
3522	Creates a form for a work order .
3523	Creates a form for a work order .
3524	Delete an inventory item .
3525	Create a flash message .
3526	Create a new work order .
3527	Store a work order .
3528	Display events .
3529	Store an event .
3530	Display an event .
3531	Update an event .
3532	Delete an event .
3533	Scope a category .
3534	Display the form .
3535	Uploads an asset .
3536	Display a manual asset .
3537	Update an asset .
3538	Attach an asset .
3539	Detach a work order .
3540	Store a new work request .
3541	Destroy an update request .
3542	Display the stock index .
3543	Get the take action .
3544	Post take action .
3545	Displays a form .
3546	Perform a PUT request .
3547	Display the work request .
3548	Edit a work request .
3549	Update a work request .
3550	Create a new category .
3551	Store a new category .
3552	Display a category .
3553	Update a category .
3554	Deletes a record .
3555	Display the work order .
3556	Display a table per worker .
3557	Deletes all stocks .
3558	Restore stock from inventory .
3559	Display the inventory .
3560	Store inventory .
3561	Display inventory .
3562	Edit an inventory .
3563	Render the inventory .
3564	Table move movements .
3565	Creates a form .
3566	Renders a navbar .
3567	Generate a table .
3568	Table inventory .
3569	Display the navbar parts .
3570	Display a work order .
3571	Start a work order .
3572	End a work order .
3573	Returns the change attribute .
3574	Store a note .
3575	Display a note .
3576	Update a note .
3577	Delete a note .
3578	Get lastMovement attribute .
3579	Get the last move item by attribute .
3580	Get the quantity of the quantity .
3581	Displays a button with the given work order .
3582	Displays the buttons for the given work order .
3583	End the session .
3584	Display the work request .
3585	Create a new work request .
3586	Store a work order .
3587	Destroy a work order .
3588	Create a datalist .
3589	Generates a placeholder option .
3590	Get the appendage for the given method .
3591	Render component .
3592	Get component data .
3593	Register Blade .
3594	Render the model .
3595	Format label .
3596	Render a reset button .
3597	Creates a submit element .
3598	Get request from request
3599	Link an asset .
3600	Generates a link .
3601	Render a listing element .
3602	Generates HTML tags .
3603	Register HTML builder .
3604	Register form builder .
3605	Add a search element .
3606	Generate a datetime .
3607	Render a file .
3608	Remove XML from XML
3609	Loads the given locale .
3610	Parse the given locale .
3611	Get patterns for a word .
3612	Unify locale .
3613	Tokenize a string
3614	Run the given input .
3615	Set options .
3616	Add a dictionary to the registry .
3617	Get the pattern patterns for the given word .
3618	Set filters .
3619	Add a filter .
3620	Set tokenizers .
3621	Add a tokenizer
3622	Create an option from a file .
3623	Returns the text .
3624	Get the pattern .
3625	Set the options .
3626	Get the options .
3627	Add a dictionary to the document .
3628	Add a filter .
3629	Add a tokenizer
3630	Get tokenizers .
3631	Get the list of dictionaries .
3632	Get the filters .
3633	Returns the hyphenation of the given string .
3634	Gets the hyphenation pattern .
3635	Returns the pattern for the given word .
3636	Set default home path
3637	Get the default home path .
3638	Set the home path .
3639	Creates a new hyphenator instance .
3640	Loads autoloadorator .
3641	Replaces tokens with new tokens .
3642	Get token by key
3643	Gets the pattern of the pattern .
3644	Get filter by key
3645	Filter tokens .
3646	Fetch a refresh token .
3647	Migrate orders .
3648	Migrate an order .
3649	Migrate shipping values
3650	Migrate order calculations
3651	Gets the list of products for the product .
3652	Adds default records to the default page .
3653	Make a payment .
3654	Get gateway data
3655	Create payment .
3656	Complete payment .
3657	Check if order is place
3658	Returns the name of the country
3659	Set payment method
3660	Get selected payment method
3661	Send confirmation email
3662	Send admin notification .
3663	Send Cancel notification
3664	Builds the URL for an action .
3665	Redirect to cart page
3666	Display the cart .
3667	Displays the cart
3668	Get the filter for this field .
3669	Saves the user account .
3670	Update the user s details .
3671	Get a modifier .
3672	Returns the unit price .
3673	Calculates the total total total total total .
3674	Returns an array of unique fields .
3675	Called when the order is written .
3676	Get Product Variation
3677	Returns a string representation of this address .
3678	Get address .
3679	Returns the cart form .
3680	Calculates the amount of the total weight .
3681	Returns the weight of the order .
3682	Returns the total number of items .
3683	Returns the total number of items .
3684	Write the product attributes
3685	Get viewer .
3686	Get Product object
3687	Updates the field s fields .
3688	Get a variation by its attributes .
3689	Generate Variations from the given attributes .
3690	Deletes the variation .
3691	Get component by type
3692	Get the form fields .
3693	Validate order data .
3694	Get order data
3695	Set component data
3696	Returns the dependant data for the given component .
3697	Get current order
3698	Set current cart
3699	Create a new order
3700	Add a buyable item
3701	Remove an item .
3702	Remove an order item
3703	Set quantity .
3704	Update order item
3705	Find a Buyable item .
3706	Get an item by its order .
3707	Archive the current order id
3708	Calculates the value of the incoming request .
3709	Returns the price for a price
3710	Get image by filename
3711	Set the content of the object
3712	Get the list of countries .
3713	Get single country
3714	Convert country code to name
3715	Returns the current cart
3716	Convert an array to a list of values
3717	Get the dropdown field
3718	Gets the products showable for this category .
3719	Get all child categories .
3720	Return a list of child categories .
3721	Gets the groups menu .
3722	Get menu title
3723	Display the edit form .
3724	Prints an order page
3725	Returns the next step .
3726	Get the list of orders .
3727	Get the edit form .
3728	Get a subset of fields from the given fields .
3729	Modify the subtotal amount .
3730	Setup step steps .
3731	Called when the action is triggered .
3732	Checks if the current step is current step
3733	Returns the position of the action .
3734	Returns the link to the page
3735	Get Product Categories
3736	Trim the current value
3737	Gets the field s fields .
3738	Get category options .
3739	Get category options
3740	Get product categories .
3741	Returns the price of the product .
3742	Gets the product image .
3743	Submit payment .
3744	Perform a payment .
3745	Cancel an order
3746	Get card fields .
3747	Add an order to the session .
3748	Get session IDs from session
3749	Get order by ID
3750	Formats the actions form .
3751	Create a new member
3752	Get a member by its identifier .
3753	After the member is logged in .
3754	Get the list of past orders .
3755	Returns a hidden field for the given item .
3756	Get the list of address fields .
3757	Returns a list of fields for this order .
3758	Returns the default search context .
3759	Gets the list of components for the given component .
3760	Calculate the total total amount
3761	Returns the modifier for the given class name .
3762	Returns the total out of the paid amount .
3763	Returns the link to the order page .
3764	Checks if the payment is paid .
3765	Determine if the member is deleted .
3766	Returns true if the user can view the current page .
3767	Get the name of the member .
3768	Get billing address .
3769	Generate a reference
3770	Called when the cart is written .
3771	Deletes the order of items .
3772	Provides the translations for the order .
3773	Render the field .
3774	Get the editable items .
3775	Returns the URL of the page .
3776	Returns the URL for an order .
3777	Show the list of packages .
3778	List installed packages .
3779	Command line path .
3780	Update packages .
3781	Remove a package .
3782	Get the composer instance .
3783	Get the list of available packages .
3784	Get the package index .
3785	Show packages .
3786	Get a package by its name .
3787	Get installed packages .
3788	Get installed package by name
3789	Get package name and version .
3790	Get the composer json path .
3791	Create a JSON file .
3792	Get the raw version of a git version .
3793	Guess the version constraint .
3794	Parses a composer json file .
3795	Set object object
3796	Load custom config
3797	Delete all jobs .
3798	Clean up jobs .
3799	Queue a job .
3800	Copies the job data to a descriptor .
3801	Get next job .
3802	Check the status of a job .
3803	Check default jobs
3804	Starts a stalled job .
3805	Initialise a job .
3806	Checks if the current time limit is reached .
3807	Determine if the current memory usage is exceeded .
3808	Parse memory .
3809	Returns a list of queued jobs .
3810	Run a queue
3811	Process a job queue .
3812	Queue a task
3813	Logs the job status .
3814	List jobs
3815	Refresh the descriptor .
3816	Runs all jobs .
3817	Pause the job .
3818	Resume a job .
3819	Activate the queue .
3820	Get job directory
3821	Clean up the job .
3822	Get the list of messages .
3823	Get last message
3824	Get job type string
3825	Get the list of job type values .
3826	Setup the site tree .
3827	Prepare the sitemap .
3828	Complete the sitemap .
3829	Run the queue .
3830	Handle action .
3831	Returns the title of the publish items .
3832	Setup the tree .
3833	Process the page .
3834	Get the queue from the request .
3835	Cast a model to an array
3836	Shows the application .
3837	Saves the content map to the source file .
3838	Write data to file
3839	Read data from the file .
3840	Displays the list of sidebar items .
3841	List widgets .
3842	Add a widget .
3843	Update widget options .
3844	Move a widget .
3845	Deactivate a widget .
3846	Delete a widget .
3847	Reset the sidebar .
3848	Validate a sidebar .
3849	Validate a sidebar widget .
3850	Get widget data .
3851	Move a sidebar widget .
3852	Get widget object
3853	Sanitize widget options
3854	Returns a random integer .
3855	Generate a random string
3856	Encode a string
3857	Decode a string
3858	Add a path to the generator .
3859	Remove a generator path .
3860	Get the generator .
3861	Load generators .
3862	Shows a row .
3863	Set the readonly field .
3864	Open the form .
3865	Add a prefix to the element .
3866	Add a suffix .
3867	Parse addons .
3868	Sets the size of this element .
3869	Unsubscrub a message
3870	Get the current temperature
3871	Get all nodes in the session
3872	Get all properties of a given path .
3873	Evaluate a path
3874	Write a set of keys to the cache
3875	Get webdriver .
3876	Get the aperture value
3877	Returns the author .
3878	Get the header
3879	Returns the credit value
3880	Get the source
3881	Get job title
3882	Get ISO country
3883	Returns the focus distance .
3884	Get the width
3885	Returns the height of the image .
3886	Get the title
3887	Gets the caption value .
3888	Get copyright .
3889	Get the keywords .
3890	Get Camera
3891	Returns the horizontal resolution .
3892	Returns the vertical resolution .
3893	Get the software version
3894	Returns the length of the image .
3895	Returns the creation date .
3896	Returns the color space .
3897	Get the mime type
3898	Get file size
3899	Get the orientation
3900	Get GPS value
3901	Extract GPS coordinate .
3902	Set the tool path .
3903	Get tool path
3904	Get the output of a command .
3905	Hydrate an object .
3906	Extract GPS coordinates .
3907	Get the mapper .
3908	Get the hydrator .
3909	Set options .
3910	Add required section .
3911	Get iptc data
3912	Creates a new instance of the given type .
3913	Generate prefix .
3914	Normalize config .
3915	Translate a list of strings into a string .
3916	Runs the static cache .
3917	Process all URLs .
3918	Collect changes .
3919	Flush the cache .
3920	Gets the garbage collected from the modules .
3921	Filter extensions by module
3922	Returns a list of all module blocks
3923	Get module settings
3924	Check if metadata is supported
3925	Checks if a class exists .
3926	Returns list of module versions
3927	Check extended class extensions
3928	Check template blocks
3929	Check module settings
3930	Check module templates
3931	Check module controllers
3932	Check module files
3933	Check module events
3934	Parses module ids
3935	Parse shop config
3936	Returns array of available modules
3937	Check if the application is enabled .
3938	Returns module object
3939	Get module cache
3940	Get module installer
3941	Fixes module information
3942	Clean up extension classes .
3943	Add template files
3944	Add module files
3945	Add module events
3946	Add module extensions
3947	Register a module version
3948	Returns the difference between two arrays .
3949	Add module settings
3950	Set module controllers
3951	Add extensions to module
3952	Returns list of installed modules
3953	Render template
3954	Block the current page
3955	Creates a new http transport .
3956	Returns the available driver implementation .
3957	Returns a list of all available transport transports .
3958	Set the CURL option and value .
3959	Get the response from the given content .
3960	Determine if the redirects should be allowed .
3961	Performs an HTTP request .
3962	Send a HEAD request .
3963	Trace a request .
3964	Perform a PATCH request .
3965	Returns true if the given path matches the given glob expression .
3966	Get the value of an extra parameter .
3967	Get combined filters .
3968	Activate the composer .
3969	Checks if a path matches a glob expression .
3970	Checks if the given path matches the given glob expression .
3971	Get shop source path
3972	Create installer .
3973	Install package .
3974	Update the package .
3975	Copy shop source to target directory
3976	Copies the configuration file to the target directory .
3977	Copy the setup files to the installation directory .
3978	Checks if a shop config file is not configured .
3979	Copies the files from the source directory to the installation .
3980	Get filtered files .
3981	Get absolute path from source package .
3982	Update a package .
3983	Copy a package .
3984	Formats the source path .
3985	Parses a flat file system structure .
3986	Get flat file list iterator
3987	Copy a directory to another directory .
3988	Copy file to destination path
3989	Generate models .
3990	Recursively traverse classes .
3991	Return JSON representation of this object .
3992	Add breadcrumb list
3993	Render models .
3994	Set HTML by view
3995	Generates the HTML for the HTML .
3996	Resolve path .
3997	Checks if the given array is expected .
3998	Checks if the given array contains the given array .
3999	Asserts that the given status code is equal .
4000	Asserts that content is content .
4001	Asserts that the given status is JSON .
4002	Asserts that the given status is valid .
4003	Asserts that a document has been fetched .
4004	Asserts that the given content is expected .
4005	Asserts that the given content is in order .
4006	Asserts that the given content is fetched .
4007	Asserts that the given content is not in order .
4008	Asserts that a resource is created .
4009	Assert that the response body is empty .
4010	Asserts that the given content is expected .
4011	Asserts that an error is an expected error .
4012	Assert that a response has an expected error .
4013	Assert an array of errors .
4014	Get the document .
4015	Checks if the given type is expected .
4016	Assert that the response matches the expected value .
4017	Assert that the given array is updated .
4018	Assert that the content is deleted .
4019	Assert that a resource is included in the document .
4020	Assert that the given hash is included in the document .
4021	Assert that the document is meta .
4022	Assert that the document has the same meta .
4023	Assert that the given array contains the exact links .
4024	Assert that the response matches the given status code .
4025	Asserts that a document has a resource .
4026	Assert that a document is an identifier .
4027	Assert that the given document matches the expected value .
4028	Assert that a document is not equal .
4029	Asserts that a document contains a list of subsets .
4030	Asserts that the given document contains the given list .
4031	Assert that the given document is in order .
4032	Asserts that the given document is in order .
4033	Asserts that the given document is valid .
4034	Assert that the given document is in order .
4035	Asserts that a list contains a resource .
4036	Asserts that the given document contains the given hash .
4037	Asserts that a document contains a list of elements .
4038	Assert that the given document contains the specified hash .
4039	Assert that an array contains an error .
4040	Assert that a document has an error .
4041	Assert that an array contains an error .
4042	Create a new instance from a string .
4043	Cast a document .
4044	Creates a new instance from a JSON string .
4045	Decode a JSON string .
4046	Get value from document .
4047	Checks if the document exists in the document .
4048	Assert that all members exist .
4049	Assert that a member is not empty .
4050	Checks if the given value matches the expected value .
4051	Returns true if the given array matches the given array .
4052	Checks if the given value is a resource identifier .
4053	Sort an array .
4054	Check if a value is identifiable .
4055	Execute the request .
4056	Send a message .
4057	Reply a user .
4058	Set allowed types .
4059	Write a message to the buffer .
4060	Writes a debug message .
4061	Add a message .
4062	Get message count
4063	Get variables from a single line .
4064	Get variables from multi - line array
4065	Validates a list of vars
4066	Returns all items in the collection
4067	Returns an accumulator with the given closure .
4068	Merges two arrays .
4069	Convert the iterator to an array .
4070	Returns an array of keys .
4071	Returns an iterator over the iterator .
4072	Returns an array of values .
4073	Reduces the iterator with the given closure .
4074	Converts a list of keys to a key .
4075	Gets a group by strategy .
4076	Reduces an iterable of iterable .
4077	Reduces a reduction .
4078	Dump the composer package .
4079	Get extra key
4080	Escape a predicate .
4081	Parses the given URI into a compact URI .
4082	Get term context from field type
4083	Persist the cache .
4084	Get the content of a resource .
4085	Normalize field items .
4086	Deletes an item
4087	Creates a translated translation instance .
4088	Get the URI for the entity .
4089	Returns an array of typed data IDs .
4090	Build backend backend .
4091	Fetch data from cache
4092	Run a string
4093	Print an error
4094	Ask a question .
4095	Execute a row .
4096	Create a new record .
4097	Overridden to override values .
4098	Insert data into database .
4099	Extract primary key .
4100	Sets the user s session .
4101	Copies all stubs .
4102	Configure variables .
4103	Serialize additional data .
4104	Checks if the given data is a watch type .
4105	Loads a watch type .
4106	Run the database .
4107	Prepare a seeder .
4108	Returns the attribute with the given option id .
4109	Finds entity attribute by attribute id .
4110	Returns the attribute value for the given entity type .
4111	Finds attribute by attribute id .
4112	Create database seeds folder .
4113	Create a seeder .
4114	Initialize an attribute .
4115	Initialize DB transaction .
4116	Loads the attribute attribute .
4117	Set path .
4118	Add additional params
4119	Send the request
4120	Execute the menu .
4121	Inject request parameters
4122	Returns the attribute by attribute code .
4123	Deletes a serialized attribute .
4124	Preload attribute id .
4125	Publish records .
4126	Assert that the content contains a content .
4127	Returns the JSON response .
4128	Asserts that the response contains a JSON structure .
4129	Run the test suite .
4130	Get Drupal root directory
4131	Get environment file path
4132	Read environment file .
4133	Publish all bundles .
4134	Load database seeds .
4135	Returns the entity type .
4136	Returns the entity type id .
4137	Execute a HTTP request .
4138	Prepare URI .
4139	Checks if the given payload is acceptable .
4140	End transaction .
4141	Set application name .
4142	Set user attributes
4143	Start a transaction .
4144	Converts a URL to a URL .
4145	Prepare constructor arguments .
4146	Append exception suffix .
4147	Wrap an exception .
4148	Parse a CSV file .
4149	Load a single attribute group .
4150	Returns all eav attribute groups for a given attribute set .
4151	Finds eav attribute group by attribute name .
4152	Create lexer config .
4153	Returns the EAV attribute value for the given option .
4154	Create a FileResolver .
4155	Returns all core config data .
4156	Get system logger
4157	Create a plugin instance
4158	Merge entity attributes .
4159	Create a number converter .
4160	Cast a value to a value
4161	Get entity type .
4162	Returns the attributes of the entity .
4163	Returns an array of EntityDefinedAttributes .
4164	Get an attribute by its attribute code .
4165	Get the categories with the resolved path .
4166	Get all categories with the given store view view .
4167	Get a header by name .
4168	Add a header .
4169	Returns the attribute code for the given attribute code .
4170	Delete the source directory .
4171	Register an observer .
4172	Register a callback .
4173	Get callbacks by type
4174	Import a row .
4175	Prepare store view view code .
4176	Returns the store id for the given store view .
4177	Returns the root category .
4178	Resolve original column name .
4179	Returns the original data .
4180	Checks if the row has the original data .
4181	Wraps the exception with the given column names .
4182	Append exception message .
4183	Get new file name
4184	Upload a file
4185	Delete a file
4186	Returns all available entity types .
4187	Finds entity by entity type .
4188	Serializes an array into a string .
4189	Unserialize CSV
4190	Get target directory
4191	Create export config
4192	Initializes the configuration .
4193	Unserialize an array of attributes .
4194	Serialize an array of attributes .
4195	Get prepared statement .
4196	Initialize the database .
4197	Parse additional attributes .
4198	Generate path .
4199	Resolves a reference .
4200	Add a value to the cache .
4201	Get the value from the cache .
4202	Flush the cache .
4203	Load an attribute set .
4204	Returns all eav attribute set of entity type .
4205	Finds eav attribute set by attribute name .
4206	Finds eav attribute set by entity type name .
4207	Create export adapter
4208	Quote a string
4209	Returns all urlRewrites by entity type .
4210	Returns all URLRewrites for the given entity type .
4211	Notify observers .
4212	Checks if the row is consistent .
4213	Check if the row has a value .
4214	Creates a subject instance .
4215	Create a serializer .
4216	Returns all eav attributes for an entity type .
4217	Returns all eav attributes for an option .
4218	Returns all eav attributes for the given user .
4219	Returns all eav attributes for an entity type .
4220	Returns all eav attributes for an entity type .
4221	Finds the eav attributes for an option value .
4222	Prepare observers .
4223	Resolve path .
4224	Create a directory .
4225	Set an attribute .
4226	Increment a counter
4227	Merge attributes recursively .
4228	Creates a filesystem adapter .
4229	Returns all categories for a store view
4230	Returns all root categories .
4231	Create an emitter .
4232	Prepare listeners .
4233	Remove a directory
4234	Get swift mailer .
4235	Initialize the source directory .
4236	Load a list of files
4237	Gets the list of migrations .
4238	Create import adapter .
4239	Prepare callbacks .
4240	Get global data
4241	Load a prepared statement .
4242	Create a date converter .
4243	Override an array of artefacts
4244	Append an array of artefacts .
4245	Get artefacts by type id
4246	Creates a new artefact .
4247	Export the data to the target directory .
4248	Returns all link types .
4249	Returns all image types .
4250	Converts a date to a date
4251	Converts a number to a decimal format .
4252	Execute the subject .
4253	Get pattern keys
4254	Resolve pattern values .
4255	Resolve pattern value .
4256	Prepare pattern .
4257	Prepare the ok filename .
4258	Checks if the given filename is equal .
4259	Returns a list of all files that match the pattern .
4260	Checks if the file matches the given filename .
4261	Clean up the OK file
4262	Returns all available tax classes .
4263	Recursively warm up the cache .
4264	Returns all store websitesites .
4265	Returns all stores .
4266	Returns all entities matching the given entity IDs .
4267	Finds a category by ID .
4268	Returns all available customer groups .
4269	Get the primary key member name .
4270	Clears the row .
4271	Render a view .
4272	Register REST routes .
4273	Get collection params
4274	Sanitize end date
4275	Get a list of events .
4276	Map event data to event modules .
4277	Define category translations .
4278	Before saving the post .
4279	Save the image .
4280	Save the current location
4281	Save additional locations .
4282	Save the category categories .
4283	Save the group groups .
4284	Save the post tags .
4285	Save event occurrences .
4286	Save post translations .
4287	Get an event by ID
4288	Checks if the given category is valid .
4289	Remove expired occurrences .
4290	Remove deleted events .
4291	Remove expired events .
4292	Filter taxonomies
4293	Delete all taxonomies .
4294	Render the location list
4295	Save location data
4296	Get revision manifest .
4297	Remove meta boxes .
4298	Output meta data
4299	Convert an array into a string
4300	Register post type
4301	Add a table column
4302	Get table columns .
4303	Get the sortable columns .
4304	Called when a table column is content .
4305	Save a new term .
4306	Activate a new group .
4307	Remove empty value
4308	Remove empty values
4309	Remove empty meta data
4310	Save post data
4311	Check if attachment exists
4312	Render the submit form .
4313	Add event arguments to the postmalink .
4314	Filter the event filter
4315	Returns the first occurrence of a single event .
4316	Returns the next occurrence of the next occurrence .
4317	Returns the closest closest to the given array .
4318	Get a list of date parts .
4319	Save draw points
4320	Enqueue admin .
4321	Enqueue frontend
4322	Format a short date
4323	Import events .
4324	Import publishing groups .
4325	Check if the database table exists .
4326	Initialize the database .
4327	Checks if an event manager exists
4328	Request API API .
4329	Returns a list of occurrences of a post .
4330	Get post meta data
4331	Limits a string into a string .
4332	Get nearby locations
4333	Update an existing instance .
4334	Displays the pagination pagination .
4335	Get events for a module
4336	Get the categories for a module
4337	Get the list of categories for a module .
4338	Gets the group groups for a given module .
4339	Get module tags
4340	Returns a list of years for a given module .
4341	Callback for OAuth Request
4342	Sanitize input .
4343	Get single view data
4344	Get user groups .
4345	Updates the group_groups field .
4346	Get the content of the event .
4347	Get the lead content for the event .
4348	Returns the custom content of a post .
4349	Register event categories .
4350	Register event tags .
4351	Register event groups .
4352	Add import buttons .
4353	Import events .
4354	Accepts a post or post
4355	Create tunnel .
4356	Verify tunneler .
4357	Run a command .
4358	Set the signal handler .
4359	Handle signal handler .
4360	Run the process .
4361	Displays edit action .
4362	Create a DcGeneral instance
4363	Build a widget .
4364	Render a widget .
4365	Process input values .
4366	Process a property .
4367	Hashes the given property values .
4368	Handle delete action .
4369	Creates a new instance of imagine .
4370	Configure image settings
4371	Inject settings .
4372	Handle the widget .
4373	Returns the widget class for the given property type .
4374	Get the options for the widget .
4375	Executes the form .
4376	Enforce model relations .
4377	Process input input .
4378	Handle prePersist event .
4379	Handle postPersist event .
4380	Translate label .
4381	Builds the field set .
4382	Handle submit .
4383	Returns the title for the edit record .
4384	Persist the model .
4385	Configure CAS server .
4386	Parse configuration .
4387	Configure CAS server validation
4388	Returns the value of a specific attribute .
4389	Checks if an attribute exists .
4390	Logout a user .
4391	Set the status code .
4392	Get the key or null
4393	Check if the current value is an integer .
4394	Gets the fragment parts from the URL .
4395	Add containers from array
4396	Build query .
4397	Wraps the query with a row counter
4398	Get the fake model for the given query .
4399	Generate activation link from given key
4400	Assign a user to a user
4401	Check if key is valid
4402	Reads the pagination info .
4403	Register templates .
4404	Register custom handlers .
4405	Handle authorization error .
4406	Handle validation errors .
4407	Handle a model exception .
4408	Removes all items from the table
4409	Get the list of components .
4410	Register event handlers .
4411	Perform a request .
4412	Check if asset is available .
4413	Sync the package to the database .
4414	Update expired packages .
4415	Create a new client .
4416	Returns the URL for the given configuration .
4417	Get the port from the configuration .
4418	Validate entity managers .
4419	Terminate a process .
4420	Lock the theme .
4421	Unlock the theme .
4422	Clone a book .
4423	Builds the parameter value from the filter url
4424	Build the parameters for a parameter filter .
4425	Returns a sorted array of sorted tables .
4426	Checks if the database is configured .
4427	Configure the database .
4428	Get all migrations .
4429	Run migration .
4430	Rollback migration .
4431	Resolve migration .
4432	Get migration table .
4433	Renders the given values .
4434	Mount indentation .
4435	Set primary keys .
4436	Create table .
4437	Update the table .
4438	Drop the table .
4439	Renames the table .
4440	Execute multiple operations .
4441	Get migration files .
4442	Create a filename .
4443	Boot the application .
4444	Load the Laravel application .
4445	Loads the initializer .
4446	Loads the argument resolver .
4447	Set mail trap configuration
4448	Fetch inbox messages .
4449	Get the client client .
4450	Reboot the kernel .
4451	Resolve arguments .
4452	Open a stream .
4453	Returns information about a file .
4454	Returns the stats for the given stream .
4455	Check if a file exists .
4456	Returns the filename for the given stream .
4457	Release a file
4458	Handle a command .
4459	Check if the node is empty
4460	Expose one or more methods .
4461	Handle a request .
4462	Execute a procedure
4463	Render the checkbox .
4464	Enable a server .
4465	Extract the types from a docstring .
4466	List all available methods .
4467	Get the signature of a method .
4468	Returns the help string for the given method .
4469	Performs a multicall request .
4470	Load a class
4471	Get the current version
4472	Print the usage of the command .
4473	Parses a boolean value .
4474	Parse a file .
4475	Parse command line arguments
4476	Run the program .
4477	Checks if the container is resolved .
4478	Get XML writer
4479	Finalize the output .
4480	Create a new XML reader .
4481	Reads the current node .
4482	Reads a start tag .
4483	Parses an end tag .
4484	Parse a text node .
4485	Checks if the given value is valid .
4486	Create a checkbox .
4487	Creates a form field .
4488	Create a select field .
4489	Register sections .
4490	Register a section .
4491	Register the settings .
4492	Register settings .
4493	Displays the captcha .
4494	Returns the URL for the captcha client .
4495	Generates a list of captcha attributes .
4496	Build captcha HTML .
4497	Upload an asset
4498	Get a project .
4499	Get project projects .
4500	Create a template .
4501	Get a template
4502	Get all templates .
4503	Create a new Job .
4504	Get a job .
4505	Get jobs by template
4506	Get the current user .
4507	Get the personal library for the user .
4508	Merge job values .
4509	Returns the LDAP user for the given attribute .
4510	Set ldap config definition .
4511	Checks if the given user is valid .
4512	Set allowed types .
4513	Set ldap credentials
4514	Switch the domain to the given domain .
4515	Switch the domain to the current domain .
4516	Hide the given exception .
4517	Get the username token .
4518	Add the domain to the request .
4519	Transforms the LDAP value for the given entity .
4520	Get the ldapObjectProperties of an entity .
4521	Set the ldap object for the given property .
4522	Sets the ldap value for the given property .
4523	Builds the configuration .
4524	Get the values for the given choices .
4525	Get LDAP objects by query
4526	Get all operations .
4527	Set the roles .
4528	Checks if the given roles belongs to the given roles .
4529	Checks if a group has a given attribute value .
4530	Log a log operation .
4531	Save media .
4532	Update media .
4533	Get media media .
4534	Remove media .
4535	Parse options .
4536	Get filename .
4537	Check if file exists .
4538	Rename the file .
4539	Get alt value
4540	Get title
4541	Get the name of the media .
4542	Get the weight .
4543	Update the database .
4544	Remove existing media .
4545	Save file to storage .
4546	Clone the file .
4547	Make sure the directory exists .
4548	Clone a media .
4549	Bootstrap configuration .
4550	Register services .
4551	Register the templates .
4552	Configure the config .
4553	Generate a SVG element
4554	Transmits an item to a response .
4555	Transform value to string
4556	Adds a variable to the output .
4557	Checks if the variable is a file place holder .
4558	Checks if the variable is a QTI file .
4559	Converts a value to a QTI datatype .
4560	Creates a new object from the given object .
4561	Recursive diff function
4562	Set IP address .
4563	Set language .
4564	Set origin .
4565	Resolve the origin
4566	Set timestamp .
4567	PreSave the request .
4568	Process the schedule schedule .
4569	PreUpdate the model .
4570	Check if slug is unique
4571	Generate unique slug .
4572	Set slug .
4573	Set the creation date .
4574	Set the last modification date .
4575	Set route options
4576	Set the master model .
4577	Get all children .
4578	Get the siblings of this node .
4579	Load object from source
4580	Load object from cache
4581	Adds an object to the cache .
4582	Get category items
4583	Get the slug pattern .
4584	Get slug prefix
4585	Get slug suffix .
4586	Determine if the slug is enabled .
4587	Set slug .
4588	Generate the slug .
4589	Generate route pattern .
4590	Filter route token
4591	Generates a new route object .
4592	Get the URL of the translation .
4593	Get slug slug .
4594	Finalize the slug .
4595	Deletes object routes .
4596	Create a collection of route objects .
4597	Get all revisions .
4598	Set the publication date .
4599	Set the expiry date .
4600	Set the publish status .
4601	Returns the status of the publish status .
4602	List the help page
4603	Rewrite routes .
4604	Reset data
4605	Get next item
4606	Display the site .
4607	Display the site index .
4608	Displays the log page .
4609	Browse events .
4610	Returns list of permissions .
4611	Displays the page .
4612	Deletes an item .
4613	Restore a model
4614	Sort the model
4615	Checks if the item is deleted .
4616	Get title
4617	Returns the index dropdown filters
4618	Get post object
4619	Get a single item
4620	Redirect to index
4621	Add an option to the list
4622	Add multiple options
4623	Get option value
4624	Handle method call
4625	Update batch status
4626	Sets the download id for the given IDs .
4627	List admin controllers
4628	Find admin controllers .
4629	Load admin controllers .
4630	Loads admin controller .
4631	Load admin class .
4632	Route request
4633	Loads a view file
4634	Load CSV data
4635	Loads a view
4636	Loads a search object
4637	Returns the value at the given key
4638	Load a pagination object
4639	Load a cell
4640	Load user data
4641	Loads a date cell
4642	Loads a date time cell
4643	Load a boolean cell
4644	Load settings component table .
4645	Add header button
4646	Render dynamic table
4647	Saves the preferences
4648	Executes the command .
4649	Create data source .
4650	Formats a row
4651	Add action
4652	Set admin data .
4653	Unset admin data .
4654	Unset admin data
4655	Clear admin data .
4656	Get all log files
4657	Find the config file
4658	Load js assets
4659	Load the assets
4660	Load libraries .
4661	Load autoloads
4662	Sets backwards compatibility
4663	Get site settings
4664	Prepare whitelist .
4665	Extracts all fields from a component s settings .
4666	Get source by slug
4667	Get format by slug
4668	Export data from data source
4669	Send an exception to the batch
4670	Add a new item
4671	Save changes .
4672	Get all users .
4673	Get the count of all users .
4674	Format object
4675	Get the remap for the model
4676	Validate user input
4677	Get model class and id
4678	Format object .
4679	Set date
4680	Add a daily html html
4681	Set the start of the start of the week
4682	Print a debug message
4683	Submit bonus .
4684	Assign a task to a team .
4685	Assigns a contract to an engagement .
4686	Get details for a freelancer
4687	Get information about a freelancers team .
4688	Get information about a freelancers company
4689	Get the details for a given buyer .
4690	Get details about a particular buyer company
4691	Get a list of engagements
4692	Get a single engagement
4693	Get full URL
4694	Get list of offers
4695	Perform actions on a contract
4696	Get information about a specific account
4697	Get all roles
4698	Get auth roles
4699	Invoke invite invite
4700	Get a specific company
4701	Get a specific company
4702	Get users in team
4703	Get list of jobs
4704	Get a specific job
4705	Post a job
4706	Edit a job
4707	Delete a job
4708	Get user info
4709	Get a specific user
4710	Get information about a team
4711	Get room details
4712	Get room by offer id
4713	Get room by application id
4714	Get room by contract id
4715	Create a room
4716	Send a message to a room .
4717	Update room settings .
4718	Update room metadata
4719	Get a snapshot of a contract
4720	Update a snapshot of a contract
4721	Delete a snapshot
4722	Get active milestones
4723	Get the submissions for a milestone
4724	Create a new milestone
4725	Edit a milestone
4726	Delete a milestone
4727	Perform a request
4728	Register the account settings .
4729	Get content body
4730	Get account data .
4731	List contacts .
4732	Show a contact .
4733	Create a new contact .
4734	Edit a contact .
4735	Update a contact .
4736	Delete a contact .
4737	Display the gadget .
4738	Get the value of a field .
4739	Determine if a contact is view .
4740	Update a contact .
4741	Delete a contact .
4742	Display a contact .
4743	Parse the given link .
4744	Get the preview of the link .
4745	Get the preview of the link .
4746	Add parser .
4747	Remove parser .
4748	Add default parser
4749	Returns a color from a hexadecimal color
4750	Encode a path .
4751	Convert an interval to an interval
4752	Called when the file is downloaded .
4753	Get the data for the given region .
4754	Returns an array of options array .
4755	Get model relation .
4756	Adds a relationship to the query .
4757	Configure client .
4758	Convert a string to a number .
4759	Searches for a key value .
4760	Set the availability at the time .
4761	Get payload attribute .
4762	Format a number of bytes .
4763	Formats a time offset .
4764	Format seconds .
4765	Truncate long text .
4766	Add a permission to a topic .
4767	Confirm a subscription .
4768	Create a new topic
4769	Get the attributes of a topic .
4770	List subscriptions .
4771	List subscriptions for a topic .
4772	List topics .
4773	Publish a message .
4774	Remove a permission .
4775	Set topic attributes .
4776	Subscribe to a topic
4777	Create a platform endpoint
4778	Publish a message to a device
4779	Perform an HTTP request
4780	Convert XML array to array
4781	Clear all tasks .
4782	Convert priority to priority
4783	Run the task .
4784	Custom customize settings .
4785	Get an invitation .
4786	Creates default settings .
4787	Create a coupon from a stripe .
4788	Retrieve a coupon .
4789	Get the Coupon for a user .
4790	Get team .
4791	Get team roles .
4792	Update user profile .
4793	Validate user profile .
4794	Update the email address .
4795	Install java scripts .
4796	Install environment variables .
4797	Subscribe a customer .
4798	Change subscription plan .
4799	Update a card .
4800	Update extra billing info
4801	Cancel subscription .
4802	Resume a subscription .
4803	Download an invoice .
4804	Set price .
4805	Set currency symbol .
4806	Set trial days .
4807	Set the tier .
4808	Set features .
4809	Get current user .
4810	Create a new user .
4811	Create a new user .
4812	Create a new user .
4813	Create a subscription .
4814	Register a new user .
4815	Check if token is valid
4816	Delete an existing user .
4817	Display the dashboard .
4818	Invite user by email
4819	Remove a user by its id .
4820	Send a team invitation .
4821	Accept a team invitation .
4822	Create a Tab .
4823	Returns a list of tabs .
4824	Defines the resources .
4825	Register services .
4826	Send an invoice .
4827	Handle invoice payment .
4828	Create a new team .
4829	Get all teams for a user .
4830	Get invitations for a user .
4831	Attach a user to a team .
4832	Find plan by id
4833	Get plans by tier .
4834	Get current team .
4835	Check if the team belongs to this team .
4836	Get team role .
4837	Store a new team .
4838	Edit a team .
4839	Update team .
4840	Switch current team .
4841	Update team member .
4842	Remove a team member .
4843	Leave a team .
4844	Delete team .
4845	Call custom validation .
4846	Call custom update method .
4847	Update the password .
4848	Enable two - factor authentication .
4849	Validate a phone number .
4850	Disables two users .
4851	Authenticate the user .
4852	Logout and redirect to the user .
4853	Post a token .
4854	Display the registration .
4855	Validate registration .
4856	Validate default registration .
4857	Validate a coupon .
4858	Get logout .
4859	Flash message .
4860	Create an event .
4861	Register an exception .
4862	Export an exception .
4863	Import an exception .
4864	Normalize an event .
4865	Get a WpHandler wrapper for the given name .
4866	Create a new event .
4867	Checks if an event is cached .
4868	Returns the cached event .
4869	Removes an event from the cache .
4870	Create a WpHandler wrapper for the given callback .
4871	Export an exception .
4872	Import an exception .
4873	Remove a WordPress hook .
4874	Replace the WordPress hook .
4875	Get the number of active messages .
4876	Clear the ref bag .
4877	Send a message to the pool .
4878	Remove a task from the queue .
4879	Bootstrap the application .
4880	Filters an array of arrays .
4881	Flattens an array of arrays .
4882	Converts an array of arrays into a Promise .
4883	Creates a parallel task .
4884	Converts the given result into an array .
4885	Sets the number of arguments .
4886	Run WPHook hook .
4887	Apply filters .
4888	Add a wp hook .
4889	Wrap a function result .
4890	Resume the stream .
4891	Stop the loop .
4892	Destroy all sockets .
4893	Get the socket for the given worker .
4894	Remove a worker .
4895	Prepare a worker .
4896	Attach a method to the event handler .
4897	Hash a callable .
4898	Write data to the stream .
4899	Writes the stream to the stream .
4900	Handle data .
4901	Handle write events .
4902	Check socket errors .
4903	Remove read listener .
4904	Remove a write listener .
4905	Decode a message .
4906	Attach timer .
4907	Cancel the timer
4908	Submit a new thread .
4909	Submits a worker to the queue .
4910	Submit a task .
4911	Submits a task to the queue .
4912	Stop a worker .
4913	Remove a worker .
4914	Send message to worker
4915	Broadcast a message .
4916	Timer ticker .
4917	Executes the timer ticker .
4918	Spawn a new worker .
4919	Check if a worker is alive .
4920	Check if the worker is shutdown .
4921	Handle a message .
4922	Handle a stream close .
4923	Read bytes from the stream .
4924	Read a UUID from the stream .
4925	Reads a list of values .
4926	Reads a map .
4927	Read a varint
4928	Reads a decimal number .
4929	Register the bulk service .
4930	Boot the package .
4931	Send a message
4932	Validate the response .
4933	Send bulk messages .
4934	Get bulk status for a batch
4935	Send a batch .
4936	Generate a CSV string .
4937	Send a message .
4938	Set the message
4939	Calculate the concat limit
4940	Parse SMS recipient .
4941	Send a batch .
4942	Finds all dynamic dynamic filters .
4943	Counts the number of dynamic filters .
4944	Adds filters to query builder .
4945	Add search filter .
4946	Adds a date range filter to the query builder .
4947	Get field value
4948	Get the fields of the form .
4949	Builds and returns a configuration object .
4950	Builds a configuration object .
4951	Build the admin mail configuration .
4952	Builds the mail configuration for a dynamic template .
4953	Get the file fields for a dynamic field .
4954	Returns the collection id for the dynamic form .
4955	Get email address from dynamic data
4956	Get email address
4957	Builds a form .
4958	Create a new form .
4959	Load form entity .
4960	Returns the default values for a form entity .
4961	Get the webspace key .
4962	Check if a password is valid .
4963	Generate a password .
4964	Get the list of entries .
4965	Get field descriptors .
4966	Delete dynamic media .
4967	Get filters .
4968	Loads a form .
4969	Converts a value to a string .
4970	Get media urls .
4971	Get the download URL .
4972	Get choices .
4973	Get choices options .
4974	Get form by id
4975	Handles the request .
4976	Returns the translation for the given locale .
4977	Get field by key
4978	Get all fields that are not in array .
4979	Serialize the form .
4980	Displays a form .
4981	Displays a form .
4982	Handle form submit submit .
4983	Handles form submit .
4984	Displays a CSRF token .
4985	Get all errors .
4986	Handle a form .
4987	Save form data .
4988	Upload media attachments .
4989	Map MediaIds to EntityIds
4990	Get media data .
4991	Get list of lists
4992	Get builder .
4993	Get block prefix .
4994	Creates a new collection .
4995	Load collection id .
4996	Gets the item width .
4997	Calculates the last width of the current item .
4998	Rewrite a PDO exception .
4999	Set hostname .
5000	Set Unix socket socket .
5001	Set the memory value .
5002	Sets the file path .
5003	Set the database name .
5004	Set charset .
5005	Ensure the connection is connected .
5006	Configure the connection .
5007	Execute a SELECT statement .
5008	Get all queues .
5009	Get a queue
5010	Post a message
5011	Add a message to the queue
5012	Get a message by ID
5013	Touch a message .
5014	Release a message .
5015	Add alert to queue
5016	Delete an alert
5017	Delete a queue
5018	Update a queue
5019	Create a new queue
5020	Replace the subscribers of a queue .
5021	Remove subscriber from queue
5022	Output JSON data .
5023	Output data to output .
5024	Generate a XML document .
5025	Output CSV data .
5026	Flatten array .
5027	Execute the stats .
5028	Format stats .
5029	Format the usage of the usage .
5030	Format uptime .
5031	Add a new server
5032	Add a list of servers
5033	Checks if a server is open .
5034	Get value from cache
5035	Sets a value in the cache
5036	Delete a key
5037	Set the cache client
5038	Get value from cache
5039	Delete a key
5040	Create an InvalidArgumentException .
5041	Populate the builder .
5042	Set options .
5043	Set notification .
5044	Set the payload data .
5045	Encode a CDATA string
5046	Get the nonauthentication URL .
5047	Get authentication URL .
5048	Generate the advanced authentication URL .
5049	Generate a simple authentication URL .
5050	Get HTTP authentication URL .
5051	Ensure channel parameter is set .
5052	Set product ID
5053	Get the similar attributes .
5054	Get the list of similar records .
5055	Write a string to the file .
5056	Autoload class
5057	Set the target value .
5058	Trigger data import
5059	Trigger import
5060	Apply the mapping rules to the given mapping rules .
5061	Ensure channel parameter is set .
5062	Add required parameters
5063	Adds an appender to the pool .
5064	Get the appenders .
5065	Log a message .
5066	Log a debug message .
5067	Log a warning message .
5068	Log a message .
5069	Log an event .
5070	Log a log message .
5071	Remove an appender .
5072	Returns the effective level of the logger .
5073	Get the logger instance .
5074	Get a logger by name .
5075	Reset configuration .
5076	Configure configuration .
5077	Get configurator .
5078	Set the maximum number of records .
5079	Add product IDs
5080	Get recommendations .
5081	Track clicks .
5082	Track cart tracking .
5083	Track checkout .
5084	Track the tracking clicks .
5085	Track login .
5086	Set product IDs
5087	Get the comparable attributes .
5088	Get the comparison records .
5089	Format a string to a string
5090	Set boolean value .
5091	Set the value of the given property .
5092	Set file size
5093	Set numeric value
5094	Set a string value
5095	Returns the location information .
5096	Get the start time
5097	Get the time of the event .
5098	Returns the request object
5099	Get the tag cloud cloud .
5100	Set the word count .
5101	Add feedback
5102	Set product numbers
5103	Add product numbers
5104	Set page id
5105	Set Product Campaign
5106	Make a shopping cart
5107	Get all campaigns
5108	Get raw products .
5109	Add converter .
5110	Get the converter for the given word .
5111	Parse modifiers .
5112	Set the logging level .
5113	Add renderer .
5114	Set default renderer
5115	Get a class by its class name .
5116	Returns the whitelist parameters .
5117	Load configuration file .
5118	Convert properties to appender .
5119	Parse a logger .
5120	Parse appender .
5121	Parse renderer .
5122	Appends an event to the system .
5123	Parse syslog option .
5124	Parse the syslog facility .
5125	Parse syslog priority
5126	Append an event to the database .
5127	Format an exception .
5128	Close the collection .
5129	Configure logger .
5130	Create the appender .
5131	Sets the IDs of the request .
5132	Get the follow search value
5133	Add a new filter .
5134	Sets the response .
5135	Set session id
5136	Checks if this logger is equal .
5137	Get log level
5138	Get the fatal log level .
5139	Get the error level
5140	Get the level of the log level .
5141	Get the level info
5142	Returns the level of the log level .
5143	Get the level trace
5144	Returns the level of the log level .
5145	Returns the level of the given argument .
5146	Get system property
5147	Converts a value to a log level .
5148	Convert value to string
5149	Substitute constants .
5150	Get a logger instance
5151	Get the request target URI
5152	Activate options .
5153	Format an event .
5154	Add a filter .
5155	Checks if the given level is the threshold .
5156	Log a warning message .
5157	Get suggestions .
5158	Get the factfinder class name
5159	Roll back the backup file .
5160	Activate options .
5161	Appends an event to the database .
5162	Format the given event .
5163	Generate the URL for the given parameters .
5164	Returns the feedback for the given label .
5165	Get pushed products .
5166	Get active questions
5167	Returns an array of advisors .
5168	Activates the date pattern .
5169	Append a log event .
5170	Find a permission by its ID .
5171	Find permission by value
5172	Render an item
5173	Setup the layout .
5174	Get all users .
5175	Create a new user .
5176	Create a new user .
5177	Activate a user .
5178	Show user information .
5179	List all groups .
5180	Update a group .
5181	Delete user from group
5182	Add user in group
5183	Validate group .
5184	Loads include files .
5185	Register breadcrumbs .
5186	Show the dashboard .
5187	Post login .
5188	List permissions .
5189	Create permission .
5190	Delete a permission .
5191	Paginate the page
5192	Authenticate a user
5193	Generate a nonce .
5194	Check if a flag exists
5195	Get rule by flag
5196	Checks if a parameter is required .
5197	Check if a parameter is required .
5198	Check if a parameter is optional .
5199	Parse the command line arguments .
5200	Checks if the given string is a param .
5201	Order parameters .
5202	Authenticate the client .
5203	Get report api
5204	Get permissions API .
5205	Get the company API
5206	Get OAuth API .
5207	Perform a request .
5208	Get all elements in a report
5209	Get metrics for a report
5210	Retry a report
5211	Get sleep seconds .
5212	Parse options .
5213	Get all images .
5214	Get all images .
5215	Get video videos .
5216	Output a string
5217	Get the table definition .
5218	Generate drop table .
5219	Get the drop table data .
5220	Get key definition
5221	Generate drop key .
5222	Get foreign keys for a table
5223	Generate drop foreign key
5224	Get the definition for a column .
5225	Get primary key
5226	Get table comment
5227	Get schema type .
5228	Creates a new SQL statement .
5229	List all tables
5230	Generate migration file .
5231	Create table .
5232	Drop table .
5233	Generate a file .
5234	Print information about a table .
5235	Get the parameters for a table .
5236	Start the start time
5237	Ends a string .
5238	Display information about the table .
5239	Fetch the response
5240	Populate the response
5241	Set the webservices URL
5242	Gets a list of groups .
5243	Get group by DN
5244	Get all users .
5245	Get a user by GUID .
5246	Get user by DN
5247	Get user by email address
5248	Get user by username
5249	Get username by email
5250	Get LDAP group members
5251	Update the LDAP group .
5252	Create LDAP user .
5253	Create a new LDAP group .
5254	Update LDAP user .
5255	Update LDAP groups for a member .
5256	Set the password for a member
5257	Delete LDAP member .
5258	Update the index
5259	Connect to the server
5260	Disconnect the connection .
5261	Read from socket
5262	Send a string to the socket .
5263	Encode a string .
5264	Decode a string .
5265	Read a response from the server
5266	Authenticate a user .
5267	Called when the user is consistent .
5268	Create a new LDAP user
5269	Write the contents of this member .
5270	Get the message from the session .
5271	Display a lost password form .
5272	Displays a password reset .
5273	Search for LDAP records .
5274	Get group by GUID .
5275	Changes the password of the LDAP .
5276	Reset a password
5277	Moves a DN from the LDAP .
5278	Authenticate a user
5279	Attempt to authenticate a user .
5280	Displays the authentication form .
5281	Returns the metadata for the SPL authentication .
5282	Converts a hexadecimal hexadecimal to a string
5283	Execute the select callback .
5284	Select a set of keys .
5285	Split a hash
5286	Create a new DB instance .
5287	Returns the table definition for a given table .
5288	Get all tables .
5289	Fixes indexes .
5290	Compare two columns
5291	Get a single row
5292	Build index name .
5293	Encode a JSON string
5294	Generate a random key
5295	Get supported information .
5296	Generate a HMAC hash
5297	Verify HMAC
5298	Verify a timestamp .
5299	Removes a string from a string
5300	Push string to string
5301	Convert a string to a string .
5302	Get error message .
5303	Add an error message .
5304	Get the main message .
5305	Returns the status of the response .
5306	Get the error message .
5307	Get all errors .
5308	Check if a field is valid
5309	Parse a schema .
5310	Add a single field to the form
5311	Validate data .
5312	Validate a field .
5313	Validates an array .
5314	Validate base64 .
5315	Validate a boolean value .
5316	Validate datetime .
5317	Validate float value
5318	Validate an integer .
5319	Validates an object .
5320	Validate required fields .
5321	Validate a string .
5322	Validate timestamp .
5323	Get all available addon
5324	Bootstrap plugins .
5325	Get data from cache
5326	Returns the class map for the given classname .
5327	Get enabled addon .
5328	Get information about a specific addon .
5329	Scan a directory recursively .
5330	Scan an addon .
5331	Scan all addons .
5332	Start an addon .
5333	Get all headers
5334	Call a callback function .
5335	Bind an event to a handler .
5336	Bind a class to an event .
5337	Dump all registered handlers .
5338	Fire an event .
5339	Fetches all registered events .
5340	Fire the event .
5341	Check if a function exists
5342	Get event name .
5343	Get registered handlers .
5344	Check if an event is registered .
5345	Check if a method exists .
5346	Returns the value of the given driver .
5347	Set a value
5348	Splits the salt into a salt
5349	Set default path
5350	Returns the value of a given key .
5351	Loads the data from the given path .
5352	Save data to a file .
5353	Match all routes .
5354	Add a route .
5355	Finalize the response .
5356	Check if an action exists .
5357	Get allowed methods .
5358	Checks if the request matches the given pattern .
5359	Checks if the given value is valid .
5360	Get the current response .
5361	Create a Response object .
5362	Get the content type .
5363	Set the content asset .
5364	Set content type .
5365	Get the HTTP status message .
5366	Set cookie cookie
5367	Get global cookies
5368	Set meta data
5369	Set data .
5370	Set headers .
5371	Get global headers
5372	Normalize header name .
5373	Flush the headers .
5374	Migrate a table .
5375	Renames a table .
5376	Drop an index
5377	Create a new index
5378	Force the value of a type .
5379	Get primary key value
5380	Get table names
5381	Create a new route .
5382	Set conditions .
5383	Set the HTTP methods .
5384	Set the mappings .
5385	Get global mapping .
5386	Checks if a mapping is mapped .
5387	Get the mapped data from the request .
5388	Checks if the request matches the given request .
5389	Set the pattern .
5390	Dispatch a callback .
5391	Get pattern regex .
5392	Execute a query
5393	Build a select statement
5394	Renders a list of rows .
5395	Build an insert statement
5396	Builds an INSERT statement .
5397	Returns a string representation of a column definition .
5398	Returns a string representation of the index .
5399	Get column orders .
5400	Get formats from database
5401	Translate a row
5402	Verify a password
5403	Encode a 64 - bit integer
5404	Get current request .
5405	Set default environment variables .
5406	Get global environment variable .
5407	Parse server variables .
5408	Overrides the current environment variables .
5409	Get environment variable
5410	Set environment variable .
5411	Get all headers
5412	Get the host and port
5413	Set extension .
5414	Set path extension
5415	Set full path
5416	Set the server port
5417	Get query parameter
5418	Set a query parameter .
5419	Get the value of an input .
5420	Get data from input
5421	Set data .
5422	Returns the URL of the request .
5423	Set url
5424	Convert a path to a URL .
5425	Split path .
5426	Reset the table .
5427	Add a column .
5428	Get column definition
5429	Add primary key .
5430	Execute the query
5431	Get the table name .
5432	Add an index to the database .
5433	Display robots .
5434	Get all records .
5435	Get a single resource
5436	Validate the object
5437	Get attribute value
5438	Set attribute values
5439	Checks if the given method is supported
5440	Check required attributes .
5441	Check the JUD ID .
5442	Returns the summary .
5443	Get model instance .
5444	Returns the summary of the error message .
5445	Get a resource
5446	Perform a POST request
5447	Converts the attributes to the correct data type .
5448	Validates the object .
5449	Check if a key exists in an array .
5450	Renders the notification .
5451	Add a notification .
5452	Add a new delivery .
5453	Convert a job to an array
5454	Convert a JSON object to a Job object
5455	Free the pool .
5456	Free the datagram .
5457	Create a dashboard chart .
5458	Handle an item
5459	Sort the list of items
5460	Link to the editor .
5461	Display the detail form .
5462	Save the item to the dashboard .
5463	Get RSS items
5464	Returns a list of recent edits .
5465	Update the dashboard panel .
5466	Returns the template for the current page .
5467	Get the view link for this page
5468	Creates a link to the model .
5469	Get grid fields for a given page
5470	Get the GridField instance
5471	Returns the tab for the current page
5472	Returns a list of all the items in the grid
5473	Get grid fields for a page
5474	Request account data .
5475	Clean error response
5476	Process filter .
5477	Makes a JSON object from a JSON string .
5478	Mapper for JSONObjectMapper
5479	Checks if a key exists in an array .
5480	Fetch a token
5481	Get the URL of the request .
5482	Performs a POST request .
5483	Get all variables .
5484	Make a request
5485	Make curl request
5486	Opens an HTTP request .
5487	Return a list of all files in the list .
5488	Duplicate this dashboard .
5489	Returns the template for this model .
5490	Get the view link for the model .
5491	Get the list of models .
5492	Get models for a panel .
5493	Provides the permissions for the page .
5494	Sort the dashboard panel
5495	Sets the default dashboard configuration .
5496	Apply to all admin panels .
5497	Display the panel .
5498	Delete panel .
5499	Configure the dashboard .
5500	Save configuration .
5501	Returns the icon for this section .
5502	Converts seconds to minutes .
5503	Get the API client
5504	Gets the dashboard configuration .
5505	Check if the configuration is configured
5506	Get the path for this page .
5507	Get the chart title
5508	Reads a floating point .
5509	Read data from the file .
5510	Convert a value to a hexadecimal value
5511	Reads data from the stream .
5512	Reads a signed value .
5513	Read data from a file .
5514	Reads signed signed signed value .
5515	Reads a 64 - bit integer .
5516	Read signed signed signed signed value .
5517	Export a span .
5518	Get callbacks
5519	Parse robots text .
5520	Extracts the list of robots from a text file .
5521	Builds a list of RegExpressions .
5522	Get robots txt content
5523	Get the robotsTxt URL from the URL .
5524	Initialize the Crawler process .
5525	Go through multiple processes
5526	Start the child process loop .
5527	Check for abort .
5528	Create working directory
5529	Get the process report .
5530	Add link priority
5531	Set the follow mode
5532	Set the traffic limit
5533	Set working directory
5534	Set proxy proxy
5535	Set connection timeout
5536	Set socket timeout
5537	Resume a crawler .
5538	Sets the starting URL .
5539	Removes all redirect urls .
5540	Checks if the URL matches the given URL .
5541	Add URL filter rule
5542	Add URL filter rules
5543	Mark url as follow .
5544	Checks if the cache contains URLs
5545	Get all URLs
5546	Add URLs to the list of URLs
5547	Start a benchmark .
5548	Stop the benchmark .
5549	Reset all benchmarks .
5550	Get all benchmarks .
5551	Get microtime .
5552	Open database connection
5553	Returns the unique hash of the given URL .
5554	Get the priority of a url
5555	Add a link to the crawler .
5556	Add link priority
5557	Add a document info
5558	Get the next document .
5559	Creates a new instance from a URL .
5560	Sets the source URL .
5561	Find redirect link in header
5562	Add post data
5563	Update the crawler status .
5564	Register a child process
5565	Get all child processes
5566	Kill all child processes .
5567	Get IP address
5568	Checks if URL is in cache
5569	Remove visitor visitor .
5570	Traverses the given expression .
5571	Filters a collection of elements .
5572	Create a new method
5573	Format a value .
5574	Format values .
5575	Writes configuration values to the configuration .
5576	Get the value of a variable
5577	Checks if the engine is configured .
5578	Expands a nested array into an array .
5579	Splits the conditions .
5580	Checks if the given key matches the given token .
5581	Get cache value
5582	Set messages from message manager
5583	Trace trace
5584	Export a variable
5585	Listen to Discord .
5586	Parse a message .
5587	Get the file path .
5588	Loads a plugin .
5589	Load plugin configuration .
5590	Load all plugins .
5591	Bootstrap the plugin .
5592	Read config file .
5593	Set config value
5594	Read config from config
5595	Load modules .
5596	Checks the plugins for a given module .
5597	Unload a module
5598	Load a module
5599	Get the time of a module
5600	Check if module is modified
5601	Returns the loaded modules .
5602	Checks if a module exists .
5603	Sets a module .
5604	Get the value of a key .
5605	Set a value in the cache
5606	Get multiple values .
5607	Set multiple values
5608	Call a method .
5609	Start the log entry .
5610	This method is called when a join is finished .
5611	Get profile key
5612	Adds all arguments to the command .
5613	Interpret the given command .
5614	Evaluate command arguments .
5615	Set the expiration time .
5616	Set length .
5617	Read data from socket
5618	Send data to socket
5619	Checks if the command is valid .
5620	Set the protocol version
5621	Process data .
5622	Get the last key .
5623	Prepare the transaction .
5624	Execute the request .
5625	Read raw data from socket
5626	Read a long from the stream .
5627	Reads a string .
5628	Read bytes from the stream .
5629	Read a record .
5630	Add bytes to the request .
5631	Unpack an integer into an integer
5632	Reset data .
5633	Get the properties of this Fusion .
5634	Render component .
5635	Returns a list of class names .
5636	Get all Issuers .
5637	Get all allowed products .
5638	Process products .
5639	Creates a new order .
5640	Creates a new Order
5641	Create a new SofortOrder
5642	Create a payment order .
5643	Create a new OrderCard
5644	Create a Bancontact order .
5645	Creates a new payment order .
5646	Create a KlarnaOrder
5647	Create a payment .
5648	Create a new home order
5649	Create an order after payment
5650	Creates a new order .
5651	Get order by ID
5652	Post an order
5653	Sets the captured status .
5654	Creates a new payment .
5655	Create a new payment .
5656	Creates a payment .
5657	Creates a new payment .
5658	Creates a new payment .
5659	Create a payment .
5660	Create a new payment .
5661	Create Payment Method
5662	Create a new transaction .
5663	Remove null values from array
5664	Create a new client .
5665	Returns the endpoint for the given product .
5666	Check if a country is valid
5667	Builds a request .
5668	Execute a payment .
5669	Capture a payment .
5670	Authorize a payment .
5671	Create a payment .
5672	Get access token .
5673	Build a link .
5674	Build a capture .
5675	Builds a new amount .
5676	Build an array of urls .
5677	Build an access token .
5678	Builds a list of transactions .
5679	Builds an array of transactions .
5680	Send a request .
5681	Build payment .
5682	Build a payment authorization .
5683	Build a Payer .
5684	Build payer data
5685	Build authorization .
5686	Make sure the given string is valid .
5687	Generate a safe character
5688	Get the value of a form attribute .
5689	Checks if a form has mutator .
5690	Get the reflection class .
5691	Generate a favicon .
5692	Generates a link .
5693	Renders a list of items .
5694	Generates a UL element .
5695	Get the value of a model attribute .
5696	Creates a text element .
5697	Create a new email .
5698	Creates a new phone .
5699	Creates a new number .
5700	Generates a URL .
5701	Create a color .
5702	Determine if the given value is checked .
5703	Get url action .
5704	Get route action .
5705	Get controller action .
5706	Insert a string at the given position .
5707	Search for a string
5708	Sets the value at the given index .
5709	Unset an index
5710	Fetch data from the buffer .
5711	Parse a file .
5712	Get line count
5713	Unzip a file
5714	Get the size of a URL .
5715	Get files array
5716	Free the stream .
5717	Removes the next byte from the buffer .
5718	Sets the cursor position .
5719	Insert data into the iterator
5720	Replaces a string with the given data .
5721	Removes the element from the iterator .
5722	Publish a directory .
5723	Close the stream .
5724	Scope admin for the admin .
5725	Add country info
5726	Scope a city .
5727	Scope a country .
5728	Scope search by feature .
5729	Creates the pending redirects .
5730	Checks if the given node is changed .
5731	Builds the redirects .
5732	Creates a redirect from the given node .
5733	Remove a node redirect if it doesn t exist .
5734	Determine if the given node type is restricted .
5735	Checks if the given node is restricted by the current node .
5736	Get hostnames .
5737	Get the URI builder .
5738	Load the name of a URL
5739	Validate that the URL is valid .
5740	Render page picker
5741	Render label callback
5742	Initialize the plugin .
5743	Renders plugin actions .
5744	Get the version of the plugin .
5745	Get the remote version .
5746	Checks if the file type is valid .
5747	Checks if the file type is an SVG file .
5748	Parse a list of contributors .
5749	Get plugin slug by path
5750	Get remote contributors
5751	Validate the file .
5752	Returns the loaded loader class .
5753	Loads the content of a file .
5754	Create an array of options .
5755	Get allowed tags .
5756	Get allowed protocols .
5757	Returns a list of allowed domains .
5758	Sanitize a domain
5759	Sanitize attribute value
5760	Sanitize a URI .
5761	Sanitize CSS URI
5762	Load svg file
5763	Remove comments from svg
5764	Replies the flags of a resource .
5765	Make loaders .
5766	PreParse loaders .
5767	Convert a list of namespaces to a list of namespaces .
5768	Parse options .
5769	Create cache provider
5770	Loads the paths .
5771	Create the loader .
5772	Creates the variables .
5773	Load data from cache
5774	Merge globals .
5775	Get a resource by its name
5776	Creates a new prefix .
5777	Creates a list of resources .
5778	Adds a content to the parent .
5779	Get supported files in dir
5780	Merge parent content .
5781	Get a value from an array .
5782	Checks if a key exists .
5783	Parses the given value .
5784	Parse a value .
5785	Fetches variables for a variable .
5786	Fetch a variable .
5787	Check if a variable exists .
5788	Converts the given value to a string .
5789	Export an SVG document
5790	Remove nodes from a DOMNodeList
5791	Remove a node
5792	Set path .
5793	Make the path to the file
5794	Search for resources .
5795	Parse content .
5796	Parse imports .
5797	Import a resource
5798	Create an import resource
5799	Create an import name from a resource .
5800	Import resource provider .
5801	Check if a value is a boolean value .
5802	Get boolean value .
5803	Get aliases for a given file .
5804	Update filename extension .
5805	Check if a file is an alias .
5806	Check if an alias is allowed .
5807	Loads the given replacements .
5808	Get supported files .
5809	Convert paths to resources .
5810	Check if the cache is valid .
5811	Make a cache file
5812	Sets the version of the asset .
5813	Reads the configuration file .
5814	Send a REST request .
5815	Set curl options
5816	Get a GET request
5817	Perform a PUT request
5818	Delete a request
5819	Perform a POST request
5820	Perform a HEAD request
5821	Execute curl request
5822	Install extension .
5823	Add a list of buckets
5824	Read an XML document
5825	Writes the XML content .
5826	Check if the given XML string is valid
5827	Set the range of elements
5828	Gets the values for this element .
5829	Add values options to the element
5830	Add aggregate .
5831	Get pagination parameters
5832	Retrieve search results
5833	Retrieve search results
5834	Retrieve a key value .
5835	Highlight the given content .
5836	Returns a RESTClient instance
5837	Get a REST client
5838	Get admin client
5839	Get REST API .
5840	Get a database instance
5841	Get options .
5842	Autoload a class
5843	Returns an XML document .
5844	Add an option to the root element .
5845	Add an option to the root element .
5846	Read configuration .
5847	Write configuration .
5848	Delete a query
5849	Set search options
5850	Reads a document .
5851	Write a document .
5852	Delete a document .
5853	Read metadata .
5854	Write metadata .
5855	Delete metadata .
5856	Set content file
5857	Get file mime type
5858	Log a SOAP call .
5859	Decode SOAP response
5860	Convert associative array to array
5861	Performs a ldap sync sync .
5862	Get the list of phones
5863	List all phones
5864	Search for phone search
5865	List phones
5866	Get phone by name
5867	Get directory numbers by name .
5868	Get the list of device pool names
5869	Get the list of site names .
5870	Get lines by site
5871	Get lines details for a phone number
5872	Get all object types for a site
5873	Get object type by name
5874	Delete object type
5875	Add capabilities .
5876	Get the latitude
5877	Get the longitude of the GPS
5878	Get the body type
5879	Returns the error message .
5880	Get url string
5881	Create a REST API .
5882	Delete a resource
5883	Wait until the request is successful .
5884	Check if the API exists
5885	Returns the element as an XML element .
5886	Add term options
5887	Add facet options
5888	Add fragment scope .
5889	Sets the content of the file .
5890	Get the result by URI
5891	Get result by index
5892	Get facet by name
5893	Add constraints .
5894	Get the extractors for the extractors
5895	Add preferred elements .
5896	Returns the transform results as an XML element .
5897	Add collections .
5898	Remove collections from collection
5899	Add permissions .
5900	Delete all permissions for a given role .
5901	Deletes the specified properties .
5902	Returns an XML document as XML .
5903	Loads the permissions from XML .
5904	Enable the alias .
5905	Sets the container .
5906	Checks if a fixture is valid .
5907	Checks if the database indexes are valid .
5908	Compare two fields
5909	Get fixtures files
5910	Compare two fields
5911	Set the form .
5912	Adds a horizontal horizontal form .
5913	Generates a label .
5914	Returns the error message .
5915	Render a group .
5916	Generates an action .
5917	Generates a hyperlink .
5918	Generates an alert .
5919	Create a password .
5920	Create a file input .
5921	Generates a link .
5922	Generates a secure link .
5923	Add a link to a link .
5924	Link a link action .
5925	Generates a link to a link .
5926	Create an alert .
5927	Execute a regular expression .
5928	Get short message .
5929	Get value from cache
5930	Set a value in the cache
5931	Remove basket .
5932	Clear shop order
5933	Update basket .
5934	Get literal value
5935	Get the type of a literal
5936	Get literal language .
5937	Creates a URI from a URI .
5938	Convert a value to a string
5939	Checks if the request is valid
5940	Builds the response .
5941	Initialize the tokenizer .
5942	Tokenize input
5943	Decode the given code .
5944	Encode an ID .
5945	Returns a new instance of the default headers .
5946	Returns a Statement with the given ID .
5947	Returns a Statement with the given ID .
5948	Returns a Statement with the given ID .
5949	Creates a new statement with the given id .
5950	Create a new option .
5951	Creates a StatementResult from the API .
5952	Attach events to the ViewManager
5953	Initializes the view helper .
5954	Gets the last file .
5955	Collect files .
5956	Clean the layout .
5957	Attach viewResolver .
5958	Attach PDFTransformer .
5959	Resolve a view template .
5960	Register an option .
5961	Get a single option .
5962	Get activity profile document .
5963	Get agent profile document .
5964	Creates a state document .
5965	Add a behavior .
5966	Add a value to the bucket .
5967	Set default behavior .
5968	Set default value
5969	Execute the given behavior .
5970	Create a new behavior .
5971	Set default behavior .
5972	Set behavior .
5973	Start metrics .
5974	Stop metrics .
5975	Execute the strategy .
5976	Returns a new collection of items .
5977	Get the first item from the collection .
5978	Get the last item .
5979	Returns the maximum value of the collection .
5980	Filter all items in the collection .
5981	Returns an array of items .
5982	Get array of items .
5983	Check if slug is enabled .
5984	Parses feature map .
5985	Creates a HashMap .
5986	Returns a new Bucket .
5987	Set the configuration .
5988	Create a builder for a feature .
5989	Set the bucket .
5990	Describes a list of tables .
5991	Get a table schema .
5992	Create tables .
5993	Create a new table .
5994	Create a list of fields .
5995	Create a field .
5996	Create a new relationship
5997	Create a relationship .
5998	Update a list of tables .
5999	Update a table .
6000	Update the fields of a table .
6001	Update a field .
6002	Updates a table .
6003	Updates a relationship .
6004	Delete a table
6005	Delete a table .
6006	Set the target length .
6007	Truncate a table .
6008	Paged result response response
6009	Rewind the next row .
6010	Escapes an LDAP value .
6011	Add an LDAP entry .
6012	Compares the LDAP attribute and returns the result .
6013	Connect to LDAP server
6014	Performs a paginated result .
6015	Bind to LDAP .
6016	Get a single option
6017	Modify an LDAP entry .
6018	Modify an LDAP entry .
6019	Modify an LDAP entry .
6020	Modify an LDAP entry .
6021	Modify an LDAP batch .
6022	Renames a DN .
6023	Binds to the LDAP server .
6024	Performs LDAP search .
6025	Sets the option for the given option .
6026	Verify that the resource is valid .
6027	Add a set to the collection .
6028	Compute the reference set .
6029	Compute the product .
6030	Get all the names of a given type .
6031	Load a resource
6032	Compare two table names .
6033	Adds a primary key to the table .
6034	Create a new view
6035	Bind value to statement
6036	Extract PDO type
6037	Extract type from database
6038	Extract default value
6039	Add data to the collection
6040	Generate query string
6041	Create a new request .
6042	Execute a query .
6043	Set HTTP method .
6044	Set the protocol protocol .
6045	Generate query string
6046	Set aggregators
6047	Sets the filters .
6048	Set post aggregators
6049	Register TinyMCE client
6050	Validate the required parameters
6051	Returns the JSON representation of this object .
6052	Display Swagger API .
6053	Prepares the database .
6054	Checks if a given table exists .
6055	Get column type
6056	Update a table .
6057	Drop a table .
6058	Drop all tables .
6059	Renames a table .
6060	Execute a SQL statement .
6061	Add a file to the attachment .
6062	Add a file to the attachment .
6063	Add raw data to a file
6064	Add a URL to a file .
6065	Delete files .
6066	Get last modified file
6067	Get unique name .
6068	Delete thumb .
6069	Delete a file
6070	Delete empty directory .
6071	Checks if a directory is empty .
6072	Check if a file exists
6073	Get the thumb image .
6074	Get thumb filename .
6075	Get default thumb options .
6076	Create a thumb .
6077	Get public path .
6078	Get temporary path
6079	Generates a type enum .
6080	Compile a timestamp .
6081	Compile a timestamp .
6082	Calls curl function
6083	Compile js js
6084	Bootstrap the application .
6085	Normalize url
6086	Add a pattern to the application .
6087	Add a GET route .
6088	Add a post .
6089	Add a path to the application .
6090	Add a patch .
6091	Add a delete route .
6092	Add options .
6093	Add a HEAD request .
6094	Render the given context .
6095	Get the source .
6096	Create a migration .
6097	Checks if a migration exists .
6098	Get stub content .
6099	Get the path to a file .
6100	Scope the query for the given CA .
6101	Get the scope for the given subject .
6102	Builds an array of arrays .
6103	Get migration paths .
6104	Removes all compiled views .
6105	Set parameters .
6106	Set headers
6107	Set proxy .
6108	Set cookies .
6109	Set cookie .
6110	Set options .
6111	Send request .
6112	Sets the request .
6113	Builds the blueprint .
6114	Build table definition .
6115	Builds the commands .
6116	Add an index .
6117	Add a float column
6118	Add a double column .
6119	Add a decimal column .
6120	Set timestamps .
6121	Set nullable timestamps .
6122	Add morphs .
6123	Define morphable model .
6124	Add a column .
6125	Creates a unique reference name .
6126	Add a value to an array
6127	Collapse an array .
6128	Get value from array
6129	Fetch a value from an array
6130	Remove a value from an array
6131	Maps an array to an array .
6132	Splits a pluck parameters .
6133	Computes the levenshtein between two words .
6134	Capitalize a string .
6135	Converts string to upper case
6136	Format a location .
6137	Register url .
6138	Get the composer command .
6139	Build request parameters .
6140	Build headers
6141	Build the proxy
6142	Build the headers .
6143	Register observer events .
6144	Register a model event .
6145	Bootstrap nicer events .
6146	Flush event listeners .
6147	Creates a new location query .
6148	Get a location by identifier .
6149	Get location by slug .
6150	Add a message .
6151	Overlay the message .
6152	Clear all messages .
6153	Add a task .
6154	Register the database .
6155	Register the prefix .
6156	Register storage .
6157	Boot the application .
6158	Add a LIKE clause .
6159	Returns a list of dates .
6160	Find or create a new model .
6161	Get the current user .
6162	Logout the user .
6163	Login a user
6164	Retrieve user by token .
6165	Retrieve user by credentials .
6166	Register database profiling .
6167	Register view profiler .
6168	Write a migration .
6169	Get the list of event events .
6170	Dump an array of data to a dump
6171	Get the id of a variable
6172	Generate a hash of array
6173	Check if array recursion is recursion
6174	Check if object recursion recursion recursively
6175	Dump a list of variables
6176	Display the routes .
6177	Describes a route .
6178	Add directories .
6179	Normalize class name
6180	Loads a mapped class .
6181	Require a class .
6182	Load manifest .
6183	Write manifest .
6184	Loads all available drivers .
6185	Loads a translation file .
6186	Set the query constraint .
6187	Parses the data into an array .
6188	Create a new query .
6189	Determines whether or not the current stdout is supported .
6190	Apply the color to the given text .
6191	Get all migrations .
6192	Get all migrations .
6193	Run migrations .
6194	Run migration .
6195	Get migrations for rollback .
6196	Roll back the migrations .
6197	Reset all migrations .
6198	Reset all migrations .
6199	Rolls a migration .
6200	Run a migration .
6201	Get migration files .
6202	Clears the loader .
6203	Adds primary key .
6204	Add a column .
6205	Generates a timestampable field .
6206	Adds a soft deletable column .
6207	Add a column .
6208	Defines a column type .
6209	Checks if the given options exists .
6210	Checks if the current item is a parent .
6211	Scope a query .
6212	Get the path attribute .
6213	Register the cipher .
6214	Main entry point .
6215	Rename a table
6216	Boot the model .
6217	Get slug key .
6218	Finds the slug for a given slug .
6219	Execute SQL statement .
6220	Execute SQL statement .
6221	Describe columns .
6222	Fetch one row from the database
6223	Fetch all rows from the database
6224	Insert a table into the database .
6225	Update a table .
6226	Delete a table .
6227	Limit SQL query
6228	Check if a table exists .
6229	Check if view exists .
6230	Create a new table .
6231	Create a view .
6232	Drop a view .
6233	Add a column .
6234	Modify a column .
6235	Drop a column .
6236	Add an index .
6237	Drop an index .
6238	Add a primary key .
6239	Drop a primary key .
6240	Adds a foreign key to the table .
6241	Drop a foreign key .
6242	Describe indexes for a table .
6243	Describe references .
6244	Set table options .
6245	Get panel panel
6246	Adds a column to the database .
6247	Modify a column .
6248	Drop a column .
6249	Drop an index .
6250	Adds a primary key to the database .
6251	Drop a foreign key .
6252	Create a new table .
6253	Create a new view .
6254	Drop a table .
6255	Drop a view .
6256	Bind paths to the container .
6257	Check if the database exists .
6258	Register logger .
6259	Boot the notifications .
6260	Extract the attributes from an array .
6261	Checks if the given key is valid .
6262	Converts a given amount to a currency .
6263	Check if currency is active
6264	Get all currencies .
6265	Register modules .
6266	Attach listener .
6267	Generate reset code .
6268	Complete reset password .
6269	Check if the reset password is valid .
6270	Complete the user .
6271	Ask the user to ask a question .
6272	Register currency .
6273	Route middleware .
6274	Register middleware .
6275	Get reflection class
6276	Set the value of a property .
6277	Get the value of a property .
6278	Invokes the given method .
6279	Save a key to the cache .
6280	Check if a key exists .
6281	Get user currency .
6282	Returns true if two coordinates are equal .
6283	Render a block .
6284	Bind an event .
6285	Sort events sorted by event name .
6286	Unbind event .
6287	Fire event .
6288	Get the DI container .
6289	Check if a header exists .
6290	Set headers .
6291	Build headers .
6292	Checks if two coordinates are equal .
6293	Get detailed detail message .
6294	Main entry point
6295	Register services .
6296	Returns a DateTime instance .
6297	Prepare a file .
6298	Get the code of a file .
6299	Parse a file .
6300	Register services .
6301	Get node data
6302	Filter the query for the given id .
6303	Adds a where node to the query .
6304	Adds a descendant of the given node to the query .
6305	Returns the descendants of the given id .
6306	Get the depth of the query .
6307	Returns a list of column names .
6308	Adds children to the query .
6309	Default order by default
6310	Move a node to another node .
6311	Make a gap .
6312	Patch column patch .
6313	Patch column patch .
6314	Returns the number of errors .
6315	Fix tree .
6316	Recursively rebuild the tree .
6317	Boot the model .
6318	Add a list of attributes .
6319	Remove attributes from the model .
6320	Returns the original purge value for the given attribute .
6321	Get item by key .
6322	Sets an item .
6323	Remove an item from the cache .
6324	Save the collection .
6325	Loads the contents of the collection .
6326	Compile a function .
6327	Main entry point .
6328	Add headers to the request
6329	Add headers to the response
6330	Get the rate limiter
6331	Update attributes .
6332	Log a migration .
6333	Create repository .
6334	Get table .
6335	Get database name
6336	Set an attribute .
6337	Append an attribute .
6338	Set content .
6339	Add content .
6340	Register commands .
6341	Main entry point .
6342	Get SQL queries
6343	Check if the given key is expired .
6344	Get the value of a key .
6345	Get the number of attempts for a given key .
6346	Removes a key from the cache .
6347	Checks if the given key is available .
6348	Main entry point .
6349	Register native filesystem .
6350	Swaps the instance with the given instance .
6351	Determine if the given parameters should be received .
6352	Create a new mock instance .
6353	Check if the instance is a mock instance .
6354	Resolve a facade instance .
6355	Processes a select template .
6356	Process all template files .
6357	Parse template content
6358	Process update data .
6359	Attach all events .
6360	Removes all registered events .
6361	Perform a geocode query .
6362	Reverse a query .
6363	Get the status of a migration .
6364	Main entry point .
6365	Get the routes info
6366	Set curl options
6367	Get the response info
6368	Compile a file .
6369	Start process .
6370	Wait for the given timeout .
6371	Stop the process .
6372	Close the process .
6373	Execute the process .
6374	Optimize the memory
6375	Generate the output file
6376	Fill a value with the given key .
6377	Read property from object
6378	Fetch a property from an object
6379	Get value from target object
6380	Set a value to an object
6381	Register the error handler .
6382	Handle an error .
6383	Handle errors .
6384	Resolve a migration file .
6385	Checks if the given level is log level .
6386	Use the log file .
6387	Use the log files .
6388	Register logger .
6389	Initialize the database .
6390	Logs error message
6391	Add a new item to the list
6392	Get a property value .
6393	Set a property .
6394	Set properties .
6395	Returns the value of the original property .
6396	Checks if a property has a cast type .
6397	Get dirty values .
6398	Generates the navbar header .
6399	Add a dropdown submenu
6400	Add a button .
6401	Flush the status messages .
6402	Add a new item
6403	Adds a CSS style .
6404	Get gravatar URL
6405	Set the value of an array
6406	Get database connection
6407	Get the current locale
6408	Add url params
6409	Convert a value to a link
6410	Add column footer columns
6411	Include css file
6412	Returns the current URL
6413	Build the post data
6414	Returns a list of available languages .
6415	Returns the default locale for the given language .
6416	Set locale code
6417	Setup property
6418	Get status messages
6419	Returns a list of countries .
6420	Add a new item .
6421	Set the object name .
6422	Set the color of a string
6423	Get type color
6424	Get a GET request .
6425	Performs a POST request .
6426	Delete a URL template
6427	Get the key
6428	Unset data value
6429	Reindex array by index by index
6430	Draws the page parts .
6431	Set up the context
6432	Returns the number of items in the body
6433	Checks if the element is empty .
6434	Add slashes .
6435	Connect to the database
6436	Inserts an array into the database
6437	Prepare select query
6438	Set the object to use .
6439	Add a slide
6440	Finalize the container .
6441	Add a message to the logger .
6442	Add a status message .
6443	Get the tag name .
6444	Gets a tag property .
6445	Finalize the modal
6446	Creates a new instance of the runner .
6447	Add AJAX AJAX AJAX
6448	Trace the given data .
6449	Attach an event .
6450	Attach an observer .
6451	Detach an observer .
6452	Detach all observers for a given observer .
6453	Validate a pod
6454	Get the connection
6455	Get the driver .
6456	Generate a binding parameter .
6457	Normalise driver exceptions .
6458	Create a database .
6459	Delete a database .
6460	Get database info
6461	List databases .
6462	Get database connection
6463	Set the current connection
6464	Get a toolbox .
6465	Set the model formatter .
6466	Load a pod .
6467	Create a graph
6468	Rename a collection
6469	Returns information about a specific index .
6470	Load a pod
6471	Process a pod
6472	Convert array to pods
6473	Convert array to Pod
6474	Convert driver document to Pod
6475	Create a vertex
6476	Create an edge
6477	Create a new document
6478	Setup the model .
6479	Determine if the given model is stored .
6480	Add a transaction .
6481	Validate type
6482	Maps a list of data to an array .
6483	Crawl a page .
6484	Parse a URL from a Crawler .
6485	Parse an image .
6486	Parses a DOM node .
6487	Parse a date .
6488	Loads a class
6489	Start the coverage .
6490	Initialize config
6491	Add a relationship to the model
6492	Get Inbound Edges
6493	Convert this object to a driver .
6494	Encode an object .
6495	Create a collection .
6496	Delete a collection .
6497	Rename a collection .
6498	Removes a collection .
6499	Get information about a collection .
6500	Gets statistics for a collection .
6501	Counts the number of documents .
6502	Load a collection .
6503	Unload a collection .
6504	Get information about an index
6505	Get the GeoQL fields for a given collection .
6506	Returns the value of a specific type .
6507	Returns the name of the given type .
6508	Delete a user
6509	Get user info
6510	Delete AQL functions by namespace
6511	Returns a list of all registered functions .
6512	Get server version
6513	Get server info
6514	Get server time
6515	Set a property
6516	Remove a property
6517	Get the value of a property
6518	Set the document id .
6519	Sets the distance of the query .
6520	Reset meta data .
6521	Convert this object to an array
6522	Returns a JSON representation of this object .
6523	Returns a JSON representation of the transaction .
6524	Convert this object to a document .
6525	Load data from driver .
6526	Load data from array
6527	Event handler .
6528	Sets the value of the Pod .
6529	Get the ID of the pod .
6530	Sets the Pod .
6531	Get the ID of the pod .
6532	Creates a new EdgeDocument instance
6533	Begin a transaction .
6534	Commit the transaction .
6535	Clears the transaction info .
6536	Add a read collection
6537	Add a write collection
6538	Pause the transaction .
6539	Resume the current transaction .
6540	Add a new command .
6541	Search commands by action
6542	Generate a random ID
6543	Create a new graph .
6544	Delete a graph .
6545	Get information about a graph
6546	Get outbound edges for a given model .
6547	Get filters .
6548	Render the filterbox
6549	Render all filters .
6550	Open the container
6551	Close the container
6552	Opens the filter
6553	Close form .
6554	Check if the current view is active
6555	Create a filter button .
6556	Render a reset button .
6557	Creates a BackToList button .
6558	Get storage storage key
6559	Checks if the URL parameter is a filter parameter .
6560	Get full search conditions .
6561	Flattens an array of values .
6562	Get list of filters
6563	Get redirect URL from POST data
6564	Add filter params
6565	Set default filters
6566	Builds a prepared statement .
6567	Reduce an iterable with the given callback .
6568	Check if a type is valid .
6569	Type castable .
6570	Register bugsnag .
6571	Make a client .
6572	Setup user detection .
6573	Setup the paths for the project .
6574	Add a stub .
6575	Stub a stub .
6576	Creates a new pipeline .
6577	Set the set of keys .
6578	Returns a copy of the iterator .
6579	Sorts the elements in the collection .
6580	Set variables .
6581	Set the value of the page .
6582	Get the path of the page .
6583	Returns the script tag for the given name .
6584	Checks if a script list is allowed .
6585	Converts a string to a list
6586	Create a spoofing user .
6587	Get all layouts .
6588	Add global variables .
6589	Processes the generator .
6590	Parses an XML element .
6591	Extract parameters from XML element
6592	Run git command .
6593	Sort by date
6594	Remove an item from the list
6595	Replaces an item with the given id .
6596	Merges a feed into this collection .
6597	AutoSlice method .
6598	Returns a list of spoofed users .
6599	Adds a new record to the database .
6600	Write items to XML
6601	Set current position
6602	Reads the schedule .
6603	Sort by date
6604	Import data from config
6605	Set the data from data .
6606	Sets the source directory .
6607	Sets the destination directory .
6608	Finds the layout for a page .
6609	Returns the fallback for a page .
6610	Parse the file .
6611	Get the section .
6612	Get the path of the file .
6613	Set config .
6614	Builds the build .
6615	Get current version
6616	Filter pages by variable
6617	Sort array by date
6618	Generate the URL for the site .
6619	Minify a file
6620	Converts a path to a CSS file .
6621	Read time from text
6622	Hash a file
6623	Collect pages .
6624	Render a feed
6625	Load a feed .
6626	Parses the given input .
6627	Check if the given input is a valid type
6628	Scans all inputs .
6629	Runs the given input .
6630	Save a schedule .
6631	Renders a feed .
6632	Create a new item .
6633	Get the author s author .
6634	Get the URL for the feed .
6635	Determine if the given content is a valid XML syntax .
6636	Collect taxonomies from page collection .
6637	Create node pages .
6638	Compile view files .
6639	Compile view files .
6640	Compile a single view file .
6641	Generate diff .
6642	Parse a diff .
6643	Boot the application .
6644	Finish the application .
6645	Register active extensions .
6646	Called when the application is booted .
6647	Loads the providers .
6648	Write manifest file .
6649	Register a deferred service provider .
6650	Load queue service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register the domain s domain name .
6654	Detect extensions .
6655	Get option by name
6656	Publish extension .
6657	Register an extension .
6658	Get the route .
6659	Register the extension .
6660	Refresh all registered extensions .
6661	Reset extension .
6662	Handle exclude field .
6663	Create a new theme .
6664	Bootstrap the application .
6665	Bootstrap configuration .
6666	Bootstrap form .
6667	Bootstrap menu handler .
6668	Bootstrap sidebar .
6669	Bootstrap validation rules .
6670	Attach listener to orchestra .
6671	Initialize the theme .
6672	Set theme theme .
6673	Boot the theme .
6674	Resolve theme paths .
6675	Get available theme paths .
6676	Get the autoload files .
6677	Validate a theme .
6678	Get available theme .
6679	Render a macro .
6680	Filter a date value
6681	Verify status .
6682	Add a path
6683	Detect extensions .
6684	Get manifest contents .
6685	Generate manifest config .
6686	Get composer lock data .
6687	Guess the extension name .
6688	Guess the extension path .
6689	Resolve extension name .
6690	Validate extension name .
6691	Register viewfinder .
6692	Register theme .
6693	Detect theme files .
6694	Set current theme .
6695	Set theme resolver .
6696	Register extension .
6697	Register extension config manager .
6698	Register extension .
6699	Register extension status checker .
6700	Execute the given extension .
6701	Get scheme .
6702	Set the URI .
6703	Get the domain name .
6704	Get the group name .
6705	Checks if the path matches the given pattern .
6706	Returns the prefix of the prefix .
6707	Get the root path .
6708	Get the base url .
6709	Resolve base URL .
6710	Parse an input string .
6711	Checks if the input is duplicated .
6712	Register a manifest .
6713	Deactivates a manifest .
6714	Register extension providers .
6715	Register extension plugin .
6716	Boot the extension .
6717	Start the application .
6718	Fire event .
6719	Get autoload files .
6720	Load autoloader file .
6721	Process deprecated comments .
6722	Start the application .
6723	Generate a log .
6724	Generate the call trace .
6725	Alert alert message
6726	Make a daemon .
6727	Starts a process .
6728	Get the slug of this field .
6729	Update the field s slug .
6730	Send headers to the session
6731	Sets a cookie
6732	Clears all cookies .
6733	Parse request arguments
6734	Store files .
6735	Removes all values from the storage .
6736	Returns an array with a regular expression .
6737	Removes all HTML tags
6738	Returns an array of integers .
6739	Flush the cache .
6740	Combines two files .
6741	Connect to the server .
6742	Execute a command .
6743	Checks if the client is a client .
6744	Get IP address
6745	Open a fifo file .
6746	Register a Deployer .
6747	Returns a Deployer instance .
6748	Add a server .
6749	Set servers .
6750	Returns a registered server .
6751	Deploy a server .
6752	Get the options .
6753	Processes an open token .
6754	Get the slug of an action .
6755	Handles AJAX request .
6756	Trigger AJAX callback .
6757	Handle AJAX request
6758	Get post request
6759	Generate a random string
6760	Start the session .
6761	Clear all session variables
6762	Check if value is serialized
6763	Handle a slug .
6764	Add a new method .
6765	Update session data
6766	Clears the session .
6767	Verify the session
6768	Open session
6769	Delete expired sessions .
6770	Match rule .
6771	Get data page
6772	Check if this object is a page .
6773	Loads the class metadata .
6774	Creates a condition condition .
6775	Initialize plugin instances .
6776	Get all plugins .
6777	Load Twig .
6778	Set default language
6779	Check if the token is valid
6780	Get view template
6781	Add a JS variable
6782	Add a script
6783	Add stylesheet
6784	Get file content
6785	Get content with template
6786	Get all scripts
6787	Get all CSS styles
6788	Render asset
6789	Check if the given route is allowed
6790	Returns the access to the ACL .
6791	Get the roles chain .
6792	Get user language
6793	Translate a choice .
6794	Returns the translation for the given locale .
6795	Get translation translations .
6796	Get the translation for a given id
6797	Returns the basic translation for the given ID .
6798	Generate a toggle command .
6799	Builds the commands for the given attribute .
6800	Builds the commands for the given attribute .
6801	Main entry point
6802	Create controller action .
6803	Execute the ACL .
6804	Execute auth .
6805	Execute route .
6806	Set the app libraries
6807	Returns an instance of the given library class .
6808	Create the core and controller .
6809	Call a method and return the result
6810	Get the parameters of a function
6811	Get role from token
6812	Get role and role from user
6813	Get the current options .
6814	Set the bulk of input parameters .
6815	Get input variable
6816	Filter a variable
6817	Open a database connection
6818	Close connection .
6819	Execute SQL query
6820	Execute a SELECT query
6821	Insert a SQL statement
6822	Delete a SQL statement
6823	Update a SQL statement
6824	Clears the user .
6825	Set user id
6826	Set username .
6827	Sets the role id .
6828	Sets the role name .
6829	Validate value .
6830	Get installed plugins .
6831	Search directory directories .
6832	Search for a plugin factory .
6833	Checks if a file is present in the file .
6834	Converts a closure to a string .
6835	Execute a closure
6836	Execute a command .
6837	Run a command for Windows .
6838	Set autoload path
6839	Check if the process is running
6840	Kill the process .
6841	Reset the log sections .
6842	Create a new instance from a string .
6843	Get image driver
6844	Builds an image
6845	Calculate the width of the image .
6846	Gets the height of the property .
6847	Format a binary string .
6848	Format a metric .
6849	Create a new session .
6850	Initializes the driver .
6851	Parse POST request .
6852	Generate URL .
6853	Get server parameter
6854	Returns the default input definition .
6855	Register commands .
6856	Get model path .
6857	Add force option .
6858	Add model argument .
6859	Validate the model argument .
6860	Add table argument .
6861	Validate table argument .
6862	Get the model instance .
6863	Generate a file .
6864	Handle the request .
6865	Returns whether the stream is seekable .
6866	Creates a parser with the given content type .
6867	Add a parser to the parser .
6868	Add module argument .
6869	Add controller argument .
6870	Create a new request .
6871	Create a server request .
6872	Create a stream .
6873	Create a stream from a file .
6874	Create a new uploaded file .
6875	Create a Uri object from a string .
6876	Format the given bytes .
6877	Format a number .
6878	Normalize bytes .
6879	Normalize precision .
6880	Returns a new instance with the given method name .
6881	Sets the uri .
6882	Get the target URI from the URI .
6883	Add middleware to stack
6884	Returns the reason phrase for the given code .
6885	Get messages .
6886	Get user from message
6887	Get extension from filename
6888	Normalize filename
6889	Get the contents of the stream .
6890	Fix the site url
6891	Fix WP_includes folder
6892	Fix network admin url
6893	Fix WordPress URLs .
6894	Initialize wpBridge
6895	Set wp folder name
6896	Convert a URL to full path
6897	Encodes a path to a URL .
6898	Decode url path
6899	Returns the contents of a directory .
6900	Log a database .
6901	Write a log message
6902	Write memory usage .
6903	Write time to log
6904	Write log sections .
6905	Flip a list of files in the array .
6906	Set the stream .
6907	Get file hash
6908	Get the media type .
6909	Get query params
6910	Check if the request is an AJAX request .
6911	Convert JSON data to a document .
6912	Get entities from an array
6913	Get actions from data array
6914	Get fields from data array
6915	Get links from data array
6916	Send a request .
6917	Execute a request .
6918	Prepare the request .
6919	Set the URL for the request .
6920	Set request headers
6921	Creates a response from the given result .
6922	Splits the response body into an array .
6923	Parse headers .
6924	Count total log type
6925	Display the profiler .
6926	Collect all files in the log files .
6927	Gather data from GET request
6928	Gather input data .
6929	Gather session data .
6930	Get the microtime value
6931	Returns a summary of the summary of the given section .
6932	Create a list of uploaded files .
6933	Create a new uploaded file .
6934	Flip a list of files into a result array .
6935	Merge two arrays .
6936	Process request .
6937	Add menu .
6938	Edit a record .
6939	Edit a record .
6940	Redirect to the edit page .
6941	Order the order
6942	Delete a model
6943	Get uploaded files .
6944	Set uploaded files .
6945	Check if uploaded files are valid .
6946	Load headers .
6947	Add an attribute to the request .
6948	Removes an attribute from the request .
6949	Checks if the given mime is valid .
6950	Returns an array of headers .
6951	Set the status code .
6952	Process the middleware .
6953	Get MySQL version
6954	Authenticate a user .
6955	Find all active users .
6956	Find all active users .
6957	Add a new user
6958	Returns the value for the given metric option .
6959	Set current language .
6960	Checks if the container is encrypted .
6961	Check if the given string is an encrypted string .
6962	Dump the class .
6963	Export an array .
6964	Preprocess all config classes .
6965	Performs the post processing .
6966	Creates a new token for the given token types .
6967	Create a new container .
6968	Recover a record .
6969	Process new class extensions
6970	Processes new config classes .
6971	Process the config class
6972	Process the class .
6973	Set definitions .
6974	Get a definition by name .
6975	Remove a definition .
6976	Set config classes .
6977	Generates the containers .
6978	Dump containers .
6979	Returns the value of the inner value .
6980	Set address .
6981	Send a notice .
6982	Call the given method .
6983	Creates a response from an exception .
6984	Parse HTTP response .
6985	Perform a request for a specific action .
6986	Wait for a subscription message .
6987	Send an action result .
6988	Format layout templates .
6989	Write a file to a file .
6990	Dasherize a value .
6991	Gets a slice of strings .
6992	Returns an array of indices .
6993	Get option value .
6994	Validate the values array .
6995	Create an option .
6996	Declares the reply to the reply stack .
6997	Get the value of a property .
6998	Returns a list of matches .
6999	Compare two images
7000	Creates a diff between two images .
7001	Create comparison image .
7002	Create comparison image
7003	Add a POST route .
7004	Register a route .
7005	Returns the route for the given URL .
7006	Run the route .
7007	Redirect to the given URL .
7008	Parse route parameters .
7009	Get date from file
7010	Save image
7011	Get a GET request .
7012	Performs a POST request .
7013	Set auth header
7014	Get config value
7015	Validate configuration .
7016	Get the excerpt of the given text .
7017	Handle errors .
7018	Get dot extension .
7019	Validate widget id
7020	Set cookie id
7021	Get all documents .
7022	Append a string to the string .
7023	Prepend string to string
7024	Check if the string matches the given pattern .
7025	Limit words .
7026	Generate a random UUID
7027	Join the given array into the string .
7028	Converts the string to an HTML string .
7029	Removes the specified offset from the string .
7030	Limit the string .
7031	Returns a new string with the given limit .
7032	Converts the string to a container .
7033	Encrypt the token .
7034	Create a JWT from an encrypted string .
7035	Returns a Container instance .
7036	Generate parser from a grammar file .
7037	Set settings .
7038	Get all documents .
7039	Sets the number of pages per page
7040	Sets the position of the document .
7041	Returns the value of the given value .
7042	Get searchable value .
7043	Get bool from string
7044	Get grammar .
7045	Create gif command
7046	Create a gif command
7047	Lookup tokens .
7048	Format the number of digits
7049	Checks if a property has a property .
7050	Get property by name
7051	Remove a property by name
7052	Checks if a method has a given name .
7053	Get method by name
7054	Remove a method by name
7055	Parse meta data
7056	Runs a hook
7057	Load plugins .
7058	Setup routes .
7059	Get item by key .
7060	Set a value in the collection .
7061	Push a value to a key
7062	Search items by value .
7063	Get keys by field by field .
7064	Return an array of unique items .
7065	Returns an array of keys .
7066	Join the items in the collection .
7067	Join the list by key .
7068	Get a list of items by key .
7069	Returns an array of chunks .
7070	Filters all items in the collection .
7071	Walk all items in the collection
7072	Merge items with given items .
7073	Merge items with given key .
7074	Increase the number of items .
7075	Returns a random key
7076	Returns a random item .
7077	Returns an array with the specified offset .
7078	Removes a callback from the collection .
7079	Remove a key from the collection .
7080	Reverse the items .
7081	Gets a collection by key .
7082	Removes an offset from the collection .
7083	Returns the rest of the given index .
7084	Restarts the rest after key .
7085	Returns the difference between items .
7086	Returns an array with the given key .
7087	Removes an item from the collection .
7088	Returns an array with the intersection of an array .
7089	Add a condition to the query .
7090	Initialize the object from JSON .
7091	Create container from file
7092	Create a new instance from a serialized string .
7093	Create a JWT from encrypted data .
7094	Create a new instance from a string
7095	Create a where condition .
7096	Returns an array with the given key .
7097	Convert a sub iterator to an array .
7098	Get group by key
7099	Filters an array of items .
7100	Recursively forget all items .
7101	Converts an array of items into an array .
7102	Get the value of a key .
7103	Add a new object
7104	Get the option value .
7105	Get excerpts from files .
7106	Fetch values from an array
7107	Remove a key from an array
7108	Get value from array
7109	Check if a key exists in an array
7110	Set a value in an array
7111	Search for a value in an array
7112	Render a javascript script
7113	Generates a deny - access token .
7114	Get a new access token
7115	Set the input id .
7116	Set the bounding box .
7117	Add a type .
7118	Remove a type .
7119	Returns the current component restriction .
7120	Sets the component restrictions .
7121	Add a component restriction .
7122	Remove a component restriction .
7123	Sets the input attributes .
7124	Set the input attribute .
7125	Identify an image .
7126	Convert an image to an image
7127	Compress an image
7128	Compress a SVG file .
7129	Compress a PNG file
7130	Decode data .
7131	Generate a singlepx image
7132	Convert file extension to format format
7133	Convert a format to an extension .
7134	Convert file extension to mime type
7135	Returns the compression type for the given format .
7136	Returns the quality quality quality quality of the given format .
7137	Set file extension .
7138	Change file extension .
7139	Parse format arguments .
7140	Send a request to the API .
7141	Clean input data
7142	Get the limit limit
7143	Render a circle
7144	Check if a version is valid .
7145	Check if the given version is valid .
7146	Check if the given version is valid .
7147	Create a new CSRF .
7148	Creates a form element
7149	Verify that the user is valid .
7150	Creates a new Request object from the given globals .
7151	Get form data
7152	Get form data .
7153	Get the response body .
7154	Normalize AMP URL .
7155	Render a map type .
7156	Returns the first part of the given name .
7157	Get the last name of a name .
7158	Convert name to acronym
7159	Converts a name to a variable name .
7160	Check if a string is a HTML tag .
7161	Validate a UUID .
7162	Returns the shard id in the given UUID .
7163	Validate shard ID .
7164	Validate the given UUID .
7165	Validate type id .
7166	Get local id from uuid
7167	Validate local ID .
7168	Parse a UUID .
7169	Builds a unique identifier .
7170	Render a polyline .
7171	Set the center of the circle .
7172	Set the latitude .
7173	Set the longitude value .
7174	Sets the coordinate of this coordinate .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Returns the status of the response .
7178	Get a value from the cache
7179	Returns the sub - path for the given primary key .
7180	Get hash keys .
7181	Get a specific class
7182	Returns true if the string matches the given string .
7183	Get a template
7184	Returns the strength of a password .
7185	Checks to see if a sha1 sha is valid
7186	Checks to see if a sha is available
7187	Checks if the given URL matches the given SHA1 .
7188	Checks the cache for the given URL .
7189	Check the contents of a given URL .
7190	Cache cache .
7191	Sets the cache for the given sha .
7192	Get the map
7193	Gets the map cache .
7194	Checks if a URL is local .
7195	Check if a variable is valid
7196	Convert a variable name to an acronym .
7197	Convert a string to a slug
7198	Convert a string to camelCase
7199	Render a size .
7200	Check if email is a role based on the email address .
7201	Parse an address string
7202	Parse headers .
7203	Parse attachments .
7204	Parse content type .
7205	Convert a string representation to a classname .
7206	Compute the difference between two numbers .
7207	Encode a base64 string .
7208	Decode a base64 encoded string .
7209	Create a new nonce .
7210	Creates a new form element
7211	Verify a nonce
7212	Set origins .
7213	Returns a human readable human readable format .
7214	Returns an array of items for the given keys .
7215	Render a marker .
7216	Build json .
7217	Render a marker shape .
7218	Renders a scale control style .
7219	Check if a slug is valid .
7220	Checks if a slug is reserved .
7221	Convert slug to name
7222	Convert a string to a var name
7223	Sets the coordinates .
7224	Store the cache .
7225	Get all repositories .
7226	Parse the file
7227	Set the default values .
7228	Checks if the file is a parent .
7229	Get parent variables .
7230	Get the template
7231	Get the options .
7232	Render a rotate control .
7233	Encode a value .
7234	Decode HTML entities .
7235	Call the given method .
7236	Render a KML layer .
7237	Get a value from the cache
7238	Set a value in the cache
7239	Delete a key from the database
7240	Generate a unique key
7241	Returns the namespace for the given primary key .
7242	Determine if the server is different
7243	Add server connections .
7244	Render the HTML container .
7245	Renders the javascript .
7246	Render autocomplete .
7247	Register the seeder .
7248	Close the request .
7249	Set gzip output
7250	Set the location
7251	Set stopover
7252	Returns the error reason .
7253	Set file extension .
7254	Change file extension .
7255	Check if an option exists .
7256	Get an option .
7257	Set option value
7258	Remove an option .
7259	Modify request attributes .
7260	Sets the zoom control style .
7261	Decodes a hash id .
7262	Set the results .
7263	Set the status of the response .
7264	Check if string is valid
7265	Checks if the browser is engine .
7266	Normalize a string
7267	Get the page url .
7268	Set the avoidHighways .
7269	Sets the avoidTolls .
7270	Sets the destinations .
7271	Add a destination to the request .
7272	Add origins to the request .
7273	Set the region of the request .
7274	Set the language .
7275	Set the travel mode .
7276	Sets the unit system .
7277	Returns the list of control positions .
7278	Sets the response status .
7279	Render the overview map
7280	Render a bounding box .
7281	Renders a bounding box .
7282	Print all statistics
7283	Set markers .
7284	Sets the helpers .
7285	Get a marker by name .
7286	Sets the extension helpers .
7287	Get extension helper .
7288	Remove extension helper .
7289	Render HTML container
7290	Renders stylesheet .
7291	Renders javascripts .
7292	Render JS libraries .
7293	Render js before
7294	Renders the javascript after the given map .
7295	Renders JS container .
7296	Render JS container coordinates .
7297	Render JS container bounds .
7298	Render JS container points
7299	Render JS container sizes .
7300	Render JS container map
7301	Render the js container
7302	Render a map of polylines .
7303	Renders the ground overlay .
7304	Render the polygon polygon
7305	Renders the polylines .
7306	Render the rectangles .
7307	Render js container info
7308	Render JS container images .
7309	Renders the map of markers .
7310	Render a map of markers .
7311	Render the JMLL layer .
7312	Render javascript event manager .
7313	Renders JS container .
7314	Render a map .
7315	Render the map center .
7316	Renders the bounding box .
7317	Computes the coordinates of the map .
7318	Computes the bounds of the map .
7319	Computes the points of the map .
7320	Computes the size of the map .
7321	Compute marker images .
7322	Computes the shapes of the map .
7323	Computes the info window for the map .
7324	Render map controls
7325	Render map control
7326	Generate a unique identifier
7327	Generate a unique identifier
7328	Generate a unique identifier
7329	Generate a unique identifier
7330	Get package by name
7331	Iterate over all items .
7332	Filter all items in the collection .
7333	Add a package .
7334	Set the address .
7335	Set the coordinate .
7336	Set the bounding box .
7337	Set the region of the request .
7338	Set the language .
7339	Loads a file .
7340	Get route .
7341	Parse a YAML value .
7342	Sets the cache flags .
7343	Sort array by key .
7344	Get request method
7345	Get the scheme .
7346	Get the host name .
7347	Get the root host
7348	Checks if the current server is SSL .
7349	Checks if the host is localhost
7350	Sets the location type .
7351	Moves Escaped Escaped characters .
7352	Returns the status of the gateway .
7353	Returns an array of properties .
7354	Returns an array of properties .
7355	Returns an array of properties that are writable .
7356	Overloads the given properties .
7357	Open a URL
7358	Set the anchor anchor .
7359	Set the origin .
7360	Set the scaled size .
7361	Set the size of the image .
7362	Render the infoWindow .
7363	Renders the open window .
7364	Render infoWindow
7365	Register services .
7366	Get asset URL .
7367	Load routes .
7368	Checks if a function is available .
7369	Renders the ground overlay .
7370	Emits the response .
7371	Set the value for a specific key .
7372	Get the value for a specific key .
7373	Unset a key from the cache
7374	Remove a pattern from the cache .
7375	Add a value to the cache
7376	Unset cache by ref
7377	Remove references from the cache
7378	Render the map type .
7379	Converts a value to a string
7380	Convert a value to a string
7381	Quote a value
7382	Render a map type .
7383	Sign a URL .
7384	Get a search term .
7385	Get shard id
7386	Assigns a string to the database .
7387	Set the travel mode .
7388	Set the prefix of the asset .
7389	Selects a list of available options
7390	Generate dropdown items
7391	Render a street view .
7392	Normalize a string
7393	Returns true if the given value matches the given regex .
7394	Normalize a value .
7395	Reverse special characters
7396	Converts a URL to a URI pattern .
7397	Sets the width unit .
7398	Sets the height unit .
7399	Generate a random key
7400	Checks if the given value is valid .
7401	Strip the query string .
7402	Parse query string
7403	Build query string
7404	Add a SHA256 signature
7405	Remove a SHA256 signature from a URL .
7406	Checks if the given URL is valid .
7407	Set the markers .
7408	Add a polygon .
7409	Create a customer
7410	Update a customer .
7411	Returns the amount of units for a given currency .
7412	Get scope entity by identifier
7413	Render a scale control .
7414	Generates the URL for the request .
7415	Build a geocoder response .
7416	Builds a geocoder result .
7417	Builds a list of GeoAddress components .
7418	Builds a geocoderAddress component .
7419	Build a geocoder .
7420	Process a distance matrix
7421	Generates the URL for the request .
7422	Parse response .
7423	Build the distance matrix .
7424	Build the distance matrix
7425	Build the distance matrix .
7426	Build the distance matrix .
7427	Render a point .
7428	Returns array of parameter strings .
7429	Parse parameter strings .
7430	Get HTTP headers
7431	Send a response to the cache
7432	Sets the response headers
7433	Get the slug for the given status .
7434	Get status message .
7435	Sends a status header .
7436	Parse a header value .
7437	Removes tags from a string
7438	Register migrations .
7439	Register translations .
7440	Set pixel offset
7441	Set the open event .
7442	Renders panics .
7443	Returns the list of mouse events .
7444	Set mapTypeIds .
7445	Add a map type id
7446	Set the map type .
7447	Sets a cookie
7448	Get cookie value
7449	Render DOMEvent .
7450	Renders a DOM event .
7451	Renders an event .
7452	Render an event once .
7453	Render an animation .
7454	Render a zoom control .
7455	Returns the maximum time limit .
7456	Check if slug is valid
7457	Get address components .
7458	Sets the address components .
7459	Set the partial match .
7460	Generate a Gravatar URL .
7461	Set the center of the map
7462	Checks if a map option exists .
7463	Set map options .
7464	Returns the map option .
7465	Set map option .
7466	Remove a map option .
7467	Checks if the given stylesheet option exists .
7468	Set stylesheet options .
7469	Returns the stylesheet option .
7470	Set the stylesheet option .
7471	Remove stylesheet option .
7472	Set the map type
7473	Set overview map
7474	Sets the pan control .
7475	Set the rotation control
7476	Set the scale control
7477	Set the street view control .
7478	Set the zoom control
7479	Add a marker
7480	Add infoWindow
7481	Add a polyline
7482	Add an encoded polyline .
7483	Add a polygon
7484	Add a rectangle .
7485	Add a circle
7486	Add a ground overlay .
7487	Sets the value of the cache .
7488	Delete the file
7489	Set avoidHighways
7490	Sets the avoidTolls .
7491	Set destination .
7492	Set optimize waypoints
7493	Set origin .
7494	Sets the routeAlternatives value .
7495	Sets the region .
7496	Set language language .
7497	Sets the travel mode .
7498	Sets the unit system .
7499	Set waypoints
7500	Add a new waypoint
7501	Checks if the gateway is valid .
7502	Perform a POST request .
7503	Log an issue .
7504	Log a review .
7505	Write log file to log file
7506	Clean log event .
7507	Rotate log files .
7508	Get a response
7509	Parse the given source .
7510	Build a document .
7511	Parse section .
7512	Parse YAML content .
7513	Get query variable
7514	Get the template
7515	Get a remote OAuth object
7516	Generate a hash of remote credentials .
7517	Converts a value to an ASCII string .
7518	Returns the status of the distance matrix .
7519	Strip leading leading whitespace .
7520	Set the steps .
7521	Route a route
7522	Builds the directions response .
7523	Builds the routes .
7524	Build directions route
7525	Builds a list of directions .
7526	Builds a DirectionsLeg .
7527	Builds a list of directions .
7528	Build directions step .
7529	Set the lightness .
7530	Determine the darkness of the given percentage .
7531	Sets the saturation percentage .
7532	Saturate the given percentage .
7533	Combine two colors .
7534	Start the session .
7535	Check if the given version is valid .
7536	Check if the given version is valid .
7537	Check if the given version is valid .
7538	Returns the date for the given version
7539	Returns the time of the given version
7540	Returns a copy of this request .
7541	Returns a copy of the response .
7542	Sends an error to the response .
7543	Output the response .
7544	Set the legs .
7545	Set the warnings .
7546	Sets the waypoint order .
7547	Renders the zoom control style .
7548	Get metadata .
7549	Issue an access token
7550	Validate a resource request
7551	Get AccessTokenRepository
7552	Add a value to a string
7553	Remove values from a string
7554	Renders the google map
7555	Set elements .
7556	Renders a control position .
7557	Get current IP address
7558	Returns the region of the given IP .
7559	Returns the country country
7560	Check if the request is AJAX .
7561	Check if the current request is an API .
7562	Get the rest action .
7563	Determine whether or not a given action is allowed .
7564	Subscribe to a user
7565	Get a member
7566	Update a user .
7567	Delete a user
7568	Returns a hexadecimal string
7569	Adjust the luminosity of a hexadecimal color
7570	Clean hex string
7571	If merge config arrays are empty it will be empty
7572	Create a new request
7573	Create a request body
7574	If the array is empty it will be empty .
7575	Render a rectangle .
7576	Convert an array to HTML
7577	Convert an array to a DOM element .
7578	Render a marker .
7579	Get the license key
7580	Returns a list of libraries .
7581	Escape the given order .
7582	Serializes a Closure .
7583	Unserialize a closure
7584	Serialize a value .
7585	Unserialize value
7586	Render embedly markup .
7587	Get embedly embeds the given url
7588	Convert a string to an oembed
7589	Render a polyline .
7590	Set the bounding box .
7591	Set the bounding box .
7592	Returns the center of this point .
7593	Converts a string to a number of bytes .
7594	Get the number of bytes for a given URL .
7595	Converts an array into a string .
7596	Render a coordinate .
7597	Render a marker image .
7598	Parses an XML string .
7599	Converts the given array to plural form .
7600	Creates a new Route MatrixRequestRequestRequest .
7601	Parse a host name .
7602	UnParse a single port .
7603	Set position .
7604	Set the animation .
7605	Set the icon .
7606	Set the shadow shadow .
7607	Set the marker shape .
7608	Generate header id
7609	Get the first image url
7610	Converts a value to a string .
7611	Set the bounding box .
7612	Get the message s message .
7613	Get all messages .
7614	Get error data .
7615	Add a new error message .
7616	Add a coordinate .
7617	Load HTML document .
7618	Minify the HTML .
7619	Recursively indentation .
7620	Loads the organization reference .
7621	Create a view model .
7622	Get organization entity
7623	Create an error view model .
7624	Add an asset .
7625	Reverse styles order
7626	Add a file to the index .
7627	Add an asset to the asset .
7628	Add meta data
7629	Generate meta tags
7630	Generate a controller .
7631	Load a file .
7632	Create query builder .
7633	Process an email
7634	Validate email address
7635	Load a user .
7636	Loads the organization .
7637	Proxy method .
7638	Returns a cursor for the given organization .
7639	Find organizations by name
7640	Finds a user by its user .
7641	Find an Employee by user
7642	Creates a new organization name .
7643	Find a draft document .
7644	Create contact
7645	Checks if the user is an Employee
7646	Update permissions .
7647	Sets the organization name .
7648	Set permissions .
7649	Get image
7650	Set the contact .
7651	Gets the employees .
7652	Get a single employee .
7653	Get all employees by role
7654	Set creation options .
7655	Initializes the invitations .
7656	Get formular form
7657	Returns the URI for the organization .
7658	Store an image .
7659	Extract properties from an object
7660	Hydrate a value
7661	Checks if the user has permission .
7662	Configure the logo .
7663	Ensure payment number is correct
7664	Encrypts the given merchant order
7665	Creates a sign signature for a given key
7666	Validates a notification
7667	Calculates the sign of a payment
7668	Perform an HTTP request .
7669	Get ticket articles
7670	Make a HTTP request .
7671	Perform a POST request .
7672	Perform a PUT request .
7673	Get tickets for a ticket .
7674	Returns the value of a specific key .
7675	Get a single object from the object
7676	Fetches all objects .
7677	Create a new object
7678	Update the object
7679	Delete the object
7680	Returns the URL for the given method .
7681	Get a single object
7682	Add a tag to a ticket
7683	Performs a search .
7684	Remove a tag
7685	Shows the shmown file .
7686	Read proxy type .
7687	Get connection info
7688	Loop through the server
7689	Execute the request
7690	Iterate over all items .
7691	Get data by id
7692	Returns a copy of the source
7693	Fetch data from Google API
7694	Validate permissions .
7695	Set parameter value
7696	Add multiple parameters
7697	Create a new request .
7698	Save photos .
7699	Start a callback .
7700	Get an access token
7701	Converts the hits into an array .
7702	Search by query .
7703	Replace all dots in a string
7704	Replace all dots in a string
7705	Replace all dots in a string
7706	Convert intl formatter to malot form
7707	Convert malot to intl form
7708	Add picker .
7709	Bind Alexa request .
7710	Register Middleware .
7711	Resume audio .
7712	Get the Alexa request .
7713	Adds the middleware middleware to the middleware .
7714	Checks if the given route matches the given route .
7715	Creates a new Alexa route .
7716	Get session value
7717	Update a slot .
7718	Get validators .
7719	Compile the route .
7720	Get the certificate from the request .
7721	Prepare the response data .
7722	Send request to router
7723	Gather the middleware .
7724	Persist a certificate .
7725	Retrieve the certificate from the store .
7726	Calculates the path to the file path .
7727	Set custom protected words .
7728	Capitalize a string .
7729	Normalize input string .
7730	Process string parts .
7731	Process the first sentence words in parts .
7732	Process last word in parts .
7733	Process a word .
7734	Replaces a regular expression with replacement .
7735	Returns the prefix for a given name
7736	Break words .
7737	Checks if the given word is salutation .
7738	Checks if a line is a line suffix .
7739	Generate emoji constants .
7740	Removes a string from a string .
7741	Emits an emojified string .
7742	Get first word from string
7743	Checks if the given thing is a string .
7744	Get last word
7745	Returns the lower case of a string .
7746	Generate Markdown HTML .
7747	Read time from string
7748	Get smartypants .
7749	Returns the substring of the given string .
7750	Returns the substring of the given string .
7751	Returns the substring before the given string .
7752	Returns the substring before the given string .
7753	Convert string to title
7754	Trims a string
7755	Trims the given string .
7756	Trims the given string .
7757	Typogify a string .
7758	Converts a string to upper case
7759	Generate a widont
7760	Get a setting by name
7761	Get the icon
7762	Returns an array representation of composer .
7763	Display a blog .
7764	Display a post .
7765	Store a new tag .
7766	Edit a tag .
7767	Update a tag .
7768	Delete a tag .
7769	Display the dashboard .
7770	Clears the cache .
7771	Handle download .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Register configs .
7775	Load translations .
7776	Register views .
7777	Display the profile .
7778	Update a profile .
7779	Log a user .
7780	Get current version
7781	Get post fill data .
7782	Enable extension .
7783	Disable an extension .
7784	Uninstall extension .
7785	Migrate extension .
7786	Get the bootstrappers .
7787	Sanitise input .
7788	Display the dashboard .
7789	Get fields from model .
7790	Get the index data .
7791	Get index data .
7792	Store a new post .
7793	Update a post .
7794	Publish a theme .
7795	Publish theme views .
7796	Remove theme .
7797	Get the default theme .
7798	Get active settings
7799	Get route middleware
7800	Returns the application middleware installed .
7801	Get admin middleware
7802	Get blog path
7803	Get blog prefix
7804	Get admin prefix
7805	Get auth prefix
7806	Get the password prefix .
7807	Display the index .
7808	Returns the request data .
7809	Scan file
7810	Multiscan file
7811	Concatenate a file
7812	Receive a response from the server .
7813	Process a single file .
7814	Validate a file
7815	Sanitize file name
7816	Delete a file
7817	Move uploaded file to destination directory .
7818	Get list of themes .
7819	Get the asset
7820	Get asset version
7821	Get the path to the theme .
7822	Create directory .
7823	Create a file .
7824	Get assets path
7825	Get template from template
7826	Creates new assets .
7827	Fetch a translation from a message
7828	Update a message .
7829	Flag the given message .
7830	Create an asset .
7831	Download all translations .
7832	Upload all translations .
7833	Sync all translations .
7834	Processes messages .
7835	Copies the values from the config to the project .
7836	Adds a directive to the script .
7837	Returns the value of the directive .
7838	Search for classes in composer .
7839	Search for psr maps
7840	Called after save .
7841	Prepare the query .
7842	Handles the results of the query .
7843	Synchronizes a new array of items .
7844	Synchronizes a list of products .
7845	Find product item .
7846	Checks if the item is integrity .
7847	Build the item data .
7848	Fill entity attributes .
7849	Setup default criteria .
7850	Performs an action .
7851	Do before action
7852	Validate the given action .
7853	Performs a query .
7854	Set paginate
7855	Toggle exceptions .
7856	Apply criteria to the query .
7857	Update an entity .
7858	Fetches a list of records .
7859	Find by key
7860	Find by criteria .
7861	Get a collection by criteria .
7862	Get a collection by keys .
7863	Get a list of records
7864	Creates a new query .
7865	Replace the value of a config value .
7866	Set view path
7867	Sends the content of a file .
7868	Get content type
7869	Maps an exception to an exception .
7870	Set an aspect definition
7871	Set a pointcut
7872	Get a pointcut
7873	Returns a list of candidates for the given path .
7874	Checks if a file is scannable .
7875	Converts an exception to a string .
7876	Dispatch an action .
7877	Invokes an action .
7878	Checks if the socket is available .
7879	Get a bean definition .
7880	Replace properties in a string
7881	Get the constructor arguments for the constructor .
7882	Instantiates a bean definition .
7883	Instantiates a bean definition .
7884	Instantiates a bean definition .
7885	Instantiate a bean definition .
7886	Create bean dependencies
7887	Apply aspect to target class .
7888	Apply all aspects of a bean definition .
7889	Apply global aspects .
7890	Apply aspects to the bean definition .
7891	Create a bean .
7892	Setup init method .
7893	Inject a non - setter method
7894	Inject a property in the bean
7895	Get a bean .
7896	Get container instance
7897	Fill a bean definition
7898	Handles signal handler .
7899	Loads a class
7900	Create a new child bean .
7901	Populate classes by annotations .
7902	Load an XML file .
7903	Loads the XML file .
7904	Close the socket .
7905	Open socket .
7906	Free connection .
7907	Create a new class
7908	Create a parameter .
7909	Create a method for the given method .
7910	Create a proxy class
7911	Load YAML file .
7912	Load YAML files .
7913	Initialize the client
7914	Opens the connection
7915	Get the cache from the given options
7916	Processes a bean definition .
7917	Called before create .
7918	Called after creation .
7919	Called before the bean .
7920	Called after the given bean definition .
7921	Open a log file .
7922	Returns the interceptors for the given method .
7923	Returns the exception interceptors for the given method .
7924	Call interceptors .
7925	Invokes an exception .
7926	Invokes interceptors .
7927	Close the connection .
7928	Read data from socket .
7929	Open socket .
7930	Adds an array of objects to the collection .
7931	Build the URI for the given URI .
7932	Overwrites application config .
7933	Resolve file path .
7934	Get published dropdown list
7935	Finds a page by its alias .
7936	Build a link .
7937	Update a page .
7938	Register translations .
7939	Register DatePicker
7940	Vote for an object
7941	Returns the email address .
7942	Load user by username
7943	Hydrate a user .
7944	Create a new user .
7945	Set user password
7946	Checks if user password is valid .
7947	Check if the user is logged in .
7948	Find a user by criteria .
7949	Returns an array with the given criteria .
7950	Creates the SQL query for the given criteria .
7951	Returns the count of records in the database .
7952	Insert a user .
7953	Update a user .
7954	Deletes a user .
7955	Validate user .
7956	Clears the identity map .
7957	Logs a user with the given user .
7958	Initialize the process .
7959	Releases the workers .
7960	Wait for all workers .
7961	Get the result of the process .
7962	Get all processes .
7963	Apply a function to the pool .
7964	Returns the number of pending workers .
7965	Send data to socket
7966	Fetch data from socket
7967	Migrate user data
7968	Register a user .
7969	Confirm user confirmation .
7970	Displays the login action .
7971	Resend confirmation email .
7972	Display a user .
7973	Edit a user .
7974	Validates the user .
7975	Connect to the application .
7976	Get the priorities .
7977	Get the formatter .
7978	Formats the given payload .
7979	Detect environment file .
7980	Get the type of the request .
7981	Creates a new instance of the injector .
7982	Run the router .
7983	Handle action .
7984	Payload payload
7985	Respond to the response .
7986	Set the status of the response .
7987	Get a command from a resource .
7988	Run before command .
7989	Get per page per page
7990	Add WHERE statements to query .
7991	Register routes .
7992	Allow allowed methods
7993	Set pattern .
7994	Returns a list of tokens .
7995	Get the regex .
7996	Get compiled variables .
7997	Determine if the request matches the request .
7998	Build variables .
7999	Dispatch the middleware .
8000	Generate a link .
8001	Compile the pattern .
8002	Checks if the request matches the pattern .
8003	Generate a link .
8004	Tokenize a pattern .
8005	Tokenize a pattern .
8006	Tokenize a segment .
8007	Split a pattern into segments .
8008	Compile a token .
8009	Sets scoped options .
8010	Bind a route .
8011	Add a new route .
8012	Add a route
8013	Normalize request .
8014	Route routes .
8015	Link a route .
8016	Clears the router .
8017	Creates JS for the workflow
8018	Get the current file
8019	Get the access token
8020	List addressbooks .
8021	Get emails from book
8022	Add email addresses
8023	Get cost cost for a book
8024	Create a campaign .
8025	Add a new sender
8026	Activate a sender
8027	Get list of subscriptions .
8028	Set the state of a subscription .
8029	Create push task .
8030	Get the name of the sender .
8031	Send a URL to a website .
8032	Send a request to API .
8033	Check if the account is valid .
8034	Decode a response string .
8035	Decode url encoded string
8036	Fetch emails from emails
8037	Mark the message as processed .
8038	Returns the type of mail .
8039	Performs an auto refund .
8040	Auto - Apply SSL SSL .
8041	Auto - replace SSL certificate
8042	Performs an auto - revoke SSL request .
8043	Collects SSL certificates .
8044	Get DCVEM address list
8045	Send SSL checker .
8046	Performs a web host report .
8047	Enter DCV code
8048	Create an exception .
8049	Generate HTML tag
8050	Set the description .
8051	Resets the content .
8052	Register bindings .
8053	Generates the HTML tag
8054	Add raw data .
8055	Prepare data .
8056	Checks if a URL contains a given URL .
8057	Validate data .
8058	Fill the given index with the given index .
8059	Fill the given type .
8060	Set the index
8061	Add a type to the query .
8062	Set the index settings .
8063	Delete all documents .
8064	Create a new index .
8065	Update settings .
8066	Execute RawRequest
8067	Returns the JSON representation of the request .
8068	Sets the sort parameters .
8069	Set facet facets .
8070	Computes the final query .
8071	Convert parameters to array
8072	Add a node to the cluster .
8073	Add a condition to the query .
8074	Delete a document .
8075	Set documents .
8076	Execute the batch .
8077	Create a new request
8078	Perform a POST request .
8079	Perform a PUT request .
8080	Delete a URL .
8081	Execute the request .
8082	Add options .
8083	Execute a request .
8084	Parse the nodes
8085	Add a new document .
8086	Execute the batch .
8087	Finalize the current command .
8088	Update the current command .
8089	Get Album
8090	Initializes the album .
8091	Create a new album .
8092	Generate an album name .
8093	Upload an album
8094	Deletes the image .
8095	Get resize size
8096	Add image styles
8097	Deletes a version from the database .
8098	Save a picture .
8099	Create extra images .
8100	Initialize Zebra_Image
8101	Prepare the image
8102	Configure the database .
8103	Configure the database .
8104	Create config file .
8105	Checks the documentation for all operations .
8106	Generate PHP code
8107	Generates a link .
8108	Show room .
8109	Show a photo message
8110	Load scripts .
8111	Delete a picture
8112	Sort a photo
8113	List channel sections .
8114	Starts the worker .
8115	Stop the process .
8116	Kill the process .
8117	Send a payload
8118	Start the worker process
8119	Fork a thread
8120	Create an authn request .
8121	Parse SAML response .
8122	Get the list of binaries .
8123	Get the list of available binary binaries .
8124	Update the installed binary .
8125	Update a binary binary .
8126	Start the Selenium process .
8127	Remove all files .
8128	Asserts that the Selenium process is started .
8129	Register binaries .
8130	Create a binary binary .
8131	Checks if the given URL is valid .
8132	Get linux file name
8133	Save the contents of the file .
8134	Event handler .
8135	Watch the download .
8136	Get the pre - update message .
8137	Get post message .
8138	Add a pipeline to the pipeline .
8139	Convert an item to a converter
8140	Convert a value to a value
8141	Write an item
8142	Get the transport from the request .
8143	Validates a password .
8144	Get the taxonomy .
8145	Check if the entity is valid .
8146	Returns the description of the taxonomy .
8147	Get the value of an environment variable .
8148	Get client IP address
8149	Get current URL
8150	Unparse query string
8151	Checks if a property exists .
8152	Lookup address by address
8153	Determine inclusion .
8154	Executes the given value .
8155	Returns an array of elements .
8156	Updates an array of elements .
8157	Updates a form read .
8158	Get field from data
8159	Returns the item matching the given item .
8160	Checks if item matches the given item .
8161	Get item from aggregate
8162	Replace variables in a string
8163	Load JSON configuration .
8164	Load configuration file .
8165	Set latLng
8166	Get LatLng object
8167	Response error response .
8168	Redirect to form
8169	Create a form aggregate .
8170	Remove item from form
8171	Check if the composer is autoloadd .
8172	Get plugin classes .
8173	Get the name of the package .
8174	Guess the package name .
8175	Map the package name to the root .
8176	Writes an array of plugins to an array .
8177	Get the root package .
8178	Returns the path to the install directory .
8179	Initialize the install directory .
8180	Generate the theme .
8181	Get meta palettes
8182	Creates a new context .
8183	Enter theme context .
8184	Build the context config .
8185	Returns the color for the given identifier .
8186	Rotate the color
8187	Convert HSV to RGB color
8188	Enter a context .
8189	Leave the current context .
8190	Change the current context .
8191	Load configuration from bundle .
8192	Set config types .
8193	Returns the templates for the given data container .
8194	Render page picker
8195	Get all articles
8196	Get all modules
8197	Prepare the template .
8198	Parses the given template and returns it .
8199	Registers services .
8200	Initialize environment .
8201	Initializes the layout .
8202	Adds a child element .
8203	Compile the input .
8204	Compile a node .
8205	Throw exception .
8206	Get PHP type .
8207	Get fileReflector
8208	Get the doc block for a given property .
8209	Get the docblock from a class .
8210	Get the doc block from the given class .
8211	Get php type and class and class name .
8212	Login to the user .
8213	Initialize the client
8214	Get login token
8215	Search for a given query .
8216	Extracts the value from the given array .
8217	Get all tags .
8218	Download image .
8219	Get all wallpapers
8220	Download all images .
8221	Extracts from a mutator .
8222	Extracts a property from an accessor .
8223	Extract type from reflection type
8224	Check if a property is public .
8225	Get accessor method
8226	Get the mutator method .
8227	Get the property name from a method name .
8228	Loads Laravel services .
8229	Create a new instance
8230	Set a value
8231	Sets a list of values
8232	Remove a section .
8233	Merges a section .
8234	Renames a value .
8235	Renames a section .
8236	Reads a file .
8237	Merge the contents of an object into an object .
8238	Merges the contents of an IniObject into another object .
8239	Convert a value to a string
8240	Sets the value of the given variable .
8241	Sets the values of the current content .
8242	Gets the values of the modifiers .
8243	Removes a value from the configuration .
8244	Remove a section .
8245	Set a value
8246	Sets a value on the master
8247	Sets the values in the master
8248	Get value from master
8249	Gets the values for the given section .
8250	Removes a value from the configuration .
8251	Removes a value from the master .
8252	Check if a section is a section .
8253	Get all values for a section
8254	Create a new file loader .
8255	Returns the class name for a short type .
8256	Make a cookie
8257	Execute the configuration .
8258	Determine the file for the given file name .
8259	Choose the bundle .
8260	Write the configuration file to the file .
8261	Creates a new Dumper instance .
8262	Converts a string to a file .
8263	Read session data from storage
8264	Get routes .
8265	Sort an array .
8266	Set the offset of the stream .
8267	Gather data .
8268	Put content to file
8269	Returns a new options reader .
8270	Run a route .
8271	Gather the middleware .
8272	Flatten an array .
8273	Load configuration files .
8274	Get a slice of the middleware .
8275	Parse stage string .
8276	Execute a command .
8277	Sets the default argument .
8278	Get PHP binary executable
8279	Returns the executable binary .
8280	Runs the command .
8281	Returns the default input definition .
8282	Builds an array of routes .
8283	Adds a route to the node tree .
8284	Get the segment matcher .
8285	Create filesystem manager .
8286	Create a CachedFactory instance
8287	Returns the number of executed statements .
8288	Returns the memory usage of the statement .
8289	Performs a call on the given method .
8290	Resolves an alias .
8291	Checks if the pattern matches the given pattern .
8292	Create TwigEngine instance
8293	Extend view factory .
8294	Extend the engine resolver .
8295	Create twig environment .
8296	Create twig loader .
8297	Parse data .
8298	Create a rule .
8299	Creates a validator validator .
8300	Create a chainable validators .
8301	Parse string .
8302	Parse parameters .
8303	Start the server .
8304	Stop the web server .
8305	Get address from pid file
8306	Check if the pid file is running .
8307	Creates a PHP process .
8308	Returns all registered listeners .
8309	Remove a listener from the pattern pattern .
8310	Checks if the subject contains wildcards .
8311	Add a listener pattern .
8312	Reads mandatory options .
8313	Build multidimensional array .
8314	Get prepared response .
8315	Get the response .
8316	Get the displayer .
8317	Gets the filtered list of available filters .
8318	Gets the first filter from the request .
8319	Add routes to route
8320	Add a new address to the mail .
8321	Creates a new AssetsRenderer instance .
8322	Register base collectors .
8323	Register collector .
8324	Extend the event manager .
8325	Create session manager .
8326	Create route dispatcher .
8327	Creates a router instance .
8328	Create a UrlGenerator .
8329	Detect the console environment .
8330	Get the environment argument .
8331	Displays a JS asset .
8332	Create Toml builder from array
8333	Process array of arrays .
8334	Returns a pretty string representation of an entity .
8335	Returns a list of paths for the given twig .
8336	Build the table rows .
8337	Get the Whoops instance
8338	Add where clauses to route .
8339	Merge group attributes .
8340	Convert an action to a controller action .
8341	Prepend the namespace to the namespace .
8342	Prefix a URI .
8343	Update the group stack .
8344	Creates a sanitizer .
8345	Add before bootstrapping callback
8346	Add a callback to the callback .
8347	Bootstrap all bootstraps .
8348	Call the callbacks .
8349	Generate session id
8350	Merge new flash flash .
8351	Load session data .
8352	Reads data from the database .
8353	Write the metadata to the handler .
8354	Resolve current page
8355	Safely secure input
8356	Extend event manager .
8357	Returns all files found in the given directory .
8358	Get twig files .
8359	Validate a template
8360	Display details .
8361	Display twig files .
8362	Parse middleware group .
8363	Checks for mandatory options .
8364	Get configuration dimensions .
8365	Validate validators .
8366	Check deprecated options .
8367	Register a resource .
8368	Get resource uri .
8369	Get resource wildcard .
8370	Get resource prefix .
8371	Add a resource .
8372	Get a nested resource URI .
8373	Get resource action .
8374	Get resource route name .
8375	Slice the given stage .
8376	Get the middleware middleware .
8377	Finds all files in the given array .
8378	Get the IP address .
8379	Check if IP address is valid .
8380	Get the first IP address from the server .
8381	Set the domain .
8382	Validate middleware .
8383	Validate middleware .
8384	Create translation manager .
8385	Create a Schedule instance
8386	Returns the computed data for the given index .
8387	Create a Swift mailer .
8388	Create a new mailer .
8389	Set global address .
8390	Create tooltip group
8391	Create tabular tabs
8392	Create a table
8393	Create the dropdown menu .
8394	Generates metrics for the given data .
8395	Clone a variable
8396	Get the cloner instance .
8397	Returns a HtmlDumper instance .
8398	Append the given code .
8399	Append a new line
8400	Add extensions .
8401	Sort middleware .
8402	Move middleware to the middleware .
8403	Create aggregate driver .
8404	Create an emergency driver .
8405	Create a new Monolog .
8406	Create a new Monolog driver .
8407	Create a syslog driver .
8408	Creates an error logger .
8409	Creates a slack driver .
8410	Create a custom logger instance .
8411	Create a new Monolog driver .
8412	Add processors to Monolog .
8413	Create a new ServerRequest instance .
8414	Returns the singular form of the given value .
8415	Matches the case of the given value .
8416	Connect to local filesystem .
8417	Creates a new console instance .
8418	Merge a new array into an array .
8419	Format group suffix .
8420	Check if the environment file exists .
8421	Set environment file path .
8422	Get a Transport .
8423	Create a new transport .
8424	Check if the given transport is registered .
8425	Create a SMTP transport .
8426	Create a MailgunTransport .
8427	Creates a SparkPostTransport .
8428	Create a SESTransport .
8429	Creates a repository instance .
8430	Update the route tree .
8431	Register console events .
8432	Extend Twig environment .
8433	Register TwigioTwig extension .
8434	Returns all allowed HTTP methods .
8435	Add a route .
8436	Checks if the stream is a pipe .
8437	Register a mime type .
8438	Register parser .
8439	Parse the payload .
8440	Returns a Parser instance .
8441	Returns the format for the given payload .
8442	Set up the configuration
8443	Get request duration .
8444	Stop a measure .
8445	Add a metric .
8446	Identify an exception .
8447	Generate a UUID4 string .
8448	Set headers .
8449	Validates HTTP protocol version .
8450	Checks if array contains strings .
8451	Filter header values .
8452	Get the retry time .
8453	Get the Invoker instance .
8454	Creates a new configuration value .
8455	Extend cache item .
8456	Extend a CacheTraceableCache instance .
8457	Get value from environment variable
8458	Parse parameter .
8459	Replaces the parameter with the given parameter key .
8460	Create table .
8461	Get the PDO connection .
8462	Connect to PDO .
8463	Get the list of files .
8464	Render the HTML into HTML .
8465	Get the modified time of the asset .
8466	Execute the call .
8467	Remove a scheduled cron .
8468	Extend log manager .
8469	Extend profiler .
8470	Import a DOMDocument from a DOMDocument .
8471	Loads a DOM document from a file .
8472	Loads an XML document from a string .
8473	Converts a PHP string to a PHP number .
8474	Validate a DOM document .
8475	Converts a string to a string .
8476	Checks if the entry is a header .
8477	Add references to the entry
8478	Process obsolete entry .
8479	Process previous entry
8480	Extract multiple lines from a single line .
8481	Extract headers from headers .
8482	Check if a file exists .
8483	Set the error status .
8484	Set the stream or file .
8485	Validate the stream .
8486	Mock a service
8487	Parse a command expression .
8488	Parse input token .
8489	Parse a single option .
8490	Extract description from token .
8491	Validate cookie name .
8492	Validate cookie value .
8493	Set a value in the scope .
8494	Get the list of recipients .
8495	Creates a MongoDB driver .
8496	Create a Redis cache driver .
8497	Creates a PredisCachePool .
8498	Create a filesystem cache driver .
8499	Creates a memcached driver .
8500	Create memcache driver .
8501	Get data collector .
8502	Compile routes .
8503	Returns the route class for the route .
8504	Compile route tree .
8505	Compile route http method .
8506	Compile the disallowed http method .
8507	Compile the found route .
8508	Get debug processor .
8509	Get the count of errors .
8510	Groups log levels .
8511	Get the listener .
8512	Bind an event to the dispatcher .
8513	Unbind all events .
8514	Create regex pattern .
8515	Returns the value of the given key .
8516	Set an item at the given key .
8517	Process parameters .
8518	Process parameter .
8519	Renders the given exception .
8520	Render editor editor .
8521	Render exception trace .
8522	Returns the trace of the given exception .
8523	Get the frames from the given exception .
8524	Format arguments .
8525	Get lines from a file .
8526	Get the contents of a file .
8527	Normalize a path .
8528	Resolve a binding .
8529	Resolve a class .
8530	Resolves a method .
8531	Resolve parameter .
8532	Resolve parameters .
8533	Get reflection method .
8534	Check if value is a function .
8535	Merge the parameters into the array .
8536	Writes the contents of a file .
8537	Put the contents of a file .
8538	Update a stream .
8539	Decrypt a stream
8540	Encrypt a stream .
8541	Decrypt a string
8542	Encrypt a string
8543	Get stream from string
8544	Creates a TransportFactory .
8545	Create MailManager instance
8546	Gets the version number from the XML document .
8547	Get the schema for the xliff version .
8548	Fixes the location of the given schema .
8549	Parse visibility .
8550	Sanitize data .
8551	Run global sanitizers .
8552	Sanitize a field .
8553	Execute sanitizer .
8554	Resolve callback .
8555	Resolve a string .
8556	Creates a new command .
8557	Returns the default values for the given callable .
8558	Check if a callable is valid .
8559	Checks if a callable is a static callable .
8560	Create a cookie jar .
8561	Convert a value to a DOM element .
8562	Add a node .
8563	Add a collection node .
8564	Create a DOM element .
8565	Creates a new object class .
8566	Get all registered listeners .
8567	Get all registered listeners .
8568	Validate the same site .
8569	Normalizes the expiration time .
8570	Normalize domain .
8571	Normalize path .
8572	Returns the timestamp of the expiration time .
8573	Start a callable .
8574	Applies the given translation .
8575	Extract helpers from string
8576	Apply filters .
8577	Log a translation .
8578	Collects messages .
8579	Display files .
8580	Displays a JSON file .
8581	Get files from a file or directory .
8582	Get stdin input .
8583	Returns a recursive iterator over the given directory .
8584	Validate an event name .
8585	Converts a number to bytes .
8586	Converts a number to a number .
8587	Get config from config
8588	Create a new instance .
8589	Add an extractor .
8590	Create alias loader .
8591	Get the cache path .
8592	Push a command to the queue .
8593	Checks if the given command is queued .
8594	Create a session driver .
8595	Create a new migration driver .
8596	Create a session based on the driver .
8597	Builds a session .
8598	Builds an encrypted session .
8599	Parse action action .
8600	Get first item in array
8601	Parse a note element .
8602	Converts content to UTF - 8 charset .
8603	Add tags to array
8604	Create a LogManager instance .
8605	Prompts to a production .
8606	Get default confirmation callback .
8607	Inject profiler .
8608	Collect data .
8609	Create a template
8610	Create a profile .
8611	Parse a log level .
8612	Start the session .
8613	Stores the current URL .
8614	Collect garbage collection .
8615	Add a cookie to the response .
8616	Create a response from a template
8617	Find a template file .
8618	Normalize filename .
8619	Parse a view .
8620	Add content to message .
8621	Send a Swift message .
8622	Sends a message to the queue .
8623	Create a message .
8624	Build a message builder .
8625	Create a view of a view .
8626	Handle a route .
8627	Prepare URI path .
8628	Generate route file .
8629	Generate route directory .
8630	Returns the path for the given file .
8631	Checks if the given options are valid .
8632	Get parser .
8633	Get a file .
8634	Require a file .
8635	Create a link
8636	Set directories .
8637	Add a directory .
8638	Import a file .
8639	Add a messageCatalogue .
8640	Set the fallback for the given language .
8641	Returns the fallback for the given language .
8642	Add presenter .
8643	Check if there are more pages .
8644	Returns the display address .
8645	Find front controller .
8646	Find hostname and port
8647	Find the best available port
8648	Escape a string .
8649	Returns a sorted array of data .
8650	Create an append stream .
8651	Parse tokens .
8652	Seek the next token .
8653	Get the value from the token iterator .
8654	Create a TraceablePDecor .
8655	Decrypt the cookie .
8656	Encrypt the response .
8657	Create a new cookie .
8658	Register a command .
8659	Get console instance .
8660	Initialize project directories .
8661	Find the path for a named path .
8662	Get the namespaces for a view .
8663	Finds the view for a given path .
8664	Returns a list of possible view files .
8665	Get information about the event .
8666	Render the set cookie header .
8667	Extend Twig environment .
8668	Get all messages .
8669	Add a message .
8670	Alias for middleware .
8671	Get logs from a socket .
8672	Handle view exception .
8673	Returns an ErrorException .
8674	Get the cache path .
8675	Ensure statical proxy exists .
8676	Format statical proxy stub .
8677	Register Markdown engine .
8678	Clean the export string
8679	Add tcomment to output
8680	Add references to the output .
8681	Add flags to output .
8682	Adds the previous entry to the output .
8683	Add a msgid to output
8684	Adds an entry to the output .
8685	Add messages to output
8686	Add headers to output
8687	Get pagination links
8688	Creates a cache connector .
8689	Ensure the user is correct .
8690	Checks if the expression matches the given expression .
8691	Run command in foreground
8692	Runs the command .
8693	Call before callbacks
8694	Call after callbacks
8695	Returns a function that evaluates the time interval between two dates .
8696	Checks if the given startTime is a midnight midnight .
8697	Merge two matchers .
8698	Optimize matchers .
8699	Optimize a regular expression .
8700	Optimize matchers .
8701	Creates a HtmlDisplayer .
8702	Creates a ViewDisplayer instance .
8703	Creates a new WhoopsPrettyDisplayer instance .
8704	Get number of recipients .
8705	Bootstrap the bootstrap .
8706	Handle request .
8707	Render an exception .
8708	Parses the request and returns the response .
8709	Compile parameters .
8710	Set the value of an array
8711	Get the invoker .
8712	Bind a plain binding .
8713	Bind a service .
8714	Binds a singleton .
8715	Resolve a plain binding .
8716	Resolve service .
8717	Resolve a singleton instance .
8718	Extend the resolved resolved instance .
8719	Returns the contextual binding format .
8720	Gets the message ID from the response .
8721	Converts an array of emails to an array .
8722	Get the MIME part of a message .
8723	Get message payload .
8724	Process recipients .
8725	Process message parts .
8726	Process headers .
8727	Checks if the command is valid .
8728	Returns the extension for the given path .
8729	Get a view .
8730	Returns true if the string ends with the given needle .
8731	Render cookie header .
8732	Creates a list of cookies from a string .
8733	Set the error .
8734	Set the exit code
8735	Converts a route to a route .
8736	Prepare route path .
8737	Checks if route is required .
8738	Add the port and port to the URI .
8739	Replace route parameters .
8740	Replace the parameters with the given parameters .
8741	Add query string .
8742	Get route query string .
8743	Parse WHERE clause .
8744	Gather the middleware .
8745	Get the list of disabled middleware .
8746	Adds a cookie to the collection .
8747	Splits a cookie pair .
8748	Inject content type .
8749	Trims the given string .
8750	Generate a random string
8751	Replace the first substring with the given string .
8752	Replace the last occurrences of the given string .
8753	Replace the string with the given position .
8754	Get verbosity .
8755	Run the command .
8756	Call a command .
8757	Call a command .
8758	Get a single argument .
8759	Get option value .
8760	Ask a question .
8761	Ask a question .
8762	Ask a question .
8763	Render a table
8764	Write a string to the output .
8765	Prints a message .
8766	Output a comment .
8767	Print a question .
8768	Outputs an error message .
8769	Prints a warning message .
8770	Configure the definition .
8771	Specifies the arguments .
8772	Get the submission id from the response .
8773	Get recipients .
8774	Render template .
8775	Add a warning .
8776	Report an exception .
8777	Add transformer .
8778	Handle an error .
8779	Handle shutdown shutdown .
8780	Register exception handler .
8781	Register shutdown handler .
8782	Prepare an exception .
8783	Returns the transformed exception .
8784	Returns the log level for the given exception .
8785	Determine if the given exception should be thrown .
8786	Register a Dumper .
8787	Dump data to a string
8788	Returns a Dumper instance .
8789	Returns a string representation of an entity .
8790	Gets the parameters for the given parameter .
8791	Converts a code point to UTF - 8 .
8792	Register a queueing dispatcher .
8793	Optimize route tree
8794	Extract the common parent node from two nodes .
8795	Returns a string representation of the query .
8796	Try to open a file .
8797	Create stream for given resource .
8798	Copy a stream to a string .
8799	Copy a stream to a stream .
8800	Reads a line from a stream .
8801	Set default path and domain .
8802	Get the path and domain .
8803	Get a pretty page .
8804	Update the host from the URI .
8805	Filter the HTTP request .
8806	Creates a UriInterface instance .
8807	Remove extension from path
8808	Changes the file extension .
8809	Create a CacheManager instance
8810	Determine if a mock instance is received .
8811	Resolve static proxy instance .
8812	Check if the instance is a mock instance .
8813	Inflect the given segment .
8814	Sets the response .
8815	Set content disposition .
8816	Set the last modified time .
8817	Returns a new cookie with the given value .
8818	Describes the command .
8819	Describes commands .
8820	Get names sorted by name .
8821	Create a table tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepare server params
8825	Get parsed body .
8826	Export a value .
8827	Creates a connection with the given key .
8828	Get cache config .
8829	Adapts a filesystem adapter .
8830	Parse route pattern .
8831	Generates a regular expression .
8832	Get the invoker .
8833	Check if an object exists .
8834	Get the target language from a file .
8835	Creates a connection connection .
8836	Create a Dump server .
8837	Check if a path exists
8838	Transforms a path .
8839	Get the contents of a directory .
8840	Filter contents by type
8841	Checks if the token is valid .
8842	Add a cookie to the response .
8843	Sanitize collected messages .
8844	Compute the count of messages .
8845	Get sorted messages .
8846	Adds a stream to the stream .
8847	Close the stream .
8848	Decode GIF image .
8849	Decode the extension .
8850	Decode image descriptor .
8851	Decode image data .
8852	Sets the order direction .
8853	Returns the list of all available items
8854	Loads the pagination
8855	Set cities from array
8856	Sets the PSTNNNetworks from an array .
8857	Loads the network networks .
8858	Loads all cities
8859	Get all countries .
8860	Get a city
8861	Pad a string with padding
8862	Get all countries
8863	Update all the networks
8864	Updates the networks
8865	Create a new mapping .
8866	Decode the delay .
8867	Returns true if the color is transparent .
8868	Decode proposal method
8869	Returns the size of the image .
8870	Returns the offset of the offset
8871	Set offset
8872	Get the country
8873	Convert this object to an array .
8874	Convert an array to a map
8875	Creates a new instance from an array .
8876	Creates a new DID number .
8877	Generate unique hash
8878	Generate auth string
8879	Load the call history .
8880	Performs a soap call .
8881	Get frame by index
8882	Add offset to the frame
8883	Add a size to the frame
8884	Returns the number of loops .
8885	Checks if the current screen is a global color table .
8886	Count the number of colors .
8887	Get the background color index
8888	Add a new frame to the first frame
8889	Creates a new frame with the given property .
8890	Convert object to array
8891	Get all balances
8892	Get balances array
8893	Get balances list
8894	Change the amount of funds .
8895	Synchronizes the prepaid balance .
8896	Set canvas size
8897	Set the canvas from the decoded data .
8898	Create a frame from a GIF resource .
8899	Encodes the screen .
8900	Builds the logical screen descriptor .
8901	Builds the network extension .
8902	Builds a frame .
8903	Build the graphic control extension .
8904	Builds the image descriptor .
8905	Create a DID number .
8906	Change autorenew flag
8907	Renew customer .
8908	Reload service details
8909	Updates the mapping .
8910	Generate unique hash
8911	Checks if the target IP is in the range .
8912	Get parameter value .
8913	Link a meta service
8914	Set meta data for a service .
8915	Add a metadata for a service .
8916	Remove a service .
8917	Release a service .
8918	Resolve a service .
8919	Creates a service instance from a factory .
8920	Resolve service provider .
8921	Register service provider .
8922	Bind a factory .
8923	Bind a class to the container .
8924	Register a factory .
8925	Binds a shared service .
8926	Returns the type of a service .
8927	Add a new argument .
8928	Add arguments from array
8929	Resolve the arguments .
8930	Create a new instance
8931	Sets the tokens .
8932	Returns the current token .
8933	Returns the next token .
8934	Skip token of given types .
8935	Returns a list of tokens .
8936	Gets all tokens of a given type .
8937	Gets all tokens from the current token .
8938	Errors an exception .
8939	Parse a child node .
8940	Parse the parser .
8941	Sets the container name .
8942	Add a service definition .
8943	Add services to the container .
8944	Add a service definition .
8945	Import a namespace .
8946	Validate a service builder string .
8947	Generates a normalized service name .
8948	Generates the class .
8949	Get resolver method name
8950	Generates the arguments for the given service arguments .
8951	Generate meta data
8952	Generates the resolver types .
8953	Generates the resolver methods .
8954	Generate resolver methods .
8955	Creates a ValueNode from a Token .
8956	Sets the type of this node .
8957	Generate the map for the package .
8958	Returns the value of the token .
8959	Is this token?
8960	Checks if a key exists .
8961	Add a value to the array .
8962	Convert to native array
8963	Returns the next token .
8964	Returns all tokens .
8965	Display the project .
8966	Execute command
8967	Backup database backup .
8968	Pull the repository
8969	Copy environment variables
8970	Execute composer command .
8971	Run npm command .
8972	Seed the database .
8973	Deploy the deployment .
8974	Resolve a service .
8975	Sets the cache directory .
8976	Create a container .
8977	Handle webhook request .
8978	Import container namespaces .
8979	Check if path exists .
8980	Get the code from a container
8981	Get the code from the namespace .
8982	Parse container file .
8983	Handle the scope .
8984	Handle an import statement .
8985	Handle parameter definition .
8986	Create service arguments .
8987	Handle a service definition .
8988	Creates a new Definition instance .
8989	Add a method call to the service definition .
8990	Add a method call to the service definition .
8991	Add meta data
8992	Check if the current user is origin .
8993	Check if the request is authenticated .
8994	Sets the value of the parameter .
8995	Returns the name of the given type .
8996	Returns a string representation of the event .
8997	Send a POST request .
8998	Set the type id .
8999	Returns the end of the period .
9000	Get the points as a string
9001	Gets the GPX XML .
9002	Collect the response data .
9003	Get all models .
9004	Get AJAX payload
9005	Get the callback for a callback .
9006	Run a callback .
9007	Sanitize a handle .
9008	Validate all validation rules .
9009	Validate a single value .
9010	Set the size of a device .
9011	Add a reset device .
9012	Returns the size of a device .
9013	Builds the classes .
9014	Checks if a user has a given role .
9015	Renders the header .
9016	Generate a column
9017	Walk the current position
9018	Begin a row
9019	Get column resets .
9020	Get the index .
9021	Migrate legacy content .
9022	Register a handle .
9023	Handle AJAX request
9024	Add a callback to the handler
9025	Add validation rules .
9026	Handle a callback .
9027	Get the response type .
9028	Sends the response headers .
9029	Send the response body
9030	Get the content of a given URL .
9031	Checks if the given method is supported .
9032	Change the visibility of a record .
9033	Check if the user has access to the user
9034	Builds the grid .
9035	Get column as string
9036	Add a column reset .
9037	Add column resets .
9038	Returns a list of column resets .
9039	Checks if the column resets for a given column .
9040	Returns a string representation of a column .
9041	Register a handle .
9042	Enqueue the scripts
9043	Get the nonce .
9044	Get grid grids
9045	Parses template
9046	Render the content element
9047	Get grid elements
9048	Create a row
9049	Create a column
9050	Builds grid columns
9051	Fetch a single columnset from a grid .
9052	Prepare custom classes .
9053	Builds the resets for the resets .
9054	Creates a grid by id
9055	Parses template template
9056	Check if the model is visible
9057	Load a form field .
9058	Get grid grids
9059	Prepare the container .
9060	Update subcolumns definition .
9061	Append the columnset id to the table
9062	Append column sizes
9063	Get all types .
9064	Gets the Grids for the given data container .
9065	Get the columns for a module
9066	Get column order orders .
9067	Get column numbers
9068	Get data from session
9069	Check if a key exists .
9070	Deletes a key .
9071	Load a key from the cache .
9072	Removes all keys from the session .
9073	Parse insert tag
9074	Get the walker for insert tags .
9075	Translate insert tags .
9076	Get encrypted params
9077	Get decrypted params
9078	Save dynamic data .
9079	Checks if the field is valid
9080	Save the field .
9081	Initializes the entity .
9082	Render the fields .
9083	Get field value
9084	Get field values .
9085	Check if the entity is valid
9086	Save entities .
9087	Assign dynamic fields to page .
9088	Get field by locale
9089	Get repeaters by locale .
9090	Get entities by field id
9091	Get entity scope
9092	Duplicate this entity .
9093	Initialize the group .
9094	Check if this field is valid
9095	Render group fields
9096	Save group fields
9097	Get group by rule
9098	Match rule .
9099	Initializes a group
9100	Get post data
9101	Sets the color of a point .
9102	Returns true if the given point is in the given coordinates .
9103	Returns the row of a row
9104	Returns a list of rows .
9105	Get the dot from the pixel map
9106	Compute the prime number of characters .
9107	Initialize the repeat fields .
9108	Creates a list of list controls .
9109	Create a list of field controls
9110	Create a field control
9111	Creates a list of repeater controls .
9112	Save data to RepeaterTranslation
9113	Get the display value for this group .
9114	Get a RepeaterValue object
9115	Get template name
9116	Returns the default template name .
9117	Initialize the default value
9118	Get the model s value .
9119	Get html id
9120	Get html name .
9121	Save model field .
9122	Save field .
9123	Save the repeater field .
9124	Get option value
9125	Move the current position
9126	Move the current position
9127	Checks if the task configuration is ancestor .
9128	Checks if the task configuration is descendant of this task .
9129	Reset the current state .
9130	Checks if the given input is valid .
9131	Configures the condition options .
9132	Configure condition options .
9133	Checks if a value matches the given value .
9134	Checks if a value is empty .
9135	Returns the duration of the interval .
9136	Contextualize options .
9137	Find the best task for the given branches .
9138	Get the input code .
9139	Checks if the given state is resolved .
9140	Get file path
9141	Sorts the process configuration .
9142	Handle the iterator from the input state .
9143	Flush the output .
9144	Returns the number of lines .
9145	Rewind the stream .
9146	Get transformed transformer code .
9147	Gets the dependency groups .
9148	Returns the main task group .
9149	Check for circular dependencies .
9150	Builds dependencies for task configuration .
9151	Sort dependencies .
9152	Resolve the task configuration .
9153	Initializes the task configuration .
9154	Flush the task configuration .
9155	Handle the process state .
9156	Checks the process configuration .
9157	Validate the model .
9158	Convert this object to an array
9159	Get model fields
9160	Unset the relation
9161	Formats a classname to a relation name .
9162	Add a relation to a model
9163	Adds a relation to the model .
9164	Adds a relation to the database .
9165	Get a collection of objects from the database
9166	Returns a collection of records .
9167	Finds a single model
9168	Count the number of records .
9169	Build select query
9170	Execute a select query
9171	Hydrate an object
9172	Deletes the model .
9173	Update the model .
9174	Insert data into database
9175	Set the current memory
9176	Removes the session .
9177	Get a model by its primary key .
9178	Removes a model from the database .
9179	Returns the index of the model .
9180	Save all elements .
9181	Prefix a WHERE clause
9182	Prefix order by table name
9183	Get the definition for a MySQL type .
9184	Register a table .
9185	Create a simple query object
9186	Create a complex query object
9187	Get model model
9188	Install a table .
9189	Uninstall a table .
9190	Check if a table is installed .
9191	Fire a plugin event .
9192	Save a post .
9193	Get the foreign key .
9194	Parse default values .
9195	Create a new Query instance .
9196	Select the selected columns .
9197	Select single column .
9198	Select all records .
9199	Add an expression .
9200	Add a WHERE clause .
9201	Generate a WHERE tag .
9202	Add a nested WHERE clause .
9203	Add a where clause to the query .
9204	Add a WHERE clause .
9205	Add a date to the query .
9206	Adds a where clause to the query .
9207	Sets the order by the given column .
9208	Order by expression .
9209	Set group by column
9210	Adds a group by expression .
9211	Creates a join between two tables .
9212	Join a subquery .
9213	Sets paginate results
9214	Iterate over the results
9215	Set relation relations .
9216	Parses a nested nested array .
9217	Assign a value to an array
9218	Make a limit tag .
9219	Builds the SQL query
9220	Update meta cache .
9221	Find record by primary key .
9222	Find all records in the table .
9223	Find a model by primary key .
9224	Find a model by primary key .
9225	Get or create a new model .
9226	Create a new model .
9227	Update an existing model .
9228	Handle eager loading .
9229	Determine eager load relations .
9230	Checks if the given operator is valid .
9231	Prepare a column
9232	Escape the value of a column .
9233	Configure the database .
9234	Get column value
9235	Create a new record
9236	Set the ORDER BY clause
9237	Add an ORDER BY clause .
9238	Set all columns .
9239	Build a map of models for the given models .
9240	Save a comment .
9241	Get default argument
9242	Execute query
9243	Parses the results .
9244	Parse a select query
9245	Parse the order .
9246	Parse pagination parameters .
9247	Checks if two numbers are equal .
9248	Checks if two values are different .
9249	Fetch all models from the database
9250	Delete records from database
9251	Updates an existing record .
9252	Get total number of pages
9253	Gets the pagination of the query .
9254	Returns the number of models found in the database .
9255	Returns the number of models that have been fetched .
9256	Returns true if the model has a given offset .
9257	Set an array of models
9258	Get a model by offset
9259	Build the query string .
9260	Boot the model .
9261	Boot the traits .
9262	Fill the given data .
9263	Set the attributes of the model .
9264	Apply a callback to the given attribute .
9265	Checks if a column is fillable
9266	Sets an attribute value .
9267	Set raw attribute .
9268	Get attribute value
9269	Get raw attribute .
9270	Get attribute value .
9271	Get attribute from array
9272	Get all relations .
9273	Get a relation .
9274	Set a relation value .
9275	Get the value of a relation .
9276	Refresh the model .
9277	Get dirty attributes .
9278	Get an object by its primary key .
9279	Create a new instance from a query .
9280	Get data from the database .
9281	Checks if the cache is cached .
9282	Update a record .
9283	Save the model .
9284	Save foreign relations .
9285	Save loaded relations .
9286	Saves the model .
9287	Saves the current model .
9288	Finish the model .
9289	Deletes the model .
9290	Create multiple models .
9291	Fire a model event .
9292	Register a model event .
9293	Get data to cache .
9294	Register global scope .
9295	Remove all scope scopes .
9296	Create a new relation with relations .
9297	Returns an array of all the attributes .
9298	Gets the comparison .
9299	Get the value of this clause .
9300	Get row by primary key
9301	Get column by row key
9302	Get a query by a column .
9303	Returns the number of rows in the database .
9304	Insert data into database .
9305	Update a row
9306	Delete a row
9307	Delete many records .
9308	Generate an exception from the database .
9309	Save the given term .
9310	Create a query object .
9311	Fetch results from eager load
9312	Add new values to the query
9313	Set the value of a parameter
9314	Sets a select query .
9315	Reset fields .
9316	Update a table .
9317	Delete a table .
9318	Insert a table into the database .
9319	Set the FROM statement .
9320	Adds a join to the query .
9321	Adds a condition to the query .
9322	Add OR WHERE condition
9323	Reset order by name
9324	Set limit limit
9325	Reset the limit
9326	Register trash support .
9327	Get the results from the database .
9328	Load a model from cache .
9329	Load a collection from cache .
9330	Cache results .
9331	Cache collection .
9332	Cache a single model .
9333	Register cache events .
9334	Save a user .
9335	Set the last updated timestamp .
9336	Get container parameters .
9337	Check if container is cacheable
9338	Boot the container .
9339	Load container configuration .
9340	Build the column name for a table .
9341	Save a collection of values .
9342	Persist old models .
9343	Persist the model .
9344	Create a new model .
9345	Initializes the authentication token .
9346	Create a new model .
9347	Convert an asset to an absolute path
9348	Builds the output of an asset .
9349	Parse a CSS file
9350	Send a message
9351	Get all messages from a query .
9352	Returns the number of documents in the collection .
9353	Receives a message .
9354	Send a message .
9355	Verify sort fields
9356	Add a message .
9357	Get messages for a given type .
9358	Import issues .
9359	Get an item by its identifier .
9360	Check if an item exists .
9361	Extend a service .
9362	Register service provider .
9363	Add a service tag .
9364	Finds all services tagged by a tag .
9365	Boot the application .
9366	Initializes the bundles .
9367	Get kernel parameters .
9368	Validate content .
9369	Validate the given content .
9370	Validate the given content .
9371	Get asset container .
9372	Outputs javascript assets .
9373	Output CSS .
9374	Get assets .
9375	Renders an array of assets .
9376	Check if asset is valid .
9377	Creates a PostValidator instance .
9378	Creates a new instance of XSDRs .
9379	Creates a new XSltRetriever .
9380	Creates a new Certificator instance .
9381	Create a CFDIReader .
9382	Handle a command .
9383	Sets a cookie
9384	Get cookie value
9385	Returns the first value matching the given closure .
9386	Check if a password is valid .
9387	Retrieve a node by path .
9388	Get the value of a node .
9389	Appends a child node to the parent .
9390	Populate a node .
9391	Retrieves the node by path .
9392	Checks if the given value is required .
9393	Adds queries to the database .
9394	Add timers .
9395	Get file size
9396	Append a validator .
9397	Remove a validator .
9398	Get a validator .
9399	Create a command .
9400	Run all the files .
9401	Runs a file .
9402	Authorize a user .
9403	Check if user is logged in .
9404	Logs a user .
9405	Logout the user .
9406	Add constraints .
9407	Validate input .
9408	Returns a redirect response .
9409	Get the path of the file .
9410	Get message by index
9411	Generate custom post type name
9412	Returns a list of Twig functions .
9413	Resolve a command .
9414	Setup the configuration .
9415	Calculates the sum of nodes .
9416	Get a value from the input .
9417	Sets the sequence position .
9418	Generate the taxonomy name .
9419	Redirects to the router .
9420	Register commands .
9421	Get the metadata for a bundle .
9422	Get the metadata for a namespace .
9423	Find the namespace for the given class .
9424	Add an asset .
9425	Render a view .
9426	Save a cache value
9427	Loads content from XML
9428	Remove all nonSatNS schema locations .
9429	Removes all nonSatNS nodes .
9430	Removes all namespaces from the document .
9431	Initialize post data .
9432	Binds the registry items .
9433	Determine the name of the file name .
9434	Initialize the context .
9435	Render the template .
9436	Loads all config files .
9437	Add a route .
9438	Adds a section to the router .
9439	Adds a group to the router .
9440	Start a block .
9441	Stop the block .
9442	Outputs a block .
9443	Create a controller .
9444	Instantiate a controller .
9445	Validate url
9446	Finds a template .
9447	Set application entity manager
9448	Set application connection
9449	Render a template
9450	Create a form element
9451	Add data transformer .
9452	Get a single segment .
9453	Get market data .
9454	Perform an account .
9455	Prepare attributes .
9456	Add extra extra data .
9457	Fetch an object
9458	Add a dialog to the dialog
9459	Get a connection instance
9460	Begin a transaction .
9461	Loads the DOM node .
9462	Render the HTML document .
9463	Connect to the server
9464	Enable monitoring .
9465	Set the background color
9466	Sets the image
9467	Sets the image id .
9468	Sets the image focus
9469	Set the image focusid
9470	Add a link
9471	Get config value .
9472	Set config value
9473	Returns translated translation .
9474	Get an array of values .
9475	Remove styles from a string
9476	Create a new redirect .
9477	Get the number of numbers .
9478	Returns an instance of the driver
9479	Load the DOMink .
9480	Creates a new frame .
9481	End frame .
9482	Redirect to a link
9483	Append XML to DOM .
9484	Build a redirector .
9485	Set border .
9486	Declare font
9487	Handles an image
9488	Add an image to an image
9489	On image quality
9490	Get redirect for given request .
9491	Get redirected urls .
9492	Get cached redirects .
9493	Sets the icon .
9494	Sets the selected icon .
9495	Invoke a search .
9496	Sets the media file
9497	Get limit string
9498	Returns a string representation of the update string .
9499	Get parameter value
9500	Get a parameter value .
9501	Gets a POST parameter .
9502	Restore request parameters
9503	Redirect a list of arguments
9504	Create a link string
9505	Create absolute link arguments .
9506	Increment the current position
9507	Increment the current position
9508	Increment the current position
9509	Set current position
9510	Set the scale .
9511	Set the valign
9512	Sets the horizontal alignment
9513	Sets the alignment of this cell .
9514	Sets the size of the image
9515	Sets the size of the image .
9516	Sets the size of the image
9517	Add a new button
9518	Add a gap .
9519	Get the list of HTTP responses .
9520	Get all status codes .
9521	Fatal error handler
9522	Compute the error message .
9523	Compute short message .
9524	Handle the request .
9525	Upload a file
9526	Get current request URI
9527	Calculates the position of the given position .
9528	Returns the aligned position of the given position .
9529	Get the position of an element
9530	Builds a select query
9531	Quote data
9532	Reset all balances .
9533	Delete all asset types
9534	Configures the class loader .
9535	Get service IDs
9536	Get the return type of a service
9537	Executes the transaction .
9538	Get the balance entry .
9539	Get the hierarchy of the class .
9540	Change content type .
9541	Parse HTTP header .
9542	Convert a string to an array
9543	Builds an array of dimensions .
9544	Get asset types
9545	Validate asset type
9546	Returns the last date balance of the given type
9547	Check if strategy is valid
9548	Mutate a value
9549	Fetch a URL from a URL
9550	Returns the URL for the resource .
9551	Generate CSV file
9552	Parse CSV file
9553	Converts a CSV file into a list of strings
9554	Backup a string
9555	Get all entities for a given asset type
9556	Get asset type id
9557	Get customer account by asset type
9558	Get system customer id
9559	Execute transaction .
9560	Build strategy key
9561	Parses and returns the response .
9562	Login action .
9563	Render a file
9564	Get asset types
9565	Send the response .
9566	Authenticate a response .
9567	Verify a token .
9568	Validate a URL .
9569	Register the client .
9570	Register the API token .
9571	Register the commands .
9572	Start a new session .
9573	Get all properties of a class .
9574	Set the status code .
9575	Parse a CSS string
9576	Find tokens in a list of tokens .
9577	Find the end of a quoted string
9578	Find the end of a URL
9579	Checks if a rule is valid .
9580	Merge words .
9581	Check for selectors .
9582	Get selectors .
9583	Parse tokens .
9584	Set current application key .
9585	Get current application key .
9586	Add acceptable Json type .
9587	Builds the query .
9588	Unpublish a post
9589	Save unpublish event .
9590	Check if post type is active
9591	Generate a hash
9592	Generate a secret for a given key .
9593	Verify a token
9594	Generate HTTP headers .
9595	Generate query data
9596	Get customer id
9597	Sets the fit .
9598	Returns a string representation of the manipulations .
9599	Creates a new account .
9600	Fill the object with the given values .
9601	Get the URI .
9602	Set user info
9603	Set port .
9604	Set path .
9605	Get a single segment
9606	Get query value
9607	Builds a list of tokens .
9608	Returns an array of aggregated values .
9609	Returns the configuration for the given strategy .
9610	Build the configuration .
9611	Creates a response .
9612	Execute a request
9613	Execute a request
9614	Prepare log id and admin id
9615	Validate transactions .
9616	Set headers .
9617	Set a header .
9618	Add a header .
9619	Remove a header .
9620	Add a prefix to the list of paths .
9621	Add a list of prefixes .
9622	Finds the file for the given class name .
9623	Find file with known suffix .
9624	Convert an object to an array
9625	Clean an array .
9626	Sets the given code .
9627	Initialize the URI .
9628	Initialize query params
9629	Parse uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Checks if the content type has a content type .
9633	Runs the templates .
9634	Dispatch command .
9635	Outputs a table
9636	Output an error
9637	Show help command .
9638	Get available commands .
9639	Creates a directory .
9640	Append the route to the file .
9641	Replace old file with new file
9642	Dispatch a request .
9643	Create a template response .
9644	Get page .
9645	Get the response .
9646	Build the response for a given URI .
9647	Get page for given URI .
9648	Returns the alias for the given URI .
9649	Display a single model .
9650	Create a new I18nMessage
9651	Add HTML tags to HTML .
9652	Run the request .
9653	Run CLI command .
9654	Register actions .
9655	Get Markdown Renderer instance
9656	Get blade views .
9657	Get migrations .
9658	Finds page by identifier
9659	Returns the page name for the given page identifier .
9660	Build meta data for a page .
9661	Get page tree
9662	Returns all pages for a given path .
9663	Success command .
9664	Loads messages from database .
9665	Send activation mail .
9666	Search rows by a given query .
9667	Render the template .
9668	Render an expression .
9669	Resolve expression path .
9670	Find all classes .
9671	Prepare configuration array .
9672	Returns the host name .
9673	Get the value of a key
9674	Display a single message .
9675	Update a message .
9676	Delete a message .
9677	Finds the model for the given message .
9678	List pages .
9679	Returns the parsed content .
9680	Returns the sorting property .
9681	Returns the URI of the URI .
9682	Get the URL from meta data
9683	Get the title
9684	Get API call .
9685	Builds the URL for the API .
9686	Handle response .
9687	Initializes the configuration .
9688	Profiler profiling .
9689	Get the template
9690	Returns the value for the given key path .
9691	Sets the root directory .
9692	Find all class reflections .
9693	Get the reflection class .
9694	Upload a media file .
9695	Insert media .
9696	Calculates the hours between two days .
9697	Get dirty data .
9698	Register a new entity .
9699	Get dirty fields .
9700	Add an identifier to the model .
9701	Get entity id
9702	Get tags
9703	Get real class name
9704	Configure the tab element factory .
9705	Deletes the content .
9706	Create title
9707	Render PDF .
9708	Render image .
9709	Hydrate data from data
9710	Hydrate a collection .
9711	Deserialize all data from an array
9712	Deserialize data .
9713	Guess the collection class name .
9714	Build sitemap .
9715	Returns the navigation for the given element .
9716	Returns the iterator for the given element id .
9717	Normalize the model .
9718	Get extra property
9719	Generate a random string
9720	Limits words in a string .
9721	Get all files in a directory
9722	Generate short description
9723	Checks if the given time slot is overlap .
9724	Fetch non overlapping time slots .
9725	Merge overlapping time slots .
9726	Get resource .
9727	Merge default parameters .
9728	Execute a request .
9729	Renders the backend view .
9730	Returns the navigation iterator .
9731	Get the grid iterator .
9732	Before saving the model .
9733	Processes the content definition .
9734	Update the media .
9735	Join the media .
9736	Upload media .
9737	Update data .
9738	List media media
9739	Renders a row
9740	Delete media .
9741	Set the attribute list .
9742	Returns the default serialized model .
9743	Create directories .
9744	Export views .
9745	Export controllers .
9746	Export routes .
9747	Checks if the package is valid .
9748	Copy plugins .
9749	Copy assets files .
9750	Copy less files .
9751	Get settings by category .
9752	Creates a new navigation .
9753	Create a new navItem .
9754	Loads a block .
9755	Get module .
9756	Serialize an object into an array .
9757	Get model name .
9758	Returns the class metadata for the given model name .
9759	Try to find the class metadata by id .
9760	Render page tree .
9761	Get the tree of pages .
9762	Remove cache from cache
9763	List all tags .
9764	Returns a list of tags .
9765	Add tags to tags
9766	Remove tags .
9767	Get tab parent options .
9768	Generate columns .
9769	Count the required separators .
9770	Create tab separators .
9771	Create tab element .
9772	Create tab element .
9773	Get stop element .
9774	Add an icon
9775	Get select options
9776	Get the status of a class
9777	Returns a list of available types .
9778	Get type label
9779	Returns a list of sorting order
9780	Find the value of the search text .
9781	Returns the next dropdown item .
9782	Get the current title
9783	Generate Active Field
9784	Create a router .
9785	Get an instance of the driver .
9786	Call the dispatcher .
9787	Call the dispatcher .
9788	Resolve dispatch dependencies .
9789	Get nested parameters .
9790	Find route attributes .
9791	Finds the restful route .
9792	Finds the resource route .
9793	Get alternative resource action .
9794	Dispatch a route .
9795	List all deliveries .
9796	Get the calculator .
9797	Get shipping method .
9798	Add route .
9799	Build resource schema .
9800	Update shipping address .
9801	Call the given method .
9802	Handle the fallback response .
9803	Handle response callback .
9804	Abort an exception .
9805	Checks if the response is a non - html response .
9806	Register an error handler .
9807	Get the options for an action .
9808	Deletes an item .
9809	Save a cache item .
9810	Outputs a message .
9811	Get a value from the cache .
9812	Set a value in the cache
9813	Set multiple values .
9814	Delete multiple keys .
9815	Check if a key exists .
9816	Get label
9817	Get full path name .
9818	Make a tree from a collection .
9819	Type command .
9820	Set resource members
9821	Load a PSR class .
9822	Set the account ID .
9823	Translate an exception .
9824	Get the console instance .
9825	Execute the request
9826	Get all constants .
9827	Returns a list of all the containers .
9828	Update a container properties .
9829	Check if a blob exists .
9830	Encodes a JWT .
9831	Decode a token
9832	Get the payload from the token .
9833	Parse a JWT token .
9834	Returns the expiration time .
9835	Create a new index
9836	Extracts the default value .
9837	Add previous button
9838	Add next button
9839	Get the value of a button
9840	Marshal an object .
9841	Check if value is an object .
9842	Checks if value is empty .
9843	Convert data to a Record .
9844	Parse the response
9845	Get a configurator instance .
9846	Check if a configurator exists .
9847	Get writer class name by format
9848	Get the writer for the given content type .
9849	Converts a date time to a string .
9850	Initializes the view .
9851	Reads a schema from a schema .
9852	Parse payload
9853	Write data to the stream .
9854	Returns a reader for the given content type .
9855	Get the writer for the given content type .
9856	Initialize the database .
9857	Clean up the database .
9858	Called after step .
9859	Initialize the Laravel client .
9860	Boot the application .
9861	Display a route .
9862	Display an action .
9863	Get the name of the action .
9864	Checks if the current route is equal .
9865	Checks if the current action is equal .
9866	Assert that a session has a value .
9867	Assert that the form has errors .
9868	Assert that a form error message is present .
9869	Log a user .
9870	Add a record to the database .
9871	Converts a value to a string .
9872	Get the number formatter .
9873	Recursively nest nested arrays .
9874	Flattens an array .
9875	Convert an array to an object
9876	Creates a new column .
9877	Builds the header view .
9878	Builds the cell view .
9879	Creates a new column .
9880	Checks if this column is a compound column .
9881	Get base data
9882	Get shipping data
9883	Get invoice data
9884	Send a request .
9885	Trims a string .
9886	Converts fqcn to block prefix
9887	Transforms a value .
9888	Parses a value .
9889	Add an unresolved column .
9890	Check if the file is valid .
9891	Resolves a file .
9892	Update the form .
9893	Update edit form .
9894	Update the edit form .
9895	Lock a record .
9896	Applies the configuration to the client
9897	Publish an item
9898	Loads a locale .
9899	Sends the request .
9900	Builds the URI from parts .
9901	Create a new user .
9902	Edit a user .
9903	Update a user .
9904	Delete a user .
9905	Create mpdf instance
9906	Add host header .
9907	Build a Guzzle request .
9908	Executes the callable chain .
9909	Check if a class exists .
9910	Run the queue .
9911	Ensure thread is running .
9912	Queue a request
9913	Publish multiple requests
9914	Returns the key for the given cursor .
9915	Rewind the collection .
9916	Returns an array of format objects .
9917	Set an array of options .
9918	Publish an item
9919	Performs a HTTP POST request .
9920	Publish an item
9921	Import headers .
9922	Get the protocol version .
9923	Validate data .
9924	Load translations .
9925	Sets the validator local .
9926	Get validation errors .
9927	Update the callbacks .
9928	Get the locked message .
9929	Determine if the current user is editing .
9930	Checks if an item exists .
9931	Sorts an array of items .
9932	Parse the birthday date .
9933	Returns the birthday date .
9934	Validate birthday .
9935	Parses a constant .
9936	Translate a constellation .
9937	Update permissions .
9938	Sync the ACL .
9939	List roles .
9940	Register a new role .
9941	Display a user .
9942	Register area .
9943	Create a form .
9944	Create menu .
9945	Find one object by criteria .
9946	Returns a new instance of the factory .
9947	Get the factory factory .
9948	Remove collection by criteria
9949	Removes one entity by criteria .
9950	Remove objects from the database .
9951	Refresh objects .
9952	Detach objects .
9953	Get supported method .
9954	Call the method on the given field .
9955	Run a manager action .
9956	Flushes an array of objects .
9957	Prepare a tag from the collection .
9958	Set pagination
9959	Set current page
9960	Update a permission .
9961	Get paginator .
9962	Finds a paginated by criteria .
9963	Bootstrap extension components .
9964	Boot the application .
9965	Loads the roles from the directory .
9966	Add validation validation .
9967	Save the model .
9968	Validate the model .
9969	Merge rules .
9970	Purge invalid attributes .
9971	Auto hash function .
9972	Disable filters .
9973	Disable a filter .
9974	Restore disabled filters .
9975	Restore a filter .
9976	Get actions column .
9977	Assigns a user to a user .
9978	Checks if the response is successful .
9979	Get current template name
9980	Create role form .
9981	Displays the edit form .
9982	Show user creation .
9983	Edit a user .
9984	Store user .
9985	Update user .
9986	Deletes a user .
9987	Save a user .
9988	Checks if the given path is within the current site .
9989	Returns the registered type .
9990	Returns the tag for the given visitor identifier .
9991	Get the timestamp field .
9992	Get the timestamp of the collection
9993	Execute the query
9994	Get the IDs of the collection .
9995	Returns the number of rows .
9996	Get the table name .
9997	Get the order by name
9998	Set the order by value .
9999	Get the conditions .
10000	Add a condition to the query .
10001	Set the join table
10002	Edit an ACL .
10003	Update the ACL .
10004	Set logger .
10005	Start the process .
10006	Stop the lock .
10007	Kill the lock .
10008	Add a condition to the query .
10009	Get the WHERE clause .
10010	Returns the number of rows in the table .
10011	Returns the first result of the query .
10012	Returns a list of all ids .
10013	Execute the query .
10014	Checks if the field has a type field .
10015	Get select fields .
10016	Get the modules .
10017	Merges a resource .
10018	Define all permissions .
10019	Assign a user to a user
10020	Remove a role from a user
10021	Create model .
10022	Edit model .
10023	Store a role .
10024	Update role .
10025	Destroy a group .
10026	Save a role .
10027	Import permissions .
10028	Get an ACL .
10029	Clear analytics data .
10030	Clear message data .
10031	Creates the application .
10032	Edit role .
10033	Scope roles .
10034	Get statuses .
10035	Get actions column .
10036	Render user roles .
10037	Modify an entity .
10038	Get the producer for a registered type .
10039	Register a producer .
10040	Register a producer .
10041	Get an object by ID
10042	Get object by id
10043	Add an object to the pool pool .
10044	Registers the given object .
10045	Returns the number of rows .
10046	Returns a Finder instance .
10047	Get select by type
10048	Returns the escaped field names .
10049	Returns the escaped order by the given type .
10050	Get the names of a given type .
10051	Recursively get trait names .
10052	Adapts a fieldset .
10053	Checks if the given control is checked .
10054	Prepares the active page entity .
10055	Set logins tracking tracking .
10056	Set the email tracking .
10057	Get the site path .
10058	Analyze a URL .
10059	Get basket category path
10060	Checks if two values are equal .
10061	Loads a row from the database .
10062	Returns a copy of this object .
10063	Reset a field
10064	Get old field value
10065	Set field value
10066	Insert data into database .
10067	Updates the database .
10068	Refresh the generated field values .
10069	Checks if the given value is valid .
10070	Generates a URI for a route .
10071	Store a role .
10072	Get field errors .
10073	Check if a field has an error
10074	Add an error
10075	Prepare product title
10076	Modify the contacts page
10077	Modify newsletter page
10078	Modify user registration .
10079	Disable an event subscriber .
10080	Restore event subscribers .
10081	Disable event listeners .
10082	Disable an event listener .
10083	Restore all event listeners .
10084	Restore disabled event listeners .
10085	Returns the class name of the event .
10086	Checks if the given subscriber class is an event subscriber .
10087	Returns an array of registered listeners .
10088	Get active user id
10089	Returns the user s active user .
10090	Generate cache key
10091	Generate cache keys .
10092	Send API request .
10093	Check if a key exists
10094	Get a value by key
10095	Get a value from an array
10096	Set a value
10097	Put a value into the collection
10098	Set the value of an item .
10099	Remove a value from the collection
10100	Remove a value from an array
10101	Set logger .
10102	Register services .
10103	Set mail configuration
10104	Returns the value of the given key .
10105	Convert a value to an array .
10106	Get page size .
10107	Register services .
10108	Validate the required fields .
10109	Get the instance instance
10110	Initialize the plugin .
10111	Loads the script
10112	Display notices .
10113	Register a notice .
10114	Displays a dismiss notice .
10115	Displays a notice .
10116	Displays a user .
10117	Displays a notification .
10118	Restore a notice .
10119	Restore a user .
10120	Restore a notification .
10121	Return a list of dismissed notices .
10122	Check if a notification is dismissed .
10123	Get a notice .
10124	Merge a raw item into an array .
10125	Recursively refine the collection .
10126	Include attachments .
10127	Get items from raw data
10128	Set the attachments .
10129	Parse attachments .
10130	Attach an attachment
10131	Attach an attachment .
10132	Merge two values into an array .
10133	Get response headers
10134	Get the card reference
10135	Get customer reference
10136	Returns the class name of the given class .
10137	Returns the namespace of a class .
10138	Determine if the given key exists .
10139	Initialize the mapping .
10140	Set translation data
10141	Reads a property .
10142	Default action .
10143	Run before action .
10144	Run after action .
10145	Append collection to collection .
10146	Append data to collection
10147	Prepend an entity to the collection .
10148	Checks if the entity has a property .
10149	Returns the last entity .
10150	Get element moved by offset
10151	Checks if a field has a given value .
10152	Search entity by field
10153	Removes the first element from the collection .
10154	Filter the collection of entities .
10155	Get collection by callback
10156	Splits the collection into a new collection .
10157	Returns a collection of entities .
10158	Splits the collection into chunks .
10159	Remove an item from the collection .
10160	Removes all values from the entity .
10161	Reverse the keys
10162	Get all values for a property .
10163	Bind a collection to the collection .
10164	Group by field name
10165	Prepare scopes .
10166	Parse scope arguments .
10167	Set variable type
10168	Register an annotation based on the given namespace .
10169	Convert string to camelCase
10170	Prepare data for insert
10171	Update data .
10172	Parse filter fields .
10173	Parse filter values .
10174	Convert data to object
10175	Get label .
10176	Get additional styles by type
10177	Get additional styles by type
10178	Returns the URL for this request .
10179	Convert data to array
10180	Configure model .
10181	Get the database connection .
10182	Import a field .
10183	Convert a string to a string
10184	Fire the job .
10185	Deletes the record .
10186	Returns the entity metadata .
10187	Flushes an entity .
10188	Find entity by id
10189	Clear all entities .
10190	Remove an entity
10191	Refresh an entity
10192	Get a repository by name
10193	Check if an entity is contained in the collection .
10194	Create a new entity instance .
10195	Process XCDR request .
10196	Performs a merge operation .
10197	Merges two lines
10198	Determine if the merged lines are added .
10199	Returns a merged list of lines removed .
10200	Notify a CDR record .
10201	Register the plugin .
10202	Applies configs to the container .
10203	Add env variables to app
10204	Pop a queue .
10205	Insert a job record .
10206	Request XCdrSetAttribute
10207	Convert string to string
10208	Create a new record .
10209	Read all records .
10210	Update a record .
10211	Destroy a record .
10212	Recycle a record .
10213	Count the number of records .
10214	Returns a proxy for the given key .
10215	Closes the log output .
10216	Load widgets .
10217	Load theme options .
10218	Called when an event is received .
10219	Add a child element .
10220	Create a new permission .
10221	Edit a permission .
10222	Update a permission .
10223	Delete a permission .
10224	Sets the adapter .
10225	Get the adapter type
10226	Wait for ready read .
10227	Get all channels .
10228	Get game list
10229	Convert data to array
10230	Convert data to an object
10231	Convert data to json
10232	Convert data to string
10233	Converts a string to an integer .
10234	Converts a string to a float
10235	Returns a boolean value .
10236	Generates the class for the given class .
10237	Find all properties of a class .
10238	Creates the closure of the class .
10239	Create the hydrate method .
10240	Update configuration .
10241	Checks if the given directory exists .
10242	Finds a page by attribute
10243	Finds elements by attribute value .
10244	Finds a page by option
10245	Finds a page by option
10246	Register widget .
10247	Register view parser .
10248	Register the launcher .
10249	Get a database driver .
10250	Get invalid result .
10251	Start timer .
10252	Subscribe to a signal
10253	Unregisters a signal .
10254	Get the value of the given value .
10255	Set primary key .
10256	Execute query
10257	Set properties .
10258	Strip the table .
10259	Select a server .
10260	Select a server by port
10261	Get a port by ID
10262	Get a server by name
10263	Get a server by its unique identifier .
10264	Create a new server
10265	Delete a server
10266	Start a server
10267	Stop the server .
10268	Get permissions list
10269	Get permissions for a given permission
10270	Get permission by name
10271	Get the name of a permission
10272	Get category by name
10273	Get permissions for a given permission
10274	Add a log message
10275	Login a user
10276	Logout the user
10277	Set the value of the current user .
10278	Get validator .
10279	Sets the curl content for the request .
10280	Parse a page result .
10281	Get common application attributes .
10282	Get option value
10283	Build an array of options .
10284	Execute a user .
10285	Ping the server
10286	Set attribute value
10287	Formats the currency .
10288	Formats the amount of money .
10289	Returns the rounded amount of the given amount .
10290	Splits the amount of shares .
10291	Prepares an elementset and inject it into a fieldset .
10292	Gets the user by access token .
10293	Run the controller .
10294	Search routes .
10295	Get request method
10296	Get all logs
10297	Converts a string to a human - readable string .
10298	Format a number of bytes .
10299	Get the codec name for the given codec .
10300	Get group type
10301	Get permission type
10302	Get log level
10303	Parse log entry
10304	Returns a list of available items
10305	Get trait traits .
10306	Call trait method
10307	Call all registered events .
10308	Get attribute labels .
10309	Get all attribute hints .
10310	Returns an array of ManiaScript objects .
10311	Fetch error message
10312	Fetches the reply from the ManiaScript
10313	Get user identity .
10314	Check if the user has identity .
10315	Restore the model .
10316	Get a user .
10317	Get a list of games for a user .
10318	Get all notices .
10319	Get a channel
10320	Escape the string .
10321	Unescape the ManiaScript
10322	Get team .
10323	Add a result to the container .
10324	Get a stream from a channel .
10325	Get a list of streams .
10326	Get featured streams .
10327	Get a list of streams for a given access token .
10328	Get a summary of all streams .
10329	Get the top of the top level
10330	Get the value of the element
10331	Resolve a TSDNS host
10332	Get configurables .
10333	Send text message
10334	Kick a client .
10335	Download the avatar
10336	Bind events to controller .
10337	Connect an event to the element
10338	Returns the value of a query parameter .
10339	Get base URI
10340	Request a command
10341	Wait for an event
10342	Prepare a command
10343	Get the host host
10344	List all installed extensions .
10345	Write extension configuration file .
10346	Set the parent menu .
10347	Get column columns
10348	Creates a Transcoder instance .
10349	Returns the first value of the given header .
10350	Sets the value for a given key .
10351	Get all notices .
10352	List all extensions .
10353	Performs curl request .
10354	Runs the task .
10355	Deactivate extension .
10356	Activate extension .
10357	Uninstall an extension .
10358	Run a task .
10359	Get client by name
10360	Download the icon
10361	Send text message
10362	Delete the channel .
10363	Encode a JWT .
10364	Sign a message
10365	Decode a JSON string .
10366	Commit the cache .
10367	Bootstrap the application .
10368	Creates a new channel group .
10369	Send text message
10370	Get the form class name .
10371	Get entity by id
10372	Get a collection of entities .
10373	Post action .
10374	Update an entity
10375	Delete an entity .
10376	Reads a file .
10377	Parse JSON string
10378	Parse a file .
10379	Normalize an ID
10380	Remove attributes from input array
10381	Set label
10382	Adds an element to the list .
10383	Get the top level window
10384	Remove an element
10385	Get element by id
10386	Loads the state of the model .
10387	Save the state of the application .
10388	Set data type
10389	Handler for channel creation
10390	Get localized versioned data
10391	Get localized data field
10392	Returns the versioned versioned data for the given package .
10393	Get package data
10394	Returns a human readable readable string .
10395	Prepare migration task .
10396	Build a task .
10397	Determine if the route matches the request .
10398	Parse regex route .
10399	Checks whether the given object is strict .
10400	Get the profiler
10401	Initializes the transport .
10402	Get the list of attributes .
10403	Get timestamp attributes .
10404	Evaluate attributes .
10405	Initialize base actions
10406	Called before the request
10407	This method is called when a request is received
10408	Read data from stream
10409	Send data to stream
10410	Restore database dump .
10411	Dump the database .
10412	Initialize menu
10413	Add a button to the menu
10414	Execute wxgets
10415	Populate the max value with the maximum value .
10416	Populate the numeric columns with the minimum value .
10417	Transforms a JSON string .
10418	Register the default configuration .
10419	Set file path
10420	Set post field .
10421	Set raw content .
10422	Resolve a concrete class .
10423	Binds a concrete instance .
10424	Get the concrete class .
10425	Dispatch an event .
10426	Get the type of a channel .
10427	Get the alignment of a channel .
10428	Add a permission to a channel .
10429	Remove a channel .
10430	Add a permission to a channel .
10431	Remove a permission from a channel .
10432	Get a list of files for a channel .
10433	Get client by ID
10434	Get a client by its unique identifier .
10435	Move a client to the client .
10436	Kick a client .
10437	Remove a client from a client .
10438	Get server group by id
10439	Get server group by name
10440	Add a server to a server group .
10441	Get the list of profiles
10442	Get channel group by id
10443	Get channel group by name
10444	Add a permission to a channel group .
10445	Reset a permet
10446	Upload an icon
10447	Create a new snapshot
10448	Get log view view
10449	Add a log message
10450	Sort client list
10451	Sort group list
10452	Sort file list
10453	Copy a server group .
10454	Get icon name
10455	Returns the class name of the ManiaScript .
10456	Get the HTML of the ManiaScript
10457	Filter the list of nodes
10458	Write a file to the cache .
10459	Returns the generated class name .
10460	Connect to the server .
10461	Disconnect to the stream
10462	Reads a line
10463	Checks if the given container is valid .
10464	Create a new role .
10465	Update role .
10466	Delete a role .
10467	Get a resource
10468	Get the category class for the current user .
10469	Get the icon icon
10470	Get the channel name
10471	Get the suffix flag
10472	Initialize file transfer
10473	Upload data to file
10474	Download file transfer
10475	Returns the session context .
10476	Get type manager
10477	Get database connection
10478	Remove a database connection
10479	Process security filters
10480	Dispatch request .
10481	Get request parameters
10482	Render a page
10483	Validate request
10484	Dispatch view .
10485	Redirect to the default module view
10486	Redirect user view
10487	Init user profile
10488	Get user preference
10489	Returns the default permissions for the given group .
10490	Get current view name
10491	Set current view name
10492	Get current view set
10493	Set current view set
10494	Set base path
10495	Get module path
10496	Sets the SQL for the given data .
10497	Checks if the given string is valid .
10498	Reads the metadata from XML
10499	Use this method to set the user account
10500	Send email
10501	Log an email
10502	Get information about a specific tag .
10503	Get the autoload library path
10504	Load Metadata class
10505	Get core file path
10506	Find the cache file in cache
10507	Fill person attributes .
10508	Set a job .
10509	Process all jobs .
10510	Checks if a given date is valid .
10511	Render the label
10512	Flattens a path .
10513	Get the configuration .
10514	Create a new curl request
10515	Store the response .
10516	Get plot data
10517	Render XYPlot .
10518	Get the mark of a mark
10519	Get font name
10520	Instantiate a new instance
10521	Get attribute value
10522	Set an attribute in the group .
10523	Returns the attribute in the group .
10524	Find or create a model .
10525	Get model .
10526	Generate a unique id
10527	Call all filters
10528	Add a hook .
10529	Check if a hook exists
10530	Call a hook
10531	Replace a hook with the given function .
10532	Returns the number of filters .
10533	Checks if the current hook is active
10534	Checks if a hook is called .
10535	Add a route
10536	Add middleware to the router .
10537	Run the application .
10538	Execute a singal execution .
10539	Set a value
10540	Get a raw definition .
10541	Encrypts the given value using the given key .
10542	Decrypt a value
10543	Get the default key
10544	Calculate arguments .
10545	Get the type of a string
10546	Add a new app .
10547	Get a sub route .
10548	Serialize this route .
10549	Unserialize data
10550	Returns the actual year of the given year .
10551	Get current time stamp
10552	Get the day of a given day .
10553	Returns the short name of the given day .
10554	Get the month name .
10555	Get short month name .
10556	Format datetime .
10557	Format a datetime .
10558	Register service services .
10559	Post section tree .
10560	Set owner .
10561	Remove comments .
10562	Minify CSS .
10563	Set global variables .
10564	Quote a string
10565	Splits a string into an array .
10566	Get a role by its name
10567	Add a role
10568	Checks if the user has a given role .
10569	Log error handler
10570	Handle exception handler
10571	Get output error message
10572	Get error backtrace
10573	Set name .
10574	Add a setting .
10575	Add a setting to the cache .
10576	Unset an offset
10577	Sets the sync state .
10578	Collect sync data .
10579	Create an expression context .
10580	Terminate the process .
10581	Registers a child execution .
10582	Called when a child execution is terminated .
10583	Sets the scope .
10584	Create a new execution .
10585	Create a nested execution .
10586	Returns all child executions of this node .
10587	Compute variables .
10588	Get a variable by name .
10589	Get a variable by name
10590	Set a variable .
10591	Sets a variable local variable .
10592	Removes a variable from the scope .
10593	Removes a variable from the scope .
10594	Execute the given node .
10595	Waits for the execution .
10596	Execute a signal .
10597	Take a transition .
10598	Create a new concurrent root .
10599	Loads a message .
10600	Returns the message for the given message id .
10601	Get Zend template
10602	Returns a readable directory .
10603	Check if path is writable .
10604	Check if a file is writable .
10605	Checks if a file is readable .
10606	Validate email address
10607	Validate IP address .
10608	Validate IPv4 address .
10609	Validate IPv4 address .
10610	Validate IPv6 address .
10611	Initializes the view .
10612	Check if an attribute has an attribute .
10613	Checks if a given class name exists .
10614	Get the parameters of a method .
10615	Get reflection method .
10616	Convert data to array
10617	Get SMS response .
10618	Get blank line
10619	Count the term cols
10620	Get error block .
10621	Generate a line of text
10622	Slice an array .
10623	Set rules
10624	Complete the client .
10625	Returns the object with the given name .
10626	Create a new object
10627	Registers an extension .
10628	Authenticate a user .
10629	Get the feed
10630	Liked media
10631	Set a relationship
10632	Set properties .
10633	Get all records from the database
10634	Returns the number of rows .
10635	Find a record by id
10636	Create a new record .
10637	Execute query
10638	Execute query
10639	Checks if the condition is valid .
10640	Create a link
10641	Parses the current row to the parent
10642	Parse a picker map
10643	Convert an array of reflection classes to an array
10644	Initialize the fields .
10645	Get field by column name
10646	Get key search rule
10647	Set the record array
10648	Save old values
10649	Get record array
10650	Convert SQL array to recursively
10651	Set the value of the SQL record
10652	Get the join input field
10653	Get join rule
10654	Get request method
10655	Get the request URI .
10656	Returns the options for the given key .
10657	Get the instance .
10658	Issue access token .
10659	Format a report .
10660	Decode a JSON file
10661	Validate the totp .
10662	List all comments .
10663	Update data record
10664	Execute route .
10665	Convert a list of strings into a string .
10666	Renders CSV file
10667	Render the data table
10668	Get data table
10669	Loads stateful variables .
10670	Get a property by name
10671	Get active record
10672	Set the active record id .
10673	Fetch all records
10674	Fetch data from the database
10675	Fetches records from the database .
10676	Returns the number of records .
10677	Execute search query
10678	Get number of records
10679	Fetch a record from the database
10680	Add the shortcut script script
10681	Get config value .
10682	Bootstrap bootstrap .
10683	Check if a user has a password
10684	Sets the request .
10685	Sets the maximum age of the file .
10686	Get mime type
10687	Validate the mime type
10688	Checks if the file is text .
10689	Check if the file is full .
10690	Set file properties
10691	Checks if the file is valid .
10692	Read the contents of the file .
10693	Sends the response header .
10694	Clean up the source
10695	Minimize JS code
10696	Minify CSS content .
10697	Wrap text wordwrap
10698	Get text content
10699	Serve text .
10700	Set the allowed origin .
10701	Send file .
10702	Register a text provider .
10703	Converts the given data to an instance .
10704	Determines if the given type is denormalization .
10705	Validate data .
10706	Validate a model .
10707	Get action attribute .
10708	Get the URL attribute .
10709	Go to next step
10710	Displays the step .
10711	Go to the current step
10712	Called when the form is finished .
10713	Cancel the session
10714	Render the page .
10715	Generate a random string
10716	Checks if the given callback is empty .
10717	Intercepts the ternary function .
10718	Returns true if the given value contains the given value .
10719	Merge anotherMI object into another
10720	Create a new app .
10721	Dispatch an event .
10722	Count the number of documents by group group .
10723	Aggregate group .
10724	Finds a single document .
10725	Get MongoIds from an array
10726	Normalize a date
10727	Checks if a form is in the form
10728	Render the form
10729	Get current page URL
10730	Initialize all forms
10731	Compare integer values
10732	Converts a value to an integer .
10733	Find source files .
10734	Register a namespace .
10735	Build the cache .
10736	Find composer autoloader .
10737	Finds the composer directory for the given composer class .
10738	Returns a list of class loader names .
10739	Get the value of a middleware .
10740	Set the middleware value .
10741	Returns a new printable with the given string .
10742	Returns a new printable with the given array .
10743	Returns a string representation of a string .
10744	Returns a string representation of an array .
10745	Returns a string representation of an array .
10746	Format an array value .
10747	Returns a string representation of an object .
10748	Reject an envelope .
10749	Boot the router .
10750	Render a webpage
10751	Render a webpage
10752	Render a view object
10753	Set the headers
10754	Create a comment .
10755	List the contents of a directory .
10756	Sort modules .
10757	Get the routes .
10758	Render menu items
10759	Render a single menu item
10760	Write data to file
10761	Configure environment .
10762	Read configuration .
10763	Run all checks
10764	Run the export .
10765	Writes the cache .
10766	Loads the cached cache .
10767	Initialize the configuration .
10768	Reads a command
10769	Flush the given command .
10770	Check if value is chainable .
10771	Validate form data
10772	Checks if the item is satisfied
10773	Complete access token .
10774	Returns the value of the SQL value .
10775	Get the value of the column
10776	Save old value
10777	Returns the default value
10778	Returns the value of the value on the column .
10779	Get the value of the value on update .
10780	Check if the field is required
10781	Checks if the value is valid
10782	Validate data
10783	Finds a template file .
10784	Prepare theme name .
10785	Set the theme .
10786	Register a theme .
10787	Add theme .
10788	Get an offset from an array
10789	Get a key from an array
10790	Returns the standard deviation of an array .
10791	Set middleware .
10792	Get action .
10793	Get path params
10794	Checks if the scheme matches the scheme .
10795	Checks if the hostname matches the given hostnames .
10796	Returns true if the given URI matches the given URI .
10797	Fetches the tree from the tree
10798	Fetch node path
10799	Get children of a node
10800	Returns the results of the results .
10801	Returns the link .
10802	Returns the text of the form .
10803	Get new record
10804	Set the secret
10805	Returns the binary value of a number .
10806	Format a number
10807	Add a table column
10808	Add SQL expression
10809	Resets the SQL statement .
10810	Add ORDER BY clause
10811	Add other SQL
10812	Add association
10813	Get SQL statement
10814	Get data record
10815	Run the CLI action .
10816	Get default template locations
10817	Renders the option
10818	Get font information
10819	Checks if the current group matches the given group .
10820	Validate input fields
10821	Validate uniqueness
10822	Checks if the record is update .
10823	Check if record is deleted
10824	Update a record
10825	Return new record array
10826	Generate a new ID
10827	Insert a record
10828	Delete a record
10829	Gets the list of field fields .
10830	Run DOTrigger
10831	Get the join fields for a given join .
10832	Join all records in the table
10833	Check if the record is a valid ID
10834	Run all checks .
10835	Initializes the report .
10836	Resolve route .
10837	Resolve action parameters .
10838	Check if a setting exists .
10839	Get a setting by name .
10840	Get all settings .
10841	Loads the settings .
10842	Set the cache location .
10843	Prefixes CSS rules .
10844	Prefix align items .
10845	Prefix content .
10846	Gets the prefix for this element .
10847	Parses the flex flex flex style .
10848	Prefix content .
10849	Get prefix rules .
10850	Create a comment
10851	Delete a URL
10852	Get filtered media
10853	Get preferred image .
10854	Get a placeholder .
10855	Create a new rule from a string .
10856	Returns the output of the output .
10857	Returns the reflection method for the given object .
10858	List all sitemap providers .
10859	Displays a sitemap .
10860	Gets the tree of this node .
10861	Check if the request is valid .
10862	Determine access token .
10863	Call the given method .
10864	Checks if the call context is changed .
10865	Stores a command .
10866	Execute a callback .
10867	Get a specific phi .
10868	Create Phar .
10869	Get pattern by name
10870	Merges a group configuration .
10871	Remove a record from the database
10872	Remove record from database
10873	Remove record from database
10874	Convert relations to array
10875	Read metadata from XML
10876	Read meta data
10877	Prefix package name .
10878	Allow access to the user
10879	Build a PhpRedis driver .
10880	Get the model for a given table .
10881	Add a resolver type .
10882	Returns the resolver .
10883	Sets a resolver .
10884	Resolve a reference
10885	Set the authorative value .
10886	Register a module .
10887	Sort the modules .
10888	Set the priority for a module .
10889	Configure module .
10890	Find all modules .
10891	Get the element by field name
10892	Register services .
10893	Convert a string to a value
10894	Converts a value to a formatted string .
10895	Convert value to number
10896	Convert a string to a value
10897	Converts a value to a date .
10898	Convert a date to a string
10899	Convert value to datetime
10900	Convert datetime to string format
10901	Convert value to currency
10902	Convert currency to float
10903	Convert value to phone number
10904	Converts a date to a date format .
10905	Parse a format string
10906	Render MySQL DSN
10907	Returns the DSN for the PDSql .
10908	Render DSN parts .
10909	Insert data into database
10910	Insert multiple data into database
10911	Get the path of the request .
10912	Get a container .
10913	Format a query string
10914	Format a query string
10915	Sets the query parameters .
10916	Get DB profile
10917	Format the report .
10918	Validate a password
10919	Validate email address
10920	Validate a date
10921	Get error message
10922	Create a new collection .
10923	Create a new instance
10924	Generate new ID
10925	Get a new system ID
10926	Get a new GUID
10927	Get a new ID
10928	Get the visible attribute .
10929	Set the formatter
10930	Prepare a file
10931	Close file
10932	Returns the path to the log file .
10933	Get the formatter for a file extension .
10934	Get the document manager .
10935	Render a view
10936	Outputs a PDF
10937	Set the base url
10938	Make a curl request
10939	Get multiple requests
10940	Perform a POST request .
10941	Perform a POST request
10942	Push a job .
10943	Create a payload
10944	Get content element identifier .
10945	Returns the signature of the content element .
10946	Returns the content of the content element .
10947	Get the title
10948	Remove a record
10949	Sorts a record
10950	Filter view children by view column
10951	Filter view children by sys language
10952	Set the value of a field in the database .
10953	Get data array
10954	Fill data from database
10955	Extracts a zip archive .
10956	Add file to zip archive
10957	Extract gzipped gz archive .
10958	Read a line from a file .
10959	Get file size
10960	Get the classes from a file .
10961	Add a new route
10962	Resolve route .
10963	Resolve a key
10964	Check if a key exists .
10965	Get the value of a key .
10966	Load a config file
10967	Get background details .
10968	Connect to Twitter .
10969	Check response status code .
10970	Handle a message .
10971	Checks if the given status is a message .
10972	Reads the next chunk size .
10973	Reads a JSON stream .
10974	Get the value of a property
10975	Get default value
10976	Get hidden field
10977	Returns the text of the form .
10978	Returns a map of key - key - value pairs .
10979	Get context menu menu
10980	Get the function for the event
10981	Get redirect page
10982	Returns the function type of the given event handler .
10983	Set form name
10984	Adjust the form name .
10985	Returns the form of the form
10986	Parse function string
10987	Call the middleware .
10988	Clear the middleware .
10989	Hook for halt .
10990	Reset the middleware .
10991	Creates an instance of the given element .
10992	Converts a counter to a string .
10993	Get a GET request
10994	Perform a POST request
10995	Get the response
10996	Determine if the current redirects should be redirected .
10997	Checks the effective time .
10998	Parse string
10999	Parse string
11000	Render a form object
11001	Render a template object
11002	Render form .
11003	View entity .
11004	Store entity .
11005	Call entity method
11006	Get middleware .
11007	Get the default commands .
11008	Updates the given user .
11009	Get settings .
11010	Get the group .
11011	Get the direct members of the group .
11012	Get the effective membership .
11013	Parses the membership data .
11014	Parses the history .
11015	Parse affiliate data
11016	Parse search data
11017	Get the webpage object
11018	Get an element by its name
11019	Get error elements
11020	Renders all sub forms
11021	Set the class name .
11022	Get translation key .
11023	Get list of words
11024	Load configs
11025	Remove an item from the cache
11026	Get the IDs of the cache
11027	Clean all caches
11028	Creates a directory .
11029	Reads a configuration file .
11030	Get a reader from a file .
11031	Add a new route
11032	Add a route
11033	Finds a route by name .
11034	Returns the next branch .
11035	Find issues by issue .
11036	Returns a list of WordPress contents .
11037	Get a list of WordPress categories .
11038	Get menu items .
11039	Returns a list of WordPress pages .
11040	Get a list of post posts .
11041	Returns a list of WordPress post types .
11042	Get the list of tags .
11043	Get list of taxonomies .
11044	Get a list of terms .
11045	Add a path to search path .
11046	Set the priority of a module .
11047	Returns the priority of a module .
11048	Clears the cache .
11049	Get cached data
11050	Resolve a file
11051	Parse request URI
11052	Save stateful state
11053	Get current step
11054	Get input fields
11055	Cancel the session
11056	Register a sub type .
11057	Get input parameter
11058	Delete a file
11059	Convert expires to seconds .
11060	Get key words .
11061	Find emails .
11062	Checks if the given array contains the given needle .
11063	Redirect to the given endpoint .
11064	Migrate up migration .
11065	Migrate all migrations .
11066	Set the unique identifier .
11067	Run the daemon .
11068	Check if a parameter exists .
11069	Get OAuth Request
11070	Get OAuth Signature
11071	Add a new node .
11072	Add a new transition
11073	Add a setting .
11074	Add settings to the collection .
11075	Get settings .
11076	Get cached settings .
11077	Get settings as array .
11078	Get cached settings .
11079	Returns filtered settings .
11080	Returns a filtered set of settings .
11081	Renders the nodes .
11082	Renders node items
11083	Render a single node item
11084	Run the application .
11085	Register the given environment .
11086	Installs the package .
11087	Initialize the bootstrap .
11088	Autoloads a class
11089	Loads a file
11090	Forward a route .
11091	Sets the glyph icon .
11092	Set query parameters
11093	Set limit limit
11094	Get database connection
11095	Get a property by name
11096	Get a reference object
11097	Set association
11098	Parse a docblock .
11099	Create a new SqliteConnection instance .
11100	Creates a new SqliteConnection instance .
11101	Get field by name
11102	Check if a field exists .
11103	Get field names .
11104	Get initial data model
11105	Authorize the index .
11106	Authorize a resource .
11107	Get a nested item from an object .
11108	Initialize the browser
11109	Get Export implementation
11110	Get the report implementation
11111	Get runner implementation
11112	Get the cache implementation
11113	Builds SQL for update fields
11114	Builds the SQL statement .
11115	Returns the style of the editcomb box .
11116	Get the children of this node .
11117	Get attribute value .
11118	Returns an array of attributes .
11119	Get a child node
11120	Get literal value .
11121	Cache the menu .
11122	Handle the call .
11123	Check if the method is valid .
11124	Checks if this call is a getter .
11125	Checks if this call is a setter .
11126	Prepare the request .
11127	Get the response .
11128	Parse JSON response .
11129	Save a session variable
11130	Load a session variable
11131	Saves session data to session
11132	Clears session objects .
11133	Save JSON array
11134	Set view history .
11135	Starts the timer .
11136	Print the current time
11137	Takes a time and returns the elapsed time .
11138	Reset the current state .
11139	Validate the executable path .
11140	Get the redirect page .
11141	Process data object
11142	Process a URL
11143	Get base URI
11144	Validate the given identity .
11145	Setup the authentication result .
11146	Set the visible attribute .
11147	Get the first row from the database .
11148	Get a list from a list
11149	Format report .
11150	Call middleware .
11151	Call proxy getter
11152	Call proxy methods
11153	Call proxy setter
11154	Set the exception handler .
11155	Clears the middleware .
11156	Disable middleware .
11157	Enable middleware .
11158	Get middleware .
11159	Get the middleware group .
11160	Group middleware group .
11161	Check if a middleware has a middleware .
11162	Determine if the middleware is disabled .
11163	Check if middleware is enabled .
11164	Get the middleware .
11165	Get the middleware collection .
11166	Prepend middleware .
11167	Push middleware .
11168	Set middleware context .
11169	Call the next middleware .
11170	Save cache settings .
11171	Get form fields
11172	Setup the bundle .
11173	Finds the transition for the given node .
11174	Creates a javascript callback for the given options .
11175	Creates a submit call to the form
11176	Create a link tag
11177	Create a submit tag
11178	Cast a key .
11179	Check if middleware is abstract
11180	Check if middleware is a collection .
11181	Resolve middleware .
11182	Resolve middleware .
11183	Resolve multiple middleware .
11184	Resolve multiple middleware .
11185	Resolves a middleware .
11186	Resolve a middleware .
11187	Render a report
11188	Get unique string
11189	Determine if a role has a given role .
11190	Check if the user has a role .
11191	Get the hash of the password
11192	Get information about the curl .
11193	Performs the request .
11194	Checks if a view has access to the view
11195	Returns the view object with the given name .
11196	Format the settings .
11197	Loads XML document .
11198	Validate a schema .
11199	Validate a schema .
11200	Resolve XInclude directives .
11201	Returns the value of a given element .
11202	Get element by name
11203	Set default namespace
11204	Register the namespace namespace .
11205	Checks if the given document is an environ configuration .
11206	Refresh the XPath object .
11207	Parse an error .
11208	Get all resolvers .
11209	Check authorization params
11210	Create authorization request .
11211	Complete access token .
11212	Print output .
11213	Get form inputs
11214	Redraw a form
11215	Show client alert
11216	Show error message
11217	Close the popup
11218	Run a script
11219	Redirect view .
11220	Append a script to the script
11221	Get appended scripts
11222	Append styles to the script
11223	Gets the stylesheet .
11224	Include basejs scripts
11225	Include RTE scripts
11226	Add ckeeditor scripts
11227	Include the script scripts
11228	Add validator scripts
11229	Execute all actions
11230	Compose action message
11231	Convert string to array
11232	Process form errors .
11233	Set sub forms .
11234	Load a picker .
11235	Set request params
11236	Fetch data set
11237	Get element id
11238	AutoSuggest input
11239	Renders the context menu .
11240	Render the form .
11241	Get event log message .
11242	Gets the list of event elements .
11243	Run event log
11244	Get the invoking element .
11245	Sets the javascript script .
11246	Remove middleware .
11247	Run the middleware .
11248	Create a DateTime instance from a string .
11249	Generate a secret
11250	Decode a base32 string
11251	Returns an iterator over all files .
11252	List all files
11253	List all directories .
11254	List all files .
11255	Create file .
11256	Create a directory .
11257	Move the file to the file .
11258	Rename a file
11259	Remove a directory .
11260	Set field name .
11261	Set the type .
11262	Set input format
11263	Set the value of the field
11264	Returns the value of the field .
11265	Save the relationships .
11266	Add children to entity .
11267	Get a list of models .
11268	Outputs a list of models .
11269	Convert a resource to an array .
11270	Generate captcha .
11271	Verify that the captcha is valid .
11272	Get a service
11273	Render the error .
11274	Render an HTTP exception .
11275	Render an exception .
11276	Render a serializer exception .
11277	Render a validation error .
11278	Render HTTP response as JSON
11279	Render an HTTP response .
11280	Render a Cake exception .
11281	Render an exception as JSON .
11282	Render a serializer exception .
11283	Render a serializer exception .
11284	Render a serializer exception .
11285	Render a validation error .
11286	Render a validation error .
11287	Render a validation error .
11288	Opens a session by ID .
11289	Create a new session
11290	Prepare text .
11291	Display a text .
11292	Display empty lines .
11293	Initialize the application .
11294	Sets the response headers .
11295	Initializes the debug bar .
11296	Start a session
11297	Checks if the current session has been recorded .
11298	Regenerates the session .
11299	Validate session
11300	Bind all layers to the layer .
11301	Get a model from the model
11302	Registers the publisher .
11303	Print the header
11304	Parse the raw content of a template .
11305	Remove extra indentation .
11306	Handle the request .
11307	Parse query string
11308	Bind to the page
11309	Returns a list of matches .
11310	Get justification constant .
11311	List local files
11312	Extract links from a document .
11313	Check if a link is excluded .
11314	Save a file
11315	Check if PDF exists
11316	Get next number
11317	End the current number .
11318	Display a text .
11319	Display a number of lines .
11320	Fit the regression model .
11321	Predict the predictions of a dataset .
11322	Initialize the database .
11323	Write a record to the database .
11324	Draw a list item
11325	Start a new line .
11326	Initialize the driver .
11327	Get the size of a size
11328	Builds a form for a section .
11329	Get the form factory .
11330	Load fixtures from an iterator .
11331	Resolve relative URL .
11332	Install composer .
11333	Install plugin plugins
11334	Install composer framework .
11335	Update package .
11336	Update composer framework
11337	Uninstall package .
11338	Remove plugins from package
11339	Removes all files from src to dst .
11340	Remove all files from a directory
11341	Set the colors
11342	Get the text area of the text
11343	Calculate width
11344	Get query by date value
11345	Get date value
11346	Cast an attribute .
11347	Convert attributes to array
11348	Sets a new tree node .
11349	Get a menu .
11350	Called when the event is processed .
11351	Get the definitions .
11352	Parses the given content .
11353	Parse the service definition .
11354	Load a YAML configuration file .
11355	Resolve services .
11356	Initialize the autoloader .
11357	Get the API instance
11358	Convert bytes to human readable string .
11359	Set the bullet .
11360	Set a column definition .
11361	Calculate total width
11362	Checks if there is a header .
11363	Get header text
11364	Check if data is valid
11365	Calculate widths for each column
11366	Draw data
11367	Create a new session .
11368	Create a new session file .
11369	Save session data .
11370	Acquire a lock .
11371	Create a form for a section .
11372	Creates a new instance of the given class .
11373	Get facts
11374	Parse facts .
11375	Find by id
11376	Finds all records in the database
11377	Returns all records .
11378	Find all records in the database
11379	Creates a new table .
11380	Update a WHERE clause .
11381	Parse notation .
11382	Apply conditions .
11383	Calculate the mean of the data set .
11384	Create a new plugin client .
11385	Sets the file .
11386	Add a template
11387	Checks if the template file exists .
11388	Converts a list of blocks to a string .
11389	Get metadata for a template
11390	Build the definition provider .
11391	Returns the results of a given formula .
11392	Save a formula .
11393	Add a header .
11394	Set dropdown menu
11395	Checks if the user has access to the user .
11396	Download a file .
11397	Get the URL for the given key .
11398	Set the gallery cover .
11399	Get data by type
11400	Get data from a URL
11401	Install resources .
11402	Check if a date is valid
11403	Wrap a GUI frame
11404	Run the command line .
11405	Factory method for factory methods
11406	Create a new session
11407	Send a new entity .
11408	Register providers .
11409	Register provider .
11410	Get facts .
11411	Populate the facts .
11412	Record a domain event .
11413	Apply the given event handler .
11414	Calls the function callbacks
11415	Draw data
11416	Calculate the formula .
11417	Check if the request has a layout .
11418	Initialize the terminal .
11419	Override this method to override the members of the style .
11420	Clear styles .
11421	Set the text color .
11422	Set fill color
11423	Sets the color of the text .
11424	Reverse the color .
11425	Creates a new instance of the given function .
11426	Load plugins .
11427	Check if plugin is enabled
11428	Check if the cache is configured .
11429	Update plugins .
11430	Register plugin hooks .
11431	Get a channel .
11432	Init loggers .
11433	Create a new logger .
11434	Get the list of objects for this location .
11435	Create a new instance of a class
11436	Returns an array of interfaces .
11437	Get the parent class
11438	Get all methods of this class
11439	Get all property properties
11440	Checks if the given type is active .
11441	Adds a resource to the collection .
11442	Gets the aggregate style .
11443	Rewrite paths .
11444	Wrap media rules .
11445	Move imports to start .
11446	Retrieve an archive
11447	Remove an archive
11448	Get the archive path .
11449	Get archive file path
11450	Clean up merged values .
11451	Filters an array with the given filters .
11452	Returns terminal screen size
11453	Generate a style .
11454	Render a script .
11455	Generates a mailto .
11456	Creates a static control .
11457	Creates a static static control .
11458	Add CSS style .
11459	Create the directory .
11460	Sets the files to publish .
11461	Initializes the user .
11462	Logs the given identity .
11463	Regenerates the CSRF token .
11464	Login by cookie
11465	Returns the redirect URL .
11466	Check if login is required
11467	Renew the identity cookie
11468	Reset auth status .
11469	Returns true if the user has access to the current user .
11470	Returns a list of week days .
11471	Save uploaded file
11472	Execute the query .
11473	Delete a table .
11474	Creates a new INSERT statement .
11475	Adds an inner join .
11476	Add a WHERE clause .
11477	Adds a WHERE clause .
11478	Get SQL for delete
11479	Creates a new parameter .
11480	Binds the logger .
11481	Binds the logger .
11482	Set status code
11483	Get the response body
11484	Redirect to the given URL .
11485	Create an empty response
11486	Prepare headers
11487	Get cookies prepared by request
11488	Default formatters .
11489	Extract auth user from encoded string
11490	Get all scenarios .
11491	Fill scenario attributes .
11492	Get form name .
11493	Get attribute names .
11494	Validate the model .
11495	Validate multiple models .
11496	Renders a translatable message .
11497	Add an attachment .
11498	Add a request to the request .
11499	Send a request to the API .
11500	Loads a class .
11501	Get all registered listeners .
11502	Set listener properties .
11503	Creates an EventListener from an annotation .
11504	Returns an array of options .
11505	Set options .
11506	Returns the value of a key value .
11507	Sets the values from an array .
11508	Load entities from a directory .
11509	Extend entity manager .
11510	Checks all predictions .
11511	Processes an XML element .
11512	Verifies that the dispatch method is valid .
11513	Verifies that the class is valid .
11514	Verifies that the given dispatch is valid .
11515	Verify that the dispatch is valid .
11516	Verify that the dispatch is valid .
11517	Get the dependencies of the dispatch .
11518	Get the dependencies for the given dispatch .
11519	Dispatch the dispatch method .
11520	Get the value of a class property .
11521	Get the dispatch class .
11522	Dispatch a dispatch function .
11523	Call the dispatch method .
11524	Dispatch a callable .
11525	Returns the string representation of the request .
11526	Get request arguments .
11527	Parse request arguments .
11528	Get a link
11529	Set the protocol version .
11530	Assert that all header values are valid .
11531	Injects a header value into an array .
11532	Get current time
11533	Check and update cookie fields .
11534	Store a cookie
11535	Add cookies from response
11536	Returns all cookies matching the given URL .
11537	Get all cookies
11538	Serialize all cookies .
11539	Unserialize a session
11540	Checks if a cookie matches the given cookie .
11541	Create a new instance of the given command .
11542	Get the options for a specific command .
11543	Returns the help for the given command .
11544	Get a singleton instance
11545	Converts an expression to a number .
11546	Parse an expression part .
11547	Process a key .
11548	Remove characters from a string
11549	Set the encoding .
11550	Create an IteratorException
11551	Initializes the translations .
11552	Initialize url prefixes .
11553	Get message formatter .
11554	Start a transaction .
11555	Get the API request url .
11556	Get the track params
11557	Get the results from the API .
11558	Get the success message .
11559	Get all budgets for a given account .
11560	Get current language
11561	Parses the accept language .
11562	Bind a binding .
11563	Instantiate a class .
11564	Validate a URL .
11565	Check if the given field is live .
11566	Get the value of a field
11567	Wrap an object .
11568	Get a date field as a date
11569	Make a session identifier .
11570	Encrypt session data
11571	Decrypt session data
11572	Returns the encryption key .
11573	Set the encryption algorithm .
11574	Set the hash algorithm .
11575	Prepare a set of SQL statements .
11576	Initialize service
11577	Get parameter value
11578	Check if target relation exists .
11579	Checks if the given attribute exists .
11580	Check if value exists
11581	Returns a string representation of the clause .
11582	Render a modal .
11583	Localize a file .
11584	Detach the stream .
11585	Reads data from the stream .
11586	Creates a new Request instance .
11587	Creates a new instance of the request .
11588	Sets the server .
11589	Set the headers .
11590	Get the path .
11591	Get the path of the request .
11592	Get the HTTP host .
11593	Sets the request method .
11594	Get the request method .
11595	Get the mime type .
11596	Returns the format for the given mime type .
11597	Get request format .
11598	Render a controller .
11599	Initialize http .
11600	Add middleware .
11601	Create a new request application .
11602	Set a path alias .
11603	Set aliases .
11604	Get error log level
11605	Generate a proxy
11606	Get method call parameters
11607	Generate proxy class
11608	Generate proxy properties .
11609	Get proxy methods
11610	Generate proxy class name .
11611	Returns the declaration declaration of a method .
11612	Checks if a method is proxied .
11613	Checks if the given array is valid .
11614	Traverses the given iterator .
11615	Get the parameters of a method
11616	Create a new repository .
11617	Load messages from database .
11618	Setup the application .
11619	Bootstrap configuration .
11620	Bootstrap core .
11621	Bootstrap container .
11622	Get environment variable .
11623	Set environment variable .
11624	Get config value .
11625	Abort an exception .
11626	Redirect to the given URI .
11627	Create a response .
11628	Redirect route .
11629	Get a view .
11630	Get a value by key
11631	Validate a descriptor .
11632	Validate a descriptor .
11633	Get cache invalidation settings .
11634	Set cache invalidation settings .
11635	Initialize logger
11636	Get file path
11637	Verify password
11638	Set whether or not exists .
11639	Renders the progress bar .
11640	Renders a bar bar .
11641	Process SOAP request
11642	Get the SOAP server
11643	OnFlush event .
11644	Clean up the cache .
11645	Invalidate entity .
11646	Add a tag to the cache
11647	Returns a list of SEX choices .
11648	Set callback .
11649	Filter a value
11650	Returns the percentage of the usage percentage .
11651	Get all seoites
11652	Set seo attributes
11653	Get Seobility object
11654	Convert value to bool
11655	Calculates the ordinal of the given x .
11656	Returns the abscissa of the given coordinate
11657	Add an attachment .
11658	Encode the body part of the request .
11659	Encode a file to a file .
11660	Encode a part to a file .
11661	Add a subpart
11662	Convert a string to a quoted string
11663	Build header parameter
11664	Builds a request parameter .
11665	Explode quoted string
11666	Encode a header value .
11667	Encodes a string into a base64 string .
11668	Get admin messages .
11669	Returns the next line .
11670	Renders items .
11671	Sets the action annotations
11672	Set a specific option
11673	Generate a slug .
11674	Creates a sentence .
11675	Extracts an array of photos
11676	Check if the session is valid .
11677	Get the error message .
11678	Sets the same site .
11679	Clean and add header
11680	Finds class namespaces .
11681	Get namespace path
11682	Get paths for a namespace
11683	Get namespace prefixes
11684	Get the prefixes for the loader .
11685	Update session data .
11686	Merges the current session .
11687	Get session data .
11688	Get page from query
11689	Get query string
11690	Returns an array of filters .
11691	Create form .
11692	Store the results .
11693	Get pagination .
11694	Get previous record id
11695	Returns an array representation of the form .
11696	Add a new field
11697	Process options .
11698	Get connection params
11699	Check if database is installed .
11700	Returns the sql string for the query
11701	Execute the query .
11702	Get a repository instance
11703	Create a new entity .
11704	Save an entity .
11705	Remove an entity .
11706	Commit all models .
11707	Get a PDO instance .
11708	Get the configuration for the given name .
11709	Creates a PDO instance from the configuration .
11710	Validate password .
11711	Creates a new instance from an Accept header .
11712	Parses a string .
11713	Returns true if the given array matches the given needle .
11714	Calculates the earth radius .
11715	Convert decimal coordinates to DMS
11716	Convert degrees to decimal
11717	Render a production error
11718	Render debug error
11719	Logs the exception
11720	Configure config file
11721	Create a configuration file .
11722	Save messages to PHP file
11723	Save messages to a file
11724	Create Time from array
11725	Create a Time instance from a string .
11726	Create a Time instance from a DateTime object .
11727	Create a Time instance from seconds .
11728	Invalidate tags .
11729	Flush all tags
11730	Encode tags
11731	Register configuration .
11732	Get all cookies .
11733	Set cookie .
11734	Remove a cookie
11735	Prompts user to confirm dialog
11736	Get labels .
11737	Wraps the current session
11738	Get table primary key .
11739	Get table foreign keys .
11740	Get table indexes
11741	Get table uniques .
11742	Get table checks
11743	Returns the default values for a table .
11744	Get parameter value .
11745	Checks if a permission is allowed .
11746	Sets the distinct query .
11747	Set columns .
11748	Join a table .
11749	Adds an inner join .
11750	Adds a left join to the table .
11751	Add a left join to the table .
11752	Adds a join to the table .
11753	Adds an outer join .
11754	Adds a full join to a table .
11755	Set group by field
11756	Adds conditions to the query .
11757	Adds conditions to the query .
11758	Set order by field
11759	Set limit .
11760	Set offset .
11761	Builds the query .
11762	Renders a link .
11763	Renders a button .
11764	Render locale switcher .
11765	Convert the equation to a string
11766	Calculate the ordinal of the axis
11767	Returns the abscissa of the given coordinate .
11768	Find record by id
11769	Find one record by predicate
11770	Checks if the database exists .
11771	Check if a predicate exists
11772	Delete records by predicate
11773	Delete a record .
11774	Updates the data in the database .
11775	Insert data into table
11776	Get the relation relation .
11777	Get the primary keys .
11778	Get the primary key
11779	Returns the column information .
11780	Execute a SQL statement .
11781	Get primary key predicate .
11782	Checks if the data is valid .
11783	Parse a JSON response .
11784	Parse a JSON response .
11785	Set the return type .
11786	Run all plugins .
11787	Enqueue a given type
11788	Set the type of the type .
11789	Set name to name .
11790	Set the start position .
11791	Set the damage .
11792	Set the hit level
11793	Set the meter gain .
11794	Set inputs .
11795	Add a cancel .
11796	Set start frames .
11797	Set active frames .
11798	Set recovery frames .
11799	Sets the advantage on hit .
11800	Sets the advantage of the Guard .
11801	Build a Move object .
11802	Send slack message
11803	Parses a route .
11804	Parse data .
11805	Validate a datum .
11806	Find the segment in the array .
11807	Generates a repository .
11808	Validate class name .
11809	Check if image is an image
11810	Returns the number of files
11811	Get the route path .
11812	Get the raw route and params
11813	Returns a new URI with the given scheme .
11814	Returns a new URI with the given user information .
11815	Set the host name .
11816	Returns a new URI with the specified port .
11817	Query array by key
11818	Query array by brackets
11819	Set query variables
11820	Set a query variable .
11821	Returns the URL of the URI .
11822	Normalize the URI .
11823	Resolves a reference to a base URL .
11824	Checks if the request is a fragment .
11825	Get the canonical URL .
11826	Get the request URL
11827	Get option by name
11828	Build query string
11829	Parse url
11830	Display a text
11831	Translate the message .
11832	Suggest language language .
11833	Get new state list
11834	Filter state names .
11835	Switch to new state
11836	Get all categories for a budget
11837	Displays the login form .
11838	Logout the user .
11839	Connect to the network .
11840	Get parameter value
11841	Set HTML body
11842	Add HTML image
11843	Add an attachment .
11844	Convert a file to a string
11845	Add a text part
11846	Add HTML part of the mail
11847	Add an HTML image part
11848	Add attachment part .
11849	Encode headers .
11850	Checks if the build_encoding is valid .
11851	Check if value is valid
11852	Initialize Reaction
11853	Loads the items .
11854	Save items .
11855	Save data to file
11856	Create a JSON response .
11857	Set the callback .
11858	Set encoding options .
11859	Get the layout .
11860	Returns the words as a string .
11861	Update session data .
11862	Delete a session .
11863	Configure the command options .
11864	Load pm config
11865	Get memory memory limit
11866	Create a new leaf from the model .
11867	Render the template
11868	Add a plugin
11869	Get config value
11870	Returns the URL for the given name .
11871	Register a GET route .
11872	Creates an HTML response .
11873	Create a redirect response .
11874	Sets the path segments .
11875	Get a proxy instance
11876	Get an instance of a class
11877	Get all records .
11878	Get the columns from the database .
11879	Returns a paginator .
11880	Find a single entity .
11881	Persist an entity .
11882	Deletes an entity .
11883	Counts the number of entities .
11884	Create a select query .
11885	Apply scopes to the query builder .
11886	Applies the orderBy to the query builder .
11887	Create a NoResultException .
11888	Replace query parameters
11889	Add a new method
11890	Get a RPC method .
11891	Shutdown the loop .
11892	Add multiple headers .
11893	Set link .
11894	Creates a new request .
11895	Create a new photo
11896	Checks if the given value is within the range .
11897	Start the session
11898	Regenerates session id .
11899	Close the session .
11900	Unset session data
11901	Destroy session .
11902	Decode session data
11903	Set session cache .
11904	Get Reaction instance
11905	Get module options
11906	Returns the size of the image .
11907	Set the walk flag .
11908	Set array flag
11909	Sets the matrix data .
11910	Get the value at the given index .
11911	Set the position of a node .
11912	Rewind the iterator .
11913	Get the previous position
11914	Get the previous X position
11915	Gets the previous y y y .
11916	Get the previous position
11917	Returns the next node .
11918	Gets the next X element .
11919	Returns the next Y offset .
11920	Get the next position
11921	Sets the position of the current position .
11922	Get current position
11923	Returns the key of the current node .
11924	Check if the path is valid
11925	Check if the data is valid .
11926	Check if the data is valid .
11927	Returns the number of points .
11928	Sets the offset to the given offset .
11929	Sets the position of an offset
11930	Check if an offset exists .
11931	Get the value at the given offset .
11932	Set the value at the given offset .
11933	Check if the value is valid .
11934	Allow view methods
11935	Add a controller method to the controller .
11936	Set the table name .
11937	Set the FROM table .
11938	Adds conditions to the query .
11939	Add OR WHERE conditions .
11940	Set static rule
11941	Set static rule reference
11942	Returns an instance of the given rule .
11943	End the body .
11944	Register js file
11945	Register a JS variable
11946	Get the default configuration files
11947	Get a singleton instance
11948	Setup channels .
11949	Merge config file
11950	Write a configuration file to the server .
11951	Read configuration data from a file .
11952	Get the default channel
11953	Get the value of a specific channel .
11954	Set the channels
11955	Returns the type of the configuration .
11956	Returns the documentation for a given key .
11957	Returns the prompt .
11958	Returns the group configuration .
11959	Get group groups
11960	Returns the list of keys for a given group .
11961	Returns the set values for a given key .
11962	Get all configuration keys
11963	Removes a configuration from the configuration .
11964	Remove a layer
11965	Get a configuration by key
11966	Checks if a key exists in the configuration .
11967	Set the registry
11968	Processes the extensions .
11969	Replace constants with constant .
11970	Get the callback function .
11971	Check if value is valid
11972	Get valid values .
11973	Returns array of valid values .
11974	Set the value of the enum .
11975	Initialize postinstall
11976	Start the session
11977	Add a total number .
11978	Add idle time .
11979	Returns the amount estimated for the account .
11980	Get request methods
11981	Disable the auto update .
11982	Block wp request
11983	Hide admin action .
11984	Check if a point is valid .
11985	Determine if the diagonal is a paralleram
11986	Get the value of a composite key .
11987	Check if a composite key exists
11988	Find application .
11989	Find all applications .
11990	Checks if two numbers are equal .
11991	Returns the number of digits .
11992	Build a number from an array
11993	Validates a number value .
11994	Make a callable
11995	Generate a key
11996	Connect to redis server
11997	Get the command string .
11998	Gets the mongo document .
11999	Get a domain event message .
12000	Resets form data .
12001	Normalize messages .
12002	Post validation .
12003	Register the form data .
12004	Get the form s forms .
12005	Remove string from array
12006	Get all entities .
12007	Swaps the entity .
12008	Configures the form to be excluded .
12009	Set sub form data handler
12010	Remove field from entity
12011	Add a response .
12012	Create a response from a string .
12013	Create a response from a file .
12014	Change the head version of the entity .
12015	Check if the entity has a new version .
12016	Persist an entity .
12017	Clear all versions .
12018	Clean up the directory .
12019	Check if the given key exists .
12020	Move a key to a target directory .
12021	Connects a filesystem to a filesystem .
12022	Determine if the given key is present .
12023	Create a directory .
12024	Find entity by id
12025	Create a new entity .
12026	Save an entity .
12027	Deletes an entity .
12028	Validate entity .
12029	Execute a select query .
12030	Create a query builder .
12031	Set criteria in query builder .
12032	Sets the criterion in the query .
12033	Sets ORDER BY clause .
12034	Saves a new entity .
12035	Sets the properties for the query .
12036	Sets the properties of a PDO statement .
12037	Get entity relations
12038	Ensure required properties are required .
12039	Broadcast a message .
12040	Execute a request .
12041	Get script src
12042	Display an HTML element .
12043	Display an image .
12044	Display audio .
12045	Verify a response
12046	Verify the request .
12047	Generate script
12048	Returns a script with the given callback name .
12049	Checks if key is empty
12050	Checks if the value is a string .
12051	Send verification request
12052	Initialize the theme .
12053	Resolve a view file .
12054	Render PHP stateless stateless
12055	Register post types .
12056	Generate a new token .
12057	Generate memory token .
12058	Execute the project .
12059	Filter message filter callback
12060	Log a notice .
12061	Log a message .
12062	Log a debug message .
12063	Log a raw message .
12064	End the end of a profile .
12065	Log a message .
12066	Convert a message to a string .
12067	Convert an exception to a string .
12068	Colorize text
12069	Get callee data
12070	Process placeholders .
12071	Format a value .
12072	Find a seo seo .
12073	Returns the table name .
12074	Delete all records .
12075	Save model .
12076	Initialize MySQL connection
12077	Parses the command line
12078	Get all commands .
12079	Returns a list of all available shortcuts .
12080	Get help information for a command .
12081	Get help arguments
12082	Event handler .
12083	Compile a DSN string .
12084	Escape a value
12085	Add template root .
12086	Returns the count of items in the collection .
12087	Returns count of count items in a collection .
12088	Create count query
12089	Get entity manager .
12090	Get current route path
12091	Loads a config file .
12092	Clear an entry .
12093	Returns the bundle .
12094	Set a bundle entry .
12095	Clears the bundle .
12096	Invalidate an entity .
12097	Checks if the dependency database is valid .
12098	Get dependencies of a package
12099	Get the dependencies of a package
12100	Install a package
12101	Uninstall a package
12102	Rebuild the package .
12103	Lock the dependency .
12104	Unlock the lock
12105	Get the dependencies from the database .
12106	Write dependencies to a file .
12107	Auto load modules
12108	Register a theme
12109	Get theme content
12110	Render an exception .
12111	Set the foreground color .
12112	Set the background color .
12113	Set black color .
12114	Color color .
12115	Set the foreground color .
12116	Set the color .
12117	Set blue color .
12118	Set the foreground color .
12119	Color color .
12120	Set the color .
12121	Reset the color .
12122	Set the foreground color .
12123	Remove an option .
12124	Format a message .
12125	Log a command .
12126	Get the array of uploaded files .
12127	Set the release state .
12128	List all scripts
12129	Initialize postinstall scripts .
12130	Initialize the package .
12131	Get filelist
12132	Get configuration options
12133	Checks if the package is compatible with the package .
12134	Check if a package is subpackage
12135	Gets the dependency group .
12136	Slices an array with a new key .
12137	Builds the compiler .
12138	Modulo modulo
12139	Calculates the modulo of the whole part
12140	Update the event .
12141	Log a message .
12142	Select from repository entity .
12143	Get entity alias
12144	Delete entity .
12145	Update entity .
12146	Sets the entity from the database .
12147	Set the value of a key .
12148	Gets the group by field .
12149	Add a group by field .
12150	Sets the ORDER BY clause .
12151	Add an ORDER BY clause .
12152	Limit results .
12153	Returns an array of items per page .
12154	Fetch a single row from the query .
12155	Fetch a single result from the query .
12156	Fetch all results from the query .
12157	Add a parameter to the query
12158	Find the unused parameter name .
12159	Parse call methods .
12160	Call the function to call the function .
12161	Check if the array is associative .
12162	Returns the description of the given subject .
12163	Add a timestamp
12164	Get the timestamp as a table
12165	Get the current page time .
12166	Returns the most recent time for the current time .
12167	Renders the header .
12168	Render header .
12169	Render the body
12170	Render footer .
12171	Get the group name .
12172	Get the list of options for a specific action .
12173	Get action arguments
12174	Get the options for an action .
12175	Get the headers .
12176	Determine if the browser is a flash .
12177	Get the raw body .
12178	Get body params
12179	Get host info
12180	Get the script URL .
12181	Get request params
12182	Returns a list of available content types .
12183	Returns list of available languages .
12184	Get the ezags of the response
12185	Get the CSRF token
12186	Generate a CSRF token
12187	Get the default server params
12188	Log a user .
12189	Crops a cropping image
12190	Make crop name .
12191	Crop an image .
12192	Get image size
12193	Get the permutations for a given file .
12194	Get annotations from a doc string .
12195	Returns an array of all annotation matches .
12196	Set the annotation .
12197	Set annotation arguments .
12198	Get annotation properties .
12199	Process annotation properties .
12200	Get the arguments from a string .
12201	Determine the value of a given value .
12202	Get annotation from map
12203	Clean the match .
12204	Get subscribed events .
12205	Handle command .
12206	Handle command help .
12207	Returns the provider for the given command .
12208	Creates a left join .
12209	Adds a right join to the table .
12210	Adds a right join to the query .
12211	Compile the query .
12212	Fetch all columns from the database
12213	Set the table name .
12214	Set the structure structure .
12215	Set the object name .
12216	Set model name .
12217	Builds the model .
12218	Build field fields
12219	Register validation factory .
12220	Load services .
12221	Returns the target site id .
12222	Get the parent relation .
12223	Renders an item .
12224	Get all results from the database .
12225	Get a single row .
12226	Get the columns of the query .
12227	Returns the count of the query
12228	Check if the database exists
12229	Make a call to the given name .
12230	Finds all callbacks matching the given function name .
12231	Creates a new PEAR instance
12232	Ensure that the state directory exists .
12233	Asserts that a channel is state directory .
12234	Ensure that the channel directory exists .
12235	Returns the file name for the given channel .
12236	Get the alias from an alias .
12237	Returns the alias for the given channel .
12238	Lock the registry .
12239	Check if a channel exists .
12240	Check if a mirror exists .
12241	Check if a given alias is an alias .
12242	Get information about a channel
12243	Update a channel .
12244	Returns true if the given data matches the given value .
12245	Get TinyMCE file
12246	Initialize a new instance
12247	Get entity manager .
12248	Resolve a class name .
12249	Validates the hash of the given hash .
12250	Validate route .
12251	Copy origin directory to target directory .
12252	Initializes the button .
12253	Get next day
12254	Get previous day
12255	Creates a random date range
12256	Get file path
12257	Get directory path
12258	Opens a file .
12259	Create file .
12260	Write contents to file .
12261	Get the contents of a file .
12262	Chmodify a file .
12263	Lock a file .
12264	Unlock a file .
12265	Ensure the given path is a file object .
12266	Ensure the given path is a directory .
12267	Check if the file is unlocked .
12268	Get the globals .
12269	Render section
12270	Adds a clause to the query .
12271	Add a where clause .
12272	Add a WHERE clause .
12273	Convert array to collection
12274	Checks if the argument is valid .
12275	Get data from database
12276	Update an existing row .
12277	Revert all migrations .
12278	Clear the migration .
12279	Show all migrations .
12280	Get new migrations .
12281	Create a migration .
12282	Migrate migration .
12283	Migrate to a given time .
12284	Migrate the current version of the application .
12285	Load the adapter .
12286	Connect to the database
12287	Add a cached query .
12288	Get cached results
12289	Execute an array query
12290	Adds a table to the database .
12291	Add fields to table
12292	Get table info
12293	Check if a table exists
12294	Builds an array of fields .
12295	Escape a string
12296	Clears the query .
12297	Add a WHERE clause
12298	Add a WHERE clause
12299	Add a WHERE clause
12300	Add OR WHERE clause
12301	Add a WHERE clause .
12302	Sets the order by name .
12303	Get query string
12304	Get all results
12305	Get single single record
12306	Get all available extensions
12307	Get model instance
12308	Set storage path
12309	Loads the structure files .
12310	Get model structure
12311	Save model structure .
12312	Dump data to database
12313	Load data from model
12314	Returns all transactions for a given account .
12315	Set the query state .
12316	Get the backlog length of the queue .
12317	Process the queue .
12318	Execute a query .
12319	Set connection status
12320	Handle message .
12321	Process data .
12322	Cancel a request
12323	Displays the provider .
12324	Register a social provider .
12325	Remove a social link .
12326	Update settings .
12327	Check if provider is valid .
12328	Configure social services .
12329	Register social .
12330	Cleanup timer callback
12331	Pack a record .
12332	Unpack a record .
12333	Create the cleanup timer .
12334	Checks if a menu item is active .
12335	Sets the accountId value .
12336	Sets the user id .
12337	Get the account account
12338	Get the current user
12339	Generate the next exception .
12340	Remove tags
12341	Initialize the config
12342	Returns the list of valid roles for a given release .
12343	Get the base install roles .
12344	Shortcut to shorten the string
12345	Set the block size
12346	Get a value by key .
12347	Generate config files .
12348	Merge data into array
12349	Read configuration data from config file .
12350	Read configuration data from file
12351	Normalize config file path
12352	Apply an event to the aggregate .
12353	Record a message .
12354	Set related data
12355	Attaches the presenter .
12356	Redraw the widget .
12357	Redirect to destination
12358	Initialize Twig plugins .
12359	Set a list of variables
12360	Fetch the template from the template
12361	Load plugins from a directory .
12362	Creates a BusinessHours object from an associative array .
12363	Shift a business hours to a timezone
12364	Flattens a list of days .
12365	Validate a warning .
12366	Get the contents of a file
12367	Parse an array of configuration files .
12368	Parse a YAML file .
12369	Set configuration parameters
12370	Calculate request length
12371	Execute a command .
12372	Serialize a value .
12373	Unpublish other versions .
12374	Set the class name .
12375	Set the id column .
12376	Set name column .
12377	Set data column .
12378	Set the lifetime column .
12379	Set the modified column .
12380	Set created column .
12381	Get all providers .
12382	Get available providers .
12383	Boot the application .
12384	Register connegotiation content .
12385	Set request format .
12386	Validate request content type .
12387	Execute the function .
12388	Discover a channel .
12389	Returns a new PEAR dependency object
12390	Get the download directory
12391	Detect dependency cycles .
12392	Setup the graph .
12393	Get url argument
12394	Output a string
12395	Get arguments .
12396	Register NoCaptcha .
12397	Register validator rules .
12398	Register the captcha .
12399	Parse a description from a XML file .
12400	Parse an XML string
12401	Returns the XML representation of this channel .
12402	Validate an error
12403	Returns the base URL for the given resource type .
12404	Resets the functions for the given type .
12405	Set the default PAR protocol .
12406	Get mirror by server
12407	Set validation package .
12408	Add a function to the server
12409	Add mirror function
12410	Get the validation package
12411	Get validation object
12412	Checks if a property exists .
12413	Checks if a property is set .
12414	Get the cache file .
12415	Load cache parameters .
12416	Adds an entry to the container .
12417	Get a value from the cache .
12418	Get the entry from the cache .
12419	Check if an entry exists .
12420	Removes an entry from the cache .
12421	Applies the conditions to the query .
12422	Assign values to array
12423	Extract errors from an error
12424	Get model configuration file
12425	Get model definition .
12426	Save model definition .
12427	Returns the metadata .
12428	Set name .
12429	Set the color .
12430	Set the parser .
12431	Aggregate a collection of resources .
12432	Make curl request
12433	Imports an image to a file
12434	Create a validator .
12435	Validates an attribute .
12436	Validate value .
12437	Run the controller .
12438	Shutdown the application .
12439	Get the URL for a controller .
12440	Returns the absolute URL of the current route .
12441	Normalize route path .
12442	Check if the current test is working .
12443	Get view names .
12444	Get the value of a key .
12445	Sets the value of a key .
12446	Set multiple values
12447	Removes a value from the cache .
12448	Add a value to the cache .
12449	Store a value in the cache .
12450	Delete a key
12451	Filter a string
12452	Configure default options .
12453	Get the value of a given option .
12454	Get the value of an option .
12455	Load config from file
12456	Load configuration .
12457	Render config .
12458	Render a value .
12459	Normalize config array
12460	Set package version .
12461	Clears the contents of the package .
12462	Clear dependencies .
12463	Set the package type .
12464	Returns the current package version
12465	Add a path to the current release .
12466	Add a file to a release
12467	Add binary package .
12468	Add a config option
12469	Set php install condition .
12470	Set OS install condition .
12471	Sets the archive condition .
12472	Generate the change log entry .
12473	Check if the file is a video .
12474	Get video info
12475	Set date .
12476	Set amount .
12477	Set the type .
12478	Set comment .
12479	Sets the category id .
12480	Sets the accountId value .
12481	Creates a new instance of TimeBuilder .
12482	Create a new instance from an array
12483	Create a new SQLite instance .
12484	Create a new instance of MySQL connection
12485	Execute a SQL query
12486	Get table names
12487	Get a row from the database .
12488	Get a single row from the database
12489	Check if table exists
12490	Checks if a table exists .
12491	Get primary keys
12492	Get column names
12493	Log a query .
12494	On bootstrap event .
12495	Run the application .
12496	Set the public keys
12497	Set private key
12498	Set an envelope key
12499	Set compression .
12500	Returns the formatted date as a formatted string .
12501	Supports the profilateur
12502	Execute the given function .
12503	Create migration history table .
12504	Add a filter
12505	Filters the given value using the given class .
12506	Adds the inverse relation to the model .
12507	Populate a relation .
12508	Populate a single relation .
12509	Populate relation with multiple models .
12510	List invalid properties .
12511	Process an array .
12512	Create a new Entity instance
12513	Returns true if the text is equal .
12514	Returns true if the string contains the given text .
12515	Returns true if the string contains the given text .
12516	Returns a new string with the specified length .
12517	Replace the text with the given search .
12518	Replace text with regular expression
12519	Before saving the model .
12520	Checks if the model is deleted .
12521	Refresh the record .
12522	Update all records .
12523	Delete all records .
12524	Inserts a model .
12525	Inserts the model into the database .
12526	Deletes the object .
12527	Get all methods .
12528	Get the name of the method .
12529	Filter custom data
12530	Get all commands .
12531	Get command help
12532	Create a controller .
12533	Handle an exception .
12534	Handles fatal errors .
12535	Log an exception .
12536	Returns the trace trace as a string .
12537	Reduce stack trace
12538	Proxy with app property
12539	Proxy with app .
12540	Inject a variable into an array .
12541	Ensure the given string is translated .
12542	Create a repository .
12543	Start the notification .
12544	Generate a random string
12545	Get the data for the data store .
12546	Register a custom class
12547	Assigns a user .
12548	Request a list of countries
12549	Encode a string
12550	Returns the default reason phrase .
12551	Returns the header value .
12552	Get the body of the request .
12553	Decode data from a string
12554	Check if table exists
12555	Clear all tables .
12556	Checks if the pool is idle .
12557	Get all headers .
12558	Get header name .
12559	Writes multiple messages .
12560	Write a message .
12561	Set the type of the filter .
12562	Finds the view path .
12563	Get the list of possible files .
12564	Starts the session .
12565	Get data by id
12566	Sets a value for a given id .
12567	Remove an item from the cache .
12568	Generate a CSRF token
12569	Validate a CSRF token
12570	Returns a human - readable string .
12571	Delete all files .
12572	Move file to destination
12573	Clean the file name .
12574	Dispatch an event .
12575	Handle errors .
12576	Handle fatal errors .
12577	Save the item .
12578	Returns a string representation of the exception .
12579	Convert an array to XML
12580	Converts the header to an array
12581	Load config file .
12582	Set config values
12583	Get a configuration value from the registry .
12584	Builds a config array from a configuration array .
12585	Parse configuration .
12586	Parse a config value
12587	Compile join constraint .
12588	Add a WHERE clause .
12589	Compile an insert statement .
12590	Compile update statement .
12591	Compile a delete statement .
12592	Wrap a value .
12593	Add arguments to the function .
12594	Set the promise .
12595	Set whether or not the given prediction .
12596	Checks if a prediction is present .
12597	Creates a new Gallery instance .
12598	Connect to a user .
12599	Create a new database .
12600	Convert the query to SQL
12601	Scan the content .
12602	Flattens the value of an option .
12603	Returns a new instance with the given predicate .
12604	Execute callback .
12605	Execute a callback .
12606	Parse callback function name
12607	Get constraints .
12608	Calculate minimum value
12609	Returns the controller instance .
12610	Get action .
12611	Resolve the controller .
12612	Process dispatched data .
12613	Process the response .
12614	Get the exception exception .
12615	Get terminal size
12616	Returns the operating system operating system .
12617	Translates a date into a string .
12618	Locates a file .
12619	Returns the value of the given value .
12620	Returns the email address .
12621	Converts a value to a decimal format .
12622	Formats a short size .
12623	Create a new model .
12624	Update the model .
12625	Checks if the class exists .
12626	Fetch object from database
12627	Fetch a single column
12628	Filter the query on deleted records .
12629	Scope only for deleted items .
12630	Run the console .
12631	Get a value from an array
12632	Get a single header by name
12633	Remove a header .
12634	Set the body of the message .
12635	Get the icon .
12636	Get all available types
12637	Bind a template to a template .
12638	Render an exception .
12639	Format a message .
12640	Get the header .
12641	Converts an array to a header string .
12642	Combines two sections .
12643	Recursively walk the given key .
12644	Split a string into an array
12645	Report error message .
12646	Displays the error page .
12647	Extract parameters from route parameters .
12648	Get controller instance .
12649	Get buttons .
12650	Get the options for the given options .
12651	Evaluate expression
12652	Get a zone
12653	Add a new record
12654	Get a table by name
12655	Get the transaction .
12656	Load default metadata
12657	Set parent id .
12658	Get the budget category
12659	Get all category words .
12660	Flush cache data .
12661	Add a key to the collection .
12662	Remove a key from the collection .
12663	Remove cache data from cache
12664	Get a boolean value .
12665	Create a new Parameter instance .
12666	Extract params from collection
12667	Event handler .
12668	Add a new route .
12669	Get all annotations for a given type .
12670	Set service properties .
12671	Creates a container from an annotation .
12672	Get service context from service context .
12673	Get the cache component .
12674	Get the query builder .
12675	Create a component .
12676	Get the stated class name .
12677	Returns the stated class for the given object .
12678	List packages .
12679	Returns a list of available states .
12680	Compile the command .
12681	Generate the arguments .
12682	Executes the process .
12683	Save files to file .
12684	Replace all values in the stream .
12685	Add a route .
12686	Add a route .
12687	Add a POST route
12688	Add a new route .
12689	Add a PATCH route .
12690	Adds a DELETE route .
12691	Add a HEAD route .
12692	Get a route .
12693	Get route url .
12694	Returns the route for the given request .
12695	Matches a route .
12696	Checks if the given URI is internal .
12697	Dispatch the request .
12698	Setup routes .
12699	Set dynamic route .
12700	Validate route url
12701	Match static route .
12702	Match dynamic route .
12703	Get a static route .
12704	Get the dynamic route for the given path .
12705	Route request middleware .
12706	Register the response middleware .
12707	Get the response from the given dispatch .
12708	Setup route from cache
12709	Setup routes .
12710	Renders the header .
12711	Render toggle button
12712	Get a gettext file
12713	Get the result of the query
12714	Add filters .
12715	Filter query by search .
12716	Filter the query .
12717	Add ORDER BY clause .
12718	Adds the offset to the query builder .
12719	Add limit .
12720	Find entity by id
12721	Adds a join to the query builder .
12722	Get the sort column
12723	Sets the order by sorting .
12724	Checks if the given value is valid .
12725	Replace entities in XML
12726	Reverse entities .
12727	Generate XML declaration .
12728	Get a doc type declaration
12729	Convert attributes to string
12730	Collapse empty tags
12731	Create a new XML tag
12732	Create a start element
12733	Splits a qualified name into a namespace .
12734	Check if a string is valid
12735	Dispatch an object .
12736	Add tags to the cache .
12737	Invalidate tag manager .
12738	Validate the entity .
12739	Interpolate message .
12740	Returns true if two points are equal .
12741	Checks if two points are equal .
12742	Returns the intersection between two lines .
12743	Returns true if two lines are equal .
12744	Checks if two lines are equal .
12745	Guess the direction of two points .
12746	Returns the direction of the given coordinates .
12747	Get all results .
12748	Prepares the query for the query .
12749	Remove duplicated models .
12750	Get the first row from the database .
12751	Check if a value is valid
12752	Assert that the header value is valid .
12753	Execute the query .
12754	Build request URI
12755	Set language .
12756	Set the media type .
12757	Set the result format .
12758	Sets the limit .
12759	Set entity options
12760	Set the attribute .
12761	Sets the callback .
12762	Sets whether or not or not .
12763	Get a list of photos .
12764	Log a message
12765	Create a temporary directory
12766	Get package info from tgz file
12767	Extract package information from a package file .
12768	Load package information from XML file .
12769	Load a package from a file .
12770	Get the offer details .
12771	Get all offers
12772	Search for EAN .
12773	Set file handler
12774	Set mail handler
12775	Returns a list of all log entries .
12776	Parses a log row
12777	Shutdown the debugger
12778	Handle the request .
12779	Displays the application .
12780	Initialize Bundle
12781	Add boot error
12782	Init a constant path
12783	Add a path .
12784	Get the path of the stack .
12785	Get absolute path .
12786	Determine if the user is IAM
12787	Set mode
12788	Load default configuration file .
12789	Initialize the web process .
12790	Load a bundle .
12791	Get asset converter .
12792	Generate the hash of a file
12793	Add a reply to this message .
12794	Create a new user
12795	Resume a session
12796	Calculate the given expression .
12797	Get the user details for the user .
12798	Execute raw query
12799	Generate csrf meta tags
12800	Generates a label .
12801	Generates a button .
12802	Create a submit button .
12803	Generates a submit button .
12804	Renders a reset button .
12805	Creates a hidden input .
12806	Create a password input .
12807	Process boolean options .
12808	Set hour hours .
12809	Set the minutes .
12810	Set seconds .
12811	Check if time elements are valid .
12812	Writes a file to the filesystem .
12813	Writes a file to the filesystem .
12814	Update a file .
12815	Update a stream .
12816	Write a file to the filesystem .
12817	Writes a stream to the filesystem .
12818	Rename a file .
12819	Copy a path to another path
12820	Returns the metadata for the given path .
12821	Get the mimetype .
12822	Get file size
12823	Get the timestamp of a file .
12824	Get the visibility of a path .
12825	Set visibility .
12826	Set the visibility of a file .
12827	Set the visibility of a file .
12828	List all files .
12829	Get local adapter .
12830	Get S3AdapterAdapter instance
12831	Process request .
12832	Deserialize a request .
12833	Checks if an object has access to the given object .
12834	Parse a block .
12835	Get path .
12836	Get Authentication object
12837	Get data from url
12838	Parse JSON data
12839	Get all data from the API
12840	Get entity alias
12841	Create a query builder .
12842	Create a new ResultSetMappingBuilder
12843	Returns all identifier identifiers .
12844	Returns the minimum value of a column .
12845	Gets paginator .
12846	Check if an entity is an entity .
12847	Returns the identifier for the given entity .
12848	Validate the given entity .
12849	Converts an entity into an array .
12850	Filter uploaded files .
12851	Get size limit
12852	Check if a key exists
12853	Handle the console .
12854	Terminate the console .
12855	Renders account categories .
12856	Run the controller .
12857	Initialize the default time zone
12858	Execute the given exception .
12859	Returns an array representation of the form .
12860	Initializes the database .
12861	Get list of children
12862	Detect loop .
12863	Invalidate the cache .
12864	Get last batch number
12865	Creates a response .
12866	Create a JSON response .
12867	Create a response from a template
12868	Execute all files .
12869	Get the adapter
12870	Set the adapter .
12871	Set prefix .
12872	Get a value from the server .
12873	Display the view .
12874	Install the table
12875	Display error errors .
12876	Get the serializer
12877	Increment the version number .
12878	Get body
12879	Get body array
12880	Get the body object
12881	Get results from query
12882	Set default headers
12883	Set the body .
12884	Returns an array representation of the response .
12885	Get unique validation rule .
12886	Get a URL from S3
12887	Get the adapter
12888	Get ado connection id
12889	Log error .
12890	Wraps a curl error .
12891	Read body .
12892	Write a header to the client .
12893	Write the body to the response
12894	Add a command collection .
12895	Prints a time .
12896	Print console help .
12897	Print the help of the class .
12898	Print a line
12899	Uploads the image
12900	cleanup html
12901	Save model attributes
12902	Called when the model has been saved .
12903	Decode a JSON attribute .
12904	Create a new parser instance
12905	Set the locale .
12906	Get localized question .
12907	Establish tunnel connection
12908	Check if the request is still alive .
12909	Disconnect the socket .
12910	Handle redirect .
12911	Checks if the response is a server digest .
12912	Checks if the response is a proxy digest .
12913	Write body to socket
12914	Read chunked response .
12915	Build query string
12916	Build WHERE clause
12917	Builds SQL join string
12918	Builds a group by group
12919	Prepares the dependencies for the given field .
12920	Merge data from array of results
12921	Clean a string
12922	Checks to see if there are any callbacks .
12923	Decode YAML configuration .
12924	Starts the session
12925	Execute a query
12926	Insert data into database
12927	Update an existing record .
12928	Updates an existing record .
12929	Execute a SELECT query .
12930	Get all rows from the database
12931	Get an array of ids
12932	Execute a SELECT query .
12933	Returns the value of the selected row .
12934	Prepare a prepared statement
12935	Execute a prepared statement
12936	Fetch a prepared statement
12937	Get the log
12938	Parses the given value .
12939	Filter the given value .
12940	Dispatch the router .
12941	Terminate route middleware .
12942	Parses an element .
12943	Processes the end of the element .
12944	Run a command .
12945	Process the webhook .
12946	Modify the uploadable behavior .
12947	Create a new instance from a JSON string .
12948	Open session .
12949	Read session data .
12950	Delete a session
12951	Write data to session .
12952	Render a widget .
12953	Returns the id of the model .
12954	Check if the validation is valid
12955	Checks if the application is valid .
12956	Get a record by field
12957	Delete a record
12958	Get all records .
12959	Save record .
12960	Displays the dashboard .
12961	List all budgets
12962	Verify an account
12963	Loads the banks .
12964	Check month month
12965	Setup the installer .
12966	Execute the constructor .
12967	Get the name of the user .
12968	Save the user .
12969	Change user password
12970	Add a context to the container .
12971	Get the writer .
12972	Parse the version string .
12973	Compares the version .
12974	Get all children of a given parent .
12975	Get the parent of the tree .
12976	Returns the parents of this object .
12977	Convert an object into an array
12978	Apply a modifier .
12979	Creates a CssResource from a URL .
12980	Display the address book .
12981	Display the contacts .
12982	Display a message .
12983	Manage messages .
12984	Append extensions to the given array .
12985	Destroy the session
12986	Add autoload method
12987	Remove autoload method
12988	Remove aggregate object
12989	Get command line arguments
12990	do getopt command
12991	Parse short options
12992	Parse command line arguments
12993	Convert a directory to a struct
12994	Convert multiple files to struct
12995	Remove a file or directory
12996	Create a directory
12997	Create a temporary directory
12998	Remove temporary files
12999	Finds a list of files .
13000	Creates a new log .
13001	Sets the budget id .
13002	Get the budget
13003	Get all transaction transactions .
13004	Prepare a value .
13005	Set url .
13006	Set the request method
13007	Set the authentication credentials .
13008	Add a cookie
13009	Sets the body of the request .
13010	Returns the body of the request body .
13011	Add a file to uploads .
13012	Attach an observer .
13013	Detach observer .
13014	Set last event .
13015	Set the adapter .
13016	Set cookie jar
13017	Sends the HTTP request .
13018	Detect mime type .
13019	Displays a setting .
13020	Creates a new setting .
13021	Creates a new setting .
13022	Update a setting .
13023	Add a WHERE clause .
13024	Returns a new response with the given status code .
13025	Remove records from the database .
13026	Checks if an event is registered .
13027	Get field value
13028	Returns the message for the given message .
13029	Create an AccessDeniedHttpException
13030	Set flash message .
13031	Commit transaction .
13032	Format a date string
13033	Format a time
13034	Format a boolean value .
13035	Set time zone .
13036	Get a service instance .
13037	Checks if a given class name exists .
13038	Creates a new instance of the given class .
13039	Add a resolver .
13040	Adds a service instance to the container .
13041	Get the pool
13042	Query the query .
13043	Execute a query .
13044	Create a new connection .
13045	Gets the least recently connected connection .
13046	Install assets .
13047	Get reflection class
13048	Get the version of a class .
13049	Find class name by version .
13050	Get the migration methods .
13051	Get required class options
13052	Show a job .
13053	Creates a new job .
13054	Create a new job .
13055	Update a job .
13056	Set client name
13057	Guess the file extension .
13058	Get the mime type
13059	Get human readable size
13060	Returns a DateTime object as a DateTime object .
13061	Returns a DateTime object as a DateTime object .
13062	Returns a DateTime object as a DateTime object .
13063	Creates a new File from a file .
13064	Find all applications .
13065	Find application by id
13066	Create a new application .
13067	Delete an application .
13068	Update the application .
13069	Returns the closest date interval before the given date .
13070	Returns the closest date interval after the given date .
13071	Builds a DateTimeInterval .
13072	Returns the day before the given day number .
13073	Returns the day after the given day number .
13074	Returns information about a role .
13075	Commit a transaction .
13076	Roll back the transaction .
13077	Set transaction isolation level
13078	Get database connection
13079	Set backend backend
13080	Log a debug message .
13081	Log a message .
13082	Log a notice .
13083	Log a warning message .
13084	Log an error message .
13085	Log a critical message .
13086	Log an alert message .
13087	Log an emergency message .
13088	Log a message .
13089	Returns the value of a property .
13090	Truncate html
13091	Install the installer .
13092	Delete package files
13093	Add a file operation .
13094	Download packages .
13095	Set downloaded packages
13096	Check if a point is valid .
13097	Create an IteratingException
13098	Register services .
13099	Adds an array of values to the model .
13100	Change classes .
13101	Parse classes .
13102	Get column schema .
13103	Bind an abstract binding .
13104	Bind a closure to the container .
13105	Registers a callback .
13106	Check if an instance is shared .
13107	Get a closure closure .
13108	Add dependencies for a call parameter .
13109	Returns the context for the given abstract .
13110	Add middleware to the request .
13111	Register the middleware .
13112	Terminate middleware .
13113	List all webservices
13114	Get the WSDL file
13115	Initialize minify options
13116	Convert date to timestamp
13117	Convert a timestamp to an array
13118	Convert date to string
13119	Get the time of a given timestamp .
13120	Get the properties of this object .
13121	Checks to see if there are any callbacks .
13122	Parse parameter values
13123	Adds a parameter to the scenario .
13124	Filter a string
13125	Displays a breakpoint .
13126	Download all channels
13127	Add a mock instance
13128	Create a new object
13129	Update the profile .
13130	Check if a list of namespaces exist .
13131	Returns the value of a variable .
13132	Create a response .
13133	Render a template .
13134	Returns a JSON response .
13135	Create a JSON response .
13136	Redirect to the application .
13137	Redirect route .
13138	Validate email address .
13139	Calculates the difference between two dates .
13140	Calculates the difference between two dates .
13141	Calculates the difference between two dates .
13142	Returns the difference between two dates .
13143	Get all commands .
13144	Set command properties .
13145	Get a ConsoleCommand instance from the given command .
13146	Get storage path
13147	Find a model .
13148	Get task parameters
13149	Perform a request .
13150	Get a response .
13151	Perform a POST request .
13152	Perform a HEAD request .
13153	Perform a PUT request .
13154	Patch a PATCH request .
13155	Delete a given uri .
13156	Deserialize host .
13157	Starts a checkpoint .
13158	Merge the data with the given data .
13159	Reads the contents of a file .
13160	Get a package by name
13161	Initialize the publisher .
13162	Clears the initialization code .
13163	Get the script code
13164	Evaluate PHP code
13165	Initialize the template paths .
13166	Add template path
13167	Wrap a viewable .
13168	Get schema names .
13169	Get table names .
13170	Refresh table metadata
13171	Get table metadata
13172	Get table metadata
13173	Set table metadata
13174	Get cache key .
13175	Get option by name
13176	Get the tmp dir
13177	Initializes the database .
13178	Create a new role
13179	Assign a child role .
13180	Registers a function prophecy .
13181	Invokes a mock .
13182	Get parameter value .
13183	Resolves a string .
13184	Converts a query string to a meta type
13185	Parse twitter query .
13186	Renders panes .
13187	Register user .
13188	Set the given vector .
13189	Opens a cipher
13190	Initializes the cipher .
13191	Connects to a client
13192	Verify user credentials .
13193	Fetch user data
13194	Returns a new AuthExtension instance
13195	Add token tokens
13196	Get auth protocol .
13197	Check if the given credentials is OAuth1
13198	Checks if the given credentials is OAuth2 .
13199	Close the stream .
13200	Attach a stream to the stream .
13201	Get the contents of the stream .
13202	Set the stream .
13203	Write data to file .
13204	Get account virtual account
13205	Get previous account
13206	Updates the account virtual account .
13207	Set query cache duration .
13208	Set connection .
13209	Fetch the results of a row .
13210	Inserts a table into the database .
13211	Execute the query .
13212	Log query .
13213	Query the query .
13214	Execute the query .
13215	Checks if the query matches the given pattern .
13216	Execute SQL statement .
13217	Invokes a closure .
13218	Check if the given layer is valid
13219	Prepare the dom element
13220	Dispatches the application and routes .
13221	Render error page
13222	Render debug information .
13223	Render a view .
13224	Initialize the bot
13225	Add response responses .
13226	Register a short code tag .
13227	Remove short code tag .
13228	Parse shortcode tag .
13229	Parse shortcode attributes .
13230	Get the download URL for a package .
13231	List packages .
13232	Sort versions by version number .
13233	Get array data
13234	Get all hours
13235	Parses a page .
13236	Returns all accounts for a given user .
13237	Print the application message .
13238	Display usage message .
13239	Get usage path .
13240	Display arguments .
13241	Display options section .
13242	Get option name .
13243	Generate a Roll2D5RollsRolls .
13244	Set columns .
13245	Adds a WHERE clause .
13246	Adds a predicate to the query .
13247	Join a table .
13248	Joins a table .
13249	Adds a join to the query .
13250	Returns the SQL query string .
13251	Execute the query
13252	Prefix table join condition .
13253	Get a value from the collection .
13254	Set a value to the collection .
13255	Remove a key from the collection .
13256	Creates an INSERT statement
13257	Create an error stack
13258	Get a singleton instance
13259	Handle error handling
13260	Set the message callback
13261	Set default callback
13262	Removes an error from the stack .
13263	Pop the stack from the stack
13264	Returns true if all errors have been set .
13265	Get all errors
13266	Checks if the given package has errors .
13267	Get all the errors
13268	Get error message
13269	Register configuration .
13270	Register an entry provider .
13271	Register autowired classes .
13272	Get the autowired parameters .
13273	Set the target directory
13274	Set the mode of the filter
13275	Get all routes .
13276	Set route properties .
13277	Get route routes .
13278	Creates a new route based on the given route .
13279	Creates a Router instance from an annotation .
13280	Publish route annotations .
13281	Format the response body .
13282	Format the response body .
13283	Get host port
13284	Returns the scheme host port .
13285	Returns a new instance with the given host .
13286	Returns a new instance with the given port .
13287	Returns a new URI with the given path .
13288	Returns a new URI with the given query .
13289	Returns a new instance with the given fragment .
13290	Checks if the port is standard .
13291	Validate the scheme .
13292	Validate a port .
13293	Validate a package
13294	Validate a dependency .
13295	Normalize a dependency .
13296	Add a word to a word .
13297	Tokenize a string
13298	Join an array of keys and values
13299	Check if a table exists
13300	Map class name to table
13301	Get a table by name
13302	Processes the version tag .
13303	Discovers a channel
13304	Login a user
13305	Logout a user
13306	Filter the search separator .
13307	Get migration files .
13308	Get the list of migrations .
13309	Publish a method .
13310	Send curl request
13311	Checks if the given URL is valid .
13312	Translates a directory .
13313	Creates a new app builder .
13314	Creates a new appBuilder from persister .
13315	Get the container builder dependencies .
13316	Reset a file
13317	Create a branch .
13318	Delete a branch .
13319	Push a branch
13320	Create a pull request .
13321	Clone a project
13322	Parses command output
13323	Run a command
13324	Connect to a client
13325	Add a file to the filter .
13326	Get new file name .
13327	Get the name of a file
13328	Get a service .
13329	Generate a service .
13330	Set a service .
13331	Set alias .
13332	Get parameter by id
13333	Set parameter value .
13334	Get service definition .
13335	Set a service definition .
13336	Initialize the driver .
13337	Initialize a user event .
13338	Convert table to array
13339	Checks if the string is serialized .
13340	Checks if the given function has the given prophecy .
13341	Add a route .
13342	Initialize routes .
13343	Create a controller instance .
13344	Register a controller .
13345	Register controller with annotations .
13346	Register a controller .
13347	Get the default controller and action .
13348	Register a new observer .
13349	Unregister an observed observer .
13350	Auto set channel
13351	Execute a command .
13352	Add a flash message .
13353	Redirect to the browser .
13354	Configure shared cache .
13355	Initialize the bot
13356	Finalize the middleware .
13357	Get the configuration directory .
13358	Checks that the given function is expected .
13359	Get the connection instance
13360	Configure stfalcon .
13361	Set user capabilities
13362	Create a new instance .
13363	Create a new Locator .
13364	Get the choices .
13365	Check if a constant is valid .
13366	Checks if a value is valid
13367	Check if value is valid
13368	Creates a new Adapter instance
13369	Create the controller path
13370	Create cache path
13371	Update WSDL .
13372	Compile the service
13373	Get the documentation for the controller .
13374	Get all controllers
13375	Builds the output .
13376	Build the bootstrap CSS .
13377	Get parameter value
13378	Rebase the URI .
13379	Add a new route
13380	Add static route .
13381	Checks if a static route exists .
13382	Add dynamic route .
13383	Checks if a dynamic route exists .
13384	Get a named route .
13385	Creates the sub leaves .
13386	Locates a file .
13387	Convert this number to another system .
13388	Checks if two numbers are equal .
13389	Returns the decimal value .
13390	Add another number to this number
13391	Subtracts a number from another number .
13392	Multiplies the given multiplicator .
13393	Divide this number .
13394	Get the adapter
13395	Get aliases list
13396	Find aliases .
13397	Replace migration files .
13398	Reads a line from the socket .
13399	Enable SSL connection .
13400	Check if the socket is timeout .
13401	Add a route .
13402	Set the items .
13403	Builds the HTML tag .
13404	Prepare the name attribute .
13405	Check data attribute .
13406	Adds a resource to the queue .
13407	Creates a new day of the given array .
13408	Create a Day object from an associative array .
13409	Checks if the given interval is a valid interval .
13410	Create a new Request object from an array
13411	Set server info
13412	Set headers .
13413	Set POST fields
13414	Set query fields
13415	Returns an array of headers
13416	Convert request to array
13417	Add a command .
13418	Add a parsed command .
13419	Get a command .
13420	Remove a command .
13421	Matches a command .
13422	Get all registered commands .
13423	Setup the console .
13424	Setup the commands from the cache .
13425	Get the cacheable .
13426	Set separator .
13427	Register a listener .
13428	Listen for events .
13429	Check if an event is registered .
13430	Remove a listener .
13431	Check if an event has been registered .
13432	Add an event .
13433	Remove an event .
13434	Trigger an event .
13435	Setup events .
13436	Setup events from cache
13437	Initialize the template
13438	Check if template exists
13439	Fetch the template
13440	Loads an import file .
13441	Save the current data
13442	Initializes the reader .
13443	Initializes the configuration .
13444	Get default options
13445	Encrypts the given data .
13446	Decrypt the given data .
13447	Generate key
13448	Throw an exception .
13449	Render an exception .
13450	Returns the view file for the given exception .
13451	Returns a Response object .
13452	Get exception data .
13453	Get stdio logger
13454	Read session data .
13455	Write data to session .
13456	Destroy a session
13457	Update timestamp .
13458	Extract data from session
13459	Extract timestamp from record .
13460	Get session data from cache
13461	Returns the message with the given variables .
13462	Add constraint to table .
13463	Add autoIncrement to the column .
13464	Add a key .
13465	Adds a foreign constraint .
13466	Get the SQL statement for a column .
13467	Start the module .
13468	Create an IterationException
13469	Render toggle button
13470	Get the response .
13471	Returns the module name .
13472	Loads a class reflection .
13473	Loads a reflection object .
13474	Loads a property .
13475	Returns the name of the called method .
13476	Get the properties of a class .
13477	Set property value
13478	Set properties of an object
13479	Loads all annotations from a given class .
13480	Clears all classes .
13481	Check if a class is instantiable .
13482	Get reflection method .
13483	Get the reflection class .
13484	Check method arguments .
13485	Retrieve reflection from cache
13486	Add reflection to cache
13487	Get cache key .
13488	Returns the class name of the given object .
13489	Parse the doc comment .
13490	Get the class doc for a given object
13491	Get the documentation of a method .
13492	Initialize the DB
13493	Returns the namespace for the given class .
13494	Un indentation
13495	Perform the post processing .
13496	Extract photos from source
13497	Fetch images from photos
13498	Extract images from source
13499	Find placeholder start position .
13500	Build route path .
13501	Search for routes in route .
13502	Replace placeholders .
13503	Initialize the source .
13504	Load messages from a category .
13505	Find categories by pattern .
13506	Checks if a property exists .
13507	Sends an exception .
13508	Get the content of an exception .
13509	Format a path .
13510	Format arguments .
13511	Escape html .
13512	Set the validator .
13513	Transform a string into an array .
13514	Handle disconnections .
13515	Called when a phone is received .
13516	Callback for a phone home .
13517	Called when the callback is closed .
13518	Get proxy command handler .
13519	View configuration .
13520	Load the bundle configuration .
13521	Load messages .
13522	Set HTTP headers
13523	Set server cgi environment variables .
13524	Perform a POST request
13525	Send a JSON RPC request .
13526	Connect to database .
13527	Escapes a string .
13528	Initialize Reaction
13529	Checks if the field has a slug .
13530	Returns a list of all fields in the table .
13531	Get fields by type
13532	Get date from given time
13533	Determine the preferred language .
13534	Returns the acceptable charset .
13535	Returns the mime type .
13536	Match the Accept header .
13537	Sort the Accept header .
13538	Send a HEAD request
13539	Convert charset to string
13540	Get entity manager
13541	Returns the structure structure for the given database .
13542	Get auto object from database
13543	Get table structure
13544	Get model object
13545	Builds the objects structure structure
13546	Prepare error .
13547	Check the budget .
13548	Check the budget for the given budget .
13549	Finds a budget by a budget .
13550	Sets the id parent .
13551	Sets the main menu .
13552	Get the current account user
13553	Get the bank instance
13554	Parse a CSV file .
13555	Get the type icon .
13556	Build query
13557	Escape a single value .
13558	Create a redirect response .
13559	Sets the secure url .
13560	Redirect to the browser .
13561	Throw exception .
13562	Filters all commands .
13563	Sort commands .
13564	Outputs the command line .
13565	Initialize the session
13566	Start timer .
13567	Get the current time .
13568	Display a timer .
13569	Initialize provider .
13570	Initialize the application .
13571	Initialize basic configuration .
13572	Locates the config directory .
13573	Locates the class loader .
13574	Create a new object
13575	Get config reader
13576	Initializes the container .
13577	Initialize static application .
13578	Checks if the token is valid .
13579	Get token from request
13580	Initialize the DarkSky API .
13581	Get current weather
13582	Get precipitation for a given location .
13583	Get the latitude for a given location .
13584	Add error message .
13585	Get English intensity .
13586	Get the annotations for a class .
13587	Get the annotations of a class .
13588	Get the annotations for a class .
13589	Get the annotations for a property .
13590	Get all annotations for a given type .
13591	Get all properties of a class .
13592	Get the annotations for a given method .
13593	Get all annotations for a given type .
13594	Get all methods of a class .
13595	Get the annotations for a given function .
13596	Filter annotations by type
13597	Set annotation values .
13598	Get reflection class .
13599	Get reflection property .
13600	Get reflection method .
13601	Get a reflection function .
13602	Returns the dependencies of the given parameters .
13603	Returns the length of the line .
13604	Returns the center of this point .
13605	Render the form .
13606	Render a field .
13607	Check if a key exists
13608	Returns the full name of the file .
13609	Scan directory
13610	Add a header
13611	Get all headers
13612	Create a DB .
13613	Get database tables
13614	Update the database from the given structure
13615	Update DB relations .
13616	Update many tables .
13617	Generates the SQL for the given structure .
13618	Generate SQL for column .
13619	Generate index for index
13620	Generates a constraint for a foreign key .
13621	Get all keyvalues for a given key type
13622	Get a list of keyvalues by type
13623	Get the annotations for a given class .
13624	Returns the annotation for a given class .
13625	Get a property annotation .
13626	Get a property from a property .
13627	Get the annotations for a given method .
13628	Returns the annotation for a given method .
13629	Returns an indexed reader .
13630	Gets reflection method .
13631	Get value from cache
13632	Sets a value to the cache .
13633	Get paths from key
13634	Process a key
13635	Check the event class name .
13636	Build event .
13637	Calculates the average of an array .
13638	Set order by field
13639	Reads the parameters .
13640	Gets a value from an object .
13641	Sets the value of a property .
13642	Filter objects by expression
13643	Set the email address .
13644	Add a new address
13645	Add a reply to the email address .
13646	Add a cc address .
13647	Add a BCC address
13648	Add an attachment .
13649	Run the console .
13650	Set the referrer to the current request
13651	Returns the current referer
13652	Builds the URL for the route
13653	Download package .
13654	Extract package from archive
13655	Reset default locale translations .
13656	Returns the first occurrence of the given needle .
13657	Create the sidebar menu .
13658	Add example menu .
13659	Register the migration repository .
13660	Publish all pages
13661	Update the database .
13662	Load all messages from a given context .
13663	Get all categories .
13664	Get file name .
13665	Validate uploaded files .
13666	Initializes the result object .
13667	Get the pattern for the given pattern .
13668	Set attributes .
13669	Detects by key .
13670	Checks if the current environment is on the server .
13671	Get the config
13672	Returns the latitude as a string .
13673	Returns a DMS longitude representation of the DMS .
13674	Returns the latitude range of the latitude .
13675	Returns the latitude range of the given latitude .
13676	Returns the distance of the given location .
13677	Checks if the given data matches the filter .
13678	Create tables from config
13679	Bundle multiple tables .
13680	Get a point
13681	Publish the console .
13682	Returns the matched URL fragment .
13683	Generates the response for the given request .
13684	Retrieve data from cache
13685	Returns true if the string ends with the given string .
13686	Counts words in a string .
13687	Create a new Authenticatable .
13688	Initialize the session .
13689	Open the session .
13690	Open the session
13691	Register the session handler .
13692	Close the session .
13693	Destroy the session .
13694	Regenerates a session .
13695	Read session .
13696	Write session data .
13697	Destroy a session .
13698	Set a value in the cache
13699	Remove a key from the cache
13700	Remove all data from session
13701	Get a flash value .
13702	Get all flash counters
13703	Set a flash value .
13704	Add a flash message
13705	Remove flash .
13706	Removes all flash counters .
13707	Freeze session data
13708	Unfreeze the session
13709	Create session cookie
13710	Validate the after date .
13711	Validate date before date
13712	Validate a date format .
13713	Checks if the prophecy is valid .
13714	Assign value to array
13715	Get controller plugin config
13716	Execute a rule .
13717	Process multiple tests
13718	Parses raw data .
13719	Create a new view .
13720	Set variables .
13721	Set a variable .
13722	Escape a value .
13723	Get template directory .
13724	Set the layout .
13725	Set template .
13726	Render a partial template .
13727	Ends the block .
13728	Render the view .
13729	Get full path .
13730	Render a template
13731	Render a layout .
13732	Add route to array
13733	Get the separator for a line
13734	Write header message .
13735	Returns a list of all available notifications .
13736	Create a new notification
13737	Set the key .
13738	Determine if the file is renamed .
13739	Guess the file extension .
13740	Guess the filename .
13741	Set rename .
13742	Download file .
13743	Upload a tinymce
13744	Handles the exception .
13745	Execute a curl request
13746	Execute the request
13747	Set cookie file
13748	Try to choose multiple parameters
13749	List all items .
13750	Initializes the options .
13751	Write the configuration to the file .
13752	Get exception from context
13753	Convert exception to array
13754	Render a file
13755	Check if a file is a core file .
13756	Returns the name of the exception .
13757	Sets the output of the response
13758	Generate minify url
13759	Set amount default value
13760	Set date start date
13761	Set date end date
13762	Sets the state of the model .
13763	Sets the month bitmask .
13764	Get all the category category categories .
13765	Get all the budget month month
13766	Execute a SQL statement .
13767	Returns a PDO exception .
13768	Loads a file
13769	Updates the database .
13770	Downgrades the database .
13771	Inserts a table into a table .
13772	Execute a batch insert .
13773	Update a table .
13774	Delete a table .
13775	Renames a table .
13776	Drop a table .
13777	Truncate a table .
13778	Drop a column .
13779	Renames a column .
13780	Change a column .
13781	Add primary key .
13782	Drop a primary key .
13783	Add a foreign key .
13784	Drop a foreign key .
13785	Create an index .
13786	Drop an index .
13787	Add a comment to a table .
13788	Add a comment to a table .
13789	Drop comment from table .
13790	Drop comment from table
13791	Executes a command .
13792	Log a message .
13793	Validate a regular expression .
13794	Captures the given text .
13795	Split text into array .
13796	Replaces the text with the given text .
13797	Configure form .
13798	Get the secure image url
13799	Get model by id
13800	Get a model by ID
13801	Get list of models
13802	Save a model .
13803	Delete a model .
13804	Get all records in the database
13805	Get a list of models with the given keys .
13806	Set a cookie
13807	Connect to the server
13808	Save record .
13809	Set data .
13810	Returns an array representation of this record .
13811	Returns the value of the given field .
13812	Sets the value of a record .
13813	Get the primary key predicate .
13814	Parse a path .
13815	Validate path .
13816	Split segments into separate segments .
13817	Parse a path .
13818	Get parameter replacements .
13819	Store a value in the cache .
13820	Flush the cache .
13821	Process response data .
13822	Invokes the given action .
13823	Get the content type .
13824	Regenerate a new id
13825	Create a new session id
13826	Create GC timer .
13827	Set content type .
13828	Sets the buttons .
13829	Add a button .
13830	Validate the given type .
13831	Validate the given size .
13832	Register commands .
13833	Create a tar archive
13834	Adds a string to the archive .
13835	Checks if a file is malicious
13836	Parse a command .
13837	Migrate from another object
13838	Get unique keys .
13839	Get primary key .
13840	Get primary keys .
13841	Get the priority .
13842	Gets the validator .
13843	Load mime types
13844	Load mime aliases .
13845	Unlink a file
13846	Returns a string representation of the permissions as a string .
13847	Convert permissions to octal .
13848	Adds an inner join .
13849	Convert the query to SQL
13850	Execute search query
13851	Create a table
13852	Load modules .
13853	Get the container .
13854	Initialize the bot
13855	Select columns .
13856	Set the table name .
13857	Set column value .
13858	Add a WHERE clause .
13859	Add a WHERE clause .
13860	Sets the order by ascending order .
13861	Sets the order by the given column .
13862	Returns the query string .
13863	Set the where clause .
13864	Sets the ORDER BY clause .
13865	Returns the select query .
13866	Get insert query
13867	Returns the query string .
13868	Get the delete query .
13869	Builds a SET query .
13870	Get where clause .
13871	Returns the ORDER BY clause .
13872	Dispatch an expression .
13873	Register form .
13874	Edit a user .
13875	Get the version information .
13876	Create a route
13877	Handles the request .
13878	Resolve a route .
13879	Get the home url .
13880	Set component definition .
13881	Restart uilisateur
13882	Get user by id
13883	Returns active users .
13884	Save messages to file .
13885	Find a value in a list
13886	Find all relations in the model .
13887	Reads the next row .
13888	Reads a column from the database .
13889	Reads an object
13890	Read all results from the database .
13891	Get column count
13892	Find constraints for a table .
13893	Get the server version .
13894	Publish routes .
13895	Parse routes data .
13896	Builds route expressions .
13897	Register a service .
13898	Register a service .
13899	Register a service context .
13900	Creates a Service from a context .
13901	Check if a service is registered .
13902	Check if a service has a context .
13903	Get a service .
13904	Make a service .
13905	Get a singleton instance .
13906	Get the provided service provider .
13907	Returns the index for the given service id .
13908	Setup services .
13909	Setup the services from the cache .
13910	Setup service providers .
13911	Get cacheable data
13912	Get address lines .
13913	Set the level of the filter .
13914	Get unique id
13915	Register routes .
13916	Resolve action .
13917	Check if action is valid
13918	Called when an action is executed .
13919	Render a partial view .
13920	Render a view .
13921	Get the list of actions .
13922	Render a view .
13923	Render a view .
13924	Normalize action method .
13925	Resolve error as HTML .
13926	Resolve error response .
13927	Get error data .
13928	Get the name of an exception .
13929	Validate action
13930	Get action id
13931	Get action method
13932	Converts a color to a hexadecimal color
13933	Convert a color to RGBA
13934	Returns the dominant image of a given image .
13935	Get stdin stream .
13936	Select a single prompt .
13937	Append a file to a path .
13938	Get PgClient instance
13939	Execute a SQL statement .
13940	Writes the stream to the given path .
13941	Creates a new ServerRequest object from the passed arguments .
13942	Returns the value of a header .
13943	Strip the query string .
13944	Marshal host and port and port
13945	Normalize nested files
13946	Checks if the string ends with the given string .
13947	Generate a random string
13948	Create the edges for the given class .
13949	Find annotations for given class
13950	Create a new repository .
13951	Fetch all records from the database
13952	Update a model .
13953	Set status code .
13954	Set the headers .
13955	Get the date header .
13956	Set date header
13957	Add a cache control .
13958	Get cache control
13959	Remove a cache control .
13960	Checks if the response is valid .
13961	Returns the age of the response .
13962	Expire the response .
13963	Get the expiration time .
13964	Returns the maximum age of the response .
13965	Sets the size of the response .
13966	Set the expiration time .
13967	Set the response status .
13968	Check if the response is invalid .
13969	Checks if the status code is in the status code .
13970	Check if the response is successful .
13971	Check if the response is redirection .
13972	Checks if the client is a client error .
13973	Check if the response is a redirect .
13974	Checks if the response is empty .
13975	Close output buffers .
13976	Initialize the request .
13977	Validate HTTP method .
13978	Locate a command .
13979	Find all files in the given command .
13980	Download package file
13981	Remove installed packages .
13982	Detect duplicate duplicates .
13983	Load package from file
13984	Get parameters from body
13985	Enable logging .
13986	Returns the amount difference between this transaction .
13987	Add a month to the bitmask .
13988	Checks if the given month is a month .
13989	Returns the length of the request .
13990	Get the boundary
13991	Loads a user by username
13992	Create a new user .
13993	Set IP address
13994	Render a view .
13995	Publish the given stream .
13996	Marks the resource materialize .
13997	Add parameters to the request .
13998	Fetch the message .
13999	Encrypt a message
14000	Decrypts an encrypted message
14001	Decrypt a string
14002	Encrypt an object
14003	Decrypts a string
14004	Get option value
14005	Initialize the class
14006	Replace magic fields
14007	Converts a query to a QueryBuilder .
14008	Converts a rich text to a text .
14009	Converts a rich text .
14010	Serialize a block .
14011	Remove a cookie .
14012	Send the response .
14013	Validate status code .
