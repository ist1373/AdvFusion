0	Uses the config gitlab - domains to see if the driver supports the url for the repository given .
1	Builds dependency information . It detects used package . xml format .
2	Builds dependency information from package . xml 1 . 0 format
3	Builds dependency information from package . xml 2 . 0 format
4	Builds dependency constraint of extension type
5	Builds dependency constraint of package type
6	Parses version constraint
7	Softened version parser
8	Mark an existing package as being installed and having to remain installed
9	Attempts to authorize a GitLab domain via OAuth .
10	Loads the most current list of packages that are installed meaning from lock ideally or from installed repo as fallback
11	Replace local repositories with InstalledArrayRepository instances
12	Whether or not generated autoloader are optimized
13	Whether or not generated autoloader considers the class map authoritative .
14	Copy a file out of the cache
15	Replaces current version and pretty version with passed values . It also sets stability .
16	Returns the md5 hash of the sorted content of the composer file .
17	Searches and returns an array of locked packages retrieved from registered repositories .
18	Returns the packages s datetime for its source reference .
19	Attempts to fetch the repository data via the BitBucket API and sets some parameters which are used in other methods
20	Makes a decision and propagates it to all rules .
21	Reverts a decision at the given level .
22	Adds a new package to the repository
23	Removes package from repository .
24	Copy the remote file in local .
25	Get the content .
26	Get contents of remote URL .
27	Writes writable repository .
28	Register error handler .
29	Find package requires and child requires
30	Adds packages to the package list
31	Callback line parser which process hgignore lines
32	Add a rule as a reason
33	Store a reason descriptor but ignore duplicates
34	Turns a job into a human readable description
35	Prints all available versions of this package and highlights the installed one if any .
36	print link objects
37	Prints the licenses of a package with metadata
38	Init styles for tree
39	Generate the package tree
40	Fetch root identifier from GitHub
41	Match hostname against a certificate .
42	Extract DNS names out of an X . 509 certificate .
43	Parses package node .
44	Dispatch a script event .
45	Dispatch a package event .
46	Dispatch a installer event .
47	Adds object methods as listeners for the events in getSubscribedEvents
48	Retrieves all listeners for a given event
49	Finds all listeners defined as scripts in the package
50	Push an event to the stack of active event
51	Add a repository .
52	Sets whether to output download progress information for all registered downloaders
53	Sets installer downloader for a specific installation type .
54	Returns downloader for a specific installation type .
55	Downloads package into target dir .
56	Updates package from initial to target version .
57	Removes package from target dir .
58	Determines the install preference of a package
59	Add suggested packages to be listed after install
60	Add all suggestions from a package .
61	Checks if a directory is empty
62	Attempts to unlink a file and in case of failure retries after 350ms on windows
63	Attempts to rmdir a file and in case of failure retries after 350ms on windows
64	Returns size of a file or directory specified by path . If a directory is given it s size will be computed recursively .
65	Normalize a path . This replaces backslashes with slashes removes ending slash and collapses redundant separators and up - level references .
66	return true if that directory is a symlink .
67	resolve pathname to symbolic link of a directory
68	Creates an NTFS junction .
69	Removes a Windows NTFS junction .
70	Registers an autoloader based on an autoload map returned by parseAutoloads
71	Filters out dev - dependencies
72	Attempts to authorize a Bitbucket domain via OAuth
73	Authorizes a Bitbucket domain interactively via OAuth
74	Retrieves an access token from Bitbucket .
75	Moves the internal iterator to the specified offset
76	Removes the current element from the list
77	Set common options and arguments .
78	Searches for a package by it s name and version in managed repositories .
79	Returns a new repository for a specific installation type .
80	Suppresses given mask or errors .
81	Calls a specified function while silencing warnings and below .
82	Installs PEAR source files according to package . xml definitions and removes extracted files
83	Perform copy actions on files
84	Parses tildes and environment variables in paths .
85	Generate a distinct filename for a particular version of a package .
86	Create an archive of the specified package .
87	Returns the default answer normalizer .
88	Checks if this rule is equal to another one
89	Writes json file .
90	Throws an exception according to a given code with a customized message
91	Parses json string and returns hash .
92	Validates the syntax of a JSON string
93	Checks the given path against all exclude patterns in this filter
94	Checks the local . gitignore file for the Composer vendor directory .
95	Given a package name this determines the best version to use in the require key .
96	Reads PEAR channel through REST interface and builds list of packages
97	Reads channel supported REST interfaces and selects one of them
98	Registers a set of PSR - 0 directories for a given prefix either appending or prepending to the ones previously set for this prefix .
99	Registers a set of PSR - 4 directories for a given namespace either appending or prepending to the ones previously set for this namespace .
100	Registers a set of PSR - 0 directories for a given prefix replacing any others previously set for this prefix .
101	Registers a set of PSR - 4 directories for a given namespace replacing any others previously set for this namespace .
102	Finds the path to the file where the class is defined .
103	Assumes that installed packages come first and then all highest priority packages
104	Finds whether a request failed due to rate limiting
105	Places the second watch on the rule s literal decided at the highest level
106	Moves a watch from one literal to another
107	Validates that the passed URL is allowed to be used by current config or throws an exception .
108	Parses the version and adds a new package to the repository
109	Retrieves the current git version .
110	Loads all plugins from currently installed plugin packages
111	Adds a plugin activates it and registers it with the event dispatcher
112	Recursively generates a map of package names to packages for all deps
113	Retrieves the path a package is installed to .
114	opens a url in your system default browser
115	Execute an SVN remote command and try to fix up the process with credentials if necessary .
116	Execute an SVN local command and try to fix up the process with credentials if necessary .
117	A method to create the svn commands run .
118	Return the credential string for the svn command .
119	Get the password for the svn command . Can be empty .
120	Detect Svn Auth .
121	Create the auth params from the configuration file .
122	Create the auth params from the url
123	Returns the version of the svn binary contained in PATH
124	Give a meaningful error message to the user .
125	Searches all packages providing the given package name and match the constraint
126	Creates a rule to remove a package
127	Make sure binaries are installed for a given package .
128	Returns the base path of the package without target - dir path
129	Read content from remote filesystem .
130	Read xml content from remote filesystem
131	Clone or update existing local fossil repository .
132	Disables plugins .
133	Returns installer for a specific package type .
134	Checks whether provided package is installed in one of the registered installers .
135	Install binary for the given package . If the installer associated to this package doesn t handle that function it ll do nothing .
136	Executes solver operation .
137	Executes install operation .
138	Executes update operation .
139	Uninstalls package .
140	Executes markAliasInstalled operation .
141	Executes markAlias operation .
142	Returns the installation path of a package
143	A bug in PHP prevents the headers from correctly being sent when a content - type header is present and NOT at the end of the array
144	Inserts a rule node into the appropriate chains within the graph
145	Propagates a decision on a literal to all rules watching the literal
146	Moves a rule node from one watch chain to another
147	Process the download url
148	Creates a validator object .
149	Returns a value indicating whether the validator is active for the given scenario and attribute .
150	Adds an error about the specified attribute to the model object . This is a helper method that performs message selection and internationalization .
151	Creates a DB command that can be used to execute this query .
152	Starts a batch query .
153	Starts a batch query and retrieves data row by row .
154	Converts the raw query results into the format as specified by this query . This method is internally used to convert the data fetched from database into the format as required by this query .
155	Returns the query result as a scalar value . The value returned will be the first column in the first row of the query results .
156	Add more columns to the SELECT part of the query .
157	Sets the WHERE part of the query .
158	Adds a filtering condition for a specific column and allow the user to choose a filter operator .
159	Sets the HAVING part of the query .
160	Adds an additional HAVING condition to the existing one . The new condition and the existing one will be joined using the AND operator .
161	Adds an additional HAVING condition to the existing one . The new condition and the existing one will be joined using the OR operator .
162	Adds additional parameters to be bound to the query .
163	Enables query cache for this Query .
164	Creates a new Query object and copies its property values from an existing one . The properties being copies are the ones to be used by query builders .
165	Serializes a list of links into proper array format .
166	Loads the message translation for the specified language and category or returns null if file doesn t exist .
167	Loads MIME types from the specified file .
168	Loads MIME aliases from the specified file .
169	Removes a file or symlink in a cross - platform way
170	Checks if the given file path satisfies the filtering options .
171	Creates a new directory .
172	Compares a path part against a pattern with optional wildcards .
173	Searches for the first wildcard character in the pattern .
174	Checks whether authentication is optional for the given action .
175	Removes an item from an array and returns the value . If the key does not exist in the array the default value will be returned instead .
176	Removes items with matching values from the array and returns the removed items .
177	Decodes HTML entities into the corresponding characters in an array of strings . Only array values will be decoded by default . If a value is an array this method will also decode it recursively . Only string values will be decoded .
178	Filters array according to rules specified .
179	Loads asset bundle class by name .
180	Loads dummy bundle by name .
181	Returns the asset converter .
182	Publishes a file .
183	Returns the URL of a published file path . This method does not perform any publishing . It merely tells you if the file path is published what the URL will be to access it .
184	Initializes the FragmentCache object .
185	Render a HTML input tag .
186	Renders the strike through feature .
187	Fetches the next batch of data .
188	Gets column definition .
189	Sets the isolation level of the current transaction .
190	Returns table columns info .
191	Sets the response status code based on the exception .
192	Sends the response to the client .
193	Clears the headers cookies content status code of the response .
194	Sends a file to the browser .
195	Sends the specified content as a file to the browser .
196	Sends the specified stream as a file to the browser .
197	Sets a default set of HTTP headers for file downloading purpose .
198	Sends existing file to a browser as a download using x - sendfile .
199	Redirects the browser to the specified URL .
200	Validates existence of the current attribute based on relation name
201	Check whether value exists in target table
202	Run query to check if value exists
203	Creates a query instance with the given condition .
204	Moves the cursor to an absolute position given as column and row by sending ANSI control code CUP or CHA to the terminal .
205	Word wrap text with indentation to fit the screen size .
206	Gets input from STDIN and returns a string right - trimmed for EOLs .
207	Asks user to confirm by typing y or n .
208	Gives the user an option to choose from . Giving ? as an input will show a list of options to choose from and their explanations .
209	Formats scalar value to use in XML text node .
210	Returns element name ready to be used in DOMElement if name is not empty is not int and is valid .
211	Generates a hashed variable to store the plugin clientOptions .
212	Initializes client options .
213	Registers the needed client script and options .
214	Returns the command line arguments .
215	Resolves the current request into a route and the associated parameters .
216	Formats the value as an HTML - encoded plain text with newlines converted into breaks .
217	Formats the value as an image tag .
218	Formats the value as a hyperlink .
219	Formats the value as a boolean .
220	Given the value in bytes formats number part of the human readable form .
221	Normalizes a numeric input value .
222	Checks if string representations of given value and its normalized version are different .
223	Normalizes a numeric string value .
224	Fallback for formatting value as an integer number by removing any decimal digits without rounding .
225	Fallback for formatting value as a percent number with % sign .
226	Fallback for formatting value as a currency number .
227	Returns all schema names in the database except system schemas .
228	Returns all table names in the database .
229	Determines the PDO type for the given PHP data value .
230	Returns the ID of the last inserted row or sequence value .
231	Executes the INSERT command returning primary key values .
232	Quotes a string value for use in a query . Note that if the parameter is not a string it will be returned without change .
233	Quotes a simple table name for use in a query . A simple table name should contain the table name only without any schema prefix . If the table name is already quoted this method will do nothing .
234	Unquotes a simple table name . A simple table name should contain the table name only without any schema prefix . If the table name is not quoted this method will do nothing .
235	Extracts the PHP type from abstract DB type .
236	Returns the cache key for the specified table name .
237	Sets the metadata of the given type for the given table .
238	Changes row s array key case to lower if PDO s one is set to uppercase .
239	Tries to load and populate table metadata from cache .
240	Saves table metadata to cache .
241	Initializes the detail view . This method will initialize required property values .
242	Renders the detail view . This is the main entry of the whole detail view rendering .
243	Renders a single attribute .
244	Writes log messages to syslog . Starting from version 2 . 0 . 14 this method throws LogRuntimeException in case the log can not be exported .
245	Gets the named column metadata . This is a convenient method for retrieving a named column even if it does not exist .
246	Manually specifies the primary key for this table .
247	Initializes the application component . This method is required by IApplicationComponent and is invoked by application .
248	Frees all session variables and destroys all data registered to a session .
249	Updates the current session ID with a newly generated one .
250	Sets the value indicating whether cookies should be used to store session IDs .
251	Removes a flash message .
252	Removes all flash messages . Note that flash messages and normal session variables share the same name space . If you have a normal session variable using the same name it will be removed by this method .
253	If session is started it s not possible to edit session ini settings . In PHP7 . 2 + it throws exception . This function saves session data to temporary variable and stop session .
254	Ends a widget . Note that the rendering result of the widget is directly echoed out .
255	This method is invoked right before the widget is executed .
256	This method is invoked right after a widget is executed .
257	Initializes the view component .
258	Renders a view .
259	Finds the view file based on the given view name .
260	Renders a view file .
261	Casts the given value to the specified type .
262	Deletes a model .
263	Ends the current session and store session data .
264	Prepares column name to be used in SQL statement .
265	Sets the connected logger .
266	Loads the message translation for the specified language and category . If translation for specific locale code such as en - US isn t found it tries more generic en .
267	Loads the messages from database . You may override this method to customize the message storage in the database .
268	Generates the context information to be logged . The default implementation will dump user information system variables etc .
269	Formats a log message for display as a string .
270	Check whether the log target is enabled .
271	Renders separator .
272	Send data formatted as JSON .
273	Send data formatted as XML .
274	Renders a data cell .
275	Renders the data cell content .
276	Show help message .
277	Notifies user that there are no fixtures to unload according input conditions .
278	Notifies user that fixtures were successfully unloaded .
279	Notifies user that fixtures were not found under fixtures path .
280	Prompts user with confirmation if fixtures should be loaded .
281	Prompts user with confirmation for fixtures that should be unloaded .
282	Outputs data to the console as a list .
283	Finds fixtures to be loaded for example User if no fixtures were specified then all of them will be searching by suffix Fixture . php .
284	Returns valid fixtures config that can be used to load them .
285	Sets a new header only if it does not exist yet . If there is already a header with the same name the new one will be ignored .
286	Removes a header .
287	Negotiates the response format and application language .
288	Negotiates the application language .
289	Returns a value indicating whether the requested language matches the supported language .
290	Checks if a property value is null . This method overrides the parent implementation by checking if the named attribute is null or not .
291	Populates the named relation with the related records . Note that this method does not check if the relation exists or not .
292	Returns a value indicating whether the model has an attribute with the specified name .
293	Returns the named attribute value . If this record is the result of a query and the attribute is not loaded null will be returned .
294	Sets the named attribute value .
295	Returns the old value of the named attribute . If this record is the result of a query and the attribute is not loaded null will be returned .
296	Returns a value indicating whether the named attribute has been changed .
297	Returns the attribute values that have been modified since they are loaded or saved most recently .
298	Updates the specified attributes .
299	This method is called at the beginning of inserting or updating a record .
300	Repopulates this active record with the latest data from a newly fetched instance .
301	Returns a value indicating whether the given set of attributes represents the primary key for this model .
302	Returns the text label for the specified attribute . If the attribute looks like relatedModel . attribute then the attribute will be received from the related model .
303	Returns the text hint for the specified attribute . If the attribute looks like relatedModel . attribute then the attribute will be received from the related model .
304	Resets dependent related models checking if their links contain specific attribute .
305	Sets relation dependencies for a property
306	Returns the maximum size allowed for uploaded files .
307	Converts php . ini style size to bytes .
308	Creates a URL rule using the given pattern and action .
309	Sends log messages to specified email addresses . Starting from version 2 . 0 . 14 this method throws LogRuntimeException in case the log can not be exported .
310	Composes a mail message with the given body content .
311	Returns conditions with alias .
312	Runs the application . This is the main entrance of an application .
313	Sets the directory that stores runtime files .
314	Returns the directory that stores vendor files .
315	Sets the directory that stores vendor files .
316	Renders a view in response to an AJAX request .
317	Registers the named asset bundle . All dependent asset bundles will be registered .
318	Registers a CSS file .
319	Registers a JS file .
320	Renders the content to be inserted at the end of the body section . The content is rendered using the registered JS code blocks and files .
321	Normalizes specified pathInfo .
322	Converts a word to its plural form . Note that this is for English only! For example apple will become apples and child will become children .
323	Converts an underscored or CamelCase word into a English sentence .
324	Converts a CamelCase name into space - separated words . For example PostTag will be converted to Post Tag .
325	Same as camelize but first char is in lowercase .
326	Converts a list of words into a sentence .
327	Sends this email message .
328	Returns static class instance which can be used to obtain meta information .
329	Builds a normalized cache key from a given key .
330	Retrieves a value from cache with a specified key .
331	Stores multiple items in cache . Each item contains a value identified by a key . If the cache already contains such a key the existing value and expiration time will be replaced with the new ones respectively .
332	Stores multiple items in cache . Each item contains a value identified by a key . If the cache already contains such a key the existing value and expiration time will be preserved .
333	Stores a value identified by a key into cache if the cache does not contain this key . Nothing will be done if the cache already contains the key .
334	Sequence name of table .
335	Creates ColumnSchema instance .
336	Finds constraints and fills them into TableSchema object passed .
337	Extracts the data types for the given column .
338	Extracts size precision and scale information from column s DB type .
339	This registers the necessary JavaScript code .
340	Generates a form field . A form field is associated with a model and an attribute . It contains a label an input and an error message and use them to interact with end users to collect their inputs for the attribute .
341	Validates one or several models and returns an error message array indexed by the attribute IDs . This is a helper method that simplifies the way of writing AJAX validation code .
342	Validates an array of model instances and returns an error message array indexed by the attribute IDs . This is a helper method that simplifies the way of writing AJAX validation code for tabular input .
343	Renders the sort links .
344	Generates a mailto hyperlink .
345	Generate placeholder from model attribute label .
346	Merges already existing CSS classes with new one . This method provides the priority for named existing classes over additional .
347	Removes a CSS class from the specified options .
348	Converts a CSS style array into a string representation .
349	Converts a CSS style string into an array representation .
350	Returns the value of the specified attribute name or expression .
351	Generates an appropriate input name for the specified attribute name or expression .
352	Generates an appropriate input ID for the specified attribute name or expression .
353	Escapes regular expression to use in JavaScript .
354	Tokenizes a pattern by separating normal text from replaceable patterns .
355	Prepares the data models and keys .
356	Initialize the application .
357	Checks if the given PHP extension is available and its version matches the given one .
358	Compare byte sizes of values given in the verbose representation like 5M 15K etc .
359	Checks if upload max file size matches the given range .
360	Normalizes requirement ensuring it has correct format .
361	Renders validator errors of filter model .
362	Returns the options for the grid view JS widget .
363	Renders the data models for the grid view .
364	Renders the caption element .
365	Renders the column group HTML .
366	Renders the table footer .
367	Renders the filter .
368	Renders the table body .
369	Returns all view names in the database .
370	Returns a value indicating whether the give value is empty .
371	Returns a value indicating whether ANSI color is enabled .
372	Prints a string to STDERR .
373	Returns properties corresponding to the options for the action id Child classes may override this method to specify possible properties .
374	Returns the properties corresponding to the passed options .
375	Returns the help information for the anonymous arguments for the action .
376	Returns full description from the docblock .
377	Gets the size in bytes from verbose size representation .
378	Renders the exception .
379	Renders a single call stack element .
380	Renders call stack .
381	Creates string containing HTML link which refers to the home page of determined web - server software and its full name .
382	Converts arguments array to its string representation .
383	Returns human - readable exception name .
384	Validates an image file .
385	Returns the columns and their corresponding sort directions .
386	Returns the currently requested sort information .
387	Sets up the currently sort information .
388	Returns the sort direction of the specified attribute in the current request .
389	Generates a hyperlink that links to the sort action to sort by the specified attribute . Based on the sort direction the CSS class of the generated hyperlink will be appended with asc or desc .
390	Loads default values from database table schema .
391	Returns table aliases which are not the same as the name of the tables .
392	Filters array condition before it is assiged to a Query filter .
393	Valid column names are table column names or column names prefixed with table name or table alias
394	Updates the whole table using the provided attribute values and conditions .
395	Updates the whole table using the provided counter changes and conditions .
396	Deletes rows in the table using the provided conditions .
397	Returns the schema information of the DB table associated with this AR class .
398	Deletes the table row corresponding to this active record .
399	Deletes an ActiveRecord without considering transaction .
400	Converts markdown into HTML .
401	Converts markdown into HTML but only parses inline elements .
402	Passes markup through HTMLPurifier making it safe to output to end user .
403	Override settings for specific action .
404	For each CORS headers create the specific response .
405	Adds the CORS headers to the response .
406	Returns whether this is an Adobe Flash or Flex request .
407	Returns the request parameters given in the request body .
408	Returns GET parameter with a given name . If name isn t specified returns an array of all GET parameters .
409	Returns the schema and host part of the current request URL .
410	Sets the schema and host part of the application URL . This setter is provided in case the schema and hostname cannot be determined on certain Web servers .
411	Encodes an ISO - 8859 - 1 string to UTF - 8
412	Returns the port to use for insecure requests . Defaults to 80 or the port specified by the server if the current request is insecure .
413	Sets the port to use for insecure requests . This setter is provided in case a custom port is necessary for certain server configurations .
414	Sets the port to use for secure requests . This setter is provided in case a custom port is necessary for certain server configurations .
415	Returns the content types acceptable by the end user .
416	Returns the languages acceptable by the end user . This is determined by the Accept - Language HTTP header .
417	Gets the Etags .
418	Returns the cookie collection .
419	Validates CSRF token .
420	Ends recording a block . This method stops output buffering and saves the rendering result as a named block in the view .
421	Initializes Oracle specific mutex component implementation .
422	Renders the opening tag of the field container .
423	Renders a hidden input .
424	Adjusts the for attribute for the label based on the input options .
425	Adds validation class to the input options if needed .
426	Returns the currently requested instance of this module class . If the module class is not currently requested null will be returned . This method is provided so that you access the module instance from anywhere within the module .
427	Sets the currently requested instance of this module class .
428	Initializes the module .
429	Returns an ID that uniquely identifies this module among all modules within the current application . Note that if the module is an application an empty string will be returned .
430	Returns the root directory of the module . It defaults to the directory containing the module class file .
431	Retrieves the child module of the specified ID . This method supports retrieving both child modules and grand child modules .
432	Returns the sub - modules in this module .
433	Registers sub - modules in the current module .
434	Checks if class name or prefix is incorrect
435	This method is invoked right before an action within this module is executed .
436	This method is invoked right after an action within this module is executed .
437	Compares two values with the specified operator .
438	Checks if a property is set i . e . defined and not null .
439	Returns a value indicating whether a property is defined for this component .
440	Returns a value indicating whether a property can be read .
441	Returns a value indicating whether a method is defined .
442	Returns a value indicating whether there is any handler attached to the named event .
443	Detaches an existing event handler from this component .
444	Triggers an event . This method represents the happening of an event . It invokes all attached handlers for the event including class - level handlers .
445	Returns the named behavior object .
446	Detaches all behaviors from the component .
447	Attaches a behavior to this component .
448	Renders the page buttons .
449	Initializes this component by ensuring the existence of the cache path .
450	Encodes the given value into a JSON string .
451	Prepare select - subquery and field names for INSERT INTO ... SELECT SQL statement .
452	Creates an UPDATE SQL statement .
453	Creates a DELETE SQL statement .
454	Builds a SQL statement for removing a primary key constraint to an existing table .
455	Builds a SQL statement for dropping a DB column .
456	Builds a SQL statement for dropping a foreign key constraint .
457	Creates a SQL command for dropping an unique constraint .
458	Creates a SQL command for dropping a check constraint .
459	Converts an abstract column type into a physical column type .
460	Quotes table names passed .
461	Processes columns and properly quotes them if necessary . It will join all columns into a string with comma as separators .
462	Parses the condition specification and generates the corresponding SQL expression .
463	Connects two or more SQL expressions with the AND or OR operator .
464	Inverts an SQL expressions with NOT operator .
465	Creates an SQL expressions with the BETWEEN operator .
466	Creates an SQL expressions with the IN operator .
467	Creates an SQL expressions with the EXISTS operator .
468	Creates an SQL expressions like column operator value .
469	Displays a model .
470	This method contains the logic to be executed when applying this migration . Child classes may override this method to provide actual migration logic .
471	This method contains the logic to be executed when removing this migration . The default implementation throws an exception indicating the migration cannot be removed . Child classes may override this method if the corresponding migrations can be removed .
472	Creates and executes an INSERT SQL statement . The method will properly escape the column names and bind the values to be inserted .
473	Creates and executes a batch INSERT SQL statement . The method will properly escape the column names and bind the values to be inserted .
474	Creates and executes an UPDATE SQL statement . The method will properly escape the column names and bind the values to be updated .
475	Creates and executes a DELETE SQL statement .
476	Builds and executes a SQL statement for creating a new DB table .
477	Builds and executes a SQL statement for renaming a DB table .
478	Builds and executes a SQL statement for dropping a DB column .
479	Builds and executes a SQL statement for renaming a column .
480	Builds and executes a SQL statement for changing the definition of a column .
481	Builds and executes a SQL statement for creating a primary key . The method will properly quote the table and column names .
482	Builds a SQL statement for adding a foreign key constraint to an existing table . The method will properly quote the table and column names .
483	Builds and executes a SQL statement for creating a new index .
484	Builds and executes a SQL statement for dropping an index .
485	Builds and execute a SQL statement for adding comment to column .
486	Builds a SQL statement for adding comment to table .
487	Builds a SQL statement for dropping comment from table .
488	Returns all uploaded files for the given model attribute .
489	Collects the constraint details for the given table and constraint type .
490	Collects the primary key column details for the given table .
491	Specifies the relation associated with the junction table .
492	Finds the related records for the specified primary record . This method is invoked when a relation of an ActiveRecord is being accessed in a lazy fashion .
493	Indexes buckets by column name .
494	Flushes log messages from memory to targets .
495	Returns the profiling results .
496	Returns the statistical results of DB queries . The results returned include the number of SQL statements executed and the total time spent .
497	Calculates the elapsed time for the given log messages .
498	Converts a file to a themed file if possible . If there is no corresponding themed file the original file will be returned .
499	Writes a 4 - byte integer .
500	Reads a string .
501	Returns header checkbox name .
502	Registers the needed JavaScript .
503	Generates a batch INSERT SQL statement .
504	Renders a view that represents the exception .
505	Initializes the component by configuring the default message categories .
506	Returns the message formatter instance .
507	Returns the message source for the given category .
508	Composes storage field set for session writing .
509	Displays available commands or the detailed information about a particular command .
510	List all available controllers and actions in machine readable format . This is used for shell completion .
511	Generates a well - formed string for an argument or option .
512	Adds multiple key - value pairs to cache .
513	Upgrades the application by applying new migrations .
514	Downgrades the application by reverting old migrations .
515	Upgrades or downgrades till the specified version .
516	Modifies the migration history to the specified version .
517	Truncates the whole database and starts the migration from the beginning .
518	Generates class base name and namespace from migration name from user input .
519	Finds the file path for the specified migration namespace .
520	Upgrades with the specified migration class .
521	Downgrades with the specified migration class .
522	Creates a new migration instance .
523	Includes the migration file for a given migration class name .
524	Migrates to the specified apply time in the past .
525	Migrates to the certain version .
526	Initializes the bundle . If you override this method make sure you call the parent implementation in the last .
527	Registers the CSS and JS files with the given view .
528	Shows information about current framework and extension versions .
529	This will generate application packages for download page .
530	Sorts CHANGELOG for framework or extension .
531	Extract changelog content for a specific version .
532	Ensure sorting of the changelog lines .
533	Fix some issues with PHPDoc in files .
534	Fix file PHPDoc .
535	Markdown aware fix of whitespace issues in doc comments .
536	remove multi empty lines and trim trailing whitespace .
537	Replace property annotations in doc comment .
538	Serializes a data provider .
539	Serializes a pagination into an array .
540	Adds HTTP headers about the pagination to the response .
541	Serializes the validation errors in a model .
542	Serializes a set of models .
543	Initializes the route . This method is invoked after the route is created by the route manager .
544	Writes log messages to a file . Starting from version 2 . 0 . 14 this method throws LogRuntimeException in case the log can not be exported .
545	Rotates log files .
546	Gets the CREATE TABLE sql string .
547	Add servers to the server pool of the cache specified .
548	Add servers to the server pool of the cache specified Used for memcached PECL extension .
549	Dumps a variable in terms of a string . This method achieves the similar functionality as var_dump and print_r but is more robust when handling complex objects such as Yii controllers .
550	Lists the caches that can be flushed .
551	Flushes given cache components .
552	Flushes all caches registered in the system .
553	Clears DB schema cache for a given connection component .
554	Notifies user that given caches are found and can be flushed .
555	Notifies user that given cache components were not found in the system .
556	Registers a set of component definitions in this locator .
557	Builds conjunction condition which consists of multiple independent ones . It covers such operators as and and or .
558	Builds block condition which consists of a single condition . It covers such operators as not .
559	Builds search condition for a particular attribute .
560	Builds an operator condition .
561	Class autoload loader .
562	Logs a debug message . Trace messages are logged mainly for development purpose to see the execution work flow of some code . This method will only log a message when the application is in debug mode .
563	Renders the summary text .
564	Renders the sorter .
565	Returns entry script file path .
566	Sets the entry script file path . The entry script file path can normally be determined based on the SCRIPT_FILENAME SERVER variable . However for some server configurations this may not be correct or feasible . This setter is provided so that the entry script file path can be manually specified .
567	Parses date string into UNIX timestamp .
568	Formats a timestamp using the specified format .
569	Encrypts data .
570	Validates if the given data is tampered .
571	Generates a secure hash from a password and a random salt .
572	Verifies a password against a hash .
573	Performs string comparison using timing attack resistant approach .
574	Unmasks a token previously masked by maskToken .
575	Get default value
576	Responds to the OPTIONS request .
577	Normalizes route and makes it suitable for UrlManager . Absolute routes are staying as is while relative routes are converted to absolute ones .
578	Creates a URL based on the given parameters .
579	Normalize URL by ensuring that it use specified scheme .
580	Creates a URL by using the current route and the GET parameters .
581	Returns the asset manager instance .
582	Sets asset manager instance or configuration .
583	Combines and compresses the asset files according to the given configuration . During the process new asset bundle configuration file will be created . You should replace your original asset bundle configuration with this file in order to use compressed files .
584	Applies configuration from the given file to self instance .
585	Creates full list of source asset bundles .
586	Loads asset bundle dependencies recursively .
587	Builds output asset bundle .
588	Adjust dependencies between asset bundles in the way source bundles begin to depend on output ones .
589	Registers asset bundles including their dependencies .
590	Compresses given JavaScript files and combines them into the single one .
591	Compresses given CSS files and combines them into the single one .
592	Combines JavaScript files into a single one .
593	Combines CSS files into a single one .
594	Composes trace info for bundle circular dependency .
595	Deletes bundle asset files which have been published from sourcePath .
596	Check guide for non - printable characters that may break docs generation .
597	Executes query and returns a single row of result .
598	Joins with the specified relations .
599	Joins a parent query with a child query . The current query object will be modified accordingly .
600	Adds an additional ON condition to the existing one . The new condition and the existing one will be joined using the AND operator .
601	Adds an additional ON condition to the existing one . The new condition and the existing one will be joined using the OR operator .
602	Tokenizes and returns a code type token .
603	Returns whether the longest common prefix equals to the SQL code of the same length at the current offset .
604	Returns a string of the given length starting with the specified offset .
605	Returns an index after the given string in the SQL code starting with the specified offset .
606	Determines whether there is a delimited string at the current offset and adds it to the token children .
607	Determines whether there is an operator at the current offset and adds it to the token children .
608	Determines a type of text in the buffer tokenizes it and adds it to the token children .
609	Converts a given asset file into a CSS or JS file .
610	Returns an instance of the requested class .
611	Registers a class definition with this container .
612	Registers a class definition with this container and marks the class as a singleton class .
613	Creates an instance of the specified class . This method will resolve dependencies of the specified class instantiate them and inject them into the new instance of the specified class .
614	Returns the dependencies of the specified class .
615	Resolves dependencies by replacing them with the actual object instances .
616	Registers class definitions within this container .
617	Pares PgSQL array encoded in string
618	Parses PgSQL encoded string
619	Validates the given data with the specified validation rules . This method will create a DynamicModel instance populate it with the data to be validated create the specified validation rules and then validate the data using these rules .
620	Generates the data needed to determine if dependency is changed .
621	Oracle DBMS does not support more than 1000 parameters in IN condition . This method splits long IN condition into series of smaller ones .
622	Specifies the relations with which this query should be performed .
623	Converts found rows into model instances .
624	Finds records corresponding to one or multiple relations and populates them into the primary models .
625	Handles HHVM execution errors such as warnings and notices .
626	Enables query cache for this command .
627	Binds a parameter to the SQL statement to be executed .
628	Binds a value to a parameter .
629	Executes the SQL statement and returns the value of the first column in the first row of data . This method is best used when only a single value is needed for a query .
630	Creates an INSERT command .
631	Creates a batch INSERT command .
632	Creates an UPDATE command .
633	Creates a DELETE command .
634	Creates a SQL command for creating a new DB table .
635	Creates a SQL command for renaming a DB table .
636	Creates a SQL command for dropping a DB table .
637	Creates a SQL command for truncating a DB table .
638	Creates a SQL command for adding a new DB column .
639	Creates a SQL command for renaming a column .
640	Creates a SQL command for removing a primary key constraint to an existing table .
641	Creates a SQL command for adding a foreign key constraint to an existing table . The method will properly quote the table and column names .
642	Creates a SQL command for creating a new index .
643	Creates a SQL command for adding an unique constraint to an existing table .
644	Creates a SQL command for adding a default value constraint to an existing table .
645	Creates a SQL command for resetting the sequence value of a table s primary key . The sequence will be reset such that the primary key of the next new row inserted will have the specified value or the maximum existing value + 1 .
646	Builds a SQL command for enabling or disabling integrity check .
647	Builds a SQL command for adding comment to column .
648	Builds a SQL command for adding comment to table .
649	Builds a SQL command for dropping comment from column .
650	Builds a SQL command for dropping comment from table .
651	Drops a SQL View .
652	Executes the SQL statement . This method should only be used for executing non - query SQL statement such as INSERT DELETE UPDATE SQLs . No result set will be returned .
653	Returns the cache key for the query .
654	Executes a prepared statement .
655	Resets command properties to their initial state .
656	Initializes the Mutex component .
657	Releases acquired lock . This method will return false in case the lock was not found .
658	Uses query cache for the queries performed with the callable .
659	Disables query cache temporarily .
660	Creates a command for execution .
661	Starts a transaction .
662	Executes callback provided in a transaction .
663	Returns the currently active master connection . If this method is called for the first time it will try to open a master connection .
664	Executes the provided callback by using the master connection .
665	Opens the connection to a server in the pool . This method implements the load balancing among the given list of the servers . Connections will be tried in sequential order .
666	Renders all data models .
667	Check if given string starts with specified substring . Binary and multibyte safe .
668	Returns string representation of number value with replaced commas to dots if decimal point of current locale is comma .
669	Generates the data needed to determine if dependency has been changed . This method returns the value of the global state .
670	Removes the expired data values .
671	Updates an existing model .
672	Upgrades the version value by one and stores it to database .
673	Builds a SQL statement for changing the definition of a column .
674	Normalizes data to be saved into the table performing extra preparations and type converting if necessary .
675	Returns the zero - based current page number .
676	Sets the current page number .
677	Returns a whole set of links for navigating to the first last next and previous pages .
678	Detect attribute type from given validator .
679	Validates filter condition .
680	Validates conjunction condition that consists of multiple independent ones . This covers such operators as and and or .
681	Validates search condition for a particular attribute .
682	Validates operator condition .
683	Normalizes complex filter recursively .
684	Merge current rules config with provided list of rules .
685	Returns a currency symbol
686	Sorts the data models according to the given sort definition .
687	Recursively finds all children and grand children of the specified item .
688	Removes all auth items of the specified type .
689	Adds additional URL rules .
690	Get URL from internal cache if exists .
691	Returns a value indicating whether the filter is active for the given action .
692	Creates view instance from given configuration .
693	Creates a new message instance and optionally composes its body content via view rendering .
694	Sends multiple messages at once .
695	This method is invoked right before mail send . You may override this method to do last - minute preparation for the message . If you override this method please make sure you call the parent implementation first .
696	This method is invoked right after mail was send . You may override this method to do some postprocessing or logging based on mail send status . If you override this method please make sure you call the parent implementation first .
697	Install all extensions and advanced + basic app .
698	Runs a command in all extension and application directories .
699	This command installs a project template in the apps directory and links the framework and extensions .
700	This command installs an extension in the extensions directory and links the framework and other extensions .
701	Remove all symlinks in the vendor subdirectory of the directory specified .
702	Finds linkable applications .
703	Parses a HTTP request body .
704	Set default roles
705	Returns defaultRoles as array of Role objects .
706	Creates a primary key column .
707	Creates a big primary key column .
708	Creates a char column .
709	Creates a string column .
710	Creates a tinyint column . If tinyint is not supported by the DBMS smallint will be used .
711	Creates a smallint column .
712	Creates an integer column .
713	Creates a bigint column .
714	Creates a float column .
715	Creates a double column .
716	Creates a decimal column .
717	Creates a datetime column .
718	Creates a timestamp column .
719	Creates a time column .
720	Creates a binary column .
721	Creates a money column .
722	Creates a JSON column .
723	Builds a SQL statement for enabling or disabling integrity check .
724	Returns the unique ID of the controller .
725	Renders a view and applies layout if available .
726	Retrieve a database connection attribute .
727	Attaches an event handler to a class - level event .
728	Detaches an event handler from a class - level event .
729	Adds default primary key to fields list if there s no primary key specified .
730	Creates a new model .
731	Gets information about given table unique indexes .
732	Evaluates the attributes values and assigns it to the current attributes .
733	Converts the model into an array .
734	Initializes the application component . This method overrides parent implementation by loading the authorization data from PHP script .
735	Returns all permissions that are directly assigned to user .
736	Returns all permissions that the user inherits from the roles assigned to him .
737	Saves the authorization data to a PHP script file .
738	Saves items data into persistent storage .
739	Saves assignments data into persistent storage .
740	Saves rules data into persistent storage .
741	Begins fragment caching . Prevents owner widget from execution if its contents can be retrieved from the cache .
742	Outputs widget contents and ends fragment caching .
743	Initializes widget event handlers .
744	Returns a fragment cache widget configuration array .
745	Marks column as unsigned .
746	Builds the default value specification for the column .
747	Returns the category of the column type .
748	Returns the complete column definition from input format .
749	Loads messages from a PO file .
750	Saves messages to a PO file .
751	Checks if given slug value is unique .
752	Adds the rate limit headers to the response .
753	Initializes the action .
754	Runs the action .
755	Validates the input to see if it matches the generated code .
756	Renders the CAPTCHA image .
757	Renders the CAPTCHA image based on the code using GD library .
758	Renders the CAPTCHA image based on the code using ImageMagick library .
759	Sets a list of child tokens .
760	Returns whether the token represents a collection of tokens .
761	Returns the SQL code representing the token .
762	Tests the given token to match the specified pattern token .
763	Updates token SQL code start and end offsets based on its children .
764	Splits the specified SQL code into individual SQL statements and returns them or false if there s a single statement .
765	Returns named bindings used in the specified statement token .
766	Sets the user identity object .
767	Logs in a user .
768	Regenerates CSRF token
769	Returns if error is one of fatal type .
770	Retrieve an external iterator
771	Creates a configuration file for the extract command using command line options specified .
772	Creates a configuration file template for the extract command .
773	Extracts messages to be translated from source code .
774	Extracts messages from a file .
775	Creates a SQL statement for resetting the sequence value of a table s primary key . The sequence will be reset such that the primary key of the next new row inserted will have the specified value or 1 .
776	Checks the ability to use fractional seconds .
777	Returns the map for default time type . If the version of MySQL is lower than 5 . 6 . 4 then the types will be without fractional seconds otherwise with fractional seconds .
778	Checks if there is graphic extension available to generate CAPTCHA images . This method will check the existence of ImageMagick and GD extensions .
779	Returns the cookie with the specified name .
780	Returns the value of the named cookie .
781	Returns whether there is a cookie with the specified name . Note that if a cookie is marked for deletion from browser this method will return false .
782	Adds a cookie to the collection . If there is already a cookie with the same name in the collection it will be removed first .
783	Creates a report about documentation updates since last update of same named translations .
784	Validates if the HTTP cache contains valid content . If both Last - Modified and ETag are null returns false .
785	Generates an ETag from the given seed string .
786	Returns a list of scenarios and the corresponding active attributes .
787	Returns the form name that this model class should use .
788	Returns the text hint for the specified attribute .
789	Returns the first error of the specified attribute .
790	Returns the errors for all attributes as a one - dimensional array .
791	Adds a list of errors .
792	Removes errors for all attributes or a single attribute .
793	Returns attribute values .
794	Returns the attribute names that are subject to validation in the current scenario .
795	Populates the model with input data .
796	Returns the index of the last token that is part of the annotation at the given index .
797	Returns the index of the close brace that matches the open brace at the given index .
798	Inserts a token at the given index .
799	Remove spaces from token at a given index .
800	Find the start of a reference .
801	Clear tokens in the given range unless they are comments .
802	Should the given tags be kept together or kept apart?
803	Determine whether there is a void return annotation in the function s PHPDoc comment .
804	Determine whether the function already has a return type hint .
805	Determine whether the function has a void return .
806	Find all the return annotations in the function s PHPDoc comment .
807	Parse a string that contains a namespace into tokens .
808	This method is used for sorting the uses in a namespace .
809	This method is used for sorting the uses statements in a namespace by length .
810	Normalizes types to make them comparable .
811	Fix spacing below an element of a class interface or trait .
812	Fix spacing below a method of a class or trait .
813	Fix spacing above an element of a class interface or trait .
814	Find the index for the new line . Return the given index when there s no new line .
815	Remove return void or return null annotations ..
816	Get the sequence of meaningful tokens and returns a new Tokens instance .
817	Fix arguments spacing for given function .
818	Method to insert newline after comma or opening parenthesis .
819	Check if last item of current line is a comment .
820	Override backtick code with corresponding double - quoted string .
821	Take a one line doc block and turn it into a multi line doc block .
822	Fix semicolon after closing curly brace if needed .
823	Find a previous call to unset directly before the index .
824	Get the tag name .
825	Set the tag name .
826	Check if comment at given index precedes structural element .
827	Return array of indices that are part of a comment started at given index .
828	Checks variable assignments for correct docblock usage .
829	Check if token is a part of a string .
830	Process an exception that occurred .
831	Fix constructor within a class if possible .
832	Fix calls to the parent constructor within a class .
833	Find a function or method matching a given name within certain bounds .
834	Gets the token kinds which can work as function calls .
835	Looks up Tokens sequence for suitable candidates and delivers boundaries information which can be supplied by other methods in this abstract class .
836	Clear cache - one position or all of them .
837	Detect type of block .
838	Create token collection from array .
839	Create token collection directly from code .
840	Set new size of collection .
841	Unset collection item .
842	Set collection item .
843	Clear internal flag if collection was changed and flag for all collection s items .
844	Clear empty tokens .
845	Ensure that on given index is a whitespace with given kind .
846	Generate code from tokens between given indexes .
847	Get index for closest next token of given kind .
848	Get index for closest sibling token which is non whitespace .
849	Get index for closest previous token of given kind . This method is shorthand for getTokenOfKindSibling method .
850	Get index for closest sibling token of given kind .
851	Get index for closest sibling token not of given kind .
852	Get index for closest sibling token that is not a whitespace or comment .
853	Get index for closest sibling token which is not empty .
854	Find a sequence of meaningful tokens and returns the array of their locations .
855	Insert instances of Token inside collection .
856	Override token at given index and register it .
857	Override tokens at given range .
858	Set code . Clear all current content and replace it by new Token items generated from code directly .
859	Check if all token kinds given as argument are found .
860	Clear tokens in the given range .
861	Checks for monolithic PHP code .
862	Get cache value for given key .
863	Change code hash .
864	Register token as found .
865	Method to move index over the non - array elements like function calls or function declarations .
866	Returns whether the token type is one of the given types .
867	Return the first and last token index of the previous block .
868	For internal use only as it is not perfect .
869	Create process that lint PHP code .
870	Use syntax = > long | short .
871	Returns the allowed values of the given option that can be converted to a string .
872	Wraps a string to the given number of characters ignoring style tags .
873	Get this docblock s annotations .
874	Get specific types of annotations only .
875	Transforms the heredoc start token to nowdoc notation .
876	Returns whether the token at given index is a comment whose indentation can be fixed .
877	Decide whether or not skip the fix for given class .
878	Apply RuleSet on fixers to filter out all unwanted fixers .
879	Resolve input set into group of rules .
880	Resolve set rules as part of another set .
881	Fix the types at the given line .
882	Prepare the type and normalize it .
883	Check if token under given index is use statement for lambda function .
884	Get the delimiter that would require the least escaping in a regular expression .
885	Get name for custom token .
886	Clear the return statement located at a given index .
887	Does the return statement located at a given index need fixing?
888	Is the return within a function with a non - void or nullable return type?
889	Should we clear the specific token?
890	Get the types associated with this annotation .
891	Set the types associated with this annotation .
892	Get the normalized types associated with this annotation so they can easily be compared .
893	Get the current types content .
894	Returns start and end token indexes of arguments .
895	Finds the end of the right - hand side of the comparison at the given index .
896	Finds the start of the left - hand side of the comparison at the given index .
897	Fixes the comparison at the given index .
898	Checks whether the given token has a lower precedence than T_IS_EQUAL or T_IS_IDENTICAL .
899	Get indexes of namespace uses .
900	Check if the array at index is multiline .
901	Returns the attributes of the method under the given index .
902	Check if there is an anonymous class under given index .
903	Check if the function under given index is a lambda .
904	Checks if there is an unary successor operator under given index .
905	Checks if there is an unary predecessor operator under given index .
906	Checks if there is a binary operator under given index .
907	Find classy elements .
908	Check if token under given index is short array opening .
909	Enclose the given text in a comment block .
910	Find the index where the header comment must be inserted .
911	Append a blank docblock line to this line s contents .
912	Move all param annotations in before throws and return annotations .
913	Move all return annotations after param and throws annotations .
914	Calculate a bitmask for given constant names .
915	Converts a camel cased string to an snake cased string .
916	Calculate the trailing whitespace .
917	Perform stable sorting using provided comparison function .
918	Sort fixers by their priorities .
919	Get the line index of the line containing the end of the short description if present .
920	Make sure the description is separated from the annotations .
921	Make sure the annotations are correctly separated .
922	Force the given annotations to immediately follow each other .
923	Force the given annotations to have one empty line between each other .
924	Returns errors reported during linting before fixing .
925	Returns errors reported during fixing .
926	Returns errors reported during linting after fixing .
927	Return the start index end index and a flag stating if the comment block is empty .
928	Removes a file from shutdown removal .
929	Removes attached files .
930	Transform given Tokens collection through all Transformer classes .
931	Clear token at given index .
932	Clear internal flag if token was changed .
933	Check if token is equals to given one .
934	Check if token is equals to one of given .
935	A helper method used to find out whether or not a certain input token has to be case - sensitively matched .
936	Get token s name .
937	Generate array containing all keywords that exists in PHP version in use .
938	Check if token is one of given kind .
939	Check if token is whitespace .
940	Override token .
941	Returns path .
942	Returns dry - run flag .
943	Compute file candidates for config file .
944	Compute rules .
945	Set option that will be resolved .
946	Handle an incoming request to ensure it is valid .
947	Check if scripttag is in the list .
948	Gets an API instance .
949	Ensures shop domain meets the specs .
950	HMAC creation helper .
951	Activates the usage charge .
952	Saves the usage charge to the database .
953	Authenticating a shop .
954	Determines where to redirect after successfull auth .
955	Gets the charge s data from Shopify .
956	Checks if the charge is currently in trial .
957	Returns the remaining trial days .
958	Returns the remaining trial days from cancellation date .
959	Cancels this charge .
960	Checks if a shop has paid for access .
961	Handles an incoming webhook .
962	Builds the authentication URL for a shop .
963	Post process actions after authentication is done .
964	Dispatches the job to install webhooks .
965	Dispatches the job to install scripttags .
966	Dispatches the after authenticate job if any .
967	Clean the shop data on uninstall .
968	Cancels a recurring or one - time charge .
969	Determines the type of access .
970	Sets the Shopify domain to session . expire_on_close must be set to avoid issue of cookies being deleted too early .
971	Gets the access token in use .
972	Forgets anything in session .
973	Listen to the shop creating event .
974	Handle an incoming request to ensure webhook is valid .
975	Gets the webhooks present in the shop .
976	Deletes webhooks in the shop tied to the app .
977	Converts the job class name into a URL endpoint .
978	Checks we have a valid shop .
979	Come back with a response .
980	Creates or returns an instance of API for the shop .
981	Gets the last single or recurring charge for the shop .
982	Redirects to billing screen for Shopify .
983	Processes the response from the customer .
984	Allows for setting a usage charge .
985	Gets the charge information for a previously inited charge .
986	Gets the confirmation URL to redirect the customer to . This URL sends them to Shopify s billing page .
987	Returns the charge params sent with the post request .
988	Activates a plan to the shop .
989	Cancels the current charge for the shop saves the new charge .
990	Primary method for query validation . See class description for details .
991	Returns all global validation rules .
992	This uses a specialized visitor which runs multiple visitors in parallel while maintaining the visitor skip and break API .
993	Utility which determines if a value literal node is valid for an input type .
994	Given an ast node returns its string description .
995	Given a collection of directives returns the string value for the deprecation reason .
996	Whether a offset exists
997	Offset to unset
998	Returns array of all types in this schema . Keys of this array represent type names values are instances of corresponding type definitions
999	Returns type by it s name
1000	Returns instance of directive by name
1001	Provided two composite types determine if they overlap . Two composite types overlap when the Sets of possible concrete types for each intersect .
1002	Creates a new visitor instance which maintains a provided TypeInfo instance along with visiting visitor .
1003	Parses HTTP request using PHP globals and returns GraphQL OperationParams contained in this request . For batched requests it returns an array of OperationParams .
1004	Parses normalized request params and returns instance of OperationParams or array of OperationParams in case of batch operation .
1005	Converts query execution result to PSR - 7 response
1006	Resolves concrete ObjectType for given object value
1007	Returns an Error if a name is invalid .
1008	Given an invalid input string and a list of valid options returns a filtered list of valid options sorted based on their similarity with the input .
1009	If a resolve function is not given then a default resolve behavior is used which takes the property of the source object of the same name as the field and returns it as the result or if it s a function returns the result of calling that function while passing along args and context .
1010	Reads an alphanumeric + underscore name from the source .
1011	Reads a number token from the source file either a float or an int depending on whether a decimal point appears .
1012	Returns string with all digits + changes current string cursor position to point to the first char after digits
1013	Reads a comment token from the source file .
1014	Moves internal string cursor position
1015	Set validation rules for this server .
1016	Checks if the type is a builtin type
1017	Returns all builtin in types including base scalar and introspection types
1018	similar to array_merge_recursive this merges nested arrays but handles non array values differently while array_merge_recursive tries to merge non array values in this implementation they will be overwritten
1019	Given an arbitrary Error presumably thrown while attempting to execute a GraphQL operation produce a new GraphQLError aware of the location in the document responsible for the original Error .
1020	An array of locations within the source GraphQL document which correspond to this error .
1021	Returns array representation of error suitable for serialization
1022	Constructs an ExecutionContext object from the arguments passed to execute which we will pass throughout the other execution methods .
1023	Implements the Evaluating operations section of the spec .
1024	Extracts the root type of the operation from the schema .
1025	Implements the logic to compute the key of a given fields entry
1026	Determines if a fragment is applicable to the given type .
1027	Implements the Evaluating selection sets section of the spec for write mode .
1028	Resolves the field on the given source object . In particular this figures out the value that the field returns by calling its resolve function then calls completeValue to complete promises serialize scalars or execute the sub - selection - set for objects .
1029	Isolates the ReturnOrAbrupt behavior to not de - opt the resolveField function . Returns the result of resolveFn or the abrupt - return Error object .
1030	This is a small wrapper around completeValue which detects and logs errors in the execution context .
1031	This is a small wrapper around completeValue which annotates errors with location information .
1032	Implements the instructions for completeValue as defined in the Field entries section of the spec .
1033	Only returns the value if it acts like a Promise i . e . has a then function otherwise returns null .
1034	Complete a list value by completing each item in the list with the inner type
1035	Complete a Scalar or Enum by serializing to a valid value throwing if serialization is not possible .
1036	Complete a value of an abstract type by determining the runtime object type of that value then complete the value for that type .
1037	Complete an Object value by executing all sub - selections .
1038	Implements the Evaluating selection sets section of the spec for read mode .
1039	Build a string describing the path into the value where the error was found
1040	Executes PSR - 7 request and fulfills PSR - 7 response .
1041	Synchronously wait when promise completes
1042	Print a block string in the indented block form by adding a leading and trailing blank line . However if a block string starts with whitespace and is a single - line adding a leading blank line would strip that whitespace .
1043	Prints a GraphQLError to a string representing useful location information about the error s position in the source .
1044	Render a helpful description of the location of the error in the GraphQL Source document .
1045	Standard GraphQL error formatter . Converts any exception to array conforming to GraphQL spec .
1046	Returns error trace as serializable array
1047	Creates an instance from given array
1048	Produces the value of a block string from its parsed raw value similar to Coffeescript s block string Python s docstring trim or Ruby s strip_heredoc .
1049	Prepares an object map of variables of the correct type based on the provided variable definitions and arbitrary input . If the input cannot be coerced to match the variable definitions a Error will be thrown .
1050	Prepares an object map of argument values given a directive definition and a AST node which may contain directives . Optionally also accepts a map of variable values .
1051	Prepares an object map of argument values given a list of argument definitions and list of argument AST nodes .
1052	A helper function to build a GraphQLSchema directly from a source document .
1053	This takes the ast of a schema document produced by the parse function in GraphQL \ Language \ Parser .
1054	If a variable definition has a default value it s effectively non - null .
1055	Given two schemas returns an Array containing descriptions of all the types of breaking changes covered by the other functions down below .
1056	Given two schemas returns an Array containing descriptions of any breaking changes in the newSchema related to removing an entire type .
1057	Given two schemas returns an Array containing descriptions of any breaking changes in the newSchema related to changing the type of a type .
1058	Given two schemas returns an Array containing descriptions of any breaking changes in the newSchema related to removing types from a union type .
1059	Given two schemas returns an Array containing descriptions of any breaking changes in the newSchema related to removing values from an enum type .
1060	Given two schemas returns an Array containing descriptions of all the types of potentially dangerous changes covered by the other functions down below .
1061	Given two schemas returns an Array containing descriptions of any dangerous changes in the newSchema related to adding values to an enum type .
1062	Given two schemas returns an Array containing descriptions of any dangerous changes in the newSchema related to adding types to a union type .
1063	Find all conflicts found within a selection set including those found via spreading in fragments . Called when visiting each SelectionSet in the GraphQL Document .
1064	Collect all Conflicts within one collection of fields .
1065	Determines if there is a conflict between two particular fields including comparing their sub - fields .
1066	Two types conflict if both types could not apply to a value simultaneously . Composite types are ignored as their individual field types will be compared later recursively . However List and Non - Null types must match .
1067	Find all conflicts found between two selection sets including those found via spreading in fragments . Called when determining if conflicts exist between the sub - fields of two overlapping fields .
1068	Collect all Conflicts between two collections of fields . This is similar to but different from the collectConflictsWithin function above . This check assumes that collectConflictsWithin has already been called on each provided collection of fields . This is true because this validator traverses each individual selection set .
1069	Collect all conflicts found between a set of fields and a fragment reference including via spreading in any nested fragments .
1070	Collect all conflicts found between two fragments including via spreading in any nested fragments .
1071	Given a series of Conflicts which occurred between two sub - fields generate a single Conflict .
1072	Go through all of the implementations of type as well as the interfaces that they implement . If any of those types include the provided field suggest them sorted by how often the type is referenced starting with Interfaces .
1073	For the field name provided determine if there are any similar field names that may be the result of a typo .
1074	Converts GraphQL query result to spec - compliant serializable array using provided errors handler and formatter .
1075	Convert representation of AST as an associative array to instance of GraphQL \ Language \ AST \ Node .
1076	Returns true if the provided valueNode is a variable which is not defined in the set of variables .
1077	Returns type definition for given AST Type node
1078	Executes graphql query .
1079	Re - enable previously suppressed warning by id
1080	Given a GraphQL source parses it into a GraphQL \ Language \ AST \ DocumentNode . Throws GraphQL \ Error \ SyntaxError if a syntax error is encountered .
1081	Returns a location object used to identify the place in the source that created a given parsed object .
1082	If the next token is of the given kind return true after advancing the parser . Otherwise do not change the parser state and return false .
1083	If the next token is of the given kind return that token after advancing the parser . Otherwise do not change the parser state and return false .
1084	If the next token is a keyword with the given value return that token after advancing the parser . Otherwise do not change the parser state and return false .
1085	Converts a name lex token into a name parse node .
1086	Implements the parsing rules in the Document section .
1087	Given root type scans through all fields to find nested types . Returns array where keys are for type name and value contains corresponding type instance .
1088	Not exactly the same as the executor s definition of getFieldDef in this statically evaluated environment we do not always have an Object type and need to handle Interface and Union types .
1089	Get the given stub by name .
1090	Replace the order by clause of the current query .
1091	Execute an aggregate function on the database .
1092	Reloads the model from the database .
1093	Returns a fresh instance from the database .
1094	Return all root nodes for the current database table appropiately sorted .
1095	Return all children for the specified node .
1096	Return an array of the scoped attributes of the supplied node .
1097	Easy static accessor for performing a move operation .
1098	Runs the SQL query associated with the update of the indexes affected by the move operation .
1099	Resolves suplied node . Basically returns the node unchanged if supplied parameter is an instance of \ Baum \ Node . Otherwise it will try to find the node in the database .
1100	Check wether the current move is possible and if not rais an exception .
1101	Computes the new parent id for the node being moved .
1102	Check wether there should be changes in the downward tree structure .
1103	Fire the given move event for the model .
1104	Quotes an identifier for being used in a database query .
1105	Applies a lock to the rows between the supplied index boundaries .
1106	Write the migration file to disk .
1107	Write the model file to disk .
1108	Checks that there are no duplicates for the lft and rgt columns .
1109	Given a list of root nodes it returns an array in which the keys are the array of the actual scope column values and the values are the root nodes inside that scope themselves
1110	Builds a single string for the given scope columns values . Useful for making array keys for grouping .
1111	Maps a tree structure into the database . Unguards & wraps in transaction .
1112	Maps a tree structure into the database without unguarding nor wrapping inside a transaction .
1113	Maps a tree structure into the database
1114	The booting method of the model .
1115	Get the qualified column names which define our scope
1116	Get a new scoped query builder for the Node s model .
1117	Static query scope . Returns a query scope with all root nodes .
1118	Static query scope . Returns a query scope with all nodes which are at the end of a branch .
1119	Provides a depth level limit for the query .
1120	Returns the root node starting at the current node .
1121	Instance scope which targes all the ancestor chain nodes including the current one .
1122	Instance scope targeting all of its nested children which do not have children .
1123	Scope targeting itself and all of its nested children .
1124	Retrieve all of its children & nested children .
1125	Returns true if node is a descendant .
1126	Returns true if node is self or a descendant .
1127	Returns true if node is an ancestor .
1128	Returns true if node is self or an ancestor .
1129	Returns the first sibling to the left .
1130	Make the node the first child of ...
1131	Checkes if the given node is in the same scope as the current one .
1132	Checks wether the given node is a descendant of itself . Basically whether its in the subtree defined by the left and right indices .
1133	Sets default values for left and right fields .
1134	Store the parent_id if the attribute is modified so as we are able to move the node to this new parent after saving .
1135	Move to the new parent if appropiate .
1136	Sets the depth attribute
1137	Sets the depth attribute for the current node and all of its descendants .
1138	Prunes a branch off the tree shifting all the elements on the right back to the left so the counts work .
1139	Makes room for the the current node between its siblings .
1140	Compute current node level . If could not move past ourseleves return our ancestor count otherwhise get the first parent level + the computed nesting .
1141	Sets the value of the field .
1142	Returns list of available field options .
1143	Configure and publish views .
1144	Load and publishes configs .
1145	Return parsed Javascript Rule .
1146	Add conditional rules .
1147	Determine if rule is passed with sometimes .
1148	Handles multidimensional attribute names .
1149	Set default parameters .
1150	Render the specified view with validator data .
1151	Gets view data .
1152	Set the form selector to validate .
1153	Set the view to render Javascript Validations .
1154	Replace all error message place - holders with actual values .
1155	Get the validation message for an attribute and rule .
1156	Add conditions to a given field based on a Closure .
1157	Confirmed rule is applied to confirmed attribute .
1158	Returns Javascript parameters for After rule .
1159	Replace javascript error message place - holders with actual values .
1160	Creates fake data needed to parse messages Returns original data .
1161	Generate fake data to get RequiredIf message .
1162	Generate fake data to get file type messages .
1163	Validate request .
1164	Throw the failed validation exception .
1165	Parse Validation input request data .
1166	Parse Validation parameters .
1167	Validate remote Javascript Validations .
1168	Sets data for validate remote rules .
1169	Remove rules that should not be validated remotely .
1170	Create closure to call inaccessible method .
1171	Gets inaccessible property .
1172	Calls inaccessible method .
1173	Sets delegated Validator instance .
1174	Generate Javascript Validations .
1175	Make Laravel Validations compatible with JQuery Validation Plugin .
1176	Validate Conditional Validations using Ajax in specified fields .
1177	Creates JsValidator instance based on rules and message arrays .
1178	Get the validator instance for the request .
1179	Gets fake data when validator has wildcard rules .
1180	Creates JsValidator instance based on FormRequest .
1181	Creates and initializes an Form Request instance .
1182	Creates JsValidator instance based on Validator .
1183	Get and encrypt token from session store .
1184	Wraps Validator resolver with RemoteValidator resolver .
1185	Closure used to resolve Validator instance .
1186	Resolves Validator instance .
1187	Create new validator instance .
1188	Closure used to trigger JsValidations .
1189	Returns if rule is validated using Javascript .
1190	Check if rule must be validated in server - side .
1191	Add a custom definition
1192	Add provided attributes to the provided definition
1193	Add provided elements to the provided definition
1194	Sets the request against which the menu should be matched .
1195	Sorts the internal list of extensions by priority .
1196	Renders a HTML attribute
1197	Prepares an attribute key and value for HTML representation .
1198	Escapes an HTML value
1199	Adds a voter in the matcher .
1200	Retrieves item in the menu eventually using the menu provider .
1201	Checks whether an item is current .
1202	Configures the newly created item with the passed options
1203	Configures the newly created item s extras Extras are processed one by one in order not to reset values set by other extensions
1204	Renders all of the children of this menu .
1205	Called by the parent menu item to render this menu .
1206	Renders the link in a a tag with link attributes or the label in a span tag with label attributes
1207	Moves item to specified position . Rearrange siblings accordingly .
1208	Moves child to specified position . Rearrange other children accordingly .
1209	Get slice of menu as another menu .
1210	Split menu into two distinct menus .
1211	Calls a method recursively on all of the children of this item
1212	Returns true if the value is truthy
1213	Gets the JMESPath type equivalent of a PHP variable .
1214	Determine if the provided value is a JMESPath compatible object .
1215	JSON aware value comparison function .
1216	JMESPath requires a stable sorting algorithm so here we ll implement a simple Schwartzian transform that uses array index positions as tie breakers .
1217	Creates a Python - style slice of a string or array .
1218	Set multiple configuration options .
1219	Sends a debug string of the request details .
1220	Validates value A and B ensures they both are correctly typed and of the same type .
1221	Reduces and validates an array of values to a single value using a fn .
1222	Validates the return values of expressions as they are applied .
1223	Resolve and validate the passed uri .
1224	Replaces path parameters placeholders in the uri with the correct values .
1225	Builds a query parameters string .
1226	Returns a token the is the result of consuming inside of delimiter characters . Escaped delimiters will be adjusted before returning a value . If the token is not closed unknown is returned .
1227	Parses a JSON token or sets the token type to unknown on error .
1228	Parses a JMESPath expression into an AST
1229	Parses an expression while rbp < lbp .
1230	Resolve and validate the passed configuration options .
1231	Resolve and validate the passed configuration options . The difference between this method and resolve is that this will only resolve options in the passed configuration . It will not use the definitions to resolve optional and required options .
1232	Sets a value for the given offset .
1233	Determines if the value is the correct type to assign to the array .
1234	Converts the object to a XML string .
1235	Returns the meta data for a property .
1236	Method to get or set the object s attachment . Overrides any existing attachment is setting .
1237	Assign a value to a property .
1238	Determines if the value is the correct type to assign to a property .
1239	Helper function to return the actual type of a value .
1240	Helper function to convert an property into XML
1241	Helper function to convert a value into XML
1242	Helper function when assigning values via the ctor . Determines the actual value to assign to a property .
1243	Helper function when assigning values via the ctor .
1244	Wraps a credentials provider and caches previously provided credentials .
1245	Creates an aggregate credentials provider that invokes the provided variadic providers one after the other until a provider returns credentials
1246	Provider that creates credentials from environment variables EBAY_SDK_APP_ID EBAY_SDK_CERT_ID and EBAY_SDK_DEV_ID .
1247	Provider that creates credentials using an ini file stored in the current user s home directory .
1248	Gets the environment s HOME directory if available .
1249	Create a service object by namespace . Service is configured using array of options .
1250	Parse the passed XML to create a PHP object .
1251	Handler for the parser that is called at the start of each XML element .
1252	Handles element names that may have namespaces in them .
1253	Builds the required PHP object .
1254	Determines if the type of the property is simple .
1255	Returns a value that will be assigned to an object s _value_ property .
1256	Returns data from the input array that matches a JMESPath expression .
1257	Creates a JMESPath runtime based on environment variables and extensions available on a system .
1258	Creates a monotonically incrementing unique variable name by prefix .
1259	Writes the given line of source code . Pass positional arguments to write that match the format of sprintf .
1260	Create the access request .
1261	Creates the TransactionReference node for a request .
1262	Compiles the final endpoint URL for the request .
1263	Creates a ShipAccept request .
1264	Creates a void shipment request .
1265	Recover a shipping label .
1266	Creates a label recovery request .
1267	Create the LabelRecovery request .
1268	Create the AV request .
1269	Get a QuantumView subscription .
1270	Create the QuantumView request .
1271	Tells whether or not the NoCandidatesIndicator is present on the XML document . This indicator is returned if the address is so badly formed that UPS is unable to even offer any suggested alternatives
1272	Tells whether or not the ValidAddressIndicator is present on the XML document . This indicator is present if provided address is valid and represents a single unique address in the UPS Address Validation system .
1273	Tells whether or not the AmbiguousAddressIndicator is present on the XML document . This indicator is present when the address provided is not specific enough to be unique to one physical location but provides enough
1274	Create the LandedCostRequest request .
1275	Creates and sends a request for the given data . Most errors are handled in SoapRequest
1276	Check if tracking number is for mail innovations .
1277	Create the Tracking request .
1278	Adds location information including company name attention name and address .
1279	Checks a data structure and extracts the space ID if present .
1280	Checks a data structure and extracts the environment ID if present .
1281	Creates a File or a subclass thereof .
1282	Returns the field for the passed id .
1283	Adds a runtime field of type unknown .
1284	Loads resources for a certain type only .
1285	Loads resources in the current cache pool and fetches the missing ones from the API .
1286	Each Contentful ID can be up to 64 characters long so if we have too many links in a single query it might create some queries that are too long .
1287	Actually make the relevant API calls .
1288	We extract content types that need to be fetched from a response array . This way we can use a collective query rather than making separate queries for every content type .
1289	Set the Type of event or resource to sync .
1290	Set the content type to which results should be limited . Set to NULL to not filter for a content type .
1291	Continues the synchronization either at the next page or with the results since the initial synchronization .
1292	Build a Result from the API response .
1293	Parses the sync_token out of an URL supplied by the API .
1294	Creates the appropriate ResourcePool object using the given client and options .
1295	Checks whether the current entry has a field with a certain ID .
1296	Attempts to fetch a value given the current configuration . It will return the raw field value without applying any transformation to it .
1297	Given a field value this method will resolve links if it s a Link object or an array of links .
1298	Gets all entries that contain links to the current one . You can provide a Query object in order to set parameters such as locale include and sorting .
1299	Transforms values from the original JSON representation to an appropriate PHP representation .
1300	Returns the locale to be used in a cache key .
1301	Parse a JSON string .
1302	Returns the default locale for this space .
1303	Decodes a JSON HTTP response body .
1304	Display the specified resource .
1305	Create an feed response for whole forum section .
1306	Delete post .
1307	Replace url parameter .
1308	Url parameter .
1309	This function will demote H1 to H2 H2 to H3 H4 to H5 etc . this will help with SEO so there are not multiple H1 tags on the same page .
1310	This function construct the categories menu with nested categories .
1311	Verifies that a given signature is correct
1312	Set the connection and response timeouts .
1313	Set the number of times to retry on error and how long between each .
1314	Make URLs for user browser navigation .
1315	Make GET requests to the API .
1316	Make POST requests to the API .
1317	Make DELETE requests to the API .
1318	Make PUT requests to the API .
1319	Cleanup any parameters that are known not to work .
1320	Set Curl options .
1321	Make an HTTP request
1322	Get the header info to store .
1323	Encode application authorization header with base64 .
1324	Decodes a JSON string to stdObject or associative array
1325	pretty much a helper function to set up the request
1326	The request parameters sorted and concatenated into a normalized string .
1327	Builds a url usable for a GET request
1328	Get the specified option value .
1329	Set a given option value .
1330	Query the resource when it appears in a to - many relation of a parent resource .
1331	Query the resource when it appears in a to - one relation of a parent resource .
1332	Does the record match the supplied filters?
1333	Apply filters to the provided query parameter .
1334	Hydrate related models after the primary record has been persisted .
1335	Return the result for a paginated query .
1336	Default query execution used when querying records or relations .
1337	Get JSON API parameters to use when constructing an Eloquent query .
1338	Set the default API name .
1339	Add a record to the identity map for a resource identifier .
1340	Does the identity map know that ths supplied identifier exists?
1341	Get the record from the identity map .
1342	Get the encoding parameters from the request .
1343	Is this an index request?
1344	Is this a read resource request?
1345	Is this an update resource request?
1346	Is this a delete resource request?
1347	Is this a request to read all processes for a resource type?
1348	Allow fields for a resource type .
1349	Allow any fields for the specified resource type .
1350	Allow no fields for the specified resource type .
1351	Are the fields allowed for the specified resource type?
1352	Get the invalid fields for the resource type .
1353	Get the fields that are invalid .
1354	Apply sort parameters to the query .
1355	Get sort parameters to use when the client has not provided a sort order .
1356	Get the table column to use for the specified search field .
1357	Set the route s relationship field name and inverse resource type .
1358	Create an encoding that will encode JSON API content .
1359	Create an encoding for the JSON API media type .
1360	Create an encoding that will not encode JSON API content .
1361	Is the encoding for any of the supplied media types?
1362	Is the encoding acceptable?
1363	Create a cursor from query parameters .
1364	Register JSON API services .
1365	Register package middleware .
1366	Register a response macro .
1367	Register Blade directives .
1368	Bind the JSON API service as a singleton .
1369	Bind the inbound request services so they can be type - hinted in controllers and authorizers .
1370	Bind the exception parser into the service container .
1371	Create a validator instance to validate the supplied data .
1372	Is the JSON API field allowed to be filled into the supplied record?
1373	Get the JSON API document as an array .
1374	Filters out commands using either except or only filter .
1375	Runs the given commands and passes them all the given parameters .
1376	Validate the value of a type member .
1377	Validate the value of an id member .
1378	Validate an identifier object .
1379	Validate a resource relationship .
1380	Validate a to - one relation .
1381	Validate a to - many relation .
1382	Does the key exist in document data object?
1383	Get a value from the document data object use dot notation .
1384	Check if the resource is not found .
1385	Add an error for a member that is required .
1386	Add errors for when a member has a field that is not allowed .
1387	Add an error for when the resource type is not supported by the endpoint .
1388	Add an error for when the resource does not support client - generated ids .
1389	Add an error for when a resource already exists .
1390	Add an error for when a resource identifier does not exist .
1391	Add errors for when a resource field exists in both the attributes and relationships members .
1392	Does the HTTP request require a JSON API error response?
1393	Prepare JSON API exception for non - JSON API rendering .
1394	Send a response with the supplied media type content .
1395	Set the encoding options .
1396	Return a response for a resource update request .
1397	Return a response for a resource delete request .
1398	Create a response containing a single error .
1399	Create a response containing multiple errors .
1400	Render an exception that has arisen from the exception handler .
1401	Does a no content response need to be returned?
1402	Get any JSON API errors that are in the response .
1403	Parse JSON API errors out of the response body .
1404	Add records to the relationship .
1405	Find the related models for a JSON API relationship object .
1406	Get attributes that are included for every model class .
1407	Get attributes for the provided model .
1408	Get the attributes to serialize for the provided model .
1409	Create an error for a member that is required .
1410	Create an error for when a resource type is not recognised .
1411	Create an error for when the resource id is not supported by the endpoint .
1412	Create an error for when a resource does not support client - generated ids .
1413	Create an error for a resource identifier that does not exist .
1414	Create an error for when a resource cannot be deleted .
1415	Create an error for an invalid resource .
1416	Create an error for an invalid query parameter .
1417	Create errors for a failed validator .
1418	Create a JSON API exception for a failed validator .
1419	Translate an error member value .
1420	Create a source pointer for the specified path and optional member at that path .
1421	Convert a belongs to relationship without causing the database to be queried .
1422	Create a model identity using the model class and a provided id .
1423	Add eager loading to the query .
1424	Add eager loading to a record .
1425	Get the relationship paths to eager load .
1426	Convert a JSON API include path to a model relationship path .
1427	Convert a JSON API field name to an Eloquent model relation name .
1428	Create an error collection from an array of error arrays .
1429	Fill the soft delete value if it has been provided .
1430	Deserialize the provided value for the soft delete attribute .
1431	Get the JSON API field that is used for the soft - delete value .
1432	Add allowed parameters .
1433	Replaces underscores or camel case with dashes .
1434	Converts a camel case string into all lower case separated by underscores .
1435	Converts a camel case or dasherized string into a lower cased and underscored string .
1436	Gets the lower camel case form of a string .
1437	Gets the upper camel case form of a string .
1438	Build the class with the given name .
1439	Get the stub file for the generator .
1440	Get the resource name
1441	Replace the value of the resource type string .
1442	Replace the value of the model class name .
1443	Replace the value of the application namespace .
1444	Get the stub for specific generator type
1445	Determine whether a resource is eloquent or not
1446	Get validation data for updating a domain record .
1447	Get validation data for deleting a domain record .
1448	Get validation data for modifying a relationship .
1449	Get validation rules for a specified relationship field .
1450	Create a validator for a JSON API resource object .
1451	Create a validator for a delete request .
1452	Create a generic validator .
1453	Get rules to disallow the provided keys .
1454	Validate that a data member exists and it is either a has - one or a has - many relationship .
1455	Is this a valid has - one relationship?
1456	Is this a valid has - many relationship?
1457	Get the next page .
1458	Get the previous page .
1459	Add a where clause for the supplied id and operator .
1460	Order items in descending order .
1461	Order items in ascending order .
1462	Get the column value for the provided id .
1463	Guess the column to use for the cursor .
1464	Guess the key to use for the cursor .
1465	Decode a JSON string .
1466	Does the HTTP request contain body content?
1467	Does the HTTP response contain body content?
1468	Does the request want JSON API content?
1469	Get the most applicable HTTP status code .
1470	Create a resolver .
1471	Create a response factory .
1472	Create a validator to check that a relationship document complies with the JSON API specification .
1473	Create a Laravel validator that has JSON API error objects .
1474	Create a JSON API resource object validator .
1475	Create a JSON API relationship validator .
1476	Create a query validator .
1477	Get a link to update a resource object .
1478	Get a link to delete a resource object .
1479	Get a link to remove from a resource object s relationship .
1480	Key the resource array by domain record type .
1481	Get the default API codec .
1482	Create an encoder for the API .
1483	Register a resource provider with this API .
1484	Create a decoding .
1485	Return a new instance with the supplied decodings added to the beginning of the stack .
1486	Return a new instance with the supplied decodings added to the end of the stack .
1487	Return a new instance with the supplied decodings merged .
1488	Push decodings if the truth test evaluates to true .
1489	Push decodings if the truth test does not evaluate to true .
1490	Get the decoding that matches the supplied media type .
1491	Recursively camelize all keys in the provided array .
1492	Get a link to the current path adding in supplied query params .
1493	Get a link to the index of a resource type .
1494	Create encodings from array config .
1495	Create encodings that will not encode JSON API content .
1496	Return a new instance with the supplied encodings added to the beginning of the stack .
1497	Return a new instance with the supplied encodings added to the end of the stack .
1498	Return a new instance with the supplied encodings merged .
1499	Push encodings if the truth test evaluates to true .
1500	Push encodings if the truth test does not evaluate to true .
1501	Get the encoding that matches the supplied media type .
1502	Get the acceptable encoding for the supplied Accept header .
1503	Start JSON API support .
1504	Build the API instance and bind it into the container .
1505	Override the page resolver to read the page parameter from the JSON API request .
1506	Build parameters that are to be included with pagination links .
1507	Set the resource that was created by the job .
1508	Create a URL from an array .
1509	Get the URL for the specified resource .
1510	Get the URI for a related resource .
1511	Get the URI for the resource s relationship .
1512	Read resource action .
1513	Create resource action .
1514	Update resource action .
1515	Delete resource action .
1516	Read related resource action .
1517	Read relationship data action .
1518	Replace relationship data action .
1519	Add to relationship data action .
1520	Remove from relationship data action .
1521	Read processes action .
1522	Read a process action .
1523	Search resources .
1524	Read a resource .
1525	Create a resource .
1526	Update a resource .
1527	Replace a relationship .
1528	Execute the closure within an optional transaction .
1529	Register a custom route .
1530	Register routes for the supplied resource type
1531	Create a validation exception from a validator .
1532	Deserialize a resource object from a JSON API document .
1533	Is the field a fillable relation?
1534	Get the method name on this adapter for the supplied JSON API field .
1535	Fill the domain record with data from the supplied resource object .
1536	Fill relationships from a resource object .
1537	Fill a relationship from a resource object .
1538	Will the response contain a specific resource?
1539	Is data expected for the supplied request?
1540	Set the cursor column .
1541	Set the column name for the resource s ID .
1542	Create a new cursor query .
1543	Extract the cursor from the provided paging parameters .
1544	Does the codec encode any of the supplied media types?
1545	Does the codec decode any of the supplied media types?
1546	Decode a JSON API document from the request content .
1547	Register custom routes .
1548	Add routes for async processes .
1549	Authorize a relationship request .
1550	Get the relation from the model .
1551	Does the query need to be passed to the inverse adapter?
1552	Get an Eloquent adapter for the supplied record s relationship .
1553	Get a validator for the resource attributes member .
1554	Get a validator for the resource relationships member . .
1555	Get a validator for query parameters except for filter sort and page .
1556	Get the validation rules for query parameters excluding filter sort and page .
1557	Apply a deterministic order to the page .
1558	Do we need to apply a deterministic order to the query?
1559	Fill JSON API attributes into a model .
1560	Convert a JSON API resource field name to a model key .
1561	Deserialize fillable attributes .
1562	Deserialize a value obtained from the resource s attributes .
1563	Is this resource key a date attribute?
1564	Set the resource that the client job relates to .
1565	Get the resource that the process relates to .
1566	Substitute the route bindings onto the Laravel route .
1567	Get the domain record type for the route .
1568	What is the resource id of the route?
1569	Get the resource identifier for the route .
1570	Get the domain object binding for the route .
1571	Get the process id for the route .
1572	Get the process binding for the route .
1573	Get the process identifier for the route .
1574	Set or get the default API name .
1575	Get an API by name .
1576	Register the routes for an API .
1577	Validate the JSON API document complies with the spec .
1578	Create a resource object from the data member of a JSON document .
1579	Return a new instance with the specified type .
1580	Return a new instance with the specified id .
1581	Return a new instance with the provided attributes .
1582	Return a new instance with the provided relationships .
1583	Get the data value of all relationships .
1584	Return a new instance with the provided meta .
1585	Return a new instance with the provided links .
1586	Convert a validation key to a JSON pointer .
1587	Convert a validation key to a JSON pointer for a relationship object within the resource .
1588	Get the meta member of the document .
1589	Invoke a hook .
1590	Invoke multiple hooks .
1591	Validate that the top - level data member is acceptable .
1592	Validate the resource object .
1593	Validate the resource type and id .
1594	Validate the resource type .
1595	Validate the resource id .
1596	Validate the resource attributes .
1597	Validate the resource relationships .
1598	Validate the resource s attributes and relationships collectively .
1599	Determine if the user is logged in .
1600	Serialize a domain record .
1601	Adds the X - Robots - Tag header to the request if needed .
1602	Gets the social metadata fallback
1603	Returns an array for variables for rendering
1604	Handles 404 exceptions
1605	Returns all the redirects
1606	Finds a redirect matching the given path
1607	Saves the redirect
1608	Bulk creates redirects
1609	Deletes the redirect with the given ID
1610	Checks if the redirect URI is a regex
1611	Creates the XML document
1612	Sets the section or group ID on the criteria according to the given element type
1613	Closes the currently active DB connection . It does nothing if the connection is already closed .
1614	Sends RAW command string to the server .
1615	Session read handler . Do not call this method directly .
1616	Returns the number of records .
1617	Executes the query and returns the first column of the result .
1618	Returns the query result as a scalar value . The value returned will be the specified attribute in the first record of the query results .
1619	Builds a Lua script for finding a list of records
1620	Builds a Lua script for finding one record
1621	Builds a Lua script for finding a column
1622	Adds a column to the list of columns to retrieve and creates an alias
1623	Parses the condition specification and generates the corresponding Lua expression .
1624	Releases acquired lock . This method will return false in case the lock was not found or Redis command failed .
1625	Updates the whole table using the provided counter changes and conditions . For example to increment all customers age by 1
1626	Builds a normalized key from a given primary key value .
1627	Register a file log handler .
1628	Register a daily file log handler .
1629	Get the underlying Monolog instance .
1630	Resolve the current request .
1631	Get the request formatted as meta data .
1632	Log a message to the logs .
1633	Fires a log event .
1634	Boot the authentication services for the application .
1635	Setup the events .
1636	Format the query as breadcrumb metadata .
1637	Setup the queue .
1638	Get the guzzle client instance .
1639	Setup the callbacks .
1640	Setup the client paths .
1641	Setup session tracking .
1642	Creates a Coordinate instance from the given string .
1643	Calculates the center of this bounds object and returns it as a Coordinate instance .
1644	Simplifies the given polyline
1645	Calculates the distance between the given coordinate and this coordinate .
1646	Calculates the length of the polyline .
1647	This method calculates the initial bearing between the two points .
1648	Calculates the final bearing between the two points .
1649	Return all polygon point s latitudes .
1650	Return all polygon point s longitudes .
1651	Determine if given geometry is contained inside the polygon . This is assumed to be true if each point of the geometry is inside the polygon .
1652	Calculates the polygon perimeter .
1653	Calculates the polygon area .
1654	Create a new polygon with reversed order of points i . e . reversed polygon direction .
1655	Internal helper used to handle the communication with the SOCKS server
1656	Add a message .
1657	Get argument by name .
1658	Get datetime argument .
1659	Create a new Suggestion instance .
1660	Set the reply for a Suggestion .
1661	Render as an array .
1662	Response to incoming request .
1663	Set the image for a Card .
1664	Get the countries from the JSON file if it hasn t already been loaded .
1665	Returns a list of countries suitable to use with a select element in Laravelcollective \ html Will show the value and sort by the column specified in the display attribute
1666	Enable two - factor authentication
1667	Disable two - factor authentication
1668	Purge the folder
1669	Delete the folder
1670	Rename the folder
1671	Copy the folder
1672	Protect the folder by removing the . public file
1673	Check if the folder or any parent folder contains a . public file
1674	Synchronize the folder by removing the . nosync file
1675	Unsynchronize the folder by adding a . nosync file
1676	Return the files model
1677	Return the MD5 hash of the folder
1678	Return the size of the folder
1679	Check permissions to edit table tl_user
1680	Handle the profile page .
1681	Return the copy user button
1682	Return a checkbox to delete session data
1683	Return all modules except profile modules
1684	Prevent administrators from downgrading their own account
1685	Prevent administrators from disabling their own account
1686	Update the current user if something changes otherwise they would be logged out automatically
1687	Symfony will authenticate the user automatically by calling this route .
1688	Update a particular style sheet
1689	Update all style sheets in the scripts folder
1690	Write a style sheet to a file
1691	Compile a color value and return a hex or rgba color
1692	Try to shorten a hex color
1693	Convert hex colors to rgb
1694	Export a style sheet
1695	Check the name of an imported file
1696	Find multiple style sheets by their IDs
1697	Removes a front end authentication from the session .
1698	Loads the front end user and checks its group access permissions .
1699	Set the internal pointer to a particular file
1700	Unzip the current file and return its contents as string
1701	Calculate the Unix timestamp from two hexadecimal values
1702	Add news items to the indexer
1703	Return the link of a news article
1704	Return the names of the existing feeds so they are not removed
1705	Adds the JWT cookie to the given response .
1706	Clears the JWT cookie in the response .
1707	Returns whether the response has a cookie with that name .
1708	Remove an entry from the search index
1709	Renders a Contao back end template with the given blocks .
1710	Replaces the FAQ insert tags .
1711	Automatically set the end time if not set
1712	Get all articles and return them as array
1713	Execute the post actions hook
1714	Instantiate a new user object
1715	Check whether the current user has a certain access right
1716	Return true if the current user is allowed to do the current operation on the current page
1717	Return true if there is at least one allowed excluded field
1718	Sets the default locale based on the user language .
1719	Get all news archives and return them as array
1720	Splits the ID attribute and returns the chunks .
1721	Returns a string representation of the global PHP language array .
1722	Adds the labels to the global PHP language array .
1723	Return the preview image
1724	Sets the environment variable with the random secret .
1725	Checks if there is at least one config file defined but none of the files exists .
1726	Check the account status and return true if it is active
1727	Find a user in the database
1728	Update the current record
1729	Regenerate the session ID
1730	Return true if the user is member of a particular group
1731	Trigger the importUser hook
1732	Check whether the target page and the article are published
1733	Recursively get all book pages
1734	Validates the code which was entered by the user .
1735	Generates the TOTP provision URI .
1736	Generates the QR code as SVG and returns it as a string .
1737	Returns a route collection build from all plugin routes .
1738	Return if the file does not exist
1739	Display a login form
1740	Only show the important part fields for images
1741	Check a file name and romanize it
1742	Return the sync files button
1743	Return the upload file button
1744	Return the delete file button
1745	Return the show file button
1746	Add an enclosure
1747	Get all calendars and return them as array
1748	List a single record
1749	Import a library and make it accessible by its name or an optional key
1750	Add a log entry to the database
1751	Return the referer URL and optionally encode ampersands
1752	Check whether a language is installed
1753	Return the countries as array
1754	Return the available languages as array
1755	Return the timezones as array
1756	Set a cookie
1757	Convert a byte value into a human readable format
1758	Format a number
1759	Return the session hash
1760	Anonymize an IP address by overriding the last chunk
1761	Read the contents of a PHP file stripping the opening and closing PHP tags
1762	Convert an . xlf file into a PHP language file
1763	Runs the command scheduler .
1764	Checks if a database connection can be established and the table exist .
1765	Colorize the log entries depending on their category
1766	Stores the referer in the session .
1767	Returns the current request URI relative to the base path .
1768	List a news article
1769	Check whether an object property exists
1770	Return all errors as string separated by a given separator
1771	Generate the widget with error message and return it as string
1772	Return a single attribute
1773	Validate the user input and set the value
1774	Take an associative array and add it to the object s attributes
1775	Check whether an option is checked
1776	Check whether an option is selected
1777	Return a selected attribute if the option is selected
1778	Return a checked attribute if the option is checked
1779	Return either an empty string or null based on the SQL string
1780	Do not show the module if no calendar has been selected
1781	Insecure path potentially containing directory traversal
1782	Valid file name
1783	Count the total matching items
1784	Fetch the matching items
1785	Checks if the Request includes authorization or other sensitive information that should cause the cache to be bypassed .
1786	Auto - generate an article alias if it has not been set yet
1787	Return all active layout sections as array
1788	Return the edit article button
1789	Return the paste article button
1790	Adds the parameters to the alias .
1791	Forces the router to add the host if necessary .
1792	Sets the context from the domain .
1793	Extracts host and port from the domain .
1794	Returns the auto_item key from the parameters or the global array .
1795	Adds the frontend route which is language - aware .
1796	Adds a route to redirect a user to the index page .
1797	Adds the locale to the route if prepend_locale is enabled .
1798	Find a content element in the TL_CTE array and return the class name
1799	Return the field explanation as HTML string
1800	Generate possible palette names from an array by taking the first value and either adding or not adding the following values
1801	Return a query string that switches into edit mode
1802	Initialize the picker
1803	Return the picker input field markup
1804	Invalidate the cache tags associated with a given DC
1805	Filter disabled groups
1806	Call the setNewPassword callback
1807	Store the date when the account has been added
1808	Return all content elements as array
1809	Return the group of a content element
1810	Adjust the DCA by type
1811	Add the type of content element
1812	Get all forms and return them as array
1813	Dynamically set the ace syntax
1814	Add a link to the list items import wizard
1815	Add a link to the table items import wizard
1816	Return the link picker wizard
1817	Return the delete content element button
1818	Dynamically add flags to the singleSRC field
1819	Extract the YouTube ID from an URL
1820	Extract the Vimeo ID from an URL
1821	Recursively get all quicknav pages and return them as array
1822	Add the new image size to the permissions
1823	List an image size
1824	Return the original values as associative array
1825	Set the current record from an array
1826	Set the current record from an array preserving modified but unsaved fields
1827	Mark a field as modified
1828	Save the current record
1829	Delete the current record and return the number of affected rows
1830	Reload the data from the database discarding all modifications
1831	Detach the model from the registry
1832	Called when the model is attached to the model registry
1833	Called when the model is detached from the model registry
1834	Find a single record by its primary key
1835	Find a single record by its ID or alias
1836	Find multiple records by their IDs
1837	Find a single record by various criteria
1838	Find records by various criteria
1839	Find records and return the model or model collection
1840	Return the number of records matching certain criteria
1841	Parse a database . sql file
1842	Adds the fragments to the registry .
1843	Returns the controller name from the service and method name .
1844	Generate all feeds including a certain calendar
1845	Add events to the indexer
1846	Convert a UNIX timestamp to a Julian day
1847	Parse one or more items and return them as array
1848	Return the meta fields of a news article as array
1849	Generate a link and return it as string
1850	Adds generic attributes and query parameters before rendering .
1851	Redirect to the first active regular page
1852	Prepare the page object and redirect URL
1853	Replaces the trans insert tag .
1854	Find events of the current period by their parent ID
1855	Find upcoming events by their parent IDs
1856	Get a page layout and return it as database result object
1857	Open a file and return the handle
1858	Rename a file or folder
1859	Copy a file or folder
1860	Recursively copy a directory
1861	Change the file mode
1862	Move an uploaded file to a folder
1863	Validate a path
1864	Clear the Contao session data if not a POST request .
1865	Add the sender address as placeholder
1866	Add the sender name as placeholder
1867	Validates the session lifetime and logs the user out if the session has expired .
1868	Check for maintenance mode
1869	Parses a file and returns the code and namespace .
1870	Checks if the request has an Origin header .
1871	Generate a particular subpart of the file tree and return it as HTML string
1872	Translate the file IDs to file paths
1873	Adds every bundle with a public folder as assets package .
1874	Adds the Contao components as assets packages .
1875	Returns a bundle package name emulating what a bundle extension would look like .
1876	Create a new folder
1877	Recursively delete files and folders
1878	Delete all files and folders that are currently shown
1879	Protect a folder
1880	Return true if the current folder is mounted
1881	Check a file operation
1882	Return an array of encrypted folder names
1883	Build a query based on the given options
1884	Build a query based on the given options to count the number of records
1885	Generate all page links separated with the given argument and return them as string
1886	Generate all page links and return them as array
1887	Generate a link and return the URL
1888	Generate a particular subpart of the page tree and return it as HTML string
1889	Get the IDs of all parent pages of the selected pages so they are expanded automatically
1890	Checks whether the . htaccess file grants access via HTTP .
1891	Scans a line for an access definition .
1892	Check whether the current element of the iterator is acceptable
1893	Logs the security exception to the Contao back end .
1894	Return if the image does not exist
1895	Adds the . htaccess file or merges it with an existing one .
1896	Purges old entry points .
1897	Checks if an optional file exists .
1898	Checks whether the account is not active yet or not anymore .
1899	Creates a resize configuration object .
1900	Fetches the important part from the database .
1901	Check options if the field is mandatory
1902	Prepare a query string so the following functions can handle it
1903	Handle limit and offset
1904	Execute the query and return the result object
1905	Directly send a query string to the database
1906	Replace the wildcards in the query string
1907	Escape the values and serialize objects and arrays
1908	Returns the argument name from the model class .
1909	Strips the namespace from a class name .
1910	Creates a template by name or from the customTpl field of the model .
1911	Returns the type from the class name .
1912	Redirects the user to the Contao back end and adds the picker query parameter . It will determine the current provider URL based on the value which is usually read dynamically via JavaScript .
1913	Generate the captcha values
1914	Generate hashes for the current time and the specified sum
1915	Generate the captcha question
1916	Return the captcha question as string
1917	Find all feeds which include a certain news archive
1918	Find news feeds by their IDs
1919	Adds the DCA data to the Doctrine schema .
1920	Returns the SQL definitions from the Contao installer .
1921	Returns the index length if the index needs to be shortened .
1922	Get the GD image object from an image file
1923	Get the GD image object for the specified dimensions
1924	Set the GD resource handle
1925	Convert a true color image to a palette image with 256 colors and preserve transparency
1926	Count the number of colors in the image
1927	Detect if the image contains semitransparent pixels
1928	Do not validate unit fields
1929	Show the raw markdown code in the back end
1930	Attach a file
1931	Attach a file from a string
1932	Add a hook to modify the template output
1933	Return the locale string
1934	Return the datepicker string
1935	Redirect to an internal page
1936	Return the URL to the jumpTo or first published page
1937	Converts the UUID value to a file path if possible .
1938	Add the new channel to the permissions
1939	Set the recipient status to added manually if they are moved to another channel
1940	Check if recipients are unique per channel
1941	Check if a recipient is blacklisted for a channel
1942	List a recipient
1943	Replaces the asset insert tag .
1944	Return a custom layout section
1945	Return the custom layout sections
1946	Return all custom layout sections
1947	Set the cache headers according to the page settings .
1948	Redirect to an external page
1949	Show the related records
1950	Resend the double opt - in token
1951	Return the resend token button
1952	Find a subscription by its source table parent ID and e - mail address
1953	Find active subscriptions by their source table and parent ID
1954	Find subscriptions that have not been activated for more than 24 hours
1955	Return all style sheets of the current theme
1956	Add a link to edit the stylesheets of the theme
1957	Show the Vimeo link in the back end
1958	Returns the task name from the argument list or via an interactive dialog .
1959	Encode an internationalized domain name
1960	Decode an internationalized domain name
1961	Encode the domain in an e - mail address
1962	Decode the domain in an e - mail address
1963	Encode the domain in an URL
1964	Decode the domain in an URL
1965	Check the source folder
1966	Find a file by its primary key
1967	Find a file by its ID or UUID
1968	Find a file by its parent ID
1969	Find multiple files by their IDs or UUIDs
1970	Find a file by its UUID
1971	Find multiple files by their UUIDs
1972	Find a file by its path
1973	Find multiple files by their paths
1974	Find multiple files by UUID and a list of extensions
1975	Find all files in a folder
1976	Find all folders in a folder
1977	Adds the news ID to the front end preview URL .
1978	Add a message
1979	Return the messages with a wrapping container as HTML
1980	Return the messages as HTML
1981	Reset the message system
1982	Check if there are error messages
1983	Check if there are any messages
1984	Returns the image sizes as options suitable for widgets .
1985	Returns the image sizes for the given user suitable for widgets .
1986	Loads the options from the database .
1987	Filters the options by the given allowed sizes and returns the result .
1988	Try to find a root page based on language and URL
1989	Overwrite the parent method as front end URLs are handled differently
1990	Redirect to a jumpTo page or reload the current page
1991	Check whether a back end or front end user is logged in
1992	Get the meta data from a serialized string
1993	Prepare a text to be used in the meta description tag
1994	Index a page if applicable
1995	Generate an RSS 2 . 0 feed and return it as XML string
1996	Adjust the publication date
1997	Dumps the parameters into the parameters . yml file .
1998	Returns the first available locale .
1999	Returns the first eight accepted locales .
2000	Returns an array of data from the imported CSV files .
2001	Returns the uploaded files from a FileUpload instance .
2002	Returns the version number of a package .
2003	Returns the version number as major . minor . patch .
2004	Re - add some attributes if the field type is a number
2005	Validate the subscription form
2006	Remove the recipient
2007	Maps known exceptions to HTTP exceptions .
2008	Loads a Contao framework language file .
2009	Maps fragments to the globals array .
2010	Initializes the Contao framework .
2011	Find all feeds which include a certain calendar
2012	Add a new namespace
2013	Add multiple new namespaces
2014	Add multiple new classes with their file paths
2015	Autoload a class and create an alias in the global namespace
2016	Generate the markup for the default uploader
2017	Resize an uploaded image if neccessary
2018	Configures the contao . image . imagine service .
2019	Reads the old contao . image . target_path parameter .
2020	Add FAQs to the indexer
2021	Find published pages by their PID
2022	Find the first published root page by its host name and language
2023	Find the first published page by its parent ID
2024	Find pages matching a list of possible alias names
2025	Find published pages by their ID or aliases
2026	Find all published subpages by their parent ID and exclude pages only visible for guests
2027	Find all published regular pages by their IDs and exclude pages only visible for guests
2028	Find all published regular pages by their parent IDs and exclude pages only visible for guests
2029	Find the language fallback page by hostname
2030	Finds the published root pages
2031	Find the parent pages of a page
2032	Find the first active page by its member groups
2033	Find a page by its ID and return it with the inherited details
2034	Register the contao . dns - fallback alias when the model is attached to the registry
2035	Unregister the contao . dns - fallback alias when the model is detached from the registry
2036	Generate an absolute URL depending on the current rewriteURL setting
2037	Return the slug options
2038	Modifies a URL from the URL generator .
2039	Creates a picture configuration .
2040	Creates a picture configuration item .
2041	Generates a symlink .
2042	Validates a symlink .
2043	Find recipients by their e - mail address and parent ID
2044	Returns the database connection object .
2045	Show the raw code in the back end
2046	Creates an installation specific folder in the temporary directory and returns its path .
2047	Adds the index length on MySQL platforms for Doctrine DBAL <2 . 9 .
2048	Verifies the database connection and prepares the statement .
2049	Executes the legacy hook if the Contao framework is booted .
2050	Save the original group membership
2051	Restore the original group membership
2052	Create a picture instance from the given image path and size
2053	Get the picture element definition array
2054	Get the config for one picture source element
2055	Standardize the ID
2056	Make new top - level pages root pages
2057	Make sure that top - level pages are root pages
2058	Make the redirect page mandatory if the page is a logout page
2059	Check for modified pages and update the XML files if necessary
2060	Schedule a sitemap update
2061	Auto - generate a page alias if it has not been set yet
2062	Automatically create an article in the main column of a new page
2063	Purge the search index if a page is being deleted
2064	Check the sitemap alias
2065	Prevent circular references
2066	Returns all allowed page types as array
2067	Return all page layouts grouped by theme
2068	Return the copy page with subpages button
2069	Return the cut page button
2070	Return the delete page button
2071	Return the date and time strings
2072	Return the IDs of the allowed news archives as array
2073	Get all tables and return them as array
2074	Purge the search tables
2075	Purge the version table
2076	Purge the image cache
2077	Purge the script cache
2078	Purge the page cache
2079	Purge the internal cache
2080	Purge registrations that have not been activated within 24 hours
2081	Purge opt - in tokens
2082	Regenerate the XML files
2083	Generate the internal cache
2084	Rotate the log files
2085	Add multiple new templates with their file paths
2086	Return a template path
2087	Return the path to the default template
2088	Find the templates in the Contao resource folders .
2089	Find published comments by their source table and parent ID
2090	Count published comments by their source table and parent ID
2091	Remove name attributes in the back end so the form is not validated
2092	Initialize the form in the current session
2093	Validate input and set value
2094	Checks whether the _scope attributes matches a scope .
2095	Create the date ranges
2096	Return the begin of the week as timestamp
2097	Return a regular expression to check a date
2098	Convert a PHP format string into a JavaScript format string
2099	Return the numeric date format string
2100	Return the numeric time format string
2101	Return the numeric datim format string
2102	Resolve the custom modifiers
2103	Checks if the database is older than version 3 . 2 .
2104	Returns the available SQL templates .
2105	Create links and remember pages that have been processed
2106	Get the maximum file size that is allowed for file uploads
2107	Find an opt - in token by its related table and ID
2108	Find opt - in tokens by their related table and ID
2109	Returns the related records
2110	Set the related records
2111	Asks a question with the given label and hides the input .
2112	Generate an error 404 page
2113	Do not display the module if there are no articles
2114	Adds the back end user navigation .
2115	Returns a field value from the page model .
2116	Add a warning if there are users with access to the template editor .
2117	Return all excluded fields as HTML drop down menu
2118	Generate a HTML form with queries and return it as string
2119	Get the DCA table settings from the DCA cache
2120	Get the DCA table settings from the database . sql files
2121	Return the active modules as array
2122	Add a file to the combined file
2123	Add multiple files from an array
2124	Generates the files and returns the URLs .
2125	Generates the debug markup .
2126	Handle CSS files
2127	Fix the paths
2128	End a block
2129	Load all configuration files
2130	Mark the object as modified
2131	Save the local configuration file
2132	Add a configuration variable to the local configuration file
2133	Permanently set a configuration value
2134	Permanently remove a configuration value
2135	Preload the default and local configuration
2136	Override the database and SMTP parameters
2137	Escape a value depending on its type
2138	Throws an exception if the document root is insecure .
2139	Adds the Contao headers to the Symfony response .
2140	Fetches and stores HTTP headers from PHP .
2141	Writes the current session data to the database .
2142	Returns the session bag .
2143	Generate an error 403 page
2144	Counts the login attempts and locks the user if it reaches zero .
2145	Recursively replace insert tags with their values
2146	Generate the e - mail object and return it
2147	Compile the newsletter and send it
2148	Remove the newsletter subscriptions of members who close their account
2149	Synchronize newsletter subscription of new users
2150	Activate newsletter subscription of new users
2151	Synchronize the newsletter subscriptions if the visibility is toggled
2152	Synchronize newsletter subscription of existing users
2153	Update a particular member account
2154	Get all editable newsletters and return them as array
2155	Add newsletters to the indexer
2156	Ignore the field if nothing has been entered
2157	Show the YouTube link in the back end
2158	Version 2 . 9 . 2 update
2159	Version 2 . 10 . 0 update
2160	Version 3 . 2 . 0 update
2161	Version 3 . 3 . 0 update
2162	Version 3 . 5 . 0 update
2163	Version 4 . 0 . 0 update
2164	Convert a single source field to UUIDs
2165	Convert a multi source field to UUIDs
2166	Convert an order source field to UUIDs
2167	Generate a helper object based on a field value
2168	Create a content element
2169	Renders a form to accept the license .
2170	Renders a form to set the install tool password .
2171	Renders a form to log in .
2172	The method preserves the container directory inside the cache folder because Symfony will throw a compile error exception if it is deleted in the middle of a request .
2173	The method runs the optional cache warmers because the cache will only have the non - optional stuff at this time .
2174	Renders a form to set up the database connection .
2175	Renders a form to adjust the database tables .
2176	Renders a form to import the example website .
2177	Returns a redirect response to reload the page .
2178	Adds the default values to the context .
2179	Generates the symlinks in the web directory .
2180	Returns a finder instance to find files in the given path .
2181	Filters nested paths so only the top folder is symlinked .
2182	List an image size item
2183	Creates a new root node and dispatches an event to fill it with child nodes .
2184	Get all events of a certain period
2185	Listens to the contao_installation . initialize event .
2186	Fetch a model by table name and primary key
2187	Fetch a model by one of its aliases
2188	Register a model in the registry
2189	Unregister a model from the registry
2190	Check if a model is registered
2191	Register an alias for a model
2192	Check if an alias is registered
2193	Send the activation mail
2194	Activate an account
2195	Re - send the activation mail
2196	Send an admin notification e - mail
2197	Redirects the authenticated user .
2198	Find an article by its ID or alias and its page
2199	Find a published article by its ID or alias and its page
2200	Find all published articles by their parent ID and column
2201	Clean the global GPC arrays
2202	Strip HTML and PHP tags preserving HTML comments
2203	Decode HTML entities
2204	Encode special characters which are potentially dangerous
2205	Fallback to the session form data if there is no post data
2206	Logout the current user and redirect
2207	Generate the yearly menu
2208	Check whether a field exists
2209	Fetch the current row as enumerated array
2210	Fetch the current row as associative array
2211	Fetch a particular field of each row of the result
2212	Get the column information and return it as array
2213	Go to the first row of the current result
2214	Go to the previous row of the current result
2215	Go to the next row of the current result
2216	Go to the last row of the current result
2217	Get all channels and return them as array
2218	Return a list of form fields
2219	Count published news items by their parent ID
2220	Find published news items with the default redirect target by their parent ID
2221	Find all published news items of a certain period of time by their parent ID
2222	Count all published news items of a certain period of time by their parent ID
2223	Return all template folders as array
2224	Return the edit CSS button
2225	Map an exception to an error screen .
2226	Checks the exception chain for a known exception .
2227	Return the edit header button
2228	Add the breadcrumb menu
2229	Return the drag file button
2230	Recursively scan the templates directory and return all folders as array
2231	Checks if there is an authenticated user .
2232	Find ten matching usernames and return them as JSON
2233	Check permissions to use table tl_undo
2234	Show the deleted records
2235	Adds the feeds to the page header .
2236	Check whether the article is published
2237	Print an article as PDF and stream it to the browser
2238	Adds backwards compatibility for the %prepend_locale% parameter .
2239	Adds the database server version to the Doctrine DBAL configuration .
2240	Return all template files of a particular group as array
2241	Generate an article and return it as string
2242	Generate a content element and return it as string
2243	Generate a form and return it as string
2244	Return the languages for the TinyMCE spellchecker
2245	Calculate the page status icon name based on the page parameters
2246	Check whether an element is visible in the front end
2247	Compile the margin format definition based on an array of values
2248	Add a request string to the current URL
2249	Redirect to another page
2250	Replace the old back end paths
2251	Convert relative URLs in href and src attributes to absolute URLs
2252	Redirect to a front end page
2253	Get the parent records of an entry and return them as string which can be used in a log message
2254	Take an array of file paths and eliminate the nested ones
2255	Take an array of pages and eliminate the nested ones
2256	Set the static URL constants
2257	Add a static URL to a script
2258	Convert a DCA file configuration to be used with widgets
2259	Create an initial version of a record
2260	Return the files matching a GLOB pattern
2261	Prepare a query and return a Statement object
2262	Execute a raw query and return a Result object
2263	Return all tables as array
2264	Determine if a particular database table exists
2265	Determine if a particular column exists
2266	Determine if a particular index exists
2267	Return the field names of a particular table as array
2268	Check whether a field value in the database is unique
2269	Lock one or more tables
2270	Return the table size in bytes
2271	Return a universal unique identifier
2272	Quote the column name if it is a reserved word
2273	Return all front end modules as array
2274	Return all editable fields of table tl_member
2275	Return all layout sections as array
2276	Load the default activation text
2277	Load the default password text
2278	Dynamically change attributes of the pages field
2279	Return an environment variable
2280	Return the first eight accepted languages as array
2281	Return the HTTP Host
2282	Return true if the current page was requested via an SSL connection
2283	Return the current URL without path or query string
2284	Return the real REMOTE_ADDR even if a proxy server is used
2285	Return the SERVER_ADDR
2286	Return the operating system and the browser name and version
2287	Find an active member by their e - mail - address and username
2288	Find an unactivated member with a valid opt - in token by their e - mail - address
2289	Activate a recipient
2290	Add a new recipient
2291	Checks if the request can be indexed and forwards it accordingly .
2292	Return the current theme as string
2293	Return the back end themes as array
2294	Return the TinyMCE language
2295	Return a list of TinyMCE templates as JSON string
2296	Add the request token to the URL
2297	Handle runonce files
2298	Get all searchable pages and return them as array
2299	Add the file meta information to the request
2300	Return the system messages as HTML
2301	Convert an array of layout section IDs to an associative array with IDs and labels
2302	Generate the DCA picker wizard
2303	Add the custom layout section references
2304	Get all allowed pages and return them as string
2305	Recursively get all allowed pages and return them as string
2306	Get all allowed files and return them as string
2307	Recursively get all allowed files and return them as string
2308	Set the important part settings
2309	Get the important part settings
2310	Set the zoom level
2311	Get the path of the resized image
2312	Get the cache name
2313	Resize the image
2314	Prepare image object .
2315	Prepare important part object .
2316	Prepare resize configuration object .
2317	Calculate the resize coordinates
2318	Get the relative path to an image
2319	Resize or crop an image and replace the original with the resized version
2320	Create an image instance from the given image path and size
2321	Resize an image and store the resized version in the image target folder
2322	Convert sizes like 2em 10cm or 12pt to pixels
2323	Return the token
2324	Validate a token
2325	Check whether a property is set
2326	Create a new collection from a database result
2327	Set the current row from an array
2328	Save the current model
2329	Delete the current model and return the number of affected rows
2330	Go to the next row
2331	Fetch a column of each row
2332	Trim the values and add new languages if necessary
2333	Adds the request attribute to the request .
2334	Logs successful user impersonations .
2335	Reads the cookies from the request and injects them into the storage .
2336	Adds the token cookies to the response .
2337	Adds the legacy table options to remain backwards compatibility with database . sql files .
2338	Create the initial version of a record
2339	Render the versions dropdown menu
2340	Return the edit URL
2341	Return the username
2342	Return the user ID
2343	Implode a multi - dimensional array recursively
2344	Create the file if it does not yet exist
2345	Truncate the file and reset the file pointer
2346	Close the file handle
2347	Return the file content as string
2348	Write to a file
2349	Rename the file
2350	Copy the file
2351	Resize the file if it is an image
2352	Send the file to the browser
2353	Write data to a file
2354	Return a redirect response object
2355	Checks if a front end user is authenticated .
2356	Checks if a back end user is authenticated .
2357	Gets the front end username from the session .
2358	Gets the back end username from the session .
2359	Tells whether the front end preview can show unpublished fragments .
2360	Find a published group by its ID
2361	Find all active groups
2362	Find the first active group with a published jumpTo page
2363	Decode all entities
2364	Generate an alias from a string
2365	Prepare a slug
2366	Censor a single word or an array of words within a string
2367	Encode all e - mail addresses within a string
2368	Extract all e - mail addresses from a string
2369	Split a friendly - name e - address and return name and e - mail as array
2370	Highlight a phrase within a string
2371	Split a string of comma separated values
2372	Convert a string to XHTML
2373	Convert a string to HTML5
2374	Convert file paths inside src attributes to insert tags
2375	Convert insert tags inside src attributes to file paths
2376	Sanitize a file name
2377	Convert the character encoding
2378	Convert special characters to HTML entities preventing double conversions
2379	Return an unserialized array or the argument
2380	Split a string into fragments remove whitespace and return fragments as array
2381	Strip the Contao root dir from the given absolute path
2382	Find a published FAQ from one or more categories by its ID or alias
2383	Adds the referer ID to the request .
2384	Sets the response from the exception .
2385	If the legend already exists nothing will be changed .
2386	If no legend is given the field is removed everywhere .
2387	Converts a palette string to a configuration array .
2388	Converts a configuration array to a palette string .
2389	Adds a new legend if possible or appends to the last one .
2390	Having the same field in multiple legends is not supported by Contao so we don t handle that case .
2391	Add the new calendar feed to the permissions
2392	Return the IDs of the allowed calendars as array
2393	Add a file to the archive
2394	Add a file from a string to the archive
2395	Write the central directory and close the file handle
2396	Convert a Unix timestamp to a hexadecimal value
2397	Replace bbcode and return the HTML string
2398	Change the subscription status
2399	Notify the subscribers of new comments
2400	Parse the template file and print it to the screen
2401	Return a route relative to the base URL
2402	Return the preview route
2403	Returns a translated message
2404	Returns an asset path
2405	Minify the HTML markup preserving pre script style and textarea tags
2406	Generate the markup for a style sheet tag
2407	Generate the markup for a JavaScript tag
2408	Flush the output buffers
2409	Get one object instance per table
2410	Return an array that can be used by the database installer
2411	Export a theme
2412	Add the table tl_theme
2413	Add the table tl_style_sheet
2414	Add the table tl_module
2415	Add the table tl_image_size
2416	Add the table tl_files to the XML and the files to the archive
2417	Add a data row to the XML document
2418	Recursively add a folder to the archive
2419	Add templates to the archive
2420	Moves a file or folder to a new location
2421	Copies a file or folder to a new location
2422	Removes a file or folder
2423	Update the hashes of all parent folders of a resource
2424	Get the folder hash from the databse by combining the hashes of all children
2425	Check if the current resource should be synchronized with the database
2426	Check if a file or folder is excluded from synchronization
2427	Adds a link to the Contao Manager in the back end navigation .
2428	Check whether the last script execution was less than a minute ago
2429	Runs all Composer tasks to initialize a Contao Managed Edition .
2430	List a style sheet
2431	Automatically set the category if not set
2432	Update a style sheet after a version has been restored
2433	Return a session variable
2434	Set a session variable
2435	Remove a session variable
2436	Return the session data as array
2437	Set the session data from an array
2438	Append data to the session
2439	Duplicates the configuration and overrides the current picker alias .
2440	Encodes the picker configuration for the URL .
2441	Initializes the object from the URL data .
2442	Returns the back end user object .
2443	Encrypt a value
2444	Decrypt a value
2445	Initialize the encryption module
2446	Check permissions to edit table tl_comments
2447	Notify subscribers of a reply
2448	Send out the new comment notifications
2449	Return the edit comment button
2450	Adds the cache invalidation tags for the source .
2451	Sets the default locale based on the request or session .
2452	Returns the locale from the request the session or the HTTP header .
2453	Find a blacklist entry by its hash and PID .
2454	List all records of a particular table
2455	Move all selected records
2456	Delete all selected records
2457	Recursively get all related table names and records
2458	Restore one or more deleted records
2459	Change the order of two neighbour database records
2460	Return a pagination menu to browse results
2461	Canonicalizes a path preserving the directory separators .
2462	Generate the markup for the DropZone uploader
2463	Find sent newsletters by their parent ID
2464	Find sent newsletters by multiple parent IDs
2465	Check permissions to edit table tl_faq
2466	Add the welcome screen
2467	Adjusts the logout link if the current user is impersonated .
2468	Returns the options for the valid characters setting suitable for widgets .
2469	Maps given Content to a Document .
2470	Returns max depth of indexing for given content type .
2471	Finds content objects for the given query .
2472	Performs a query for a single content object .
2473	Indexes a content object .
2474	Indexes several content objects .
2475	Deletes a content object from the index .
2476	Log warning while progress helper is running .
2477	Execute a HTTP request to the remote server .
2478	Get formatted request headers .
2479	Get array of search fields .
2480	Map search field value to solr value using FieldValueMapper .
2481	Returns search hits for the given array of Solr query parameters .
2482	Generate URL - encoded query string .
2483	Returns search targets for given language settings .
2484	Returns all search targets without language constraint .
2485	Indexes an array of documents .
2486	Commits the data to the Solr index making it available for search .
2487	Perform request to client to search for records with query string .
2488	Get sort field name .
2489	Returns true if current configurations has several endpoints .
2490	Processes connection configuration by flattening connection parameters and setting them to the container as parameters .
2491	Creates needed search services for given connection name and parameters .
2492	Creates Endpoint definition in the service container .
2493	Get Solr range .
2494	Escapes value for use in expressions .
2495	Adds endpoints definition .
2496	Returns field name base on given depth .
2497	Returns a filtering condition for the given language settings .
2498	Returns criteria for prioritized languages fallback .
2499	Returns criteria for always available translation fallback .
2500	Return index field type for the given arguments .
2501	Converts an array of facet builder objects to a Solr query parameters representation .
2502	Map Solr return array into a sane hash map .
2503	Loads messages & versions from WSDL .
2504	Get Messages & Versions from an imported WSDL file
2505	Load the WSDL contents to a queryable DOMXpath .
2506	Evaluate an XPATH query on a given WSDL
2507	Loop all extracted operations from a wsdl and find their message versions
2508	Create a request message for a given message with a set of options .
2509	Find the correct builder for a given message
2510	FOP_ValidateFormOfPayment Analyze the result from the message operation and check for any error messages
2511	Make status from a category DOMNode or default status .
2512	Sets error status .
2513	Checks if new status is worse than current status
2514	Set TransactionFlowLink Consumer Id
2515	PNR_Retrieve - Retrieve an Amadeus PNR by record locator
2516	Create a PNR using PNR_AddMultiElements
2517	PNR_AddMultiElements - Create a new PNR or update an existing PNR .
2518	PNR_RetrieveAndDisplay - Retrieve an Amadeus PNR by record locator including extra info
2519	Queue_List - get a list of all PNR s on a given queue
2520	Queue_PlacePNR - Place a PNR on a given queue
2521	PNR_Ignore - Ignore an Amadeus PNR by record locator
2522	Call a message with the given parameters
2523	Make message options
2524	Load security authenticate options from auth params
2525	Get the TransactionFlowLink Consumer ID
2526	Handles authentication & sessions
2527	Get the Web Services server Endpoint from the WSDL .
2528	Get the SOAPAction for a given message from the WSDL contents .
2529	Generate a GUID
2530	Make SoapClient options for Soap Header 4 handler
2531	Return transaction code for stateful requests .
2532	Load non - required options if available
2533	Load inventory information
2534	Set the session data to continue a previously started session .
2535	Extract the Messages and versions from the loaded WSDL file .
2536	Get the WSDL ID for the given message
2537	Get the appropriate SoapClient for a given message
2538	Initialize SoapClient for a given WSDL ID
2539	Execute a method on the native SoapClient
2540	Create the correct element identifier for a given element
2541	Analyze response by looking for error category and message with the provided XPATH queries
2542	Analyze response by looking for error message and level with the provided XPATH queries
2543	Analyse with XPATH queries for error code and message provide fixed category
2544	Analyze response by looking for error category and message in nodes specified by name
2545	Make a Xpath - queryable object for an XML string
2546	Converts a status code found in an error message to the appropriate status level
2547	Analyze the response from the server and throw an exception when an error has been detected .
2548	Find or create the correct handler object for a given message
2549	Loads Client parameters
2550	Load the session handler
2551	Load a request creator
2552	Get substring between two strings
2553	Load an array of PricingOptionGroup objects from the Pricing request options .
2554	Load fare - family pricing option and return it .
2555	Load corporate negofare
2556	Load OB Fees
2557	load Method of Payment Details
2558	Payment Module information
2559	Load Supplementary data
2560	Create MopDetailedData node if needed
2561	Load Specific Changes
2562	Search by geocode?
2563	Search by Business ID?
2564	Generates a somewhat random string of a given length
2565	Analysing a PNR_DisplayHistoryReply
2566	Check if any parameter to the current function is not empty
2567	Check if all parameters to the current function are not empty
2568	Check if all parameters to the current function are integers
2569	Check if any parameter to the current function is true
2570	Get the NONCE base to be used when generating somewhat random nonce strings
2571	Check if the given Form Of Payment type is valid
2572	Load Session Handler
2573	Load Authentication Parameters
2574	Load Session Handler Parameters
2575	Load Request Creator Parameters
2576	Merges Pricing options
2577	Avoid double pricing groups when combining an explicitly provided override option with a specific parameter that uses the same override option .
2578	Load Arrival Unknown element
2579	Load Customer references
2580	Load WSDL from config
2581	Load Override SoapClient parameter from config
2582	Load TransactionFlowLink options from config
2583	Prepare to send a next message and checks if authenticated
2584	Analysing a PNR_NameChangeReply
2585	Load passenger & segment references
2586	PNR_AddMultiElements call which only adds requested data to the message
2587	Make PNR_AddMultiElements structure from a PnrCreatePnrOptions input .
2588	Load Segment itinerary
2589	Add Received From field - if needed .
2590	Load Arrival date info from \ DateTime
2591	Load all paymentData
2592	Create a Request Creator
2593	Set fee ids if needed
2594	Set currency override code if needed
2595	Find the error message for a given error code
2596	Decode error processing level code
2597	Checks whether any of the given tokens matches the current lookahead .
2598	Moves to the next token in the input string .
2599	Tells the lexer to skip input tokens until it sees a token with the given value .
2600	Moves the lookahead token forward .
2601	Gets the literal for a given token .
2602	Check if AUTH dictionary exists
2603	Verifies whether super users are enabled in the magentomodule_config dictionary
2604	Upload WAF allowlist snippet
2605	Alter the X - Magento - Tags header
2606	Delete ACL entry
2607	List all image optimization default config options
2608	Fetch current version
2609	Fetch next version
2610	Determine currently service active version and the next version in which the active version will be cloned
2611	Fetches and validates active version
2612	Create auth item
2613	Prepares GA data for request
2614	Returns Website name
2615	Checks if API token is valid
2616	Prepares GA custom variables
2617	Returns default Country
2618	Get Default Site Location
2619	Generate GA CID
2620	Sends request to GA that the Fastly module is installed
2621	Sends request to GA every time the Test connection button is pressed
2622	Sends Fastly configured \ not_configured request to GA
2623	Calculates number of days since Fastly module installation
2624	Sends CURL request to GA
2625	Renders ESI GeoIp block
2626	Initialise form fields
2627	Render array cell for prototypeJS template
2628	Get list of store views .
2629	Delete dictionary item
2630	Create ACL entry for specific ACL
2631	Get custom snippets
2632	Send API purge request to invalidate cache by pattern
2633	Return historic stats
2634	Deletes the specified custom snippet VCL file
2635	Check feed for modification
2636	Fetches last github version
2637	Create dictionary item
2638	Get all ACL entries for active version and current ACL
2639	Injects modlyies to configuration
2640	Purge a single URL
2641	Purge Fastly by a given surrogate key
2642	Purge all of Fastly s CDN content . Can be called only once per request
2643	Send purge request via Fastly API
2644	Get the logged in customer details
2645	List detailed information on a specified service
2646	Clone the current configuration into a new version .
2647	Add comment to the specified version
2648	Upload a VCL for a particular service and version
2649	Set the specified VCL as the main
2650	Validate the version for a particular service and version .
2651	Activate the current version .
2652	Creating and updating regular VCL snippets
2653	Update a dynamic snippet
2654	Performs a lookup to determine if VCL snippet exists
2655	Creates a new condition
2656	Creates a new header
2657	Creates a new Response Object .
2658	Gets the specified Response Object .
2659	Creates a new Request Settings object .
2660	Retrieves a specific Request settings object .
2661	Removes the specified Request Settings object .
2662	List all backends for a particular service and version .
2663	Configure Backend settings
2664	Send message to Slack channel
2665	Create named dictionary for a particular service and version .
2666	Get dictionary item list
2667	Fetches dictionary by name
2668	Get auth dictionary
2669	Check if authentication dictionary is populated
2670	Create dictionary items
2671	Delete single Dictionary item
2672	Upsert single Dictionary item
2673	Get ACL container info
2674	Delete named ACL for a particular service and version .
2675	Fetch ACL entry list for particular ACL
2676	Upsert single ACL entry
2677	Delete single ACL entry from specific ACL
2678	Update single ACL entry
2679	Query for historic stats
2680	Check if image optimization is enabled for the Fastly service
2681	Configure the image optimization default config options
2682	Retrieve Fastly service details
2683	Retrieve Web Application Firewall settings
2684	Wrapper for API calls towards Fastly service
2685	Check if request is limited
2686	Get Fastly service image optimization status
2687	Converts Fastly serialized data to JSON format
2688	Fastly implementation of rotation
2689	Fastly implementation of resize
2690	Return resized product image information
2691	Creates a force lossy url param or url + param depending if IO is disabled or enabled
2692	Creates a url with fastly parameters
2693	Compiles the fastly GET parameters
2694	Upload snippet with updated IO default config options
2695	Set x - esi header on ESI response request If omitted causes issues with embedded esi tags
2696	Return cache type Varnish if Fastly is configured .
2697	Upload Auth VCL snippets
2698	If old configuration values exist they re fetched and saved to new config paths . This script will only execute on module version < = 1 . 0 . 8
2699	Config path changes
2700	Convert serialized data to magento supported serialized data
2701	Get a list of all modules
2702	Save uploaded file before saving config value
2703	Check if block can be displayed
2704	Get content types as option array
2705	Verifies weather or not auth settings snippet exists on specified Fastly version
2706	Returns all module data from database
2707	Get the WAF page content
2708	Trigger purge if set
2709	Set flag for purging if Fastly is switched off
2710	Get all domains for active version
2711	Check if authentication users are available
2712	Retrieve element HTML markup .
2713	Get pixel ratio values
2714	Get checked values
2715	Returns Modly node config
2716	Insert text input for Modly config
2717	Remove scope label
2718	Get custom snippet
2719	Checks if host is one of Magento s configured domains .
2720	Get GeoIP action
2721	Gets the dialog message in the locale of the target store .
2722	Prevent Magento from executing purge requests on Varnish when Fastly is enabled
2723	Set x - esi header if block contains ttl attribute
2724	If Fastly CDN is enabled it sends one purge request per tag
2725	Return false if purging is not allowed for object instance .
2726	Get all Auth items for active version
2727	Upload WAF Bypass snippets
2728	Edit custom snippet
2729	Adjust srcset if required
2730	Delete auth item
2731	Get all backends for active version
2732	Performs cache cleanup and purge all on Fastly service . Should be used when Preserve static assets on purge is enabled .
2733	Save Error Page Html
2734	Set appropriate Cache - Control headers Set Fastly stale headers if configured
2735	Add a debug header to indicate this request has passed through the Fastly Module . This is for ease of debugging
2736	Gte a list of all modules
2737	Set Fastly Service ID
2738	Set Fastly API Token
2739	Upload default VCL conditions and requests
2740	Verifies whether or not the blocking settings snippet exists on specified Fastly version
2741	Fetch all manifests from the repository
2742	Check if the Fastly service is already configured
2743	Predispatch admin user login success
2744	Flush Fastly CDN cache
2745	Determines should Image optimization be used
2746	Determines should Image optimization pixel ratios be used
2747	Get store ID for country .
2748	Filter country code mapping by priority
2749	Return generated magento2_fastly_varnish . vcl configuration file
2750	Returns VCL snippet data
2751	Validate custom snippet data
2752	Process blocked items depending on blocking type
2753	Matches a path in the router .
2754	Plains a text . Strips everything evil out .
2755	Publish imported articles .
2756	React to a config object being deleted .
2757	Get taxonomy permissions .
2758	Get new ratio
2759	Get storage key
2760	Fetches the branches via the git branch command .
2761	Returns the log level mapping for an event .
2762	Adds a log message using the level defined in the mappings .
2763	Checks whether a repository has already been cloned to this directory .
2764	Runs a Git command and returns the output .
2765	Returns whether HEAD is up - to - date with its remote tracking branch .
2766	Returns whether HEAD is ahead of its remote tracking branch .
2767	This is synonymous with git push origin tag v1 . 2 . 3 .
2768	Create a new branch and check it out .
2769	Adds a remote to the repository .
2770	Returns the fetch or push URL of a given remote .
2771	Executes a git clone command .
2772	Create an empty git repository or reinitialize an existing one .
2773	Fetches the Tags via the git branch command .
2774	Set an alternate private key used to connect to the repository .
2775	Set whether or not to stream real - time output to STDOUT and STDERR .
2776	For example passing the git
2777	Executes a git init command .
2778	Executes a git clone command and returns a working copy object .
2779	The command is simply a raw command line entry for everything after the Git binary . For example a git config - l command would be passed as config - l via the first argument of this method .
2780	Builds the command line options for use in the Git command .
2781	Renders the arguments and options for the Git command .
2782	Render a shadow marker i . e . a mutation whose source code line is not covered by any test based on current code coverage data .
2783	Render message that mutation testing loop is starting
2784	Utility function to prefix output lines with an indent
2785	Extract failure details and reformat into human readable form .
2786	Not all additions can be mutated .
2787	Execute the command .
2788	Replace 1 with 0 0 with 1 or increment .
2789	Reconstruct a string of source code from its constituent tokens
2790	Replace 0 . 0 with 1 . 0 1 . 0 with 0 . 0 and float between 1 and 2 is incremented by one and any float greater than 2 is replaced with 1 . 0 .
2791	Parse the test adapter result output and count ok results .
2792	Retrieve any of the original input options
2793	Get the cache directory .
2794	Set the cache directory of the project being mutated
2795	Get the cache directory of the project being mutated
2796	Options to pass to adapter s underlying command
2797	Get a test framework adapter . Creates a new one based on the configured adapter name passed on the CLI if not already set .
2798	For debug and logging purposes
2799	Generate a new Job script to be executed under a separate PHP process
2800	Helper method to generate the code to initialize a bean .
2801	Helper method to generate the method body for managing non - lazy bean instances .
2802	Helper function to cast any value to a boolean representation .
2803	Sets the directory in which ProxyManager will store the generated proxy classes in .
2804	View request profile list
2805	View request profile page
2806	Returns lines from log file
2807	Deletes all request profiles
2808	Initialise request profile collection based on filters set on request
2809	Returns sorted visible debug panels
2810	Initialises logging by registering commong log files
2811	Returns list of events dispatched during request . This is extracted from data captured by Varien Profiler
2812	Returns a list of called observers during request . Observers are determined based on Varien Profiler timers
2813	Captures information from controller
2814	Returns block information associated to specified block name
2815	Adds loaded collection
2816	Returns information about loaded collections
2817	Adds loaded model
2818	Returns information about captured models
2819	Sets request query from current sql profiler
2820	Serialize fields that are stored in info blob
2821	Initialize persistent fields that are used as filters and prepare info blob
2822	Initialize fields that are saved in info blob
2823	Cron jobs that deletes expired request info
2824	Removes configured number of days from specified date
2825	Don t use translation for our debug module
2826	Returns url to specified request profile page
2827	Returns number formatted based on current locale
2828	Returns an option array where every element has its value and label filled in with elements from passed array
2829	Enable SQL profiler
2830	Disable SQL profiler
2831	Runs specified SQL
2832	Returns stack trace for specified query
2833	Returns query referenced in request parameters
2834	Captures rendering start for specified block
2835	Captures rendering completion for specified block
2836	Returns layout updates processed during the request
2837	Returns design descriptive properties
2838	Returns request info
2839	Returns url for request list with current filters
2840	Renders an array as text
2841	Iterates an array and prints its keys and values .
2842	Builds a tree based on block recorded information
2843	Returns a tree html representation for layout tree
2844	Renders a rendering tree node
2845	Returns request path based on REQUEST_URI
2846	Returns an url for our module route and default store
2847	Returns module configuration file
2848	Sets active status for specified module
2849	Changes status for SQL profiler
2850	Changes status for template and block hints
2851	Searches configuration keys
2852	Delete template_hints related configurations
2853	Deletes all saved request profiles
2854	Returns layout files that have updates for specified handle
2855	Returns layout updates added via Admin and stored in database .
2856	Captures information from specified collection
2857	View layout handle details
2858	Returns layout handles for specified request profile
2859	Returns html for http methods select
2860	Returns html for limit selects
2861	Returns position range for specified log file
2862	Initiates start range for all registered files
2863	Returns logged content for each log file
2864	Returns current end position for specified file path
2865	Returns content added during this request for specified log file
2866	Returns number of log lines added in all of registered logs
2867	Returns content from specified file between specified range
2868	Prevent access to our access if toolbar is disabled
2869	Renders specified array
2870	Returns enable state for required PHP extensions
2871	Returns description for installed Magento modules
2872	Captures information about specified model
2873	Returns an assoc array with filter and if its value from request . Filters missing from request parameters are ignored .
2874	Enables specified module
2875	Determines category based on timer name
2876	Converts timers registered by Varien Profile into structure understood by Symfony
2877	Search grouped class
2878	Enables Full Page Cache Debug
2879	Enables template Hints
2880	Disables inline translation
2881	E - mail body action
2882	Returns query references in request parameters
2883	Returns request info model associated to current request .
2884	Called to mark that we can start profile execution of specified request
2885	Saves request info model .
2886	Listens to controller_action_predispatch event to capture request information
2887	Listens to controller_action_layout_generate_blocks_after and records instantiated blocks
2888	Listens to core_block_abstract_to_html_before event and records blocks that are about to be rendered .
2889	Listens to core_collection_abstract_load_before and eav_collection_abstract_load_before events and records loaded collections
2890	Listens to model_load_after and records loaded models
2891	Listens to controller_front_send_response_after . This event represents the end of a request .
2892	Disables website restriction module for requests handled by our module
2893	Logic that checks if we should capture specified block
2894	Sheep_Debug_Model_Query constructor .
2895	Overwrites parent method to capture details for sent e - mail
2896	Adds e - mail information on current request profile info
2897	Responsible to copy queries from current profiler and set this instance sql profiler
2898	Calls parent implementation and saves stack trace
2899	Returns an array of SQL queries
2900	Captures request response and controller information .
2901	Initialize response properties
2902	Download configuration as text or xml action
2903	Prepares response with configuration as text
2904	Overwrites parent method to capture e - mail details
2905	Adds e - mail information on request profiler
2906	Returns raw content attached to specified mail object
2907	Returns raw content of e - mail message . Abstract Zend_Mime_Part interface changes between 1 . 11 . 0 and 1 . 12 . 0
2908	Returns raw subject
2909	Returns module version number
2910	Returns results as assoc array for specified SQL query
2911	Flattens an xml tree into an associate array where key represents path
2912	Returns specified number formatted based on current locale
2913	Returns readable file size
2914	Formats a stack trace array generated by debug_backtrace
2915	Returns all xml files that contains layout updates .
2916	Convert string to corresponding type
2917	Tests file for writability . If the file doesn t exist check the parent directory for writability so the file can be created .
2918	Append one setter to buffer
2919	Update one setter in buffer
2920	Delete one setter in buffer
2921	Save buffer to special file path
2922	Ensures the given file is readable .
2923	Get informations of all lines from file content
2924	Build an setter line from the individual components for writing
2925	Normalising the value of setter to reading
2926	Load file for working
2927	Reset content for editor
2928	Get all or exists given keys in file content
2929	Check if a given key is exists in the file content
2930	Return the value matching to a given key in the file content
2931	Set many keys to buffer
2932	Set one key to buffer
2933	Delete many keys in buffer
2934	Save buffer to file
2935	Create one backup of loaded file
2936	Return an array with all available backups
2937	Restore the loaded file from latest backup file or from special file .
2938	Delete all or the given backup files
2939	For the special case of units that have a linear conversion factor this factory method simplifies the construction of the unit of measure .
2940	Register a new unit of measure for all instances of this this physical quantity .
2941	Get the unit of measure that matches the given name by either name or alias .
2942	Given a unit of measure determine if its name or any of its aliases conflict with the set of already - known unit names and aliases .
2943	Determine if any of the assigned roles to this user have a specific permission
2944	Assign a role to this user
2945	Remove a role from this user
2946	Reassign roles from an id or an array of role Ids
2947	Give Permission to a Role
2948	Creates release zip
2949	Given the current state of a Loader instance perform a batch load from its current queue .
2950	Do not cache individual loads if the entire batch dispatch fails but still reject each request so they do not hang .
2951	The call for action method this is the parse job initiator
2952	Prepares the matched template text for parsing by escaping known characters and removing excess whitespaces
2953	Extracts the named variables values from within the text based on the provided template
2954	Iterates through the templates directory to find the closest template pattern that matches the provided text
2955	Constructor . Perform some checks about the OS and setserial
2956	Closes the device
2957	Sets the length of a character .
2958	Sets the length of stop bits .
2959	Configures the flow control
2960	Sends a string to the device
2961	Reads the port until no new datas are availible then return the content .
2962	Flushes the output buffer Renamed from flush for osx compat . issues
2963	check if current user authorized
2964	Perform a HTTP Request
2965	Build a request object
2966	Creates a request for 5 . x or 6 . x guzzle version
2967	Creates a response object
2968	Pick the metadata out of the raw data
2969	Get a table gateway for the given table name
2970	Take a Message and return a PSR ResponseInterface .
2971	Applies a function to each attachment and finds a unique name for any conflicting names .
2972	Returns the variables that in the use clause of the closure definition . These are referred to as the used variables static variables or closed upon variables context of the closure .
2973	Recursively traverses and wraps all Closure objects within the value .
2974	Analyzer a given closure .
2975	Clones the SerializableClosure with a new bound object and class scope .
2976	Serializes the code context and binding of the closure .
2977	Unserializes the closure .
2978	Returns license metadata by license identifier .
2979	Returns license exception metadata by license exception identifier .
2980	Adds a configuration resource at the top of the existing ones .
2981	Finds the last imported resource path in the YAML file .
2982	Adds a bundle at the end of the existing ones .
2983	Tries to make a path relative to the project which prints nicer .
2984	Peeks the next token .
2985	Generates the index . html . twig template in the final bundle .
2986	Tries to generate forms if they don t exist yet and if we need write operations on entities .
2987	Adds a routing resource at the top of the existing ones .
2988	Checks if the routing file contains a line for the bundle .
2989	Sets a logger instance on the transport
2990	Pass the file input stream to a record
2991	Encodes a request record
2992	Parses the XML returned by Zoho to the appropriate objects
2993	initialize SMTP plugin
2994	encode special chars if possible
2995	encode and split header strings
2996	set encoded header value
2997	set message sender
2998	set reply - to field respected by most email clients
2999	set receipient for bounce error mails
3000	reset recipients if key was given or restart whole smtp plugin
3001	set message in HTML text format
3002	set message contents by mime type
3003	add a file attachment
3004	save the send mail to disk
3005	receive and proceed message ping
3006	track clicked link and reroute
3007	Set layout template
3008	Retrieve an attribute
3009	Renders a template and returns the result as a string
3010	Set the consumer for this client
3011	Follow a blog
3012	Unfollow a blog
3013	Like a post
3014	Unlike a post
3015	Delete a post
3016	Reblog a post
3017	Edit a post
3018	Create a post
3019	Get tagged posts
3020	Get information about a given blog
3021	Get blog avatar URL
3022	Get blog likes for a given blog
3023	Get blog followers for a given blog
3024	Get posts for a given blog
3025	Make a POST request to the given endpoint and return the response
3026	Parse a response and return an appropriate result
3027	Make a request to the given endpoint and return the response
3028	Set the consumer for this request handler
3029	Set the token for this request handler
3030	Pause delivery execution .
3031	Resume delivery execution
3032	Get delivery execution state
3033	Return a human readable description of the test session
3034	Retrieve QTI Items in their hierarchy for the given parameters as format them as tree .
3035	Checks if a dataset exists for the provided key .
3036	Persists a cache entry and update its status .
3037	Applies a dataset to be stored .
3038	Gets a dataset from the store using the provided keys . Will return null if the dataset doesn t exist .
3039	Whenever or not a dataset exists .
3040	Marks the the dataset to be removed from the storage .
3041	Sends the changes to the storage .
3042	Packs a TimeLine in order to reduce the storage footprint
3043	Unpack a dataset to a workable TimeLine
3044	Encode a dataset with the managed format .
3045	Get assessmentItemRef from delivery
3046	Save the tool state if some are found in the current request
3047	Get the current tools states
3048	Starts the context
3049	Extracts the path of the compilation directory
3050	Loads the storage
3051	Retrieves the index of compiled items .
3052	Gets a particular value from item index
3053	Get Cat Engine Implementation
3054	Persist seen CAT Item identifiers .
3055	Get Last CAT Item Output .
3056	Persist CAT Item Output .
3057	Is the Assessment Test Session Context Adaptive .
3058	Contains Adaptive Content .
3059	Select the next Adaptive Item and store the retrieved results from CAT engine
3060	Get Current AssessmentItemRef object .
3061	Get Real Current Position .
3062	Can Move Backward
3063	Save the Cat service result for tests and items
3064	Store a Cat Result variable
3065	Convert CAT variables to taoResultServer variables
3066	Forward the data processing to the SynchronisationService
3067	Process the move action .
3068	Initialize and verify the current service context useful when the context was opened but not checked .
3069	End the item timer to QtiTimeLine
3070	Save the actual item state . Requires params itemDefinition and itemState
3071	Save the item responses Requires params itemDuration and optionaly consumedExtraTime
3072	Gets the item reference for the current itemRef
3073	Process the timeout action .
3074	Gets the rubrics according to the current session state The content is directly rendered into the page
3075	Process the pause action .
3076	Processes the input messages
3077	Builds the list of output messages
3078	Check whether channel exists
3079	Extract CAT Information from Test Definition .
3080	Is a Given Section Adaptive
3081	Returns the options related to the current test context
3082	Returns the Adaptive Engine
3083	Get AssessmentItemRef by Identifier
3084	Get AssessmentItemRef by Identifiers
3085	Get AssessmentItemRefs corresponding to a given Adaptive Placeholder .
3086	Get Information about a given Adaptive Section .
3087	Validation for adaptive section
3088	Is an AssessmentSection Adaptive?
3089	Alter the timeout value for engine params
3090	Process the storeTraceData action .
3091	Stores the timer data
3092	Loads the timer data from the storage
3093	Wrap the process to appropriate action and aggregate results
3094	Get available actions from config
3095	Resolve a runner action to synchronize
3096	Get item data by identifier
3097	Create the item definition response for a given item
3098	Gets a message related to the state of the assessment test session
3099	Returns an array of items containing also confident data like branching and response processing rules
3100	Returns the itemData extending with the variable elements
3101	Calls itself recursively to return identifiers from nested arrays
3102	Gets the StorageManager service
3103	Loads the extended state from the storage
3104	Saves the extended state into the storage
3105	Gets the name of the client store used for the timer
3106	Gets all events from the queue
3107	Loads the table that maps the items identifiers to item reference Fallback index in case of the delivery was compiled without the index of item href
3108	Sets a CAT value in the Extended State .
3109	Gets a CAT value from the Extended State .
3110	Removes a CAT value from the ExtendedState .
3111	Gets the StateStorage service
3112	Persists the extended state
3113	Sets the name of the client store used for the timer
3114	Removes all events from the queue
3115	Stores the table that maps the items identifiers to item reference Fallback index in case of the delivery was compiled without the index of item href
3116	Set a CAT Value
3117	Get a CAT Value
3118	Remove a CAT value from the ExtendedState .
3119	Imports the internal state from an array
3120	Removes all TimePoint corresponding to the provided criteria
3121	Gets a filtered TimeLine containing the TimePoint corresponding to the provided criteria
3122	Finds all TimePoint corresponding to the provided criteria
3123	Compute the duration of a range of TimePoint
3124	Ensures the ranges are well formed . They should have been sorted before otherwise the process won t work . Tries to fix a range by adding missing points
3125	Makes a copy of a TimePoint and forces a particular type
3126	Tells if this is a start TimePoint
3127	Tells if this is a end TimePoint
3128	Computes the duration between two TimePoint
3129	Get the data folder from a given item definition
3130	Gets the test session for a particular delivery execution
3131	Persists the AssessmentTestSession into binary data .
3132	Initializes the delivery execution session
3133	Gets the rubrics related to the current session state .
3134	Gets definition data of a particular item
3135	Gets the state of a particular item
3136	Sets the state of a particular item
3137	Parses the responses provided for a particular item
3138	Checks if the provided responses are empty
3139	Stores the response of a particular item
3140	Does the given item has feedbacks
3141	Moves the current position to the provided scoped reference .
3142	Skips the current position to the provided scoped reference
3143	Handles a test timeout
3144	Finishes the test
3145	Sets the test to paused state
3146	Resumes the test from paused state
3147	Checks if the test is still valid
3148	Checks if an item has been completed
3149	Get the base url to the item public directory
3150	Comment the test
3151	Continue the test interaction if possible
3152	Stuff to be undertaken when the Assessment Item presented to the candidate times out .
3153	Stores trace variable related to an item a test or a section
3154	Create a trace variable from variable identifier and value
3155	Stores outcome variable related to an item a test or a section
3156	Create an outcome variable from variable identifier and value
3157	Stores response variable related to an item a test or a section
3158	Create a response variable from variable identifier and value
3159	Store a set of result variables to the result server
3160	Store a result variable to the result server
3161	Build the transmission based on context and item ref id to store Item variables
3162	Check if the given RunnerServiceContext is a QtiRunnerServiceContext
3163	Starts the timer for the current item in the TestSession
3164	Ends the timer for the current item in the TestSession
3165	Switch the received client store ids . Put the received id if different from the last stored . This enables us to check wether the stores has been changed during a test session .
3166	Get Current Assessment Session .
3167	Returns that the Theme Switcher Plugin is enabled or not
3168	Returns the ID of the current theme
3169	Gets the file that contains the href for the AssessmentItemRef Identifier
3170	Checks if the AssessmentItemRef Identifier is in the index .
3171	Builds the map of an assessment test
3172	Update the stats inside the target
3173	Get AssessmentItemRef objects .
3174	Get the time constraint for the given component
3175	Get the label of a Map item
3176	Gets a QTI runner navigator
3177	Check if a timed section is exited
3178	Get the list of items classes
3179	Retrieve QTI Items for the given parameters
3180	Whenever or not to use client container for test runner Fallback determined by qtiItem model extension
3181	Get the time remaining to be spent by the candidate on the source of the time constraint . Please note that this method will never return negative durations .
3182	Get the time remaining the candidate has to spend by the candidate on the source of the time constraint . Please note that this method will never return negative durations .
3183	Converts a duration to milliseconds
3184	Serialize the constraint the expected way by the TestContext and the TestMap
3185	Process the skip action .
3186	Adds a server start TimePoint at a particular timestamp for the provided ItemRef
3187	Adds a server end TimePoint at a particular timestamp for the provided ItemRef
3188	Gets the first timestamp of the range for the provided tags
3189	Gets the last timestamp of the range for the provided tags
3190	Gets the last registered timestamp
3191	Checks if the duration of a TimeLine subset reached the timeout
3192	Saves the data to the storage
3193	Loads the data from the storage
3194	Gets the added extra time
3195	Sets the added extra time
3196	Gets the amount of already consumed extra time . If tags are provided only take care of the related time .
3197	Gets the amount of remaining extra time
3198	Checks if a timestamp is consistent with existing TimePoint within a range
3199	Extracts a sorted range of TimePoint
3200	Count the number of bits set in a 32bits integer
3201	Retrieve QTI Items for the given parameters .
3202	Processes this test for T_STYLE tokens in CSS files .
3203	Verify if a CSS property value complies with an expected value .
3204	Check against a typical manual search & replace error often encountered .
3205	Retrieve an array with the doc block tags from a T_DOC_COMMENT_OPEN_TAG .
3206	Parse HTTP response headers array to a more usable format .
3207	Creates an array from a binary string into a given chunk size
3208	Encodes into base32
3209	Given an existing active OAuth 1 access token make a Dropbox API call to get a new OAuth 2 access token that represents the same user and app .
3210	Make a Dropbox API call to disable the given OAuth 1 access token .
3211	Use this to check that a function argument is of type AppInfo
3212	Loads a JSON file containing information about your app . At a minimum the file must include the key and secret fields . Run php authorize . php in the examples directory for details about what this file should look like .
3213	Use this to check that a function argument is either null or of type AppInfo .
3214	Make an API call to disable the access token that you constructed this Client with . After calling this API calls made with this Client will fail .
3215	Make an API call to get basic account and quota information .
3216	Start a new chunked upload session and upload the first chunk of data .
3217	Append another chunk data to a previously - started chunked upload session .
3218	Creates a file on Dropbox using the accumulated contents of the given chunked upload session .
3219	A way of letting you keep up with changes to files and folders in a user s Dropbox .
3220	Takes a copy of the file at the given revision and saves it over the current copy . This will create a new revision but the file contents will match the revision you specified .
3221	Returns metadata for all files and folders whose filename matches the query string .
3222	Creates and returns a public link to a file or folder s preview page . This link can be used without authentication . The preview page may contain a thumbnail or some other preview of the file along with a download link to download the actual file .
3223	Creates and returns a direct link to a file . This link can be used without authentication . This link will expire in a few hours .
3224	Gets a thumbnail image representation of the file at the given path .
3225	Creates a folder .
3226	Moves a file or folder to a new location .
3227	Build a URL for making a GET or PUT request . Will add the locale parameter .
3228	Perform an OAuth - 2 - authorized GET request to the Dropbox API . Will automatically fill in User - Agent and locale as well .
3229	Return a double - quoted version of the given string using PHP - escape sequences for all non - printable and non - ASCII characters .
3230	Loads a Host object from the auth_host and host_suffix fields of a JSON object . If those fields aren t present return null .
3231	Loads a JSON file containing authorization information for your app . php authorize . php in the examples directory for details about what this file should look like .
3232	If the given path is a valid Dropbox path return null otherwise return an English string error message describing what is wrong with the path .
3233	If you re running within a PHAR call this method before you use the SDK to make any network requests .
3234	A string equality function that compares strings in a way that isn t suceptible to timing attacks . An attacker can figure out the length of the string but not the string s value .
3235	Returns total amount of items in cart .
3236	Returns total price of all the items in cart .
3237	Returns total amount to be charged base on total price tax and discount .
3238	Runs calculations .
3239	Resets cart calculations .
3240	Sets callback urls
3241	Create the seeder .
3242	Returns item name .
3243	Returns item url .
3244	Returns flag indicating if item was purchased by user .
3245	Called by shop to charge order s amount .
3246	Called on callback .
3247	Adds item to cart .
3248	Removes an item from the cart or decreases its quantity . Returns flag indicating if removal was successful .
3249	Checks if the user has a role by its name .
3250	Scope to current user cart .
3251	Scope to current user cart and returns class model .
3252	Transforms cart into an order . Returns created order .
3253	Whipes put cart
3254	Retrieves item from cart ;
3255	Scopes to get transactions from user .
3256	Maps router . Add package special controllers .
3257	Scopes class by item sku . Optionally scopes by status .
3258	Scopes class by user ID and returns object . Optionally scopes by status .
3259	Creates the order s transaction .
3260	Process payment callback .
3261	Returns placed order .
3262	Handles gateway callbacks .
3263	Formats any value to price format set in config .
3264	Check on order status differences and fires event .
3265	Preserve new lines recursive function .
3266	Get the path to the database file .
3267	Open the database file .
3268	Close the database file .
3269	Read lines from the database file .
3270	Append a line to the database file .
3271	Write temporary file contents to database file .
3272	Set the config .
3273	Get a key from the database .
3274	Set a key in the database .
3275	Delete a key from the database .
3276	Flush the database .
3277	Get all keys from the database .
3278	Get all data from the database .
3279	Replace a key in the database .
3280	Normalize the user supplied config .
3281	Set the dir .
3282	Set the ext .
3283	Set the cache .
3284	Set the formatter .
3285	Returns the source context for a given template logical name .
3286	Listen to the bootstrap event
3287	Get plugin instance
3288	Read data from a client socket .
3289	Start the process .
3290	Wait for the process to end .
3291	Send a signal signal to the process .
3292	Twitter share link
3293	Linked in share link
3294	Build a single link
3295	Creates an array of fingerprintable fields .
3296	Convert a DOM Document into a nested array .
3297	Runs enhancements before the Lead is persisted .
3298	Determine the given file has a image type
3299	Set Http Client Headers
3300	Send A Http POST Request
3301	Send A Http Request For GuzzleHttp Http Client
3302	JSON request .
3303	Get GuzzleHttp \ Client instance .
3304	append signature to params
3305	Get aliyun fixed request format
3306	Append access_token to this url
3307	Build Request Param
3308	Tencent Authorization signature
3309	Build signature Key
3310	Get access token from baidu API .
3311	Get Token From Api .
3312	Get access token cache key .
3313	Append AppId And Bucket to option if empty
3314	Send a Http Request
3315	Set an array item to a given value using dot notation .
3316	Build spec attributes from spec string .
3317	push option value when the option accept multiple values .
3318	get readable spec for printing .
3319	Value Type Setters .
3320	Return valud values array .
3321	Return suggestions .
3322	Check if an option is one of the option in the collection .
3323	consume option value from current argument or from the next argument
3324	Return the current argument and advance to the next position .
3325	Render readable spec .
3326	render option descriptions .
3327	migrating variation from one product to the correct connector handeled product
3328	Returns the matching price configurations .
3329	Check file status . Return array of json data
3330	Upload file from local path .
3331	Upload file from file pointer
3332	Upload file from string using mime - type .
3333	Create group from array of File objects
3334	Init upload request and return curl resource
3335	Run prepared curl request . Throws Exception of not 200 http code
3336	Return data - integration attribute .
3337	Gets input tag to use with widget
3338	Convert datetime from string or \ DateTime object to ATOM string
3339	Get portion of groups from server respecting filters
3340	Get portion of files from server respecting filters
3341	Return an iterator of File objects to work with .
3342	Return an iterator of Group objects to work with .
3343	Copy file to the Uploadcare storage
3344	Process multiple files with chunk support
3345	Run request to process multiple files
3346	Run raw request to REST .
3347	Make request to API . Throws Exception if not http code 200 was returned . If http code 200 it will parse returned data form request as JSON .
3348	Prepares paged params array from chunk request result .
3349	Convert query array to encoded query string .
3350	Return path to send request to . Throws Exception if wrong type is provided or parameters missing .
3351	Set request type . If request type is wrong an Exception will be thrown .
3352	Returns full user agent string .
3353	Update File info
3354	Copy the file .
3355	Get URL of original image
3356	Get local URL path of original image
3357	Get image tag
3358	Get object with resized parameters . Provide width or height or both . If not width or height are provided exceptions will be thrown!
3359	Get object with preview parameters . Provide both width and height . If no width and height are provided exceptions will be thrown!
3360	Add any custom operation .
3361	Check if element exists . Uses current position if no offset provided
3362	Check if all elements are loaded into iterator
3363	Load elements chunk from server
3364	Flushes rewrite rules .
3365	Updates the permalink structure .
3366	Exposes apache modules if present in config
3367	Normalizes event setting all expected parameters .
3368	Generate a YUML compatible dsl_text to describe a given array of entities
3369	Build the string representing the single graph item
3370	Retrieve a class metadata instance by name from the given array
3371	Visit a given association and mark it as visited
3372	Retrieve the form factory
3373	Redirects the user to a YUML graph drawn with the provided dsl_text
3374	When processing the filename call the callback .
3375	Get a manipulable image instance .
3376	Creates an instance defining the cache directory .
3377	Handle a POST request to remind a user of their password .
3378	Determine whether to show the given entity type in the panel
3379	Get the default namespace for the class .
3380	For the given entity name the the corresponding Model s class
3381	Determine if the user has the given role .
3382	Determine if the user may perform the given permission .
3383	Performs authentication .
3384	Finds user to authenticate .
3385	Gets role from user s identity .
3386	Authenticates user .
3387	Send a reset link to the given user .
3388	Get redirect path after a successful confirmation .
3389	Get redirect path after a registration that still needs to be confirmed .
3390	Get redirect path after the confirmation was sent .
3391	Confirm a user with a given confirmation code .
3392	Resend a confirmation code to a user .
3393	Handle a registration request for the application .
3394	Send the confirmation code to a user .
3395	Attempt to log the user into the application .
3396	Get the mail representation of the notification .
3397	Decode unreserved characters
3398	Replacement for PHP s parse_string which does not deal with spaces or dots in key names
3399	Perform method action
3400	Make http request
3401	Get value from content by css selector
3402	Apply all result callbacks
3403	Load method data from yaml file
3404	Attempt to lock this command .
3405	Check if the passed time has elapsed since the command start .
3406	Search the specified path for command classes and add them to the application .
3407	Set the lock store to use .
3408	Get the lock factory in use .
3409	Set the path for the directory where lock files are stored .
3410	Run another command usually from within the currently running command .
3411	Formats the elapsed time as a string .
3412	Called when the crawl has ended .
3413	Refresh model fields and save them to a class field .
3414	Fill model fields if they are already known . Saves DB queries .
3415	Update model .
3416	Create an array of fields that will be saved to database .
3417	Get value from language field according to current language .
3418	Register eloquent .
3419	Instantiate service container if it s not instantiated yet .
3420	Delete model .
3421	Get the collection of users according to the current query .
3422	Get count of users according the current query .
3423	Determine if groups must be selected .
3424	Normalize filter before sending it to getList . This prevents some inconsistency .
3425	Get item by its id .
3426	Setter for sort .
3427	Add another filter to filters array .
3428	Paginate the given query into a paginator .
3429	Determine if all fields must be selected .
3430	Store closure s result in the cache for a given number of minutes .
3431	Get count of sections that match filter .
3432	Normalize select before sending it to getList . This prevents some inconsistency .
3433	Refresh user fields and save them to a class field .
3434	Refresh user groups and save them to a class field .
3435	Substitute old group with the new one .
3436	Fetch all iblock property codes from database
3437	Refresh element s fields and save them to a class field .
3438	Refresh element s sections and save them to a class field .
3439	Get element direct section as model object .
3440	Save props to database . If selected is not empty then only props from it are saved .
3441	Normalize properties s format converting it to PROPERTY_ CODE _VALUE .
3442	Set fetch using from string or array .
3443	Exists method for ArrayIterator .
3444	Get method for ArrayIterator .
3445	Get accessor method name if it exists .
3446	Get accessor for language field method name if it exists .
3447	Cast model to array .
3448	Get an attribute from the model .
3449	Set a given attribute on the model .
3450	Get IDs of direct children of the section . Additional filter can be specified .
3451	Record an aggregate changed event
3452	Returns null if no stream events can be found for aggregate root otherwise the reconstituted aggregate root
3453	Default stream name generation . Override this method in an extending repository to provide a custom name
3454	Use this factory when aggregate type should be detected based on given aggregate root
3455	Use this factory when aggregate type equals to aggregate root class The factory makes sure that the aggregate root class exists .
3456	Use this factory when the aggregate type is not equal to the aggregate root class
3457	Replay past events
3458	Allows for application extension by modules . Module can be any valid object or class name .
3459	Registers new route .
3460	Finds route matching clients request .
3461	Registers PSR - 15 compatible middelware . Middleware can be either callable object which accepts PSR - 7 server request interface and returns response interface or just class name that implements psr - 15 middleware or its instance .
3462	Handles request flow process .
3463	Runs application listeners and handles request flow process .
3464	Registers new controller that accepts get request when request uri matches passed route pattern .
3465	Registers new controller that accepts post request when request uri matches passed route pattern .
3466	Registers new controller that accepts put request when request uri matches passed route pattern .
3467	Registers new controller that accepts patch request when request uri matches passed route pattern .
3468	Registers new controller that accepts delete request when request uri matches passed route pattern .
3469	Registers new controller that accepts options request when request uri matches passed route pattern .
3470	Registers new controller that accepts head request when request uri matches passed route pattern .
3471	Merges one instance of Config class into current one and returns current instance .
3472	Returns new instance of the config containing only values from the given namespace .
3473	Sets new value .
3474	Attempt to connect and identify a bot with the Discord websocket gateway .
3475	Get the URL of the gateway that the socket should connect to .
3476	Perform an HTTP request with the Discord API .
3477	With localized title
3478	Set localized body
3479	With localized action
3480	Add launch image
3481	Include configuration file with constants
3482	Set content available option
3483	Set mutable content option
3484	Set thread id
3485	Try to resolve the signature generator
3486	Add default signature generator resolvers
3487	Try the resolve WebTokenJwtSignatureGenerator
3488	Try to resolve SpomkyLabsJoseSignatureGenerator
3489	Create a temporary file
3490	Add or replace custom data
3491	Add or replace header
3492	Add multiple headers
3493	Use certificate for send request
3494	Use pass phrase of certificate for send request
3495	Add visitor to chain
3496	Inner send process
3497	Add default visitors
3498	Create chain visitor
3499	Create URI for device
3500	Set apn identifier
3501	Set the collapse identifier
3502	Initialize cURL resource
3503	Prepare cURL resource by request
3504	Create exception by reason
3505	Convert APS data to array
3506	Convert alert object to array
3507	Entry point to compute the diff .
3508	Perform a character - level diff .
3509	Stock opcode renderers
3510	Return value to be used for concatenation as a database value
3511	Replace translation table name used to allow queries with standard table name so that PhpStorm SQL completions and refactoring could be used .
3512	return an element representing the translation for bulk insert by insertTranslations
3513	Test for postPublish
3514	Handles missing keys from the React App
3515	Get the default locale being used .
3516	Set the default locale .
3517	Get the default showUnpublished being used .
3518	Set the default showUnpublished .
3519	Output translation strings for WebUI used by JS
3520	Get a translation according to an integer value .
3521	Login using Unreal Engine credentials to access Fortnite API .
3522	Refreshes OAuth2 tokens using an existing refresh token .
3523	Returns item by it s item id .
3524	Fetches stats for the current user .
3525	Lookup a user by their Epic display name .
3526	Parses a stat string into a mapped array .
3527	Fetches profile data .
3528	Get current user s friends on Unreal Engine .
3529	Sends a GET request as the Unreal Engine Client .
3530	Sends a POST request as the Unreal Engine Client .
3531	Sends a GET request as the Fortnite client .
3532	Sends a POST request as the Fortnite client .
3533	Find a user with a LDAP - attribute and a value .
3534	Create a new object in database .
3535	Check if a user exists . If the user exists the account status and group assigments are refreshed . Otherwise a new user is created .
3536	Query LDAP for the current user status and save the information to database .
3537	Query all groups assigned to user from Active Directory . If the parameter SEARCH_NESTED_GROUPS = true then all nested groups are respected too . Keep in mind that a query for nested groups is much slower as a normal query .
3538	Querys the complete user object from LDAP . The username of the object has to be set before a query!
3539	Get the Adldap2 provider name from the extension options . See constant variable EXTENSION_OPTIONS_DEFAULT at the top of the class
3540	Get a value of the synchronisation options by option key . The options can be defined with the setIndividualSyncOptions function of this class for a single object or global in the yii2 params . php . If nothing is defined the defaults from the varibale SYNC_OPTIONS_TEMPLATE_WITHOUT_BACKEND_TASK are used .
3541	Get a value of the group assignment options by option key . The options can be defined with the setIndividualGroupAssignmentOptions function of this class for a single object or global in the yii2 params . php . If nothing is defined the defaults from the varibale GROUP_ASSIGNMENT_TOUCH_ONLY_MATCHING_REGEX are used .
3542	Get a value of the group assignment options by option key . The options can be defined global in the yii2 params . php . If nothing is defined the defaults from the varibale EXTENSION_OPTIONS_DEFAULT are used .
3543	Create a role with the name yii2_example_group and assign the permissions permissionDisplayDetailedAbout and permissionToUseContanctPage
3544	return if the file path is writable
3545	write the file to the file path
3546	Create a user
3547	Boot and configure the application paths
3548	Create a model
3549	Register the repository class .
3550	Register the parser class .
3551	Parse a line and determine if it contains an emoji .
3552	Boot this model .
3553	Set the meta attribute .
3554	Get the meta attribute value .
3555	Cast value to proper type .
3556	Set group of the meta attribute .
3557	Set type of the meta attribute .
3558	Set value of the meta attribute .
3559	Mutate attribute value .
3560	Get the value type .
3561	Get the mutated type .
3562	Determine whether a mutator exists for the value type .
3563	Get mutator for the type .
3564	Handle casting value to string .
3565	Register hook on getAttribute method .
3566	Register hook on setAttribute method .
3567	Register hook on toArray method .
3568	Register hook on replicate method .
3569	Register hook on isset call .
3570	Register hook on unset call .
3571	Register hook on queryHook method .
3572	Add or update attribute .
3573	Set attribute .
3574	Update existing attribute .
3575	Unset attribute .
3576	Create copy of the attribute bag .
3577	Custom query handler for querying meta attributes .
3578	Adjust meta columns for select statement .
3579	Join meta attributes table in order to call provided method .
3580	Order query by meta attribute .
3581	Get an array with the values of given meta attribute .
3582	Add select clause for key of the list array .
3583	Join meta attributes table .
3584	Add whereHas subquery on the meta attributes relation .
3585	Determine the operator for count relation query .
3586	Integers and floats must be passed in raw form in order to avoid string comparison due to the fact that all meta values are stored as strings .
3587	Get the relation constraint closure .
3588	Query Builder whereBetween override required to pass raw numeric values .
3589	Save new or updated meta attributes and delete the ones that were unset .
3590	Determine whether meta attribute is allowed for the model .
3591	Set meta attribute .
3592	Load meta attributes relation .
3593	Change the MAC address of the network interface specified
3594	Get the system s current MAC address
3595	Register CP URL rules
3596	Creates the tables needed for the Records used by the plugin
3597	Creates the indexes needed for the Records used by the plugin
3598	Parser HttpRequest to JsonRequest .
3599	Handle http request .
3600	Create new HttpResponse from exception .
3601	Collect exception .
3602	Is debug .
3603	Create new JsonResponse from exception .
3604	Handle json request .
3605	Check is cache support for JsonRequest .
3606	Ger http handler by name .
3607	Get a list of all tables in the schema .
3608	Get provider url to fetch user details
3609	Get a list of all the locations configured in the Nest account .
3610	Get the schedule details for the specified device .
3611	Get the next scheduled event .
3612	Change the thermostat target mode and temperature
3613	Change the thermostat target temperature when the thermostat is not using a range .
3614	Change the thermostat target temperatures when the thermostat is using a range .
3615	Change the thermostat ECO temperatures .
3616	Set the thermostat - controlled fan mode .
3617	Set the thermostat - controlled fan to be ON for a specific number of minutes each hour .
3618	Set the thermostat - controlled fan to be ON using a timer .
3619	Cancels the timer for the thermostat - controlled fan .
3620	Set the thermostat - controlled fan to run only between the specified hours .
3621	Enable or disable using Eco temperatures when you re Away .
3622	Enable or disable Nest Sense Humidifier .
3623	Convert a temperature value from the device - prefered scale to Celsius .
3624	Convert a temperature value from Celsius to the device - preferred scale .
3625	Get all the devices of a specific type from the user s account .
3626	Either return the parameter as - is or if empty return the serial number of the first device found in the user s account .
3627	Get the specified device network information .
3628	Get latest CA certs from curl . haxx . se
3629	Create a temporary file in the system temp folder .
3630	Validates an array of items
3631	get all registered events list
3632	Get app config
3633	get app pools
3634	Get all registered application events list
3635	Get all registered http middleware list
3636	get all registered rpc middleware list
3637	init the project will create runtime dirs
3638	Print current system environment information
3639	Check current operating environment information
3640	Get all of the input and files for the request .
3641	Get an input item from the request .
3642	Get a subset of the items from the input data .
3643	Get all of the input except for a specified array of items .
3644	Get a mapped subset of the items from the input data .
3645	Get an old input item from the request .
3646	Clean a specified value or values .
3647	Process a specified value .
3648	Register the binput class .
3649	Get all utm values or just value of utm with specific key .
3650	Find a particular template file and return its path .
3651	Call the parse Template HOOK .
3652	Parse the template file and return it as string .
3653	Static convenience method to perform the whole rendering within one line of code .
3654	Purge the page cache .
3655	Retrieve the label text for a condition setting or the default one .
3656	Boot up the system .
3657	Test if the event must get dispatched if so trigger deprecation and dispatch then .
3658	Handle event to update the sorting for DCA combinations .
3659	Get the needed services .
3660	Retrieve the simple query .
3661	Add parameters to the list .
3662	Replace the table name in the query string .
3663	Retrieve the value with the given name from the service container .
3664	Retrieve the value with the given name from the source with the given name .
3665	Convert a parameter using an aggregate function .
3666	Convert a parameter in the query string .
3667	Retrieve the row .
3668	Generate a frontend url .
3669	Generate a filter URL from the current request .
3670	Determine the fragments for the passed request .
3671	Update the fragments for folder URL aliases .
3672	Fetch matching page candidates .
3673	Call the getPageIdFromUrl HOOKs .
3674	Extract POST data from the passed request .
3675	Collect all tagged attribute factories .
3676	Checks whether the given column does not exist .
3677	Check is a table column exists .
3678	Generate a particular sub part of the file tree and return it as HTML string .
3679	Add the modules to the backend sections .
3680	Inject all child tables .
3681	Get the jump to page data .
3682	Obtain the filter setting factory .
3683	Obtain the filter URL builder .
3684	Calculate a native SQL sub procedure .
3685	Method to optimize as many system column lookup filters as possible into a combined filter rule .
3686	Build an AND or OR query .
3687	Retrieve the attribute for a filter operation .
3688	Combine a filter in standard filter array notation .
3689	Check if we have to add the Create variant button .
3690	Handle the create variant event .
3691	Check the items before the edit start . If there is a item with variant support and a empty vargroup it must be a base . So set the varbase to 1 .
3692	Get the breadcrumb navigation via event .
3693	Create an attribute instance from an information array .
3694	Event handler .
3695	Perform the bread crumb generating .
3696	Extract the id value from the serialized parameter with the given name .
3697	Check if we have to purge the MetaModels cache .
3698	Get or create the definition .
3699	Parse the listing configuration .
3700	Set the correct sorting value .
3701	Convert a render group type from InputScreen value to GroupAndSortingInformationInterface value .
3702	Retrieve the legend with the given name .
3703	Retrieve a property from a legend or create a new one .
3704	Handle the paste into and after event .
3705	Add attributes to the MetaModel .
3706	Configure the filter module .
3707	Parse a single filter widget .
3708	Check if we want to redirect to another url .
3709	Get the frontend filter options to use .
3710	Get the filters .
3711	Render a module or content element .
3712	Add the clear all Filter .
3713	Check if the type allows children .
3714	Setup the allowance of attribute types to be added to this factory .
3715	Retrieve the list of known attribute types .
3716	Provide options for property condition types .
3717	Create a new exception for an existing column .
3718	Retrieve the MetaModel the given model is attached to .
3719	Test if we want to handle the event .
3720	Trim the values and validate them .
3721	Handle the deletion of a MetaModel and all attached data .
3722	Handle the update of a MetaModel and all attached data .
3723	Set the MetaModel instance .
3724	Build the cache service .
3725	Build the picker service .
3726	Create a rule instance from the passed query builder .
3727	Sanitize the connection value
3728	Try to unserialize a value .
3729	Retrieve all attributes implementing the given interface .
3730	Narrow down the list of Ids that match the given filter .
3731	Fetch the native database rows with the given ids .
3732	Clone the given filter or create an empty one if no filter has been passed .
3733	Retrieve all attributes with the given names .
3734	Update the value of a native column for the given ids with the given data .
3735	Update an attribute for the given ids with the given data .
3736	Update the variants with the value if needed .
3737	Create a new item in the database .
3738	Obtain the doctrine connection .
3739	Save the base columns of an item and return true if it is a new item .
3740	Retrieve the combinations for the passed user .
3741	Retrieve the parameters for the label .
3742	Delete an item .
3743	Set a language as active language in Contao and return the previous language .
3744	Retrieve the MetaModel .
3745	Fetch a single or first record by id or filter .
3746	Set base config with source and other necessary parameter .
3747	Extract the sorting from the given config .
3748	Fetch the ids via the given filter .
3749	Fetch the items via the given filter .
3750	Retrieve all unique values for the given property .
3751	Determine if a given value is unique within the metamodel .
3752	Reset the fallback field .
3753	Save an item to the data provider .
3754	Save a collection of items to the data provider .
3755	Check if two models have the same values in all properties .
3756	Fetch a variant of a single record by id .
3757	Decode the given value from a serialized language array into the real language array .
3758	Encode the given value from a real language array into a serialized language array .
3759	Build the widget for the MCW .
3760	Create all conditions for the given palette .
3761	Get a legend . Create it if not exists .
3762	Get the property chain condition for the property .
3763	Get a property from a legend . Create if not exists .
3764	Get the visible condition for a property . Create it if not exists .
3765	Map all translation values from the given array to the given destination domain using the optional base key .
3766	Add the translations for the input screen .
3767	Ensure that all options have a value .
3768	Resolves a path .
3769	Collect the attribute settings for the given render setting .
3770	Create a ICollection instance from the id .
3771	Fix up the modules in the backend .
3772	Build the language string for the passed backend module .
3773	Apply conditions for meta palettes of the certain render setting types .
3774	Obtain the list of registered type names .
3775	Get the amount of children this type supports - for unlimited returns - 1 .
3776	Run controller and parse the login template .
3777	Retrieve the filter parameter name to react on .
3778	Return the label to use .
3779	Internal helper function for descendant classes to retrieve the options .
3780	Retrieve the attribute we are filtering on .
3781	Determine the filter value from the passed values .
3782	Draw the attribute in the backend listing .
3783	Calculate the name of a sub palette attribute .
3784	Handle event to update the empty type safety values for DCA combinations .
3785	Update type safety values .
3786	Register multiple event listeners .
3787	Retrieve the MetaModel with the given id .
3788	Parse the correct conditions .
3789	Retrieve the values to be used in the INSERT or UPDATE SQL for the given parameters .
3790	Determine the available languages .
3791	Filter the item ids for ids that exist in the database .
3792	Find a item by its id .
3793	Determines if this MetaModel instance is subject to variant handling .
3794	Check the buttons based on the action .
3795	Check the PA and PI without a contained model .
3796	Check the PI for the root element .
3797	Check the PA and PI with a model .
3798	Check the PA and PI with a model and variant support .
3799	Check the PA and PI with a model and a normal flat build .
3800	Retrieve the MetaModel attached to the model condition setting .
3801	Retrieve the cache to use .
3802	Retrieve or create the palette definition .
3803	Create a property for the palette .
3804	Build the conditions for the passed condition array .
3805	Parse the template .
3806	Check if either type or column name have been changed within the model .
3807	Transform a legend information into the property legends .
3808	Translate a property .
3809	Apply legend conditions to its attribute .
3810	Translate database rows into legend and property information .
3811	Transform a single condition into a valid condition object .
3812	Transform the given condition array into real conditions .
3813	Transform the grouping and sorting modes .
3814	Inject the service container into the data driver instances .
3815	Process the request .
3816	Render the output array for the template .
3817	Fetch existing entries .
3818	Generate the form .
3819	Translate the checkbox caption .
3820	Perform addition now .
3821	Get the current Backend referrer URL .
3822	Purge the file cache .
3823	Set a value in the target page .
3824	Retrieve all filter parameters from the input class for the specified filter setting .
3825	Compile the content element .
3826	Returns if the given value is currently active in the given filter settings .
3827	Translate an option to a proper url value to be used in the filter url .
3828	Add a parameter to the url if it is auto_item it will get prepended .
3829	Build the filter url based upon the fragments .
3830	Generate the options for the frontend widget as the frontend templates expect them .
3831	Returns the frontend filter widget information for the filter setting .
3832	Validate the widget using the value .
3833	This extracts the value for the given language from the given language array .
3834	Hook additional attribute formatter that want to format the value .
3835	When rendered via a template this populates the template with values .
3836	Set the language strings .
3837	Retrieve the base definition by the user from dca_config .
3838	Build the data definition .
3839	Ensure at least one submit element is present in any of the rows .
3840	Parse a single row with all elements .
3841	Add filter elements to the panel .
3842	Add sort element to the panel .
3843	Add search element to the panel .
3844	Handle database upgrade for the jumpTo field .
3845	Handle database upgrade for the published field in tl_metamodel_dcasetting .
3846	Handle database upgrade for changing sub palettes to input field conditions .
3847	Upgrade the database to change from closed dca to editable creatable and deletable .
3848	Perform all upgrade steps .
3849	Called by tl_metamodel . tableName onsave_callback .
3850	Retrieve the service container in use .
3851	Set the limit .
3852	Set sorting to an attribute or system column optionally in the given direction .
3853	Override the output format of the used view .
3854	Set MetaModel and render settings .
3855	Add the attribute names for meta title and description .
3856	Prepare the MetaModel .
3857	Prepare the view .
3858	Set the filter setting to use .
3859	Add additional filter rules to the list on the fly .
3860	Return all attributes that shall be fetched from the MetaModel .
3861	Prepare the rendering .
3862	Retrieve the output format used by this list .
3863	Retrieve the translation string for the given lang key .
3864	Set the title and description in the page object .
3865	Render the list view .
3866	Get or create the basic definition .
3867	Calculate the wizard .
3868	Get all configs .
3869	Get a MetaModels by name or id .
3870	Get the view for a MetaModels .
3871	Get the language .
3872	Get the list of jumpTos based on the items .
3873	Get the base URL .
3874	Remove all empty detail pages .
3875	Start point for the hook getSearchablePages .
3876	Get a MetaModels a filter and a renderSetting . Get all items based on the filter and build the jumpTo urls .
3877	Retrieve the filter rule if anything to filter .
3878	Add a filter condition child .
3879	Add a sub procedure .
3880	Retrieve the jump to label .
3881	Retrieve the details for the page with the given id .
3882	Determine the page id and other details .
3883	Get a 16x16 pixel resized icon of the passed image if it exists return the default icon otherwise .
3884	Create a new setting .
3885	Fetch all child rules for the given setting .
3886	Collect the rules for a filter setting .
3887	Return the edit wizard .
3888	Fetch all attribute names for the current MetaModel .
3889	Fetch all available filter settings for the current meta model .
3890	Called from subclass .
3891	Base64 encode .
3892	Get attributes for checkbox wizard .
3893	Render an edit button .
3894	Get a list with all allowed attributes for meta description .
3895	Retrieve the MetaModel instance .
3896	Fetch the template group for the current MetaModel content element .
3897	Return the link picker wizard - this is called from Multi column wizard in render settings jumpTo page handling .
3898	Updates the meta information of the attribute .
3899	This method is called to store the data for certain items to the database .
3900	Search all items that match the given expression .
3901	Creates the underlying database structure for this field .
3902	Removes the underlying database structure for this field .
3903	Renames the underlying database structure for this field .
3904	Get all options for the input screens .
3905	Return the names of all properties stored within this model .
3906	Get all options for the user groups .
3907	Handle the event and delegate to the build method .
3908	Set the allowed file extensions .
3909	Contao 3 DBAFS Support .
3910	Generate an URL for downloading the given file .
3911	Walk all files and fetch desired additional information like image sizes etc .
3912	Maps the sorting from the files to the source .
3913	Sorts the internal file list by a given condition .
3914	Sort by filename .
3915	Sort by modification time .
3916	Sort by passed id list .
3917	Shuffle the file list .
3918	Check if a file download is desired .
3919	Convert an uuid or path to a value to be handled by MetaModels .
3920	Add the passed file model collection to the current buffer if the extension is allowed .
3921	Process a single file .
3922	Resize the image if needed .
3923	Retrieve the connection .
3924	Provide options for the values contained within a certain attribute .
3925	Translates an value to a generated alias to allow numeric values .
3926	Translates an generated alias to the corresponding value .
3927	Set the the value select to multiple .
3928	Obtain the values of a property within a dc - general instance .
3929	Build the property definition .
3930	Build the property information for a certain property from the data container array .
3931	Retrieves or creates a property information in the definition container .
3932	Set the label in the property .
3933	Set the description in the property .
3934	Set the excluded flag in the property .
3935	Set the searchable flag in the property .
3936	Set the widget type in the property .
3937	Set the options in the property .
3938	Set the explanation in the property .
3939	Set the evaluation array .
3940	Set the empty value if defined .
3941	Get the amount of children this type supports - for undefined returns null .
3942	Extract all languages from the MetaModel and return them as array .
3943	Create a widget for naming contexts . Use the language and translation information from the MetaModel .
3944	Search all files with the given file extension below the given path .
3945	Load a data container .
3946	Handle for MetaModel tables - this loads the base definition tl_metamodel_item .
3947	Handle for non MetaModel tables - this adds the child operations .
3948	Build the data container map .
3949	Build the caption for a table .
3950	This method exists only for being compatible when MetaModels are being used as child table from DC_Table context .
3951	Check if a value is empty .
3952	Run through each level of an array and check if we have at least one empty value .
3953	Return the native value of an attribute .
3954	Fetch the meta model variants for this item .
3955	Fetch the meta model variant base for this item .
3956	Find all Variants including the variant base .
3957	Save the current data for every attribute to the data sink .
3958	Register the assets in Contao .
3959	Renders the item in the given output format .
3960	Renders a single attribute in the given output format .
3961	Create the CSS class for variant information .
3962	Create or get the MetaModel definition .
3963	Test if the given column post fix is a reserved by MetaModels .
3964	Load the passed file and decode it .
3965	Authenticate the user preserving the object stack .
3966	Retrieve the input screen .
3967	Get the MetaModel instance referenced in the pid property of the Model .
3968	Create an attribute from the passed data .
3969	Delete joint condition setting with attribute .
3970	Extract the attribute instance from the MetaModel .
3971	Prepares an option list with alias = > name connection for all attributes .
3972	Translates an attribute id to a generated alias .
3973	Translates an generated alias to the corresponding attribute id .
3974	Create the data provider definition in the container if not already set .
3975	Retrieve the data provider definition .
3976	Validate the column name and ensure that the column does not exist already .
3977	Add the select command to the backend view definition .
3978	Parse the defined model scoped operations and populate the definition .
3979	Build a command into the the command collection .
3980	Retrieve or create a command instance of the given name .
3981	Create the caption text for the child model .
3982	Extract the permissions from the Contao backend user .
3983	Build a menu section .
3984	Add a module to the modules list .
3985	Determine if is active .
3986	Obtain the combinations for the current user .
3987	Retrieve a combination for a table .
3988	Obtain child input screens of the passed parent .
3989	Obtain parented input screens .
3990	Retrieve the input screens .
3991	Test if a model accepts another child .
3992	Decode the title value .
3993	Encode the title value .
3994	Generate the widget .
3995	Evaluate an insert tag .
3996	Get the jumpTo for a chosen value .
3997	Get an item .
3998	Get from MM X the item with the id Y and parse the attribute Z and return it .
3999	Get count from a module or content element of a mm .
4000	Try to load the MetaModel by id or name .
4001	Get the MetaModel id and the filter id .
4002	Get count form one MM for chosen filter .
4003	Check if the item is published .
4004	Translate the id of a MetaModel to the correct name of the MetaModel .
4005	Determines the correct factory from a metamodel table name and creates an instance using the factory .
4006	Create a MetaModel instance with the given information .
4007	Create a MetaModel instance .
4008	Collect the table names from the database .
4009	Collect all attribute information from the database for the MetaModel .
4010	Set the number of maximum pagination links .
4011	Render the pagination string .
4012	Calculate the limit and offset with pagination .
4013	Calculate the pagination based upon the offset limit and total amount of items .
4014	Generate an help wizard if needed .
4015	Make fields mandatory if necessary .
4016	Retrieve the widget class if it is valid .
4017	Handle the onload_callback .
4018	Initialize widget .
4019	Handle the onsave_callback for a widget .
4020	Validate the value of the widget .
4021	Validate the widget .
4022	Generate the help tag for a widget if needed .
4023	Build the options for a widget .
4024	Set the visibility condition for the widget .
4025	Add a visible condition .
4026	Render a filter setting into html .
4027	Retrieve the comment for the label .
4028	Retrieve the image for the label .
4029	Retrieve the label text for a filter setting .
4030	Retrieve the label pattern .
4031	Add the _1 suffix to the image if it is disabled .
4032	Pre create the inverse image .
4033	Push an entry .
4034	Get for a table the human readable name or a fallback .
4035	Fetch the template group for the detail view of the current MetaModel module .
4036	Fetch the templates from resource locations .
4037	Fetch a list of matching templates of the current base within the given folder and the passed theme name .
4038	Fetch the ids from all child filter rules .
4039	Get the css class for an option .
4040	Generate a single checkbox .
4041	Render the current item using the specified render setting .
4042	Render a model for use in a group header .
4043	Add additional parent header fields .
4044	Remove invariant attributes from the render setting .
4045	Translates the values of the jumpTo entries into the real array .
4046	Translates the values of the jumpTo entries into the internal array .
4047	Provide options for template selection .
4048	Retrieve the model filters for the MCW .
4049	Fetch information about an input screen .
4050	Prepare the input screen data .
4051	Build condition tree .
4052	Fetch all properties for the passed input screen .
4053	Fetch conditions for an input screen .
4054	Fetch groupings for an input screen .
4055	Convert property list to legend list .
4056	Convert a legend property .
4057	Convert an attribute property .
4058	Draw the input screen setting .
4059	Draw a legend .
4060	Check if the actual argument is the same as the expected .
4061	Retrieve the messages of all exceptions as chain .
4062	Check if the actual argument is of type array and empty and the expected value is of type string and also empty .
4063	Check for differences in arrays .
4064	Helper to determine if two values are the same .
4065	Retrieve a list of all referenced attributes within the filter setting .
4066	Disable the mandatory checkbox field if the selected attribute is unique .
4067	Retrieve a setting from the settings instance .
4068	Configure the legacy service container .
4069	Prepare the language options .
4070	Provide options for additional css files .
4071	Provide options for additional javascript files .
4072	Scan for files with the given extension .
4073	Retrieve the current user .
4074	Resolve all combinations available .
4075	Set a table mapping .
4076	Ensure the value is a MetaModel name and not an id .
4077	Fetch the palette view configurations valid for the given group ids .
4078	Pull in all DCA settings for the buffered MetaModels and buffer them in the static class .
4079	Build an input screen instance and return it .
4080	Check if the input screen for a MetaModel is stand alone .
4081	Retrieve the render setting that is active for the current user .
4082	Retrieve the input screen that is active for the current user .
4083	Retrieve all standalone input screens .
4084	Get the name of the parenting MetaModel .
4085	Create a breadcrumb store .
4086	Build the filter params for the widget .
4087	A naive transformation of possible term and wildcard arrays in a DSL query
4088	Transform search parameters to string
4089	Build a callable url
4090	delete a document
4091	create a request payload with all pending operations
4092	Add a term to this query
4093	Add a wildcard to this query
4094	Add array clause can only be one
4095	Perform a http call against an url with an optional payload
4096	Build to array
4097	Add or overwrite existing field by name
4098	Get or set a config
4099	Change what index to go against
4100	Change what types to act against
4101	Puts a mapping on index
4102	Perform a raw request
4103	Perform search this is the sweet spot
4104	Parse a DSN string into an associative array
4105	Begin a transparent bulk - transaction if one is already running return its handle
4106	commit a bulk - transaction
4107	Check if hints should be displayed
4108	Get skin file content
4109	Get option array
4110	convert nested array to tab indented list
4111	Find file and line of the class statement
4112	Find a filename in the include path fallback
4113	Get block information
4114	Check if remote call is enabled in configuration
4115	Get remote call url template
4116	Get path information of a block
4117	Check if a block is within another one that is cached
4118	Factory method to create type instances . Type instances are implemented as flyweights .
4119	Adds a custom type to the type map .
4120	Overrides an already defined type to use a different implementation .
4121	Gets a reference proxy instance for the entity of the given type and identified by the given identifier .
4122	Generate the Proxy file name
4123	Generates proxy classes for all given classes .
4124	Generates a proxy class file .
4125	Generates the methods of a proxy class .
4126	Resolves a registered namespace alias to the full namespace .
4127	Add a new default annotation driver with a correctly configured annotation reader .
4128	Loads the metadata of the class in question and all it s ancestors whose metadata is still not loaded .
4129	Create a Query for the view in the specified design document .
4130	Create a Native query for the view of the specified design document .
4131	Create a CouchDB - Lucene Query .
4132	Clears the ObjectManager . All objects that are currently managed by this ObjectManager become detached .
4133	Initialize an object that is a lazy load proxy or do nothing .
4134	This method will append the tag at the end of the ciphertext .
4135	This method should be used if the tag is appended at the end of the ciphertext . It is used by some AES GCM implementations such as the Java one .
4136	Converting parameters array to a single string with encoded values
4137	Returns response headers as array
4138	Send a POST call with media upload to Twitter API via OAuth
4139	Getting OAuth parameters to be used in request headers
4140	Converting all parameters agetrrays to a single string with encoded values
4141	Getting OAuth signature base string
4142	Converting OAuth parameters array to a single string with encoded values
4143	Get response headers
4144	Send a GET call to Twitter API via OAuth
4145	Validate Credentials Array
4146	Getting full URL from a Twitter resource
4147	Returns raw response body
4148	Processing Twitter Exceptions in case of error
4149	Build a multipart message
4150	Get binary data of a file
4151	Reset Call State
4152	Get a bearer token from consumer keys
4153	Invalidate a bearer token
4154	Generate bearer token credentials
4155	Building request HTTP headers
4156	Adds the job to the scheduler .
4157	Schedules a job with a CRON expression .
4158	Schedules jobs sleeps until a job has to be scheduled . Returns when jobs were scheduled .
4159	Does a Redis BLPOP on the queue and blocks until a job is available .
4160	Generates the OAuth login URL
4161	Modify the relationship between the current user and the target user
4162	Search media by its location
4163	The call operator
4164	Access Token Setter
4165	Merge permission scope with default scope . Allow only valid values .
4166	Run the created process builder .
4167	Convert providers or facade details to template .
4168	Entry point for installation .
4169	Get the package name and version provided by user .
4170	Prettify Package result .
4171	Ask user for package key .
4172	Run the migration command .
4173	Get Migration file list from the package .
4174	Run the build .
4175	Get Service Providers .
4176	Get Facades .
4177	Get migration .
4178	Get the package files .
4179	Check manager file exists in package or not .
4180	Notify user .
4181	Get resource instance .
4182	Instantiate a class and use it like chain responsibility .
4183	Get classes from given files .
4184	Get the file by class name .
4185	Start searching service provider in package .
4186	Search the given package .
4187	Publish resource files .
4188	Bootstrap application services .
4189	dump object constants as html
4190	Dump object methods as html
4191	Dump method parameters as HTML
4192	Dump object s phpDoc info as html
4193	Dump object properties as HTML
4194	Generate some info regarding the given method names
4195	returns information about an object
4196	Populate constants extends methods phpDoc properties etc
4197	debug . objAbstractStart event subscriber
4198	debug . objAbstractEnd event subscriber
4199	Get object s constants
4200	Adds methods to abstraction
4201	Add minimal method information to abstraction
4202	Magic methods may be defined in a class doc - block If so ... move this information to the properties array
4203	Adds properties to abstraction
4204	Magic properties may be defined in a class doc - block If so ... move this information to the properties array
4205	Get parameter details
4206	Get property info
4207	Get property type and description from phpDoc comment
4208	Is the passed object excluded from debugging?
4209	Get method info
4210	Get defaultValue and constantName info from phpDoc param
4211	Get error level constants understood by specified php version
4212	Get all constants included in specified error level excludes E_ALL
4213	Go through all the rows of array to determine what the keys are and their order
4214	Get values for passed keys
4215	Get the keys contained in value
4216	Remove error & warn from summary & log
4217	clear errors for given log
4218	Clear log entries
4219	Clear summary entries
4220	Build message that gets appended to log
4221	returns information about an array
4222	Retrieve a data value or property
4223	Retrieve a configuration value
4224	Handle uncaught exceptions
4225	php . shutdown event subscriber
4226	Register this error handler and shutdown function
4227	un - register this error handler and shutdown function
4228	Build error object
4229	Generate hash used to uniquely identify this error
4230	Rudimentary doc - block parsing
4231	Find parent phpDoc
4232	Get comment contents
4233	PhpDoc won t be different between object instances
4234	Split parameter string into individual params
4235	Trim leading spaces from each description line
4236	Serializes and emails log
4237	Extracts meta - data from args
4238	Do we have log entries?
4239	debug . init subscriber
4240	debug . config subscriber
4241	errorHandler . error event subscriber adds error to console as error or warn
4242	debug . output event subscriber
4243	Email Log if emailLog is always or onError output log if not already output
4244	Build list of errors for email
4245	Log some PHP info
4246	Log Cookie Post & Files data
4247	Log Request Headers
4248	Output the log via FirePHP headers
4249	Output a log entry to Firephp
4250	Initialize firephp s meta array
4251	Build table rows
4252	output the log as javascript which outputs the log to the console
4253	Return log entry as javascript console . xxxx
4254	Returns an error summary
4255	If lastError was fatal output the error
4256	Returns summary for errors that occurred while log collect = false
4257	Get the error for the given category
4258	Subscribe to all of the event subscribers defined in passed obj
4259	Gets the subscribers of a specific event or all subscribers sorted by descending priority .
4260	Checks whether an event has any registered subscribers .
4261	Unsubscribe from all of the event subscribers defined in passed obj
4262	Subscribe to event
4263	Removes an event subscriber from the specified event .
4264	Calls the subscribers of an event .
4265	Sorts the internal list of subscribers for the given event by priority .
4266	Register this stream wrapper
4267	Close the directory
4268	Opens a directory for reading
4269	Read a single filename of a directory
4270	Reset directory name pointer
4271	Rename a file
4272	Close a file
4273	Tests for end - of - file on a file pointer
4274	Flush the output
4275	Advisory file locking
4276	Change file options
4277	Opens file or URL
4278	Read from stream
4279	Seek to specific location in a stream
4280	Retrieve information about a file resource
4281	Retrieve the current position of a stream
4282	Truncates a file to the given size
4283	Unlink a file
4284	Retrieve information about a file
4285	Output the log as chromelogger headers
4286	Process log entry
4287	Return a list of event subscribers
4288	errorHandler . error event subscriber
4289	Publish WAMP message to topic
4290	Publish pre - existing log entries
4291	Publish initial meta data
4292	Retrieve a config or data value
4293	Want to store a snapshot of arrays objects & resources Remove any reference to an external variable
4294	Returns value s type
4295	Add an alert to top of log
4296	Log a message and stack trace to console if first argument is false .
4297	Clear the log
4298	Log the number of times this has been called with the given label .
4299	Resets the counter .
4300	Close current group
4301	Initiate the beginning of summary log entries
4302	Set ancestor groups to uncollapsed
4303	Starts recording a performance profile
4304	Stops recording profile info & adds info to the log
4305	Output array as a table
4306	Start a timer identified by label
4307	Behaves like a stopwatch .. returns running time If label is passed timer is paused If label is not passed timer is removed from timer stack
4308	Log a stack trace
4309	Return a named subinstance ... if channel does not exist it will be created
4310	Return array of channels
4311	Publishes debug . output event and returns result
4312	A wrapper for errorHandler - > setErrorCaller
4313	Debug class autoloader
4314	Append group or groupCollapsed to log
4315	Calculate total group depth
4316	Set container services
4317	Get Method s default argument list
4318	Set where appendLog appends to
4319	Interpolates context values into the message placeholders .
4320	Recursively merge two arrays
4321	Get value from array
4322	Build attribute string
4323	Build an html tag
4324	Convert size int into 1 . 23 kB
4325	Returns information regarding previous call stack position call_user_func and call_user_func_array are skipped
4326	Returns cli cron ajax or http
4327	Is passed argument a simple array with all - integer in sequence from 0 to n? empty array returns true
4328	Parse string - o - attributes into a key = > value array
4329	Generate a unique request id
4330	serialize log for emailing
4331	Use to unserialize the log serialized by emailLog
4332	Convert array attribute value to string
4333	Convert boolean attribute value to string
4334	Get config val
4335	debug . output subscriber
4336	Close any unclosed groups
4337	Determine default outputAs
4338	Remove empty groups with hideIfEmpty meta value
4339	Set outputAs value instantiate object if necessary & addPlugin if not already subscribed
4340	Uncollapse groups containing errors .
4341	End profiling and return data
4342	Set initial stack info
4343	Remove function from stack and add time to profile
4344	Add function to call stack
4345	Get config for lazy - loaded class
4346	Set cfg values for Debug and child classes
4347	Get config for debug . If no path specified config for debug and dependencies is returned
4348	get available config keys for objects
4349	Normalizes cfg .. groups values by class
4350	some config values exist in multiple modules
4351	Set Debug config
4352	debug . config event subscriber
4353	debug . log event subscriber
4354	Set file we will write to
4355	Is value a timestamp?
4356	Normalize table data
4357	Process log entries
4358	Handle the not - well documented substitutions
4359	Add additional characters to be treated as special chars
4360	Highlight non - UTF - 8 control & special characters
4361	Determine if string is UTF - 8 encoded
4362	Returns decimal code - point for multi - byte character
4363	Attempt to convert string to UTF - 8 encoding
4364	Reset string statistics
4365	load throttle stats for passed error
4366	Get formatted backtrace string for error
4367	Email this error
4368	ArrayAccess getValue .
4369	Formats an array as a table
4370	Dump value as html
4371	Wrap classname in span . t_classname if namespaced d additionally wrap namespace in span . namespace If callable also wrap . t_operator and . t_method - name
4372	Return the log as HTML
4373	Convert all arguments to html and join them together .
4374	Build a tree of all channels that have been output
4375	handle html output of group groupCollapsed & groupEnd
4376	Returns table s tfoot
4377	Returns table s thead
4378	Returns table row
4379	Dump array as html
4380	Add whitespace markup
4381	Adds whitespace markup
4382	Output the log as text
4383	Convert all arguments to text and join them together .
4384	Dump array as text
4385	Dump object as text
4386	Dump object methods as text
4387	Returns the configuration attribute definitions of the provider to generate a list of available fields and rules for the value of each field in the frontend .
4388	Sets the payment attributes in the given service .
4389	Executes the payment again for the given order if supported . This requires support of the payment gateway and token based payment
4390	Returns the Datatrans XML payment provider
4391	Returns the configuration attribute definitions of the provider to generate a list of available fields and rules for the value of each field in the administration interface .
4392	Checks the backend configuration attributes for validity .
4393	Cancels the authorization for the given order if supported .
4394	Captures the money later on request for the given order if supported .
4395	Checks what features the payment provider implements .
4396	Refunds the money for the given order if supported .
4397	Returns the form for redirecting customers to the payment gateway .
4398	Returns the payment transaction ID stored in the basket
4399	Saves the required data for recurring payments in the customer profile
4400	Adds the transation reference to the order service attributes .
4401	Translates the Omnipay status into the Aimeos payment status value
4402	Returns the Omnipay gateway provider object .
4403	Returns all layouts related to provided location and its content sorted by name .
4404	Returns the path array for location ID .
4405	Generates the main configuration .
4406	Returns if this plugin matches the current request .
4407	Returns the identifier of the current menu plugin .
4408	Redirects configured routes to eZ legacy .
4409	Renders the template .
4410	Injects if Netgen Layouts is the enterprise version or not .
4411	Registers all menu plugins in the plugin registry .
4412	Returns eZ Publish Legacy ezpreference value .
4413	Handles the legacy exceptions .
4414	Sets the Netgen Tags admin pagelayout for Netgen Admin UI .
4415	Executes the template operator
4416	Converts the legacy 404 response to proper Symfony exception .
4417	Renders a template that shows all layouts applied to provided location .
4418	Creates the request used for fetching the mappings applied to provided content and location .
4419	Performs access checks on the controller .
4420	Performs actions related to security once the legacy kernel has been built .
4421	Generates the siteaccesses .
4422	Runs the command interactively .
4423	Collects all the data interactively .
4424	Runs the command .
4425	Generates legacy autoloads .
4426	Asks a question that fills provided option .
4427	Asks a choice question that fills provided option .
4428	Instantiates and returns a choice question .
4429	Instantiates and returns a question .
4430	Writes installer summary .
4431	Writes a section of text to the output .
4432	Returns the runner .
4433	Factory method to create a new Subscriber instance .
4434	Call a specific q - less command .
4435	Factory method to create an exception instance from an error message .
4436	Gets the value for the specified config name falling back to the default if it does not exist .
4437	Sets the config name to the specified value .
4438	Creates the custom job instance .
4439	Clear all previously registered signal handlers .
4440	Creates a human readable pcntl signal name by its code .
4441	Gets a list of existent Queues matched by topic .
4442	Return a paginated list of JIDs which are in a completed state
4443	Returns an array of jobs for the specified job identifiers keyed by job identifier
4444	Fetches a report of failed jobs for the specified group
4445	Fetches a report of failed jobs where the key is the group and the value is the number of jobs
4446	Fetches a list of tagged job ids associated with provided tag .
4447	Reads jobs in a worker .
4448	Put the described job in this queue .
4449	Get the next job on this queue .
4450	Get job by JID from this queue .
4451	Make a recurring job in this queue .
4452	Return the current statistics for a given queue on a given date .
4453	Checks if this queue is paused .
4454	Immediately handle job if sync mode enabled
4455	Attach a listener to the events manager .
4456	Fetches a priority events queue by event type .
4457	Detach the listener from the events manager .
4458	Fires an event in the events manager causing the active listeners to be notified about it .
4459	Internal handler to call a queue of events .
4460	Forks and creates a socket pair for communication between parent and child process
4461	A shutdown function for the forked process .
4462	Tries to create an error message from the socket .
4463	Handle process exit status .
4464	Process a single job .
4465	Run a Lua command serverside .
4466	Prepares arguments to call the specified Lua command .
4467	Reloads the qless - core code .
4468	Sets Job s priority .
4469	Cancel a job .
4470	Complete a job and optionally put it in another queue either scheduled or to be considered waiting immediately .
4471	Requeue this job .
4472	Return the job to the work queue for processing
4473	Set the timestamp of the new heartbeat .
4474	Creates the instance to perform the job and calls the method on the instance .
4475	Mark the current Job as failed with the provided group and a more specific message .
4476	Start tracking current job .
4477	Stop tracking current job .
4478	Get the instance of the class specified on this job .
4479	Add the specified tags to this job .
4480	Sets Job s data .
4481	Sets Job s interval .
4482	Sets Job s backlog .
4483	Sets Job s queue name .
4484	Register a signal handler .
4485	Watching events for a job .
4486	Send a message to all devices on one or all platforms .
4487	Send a message to an endpoint .
4488	Send a message to all devices on a platform .
4489	Register a device token .
4490	Create a topic .
4491	Subscribe a device to the topic will create new numbered topics once the first is full .
4492	Send a message to all topics in the group .
4493	Convenience to set localized text .
4494	Get the correct apple push notification server data .
4495	Get the json to send via Amazon Device Messaging .
4496	Get the json to send via Google Cloud Messaging For GCM the max length is for the data field only .
4497	Gets the base of the data for the android platforms with text and localization keys .
4498	Using a inner function gets the data and trys again if its too long by trimming the text .
4499	Merge arrays deeply .
4500	returns true if the element would be selected by the specified selector string ; otherwise returns false .
4501	Returns a live HTMLCollection containing all child elements which have all of the given class names . When called on the document object the complete document is searched including the root node .
4502	Inserts a Node into the children list of this ChildNode s parent just after this ChildNode .
4503	Replace this ChildNode in the children list of its parent with the supplied replacement node .
4504	Gets the nth Element object in the internal DOMNodeList .
4505	Get organization persona list
4506	Create organization persona
4507	Add the ip to the token
4508	Mark the token as invalid if the ip is missing or is not valid
4509	Get the contextual tenant
4510	Add the user uuid to the token
4511	Mark the token as invalid if the user uuid is missing
4512	Filter the returned data for a given locale
4513	Type cast to object
4514	Parse objects - formatted string into objects
4515	Parse objects file into objects
4516	Set sort order
4517	Unserialize parameter entity value property after saving in storage .
4518	Serialize parameter entity value property before saving to storage .
4519	Get parameter value
4520	Set parameter value
4521	Add the identity type to the token
4522	Set config entity encrypt property after retrieving them from storage .
4523	Loads the zone definition for the provided id .
4524	Creates a Zone instance from the provided definition .
4525	Creates a ZoneMemberCountry instance from the provided definition .
4526	Creates a ZoneMemberZone instance from the provided definition .
4527	Assign the current session identity if none provided
4528	Hydrate the permission entity with permission configurations
4529	Transfer get request content to api filters in order to allow large api filters
4530	Set user uuid
4531	Add tagged tenant loader services to the loader collection
4532	Set first result
4533	Get task list
4534	Set candidate group
4535	Assign the tenant uuid before persisting the entity if none provided
4536	Set tenant id in
4537	Generate an uuid before persisting the entity if none provided
4538	Set tenant id
4539	Set individual uuid
4540	Get config value
4541	Set config value
4542	Unserialize parameter entity value property after saving from storage .
4543	Add a tenant sql condition if the entity is tenantable
4544	Format uncaught exceptions into the proper format based on request
4545	Set sort by
4546	Set include assigned tasks
4547	Run health checks
4548	Get all statistic data
4549	Get a statistic datum
4550	Set assignee like
4551	Get submissions list
4552	Check if a user exists
4553	Modify the jwt token
4554	Mark the token as invalid if the token is not modified
4555	Join translation table
4556	Set organization uuid
4557	Generate entity custom id if none present
4558	Generate entity uuid if none present
4559	Generate an audit entry after persisting an entity
4560	Translate translatable properties
4561	Transfer translatable properties to translations
4562	Get properties with Translate annotation
4563	Serialize parameter entity value property before saving in storage .
4564	Convert NoPermissionsException into empty collections
4565	Add the identity roles to the token
4566	Get form including subforms
4567	Resolve a form
4568	Get parent permission
4569	Cast element to permission object
4570	Decrypt encryptable entity properties after retrieving them from storage .
4571	Set anonymous uuid
4572	Set identity uuid
4573	Get properties with Audit annotation
4574	Get properties with Locale annotation
4575	Get count of process definitions
4576	Get process definition
4577	Get process definition xml
4578	Start a process definition instance
4579	Get process definition start form
4580	Encrypt model using secret key
4581	Get properties with Encrypt annotation
4582	Add the user tenant to the token
4583	Mark the token as invalid if the user tenant is missing
4584	Add the client signature to the token
4585	Mark the token as invalid if the client signature is missing or is not matching
4586	Get the client signature
4587	Set staff uuid
4588	Set max results
4589	Set with variables in return
4590	Check if a submission exists
4591	Set owner uuid
4592	Submit task data
4593	Replace parameter placeholders with data
4594	Set parameter entity encrypt property after retrieving them from storage .
4595	Get user compiled permissions
4596	Get role list
4597	Set deserialize values
4598	Generate entity identity if none present
4599	Transfer translations from properties to source before saving them to storage
4600	Transfer translations from source to properties after retrieving them from storage
4601	Remove the existing permissions on an update request
4602	Encrypt data using secret key
4603	Decrypt data using secret key
4604	Parse resource files to objects
4605	Set entity uuid
4606	Register a new OAuth client app on the target instance
4607	Get a list of statuses by a user
4608	Create new status
4609	Registers MultiSelect Bootstrap plugin and the related events
4610	Geo location .
4611	Get the URL of QR Code .
4612	Prepare the api connection
4613	Adds the scalar index query information to the Command
4614	Adds the range index query information to the Command
4615	Build distributed cluster
4616	Builder configuration validation
4617	Build local node cluster
4618	Used to verify a property within the builder is not null and is instantiated
4619	Generate an instance of the Location object using the Location header string value returned from Riak
4620	Mint a new Object instance with supplied params and attach it to the Command
4621	Mint a new Object instance with a json encoded string
4622	Pick a random Node from the ring
4623	Execute a Riak command
4624	Pick new active node
4625	Prepare request to be sent
4626	Generates the URL path for a 2i Query
4627	Prepare request data
4628	Prepares the complete request URL
4629	Prepare request parameters
4630	Prepares the request headers
4631	Prepare the request method
4632	Response header callback
4633	Retrieve the value for a header null if not set
4634	Processes the attachments dir and merges the result with the attachments array then returns the result
4635	Attaches the preconfigured mail listeners to the mail service
4636	Tries to send the message returning a MailResult object
4637	Creates a new MailEvent object
4638	Sets the message body
4639	Attaches files to the message if any
4640	Creates a view helper manager
4641	The build callback when creating a image useful to see what happens during building
4642	Return a translitared name for a project
4643	Start services for a Job
4644	Stop services for a Job and reinit volumes
4645	Set a dimension for this matrix
4646	Return all possibility for the matrix
4647	Add keeping same permissions as origin file
4648	Get command lines to add for a configuration value in . travis . yml file
4649	Get services list from travis ci configuration file
4650	Parse an environnement line from Travis to return an array of variables
4651	Clean containers images and directory from a project
4652	Clean directories for given builds
4653	Get all jobs to remove given a project and how many versions to keep
4654	Get all jobs related to a project
4655	Create a job from a docker image
4656	Create a build
4657	Run a build ( it s suppose the image exist in docker
4658	Strategy based on the . travis . yml file
4659	Chain strategy to allow multiples ones
4660	Get a console with finger crossed handler
4661	Send the given Message like it would be sent in a mail client .
4662	Send message instantly without a queue
4663	Overwrite the baka SMTP connection for this current email
4664	Set content dynamically by params
4665	Overwrite this funciton to use ower mail message
4666	Configure MailerManager class
4667	Renders a view
4668	Generate FHIR object classes based on XSD
4669	Commands to run prior to class generation
4670	Commands to run after class generation
4671	Add an entire block of code to the body of this method
4672	Set paths to search through when looking for template files .
4673	Convert template to path to template file and check that it exists .
4674	Add a callback to be rendered as a view .
4675	Add a string as a view .
4676	Render all views for a specific region .
4677	Render all views for a specific region and buffer the result .
4678	Render the view file .
4679	Set values for the view .
4680	Render the view by its type .
4681	Start or resume the timer .
4682	Formats the given time the processor into the given format .
4683	Stops the timer with the given key . Default key is default
4684	Enables and disables value normalization .
4685	Sets expression as SELECT clause . Passing null sets clause to the default state .
4686	Adds expression to SELECT clause .
4687	Sets expression as WHERE clause . Passing null sets clause to the default state .
4688	Adds expression with AND to WHERE clause .
4689	Sets expression as GROUP BY clause . Passing null sets clause to the default state .
4690	Adds expression to GROUP BY clause .
4691	Sets expression as HAVING clause . Passing null sets clause to the default state .
4692	Adds expression with AND to HAVING clause .
4693	Sets expression as ORDER BY clause . Passing null sets clause to the default state .
4694	Adds expression to ORDER BY clause .
4695	Sets LIMIT and OFFSET clause .
4696	Get the token . If it s not defined this will go ahead and generate one .
4697	Validate the token . If there s not one yet it will set one and return false .
4698	Constant - time string comparison . This comparison function is timing - attack safe
4699	Get error status string for the latest error
4700	Get a markdown content from input
4701	Creates an instance of Ciconia
4702	Runs help command
4703	Lints the content
4704	Returns the value at the specified index
4705	Extract a slice of the array
4706	Execute the callback for each element
4707	Multiple underscores in words
4708	Strips link definitions from text stores the URLs and titles in hash references .
4709	Convert line breaks
4710	Convert tabs to spaces
4711	Surround text with given string
4712	Convert special characters to HTML entities
4713	Perform a regular expression search and replace
4714	Replace all occurrences of the search string with the replacement string
4715	Split string by a regular expression
4716	Adds a listener to the end of the listeners array for the specified event .
4717	Execute each of the subscribed listeners
4718	Turn standard URL into markdown URL
4719	Parse emmet style attributes
4720	Register a string to be hashed
4721	Process the contents of a single ordered or unordered list splitting it into individual list items .
4722	Sets the inner text
4723	Sets an attribute
4724	Renders the tag
4725	Adds inflection regex rules to the inflector .
4726	Gets an inflected word from the cache where the singular form is supplied .
4727	Gets an inflected word from the cache where the plural form is supplied .
4728	Sets an inflected word in the cache .
4729	Checks if a word is in a singular form .
4730	Transcode a string .
4731	Converts Unicode sequences to UTF - 16 string .
4732	Set both the expiration time and the expiration variant .
4733	Set the session cookie
4734	Write the data from the current session to the data storage system .
4735	Regenerate the current session s ID .
4736	Get all asynchronous event subscribers and save the name of the event they are listening to .
4737	Send error notify mail
4738	Exception error handler
4739	Clean temp folder content .
4740	Check if resource could be deleted then delete it s a file or call recursive folder deletion if it s a directory .
4741	Generates a probe service for a configured probe
4742	Check if opt in validation for review is required .
4743	Validate current request data regardless if form was submitted or not
4744	Check if form was sent but optin not checked when required
4745	Is optin for product review required .
4746	Was there an error for shop side review optin validation?
4747	Returns all plans .
4748	Returns a Plan by its identifier .
4749	get reccurent addons for given plan .
4750	filter given plans with given filters .
4751	get price by planCode
4752	Validation and contacts email sending
4753	Get currently selected contact form opt in method
4754	Starts the profiling
4755	Stops the profiling & parses data
4756	Transform a value into its array value
4757	Transform iterable value into array
4758	Transform Cache Symfony annotation into equivalent array
4759	Transform Template Symfony annotation into array equivalent
4760	Updates one or more stats counters by arbitrary amounts .
4761	Flushes the queue
4762	Sends metrics over UDP
4763	Create new user .
4764	Validate delivery address optin . Needed if we get delivery address data from request .
4765	Validate user registration optin .
4766	Validate invoice address optin . Needed if user changes invoice address .
4767	convert SimpleXML to PhpObj
4768	converts php - structure to DOM - object .
4769	Execute run conditionally on debug configuration .
4770	Render Widget Group|Item .
4771	Change Widget Status .
4772	Change Widget Configuration .
4773	Change Widget Order .
4774	Build Widgets .
4775	Load User Widget Configuration .
4776	Render Widgets .
4777	Get Widget Output for Cache .
4778	Add Widget .
4779	Remove Widget .
4780	Clear current user widget cache .
4781	Add Widget Config .
4782	Remove Widget Config .
4783	Getter for module .
4784	Handle the message by letting the next middleware handle it . If no handler is defined for this message then it is published to be processed asynchronously
4785	Test if column exists
4786	Get value of column
4787	Store value in column
4788	Insert row in a table
4789	Update all rows in result set
4790	Insert row or update if it already exists
4791	Delete all rows in result set
4792	Add select clause more calls appends to the end
4793	Add order clause more calls appends to the end
4794	Set group clause more calls rewrite old values
4795	Execute aggregation function
4796	Execute the built query
4797	Fetch next row of result
4798	Get specified row
4799	Execute an SQL statement and return the number of affected rows
4800	Specify referencing column
4801	Certain words are reserved for use by different SQL engines such as limit and offset and can t be used by the driver as bound parameters . This function returns the SQL for the query after replacing the bound parameters manually using string replacement .
4802	Case - insensitive attempt to match the provided directory name with a directory within the basePath .
4803	Renders the content of a RTE field .
4804	checks if a alternative template is defined via typoscript setup configuration and if it exists as a file
4805	Returns the smallest index which is not used .
4806	Called to process class member vars .
4807	Schedule the event
4808	UnSchedule the event
4809	Remove all the cron on deactivation
4810	Check if the event is scheduled
4811	Create expression language
4812	Add a context value . The key must be unique and cannot be replaced
4813	Get context value of given string or default value
4814	Private method used to read and populate anydataset class from specified file
4815	Returns the AnyDataset XmlDocument representive object
4816	Append one row to AnyDataset .
4817	Insert one row before specified position .
4818	Add a single string field to an existing row
4819	Get an Iterator filtered by an IteratorFilter
4820	Add a string field to row
4821	Get array from a single field
4822	Set a string value to existing field name
4823	Remove specified field name from row .
4824	Remove specified field name with specified value name from row .
4825	Update a specific field and specific value with new value
4826	Get the \ DOMElement row objet
4827	Fetch a pre - authorisation object from the API
4828	Create a bill under an existing pre - authorization
4829	Cancel a pre - authorisation
4830	Fetch a merchant object from the API
4831	Attempt to collect a bill with status failed again
4832	Fetch the payout for a bill if a payout_id is recorded
4833	Generate the OAuth authorize url
4834	Fetch an access token for the current user
4835	Returns the merchant associated with the client s access token
4836	Create a new bill under a given pre - authorization
4837	Send an HTTP request to confirm the creation of a new payment resource
4838	Generate a new payment url
4839	Make a request to the API
4840	Test whether a webhook is valid or not
4841	Fetch an object s subresource from the API
4842	Generates encodes re - orders variables for the query string .
4843	Sorts a pair
4844	Convert a word to the singular
4845	Makes an HTTP request
4846	Registers a class autoloader which will create the given class aliases on demand .
4847	Unregisters the aliases and class autoloading function
4848	Return a hash map of destination names to paths representing paths which relate to the given file path .
4849	Create driver using Container or new operator
4850	This method check existing counter and if it isn t exist it calculate a new one .
4851	Apply inner DB id to row
4852	Get driver and replace current logger if driver has its own logger
4853	Get current real rows saved in database .
4854	Execution time of the script
4855	Wrapper upon logger .
4856	Sets pagination params and stores them in the session .
4857	Retrieves pagination params .
4858	Gets the list of ids .
4859	Get previous and next id from the list .
4860	Push a job to the queue .
4861	Push a lazy loading job in the queue .
4862	Create a mongo document .
4863	Reinsert the job in the queue .
4864	Pop a job from the queue .
4865	Fetch a list of jobs
4866	Delete a job from the queue
4867	Mark a job as permanent failed .
4868	Parses options to a datetime object
4869	Creates an instance of \ Core \ View \ Helper \ Params
4870	Get a string representation from an entity .
4871	Set the event prototype .
4872	Triggers listeners .
4873	Initialize the Buttons of a summary form element .
4874	Set the Form identifier
4875	Get meta data .
4876	Returns the vote for the given parameters .
4877	Creates new ClearCacheService object
4878	Sets the owner of a file
4879	Gets the length of file in GB MB ot kB format
4880	Gets the resource of a file
4881	Returns the binary data of a file
4882	Gets Permissions of a file
4883	Generate public alias
4884	Shortcut to add dependencies to the collection .
4885	exclude methods from the automatism
4886	Loads a plugin from the plugin helper manager .
4887	Creates an entity and adds it .
4888	Redirects to the specified page . This is useful for posting an autocomplete ID which in turn redirects to the specified page .
4889	View a page .
4890	Render a page with the specified additional template variables .
4891	the Target is the snapshotMeta - Class
4892	the generator transforms an entity into an array
4893	makes a recursiv difference between array1 and array2 found commands like array_diff_assoc wanting
4894	Ends content capturing and returns the captured content .
4895	Renders an alert box .
4896	Starts content capturing .
4897	Get config directory location
4898	Check current cache status
4899	Setup php server
4900	Load environment variables from . env files
4901	Load Application configuration
4902	Override configuration in docker environment This will fix filesystem writing during behat tests
4903	Create a tree select form element .
4904	Create value options from a node .
4905	fetch the settings for a certain key of all Modules
4906	Displays a content page
4907	Handler for onRoute mvc event .
4908	Renders a summary form container .
4909	Only renders the form representation of a summary form .
4910	Only renders the summary representation of a summary form
4911	Inject components into the pages .
4912	Set view variables en masse
4913	Add a result in various formats .
4914	Add a \ Traversable object .
4915	Add an array .
4916	Set the value .
4917	Sets many form parameters at once .
4918	Sets a form parameter .
4919	reassurance that no required inputFilter is set on a non - existing field this mistake is otherwise hard to detect there is still a lot to do on this issue
4920	Sets a form container .
4921	Select a region to configure .
4922	Remove a region
4923	Remove a type from a region
4924	Adds the type to the currently selected region .
4925	Returns the available types for a specified region . If not specified returns all types configured .
4926	Returns the available regions for a specified type . If not specified all regions are returned .
4927	Adds multiple listener specifications .
4928	Adds a listener specification .
4929	Attachs listener creation and invokation callback .
4930	Detach all listener creation and invokation callbacks .
4931	Updates the item values .
4932	Special handling json
4933	Loads entities to be deleted .
4934	Deletes an entity .
4935	Helper function to trigger a DependecyResultEvent .
4936	Fetch entities from the database which permissions are assigned the referral document .
4937	Creates a nested options instance .
4938	Gets the configuration for a specific options instance .
4939	Sets the allowed mime types . The types can be passed either as an array or a comma separated list .
4940	Sets if this element allows multiple files to be selected .
4941	Gets the allowed mimetypes
4942	Callback for file count validation .
4943	Adds the base fieldset .
4944	Grants a permission to a user or resource .
4945	Revokes a permission from a user or resource .
4946	Builds the user id lists .
4947	Checks a valid permission .
4948	Find entities in draft mode .
4949	Creates a query builder .
4950	Creates an entity in draft mode .
4951	Gets the target FQCN
4952	Checks if rating is a valid value .
4953	Call a method on the proxied plugin .
4954	Injects scripts to the headscript view helper .
4955	hook into the rendering - process to provide a summary of all included files
4956	Proxies to the wrapped entity class .
4957	Updates permissions on embedded files .
4958	Attach to an event manager
4959	Detach all our listeners from the event manager
4960	Renders a form from the provided form . Wraps this form in a div - container and renders the label if any .
4961	Sets the form instance .
4962	Adds a view model .
4963	Creates a view model with template and adds it to the list .
4964	Creates a view model with default template
4965	Return all files or a single file .
4966	Return all header parameters or a single header parameter .
4967	Return all post parameters or a single post parameter .
4968	Return all query parameters or a single query parameter .
4969	Return all event parameters or a single event parameter .
4970	Processes a log message before it is given to the writers
4971	Copies all properties from the source to the target if the target has the specified properties .
4972	Recursively flattens a tree structure .
4973	Prepares the form values for hydrating .
4974	Recursively hydrate the tree structure .
4975	Finds an item in a tree structure or create a new item .
4976	Creates new object
4977	Saves e - mail message to a file
4978	Returns the mapped or unfiltered value .
4979	Fetches a text search form .
4980	Converts a \ DateTime object to MongoDB representation .
4981	Converts a TimezoneAwareDate array to a \ DateTime Object .
4982	Set formular editor options
4983	Gets an iterator to iterate over the enabled formulars .
4984	Sets formular parameters .
4985	Sets a formular parameter .
4986	Execute an arbitrary action
4987	Sets a form or form specification .
4988	Sets formulars or specifications .
4989	Enables a formular .
4990	Disables a formular .
4991	Gets the entity .
4992	Maps entity property to forms or child containers .
4993	get the actual active Form
4994	get the form before the actual active
4995	Gets the form after the actual active
4996	Gets the column map .
4997	Sets the initial search params .
4998	Decide based on the current date and time what the vote should be . Static so it s strategy can easily be accessed by other components as well without the actual need for the voter instance .
4999	Fixes the many - to - one side of the one - to - many content items and flushes the menu manager .
5000	Pre remove function
5001	Removes tab and all it s fields in it
5002	Removes the empty tabs from the groups
5003	Gets configuration for an event manager .
5004	Creates an event manager instance .
5005	Attaches listeners provided in the config to the event manager instance .
5006	Normalizes the listener configuration .
5007	Initialize this state .
5008	Trigger capture event
5009	Sets the message subject .
5010	Gets the permissions entity .
5011	Get the logger instance
5012	Set or get the injectLogger flag
5013	Registers itself with an EventManager
5014	Listener method for queue bootstrap event
5015	Listener method for queue finish event
5016	listener method for process job event .
5017	listener method for process job event
5018	Is a field enabled?
5019	Get the field option array compatible with element spec .
5020	Get the field flags array compatible with element flags .
5021	Get input filter spec for a field .
5022	Copy specified keys from source to a new array .
5023	Are multiple selections allowed?
5024	Find a leaf with a concrete value in the tree .
5025	Renders the markup for the file upload element .
5026	Get the customization options .
5027	Returns the template of the page from the bundle the entity is part of .
5028	Adds the available page types and content item types to the class metadata s discriminatorMap
5029	Find a page in the repository and trigger a view event .
5030	Finds a page in the specified repository by the specified conditions .
5031	Set the loaded page and trigger a view event
5032	Returns the currently loaded page or default to the specified callback for loading it .
5033	Extracts the source file entity .
5034	Hydrates and returns a clone of the target entity .
5035	Sets the default from address .
5036	Controls the admin dashboard page .
5037	Set images and permissions .
5038	Get an image
5039	Set an image .
5040	Set permissions for all images in this set .
5041	Sets up services on the bootstrap event .
5042	attach a Listener that is liable for storing the notifications
5043	send a message to the notification - handler
5044	Listen to the route event
5045	Add arguments for the call to the CreatePaginator plugin .
5046	Add arguments for the call to the SearchForm plugin .
5047	Calls the stacked plugins in the right order and returns the result array .
5048	Calls an invokable controller plugin .
5049	Checks if a property exists and has a non - empty value .
5050	Trigger an event .
5051	Trigger an event applying a callback to each listener s result
5052	Get the content type .
5053	Set the mvc response
5054	Initialize the Sele
5055	Gets an entity class name from the requested service name .
5056	Attachs the events to the provided event manager .
5057	Generate class name
5058	Generate and Render a badge according to the format .
5059	Generate and Render a badge according to the format from an URI eg license - MIT - blue . svg or I_m - liuggio - yellow . svg .
5060	Factory method the creates a Badge from an URI eg . I_m - liuggio - yellow . svg
5061	Calculate the width of the text box .
5062	Return string containing last exec call s output
5063	Return json - decoded output from last exec call
5064	Perform a cURL session
5065	Get information regarding the transfer
5066	Initialize a cURL session
5067	Set an option for the cURL transfer
5068	Set an option for the cURL share handle
5069	Get information about the current transfers
5070	Convert a topLevel and depth to H1 .. H6 tags array
5071	Traverse Header Tags in DOM Document
5072	Get HTML Links in list form
5073	Create the Model
5074	Sets the output format
5075	Write a line to the API log
5076	Get multiple items
5077	Return an item by it s ID or an array of items by their ID .
5078	Search for an item
5079	Creates a new item
5080	Creates a new resource
5081	Updates an existing resource
5082	Deletes an existing resource
5083	Fetches an object by it s ID SLUG or TOKEN
5084	Validates user input
5085	Builds pagination URL
5086	Start a new transaction .
5087	Commit current transaction .
5088	Return an array where the result of one column is the index and the second is value .
5089	Return an array where the result of one column is the index and the remaining data is value .
5090	Execute the entire file . On error the execution is aborted .
5091	Execute this query as a sub query of another query that must return a scalar value .
5092	Generate the query string .
5093	Rename tableA to tableB and tableB to tableA .
5094	Return an iterator to iterate over all result sets .
5095	Get the parts this query can have .
5096	Execute a SELECT EXISTS On each query . Will stop when at least one query returns true .
5097	Append associative array of values .
5098	Append numeric array of values .
5099	Set the table to select into .
5100	Append a set of values to insert .
5101	Insert data using given expression . That can be sued if some of the values are expressions . Expressions must be Sql safe .
5102	Use select command to insert into the table . Note that in this case no values can be bind to the table .
5103	Append set clause .
5104	Execute the generated query .
5105	Limit the query for given set .
5106	Function called by TWithSet .
5107	Always return a connector using a new connection . Note that closeAll will not affect connectors returned by this method .
5108	Append the DESC keyword to all requested keywords or expressions .
5109	Add order by fields .
5110	Append bind values to given part .
5111	Append new query to given part .
5112	Override part value .
5113	Writes a QTime for the given timestamp or DateTime object
5114	transcode UTF - 8 to UTF - 16BE
5115	submitting article here return new Object cloned from original
5116	submit each attachment of an article here
5117	delete article based on id
5118	delete attachment of an article
5119	assessing and custom option
5120	one gate menu for request creation .
5121	actually send request created here separated for easier attempt count and handling exception
5122	set header for OAuth 2 . 0
5123	get Attachment Submission url Endpoint at rest API
5124	Recursively cast to array
5125	Start application and serve user requests using selected dispatcher or throw an exception .
5126	Initiate application core .
5127	Reads a QTime from the stream and returns a DateTime with current timezone
5128	Reads a QDateTime from the stream and returns a DateTime with current timezone
5129	transcode UTF - 16BE to UTF - 8
5130	withString function .
5131	Filter allowable port to minimize risk
5132	cek if current uri scheme use standard port
5133	function Create Uri
5134	Create Uri Object
5135	Extract a single resource .
5136	Handle php shutdown and search for fatal errors .
5137	Convert application error into exception .
5138	Handle exception and output error to the user .
5139	Add all middleware to one array it will be filtered based on the route once a request is being processed .
5140	Map multiple methods for a route
5141	Run the app
5142	Process the request into a response
5143	function Create Photo Attachment
5144	Create Photo Object
5145	Method executed after each scenario
5146	Access Inbox For
5147	Get Opened Email
5148	Get Most Recent Unread Email
5149	Get Full Email
5150	Get Email Recipients
5151	Text After String
5152	Get Email To
5153	This method will add the provided configuration to the object configuration .
5154	Configures the object with the current configuration .
5155	This method will configure the object with the provided configuration .
5156	Get extension to use for runtime data or configuration cache .
5157	Checks if this item should be executed for a given Route
5158	function Create attachment Gallery
5159	Create Gallery Object
5160	getAttachment based on fields
5161	add attach an attachment to this model
5162	Attach gallery here
5163	Serialize entity .
5164	Send an email ..
5165	Render an email .
5166	Make Sure Uri is a Psr \ Http \ Message \ UriInterface instance
5167	Make Sure Date in string with correct format state
5168	Clean non ASCII char from string
5169	Tries to guess the type constant based on the data type of the given value
5170	Returns the type name string for the given type constant
5171	get available ratio for photo attachment
5172	Sets the encoder .
5173	Create Article Object
5174	get single value based on key
5175	set value of certain key on property cannot add new property use add instead
5176	add new item to props
5177	map each props item against the callback and return the resulting object IMMUTABLE
5178	filter the props againt rule on callback IMMUTABLE
5179	addNew item on props
5180	add new child array
5181	appending to already existing array
5182	source taken from photo url if not available
5183	map a single article to main attributes in Article Class
5184	Create list attributes based on Article attachment type
5185	Attach attachments to article
5186	Make attachment object
5187	Create photo object
5188	Create page object
5189	Create Video object
5190	Make sure string is not null or empty
5191	Handle string when it will throw exception
5192	Create a new route
5193	Dispatches the request to the fast - router Returns an enriched request with the proper attributes Throws appropriate exceptions if the route isn t reachable
5194	Callable for simpleDispatcher to add routes
5195	Try to find a result and logs the call
5196	Add a search result
5197	Get Lumen version
5198	Save the current message instance into de queue server
5199	Validate the given options with the allowed options
5200	Set the following options in the class
5201	Build options set to build a connection to the queue server
5202	Open a connection with the RabbitMQ Server
5203	Close the connection with the RabbitMQ server
5204	Compares given URL with current URL .
5205	Detects if the given string is found in the current URL .
5206	Compares given array of route names with current route name .
5207	Compares given array of URLs with current URL .
5208	Pretty prints a node .
5209	Pretty prints an array of statements .
5210	Create CLI instance .
5211	Prints an expression node with the least amount of parentheses necessary to preserve the meaning .
5212	returns constanct value
5213	gets a binding
5214	tries to find a binding
5215	returns binding denoted by annotations on type to create
5216	creates an object via injection
5217	creates list of bindings from given class
5218	create a binding module which binds current hostnames
5219	casts given predicate to a predicate instance
5220	checks if given path is located within root path
5221	returns list of source pathes defined for autoloader
5222	checks if property with given name exists
5223	creates a closure which returns the given value
5224	creates a closure which uses the given provider to create the value
5225	creates the instance
5226	checks if given type and type of value are a mismatch
5227	bind to a list
5228	creates injector instance with bindings
5229	returns the enum instance of given class identified by its name
5230	returns the enum instance of given class identified by its value
5231	returns a list of values for given enum
5232	checks whether a value is equal to the class
5233	handles the exception
5234	adds an entry to the list
5235	adds an entry to the map created by an injection provider
5236	returns the value to provide
5237	returns a list of all injection values for given method
5238	returns default binding name for all parameters on given method
5239	returns type of param
5240	logs the exception into a logfile
5241	returns fields for exception to log
5242	Get all autoload paths .
5243	Transform a file or directory recursively .
5244	Prefix namespace at the given path .
5245	Replace string in the given file .
5246	Get the contents of a file .
5247	Find all children .
5248	Find model by id .
5249	Save children .
5250	Save the model .
5251	Delete the model .
5252	Find a model by its primary key or return new model .
5253	Find a model by its primary key or throw an exception .
5254	Destroy the models by the given id .
5255	Search documents and find previous and next documents .
5256	Set parent document .
5257	Execute the query and get the result .
5258	Apply the callback to the documents of the given query .
5259	Execute the query and get all items .
5260	Set filter options .
5261	Merges elastcisearch query with current filter query .
5262	Merges BOOL elasticsearch queries .
5263	Set _source to search query .
5264	Put instance to cache .
5265	Return the difference between given attributes and attributes which are already cached .
5266	Merge models .
5267	Escape value for sql
5268	Escape value for like statement
5269	Translate the current query to an SQL select statement
5270	Translate the current query to an SQL update statement
5271	Translate the current query to an SQL delete statement
5272	Build the order by statement
5273	Retrieve a Database instance by table name .
5274	Add an group by statement to the current query
5275	Generate Having clause
5276	Add an order by statement to the current query
5277	Create a where statement
5278	Create an or where statement
5279	Generate Where clause
5280	Set the selected fields
5281	Shortcut to add a function
5282	Translate the given query object and return one variable from the database
5283	Insert a row into a table
5284	Set the limit clause .
5285	Create an query limit based on a page and a page size
5286	Reset all vaiables .
5287	Perform a request
5288	Get request method name .
5289	Perform request using native PHP streams
5290	Perform request using CURL extension .
5291	Simple detection . If you need just the language code .
5292	Build the avatar URL based on the provided email address .
5293	creates a SVG Font out of SGV files from a directory
5294	creates a CSS file with icon classes from a SVG font
5295	creates single SVG files out of a SVG font and saves them to the specified directory
5296	set font optinos
5297	returns font options stored in the XML document
5298	add a glyph to the font
5299	get all glyphs
5300	get glyph names
5301	get css definition for icon class names
5302	get the unicode hex representation of a unicode character
5303	get the unicode character of a unicode hex string
5304	returns one single SVG path definition for all elements in the document
5305	returns one single SVG path definition for all elements in the specified element
5306	transforms a SVG path definition by the given parameters
5307	converts a polygon object to a SVG path definition
5308	converts a rect object to a SVG path definition
5309	converts a circle object to a SVG path definition
5310	converts a ellipse object to a SVG path definition
5311	creates a HTML info page out of a SVG font
5312	creates the HTML for the info page
5313	creates a HTML list
5314	Generate the recovery codes .
5315	Generate all blocks .
5316	Get a collection of recovery codes .
5317	Execute callable .
5318	Suspends execution of the current process until a child has exited .
5319	Check exit code and return TRUE if process was ended successfully .
5320	Wait Process is completely initialized .
5321	Remove semaphore .
5322	Lock and execute given callable .
5323	Register given callable with pcntl signal .
5324	Execute pcntl_signal_dispatch and process all registered handlers .
5325	Lock shared memory if lock not already acquired by this process
5326	Start logging profiling data
5327	End logging profiling data
5328	Get information about CPU using lscpu untility
5329	Adds data to the internal buffer and tries to continue parsing .
5330	Returns a regular expression pattern to detect emoji characters .
5331	Returns an array with all unicode values for emoji characters .
5332	Generate Heroku - like random names to use in your applications .
5333	Create and set the signature cookie .
5334	Calculate the hash to sign the request with based on the given parameters .
5335	Create a digest of the given data with an asn1 header .
5336	Encode the given parameters into a url encoded string based upon RFC 3986 .
5337	Get the API .
5338	Build the SOAP client for the given service .
5339	Set the permission mode .
5340	Sets the provided balancing mode for the HA - IP .
5341	Make a SOAP call .
5342	Get the SOAP client and preset call parameters .
5343	Build the the SOAP client .
5344	Make a new SoapClient instance .
5345	Request access to the data - center .
5346	Request remote hands to the data - center .
5347	Revert a snapshot to another VPS .
5348	Install an operating system on a VPS .
5349	Install an operating system on a vps with a unattended install file .
5350	Set a new password for a mail box from a web hosting package .
5351	Set a password for a database from a web hosting package .
5352	Get namespaces supported by the site .
5353	Get features supported by the site .
5354	Get method - specific data for the given authentication method .
5355	Discover classes in operation
5356	Parse an file into a OpenAPI Schema model
5357	Create the query param statements and documentation
5358	Create parameters for the method and their documentation
5359	Create all statements around url transformation
5360	Create body statements
5361	Create headers statements
5362	Return a list of class guessed
5363	Generate a list of files
5364	Use php cs fixer to have a nice formatting of generated files
5365	Stashes the pass as a SimpleResultOfPass for later retrieval .
5366	Stashes the fail as a SimpleResultOfFail for later retrieval .
5367	Stashes the exception as a SimpleResultOfException for later retrieval .
5368	The MIME part as a string .
5369	Tests each character is in the range 0 - 127 .
5370	Adds a parameter to the query .
5371	Adds a MIME part to the query . Does nothing for a form encoded packet .
5372	Adds a set of parameters to this query .
5373	Accessor for single value .
5374	Factory for the tag objects . Creates the appropriate tag object for the incoming tag name and attributes .
5375	Factory for input tags .
5376	Make the keys lower case for case insensitive look - ups .
5377	Accessor for an attribute .
5378	Test to see if text should be wrapped .
5379	Performs the formatting that is peculiar to this tag .
5380	Can only set allowed values .
5381	Accessor for current selection value .
5382	Can only set allowed values . Any illegal value will result in a failure but all correct values will be set .
5383	Test to see if a value matches the option .
5384	The only allowed value sn the one in the value attribute .
5385	Scans the widgets for one with the appropriate ID field .
5386	Scans the widgets for one with the appropriate attached label .
5387	Accessor for current set values .
5388	Tests to see if a possible value set is legal .
5389	Each tag is tried in turn until one is successfully set . The others will be unchecked if successful .
5390	Tests to see if a value is allowed .
5391	Accessor for current selected widget or false if none .
5392	Paints pass as XML .
5393	Paints failure as XML .
5394	Paints error as XML .
5395	Paints exception as XML .
5396	Paints the skipping message and tag .
5397	Paints a simple supplementary message .
5398	Serialises the event object .
5399	Sets the host . The cookie rules determine that the first two parts are taken for certain TLDs and three for others . If the new host does not match these rules then the call will fail .
5400	Extracts just the domain part that determines a cookie s host validity .
5401	Tests a path to see if the cookie applies there . The test path must be longer or equal to the cookie path .
5402	Test to see if cookie is expired against the cookie format time or timestamp . Will give true for a session cookie .
5403	Adds a trailing and leading slash to the path if missing .
5404	Removes expired and temporary cookies as if the browser was closed and re - opened .
5405	Ages all cookies in the cookie jar .
5406	Finds a matching cookie to write over or the first empty slot if none .
5407	Reads the most specific cookie value from the browser cookies . Looks for the longest path that matches .
5408	Tests cookie for matching against search criteria .
5409	Uses a URL to sift relevant cookies by host and path . Results are list of strings of form name = value .
5410	Closes the socket preventing further reads . Cannot be reopened once closed .
5411	Writes some data to the socket and saves alocal copy .
5412	Reads data from the socket .
5413	Factory for socket .
5414	Creates the first line which is the actual request .
5415	Dispatches the content to the route s socket .
5416	Sends the headers .
5417	Wraps the socket in a response parser .
5418	Writes new cookies to the cookie jar .
5419	Called on each header line to accumulate the held data within the class .
5420	Parse the Set - cookie content .
5421	Splits up the headers and the rest of the content .
5422	Reads the whole of the socket output into a single string .
5423	Invokes a test method whilst trapping expected exceptions . Any left over unthrown exceptions are then reported as failures .
5424	Sets up an expectation of an exception . This has the effect of intercepting an exception that matches .
5425	Compares the expected exception with any in the queue . Issues a pass or fail and returns the state of the test .
5426	Turns an expected exception into a SimpleExpectation object .
5427	Gets the list of interfaces from a class . If the class name is actually an interface then just that interface is returned .
5428	Gets the list of methods for the implemented interfaces only .
5429	Finds the parent class name .
5430	Scans for final methods as they screw up inherited mocks by not allowing you to override them .
5431	Whittles a list of interfaces down to only the necessary top level parents .
5432	Checks whether a method is abstract or not .
5433	Checks whether a method is abstract in all parents or not .
5434	Checks whether a method is static or not .
5435	Returns the source code matching the declaration of a method .
5436	Get the source code for the parameters of a method .
5437	Adds a pattern with an optional label .
5438	Attempts to match all patterns at once against a string .
5439	Adds a token search pattern for a particular parsing mode . The pattern does not change the current mode .
5440	Adds a pattern that will enter a new parsing mode . Useful for entering parenthesis strings tags etc .
5441	Splits the page text into tokens . Will fail if the handlers report an error or if no content is consumed . If successful then each unparsed and parsed token invokes a call to the held listener .
5442	Sends the matched token and any leading unmatched text to the parser changing the lexer to a new mode if one is listed .
5443	Calls the parser method named after the current mode . Empty content will be ignored . The lexer has a parser handler for each mode in the lexer .
5444	Tries to match a chunk of text and if successful removes the recognised chunk and any leading unparsed data . Empty strings will not be matched .
5445	The lexer has to skip certain sections such as server code client code and styles .
5446	Pattern matches to parse the inside of a tag including the attributes and their quoting .
5447	Matches attributes that are either single quoted double quoted or unquoted .
5448	Accepts a token from the tag mode . If the starting element completes then the element is dispatched and the current attributes set back to empty . The element or attribute name is converted to lower case .
5449	Accepts a token from the end tag mode . The element name is converted to lower case .
5450	Part of the tag data .
5451	Reads the raw content and send events into the page to be built .
5452	Start of element event . Opens a new tag .
5453	End of element event .
5454	Test to see if there are any open tags awaiting closure that match the tag name .
5455	Unparsed but relevant data . The data is added to every open tag .
5456	Any content fills all currently open tags unless it is part of an option tag .
5457	Parsed data in tag form . The parsed tag is added to every open tag . Used for adding options to select fields only .
5458	Opens a tag for receiving content . Multiple tags will be receiving input at the same time .
5459	Adds a tag to the page .
5460	Closes the most recently opened label .
5461	Marker for end of complete page . Any work in progress can now be closed .
5462	Adds another location to the realm .
5463	Finds the common starting path .
5464	Test to see if the URL is within the directory tree of the realm .
5465	Adds a new realm centered the current URL . Browsers privatey wildly on their behaviour in this regard . Mozilla ignores the realm and presents only when challenged wasting bandwidth . IE just carries on presenting until a new challenge occours . SimpleTest tries to follow the spirit of the original standards committee and treats the base URL as the root of a file tree shaped realm .
5466	Sets the current identity to be presented against that realm .
5467	Finds the name of the realm by comparing URLs .
5468	Presents the appropriate headers for this location .
5469	Overlays the generated message onto the stored user message . An additional message can be interjected .
5470	Describes a pattern match including the string found and it s position .
5471	Extracts the member value even if private using reflection .
5472	Extracts a private member s value when reflection won t play ball .
5473	Comparison . Compares visible text of widget or related label or name .
5474	Combined action attribute with current location to get an absolute form target .
5475	Absolute URL of the target .
5476	Creates the encoding for the current values in the form .
5477	Adds a tag contents to the form .
5478	Sets the widget into the form grouping radio buttons if any .
5479	Adds a radio button building a group if necessary .
5480	Adds a checkbox making it a group on a repeated name .
5481	Extracts current value from form .
5482	Sets a widget value within the form .
5483	Used by the page object to set widgets labels to external label tags .
5484	Test to see if a form has a submit button .
5485	Test to see if a form has an image control .
5486	Gets the submit values for a selected button .
5487	Gets the submit values for an image .
5488	Simply submits the form without the submit button value . Used when there is only one button or it is unimportant .
5489	Parses simple parameters from CLI .
5490	Adds a value as an array of one or appends to an existing array elements
5491	Message to display if expectation differs from the parameters actually received .
5492	Renders the argument list as a string for messages .
5493	Stashes a reference against a method call .
5494	Searches the call list for a matching parameter set . Returned by reference .
5495	Searches the map for a matching item .
5496	Stores an action against a signature that will always fire unless masked by a time specific one .
5497	Stores an action against a signature that will fire at a specific time in the future .
5498	Sets up an expectation on the argument list .
5499	Actually carry out the action stored previously if the parameters match .
5500	Replaces wildcard matches with wildcard expectations in the argument list .
5501	Die if bad arguments array is passed .
5502	Triggers a PHP error if the method is not part of this object .
5503	Adds one to the call count of a method .
5504	Fetches the call count of a method so far .
5505	Sets a return for a parameter list that will be passed on by all calls to this method that match .
5506	Sets a return for a parameter list that will be passed only when the required call count is reached .
5507	Sets a return for a parameter list that will be passed by value for all calls to this method .
5508	Sets a return for a parameter list that will be passed by reference for all calls .
5509	Sets up an expected call with a set of expected parameters in that call . All calls will be compared to these expectations regardless of when the call is made .
5510	Sets up an expected call with a set of expected parameters in that call . The expected call count will be adjusted if it is set too low to reach this call .
5511	Sets an expectation for the number of times a method will be called . The tally method is used to check this .
5512	Sets the number of times a method may be called before a test failure is triggered .
5513	Sets the number of times to call a method to prevent a failure on the tally .
5514	Convenience method for a single method call .
5515	Convenience method for requiring a method call .
5516	Sets up a trigger to throw an error upon the method call .
5517	Sets up a trigger to throw an error upon a specific method call .
5518	Returns the expected value for the method name and checks expectations . Will generate anytest assertions as a result of expectations if there is a test present .
5519	Finds the return value matching the incoming arguments . If there is no matching value found then an error is triggered .
5520	Tests the arguments against expectations .
5521	Clones the interface of a class and creates a mock version that can have return values and expectations set .
5522	Clones a class interface and creates a mock version that can have return values and expectations set .
5523	Subclasses a class and overrides every method with a mock one that can have return values and expectations set . Chains to an aggregated SimpleMock .
5524	Generates a version of a class with selected methods mocked only . Inherits the old class and chains the mock methods of an aggregated mock object .
5525	The new mock class code as a string .
5526	The new mock class code as a string . The mock will be a subclass of the original mocked class .
5527	The extension class code as a string . The class composites a mock object and chains mocked methods to it .
5528	Creates code within a class to generate replaced methods .
5529	Creates source code for chaining to the composited mock object .
5530	Creates source code for chaining to an aggregated mock object .
5531	Adds code for chaining the throw methods .
5532	Creates source code to override a list of methods with mock versions .
5533	paints start tag for div representing a test node
5534	paints wrapping treemap divs
5535	divides the test results based on a slice and dice algorithm
5536	Adds a parsed page to the frameset .
5537	Replaces existing frame with another . If the frame is nested then the call is passed down one level .
5538	Accessor for current frame focus . Will be false if no frame has focus . Will have the nested frame focus if any .
5539	Turns an internal array index into the frames list into a public name or if none then a one offset index .
5540	Sets the focus by index . The integer index starts from 1 . If already focused and the target frame also has frames then the nested frame will be focused .
5541	Sets the focus by name . If already focused and the target frame also has frames then the nested frame will be focused .
5542	Clears the frame focus for any nested frames .
5543	Accessor for frames information .
5544	Accessor for raw text of either all the pages or the frame in focus .
5545	Accessor for plain text of either all the pages or the frame in focus .
5546	Accessor for last error .
5547	Request method used to fetch this frame .
5548	Original resource name .
5549	Page base URL .
5550	Original request data .
5551	Accessor for current MIME type .
5552	Accessor for last response code .
5553	Accessor for outgoing header information .
5554	Accessor for raw header information .
5555	Accessor for a list of all fixed links .
5556	Accessor for a URL by the id attribute . If in a frameset then the first link found with that ID attribute is returned only . Focus on a frame if you want one from a specific part of the frameset .
5557	Attaches the intended frame index to a list of URLs .
5558	General form finder . Will search all the frames or just the one in focus .
5559	Finds a form in a page using a form finding method . Will also tag the form with the frame name it belongs in .
5560	Adds a successfully fetched page to the history .
5561	Get the HTML parser to use . Can be overridden by setParser . Otherwise scans through the available parsers and uses the first one which is available .
5562	Parses the raw content into a page . Will load further frame pages unless frames are disabled .
5563	Fetches a page or a single frame if that is the current focus .
5564	Fetches a frame into the existing frameset replacing the original .
5565	Fetches the page content with a HEAD request . Will affect cookies but will not change the base URL .
5566	Fetches the page content with a simple GET request .
5567	Fetches the page content with a POST request .
5568	Fetches the page content with a PUT request .
5569	Sends a DELETE request and fetches the response .
5570	Equivalent to hitting the retry button on the browser . Will attempt to repeat the page fetch . If there is no history to repeat it will give false .
5571	Equivalent to hitting the back button on the browser . The browser history is unchanged on failure . The page content is refetched as there is no concept of content caching in SimpleTest .
5572	Retries a request after setting the authentication for the current realm .
5573	Sets all form fields with that name .
5574	Clicks the submit button by label . The owning form will be submitted by this .
5575	Clicks the submit button by name attribute . The owning form will be submitted by this .
5576	Clicks the submit button by ID attribute of the button itself . The owning form will be submitted by this .
5577	Clicks the submit image by some kind of label . Usually the alt tag or the nearest equivalent . The owning form will be submitted by this . Clicking outside of the boundary of the coordinates will result in a failure .
5578	Clicks the submit image by the name . Usually the alt tag or the nearest equivalent . The owning form will be submitted by this . Clicking outside of the boundary of the coordinates will result in a failure .
5579	Clicks the submit image by ID attribute . The owning form will be submitted by this . Clicking outside of the boundary of the coordinates will result in a failure .
5580	Submits a form by the ID .
5581	Finds a URL by label . Will find the first link found with this link text by default or a later one if an index is given . The match ignores case and white space issues .
5582	Follows a link by label . Will click the first link found with this link text by default or a later one if an index is given . The match ignores case and white space issues .
5583	Follows a link by id attribute .
5584	Clicks a visible text item . Will first try buttons then links and then images .
5585	Tests to see if a click target exists .
5586	Removes expired and temporary cookies as if the browser was closed and re - opened . Authorisation has to be obtained again as well .
5587	Get current list of cookies
5588	Import a list of cookies
5589	Reads the current cookies within the base URL .
5590	Sets the identity for the current realm .
5591	Fetches a URL as a response object . Will keep trying if redirected . It will also collect authentication realm information .
5592	Fetches the page until no longer redirected or until the redirect limit runs out .
5593	Actually make the web request .
5594	Creates a full page request .
5595	Sets up either a direct route or via a proxy .
5596	Invokes a test method and dispatches any untrapped errors . Called back from the visiting runner .
5597	Wires up the error queue for a single test .
5598	Adds an error to the front of the queue .
5599	Any errors still in the queue are sent to the test case . Any unfulfilled expectations trigger failures .
5600	Converts an error code into it s string representation .
5601	Stash the first passing item . Clicking the test item goes to first pass .
5602	Stash the first failing item . Clicking the test item goes to first fail .
5603	Stash the first exception . Clicking the test item goes to first message .
5604	Paints nothing at the start of a test method but stash the method name for later .
5605	Only send one message if the test passes after that suppress the message .
5606	Stashes the name of the test suite . Starts test coverage if enabled .
5607	Paints coverage report if enabled .
5608	Stops output buffering and send the captured output to the listener .
5609	acceptor for start of test group node
5610	acceptor for start of test case node
5611	acceptor for start of test method node
5612	acceptor for passing assertion node
5613	acceptor for failing assertion node
5614	acceptor for end of method node
5615	acceptor for end of test group . final group pops the collected treemap nodes and assigns it to the internal graph property .
5616	Comparator method to rank child nodes by total weight .
5617	depth first search to get the total number of nodes that are descendants of this node .
5618	Paints the top of the web page setting the title to the name of the starting test .
5619	Paints the test failure with a breadcrumbs trail of the nesting test suites below the top level test .
5620	Extracts the X Y coordinate pair from an image map .
5621	Extracts the scheme part of an incoming URL .
5622	Extracts the path information from the incoming URL . Strips this path from the URL .
5623	Breaks the request down into an object .
5624	Sets image coordinates . Set to false to clear them .
5625	Accessor for current request parameters in URL string form . Will return teh original request if at all possible even if it doesn t make much sense .
5626	Adds an additional parameter to the request .
5627	Renders the URL back into a string .
5628	Replaces unknown sections to turn a relative URL into an absolute one . The base URL can be either a string or a SimpleUrl object .
5629	Replaces unknown sections of the path with base parts to return a complete absolute one .
5630	Extracts the username and password for use in rendering a URL .
5631	Capture the attempt to display the final test results and insert the ANSI - color codes in place .
5632	Strips off any kind of slash at the end so as to normalise the path .
5633	Scans the directory and adds what it can .
5634	Attempts to add files that match a given pattern .
5635	Paints a PHP exception .
5636	Paints the test failure as a stack trace .
5637	Paints a PHP error or exception .
5638	Veto everything that doesn t match the method wanted .
5639	Paints the start of a group test . Will also paint the page header and footer if this is the first test . Will stash the size if the first start .
5640	Paints the end of a group test . Will paint the page footer if the stack of tests has unwound .
5641	Paints the start of a test case . Will also paint the page header and footer if this is the first test . Will stash the size if the first start .
5642	Paints the end of a test case . Will paint the page footer if the stack of tests has unwound .
5643	Signals that the next evaluation will be a dry run . That is the structure events will be recorded but no tests will be run .
5644	Accessor for current status . Will be false if there have been any failures or exceptions . If any reporter reports a failure the whole suite fails .
5645	The reporter has a veto on what should be run . It requires all reporters to want to run the method .
5646	Every reporter gets a chance to wrap the invoker .
5647	Paints the end of a test case .
5648	Paints the end of a test method .
5649	Sets the value in the argments object . If multiple values are added under the same key the key will give an array value in the order they were added .
5650	Extracts the next key and value from the argument list .
5651	Adds the explanation for a group of flags that all have the same function .
5652	Generates the help text .
5653	Works out the longest flag for formatting purposes .
5654	Generates the text for a single flag and it s alternate flags .
5655	Reads the raw content the page using HTML Tidy .
5656	Helper method for traversing the XML tree .
5657	Facade for forms containing preparsed widgets .
5658	Adds the widget into the form container .
5659	Fills the widget cache to speed up searching .
5660	Parses the options from inside an XML select node .
5661	Convenience method for collecting all the attributes of a tag . Not sure why Tidy does not have this .
5662	Overlay an attribute into the attributes hash .
5663	Remove start and end quotes .
5664	Collects frame information inside a frameset tag .
5665	Extracts the XML node text .
5666	Called at the end of a parse run . Attaches any non - wrapping labels to their form elements .
5667	Gets the string representation of a type .
5668	Creates a human readable description of the difference between two variables . Uses a dynamic call .
5669	Clips a string to a maximum length .
5670	Creates a human readable description of the difference between two variables . The minimal version .
5671	Creates a human readable description of the difference between a string and another variable .
5672	Creates a human readable description of the difference between two floating point numbers .
5673	Creates a human readable description of the difference between two arrays .
5674	Compares two arrays to see if their key lists match . For an identical match the ordering and types of the keys is significant .
5675	Creates a human readable description of the difference between two objects .
5676	Get all members of an object including private and protected ones . A safer form of casting to an array .
5677	Find the first character position that differs in two strings by binary chop .
5678	Extracts all of the response information .
5679	Sets up a missing response .
5680	Accessor for plain text of page as a text browser would see it .
5681	Test to see if link is an absolute one .
5682	Accessor for frame name and source URL for every frame that will need to be loaded . Immediate children only .
5683	Accessor for a list of all links .
5684	Accessor for a URL by the id attribute .
5685	Converts a link tag into a target URL .
5686	Expands expandomatic URLs into fully qualified URLs .
5687	Finds a held form by button label . Will only search correctly built forms .
5688	Finds a held form by image using a selector . Will only search correctly built forms .
5689	Finds a held form by the form ID . A way of identifying a specific form when we have control of the HTML code .
5690	Turns HTML into text browser visible text . Images are converted to their alt text and tags are supressed . Entities are converted to their visible representation .
5691	Generates the HTML that represents the button
5692	Adds the JS sets up necessary HTML attributes
5693	Create the nested form
5694	Render the form to the template
5695	Handles the saving of the nested form . This is essentially a proxy method for the method that the BetterButtonNestedForm button has been configured to use
5696	Get the action from the request whether it s part of the form data or in the query string
5697	Updates the button to be disabled if there is no previous record
5698	Disables the button if there is no next record
5699	Gets a FormAction or BetterButtonCustomAction by name in utils or actions
5700	Gets an array of all the default buttons as defined in the config
5701	Transforms a list of configured buttons into a usable FieldList
5702	Checks if a custom action is allowed to be called against a model . Prevents security risk of calling arbitrary public methods on the DataObject .
5703	Bind to the GridField request
5704	Render the field with the correct attributes
5705	Determines if the button should show
5706	Determines if the button should display
5707	Gets the link for the button
5708	Update the UI to reflect published state
5709	Get the name of the button . Arbitrary .
5710	Gets the HTML representing the button
5711	Generates the button . Updates the literal field with the correct HTML based on any post - contruct updates
5712	Redirecting to the current URL doesn t do anything so this is just a dummy action that gives the request somewhere to go in order to force a reload and then just redirects back to the original link .
5713	Updates the detail form to include new form actions and buttons
5714	Given a list of actions remove anything that doesn t belong .
5715	Saves the form and forwards to a blank form to continue creating
5716	Saves the form and goes back to list view
5717	Publishes the record and goes to make a new record
5718	Publishes the record and closes the detail form
5719	Goes back to list view
5720	Saves the record and goes to the next one
5721	Saves the record and goes to the previous one
5722	Allows us to have our own configurable save button
5723	Unpublishes the record
5724	Gets the top level controller .
5725	Oh the horror! DRY police be advised . This function is a serious offender . Saves the form data and redirects to a given link
5726	Determines if the current record is published
5727	Determines if the current record is deleted from stage
5728	Renders the button includes the JS and CSS
5729	Binds to the GridField request and transforms the buttons
5730	Gets the HTML for the button
5731	List all available competitions .
5732	List one particular competition .
5733	List all teams for a particular competition .
5734	List all matches for a particular competition .
5735	Show all matches for a particular team .
5736	Decide which parts of a job queue to show
5737	Determine if the renderer can load the requested template .
5738	Set default file suffix
5739	Render the view
5740	Logs the duration of a specific request through the application
5741	Takes normal data array from Datadogstatsd library and adds the Laravel prefix functionality
5742	Give me your Content - Type and i give you a parser .
5743	Helper or parsing the Content - Type .
5744	returns true false or validation value
5745	note formats of various stack traces will differ as this is not the only way a stack trace is generated . php automatically generates one for fatal errors that are caught in the shutdown function and throwable exceptions generate one through their getTraceAsString method .
5746	no need to refresh passwordValue
5747	make sure each columnNameSql in columns
5748	string length must be > = numChars
5749	converts array to string
5750	this is called by constructor and also should be called after a change to roles from single page app to reset them .
5751	override for validation
5752	selects roles and converts recordset to array of objects and return
5753	all roles must exist or exception thrown
5754	called by children for posted filter form entry methods
5755	returns array of records or null
5756	to filter the permissions with certain roles and return all the roles the permissions have
5757	returns array of results instead of recordset
5758	permissions joined with role_permissions . note that every permission must have at least 1 role assigned
5759	note roles array is validated in Permission constructor
5760	selects and converts recordset to array of objects and return
5761	returns deleted title
5762	display items can be passed in as an array of records or objects if objects the appropriate template should be passed to this constructor .
5763	either session value or empty string
5764	overrides in order to get administrator objects and send to indexView
5765	get objects and send to parent indexView
5766	clears the current phpmailer
5767	Creates a fresh mailer
5768	adds column to update query
5769	sets update query
5770	should not be called by resources that don t require authentication
5771	returns true if has at least one role from array of role ids
5772	returns string of assigned roles ie role1 role2 ...
5773	whether model is allowed to be updated do not allow non - owners to edit owners
5774	whether this model is allowed to be deleted do not allow admin to delete themself or non - owners to delete owners
5775	get role objects and send to parent indexView
5776	appends sql and args to query
5777	handle null argument for correct sql
5778	sets sql and args
5779	returns the value of the one column in one record or null if 0 records result
5780	entire nav without regard to permissions
5781	add nav components as necessary based on logged in administrator role
5782	override to check exceptions
5783	called by insert and update
5784	the table must have a primary key column defined
5785	adds column to insert query
5786	this can be used when a record is not found for the given primary key for update and delete attempts
5787	since this extends AdminController and not AdminController the administratorId property of Events service must be set for the logout function in order to have it know the current logged in administrator
5788	calls appropriate parent method to execute query
5789	called by both insert and update children . update will call with skip true and record data so that only columns that have been changed have the unique rule applied otherwise validation would fail for unchanged unique fields
5790	input can be null
5791	whether this model is allowed to be deleted
5792	note this will set uniqueColumnNames whether they are set as a constraint or an index
5793	make protected since ORM does not sniff out every constraint some must be added manually when table mapper is extended
5794	inserts columnName = > f into columnValues array for any boolean column in the table that does not exist in columnValues
5795	returns primary key if set otherwise returns pg result
5796	Global middleware registration
5797	because of route naming conventions only send resourceType of post put or patch
5798	overrides in order to get objects and send to indexView
5799	instead of having roles returned as an array it will be returned as a string
5800	does validation for delete then deletes and returns deleted username
5801	the delete column - either delete link or blank space
5802	get permissions objects and send to parent indexView
5803	Parses the whitelist definitions into respective objects
5804	Checks the specified value against all configured definitions and returns true if at least one definition considers it a match
5805	Increment counter .
5806	Confirm that the tag has been given a title and doesn t already exist .
5807	Update the fusion tag to reflect the change .
5808	Update the fusion tag to remove this tag type .
5809	Update the page filtering allowing CMS searchable content tagging .
5810	Update the searchable fields and model admin filtering allowing CMS searchable content tagging .
5811	Display the appropriate tagging field .
5812	Update the tagging to reflect the change allowing searchable content .
5813	Display the appropriate fusion tag fields .
5814	Confirm that the fusion tag has been given a title and doesn t already exist .
5815	Update the tag types with a serialised representation .
5816	Update the existing and configuration defined tag types to reflect the change .
5817	Determine the existing and configuration defined tag types to consolidate .
5818	Update the searchable content tagging for a specific fusion tag .
5819	Creates alert objects for a type
5820	Transforms internal files array to Flysystem - compatible one .
5821	Writes string or stream to container .
5822	Returns the HTML for the flashAlerts
5823	Merges user - supplied options from the view with base config values
5824	Set the HTTP method of the request .
5825	Encode the POST data as a string .
5826	Set whether the response should be JSON or not .
5827	Build an URL with an optional query string .
5828	Create a new response object and set its values .
5829	Create a new raw request and set its values .
5830	Prepare the curl resource for sending a request .
5831	Send a request .
5832	Extract the response info header and body from a cURL response . Saves the data in variables stored on the object .
5833	Turn a header string into an array .
5834	Set the response code .
5835	Removes expired file information from the cache and updates the current now value .
5836	Respond to HTTP requests for filesystem resources .
5837	Twig thumbor filter
5838	Transform an url or path for thumbor
5839	Apply trim filter
5840	Apply crop filter
5841	Add user role .
5842	Adds text area input fields for choosing directories to be processed and excluding directories .
5843	Checks if the given value is a string
5844	Saves given string value in task object
5845	Batch resize pictures called by scheduler .
5846	Creates an entry in syslog .
5847	Sanitizes the file name .
5848	Populates the FAL metadata of the resized image .
5849	Generates the module content .
5850	Builds the expert configuration form .
5851	Creates the toolbar buttons .
5852	Processes submitted data and stores it to localconf . php .
5853	Loads the configuration of the virtual table tx_imageautoresize .
5854	Persists FlexForm items by removing ID - in front of new items .
5855	Returns some statistics and a social link to Twitter .
5856	Initializes the hook configuration as a meaningful ordered list of rule sets .
5857	Localizes a label .
5858	Sends a notification .
5859	Returns all directories found in the various rulesets .
5860	Returns all file types found in the various rulesets .
5861	Compiles all FlexForm rule sets .
5862	Expands values of a rule set .
5863	Expands the image type conversion mapping .
5864	Returns a regular expression pattern to match directories .
5865	Stores how many extra bytes have been freed .
5866	Gets the indexer
5867	Returns the EXIF orientation of a given picture .
5868	Returns metadata from a given file .
5869	Creates a virtual File object to be used transparently by external metadata extraction services as if it would come from standard FAL .
5870	Returns metadata from a given file using basic built - in PHP - based extractor .
5871	Converts an EXIF rational into its decimal representation .
5872	Returns a command line parameter to fix the orientation of a rotated picture .
5873	Returns true if the given PNG file contains transparency information .
5874	Returns true if the given GIF file is animated .
5875	Render a single flex form section container to add it to the DOM
5876	Prepares a list of image file extensions supported by the current TYPO3 install .
5877	Finds an existing file .
5878	Updates the index entry for a given file .
5879	Creates the index entry for a given file .
5880	Returns the value of a protected property .
5881	Post - processes a file upload .
5882	Reads one byte testing for EOF .
5883	Add default order clause to query as necessary .
5884	Normalize configuration .
5885	Generates the dropdown menu .
5886	Queries the TSDNS server for a specified virtual hostname and returns the result .
5887	Returns the internal path of the node icon .
5888	Returns a possible classname for the node which can be used as a HTML property .
5889	Returns the HTML code to display a TeamSpeak 3 viewer .
5890	Filters given node list array using specified filter rules .
5891	Converts a given permission type ID to a human readable name .
5892	Converts a specified log entry string into an array containing the data .
5893	List audio templates available .
5894	Fetches a specific AudioTemplate .
5895	Lists Image Templates available .
5896	Fetches a specific Image Template .
5897	Lists Video Templates available .
5898	Fetches a specific Video Template .
5899	Lists Functionalities available .
5900	Fetches a specific Functionality .
5901	Lists Groups available .
5902	Fetches a specific Group .
5903	Fetches the currently logged in User .
5904	Lists Roles available .
5905	Fetches a specific Role .
5906	Fetches all settings .
5907	Fetches a setting .
5908	Lists Users available .
5909	Fetches a specific User .
5910	Creates a new setting .
5911	Create a user Create a user in QBank .
5912	Update a user Update a user in QBank .
5913	Add the user to one or more groups .
5914	Update the last login time for a user Update the last login time for a user .
5915	Dispatch a password reset mail to a user .
5916	Reset a password for a user with password reset hash .
5917	Updates an existing setting .
5918	Sets the secret key using the specified pasphrase .
5919	Sets the created of the MoodboardResponse .
5920	Sets the updated of the MoodboardResponse .
5921	Gets a property from the first available PropertySet .
5922	Sets the propertySets of the MoodboardResponse .
5923	Adds an object of PropertySets of the MoodboardResponse .
5924	Sets the filterItems of the FilterItem .
5925	Adds an object of FilterItems of the FilterItem .
5926	Lists all Categories .
5927	Fetches a specific Category .
5928	Create a Category .
5929	Update a Category .
5930	Delete a Category .
5931	Sets the definition of the Protocol .
5932	Sets the endDate of the User .
5933	Sets the startDate of the User .
5934	Sets the lastLogin of the User .
5935	Sets the groups of the User .
5936	Adds an object of Groups of the User .
5937	Sets the functionalities of the User .
5938	Adds an object of Functionalities of the User .
5939	Sets the extraData of the User .
5940	Adds an object of ExtraData of the User .
5941	Connects to a remote server .
5942	Reads a single line of data from the stream .
5943	Returns the code needed to display a node in a TeamSpeak 3 viewer .
5944	Returns a array of FilterItem for the chosen categories .
5945	Returns a array of FilterItem for a specific freetext .
5946	Returns a array of FilterItem for the chosen property .
5947	Returns the adapter type .
5948	Blocks a stream until data is available for reading if the stream is connected in non - blocking mode .
5949	Sets the results of the SearchResult .
5950	Adds an object of MediaResponse of the SearchResult .
5951	Adds an object of FolderResponse of the SearchResult .
5952	Sets the transition of the SlideStructure .
5953	Returns an array filled with Channel objects .
5954	Creates a new channel using given properties and returns the new ID .
5955	Returns a list of permissions defined for a specific channel .
5956	Returns a list of permissions defined for a client in a specific channel .
5957	Returns the Channel object matching the given name .
5958	Returns the Client object matching the given ID .
5959	Returns the Client object matching the given unique identifier .
5960	Returns the Client object matching the given database ID .
5961	Returns the Servergroup object matching the given name .
5962	Returns a list of permissions assigned to the server group specified .
5963	Returns an ordered array of regular server groups available based on a pre - defined set of rules .
5964	Returns the Channelgroup object matching the given ID .
5965	Returns a list of permissions assigned to the channel group specified .
5966	Restores the default permission settings on the virtual server and returns a new initial administrator privilege key .
5967	Returns a list of temporary server passwords .
5968	Internal callback funtion for sorting of group objects .
5969	Internal callback funtion for sorting of file list items .
5970	Accounts control the security in QBank .
5971	Categories defines which PropertySets should be available for Media . All Media belongs to exactly one Category .
5972	DeploymentSites are places where Media from QBank may be published to to allow public access . Protocols define the way the publishing executes .
5973	Class Events .
5974	Filters are used for filtering media by its folder category or a specific property .
5975	Folders are used to group Media in a hierarchial manner .
5976	A Media is any uploaded file in QBank . A Media belongs to a Category and may have customer defined Properties .
5977	Moodboards are public usually temporary areas used to expose Media in QBank . Any Media may be added to a Moodboard which any outside user may then access until the Moodboard expiration date is due . Moodboards can be templated in different ways to fit many purposes .
5978	Object types define sets of propertySets that can be applied to any Object of the corresponding object type class such as a Media or a Folder .
5979	PropertySets groups Properties together .
5980	SocialMedia are places where Media from QBank may be published to to allow public access . Protocols define the way the publishing executes .
5981	Create a basepath for all api calls from the supplied URL .
5982	Gets the Guzzle client instance used for making calls .
5983	Adds the OAuth2 middleware to the handler stack .
5984	Changes the credentials used to authenticate with QBank .
5985	Sets the tokens used for authentication .
5986	Gets the token used for authentication .
5987	Sets the createdRange of the Search .
5988	Sets the updatedRange of the Search .
5989	Sets the properties of the Search .
5990	Adds an object of Properties of the Search .
5991	Sets the deploymentDateRange of the Search .
5992	Sets the sortFields of the Search .
5993	Adds an object of SortFields of the Search .
5994	Sets the subFolders of the FolderResponse .
5995	Adds an object of SubFolders of the FolderResponse .
5996	Sets the savedSearch of the FolderResponse .
5997	Sets the min of the DateTimeRange .
5998	Sets the max of the DateTimeRange .
5999	Sets the protocol of the DeploymentSite .
6000	Sets the imagetemplates of the DeploymentSite .
6001	Adds an object of Imagetemplates of the DeploymentSite .
6002	Sets the videotemplates of the DeploymentSite .
6003	Adds an object of Videotemplates of the DeploymentSite .
6004	Sets the categories of the DeploymentSite .
6005	Adds an object of Categories of the DeploymentSite .
6006	Returns the Unicode value of the character .
6007	Returns the Char based on a given hex value .
6008	Sends a valid file transfer key to the server to initialize the file transfer .
6009	Sets the deleted of the MediaUsageResponse .
6010	Sets the dateRange of the SearchSort .
6011	Sets the replies of the CommentResponse .
6012	Adds an object of Replies of the CommentResponse .
6013	Lists all Protocols .
6014	Fetches a specific Protocol .
6015	Fetches a specific DeploymentSite .
6016	Create a DeploymentSite .
6017	Update a DeploymentSite .
6018	Deploy Media to a DeploymentSite .
6019	Delete a DeploymentSite .
6020	Undeploy Media from a DeploymentSite .
6021	Method to Set Api Key
6022	Call MailChimp API
6023	Request using curl extension
6024	Sets the metadata of the MediaResponse .
6025	Adds an object of Metadata of the MediaResponse .
6026	Sets the mimetype of the MediaResponse .
6027	Sets the uploaded of the MediaResponse .
6028	Sets the deployedFiles of the MediaResponse .
6029	Adds an object of DeployedFiles of the MediaResponse .
6030	Sets the childMedias of the MediaResponse .
6031	Adds an object of ChildMedias of the MediaResponse .
6032	Gets a DeployedFile .
6033	Gets MetaData .
6034	Sets the mimeType of the ImageTemplate .
6035	Sets the commands of the ImageTemplate .
6036	Adds an object of Commands of the ImageTemplate .
6037	Initializes the widget
6038	Loads the transport object object used for the connection adapter and passes a given set of options .
6039	Track a Media custom event .
6040	Track a Media download .
6041	Track a Search .
6042	Creates a sessionId .
6043	Register a usage of a Media .
6044	Track a Media view .
6045	Renders menu items .
6046	Registers a specific Bootstrap plugin and the related events
6047	Lists all Object Types .
6048	Fetches a specific ObjectType .
6049	Sets the properties of the PropertySet .
6050	Adds an object of Properties of the PropertySet .
6051	Lists all Folders .
6052	Fetches a specific Folder .
6053	Lists all parent Folders until the absolute root .
6054	Create a Folder .
6055	Add Media to Folder .
6056	Update a Folder . Move a folder by updating the parent folder id .
6057	Remove Media from Folder .
6058	Delete a Folder .
6059	Fetches a specific Media .
6060	Gets the raw file data of a Media .
6061	Fetches all DeploymentSites a Media is deployed to .
6062	Downloads a specific Media .
6063	Fetches all Folders a Media resides in .
6064	Fetches all Moodboards a Media is a member of .
6065	Fetches all links to SocialMedia that a Media has .
6066	Fetches all SocialMedia sites a Media is published to .
6067	Fetches all External Usages for a Media .
6068	Fetches the version list of a media .
6069	Fetches eventual comments made on this media .
6070	Downloads an archive of several Media .
6071	Upload a new media to QBank .
6072	Update a specific Media .
6073	Groups one main Media with one or more child Media .
6074	Restore a deleted Media .
6075	Change status of a Media .
6076	Upload a new preview for a media .
6077	Upload a new version of a media .
6078	Post a comment on a media .
6079	Combines slides .
6080	Update some properties for a Media .
6081	Delete a Media .
6082	Delete a comment .
6083	Upload a new Media to QBank .
6084	Upload a new version of an existing Media in QBank .
6085	Fetches a specific Moodboard .
6086	Lists all Moodboard templates .
6087	Fetches a specific Moodboard template .
6088	Create a moodboard .
6089	Update a moodboard .
6090	Add Media to a Moodboard .
6091	Delete a Moodboard .
6092	Remove Media from a Moodboard .
6093	Returns a section of the string .
6094	Returns TRUE if the string is UTF - 8 encoded . This method searches for non - ascii multibyte sequences in the UTF - 8 range .
6095	Adds a set of specified permissions to the client . Multiple permissions can be added by providing the three parameters of each permission .
6096	Returns all server and channel groups the client is currently residing in .
6097	Shorthand for sending a GET request to the API .
6098	Shorthand for sending a POST request to the API .
6099	Shorthand for sending a PUT request to the API .
6100	Shorthand for sending a DELETE request to the API .
6101	Lists all PropertySets .
6102	Lists all PropertyTypes in QBank .
6103	Sends a prepared command to the server and returns the result .
6104	Waits for the server to send a notification message and returns the result .
6105	Returns the Host object of the current connection .
6106	Generate Grid Class for Div element
6107	Returns a list of permissions defined for a client in the channel .
6108	Removes a set of specified permissions from a client in the channel . Multiple permissions can be removed at once .
6109	Adds a set of specified permissions to the channel . Multiple permissions can be added by providing the two parameters of each permission .
6110	Returns a list of files and directories stored in the channels file repository .
6111	Deletes one or more files stored in the channels file repository .
6112	Creates new directory in a channels file repository .
6113	Sends a plugin command to all clients in the channel .
6114	Returns the servers version information including platform and build number .
6115	Returns the port of a virtual server matching the given ID .
6116	Returns the first Server object matching the given name .
6117	Returns the first Server object matching the given unique identifier .
6118	Creates a new virtual server using given properties and returns an assoc array containing the new ID and initial admin token .
6119	Deletes the virtual server specified by ID .
6120	Starts the virtual server specified by ID .
6121	Returns the ID of the permission matching the given name .
6122	Returns the name of the permission matching the given ID .
6123	Authenticates with the TeamSpeak 3 Server instance using given ServerQuery login credentials .
6124	Deselects the active virtual server and logs out from the server instance .
6125	Sets the roles of the Group .
6126	Adds an object of Roles of the Group .
6127	Sets the expireDate of the Moodboard .
6128	Returns a string for the current corpus element which can be used as a HTML class property . If the current node is a channel spacer the class string will contain additional class names to allow further customization of the content via CSS .
6129	Returns the HTML img tags which can be used to display the various icons for a TeamSpeak_Node_Abstract object .
6130	Returns a string for the current corpus element which contains the display name for the current TeamSpeak_Node_Abstract object .
6131	Returns the HTML img tags which can be used to display the various icons for a TeamSpeak_Node_Server object .
6132	Returns a HTML img tag which can be used to display the country flag for a TeamSpeak_Node_Client object .
6133	Returns the code to display a custom HTML img tag .
6134	Sets the metadata of the DeploymentFile .
6135	Search for Media .
6136	Search for Folder .
6137	Get total hit count for media search .
6138	Parses the scheme - specific portion of the URI and place its parts into instance variables .
6139	Returns TRUE if a given URI is valid .
6140	Returns TRUE if the username is valid .
6141	Returns TRUE if the password is valid .
6142	Returns TRUE if the path is valid .
6143	Returns TRUE if the query string is valid .
6144	Returns TRUE if the URI has a query variable .
6145	Returns TRUE if the fragment string is valid .
6146	Set status code to be sent as part of headers .
6147	Send headers .
6148	Set the body .
6149	Send JSON response with an optional statuscode .
6150	Set body with JSON data .
6151	Redirect to another page .
6152	Runs the widget . This registers the necessary javascript code and renders the form close tag .
6153	Sets the propertyType of the PropertyResponse .
6154	Sets the value of the Property .
6155	Converts a value to the corresponding PHP type .
6156	Redirect to another page and creating an url from the argument .
6157	Redirect to current page .
6158	Renders a single breadcrumb item .
6159	Creates a URL for the given action and model . This method is called for each button and each row .
6160	Sets the properties of the FolderSearch .
6161	Adds an object of Properties of the FolderSearch .
6162	Starts the timer .
6163	Returns the amount of memory allocated to PHP in bytes .
6164	Sets the data of the MetaData .
6165	Sets the options of the MoodboardTemplateResponse .
6166	Writes progress to the output buffer .
6167	Writes the test performance metric formatted as the number of milliseconds elapsed .
6168	Writes the specified assertion failure s message to the output buffer .
6169	Writes the specified exception s message to the output buffer .
6170	Invoked when an exception is thrown in the test runner .
6171	Invoked when an assertion fails in the test runner .
6172	Enregistre la configuration .
6173	Utilisation du driver pour lire un fichier .
6174	Utilisation du driver pour supprimer un fichier .
6175	Enregistre une jointure droite .
6176	Revoie les instances uniques d un tableau multidimensionnel .
6177	Supprime des lignes de la table en fonction des conditions et sauvegarde la table .
6178	Fonction de trie de orderByExecute
6179	Charge les colonnes de la table courante et des tables de jointure .
6180	Writes the record down to the log of the implementing handler
6181	Returns the Bugsnag severiry from a monolog error code .
6182	Address redirection .
6183	Add a message to the queue .
6184	Display the queued messages .
6185	Clear messages from the session data .
6186	Transfers the code to the Smarty template .
6187	Defines template variables .
6188	Generates the output of the templates with parsing all the template variables .
6189	Display JSONP .
6190	Display JSON .
6191	Display Controller result
6192	Load router .
6193	Load model .
6194	Load controller .
6195	Find all file in controller dir .
6196	Check current active page
6197	Parse url params into a request
6198	Parse request .
6199	Prepares the regexp
6200	Return Current path
6201	Set up new route .
6202	Standard method for returning result from the method .
6203	Get the current handler .
6204	Catches standard PHP style errors
6205	Catches uncaught exceptions .
6206	Handles the PHP shutdown event .
6207	Set the given value to the given key .
6208	Load the given data array to the record .
6209	Notify on an error message .
6210	Notify on an exception
6211	Clean the backtrace of unneeded junk .
6212	Add a Airbrake var block to an XML node .
6213	Applies the current filters to the passed in array unsetting any elements which match the filter . Note that this works via reference and will mutate its argument instead of returning a copy .
6214	Initialize the data source .
6215	Get the combined server parameters . Note that these parameters will be filtered according to a black list of key names to ignore . If you wish to get the unfiltered results you should use the getUnfilteredParameters method instead .
6216	Returns an URL friendly version of a realm name .
6217	Returns a character s unique ID from a thumbnail URL .
6218	Start of the current period of the usage limit as unix timestamp .
6219	End of the current period of the usage limit as unix timestamp .
6220	Authorize an application for app id auth mode
6221	Curl library which is just a thin wrapper around php s curl functions .
6222	Get elevation for specified location .
6223	Returns data for CMS menu presence .
6224	removes directory from disk
6225	changes current directory
6226	Checks that service_code is numeric and that expected specifiers exist with certain service_code values .
6227	remove file from filesystem on object destruction = > leaving scope or removing object reference
6228	The remaining 4 bytes in the header are the offset to the IFD .
6229	Returns available permissions as defined by loaded modules .
6230	Returns available permissions for a single module .
6231	Returns the permissions actually in use by users and roles .
6232	Sets a pickup point for the shipment .
6233	Escapes input text
6234	check current access - mode and set new modes
6235	create new dir if not exists
6236	list of possible paths = > !not components of a single path!
6237	Returns the Width options .
6238	write content to storage
6239	fetch file - extension for given mimetype
6240	fetch mimetype for given file - extension
6241	parse each path - component and extract path - info
6242	reset internal loaded - state resulting in reloading all paths on next access
6243	check if path is in open_basedir restrictions
6244	Returns an index for the group for each permission .
6245	low - level storage iterator
6246	list only files
6247	list only directories
6248	Returns a list of all permissions known by the CMS .
6249	Prepares CMS data for presentation in the menu views .
6250	Removes any empty group children from a tree structure returning the number of non - group entries .
6251	Creates an AclPresence instance that represents a group .
6252	Creates an AclPresence group instance for ungrouped permissions .
6253	Normalizes menu presence data to an array of AclPresence instances . Lists of permission slugs will remain unchanged .
6254	Fetches the shipping labels in one pdf for a given tracking_codes and saves it as base64 encoded string inside XML .
6255	Search pickup points .
6256	Searches pickup points with a text query . For best results the query should contain a full address
6257	Authorize a user based on his roles
6258	Checks if a role is granted access to a controller and action
6259	Checks if a role is allowed .
6260	Gets the controller and action prefixes the controller with the plugin if there is one
6261	Can be overridden if inherited with a method to fetch this from anywhere a database for example .
6262	Can be overriden if inherited with a method to fetch this from anywhere a database for exaple
6263	Fetch next key
6264	Allow to apply callable when the promise resolve .
6265	Resolve this promise .
6266	Reject this promise .
6267	Open a writer and return a subclass instance . The user must have write access to the directory for temporary file creation .
6268	Determines whether or not an email address or domain is part of a higher - education institution .
6269	Retrieves the institution name matching a domain .
6270	Helper to determine if a file exists for an academic domain .
6271	Clean up the temp file and throw an exception
6272	Open a file and return a subclass instance
6273	Returns true if the native extension is available
6274	Get the value of a key .
6275	Read data from the CDB file .
6276	Unpack an unsigned integer and throw an exception if it needs more than 31 bits .
6277	Unpack a 32 - bit integer .
6278	Search the CDB file for a key .
6279	Get the first key from the CDB file and reset the key iterator .
6280	Get the next key from the CDB file .
6281	Build a React Dns Resolver .
6282	Build a React Http Client .
6283	Builds a React Http client v0 . 4 style .
6284	Builds a React Http client v0 . 5 style .
6285	Shift a signed integer right as if it were unsigned
6286	The CDB hash function .
6287	Build a React request from the PSR7 RequestInterface .
6288	Transform a React Response to a valid PSR7 ResponseInterface instance .
6289	Set current active theme
6290	Returns theme information .
6291	Load a theme
6292	Find a theme from all scanned themes
6293	Scan for all available themes
6294	Find theme views path
6295	Parse theme json file
6296	Migration of old config type = > location class = > type definition .
6297	Register the navigation class .
6298	Add an item to the main navigation array .
6299	Add an item to the bar navigation array .
6300	Get the navigation bar html .
6301	Get the main navigation array .
6302	Get the bar navigation array .
6303	Check if each item is active .
6304	Convert slugs to urls .
6305	Returns distance between points in meters
6306	Registers service providers .
6307	Add a success flash message to session .
6308	Set an attribute . If it exists it will be replaced
6309	Drop a database object .
6310	Get a command to execute .
6311	Get table information .
6312	Get tables information .
6313	Load contsraints to table .
6314	Sets foreign key reference columns .
6315	Sets an update action .
6316	Sets a delete action .
6317	Execute sql query .
6318	Execute sql and expect return a data .
6319	Execute query .
6320	Get column of table .
6321	Add contraint to table .
6322	Parse configuration .
6323	Get an attribute
6324	Start caching BEFORE script
6325	Run stop AFTER script
6326	Gets a class name without a namespace .
6327	Gets constraints query .
6328	Gets columns query .
6329	Gets comments for columns .
6330	Register custom effects or override default effects
6331	Register custom postprocessor or override default postprocessors
6332	Respond to Ecopayz confirming or rejecting the payment .
6333	Validate Ecopayz XML message
6334	Attach handlers .
6335	Create a flash message .
6336	Flash an overlay modal .
6337	Parse XML document using provided SAX handler .
6338	Default SAX parser factory .
6339	Convert XML document to stream source .
6340	Add a site search form to all controllers that links to the results controller .
6341	Must be called after your class definition!
6342	You can obtain the appropriate instance by their name .
6343	The type and the name equality is being checked . Although the reference should be the same it can differ if one of the two objects have been deserialized .
6344	Returns an iterator for the given traversable .
6345	Returns all instances of class type in unfiltered . The returned iterator has elements whose class is type or a subclass of type .
6346	Combines two iterators into a single iterator . The returned iterator iterates across the elements in a followed by the elements in b . The source iterators are not polled until necessary .
6347	Returns true if every element returned by iterator satisfies the given predicate . If iterator is empty true is returned .
6348	Returns the index in iterator of the first element that satisfies the provided predicate or - 1 if the Iterator has no such elements .
6349	Creates an iterator returning the first limitSize elements of the given iterator . If the original iterator does not contain that many elements the returned iterator will have the same behavior as the original iterator .
6350	Advances iterator position times returning the element at the positionth position .
6351	Returns the number of elements in iterator .
6352	Divides an iterator into unmodifiable sublists of the given size padding the final iterator with null values if necessary .
6353	Returns an Optional containing the first element in iterator that satisfies the given predicate if such an element exists . If no such element is found an empty Optional will be returned from this method .
6354	Set a fake time value or clock callback .
6355	Set the timestamp to the specified time or the current time if unspecified .
6356	Convert a timestamp string to a given format .
6357	Get the timestamp represented by this object in a certain form .
6358	Set the timezone of this timestamp to the specified timezone .
6359	Limits the size of the result .
6360	Filters the result list with the given predicate .
6361	Creates a DateInterval with the given duration and this unit .
6362	Convert the given time duration in the given unit to this unit .
6363	Creates and starts a new entry .
6364	Returns an ordering that treats null as less than all other values and uses this to compare non - null values .
6365	Returns a new ordering which orders elements by first applying a function to them then comparing those results using this .
6366	Returns an ordering which first uses the ordering this but which in the event of a tie then delegates to secondaryComparator .
6367	Returns the least of the specified values according to this ordering .
6368	Decode a full taf string into a complete taf object
6369	Returns the composition of two functions .
6370	Returns a function which performs a map lookup .
6371	Add an object to the Searchable module this object will automatically be added to the results page dashboard
6372	Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable followed by those of other .
6373	Returns the elements from this fluent iterable that are instances of class className .
6374	Applies function to each element of this fluent iterable and returns a fluent iterable with the concatenated combination of results . Transformer returns a Traversable of results .
6375	Returns an Optional containing the first element in this fluent iterable .
6376	Sorts the elements in the order specified by comparator .
6377	Converts this object to an array . This means it will iterate over this object . It should be used only if it is reasonable .
6378	Reads an object from the store with the given type and query .
6379	Reads an array of objects from the store with the given type and query .
6380	Reads a quiz attempt from the store with the given id .
6381	Reads question attempts from the store with the given quiz attempt id .
6382	Reads questions from the store with the given quiz id .
6383	Reads a feedback attempt from the store with the given id .
6384	Reads questions from the store with the given feedback id .
6385	Reads a course from the store with the given id .
6386	Reads a user from the store with the given id .
6387	Reads a discussion from the store with the given id .
6388	Reads the Moodle site
6389	Reads a face to face session
6390	Reads face to face session signups
6391	Reads Scorm tracking data
6392	Returns a comparator that imposes the reverse ordering of the specified comparator .
6393	Executes the given function within a try block catches all exception types given and runs the finally block .
6394	Executes the try block provided before and the given function is executed within a finally block .
6395	Initializes this component by ensuring the existence of the settings path .
6396	It wraps any exceptions coming from inner Runnable object . After the execution the lock become unlocked!
6397	Add the evolution to the decodedTaf s entity
6398	Instantiate a new entity when an evolution needs one that s not present in decodedTaf already
6399	Creates new events .
6400	Do not call from your code workaround to initialize static variable .
6401	Get a file name depending on current class .
6402	Converts all errors to the proper exception .
6403	Check if the forecast period is valid
6404	Propagates throwable exactly as - is if and only if it is an instance of exceptionClass .
6405	Extract the corresponding chunk from the remaining taf
6406	Forcibly caches data of this file in OPCache or APC .
6407	Returns the elements of unfiltered that satisfy a predicate .
6408	Returns all instances of class className in unfiltered .
6409	Combines two iterables into a single iterable . The returned iterable has an iterator that traverses the elements in a followed by the elements in b . The source iterators are not polled until necessary .
6410	Combines multiple iterables into a single iterable . The returned iterable has an iterator that traverses the elements of each iterable in inputs . The input iterators are not polled until necessary .
6411	Returns true if any element in iterable satisfies the predicate .
6412	Returns true if every element in iterable satisfies the predicate . If iterable is empty true is returned .
6413	Returns an iterable that applies function to each element of fromIterable .
6414	Creates an iterable with the first limitSize elements of the given iterable . If the original iterable does not contain that many elements the returned iterable will have the same behavior as the original iterable .
6415	Returns the element at the specified position in an iterable .
6416	Returns a view of iterable that skips its first numberToSkip elements . If iterable contains fewer than numberToSkip elements the returned iterable skips all of its elements .
6417	Returns the number of elements in iterable .
6418	Determines if the given iterable contains no elements .
6419	Starts the stopwatch .
6420	Stops the stopwatch . Future reads will return the fixed duration that had elapsed up to this point .
6421	Returns true if and only if all given predicates return true .
6422	If content controller exists return it s menu function
6423	Checks if an integration is configured . All options are provided . This doesn t check if options are correct
6424	Returns Google API object inited with API settings
6425	Returns google login start auth process
6426	Completes social login . Is caled after redirect from google auth page
6427	Returns short google profile after succes login
6428	Returns Faceboo API object inited with API settings
6429	Returns facebook login start auth process
6430	Completes social login . Is caled after redirect from facebook auth page
6431	Returns short facebook profile after succes login
6432	Remove display field
6433	Returns list of properties to serialise .
6434	Returns Xing login start auth process
6435	Completes social login . Is caled after redirect from Xing auth page
6436	Returns short Xing profile after succes login
6437	Returns twitter login start auth process
6438	Completes social login . Is caled after redirect from twitter auth page
6439	Returns short twitter profile after succes login
6440	Returns the URL assembled from the given arguments .
6441	returns social login object with a name
6442	Get all resources
6443	Makes an HTTP request and return the page HTML response
6444	Returns LinkedIn API object inited with API settings
6445	Returns linkedin login start auth process
6446	Completes social login . Is caled after redirect from linkedin auth page
6447	Returns short linkedin profile after succes login
6448	Gets the best language match between a list of supported languages and Accept - Language headers This uses lookup matching per RFC - 4647 section 3 . 4
6449	Compares two languages and returns which of them is lower than the other
6450	Gets the language values from a list of headers
6451	Cookies are set when at least one page of the site has been visited . This action done in beforeScenario hook of TqContext .
6452	Find all field labels by text .
6453	Creates a negotiated response body from a request
6454	Creates a 406 Not Acceptable exception
6455	Check value in inputs and text areas .
6456	Ensure option is selected .
6457	Sets up the response to redirect to a particular URI
6458	Writes JSON to the response
6459	Use the current user data for filling fields .
6460	This method was defined and used instead of assertSelectRadioById because the field label can contain too long value and better to use another selector instead of label .
6461	Check that an image was uploaded and can be viewed on the page .
6462	Headers are allowed to have multiple values so we must add support for that
6463	Tries to get the first value of a header
6464	Gets whether or not the headers have a JSON content type
6465	Gets whether or not the message is a multipart message
6466	Creates the default boundary in case one wasn t specified
6467	Creates a stream from a string
6468	Parses the Accept - Charset header
6469	Parses the Accept header
6470	Parses the Accept - Language header
6471	Parses the Content - Type header
6472	Gets the best character encoding match for the input media type formatter
6473	Compares two charsets and returns which of them is lower than the other
6474	Ranks the charset headers by quality and then by specificity
6475	Parses a request body as form input
6476	Attempts to read the request body as JSON
6477	Reads the body as a multipart body
6478	Checks whether or not an encoding is supported
6479	Gets the client IP address from the request
6480	Gets the set - cookie header value from a cookie
6481	Creates the default content negotiation result in case no Accept header was specified
6482	Check that the page have no error messages and fields - error classes .
6483	Filters the URI path and percent - encodes reserved characters
6484	Filters the URI query string and percent - encodes reserved characters
6485	Gets whether or not a standard port is being used for the scheme
6486	Creates a request message from PHP superglobals
6487	Creates headers from PHP globals
6488	Gets the client IP address
6489	Adds a header value
6490	Get selector by name .
6491	Get the editor instance for use in Javascript .
6492	Gets the best media type formatter match
6493	Compares two media types and returns which of them is lower than the other
6494	Ranks the media type headers by quality and then by specificity
6495	This step should be used instead of I am at if page should be checked for accessibility before visiting .
6496	Get identifier of current entity .
6497	Supports switching between the two windows only .
6498	Open the page with specified resolution .
6499	IMPORTANT! The BeforeStep hook should not be tagged because steps has no tags!
6500	IMPORTANT! The AfterStep hook should not be tagged because steps has no tags!
6501	Gets the request target
6502	Parses a URI s query string into a collection
6503	Publishes a message to the backend .
6504	Serializes the parameters of a job .
6505	Deserializes the parameters of a job .
6506	Serializes the return value of a job .
6507	Deserializes the return of a job .
6508	Sets status of the job to cancelled if process controller indicates to exit .
6509	Returns the handlers created by all registered factories .
6510	Sets formatter and processors .
6511	Appends an array element to the parameters of a job that provides information about the job type .
6512	Updates a job .
6513	Copies properties of a job to another job
6514	Invokes the job .
6515	Dispatches messages to the job manager .
6516	Register ORM service .
6517	Sets the type of a parameter .
6518	Creates a new microtime from a \ DateTime object using it s timestamp and microseconds .
6519	Recursively unfreezes this object and any of its children . Used internally during the clone process .
6520	Populates the default on a single field if it s not already set and the default generated is not a null value or empty array .
6521	Boot the application services .
6522	Returns true if this field is likely compatible with the provided field during a mergeFrom operation .
6523	Returns true if the provided field can be used as an override to this field .
6524	Convenience method to return the name of the method that should exist to handle this message .
6525	Convenience method that creates a message instance with this schema .
6526	Returns the fully qualified php class name to be used for the provided schema id .
6527	Returns the fully qualified php class name to be used for the provided curie .
6528	Registers an array of id = > className values to the resolver .
6529	Return the one schema expected to be using the provided mixin .
6530	Returns an array of Schemas using the provided mixin .
6531	Modify the analyzer for a property prior to adding it to the document mapping . This is only applied to text types .
6532	Build up params .
6533	Get connection factory
6534	Runs the action
6535	Hydrate this model with information coming from the mapping manager
6536	When an update come to the iterator retrieve the original dataset only once
6537	Registers this asset bundle with a view .
6538	Initializes the widget . This renders the form open tag .
6539	Transforms a yucca iterator into an array .
6540	Load datas for specified propertyName and identifier
6541	Fetch one entry from database
6542	retrieve the current Model
6543	Implements Iterator interface
6544	Not applicable here but for abstract purpose
6545	Creates a new content object .
6546	Returns the element specified by its name .
6547	Cleans up and saves the container .
6548	Return the current element .
6549	Adds a row to the content object .
6550	Return the current row .
6551	const MAX = 100 ;
6552	Persist the UUID of the actual import process to the PID file .
6553	Remove s the UUID of the actual import process from the PID file .
6554	Remove s the passed line from the file with the passed name .
6555	Stop processing the operation .
6556	Simple method that writes the passed method the the console and the system logger if configured and a log level has been passed .
6557	Map s the passed log level to a valid symfony console style .
6558	Slug a field passed in the default config with its replacement .
6559	Function get_number_type Returns a PhoneNumberType constant for the PhoneNumber object you pass .
6560	Split a path into path components .
6561	Return a relative filepath to path either from the current directory or from an optional start directory . Both paths must be absolute .
6562	Join path components .
6563	Function Get Data VN Carrier
6564	Load the given class file .
6565	Register the given class loader on the auto - loader stack .
6566	Runs the request binary with given data and returns the generated form .
6567	Function getLink Get Link include Sms to Sending use Content place href =
6568	Create the migration
6569	Unsets all session data .
6570	Get log message
6571	Returns the local file path for a given id .
6572	Register the artisan commands .
6573	Path normalizer part examinator .
6574	Verifies if a session is valid
6575	Returns the session cookie .
6576	Stops the session . All session data are destroyed in memory and on the storage unit through the handler .
6577	Returns a list of countries
6578	Parse an URL into replacement parts and create a new class instance using them
6579	Create a new instance of the class by replacing parts in the current instance
6580	Construct coordinate by the vector length and direction .
6581	Translate coordinate in space
6582	Returns the session object attached to a request .
6583	Create new geometric sequence ...
6584	Calculate sum of N consequent characters .
6585	The curl wrapper itself .
6586	cURL request wrapper method .
6587	Setting cURL options .
6588	HTTP GET - like method caller
6589	HTTP POST - like method caller
6590	HTTP PUT - like method caller
6591	abstracted single asset
6592	Check for errors in busters . json
6593	Replace the tags in the template with the actual values
6594	Breaks the doc block of the given method into its component parts
6595	Get a cleaned up version of the method comment .
6596	Gets the summary of a method .
6597	Gets a methods description .
6598	Gets the parameters of a method .
6599	Gets the return types from a method or function s comment .
6600	Helper function for unlink files
6601	Builds request URL
6602	Creates and returns an OAuthToken instance setting the token key and secret .
6603	Creates and returns an OAuthToken instance parsing values from the Twitter API Response .
6604	Parse an access token response and assign credential values .
6605	Validates the received data for a request token .
6606	Validates the received data for an access token .
6607	Get all model rows
6608	Get all model rows with the
6609	Returns the Model Id based on the field value
6610	Returns model rows created between a date range
6611	Returns the first error in the model
6612	Fetch dropdown data for model
6613	Returns settings values when no setting is specified all the settings are returned otherwise it returns the specified settings or null .
6614	Determines whether the assigned settings for a social network are valid .
6615	Check for a particular endpoint .
6616	Call an endpoint and get the result .
6617	Creates an array of parameters with which to call a method .
6618	Construct the method name for an endpoint .
6619	Check if the named controller exists as a child of this controller .
6620	Get the child controller object .
6621	Add submenu for this page .
6622	Load styles .
6623	Parses an access token response .
6624	Call middleware in order and then call the specified Controller using a modified PSR15 Middleware pattern
6625	Put the data in the cache and return the generated key .
6626	Look at a request and work out what to do next .
6627	Gets the data from the response
6628	Gets the value of key if key exists default value otherwise
6629	Redirects to the corresponding authentication URL .
6630	Handles the authentication callback returned from the provider .
6631	Returns the authentication URL to which we should be redirecting to .
6632	Requests an access token from Facebook according to the returned code .
6633	Sends a request for a Facebook profile using the acquired access token .
6634	Parses a response coming from Facebook containing a profile .
6635	Bootstrap for wavecms
6636	Init wavecms languages
6637	Init required params
6638	Init class map and dependency injection container
6639	Init left navigation
6640	Get container route for class name
6641	Init query and modelClass
6642	Encodes an id into an hash
6643	Decodes a hash into an id
6644	Returns the styled label for the status
6645	Returns the international format of the given number
6646	Authenticate with Twitter .
6647	Handle the callback from a previous authentication request .
6648	Create database tables .
6649	Upload files on save and update event
6650	Helper function used for unlink files
6651	Adds the extra data into the passed array .
6652	Adds more extra data into the processor .
6653	Removes the passed extra data keys .
6654	Requests Twitter for a request token .
6655	Transforms a parameters array into a series of strings compatible to be embedded in a request header .
6656	Process the request get a response and return it .
6657	Returns a standardised 500 error .
6658	Return data to be serialised into Json .
6659	List the endpoints the controller provides .
6660	Lists child controllers the controller provides .
6661	Gets a callable method from the original controller .
6662	Performs GET HTTP request
6663	Performs POST HTTP request
6664	Instantiates a profile by parsing it and mapping it to commonly used values across the different providers .
6665	Parse a Facebook profile .
6666	Set the data that is to be returned .
6667	Prepare the response .
6668	Send the response .
6669	Set movie params to use on Ajax .
6670	Calculate rating .
6671	Restart rating when added or edited post if not done previously .
6672	Restart all ratings .
6673	Update rating if the movie editing page is updated .
6674	Restart when added a movie .
6675	Add meta boxes .
6676	Renderizate post meta boxes .
6677	Gets the difference between two date periods
6678	Returns date range text
6679	Converts a datetime string from one format to another format
6680	Get s the datetime in the specified format
6681	Executed after action
6682	Set Headers to prevent Click - jacking and XSS
6683	Allow sending success response
6684	Allows sending error response
6685	Sends fail response
6686	show flash messages
6687	merge flash messages
6688	Checks if the current request is a POST and handles redirection
6689	Sets a session variable and redirects to the URL
6690	Handle access based on permissions
6691	Adds a route to the collection .
6692	Create a route group with a common prefix .
6693	Sort function user in sortNav
6694	Apply active attriute depends on route
6695	Apply visible attribute depends on permission or url
6696	Hide a method
6697	Is a method currently hidden .
6698	Compares one version to another .
6699	Sets the build version information .
6700	Sets the pre - release version information .
6701	Parses the version string replacing current any data .
6702	Checks the precedence of each data set .
6703	Get a signature for the request .
6704	Build the signature base url .
6705	Get the writer factory .
6706	Change array to string separate by ;
6707	Change string separated by ; to array
6708	Get the reader factory .
6709	Get parameters associated with this request .
6710	Parse headers .
6711	Turns a url string into an array of parameters .
6712	Tries to turn a string of data into an array .
6713	Look up the value of a requested parameter .
6714	Get the requested route .
6715	Get the format from the url .
6716	Breaks up the uri .
6717	Add a set of parameters to the Request .
6718	Add a parameter
6719	Handles authorize request response
6720	Authorizes and returns authorization code
6721	Handles token request response
6722	Fetches the access token using the authorization code
6723	Validates params for the authorization request
6724	Validates params for the token request
6725	Returns the access token
6726	Get movie votes .
6727	Set movie votes .
6728	Set total votes .
6729	Set movie rating .
6730	Add or update vote and associate to an IP address .
6731	Get publish posts .
6732	Process message that contains callback
6733	Execute a route
6734	Handle an exception during processing of route .
6735	Retrieve a middleware by name .
6736	Instantiates and returns a social provider instance .
6737	Module uninstallation hook . Executed when module is uninstalled .
6738	Run ajax when change the rating .
6739	Set database module options .
6740	Front initializer method .
6741	Forward the request to the target url and return the response .
6742	Stores the object in the request .
6743	Checks if the object is supported .
6744	Handle server request and return response .
6745	Apply response encoding
6746	Gets the catalogue by locale .
6747	Bootstrap an application .
6748	Handle the request and return a response .
6749	Iterates whether a collection or an array to the transform method .
6750	Gets the transformer class name
6751	Creates the transformer class name in base of the current class name .
6752	returns the middleware closure
6753	Install web server .
6754	Create folder if not exists .
6755	Make a copy of a file from a folder into a folder .
6756	Create app .
6757	Only supports class with the NestedPropertyDenormalizer annotation
6758	Find message .
6759	Inject tagged services into defined registry
6760	Cache key builder Override if you wish to change algorythm
6761	Find an element
6762	Expands nodes within this collection
6763	Append another collection
6764	Handles the sale insertion .
6765	Handles the sale update .
6766	Address change event handler .
6767	Handles the address change .
6768	Handles the content change .
6769	State change event handler .
6770	Handles the state change .
6771	Returns whether or not the discount adjustments should be updated .
6772	Returns whether the invoice address has changed .
6773	Returns whether or not the taxation adjustments should be updated .
6774	Returns whether the delivery country changed .
6775	Updates the key .
6776	Updates the customer information .
6777	Updates the vat data .
6778	Updates the vat display mode .
6779	Updates the sale exchange rate .
6780	Sets the sale s exchange rate .
6781	Sets the sale s locale .
6782	Define a form parameter option .
6783	Define a header parameter option .
6784	Build the query string .
6785	Build form data string .
6786	Build headers list .
6787	Fixes the default customer group .
6788	Returns the customer group from the event .
6789	Asserts that the given shipment is supported by this platform .
6790	Merges the fetched units with the cached units .
6791	Creates a notify .
6792	Builds the notify .
6793	Retrieve the sorting source column .
6794	Determine the amount of entries in the relation table for this attribute and the given value ids .
6795	Convert the value ids to a result array .
6796	Fetch the values with the provided ids and given language .
6797	Convert the database result to an result array .
6798	Installs the given countries and currencies by codes .
6799	Installs the countries .
6800	Installs the currencies .
6801	Installs the taxes for the given country codes .
6802	Installs the default tax groups .
6803	Installs the tax rules for the given country codes .
6804	Installs the default customer groups .
6805	Generates the entities .
6806	Creates a new formatter .
6807	Returns the formatter for the given context .
6808	Formats the given number for display .
6809	Formats the given currency number for display .
6810	Formats the given adjustments rates for display .
6811	Returns the date formatter .
6812	Returns the date time formatter .
6813	Returns the number formatter .
6814	Returns the currency formatter .
6815	Builds the orders export CSV file .
6816	Returns whether or not this adjustment is the same as the given one .
6817	Builds the adjustable s adjustments based on the given data and type .
6818	Writes the invoice s goods line .
6819	Writes the invoice s shipment line .
6820	Writes the invoice s taxes lines .
6821	Compare the amounts .
6822	Return the goods account number for the given tax rule and tax rate .
6823	Returns the shipment account number for the given tax rule .
6824	Returns the tax account number for the given tax rate .
6825	Returns the payment account number for the given payment method .
6826	Returns the unpaid account number for the given customer group .
6827	Returns whether the given action is valid .
6828	Returns the delivery address of the shipment s sale .
6829	Prioritize the stock assignment .
6830	Move the given assignment to the given unit for the given sold quantity .
6831	Synchronises with the supplier product .
6832	Returns the supplier order item from the event .
6833	Checks if the given user has a right
6834	Returns the find new by supplier query .
6835	Prevents some of the invoice line fields from changing .
6836	Returns whether the sale identity fields are valid .
6837	map an object that not instantiated
6838	map instantiated objects
6839	get an object
6840	get an instantiated object mapped
6841	get a cached object
6842	produce a concrete
6843	call a closure
6844	call a method in class
6845	Number of seconds in a minute incrementing by a step . Typically used as a shortcut for generating a list that can used in a form .
6846	Number of hours in a day . Typically used as a shortcut for generating a list that can be used in a form .
6847	Adjusts a non - 24 - hour number into a 24 - hour number .
6848	Number of days in a given month and year . Typically used as a shortcut for generating a list that can be used in a form .
6849	Number of months in a year . Typically used as a shortcut for generating a list that can be used in a form .
6850	Returns an array of years between a starting and ending year . By default the the current year - 5 and current year + 5 will be used . Typically used as a shortcut for generating a list that can be used in a form .
6851	Returns the difference between a time and now in a fuzzy way . Displaying a fuzzy time instead of a date is usually faster to read and understand .
6852	Returns whether or not the given trigger is valid .
6853	Payment status event handler .
6854	Find the given payment s security tokens .
6855	Transforms the given cart or quote to an order .
6856	Finds the date of the time of the March Equinox for a given year
6857	Finds the date of the time of the September Equinox for a given year
6858	Finds the date of the time of the June Solstice for a given year
6859	Finds the date of the time of the December Solstice for a given year
6860	Evaluates a polynomial with coefficients c at x of which x is the constant term by means of the Horner method
6861	Default value converter by value type
6862	Register the factory class .
6863	Register the manager class .
6864	Updates the invoice totals .
6865	Updates the customer balance
6866	Prevents some of the invoice s fields to change .
6867	Returns the invoice s sale .
6868	Builds invoice payments for the given sale .
6869	Builds the sale invoices list .
6870	Builds the sale payments list .
6871	Initializes the shipment s method .
6872	Initializes the shipment s relay point .
6873	Builds the shipment item by pre populating quantity .
6874	Finds or create the shipment item .
6875	Perform a generic query statement
6876	Finds revenues .
6877	Builds the revenue data .
6878	Returns the revenues query .
6879	Finish building config . This may trigger some actions that should be applied after all configurations were provided
6880	Transforms an array into a shipment address .
6881	Transforms a shipment address in to an array .
6882	Locale - aware number and monetary formatting .
6883	Returns all the types .
6884	Returns whether the given type is valid or not .
6885	Returns a list of addresses associated with a postcode .
6886	Returns metadata associated with a postcode .
6887	Performs a GET against the API .
6888	Called with a response from the API when the response code was unsuccessful . i . e . not 20X .
6889	Returns the item s stock assignments or null if not supported .
6890	Removes a single assignment .
6891	Creates the sale item assignments for the given quantity .
6892	Resolves the assignments update s delta quantity .
6893	Sorts assignments .
6894	Compares the units regarding to their price .
6895	Compares the units regarding to their estimated date of arrival .
6896	Set a variable in the session array .
6897	Set a variable by reference .
6898	Removes a variable in the session array .
6899	Generates a new session id and returns it .
6900	Sets the last_active timestamp and saves the session .
6901	Completely destroy the current session .
6902	Generates the full URL for a certain page .
6903	Renders the pagination links .
6904	when use runWild any handler return anything will break the loop and return
6905	Removes the recipient .
6906	Adds the extra recipient .
6907	Removes the extra recipient .
6908	Adds the copy .
6909	Removes the copy .
6910	Adds the extra copy .
6911	Removes the extra copy .
6912	Adds the invoice .
6913	Adds the shipment .
6914	Removes the shipment .
6915	Adds the attachment .
6916	Removes the attachment .
6917	Returns whether there is no defined message .
6918	Returns whether the adjustable has adjustments or not optionally filtered by type .
6919	Returns the adjustments optionally filtered by type .
6920	Validates the identity for the given context .
6921	Returns the taxes for the given tax group country and business flag .
6922	Caches the taxes for the given tax group country and business flag .
6923	Builds the cache key .
6924	Returns the find one by sale query .
6925	Returns the find one price by country method and weight query .
6926	Returns whether the state of the given resource changed to the given state .
6927	Creates build and enqueue a notify instance .
6928	Persists the invoice .
6929	Checks that the given invoice is correctly configured for shipment synchronization .
6930	Removes the invoice unexpected lines regarding to his associated shipment .
6931	Creates invoice expected lines regarding to his associated shipment .
6932	Returns whether the shipment amount is already invoiced .
6933	Transforms the given source sale to the given target sale .
6934	Returns the proper operator for the given sale .
6935	Colorizes a message for console output .
6936	Finds the suck units by subject and states .
6937	Returns whether the unit exists into the given list for the given object identifier .
6938	Finds the unit into the given list for the given object identifier .
6939	Pushes the unit to the given list for the given object identifier .
6940	Pops the unit to the given list for the given object identifier .
6941	Returns the sale item purchase cost .
6942	Dispatches the subject s stock unit change event .
6943	Returns the localized day of week .
6944	Used to register DB Table or DB TableStructure singleton instances
6945	Payment watcher .
6946	Returns the regular due query .
6947	Returns the outstanding expired due query builder .
6948	Set the due clause s parameters .
6949	Returns the find one by country and customer query .
6950	Returns the find one by country and business query .
6951	Returns the base query builder .
6952	Returns whether the given sale item is covered by this shipment .
6953	Resolves the price form the given grid entry and total weight .
6954	Returns the price grid for the given country .
6955	Returns the tax rates for the given method .
6956	Calculates the supplier order base .
6957	Returns a chunk of rendered TOC .
6958	Redirect using document . location instead of JS router
6959	Updates the cart expiration date .
6960	Creates a new Epoch instance from an AstroDate instance
6961	Creates a new epoch from a Julian year number
6962	Creates a new epoch from a Besselian year number
6963	Converts this instance to an AstroDate instance
6964	Finds the year of this epoch
6965	Returns whether or not the identity is empty .
6966	Clears the identity .
6967	Calculates the good lines .
6968	Calculate the good line .
6969	Calculate the discount line .
6970	Calculate the shipment line .
6971	Synchronizes the line amounts with the given result .
6972	Builds the entity
6973	Builds the field value .
6974	Builds the association value .
6975	Throws an illegal operation exception if the adjustment is immutable .
6976	Dispatches the sale content change event .
6977	Creates and registers a gateway .
6978	Normalizes the attachment .
6979	Returns the soap client .
6980	Finds one address by expression .
6981	Factory method . Creates a renderer object of the given type .
6982	Validate data and throw ValidationException if it is invalid or return validated data
6983	Validate data and returm errors array if it is invalid
6984	Get the request input based on the given validation rules .
6985	Creates and sets the sale context .
6986	Creates a default context .
6987	Fills the context from the given customer .
6988	Fills the context s empty properties with default values .
6989	Adds the conversion rate .
6990	Translations for Api Docs
6991	Get locale in format en_US or ru - RU or it - it
6992	User - id - based cache key
6993	Role - based cache key
6994	Pre persist event handler .
6995	Parse prices maps from Apple Price Matrix HTML document
6996	Parse all prices maps from Apple Price Matrix HTML document and save to PHP files in directory
6997	Get only viewers that are linked to main table s relation
6998	Process related record s data by viewers attached to it
6999	Get css classes for content container . Uses witdh to collect col - ?? - ?? and col - ?? - offset?? classes
7000	Get or set route url
7001	Get or set route method
7002	Get or set route action
7003	Determine if test string matches this route
7004	Formats this instance to a string based on a PHP DateTime format string . A few additional formats have been added for the AstroDate library for more informatin see the documentation .
7005	Day of the month 2 digits with leading zeros
7006	Textual representation of a day three letters
7007	Day of the month without leading zeros
7008	A full textual uppercase representation of the day of the week
7009	A full textual lowercase representation of the day of the week
7010	ISO - 8601 numeric representation of the day of the week 1 = Mon 7 = Sun
7011	English ordinal suffix for the day of the month 2 characters
7012	A full textual representation of a month such as January or March
7013	Numeric representation of a month with leading zeros
7014	Numeric representation of a month without leading zeros
7015	A two digit representation of a year
7016	12 - hour format of an hour without leading zeros
7017	24 - hour format of an hour without leading zeros
7018	12 - hour format of an hour with leading zeros
7019	24 - hour format of an hour with leading zeros
7020	Minutes with leading zeros
7021	Seconds with leading zeros
7022	Difference to UTC in hours
7023	Timezone offset in seconds
7024	Returns the formatter .
7025	Add a Remeber me cookie
7026	Check if a remeber me cookie exists and login the user
7027	Attempts to auto login a user and returns a redirect on success .
7028	Returns the default models implementations .
7029	Returns the messages for the given quantity .
7030	Returns the array version .
7031	Finds the shipment item matching the invoice line .
7032	Run a migration program
7033	Return last migration if any
7034	Save migration in database
7035	Create migration table if doesn t exists
7036	Drop migration table
7037	Compute table dependencies
7038	Returns the shipments .
7039	Returns the shipment date .
7040	Returns whether the subject has payment with different currency than its .
7041	Sets the payment state .
7042	Get ScaffoldConfig instance
7043	Retrieve all database table names .
7044	Retrieve all MetaModels table names .
7045	Retrieve all columns from a database table .
7046	Builds the document s customer data .
7047	Builds the document s address data .
7048	Formats the given phone number .
7049	Builds the document s goods lines .
7050	Builds the document s discounts lines .
7051	Add a violation .
7052	Logout current user invalidate session and reset locale
7053	get the instance
7054	apply the ID header
7055	Calculates the offset of this time zone for a given Julian date . Accounts for daylight savings time if relevant and based on the date .
7056	Finds the day of the year number for a given date
7057	Returns whether the notification has data optionally for the given key .
7058	Returns the stock adjustment from the resource event .
7059	Adds the css classes to the view .
7060	Removes the css classes from the view .
7061	Sets the css classes .
7062	Updates the customer s balance regarding to the payment method .
7063	Returns the payment accepted states .
7064	Returns whether or not the payment is supported .
7065	Instance getter for the AuthActions instance
7066	Instance getter for the UserRights instance
7067	Returns the accounting from the event .
7068	Returns all the units .
7069	Returns whether the given unit is valid .
7070	Rounds the given value for the given unit .
7071	Updates the message .
7072	Returns the attachment from the event .
7073	Returns whether the state A has a better availability than the state B .
7074	Adds the sale details .
7075	Builds the item details .
7076	Adds the discount details .
7077	Returns the types of the sale editable documents .
7078	Returns whether the sale supports the given document type .
7079	Returns the valid types .
7080	Pre copy event handler .
7081	Post copy event handler .
7082	Sets and gets the uri from the request .
7083	Gets or sets the HTTP method . Usually GET POST PUT or DELETE in traditional CRUD applications .
7084	Deletes a cookie by making the value null and expiring it .
7085	Set conditions for default options loader
7086	Set source for options labels
7087	Vlidate access key and find user
7088	Get or set error action
7089	Add one or more default headers
7090	Remove one or more default headers
7091	Return response of first route that matches false otherwise
7092	Add a generic route
7093	Check the hierarchy integrity .
7094	Loads the item s children and adjustments recursively .
7095	Throws an illegal operation exception if the item is immutable .
7096	Create a new block or get an existing block
7097	Normalize the subject s stock data .
7098	Sorts the stock units .
7099	Returns - 1 if A s property is greater than or equal quantity but not B . Returns 1 if B s property is greater than or equal quantity but not A . Else returns false .
7100	Returns - 1 if A s equals quantity but not B . Returns 1 if B s equals quantity but not A . Else returns false .
7101	Returns the sale classes supported by the given type for document generation .
7102	Fetches an absolute site URL based on a URI segment .
7103	Merges the current GET parameters with an array of new or overloaded parameters and returns the resulting query string .
7104	Convert a phrase to a URL - safe title .
7105	Method called for post - parse processing .
7106	Calculates the payments total by state .
7107	Rounds the amount to currency s precision .
7108	Returns the currency precision .
7109	Returns the currency rounding increment .
7110	Returns the ticket from the event .
7111	Returns whether the given reason is valid or not .
7112	Checks whether the user has access to certain controller action
7113	Checks whether the user is allowed to access a specific URL
7114	Returns whether the mode A is better than the mode B .
7115	Returns the find one result query builder .
7116	Watch for outstanding payments .
7117	Returns the find by subject query .
7118	Returns the get available quantity sum by subject query .
7119	Returns the get estimated date of arrival by subject query .
7120	Returns the find by subject and supplier query .
7121	Creates a find by subject query builder .
7122	Detect and apply language for the application . Failsafe
7123	Updates the ticket .
7124	Returns the message from the event .
7125	Returns whether this address equals the given address or not .
7126	Copy the source address data into the target address .
7127	Returns the details .
7128	Sets the ranges .
7129	Returns whether the notifiable has notifications or not optionally filtered by type .
7130	Returns the notifications optionally filtered by type .
7131	Updates the payment and forwarder totals .
7132	Updates the order exchange rate .
7133	Returns the supplier order from the event .
7134	Finds or create the invoice line .
7135	Returns the percentage .
7136	Merges the given margin .
7137	Reads the previous number .
7138	Returns the validation constraints for the given step .
7139	Returns the validation groups for the given step .
7140	Handle the quantity change .
7141	Registers the required factories .
7142	Registers the payum actions .
7143	Sort assignments from the most recent to the most ancient .
7144	Remove meta data from all users of the blog
7145	Add cutom profile fields
7146	Save meta data from custom profile fields
7147	get the current setting for a user
7148	Returns the total .
7149	Calculates the adjustment amount .
7150	Clears the subject identity .
7151	Returns whether or not this subject identity equals the given one .
7152	Copy the given subject identity .
7153	Add rule to array of ACL rules .
7154	Check if a role is allowed to an action .
7155	Returns the given date or null if it s lower than today .
7156	Sets the subject stock data .
7157	Sets the subject s stock state .
7158	Compile the SQL expression and return it . Replaces any parameters with their given values .
7159	Compile keyboard .
7160	Builds the sale view .
7161	Initializes the view builder .
7162	Builds the sale taxes views .
7163	Builds the sale lines views .
7164	Builds the sale discounts lines views .
7165	Builds the sale discount line view .
7166	Builds the shipment adjustment line view .
7167	Returns the options resolver .
7168	Add inputs to existing tab . If tab not exists - new one will be created
7169	Resolves the sale tax rule .
7170	Resolves the target country .
7171	Resolves the tax rule for the given sale .
7172	Resolves the sales s taxation target country .
7173	Resolves the customer s taxation target country .
7174	Gets a value from an array using a dot separated path .
7175	Set a value on an array by path .
7176	Retrieves multiple paths from an array . If the path does not exist in the array the default value will be added instead .
7177	Retrieves multiple single - key values from a list of arrays .
7178	Returns whether the given type is valid .
7179	Returns the first configured type .
7180	Returns the configured types .
7181	Generates the payment number .
7182	Generates the payment key .
7183	Updates the payment exchange rate .
7184	Returns the find available by country and weight query .
7185	Builds a new unit candidate .
7186	Returns the best assignments combination for the given quantity .
7187	Returns the stock assignment by its ID .
7188	Builds the assignments releasable quantity combination list .
7189	Copies the source adjustment into the target adjustment .
7190	Copies the source attachment into the target attachment .
7191	Copies the source notification into the target notification .
7192	Copy the source item into the target item .
7193	Copies the given properties from the source object to the target object .
7194	function to get the filesystem path to an image
7195	Prepare event handler .
7196	Handles the released flag change .
7197	Sets whether this order is the customer s first one .
7198	Changes the customer and origin customer regarding to their hierarchy .
7199	Assigns the sale item to stock units recursively .
7200	Detaches the sale item from stock units recursively .
7201	Returns the unit .
7202	Returns the gross .
7203	Adds the discount adjustment .
7204	Returns the discount .
7205	Returns the base .
7206	Adds the tax adjustment .
7207	Rounds the tax adjustments amounts .
7208	Rounds the amounts .
7209	Creates the final result from the given gross result .
7210	Returns a full auto login url with token .
7211	Validates the token .
7212	Generates a auto login token .
7213	Configures the writer for the given subject .
7214	Writes the debit line .
7215	Fixes the default tax group .
7216	Returns the tax group from the event .
7217	Provides sections with list of objects of classes that extend CmfApiMethodDocumentation class to be displayed in api docs section
7218	Create new migration file
7219	Apply new migrations
7220	Return json content
7221	Creates the shipment label .
7222	Clears the shipment data .
7223	Clears the parcel data .
7224	Execute and close session
7225	Get curl response body
7226	Get session info
7227	Set or get session url
7228	Parse header line
7229	Create appropriate session
7230	Returns the margin in percentage .
7231	Loads the calculation result .
7232	Create by currency
7233	Asserts that the given sale is an instance of the expected class .
7234	Asserts that the given sale item is an instance of the expected class .
7235	Asserts that the given adjustment is an instance of the expected class .
7236	Returns the region code for the given phone number .
7237	Fixes the default invoice address .
7238	Fix the default delivery address .
7239	Returns the address from the event .
7240	Resolves the class and creates the expected object .
7241	Returns the default classes .
7242	validate the input
7243	prints the sections description if it were needed
7244	load options and set defaults if necessary
7245	Calculate the sale item remaining quantity .
7246	Returns whether or not the sale item has a stockable subject .
7247	Purges the shipment by removing items which are not available .
7248	Dispatches the sale prepare event .
7249	Validates the shipment method requirements .
7250	Validates the delivery address .
7251	Validates the sale identity .
7252	Validates the sale payment term and outstanding limit .
7253	Returns the shipment method from the event .
7254	Returns whether the state A is better than the state B .
7255	whether the user is logged in
7256	Accessor to the logged in user s properties
7257	Checks whether the URL is allowed for the currently logged in user
7258	Merges the public children results recursively into the given result .
7259	Calculates the real sale gross base amount .
7260	Creates a new result adjustment .
7261	Asserts that the adjustment type is as expected .
7262	Asserts that the adjustment mode is as expected .
7263	Converts the given amount .
7264	Validates the sale item recursively .
7265	Run query on this table and return model
7266	Find model and return it
7267	One - to - one relationship
7268	One - to - many relationship
7269	One - to - one inverse relationship
7270	Save object to database updating or inserting a new row
7271	Delete this model from table
7272	Delete all models that match condition
7273	Return the table name
7274	Convert value coming from database
7275	Get column value
7276	Return name of table columns
7277	Return request timestamp
7278	Return request input
7279	Return request input files
7280	Return true if input is valid
7281	Forward this request to another host
7282	Return current request
7283	Updates the cart customer group and currency .
7284	Sets or gets the HTTP status from this response .
7285	Initializes the invoices .
7286	Returns the invoices .
7287	Returns the invoice date .
7288	Set column name or closure that will be used as label for links
7289	Order watcher .
7290	Returns whether the given mode is valid or not .
7291	Returns the find by method and states from date query .
7292	get users by meta key
7293	catch post status transition of each post
7294	Send mail if changes a status form not publish to publish
7295	builds the header and sends mail
7296	Modulate email addresses for sending register schedule event and convert address array in chunks
7297	Prepare the data for the next chunk
7298	apply a signature - text to the email message
7299	add information about sender to the end of the content
7300	autoloader for the classes
7301	Returns the available targets for the given sale .
7302	Returns the available payment transitions .
7303	Parent has changed event handler .
7304	Updates from parent .
7305	Schedules the parent change events .
7306	Returns the customer from the event .
7307	Creates a new AstroDate
7308	Creates a new AstroDate from a Julian date
7309	Creates a new AstroDate from the current date and time
7310	Creates a new AstroDate instance representing the Summer Solstice of the provided year
7311	Creates a new AstroDate instance representing the Winter Solstice of the provided year
7312	Creates a new AstroDate instance representing the Autumn Equinox of the provided year
7313	Sets the date for this instance
7314	Sets the time of this instance
7315	Sets the date and time of this instance
7316	Sets the time zone of this instance
7317	Returns a Julian date representation of this instance .
7318	Returns a Modified Julian date representation of this instance .
7319	Adds a Time interval to this instance
7320	Finds the difference between this AstroDate and another
7321	Returns the day of the year number 0 - 356 or 0 - 366 for leap year
7322	Finds the sidereal time of this intsance
7323	Throws an exception for a provided IAU date error code
7324	Gets a component of this date
7325	Detect if caching is possible
7326	Configures the taxable mapping .
7327	Configures the identity mapping .
7328	Configures the vat number subject mapping .
7329	Configures the payment term subject mapping .
7330	Configures the subject relative mapping .
7331	Configures the stock subject mapping .
7332	Configures the stock unit discriminator map .
7333	Returns the stock unit mapper .
7334	Returns the subjectIdentityMapper .
7335	Adds the mappings to the metadata .
7336	Returns the stock subject mappings .
7337	Create API client .
7338	Create event based on incoming request .
7339	Send message .
7340	Send attachment .
7341	Asserts that the resource can be safely deleted .
7342	Schedules the supplier order content change event .
7343	Initializes the stock .
7344	Prevents some of the shipment s fields to change .
7345	Modify incoming value before validating it . May be useful for situations when you need to clean incoming value from unnecessary data
7346	Calculate the given supplier order item s received quantity .
7347	Calculate the given supplier order item s delivery remaining quantity .
7348	Shipment watcher .
7349	Returns whether the sae has a notification with the given type and shipment number .
7350	Initializes the payment subject .
7351	Returns whether or not the subject is fully paid .
7352	Returns the payment remaining amount .
7353	Returns the provider by name or supporting the given relative or subject .
7354	Returns the url for the given type and subject .
7355	Returns whether the given size is valid .
7356	Returns whether the given format is valid .
7357	Returns whether or not the given state is valid .
7358	Load price map
7359	Get default price map loader
7360	Returns the item subject s in stock quantity .
7361	Updates the total weight .
7362	Updates the sale s net and grand totals .
7363	Updates the payment totals total .
7364	Updates the sale invoice total .
7365	Resolves the outstanding date .
7366	Checks the sale item privacy integrity .
7367	Checks that the sale item quantity is greater than or equals the invoiced quantity .
7368	Checks that the sale item quantity is greater than or equals the shipped quantity .
7369	Updates the stock unit price .
7370	Sets the translations .
7371	Shows the form to edit the current user s profile
7372	Updates the current user s profile
7373	Updates the current user s password
7374	Get true if the SESSION parameter is defined .
7375	Empty the resource pool - Release all connections
7376	Get value by parameter name .
7377	Get parameter value converted to float with precision .
7378	Get parameter value converted to boolean .
7379	Filter value .
7380	Use mysql escape function .
7381	URL path without language code package name and an optional query parameters .
7382	Returns a string formatted for an SQL insert or update .
7383	Returns a string formatted for an SQL ON DUPLICATE KEY UPDATE statement .
7384	Generate a string .
7385	Upload action for every controller which inherit from CRUDController
7386	Move file from the temporary destination to the original destination
7387	Generates a thumbnails of the files associated with the record
7388	Returns a SERVER parameter by name .
7389	Process request .
7390	Set 404 code and content .
7391	Assign matching values to local keys resetting unmatched local keys .
7392	String representation of PHP object .
7393	Constructs the object .
7394	Deep replace local values with matches from input .
7395	Get variable by name .
7396	Execute the work
7397	Set response header .
7398	Set response status .
7399	Redirect to url with statusCode and terminate .
7400	Iterates over the given Form returning error information contained within
7401	Gets error message recursively through a form and all its children
7402	const CLIPATH = ;
7403	This file is part of keenly from .
7404	Converts uploaded files to FileUpload instances .
7405	Copies all members into this class removing all existing values .
7406	Copies all members into this class . Indexed keys will be re - indexed .
7407	String representation of object .
7408	Merge input with clone of this and return new TypedArray .
7409	Required by the ArrayAccess interface . Returns reference to offset .
7410	Required by the ArrayAccess interface Coerces input values to be the required type .
7411	Apply new names from input array values .
7412	Chmod function with exception
7413	Find and call controller get Response object .
7414	Get file content .
7415	Returns an informative upload error message .
7416	Returns the maximum size of an uploaded file as configured in php . ini .
7417	Create Response from template .
7418	Create Response from content .
7419	Redirect to the URL with statusCode .
7420	Get route digit s .
7421	Initialize the product media gallery value to entity with the passed attributes and returns an instance .
7422	Initializes and renders alert container block
7423	Registers a specific jQuery UI widget options
7424	Render this view helper
7425	Sets source of the . swf file
7426	Checks if the source has allowed extension
7427	Renders the embed tag html with attached source
7428	Renders the object tag html with attached source
7429	Displays a form to login
7430	Add a region to this country
7431	Returns the singleton instance .
7432	Get mime type or NULL if none could be guessed .
7433	Create log file .
7434	Get the contents of the selected directory and return an array of the listing .
7435	Scans for possible dangerous problems .
7436	Prepare the product media gallery value to entity that has to be persisted .
7437	Handle fatal error .
7438	Handle exception .
7439	Initialize the product media gallery value with the passed attributes and returns an instance .
7440	Function to reload a Module and send the response .
7441	Check if we currently have access to the given resource
7442	Finds and displays a Group entity .
7443	Displays a form to create a new Group entity .
7444	Creates a new Group entity .
7445	Displays a form to edit an existing Group entity .
7446	Edits an existing Group entity .
7447	session decrypt AES 256
7448	session crypt AES 256
7449	Execute an external program
7450	Enable message queuing as interprocess communication
7451	Invokes custom PHP code directly after the package manager has been initialized .
7452	The breadcrumbs trail for right - to - left languages .
7453	The breadcrumbs trail for left - to - right languages .
7454	Get post s first term
7455	Get all hierarchical taxonomies
7456	Attempts to create the given directory throwing an exception if unable to
7457	Persist all stored entities with the given ObjectManager
7458	function to set color as background
7459	function to set color to a string
7460	Looks up a user with the given hash
7461	Sends password reset message to the user
7462	Create content from template and data .
7463	Safe include . Used for scope isolation .
7464	Displays a form to request a reset
7465	Create From Uploaded File
7466	Move Uploaded File
7467	Add color to the colors .
7468	Colorize the string .
7469	Parse the color .
7470	Displays a form to create a new User entity .
7471	Creates a new User entity .
7472	Reset Password Action
7473	Displays a form to edit an existing User entity .
7474	Edits an existing User entity .
7475	Configures the EmailHelper
7476	Returns an array of entities matching the given identifiers .
7477	Outputs a file for the user to download
7478	Get Form Type
7479	Returns the contents of a file given the path
7480	Returns the mime type of a file
7481	Creates a file and puts specified content into that file
7482	Convert this sequence into another encoding .
7483	Check if this sequence starts with a given string .
7484	Check if this sequence ends with a given string .
7485	Return the character at the given position in the sequence .
7486	Return the first occurrence of a string in the sequence .
7487	Return the last occurrence of a string in the sequence .
7488	Append a string to the sequence .
7489	Insert a string into the sequence .
7490	Reverse the sequence .
7491	Set the length of this sequence .
7492	Trim characters from the left and right side of this sequence .
7493	Trim characters from the left side of this sequence .
7494	Trim characters from the right side of this sequence .
7495	Internal helper function to convert string encodings .
7496	Create Message from an EmailTemplate entity
7497	Create Message from a file - based template
7498	This method creates and sends an email message using the given template
7499	Renders a string template
7500	request as body data is json if you want to request Json set Content - Type and Length ;
7501	If no namespace is provided the whole dbtext cache is cleared .
7502	Gets group if exists . If Category does not exist a new one is created .
7503	Use for easy access to a textblock formatted by printf rules .
7504	Use for easy access to a UiComponent with textblock formatted by printf rules .
7505	Use this method to add namespaces where textblock keys will be searched .
7506	Sets target document
7507	Returns current token as string
7508	Sets characters to be recognized as whitespace
7509	Sets characters to be recognized as identifier
7510	Add error to the array and appends current position
7511	Parse line breaks and increase line number
7512	Continues to the next token
7513	Finds the next token but skips whitespace
7514	Finds the next token using stop characters .
7515	Finds the next token by searching for a string
7516	Expect a specific token or character . Adds error if token doesn t match .
7517	Parse text between tags
7518	Parse comment tags
7519	Parse doctype tag
7520	Parse cdata tag
7521	Parse asp tags
7522	Parse style tags
7523	Default callback for tags
7524	Parse full document
7525	Performs a css select query on the root node
7526	Query a file or url .
7527	Statement stack and nested statement handler .
7528	Minifies javascript using JSMin +
7529	Returns place in document
7530	Returns all the attributes and their values
7531	Returns the node as string
7532	Return html code of node
7533	Similar to JavaScript innerText will replace child nodes with new text
7534	Return plaintext taking document encoding into account
7535	Delete node from parent and clear node
7536	Detach node from parent
7537	Deletes all child nodes from node
7538	Get top parent
7539	Find out if node is parent of a certain tag
7540	Index of node in parent
7541	Change index of node in parent
7542	Index of all similar nodes in parent
7543	Get sibling node
7544	Get node next to current
7545	Get namespace of node
7546	Set namespace of node
7547	Try to determine the encoding of the current tag
7548	Number of children in node
7549	Delete a child node
7550	Wrap child nodes
7551	Checks if node has attribute
7552	Finds children using a callback function
7553	Checks if tag matches certain conditions
7554	Checks if node matches certain filters
7555	Checks if node matches certain conditions
7556	Finds children that match a certain attribute
7557	Finds children that match a certain tag
7558	Performs a css query on the node .
7559	Performs css query on node
7560	Parse > character
7561	Parse ~ character
7562	Parse | character
7563	Parse ! character
7564	Parse several compare characters
7565	Evaluate root node using custom callback
7566	Parse first bit of query only root node has to be evaluated now
7567	Evaluate sibling nodes
7568	Parse full query
7569	The Job API Service does not require an API key . This service interacts with the GET endpoints in the Greenhouse job boards .
7570	The Appliction API Service handles posting applications in to Greenhouse . This requires your API key to be set .
7571	Fetch the URL . As this is guzzle this can take a relative URL . See the Guzzle docs more info .
7572	Post to the application endpoint .
7573	Method ensures that a non - empty response is contained in all fields marked as required . If not an Exception is thrown .
7574	Since a required field can have multiple possible inputs this method just checks the field has a value and returns true if it does . If it finds no values in any of the inputs it returns false .
7575	It is explicitely required to do custom field here because we require the trailing slash because in this case Sinatra didn t give us an option not to .
7576	Allow for shorthand calling of attachFile method . Users can simply submit the File in via string or pass the filename = > path
7577	Configure the filepath to have an
7578	Configures Data for the Endpoint . Used mainly as an override function on implemented Endpoints .
7579	Configure Defaults on a Data array based on the Required Data property
7580	Verify if URL is configured properly
7581	Validate the Data property on the Endpoint
7582	Validate Required Data for the Endpoint
7583	Extract the information from the Curl Request via curl_getinfo Setup the Status property to be equal to the http_code
7584	Seperate the Headers and Body from the CurlResponse and set the object properties
7585	Return the list of Endpoints that come with the SDK
7586	Configure the Destination path to store the File response
7587	Extract the filename from the Headers and store it in filename property
7588	Set the Filename for response to be saved to
7589	Configure the Curl Options based on Request Type
7590	Only render a template
7591	Retrieve badge markup
7592	Sets form layout class
7593	Generate an opening form tag
7594	Retrieve label markup
7595	Render element s label
7596	Render element s help block
7597	Retrieve fontAwesome markup
7598	Retrieve glyphicon markup
7599	Retrieve alert markup
7600	Render button groups markup
7601	Render buttons markup
7602	Renders the error messages .
7603	Render an element
7604	Render addo - on markup
7605	Sets translator to use in helper
7606	Render dropdown markup
7607	Render dropdown toggle markup
7608	Render dropdown list items markup
7609	Process a server request and return a response .
7610	Signs user up .
7611	Creates a new User model . If creation is successful the browser will be redirected to the view page .
7612	Returns whether the logged in user is an administrator .
7613	Sends an email with a link for resetting the password .
7614	Updates the current User model . If update is successful the browser will be redirected to the view page .
7615	Encodes the Bearer according to twitter s standards
7616	Calling this method will establish the hand shake with Twitter OAuth as an application and return this sessions Bearer Token to be used for the call being made
7617	Simple method to make requests to the Twitter API
7618	Get the BlobClient associated with the account name .
7619	Set permisison set
7620	Create signed query string
7621	Permission matches request?
7622	Sign request URL with credentials
7623	Sign request with credentials
7624	Perform request using Microsoft_Http_Client channel
7625	Check if a blob exists
7626	Check if a container exists
7627	Create container if it does not exist
7628	Get container ACL
7629	Set container ACL
7630	Get container metadata
7631	Set container metadata
7632	Put blob data
7633	Put large blob block
7634	Put block list
7635	Get block list
7636	Get blob instance
7637	Get blob properties
7638	Generate shared access URL
7639	Create resource name
7640	Is valid container name?
7641	Get error message from HTTP Response ;
7642	Get base URL for creating requests
7643	Parse metadata headers
7644	Parse metadata XML
7645	Retrieve storage client for this stream type
7646	Extract file name
7647	Open the stream
7648	Close the stream
7649	Flush current cached stream data to storage
7650	Attempt to delete the item
7651	Attempt to rename the item
7652	Return array of URL variables
7653	Attempt to open a directory
7654	Return the next filename in the directory
7655	Adds a To address .
7656	Adds a Reply - to address .
7657	Creates message and assigns Mailer . If the message is not sent successfully then it returns false . Use the ErrorInfo variable to view description of the error .
7658	Closes the active SMTP session if one exists .
7659	Creates recipient headers .
7660	Formats an address correctly .
7661	Set the body wrapping .
7662	Assembles the message body . Returns an empty string on failure .
7663	Adds an attachment from a path on the filesystem . Returns false if the file could not be found or accessed .
7664	Attaches all fs string and binary attachments to the message . Returns an empty string on failure .
7665	Encodes attachment in requested format . Returns an empty string on failure .
7666	Encode string to quoted - printable .
7667	Returns true if an inline attachment is present .
7668	Returns the proper RFC 822 formatted date .
7669	Returns the appropriate server variable . Should work with both PHP 4 . 1 . 0 + as well as older versions . Returns an empty string if nothing is found .
7670	Returns the server hostname or localhost . localdomain if unknown .
7671	Initialize template information
7672	Load one or several sub - files of the archive as the current template . If a sub - template is loaded for the first time then automatic merges and clean - up are performed . Return true if the file is correctly loaded .
7673	Save the last opened subfile into the store and close the subfile
7674	Load a subfile from the store to be the current subfile
7675	Return a source from the current merging the store or the archive . Take care that if the source it taken from the archive then it is not saved in the store .
7676	This is in order to merge automatic fields in special XML sub - files that are not usually loaded manually .
7677	Search a string in a list if several sub - file in the archive .
7678	Check after the sheet process
7679	Replace var fields in a Parameter of a block .
7680	Delete or Display a Sheet or a Slide according to its numbre or its name
7681	Prepare the locator for merging cells .
7682	Return the type of document corresponding to the given extension .
7683	Return the idx of the main document if any .
7684	Delete all tags of the types given in the list .
7685	Delete all column elements according to their position . Return the number of deleted elements .
7686	Return the column number from a cell reference like B3 .
7687	Return the reference of the cell such as A10 .
7688	Replace or delete a target in a Rels file . The current function actually edit the Rels file . Take car that there is another technic for listing and adding targets wish is working with a persistent object which is commit at the end of the merge ..
7689	Prepare information for adding a content type for an extension . It needs to be completed when a new picture file extension is added in the document .
7690	Return the list of all charts in the current sub - file with title and description if any .
7691	Delete unreferenced images
7692	Add the attribute that gives the reference of the item . Return the number of inserted attributes .
7693	Check if the file name is a subfile corresponding to a sheet .
7694	Return the list of images in the current sheet
7695	Return the list of slides in the Ms Powerpoint presentation .
7696	Clean tags in an Ms Powerpoint slide
7697	Search a string in all slides of the Presentation .
7698	Return true if the file name is a slide .
7699	Cleaning tags in MsWord
7700	Initialize information about header and footer files
7701	TBS Block Alias for pages
7702	TBS Block Alias for draws
7703	Look for all chart in the document and store information .
7704	Fixes the problem of ODS files built with LibreOffice > = 4 and merged with OpenTBS and opened with Ms Excel . The virtual number of row can exeed the maximum supported then Excem raises an error when opening the file . LibreOffice does not .
7705	This method is lazy because it assumes the attribute is separated by a space and its value is delimited by double - quote .
7706	Update positions when attributes of the start tag has been upated .
7707	Update all positions .
7708	Too complicated to update other information given that it can be deleted .
7709	Return false if SelfClosing .
7710	Update the parent object if any .
7711	Delete the element with or without the content .
7712	Find the name of the element
7713	Return true if the end is funf
7714	Useful to save time in search and replace .
7715	Search a start tag by the prefix of the element
7716	Search an element in the TXT contents and return an object if it is found .
7717	Return the state of the file .
7718	Prepare the strconv parameter
7719	Convert a string with charset or custom function
7720	Simply update an array
7721	Lists all Mahasiswa models .
7722	Standard alert message provided by TinyButStrong return False is the message is cancelled .
7723	Object to array
7724	Set quick replies
7725	Populate simple url button
7726	Populate simple postback button
7727	Populate login button
7728	Populate quick replies
7729	Populate qucik replies text
7730	Request to Facebook API
7731	Checks whether the given class is supported for normalization by this normalizer
7732	Denormalizes data back into an object of the given class
7733	Renders the template and initializes a new response object with the rendered template content .
7734	Does the specified method represent a Hydra Operation?
7735	Document the route and operations associated to an element
7736	Document the properties and methods associated to a class
7737	Get the specified annotation of an element
7738	Shortcut to serialize an entity into JSON - LD
7739	Shortcut to deserialize JSON - LD data to an entity
7740	Shortcut to validate an entity
7741	Adds an operation known to be supported by instances of this property
7742	Checks whether a specific operation is known to be supported
7743	Sets this property on the given entity to the specified value
7744	Gets this property s value of the given entity
7745	Try to find the getter associated to this property
7746	Try to find the setter associated to this property
7747	Searches add and remove methods
7748	Returns whether a method is public and has a specific number of required parameters .
7749	Forces the factory to load the metadata of all classes known to the underlying mapping driver .
7750	Gets the class metadata for the specified class
7751	Loads the metadata of the specified class
7752	Completes the metadata by setting missing fields that can be inferred by other fields
7753	Serializes data in the appropriate format
7754	Deserializes data into the given type .
7755	Deserializes JSON - LD data
7756	Sets the specified property to the specified value on the given entity
7757	Processes the data
7758	Loads mapping information
7759	If this is a bundle controlled mapping all the missing information can be autodetected by this method .
7760	Detects what metadata driver to use for the supplied directory .
7761	Validates the the specified mapping information
7762	Gets the context corresponding to the passed class
7763	Get the Hydra ApiDocumentation
7764	Creates a JSON - LD serialization of the passed operations
7765	Documents the properties of the passed ClassMetadata object
7766	Generates the service documentation
7767	Loads the metadata for the specified class
7768	Kick off the validation using input and rules .
7769	Checks if validation has passed .
7770	Gather errors format them and return them .
7771	Fetch the message for an error by field or rule type .
7772	Replaces message variables .
7773	Validates value against a specific rule and handles errors if the rule validation fails .
7774	Method to help skip a rule if a value is empty since we don t need to validate an empty value . If the rule to call specifically doesn t allowing skipping then we don t want skip the rule .
7775	Stores an error .
7776	Get rule arguments .
7777	Extracts field aliases from an input .
7778	Extract the field input from the data array .
7779	Extract the field ruleset from the data array .
7780	Check if a value already exists in a database table .
7781	Get all of the messages from a given key . Returns null if the given key is empty or if it doesn t exist .
7782	Registering offset - getter if timezone is not set
7783	Registering script for timezone detection on before action event
7784	Add a parser type to the list of parsers
7785	Set the classname of the statement class or callable that returns an object that implements the StatementInterface .
7786	Create a Statement object
7787	Set the classname of the account class or callable that returns an object that implements the AccountInterface .
7788	Set the classname of the contraAccount class or callable that returns an object that implements the AccountInterface .
7789	Set the classname of the transaction class or callable that returns an object that implements the StatementInterface .
7790	Set the classname of the opening balance class or callable that returns an object that implements the BalanceInterface .
7791	Set the classname of the closing balance class or callable that returns an object that implements the BalanceInterface .
7792	Create an object of a specified interface
7793	Get MT940 statements from the input text
7794	Parse a account number
7795	Determine the format for this statement
7796	Parse an account number
7797	Rabobank does not use statement numbers . Use the opening balance date as statement number instead .
7798	Parse an MT940 document
7799	Get the contents of an MT940 line
7800	Split the text into separate statement chunks
7801	Split transactions and their descriptions from the statement text
7802	Parse a statement chunk
7803	Parse a statement body
7804	Fill a Balance object from an MT940 balance line
7805	Get the opening balance
7806	Finds the closest \ DateTime to the given target \ DateTime with the set day and month . Will try at most 3 \ Datetime s one a year before our initial guess and one a year after . Returns the one with the least days difference in days .
7807	Get the closing balance
7808	Sets the retry value
7809	Gets the essential information for debugging
7810	Retrieves the pacakge version
7811	System Helpers below
7812	Converts Gregorian DateTime to Jalali and return it as string . By Ahmad Pouramini
7813	Converts Jalai DateTime to Gregorian and return it as string . By Ahmad Pouramini
7814	Process query data of ajax request
7815	EndaEditor Upload ImgFile
7816	Set default event .
7817	If not defined secret key will generated automatically .
7818	Store new callback to SMSGateway . me server .
7819	Create the pipelines storage .
7820	Store the given pipeline and its pipes .
7821	Update the given pipeline and its pipes .
7822	Refresh the pipelines source .
7823	Update the given workflow .
7824	Calculate the half width of the drawing .
7825	Calculate the total width of the drawing .
7826	Calculate the length of the longest pipe name .
7827	Retrieve the spaced pipe and method pair .
7828	Retrieve the blank spaces close to a word .
7829	Retrieve the left borders formatted with the given border .
7830	Retrieve the right borders formatted with the given border .
7831	Retrieve the spaced core name .
7832	Retrieve the blank spaces close to the core .
7833	Generate the specified pipes .
7834	Retrieve a list of pipes .
7835	Retrieve the namespace of the workflows .
7836	Delete all the generated files of the given workflow if forced .
7837	Register services .
7838	Store new contact to SMSGateway . me .
7839	Get detailed stored contact .
7840	Add number to existing contact .
7841	Remove number from existing contact .
7842	Handle the given job .
7843	Call a method if it exists and resolve its dependencies .
7844	Get device information .
7845	Send message to single number .
7846	Cancel queued message .
7847	Get detailed information about message .
7848	Check default config for easy debuggin .
7849	Marshal a command and dispatch it .
7850	Marshal the command to dispatch .
7851	Get a parameter value for a marshaled command .
7852	Dispatch the given workflow .
7853	Resolve the apter request .
7854	Delete the given files if force is set .
7855	Boot the package up .
7856	Publish the configuration file .
7857	Register the services .
7858	Register the pipeline repository .
7859	Register the hook for the workflow runners .
7860	Register the console commands .
7861	Draw the given workflow .
7862	Set the pipes of the given workflow .
7863	Draw a character in the middle of the drawing .
7864	Draw the beginning of all pipes .
7865	Draw content wrapped by borders .
7866	Draw the top border .
7867	Draw a border with the given bendings .
7868	Replace a character in a given position of a string .
7869	Draw the core of the workflow .
7870	Draw the bottom border .
7871	Draw the end of all pipes .
7872	Send message using Zenziva API .
7873	Check credit balance .
7874	Check config and add to log for easy debugging .
7875	Settle the pipeline repository if it does not exist .
7876	Create the request if unguard is not set .
7877	Setup the package .
7878	Register the log filesystem class .
7879	Register the log data class .
7880	Register the log viewer controller class .
7881	Read the log .
7882	Redirect to the show page .
7883	Delete the log .
7884	Show the log viewing page .
7885	Show the log contents .
7886	Get the log levels .
7887	Parse the log .
7888	List the log files .
7889	Get the log instance .
7890	Retrieve the default project hook .
7891	Trigger a deployment by project hook .
7892	Pattern property setter
7893	Pattern property array setter
7894	Parse a schema object into the correct objects
7895	Register a custom file provider Closure .
7896	Specify where the file is provided .
7897	Create the file provider instance .
7898	Handle dynamic from method calls .
7899	Determine if the given provider alias is already exists in the default and custom providers array .
7900	Upload the file on a file storage .
7901	Upload the given file and returns the filename if succeed .
7902	Get the full filename .
7903	Handle dynamic uploadTo method calls .
7904	Renders the configured sides
7905	Generates the toggle button . The one that on - click shows the sidebar .
7906	Renders the given items as a dropdown . This method is called to create sub - menus .
7907	Returns the label
7908	Renders the dropdown
7909	Renders the search input
7910	Initializes the widget . This method will register the semantic ui asset bundle and the translations . If you override this method make sure you call the parent implementation first .
7911	Registers a specific Semantic UI plugin and the related events
7912	Renders the toggle button .
7913	Renders the checkbox input
7914	Renders checkbox label
7915	Initializes the message closing buttons
7916	Initializes the widget options
7917	Generates the Radio input
7918	Generates a group of labels . Very useful when working with label tags
7919	Generates the search input
7920	Open . zip archive
7921	Extract list of filenames from . zip
7922	Test for valid filename path
7923	Extract filename from . zip
7924	Extract zip file to target path
7925	Registers plugin and add to list .
7926	Fires event with specified arguments . Arguments were passed as next params of function .
7927	Register namespace .
7928	Unregister namespace .
7929	Sets default group for files .
7930	Sets collection of assets .
7931	Append asset array to collection . before this apply required indexes if not exists .
7932	Loads assets from given name .
7933	Load asset by given array . Apply registered namespaces for all files paths .
7934	Check if given library name was already loaded .
7935	Helper to send SMS
7936	Get SMS offers available
7937	Creatge backupFTP ACL
7938	Get backupFTP ACL for specified ipBlock
7939	delete backupFTP ACL for specified IPblock
7940	Get Set backupFTP ACL
7941	Set boot device
7942	Add a domain on secondary DNS
7943	Delete a domain on secondary DNS server
7944	Return IP range
7945	Delete Monitoring IP notification
7946	Get properties of a line
7947	Reset Dslam Port
7948	Request ppp credentials
7949	Update domain properties
7950	Order backend and return a billing order object
7951	Order cache rules and return a billing order object
7952	Set ReverseProperties - returns information about the specific IP Reverse
7953	Get Spam - returns list of IPs on spam control in block
7954	Get SpamStats - returns Statistics of IP on Spam
7955	Set UnblockSpam - Trigger unblocking of IP on Spam block
7956	Get services associated with this billing account .
7957	Get Raw properties
7958	Is IPV6 Enabled
7959	Return nb pairs used
7960	Can we change DSLAM Profile ?
7961	Can we change DSLAM port ?
7962	Can we change Lns ?
7963	Set a monitoring notification on IP
7964	Get monitoring notification properties for IP
7965	Get Telephony account service voice consumptions .
7966	Get Telphony properties
7967	Set Properties of Telephony account
7968	Get Fax delivery records .
7969	Get Call delivery records .
7970	Delete a number from blacklist
7971	Get history object properties
7972	Delete the sms history given
7973	Purchase SMS credits
7974	Get sender object properties
7975	Create a new sender
7976	Add domain to secondary DNS
7977	Delete a domain on secondayr DNS server
7978	Set SSH key
7979	Get session properties
7980	Get files associated with sessionId
7981	Get files properties
7982	Add a new delete task
7983	Add a new restore task
7984	Get current monitoring
7985	Get available Options
7986	Return all models for the range of the virtual server
7987	Set properties of a snapshot
7988	Delete snapshot of this VPS
7989	Get template properties
7990	Get PCA services associated with this cloud passport
7991	Set a SSH public key to PCA
7992	Set password to PCA
7993	Get disk usage
7994	Return Dedicated Server list
7995	Return VPS list
7996	Validates a given incremental hashing context .
7997	Gets a string representing the bit pattern of the flag specification .
7998	Gets the OpenSSL encryption options .
7999	Identifies the TargetName of the intended authentication by inspecting some of the authentication details .
8000	Calculates the NT response .
8001	Calculates a response to a server challenge for a given credential hash .
8002	Resolves the input encoding of a given string .
8003	Creates an exception instance for the current system .
8004	Creates an exception instance for a given string .
8005	Calculates the offset of the Payload in the encoded message from the most - significant bit .
8006	Creates an exception instance for a given reason code .
8007	Validates that a given algorithm is supported .
8008	Creates an exception instance for a given string and encoding information .
8009	Process a key for DES encryption .
8010	Expands a 56 - bit key to a full 64 - bit key for DES encryption .
8011	Set an odd parity bit for a given byte in least - significant position .
8012	Creates an exception instance for a given challenge message .
8013	Return array of basic command line options
8014	Factory method for Command object
8015	Execute given Command object .
8016	close HTTP method DELETE
8017	Checks whether a file exists or not . This method only works for public resources private resources will throw a 403 error exception .
8018	Returns the url of the file or empty string if the file does not exists .
8019	Returns a S3Client instance
8020	QueryResult constructor .
8021	Sends a payload to the server .
8022	Add a field to the attachment list .
8023	Run something synchronized
8024	Destroys the semaphore
8025	Adds the ProcessDetails to the list and registers it as a free one .
8026	Removes the ProcessDetails from the list .
8027	Sends the kill signal to all processes and removes them from the list .
8028	Register a ProcessDetails as free
8029	Register the ProcessDetails with the given PID as free .
8030	Takes one ProcessDetails from the list of free ProcessDetails . Returns NULL if no free process is available .
8031	Get a ProcessDetails of the given PID
8032	Validate array of dates
8033	Loads the Input Content from the view
8034	Setting of the LdapUser attributes
8035	Check if the LdapUser is a member of requested group
8036	Get a code created from a number
8037	Revert a code to it s original number
8038	Execute a search query in the LDAP Base DN .
8039	Builds event data
8040	Builds event dates array
8041	Creates JSON string from events collection
8042	Calculate event length in seconds
8043	After the worker has been forked into another process
8044	Sets the proccess title
8045	Selects active sockets with a timeout
8046	Check if there is any data available
8047	Write the data to the socket in a predetermined format
8048	Read a data packet from the socket in a predetermined format .
8049	Creates calendar event
8050	Gets an calendar event based on id
8051	Gets all calendar events
8052	Get all events JSON
8053	Deletes an calendar event and rebuilds the cache .
8054	Updates an calendar event
8055	Get a random code of fixed length .
8056	Sets the process title of the child
8057	Sets the process title of the parent
8058	Sets the current size of the worker pool
8059	Sets the Semaphore that will be used within the worker processes
8060	Creates the worker
8061	Run the worker process
8062	Destroy the WorkerPool with all its children
8063	Child process reaper
8064	Returns the number of busy and free workers
8065	Get the pid of the next free worker
8066	Collects the results form the workers and processes any pending signals
8067	Sends the input to the next free worker process
8068	Initialises a Connection via hostname
8069	Binds LDAP connection to the server
8070	Get the concrete strategy class for retrieving the hostname .
8071	Retrieve a user by the given credentials .
8072	Validate a user against the given credentials .
8073	Create a new POST reuest .
8074	Create a new DELETE reuest .
8075	Handle the response .
8076	POST request .
8077	DELETE request .
8078	Create a standard uri based on the end point and add the auth token .
8079	Get all errors in a specified channel
8080	Get all the report for the current channel or an specific channel
8081	Log an error
8082	Logs a process report
8083	Get form errors by channel
8084	Clears existing errors for a channel
8085	Adds a predefined error to the internal list
8086	Removes any empty namespace of the current channel from the console
8087	Gets the connecting to the database Check if the database connection exists if not connects to the database
8088	Generate a password for a user
8089	Encodes an integer
8090	Generates a unique hash
8091	Checks and validates a confirmation hash
8092	Decodes a string into an integer
8093	Get a value of an entry in the collection Useful to get deep array elements without manually dealing with errors During the process
8094	Set a value to an index in the collection Used when the collection are nested
8095	Sends the cookie to the browser
8096	Destroys the cookie
8097	Validates the session
8098	Check if the data is a Collection if an array convert it to a Collection
8099	Validates All fields in _updates queue
8100	Validates a field in tmp_data
8101	Get a single row from the table depending on arguments
8102	Get a PDO statement
8103	Builds a query string with the passed arguments
8104	Query the table
8105	Executes SQL query and checks for success
8106	Get string value of HTML body with all variable evaluated .
8107	Gets list of safe template variables and their values which can be used in both the static and editable templates .
8108	Get the from field for review emails .
8109	Get the value of a user - configured field falling back to the default if left blank .
8110	Returns the state of other modules before compatibility mode is started .
8111	Queue up the next job to run .
8112	Takes a list of groups and members and return a list of unique member .
8113	Returns false if the content review have disabled .
8114	Creates a ContentReviewLog and connects it to this Page .
8115	Advance review date to the next date based on review period or set it to null if there is no schedule . Returns true if date was required and false is content review is off .
8116	Check if a review is due by a member for this owner .
8117	Set the review data from the review period if set .
8118	Bootstrap the form fields for the content review modal
8119	Validate and save the submitted form s review
8120	Determine whether the user can submit a review
8121	URL handler for the content due for review form
8122	Return a handler for content due for review forms according to the given object ID
8123	Action handler for processing the submitted content review
8124	Find the page this form is updating
8125	Check if the current request has a X - Formschema - Request header set . Used by conditional logic that responds to validation results
8126	Generate schema for the given form based on the X - Formschema - Request header value
8127	Finds user by either username or email
8128	Finds user by password reset token
8129	Shows user s profile .
8130	Tweaks the error message to include suggestions .
8131	Removes node filters .
8132	Gets the source context of the Twig template where the error occurred .
8133	Sets the source context of the Twig template where the error occurred .
8134	Renders a template block .
8135	Displays a template block .
8136	Sets the current cache implementation .
8137	Gets the cache filename for a given template .
8138	Gets the template class associated with the given string .
8139	Loads a template .
8140	Creates a template from source .
8141	Returns true if the template is still fresh .
8142	Clears the template cache files on the filesystem .
8143	Gets the Lexer instance .
8144	Tokenizes a source code .
8145	Gets the Parser instance .
8146	Converts a token stream to a node tree .
8147	Gets the Compiler instance .
8148	Compiles a node and returns the PHP code .
8149	Compiles a template source code .
8150	Initializes the runtime environment .
8151	Returns true if the given extension is registered .
8152	Gets an extension by class name .
8153	Removes an extension by name .
8154	Registers a Function .
8155	Registers a Global .
8156	Adds a path where templates are stored .
8157	Prepends a path where templates are stored .
8158	This method is used to register new user account .
8159	Returns user s status
8160	Confirms user and sets status to ACTIVE
8161	Blocks the user and sets the status to BLOCKED
8162	Unblocks the user and sets the status to ACTIVE
8163	Register the template component and load the twig helper function
8164	Renders a Twig template string or template file Can be used in Kirby controllers and PHP templates
8165	Compiles a node .
8166	Writes a string to the compiled code by adding indentation .
8167	Appends an indentation to the current PHP code after compilation .
8168	Outdents the generated code .
8169	Registers Twig_Autoloader as an SPL autoloader .
8170	Sends recovery message .
8171	Render a Twig template from a string
8172	Extract a few lines of source code from a source string
8173	Expose a function to the Twig environment as a function or filter
8174	the loop variable cannot be used in the condition
8175	Optimizes print nodes .
8176	Sends password recovery mail to the user
8177	Sends welcome mail to the user upon registration
8178	Sends mail using the Swift Mailer
8179	Logs in a user using the provided username and password .
8180	Sets the default strategy to use when not defined by the user .
8181	Gets the default strategy to use when not defined by the user .
8182	Returns the duration in microseconds .
8183	Returns the memory usage in bytes .
8184	Returns the peak memory usage in bytes .
8185	Returns the parent template .
8186	Displays a block .
8187	Returns whether a block exists or not in the current context of the template .
8188	Returns all block names in the current context of the template .
8189	Returns a variable from the context .
8190	Register the user
8191	Confirms user s account .
8192	Guesses the best autoescaping strategy based on the file name .
8193	Returns a template file path by name
8194	Renders the template by page with the additional data
8195	checks that the node only contains constant elements
8196	Returns deprecations for templates contained in a directory .
8197	Returns deprecations for passed templates .
8198	Sets the pointer to the next token and returns the old one .
8199	Tests a token and returns it or throws a syntax error .
8200	Looks at the next token .
8201	Exports job to a file .
8202	Register a console command .
8203	Peek a job in a spesific state .
8204	Reserve a job from the tube .
8205	Returns the job s statistics .
8206	Bury the job .
8207	Puts a job in the queue .
8208	Returns a Pheanstalk instance .
8209	Generic logic for reading ang validating command s arguments and options .
8210	Tries to figure out and set host port and default tube from the Laravel s queue . php config .
8211	Build a command s signature .
8212	Validates the file exists is readable and optionaly is not empty and returns an absolute path to the file .
8213	Displays job information .
8214	Returns statistics for the tube .
8215	Lists server statistics optionaly filtering keys by a pattern .
8216	Fetches the next job from the tube . For ready jobs do reserve for delayed and buried - peek .
8217	Searches the url for a query parameter of a given key .
8218	Returns whether the entity is currently rate limited
8219	Returns IP subnet string for the client
8220	Applies a given netmask to an IP address
8221	Gets an entity identifier
8222	Retrieves a limit array for a given action type id
8223	Increments a counter for the specified limit
8224	Logs that the rate limit was reached
8225	On a registration request
8226	Validates the submitted registration
8227	Logs successful registration
8228	Aborts the registration if the limit of an amount of users is reached
8229	Reads contents of a file to a string
8230	Writes data to a file
8231	Get item by URL
8232	Initializes the configuration array
8233	Retrieve a token for the specified action
8234	Checks token time validity
8235	Invalidates the specific token by unsetting it from the tokenStorage array in the session .
8236	Gets absolute Urls for pre - installation test
8237	Form submission requesting to generate the plugin configuration
8238	Creates a plugin configuration based on the selection
8239	Sets user s authenticated state .
8240	Saves reset tokens
8241	Gets directory files
8242	Handles a login submission
8243	Attempt a login with the specified credentials
8244	Logs the user in
8245	Aborts the current request if a password reset is required
8246	Returns encoder instance for the specified user
8247	Fills user - data array with the encoded password
8248	Validates the password policy constraints against the supplied password
8249	Returns whether a rehash is needed
8250	Performs a password rehash
8251	Checks username validity
8252	Logs an invalid login attempt
8253	On account page request
8254	On registration request
8255	On password reset request
8256	Initializes an instance of the provider from the configuration
8257	Starts the OAuth 2 . 0 process
8258	Finishes the OAuth 2 . 0 process
8259	Gets an attribute from the resource owner
8260	Saves the information from the ResourceOwner
8261	Saves the afterLogin parameter
8262	Checks if the request and session have all the required fields for a OAuth 2 . 0 callback
8263	Logs invalid state in the OAuth 2 . 0 response
8264	On an OAuth error
8265	On a Resource owner error
8266	Obtains a file lock
8267	Closes the file
8268	Opens the file for reading
8269	Reads contents of the opened file
8270	Returns whether the lock is unlocked
8271	Returns encoder instance for the specified lock
8272	Validates the users section of the configuration
8273	Validates all user parameters
8274	Asserts a valid username format
8275	Handles an event that was triggered by Pico
8276	Triggers an auth event for all enabled Auth modules
8277	Pico API event - onConfigLoaded
8278	Pico API event - onRequestUrl
8279	Pico API event - onRequestFile
8280	Pico API event - onPagesLoaded
8281	Pico API event - onTwigRegistered
8282	Pico API event
8283	Resolves a given content file path to the pico url
8284	Initializes the main plugin components
8285	Checks the session timeouts
8286	Applies a default plugin configuration to the Pico config file .
8287	Creates PicoAuth s dependency container instance .
8288	Loads plugin s modules defined in the configuration
8289	Plugin routes that are always present
8290	Checks the current request for logout action
8291	Logs out the current user
8292	Checks access to a given Pico URL
8293	Fatal error handler
8294	Opens the transaction file
8295	Opens the file for writing
8296	Writes contents of the file
8297	Creates a backup file before writing
8298	Closes the backup file
8299	Adds an additional ACL rule
8300	Pico API events pass - through
8301	Account page request
8302	Assert the property is array or is not set
8303	Assert the property is boolean or is not set
8304	Assert the property is integer or is not set
8305	Assert both properties are set and 1st is greater than second
8306	Assert the property is string or is not set
8307	Assert a string contains given substring or is not set
8308	Assert the value is array of strings or is not set
8309	Assert the value is either integer within bounds or false
8310	Corrects URL index if it does not have a correct format
8311	Returns configuration merged with the default values
8312	On a password reset request
8313	The first stage of a password reset process
8314	The second stage of a password reset process
8315	Validates a password reset link
8316	Starts a password reset session
8317	Sends a password reset link
8318	The minimum length in characters
8319	Matches provided regular expression
8320	Bulk captcha result .
8321	Report of wrong recognition .
8322	Returns server health data .
8323	Add pingback url to rucaptcha whitelist .
8324	Returns pingback whitelist items .
8325	Remove pingback url from whitelist .
8326	Sent recaptcha v2
8327	Recaptcha V2 recognition .
8328	Override generic method for using json response .
8329	either executed directly or inserted into a larger query .
8330	Attempts to establish a connection with the underlying driver .
8331	Constructs the Dblib PDO DSN .
8332	lists all database sequences
8333	Return a locking or nonlocking SQL query to read session information .
8334	Adds scope .
8335	Removes already set scope .
8336	Set callback function for changing values before compare .
8337	Set values clause .
8338	Set returning clause .
8339	Get a file content . Load it if not already done .
8340	Write a file content . Save it internally .
8341	Init Whoops handlers . You souldn t call it yourself . Don t call this in production environment .
8342	Add additionnal info in case of error page is displayed .
8343	Initialize inner states according to current HTTP request .
8344	Launch the logic stuff . Http need to be initialized beforehand .
8345	Set namespace subdomain and url prefixes for incoming routes .
8346	Add route to be considered .
8347	Allow authors to edit and delete their posts .
8348	Set current enum value .
8349	Return keys and values as an associative array .
8350	Sends a single email
8351	Extract the corresponding SQL code depth level by level .
8352	Handles incoming signals
8353	Interal shutdown function
8354	Build an enum .
8355	Build a model .
8356	Generate SQL entities representing classes .
8357	Extract domain from raw request .
8358	Get nice URL .
8359	Returns the xhtml code for the available 975L dashboards
8360	Starts a new RPQ queue in process mode
8361	Initialize properties detect current language and load translations .
8362	Load translations from directory according to current language .
8363	Get a translation from loaded files .
8364	Set current language . Should be IETF language tag compliant .
8365	Create the timeline entry for the new post .
8366	Register a new mapping .
8367	Get the mapping data .
8368	Check the validation of mapping configuration .
8369	Show archive for the notice board .
8370	Sends batches of emails in a loop .
8371	Register a shutdown handler
8372	Basic help action listing available all console actions .
8373	Configures a new console command
8374	Set set clause .
8375	Set where clause .
8376	Set order by clause .
8377	Initialize session .
8378	Set strategy pattern action for modification array . Action callable object resieves whole array in container and return array ro replace .
8379	Access to value if source array is nested .
8380	It applies filter function to requested value of array .
8381	Execute the constructed query .
8382	Get the next result row .
8383	Get all result rows .
8384	Set select clause .
8385	Set group by clause .
8386	Set having clause .
8387	Set distinct on clause .
8388	Add an inner join .
8389	Add a left outer join .
8390	Add a right outer join .
8391	Add a full outer join .
8392	List registered routes .
8393	Launch the logic stuff . Console need to be initialized beforehand .
8394	Add before hook to be considered .
8395	Get general logger instance .
8396	Ensure the migrations table exist for specified mapping .
8397	Get the schema definition from schema configuration file .
8398	Get the schema instance of specified mapping .
8399	Returns the xhtml code for the toolbar
8400	Returns the xhtml code for the button with text
8401	Set render and status .
8402	Initialize properties and register autoloader static method .
8403	Autoloader registered function . Try to require a file according to the needed class .
8404	Add a namespace to the recognized ones . Use this for files in the _apps_ directory .
8405	Launch the logic stuff . Bootstrap need to be initialized beforehand .
8406	Return the model name used while submitting the form .
8407	Return the icon to be displayed .
8408	Set a cookie .
8409	Clear all cookies .
8410	Connect to the database .
8411	Disconnect link to database .
8412	Check if connected to database .
8413	Get link .
8414	Get master server link .
8415	Begin transaction or create a new save point if already transactionning .
8416	Commit transaction modifications .
8417	Roll back transaction modifications .
8418	Register a new database .
8419	Get a database instance aliased as requested .
8420	cmsgears \ core \ common \ base \ Widget
8421	Return the texture to be displayed .
8422	Add the notice board menu item .
8423	List registered mappings .
8424	Generate base models for specified mapping .
8425	Query to find all active posts .
8426	Query to find all inactive posts .
8427	Get a controller creating one if it doesn t exist already .
8428	By default it returns the icons from CMGTools IconLib library . The parameter defaultSet can be changed or it can be overriden to change default behaviour .
8429	Return the icon corresponding to given file type from CMT IconLib library .
8430	Return the icon corresponding to given file type from Font Awesome library .
8431	Starts an Amp \ Loop event loop and begins polling Redis for new jobs
8432	Get DSN string for PDO according to specified info .
8433	Run migration code for a mapping .
8434	Write migration code to file .
8435	If not new delete the model .
8436	Fetch one row satisfying the specified conditions .
8437	Count rows satisfying the specified conditions .
8438	Set the post link on the timeline .
8439	Complete final used PHP files list as list of HTML codes with editor links .
8440	Create a new post .
8441	Update a post .
8442	Return the generated display .
8443	Handles process end and requeuing if necessary
8444	Determine if the request is for this driver .
8445	Retrieve User information .
8446	Convert a Question object into a valid Twitter message object .
8447	Low - level method to perform driver specific API requests .
8448	Send a broadcast message to several users at once .
8449	Adds a user to the contact list
8450	Renames a user in the contact list
8451	Sets the profile picture for the logged in user
8452	Check that the URL given actually exists and is resolvable and that the file located there is within size limits .
8453	Determine if we can use the filename given to us via a URI or do we have to create an unique one in the system folder .
8454	Download the file from the URL provided .
8455	Add multiple arguments used in the next invocation of drush .
8456	Runs the given drush command .
8457	Prepends site - alias and appends arguments to the command .
8458	Runs pending database updates .
8459	Returns the drush version .
8460	Executes a command on the telegram - cli . Line - breaks will be escaped as telgram - cli does not support them .
8461	Get URL from the current page .
8462	Get base URL of the site .
8463	Get protocol from current or passed URL .
8464	Get the server name .
8465	Remove subdirectories from URI if they exist .
8466	Set parameters from the URL and return URL without them .
8467	Add backslash if it does not exist at the end of the route .
8468	Gat all active handlers .
8469	Convenience method to log emergency messages
8470	Convenience method to log alert messages
8471	Convenience method to log critical messages
8472	Convenience method to log error messages
8473	Convenience method to log warning messages
8474	Convenience method to log notice messages
8475	Convenience method to log debug messages
8476	Convenience method to log info messages
8477	Deletes an existing EventEventHandler model . If deletion is successful the browser will be redirected to the index page .
8478	Implements writing to log files .
8479	Bootstrap method to be called during application bootstrap stage .
8480	Lists all EventEventHandler models .
8481	Get the record name by id .
8482	Gets the name of the Operating System
8483	Gets the Kernel Version of the Operating System
8484	Gets the hostname
8485	Gets Processor s Model
8486	Gets Processor s Vendor
8487	Gets Processor s Frequency
8488	Gets current system load
8489	Gets Processor s Architecture
8490	Gets system up - time
8491	Gets total number of cores
8492	Gets total physical memory
8493	Set the value of the FeeList property .
8494	Create Fulfillment Order The SellerFulfillmentOrderId must be unique for all fulfillment orders created by the seller . If your system already has a unique order identifier then that may be a good value to put in this field .
8495	Get Fulfillment Order Get detailed information about a FulfillmentOrder . This includes the original fulfillment order request the status of the order and its items in Amazon s fulfillment network and the shipments that have been generated to fulfill the order .
8496	Get Fulfillment Preview Get estimated shipping dates and fees for all available shipping speed given a set of seller SKUs and quantities
8497	Get Package Tracking Details Gets the tracking details for a shipment package .
8498	List All Fulfillment Orders By Next Token Gets the next set of fulfillment orders that are currently being being fulfilled or that were being fulfilled at some time in the past .
8499	Update Fulfillment Order The SellerFulfillmentOrderId must be the order ID of the original order that needs to be updated .
8500	Set curl options relating to SSL . Protected to allow overriding .
8501	Set the value of the GetMatchingProductForIdResult property .
8502	Sets the value of the MarketplaceIdList .
8503	Set the value of the GetCompetitivePricingForASINResult property .
8504	Confirm Transport Request Confirms the estimate returned by the EstimateTransportRequest operation . Once this operation has been called successfully the seller agrees to allow Amazon to charge their account the amount returned in the estimate .
8505	Create Inbound Shipment Creates an inbound shipment . It may include up to 200 items . The initial status of a shipment will be set to Working . This operation will simply return a shipment Id upon success otherwise an explicit error will be returned . More items may be added using the Update call .
8506	Get Bill Of Lading Retrieves the PDF - formatted BOL data for a partnered LTL shipment . This PDF data will be ZIP d and then it will be encoded as a Base64 string and a MD5 hash is included with the response to validate the BOL data which will be encoded as Base64 .
8507	Get Package Labels Retrieves the PDF - formatted package label data for the packages of the shipment . These labels will include relevant data for shipments utilizing Amazon - partnered carriers . The PDF data will be ZIP d and then it will be encoded as a Base64 string and MD5 hash is included with the response to validate the label data which will be encoded as Base64 . The language of the address and FC prep instructions sections of the labels are determined by the marketplace in which the request is being made and the marketplace of the destination FC respectively .
8508	Get Prep Instructions For ASIN Returns the required prep that must be performed for a set of items identified by ASINs that will be sent to Amazon . It returns guidance for the seller on how to prepare the items to be sent in to Amazon s Fulfillment Centers and identifies the labeling required for the items and gives the seller a list of additional required prep that must be performed .
8509	Get Prep Instructions For SKU Returns the required prep that must be performed for a set of items identified by SellerSKUs that will be sent to Amazon . It returns guidance for the seller on how to prepare the items to be sent in to Amazon s Fulfillment Centers and identifies the labeling required for the items and gives the seller a list of additional required prep that must be performed .
8510	Get Transport Content A read - only operation which sellers use to retrieve the current details about the transportation of an inbound shipment including status of the partnered carrier workflow and status of individual packages when they arrive at our FCs .
8511	List Inbound Shipment Items Gets the first set of inbound shipment items for the given ShipmentId or all inbound shipment items updated between the given date range . A NextToken is also returned to further iterate through the Seller s remaining inbound shipment items . To get the next set of inbound shipment items you must call ListInboundShipmentItemsByNextToken and pass in the NextToken this call returned . If a NextToken is not returned it indicates the end - of - data . Use LastUpdatedBefore and LastUpdatedAfter to filter results based on last updated time . Either the ShipmentId or a pair of LastUpdatedBefore and LastUpdatedAfter must be passed in . if ShipmentId is set the LastUpdatedBefore and LastUpdatedAfter will be ignored .
8512	List Inbound Shipment Items By Next Token Gets the next set of inbound shipment items with the NextToken which can be used to iterate through the remaining inbound shipment items . If a NextToken is not returned it indicates the end - of - data . You must first call ListInboundShipmentItems to get a NextToken .
8513	List Inbound Shipments Get the first set of inbound shipments created by a Seller according to the specified shipment status or the specified shipment Id . A NextToken is also returned to further iterate through the Seller s remaining shipments . If a NextToken is not returned it indicates the end - of - data . At least one of ShipmentStatusList and ShipmentIdList must be passed in . if both are passed in then only shipments that match the specified shipment Id and specified shipment status will be returned . the LastUpdatedBefore and LastUpdatedAfter are optional they are used to filter results based on last update time of the shipment .
8514	List Inbound Shipments By Next Token Gets the next set of inbound shipments created by a Seller with the NextToken which can be used to iterate through the remaining inbound shipments . If a NextToken is not returned it indicates the end - of - data .
8515	Put Transport Content A write operation which sellers use to provide transportation details regarding how an inbound shipment will arrive at Amazon s Fulfillment Centers .
8516	Update Inbound Shipment Updates an pre - existing inbound shipment specified by the ShipmentId . It may include up to 200 items . If InboundShipmentHeader is set . it replaces the header information for the given shipment . If InboundShipmentItems is set . it adds replaces and removes the line time to inbound shipment . For non - existing item it will add the item for new line item ; For existing line items it will replace the QuantityShipped for the item . For QuantityShipped = 0 it indicates the item should be removed from the shipment
8517	Set the value of the InventoryRecommendations property .
8518	Set the value of the SelectionRecommendations property .
8519	Set the value of the PricingRecommendations property .
8520	Set the value of the FulfillmentRecommendations property .
8521	Set the value of the ListingQualityRecommendations property .
8522	Set the value of the GlobalSellingRecommendations property .
8523	Set the value of the AdvertisingRecommendations property .
8524	Set the value of the ItemList property .
8525	Set the value of the SellerSKU property .
8526	List Financial Event Groups ListFinancialEventGroups can be used to find financial event groups that meet filter criteria .
8527	Convert ListFinancialEventGroupsRequest to name value pairs
8528	List Financial Event Groups By Next Token If ListFinancialEventGroups returns a nextToken thus indicating that there are more groups than returned that matched the given filter criteria ListFinancialEventGroupsByNextToken can be used to retrieve those groups using that nextToken .
8529	List Financial Events ListFinancialEvents can be used to find financial events that meet the specified criteria .
8530	Convert ListFinancialEventsRequest to name value pairs
8531	List Financial Events By Next Token If ListFinancialEvents returns a nextToken thus indicating that there are more financial events than returned that matched the given filter criteria ListFinancialEventsByNextToken can be used to retrieve those events using that nextToken .
8532	Convert ListFinancialEventsByNextTokenRequest to name value pairs
8533	Set the value of the DebtRecoveryItemList property .
8534	Set the value of the ChargeInstrumentList property .
8535	Sets the value of the Id .
8536	Set the value of the RentalChargeList property .
8537	Set the value of the RentalFeeList property .
8538	Set the value of the Offer property .
8539	Set the value of the GetMyPriceForASINResult property .
8540	Set the value of the member property .
8541	Take all the parsed block parts and flatten them into a gettext - ready string ; the part in the PO file that this block represents .
8542	Sets a particular plural message key
8543	Set the value of the ShipmentEventList property .
8544	Set the value of the RefundEventList property .
8545	Set the value of the GuaranteeClaimEventList property .
8546	Set the value of the ChargebackEventList property .
8547	Set the value of the PayWithAmazonEventList property .
8548	Set the value of the ServiceProviderCreditEventList property .
8549	Set the value of the RetrochargeEventList property .
8550	Set the value of the RentalTransactionEventList property .
8551	Set the value of the PerformanceBondRefundEventList property .
8552	Set the value of the ServiceFeeEventList property .
8553	Set the value of the DebtRecoveryEventList property .
8554	Set the value of the LoanServicingEventList property .
8555	Set the value of the AdjustmentEventList property .
8556	Construct from DOMElement
8557	Sets the value of the Type .
8558	Set the value of the FinancialEventGroupList property .
8559	Sets the value of the Error .
8560	Set the value of the Product property .
8561	Cancel Shipment Cancels an existing shipment . This will only succeed if the cancellation window has not passed and if the shipment has not been cancelled already .
8562	Create Shipment Creates a shipment for the shipping information specified . Purchases and returns a label for the specified shipping service or shipping service offering .
8563	Convert CreateShipmentRequest to name value pairs
8564	Get Eligible Shipping Services Gets a list of eligible shipping services for the shipment information specified . The ShippingServiceId or ShippingServiceOfferingId can be used in CreateShipment to specify the shipping service or the specific offer respectively . A list of carriers that are temporarily unavailable is also returned .
8565	Convert GetEligibleShippingServicesRequest to name value pairs
8566	Get Shipment Gets an existing shipment including the label status label content shipping information .
8567	Convert GetShipmentRequest to name value pairs
8568	Set the value of the CategoryQueryList property .
8569	Set the value of the SKUPrepInstructions property .
8570	Get Last Updated Time For Recommendations Retrieving last updated time for all recommendation categories for the given marketplace and seller . If last updated time for a category is null it indicates no active recommendations for this seller in the given marketplace for this category .
8571	List Recommendations Retrieving first batch of recommendations .
8572	Convert ListRecommendationsRequest to name value pairs
8573	List Recommendations By Next Token Retrieving recommendation by next token .
8574	Set the value of the GetMyPriceForSKUResult property .
8575	Set the value of the ItemChargeList property .
8576	Set the value of the ItemChargeAdjustmentList property .
8577	Set the value of the ItemFeeList property .
8578	Set the value of the ItemFeeAdjustmentList property .
8579	Set the value of the PromotionList property .
8580	Set the value of the PromotionAdjustmentList property .
8581	Set the value of the PrepInstruction property .
8582	Set the value of the Any property .
8583	Get Lowest Offer Listings For SKU Gets some of the lowest prices based on the product identified by the given SellerId and SKU .
8584	Set the value of the ASIN property .
8585	Set the value of the ProductGroupList property .
8586	Set the value of the CompetitivePrice property .
8587	Set the value of the LowestOfferListing property .
8588	Set the value of the ASINPrepInstructions property .
8589	Sets the value of the ReportSchedule .
8590	Set the value of the GetMatchingProductResult property .
8591	Sets the value of the Status .
8592	Set the value of the FilterOptions property .
8593	List Orders ListOrders can be used to find orders that meet the specified criteria .
8594	List Orders By Next Token If ListOrders returns a nextToken thus indicating that there are more orders than returned that matched the given filter criteria ListOrdersByNextToken can be used to retrieve those other orders using that nextToken .
8595	Get Service Status Returns the service status of a particular MWS API section . The operation takes no input . All API sections within the API are required to implement this operation .
8596	List Marketplace Participations Returns a list of marketplaces that the seller submitting the request can sell in and a list of participations that include seller - specific information in that marketplace .
8597	List Marketplace Participations By Next Token Returns the next page of marketplaces and participations using the NextToken value that was returned by your previous request to either ListMarketplaceParticipations or ListMarketplaceParticipationsByNextToken .
8598	Create Subscription Create a new subscription .
8599	Convert CreateSubscriptionInput to name value pairs
8600	Delete Subscription Delete a subscription .
8601	Convert DeleteSubscriptionInput to name value pairs
8602	Deregister Destination Delete a destination .
8603	Convert DeregisterDestinationInput to name value pairs
8604	Get Subscription Retrieve subscription information .
8605	List Registered Destinations List all the destinations for the specified seller created by the developer .
8606	List Subscriptions List all the subscriptions for the specified seller created by the current developer .
8607	Convert ListSubscriptionsInput to name value pairs
8608	Register Destination Create a new destination .
8609	Convert RegisterDestinationInput to name value pairs
8610	Update Subscription Update a subscription .
8611	Convert UpdateSubscriptionInput to name value pairs
8612	Set the value of the Marketplace property .
8613	Set the value of the AdjustmentItemList property .
8614	Sets the value of the FeedSubmissionInfo .
8615	Set the value of the SalesRank property .
8616	Set the value of the Id property .
8617	Set the value of the InvalidSKU property .
8618	Remove a block from the list
8619	Fetch a block using a compiled key
8620	Parse a file into its individual subparts
8621	Take all parsed blocks and compile their final guise . Essentially returns the contents of a . po file .
8622	Set the value of the GetLowestOfferListingsForSKUResult property .
8623	Set the value of the OfferListingCount property .
8624	Set the value of the ShippingServiceList property .
8625	Set the value of the TemporarilyUnavailableCarrierList property .
8626	Set the value of the TermsAndConditionsNotAcceptedCarrierList property .
8627	Set the value of the GetCompetitivePricingForSKUResult property .
8628	Construct MarketplaceWebServiceProducts_Model_GetCompetitivePricingForSKUResponse from XML string
8629	Set the value of the Participation property .
8630	Set the value of the GetLowestOfferListingsForASINResult property .
8631	Sets the value of the ReportInfo .
8632	Sets the value of the ReportRequestInfo .
8633	Set the value of the OrderChargeList property .
8634	Set the value of the OrderChargeAdjustmentList property .
8635	Set the value of the ShipmentFeeList property .
8636	Set the value of the ShipmentFeeAdjustmentList property .
8637	Set the value of the OrderFeeList property .
8638	Set the value of the OrderFeeAdjustmentList property .
8639	Set the value of the DirectPaymentList property .
8640	Set the value of the ShipmentItemList property .
8641	Set the value of the ShipmentItemAdjustmentList property .
8642	Get Report Request List By Next Token retrieve the next batch of list items and if there are more items to retrieve
8643	Cancel Report Requests cancels report requests that have not yet started processing by default all those within the last 90 days
8644	Get Report Request Count returns a count of report requests ; by default all the report requests in the last 90 days
8645	Build an associative array of an HTTP Header lines . For requests the HTTP request line is not contained in the array nor is the HTTP status line for response headers .
8646	Gets cURL options common to all MWS requests .
8647	Configures specific curl options based on the request type .
8648	Add authentication related and version parameters
8649	Calculate String to Sign for SignatureVersion 2
8650	Returns a ISO 8601 formatted string from a DateTime instance .
8651	Convert GetReportRequest to name value pairs
8652	Convert GetReportScheduleCountRequest to name value pairs
8653	Convert UpdateReportAcknowledgementsRequest to name value pairs
8654	Convert SubmitFeedRequest to name value pairs
8655	Convert GetReportCountRequest to name value pairs
8656	Convert GetFeedSubmissionListByNextTokenRequest to name value pairs
8657	Convert CancelFeedSubmissionsRequest to name value pairs
8658	Convert RequestReportRequest to name value pairs
8659	Convert GetFeedSubmissionCountRequest to name value pairs
8660	Convert GetReportListRequest to name value pairs
8661	Convert GetFeedSubmissionResultRequest to name value pairs
8662	Convert GetFeedSubmissionListRequest to name value pairs
8663	Convert GetReportRequestListRequest to name value pairs
8664	Convert ManageReportScheduleRequest to name value pairs
8665	Convert GetReportRequestCountRequest to name value pairs
8666	Set the value of the InvalidASIN property .
8667	Set the value of the Message property .
8668	Set the value of the Self property .
8669	Compute de differences between what s in the storage system and what s in the database
8670	Takes the items and recursively converts them to Bags .
8671	Creates a bag by using one collection for keys and another for its values .
8672	Iterate through the items starting at the given index .
8673	Reverse iterate through the items starting at the given index .
8674	Applies the given function to each _key_ in the bag and returns a new bag with the keys returned by the function and their values .
8675	Returns a bag with the items merged with the given list .
8676	Returns a bag with all keys exchanged with their associated values .
8677	Returns a bag with duplicate values removed .
8678	Returns a bag with the items split into chunks .
8679	Returns a bag with the values sorted .
8680	Returns a bag with the keys sorted .
8681	Sets a item by key .
8682	Sets a value using path syntax to set nested data . Inner arrays will be created as needed to set the value .
8683	Converts an iterable null or stdClass to an array .
8684	Recursively converts an iterable to nested arrays .
8685	Sets a value in a nested array or ArrayAccess object using path syntax to set nested data . Inner arrays will be created as needed to set the value .
8686	Removes and returns a value from an array or ArrayAccess object using path syntax to remove nested data .
8687	Replaces values from second iterable into first iterable recursively .
8688	Determine whether the ArrayAccess object can return by reference .
8689	Internal method to do actual flatten recursion after args have been validated by main method .
8690	Specific implementation for validation of element values
8691	Symlink JQuery File Upload plugin in the public directory
8692	Checks symlink s existence .
8693	Create the symlink .
8694	Takes a human - formatted binary size and return a number of octets
8695	Return a binary size in a human readable form .
8696	Run the command .
8697	Validates the mandatory attributes
8698	Set s an attribute for the current element
8699	Factory for building the several elements available
8700	Appends an element to the current element
8701	Returns the element string
8702	Saves the element as a file
8703	Registers routes for the entire CMS .
8704	Apply the scope to a given Eloquent query builder .
8705	Extend the builder .
8706	Set the last folder selected
8707	Get the last folder selected
8708	Set the columns to be selected .
8709	Qualify translated columns
8710	Add a where clause to the query .
8711	Add a where clause to the query and don t modify it for i18n .
8712	Add a translation where clause to the query .
8713	Add a translation or where clause to the query .
8714	Add a full sub - select to the query .
8715	Get the API access token . This method can be used to verify if provided ApiSettings are valid .
8716	Save a new model in provided locale and return the instance .
8717	Save a new model and return the instance . Allow mass - assignment .
8718	Save a new model in provided locale and return the instance . Allow mass - assignment .
8719	Reload a fresh model instance from the database .
8720	Init translatable attributes .
8721	Get an array of translatable attributes from schema .
8722	Get a collection of translated attributes in provided locale .
8723	Get a collection of translated attributes in provided locale or create new one .
8724	Translations relationship .
8725	Returns the default translation model instance .
8726	Should fallback to a primary translation .
8727	Get the attributes that have been changed since last sync .
8728	process HTTP request to change the upload folder
8729	Given a request ensure that the current field is aware of the selected folder
8730	Determine if the current member is allowed to change the folder
8731	All users who want to access to your Raindrop - enabled system will have to be whitelisted .
8732	After being whitelisted each user must authenticate through the Server - side Raindrop process once every 24 hours to retain access to the protected system .
8733	Update a record in the database .
8734	Increment a column s value by a given amount .
8735	Decrement a column s value by a given amount .
8736	Insert a new record into the database .
8737	Insert a new record and get the value of the primary key .
8738	Filters translatable values from non - translatable .
8739	Update values in base table
8740	Get the query builder instance for translation table .
8741	Get the delete query instance for translation table .
8742	Set the keys for a save update query .
8743	Initiates the listener
8744	Starts capturing keys
8745	Resets the listener properties
8746	Automatically instantiates the listener object with dependencies based on environment
8747	Starts watching the stream
8748	Adds a method call .
8749	Loads the registry into the container .
8750	Dumps values .
8751	Checks whether the current message can be added to the message stack
8752	Adds a definition to the list of definitions managed by this compiler .
8753	Registers a new definition provider .
8754	start multi loop
8755	Build a new Tracker instance
8756	Build a task tracker using a list of subscribers
8757	Iterate over items and track them
8758	Indicate progress to the tracker
8759	Receive post requests from Dropzone
8760	Set line prefix map
8761	Write Log Line
8762	Upload Single Image
8763	Delete Single Image
8764	Check upload directory and see it there a file with same filename If filename is same add random 5 char string to the end
8765	Returns the next available variable name to use .
8766	Load application configuration files
8767	Register the basic bindings into the container .
8768	Register aliases of Application
8769	Run the given array of bootstrap classes .
8770	Bind all of the application paths in the container .
8771	Register all of the configured providers .
8772	Mark the given provider as registered .
8773	Register the core class aliases in the container .
8774	Get base url for app .
8775	Get admin url for app .
8776	Get route uri value with params .
8777	Get assets directory for app .
8778	Redirect to another URL .
8779	Get segments of URI .
8780	Get url scheme .
8781	Save cache file
8782	Finish cache and save file
8783	Register paths to be published by the publish command .
8784	Create log text to file
8785	Get the full URL for the request with the added query string parameters .
8786	Genereta all Command class .
8787	Generate a link to a JavaScript file .
8788	Generate a link to a CSS file .
8789	Generate an HTML image element .
8790	Generate a HTML link to an asset .
8791	Generate a meta tag .
8792	Generate an html tag .
8793	Set the application key in the environment file .
8794	Write a new environment file with the given key .
8795	Load view file .
8796	Load helper file .
8797	Trigger an event
8798	Add extra directives to the blade templating compiler .
8799	Hash the given value .
8800	Check if the given hash has been hashed using the given options .
8801	Set session method .
8802	Get session method .
8803	Setting Flash Message
8804	Getting Flash Message
8805	Get the default driver .
8806	Ensure that the given alias has an existing real - time facade class .
8807	Set cookie method .
8808	Get cookie method .
8809	Delete cookie method .
8810	Delete all cookie method .
8811	Add custom header data in Response
8812	Return view file within Response
8813	Return blade file within Response
8814	HTTP POST Request
8815	HTTP GET Request
8816	HTTP PUT Request
8817	HTTP DELETE Request
8818	HTTP FILES Request
8819	HTTP SERVER Request
8820	Get Client IP Address .
8821	Filter method for HTTP Values .
8822	Define Validation Rules
8823	Define One Validation Rule
8824	Field validation error messages
8825	Credit Card Validation
8826	transform create_table_user to CreateTableUser
8827	Generate a hidden field with the current CSRF token .
8828	Create a HTML image input element .
8829	Create a select element option .
8830	Determine if the value is selected .
8831	Get the check state for a checkbox input .
8832	Tokeniser explodes input into components describing the properties expressed in the pattern .
8833	Generate a set of random codes based on Paggern pattern . Codes are guaranteed to be unique within the set .
8834	If more than one observer is attached to the command then wrap them up in an Aggregate logger .
8835	Build the correct Environment instance for the provided operating system .
8836	Sets the max allowed retries .
8837	Returns true if the process has been running for longer than the specified timeout .
8838	Proxy method to proc_get_status .
8839	Read from the stdout & stderr streams passing data to callback if provided .
8840	Sets the exit code .
8841	Generates a unique URLSegment from the title .
8842	Accepts console output as a string and returns an array of it split by newlines .
8843	Save the rendition .
8844	Create a log entry utility method for derived classes .
8845	Builds the bundle . It is only ever called once when the cache is empty .
8846	Return blog posts
8847	Returns blogs posts for a given date period .
8848	Renders the blog posts for a given tag .
8849	Renders the blog posts for a given category
8850	Displays an RSS feed of blog posts
8851	Returns a list of paginated blog posts based on the blogPost dataList
8852	Tag Getter for use in templates .
8853	Category Getter for use in templates .
8854	Fetches the archive year from the url
8855	Returns the current archive date .
8856	Increases the retry counter by one .
8857	Try to create relative symlink . Falling back to absolute symlink and finally hard copy .
8858	Try to create absolute symlink . Falling back to hard copy .
8859	Copies origin to target .
8860	Update the PublishDate to now if being published for the first time and the date hasn t been set to the future .
8861	Checks the publish date to see if the blog post has actually been published .
8862	Returns a yearly archive link for the current blog post .
8863	Renders the TextField and add button to the GridField .
8864	Augment queries so that we don t fetch unpublished articles .
8865	Invokes the task collection execution . The payload will be passed from task to task .
8866	Invokes the task execution .
8867	Logs with an arbitrary level . Specialized to pass a task instance .
8868	Notifies all attached runners to start execution with passed payload .
8869	Attaches a runner .
8870	Detaches a runner .
8871	Register an callable to an event .
8872	Create attachments part of the message .
8873	Create message headers .
8874	Add new attachment .
8875	Get MIME Type of attachment .
8876	Send email .
8877	Format a date using the DateTime class .
8878	Safe send signal method ; throws an exception if the signal send fails for any reason .
8879	Returns true if the path is relative to the users home directory .
8880	Returns true if the path points to an executable file .
8881	Validate a relative command path .
8882	Validate a global command by checking through system & provided paths .
8883	Send an XML request to the UPS API and return an array containing all available shipping options with rates
8884	Build an XML block for the packages to be included in the shipping rate
8885	Send the API request to the UPS webservice and return the results if there was no error . If there was an error return false .
8886	Parse the returned XML object from the UPS webservice .
8887	Make sure the options array contains all of the required fields . If not populate them with the default values .
8888	Process an incoming server request and return a response optionally delegating to the next middleware component to create the response .
8889	Set data key to value
8890	Get data value with key
8891	Ensure a value or object will remain globally unique
8892	Makes this to consume the services defined in provided container
8893	Registers a factory wrapping a Slim factory into a ZF2 factory
8894	Initialize the schema for special use cases and try our best to guess the table name primary_key and the blamable timestampable softDeletable status
8895	Initialize all default listeners
8896	Fetch an array of records based on an arbitrary WHERE call .
8897	Insert multiple rows into the table . Returns an array of multiple IDs .
8898	Updated a record based on the primary value .
8899	Update many records based on an array of primary values .
8900	Updated a record based on an arbitrary WHERE clause .
8901	Update all records
8902	Delete a row from the table by the primary value
8903	Alias for delete_by
8904	Delete many rows from the database table by multiple primary values
8905	Retrieve and generate a form_dropdown friendly array
8906	Fetch a count of rows based on an arbitrary WHERE call .
8907	Return the next auto increment of the table . Only tested on MySQL .
8908	MySQL DATETIME created_at and updated_at
8909	Serialises data for you automatically allowing you to pass through objects and let it handle the serialisation in the background
8910	Get callable as per given method
8911	filter data as per delete status
8912	Guess the primary key for current table
8913	Set WHERE parameters cleverly
8914	Decode a string to a integer .
8915	Encode an integer to a string .
8916	Parses common elements in subject added entry fields 600 - 655 .
8917	Retrieves data about a specific message
8918	Retrieves up to 100 messages offset by page
8919	Parse a name node personal or corporate main or added that might have authority information encapsulated .
8920	Parse a name node personal or corporate main or added that might have relators encapsulated .
8921	Parse a relationship node one that have links to other records encapsulated .
8922	Apply patch on target document .
8923	Generate patch for given source document via target document .
8924	Merge two patch documents .
8925	Maps a JSON string to a object
8926	Fetches configuration from the running app
8927	Fetches appropriate generator
8928	Add a generator to the factory
8929	Stack two icons on top of each other . The array must contain exactly 2 elements .
8930	Sanitize an element passed to the FA stack
8931	Process the requrested method into a route template
8932	load the dependencies for the module .
8933	Add the dependency processed template to our command array
8934	Fetches appropriate template
8935	Add a template to the factory
8936	Method to create a changeset
8937	Method to read a changeset
8938	Method to update a changeset
8939	Method to close a changeset
8940	Method to download a changeset
8941	Method to expand the bounding box of a changeset
8942	Method to query on changesets
8943	Method to upload a diff to a changeset
8944	Method to get user details
8945	Method to replace user preferences
8946	Method to change user preferences
8947	Method to upload GPS Traces
8948	Method to download Trace details
8949	Constructs absolute URL from Request object .
8950	Loads all services tagged as router and adds them to router service
8951	Method to get capabilities of the API
8952	Method to retrieve map data of a bounding box
8953	Method to create a node
8954	Method to create a way
8955	Method to create a relation
8956	Method to get ways for a Node element
8957	Method used by the DWG to hide old versions of elements containing data privacy or copyright infringements
8958	Method to validate a response .
8959	Return a javascript array .
8960	Method to send the request which does not require authentication .
8961	Parse CSV from the HTTP response received by Mink on the most recent request
8962	Extract array criteria from criterias .
8963	Extract date from filter criterias .
8964	Check if array|string criteria is matched .
8965	Return count query
8966	Check if currency code exists .
8967	Clean currency code
8968	Load all rates from file .
8969	Initializes file storage .
8970	Serialize rate to JSON string .
8971	Deserialize JSON string to Rate
8972	Extract requested page from filter criteria .
8973	Filter sources .
8974	Set Output Format
8975	Parse CSV content from a stream into a TableNode
8976	Get type of argument for exception messages .
8977	Set Parameter Override default configuration
8978	Builds rate key to speed up search .
8979	Initialize table schema where rates would be stored .
8980	Build rate from table row data .
8981	Check if date criteria is matched .
8982	Get configurations that matches given filter criteria .
8983	Assert that two tables are identical with the same columns in the same sequence
8984	Assert that two tables are equivalent ignoring column sequence
8985	Assert any custom comparison between two tables . Provide an array of comparator functions to support custom comparisons between cell values . The callback should return true if the two values match and false otherwise .
8986	Columns in the table .
8987	Parse the status line into its parts
8988	Retrieve the status line
8989	Returns a new template instance
8990	Returns all registered templates
8991	Builds an ElggEntity from a set of attributes
8992	Returns attribute names for an entity
8993	Makes a best guess on the number of occurances .
8994	Update internal session data
8995	Recursive method which converts raml resource into action and add it to controller
8996	Build namespace given ApiDefinition and base namespace
8997	Checks whether directory is empty or not
8998	Checks whether directory exists
8999	Check whether a particular file exist in directory
9000	Generate a platform specific path by replacing invalid directory separators
9001	Render the user column .
9002	Render the time column .
9003	Extra controls to be displayed between bulk actions and pagination
9004	Display a monthly dropdown for filtering items
9005	Get all the possible levels .
9006	Builds a field from an array of options
9007	Sort by priority
9008	Pripravi sloupec pro porovnani
9009	Nastavi typ na decimal
9010	Nastavi typ na char
9011	Nastavi typ na tinytext
9012	Nastavi typ na text
9013	Nastavi typ na mediumtext
9014	Nastavi typ na longtext
9015	Get Root View Model
9016	Mark all as read
9017	Get words in a string .
9018	Get Action words .
9019	Get keywords .
9020	Get unique words .
9021	Get words by complexity .
9022	Get stop words .
9023	Has confirmation .
9024	Has denial content .
9025	Checks if string has a url .
9026	Check if string has email .
9027	Check if string is question .
9028	Returns random entity or collection of entities
9029	Error processing method
9030	Error processing for exceptions
9031	Try to call all services in sequence .
9032	Event triggered during metadata loading
9033	Adds mapping to single field
9034	Ceate a new resource or get exisitng with same key
9035	persist - Persists a thread to the database .
9036	insert - Inserts a new thread into the database using the specified hydrator .
9037	update - Updates an existing thread in the database .
9038	Vrati vysledek dotazu
9039	Vrati radek podle hash sloupce
9040	Vrati nejvetsi pozici
9041	get the env value if not exists
9042	Empty current environment
9043	This function provides the real logging function .
9044	Checks whether a rotation of log file is necessary
9045	Get the Configure config
9046	Define an input type
9047	Returns a handler classname
9048	Render the field elements
9049	Render the buttons elements
9050	Checks the given level
9051	Format the message to log and return a memory stream of it
9052	Create JSON compatible data for menu display
9053	Recursive method to handle tree nested menus
9054	Vytvori spojovou tabulku
9055	Zmena nazvu sloupce
9056	Zmeni nazvy sloupcu tabulky
9057	Prida primarni klic
9058	Nastavi cizi klic
9059	Nastavi hodnotu sloupce na unikatni
9060	Nastavi primarni klic
9061	Vrati nazev tabulky a jeji klic
9062	Vrati schema tabulky
9063	Vrati schema klicu
9064	Attach one or more listeners
9065	Check Current MVC View Resolver To Match With Class Strategy
9066	persist - persists a message to the database .
9067	Hook into the creating method to set the key to be a UUID
9068	Converts a value of unknown type to a string .
9069	Purge all records older than n days .
9070	Parses each part of an identifier parts array using the given format and merges the new parts into the array
9071	Prepare exception for rendering .
9072	Runs the DynamoDB query with limit + 1 and removes the last item from result if item count exceeds page limit
9073	Compile the routes into a displayable format .
9074	Get the route information for a given route .
9075	Adds a rule .
9076	Adds a tag for all rules .
9077	Adds a rule collection at the end of the current set by appending all rules of the added collection .
9078	Parse the context prefix variables to determine in which path context the request has been performed .
9079	Parse the prepared uri into its parts
9080	Parse a single http header element into parameter for the request object
9081	Parse the server variables which represents HTTP headers into parameter values for the request object
9082	Parse the remote host variables to determine client address
9083	Parse the super globals for request parameters
9084	Add an item to the container .
9085	Get the alias for an abstract if available .
9086	Attain To Name based on strategy found in class
9087	Attach a name resolver strategy
9088	Retrieve the whole memory string content
9089	Returns form body HTML
9090	Checks if the form contains file inputs
9091	Normalizes given render options .
9092	Sets which partial view script to use for rendering menu
9093	Returns partial view script to use for rendering menu
9094	Full action script Validates the input updates the entity and forwards users with feedback
9095	Validate user input
9096	Updates entity information with user input values
9097	! Because we wan t share by default set to false
9098	Get Theme Manager Service and init them
9099	Creates a service at the given endpoint
9100	Bind the server socket to the given endpoint
9101	Listen to the binded socket endpoint
9102	Build the sql query .
9103	Parse a partial search for a message .
9104	Parse the user where .
9105	Parse the time query .
9106	Find Matched Theme and return object
9107	Get layout name according to MvcEvent on EVENT_DISPATCH
9108	Resolve to theme name by Aggregate services
9109	Get Resolver Object used by Locator
9110	Get themes folder dir from config
9111	Get default Manager theme_locator config
9112	setVisitTime - Sets the visit time .
9113	Set up the default values
9114	Init the application
9115	Set the default controller and action
9116	Register a new view
9117	Unregister a given view
9118	Get the best view for request
9119	Register a new controller class
9120	Register a new Router
9121	Load headers from remote and return it
9122	Prepare the request buffer
9123	Retrieve and parse the response
9124	Append the payload buffer to the request buffer
9125	Handle a header line
9126	Perform the request
9127	Check the connection availability
9128	Check whether the readen bytes amount has reached the content length amount
9129	Apply a stream interceptor
9130	Factory method for chainability
9131	Loads a resource .
9132	Validates the rule configuration .
9133	Route the existing request into a new controller
9134	Set Last Post
9135	Parse a URI into a Url
9136	Clears all tags for a given name .
9137	Invoke a callable and inject its dependencies .
9138	Inherit Doc from Interfaces \ Formatter
9139	Parse an uri into its request parts
9140	Parse uri directly from request uri
9141	Get value of particular parameter
9142	Return s the array with the params .
9143	Return s the param with the passed name .
9144	Generate a random string with specific length
9145	Reset the locale settings back to saved vars
9146	Retrieve value from session storage for corresponding key
9147	Opens a socket
9148	Mark as read
9149	Mark as unread
9150	gets users list
9151	gets users list for Select form element
9152	Render an entity profile
9153	Retrieve the url as string
9154	Parse the parameters of action
9155	Parse the settings out of annotations
9156	Get the controller prepared for service
9157	Call the action
9158	Add the controls injected into view parameters
9159	Redirects the current request to another site
9160	Adjust the headers by injecting default values for missing keys .
9161	Try to parse line as header and add the results to local header list
9162	Adjust number of bytes to read according content length header
9163	Retrieve an given header
9164	Parses a node from a loaded XML file .
9165	Returns a field collection
9166	Get form validation status
9167	Save validation status of the field
9168	Parse a URI into a Endpoint
9169	Set postTime .
9170	Update Company profile
9171	Return component plugins configuration .
9172	Return component helpers configuration .
9173	Used on form validation to transform menu nodes in real MenuItem
9174	Transform hierarchical list to flat array for easing comparison
9175	Get referer URL based on a route
9176	Return s the array with the plugins of the operation to use .
9177	Map s the passed value to a boolean .
9178	Return s the database configuration with the passed ID .
9179	Return s the database configuration .
9180	Retrieve the settings from view
9181	Forget the cached value .
9182	Remember the value .
9183	Forget something by key .
9184	get the cache key .
9185	Deserializes the data converts it into an array and returns it .
9186	Merge the additional params in the passed configuration data .
9187	Embed campaigns into the newsletter and return the updated html
9188	Connect to remote endpoint
9189	Prepare a new or cached presenter instance .
9190	Render All Messages
9191	Inherit Doc from Interfaces \ Converter
9192	Init Theme Manager To Work
9193	Initialize theme object if attained
9194	Add a child model
9195	Set dir to folder that store themes
9196	Get Theme Config Object Entity
9197	Retrieve the category by the set url
9198	Get a request token and configures a Twitter authorization URL that the user will be redirected to for authentication .
9199	Get Access tokens from the user in exchange of oauth_token and oauth_verifier and return them .
9200	Upload media to Twitter and return a comma separated string containing their media ID s to send with a status .
9201	Creates and returns an encoded bearer token credentials to be used for making calls to Twitter .
9202	Calls Twitter and gets a bearer token . This bearer token is valid until it gets invalidated .
9203	Make a GET request to the endpoint . Also appends query params to the URL .
9204	Get an item from the Config . json file .
9205	Public method used for creating a new blank seed file .
9206	Helper method for seeds to use when loading data from many tables .
9207	Helper function to import a set of records for a single Table .
9208	Helper method that clears all records from the provided Table instance .
9209	Helper method to find the primary key for a record .
9210	Helper method to print a validation errors array in a console - readable format .
9211	Determines which file will be executed .
9212	Generates a new empty seed file if one does not already exist .
9213	Configure command line options and arguments .
9214	Creates a new StaticPage model . If creation is successful the browser will be redirected to the view page .
9215	Updates an existing StaticPage model . If update is successful the browser will be redirected to the view page .
9216	Deletes an existing StaticPage model . If deletion is successful the browser will be redirected to the index page .
9217	Parse the API response link headers into pagination information
9218	Convert a page number to an array key
9219	Request a page of responses from the API
9220	Request all pages from API
9221	Whether an offset exists
9222	String representation of CanvasArray
9223	Construct a CanvasArray from its string representation
9224	Set up a new API access token to access this instance
9225	Preprocess API call parameters before use
9226	Make a GET call to the API
9227	Make a POST call to the API
9228	Make a PUT call to the API
9229	Make a DELETE call to the API
9230	Make a PATCH call to the API
9231	Lists all Post models .
9232	Displays a single Post model .
9233	Creates a new Post model . If creation is successful the browser will be redirected to the view page .
9234	Updates an existing Post model . If update is successful the browser will be redirected to the view page .
9235	Creates a new Banner model . If creation is successful the browser will be redirected to the view page .
9236	Updates an existing Banner model . If update is successful the browser will be redirected to the view page .
9237	Returns the full exception message when an ambiguity arises .
9238	Returns the textual representation of the path .
9239	Returns true if this foreign key represents an inheritance relationship i . e . if this foreign key is based on a primary key .
9240	Renders language switcher dropdown
9241	Merge current GET parameters with the language string
9242	Calls the next middleware .
9243	Set the cookie and the locale
9244	Loads additional config files that require the language to be set correctly .
9245	Parse a group of dynamic routes
9246	Replace the first occurrence of a string
9247	Convert to class name .
9248	Convert to camel case .
9249	Generate a URL for the given route
9250	Boots the Application .
9251	Adds a compiler pass .
9252	Initializes a new container .
9253	Returns a ContainerInitializer .
9254	Handles a Request to convert it to a Response .
9255	Gets the root directory .
9256	Sets a service within the service container .
9257	Gets a service from the service container .
9258	Dumps the service container to PHP code in the cache .
9259	Adds a named route to the data generator
9260	Ensures route data does not contain any Closures
9261	Map a handler to the given methods and route
9262	Add an un - named route to the collection
9263	Add a named route to the collection
9264	Returns a callable for the given controller .
9265	Inicializa y registra todos los providers
9266	Convert to space format . Call optional function on callback .
9267	Conversion recipe .
9268	Set task timeout in minutes
9269	Set task phase
9270	Load the given ContainerBuilder with its configuration .
9271	Set current uri to use for api calls
9272	Converts data to multipart option for guzzle
9273	Defined by Zend_Filter_Interface
9274	Retrieve configuration for the service manager
9275	On bootstrap .
9276	Validates fields if the allow_extra_fields property is false or allow_fields are set
9277	Renders rest response .
9278	Find jobs .
9279	Save job .
9280	Delete jobs .
9281	Get pending cron jobs .
9282	Get running cron jobs .
9283	Checks whether we need to recompile the specified LESS file .
9284	Checks for import statements in the specified LESS file and checks each of them and their imports recursively for changes since the specified CSS file was changed . The checking is done by the passed callback .
9285	Compiles the given LESS file into the given CSS .
9286	Create database table .
9287	Drop database table .
9288	Truncate database table .
9289	Returns duration of the job s execution .
9290	Will take an associative array representing a document and apply the serialization metadata rules to that array .
9291	Hook loadDataContainer add Grid16 CSS
9292	Builds configuration tree for endpoints .
9293	Returns the URL to the published assets folder .
9294	get the default theme
9295	Build fields from array
9296	Handles update action
9297	Update a new resource
9298	Finds category with forum
9299	Action to process create batch call .
9300	Set options .
9301	Set time in minutes for how long ahead CRON jobs have to be scheduled . .
9302	Set time in minutes for how long it takes before the scheduled job is considered missed .
9303	Set time in minutes for how long to keep records about successfully completed CRON jobs .
9304	Set time in minutes for how long to keep records about failed CRON jobs .
9305	Set TRUE if events are emitted during job processing .
9306	Set TRUE if JSON API is allowed .
9307	Set JSON API security hash .
9308	Register application services .
9309	Delete a resource
9310	Create or update a resource
9311	Get a simple query
9312	Main action .
9313	Print info about current status .
9314	Clear storage .
9315	Returns acceptance type based on given request .
9316	Creates a crop filter
9317	Performs the ezcImageConverter transformation
9318	Adds a rotation filter
9319	Compile the view s markdown with given contents .
9320	Get the echo methods in the proper order for compilation .
9321	Compile markdown into valid html .
9322	Register the CommonMark Environment .
9323	Register the CommonMark DocParser .
9324	Register the CommonMark HTML Renderer .
9325	Register the CommonMarkConverter .
9326	Register the service provider engines .
9327	Register the Markdown engine implementation .
9328	Register the Markdown Php engine implementation .
9329	Register the Markdown Blade engine implementation .
9330	Returns a resize filter
9331	Apply the filter on the specified region and return the new resource
9332	Adds the field to the underlying database .
9333	Answers a form field instance for automatic form scaffolding .
9334	Gets angle s value as degrees .
9335	gets angles as radians
9336	Gets number of turns
9337	Tests current angle with another to know if there are complementary together
9338	Test if current angle is supplementary with another .
9339	Returns the value from the specified key .
9340	Loads the configuration from a specified directory .
9341	Sets the value to the specified key .
9342	Puts all values into the matrix .
9343	Adds a row to populate step by step the matrix
9344	Adds a column to populate step by step the matrix
9345	Gets the row having the given index .
9346	Gets the column having the given index .
9347	Tests whether the current matrix is diagonal or not .
9348	Tests whether the current matrix is the same as the given one .
9349	Tests whether the current matrix can be multiply with the given one .
9350	Returns the transpose of the current matrix .
9351	Adds the given matrix with the current one to give another new matrix .
9352	Gets the cofactor matrix
9353	Gets inverse matrix .
9354	Gets sub matrix from current .
9355	Computes the determinant .
9356	Returns an instance with the provided URI .
9357	Returns an instance without the specified header .
9358	Retrieve the module path
9359	Converts the result into a \ Psr \ Http \ Message \ ResponseInterface instance .
9360	Dispatches the middlewares of the specified request if there are any .
9361	Computes and returns the norm .
9362	Computes and returns the argument .
9363	Add value to the current complex number creating new complex number .
9364	Substracts complex number z from the current one .
9365	Multiplies current complex number with another .
9366	Divides current complex number with another .
9367	Tests whether given z complex number is equal to the current complex number .
9368	Returns the PHP s global variables .
9369	Checks on what object will be defined to container .
9370	Handles the ServerRequestInterface to convert it to a ResponseInterface .
9371	Adds the specified integrations to the container .
9372	Emits the headers from response and runs the application .
9373	Registers the instance as an error handler .
9374	Returns the middleware dispatcher to be used .
9375	Renders a file from a specified template .
9376	Checks if the specified file exists .
9377	Extracts the contents of the specified file .
9378	Returns an array of filepaths from a specified directory .
9379	Parses the specified route and make some checks .
9380	Retrieved the specified route from the result .
9381	Sets a new instance to the container .
9382	Answers a font icon tag with the given class names and optional color .
9383	Answers the class name for the specified identifier .
9384	Answers an associative array of icon IDs mapped to icon names .
9385	Answers an array of icons grouped into their respective categories .
9386	Returns a specific route based on the specified HTTP method and URI .
9387	Adds a listing of routes specified for RESTful approach .
9388	Sets a prefix for the succeeding route endpoints .
9389	Parses the route .
9390	Derives a sort value for a record to be inserted before all items .
9391	Derives a sort value for a record to be inserted after all items .
9392	Returns a clause to be used in queries to omit rows which supposed to be skipped in accordance to config .
9393	Returns an instance with the specified status code and optionally reason phrase .
9394	Executes the command on your machine .
9395	Builds the command .
9396	Sets option names that are considered safe in order to bypass escaping .
9397	Escapes the set of option values .
9398	Chooses a Builder to use depending on the operating system and which program is installed .
9399	Computes the factorial and returns the result internally .
9400	Stores log messages to sentry .
9401	Sets the HTTP components .
9402	Builds the growlnotify command to be executed .
9403	Collects the specified components .
9404	Prepares the component and sets it to the collection .
9405	Adds a new middleware or a list of middlewares in the stack .
9406	Checks if the approach of the specified middleware is either single or double pass .
9407	Returns the middleware as a single pass callable .
9408	Resolves the whole stack through its index .
9409	Transforms the specified middleware into a PSR - 15 middleware .
9410	Collects the specified routes and generates a data for it .
9411	Returns exceptions based on catched error .
9412	Retrieves the authority component of the URI .
9413	Generates a \ Psr \ Http \ Message \ UriInterface from server variables .
9414	Compute the variance and return the result .
9415	Set precision for all returned results .
9416	Give the maximal value of the curve for the current sigma and mu .
9417	Gets the full width at half maximum .
9418	Function that returns normal distribution value for given x .
9419	Simulates samples following normal distribution
9420	Answers an HTTP response containing JSON results matching the given search parameters .
9421	Returns the remaining contents in a string
9422	Returns stream metadata as an associative array or retrieve a specific key .
9423	Returns the size of the stream if known .
9424	Write data to the stream .
9425	Relative frequency like frequency but divide each but total amount .
9426	Builds the terminal - notifier command to be executed .
9427	Renders a template .
9428	Updates the CMS fields of the extended object .
9429	Answers an array of font icon class names for the extended object .
9430	Renders the font icon tag for the HTML template .
9431	Returns a listing of routes available .
9432	Gets a random float numbers inside the given range .
9433	Check helper for some method to tests their arguments .
9434	Sets min and max value for random rho
9435	Sets min and max value for random theta angle
9436	Gets one complex number randomly
9437	Get many Complex numbers .
9438	Resets current generator to be able to used other range into other context .
9439	Creates an alias for a specified class .
9440	Returns the value of the specified argument .
9441	Gets at each call a random number into the defined range .
9442	Gets many random items without replacement .
9443	Set the pack s options from the app container .
9444	Return the name of the pack . It s the short class name without the Pack suffix .
9445	Return a default mapping for the pack s entities .
9446	The path of the configs .
9447	A list of symlinks to add .
9448	Returns the the pack namespace path .
9449	Checks if the specified method is a valid HTTP method .
9450	Returns an array of two elements .
9451	Helper function log details
9452	Executa Queries .
9453	Facade para query obtendo resultados em objeto .
9454	This is the recursive parser .
9455	SphinxSearch Queries Array .
9456	Offsets the result list by the number of places set by the count ; .
9457	Adiciona um atributo para contagem de resultados .
9458	Map the admin routes .
9459	Return tickets by an array of Ids
9460	Batch delete tickets
9461	Adiciona um valor a ValuesFilter existente .
9462	Maps watcher events to FilesystemEvents
9463	Bind data to the view .
9464	Register the LogViewer Package .
9465	Detalhes dos resultados para cada palavra .
9466	Check the APACHE requirements .
9467	Attachable constructor .
9468	Map routes .
9469	Register LogViewer routes .
9470	loading mounted groups
9471	Processa os valors de resultado .
9472	Delete action is succeed
9473	Delete action is faild
9474	Read the next character from the supplied string . Return null when we have run out of characters .
9475	Remove a single set of double - quotes from around a string . abc = > abc abc = > abc abc = > abc
9476	Get Startdate of detailed logging
9477	Get TOP Downloadlist
9478	Get Calendar Day Downloads
9479	Response which conteins just a message
9480	Set error code in our result
9481	Response which contains status and data
9482	Prepare the permissions .
9483	Convert to an object
9484	Load data from the past array into local properties
9485	Checks if this entity is creatable
9486	Checks if the fields given are all assigned
9487	Seed all modules .
9488	Acesso ao range de paginas para navegacao .
9489	Get file data
9490	Get file data value
9491	Get file list data
9492	Get the application size .
9493	Get the folder size .
9494	Format the size for humans .
9495	Factory e Configuracao padrao de um SphinxClient .
9496	Generic function for getting a collection of entities
9497	Generic function for getting one entity
9498	Create an entity
9499	Process request into a response object
9500	See if the supplied event identifier is supported by Watcher
9501	Watch file events and rerun peridot when changes are received
9502	Run an isolated process of Peridot and feed results to the output interface .
9503	Join an array of arg parts into a command .
9504	Listen for Peridot events
9505	Show the LogViewer Dashboard .
9506	List all logs .
9507	Show the log entries by date .
9508	Filter the log entries by date and level .
9509	Show the log with the search query .
9510	Download the log .
9511	Delete a log .
9512	Get the LogViewer permissions .
9513	Uso amigavel da definicao de Match Mode .
9514	Adiciona multiplas queries a partir de uma query matriz e chaves usadas na busca facetada .
9515	Configure Cascaded Monolog logger and use it .
9516	Create and retrieve database settings .
9517	When you overwhelm an SQLite database with overlapping inserts and updates there s a chance it may become corrupted . If it does I ve been able to recreate it using this method .
9518	Gets the usage of the ParameterClosure as string .
9519	Retrieve the properties for this parameter as a string .
9520	Retrieve the alias usage as a String .
9521	Add an alias and associate it with a prefix . If no prefix is defined the default for the cluster will be used .
9522	Same as updateDoc except that doc is added to collection if it does not exist .
9523	Parse the config and place them into protected variables
9524	Deploy to the configured branch
9525	Parse the arguments .
9526	Validates the parameters passed to the initializer and continues the parse if it sees fit .
9527	Parse every element in the loaded parameters .
9528	Parse a single parameter and increment the parser .
9529	Validates the parameter list by verifying that it contains all required parameters . Returns the ParameterClosure if a parameter is missing else it will return true .
9530	Initialize the ParameterParser with new data .
9531	Parses the parameter with the default closure and increments the parameter parser . If - 1 is returned by the default closure the parameters will be invalidated .
9532	Preload alias ParameterClosures into the system .
9533	Preloads the parameters and moves any parameters surrounded by single or double quotes to their own parameter .
9534	Parse all parameters between two matching single or double quotes to a single element in the parameter array .
9535	Parse a parameter belonging to a prefix that has a variadic structure in it s closure definition and increment the parameter parser .
9536	Check if the prefix is defined in the parameter cluster .
9537	Attempts to find the prefix associated with the parameter . If no prefix is found null will be returned .
9538	Retrieves the real name that will be displayed in the results for a parameter .
9539	Attempts to find the closure associated with the parameter based on prefix . If no prefix is found null will be returned .
9540	Get the ParameterClosure object associated with a parameter . If no ParameterClosure is found for the parameter return null .
9541	Decode a JSON response .
9542	Run docker runner sync action
9543	Get all messages
9544	Retrieve which values from a Parameter you would like displayed in the full usage output .
9545	Create an SQLite FTS4 virtual table for fulltext searching .
9546	Get the total number of search results .
9547	Ranks search results in order of relevance . Used internally and only made public because it has to be .
9548	Validate the file
9549	Set PDO object
9550	Get PDO object
9551	Set order by
9552	Set allowed mime types .
9553	Set allowed extensions
9554	Sets namer .
9555	Make upload handler
9556	Add a parameter closure .
9557	Add an array of parameters .
9558	Retrieves the full usage of the ParameterCluster as a string .
9559	Resolve a handler .
9560	Renders the close button .
9561	Transform an exception handler s response into a Response object .
9562	Check if a handler s argument typehint matches an exception .
9563	Call an exception handler .
9564	Create a FatalErrorException out of the information stored on the last PHP error .
9565	Add a before hook .
9566	Add an after hook .
9567	Push a configurator on top of the stack . The configurators will be executed when the application is booted . If the application is already booted the configurator will be executed at once .
9568	Invoke a single configurator .
9569	Set the application s container .
9570	Add a middleware to the application .
9571	Boot a console application .
9572	Boot the application .
9573	Register all of the application s service providers .
9574	Register a single service provider .
9575	Resolve the stack builder .
9576	Resolve the HTTP kernel .
9577	Registers a specific Materialize plugin and the related events
9578	Registers a specific Materialize plugin to jquery and the related events
9579	Set a channel instance .
9580	Define a deferred channel . The callback will be invoked and the return value passed to setChannel . The return value must implement Psr \ Log \ LoggerInterface .
9581	Get a specific channel .
9582	Get extra validation fields .
9583	Add a cached route .
9584	Get the Route object corresponding to a given request .
9585	Remove ugly parts of a url to make it nice
9586	Scaffold the ExternalURLField for this ExternalURL
9587	Gets attribute value .
9588	Checks whether an attribute exist under a specific node .
9589	Renders default browser drop - down list
9590	Creates radio button with gap
9591	Renders a list of radio buttons with gap
9592	Renders filled in checkbox
9593	Renders a list of filled checkboxes
9594	Make the session handler .
9595	Make the session storage .
9596	Make the session object .
9597	Flash an array of messages to the session .
9598	Flash input to session .
9599	Create a redirect response .
9600	Returns the length of the vector .
9601	Adds two vectors together .
9602	Computes the dot product or scalar product of two vectors .
9603	Computes the cross product or vector product of two vectors .
9604	Computes the scalar triple product of three vectors .
9605	Computes the vector triple product of three vectors .
9606	Multiplies the vector by the given scalar .
9607	Project the vector onto another vector .
9608	Returns the angle between the two vectors .
9609	Checks that the vector spaces of the two vectors are the same .
9610	Get the URL to a named route .
9611	Get the URL to an asset .
9612	Get the root URL . Used to generate URLs to assets .
9613	Register Guzzle with Silex
9614	Authenticate the user based on an API key
9615	Adds a manager registry .
9616	register command for our application
9617	register our event subscriber
9618	register stack middleware
9619	Calls an HTTP POST function to verify if the user s guess was correct
9620	Submits an HTTP POST to a reCAPTCHA server
9621	Encodes the given data into a query string format
9622	Get a PDO instance .
9623	Get the configuration array for a specific connection .
9624	Make a handler .
9625	Get resource by id
9626	Get all from resource
9627	Matches given variables against given matchers and returns if all vars pass all matchers .
9628	Validates given params against the required ones and checks for matcher violations afterwards .
9629	Returns the identifier string for given route .
9630	Verify that uploaded file is the same as origin file and if so move to public folder
9631	Set a given field setting . Appends the option to the settings or overrides the existing value .
9632	Return just one custom setting or empty string if it does not exist .
9633	How to save the data submitted in this field into the database object which this field represents .
9634	Return a FormField .
9635	Read from a file .
9636	Write to the file .
9637	Handles API key authentication .
9638	Set additional attributes
9639	Rebuild url on save
9640	Add config scheme if missing . Remove the parts of the url we don t want . Set any defaults if missing . Remove any trailing slash and rebuild .
9641	Server side validation using a regular expression .
9642	Resolve possible paths for a relative path .
9643	Creates a driver based on original driver that is being used by Doctrine .
9644	Maps resulting params of a regex match to name = > value array .
9645	Create a new PDO instance .
9646	Builds a route using the provided configuration .
9647	Returns a route having removed all formerly set matchers for the param with given name .
9648	Returns the constant values of the given class when its name matches the given regex .
9649	Tries to get a mapping for a given class
9650	Deletes all the options attached to this field before deleting the field . Keeps stray options from floating around .
9651	Duplicate a pages content . We need to make sure all the fields attached to that page go with it .
9652	Return the form field for this object in the front end form view .
9653	Add a loader .
9654	Get the loader for a given path .
9655	Override an existing route .
9656	Merge more routes into the configuration .
9657	Mount the configuration .
9658	Create Writer \ IWriter .
9659	Create Reader \ IReader .
9660	Identify file type using automatic Reader \ IReader resolution .
9661	Create Reader \ IReader for file using automatic Reader \ IReader resolution .
9662	Guess a reader type from the file extension if any .
9663	Register a writer with its type and class name .
9664	Register a reader with its type and class name .
9665	Sets a custom header to be sent together with the request . Throws an exception if header s name is not at least 1 char long .
9666	Write Fill .
9667	Write Gradient Fill .
9668	Write Pattern Fill .
9669	Write Font .
9670	Write Border .
9671	Write Cell Style Dxf .
9672	Write BorderPr .
9673	Write NumberFormat .
9674	Get an array of all conditional styles .
9675	Get an array of all fills .
9676	Get an array of all fonts .
9677	Get an array of all borders .
9678	Get an array of all number formats .
9679	Initializes this unsubscription from an XML representation .
9680	Returns the name to display for given column name .
9681	Initialization of the contact from a simple xml element . NOT YET IMPLEMENTED .
9682	Initializes this click from an XML representation .
9683	Country Name from Code
9684	Get the current storage
9685	Set the current storage
9686	Concatenate values of a given key as a string .
9687	Convert the object into something JSON serializable .
9688	Count determinants .
9689	Get the permission object by type descriptor .
9690	Compiles a Katar file to a PHP file and caches the output as HTML . Returns the HTML result of executing the Katar template with the given environment .
9691	Compiles a Katar file to a PHP file returning the compiled code
9692	Compiles a string containing Katar source code onto PHP
9693	Get Token .
9694	Validate that the current file is an HTML file .
9695	Apply inline css inline style .
9696	Creates a transaction
9697	Finds a transaction type by name
9698	Ask for HTML text .
9699	Ask for plain text .
9700	Generate the text .
9701	Add a new XF writer .
9702	Add a font to added fonts .
9703	Alter color palette adding a custom color .
9704	Assemble worksheets into a workbook and send the BIFF data to an OLE storage .
9705	Calculate offsets for Worksheet BOF records .
9706	Store user defined numerical formats i . e . FORMAT records .
9707	Write a DEFINEDNAME record for BIFF8 using explicit binary formula data .
9708	Write a short NAME record .
9709	Stores the CODEPAGE biff record .
9710	Write Excel BIFF WINDOW1 record .
9711	Writes Excel BIFF BOUNDSHEET record .
9712	Write Internal SUPBOOK record .
9713	Writes the Excel BIFF EXTERNSHEET record . These references are used by formulas .
9714	Write Excel BIFF STYLE records .
9715	Writes Excel FORMAT record for non built - in numerical formats .
9716	Stores the COUNTRY record for localization .
9717	Write the RECALCID record .
9718	Stores the PALETTE biff record .
9719	Writes the MSODRAWINGGROUP record if needed . Possibly split using CONTINUE records .
9720	Set Escher object .
9721	Returns an array of all known samples .
9722	Write documents .
9723	Returns the temporary directory and make sure it exists .
9724	Returns the filename that should be used for sample output .
9725	Return a random temporary file name .
9726	Log a line about the write operation .
9727	Log a line about the read operation .
9728	Initialization of the schedule from a simple xml element .
9729	Date and time representation of this wrapper .
9730	Set office max allowed Dimensions
9731	Validate that the current file is a SYLK file .
9732	Get font record data .
9733	Set ARGB .
9734	Set RGB .
9735	Get indexed color .
9736	Set Worksheet .
9737	Set Width .
9738	Set Fit To Height .
9739	Set Fit To Width .
9740	Get print area .
9741	Is print area set?
9742	Add a new print area to the list of print areas .
9743	Set the address country
9744	Set the address state
9745	Set the address city
9746	Set the address quarter
9747	Set the address time zone
9748	Retorna o status de um pedido
9749	Calculate some numbers .
9750	Saves all the PPS s WKs .
9751	Find IMDB images save them and replace them in posts .
9752	Set posts to review .
9753	Get the systems temporary directory .
9754	Assert that given path is an existing file and is readable otherwise throw exception .
9755	Reports an error if the target is not of the specified type . This method can also be used as language chain .
9756	Reports an error if the target is not greater than the specified value .
9757	Reports an error if the target is not less than the specified value .
9758	Reports an error if the target is not equal to the specified value within a given delta range .
9759	Reports an error if the target does not contain an element or a substring .
9760	Reports an error if the target does not contain only variables of a given type .
9761	Reports an error if the target does not contain only instances of a given class .
9762	Reports an error if the target is not empty . For arrays strings and Countable instances it checks the length . For objects it gets the count of accessible properties according to scope .
9763	Reports an error if the target does not end with the specified suffix .
9764	Reports an error if the target and the specified value are not equal .
9765	Reports an error if the file or directory specified by the target does not exist .
9766	Reports an error if the target is not an instance of the specified class .
9767	Reports an error if the target is not greater than or equal to the specified value .
9768	Reports an error if the length of the target is not the expected one .
9769	Reports an error if the target does not match the specified regular expression .
9770	Reports an error if the target does not match the specified format string .
9771	Reports an error if the target is not less than or equal to the specified value .
9772	Reports an error if the target has not a given property or key .
9773	Reports an error if the file or directory specified by the target is not readable .
9774	Reports an error if the target does not pass a given truth test .
9775	Reports an error if the target does not start with the specified prefix .
9776	Reports an error if the function target does not throw a given exception .
9777	Reports an error if the target is greater than or less than the specified bounds .
9778	Reports an error if the file or directory specified by the target is not writable .
9779	Asserts that the specified target matches the specified constraint .
9780	Returns the length of the specified value .
9781	Sets a value indicating whether this assertion has the specified flag .
9782	Parses an IF expression
9783	Parses an EXPRESSION
9784	Parses an HTML Expression
9785	Parses a FOR expression
9786	Parses an ESCAPE expression
9787	Parses a FILTERED_VALUE expression
9788	Set Conditions .
9789	Set the Bottom Right position of the chart .
9790	Get cell value with formatting .
9791	Get calculated cell value .
9792	Set cell data type .
9793	Does this cell contain Data validation rules?
9794	Get Data validation rules .
9795	Set Data validation rules .
9796	Does this cell contain a Hyperlink?
9797	Get Hyperlink .
9798	Set Hyperlink .
9799	Compare 2 cells .
9800	Identify to PhpSpreadsheet the external library to use for rendering charts .
9801	Set default options for libxml loader .
9802	Get default options for libxml loader . Defaults to LIBXML_DTDLOAD | LIBXML_DTDATTR when not set explicitly .
9803	Set Created .
9804	Set Modified .
9805	Read a generic record .
9806	Read BSE record .
9807	Read BlipJPEG record . Holds raw JPEG image data .
9808	Read OPT record . This record may occur within DggContainer record or SpContainer .
9809	Read ClientTextbox record .
9810	Read ClientAnchor record . This record holds information about where the shape is anchored in worksheet .
9811	Send a GET request with query params .
9812	Send a PUT request with raw data .
9813	Send a DELETE request with raw data .
9814	Adds a number of expressions to a blacklist .
9815	Set worksheet .
9816	Wrapper method for writeRaw .
9817	Set View .
9818	Execute the regression and calculate the goodness of fit for a set of X and Y data values .
9819	Set segment size
9820	Get a specified AutoFilter Column .
9821	Shift an AutoFilter Column Rule to a different column .
9822	Write relationships to XML format .
9823	Write workbook relationships to XML format .
9824	Write worksheet relationships to XML format .
9825	Write drawing relationships to XML format .
9826	Write Override content type .
9827	Set Password .
9828	Returns the name of the route used for the url that corresponds to the creation of an associated model .
9829	Returns the name of the route used for the index url of an associated model .
9830	Returns the name of the route used for the menu url of an associated model .
9831	Route an Auja configuration for a model to a controller .
9832	Set RevisionsPassword .
9833	Set WorkbookPassword .
9834	Convert pixels to column width . Exact algorithm not known . By inspection of a real Excel file using Calibri 11 one finds 1000px ~ 142 . 85546875 This gives a conversion factor of 7 . Also we assume that pixels and font size are proportional .
9835	Create a new image from file . By alexander at alexauto dot nl .
9836	Open file for reading .
9837	Create an HTTP request object with a JSON body that is authenticated with a pre - shared key . The authentication tag is stored in a Body - HMAC - SHA512256 header .
9838	Create an HTTP response object with a JSON body that is authenticated with a pre - shared key . The authentication tag is stored in a Body - HMAC - SHA512256 header .
9839	Create an HTTP request object with a JSON body that is encrypted with a pre - shared key .
9840	Create an HTTP response object with a JSON body that is encrypted with a pre - shared key .
9841	Create an HTTP request object with a JSON body that is encrypted with the server s public key .
9842	Create an HTTP response object with a JSON body that is encrypted with the server s public key .
9843	Creates a JSON - signed API request to be sent to an API . Enforces hard - coded Ed25519 keys .
9844	Creates a JSON - signed API response to be returned from an API . Enforces hard - coded Ed25519 keys .
9845	Encrypt your HTTP request with a pre - shared key .
9846	Encrypt your HTTP request with the server s public key so that only the server can decrypt the message .
9847	Encrypt your HTTP response with the client s public key so that only the client can decrypt the message .
9848	Ed25519 - sign a request body .
9849	Ed25519 - sign a response body .
9850	Adapter - specific way of converting a string into a StreamInterface
9851	Create a password hash from a given string .
9852	Set Path .
9853	Sets the expiration time for this cache item .
9854	General storage function .
9855	Writes Excel BOF record to indicate the beginning of a stream or sub - stream in the BIFF file .
9856	Excel limits the size of BIFF records . In Excel 5 the limit is 2084 bytes . In Excel 97 the limit is 8228 bytes . Records that are longer than these limits must be split up into CONTINUE blocks .
9857	Does this cell contain valid value?
9858	Does this cell contain valid value based on list?
9859	Extract binary stream data .
9860	Read 4 bytes of data at specified position .
9861	Write Dimension .
9862	Write SheetFormatPr .
9863	Write Cols .
9864	Write DataValidations .
9865	Write Hyperlinks .
9866	Write ProtectedRanges .
9867	Write MergeCells .
9868	Write PrintOptions .
9869	Write PageMargins .
9870	Write PageSetup .
9871	Write Breaks .
9872	Write SheetData .
9873	Write Drawings .
9874	Write LegacyDrawing .
9875	Write LegacyDrawingHF .
9876	Write workbook to XML format .
9877	Write file version .
9878	Write WorkbookPr .
9879	Write BookViews .
9880	Write WorkbookProtection .
9881	Write calcPr .
9882	Write sheet .
9883	Write Defined Names .
9884	Write named ranges .
9885	Write Defined Name for named range .
9886	Write Defined Name for autoFilter .
9887	This is the initialization method for the permission types . This must be called once in the beginning .
9888	Get the permission object from the code
9889	Parse the JSON response body and return an array
9890	Parse the XML response body and return a \ SimpleXMLElement .
9891	Creates the hint tag
9892	Creates the error tag
9893	Returns the list of properties for the tag . Since tags prefixed with _ are not displayed it includes other data needed for rendering
9894	Add an item to the bag
9895	Convert a token to the proper ptg value .
9896	Convert a number token to ptgInt or ptgNum .
9897	Convert a string token to ptgStr .
9898	Convert a function to a ptgFunc or ptgFuncVarV depending on the number of args that it takes .
9899	Convert an error code to a ptgErr .
9900	Advance to the next valid token .
9901	The parsing method . It parses a formula .
9902	Test whether a cell address falls within a defined range of cells .
9903	Update cell reference .
9904	Update cell range .
9905	Update single cell reference .
9906	Read color .
9907	Set bloc size
9908	Get legend position using an excel string value .
9909	Set legend position using an Excel internal numeric value .
9910	Used to serialize this object to a JSON string . Override this to modify JSON parameters .
9911	Used to initialize this object from JSON . Override this to modify JSON parameters .
9912	Initialization of the mailing from a simple xml element .
9913	Returns the value of the field with the given name
9914	Builds a simple menu for given model where typically this model should not have any relations to other models .
9915	Renders view for given view file and layout .
9916	Defines Models Columns and Relations between the Models . This method should be called before using any other methods .
9917	Returns an array of Relations for given Model .
9918	Finds the name of the table for given Model using the ModelConfig class for the Model . Uses the overridden value if present or falls back to the generated value .
9919	Finds and configures the Columns for given Model .
9920	Finds and defines one - to - one and one - to - many relations for given model .
9921	Finds and defines many to many relations between models in given array .
9922	Defines a many - to - many relation between given models .
9923	Makes sure a parameter was passed
9924	Filter out or throws exception according to the permitted params
9925	Handle Parameters that have only integer indexes
9926	Handle permissions that are given in the hash form
9927	Filters out or throws exception when parameters are neigher keys nor values in the permitted array
9928	Empty Hash or empty array?
9929	Handle the unpermitted param either by removing it or throwing an exception
9930	Set AutoFilter Type .
9931	Get a specified AutoFilter Column Rule .
9932	Add a new AutoFilter Column Rule to the ruleset .
9933	Set AutoFilter Rule Type .
9934	Set AutoFilter Rule Value .
9935	Set AutoFilter Rule Operator .
9936	Set AutoFilter Rule Grouping .
9937	Check sheet code name for valid Excel syntax .
9938	Check sheet title for valid Excel syntax .
9939	Add chart .
9940	Calculate widths for auto - size columns .
9941	Set title .
9942	Set Protection .
9943	Set a cell value .
9944	Get cell at a specific coordinate by using numeric cell coordinates .
9945	Create a new cell at the specified coordinate .
9946	Does the cell at a specific coordinate exist?
9947	Get row dimension at a specific row .
9948	Get column dimension at a specific column .
9949	Get style for cell by using numeric cell coordinates .
9950	Duplicate cell style to a range of cells .
9951	Duplicate conditional style to a range of cells .
9952	Set break on a cell .
9953	Set merge on a cell range .
9954	Set merge on a cell range by using numeric cell coordinates .
9955	Remove merge on a cell range by using numeric cell coordinates .
9956	Set protection on a cell range .
9957	Set protection on a cell range by using numeric cell coordinates .
9958	Remove protection on a cell range .
9959	Remove protection on a cell range by using numeric cell coordinates .
9960	Set Autofilter Range by using numeric cell coordinates .
9961	Freeze Pane .
9962	Insert a new row updating all possible related data .
9963	Delete a row updating all possible related data .
9964	Get comment for cell .
9965	Select a range of cells .
9966	Fill worksheet from values in array .
9967	Get hyperlink .
9968	Set hyperlink .
9969	Get data validation .
9970	Set data validation .
9971	Accepts a range returning it as a range that falls within the current highest row and column of the worksheet .
9972	Define the code name of the sheet .
9973	Set Format Code .
9974	Set Built - In Format Code .
9975	Fill built - in format codes .
9976	Get built - in format code .
9977	Save Spreadsheet to PDF file pre - save .
9978	Make a HTTP request .
9979	Write comments to XML format .
9980	Write comment to XML format .
9981	Write VML comments to XML format .
9982	Write VML comment to XML format .
9983	DataType for value .
9984	Initializes this blacklist type from an XML representation .
9985	Map VAlign .
9986	Map HAlign .
9987	Map border style .
9988	Generate HTML header .
9989	Generate sheet tabs .
9990	Generate image tag in cell .
9991	Generate chart tag in cell .
9992	Generate CSS styles .
9993	Create CSS style .
9994	Add color to formatted string as inline style .
9995	Write a comment in the same format as LibreOffice .
9996	Identify any separator that is explicitly set in the file .
9997	Infer the separator if it isn t explicitly set in the file or specified by the user .
9998	Set Shadow Properties .
9999	Set Shadow Color .
10000	Set Soft Edges Size .
10001	Add a decorator to the stack
10002	Apply the decorators to a tag produced by a renderer
10003	Remove files and directories recursively
10004	Maps a numeric HTTP status code to the corresponding string message .
10005	set ribbon XML data .
10006	retrieve ribbon XML Data .
10007	retrieve Binaries Ribbon Objects .
10008	Disconnect all worksheets from this PhpSpreadsheet workbook object typically so that the PhpSpreadsheet object can be unset .
10009	Create sheet and add it to this workbook .
10010	Add sheet .
10011	Remove sheet by index .
10012	Get sheet by index .
10013	Get sheet by name .
10014	Get index for sheet .
10015	Set active sheet index by name .
10016	Add external sheet .
10017	Add named range .
10018	Remove named range .
10019	Add a cellXf to the workbook .
10020	Remove cellXf by index . It is ensured that all cells get their xf index updated .
10021	Add a cellStyleXf to the workbook .
10022	Remove cellStyleXf by index .
10023	Convert a multi - dimensional array to a simple 1 - dimensional array .
10024	Convert a multi - dimensional array to a simple 1 - dimensional array but retain an element of indexing .
10025	Return a contact using the maileon contact id . This resource is intended to be used in profile update pages to prefill profile update forms . In order to prevent form fields manipulation a checksum of the maileon contact id is required as parameter . Please refer to the documentation of the profile update pages for more details about how to get the maileon contact id and the corresponding checksum .
10026	Returns a page of contacts in the account .
10027	Returns a contact with the provided email address .
10028	Retrieves all contacts with a given external ID .
10029	Retrieves all contacts with a given contact filter ID .
10030	This methods updates the data of a Maileon contact identifying a contact by its internal Maileon ID
10031	Synchronizes a list of contacts with the contacts in the account and returns a detailed report with stats and validation errors .
10032	This method unsubscribes a contact from Maileon using the contact s email adress .
10033	This method adds unsubscription reasons to an unsubscribed contact . The contact must already be unsubscribed otherwise 400 will be returned by the PAI
10034	This method unsubscribes a contact from Maileon using the Maileon id .
10035	This method unsubscribes a contact from Maileon using the external id .
10036	Returns a page of blocked contacts . Blocked contacts are contacts with available permission but that are blocked for sendouts because of blacklist matches or similar reasons such as bounce policy .
10037	Creates a custom contact field with the provided name and data type .
10038	Renames a custom contact field . The data type and the recorded values for the contacts remain unchanged .
10039	Check if the file is a valid SimpleXML .
10040	Loads Spreadsheet from file .
10041	Human readable representation of this rule .
10042	Validate the plugin
10043	Set the piece at a given offset .
10044	Returns a SelectFormItem which is filled with instances of the model given Column represents .
10045	Returns a FormItem based on the type of the Column .
10046	Signals to the JSON serializer whether this object should be serialized
10047	Copy files and directories recursively
10048	Get colour Map Value by Position .
10049	Helper function used to prepare this object for JSON serialization
10050	Resolves a Config instance .
10051	Resolves the fields to display in a Form .
10052	Resolve Yii aliases and check template file
10053	Set Series Data Type .
10054	Set Series Data Values .
10055	Push a new entry onto the stack .
10056	Returns a Cache Item representing the specified key .
10057	Confirms if the cache contains specified cache item .
10058	Persists a cache item immediately .
10059	Persists any deferred cache items .
10060	Set meta at given key for package realm . If meta exists it ll be overwritten .
10061	Create meta at given key for package realm . If meta exists exception will be thrown .
10062	Update meta at given key for package realm . If meta doesn t exists exception will be thrown .
10063	Get meta at given key for package realm
10064	Get all meta for package realm
10065	Set the pieces in this order
10066	Generate fake data and
10067	Registers a list of default tags to be used by the renderer
10068	Adds a list of default decorators to the stack
10069	Add a tag decorator to the stack
10070	Returns a Tag object
10071	Renders a complete InputFilter object into a form
10072	Initializes this target group from an XML representation .
10073	Get an array of all drawings .
10074	This is the initialization method for the synchronization modes . This must be called once in the beginning .
10075	Convert from OpenXML escaped control character to PHP control character .
10076	Convert from PHP control character to OpenXML escaped control character .
10077	Try to sanitize UTF8 stripping invalid byte sequences . Not perfect . Does not surrogate characters .
10078	Convert string from one encoding to another .
10079	Reverse the case of a string so that all uppercase characters become lowercase and all lowercase characters become uppercase .
10080	Get the currency code . If it has not yet been set explicitly try to obtain the symbol information from locale .
10081	Register the manager .
10082	Register the auja configurator
10083	Register the router
10084	Write text to stream
10085	Set output pipe for severity
10086	Write an entry to the calculation engine debug log .
10087	Create zip object .
10088	Adds an attachment to this transaction from a string that contains binary data .
10089	Adds an attachment to this transaction from a string that contains base64 - encoded data .
10090	Composes a URL for the identifier and options passed in
10091	Checks the options array and verify that only allowed options are in it .
10092	Create a hash of the identifier .
10093	Grab the domain from the identifier .
10094	Get the target to use .
10095	Verify and cast the default URL to use when no avatar image can be found . If none is set the libravatar logo is returned .
10096	Verify and cast the required size of the images .
10097	Write a cell range address in BIFF8 always fixed range See section 2 . 5 . 14 in OpenOffice . org s Documentation of the Microsoft Excel File Format .
10098	This method sets the properties for outlining and grouping . The defaults correspond to Excel s defaults .
10099	Write a LABELSST record or a LABEL record . Which one depends on BIFF version .
10100	Write a LABELSST record or a LABEL record . Which one depends on BIFF version It differs from writeString by the writing of rich text strings .
10101	Write a STRING record . This .
10102	Used to write internal reference hyperlinks such as Sheet1!A1 .
10103	Writes Excel DIMENSIONS to define the area in which there is data .
10104	Write BIFF record Window2 .
10105	Write BIFF record DEFAULTROWHEIGHT .
10106	Write BIFF record DEFCOLWIDTH if COLINFO records are in use .
10107	Write BIFF record COLINFO to define column widths .
10108	Write BIFF record SELECTION .
10109	Store the MERGEDCELLS records for all ranges of merged cells .
10110	Write SHEETLAYOUT record .
10111	Write SHEETPROTECTION .
10112	Write BIFF record RANGEPROTECTION .
10113	Store the page setup SETUP BIFF record .
10114	Store the header caption BIFF record .
10115	Store the footer caption BIFF record .
10116	Store the horizontal centering HCENTER BIFF record .
10117	Store the vertical centering VCENTER BIFF record .
10118	Store the LEFTMARGIN BIFF record .
10119	Store the RIGHTMARGIN BIFF record .
10120	Store the TOPMARGIN BIFF record .
10121	Store the BOTTOMMARGIN BIFF record .
10122	Write the PRINTHEADERS BIFF record .
10123	Write the PRINTGRIDLINES BIFF record . Must be used in conjunction with the GRIDSET record .
10124	Write the GRIDSET BIFF record . Must be used in conjunction with the PRINTGRIDLINES record .
10125	Write the AUTOFILTERINFO BIFF record . This is used to configure the number of autofilter select used in the sheet .
10126	Write the GUTS BIFF record . This is used to configure the gutter margins where Excel outline symbols are displayed . The visibility of the gutters is controlled by a flag in WSBOOL .
10127	Write the WSBOOL BIFF record mainly for fit - to - page . Used in conjunction with the SETUP record .
10128	Write the HORIZONTALPAGEBREAKS and VERTICALPAGEBREAKS BIFF records .
10129	Set the Biff PROTECT record to indicate that the worksheet is protected .
10130	Write SCENPROTECT .
10131	Write OBJECTPROTECT .
10132	Write the worksheet PASSWORD record .
10133	Insert a 24bit bitmap image in a worksheet .
10134	Calculate the vertices that define the position of the image as required by the OBJ record .
10135	Convert a GD - image into the internal format .
10136	Store the window zoom factor . This should be a reduced fraction but for simplicity we will store all fractions with a numerator of 100 .
10137	Write MSODRAWING record .
10138	Write PLV Record .
10139	Write CFHeader record .
10140	Read record data from stream decrypting as required .
10141	Use OLE reader to extract the relevant data streams from the OLE file .
10142	Reads a general type of BIFF record . Does nothing except for moving stream pointer forward to next record .
10143	The TEXT Object record contains the text associated with a cell annotation .
10144	Read BOF .
10145	Make an RC4 decryptor for the given block .
10146	Read STYLE record .
10147	Read PALETTE record .
10148	Read MSODRAWINGGROUP record .
10149	Read PRINTGRIDLINES record .
10150	Read HEADER record .
10151	Read FOOTER record .
10152	Read HCENTER record .
10153	Read VCENTER record .
10154	Read PAGESETUP record .
10155	Read MULRK record This record represents a cell range containing RK value cells . All cells are located in the same row .
10156	Read a SHAREDFMLA record . This function just stores the binary shared formula in the reader which usually contains relative references . These will be used to construct the formula in each shared formula part after the sheet is read .
10157	Read BOOLERR record This record represents a Boolean value or error value cell .
10158	Read MULBLANK record This record represents a cell range of empty cells . All cells are located in the same row .
10159	Read LABEL record This record represents a cell that contains a string . In BIFF8 it is usually replaced by the LABELSST record . Excel still uses this record if it copies unformatted text cells to the clipboard .
10160	Read MSODRAWING record .
10161	Read PANE record .
10162	Read SELECTION record . There is one such record for each pane in the sheet .
10163	Read SHEETLAYOUT record . Stores sheet tab color information .
10164	Read RANGEPROTECTION record Reading of this record is based on Microsoft Office Excel 97 - 2000 Binary File Format Specification where it is referred to as FEAT record .
10165	Read a free CONTINUE record . Free CONTINUE record may be a camouflaged MSODRAWING record When MSODRAWING data on a sheet exceeds 8224 bytes CONTINUE records are used instead . Undocumented . In this case we must treat the CONTINUE record as a MSODRAWING record .
10166	Reads a cell address in BIFF8 for shared formulas . Uses positive and negative values for row and column to indicate offsets from a base cell section 3 . 3 . 4 .
10167	Reads a cell range address in BIFF8 for shared formulas . Uses positive and negative values for row and column to indicate offsets from a base cell section 3 . 3 . 4 .
10168	Read 32 - bit signed integer .
10169	Write settings . xml to XML format .
10170	Set DiagonalDirection .
10171	Initialization of the custom fields from a simple xml element .
10172	Human readable representation of this list of custom fields .
10173	Whether the collection holds a cell for the given coordinate .
10174	Delete a cell in cache identified by coordinate .
10175	Get highest worksheet column .
10176	Get highest worksheet row .
10177	Clone the cell collection .
10178	Remove a row deleting all cells in that row .
10179	Remove a column deleting all cells in that column .
10180	Store cell data in cache for the current cell object if it s dirty and the nullify the current cell object .
10181	Add or update a cell identified by its coordinate into the collection .
10182	Clear the cell collection and disconnect from our parent .
10183	Returns all known cache keys .
10184	Creates a simple contact filter .
10185	Used to deserialize a Maileon class from JSON
10186	Helper function used to build this class from an array .
10187	Build the authentication header to be attached to the request .
10188	Initializes this contact event type from an XML representation .
10189	Write relationships for a signed VBA Project .
10190	Recursively get all spContainers within this spgrContainer .
10191	Validate the request .
10192	Take a string DSN and parse it into an array of its pieces
10193	Get a preview of what query will be run from a query builder .
10194	Get the last query that was run with data that was used bound to it .
10195	Get a list of all queries formatted with their bindings in place
10196	Create worksheet stringtable .
10197	Write string table to XML format .
10198	Write rows of the specified sheet .
10199	Write span .
10200	Write XF cell styles .
10201	Write attributes for merged cell .
10202	Set Horizontal .
10203	Set Vertical .
10204	Set Shrink to fit .
10205	Set indent .
10206	Set read order .
10207	Performs a GET operation on a resource
10208	Performs a DELETE operation on a resource .
10209	Perform the currently initialized request
10210	Persist contact entity
10211	Initialization of the contact from a simple xml element .
10212	CSV representation of this wrapper .
10213	Get the shared style component for the currently active cell in currently active sheet . Only used for style supervisor .
10214	Set Border Color .
10215	Recursively scan element .
10216	Add HashTable items from source .
10217	Add HashTable item .
10218	Cleans the leading characters in a complex number string .
10219	Formats a number base string value with leading zeroes .
10220	getConversionGroups Returns a list of the different conversion groups for UOM conversions .
10221	getConversionGroupUnits Returns an array of units of measure for a specified conversion group or for all groups .
10222	Creates a default authentication Form to be used in a Main instance .
10223	Intelligently creates an index menu for given model and optionally model id .
10224	Creates a Menu for given model with a layout depending on its relations .
10225	Builds a Resource instance for given model . This is typically used when a ResourceMenuItem triggers a call for items .
10226	Creates a simple menu for given model where typically this model should not have any relations to other models .
10227	Creates a Page for given model .
10228	Resolves the model name .
10229	Set plugin textdomain .
10230	Get MD5 stream context .
10231	Write meta . xml to XML format .
10232	Write line to CSV file .
10233	Show the form for editing the specified resource .
10234	Returns the Auja main manifest containing information about the login state theme of the interface and the tabs on the side bar .
10235	Get image mime type .
10236	Write Default content type .
10237	Get an instance of this class .
10238	Wrap string values in quotes .
10239	Remove quotes used as a wrapper to identify string values .
10240	Calculate the value of a cell formula .
10241	Calculate the value of a formula .
10242	Read the dimensions of a matrix and re - index it with straight numeric keys starting from row 0 column 0 .
10243	Is a specific function implemented?
10244	Get a list of implemented Excel function names .
10245	Initializes this unique bounce from an XML representation .
10246	Utility function to transform ASCII text to Unicode .
10247	Generate random string .
10248	Generate a GUID .
10249	Generate a random date .
10250	Returns a DLN object that contains a driver license number state and expiration
10251	Generate a First Name
10252	Generate a Last Name
10253	Returns a Full Name
10254	Return a street name
10255	Get an apartment number .
10256	Return a state
10257	Return object with full street info
10258	Return a Company Name . Uses a random last name plus a suffix that looks like a company name . You can optionally pass a name to serve as the prefix
10259	Return a phone number
10260	Get something that looks like an IP Address
10261	Return an email address . You can optionally pass a name to use in the address
10262	Generate internet information . Domain Email URL IP Address Username
10263	Generate a credit card number .
10264	Generate bank account information .
10265	Generate a Person object with all relevant attributes .
10266	Set Rotation .
10267	Set End Color .
10268	Creates a new mailing .
10269	Updates the HTML content of the mailing referenced by the given ID .
10270	Sets the reply - to address of the mailing identified by the given ID .
10271	Adds an attachment to the mailing with the provided id .
10272	Adds a list of custom properties to the mailing with the provided id .
10273	Updates a custom property of the mailing with the provided id .
10274	Set locked .
10275	Get GD text width in pixels for a string of text in a certain font at a certain rotation angle .
10276	Get approximate width in pixels for a string of text in a certain font at a certain rotation angle .
10277	Get the effective row height for rows without a row dimension or rows with height - 1 For example for Calibri 11 this is 15 points .
10278	Write styles . xml to XML format .
10279	Coordinate from string .
10280	Make string row column or cell coordinate absolute .
10281	Make string coordinate absolute .
10282	Split range into coordinate strings .
10283	Build range from coordinate strings .
10284	Calculate range boundaries .
10285	Column index from string .
10286	String from column index .
10287	Parse given cron table
10288	Get jobs since date
10289	Execute scheduled tasks
10290	Store last run time
10291	Try to aquire lock
10292	Set the Default timezone to use for dates .
10293	Validate a timezone .
10294	Convert a MS serialized datetime value from Excel to a unix timestamp .
10295	Strips an ordinal froma numeric value .
10296	Write charts to XML format .
10297	Write Chart Title .
10298	Write Chart Legend .
10299	Write Data Labels .
10300	Write Bubble Chart Details .
10301	Write Layout .
10302	Write Printer Settings .
10303	Set use disk caching where possible?
10304	Gets the URL of the given key .
10305	Search in all files in given directory .
10306	Set Line Style Properties .
10307	Set Glow Properties .
10308	Set Glow Color .
10309	Count openers .
10310	Count unique openers .
10311	Returns a page of recipients .
10312	Count recipients .
10313	Returns a page of clickers .
10314	Count clickers .
10315	Count unique clickers .
10316	Count bouncers .
10317	Count unique bouncers .
10318	Returns a page of blocks .
10319	Count blocks .
10320	Returns a page of unsubscriberss .
10321	Count unsubscribers .
10322	Count subscribers .
10323	Creates the common query parameters
10324	Creates the common query parameters for count operations
10325	Set the db adapter options
10326	Adds a rule to the contact filter
10327	Initializes this contact filter from an XML representation .
10328	Get the nesting level of this spContainer . This is the number of spgrContainers between this spContainer and the dgContainer . A value of 1 = immediately within first spgrContainer Higher nesting level occurs if and only if spContainer is part of a shape group .
10329	Save images to the server when post has been added or edited .
10330	Replace image when added a movie .
10331	Loads the data for the url specified
10332	Sets new width and height in the video html code
10333	Initialization of the report contact from a simple xml element .
10334	Set Name .
10335	Set Superscript .
10336	Get the vertical distance in pixels between two anchors The distanceY is found as sum of all the spanning rows minus two offsets .
10337	Convert 1 - cell anchor coordinates to 2 - cell anchor coordinates This function is ported from PEAR Spreadsheet_Writer_Excel with small modifications .
10338	Creates the XML representation of an attachment
10339	Check a string that it satisfies Excel requirements .
10340	Check a value that it is a valid error code .
10341	Validate all cron columns
10342	Check if the given year month and day combination is a valid calendar entry
10343	Take a cron column as argument and return an array containing every item in range of the definition
10344	Extract the stepping defined by a given cron column
10345	Take a range array and apply a defined stepping to it .
10346	Return the next timestamp which lies in the future . This function handles the regeneration of the timetable information on year boundaries correctly .
10347	Iterator interface function returning the current element
10348	Iterator interface function resetting the interator
10349	Validate a set of arguments
10350	Validate the response
10351	Get channel object
10352	Create source by using the given job .
10353	Fire an event at some point .
10354	Retrieve the event name .
10355	Increment the number of failed attempts .
10356	Lock a user out .
10357	Returns an array of lines from a file .
10358	Converts errors to ErrorExceptions .
10359	Modifies the backtrace array .
10360	Convert errors not caught by the error handler to ErrorExceptions .
10361	Writes message to log .
10362	Handles uncaught exceptions and returns a pretty error screen .
10363	Check if a property exists
10364	Append node to node list
10365	Log the user in .
10366	Log the user out .
10367	Register the user .
10368	Remember the user password .
10369	Reset the user password .
10370	Add scripts or styles .
10371	Register enqueue and localize scripts .
10372	Add register and enqueue styles .
10373	Sets whether to merge the content of files into a single file .
10374	Remove before script or style have been registered .
10375	Validate file register .
10376	Look whether to process files to minify or unify files .
10377	Check files and prepare paths and urls .
10378	Get path|url to the minimized file .
10379	Check if the file was modified .
10380	Check if it matches the file hash .
10381	Unify files .
10382	Save external file .
10383	File minifier .
10384	Set new parameters for the unified file .
10385	Obtain all the parameters of a particular field and unify them .
10386	Create a initializer system
10387	Get new app
10388	If ttl is lesser or equals 0 delete key .
10389	Create XML document from file
10390	Create XML document from string
10391	Returns the system temp directory .
10392	Parse XML file
10393	Validates operation type .
10394	Copies properties that have matching getter and setter .
10395	Gets ids of shops from the configuration .
10396	Processes doctrine mapping metadata and does replacements as provided in replacements map .
10397	Replace discriminator array key if needed .
10398	Applies replacements to provided string .
10399	Starts service with provided parameters .
10400	Skips item marks event as skipped with a reason .
10401	Counts number of items in the services .
10402	Create appication by type
10403	Entry point of consume event .
10404	Returns pair value by key .
10405	Sets pair value . Returns pair with values .
10406	Removes pair by key .
10407	Saves pair object .
10408	Adds document whose links should be invalidated .
10409	Returns array of links got by document id .
10410	Creates temporary file to store urls .
10411	Invalidates collected URLs .
10412	Collect all urls for invalidation .
10413	Urls by type .
10414	Creates table for sync jobs .
10415	Updates table for sync jobs . Returns NULL if table is up - to - date .
10416	Dynamically add status field or fields in case of multi - shop .
10417	Prepares pipeline name and starts pipeline .
10418	Function for extracting keys from an yaml based array .
10419	Parses an YAML file from an given path .
10420	Creates pipeline and registers first listeners in dispatcher .
10421	Adds to update fields .
10422	Forms sql insert list for trigger callback .
10423	Sets trigger type .
10424	Parses an XML - formatted NCIP request or response Throws Danmichaelo \ QuiteSimpleXMLElement \ InvalidXMLException on failure
10425	Emits headers protocol status code and reason phrase from response .
10426	Writes body .
10427	Set up shops .
10428	Initializes SyncStorage service .
10429	Set up Sync . storage with MySQL storage .
10430	Creates sync import and provide pipeline services .
10431	Retrieves shop id by shop name .
10432	Creates service definitions .
10433	Merges and parses configs .
10434	Merges global configs with type config .
10435	Post xml document to the NCIP service
10436	Get channel logger
10437	Add our own stuff to the templates
10438	Set attribute value acceesd through array access
10439	Parse query line and store it to buffer .
10440	Retrieves a query from the binlog .
10441	Detects line type .
10442	Initializes a new pipe .
10443	Handles the beginning of a statement .
10444	Handle SQL relations .
10445	Handles a param if the next line isn t a param returns null .
10446	Returns the job type based on statement .
10447	Makes a request identical to the Emailbidding webhook event
10448	Call and resolve depepndencies of a method if enabled .
10449	Load configuration from a file or array
10450	Removes a key .
10451	Returns the remaining time to live of a key that has a timeout .
10452	If the default is not empty is appended to the question in square brackets . Both are concatenated trimmed and the the delmiter is appended with two closing spaces
10453	Assign a token to reset the password of the user with the given email .
10454	Reset the password of the given user .
10455	Consume event .
10456	Validates the class name of event item and prepares internal document for persistence operation .
10457	Convert this Weight to a new Unit
10458	Checks if the trimmed answer is an empty string . If so a \ RuntimeException with the error message and the value is thrown .
10459	Ends statistics collection and outputs or returns statistics .
10460	Creates DiffItem by type .
10461	Overridden from parent
10462	Returns table name for specified shop .
10463	Bind params to SQL statement .
10464	Find meaningless operations and remove them .
10465	Checks whether shop exists .
10466	Modify event .
10467	Creates an anonymous recipient with the mandatory information .
10468	Get the conversion factor between two Units of Weight
10469	Make a POST request to the NCIP server and return the response
10470	Lookup user information from user id
10471	Check out an item to a user
10472	Check in an item
10473	Renew an item for a user
10474	Lookup item information from item id
10475	Subscribe to event channel
10476	Push an event to channel
10477	Determine how to render the DisplayException .
10478	Returns action letter depending on item class .
10479	Replace context placeholders with actual row values .
10480	Checks whether any of tracked fields has been modified .
10481	Gets iterator for all documents which need to be updated .
10482	Returnes session bucket object
10483	Creates a new Emailbidding webhook payload of soft bounce type
10484	Creates a new Emailbidding webhook payload of spam complaint type
10485	Returns table mapping from ordinal field position to associative for all tables .
10486	Retrieves mapping from database .
10487	Applies associative mapping to numbered columns .
10488	Checks if a directory is set and if the directory exists . If so it changes into the given directory executes the command the switches back to the provious directory .
10489	Closes connection if open opens a unbuffered connection .
10490	Negation . Product is always FloatType .
10491	Addition . Product is always FloatType .
10492	Subtraction . Product is always FloatType .
10493	Multiplication . Product is always FloatType .
10494	Division . Product is always FloatType .
10495	Modulus . Product is always FloatType .
10496	Exponentiation . Product is always FloatType .
10497	Square root . Product is always FloatType .
10498	Nth root . Product is always FloatType .
10499	Greater than or equal
10500	Less than or equal
10501	Makes field auto completable
10502	Set parameters on a subject .
10503	Set a parameter on a subject .
10504	Register the log levels .
10505	Register the log styler .
10506	Register the log menu builder .
10507	Register the log filesystem .
10508	Register the log checker service .
10509	Add new observer to the list
10510	Delete the observer from the list
10511	Send a notification to the correct observer
10512	Order The observers using the order integer value . Lower number is going to execute first in case of have the same order it goes first the first observer assign to the event .
10513	Returns if the observer must be update .
10514	Update the correct observer match with the same name .
10515	increment a key
10516	Returns new photos collection
10517	Fetch only media identifiers from an array
10518	Returns product photo model
10519	Get generate User Agent
10520	Create a constraint
10521	Build table constraints
10522	quote the index names in the array
10523	Get a filtered array of valid values set by depdrop .
10524	Unset data by key .
10525	Sets a form field value based on field type
10526	sets a field value from data object
10527	Returns client IP address .
10528	Attempt to get the IP address for a proxied client
10529	Normalize a header string
10530	To json .
10531	Get count .
10532	Checks if current position is valid .
10533	Get last element in collection .
10534	Checks whether the Web user is allowed to perform the specified action .
10535	Retrieve data all or by key .
10536	Extract CORS headers from the request
10537	For each CORS headers create the specific response
10538	Allow frame from a given URL .
10539	Assign data .
10540	modify the type
10541	Returns the configuration for the given filtro name .
10542	Create a new dispatcher using an application object
10543	Set the configuration dictionary used for config
10544	Set the list of available sites
10545	Set the VirtualHost for this request
10546	Set the request being handled
10547	Set the resolver used for resolving apps
10548	Set the template instance to have apps use .
10549	Set the application instance
10550	Run the selected application
10551	Find out which VirtualHost was targeted and redirect if configuration requests so .
10552	Resolve the app to run based on the incoming URL
10553	Find the VirtualHost matching the provided URL .
10554	Determine what to do when a request was made to an unknown host .
10555	Find the best matching VirtualHost . In case the URL used does not match any defined VirtualHost this function will find the VirtualHost that matches the URL as close as possible in an attempt to guess at which information the visitor is interested .
10556	Make log menu .
10557	Dispatch the next job on the chain .
10558	Factory method to create the I18n instance . Registered with Wedeto \ DI to make sure that new instances are created here .
10559	Set up a logger that stores untranslated messages to a separate pot file .
10560	Initialises the router .
10561	Creates a controller and its associated action .
10562	Constructs the controller name .
10563	Builds the action name .
10564	Creates variant with given attributes of this file
10565	Formats response data in JSON format .
10566	Formats response data in JSONP format .
10567	Displays a form to create a new Media entity .
10568	Checks the request query parameters and headers for pagination info .
10569	Parses the order array .
10570	Attempts to parse a single sort value .
10571	Validates if the HTTP cache contains valid content .
10572	Sends the cache control header to the client
10573	Registers session handler .
10574	Removes a session variable .
10575	Apply foreground and background color .
10576	Apply style .
10577	Get style setting .
10578	Uses above method for each resource extracting the data into an array creating a new APIResponseData from that array .
10579	A constant time code comparison .
10580	Creates a new data store .
10581	Clones a response changing contents based on the handling of a given request . Taking in a response allows us not to define a specific response implementation to create .
10582	Takes an APIResponse and builds a PSR - 7 Response
10583	Dumps a PSR - 7 ResponseInterface to the SAPI .
10584	Create a temp directory
10585	Create a temp file
10586	Register an entity to be deleted when the script exits
10587	Remove all temp files & directories created since script start
10588	This needs to be extended to add the Invoice Item details .
10589	With Paypal the Transaction and the Payout are essentially the same thing .
10590	Type checking method for forms . Type checking includes the parent types .
10591	Returns the product entity by its identifier
10592	Displays all elements from a tree in hierarchic order
10593	Get the log entry as an array .
10594	Set up view data if data are completed return them directly . - complete basic \ MvcCore core objects to complete other view data - complete panel title - complete routes table items - set result data into static field
10595	Complete routes table data by router routes .
10596	Complete single route table row view data .
10597	Get route non - localized or localized record - Pattern and Reverse
10598	Complete data about requested URL under routes table .
10599	Print any variable in panel body under routes table .
10600	Return complete URL
10601	Edit existing query parameter
10602	Add new query parameter
10603	Check if parameter is present in query
10604	Set value of existing query parameter or create new one
10605	Adds multiple headers .
10606	Adds one header .
10607	WS to check if user is logged in
10608	When user receive password recovery email and click on the link he will arrive here
10609	When user answer to a classified
10610	Tell the user to check his email provider .
10611	Receive the confirmation token from user email provider login the user .
10612	Tell the user his account is now confirmed .
10613	Authenticate a user with Symfony Security .
10614	Factory method to create the DB \ Migrate \ Repository instance . Registered with Wedeto \ DI to make sure that new instances are created here .
10615	Configure response .
10616	Set max - age s - maxage and expires headers .
10617	Set ETag .
10618	Display the extra security form
10619	Process the second intermediate contact form .
10620	Boots all providers
10621	Calculate percentage of a value from a total
10622	Constructs a whitelist for the identity map .
10623	synchronize migrations files from the installed or updated bundle to the root bundle
10624	check if the file exists in dest dir and if the file is equal . If not move the file do destination dir .
10625	Things to do before build
10626	Server document root
10627	Server cpu cores information
10628	Server cpu percentages
10629	Server hdd information
10630	Server memory information
10631	Server average load info
10632	Get all files .
10633	Prepare HTML component .
10634	returns an array with non - standard holidays from a JSON file
10635	Is the function that Event manager will invoke when the event subscribe for this class will be dispatch .
10636	Resolve paths to navigate through project .
10637	retrieves and handles the ajax upload action to store uploaded files on file system .
10638	gets the filebag and moves uploaded files to filesystem .
10639	process the given urls .
10640	return a unique filepath .
10641	Builds an AND WHERE clause .
10642	Builds an OR WHERE clause .
10643	Get the parent directory
10644	Get the relative path from the current path to another
10645	Bind the given object to it s type name in the container .
10646	Builds the complete URI to the API endpoint
10647	build custom messages array based on scope
10648	turn rules array into string based to make it much easier to proccess must be done to make building scope rules easier
10649	auto add props to unique rules - allows you to define a custom rule with additional where clauses or builds from model info this turns rules into array format but later normalized to string based
10650	get validator based on scope
10651	check validation on new instance
10652	Unset data by keys .
10653	Checks if the property exists
10654	Checks if the property is not null
10655	Groups the array by one or more criteria defined via callback function
10656	Adds usort as an instance method
10657	Returns the multi - dimensional array structure with all instances of ArrayObject transformed to standard PHP arrays
10658	Recursively applies all provided sorting functions to their corresponding dimension of the array
10659	Normalize Real Header Name
10660	With Set Headers
10661	Without Send Cookie
10662	Remove All existing Parameter
10663	Set Param Type
10664	With Set Request
10665	Enables the report mode .
10666	Enables the report mode and sets the report URI .
10667	Build ON DUP
10668	Initialize SimpleXMLElement or DOMDocument from a given XML string file path URL or array .
10669	Transform an array into a SimpleXMLElement
10670	Recursive method to create child from array
10671	Returns this XML structure as a array .
10672	Add segments to path .
10673	Retrieves a cached value by key generating it if it does not exist .
10674	Funkce pro sklonovani
10675	Funkce pro sklonovani slova do daneho podle daneho vzoru
10676	Vrati pravou cast retezce od urcite pozice
10677	Rozdeli text na slova
10678	Sklonuje vstupni text
10679	Sklonovani podle standardniho seznamu pripon
10680	Generate a URL segment based on the title provided .
10681	Generate a URL Segement before the data object gets written
10682	Quote string with specified character default character is
10683	Returns the most preferred MIME type out of the provided list .
10684	Helper method to bootstrap the system - adjust PHP configuration set up logging and autoloading
10685	Allow access to one or more of the core Wedeto components .
10686	Helper to display permission errors when system setup fails due to broken permissions .
10687	Configure the create permissions when new files are created by Wedeto .
10688	Configure the auto loader - replace the default autoloader provided by composer and register all resolvable assets .
10689	Helper method to set up logging based on the application configuration file .
10690	The exception handler is called whenever an uncaught exception occurs .
10691	Terminate the application - unregister handlers and autoloaders . Does a best effort to restore the global state .
10692	Get the statement object
10693	fix table notation
10694	will start a new session OR
10695	INSERT ... SELECT
10696	Gets a serializable representation of this problem .
10697	Adds this problem detail to a PSR - 7 HTTP response .
10698	Check for password validity
10699	Check for birthDate validity
10700	Check if the phone number is mobile
10701	Check if the birth number is valid
10702	Get password complexity
10703	Loads a language file for a controller .
10704	Get the model
10705	Get doctrine default entity manager
10706	Get useradd form
10707	Apply a query
10708	Find all models
10709	Find all models but paginated
10710	Find a single model by it s id
10711	Find many models given an array of ids
10712	Create and persist a model given an array of attributes
10713	Persist many models
10714	Update a model given it s id and an array of attributes
10715	Update a model given a model and an array of new attributes
10716	Delete many models
10717	Make a new empty model
10718	Paginate a given query
10719	Adds a thumbnail to the overview navigation item .
10720	Removes a thumbnail from the overview navigation item .
10721	Returns the overview navigation item s label .
10722	Count specified column .
10723	Run raw sql and return result .
10724	Get number of rows of specific condition .
10725	This will return all distinct actions
10726	This will return all users
10727	Returns the year
10728	Returns the month
10729	Returns the day
10730	Returns the hour
10731	Returns the minute
10732	Returns the second
10733	True if it s a leap year
10734	Sets the interval s lower value
10735	Sets the interval s upper value
10736	Compare a value to the interval
10737	Parses an interval string
10738	Perform the search based on the query .
10739	Check whether this engines supports the given query type .
10740	Initialises the action .
10741	Build table to delete
10742	Returns a value from the data container .
10743	Returns a DateTime instance from the data container . A string value is interpreted as date string an integer value is interpreted as UNIX timestamp .
10744	Returns an array of values from the data containers .
10745	Returns an array of objects from the data container . All values of the resulting array are casted to new data container instances .
10746	Send something as JSON .
10747	Sends a Content - Range header for pagination .
10748	Send notice that an entity was created .
10749	Send notice that objects were deleted .
10750	Sends a generic notice that objects have been operated on .
10751	Fill the model with data
10752	This will fill the stateClass as well
10753	Return mobile meta value
10754	Get the user birth date using format dd MMMM YYYY
10755	Build table options
10756	Add a route mapping to the router .
10757	Get totals .
10758	Prepare table header .
10759	Set column values
10760	Build SET ... = ... ... = ...
10761	Encodes a string by a simple shift of characters
10762	Set alternative accounts
10763	Set payment type
10764	Generate SPD as text
10765	Generate SPD as PNG image and output it
10766	Build Spayd content from parts
10767	Normalize account number
10768	Convert bank account number to IBAN
10769	Runs the action . This method displays the view requested by the user .
10770	Resolves the view name currently being requested .
10771	register new mediaType .
10772	return a new instance of best - matching MediaType .
10773	Produces a new identity map that contains the objects .
10774	Logs in a user by cookie .
10775	Redirects the user browser to the login page .
10776	Creates a tree structure from an array and returns the root element
10777	calculates width and height needed for sprite image
10778	creates sprite image resource
10779	Adds the cache limiter cookie
10780	Adds cache limiter headers .
10781	Return fixed asset s path .
10782	Builds an AND HAVING clause .
10783	Builds an OR HAVING clause .
10784	Parses API request data out of a url
10785	Run a Peyote based query .
10786	Run a MySQL query .
10787	Provides an online help for the configured search service . If the search service has no online help defined a warning message will be displayed to the user .
10788	Fetches the searched facets from the session object
10789	Sets the given search facets in the user s session
10790	Quote SQL identifier base on settings
10791	Extend Twig Environment with provided Extension .
10792	Return a model structure that can be passed to js
10793	Save a document
10794	Send a password recovery event if form is valid
10795	Check if data is valid and dispatch contact event If destination param is empty session will used
10796	Check if data is valid and dispatch classified answer event
10797	Get BCrypted password
10798	Format from dd MMM yyyy to Y - m - d
10799	Renders the view inside the Page Historic tab
10800	Renders the Page Historic table view
10801	Renders the actions filter
10802	Saves the action taken from MelisCMS Page Actions
10803	Removes page historic entries
10804	Gets all back office users that has a record in database
10805	Real building the statement
10806	Get config of this type of statement
10807	CREATE TABLE ... SELECT ...
10808	RenderByLaravel an exception into an HTTP response .
10809	Generate an array of class name strings to use for rendering this form field into HTML .
10810	Clear assets runtime cache test output
10811	Replace placeholders in the SQL with ? or real value
10812	Runs the API request for the given data
10813	Calls the method in the wrapped instance
10814	Assigns a data store to this instance .
10815	Authenticate a user for all next requests
10816	Write messages .
10817	Write info messages .
10818	Write error messages .
10819	Write comment messages .
10820	Write warning messages .
10821	Write title messages .
10822	Write block messages .
10823	Ask question .
10824	Confirm question .
10825	List choices and ask for choice .
10826	Show table .
10827	Write words .
10828	Remove wonky characters from a path name
10829	Convenience method to get a directory instance with a normalized path
10830	Convenience method to get a file instance with a normalized path
10831	Create an entity from an instance of \ SplFileInfo
10832	Lists all State models .
10833	Creates an ON join .
10834	Create a USING join .
10835	Compiles an ON join .
10836	Compiles a JOIN USING clause
10837	Build ORDER BY
10838	Store Value to File .
10839	Delete Value From File
10840	Read Value From File
10841	Writes HAL Logo
10842	Recalculates sell prices for product
10843	Recalculates sell prices for single product attribute
10844	Calculates new amount for attribute
10845	Recalculates buy prices for product
10846	Detect current casing and restore automagicaly later through a callable ;
10847	Runs a command to convert asset files .
10848	Get current table name
10849	Fills the given document based on the object
10850	Fetches the mapping for the given object including the mapping of superclasses
10851	Run a SSH command .
10852	Write text to the screen for the user to see .
10853	Sets the limit .
10854	Build column definitions
10855	Gets the string identifying the fixed part of the location .
10856	Check if an instance or a binding is registered for the given type .
10857	Get all objects marked with the given marker .
10858	Invoke the given closure for each registered marker of the matching type .
10859	Cache all bindings marked with the given marker for faster lookups .
10860	Create a new object instance using the public constructor .
10861	Create a new object instance using a pre - configured factory callback .
10862	Get all hashes encoded as pretty printed JSON
10863	Create an iterator for looping over files Return type hint excluded for mocking in tests
10864	Generate hashes for all files found using an iterator
10865	Sets the value of a property
10866	Creates the wrapped instance
10867	Get list .
10868	Get by id .
10869	Get by email .
10870	Verify hash .
10871	Exist login .
10872	Exist email .
10873	Clean user .
10874	Get encode hash .
10875	Get decode link .
10876	Process approve .
10877	Is valid forgotten .
10878	Process forgotten .
10879	Converts an exception into an array .
10880	Renders the previous exception stack for a given Exception .
10881	Validate path configuration .
10882	Aggregates a list of ternary values .
10883	Report an exception to the errorstream website .
10884	Make a request sending the errorstream report .
10885	Simple request interface using guzzle to send JSON data to errorstream
10886	Start the session for the given request .
10887	Get the session implementation from the manager .
10888	Register a valid option
10889	Parse the provided arguments and options .
10890	Read from standard input
10891	Show the help text generated based on the configured options
10892	Is this a prime?
10893	Adds a uri .
10894	Gets a uri by name .
10895	Adds a uri collection at the end of the current set by appending all uris of the added collection .
10896	Sets the host pattern on all uris .
10897	Set the scheme all child uris use .
10898	Get entity scheme .
10899	Save entity data in db .
10900	Validate entity data .
10901	Get all entities from db .
10902	Load realated entity by relation name .
10903	Delete entity row from db .
10904	Determine if a directory is empty
10905	get a list of the directory children
10906	Recursively remove the directory
10907	Parses the query string from the QUERY_STRING in the provided array .
10908	Binds to the given object instance .
10909	Define methods to be used for mutator injection .
10910	Adds a decorator that is applied to the created object instance .
10911	Attaches a marker to the binding .
10912	Converts a Date from ISO - 8601 format into UTC Time zone SQL format
10913	Assign a variable to make available to the app .
10914	Run the app and make produce a response .
10915	Find the correct method in a controller to execute for the current request . The route led to this controller so the method is the first following URL argument . Any suffix is stripped - method names may not contain dots anyway .
10916	Log all output of the script to the logger .
10917	Checking if MelisCms modul is activated
10918	Get the user entity
10919	Get stop - words list in array format
10920	Get stop - words list in string format - separated by defined separator
10921	Set headers .
10922	Set rows .
10923	Render table .
10924	Render line .
10925	Render row .
10926	Render cell .
10927	Update width .
10928	Prepara e executa um comando SQL .
10929	Efetua uma consulta SQL do tipo COUNT e retorna seu resultado . A consulta passada deve sempre trazer o resultado da contagem em um alias chamado count .
10930	Efetua a contagem da totalidade de registros existentes na tabela de dados indicada .
10931	Efetua a contagem de registros existentes na tabela de dados indicada que corresponda com o valor passado para a coluna indicada .
10932	Verifica se existe na tabela de dados indicada um ou mais registros que possua na coluna indicada o valor passado .
10933	Resolve and replace parameter values in the assembled URI .
10934	Determines if the current version of PHP is equal to or greater than the supplied value
10935	Tell the user to check his email provider
10936	Authenticate a user with Symfony Security
10937	Get the truncated email displayed when requesting the resetting .
10938	Populate entries .
10939	Get time for key .
10940	Get cache response .
10941	Get only modified response .
10942	Reset last update date .
10943	Encode a string .
10944	Creating a response from cache if found
10945	Putting in cache the response . We arrive here if no valid cache entry found
10946	Returns POST parameter with a given name . If name isn t specified returns an array of all POST parameters .
10947	Returns the content types acceptable by the end user . This is determined by the Accept HTTP header . For example
10948	Returns the token used to perform CSRF validation .
10949	Loads the CSRF token from cookie or session .
10950	Returns the XOR result of two strings . If the two strings are of different lengths the shorter one will be padded to the length of the longer one .
10951	Validates CSRF token
10952	Cleanly writes the body to the response .
10953	Checks the If - Modified - Since header maybe sending 304 Not Modified .
10954	Checks the If - None - Match header maybe sending 304 Not Modified .
10955	Redirects the user to another URL .
10956	Dealing with positioned parameters
10957	move files back
10958	main move method
10959	prepare path and do move
10960	if to directory not exists
10961	Restores response properties from the given data
10962	Check the date of the log file .
10963	Get uri .
10964	Get host .
10965	Get standard port . If not found then 0 .
10966	Get scheme .
10967	Is ssl .
10968	Get path .
10969	Get query .
10970	Get request .
10971	Get header .
10972	Get auth username .
10973	Get auth password .
10974	Saves the related location object .
10975	Populates the fields in the Trait with the ones get from the stored Location object .
10976	Queues an email for delivery
10977	Verifies a given verification code
10978	Assigns and saves the verification code
10979	Index the entity after it is persisted for the first time
10980	Removes the entity from the index when it marked for deletion
10981	Get logs tree .
10982	Get information about memory
10983	Get disk usage on UNIX OS
10984	Get unique system ID
10985	Identify the version of php
10986	Get max file upload size considering server settings and optional max value
10987	Static factory method .
10988	Config tree builder .
10989	Assign a single piece of data .
10990	Determine if the entity has a given extension
10991	Retrieve the file name with or without an extension
10992	Separate a filename and extension
10993	Get the byte size of the file
10994	Get the filesize as a formatted string
10995	Prepare and write to the file
10996	Prepend contents to a file
10997	Read the contents of the file
10998	Get the number of lines in the file
10999	Check if this VirtualHost matches the locale . A VirtualHost that is a redirect will never match .
11000	Find the best match between the locales this virtual host supports and the locales the client accepts .
11001	Set the locales supported by this VirtualHost .
11002	Configure this VirtualHost to be a redirect to another location
11003	Return a URL on the current VirtualHost with the path appended .
11004	Extract the path of the provided URL that is below the webroot of this VirtualHost
11005	Sets the sandbox value of the CSP . See the SANDBOX_XYZ class constants for the possible values .
11006	Sets the referrer value of the CSP . See the REFERER_POLICY_XYZ class constants for the possible values .
11007	Sets the require - sri - for value of the CSP .
11008	Sets the CSP s report URI .
11009	Add a new plugin media type ot the CSP .
11010	Adds a default - src source to the CSP .
11011	Returns the CSP header value .
11012	Handle inserting of schema schema should ideally be in ISO SQL format .
11013	Handle inserting of sql dump sql dump should ideally be in ISO SQL format .
11014	Set the value
11015	Convert seconds into human readeble time
11016	Initialises the controller and attach default listeners .
11017	Runs the controller action .
11018	Loads a view file .
11019	Helper method to work out the current route .
11020	Handle an event .
11021	Find tasks in all registered modules . This method calls registerTasks on all modules that have been registered giving them the opportunity to register their tasks .
11022	List the registered tasks
11023	Run the specified task .
11024	Build GROUP BY
11025	Checks whether the given property is set or not
11026	Renders the country part .
11027	Renders the city part .
11028	Renders the address part .
11029	Renders the geolocation part .
11030	Gets the submit model name .
11031	Ensures the field ids names .
11032	Determines if the attribute and subject are supported by this voter .
11033	prepare array of users in init
11034	load user data from config file
11035	Check PHP error level
11036	Define the label of a element type from an id
11037	Store the size reducing behavior
11038	Walk through a slash separated path of a node to build a tree
11039	Store a new node in the template tree
11040	Walk through a slash separated path of a leaf to build a tree
11041	Store a new leaf in the template tree
11042	Store a new text in the template tree
11043	Define if the parameter is a non printable character
11044	Merge two template trees
11045	Read a stream and return its content or FALSE if fail
11046	Read containers then parse their content to build a template tree
11047	Retrieve the value of a string representation of a variable
11048	Add system variables to an object
11049	Excerpt info defined in the index of each node of the template tree
11050	Protect non printable characters
11051	Build the result
11052	Return a built template
11053	Return a built template string
11054	Print out a built template string
11055	Returns the named asset bundle .
11056	Generate absolute URL path .
11057	Generate relative URL path .
11058	Retrieves a pointer to the data store .
11059	List files from a path based filtered by extensions
11060	Get the value
11061	Creates an array with all of the aliases - > encodings
11062	Is this encoding supported?
11063	Return the real encoding of the given alias
11064	Uppercase first letter
11065	Make level icon .
11066	Adds mixin methods to this class .
11067	Compiles all of the mixins into an array .
11068	Sends message .
11069	Returns status information
11070	Sets a boolean value to the builder .
11071	Sets an integer value to the builder .
11072	Sets a float value to the builder .
11073	Sets a string value to the builder .
11074	Sets a date and time value to the builder .
11075	Sets an array of values to the builder .
11076	Get Http Client
11077	Get Http Adapter
11078	Format phone number
11079	Get month name in current language
11080	Get day name in current language
11081	Generate v4 UUID
11082	Generate v5 UUID
11083	Random password generator
11084	Delete directory and subdirectories
11085	Convert a shorthand byte value from a PHP configuration directive to an integer value
11086	getOctet allow to gets the value of a configuration option in octet
11087	Get user OS
11088	Get user browser
11089	Whether the specified date is Czech holiday
11090	Return greeting based on time of the day
11091	Calculates distance in kilometers between two GPS coordinates
11092	Translate function with automatic Yii detection
11093	Return a friendly url made from the provided string
11094	Get birth date from the birth number
11095	Generate random PIN based on
11096	Send message to HipChat room
11097	Get difference between two dates in seconds
11098	Counts number of seconds between two dates taking into account only working days
11099	Get max count of multiple arrays
11100	Extend array to desired size by filling it with fill data
11101	Converts two digit country code to three digit one or return false if code does not exists
11102	Converts three digit country code to two digit one or return false if code does not exists
11103	Filter the currect set of results by the given scope .
11104	Registers CSS and Scripts
11105	Add a join .
11106	Adds a HAVING clause .
11107	Returns true if the given request should be throttled in our implementation
11108	Log that a request took place
11109	Return an array of extensions
11110	Returns all valid extensions folders
11111	Run the pending migrations .
11112	Get all of the migration files in a given path .
11113	Run an array of migrations .
11114	Rollback the last migration operation .
11115	Rolls all of the currently applied migrations back .
11116	Drops all of tables and views in the database .
11117	Rollback the given migrations .
11118	Run down a migration instance .
11119	Run up a migration instance .
11120	Run a migration inside a transaction if the database supports it .
11121	Get the migration files that have not yet run .
11122	Goes true all paths and checks the final location
11123	The up vector can be manipulated by the movements .
11124	Create a notify object .
11125	Display a listing of the Setting .
11126	Update the specified Setting in storage .
11127	Render the given view .
11128	Removes prefix postfix and . php from class filename .
11129	Convert any non - string item in the arguments to string
11130	Match %s in template with the provided arguments .
11131	Get the models out of models \ folder \ fileName . php
11132	Create SQL string and execute it on our database .
11133	Create the SQL string from Database class raw data .
11134	Create a SELECT statement
11135	Create an UPDATE statement .
11136	Create an INSERT statement .
11137	Create a DELETE statement .
11138	Create a CREATE statement
11139	Converts field types to real values that match this adaptor s DB type .
11140	For creating a JOIN string expression from the database class arrays holding JOIN data .
11141	Return a data type .
11142	Return a field s attributes
11143	Parses application directory for remotable methods
11144	checks if given class should be remotable
11145	method to scan directory
11146	Move an object to another position
11147	Return all objects on one specific location
11148	Load all objects with the radius of the points This method combines a set of getDisplayObjects calls
11149	process a single ext direct request
11150	Sets value if cache should be used or not
11151	Returns ExtDirectApi instance
11152	try s to set all required parameters
11153	Returns random boolean using given probability of true .
11154	Returns key of the input array based on the powers of array values .
11155	Returns an array value based on the powers of array values . Arrays must be not empty and of equal sizes .
11156	Returns an array value with equal probabilities . The input array must not be empty .
11157	Sends information about YouTube videos back to channels that receive URLs to them .
11158	Extracts a video identifier from a YouTube URL .
11159	Returns an API request to get data for a video .
11160	Handles a successful request for video data .
11161	Returns replacements for pattern segments based on data from a given video data object .
11162	Extracts a Google API key for interacting with the YouTube API from configuration .
11163	Extracts a pattern for formatting video data from configuration .
11164	Extracts a pattern for formatting video publish times from configuration .
11165	Extracts a pattern for formatting video durations from configuration .
11166	Builds ExtDirect Header
11167	Generates complete ext api response as array
11168	Returns a array containing ext api response
11169	Add global scope type Attach pre - determined relation on creation .
11170	This method refreshes the session and makes sure we have the latest data from the database .
11171	Returns an array with messages to inform the end - user what filters they have active . Will look in the Filters array for letterFilters or search queries that are limiting the result set . In order to return a user - friendly description of what filters are active it requires an array of column descriptions . See example below .
11172	Encrypt using mcrypt
11173	Decrypt using mcrypt
11174	Hash string using crypt function
11175	Checks whether a crypted hash is valid
11176	Generate a random string with a certain length
11177	Create seed class from stub .
11178	Returns ext api as array
11179	Returns a part of cached array
11180	persists given value in cache
11181	Returns array containing cached list of classes and actions which are remote able
11182	persists list of actions in cache
11183	Returns a array containing all remote able actions
11184	Generates DirectCollection containing all remote able methods
11185	Add all routes by calling this method .
11186	Set all messages to a certain player to read
11187	Get value from nested array .
11188	set value to nested array .
11189	Get value from string json .
11190	Complete purchase data
11191	Checks if a custom or default route exists for a URL and HTTP method . By default will grab URL and HTTP method from server variables but can be passed in as arguments .
11192	Checks if a given URI and HTTP Method can be mapped to Controller .
11193	Given a URL sets needed PATH information . This must be executed before routeFind as it sets the needed pathString var .
11194	Fix array convert flat name to tree node name
11195	Returns ext direct response as array
11196	Determines if a resource exists .
11197	Adds a resource to this Container .
11198	Remove a resource .
11199	Handles deleting a resource .
11200	Checks if a resource should be saved as a singleton . Save item if yes .
11201	Returns a resource by numerical offset .
11202	Attempts to return the collection as a simple array .
11203	Returns the largest value .
11204	Returns a SUBSET of the results . If no matching subset exists returns an empty Container .
11205	Merges the data given into this Container .
11206	Map callback to data .
11207	Returns an ArrayIterator for traversing the contents of the Container .
11208	Returns the value when given a piece of data . If the data item is a primitive or if no key was given then the item is simply returned . However if the data item is an object or array and a key was given then returns the offset given by the key as a value .
11209	Logs a subject in
11210	Append one registry to lookup pool
11211	check existence in the whole lookup pool
11212	get from lookup pool return NULL if not found
11213	Remove one registry from the pool
11214	Count the number of results optionally with query limiters .
11215	Defines a route with or without callback and method .
11216	Set method name for use singleton pattern .
11217	Get method to call from URI .
11218	Runs the callback for the given request .
11219	Call object and instantiate .
11220	Clean resources .
11221	Validate route .
11222	Check if route is defined without regex .
11223	Check if route is defined with regex .
11224	Load routes with regular expressions if the route is not found .
11225	Get error callback if route does not exists .
11226	Returns class name without namespace
11227	Set object properties
11228	Returns the formated URL to the requested section
11229	Initialises the HttpClient
11230	Sends a GET request .
11231	Sends a POST request .
11232	Fetches the IP locatio info
11233	Run the command
11234	Check dereferenced value
11235	Throw exception if looped
11236	Redirects the browser .
11237	For situations such as where a not - logged - in user tries to access a restricted page you may want to save the URL they were trying to go to so you can try forwarding them to it again after they login .
11238	Returns a URL .
11239	Passes list of errors to calling controller . Returns TRUE if all checks passed . False otherwise .
11240	Stores a customly defined validation check .
11241	Checks a data field for validness by running all the specified checks against it .
11242	This handles when a user wants to call a custom validation method in some other class . A common example would be checking if a username is already taken in a database when using a user register form .
11243	If no rotation is set object will face in direction of movement
11244	Set UP vector that will be interpolated
11245	Get the completed migrations .
11246	Get list of migrations .
11247	Get the last migration batch .
11248	Get the completed migrations with their batch numbers .
11249	Log that a migration was run .
11250	Remove a migration from the log .
11251	Get the last migration batch number .
11252	Determine if the migration repository exists .
11253	Wraps the queries inside callback into transaction .
11254	Drop all views and tables .
11255	Call seeder once .
11256	Resolve loaded Seed class .
11257	Find all seed s in the default Flysystem path .
11258	Create Invoker instance for constructor autowiring .
11259	Converts a PascalCase string to it s snake_case equivalent .
11260	Converts a snake_case string to it s PascalCase equivalent .
11261	Adds a remote able instance to the collection
11262	Run console application .
11263	checks if annotated name does not exist already
11264	For echo ing data in Views that repeats .
11265	Include specified model .
11266	Include specified library . - Depreciated . Now let s autoloading handle the file include .
11267	Load view OR return view depending on 2nd parameter .
11268	Create a Creator object with default values .
11269	Calculate and return the path
11270	Renders a template and displays the result .
11271	Renders a template and returns the result .
11272	Handles the body content of a response
11273	Forward to the underlying HttpClient .
11274	Create the migration repository if table does not exists .
11275	build a valid ext direct response and returns as array
11276	Text description of the status .
11277	Get the migration stub file .
11278	Populate the place - holders in the migration stub .
11279	Applies data to email view
11280	Convert PHP error number to string
11281	Returns random float from given range .
11282	Hydrates this model with data .
11283	For handling data which is defined as being on this model .
11284	For handling data that is not defined on this model ...
11285	Sometimes a placeholder value of 1 will be loaded into models which indicate the data is available but must be fetched if needed . This method indicates whether or not a value of 1 means it s a placeholder .
11286	Returns a query object for a specific related model .
11287	Requires a query object and will fetch related models with any parameters defined on that query . If the attribute being fetched is not a model relationship then it will just execute the query and return the result .
11288	Returns related models . May return a single model or a collection depending on if the relationship is defined as singular or plural . If attribute is not a relationship then will return false .
11289	Uses an attribute s definition to correctly fetch a singular object from a singular relationship .
11290	Uses an attribute s definition to correctly fetch a collection of models from a plural relationship .
11291	Returns the appropriate value for when a model attribute needs to be fetched and there is a cooresponding value in the model_data array .
11292	Returns the appropriate value for when a model attribute needs to be fetched and there is NOT a cooresponding value in the model_data array .
11293	Returns the appropriate value for some data on this model
11294	Fetches a collection of the data attributes that apply to this model . Does not include relationships . Will included extended fields unless set to exclude .
11295	For getting model data without triggering dynamic data fetching .
11296	For getting model data without triggering unnecessary dynamic data fetching . Will trigger load of extended object but not on any ID being referenced .
11297	The Related Obj s table should have some sort of owner column for us to fetch by .
11298	The Related Obj s are defined by a custom query . A using definition states which model method defines the relationship . Within that method any query parameters must bet set and a Query Builder object returned .
11299	Not intended to replace get_class! This assumes your model namespace starts with models and you want the classname minus the Models part . If get_class returns Models \ Tests \ User this would return Tests \ User .
11300	Retrieves a single piece of data for the current model that is stored on this model s primary table .
11301	By default an attribute is stored in a DB field with matching name . So lastModified would be stored in a column named lastModified . However there may be situations where a developer wants the attribute name in the model to be different than the DB . I . E . lastModified = > last_modified .
11302	Touches any related models to force them to be grabbed from the persistance layer .
11303	Check path existance & readability
11304	Returns CamelCased string .
11305	Validates and returns sanitized email address .
11306	Just return the data .
11307	Send a message
11308	Populate an entity from request or response body
11309	Populate the place - holders in the seed stub .
11310	Reset current message class code to message mappings cache
11311	Resolving code for current message class from cache or default
11312	Build the string that we use in the authentication header
11313	Builds the basestring for the signature .
11314	Normalize the url like defined in
11315	Returns the parameters that we need to create the basestring
11316	This function connects to the credit gateway and checks if a certain transaction exists .
11317	Notify user about actions .
11318	Get base data
11319	Run an SQL query with the specified parameters if any .
11320	Run an SQL query and return the first column of the first row of the result set if any .
11321	Run an SQL query and return the first row of the result set if any .
11322	Returns matching Annotation class
11323	Returns method class if request method was found in collection
11324	Convert case of a string .
11325	Has string contain a suffix ?
11326	Remove a suffix from a string
11327	Get locations .
11328	Set form field .
11329	Get human .
11330	Get multiline .
11331	Set model .
11332	Set attributes .
11333	Set format .
11334	Get formatted value .
11335	Get form value .
11336	Get base namespace .
11337	Get migration class name .
11338	Get primary key location .
11339	Get module set modules .
11340	Generates validation rules for the specified table .
11341	Get model map .
11342	Set designer with rule to generate fields
11343	Add form field
11344	Remove field from generator
11345	Generate html form string
11346	Generate html string for fields
11347	Generate html string for selected field
11348	Get field object
11349	Set default values for fields
11350	Get data from fields
11351	Submit form . Check http confirm and validate fields
11352	Validate fields and get errors
11353	Wrapper for compression sub - process .
11354	Generate a proxy from a class name
11355	Return element value .
11356	Retrieve input filter used by this form .
11357	Adds a block to permalinks list
11358	Removes the given block from permalinks list
11359	Updates a permalink
11360	Set sortable column by Keys
11361	if the button is clicked
11362	Build a person string compliant to RFC2822
11363	Build a list of person strings compliant to RFC2822
11364	Build a mail header tag compliant to RFC2822
11365	Build a list of name = > email pairs compliant to RFC2822
11366	Format a text with a special encoding
11367	Search the MIME type of a file
11368	De - duplicate a set of name = > email pairs to let each email just once
11369	Clean and build a set of name = > email pairs
11370	Returns the ASCII equivalent of a character
11371	Destroy menu .
11372	Scanner listener for classes that where found
11373	Generates the injection model for the given class and method
11374	Looks into the injection hints on the method to figure out what is to be injected for which parameter .
11375	get an upload file
11376	Load the submodule sof this collected module .
11377	Returns the content of a text container .
11378	Creates a new text container .
11379	Changes an existing text container .
11380	Deletes a text container .
11381	Render a form from the provided form .
11382	Pushes the middleware on pipeline
11383	Builds the stage as a
11384	Resolves all stages to middleware
11385	get the URL with the signature for the Pro account of Google Map
11386	Get IDs of the customers who was processed in Sign Up Volumes Debit calculation .
11387	Get the file from the filesystem . Skip if only hydrated .
11388	Creates a block manager object
11389	Get log .
11390	Get status .
11391	Create the main menu
11392	Send back the isntance or create it
11393	activate error reporting
11394	set the kind of report Log
11395	get the code by LogLevel adapt to the PSR - 3
11396	set the name of the called
11397	Convert an XMLRPC Fault in an Exception
11398	Removes the block from the given slot
11399	Get a custom field stored in the provider . The custom field is identified by its type .
11400	Lecture depuis une chaine
11401	Start at the line for Add
11402	Get WXACode .
11403	Get WXACode unlimit .
11404	Change the current theme used
11405	Gets cache manager
11406	Creates a new Item model . If creation is successful the browser will be redirected to the view page .
11407	Returns json event list for form DepDrop widget .
11408	Event callback to be triggered on bootstrap
11409	Show themes panel action
11410	Update a tag name .
11411	Get users from a tag .
11412	Batch tag users .
11413	Untag users from a tag .
11414	Decrypt data .
11415	Walk through the compressed downline tree and calculate Personal bonus for DEFAULT scheme .
11416	Bind operation with calculation .
11417	Include the PIWIK - Tracking - code into every page .
11418	Create and returns an instance of Benri_Application .
11419	Query database and return results
11420	Get cache item
11421	Construct the select sql to retrive model from db
11422	Fetch a user by open id .
11423	Batch get users .
11424	List users .
11425	Set user remark .
11426	Get black list .
11427	Export group to an object
11428	Export group infos for an optgrouped select
11429	Runs the application
11430	Runs a route
11431	Send a GET request with query parameters .
11432	Send a HEAD request with query parameters .
11433	Get the semantic content of giving string .
11434	Register the translation resources read from the given folders
11435	delete a value
11436	remove a directory recursivly
11437	Construction of a MimeEmail object
11438	Get the value of a specific option
11439	Get the errors
11440	Get the informations
11441	Set a registry entry
11442	Get a registry entry
11443	Get a message by id or current message
11444	Set a transporter
11445	Get the transporter
11446	Get the spooler
11447	Export or import fixtures
11448	Export or import one table
11449	Fill the model with an array of attributes .
11450	Return parent URI
11451	Return parent key name
11452	Create link attribute to client
11453	Retorna o hash id a partir do Id
11454	Convert the model s attributes to an array .
11455	Fetch statistics data by deviceId .
11456	Fetch all devices statistics data by date .
11457	Fetch statistics data by pageId .
11458	Fetch all pages statistics data by date .
11459	add a file to the mail
11460	send the mail
11461	Enable all custom error - exception - and assert - handling .
11462	Trigger an assert - type notice .
11463	Properly display all uncaught exceptions .
11464	Convert all PHP - errors into exceptions .
11465	Handle failed assertions .
11466	Write a line to a specified log - file in the error folder .
11467	ClearView constructor .
11468	Display a list of response .
11469	Display response .
11470	Create new response .
11471	Show response for editing .
11472	Update the response .
11473	Remove the response .
11474	Set object .
11475	Set object type .
11476	Authenticates against the supplied adapter .
11477	Boots the theme from the given theme plugin
11478	Adds the default theme slots to the page which uses the given template
11479	Execute a request adding required JSON headers and authorization .
11480	Returns the JSON data field from given response .
11481	Saves the handled page
11482	Save the all website pages
11483	Get the existing factory for a class . If a factory is not already defined a default one will be created via reflection .
11484	Get an array of arguments to a function resolving type - hinted arguments automatically on the way .
11485	Resolve a class type - hinted argument for a funtion .
11486	Resolve a non - class function argument .
11487	Call resolving callbacks for an object .
11488	The method sets the name of current session .
11489	It inits the data of new session or continues the current session .
11490	It complitly destroys session with cookie .
11491	It returns all session variables as associative array .
11492	It removes the variable of session by passed key .
11493	It clears the session by removing all stored variables .
11494	Logs the given message
11495	Show page collection dashboard interface action
11496	Set end time .
11497	Fetches all rows .
11498	Fetches one row in an object of type Benri_Db_Table_Row or returns null if no row matches the specified criteria .
11499	Create table rows in bulk mode .
11500	Initialize database adapter .
11501	Setup the Dependency Injection Container
11502	Finds and displays a Comment entity .
11503	Creates a form to delete a Comment entity .
11504	Assigns the specified slot range to a node .
11505	Returns the specified slot range .
11506	Assigns the specified slot to a node .
11507	Handle and return response .
11508	Validation request params .
11509	Parse message array from raw php input .
11510	Parses a program
11511	Replaces special characters in a string
11512	Shows page where user can request password recovery .
11513	Displays page where user can reset password .
11514	Return named parameters
11515	Return named parameter
11516	Updates metadata with icons .
11517	Generates markup for the iOS pinicon
11518	Generates markup for the HTML5 favicon
11519	Generates markup for the Android pinicon
11520	Generates markup for the Windows pinicon
11521	Removes an event listener .
11522	Returns the item with the specified name .
11523	Find bot names in the given DOM
11524	Get useragents of the given bot
11525	Get the dom tree of a given url
11526	Resolve a template name to mustache content or a set of tokens .
11527	Register the package helpers
11528	Register custom helpers
11529	Replace variables in string with their values .
11530	Chmods files and directories recursively to given permissions .
11531	Looks for the current slots dir . Slots are sought in cascade in pages folders languages repeated slots and site repeated slots
11532	Parses given folders and returns the first existing one
11533	Reads and locks a file from the filesystem
11534	Locks and write a file to the filesystem
11535	Bootstrap the module set on load .
11536	Faz o cast de \ DateTime para p13 \ datetime \ Time
11537	Gets a request attribute .
11538	Set items .
11539	Adds the block to the slot for the given language and page
11540	Defines the options required by the add method
11541	Edit user profile
11542	Confirm user email
11543	Change user password
11544	Password reset confirmation method
11545	Change user email
11546	Change user security question
11547	Adds a group .
11548	Returns a group in the service based on name .
11549	Detect config authenticate .
11550	Gera um lista completa de pagamentos
11551	Save given consignment
11552	Remove given consignment . Allowed only in new status
11553	Dispatches consignments with given DispatchConfirmation
11554	Cancel given consignment . Allowed only in status different than new .
11555	Get summary for all bonus credits for all operation for period .
11556	Finds a namespace parameter from all the stored namespaces parameters
11557	Tries to detect namespace from modal class
11558	Save cookie data
11559	Set weak words where you need to place a HTML space entity to not break line after each configured weak word in processing text . All words has to be configured as single string with all weak words separated by comma character without any space .
11560	Set special shortcuts for specific language to not have any line break inside . If language is not specified there is used default language from controller instance .
11561	Set units where you need to place a HTML space entity to not break line before each configured unit where is founded digit character before unit and white space before in source text . All units has to be configured as single string with all units separated by comma character without any space .
11562	Get weak words as array of strings units and shortcuts . as array of string for currently processed language .
11563	Process configured weak words and units and place HTML space entity where is necessary to not line break source text where it s not wanted .
11564	Process single weak word - place HTML space entity where is necessary to not line break source text where it s not wanted .
11565	Returns an instance of the Concrete5 app object
11566	setting kernel mods
11567	get a property
11568	Get the recordcount
11569	Searches the database for attachments
11570	Displays an attachment
11571	Adds the edited block to PermalinkManager object
11572	Traverse structure tree and generate plain array of placeholder data .
11573	Sends HTTP headers .
11574	Generate an opening button tag .
11575	Displays the registration page . After successful registration if enableConfirmation is enabled shows info message otherwise redirects to home page .
11576	Displays page where user can create new account that will be connected to social account .
11577	Confirms user s account . If confirmation was successful logs the user and shows success message . Otherwise shows error message .
11578	Displays page where user can request new confirmation token . If resending was successful displays message .
11579	Configuration MonoLogger Instance
11580	Returns the current status
11581	Bootstraps the application
11582	Get the service definition and validate if the service is public .
11583	Preenche a entidade a partir de um array
11584	Walk trough the compressed downline & calculate team bonus for EU scheme .
11585	Set the spooled mails directory
11586	Starts the timer for a task
11587	Ends the timer for a task
11588	Returns the total duration .
11589	Returns the processed matrix result report .
11590	Titleizes a string
11591	Upload image to path
11592	Get full path file
11593	Yields a list of pages or a single page if a page name is specified in the service name .
11594	Creates a new page
11595	Checks if the page is contained in service name or specified in parameter id and returns the value then .
11596	Calculate TV for the downline tree .
11597	set the cache that we would use
11598	initialize the cache class and get the good object
11599	It loads main file of configuration and checks for validity .
11600	It returns the config value by passed name or all config set if it wasn t specified .
11601	It determines the basic site URL .
11602	The method returns full path to the parent directory of component by its name .
11603	Aligns the site slots according with the changes made with the theme in use
11604	Called on interruption
11605	Returns an hash generator instance from a descriptive name .
11606	Returns the PHPHint as php code for the Object
11607	Shows profile settings form .
11608	Attempts changing user s password .
11609	Disconnects a network account from user .
11610	Connects social account to user .
11611	Mueve el archivo a la ruta entregada .
11612	Resolves the inner - most container of a container chain .
11613	Create a staff .
11614	Update a staff .
11615	Delete a staff .
11616	Invite a staff .
11617	Get staff session history .
11618	Collect data for Phase2 compression and call process common for general & forecast calculations .
11619	Returns the site object .
11620	Returns the authorized user object .
11621	Returns the current page view object .
11622	Returns the API object .
11623	Emit session data
11624	Overwrite this method to return an existing Activity Content object which would be displayed in a view .
11625	Create or modify the Content object from the form data .
11626	Check to see if a cronjob is already running
11627	Create a lock for this process
11628	Gets the Path to the lock file
11629	Register new operation .
11630	Convert turnover data into transactions data to create operation .
11631	Get PV transitions data for period .
11632	Collect PV transitions on accounts and get PV turnover for period .
11633	Bind operations with calculation .
11634	Bind pages for device .
11635	Get pageIds by deviceId .
11636	Get devices by pageId .
11637	Get table registry .
11638	Get authorities .
11639	Get column settings .
11640	Get data .
11641	Get columns .
11642	Get total items .
11643	Get formatter .
11644	Returns the underlying connection to be used by the pipeline .
11645	Add the methods that return the operations in the API .
11646	Generate the docblock generator
11647	Parses a service file and adds all the operations to this
11648	Called to attempt an authentication .
11649	Creates a Zend_Db_Select object that is completely configured to be queried against the database .
11650	Attempts to make certain that only one record was returned in the resultset .
11651	Get a Catalog model from an array of unstructured product data
11652	Initialize rest routes .
11653	Initialize the database resource .
11654	Initialize multidb resources .
11655	Parse a DSN string and return return its components .
11656	Get short name .
11657	Construye la redireccion
11658	Adds entries to a java xml properties file .
11659	Removes entries to a java xml properties file .
11660	Reads the properties from a string .
11661	Reads the properties from a file in xml java properties format .
11662	Saves the properties to a string .
11663	Saves the properties to file .
11664	Validates all the elements against the defined validators .
11665	Applies all defined filters to an element s value
11666	Adds function to twig engine .
11667	Adds default function for twig template .
11668	Returns the remote transport client
11669	Creates an aggregate connection .
11670	Creates a new client from the specified .
11671	Executes a command without filtering its arguments parsing the response applying any prefix to keys or throwing exceptions on Redis errors even regardless of client options .
11672	Handles - ERR responses returned by Redis .
11673	Check if the key exists in the array
11674	Configures the configuration options
11675	Returns the homepage template
11676	retrieves a translation key from file for a locale
11677	checks if a file for a given locale loaded
11678	loads translations from file
11679	logs a message
11680	set the path to the translations
11681	Read session data
11682	Force the request action parameter .
11683	Push a message allowing it to be shown to clients .
11684	Register for Lumen Application .
11685	Get cache path .
11686	Get location .
11687	Get the accompanying periods of a give person with the chronological order .
11688	Set the center
11689	Validation callback that checks if the accompanying periods are valid
11690	The method calls user auth checking on successful complition of which it invokes the target controller and the onFail method of Auth class in other case .
11691	Get placeholder substitutions from origin
11692	Traverse the document and build parsed requests for spas
11693	The main run method .
11694	Creates a new compiler based on the file extension type .
11695	So that we can bust the client cache in browser we will rename the asset filename using a timestamp . But we also need to update the HTML that includes the asset into the web page . This method does all that for us .
11696	Helper method to convert several possible inputs to a simple array of file paths .
11697	alias for translate
11698	Returns service object based on service name .
11699	Adds service .
11700	Returns a cache pool .
11701	Returns either a service group or action based on component path .
11702	add an element in the form
11703	get global form
11704	get global object form
11705	set the entity to synchronize with the formular
11706	Validate data from storage array .
11707	Lists all User models .
11708	Creates a new User model . If creation is successful the browser will be redirected to the index page .
11709	Updates an existing User model . If update is successful the browser will be redirected to the index page .
11710	Confirms the User .
11711	Blocks the user .
11712	Performs AJAX validation .
11713	Get data for periods & calculations .
11714	Get the access token from WeChat server .
11715	Get the cached token .
11716	Command entry for running the desire command
11717	Load all command classes
11718	prepare fetchQuery without WHERE and TYPE clause
11719	Saves the queue action
11720	Returns integer counter
11721	Returns all items from blog category .
11722	Returns array posts
11723	Collects activity .
11724	Appel un service REST
11725	Assign a view variable .
11726	Include the view file and extracts the view variables before returning the generated output .
11727	Set taxonomy .
11728	Fetches value from attributes
11729	Puts value into attribute
11730	Validates the password . This method serves as the inline validation for password .
11731	Generates a new slot
11732	Generate blocks for the current slot
11733	Publish the current seo
11734	Hides the current seo
11735	Update downline tree with calculated OV values .
11736	Set url address
11737	Return domain name from url
11738	Return normalize address url
11739	Return md5 address url
11740	Return a csv file with all the persons
11741	easy getting a person by his id
11742	Adds a new page to the website using the given template from the given theme
11743	Removes the given page
11744	Register shake around .
11745	Get shake info .
11746	Return the device instance .
11747	Return the group instance .
11748	Return the page instance .
11749	Return the material instance .
11750	Return the relation instance .
11751	Return the stats instance .
11752	Open article comment .
11753	Close comment .
11754	Get article comments .
11755	Mark elect comment .
11756	Unmark elect comment .
11757	Delete comment .
11758	Reply to a comment .
11759	Delete a reply .
11760	Returns an array with object properties names as keys . Empty property values are omitted
11761	Sets an object class property
11762	Gets an object class property
11763	Replaces the first occurrence of the stage in the pipeline
11764	Handles merging or converting the stage to a callback
11765	Remove an expression to this filter
11766	Finds the index of expression or column name
11767	Wipes the current list of master and slaves nodes .
11768	Fetches an updated list of sentinels from a sentinel .
11769	Returns a connection by its role .
11770	Switches the internal connection in use by the backend .
11771	Retries the execution of a command upon server failure after asking a new configuration to one of the sentinels .
11772	Return resolved modules
11773	Find component module by component type
11774	Look up for the level with the max bonus percent .
11775	Returns whether the website is enabled and visible to the public
11776	Get question helper .
11777	append Choice on POST_SET_DATA event
11778	Start a site from scratch action
11779	Replace DummyHelper in stub
11780	Take a embed document array representation to return entity
11781	Take a id to turn it into a embed document array representation
11782	Generates the source from the block children
11783	Add a page .
11784	update a page info .
11785	Pagination to fetch batch of pages .
11786	delete a page .
11787	get age by date
11788	Update downline tree with calculated TV values .
11789	Show ElFinder for files action
11790	Global variable clearer
11791	Set From field
11792	Set To field
11793	Set Cc field
11794	Set Bcc field
11795	Set mail file attachment
11796	Set mail object
11797	Set plain text version
11798	Set HTML version
11799	Set Reply - To header field
11800	Make a basic substitution in the object body
11801	Implements template . render
11802	Carga un objeto de foreverPHP .
11803	Carga un objeto desde las Apps .
11804	Check if a key is a relation
11805	Execute the query as a select statement .
11806	Chunk the results of the query .
11807	Get an array with the values of a given column .
11808	Get a paginator for the select statement .
11809	fill absent relation attributes .
11810	Load the foreign object from the foreign data source .
11811	Load the local object .
11812	assign a variable for the Benchmark
11813	List materials .
11814	Step1 of the installation process . Displays the end user license
11815	Step2 of the installation process . Validates that the EULA has been accepted from step 1 . Performs a validation of the system requirements .
11816	Step3 of the installation process . Displays the database configuration form
11817	Step4 . Performs the database table setup . Please note that this method does not actually create or overwrite the database and as such the database must already exists . If Database setup is successful will display the master user setup form
11818	Set the service locator .
11819	Sample adding DI
11820	Retrieve contents for normal cell .
11821	Prepare table items .
11822	Render admin header .
11823	Replaces middleware on the stack
11824	Return the BOM if the file if it exists .
11825	Add a BOM at the beginning of the file .
11826	Remove the given BOM from the file .
11827	Return a BOM string or an array of all BOM .
11828	Set the URI File
11829	Returns array of items tagged with the given tag
11830	Expands each collection item with extra data
11831	Create command from id .
11832	Gets the cache .
11833	Restores the system configuration from cache .
11834	Stores the system configuration to cache .
11835	Save modified user
11836	Adds action .
11837	Get logo .
11838	Almacena una entrada en el cache .
11839	Converts image to jpeg and optionally saves it to a given path .
11840	Calculates the image size - width and height in px .
11841	Extract and validate input parameters .
11842	Analyze HTTP request load data from DB to compose bind array with parameters for grid query .
11843	Get calculation ID for given period & tree type .
11844	create a new person from array data
11845	Creata a random address
11846	Reset the value to the given column to its defaults .
11847	Saves the properties to the database .
11848	Check if this model is set as a read - only model .
11849	Gets settings from real source most probably from database
11850	creates a xml - rpc fault
11851	the main page
11852	It assosiates the controller with the layout .
11853	The method redirects to the URL which passed as param . The HTTP - code is 302 as default . The method unconditional completes the script execution the code after it will not be executed .
11854	It returns the header by passed name . The search is case - insensitive .
11855	It returns the URL path of the request .
11856	It checks if the request is an ajax request .
11857	Remove from response not remove from browser
11858	Get handler .
11859	Get handling object .
11860	Set companion object .
11861	Get companion .
11862	Set paired data item .
11863	Set handled data item .
11864	Saves the encrypted session data to the storage .
11865	Fetches the encrypted session data based on the session identifier .
11866	Asks the drive to lock the session storage
11867	Asks the drive to unlock the session storage
11868	Remove this session from the storage .
11869	Removes the session older than the specified time from the storage .
11870	Hide page action
11871	Create a form according to the maxLength option
11872	Assigns a data key to this instance .
11873	Get token from WeChat API .
11874	Refresh authorizer access token .
11875	Gets the module directory .
11876	Retourne le dump de la structure d une variable
11877	Retourne le dump d une query
11878	Retourne le dump d une variable standard
11879	Retourne le contenu d un trace de la pile d execution
11880	Get console application object .
11881	Run application .
11882	prepare the options form field
11883	Get ApiTicket token cache key .
11884	Get module handler .
11885	Add placeholder definition to structure
11886	Add linked structure definition
11887	Get user .
11888	Get familiarity .
11889	Get a paginated list of the models .
11890	Add attributes to required fields .
11891	Creates a form to create a CustomField entity .
11892	Displays a form to create a new CustomField entity .
11893	Creates a form to edit a CustomField entity .
11894	Encrypt the data string
11895	Decrypt the data string
11896	Generate random IV & set it as property
11897	Get status log .
11898	Get estimate time remaining .
11899	Get duration .
11900	Get is most recent .
11901	Assemble the fullAddress from the other properties
11902	Caches the asset to the local filesystem .
11903	Get descriptor .
11904	Get log model .
11905	Get type .
11906	Return a notice json response .
11907	Do a full build in dev mode if it is necessary
11908	Get the content of a file as a timestamp .
11909	Get all the params that are either not optional and don t have a default value
11910	Get all the params that have a default value
11911	Strip a string from the end of a string
11912	Set industry .
11913	Returns current entry value
11914	Adds replicable container
11915	Constructs the collection by reading all instances of DiAnnotation from the reflector
11916	Return HTTP Code
11917	New query instance .
11918	Register a group of dependencies defined in the callable . Each referenced argument should be assigned its designated value when invoked . Note that invocation takes place only when a dependency is retrieved .
11919	Renders the all the given keys as HTML element attributes .
11920	Removes the page from PermalinkManager object
11921	Finds recursively differences in two arrays
11922	The fully calculated item total . This includes the options extras & quantity .
11923	The calculated item total . This includes the options & extras but excludes quantity .
11924	Update permalinks on the blocks where the permalink was used
11925	Run all registered code generators and writes the code to files
11926	Sets the directory for autoloading of configuration files .
11927	Run one data interface .
11928	Get interface .
11929	Set interface .
11930	Get all the custom
11931	Generate a field type
11932	Generate a field option
11933	Render a view
11934	Apply a user function to every member of an array
11935	Retrieve the primary key column for the model item .
11936	Get primary key .
11937	Find the models for a foreign data source .
11938	Find all the foreign database records .
11939	Find one foreign database record .
11940	create an URL
11941	Detect config argument .
11942	Validate argument .
11943	Validate url .
11944	Validate GET .
11945	Handle event message .
11946	Return the current user .
11947	Get priority .
11948	Calculate signature for request
11949	Creates the Signature Base String .
11950	Builds the Authorization header for a request
11951	Get the oauth parameters as named by the oauth spec
11952	Substitute questionmarks in SQLOperation with values
11953	Delete the current object from the database .
11954	Reset all properties except the keys and the given properties
11955	Generates the routes
11956	Add Queue For Specified Channel
11957	Adds a renderer to the list
11958	Remove element from collection
11959	Splice and return new collection from current elements
11960	Reduce collection to a single value
11961	CAll function on each element of collection
11962	Parse access points from connection array .
11963	Set valid Access Point .
11964	Set right source of access points .
11965	Wrapper for yii security helper method .
11966	Renders page slots
11967	Get pid by program name
11968	Return authentication module full class name .
11969	Set authentication module full class name implementing \ MvcCore \ Ext \ Auths \ Basics \ IAuth .
11970	Extend the expiration datetime by the set TTL .
11971	Handle the dice roll command
11972	Check the supplied parameters are valid
11973	Verify the combination of parameters are valid
11974	Verify parameter 1 is valid
11975	Verify parameter 2 is valid
11976	Handle the help command
11977	Get interface object .
11978	transform message to XML .
11979	Transform wxcard message .
11980	Unify query .
11981	Check whether the given Acquirer may access the Resource in question .
11982	Try to acquire a Lock on the given Resource .
11983	Get configuration from settings . yml file .
11984	Boot Application .
11985	Reads data from this reader following the scanf parameter convention .
11986	Reads n bytes from this stream .
11987	Checks if the data at the index is on an EOL marker .
11988	Reads a line from this reader ended by a CR or CRLF .
11989	Sort entities from the given IDs
11990	Sets an entity as filtrable
11991	Validate the given Slug
11992	Get the collection of items as a plain array .
11993	Orders items by a key .
11994	Agrega datos a la tuberia .
11995	Get a Catalog model from the an array of catalog data
11996	Doctrine v1 . 2 generate method
11997	Doctrine v2 . x generate method
11998	Phalcon ORM generate method
11999	Phalcon generate query
12000	Doctgrine ORM v1 . 2 generate query
12001	Doctgrine ORM v2 generate query
12002	Generate random string
12003	JsCode 2 session key .
12004	create an array with an object
12005	Archives the given block
12006	Returns the authority tree
12007	Gets the permissions givent to the authenticated users
12008	Returns all message strings and translations .
12009	Nastavi text pred navigaci
12010	Prida polozku do navigace
12011	Add block section .
12012	Add doctrine section .
12013	Method is called with the key and value pair of compiler description . See getCompilerDescriptions to learn how it is formatted .
12014	Executes Query .
12015	Checks if the passed client instance satisfies the required conditions needed to initialize the transaction object .
12016	Executes UNWATCH .
12017	Calculate the filename that the request should be cached as
12018	Setup a queue inside a AMQP server . This will declare the queue and it s bindings
12019	Add the properties to the Operation that are always present .
12020	Add the ability to change the API instance .
12021	Generate the code for setting a parameter in the request
12022	Adds a method to allow checking of the scope requirement for an operation .
12023	Add methods to access each of the parameters in the operation .
12024	Add the constructor method for the operation
12025	Helper method to avoid repitition
12026	Generate a docblock generator for the execute method
12027	Add the execute method to the operation
12028	Add the async execute method to the operation
12029	Generate the code required to filter a parameter of the operation .
12030	Add a method to get a parameter of this operation after it has been filtered .
12031	Add the method to create the request and execute it in one step
12032	Add a method to execute and parse the response of a previously created request .
12033	Add a method to asynchronousl execute and parse the response of a previously created request .
12034	Add a method that process the response from the raw body to the final type of the opeartion .
12035	Helper method for generating trivial methods .
12036	Add a method to determine whether the response should be processed into a hydrated response class . By default it delegates that decision to the main api class - override this method to have a per operation decision .
12037	Generate the complete operation class and save it to the filesystem .
12038	Clear value in session
12039	Send all headers .
12040	Returns the current Session user
12041	Returns the full name of the loaded Profile
12042	Updates the user profile data
12043	Searches the database for users
12044	Determine if the given user can view the question .
12045	Determine if the given user can delete the given question .
12046	Get thumbnails of a video You can specify a format . If so you get a single thumbnail of specified format otherwise you get an array with all three available formats
12047	Add a range
12048	Render an element . Introspects the element type and attributes to determine which helper to utilize when rendering .
12049	set the language if you don t want take the default language of the configuration file
12050	Initialise Guzzle client using headers appropriate to adapter .
12051	Creates a new render - related exception .
12052	Get relation model field .
12053	Sets the module .
12054	Removes the module .
12055	Gets the module .
12056	Get labels .
12057	Get target .
12058	Get possible targets .
12059	Set target .
12060	Get target label .
12061	Cacheing the permission tree query
12062	Run the migration from the specified module .
12063	Determines whether or not post meta can be saved .
12064	set a flashbag value
12065	destroy the session
12066	invoke a call to the RPC server
12067	Fetch data from Projects
12068	Fetch data from Project
12069	Update a project
12070	Create a project
12071	Get all ranks configuration parameters to create map for forced customers .
12072	IDs for customers with forced qualification .
12073	Load configuration data for customers with forced qualification .
12074	Display a listing of the childs resource .
12075	Display a listing of the child resource .
12076	Create a new child
12077	Create and associate a new child
12078	Associate a new child
12079	Dissociate a new child
12080	Update a child
12081	Delete a child
12082	Gets a collection with a single item ;
12083	Returns all the published media stories
12084	Wraps a media entity with accesorry data like author attachments targets etc ...
12085	Adds a new media object to the database
12086	Saves configuraiton settings
12087	Create new validator .
12088	Determine if the given user can view the response .
12089	Determine if the given user can delete the given response .
12090	If Success or Fail
12091	Method for initializer guzzle
12092	Generates an URL containining a timestamp parameter
12093	Alias for getDomain from Extlib \ System \ IpAddress
12094	Alias for getMd5Address from Extlib \ System \ IpAddress
12095	Return short text
12096	Generate sample secret code for sign any request etc ..
12097	Check sign code for request
12098	Create nice date
12099	Count price netto from brutto by tax
12100	Count price butto from netto by tax
12101	Set html tag accept
12102	Set max size file
12103	Php size format to bytes
12104	It processes the call parameters of cli - script and passed them to the CliCtrlResolver object .
12105	Exception callback .
12106	Error callback .
12107	Returns the Page object identified by its page name .
12108	Changes a page s attributes according to data from the request .
12109	Changes the id of a page .
12110	Deletes a page .
12111	Persists page list in configuration file .
12112	Get foreign data model .
12113	Get unmapped foreign keys .
12114	Load the foreign data items either lazily or not .
12115	Provide an array of all parent classes for the provided Exception .
12116	Get the short version of a fully - qualified class name .
12117	Display a console page with information about the Exception .
12118	Retrieve a parameter .
12119	Actual customers downline mapped by customer ID .
12120	Collect ViewEvents to build lastModified date .
12121	Returns the last modified date for a request .
12122	Stores the last modified date for a request .
12123	This method gets called when an Entry is update and updates the last modified time cache entry for every page it is used .
12124	Get all languages of the site
12125	Return alias id for given language
12126	validate the Type
12127	Get setting .
12128	Run task .
12129	Indicates whether the task failed or not .
12130	Clears the stats .
12131	WHOOPS INTERFACE METHODS
12132	Appends parameters to a given url .
12133	Gets settings service
12134	Display a list of question .
12135	Display question .
12136	Show question for editing .
12137	Update the question .
12138	Remove the question .
12139	Twig extension that is used to render the value of a custom field group .
12140	Consume value in session
12141	Sign up a user for a chance to participate in the beta .
12142	Load session provider
12143	Get user object
12144	Log user in session
12145	Solo cambia la configuracion mientras el script este vivo
12146	Obtiene un item de configuracion
12147	Is has exception in storage
12148	Get exception code
12149	Get reserved codes
12150	Check reserved codes
12151	Get related type .
12152	Set up .
12153	Get possible roles .
12154	Get required roles .
12155	Get initial role .
12156	Get owner .
12157	Get object type model .
12158	Get object level .
12159	Get title .
12160	Get details widget .
12161	Get is childless .
12162	Get form .
12163	Get form segment .
12164	Creates the authority table
12165	Creates the authority permission table
12166	Creates the menu table
12167	Creates the menu group table
12168	Query for creating property values by proxy table
12169	Query for creating the property values table
12170	Runs the database installation transaction
12171	Get a default factory for a class .
12172	Get a default factory for a callable .
12173	Add arguments to an existing factory via reflection .
12174	Add a scalar argument to the factory definition .
12175	Add an optional scalar argument to the factory definition .
12176	Add a class argument to the factory definition .
12177	Add an argument to the factory definition .
12178	Get individual .
12179	Get photo email .
12180	Get taxonomy package .
12181	Get primary object .
12182	Get primary child .
12183	Get one .
12184	Get by .
12185	Get nice .
12186	Get companion nice .
12187	Set default options .
12188	Get related object .
12189	Get primary relation .
12190	Get active .
12191	Build exception message .
12192	Puts data into the cache .
12193	Handles the exceptions
12194	Instantiates the given class with the given data .
12195	Builds a list of values matching the provided arguments .
12196	Get current url .
12197	De - serializes a block
12198	Serializes a block
12199	Joins two json contents
12200	Extract values from a given object
12201	Show ElFinder for image files action
12202	Create a PSR - 7 Response Object
12203	Register the listeners for the subscriber .
12204	Given an input string find any emoji characters and add a wrapping span tag that includes the emoji description in an accessible manner .
12205	Generate a Response object
12206	Create a new pagination object
12207	Refreshes the slot entity
12208	Get single widget .
12209	Get system account ID by asset type ID .
12210	Save transaction - customer & transaction - order relations to log .
12211	It adds snippet to the view object .
12212	It returns assigned snippet object by the name . If the name not presents then it returns the map with all View - assigned snippets .
12213	Ejecuta un middleware .
12214	Ejecuta la vista solicitada .
12215	Compile the configuration now
12216	Override to adjust configuration files and order
12217	Register error exception and shutdown handlers
12218	Catch errors in the shutdown process
12219	Set a custom error handler to make sure that errors are logged . Allows any non - fatal errors to be logged .
12220	Handle thrown and uncaught exceptions thrown in the middleware queue . The exception handler is registered when this Mistake middleware is created . Any exceptions thrown before that won t be caught by this handler .
12221	Create a log entry about the error exception
12222	Takes an Error Exception and gets the available error information and creates a body of it and returns the body .
12223	Get the complete result without pagination
12224	Get the paginated result
12225	Return retry middleware .
12226	Add a new sibling before this node
12227	Delete this node from document
12228	Remove this node from document
12229	Replace this node
12230	Delete all elements matching a XPath expression
12231	Copy all attributes from a node to current node
12232	Clone all children from a node and add them to current node
12233	Move current node to a new parent
12234	Return the first node of the result of an XPath expression
12235	Insert raw XML data
12236	Insert a Processing Instruction
12237	Set several attributes at once
12238	Return the content of current node as a string
12239	Return the XML content of current node as a string
12240	Return all elements with the given class name
12241	Add given class to current node
12242	Return the current node slightly prettified
12243	Transform current node and return the result
12244	Run an XPath query and sort the result
12245	Sort this node s children
12246	Sort an array of nodes
12247	Get a node by attribute name and location in xpath
12248	Get a single element by xpath
12249	Execute xpath query and index by attribute
12250	Get an attribute by name
12251	Get an node by name
12252	Add missing nodes and attributes to an element from a strucure element Had to be written like this because clone does not work on SimpleXmlElements
12253	Dump pretty XML
12254	Makes a compiler ready to execute
12255	Removes a compiler from list if exists
12256	Returns the required Skyline CMS Application data sub directory
12257	Obtaining search paths from project
12258	Resolves the compilers against their dependencies
12259	Main compile command . Call this function to resolve any compiler factories and dependents . Then every compiler is called to compile its stuff
12260	Set in cache all the custom fields of a given class containing some custom fields .
12261	Set in cache of the custom fields of a customfield Group .
12262	Return a requested customField
12263	Render the value of a custom field
12264	Adds a directory to the array of sources that will be searched for themes to load .
12265	Searches source directories for criteria in given Finder
12266	Render the cms blocks
12267	Renders the given block
12268	Renders the slots
12269	Generates the events based on the current page .
12270	Dispatches the events
12271	Obtiene la ruta actual
12272	Calculate OV for the downline tree .
12273	Faz o cast de \ DateTime para p13 \ datetime \ Date
12274	Returns new DateTime object formatted according to the specified format
12275	Returns the path to a given template .
12276	Builds a map of template names to paths .
12277	Update a group name .
12278	Move user to a group .
12279	Batch move users to a group .
12280	Initializes the template assets manager object
12281	Get pre auth code .
12282	The method kills custom process .
12283	Renders a content .
12284	Renders head assets .
12285	Renders end assets .
12286	Renders a partition .
12287	Renders a partition if condition is true .
12288	Renders a list .
12289	Makes a block .
12290	Count the total of rows
12291	Find all rows filtered for DataTables
12292	Find last Post with image for a specyfic site
12293	Update a resource by id
12294	Delete a resource by id
12295	Return collection of resources
12296	Filter the Entity
12297	Rules of Entity
12298	Get only fields fillable from Pivot Relation
12299	Get array fields fillable from Pivot Relation
12300	Create child One - to - One OR Many - to - Many without Pivot data
12301	Return all childs from relation
12302	Return one child by id
12303	Generated the site map
12304	Returning configured admin view
12305	Creating Admin List Header based on Main Table
12306	Updates existing specific items based on ID
12307	Retorna um objeto DatePeriod relacionado ao intervalo de datas
12308	Show backend action
12309	Reset password action
12310	Finds the file from the request s uri path in the provided paths .
12311	Detects file mime type from extension or using finfo_file if exists .
12312	Writes the file in the web_dir so next time web server serve it
12313	Returns an associative array representation of the createJob ready for transport or serialization .
12314	Creates a new Category entity .
12315	Sorts a list of features .
12316	Displays a form to edit an existing Category entity .
12317	Searches source paths for the specified YAML file and parses its contents .
12318	List search elements
12319	Redirecting short URL to original URL
12320	get the bundle name location or the actualy bundle name if they isn t location
12321	Prepare data before execution .
12322	Run command .
12323	Ask question before executing command .
12324	Do Execute command .
12325	Execute command .
12326	Upload image material .
12327	Get param .
12328	A convenience function for enqueuing scripts .
12329	A convenience function for enqueuing styles .
12330	Gets the source to enqueue based upon whether or not debugging is enabled .
12331	Retrieves a reference identified by key
12332	Add a reference identified by key
12333	check if the ips is not in the blacklist
12334	check if the password is good
12335	Edit user profile action
12336	Change password action
12337	User email confirm action
12338	Change security question action
12339	It returns console colored message .
12340	It prints passed message to the console .
12341	Method prints passed error to the console .
12342	The method prints important information to the console .
12343	Creates a new Post entity .
12344	Finds and displays a Post entity .
12345	Displays a form to edit an existing Post entity .
12346	Creates a form to delete a Post entity .
12347	Add assets to the collection
12348	Wraps a callable to ensure that the returned value is a valid connection .
12349	Get taxonomy .
12350	Verifies user authorization
12351	Invalidates current user authorization
12352	Returns whether the authenticated user is allowed access for the required minimum and maximum access levels
12353	Salva um login a partir do formulario
12354	It assosiates the object with view file .
12355	The method provides massive assignment user variables of the class .
12356	Generates the theme definition and slots
12357	Updates the name according to the display field of the content type .
12358	Register new compression calculation .
12359	Return Id Decoded
12360	Return Id Encoded
12361	Retrieves the publisher for a specified message
12362	Creates Service instance that extends Query Builder .
12363	Modify clauses and keywords .
12364	Updates the block source
12365	Initialisation du controleur
12366	Find next video to convert
12367	Get extra option .
12368	set a new header
12369	Authenticate a user for all next requests .
12370	The method returns a tree element by a key which is formed as a string separated by points and reflecting the nesting hierarchy .
12371	The method adds a set of fields and their corresponding rules and parameters for validating the input data
12372	The method adds a validation rule to the stack of validator rulesets .
12373	The method applies the validation rule to the validable field .
12374	The main executable method .
12375	Add a new value pair to comparison list
12376	Compare all previous set value pairs
12377	Registers a superadministrator at installation
12378	Executes the installation
12379	Help command handler
12380	Create a new exception from some reflection objects .
12381	Returns the unique hits for the given date interval .
12382	Return the hits for the last Month
12383	Returns an associative array the keys are the names of the months and the values are the number of hits during this month . If no parameter is provided then the method returns the hits for the last month .
12384	Returns an associative array . The keys are the date and the values are the number of hits during that date . If no parameter is provided the method returns the hits for the last day .
12385	Return the permalinks for the given language . By default this method returns the permalinks for the handled language
12386	Parses the page to retrieve their definitions
12387	Muestra los errores .
12388	Called when user id logged out
12389	Update identity object password hash if cost has been changed
12390	Sets entity prototype of namespace entity
12391	Sets hydrator of namespace entity for converting array to namespace entity
12392	Generates an array of the URIs for a set of pages .
12393	Synchronizes the backend folder with the production one
12394	Fills the given data into the respective properties .
12395	Set connection access points .
12396	Add a basic where clause to the query .
12397	Add an or where clause to the query .
12398	Set Select parametr to the query .
12399	Add Order by clause to the query .
12400	Retrieve first document from the list executing the builded query .
12401	Retrieve batch of the documents executing the builded query .
12402	Update document by it s _id .
12403	Replace document by it s _id .
12404	Start transaction .
12405	Approve page contribution action
12406	Valida si existe el archivo en el directorio cache .
12407	Almacena un nuevo archivo en cache .
12408	Loads the yaml config file
12409	Saves the current configuration array to the configuration yaml file
12410	Delete device group .
12411	List all device groups .
12412	Get details of a device group .
12413	Add one or more devices to a device group .
12414	Remove one or more devices from a device group .
12415	Initialise the template engine
12416	Generates a coding style violations report using PHPCodeSniffer . The rules to check can be set via configuration options default being ezcs (
12417	Generates a copy - pasted code report using phpcpd
12418	Generates a lines of code report using phploc .
12419	Generates images and xml report using pdepend .
12420	Returns the translated string for the given domain .
12421	Returns the translated singular or plural form of the string depending on the given number .
12422	Returns all locale string of the given domain .
12423	Returns the initialized Zend translation object which contains the translations .
12424	Get authorization info .
12425	Get authorizer token .
12426	Get authorizer info .
12427	Get options .
12428	Set authorizer option .
12429	Get authorizer list .
12430	Adds a sort key
12431	Generate Content Type filter
12432	List permalinks action
12433	Walk through the all configuration parameters & get MAX percent for Infinity bonus
12434	Interrupt infinity bonus if parent s percent exists and is greater or equal to current infinity percent .
12435	Add a form item
12436	Add an extra field to the form .
12437	Add a field to the form
12438	Get a form item
12439	Realiza el rendereo del template .
12440	Get instance for given key .
12441	Attach new instance of any class to this container .
12442	Detach Instance from container . Implicit destruct the instance .
12443	Add callbacks or \ Closure into task queueing stack .
12444	Fonction pour redimensionner une image
12445	Get ID for the last complete forecast plain calculation .
12446	Associates a container with this instance .
12447	Builds dependent extensions
12448	Updates the ezinfo . php and extension . xml files with the version number and license tag from configuration .
12449	Checks for presence of files README and LICENSE by default in extension root directory - but a config parameter is allowed to specify their location
12450	Checks for validity all template files - needs a working eZP install somewhere to get the tpl syntax checker script ; use config options to specify the path to php executable if needed as well as the path to an eZPublish installation
12451	Checks for validity all php files ; use config options to specify the path to php executable if needed
12452	Updates information in package . xml file used by packaged extensions
12453	Generates a sample package . xml to allow creation of packaged extension
12454	Creates an action object
12455	Returns true when the plugin has a toolbar
12456	Installs plugin assets
12457	This is called after successful load of the object from table
12458	Creates a form to create a Post entity .
12459	Lists all CustomFieldsGroup entities .
12460	Get an array of CustomFieldsGroupId which are marked as default for their entity
12461	create a form to make the group default
12462	Creates a form to create a CustomFieldsGroup entity .
12463	Displays a form to create a new CustomFieldsGroup entity .
12464	Finds and displays a CustomFieldsGroup entity .
12465	Return an array of available key option for custom fields group on the given entity
12466	Creates a form to edit a CustomFieldsGroup entity .
12467	This function render the customFieldsGroup as a form .
12468	Fetch item from WeChat server .
12469	Replace the App namespace at the given path .
12470	Set the application provider namespaces .
12471	Set the namespace in database factory files .
12472	Checks whether current module is enabled .
12473	If we can find a pre - minified version of the file lets use that no point doing more work than we have to . Plus the vendor supplied minified versions will probably be better optimised .
12474	Gets a Theme by its identifier
12475	Gets the current theme used
12476	Sets the current theme
12477	Get the transformation data
12478	Starts the elFinder connector
12479	Generates the elFinder options
12480	Find the slots parsing the theme s templates
12481	Register Connection and EntityManager Services
12482	Generate map of the customer generations .
12483	Convert 2D array with bonuses into 1D array .
12484	Get default options id .
12485	Say if adapter has the given behavior .
12486	Get all behavior of an adapter .
12487	Active les logs
12488	Ecrire dans les logs
12489	Modifie la destination des logs
12490	Pass back SELECT clause string to set in scope .
12491	Pass back WHERE clause string to append the scope .
12492	Pass back ORDER BY Clause to append the scope .
12493	Pass back GROUP BY Clause to append the scope .
12494	Set query parametrs to execute - retrieve by _id .
12495	Build query from scope . Passes to execute it .
12496	Set query parametrs to execute - delete by _id .
12497	Set query parametrs to execute - delete many by _id .
12498	Set query document to execute - Insert One .
12499	Set query documents to execute - Insert Many .
12500	Set query parametrs to execute - Update by _id .
12501	Parse document for valid update command .
12502	Set query parametrs to execute - Replace by _id .
12503	Set query parametrs to execute - Begin Transaction .
12504	Set query parametrs to execute - Rollback Transaction .
12505	Set query parametrs to execute - Commit Transaction .
12506	Pass query Params to Transport Layer for execution .
12507	Encode single document in valid format .
12508	Set message type .
12509	Build message .
12510	Build preview message .
12511	Build group .
12512	Validates form and logs the user in .
12513	Mirrors a directory to another .
12514	Creates a directory recursively .
12515	Checks the existence of files or directories .
12516	Delete a folder .
12517	Moves a folder .
12518	Utility function to read the files in a folder .
12519	Get downline tree by calculation ID .
12520	Gets where condition of select update or delete a parameter
12521	Twig Extension that is used to render the label of a custom field .
12522	Twig extension that is used to render the value of a custom field .
12523	Update Arguments and Options
12524	Updates the element implementing this interface using a JSON representation .
12525	Releases the token . Does not warn if lock has disappeared before the release .
12526	Removes orphaned lock files - by checking their PIDs against running processes
12527	Get data sources .
12528	Get local data source .
12529	Get foreign data source .
12530	Apply device ids .
12531	Get audit status .
12532	Update a device comment .
12533	Bind location for device .
12534	Pagination to fetch batch of devices .
12535	Fetch batch of devices by applyId .
12536	Logs the user in if this social account has been already used . Otherwise shows registration form .
12537	Set related objects .
12538	Set relations .
12539	Returns given string as a dash_erized word .
12540	Returns given string as a camelCased word .
12541	Returns a random string with the given length and given string of allowed characters .
12542	Gets the current page details
12543	Gets the current link
12544	Sets the current link
12545	Subscribe to an event .
12546	Subscribe to an event exactly once .
12547	Returns block plugin by name
12548	Returns theme plugin by name
12549	Boots the plugin manager
12550	Installs the assets for all the handled plugins
12551	Check value to find if it was serialized .
12552	add expiration headers to avoid caching .
12553	Save uploaded file to destiny dir
12554	Create the cache table on the database .
12555	Finds and displays a Tag entity .
12556	Creates a form to delete a Tag entity .
12557	Helper to check if we were initialized .
12558	Flush the cache .
12559	Run a series of fixes on a file s code formatting .
12560	Fixes slashes inside namespace strings .
12561	Send a message .
12562	Send a text message .
12563	Send a news message .
12564	Send a voice message .
12565	Send a image message .
12566	Send a video message .
12567	Send a card message .
12568	Preview a message .
12569	Preview a text message .
12570	Preview a news message .
12571	Preview a voice message .
12572	Preview a image message .
12573	Preview a video message .
12574	Preview a card message .
12575	Preview a message by name .
12576	Preview a text message by name .
12577	Preview a news message by name .
12578	Preview a voice message by name .
12579	Preview a image message by name .
12580	Preview a video message by name .
12581	Preview a card message by name .
12582	The Symfony2 tranlator
12583	Displays current - version number
12584	Creates a sample yaml configuration file used to drive the build for a given extension . Will ask to overwrite an existing config file if found unless option overwrite - existing is given
12585	Converts an existing ant properties file in its corresponding yaml version
12586	It creates the controller object assignes it with default view and layout objects .
12587	Initializes this application component .
12588	Creates the token DB table .
12589	Send all notification emails for the given inquiry object .
12590	Returns the DataTables i18n file
12591	Checks if params are correct and throws exception if not
12592	This method is called by Web2All_Table_SaveObject when inserting or updating an object with a Web2All_Table_SQLOperation as value .
12593	Set the operator that has to be used when this SQLOperation is used in the WHERE part of a query .
12594	Makes the required directory . It does NOT exist!
12595	Creates the minfier object .
12596	Based on if we are in debug mode and if the file is already minfied or not this tells us if we actually need to perform any minification .
12597	Gets cache adapter of a settings namespace
12598	Checks if settings of a namespace can be cached
12599	Get a setting .
12600	Copies a file
12601	Write contents to a file
12602	Delete a file or array of files
12603	Read the contents of a file
12604	Moves an uploaded file to a destination folder
12605	Returns the name without any path .
12606	Returns the file path
12607	Makes file name safe to use
12608	Get child .
12609	Get parent .
12610	Get parents .
12611	Get checked .
12612	Obtiene la IP del huesped .
12613	Check that all required options are defined
12614	Determines if the enqueued options have required properties .
12615	Adds an attribute to the list Existing attributes are replaced .
12616	Set new attributes
12617	Removes an attribute from collection
12618	Set file source .
12619	Load the data items from the file source .
12620	Create the model .
12621	Set value in session
12622	Register event .
12623	Execute event .
12624	Use HTTP headers
12625	Perform GET request
12626	Perform POST request
12627	Returns date formatted according to given format .
12628	Register this provider .
12629	Send message to device .
12630	Pay the order .
12631	Prepare order to pay .
12632	Query order .
12633	Close order by out_trade_no .
12634	Reverse order .
12635	Return key to sign .
12636	Get sandbox sign key .
12637	Attempts a connection to the database or simply returns an existing connection unless otherwise requested .
12638	Issues a SELECT query to the database .
12639	Rethrow controlled exceptions those that get thrown by the container or the resolver to shorten the call stack and make it more readable .
12640	Initialise the adapter including injecting an http client
12641	Sets the value if the does not exists yet
12642	Sets the value not regarding whether the key does exist yet or it does not
12643	Get widget .
12644	Get system .
12645	This annoying hack is necessary in order to support translation of form element labels - The person who made the CoreBootstrap module didn t think about this
12646	Set data value and status of result in true
12647	Set data value and status of result in false
12648	Get result array
12649	Builds the AssetFactory object
12650	Reads the contents of a language file and returns it .
12651	Writes the current texts of the specified language to the file system .
12652	Returns all texts of a page in the specified language .
12653	Returns the texts including an information about the text in the base language .
12654	Returns the text of a container in the specified language . If the text is not defined null is returned .
12655	Adds a new text container .
12656	Modifies the content and optionally the name of a text container . If the base language text is changed the corresponding texts of other languages are invalidated .
12657	Deletes a single text container
12658	Returns the name of the file containing the texts .
12659	Sets all extra language texts to outdated
12660	Removes all files related to a text page
12661	Create an instance of the EasyWeChat for the given authorizer .
12662	Checks the page contributor has been set
12663	Get code message
12664	Require a package
12665	Install required modules
12666	Edits the given block
12667	Provide default input rules for this element
12668	Sets options of cache
12669	Adds new namespace
12670	Open a stream .
12671	Get an emulator instance .
12672	Set the emulation to use .
12673	Set source files .
12674	Get foreign model config .
12675	Get foreign model .
12676	Approves a contribution
12677	Approves the removal of the given contribution
12678	Returns results as JSON string .
12679	Boots the factory
12680	Returns true if flag is enabled and not empty .
12681	Send the message .
12682	Loads the profiler configuration .
12683	Builds the matrix result .
12684	Add a new element to the array
12685	Method which removes all database table entries collected in this object .
12686	Versucht den Typ von einem PHP - Basis - Datentyp zu erraten
12687	Init configuration .
12688	Load configuration from namespace .
12689	Get a configuration from namespace
12690	Merge configuration .
12691	Output a test failure .
12692	Synchronizes the site slots with the theme slots
12693	Generates the slots from the web site that handles the theme into the Theme slots
12694	Adds an option .
12695	Tries to find out the vendor dir of composer - should work both when ezextbuilder is main project and when it is a dependency . Returns FALSE if not found
12696	Returns the list of extensions for which we have a config file available
12697	Loads caches and returns the config options for a given extension
12698	Creates an archive out of a directory .
12699	Mimics ant pattern matching .
12700	Create service with name
12701	Set config for Namespace CKEDITOR . config .
12702	Try to get the service for the given id . If not found an exception is thrown .
12703	Publish page action
12704	Apply hooks and shortcodes to the page title before sending unless an environmental variable is set
12705	Apply hooks and shortcodes to the page content before sending unless an environmental variable is set
12706	Get all registered commands
12707	Parse command signature to command arguments and options
12708	Run command handle
12709	Parse an argument or option to its key and value
12710	Resolving all dependencies in the supplied class or object instance constructor .
12711	Register a service alias .
12712	Get flag of resolved concrete behavior on abstract class name .
12713	Resolve class dependencies in the supplied class name .
12714	Resolve method parameters .
12715	Recursively resolving class dependency .
12716	Get concrete implementation from abstract .
12717	Get method parameters .
12718	Mark resolved class name to true .
12719	Register binding into container stack .
12720	Call defined instance .
12721	Determine if a given type is shared .
12722	Turn class name into resolvable closure .
12723	Get content .
12724	Reset to default scope values settings .
12725	Formats data into a single line to be written by the writer .
12726	Get a Content model from an array of unstructured product content data
12727	Get the current value and map it so it can be printed into the template .
12728	Add Rules that are executed AFTER the values are mapped
12729	Returns the request map for OPTIONS requests
12730	Renders breadcrumbs based on bootstrap breadcrumbs
12731	Get tasks .
12732	Signal handler for all registrations .
12733	Registers a new Interrupt Listener
12734	Clears the hash list of Listener
12735	Set a manual key title . Overwrites the translated titles so you have to handle translation yourself
12736	Manually map a class to a model name . This is needed if you overwrite a class like User to ExtendedUser . So instead of copying your lang entry for extended_user you can map App \ ExtendedUser to user
12737	Translates the block
12738	Add part html tag class
12739	Remove part html tag class
12740	Set html tag required
12741	Get html tag
12742	Removes a connection instance by using its identifier .
12743	Generates the current slots map by guessing the cluster configuration out of the connection parameters of the connections in the pool .
12744	Generates an updated slots map fetching the cluster configuration using the CLUSTER SLOTS command against the specified node or a random one from the pool .
12745	Permanently associates the connection instance to a new slot . The connection is added to the connections pool if not yet included .
12746	Handles - MOVED responses by executing again the command against the node indicated by the Redis response .
12747	Provide default input rules for this element and attaches default validators for the Date input .
12748	Set html tag pattern
12749	Validate the given SKU
12750	return the alias of a user ot the username as default
12751	Sends an email to a user with credentials and confirmation link .
12752	Sends an email to a user with confirmation link .
12753	Sends an email to a user with recovery link .
12754	Method which sets all the data headers cookies and other options for the query
12755	Method which parses cURL response
12756	Delete the existing custom fields for a given customFieldGroup
12757	Validates the current request .
12758	Creates a new Medialink with defaultvariables
12759	Parses a string returns media links etc
12760	Dispatches the event
12761	Protected routine to determine the browser type
12762	Crea una nueva cookie .
12763	Elimina una cookie .
12764	It adds the header to the stack .
12765	It adds the header to the stack by HTTP code .
12766	The main execution method . It sets all added headers into the page .
12767	It adds the user variable to the storage .
12768	It returns the variable value getted by the name from the storage .
12769	Get db .
12770	User authorization handler
12771	Authorize user via email .
12772	Register new user
12773	Generic universal asynchronous authorization controller
12774	Generic universal synchronous authorization controller
12775	Reads settings content of a namespace
12776	Write settings content of a namespace
12777	Generate html grid string
12778	Get refresh instructions .
12779	Get state .
12780	Set state .
12781	Decrypt message .
12782	Get all intersections given the constructor parameters .
12783	Create all intersections given the constructor parameters .
12784	Try to determine if this mask will result in no intersections based on previously generated masks .
12785	Generate intersections based on a combination mask .
12786	Return default zend - validator configuration for zend - mvc applications .
12787	get the put method
12788	Set the HTTP status
12789	Retrieve the foreign object .
12790	The method creates a view object assosiated with the specific controller and action in it . If controller name is empty it means a markup file determined only with action name . It doesn t physically consist into the direcory named as controller it s in the root of the view directory .
12791	It creates a layout object .
12792	The method creates a snippet - object .
12793	Create a new server based on parameters received .
12794	Delete the server corresponding to the given id .
12795	List of available snapshots .
12796	Receives the name of a queue and clears it .
12797	Pad a string to a certain length with another string .
12798	Get lines .
12799	Get file pointer .
12800	Get headers .
12801	Create an item
12802	Get models for the specified page
12803	Execute the query and return the adodb recordset .
12804	Builds a column = > property cache for the calling class .
12805	Compares the provided name to the column = > property cache to ensure that both column and property names can be used in functions requiring only the column name .
12806	Selects all rows from the database as a Collection of Model class objects .
12807	Selects only the matching rows from the database as a Collection of Model class objects .
12808	Gets the PRIMARY KEY for the specified table .
12809	Checks to see if the specified column name for the specified table is a PRIMARY KEY .
12810	Gets an array of FOREIGN KEY columns for the specified table .
12811	Get an array of the columns names of all FOREIGN KEY columns for the specified table .
12812	Checks to see if the specified column name for the specified table is a FOREIGN KEY .
12813	Gets all of the NULL - able columns from the specified table schema .
12814	Gets all of the names of NULL - able columns from the specified table schema .
12815	Gets the NULL - ability of a column from the specified table schema .
12816	Gets all of the columns from the specified table schema .
12817	Fetches all values
12818	Returns a Message instance representation of a command
12819	Sets the correct permission for the files and directories listed in the extra section .
12820	Resolves dependencies for and executes a callback
12821	Resolves dependencies for a callback
12822	Defines the common required options by a block manager
12823	Creates the contributor folder
12824	Adds a default block to the given slot
12825	Fetches the slot definition
12826	Saves the slot definition
12827	Removes a block from the slot files and returns back the block name
12828	Registers custom functions .
12829	Set config value partially of completely
12830	Main compilartor function
12831	Since it called step by step we can create context for each tag
12832	Add modifier surrounding for expression
12833	Generates the creator method for the config
12834	Generates a creator method the instantiates a service with new
12835	Generates the creator method for a service that is provided by a factory method
12836	Crea un nuevo directorio .
12837	Build the website
12838	Method create directory if not exist
12839	Return unique filename for directory
12840	Return mimetype for file
12841	Recursive delete direcotry
12842	Remove all files from directory
12843	This function is a shortcut to addOption .
12844	Load the mapping between answer in CSV and value in choices from a json file
12845	Process a text type on a custom field
12846	run the error http page
12847	load the controller
12848	get the page 403
12849	get the page 404
12850	check the cache - just if it s not yet defined
12851	Remove customer related data from Bonus Hybrid tables on customer delete from adminhtml .
12852	Validates a aymbol
12853	Imports a package to current symbol table
12854	Process the payload
12855	Go Running The Worker Processes
12856	Perform Payload Execution
12857	Give Built In Queue Driver
12858	Copies the assets from the backend to production
12859	Adds a route
12860	Gets the dispatcher
12861	Builds the routes cache file
12862	This filter parses a blocks behaviour configuration string .
12863	Create the cached identity serivce .
12864	Called after an action is dispatched by Zend_Controller_Dispatcher .
12865	Clear quota .
12866	Initialize the localization .
12867	Initialize plugin s options
12868	Resets user s password .
12869	Authentification in Ldap
12870	Close authentification in Ldap
12871	search in Ldap
12872	Set element required frontend & backend validation
12873	Get elements validator chain
12874	Save a site as a theme action
12875	Get JSON data .
12876	Sets the zend - cache storage namespace .
12877	Generates the android manifest
12878	Set the element value .
12879	Renders the toolbar
12880	Registers a new user account .
12881	Get foreign data item .
12882	Get unmapped keys .
12883	Get unmapped local keys .
12884	Get key translation .
12885	Get reverse key translation .
12886	Set raw photo .
12887	Reads the composer . json file directly or from directory and adds it to cache .
12888	Get theme .
12889	Get identity .
12890	get the Value
12891	When request is redirected by router configured behaviour this method is called to correct localization URL value in domain params array .
12892	Render a collection by iterating through all fieldset and elements .
12893	Create a session .
12894	Close a session .
12895	Set person .
12896	Returns true if the closing date is after the opening date .
12897	Redirecciona a una ruta especifica con un estado y encabezado especificos .
12898	Translates the given message
12899	Get the HTTP response object .
12900	Offset to retrieve .
12901	Adds source adapter .
12902	Adds virtualization worker .
12903	Returns cache adapter .
12904	Saves the authorizer access token in cache .
12905	Display a listing of the resource . paginate
12906	Display one resource by id .
12907	Create and display the resource .
12908	Update and display the resource .
12909	Get all objects
12910	Add grouping to query
12911	Get SQL for Count
12912	Join managers together
12913	Set cache status
12914	Where as array for recursive joins
12915	Get column reference
12916	Map result to models
12917	Encontra somados valores de todos os pagamentos no BD
12918	Finds one content type by it s name .
12919	Configura o objeto conforme os parametros enviados do client
12920	Get total .
12921	Get remaining .
12922	Get foreign data items .
12923	Get local data items .
12924	Get handled local data items .
12925	Set search .
12926	Confirms a user by setting confirmed_at field to current time .
12927	List POI .
12928	Update a POI .
12929	Get the list
12930	This method attempts user confirmation . It uses finder to find token with given code and if it is expired or does not exist this method will throw exception .
12931	Creates the router
12932	Generate a content attribute
12933	Generate a content
12934	Moves the block
12935	Defines the options required by the move method
12936	Moves the block s archive dir to the new slot and adapts it according with the new block name
12937	Changes the block and slot name when moving to another slot
12938	Set html tag min
12939	Set html tag max
12940	Checks if the passed client instance satisfies the required conditions needed to initialize a monitor consumer .
12941	Save authority group permissions
12942	Creates the form
12943	Authenticates against the supplied adapter
12944	Set Default Jobs In Queue
12945	Get tags list
12946	Parse tags list into array
12947	check that the owner has the attribute tags
12948	Removes the specified tags from the list
12949	After owner save action
12950	Before delete event
12951	After delete event
12952	Get foreign parents .
12953	Get foreign children .
12954	Takes strings like - 1 . 000 50 - 1 000 . 50 - 1000 . 50 - 1000 50 .
12955	Get object .
12956	Remove an object .
12957	Performs an authentication attempt
12958	Inject the specified dependencies into this object . Each argument can be either a string containing the name of the dependency or a callable where each argument defines that name .
12959	Updates a table
12960	Executes a query and optionally returns the result
12961	Returns an instance of the database object
12962	Returns all the available tables
12963	Determines whether a given database exists
12964	Retrieves the hits per month for given months back and saves them in array of arrays to be used in console table .
12965	Get icon .
12966	Get object type descriptor .
12967	Get object type .
12968	Renders the page
12969	Transform Front to Model
12970	get the Reflection and ClassObject
12971	Seek to a position within the collection
12972	Creates a new Entity Manager
12973	Sets a mapping configuration
12974	Generates mapping information for packages modules and the app
12975	Registers mapping in a Configuration
12976	Parses mapping info
12977	Returns default settings for components
12978	Detects which metadata driver to use for the supplied directory
12979	Registers subscribers to Event Manager
12980	Configures Behavior Subscriber
12981	Pre - dispatch routines .
