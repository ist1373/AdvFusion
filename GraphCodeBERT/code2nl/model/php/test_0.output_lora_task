0	Check if the given URL is supported .
1	Builds a dependency info structure .
2	Builds a list of dependencies from a list of dependencies .
3	Builds a list of dependencies from a dependency array .
4	Builds a list of dependency constraints .
5	Builds a dependency constraint .
6	Parse a version constraint .
7	Parse version string
8	Install a package .
9	Check if the given origin is authorized .
10	Get current packages
11	Mocks local repositories .
12	Sets the optimize autoloader .
13	Sets the autoloader .
14	Copy file to target
15	Replace the version .
16	Get the content of a composer file .
17	Get the repository s packages .
18	Get the time of a package .
19	Get repository data
20	Propagate a decision .
21	Revert the decision .
22	Add a package .
23	Remove a package .
24	Copy a file .
25	Get the contents of a file .
26	Get the contents of a remote file .
27	Write the package to the file .
28	Register an error handler .
29	Filter required packages .
30	Append packages to a bucket .
31	Parse hgignore line .
32	Add a rule .
33	Add a reason .
34	Convert a job to text
35	Print version information .
36	Prints the links to the given package .
37	Print license information .
38	Initializes the styles .
39	Generates a tree for a package .
40	Fetch root identifier
41	Checks if a certificate is valid .
42	Returns the names of the certificate names .
43	Parse package info .
44	Dispatch a script event .
45	Dispatch package event .
46	Dispatch an installer event .
47	Add a subscriber to the dispatcher .
48	Get the list of listeners .
49	Get the list of scripts for the given event .
50	Push an event .
51	Add a repository
52	Set the output progress .
53	Set downloader .
54	Get a downloader .
55	Download a package .
56	Update a package .
57	Remove a package .
58	Resolve package install preference .
59	Add a suggested package .
60	Add suggestions from a package .
61	Checks if a directory is empty .
62	Unlink a file
63	Deletes a directory .
64	Get file size
65	Normalize path .
66	Determine if a directory is symlinked .
67	Resolve symlinked directory .
68	Creates a junction directory .
69	Remove a junction directory .
70	Create a class loader
71	Filter package map
72	Check if the given origin is authorized .
73	Authorize an OAuth token .
74	Request access token .
75	Sets the cursor position .
76	Removes the item from the iterator .
77	Configure the package .
78	Find package by name .
79	Create a repository .
80	Supports the error level .
81	Call a callable .
82	Extracts the package .
83	Copies the files from the given files .
84	Expand path .
85	Returns the filename for a package .
86	Archive a package .
87	Get default normalizer .
88	Checks if this rule is equal .
89	Write a hash to the file .
90	Throw an exception .
91	Parse JSON .
92	Validate a JSON string .
93	Filter the given path against the given path .
94	Checks if the given file is a vendor file .
95	Find the best version for a package .
96	Read a channel .
97	Select the version of a channel .
98	Add a prefix to the list of paths
99	Add a PSR4 prefix .
100	Sets the paths for the given prefix .
101	Sets the paths for the given prefix .
102	Finds the file for the given class .
103	Finds the highest priority of the given literals .
104	Checks if the headers are limited .
105	Watch to see if the rule is the highest level .
106	Move a watch to another watch
107	Checks if the given URL is allowed .
108	Add extension .
109	Get git version
110	Load installed plugins .
111	Add a plugin .
112	Recursively collect dependencies .
113	Returns the installation path for the given package .
114	Open a browser .
115	Execute a command .
116	Execute a local command .
117	Builds a command .
118	Get credential string
119	Get the password
120	Checks if the user has authentication .
121	Create auth from config
122	Create auth from url
123	Get the version of the binary version .
124	Returns the error message .
125	Get the value of the given constraint .
126	Create a remove rule .
127	Ensure the given package is present .
128	Returns the base path for the package .
129	Get the content of a resource .
130	Request an XML file .
131	Update local repository
132	Disable plugins .
133	Get installer .
134	Check if a package is installed .
135	Ensure that the given package is valid .
136	Execute the given operation .
137	Install a package .
138	Update the package .
139	Uninstall a package .
140	Mark alias installed .
141	Remove alias from repository .
142	Returns the installation path for the given package .
143	Fix HTTP header field
144	Inserts a rule .
145	Propagate a literal to a rule .
146	Move a node to a rule .
147	Process the given URL .
148	Create a validator .
149	Check if scenario is active
150	Add error message .
151	Create a command .
152	Returns a batch of results .
153	Returns a batch of results .
154	Populate the rows .
155	Execute the query .
156	Add columns to select .
157	Adds a condition to the query .
158	Add a filter to the query
159	Set the condition
160	Adds a condition to the query .
161	Adds a condition to the query .
162	Add parameters to the request .
163	Set query cache .
164	Creates a new instance from a source .
165	Convert a list of links to an array .
166	Loads messages from a file .
167	Load mime types
168	Load mime aliases .
169	Unlink a file
170	Returns true if the given path matches the given path .
171	Create a directory .
172	Checks if the given path matches the given pattern .
173	Returns the first wildcard in the given pattern .
174	Check if action is optional
175	Remove a value from an array
176	Remove value from array
177	Decode html data
178	Filters the given array of filters .
179	Load a bundle .
180	Load a dummy bundle .
181	Get asset converter
182	Publishes a file .
183	Returns the published URL for the given path .
184	Initializes the dynamic content .
185	Render input .
186	Renders an element .
187	Fetch data from the database
188	Get column definition .
189	Set transaction isolation level
190	Load table columns
191	Set HTTP status code
192	Send the request .
193	Clears the response .
194	Send a file .
195	Sends content to file .
196	Send a stream as a file .
197	Set download headers .
198	Send a file to the client .
199	Redirect to the given URL .
200	Checks if target relation exists .
201	Checks if value exists .
202	Checks if the given value exists .
203	Creates a new query .
204	Move cursor to cursor
205	Wrap a text
206	Get stdin
207	Ask the user to confirm the user .
208	Select one or more options
209	Format a scalar value .
210	Returns the valid XML element name .
211	Sets the hash of the plugin options .
212	Initializes the client options .
213	Registers the plugin script .
214	Get the current parameters .
215	Resolve route parameters .
216	Converts the given value to a plain text .
217	Render the image .
218	Returns the URL for the given value .
219	Converts a value to a boolean .
220	Format a number .
221	Normalizes a numeric value .
222	Checks if the value is a normalized value .
223	Normalize numeric string value .
224	Converts a value to an integer .
225	Converts a value to a percent string .
226	Returns the currency string for the given value .
227	Get schema names .
228	Get table names
229	Get PDO type
230	Get the last insert ID .
231	Inserts a table into the database .
232	Quote a string
233	Quote a table name .
234	Unquote a table name
235	Get the PHP type of a column .
236	Get cache key .
237	Set table metadata
238	Normalize Pdo row key .
239	Load table metadata from cache .
240	Saves the table metadata to the cache .
241	Initializes the formatter .
242	Renders the table .
243	Render attribute .
244	Exports the system to the system .
245	Get column by name
246	Fix primary key .
247	Initializes the session .
248	Destroy the session .
249	Regenerates session id .
250	Sets the session cookies .
251	Removes flash .
252	Remove all flash flash
253	Freeze session data
254	End the widget .
255	Check if the widget is valid .
256	Process the result of the widget .
257	Initializes the theme .
258	Render a view .
259	Find the view file .
260	Render a view file .
261	Cast value to type
262	Deletes an object .
263	Close session .
264	Escape a column name .
265	Sets the logger .
266	Load messages from database .
267	Loads messages from database .
268	Get context message .
269	Format a message .
270	Gets the enabled value .
271	Renders the separator .
272	Returns a JSON response .
273	Returns the response as XML .
274	Renders data cell .
275	Render data cell .
276	Print help message .
277	Notify all fixtures .
278	Notify all fixtures .
279	Notify all fixtures .
280	Confirm all fixtures
281	Unload fixtures .
282	Output a list of items
283	Find all fixtures .
284	Get fixtures config
285	Set default header
286	Remove a header .
287	Tries to negotiate the response .
288	Determine the current language .
289	Checks if the requested language is supported .
290	Checks if a variable exists .
291	Populate a relation .
292	Check if the element has an attribute .
293	Get attribute value
294	Set a single attribute .
295	Get old attribute .
296	Checks if the attribute is changed .
297	Get dirty attributes .
298	Updates the current record .
299	Before saving the model .
300	Refresh the model attributes .
301	Check if the given array is primary key .
302	Get the attribute label .
303	Get the attribute hint .
304	Resets the dependent relations .
305	Set relation dependencies .
306	Get size limit
307	Converts a string to bytes .
308	Create rule .
309	Exports the log .
310	Create a new message
311	Applies a table alias to the query .
312	Run the request .
313	Sets the runtime path .
314	Get vendor path .
315	Sets the vendor path .
316	Render a view .
317	Register an asset bundle .
318	Register a css file
319	Register JS file
320	Render body end
321	Normalize path info
322	Returns the plural form of a word .
323	Converts a string to a title .
324	Convert camel case to camel case
325	Convert a string to variablize
326	Generates a sentence .
327	Sends the email .
328	Get instance of class
329	Builds a unique key
330	Get a value from the cache .
331	Set multiple items .
332	Add multiple items .
333	Add a value to the cache .
334	Returns the sequence name for the given table .
335	Create a column .
336	Find constraints for a table .
337	Extract column type .
338	Extract column size .
339	Registers the active form .
340	Creates a field for a field .
341	Validates a model
342	Validate multiple models
343	Render sort links .
344	Generates a link to a mail .
345	Sets the active placeholder .
346	Merge CSS classes .
347	Remove a CSS class from an array .
348	Returns the CSS style from an array .
349	Convert CSS style to array
350	Get the value of an attribute .
351	Returns the input name for the given attribute .
352	Get input id .
353	Escape a regular expression .
354	Tokenize pattern .
355	Prepare the model .
356	Initializes the controller .
357	Checks if PHP extension version is installed .
358	Compare two bytes
359	Checks if upload max file size is allowed
360	Normalize a requirement .
361	Render errors .
362	Get client options
363	Renders the table .
364	Render caption .
365	Render column group
366	Renders the footer .
367	Render the filters .
368	Render table body
369	Get view names .
370	Checks if value is empty .
371	Checks if the stream is enabled .
372	Write a string to stdout
373	Get the options for a specific action .
374	Returns a list of all possible options .
375	Get action arguments .
376	Parse the doc comment .
377	Returns the size of the given verbose size .
378	Render exception .
379	Render a call stack item .
380	Renders the call stack .
381	Generate server information .
382	Convert arguments to string
383	Returns the name of the exception .
384	Validate image .
385	Get order orders .
386	Get attribute orders .
387	Set attribute orders .
388	Returns the order order for the given attribute .
389	Generates a link .
390	Load default values
391	Filter valid aliases .
392	Filter conditions .
393	Returns a list of valid column names .
394	Update all records .
395	Update all counters
396	Delete all records .
397	Get table schema .
398	Deletes a record .
399	Deletes the object .
400	Process a markdown .
401	Process a markdown .
402	Process HTML purifier .
403	Override default settings
404	Prepares the response headers .
405	Add headers to response headers
406	Checks if the browser is a flash .
407	Get body params
408	Get query params
409	Get host info
410	Sets the host name .
411	Converts a string to UTF - 8 characters .
412	Returns the port of the connection .
413	Set the port .
414	Set the secure port .
415	Returns a list of available content types .
416	Returns list of available languages .
417	Get the list of ETags .
418	Get cookies .
419	Validates a CSRF token .
420	Render the block .
421	Initializes OracleMutex connection .
422	Begin the tag .
423	Add hidden input .
424	Adjusts the label for the given options .
425	Adds the error class to the model .
426	Get the module instance
427	Set the module instance
428	Initialize the controller namespace .
429	Get unique id
430	Get the base path
431	Get a module by its id
432	Get all modules
433	Set the modules .
434	Checks if the given class name is a valid class name .
435	Check if action is valid
436	Trigger an action .
437	Compare two values
438	Checks if the object has a property .
439	Checks if a property has a property .
440	Checks if a property has a property .
441	Checks if the object has a method .
442	Determine if the given event is registered .
443	Removes an event .
444	Trigger an event .
445	Get a behavior by name .
446	Detach behaviors .
447	Attach a new behavior .
448	Renders page buttons .
449	Initializes the cache .
450	Encode a value
451	Prepare insert query .
452	Update a SQL statement .
453	Deletes a table .
454	Drop a primary key .
455	Drop a column .
456	Drop foreign key .
457	Drop a unique constraint .
458	Drop a constraint .
459	Get the type of a column .
460	Quote table names
461	Builds a list of columns .
462	Builds a condition .
463	Builds an AND condition .
464	Builds a condition .
465	Builds a condition .
466	Builds an IN condition .
467	Builds a condition .
468	Builds a simple condition .
469	Run the given model .
470	Updates the database .
471	Downgrades the database .
472	Insert a table into the database .
473	Executes a batch of rows .
474	Update a table .
475	Delete a table .
476	Create a table .
477	Renames a table .
478	Drop a column .
479	Renames a column .
480	Change a column .
481	Adds a primary key to the database .
482	Adds a foreign key to the database .
483	Create a new index .
484	Drop an index .
485	Add a comment on a table .
486	Add a comment to a table .
487	Drop comment from table
488	Get all instances of an attribute .
489	Find the constraints for the given table .
490	Find primary keys .
491	Add a relation to the model .
492	Find relation for given model .
493	Index a list of buckets .
494	Flush all messages .
495	Get profiling information .
496	Get database profiling information .
497	Calculates the timings for the given message .
498	Apply the path to the given path .
499	Write integer to file .
500	Reads a string from a file .
501	Get header name .
502	Registers the widget .
503	Execute a batch of rows .
504	Render the view .
505	Initializes the translations .
506	Get message formatter .
507	Get the translation source .
508	Computes the fields for the write callback .
509	Show help action .
510	List actions .
511	Format the help message .
512	Add values to the cache .
513	Updates new migrations .
514	Revert all migrations .
515	Migrate a migration version .
516	Mark the migration history .
517	Start the migration .
518	Generate class name .
519	Find migration path .
520	Migrate migration .
521	Migrate a migration .
522	Create a migration object
523	Include migration file .
524	Migrate to migration .
525	Migrate a version
526	Initializes the configuration .
527	Register asset files .
528	Get info about a project
529	Generate package packages .
530	Sort changelog .
531	Splits the changelog from a file .
532	Sort changelog .
533	Fixes all files in the given root .
534	Fixes file doc .
535	Fix doc block indentation .
536	Remove doc comment
537	Update doc comment
538	Serialize data provider .
539	Serialize pagination .
540	Add pagination headers .
541	Serialize model errors .
542	Serialize models .
543	Initializes the log file .
544	Export the log file .
545	Rotate log files .
546	Get the SQL for a table .
547	Add servers to the cache .
548	Add memcached servers .
549	Dump a variable to a string
550	List all caches .
551	Flush all caches .
552	Flush all caches
553	Flush schema .
554	Notify all caches .
555	Notify all caches .
556	Set components .
557	Builds the conjunction condition .
558	Build block condition .
559	Builds an attribute condition .
560	Builds an operator condition .
561	Autoload class
562	Log debug message .
563	Renders the summary .
564	Render Sorter .
565	Get the script file path .
566	Sets the script file path .
567	Parse a date value
568	Format a timestamp .
569	Encrypt data .
570	Validate data .
571	Generate a password hash
572	Validates a password
573	Compare two strings
574	Unmask a masked token
575	Get the default value
576	Renders the collection options .
577	Normalize route .
578	Converts a URL to a URL .
579	Ensure the given URL is valid .
580	Get current route .
581	Get asset manager
582	Set asset manager
583	Compress the assets .
584	Loads the configuration file .
585	Loads a list of bundles .
586	Loads dependencies for a bundle .
587	Build target file .
588	Adjusts the dependency configuration .
589	Registers a bundle .
590	Compress JS files .
591	Compress CSS files .
592	Combine js files .
593	Combine CSS files .
594	Compose a circular dependency trace .
595	Delete all source files .
596	Checks if the given directory is valid .
597	Get a single record from the database .
598	Joins multiple relations .
599	Join a relation .
600	Adds a condition to the condition .
601	Add a condition .
602	Tokenize the query .
603	Checks if the given array contains the longest length .
604	Returns a string with the specified length .
605	Returns the index after the given string .
606	Tokenize a delimited string .
607	Tokenize operator .
608	Add a token from the buffer .
609	Convert an asset .
610	Get a singleton instance .
611	Set a class definition .
612	Set a singleton .
613	Build a new instance of the given class .
614	Get dependencies for a component .
615	Resolve dependencies .
616	Set definitions .
617	Parse an array .
618	Parse a string
619	Validate data .
620	Generate dependency data .
621	Split a condition into an array .
622	Add a set of fields to the query .
623	Create an array of models .
624	Finds all relations in the model .
625	Handle hhvm error
626	Set query cache .
627	Bind a parameter to the statement .
628	Binds a value to the database .
629	Returns the result of the query .
630	Inserts a table .
631	Adds a batch of rows to the database .
632	Update a table .
633	Delete a table .
634	Create a new table .
635	Renames a table .
636	Drop a table .
637	Truncate a table .
638	Add a column .
639	Renames a column .
640	Drop a primary key .
641	Add a foreign key .
642	Create a new index .
643	Add a unique unique constraint .
644	Add a default value
645	Reset a sequence .
646	Checks whether the database is valid .
647	Add a comment on a table .
648	Add comment on table
649	Drop comment from table .
650	Drop comment from table
651	Drop a view .
652	Execute the query .
653	Get cache key .
654	Execute SQL statement .
655	Reset query parameters .
656	Initialize the lock .
657	Release a lock .
658	Cache a queryable .
659	Execute a callable .
660	Create a command .
661	Begin a transaction .
662	Execute a callback .
663	Get master master
664	Execute master master
665	Opens a connection pool .
666	Render the items .
667	Checks if the string starts with the given string .
668	Normalize a number .
669	Generate dependency data .
670	Clears the cache .
671	Update the model .
672	Upgrade the model .
673	Modify a column .
674	Normalize table row data .
675	Returns the current page .
676	Set page number
677	Returns the links for the current page .
678	Detect search attribute type .
679	Validate a condition .
680	Validates the condition .
681	Validates an attribute condition .
682	Validates an operator condition .
683	Normalize complex filter .
684	Merge rules .
685	Get currency symbol .
686	Sort models .
687	Recursively recursively recursively
688	Remove all items .
689	Add rules .
690	Get url from cache
691	Check if action is active
692	Create a view object
693	Compose a message .
694	Send multiple messages .
695	Check if message is valid .
696	Called when a message is sent .
697	Install all applications .
698	Run a command .
699	Clone an app
700	Clone an extension
701	cleanup vendor dir
702	Find directories .
703	Parse request body .
704	Set default roles .
705	Get default role instances
706	Create a primary key .
707	Create a big primary key .
708	Create a new column
709	Create a new column
710	Create a tiny integer .
711	Create a small integer .
712	Create an integer column
713	Create a big integer .
714	Create a float column
715	Create a double column .
716	Create a decimal column .
717	Create a new datetime .
718	Create a timestamp .
719	Create a new time column .
720	Create a binary column .
721	Creates a money column .
722	Get column schema .
723	Check integrity of a table .
724	Get unique id .
725	Render a view .
726	Get attribute value
727	Register an event handler .
728	Removes an event .
729	Add default primary key
730	Create a new model .
731	Get unique index information .
732	Evaluate attributes .
733	Convert this object to an array .
734	Initializes the model .
735	Get permissions by user .
736	Get all permissions for a user .
737	Save data to file
738	Save items .
739	Save assignment assignments .
740	Save rules .
741	Called when the view is started .
742	Called when the page is executed .
743	Initialize the event handlers .
744	Returns the fragment cache configuration .
745	Sets the unsigned unsigned field .
746	Build the default string
747	Get category category
748	Builds a string representation of a string .
749	Load messages from a file .
750	Save messages to file
751	Validates the slug .
752	Add rate limit headers .
753	Initializes font file .
754	Render the verification code .
755	Validate the given input .
756	Render image
757	Render image by code
758	Render the image with the given code
759	Set children .
760	Returns true if the type is a collection .
761	Returns the string of the SQL code .
762	Returns true if the given pattern matches the given pattern .
763	Update collection offsets .
764	Split SQL statements into separate statements .
765	Extract the parameters from the given statement .
766	Set identity .
767	Logs the given identity .
768	Regenerates the CSRF token .
769	Checks if an error is a fatal error .
770	Returns an array of ArrayExpression .
771	Configure configuration file
772	Creates a configuration file .
773	Extract messages .
774	Extract messages from a file .
775	Reset a sequence
776	Returns true if the server has a fractional seconds .
777	Returns the default time type map .
778	Check if the image is valid .
779	Get cookie value
780	Get cookie value
781	Check if a cookie exists .
782	Adds a cookie to the collection .
783	Displays translation files .
784	Check if the cache is valid
785	Generate the Etag for the given seed .
786	Returns a list of scenarios .
787	Get form name .
788	Get attribute hint .
789	Returns the first error for the given attribute .
790	Get the summary of all errors .
791	Add errors .
792	Clears all errors .
793	Get all attributes .
794	Get active attributes .
795	Load data from data
796	Returns the end of the annotation .
797	Returns the end of the array .
798	Insert a new token at the given index .
799	Removes whitespace from tokens .
800	Finds the start of the token .
801	Clears the range leave comments .
802	Checks if two tags are together .
803	Checks if the given token is a void .
804	Checks if the token is a return type hint .
805	Checks if the given token is a varoid .
806	Finds the annotation annotations for the given index .
807	Generate tokens .
808	Sort alphabetically .
809	Returns the sort order of the given array .
810	Converts a list of types to a sorted array .
811	Fixes the spaces before the class element .
812	Fixes the spaces of a class .
813	Fixes the spaces of a class .
814	Get new line index .
815	Fix an annotation .
816	Returns a sequence of tokens in a sequence .
817	Fixes the given function .
818	Fixes new line .
819	Checks if a comment is a comment .
820	Fix backticks .
821	Split a doc block into a single line .
822	Fixes whitespace after curly braces .
823	Get the unset of unset unset .
824	Get the name of the comment .
825	Set the name of the tag .
826	Checks if the given token is before the given index .
827	Gets the index block indices for the given index .
828	Check if a variable is valid .
829	Checks if the token is a string .
830	Processes an exception .
831	Fixes constructor .
832	Fix parent classes .
833	Finds the function in the given token .
834	Returns a list of tokens for a function .
835	Finds a function in the given tokens .
836	Clear cache .
837	Detect block type .
838	Create tokens from array
839	Create tokens from a string
840	Sets the size of the image .
841	Unset a token
842	Sets the value of the block .
843	Clears the changed tokens .
844	Clear empty tokens .
845	Adds whitespace at the given index .
846	Generate partial code
847	Returns the next token of the given index .
848	Gets the non - whitespace for the given index .
849	Returns the previous token of the given index .
850	Returns the next token of the given index .
851	Returns the next token at the given index .
852	Returns the next token sibling .
853	Returns the next sibling of the given index .
854	Finds the sequence in the sequence .
855	Inserts a token into the collection .
856	Override this method to override the given token .
857	Overrides the content of the given range .
858	Set the token .
859	Checks if all tokens found in the given array .
860	Clears the collection .
861	Checks if the token is monolithic .
862	Returns the cache value .
863	Change the code hash .
864	Registers a token .
865	Skip non array elements .
866	Check if the type is a valid type
867	Get the previous block .
868	Check if a condition is within a condition .
869	Creates a process for the given source .
870	Configure tokens .
871	Returns a list of allowed values .
872	Wrap the given string .
873	Get annotations .
874	Returns all annotations of a given type .
875	Convert the given token to a new token .
876	Checks if a comment is a fixable indentation .
877	Checks if a class is a class .
878	Use the given RuleSet .
879	Resolves the set of rules .
880	Resolve subset .
881	Fix the types .
882	Normalize type .
883	Checks if the token is a use for the given function .
884	Returns the best delimiter for the given pattern .
885	Returns the name of a custom token .
886	Clear tokens .
887	Checks if the token is valid .
888	Checks if the given function is a strict type .
889	Checks if the token is clear .
890	Get the types .
891	Set the types .
892	Get normalized types
893	Returns the types content of the tag .
894	Gets the arguments from the given token .
895	Finds the comparison end of the comparison .
896	Finds the comparison start .
897	Fixes two tokens .
898	Checks if the token is lower precedence .
899	Get the list of imports .
900	Checks if the given index is a multi line .
901	Returns the attribute attributes for the given index .
902	Checks if the given index is anonymous .
903	Checks if a function is a Lambda function .
904	Checks if the given index is unary .
905	Checks if the given index is unary predefined .
906	Checks if the given index is a binary operator .
907	Finds all classes in the given index .
908	Checks if the given index is a short array .
909	Returns the comment as a comment .
910	Find the index of the header comment .
911	Add blank line .
912	Move parameter annotations .
913	Move the return annotations .
914	Calculates the bitmask .
915	Converts camel case to underscore
916	Calculate trailing whitespace indent .
917	Sort an array of elements .
918	Sort a list of fixers .
919	Get the end of the document .
920	Fix the description .
921	Fix annotations .
922	Ensures that two annotations are present .
923	Ensures that the first line is separator .
924	Get invalid errors .
925	Get exception errors .
926	Get lint errors .
927	Returns the block block block .
928	Delete a file
929	Remove all files .
930	Process tokens .
931	Clears the tokens .
932	Clears the changed tokens .
933	Checks if two objects are equal .
934	Checks if the given array contains any other elements .
935	Checks if key is insensitive
936	Get the name of a token .
937	Returns a list of keywords .
938	Check if this object is a specific kind .
939	Checks if the token is whitespace .
940	Override this method to override the prototype .
941	Get path .
942	Determine if the command is running .
943	Computes the configuration files .
944	Parse rules .
945	Sets an option .
946	Handle the request .
947	Check if a script tag exists
948	Creates an API instance
949	Sanitize shop .
950	Create a HMAC hash
951	Activate the usage .
952	Save a charge .
953	Authenticate user .
954	Redirect to the user .
955	Retrieve the charge details .
956	Check if the trial is active .
957	Calculate the remaining days .
958	Returns the remaining days of the trial .
959	Cancel a charge .
960	Handle billing .
961	Handle a request .
962	Builds the auth URL .
963	Restore shop .
964	Dispatch webhooks .
965	Dispatch script tags .
966	Dispatch after authentication .
967	Clean shop .
968	Cancel a plan .
969	Get grant type
970	Set shop domain
971	Get token from session
972	Clears the session .
973	Initialize shop .
974	Handle HTTP request .
975	Get shop webhooks
976	Delete all webhooks .
977	Get the URL from the given name .
978	Validate shop .
979	Returns the response .
980	Get Shopify API
981	Get plan charge .
982	Display a billing plan .
983	Process a billing plan .
984	Store usage charge .
985	Get charge information .
986	Get confirmation URL
987	Get charge details .
988	Activate plan .
989	Save the response .
990	Validate the given schema .
991	Get all rules .
992	Visitor for validation rules .
993	Checks if the given value is valid .
994	Returns the description of the comment .
995	Get deprecated reason .
996	Checks if an item exists .
997	Unset an offset
998	Get the type map .
999	Get a type by its name .
1000	Get a directive by name .
1001	Checks if the given type is overlap .
1002	Visits a TypeInfo node .
1003	Parse HTTP request .
1004	Parse request parameters
1005	Convert a result to a PSR response .
1006	Resolve type value .
1007	Check if the given name is valid .
1008	Returns a list of suggestions .
1009	Returns the default field resolver .
1010	Read a name .
1011	Reads a number .
1012	Read digits .
1013	Reads a comment .
1014	Move the cursor to the cursor position .
1015	Set validation rules .
1016	Checks if the given type is a builtin type .
1017	Get all registered types .
1018	Merge two arrays .
1019	Creates a new instance of an error .
1020	Get the locations of this node .
1021	Returns a serializable representation of the source .
1022	Builds the execution context .
1023	Execute an operation .
1024	Gets the operation root type .
1025	Get field entry key .
1026	Checks if the given fragment condition is valid .
1027	Executes the given fields .
1028	Resolve field definition .
1029	Resolve a value from a field definition .
1030	Complete the value of a value .
1031	Complete the value of a value .
1032	Complete the value of the given type .
1033	Convert a value to a promise .
1034	Complete the value of a list of items .
1035	Completes a leaf value .
1036	Complete the abstract type .
1037	Complete the value of an object .
1038	Executes the given fields .
1039	Print a path .
1040	Process a PSR request .
1041	Wait for a promise .
1042	Print a block string
1043	Prints an error .
1044	Highlight source code .
1045	Create an error from an exception .
1046	Converts an error to a safe trace .
1047	Create a new OperationParams instance .
1048	Parse raw string
1049	Gets the values of a variable definition .
1050	Get the values of a directive .
1051	Get the values for the given node .
1052	Build an AST from the given source .
1053	Builds a schema .
1054	Checks if the given type is allowed for the given type .
1055	Find the breaking changes between two schemas .
1056	Returns a list of removed types .
1057	Find all types that have been changed .
1058	Finds all types that have been removed .
1059	Finds the values removed from the given schema .
1060	Finds the difference between two schemas .
1061	Finds the values added to the given schema .
1062	Finds all types added to the given schema .
1063	Find conflicts within a selection set .
1064	Recursively collect conflicts with the given fields .
1065	Find conflict between two fields .
1066	Determines if the given type is conflict .
1067	Find conflicts between two sub - selections .
1068	Collect conflicts between two fields .
1069	Collect conflicts between two fragments .
1070	Collect conflicts between two fragments .
1071	Returns a list of subfield conflicts .
1072	Get suggested type names .
1073	Get suggested field names .
1074	Returns an array of errors .
1075	Create a node from an array .
1076	Checks if the given value is missing .
1077	Create a type from a schema node .
1078	Execute a query .
1079	Enable warnings .
1080	Parse the given source .
1081	Returns a Location object .
1082	Skip the given kind .
1083	Expect a token .
1084	Expect a keyword .
1085	Parse a name .
1086	Parse a document .
1087	Extract types from a schema .
1088	Get field definition .
1089	Get the stub file .
1090	Reorder by column
1091	Aggregate the results
1092	Reload the model .
1093	Get a fresh instance .
1094	Get the roots of this node .
1095	Get the children of a node .
1096	Get scoped attributes .
1097	Creates a new node .
1098	Update the current state .
1099	Resolve a node .
1100	Check if the node is moved .
1101	Get parent id
1102	Checks if the node is a change .
1103	Fire move event .
1104	Quote a value .
1105	Apply lock between two nodes .
1106	Write a migration .
1107	Write model .
1108	Validates that this node is duplicates .
1109	Group roots by scope
1110	Returns the key for the given node .
1111	Maps a list of nodes to the tree .
1112	Maps a list of nodes to a tree .
1113	Recursively maps a tree to a tree .
1114	Boot the tree .
1115	Get the qualified columns for the query .
1116	Create a new nested set query .
1117	Get the roots of the query .
1118	Get all leaves .
1119	Limit the limit to the given limit .
1120	Get the root node .
1121	Returns the ancestors of this node .
1122	Get the descendants of this node .
1123	Get the descendants of this node .
1124	Get the descendants of this model .
1125	Returns true if this node is a descendant of this node .
1126	Check if this node is a descendant of this node .
1127	Check if this node is an ancestor of this node .
1128	Check if this node is an ancestor of this node .
1129	Get the left sibling of this node .
1130	Make the first child of the given node .
1131	Check if this object is in the same scope .
1132	Check if this node is inside a subtree .
1133	Set the default left and right right right .
1134	Store new parent parent .
1135	Move the current node to new parent .
1136	Set current depth
1137	Set the depth of this node .
1138	Destroy all descendants .
1139	Restores the siblings of this node .
1140	Compute the depth of this node .
1141	Sets the value of the element .
1142	Get available option values .
1143	Bootstrap views .
1144	Bootstrap configs .
1145	Get the rule for the given attribute .
1146	Add conditional rules .
1147	Check if the given attribute is a conditional rule .
1148	Get attribute name .
1149	Set default values
1150	Render the form .
1151	Get view data
1152	Set the selector .
1153	Set view view .
1154	Make a validator for a given rule .
1155	Get message message .
1156	Validate the given attribute .
1157	Creates a confirmation rule .
1158	Rule after date .
1159	Get the validation message .
1160	Fake validation data .
1161	Makes sure the required data is required .
1162	Fake file data .
1163	Validate a field
1164	Throw a validation exception .
1165	Parse attribute name
1166	Parse parameters .
1167	Validate a JavaScript remote request
1168	Set remote validation rules .
1169	Purges non - remote rules .
1170	Creates a protected caller .
1171	Get a protected property .
1172	Call protected method
1173	Set the validation validator .
1174	Generate javascript validators .
1175	Convert an array of JavaScript rules to an array .
1176	Validate the given attribute .
1177	Create a validator .
1178	Get a validator instance .
1179	Get validation data .
1180	Validate a form request .
1181	Create a form request .
1182	Create a JavaScript validator .
1183	Get session token .
1184	Wrap the validator .
1185	Resolver resolver .
1186	Resolve validation .
1187	Create a validator .
1188	Get the validator closure .
1189	Check if a rule is implemented .
1190	Checks if the given rule is remote .
1191	Add custom definition
1192	Add custom attributes .
1193	Add custom elements .
1194	Sets the request .
1195	Returns the sorted list of extensions .
1196	Render HTML attribute .
1197	Render HTML attributes .
1198	Escape a value .
1199	Add a voter .
1200	Get a menu item .
1201	Checks if the current item is current .
1202	Build an item .
1203	Build extra extras .
1204	Render children .
1205	Renders an item .
1206	Renders a link .
1207	Move the item to the given position .
1208	Move a child to another item .
1209	Slice the given item .
1210	Split an item into an array .
1211	Call recursively call recursively
1212	Checks if value is truthy .
1213	Returns the type of the given argument .
1214	Check if value is an object .
1215	Checks if two arrays are equal .
1216	Sorts an array of values .
1217	Returns a slice of strings .
1218	Set configuration .
1219	Debug request .
1220	Validate a sequence .
1221	Reduce a list of values .
1222	Wrap a function expression .
1223	Resolve a URI parameter .
1224	Fill path params
1225	Build query parameters .
1226	Parse a delimiter .
1227	Parse JSON token .
1228	Parse an expression .
1229	Parses an expression .
1230	Resolve configuration .
1231	Resolve options .
1232	Set the value of an array .
1233	Ensure the property type is valid .
1234	Returns the XML representation of the object .
1235	Returns the meta data for a given element
1236	Set the attachment .
1237	Sets the value of a property .
1238	Ensure the property type is valid .
1239	Returns the actual type of the given value .
1240	Convert a property to XML
1241	Encode a value .
1242	Determine the actual value of the given property .
1243	Returns the value of the given value .
1244	Creates a memoize function .
1245	Creates a chain of credentials .
1246	Get credentials from environment variables .
1247	Loads the credentials file .
1248	Get the home directory .
1249	Create a new service .
1250	Parse XML .
1251	Start an element .
1252	Normalize an element name .
1253	Create a PHP object from a meta type
1254	Checks if the given meta type is a simple PHP type .
1255	Returns the value of the given meta object .
1256	Search for an expression .
1257	Create a compiler instance .
1258	Make a variable name
1259	Write a string to the output .
1260	Create access request .
1261	Creates a transaction node .
1262	Compile endpoint .
1263	Create a new shipment request .
1264	Create a Void request .
1265	Recover a tracking label .
1266	Create a recovery request .
1267	Create a new XML request .
1268	Creates an XML request .
1269	Get a subscription .
1270	Creates a XML request .
1271	Checks if the response is valid .
1272	Check if the response is valid .
1273	Checks if the response is ambiguous .
1274	Create a RequestLandedCostRequest
1275	Send a request .
1276	Determine if the mail is in the mail .
1277	Creates a request .
1278	Add location information .
1279	Extracts the space id .
1280	Extracts the environment id from the data .
1281	Builds a File object .
1282	Get field by id
1283	Add an unknown field .
1284	Resolve links for a given resource type .
1285	Fetch all resources for a given array .
1286	Creates chunk chunks .
1287	Fetch a collection of resources for a given resource .
1288	Builds the content type collection .
1289	Set the type of the entity .
1290	Set Content Type
1291	Performs a sync request .
1292	Builds a result from the response .
1293	Get the token from the response .
1294	Create a resource pool .
1295	Check if a field exists .
1296	Get the unresolved field .
1297	Resolve field links .
1298	Get the references for this entry .
1299	Format a value .
1300	Returns the locale for the given locale .
1301	Parse JSON .
1302	Returns the default locale .
1303	Get a file from the cache
1304	Display a discussion .
1305	List discussions .
1306	Destroy a discussion .
1307	Replace url parameter with parameters
1308	Parse url parameter
1309	Removes HTML tags from HTML .
1310	Render categories menu .
1311	Checks if the given signature is valid .
1312	Set connection timeout .
1313	Sets the number of retries .
1314	Returns the URL for a given path .
1315	Get a GET request .
1316	Perform a POST request .
1317	Deletes a resource .
1318	Make a PUT request
1319	Clean up parameters
1320	Configure curl options
1321	Make a request
1322	Parse headers .
1323	Encodes the app authorization .
1324	Decode a JSON string .
1325	Creates a new request from a consumer .
1326	Get request parameters
1327	Returns the URL for the request .
1328	Get option value
1329	Set the value of a key .
1330	Query to many entities .
1331	Performs a query to the query .
1332	Read record from database .
1333	Apply filters .
1334	Fill related relationships .
1335	Paginate query
1336	Executes a query against the given query .
1337	Get query parameters .
1338	Set default API name .
1339	Add a record to the map .
1340	Check if a resource exists .
1341	Find record by identifier .
1342	Get the parameters .
1343	Check if the route is a GET request .
1344	Check if the resource is read .
1345	Check if the resource is a resource .
1346	Checks if the route is a resource .
1347	Checks if the current route is read .
1348	Allow a resource type
1349	Adds any resource types to the collection .
1350	Adds a list of resource types .
1351	Checks if the resource is allowed .
1352	Remove all allowed fields .
1353	Returns an array of validators .
1354	Sort the query by the given array .
1355	Get default sort parameters .
1356	Get sort column .
1357	Define a relation .
1358	Create a new Encoder instance .
1359	Create a new media type .
1360	Create a new media type .
1361	Is the given media type?
1362	Checks if the given media type is acceptable .
1363	Create a new pagination instance .
1364	Register services .
1365	Register middleware .
1366	Boot the response macro .
1367	Boot Blade directives .
1368	Bind service .
1369	Binds the request .
1370	Bind exception parser .
1371	Create a validator .
1372	Check if a field is a fillable .
1373	Get all data .
1374	Filter commands .
1375	Run commands with given parameters .
1376	Validates a type member .
1377	Validate id member .
1378	Validates an identifier .
1379	Validates a relationship .
1380	Validate a value .
1381	Validate the given value .
1382	Checks if the document has a property .
1383	Get data from document
1384	Check if a resource exists .
1385	Check if member is required .
1386	Validate member fields .
1387	Validates a resource type .
1388	Check if resource has clientIds
1389	Check if resource exists
1390	Check if resource exists .
1391	Ensures that the resource fields are valid .
1392	Check if the request is a JSON API .
1393	Prepare a JSON exception .
1394	Set the media type .
1395	Set encoding .
1396	Get updated resource .
1397	Deletes a resource .
1398	Get an error .
1399	Returns an error response .
1400	Returns an error response .
1401	Checks if the resource has no content .
1402	Get errors .
1403	Parse the response .
1404	Adds a relationship to the database .
1405	Find related models .
1406	Get default attributes .
1407	Get model attributes .
1408	Get attribute keys .
1409	Create a new error message .
1410	Create an error response .
1411	Create an error .
1412	Create an error response .
1413	Create an error .
1414	Create an error .
1415	Create an error .
1416	Invalid query parameter .
1417	Returns a collection of errors .
1418	Create a new validation exception .
1419	Translate a message .
1420	Format a pointer to a pointer .
1421	Create a BelongsToIdentity .
1422	Create a model identity .
1423	Add relationships to the query .
1424	Loads missing relationships .
1425	Get relationship paths .
1426	Convert a path to an include path .
1427	Get model relation for given field .
1428	Create an error collection .
1429	Fill soft delete data .
1430	Deserialize soft delete .
1431	Get soft delete field .
1432	Allow all allowed params
1433	Dasherize a value .
1434	Decamelize a string .
1435	Returns an underscored value .
1436	Camelize a value .
1437	Converts a value to a string .
1438	Build the class .
1439	Get stub stub .
1440	Get resource name .
1441	Replace the resource type .
1442	Replace the record .
1443	Replace application namespace .
1444	Get the stub for the given implementation type .
1445	Determine if the model is eager .
1446	Get resource data for update .
1447	Get data for delete .
1448	Get data for a relationship .
1449	Get relationship rules .
1450	Create a validator for a resource .
1451	Creates a validator for deletion .
1452	Create a delete validator .
1453	Get excluded parameters .
1454	Validate a relationship .
1455	Validates a relationship .
1456	Validates a relationship .
1457	Get the next paginator .
1458	Returns the previous paginator .
1459	Perform a WHERE clause .
1460	Sets the order by descending order .
1461	Sets the asc order .
1462	Get the value of a column .
1463	Guess the column name .
1464	Guess the route name .
1465	Decode a JSON string .
1466	Checks if the request is a body .
1467	Checks if the response is a body .
1468	Checks if the request is a JSON API .
1469	Get HTTP error status .
1470	Create a Resolver instance
1471	Create a response factory .
1472	Creates a validator validator .
1473	Create a validator .
1474	Create a validator .
1475	Create a validator validator .
1476	Create a validator .
1477	Update a resource .
1478	Delete a resource .
1479	Remove a relationship .
1480	Flip all resource types
1481	Get default codec .
1482	Creates an encoder .
1483	Register a provider .
1484	Create a new media type .
1485	Prepend a decoder to the stack .
1486	Push the stack to the stack .
1487	Merge all decodings .
1488	Add a new decodings .
1489	Checks whether or not the given value is true .
1490	Checks if the given mediaType is equal to the given media type .
1491	Convert an array to camelCase
1492	Get the current link .
1493	Create a link .
1494	Creates a new encoding from an array .
1495	Create a new encodings .
1496	Prepend the given encodings .
1497	Push the given encodings .
1498	Merge all encodings .
1499	Add a set of encodings .
1500	Checks whether or not the given value is true .
1501	Returns the encoding of the given media type .
1502	Returns the encoding of the Accept header .
1503	Handle the request .
1504	Binds the API to the given namespace .
1505	Bind the current page resolver .
1506	Build query parameters .
1507	Create a new job .
1508	Creates a new instance from an array .
1509	Get resource url .
1510	Get the URL for a related field .
1511	Get the url for a relationship .
1512	Read data from store .
1513	Create a new record .
1514	Update a record .
1515	Deletes a resource .
1516	Read related resources .
1517	Read relationships .
1518	Replace a relationship .
1519	Add a new relationship .
1520	Remove a relationship .
1521	Get all processes .
1522	Process a record .
1523	Perform search .
1524	Read a record .
1525	Create a new record .
1526	Update a record .
1527	Replace a relationship .
1528	Execute a transaction .
1529	Register route .
1530	Register a resource .
1531	Creates a new exception instance .
1532	Deserialize a JSON document .
1533	Check if the given field is a fillable relation .
1534	Get the method for a relation .
1535	Fill the record .
1536	Fill relationships .
1537	Fill a relationship .
1538	Checks if the current route is present .
1539	Checks if the request is expected .
1540	Set column name .
1541	Set the column name .
1542	Build query builder .
1543	Creates a Cursor instance .
1544	Returns whether the given media types are encoded .
1545	Returns true if the media type is decoded .
1546	Decodes a JSON document .
1547	Register custom routes .
1548	Register routes .
1549	Authorize a relationship .
1550	Get the given relation .
1551	Checks if the record is inverseAdapter .
1552	Get the adapter for the given relation .
1553	Get the attribute attributes .
1554	Validate resource relationships .
1555	Returns a query with the query parameters without search .
1556	Get query rules without search .
1557	Default order .
1558	Checks if the query is required .
1559	Fill the given attributes .
1560	Get model key for given field .
1561	Deserialize attributes .
1562	Deserialize an attribute .
1563	Checks if the given field is a date attribute .
1564	Set the resource .
1565	Get resource .
1566	Sets route parameters .
1567	Returns the type of the resource .
1568	Get resource id .
1569	Get resource identifier .
1570	Get resource .
1571	Get the process id .
1572	Get the current process .
1573	Get the process identifier .
1574	Get the default api .
1575	Get API instance .
1576	Register a new api .
1577	Validates the given document .
1578	Create a new resource .
1579	Returns a new instance with the given type .
1580	Returns a new instance with the given ID .
1581	Returns a new instance with the given attributes .
1582	Returns a new collection of relationships .
1583	Get relationships .
1584	Returns a copy of the collection .
1585	Returns a copy of the collection .
1586	Get a pointer to a pointer .
1587	Get the pointer for a relationship .
1588	Get meta data .
1589	Invokes a hook .
1590	Invokes multiple hooks .
1591	Validate data .
1592	Validate resource .
1593	Validate type and id
1594	Validates the resource type .
1595	Validate the resource id
1596	Validate attributes .
1597	Validate relationships .
1598	Validate all resource fields .
1599	Authenticate the user .
1600	Serialize a record .
1601	Inject robots tags .
1602	Get social fallback .
1603	Returns an array of variables .
1604	Handles an exception .
1605	Returns all redirects .
1606	Find redirect by path
1607	Save a new redirect record .
1608	Create a new redirect record .
1609	Delete a redirect
1610	Checks if the URI is a redirect .
1611	Creates a DOM document .
1612	Set criteria id by type
1613	Closes the database connection .
1614	Send a command to the server
1615	Read session data .
1616	Returns the number of records .
1617	Execute a column .
1618	Returns the value of the given attribute .
1619	Builds all records for the given query .
1620	Builds a single record .
1621	Add a column to the database .
1622	Add column name
1623	Build a condition .
1624	Release a lock
1625	Update all counters
1626	Build a unique key
1627	Use loggers .
1628	Use log files .
1629	Returns the Monolog object .
1630	Resolve the request .
1631	Get meta data .
1632	Log a message .
1633	Fire log event .
1634	Boot the user .
1635	Setup event listeners .
1636	Format SQL query .
1637	Setup queue .
1638	Get a Guzzle client .
1639	Setup the callback .
1640	Set the path to the project .
1641	Setup session tracking .
1642	Parse a string from a string .
1643	Returns the center of this point .
1644	Simplified method .
1645	Returns the distance between the given coordinate .
1646	Returns the distance between the segments .
1647	Calculate the bearing between two points .
1648	Calculate the final bearing between two points .
1649	Get the latitudes .
1650	Get the lngs .
1651	Returns true if the given geometry contains the given geometry .
1652	Returns the perimeter of this segment .
1653	Returns the area of the area .
1654	Returns a new polygon .
1655	Handle ConnectedSocks .
1656	Add a message .
1657	Get a single argument .
1658	Get the date time .
1659	Create a new suggestion .
1660	Set the reply .
1661	Render media .
1662	Add a message to the chat .
1663	Set image image
1664	Get the countries
1665	Get list of countries
1666	Enable TwoFactor .
1667	Disable a second factor .
1668	Delete all files in the folder
1669	Delete the folder
1670	Renames the folder
1671	Copy this folder to another folder
1672	Protect the folder .
1673	Checks if the file is protected .
1674	Synchronize the folder .
1675	Unsynchronize the folder
1676	Get model model
1677	Get the hash of the folder
1678	Get file size
1679	Checks if the user has permission
1680	Handle user profile .
1681	Creates a copy of a user .
1682	Process session field
1683	Get all modules
1684	Check admin status
1685	Check if admin is disabled
1686	Update current user
1687	Login action .
1688	Update style sheet
1689	Update the stylesheet
1690	Write style sheet
1691	Compile a color
1692	Shortcut to shorten hexadecimal color
1693	Convert a hexadecimal color to a string
1694	Export style sheet
1695	Check style sheet name
1696	Finds a single style by id
1697	Remove frontend authentication .
1698	Loads frontend user .
1699	Get file by name
1700	Unzip compressed file
1701	Convert time to Unix time
1702	Get the list of pages for a given page
1703	Returns the link for the given item .
1704	Purge oldFeeds
1705	Add a cookie to the response
1706	Clear the response cookies
1707	Checks if the response has a cookie .
1708	Remove an entry from the database
1709	Render the contao template .
1710	Replace insert tags .
1711	Set empty end time
1712	Get article alias
1713	Execute post actions
1714	Get the user instance
1715	Checks if a field has access to a field
1716	Check if a row is allowed
1717	Check if the given table is editable
1718	Sets the language for the user .
1719	Get the list of news archives .
1720	Get the chunks from a unit .
1721	Returns the string representation of a string .
1722	Adds the given chunk to the global array .
1723	Get the preview image .
1724	Generate a random secret .
1725	Checks if the configuration is valid .
1726	Checks if the user is valid .
1727	Finds data by column
1728	Save the current record .
1729	Regenerates the session id .
1730	Checks if the group belongs to .
1731	Trigger the import user .
1732	Generate the page .
1733	Get book pages
1734	Validate a token
1735	Returns the URL for the provisioner .
1736	Get QR code .
1737	Loads the routes .
1738	Generate the file
1739	Generate the template
1740	Check if the image is important .
1741	Check if the value is valid
1742	Generate a link to a file
1743	Generates an upload file .
1744	Delete a file
1745	Show a file
1746	Add an enclosure
1747	Get all calendars
1748	List single record
1749	Import an object
1750	Log a message .
1751	Get the URL of the current page
1752	Checks if the given language is installed .
1753	Get all countries
1754	Get all languages
1755	Get all time zones
1756	Set cookie value
1757	Get a human readable size .
1758	Get formatted number
1759	Get session hash
1760	An anonymized IP address .
1761	Reads php file without tags
1762	Convert xliff file to PHP
1763	Run the frontend .
1764	Checks if the database is running .
1765	Colorize log entry
1766	Stores the redirect request .
1767	Returns the relative request URI .
1768	List articles .
1769	Returns true if the attribute is set .
1770	Returns the errors as a string .
1771	Generate HTML code
1772	Get attribute value
1773	Validate the input
1774	Add attributes .
1775	Check if the option is checked
1776	Check if the option is selected
1777	Return option selected option
1778	Check if option is checked
1779	Returns the empty string or null if not null .
1780	Generate the template
1781	Check if path is insecure path
1782	Check if a file name is valid
1783	Counts the number of articles in the list of articles .
1784	Fetch items from news list
1785	Check if request is private .
1786	Generate the alias for the given page .
1787	Get active layout sections
1788	Edit an article
1789	Paste an article
1790	Prepare alias .
1791	Prepare the domain .
1792	Adds the host to the request context .
1793	Get host and port and port
1794	Get auto - item list
1795	Add frontend route .
1796	Add the index route .
1797	Add locale to route .
1798	Find class by name
1799	Returns the help text .
1800	Combiner function .
1801	Switch to edit page
1802	Initializes the picker .
1803	Returns the input field for the given value .
1804	Invalidate cache tags
1805	Get all active groups
1806	Set new password
1807	Store the date added to the user .
1808	Get all content elements
1809	Returns the content element group for the given element .
1810	Adjust the dca by type
1811	Add content type
1812	Get all forms
1813	Sets the rte syntax for the current page .
1814	Returns the list of import wizard
1815	Render table import wizard
1816	Get the page pca .
1817	Delete an element
1818	Set single source flag
1819	Extracts the youtube id from the youtube video
1820	Extract vimeo id from vimeo
1821	Returns a list of pages for a given pid
1822	Adjusts the permissions for a user .
1823	List image size
1824	Returns the original row
1825	Set row data
1826	Merge an array of data
1827	Mark the file as modified
1828	Save model instance
1829	Deletes the model
1830	Refreshes the model .
1831	Detach the current instance
1832	Register the unique alias .
1833	Unregister an alias .
1834	Find model by id
1835	Find model by id
1836	Find multiple records by id
1837	Find a single model by its value
1838	Find by column value
1839	Find a model by its primary key
1840	Get count by column
1841	Parse a file
1842	Registers the fragments .
1843	Get the controller name .
1844	Generate the feed for a calendar .
1845	Get the list of pages for a given page
1846	Converts a Unix timestamp to a Julian day .
1847	Parse article list
1848	Get meta fields
1849	Generate link .
1850	Pre - handler for a Fragment .
1851	Generate next page
1852	Get next page
1853	Translate insert tags .
1854	Finds the current record by its ID .
1855	Returns an array of records for a given list of IDs .
1856	Get page layout
1857	Open a file
1858	Renames a file .
1859	Copy a file to another directory
1860	Copy files from source directory
1861	Change file mode
1862	Move an uploaded file to another folder
1863	Validate the given path .
1864	Clears the form data .
1865	Add sender to sender
1866	Add sender name to sender
1867	Validate session lifetime .
1868	Check maintenance mode
1869	Parse a file .
1870	Checks if the request is a CORS request .
1871	Generate an AJAX request
1872	Convert values to paths
1873	Add bundles .
1874	Add components .
1875	Returns the bundle package name .
1876	Create a new table .
1877	Deletes a table .
1878	Delete all records
1879	Protect the folder .
1880	Check if a folder is mounted
1881	Check if file is valid
1882	Get MD5 folders
1883	Finds all relations
1884	Returns the count of the query
1885	Get the items as a string
1886	Returns an array of items as an array .
1887	Get link to page
1888	Generate AJAX request
1889	Get path nodes
1890	Checks if the file has access to the file .
1891	Checks if the given line is granted .
1892	Checks if the current file is synced .
1893	Handles authentication failure .
1894	Generate the file .
1895	Add rewrite rule .
1896	Purges old files .
1897	Checks if a file exists in the web directory .
1898	Check if user is active .
1899	Create resize configuration .
1900	Create an important part .
1901	Validate input
1902	Prepare query string
1903	Limit the number of rows
1904	Execute query
1905	Execute query
1906	Replace wildcards
1907	Escape params
1908	Get the name of the argument .
1909	Strip the namespace .
1910	Create a template
1911	Returns the type of the controller .
1912	Displays a picker .
1913	Generate captcha .
1914	Generate hashes for a given sum
1915	Generate a question
1916	Generate captcha text
1917	Find archive by archive
1918	Find by id
1919	Append the schema to the schema .
1920	Get the sql definition for the database .
1921	Returns the index length for the given column .
1922	Create a GD image from a file .
1923	Create a new image from a given width .
1924	Set the GD resource .
1925	Convert image to palette
1926	Count the number of colors .
1927	Returns true if the image is semitransparent .
1928	Validate input
1929	Generate HTML code
1930	Attach a file .
1931	Attach a string to a file .
1932	Parse backend template
1933	Get locale string
1934	Get date string
1935	Generate the redirect URL .
1936	Get forward URL
1937	Converts a value to a path .
1938	Adjust the permissions for a user .
1939	Clears newsletter data .
1940	Check if the email is unique .
1941	Check if a recipient is blacklisted .
1942	Returns a list of email addresses .
1943	Replace tag tags
1944	Loads a section .
1945	Load sections .
1946	Get custom sections
1947	Set cache headers
1948	Generate a redirect .
1949	Show related records
1950	Resend a token
1951	Render a button .
1952	Finds a single record by its parent .
1953	Find active model by parent
1954	Find expired subscriptions .
1955	Get a list of style sheets
1956	Get the link sheet link
1957	Generate video .
1958	Get task from input .
1959	Encode a domain domain
1960	Decode a domain
1961	Encode email address
1962	Decode email address
1963	Encode a URL .
1964	Decode url .
1965	Generate the files
1966	Find a model by its ID
1967	Find by id
1968	Find by pid
1969	Find multiple models by id
1970	Find model by UUID
1971	Find multiple records by UUID
1972	Find by path
1973	Find multiple records by path
1974	Find multiple documents by UUID and extensions
1975	Find multiple files by folder
1976	Find multiple folders by folder
1977	Trigger the preview url .
1978	Add a flash message
1979	Generates the HTML for the message .
1980	Generate unwrapped flash messages .
1981	Reset the session
1982	Checks if the current session has an error .
1983	Returns true if the message has messages .
1984	Get all image sizes
1985	Get the options for a user .
1986	Load options .
1987	Filter options .
1988	Get root page from url
1989	Add url to url
1990	Jump to the page
1991	Returns true if the user has login status
1992	Get meta data
1993	Prepare meta description
1994	Applies the index to the page .
1995	Generate RSS .
1996	Adjust the publication date .
1997	Dump the configuration .
1998	Get the locale .
1999	Get accepted languages .
2000	Fetch CSV data
2001	Get files .
2002	Get the version of a package .
2003	Returns the normalized version of a package name .
2004	Add attributes to the form
2005	Validate the email
2006	Remove recipient from email list
2007	Handles the exception .
2008	Load language file .
2009	Initialize the global variables .
2010	Initialize the controller .
2011	Find a calendar by id
2012	Add a namespace .
2013	Add namespaces .
2014	Add classes .
2015	Loads a class .
2016	Generate HTML tag .
2017	Resize uploaded image
2018	Sets the image service .
2019	Overrides the default image path .
2020	Get searchable pages
2021	Find published published by pid
2022	Finds the first published root root of a given host .
2023	Find the first published published by the given ID .
2024	Find by alias
2025	Find published by id
2026	Returns a list of published subpages for a given pid .
2027	Find published articles by id
2028	Find published articles by pid
2029	Find published fallback by hostname
2030	Find all published pages .
2031	Find parents by id
2032	Returns the first active page with the given groups .
2033	Find a page with details .
2034	Register the domain .
2035	Unregister the domain .
2036	Get absolute URL .
2037	Get slug options .
2038	Applies the legacy logic to the URL .
2039	Create a picture configuration .
2040	Creates a picture configuration item .
2041	Create a symlink .
2042	Validate symlink .
2043	Find by email and pid
2044	Create a PDO connection .
2045	Generate HTML code
2046	Get temporary directory
2047	Event handler for schema index .
2048	Create SQL statement .
2049	Execute add log entry .
2050	Find group by column
2051	Save the current group .
2052	Create a picture .
2053	Get template data .
2054	Get configuration item .
2055	Validate input
2056	Set root type
2057	Checks if the root level is a root level .
2058	Make sure the page is valid
2059	Generate sitemap .
2060	Schedules the current page .
2061	Generate the alias for a page
2062	Generate article .
2063	Purges the search index .
2064	Check if a feed alias exists
2065	Checks if the given variable is a jump to the given variable .
2066	Get page types
2067	Get page layouts
2068	Creates a copy of a page with a subpages .
2069	Cut a page
2070	Deletes a page .
2071	Calculate date and time and time
2072	Returns a list of all the archived archives .
2073	Get all tables
2074	Purges the search tables .
2075	Delete the version table .
2076	Purge image cache
2077	Clears the script cache .
2078	Purge page cache
2079	Purge internal cache
2080	Purge all registered registrations .
2081	Purges expired tokens .
2082	Generate XML files .
2083	Generate internal cache
2084	Rotate log files .
2085	Add multiple files
2086	Get the path for a template
2087	Get the default path for a template
2088	Initialize the templates .
2089	Find published published by source
2090	Returns the count of published records .
2091	Generate the form
2092	Initialize the session
2093	Validate a password
2094	Checks if the given scope is a scope .
2095	Create date ranges
2096	Returns the week beginning of the week .
2097	Returns the regexp for the given format .
2098	Convert a string to JS
2099	Get numeric date format
2100	Get the timestamp format .
2101	Get the datimim format
2102	Resolve custom modifiers .
2103	Checks if the layout is old .
2104	Get all templates .
2105	Generates a link to a link .
2106	Returns the maximum upload file size
2107	Finds a model by its ID and id
2108	Finds a model by id and id
2109	Get the list of related records
2110	Set the related records .
2111	Ask for a password .
2112	Generate 404 page
2113	Generate article template
2114	Builds the menu .
2115	Get field value .
2116	Add template warning
2117	Returns a list of all available fields .
2118	Generate SQL form .
2119	Get the database from DCA
2120	Get database from database
2121	Get active modules .
2122	Add a file
2123	Add multiple files
2124	Get file URLs
2125	Returns the HTML markup for the HTML tag .
2126	Handle css content
2127	Fix file paths
2128	Ends the block .
2129	Initialize the configuration .
2130	Mark the current configuration .
2131	Save the script
2132	Add a value to the array
2133	Persist a config value
2134	Removes a value from the config
2135	Load configuration files .
2136	Load parameters .
2137	Escape a variable value .
2138	Called when the server is secure .
2139	Handles the response headers .
2140	Fetch the headers from the headers
2141	Triggers the session .
2142	Returns the session bag .
2143	Generate 403 page .
2144	Handle invalid credentials .
2145	Replace all occurrences of a string
2146	Generate email object
2147	Sends email to email
2148	Remove subscribed subscriptions .
2149	Create a new user .
2150	Activate newsletter .
2151	Toggle the user s visibility .
2152	Synchronize user s newsletter .
2153	Update email address
2154	Get newsletter newsletter
2155	Returns a list of available pages .
2156	Validate input
2157	Generate HTML tag
2158	Updates the calendar events .
2159	Updates the latest settings .
2160	Update the layout .
2161	Updates the layout .
2162	Runs the username table .
2163	Runs the layout .
2164	Converts a single field to a single file .
2165	Convert multi - field values to a single field
2166	Convert an order field to an array
2167	Generate helper object
2168	Create content element
2169	Accept license .
2170	Set the password .
2171	Displays the login .
2172	Purges the cache .
2173	Clean up the cache .
2174	Set up the database connection
2175	Adjust the database tables .
2176	Imports the website .
2177	Get the redirect response .
2178	Adds defaults to the context .
2179	Generate Symlinks .
2180	Find files in a given path .
2181	Filter nested paths .
2182	List image size
2183	Creates a new menu item .
2184	Get all events
2185	Install the application .
2186	Fetch data from a table
2187	Fetch by alias
2188	Register a model .
2189	Unregister a model
2190	Check if a model is registered
2191	Registers an alias .
2192	Checks if an alias is registered .
2193	Send activation mail
2194	Activate A count
2195	Resend activation mail .
2196	Send admin notification .
2197	Handles authentication success .
2198	Find by id or alias
2199	Find published by id
2200	Find published published by pid
2201	Initialize the request
2202	Strip tags from a string
2203	Decode entities .
2204	Encode special characters .
2205	Returns the value of a POST request .
2206	Generate logout .
2207	Compile the year .
2208	Checks if a key exists .
2209	Fetch a row from the database
2210	Fetch an associative array
2211	Fetch a single row from the database
2212	Fetch a field from the result set
2213	Returns the first result of the result set
2214	Returns the next result of the result set
2215	Get next row
2216	Returns the last result of the result set
2217	Returns a list of all subscribed channels .
2218	Get all fields
2219	Returns the count of published records .
2220	Find published by pid
2221	Finds published records from a list of pids
2222	Returns the number of published records .
2223	Get template folders
2224	Edit css
2225	Handles the exception .
2226	Render error screen .
2227	Returns the edit header .
2228	Add breadcrumb
2229	Create a drag file
2230	Get target folders
2231	Checks if the user has a user .
2232	Get list of users
2233	Checks if the user has permissions .
2234	Show deleted records .
2235	Generate the calendar feed .
2236	Generate article tag
2237	Generate PDF .
2238	Handle prepend locale .
2239	Add default server version .
2240	Get template group
2241	Get article object
2242	Get content element
2243	Returns the form of the form .
2244	Get spellchecker string
2245	Get page status icon
2246	Checks if the given object is visible
2247	Generate margin .
2248	Add URL to URL
2249	Redirects to the given location .
2250	Replace the old path with old .
2251	Convert relative URLs to relative URLs .
2252	Redirect to frontend page
2253	Get parent entries
2254	Remove nested paths .
2255	Remove nested pages .
2256	Set static urls .
2257	Add static url to the given script
2258	Prepare the attributes for the widget .
2259	Create a new Version
2260	Returns a list of files matching the pattern .
2261	Prepare a prepared statement
2262	Execute query
2263	Returns the list of tables .
2264	Check if a table exists
2265	Check if a field exists
2266	Check if an index exists
2267	Returns a list of all fields of a table
2268	Checks if a value is unique
2269	Lock tables .
2270	Returns the size of the table
2271	Get UUID from database
2272	Quote a string .
2273	Get all modules
2274	Returns a list of available member properties .
2275	Get layout sections
2276	Get activation default value
2277	Get the password default value
2278	Set page flags .
2279	Get the value of a given key .
2280	Parse HTTP Accept language
2281	Get the HTTP host
2282	Checks if the current request is secure .
2283	Returns the URL for the request .
2284	Get the IP address .
2285	Get the server s server
2286	Get browser agent
2287	Find active user by email
2288	Find a user by email
2289	Activate recipient .
2290	Adds a new subscription to the newsletter list .
2291	Handles the frontend page .
2292	Returns the current theme .
2293	Get the list of themes .
2294	Returns the language for the current language .
2295	Get TinyTemplates
2296	Add URL to URL
2297	Handle runonce .
2298	Find all pages in a page
2299	Add a file meta information to the backend
2300	Get system messages
2301	Convert layout sections to associative array
2302	Returns the HTML for the DCAPicker wizard .
2303	Add custom sections .
2304	Create page list
2305	Create page list
2306	Create file list
2307	Create file list
2308	Set the important part
2309	Get important part
2310	Set zoom level
2311	Get resized path
2312	Get the cache name .
2313	Execute resize .
2314	Prepare the image
2315	Prepare the important part
2316	Prepare resize configuration .
2317	Computes the resize image .
2318	Get the path of the image
2319	Resize image
2320	Create a new Image object
2321	Get image path
2322	Get pixel value
2323	Get current token
2324	Check if token is valid
2325	Returns true if the model is set .
2326	Create a new model from the database
2327	Set a row
2328	Save the model .
2329	Deletes the model .
2330	Returns the next element
2331	Fetches all data from the database
2332	Validate input .
2333	Handles the request .
2334	Event handler for switch user
2335	Initializes the token storage .
2336	Sets the cookie headers .
2337	Set legacy options .
2338	Initialize the database .
2339	Render dropdown .
2340	Get the edit URL .
2341	Get the username .
2342	Get user id
2343	Convert an array into a string
2344	Create file if exists
2345	Truncate the file .
2346	Close the file .
2347	Get the content of the file
2348	Write content to file
2349	Renames the file .
2350	Copy this file to another folder
2351	Resize image
2352	Send file to browser .
2353	Write data to file
2354	Returns the redirect response .
2355	Checks if the user is frontend .
2356	Checks if the user has a backend .
2357	Get the frontend username .
2358	Get the user s username .
2359	Checks if the user is preview mode .
2360	Find published by id
2361	Find all active active records .
2362	Finds the first active page with the given IDs .
2363	Decode HTML entities .
2364	Generate alias from string
2365	Prepare a slug .
2366	Cleans a string .
2367	Encode email address
2368	Extract email address from string
2369	Splits an email into an array .
2370	Highlights the given string with the given phrase .
2371	Split CSV string into array
2372	Convert string to xhtml
2373	Convert HTML string to html
2374	Convert src to insert tag
2375	Insert tag to src
2376	Sanitize file name
2377	Convert a string to a string
2378	Converts a string to HTML .
2379	Deserialize a variable
2380	Trims a string from a string
2381	Strip the root directory .
2382	Find published by parent id
2383	Handles the request .
2384	Called when an exception occurred .
2385	Add a legend .
2386	Remove a field .
2387	Explode a palette .
2388	Encodes a palette .
2389	Apply fallback to the fallback .
2390	Find legend for a given field
2391	Adjust the permissions for a user .
2392	Get all calendars
2393	Add a file
2394	Add a string
2395	Close the archive .
2396	Convert Unix timestamp to hex
2397	Parse bb code
2398	Change subscription status .
2399	Notify subscribers of comments .
2400	Output the template
2401	Generates a route .
2402	Get a preview of a route .
2403	Translates a string .
2404	Get asset path
2405	Minify HTML .
2406	Generate a link tag
2407	Generate script tag
2408	Flush all data .
2409	Get a singleton instance
2410	Get DBInstaller array
2411	Export a theme
2412	Add table tl theme
2413	Add table tl style sheet
2414	Add table tl module
2415	Adds table size to table
2416	Adds the tables to the table .
2417	Add data row to table
2418	Adds a folder to the archive .
2419	Add templates to archive
2420	Move a resource
2421	Copy a resource
2422	Delete a resource
2423	Update folder hashes
2424	Get the hash of a folder
2425	Checks if the file is synchronous .
2426	Checks if a file is synchronous .
2427	Builds the menu .
2428	Checks if the current time is running .
2429	Initializes the application .
2430	List style sheet
2431	Checks if a category is valid
2432	Update the style sheet
2433	Get a value from the session
2434	Set a session variable
2435	Removes a session from the session .
2436	Get session data
2437	Set session data
2438	Append data to session
2439	Creates a clone of the current context .
2440	Returns a string representation of this object .
2441	Decode url data .
2442	Get the user s user .
2443	Encrypt a value
2444	Decrypt a value
2445	Initializes the encryption module .
2446	Check if the current user is allowed to edit a comment .
2447	Notify the comment
2448	Send notification notifications .
2449	Edit comment .
2450	Invalidate source cache tag
2451	Handles the request .
2452	Get the locale .
2453	Find by hash and pid
2454	Show all records
2455	Copy all the clipboard
2456	Delete all records
2457	Delete child children
2458	Undo undo
2459	Move this item .
2460	Get pagination menu
2461	Converts a string to a canonical path .
2462	Generate the HTML for the dropzone
2463	Find sent messages by pid
2464	Finds sent by pids
2465	Checks if the user has permission
2466	Display welcome screen .
2467	Set impersonated logout .
2468	Returns a list of valid validators .
2469	Maps the content of a content block .
2470	Returns the maximum depth of a content type .
2471	Finds content for a given query .
2472	Finds a single content .
2473	Index content .
2474	Bulk index content .
2475	Delete content .
2476	Log warning .
2477	Perform a request .
2478	Get request headers
2479	Get search fields .
2480	Maps a search field value to a search field .
2481	Performs a search .
2482	Generate query string .
2483	Returns a string representation of the search targets .
2484	Get the list of search targets .
2485	Index documents .
2486	Commit the document .
2487	Perform search .
2488	Get the sort field name .
2489	Checks if the current endpoint has multiple endpoints .
2490	Process connection configuration .
2491	Configure search services .
2492	Defines the endpoint definition .
2493	Returns a string representation of a range .
2494	Escape a string .
2495	Adds the endpoints section .
2496	Get the index field name .
2497	Gets the core criterion .
2498	Get language filters .
2499	Returns true if the language is available .
2500	Gets the index field type .
2501	Get facet params
2502	Map data to array
2503	Loads messages and versions from a list of wsdl .
2504	Extracts the messages and versions from a file .
2505	Loads a WSDL xml file .
2506	Evaluate XPath query .
2507	Iterate over all operations with the given query .
2508	Converts a message to a request .
2509	Finds the builder for the given message name .
2510	Analyze the response .
2511	Returns the status for the given node .
2512	Set status .
2513	Checks if the current status isorse .
2514	Set consumer id
2515	Send a PNRRetrieve request .
2516	Creates a PNR message .
2517	Send multiple PNR elements
2518	Send a PNR request and display it .
2519	Queue a queue
2520	Queue place pnr .
2521	Send a PNR notification
2522	Call a message .
2523	Make message options
2524	Loads information from the AuthParams
2525	Get consumer id
2526	Prepare the next message
2527	Get the endpoint from a WSDL file .
2528	Get action from wsdl file
2529	Generate a GUID
2530	Make soap client options
2531	Get stateful status code
2532	Load optional segment information .
2533	Loads the inventory .
2534	Set session data
2535	Get all messages and versions
2536	Returns the WSDLId for a message .
2537	Get the SOAP client
2538	Initializes the SOAP client
2539	Execute a SOAP client
2540	Generate the segment name for a request element
2541	Analyzes the response and returns the result .
2542	Analyze the response with the given error code .
2543	Analyzes the response and returns the result .
2544	Analyze the response with an error code .
2545	Create a DOMXPath from the response .
2546	Returns the status of the given error .
2547	Analyze the response .
2548	Returns the handler for the given message .
2549	Load client params .
2550	Load session handler .
2551	Loads a request creator .
2552	Get string between start and end
2553	Load price options from request options .
2554	Creates a price option for the price family .
2555	Loads a CORTOFare option
2556	Load the obfees
2557	Loads the mop details .
2558	Load payment module .
2559	Loads payment data .
2560	Checks if the payment has been created .
2561	Loads specific changes .
2562	Loads the geo code .
2563	Load business id
2564	Generates a random string with random characters .
2565	Analyze the response .
2566	Checks if any of the given arguments are empty .
2567	Checks if all arguments are empty .
2568	Checks if all integers are valid
2569	Checks if any of the given arguments are true .
2570	Load nonce base nonce base .
2571	Check if fop type is valid
2572	Load session handler .
2573	Load auth params
2574	Load session handler params
2575	Load request creator params
2576	Merge options .
2577	Checks if a price option exists .
2578	Load arnk .
2579	Load customer refs
2580	Loads the WSDL .
2581	Load the SOAP client .
2582	Load Transaction flow link .
2583	Prepare the next message
2584	Analyze the response .
2585	Loads the passenger information .
2586	Loads the PNR elements .
2587	Load PNR actions .
2588	Add itineraries to an itinerary
2589	Add the received from the received RF .
2590	Sets the arrival date .
2591	Load payment data .
2592	Creates a new RequestCreator .
2593	Load the feeIds .
2594	Load the currency override .
2595	Returns the error message .
2596	Decode the processing level .
2597	Checks if the next token is a next token .
2598	Move next token .
2599	Skip the next token .
2600	Returns the next token .
2601	Returns the literal for the given token .
2602	Execute the API .
2603	Execute the service .
2604	Execute the WAF
2605	Set header .
2606	Delete an ACL item
2607	Execute image optimization .
2608	Get current version
2609	Get next version
2610	Determine the current version of a list of versions .
2611	Get active version
2612	Execute authentication .
2613	Prepare GAReq data
2614	Returns the default website name .
2615	Check if the service is valid
2616	Prepare custom variables
2617	Get country name
2618	Get site location .
2619	Generate CID
2620	Send an installed request to the GA .
2621	Send validation request
2622	Send configuration request
2623	Get the days from the installation .
2624	Send request to GA .
2625	Returns the HTML for the page .
2626	Constructs the ACL .
2627	Render a cell template
2628	Returns an array of options .
2629	Delete a dictionary item
2630	Execute an ACL .
2631	Execute custom snippets .
2632	Perform a purge request
2633	Execute histogram .
2634	Execute the action
2635	Check if the current version is updated .
2636	Get latest version
2637	Updates a dictionary item .
2638	List ACL items
2639	Get element by path .
2640	Clean up a URL
2641	Removes all keys from the given keys
2642	Clean all items .
2643	Purge a PUT request
2644	Get customer information
2645	Check service details
2646	Clone the active version
2647	Add a comment
2648	Upload vcl .
2649	Set the VCL for a VCL .
2650	Validate service version
2651	Activate a version
2652	Upload snippet .
2653	Update a snippet .
2654	Check if a snippet exists
2655	Create a new condition
2656	Create a header
2657	Create a response object
2658	Get a response object
2659	Create a new request
2660	Get request settings
2661	Delete a request .
2662	Get a list of backends
2663	Configure backend .
2664	Send webhook message
2665	Create a new dictionary .
2666	List all items in a dictionary
2667	Get a single dictionary
2668	Get auth dictionary .
2669	Checks if the given version is valid .
2670	Create a dictionary of items for a given dictionary .
2671	Delete a dictionary item
2672	Updates a dictionary item .
2673	Get a single ACL
2674	Delete an ACL .
2675	List ACL items
2676	Updates an ACL item
2677	Delete an ACL item
2678	Update an ACL item
2679	Query historic stats .
2680	Get image optimization status
2681	Configure image optimization options
2682	Get service details
2683	Get WAF settings
2684	Fetch a request
2685	Called when the controller is dispatched .
2686	Get image optimization status
2687	Unserialize configuration data
2688	Rotate an angle
2689	Resize the image .
2690	Get image size
2691	Get the force lossy url
2692	Get the fastly url
2693	Compile the params
2694	Execute the action
2695	Dispatches the response .
2696	Returns the type of the config
2697	Execute vcl .
2698	Updates the cache .
2699	Upgrade old config paths
2700	Updates the country mapping .
2701	Execute all modules
2702	Save the uploaded file
2703	Check if the block is visible .
2704	Returns the content type options .
2705	Executes the basic authentication .
2706	Get all modules
2707	Execute the WAF page .
2708	Clean up the config
2709	Before saving the cache
2710	Get all domains
2711	Execute basic authentication .
2712	Returns the HTML for the given element .
2713	Get the values of the pixel ratios .
2714	Get checked values
2715	Render the group .
2716	Add text input
2717	Render element .
2718	Execute custom snippet
2719	Checks if host is in domain list
2720	Creates a new page layout .
2721	Get message in store
2722	Handles the purge request .
2723	Dispatches the cache .
2724	Cleans up the cache .
2725	Check if object is purged
2726	Execute the basic authentication .
2727	Executes the WAF action .
2728	Execute custom snippet
2729	Prepare image attributes
2730	Execute basic authentication .
2731	Execute the backend
2732	Clean up the cache
2733	Execute the VCL .
2734	Called when the layout is generated .
2735	Handles the output .
2736	Get list of countries
2737	Set service ID
2738	Set the token
2739	Upload vcl .
2740	Execute the block .
2741	Get all repositories
2742	Execute the service .
2743	Checks if the repository is updated .
2744	Execute the cache .
2745	Returns true if the image optimization is enabled .
2746	Checks if the image is enabled .
2747	Get the GeoIP mapping for a country code .
2748	Extracts the mapping from the mapping .
2749	Get vcl file
2750	Get VCL snippets for a given path .
2751	Validates a custom snippet .
2752	Process blocked items .
2753	Get the request for the given path .
2754	Render plain text .
2755	On import event .
2756	Deletes the view .
2757	Get the permissions for a taxonomy .
2758	Get a new ratio .
2759	Get storage key
2760	Returns a list of branches .
2761	Get log level mapping .
2762	Log a message .
2763	Checks if the repository is cloned .
2764	Run a git command .
2765	Check if the current branch is up .
2766	Checks if the current branch is ahead .
2767	Push a tag .
2768	Creates a new branch .
2769	Add a remote remote .
2770	Get remote URL
2771	Clone a repository
2772	Initialize the application .
2773	Fetches all tags in the repository .
2774	Set private key
2775	Streams the git output .
2776	Parses a repository name .
2777	Initializes a new git repository .
2778	Clone a repository
2779	Executes git command .
2780	Build the options .
2781	Get the command line .
2782	Renders the shadow mark .
2783	Render summary report .
2784	Indent the output .
2785	Extract the failed failure output .
2786	Checks if the token is valid .
2787	Execute the analysis .
2788	Get the mutation token .
2789	Convert a list of tokens into a string .
2790	Gets the mutation token .
2791	Checks if the given output is ok .
2792	Get a single option
2793	Get the cache directory .
2794	Set temporary directory
2795	Get the temporary directory .
2796	Set adapter options
2797	Get the adapter .
2798	Returns a JSON representation of the mutation .
2799	Generates a static file .
2800	Generate bean creation code .
2801	Generate non - lazy bean code .
2802	Parses a boolean value .
2803	Set proxy target directory
2804	Displays the search profile
2805	View action .
2806	View log .
2807	Delete all profiles .
2808	Returns filtered requests
2809	Returns the visible panels .
2810	Initialize the logger
2811	Get all events .
2812	Get observers .
2813	Initializes the controller .
2814	Get block by name
2815	Add a collection
2816	Get a list of all collections
2817	Add a model
2818	Get all models as array
2819	Initializes the queries .
2820	Returns serialized info .
2821	Sets the current session
2822	Initialize the model .
2823	Delete expired requests .
2824	Get expiration date
2825	Returns translated translation .
2826	Get request view url
2827	Format a number .
2828	Get an array of options
2829	Enable SQL profiling .
2830	Disable SQL profiling .
2831	Execute select query
2832	Display stacktrace .
2833	Initialize query
2834	Start the block .
2835	Complete rendering for rendering .
2836	Get the layout updates .
2837	Returns information about the current theme .
2838	Get request info
2839	Returns the request URL for the request .
2840	Render an array of values
2841	Render array .
2842	Returns the tree as a tree .
2843	Returns the HTML for the block tree .
2844	Render a tree node
2845	Get request path
2846	Get the URL for a given path
2847	Get module config file path
2848	Set module status
2849	Sets the connection to the database .
2850	Set template hints .
2851	Search config for config
2852	Delete template hints
2853	Delete all profiles
2854	Returns a list of file updates for a given layout .
2855	Get database updates for a specific layout .
2856	Initialize the entity
2857	View handle handle .
2858	Display layout updates .
2859	Get HTTP method select method
2860	Get limit options
2861	Returns the range for the given log file .
2862	Start the request .
2863	Get all log files
2864	Get last file position
2865	Get the content of a log file .
2866	Returns the total number of log lines .
2867	Returns the content of a file .
2868	Pre - dispatch action
2869	Render an array
2870	Get extension status
2871	Get all modules
2872	Initialize the model
2873	Get request filters
2874	Enable module status
2875	Get category category
2876	Convert request timestamps to array
2877	Search group class
2878	Enable FPC debug mode
2879	Enable template hints .
2880	Disable translation .
2881	Get the body of the email
2882	Initialize email
2883	Get request info
2884	Start profiling .
2885	Save profiling information
2886	Called when an action is dispatched .
2887	Registers the layout .
2888	Event handler for debugging
2889	Handles collection load request
2890	Called when a model is loaded
2891	Called when the frontend response is sent .
2892	Check if website is enabled .
2893	Checks if the given block is capturing .
2894	Initialize the query
2895	Send email .
2896	Capture the email
2897	Replace the current profile
2898	Called when a query is ended .
2899	Get all query models
2900	Initialize the object
2901	Set the response info
2902	Downloads a configuration file .
2903	Download a config file .
2904	Sends email address
2905	Add email to profile
2906	Get the content of the mail .
2907	Get the content of a part .
2908	Decode a subject .
2909	Get module version
2910	Execute SQL query
2911	Convert XML to array
2912	Format a number
2913	Format memory size .
2914	Format a stacktrace .
2915	Get the list of files for the layout .
2916	Convert string to type
2917	Checks if a file is writable .
2918	Add a setter .
2919	Update a setter .
2920	Delete a setter
2921	Save the buffer .
2922	Checks if the file is readable .
2923	Get lines from file
2924	Format a setter .
2925	Normalise value .
2926	Loads the current environment .
2927	Reset the content of the file .
2928	Get all keys in the reader
2929	Check if a key exists .
2930	Get a value by key
2931	Write a setter to the file .
2932	Set a key
2933	Delete a setter .
2934	Save the file .
2935	Backup backup file
2936	Get all backups .
2937	Restore the current file .
2938	Delete all backups
2939	Creates a linear unit .
2940	Register a unit .
2941	Returns the unit of the given unit .
2942	Checks if a unit is already registered .
2943	Check if the role has permission with the given permission .
2944	Assign a role .
2945	Remove a role .
2946	Set roles by id
2947	Grant a permission .
2948	Release package .
2949	Dispatch the queue .
2950	Called when the queue is failed .
2951	Parse text .
2952	Prepare template string
2953	Extract data from a template
2954	Finds the template for the given text .
2955	Sets the PHP serial port
2956	Close the device .
2957	Set character length
2958	Set stop bits .
2959	Set flow control mode
2960	Send a message
2961	Read a port
2962	Serializes the serialized message .
2963	Check if the user is authorized
2964	Perform a request .
2965	Builds a request .
2966	Create a new request .
2967	Create a response from the data
2968	Pick metadata .
2969	Get the table gateway gateway .
2970	Send a message to the server .
2971	Process attachments .
2972	Determine the context .
2973	Wrap a closure .
2974	Analyze a closure .
2975	Binds the closure to the closure .
2976	Serialize the closure .
2977	Unserialize a closure
2978	Get license by identifier
2979	Get an exception by identifier .
2980	Adds a resource to the file .
2981	Find the last imported path .
2982	Register a bundle .
2983	Convert absolute path to absolute path .
2984	Returns the next token .
2985	Generate the index view .
2986	Generate form .
2987	Add a resource .
2988	Checks if a resource has a resource .
2989	Set the logger .
2990	Upload a file
2991	Encode a record .
2992	Parse response .
2993	Initialize SMTP
2994	Encode a string
2995	Encode a header .
2996	Set the value of a message
2997	Set the mail address
2998	Set email address
2999	Set email addresses
3000	Reset all recipients .
3001	Set HTML to HTML
3002	Sets the content of the message .
3003	Attach file to smtp
3004	Save the log file
3005	Send ping message
3006	Jump to the user
3007	Set the layout .
3008	Get attribute value
3009	Fetch a template
3010	Set consumer key
3011	Follow a blog .
3012	Unfollow a blog .
3013	Get a comment
3014	Unlike a post
3015	Delete a post .
3016	Rebuild a post .
3017	Edit a post .
3018	Create a post .
3019	Get tagged posts .
3020	Get blog info .
3021	Get avatar avatar
3022	Get the likes of a blog .
3023	Get a list of followers .
3024	Get blog posts .
3025	Perform a POST request .
3026	Parse the response .
3027	Make a request .
3028	Set the consumer
3029	Set the token
3030	Pause a session .
3031	Resume a session .
3032	Get the state of the session .
3033	Get the description of a session .
3034	Returns a list of items for a given item .
3035	Checks if the cache exists .
3036	Persist cache entry
3037	Sets the data in the cache .
3038	Get information about a call .
3039	Checks if the given user is cached .
3040	Delete a call .
3041	Persist the cache entry .
3042	Pack a time line .
3043	Unpack a time line
3044	Encodes data into JSON .
3045	Compiles the assessment items from a delivery .
3046	Save tool states
3047	Get tool states
3048	Initialize the session .
3049	Initializes the compilation directory .
3050	Initializes the storage session .
3051	Retrieve the item index .
3052	Get item index value
3053	Get the category for the given route .
3054	Persist seen category items .
3055	Get the last category output
3056	Persist the last category output .
3057	Check if the current assessment item isAdaptive .
3058	Determine if the adaptive section is adaptive
3059	Select the next item
3060	Returns the current assessment item reference .
3061	Returns the current position of the current route .
3062	Determine if the current section is backward .
3063	Save test results .
3064	Store the result of a Catcher .
3065	Converts a list of variables to a category
3066	Process synchronisation data .
3067	Process the task .
3068	Init service context
3069	Ends the item duration .
3070	Save item state
3071	Save the item response .
3072	Returns the item reference .
3073	Process the timeout .
3074	Get rubric blocks for a given assessment item .
3075	Pause the runner .
3076	Process input data .
3077	Process output messages .
3078	Check if a channel exists .
3079	Returns an array of categories for a specific assessment section .
3080	Check if the assessment section isAdaptive
3081	Build options .
3082	Returns an instance of the engine .
3083	Get AssessmentItemRef by identifier
3084	Get AssessmentItemRefs by identifier
3085	Returns an array of AssessmentItemRefs for a given placeholder .
3086	Get adaptive assessment section info .
3087	Validate the AdaptiveAssessment section .
3088	Checks if the given assessment section isAdaptive .
3089	Adjust the timeout value .
3090	Stores trace variables .
3091	Stores the session data .
3092	Loads the test session .
3093	Process data .
3094	Returns array of available actions .
3095	Resolve action .
3096	Displays the next item .
3097	Get item data .
3098	Returns the state of the given test session .
3099	Returns an array of items .
3100	Get item data .
3101	Get all sub - identifiers of an array .
3102	Get storage instance
3103	Load state from storage
3104	Save current state
3105	Get store id
3106	Get all events .
3107	Returns the index of the item .
3108	Set a category value .
3109	Get category value
3110	Removes a category from the assessment section .
3111	Get storage service .
3112	Persist a test session .
3113	Sets the store id for the test session .
3114	Clears all events .
3115	Store itemHref index .
3116	Sets a category value .
3117	Returns the category value for the given assessment section .
3118	Remove a category from the assessment section .
3119	Create a new TimePoint from an array
3120	Removes the specified tag from the list .
3121	Returns a subset of all points that match the given tag .
3122	Find all points matching the given tag .
3123	Computes the duration of a range .
3124	Fixes the given range .
3125	Creates a new TimePoint with the given timestamp .
3126	Check if the given point is a start point .
3127	Checks if the given point is a end point .
3128	Calculates the duration between two time points .
3129	Load item data
3130	Creates a new service context .
3131	Persist the test session .
3132	Initializes the test session .
3133	Returns the rubrics for the given assessment item .
3134	Returns the item data .
3135	Get item state
3136	Set item state
3137	Parses the item response .
3138	Checks if the response is empty
3139	Store item response .
3140	Checks if the item has a feedback .
3141	Moves an item from the context .
3142	Perform a skip operation .
3143	Close the timeout .
3144	Finish a delivery execution .
3145	Pause the test session .
3146	Resume a test session .
3147	Check if the test session is closed .
3148	Checks if an item is completed .
3149	Returns the public URL for the given item .
3150	Send a comment .
3151	Continues an InteractionInteraction .
3152	Handle a test timeout .
3153	Store a trace variable .
3154	Get a trace variable .
3155	Store an outcome variable .
3156	Create a new outcome variable .
3157	Store a response variable .
3158	Create a response variable
3159	Store variables for the given item .
3160	Store the value of a given item .
3161	Returns the transaction id for the given item .
3162	Assert that the QTIRunnerServiceContext is valid .
3163	Start timer .
3164	Ends a timer .
3165	Switches client store id to session id
3166	Gets the current AssessmentSession .
3167	Checks if the theme is enabled .
3168	Get current theme id
3169	Returns the index file for the item identifier .
3170	Checks if the item index file exists .
3171	Get the map for the given runner .
3172	Update stats .
3173	Returns a list of AssessmentItemRefs for a route item .
3174	Creates a time constraint .
3175	Get item label
3176	Returns the navigation navigator .
3177	Checks if the current section exits .
3178	Returns a list of all the class classes .
3179	Returns the QTI items for the given item .
3180	Determine if the client is a client container .
3181	Returns the maximum time of the current time .
3182	Returns the minimum time of the current time .
3183	Converts a duration to milliseconds .
3184	Serialize the source .
3185	Process a step .
3186	Start a timer .
3187	End a time series .
3188	Get the first timestamp of a tag .
3189	Get last timestamp
3190	Returns the last registered timestamp .
3191	Checks if the given time limit is exceeded .
3192	Save data to storage
3193	Load data from storage .
3194	Get extra time .
3195	Set the consumed extra time .
3196	Get the consumed extra time .
3197	Get the remaining extra time .
3198	Checks that the given timestamp is consistent .
3199	Get the time range for the given tags .
3200	Removes the number of bits from the binary .
3201	Returns a list of items for a given item .
3202	Process CSS style .
3203	Validate CSS property value .
3204	Determine if the given version has been edited .
3205	Get docblock tags .
3206	Parse response headers
3207	Splits a string into chunks
3208	Encode a string
3209	Create OAuth2 access token .
3210	Disable OAuth1 access token
3211	Checks that the given argument is valid .
3212	Load app info from json file
3213	Checks if the given argument is null .
3214	Disable access token .
3215	Get information about the account .
3216	Start chunked upload .
3217	Performs a chunked upload .
3218	Finish a chunked upload .
3219	Get the delta for a given cursor .
3220	Restore a file .
3221	Search file names .
3222	Create shareable link
3223	Creates a temporary link .
3224	Get a thumbnail .
3225	Create a folder
3226	Move a file to a directory
3227	Builds a URL for a GET request .
3228	Perform a GET request .
3229	Converts a string to a quoted string .
3230	Loads a Host object from JSON
3231	Load AuthInfo from JSON file
3232	Determine if the given path is an error .
3233	Set external paths .
3234	Compares two strings .
3235	Returns the number of items .
3236	Get total price attribute
3237	Returns the total amount of total price
3238	Run calculations .
3239	Reset calculations
3240	Set callback callback
3241	Create a seeder .
3242	Returns the display name of the item .
3243	Get shop url
3244	Returns true if the customer has been saved .
3245	Handles a charge .
3246	Callback for callback
3247	Add item to cart
3248	Remove item from cart
3249	Check if a given sku .
3250	Scope scope for current user
3251	Find cart by user
3252	Places an order .
3253	Clear cart items .
3254	Get item from cart
3255	Scope scope for a user
3256	Add route to router
3257	Scope scope for SKU
3258	Scope by user .
3259	Create a transaction .
3260	Process request .
3261	Places an order .
3262	Call the callback .
3263	Format price .
3264	Check if the order is changed .
3265	Removes lines from a string .
3266	Get file path
3267	Open file .
3268	Close the file .
3269	Read lines from file
3270	Append a line to the file .
3271	Write a temporary file to the file
3272	Set configuration .
3273	Get data from database
3274	Set a value to the database .
3275	Delete a key .
3276	Flush the database .
3277	Get the keys from the database .
3278	Get all data from the database
3279	Replace a key in the database
3280	Normalize configuration .
3281	Set directory path
3282	Set the extension .
3283	Set the cache .
3284	Set formatter .
3285	Get a source context
3286	Handles bootstrap .
3287	Get a plugin .
3288	Read data from pending client .
3289	Start the process .
3290	Join the process .
3291	Send a signal to the process .
3292	Build the twitter link .
3293	Add a link to the share .
3294	Build the link .
3295	Get a list of fingers .
3296	Parse DOMDocument array
3297	Determine if the lead is enabled .
3298	Check if file exists
3299	Set the headers .
3300	Perform a POST request
3301	Perform an HTTP request .
3302	Send a JSON request .
3303	Get the HTTP client .
3304	Appends the signature to the request .
3305	Get fixed format
3306	Perform a POST request .
3307	Build request parameters
3308	Generate the signature
3309	Build the signature key .
3310	Get access token
3311	Get Access Token
3312	Get the cache key .
3313	Append the app ID to the app .
3314	Upload an image
3315	Set config value .
3316	Parse a spec string
3317	Push a value
3318	Render the spec .
3319	Sets the type of the query .
3320	Get valid values .
3321	Get suggestions .
3322	Checks if the option is a valid option .
3323	Consume an option token .
3324	Returns the next argument .
3325	Renders an option .
3326	Renders options .
3327	Corrects the product assignment .
3328	Get price configurations .
3329	Get the status of a token .
3330	Create a file from a path
3331	Load a resource from a resource .
3332	Create a new instance from the given content .
3333	Create a group
3334	Initialize a request
3335	Execute curl request
3336	Returns the integration data .
3337	Get input tag
3338	Converts a datetime to a string
3339	Get group groups .
3340	Get files chunks .
3341	Get file list
3342	Get a list of groups .
3343	Create a copy of a file
3344	Process a batch of files .
3345	Process a batch of files .
3346	Performs a HTTP request .
3347	Prepare a request .
3348	Prepare pagination params
3349	Get query string
3350	Get the path for a given type
3351	Set request type
3352	Returns the user agent header .
3353	Update file info
3354	Copy this file to another file .
3355	Get the URL for the current path
3356	Get the path of the image
3357	Get image tag
3358	Resize the image .
3359	Preview a preview .
3360	Add a custom operation .
3361	Checks if the container exists .
3362	Check if the container is loaded .
3363	Load the data from the API .
3364	Flush files .
3365	Sets the postmalink .
3366	Load apache modules .
3367	Prepare an event .
3368	Generate a string from the metadata .
3369	Returns a string representation of a class .
3370	Get class by name
3371	Visit association .
3372	Get form factory .
3373	Displays the index .
3374	Get filename .
3375	Open an image
3376	Create a new Image instance
3377	Send a reminder to the user .
3378	Determine if a link is visible .
3379	Get the default namespace
3380	Get model class
3381	Check if the user has a role
3382	Check if a permission exists .
3383	Authenticate the user .
3384	Returns the current user .
3385	Get user role
3386	Authenticate a user .
3387	Send reset link .
3388	Redirect to the user after confirmation .
3389	Get redirect after registration .
3390	Redirects to the redirect path .
3391	Confirm confirmation .
3392	Resend confirmation confirmation .
3393	Register registration .
3394	Send confirmation to user .
3395	Attempt to attempt to attempt to attempt the user to login .
3396	Create a mail message .
3397	Decode unreserved characters .
3398	Parse a string .
3399	Get a blueprint .
3400	Make a request
3401	Get the value of the given selector .
3402	Apply the result callback to the result callback .
3403	Load from yml file
3404	Lock the command .
3405	Checks if the application is timeout .
3406	Load commands .
3407	Set the lock factory .
3408	Get the lock factory .
3409	Set the lock path .
3410	Run a command .
3411	Format the current time .
3412	Finishes the crawl .
3413	Refresh the fields .
3414	Sets the fields of the model .
3415	Update the fields .
3416	Normalize the fields for the selected fields .
3417	Get the value from the language field .
3418	Register Eloquent .
3419	Instantiate service container .
3420	Deletes the model .
3421	Loads the list of users .
3422	Returns the number of users .
3423	Check if groups are selected
3424	Normalize filter .
3425	Get an item by ID
3426	Sorts the query .
3427	Add a filter .
3428	Returns a paginator .
3429	Checks if the properties are selected .
3430	Store data in cache .
3431	Returns the number of rows in the query .
3432	Normalize fields .
3433	Refresh the fields .
3434	Refreshes the user s groups .
3435	Replaces the group with the given name .
3436	Fetch all properties for the given ID
3437	Refresh the fields .
3438	Fetch all sections
3439	Get the section .
3440	Save property values
3441	Normalize properties
3442	Fetches the given method and returns it .
3443	Returns true if the field has the given offset .
3444	Get field value
3445	Returns the accessor for the given field .
3446	Returns the accessor for the given language field .
3447	Converts the fields to an array .
3448	Get the value of an attribute .
3449	Sets an attribute value .
3450	Get the direct children of this section .
3451	Record a new event .
3452	Returns the aggregate root for the given aggregate id .
3453	Returns the stream name for the given aggregate id .
3454	Creates a new AggregateType instance .
3455	Create a new AggregateType instance
3456	Create a new AggregateType instance
3457	Recursively replay the history .
3458	Register a module .
3459	Add a new route .
3460	Find a route .
3461	Register middleware .
3462	Process a request .
3463	Handle request .
3464	Register a route .
3465	Register post route .
3466	Register a new route .
3467	Register a patch .
3468	Register a route .
3469	Register options .
3470	Register a HEAD route .
3471	Merge config from config
3472	Extract a configuration from a namespace .
3473	Set the value of a key .
3474	Handle the bot .
3475	Get the gateway address .
3476	Perform a request .
3477	Returns a copy of the alert .
3478	Returns a copy of this alert .
3479	Returns a copy of this alert .
3480	Returns a new Alert instance with the specified launch image .
3481	Include configuration file .
3482	Returns a new instance with contentAvailable .
3483	Sets the mutable content .
3484	Returns a new instance with the specified thread id .
3485	Resolve JWT signature generator .
3486	Add default resolver .
3487	Resolve the web token generator .
3488	Resolve the JMSP signature generator .
3489	Create a temporary file .
3490	Returns a new payload with custom data .
3491	Returns a new instance with the given name .
3492	Returns a new instance with the given headers .
3493	Returns a new instance with the given certificate .
3494	Returns a new instance of the request passphrase .
3495	Add visitor visitor .
3496	Send a notification .
3497	Add default visitors .
3498	Creates a new HttpProtocolVisitor .
3499	Create a device .
3500	Returns a new Notification instance with the given apnId .
3501	Returns a new instance with the given collapseId .
3502	Initializes the curl resource .
3503	Prepares a CURL resource for the request .
3504	Create a send notification exception .
3505	Convert APPS to array
3506	Convert alert to array
3507	Compute the diff between two text .
3508	Compute the difference between two characters .
3509	Render a text from an opcode
3510	Converts a value to a database .
3511	Adjust the translation table .
3512	Get insertTranslations element
3513	Publish translations .
3514	Post missing keys .
3515	Returns the current locale .
3516	Set locale .
3517	Determine if the page is unpublished
3518	Set show unpublished
3519	Get the translations .
3520	Returns the value of a given key .
3521	Login a user
3522	Refresh an existing token
3523	Get item by id
3524	Fetch all platforms
3525	Lookup a user by username
3526	Parse a stat item
3527	Fetch the current profile
3528	Get a list of friends
3529	Send unreal client .
3530	Send unreal client .
3531	Send a GET request
3532	Send ftnite POST request
3533	Finds a user by its attribute
3534	Create a new user object
3535	Create a new user object
3536	Updates the current account status .
3537	Gets the groups assigned to the LDAP user .
3538	Query LDAP user object .
3539	Get adldap provider
3540	Returns the sync options for the given option .
3541	Get group assignment options .
3542	Get extension options .
3543	Create example role
3544	Check if a file exists .
3545	Writes the template to a file .
3546	Create a new user .
3547	Boot the application .
3548	Create a new entity .
3549	Register the repository .
3550	Register Emoji parser .
3551	Parse an inline image .
3552	Boot the model .
3553	Set meta data
3554	Get the value of the attribute .
3555	Cast the meta value .
3556	Set meta group .
3557	Set the meta type .
3558	Set meta value .
3559	Mutate value .
3560	Returns the type of the given value .
3561	Returns the mutated type of the given value .
3562	Returns whether the given value is a mutator .
3563	Returns the mutator for the given value .
3564	Cast value to string
3565	Get the attribute .
3566	Set the set attribute .
3567	Convert meta attributes to array .
3568	Removes meta attributes .
3569	Hook for hook hook .
3570	Unset hook hook
3571	Hook for the query .
3572	Set a new attribute .
3573	Set an attribute
3574	Update an attribute .
3575	Deletes an attribute .
3576	Return a copy of the attributes .
3577	Build meta query .
3578	Add meta select .
3579	Join meta query .
3580	Order by meta .
3581	Pluck meta data .
3582	Adds a select clause to the query .
3583	Join meta data .
3584	Adds a query to the query .
3585	Get meta operator .
3586	Unbind numeric values .
3587	Get the meta constraint for the given method .
3588	Get a constraint between two values .
3589	Save meta attributes .
3590	Checks if the given key is allowed
3591	Set meta attributes
3592	Load meta attributes .
3593	Set fake mac address
3594	Get current mac address
3595	Register cpUrlRules rules .
3596	Create table tables .
3597	Create index indexes .
3598	Parses http request .
3599	Handle http request .
3600	Create a HTTP response from an exception .
3601	Collect the exception data .
3602	Determine if the current container is debug .
3603	Create a JsonResponse from an exception .
3604	Handle JSON request .
3605	Checks if the request is available .
3606	Get a http handler
3607	Get table names .
3608	Get resource owner details .
3609	Get user locations
3610	Get device schedule
3611	Get next scheduled event
3612	Set the target temperature
3613	Set target temperature
3614	Set target temperature
3615	Set OEM temperature
3616	Set the fan mode .
3617	Set fan mode
3618	Set fan mode
3619	Cancel fan mode
3620	Sets the fan interval schedule .
3621	Use this API to enable Eco temperature .
3622	Enable Humidityifier .
3623	Converts temperature to temperature
3624	Returns the temperature of the given temperature .
3625	Get all devices .
3626	Get the default serial number
3627	Get device network info
3628	Get CURL certificates
3629	Writes a file to a temporary file .
3630	Validates an array of items .
3631	Collects events .
3632	Get the configuration .
3633	Get pool configuration
3634	List events .
3635	Get the middleware for the request .
3636	Returns the request middleware for the request dispatcher .
3637	Initialize the app .
3638	Show environment info .
3639	Checks if the server is running .
3640	Get all values .
3641	Get input value .
3642	Get an array of values
3643	Remove all values from the request .
3644	Returns an array with the given keys .
3645	Get old value from request
3646	Clean a value .
3647	Process a value .
3648	Register Binput class .
3649	Get the value of a given key .
3650	Get the template path
3651	Calls the template hooks
3652	Parse the template
3653	Render a template
3654	Purge all meta models
3655	Get label text .
3656	Boot the application .
3657	Try to dispatch an event .
3658	Encode the value of the column value .
3659	Get all registered services .
3660	Get filter rule
3661	Add parameters to the query .
3662	Parse the query string .
3663	Get value from service container
3664	Get the value from the given source
3665	Convert an array of parameters to a string .
3666	Converts a parameter to a query string .
3667	Get row from table
3668	Generate the URL for the given filter URL .
3669	Get the current filter url .
3670	Determine the fragment fragments .
3671	Gets the folder URL fragment .
3672	Get the list of page candidates .
3673	Get page id from url
3674	Extract post data .
3675	Collects attribute factories .
3676	Checks if a column exists .
3677	Check if a field exists .
3678	Generate AJAX AJAX .
3679	Build backend modules
3680	Injects child tables into the local menu .
3681	Returns the jump to the page
3682	Returns the filter factory .
3683	Get the filter url builder .
3684	Builds a SQL statement .
3685	Builds a filter rule .
3686	Gets the ANDOR filter for the given operation .
3687	Get the attribute from the filter .
3688	Calculate subfilter .
3689	Creates a button button .
3690	Handle a variant action .
3691	Preset the variant base .
3692	Get breadcrumb .
3693	Create an attribute .
3694	Get breadcrumb .
3695	Get breadcrumb elements .
3696	Extract id from parameter
3697	Check if the model is purged .
3698	Get the view definition .
3699	Parse the listing configuration .
3700	Handle sorting .
3701	Convert a group type .
3702	Get a legend .
3703	Get a property .
3704	Handle duplicates .
3705	Add attribute to meta model .
3706	Gets the meta - frontend filter
3707	Render widget .
3708	Check if the widget is redirect to the page
3709	Get frontend filter options
3710	Get filters .
3711	Generate element element
3712	Generate clear all content elements
3713	Checks if the type is a nested type .
3714	Set attribute types .
3715	Add a known attribute type .
3716	Handle property options .
3717	Create a new column with the given name .
3718	Get meta model from model
3719	Determine if the event should be handled .
3720	Validate input
3721	Handle delete event .
3722	Handle update .
3723	Add meta model names .
3724	Build the cache service .
3725	Builds the picker service .
3726	Creates a new instance from a query builder .
3727	Sanitize a connection .
3728	Try to unserialize a value
3729	Returns an array of all attributes of the attribute .
3730	Returns the list of IDs matching the filter .
3731	Fetch rows from the database
3732	Copy a filter to the filter
3733	Get attribute by name
3734	Save a single column
3735	Saves an attribute to the database .
3736	Update variant attributes .
3737	Create new item
3738	Get the connection .
3739	Save base columns .
3740	Returns all combinations for a given user .
3741	Get label parameters .
3742	Deletes a model item
3743	Set language .
3744	Get meta model .
3745	Fetch model from config
3746	Set base config
3747	Extract sorting from config
3748	Get IDs from filter
3749	Get items from filter
3750	Get filter options
3751	Check if a field is unique
3752	Resets the default value for the given field .
3753	Save an item to the database .
3754	Save a collection of objects
3755	Check if two models are equal
3756	Create a new variant
3757	Decode property value .
3758	Encodes the value of the given widget .
3759	Build the widget .
3760	Creates the conditions for the given palette .
3761	Get a legend .
3762	Get the condition chain .
3763	Get a property from the legend .
3764	Get the condition chain .
3765	Map translations .
3766	Add translation translations for input screen
3767	Get the options for the attribute .
3768	Resolve path .
3769	Collect attribute settings .
3770	Create a new render setting .
3771	Fixes modules .
3772	Build language string .
3773	Builds the meta conditions for a given palette .
3774	Get the names of the factories .
3775	Returns the maximum children of the given condition type .
3776	Runs the template
3777	Get parameter name
3778	Get label .
3779	Get filter options
3780	Get the filtered attribute .
3781	Determine the value of a filter value .
3782	Convert model to label
3783	Get the condition attribute .
3784	Encode the value of a property value .
3785	Update the values for the given properties .
3786	Add an event listener .
3787	Get meta model by id
3788	Calculate conditions .
3789	Returns a set of values for the given value .
3790	Determine the available languages .
3791	Fetch all existing items for a given list .
3792	Get model by id
3793	Checks if the provider has a variation .
3794	Check for all items in the clipboard .
3795	Check if action is empty
3796	Checks if the current model is valid .
3797	Checks if the given model is valid .
3798	Checks if the given model is a valid variable .
3799	Checks if the given model has a variation of the model .
3800	Get meta model .
3801	Get the cache .
3802	Get the palette definition .
3803	Create a property .
3804	Builds a condition .
3805	Generate HTML code
3806	Checks if the column name is changed .
3807	Translate a legend .
3808	Translate a property
3809	Applies the conditions to the given attribute .
3810	Translate the given rows into an array .
3811	Transform a condition .
3812	Transform conditions .
3813	Transforms group sorting .
3814	Inject service containers into data containers .
3815	Process a meta model .
3816	Render form .
3817	Fetch existing attributes .
3818	Generate form fields .
3819	Returns the caption caption .
3820	Performs the insert operation .
3821	Get the uri for the given table .
3822	Purges the cache .
3823	Set page value
3824	Get filter parameters
3825	Compiles the templates .
3826	Checks if the filter is active
3827	Get frontend filter value
3828	Add a URL parameter to the URL .
3829	Builds the URL for the given fragments .
3830	Prepare frontend filter options
3831	Prepare the frontend filter .
3832	Validate widget .
3833	Returns the value of the current language .
3834	Add additional formatters
3835	Prepare the template
3836	Set language strings
3837	Get base definition .
3838	Builds the meta data
3839	Adds the submit element to the panel .
3840	Parse a panel row
3841	Parse panel filter .
3842	Parse the sort element .
3843	Parse panel search .
3844	Updates the jump to jump to the table .
3845	Updates DCA settings .
3846	Changes the meta palettes to the conditions .
3847	Updates the closed meta data .
3848	Performs the upgrade .
3849	Handle the event .
3850	Get service container .
3851	Set limit .
3852	Set sorting .
3853	Override the output format
3854	Set meta model
3855	Set meta tags
3856	Prepare meta model
3857	Prepare the view
3858	Set the filter settings .
3859	Add a filter rule
3860	Get attribute names .
3861	Prepare the collection .
3862	Get output format
3863	Get caption text
3864	Set title and description
3865	Render the item list
3866	Get the basic definition .
3867	Generate the wizard .
3868	Get all configs
3869	Get meta model .
3870	Returns the view for the given identifier .
3871	Returns the language for a single language .
3872	Get the list of links for a given filter .
3873	Get the base URL for the page .
3874	Removes all page details from a page .
3875	Add a list of pages .
3876	Get meta models .
3877	Build the query
3878	Add a child filter .
3879	Add a sub procedure to the filter builder .
3880	Get the jumpTo label
3881	Get page details .
3882	Determines the jump to jump to the page .
3883	Get the backend icon
3884	Create a setting from the database .
3885	Collects rules for a given filter .
3886	Collect rules .
3887	Render the edit setting button .
3888	Get attribute names .
3889	Returns a list of filter settings for the given object .
3890	Builds the filter params for a given element
3891	Load callback .
3892	Get the list of filter parameters
3893	Render edit button .
3894	Get the list of attribute names .
3895	Get meta model .
3896	Returns the list of templates .
3897	Render page picker .
3898	Handle meta change
3899	Sets the data for the given array
3900	Search for a given pattern
3901	Create column .
3902	Delete column .
3903	Rename column name
3904	Get the screen options .
3905	Get property names .
3906	Returns a list of groups .
3907	Builds the entity data .
3908	Set accepted extensions .
3909	Add a path to the pending path
3910	Get the URL for a file
3911	Fetch additional data .
3912	Removes sorting sorting .
3913	Sort files by name
3914	Sort files by name
3915	Sort files by date
3916	Sort a list of files .
3917	Sort the files .
3918	Check if the file is downloaded
3919	Convert UUIDs to meta models
3920	Add file models .
3921	Process a file
3922	Resize image
3923	Get the database connection .
3924	Gets the value options for the given attribute .
3925	Decode property value .
3926	Encodes the value from the widget .
3927	Set the value of the option options .
3928	Returns the options for the given attribute .
3929	Builds the meta data .
3930	Builds a property .
3931	Get a property .
3932	Set label .
3933	Set the description of the property .
3934	Set excluded properties .
3935	Set searchable .
3936	Set widget type .
3937	Set property options .
3938	Sets the explanation .
3939	Set extra attributes
3940	Set empty value .
3941	Returns the maximum children of the given condition type .
3942	Build language array .
3943	Prepares the widget for a language .
3944	Search files .
3945	Load data container .
3946	Load meta model .
3947	Handle non - meta table .
3948	Builds the map .
3949	Build caption caption
3950	Builds a child operation button .
3951	Checks if a value is empty .
3952	Checks if an array is empty
3953	Get the value of an attribute .
3954	Returns a list of variants .
3955	Get variant base
3956	Get variants of this variant .
3957	Save the meta data .
3958	Register assets .
3959	Parses the data into an array .
3960	Parse an attribute .
3961	Returns the variant CSS class .
3962	Create a new meta model .
3963	Checks if the given column is reserved .
3964	Get json file
3965	Authenticate user .
3966	Get input screen
3967	Get meta model by pid
3968	Create an attribute instance .
3969	Delete condition settings .
3970	Convert attribute id to name
3971	Get attribute options .
3972	Decode attribute value .
3973	Encodes the attribute value .
3974	Build the meta data .
3975	Get the data provider definition .
3976	Handle the column name .
3977	Add edit command .
3978	Parse model operations .
3979	Create a command instance .
3980	Get a command instance .
3981	Get the caption caption
3982	Extract user rights .
3983	Build backend menu section .
3984	Add a menu .
3985	Checks if the given route is active .
3986	Returns a list of combinations for the user .
3987	Returns the combination of a table .
3988	Get all children of the input table
3989	Get the input screen
3990	Get input screens
3991	Checks if the given model is valid .
3992	Decode property value .
3993	Encodes the value of the given widget .
3994	Builds the widget .
3995	Replace tags in a string
3996	Jump to the page
3997	Get item list
3998	Returns the value of a specific attribute .
3999	Returns the count for a given type
4000	Load meta model .
4001	Get meta data from table
4002	Get count for a specific filter
4003	Check if item is published
4004	Get meta model name .
4005	Create a meta model instance .
4006	Create a new meta model .
4007	Create meta model .
4008	Collect meta names .
4009	Collect meta information .
4010	Get max pagination links .
4011	Get pagination string
4012	Calculate paginated paginated
4013	Calculates the current pagination .
4014	Get help wizard .
4015	Make sure the field is mandatory
4016	Returns the widget class for the given field .
4017	Handle load callback
4018	Initializes the widget .
4019	Handle save callback
4020	Validate widget
4021	Validate input field
4022	Get help for a widget .
4023	Build the options array
4024	Add a filter group .
4025	Adds a condition to the property .
4026	Convert model to label .
4027	Get label comment .
4028	Returns the label for the given model .
4029	Get label text .
4030	Get label pattern pattern .
4031	Updates the image with disabled .
4032	PreCreate an inverse image .
4033	Add an element to the list
4034	Get the label for a table
4035	Returns a list of templates for a given template .
4036	Fetch all templates from a resource directory
4037	Get all templates for a given folder .
4038	Gets the list of matching ids .
4039	Get the class for the option .
4040	Generate an option
4041	Render model .
4042	Reads the value of the property .
4043	Add additional header fields .
4044	Remove variant attributes .
4045	Decode the value to jump to the browser .
4046	Encodes the value of the jump to the browser .
4047	Builds the widget .
4048	Get filter settings .
4049	Fetch all available input screens
4050	Prepare input screen .
4051	Builds the condition tree .
4052	Fetch the properties for a given input .
4053	Fetches the conditions for the condition .
4054	Fetch group sorting .
4055	Convert a list of properties to an array .
4056	Convert a property to a legend .
4057	Convert a property to a legend
4058	Draw attribute .
4059	Draw legend .
4060	Compares two values .
4061	Returns a string representation of the exception .
4062	Checks if the given array is empty .
4063	Calculates the difference between two arrays .
4064	Calculates the difference between two arrays .
4065	Returns all the attributes of this setting .
4066	Handle the widget .
4067	Get the value of a given name
4068	Configure MetaModelsService .
4069	Handle options .
4070	Get the stylesheets .
4071	Get the javascript files .
4072	Scan files .
4073	Get the user .
4074	Resolve the configuration .
4075	Set table mapping .
4076	Get meta model name
4077	Returns a list of all the combinations of the combination combinations .
4078	Fetch input screen details .
4079	Builds the input screen .
4080	Determine if the input is standalone .
4081	Get the render settings for a given meta model .
4082	Get input screen .
4083	Returns a list of all the input controls .
4084	Returns the parent of the given meta model .
4085	Create a breadcrumb store .
4086	Handle filter parameters .
4087	Transform a DSL term into a string .
4088	Transform a DSL sort to a string .
4089	Build the URL for the index .
4090	Delete a document .
4091	Create the payload for the operation .
4092	Set term .
4093	Add a wildcard
4094	Get query .
4095	Perform a HTTP request
4096	Builds a RangeQuery object
4097	Add a field
4098	Get config value
4099	Set the index
4100	Sets the type of the transport .
4101	Create a new mapping .
4102	Perform a request .
4103	Execute a search query .
4104	Parse a DSN string .
4105	Begin a bulk request .
4106	Commit bulk .
4107	Returns true if the hint is enabled .
4108	Get skin file content
4109	Returns options array
4110	Converts an array to tabs .
4111	Finds the file and line number of lines .
4112	Search for full path
4113	Get information about a block .
4114	Returns true if remote call is enabled .
4115	Get remote call url template
4116	Get the path of a block .
4117	Checks if the block is within the cache .
4118	Get a type by name
4119	Register a type .
4120	Override this method to override a type .
4121	Get a proxy class .
4122	Get proxy file name
4123	Generate proxy classes .
4124	Generate proxy class
4125	Generate method methods
4126	Returns the document namespace for the given document .
4127	New default annotation driver
4128	Loads the metadata for the given class .
4129	Creates an ODM query .
4130	Creates a native query .
4131	Creates a Lucene query .
4132	Clears the document .
4133	Initializes the object .
4134	Encrypt and append a tag
4135	Decrypts a ciphertext with the specified tag .
4136	Get parameters from array
4137	Process headers .
4138	Post a media request .
4139	Get OAuth parameters .
4140	Get request string
4141	Get signature base string
4142	Get oauth string
4143	Returns the headers of the request .
4144	Get a GET request .
4145	Validate credentials .
4146	Get the URL for the request .
4147	Get the response
4148	Returns an array of exceptions .
4149	Build a multipart request .
4150	Read a binary file .
4151	Resets the call state .
4152	Get the OAuth token
4153	Invalidate a token
4154	Get the token credentials .
4155	Build the request header .
4156	Add an interval .
4157	Add cron expression
4158	Runs all jobs .
4159	Removes a job from the queue .
4160	Get login URL .
4161	Modify a user .
4162	Search media .
4163	Make an API call
4164	Set access token
4165	Merges the given scope .
4166	Run a command .
4167	Returns a string representation of the class .
4168	Run the package .
4169	Tokenize package info .
4170	Pretty print packages .
4171	Ask a package key .
4172	Run migration .
4173	Check if there is a migration file .
4174	Build the configuration .
4175	Get service providers .
4176	Get the Facade instance .
4177	Get the migration .
4178	Get the files .
4179	Check if the package exists .
4180	Notify the user .
4181	Get resources .
4182	Creates a new instance of this instance .
4183	Checks if the class contains the given class .
4184	Get file by class
4185	Install service providers .
4186	Search packages .
4187	Publish vendor file .
4188	Boot the password strength .
4189	Dump all constants .
4190	Dump all methods .
4191	Dump method parameters .
4192	Dump PHP doc .
4193	Dump properties .
4194	Generate the magic method info
4195	Returns an abstraction object .
4196	Extracts the details of an event .
4197	Event handler .
4198	Event handler .
4199	Add constants .
4200	Add methods to the class .
4201	Adds the methods to the interface .
4202	Add methods to the class .
4203	Adds properties to the event .
4204	Add properties to properties array
4205	Get the parameters for the given reflection method .
4206	Get property info
4207	Get property info
4208	Checks if an object is excluded .
4209	Get information about a method .
4210	Parse phpDoc param
4211	Returns an array of constants .
4212	Filter constants by level .
4213	Returns the keys of a row .
4214	Convert a row into an array
4215	Returns an array of keys .
4216	Clears all errors .
4217	Remove errors from log
4218	Clear log messages .
4219	Clears the summary .
4220	Get log arguments .
4221	Returns an array of ASTs .
4222	Returns the value of the given key .
4223	Get config value
4224	Handle an exception .
4225	Handles shutdown .
4226	Register the application .
4227	Unregister an error handler .
4228	Build an error .
4229	Generate a hash of error messages
4230	Parse a comment
4231	Finds the inherited doc .
4232	Get comment content
4233	Get the hash of a class
4234	Split a string into an array of parameters
4235	Trims the given description .
4236	Email log message
4237	Get meta values
4238	Checks if there is a log entry
4239	Handle bootstrap .
4240	Event handler .
4241	Event handler .
4242	Event handler .
4243	Handles the shutdown .
4244	Build the error list .
4245	Log php info
4246	Log request .
4247	Log request headers
4248	Event handler .
4249	Process log entry
4250	Get the meta data for a firephp method .
4251	Dump a method table .
4252	Event handler for debugging
4253	Process log entry .
4254	Build report .
4255	Builds the Fatal error .
4256	Builds log output .
4257	Get all errors in category
4258	Add a subscriber interface .
4259	Returns a list of subscribed subscribers .
4260	Returns true if all subscribers are subscribed .
4261	Remove a subscriber interface .
4262	Register a new event .
4263	Unsubscribe an event .
4264	Publish an event .
4265	Sort the list of subscribers .
4266	Registers the stream wrapper .
4267	Close the directory .
4268	Opens a directory
4269	Read directory .
4270	Rewind the current directory .
4271	Rename a file
4272	Close the stream .
4273	Returns true if the stream is closed .
4274	Flush the stream .
4275	Lock the stream .
4276	Set the metadata for a file .
4277	Open a stream .
4278	Read data from stream
4279	Sets the position of the stream .
4280	Returns information about the stream .
4281	Returns the position of the stream .
4282	Truncate stream .
4283	Unlink a file
4284	Get file stat
4285	Process output .
4286	Process log entry .
4287	Get all subscriptions .
4288	Process an error message .
4289	Process a log entry .
4290	Process existing data .
4291	Publish meta data
4292	Get the config value for a given path .
4293	Returns an array of Abstraction .
4294	Returns the type of the given value .
4295	Log alert message .
4296	Asserts a given assertion .
4297	Clear log messages
4298	Count the number of messages .
4299	Reset a counter
4300	End the group end
4301	Log a group summary .
4302	Uncollapse group
4303	Start profiling .
4304	End the profile .
4305	Log a table .
4306	Sets the current time .
4307	Get time end time .
4308	Trace trace
4309	Get a channel
4310	Get all channels .
4311	Output the debug output .
4312	Sets the error handler .
4313	Autoloader class
4314	Add a group to the stack
4315	Get group depth .
4316	Get default services
4317	Get the default arguments .
4318	Set log dest .
4319	Interpolate a message .
4320	Merge two arrays .
4321	Get the value of a given path .
4322	Build an attribute string
4323	Build an HTML tag
4324	Converts a number to bytes .
4325	Returns information about the callable information .
4326	Get the HTTP interface
4327	Check if a value is a list .
4328	Parse attribute string
4329	Generate request id
4330	Serialize log data
4331	Unserialize log
4332	Build an attribute value .
4333	Build attribute value .
4334	Get the current configuration
4335	Event handler .
4336	Close open groups .
4337	Returns the default output as HTML .
4338	Remove groups from log
4339	Set the output of the output class .
4340	Collapse errors .
4341	Ends the profiling .
4342	Start profiling .
4343	Removes stack from stack
4344	Push stack to stack
4345	Returns a list of configs for a given name .
4346	Set config values
4347	Get all configs
4348	Get config keys .
4349	Normalize configuration array
4350	Sets the values of the default values .
4351	Set debug configuration
4352	Configure config
4353	Process log entry .
4354	Sets the file .
4355	Checks if a timestamp is valid .
4356	Dump a method table .
4357	Process log entry
4358	Process a substring .
4359	Add special characters .
4360	Dump a string
4361	Check if given string is UTF - 8 .
4362	Convert a string to a UTF - 8 string
4363	Convert string to UTF - 8 encoding
4364	Sets the current string .
4365	Called when an error is raised
4366	Get backtrace string
4367	Email error message
4368	Returns the value of the given key .
4369	Build a table .
4370	Dump a value to a string
4371	Mark a classname .
4372	Event handler for output
4373	Builds an array of arguments .
4374	Builds a list of channels .
4375	Build group method
4376	Build table footer
4377	Build table header
4378	Build table row
4379	Dump an array .
4380	Removes the visual white space .
4381	Replace whitespace callback .
4382	Process output .
4383	Builds an array of arguments
4384	Dump an array .
4385	Dumps an object .
4386	Dump methods .
4387	Returns the config for the FEES configuration .
4388	Sets the configuration for the given order .
4389	Retrieve payment data
4390	Get XML provider
4391	Returns a list of all config attributes .
4392	Checks if the configuration is valid .
4393	Cancel a payment
4394	Capture the payment .
4395	Returns true if the feature is implemented .
4396	Refund the payment
4397	Returns the form for the redirect response .
4398	Returns the transaction reference .
4399	Save the response data .
4400	Save transaction reference
4401	Translates a payment status .
4402	Get the Stripe provider
4403	Loads related layouts .
4404	Returns the path to the path .
4405	Generate configuration file .
4406	Checks if the request matches the route .
4407	Returns the current menu plugin .
4408	Triggers the admin controller .
4409	Render a template .
4410	Add view parameters .
4411	Add menu plugin .
4412	Get the legacy preference value .
4413	Event handler for exception .
4414	Sets the page layout template .
4415	Modify the tag .
4416	Handles the legacy response .
4417	Display layout layouts .
4418	Creates a new request .
4419	Checks if the user has access to the admin .
4420	Sets the user logged in .
4421	Generate legacy site access .
4422	Executes the admin interface .
4423	Ask the user access to the site .
4424	Executes the installation .
4425	Generate legacy autoloads .
4426	Ask for user data
4427	Ask for choice data
4428	Create a question .
4429	Creates a choice question .
4430	Writes the installation summary .
4431	Write a section .
4432	Get the runner .
4433	Creates a new subscriber .
4434	Call a command .
4435	Creates a QlessException from an error message .
4436	Get config value .
4437	Set config value .
4438	Create a job instance
4439	Unregister signals .
4440	Get the name of a signal .
4441	Get all queues from a topic
4442	Get completed jobs .
4443	Get multiple jobs .
4444	Get failed jobs for a group
4445	Retrieve the failed results .
4446	Get a list of jobs tagged by a tag .
4447	Get jobs from a worker
4448	Put a job .
4449	Pop a job .
4450	Pop a job by its ID .
4451	Create a recurring job .
4452	Get the stats for a given date .
4453	Check if queue is paused .
4454	Register sync event .
4455	Attach an event handler .
4456	Returns the queue for the given event name .
4457	Detach event handler .
4458	Fire event .
4459	Fire a queue event .
4460	Creates a child socket .
4461	Handle child errors .
4462	Reads an error from socket .
4463	Handle process exit status
4464	Perform a child process
4465	Execute a command .
4466	Normalize command arguments .
4467	Reload the cache .
4468	Set priority .
4469	Cancel a job .
4470	Complete the job .
4471	Receives a queue
4472	Retry a message .
4473	Perform heartbeat .
4474	Perform the job .
4475	Fail the job .
4476	Track the track .
4477	Untrack the track .
4478	Get job instance
4479	Add tags .
4480	Sets job data .
4481	Set the interval .
4482	Set backlog .
4483	Receives a queue .
4484	Register a signal handler .
4485	Watch watchdog .
4486	Broadcast a message to a specific platform .
4487	Send a message .
4488	Send a message to the given platform
4489	Register a device .
4490	Create a topic
4491	Register a device .
4492	Broadcast a message .
4493	Set localized text .
4494	Get apns json .
4495	Returns the JSON representation of the message .
4496	Returns the JSON representation of the message .
4497	Returns the JSON representation of the message .
4498	Returns a json string with the given limit .
4499	Merge two arrays .
4500	Returns true if the document matches the selector .
4501	Get elements by class name
4502	Inserts the given node .
4503	Replaces the node with the given replacement .
4504	Returns the item at the given index .
4505	Get a list of all organizations .
4506	Create a new organization .
4507	Called when the user has been created .
4508	Decode a JWT event .
4509	Get tenant context
4510	Sets the user property .
4511	Decode a JWT event .
4512	Handle the kernel view .
4513	Converts the status to an object .
4514	Parse a Yaml string .
4515	Parse a file .
4516	Sets the sort order .
4517	Update parameter value .
4518	Execute the pre - flush event .
4519	Returns the value of a parameter .
4520	Set parameter value
4521	Called when the user is created .
4522	Called when the entity is loaded .
4523	Loads a zone .
4524	Create a zone from a definition .
4525	Creates a zone member from a definition .
4526	Creates a zone member from the given definition .
4527	Persist the entity .
4528	Loads a permission .
4529	Handle request filters .
4530	Set user UUID
4531	Process the loader collection .
4532	Sets the first result of the query .
4533	Get a list of objects for a given task .
4534	Set the candidate group .
4535	PrePersist event .
4536	Set tenant Id .
4537	Persist the entity .
4538	Set tenant id .
4539	Set the Individual UUID .
4540	Get a config value .
4541	Set config value
4542	Called when the entity has been processed .
4543	Add filter constraint .
4544	Handle an exception .
4545	Sets the sortBy field .
4546	Set IncludeAssignedTasks .
4547	Check health status .
4548	Get all statuses
4549	Get stat by alias
4550	Sets the assignee value .
4551	Get a list of models
4552	Check if user exists
4553	Create a new JWTCreated event .
4554	Decode a JWT event .
4555	Add translation to query builder .
4556	Set the organization UUID
4557	Generate unique id .
4558	Generate a new UUID .
4559	Executes the audit .
4560	Translate a model .
4561	Transfer the given model .
4562	Get the properties of a model .
4563	Pre update parameter
4564	Handles kernel exception .
4565	Create a new user .
4566	Returns a list of forms .
4567	Resolve the form .
4568	Returns the parent of the given permission .
4569	Cast an element .
4570	Decrypt entity .
4571	Set anonymous uuid
4572	Set identity uuid
4573	Get the properties of an entity .
4574	Get the properties of a model .
4575	Get count of total number
4576	Get a resource by ID .
4577	Get a resource object
4578	Start a resource .
4579	Get start form
4580	Encrypt a model .
4581	Get the properties of the given model .
4582	Called when the user has been created .
4583	Decode a JWT event .
4584	Set the JWT property .
4585	Decode a JWT event .
4586	Returns the signature of the request .
4587	Set staffUuid
4588	Set maximum results .
4589	Sets the result of the query .
4590	Check if a form exists
4591	Set owner uuid
4592	Submit a variable .
4593	Replace all occurrences of a string .
4594	Called when the entity is encrypted .
4595	Get permissions for a user .
4596	Get list of objects
4597	Sets the deserialize value .
4598	Generate the identity .
4599	Handle the request .
4600	Translate the entity .
4601	Remove all permissions .
4602	Encrypt data .
4603	Decrypt data
4604	Parse fixtures files .
4605	Set Entity UUID
4606	Create a new app .
4607	Get all statuses .
4608	Create a new status
4609	Register MultiSelect plugin
4610	Set geo coordinates
4611	Get the image
4612	Prepare the command .
4613	Set a scalar value .
4614	Set the range value .
4615	Build cluster .
4616	Validate configuration .
4617	Build a list of nodes .
4618	Checks if the given object is required .
4619	Creates a new instance from a location string .
4620	Build an object
4621	Build a JSON object
4622	Pick a node .
4623	Execute a command .
4624	Pick a new node .
4625	Prepare the connection .
4626	Create index query path
4627	Prepare request data
4628	Prepare the request URL
4629	Prepare request parameters
4630	Prepare request headers
4631	Prepare request method
4632	Callback for response headers
4633	Get a header value .
4634	Get the attachments .
4635	Attaches mail listeners .
4636	Send an email
4637	Create a new mail event .
4638	Builds a MIME message .
4639	Attach attachments .
4640	Creates a view plugin manager .
4641	Build callback .
4642	Get project name
4643	Start the build .
4644	Stop the service
4645	Sets a list of dimensions .
4646	Computes the positions of the matrix .
4647	Copy file to target file .
4648	Get config value from config
4649	Get services .
4650	Parse environment variable .
4651	Clean all jobs .
4652	Remove all jobs .
4653	Returns a list of jobs that have been removed .
4654	Get jobs from a project
4655	Get job from image
4656	Create a new image
4657	Runs a command .
4658	Get Travis CI build strategy .
4659	Get chain build strategy .
4660	Get console logger
4661	Send message to queue
4662	Sends the email .
4663	Set SMTP parameters
4664	Sets the dynamic content of a string .
4665	Create a new message
4666	Configure the configuration .
4667	Render the view .
4668	Generate the class .
4669	Initialize the class .
4670	Writes the autoloader template .
4671	Add a block to the body
4672	Set paths .
4673	Get template file .
4674	Add a callback .
4675	Add a string to the view
4676	Render view .
4677	Renders the rendered view .
4678	Render a template file .
4679	Set template data
4680	Render the template .
4681	Start timer .
4682	Format a time .
4683	Stop timer .
4684	Set column normalization .
4685	Select the query .
4686	Add a select expression .
4687	Set where clause .
4688	Adds a condition to the query .
4689	Set group by expression
4690	Add a group by expression .
4691	Set the WHERE clause .
4692	Adds a condition to the query .
4693	Sets the order by expression .
4694	Add an ORDER BY clause .
4695	Set limit by limit
4696	Get token from session
4697	Validate session data
4698	Compare two hashes
4699	Return information about the error message .
4700	Handle input .
4701	Create ciconia .
4702	Run command .
4703	Lint the given content .
4704	Get an object by its name .
4705	Returns a collection of objects .
4706	Iterate over all objects .
4707	Process multiple words .
4708	Initialize Markdown .
4709	Initialize the text .
4710	Detach the given text .
4711	Wraps the end of the text .
4712	Escape html .
4713	Replace the text with the given pattern .
4714	Replace a string with a string
4715	Split the text into a collection .
4716	Add a callback to the event .
4717	Emit an event
4718	Process standard URL .
4719	Process block tags .
4720	Register a new text
4721	Process list items .
4722	Set text .
4723	Set attribute value
4724	Render the tag .
4725	Add a rule
4726	Returns the plural form for a singular form .
4727	Returns the singular value for the given plural .
4728	Sets the cache .
4729	Checks if a word is singular .
4730	Transcode a string
4731	Convert unicode string to UTF - 8 .
4732	Set the expiration time .
4733	Sets the session cookie
4734	Write data to the session
4735	Regenerates the session id .
4736	Processes messages for messages .
4737	Send an exception .
4738	Called when an exception occurred .
4739	Clears the temporary directory
4740	Clear a file
4741	Creates the probes for the given name .
4742	Checks if the review option is valid .
4743	Validate optin
4744	Checks if the review is valid
4745	Checks if the review is valid .
4746	Determine if the review is active .
4747	Lists all plans .
4748	Get plan .
4749	Get addons for a plan .
4750	Filter plans .
4751	Get price by plan code
4752	Sends the request to the form
4753	Get contact form
4754	Start profiling .
4755	Stop profiling .
4756	Transform a value .
4757	Transform an iterable .
4758	Transform cache annotation .
4759	Transform template .
4760	Update stats .
4761	Flush the queue .
4762	Send data to UDP
4763	Create user .
4764	Validate delivery address
4765	Validate registration option
4766	Validate invoice address
4767	Convert XML node to PHP object
4768	Convert PHP object to DOM
4769	Run the console .
4770	Render widget .
4771	Set status of widget
4772	Update widget config
4773	Order a widget .
4774	Build a list of widgets .
4775	Load user config .
4776	Render widgets .
4777	Get the output of the item .
4778	Add widget .
4779	Remove a widget .
4780	Clears the widget cache .
4781	Add widget config .
4782	Remove widget configuration .
4783	Get module .
4784	Handle a message .
4785	Returns true if the row exists .
4786	Returns the value of a row
4787	Set the value of a row
4788	Insert data into database
4789	Updates the given data .
4790	Insert a new insert into the database .
4791	Deletes the table .
4792	Sets the select query
4793	Sets the order of rows .
4794	Adds a group to the query .
4795	Gets the aggregation
4796	Execute the query .
4797	Fetches a single column
4798	Get a single row by key
4799	Execute query
4800	Adds a column to the query .
4801	Inject special bindings .
4802	Locates a directory .
4803	Renders a rich text .
4804	Get template path .
4805	Returns the index number of free index .
4806	Process a member variable .
4807	Schedule an event .
4808	Unschedule a specific event
4809	Deactivate the site .
4810	Checks if cron is scheduled
4811	Creates a new Expression .
4812	Add a context value .
4813	Get a value from storage
4814	Create a row from a filepath .
4815	Returns an XML representation of this collection .
4816	Append a single row to the collection .
4817	Inserts a row to the collection .
4818	Add a field to the collection
4819	Returns an iterator over the collection .
4820	Add a field
4821	Get the value of a field .
4822	Sets a field .
4823	Remove a field .
4824	Remove a value from the row
4825	Replace the value of a field with the given value .
4826	Returns the XML representation of this row .
4827	Get a single account
4828	Create a new bill .
4829	Cancel a subscription .
4830	Get a single account
4831	Perform a retry operation .
4832	Get the payout for a bill .
4833	Get authorization URL .
4834	Fetch access token
4835	Get a merchant .
4836	Creates a new payment .
4837	Confirm a resource .
4838	Creates a new limit URL
4839	Perform a request .
4840	Validate webhook .
4841	Fetch a subresource
4842	Generate query string
4843	Sort two arrays .
4844	Convert a string to singularize
4845	Calls the API call
4846	Register aliases .
4847	Unregister autoloader .
4848	Returns the destinations for a given file path .
4849	Create a driver .
4850	Prepares the counter for the given value .
4851	Applies the id to the given row .
4852	Get driver driver .
4853	Get the real rows of the current table .
4854	Get profiling time .
4855	Log a message .
4856	Set session params
4857	Get session params
4858	Get pagination list
4859	Get the list of neighbors for the given id
4860	Push a job .
4861	Push a job to the queue
4862	Create an envelope .
4863	Retry a job .
4864	Pop the queue .
4865	List jobs .
4866	Delete a job .
4867	Flush a job .
4868	Parse the given options .
4869	Create a DateFormat instance
4870	Convert entity to string
4871	Set the event prototype .
4872	Trigger all registered dependencies .
4873	Initializes the buttons .
4874	Set form id
4875	Get meta data .
4876	Performs a vote on the given object .
4877	Creates a new listener instance .
4878	Set user .
4879	Get the size of the file .
4880	Gets the resource .
4881	Returns the content of the file .
4882	Get permissions .
4883	Generate public alias .
4884	Add dependencies .
4885	Set exclude methods
4886	Get a plugin instance
4887	Create a new entity .
4888	Displays a page .
4889	View action .
4890	Renders a page .
4891	Get target object
4892	Get the generator .
4893	Compares two arrays .
4894	End the capture .
4895	Renders the HTML tag .
4896	Starts the capture .
4897	Get the config directory .
4898	Check the cache .
4899	Setup CLI environment variables
4900	Load the dotenv .
4901	Load configuration .
4902	Get docker environment variables
4903	Creates a new Selector
4904	Creates the options for the given node .
4905	Get application by key
4906	Shows the content model .
4907	Event handler .
4908	Renders a summary form .
4909	Renders a summary .
4910	Renders the summary .
4911	Injects all registered pages .
4912	Set variables .
4913	Add a dependency .
4914	Add a collection of entities .
4915	Add an array .
4916	Set the value of the field .
4917	Sets the parameters .
4918	Set parameter value
4919	Attaches the input filter .
4920	Set a tab .
4921	Set the current region
4922	Removes a region from the matrix .
4923	Remove a type from the matrix
4924	Add a new class
4925	Returns all the types of a given region .
4926	Returns a list of all the regions .
4927	Set listeners .
4928	Sets a listener .
4929	Attach listener to events
4930	Remove all listeners .
4931	Updates the values .
4932	Render the notification .
4933	Load entities .
4934	Deletes an entity .
4935	Trigger an event .
4936	Returns an array of entities .
4937	Create nested options
4938	Returns the options for the given option .
4939	Set allowed types .
4940	Set the value of the element .
4941	Get allowed types .
4942	Check if file count is valid
4943	Add base fieldset
4944	Grant a resource .
4945	Revokes a resource .
4946	Build the list of users .
4947	Checks if the given permission is valid .
4948	Finds all drafts by the given criteria .
4949	Creates a query builder .
4950	Create a draft .
4951	Returns the target class name .
4952	Checks if the rating value is valid .
4953	Call the given method .
4954	Initialize the headscript
4955	Listen to the renderer .
4956	Proxy to the object
4957	OnFlush event .
4958	Attach the template to the event manager .
4959	Remove all listeners .
4960	Renders a form .
4961	Set form .
4962	Add a view model .
4963	Add a view template
4964	Add view variables .
4965	Get all files from the request .
4966	Get all headers from the request .
4967	Get data from POST request
4968	Get query parameters
4969	Get parameters from event
4970	Process the event .
4971	Convert a content item to another
4972	Flattens a tree .
4973	Prepare the hydrate data .
4974	Hydrate a node .
4975	Finds a node by its ID .
4976	Creates a new module instance .
4977	Sends the given message .
4978	Filter the given value .
4979	Get the form for a given form .
4980	Convert the given value to a MongoDate object .
4981	Convert a value to PHP DateTime
4982	Set options .
4983	Returns an iterator for the current form .
4984	Set the params
4985	Sets a single parameter .
4986	Execute action .
4987	Set form .
4988	Set form fields .
4989	Enable form .
4990	Disable form .
4991	Get entity by key
4992	Map entity .
4993	Get active form
4994	Returns the previous form of the active form .
4995	Returns the next active form .
4996	Get column map
4997	Set search params
4998	Vote for scheduled content .
4999	Fixes one or more content items .
5000	Remove a menu item
5001	Remove a tab .
5002	Remove empty groups .
5003	Get the configuration for the given service .
5004	Create event manager instance .
5005	Attach listeners .
5006	Normalize listener options .
5007	Initialize status .
5008	Trigger the event .
5009	Set the subject .
5010	Get permissions .
5011	Get the logger instance .
5012	Injects the logger .
5013	Attach events to listeners .
5014	Log a bootstrap event .
5015	Log a finish event .
5016	Log a job .
5017	Log a job .
5018	Check if field is enabled .
5019	Get field options
5020	Get field flags .
5021	Returns the input specification for a field .
5022	Copy an array of values to the target array .
5023	Returns whether or not the selected items are allowed .
5024	Find a leaf node .
5025	Render the dropzone .
5026	Get custom configuration options .
5027	Returns the template for the given page .
5028	Decorate class metadata .
5029	Finds a page by its ID .
5030	Find page by conditions
5031	Sets the loaded page .
5032	Get the current page .
5033	Extract data from a file
5034	Hydrate a single entity .
5035	Set the email address .
5036	Display the dashboard .
5037	Set images .
5038	Get image by key
5039	Set an image
5040	Set permissions .
5041	On bootstrap .
5042	Set notification listener .
5043	Add a notification .
5044	Dispatches the current route .
5045	Set paginator .
5046	Add a form to the stack .
5047	Returns the result of the query .
5048	Call a plugin .
5049	Checks if the entity is set .
5050	Trigger an event .
5051	Trigger a callback until a given event is fired .
5052	Get the content type .
5053	Set the response .
5054	Initialize frontend
5055	Get entity class name
5056	Attach events to the dispatcher .
5057	Get controller class name .
5058	Generate badge .
5059	Generate a badge from a URI .
5060	Creates a new instance from a URI .
5061	Calculate width
5062	Returns the output of the curl .
5063	Outputs JSON data .
5064	Execute curl request
5065	Returns information about the current request .
5066	Initialize curl .
5067	Sets an option .
5068	Set option value
5069	Returns a CurlMultiInfoInterface .
5070	Determine header tags .
5071	Traverse header tags .
5072	Get html menu .
5073	Create controller .
5074	Set output format
5075	Write a log line
5076	Get all items
5077	Returns the id of the item
5078	Get a list of items
5079	Perform POST request
5080	Create a new item
5081	Updates the resource .
5082	Delete a resource
5083	Lookup resource
5084	Validate user input
5085	Builds the URL for the page
5086	Start a transaction .
5087	Commit a transaction .
5088	Returns a map of values for a given key .
5089	Get a row from the query result .
5090	Execute a file .
5091	Execute a sub query .
5092	Create a new table .
5093	Rotate a table
5094	Execute a multi - select statement .
5095	Get default parts .
5096	Check if the query exists .
5097	Append values to the array .
5098	Appends a list of values to the command .
5099	Insert a table into a table .
5100	Add values to the list
5101	Adds an expression expression expression .
5102	Adds a SELECT statement .
5103	Appends a SET clause .
5104	Execute the query .
5105	Adds a limit to the query
5106	Set a SET statement
5107	Create a new connector
5108	Append the DESC column
5109	Set the order by the given column .
5110	Append a bind to the query .
5111	Append a part .
5112	Set a part .
5113	Write a QTime
5114	Convert a string to a string
5115	Submit an article
5116	Submit an attachment .
5117	Delete an article
5118	Delete an attachment
5119	Assign options .
5120	Perform a request .
5121	Send a request .
5122	Set the authorization header .
5123	Get attachment endpoint .
5124	Cast an array to an array
5125	Serve the dispatcher .
5126	Initialize the container .
5127	Read QTime .
5128	Read a QDateTime .
5129	Convert string to UTF - 8 encoding
5130	Returns a new instance with the given string .
5131	Filter the port .
5132	Checks if the port is standard .
5133	Creates a new URI .
5134	Create a new Uri .
5135	Extract records from a collection of resources .
5136	Handle shutdown shutdown .
5137	Handle an error .
5138	Handle exception .
5139	Add middleware .
5140	Add a route to the router .
5141	Run the application .
5142	Process the request .
5143	Create a photo
5144	Create a photo .
5145	Deletes all emails after scenario .
5146	Access the inbox for a given address
5147	Get the opened email .
5148	Get the most recent email .
5149	Get full email
5150	Get email recipients .
5151	Returns the text after the given string .
5152	Sort emails by creation date
5153	Add a configuration .
5154	Configure the configuration .
5155	Set configuration .
5156	Returns the filename for the given name .
5157	Checks if the given route is valid .
5158	Create a new Gallery
5159	Create a Gallery object
5160	Get attachment by field
5161	Attach an item to the model .
5162	Attach a gallery .
5163	Serialize entity .
5164	Send email .
5165	Render the template .
5166	Filter a URI instance .
5167	Filter a date instance
5168	Converts non - ASCII characters to a string .
5169	Gets the type of a variant .
5170	Get name by type
5171	Get available ratios .
5172	Set the encoder .
5173	Creates a new Article .
5174	Get the value of a property .
5175	Set a property .
5176	Add a new value to the collection .
5177	Creates a new collection .
5178	Filters the collection of properties .
5179	Add a new property
5180	Adds an array to the array .
5181	Append property to array
5182	Fill the source .
5183	Parse a single article .
5184	Lookup articles in an array .
5185	Add attachment to article
5186	Create an attachment object .
5187	Create a photo .
5188	Create a new Page
5189	Create a video .
5190	Filter a string
5191	Handle a string .
5192	Add a new route .
5193	Dispatch the request .
5194	Add routes .
5195	Get the result of a method .
5196	Add a search result .
5197	Get the version of the application .
5198	Save the message .
5199	Validate options .
5200	Set options .
5201	Build the connection options
5202	Open the AMQP connection .
5203	Closes the AMQP connection .
5204	Check if the current URL is active .
5205	Checks if the current URL matches the given string .
5206	Checks if all routes are active .
5207	Checks if all URLs are active .
5208	Parses the given node .
5209	Convert statements to string .
5210	Create a new Zephir instance .
5211	Convert a node to a string .
5212	Get a constant by name .
5213	Get a binding .
5214	Find a binding .
5215	Get the binding for the given class .
5216	Create a new instance of the given class .
5217	Get the bindings for the given class .
5218	Get the hostname .
5219	Cast a predicate to a predicate .
5220	Returns true if the given path contains the given path .
5221	Gets the source pathes .
5222	Checks if a property exists .
5223	Creates a new instance of the given value .
5224	Returns an instance of the injection provider .
5225	Resolve the bindings .
5226	Checks if the given type is a type mismatch .
5227	Bind a list .
5228	Creates a new injector .
5229	Returns the enum value for a given name .
5230	Returns an instance of the enum instance .
5231	Returns the values of the enum .
5232	Checks if two objects are equal .
5233	Handle an exception .
5234	Add an entry to the container .
5235	Add an entry to the registry .
5236	Returns a new instance of the class
5237	Get injection values for a method .
5238	Get the name of a method binding .
5239	Returns the type of the given parameter .
5240	Log an exception .
5241	Format exception fields .
5242	Get autoloads .
5243	Transforms the given path to a file .
5244	Prefix namespace .
5245	Replace a file with replacement .
5246	Get the contents of a file .
5247	Get all models .
5248	Find model by id
5249	Save a child .
5250	Save the record .
5251	Deletes the database .
5252	Find a model by ID
5253	Find model by id
5254	Destroy a model
5255	Make pagination .
5256	Sets the parent model .
5257	Search for entities .
5258	Get a collection of models .
5259	Get all documents .
5260	Set options .
5261	Merges the query .
5262	Merges two queries .
5263	Set fields .
5264	Put a model instance into the cache .
5265	Get the cached attributes for the given key .
5266	Merge two models .
5267	Escapes a value .
5268	Escapes a string .
5269	Translate a select statement .
5270	Translate update statement .
5271	Translate delete statement .
5272	Translate ORDER BY clause .
5273	Returns a QueryBuilder instance
5274	Adds a group to the query .
5275	Adds a WHERE clause .
5276	Sets the ORDER BY clause .
5277	Adds a WHERE clause .
5278	Add OR WHERE clause
5279	Generate a WHERE clause .
5280	Select a select statement .
5281	Adds a function to the query .
5282	Get current value
5283	Insert data into database
5284	Set limit
5285	Set page number
5286	Reset the query .
5287	Perform a request
5288	Get request method name
5289	Perform a POST request .
5290	Perform a curl request
5291	Detects a language .
5292	Build Gravatar URL
5293	Generate icon font .
5294	Execute the icon .
5295	Generate SVG files .
5296	Set font options
5297	Get options from XML document
5298	Add a glyph .
5299	Get glyphs
5300	Get glyph names .
5301	Returns the CSS for the icon .
5302	Converts a string to a hexadecimal string .
5303	Converts a hexadecimal character to unicode .
5304	Get the path of the path .
5305	Get the path part of the XML element .
5306	Transform a path to a path
5307	Get path from polygon
5308	Get path from rect
5309	Get path from circle
5310	Get path from ellipse
5311	Generate HTML file .
5312	Generate HTML from an icon file .
5313	Generate HTML for an icon
5314	Generates the codes .
5315	Generate blocks .
5316	Convert the collection to a collection
5317	Runs the process .
5318	Wait for exit
5319	Checks if the process exits .
5320	Wait for child process
5321	Removes the file .
5322	Lock the given callable .
5323	Register a signal handler .
5324	Dispatch signal handlers .
5325	Lock the given task .
5326	Begin a profile .
5327	End the profiler .
5328	Get cpu info by lscpu
5329	Push data to the parser
5330	Get emoji pattern
5331	Get emoji code list
5332	Generate a random string
5333	Sets the cookie
5334	Sign a request .
5335	Generates a SHA - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1
5336	Encode parameters .
5337	Get API endpoint
5338	Builds a SOAP client .
5339	Set mode .
5340	Set balancing mode
5341	Call a soap client
5342	Create a soap client
5343	Builds a soap client .
5344	Create a new SOAP client .
5345	Request access .
5346	Requests remote hosts .
5347	Revert a snapshot to another VPS
5348	Install a virtual system .
5349	Install the operating system .
5350	Set mail box password
5351	Set database password .
5352	Returns a list of supported namespaces .
5353	Get supported authentication .
5354	Get authentication data .
5355	Guess the class from the given operation .
5356	Parse OpenAPI spec .
5357	Generate query parameters .
5358	Generate parameters .
5359	Create url statements .
5360	Create body statements .
5361	Create header statements .
5362	Create a context from the registry .
5363	Generate client files .
5364	Fixes the configuration .
5365	Paint a test .
5366	Paint a failure .
5367	Paint an exception .
5368	Returns the content of the file .
5369	Checks if a string is ASCII .
5370	Add a key to the collection
5371	Attach an attachment .
5372	Merge the query into the request .
5373	Get a value from the request .
5374	Create a new tag .
5375	Create an input tag .
5376	Converts keys to lowercase
5377	Get attribute value
5378	Check if the column is enabled .
5379	Wrap a text
5380	Set the value of the option
5381	Returns the value of the choice .
5382	Set the value of the selected options
5383	Checks if the value is a valid value .
5384	Sets the value of the attribute .
5385	Checks if the widget is a id
5386	Check if a label is a label
5387	Set the value of the widget
5388	Checks if the given values are valid .
5389	Set the value of the widget
5390	Checks if the value is a valid value .
5391	Returns the value of the widget
5392	Paints the given message .
5393	Paint a failure .
5394	Paint an error .
5395	Paint an exception .
5396	Paint the skipped element .
5397	Paints a message .
5398	Paint a signal .
5399	Set host name
5400	Truncate host name
5401	Check if path is valid
5402	Checks if the current token is expired .
5403	Fix path .
5404	Restart session .
5405	Age the cookies in the cookie .
5406	Finds the first matched cookie
5407	Get cookie value
5408	Checks if the cookie matches the given cookie .
5409	Returns a list of cookie pairs .
5410	Close the stream .
5411	Write message to socket
5412	Reads data from the socket .
5413	Create a new socket .
5414	Get the HTTP request string .
5415	Fetch the response .
5416	Send request to socket .
5417	Creates an HTTP response .
5418	Write cookies to jar
5419	Parse HTTP header line .
5420	Parse a cookie line .
5421	Parses a raw HTTP header .
5422	Read all packets .
5423	Invokes the given method .
5424	Expect exception .
5425	Checks if the given exception is expected .
5426	Convert an exception to an Expectation .
5427	Returns the interfaces of the interface .
5428	Returns an array of all interfaces of the interface .
5429	Get the parent class
5430	Checks if the interface is a final class .
5431	Returns the parents of the given interfaces .
5432	Checks if an interface is abstract .
5433	Checks if the given interface is abstract .
5434	Checks if a method is static .
5435	Get the signature of a method .
5436	Get the signature of a method .
5437	Add a pattern .
5438	Returns true if the given subject matches the pattern .
5439	Add a pattern .
5440	Add a pattern pattern to the parser .
5441	Parses a string .
5442	Dispatch tokens .
5443	Invokes parser .
5444	Reduce the raw string .
5445	Add whitespace .
5446	Add tag tokens .
5447	Add attribute tokens .
5448	Accepts a token .
5449	Accepts an end token .
5450	Accept an attribute token
5451	Parse the response .
5452	Start a tag .
5453	Accepts a tag .
5454	Checks if the given name is a named tag .
5455	Add content to the tag
5456	Add content to open tags
5457	Add options to open tags
5458	Open a tag
5459	Accept a tag .
5460	Accepts the label end of the label .
5461	Called when the page ends .
5462	Stretch the path to the given URL .
5463	Get common path
5464	Checks if the given URL is within the given URL .
5465	Add a realm
5466	Set the identity for a realm
5467	Find realm from url
5468	Add HTTP headers .
5469	Overridden to override the error message .
5470	Describes a pattern match .
5471	Get a property from an object
5472	Get private property name from object
5473	Check if the widget matches the given label .
5474	Create an action .
5475	Get the action .
5476	Encodes the widgets .
5477	Add a widget .
5478	Set widget .
5479	Add a radio button
5480	Add a checkbox
5481	Returns the value of the selected widget .
5482	Sets the value of the widget .
5483	Attach a label to the widget .
5484	Checks if the given selector matches the given selector .
5485	Checks if the image matches the given selector .
5486	Submit button .
5487	Submit image .
5488	Encodes the request .
5489	Parse arguments .
5490	Add item to array
5491	Returns the difference between two parameters .
5492	Render arguments .
5493	Add an expectation .
5494	Find the first action .
5495	Find the first slot in the map
5496	Register a new signature
5497	Registers an action at the given step .
5498	Expect arguments .
5499	Respond to action
5500	Replace wildcards .
5501	Checks if arguments is an array .
5502	Throw an exception if no method exists .
5503	Add a call .
5504	Get call count
5505	Set the value of a method .
5506	Sets the value at the specified method .
5507	Sets a value by value .
5508	Sets a method by reference .
5509	Expect arguments .
5510	Sets expectations for a given method .
5511	Sets the expected call count .
5512	Set the maximum call count .
5513	Sets the minimum call count for the given method .
5514	Expect one or more arguments .
5515	Checks if a method is at least one of the given method .
5516	Register an error on the given method .
5517	Register an error at the given time .
5518	Invokes the given method .
5519	Execute a call .
5520	Checks if the given method is expected .
5521	Generate a mock instance
5522	Generate mock code
5523	Generate a subclass
5524	Generate a partial mock .
5525	Create the code for the given methods .
5526	Create the code for a subclass .
5527	Creates a new mock instance .
5528	Create the code for the given methods .
5529	Chain methods
5530	Generate mock expectations
5531	Builds a chain of exceptions .
5532	Creates the code for overrides .
5533	Draw a rectangle .
5534	Renders the results .
5535	Divide map nodes .
5536	Add a frame
5537	Set a frame
5538	Gets the list of frames for this frame .
5539	Get public name from index
5540	Set the frame focus by index .
5541	Set the frame focus .
5542	Clears the frame focus .
5543	Get all frames
5544	Returns the raw content of this frame .
5545	Returns the text of the current frame .
5546	Returns the transport error message .
5547	Returns the current frame .
5548	Get the URL for this frame .
5549	Get the base URL of the frame .
5550	Get request data
5551	Get the mime type
5552	Get the response code
5553	Get the current request .
5554	Returns the headers .
5555	Returns the URLs of this frame .
5556	Get url by id
5557	Tags the URLs with the given frame .
5558	Finds the form for the given element .
5559	Find the form in the given frame .
5560	Record a URL entry .
5561	Get parser .
5562	Parses a response from a response .
5563	Loads a page
5564	Load a frame
5565	Performs a HEAD request .
5566	Get the content of a given URL .
5567	Send a POST request .
5568	Upload a URL .
5569	Delete a file
5570	Retrieve the current page
5571	Retrieve the next request .
5572	Authenticate a user .
5573	Set a select field
5574	Click submit button .
5575	Click submit button by name
5576	Click submit button .
5577	Click image .
5578	Click image by name
5579	Click image by id
5580	Submit form .
5581	Get link by label
5582	Click a link
5583	Click a link by id
5584	Click a label
5585	Check if a label is clickable
5586	Restart session .
5587	Get cookies
5588	Set cookies
5589	Get the base cookie value .
5590	Sets the identity for the given realm .
5591	Fetch a response from a URL .
5592	Fetches the given URL and returns it .
5593	Fetch data from a URL .
5594	Create a new HTTP request .
5595	Create a simple route .
5596	Invokes the given method .
5597	Create an error queue
5598	Add a new error .
5599	Triggers the test .
5600	Converts a severity to a string .
5601	Paint the given message .
5602	Paint the error message .
5603	Paint an exception .
5604	Paint the method start
5605	Paint the end of the method .
5606	Paint the group start
5607	Paint the end of the group
5608	Executes the given method .
5609	Paints a group .
5610	Paint a test case .
5611	Paint the method start .
5612	Paint the assertion .
5613	Paint an assertion .
5614	Paints the method end .
5615	Paints the group .
5616	Compare two nodes .
5617	Returns the total size of this node .
5618	Prints the header
5619	Renders a failure .
5620	Removes the coordinates from the URL .
5621	Removes the scheme from the URL .
5622	Chompress a path
5623	Parse the request .
5624	Set coordinates
5625	Returns the encoded request string .
5626	Add a request parameter
5627	Returns a string representation of the request .
5628	Make absolute path .
5629	Extract absolute path .
5630	Returns the identity of the user .
5631	Paint the footer .
5632	Remove trailing trailing slash .
5633	Collect all files in a directory
5634	Handle a test test .
5635	Paint an exception .
5636	Paint a failure
5637	Paint an error
5638	Checks if a test is invoked .
5639	Paint the group start .
5640	Paints the end of the group .
5641	Paint a test line .
5642	Paint the end of a test .
5643	Make sure all reporters are ready .
5644	Returns true if the report has status
5645	Checks if a test case is invoked .
5646	Creates an invoker .
5647	Renders the test end of a test .
5648	Renders the report end
5649	Assign value to array
5650	Parse the given arguments .
5651	Add an explanation .
5652	Renders the overview .
5653	Returns the longest flag of the given array .
5654	Render a set of flags .
5655	Parse a HTML page .
5656	Recursively walk nodes .
5657	Create empty form .
5658	Add widget to form
5659	Index widget by id
5660	Collect select options .
5661	Get attributes from a node
5662	Merges an attribute into an array .
5663	Decode a quoted string .
5664	Collect frames .
5665	Get inner HTML from node
5666	Attach labels to widgets
5667	Returns the type of the given value .
5668	Describes the difference between two objects .
5669	Clips a string .
5670	Describes the difference between two values .
5671	Describes the difference between two strings .
5672	Describes the difference between two values .
5673	Describes the difference between two arrays .
5674	Checks if two keys are equal .
5675	Returns the difference between two objects .
5676	Get the members of an object
5677	Returns the difference between two strings .
5678	Extract the response from the response
5679	Initialize the response .
5680	Get the text .
5681	Checks if a link is absolute .
5682	Returns a list of all the frames .
5683	Get all URLs
5684	Get url by id
5685	Get url from link
5686	Expand the given URL .
5687	Get form by submit selector
5688	Get form by image
5689	Get form by id
5690	Normalise HTML .
5691	Returns the HTML for the display button .
5692	Sets the content of the grid .
5693	Formats the form action .
5694	Displays the form of the form .
5695	Saves nested form data
5696	Get the form action from the request .
5697	Override this method to modify the previous record .
5698	Sets the disabled field to be disabled .
5699	Find a form action by name
5700	Get the default button list
5701	Create a list of buttons .
5702	Check if a custom action is allowed
5703	Bind GridField to GridField
5704	Formats the form field .
5705	Determine if the record should be displayed .
5706	Determine if the record should be displayed .
5707	Returns the link to the action .
5708	Transforms this action to a button .
5709	Get button name
5710	Returns the HTML for the button .
5711	Display the button holder .
5712	Add new item to the list
5713	Update the edit form .
5714	Filter the field list .
5715	Add a new form to the form .
5716	Do save and redirect
5717	Publish and add a new form .
5718	Publish data and close it
5719	Cancel action
5720	Redirect to the next page
5721	Saves the previous record to the previous page
5722	Saves the given data .
5723	UnPublish this record .
5724	Get the top level controller .
5725	Saves the form to the form
5726	Check if record is published .
5727	Determine if the record is deleted .
5728	Formats the dropdown action .
5729	Binds the grid field to the form .
5730	Returns the HTML for the button .
5731	Get all leagues .
5732	Get league data .
5733	Get league teams .
5734	Get league matches .
5735	Get all matches for a team .
5736	Get the show parameters .
5737	Select the renderer .
5738	Set default suffix .
5739	Render the template .
5740	Log a request duration .
5741	Prefix data .
5742	Returns the parser for the given content type .
5743	Parse content type .
5744	Returns the validation value for a given database type .
5745	Get debug backtrace string
5746	Creates a form for the form .
5747	Validate WHERE clause
5748	Removes last characters from a string
5749	Convert an array to a string
5750	Set the roles .
5751	Deletes a role by its primary key .
5752	Get all roles
5753	Returns a list of role IDs for the given roles .
5754	Sets the index filter .
5755	Executes a SELECT query .
5756	Selects a query with roles subquery .
5757	Get permissions array
5758	Get the FROM clause from the table .
5759	Builds a Permission .
5760	Get all permissions
5761	Delete a permission .
5762	Display the view view .
5763	Get filter field value
5764	Filter the index resets the response object .
5765	Displays the admin page .
5766	Clears the mailer .
5767	Creates and returns a new instance
5768	Add a column
5769	Set the SQL statement .
5770	Get the administrator administrator .
5771	Checks if a role has a given role .
5772	Get the roles string
5773	Checks if the current user is up .
5774	Checks if the user is deleted .
5775	Index view objects
5776	Add a SQL statement
5777	Sets the value of a column .
5778	Set SQL statement .
5779	Get a single row from the database .
5780	Set navigation
5781	Get the section for the given section .
5782	Route delete action
5783	Enter event and notify event
5784	Route put update
5785	Add a column
5786	Displays a database record .
5787	Route get logout
5788	Execute the query
5789	Sets the rules that are unique .
5790	Set default value
5791	Returns true if the permission is deleted .
5792	Set the constraints .
5793	Adds a constraint to the column .
5794	Adds a boolean value to the column values .
5795	Insert a column into the database .
5796	Set cookie middleware
5797	Get route name .
5798	Route index .
5799	Returns an array of all administrators with the given columns .
5800	Delete an administrator .
5801	Get the delete cell
5802	List view objects .
5803	Set whitelist .
5804	Check if the given value is valid .
5805	Increment the counter .
5806	Validate the field s tag .
5807	Write the tag to the database .
5808	Deletes the tag types .
5809	Update the search form .
5810	Update searchable fields .
5811	Updates the field s fields .
5812	Write the tags to the database .
5813	Gets the field s fields .
5814	Validate this tag .
5815	Write the tag types
5816	Write the tag types .
5817	Returns a list of supported tags for this Fusion .
5818	Update tagged tags .
5819	Create alert alerts for given type
5820	Transform files into array .
5821	Write data to container
5822	Render flash alert alerts .
5823	Resolve options .
5824	Set HTTP method .
5825	Encode data .
5826	Set JSON encoding .
5827	Builds the URL for the given URL .
5828	Create a new request .
5829	Creates a new raw request .
5830	Prepare the request .
5831	Send a request
5832	Creates a response object from the given response .
5833	Convert header to array
5834	Set the status code .
5835	Clear expired cache entries .
5836	Handle request .
5837	Transforms an original transformation .
5838	Transform a URL to a URL .
5839	Trims the given string .
5840	Crops image .
5841	Add a role
5842	Get additional fields .
5843	Validate additional fields .
5844	Save additional fields .
5845	Executes the image resizer .
5846	Sets the syslog message .
5847	Sanitize file name
5848	Populate the metadata .
5849	Generate module content
5850	Build the form .
5851	Add toolbar buttons .
5852	Process data .
5853	Load virtual table
5854	Persist flex form .
5855	Add statistics and social link to Twitter .
5856	Initialize rulesets .
5857	Localize a string
5858	Notify a callback .
5859	Get all directories .
5860	Get all file types .
5861	Compile rules .
5862	Expand values in ruleset .
5863	Expand conversion mapping .
5864	Returns the pattern pattern .
5865	Report additional storage claims .
5866	Get indexer instance
5867	Get the orientation of a file
5868	Extract metadata from a file
5869	Create virtual file object .
5870	Get basic metadata from a file
5871	Converts a rational number into a decimal number .
5872	Returns the transformation for a given orientation
5873	Checks if a file is transparent
5874	Checks if the file is animated GIF .
5875	Add container to container
5876	Get image file extensions .
5877	Finds a file by its name .
5878	Update the index .
5879	Create index file .
5880	Access protected property
5881	Process upload action
5882	Reads a byte from a JPEG file .
5883	Called before find .
5884	Normalize orders .
5885	Render dropdown .
5886	Resolve a TSDNS host
5887	Get icon name
5888	Get the class name .
5889	Get the HTML representation of this object .
5890	Filter a list of nodes
5891	Get permission type
5892	Parse a log entry
5893	List audio templates .
5894	Retrieve audio template
5895	List image templates .
5896	Retrieve an image template
5897	List video templates .
5898	Retrieve a video template .
5899	Returns a list of functionalities .
5900	Retrieve a functionality by its ID .
5901	List all groups .
5902	Retrieve a group .
5903	Retrieve the current user .
5904	List roles .
5905	Retrieve a role .
5906	List account settings .
5907	Retrieve a setting by key .
5908	List users .
5909	Retrieve a user .
5910	Create a setting .
5911	Create a new user .
5912	Update a user .
5913	Add a user to a group .
5914	Update the last login attempt .
5915	Send a password reset .
5916	Reset password .
5917	Update a setting .
5918	Set secret key
5919	Set the created date .
5920	Set the updated date .
5921	Get a property by system name .
5922	Set the property sets .
5923	Add a property set to the collection .
5924	Sets the filter items .
5925	Add a filter item
5926	List categories .
5927	Retrieve a category .
5928	Create a new category .
5929	Update a category .
5930	Remove a category
5931	Set definition .
5932	Set the end date .
5933	Set the start date .
5934	Set the last login
5935	Set the groups .
5936	Add a group .
5937	Set the functionalities .
5938	Adds a function to the collection .
5939	Set extra data .
5940	Add extra data
5941	Connect to the stream .
5942	Reads a line from the stream
5943	Fetch an object from a node
5944	Get a list of filtered categories .
5945	Fetches a freet
5946	Get a list of filter properties .
5947	Returns the type of the adapter .
5948	Wait for ready read .
5949	Set the results .
5950	Add a media response
5951	Add a folder response
5952	Set the transition .
5953	Get channel list
5954	Create a new channel .
5955	Get a list of permissions for a channel .
5956	Get a list of permissions for a channel .
5957	Get a channel by name
5958	Get client by ID
5959	Get client by uid
5960	Get a client by ID
5961	Get server group by name
5962	Get a list of permissions for a server group .
5963	Get the list of profiles
5964	Get channel group by id
5965	Get a list of permissions for a channel group .
5966	Reset a permet
5967	Get temporary password list
5968	Sort group list
5969	Sort file list
5970	Get Account Controller
5971	Get the categories .
5972	Get the deployment controller .
5973	Get the events controller .
5974	Get the filters controller .
5975	Get folders .
5976	Get Media Controller
5977	Get Moodboards .
5978	Get objecttypes
5979	Get propertysetter
5980	Get socialmedia controller
5981	Build the base URL for the given URL .
5982	Get the client .
5983	Set OAuth2 middleware .
5984	Update credentials .
5985	Set the access token
5986	Retrieves the OAuth2 token .
5987	Set the created date range .
5988	Set the updated date range .
5989	Set properties .
5990	Add a property criteria .
5991	Set the deployment date range .
5992	Sets the sort fields .
5993	Add a search sort field .
5994	Set sub folders .
5995	Add a folder response
5996	Set saved search .
5997	Set the minimum value .
5998	Sets the maximum time value .
5999	Set the protocol .
6000	Set image templates
6001	Add an image template
6002	Set the video templates .
6003	Add a video template .
6004	Set categories .
6005	Add category response
6006	Converts a character to a unicode .
6007	Create a new instance from a hexadecimal string
6008	Initialize the transfer .
6009	Set the deleted date .
6010	Set date range
6011	Set comments .
6012	Add a comment response
6013	List all protocols .
6014	Retrieve a protocol .
6015	Retrieve a site .
6016	Create a new deployment site .
6017	Update a deployment site .
6018	Add media to a deployment site .
6019	Remove a site .
6020	Remove media from deployment site .
6021	Set API key
6022	Perform a HTTP request .
6023	Perform a curl request
6024	Set metadata .
6025	Add meta data .
6026	Set mime type
6027	Set the uploaded date .
6028	Set deployed files .
6029	Add a deployment file .
6030	Sets the child media media .
6031	Add a new item to the media .
6032	Returns the deployed file with the given template id .
6033	Returns the metadata of the metadata .
6034	Set the mime type .
6035	Set commands .
6036	Add a command .
6037	Initializes the options
6038	Initializes the transport .
6039	Create a custom event
6040	Download events .
6041	Search for events .
6042	Sends a session session
6043	Add media usage .
6044	View events .
6045	Renders items .
6046	Register the plugin .
6047	List all objects types .
6048	Retrieve object type .
6049	Set properties .
6050	Add a property response
6051	List folders .
6052	Retrieve a folder .
6053	Retrieve the parents of a folder .
6054	Create a folder .
6055	Add media to folder
6056	Update a folder .
6057	Remove media from folder
6058	Remove a folder
6059	Retrieve media .
6060	Retrieve file data .
6061	List Deployment sites .
6062	Downloads a media .
6063	List folders .
6064	Get a list of Moodboards
6065	List all social media files .
6066	List social media
6067	List media usage .
6068	List media versions .
6069	List comments .
6070	Download an archive .
6071	Upload a file to a media file .
6072	Update a media .
6073	Group a group .
6074	Restore a media .
6075	Set the status of a media .
6076	Upload a preview .
6077	Uploads a new version of a new version .
6078	Create a comment .
6079	Combine multiple slides .
6080	Update media .
6081	Remove a media .
6082	Remove a comment .
6083	Upload a file
6084	Upload new version
6085	Retrieve a Moodboard .
6086	List all Moodboards
6087	Retrieve a Moodboard template
6088	Create a Moodboard .
6089	Update a Moodboard
6090	Add media to Moodboard
6091	Remove a Moodboard
6092	Remove media from Moodboard
6093	Returns a new string with the given separator .
6094	Checks if the string is UTF - 8
6095	Assign permissions to client
6096	Get the members of the client
6097	Get a GET request .
6098	Send a POST request .
6099	Make a PUT request .
6100	Performs a DELETE request .
6101	List all property sets
6102	Returns a list of all property types .
6103	Request a command
6104	Wait for an event
6105	Get the host .
6106	Get grid class .
6107	Get client permissions for a channel .
6108	Remove a client .
6109	Add a permission to the channel .
6110	Returns a list of files for the channel .
6111	Delete a channel .
6112	Create a channel .
6113	Send a plugin command
6114	Get the current version
6115	Get a port by ID
6116	Get a server by name
6117	Get a server by its unique identifier .
6118	Create a new server .
6119	Delete a server
6120	Start a server
6121	Get permission by name
6122	Get name by ID
6123	Login a user
6124	Logout the user
6125	Set the roles .
6126	Add a role
6127	Set the expire date .
6128	Get the text class for the current user .
6129	Get the Title Title Title
6130	Get the name of the channel
6131	Get the suffix of the virtual server .
6132	Get suffix flag
6133	Get an image
6134	Set the metadata .
6135	Search for a search .
6136	Search for folders .
6137	Get total number of results
6138	Parse a URI string .
6139	Check if a URI is valid .
6140	Check if the username is valid .
6141	Checks if the given password is valid .
6142	Check if path is valid
6143	Check if the URI is valid
6144	Returns true if the request has a given key .
6145	Check if the URI is valid
6146	Set the status code .
6147	Send headers to the client
6148	Set body
6149	Send JSON response .
6150	Set json body
6151	Redirect to the given URL .
6152	Renders the form .
6153	Set property type
6154	Sets the value of the property .
6155	Converts a value to a DateTime object .
6156	Redirect to a URL
6157	Redirect to current page
6158	Render a link
6159	Creates a URL for the given action .
6160	Set properties .
6161	Add a property request to the request .
6162	Start the server .
6163	Get memory usage
6164	Set data .
6165	Set options .
6166	Write progress
6167	Write performance information
6168	Write assertion failure .
6169	Write an exception .
6170	Add an exception to the test .
6171	Called when a test fails .
6172	Set configuration .
6173	Read data from a file
6174	Delete a file
6175	Sets the right join clause .
6176	Unique multidimensional array
6177	Execute delete .
6178	Sort an array by key .
6179	Loads all columns from the query .
6180	Writes a log message .
6181	Returns the severity for the given error code .
6182	Redirect to a redirect
6183	Add a message
6184	Displays flash messages .
6185	Clear flash messages .
6186	Render a template .
6187	Assign value to view
6188	Render the given data .
6189	Render JSONP .
6190	Render JSON data .
6191	Run the controller .
6192	Load routes .
6193	Load models .
6194	Load controllers .
6195	Find all controller files .
6196	Check if a URL is active .
6197	Parse route params
6198	Parse GET request
6199	Transform a route parameter
6200	Get current path
6201	Add a new route
6202	Set the error result .
6203	Starts the Airbrake instance .
6204	Notify errors .
6205	Notify an exception .
6206	Handles shutdown errors .
6207	Set the value of a key
6208	Load data from data
6209	Notify an error .
6210	Notify an exception .
6211	Clean backtrace .
6212	Convert array to node
6213	Filters the given array .
6214	Initialize the application .
6215	Get all parameters .
6216	Converts realm name to slug
6217	Converts a thumbnail URL to ID .
6218	Get the period start .
6219	Get the period end of the period .
6220	Authorize an application .
6221	Set the HTTP client .
6222	Returns the elevation of the given latitude .
6223	Get menu presence .
6224	Remove a directory .
6225	Creates a new path .
6226	Checks if the service is valid .
6227	Remove an item from storage
6228	Go to the index .
6229	Get available permissions .
6230	Get module permissions .
6231	Get all permissions .
6232	Set the pickup point
6233	Add a child element
6234	Apply access mode .
6235	Create directory .
6236	Try to find the given list of paths .
6237	Get the options .
6238	Write content to file .
6239	Returns the extension for the given mimetype .
6240	Returns the mime for a given extension .
6241	Normalize path components .
6242	Reload the cache .
6243	Checks if the current path is in OpenBase .
6244	Get a list of permissions for a group .
6245	Iterate over all storage files .
6246	Iterate over all files .
6247	Iterate over all directories .
6248	Get all permissions .
6249	Prepare the presentation .
6250	Filter nested groups .
6251	Create a new group presence .
6252	Creates a new ACLPresence .
6253	Normalize an ACL presence .
6254	Fetch shipping labels
6255	Search for pickup points
6256	Search for pickup points by text
6257	Check if user is authorized
6258	Checks if the user is authorized by the controller .
6259	Check if user role is allowed
6260	Get controller name .
6261	Get action map
6262	Get prefix map
6263	Returns the next key .
6264	Creates a new promise .
6265	Resolve a response .
6266	Reject an exception .
6267	Open a file .
6268	Determine if the given text is a curriculum .
6269	Get the name of a curriculum .
6270	Checks if the given domain is valid .
6271	Throw exception .
6272	Opens a file .
6273	Check if the database is available .
6274	Get the value of a key
6275	Read data from the file
6276	Read an unsigned integer from the file .
6277	Read an integer from the stream .
6278	Find the hash of a key
6279	Get the next key
6280	Get next key
6281	Build a DNS resolver .
6282	Build a http client .
6283	Build the http client .
6284	Builds a http client .
6285	Returns the unsigned unsigned unsigned integer .
6286	Computes the hash of a string
6287	Builds a react request .
6288	Builds a response .
6289	Set theme .
6290	Get theme .
6291	Load theme .
6292	Find theme by directory
6293	Scan themes .
6294	Returns the path to the view .
6295	Parse theme info .
6296	Migrate config .
6297	Register navigation .
6298	Add a new item to the list
6299	Add an item to the bar
6300	Renders the navigation .
6301	Get the main navigation .
6302	Get the navigation .
6303	Sets active nav .
6304	Process the navigation .
6305	Returns the distance between two points .
6306	Register providers .
6307	Add a success message .
6308	Sets a new attribute .
6309	Drop a database .
6310	Gets the command .
6311	Get table by name
6312	Get tables .
6313	Loads the constraints .
6314	Sets the referenced columns .
6315	Set the update action .
6316	Sets the delete action .
6317	Execute SQL query .
6318	Execute SQL query
6319	Execute the query .
6320	Get column by name
6321	Adds a constraint to the table .
6322	Parse configuration .
6323	Get attribute value
6324	Starts the cache .
6325	Stop the file
6326	Returns the class name of the given object .
6327	Get the SQL statements for the table .
6328	Returns the SQL statement for the table .
6329	Get comment comments
6330	Register an effect .
6331	Register PostProcessor
6332	Creates a response .
6333	Checks if the string is valid
6334	Attach handlers to the parser .
6335	Create a flash message .
6336	Create a new overlay .
6337	Parses XML document .
6338	Creates a new instance of StreamAdapter .
6339	Returns the stream for the given XML document .
6340	Formats the search form .
6341	Initialize the class .
6342	Returns the value of a constant .
6343	Checks if the object is equal .
6344	Creates an iterator from the given traversable .
6345	Filter elements by className
6346	Concatenates an iterator over an iterator .
6347	Returns true if the iterator is true .
6348	Returns the index of the iterator .
6349	Returns an iterator over the given iterator .
6350	Returns the value at the given position .
6351	Returns the size of the iterator .
6352	Creates a new partition iterator .
6353	Try to find the first element in the iterator .
6354	Set fake time
6355	Set timestamp
6356	Convert timestamp to timestamp
6357	Returns the timestamp as a string .
6358	Set timezone .
6359	Returns a new iterator over the iterator .
6360	Returns a new iterator with the given predicate .
6361	Convert a date interval to a DateInterval .
6362	Convert a duration to a time unit .
6363	Start the profiler .
6364	Returns the order of nulls .
6365	Sets the order of the results of the given function .
6366	Returns a new Ordering with the given secondary comparator .
6367	Returns the minimum element of the given traversable .
6368	Parses a raw TAF file and returns it .
6369	Composes a function to a function .
6370	Creates a function for the given map .
6371	Register a classname .
6372	Appends another IteratorAggregate .
6373	Filter elements by className .
6374	Concatenate and concatenate all the elements in the collection .
6375	Get the first element .
6376	Returns a new IterableIterable .
6377	Returns an array of elements .
6378	Read a store record .
6379	Reads data from store
6380	Read an attempt .
6381	Read the question attempts .
6382	Reads questions .
6383	Reads a record for a given attempt .
6384	Returns the expanded questions .
6385	Read a course .
6386	Read a user .
6387	Read a discussion .
6388	Read a site .
6389	Reads a facetoface session
6390	Reads all the signups from a session .
6391	Reads and returns the tracking values for a scorm .
6392	Returns a reverse order .
6393	Runs the given block .
6394	Runs the given block with the given block .
6395	Initializes the directory .
6396	Run the runnable .
6397	Adds the evolution to the entity .
6398	Instantiate entity .
6399	Create events from an array of events .
6400	Initializes the class map
6401	Returns the resource path .
6402	Register error handler .
6403	Checks if the date is valid .
6404	Propagate an exception to the given exception class .
6405	Consume the contents of a file .
6406	Force script cache .
6407	Returns a new IteratorAggregate .
6408	Returns a new IteratorAggregate with the given class name .
6409	Creates a new IteratorAggregate .
6410	Concatenate iterables .
6411	Returns true if the given iterable is true .
6412	Returns true if all elements of the given iterable .
6413	Transform an iterable into an iterable .
6414	Returns a new IterableAggregate .
6415	Get a value from an iterable .
6416	Skips an iterable over an iterable .
6417	Returns the size of an iterable .
6418	Checks if the iterable is empty .
6419	Start the stopwatch .
6420	Stop the stopwatch .
6421	Creates a function that returns true if the given predicate evaluates the given predicate .
6422	Returns the menu .
6423	Check if the client is configured .
6424	Get Google API client
6425	Get login URL
6426	Performs a complete login .
6427	Get user profile
6428	Get Facebook instance .
6429	Get login url
6430	Performs a complete login .
6431	Get user profile
6432	Remove a display field .
6433	Get serialize variables
6434	Get login URL
6435	Completes the login .
6436	Get user profile information .
6437	Get the login URL .
6438	Performs a complete login .
6439	Get user profile
6440	Transforms a route to the router .
6441	Get social login object
6442	Get all resources
6443	Performs HTTP request
6444	Get the LinkedIn client
6445	Get login URL
6446	Completes the login
6447	Get user profile
6448	Returns the best language match .
6449	Compare AcceptLanguageHeaders header .
6450	Get language values from headers .
6451	Check if the user is logged in .
6452	Find all labels for a given text
6453	Create a new HTTP body .
6454	Creates an HTTP exception .
6455	Checks that the text is valid .
6456	Checks if the element is selectable
6457	Redirect to the given URI .
6458	Write a JSON response to the response .
6459	Fill the field with the given field .
6460	Select a radio button .
6461	Checks if the thumbnail is present .
6462	Add a header .
6463	Try to get the first value at the given name .
6464	Checks if the response is JSON .
6465	Checks if the request is multipart .
6466	Create a default boundary
6467	Create a stream from a string
6468	Parse the AcceptCharset header .
6469	Parse the Accept header .
6470	Parse AcceptLanguage header .
6471	Parse content type header .
6472	Returns the best encoder match .
6473	Compare AcceptCharsetHeaders header values .
6474	Rank the AcceptCharsetHeaders headers .
6475	Reads the input from the request body .
6476	Reads the body as JSON .
6477	Reads a multipart part from the body .
6478	Check if encoding is supported .
6479	Get client IP address .
6480	Returns a string representation of the cookie .
6481	Creates a default content negotiation result .
6482	Asserts that the page contains errors .
6483	Filter the path .
6484	Filter query string
6485	Checks if the connection is a standard port .
6486	Create a request from superglobals .
6487	Creates a HttpHeaders object from the given array .
6488	Get client IP address .
6489	Add a header value .
6490	Returns the selected selector .
6491	Get editor instance
6492	Get the best media formatter match .
6493	Compare accept media types .
6494	Rank accept media types .
6495	Visits a page .
6496	Get current entity id
6497	Switch to the current window
6498	Set screen resolution
6499	Called before step .
6500	Handles the after step .
6501	Returns the request target .
6502	Parse the query string .
6503	Publish a message .
6504	Serialize parameters .
6505	Deserialize parameters .
6506	Serialize a response .
6507	Deserializes the return value for the given type .
6508	Stop the job .
6509	Create handlers .
6510	Init handler .
6511	Handle pre deserialization .
6512	Updates a job .
6513	Copies a job .
6514	Invokes the given job .
6515	Consume a message .
6516	Registers the registry .
6517	Set parameter type .
6518	Create a new instance from a date time .
6519	Unfreeze the message .
6520	Populate the default value
6521	Boot the service .
6522	Check if this field is compatible with another field .
6523	Checks if this field is compatible with another field .
6524	Get handler method name
6525	Create a message .
6526	Resolves a schema id .
6527	Resolves a given schema .
6528	Register a map of classes .
6529	Finds a schema by mixin .
6530	Get all schemas for a given mixin .
6531	Applies the default analyzer .
6532	Builds the params for a message .
6533	Get the connection factory factory .
6534	Render the error handler .
6535	Hydrate a property .
6536	Retrieve data from database
6537	Register asset files .
6538	Initializes the panel .
6539	Transforms an iterator into an array .
6540	Loads data from a given identifier .
6541	Fetch one row .
6542	Returns the current model .
6543	Returns the current element .
6544	Get the sharding key .
6545	Create a new Excel sheet
6546	Get the content of a sheet
6547	Close the sheet
6548	Returns the current sheet .
6549	Adds data to the sheet
6550	Get the current value .
6551	Send a message
6552	Lock the process .
6553	Unlock the PID file .
6554	Remove line from file
6555	Stop the service .
6556	Log a message .
6557	Map a log level to a style .
6558	Sets slug .
6559	Get phone number
6560	Split path .
6561	Get relative path .
6562	Join a path .
6563	Get data for a carrier
6564	Loads a class .
6565	Register class loader .
6566	Perform a request .
6567	Generate a link
6568	Create the migration table .
6569	Unset all headers
6570	Returns the error message .
6571	Returns the path to the session .
6572	Register commands .
6573	Traverses the path to the root directory .
6574	Check if session is valid
6575	Get session cookie .
6576	Stop the session .
6577	Returns a list of countries .
6578	Parse a URL .
6579	Set parts .
6580	Creates a new vector from a polar angle .
6581	Translate a given shift
6582	Get session data .
6583	Creates a new number of elements .
6584	Computes the sum of n elements .
6585	Performs a callback .
6586	Execute curl request
6587	Sets an option .
6588	Get a GET request
6589	Perform a POST request
6590	Make a PUT request
6591	Generates a tag for a given type
6592	Check and return a list of busted blocks .
6593	Parses the tags of a given type .
6594	Get the documentation for a method .
6595	Get method comments .
6596	Get the summary of the given lines .
6597	Get the description of the given lines .
6598	Extract parameters from a line .
6599	Get the type of the return type .
6600	Unlink a file
6601	Builds the URL for the given URL .
6602	Make a new credentials .
6603	Make request token .
6604	Make access token .
6605	Validate request token .
6606	Validate access token .
6607	Get all records .
6608	Get all providers .
6609	Get id by field
6610	Returns a collection of models that have been created .
6611	Returns the first error for the given attribute .
6612	Get dropdown map
6613	Get the settings for a specific setting .
6614	Validate settings .
6615	Checks if a given method exists .
6616	Get the result of an endpoint
6617	Map request parameters to arguments .
6618	Parse endpoint name .
6619	Checks if the given controller name exists .
6620	Get a child controller
6621	Set the submenu .
6622	Add custom styles .
6623	Parse the response .
6624	Process the request .
6625	Put data into cache
6626	Process request .
6627	Get the response data .
6628	Get a value from the response .
6629	Authenticate the user .
6630	Callback for authentication .
6631	Get the authentication URL .
6632	Request access token .
6633	Request a profile .
6634	Parse a profile response .
6635	Bootstrap application .
6636	Initializes the languages .
6637	Initializes the params
6638	Initializes the container .
6639	Initializes the navigation .
6640	Get container route .
6641	Initializes the model .
6642	Encode an id
6643	Decode a hash
6644	Get the status of a status .
6645	Formats phone number .
6646	Authenticate the user .
6647	Callback for callback .
6648	Creates database tables .
6649	Upload file .
6650	Unlink a file
6651	Append extra fields to array
6652	Add extra data
6653	Remove extra data .
6654	Get a request token .
6655	Normalize headers .
6656	Go to the controller .
6657	Create a failafe response .
6658	Serialize the message .
6659	Get the endpoints .
6660	Get controllers .
6661	Get controller method
6662	Get a GET request
6663	Perform a POST request
6664	Instantiate an instance of Facebook .
6665	Parse Facebook profile .
6666	Set body data
6667	Prepare the response .
6668	Respond to the response .
6669	Set movie params
6670	Get movie rating rating
6671	Restart a post .
6672	Restart all ratings .
6673	Update rating .
6674	Restart a new user .
6675	Add meta box .
6676	Render meta boxes .
6677	Converts a time to a relative time .
6678	Get date range
6679	Convert a date string to a date
6680	Get date time
6681	This method is called when the action is called .
6682	Set security headers
6683	Sends success response .
6684	Sends an error response .
6685	Sends a fail response .
6686	Show flash messages .
6687	Merge flash messages .
6688	Checks if the POST request is POST
6689	Sets the session and redirect to the session .
6690	Check if the user has access to the user .
6691	Add a route .
6692	Add a new middleware .
6693	Sort an array
6694	Applies active actions to the active menu .
6695	Applies the visible view to the nav .
6696	Hide method .
6697	Check if a method is hidden
6698	Compare two versions .
6699	Sets the build .
6700	Set pre - release pre - release
6701	Parse a string .
6702	Returns the precedence between two arrays .
6703	Generate a base64 string .
6704	Returns the base URL for the request .
6705	Get the writer factory
6706	Before update .
6707	Extracts the fields of the model .
6708	Get the reader factory
6709	Sets the actual parameters .
6710	Parse HTTP headers .
6711	Convert url to parameters
6712	Convert string to array
6713	Get parameter value .
6714	Get request chain chain .
6715	Get the format from the requested URI .
6716	Get request chain chain from request
6717	Set new parameters .
6718	Set parameter value .
6719	Handle authorization response .
6720	Performs authorization authorization .
6721	Handle token response .
6722	Fetch access token .
6723	Validate auth params
6724	Validate token params
6725	Get access token
6726	Get movie votes .
6727	Set movie votes .
6728	Set the total votes
6729	Set movie rating .
6730	Set user votes .
6731	Get posts .
6732	Process a message .
6733	Run the given request .
6734	Handle an exception .
6735	Get a middleware .
6736	Instantiate a new provider instance .
6737	Remove post meta data .
6738	Run the AJAX action .
6739	Set custom options
6740	Add custom rating .
6741	Converts this request to another URI .
6742	Apply the parameter to the request .
6743	Checks if the given configuration is supported .
6744	Handle a request .
6745	Apply the response encoding .
6746	Returns the translation of the translator .
6747	Bootstrap the application .
6748	Handle the request .
6749	Transform a collection .
6750	Get the transformer class .
6751	Creates a new transformer class .
6752	Creates a callback for the given message .
6753	Install web server .
6754	Create folder if not exists
6755	Create a copy of a file
6756	Create a new application instance .
6757	Returns true if the given type is a nested property .
6758	Get message from message
6759	Process the registry .
6760	Build cache key
6761	Find a collection by criteria
6762	Expand all models .
6763	Append the collection to the collection .
6764	Handle insert .
6765	Update a Sale .
6766	Handle address change .
6767	Handle address change .
6768	Update the content of a sale .
6769	Handle the state change .
6770	Handle the state change .
6771	Checks if the sale is a discount update .
6772	Checks if an invoice is changed .
6773	Determine if the customer should be updated .
6774	Called when a delivery is changed .
6775	Update the key
6776	Updates the sale information .
6777	Update VAT data .
6778	Update VAT display mode .
6779	Configure accepted sale .
6780	Update exchange rate .
6781	Update locale .
6782	Set form parameters .
6783	Set header parameters .
6784	Build query string .
6785	Build the form data string .
6786	Build headers .
6787	Fix the default group .
6788	Get customer group from event .
6789	Assert that the given shipment is valid .
6790	Merges cached units into cache .
6791	Create a notification .
6792	Builds a notification .
6793	Get the column sort source column .
6794	Get tag count
6795	Converts a list of values to an array of values .
6796	Gets the values for the given tag .
6797	Convert rows to array
6798	Install customer .
6799	Install country code .
6800	Install currencies .
6801	Install taxes .
6802	Install tax groups .
6803	Install tax rules .
6804	Install customer groups .
6805	Generates a new entity .
6806	Create a formatter instance .
6807	Create a new instance from the context .
6808	Format a number .
6809	Format a number .
6810	Returns a string representation of the amount of adjustments .
6811	Get the date formatter .
6812	Get the date time format .
6813	Get the number formatter .
6814	Get the currency formatter .
6815	Builds a CSV file .
6816	Checks if this adjustment is equal .
6817	Builds the adjustments for a given type .
6818	Write invoice lines to invoice .
6819	Write the shipping line .
6820	Write invoice taxes .
6821	Compare two numbers
6822	Gets the good account number .
6823	Get shipping account number .
6824	Get tax account number
6825	Get payment account number
6826	Returns the unpaid account number .
6827	Check if a gateway is valid .
6828	Get shipping address .
6829	Priorize a single assignment .
6830	Move assignment to another unit .
6831	Synchronize a supplier item .
6832	Get supplier order item from event .
6833	Check if user has rights
6834	Gets the FindNewBySupplier query .
6835	Checks if the given invoice is forbidden .
6836	Check if cart is valid .
6837	Add an object to the cache
6838	Map data to data
6839	Get object by key
6840	Get data by key
6841	Get cache by key
6842	Produces a concrete instance .
6843	Call a Closure .
6844	Call a method in a class
6845	Converts seconds to seconds .
6846	Returns an array of hours .
6847	Adjust the hour of an hour
6848	Returns the number of days for a given month .
6849	Returns a list of all the months .
6850	Returns a list of years
6851	Calculate the span for a given timestamp .
6852	Check if a payment is valid .
6853	Process the status of the payment .
6854	Find the tokens for a payment .
6855	Transforms a Sale .
6856	Equivalent to equinox .
6857	Returns the equinox of the given year .
6858	Returns the solstice year .
6859	Calculates the solstice of the given year .
6860	Computes the horner of the given x .
6861	Convert a value to a default value
6862	Register the factory .
6863	Register the manager .
6864	Update totals .
6865	Update customer balance .
6866	Check if the invoice type is forbidden .
6867	Retrieve Sale from invoice .
6868	Build invoice payments
6869	Builds an invoice list .
6870	Build payment list
6871	Initialize shipping method .
6872	Initializes the shipment point .
6873	Builds an item .
6874	Find and create a new item .
6875	Execute query
6876	Finds the values for the given type .
6877	Build the response data .
6878	Get the revenue query .
6879	Finish the layout .
6880	Transforms a ShipmentAddress .
6881	Transforms an address .
6882	Format a number
6883	Returns a list of supported types .
6884	Check if the given type is valid .
6885	Lookup address addresses .
6886	Lookup postcode metadata
6887	Execute a GET request .
6888	Create an error exception .
6889	Get assignment assignments .
6890	Remove assignment .
6891	Create assignment assignments for a given item .
6892	Resolves the quantity of a shipping item .
6893	Sort assignment assignments .
6894	Compare stock units by price
6895	Compare stock units by eda .
6896	Set the value of a key
6897	Bind a key to an array
6898	Delete an item from the database
6899	Generate a new session id
6900	Close session .
6901	Destroy the session
6902	Returns the URL for the current page .
6903	Render the page .
6904	Run a wildcard .
6905	Remove recipient .
6906	Add extra recipient .
6907	Remove extra recipient .
6908	Add a copy to this recipient .
6909	Remove a copy .
6910	Add an extra copy to the recipient .
6911	Remove an extra copy .
6912	Add an invoice .
6913	Add a shipment .
6914	Remove a shipment .
6915	Add an attachment .
6916	Remove an attachment .
6917	Checks if the message is empty .
6918	Checks if the given amount is available .
6919	Returns an array of adjustments .
6920	Validates an identity .
6921	Returns the tax group .
6922	Sets the tax group .
6923	Builds a key .
6924	Gets the findBySale query .
6925	Returns the query by country and weight .
6926	Checks if the resource is a state change .
6927	Send notification .
6928	Persist invoice .
6929	Checks if the invoice is valid .
6930	Purges the invoice .
6931	Populate the shipment invoice .
6932	Checks if the invoice amount is in the invoice .
6933	Transforms a Sale transform .
6934	Get operator operator .
6935	Format a message .
6936	Find all units in the given subject .
6937	Check if an item exists in the list .
6938	Find the item in the list
6939	Push an item to the list
6940	Remove an item from the list
6941	Gets the cost cost for a purchase item .
6942	Schedules the subject stock unit change event .
6943	Returns the localized day of a given day .
6944	Register a class instance .
6945	Watch the payment .
6946	Returns a query builder for a regular order .
6947	Creates a query builder that can be used to query out the outstanding outstanding due to the invoice .
6948	Set the required parameters .
6949	Gets the query by country and customer .
6950	Gets the query by country .
6951	Get base query builder .
6952	Checks if the given sale item is covered in the given order .
6953	Resolve price .
6954	Returns the grid for the given country .
6955	Get all taxes for a shipping method .
6956	Calculates the total amount of items .
6957	Renders a list of tabs .
6958	Set forced redirect
6959	Updates the expiration time .
6960	Create a new epoch .
6961	Creates a new epoch .
6962	Creates a Bessel epoch .
6963	Returns the date of this object .
6964	Gets the year .
6965	Checks if the identity is empty .
6966	Clears the identity .
6967	Calculates the gross lines .
6968	Calculates the goods for the given line .
6969	Calculate discount line .
6970	Calculate shipping line .
6971	Sets the result of the result .
6972	Builds an entity .
6973	Build field value .
6974	Builds the association value .
6975	Throws an exception if an adjustment is invalid .
6976	Schedule a SaleContentChange event .
6977	Create a new gateway .
6978	Normalize an attachment .
6979	Get the client
6980	Finds an address by expression
6981	Creates a new Skipperer instance .
6982	Validate input data .
6983	Validate and return errors .
6984	Extract data from input data .
6985	Creates a context .
6986	Create default context
6987	Fill the given customer .
6988	Finalize the context .
6989	Add a rate
6990	Translate API doc .
6991	Get locale with suffix .
6992	Returns the cache key for the given group id .
6993	Returns the cache key for the given user role .
6994	PrePersist the uploadable .
6995	Parse Apple price matrix .
6996	Parse Apple price matrix .
6997	Returns a list of view views for the view .
6998	Prepare the related record for the given relation .
6999	Returns the CSS classes for the container
7000	Set url
7001	Get the method name .
7002	Set action .
7003	Determine if the route matches the pattern
7004	Format the given format .
7005	Format the date .
7006	Formats the day name .
7007	Formats the given date .
7008	Formats the day name .
7009	Formats the given string .
7010	Format the number of days
7011	Formats the given string .
7012	Formats the month name
7013	Format the month
7014	Format the number of months
7015	Format the year .
7016	Formats the given string .
7017	Format g . g . g
7018	Formats the hour of the hour
7019	Formats the hour of the hour
7020	Formats the minimum i . e .
7021	Formats the seconds .
7022	Format the time zone
7023	Format the time zone
7024	Get formatter .
7025	Add a cookie to the cookie
7026	Checks if the cookie is logged in .
7027	Auto login .
7028	Get default implementation of default implementation
7029	Returns the messages for the given quantity .
7030	Returns an array representation of the exception .
7031	Finds a shipping item .
7032	Run the migration .
7033	Get the last migration .
7034	Save migrations .
7035	Create migration table .
7036	Drop migration table .
7037	Computes the dependencies for the given tables .
7038	Get shipments .
7039	Returns the shipping time for the shipment .
7040	Checks if the subject subject is different .
7041	Set payment state
7042	Get the scaffold config
7043	Handle source table names .
7044	Get meta model names .
7045	Get column names from table
7046	Build customer data .
7047	Builds the address data .
7048	Format a phone number .
7049	Builds the goods lines .
7050	Builds the discount lines .
7051	Add a phone number .
7052	Logs the current user .
7053	Returns the instance of the instance .
7054	Generate message ID header .
7055	Calculate the offset of a Julian day
7056	Calculates the day of a year .
7057	Checks if the data exists .
7058	Get stockAdjustment from event .
7059	Add a class .
7060	Removes a class .
7061	Set classes .
7062	Update customer balance .
7063	Get accepted states .
7064	Checks if payment is supported .
7065	Get auth actions
7066	Get user rights
7067	Get the accounting from an event .
7068	Get the units .
7069	Check if a unit is valid
7070	Round the given value .
7071	Update the message .
7072	Get TicketAttachment from event .
7073	Checks if the given state is better than the given state .
7074	Adds the details to the details .
7075	Add item details
7076	Add discount details .
7077	Returns a list of document types for the given sale .
7078	Checks if the given document is a valid document type .
7079	Returns a list of available types .
7080	Pre - copy event .
7081	Sets the copy of the order .
7082	Set URI .
7083	Set the HTTP method
7084	Delete a cookie
7085	Set default conditions for default options
7086	Sets the column label for the default option .
7087	Loads a password from a password .
7088	Set the error action .
7089	Set default headers .
7090	Remove the default headers
7091	Match the route .
7092	Add a new route .
7093	Checks if the given invoice is valid .
7094	Loads a SaleItem
7095	Throws an exception if the item is immutable .
7096	Get a block .
7097	Normalizes stock units .
7098	Find stock units .
7099	Computes the ceiling comparison .
7100	Compare two units .
7101	Returns the classes for the given type .
7102	Returns the site URI .
7103	Get query string
7104	Converts a title to a string .
7105	Processes the parsed text
7106	Calculates total payment amount .
7107	Rounding the given amount
7108	Get the precision of a currency .
7109	Get the rounding increment .
7110	Get ticket from event .
7111	Check if the given stock is valid .
7112	Check if user is authorized
7113	Check if the given URL is allowed
7114	Checks if the given mode isBetter mode .
7115	Get query builder
7116	Watch a payment .
7117	Gets the FindBySubjectQuery .
7118	Gets the count of available stock items .
7119	Gets the minEda by subject .
7120	Gets the FindBySubjectAndSupplier query .
7121	Creates a query builder .
7122	Detect the current language .
7123	Update ticket .
7124	Get ticket message from event .
7125	Checks if two addresses are equal .
7126	Copy an address to another address .
7127	Get details .
7128	Add ranges .
7129	Checks if the notification has a notification .
7130	Get notification notifications .
7131	Update totals .
7132	Update exchange rate .
7133	Get supplier order .
7134	Finds a new line from the invoice .
7135	Returns the price of the price .
7136	Merge another margin .
7137	Reads the number of bytes from the file .
7138	Returns the constraints for the given step .
7139	Returns the groups for the given step .
7140	Handle quantity change .
7141	Register gateway factories .
7142	Register actions .
7143	Sort assignments .
7144	Removes all comments from blog .
7145	Add custom fields for the user .
7146	Save user settings .
7147	Get user settings .
7148	Returns the total amount of discounts .
7149	Calculates the amount of adjustments .
7150	Clears the provider .
7151	Checks if the identity is equal .
7152	Copy the subject identity .
7153	Add a rule .
7154	Checks if the given role matches the given action .
7155	Returns the date if the date is less than the current date .
7156	Set the subject data .
7157	Set stock state .
7158	Compile the string .
7159	Compile the keyboard .
7160	Builds the view view .
7161	Initializes the view .
7162	Builds the taxes view view .
7163	Builds the view lines for a SaleItem .
7164	Builds the discounts for the given sale .
7165	Build the discount line .
7166	Builds a shipping line .
7167	Get optionsResolver .
7168	Updates the current tab .
7169	Resolve TaxRule .
7170	Resolve target country .
7171	Resolve TaxRule .
7172	Resolve shipping country .
7173	Resolve customer target .
7174	Get a path from an array
7175	Sets a path to an array .
7176	Extract an array from an array .
7177	Returns the values of a given key .
7178	Check if type is valid
7179	Returns the type of the field .
7180	Returns a list of valid types .
7181	Generate a new payment number .
7182	Generate key .
7183	Update exchange rate .
7184	Gets the FindAvailableByCountryAndWeight query .
7185	Builds a new StockUnit object .
7186	Returns the combination of the given quantity .
7187	Returns the assignment with the given id .
7188	Builds a list of assignments .
7189	Copy an Adjustment
7190	Copy a SaleAttachment
7191	Copy a SaleNotification
7192	Copy a SaleItem
7193	Copy properties from source to target
7194	Get thumbnail file .
7195	Prepares the order for the shipment .
7196	Handles release changes .
7197	Sets the first item in order .
7198	Fixes the customer .
7199	Assigns a SaleItem .
7200	Detach a SaleItem .
7201	Get the unit .
7202	Get the gross amount
7203	Adds a discount .
7204	Returns the discount value .
7205	Get the base value
7206	Add a new TaxAdjustment
7207	Finalize the taxes .
7208	Calculates the total amount .
7209	Creates a new amount from a gross amount .
7210	Get auto login url
7211	Validate login token .
7212	Generate a login token .
7213	Configure the subject .
7214	Commit the given account .
7215	Fix the default tax group .
7216	Get tax group from event .
7217	Get the list of classes .
7218	Create migration .
7219	Updates the migration .
7220	Create a JSON response .
7221	Create a new shipment label .
7222	Clears the shipment .
7223	Clears the parcel .
7224	Execute curl request
7225	Returns the content of the response .
7226	Get information about the current request .
7227	Set url
7228	Parse the HTTP header .
7229	Create a new curl
7230	Returns the margin percentage
7231	Load the result from the result .
7232	Create a new price from a currency
7233	Assert that the sale class is valid .
7234	Assert that the given item is an item .
7235	Assert that an item is correct .
7236	Returns the country code for the given phone number .
7237	Fixes the invoice address for the given address .
7238	Fix delivery default delivery .
7239	Get customer address from event .
7240	Resolve a class and return it .
7241	Get default classes
7242	Validate request .
7243	Display the notification .
7244	Load options .
7245	Builds a shipping item .
7246	Checks if the given item is stockable .
7247	Purges the given shipment .
7248	Dispatch a sale event .
7249	Validate shipping method .
7250	Validate delivery address .
7251	Validates an identity .
7252	Validate the outstanding transaction term .
7253	Get shipping method from event .
7254	Returns true if the given state is better than the given state .
7255	Check if the user is logged in .
7256	Get user from session
7257	Checks if the given URL is allowed .
7258	Merge items from SaleItem
7259	Calculates the total gross base value .
7260	Creates a new Adjustment .
7261	Assert that the adjustment type is valid .
7262	Assert that the adjustment mode is expected .
7263	Converts a Sale object to a currency .
7264	Validate item .
7265	Returns a collection of models .
7266	Find model by id
7267	Checks if the model has a model
7268	Returns a collection of models for the given model .
7269	Returns the model belongs to .
7270	Save the model .
7271	Delete the current record
7272	Delete a WHERE clause
7273	Get table name
7274	Decode a value
7275	Encode the given column .
7276	Get table columns
7277	Get the current time .
7278	Get input data
7279	Get file .
7280	Validate input .
7281	Forward the request to the given host .
7282	Get current request
7283	Update customer group and currency .
7284	Set the status of the response .
7285	Initializes the invoice subject .
7286	Get all invoices .
7287	Returns the invoice time for the invoice .
7288	Sets the column for a column name .
7289	Watch the order .
7290	Check if the given mode is valid .
7291	Get the query by method and state .
7292	Get users by meta_key
7293	Save the status of a post .
7294	Get information about a post .
7295	Send a mail to the server .
7296	Get email addresses .
7297	Modulate the next group .
7298	Add a signature to the message .
7299	Transforms the sender to the sender .
7300	Loads a class
7301	Returns the target targets for the given sale .
7302	Get available transitions .
7303	Update the customer s parent .
7304	Updates the customer .
7305	Schedule parent change events .
7306	Get customer from event
7307	Create a new Date instance
7308	Creates a new instance from a Julian day .
7309	Get the current time .
7310	Returns the solstice year of the given year .
7311	Calculates the solstice winter time .
7312	Returns the equinox of the given year .
7313	Set date .
7314	Set the time of the hour
7315	Set date time .
7316	Set timezone .
7317	Returns the Julian day of this calendar .
7318	Returns the MJD representation of this calendar .
7319	Add a new time to the calendar .
7320	Calculates the difference between two objects .
7321	Returns the day of the year .
7322	Calculate the side of the calendar .
7323	Check the status of a date
7324	Get the component component
7325	Check if the cache is enabled .
7326	Configure taxable mapping .
7327	Configure the identity mapping .
7328	Configure the vat number of vat numbers .
7329	Configure payment term .
7330	Configure subject relapping .
7331	Configure stock subject mapping .
7332	Configure stock unit map .
7333	Get the stock unit mapping .
7334	Get the subjectIdentityMapper .
7335	Add mappings to the class .
7336	Returns a list of stock subject subjects .
7337	Create a new TgLog instance
7338	Create event .
7339	Send a message to the chat .
7340	Send an attachment .
7341	Checks if the given resource is deleted .
7342	Schedule supplier content change event .
7343	Initializes the stock .
7344	Check if the shipment is forbidden .
7345	Modify the submitted value .
7346	Calculates the quantity of a given item .
7347	Calculate delivery quantity .
7348	Watch the shipment .
7349	Checks if a sale is present .
7350	Initializes the payment subject .
7351	Checks if payment is paid .
7352	Get the remaining amount of money .
7353	Get the provider by name .
7354	Get the URL for the subject .
7355	Check if the given size is valid .
7356	Check if format is valid .
7357	Check if the given state is valid .
7358	Loads the prices map .
7359	Get the default price map loader
7360	Returns the stock in stock .
7361	Update the weight total .
7362	Updates the total amount of total amount .
7363	Update payment totals .
7364	Update invoice totals .
7365	Resolve the outstanding date for the given sale .
7366	Checks if the given item is valid .
7367	Checks the invoice integrity .
7368	Checks the shipment integrity .
7369	Update stock price .
7370	Set translations .
7371	Edit the profile .
7372	Update the profile .
7373	Update the password .
7374	Check if a session exists .
7375	Clear the queue .
7376	Fetch a value from the bag
7377	Returns a float value .
7378	Returns a boolean value .
7379	Returns the value of a given key .
7380	Get the value of a key .
7381	Get the route .
7382	Convert an array into a SQL statement
7383	Convert an array to a string
7384	Generate string
7385	Uploads uploaded files
7386	Move a file .
7387	Generate thumbnails from a list of files .
7388	Fetch an HTTP header
7389	Get the response .
7390	Set 404 page .
7391	Assigns a block to this object .
7392	Serialize the object .
7393	Unserialize the object
7394	Replace the content of this object
7395	Get property by name
7396	Execute the query .
7397	Set a header .
7398	Set status code
7399	Redirect to the page
7400	Returns the error data .
7401	Get errors from form
7402	Get config value
7403	Reload config file
7404	Convert a file into a FileUpload object .
7405	Assign data to the container
7406	Replace all values in the block
7407	Serialize the object .
7408	Merge the input into another .
7409	Returns the value of the container .
7410	Set an item in the container .
7411	Combine multiple keys .
7412	Change the mode of a file .
7413	Get the response .
7414	Read data from file
7415	Returns the error message .
7416	Get max file size
7417	Set view content .
7418	Set JSON content .
7419	Sets a redirect to the response .
7420	Get number of numbers
7421	Initialize the product media gallery .
7422	Renders alert .
7423	Register widget .
7424	Render a menu .
7425	Set the source .
7426	Check if the source is valid .
7427	Render the embed .
7428	Render the object .
7429	Displays the login form .
7430	Add a region .
7431	Get the MimeType instance
7432	Guess the mime type .
7433	Export the Danger file .
7434	Get the contents of a directory .
7435	Scan files .
7436	Prepares the product media for the product media .
7437	Handle Fatal errors .
7438	Render an exception .
7439	Initialize the product media gallery .
7440	Reload a module
7441	Checks if the given action is access to the given action .
7442	Show the group .
7443	Creates a new group .
7444	Creates a new group .
7445	Edit a group .
7446	Update a group .
7447	Decrypts a string
7448	Encrypts the given data
7449	Execute a command .
7450	Use this method to use the queue .
7451	Register the menu type .
7452	Render the RTL .
7453	Render LTR tag .
7454	Get the first term of a post .
7455	Get taxonomies for a post type .
7456	Checks if a directory exists .
7457	Persist all entities .
7458	Set the background .
7459	Set the color .
7460	Lookup user by hash
7461	Send a password reset request .
7462	Returns the content of the view .
7463	Render a template
7464	Creates a new password .
7465	Creates a new instance from an uploaded file .
7466	Move uploaded file .
7467	Add a color .
7468	Colorize a string
7469	Parse a color .
7470	Creates a new user .
7471	Creates a new user .
7472	Reset password .
7473	Edit a user .
7474	Update the user .
7475	Configure email helper .
7476	Get entities by identifier
7477	Download file .
7478	Returns the form for the given entity .
7479	Get the content of the file
7480	Get the mime type
7481	Sets the content of the file .
7482	Change encoding .
7483	Returns true if the string starts with the given string .
7484	Returns true if the string ends with the given string .
7485	Returns the character at the specified index .
7486	Returns the index of the given string .
7487	Returns the last occurrence of a string .
7488	Appends a string to the string .
7489	Inserts a string into the string .
7490	Reverse the string
7491	Set the length of the string .
7492	Removes characters from the string .
7493	Trim the string
7494	Trim the string
7495	Convert a string to a string
7496	Create a message from a template entity .
7497	Create a message from a template file .
7498	Create a message from a template file .
7499	Render a string template
7500	Make a JSON request
7501	Clears the cache .
7502	Get a group .
7503	Output a tf template
7504	Returns the translated text for the given key .
7505	Assign a namespace .
7506	Set the doc .
7507	Get token string
7508	Set the whitespace .
7509	Set identifiers .
7510	Add an error
7511	Parse linebreak .
7512	Returns the next token .
7513	Returns the next token .
7514	Returns the next token .
7515	Gets the next token in the document .
7516	Expect a token
7517	Parse text .
7518	Parse a comment
7519	Parse a doctype
7520	Parse cdata tag
7521	Parses the parsed text .
7522	Parse a style tag .
7523	Parse a tag .
7524	Parses all tags .
7525	Select all rows from the database
7526	Parse a file .
7527	Creates a nested node .
7528	Minify javascript
7529	Dumps the location of this node .
7530	Convert attributes to string
7531	Returns a string representation of the tag .
7532	Get the HTML element .
7533	Sets the contents of the text .
7534	Get plain text
7535	Delete this node .
7536	Detach this node .
7537	Clears all children .
7538	Get root node
7539	Check if a tag is parent .
7540	Returns the index of this node .
7541	Set the index .
7542	Returns the index of this node .
7543	Get the sibling of this node .
7544	Get next sibling .
7545	Get the namespace of the tag .
7546	Set the namespace
7547	Get the encoding of the XML document .
7548	Returns the number of child children .
7549	Delete a child
7550	Wrap a node inside a node .
7551	Checks if an attribute has an attribute .
7552	Get children by callback
7553	Match tags .
7554	Returns true if the conditions match the given conditions .
7555	Returns true if the given conditions match the given conditions .
7556	Get children by attribute
7557	Get children by tag
7558	Execute query
7559	Execute a SELECT query
7560	Parses a GTX node .
7561	Parse a sibling .
7562	Parse pipe .
7563	Parses a token .
7564	Parse the comparison token .
7565	Parse a callback and return the result
7566	Parse single conditions .
7567	Parse adjacent conditions .
7568	Parse a CSS query .
7569	Get the job API .
7570	Get application API service .
7571	Perform a GET request
7572	Perform a POST request
7573	Validate required fields
7574	Checks if there is a required value
7575	Get custom fields
7576	Configure the data
7577	Set file field value
7578	Configure data .
7579	Configure default data
7580	Verify that the URL is valid
7581	Verify the data
7582	Verify required data
7583	Extract info from curl request
7584	Extract the response from the curl response
7585	Get the SDK SDK registry
7586	Sets the destination path .
7587	Extract file name from header
7588	Set file name
7589	Configure the request type
7590	Render the template
7591	Render a badge message .
7592	Set form class
7593	Open a form tag .
7594	Render a label .
7595	Render the label .
7596	Render the help block .
7597	Renders a font .
7598	Render a glyphicon .
7599	Render an alert message .
7600	Renders a button group .
7601	Render buttons .
7602	Renders the error message .
7603	Render a form element
7604	Renders an addon option
7605	Set translator .
7606	Renders a dropdown container .
7607	Renders the dropdown options .
7608	Renders list items
7609	Process request handler .
7610	Signup user .
7611	Create a new user .
7612	Returns whether the user is super admin .
7613	Sends a password reset token
7614	Update the profile .
7615	Encodes the request .
7616	Authenticate application .
7617	Request API request .
7618	Get account by name
7619	Sets the permission set .
7620	Create a signed query string .
7621	Returns true if the request url matches the request URL .
7622	Sign request url
7623	Sign request headers .
7624	Performs a HTTP request .
7625	Check if a blob exists .
7626	Check if a container exists .
7627	Create a container .
7628	Get the ACL for a container .
7629	Set the ACL for a container .
7630	Returns the metadata for a container .
7631	Sets the metadata for a container .
7632	Put a blob into the container .
7633	Put a block .
7634	Put a block list .
7635	Get a list of blocks for a given blob .
7636	Get a blob instance from a container .
7637	Get blob properties .
7638	Generate a shared access URL .
7639	Create a resource name .
7640	Validate a container name .
7641	Get error message .
7642	Get base URL .
7643	Parses the headers from an array .
7644	Parse metadata element
7645	Get storage client .
7646	Get file name
7647	Open a file .
7648	Close the stream .
7649	Flushes the file to the stream .
7650	Unlink a file
7651	Rename a file .
7652	Get file stat
7653	Opens a directory .
7654	Reads a directory .
7655	Add a new address
7656	Add a reply to the reply
7657	Send the mail
7658	Close the SMTP connection
7659	Append an address
7660	Format an address
7661	Set wordWrap
7662	Create the body
7663	Add an attachment
7664	Parach all attachments
7665	Encode a file
7666	Encode a QPQ .
7667	Check if inline image exists
7668	Returns a formatted string representation of RFC3901 .
7669	Get server variable
7670	Returns the server hostname
7671	Initialize the archive .
7672	Loads a subfile from the archive .
7673	Starts the store .
7674	Loads the data from the store
7675	Retrieve the contents of a file .
7676	Loads the contents of a file
7677	Search for files in a list of files
7678	Checks if the sheet is valid .
7679	Tries to merge the field s field values .
7680	Delete a slide
7681	Prepare cell cells
7682	Determine the extention format
7683	Returns the main index of the extension
7684	Delete all elements of the given tag
7685	Delete column elements
7686	Calculate column number
7687	Generate a cell reference
7688	Opens a target file
7689	Prepare file extension
7690	Open XML file
7691	Opens a collection of pictures .
7692	Convert a string to an XML element
7693	Determine if a file is a sheet
7694	Returns a list of all drawings in the spreadsheet
7695	Loads the list of slides
7696	Clean up a text point
7697	Searches for a given string
7698	Determine if a file is a slide point
7699	Clean up a text word
7700	Init header footer
7701	Get the open doc for the given text
7702	Get the Draw tag
7703	Open open doc
7704	Open OpenExcel compatibility
7705	Get attribute position
7706	Applies the diff from the start of the start of the start position
7707	Applies the diff to all positions .
7708	Replace the source with the given string
7709	Get the inner source text
7710	Updates the parent
7711	Delete the tag
7712	Find the name of the token
7713	Find the end tag .
7714	Switch relative to the end of this tag
7715	Find start tag by prefix
7716	Finds an element in the given TxtOrObj
7717	Get file state
7718	Prepare a convolution
7719	Convert string to html
7720	Update an array
7721	Shows the index .
7722	Prints the error message
7723	Convert an object to an array
7724	Set QuickReplies
7725	Add a button to the template .
7726	Postback a postback button
7727	Send login button .
7728	Add text to text
7729	Creates a quick reply .
7730	Perform an API request
7731	Returns true if the given data is valid .
7732	Converts an object to a DateTime object .
7733	Handles the response .
7734	Checks if the method is a HydraOperation
7735	Adds route and operations to metadata .
7736	Creates a document definition .
7737	Returns the annotation for the given element .
7738	Serializes an entity .
7739	Deserialize the given data .
7740	Validate an entity .
7741	Adds an operation to the collection .
7742	Returns true if the given operation is supported .
7743	Set the value of an entity .
7744	Get the value of the property
7745	Find the getter method
7746	Finds the setter method .
7747	Finds the adder and remove it .
7748	Checks if the given method is accessible .
7749	Returns all the metadata for the given class .
7750	Returns the metadata for a given class .
7751	Loads the metadata for the given class .
7752	Complete the metadata .
7753	Serialize data to JSON .
7754	Deserialize a JSON object .
7755	Deserialize the given data .
7756	Set property value
7757	Process data .
7758	Load mapping information .
7759	Returns the mapping configuration for the given bundle .
7760	Detect metadata driver .
7761	Validate mapping configuration .
7762	Returns the context for the given class name .
7763	Get the document documentation .
7764	Creates an array of operations .
7765	Returns document properties .
7766	Get the context for a given type .
7767	Load metadata for a given class .
7768	Validate input data .
7769	Checks if the model is valid .
7770	Get all errors .
7771	Returns the error message for the given field .
7772	Replace message format
7773	Validate a value against a rule .
7774	Checks if a rule is skip .
7775	Handle errors .
7776	Get rule arguments .
7777	Extract field aliases .
7778	Extract input data .
7779	Extract rules from data .
7780	Validate a unique value
7781	Get a message by key .
7782	Initialize the timezone
7783	Register timezone scripts .
7784	Add parser .
7785	Set the statement class .
7786	Create a Statement
7787	Set the account class .
7788	Set the contraAccount class .
7789	Set the transaction class .
7790	Set the opening balance class .
7791	Set the closing balance class .
7792	Create a new object
7793	Parse the given text .
7794	Get account number
7795	Parse statement body body
7796	Get account number
7797	Get the number of statement number .
7798	Parse the given text .
7799	Get the line from the given text .
7800	Split statements into statements .
7801	Split the text into a list of transactions .
7802	Parse a statement
7803	Parse a statement body .
7804	Parse a balance .
7805	Parse opening balance .
7806	Returns the nearest date time for the given day and month .
7807	Returns the balance of the closing balance .
7808	Sets the number of retries .
7809	Returns debug report
7810	Get package version
7811	Filter out an array of strings
7812	Convert a date to a jalali string
7813	Convert a date to a string
7814	Process request .
7815	Upload image file
7816	Set event .
7817	Set the secret
7818	Create a new callback .
7819	Settle the source .
7820	Store workflow .
7821	Update a pipeline .
7822	Refresh pipelines .
7823	Update workflow .
7824	Get the half of the width
7825	Returns the total width of the line
7826	Returns the length of the longest pipe length .
7827	Generate a spaced pipe .
7828	Get spaces by word
7829	Returns the left border with the given border .
7830	Returns the right border with the given border .
7831	Returns the full core core .
7832	Gets the spaces for the core .
7833	Generate the pipe .
7834	Get pipes by option
7835	Get the namespace namespace .
7836	Delete all files in workflow
7837	Register the service .
7838	Create a contact
7839	Get contact information
7840	Add a phone number
7841	Remove a phone number
7842	Handle a job .
7843	Call the given method .
7844	Get device information .
7845	Send a message .
7846	Cancel a message
7847	Get information about a message .
7848	Checks if the message is valid .
7849	Dispatch a command .
7850	Marshal the command .
7851	Gets the value of a parameter .
7852	Dispatch a workflow .
7853	Resolve request .
7854	Delete files .
7855	Register the workflow .
7856	Publish configuration .
7857	Register services .
7858	Register the pipeline repository .
7859	Register workflow runner hooks .
7860	Register commands .
7861	Draw the polyline .
7862	Set the pipes of the given workflow .
7863	Draws a character .
7864	Draws the beginning of the pipes .
7865	Draws a row
7866	Draws the border of the border .
7867	Draw a border .
7868	Replace UTF - 8 characters in UTF - 8 .
7869	Draw the border .
7870	Draw the bottom border
7871	Draws the end of the pipe .
7872	Send a message
7873	Get credit card
7874	Checks to see if the user is configured .
7875	Settle the repository .
7876	Generate request .
7877	Setup log view .
7878	Register log filesystem .
7879	Register LogViewer .
7880	Register log view controller .
7881	Read log file .
7882	Get log view
7883	Delete log .
7884	Show log view .
7885	Get log data .
7886	Get the list of levels .
7887	Parse the log file .
7888	Get all log files .
7889	Create a Log instance from a given date .
7890	Get the default project hook .
7891	Trigger a project .
7892	Set property value
7893	Adds a value to the collection .
7894	Parse data .
7895	Register a custom provider .
7896	Create Uploader instance .
7897	Creates a new instance of the given provider .
7898	Generates a dynamic from a string .
7899	Check if provider alias exists .
7900	Upload a file .
7901	Upload a file
7902	Get file name
7903	Creates a dynamic upload to a file .
7904	Render sides .
7905	Renders the toggle button .
7906	Renders the menu .
7907	Get label .
7908	Render dropdown
7909	Render search input .
7910	Initializes the UI .
7911	Register jQuery UI plugin .
7912	Renders the toggle button .
7913	Renders the input .
7914	Renders the label .
7915	Register the close button .
7916	Init options .
7917	Renders the input .
7918	Create a label group .
7919	Renders the input .
7920	Open a zip file
7921	Extract the filename from the zip archive .
7922	Check if path is valid
7923	Extract filename from zip archive
7924	Extract files from a zip file
7925	Register a plugin .
7926	Fire event listeners .
7927	Register a namespace .
7928	Unregister a namespace .
7929	Set default group .
7930	Set collection collection .
7931	Append data to collection
7932	Load data from data .
7933	Load data from array
7934	Check if a given name is loaded .
7935	Send a message
7936	Get a list of places for a given country
7937	Create a backup file
7938	Get a backup file
7939	Delete a backup file
7940	Set backupFTP access block
7941	Set the boot device .
7942	Add secondary domains
7943	Delete secondary domains
7944	Get range range
7945	Delete a monitoring notification .
7946	Get line properties
7947	Reset the lines of a line
7948	Get PPP login by ID
7949	Update domain properties
7950	Order a backend
7951	Order a cache rule
7952	Sets the reverse properties .
7953	Get spam .
7954	Get spam stats
7955	Sets a block of IP address .
7956	Returns a list of services .
7957	Get the properties .
7958	Check if ipv6 is enabled
7959	Get the number number of pairs
7960	Determine whether or not the properties of the current profile .
7961	Checks if the port is reset .
7962	Checks if the current configuration is changed .
7963	Set monitoring notifications .
7964	Get monitoring notification notification
7965	Get VoiceConsumptions
7966	Get billing account
7967	Set billing account
7968	Returns a list of all fax consumers .
7969	Get voice consumers .
7970	Delete a blacklist .
7971	Get incoming messages .
7972	Delete incoming SMS .
7973	Purchase a SMS .
7974	Get sender .
7975	Create a sender .
7976	Add secondary DNS domains
7977	Delete secondary domains
7978	Set SSH key
7979	Get Pca session properties
7980	Get session files
7981	Get Pca session properties .
7982	Add a delete task
7983	Add a restore task
7984	Get current monitoring monitoring
7985	Get available options
7986	Get all models .
7987	Set snapshot properties .
7988	Delete a snapshot
7989	Get template properties
7990	Get Pca services
7991	Set ssh key
7992	Set a password
7993	Get disk usage information
7994	Get the list of servers
7995	Get vps list
7996	Validate hashing context .
7997	Returns a string representation of the class .
7998	Get OpenSSL encryption options .
7999	Identify target name .
8000	Calculate NTL response .
8001	Calculates the challenge response data .
8002	Resolve input encoding .
8003	Creates a new exception .
8004	Creates a new exception .
8005	Calculate the payload offset offset .
8006	Creates a new exception with the given code .
8007	Validate supported algorithm .
8008	Creates a new exception for the given string .
8009	Process a raw key .
8010	Convert a string to a 64 bit integer
8011	Set the parity bit
8012	Create a new instance of a challenge message .
8013	Get basic options
8014	Prepares a command .
8015	Execute a command
8016	Close the stream .
8017	Check if a file exists
8018	Get the URL for a file .
8019	Get the S3Client instance
8020	Sets the content of the request .
8021	Send a payload
8022	Add a field
8023	Synchronize a closure .
8024	Destroy the semaphore .
8025	Add a free process .
8026	Remove a process .
8027	Kill all processes .
8028	Register a free process .
8029	Register a free process .
8030	Get the free process .
8031	Get process details
8032	Validates a date array .
8033	Loads a view .
8034	Builds the attributes from LDAP .
8035	Checks if the user has a member of the given group .
8036	Convert a number to a number
8037	Convert a number to a number
8038	Find the LDAP search result .
8039	Builds the event data .
8040	Builds array of event dates .
8041	Format calendar events .
8042	Calculates the length of the event .
8043	Processes a semaphore .
8044	Set process title
8045	Select multiple sockets .
8046	Checks if the socket has data .
8047	Send data to the socket .
8048	Receive data from the socket .
8049	Create a calendar event .
8050	Get calendar event .
8051	Get all events .
8052	Get all events as JSON
8053	Delete calendar event .
8054	Update calendar event .
8055	Generate a random number
8056	Set the child process title .
8057	Set parent process title .
8058	Set worker pool size
8059	Set the semaphore .
8060	Create a worker .
8061	Runs the worker process .
8062	Destroy the pool .
8063	Reaper the child process .
8064	Get free workers
8065	Get the next worker .
8066	Collect worker results .
8067	Run a task
8068	Connect to the LDAP server .
8069	Bind to LDAP .
8070	Get domain controller strategy .
8071	Retrieve a user by credentials .
8072	Validate credentials .
8073	Perform a POST request .
8074	Delete an endpoint
8075	Handle JSON response .
8076	Perform a POST request .
8077	Delete an endpoint .
8078	Builds the API endpoint .
8079	Get error messages .
8080	Get the report
8081	Add an error message
8082	Report a message .
8083	Get form errors .
8084	Clear errors .
8085	Add a predefined error
8086	Clean the console .
8087	Get database connection
8088	Generate user password
8089	Encode a number
8090	Generate a unique identifier
8091	Checks the hash of a hash
8092	Decode a number
8093	Get value by key path
8094	Set the value of a key path .
8095	Add a cookie
8096	Destroy the cookie
8097	Validate the IP address
8098	Convert data to collection .
8099	Validate all fields
8100	Validate the input
8101	Get a single row
8102	Get a PDO statement
8103	Build query string
8104	Execute query
8105	Run a SQL query
8106	Get email body
8107	Get template variables .
8108	Returns the user s review email address .
8109	Get the value of a field
8110	Starts the configuration .
8111	Queue the next run
8112	Merges the list of contentReviewers into a list of groups .
8113	Returns the next review date .
8114	Add a review log to the page .
8115	Increment the next review date .
8116	Checks if the user is review by the current user .
8117	Set the default review date .
8118	Formats a comment .
8119	Submit a review .
8120	Check if a record is submitted .
8121	Get review content form .
8122	Get review content .
8123	Submit review .
8124	Find a record
8125	Determine if the request is requested .
8126	Get schema response
8127	Find a user by email address .
8128	Find by password reset token
8129	Displays the profile .
8130	Add suggestions .
8131	Remove a node filter .
8132	Get the source context .
8133	Set the source context
8134	Render a block .
8135	Displays a block .
8136	Sets the cache strategy .
8137	Get the cache filename .
8138	Get template class .
8139	Load a template
8140	Create a template
8141	Checks if the template is fresh .
8142	Clears the cache files .
8143	Get the lexer .
8144	Tokenize a string
8145	Gets the parser .
8146	Parse Twig stream .
8147	Get the compiler .
8148	Compile the given node .
8149	Compile a template
8150	Initialize the extension .
8151	Determine if the given class is registered .
8152	Returns the extension for a given class .
8153	Remove an extension .
8154	Add a function .
8155	Add a global variable .
8156	Add a path .
8157	Prepend a path .
8158	Register a user .
8159	Returns the status of the user .
8160	Confirm user .
8161	Block the user .
8162	Unblock the user .
8163	Register the plugin .
8164	Render a template
8165	Compile the given node .
8166	Write a string to the output .
8167	Add indentation .
8168	Indent indentation .
8169	Register autoloader .
8170	Recover the password .
8171	Render a template
8172	Get the content of the source .
8173	Add a callable .
8174	Checks if the given node is a loop .
8175	Optimize a print node .
8176	Recover the password .
8177	Send a welcome message .
8178	Send mail .
8179	Login .
8180	Set default strategy .
8181	Get default strategy
8182	Returns the duration of this profile .
8183	Returns the memory usage of the current memory .
8184	Get the peak memory usage .
8185	Get the parent template .
8186	Display a block .
8187	Checks if a block exists .
8188	Returns the names of the block names .
8189	Returns the value of the given variable .
8190	Register a new user .
8191	Confirm activation token .
8192	Guess the file name .
8193	Get the template file .
8194	Render a template
8195	Checks if the given node is a constant .
8196	Collect templates from a directory .
8197	Collect all tokens from the iterator .
8198	Returns the next token .
8199	Expect a token .
8200	Returns the next token .
8201	Export a job .
8202	Register a command .
8203	Peek a job .
8204	Reserve a job .
8205	Get job stats .
8206	Bork a job .
8207	Put a job .
8208	Get Pheanstalk instance
8209	Parse command line arguments .
8210	Parse a connection .
8211	Builds the signature
8212	Validate file path
8213	Render a job .
8214	Get the stats for a given tube .
8215	Get server stats
8216	Get next job .
8217	Get request query parameter
8218	Check if the limit is allowed
8219	Get IP address
8220	Returns the subnet of the given IP address .
8221	Get entity id
8222	Returns the limit for the given action .
8223	Increments counter limit .
8224	Log rate limit
8225	Handle registration .
8226	Validate registration .
8227	Log a user registration .
8228	Assert that the user has been reached .
8229	Reads a file .
8230	Write data to file
8231	Get item by url
8232	Read configuration .
8233	Generate a random token
8234	Check if the token is expired .
8235	Remove token from storage
8236	Check server configuration
8237	Generate the configuration .
8238	Output module configuration .
8239	Set the authenticated user .
8240	Save tokens .
8241	Get directory files
8242	Handle login .
8243	Attempt to attempt to attempt to attempt a password attempt to authenticate the user .
8244	Login a user
8245	Abort an existing password
8246	Get the password encoder .
8247	Encode password data
8248	Check the password policy
8249	Check if the user has a password .
8250	Rehash a password
8251	Check if user is valid
8252	Log invalid login attempt .
8253	Handles the login page .
8254	Handles registration .
8255	Handle password reset .
8256	Initializes the provider .
8257	Start authentication .
8258	Finish the authentication request .
8259	Get resource attribute
8260	Save login info .
8261	Save after login
8262	Check if the request is valid .
8263	Handles the state mismatch .
8264	Handles OAuth2 error .
8265	Handles an OAuth resource error .
8266	Lock a file .
8267	Close the file .
8268	Open a file .
8269	Read data from file
8270	Check if a lock is unlocked
8271	Get key encoder .
8272	Validate users section .
8273	Validate user data .
8274	Assert that the username is valid .
8275	Handle an event .
8276	Trigger an event
8277	Initialize the config
8278	Handles request url
8279	Handle request file .
8280	Called when a page is loaded
8281	Register the Twig plugin .
8282	On page render
8283	Resolve the URL for a file .
8284	Initialize the session
8285	Check session timeout
8286	Load default config
8287	Create the container .
8288	Loads the modules .
8289	Handles auth routes
8290	Check if the user is logged in
8291	Logout user .
8292	Checks if the given URL is accessible
8293	Handler for error handling
8294	Open transaction file .
8295	Open the file .
8296	Write data to file
8297	Create backup file .
8298	Remove the backup file
8299	Add a rule .
8300	Handle an event .
8301	Handle the login page .
8302	Assert that the given key is an array .
8303	Assert that a value is a boolean .
8304	Assert that a value is an integer .
8305	Assert that the value is greater than the given key .
8306	Assert that a value is a string .
8307	Assert that the given key contains the given string .
8308	Assert that the given key is a string .
8309	Asserts that the given key is an integer .
8310	Normalize url format
8311	Apply defaults to the configuration .
8312	Handle password reset .
8313	Start the password reset
8314	Finish a password reset
8315	Check the reset token
8316	Start password reset session .
8317	Send reset mail
8318	Sets the minimum length of the password .
8319	Checks if a string matches the given regexp .
8320	Get a list of captcha results .
8321	Checks if a captcha is valid .
8322	Get the status of the load
8323	Add a pingback
8324	Get pingbacks
8325	Delete a pingback
8326	Send a request to the user
8327	Recognize a captcha .
8328	Get captcha result
8329	Adds a condition to the query .
8330	Connect to the server .
8331	Construct a PDO DSN .
8332	Returns a list of sequence names .
8333	Returns the SELECT SQL statement .
8334	Add a scope
8335	Remove a scope .
8336	Set the value mutator .
8337	Set values .
8338	Set the return value
8339	Get Yaml from file
8340	Set a configuration file
8341	Initialize the service .
8342	Add data table
8343	Initialize the router .
8344	Run the controller .
8345	Initialize the namespace .
8346	Add a route
8347	Check if the user is edit .
8348	Set value .
8349	Returns an array of all constants .
8350	Send the mail .
8351	Converts a tree to a SQL level .
8352	Handle a signal .
8353	Shutdown the process .
8354	Build an enum .
8355	Builds a model .
8356	Generate models .
8357	Extract domain from raw request .
8358	Converts a URL to a nice URL .
8359	Returns a list of available dashboards .
8360	Start process queue .
8361	Initialize the translations .
8362	Register translations .
8363	Translates a translation key .
8364	Set current language
8365	Create a post event .
8366	Register a mapping .
8367	Get a mapping by name .
8368	Validate configuration .
8369	Show the archive .
8370	Perform the mail .
8371	Shutdown the server .
8372	Display the help screen .
8373	Configure worker .
8374	Set a set of values
8375	Set the where clause .
8376	Sets the ORDER BY clause .
8377	Initialize session
8378	Set action .
8379	Get the value of a nested key .
8380	Apply filters .
8381	Execute the query .
8382	Fetch the result from the database
8383	Fetches all rows from the database
8384	Set the select statement .
8385	Set the group by group .
8386	Set the condition
8387	Set the distinct query
8388	Add an inner join .
8389	Adds a left outer join to the table .
8390	Adds the right outer join .
8391	Adds a full outer join to the table .
8392	List routes .
8393	Run the controller .
8394	Register a new route .
8395	Get Logger instance
8396	Ensure the migration table exists .
8397	Get the definition .
8398	Get schema instance
8399	Displays a template .
8400	Render a button .
8401	Render a render instance .
8402	Initialize the application .
8403	Loads a class .
8404	Register an application .
8405	Run the application .
8406	Get model name
8407	Get the icon
8408	Set cookie value
8409	Clears the cookie .
8410	Connect to the database .
8411	Disconnect all servers .
8412	Check if the connection is connected .
8413	Get the link
8414	Get master link
8415	Begin a transaction .
8416	Commits a transaction .
8417	Roll back a transaction .
8418	Register a database .
8419	Get a database instance .
8420	Render widget .
8421	Get the texture .
8422	Add a notice board item .
8423	Display mapping .
8424	Generate models .
8425	Get all active active users .
8426	Gets all active periods for the given production .
8427	Get a controller .
8428	Get file icon
8429	Get the icon icon .
8430	Returns the icon icon for the given file type .
8431	Start polling .
8432	Get the DSN from the database .
8433	Migrate migration .
8434	Write a migration .
8435	Deletes the table .
8436	Fetch an array of rows from the database .
8437	Returns the number of rows in the database .
8438	Set post link .
8439	Complete the list of files and editor links .
8440	Create a post .
8441	Update post form .
8442	Render an array .
8443	Exit the job .
8444	Checks if the request is valid .
8445	Get the user from the message .
8446	Convert a question .
8447	Send a POST request .
8448	Broadcast a message .
8449	Add a contact
8450	Rename a contact
8451	Set profile photo photo
8452	Check if the file exists and size and size
8453	Determine the filename of the media file .
8454	Download media from URL
8455	Set the arguments for the next command .
8456	Execute a command
8457	Injects command line arguments .
8458	Update database .
8459	Get the current version
8460	Execute a command
8461	Get current page
8462	Get the base url
8463	Returns the protocol protocol .
8464	Get domain name
8465	Get uri
8466	Set url params
8467	Adds backslash to the given URI .
8468	Get all active handlers .
8469	Log an emergency message .
8470	Log an alert message .
8471	Log a critical message .
8472	Log an error message .
8473	Writes a warning message .
8474	Write a notice .
8475	Log a debug message .
8476	Log a message .
8477	Delete handler .
8478	Log a message .
8479	Bootstrap events .
8480	Run event handler .
8481	Get name by id
8482	Returns the operating system operating system .
8483	Get the kernel version
8484	Get hostname
8485	Get the CPU model
8486	Get the CPU vendor
8487	Get the current CPU frequency
8488	Get the current CPU
8489	Get CPU architecture
8490	Get the boot time
8491	Get the number of cores
8492	Returns the total memory of the system .
8493	Set the fee list .
8494	Create a new FulfillmentOrder
8495	Get the fulfillment order
8496	Get the fulfillment preview preview .
8497	Get package tracking details .
8498	List all FulfillmentOrders .
8499	Update FulfillmentOrder
8500	Set curl options
8501	Set the GetMatchingProductForIdResult field s value .
8502	Set Marketplace Id list
8503	Set the GetCompetitivePricForASnResult field s value .
8504	Confirm a request .
8505	Create an InboundShipment
8506	Retrieves the bill of a bill of billing .
8507	Get package labels
8508	Get the PrepInstructions for a given request .
8509	Get the PrepInstructionsForSKU
8510	Get transport content .
8511	List inbound shipment items .
8512	List inbound shipment items by next token
8513	List InboundShipments
8514	List inboundShipmentsByNextToken
8515	Put transport content .
8516	Update InboundShipment
8517	Set InventoryRecommendations value
8518	Set the selection recommendations .
8519	Sets the PriceRecommendations value .
8520	Sets the fulfillmentRecommendations value .
8521	Set the listingQualityRecommendations value .
8522	SetGlobalSellingRecommendations value
8523	Set AdvertisingRecommendations value
8524	Set item list
8525	Sets the SellerSKU value .
8526	Returns a list of FinancialEvent groups .
8527	Convert a list of FinancialEventsGroups to an array .
8528	Retrieves a list of security groups by the given request .
8529	Returns a list of FinancialEvents .
8530	Convert a list of FinancialEvents to an array .
8531	Returns a list of FinancialEventsByToken objects .
8532	Convert a request to a list of FinancialEventsByToken objects .
8533	SetDebtRecoveryItemList value
8534	Set chargeInstrumentList value
8535	Set the ID field .
8536	Set RentalChargeList value
8537	Set RentalFeeList value
8538	Sets the offer value .
8539	Sets the value for this ASINResult .
8540	Set member value
8541	Compile the message
8542	Set plural form .
8543	Set the shipment event list .
8544	Sets the refund event list .
8545	SetGuaranteeClaimEventList value .
8546	Set chargeback event list
8547	SetPayWithAmazonAmazonAmazonEventList value .
8548	Set ServiceProviderCreditEventList value
8549	SetRetrochargeEventList value
8550	Set RentalTransactionEventList value
8551	Set the performanceBondRefundEventList value .
8552	Set ServiceFeeEventList value
8553	SetDebtRecoveryEventList value
8554	Set the loan servicing event list .
8555	Set the adjustment event list .
8556	Parse a DOMElement .
8557	Set field type
8558	Sets the financial event group list .
8559	Set the error field .
8560	Sets the product value .
8561	Cancel a shipment
8562	Create a shipment .
8563	Convert a request to a shipment .
8564	Get eligible shipping services .
8565	Convert GetEligibleShippingServices to parameters
8566	Get shipment details .
8567	Convert a request to a request .
8568	Sets the category query list .
8569	Sets the SKUPrepInstructions field s value .
8570	Get the last updated time for the given request .
8571	List all recommendations .
8572	Convert ListRecommendations to ListRecommendations
8573	List recommendations by next token
8574	Sets the value for the get_price_ForSKURESULT_SKURESULT_SKURESULT_SKURESULT_SKURESULT_SKURES_SKURESULT_SKURESULT_SKURESULTESULTESULT_VALUE_VALUE_VALUE_VALUE_VALUE_VALUE_VALUE
8575	Set ItemChargeList value
8576	Set ItemChargeAdjustmentList value
8577	Sets the itemFeeList field s value .
8578	Sets the itemFeeAdjustmentList value .
8579	Set PromotionList value
8580	Set the PromotionAdjustmentList value .
8581	Set prepruction value
8582	Set the field value .
8583	Gets the list of offerings for the given SKU .
8584	Sets the ASIN field value .
8585	Sets the product group list .
8586	Sets the Competitive price value .
8587	Sets the lowestOfferListing field value .
8588	Sets the ASINPrep instructions .
8589	Sets the report schedule
8590	Set the GetMatchingProductResult field value .
8591	Set status .
8592	Set the filter options .
8593	List orders .
8594	List orders by next token
8595	Get service status .
8596	Lists marketplace participants .
8597	Lists the MarketplaceParticipationsByNextToken .
8598	Create a subscription .
8599	Convert a request to a subscription .
8600	Delete subscription .
8601	Convert a request to a delete subscription .
8602	Deregisters a destination .
8603	Convert a request to a Deregister destination
8604	Get a subscription .
8605	List registered destinations .
8606	List subscriptions .
8607	Convert a list of subscriptions to a list of subscriptions .
8608	Register destination .
8609	Convert a request to an array .
8610	Updates a subscription .
8611	Convert a subscription to a subscription .
8612	Sets the market value .
8613	Sets the adjustment item list .
8614	Sets the feedSubmissionInfo list .
8615	Set salesRank value
8616	Set the ID of the field .
8617	Set invalid SKU value .
8618	Remove a block .
8619	Get block by key
8620	Parse the source file .
8621	Compile the block .
8622	Sets the GetLowOfferListingsForSKUultrultrultsForSKUultrultrides .
8623	SetOfferListingCount value
8624	Sets the shipping service list .
8625	SetTemporarilyUnavailableCarrierList value .
8626	Sets theTermsAndConditionsList field s value .
8627	This method sets the GetCompetitivePricForSKUulting field s value .
8628	Creates a new Marketplace object from XML .
8629	Sets theParticipation field s value .
8630	Sets the GetLowOfferListingsForASINResult value .
8631	Set report info
8632	Sets the report request request information .
8633	Sets the orderChargeList value .
8634	Sets the orderChargeAdjustmentList value .
8635	Set the shipment fee list .
8636	Set the shipment fee adjustments list .
8637	Sets the orderFeeList field s value .
8638	Sets the orderFeeAdjustmentList value .
8639	Set the direct payment list .
8640	Set the shipment item list .
8641	Set the shipment adjustments list .
8642	Get report request list by next token
8643	Cancel report requests
8644	Get report request count
8645	Parse HTTP header .
8646	Get default cURL options
8647	Configure curl options
8648	Add required parameters
8649	Calculates a string to be used to sign the request .
8650	Returns the formatted timestamp for the given date .
8651	Convert a request to a request .
8652	Convert a request to a getReportScheduleCount
8653	Convert UpdateReportAcknowledgements to JSON .
8654	Converts a submit request to a submit request .
8655	Convert a request to a request count .
8656	Convert a request to a list of feed submissions .
8657	Convert a request to a CancelFeedSubmission
8658	Converts a request to a request .
8659	Convert a request to a list of FeedSubmissionCounts
8660	Convert a request to an array .
8661	Convert GetFeedSubmissionResultResult to JSON
8662	Convert a request to a ListFeedSubmissionList
8663	Convert a request request request to an array .
8664	Converts a request to a ManageReportSchedule object .
8665	Converts a request request request to a request .
8666	Sets the invalidASIN field value .
8667	Sets the message value .
8668	Set the field s value .
8669	Compute file system differences .
8670	Creates a new collection from a collection .
8671	Combine two arrays .
8672	Iterate over the items in the collection .
8673	Iterate over all items in the collection .
8674	Map keys to keys .
8675	Merge a list of items .
8676	Flip an array of items .
8677	Returns a new collection with unique items .
8678	Returns a new collection of items .
8679	Sorts the collection .
8680	Sorts the items in the collection .
8681	Set a value in the bag .
8682	Set a path to the bag .
8683	Converts an iterable to an array .
8684	Creates an array from an iterable .
8685	Sets the value of an array .
8686	Remove a value from an array
8687	Replace recursive recursively .
8688	Checks if an array has an array of arrays .
8689	Flatten an iterable .
8690	Validate element values
8691	Create symlink file .
8692	Checks if a symlink exists .
8693	Creates a symlink .
8694	Parse a size string .
8695	Format a number of bytes .
8696	Configure configuration .
8697	Validate mandatory attributes
8698	Get attribute value
8699	Creates a new SVG element
8700	Append an element to the container .
8701	Returns the string representation of the element .
8702	Save element to file
8703	Register view composer .
8704	Apply the model to the database .
8705	Extend model .
8706	Set the last folder ID
8707	Get the last folder ID
8708	Select columns .
8709	Qualify the given columns .
8710	Add a where clause .
8711	Add a where clause .
8712	Create a WHERE clause .
8713	Add a WHERE clause .
8714	Adds a sub query to the query .
8715	Get access token .
8716	Create a new model instance .
8717	Create a new model .
8718	Create a new model .
8719	Get the current translation .
8720	Initialize the translations .
8721	Get the translations from the database .
8722	Translate a locale .
8723	Translates a locale .
8724	Get the translations .
8725	Get the translation model .
8726	Check if the current locale is fallback .
8727	Get dirty attributes .
8728	Change the current folder
8729	Update the folder name
8730	Returns true if the user can select a folder .
8731	Whitelist address .
8732	Performs a challenge .
8733	Update the model .
8734	Increments the number of records .
8735	Decrement the value of a column .
8736	Insert data into database .
8737	Insert a new record into the database .
8738	Filters the given values .
8739	Update the database .
8740	Get the query query .
8741	Get the delete query .
8742	Set the keys for the model .
8743	Start listening .
8744	Run the loop .
8745	Reset the listener .
8746	Get listener instance .
8747	Select the stream .
8748	Add a method call
8749	Load services from registry
8750	Dumps a value to a container .
8751	Add current message .
8752	Add a definition .
8753	Register a definition provider .
8754	Start the loop .
8755	Build a tracker .
8756	Builds a new subscription .
8757	Run a collection of items .
8758	Perform a tick .
8759	Perform a POST request .
8760	Set line prefix map
8761	Write a tick to the log
8762	Upload a photo
8763	Delete a file .
8764	Create a unique filename .
8765	Returns the next available variable name .
8766	Load configuration files .
8767	Register base bindings .
8768	Register application aliases .
8769	Bootstrap the application .
8770	Bind paths to container .
8771	Register providers .
8772	Register a service provider .
8773	Register core container aliases .
8774	Get the base url .
8775	Get admin url
8776	Get the route .
8777	Get asset url
8778	Redirect to the URL .
8779	Get the current segment
8780	Returns the scheme .
8781	Save HTML to the cache
8782	Finish the file .
8783	Register publishes .
8784	Log a message .
8785	Returns full URL with query parameters .
8786	Generate migration commands .
8787	Render a script .
8788	Generates a link .
8789	Render an image .
8790	Link an asset .
8791	Render a meta tag .
8792	Generates HTML tag .
8793	Set environment key .
8794	Write new environment file with given key .
8795	Render a view .
8796	Get a helper function .
8797	Trigger an event .
8798	Register directives .
8799	Make a password hash
8800	Checks if the given hash is valid .
8801	Sets a session variable
8802	Get a value from the session .
8803	Set flash message
8804	Get a flash message .
8805	Get the driver .
8806	Checks if the given alias exists .
8807	Sets a cookie
8808	Get cookie value
8809	Delete a cookie
8810	Removes all cookies
8811	Set a header
8812	Render a view .
8813	Render a blade view .
8814	Get post data
8815	Get a GET request
8816	Get input data
8817	Delete data from the database
8818	Get a list of files
8819	Get the current server value .
8820	Get client IP address
8821	Filters given data .
8822	Add rules .
8823	Add a rule .
8824	Get error message
8825	Checks if the given data is valid .
8826	Converts a migration name to a class name .
8827	Generate the token
8828	Creates an image .
8829	Generates an option .
8830	Get selected value .
8831	Returns true if the given value is checked .
8832	Tokenize a string .
8833	Generate code from pattern
8834	Get the process observer .
8835	Get the environment for the operating system .
8836	Set max retries
8837	Check if the timeout is exceeded .
8838	Get the status of the process .
8839	Reads all stdout streams .
8840	Set the exit code .
8841	Generate the URL for the page .
8842	Converts string to array
8843	Save the user
8844	Log a message .
8845	Builds the theme .
8846	Get blog posts .
8847	Get archived blog posts .
8848	Get blog posts
8849	Display a category .
8850	Get RSS feed .
8851	Get paginated list
8852	Get current tag
8853	Get current category
8854	Get archive year
8855	Get the date of the archive .
8856	Increments the number of retries .
8857	Relink relative symlink to target directory
8858	Creates an absolute symlink .
8859	Copy files to target directory .
8860	OnPublish event .
8861	Checks if the current content is a draft .
8862	Returns the link to the archive .
8863	Gets the HTML fragment for this field .
8864	Adds the query to the query .
8865	Run the task .
8866	Run a task .
8867	Log a task .
8868	Notify all runners .
8869	Attach runner .
8870	Detach runner .
8871	Add an event listener .
8872	Build the attachment part .
8873	Build headers .
8874	Add an attachment
8875	Get mime type
8876	Sends the message to the sender .
8877	Format a date
8878	Send a signal to the process .
8879	Checks if the given path is valid .
8880	Check if the full path is valid .
8881	Checks if a relative path is valid .
8882	Checks if the given command is valid .
8883	Get the quote .
8884	Build a list of packages .
8885	Sends the request
8886	Parses the response .
8887	Checks if options are valid .
8888	Processes the request .
8889	Registers a service .
8890	Get the value of a key .
8891	Register a singleton service .
8892	Consume a container
8893	Register a factory .
8894	Initialize the schema .
8895	Initialize event listeners .
8896	Get all records from the database .
8897	Insert multiple records .
8898	Update an existing record .
8899	Updates an existing record .
8900	Updates the record by the given parameters .
8901	Update a batch of records .
8902	Delete a record
8903	Delete a record by a given condition .
8904	Deletes all records in the database .
8905	Drop down dropdown
8906	Returns the count of all records .
8907	Get the number of autoincrement
8908	Set the creation time .
8909	Serialize a row .
8910	Get callable function .
8911	Apply soft delete filter .
8912	Fetch primary key
8913	Set WHERE clause
8914	Decode a value
8915	Encodes a value into a base64 .
8916	Parses a subject entry .
8917	Get a message
8918	Get messages .
8919	Parse the authority .
8920	Parse a relation .
8921	Parse relationships .
8922	Apply a patch to the target document .
8923	Generate a patch document .
8924	Merge two patches .
8925	Map JSON data to target class
8926	Fetch all config files
8927	Fetch a generator by name .
8928	Add a generator .
8929	Generate a stack icon .
8930	Get a stack icon element .
8931	Add route .
8932	Loads the dependencies .
8933	Add a dependency .
8934	Fetch a template
8935	Add a template .
8936	Create changeset .
8937	Read changeset .
8938	Update changeset .
8939	Close changeset .
8940	Download changeset .
8941	Expands the changeset changeset changeset .
8942	Query changeset
8943	Upload changeset changeset changeset
8944	Get details of the user .
8945	Replace the preferences .
8946	Change user preference .
8947	Upload a file .
8948	Download the details of a trace
8949	Constructs the URL for the given request .
8950	Add routers .
8951	Get capabilities .
8952	Retrieve map data
8953	Create a new node
8954	Create a new gateway
8955	Create a new relation .
8956	Get ways for a node
8957	Redact a node
8958	Validate response .
8959	Prepare array parameter
8960	Send a request to the server
8961	Parse Mink response .
8962	Extracts the criteria from an array
8963	Extracts the date criteria from the given criteria .
8964	Checks if the given key matches the given criteria .
8965	Rewrite count query
8966	Check if currency code exists
8967	Clean currency code .
8968	Load rates .
8969	Initialize storage .
8970	Converts a Rate object to JSON .
8971	Create a Rate object from JSON .
8972	Paginate rates .
8973	Filter the sources .
8974	Set output format
8975	Parses a CSV file .
8976	Returns the type of the given argument .
8977	Set parameter value
8978	Get the rate key for the given currency .
8979	Initialize the table .
8980	Builds a Rate from a table .
8981	Checks if the given rate criteria matches the given criteria .
8982	Filter configurations by criteria .
8983	Assert that two tables are equal .
8984	Assert that two tables are equal .
8985	Compare two tables .
8986	Get column columns
8987	Parse a HTTP status line .
8988	Returns a string representation of the status code .
8989	Get a template
8990	Get templates .
8991	Builds an Elgg entity .
8992	Get the attribute names for the entity .
8993	Computes the probabilities for each sample .
8994	Update session data
8995	Add actions to the controller
8996	Build namespace .
8997	Checks if the directory is empty .
8998	Checks if the path exists .
8999	Check if a file exists
9000	Fixes directory separators .
9001	Display the user .
9002	Display the time .
9003	Add extra tablen
9004	Display a dropdown dropdown
9005	Get log level
9006	Create a new entity instance
9007	Sort the list by priority .
9008	Prepare column .
9009	Sets a decimal number .
9010	Create a new character type
9011	Set tinytext type
9012	Set text type
9013	Set the medium text .
9014	Create a longtext type .
9015	Get the root model .
9016	Mark all notifications .
9017	Get words from a string .
9018	Get action words .
9019	Get keywords from a string .
9020	Get unique words .
9021	Returns a list of words in a string .
9022	Get stop words .
9023	Checks if the given string contains confirmation words .
9024	Determine if the given string contains the given word .
9025	Checks if a string contains a URL .
9026	Checks if a string contains email address
9027	Check if a question is a question .
9028	Returns a collection of samples .
9029	Displays a 404 response .
9030	Print an exception .
9031	Execute a callback .
9032	Loads the class metadata .
9033	Maps a field to a datetime .
9034	Initializes the lock file .
9035	Persist a topic .
9036	Insert an entity into the database .
9037	Update an entity .
9038	Execute query .
9039	Get entity by hash
9040	Returns the position of the column .
9041	Get environment value .
9042	Empty environment variables .
9043	Writes a log message .
9044	Checks if the file is rotation .
9045	Get the configuration .
9046	Register a type .
9047	Returns the type of a data type .
9048	Render the form fields .
9049	Render buttons .
9050	Checks the log level .
9051	Get a message with the given severity level .
9052	Get menu items .
9053	Handles recursive menu items .
9054	Create a relation table .
9055	Add a new column to the table .
9056	Change columns .
9057	Add primary key .
9058	Add a foreign key .
9059	Add a unique key .
9060	Set primary key .
9061	Get table data .
9062	Get table schema .
9063	Get the keys from the database .
9064	Attach shared events .
9065	Check if the view is valid .
9066	Persist a message .
9067	Boot the UUID for the model .
9068	Convert value to string
9069	Removes expired entries .
9070	Parses an array of parts .
9071	Prepare an exception .
9072	Run a query .
9073	Get routes .
9074	Get route information .
9075	Add a rule .
9076	Add a tag .
9077	Add a new rule collection .
9078	Parses the request context .
9079	Parse uri .
9080	Parses a request element
9081	Parse request parameters .
9082	Parse remote host
9083	Parse GET request cookies
9084	Add a new definition .
9085	Returns the alias for the given abstract .
9086	Returns the name of the detector .
9087	Add a detector to the queue .
9088	Returns a slurp string .
9089	View body .
9090	Check if the field is multipart
9091	Normalize options .
9092	Put a page partial
9093	Get page partials
9094	Handle action .
9095	Validate the action .
9096	Updates the entity .
9097	Called when the module is added .
9098	Init theme manager
9099	Serve the socket .
9100	Bind to the socket .
9101	Listen on socket .
9102	Builds the SQL query .
9103	Parse the message .
9104	Parse user input .
9105	Parse the time .
9106	Get the theme object .
9107	Get the mvcLayout for the given event .
9108	Get the theme name .
9109	Get the resolver object
9110	Get the path name of the theme .
9111	Get theme config
9112	Sets the visitTime value .
9113	Initialize the controller .
9114	Register the controller .
9115	Set default actions
9116	Register a view .
9117	Unregister a view .
9118	Get view best match
9119	Register a controller .
9120	Register router .
9121	Retrieve the HTTP headers .
9122	Prepare the request .
9123	Parse and parse the response .
9124	Appends the payload to the request .
9125	Handle a header .
9126	Perform a request .
9127	Check if the connection is ready .
9128	Checks if the payload is allowed .
9129	Set the interceptor
9130	Create a new route .
9131	Loads a configuration file .
9132	Validate configuration .
9133	Get a route by name
9134	Set the last post post
9135	Parse a URL .
9136	Clear a tag .
9137	Call a callable .
9138	Formats the given parts of the given parts .
9139	Parse a URI .
9140	Parse a request string .
9141	Get parameter value .
9142	Get all params
9143	Get parameter value
9144	Generate a random string
9145	Reset locale .
9146	Returns the value of the given key .
9147	Open socket .
9148	Mark a user as read .
9149	Mark a user as read .
9150	Fetch all rows from the database .
9151	Get select options
9152	Render the field output .
9153	Gets the url string .
9154	Parse parameters .
9155	Parse annotations .
9156	Get controller settings .
9157	Call the action .
9158	Add control controls
9159	Redirect to the controller .
9160	Adjust the request headers .
9161	Parses the parsed header .
9162	Adjust the number of bytes .
9163	Get the header value .
9164	Parse a node .
9165	Returns a list of fields for the given entity .
9166	Get validation status
9167	Set field validation status
9168	Parse a URL string .
9169	Set timestamp created .
9170	Update company profile .
9171	Get controller plugin config
9172	Get view helpers
9173	Reverse menu items .
9174	Converts a list of items to a flat array .
9175	Get the URL from a route .
9176	Get all plugins .
9177	Maps a value to a boolean .
9178	Get database by id
9179	Get the database configuration .
9180	Get view settings .
9181	Clears the cache .
9182	Store a value in the cache .
9183	Remove a key from cache
9184	Get remember key .
9185	Convert data to array
9186	Merge multiple parameters
9187	Embeds a campaign
9188	Connect to the endpoint
9189	Get presenter instance .
9190	Renders the current class .
9191	Convert an identifier to a format .
9192	Initializes the theme .
9193	Initialize the theme .
9194	Add a child .
9195	Set the themes path
9196	Get theme config
9197	Gets the category tag .
9198	Get the redirect URL for the user .
9199	Get access token
9200	Upload media files .
9201	Create a bearer token .
9202	Create a new OAuth token
9203	Perform a GET request .
9204	Get an endpoint
9205	Initialize the seed file .
9206	Import tables .
9207	Import a table .
9208	Truncate a table .
9209	Find the primary key
9210	Print validation errors .
9211	Get the seed file .
9212	Checks if the given file exists .
9213	Returns an option parser .
9214	Create a new static page .
9215	Update a single page .
9216	Delete a model
9217	Parse page links .
9218	Convert a page number to a key
9219	Request page number
9220	Request all pages
9221	Checks if an offset exists .
9222	Serialize the request .
9223	Unserialize data
9224	Setup the authorization token .
9225	Preprocess data .
9226	Get a GET request .
9227	Post a POST request .
9228	Perform a PUT request .
9229	Delete a POST request
9230	Performs a PATCH request .
9231	List all posts
9232	View model .
9233	Create a new post
9234	Update blog category
9235	Create a new banner .
9236	Update an existing banner .
9237	Returns an error message for the given paths .
9238	Generate the text for the given path .
9239	Checks if the foreign key is in inheritance relation .
9240	Render language switcher .
9241	Returns the URL for the given language .
9242	Loads config files .
9243	Set cookie and locale
9244	Load configuration files .
9245	Parse dynamic route .
9246	Replace occurrences of a string with the given string .
9247	Convert a string to a string .
9248	Convert a string to a string .
9249	Generate the path for a route .
9250	Boot the application .
9251	Add a compiler .
9252	Initializes the container .
9253	Get container initializer .
9254	Handle request .
9255	Get the root directory
9256	Set a service .
9257	Get a container .
9258	Dump the container .
9259	Add a route .
9260	Check if data is cached .
9261	Add a route .
9262	Add route .
9263	Add a named route .
9264	Create a controller .
9265	Set services .
9266	Create a string from a string .
9267	Renders the given string .
9268	Set timeout minutes .
9269	Set the phase phase .
9270	Load configuration file .
9271	Set uri .
9272	Convert data to multipart form
9273	Parse HTML code .
9274	Get service config
9275	On bootstrap event .
9276	Validates the given data .
9277	Render a REST request .
9278	Fetches data from the database
9279	Save a job .
9280	Delete a WHERE clause
9281	Get all pending jobs .
9282	Get all running jobs .
9283	Checks if the source file exists .
9284	Checks if the given CSS file exists .
9285	Compile a file .
9286	Create the database .
9287	Drop a table .
9288	Removes all jobs from the database .
9289	Get the duration of the execution .
9290	Apply serialize metadata to array
9291	Add the grid to the grid .
9292	Gets the endpoints node .
9293	Get the assets URL .
9294	Sets theme defaults .
9295	Build custom fields .
9296	Update documents .
9297	Update the form .
9298	Get the home forums .
9299	Handles a batch request .
9300	Set options .
9301	Sets the schedule ahead time .
9302	Sets the scheduleLifetime value .
9303	Sets the success log time .
9304	Set the failure log time .
9305	Set emit events .
9306	Set the allowed Json API .
9307	Set the JSON API security hash .
9308	Register Ckan API client .
9309	Get a single record .
9310	Performs a POST request .
9311	Execute a GET request .
9312	Display index action .
9313	Display information about the database .
9314	Clear storage table .
9315	Check if the request is acceptable .
9316	Filters an image from a region
9317	Performs the transformation of an image .
9318	Rotate the image
9319	Render Markdown .
9320	Returns the list of available methods .
9321	Compile MarkdownEcho .
9322	Register Markdown environment .
9323	Register Markdown parser .
9324	Register Markdown markup .
9325	Register Markdown .
9326	Register Markdown engines .
9327	Register Markdown engine .
9328	Register Markdown .
9329	Register Markdown blade engine .
9330	Returns an array of image filters .
9331	Apply a region to the image
9332	Require field .
9333	Create a new FontIconField
9334	Get the degrees of this float
9335	Returns the number of radians .
9336	Returns the value of the turn .
9337	Checks if the given angle is complementary .
9338	Checks if the given angle is supplementary .
9339	Get a value by key .
9340	Load configuration files .
9341	Set the value of a key
9342	Populate array
9343	Add a new row
9344	Add a new column
9345	Get a single row
9346	Get a column by index
9347	Checks if the matrix is diagonal
9348	Check if this matrix is equal to another matrix .
9349	Returns true if the given matrix is a multiplication factor .
9350	Transpose this array to a new one .
9351	Add a matrix to the matrix
9352	Compute the coefficient matrix
9353	Returns the inverse matrix of the matrix .
9354	Subtract a matrix from the matrix .
9355	Computes the determinant of the matrix .
9356	Returns a new instance with the given URI .
9357	Remove a header .
9358	Get the path of a module
9359	Finalize the response .
9360	Process middleware .
9361	Returns the norm of the matrix
9362	Returns the value of the argument .
9363	Add a value to this vector .
9364	Subtracts the number of elements .
9365	Multiplies the given z .
9366	Divide two numbers
9367	Returns true if two values are equal .
9368	Get global globals .
9369	Resolve the request .
9370	Handle the request .
9371	Initiates the integration .
9372	Runs the server .
9373	Display the output .
9374	Creates a dispatcher .
9375	Render a template .
9376	Checks if the given path matches the given template .
9377	Extract data from an array
9378	Get the list of files .
9379	Parse route .
9380	Retrieve route .
9381	Set a concrete value .
9382	Get a tag
9383	Get class name
9384	Get all icons
9385	Gets an array of icons .
9386	Retrieve a route by URI
9387	Register a RESTful route .
9388	Set the namespace .
9389	Parse route .
9390	Returns the sort value of the sort order .
9391	Gets the sort value for this column .
9392	Returns a list of skip rows .
9393	Set the status of the response .
9394	Executes the command .
9395	Builds the command .
9396	Set an array of strings
9397	Escape options .
9398	Get the build builder .
9399	Compute the number of integers .
9400	Export the messages
9401	Sets the HTTP response .
9402	Build the command .
9403	Create a collection of components .
9404	Prepare a collection .
9405	Push middleware to stack
9406	Checks if the middleware is a middleware .
9407	Creates a callback for the middleware .
9408	Resolve the given index .
9409	Transform middleware .
9410	Collect all routes .
9411	Throw exception if not found
9412	Get the authority .
9413	Creates a new instance of Uri instance .
9414	Returns the variance of the variance
9415	Set the precision number .
9416	Returns the maximum value of the given function .
9417	Calculate the fwhm
9418	Calculates the f .
9419	Returns an array of random samples .
9420	Search for icons
9421	Returns the contents of the stream .
9422	Returns the metadata of the stream .
9423	Returns the size of the file .
9424	Write a string to the stream .
9425	Returns the frequency of the frequency
9426	Build the command .
9427	Render a template
9428	Update the field s fields .
9429	Gets the font icon classes .
9430	Get font icon
9431	Collect all routes .
9432	Returns a random number of floats
9433	Checks if the given float is valid .
9434	Set rho .
9435	Set theta value
9436	Generate a Complex
9437	Get multiple items
9438	Reset the matrix
9439	Alias alias .
9440	Returns the value of the given instance .
9441	Get a random number
9442	Get many items without replacement .
9443	Set pack options
9444	Get package name
9445	Get the mappings for the entity .
9446	Get configs path
9447	Get the symlinks for a container .
9448	Get package path
9449	Check if method is allowed
9450	Extract the path from the path .
9451	LogDL stat details .
9452	Performs a query .
9453	Get a collection of documents .
9454	Parse a string
9455	Get query query .
9456	Get offset offset
9457	Add a countable attribute
9458	Register admin routes .
9459	Get tickets by id
9460	Delete tickets .
9461	Append a value to the filter .
9462	Get the event map .
9463	Compose the sidebar .
9464	Register log view .
9465	Returns a summary of the summary .
9466	Get server modules .
9467	Initialize the object .
9468	Register routes .
9469	Register log views .
9470	Load groups .
9471	Sets paginate items
9472	Displays a delete action .
9473	Deletes a failed failure .
9474	Read a single value
9475	Remove quotes from a string
9476	Get start date
9477	Returns a list of all the downloaded downloads .
9478	Get list of download days
9479	Respond to the response
9480	Set the error code
9481	Respond to the response
9482	Prepare folders .
9483	Convert this entity to an array
9484	Create a new object from an array
9485	Checks if the model is created .
9486	Checks if required fields are set .
9487	Install modules .
9488	Returns a list of pages .
9489	Get file data
9490	Get file data
9491	Returns the list of files for the given field .
9492	Get application size .
9493	Get folder size
9494	Format the number of bytes .
9495	Creates a Sphinx client .
9496	Get a paginated collection .
9497	Get a single resource
9498	Save an entity
9499	Processes a request .
9500	Returns true if the given event is supported .
9501	Watch files .
9502	Run pidot .
9503	Join the given parts .
9504	Listen for plugins
9505	Display the dashboard .
9506	List log views .
9507	Show a log .
9508	Show log by level .
9509	Search for a log entry .
9510	Download a log .
9511	Deletes a log .
9512	Get the list of log views .
9513	Set match mode
9514	Add faceted query
9515	Initialize logger .
9516	Set the current settings .
9517	Create a new database .
9518	Returns the usage string .
9519	Returns a string representation of the property .
9520	Get alias usage .
9521	Add a new alias .
9522	Updates a document .
9523	Get the config
9524	Deploy the project .
9525	Parse arguments .
9526	Validate the required parameters .
9527	Parse multiple arguments
9528	Parse a single parameter .
9529	Validate required parameters
9530	Initialize the parser .
9531	Respond to the default response
9532	Preload aliases .
9533	Preload parameters .
9534	Parse the given argument .
9535	Parse a variadic parameter .
9536	Check if a parameter exists .
9537	Get the prefix of a parameter
9538	Get parameter name
9539	Get the closure for a parameter
9540	Get parameter closure
9541	Decode response .
9542	Run sync action .
9543	Get all messages .
9544	Returns a list of all parameters for the given parameter .
9545	Create a virtual table .
9546	Counts the number of rows in the database .
9547	Returns the rank of the text .
9548	Validate the uploaded file .
9549	Set the PDO connection
9550	Get the PDO instance
9551	Sets the order by name .
9552	Allow mime types
9553	Add extensions .
9554	Set the naming convention .
9555	Get the upload handler .
9556	Add a parameter closure .
9557	Add multiple parameters .
9558	Returns the full usage string .
9559	Resolve error handler .
9560	Renders the close button .
9561	Make a response .
9562	Checks if the given handler is a type hint .
9563	Call an error handler .
9564	Create a FatalErrorException .
9565	Add before hook
9566	Add an after hook .
9567	Register a configurator .
9568	Invokes the given configurator .
9569	Set the container .
9570	Add middleware
9571	Boot the application .
9572	Boot the application .
9573	Register providers .
9574	Register provider .
9575	Resolve the stack builder .
9576	Resolve the kernel .
9577	Register Materialize plugin
9578	Register the plugin .
9579	Register a new logger .
9580	Define a deferred channel .
9581	Get a channel .
9582	Get field validation options
9583	Add a new route
9584	Returns the route for the given request .
9585	Returns the full name of the URL .
9586	Create a form field .
9587	Returns the value of an attribute .
9588	Checks if the given node is set .
9589	Render dropdown list
9590	Renders a radio button .
9591	Renders a radio list .
9592	Render a checkbox .
9593	Generates a list of checkbox items .
9594	Make a session handler .
9595	Create a session storage instance .
9596	Create a new session .
9597	Set flash messages .
9598	Flash input .
9599	Create a redirect response .
9600	Returns the number of squares .
9601	Add a vector to this vector .
9602	Returns the dot product of this vector .
9603	Returns the cross product of this vector .
9604	Calculate the cross product of a b .
9605	Computes the vector of two vectors .
9606	Multiply by scalar .
9607	Projects a b .
9608	Returns the angle between two vectors .
9609	Checks if vectors are equal .
9610	Returns the URL for a route .
9611	Returns the absolute path of the asset .
9612	Returns the root URL for the current request .
9613	Register the Guzzle client .
9614	Authenticate the given token .
9615	Add a manager to the registry .
9616	Register commands .
9617	Register a subscriber .
9618	Register a stack middleware .
9619	Check if the captcha is valid
9620	Perform a POST request
9621	Returns the query string .
9622	Get a PDO instance .
9623	Get connection configuration .
9624	Create a session handler .
9625	Get a character by id
9626	Get all resources
9627	Checks if the given route matches the given parameters .
9628	Validate parameters .
9629	Get route identifier .
9630	Verify uploaded file .
9631	Set a setting value .
9632	Get a setting value .
9633	Validate the field name .
9634	Get the form field .
9635	Read file contents .
9636	Write a file to a file .
9637	Handle authentication request .
9638	Returns an array of attributes .
9639	Set url
9640	Rebuild URL .
9641	Validate the external URL .
9642	Resolve a path .
9643	Get the driver s driver .
9644	Map parameters .
9645	Make a PDO instance .
9646	Build the route .
9647	Removes a parameter from the route builder .
9648	Get all constant values for a given class identifier .
9649	Returns the mapping for the given class name .
9650	Delete this option
9651	Duplicates this node .
9652	Initialize the form field .
9653	Add a loader .
9654	Get the loader for a given path .
9655	Adds a route to the route .
9656	Merge multiple routes .
9657	Register routes .
9658	Creates a writer .
9659	Creates a reader .
9660	Identify a file .
9661	Returns a reader for the given file .
9662	Get reader type from filename
9663	Register a writer .
9664	Register a reader .
9665	Set a custom header
9666	Writes a fill to the object .
9667	Write a gradient fill .
9668	Write a pattern fill .
9669	Write a font .
9670	Write a border .
9671	Write a cell style .
9672	Write a border .
9673	Writes the number of numeric format to XML .
9674	Returns all the conditional styles in the spreadsheet .
9675	Get all fills in a spreadsheet
9676	Get all font fonts
9677	Returns all the borders in the spreadsheet .
9678	Returns a list of all the numbers in the spreadsheet
9679	Initialize the report .
9680	Get column display name .
9681	Loads contacts from XML element
9682	Initialize report .
9683	Get country name
9684	Get storage .
9685	Set storage .
9686	Returns an array with the given value .
9687	Serialize the collection .
9688	Returns the determinant of the matrix .
9689	Get data type
9690	Render a file
9691	Compile a file .
9692	Compile a string
9693	Get token by id
9694	Checks if a file is readable .
9695	Apply inline style .
9696	Create transactions .
9697	Find transaction type by name
9698	Generate HTML .
9699	Generate text .
9700	Generate an API request
9701	Creates a new XfWriter .
9702	Add a font
9703	Add a color
9704	Writes the worksheet .
9705	Calculates the offset of the sheet offset .
9706	Write all number formats
9707	Writes the defined name of the defined name .
9708	Write a short name .
9709	Write the codepage .
9710	Write the window1 header .
9711	Write a bound sheet .
9712	Write a sheet to the spreadsheet .
9713	Writes the referencesheet BIFFheet .
9714	Write style .
9715	Write a number format .
9716	Write the country code .
9717	Writes the record ID .
9718	Write the palette .
9719	Write a marker group .
9720	Sets the escher .
9721	Get sample samples .
9722	Write a spreadsheet to a spreadsheet .
9723	Get temporary folder
9724	Get the filename of a file
9725	Get a temporary filename .
9726	Write a file to the writer .
9727	Log a read message
9728	Initialize this instance from an XML element .
9729	Returns the date time .
9730	Set maxParcel dimensions .
9731	Checks if a file is read .
9732	Write font .
9733	Set the ARGB color
9734	Set RGB color
9735	Returns an indexed color indexed by index
9736	Sets the worksheet .
9737	Set the width
9738	Set the fitToHeight value
9739	Set the fit to width
9740	Get print area
9741	Returns whether the print area is set .
9742	Add a print area
9743	Set country .
9744	Set state .
9745	Set the city .
9746	Set the quarter .
9747	Set timezone .
9748	Check order status
9749	Calculates the size of the array
9750	Save pps to file
9751	Sets the images for the post .
9752	Set the posts to review .
9753	Get temp directory
9754	Assert that a file is readable .
9755	Checks if the given type is a valid type .
9756	Checks if the given value is greater than the given value .
9757	Assert that the value is less than the given value .
9758	Assert that the given value is equal to the given value .
9759	Checks if the string contains the given value .
9760	Checks if the given type matches the given type .
9761	Checks if the given class is equal to the given class .
9762	Checks if the target is empty .
9763	Assert that the value ends with the given value .
9764	Assert that the given value is equal .
9765	Checks whether the assertion is exist .
9766	Checks if the given class is an instance of the given class .
9767	Checks if the given value is less than the given value .
9768	Sets the length of the target .
9769	Match a regular expression .
9770	Matches the given format .
9771	Checks if the given value is less than the given value .
9772	Sets the property of the target .
9773	Checks if the target is readable .
9774	Satisfies the given predicate .
9775	Checks if a string starts with the given value .
9776	Throw exception .
9777	Checks whether the given range is within the given range .
9778	Assert that the target is writable .
9779	Assert that the given target is equal .
9780	Returns the length of the given value .
9781	Set flag .
9782	Parse an IF statement .
9783	Parse expression .
9784	Parse HTML .
9785	Parses an expression .
9786	Parses a escape string .
9787	Parse filter value
9788	Set conditions .
9789	Sets the bottom right position .
9790	Returns the formatted value .
9791	Returns the value of the cell
9792	Set data type
9793	Checks if the cell is valid .
9794	Returns the data validation for this cell .
9795	Set data validation .
9796	Check if the cell has a hyperlink
9797	Get the hyperlink of the cell .
9798	Set the hyperlink
9799	Compare two cells
9800	Set the chart renderer class
9801	Set libXmlLoader options
9802	Get the libXmlLoader options .
9803	Set the created date .
9804	Set the modified time .
9805	Read the default record .
9806	Read BSE record .
9807	Read blip image .
9808	Read an XML file .
9809	Read the client text box .
9810	Read the client anchor .
9811	Make a GET request .
9812	Perform a PUT request .
9813	Deletes a resource .
9814	Add entries to blacklist
9815	Sets the worksheet .
9816	Write raw data
9817	Set sheet view type
9818	Computes the polynomial regression .
9819	Sets the size of the memory segment .
9820	Get a column
9821	Shift a column
9822	Write relationships .
9823	Write workbook relationships .
9824	Write worksheet relationships .
9825	Writes the drawing relationships to the spreadsheet .
9826	Writes a relationship .
9827	Set the password
9828	Get the association name .
9829	Get association name .
9830	Get association menu name .
9831	Register resource .
9832	Set the revisions password .
9833	Set the workbook password
9834	Convert pixels to column width
9835	Create an image from bmp file
9836	Open a file .
9837	Create a request with the given parameters .
9838	Creates a response with the given data .
9839	Create a JSON - encoded request .
9840	Create a JSON - encoded response .
9841	Create a JSON - encoded request .
9842	Create a JSON response .
9843	Create a signed request .
9844	Create a signed JSON response .
9845	Creates a new request .
9846	Create a new request .
9847	Creates a new response .
9848	Create a signed request .
9849	Create a signed response .
9850	Convert a string to a stream
9851	Hash a password
9852	Set path
9853	Set the expiration time .
9854	Append data to the buffer .
9855	Writes BOF header .
9856	Add a header to the buffer .
9857	Check if cell is valid
9858	Checks if a cell is in a list
9859	Returns the stream data for the given stream .
9860	Get int4d value from data
9861	Write a dimension
9862	Write sheet format
9863	Write column widths
9864	Writes data validations .
9865	Writes the hyperlink to the XML writer .
9866	Write protected ranges
9867	Write merge cells .
9868	Write the print options .
9869	Write pageMargins .
9870	Write page setup .
9871	Writes the breaks of a sheet
9872	Write sheet data .
9873	Writes drawings to XML .
9874	Writes the legacy drawing .
9875	Write legacy drawing header
9876	Write a workbook .
9877	Write file version
9878	Write the workbookPr .
9879	Writes a book view .
9880	Writes the workbook protection .
9881	Write calendar to XML
9882	Write a sheet
9883	Writes the defined names to the spreadsheet .
9884	Writes the names of a spreadsheet .
9885	Write a definition for a named name .
9886	Writes the name of the auto filter .
9887	Initialize the permission
9888	Get the permission for a given code
9889	Parse a response .
9890	Parse an XML response .
9891	Create the hint .
9892	Create error message .
9893	Get input properties
9894	Add a shipping method
9895	Convert a string to a reference
9896	Convert a number to a number
9897	Convert a string to a string
9898	Convert a function to a string .
9899	Convert an error code to a string
9900	Advances the current token .
9901	Parse a formula .
9902	Checks if a cell address is in a delete range .
9903	Update cell reference
9904	Update cell range
9905	Update a single cell reference
9906	Map a color to a palette
9907	Sets the block size .
9908	Set position
9909	Set the position of the position
9910	Convert this object to an array
9911	Initialize the object from an array
9912	Initialize this object from XML
9913	Get field value
9914	Create menu .
9915	Renders the Spreadsheet .
9916	Configure models .
9917	Get relations for given model .
9918	Get the table name .
9919	Find column columns .
9920	Finds the related relations .
9921	Find many relation relations .
9922	Defines the relationship between two models .
9923	Require a parameter .
9924	Filter parameters .
9925	Handle collections .
9926	Handle arrays .
9927	Removes all required params
9928	Checks if value is empty .
9929	Handle unpermitted parameter
9930	Set the filter type .
9931	Get the rule .
9932	Add a rule .
9933	Set the rule type .
9934	Set the value of a column .
9935	Set column operator .
9936	Set column group .
9937	Checks if a sheet code is valid .
9938	Checks the given sheet title .
9939	Add a chart
9940	Calculate column widths
9941	Set the title
9942	Set protection .
9943	Set cell value .
9944	Returns the cell with the given column and row index .
9945	Creates a new cell .
9946	Check if a cell exists
9947	Get a row dimension
9948	Get column dimensions
9949	Returns the style for a given column .
9950	Duplicate a cell .
9951	Duplicate a cell style .
9952	Set a breakpoint
9953	Merge cells in a range
9954	Merge cells by column and row .
9955	Unmerge cells by column and row .
9956	Protect cells .
9957	Protect cells by column and row .
9958	Unprotect cells .
9959	Unprotect cells by column .
9960	Set auto filter by column and row
9961	Set the freeze pane .
9962	Inserts a new row before a row
9963	Removes a row from the cell
9964	Returns a comment .
9965	Sets the selected cell .
9966	Creates a new cell from an array .
9967	Get a hyperlink
9968	Sets the hyperlink to the cell
9969	Returns a DataValidation instance
9970	Set data validation .
9971	R shrink the range of a range
9972	Set the code name
9973	Set the format code
9974	Sets the builtin format code .
9975	Fill the builtin format codes .
9976	Returns the formatted format code for the given index
9977	Prepare the pdf file for writing .
9978	Perform a request .
9979	Write comments .
9980	Write a comment .
9981	Write vML comments
9982	Write vML comment .
9983	Returns data type for given value
9984	Initialize this object from XML .
9985	Map the vAlign to the correct position .
9986	Map the hAlign to the correct position .
9987	Map a border style style .
9988	Generate HTML header
9989	Generates the navigation page .
9990	Writes an image in a cell .
9991	Writes a chart to a chart
9992	Generate styles .
9993	Create CSS style .
9994	Format a color
9995	Writes a comment .
9996	Checks if the line is a delimiter .
9997	Extract delimiter from file
9998	Set shadow properties .
9999	Set shadow color .
10000	Set softEdges size
10001	Add a decorator to the stack .
10002	Apply the given tag .
10003	Remove recursively recursively .
10004	Convert HTTP status code to string
10005	Set ribbonXML data
10006	Get ribbon xml data
10007	Get ribbon objects
10008	Disconnects the worksheet
10009	Creates a new sheet .
10010	Add a new worksheet .
10011	Remove a sheet by index
10012	Get a single sheet
10013	Get a sheet by name
10014	Returns the index of the worksheet .
10015	Set the active sheet index by name
10016	Adds an external sheet to the sheet .
10017	Add a named range .
10018	Remove a named range .
10019	Add a cell to the cell
10020	Removes a cell from the sheet
10021	Add a cell style .
10022	Removes a cell style by index .
10023	Flatten an array .
10024	Flatten an array indexed by an array
10025	Get a contact
10026	Get contacts .
10027	Get contact by email
10028	Get contacts by external id
10029	Get contacts by filter id
10030	Update a contact
10031	Synchronize contacts
10032	Unsubscribe a contact
10033	Add unsubscribe to a contact
10034	Unsubscribe a contact
10035	Unsubscribe a contact
10036	Get blocked contacts .
10037	Create a custom field
10038	Rename a custom field
10039	Try to load a simple XML file
10040	Loads a spreadsheet .
10041	Returns a string representation of the rule .
10042	Validate plugin .
10043	Set a piece of pieces
10044	Create select form item
10045	Create a form from the given type .
10046	Checks if the email is empty .
10047	Copy files recursively
10048	Get colour by index
10049	Convert an object to an array
10050	Resolve the configuration .
10051	Resolve visible fields .
10052	Resolve the path to a file .
10053	Set the data type .
10054	Set data values
10055	Push a value to the stack
10056	Get a cache item
10057	Checks if a key exists .
10058	Save a cache item .
10059	Commit the queue .
10060	Set the value of a key
10061	Create a new meta .
10062	Update meta data
10063	Get the value of a given key .
10064	Get all meta data
10065	Set pieces .
10066	Generate generator .
10067	Register tags .
10068	Register the decorator .
10069	Add a tag decorator .
10070	Create a tag .
10071	Render the widget .
10072	Initialize the entity from a XML element .
10073	Get all drawings .
10074	Initialize the database .
10075	Converts control characters to PHP code
10076	Converts control characters to OXML XML
10077	Sanitize UTF - 8 .
10078	Converts a value to a string .
10079	Convert a string to a string
10080	Get currency code
10081	Register the manager .
10082	Register the configurator .
10083	Register the router .
10084	Write text to stream
10085	Set the mapping for the given severity .
10086	Write debug log
10087	Create a zip archive
10088	Add an attachment to the message .
10089	Add an attachment to the attachment .
10090	Returns the URL for the given identifier .
10091	Check the options array .
10092	Returns the identifier for the given identifier .
10093	Get domain name
10094	Get the srv for a given domain .
10095	Process the default avatar .
10096	Process the size .
10097	Writes a BFF8 cell address to a byte array .
10098	Set outline .
10099	Write a string to a string
10100	Writes a text string .
10101	Write a string to the stream .
10102	Write a URL to a file .
10103	Write dimensions .
10104	Write the window2 header .
10105	Writes the default row height .
10106	Write the default column width
10107	Write column info .
10108	Writes the selected cells .
10109	Write merged cells .
10110	Write sheet layout .
10111	Writes the header .
10112	Writes the range of cells .
10113	Writes page setup .
10114	Write header .
10115	Write footer .
10116	Write hcenter header
10117	Write the VCenter header .
10118	Write the margin left
10119	Write the margin right .
10120	Write the margin top of the page .
10121	Writes the bottom margin .
10122	Write the print headers .
10123	Write print gridlines
10124	Writes the grid .
10125	Write auto filter info
10126	Writes the Guts header .
10127	Writes the header to the wire format .
10128	Write breaks to the spreadsheet
10129	Writes the protection header .
10130	Write the ScenProtect header .
10131	Write the object protect .
10132	Write password .
10133	Insert a bitmap
10134	Position an image
10135	Process a bitmap image .
10136	Write the zoom scale .
10137	Writes the mso drawing .
10138	Write page layout .
10139	Writes the cell header .
10140	Reads data from data .
10141	Loads an OLE file .
10142	Read default header .
10143	Read text object .
10144	Read BOF file .
10145	Generate a key
10146	Read style .
10147	Read the palette .
10148	Reads the drawing group .
10149	Reads the print grid lines .
10150	Read header .
10151	Reads the footer .
10152	Reads the Hcenter header .
10153	Reads the vertical center .
10154	Read page setup .
10155	Read MulRk record .
10156	Read shared formula .
10157	Reads a boolean value .
10158	Reads a single row .
10159	Reads a label .
10160	Reads the drawing data .
10161	Reads the pane .
10162	Reads the selection .
10163	Reads the sheet layout .
10164	Reads a range of cell ranges .
10165	Reads the next line .
10166	Read a BFF8 cell address .
10167	Read a BFF8 cell range from a BFF8 string .
10168	Get an integer from a byte array
10169	Writes the XML document to the spreadsheet .
10170	Sets the diagonal direction .
10171	Load custom fields from XML
10172	Returns a string representation of this field .
10173	Check if a given coordinate exists .
10174	Delete a cell
10175	Returns the highest column at the given row .
10176	Get the highest row of the grid .
10177	Clone cell collection
10178	Remove a row from the grid
10179	Remove a column
10180	Stores the current cell .
10181	Add a new cell .
10182	Unsets the worksheet cells .
10183	Get all cache keys .
10184	Create a contact filter
10185	Converts a JSON string into an object .
10186	Deserialize an object from an array
10187	Build authorization header .
10188	Initialize this object from XML
10189	Writes the VABelationships to the spreadsheet .
10190	Get all SpContainers .
10191	Validate parameters .
10192	Parse a DSN string
10193	Get query preview .
10194	Get last query
10195	Get pretty print query log
10196	Create a string from a sheet
10197	Writes a string to an XML file .
10198	Writes rows to XML .
10199	Write column span span .
10200	Writes the stylesheet .
10201	Writes the merge range of cells .
10202	Sets the horizontal horizontal .
10203	Sets the vertical vertical vertical .
10204	Sets the shrinkToFit option .
10205	Set indentation
10206	Set the read order
10207	Performs a GET request .
10208	Delete a resource .
10209	Performs a request .
10210	Create a contact
10211	Initialize this object from XML
10212	Convert this object to a CSV string
10213	Get shared component
10214	Set the color
10215	Scans an XML element .
10216	Add items from source array
10217	Adds an item to the collection .
10218	Clean a complex number
10219	Converts the number of places to a number .
10220	Get all conversion groups .
10221	Get conversion group units .
10222	Create authentication form .
10223	Returns the menu for a given model .
10224	Build the composite menu menu .
10225	Get items for a model .
10226	Create a menu menu for a model .
10227	Create a page for a given model .
10228	Resolve model name .
10229	Set language language
10230	Returns a string representation of the message
10231	Write the document to the spreadsheet .
10232	Write a line to a file .
10233	Edit a user .
10234	Main entry point .
10235	Get the mime type
10236	Writes the default content type .
10237	Returns an instance of the calculation engine .
10238	Wrap a value
10239	Unwrap result .
10240	Calculate the formula value .
10241	Calculates the formula
10242	Get matrix dimensions
10243	Checks if a function is implemented .
10244	Get the list of implemented function names .
10245	Initialize the report .
10246	Converts an ASCII ASCII string to UCS
10247	Generate a string
10248	Generate a GUID
10249	Get a random date
10250	Generate a new Driver
10251	Get first name .
10252	Get last name
10253	Get the full name of the person .
10254	Get a street address
10255	Get APartment
10256	Get the current state
10257	Get address .
10258	Get company name .
10259	Get phone number
10260	Get IP address
10261	Get email address
10262	Get an internet entity
10263	Get Credit Card
10264	Get Bank account
10265	Get a person .
10266	Set rotation .
10267	Set the end color
10268	Create a new mail
10269	Set html content
10270	Set the reply to the email address
10271	Add an attachment
10272	Add custom properties
10273	Update a custom property
10274	Sets the locked sheet .
10275	Calculate the text width of a text
10276	Calculates the width of a column
10277	Get the default row height
10278	Writes the XML document .
10279	Convert a string to a coordinate
10280	Returns the absolute coordinate of a cell .
10281	Returns the absolute coordinate of a cell .
10282	Split a range into an array
10283	Builds a range of strings .
10284	Get range boundaries .
10285	Get column index from string
10286	Convert a column index to a string
10287	Parse crontab
10288	Returns a list of jobs that have been scheduled .
10289	Execute cron job .
10290	Stores the last run time .
10291	Acquire a lock .
10292	Set default timezone
10293	Validate timezone .
10294	Convert excel timestamp to timestamp
10295	Converts a day string to a number .
10296	Write a chart
10297	Write title .
10298	Write a legend .
10299	Write data labels .
10300	Writes the bubble size of a plot series .
10301	Writes the layout .
10302	Writes the print settings .
10303	Set the disk cache .
10304	Resolve a key .
10305	Recursively recursively recursively .
10306	Set line style properties .
10307	Set the glow properties .
10308	Set the glow properties
10309	Get the number of open opens
10310	Get the number of open open opens
10311	Get recipients .
10312	Get the number of recipients .
10313	Get a list of clicks .
10314	Get count of clicks
10315	Get the number of clicks .
10316	Get the count of bounces .
10317	Gets the number of bounces for a given date .
10318	Returns a list of blocks .
10319	Get blocks count
10320	Returns a list of unsubscribes .
10321	Get the number of unsubscribes for a given date .
10322	Get the number of subscribed subscribers .
10323	Create query parameters
10324	Create count query parameters
10325	Set options .
10326	Add a rule
10327	Create a new Rule object from a XML element .
10328	Returns the nesting level of the container .
10329	Set post images
10330	Replace a new image with the given state .
10331	Loads the given URL .
10332	Sets the size of the image .
10333	Parse the given XML element .
10334	Sets the name of the calendar .
10335	Sets the superscript property .
10336	Calculates the distance between two rows .
10337	Convert two coordinates to two coordinates
10338	Returns the XML representation of the property .
10339	Convert a string to a string
10340	Check error code
10341	Validate columns
10342	Checks if the given date is valid .
10343	Extracts ranges from a definition .
10344	Extract step from definition
10345	Apply steps to the given range .
10346	Gets the next timestamp for the future .
10347	Returns the next element .
10348	Rewrites the current time .
10349	Validate the response .
10350	Validate arguments .
10351	Get an event channel .
10352	Get source from job
10353	Fire event on event
10354	Get event name .
10355	Increments the number of attempts .
10356	Lock the lock .
10357	Highlight code in a file
10358	Log an error .
10359	Format backtrace .
10360	Critical error handler .
10361	Writes a message to the log file .
10362	Log an exception .
10363	Checks if the node has a given child .
10364	Set the given node .
10365	Log a login request .
10366	Logout user .
10367	Register a new user .
10368	Recover the user .
10369	Reset a user .
10370	Add a script
10371	Register scripts .
10372	Registers the styles .
10373	Unify cache
10374	Removes a value from a given type
10375	Validate form .
10376	Checks if the files are processed .
10377	Prepare a list of files .
10378	Get routes to folder
10379	Check if a file is modified .
10380	Checks if a file is modified .
10381	Unify files
10382	Save external file
10383	Compress files .
10384	Set new params
10385	Unify params
10386	Creates the initializer .
10387	Creates a new application .
10388	Handle the expiration of a key .
10389	Loads XML from XML file .
10390	Parse XML string
10391	Get system temp directory
10392	Parse XML file
10393	Checks if the given operation type is valid .
10394	Transform entity to document
10395	Get shop IDs
10396	Loads the class metadata .
10397	Process the discriminator map .
10398	Runs the given input string .
10399	Start the pipeline .
10400	Sets a new item skip .
10401	Counts the number of sources .
10402	Create a new application .
10403	Called when an item is consumed .
10404	Get a value from the cache .
10405	Set the value of a key
10406	Remove a key
10407	Save a pair .
10408	Add a document parameter .
10409	Get urls by document parameter .
10410	Create urls file
10411	Invalidate the cache
10412	Load urls from a document .
10413	Load URLs by type
10414	Create a new table .
10415	Update the table .
10416	Add status field
10417	Start a pipeline .
10418	Extract value from yaml array
10419	Parse Yaml file
10420	Create a new pipeline .
10421	Add a new update field to the update field .
10422	Add a value to the insert list
10423	Sets the trigger type .
10424	Parse XML .
10425	Adds headers to the response .
10426	Output the response body .
10427	Initializes the services .
10428	Init sync storage .
10429	Initializes the sync storage storage .
10430	Creates a list of pipelines .
10431	Get shop id
10432	Create service definition .
10433	Prepares service configs .
10434	Prepare the service configs .
10435	Perform a POST request
10436	Get a channel channel .
10437	Inject the template
10438	Set an attribute .
10439	Next query line .
10440	Parse query .
10441	Get the line type of a line .
10442	Create new pipe
10443	Handle start statements .
10444	Handle a statement .
10445	Parse a parameter .
10446	Detect query type .
10447	Post a webhook .
10448	Call the method if enabled
10449	Load configuration data .
10450	Delete a key
10451	Get the TTL of a key .
10452	Format a question .
10453	Assign a reset token
10454	Reset password .
10455	Consume a single document .
10456	Set the import item
10457	Convert this amount to another UOM .
10458	Validate input .
10459	Finish the job .
10460	Create a new DiffItem
10461	Initialize the recipe .
10462	Get table name
10463	Bind parameters to statement
10464	Determine the deduction for deletion .
10465	Check if shop is valid
10466	Modify an item .
10467	Creates an anonymous recipient .
10468	Returns the conversion factor .
10469	Perform a POST request .
10470	Lookup a user
10471	Check an item .
10472	Check an item in the agency
10473	Renew an item
10474	Lookup an item
10475	Listen for events .
10476	Push an event to the channel .
10477	Display exceptions .
10478	Resolve a diff item .
10479	Inline context for inline context
10480	Checks if the given update is tracked .
10481	Returns a collection of document documents .
10482	Returns an instance of SessionBucket .
10483	Create a soft bounce message .
10484	Create SPAMComplaint .
10485	Get the mapping for a table .
10486	Retrieve the mapping for a table .
10487	Apply mapping .
10488	Run the command .
10489	Unbuffer a connection .
10490	Returns a new FloatType .
10491	Add a value to this FloatType .
10492	Subtracts the float value from the given value .
10493	Multiplies the value of this float .
10494	Divide a float .
10495	Modify the value of this float .
10496	Exponent of a number
10497	Returns the sqrt .
10498	Returns the root of the root .
10499	Checks if the value is greater than the given value .
10500	Returns true if the value is less than the given value .
10501	Autocomplete .
10502	Set the parameters of a subject .
10503	Set parameter value .
10504	Register log levels .
10505	Register the stylesler .
10506	Register log menu .
10507	Register Filesystem .
10508	Register logger .
10509	Attach an observer .
10510	Detach observer .
10511	Notify all observers .
10512	Sort observers by priority .
10513	Checks if the observer should be updated .
10514	Update observer state
10515	Increment a key .
10516	Create a collection of photos .
10517	Get media identifiers .
10518	Get product photo .
10519	Gets the browser user agent .
10520	Adds a constraint to the table .
10521	Build table const
10522	Quote the index .
10523	Get list of parents
10524	Unset data from data store
10525	Set field value
10526	Set field value
10527	Get IP address
10528	Get IP address from proxy
10529	Normalize proxy header .
10530	Returns a JSON representation of the collection .
10531	Returns the number of items .
10532	Check if the collection is valid .
10533	Returns the last item .
10534	Check if the given action is allowed
10535	Get data from data store
10536	Extract headers from cors
10537	Prepare the headers
10538	Create a new middleware .
10539	Sets a collection of data .
10540	Modify a type modification .
10541	Returns the filter configuration .
10542	Create a new dispatch instance .
10543	Set configuration .
10544	Sets the sites .
10545	Set Virtual Host
10546	Set the request .
10547	Set resolver .
10548	Set template
10549	Set application .
10550	Dispatch the application .
10551	Determines the virtual host .
10552	Resolve application .
10553	Find virtual host
10554	Handle unknown host .
10555	Find the best match for a given URL .
10556	Generate a list of log items .
10557	Dispatch the next job .
10558	Create a new I18n instance .
10559	Setup translation log .
10560	Initialize the controller .
10561	Create a controller
10562	Build the controller name .
10563	Builds the action name .
10564	Creates a new variant .
10565	Format the response .
10566	Format the response .
10567	Creates new media .
10568	Create pagination .
10569	Parse query parameters .
10570	Parse a sort string
10571	Checks if the cache is valid .
10572	Sets the cache control header .
10573	Register session handler .
10574	Removes a value from the session
10575	Apply the given text to the output format .
10576	Apply style to text
10577	Returns the value of a specific setting .
10578	Convert multiple resources to APIResponse data .
10579	Checks if two strings are equal .
10580	Create data store
10581	Handle request .
10582	Builds the response .
10583	Dump the response .
10584	Create a new directory
10585	Create a new file .
10586	Register an entity .
10587	Clean up all entities .
10588	Build a charge from a transaction
10589	Builds a Payout from a given ID
10590	Checks if the given type is a type of type .
10591	Finds a product .
10592	Display the content of this node .
10593	Returns an array representation of the message .
10594	Get view data
10595	Init view panel data
10596	Initialize the view panel .
10597	Get the route for a route
10598	Initializes the request parameters .
10599	Generate debug code
10600	Returns the URL of the request .
10601	Edit a query .
10602	Add a query parameter .
10603	Check if a query has a query .
10604	Set query parameter
10605	Add headers to the request .
10606	Add a header .
10607	Check logged in user .
10608	Retrieve password recovery
10609	Get classified answer
10610	Check email address .
10611	Confirm confirmation .
10612	Display the confirmation page .
10613	Authenticate a user .
10614	Create a migration repository .
10615	Configure the response .
10616	Set the lifetime of the response .
10617	Set the Etag .
10618	Displays a step .
10619	Send a form to the form .
10620	Boot all providers .
10621	Converts a value to a percentage .
10622	Creates a whitelist for the given mapping .
10623	Sync migrations .
10624	Check if a file exists and move it to the app .
10625	Builds the table .
10626	Get the current docroot
10627	Get CPU cores .
10628	Calculates the percentages of the given cores .
10629	Returns an instance of hddd .
10630	Get memory information
10631	Get the average load average
10632	Get files matching pattern .
10633	Get the content of the model .
10634	Get array from json file
10635	Update the event manager .
10636	Resolve paths .
10637	Upload media .
10638	Process uploaded files .
10639	Process external media URLs .
10640	Create unique path .
10641	Add AND WHERE clause
10642	Add OR WHERE clause
10643	Returns the parent directory .
10644	Returns the relative path to a relative path .
10645	Bind an object to the binding .
10646	Execute the request
10647	Build custom messages .
10648	Normalize rules .
10649	Build unique rules .
10650	Get Validator .
10651	Validate the form .
10652	Unset a collection of items .
10653	Checks if a property is private .
10654	Checks if a property exists .
10655	Gets the group by function .
10656	Sorts the array with the given function .
10657	Returns a deep copy of this collection .
10658	Sorts an array of arrays .
10659	Normalize header name .
10660	Returns a new instance with the given headers .
10661	Removes cookies from configuration .
10662	Removes a parameter from the config .
10663	Set parameter type
10664	Returns a new instance with the given request .
10665	Enable block mode .
10666	Set the report URI
10667	Build the ONDUP clause .
10668	Build an XML document from an input string .
10669	Create an XML document from an array .
10670	Parse data from an array
10671	Convert an object to an array
10672	Add segments to path
10673	Get a cached value .
10674	Compare two strings
10675	Convert a string to a SKL .
10676	Retrieves the right part of a string
10677	Splits a text into an array .
10678	Inflect a text
10679	Calculate the SklStdStdStdStd
10680	Generate the URL for the given title .
10681	Called when the page is written .
10682	Quote a string
10683	Returns the preferred preferred type .
10684	Bootstrap the application .
10685	Get a parameter
10686	Show permission error .
10687	Set default permissions
10688	Configure autoloader .
10689	Setup logging .
10690	Handle exception .
10691	Shutdown the application .
10692	Get a dialect statement .
10693	Fixes table .
10694	Starts the session .
10695	Select a column .
10696	Returns an array representation of the problem .
10697	Send the response to the response .
10698	Check if a password is a valid password
10699	Checks if the given date is a birth date .
10700	Checks if a phone number is a mobile phone number .
10701	Checks if the given number is a birthday number .
10702	Returns the complexity of a password .
10703	Load language file
10704	Get the user entity .
10705	Returns the entity manager .
10706	Get user add form
10707	Apply a criteria to the query .
10708	Get many records .
10709	Get many results .
10710	Get model by id
10711	Get many records by id
10712	Create a new model .
10713	Save multiple models .
10714	Update an existing model .
10715	Update the model .
10716	Delete multiple models .
10717	Create a new model instance .
10718	Gets the paginator .
10719	Add a thumbnail .
10720	Remove a thumbnail .
10721	Get label .
10722	Add a count column
10723	Execute raw query
10724	Get number of rows
10725	Get a list of history actions .
10726	Get all users
10727	Get the year .
10728	Get the month
10729	Returns the day of the date .
10730	Get hour value
10731	Get the minute value
10732	Get the second value
10733	Checks if the given year is a leap year .
10734	Set lower value
10735	Set upper limit
10736	Compares two numbers
10737	Parse interval .
10738	Search for all engines .
10739	Returns true if the engine is supported .
10740	Initialize parameters .
10741	Build the query string .
10742	Get a value from the data .
10743	Returns a DateTime object .
10744	Get an array of values .
10745	Returns an array of objects with the given keys .
10746	Send JSON response .
10747	Sends items to the response .
10748	Send a new response .
10749	Send a response .
10750	Send a verb to the response .
10751	Initialize the user .
10752	Format user state .
10753	Returns the mobile mobile device .
10754	Get the date of the given user .
10755	Build table options
10756	Add a route to the router .
10757	Get totals .
10758	Prepare headers .
10759	Set a column .
10760	Builds the update set .
10761	Encode a string
10762	Set alternative account .
10763	Set payment type
10764	Generate SPD text
10765	Generate QR code
10766	Converts the content into a string .
10767	Normalizes an account number .
10768	Converts an account to IBAN
10769	Render the view .
10770	Resolve view name .
10771	Register a media type .
10772	Returns the media type matching the given data .
10773	Creates a new instance of the objects with the given IDs .
10774	Login by cookie
10775	Check if login is required
10776	Create a new Node from an array .
10777	Get total size
10778	Create an image
10779	Add session cookie
10780	Add cache limiter headers .
10781	Get asset path
10782	Adds a WHERE clause .
10783	Adds a WHERE clause .
10784	Parse the given URI .
10785	Execute a query .
10786	Execute a query .
10787	Display online help .
10788	Get search facets .
10789	Set search facets .
10790	Quote a string
10791	Register Twig .
10792	Get a user by ID
10793	Delete a user .
10794	Change password recovery .
10795	Create a contact
10796	Displays the classified answer .
10797	Creates a password .
10798	Convert date string to SQL format
10799	Render page history .
10800	Renders page history .
10801	Renders page history .
10802	Save page history .
10803	Delete page history .
10804	Get BackOffice Users
10805	Builds the configuration .
10806	Get the configuration .
10807	Select columns .
10808	Determine if the request is render .
10809	Returns a list of templates for this class .
10810	List all objects
10811	Bind values to sql statement
10812	Call the API .
10813	Call a method in the wrapped instance
10814	Set data store
10815	Authenticate an authentication method .
10816	Writes a message to the console .
10817	Writes a log message .
10818	Write an error message .
10819	Write a comment .
10820	Writes a warning message .
10821	Writes a message .
10822	Prints messages .
10823	Ask a question
10824	Confirm a question .
10825	Prompts a question .
10826	Print a table
10827	Write a list of words .
10828	Sanitize a name
10829	Create a DirEntity entity .
10830	Create a file entity .
10831	Create a new entity entity from SplFileInfo .
10832	Displays the search state .
10833	Adds a join clause to the query .
10834	Adds a column to the query .
10835	Compile a join clause .
10836	Compile a join clause .
10837	Build order by clause
10838	Sets the value of the cache
10839	Deletes the cache
10840	Get raw data from cache
10841	Print hello message
10842	Refresh price prices .
10843	Refresh product attributes .
10844	Calculates the product price .
10845	Refresh price prices .
10846	Restore word case .
10847	Execute a command .
10848	Get table name
10849	Fill the document .
10850	Returns the mapping for a given class .
10851	Executes a command .
10852	Echo content
10853	Set limit
10854	Builds the query string
10855	Gets the location string .
10856	Checks if the given type exists .
10857	Get all registered markers .
10858	Iterate over the given callback .
10859	Cache marker definitions .
10860	Create a new instance of the given type .
10861	Creates a new instance of the given type .
10862	Get the hash of the hash
10863	Creates a new iterator .
10864	Generates the hashes of the files .
10865	Set an instance of an Instance property .
10866	Create new instance
10867	Returns a list of all the records .
10868	Get a single record by ID
10869	Get user by email
10870	Verify a password
10871	Check if a login exists
10872	Check if an email exists .
10873	Remove user from database
10874	Generate a base64 encoded hash .
10875	Get the hash from a hash
10876	Process an approve .
10877	Check if the given hash is valid .
10878	Process forgotten password .
10879	Convert exception to array
10880	Render previous exception .
10881	Checks if the path is valid .
10882	Aggregate Ternary values .
10883	Report an exception .
10884	Send an error report .
10885	Make an error
10886	Start a session .
10887	Get a session .
10888	Add an option .
10889	Parse the options .
10890	Get input .
10891	Returns the syntax of the command .
10892	Is prime prime?
10893	Adds a URI to the collection .
10894	Get uri .
10895	Add a collection of resources .
10896	Set host .
10897	Set the URI .
10898	Get the scheme
10899	Save entity data
10900	Validates the current form .
10901	Load all entities
10902	Load a relation .
10903	Delete a record
10904	Checks if the directory is empty .
10905	Returns a list of files .
10906	Remove the directory .
10907	Get query parameters
10908	Set an instance of the binding .
10909	Sets the injects .
10910	Add a decorator .
10911	Adds a marker to the binding .
10912	Convert a date time to UTC timezone
10913	Set a variable .
10914	Execute the controller .
10915	Finds the controller for the given object .
10916	Log output output
10917	Checks if the module is active
10918	Get user entity .
10919	Returns a list of words from a language .
10920	Get a string from a language .
10921	Set headers .
10922	Sets the rows .
10923	Render the table
10924	Renders the line
10925	Renders a row .
10926	Render a cell .
10927	Update the width of the column .
10928	Execute SQL statement
10929	Returns the number of rows in the query
10930	Get the number of rows from a table .
10931	Returns the count of rows with the given value .
10932	Returns true if the row has a row with the given value .
10933	Resolve params
10934	Checks if version is PHP .
10935	Check email address .
10936	Authenticate user .
10937	Returns the obfuscated email address .
10938	Populate log entries .
10939	Get the value of the given key .
10940	Get the response .
10941	Get the modified response .
10942	Reset timestamp
10943	Encode a raw string
10944	Handles the prerender event .
10945	Handles the prerender event .
10946	Get body params
10947	Returns the accepted content types .
10948	Get the CSRF token
10949	Load csrf token
10950	Combine two tokens .
10951	Validate a CSRF token .
10952	Write body to response
10953	Check if the response is modified .
10954	Checks if the response matches the given ETag .
10955	Redirect to the response .
10956	Replace parameters with params
10957	Move the file to the list .
10958	Process files .
10959	Process a file .
10960	Prepares the file path to the target directory .
10961	Restores the response from the given data .
10962	Check if a log file is invalid .
10963	Get the URI .
10964	Returns the host name .
10965	Returns the standard port for the given scheme .
10966	Get the scheme .
10967	Check if the current server is secure .
10968	Get the current path
10969	Get query string
10970	Get request parameter
10971	Returns the value of the given header .
10972	Get auth username
10973	Get auth password
10974	Save the current location .
10975	Populate the location owner .
10976	Send verification .
10977	Verify a user .
10978	Set verification code .
10979	Update the index .
10980	Remove entity .
10981	Return a list of all log items .
10982	Get memory info
10983	Get disk usage information
10984	Get host id
10985	Check PHP version
10986	Get max upload size
10987	Dump a value to a dump .
10988	Gets the configuration tree .
10989	Sets a data value .
10990	Check if the file is a valid extension .
10991	Get the name of the file .
10992	Splits the name of the file .
10993	Get file size
10994	Returns the size of the file .
10995	Write content to file .
10996	Prepends a string to the file .
10997	Reads a file .
10998	Get line count
10999	Returns true if the given locale matches the given locale .
11000	Selects the given Accept header .
11001	Set locale .
11002	Set the redirect URL .
11003	Returns a new URL with the given path .
11004	Get path from url
11005	Set the CDSP tag .
11006	Set the referer policy .
11007	Sets the URI for the script .
11008	Add a report URI
11009	Add a plugin type .
11010	Add default src src
11011	Returns the header value .
11012	Import schema file .
11013	Import data file .
11014	Set the value .
11015	Convert seconds to time
11016	Add default listeners .
11017	Run controller .
11018	Load view .
11019	Get route path
11020	Handle action .
11021	Find tasks .
11022	List available tasks .
11023	Run a task
11024	Build group by clause
11025	Checks if a facet is set .
11026	Sets the country field .
11027	Get the city
11028	Creates the form field .
11029	Generate geolocation
11030	Get model name
11031	Ensures the fields for the template .
11032	Returns true if the given attribute is supported .
11033	Initialize the configuration .
11034	Load parameters from file
11035	Check the error level
11036	Return the label of an element
11037	Sets the value of the reduce
11038	Walk through all nodes in the tree .
11039	Stores a node .
11040	Recursively walk the tree and return a path .
11041	Store a leaf node .
11042	Stores a text element .
11043	Checks if a character is a space .
11044	Merge two masks .
11045	Reads the content of the container
11046	Parse a list of containers
11047	Get the value of a variable
11048	Adds a variable to the datatree .
11049	Parses information from a string .
11050	Convert spaces to spaces .
11051	Builds all the masks for a given entry
11052	Builds a datatree
11053	Format a datatree .
11054	Print a datatree
11055	Get asset bundle .
11056	Returns the URL for a route .
11057	Returns the path to the path .
11058	Get data store
11059	Returns a list of all files .
11060	Returns the value of the current value .
11061	Get the supported encodings .
11062	Check if the given encoding is supported .
11063	Returns the encoding of the given encoding .
11064	Uppercase upper case
11065	Get icon
11066	Adds a method to the map .
11067	Compile mixins .
11068	Send a message .
11069	Returns the status data for the given identifier .
11070	Set a boolean value .
11071	Sets an integer value .
11072	Set a float value .
11073	Set a string value .
11074	Set a date time .
11075	Set an array value .
11076	Get the http client .
11077	Get http adapter
11078	Format a phone number
11079	Get month name
11080	Get the name of a day
11081	Generate GUID
11082	Generate a GUID from a namespace
11083	Generate a random password
11084	Delete a directory
11085	Convert bytes to bytes .
11086	Returns the number of bytes in bytes .
11087	Get the user platform .
11088	Get user browser browser .
11089	Checks if the given date is valid .
11090	Gets the greeting .
11091	Gets the distance between two points .
11092	Translate a given category .
11093	Rewrite a link .
11094	Gets the date from a birthday number .
11095	Generate pin
11096	Send a message to a room
11097	Returns the seconds between two dates .
11098	Calculates the seconds between two days .
11099	Returns the maximum number of items .
11100	Adds a new array to the array .
11101	Returns the country code for a given country code .
11102	Converts a country code code to another country .
11103	Filter results by scope
11104	Register DateTimePicker
11105	Adds a join to the query .
11106	Adds a WHERE clause .
11107	Checks if the request is throttling .
11108	Log a request .
11109	Get all extensions .
11110	Find extensions directories .
11111	Migrate migration .
11112	Get migration files .
11113	Run migrations .
11114	Rollback all migrations .
11115	Reset all migrations .
11116	Drop repository .
11117	Rollback all migrations .
11118	Rolls a migration .
11119	Run migration .
11120	Execute migration .
11121	Get pending migrations .
11122	Returns the last location of the movements .
11123	Get the current game .
11124	Create a new notification instance .
11125	Display settings .
11126	Update settings .
11127	Render a view .
11128	Get class name
11129	Convert arguments to string
11130	Add template arguments to template
11131	Returns the root Backslash root path .
11132	Execute query
11133	Calculate the query
11134	Calculate the select query
11135	Calculate the UPDATE statement .
11136	Calculate INSERT
11137	Calculate DELETE
11138	Calculate create table
11139	Get set item
11140	Join the data from an array
11141	Get the type of a type
11142	Get attribute attributes
11143	Runs all classes .
11144	Process a class .
11145	Scan directory
11146	Move an object to a location .
11147	Get a list of objects from a location .
11148	Get all display objects for a given area .
11149	Process the request .
11150	Set cache state .
11151	Get ExtDirect Api .
11152	Set request parameters
11153	Returns true if the given probability is true .
11154	Get a random key from a set of powers .
11155	Returns the value of the given values .
11156	Get array value from array
11157	Handle url .
11158	Get video id
11159	Creates an HTTP request .
11160	Resolve a query .
11161	Get the replacements for a video .
11162	Get key from config
11163	Get the response format .
11164	Get published format .
11165	Get the duration format .
11166	Build header
11167	Generate API method
11168	Get the api as an array
11169	Boot the model .
11170	Refresh session data
11171	Get the filters .
11172	Encrypt data
11173	Decrypts the given data
11174	Hash a string
11175	Verify the given hash
11176	Generate a random string
11177	Create a new file .
11178	Get the extension
11179	Get a cache item
11180	Sets the cache value .
11181	Get all actions
11182	Cache actions .
11183	Get all actions
11184	Generate actions .
11185	Add a new match
11186	Set private chat update
11187	Get a value from an array
11188	Set a value in an array
11189	Parse json string
11190	Get transaction data
11191	Processes the route
11192	Checks if the controller exists .
11193	Set path .
11194	Recursively fix the tree
11195	Returns the result as an array .
11196	Check if a value exists .
11197	Adds an item to the collection .
11198	Delete a resource .
11199	Deletes a container .
11200	Check if an item is a singleton
11201	Fetches offset by offset .
11202	Converts the collection to an array .
11203	Returns the maximum value of the collection .
11204	Returns a subset of the collection .
11205	Merge data into the collection
11206	Apply a callback to the collection .
11207	Get the iterator .
11208	Get value from data
11209	Login a subject .
11210	Add a registry .
11211	Check if a key exists in the cache
11212	Get value from cache
11213	Remove a registry from the registry
11214	Returns count of records
11215	Call static method
11216	Set singleton name
11217	Returns the route for a given route .
11218	Dispatch route
11219	Invokes the given callback .
11220	Clears all callbacks .
11221	Validate routes .
11222	Checks if the request is valid .
11223	Checks if the route matches the regex
11224	Get routes .
11225	Get error callback
11226	Get the short name of a class
11227	Set properties .
11228	Get the URL for a section
11229	Initialize the client .
11230	Get a single section .
11231	Performs a POST request .
11232	Gets the location of the location .
11233	Run the command .
11234	Checks if value is null .
11235	Checks if a reference has a reference .
11236	Redirect to the URL
11237	Save URL to session
11238	Get redirect URL .
11239	Runs all errors .
11240	Define a custom check
11241	Check if a field is valid
11242	Call the given method .
11243	Set the rotation direction .
11244	Set up the start and end points
11245	Get all migrations .
11246	Get all migrations .
11247	Get all migrations .
11248	Get all migrations .
11249	Log a migration .
11250	Delete a migration .
11251	Get last batch number
11252	Check if repository exists .
11253	Execute a transaction .
11254	Drop all views .
11255	Execute the given class .
11256	Resolve the given class .
11257	Get all seeds .
11258	Creates an invoker .
11259	Converts a string to snake case
11260	Convert snake name to camelCase
11261	Adds a method to the collection .
11262	Main entry point .
11263	Checks if an instance is unique .
11264	Generate a repeat element
11265	Load model .
11266	Load a library
11267	Get a view of a template
11268	Creates a new Creator .
11269	Calculates the path for a given location .
11270	Displays a template .
11271	Render a template
11272	Handle response content .
11273	Sends a request to the server .
11274	Install migration .
11275	Build response .
11276	Get the error message .
11277	Get stubs .
11278	Populate the stub .
11279	Apply data to view
11280	Get error string .
11281	Generate a random number
11282	Populate the model .
11283	Populate model attributes
11284	Populate non - model attributes .
11285	Check if attribute is placeholder
11286	Get the query object for a relation .
11287	Get the value of a custom attribute .
11288	Get a relation
11289	Get model from model attribute
11290	Get models from model attribute
11291	Get attribute data
11292	Get attribute data from model
11293	Get attribute data
11294	Get data attributes .
11295	Get attribute value
11296	Returns the value of the given attribute .
11297	Get models from table column
11298	Get models from a custom relationship
11299	Get full class name
11300	Fetch data from database
11301	Get field name
11302	Load all model attributes
11303	Checks if a path exists .
11304	Get the name of a string .
11305	Validate email address
11306	Get the data from the database
11307	Send a message to the chat .
11308	Populate entity from body
11309	Populate the stub .
11310	Set the mapping of messages .
11311	Returns the message for the given code .
11312	Build auth string
11313	Build the base url string .
11314	Get normalized URL .
11315	Get normalized parameters .
11316	Handle credit request .
11317	Log a message .
11318	Get base data
11319	Execute a query
11320	Get a single row from the database
11321	Get a single row
11322	Get the annotation class for an action
11323	Get the annotation method for the given request .
11324	Convert a string to camel case
11325	Checks if a string contains a suffix .
11326	Remove suffix from string
11327	Get locations .
11328	Set the form field .
11329	Get human readable field .
11330	Get the multiline field .
11331	Set model .
11332	Set attributes .
11333	Sets the format .
11334	Get the value of the form .
11335	Returns the value of the form .
11336	Returns the namespace of the module .
11337	Get the migration class name .
11338	Returns the primary key location .
11339	Get module modules
11340	Generate rules .
11341	Get model map
11342	Sets the designer .
11343	Add a field to the form .
11344	Remove a field .
11345	Render the form .
11346	Render the fields .
11347	Render a field .
11348	Get field by name
11349	Sets the data for this field .
11350	Get the data from the form
11351	Submit the form
11352	Get all errors .
11353	Compress dwnl .
11354	Generate proxy class .
11355	Returns the value of the element .
11356	Returns the input filter .
11357	Add a block to the list .
11358	Remove a block from the page .
11359	Update a permalink .
11360	Sets the sort keys .
11361	Check if button is clicked
11362	Generates a tag tag
11363	Generate mail list
11364	Generate header tag
11365	List addresses .
11366	Format a text
11367	Get mime type
11368	Remove duplicates from an array
11369	Checks if the given arguments are valid .
11370	Converts a character to an ASCII string .
11371	Destroy a menu .
11372	Registers a service definition .
11373	Creates a new MethodInjection .
11374	Get the inject hint .
11375	Upload file
11376	Load all submodules
11377	Get page text
11378	Post action .
11379	Modify text content .
11380	Delete text .
11381	Renders the form .
11382	Creates a new pipeline .
11383	Build a middleware .
11384	Resolve stages .
11385	Signs a URL to Google .
11386	Get the cache for the given calcId
11387	Hydrate the file .
11388	Create a new BlockManager instance
11389	Get the log
11390	Get the status of the log
11391	Create the main menu .
11392	Returns instance of Debug instance
11393	Activate error handler
11394	Sets the kind of the report .
11395	Get translated error code .
11396	Set file name in error file
11397	Parse a fault
11398	Removes the given block .
11399	Get custom field by type
11400	Creates a new instance from data
11401	Set the startAt field
11402	Get the app code
11403	Get the app code for an application .
11404	Change current theme .
11405	Creates a CacheManager instance
11406	Create a new item .
11407	Trigger trigger events
11408	Register the default role .
11409	Show the view .
11410	Update a tag .
11411	Get users of a tag
11412	Batch user tags .
11413	Batch user tags .
11414	Decrypt data
11415	Calculate bonus bonus
11416	Save log operation
11417	Add piwik code
11418	Creates a new instance of the given environment .
11419	Get the values from the database .
11420	Get the cache item from the database .
11421	Constructs a SELECT SQL statement .
11422	Get information about a user .
11423	Get a list of open IDs .
11424	Get list of available users .
11425	Removes a remark .
11426	Get blacklist list
11427	Converts the form to an object .
11428	Convert this group to an array
11429	Run the route .
11430	Run a route .
11431	Perform a GET request .
11432	Perform a HEAD request .
11433	Search for keywords .
11434	Register resources .
11435	Delete a file
11436	Remove a directory
11437	Initialize the application .
11438	Get default value
11439	Get errors .
11440	Get information about the current page .
11441	Set a registry variable
11442	Returns the value of the registry .
11443	Get message by id
11444	Set transporter .
11445	Get the transport .
11446	Get spooler instance
11447	List all fixtures .
11448	List all fixtures .
11449	Fill the attributes .
11450	Get the parent url .
11451	Get parent key name
11452	Get all actions .
11453	Get public id attribute .
11454	Autoload model
11455	Get device summary
11456	Get a list of devices .
11457	Get the summary of a page .
11458	Get the summary of a page .
11459	Attach a file
11460	Send the email
11461	Enable the current state .
11462	Log a notice message .
11463	Displays an exception .
11464	Log an error .
11465	Assert that the given expression matches the given expression .
11466	Write a log file
11467	Initialize the view .
11468	List all responses .
11469	Show a response .
11470	Store a question .
11471	Edit a response .
11472	Update a discussion .
11473	Delete a question .
11474	Set the object .
11475	Set object type
11476	Authenticate the user .
11477	Boot the theme .
11478	Add the slots for a template
11479	Send a request .
11480	Get json body
11481	Save the page .
11482	Save all pages .
11483	Returns the factory for the given class .
11484	Get the arguments for the given function .
11485	Resolve a class argument .
11486	Resolve non - null argument .
11487	Call the resolving callbacks .
11488	Set the session name .
11489	Start the session .
11490	Destroy the session
11491	Returns all the keys in the collection .
11492	Removes a key from the session .
11493	Removes all keys from the collection .
11494	Log a message .
11495	Show the page .
11496	Get current time .
11497	Fetch all records
11498	Finds a row by its value .
11499	Creates a bulk insert .
11500	Setup database adapter .
11501	Load the container .
11502	Displays a comment .
11503	Create a delete form .
11504	Set the slots .
11505	Returns a list of available slots .
11506	Set a connection to the pool .
11507	Serve the request .
11508	Validate a token
11509	Parses a message from the request .
11510	Parse a program .
11511	Unescape string
11512	Displays the request .
11513	Reset password .
11514	Get the parameters of the request .
11515	Get named parameter .
11516	Update metadata .
11517	Generate the pin icon .
11518	Generate HTML5Favicon .
11519	Generate AndroidPinicon .
11520	Generate Windows Pinicon .
11521	Removes an event listener .
11522	Get an item by name
11523	Parse bot list of bot names
11524	Parses a bot .
11525	Get the DOM of the given URL .
11526	Resolve a template file .
11527	Register package helpers .
11528	Register custom helpers .
11529	Replace variables in a string
11530	Set permissions .
11531	Returns a list of paths for a given source directory .
11532	Cascade the given array .
11533	Reads a file .
11534	Write a file to a file .
11535	Bootstrap module .
11536	Cast a time to a timezone .
11537	Get request parameter
11538	Set the items .
11539	Add a new block .
11540	Resolve options .
11541	Edit a profile .
11542	Confirm email .
11543	Change password .
11544	Reset password reset password .
11545	Change email .
11546	Change security question .
11547	Add a group
11548	Get group by name
11549	Execute action .
11550	Prepare a list of pagination objects
11551	Save a consignment .
11552	Remove a consignment .
11553	Dispatch a dispatch confirmation .
11554	Cancel a Consignment
11555	Get bonus totals
11556	Find a parameter by name .
11557	Detects the namespace .
11558	Save the cache .
11559	Set week words
11560	Set shortcuts
11561	Set units .
11562	Get the week words and units .
11563	Parses text breaks .
11564	Process a weak word .
11565	Get the application instance .
11566	Register a list of modules .
11567	Sets the dependency injector
11568	Returns the number of records .
11569	Search for attachments
11570	Load an attachment
11571	Add a block to the page .
11572	Process a structure .
11573	Send headers to the response
11574	Creates a new button .
11575	Register registration .
11576	Connect to a user .
11577	Confirm user confirmation .
11578	Resend confirmation form .
11579	Configure the logger .
11580	Get tracker status .
11581	Bootstrap the CMS .
11582	Get the public require definition .
11583	Convert an array to an entity
11584	Execute the calc .
11585	Set spool directory
11586	Start a new task .
11587	End a task .
11588	Returns the duration of the task .
11589	Get the matrix .
11590	Format a title
11591	Uploads a file .
11592	Get full path .
11593	Get page
11594	Add a page
11595	Get page id
11596	Parses a bonus bonus .
11597	Set cache type
11598	Get cache object
11599	Run the application .
11600	Get config value
11601	Get base URL .
11602	Returns the root component root .
11603	Assigns pages to pages .
11604	Notify the listener .
11605	Returns the hash generator for the given description .
11606	Get PHP class name
11607	Update the profile .
11608	Confirm user confirmation
11609	Disconnect a network .
11610	Connect to the client .
11611	Move a file to a file .
11612	Resolve container .
11613	Create a new account .
11614	Update an existing account .
11615	Delete an account .
11616	Invite an invite
11617	Get records .
11618	Compress phase2 phase .
11619	Get the current site .
11620	Get the Auth object
11621	Get the view
11622	Create a new instance of the API .
11623	Close the session
11624	Gets the content for the given operation .
11625	Process the status of the content .
11626	Check if the process is running
11627	Lock the job .
11628	Get lock file .
11629	Creates a write operation
11630	Calculate transactions .
11631	Get all transitions for a given period
11632	Group PvTrans data
11633	Save log operation
11634	Bind a device to a device .
11635	Returns a list of pages for a device .
11636	Returns a list of devices for a page .
11637	Get the table registry .
11638	Get the authorities .
11639	Get column settings .
11640	Get the current data
11641	Get the column names .
11642	Get total number of items
11643	Get formatter .
11644	Get connection .
11645	Add an operation to the getter .
11646	Generate a doc block .
11647	Parse the given service file .
11648	Authenticate the user .
11649	Creates a query for the given identity .
11650	Validate a credential .
11651	Creates a product from the given data .
11652	Initialize REST route .
11653	Initialize database resource .
11654	Initialize the multidb resource .
11655	Parse a database connection .
11656	Returns the short name of the widget .
11657	Make a redirect
11658	Adds entries to a file .
11659	Remove entries from a file
11660	Read from a string
11661	Read from file
11662	Save properties to XML
11663	Save properties to file
11664	Checks if all elements are valid
11665	Filter an element
11666	Add a function to the list of functions .
11667	Add default function .
11668	Creates a remote server .
11669	Create an aggregate connection .
11670	Get a client by selector
11671	Execute raw command .
11672	Handle error response .
11673	Checks if an offset exists .
11674	Set configuration options .
11675	Get the homepage template
11676	Get the translation key .
11677	Check if a file is loaded .
11678	Loads a language file .
11679	Log a message .
11680	Set path .
11681	Reads data from the cache
11682	Initialize action
11683	Push a message to the stack
11684	Register commands .
11685	Get cache path
11686	Get the location of a given location .
11687	Returns an array of periods ordered by the current period .
11688	Set the center .
11689	Checks if this period is valid .
11690	Process an action
11691	Returns the metadata for this object
11692	Builds a list of parsed requests .
11693	Run the compilation .
11694	Gets the compiler .
11695	Rebuild cache files .
11696	Normalise source input .
11697	Returns a translation string .
11698	Get a service by name .
11699	Add a service .
11700	Get a cache pool
11701	Get a component .
11702	Add a new element
11703	Returns the form .
11704	Get the form in the form
11705	Synchronize entity
11706	Validate validators
11707	Displays a user search .
11708	Create a new user .
11709	Update user profile .
11710	Confirm user confirmation .
11711	Block block .
11712	Perform AJAX validation .
11713	Get calendar data
11714	Get token from server
11715	Get the cached token .
11716	Run the command .
11717	Loads a directory .
11718	Execute the basic query
11719	Save queue .
11720	Count the number of posts .
11721	Get carousel items
11722	Get posts .
11723	Collect activity .
11724	Prepare the request .
11725	Assign a variable to the view .
11726	Render the view .
11727	Set taxonomy id
11728	Fetch an attribute
11729	Set a new attribute
11730	Validates the password
11731	Generate the slots for the given path .
11732	Generates a list of blocks .
11733	Publishes a page .
11734	Hide page .
11735	Updates the ownl
11736	Set URL address
11737	Get the domain name .
11738	Normalize the address .
11739	Get the MD5 address
11740	Export persons .
11741	Get a person by id
11742	Add page .
11743	Remove a page .
11744	Register a new account .
11745	Get SHAKE info
11746	Get the device .
11747	Get the group
11748	Get the page .
11749	Get the material .
11750	Get the relation
11751	Get the stats .
11752	Open comment .
11753	Close comment
11754	List comments .
11755	Mark a comment .
11756	Unmark a comment
11757	Delete a comment
11758	Reply a comment .
11759	Delete a reply .
11760	Returns an array of all properties .
11761	Set property value
11762	Get the value of a property .
11763	Replace all stages in the pipeline .
11764	Handle a stage .
11765	Remove an expression .
11766	Returns the index of the column .
11767	Clears the server list .
11768	Update the sentinel .
11769	Get connection by role
11770	Switch the current connection to the master .
11771	Execute a command on the server .
11772	Resolve module dependencies .
11773	Find a component module by its type .
11774	Gets the maximum percentage of the given levels .
11775	Get the current setting .
11776	Get the question .
11777	Append a choice .
11778	Start the application .
11779	Build the class .
11780	Convert data to entity
11781	Converts an entity to a database value .
11782	Generate an array of children
11783	Add a new page .
11784	Update a page .
11785	Get pagination
11786	Delete a page .
11787	Get age by date
11788	Updates the totals of the given dwnl .
11789	Show files .
11790	Clears the configuration .
11791	Set mail address
11792	Set the email address .
11793	Sets the CC .
11794	Set bcc
11795	Set file attachment
11796	Set the subject .
11797	Set text
11798	Set html .
11799	Set email address
11800	Replace placeholders with replacement
11801	Render a panel
11802	Import an object
11803	Import from app
11804	Check if the model is a relation .
11805	Get the query .
11806	Chunks a chunk of rows .
11807	Get a list of records .
11808	Gets the paginate .
11809	Fill relation configuration .
11810	Load the foreign object .
11811	Loads the local object .
11812	Set log in log
11813	Get list of lists .
11814	Display the installation step
11815	Step 2 . 2
11816	Displays a step
11817	Runs a step .
11818	Sets the service locator .
11819	Add app dependencies .
11820	Get default value
11821	Prepare the items .
11822	Render the admin header .
11823	Replace middleware with middleware .
11824	Detect the encoding .
11825	Add a BOM to the URI .
11826	Removes the file from the URI .
11827	Get the BOM header .
11828	Set uri .
11829	Get tags by tag
11830	Expand slug .
11831	Create a new instance of a command .
11832	Get the cache
11833	Restore configuration .
11834	Store config .
11835	Save a user .
11836	Adds an action to the group .
11837	Get logo url
11838	Sets a cache value .
11839	Convert an image to a jpeg image
11840	Get image size
11841	Extracts the input data from the request .
11842	Get bind parameters
11843	Get the ID of the CIDC
11844	Add an APPerson object
11845	Get a random address
11846	Reset data .
11847	Save this row
11848	Check if the row is read only .
11849	Get the settings from a namespace
11850	Create a fault response
11851	Show the response
11852	Set the layout .
11853	Redirect to the given URI .
11854	Returns the header value .
11855	Get URL path .
11856	Check if the request is an AJAX request .
11857	Remove cookie from response
11858	Gets the handler object .
11859	Gets the handling of a handling object .
11860	Sets the companion object .
11861	Gets the companion primary key .
11862	Sets the paired data item .
11863	Set the handled data item .
11864	Save session data .
11865	Get session data
11866	Lock a session identifier .
11867	Unlocks a session identifier .
11868	Destroy a session .
11869	Clear old files .
11870	Hide page .
11871	Builds a custom field .
11872	Sets the data key .
11873	Get access token .
11874	Reset access token .
11875	Get module dir
11876	Returns a dump of a variable .
11877	Returns a dump of the query results
11878	Get a dump of a variable .
11879	Get the trace of the current context .
11880	Get the runner instance .
11881	Run the application .
11882	Prepare field options .
11883	Get ticket cache key .
11884	Get module handler
11885	Add a placeholder .
11886	Add a child structure .
11887	Get the user owner .
11888	Get the familiarity for the user .
11889	Get paginate .
11890	Add required attributes .
11891	Create a new custom field .
11892	Creates a new custom field .
11893	Creates an edit form .
11894	Encrypt data
11895	Decrypt the given data
11896	Generate a random IV .
11897	Get the status log
11898	Returns the estimated time of the estimated time .
11899	Get the current time .
11900	Returns whether the current data is most recent .
11901	Build the full URL .
11902	Caches an asset .
11903	Returns the description of the log interface .
11904	Get log model
11905	Get field type .
11906	Handle the default request handler .
11907	Run full bootstrap .
11908	Get the file changed at the given filename .
11909	Get required parameters .
11910	Returns the default parameters .
11911	Removes a string from a string
11912	Set industry .
11913	Returns the current entry .
11914	Add a dynamic control .
11915	Creates a new instance from the given reader .
11916	Response response .
11917	Creates a new Query instance .
11918	Register an injectable function .
11919	Get the attribute value .
11920	Remove page from page .
11921	Computes the difference between two arrays .
11922	Returns the amount of quantity .
11923	Get price amount
11924	Update the Permalink for the page .
11925	Generate all generated files .
11926	Sets the autoload directory .
11927	Run a single interface
11928	Get data interface
11929	Set data interface
11930	Returns the active custom fields .
11931	Generates a field type .
11932	Generates a new FieldOption
11933	Render a view .
11934	Walk through all elements in the array .
11935	Get the primary key .
11936	Get the primary key .
11937	Find the query
11938	Find all records .
11939	Find a single record .
11940	Returns the URL for the given code .
11941	Validate action .
11942	Validate an argument .
11943	Validate URL .
11944	Validate a GET request .
11945	Handle an event message .
11946	Get current user
11947	Returns the priority of the widget .
11948	Gets the signed signature .
11949	Creates a base URL .
11950	Build authorization header .
11951	Get OAuth params
11952	Replaces the placeholders for the given SQL operation .
11953	Delete the object from database
11954	Reset all properties
11955	Generate routes .
11956	Add a queue to the queue
11957	Add renderer .
11958	Remove an element from the collection .
11959	Sets an array of elements .
11960	Reduce an array of elements .
11961	Iterate over all elements .
11962	Parse connection parameters
11963	Set parameter value
11964	Checks if the given connection is configured .
11965	Generate password hash
11966	Render slots .
11967	Get the pid of a program
11968	Get auth class
11969	Set auth class
11970	Extend the expiration time .
11971	Handle command .
11972	Validate parameters .
11973	Validate custom parameters .
11974	Checks if the first parameter is valid
11975	Validate the second parameter
11976	Handle command help .
11977	Get interface object
11978	Transform a message .
11979	Transforms a message .
11980	Query API .
11981	Check if the resource is accessible .
11982	Acquire a resource .
11983	Get config value .
11984	Boot the application .
11985	scanf format string
11986	Read data from the stream
11987	Checks if the line is end of a line
11988	Reads a line
11989	Sorts an entity .
11990	Toggle the entity .
11991	Validate a slug .
11992	Returns an array of resources .
11993	Order by key
11994	Add data to the pipe
11995	Builds a catalog from a catalog
11996	Generate a Doctrine query
11997	Generate a PHP22 query
11998	Generate Phalcon .
11999	Checks if a given field is a valid value .
12000	Execute a Doctrine query
12001	Convert entity field to query
12002	Generate a random string
12003	Get session key
12004	Convert object to array
12005	Archive a block
12006	Returns an array of all the permissions
12007	Get the user s permissions .
12008	Get all messages for a domain .
12009	Set title .
12010	Add a link .
12011	Add block section .
12012	Add Doctrine Doctrine configuration .
12013	Instantiate a compiler .
12014	Execute a connection
12015	Check if the client is valid .
12016	Unwatch the monitor .
12017	Calculate the cache filename .
12018	Setup the queue .
12019	Adds the required properties .
12020	Adds the API method to the class generator .
12021	Generate parameter set block set
12022	Adds the required scope for the given operation definition .
12023	Add accessor methods
12024	Generate constructor method
12025	Generate execute fragment
12026	Generate the doc block .
12027	Adds a method to the classGenerator .
12028	Adds the async method to the client .
12029	Generate a filter block block block
12030	Generates the filter method .
12031	Adds a method to the create method .
12032	Add a method to the dispatch method .
12033	Add a method to the dispatch method .
12034	Add a method to the process
12035	Creates a new method generator .
12036	Adds a method to the API .
12037	Generate the class
12038	Remove a key
12039	Send headers to the response .
12040	Get current user
12041	Returns the full name of the user .
12042	Update a profile
12043	Search for users
12044	Check if a question is view .
12045	Determine if the user is destroyed .
12046	Get the thumbnail for a video .
12047	Add a range to the range
12048	Renders the given element .
12049	Shows an image in a given size
12050	Initialize the http client
12051	Create a RendererException
12052	Get relation model field .
12053	Set a module .
12054	Remove a container .
12055	Get a module .
12056	Get the labels for this object .
12057	Get the target .
12058	Get the list of possible targets .
12059	Sets the target target .
12060	Get the target label .
12061	Returns the permissions map for the given request path .
12062	Migrate module .
12063	Check if the given post is valid .
12064	Set flash bag
12065	Destroy the session
12066	Invokes the RPC call .
12067	Fetch project projects
12068	Fetch project .
12069	Update project .
12070	Create project .
12071	Get cfg params
12072	Get forced customer IDs
12073	Returns a list of ranked ranks for a given customer .
12074	Get child children
12075	Show a child .
12076	Store a child .
12077	Store a child with a pivot .
12078	Associate a child .
12079	Detach a child relation .
12080	Update a child .
12081	Delete a child .
12082	Gets all media types .
12083	Get all media objects
12084	Get an object from a subject
12085	Stores the object .
12086	Save configuration settings .
12087	Create a validator instance
12088	Check if the response is view .
12089	Determine if the given user is destroyed .
12090	Returns the result of the response .
12091	Get client instance
12092	Generate the URL for the given update .
12093	Returns the URL for the given address .
12094	Get md5 address
12095	Shortcut to shorten text
12096	Generate sign code
12097	Checks if the signature is valid .
12098	Format a date
12099	Calculates the price of the given brutto .
12100	Calculates price from netto .
12101	Set the Accept header .
12102	Set the maximum size .
12103	Converts PHP size to bytes .
12104	Handles the command .
12105	Fire an exception .
12106	Creates an error .
12107	Get page by name
12108	Change a page .
12109	Renames a page .
12110	Deletes a page .
12111	Persist the configuration .
12112	Get foreign data model
12113	Get unmapped foreign keys .
12114	Load foreign data items .
12115	Returns the tree of the exception tree .
12116	Get the full name of a fqn .
12117	Display a console exception .
12118	Get parameter value
12119	Get customer map
12120	Called when a view is created .
12121	Returns the last modified time .
12122	Sets the last modified time for the request .
12123	Called when an entry is updated .
12124	Returns all languages .
12125	Returns the alias id for the given language .
12126	Validate a date
12127	Get a setting value .
12128	Run the command .
12129	Set the failed failure .
12130	Clears the statistics .
12131	Handle errors .
12132	Add params to url
12133	Creates a new settings service .
12134	List all questions .
12135	Display a question .
12136	Edit a question .
12137	Update a question .
12138	Delete a question .
12139	Render widget .
12140	Get a message from the cache .
12141	Signup a user
12142	Get the provider instance
12143	Get the current user .
12144	Login .
12145	Set a setting value
12146	Get a setting value .
12147	Checks if an exception has an exception .
12148	Returns the exception code for the given exception .
12149	Get reserved codes .
12150	Check reserved codes .
12151	Get role type
12152	Determines whether the parent item has access to the parent .
12153	Get the list of possible roles .
12154	Get required roles .
12155	Returns a list of all the roles .
12156	Get owner key .
12157	Get object type
12158	Returns the level of this object .
12159	Get the title
12160	Get details widget .
12161	Returns true if the collector item is empty
12162	Get the form for the primary model .
12163	Returns the form segment for the primary model .
12164	Create the authority table .
12165	Create ACL permissions table .
12166	Create menu tables .
12167	Create menu group table .
12168	Create the property values for the given group .
12169	Create property values table .
12170	Create tables .
12171	Get the default factory for a given class .
12172	Get the default factory
12173	Add reflection arguments .
12174	Add a scalar argument .
12175	Add a scalar argument .
12176	Add a class argument .
12177	Add a new argument .
12178	Get the Individual object
12179	Get photo email
12180	Get taxonomy package
12181	Returns the primary object for the given object .
12182	Returns the primary child of this object .
12183	Get a relationship
12184	Get a relationship by id
12185	Get a nice id .
12186	Get companion role id .
12187	Set default options
12188	Get related object
12189	Get primary relation .
12190	Returns true if this node is active .
12191	Build the error message .
12192	Saves data to the cache .
12193	Handles an exception .
12194	Instantiate a new instance of a class
12195	Extract arguments from an array of arguments .
12196	Get the current URL .
12197	Converts a JSON string to a block .
12198	Serialize a block .
12199	Join two JSON arrays .
12200	Get data from object
12201	Show media media .
12202	Create a response .
12203	Register the admin fields .
12204	Make an emoji accessible for the given text .
12205	Generate the response .
12206	Create pagination .
12207	Refresh the source directory .
12208	Get single widget .
12209	Get the system account
12210	Saves the transLogs to the database .
12211	Add a snippet .
12212	Get a snippet by name
12213	Get a middleware .
12214	Run a route .
12215	Compile configuration .
12216	Generates the configuration files .
12217	Register the handlers .
12218	Shutdown the error handler .
12219	Log error handler .
12220	Handle exception handler .
12221	Log an exception .
12222	Prepare the error body .
12223	Get the current query .
12224	Get the paginate .
12225	Retry middleware .
12226	Inserts a new element into this element .
12227	Delete this node .
12228	Removes the node from this node .
12229	Replace this node with another node
12230	Removes all nodes from a node .
12231	Copy attributes from an XML element
12232	Creates a clone of this element
12233	Move this element to another node .
12234	Returns the first element of the element .
12235	Inserts an XML document into the document .
12236	Insert a process into the DOM .
12237	Set the attributes of an element
12238	Returns the HTML of the DOM element .
12239	Returns the inner XML representation of the element .
12240	Get elements by class name
12241	Add a class to the list
12242	Returns a formatted string as a string .
12243	Load an XSLT file .
12244	Returns an array of nodes sorted by xpath
12245	Sort the children of this node .
12246	Sort an array of nodes .
12247	Get node by name
12248	Executes an XPath query .
12249	Returns an array of all elements of the given XPath query .
12250	Get attribute value
12251	Get node value
12252	Add missing attributes .
12253	Returns the XML representation of this object .
12254	Add a compiler .
12255	Remove a compiler .
12256	Get Skyline app directory
12257	Get the search paths for a project .
12258	Gets the ordered list of components .
12259	Compile the compiler .
12260	Cache custom fields
12261	Cache custom fields .
12262	Get custom field by slug
12263	Render custom field
12264	Add a source directory .
12265	Finds all source directories .
12266	Render cms blocks .
12267	Render a CMS block .
12268	Render slots .
12269	Generate event names .
12270	Dispatch slots .
12271	Get the route URI .
12272	Execute the breakdown of a breakdown
12273	Cast a date to a timezone .
12274	Create a DateTime instance
12275	Get the path for a given template .
12276	Builds the templates map .
12277	Update a group .
12278	Move a user to a group .
12279	Move users to a group .
12280	Init template assets manager
12281	Get preauth code
12282	Stop custom process
12283	Render the layout .
12284	Returns the head of the asset .
12285	Returns the end of the block .
12286	Add a block to the block .
12287	Add a block to the block .
12288	Generates a loop .
12289	Make a block
12290	Returns the total number of products .
12291	Finds post by search .
12292	Returns the last post .
12293	Update resource .
12294	Delete a resource
12295	Find by criteria .
12296	Filter the query .
12297	Get the rules for the model .
12298	Get a list of pivot columns .
12299	Get pivot fields .
12300	Store a child .
12301	Get the child s children .
12302	Get a child resource .
12303	Generate site map
12304	Display the list of languages .
12305	Get admin headers .
12306	Update HCLanguages
12307	Get date period
12308	Displays the form .
12309	Reset password .
12310	Finds a file by URI .
12311	Detect mime type .
12312	Write content to web directory
12313	Returns an array of data
12314	Creates a new category .
12315	Sort categories .
12316	Edit a category .
12317	Loads a Yaml file .
12318	Search query .
12319	Redirects a short URL .
12320	Returns the location of the bundle .
12321	Prepare data .
12322	Run the command .
12323	Ask questions .
12324	Execute tasks .
12325	Execute the command .
12326	Upload an image
12327	Get parameter value
12328	Enqueue a script .
12329	Enqueue a style .
12330	Get the source file for the given filename .
12331	Get a reference .
12332	Adds a reference to the repository .
12333	Checks if the IP is blacklisted
12334	Check if password is good
12335	Edit a profile .
12336	Change password .
12337	Confirm email .
12338	Change security question .
12339	Generate a colored message
12340	Prints a message
12341	Print error message .
12342	Print info message
12343	Creates a new post .
12344	Displays a post .
12345	Edit a post .
12346	Creates a form .
12347	Add an array of assets
12348	Get the connection initializer .
12349	Get a taxonomy by its ID .
12350	Validate user session
12351	Invalidate a session
12352	Check if the role is allowed
12353	Saves the autocomplete
12354	Set the view path .
12355	Set variables .
12356	Generate theme .
12357	Update the name of the entry .
12358	Register Calendar
12359	Decode a hash id
12360	Encode a hash id
12361	Returns the publisher for the given message .
12362	Set a database connection
12363	Initialize the query .
12364	Update the source
12365	Initialize the client
12366	Get the next video .
12367	Get option value .
12368	Set a header .
12369	Authenticate a user .
12370	Get an array item by key
12371	Add an item .
12372	Add a rule .
12373	Applies a rule to the rule .
12374	Run all rules .
12375	Appends a comparison to the list .
12376	Evaluates the comparison .
12377	Check if user is superadmin
12378	Setup database .
12379	Handle command line .
12380	Creates a new exception from the given parameter .
12381	Returns the number of views in a given range .
12382	Get last month
12383	Get hits per month
12384	Get hits per day
12385	Returns a list of all Permalinks by language .
12386	Parse page definitions .
12387	Show errors .
12388	Logout session .
12389	Update the credential hash .
12390	Set the entity prototype .
12391	Set hydrator .
12392	Get a list of pages
12393	Called when the site is saved .
12394	Fill data from data
12395	Initialize the class .
12396	Add a where clause .
12397	Add a WHERE clause .
12398	Sets select query
12399	Set order by field
12400	Get first row
12401	Get all records .
12402	Update a document .
12403	Replace a document
12404	Create a new transaction .
12405	Renders a page .
12406	Check if a key exists
12407	Saves a value to the cache
12408	Load configuration .
12409	Save configuration .
12410	Delete a group .
12411	Get list of lists
12412	Get details of a group .
12413	Add a device .
12414	Remove device from group
12415	Initialize the view .
12416	Run Coding style report .
12417	Execute a copy of a copy of a copy of a file .
12418	Run PHP code .
12419	Run php dependency report
12420	Returns the translated translation of a domain .
12421	Returns the translation of a domain .
12422	Get all messages .
12423	Returns the translations for the given domain .
12424	Get authorization info .
12425	Get authorization token .
12426	Get Authorizer info
12427	Get Authorizer option
12428	Set Authorizer option
12429	Get authorizer list
12430	Sorts the criteria .
12431	Generates a filter for the content type .
12432	List Permalinks .
12433	Returns the maximum percentage of the given scheme .
12434	Checks if the given percent is in the given percent .
12435	Add a new form field .
12436	Add extra field
12437	Add a new form field .
12438	Get a form field .
12439	Render template
12440	Get instance by key
12441	Attach an instance to the database .
12442	Detach a given key .
12443	Add a task to the queue .
12444	Runs an image
12445	Get the last calc id for a given period
12446	Sets the container .
12447	Run build dependencies .
12448	Run update_zinfo
12449	Checks if the given file is GNU .
12450	Run check_template
12451	Run the check_php files
12452	Run update package .
12453	Generate a sample package .
12454	Create a new action .
12455	Determine if the toolbar is enabled .
12456	Install assets .
12457	Load data from table
12458	Create comment form .
12459	List all custom fields
12460	Gets the default group id
12461	Creates a new default form .
12462	Create a new custom field .
12463	Creates a new custom field .
12464	Display a custom field .
12465	Returns the available options for the given entity .
12466	Creates an edit form .
12467	Render a custom field .
12468	Get media stream
12469	Replace namespace .
12470	Set application config namespaces .
12471	Sets the namespace factories .
12472	Check if module is enabled
12473	Look for preminified asset
12474	Returns a specific theme .
12475	Get current theme
12476	Set current theme
12477	Get transformation transforms .
12478	Connect to elfinder
12479	Generate options for a folder
12480	Find slots in templates .
12481	Register services .
12482	Map entries by depth .
12483	Returns a plain bonus array .
12484	Returns the default option IDs .
12485	Checks if an adapter has a behavior .
12486	Get all the behaviors of an adapter .
12487	Enable logging .
12488	Write output to log file
12489	Set path to log file
12490	Convert an array to a string
12491	Creates a WHERE clause .
12492	Generates an ORDER BY clause .
12493	Get group by field
12494	Find a cluster
12495	Get the query
12496	Delete a cluster
12497	Delete multiple records
12498	Inserts a single document .
12499	Insert multiple documents
12500	Update a document
12501	Update recursive recursion .
12502	Replace a document .
12503	Begin a transaction .
12504	Rollback a transaction .
12505	Commit a transaction .
12506	Execute a query .
12507	Create a single document .
12508	Set message type
12509	Builds the message .
12510	Build preview message .
12511	Build a group .
12512	Login the user
12513	Copy src to destination
12514	Create a directory
12515	Check if path exists
12516	Delete a folder
12517	Move a file to a destination
12518	Returns a list of files .
12519	Get an entity by its ID
12520	Converts a parameter to a WHERE clause .
12521	Render a label .
12522	Render custom field .
12523	Update the arguments .
12524	Deserialize a JSON string .
12525	Release a lock
12526	Clean up stale processes .
12527	Get data sources
12528	Returns the local data source .
12529	Get the foreign data source .
12530	Apply a charge to a device .
12531	Get device status
12532	Update a device .
12533	Bind a device to a device .
12534	Get pagination .
12535	Fetch information about a specific apply .
12536	Authenticate the client .
12537	Set related objects
12538	Sets the relation fields .
12539	Dasherize a string
12540	Convert a string to camelCase
12541	Generate a random string
12542	Get page details .
12543	Get the link .
12544	Set the link .
12545	Register an event .
12546	Register an event .
12547	Returns the plugin plugin .
12548	Returns the theme plugin .
12549	Boot all plugins .
12550	Install assets .
12551	Checks if the token is serialized .
12552	Add headers to the response
12553	Saves the file to the given path .
12554	Create a new table .
12555	Displays a tag .
12556	Creates a form .
12557	Initialize the session
12558	Flush the cache .
12559	Fix file slashes
12560	Fix file slashes
12561	Send a message
12562	Send a text message .
12563	Send a news message .
12564	Send a voice message .
12565	Send an image .
12566	Send a video .
12567	Send a card .
12568	Preview a message .
12569	Preview a message .
12570	Preview a message .
12571	Preview a voice message .
12572	Preview a message .
12573	Preview a video .
12574	Preview a card .
12575	Preview a message by name .
12576	Preview text by name .
12577	Preview news by name .
12578	Preview a voice by name .
12579	Preview an image by name .
12580	Preview a video by name .
12581	Preview a card by name .
12582	Set translator .
12583	Run tool version
12584	Generate a config file .
12585	Convert configuration file to yaml file
12586	Create a controller
12587	Initialize the database .
12588	Create token table .
12589	Send email emails .
12590	Get DataTables I18n
12591	Checks the parameters for the given operator .
12592	Returns the SQL string representation of the query .
12593	Sets the operator .
12594	Create a directory .
12595	Get the minifier for the given file .
12596	Checks if the file is minify .
12597	Get cache adapter
12598	Checks if a namespace is available .
12599	Get config value
12600	Copy src to destination
12601	Write a file to a file .
12602	Delete a file
12603	Reads a file .
12604	Upload a file
12605	Get the name of a file
12606	Get path from file
12607	Sanitizes a file .
12608	Returns the child of this node .
12609	Returns the parent of the given type .
12610	Get all parents .
12611	Returns true if the object is checked .
12612	Get IP address
12613	Checks the required options .
12614	Check if the file is required .
12615	Add an attribute
12616	Set attributes .
12617	Remove an attribute .
12618	Sets the source file source
12619	Load foreign data items .
12620	Create model object
12621	Sets a value to the session .
12622	Register an event .
12623	Fire event .
12624	Set HTTP headers
12625	Get a GET request
12626	Perform a POST request
12627	Formats the current date .
12628	Register configuration .
12629	Send message to device
12630	Pay payment .
12631	Prepare order .
12632	Query the order of an order
12633	Close a trade .
12634	Reverses a reverse order
12635	Get sign key
12636	Get sandbox sign key
12637	Get a PDO instance
12638	Execute a SELECT query
12639	Rethrow exceptions .
12640	Initialize the adapter
12641	Adds a value to the collection .
12642	Set the value of a key .
12643	Get widget id
12644	Get system id
12645	Renders the label .
12646	Set true if the status is true
12647	Set the status of the response
12648	Get the response
12649	Builds the assets factory .
12650	Read file contents .
12651	Write text to file
12652	Get page text
12653	Returns a list of text texts with the base language .
12654	Get page text
12655	Add a text container
12656	Modify text container .
12657	Delete text container
12658	Get the file name .
12659	Update extra languages .
12660	Removes all JS files .
12661	Create authorization application .
12662	Checks if the user has been defined .
12663	Returns the message s message .
12664	Requires a package .
12665	Install modules .
12666	Edit a block .
12667	Returns the input field specification .
12668	Set Cache Options
12669	Add a namespace
12670	Open an emulator
12671	Get emulator instance .
12672	Set the emulation .
12673	Set source files
12674	Get foreign model config
12675	Get foreign model
12676	Renders a block .
12677	Removes the removal of a block .
12678	Returns the results as JSON .
12679	Boot all plugins .
12680	Check if a flag exists .
12681	Send message .
12682	Register profiling configuration .
12683	Process the tasks .
12684	Sets the value of an object
12685	Removes all rows from the database
12686	Returns the type of the given value .
12687	Init configuration .
12688	Loads a namespace .
12689	Get configuration value .
12690	Merges a list of configs .
12691	Output an error .
12692	Synchronize a page .
12693	Generate slots .
12694	Add option .
12695	Get vendor dir
12696	Get available extensions .
12697	Get options
12698	Archive a directory
12699	Parses a list of files .
12700	Creates a new cache service instance
12701	Set editor config .
12702	Get service by id
12703	Publish a page .
12704	Get title attribute .
12705	Get the content of the page .
12706	Get all commands .
12707	Parse signature .
12708	Run a command .
12709	Parse a string .
12710	Resolves an instance of the given instance .
12711	Register an alias .
12712	Returns the flag for the given concrete class .
12713	Resolve the given instance .
12714	Resolve method parameters
12715	Resolve a circular dependency .
12716	Get a concrete instance from an interface .
12717	Get the parameters of a method .
12718	Mark an instance as resolved .
12719	Binds an abstract binding .
12720	Call an instance of the given instance .
12721	Returns true if the binding is shared .
12722	Turns a concrete closure into a closure .
12723	Returns the content of the source file .
12724	Reset the query .
12725	Format an event .
12726	Creates a Content object from the given data .
12727	Returns the value mapped to the template
12728	Assert that the given rule is expected .
12729	Get the options map
12730	Renders the navigation .
12731	Get the tasks .
12732	Handle signal .
12733	Register a new listener .
12734	Unregister a listener
12735	Set key title
12736	Map model name to language name
12737	Translates field values
12738	Add a class to the tag .
12739	Remove a class from the tag .
12740	Set the required attribute .
12741	Get tag by name
12742	Remove a connection from the pool .
12743	Build slot map
12744	Ask slot map
12745	Move a node to the pool .
12746	Execute a command on the server .
12747	Returns the input specification .
12748	Set the pattern .
12749	Validate SKU .
12750	Returns the user alias for the given user .
12751	Send a welcome message .
12752	Send confirmation message .
12753	Send a recovery message .
12754	Prepare the request
12755	Parse the response .
12756	Delete custom fields for a custom field group .
12757	Route start startup
12758	Create a new MediaLink instance
12759	Parse a string .
12760	Dispatch an event .
12761	Checks if the browser is available .
12762	Sets a cookie
12763	Remove a cookie
12764	Add a header
12765	Add a HTTP header .
12766	Run all headers .
12767	Set the value of a key .
12768	Get data from store
12769	Get the database connection
12770	Authorize the user .
12771	Authorize the user with the given email
12772	Register a new email
12773	Performs an authorization request .
12774	Authorize a user .
12775	Reads a namespace .
12776	Write data to a namespace .
12777	Renders the query .
12778	Get refresh instructions
12779	Get the current state value .
12780	Sets the value of the given key .
12781	Decrypts an encrypted string
12782	Get all intersections .
12783	Creates an array of intersections .
12784	Checks if the given mask matches the given mask .
12785	Generate intersection .
12786	Gets the configuration .
12787	Get request parameters
12788	Set status code
12789	Load the foreign key .
12790	Creates a new view .
12791	Create a Layout instance .
12792	Create a Snippet .
12793	Create a droplet
12794	Delete a droplet
12795	Get image snapshots
12796	Clear a queue .
12797	Pad a string
12798	Get lines from file
12799	Get file pointer
12800	Get the headers
12801	Create a new item .
12802	Get paginated page
12803	Get the ADOR record set
12804	Builds the column properties cache .
12805	Get column name
12806	Returns a collection of objects .
12807	Returns a collection of objects with the given operator .
12808	Get primary key .
12809	Check if a column is primary key
12810	Get foreign keys for a table .
12811	Get the foreign keys for a table .
12812	Check if a foreign key exists .
12813	Get all nullables .
12814	Returns a list of all nullables for the given table .
12815	Check if column is nullable .
12816	Get the columns for a table .
12817	Fetch all cache entries
12818	Transforms a command to a message .
12819	Set permissions .
12820	Execute a callback .
12821	Resolve dependencies .
12822	Resolve options .
12823	Create the contributor directory .
12824	Add a block to the slot .
12825	Get slot definition .
12826	Save slot definition .
12827	Remove a block from the slot file .
12828	Register custom functions .
12829	Set config value
12830	Compile the source .
12831	Process a token .
12832	Process modifiers .
12833	Generate the config for the given config .
12834	Generate a pure factory method .
12835	Generate factory method
12836	Create a directory .
12837	Build the project .
12838	Create a directory .
12839	Generate a filename
12840	Get the mime type
12841	Recursively deletes a directory .
12842	Remove files from a directory
12843	Adds a shortcut option .
12844	Load the choice mapping .
12845	Process text type
12846	Run HTTP error page
12847	Loads a controller
12848	Get page 403 page
12849	Get page 404
12850	Check if the cache is valid
12851	Delete customer id
12852	Parse a symbol .
12853	Import a package .
12854	Process pipeline .
12855	Go through all jobs in the queue .
12856	Performs a processing request .
12857	Set the builtin queue
12858	Renders a page .
12859	Add a route .
12860	Get the dispatcher .
12861	Build cache data .
12862	Parse the given block .
12863	Get a cached identity service .
12864	Sets the response headers .
12865	Clear quota quota .
12866	Initialize the locale .
12867	Initialize the options .
12868	Reset password .
12869	Bind to LDAP .
12870	Unbinds the connection
12871	Search for LDAP search
12872	Sets the required element of the form element .
12873	Returns the validator chain for the given element .
12874	Saves the configuration .
12875	Get json from file
12876	Set the namespace
12877	Generate an image manifest .
12878	Set the value of the element .
12879	Renders the toolbar .
12880	Register user .
12881	Get foreign data item
12882	Get unmapped keys
12883	Get unmapped primary keys
12884	Returns the key translation for the given object .
12885	Returns the key translation for the given object .
12886	Set raw photo
12887	Get composer . json
12888	Get the theme
12889	Returns the identity of the identity .
12890	Creates a new view
12891	Redirect domain system parameters .
12892	Renders an element .
12893	Create a new account .
12894	Close an open account .
12895	Sets the person .
12896	Checks if the current date is closed .
12897	Redirect to the given path .
12898	Translate a message .
12899	Get the response .
12900	Get the response headers .
12901	Add source .
12902	Add virtualization worker .
12903	Create cache adapter .
12904	Set access token
12905	List resources .
12906	Show a filter .
12907	Store a new field .
12908	Update a field .
12909	Get all the values from the database .
12910	Set the group
12911	Get the count of the select statement .
12912	Adds a join to the database .
12913	Set cache flag .
12914	Returns an array of filters .
12915	Get column reference
12916	Converts a result into an array of models .
12917	Get the sum of the total value
12918	Find content type .
12919	Set filters .
12920	Get total number of items
12921	Returns the number of remaining items .
12922	Get foreign data items .
12923	Get local data items
12924	Get all local data items .
12925	Sets the search value .
12926	Display a user .
12927	Get list of lists
12928	Update a business
12929	Get all entities .
12930	Attempt to attempt a confirmation token .
12931	Creates the router .
12932	Generate content attribute .
12933	Generate Content .
12934	Move a block .
12935	Resolve move options .
12936	Move the archive directory .
12937	Change the slot name and slot name .
12938	Set the minimum value
12939	Set max value
12940	Assert that the client is valid .
12941	Store permissions .
12942	Creates a form .
12943	Authenticate authentication .
12944	Set default queues .
12945	Returns the list of tags .
12946	Parse tags .
12947	Determine if the owner has a tag attribute .
12948	Remove tag values from list of tags
12949	After saving the tags .
12950	Before deleting the tags .
12951	Deletes the tag list .
12952	Get the foreign parents of this model .
12953	Get the foreign children of this model .
12954	Converts a price string to an integer .
12955	Get the registry object
12956	Removes an object from the collection .
12957	Authenticate the user .
12958	Injects the injects .
12959	Update a table
12960	Execute SQL query
12961	Get database connection
12962	Get all tables
12963	Check if database exists
12964	Get per month per month
12965	Get the icon .
12966	Returns the name of the object type .
12967	Get object type
12968	Render page .
12969	Transform the front of the frontend
12970	Get reflection and class object
12971	Sets the position of the collection .
12972	Create entity manager
12973	Set mapping configuration .
12974	Auto load mappings .
12975	Register mapping .
12976	Parse the mapping .
12977	Determine the default component defaults .
12978	Detect metadata driver .
12979	Register behaviors .
12980	Configure the behavior .
12981	PreDispatch request .
