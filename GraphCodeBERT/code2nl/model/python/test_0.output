0	Save the model to disk .
1	Return the nature of the image .
2	Decorator for convolution .
3	Creates a new subproc .
4	Parse unknown arguments .
5	Clear the environment variables .
6	Calculate the linearization of a function .
7	Create a new observation placeholder .
8	Create an observation for the input space .
9	Encode an observation .
10	Save the policy to disk .
11	Returns a list of all the logs .
12	Calculate the mean of a given radius .
13	Return a copy of a dictionary .
14	Return a dictionary of observations for a given space .
15	Compute the qretrace .
16	Return the value of the given time .
17	Perform a subprocess .
18	Learner model .
19	Convert an array of arrays to a scalar .
20	Pretty print the seconds in seconds .
21	Add a flag to the parser .
22	Get the wrapper for the given class name .
23	Load a pickle file .
24	Update the value of the measurement .
25	Store the arguments for a method .
26	Flatten all gradients .
27	Convert an input tensor to network .
28	Perform a fork .
29	Gets a session .
30	Initialize the global variables .
31	Adjust the shape of data .
32	Wrap deepmind environment .
33	Reset the environment .
34	Gets the number of GPU s GPU number .
35	Sets up the mpi devices for the device .
36	Get the local rank size of the node .
37	Share a file .
38	Gather data from a dictionary .
39	Calculate the discount of a signal .
40	Add an item to the queue .
41	Update priorities .
42	Wrap a deep clip .
43	Create a sample of transition transitions .
44	Parse command line arguments .
45	Compute the median median of the given X .
46	Projects a shape to a shape .
47	Returns a copy of this vector .
48	Draws the image with the given color .
49	Generate a list of distances between two points .
50	Return a copy of this object .
51	Return a copy of this Keypoint .
52	Return a copy of this image .
53	Draws the keypoints to the given image .
54	Shift the keypoints .
55	Return a copy of this object .
56	Return a copy of this KeypointsOnImage .
57	Projects a shape to a shape .
58	Return a new BoundingBox .
59	Return the intersection of this rectangle .
60	Return a BoundingBox .
61	Compute the difference between two points .
62	Determine if the image is within the given image .
63	Return True if the image is within the given image .
64	Returns True if the image is out of the image .
65	Return a copy of this image .
66	Draw a bounding box .
67	Extract the image from an image .
68	Return a copy of this BoundingBox .
69	Draw the bounding box .
70	Remove all bounding boxes from the image .
71	Clip the bounding box .
72	Return a copy of this image .
73	Create an embedding matrix .
74	Create an edge detection matrix .
75	Create a directed edge detector .
76	Normalize a tuple .
77	Projects coordinates to a given shape .
78	Add a Poisson Poisson .
79	Dropout from p .
80	Create a CoarseDropout .
81	Create an ImpulseNoPeer .
82	Generate a salt and replace element with the given mask .
83	Replace an elementwise .
84	Create a CoarsePeer with the given probability .
85	Create a LinearContrast Normalization .
86	Check if value is a single float .
87	Check if value is an integer .
88	Check if a value is floating point .
89	Creates a new random random state .
90	Return a copy of the random state .
91	Derive a random number of random states .
92	Normalize an extractor to a BoundingBox .
93	Compute the resized shape .
94	Convert a quokka image to an image .
95	Generate Segmentation map .
96	Create a keypoints on the image .
97	Return a list of bounding boxes .
98	Creates a polygons on the image .
99	Return the angle between two vectors .
100	Compute the intersection point between two points .
101	Draw a text on an image .
102	Resize a single image .
103	Compute padding for the given aspect ratio .
104	Pad array with aspect ratio .
105	Pooling function .
106	Perform an average of numpy .
107	Perform max_size .
108	Draw a grid .
109	Show a grid .
110	Show an image .
111	Warn warnings .
112	Check if the image is activated
113	Perform postprocessing .
114	Returns a pool of processes .
115	Map batches of batches .
116	Perform a batch of batches of batches .
117	Iterate over batches of batches .
118	Iterate over batches of batches .
119	Terminate the pool .
120	Terminate the queue .
121	Get a batch from the queue .
122	Implementation of augmenting images .
123	Terminate all workers .
124	Return a normalized Batch .
125	Create a force sign .
126	Create a force sign .
127	Return the area of the polygon .
128	Project a shape to a shape .
129	Find the closest point at the given coordinates .
130	Returns True if the image is within the given image .
131	Returns True if the image is partly within the given image .
132	Determine if the polygon is in the given image .
133	Clips the image to the given image .
134	Extracts the area from an image .
135	Change the first point in the polygon .
136	Change the first point at the given index .
137	Convert this Polygon into a Polygon .
138	Convert to a shapely line string .
139	Return a bounding box .
140	Return a list of keypoints .
141	Return a LineString as a LineString .
142	Create a Polygon from a Polygon .
143	Determine if the polygon is equal to another .
144	Return a copy of this object .
145	Return a copy of this Polygon .
146	Returns a PolygonsOnImage with the given image .
147	Draws the polygon to the given image .
148	Remove all polygons from the image .
149	Clip the polygons on the image .
150	Return a copy of this PolygonsOnImage .
151	Create a MultiPolygon from a shapely geometry .
152	Return a list of all intersections .
153	Return the minimum item in the tree .
154	Return the maximum item in the tree .
155	Return the previous key for the given key .
156	Return the value of a key .
157	Compute noise between two points .
158	Create a new colorpace with the given colorspace .
159	Creates a new colorpace .
160	Return the height of the image .
161	Return the width of the grid .
162	Returns a boolean indicating whether the image is inside the image .
163	Compute the distance between two points .
164	Computes the distance between two points .
165	Compute the distance between two points .
166	Projects a shape to a shape .
167	Return True if the image is within the given image .
168	Return True if the image is within the given image .
169	Find the intersection between two shapes .
170	Draw a mask .
171	Draw lines on a given image .
172	Draw points on a given image .
173	Draw the heatmap of a shape .
174	Draw the points on the image .
175	Draws the given image .
176	Extracts the image from an image .
177	Concatenate two lines .
178	Return a new instance of the polygon .
179	Return a list of Keypoints .
180	Return a bounding box .
181	Convert a Polygon to a Polygon .
182	Convert the image to a heatmap .
183	Convert the image to a segmentation map .
184	Checks if two lines are equal .
185	Return True if two points are equal .
186	Return a copy of this LineString .
187	Draws a line to a given image .
188	Clip all lines in the image .
189	Return a copy of this image .
190	Return a copy of this LineStrings .
191	Append alpha to an image .
192	Simulate the noise noise .
193	Creates a node with the given children .
194	Assert Lambda function .
195	Create a motion blur image .
196	Create a list of clouds .
197	Cloud layer .
198	Create a Snowflakes layer .
199	Draws the image .
200	Draw the image using the given image .
201	Pads the image to the given aspect ratio .
202	Resize the image .
203	Convert the image to a heatmaps .
204	Create a SegmentationMap from the given heatmaps .
205	Create a new SegmentationMap .
206	Add an event .
207	Draw the heatmaps .
208	Draws the image to a given image .
209	Return a new HeatmapsOnImage .
210	Pad the image to the given aspect ratio .
211	Convert array to uint8
212	Create a new HeatmapsOnImage from an image .
213	Create a new HeatmapsOnImage from an array .
214	Change the normalization of an array .
215	Creates a new HeatmapsOnImage .
216	Add a key to the list .
217	Add a key to the list .
218	Parse a docstring .
219	Returns a list of directories for the given package .
220	Get the response for the given path .
221	Check if the static file is valid .
222	Checks if the response is not modified .
223	Build environment variables .
224	Receive a message .
225	Send a message to the server .
226	Calculate the top of the top of a list of positions .
227	Calculate the median position for the given positions .
228	Returns a pandas DataFrame for the given positions .
229	Compute the total style factor for the given positions .
230	Plot the style factor of a factor .
231	Compute the positions of the sectors of the given positions .
232	Plot long exposures .
233	Plot the gross exposure .
234	Plot the net exposure of a network .
235	Compute the positions of the given positions .
236	Plot the net exposure .
237	Compute the minimum threshold of the volume .
238	Create a full sheet sheet .
239	Create a plot sheet .
240	Creates a plot sheet for transactions .
241	Calculate the capacity sheet for a given price .
242	Creates a new perf_attrib .
243	Calculate daily transactions .
244	Calculate the days of the given positions .
245	Calculate low - level transactions for the given transactions .
246	Apply slippage penalty penalty penalty .
247	Map a transaction to a transaction .
248	Create a DataFrame from a list of transactions .
249	Calculate the sum of transactions .
250	Adjusts the amount of funds for a slippage .
251	Calculate the turnover of a given transaction .
252	Return a grouped list of transactions for each transaction .
253	Extract roundtrips from transactions .
254	Add closing transactions to a list of transactions .
255	Apply sector mappings to a roundtrips .
256	Generate the stats for a round trip .
257	Print roundtrip stats .
258	Calculate perf_attrib attributes .
259	Compute the expositions of the given positions .
260	Creates a summary of the performance statistics .
261	Show a summary of the risk attributes .
262	Plot the total cost and cost .
263	Plot the cumulative distribution of the given factor .
264	Stack positions .
265	Calculate the cumulative cost for the given costs .
266	Format an asset .
267	Decorator for a function .
268	Print a table .
269	Determine if the amount of transactions are indraday .
270	Check if there is an intraday .
271	Calculate the interraday of a transaction .
272	Clip a benchmark to a benchmark .
273	Convert datetime to UTC .
274	Get symbols for a symbol
275	Return a list of colors for a given color .
276	Decorator to customize a function .
277	Create a plotting context .
278	Return the axis style .
279	Plot the heatmap .
280	Plot the annual number of years .
281	Plot the total number of days in the plot .
282	Plot stock holdings .
283	Plot long heights .
284	Plot the drawdowns of a series .
285	Plot the waterdown .
286	Plot the perf_stats .
287	Show the performance stats .
288	Plot the results of a given date .
289	Plot the cumulative cumulative return values of a series .
290	Plot a rolling portfolio .
291	Plot the rolling volatility .
292	Plot the rolling SHARP .
293	Plot the gross leverage .
294	Plot the exposures .
295	Plot the max median position .
296	Plot sector allocation .
297	Plot the return values for a given date .
298	Plot the turnover of transactions .
299	Plot the amount of slippage .
300	Plot the amount of savings for the given transaction .
301	Plot the turnover rate .
302	Plot daily trading volume .
303	Plot transactions histograms .
304	Show the worst drawdowns
305	Plot the number of timeseries .
306	Plot roundtrip lifetimes .
307	Show the profitability of a round trip .
308	Plot the profitable profit .
309	Plot a scatter chart .
310	r Calculates the variance of the variance of the variance of the covariance .
311	Calculate the sortino ratio .
312	Calculate the downside risk risk .
313	Calculate sharpe ratio .
314	Calculate the beta beta and beta .
315	Compute the grosslevation of the given positions .
316	Calculate the stats for a given balance .
317	Calculate the bootstrap statistics .
318	Calculate the bootstrap of a function
319	Calculate distribution statistics .
320	Determine the maximum waterdown of the underwater waterdown .
321	Calculate the maximum drawdown .
322	Get the most recent drawdowns .
323	Generate drawdowns table
324	Calculates the volatility of a given window .
325	Calculate the SHARP .
326	Simulate a set of paths .
327	Summarize the paths of paths .
328	Extract the date ranges from a list of dates .
329	Compute the model of the model with alpha and beta .
330	Calculate the mean of a series of data .
331	Compute the best model for the given samples .
332	Generate a model of the stochastic model .
333	Plot stochastic volatility .
334	Compute the probability of a set of probabilities .
335	Compute the consistency score for the given predicates .
336	Run a model .
337	Plot the cumulative number of cumulative distributions .
338	Get the next log count per token .
339	Log a message at the given level .
340	Log a message .
341	Generate a prefix for a given level .
342	Create a distributed training session .
343	Compute the metrics for the validation .
344	Iterate over all training metrics .
345	Load MNIST dataset .
346	Loads the mmahoney_text from the given path .
347	Load an IMDB dataset .
348	Load nietnamese dataset .
349	Load the wmt_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_fr_frag_fr_fr_fr_frag_fr_fr_fr_fr_frag_frag_fr_fr_fr_frag_frag_fraget_frag_frag_fr_fr_fraget_fr
350	Load the Jinflickr data .
351	Download a file from Google Drive .
352	Load a dataset from a file .
353	Assigns parameters to a network .
354	Load a network from a network .
355	Save a model to a dictionary .
356	Save a model to a checkpoint .
357	Loads a checkpoint file .
358	Load numpy array from a file .
359	Return a list of files matching the given path .
360	Return a list of all folders in the given path .
361	Check if path exists .
362	Download and extract a file from the given URL .
363	Return a list of strings .
364	Perform a threading function .
365	Transform a list of coords .
366	Performs a projection on a point .
367	Rotate a rotation matrix .
368	Crop an image .
369	Crop multiple images .
370	Flip an axis .
371	Flip multiple axes .
372	Shift the coordinates of a matrix .
373	Adjusts the brightness of an image .
374	Generate illumination image .
375	Adjust the hue of an image .
376	Resize an image .
377	Scale a pixel value to an image .
378	Calculate the samplewise norm of x .
379	Calculate the featurewise norm .
380	Calculate the principal components of the zca .
381	Perform a zca transformation on a zca .
382	Drop an image .
383	Convert a list of points to a map .
384	Parses a string into a list of annotations .
385	Parse darknet annotations .
386	Flip an image of an image .
387	Resize an image to an image .
388	Removes pad sequences from sequences .
389	Get the mask of a sequence .
390	Create a random image from an image .
391	Creates a random keypoint from an image .
392	Resize an image to an image .
393	Compute the discounted rewards .
394	Calculate cross entropy loss .
395	Compute the log weight .
396	Generate a random action by probabilities .
397	Calculate the cross entropy of a given target .
398	Compute sigmoid cross entropy .
399	Compute the cross entropy of a given target .
400	Calculate mean square square error .
401	Calculate the cross entropy of a sequence .
402	Decorator for max norm .
403	Convert x to a clip .
404	Convert x to swish .
405	Compute softmax .
406	Retrieves the length of a sequence .
407	Returns the size of this state .
408	Repeat a tensor .
409	Map coordinates to a batch of coordinates .
410	Applies offsets to a batch of inputs .
411	Generate minibatches .
412	Save a network .
413	Find a top - level model .
414	Delete a model .
415	Save a dataset .
416	Find a dataset by name .
417	Find all datasets in the database .
418	Delete dataset .
419	Save training log .
420	Save a valid validation log .
421	Delete training log .
422	Delete validation log
423	Create a new task .
424	Run a task .
425	Delete tasks .
426	Check if a task is unfinished .
427	Add nigrams to unigrams .
428	Load and preprocess the data .
429	Read an image .
430	Read images from a list of threads .
431	Save image to disk .
432	Save images to disk .
433	Draw boxes and labels .
434	Creates a new CNN .
435	Plot an embedding .
436	Draw weights .
437	Convert images to tfrecord .
438	Reads and decodes and decodes the image .
439	Print a list of parameters .
440	Print all layers .
441	Count the number of parameters .
442	Get all the parameters for this model .
443	Get initial arguments from the stack .
444	Perform a pooling operation .
445	Prefetch input data from input file .
446	Create a batch of images with dynamic padding .
447	Convert x to b .
448	Add bias to x .
449	Batch normalization .
450	Compute alpha .
451	Flatten a variable .
452	Returns a list of layers with the given name .
453	Get a list of variables with name .
454	Initialize RNN state .
455	Remove repeated elements from x .
456	Perform ternary operation .
457	Add notice to docstring
458	Alphasize an alpha value .
459	Predict a batch of data .
460	Evaluate confusion matrix .
461	Generate a random int .
462	Close tensorflow .
463	Open Tensorflow .
464	Clear all global variables .
465	Set the GPU memory .
466	Generate skip_gram_batch .
467	Sample a random number of words .
468	Returns a random sample from a set of probabilities .
469	Create a vocabulary from sentences .
470	Read words from a file .
471	Read analogy analogy file .
472	Build a dictionary from a dictionary .
473	Build a dataset from a list of words .
474	Save the vocabulary .
475	Convert a sentence to a vocabulary .
476	Convert data_path to tokens .
477	Calculate the multi -ble of hypotheses .
478	Convert a word to an id .
479	Convert word to id .
480	Convert a word to a word .
481	Restore embedding layer .
482	Creates a new hypersearch job .
483	Get swarm model parameters
484	Enable concurrency checks .
485	Returns a dictionary with common parameters .
486	Return a logger instance .
487	Release this instance .
488	Tracks an instance of the instance and checks that it has been reached .
489	Closes the connection policy .
490	Acquires a connection .
491	Close the pool .
492	Acquires a connection .
493	Close the connection policy .
494	Acquire a connection .
495	Release connection .
496	Recursively classify a state .
497	Constructs a classification record .
498	Add a record to KNN .
499	Delete records from the KNN classifier .
500	Delete a range from the KNN classifier .
501	Recompute the classification from a KNN record .
502	Convert label to category number .
503	Convert label list to category number
504	Convert a category to a list of labels .
505	Returns the vector of the given state .
506	Returns a list of labels for the given range .
507	Remove labels from the model .
508	Check if a record matches the criteria
509	Strip unlearned columns .
510	Update minimum dutyCycles .
511	Update minDutyCycles .
512	Internal method to update the minDutyCycles
513	Update the dutyCycles .
514	Calculate the average of columns per input .
515	Calculate the average span for a column .
516	Calculate the average span of a column .
517	Bump the weak column of weak columns .
518	Raises an exception if the given permutation is raised .
519	Initialize the perm connection .
520	Initialize the permutation
521	Initializes the permence .
522	Update the boost factors .
523	Update the boost factors .
524	Inhibit columns .
525	Indicates that the input overlaps of the overlap .
526	Indicates whether the input overlaps the given overlaps .
527	Returns the neighborhood of the given center .
528	Returns the nearest neighbor of the input center .
529	Create an array of data types .
530	Get the names of the inputs .
531	Get the names of all outputs .
532	Get a parameter by name .
533	Set a parameter to the region .
534	Returns a collection of regions .
535	Writes the model to the proto proto .
536	Create a new instance of the class .
537	Run the experiment .
538	Run the task main loop .
539	Finalize the model .
540	Create a checkpoint .
541	Delete model checkpoint .
542	Gets the optimizer label .
543	Get the stats for the input source .
544	Update model results .
545	Checks if the model is a best model .
546	Write the result to the cache .
547	Flush the prediction cache .
548	Delete the output cache .
549	Initializes periodic activities .
550	Check if the job is canceled .
551	Checks if the model is mature .
552	Sets the status of the model .
553	Read the state from the model .
554	Get the field contributions for this model .
555	Returns a list of swarm ids for the given sprintx index .
556	Returns a list of swarm ids that are completed .
557	Returns a list of swarm ids that are completed .
558	Returns the best model id for the given sprintx index .
559	Sets the status of the swarm .
560	Returns True if the state is active .
561	Check if a sprintx is completed .
562	Add an encoder .
563	Validate the specification .
564	Return a dictionary representation of this object .
565	Update the results for a job .
566	Create a MultiEncoder .
567	Validate the experiment control .
568	Match report keys .
569	Get report item from results .
570	Handle a model runner .
571	Run a model with the given parameters .
572	Recursively recursively recursively recursively .
573	Apply a function to a dictionary .
574	Closes the given object .
575	Load json value from file
576	Ticks all active activities .
577	Recursively update the original dictionary .
578	Print differences between two dictionaries .
579	Compare two dictionaries
580	Returns the specification for the identity region .
581	Set the random encoder .
582	Remove labels from the model .
583	Add a record to KNN .
584	Delete records from the KTM model .
585	Removes a range from the KTM .
586	Recompute the classification from the KTM model .
587	Constructs the classification record .
588	Compute the classification record .
589	Sets the autoDetectRecords value for this output stream .
590	Allocate the spatialFDR object .
591	Compute the current node .
592	Compute the spatial pool .
593	Initialize the ephemerals .
594	Cache sequence info .
595	Returns the temporal class for the temporal importer .
596	Builds the arguments for the given function .
597	Compute the tensor .
598	Finish the temporal memory .
599	Compute the raw score .
600	Compute the score of the predicted columns .
601	Add data to the plot .
602	Add a histogram .
603	Add a 2D array to the plot .
604	Creates a base plot .
605	Get the version of the repository .
606	Check if nupic bindings are installed .
607	Find requirements files .
608	Return the indentation of the given string .
609	Generate a metric spec .
610	Generate a file from template files .
611	Get the value of a property .
612	Load experiment description .
613	Generate a list of metrics for the given options .
614	Get the predicted field type .
615	Generate inference arguments .
616	Command line arguments .
617	Parse a timestamp .
618	Convert a string to a boolean value .
619	Unescape a string .
620	Parse SDR string .
621	Parse a string .
622	Get coordinates from a given index .
623	Returns the index of the given coordinates .
624	Returns a neighborhood of the center of the center of the center of the given center .
625	Returns the neighbors of the given coordinate .
626	Returns the top - axis of the given coordinates .
627	Hash a coordinate .
628	Returns the order for the given coordinate .
629	Returns the bit for the given coordinate .
630	Return the index of the given value .
631	Create a new segment .
632	Destroy a segment .
633	Create a synapse .
634	Destroy a synapse .
635	Compute the number of synapses .
636	Return the number of segments .
637	Reads a connection from a proto table .
638	Get the value of a property .
639	Get a boolean value .
640	Set property value .
641	Returns a dictionary containing the properties of the environment .
642	Read a configuration file .
643	Get configuration paths .
644	Add noise .
645	Generate coincident matrix
646	Generate a list of vectors .
647	Generate a sequence of sequences
648	Generate a list of hubs for a hub .
649	Generate a simple correlation matrix .
650	Generate a sequence of patterns .
651	Determine if two TMP parameters are equal .
652	Check if two segments are equal .
653	Computes the difference between two cells .
654	Calculate frequency counts .
655	Calculate the duration of the given vector .
656	Calculate the average on time series .
657	Calculate the average on time .
658	Plot histogram .
659	Compute the probability of a vector .
660	Compute the percentage of the output of a vector .
661	Compute the saturation levels of outputs .
662	Check that the input matches the input .
663	Calculates the center of the center of a space .
664	Creates a copy of the given columns .
665	Convert an array to a string .
666	Sample the distribution .
667	Returns the logability of the distribution .
668	Sample the posterior of the distribution
669	Creates a uniform link for the given sensor region .
670	Creates a link to a classifier .
671	Create a new network .
672	Get predictions for a classification region .
673	Run hotgym .
674	Load dummy model parameters .
675	Get the metrics for this model .
676	Checks if the model should exit .
677	Return the description of this object .
678	Generate a list of records .
679	Returns a list of records in this record .
680	Get all records in this record .
681	Add a number of values to the list .
682	Get the SDR for the given value .
683	Returns the zero - encoded encoding for the given n .
684	Get total number
685	Calculate the total number of fields .
686	Gets the encoding of the given numpy array .
687	Get all encodings .
688	Save all records to a file .
689	Remove all records from this record .
690	Encode a value .
691	Set the type of the encoder .
692	Initialize the encoder .
693	Load the experiment description .
694	Load an experiment description from a directory .
695	Loads a description from a file .
696	Get model ID from params hash .
697	Returns the best model id for the given swarm .
698	Get information about a model .
699	Return a list of all the models in the swarm .
700	Gets the list of possible particles for the given swarm .
701	Returns the first non - random number of particles in the swarm .
702	Get the results per choice for a choice
703	Get stream definition .
704	Check if the hypersearch is ready to exit .
705	Record model progress .
706	Run a model .
707	Check if the engine is running .
708	Run the experiment with the given options .
709	Run the given permutations script .
710	Create a backup file .
711	Iterate over modelIDs .
712	Launch the given command line .
713	Start the hypersearch .
714	Loads a hypersearch job .
715	Save hypersearch job ID .
716	Load Hypersearch job ID .
717	Returns the path to the hypersearch job ID .
718	Generate a CSV file .
719	Query model IDs .
720	Get optimization metrics .
721	Get all metrics .
722	Returns a list of records .
723	Creates a list of activities for the given function .
724	Returns the number of rows in the database .
725	Returns the pattern for the given number .
726	Add a random number to a set of bits .
727	Return a set of numbers for a given bit .
728	Get the number of numbers for a given bit .
729	Return a pretty printable pattern for the given bits .
730	Generate random patterns .
731	Get a random value from the current state .
732	Generate a set of patterns .
733	Infer a single step for a single step .
734	Calculate the error for the given record number .
735	Sort records by key .
736	Sort records by chunk index .
737	Merge files into the output file .
738	Compute the predicted cells .
739	Print a message to the console .
740	Returns the coordinate for the given coordinate .
741	Returns the radius for the given speed .
742	Read from a file .
743	Write this message to a file .
744	Ensure that the given function is a valid anomaly model .
745	Remove labels from the anomaly classifier .
746	Add a label to the anomaly classifier .
747	Returns the labels for the given range .
748	Compute the analysis .
749	Remove duplicates from a list of likelihoods .
750	Get the classifier region of the network .
751	Add anomalyClassifier region to the network .
752	Set the results per choice .
753	Translate metrics to JSON string
754	Sets a set of metric names .
755	Get field meta info .
756	Create a directory in the experiment directory .
757	Decorator for adding new attributes .
758	Generate a random number of inputs .
759	Append inputs to a list of inputs .
760	Append numpy arrays with numpy values .
761	Modifies the input bits of the input value .
762	Get a random value from the input space .
763	Create a RecordSensor instance
764	Creates a new network .
765	Runs a network .
766	Removes lines from a string .
767	Returns a dictionary of all the metrics .
768	Returns the details of a given metric .
769	Add results to the results .
770	Returns the ground truth value for the given inference element .
771	Construct metrics module modules .
772	Shift the inference result into the buffer .
773	Generate statistics for a file .
774	Main entry point .
775	Enabbreviate text .
776	Returns the database name for the given version .
777	Connect to the database .
778	Returns a list of rows that match the given fields .
779	Retrieves a single row from a table .
780	Insert a job into the database .
781	Start a job .
782	Reactivate running jobs .
783	Return a list of available jobs .
784	Cancel all running jobs .
785	Count the number of jobs in the queue .
786	Get the list of jobs for this job .
787	Iterate over all intervals in the given data .
788	Return a list of models with the given job ID .
789	Get information about a job .
790	Set the job status .
791	Set the completion status of the job .
792	Cancels a job .
793	Get model IDs for a job .
794	Returns the number of active jobs for the given client .
795	Returns the number of active jobs for the given client key .
796	Returns the active jobs for the given client info .
797	Update job results .
798	Clear all models from the database .
799	Returns a list of models for the given model IDs .
800	Get model fields for a given job ID .
801	Get a list of models for a given job ID .
802	Get a list of models for a given model ID .
803	Get a list of models for the given model IDs .
804	Find the next model for the given job id .
805	Initialize ephemerals .
806	Enable tap .
807	Disable tap .
808	Handle log output .
809	Sets the sample data .
810	Finishes the model .
811	Generate stats for a file .
812	Fix up random encoder params .
813	Read the TemporalMemoryMonitor .
814	Pick a random number from a distribution
815	Create an indicator .
816	Create a multi - dimensional multi - dimensional array .
817	Calculate the distribution of a distribution .
818	Create a new sparse matrix .
819	Update a row .
820	Import and run a function .
821	Compute the value of the sliding window .
822	Compute the next value .
823	Add an instance of the average .
824	Returns the most likely probability of the predicates .
825	Compute the exporter of the given predicates .
826	Returns a list of the names of the field names .
827	Returns the value for the given field .
828	Get the description of a given field .
829	Returns the encoded bit description of the bit offset .
830	Prints the bits in the output .
831	Decode a field into a dictionary .
832	Draw the coverage of a file .
833	Create a random input vector
834	Compute the SDR .
835	Clears the model .
836	Removes rows from the table .
837	Returns the distribution of the given pattern .
838	Implementation of inference .
839	Finds the closest neighbor of the given pattern .
840	Find the closest training pattern for the given input pattern .
841	Returns the pattern for the given index .
842	Returns the partition id for the given index .
843	Add a partition id to the index .
844	Recursively rebuild the partitionId map .
845	Calculate the distance between two patterns .
846	Calculates the distance between the input pattern .
847	Replace the categories with the given mapping .
848	Convert non - numeric data to output .
849	Returns the number of output elements for the given name .
850	Set the value of a parameter .
851	Rewind the file .
852	Get the next record .
853	Append a record to the file .
854	Append a list of records .
855	Return a JSON representation of the record .
856	Seek from the file .
857	Update sequence info .
858	Get the start row of a bookmark
859	Returns True if the inference element is a temporal element .
860	Returns the temporal delay for the given inference element .
861	Calculate the maximum delay .
862	Determine if the given inference type is a temporal type .
863	Create a new enum .
864	Create a directory from absolute path .
865	Read configuration file .
866	Set custom configuration properties .
867	Clear the configuration file .
868	Reset all custom configuration properties .
869	Clear the dynamic configuration file .
870	Return a dictionary of values from the config file .
871	Edit a custom configuration file .
872	Sets the path to the config file .
873	Get the state of this particle .
874	Initialize the state from the particle state .
875	Copies the variable states from a particle state .
876	Get position from state
877	Implements the permutation .
878	Get the position of this particle .
879	Returns the logger instance .
880	Create a model from a dict .
881	Compute the features for the given columns .
882	Activate cells .
883	Activate Dendrites .
884	Reset all active cells .
885	Activate a predicted column .
886	Purges predicted column .
887	Create a new segment .
888	Removes the minPermanence synapses .
889	Finds the least used cells in the given cells .
890	Create a new synapses .
891	Adapts a segment to a segment .
892	Returns the column for the given cell .
893	Returns the cells for the given column .
894	Map cells to columns .
895	Returns a list of predicted cells .
896	Reads the protobuf protobuf protobuf .
897	Generate a sequence of patterns .
898	Add noise to a sequence .
899	Prints a sequence of patterns .
900	Prints a list of traces .
901	Pretty print metrics .
902	Update anomaly likelihoods .
903	Calculates the skip records for the given window size .
904	Reads an anomaly likelihood from a proto proto proto .
905	Write the histograms .
906	Calculate anomaly probability for a given value .
907	Replace the iteration cycle .
908	Handle input record .
909	Advance the current phase .
910	Handle input record .
911	Advances the iterator over the iterator .
912	Write the previous value to the proto proto proto .
913	Reads a PreviousValueModel from proto . proto . proto
914	Compute the log sum of lx .
915	Normalize lx .
916	Log a message .
917	Log a message .
918	Log a warning message .
919	Log an error message .
920	Log a message .
921	Log a message .
922	Check if a record is valid
923	Calculate the sum of elements in the list .
924	Calculate the mean of a list .
925	Gets the aggr mode of the input list .
926	Generate a dataset
927	Get the filename for the input file .
928	Returns the end time for the given time .
929	Get the function pointer to the given function name .
930	Create aggregate record .
931	Get next record .
932	Run the model .
933	Get model checkpoint file path .
934	Write the model to a checkpoint .
935	Read model from checkpoint directory .
936	Write the model to proto . proto . proto
937	Save model instance .
938	Get model pickle file path
939	Run an experiment .
940	Replace the value of a variable .
941	Report the command line usage .
942	Run the experiment .
943	Returns the path to the model checkpoint directory .
944	Get the parent directory for the given experiment directory .
945	Get the checkpoint label from a checkpoint directory .
946	Check if checkpointDir is a checkpoint directory .
947	Prints all available checkpoints .
948	Run the task .
949	Create periodic activities .
950	Creates a random vector from a vector .
951	Show predictions .
952	Train the TMM .
953	Calculate the closeness scores .
954	Return the function name of the caller .
955	Prints a string to stdout .
956	Get the description of a function .
957	Generate log file path .
958	Convert an interval to a list of minutes .
959	Compute the division of the dividend .
960	Validate the given value .
961	Initialize logger .
962	Match patterns .
963	Returns the scaled value for the given input .
964	Export the network .
965	Convert a bit array to a string .
966	Calculate the percentage of x1 x2 .
967	Reset vector .
968	Runs the CPU .
969	Extracts the arguments from the caller .
970	Returns a list of all the members of this node .
971	Copies the state of the predicted states .
972	Sets the state pointers for this cell .
973	Check if the segment is active .
974	Map index to nonzero bits .
975	Create a new bucket .
976	Create a new representation of the given index .
977	Check if a new Repository is OK
978	Count the number of overlap indices .
979	Count the overlap between two repos .
980	Checks if the given index is an overlap .
981	Initialize bucket map .
982	Create a SDR classifier .
983	Returns a metric from the trace .
984	Calculate the number of active cells per column .
985	Calculates the total number of predicted cells in the predicted cells .
986	Prints a list of connections for each cell .
987	Pretty print the sequence cell cells .
988	Create TemporalAnomaly .
989	Add a value to the writer .
990	Scale a row to the writer .
991	Copy records from a reader to a writer .
992	Sample data from a reader .
993	Returns the first value of the first value in the input .
994	Generates a description of a range of ranges .
995	Reset the segment statistics .
996	Internal method to update the stats for the next state of the predicted state .
997	Print a state
998	Print Confidence Confidence
999	Print column Confidence
1000	Print parameters .
1001	Print the end of the current state .
1002	Update the average sequence length .
1003	Infer the state of the input cells in the model .
1004	Infer phase 2 .
1005	learn backtracks from start cell
1006	Recursively learn the previous state .
1007	Learner for learning mode .
1008	Recursively learn the learning state .
1009	Compute the dutyCycle .
1010	Trim segments in a cell .
1011	Trim segments .
1012	Removes all segment updates from the table .
1013	Returns the best matching cell for the given cell .
1014	Returns the best matching segment for the given cell .
1015	Get the cell for a new segment .
1016	Choose a list of cells to learn .
1017	Adapts a segment .
1018	Add a synapse .
1019	Returns a list of patterns for a given number of patterns .
1020	Builds a sequence of sequences .
1021	Builds a sequence of random sequences .
1022	Create a new TMTM instance .
1023	Assert that two TMS objects are equal .
1024	Determine if the given character is quoted .
1025	Quote a character in hexadecimal .
1026	Encode a b2a file .
1027	Convert a string to hexadecimal
1028	Encode a base64 encoded string .
1029	Decode a base64 encoded string .
1030	Encode a b32 encoded string .
1031	Decode a base32 encoded string .
1032	Decode a base16 encoded string .
1033	Encodes the input from the input stream .
1034	Decode the input stream .
1035	Encodes a string .
1036	Return a range from the source buffer .
1037	Return the beginning of the source buffer .
1038	Return the end of the range .
1039	Returns the position of the current position .
1040	Returns the line of the current position .
1041	Returns a list of source lines .
1042	Compare two nodes .
1043	Visit a node .
1044	Unpack a float into a float .
1045	Pack a float into a float .
1046	Context manager .
1047	Format a list of lines .
1048	Print a traceback to stdout .
1049	Print an exception .
1050	Format an exception .
1051	Format an exception .
1052	Print a stack trace .
1053	Return a list of lines from the stack .
1054	Seed a random number .
1055	Shuffle the elements in x .
1056	Return the names of the slots .
1057	Add an extension to the registry .
1058	Remove an extension .
1059	Update the wrapped wrapper .
1060	Convert an object to a key .
1061	Unquote a string .
1062	Format a datetime object .
1063	Read headers from the file .
1064	Check if a line is a header .
1065	Returns a list of headers matching the given name .
1066	Get header value .
1067	Returns a list of headers matching the given name .
1068	Return a list of address names .
1069	Get the next line .
1070	Returns a list of address addresses .
1071	Return the address of the address .
1072	Get domain string .
1073	Get a delimited string .
1074	Returns a list of all the characters in the field .
1075	Returns the number of days in a month .
1076	Convert a month to ordinal .
1077	Create a new instance from an ordinal .
1078	Return the ISO formatted string representation of this instance .
1079	Replace this date with the given year .
1080	Returns the year of the week .
1081	Return the name of the timezone .
1082	Replace the time with the given time .
1083	Create a datetime from a date and time .
1084	Return the time part .
1085	Return a copy of the current time .
1086	Replace this datetime with the given year .
1087	Concatenate two sequences .
1088	Returns the number of occurrences of a given b .
1089	Find the first occurrence of a sequence .
1090	Concatenate a sequence .
1091	Encode a base string .
1092	Subtract a string from a string .
1093	Split a string into a string .
1094	Find all occurrences in a string .
1095	Escape a pattern .
1096	Free a temperature .
1097	Decode a file .
1098	Return a list of all the closest matches .
1099	Count the number of leading characters in a line .
1100	Generate a diff between two sequences .
1101	Generate a context diff .
1102	Return a list of lines from the given delta .
1103	Create a new Match object from an iterable .
1104	Sets the sequence1 .
1105	Set the seq2 sequence .
1106	Return a list of matching blocks .
1107	Return a list of opcodes .
1108	Return a list of opcodes for each opcodes .
1109	Compare two lines .
1110	Dump a list of values to a string .
1111	Generate a formatted line of lines .
1112	Generate a file .
1113	Split text into data list .
1114	Collect lines from diffs .
1115	Add prefix to the prefix .
1116	Convert a list of flags to a list of differences .
1117	Create a table of diffs .
1118	Creates a Benchmark .
1119	List all files in a directory .
1120	Return a pretty printable string .
1121	Return a string representation of an object .
1122	Decorator for action .
1123	Decorator for TokRule .
1124	Decorator for Locator .
1125	Creates a rule .
1126	Evaluate a rule .
1127	Decorator for seq_rules .
1128	A sequence of elements in a sequence .
1129	Registers a new line .
1130	Join a base URL into a base URL .
1131	Check if url is a string .
1132	Return a new SplitResult object .
1133	Get the lines of a file .
1134	Update the cache for a file .
1135	Check if path is a file .
1136	Determine if a directory is a directory .
1137	Return the longest prefix of a list of paths .
1138	Splits a file into a filename .
1139	Wrap text into text .
1140	Fill text with text .
1141	Removes whitespace from text .
1142	Convert long number to bytes .
1143	Convert a list of characters into a long - endian list .
1144	Initialize the message digest .
1145	Enter an event .
1146	Return a copy of x .
1147	Return a copy of x .
1148	Ensure that x is alive .
1149	Wrap Py3k3k warning .
1150	Print a warning message .
1151	Format a warning message .
1152	Log a warning .
1153	Calculates the hash of this object .
1154	Remove a value from the list .
1155	Pop a key from the list .
1156	Convert a string to a string .
1157	Acquire a lock .
1158	Release the lock .
1159	Wait for a lock .
1160	Notify the waiters .
1161	Acquire a lock .
1162	Set the current state .
1163	Wait for the current thread .
1164	Start thread .
1165	Run the target .
1166	Join the thread .
1167	Dump the registry .
1168	Parse B2QP data .
1169	Convert a string to a RLEx code .
1170	Formats text .
1171	Format option strings .
1172	Update the attributes of the dict .
1173	Inserts a list of x into an array .
1174	Lock a function .
1175	Unlock the queue .
1176	Return a copy of this object .
1177	Search for a string .
1178	Subtracts a string from a string .
1179	Split a string into a list of strings .
1180	Create a tuple of regs .
1181	Gets a group of data .
1182	Returns true if the pattern matches the pattern .
1183	Create a new child context .
1184	Match the given context .
1185	Dispatch an operation .
1186	Checks if a character is set .
1187	Convert an integer into a fraction .
1188	Round a fraction .
1189	Returns a random number of random numbers .
1190	Return a list of names matching a pattern .
1191	Return True if name matches pattern .
1192	Translate a pattern to a regular expression .
1193	Called when the task finished .
1194	Put item into queue .
1195	Calculate a set of imports from a script .
1196	Parse the future features from the given node .
1197	Context manager .
1198	Compute the loss of the model .
1199	Returns a list of all variables .
1200	Create a baseline from a spec .
1201	Reset the observation state .
1202	Execute the action .
1203	Perform a step .
1204	Create a layer from a spec .
1205	Returns the arguments for the target optimizer .
1206	Create an Environment from a spec .
1207	Setup Sphinx .
1208	Output an image link .
1209	Output eol_eol_literal_literal .
1210	Generate a table .
1211	Run the directive .
1212	Generate a worker agent class .
1213	Run a single thread .
1214	Convert an int to a position .
1215	Wait for a given state .
1216	Create an optimizer from a spec .
1217	Registers the model saver operations .
1218	Save the tensor .
1219	Restore the model .
1220	Reset all fetches .
1221	Process a tensor .
1222	Processes a shape .
1223	Create a preprocessor from a spec .
1224	Create a local model .
1225	Setup the components of the memory model .
1226	Calculates the cumulative reward of a terminal .
1227	Compute the tf_loss .
1228	Compute the loss .
1229	Generate optimizer arguments .
1230	Compute the optimizer .
1231	Imports an experiment .
1232	Import an experiment .
1233	Create a distribution from a spec .
1234	Evaluate an atomic state .
1235	Create an agent from a spec .
1236	Get a named tensor by name .
1237	Create a Network object from a spec .
1238	Put item into memory .
1239	Move an external index to the queue .
1240	Move an item at the given index .
1241	Returns the next position .
1242	Return a sample with priority .
1243	Sample minibatch .
1244	Update the tensor .
1245	Import the given experiences .
1246	Close the socket .
1247	Read data from socket .
1248	Check if action is available .
1249	Check if the state is available
1250	Perform an action on the game .
1251	Perform the left action on the left of the state .
1252	Add a random tile .
1253	Print the current state
1254	Setup the model saver .
1255	Setup scaffold .
1256	Returns a list of hooks for the model .
1257	Create operations for atomic operations .
1258	Return a set of saved components .
1259	Save a component .
1260	Restore a component .
1261	Get a component by its name .
1262	Import demonstrations from a dictionary .
1263	Get the state of the screen .
1264	Make sure the states are unique .
1265	Validate the actions spec .
1266	Create a game .
1267	Do the fly .
1268	Fire the player .
1269	Fills the game .
1270	Fire the plot
1271	Setup the components and tf_funcs .
1272	Create a dict of distributions .
1273	Create an exploration object from a spec .
1274	Create a memory object from a spec .
1275	Retrieve the indices for the given indices .
1276	Initialize the initializer .
1277	Perform a step .
1278	Markdown text .
1279	Parse lheading tokens .
1280	Wrap the text .
1281	Generate HTML code .
1282	Encode HTML tags .
1283	Generate an HTML link .
1284	Generate footnote reference .
1285	Render footnote item .
1286	Build a list of meta tags .
1287	Process a docstring .
1288	Calculate the loss .
1289	Returns the arguments for the baseline .
1290	Compute the gradients of the function .
1291	Setup the tf_components and tf_components .
1292	Import a demo experiment .
1293	Compute the tensor loss .
1294	Compute the loss of the model .
1295	Import an experiment .
1296	Update the demo .
1297	Constructs a tensor from a config object .
1298	Set the text of the clipboard .
1299	Reset console color .
1300	Create a Window from a point .
1301	Handle mouse event .
1302	Execute a keybd event .
1303	Post a message .
1304	Send a message .
1305	Get console title
1306	Get console title
1307	Check if the user is locked .
1308	Checks if the process is 64 bit .
1309	Create input structure .
1310	Create a new mouse input .
1311	Create a keyboard input .
1312	Create a new HardwareInput .
1313	Create a control from a point .
1314	Creates a control from the given point .
1315	Delete the log file .
1316	Returns a list of all pixel colors of this rectangle .
1317	Get all children of this control .
1318	Set the window text .
1319	Check if the window is top level .
1320	Get the top level of this control .
1321	Show the window .
1322	Move the top level to the top level .
1323	Set the active window .
1324	Run the current thread .
1325	Compute the saliency map .
1326	Create a model from a Keras model .
1327	Returns the normalized distance of the image .
1328	Returns the axis axis axis axis .
1329	Returns True if the model has a gradient .
1330	Return predictions for a given image .
1331	Run a batch of predictions .
1332	Returns the gradient of the image .
1333	Compute predictions and gradient of the image .
1334	Returns the gradient of the model .
1335	Calculate the best class of the given logits .
1336	Return the name of the criteria .
1337	Compute softmax of logits .
1338	Calculate cross entropy .
1339	Calculate the cross entropy of the log .
1340	Convenience function for binarization .
1341	Generate an example example image .
1342	Load samples from a dataset .
1343	Create a new array with the given index .
1344	Return the output of the image .
1345	Return the predictions of the image .
1346	Compute the gradient of the image .
1347	Clone a git repository .
1348	Write a success response .
1349	Write an error response .
1350	Write a JSON response .
1351	Create a response object .
1352	Create a success response .
1353	Make an error response .
1354	Gets the cluster cluster value .
1355	Get the role role .
1356	Get the environment variable .
1357	Get the topology .
1358	Get the component component component .
1359	Get the instance instance instance .
1360	Get the start time for the start time .
1361	Get the endtime of the request .
1362	Get the query parameter .
1363	Get the offset of the argument .
1364	Get the length of the argument .
1365	Get the required metric names .
1366	Validate interval .
1367	Start connection .
1368	Register a message builder .
1369	Create a tar file .
1370	Get the subparser for the given command .
1371	Gets the hieron directory .
1372	Returns a list of all the local libraries in the local directory .
1373	Return the default environment variables .
1374	Parses the given namespace .
1375	Parse a namespace property .
1376	Returns the path to the Java library .
1377	Check if java_HOME_HOME_HOME_HOME_HOME is set .
1378	Check if the release file exists .
1379	Print information about the build .
1380	Get the version number .
1381	Get the exception summary .
1382	Register a callback .
1383	Unregister a watch .
1384	Trigger all watchers .
1385	Set the physical plan .
1386	Set the packing plan .
1387	Set the execution state .
1388	Returns the number of instances in this instance .
1389	Return a list of all the machines .
1390	Get the status of the plan .
1391	Convert kv2 kv2 kv2 kv2 kv2 kv2 kv2 .
1392	Synchronously synchronizes the state manager .
1393	Get topology by name .
1394	Returns all topologies for a given state manager .
1395	Add a new topology .
1396	Remove a topology .
1397	Extract the execution state from the topology .
1398	Extracts the scheduler location from the topology .
1399	Extract tmaster location from topology .
1400	Extracts the logical plan from the topology .
1401	Extract the packing plan .
1402	Set topology info for the topology .
1403	Returns the topology info for the given topology .
1404	Load the configs .
1405	Validate extra link .
1406	Validate url format .
1407	Emits a single task .
1408	Determine if the queue is still active .
1409	Convert components to a table .
1410	Filter the bolts table .
1411	Filter out spout information .
1412	Get a list of topologies for this node .
1413	Get packing plan .
1414	Get the IPLAN
1415	Create a pplan .
1416	Get the execution state of a given topology .
1417	Get the execution state for the given topology .
1418	Create a new execution state .
1419	Get the location of the scheduler .
1420	Get the scheduler location for the given topology .
1421	Load a Java object from a file .
1422	Load a string from a string .
1423	Copy this object to another object .
1424	Validate state locations .
1425	Initialize the PulsarSpoutSpout instance .
1426	Get the Jstack information for the given instance .
1427	Create a new topology .
1428	Builds the extra args dictionary .
1429	Convert a dict to a list of arguments .
1430	Run the update command .
1431	Get the PID of an instance .
1432	Checks if the given group is a group .
1433	Create a custom group from a custom group .
1434	Create a new topology .
1435	Registers metrics for this metric .
1436	Update the counter with the given name .
1437	Update a reduced metric .
1438	Update the received packet size .
1439	Update the number of packets in the database .
1440	Register metrics .
1441	Serialize the data tuple .
1442	Increment the next tuples .
1443	Execute a tuple of tuples .
1444	Deserialize the data tuple .
1445	Register a metric .
1446	Poll the queue .
1447	Add an item to the queue .
1448	Parse a SemVerVersion string .
1449	Returns a list of zk state managers for the given configuration .
1450	Returns a list of all file state managers .
1451	Increment the counter .
1452	Update a value with the given key .
1453	Add a key .
1454	Add a new data tuple to the stream .
1455	Add a checkpoint state .
1456	Check if path is valid .
1457	Validate a Java classpath .
1458	Returns a list of all the dependencies in a zip file .
1459	Add a pex to the path .
1460	Resolve the Hesson suffix of a class .
1461	Import and return a class from the given path .
1462	Add a new source to the builder .
1463	Build the topology .
1464	Replace wildcards with wildcards .
1465	Get command handlers .
1466	Sets the default value of the timeline .
1467	Process a tuple .
1468	Process a tick .
1469	Process a tick .
1470	Get the stmgrs summary of a tmaster .
1471	Setup the executor .
1472	Main entry point .
1473	Get the healthmgr command .
1474	Get tmaster processes .
1475	Returns a dictionary of stream - processes .
1476	Returns a command to run on the checkpoint manager .
1477	Return a list of instances for a container .
1478	Returns a dictionary containing the processes for the given shard .
1479	Wait for stdout to stdout .
1480	Start the process .
1481	Start the process monitor .
1482	Get the command to run on the cluster .
1483	Launch the process .
1484	Start state manager .
1485	Run the topology .
1486	Convert modules to main module .
1487	Load a class from a dictionary .
1488	Save a module .
1489	Save a file to a file .
1490	Get the tail of a file .
1491	Get the serializer class .
1492	Register a timer task in seconds .
1493	Get the next timeout interval .
1494	Trigger timer tasks .
1495	Find the closing braces for a query .
1496	Get subparts from query string .
1497	Parse a query string .
1498	Process incoming tuples .
1499	Acknowledge ack .
1500	Perform a failure .
1501	Template for slave slaves .
1502	Generate a scheduler configuration .
1503	Create an uploader .
1504	Build apiserver .
1505	Create statemgr config file .
1506	Generate the hcl_tools_hcls file .
1507	Print cluster information .
1508	Add additional arguments .
1509	Stop the cluster .
1510	Start cluster .
1511	Start Heron tools .
1512	Distribution to a master .
1513	Wait for a master to start a master
1514	Wait for a job to be started .
1515	Scp a package .
1516	Create a tarfile .
1517	Start master nodes .
1518	Start slave nodes .
1519	Parse the inventory file .
1520	Get the home path for a remote host .
1521	Get the hostname for a remote host .
1522	Determine if the given address is an IP address .
1523	Log a message .
1524	Remove symbolic links from a file .
1525	Return a table as a table .
1526	Add an error to the context .
1527	Check if host port is reachable .
1528	Pick unused port .
1529	Establish SSH tunnel .
1530	Runs the watcher on the given files .
1531	Get the pplan for a given topology .
1532	Get the execution state for a given topology .
1533	Get scheduler location .
1534	Create socket options .
1535	Initialize the topology .
1536	Parse the environment variables .
1537	Add a spec .
1538	Add a spout .
1539	Add a new bolt .
1540	Sets the topology configuration .
1541	Create a new topology .
1542	Return a dictionary of all the queries .
1543	Get cluster clusters
1544	Get the logical plan .
1545	Get information about the topology .
1546	Get the metrics for a component .
1547	Configure logging .
1548	Initialize a logging file .
1549	Set logging level .
1550	Get the spout .
1551	Creates a new Bolt instance .
1552	Get the base component of the topology .
1553	Returns a protobuf configuration .
1554	Add input streams to Bolt .
1555	Add output streams to the output stream .
1556	Returns a set of streams for the output .
1557	Get the stream id .
1558	Get the stream schema for the given fields .
1559	Gets the component id .
1560	Register a metric .
1561	Get a list of streams for a given component .
1562	Return a list of tasks for a given component .
1563	Add a task hook .
1564	Gets the metrics collector .
1565	Invoke a spoutack .
1566	Invoke a spout fail .
1567	Invoke the bolt executor .
1568	Invokes bolt_ack_ack_ack_hook .
1569	Invoke BoltFail .
1570	Submit the topology .
1571	Submit a task to the topology .
1572	Sets up the files to consume .
1573	Add verbose command to parser .
1574	Add an argument to the parser .
1575	Return hexadecimal representation of hex string .
1576	Create a shell endpoint for the given instance .
1577	Returns the URL for the shell log files .
1578	Creates a URL for a shell log file .
1579	Create an outgoing packet .
1580	Send message to dispatcher .
1581	Create an incoming packet .
1582	Read the incoming packet .
1583	Generate a new REQID .
1584	Read YAML config file .
1585	Send buffered messages .
1586	Handle a state change .
1587	Checks that the given stream is emitted .
1588	Get the topology configuration .
1589	Set the topology context .
1590	Get a dictionary from the topology configuration .
1591	Setup custom group grouping .
1592	Add a new task to the stream .
1593	Prepare the stream .
1594	Choose a list of tasks for a given stream .
1595	Return a string representation of a file .
1596	Format a timestamp .
1597	Format the prefix of a file .
1598	Read data from a file .
1599	Creates a new subprocess .
1600	Convert a command to a string .
1601	Chain command list .
1602	Parse the topology location .
1603	Convert metrics to a table .
1604	Run metrics on the tracker .
1605	Run Bolt bolts .
1606	Run a list of containers .
1607	Create a HeronComponentSpec .
1608	Create a HeronTuple .
1609	Create a HeronTuple .
1610	Create a root TupleInfo object .
1611	Parse nolint errors .
1612	Process global suppression files .
1613	Checks if an error is suppressed .
1614	Returns true if the given string matches the given pattern .
1615	Replace all regular expressions in a string .
1616	Search for a string .
1617	Determines if the given error is printed .
1618	Check if a line is a CPP string
1619	Clean up raw strings .
1620	Finds the next line from a list of lines .
1621	Finds the next non - line comment .
1622	Remove multiple lines from a range .
1623	Finds the end of the given line .
1624	Close expression .
1625	Finds the start of an expression in the given line .
1626	Reverse close expression .
1627	Check for copyright .
1628	Get indent level .
1629	Get the header of a file .
1630	Checks if a header guard is valid .
1631	Checks if a file is included in the given file .
1632	Check for bad characters .
1633	Checks if the given file is a new line .
1634	Check if the given line is a thread safe thread .
1635	Check for spacing for a function call .
1636	Checks if the given line is a valid function .
1637	Checks if a comment is valid .
1638	Checks if the given line is spacing .
1639	Check for whitespace spacing .
1640	Checks if the given line is comma separated .
1641	Checks if the given expression is a type .
1642	Checks for whitespace spacing .
1643	Checks the section spacing for a section .
1644	Get the previous non - blank line for a given line .
1645	Checks if the given line is trailing .
1646	Finds the check macro for the given line .
1647	Checks if the given line is valid .
1648	Check alt tokens .
1649	Get line width
1650	Remove common suffixes .
1651	Classify a file in the given fileinfo .
1652	Get the text inside a start_pattern .
1653	Checks if a file is a global static constant .
1654	Check that the given line is printf .
1655	Checks if the given line is a derived function .
1656	Checks if the given line is out of the given line .
1657	Checks if a line is an initializer list .
1658	Checks if the given line is non - constant .
1659	Checks if the given line is a valid Casts .
1660	Checks that the given string is castable .
1661	Checks if the given line arguments are expected .
1662	Determine whether the given filename matches the given filename .
1663	Update include state .
1664	Checks if a pair is a pair of pairs .
1665	Checks if a virtual line is valid .
1666	Check if the given line is redundant .
1667	Check if a block is in a namespace .
1668	Checks if a namespace indentation is in a namespace .
1669	Flag CXX1414 features .
1670	Process file data .
1671	Process the config file .
1672	Process a file .
1673	Print the error codes .
1674	Parse command line arguments .
1675	Expand directories .
1676	Finds the header for the given header .
1677	Reset a section .
1678	Check if the line is in alphabetical order .
1679	Check if the header is in the next section .
1680	Set the verbose level .
1681	Add filters .
1682	Increment error count .
1683	Prints error counts .
1684	Start a function .
1685	Repository name of repository .
1686	Split the name of the project .
1687	Collapse strings .
1688	Checks the end of the given line .
1689	Checks if a template argument is in a template .
1690	Update preprocessor .
1691	Return the innermost class info .
1692	Check that the block is completed .
1693	Create a new Streamlet .
1694	Add a flat map to the streamlet .
1695	Add a filter to the streamlet .
1696	Clones this partition .
1697	Create a new stream by window .
1698	Create a new Streamlet .
1699	Create a new log stream .
1700	Add a function to the streamlet .
1701	Join this stream to another stream .
1702	Creates an outer join .
1703	Creates an outer join .
1704	Creates an outer join .
1705	Extract common arguments from command line arguments .
1706	Expand command line arguments .
1707	Run command .
1708	Connect to a command .
1709	Send a string to stdin .
1710	Convert value to JS object .
1711	Set the name of the function .
1712	Constructs a new array from a python array .
1713	Construct an object from a Python object .
1714	Emit an opcode .
1715	Compile the tape .
1716	Pad a number to a number .
1717	Convert a string to a replacement template .
1718	Fixes JS arguments .
1719	Emit a statement .
1720	Translate the given element into a node .
1721	Decorator to wrap a function .
1722	Return True if tval is a lval .
1723	Translate a file .
1724	Execute the given JavaScript .
1725	Evaluate an expression .
1726	Check if the given token is not found .
1727	Parse an identifier .
1728	Convert this object to an array .
1729	Parse a statement .
1730	Match a string .
1731	Call this method .
1732	Check if the last object is empty .
1733	Check if the argument is an object .
1734	Remove all objects from the code .
1735	Checks if the source is a regexp .
1736	Parse a number .
1737	Parse exponent .
1738	Unify all JavaScript strings .
1739	Return True if this object is in an object .
1740	Download and extract a zip file .
1741	Add inputs to the graph .
1742	Creates a grid .
1743	Save a tensor to a file .
1744	Convert a list of arguments into a Python string .
1745	Set the permissions .
1746	Check if access is ok
1747	Return True if index is in range
1748	Returns the offset of the given index .
1749	Create a new memory map .
1750	Return a list of mappings .
1751	Iterate over memory in memory .
1752	Get the name of the register .
1753	Get the arguments for the given model .
1754	Write a value to the registry .
1755	Read a register .
1756	Implements the cursor .
1757	Write an integer into memory .
1758	Read data from memory .
1759	Read an int from the memory .
1760	Read bytes from a string .
1761	Read a string .
1762	Push bytes to the stack .
1763	Read bytes from the stack .
1764	Push an integer into the stack .
1765	Read an int from the stack .
1766	Decode instruction .
1767	Execute the instruction .
1768	Publish an instruction as executed .
1769	Execute a concrete instruction .
1770	Try to emulate an instruction .
1771	Generate a thread .
1772	Push a value to the stack .
1773	Pop a value from the stack .
1774	Invalidate instruction cache .
1775	Return the CPU ID for the given CPU .
1776	Add an instruction to the dest .
1777	Test if two arrays are equal .
1778	ORICOR operation
1779	Rebuild a new ALAV .
1780	Add an AHAD .
1781	A AMAM operator .
1782	Sets the ACAS .
1783	Add an ADC .
1784	Compute the CMP .
1785	Compute CMP XMP X .
1786	Compute the CMP_CH_CH_B_CH_B_B_B_B_B_B_B_B_B_B_B_B_B_GMP_CH_B_B_CH_B_B_B_CH_B_B_B_BATCH_CH_B_CH_GED_GED_GED_B_GED_B_B_BATCH_B_B_B_BATCH_CH_GED_CH_GIPGIPGIPG_B_B_G_B_G
1787	Determine the DAA .
1788	DAS DAS .
1789	Divide division .
1790	Divide division .
1791	Multiplies the specified operands .
1792	Increment the CPU .
1793	Multiplies the CPU .
1794	NEG instruction .
1795	SUB 2 .
1796	Add an XOR to the CPU .
1797	BSWAP operation .
1798	MOV GOV VOV
1799	MOVOVOVOVOVOVOV VOVOVOV
1800	Convert an IMV to an IMV .
1801	Sets the activation of the given CPU .
1802	Compute the LEFT address .
1803	Moves bytes from src to dest .
1804	Sets the SAHF state of the CPU .
1805	Write the SETAV value to the dest .
1806	Write a setBVVVVV to the given destination .
1807	Write a bit to the destination .
1808	Write a set of bits to the destination .
1809	Write an instruction to the destination .
1810	Sets the size of the given cpu .
1811	Sets the INAEVVVV value to the given destination .
1812	Write a set of bits to the destination .
1813	Set the NBEVV value to the given destination .
1814	Write a set of bits to the dest .
1815	Write a set of bits to the dest .
1816	Write a set of bits to dest .
1817	Set the number of bits in the given destination .
1818	Set the setNZV value .
1819	Write an instruction to the dest .
1820	Set the PFV value for the given CPU .
1821	Writes an instruction to the destination .
1822	Writes a PEMV to the destination .
1823	Write a set of bits to the destination .
1824	Sets the ZFVVV value to the specified destination .
1825	Move the frame to the stack .
1826	Push data to the buffer .
1827	Calls the given op0 .
1828	Retrieves the number of bytes .
1829	Sets the bits of the target .
1830	JB VBVV
1831	Compute the bits of the target .
1832	Compute the bits of the target .
1833	Called by CXZ
1834	JECXZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
1835	JRCXZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ_ZZZZZZZZ_ZZZZZZZZZZZZZZZZZZZ_ZZZZZZZZZZZZZZZZZZZZ_ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
1836	Gets the bits of the target .
1837	JGE .
1838	JNBVV sets the target PCB value .
1839	JNEVV .
1840	JNG .
1841	Sets the JNR value of the target .
1842	JNP .
1843	Sets the network to the target target .
1844	Create a new instruction .
1845	Compute the bits of the target .
1846	Sets JS code .
1847	Compute the JZV .
1848	LJJMP
1849	Opens the instruction to the specified destination .
1850	ComputeNZ instruction .
1851	RCL operation .
1852	Compute the SAR .
1853	Shr rsh r
1854	Shorthand for shift d
1855	BSF VSF .
1856	BSR VSR .
1857	Binary bit .
1858	Writes BTC to dest .
1859	Compute the CMP to the destination .
1860	LOD SODS
1861	Move src to dest .
1862	Scans the src .
1863	Stores the given src to dest .
1864	Compute SARX .
1865	Perform a PSHUFW .
1866	Perform a PSHUFD .
1867	Perform MPMSMSMSKB .
1868	Perform a PSRQDQRQRQRQ .
1869	Moves a ZEXTEND instruction .
1870	MEXTEND SEXTEND
1871	CW DELETE
1872	Set RDTS C .
1873	Move LPDPD file to destination .
1874	Move hPDPD to destination .
1875	Perform a PSUBB .
1876	Moves a copy of src to dest .
1877	Moves the given src to the destination .
1878	Moves an instruction to the destination .
1879	VEXTRACTS128 - 8 .
1880	Perform a PSR .
1881	Add a constraint .
1882	Create a new symbolic buffer .
1883	Create a new symbolic value .
1884	Concatenate the constraints of the constraint .
1885	Solve a buffer at the given address .
1886	Checks if the memory is available .
1887	Execute the given instruction .
1888	Return True if the given expression evaluates to true .
1889	Minimize a set of constraints .
1890	Returns the minimum value of the given constraints .
1891	Get the solver version .
1892	Start the process .
1893	Reset the process .
1894	Send a command .
1895	Read data from the SMT library .
1896	Check if the solver is saturated .
1897	Asserts a boolean expression .
1898	Get the value of an expression .
1899	Checks if the given expression is true .
1900	Get all values of the given expression .
1901	Get the value of a given expression .
1902	Return a fully qualified name .
1903	Generate a colored level name .
1904	Finds the zero value at the given ptr .
1905	Compare two strings .
1906	Return the number of bytes in a string .
1907	Return all event events .
1908	Add events to the sink .
1909	Get profiling stats .
1910	Run manticore .
1911	Extract the number of bits from the given value .
1912	Convert a value to an integer .
1913	Return a context with the given key .
1914	Enqueue a state .
1915	Add a state to the queue .
1916	Return the state of the current state .
1917	Fork the given expression .
1918	Start the Manticore .
1919	Create a new Linux instance .
1920	Decode a binary tree .
1921	Invoke all registered hooks .
1922	Resolve a symbol .
1923	Return True if the binary is a binary .
1924	Return a list of symbols from a binary file .
1925	Get a group by name .
1926	Save the configuration to a file .
1927	Parse config file .
1928	Load configuration from config file .
1929	Process config values .
1930	Add a new group .
1931	Update a group .
1932	Returns the description of the given name .
1933	Return a function signature for the given name and inputs .
1934	Get the arguments for the constructor .
1935	Returns the source code for the given offset .
1936	Return the constructor of the constructor .
1937	Retrieves the function sabi .
1938	Get the function arguments for the given selector .
1939	Get the function signature for the given selector .
1940	Returns the signature signature for the given selector .
1941	Map memory to memory .
1942	Unmapping memory .
1943	Called when the memory is changed .
1944	Stop syscall .
1945	Called when a write is written .
1946	Execute an instruction .
1947	Recursively syncs the memory to the manticore .
1948	Write back to memory .
1949	Write a value to a register .
1950	Update a segment .
1951	Decorator for deprecated decorator .
1952	Perform a permutation function .
1953	Get the input from the given constraints .
1954	Execute a symbolic run on the given trace .
1955	Create a new empty platform .
1956	Execute a program .
1957	Initialize the kernel kernel .
1958	Open a file .
1959	Open a file at the specified directory .
1960	Rename a file .
1961	Synchronously syncs a file .
1962	Send a signal to the system .
1963	Determine if the system s sigprocm is set .
1964	Change path to a directory .
1965	Return a pointer to the mmap .
1966	Execute a syscall .
1967	Run the scheduler .
1968	Waits for the given readFds .
1969	Awake a process .
1970	Receive a signal .
1971	Checks if the clocks are available .
1972	Return the total size of an interp packet .
1973	Opens a file descriptor .
1974	Allocate a memory allocation .
1975	Generate a random number .
1976	Receive a buffer .
1977	Deallocate memory .
1978	Run the scheduler .
1979	Waits for all processes and writes them to the process .
1980	Receive data from a buffer .
1981	Send a buffer to the system .
1982	Decorator to synchronize a function .
1983	Save a value to the store .
1984	Load a value from the cache .
1985	Saves a value to a stream .
1986	Read a value from a key .
1987	Save state to disk .
1988	Load a state from the cache .
1989	Save a file to a file .
1990	Remove a key
1991	Lists all files in a directory .
1992	Get a unique ID .
1993	Loads a state by its ID .
1994	Save a state to the store .
1995	Generate a stream for a named stream .
1996	Compare two registers .
1997	Syncs syscall .
1998	Visit a node .
1999	Visit expression .
2000	Visit a bit vector .
2001	Visit a bitVecor .
2002	Return the size of a type .
2003	Generate a function call .
2004	Generate a function selector .
2005	Serialize an unsigned integer into a byte array .
2006	Serialize an integer into a byte array .
2007	Deserialize an unsigned integer .
2008	Deserialize an integer .
2009	Decorator for concretized arguments .
2010	Get the memory fee for a given address .
2011	Read a byte from the bytecode .
2012	Returns the instruction of this instruction .
2013	Push a value into the stack .
2014	Return the top element of the stack .
2015	Rollback the transaction .
2016	Store a value in memory .
2017	Divide two integers .
2018	Returns the number of bits in the given b .
2019	Compute the SMOD operator .
2020	Calculate the ADMOD value .
2021	Returns the exponent of the given exponent .
2022	Creates a signed value .
2023	Compute the LTV .
2024	Gets the GTV .
2025	Compute the SGT value .
2026	Convert a byte to a byte .
2027	Reads a SHA3 hash .
2028	Call a call to call this method .
2029	Call this method .
2030	Copies the code to the given code .
2031	Copies the code to the given address .
2032	Returns the value of the given address .
2033	Store a value at the given address .
2034	Store a value at the specified address .
2035	Returns the value of the given offset .
2036	Write a value to the storage .
2037	JUMPI instruction .
2038	Wrap two operands .
2039	Calculate a transaction .
2040	Receive a RETURN message .
2041	SELFDSTRUCT
2042	Return a tuple of all transactions .
2043	Return the current transaction .
2044	Get storage data .
2045	Set the storage data for the given storage address .
2046	Returns a list of all the items in the world .
2047	Checks if the given address is in the world .
2048	Returns a new address .
2049	Create a new contract .
2050	Swap the device .
2051	MRC operation .
2052	LDR DDR .
2053	Sends a string to the specified destination .
2054	ADR ADR .
2055	Add an instruction to the destination .
2056	Convert an instruction to a BZV .
2057	Translates the memory to the given destination address .
2058	Return the difference between two dictionaries .
2059	Disassemble an instruction .
2060	Add a constraint to this constraint set .
2061	Declare a variable .
2062	Return a list of declarations .
2063	Determine if the given expression is declared .
2064	Migrate the given expression .
2065	Perform inverse transform .
2066	Perform ordinal encoding .
2067	Reverse dummies from a mapping .
2068	Get the data from the source data .
2069	Get splice data .
2070	Convert base columns to integer .
2071	Transform a col into a list .
2072	Return a list of object names for a given object .
2073	Convert input to numpy .
2074	Convert the input vector to a Series .
2075	Compute the score of the model .
2076	Compute the scores for the model .
2077	Show a message .
2078	Associates a notification template .
2079	Disassociate a notification template .
2080	Send a callback to the device .
2081	Return a function that aggregates a job template .
2082	Lookup the stdout of a job .
2083	Launch a workflow job .
2084	Parse command line arguments .
2085	Format the options .
2086	Get a single object by its ID .
2087	Convert the number of pages to integer .
2088	Deletes a model .
2089	Get a record .
2090	Disassociate a link to another
2091	Return a copy of this resource .
2092	Retrieve latest job data .
2093	Lookup the stdout of a job .
2094	Show the stdout of the job .
2095	Monitor a job .
2096	Get the status of the job .
2097	Cancel a job .
2098	Relaunch a project .
2099	Update inventory sources .
2100	Read a resource .
2101	Logs a string .
2102	Configure model .
2103	Produce a raw method .
2104	Create a label
2105	Show the current version
2106	Echo a setting .
2107	Print a configuration file .
2108	Login to OAuth2 .
2109	Receive a transfer .
2110	Send a transfer .
2111	Clear all assets .
2112	Parse the requirements file .
2113	Modify a resource .
2114	Update a project .
2115	Get the status of a job .
2116	Convert a string to a file .
2117	Convert a value to the appropriate choice .
2118	Convert a value to a related resource .
2119	Return a filter for a relationship .
2120	Associates a success node .
2121	Disassociate a success node .
2122	Associates a failure node .
2123	Disassociate a failure node .
2124	Associates a node .
2125	Disassociate a node .
2126	Get data endpoint endpoint .
2127	Populate resource columns .
2128	Set display columns .
2129	Configure display columns .
2130	List resources .
2131	Get a role record .
2132	Compares two trees .
2133	Given a list of nodes return a list of nodes .
2134	Get the schema for a workflow job .
2135	Associates a notification template .
2136	Disassociate a notification template .
2137	Create a new resource .
2138	Returns a list of resource groups .
2139	Associates a group .
2140	Disassociate a group .
2141	Parse a variable string .
2142	Process extra variables .
2143	Dump a YAML object .
2144	Get the prefix of the URL .
2145	Perform a request .
2146	Separate the values from a json file .
2147	Configure the notification configuration .
2148	Create a new notification template .
2149	Modify the resource .
2150	Deletes a resource .
2151	List all resources .
2152	Retrieve a resource .
2153	Get configuration from environment variables .
2154	Read data from a file .
2155	Sets the global runtime parameter .
2156	Launch an ad hoc command .
2157	Add help text to the help text .
2158	Decorator to echo a method .
2159	Formats the given payload into a YAML string .
2160	Return the id of the given payload .
2161	Get the command for the given resource .
2162	Update the inventory source .
2163	Returns a list of resource objects .
2164	Return a list of facts .
2165	Format commands .
2166	List all commands .
2167	List available resources .
2168	List all registered commands .
2169	Get a command .
2170	Decorator for command .
2171	Decorator for creating a new job template .
2172	Generate a new state .
2173	Returns the authorization URL for the given URL .
2174	Get the token from the request .
2175	Refresh a refresh token .
2176	Make a request .
2177	Check if the user is authorized .
2178	Add authorization url to url
2179	Fetch a request token .
2180	Fetch access token .
2181	Parse authorization response .
2182	Rebuild the authorization .
2183	Return a generator that yields files in the directory .
2184	Clear cache data
2185	Try to load the cache .
2186	Load the contents of the cache .
2187	Ensure that the given function exists .
2188	Get a certificate from the cache .
2189	Return a list of products .
2190	Returns the hash of the product file .
2191	Check if the certificate is expired .
2192	Renew the certificate .
2193	Return True if the redirect is tty .
2194	Return the file encoding .
2195	Write a message to the output stream .
2196	Flush the buffer .
2197	Log a message .
2198	Return the path to the application .
2199	Return the path to the platform .
2200	Ensure the app_data directory exists .
2201	Ensure the app_config directory exists .
2202	Ensure the appcache directory exists .
2203	Start a file .
2204	Find an executable executable .
2205	Get user home directory .
2206	Compress a path to a user .
2207	Convert a path to a real path .
2208	Ensure a directory exists .
2209	Parse the requirements file .
2210	Parse the requirements file .
2211	Injects a method to the class .
2212	Touch a file .
2213	Delete a file .
2214	Return a string representation of the given data .
2215	Joins a list of items .
2216	Return a string representation of a dictionary .
2217	Return a list of item strings .
2218	Convert a count down to a boolean value .
2219	Registers a function .
2220	Lookup a function for the given data .
2221	Convert a hash to a hash .
2222	Convert a base string to a base .
2223	Generate a sequence of hashes .
2224	Convert data to hashable .
2225	Update the hash .
2226	Convert a hex string to a base string .
2227	Digest a hash of a hash .
2228	Hash data .
2229	Hash a file .
2230	Registers a hash function .
2231	Return the hash function for the given data type .
2232	Register numpy extensions .
2233	Register class extensions .
2234	Return a queue of lines from the given stream .
2235	Evaluate the output of a proc .
2236	Return a timestamp as a timestamp .
2237	Load a module from a path .
2238	Return a list of available extensions .
2239	Convert a module name to a module path .
2240	Convert a module name to a module path .
2241	Convert a module path to a module name .
2242	Split a module path .
2243	Get the value of a given key .
2244	Return True if argv is argv .
2245	Concatenate a list of lines .
2246	Symlink a real path .
2247	Generate signature key .
2248	Decorator for memoize function .
2249	Return a memoized property .
2250	Highlights the given text .
2251	Colorize text .
2252	Return True if object is iterable .
2253	Return a generator that yields all items in the given list .
2254	Return an array of unique values .
2255	Return a boolean indicating whether the given items are unique .
2256	Return a list of boolean values for a list of indices .
2257	Return True if all elements are equal .
2258	Sort an indexable .
2259	Combine two items .
2260	Group items from items .
2261	Create a histogram from a list of items .
2262	Find a list of duplicates .
2263	Iterate over keys in a dictionary .
2264	Convenience function for creating a dict .
2265	Return a dictionary containing all keys in a dict .
2266	Map a function to a dictionary .
2267	Convert a dict to a dictionary .
2268	Convert this object to a dict .
2269	Create a link to a given path .
2270	Convert a path to a symlink .
2271	Create a symlink .
2272	Return True if path is a junction point .
2273	Read junction point .
2274	Remove a directory .
2275	Checks if a file is a hardlinked file .
2276	Create a directory for Windows .
2277	Parse generator generator .
2278	Parse a string into a validator .
2279	Return the adjacency matrix .
2280	Create a graph from the data .
2281	Convert the graph to a CSV file .
2282	Launch a R script .
2283	Check if a package is imported .
2284	Calculate the mean of the mappings .
2285	Predict the data of a dataframe .
2286	Evaluate the graph .
2287	Calculate the mean of the graph .
2288	Forward the noise of the noise .
2289	Run optimizer .
2290	Creates a graph from the given data .
2291	Adapts a directed graph to a directed graph .
2292	Takes a graph and returns a directed graph .
2293	Evaluate the entropy of x .
2294	Calculate the integral estimate of a given x .
2295	Predict the probability of a model .
2296	Calculate the features of a row .
2297	Fit the model to the model .
2298	Predict probability of a model .
2299	Predict features from a dataset .
2300	Predict the graph of the graph .
2301	Predict the features of a dataset .
2302	oriented graph to graph
2303	Create a graph from the given data .
2304	Run GiesGies .
2305	Plot curves .
2306	Plot the generated variables .
2307	Reset the parameters .
2308	Compute the forward function .
2309	Predict the samples of a dataset .
2310	Calculate the probability of a b .
2311	Calculate the error score of a model .
2312	Calculates the probability of a candidate .
2313	Compute the probability of a given b .
2314	Calculate the mean score of an X .
2315	oriented graph to graph
2316	Creates a graph from data .
2317	Runs the PCI .
2318	Predict a GraphLasso .
2319	Determine the set of CUDA devices .
2320	Return the number of GPU devices .
2321	Get the default value for this device .
2322	Read causal pairs .
2323	Compute the loss .
2324	Predict probability of a dataset .
2325	Predict a dataset .
2326	Compute the orientation of a graph .
2327	Opens an undirected graph .
2328	An orientation of a graph .
2329	Create a graph from data .
2330	Compute Gaussian Gaussian kernel .
2331	Return random noise .
2332	Generate random noise .
2333	Predict a dataset .
2334	Predict the probability of a dataset .
2335	Calculate the correlation matrix
2336	r Compute the aracnenenenene
2337	Remove indirect links from graph .
2338	Determines the minimum edge of the graph .
2339	Calculate the mean and variance of a weighted average .
2340	Run a GNN instance .
2341	Compute the forward layer .
2342	Run optimizer .
2343	Predict the probability of a dataset .
2344	Create a graph from the given data .
2345	Compute the forward matrix .
2346	Predict the probability of a model .
2347	Convert a phrase to a filename .
2348	Generate a URL from the base URL .
2349	Open the page .
2350	Wait until page is loaded .
2351	Register the driver .
2352	Return the root element .
2353	Wait until the region is loaded .
2354	Find element by locator .
2355	Finds elements matching a selector .
2356	Check if the element is present .
2357	Check if the element is displayed .
2358	Register a driver .
2359	Parse an integer .
2360	Parse a string .
2361	Parse tabbed delimited whitespace .
2362	Parse whitespace .
2363	Pre - install hcl .
2364	Append a row to the table .
2365	Create a new RobotFile instance .
2366	Recursively walk the robot files .
2367	Loads the contents of a file .
2368	Return the type of the table .
2369	Return a generator of keywords .
2370	Dump all tables .
2371	Return a generator of all settings .
2372	Return a generator of variables .
2373	Return a list of statements .
2374	Append a row .
2375	Report an error .
2376	Run rflint .
2377	List all rules .
2378	Report a message .
2379	Returns a list of rules for the given class .
2380	Load a rule file .
2381	Parse the command line arguments .
2382	Create a new Draft4Validator instance from a specification .
2383	Construct a mapping from a node .
2384	Read a yaml file .
2385	Creates a generator from a specifier .
2386	Create a path to the model .
2387	Remove characters from a string .
2388	Spell word corrections .
2389	Return a list of all elements in a sequence .
2390	Return a list of items in a list .
2391	Generate a sequence of valid tokens .
2392	Computes the distance between two strings .
2393	Generate predictions .
2394	Calculate the average of a list .
2395	Calculate the weighted kappa weighted kappa .
2396	Compute confusion matrix .
2397	Calculate a histogram of ratings .
2398	Encode a string .
2399	Initialize the dictionary .
2400	Retrieves a list of words for the essay .
2401	Calculate the length of a sentence .
2402	Generate bag features .
2403	Generate the statistics for a set of elements .
2404	Generate the feats of the sentence .
2405	Updates the prompt .
2406	Get the algorithm for the algorithm .
2407	Extract features from a set of predictions .
2408	Extracts the features from the essays .
2409	Dump the model to a file .
2410	Create and dump the essay set .
2411	Initialize dictionaries .
2412	Generate the features for each sentence .
2413	Log an error message .
2414	Write creation info .
2415	Write review .
2416	Write an annotation .
2417	Write a file .
2418	Write a package .
2419	Write an extracted license .
2420	Write a document .
2421	Create a checksum from a SHA1 string .
2422	Parse text from text .
2423	Set the document version .
2424	Set the license license license .
2425	Set the name of the document .
2426	Set the spdx ID for a document .
2427	Set doc comment .
2428	Set the document namespace .
2429	Reset the document .
2430	Set spdx_doc_uri .
2431	Build a tool .
2432	Add a creator .
2433	Set the created date .
2434	Set license list .
2435	Reset creation information .
2436	Add a review .
2437	Add review date .
2438	Add review comment .
2439	Resets the annotations .
2440	Add an annotator to the document .
2441	Add annotation date .
2442	Add an annotation comment .
2443	Add an annotation type .
2444	Set the spdx ID for the given document .
2445	Reset package .
2446	Create a package .
2447	Set package version .
2448	Set package name .
2449	Set package supplier .
2450	Set package origin .
2451	Set package download location .
2452	Set package homepage .
2453	Set package verification code .
2454	Set package source info .
2455	Set the licenses for the package .
2456	Set package license from file
2457	Set package license .
2458	Set package license comment .
2459	Set package summary .
2460	Set package description .
2461	Set file name .
2462	Set the spdx ID for a file .
2463	Set file comment .
2464	Set file type .
2465	Set the checksum for a file .
2466	Set the license for the given doc .
2467	Sets the license for a file .
2468	Set file license comment .
2469	Set the copyright of a file .
2470	Set file notice notice
2471	Add an artifact to the project .
2472	Reset file info .
2473	Set the license ID .
2474	Set the license text .
2475	Set extraneous license name .
2476	Set the license comment .
2477	Add a reference to a license
2478	Reset all files .
2479	Return a string representation of a datetime .
2480	Create a datetime object from a string .
2481	Build the YAML module .
2482	Parse YAML data .
2483	Write a document to a file .
2484	Create a BNode node .
2485	Convert value to special value .
2486	Return a set of licenses from a tree .
2487	Creates a BNode node .
2488	Create a BNode node .
2489	Create an extracted license .
2490	Create a file node .
2491	Add file dependencies to the graph .
2492	Create a review node .
2493	Create an annotation node .
2494	Generate a VerificationVerification node .
2495	Handles parsing of package .
2496	Create a package node .
2497	Checks if a package has a file .
2498	Handle a package .
2499	Create a SPDXRef document .
2500	Validate the given messages .
2501	Log an error message .
2502	Convert value to special value .
2503	Parse a license .
2504	Extract the license identifier from an extraneous license .
2505	Get the extracted license text .
2506	Get extraneous license name .
2507	Return a list of xrefs for the given extr_lic .
2508	Gets the comment comment for the extraneous license .
2509	Parse extraneous license .
2510	Extract a license from an extraneous license .
2511	Parse a package .
2512	Handle package license .
2513	Get file name .
2514	Adds a file dependency to the builder .
2515	Add a file contributor .
2516	Parses a file notice .
2517	Parse file comment .
2518	Parse file copyright text .
2519	Parses a file comment on a license .
2520	Parse file license information .
2521	Parses a file type .
2522	Parsum sum of file checksum .
2523	Parses a single license .
2524	Get review date .
2525	Get the reviewer for the given term .
2526	Get annotation type .
2527	Get the comment for an annotation .
2528	Get annotation date .
2529	Parse XML document .
2530	Parses the creator of a document .
2531	Parse doc_term fields .
2532	Parse an external document .
2533	Validate messages .
2534	Validate the fields of the package .
2535	Set doc comment .
2536	Set the checksum of the document .
2537	Set package source info .
2538	Set package verification code .
2539	Add an exception to the package .
2540	Set package summary .
2541	Set package description .
2542	Set the checksum for a file .
2543	Set the license comment .
2544	Set file comment .
2545	Add review comment .
2546	Add an annotation comment .
2547	Add annotation type .
2548	Validate messages .
2549	Read data from a file .
2550	Execute a command .
2551	Unescape a string .
2552	Set attributes of a tag .
2553	Set a child tag .
2554	Set the document s document .
2555	Add a tag to this element .
2556	Get all children of this node .
2557	Clean up an attribute .
2558	Convert a value pair to a pair .
2559	Create a string representation of the registry .
2560	Send a heartbeat .
2561	Receive result from workers .
2562	Receive task request from workers .
2563	Pull tasks from the queue .
2564	Starts the worker .
2565	Decorator to run async process .
2566	Send a message to UDP .
2567	Check if the usage is enabled .
2568	Constructs a message from the server .
2569	Build the end of the task .
2570	Send a UDP message
2571	Send a UDP message .
2572	Start the database manager .
2573	Create task log info .
2574	Handle an application update .
2575	Launch a task .
2576	Add inputs to the data manager .
2577	Gather all dependencies from the given args .
2578	Submit a function to DFK .
2579	Clean up the workflow .
2580	Starts a checkpoint .
2581	Load all checkpoint files from the given directory .
2582	Load all checkpoint directories .
2583	Load a DataFlowKernel .
2584	Get a list of tasks .
2585	Migrate tasks to internal queue .
2586	Start command server .
2587	Starts the worker .
2588	Gets the data manager .
2589	Shutdown the executor .
2590	Stage a file in the given executor .
2591	Stops out a file .
2592	Return a list of all checkpoints in the rundir
2593	Get the last runpoint of the runinfo .
2594	Convert a function to an interactive function .
2595	Use pickle to pickle
2596	Import a mapping from a dictionary .
2597	Check if the given object can be valid .
2598	Return True if the given object is a sequence .
2599	Convert an object to an uncan object .
2600	Unset logger .
2601	Start the controller .
2602	Returns the path to the profile file .
2603	Get the client s client file .
2604	Close the ipcontroller .
2605	Generate a hash of a task .
2606	Check if a task is cached .
2607	Update the cache for the given task .
2608	Return the number of bytes in bytes .
2609	Extract buffer buffers from object .
2610	Restore buffer buffers .
2611	Serialize an object into a list of buffers .
2612	Deserialize a pickle object .
2613	Pack a message .
2614	Write a submit script to a submit script .
2615	Cancel a job .
2616	Initialize the Boto client .
2617	Read the state file from the local state file .
2618	Writes the state to the state file .
2619	Creates a new session .
2620	Creates a virtual machine .
2621	Create a security group .
2622	Sets up an instance of a single instance .
2623	Shutdown the instance .
2624	Get the state of the current instance .
2625	Submit a command to EC2 .
2626	Cancel the specified jobs .
2627	Show the status of the EC2 summary .
2628	Shutdown the instance .
2629	Scale the pool .
2630	Scale all instances in a machine .
2631	Get job status
2632	Scans all nodes in the pool .
2633	Scans the engine .
2634	Return a list of all engines .
2635	Called when the app is done .
2636	Update the parent .
2637	Called when a file is done .
2638	Submit a command to the worker .
2639	Cancel a job .
2640	Run a task .
2641	Shut down the queue .
2642	Submit a function to the queue .
2643	Return the path of the file .
2644	Push a file to dest .
2645	Decorator for app_type .
2646	Decorator to create a Python app .
2647	Decorator for bash app .
2648	Create a new run directory .
2649	Monitor a process .
2650	Send a message to the socket .
2651	Decorator to monitor a task .
2652	Execute a command .
2653	Push a file to a remote directory .
2654	Pull a remote file from a remote directory .
2655	Check if a file is a directory
2656	Create a directory .
2657	Add an event to the queue .
2658	Create a new deployment .
2659	Initialize scaling .
2660	Start local queue process .
2661	Hold a worker .
2662	Send a block to the manager .
2663	Scans all nodes in the network .
2664	Return the status of the block .
2665	Read data from the device .
2666	Write a buffer to the device .
2667	Write the input buffer to the device .
2668	This function is used to generate a floating point grid grid .
2669	Remove all versions from the given source .
2670	Deploy a function to the given source .
2671	Creates a new S3 .
2672	Upload a config file to S3 .
2673	Invoke an event .
2674	Initialize the project templates .
2675	Build a zip file .
2676	Get the function function for the given handler .
2677	Install package packages .
2678	Get the name of a role .
2679	Get account ID .
2680	Return a Boto3 client .
2681	Create a lambda function .
2682	Uploads a Lambda function to S3 .
2683	Get the function configuration .
2684	Download data from a URL .
2685	Download a fate suite .
2686	Download a curated sample
2687	Get the library configuration .
2688	Recursively update existing dicts .
2689	Spawn a Compiler .
2690	Create a new compiler .
2691	Iterate over python files .
2692	Split a line into a single line .
2693	Remove quotes from text .
2694	Fix hyphenation .
2695	Parses a json file and returns a generator
2696	Return a list of triples for the given graf .
2697	Build a graph from a json file
2698	Write a graph to a graph .
2699	Render a graph .
2700	Return a graph of text nodes in text .
2701	Find a chunk of a phrase .
2702	Iterate over words in phrase .
2703	Collects keywords from a sentence .
2704	Collect entities from sentences .
2705	Collect phrases from sentences .
2706	Generate a MinHash digest .
2707	Generate a summary of the top - level sentence .
2708	Limit key phrases .
2709	Limit sentences from a JSON file .
2710	Make a sentence .
2711	Iterate over JSON files .
2712	Pretty print an object .
2713	Get a snapshot of a snapshot .
2714	Load the tags from the tag .
2715	Create a new tag .
2716	Extract resources from a list of droplet objects .
2717	Add a droplet to the container .
2718	Remove all resources from a droplet .
2719	Get an action from the API .
2720	Wait until the task is completed .
2721	Get a droplet object
2722	Perform an action .
2723	Take a snapshot of a snapshot .
2724	Change a kernel .
2725	Given a list of SSH keys return a list of SSH keys .
2726	Create a new droplet .
2727	Get all actions .
2728	Get a specific action .
2729	Returns a list of available kernels .
2730	Get a domain object
2731	Create a new domain .
2732	Returns a list of records for this domain .
2733	Get an object from the API .
2734	Get an instance of a floating point
2735	Loads the floating IP .
2736	Create a new droplet
2737	Reserve a floating IP .
2738	Assign a droplet to a droplet .
2739	Get a firewall object
2740	Add tags to firewalls
2741	Remove all tags .
2742	Get a SSH key from the API .
2743	Load the SSH key .
2744	Load a public key from a public key
2745	Create a new SSH key .
2746	Edit the SSH key .
2747	Get all regions
2748	Get a list of droplets .
2749	Get a droplet .
2750	Get all sizes .
2751	Get a list of images .
2752	Get all domains
2753	Get a domain .
2754	Get all SSH keys
2755	Gets a SSH key .
2756	Get all tags .
2757	Returns a list of floating IP addresses .
2758	Get floating IP
2759	Get all load balancers
2760	Get a load balancer .
2761	Get a certificate .
2762	Get all certificates
2763	Get a snapshot .
2764	Get all snapshots .
2765	Get a list of droplet snapshots .
2766	Get a list of all volume snapshots .
2767	Get all the volumes
2768	Get a volume .
2769	Get all firewalls
2770	Get a firewall .
2771	Get a load balancer object .
2772	Load the load balancer .
2773	Create a load balancer .
2774	Save this load balancer .
2775	Add droplets .
2776	Remove droplets from the load balancer
2777	Add a forwarding rules .
2778	Remove a forwarding rules .
2779	Get data from url
2780	Get a record .
2781	Create a new domain record .
2782	Destroy a record .
2783	Save record .
2784	Get request timeout .
2785	Get a volume
2786	Create a new volume .
2787	Attach a droplet to the volume .
2788	Resize the volume .
2789	Create a snapshot .
2790	Returns a list of snapshots .
2791	Get a certificate .
2792	Load the certificate .
2793	Create a new certificate .
2794	Get an image from the API .
2795	Create a new image .
2796	Load the image .
2797	Transfer the image to a new region .
2798	Renames this image .
2799	Convert a convolution to a convolution .
2800	Convert sum of inputs to sum .
2801	Convert a reduce sum to a function .
2802	Convert inputs to a concatenated concatenation .
2803	Convert a slice to a lambda layer .
2804	Convert clip to clip .
2805	Convert elementwise_wise_add .
2806	Convert elementwise_to_subt_subtensor_subt .
2807	Convert a linear model to a layer .
2808	Convert a matmul matrix to a tensor .
2809	Convert a constant to a constant .
2810	Convert a tensor to a tensor .
2811	Convert a reshape to a reshape .
2812	Convert tensor to tensor .
2813	Convert unqueeze to tensor .
2814	Convert a tensor to a lambda function .
2815	Convert a pooling to an average .
2816	Convert maxpooling to maxpool .
2817	Convert adaptive max_max_max_max_max_max_max_max_max .
2818	Convert padding .
2819	Convert a batch norm .
2820	Convert an instancenenencoder to target .
2821	Convert dropout to dropout .
2822	Convert relu to relu .
2823	Convert LRELU to LRELU .
2824	Convert a Sigmoid to a tensor .
2825	Convert softmax to softmax .
2826	Convert tanh to tanh .
2827	Convert a hardtanh layer to a softtanh layer .
2828	Convert a seluu layer to a tensor .
2829	Convert a UPSample to a layer .
2830	Convert an upsample to an upsample .
2831	Set training mode .
2832	Return a PWM_PWM_PWM_Adapter object .
2833	Stop a pin .
2834	Determine if the platform is available .
2835	Write data to the device .
2836	Read data from the MISO pin .
2837	Transfer data to MOSI .
2838	Set the GPIO pin .
2839	Pull up a pin up .
2840	Write the GPIO to the device .
2841	Write the iodir to the device .
2842	Write the GPPUU to the device .
2843	Disable FTDI driver .
2844	Enable FTDI driver .
2845	Return a list of device serialized devices .
2846	Close the context .
2847	Write a string to the file .
2848	Execute a command .
2849	Read data from ftdi .
2850	Enable mpssese .
2851	Synchronously synchronously synchronously synchronously synchronously synchronously .
2852	Sets the clockspeed clock .
2853	Reads the MPSSE from the device .
2854	Return a string representation of the MPSSE device .
2855	Setup the mpssepe .
2856	Write data to SPDI .
2857	Read data from the SPDI chip .
2858	Bulk read data
2859	Transfer data .
2860	Initialize the GPIO .
2861	Send transaction end .
2862	Write a byte array .
2863	Check if the connection is ping .
2864	Reads a value from the specified register .
2865	Creates an I2c device .
2866	Write an 8 bit value to the device .
2867	Read a byte from the bus .
2868	Gets the gpio device .
2869	Setup a pin .
2870	Setup the mode for the given pin .
2871	Remove an event from the device .
2872	Returns a generator of all the files in the directory .
2873	Trash a file .
2874	Returns the process parser for the given process id .
2875	Load BPMN files from a list of files .
2876	Add a BPMN XML document .
2877	Given a list of nodes return None .
2878	Serialize a value to a parent element .
2879	Serialize a list element .
2880	Get the event definition .
2881	Get message event definition .
2882	Get timer event definition .
2883	Return the HTML representation of the specification .
2884	Connect to a callback .
2885	Get the number of subscribers .
2886	Check if a callback is connected .
2887	Try to disconnect the given reference .
2888	Disconnect a callback .
2889	Parse a node .
2890	Create a task .
2891	Connect to a task .
2892	Connects a sequence of tasks to the given sequence .
2893	Returns a sorted list of outgoing sequence names .
2894	Add a condition to the task spec .
2895	Callback for completion .
2896	Return True if the task is completed .
2897	Cancel all tasks .
2898	Get a task by id
2899	Returns a list of tasks matching the given name .
2900	Get all tasks in the tree .
2901	Complete a task by its id .
2902	Complements the next task .
2903	Wrap a function .
2904	Create a new BPMnWorkflow .
2905	Add a child task .
2906	Assigns a thread id to a thread .
2907	Check if this node is a descendant of this node .
2908	Find the child of this task .
2909	Find all tasks that match the given task spec .
2910	Find the ancestor of this task .
2911	Find the ancestor of the given name .
2912	Called when the task is ready .
2913	Return the name of the current state .
2914	Inherits the data from the parent .
2915	Cancel the task .
2916	Return a dump of this task .
2917	Evaluate arguments .
2918	Evaluate keyword arguments .
2919	Serialize object to JSON .
2920	Send a call to the task .
2921	Restart a task .
2922	Clear the task data .
2923	Get the ancestors of this task .
2924	Predict a task .
2925	Called when the task is ready .
2926	Create the BPMN package .
2927	Write a file to the package .
2928	Write data to package .
2929	Write manifest to manifest .
2930	Pre - validate bpmn
2931	Parses the signavio .
2932	Write the signavio file to the package .
2933	Write meta data .
2934	Merge options and config into options .
2935	Parse a node .
2936	Deserialize an assignment .
2937	Deserialize the start node .
2938	Deserialize a list of assignments .
2939	Deserialize a logical logical operator .
2940	Deserialize a condition .
2941	Deserialize a workflow spec .
2942	Add a task spec .
2943	Validate the task .
2944	Accept a message .
2945	Refresh all pending tasks .
2946	Returns a list of tasks that are ready to be ready .
2947	Deserialize a trigger .
2948	Evaluates the given expression .
2949	Execute a script .
2950	Start the task .
2951	Called when a task is triggered .
2952	Connect to a taskspec .
2953	Return the id of a container .
2954	Initialize the container .
2955	Update the containers .
2956	Load the state of the blockade .
2957	Get the blockade id from cwd
2958	Ensure the state directory exists .
2959	Delete the state file .
2960	Return the state of the container .
2961	Write the container to the state file .
2962	Given a list of partitions return a list of partitions .
2963	Get a list of all source chains for a blockade .
2964	Insert a rule .
2965	Start the timer .
2966	Starts chaos .
2967	Stops chaos .
2968	Ends the degradation of the world .
2969	Stops chaos from the world .
2970	Cancel the timer .
2971	Return a sorted list of container dependencies .
2972	Create a BlockadeContainerConfig from a dictionary .
2973	Create a BlockadeConfig from a dict .
2974	Updates the container .
2975	Destroy a block .
2976	Status list of containers
2977	Kill a block .
2978	Partition a blockade .
2979	Join the block .
2980	Logs logs .
2981	Start a daemon .
2982	Add a new container
2983	List events .
2984	Set CORS headers .
2985	Returns True if the request matches the given regex .
2986	Get cORS options .
2987	Returns a dictionary containing the cORS_kwarg dict .
2988	Ensure that an instance is an iterable .
2989	Serialize options .
2990	Decorator for cross - origin .
2991	Return a pandas DataFrame
2992	Returns a pandas DataFrame for a given token .
2993	Return a pandas DataFrame for otc symbols .
2994	Get a JSON object from a URL .
2995	Retrieves the JSON for the given URL .
2996	Return a pandas DataFrame for the market
2997	Return a pandas DataFrame for a market
2998	Return a pandas DataFrame for the market
2999	Return a pandas DataFrame for a sector .
3000	Returns a pandas DataFrame for a given symbol .
3001	Return a pandas DataFrame for crypto .
3002	Starts the server .
3003	Starts the application .
3004	Get OAuth2 client ID from settings .
3005	Get storage model .
3006	Get the storage object for the given request .
3007	Redirect url with params
3008	Get credentials from request .
3009	Determine if the request has credentials .
3010	Get the scopes .
3011	Get the credential for this credential .
3012	Set the value of the lock .
3013	Deletes the lock .
3014	Serialize the service account .
3015	Parse a JSON keyfile .
3016	Create a client from a JSON file .
3017	Create a new Keyfile from a json file .
3018	Generate a JWT token .
3019	Create a new credentials object from a JSON string .
3020	Create a new instance with the given claims .
3021	Get access token .
3022	Determine if the GCE environment is available .
3023	Check if the environment is in the environment .
3024	Check if the environment is in GCE .
3025	Save a JSON file to a private file .
3026	Save the credentials to the given file .
3027	Returns the path to the user defined in the environment .
3028	Get the application default credentials from a file .
3029	Verify an ID token .
3030	Extracts the ID token from a string .
3031	Parse exchange token response .
3032	Create credentials from OAuth2 web server .
3033	Convenience method to retrieve credentials from client secret .
3034	Convert OAuth2 web_WebServerFlowFlowFlowFlowFlowFlowFlowFlowFlow flow .
3035	Create a flow from a client secret file .
3036	Serialize this token into a JSON string .
3037	Create a new instance from JSON data .
3038	Put the given credentials .
3039	Checks if the given scopes contains the given scopes .
3040	Create a new instance from a JSON string .
3041	Check if the token is expired .
3042	Get access token .
3043	Returns the expiration time of this token .
3044	Generate a request body .
3045	Refresh the access token .
3046	Perform a refresh request .
3047	Retrieve scopes .
3048	Extract credentials from a file .
3049	Gets the credentials for the application .
3050	Create a new ApplicationDefaultCredentials from a file .
3051	Create a new OAuth2Device instance from a response .
3052	Get the authorization URL for the authorization flow .
3053	Retrieves the OAuth2 device codes for the device .
3054	Create a public key from a string .
3055	Create a private key from a string .
3056	Create a credential file if necessary .
3057	Load credentials from a file .
3058	Write credentials to file .
3059	Gets the backend for the given filename .
3060	Retrieves a credential .
3061	Decorator for positional arguments .
3062	Convert a string to a list of scopes .
3063	Parse a URL - encoded content .
3064	Update query params
3065	Add a query parameter to url .
3066	Applies the user agent to the headers .
3067	Convert headers to a dict .
3068	Wrap HTTP request .
3069	Wrap an HTTP request .
3070	Make a HTTP request .
3071	Get the flow for a given token .
3072	Initialize the application .
3073	Load credentials from the application .
3074	Redirect to the authorization page .
3075	Callback for callback .
3076	Gets the credentials for this application .
3077	Checks if the user has credentials .
3078	Get the email address .
3079	Retrieves metadata from the given path .
3080	Get the access token for the given service account .
3081	Generate XSRF secret key .
3082	Build the state value for the given user .
3083	Parse a state value .
3084	Create an OAuth2Decorator from a file .
3085	Get service account email address .
3086	Check if the model is a NDB model .
3087	Get the entity .
3088	Delete entity .
3089	Gets the credentials for this entity .
3090	Write the credentials to the database .
3091	Deletes the entity .
3092	Checks if the user is authorized .
3093	Creates a new OAuth2 client .
3094	Decorator for OAuth .
3095	Perform an HTTP request .
3096	Create a new OAuth2Handler .
3097	Generate a new token
3098	Validate a token .
3099	Validate client secrets .
3100	Load a file .
3101	Send a request to the server .
3102	Run the flow .
3103	Perform a GET request .
3104	Decorator to enable oauth2 .
3105	Generate a random code .
3106	Generate a code challenge .
3107	Retrieve information about the service .
3108	Get the credential for this credential .
3109	Sets the value of the lock .
3110	Deletes the lock .
3111	Retrieves the credentials from the store .
3112	Lock the credentials .
3113	Validate value .
3114	Convert a value to a Credentials object .
3115	Get the flow for a given token .
3116	Callback for OAuth2 callback .
3117	Authorize an OAuth2 account .
3118	Create the file if necessary .
3119	Return the value of the given value .
3120	Convert obj to string
3121	Create a signed JWT .
3122	Verify that the signature is valid .
3123	Check if the payload is valid .
3124	Verify that the token is valid .
3125	Verify a signed JWT .
3126	Get a single template .
3127	Update a template .
3128	Delete a template .
3129	Generate a hash of the email address .
3130	Check if url is valid
3131	Merge two results .
3132	Create a list .
3133	Update list members .
3134	Update the list .
3135	Create a new order line .
3136	Perform a GET request .
3137	Create a new app .
3138	Get a single app .
3139	Create a promo rule .
3140	Get a folder .
3141	Get a single email .
3142	Create a new file .
3143	Get a file .
3144	Update a file .
3145	Delete a file .
3146	Build the path to the endpoint .
3147	Iterate over all items in the collection .
3148	Get all subscribed subscribers .
3149	Create a webhook .
3150	Get a webhook .
3151	Update a webhook .
3152	Delete a webhook .
3153	Get all segments .
3154	Get a single segment .
3155	Update a segment .
3156	Delete a segment .
3157	Create a list of segments .
3158	Perform a POST request .
3159	Get metadata for MailChimp .
3160	Update a campaign .
3161	Get a conversation .
3162	Get all subscribers for a given campaign .
3163	Create a new automation .
3164	Get all messages for a given email .
3165	Get a subscriber .
3166	Cancel a campaign .
3167	Pause a campaign .
3168	Create a new campaign .
3169	Resume a campaign .
3170	Send a campaign .
3171	Create a new customer .
3172	Get a customer .
3173	Create or update a customer .
3174	Create a new product variant .
3175	Create a new feedback .
3176	Update the feedback .
3177	Create a merge field .
3178	Get a merge field .
3179	Get a batch of batch_hooks .
3180	Update a batch .
3181	Delete a batch .
3182	Create a new store .
3183	Update a store .
3184	Create a new image .
3185	Get an image .
3186	Create a conversation message .
3187	Create a new order
3188	Create a new note .
3189	Update a list of members .
3190	Update a list segment .
3191	Update a template folder .
3192	Create a list member .
3193	Update a list .
3194	Create a new subscriber .
3195	Delete a subscriber .
3196	Delete a subscriber .
3197	Pause a workflow .
3198	Start a workflow .
3199	Delete an email .
3200	Create a campaign .
3201	Update a campaign .
3202	Delete a campaign .
3203	Delete a line .
3204	Create a batch operation .
3205	Returns a list of all documents in this batch .
3206	Get a batch .
3207	Delete a batch .
3208	Reformat a policy .
3209	Get the load balancer .
3210	Retrieve a value from the cache .
3211	Insert an object into the cache .
3212	Update cache stats .
3213	Get access details for a given key .
3214	Get the stats of the cache .
3215	Returns a list of flow logs for a given vpc .
3216	Determine if a vpc is enabled .
3217	Get the subnets of a vpc .
3218	Get route tables
3219	Get the network ACLs for a vpc .
3220	Returns a client for the given service .
3221	Get GCP client .
3222	Creates a GCP client .
3223	Creates an httpauth client .
3224	Build Google API client .
3225	Decorator to iterate over projects .
3226	Get credentials from kwargs .
3227	Rewrite keyword arguments .
3228	Gets a list of all the items in the specified service .
3229	Gets a list of all GCE items .
3230	List all keys in a service .
3231	Get the access details for a given key .
3232	Gets the user agent default .
3233	List all rules .
3234	List targets by rule .
3235	List buckets .
3236	List all objects in a bucket .
3237	Modify an item .
3238	Get the list of policies for a role .
3239	Get a group by name .
3240	Get a policy document document .
3241	Get the base certificate .
3242	Get cached credentials for a given service .
3243	Get the security group rules .
3244	Get a list of security groups
3245	Get the inline policy for a group .
3246	Return a list of managed policy names .
3247	Get a list of users .
3248	Get the base group .
3249	Get the base policy .
3250	Get the short version of the version .
3251	Save an object to the Geoser catalog .
3252	Returns a list of all stores in the workspace .
3253	Get a store by name .
3254	Delete a granule .
3255	List all granules in the given coverage .
3256	Get mosaic coverages
3257	Publish FeatureType .
3258	Get all resources in the store .
3259	Get a resource .
3260	Get layergroup by name .
3261	Get a single style by name .
3262	Get a list of workspace names .
3263	Get a single workspace .
3264	Get the metadata for a given node .
3265	Build a url .
3266	Prepare a zip file .
3267	Create a DimensionInfo object .
3268	Parse dynamic default values .
3269	Create a JDBC virtual table .
3270	Parse a metadata entry .
3271	Return the resolution of the resolution .
3272	Initialize the resource .
3273	Convert an exception to a DAV error .
3274	Returns the string representation of the error message .
3275	Handle deletion .
3276	Handle a copy of a file
3277	Move tag to dest
3278	Get a resource instance .
3279	Add a provider .
3280	Resolve the provider for the given path .
3281	Computes the digest of a user .
3282	Read data from the queue .
3283	Read data from the stream .
3284	Handle an error .
3285	End the file .
3286	Handle a copy of the repository .
3287	Get a list of log entries .
3288	Get information about a repo .
3289	Get a resource instance .
3290	Get the preferred path for this collection .
3291	Get the href of this resource .
3292	Set property value .
3293	Remove all properties
3294	Checks if the lock is locked .
3295	Set the share path .
3296	Convert a reference to a path .
3297	Check if a resource is a collection .
3298	Convert XML string to XML .
3299	Convert XML to bytes .
3300	Make a subelement .
3301	Return the contents of an element .
3302	Check if a path is checked .
3303	Read configuration file .
3304	Run the paste .
3305	Run gevent .
3306	Run CherryPy .
3307	Run the cheroot server .
3308	Run flup .
3309	Run the WSGI server .
3310	Runs the WSGI server .
3311	Perform a GET request .
3312	Handle MKCOL command .
3313	Yields data chunks from the input stream .
3314	Read data from the input stream .
3315	Find a document by url .
3316	Get domain realm realm .
3317	Compute the digest of a realm .
3318	Get a lock .
3319	Create a lock .
3320	Refresh a lock .
3321	Delete a token
3322	Clear the cache .
3323	Set the last modified time .
3324	Return a string representation of a lock .
3325	Generate a lock .
3326	Acquire a lock .
3327	Refresh a lock .
3328	Get a lock .
3329	Acquire a read lock .
3330	Acquire a write lock .
3331	Release the lock .
3332	Initialize logging .
3333	Instantiate a middleware middleware .
3334	Return a string representation of a string .
3335	Return a string representation of a byte number .
3336	Read and discard the contents of the request .
3337	Join a URI into a URI .
3338	Check if the given parent URI is a child URI .
3339	Checks if the given URI is equal to the parent URI .
3340	Return a fully qualified URL .
3341	Parse XML body .
3342	Send a status response .
3343	Calculate base64 encoded string .
3344	Read a timeout value from a timeout header .
3345	Parses the HTTP header and returns a dict containing the condition .
3346	Guess the mime type .
3347	Add members to the list .
3348	Remove members from the list .
3349	Compute the geometric fba .
3350	Generate index .
3351	Return a list of items matching the given iterable .
3352	Return the results of the given search function .
3353	Replace the object with the given id .
3354	Append an object to the list .
3355	Return the union of the given iterable .
3356	Add an iterable to the list .
3357	Extend an iterable .
3358	Find an object by id .
3359	Insert an object into the list .
3360	Get the elements of the formula .
3361	The shadow price of this model .
3362	Convert model to yaml .
3363	Save a YAML model .
3364	Load a model from a yaml file .
3365	Add pfba to model .
3366	Process flux dataframe .
3367	Computes the linear equation of a model .
3368	Check if the expression is valid .
3369	Set the objective .
3370	Convert an interface to a string .
3371	Get the solver name .
3372	Return the solver for the given model .
3373	Add constraints to a problem .
3374	Remove all variables from a problem .
3375	Add an absolute expression to the problem .
3376	Fix the objective constraint .
3377	Check the solver status .
3378	Raises an exception if the model fails .
3379	Add a model to the model .
3380	Add lexicographic constraints to the model .
3381	Create a new numpy array .
3382	Compute the step of the given delta .
3383	Build a problem .
3384	Generate a warmup .
3385	Performs a projection on the problem .
3386	Generate a random point from the model .
3387	Check if the matrix is redundant
3388	Calculate the bounds of a problem .
3389	Generate a batch of samples .
3390	Validate samples .
3391	Remove unused metabolites from a cobra model .
3392	Remove all reactions from a cobra model .
3393	Deletes the metabolites from the cobra model .
3394	Return a list of gene reactions that match the given gene list .
3395	Removes all genes from the cobra model .
3396	Calculate gap fill .
3397	Extend the model .
3398	Update the cost of the variable .
3399	Add indicators to the model .
3400	Fill gaps with gaps .
3401	Find the external compartment .
3402	Checks if the given reaction type is a boundary .
3403	Find all boundary reactions for a model .
3404	Normalizes the tolerance of the model .
3405	Sample a chain of samples .
3406	Return a string representation of an expression .
3407	Evaluate expression .
3408	Parse a GPR expression .
3409	Removes all reactions from the molecule .
3410	Remove the gene from the model .
3411	Add moma to the model .
3412	Convert a value to a string .
3413	Recursively update the values of an object .
3414	Convert a model to a dictionary .
3415	Load a model from a dictionary .
3416	Returns the id of the id of the given id .
3417	Convert x to a cell .
3418	Load a COBRA model .
3419	Save a model to a file .
3420	Create a matrix from a model .
3421	Convert a model to a Pymat matrix .
3422	Return the context of the object .
3423	Decorator for resettling .
3424	Get the solution of a model .
3425	Returns a list of all metabolites in this model .
3426	Set the reactions for the reaction .
3427	Add metabolites to the model .
3428	Remove metabolites from the model .
3429	Add a boundary to the model .
3430	Add reactions to the model .
3431	Remove all reactions from the model .
3432	Add a list of groups to the model .
3433	Remove a group from the model .
3434	Populate the solver .
3435	Optimize the solver .
3436	Optimize the objective .
3437	Rebuild the model .
3438	Merge two models .
3439	Escape the id of a string .
3440	Escape the given cobra model .
3441	Rename genes .
3442	Return a JSON representation of a model .
3443	Save model to JSON .
3444	Load a model from a JSON file .
3445	Add linear objective to model .
3446	Add MIP object to model .
3447	Convert a reaction to a format .
3448	Compute the minimum objective constraint .
3449	Initialize the model .
3450	Compute the fluxability of a model .
3451	Find all reactions in the model .
3452	Find all essential genes in the model .
3453	Find the essential reactions for a model .
3454	Add SBO to the model .
3455	The sum of elements in the periodic table .
3456	Build the hugo header .
3457	Find the bump for a given tag .
3458	Build the hugomd file .
3459	Perform a multi - delete operation .
3460	Deletes a single reaction .
3461	Perform a single gene deletion .
3462	Determine the deletion of a reaction .
3463	Deletes two genes in a single gene .
3464	Return a unique identifier .
3465	Return the flux of the reaction .
3466	Return the gene name of the gene reaction .
3467	Return True if the gene is functional .
3468	Updates the reactions for this reaction .
3469	Return a copy of this Reaction .
3470	Returns the coefficient of a given metabolite .
3471	Add metabolites to the model .
3472	Add metabolites to the model .
3473	Build a reaction string .
3474	Checks the mass balance .
3475	Gets the compartment s compartment .
3476	Associates the given cobra .
3477	Remove a gene from a cobra .
3478	Build a reaction from a string .
3479	Clip a sid .
3480	Convert a gene to a gene .
3481	Read a SBML model from a file .
3482	Get a document from a file .
3483	Write a BML model to a file .
3484	Create a bounding parameter .
3485	Create a parameter .
3486	Check if a value is required .
3487	Check if the given value is valid .
3488	Parse notes string .
3489	Set notes on SBase
3490	Parse the annotations .
3491	Parses a set of annotations .
3492	Return a string representation of an error .
3493	Compute the production energy .
3494	Calculate the total yield of the energy .
3495	Return the elements of a reaction .
3496	Return the weight of a reaction .
3497	Compute the total flux of the given components .
3498	Return a list of all carbon sources in the model .
3499	Assign a reaction to the model .
3500	Assigns a component to the simulation .
3501	Assigns the components of a reaction .
3502	Assigns the products of a reaction .
3503	Add loopless reactions to the model .
3504	Add a cycle to the model .
3505	Perform a loopless solution .
3506	Iterate over a loopless reaction .
3507	Create a sparse matrix for a model .
3508	Compute the nullspace of a matrix .
3509	Compute the constraint matrix .
3510	Add a room to a room .
3511	Sample samples from a model .
3512	Parse optimization .
3513	Create a clicky node .
3514	Generate a chart heartbeat node .
3515	Generate a chart heartbeat node .
3516	Wooprapper node .
3517	Generate a SpringMetricsNode .
3518	Parses the kiss insights node .
3519	Parse a matomo node .
3520	Parse SnapEngage node .
3521	Generate a performable node .
3522	Convert data to a hash .
3523	Generate a hash of the user .
3524	Return an IntercomNode .
3525	Return a UserVoiceNode
3526	Parses a kiss metrics node .
3527	Parse Piwik node .
3528	Returns the value of the required setting .
3529	Get user from context .
3530	Get the identity of a user .
3531	Determine if the current request is internal .
3532	Return a mixpanel node .
3533	Parse a GoSquaredNode .
3534	Lark node .
3535	Create a clickmap node .
3536	Generate a GaugesNode .
3537	Create a CrazyEggNode .
3538	Parse YAM metadata .
3539	Return a HubSpotNode instance .
3540	Return a function that prints the status line .
3541	Apply a mutation to a file .
3542	Runs a command on a process .
3543	Return a list of python files in a directory .
3544	Compute the exit code .
3545	Update the advertised advertisements .
3546	Called when a characteristic is discovered .
3547	Handle a characteristic .
3548	Called when a descriptor is changed .
3549	Get the RSSI value .
3550	Return a list of all the available characteristics .
3551	Return a list of all the descriptors .
3552	Change the state of the adapter .
3553	Start scanning .
3554	Stop scanning .
3555	Power on the device .
3556	Power off the device .
3557	Find a device .
3558	Discover services .
3559	Find a service by uuid
3560	List all available services .
3561	Return a list of UUIDs .
3562	Find a character by uuid .
3563	Find a descriptor by uuid .
3564	Read the value of the characteristic .
3565	Write a value to the device .
3566	Read the characteristic value .
3567	Start scan .
3568	Stop scanning .
3569	Called when the device is discovered .
3570	Called when the device is connected .
3571	Called when the device is disconnected .
3572	Discovers the devices in the peripheral .
3573	Called when the device is updated .
3574	Called when the device is updated .
3575	Handle readRSSI error .
3576	Initialize the central manager .
3577	Disconnect all devices from the device .
3578	Initialize the object .
3579	Remove all cached data from the device .
3580	Disconnect devices from the device .
3581	Return a list of objects matching the specified interface .
3582	Get a list of objects by path .
3583	Print a list of interfaces .
3584	Find a device .
3585	Get all the metadata for the given cbobjects .
3586	Add a metadata object .
3587	Remove a cb object from the metadata .
3588	Convert cbuuid to UUID .
3589	Set the color of the device .
3590	Get the provider instance .
3591	Convert a byte array to a big integer .
3592	Encrypt password .
3593	Returns the headers for this device .
3594	Perform a search .
3595	Get details about a package .
3596	Returns a list of details for a given package names .
3597	List all clusters
3598	Returns a list of reviews .
3599	Download a package .
3600	Decorator for HTTP requests .
3601	Create a new token
3602	Returns a FirebaseUser instance .
3603	Build endpoint url .
3604	Authenticate the request .
3605	Perform a GET request .
3606	Perform a GET request .
3607	Put a snapshot .
3608	Put a PUT request .
3609	Perform a POST request .
3610	Perform a delete request .
3611	Perform a delete request .
3612	Apply a filter to a query .
3613	Filter the query for the given field .
3614	Get list of available choices .
3615	Get the raw record for the given instance .
3616	Determine if the given instance should index .
3617	Get the settings .
3618	Set the settings .
3619	Register an Algolia index .
3620	Unregisters a model .
3621	Returns the adapter for the given model .
3622	Respond to post_save
3623	Called when a receiver is received .
3624	Decode a geometash .
3625	Encode a geohash .
3626	Pad the given string to the given length .
3627	Normalize a table .
3628	Pad a table .
3629	Creates a horizontal horizontal div .
3630	Add divider .
3631	Render a table .
3632	Get the base id of a resource .
3633	Get information about a card .
3634	Search for transfers .
3635	Perform a bid on a trade .
3636	Get a club .
3637	Get a list of staff statistics
3638	Return a list of all available consumers .
3639	Get a squad .
3640	Retrieve the trade status for a trade .
3641	Get a list of trades
3642	Searches for an item .
3643	Delete an item
3644	Delete a watchlist
3645	Delete a trade
3646	Send to watchlist
3647	Send a game to the game .
3648	Apply a Consume to the given item .
3649	List active messages .
3650	Convert a number to hex
3651	Create a new logger .
3652	Run the worker .
3653	Return the pixel location .
3654	Start image acquisition .
3655	Stop image acquisition .
3656	Add a CTI file .
3657	Remove a CTI file .
3658	Destroy image acquisition .
3659	Add coeffs .
3660	Return the coefficient index for a given T .
3661	Calculate the coefficient of the formula .
3662	Calculate the integration of a given method .
3663	Calculate the integral over a given method .
3664	Calculate the coefficient for a given method .
3665	Calculate the density of the heat capacity .
3666	Calculate the mixing of the heat capacities .
3667	Calculates the mixing of the heat capacities .
3668	Calculate the K value of a given P .
3669	r Calculates the Ranksford error .
3670	Calculates the sum of the Wilson coefficients
3671	Determine the phase of a phase .
3672	r Calculates the bubble at the given pressure .
3673	Draw a molecule
3674	Draw a 3D molecule .
3675	Return the charge of the molecule .
3676	Return the rdkit mol .
3677	Get the HdkitHs of the Rdkitmol .
3678	Return the legal status .
3679	Returns the economic status .
3680	Convert temperature to temperature .
3681	Gets the GWP .
3682	Return the log p .
3683	Calculate the pagat .
3684	Solve the solution .
3685	Sets the solution of the solution .
3686	Solve the solution of the model .
3687	r Calculates the alpha and derivative of the potential derivatives .
3688	Solve the equation of the equation .
3689	r Solve equation
3690	Tries to solve the solution .
3691	Solve the solution of the solution .
3692	Calculate the alpha and derivatives of the formula .
3693	Return the temperature of the given CASRN .
3694	Calculate the TM for the given CASRN .
3695	Clape a Clustyronron
3696	Calculate the Watson Hvap Hvap .
3697	Calculate the hfus .
3698	Calculate the hsub - sub - sub - parameter
3699	Calculate the tlius .
3700	r Calculates the parameter parameter for the solver .
3701	r Calculate the eutility of the Eutility function .
3702	r Compute the density of the temperature of the given temperature .
3703	Renders the Rack lattice .
3704	Calculate the gunnumber for the given temperature .
3705	Calculate the Holes of the given temperature .
3706	Calculate COST .
3707	Calculate the AMP .
3708	Calculate COST_Mixture coefficient .
3709	Calculate the voltage for the given method .
3710	Calculate the velocity of a given parameter .
3711	Calculate the AMPixture .
3712	Calculate the energy of the energy .
3713	Calculate the energy of the volume .
3714	Calculate the value of a given method .
3715	Calculate the mixing of a volume .
3716	Return the legal status of a given CASRN .
3717	Return the economic status of the given CASRN .
3718	Estimate the estimate of the estimate .
3719	Calculate the conductivity of a given CA .
3720	Calculate the ionic strength of an ion .
3721	Calculate the ratio of an ion .
3722	Calculate epsilon .
3723	Calculate the mixing of a surface .
3724	Load group assignments from DDB .
3725	Determine the dipole moment of a charge .
3726	Return a list of Pc objects for the given CASRN .
3727	Return a list of VC methods for a CAS .
3728	Return a list of critical methods for the given CASRN .
3729	Return the critical surface of the critical surface .
3730	The third property of the critical property .
3731	Check if CASRN is valid
3732	Get a mixture from a list .
3733	The charge of the formula .
3734	Load indentifiers from a file .
3735	Calculate the cool property of a cool property .
3736	Returns the stockmayer of the stockmayer .
3737	Return the chemical diameter of the molecule .
3738	Calculate the tstar of a given T .
3739	Calculate the hf gas for the given CASRN .
3740	Calculate the omega for the given CASRN .
3741	Calculate the omega .
3742	Calculate the StylPolar pressure .
3743	Convenience function for visonath2 .
3744	Round the given integer to the given number .
3745	Calculate the mean of a method .
3746	Calculate the density of the model .
3747	Calculate the value of the mixing of a mixture .
3748	Calculate the mean of a given method .
3749	Calculate the mean of the model
3750	Calculate the value of the mixing coefficient .
3751	Return a list of available TWAIO methods .
3752	Retrieve the STEL for the given CASRN .
3753	Return the ceiling of the given CASRN .
3754	Get the skin for the given CASRNIO .
3755	Calculate the Carcinogen
3756	Calculate the tautignition of a CASRN .
3757	Calculate the LFL
3758	Return the UFLU .
3759	Calculate the number of atoms in the molecule .
3760	Calculate the mass fractions of the mass .
3761	Draws the molecule of the molecule .
3762	Calculate the T T T T T T
3763	Returns the temperature for the given CASRN .
3764	r Calculates the Parachor for the given MW .
3765	Calculate the Joule of the Joule .
3766	Calculate the z of the pressure waveform .
3767	Convert zs to ws
3768	Convert zs to vfs
3769	Checks if all of the inputs are equal .
3770	Computes the mixing between two fracs .
3771	Compute the log magnitude of a given frac .
3772	Return the phase select property .
3773	Sets the methods of the chemical method .
3774	Selects a list of valid methods .
3775	Convenience method to solve a temperature .
3776	Calculate the derivative property derivative of the method .
3777	Calculate the integral of a function .
3778	Calculate the value of the property of a given T .
3779	Calculate the integral over a given method .
3780	Load all the methods of the method .
3781	Calculate the coefficient of a method
3782	Sets the methods of the chemical method .
3783	Selects and returns a list of valid methods .
3784	Calculate the property of the TP dependent property .
3785	Interpolate the interpolation of a table .
3786	Calculate the derivative of the property derivative of the property .
3787	Calculate the derivative of the property derivative of the property .
3788	Sets the method of the mixture method .
3789	Calculate the derivative of the property derivative of the property .
3790	Calculate the derivative of the property derivative of a P .
3791	Calculate the refractive index of a reference .
3792	Solve the solution of the matrix .
3793	Sets the alpha and derivatives of the model .
3794	Sets the alpha and derivatives of the model .
3795	Sets the alpha and derivatives of the model .
3796	Calculates the alpha and derivatives of the model .
3797	Sets the equation and derivatives of the equation
3798	Sets the alpha and derivatives for the given index .
3799	Calculate the Bahador s liquidi liquid .
3800	Calculates the Bahadori gas for a given temperature .
3801	Calculate the kernel of the kernel .
3802	Calculate the density of a given method .
3803	Calculate the thermal conductivity of the given temperature .
3804	Calculate the density of the gas .
3805	Calculate the density of the energy .
3806	Calculate the mixing coefficient for the given temperature .
3807	Parse a formula .
3808	Return the charge from a formula .
3809	Serialize a formula .
3810	Connect to the client .
3811	Returns the request header .
3812	Sets the active client .
3813	Upload an image .
3814	Get the status of the upload session .
3815	Receive a batch update .
3816	Add channel services .
3817	Send a request to the chat buffer .
3818	Perform a POST request .
3819	Add a new user .
3820	Create a conversation .
3821	Delete a conversation .
3822	Get easter for easter .
3823	Get a conversation .
3824	Get entity by id .
3825	Get the URL of a group .
3826	Get information about the current contact .
3827	Get suggestions for a contact .
3828	Query presence .
3829	Remove a user .
3830	Renames a conversation .
3831	Search for contacts .
3832	Send a chat message .
3833	Modify an OTR status .
3834	Send offnetwork invitation .
3835	Set the active client .
3836	Sets the conversation notification level .
3837	Set the focus .
3838	Set group link sharing .
3839	Sets presence .
3840	Sets typing .
3841	Sync all pending events .
3842	Sync recent conversations .
3843	Convert a microsecond timestamp to a datetime object .
3844	Create a UserID from a participant_id .
3845	Convert a userid to a ParticipantId .
3846	Parse a typing status message .
3847	Parse a watermark notification .
3848	Returns the authorization headers for the given session cookie .
3849	Fetch a request .
3850	Perform a GET request .
3851	Lookup entities by ID .
3852	Get the lookup spec for the given identifier .
3853	Get the name of a conversation .
3854	Add a scheme to the scheme .
3855	Sync all conversations .
3856	Return a list of unread events .
3857	Return True if this message is quiet .
3858	Handle a watermark notification .
3859	Update a conversation .
3860	Wrap an event .
3861	Add an event to the conversation .
3862	Returns the default delivery medium .
3863	Get the event request header .
3864	Send a message to the chat .
3865	Leave this conversation .
3866	Renames a conversation .
3867	Set the message level .
3868	Sets typing status .
3869	Update the latest read timestamp .
3870	Gets the events for this conversation .
3871	Returns the next event .
3872	Get all convions .
3873	Leave a conversation .
3874	Add a new conversation .
3875	Handle a state update .
3876	Fetch a conversation .
3877	Handle an event .
3878	Handle a conversation delta .
3879	Handle typing notification .
3880	Handle a watermark notification .
3881	Sync all events .
3882	Updates the name of the user .
3883	Creates a User from an Entity .
3884	Create a User from a conversation .
3885	Gets a user by its ID .
3886	Add a user to the user .
3887	Add a callback to the observer .
3888	Remove an observer .
3889	Fire the observer .
3890	Generate a markdown tag .
3891	Generate HTML tags .
3892	Run example for example .
3893	Creates a parser .
3894	Main entry point .
3895	Print a table into a table .
3896	Generate a description of the enum doc .
3897	Generate a message doc .
3898	Compile a protoc file .
3899	Main entry point for the proto file .
3900	Make a directory .
3901	Handle exception handler .
3902	Filter input events .
3903	Show the menu .
3904	Get a conversation widget .
3905	Add a conversation tab .
3906	Connect to the user .
3907	Handle a chat event .
3908	Put a coroutine into the queue .
3909	Consume the queue .
3910	Rename a conversation .
3911	Sort the list of conversations .
3912	Show a message .
3913	Handle a chat event .
3914	Handle typing .
3915	Updates the typing dialog .
3916	Return a string representation of a timestamp .
3917	Create a message widget from a conversation .
3918	Handle the event .
3919	Loads the conversation .
3920	Sets the current position .
3921	Get the menu widget .
3922	Handle a keypress event .
3923	Set the title of the conversation .
3924	Handle a text message .
3925	Update tab s tabs .
3926	Handle keypress .
3927	Sets a tab .
3928	Replace words in a string .
3929	Attempt to authenticate a refresh token .
3930	Gets the authorization code .
3931	Attempt to authenticate a refresh token .
3932	Attempt to authenticate the given authorization code .
3933	Make a token request .
3934	Get cookies from the session .
3935	Get the refresh_token from the file .
3936	Saves a refresh token .
3937	Submit a form to the page .
3938	Parse the sid response .
3939	Generate chunks from new data .
3940	Listen for long polling .
3941	Fetch the gsession id and session id .
3942	Open a long poll request .
3943	Called when a chunk is received .
3944	Serialize this segment .
3945	Decode a field .
3946	Decode repeated field values .
3947	Decode a message .
3948	Convert a value to a timezone .
3949	Execute the query .
3950	Reads the input stream .
3951	This method is called when the device is read .
3952	Read a ADS1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -
3953	Get the last version of the device .
3954	Removes all exited containers from the container .
3955	Remove all images from docker .
3956	Update nginx configuration .
3957	Update running containers from a spec .
3958	Resolve a name from the given name .
3959	Create a local repo .
3960	Update local repo .
3961	Update all local repositories .
3962	Prepare the environment for the local environment .
3963	Start local environment .
3964	Stops all apps or services .
3965	Restart all active containers .
3966	Rename a file in case insensitive mode .
3967	Creates a dict with the docker configuration for the given port .
3968	Generate a compose dictionary from the assembled components .
3969	Return a list of links that match the given app_name .
3970	Return the path to the build path .
3971	Compiles the compose dictionary for an app .
3972	Convert a service spec to a dict .
3973	Get a list of ports for a container .
3974	Get the compose volumes for the given app .
3975	Read environment variables from a file .
3976	Recursively expand all libraries in the given specs .
3977	Extracts the dependencies in the given spec .
3978	Return a set of active libraries .
3979	Return a set of active services .
3980	Add active assets to the list of assets .
3981	Returns an expanded list of active specs .
3982	Get the repository for a given app or library .
3983	Get a set of repositories from the given spec .
3984	Get the list of container repositories for the given app .
3985	Creates a configuration section from a config file .
3986	Update hosts file .
3987	Move tmp_binary_path to path .
3988	Generate a task queue .
3989	Generate the location specification for a port specification .
3990	Return a string representation of the http server .
3991	Generate a string representation of a server stream .
3992	Get the Nginx configuration spec .
3993	Load the SSH credentials for the given mac username .
3994	Load the SSH credentials for the SSH agent .
3995	Checks if the mac_username is present in the mac_user .
3996	Clean up a directory .
3997	Copies the given path to the given path .
3998	Copy a local file to a remote path .
3999	Copy a remote path to a remote path .
4000	Mount a repo .
4001	Generate the port spec for a container .
4002	Initialize YAML .
4003	Returns the registry name for the given image name .
4004	Return a set of docker registry names .
4005	Decorator to yield a stream of messages .
4006	Execute pty process .
4007	Compile docker commands .
4008	Increment file handle .
4009	Start the HTTP server .
4010	Get docker client .
4011	Get a list of docker containers .
4012	Configure nfs server .
4013	Ensure the repository directory exists .
4014	Register a new consumer
4015	Consume a container .
4016	Get the list of volumes for a given app .
4017	Get the list of libraries for a given library .
4018	Get the list of volumes for a given app .
4019	Checks if a virtual machine exists .
4020	Initialize a Dusty VM .
4021	Start docker VM VM .
4022	Check if docker VM is running
4023	Get the localhost port for the VM .
4024	Get the host - only mac address .
4025	Returns the IP address for the given MAC address .
4026	Get host - only IP address .
4027	Create a local copy of a file .
4028	Create a cookie .
4029	Load a cookie jar .
4030	Load cookies from the cookie .
4031	Decrypt a value .
4032	Generate a random choice from a list of strings .
4033	Parse a string .
4034	Checks if the given content params are patched .
4035	Decorator to wrap a function .
4036	Decorator to wrap a function .
4037	Error handler .
4038	Returns the default headers .
4039	Cache the response to the cache .
4040	Clean up a dictionary
4041	Retrieve data from the API .
4042	Extract the links from the request .
4043	Build query string .
4044	Get a list of publications .
4045	Return the number of items in a collection .
4046	Return the number of items in a tag .
4047	Get total total number of results .
4048	Get information about a key .
4049	Get a fulltext item for a given item .
4050	Get the last modified version .
4051	Get a file for a given item
4052	Write a file to disk .
4053	Return a list of all the collections .
4054	Get a list of collections for a given collection .
4055	Get all items that match the given query .
4056	Return a list of items .
4057	Parse CSL JSON data .
4058	Process bib files .
4059	Processes a list of citations .
4060	Get a new item template .
4061	Upload a payload to the upload .
4062	Return the list of permitted operators for a given condition .
4063	Delete a saved search .
4064	Add tags to item
4065	Get a list of fields for a given item .
4066	Retrieve the list of items for the item .
4067	Update an item .
4068	Update a list of items .
4069	Validate conditions .
4070	Upload the contents of the file .
4071	Split a single line into multiple lines .
4072	Split a value into a list of elements .
4073	Evaluate environment variable .
4074	Get the value of a config option .
4075	Set configuration value .
4076	Convert config to args
4077	Runs 3to2 . 2 . 3 . 2 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 .
4078	Write Py2 K2K header to python file .
4079	Get the language version .
4080	Get the list of languages .
4081	Returns the directory for the current language .
4082	Sets the location of the directory .
4083	Return a list of matches .
4084	Returns the best version of the current language .
4085	Returns the common prefix for the given z .
4086	Process events .
4087	Decorator to close a function .
4088	Decorator to wrap a function .
4089	Add a logger to the class .
4090	Process an event .
4091	Add a list of sources .
4092	Add a list of searchers to the search .
4093	Add borrowers .
4094	Calculate the AIC model for a given number .
4095	Calculate the AIC C .
4096	Calculate the KIC of the kernel .
4097	Calculate the AKIC C .
4098	Calculate the FPE of a given number .
4099	Calculate the MDL
4100	Calculate the AIC eigen eigenvectors of a given S .
4101	Calculate the e -igen eigenvectors of the model .
4102	Generate gallery file .
4103	Setup the gallery .
4104	r Calculates the correlation coefficient of the correlation matrix .
4105	Calculate the correlation coefficient of x .
4106	Evaluate the eigenval of a given T .
4107	Calculate the morlet of a given number .
4108	Calculate chirp .
4109	Calculate the exican distance between two points .
4110	Convert a polygon into a polygon .
4111	r Compute a polygon of a curve .
4112	r Calculates the Roles of a R .
4113	Calculate the inverse of a complex reflection .
4114	r Calculates the log area of the log .
4115	r Calculates the log area of the log .
4116	Convert a line spectrum to a polygon .
4117	Convert a polylynomial polygon polygon polygon to a L .
4118	Compute the overlap between two arrays .
4119	Compute the two - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
4120	Compute 2 - 2 - 2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
4121	Convert two - dimensional coordinates to a 2D array .
4122	Calculate the center of the data .
4123	Compute the zeros of the given zerolag .
4124	Calculate the cosine of a given number .
4125	Generate data between two frequencies
4126	Return the filename of the spectrum
4127	Plot the time series .
4128	Read a WAV file .
4129	Calculate crosscov .
4130	Remove bias from a signal .
4131	Get the docstring and rest of the docstring .
4132	Split a source file into a list of text blocks .
4133	Convert a string to rst .
4134	Returns the MD5 hash of a file .
4135	Checks if the given file is a valid MD5 sum .
4136	Return True if the given image_file_file is current .
4137	Save the figure to the figure .
4138	Scale an image to a file .
4139	Saves the thumbnail image .
4140	Execute a script .
4141	r Calculates an arsembler .
4142	r Compute the Cholesky .
4143	r Returns the solution of a matrix .
4144	Cholesky decomposition .
4145	Calculate the speriodogram of a time period .
4146	Calculate Welch periodogram .
4147	Determine a DensityPeriodogram .
4148	Returns the center of the center of the center of the center .
4149	Returns a generator that yields the number of rows in the grid .
4150	Plot the spectrum .
4151	Return the power of the spectrum .
4152	Create a notebook skeleton .
4153	Convert text to md5
4154	Add a markdown cell .
4155	Save the workbook .
4156	Convert arma model to PSD .
4157	Calculate the arma of the arma .
4158	Calculate the maussian model for a given matrix .
4159	Calculate the probability density of a dataset .
4160	Get data from url
4161	Selects a block from a string .
4162	Parse a dict .
4163	Parse search index .
4164	Embed code links .
4165	Get the link for a given cobj .
4166	Convert two vectors to zp .
4167	Compute the difference between two arrays .
4168	Calculate the z - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
4169	Convert zpk to a tensor .
4170	Convert zpk to a signal
4171	Calculate the enbw w
4172	Calculate the kernel of the kernel .
4173	Plot a window .
4174	Calculate window for a window .
4175	Calculate the window for the window .
4176	Calculate window Gaussian window .
4177	Calculate the cosine of the window .
4178	Calculate the window of the window .
4179	Calculate the window for the window .
4180	Calculate the coefficients of a given N .
4181	Calculate the window for a window .
4182	Calculate the window for the window .
4183	Calculate the window blackman window .
4184	Calculate the window of the window .
4185	Flattens a window .
4186	Calculate window for windowing
4187	Calculate the size of the window .
4188	Calculate the window for the window .
4189	Calculate window poisson distribution
4190	Calculate the density of the window .
4191	Calculate the window of the window .
4192	Compute the response .
4193	Plot frequencies .
4194	Plot the window .
4195	Plot time frequencies .
4196	Calculate the TEPLITZ .
4197	r Compute the ERM to E .
4198	Get the short name of a module .
4199	Identify the names of the examples .
4200	Generate a thumbnail for a file .
4201	Calculate the modcovar .
4202	r Compute the correlation coefficient .
4203	Calculate the LVINSON .
4204	r Compute the rank of a polygon .
4205	Compute the lev down - down correlation coefficient .
4206	Compute the levup .
4207	Calculate the arcovarance of a correlation matrix .
4208	Compute the LPC projection of a vector .
4209	Pascal number of numbers .
4210	Compute the SVD of a matrix .
4211	Convert a path to a static path .
4212	Main entry point .
4213	Checks if the stdin is a pipe .
4214	Return a list of all known keys .
4215	Return the name of the class .
4216	Get credentials for a service .
4217	Delete a password .
4218	Get environment variable .
4219	Get the preferred collection .
4220	Return a sorted list of available keys .
4221	Set the keyring backend .
4222	Disable keyring .
4223	Initialize the keyring .
4224	Load a keyring class .
4225	Load the keyring config file .
4226	Return the path to the Linux kernel .
4227	Check if the keyring config file exists .
4228	Return the path to the Linux kernel .
4229	Create a formatter for the given format .
4230	Arguments parser .
4231	Run a subcommand .
4232	Run the Netgear router .
4233	Determine the URL of the server .
4234	Get the value of an element .
4235	Convert value to a type .
4236	Perform a login .
4237	Get attached devices .
4238	Get the traffic meter .
4239	Finish the configuration .
4240	Make a request .
4241	Convert an IP address to a long integer .
4242	Searches for IP address .
4243	Returns region code for given IP number .
4244	Retrieve a record from the database .
4245	Get host by name .
4246	Get the ID of a host .
4247	Returns the ID of the IP address for the given address .
4248	Get netSpeed by address .
4249	Get the network speeds by name .
4250	Get country name by address .
4251	Get country name by name .
4252	Get organization by address .
4253	Get organization by name .
4254	Get timezone by country code .
4255	Compress a file .
4256	Returns the compressed filename for the given filename .
4257	Copy src to dst .
4258	Get url from path .
4259	Read a Markdown file .
4260	Loads the images from the album .
4261	Restore the image cache .
4262	Save image cache to disk
4263	Filter the nomedia file .
4264	Builds the project .
4265	Serve the server .
4266	Set the meta file .
4267	Generate an image .
4268	Generate thumbnail image .
4269	Get EXIF data .
4270	Parse an IPC data file .
4271	Get exif tags from data
4272	Create output directories .
4273	Return the URL of this file .
4274	Returns the thumbnail for this image .
4275	Create a zip file .
4276	Get all albums in a given path .
4277	Create the images gallery .
4278	Process a list of files .
4279	Reduce the opacity of an image .
4280	Draw a watermark .
4281	Run a subprocess .
4282	Get video size .
4283	Generate a video .
4284	Generate a thumbnail .
4285	Generate a context .
4286	Write an album .
4287	Get the thumbnail for the given filename .
4288	Read settings from a file .
4289	Generate gallery pages .
4290	Write an album to a file .
4291	Clean up the project directory .
4292	Validate a project name .
4293	Manage options .
4294	Return a list of supported versions .
4295	Return the less than version of a version .
4296	Parse config file .
4297	Dump a configuration file .
4298	Convert config to stdin
4299	Create a project .
4300	Installs adryn .
4301	Setup database setup .
4302	Create a user .
4303	Execute a command .
4304	Return a list of valid formats .
4305	Runs the given filepath .
4306	Runs a command .
4307	Validate file format .
4308	Validate the sample rate .
4309	Validate the number of channels .
4310	Build a list of input files .
4311	Builds a list of input files .
4312	Validate inputs .
4313	Return True if the input file is silent .
4314	Validate input file .
4315	Validate inputs .
4316	Validate the output file .
4317	Get information about a file .
4318	Stat a file .
4319	Parse stat output .
4320	Set global variables .
4321	Apply biquadad .
4322	Set the channels of channels .
4323	Apply contrast to the image .
4324	Convert to output format .
4325	Apply the shift to the effect .
4326	Delays the given positions .
4327	Updates the effects of the image .
4328	Evaluate a sound .
4329	Create a flanger .
4330	Gets the gain .
4331	Set the loudness .
4332	Runs the given input filepath .
4333	Set noise red noise .
4334	Compute the norm of the model .
4335	Applies operations to the log .
4336	Overrides the effect of the effect .
4337	Pad the effect .
4338	Phaser phase .
4339	Sets the pitch shift .
4340	Set the remix dictionary .
4341	Repeat a number of times .
4342	Reverse the effect .
4343	Sets the silence .
4344	Stat a file .
4345	Get stats from a file .
4346	Swap effects .
4347	Set the tempo .
4348	Trim the specified time .
4349	Generate a VAD .
4350	Volume volume volume .
4351	Join a room .
4352	Leave a room .
4353	Manage socketio .
4354	Saves a callback for a message .
4355	Pops ack callback .
4356	Get multiple client messages .
4357	Remove a namespace .
4358	Send a packet .
4359	Spawn a sub - socket .
4360	Read packets from server .
4361	Watch for all jobs .
4362	Heartbeat the server .
4363	Spawns the heartbeat .
4364	Encode a message .
4365	Decode a raw string .
4366	Process an event .
4367	Call a method with the given name .
4368	Send an error message .
4369	Send a message to the socket .
4370	Send an event to the socket .
4371	Spawn a new worker .
4372	Get a socket from the session .
4373	Create a new chat room .
4374	Get message payload from socket .
4375	Encode messages .
4376	Write data to the server .
4377	Broadcast an event .
4378	Add a parent to this node .
4379	Add a permission to this role .
4380	Add a permission to the role .
4381	Add an exempt resource .
4382	Check if the given resource is allowed .
4383	Check if the given resource is denied .
4384	Creates a decorator for the given roles .
4385	Removes all binaries from the library .
4386	Decorator to wrap an AMS router .
4387	Add a new IP address .
4388	Close the specified port .
4389	Get the local address for a given port .
4390	Perform a synchronously synchronously synchronously .
4391	Synchronously read device info .
4392	Perform a synchronous write control request .
4393	Synchronously sends an ads sync request .
4394	Perform a synchronous sync request .
4395	Read data by name .
4396	Synchronously write data by name .
4397	Add a notification to the device .
4398	Dispatches a device notification .
4399	Sets the timeout for the specified port .
4400	Generate ranges from start_date
4401	Returns a pandas DataFrame
4402	Remove a node from the ring .
4403	Get a list of keys from the server .
4404	Create a lock .
4405	Parse a line .
4406	Connect to Lavalink .
4407	Listen for websocket .
4408	Return the connected channel .
4409	Connect to the voice channel .
4410	Disconnect the voice channel .
4411	Store a user data .
4412	Fetch user data from user data .
4413	Add an audio track to the queue .
4414	Add a new audio track to the queue .
4415	Add an audio track to the queue .
4416	Play a track .
4417	Play a track .
4418	Play the given index .
4419	Play the previous track .
4420	Stop the bot .
4421	Set pause .
4422	Sets position .
4423	Handle an event .
4424	Get a player .
4425	Remove a guild .
4426	Play a playlist .
4427	Move a track to the player .
4428	Display a song .
4429	Queue the queue .
4430	Remove a player from the queue .
4431	Ensure the voice channel is connected .
4432	Unregister a hook .
4433	Dispatch event .
4434	Update player state .
4435	Get tracks for a given query .
4436	Destroy the websocket connection .
4437	Builds a new track from a track .
4438	Play the previous song .
4439	Play a song .
4440	Play at the given index .
4441	Finds a track .
4442	Add suggestions .
4443	Delete a string
4444	Get suggestions for a given prefix .
4445	Create a new index .
4446	Add a document to the index .
4447	Add a document to the database .
4448	Delete a document .
4449	Load a document .
4450	Return information about the index .
4451	Perform a search .
4452	Execute a query .
4453	Set the field alias .
4454	Adds a group to the collection .
4455	Applies a projection to the query .
4456	Set the limit .
4457	Returns the arguments for this query .
4458	Sets the sort by field .
4459	Return a RangeValue .
4460	Return a GeoValue object representing a GeoValue .
4461	Transform a jam .
4462	Transpose a note to a note
4463	Pack a jam .
4464	Load a jam file .
4465	Save the audio to the audio .
4466	Convert a dict to a dict .
4467	Serialize transform .
4468	Deserialize a JSON object .
4469	Print a list of parameters .
4470	Returns the names of the parameter names .
4471	Transforms the muda state .
4472	Transform a jam .
4473	Iterate over a jam .
4474	Iterate over a jam .
4475	Sample clip indices .
4476	Clip a file from a file .
4477	Normalize remote path .
4478	Split the path to a remote storage .
4479	Check if file is empty .
4480	Calculate the checksum of a file .
4481	Retrieve a Storage instance .
4482	Returns a generator of all the stored stores .
4483	Create a new file .
4484	Copy a file object to a file .
4485	Write file to file .
4486	Removes the file .
4487	Update the file .
4488	Iterate over children .
4489	Determine if the user is authorized .
4490	Initialize the config file .
4491	Clone a project .
4492	Fetch a remote file .
4493	List files .
4494	Upload a file .
4495	Remove a file .
4496	Login to the session .
4497	Get a project .
4498	Get a specific GUID .
4499	Return the JSON representation of the response .
4500	Follow the next page .
4501	Create a project .
4502	Clears the project .
4503	Create a SPI driver .
4504	Put a function to the queue .
4505	Runs all edits .
4506	Find device devices .
4507	Get the device .
4508	Log an error .
4509	Set device ID .
4510	Gets the value of a project .
4511	Crop image .
4512	Resize an image .
4513	Draw a circle .
4514	Fill a circle .
4515	Draw a line .
4516	Draw a bresenham line .
4517	Fill the screen .
4518	Fill a triangle with the specified coordinates .
4519	Sets the current route .
4520	Set the color of a ring .
4521	Get the center of a ring .
4522	Run a function .
4523	Scale a color
4524	Save the project to a file .
4525	Get the value at the given position .
4526	Run the next task .
4527	Report a function .
4528	Receive a message .
4529	Set the brightness of the device .
4530	Add a logging level .
4531	Construct a new instance of the driver .
4532	Clone a copy of this object .
4533	Set the color list .
4534	Fill the LED with the given color .
4535	Fill the image with the given color .
4536	Fill the given HSV .
4537	Calculate the color of the wheel .
4538	Decorator to handle a single value .
4539	Decorator for multi - address .
4540	Advance a permutation .
4541	Handle the animation .
4542	Apply a function to the file .
4543	Creates a mutable event .
4544	Add redundant arguments to the parser .
4545	Draw a circle .
4546	Draw a circle .
4547	Draw a bresenham line .
4548	Draw a rectangle .
4549	Draw a rectangle .
4550	Fill a rectangle .
4551	Draw a triangle .
4552	Draw a rectangle .
4553	Set the color of the LED .
4554	Get a point on a circle .
4555	Generate a vector of vectors .
4556	Returns a generator that yields all the named colors .
4557	Return True if x is a string or color .
4558	Return a list of segments .
4559	Return a new Segment .
4560	Stop the Runner .
4561	Open a simpixel .
4562	Recursively recursively recursively recursively .
4563	Convert a value to a type .
4564	Fill an item with the given value .
4565	Pop a palette from a list of colors .
4566	Compute the euclidean distance between two c1 .
4567	Write frames to file .
4568	Dump data to JSON .
4569	Write data to stdout .
4570	Load data from a file .
4571	Adapts an animation .
4572	Convert HSV to RGB color
4573	Convert hsv into RGB representation
4574	Convert a hsv color to RGB color .
4575	Convert hsv to RGB color
4576	Compare two colors .
4577	Get a cached server .
4578	Set a section .
4579	Update a dict with the given keys .
4580	Convert a color to a string .
4581	Convert a color to a color .
4582	Construct a new instance from a project .
4583	Convert image to RGB .
4584	Convert image to colorlist
4585	Convert GIF images to colorlists .
4586	Parse a duration string .
4587	Stop the thread .
4588	Show an image .
4589	Convert x y to x y and y coordinates .
4590	Convert x y to y y and y coordinates .
4591	Convert a list of colors to a tuple .
4592	Return a palette of colors .
4593	Receive a message .
4594	Creates a matrix map of coordinates .
4595	Create a datatype object .
4596	Context manager .
4597	Return the index of the given index .
4598	Read data from data .
4599	Clean up an animation .
4600	Detach all animations .
4601	Main entry point .
4602	Merges the given projects into a dictionary .
4603	Return a copy of this instance .
4604	Generate a list of transactions .
4605	Upgrade the account .
4606	Returns the whitelist of the given account .
4607	Return a list of blacklisted accounts .
4608	Returns a list of all the lists of the given account .
4609	Retrieve a public key from a signature .
4610	Try to recover a public key from a message .
4611	Get the time of a block .
4612	Get the timestamp of a block .
4613	Yield blocks until stop .
4614	Wait for a transaction confirmation .
4615	Get all accounts in the blockchain .
4616	Refresh the asset .
4617	Format a timestamp .
4618	Parses a block time .
4619	Checks if the wallet is unlocked .
4620	Unlock the master password .
4621	Decrypt master password
4622	Create a new master password
4623	Calculate the checksum of a string .
4624	Returns the encrypted master password .
4625	Change the current password .
4626	Decrypt a wallet .
4627	Encrypt a wallet .
4628	Generate a private key .
4629	Create an instance from a public key .
4630	Determine the y of x .
4631	Returns the point of the public key .
4632	Add a child to this node .
4633	Create a new instance from a private key .
4634	Derive a private key .
4635	Derive a child from the given offset .
4636	Derive a private key from the given offset .
4637	Claims an account .
4638	Returns a shared block instance .
4639	Set the shared config .
4640	Find the next node in the queue .
4641	Reset the number of retries .
4642	Check if a key exists .
4643	Return all items in the table .
4644	Get a value from the dictionary .
4645	Delete a key from the database .
4646	Check if table exists .
4647	Create a new record .
4648	Get the raw proposal .
4649	Return the JSON representation of this transaction .
4650	Add a signer to the wallet .
4651	Append a WIF to a private key .
4652	Set the fee .
4653	Add required fees .
4654	Constructs a transaction .
4655	Verify that the blockchain is valid .
4656	Broadcast a transaction .
4657	Clear all operations .
4658	Return a copy of this asset .
4659	Return a copy of this asset .
4660	Finalize operations .
4661	Broadcast a transaction .
4662	Create a proposal .
4663	Create a new transaction builder .
4664	Return an OrderedDict .
4665	Generate a unique identifier .
4666	Sign the message .
4667	Refresh the object .
4668	Encrypt a private key .
4669	Decrypt a private key .
4670	Set private keys .
4671	Unlock a password .
4672	Create a new wallet .
4673	Add a private key to the store .
4674	Returns the private key for the given public key .
4675	Remove an account
4676	Get the owner key for a given account .
4677	Get the key for a given account .
4678	Get the active key for a given account .
4679	Get account from private key
4680	Get accounts from public key
4681	Get account from public key
4682	Returns the key type for the given public key .
4683	Returns a list of accounts .
4684	Returns a list of public keys .
4685	Unlock a wallet .
4686	Encrypt a message .
4687	Decrypt a message .
4688	Returns the shared secret for a private key .
4689	Initialize a new AES encryption .
4690	Encodes a message and returns it as a string .
4691	Decode a message .
4692	Export environment variables
4693	Execute a command
4694	Try to find a regular expression .
4695	Execute a command .
4696	Export environment variables .
4697	catenate a file
4698	Format the NVMe configuration .
4699	Get the chunk metadata for the given offset .
4700	Get the size of the descriptor table .
4701	Check environment variables .
4702	Create LNVM .
4703	Compare two buffers .
4704	Copy a stream into memory .
4705	Write a file to a file .
4706	Read data from a file .
4707	Power on the device .
4708	Power off the device .
4709	Power button .
4710	Get information about a chunk .
4711	Export environment variables
4712	Run a script
4713	Setup hooks for a hook .
4714	Write a trun to a file .
4715	Emits a trun
4716	Setup the tcase setup .
4717	Exit exit .
4718	Enter tsuite hook
4719	Setup test suite .
4720	Enter a hook .
4721	Execute the exit code .
4722	Enter a hook .
4723	Setup the trun configuration .
4724	Main entry point .
4725	Get the chunk meta data .
4726	Get chunk meta item
4727	Convert a string to a generator .
4728	Convert an address to a device .
4729	Run the command .
4730	Starts the thread .
4731	Terminate the process .
4732	Generate a PNG file .
4733	Generate a PNG file .
4734	Round a filter .
4735	Execute SSH environment
4736	Print information about a message .
4737	Print a message
4738	Print a warning message .
4739	Print an error message
4740	Print a human readable text .
4741	Get paths from environment variables .
4742	Add the given prefix to the environment .
4743	Check if the NVMe environment exists .
4744	Get the RPRt description of a device .
4745	Get the chunk of the given state .
4746	Kill the process .
4747	Parse parameters .
4748	Import parameters from parameters .
4749	Get the value of a parameter .
4750	Start the thread .
4751	Run the fio command .
4752	Extracts the names of the hook names .
4753	Parse tcase comment .
4754	Convert run_logs to HTML .
4755	Convert a file to HTML .
4756	Perform a postprocess .
4757	Replace old values in the given struct .
4758	Main entry point .
4759	Get environment variables .
4760	Wait for the SSH command .
4761	Return a AssertionBuilder .
4762	Return the contents of a file .
4763	Set a soft fail message .
4764	Check if the value is equal to another .
4765	Checks if the value is equal to another .
4766	Check if the value is equal to another .
4767	Check if the value is equal to another .
4768	Check if the value is a type .
4769	Check if the value is an instance of the given class .
4770	Check if the value is a valid length .
4771	Checks if the given items are present .
4772	Checks if the value is in the string .
4773	Checks if the value contains only one or more items .
4774	Check if the sequence contains a sequence of items .
4775	Return True if the value contains duplicates .
4776	Checks if the value is not duplicates .
4777	Check if the value is empty .
4778	Check if the value is empty .
4779	Check if the value is in the list .
4780	Checks if the value is less than another .
4781	Checks if the value is between two values .
4782	Checks if the value is equal to another .
4783	Checks if the string is equal to the given string .
4784	Checks if the value is in case insensitive .
4785	Checks if the string starts with the given prefix .
4786	Assert that the value is a string .
4787	Checks if the string matches the given pattern .
4788	Checks if the string is an alpha character .
4789	Check if the value is a digit .
4790	Check if the string is lowercase .
4791	Check if the string is upper case .
4792	Check if the value is a unicode .
4793	Check if the value is a subset of superset .
4794	Determine if the value contains the given values .
4795	Determine if the value is not present .
4796	Determine whether or not a dict contains entries .
4797	Checks if the value is before the given date .
4798	Check if the path exists .
4799	Check if the value is a file .
4800	Check if the value is a directory .
4801	Check if filename is a filename .
4802	Check if the file is a child .
4803	Create a AssertionBuilder .
4804	Raise an Assertion .
4805	Add a warning message .
4806	Convert arguments to a string .
4807	Create a DataFrame from words .
4808	Generate the best dataset .
4809	Prepare feature data .
4810	Train a training model .
4811	Evaluate the prediction .
4812	Tokenize the given text .
4813	Calculate the document frequency of the document .
4814	Generate a list of words .
4815	Create a feature array .
4816	Create ngram matrix from n_pad
4817	Fetch all rows from a cursor .
4818	Parse a datetime string .
4819	Connect to OpenEdX API .
4820	Ensure a token is expired .
4821	Redirects to a given course run .
4822	Get the details of a course .
4823	Sort course modes .
4824	Returns a list of course modes .
4825	Checks if the given course is a course .
4826	Add a user to a course .
4827	Get course enrollment details .
4828	Checks if the user is active .
4829	Get the user s username .
4830	Get the grade for the given user .
4831	Get a course certificate .
4832	Creates a course discovery API client .
4833	Traverse a pagination and return the results .
4834	Get catalog data .
4835	Retrieve a list of courses for a given catalog .
4836	Get a list of catalogs .
4837	Returns a list of courses for a catalog .
4838	Get the course run and run it .
4839	Get details about a course .
4840	Get a program by its title .
4841	Get a program by uuid .
4842	Get program type by slug .
4843	Get the common course modes for the given course_id .
4844	Check if a course is in a catalog .
4845	Load data from a resource .
4846	Get the content metadata for the enterprise .
4847	Load data from a resource .
4848	Partition the content of a channel .
4849	Serialize channel metadata .
4850	Create a new ChannelMetadata .
4851	Update channel metadata .
4852	Deletes all channel metadata items .
4853	Return a list of ContentMetadataTransmissionTransmissionTransmissionTransmission objects .
4854	Create a new ContentMetadataItemTransmission
4855	Updates the transmission metadata .
4856	Delete all ContentMetadataItemTransmissionItems .
4857	Decorator for deprecated functions .
4858	Decorator to ignore warnings .
4859	Ensure that the user is authenticated .
4860	Decorator to force fresh session .
4861	Validate username .
4862	Save the course enrollment .
4863	Serializes an EnterpriseCustomerCatalog object into a JSON representation .
4864	Get the groups of the user .
4865	Validate username .
4866	Save the user .
4867	Convert an instance to an object .
4868	Serializes the course run run .
4869	Serializes a Program .
4870	Convert a list to a list .
4871	Creates a list of children .
4872	Convert the data into a list .
4873	Create a new enrollment .
4874	Validate user id .
4875	Validate user ID .
4876	Validate user email .
4877	Validate the course run run .
4878	Validate the data .
4879	Get paginated response .
4880	Create a switch .
4881	Delete the switch .
4882	Create a Switch
4883	Transmit data to SAP success .
4884	This method is called when the user is performed .
4885	Checks if the request is authorized .
4886	Update the throttle scope .
4887	Get the price for the course .
4888	Update the courses in the course .
4889	Update a course .
4890	Update course run_runs
4891	Export the course .
4892	Return a list of LearnerDataTransmissionAuditAuditAuditAuditAuditAuditAuditAuditAudit .
4893	Collects the certificate data for the enrollment .
4894	Collect grades data for a course .
4895	Get the id of an enterprise user .
4896	Returns the user s identity for the given object .
4897	Return the duration of a course .
4898	Remove items from failed_items .
4899	Parse an enterprise customer .
4900	Handle the xapi configuration .
4901	Returns a list of CourseEnrollments for the given enterprise .
4902	Display a course modal .
4903	Return a link to a modal .
4904	Populate data sharing .
4905	Create a course completion .
4906	Deletes the completion status .
4907	Synchronously synchronously synchronously synchronously synchronously .
4908	Perform a POST request .
4909	Perform a DELETE request .
4910	Create a session .
4911	Ensure that the response is not found .
4912	Determine if the user has content items .
4913	Returns a list of courses .
4914	Handle a course enrollment .
4915	Return a list of users that have access to the given request .
4916	List entitlements .
4917	Determine if the user is contained in the course .
4918	Displays a course .
4919	Displays a course run .
4920	Displays a program .
4921	List all courses .
4922	Retrieves the data for the given catalog .
4923	Fetches a list of courses for a given enterprise .
4924	Get required params .
4925	Return a message for missing parameters .
4926	Transform content to title
4927	Transform the content into a description .
4928	Transform content to image url
4929	Transform the launch points into a list .
4930	Formats the course title .
4931	Transform the content into a description .
4932	Transforms a CourseSchedule object to a list of time .
4933	Get the content id for the given content .
4934	Convert datetime to epoch .
4935	Generate a dictionary of keys from a dictionary .
4936	Convert a timestamp to a format .
4937	Transform content to long description .
4938	Returns the full name of the image .
4939	Get a link by email .
4940	Link a user to a user .
4941	Unlink a user .
4942	Return the unique identifier for this user .
4943	Get the data sharing for a user .
4944	Gets the data sharing for a course .
4945	Gets a ProxyDataShare .
4946	Send a course enrollment statement .
4947	Send a course completion statement .
4948	Export content metadata .
4949	Transform an item into a dictionary .
4950	Get a record for a user .
4951	Get required parameters .
4952	Return a response response .
4953	Initialize the user .
4954	Disconnects the post_save_post_post_post_post_POST_POST_POST_POST_POST_POST_POST_Migrations .
4955	Returns an Agent object for the given username .
4956	Create a new Activity object .
4957	Parse a CSV file .
4958	Validate an email to an email .
4959	Get a set of course runs from a program .
4960	Get earliest start date from a program .
4961	Return a paginated list of objects .
4962	Clean email or email address .
4963	Validate the course .
4964	Validate the program .
4965	Clean up the notification .
4966	Validates the form data .
4967	Validate the course .
4968	Validate the program .
4969	Return a list of available catalog options .
4970	Cleans up the data .
4971	Validates the identity provider .
4972	Cleans up the data for the customer .
4973	Clean up the channel_worker_username .
4974	Verify that all available methods are available .
4975	Get global context .
4976	Render a page with an error message .
4977	Determine if the given course id exists .
4978	Get the context of a course .
4979	Perform a POST request .
4980	Returns the course mode for a course .
4981	Set the final prices .
4982	Get the available course modes for the given course run .
4983	Retrieves the course .
4984	Extend a course .
4985	Displays a program .
4986	Get path variables .
4987	Get the course run id for a given user .
4988	Determine if the user is eligible for the user .
4989	Redirect to the view .
4990	Get the course run .
4991	Handle a course run .
4992	Send content metadata to the integrated channel .
4993	Translates the learner data .
4994	Remove inactive learners .
4995	Called when a user is created .
4996	Set default content filter .
4997	Assigns an enterprise learner role .
4998	Deletes an enterprise learner role .
4999	Decorator for creating an enterprise customer .
5000	Ensure that the given request parameter is valid .
5001	Retrieves a list of users in the database .
5002	Assign an enterprise role to the user .
5003	Assign an enterprise role to the user .
5004	Send data to DegreedLearner .
5005	Get the customer customer for the given pipeline .
5006	Handle an enterprise log registration .
5007	Get the user s social auth .
5008	Create a session .
5009	Create a course completion status .
5010	Perform a POST request .
5011	Perform a POST request .
5012	Gets the list of inactive learners .
5013	Call this method to get all the inactive learners .
5014	Filter the queryset .
5015	Filter the queryset .
5016	Transmit a serialized learner data .
5017	Handle completion error message .
5018	Add missing price information .
5019	Validate image extension .
5020	Validate the image size .
5021	Get the enterprise customer_id from the catalog .
5022	Initialize the application .
5023	Get the integrated channels .
5024	Get an enterprise customer .
5025	Get channel classes .
5026	Get the result of a course .
5027	Get requirements from a file .
5028	Transmitter data .
5029	Send the content of the given user .
5030	Return a list of learner data records for the learner .
5031	Displays an email notification template .
5032	Build admin context .
5033	Respond to the template .
5034	Returns a paginated list of learners .
5035	Returns a queryset queryset queryset .
5036	Handle a single email .
5037	Handle bulk upload .
5038	Ensure a user is enrolled .
5039	Check if a user is enrolled .
5040	Get a list of users by email addresses .
5041	Ensure all users in a course .
5042	Ensure all users in a course .
5043	Send messages to HTTP request .
5044	Triggers the programlearners .
5045	Return an error message for a user .
5046	Enroll all users in a course .
5047	Render the model .
5048	Deletes a user .
5049	Returns a proxy for the given course .
5050	Create a proxy consent object from a list of children .
5051	Creates a new proxy .
5052	Gets the grade grades for the given enterprise .
5053	Prefetch users from persistent course grades .
5054	Returns the identity provider for the given id .
5055	Returns a list of idp choices for the user .
5056	Returns the URL of the catalog admin admin .
5057	Build the email message .
5058	Returns the email subject for the given course .
5059	Send email notification message .
5060	Retrieves an enterprise customer .
5061	Get the enterprise customer for the given user .
5062	Retrieves the user for the given user .
5063	Gets the URL for the course track .
5064	Update query parameters .
5065	Filter the course_mode_mode of the course_mode .
5066	Retrieves an enterprise customer .
5067	Get cache key .
5068	Traverse a pagination response .
5069	Return a string with min_val and max_val .
5070	Format a price .
5071	Returns the configuration value for the given site .
5072	Get the value of a configuration value .
5073	Get request value from request .
5074	Track an enrollment .
5075	Determine if the course run is enrollable .
5076	Checks if a course run is upgraded .
5077	Calculate the closest course run .
5078	Get the current course run .
5079	Strip HTML tags .
5080	Parse a course_id .
5081	Returns a RemoteLRS instance .
5082	Saves a statement .
5083	Get the learner data for the learner .
5084	Unlink the user slearners .
5085	Checks if the user is implicit .
5086	Checks if the given user is implicit .
5087	Checks if the user is implicit access to the given user .
5088	Returns the URL for the Ecommerce coupon .
5089	Drop the historical table .
5090	Export selected objects as CSV .
5091	Return a action to clear the selected objects .
5092	Login to the user
5093	Refresh all robots
5094	Refresh all robots
5095	Download an image from a URL .
5096	Refresh persistent maps
5097	Calculate the distance between two latitudes .
5098	Convert graph to dict
5099	Convert a matrix to a dictionary .
5100	Convert a dict to a dictionary .
5101	Convert adjacency to graph .
5102	Returns a list of edge type matching the given type .
5103	Draw a graph .
5104	Generate a set of lines for each line .
5105	Calculate a random value for a given rate .
5106	Return the color of the current color .
5107	Fetch data from data
5108	Returns the next event description .
5109	Sets the number of servers .
5110	Simulate simulation .
5111	Returns a list of queues for a given edge .
5112	Draw the simulation .
5113	Clear all agents .
5114	Clear all data from queue .
5115	Return a copy of this Queue .
5116	Draw the graph .
5117	Get agent data .
5118	Fetch data from queue
5119	Initialize the queue .
5120	Return the next event description .
5121	Reset all colors in the graph .
5122	Set the transition matrix .
5123	Show the active graph .
5124	Show the given edge type .
5125	Simulate the queue .
5126	Start collecting data .
5127	Stop all queues .
5128	Return the transitions of the graph .
5129	Return the size of the given string .
5130	Find the first sibling of the given S .
5131	Adds a cluster to the cluster .
5132	Generate a random transition matrix .
5133	Generate a random graph .
5134	Generate a random graph .
5135	Create a new graph with a random graph .
5136	Return a generator of class traits .
5137	Add a new line .
5138	Process a file .
5139	Process a token .
5140	Create a non - comment block .
5141	Add a new comment .
5142	Make the index of the index .
5143	Search for comment .
5144	Load configuration block .
5145	Merge a list of templates .
5146	Render the rendered data .
5147	Generate a zip file .
5148	Write a tar archive to a file .
5149	Add a file to the tar archive .
5150	Parses the contents of this object .
5151	Merges a template into a template .
5152	Merge two lists .
5153	Evaluate variables .
5154	Get a copy of a dict .
5155	Convert an item to an object .
5156	Get install context
5157	Add install script .
5158	Add uninstall command .
5159	Add a script to the script .
5160	Render the template .
5161	Return a list of IP addresses .
5162	Convert an interface to an interface .
5163	Remove the address from the address .
5164	Convert an interface to an interface .
5165	Extracts the interface from an interface .
5166	Extract the DNS server s DNS servers .
5167	Return the DNS search for the given address .
5168	Determine the radio mode .
5169	Returns the network protocol protocol for the radio device .
5170	Get channel width .
5171	Create a new client .
5172	Create a list of files for the client .
5173	Get install requirements .
5174	Returns a list of events .
5175	Returns a list of facts .
5176	Get a single fact .
5177	Retrieve a list of resources .
5178	Get a resource .
5179	Returns a list of reports for the certificate .
5180	Returns the base URL for this request .
5181	Returns the URL for the given endpoint .
5182	Return a list of all the nodes in the cluster .
5183	Get a node by name .
5184	Iterate over all edges in the graph .
5185	Return the catalog for the given node .
5186	Aggregate event counts .
5187	Get inventory information .
5188	Connect to a server .
5189	Main entry point .
5190	Send a command to the master .
5191	Send a command to the master .
5192	Send a command to the master .
5193	Send a command to the master .
5194	Process the given values .
5195	Main entry point .
5196	Configure the stack .
5197	Configure the database .
5198	Get the application IIN .
5199	Process a point value .
5200	Select a command .
5201	Operate a command .
5202	Create a connection .
5203	Delete connection .
5204	Parse the markdown file .
5205	Return a list of elements in a list .
5206	Return a pandas DataFrame .
5207	Convert dataframe to a DataFrame .
5208	Format Interraday data .
5209	Return a string describing the info about the tickers .
5210	Load reference data from database .
5211	Load block data .
5212	Return a DataFrame for a benchmark .
5213	Return a pandas dataframe .
5214	Return a pandas dataframe .
5215	Return the active futures for the given ticker .
5216	Convert a date ticker to a string .
5217	Calculate the hours for the given tickers .
5218	Returns the histogram for the given ticker .
5219	Return the reference file for a given ticker .
5220	Save an intraday to a histogram .
5221	Return the exchange information for the exchange .
5222	Get the market information for the market
5223	Returns the currency pair for the given currency .
5224	Get the market time for the given ticker .
5225	Flatten an iterable .
5226	Convert iterable to a generator .
5227	Convert a dict to a string .
5228	Load the market data
5229	Load YAML file .
5230	Convert a number to a time .
5231	Create a folder .
5232	Returns a list of all files in the given path .
5233	Returns a list of all folders in the given path .
5234	Sort files by modified .
5235	Filter files by dates .
5236	Get the timestamp of a file .
5237	Return a new Interval instance .
5238	Shift a start time
5239	Open a market open session .
5240	Return the market close .
5241	Returns a session for the given session .
5242	Returns a session for a given session .
5243	Convert datetime to a timestamp .
5244	Return a string representation of the missing information .
5245	Return the number of missing files .
5246	Update missing data .
5247	Convert a function to a public function .
5248	Send a custom request
5249	Open a BConker .
5250	Start the session .
5251	Initialize the services .
5252	Returns a list of events for a given ticker .
5253	Assemble a single instruction .
5254	Yields all instructions from an ASM code .
5255	Disassemble an instruction .
5256	Yields all instructions from a bytecode .
5257	Returns the fork name for the given block number .
5258	Parse the operand .
5259	Adjust the delay .
5260	Returns the number of members in the context .
5261	Parse a report item .
5262	Convert a string to camelcase .
5263	Capitalize a string .
5264	Convert string to snakecase .
5265	Convert a string to a snake case .
5266	Convert a string to a sentence .
5267	Convert a string to snakecase .
5268	Check if input is a string
5269	Set the generalized identifier for the given node .
5270	Returns the index of the word start index .
5271	Finds a list of word ids .
5272	Finds the deepest node in the given node .
5273	Gets the list of word start positions .
5274	Return the index of the given y .
5275	Return the label of a node .
5276	Generator generator generator generator .
5277	Checks if the given index is equal to the given index .
5278	Create a graph of constraints for each constraint .
5279	Create a PMML pipeline .
5280	Convert a pipeline to pmml .
5281	Convert a tpotl config to a dictionary .
5282	Constructs the formset .
5283	Returns the URL of the success URL .
5284	Validate the form set .
5285	Render the form set .
5286	Validate the form set .
5287	Constructs the formset .
5288	Check if form is valid
5289	Displays invalid forms .
5290	Construct inline forms .
5291	Render the form .
5292	Validate the object .
5293	Return the context data .
5294	Get query parameters for a given field .
5295	Returns the start date for the given object .
5296	Get the end date of the object
5297	Returns the first day of the week .
5298	Gets the queryset for this calendar .
5299	Returns the data for the calendar view .
5300	Generate a new colorful color .
5301	Parse a file .
5302	Parse rgb file
5303	Parse a JSON color file .
5304	Sanitizes a color palette .
5305	Determine if the environment supports colors .
5306	Convert RGB color to RGB .
5307	Convert RGB color to ANSI .
5308	Convert hexadecimal string to RGB .
5309	Validate hex string .
5310	Translate a color to ansi code
5311	Translate a color to ansi code
5312	Convert modifiers to ANSI code .
5313	Translate a style .
5314	Styles a string .
5315	Set the color palette .
5316	Setup the color palette .
5317	Use this function to set the colorpalette .
5318	Formats a string .
5319	Read an attribute from a path .
5320	Find the port number .
5321	Get the device data .
5322	Get the humidity of the sensor
5323	Read data from the device .
5324	Read a file from a URI .
5325	Return the size of the given object .
5326	Creates an ARRAY .
5327	Gets the sha data from the repository .
5328	Get a list of UUIDs from a profile name .
5329	Get raw data
5330	Merge identities .
5331	Get enriched data .
5332	Create a list of panels
5333	Configure logging .
5334	Returns a parser for the parameters .
5335	Get task parameters .
5336	Get the Kibiter version of the Elasticsearch API .
5337	Create a dashboard .
5338	Upload a dashboard title .
5339	Create a dashboard menu .
5340	Remove the dashboard menu .
5341	Get menu entries .
5342	Get the dashboard menu .
5343	Compose a list of mailing lists .
5344	Compose git repositories .
5345	Compose git repositories .
5346	Compose the list of maillists .
5347	Create a list of projects from data .
5348	Compose a list of bugzilla projects .
5349	Compose project title .
5350	Compose project json .
5351	Auto - refresh the areas of the study .
5352	Execute the study .
5353	Retrieve all identities in the database .
5354	Return a list of repositories for a given backend .
5355	Convert an eclipse project to a dictionary .
5356	Set a configuration parameter .
5357	Add new configuration to the configuration .
5358	Get the version of the Elasticsearch version .
5359	Execute nonstop tasks .
5360	Execute a batch of tasks .
5361	Execute initial load .
5362	Validate the configuration .
5363	Return the stdout of the stream .
5364	Return the stderr of the stream .
5365	Format a log record .
5366	Replace output with stdout .
5367	Convert a list of intervals to a string .
5368	Gets the storage service .
5369	Check if an error is retry .
5370	Load a file from GCS file .
5371	Load a file .
5372	Check if a file exists in GCS .
5373	Check if a file exists .
5374	Check if a prefix exists in GCS .
5375	Check if a file pattern exists in GCS .
5376	Return True if the outputs are present .
5377	Build pipeline file parameter .
5378	Build pipeline command .
5379	Build a pipeline .
5380	Build pipeline arguments .
5381	Convert datetime to UTC .
5382	Build a pipeline request .
5383	Delete a list of tasks .
5384	Return the status of the operation .
5385	Gets the value of the operation input field values .
5386	Format task name .
5387	Convert suffix to docker_chars .
5388	Return the sort function for the task .
5389	Checks if the given datetime is in a range .
5390	Get task from task directory .
5391	Delocalize logging command .
5392	Returns the directory for the task .
5393	Generate the environment variables .
5394	Builds a command for the input directory .
5395	Returns the path to the input file path .
5396	Builds the command line for the input files .
5397	Delocalize output files .
5398	Get the dsub version of dsub_version file .
5399	Returns a sorted list of events that match the given image .
5400	Map the event to the event .
5401	Get the environment variables for the given URI .
5402	Get the environment variables .
5403	Returns a dictionary containing the environment variables .
5404	Get the environment variables for the given outputs .
5405	Build user environment variables .
5406	Creates a list of actions for the given mount .
5407	Return the status of the operation .
5408	Return the status of the operation .
5409	Validate the RAM .
5410	Build the machine type .
5411	Build a new machine .
5412	Build an action .
5413	Lookup a list of job tasks .
5414	Return a job provider .
5415	Parse arguments .
5416	Get dstat provider arguments .
5417	Format a task URI .
5418	Formats the URI for the given URI .
5419	Parse arguments .
5420	Get job resources .
5421	Get job metadata .
5422	Resolve task logging .
5423	Wait for all jobs to be executed .
5424	Wait for a job .
5425	Return a list of tasks for the given jobs .
5426	Group tasks by jobid
5427	Waits for the given job_ids .
5428	Validate job arguments .
5429	Return the name of the command .
5430	Rewrite a local URI to a local URI .
5431	Get a set of mount_param_param_type
5432	Build a LoggingParam from a URI .
5433	Split a pair of pairs .
5434	Parse tasks file header .
5435	Returns a list of task descriptors .
5436	Parse a list of labels .
5437	Convert args to job params
5438	Validate required arguments .
5439	Convert interval to seconds .
5440	Get the name of the variable .
5441	Rewrite raw uri .
5442	Parse a file provider URI .
5443	Validate paths .
5444	Parse a raw URI .
5445	Parse an image URI .
5446	Parse local mount URI .
5447	Parse GCS URI .
5448	Make a mount parameter .
5449	Validate a parameter name .
5450	Validate bucket name .
5451	Convert a string to a label .
5452	Ensure task params are complete .
5453	Remove empty items .
5454	Generator for task views .
5455	Convert a task_id to an integer .
5456	Validate label .
5457	Parse a YAML job .
5458	Create a job from a YAML string .
5459	Find a task descriptor by its ID .
5460	Get file environment variables .
5461	Get a set of fields and task parameters .
5462	Emits the search criteria .
5463	Deletes tasks from a provider .
5464	Get action by id
5465	Get action by name
5466	Get the environment s environment .
5467	Get the image image .
5468	Get a list of events for an operation .
5469	Get the last update time .
5470	Prepare summary table .
5471	Lookup a list of tasks for a given statuses .
5472	Prepare the output of the task .
5473	Trims the given value to a string .
5474	Formats a list of pairs .
5475	Create a string representation of a string .
5476	Get list of zone names from input_list
5477	Parse a RFC3939 string .
5478	Get the full job ID for the operation .
5479	Cancel a batch operation .
5480	Cancel a batch operation .
5481	Determine if an exception is retry .
5482	Tries to retry if an exception is raised .
5483	Setup a discovery service .
5484	Execute API .
5485	Evaluate arg_type .
5486	Respond to a JSON response .
5487	Send a request to the service .
5488	Return JSON representation of the error .
5489	Load configuration from a file .
5490	Discover configuration from config file .
5491	Create a config file .
5492	Write the configuration file .
5493	Validate config key .
5494	Expand all mentions in a string .
5495	Convert datetime to UTC .
5496	Create a new instance from a file .
5497	Load cache from cache .
5498	Check if url is cached
5499	Add tweets to cache
5500	Get a list of tweets for a given URL .
5501	Remove a URL from the cache .
5502	Return a list of tweets .
5503	Configure a config file .
5504	Return the relative date .
5505	Save a screenshot .
5506	Captures a screenshot .
5507	Get image name from url .
5508	Decorator for worker .
5509	Get the permissions for a given path .
5510	Release the number of releases .
5511	Register the memcached process .
5512	Connect to the FTP server .
5513	Get the number of bytes per second .
5514	Decorator to wrap a function .
5515	Set the current locale .
5516	Append data to the buffer .
5517	Set the limit .
5518	Create a new StreamThrottle instance .
5519	Append data to throttles .
5520	Checks that the received codes are valid .
5521	Parse a directory response .
5522	Parse a list of windows .
5523	Upload a stream to the server .
5524	Calculate jenks breaks .
5525	Grab the image from the window .
5526	Grab the contents of a file .
5527	Return the version of the backend .
5528	Open a Mapchete .
5529	Returns the zoom level for the given process .
5530	Run the process worker .
5531	Get all tiles in the pyramid .
5532	Perform batch processing .
5533	Run batch processor .
5534	Execute the process .
5535	Read data from the output .
5536	Write data to the output .
5537	Get the raw output of a tile .
5538	Extract data from the input data .
5539	Read the data from the tile .
5540	Open input file .
5541	Calculate the hillshade .
5542	Extracts the contours of the tile .
5543	Clip an array .
5544	Clip an array with the given geometry .
5545	Convert a raster to a pyramid .
5546	Convert the input file to a pyramid .
5547	Returns the zoom level for the given input .
5548	Validate config values .
5549	Return the hash of a string .
5550	Gets the zoom levels .
5551	Snapshot bounds .
5552	Clip the bounds of bounds .
5553	Validate zooms .
5554	Return the raw params for the given zoom .
5555	Get the element at the given zoom .
5556	Filter element by zoom
5557	Remove the zoom level from the input string .
5558	Flatten a tree .
5559	Unflatten a nested tree .
5560	Get the bounds of the image .
5561	Returns the bounding box .
5562	Calculate the effective bounds .
5563	Return the output of the output .
5564	Loads the input stream .
5565	Get the base levels .
5566	Get params for a given zoom level .
5567	Calculate the area of the current process .
5568	Return the bounds of the area at the given zoom .
5569	Generate the index for the zoom index .
5570	Return the profiled profile .
5571	Compute the DEM .
5572	Validate the given configuration .
5573	Read data from cache .
5574	Return a list of available output formats .
5575	Return a list of available input formats .
5576	Load the output writer .
5577	Loads the input reader from a map .
5578	Get the driver from a file .
5579	Write the metadata to the output file .
5580	Extracts the contours of a tile .
5581	Gets the contour values of the contour .
5582	Creates a map of maps .
5583	Returns the path to the tile .
5584	Prepare the path for the tile .
5585	Check if the output data is valid .
5586	Cleans the input data .
5587	Extracts a subset of tiles from the tile .
5588	Calculate the slope of elevation .
5589	Compute the hillshade from a tile .
5590	Get tile from tile .
5591	Generate tiles from bounds .
5592	Generate tiles from a bounding box .
5593	Generate tiles from a geometry .
5594	Return a list of tiles intersecting the tile .
5595	Return a dictionary representation of this tile .
5596	Return a list of tile neighbors .
5597	Check if the tile is on the tile .
5598	Execute an Raster .
5599	Create an InputTile object .
5600	Generate a PNG file .
5601	Serve an application .
5602	Create a Flask app .
5603	Read raster window .
5604	Read an array of data from a file .
5605	Write a raster window to a file .
5606	Extract data from an array .
5607	Resample data from an array .
5608	Convert bounds to Ranges .
5609	Convert tiles to an Affine shape .
5610	Determine if the tiles should be shifted .
5611	Create a memory file .
5612	Prepare an array .
5613	Recursively reprocess a geometry .
5614	Segment a polygon .
5615	Read a vector from a list of files .
5616	Write a vector to a vector .
5617	Convert a geometry type to a target type .
5618	Convert multipart geometry to singleparts .
5619	Execute a tile .
5620	Get the best zoom level for a file .
5621	Convert tile to zoom level .
5622	Check if path is remote .
5623	Check if path exists .
5624	Return absolute path .
5625	Return relative path .
5626	Write json to a file
5627	Read a JSON file .
5628	Decorator to add a hook .
5629	Returns the digest of the request .
5630	Post receive event .
5631	Return the long description of the command .
5632	Unind a list of lines .
5633	Find all sections in a list of lines .
5634	Given a list of sections return a list of references .
5635	Convert a docstring into a docstring .
5636	Convert a module into a dict .
5637	Returns the largest distance between this profile .
5638	Compute the temporal distance between the profiles .
5639	Compute the density of the temporal distance between two points .
5640	Removes all trips from the given center .
5641	Removes all trips from the trip .
5642	Compute the pseudo connections for a given walk .
5643	Get the minimum visit time .
5644	Check if the given event isinfected .
5645	Creates a list of all trips .
5646	Create a colorbar .
5647	Write temporal network networks by route type .
5648	Write the edges to a file .
5649	Write gtfs to a file .
5650	Removes indices from the DataFrame
5651	Iterate over the footpaths for the given connection .
5652	Create a temporary file .
5653	Execute a command .
5654	Makes a path to a directory .
5655	Finalize the stop profiles .
5656	Validate the date start time .
5657	Main function for creating views .
5658	Validate that no values are not null .
5659	Validate DANGers .
5660	Print a list of coordinates .
5661	Find segment segments .
5662	Return a list of segments .
5663	Return a list of stop points for a route
5664	Interpolate shapes of shape_distances .
5665	Evaluate the earliest arrival time at the given time .
5666	Run the spreader .
5667	Add walk distance to the database .
5668	Create a network for a given route type .
5669	Return a MultiDiGraph for the given route type .
5670	Generate a temporal network network .
5671	Plot the temporal distance .
5672	Returns a list of transfer stops .
5673	Create an import from a directory .
5674	Get the main database path .
5675	Calculate the distance between two trips .
5676	Get the timezone name .
5677	Returns a list of trips for a given time range .
5678	Get the total stop count of all trips .
5679	Get all route shapes .
5680	Get the number of trips per day
5681	Gets the spread trips for the given location .
5682	Returns the closest stop of the given latitude .
5683	Checks if the trip is in the given day .
5684	Calculate day start time .
5685	Increment the day start time .
5686	Returns a list of possible dates for the given start time .
5687	Returns a list of stops for a given stop .
5688	Retrieves the events for a given route .
5689	Gets the start time range for the first day .
5690	Read data as a DataFrame .
5691	Check if the departure time is valid .
5692	Update a list of labels .
5693	Evaluate the given time .
5694	Create table .
5695	Import the table .
5696	Creates a copy of the source .
5697	Calculate the median of the given stops .
5698	Calculate the centroid of the given gtfs .
5699	Write stats to a file .
5700	Return the distribution of the given column .
5701	Calculate the time span for a feed .
5702	Return a pandas DataFrame for the route .
5703	Get the vehicle hours for a given route type .
5704	Scan the footpaths for the given stop_id .
5705	Timestamps a method .
5706	Validate form data .
5707	Get the form for the given form .
5708	Process the request .
5709	Redirect to the request .
5710	Get a profile by ID .
5711	Get the base path of a descriptor .
5712	Retrieve the data from the given descriptor .
5713	Check if a path is safe .
5714	Validate a zip file .
5715	Slugify foreign keys .
5716	Validate the package .
5717	Push data to the database .
5718	Pull data from a datapackage .
5719	Convert path to lowercase .
5720	Restore the path to the table .
5721	Convert a list of schemas into a dict .
5722	Restore all references in a resource .
5723	Convert the raw response to a buffer .
5724	Verify that the GDB process is valid .
5725	Write a command to the GDB .
5726	Get the response from the GDB server .
5727	Get a list of responses from the GDB process .
5728	Get a list of responses from the server .
5729	Main entry point .
5730	Read data from the buffer .
5731	Returns the next character in the past .
5732	Parse a GDB response .
5733	Parse the message and payload and payload .
5734	Get the message message and payload .
5735	Get the subscriber for the worker .
5736	Clean up worker .
5737	Get the shared subscription .
5738	Enqueue a function .
5739	Enqueue a task .
5740	Main entry point .
5741	Return the result of the task .
5742	Start a service .
5743	Update running processes .
5744	Runs the split process .
5745	Split a file into a file .
5746	Get an ASN ASN .
5747	Return the announce date for the given announce date .
5748	Returns a list of addresses for a given IP address .
5749	Aggregate a list of records from an IP address .
5750	Download a URL from a URL .
5751	Check if a file is downloaded .
5752	Convert a string to a boolean .
5753	Get page url .
5754	Generate a BootstrapPagination node .
5755	Get the regressions for a given package .
5756	Return the version of the given version .
5757	Get the homogeneous version of the package .
5758	Calculate the number of packages in the repository .
5759	Returns a list of job URLs for Jenkins .
5760	Configure the CI build files .
5761	Configure a CI job .
5762	Writes the script to the given script .
5763	Convert packages to topological order .
5764	Unarmor PEM data .
5765	Decrypt encrypted data .
5766	Setup EVP encryption .
5767	Parses RSA key blob .
5768	Extracts a private key from a private key blob .
5769	Load an encrypted key .
5770	Verify that the signature is valid .
5771	Verify that the signature is valid .
5772	Verify that the signature is valid .
5773	Sign a private key .
5774	Sign a private key .
5775	Encrypt a private key .
5776	Decrypts the data using the given private key .
5777	Encrypt and decrypts the encrypted data .
5778	Encrypts data using the given certificate .
5779	Decrypts a private key .
5780	Obtain credentials .
5781	Creates a list of buffers .
5782	Return True if the connection is read .
5783	Read bytes from the stream .
5784	Return True if the socket is open .
5785	Read bytes from the socket .
5786	Write data to the socket .
5787	Encrypt data using advapi .
5788	Encrypt data using AES encryption .
5789	Handle an error .
5790	Peek an error .
5791	Extract certificates from system .
5792	Called when a certificate is received .
5793	Get the details of a certificate .
5794	Extract the error from os . os . os . error .
5795	Convert a dictionary to a dictionary .
5796	Handle SSL error message .
5797	Get the description of a function .
5798	Find sections in the AST node .
5799	Recursively walk the AST nodes .
5800	Return the path to the system certificate .
5801	Extract certificates from the system .
5802	Convert a filetime to a timestamp .
5803	Extract the chain of certificates from the server .
5804	Detect client authentication request .
5805	Extracts the length of the DH parameters from the server .
5806	Parse an alert message .
5807	Parse session info .
5808	Parse TLS records .
5809	Parse handshake messages .
5810	Parses a hello message .
5811	Raise a TLS certificate .
5812	Raises an exception if the certificate is expired .
5813	Determine if the server is a HTTP protocol .
5814	Try to decode a byte string .
5815	Read data from socket .
5816	Read remaining bytes from socket .
5817	Write data to socket .
5818	Return a path to a certificate .
5819	Map OIDs to a set of OIDs .
5820	Check if a CA path is updated .
5821	Return the version of the service .
5822	Create a new VCL .
5823	Return a dictionary representation of this object .
5824	Add a descriptor .
5825	Perform a PATCH request .
5826	Validate the search query .
5827	Execute a dataset search query .
5828	Perform a PIF multi search request .
5829	Check if the response is a rate limit .
5830	Create a new data view .
5831	Update a dataview .
5832	Get data view .
5833	Create a new ML configuration from a dataset .
5834	Create a new ML configuration .
5835	Convert a response into a DataViewBuilder .
5836	Get the status of a job .
5837	Create a Tsne object for the given data view .
5838	Retrieve data from data view .
5839	Submit a prediction request .
5840	Check the status of a prediction .
5841	Submit a design run .
5842	Get the status of a design run .
5843	Get design results for a design view .
5844	Get data view .
5845	Kill a design run .
5846	Load a yaml file .
5847	Load credentials from a file .
5848	Get the preferred credentials for the site .
5849	List files in a dataset .
5850	Return the number of files in a dataset .
5851	Get a list of files matching the given glob .
5852	Get a dataset from a dataset .
5853	Retrieve a PIF from a dataset .
5854	Create a dataset .
5855	Update a dataset .
5856	Create a new dataset version .
5857	Get available columns .
5858	Generate a search template .
5859	Prune a search template .
5860	Convert obj to camelCase
5861	Convert keys to camelCase
5862	Validate aML template .
5863	Add a course course .
5864	Remove a course .
5865	Check if a course key is valid .
5866	Check if organization data is valid .
5867	Inactivate the organization .
5868	Activate an organization course .
5869	Inactivate an organization course .
5870	Fetches a list of organizations .
5871	Fetch all organizations for a given course .
5872	Serialize an organization .
5873	Deserialize an organization .
5874	Check if the image is valid .
5875	Returns a list of images that match the image .
5876	Check if link tag is present
5877	Get a local image
5878	Get video from node
5879	Store an image to a local file .
5880	Returns a list of paragraphs that are siblings of the text .
5881	Checks if a link is highlink .
5882	Returns a list of nodes that match the given docs .
5883	Parses the content of the article .
5884	Get the title of the article .
5885	Get canonical link .
5886	Close the network .
5887	Extracts a crawler from a URL .
5888	Crawl a crawler .
5889	Convert string to unicode .
5890	Convert string to unicode .
5891	Convert string to string .
5892	Returns a list of urls .
5893	Handle upload .
5894	Render a value .
5895	Create a rich text field .
5896	Render the toolbar .
5897	Get meta image url .
5898	Check if the logfile is successful .
5899	Try to find a double precision .
5900	Return the commandline .
5901	Execute MPI command .
5902	Start smd .
5903	Return a list of files in the given prefix .
5904	%prog grompp
5905	Return a string containing the path to include directories .
5906	Create a protobuf file .
5907	Edit txt file .
5908	Create a new NDX command .
5909	Parse NDX group output .
5910	Delete all frames
5911	Get the gmx resid for a given resid .
5912	Combine the index files .
5913	Concatenate qx .
5914	Process a command .
5915	Process a range .
5916	Translate a residue into a dictionary .
5917	Checks that the output is valid .
5918	Return the path to a file .
5919	Fit the trajectory to the trajectory .
5920	Fit the model .
5921	Strips the transformation of the model .
5922	Create a logger .
5923	Get the configuration from the given filename .
5924	Setup the configuration file .
5925	Check if setup is setup
5926	Get tool names .
5927	Returns the configuration .
5928	Returns the path to the given section .
5929	Returns the level of the given section .
5930	Convert a filename to a filename .
5931	Scale dihedrals
5932	Scale the impropers of a molecule .
5933	Convert x to unicode
5934	Convert an array to an int64 .
5935	Convert a recarray array to Python types .
5936	Parse a color specification .
5937	Transform arguments into a list of options .
5938	Print help message .
5939	Convert arguments to a dictionary .
5940	Build a list of arguments .
5941	Transform arguments .
5942	Gets the docstring for the GMX file .
5943	Convert string to numpy array .
5944	Return True if obj is a stream .
5945	Convert an amino acid code to an amino acid code .
5946	Context manager .
5947	Unlink a file .
5948	Remove legend .
5949	Returns the filename of the file .
5950	Check if a file exists .
5951	Return a string representation of this time .
5952	Start logging .
5953	Stop logging .
5954	Create a new tool .
5955	Find all executables in a path .
5956	Load v4 tools .
5957	Merge ndx files .
5958	Break an array of arrays .
5959	Return a masked array representing the mask .
5960	Return a collection of timeseries .
5961	Set correlation parameters .
5962	Parse the file .
5963	Plot the data .
5964	Build the topology .
5965	Create the main index file .
5966	Get the vdwrad radii file .
5967	Calculate a solver .
5968	Compute the energy of a structure .
5969	Schedule an emitter .
5970	Create a new MDM for the MDM model .
5971	Setup MD5 .
5972	Generate a list of submission scripts .
5973	Generate a submit array for the given templates .
5974	Checks if the script name is a valid script .
5975	Convert an atom to an atom .
5976	Returns the total number of pixels from a mask .
5977	Given a shape_scale_scale_radius_scale_scale_scale_radius_scale_scale_scale_scale_radius_radius_radius_radius_radius_radius_radius_scale_radius_scale_radius_scale_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_radius_
5978	Creates a blurring mask from a mask .
5979	Get edge pixels from a mask .
5980	Converts a mask into a masked array .
5981	Setup the figure .
5982	Output a figure .
5983	Output a subplot array .
5984	Generate image tag tag tag .
5985	Generate a tag tag for a given shape .
5986	Return the tag tag tag for align_bulge .
5987	Checks if a plane is in the next plane .
5988	Get the scaled deflection stack from a plane .
5989	Convert a grid to a grid .
5990	Calculate the regularization matrix for the given pixel neighbors .
5991	Calculate the weighted regularization matrix for a pixel .
5992	Creates a plot of an array .
5993	Calculate the minimum and max_max .
5994	Set the colorbar .
5995	Plot a mask .
5996	Plot border .
5997	Plot the points in the given array .
5998	Plot a grid .
5999	Calculate the mapping for the grid .
6000	Convert pixels to regular expression .
6001	Convert a set of pixels to a list of pixels .
6002	Convert a grid to pixel coordinates .
6003	Convert a sub - grid to pixel coordinates .
6004	Sets the random seed .
6005	Generate a poisson noise .
6006	Load cd data from a fits file .
6007	Load an image from a file .
6008	Load noise map .
6009	Load the background noise map .
6010	Load poisson noise map .
6011	Load PSF from a PSF file .
6012	Loads an exposure time map from an exposure time .
6013	Load the background pixels from the input image .
6014	Load positions from a file .
6015	Write positions to a file .
6016	Convert image to noise map .
6017	Convert absolute signal to noise map .
6018	Create a NoiseMap from a weight map .
6019	Create a NoiseMap from an inverse noise map .
6020	Simulate a PSF .
6021	Create PSF PSF .
6022	Create a new instance from a file .
6023	Return a PSF instance with a new PSF .
6024	Convenience function for convolution .
6025	Create a geometry from a grid .
6026	Create a geometry from a grid .
6027	Calculate Voronoi from pixels .
6028	Get the neighbors of a pixelization .
6029	Set the labels for the plot .
6030	Decorator for grid interpolation .
6031	Return the blurred image of a PSF image .
6032	Create a grid stack from a mask .
6033	Create a grid stack from a shape_scale .
6034	Create a padded grid stack from a mask .
6035	Maps a function to a GridStackStack .
6036	Convert an array to a 2D array .
6037	Convert an array to a scaled array .
6038	Yield the y - axis of the data .
6039	Returns a list of the x - axis indices .
6040	Compute regular data from a subarray .
6041	Convert a sparse grid to a sparse array .
6042	Convert sparse grid to unmasked sparse .
6043	Convert the sparse matrix to sparse .
6044	Create a padded grid from a shape_shape .
6045	Convert a padded image into a blurred image .
6046	Convert an array to an array .
6047	Convert an array to a 2D array .
6048	Return a new instance of a gridstack .
6049	Set the default values for a galaxy .
6050	Run the optimizer .
6051	Convert an array to a masked array .
6052	Convert a sparse sparse sparse grid to a sparse array .
6053	Converts a mask to a sparse array .
6054	Convert a sparse array to a sparse array .
6055	Converts a sparse grid to a sparse grid .
6056	Extract an array of arrays from a 2D array .
6057	Resizes an array of arrays to a new array .
6058	Convert an array of arrays to bin .
6059	Convert numpy array to a file .
6060	Return numpy array of numpy array .
6061	Compute the convolution matrix .
6062	Calculate the mass within a circle .
6063	Calculate the mass within a given axis .
6064	Calculates the massintegral of a given axis .
6065	Calculate the density of the mass of the circle in the circle .
6066	Rescaled radius .
6067	Compute the convergence of a grid .
6068	Calculate the integration of a grid .
6069	Returns the intensity of a given radius .
6070	Calculate the Sersic constant .
6071	Calculate the luminosity of a circle .
6072	Calculate the luminosity of an ellipse .
6073	Returns the number of mass within a circle .
6074	Calculate the mass of the mass within a given axis .
6075	Return the einstein radius of the mass profile .
6076	Return the einstein mass of the mass profile .
6077	Calculate the hyper - noise of the given contributions .
6078	Convenience function for convolution .
6079	Compute the intensities of a grid .
6080	Calculate the convergence of a grid .
6081	Compute the potential potential of a grid .
6082	Calculate the deflections of a grid .
6083	Compute the deflections of a subgrid .
6084	Calculates the blurred image of a single image .
6085	Return the unmasked image of a masked grid .
6086	Return an unmasked image of a masked grid .
6087	Return a list of contributions for a hypermodel image .
6088	Calculate the scaled noise map for a given contribution .
6089	Creates a new LensInversion fit for the given data .
6090	Decorator to transform a grid .
6091	Add a function to the cache .
6092	Calculate the cosians from the x axis .
6093	Calculate the angle of a grid .
6094	Calculate the mapping from sub_to_pixels .
6095	Calculate the voronoi from a grid .
6096	Calculate the voroi from a sub - grid .
6097	Calculate the luminosity of a given radius .
6098	Calculate the luminosity of the given axis .
6099	Calculates the luminosity of an image .
6100	Computes the intensities of a grid .
6101	Compute the intensities of a grid .
6102	Compute intensities from grid radii .
6103	Returns a list of luminosity of all galaxies in a circle .
6104	Return the luminosity of the galaxies in the given axis .
6105	Returns the masses of the galaxies in the given radius .
6106	Returns the masses of the galaxies within the given axis .
6107	Transform the grid to the next plane .
6108	Returns the y - axis of the grid .
6109	Returns the x - axis of the grid .
6110	Return an unmasked image from a PSF image .
6111	Return the trace to the next plane .
6112	Creates a new scalar with the given value .
6113	Return a new scaled array with the given mask .
6114	Creates a new scaled array from an array .
6115	Fit lens data using Sensitivity .
6116	Create an unmasked mask for a given shape .
6117	Create a mask from a shape .
6118	Creates a circular circular image .
6119	Creates a mask from an image .
6120	Creates a mask from a shape .
6121	Creates a mask from an elliptical shape .
6122	Return the zoom region of this region .
6123	Return a galaxy instance for the given arguments .
6124	Return a new model with the given arguments .
6125	Plot an image .
6126	Normalize the given path to a relative path .
6127	Return True if filename is contained in a directory .
6128	Return the backend object .
6129	Builds a Sdist .
6130	Perform a GET request .
6131	Convert a tar file to a video .
6132	Return a JSON representation of this object .
6133	Create a new line from a string .
6134	Create a new instance from a file .
6135	Fix the docs for the given class .
6136	Add model string to file .
6137	Add a model to the model .
6138	Set the default simulation parameter .
6139	Returns True if the simulation is running .
6140	Wait until the simulation is stopped .
6141	Check if the input device is valid .
6142	Add samples to the data .
6143	Add samples to the sample
6144	Called when the DSP is triggered .
6145	Called when the dsp_toc_callback is called .
6146	Calculate IIR .
6147	Calculate the frequency of a signal .
6148	Given a list of roots return a list of cpx roots .
6149	Calculate a firwin signal .
6150	Calculate the wavez filter .
6151	Calculate the frequency of the wavez filter .
6152	Calculate the wavez filter .
6153	Calculate the firz filter .
6154	Calculate the position of the center of the camera .
6155	Convenience function to control a controller .
6156	%prog sampler
6157	Create a FIR header .
6158	Calculate FIR coefficients .
6159	Create IIOS filter header .
6160	Create a plot plot plot .
6161	Convert x to a scatter .
6162	Generate MPSK .
6163	r Compute QPSK
6164	r Compute the inverse of a set of parameters
6165	r Compute sqrt .
6166	Calculate the PSD .
6167	Convert data to int
6168	Convert bin_array to integer .
6169	Filter x .
6170	Filters a set of samples in a signal .
6171	Calculate the frequencies for the SOS
6172	Return the lock manager .
6173	Decorator to wrap a single instance .
6174	Reset the lock .
6175	Initialize the application .
6176	Iterate over a number of chunks .
6177	Reduce an array of chunks .
6178	Map a function to an array .
6179	Merge a list of times .
6180	Merge two arrays .
6181	Load PSF file .
6182	Return the hash of this object .
6183	Check if git path is valid .
6184	Get the current git version .
6185	Check the status of a git repository .
6186	Get last commit line .
6187	Get the last commit ID .
6188	Print a summary of the commit .
6189	Calculate Fromo Fromo Fromo FAT
6190	Sets the model parameters .
6191	Return the volume of this mesh .
6192	Generate a random particle
6193	Add a list of particles
6194	Get datafile from a hash .
6195	Get the random state of a group .
6196	Computes the compact name of this object .
6197	Return a dictionary of parameters .
6198	Print the sizes .
6199	Simulate the diffusion time .
6200	Returns a list of time stamps for each time series .
6201	Simulate timestamps .
6202	Merge a set of ts . ts . ts
6203	Calculate the ems from E_DA_DA .
6204	Calculate the diffusion coefficient of the particles .
6205	Return a slice of the population of a list of particles .
6206	Calculate the hash of the state
6207	Merge two datastamps .
6208	Save the photon_hdf5 file .
6209	Print the attributes of a node .
6210	Print children of a tree .
6211	Fit the training dataset .
6212	Generate a vector of xz coordinates .
6213	Load the scene .
6214	Load a GLTF file .
6215	Load GLTF file .
6216	Checks if all buffers exist in this file .
6217	Prepare VBOInfo for a primitive primitive .
6218	Get the bounds of a primitive .
6219	Checks if the given information is interleaves .
6220	Create a numpy array .
6221	Sets the position of the camera .
6222	Updates the direction of the rotation .
6223	Look up the position at the given position .
6224	Calculate the look at the given point .
6225	Sets the state of the motor .
6226	Rotate the current position .
6227	Translate a string .
6228	Initialize window .
6229	Draws the scene .
6230	Draw the bounding box .
6231	Apply all mesh programs .
6232	Calculate the bounding box .
6233	Generate a vector of points in a vector .
6234	Starts the mixer .
6235	Get the current time .
6236	Sets the time value .
6237	Draw the background buffers .
6238	Add a point light light .
6239	Render the light buffer .
6240	Render the light light .
6241	Compute the shader .
6242	Load a shader .
6243	Load the image .
6244	Draw the mesh .
6245	Set the value of the current time .
6246	Draws a framebuffer .
6247	Get a program by label .
6248	Get a texture from the project .
6249	Get the effect class .
6250	Create a projection matrix .
6251	Create a transformation matrix .
6252	Creates a normal matrix from a model view .
6253	Check if the given value is available .
6254	Return the root directory of the module .
6255	Load data file .
6256	Return a FinderFinder instance .
6257	Finds the path for the given path .
6258	Update the projection .
6259	Draw the mesh .
6260	Calculate the bounding box of the view .
6261	Swaps the buffer .
6262	Resize the window .
6263	Check glfw version .
6264	Creates a quadratic quadratic vector .
6265	Translate a vertex format .
6266	Return the duration of the current time .
6267	Set the time of the current time .
6268	Resolve the loader .
6269	Resize the buffer .
6270	Swaps the window .
6271	Creates a sphere .
6272	Swap two frames .
6273	Load a resource .
6274	Load all resources from the pool .
6275	Resolve the loader .
6276	Returns the loader for the given resource .
6277	Resize the buffer .
6278	Draw the timeline .
6279	Clear the color .
6280	Sets the values of the color .
6281	Handle a keyboard event .
6282	Called when the cursor is changed .
6283	Set default viewport
6284	Starts the robot .
6285	Toggles the pause .
6286	Check if a file is supported .
6287	Get a track .
6288	Find all commands in the given directory .
6289	Update this object s attributes .
6290	Add a program to the program .
6291	Add a texture directory .
6292	Add a new data directory .
6293	Render a program .
6294	Transform a program .
6295	Set the index of the buffer .
6296	Returns the vao object for the given program .
6297	Release the buffer .
6298	Draw a mesh .
6299	Parse a package path .
6300	Return a list of all the resources .
6301	Return a list of all effect resources .
6302	Add a package .
6303	Get a package by name .
6304	Find an effect class .
6305	Return a list of all the effects that are runnable .
6306	Load the effect package .
6307	Load effect classes .
6308	Load the dependencies module .
6309	Draw the effects of the rocket .
6310	Load the image .
6311	Create a ShaderSource from a shader .
6312	Creates a new ShaderSource from a shader .
6313	Print the contents of the file .
6314	Load the resources .
6315	Add resource descriptors to pool .
6316	Reload all programs .
6317	Return the size of the image .
6318	Find the last found path .
6319	Perform initial sanity check .
6320	Create the entrypoint .
6321	Returns the template directory for the project .
6322	Resolve the loader .
6323	Encodes the given text .
6324	Train the corpus .
6325	Encodes the given text into an integer .
6326	Import a corpus .
6327	Returns the number of words in the corpus .
6328	Add words to the corpus .
6329	Import a gng corpus .
6330	Calculate the frequency of a term .
6331	Encode a word .
6332	Decode a string .
6333	Compute the relative dist relative to a tar .
6334	Compute the distance between two files .
6335	Calculate the distance between the src and tar .
6336	Distribution relative to src
6337	Compute the distribution distribution distribution .
6338	Calculate the distance of a tversky .
6339	Computes a sequence of lengths from src .
6340	Compute the similarity between two files .
6341	Compute the similarity between two strings .
6342	Returns a list of words in the corpus .
6343	Return the raw text .
6344	Calculate the id of a term .
6345	Strip a word .
6346	Returns the language for the given name .
6347	Reduce a language .
6348	Applies the final phonetic rules .
6349	Expands a phonetic string .
6350	Convert a phonetic number into a string .
6351	Convert a phonetic phonetic phonetic string .
6352	Remove duplicates from phonetic .
6353	Normalize language attributes .
6354	Apply a rule to a phonetic .
6355	Returns the language index for the given code .
6356	Calculate the distcmp distcmp .
6357	Convert a word to a regular expression .
6358	Computes the length of a tar string .
6359	Compute the similarity between two files .
6360	Calculates the distance between the given tarball and tar .
6361	Compute the similarity matrix .
6362	Encode a word .
6363	Compute the distance between src and tar .
6364	Return a tuple of tuples .
6365	Return a dictionary representation of this object .
6366	Return the population of the population .
6367	Return the precision of the precision .
6368	Compute the precision of the population .
6369	Calculate recall .
6370	Calculate the specificity
6371	Calculate the fraction of this curve .
6372	Return the accuracy of the population .
6373	Calculate the accuracy of the population .
6374	Calculate the mean of the log .
6375	Strip a word .
6376	Computes the distance between src and tar .
6377	Simplified method .
6378	Calculate the Manhattan distance between the given tar .
6379	Calculate the distance between two points .
6380	Simulate the Manhattan distance .
6381	Calculates the distrokeler for a tarball .
6382	Simulate Hamming .
6383	Return the fingerprint of a word .
6384	Compute the meanwise similarity of a collection .
6385	Compute pairwise similarity statistics .
6386	Returns the number of characters in a word .
6387	Returns the r2 r1 r1 r1 r1 r1 r1 .
6388	Checks if the given term is a short term .
6389	Checks if a term is a short word .
6390	Checks if the given term is a vowel .
6391	Encode a word .
6392	Get qgrams .
6393	Compute the distance between two files .
6394	Simplified distance .
6395	Returns the fingerprint of a word .
6396	Simulate minkowski .
6397	Compute the similarity between two sources .
6398	Calculate the distance between two files .
6399	Encode a word .
6400	Strip a word .
6401	Removes a word .
6402	Generate a fingerprint from a phrase .
6403	Convert an IP address to a list of features .
6404	Get the feature of a vector .
6405	Compare two features .
6406	Compute the similarity between two files .
6407	Compute the mean of the given number .
6408	Compute the mean of a set of numbers .
6409	Calculate the mean of a given number .
6410	Compute the mean of a number of numbers .
6411	Calculate the mean of a number .
6412	Calculate the mean of a number .
6413	Calculate the mean of a number .
6414	Calculate the mean of a number .
6415	Return the median of the given number .
6416	Calculate the variance of a number .
6417	Strip a word .
6418	Simulate an Editex .
6419	Compute the distance between two files .
6420	Read a file .
6421	Encode a word .
6422	Remove punctuation .
6423	Calculate the distance of a file .
6424	Simplified method .
6425	Calculate tanimoto coefficient .
6426	Simulate Sift4 .
6427	Compute the distance between src and tar .
6428	Encode a word .
6429	Strip a word .
6430	Computes the similarity between two strings .
6431	Computes the distance between two sources .
6432	Encode a word .
6433	Computes the Hamex hamming distance from a tarball .
6434	Compute the eudex distribution of a tar .
6435	Simulate eudex .
6436	Generator generator generator generator .
6437	Computes the distance between the given tar .
6438	Computes the distance between the given tar and tar archive .
6439	Compute the Euclidean distance between src and tar .
6440	Computes the Euclidean distance between two points .
6441	Simplified function .
6442	Determine if the word is a condition .
6443	Determines if a word is a word .
6444	Determines if a word is a suffix .
6445	Return True if word is x .
6446	Determines if a word is a word .
6447	Strip a word .
6448	Compute the distance between src and tar .
6449	Return the color of the given score .
6450	Return the color of the given score .
6451	Returns the color for the given score .
6452	Computes the distance between two files .
6453	Compute the distance between two files .
6454	Strip a word .
6455	Computes the MLIPNS for a given tar .
6456	Simplified similarity function .
6457	Computes the distance between two files .
6458	Return the degree of a term .
6459	Check if a term is a vowel .
6460	Checks if the given term is in the given word .
6461	Check if a term is in CVC .
6462	Calculate the log of y .
6463	Print usage function .
6464	%prog usage
6465	Get the size of the terminal .
6466	Return the color for the given index .
6467	Convert a capname to a string .
6468	Wrapper around csi_wrap
6469	Read data from the stream .
6470	Consume a single value .
6471	Update the values of the points .
6472	Return a list of colors for the given size .
6473	Convert size to human readable string .
6474	Apply a function to a function .
6475	Generate a point between two points .
6476	Set the text at the given point .
6477	Render the screen .
6478	Return a generator of numpy points .
6479	Return a copy of the points of this point .
6480	Return the height of the screen .
6481	Return the memory size of this node .
6482	Load a class .
6483	Process pagination values .
6484	Return a dictionary of field values .
6485	Perform a search request .
6486	Search for course discovery .
6487	Translate ES response to ES .
6488	Get the filter field for a given field .
6489	Process a list of field queries .
6490	Process filters .
6491	Processes an exclusion dictionary .
6492	Processes facet terms .
6493	Get all mappings for a given index .
6494	Sets the mappings for the given index .
6495	Loging errors .
6496	Get the mapping for the given document type .
6497	Index a document .
6498	Remove documents from the index .
6499	Search for Elasticsearch .
6500	Perform a search .
6501	Search for course discovery .
6502	Return a list of strings in a dictionary .
6503	Returns a list of strings that match the given words .
6504	Decorator for matching matches .
6505	Add properties to the results .
6506	Process a search result .
6507	Returns the excerpt of the content .
6508	Generate search filters .
6509	Set the search environment .
6510	Parse a file .
6511	Parses a name line .
6512	Set a country name .
6513	Returns the most popular gender for the given country .
6514	Returns the gender of the given name .
6515	Output a message .
6516	Execute all tools .
6517	Execute the given collector .
6518	Check if a path is excluded .
6519	Determine if the given path is excluded .
6520	Return a list of files matching the given filters .
6521	Return a list of directories that match the given filters .
6522	Add a list of issues .
6523	Return the number of issues .
6524	Get a list of issues .
6525	Return a grouped list of issues .
6526	Parse Pytoml file .
6527	Returns a dictionary of available tools .
6528	Returns a dictionary of the get_reports .
6529	Get the list of extenders .
6530	Purge the configuration cache .
6531	Get the configuration for the user .
6532	Get the configuration for a project .
6533	Gets the configuration for a project .
6534	Merge two lists .
6535	Merge two dictionaries .
6536	Output an error message .
6537	Modify sys . path
6538	Compile regular expressions .
6539	Returns True if the target matches the given mask .
6540	Read a file .
6541	Parse python file .
6542	Called when a tool is finished .
6543	Execute a command .
6544	Terminate the client .
6545	Check if the connection is connected .
6546	Connect to a host .
6547	Wait for input field .
6548	Move cursor to given position .
6549	Fill a field with the specified length .
6550	Create a new instance from a function .
6551	Create a new instance of the given parameters .
6552	Checks the solution of the solution .
6553	Add a variable to the constraint .
6554	Flip a variable .
6555	Return a copy of this instance .
6556	Projects the given variables to the given variables .
6557	Asserts that the penalty model is available .
6558	Add a constraint .
6559	Convert a CSP constraint into a binary representation .
6560	Create a BQM model from a given constraint .
6561	Creates a BQM model from a given constraint .
6562	Iterate over a set of nodes .
6563	Load a ConstraintProblem from a file .
6564	Creates a constraint .
6565	Creates a constraint for xor .
6566	Return a function that returns a function that can be applied to the given variables .
6567	Compute fulladder gate gates .
6568	Generate a random xoratat .
6569	Checks if a function is a signature .
6570	Decorator for last argument .
6571	Register a chooser .
6572	Register a single choice .
6573	Formats the audio URL .
6574	Formats a new URL .
6575	Create a list of objects from a list .
6576	Populate fields from data .
6577	Creates a new ApiModel instance from the API .
6578	Return a string representation of this object .
6579	Send a command .
6580	Ensure the playback command is started .
6581	Play a song .
6582	Play a song .
6583	Handles post processing .
6584	Display a station .
6585	Handles the input .
6586	Decorator for retries .
6587	Iterate over a given function .
6588	Get an integer .
6589	Open the working area .
6590	Put a package .
6591	Receive a list of packages .
6592	Return a list of runids .
6593	Receive a single run .
6594	Run multiple events .
6595	Polls the queue .
6596	Receive a single message .
6597	Receive all the results .
6598	Receive results from the server .
6599	Convert a key - value dictionary into a tuple of tuples .
6600	Opens the directory .
6601	Put a package into the cache .
6602	Collect the result from the package .
6603	Returns the full path of the package .
6604	Return the relative path for the given package .
6605	Returns the full path of the package .
6606	Run multiple jobs .
6607	Poll all cluster processes .
6608	Wait until the cluster process is finished .
6609	Remove all runids from the cluster .
6610	Get array of arrays for a given branch .
6611	Put a task .
6612	Put multiple tasks into the dropbox .
6613	Receive a drop box .
6614	Receive a drop box .
6615	Receive all data from dropbox
6616	Receive a list of packages .
6617	Expand a path to a path .
6618	Expand a path to a tuple .
6619	Poll all running processes .
6620	Wait for running processes .
6621	Returns the address of a tree .
6622	Configure the component .
6623	Get a tarball from a URL .
6624	List available versions .
6625	List available tags .
6626	List available branches .
6627	Decorator to raise an exception .
6628	Unublish a given namespace .
6629	Read settings from a file .
6630	Get a config value .
6631	Set a value for a path .
6632	Return a generator that yields the next element .
6633	Check if the source directory is valid .
6634	Display outdated versions .
6635	Checks if the given path is ignored .
6636	Publish the image .
6637	Unpublish a repository .
6638	Get a script from the description .
6639	Run a script .
6640	Checks if a dependency has a dependency .
6641	Checks if the given name is a dependency .
6642	Provides a dependency that satisfies the requirements of the dependency .
6643	Get the list of extra includes .
6644	List available versions .
6645	Merge two dictionaries .
6646	Mirror the given value .
6647	Return the base target target for this target .
6648	Load the configuration from the application .
6649	Checks if the given target is inherits .
6650	Execute a command .
6651	Builds the given component .
6652	Find a program in the builddir .
6653	Starts a program .
6654	Prune cache files .
6655	Decorator for testing
6656	Calculate the energy of the given variance .
6657	Calculate the inbag from a forest .
6658	Compute the core computation .
6659	Calculate bias correction .
6660	Calculate the error of a forest .
6661	Generate a certificate .
6662	Generate CSR .
6663	Get the expiration date for a certificate
6664	List expired certificates .
6665	Verify the certificate chain .
6666	Recursively update the dictionary .
6667	Check the version of the Burlap API .
6668	Populate fabfile .
6669	Decorator to run a task .
6670	Decorator for a task .
6671	Check if path is a file
6672	Check if path is a directory
6673	Check if a path exists
6674	Get the owner of the given path .
6675	Return the umask .
6676	Upload a template .
6677	Return the MD5 hash of a file .
6678	Return a list of uncommented lines .
6679	Get the mtime of the given path .
6680	Copy a source to the given destination .
6681	Move a file to another .
6682	Remove a file .
6683	Require a path to a file .
6684	Check if the current release is available .
6685	Update the kernel .
6686	Check if a package is installed .
6687	Install packages .
6688	Install a group .
6689	Uninstall a group .
6690	List repositories .
6691	Synchronously synchronously synchronously .
6692	Invalidate the distribution
6693	Get a bucket .
6694	Generate static static static routes .
6695	Upgrade the distribution .
6696	Check if a package is installed .
6697	Install packages .
6698	Preseed a package .
6699	Get the list of available packages .
6700	Check if the given keyid exists .
6701	Add an apt key .
6702	Check if a group exists .
6703	Enter a password change .
6704	Add groups to the user
6705	Create a user .
6706	Set the password for the given username .
6707	Run a command .
6708	Returns the hash of a file .
6709	Run the command .
6710	Shell command .
6711	Get disk usage usage .
6712	Executes a tunnel .
6713	Install the setuptools .
6714	Install EZ setup from scratch .
6715	Install packages .
6716	Bootstrap the environment .
6717	Determine if virtualenv is installed .
6718	Check if a virtualenv exists .
6719	Determine if the given name is installed .
6720	Initialize virtualenv .
6721	Generate a list of requirements .
6722	List all available instances .
6723	Get or create a keypair .
6724	Check if an instance exists
6725	Get or create a vm .
6726	Delete an instance
6727	Get the name of the VM
6728	Respond to a host .
6729	Deploy rsync code .
6730	Initialize environment variables .
6731	Creates a module .
6732	Add module methods to a module .
6733	Convert a string to a list .
6734	Returns the host_retriever for the given environment .
6735	Write a temporary file to a temporary file .
6736	Reboot a reboot .
6737	Get component settings .
6738	Get the last modified timestamp .
6739	Check if old settings are changed .
6740	Get the common packer .
6741	Get the OS version .
6742	Render a template to a string .
6743	Render a template to a file .
6744	Install a config file .
6745	Iterate over all sites .
6746	Generate a topological sort order .
6747	Returns a list of hosts for the given site .
6748	Return a copy of the generator .
6749	Create a new shell .
6750	Registers the service .
6751	Unregister the manifest .
6752	Return a sorted list of tasks .
6753	Returns the local renderer .
6754	Return a dictionary of all the available services .
6755	Return a copy of the environment variables .
6756	Check if the given parameter is changed .
6757	Run a reboot on the system .
6758	Set site specific sites .
6759	Get the list of installed packages .
6760	Check if the manifest has changed .
6761	Configure the tracker .
6762	Write the database to the database .
6763	Dump the database .
6764	Drop a database .
6765	Load a table .
6766	List interfaces .
6767	Get the address of an interface .
6768	Update packages .
6769	Install apt_requirement .
6770	Install yum requirements .
6771	List available packages .
6772	Install required packages .
6773	Remove blacklisted packages .
6774	Deploy all crontabs .
6775	Force all rabbitmq queues and purge them .
6776	Configure the broker .
6777	Iterate over two dictionaries .
6778	Returns the order of the components in the manifest .
6779	Generate a list of deployers for the given components .
6780	Return the name of the manifest file .
6781	Get the manifest for the given components .
6782	Get the manifest of the manifest .
6783	Lock the environment .
6784	Unlock the lock file .
6785	Create a new image .
6786	Get the list of components for the given components .
6787	Display a list of components .
6788	Push the given components to the server .
6789	Get the settings .
6790	Create a user .
6791	Load data from a file .
6792	Run the command .
6793	Load django settings .
6794	Execute the shell .
6795	Synchronously sync database .
6796	Execute a command .
6797	Get the latest timestamp of a file .
6798	Set root login entry .
6799	Generate a database renderer .
6800	Get free space .
6801	Load a database set .
6802	Loads the contents of the task .
6803	Assign the host to the host .
6804	Initialize raspbian disk .
6805	Initialize the image .
6806	Initialize Raspbian .
6807	Create a vagrant box .
6808	Configure HDMI device .
6809	Configure camera .
6810	Sets up the lmod module to the local template
6811	Run pre - deployers .
6812	Deploy services .
6813	Run post - deployers .
6814	Configure environment variables
6815	Enable all modules .
6816	Optimize the websgi process .
6817	Create a local renderer .
6818	Install auth_basic_user_user_file .
6819	Get the site data for the site .
6820	Configure environment variables .
6821	Configure the modsecurity configuration .
6822	Configure modraf file .
6823	Updates the maintenance .
6824	Restarts the supervisor .
6825	Deploy Supervisor services .
6826	Clone a remote repository .
6827	Add a remote remote .
6828	Fetch a remote repository .
6829	Pull a remote repository .
6830	Get a list of commits between two commits .
6831	Get current commit
6832	Get the ssh configuration .
6833	Get the version of the vagrant
6834	Set vagrant .
6835	Get vagrant settings .
6836	Return a list of base boxes .
6837	Install a download from the upstream .
6838	Return the distribution ID for the distribution .
6839	Return the distribution of the distribution .
6840	Return the distribution of the distribution .
6841	Return a list of available locales .
6842	Force celery to stop celery
6843	Sets the permissions for the current environment .
6844	Create supervisor services .
6845	Check if a branch is ok
6846	Check if host is present
6847	Purge SSH keys .
6848	Find the working password for the user .
6849	Determine if the target host is initialized .
6850	Initialize the user .
6851	Get the public IP
6852	Configure environment variables .
6853	Return a list of partitions .
6854	Get device by uuid .
6855	Check if a device is mounted .
6856	Execute a query .
6857	Create a MySQL user .
6858	Check if a database exists .
6859	Create a MySQL database .
6860	Return the path to the conf file .
6861	Prepare root password
6862	Drop all views .
6863	Perform a crossmatch crossmatch .
6864	Convert flux to magnitude magnitude
6865	Calculate the time spectrum from the input file .
6866	Generate a plotogram for a periodogram .
6867	Creates a plot of a series of time series .
6868	Find the number of time groups in the given list .
6869	Calculate the magnitude of the magnitude series .
6870	Calculate the SNr of a dipole .
6871	Calculate the variability of the SNI .
6872	Calculate the time series for a given time .
6873	Calculate out of the transition points for a given time .
6874	Convert sqlitecurvecurvecurvecurvecurve_curvecurve_curvecurve_curve_curveve_curve_curve_curve_curve_curve_curve_curve_curve_curveze_curve_curve_curve_curveze_curveveze_curvezevezevezevevezevevevezevezevezevevezevezevezevezvevevezevezevezevezvezvezevezevezevezvezve
6875	Uncompress a sqlitecurve curve .
6876	Gzip the given sqlitecurve curve .
6877	Unzip a SQLite curve from a SQLite curve .
6878	Validate a filter string .
6879	Convert casteeee to string
6880	Parse a CSV header .
6881	Parses a LCC header and returns a dictionary of columns .
6882	Describes a LCC CSV file .
6883	Read a HATLC file .
6884	Find the number of time groups in the lcime .
6885	%prog hatlc file
6886	Determine the mdwarf color for a given color .
6887	Perform a parallel pclist .
6888	Parse the epdir file .
6889	Parses the blobs of a task .
6890	Read a K2C file from a K2C file .
6891	Get star features
6892	Serialize a list of stars into a list of objects .
6893	Parse a list of stars .
6894	Parse a list of light curves .
6895	Calculate binomial binning binning bins .
6896	Perform a pdw process .
6897	Get periodic features
6898	Serialize a list of periodic features .
6899	Parse a list of periodic features .
6900	Parse a list of periodic features .
6901	Parse catalog header .
6902	Loads the xmatch catalogs from xmatch .
6903	Wrap angle around angle .
6904	Convert hours to decimal degrees .
6905	Calculate the great circle distance between two points .
6906	Calculate the total probability of a magnitude .
6907	Convert the celestial coordinates to galactic coordinates .
6908	Convert galactic coordinates to a celestial coordinates .
6909	Calculate the x - axis of an angle .
6910	Generate a light curve for a given time curve .
6911	Generate a new E - light curve .
6912	Generate a plot of flares
6913	Generate a sinusoidal light curve .
6914	Generate a rrab_light_light curve .
6915	Generate a fake collection
6916	Add a list of variables to a list of variables .
6917	Find a flare .
6918	Calculates the peak heights of the ACF .
6919	Compute the autocorr function for a given lag .
6920	Compute the autocorr function .
6921	Calculate the autocorr function .
6922	Calculate an autocorr for a given time series .
6923	Calculate theta phase of a phase .
6924	Open database connection .
6925	Enable autocommit .
6926	Get a cursor .
6927	Create a new cursor .
6928	Close the cursor .
6929	Calculate a trapezoid for a given time period
6930	Match external catalogs to external catalogs
6931	Extract external catalogs from cp directory
6932	Convert a cplist diagram to a plot .
6933	Generate a colormag diagram .
6934	Add a cplist to a cplist
6935	Add commands to cp directory
6936	Update the objectinfo
6937	Parse a list of objects from a list of objects .
6938	Perform a parallel update of the objectinfo .
6939	Runs the checkplotlib worker .
6940	Calculate Gaussian Gaussian Gaussian .
6941	Determine the Gaussian Gaussian .
6942	Calculate the inverse waveletes function .
6943	Convert jhk to bmag .
6944	Convert jhk to vag .
6945	Convert jhk to rmag .
6946	Convert a jhk to an imaginary magnitude .
6947	Convert jhk to SDSS .
6948	Convert jhk to SDS ssdg .
6949	Convert jhk to SDSR .
6950	Convert jhk to SDSI .
6951	Convert jhk to SDSZZZZ .
6952	Calculate theta of theta .
6953	Given a list of timeseries return a list of FAP alarms .
6954	Creates a histogram of a periodogram .
6955	Get the quantity of a given quantity
6956	Create a new transit model .
6957	Calculate the log prior to the prior prior transition .
6958	List all trieltersystem systems .
6959	Query a set of galactic coordinates .
6960	Read a model from a file .
6961	Return true if two arrays are equal .
6962	Return a JSON representation of an object .
6963	Initialize the project .
6964	Render the current project .
6965	Initialize the current project .
6966	Initialize the executor .
6967	Calculate a Gaussian Gaussian distribution .
6968	Smooth maggolol .
6969	Calculate the difference between two points .
6970	Calculate epd series of time series .
6971	Calculate the epd function .
6972	Calculate the residual residuals of the equation
6973	Calculate epd series of time series .
6974	r Calculates the time series of time series .
6975	Finds the phase of the phase of the phase of the phase .
6976	Convert keplermag to SDS
6977	Convert a LCDict object to a pkl file .
6978	Read a pickle file .
6979	Apply filter flags to KVDict .
6980	Calculate epd function .
6981	Calculate the centroid offsets for the centroid .
6982	Calculate the legend redis for the given npts .
6983	Determine the trend decomposition of a series .
6984	Calculate the time bins for the lc file .
6985	Perform a list of time bins .
6986	Perform a parallel time binning on lcdir .
6987	Returns a list of variable features .
6988	Serialize a list of variables to a file .
6989	Perform a list of variable features .
6990	Parse a list of lcd files in the LDC directory .
6991	Convert a pkl file into a PNG file .
6992	Calculate the model model for flare .
6993	Calculate the flare model for flare .
6994	Runs the shutdown handler .
6995	Runs a producer loop over a pipeline .
6996	Perform a spline fit on a given time series .
6997	Runs a task .
6998	Perform parallel processing .
6999	Parses a periodfinding directory .
7000	Run pf file .
7001	Parse a list of pclist objects .
7002	Parse a lcdir directory .
7003	Collect all features in a directory
7004	Train a collection of features for each feature .
7005	Apply a classifier to a varifier .
7006	Plot training results .
7007	Calculate the Fourier function of fourier params
7008	Calculate the chisqq
7009	Calculate the residual residual residual of a phase
7010	Get the skyview of the skyview .
7011	Plot a list of LSP objects .
7012	Convert lcdict to a pickle file .
7013	Parses a HCL file .
7014	Concatenate a list of textlcs .
7015	Concatenate a list of light curves for a given object .
7016	Concatenate a list of objects into a pklc file .
7017	Perform a parallel concatenation of a file .
7018	Concatenate a list of objects in a list of objects .
7019	Merges a list of labels from a list of labels .
7020	Generate a HATPI file .
7021	Generate a list of tuples in a list of tuples .
7022	Extract the fov catalog information from a pkl file .
7023	Convert a base64 string to a file .
7024	Read a pickle pickle file .
7025	Creates a plot of a phase .
7026	convert a list of objects to an object list
7027	Return a list of objects from an Radecl box
7028	Perform a search on an object id .
7029	Calculate the lsp value of the lsp value .
7030	Calculate the LSP value of the LSP value .
7031	Calculate a list of LSPs .
7032	Checks if the given lcc server exists .
7033	Get a new API key from LCC
7034	Import API key from LCC server
7035	Submit a search query
7036	Perform a cone search .
7037	Perform xmatch search .
7038	Retrieve a dataset
7039	Get information about an object
7040	List recent datasets .
7041	List all the LCC collections .
7042	Calculate the stetsonon index for a given detector .
7043	Calculate the light curves for the light curve .
7044	Calculate the light curve of light curves .
7045	Return a list of all nonperiodic features .
7046	Run bebls .
7047	Perform a single BLS worker .
7048	Calculate stats for a single period
7049	Calculate mass radius for a given planet .
7050	Reform a template for a template
7051	Parse a LCLIST list and return None .
7052	Parse a lcdir file .
7053	Read a pkl file from a lc file .
7054	Check if a module is imported .
7055	Register a lcformat .
7056	Connect to an EC2 instance .
7057	Download a file from S3 .
7058	Upload a file to S3 .
7059	Delete a file
7060	Create a queue
7061	Delete a queue
7062	Send an item to the queue .
7063	Get item from queue
7064	Delete a message from the queue .
7065	Delete all EC2 nodes .
7066	Cancel a spot fleet cluster .
7067	Upload a file to a bucket
7068	Read a fake ccd file .
7069	Get a list of variable features for a given simulation .
7070	Return the precision of ntp .
7071	Calculate recall .
7072	Calculate the Matthews correlation coefficient .
7073	Perform a grid search on a grid .
7074	Perform a grid search on a grid .
7075	Run a periodfinding .
7076	Perform periodic variable recovery .
7077	Perform a periodic period recursively .
7078	Search for tic conesearch
7079	Takes a set of TIC coordinates and returns it .
7080	Search for a TIC object
7081	Send an email to the user .
7082	Calculate the sinusoidal function
7083	Calculate the residuals of a fourier model .
7084	Creates a plot plot plot .
7085	Preprocess the coordinates of a coordinate .
7086	Return True if iterable is true .
7087	Returns an array of epochs for the given time .
7088	Convert a Julian date to a datetime .
7089	Corresponds to jd .
7090	Parse a LCLIST file .
7091	Parses a key - value pair .
7092	Handle a change .
7093	Creates the widget .
7094	Initialize Google MapOptions .
7095	Initialize the map .
7096	Initialize the info window .
7097	Create a new map fragment .
7098	Destroy the map .
7099	Add a child to the map .
7100	Handle a marker .
7101	Called when a marker is clicked .
7102	Fit a count vector .
7103	Set the data .
7104	Add a transformer to the sentence .
7105	Train the experiment .
7106	Export the model to the experiment .
7107	Fit the SGD classifier .
7108	Print a matrix of labels .
7109	Get a file from the cache .
7110	Fit the model to the model .
7111	Predict the label of the model .
7112	Serve the language .
7113	Return a list of labels .
7114	Builds a text model .
7115	Returns a list of config sources for the given app .
7116	Generate a list of available sources .
7117	Merges the given sources .
7118	Merge two dictionaries .
7119	Return a new DotDict with the given keys .
7120	Convert an object to a DotDict .
7121	Filter the config for a deploy_config file .
7122	Generate a random authentication token .
7123	Write configuration to a file .
7124	Validate a date .
7125	Get total number of download_counts .
7126	Add the total number of downloads .
7127	Find and patch an entry .
7128	Convert an entry to a path .
7129	Main entry point .
7130	Creates a logging configuration .
7131	Setup the path to the destination directory .
7132	Prepare docset .
7133	Add icon to dest .
7134	Run the given cell .
7135	Return a dict with the given exclude .
7136	Redirect to stdout .
7137	Formats an object as a string .
7138	Return the type of the given object .
7139	Get the spend key .
7140	Transfer a transaction .
7141	Transfer multiple transactions .
7142	Get the balance of the account .
7143	Create a new address .
7144	Transfer a transaction .
7145	Transfer multiple destinations .
7146	Convert an amount to an atomic number .
7147	Convert an address to an address .
7148	Return an IntegratedAddress with the given payment ID .
7149	Encode a hexadecimal string .
7150	Decode a phrase .
7151	Get the checksum of a phrase .
7152	Display a single line
7153	Returns a list of options .
7154	Prepare options .
7155	Display a prompt .
7156	Get operator function .
7157	Assign a prompter to the core .
7158	Add a question .
7159	Ask the next question .
7160	Return the next question .
7161	Go back to the next number .
7162	Format the answers .
7163	Display the answer .
7164	Add intent .
7165	Add a new entity .
7166	Load an entity from a file .
7167	Load intent .
7168	Remove an intent .
7169	Remove an entity by name .
7170	Train the padaos .
7171	Run a preprocess .
7172	Calculate the intents of a query .
7173	Calculate the intent for a given query .
7174	Train the model and save it to cache .
7175	Main entry point .
7176	Recursively recursively recursively recursively .
7177	Replace the given source file .
7178	Parses a string into a Python tree .
7179	Unparse the given node .
7180	Rely reapply all lazy functions .
7181	Fix the remaining type comments .
7182	Parse a function signature comment .
7183	Parse a type comment comment .
7184	Copy arguments to annotations .
7185	Copy type comments to annotations .
7186	Check if the given name is equal to the expected value .
7187	Removes the type signature comment .
7188	Get the offset and prefix and prefix and prefix .
7189	Fix line numbers .
7190	Create a new leaf node .
7191	Get information about the prefix .
7192	Compute the histogram of the image .
7193	Match image histograms .
7194	Stretch the histogram .
7195	Calculate the ndvi .
7196	Calculate the ndwi .
7197	Plot the spectrum .
7198	Describe a list of image images .
7199	Retrieve a chip from a catalog .
7200	Creates a viewlet viewer for the given ID .
7201	Check if a category is ordered .
7202	Decorator for deprecation .
7203	Return the matching port for the given name .
7204	Set the values of the inputs .
7205	Save data to output .
7206	Generate workflow description .
7207	Launch the workflow .
7208	Returns a list of task IDs .
7209	Cancel a workflow .
7210	Get the stdout of the task .
7211	Get the stderr of the task .
7212	Returns a list of layers .
7213	Get a Proj object for a given project .
7214	Preview an image .
7215	List tasks .
7216	Register a task .
7217	Get task definition .
7218	Delete a task .
7219	Update a task .
7220	Create a geotiff image .
7221	Add vectors to the pipeline
7222	Retrieve a recipe by id
7223	Save a recipe
7224	Save a project .
7225	Delete a project .
7226	Generate a snippet .
7227	Generate the fill style .
7228	Parses the fillextension .
7229	Generate a snippet .
7230	Create a new vector .
7231	Create a new feature from a WKT file .
7232	Get the data for a given ID .
7233	Aggregate a search area
7234	Create a tilemap .
7235	Create a map of features .
7236	Read data from the data .
7237	Generate a random window .
7238	Iterate over random numbers .
7239	Return the window at the given geometry .
7240	Convert the window to a window .
7241	Returns the area of the given geometry .
7242	Return the bounds of the image .
7243	Generate a geotiff file .
7244	Parse geojson geometry .
7245	Get tile coordinates .
7246	Launch a workflow .
7247	Get the status of a workflow .
7248	Get the stdout of a task .
7249	Cancels a workflow .
7250	Launch a batch workflow .
7251	Get the status of a batch .
7252	Order an image .
7253	Get the status of an order
7254	Check if the server is alive
7255	Get a record
7256	Retrieve the strip metadata for the given strip .
7257	Get the coordinates of a given address .
7258	Search for address .
7259	Search for a point
7260	Get the location of a catalog .
7261	Search for a search area
7262	Get the most recent images from the results .
7263	Register an interface .
7264	Validate a configuration option .
7265	Run the assertion .
7266	Run a matcher .
7267	Run operator .
7268	Decorator for operator functions .
7269	Creates a new operator .
7270	Register a plugin .
7271	Load operators .
7272	Register the given operators .
7273	Set the rate .
7274	Pause the device .
7275	Sets the current position .
7276	Sets the position of the player .
7277	Set video position
7278	Play synchronously .
7279	Play the event .
7280	Quit the process .
7281	Render a response to a response .
7282	Translate a form field to a value .
7283	Trims a field key .
7284	Check if the user has edit permission .
7285	Check if the user has a add permission .
7286	Check if the user has a permission .
7287	Set form fields .
7288	Get the value of a field .
7289	Check if a string is a digit .
7290	Create a key from a list of strings .
7291	Set form fields .
7292	Set post data .
7293	Return the form object .
7294	Create a list of lists for a list field .
7295	Convert a document to a dictionary .
7296	Get the widget for a model field .
7297	Get the attributes for a model field .
7298	Get form field class .
7299	Returns the queryset with the given query .
7300	Get the context data .
7301	Deletes the document .
7302	Return a list of all the MongoadMinmin objects .
7303	Sets the Mongonautautautautautautautautautonautos model .
7304	Set permissions in context .
7305	Process the POST form .
7306	Processes a document .
7307	Set the embedded document .
7308	Set the list field value .
7309	Render the current timezone .
7310	Displays the current timezone .
7311	Check if ip address is valid .
7312	Determine if the given IP address is local .
7313	Process a request .
7314	Search for the query .
7315	Parse a filter .
7316	Create a query .
7317	Send message to SMTP
7318	Parse a mail message .
7319	Create a multipart message .
7320	Create a multipart multipart message .
7321	Convert Markdown message to Markdown .
7322	Add attachments to a message .
7323	Send a SMTP message .
7324	Creates a sample of email files .
7325	Main entry point .
7326	Decorator that returns a function that returns a function that returns a function .
7327	Parse a list of integers .
7328	Get the base url for the API .
7329	Make a request .
7330	Create a StreamResponse .
7331	Get all tasks .
7332	Run all tasks .
7333	Close the session .
7334	Perform a chunked upload .
7335	Upload a file .
7336	Parse IEDB response .
7337	Predict a sequence of peptides .
7338	Get the arguments of a function .
7339	Log an error message .
7340	Get media type from data .
7341	Get the size of a media file .
7342	Set debug level .
7343	Return a copy of this BindingPredictionPrediction .
7344	Get data from response .
7345	Called when a response is complete .
7346	Get OAuth token .
7347	Get an OAuth token .
7348	Get access token .
7349	Parse a token from a response .
7350	Predict a sequence of sequences .
7351	Parse netchop output .
7352	Return a pandas DataFrame .
7353	NetMHC implementation .
7354	Predict a sequence of peptides .
7355	Convert a sequence to a string .
7356	Creates a list of peptides for the given peptides .
7357	Check if peptide_lengths are valid .
7358	Check that peptides are valid .
7359	Predict a sequence of peptides .
7360	Ensure that the given allele is valid .
7361	Connect to the stream .
7362	Connect to the stream .
7363	Add a prefix to the event handler .
7364	Set the timezone .
7365	Run a command .
7366	Run multiple commands .
7367	Load JSON data from JSON data .
7368	Read data from response .
7369	Return the docstring of a function .
7370	Check if the user has permissions .
7371	Main entry point .
7372	Prepare the DRB allele name .
7373	Get error from data
7374	Throw an exception .
7375	Decorator to set the code .
7376	Prepare a request .
7377	Return a copy of the headers .
7378	Decorator to process keys .
7379	Get the command for the given text .
7380	Execute a command .
7381	Return a generator that yields all edges in the graph .
7382	Check if a group is within a group .
7383	Plots the axis of an axis .
7384	Plot a list of nodes .
7385	Return the angle of the given group .
7386	Find node group membership .
7387	Return the index of the given node .
7388	Return the radius of the given node .
7389	Calculate theta of a node .
7390	Draw edge edges .
7391	Draws the axes .
7392	Adjust the angle between two nodes .
7393	Gets the name of the mods .
7394	Get all publications .
7395	Render a publication .
7396	Render a list of publications .
7397	Parse a string .
7398	Parse a string .
7399	Swap this instance to another .
7400	Updates the ordering .
7401	Updates the ordering of this ordering .
7402	Changes the order to the given order .
7403	Move this instance to another .
7404	Move this instance to another .
7405	Get the top order of the ordering .
7406	Return the bottom of the ordering .
7407	Populate custom links
7408	Generate a sample
7409	Get the order of the tree .
7410	Calculate the number of SNPs .
7411	Generate a sample of Lociates .
7412	Run the tree in the tree .
7413	Plot the results of the plot .
7414	Plot a pairwise distance between two samples .
7415	Return a copy of this instance .
7416	%prog migrations
7417	Update the idict with the given counts .
7418	Makes a sequence of samples from the assembly .
7419	Cleanup sample files .
7420	Index reference sequences .
7421	Fetch clustering from a SAMfile .
7422	Builds a chunk of regions from a sample
7423	%prog refseq_mercle_mercle
7424	Check for insert size
7425	Merge bedtools .
7426	Calculate the stats for a sample .
7427	Initialize refmap .
7428	Create a random sample from the map .
7429	Draws the tree .
7430	Resolve ambig sequences .
7431	Calculate the number of pis .
7432	Write a NEX file to a file .
7433	Read samples from a file .
7434	Return number of lines in a file .
7435	Returns the number of lines in the given filename .
7436	Convert a tuple to a tuple .
7437	Returns a pandas DataFrame for each sample .
7438	Returns a DataFrame containing all files in the samples .
7439	Build a pandas DataFrame
7440	Returns the parameter value for the given parameter .
7441	Set the value of a parameter .
7442	Create a new Assembly object .
7443	Runs the step1 step .
7444	Run step2 .
7445	Runs the best estimate of the joint estimator .
7446	Runs Consensus base function .
7447	Runs the clustering algorithm .
7448	Check if the samples are in the same step .
7449	Combine a list of fastq files .
7450	Get barcode function .
7451	Generate a generator of quartools .
7452	Write a fastq file to a fastq file .
7453	Collate multiple files in a single file .
7454	Estimate the estimated number of reads from a file .
7455	Clean up the fastq files .
7456	Split the raw files into chunks .
7457	Put stats to file
7458	Compute the count matrix .
7459	Get parameter name .
7460	Save data to json
7461	Save data to json .
7462	Encode an object .
7463	Plot a depth plot .
7464	Return a pandas DataFrame
7465	Parses a file and returns a DataFrame .
7466	Load existing results from a file .
7467	Return a summary of results .
7468	Run multi - cluster alignment .
7469	Concatenate alignbits .
7470	Fill all duplicates in the database .
7471	Build tmp_h5_h5 file
7472	Calculate the length of the nociable dataset .
7473	Perform a single cat segment .
7474	Write the data to a full array .
7475	Convert samples to HDFS .
7476	Inserts the inserted indels in the given category .
7477	Count the number of seeds .
7478	Sorts the given Uhandle .
7479	Build a list of clusters .
7480	Build clustbits .
7481	Clean up temporary files .
7482	Clean up the assembly .
7483	Parse the results of a single sample .
7484	Runs the analysis .
7485	Concatenate reads and concatenates the input files .
7486	Run the cutadaptor .
7487	Concatenate multiple inputs .
7488	Import VCF file .
7489	Import VCF file .
7490	Get the list of targets for the given IPy client .
7491	Compute the tree statistics .
7492	Returns a random product of two iterators .
7493	Choose the number of choices in n .
7494	Count the number of SNPs
7495	Convert a chunk to a matrix .
7496	Calculate the number of samples in a sequence .
7497	%prog nwchchunk
7498	Shuffle a sequence of columns .
7499	Resolve ambiguous sequences .
7500	Get the span of a map .
7501	Calculate the width of the span .
7502	Fill the boot vector with the given locations .
7503	Convert data to bytes .
7504	Parse the names of samples .
7505	Run qmc .
7506	Dump the qmc .
7507	Rename a tree .
7508	Compute the final statistics .
7509	Saves the parameters to disk .
7510	Insert data into an array .
7511	Select samples from a list of samples .
7512	Pad names .
7513	%prog locator
7514	Enter a pair of pairs
7515	Enter a single sequence of sequences .
7516	Initialize clustering .
7517	Calculate the number of SNPs for each site .
7518	Returns the maximum number of inds in the block .
7519	Write SNPs map to file .
7520	Write a list of tuples to a file .
7521	Write a string to a string
7522	Concatenate VCF files .
7523	Calculate the reftrack .
7524	Collapse the outgroup into a tree .
7525	Draw the tree .
7526	Get the depth of a sample .
7527	Parses clustering and parses the clustering .
7528	Compute the alignment of a clustering .
7529	Sets up the directories for the project .
7530	Build a dag of samples .
7531	Plot the graph of a dag .
7532	Track the results of a function .
7533	Concatenate multiple edits .
7534	Cluster the cluster .
7535	%prog muscle chunk
7536	Concatenate multiple edits into a single file .
7537	Branch branch .
7538	Get an assembly from the given parsed dictionary .
7539	Calculate binom .
7540	Calculate the basecaller
7541	Determine the number of records in the data .
7542	Stores the alleles in the chain .
7543	Chunk clustering .
7544	Run the analysis .
7545	Calculate the depth of each sample .
7546	Make a chunk of clusters .
7547	Generate a list of alleles .
7548	Print cluster information .
7549	Set the debug dictionary .
7550	Set the debug flag .
7551	Check if cmd exists
7552	Get the list of binaries
7553	Perform a number of routines .
7554	Store all samples in the database .
7555	Store random quartets .
7556	Generate a random combination of n sets .
7557	Generate a random product .
7558	Resolve ambiguous sequences .
7559	Set the number of threads .
7560	Calculate the total cost of a node .
7561	Calculate sampling for a given node .
7562	Run qmc .
7563	Insert data into an array .
7564	Creates a multipart client .
7565	Return a memoized memoized function .
7566	Remove ambigutters from a sequence .
7567	Splits a list of amino acids into a list of sites .
7568	Convert a sequence to a string .
7569	Convert a sequence of sequences to a full string .
7570	Write a fastq merge up to a file .
7571	Reverse a string .
7572	Generate clustering of pairdealer .
7573	Print progress bar .
7574	Return a list of threads in a thread .
7575	Determine the number of CPU processes .
7576	Execute a structure .
7577	Generate the cumpp table .
7578	Calculate the evidence table .
7579	Return a list of all the result files in the project .
7580	Creates a table for the estimator .
7581	Parse the data from a file .
7582	Call RXML command .
7583	Run raxml .
7584	Try to find the binary binary .
7585	%prog dstat
7586	Generate a list of boots
7587	Return the taxon table as a DataFrame .
7588	Write a NEX file to a file .
7589	Run a fastq dump on the specified SRR .
7590	Check if fields are valid .
7591	Run all the jobs .
7592	Create a new instance of an async request .
7593	Get a list of all constants .
7594	Get a single player .
7595	Get a single clan .
7596	Search for tournaments .
7597	Get a list of all the topwar clans .
7598	Get a list of popular clans
7599	Get all popular players
7600	Get a list of popular tournaments .
7601	Get a list of popular decks
7602	Get all known tournaments .
7603	Get a player .
7604	Get a list of players for a player .
7605	Get a single CLAN .
7606	Search for clans .
7607	Search for tournaments .
7608	Get all cards
7609	Returns a list of all the locations in the API .
7610	Get a specific location .
7611	Get a list of most recent clans .
7612	Get the icon for a clan .
7613	Gets the arena image .
7614	Returns a link to the deck .
7615	Convert a timestamp to a timestamp .
7616	Decorator to wrap a function .
7617	Convert an annotation to an object .
7618	Calculate the duration of a reference .
7619	Evaluate a chord .
7620	Flatten an annotation .
7621	Compute the depth of a reference .
7622	Compute the tempo .
7623	Evaluate a melody
7624	Convert a pattern to a list of observations .
7625	Evaluate a pattern .
7626	r Compute the transcription of a reference .
7627	Add namespace to namespace .
7628	Return a namespace for the given namespace .
7629	Create an array of observations for a given namespace .
7630	Return a copy of the enumerated enumerated values .
7631	Get the values for a given namespace .
7632	List all namespaces .
7633	Return the dtype of the given typespec .
7634	Load the JAM schema .
7635	Import labels from a file .
7636	Return a list of file paths .
7637	Makes a directory path to a directory .
7638	Find all files in a directory .
7639	Get comments for a jam .
7640	Convert a JAM file to a file .
7641	Parse JAM file .
7642	Register a conversion function .
7643	Convert annotation to target namespace .
7644	Return True if the given annotation can be converted to a target namespace .
7645	Convert pitch to contour
7646	Convert notes to MIDI .
7647	Convert a scaper annotation to a tag .
7648	Decorator for deprecated function .
7649	Open a file descriptor .
7650	Load a JAM file .
7651	Remove a prefix from a query .
7652	Return True if the string matches the given query string .
7653	Serialize an object into a dictionary .
7654	Return a summary of the given object .
7655	Update the attributes of this object .
7656	Validate this object .
7657	Append a new observation .
7658	Append a list of records .
7659	Append columns to the table .
7660	Validate the annotations .
7661	Trim the given time range .
7662	Create a slice of data from the data .
7663	Pop the data .
7664	Convert the time series to a list of samples .
7665	Return the HTML representation of the report .
7666	Return the key for the given Observation .
7667	Search for all annotations .
7668	Trim an annotation array .
7669	Return a sliced array of annotations .
7670	Add a new jam .
7671	Save this object to a file .
7672	Validate the JAMS .
7673	Trim the input file .
7674	Slices a JAM file .
7675	Pretty print a JSON object .
7676	Display a list of intervals .
7677	Return the hierarchy of the given annotation .
7678	Plot the pitch .
7679	Display an event .
7680	Display beat position .
7681	Display a piano roll .
7682	Display an annotation .
7683	Display multiple annotations .
7684	Create a click event .
7685	List clicks on an annotation .
7686	Calculate the downbeat for a given annotation .
7687	Create a multi - segment of an annotation
7688	Calculate the pitch contour .
7689	Roll a piano roll .
7690	Convert an annotation to a sonifier .
7691	Validate a schema file .
7692	Handle authentication success .
7693	Check if the given properties are valid .
7694	Perform authentication .
7695	Decorator to set a timeout .
7696	Add a function to the main loop .
7697	Create a roster item from an XML item .
7698	Return the XML representation of this item .
7699	Verify that the roster has been pushed .
7700	Verify roster set .
7701	Gets the list of groups .
7702	Get items by name .
7703	Returns a list of items matching the given group .
7704	Add a new item to the roster .
7705	Remove an item from the list .
7706	Load roster from source .
7707	Save the roster .
7708	Called when the server is received .
7709	Handle an authorized event .
7710	Request a roster .
7711	Process the roster response .
7712	Called when an error is received .
7713	Verify roster push .
7714	Add an item to the roster .
7715	Update a roster item .
7716	Remove an item from the roster .
7717	Send a roster to the server .
7718	Free this node .
7719	Evaluate an XPath expression .
7720	Set the history .
7721	Get the history parameters .
7722	Set the password .
7723	Get the password of the user .
7724	Initialize the Role object .
7725	Initialize a MUC user .
7726	Initialize the status code .
7727	Get all items in the XML node .
7728	Add an item to the user .
7729	Get the muc child node .
7730	Clears the muc node .
7731	Make a join request .
7732	Get the join info .
7733	Make a kick request .
7734	Convert unicode data to unicode .
7735	Sets the size of a string .
7736	Maps a string to a list .
7737	Ensure that the given string is prohibited .
7738	Check that a string is assigned to a string .
7739	Checks if the data is valid .
7740	Ensure that the given method is held .
7741	Configure IO handler .
7742	Prepare pending events .
7743	Prepare IO handler for the given handler .
7744	Called when a method is called .
7745	Called when a loop is done .
7746	Create a Stanza instance .
7747	Process a response .
7748	Process an IQ response .
7749	Process an IQ .
7750	Try to find a list of handlers .
7751	Check if a message is a valid message .
7752	Process a presence message .
7753	Route a Stanza .
7754	Process a Stanza .
7755	Set response handlers .
7756	Set the response handlers .
7757	Setup the handlers for the given handlers .
7758	Send a message to the uplink .
7759	Check if the queue is quit .
7760	Call timeout handlers .
7761	Check if two elements are equal .
7762	Create an error message .
7763	Move session handlers .
7764	Connect to the server .
7765	Disconnect the stream .
7766	Close the stream .
7767	Called when the user is authenticated .
7768	Called when the user is authorized .
7769	Called when a stream is disconnected .
7770	Returns a list of handlers for the server .
7771	Returns the payload class for the given element name .
7772	Unquote a string .
7773	Convert a string to a quoted string .
7774	Compute the response .
7775	Encodes the given value into a string .
7776	Initialize this object from XML .
7777	Create a VCard string .
7778	Initialize a VCard object from XML .
7779	Parses a Rfc24242422 header .
7780	Process a Rfc2425 record .
7781	Return a string representation of the vfc24 .
7782	Updates the current state .
7783	Deactivate the fetcher .
7784	Handle an item .
7785	Handle an error .
7786	Called when the object has expired .
7787	Try to attempt a backup item .
7788	Add an item to the queue .
7789	Get the item at the given address .
7790	Updates the given item .
7791	Purge all items in the list .
7792	Remove a fetcher .
7793	Set the fetcher class .
7794	Register a new fetcher .
7795	Unregister a fetcher .
7796	Register a client authenticator .
7797	Register a server authentication method .
7798	Decorator to register SASL mechanism .
7799	Checks if a password is valid .
7800	Encode the data .
7801	Handles an authentication request .
7802	Decode a BMP string .
7803	Return the display name of this subject .
7804	Verify that the server is valid .
7805	Verify that the given JID matches the common name .
7806	Verify that the given JID is valid .
7807	Verify that the given client is valid .
7808	Create a certificate from a socket .
7809	Parse a SSL socket .
7810	Decode a DER certificate .
7811	Decode a DNS subject .
7812	Decode validity .
7813	Decode a list of alt names .
7814	Create a PEM from a file .
7815	Run the roster .
7816	Add an event handler .
7817	Remove a handler .
7818	Update the handlers .
7819	Dispatch event .
7820	Flush the queue .
7821	Validate a challenge .
7822	Make a response .
7823	Validate the challenge .
7824	Finish the challenge .
7825	Decorator to set the feature URIs .
7826	Decorator to set the payload class name .
7827	Decorator to register a stream element .
7828	Create a new option from a XML node .
7829	Add a new option .
7830	Create a new Field instance from XML .
7831	Add a new field .
7832	Initialize a datastore object .
7833	Add a new item .
7834	Create a submit form .
7835	Initialize a form object from XML .
7836	Register DiscoCacheFetcher .
7837	Remove the node from this node .
7838	Sets the node .
7839	Set the action .
7840	Get the name of this node .
7841	Get the category name .
7842	Set the category .
7843	Get the type of the item .
7844	Set the item type .
7845	Return a list of DiscoItem objects .
7846	Add an item to the Disco .
7847	Checks if a DiscoItem has a particular item .
7848	Returns a list of all the features in this node .
7849	Check if a feature has a feature .
7850	Add a feature .
7851	Remove a feature .
7852	Return a list of DiscoIdentity objects .
7853	Checks if an item is an identity .
7854	Add an identity .
7855	Execute a GET request .
7856	Handle a response .
7857	Error handler .
7858	Create an IQ response .
7859	Create an IQ response .
7860	Send a request to the stream .
7861	Prepare TLS connection .
7862	Handle TLS connection .
7863	Check if TLS certificate is valid .
7864	Main entry point .
7865	Handle the requested software version .
7866	Set an item in the dictionary .
7867	Expire expired items .
7868	Expire an item from the cache .
7869	Decode the attributes of this message .
7870	Decode an error .
7871	Set the payload .
7872	Add a payload to the packet .
7873	Return a list of payloads .
7874	Get the payload from the payload .
7875	Convert an element to unicode .
7876	Bind a resource to a resource .
7877	Handle an authorization response .
7878	Serialize an element .
7879	Add a namespace .
7880	Emits the head of the stream .
7881	Split a name into a namespace .
7882	Create a prefix for the namespace .
7883	Convert a namespace name to a prefix .
7884	Generate namespace declarations .
7885	Emit an element .
7886	Generate a Stanza .
7887	Filter a list of mechanisms .
7888	Log an error message .
7889	Update the presence of the message .
7890	Get a user by nick .
7891	Set the connection to the user .
7892	Join a room .
7893	Leave the room .
7894	Send a message to a group .
7895	Sets the subject of the group .
7896	Change the nickname .
7897	Get the JID of this room .
7898	Process a configuration form .
7899	Request configuration form .
7900	Process the configuration .
7901	Configure a room .
7902	Set the connection to this room .
7903	Set the handlers for messages .
7904	Join a room .
7905	Delete a room .
7906	Process a groupchat message .
7907	Process an error message .
7908	Process presence error message .
7909	Checks if a message is available .
7910	Process the presence of a message .
7911	Get the value of a setting .
7912	Add a new setting .
7913	Validate string list .
7914	Return a validator that returns a valid integer value .
7915	List all definitions .
7916	Returns an argument parser .
7917	Check if two domains are equal .
7918	Validate IP address .
7919	Create a JID from a string .
7920	Prepare local part .
7921	Prepare the domain part .
7922	Prepare a resource .
7923	Return a string representation of this JID .
7924	Check if the network is available .
7925	Check if ipv4 is available
7926	Shuffle a list of records .
7927	Reorder a list of records .
7928	Stop all threads .
7929	Start the thread .
7930	Resolve a hostname .
7931	Send a message to a user .
7932	Connect to the server .
7933	Connect to the server .
7934	Compute the handshake hash .
7935	Handles authentication handshake .
7936	Sets the current state .
7937	Connect to the server .
7938	Connect to the host .
7939	Resolve the DNS server .
7940	Resolve SRV .
7941	Resolve hostname .
7942	Resolve addresses for a given address .
7943	Start connection .
7944	Connect to the transport .
7945	Attempt to connect to the socket .
7946	Write data to the socket .
7947	Set the target stream .
7948	Send a stream header .
7949	Send stream closing tag .
7950	Send an element to the socket .
7951	Wait for readability .
7952	Wait for writeability .
7953	Handle the write queue .
7954	Start TLS connection .
7955	Get the certificate from the socket .
7956	Start a TLS handshake .
7957	Perform TLS handshake .
7958	Handle read requests .
7959	Check if the connection is connected .
7960	Handle an error .
7961	Disconnect the TCP transport .
7962	Close the connection .
7963	Read data from the stream .
7964	Send a TCP transport event .
7965	Start the stream .
7966	End a tag .
7967	Read data from the stream .
7968	Run IOThreads .
7969	Remove a handler from the pool .
7970	Add a timeout handler .
7971	Start the timeout thread .
7972	Remove timeout handler .
7973	Start the event handler .
7974	Stop all the io handlers .
7975	Loop through the queue .
7976	Reset the client .
7977	Post connect to the server .
7978	Called when the client is authenticated .
7979	Attempt to attempt to authenticate the stream .
7980	Wait for an authentication timeout .
7981	Handle authentication error .
7982	Finish authentication .
7983	Handle authentication error .
7984	Receive registration form .
7985	Submit registration form .
7986	Respond to the registration .
7987	Request software version .
7988	Setup the stream element handlers .
7989	Process an event .
7990	Called when the transport is connected .
7991	Send a stream start .
7992	Send a stream error .
7993	Restart the stream .
7994	Send a Stanza .
7995	Receive a packet .
7996	Process a stream error .
7997	Set peer authentication .
7998	Set the authenticated user .
7999	Return the authentication properties .
8000	Fix out the out of the outgoing message .
8001	Fix the incoming Stanza .
8002	Converts an XML node into a Form object .
8003	Returns the form for this instance .
8004	Submit a form to the register .
8005	Loads the delay from the XML node .
8006	Handle a read request .
8007	Make an error response .
8008	Activate a plan .
8009	Execute a BillingAgreement .
8010	Decorator for webhook .
8011	Create a new instance from a request .
8012	Validate the API key .
8013	Create the upstream application streams .
8014	Send a message to the application .
8015	Dispatch a message .
8016	Receive a JSON message .
8017	Disconnect from websocket .
8018	Disconnect the application .
8019	Send a message to websocket .
8020	Accept a websocket message .
8021	Close the websocket .
8022	Creates a new instance of the market .
8023	Decorator for retries .
8024	Handles the button action .
8025	Compile multiple glob patterns .
8026	Given a list of paths return a list of paths .
8027	Return a list of files that match the given classifier .
8028	Convert a function to a group of paths .
8029	Return the size of a file .
8030	Group content by content .
8031	Compare two files .
8032	Prune UI .
8033	Find duplicate files .
8034	Write text to stdout .
8035	Summarize text .
8036	Lex rank of sentences .
8037	Returns a summarizer for the given name .
8038	Returns the code mapping for the given message .
8039	Return True if the name is public .
8040	Return True if the decorator is public .
8041	Return True if the class is public .
8042	Parse a file .
8043	Consume a token .
8044	Perform leapfrog .
8045	Parse a docstring .
8046	Parse a list of definitions .
8047	Parse from import statement .
8048	Parse a list of imports .
8049	Run the parser .
8050	Load the source file .
8051	Determines the darkest color of the image .
8052	Parse a Kuler theme .
8053	Listen for a socket .
8054	Handle the command .
8055	Runs a command .
8056	Escape the line argument .
8057	Restart the bot .
8058	Play the bot .
8059	List variables .
8060	Show fullscreen prompt .
8061	Display the window .
8062	Show help command .
8063	Set the value of a variable .
8064	Parse a command line .
8065	Draw a diagonal of the given coordinates .
8066	Get the source of a document .
8067	Load the grammar .
8068	Refresh the contents of the source .
8069	Return a random child element .
8070	Replace unicode characters in a string .
8071	Check if url is not found
8072	Check if a URL is a type
8073	Return a list of requirements .
8074	Create a new image .
8075	Draw a rectangle .
8076	Set the rect mode .
8077	Set the ellipse mode .
8078	Draws a path to a bar .
8079	Draws a star at the start point .
8080	Relocate the path to the current path .
8081	Revert the path to the current path .
8082	Relocate a path to a path .
8083	Set the current mode .
8084	Scale the canvas .
8085	Return the color of the canvas .
8086	Sets the stroke width .
8087	Set the font file .
8088	Sets the font size .
8089	Draw a text .
8090	Return the height of the given text .
8091	Set the background color of the graph .
8092	Draw a node .
8093	Set the label of a node .
8094	Draw a set of edges .
8095	Add edge to path
8096	Add a label to the graph .
8097	Draw a path .
8098	Create a new style .
8099	Return a copy of the stylesheet .
8100	Apply the style to the graph .
8101	Return a copy of this graph .
8102	Open socket .
8103	Load all profiles .
8104	Update the manager .
8105	Callback for callback .
8106	Copy files from src to dst .
8107	Convert an object to a JSON encoder .
8108	Search for google search .
8109	Search for images .
8110	Search for a query .
8111	Search for blogs .
8112	Return the unique identifier of the given ID .
8113	Return the age of a file .
8114	Return the angle between two points .
8115	Return the distance between two points .
8116	Compute the intersection between two lines .
8117	Return a list of points in a circle
8118	Invert the matrix .
8119	Transform a path .
8120	Return the intersection of this rectangle .
8121	Return the union of this rectangle .
8122	Print an error message .
8123	Draw a text path to a text .
8124	Draws the corners of a cube .
8125	Draws the corners of the curve .
8126	Search for Yahoo search
8127	Search for images
8128	Search for articles
8129	Suggests a query .
8130	Add a layer to the canvas .
8131	Merge two layers .
8132	Export the image to a file .
8133	Delete the layer .
8134	Updates the layer .
8135	Updates the layer .
8136	Return a copy of this image .
8137	Change brightness .
8138	Change the contrast .
8139	Deserialize the image
8140	Invert the image
8141	Translate the image to the current position .
8142	Scale image .
8143	Rotate image .
8144	Flip image .
8145	Sharpen image .
8146	Get the levels of the image .
8147	Calculate the hue of the image
8148	Load data from the context .
8149	Check if the given iteration should be run .
8150	Calls the frame limit .
8151	Add a new variable .
8152	Convert hexadecimal to RGB color
8153	Return a traceback from the given source .
8154	Create a new database .
8155	Create a new table .
8156	Create a new index .
8157	Close the connection .
8158	Execute a SQL query
8159	Edit a record .
8160	Remove a record from the database .
8161	Get next event .
8162	Publish an event .
8163	Sets the transformation mode .
8164	Recursively inherit from the canvas .
8165	Load the edited source .
8166	Reload the compiled functions .
8167	Run the Tenuum .
8168	Run the live agent .
8169	Run the live context .
8170	Return the difference between two boids .
8171	Calculate the alignment of this branch .
8172	Limits the vector .
8173	Return the angle of this vector .
8174	Calculate the goal .
8175	Update the mesh .
8176	Iterate over a string .
8177	Return a copy of this graph .
8178	Checks if a node is reachable .
8179	Clear the graph .
8180	Add a new node .
8181	Remove a node from the graph .
8182	Remove an edge from the graph .
8183	Return the edge between two edges .
8184	Update the layout .
8185	Returns the offset of the node .
8186	Draw the graph .
8187	Remove all nodes from the graph .
8188	Calculate the centralness of the brandness .
8189	Compute the eigenvalues of the matrix .
8190	Return a list of nodes in the graph .
8191	Return a list of nodes by treshold .
8192	Get nodes by category
8193	Return a list of nodes .
8194	Return the density of the graph .
8195	Load a cluster from the cluster .
8196	Click a node .
8197	Generate a bzier curve .
8198	Return the angle between two points .
8199	Transform a local coordinate to a local coordinate .
8200	Set the bot .
8201	Set settings .
8202	Get the size of the file .
8203	Set size .
8204	Snapshot the given target .
8205	Flush the frame .
8206	Checks if two points are overlap .
8207	Calculate the direction of the ray .
8208	Calculates the angle between two points .
8209	Calculates the coordinates of a point .
8210	Check if a point contains a point
8211	Insert a point into the path
8212	Draw a freehand button .
8213	Return a string representation of the SVG .
8214	Gets the mouse button down .
8215	Show the variables window .
8216	Hide the variable window .
8217	Trigger the fullscreen action .
8218	Show fullscreen .
8219	Unfullscreen .
8220	Close the window .
8221	toggle fullscreen
8222	Toggle the widget .
8223	Run the main loop .
8224	Called when the mouse is moved .
8225	Called when a key pressed .
8226	Create a new instance of the given class .
8227	Make a colorable instance .
8228	Show the image .
8229	Imports the given library name .
8230	Sets the size of the canvas .
8231	Returns the speed of the video .
8232	Set callbacks .
8233	Return the complement of the given color .
8234	Return a copy of the complementary color .
8235	Split a color into a list of colors .
8236	Return a copy of the left - side color .
8237	Return a copy of the right color .
8238	Return a copy of a color .
8239	Return a set of colors for a given color .
8240	Convert a color to a list of colors .
8241	Compute a compound color .
8242	An outline of a path .
8243	Guess the name of a color .
8244	Calculate a shader from a rectangle .
8245	Return a dictionary of all files in the cache .
8246	Generate a morgue file
8247	Convert a string to RGB color .
8248	Rotate a YB by angle .
8249	Return the nearest hue of the hue .
8250	Add a new color to the current color .
8251	Draw a rectangle .
8252	Convert image to RGB color
8253	Convert a string to RGB color .
8254	Return the overlap of the current color
8255	Return a copy of this ColorList .
8256	Determines the lowest color of the cluster .
8257	Calculate the average of the color .
8258	Sort the color list by distance .
8259	Return a copy of this collection .
8260	Sort a list of colors .
8261	Return a copy of this color .
8262	Repeat a number of colors .
8263	Swatches the image to the screen .
8264	Creates a swarm .
8265	Interpolate a list of colors .
8266	Create a new color list .
8267	Return a copy of this ColorRange .
8268	Return a random color .
8269	Returns True if the color is contained in the current color .
8270	Return a XML representation of the color .
8271	Save the XML to the cache .
8272	Load a color from the cache .
8273	Generate a random color .
8274	Generate a list of random colors .
8275	Combine two colors .
8276	Generate a swatch with the given color .
8277	Handle a frame .
8278	Iterate over all sessions .
8279	Append an element to the list .
8280	Render a closure .
8281	Calculate the line at the given point .
8282	Calculate the line length of a line .
8283	Calculate the point of a curve .
8284	Calculate the length of the segments .
8285	Get the length of this segment .
8286	Get all elements in the path .
8287	Compute the adjacency of a graph .
8288	Get a child by name .
8289	Return the Sbot sbot executable .
8290	Return the description of the tag .
8291	Return a list of keywords .
8292	Sort a list .
8293	Return a list of unique elements .
8294	Return a list of clique nodes in a graph .
8295	Return a list of cliques in a graph .
8296	Render the renderer .
8297	Print a hexadecimal string .
8298	Read a long from the data .
8299	Decode OSC .
8300	Handle incoming data .
8301	Dispatch a message .
8302	Add a callback .
8303	Finds the examples in the install directory .
8304	Return True if the connection is closed .
8305	Sends a live source to the server .
8306	Close the process .
8307	Get command responses from the queue .
8308	Convert Cairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairocairo
8309	Create a PangoCairo object .
8310	Check if a string is a list
8311	Draw a mathmath image .
8312	Draw a list of lines .
8313	Draw a table .
8314	Parse the markup .
8315	Parse links from markup .
8316	Parse a Wikipedia image .
8317	Parses a balanced image .
8318	Connect a table to a table .
8319	Parse a Wikipedia page .
8320	Parse a list of categories .
8321	Return a list of all important elements .
8322	Sanitize value .
8323	Check if a list is a list .
8324	Check if a string is a string .
8325	Build a tag map .
8326	Setup the next sibling .
8327	Extract the element from the parent .
8328	Find the last child of this object .
8329	Find next element .
8330	Find all elements matching the given name .
8331	Find next sibling .
8332	Find the next sibling of this node .
8333	Find the previous element .
8334	Find all elements that match the given name .
8335	Find the first sibling of the document .
8336	Find all siblings of the given name .
8337	Find a parent node by name .
8338	Find all parents matching the given name .
8339	Find all items in a generator .
8340	Convert string to unicode .
8341	Convert a hash .
8342	Convert an XML string into a unicode string .
8343	Decompose the contents of the tag .
8344	Render the contents of this tag .
8345	Find a matching element .
8346	Find all elements matching the given name .
8347	Get attribute map
8348	Convert a charref to a Unicode string .
8349	Checks if the given name is a self - closing tag .
8350	Convert text to string .
8351	Handle parsing .
8352	Handle a character reference .
8353	Parse a declaration .
8354	Parses the given attributes .
8355	Subscribes a MS character .
8356	Convert data to unicode
8357	Determines the encoding of XML data .
8358	Create a shoebot example .
8359	Scale the context to the context .
8360	Draw the widget .
8361	Creates a new context .
8362	Encode an object to a string .
8363	Returns a dictionary of key - value pairs .
8364	Return the filename for the given frame .
8365	Creates a new RContext .
8366	Called when rendering is finished .
8367	Output a closure .
8368	Parse the description .
8369	Create a Cairo canvas .
8370	Create a bot .
8371	Run the given src .
8372	Save the file to the file .
8373	Called when a widget is changed .
8374	Add a new variable .
8375	Deletes a variable .
8376	Parse a SVG document .
8377	Get attribute value .
8378	Add color info to path
8379	Return a copy of this event .
8380	Drag a node .
8381	Handles the popup .
8382	Return the textpath for the given index .
8383	Updates the frequency .
8384	Draws the text for this node .
8385	Write a file to a file .
8386	Append a filename to a filename .
8387	Check if a file exists .
8388	Merge the configs with the given tweaks .
8389	Write text to file .
8390	Validate the file .
8391	Checks that the given class is valid .
8392	Return the name of a class .
8393	Parse pylint output .
8394	Main entry point .
8395	Print help information .
8396	Create a new Transformer .
8397	Get transform object .
8398	Compute the breaks of the given range .
8399	Transform a datetime into a datetime object .
8400	r rescale x .
8401	r Calculates the values of the given x .
8402	r Calculates the maximum value of x .
8403	Convert an array to an integer .
8404	Squish the given x .
8405	Return a list of values with the given range .
8406	Return True if x is zero .
8407	Expand a range .
8408	Expand a range from a range .
8409	Extend the major breaks .
8410	Get the best units of a sequence .
8411	Returns the scaled range of limits .
8412	Convert numeric numbers to a timestamp .
8413	Convert datetime to numeric value .
8414	Round a scalar .
8415	Return the minimum value of x .
8416	Return the precision of x .
8417	Sort multiple types .
8418	Return the nearest integer .
8419	Check if x is a positive integer .
8420	Return True if x is equal to the magnitude of magnitude
8421	Return a list of labels .
8422	Tidy up labels .
8423	Generate a color palette .
8424	Generate a husl color .
8425	Generate a color palette .
8426	Generate a color palette .
8427	Return a palette for a given type .
8428	Calculate a gradient of a color .
8429	Return a cmap for a color .
8430	Calculate a discrete palette .
8431	Desaturize a color .
8432	Given a list of values return a new palette .
8433	Return a list of cubehelix colors .
8434	Apply a mask to a palette .
8435	Map x to values .
8436	Map x to a palette .
8437	Register a new EnvVar .
8438	Run a hook .
8439	Generate the files in the repo .
8440	Setup a new repo .
8441	Parse a link header .
8442	Search for a github code .
8443	List all cookies in the GitHub API .
8444	Update a temple package .
8445	Lists the project s SSH repositories .
8446	Switches the template .
8447	Check if git repo is in git repo
8448	Check if a branch exists .
8449	Check if a branch exists .
8450	Check if the environment variable exists .
8451	Check if a temple config file exists .
8452	Get current branch .
8453	Clean up the current branch .
8454	Determine if a cookie is changed .
8455	Copies a template to a directory .
8456	Checks if the template is up to the latest version .
8457	Determine if a new Cookiecutter is needed .
8458	Execute a command .
8459	Read temple config file .
8460	Write a temple config file .
8461	Get cookiecutter .
8462	Set the value of a command .
8463	Perform an HTTP request .
8464	Deploy a deploy to the specified target .
8465	Determine if file is detected .
8466	Run the request .
8467	Set path .
8468	Parse a config value .
8469	Returns the system name of the system .
8470	Execute the command .
8471	Print a debug message .
8472	Sets up all the checksers .
8473	Add config to config
8474	Return a dictionary of config values from the config .
8475	Returns an instance of the class instance .
8476	Execute massive method .
8477	Runs the analysis .
8478	Install the package .
8479	Sets the potential value .
8480	Get config value .
8481	Get environment variable .
8482	Get a key from the environment .
8483	Set the value of the given name .
8484	Update the values from a dictionary .
8485	Load the settings from the config .
8486	Get a setting by name .
8487	Initialize the connection .
8488	Loads the configuration from the config .
8489	Get a watcher for the given prefix .
8490	Start the watcher .
8491	Parse a list of hosts .
8492	Main entry point .
8493	Handle a module .
8494	Print an error message .
8495	Get the filename of a module .
8496	Parses the given file and outputs it .
8497	Output a list of calls .
8498	Format a call .
8499	Colorize output .
8500	Map arguments to a string .
8501	Return the value as a namespace .
8502	Return the value as a string .
8503	Return a callable as a string .
8504	Get the key .
8505	Return the default value of the default value .
8506	Return the default value as a string .
8507	Get the names of the parameter names .
8508	Creates a Dataset from a dataset .
8509	Fit the training dataset .
8510	Predict the model for the given model .
8511	Load data from yaml file .
8512	Creates a kernel kernel .
8513	Fit an estimator to the estimator .
8514	Merge two dictionaries .
8515	Format a timedelta object .
8516	Raises an error if the input is not finite .
8517	Check if x is not a positive number .
8518	Create a Config object from a dict .
8519	Return the SHA1 hash of the file .
8520	Plot a T - SNE .
8521	Plot a plot of a plot .
8522	Add an int variable .
8523	Add a float variable .
8524	Add an enumeration variable .
8525	Log a callback for a function .
8526	Try to find a match .
8527	Add a child to this tree .
8528	Parse a TCP packet .
8529	Generate a report
8530	Compute the difference between two structures .
8531	Return a list of structs between two arguments .
8532	Determine if two messages are equal .
8533	Check if this object isomorphic .
8534	Read data from the given data .
8535	Return a list of packets .
8536	Pop the next packet .
8537	Push a packet into the queue .
8538	Run the queue .
8539	Gets a disk image by name .
8540	Read the config file .
8541	Save the config file .
8542	Get user username .
8543	Get password for the user .
8544	Get a datacenter
8545	Get a datacenter by name .
8546	Delete a datacenter
8547	Get firewall rule .
8548	Delete a firewall rule .
8549	Create a firewall rule .
8550	Update firewall rule .
8551	Delete an image .
8552	Update an image .
8553	Delete an IP block
8554	Reserve an IP block .
8555	Retrieve a LAN .
8556	List lans for a datacenter .
8557	Delete a LAN .
8558	Create a new LAN .
8559	Update a LAN .
8560	Get a list of LAN members
8561	Get a load balancer
8562	List load balancers .
8563	Delete a load balancer
8564	Create a load balancer .
8565	Update a load balancer .
8566	Get the list of member balancer members .
8567	Add a load balancer .
8568	Get the balance of a load balancer .
8569	Remove a balancer .
8570	Get a specific location .
8571	Retrieve a NIC .
8572	Returns a list of nics for the specified server .
8573	Delete a nic
8574	Create a new NIC .
8575	Update a NIC .
8576	Get a request .
8577	Retrieve a server .
8578	List servers .
8579	Delete a server
8580	Create a new server .
8581	Update a server .
8582	Gets the volumes attached to the specified server .
8583	Get the attached volume .
8584	Attach a volume .
8585	Returns a list of CDroms for the specified server .
8586	Retrieve a CDROM from a datacenter .
8587	Attach a CDROM .
8588	Start a server .
8589	Stop a server .
8590	Reboot a server .
8591	Create a snapshot .
8592	Restore a snapshot .
8593	Remove a snapshot .
8594	Get a single group .
8595	Create a new group .
8596	Update a group .
8597	Delete a group
8598	List shares .
8599	Get a share .
8600	Add a share .
8601	Delete a share .
8602	Get a user .
8603	Create a new user .
8604	Update a user .
8605	Delete a user .
8606	List users .
8607	Add a user to a group .
8608	Remove a user .
8609	List all available resources .
8610	Get a single resource .
8611	Get a volume .
8612	List volume volumes .
8613	Delete a volume
8614	Create a new volume .
8615	Wait for a response .
8616	Convert a string to a string .
8617	Convert a string to camelcase .
8618	Find item by name .
8619	Get information about a server .
8620	Get a list of server states .
8621	Retrieve the current user .
8622	Get user by id .
8623	Get the user id for this user .
8624	Add a user to the user
8625	Set user jobs .
8626	Delete user jobs .
8627	Get a list of users .
8628	Create a new project .
8629	Create a project .
8630	Get a list of projects .
8631	Get a project by id .
8632	Search for projects .
8633	Place a project .
8634	Get a list of bids for a given project .
8635	Get a list of milestones for a given project .
8636	Get a milestone by id .
8637	Advance a specific bid .
8638	Revoke a bid .
8639	Accept a project bid .
8640	Retrieves a bid .
8641	Highlights a specific bid .
8642	Create a new milestone
8643	Create a track .
8644	Update a track .
8645	Get a track by ID .
8646	Create a new milestone request .
8647	Accept a milestone request .
8648	Reject a milestone request .
8649	Delete a milestone request .
8650	Post a review .
8651	Get a list of jobs
8652	Create a new thread .
8653	Create a thread .
8654	Get a list of messages for a given query .
8655	Search for messages .
8656	Get a list of threads .
8657	Validate a zipcode .
8658	Return a list of zips that match the given partial_code .
8659	Return a list of zips matching the given keyword .
8660	Check if the given name is valid .
8661	Create a PaletteEntry from a config .
8662	Migrate a file to storage .
8663	Generate a password .
8664	Build a dictionary from keys and values .
8665	Prints a list of available keys .
8666	Initialize a stash .
8667	Stash a key .
8668	Lock a key .
8669	Unlock a key .
8670	Get a key .
8671	Delete a key from the stash .
8672	List keys .
8673	Purge a stash .
8674	Export keys to the stash .
8675	Load all keys from a file .
8676	Migrates all keys in the stash .
8677	Execute a ssh command .
8678	Create a new key .
8679	Get the value of a key .
8680	List all keys in the store .
8681	Delete a key .
8682	Purges the stash .
8683	Export all keys .
8684	Load a stash .
8685	Encrypt a value .
8686	Decrypt a hexified string .
8687	Get a key by name .
8688	Delete a key .
8689	Construct a key from values .
8690	Put a key .
8691	Put a key .
8692	Initialize the index .
8693	Initialize bucket .
8694	Print a terminal .
8695	Sets the baudrate rate .
8696	Set the timeout .
8697	Clear the buffer buffers .
8698	Read data from the server .
8699	Write data to the port .
8700	Exchange output .
8701	Close the port .
8702	Prepare the function to be executed .
8703	Download a file .
8704	Read a file from a file .
8705	Write a file to the device .
8706	Verify a file .
8707	Execute a file .
8708	Checks if a packet is received .
8709	Write data to the stream .
8710	Write a chunk to the server .
8711	Read data from the socket .
8712	List all files
8713	Execute a file .
8714	Format file format
8715	Print a file .
8716	Get the number of nodes .
8717	Compile a file .
8718	Remove a file
8719	Backup all files in a directory .
8720	Upload files to the node .
8721	Perform a download operation .
8722	List all files .
8723	Display the given content .
8724	Convert timestamp to UTC .
8725	Create a new command from the given time .
8726	Localize datetime .
8727	Create a new date based on the given date .
8728	Convert a time to a string .
8729	Convert a string to a datetime object .
8730	Returns the nearest year for the given day .
8731	Returns the number of seconds in seconds .
8732	Convert a timedelta to a datetime .
8733	Parse a string .
8734	Divide two seconds .
8735	Generate a generator for a date range .
8736	Construct a datetime object .
8737	Perform a GET request .
8738	Get port count
8739	Attempt to allocate a v6 address .
8740	Create a flip .
8741	Create a floating IP
8742	Update floating IP .
8743	Delete floating ip
8744	Get floating IP address .
8745	Get a list of floating IP addresses .
8746	Get the number of floating IP addresses .
8747	Create a scaling ip .
8748	Update a scalingip
8749	Delete a scalingip
8750	Get scaling ip .
8751	Get a list of scalingips for a given tenant .
8752	Determine if the vifet is an interface .
8753	Partition a list of vifs .
8754	Return a list of security groups that have been changed .
8755	Runs the security group .
8756	Delete tenant quotas .
8757	Validate a subnet .
8758	Get a subnet .
8759	Get all subnets for a tenant .
8760	Get the number of subnets .
8761	Delete a subnet .
8762	Perform an async update rule .
8763	Update security group rule .
8764	Get the public net id .
8765	Decorator to wrap a function .
8766	Fix missing tenant_id .
8767	Validate allocation pools .
8768	Add a job to the context .
8769	Create a job .
8770	Select the open port for the given switch .
8771	Add default tz_tz_bindings .
8772	Remove defaulttz_tz_bindings .
8773	Get list of lswitches for a network .
8774	Load a worker plugin from a module .
8775	Return a list of plugin plugins .
8776	Starts the server and starts the server .
8777	Generate chunks from iterable .
8778	Check if two ranges are overlapping .
8779	Attempt to allocate a segment .
8780	Delete all lock holders .
8781	Create lock holder .
8782	Select the IPAM strategy for the given network .
8783	Get information about the network .
8784	Create a port
8785	Update a port .
8786	Determine the port for the given port .
8787	Add a value to the model .
8788	Validate the model .
8789	Remove tags from model .
8790	Pop a tag from the model .
8791	Check if model has a tag .
8792	Validate the given value .
8793	Get all tags for the given model .
8794	Set all tags .
8795	Serialize rules .
8796	Serialize groups .
8797	Apply security group rules to the device .
8798	Get the security groups for the given interfaces .
8799	Update the group states for the given vifs .
8800	Run all migrations .
8801	Run migrations .
8802	Send notification to network
8803	Notify IP address .
8804	Build an IP address .
8805	Build a list of IP addresses .
8806	Calculate the period for the given hour .
8807	Convert a job to a dictionary .
8808	Get mac address range .
8809	Delete mac address range .
8810	Delete segment allocation range .
8811	Decorator that returns a filter that can be used to create a response .
8812	Get the list of IP addresses for the given segment .
8813	Get unused IPs .
8814	Get the interfaces from the Xapi .
8815	Update the network interfaces .
8816	Update a network .
8817	Get a network .
8818	Get a list of networks .
8819	Get number of networks
8820	Delete a network .
8821	Make an IP address
8822	Main function for testing
8823	Start rpc connections .
8824	Returns the admin context .
8825	Update a security group .
8826	Populate subtasks .
8827	Update ports for the given port id .
8828	Gather all ports associated with a group .
8829	Update a security group rule .
8830	Find segment allocations .
8831	Send a message to the socket .
8832	Given a list of arguments return None .
8833	Checks if two strings are equal .
8834	Return True if two arguments are less than equal .
8835	Return True if two arguments are equal .
8836	Return the difference between two numbers .
8837	Merge two lists .
8838	Get a variable from data .
8839	Return a list of missing values .
8840	Return a list of required arguments .
8841	Given a dictionary of values return the results .
8842	Indent indentation .
8843	Uninds the editor .
8844	Handle indentation .
8845	Checks if the line is a block start .
8846	Update terminal colors .
8847	Handle mouse move event .
8848	Handle mouse press event .
8849	Setup the actions for the interactive console .
8850	Setup the editor .
8851	Open a file .
8852	Updates the editor .
8853	Open the dialog .
8854	Saves the saved file .
8855	Setup the stylesheet .
8856	Called when the current tab is changed .
8857	Called when the user is run .
8858	Handles the given assignment .
8859	Generate a list of calltips .
8860	Gets a list of assignments .
8861	Return a list of names for a given request .
8862	Return a list of docstrings .
8863	Run PEP8 analysis .
8864	Convert a name to an icon .
8865	Return a list of completions
8866	Generate python patterns .
8867	Checks the cursor for the cursor .
8868	Return a list of unique elements .
8869	Read a BGEN file .
8870	Create a metadata file .
8871	Match the given subset of the given subset .
8872	Match the given subset of lines .
8873	Check if an instance is an instance of type .
8874	Touch a file .
8875	Calculate the allele frequency frequency .
8876	Compute the dosage of an expec .
8877	Compute the expectation expectation for the allele .
8878	Find the name of the library .
8879	Fit the model .
8880	Predict the probability of a dataset .
8881	Compute the optimal confidence matrix .
8882	Predict the probability of the model .
8883	Return True if the model is equal .
8884	Fit the model to the model .
8885	Fit the data to an array .
8886	Finalize the headers .
8887	Fit the model to the model .
8888	Fit the model to the model .
8889	Determine the foreign key of the model .
8890	Serialize this object .
8891	Deserialize a dict .
8892	Return the default value for this instance .
8893	Calculate a random UUID .
8894	Add to deleted models .
8895	Handle error handling errors .
8896	Returns True if the polling response is complete .
8897	Calculate the frequency between fic2 and fic2 .
8898	Deserialize a profile from the database .
8899	Dequeues the database into the store .
8900	Sets the maximum number of parameters in the database .
8901	Authenticate user credentials .
8902	Check if the model_ref_ref_fk_ref_fk_ref_fk_ref_fk_ref_fk_ref_fk_fk_ref_fk_fk_fk_fk_fk_fk_fk_fk_fk_model_fk_fk_fk_fkk_fk_fk_fkk_fk_fk_fk_fk_fk_fkkkk_fkk_fkk_fkkkk
8903	Add syncable models .
8904	Perform a GET request .
8905	Create a new access token .
8906	Save a service .
8907	List all services .
8908	Fetch a service by name .
8909	Fetch service by url
8910	Delegate to OSS proxy .
8911	Creates a new OWS security token .
8912	Include Twitcher API .
8913	Save a service .
8914	List all available services .
8915	Fetch service by name .
8916	Retrieve the certificate with the given token .
8917	Get a parameter from the request .
8918	Get the version of the service .
8919	Get the service s service .
8920	Get request type .
8921	Gets the OWS API version .
8922	Convert datetime to a timezone .
8923	Return the base URL of the service .
8924	Verify that the request is valid .
8925	Get the egg_info file .
8926	Make a bump version .
8927	Distributed distribution .
8928	Prepare setup .
8929	Run pylint .
8930	Determine if the workdir is clean .
8931	Generate the description of the project .
8932	Capture a command .
8933	Run a command .
8934	Determine if there is a git repository .
8935	Return a SCM provider for the given workdir .
8936	Prints an error .
8937	Get the user credentials for the user .
8938	Start the Sphinx build .
8939	Creates a zip file with the given docs .
8940	Create a Pypi .
8941	Creates a webdav file for the given release .
8942	Upload a release to the given release .
8943	Search for a file in a directory .
8944	Push a directory to a directory .
8945	Return a temporary file as a temporary file .
8946	Run a command .
8947	Run a command .
8948	Print a message .
8949	Print a warning message .
8950	Print an error message .
8951	Get the URL of the devis .
8952	Get project root directory .
8953	Load the tasks module .
8954	Convert a glob to a regular expression .
8955	Parse a glob pattern .
8956	Compile a glob expression .
8957	Determine if the given path is included .
8958	Iterate over all files in the directory .
8959	Build the changelog .
8960	Clean up project files .
8961	Build Sphinx Sphinx .
8962	Freeze piped requirements .
8963	Convert datetime to iso format .
8964	Get the registered executable name .
8965	Return a list of paths matching the command .
8966	Try to find a command .
8967	Perform a step step .
8968	Decrypt a message .
8969	Encrypt a message .
8970	Perform a step .
8971	Returns the next key .
8972	Connect to another mesh .
8973	Check if this mesh is connected to another mesh .
8974	Creates a loader loader .
8975	Walk a knitting pattern .
8976	Get the contents of the file .
8977	Write data to file .
8978	Write data to a file .
8979	Write a file to a file .
8980	Create a temporary file path .
8981	Set the color of a pixel .
8982	Sets the color of the image .
8983	Convert an instruction to an ID .
8984	Convert an instruction to a string .
8985	Convert an instruction to a svg dictionary .
8986	Called when an instruction is changed .
8987	Returns the last mesh of the mesh .
8988	Returns the last mesh of the mesh .
8989	Returns the first mesh of the mesh .
8990	Returns the first mesh of the mesh .
8991	Returns a list of rows before producing a row .
8992	Return a list of rows after consumed .
8993	Returns a list of files in the given folder .
8994	Return the relative path of a module .
8995	Return the relative path of a module .
8996	Return a path to a file .
8997	Convert url to string
8998	Convert a string to an object .
8999	Dump the knitting pattern .
9000	Return a list of elements that are unique .
9001	Build the SVG dictionary .
9002	Register an instruction .
9003	Compute the scale for the given instruction .
9004	Return a SVG representation of the knitting pattern .
9005	Add a new pattern .
9006	Convert Instruction to SVG .
9007	Move the current row to the given row .
9008	Returns the index of the instruction in the row .
9009	Return the next instruction in the row .
9010	Return the index of the first element in the row .
9011	Returns the index of the first occurence in the row .
9012	Initialize the instance .
9013	Create a new pattern set .
9014	Fill the pattern collection with the given values .
9015	Create a new row .
9016	Create an instruction in the given row .
9017	Creates a new pattern .
9018	Create a new pattern .
9019	Return a list of rows .
9020	Connects to the given connections .
9021	Create a new pattern set .
9022	Add a new row .
9023	Write bytes to file .
9024	Write a string to the file .
9025	Generate a new svy .
9026	Insert a list of definitions .
9027	Get the width of the image .
9028	Return all instructions in the row .
9029	Step the given row .
9030	Expand the given mesh .
9031	Expand the given mesh .
9032	Place a row in the grid .
9033	Iterate over the list of tuples .
9034	Return the instruction in the grid .
9035	Iterate over all instructions .
9036	Iterate over all rows in the grid .
9037	Iterate over all connected connections .
9038	Return the bounding box bounding box .
9039	Dump the object to a file .
9040	Add an instruction .
9041	Return an instance of the given specification .
9042	Evaluate the eigenve .
9043	Calculate the gradient of the matrix .
9044	Listen a function to listen to a function .
9045	Compute the gradient of the model .
9046	r Compute the solution of a matrix .
9047	Generate a multivariate normal distribution .
9048	Calculate the gradient of this matrix .
9049	Compute the B .
9050	Generate a random sample from the given offset .
9051	Sample polynomial .
9052	Return the covariance of the covariance matrix .
9053	Calculate the posterior mean of the posterior
9054	Compute the posterior covariance of the posterior .
9055	Perform fast scan .
9056	Sample the likelihood of the model .
9057	Compute the EQs zeros for a given n .
9058	Calculate the gradient of the model .
9059	Computes the gradient of the model .
9060	Calculate the beta coefficient
9061	Calculate the beta covariance of the model .
9062	Fixes the model .
9063	Unfix the model .
9064	Fit the model .
9065	Return the value of the LML .
9066	Returns the delta of the logistic .
9067	Calculate the optimal scale of the model .
9068	Calculate the linear scale of the model .
9069	Returns the number of samples in the dataset .
9070	Calculate the value of the model .
9071	Initialize the model .
9072	Build an engine session .
9073	Get the connection for the given connection .
9074	Setup a custom SMTP factory .
9075	Send a multipart multipart message .
9076	Start the connection .
9077	Decorator for downloading data from url .
9078	Decorator to get dataframe from data_url
9079	Decode a timestamp .
9080	Returns a list of providers that match the given criteria .
9081	Finds the concept of the given query .
9082	Returns a list of all the concepts .
9083	Get a concept by URI .
9084	Create a local backend .
9085	Update the backend .
9086	Sort a list of concepts .
9087	Request the state of the server .
9088	Updates the loop .
9089	Iterate over all namespace models .
9090	Get the default namespace .
9091	Create a new namespace .
9092	Return a set of old entries in the namespace .
9093	Update namespace entries .
9094	Adds a namespace to the graph .
9095	Add annotation to the graph .
9096	Upload a BEL namespace .
9097	Drop a namespace .
9098	Write a BEL namespace to a file .
9099	Write BEL annotation to file .
9100	Write BEL namespace mapping .
9101	Write a directory to a directory .
9102	Returns a hash of the namespace .
9103	Get the long description .
9104	Create a dropbox post .
9105	Create a dropbox instance .
9106	Create a dropbox editor instance .
9107	Sanitize a filename .
9108	Clean up the filesystem .
9109	Creates a zip file .
9110	Create a temporary backup archive .
9111	Return the size of all attachments in the filesystem .
9112	Returns a list of replies .
9113	Return the message as a string .
9114	Return a list of files that are dirty .
9115	Return a list of list of filesystem attachments .
9116	Reset all clean files
9117	Reset all jailers
9118	Create a new admin admin .
9119	Formats a dropbox form .
9120	Upload files to dropbox .
9121	Submit a dropbox .
9122	Return a function that returns a function that can be used to get a GOTO .
9123	Convert a keyword to BELN file .
9124	Convert BEL annotation to BEL annotation .
9125	Store model .
9126	Create a new session .
9127	Create all metadata for the database .
9128	Store a resource .
9129	Store a failed action .
9130	Store a drop action .
9131	List actions .
9132	Returns the number of records .
9133	Get the data directory for the given module .
9134	Return a module config class .
9135	Get the connection from a module .
9136	Returns a dictionary of all the modules that are loaded .
9137	Clears the cache .
9138	Drop all tables .
9139	Return the label of a list of labels .
9140	Find the best label for a given type .
9141	Filter labels by language .
9142	Return the sort key for the given key .
9143	Iterate over all managers .
9144	Drop all managers .
9145	Clear all modules .
9146	Print a sheet to a table .
9147	Run a web server .
9148	List actions .
9149	Count the number of relations .
9150	Convert to INDRA Statements .
9151	Convert a list of coordinates to a coordinate list .
9152	Convert a list of paths to a VPathList
9153	Get information about the image .
9154	Draw a bzier plot .
9155	Draw a scaling .
9156	Draw a linecap .
9157	Starts a line join .
9158	Return the version of the package .
9159	Delete a license request .
9160	Delete roles request .
9161	Delete ACL request .
9162	Process the channel .
9163	Lookup api key info
9164	Initiate the configuration .
9165	Return a dictionary containing a dictionary of values .
9166	Decorator for task .
9167	Create a celery app .
9168	Called when a publication is processed .
9169	Parse an archive URI .
9170	Add routes to the API .
9171	Add the routes to the config .
9172	Include all routes in pyramid .
9173	Returns a function that returns a callback for the experiment .
9174	Publish a recipe .
9175	Context manager .
9176	Decorator to wrap a function .
9177	Extract the roles from the metadata .
9178	Return a list of licenses
9179	Validate the license .
9180	Validate the roles .
9181	Validate subject metadata .
9182	Validate the model .
9183	Lookup a document pointer .
9184	Convert a tree to a model .
9185	Create a Binder from a tree .
9186	Get a list of moderations
9187	Initiate the session .
9188	Return a list of all the print styles .
9189	Get API keys .
9190	Get the status of a book .
9191	Insert metadata for a model .
9192	Returns the SHA1 hash of a file .
9193	Insert a file into the database .
9194	Publish an EPUB .
9195	Get a single publication .
9196	Initialize the cache manager .
9197	Get the value of a key .
9198	Return the value of a key .
9199	Return a generator that yields each element in the series .
9200	Return a function that can be used by the function .
9201	Extract cycles from a series .
9202	Count the number of cycles .
9203	Render a node .
9204	Get node from tree .
9205	Parse a constant .
9206	Returns the prefix for the multicodec codec .
9207	Add prefix to bytes .
9208	Remove prefix from bytes .
9209	Returns the codec for the given bytes .
9210	Captures the archive to the given URL .
9211	Print an archive .
9212	Retrieve a channel image .
9213	Parse a token .
9214	Parse token .
9215	Parses a string as a string .
9216	Read a file .
9217	Input file .
9218	Return the mixins of the given name .
9219	Find a block by name .
9220	Parse arguments .
9221	Combine two colors .
9222	Reverse a list of strings .
9223	Return the nearest fraction of the given value .
9224	Convert a value to an integer .
9225	Generate permutations of iterable .
9226	Handles parsing .
9227	Return the next page of the next page .
9228	Get all tags in the repository .
9229	Fetch all closed pull requests .
9230	Fetch the creation date for a repository .
9231	Fetch all events for a given tag .
9232	Fetch the date of a tag
9233	Fetch a commit .
9234	Generate the changelog .
9235	Parse the contents of a section .
9236	Return a map of signal handlers .
9237	Open the environment .
9238	Get user and project and project .
9239	Convert a string to a datetime object .
9240	Fetch events for issues and pull requests .
9241	Fetch all tags for each tag
9242	Detect all closed dates for a given kind .
9243	Find the last commit date for a commit .
9244	Set the date from an issue .
9245	Encapsulate a string .
9246	Generate a compound changelog .
9247	Generate a sub - section of the given issues .
9248	Generate header .
9249	Generate log for a given tag .
9250	Filter the issues for a given tag .
9251	Generate the log for all tags .
9252	Generate an unreleased log file .
9253	Return a string representation of a issue .
9254	Add a line to a line .
9255	Generate a log for a tag .
9256	Convert issues into a log file .
9257	Filter issues by label .
9258	Return a list of issues that match the given tag_name .
9259	Return a list of issues that have been deleted .
9260	Filter issues by labels .
9261	Return a list of issues with the given labels .
9262	Filter issues by include_labels
9263	Filter pull requests .
9264	Filter merged pull requests .
9265	Fetch all tags and filters
9266	Sort tags by date
9267	Get the time of a tag .
9268	Determine the newer version of a tag .
9269	Get the version of the first item in the repository .
9270	Get the temporary tag for the repository .
9271	Given a list of tags return a list of tags .
9272	Given a list of tags return a list of tags .
9273	Filter between two tags .
9274	Remove excluded tags .
9275	Apply excluded tags .
9276	Apply excluded tags .
9277	Parse a packet .
9278	Convert a string to a decimal .
9279	Convert a decimal number to a string .
9280	Returns the passcode for the given callign .
9281	Parse a packet header .
9282	Set the filter .
9283	Set the login credentials .
9284	Connect to the server .
9285	Close the connection .
9286	Send an AMSP packet .
9287	Read lines from the server .
9288	Connect to the server .
9289	Send a login request .
9290	Read lines from the socket .
9291	Convert a UUID to a string .
9292	Convert a value to a UUID .
9293	Encrypt a value .
9294	Convert a hash value to a hash value .
9295	Close all connections .
9296	Get the database for the given model .
9297	Convert this model to a CursorRef .
9298	Paginate a query .
9299	Apply filters .
9300	Get a list of items from the query .
9301	Retrieves data from the database .
9302	Regenerate the signing key .
9303	Get the date from the request .
9304	Parse a date string .
9305	Handle a date mismatch .
9306	Encode the request body .
9307	Get canonical request .
9308	Get canonical headers .
9309	Generate signature string .
9310	Ensure that the given path is valid .
9311	Convert a query string into a dictionary .
9312	Generate a new AWS4 request key .
9313	Sign a message .
9314	Format a datetime object .
9315	Convert a datetime to a string .
9316	Convert response to JSON .
9317	Refreshes the data from the API .
9318	Wait until it is complete .
9319	Validate status .
9320	Validate collection .
9321	Validate API root .
9322	Refreshes information about the database .
9323	Refreshes the information about the data .
9324	Refresh all collections
9325	Validate the server .
9326	Refreshes the object s data .
9327	Check if the content type is valid .
9328	Perform a GET request .
9329	Perform a POST request .
9330	Return the total number of bytes .
9331	Get the number of CPU threads .
9332	Return an empty empty memory .
9333	Create a deep copy of an array .
9334	Create a new empty array .
9335	Return a copy of an array .
9336	Get a queue from the queue .
9337	Wait for a slave .
9338	Map a sequence to a sequence .
9339	Load data from a file .
9340	Flatten a dtype .
9341	Create an OrderedOrdered object .
9342	Kill all children .
9343	Abort the process .
9344	Read data from the file .
9345	Call this function .
9346	Adapts a packarray .
9347	Sorts an array of integers .
9348	Returns the current year .
9349	Returns the date of the current date .
9350	Check number of digits .
9351	Generate a random number .
9352	Generate a street number .
9353	Generate a job title .
9354	Generate a body paragraph .
9355	Generate a random money
9356	Generate random words .
9357	Generate sentences .
9358	Generate a paragraph .
9359	Return a list of paragraphs .
9360	Convert a string to a lower case .
9361	Generate random characters .
9362	Return text for text
9363	Generate a user name .
9364	Generate a domain name .
9365	Returns the email address .
9366	Generate a random number .
9367	Generate a bik .
9368	Generate a random inn .
9369	Generate a random OGRN .
9370	Generate a random number
9371	Generate a password .
9372	Read data from a stream .
9373	Check if url is valid
9374	Download config file
9375	Get the run time period for run_steps .
9376	Extract diffs from config file .
9377	Calculate statistics for the given data list .
9378	Check if a file is valid .
9379	Detect timestamp format .
9380	Convert a timestamp to a timestamp .
9381	Set sla for a metric
9382	Aggregate the count of values in the metric store .
9383	Parse the aggregator .
9384	Parse the JTL file .
9385	Convert a word to a GPG .
9386	Parse the input file .
9387	Get a list of URLs from a seed .
9388	Plot the difference between two samples .
9389	Checks if the given SLA is valid .
9390	Convert a timestamp to a timestamp .
9391	Aggregate the number of times in the metric store .
9392	Calculate statistics for a metric store .
9393	Check if the given sub_metrics is important .
9394	Parses the csv file .
9395	Set the scores .
9396	Extracts the metric name from the given name .
9397	Runs onOct2Py .
9398	Exit the engine .
9399	Restart the engine .
9400	Execute a function .
9401	Parse an error .
9402	Check if a value exists .
9403	Check if the object is an object
9404	Return a pointer to a function .
9405	Get the user class for the given name .
9406	Clean up the workspace .
9407	Read data from a file .
9408	Write a matplot to a file .
9409	Extract data from data .
9410	Create a Struct object from data .
9411	Encode an octave data .
9412	Checks if data is a simple number of integers .
9413	Setup logging .
9414	Create a user class .
9415	Create a new OctaveUser instance from the given value .
9416	Convert an instance to a MatlabObject .
9417	Convert an instance to a pointer .
9418	Decorator for document views .
9419	Formats a docstring .
9420	Determine if a file is a RAR file .
9421	Read a RAR file .
9422	Process a file .
9423	Load metadata from a file .
9424	Open a RAR file .
9425	Open a file .
9426	Returns a list of all the names of the file .
9427	Return the information about the given name .
9428	Print the contents of the directory .
9429	Extract a member from a file .
9430	Extract members from the archive .
9431	Convert dostime to a datetime tuple .
9432	Convert a function to a function .
9433	Loads a savefile header .
9434	Load a savefile .
9435	Read a packet .
9436	Remove ip from packet
9437	Strip an Ethernet packet .
9438	Load the network .
9439	Send a call to a call .
9440	Perform a GET request .
9441	Reload configuration .
9442	Reload cache configuration .
9443	Call a call .
9444	Perform a bulk call .
9445	Create a group call
9446	Transfer a transfer call .
9447	Hook up all calls
9448	Make a callup call
9449	Schedule Hangup .
9450	Cancel a scheduled hangup .
9451	Start a record .
9452	Mute a conference .
9453	Play a video .
9454	Play a stop .
9455	Schedule a play .
9456	Cancel a scheduled play .
9457	Touch a sound touch
9458	Stop sound touch
9459	Send digits .
9460	Unmute a conference .
9461	Kick a conference .
9462	Hook up a conference .
9463	Deletes a conference .
9464	Deletes a conference .
9465	Start a conference record .
9466	Stop a conference record .
9467	Play a conference .
9468	Send a conference .
9469	Get a list of Conference objects
9470	List conference members .
9471	Return the XML representation of this node .
9472	Validate a request .
9473	Return the prefix of the directory .
9474	Return a list of nodes .
9475	Add a new node .
9476	Add an edge to the graph .
9477	Parse a graph .
9478	Parse a string .
9479	Return the node of the given node .
9480	Creates an argument parser .
9481	Convert the conditions into a byte string .
9482	Convert the iterator to bytes .
9483	Convert iterator to bytes .
9484	Validate a collection of objects .
9485	Validate the given struct .
9486	Convert an instruction to bytes .
9487	Pack an index into bytes .
9488	Generate a simple call for a simple call .
9489	Generate a bytecode from an object .
9490	Get the value of a constant .
9491	Get the name of the given name .
9492	Compile a bytecode .
9493	Simulate the stack .
9494	Compile the code .
9495	Parse document id .
9496	Parse a module .
9497	Parse a collection .
9498	Parse a zip file .
9499	Convert a zip file to a python zip file .
9500	Get instruction bytes .
9501	Return a string representation of this instruction .
9502	Return the intersection of two lists .
9503	Remove all contained elements in a list
9504	Return the distance between a point
9505	Returns true if the given interval is intersects .
9506	Returns true if the given index contains the given index .
9507	Return the intersection between two intervals .
9508	Return the intersection between two intervals .
9509	Return the intersection between two intervals .
9510	Return a subseq from the sequence .
9511	Replace all bases .
9512	Return a list of gaps in the sequence .
9513	Return a list of ORM objects for the given frame .
9514	Checks if the sequence is complete .
9515	Return a fastq from fasta .
9516	Return a new Fastq .
9517	Removes NNs from the sequence .
9518	Count the number of sequences in a file .
9519	Interleave two sequences .
9520	Generate a sequence of contigs .
9521	Compute the mean length of a file .
9522	Merge two sequences into a single sequence .
9523	Convert scaffolding to a fasta file .
9524	Sort sequence by size .
9525	Sort sequence by name .
9526	Convert a sequence to a fastg file .
9527	Generate a boulderio file .
9528	Generate a PBKDF2 algorithm .
9529	Returns the encrypted field for the given base class .
9530	Encrypt the given base_field .
9531	Convert an object to a string .
9532	Serializes an object to a timestamp .
9533	Unsign a signed value .
9534	Get the version of a version .
9535	Return the version of the version .
9536	Decorator for enumeration .
9537	Decorator to match a regular expression .
9538	Return a function that matches a regex pattern .
9539	Decorator to check if a number is in a range .
9540	Decorator to check if a number is exclusive .
9541	Decorator that returns a valid datetime .
9542	Add a header check .
9543	Add a record length check .
9544	Add a check_check_check_check function .
9545	Add a value predicate .
9546	Add a new record check_check function .
9547	Add a record predicate .
9548	Add a unique check .
9549	Validate the data .
9550	Validate the data .
9551	Initialize a set of unique checks .
9552	Iterate over the values of the values .
9553	Apply header checks .
9554	Iterate over the record length checks .
9555	Iterate over the values of the given values .
9556	Iterate over record checks .
9557	Apply a predicate to the record .
9558	Iterate over all unique checks .
9559	Iterate over all methods of each record .
9560	Evaluate the assert method .
9561	Apply check methods .
9562	Iterate over the rules .
9563	Convert the data to a dictionary .
9564	Create a validator .
9565	Validate a CSV file .
9566	Pack data into buf .
9567	Convert data to bytes .
9568	Get the id of a message .
9569	Builds a Message from data .
9570	Get the response .
9571	Determine the discovery view .
9572	Handle a message .
9573	Unpack data from data .
9574	Read file header .
9575	Read elements from a file .
9576	Read a header from a file .
9577	Read a variable header .
9578	Read a numpy array .
9579	Read a cell array .
9580	Read an array of structs .
9581	Determine if the file is closed .
9582	Write elements to a file .
9583	Write a variable header .
9584	Write variable data to file .
9585	Write a variable to a file .
9586	Write a numeric array to a file .
9587	Check if the given array is an array .
9588	Execute a command .
9589	Initialize the session .
9590	Switches to a window .
9591	Set the window size .
9592	Sets the window position .
9593	Switches to a frame .
9594	Execute a script .
9595	Execute an async script .
9596	Add a cookie .
9597	Save the screenshot .
9598	Find a matching element .
9599	Find elements matching the given value .
9600	Wait for a WebDriver .
9601	Wait for an element .
9602	Wait for elements to be displayed .
9603	Create a new instance from an object .
9604	Raises an exception if the exception is raised .
9605	Decorator to wrap a function .
9606	Check if the given keyword arguments are unused .
9607	Convert a string to a string .
9608	Return a string representation of a map .
9609	Find an exception by code .
9610	Execute a command .
9611	Perform a request .
9612	Execute a command .
9613	Find a child element .
9614	Find a child element .
9615	Find all child elements matching the given value .
9616	Check if the given target is visible .
9617	Plugins the input .
9618	Unplug the device .
9619	Set the value of the control .
9620	Main entry point .
9621	Get the gamepad .
9622	Return a list of buttons .
9623	Decode a header .
9624	Autodiscover apps .
9625	Register a preview .
9626	Render a preview view .
9627	Return the URL of the page .
9628	Show detail view .
9629	Split a value into a docstring .
9630	Render the message .
9631	Send message to message .
9632	Render the subject .
9633	Render the template to a message .
9634	Convert a decimal number to an integer .
9635	Execute a command line .
9636	Return the module name and lineno .
9637	Format a record .
9638	Publish a record .
9639	Send a record to redis .
9640	Add a function to the template .
9641	Display the details of a variable .
9642	Set the trace of the current context .
9643	Run pydevd .
9644	Flatten an iterable .
9645	Return the detail value for the given attribute .
9646	Return a list of all the attributes of a template .
9647	Check if a variable is valid .
9648	Parse log messages .
9649	Determine the paths of the project .
9650	Checks that the given KEfile is valid .
9651	Check the version of shastore version .
9652	Returns the SHA1 hash of a file .
9653	Write sha to sha store .
9654	Print the shas of all files in the graph .
9655	Run the given command .
9656	Get the dictionary of the given name .
9657	Get the parents of the given list of nodes .
9658	Return a list of all sinks in the graph .
9659	Returns a list of all the levels of the given graph .
9660	Merge in_mem_shas from_store .
9661	Finds the Sakefile for the given settings .
9662	Return a list of all dependencies in the graph .
9663	Given a list of target targets return a list of target targets .
9664	Creates a graph with the given parameters .
9665	Remove all files from the graph .
9666	Write the graph to a dot file .
9667	Iterate through a table .
9668	Generate a package package .
9669	Check if a sound is valid .
9670	Normalize a string .
9671	Get the features from a string .
9672	Perform the iteration .
9673	Resolve the given context .
9674	Returns the number of days for the given month .
9675	Calculate float from byte array .
9676	Calculate the period .
9677	Calculate bin boundary boundary .
9678	Read the info string .
9679	Ping the device .
9680	Get the configuration .
9681	Get the configuration data .
9682	Set the fan power .
9683	Toggle the laser .
9684	Generate a random string .
9685	Read the firmware .
9686	Calculate the pmx data
9687	Read GSC and SFR and SFR
9688	Read bin boundaries .
9689	Read binparticle density .
9690	Start the receiver .
9691	Stop the sender .
9692	Send data to the device .
9693	Cut the range .
9694	Replace the date with the given values .
9695	Find all dates in the text .
9696	Validate a token .
9697	Check if the request is nonce
9698	Returns a list of deliveries for this object .
9699	Return a list of available events .
9700	Decorator to create a worker .
9701	Send a message to the device .
9702	Check if the packet is available .
9703	Monitor the TUN
9704	Check the serial port .
9705	Run the monitor .
9706	Get field settings .
9707	Return the value from the datadict .
9708	Returns the sanitizer .
9709	Return the maximum element of the heap .
9710	Replace an item in the heap .
9711	Add item to heap .
9712	Remove item from heap .
9713	Decorator to validate the response .
9714	Create a QRTConnection .
9715	Get the qtm version .
9716	Wait for an event .
9717	Get current frame .
9718	Stop stream frames .
9719	Take a password .
9720	Release control control .
9721	Start the server .
9722	Load a file .
9723	Save file to disk .
9724	Load a project .
9725	Set Qtm event .
9726	Send XML to QRTP .
9727	Handle the received data received .
9728	Return a list of the RTAnalogChannel objects .
9729	Get a list of components from a single device .
9730	Returns a list of components of the component .
9731	Return a list of components for a single component .
9732	Get a list of components of a 6D5 body .
9733	Retrieves a list of components of a 6D5 body .
9734	Return a list of image components .
9735	Get a list of all the points for a specific component .
9736	Retrieve a list of 3D markers for a specific component .
9737	Get a list of all the markers that are not labeled by the specified component .
9738	Gets a list of 3D markers for a specific component .
9739	Get a list of markers for a given component .
9740	Get a list of all the markers for a given component .
9741	Wait for an event .
9742	Send a QRPC command .
9743	Send a reboot .
9744	Print frame info .
9745	Called when a connection is made .
9746	Receive a QRTDiscoveryResponse .
9747	Send discovery packet .
9748	Choose a QTM instance
9749	Creates a dictionary from a string .
9750	Determine if the given path is a doublefann
9751	Find a FANN source file .
9752	Build swig library .
9753	Show an experiment .
9754	Get experiment information .
9755	Delete experiment .
9756	Update an experiment .
9757	Stop experiment .
9758	Restart experiment .
9759	Get the status of the experiment .
9760	Get resource resources .
9761	Get the logs for the experiment .
9762	Unbook an experiment .
9763	Upload the project to the project .
9764	Get cluster information
9765	Check if a polygon specification is valid .
9766	Decorator to clean output .
9767	Show a job
9768	Get job details .
9769	Delete a job .
9770	Update a job .
9771	Stop a job .
9772	Restart a job .
9773	Get status of a job .
9774	Get resource resources
9775	Get logs for a job .
9776	Download the outputs for the given job .
9777	Print a JSON string .
9778	Login a user .
9779	Print user info .
9780	Build a project .
9781	Get build job information .
9782	Delete a build job .
9783	Update a build .
9784	Stop a build job .
9785	Mark a build job .
9786	Get resources for a build job .
9787	Initialize the project .
9788	Mark a bookmark .
9789	List all projects .
9790	Remove trailing spaces .
9791	Find all patterns matching the given path .
9792	Check if a path is ignored .
9793	Return True if path matches patterns .
9794	Checks if a path is ignored .
9795	Group a group .
9796	Get experiment group .
9797	Delete experiment group .
9798	Update an experiment group .
9799	Stop experiments .
9800	Mark the experiment group .
9801	Display current configuration
9802	Get config values .
9803	Sets the configuration .
9804	Activate a user .
9805	Delete a user .
9806	Deploy a polygon .
9807	Delete the deployment .
9808	Create a tarball file .
9809	Get CLI version
9810	Show a dashboard page .
9811	Grant a superuser role .
9812	Revoke a superuser role .
9813	Get notebook URL .
9814	Start a notebook .
9815	Stop notebook .
9816	Check if the deployment is valid .
9817	Install the deployment .
9818	Upgrade the deployment .
9819	Deletes the deployment .
9820	Display a project .
9821	Create a new project .
9822	List all projects .
9823	Delete a project
9824	Update a project .
9825	List experiment groups .
9826	List experiments .
9827	Download the code for a project .
9828	Write the object to a file .
9829	Return a list of edge edges .
9830	Write this object to a file .
9831	Read a DXField from a file .
9832	Return the value as a string .
9833	Initialize the object .
9834	Parse a DXField object .
9835	Parses the object .
9836	Parse comment .
9837	Parse an object .
9838	Parse gridpositions .
9839	Parse gridconnections .
9840	Parse an array .
9841	Parses a component .
9842	Sets the parser .
9843	Tokenize a string .
9844	Refresh token buffer .
9845	Return a tuple of nd arrays .
9846	Resample a factor .
9847	Load a CCP4 object from a file .
9848	Load a histogram from a file .
9849	Load the histogram from a file .
9850	Export data to a file .
9851	Export the data to a python file .
9852	Export data to a file .
9853	Return the center of the grid .
9854	Determine the byte order of byte order .
9855	Read header from ccp4 file .
9856	Get data from device
9857	Returns a list of all available devices .
9858	Create a URL for the given path .
9859	Sets a parameter .
9860	Connect to the server .
9861	Synchronously update info .
9862	Update the viewer information .
9863	Returns a list of all available home objects .
9864	Get a Tibber instance by its id .
9865	Get the currency currency .
9866	Returns the price of the price .
9867	Unsubscribe the subscription .
9868	Return True if the subscription is running .
9869	Clean the default values .
9870	Build environment variables .
9871	Write data to the server .
9872	Start HTTP response .
9873	Create a CherryPyWSGI server .
9874	Aggregate a list of IP addresses .
9875	Aggregate a list of prefixes .
9876	Calculate the ordinal metric .
9877	Compute the ratio between two vectors .
9878	Calculate the confidenceidences of a given value .
9879	Calculate the random confidence for a given value .
9880	Computes the distance between two values .
9881	Convert reliability data to a list of values .
9882	Calculates the alpha - level alpha for a given reliability .
9883	Queries the dataset .
9884	Read all z_variable_info .
9885	Load all the variables from the data .
9886	Call a multi - dimensional function .
9887	Read all attributes from a file .
9888	Call a function on a multi - dimensional array .
9889	Get the current uptime .
9890	Return the boottime for linux boottime .
9891	Get the uptime of the system .
9892	Get the minimum number of uptime .
9893	Calculate the time for the current time .
9894	Retrieve the kstat system .
9895	Return the uptime time .
9896	Get the uptime of the system .
9897	Return the current boot time .
9898	Initialize a JSON file .
9899	Get the data from the cache .
9900	Write data to file .
9901	Update the file type .
9902	Create a new file with the given data .
9903	Check if a project is configured
9904	Process a group .
9905	Run the ping command .
9906	Parse a ping result .
9907	Send email confirmation .
9908	Send a duplicate email .
9909	Set the primary email address .
9910	Confirm email address
9911	Checks if the token is expired .
9912	Send a confirmation email .
9913	Create a user .
9914	Create a new email address .
9915	Updates an email instance .
9916	Validate the primary address .
9917	Validate the email .
9918	Validate a confirmation key .
9919	Saves the password reset token .
9920	Sets the password reset token .
9921	Validate the given key .
9922	Create a new user .
9923	Sends the email address to the database .
9924	Create a new email address .
9925	Returns the queryset queryset .
9926	Delete email confirmation .
9927	Get user by id .
9928	Authenticate the given email address .
9929	Authenticate a user .
9930	Handle POST request .
9931	Return a string representation of an object .
9932	Return the referent of the given object .
9933	Iterate over the results .
9934	Return a Finder instance .
9935	Returns a list of paths matching the given path .
9936	List all files in the filesystem .
9937	List all files in the store .
9938	Finds a matching path by path .
9939	Find a path in the app .
9940	Set options .
9941	Collect files .
9942	Clears a directory .
9943	Delete a file .
9944	Link a file to the filesystem .
9945	Copy a file to the storage .
9946	Return the current space .
9947	Create a new space .
9948	Create a new space from a spreadsheet .
9949	Create a new space .
9950	Get node from obj
9951	Get the arguments for the given node .
9952	Get an object by name .
9953	Return a node with the given arguments .
9954	Show warning message .
9955	Show a custom traceback .
9956	Return a string representation of the trace .
9957	Setup ipython .
9958	Restore the current shell .
9959	Restore the current python sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys . sys .
9960	Get an object by name .
9961	Show the tree .
9962	Return an ordered list of interfaces .
9963	Return a list of interfaces .
9964	Update lazy evaluations .
9965	Convert this object to a dictionary .
9966	Convert args to tuple .
9967	Return a list of all the parameters that are shareable .
9968	Return a copy of this Cells .
9969	Return the value of this object .
9970	Get column index .
9971	Get a range of data from a book .
9972	Read a range of cells .
9973	Determine if a name is a named range .
9974	Return a list of CRO objects for a space .
9975	Create a new python code .
9976	Replace free variables .
9977	Try to fix the lambda code .
9978	Find a function definition .
9979	Extracts the parameters from a source .
9980	Extract names from a source .
9981	Checks if the given source is a function definition .
9982	Remove decorator from source code
9983	Replace function name with function name .
9984	Checks if a module is a lambda .
9985	Reload the function .
9986	Get the description of the package .
9987	Convert this object to a frame .
9988	Create a new cell .
9989	Import functions from a module .
9990	Get an object by name .
9991	Given a list of bases return the base base class .
9992	Create a new dynamic space .
9993	Returns the dynamic space for the given arguments .
9994	Set the value of an attribute .
9995	Delete an attribute .
9996	Delete a space .
9997	Delete a cell by name .
9998	Convert cells iterable to dataframe .
9999	Convert cells to series .
10000	Clear all descendants of an object
10001	Return a set of nodes with the given object
10002	Add a path to the graph .
10003	Rename the model .
10004	Renames the model .
10005	Clear all descendants of a node .
10006	Clear an object from the cell graph .
10007	Get an object by name .
10008	Gets a dynamic space .
10009	Given a list of bases return a list of bases
10010	Return a list of all available commands .
10011	Get value from vals .
10012	Parse a list of options .
10013	Parse environment config .
10014	Create a zip file .
10015	Add configuration files to the archive .
10016	Swap environment variables .
10017	Upload a file to S3 .
10018	Check if the application exists .
10019	Create an environment .
10020	Check if the environment exists .
10021	Get all environments .
10022	Update an environment .
10023	Get the environment name for a given cname .
10024	Deploy a version .
10025	Get application versions .
10026	Create an application version .
10027	Delete unused versions .
10028	Return a list of events for the specified environment .
10029	Add arguments to the parser .
10030	Swap environment variables .
10031	Execute the command line .
10032	Create a new environment .
10033	Join phonemes .
10034	Execute the given environment .
10035	Add arguments to the parser .
10036	Execute the given environment .
10037	List available solutions .
10038	Pick a coda from a letter .
10039	Pick the coda from decimal .
10040	Return a FetchedPID object for a given record .
10041	Create deposit provider .
10042	Creates an admin permission .
10043	Create a blueprint .
10044	Default view method .
10045	Create a deposit provider .
10046	Extracts the actions from the given record .
10047	Decorator to check an OAuth2 scope .
10048	Checks if a record can be performed .
10049	Create an error handler for the given blueprint .
10050	Create a blueprint .
10051	Post a record .
10052	Get a single record .
10053	Create a new record .
10054	Saves a record .
10055	Get a record .
10056	Rename a record .
10057	Delete a record .
10058	Generate records for records .
10059	Create a new location .
10060	Returns a dictionary of JSON schema definitions .
10061	Return a dictionary of schema forms .
10062	Creates a link for the given PID .
10063	Get minter .
10064	Process the given value .
10065	JSON serializer .
10066	Serializer for a file object .
10067	Respond to JSON serializer .
10068	Index a deposit event after publishing .
10069	Decorator for index .
10070	Decorator to preserve data .
10071	Return a persistent identifier .
10072	Return the schema for this record .
10073	Build the JSON schema for the given record .
10074	Fetch the published record .
10075	Merge the contents of this repository .
10076	Commit the deposit .
10077	Create a deposit .
10078	Process files .
10079	Publish a new record .
10080	Publish the edit record .
10081	Publish a draft .
10082	Prepare the edit .
10083	Edit a record .
10084	Discard a record .
10085	Delete a deposit .
10086	Clear the deposit .
10087	Update the Deposit object .
10088	Perform a patch request .
10089	Returns the list of files in this deposit .
10090	Convert rst into a node .
10091	Setup the application .
10092	Parse response .
10093	Get all templates .
10094	Get a specific template .
10095	Create a new template .
10096	Create a new locale .
10097	Create a new version .
10098	Update a template version .
10099	Get a list of snippets .
10100	Get a single snippet .
10101	Create a new snippet .
10102	Convert a file into a dictionary .
10103	Send an email .
10104	Execute the batch request .
10105	Return a list of all the tab s tabs .
10106	Process tabs .
10107	Return the context of the tab view .
10108	Normalize keyword name .
10109	Return a list of tables in a table .
10110	Write a table to the database .
10111	Iterate over a list of rows .
10112	Rewrite a file .
10113	Filter rows as a dictionary .
10114	Dump a grid .
10115	Parse a grid .
10116	Append a key to the list .
10117	Add items to the list .
10118	Creates a new polygon with the given radius .
10119	Create a circle .
10120	Creates a rectangle .
10121	Create a rectangle from a dict .
10122	Return a dictionary of arguments for this color .
10123	Rotate the polygon .
10124	Flip the coordinates of the polygon .
10125	Flip the y axis .
10126	Flip the vector .
10127	Draw the vertex list .
10128	Update the rotation .
10129	Return a map of time zones .
10130	Return the timezone for the given haystack .
10131	Unescape a string .
10132	Parse a grid data .
10133	Parse scalar data .
10134	Add an item to the list .
10135	Dump a grid .
10136	Check if value is valid .
10137	Assert that the given version is valid .
10138	Find the closest version of the given version .
10139	Encrypt a file .
10140	Check if the given file is a maximum size .
10141	Parse command line arguments .
10142	Upload a file to the host
10143	Decrypt a file
10144	Create a reference from a schema .
10145	Convert a schema to a list of parameters .
10146	Convert a path to a list of parameters .
10147	Generate a reference to a parameter .
10148	Convert a JSON schema to a dictionary .
10149	Add a reference to the resource .
10150	Generate Swagger API .
10151	Builds the paths for the service .
10152	Extract path from service .
10153	Extract the operation from a view .
10154	Extract the schema from a colander .
10155	Convert a schema node to a dictionary .
10156	Recursively merges the changes in a dictionary .
10157	Get the viewset method for the given transition .
10158	Creates a mixin transition method for a model .
10159	Make fresh cookies .
10160	Run the command .
10161	Generate a hash for a given key .
10162	Setup Markdown .
10163	Load the contents of the file .
10164	Get the list of personalities .
10165	Convert a list of lines into a dictionary .
10166	Parse a command line .
10167	Get command line status
10168	Extract components from a line
10169	Registers the receivers .
10170	Sets whether the queue is scheduled .
10171	Perform a POST request .
10172	Get the timestamp of the event .
10173	Get the timestamp of the event .
10174	Sets the bookmark .
10175	Formats a datetime datetime .
10176	Iterate over all events .
10177	Run the event loop .
10178	Returns a list of bookmark objects .
10179	Deletes all documents .
10180	Return the result of the result .
10181	Process events .
10182	Process all aggregations .
10183	Delete all aggregations .
10184	List bookmarks .
10185	Return the configuration of the events .
10186	Return the configuration of the aggregations configuration .
10187	Return a dictionary of queries for all queries .
10188	Publish events .
10189	Consume an event .
10190	Send a message .
10191	Generate a salt salt .
10192	Returns the country code for the given IP address .
10193	Get user information .
10194	Return a default permission factory .
10195	Return a list of templates .
10196	Aggregate events .
10197	Handle a request .
10198	An anonymize user .
10199	Generate a unique ID .
10200	Run all actions .
10201	Registers events .
10202	Register aggregations .
10203	Registers a list of queries .
10204	Parse a time .
10205	Extract the date from a string .
10206	Run the aggregation .
10207	Build file download event .
10208	Build the event_view event .
10209	Check if a file exists .
10210	Return True if the user is root .
10211	Loads a notebook .
10212	Count the number of subgraphs in the given graph .
10213	Calculate the intersection between two edges .
10214	Summarize a subset of subgraph nodes .
10215	Return a list of nodes in the given graph .
10216	Convert a BEL graph to a Javascript .
10217	Prepare a human - readable representation of a BEL graph .
10218	Plot summary axes .
10219	Remove all nodes from a function .
10220	Preprocessing data from Excel file .
10221	Return a pandas dataframe from a file .
10222	Get the Nift values for the Nift resource .
10223	Return a set of causal pairs in the given graph .
10224	Return a set of tuples in the given graph .
10225	Get the correlation graph for the given graph .
10226	Return a set of triples of a graph .
10227	Return a set of triples of a graph .
10228	Return a iterable of all non - stable relation triples .
10229	Return a summary of the stability of a BEL graph .
10230	Flatten a list of members in a list .
10231	Reverse a list of listabundance nodes .
10232	Add a list of edges to the graph .
10233	Helper function to add reaction to reaction .
10234	Return a set of the catalysts in a reaction .
10235	Add a reaction to a molecule .
10236	Get a list of network ids .
10237	Generate a dictionary of citations from a BEL graph .
10238	Count citation citations .
10239	Count the citations of a given annotation .
10240	Count author publication .
10241	Count all authors by annotation .
10242	Returns a dictionary containing all evidence in the given graph .
10243	Count the number of citations in a BEL graph .
10244	Get a list of Citation years .
10245	Creates a list of years from the given counter .
10246	Count the number of confidenceidences .
10247	Enrich the publication of PubMed citations .
10248	Update the context .
10249	Highlights nodes in the graph .
10250	Check if a node is highlighted .
10251	Remove highlight nodes from the graph .
10252	Highlights edge edges .
10253	Remove highlight edges from the graph .
10254	Return a set of causal edges for a given nbunch .
10255	Returns a set of causal source nodes for the given function .
10256	Return a set of causal nodes for the given function .
10257	Return a set of causal sinks for a function .
10258	Count the highest centrality of the graph .
10259	Get the number of modifications in a BEL graph .
10260	Remove values from the counter .
10261	Collapse variants by function .
10262	Collapse all edges in the graph .
10263	Collapse an edge by name .
10264	Collapse homologies by name .
10265	Collapse all entities in the graph .
10266	Recursively collapses two edges .
10267	Collapse all nodes in the graph .
10268	Print the graph to the given output .
10269	Return True if node is an upstream leaf .
10270	Return an iterable of unweighted edges .
10271	Checks if the given node is unweighted .
10272	Get all unweighted source nodes .
10273	Remove unweighted sources .
10274	Removes all nodes from the graph .
10275	Generate a mechanism for the given node .
10276	Get the number of neuromsig scores for a given gene .
10277	Get the scores for the given subgraphs .
10278	Calculate the score of the neurommsig .
10279	Calculate the number of nodes in the given graph .
10280	Build a bond task .
10281	Iterate over all predecessors of a subgraph .
10282	Iterate over the predecessors of a subgraph .
10283	Count the number of sources .
10284	Count the number of targets .
10285	Iterate over all edges in the given graph .
10286	Get a list of subgraphs from the given subgraph .
10287	Recursively adds complex components to the graph .
10288	Add components to the graph .
10289	Enrich reaction reactions .
10290	Add variants to the graph .
10291	Enrich unqualified relations .
10292	Expand a graph into a graph .
10293	Expand the internal graph .
10294	Return a set of names that are missing names .
10295	Return a set of names that are not defined in the graph .
10296	Return a set of names that match the given namespace .
10297	Return a set of names that are not in the given namespace .
10298	Return a map of names that are incorrect names .
10299	Return a dictionary of warnings for each error .
10300	Get the names of all names in a BEL graph .
10301	Return a dictionary with the default values .
10302	Compute the percentage between two sets .
10303	Compute the similarity between two sets .
10304	Compute the minimum similarity between two sets .
10305	Calculates the distance between two sets .
10306	Calculates the distance between two sets .
10307	Calculates the distance between two sets .
10308	Plot a histogram .
10309	Plot a plot .
10310	Add an edge to the graph .
10311	Prepare c3 data
10312	Prepare C3 time series .
10313	Calculate the averageness centrality of the given graph .
10314	Calculate the canonical chain of elements .
10315	Determine if the relation has a relation .
10316	Determine if the relation set contains any relations .
10317	Generate a single run of a single run .
10318	Calculate the average span of the cluster .
10319	Calculate the max_cluster_size .
10320	Calculate the moments of the moments of moments .
10321	Calculates the microcanonical average of the number of states .
10322	Generate a spanning - diagonal chain .
10323	Creates a spanning - diagonal grid .
10324	Convert microcanonical_average_average_average to a dictionary .
10325	Compute the probability of a given number .
10326	Calculate a dictionary of microcalculates .
10327	Calculates the statistics for each cluster .
10328	Rank the causal rna .
10329	Gets the causal effect of a path .
10330	Rank the edges in the given edges .
10331	Group nodes by annotation .
10332	Calculate the average of nodes for a given key .
10333	Groups nodes by annotation .
10334	Build a function that returns a function that can be expanded by the given node .
10335	Build a function for deleting a node by its hash .
10336	Convert BEL graph to SPIA matrix .
10337	Build the SPIA matrix for the given nodes .
10338	Update the species matrix .
10339	Writes the spia matrix to a file .
10340	Convert SPIA matrix to TSV format .
10341	Convert a BEL graph to an Excel matrix .
10342	Overlay the graph with the given label .
10343	Overlay the type of type data in the graph .
10344	Load differential gene expressions .
10345	Get the names of the namespaces in the given locations .
10346	Merge a list of namespaces .
10347	Run RCR code .
10348	Export a graph to a file .
10349	Lint a file .
10350	Lint all files in a directory .
10351	Returns a dictionary of the genes for the given entrez_ids .
10352	Generate a list of genes for the given entrez_ids .
10353	Write a Bilerplate .
10354	Get the subgraph of a given query .
10355	Get the largest component of the graph .
10356	Generate a random subset of nodes .
10357	Generate a random edge from the graph .
10358	Shuffle node data .
10359	Shuffle relation relationships .
10360	Check if an edge is consistent .
10361	Rewire the target graph .
10362	Return True if the given source is equal to target .
10363	Determine if the given entity has a gene modification .
10364	Determine if the given data is an activity .
10365	Checks if the given data is a transliteration .
10366	Check if a complex node is a member of a complex .
10367	Checks if the given entity is a complex activity .
10368	Find all activities in the graph .
10369	Summarize edge filters .
10370	Build a filter for edge data .
10371	Builds a filter that returns a predicate that matches the given predicate .
10372	Check if node has a namespace .
10373	Checks if node has a namespace .
10374	Returns the cutoff for the given value .
10375	Calculates the distance between two edges .
10376	Calculate the coefficient of the given key .
10377	Compute the mean of the given value .
10378	Calculate the probability of a given key .
10379	Calculate the concordance of a given annotation .
10380	Calculate the concatenation probability for a given annotation .
10381	Returns a dictionary of drug targets associated with a drug .
10382	Execute a single epicomomom .
10383	Main entry point .
10384	Remove duplicated edges from the graph .
10385	Returns a tuple containing all nodes in the given node .
10386	Return a generator that matches the given node .
10387	Builds the database from the database .
10388	Calculate average scores .
10389	Calculate the average scores for each subgraph .
10390	Generate a workflow .
10391	Aggregate heat diffusion workflow .
10392	Returns a mapping of all nodes in the given graph .
10393	Run a workflow for each workflow .
10394	Calculate the average score for a given annotation .
10395	Iterate over leaf nodes .
10396	Iterate over all nodes .
10397	Remove random edge from the graph
10398	Return a set of leaf nodes .
10399	Runs the given graph transformation .
10400	Determine if the node has been done .
10401	Get the final score .
10402	Calculate the score of a node .
10403	Return the microcanonical statistics for microcanonical statistics .
10404	Calculate the canonical statistics .
10405	Calculate bond canonical statistics .
10406	Calculates the canonical representation of the dataset .
10407	Calculate the initializes of the canonical averages .
10408	Reduce two clusters .
10409	Determine the canonical representation of the canonical dataset .
10410	Calculate the canonical scores .
10411	Compute the similarity between two nodes .
10412	Summary the number of nodes in the graph .
10413	Return a function that returns a Filter that is included in the given list of nodes .
10414	Return a function that returns a filter that will be used to filter nodes .
10415	Build a function that returns a predicate that matches a function .
10416	Return a function that returns a predicate that matches the given key .
10417	Return a set of variants of a given node .
10418	Return a mapping of variants of a given node .
10419	Group a set of tuples .
10420	Count unique relations .
10421	Count the value of an annotation .
10422	Count the number of annotations in the given graph .
10423	Check if a pair is consistent .
10424	Infer two edges in the graph .
10425	Add a missing edge to the graph .
10426	Add internal edges to the subgraph .
10427	Write boilerplate .
10428	Get a list of PubMed IDs .
10429	Returns the number of rows in the specified window .
10430	Performs multiple selection of a single object .
10431	Select a row matching the specified row .
10432	Select a row index .
10433	Select last row
10434	Get the value of a cell .
10435	Get the index of a tabular row .
10436	Verify that the given row is valid .
10437	Return a list of all the available apps .
10438	Start a process monitor .
10439	Stops the given process .
10440	Return a list of all the cpu_stats
10441	Return a list of all the available memory statistics .
10442	Returns a list of all the objects in the window .
10443	Get the properties of a window .
10444	Returns the property of an object .
10445	Get a list of child windows .
10446	Launch an application .
10447	Activate a window .
10448	Mouse click event .
10449	Return all the states of the given object .
10450	Get the size of the window .
10451	Gets the focus of a window .
10452	Waits until the window is available .
10453	Waits until the window is found .
10454	Check if the object is enabled .
10455	Checks if the specified object is enabled .
10456	Verify that the object is valid .
10457	Returns the access key for the given object .
10458	Clears the contents of the clipboard .
10459	Checks if the given datatype is empty .
10460	Convert an accessor to a label .
10461	Check if a string matches a glob .
10462	Check if a menu exists .
10463	Checks if a menu is enabled .
10464	Verify that a menu item is valid .
10465	Get the list of running apps .
10466	Get the frontmost application .
10467	Return the application with the given pid .
10468	Launch an application with the given bundle ID .
10469	Launch application by bundle path .
10470	Terminate application by bundle ID .
10471	Queue an event .
10472	Add a key to the queue .
10473	Send a keychr .
10474	Check if a key is a single character .
10475	Send a single character to the keyboard .
10476	Queue a mouse button .
10477	Handles the left click event .
10478	Wait for a notification .
10479	Return a list of all the actions .
10480	Perform an action .
10481	Generate the children of this node .
10482	Generate the children of this node .
10483	Check if this object matches the given kwargs .
10484	Return True if the object matches the given object .
10485	Iterate over all children of this node .
10486	Iterate over all children of this node .
10487	Find all items in the collection .
10488	Return the application .
10489	Get bundle identifier .
10490	Pop up a menu item .
10491	Drag a mouse button .
10492	Called when a mouse button is clicked .
10493	Called when a mouse button is clicked .
10494	Click a mouse button .
10495	Called when a mouse button is pressed .
10496	Handles the left mouse click .
10497	Called when a mouse click is clicked .
10498	Performs a triple click on the specified coordinate .
10499	Wait for a given timeout .
10500	Wait for creation .
10501	Wait for a window to be destroyed .
10502	Wait for a value to be changed .
10503	Wait for a focus window to be displayed .
10504	Remove a callback .
10505	Stop event loop .
10506	Main entry point .
10507	Bind to the server .
10508	Log a message .
10509	Stop logging .
10510	Captures an image capture .
10511	Called when a window is created .
10512	Registers a callback .
10513	Register a key - like event .
10514	Get window uptime and end time .
10515	Determine if the given object is vertical vertical or vertical orientation .
10516	Verify that the given object has a horizontal horizontal orientation .
10517	Set the maximum value of an object .
10518	Sets the minimum value of an object .
10519	Updates the scrollbar .
10520	Increment the scrollbar .
10521	On horizontal scrollbar
10522	Decrease the scrollbar .
10523	Returns a list of all items in the specified window .
10524	Login to Google .
10525	Get Google Playlist for a given playlist .
10526	Get Google Playlist songs .
10527	Cast a function to a list .
10528	Perform a GET request .
10529	Get a list of projects
10530	Get a project .
10531	Find a project
10532	Create a new project
10533	Update a project .
10534	Delete a project
10535	Get a list of categories
10536	Get a category
10537	Find a category
10538	Create a new category .
10539	Update a category .
10540	Delete a category
10541	Get all tasks in a project .
10542	Return a list of tasks for a project .
10543	Create a task .
10544	Update a task .
10545	Delete a task
10546	Get a list of task runs .
10547	Return a list of TaskRun objects .
10548	Delete a taskrun
10549	Get a list of results from a project .
10550	Find results for a project .
10551	Update a result .
10552	Remove attributes from an object .
10553	Create a HelperMaterial
10554	Get a list of help materials .
10555	Returns a list of help materials for a project .
10556	Updates a helping material .
10557	Login to the API .
10558	Download a list of songs .
10559	Convert cygwin path to cygpath .
10560	Loads metadata from a filepath .
10561	Convert mutagen fields to single value .
10562	Normalize the metadata .
10563	Compare two songs collections .
10564	Return a list of supported filepaths .
10565	Return a list of files that match the given pattern .
10566	Check if a field value is a valid regex .
10567	Checks if the given song is valid .
10568	Filter a list of songs .
10569	Filter a list of songs .
10570	Get the suggested filename for a track .
10571	Convert a template to a filepath .
10572	Iterate over a directory recursively .
10573	Load local songs from a filepath .
10574	Load local playlists from filepaths .
10575	Loads a list of songs from a playlist .
10576	Return a list of all elements in the compound .
10577	Calculate the mass of the mass .
10578	Returns the mass mass mass of the element .
10579	Add another package to this package .
10580	Calculate the temperature of the model
10581	Calculate the mass of the molecule .
10582	Set parent path .
10583	Create a new account .
10584	Remove an account .
10585	Get a child account .
10586	Create a new account .
10587	Get all the descendants of a given account .
10588	Recursively recursively recursively recursively recursively .
10589	Validate the list of accounts .
10590	Render the GlsRpt .
10591	Create a new transaction .
10592	Get the path relative to the given target_path .
10593	Convert a date to a date .
10594	r Calculates the equation of the equation
10595	Calculate the Nu density of the model .
10596	Calculate the h_x_x of the fluid
10597	Calculate the h_l_l .
10598	Clears the mesh .
10599	Creates a template file .
10600	Returns the URL for the given endpoint .
10601	Initialize a HTTP Http2 .
10602	Calculate the alpha of the model
10603	Calculate the energy for the given state .
10604	Create a new entity .
10605	Remove an entity by name .
10606	Prepare all entities .
10607	Run all entities .
10608	Return a list of all elements in the compound .
10609	Creates a stream with the given assay .
10610	Calculate the HH .
10611	Calculate the h and mass of the molecule .
10612	Calculate the temperature of the T .
10613	Sets the transition matrix .
10614	Sets the transition matrix .
10615	Return a copy of this object .
10616	Clears the mass .
10617	Returns the mass mass of a compound .
10618	Returns the amount of compound compounds .
10619	Returns the amount of the compound compound .
10620	Return the total amount of compounds .
10621	Returns a dictionary containing the elements of the chemical mass .
10622	Returns the mass mass of a given element .
10623	Extracts the mass from another .
10624	Calculate the HFR for the given temperature .
10625	Calculate the hfr fraction of the molecule .
10626	Calculate the temperature for a given HFR
10627	Set the HFR of the HFR .
10628	Sets the energy of the matrix .
10629	Sets the HHV value .
10630	Clone this object .
10631	Clears the model .
10632	Returns the mffrrs for a given compound .
10633	Returns the fraction of the compound compound compound .
10634	Returns the fraction of a compound compound .
10635	Calculate the average of compounds .
10636	Calculate the mass of the element s mass .
10637	Return a dictionary of element mfrs .
10638	Calculate the mass of a given element .
10639	Extracts the material from the given object .
10640	r Calculates the Gruntion of the given pressure .
10641	r Calculates the real value of a given v .
10642	r Calculates the Raises the Raft ratio
10643	Calculate the Nu density of the kernel .
10644	Calculate the shape of a given H .
10645	Create a polynomial model .
10646	Calculate the polyval .
10647	Create a new component .
10648	Remove a component .
10649	Get component by name .
10650	Add a new activity .
10651	Get activity by name .
10652	Prepare all components for this component .
10653	Run all components .
10654	Prepare the state of the simulation .
10655	Run all components .
10656	Count the number of elements in the group .
10657	Return the amounts of the masses of the masses .
10658	Calculate the amount of mass fractions .
10659	Return the masses of the given amounts .
10660	Calculate mass fractions of mass .
10661	Convert a mass to a target .
10662	Calculate the mass fraction of a molecule .
10663	Return a set of elements in a set of compounds .
10664	Return the molar mass of a compound compound .
10665	Calculate the stoichiometry coefficient of a compound .
10666	Calculate the stoichiometry coefficient of a compound .
10667	Add this package to this package .
10668	Get the datetime at the given period .
10669	Returns the path to the default data path .
10670	Split a compound compound compound string .
10671	Calculate the result of a compound .
10672	Write a compound compound to an auxi file .
10673	Load datafacts from data file .
10674	Loads data from auxi files .
10675	List all phases
10676	Calculate the C p p p .
10677	Calculate the coefficient of the coefficient .
10678	Calculate the density of the energy .
10679	Calculate the sum of the coefficients of the energy .
10680	Calculate the magnitude of the magnitude of a given temperature .
10681	Calculate the Hamiltonian of a given T .
10682	Calculate the H_mag_mag .
10683	Calculate the S s S .
10684	Calculate the magnitude of the magnitude of a given temperature .
10685	Calculate the magnitude of a given T .
10686	Compute the C p p p .
10687	Compute the H phase of a phase .
10688	Create a polynomial model .
10689	Create a new AirMair .
10690	Render the report .
10691	Convert RGB color to hexadecimal
10692	Convert RGB color to yiq
10693	Convert RGB color to HSV .
10694	Convert hexadecimal to RGB color
10695	Convert yiq to RGB color
10696	Convert HSV to RGB color .
10697	Return a list of colors from start_count
10698	Get a value from the database .
10699	Set a key to the database .
10700	Generate a link tag .
10701	Set device state .
10702	Get a list of modes for the given id
10703	Get the usage of a unit
10704	Get device by id
10705	Get a list of locations
10706	Get the vacations
10707	Create a vacationation
10708	Delete a vacation .
10709	Authenticate the user .
10710	Returns a list of all available waterers .
10711	Decorator for models .
10712	Translate commands .
10713	Send binary data to the specified port .
10714	Set the RTS and DTR value .
10715	Send commands to a serial port .
10716	Main entry point .
10717	Normalize a housecode .
10718	Normalize a unit number .
10719	Execute x10 command .
10720	Returns an argument parser .
10721	Get pylint command .
10722	Decorator to wrap a function .
10723	Return a list of xformers .
10724	Creates a function that returns a function that takes a list of objects and a list of objects .
10725	Return a tuple of variant levels .
10726	Handle a variant .
10727	Handle an array of tuples .
10728	Handle a struct .
10729	Helper function to handle base cases .
10730	Return the signature of a dbus object .
10731	Convert options to lowercase .
10732	Convert value to float
10733	Convert value to bool .
10734	Create a new fork .
10735	Convert ld to a dictionary .
10736	Splits a list into a list of numpy arrays .
10737	Get path from keywords .
10738	Calculate the grid evaluation of a grid .
10739	Log a function .
10740	Add a function to the profile .
10741	Print a profiling function .
10742	Print a profiling function .
10743	Create a declaration for a function .
10744	Print a profiling function .
10745	Validate arguments .
10746	Returns the default field names .
10747	Download a file from a URL .
10748	Validate bands .
10749	Validate scene info .
10750	Downloads a list of bands .
10751	Validate scene info .
10752	Download a list of bands .
10753	Open an archive .
10754	Convert a name to a unicode string .
10755	Increment an iso name .
10756	Generate a slug for a given path .
10757	Check if path is writable .
10758	Return True if the handle is writable .
10759	Create a new Curve from a curve .
10760	Create a Numpy array from a rectangle .
10761	Creates a new instance from a uniform vector .
10762	Wait for a connection to the given port .
10763	Get unique token .
10764	Generate a random token .
10765	Return the URL of this object .
10766	Get a poll .
10767	Submit a poll .
10768	Return a list of vertices .
10769	Formats a matlab matrix .
10770	Create a shapely formatter .
10771	Generate a contour .
10772	Generate a filled contour .
10773	Add a node to the tree .
10774	Get the path of the settings module .
10775	Determine if the context should be used .
10776	Finalize the test database .
10777	Create a new figure .
10778	Update the particle field .
10779	Remove a particle from the position of the particle .
10780	Generate a diffusion image .
10781	Calculate the guess of a model .
10782	Determine the guess guess for a region .
10783	Check if a pose is added .
10784	Determine if the particle is present .
10785	Check if a set of particles are missing .
10786	Subtracts a set of particles .
10787	Subtracts a tile from a tile .
10788	Add a region to a region .
10789	Determine if the image is invert .
10790	Load wisdom from a file .
10791	Save the wisdom file .
10792	Return the overlap between two tiles .
10793	Return a list of partitions in the specified region .
10794	Create a composite state .
10795	Compute a perfect pixel per pixel .
10796	Transforms a Fourier transform to a Fourier .
10797	Create user groups .
10798	Compute the weight of rsq .
10799	Evaluate the first order of the first element in the block .
10800	This method is used to generate a new one .
10801	Computes the distance between two vectors .
10802	Convert c to x
10803	Calculate the tk for a given k .
10804	Resolve admin type .
10805	Validate the given policy .
10806	Validate policy .
10807	Validate state .
10808	Delete this group .
10809	Update this object .
10810	Get a model by name .
10811	Query by names .
10812	Query groups by user .
10813	Search for groups .
10814	Add a member to the group .
10815	Invoke a list of emails .
10816	Check if a user is a member .
10817	Checks if the user is visible .
10818	Checks if the user is invite .
10819	Gets a model from a group .
10820	Filter the query .
10821	Query by user .
10822	Query invitations .
10823	Get all requests for the given admin .
10824	Query by group_id .
10825	Search for users .
10826	Add a query to the query .
10827	Create a new membership .
10828	Delete a group .
10829	Accept a Membership .
10830	Create a new instance .
10831	Get a group by its name .
10832	Delete a group .
10833	Query for a given admin .
10834	Query groups by groups .
10835	Get all profiles .
10836	Filter profiles .
10837	Generate a zjitter .
10838	Get the list of interactions .
10839	Edit a text .
10840	Publish a project .
10841	Delete this instance .
10842	Move this item to the top level .
10843	Get pending updates .
10844	Returns a list of updated updates .
10845	Shuffle this profile .
10846	Reorder multiple updates .
10847	Create a new update .
10848	Default format handler .
10849	Set verbosity .
10850	Generate a sphere .
10851	Compute the largest feature of the image .
10852	Calculate the threshold for the given data .
10853	Calculate the harris feature .
10854	Calculate the distance of a sphere .
10855	r Compute the radius of a sphere .
10856	Return the tile at the given position .
10857	Convert index to p2p
10858	Get the tile tile .
10859	Update the values of the given parameters .
10860	Convert a list of vertices to pps
10861	Convert a list of vertices to pps
10862	Convert a list of vertices to a vector .
10863	Add a particle to the mesh
10864	Update a list of particles
10865	Return the tile at the given position .
10866	Updates the parameters in the collection .
10867	r Calculates the rmatrix matrix
10868	Calculate the j2 .
10869	Calculate the htga s htga . hgga . hgga . ht . ht . ht
10870	Calculate the lag for a given number of points .
10871	Calculate the wavefront of the given angle .
10872	Calculate the K prefactor for a given z .
10873	Calculate the kernel for the given Rho .
10874	Calculates the hsym symbol of the hsym .
10875	Calculate the points for a polygon .
10876	Calculate the hilmul curve for a line .
10877	Calculate the polygon of a line .
10878	Calculate polygon coordinates for polygon .
10879	Wrap a function and return a PSF .
10880	Convert an array to a list .
10881	Convert an array to a list .
10882	Return an array of numpy arrays .
10883	Patches the methods of the given class .
10884	Return a tuple of slicer slices .
10885	Return a tuple of slices for a tile .
10886	Return a list of corners .
10887	Format a vector .
10888	Return a list of coordinates .
10889	Return a list of k - dimensional vectors .
10890	Returns true if the given items are contained in the range .
10891	Return the intersection of tiles .
10892	Translate this tile .
10893	Returns a copy of this tile .
10894	Calculate the filtered image .
10895	Sets the values of the given slice .
10896	Loads the image .
10897	Calculate scale from raw values
10898	Draws the widget .
10899	Update the current value .
10900	Check that the modelstraints are consistent .
10901	Checks that the inputs are valid .
10902	Add a label to the axis .
10903	Evaluate unexplained noise .
10904	Compute the residuals of a tile .
10905	Takes an image and returns the intersection of the image .
10906	Calculate the difference between two standard deviations .
10907	Show a slice of slices .
10908	Creates a circle .
10909	Creates a new missing part of the second point .
10910	Return the name of the global variables .
10911	Calculate the number of pixels in the regression matrix .
10912	Compute the damping of the given parameters .
10913	Find all particles in a tile .
10914	Splits a set of particles into a group .
10915	Checks if a set of groups are valid .
10916	Calculate the size of a particle group .
10917	Get the residuals of the given tile .
10918	Find the best step .
10919	Run a LMAQQ query .
10920	Run a LMPQQ .
10921	Runs a list of LMParticle groups .
10922	Run a LMOQ .
10923	Finish a step .
10924	Fit a new component to another .
10925	Reset the model .
10926	Run a single run .
10927	Runs a single step .
10928	Runs the update function .
10929	Runs the internal function .
10930	Finds the lm updates for the given subblock .
10931	Updates the parameter values .
10932	Calculate the termination statistics .
10933	Check if the term is completed .
10934	Determines whether the process is terminated .
10935	Checks if the frequency of the frequency is updated .
10936	Update the JTJ .
10937	Update Broyden .
10938	Update the Eigen matrix .
10939	Calculate the correction correction correction .
10940	Calculate the gradient of the model
10941	Update the model
10942	Update the function .
10943	Calculate the J .
10944	Reset the particles .
10945	Runs a LMParticle .
10946	Runs the internal computation .
10947	Reset the model .
10948	Reset state .
10949	Get all shares .
10950	Return a copy of a field .
10951	Update state .
10952	Build the functions for the model .
10953	Set the model .
10954	Convert model to data
10955	Return a tuple of tile tiles .
10956	Get component by name .
10957	Calculate log likelihood .
10958	Update the model from the model .
10959	Set the memory level .
10960	Generate random positions .
10961	Creates an image
10962	Returns the values of the given parameters .
10963	Set the shape of the shape .
10964	Trigger the update .
10965	Return the value of this component .
10966	Set the shape of this component .
10967	Recursively synchronize the components of the model .
10968	Sets the methods of the class .
10969	Read environment variables .
10970	Get the name of a group .
10971	List all invitations .
10972	Show requests for requests .
10973	Display invitations .
10974	Creates a new group .
10975	Edit a group .
10976	Delete a group .
10977	Show the members of a group .
10978	Leave a group .
10979	Accepts a user s membership .
10980	Remove a user from the group .
10981	Accepts a Membership .
10982	Finds the coordinates of a given image .
10983	Initialize the initial state of a feature .
10984	Create a feature from a given position .
10985	Optimize a set of samples .
10986	Gets a list of particles with a feature .
10987	Picks a state name and returns the image name .
10988	Translate particles .
10989	Link the zscale
10990	Finish a state .
10991	Create a new ImageState
10992	Calculate the number of points in the image .
10993	Check if the given dict is a dict .
10994	Randomize the parameters .
10995	Calculate the barnes .
10996	Get the schedule s schedules .
10997	Update the schedule
10998	Compute the moment of the moment .
10999	Return the PSF slice of the given zint .
11000	Calculate the time for a given zscale
11001	Helper function to pad a field .
11002	Pack parameters into a dictionary .
11003	Calculate the PSF .
11004	Calculate the PSF for a given point .
11005	Perform a GET request .
11006	Get all bets for a given project .
11007	Get a list of Bets objects .
11008	Get project slug .
11009	Subscribe to bet_ids .
11010	Preview the web server .
11011	Get the collection endpoint endpoint .
11012	Write the meta file .
11013	Run lint8 .
11014	Set the value of the real value .
11015	Publish changes .
11016	Deploys the HTML to the project .
11017	Return a signed number .
11018	Balance the user
11019	Show response messages .
11020	List images .
11021	Generate circle .
11022	Get a node by its key .
11023	Generate a unique key .
11024	Get the network mode .
11025	Get container port mapping .
11026	Sort PEM objects .
11027	Raises an exception if the response is not ok .
11028	Send a response to the SSE protocol .
11029	Sse the SSE content .
11030	Perform a request .
11031	Get a single JSON field .
11032	Get the value for the given field .
11033	Parse a value .
11034	Get a value from the environment variable .
11035	Perform a request .
11036	Checks if the request results are valid .
11037	Try to generate a JWT key .
11038	Retrieves a key from a client .
11039	Read a file .
11040	Write data to a file .
11041	Get a single header .
11042	Perform a request .
11043	Listen for a server .
11044	Create a new MarathonAcme instance .
11045	Initialize the storage directory .
11046	Initialize the global logger .
11047	Parse a field value .
11048	Handle data received from the server .
11049	Handle a field value .
11050	Dispatch event .
11051	List events from Marathon .
11052	Start the marathon server .
11053	Issue a certificate .
11054	Remove all references from the given object .
11055	Remove backrefs from obj .
11056	Update backrefs .
11057	Remove a key from the store .
11058	Start the bot .
11059	Run the Slack server .
11060	Stops the webserver .
11061	Send a message to a Slack room .
11062	Send a message to Slack .
11063	Parses a message .
11064	Check if a message is ignored .
11065	Show an ACL .
11066	Add a user to the ACL .
11067	Create a new ACL .
11068	Delete an ACL .
11069	Run mongo command .
11070	Create a proxy for the given label .
11071	Decorator for creating a proxy class .
11072	Convert value to primary key .
11073	Set a value to a nested dictionary .
11074	Get user by username .
11075	Set user information .
11076	Load user rights .
11077	Send a message to Slack .
11078	Start a timer .
11079	Stop timer .
11080	Get a user by username .
11081	Decorator for webhook .
11082	Freeze a value .
11083	Return help for help commands .
11084	Save current state .
11085	Send a shutdown message .
11086	Return a human - readable message .
11087	Sleep in a channel .
11088	wake up a channel
11089	Sorts a key by key .
11090	Select all files in the directory .
11091	Return a generator that yields files .
11092	Iterate over all files in this directory .
11093	Return the number of files in the directory .
11094	Returns the number of directories in the directory .
11095	Select files by extension .
11096	Select files matching pattern .
11097	Select files matching the given pattern .
11098	Select files by size .
11099	Select files by mtime .
11100	Select files by time .
11101	Select files by ctime .
11102	Create a zip archive .
11103	Creates a backup file .
11104	Acquire a lock .
11105	Decorator to ensure that the repository is synchronized .
11106	Return a dictionary of the pickling errors .
11107	Iterate over all files in a directory .
11108	Iterate over all directories in the directory .
11109	Iterate over all directories in the directory .
11110	Iterate over all directories in a directory .
11111	Synchronize the directory .
11112	Load a repository .
11113	Get a repository .
11114	Remove repository .
11115	Save the repository information .
11116	Create a new package .
11117	Get information about a directory .
11118	Get the parent directory for the given relative path .
11119	Get information about a file .
11120	Get file relative path .
11121	Return a list of path relative to the given name .
11122	Add a directory .
11123	Remove a directory .
11124	Move a directory to a directory .
11125	Rename a file .
11126	Dump a file to a directory .
11127	Update a file .
11128	Ensure that value is a string .
11129	Return the stats for the given traces .
11130	Starts the directory .
11131	Stop the observer .
11132	Handle a file event .
11133	Remove all temporary files .
11134	Check if the file exists .
11135	Copy this file to another .
11136	Create a new API client .
11137	Ensure that the repository is required .
11138	Removes all files in the state after the given state .
11139	Get the stats of the repository .
11140	Reset repository .
11141	Load the repository .
11142	Removes the repository .
11143	Check if path is allowed .
11144	Convert path to repo relative path
11145	Get repository state
11146	Get information about a file .
11147	Checks if a file is a file
11148	Create a package .
11149	Rename an attribute .
11150	Get the fingerprint of a text hash .
11151	Return the MD5 hash of a file .
11152	Generate a hash of a file .
11153	Generate a hash of a file .
11154	Return a list of choices for this directory .
11155	Print the size of a directory .
11156	Print size of big file
11157	Print size and file size and size .
11158	Mirror this directory to another .
11159	Execute python file .
11160	Generate the trail space .
11161	Generate autopep8 code .
11162	Return the size of the file .
11163	Return the mtime of the file .
11164	Get the timestamp of the file .
11165	Return the current ctime .
11166	Return a list of unused options .
11167	Returns a list of keys .
11168	Add a new option .
11169	Add a positional argument .
11170	Read a list of parameters from a file .
11171	Return a string describing the options .
11172	Return the description of the positional arguments .
11173	Return a string representation of the settings .
11174	Return a string representation of the settings .
11175	Parse a file .
11176	Parse arguments .
11177	Parse a string .
11178	Returns the separator for the given index .
11179	Returns the URL for the authorization .
11180	Exchange access token .
11181	Acquire a lock .
11182	Release the lock .
11183	Default decoder .
11184	Wrap a state dictionary .
11185	Publish a dataset .
11186	Prompts a dictionary of values .
11187	Create a metadata dataset .
11188	Edit the readme .
11189	Edit a dataset .
11190	Show a dataset .
11191	Write a ProtoDataSet to a ProtoDataSet .
11192	Add an item to the datatet .
11193	Add metadata to a dataset .
11194	Freeze a proto dataset .
11195	Copy a dataset to another dataset .
11196	Compress an object to a string .
11197	Find the index of the year of the token .
11198	Decorator to convert a string to a python name .
11199	Validate that the given datetime is valid .
11200	Convert a datetime to a UTC time .
11201	Strip a comment from a line .
11202	Strip comments from a string .
11203	pick a day of a day
11204	Convert a key to a dictionary .
11205	Get the name of a timezone .
11206	Get the zone info for the given name .
11207	Get the metadata for the zoneinfo file .
11208	Get the configuration for the given JMP file .
11209	Check if datetime is in datetime .
11210	Set the value of the datetime object .
11211	Returns a copy of this instance .
11212	Hash the given data .
11213	Decode a token .
11214	Compare two HMAC signatures .
11215	Compare two tokens .
11216	Check if the given time is valid .
11217	Populates claims from payload .
11218	Encodes the payload .
11219	Decode a JWT token .
11220	Compare this JWT .
11221	Get a file .
11222	Check if a JSON file is compressed .
11223	Dump an object to a JSON string .
11224	Dump an object into a JSON object .
11225	Dump an OrderedDict .
11226	Dump a numpy array .
11227	Decorator to ensure that the cache is invalid .
11228	Return the last occurrence of the given datetime .
11229	Return the first occurrence of the given datetime .
11230	Iterate over the time after the given dt .
11231	Replace this rule with the given kwargs .
11232	Convert Excel file to HTML .
11233	Get inner template .
11234	Translate a string to a string .
11235	Load the config file .
11236	Create a reusable generator .
11237	Send a value to the generator .
11238	Send a function to a generator .
11239	Print bug info .
11240	Copy a web file to a local file .
11241	Returns the number of lines in a file .
11242	Indent a CSS file .
11243	Add new lines to a file .
11244	Replace CSS files in a CSS file .
11245	Return a list of strings .
11246	Calculate the future value for the future .
11247	Return the area of a triangle .
11248	Return the median of the data .
11249	Return the average of numbers .
11250	Calculate the variance of a given number .
11251	Calculates the percentage of a percentage .
11252	Convert datetime object to string
11253	Iterate over a list of objects .
11254	Iterate over all the objects in the previous list .
11255	Iterate over a list of attr_names .
11256	Flatten an iterable .
11257	Iterate over a list of keys .
11258	Return a list of items .
11259	Returns a generator that matches the given pattern .
11260	Match a pattern to a regex .
11261	Iterate over a list of strings .
11262	Iterate over all occurrences of a pattern .
11263	Perform a wildcard matching pattern .
11264	Generate a new stdout .
11265	Read lines from a file .
11266	Execute a shim command .
11267	Iterate over all files in a directory .
11268	Creates a generator with the given separator .
11269	Convenience function to iterate over a string .
11270	Given a list of strings return a generator of strings .
11271	Convert a list of strings to a string .
11272	Register default types .
11273	Return a dictionary of items
11274	Check if pidfile exists .
11275	Check if pid is running
11276	Disconnect a cgroup
11277	Run a program .
11278	Parse address list .
11279	Encode a list of strings .
11280	Get the creator of the given item type .
11281	Clone this object .
11282	Append the next chained element .
11283	Iterate over the generator .
11284	Decorator to reduce a function .
11285	List active networks .
11286	Write a line to stdout .
11287	Execute the command .
11288	Get the subfields of the request .
11289	Strips an XML document .
11290	Load a dictionary from a dictionary .
11291	Respond to the given URL .
11292	Consume OEmbed data .
11293	Display oembed schema .
11294	Main entry point .
11295	Make a request to a zip code .
11296	Processes the response from the response .
11297	Checks if the response is an exception .
11298	Get the text of a node .
11299	Register a provider .
11300	Unregisters a provider .
11301	Populate the registry .
11302	Returns the provider for the given URL .
11303	Remove stored OEmbedOEembeds .
11304	Embed an OEmbedO .
11305	Autodiscover providers .
11306	Store a list of provider providers .
11307	Map attribute to object
11308	Get the image for the given object .
11309	Maps an object to a dictionary .
11310	Get object from url
11311	Create a new record .
11312	Update OAI information .
11313	Update the CNumFields field values .
11314	Update hidden notes
11315	Update the notes on the record .
11316	Updates the title of the record .
11317	Update report numbers .
11318	Update the ISBN s ISBN .
11319	Update all fields in the record .
11320	Updates the date year year .
11321	Update language fields .
11322	Generate a HTML table .
11323	Checks if the given filelist is valid .
11324	Fix the last name of the last name .
11325	Extracts oembeds from text .
11326	Strip oembeds .
11327	Autodiscover all oembed_providers .
11328	Select the given options .
11329	Main entry point .
11330	Create a record .
11331	Generate progress bar .
11332	Print a warning message .
11333	Print a banner .
11334	Return a list of rows .
11335	Prompt the user with the given choices .
11336	get records from url
11337	Connect to the FTP server .
11338	Sets the schedule mode .
11339	Sets the temperature to the temperature .
11340	Sets the temperature of a temperature .
11341	Set the temperature .
11342	Load a configuration file .
11343	Authenticate the NuHeat API .
11344	Perform a GET request .
11345	Handle start tag .
11346	Handle closing tag .
11347	Convert HTML to text .
11348	Return True if the callback is an instance .
11349	Return True if the callback is a function .
11350	Merge keyword arguments .
11351	Merge arguments from a list of arguments .
11352	Fill text with indentation .
11353	Return the user agent s user agent .
11354	Add a field to a record .
11355	Convert an XML record to a string .
11356	Escape the given data .
11357	Format the arxiv_id .
11358	Fix a journal name .
11359	Add Nations field names to authors .
11360	Converts a string to a unicode .
11361	Convert title to capitalization .
11362	Convert HTML tags to latex .
11363	Download a file from a URL .
11364	Run shell command .
11365	Create a logger .
11366	Unzip a zip file .
11367	Iterate over all files in a directory .
11368	Parses an authentication string .
11369	Convert a date to iso - formatted string .
11370	Convert a date to human readable string .
11371	Convert a list of images to a list of images .
11372	Return a temporary file path .
11373	Return a list of letters from a string .
11374	Checks if a license is an OA license .
11375	Finds all issues in the given path .
11376	Check if the issue directory is correct .
11377	Normalize an article directory .
11378	Get the date from the document .
11379	Extracts oembeds from text .
11380	Process an OEmbed template .
11381	Generate an OEmbedAutodiscover node .
11382	Parse a URL scheme .
11383	Creates a parser .
11384	Returns the module .
11385	Return the body of the module .
11386	Run the callback .
11387	Return the path to the file .
11388	Parse the callbacks .
11389	Return True if the command is run .
11390	Register a field .
11391	Add a field to the class .
11392	Fetch a URL from a URL .
11393	Convert a URL to a full URL .
11394	Create a mock request .
11395	Load class from path .
11396	Generate a record .
11397	Add CMS link to CMS .
11398	Update report numbers .
11399	Update keywords .
11400	Recursively update the fields in the record .
11401	Create a field .
11402	Create a list of records .
11403	Create a new record .
11404	Filter a list of field instances matching the given filter .
11405	Remove duplicate fields .
11406	Check if two records are identical .
11407	Get a list of field instances from a record .
11408	Delete a record from a record .
11409	Add fields to record .
11410	Move fields to a record .
11411	Delete a subfield from a record .
11412	Get a field from a record .
11413	Replace a field with the given tag .
11414	Get subfields from a record .
11415	Delete a subfield from a record .
11416	Add a subfield to a record .
11417	Modify a control field .
11418	Modify a subfield .
11419	Move a subfield to another record .
11420	Convert a record to XML .
11421	Convert a field to XML .
11422	Print a record .
11423	Print a list of records .
11424	Find a record in a record .
11425	Match subfields .
11426	Remove empty fields from a record .
11427	Make all subfields of a record .
11428	Remove empty fields from a record .
11429	Strip the contents of a record .
11430	Sort subfields .
11431	Compare two fields .
11432	Check if field is valid .
11433	Shift all the fields of the given record into the given record .
11434	Check if a tag matches the given pattern .
11435	Validate record positions .
11436	Sort record by indicator .
11437	Sort the list of indicators .
11438	Create a record from a MARC record .
11439	Get all children of a node .
11440	Return a string representation of a node .
11441	Convert a record .
11442	Return a warning message .
11443	Compare two lists .
11444	Parse the request .
11445	Parse OAI XML XML .
11446	Create a deleted record .
11447	Login to the session .
11448	Check if login data is valid .
11449	Send a message to the websocket .
11450	Get date from filename
11451	Get the collection of conferences .
11452	Attach the fulltext field to the document .
11453	Convert a list of records to a string .
11454	Generate BibRecord from source file .
11455	Get a config item by key .
11456	Load configuration from config file .
11457	Search for a record .
11458	Remove all fields from the record .
11459	Remove all fields from the record .
11460	Add a system number .
11461	Add a control number .
11462	Update subject categories .
11463	Connect to the FTP server .
11464	Download a file .
11465	Cancels a folder .
11466	List files in a folder
11467	Create a folder .
11468	Delete a file .
11469	Delete a folder
11470	Get file size
11471	Upload a file .
11472	Parse user data .
11473	Parse the given text .
11474	Login to the server .
11475	Renew a token .
11476	Create a new item from a local folder .
11477	Create a new folder .
11478	Return the MD5 hash of a file .
11479	Create a bitstream link from a file .
11480	Upload an item to a file .
11481	Create a new folder
11482	Upload a folder into a folder .
11483	Checks if a local folder exists .
11484	Upload a folder to a local folder .
11485	Upload a file .
11486	Find the folder id for the given path .
11487	Search for items in a folder .
11488	Find resource id from path .
11489	Download a folder
11490	Download an item from the communicator .
11491	Download a file .
11492	Login to MFA
11493	List user folders .
11494	Get the default API key .
11495	List all users .
11496	Get user by email .
11497	Create a community .
11498	Get a community by name .
11499	Get a community by ID .
11500	Get the children of a community .
11501	List communities .
11502	Get a single folder
11503	Get the children of a folder
11504	Delete a folder
11505	Move a folder .
11506	Create a new Item .
11507	Get a single item
11508	Download a single item
11509	Delete an item
11510	Get metadata for a specific item .
11511	Sets an item metadata .
11512	Share an item .
11513	Move an item to another item .
11514	Search item by name .
11515	Search item by name and folder
11516	Search item by name and folder name .
11517	Create a link .
11518	Generate a new upload token .
11519	Perform upload operation .
11520	Search for a resource
11521	Add a condition to a dag .
11522	Add a conditional job to the batch .
11523	Extract DICOM metadata .
11524	Login to MFA
11525	Create a thumbnail .
11526	Create a small thumbnail .
11527	Performs a search on a search query .
11528	Add a scalar data .
11529	Upload JSON results .
11530	Retrieves a revision from the database .
11531	Generate a hash key
11532	Initialize a snap7 client .
11533	Setup the Arduino pin .
11534	Get the fitnesses for a block .
11535	List available drivers .
11536	Map a pin to a physical pin .
11537	Sets the specified pin direction .
11538	Return the direction of a given pin .
11539	Set a port type .
11540	Return the type of a given pin .
11541	Write a value to the specified pin .
11542	Read the value of a pin .
11543	Set an analog reference .
11544	Return the analog reference for the given pin .
11545	Set the frequency of the specified pin .
11546	r Compute the SIRode .
11547	Return the URL of the driver .
11548	Guess the memory usage of a read - memory file .
11549	Main entry point .
11550	Setup the module .
11551	Get exception from status code .
11552	Read analog data .
11553	Disable analog reporting .
11554	Disable digital reporting .
11555	Enable analog reporting .
11556	Enable digital reporting for a digital pin .
11557	Write an extended analog .
11558	Get the stepper library version .
11559	Write data to the specified address .
11560	Stop reading from the specified address .
11561	Play a tone .
11562	Set the threshold for the specified pin .
11563	Set the threshold for a digital pin .
11564	Configure a sensor .
11565	Configure steps for a step .
11566	Sets the step of the motor .
11567	Request library version .
11568	Open an Arduino serial port .
11569	Run the Arduino loop .
11570	Set the brightness .
11571	Sets the color of the image .
11572	Output the entire buffer .
11573	Clear the display buffer .
11574	Handle a digital message .
11575	Called when the data received .
11576	Parses the specified data .
11577	Send a SYSE command .
11578	Send a command .
11579	Reset the system .
11580	Print a string to a string
11581	Run the command .
11582	Retrieve a URL from a URL .
11583	Returns a list of image URLs .
11584	Search for background images .
11585	Return the node name for the given name .
11586	Return the node with the given name .
11587	Return information about the given key .
11588	Pushes a link to the specified destination .
11589	Return the rpop from src .
11590	Sets the value of the given value .
11591	Return a set of sources that match the given arguments .
11592	Sets the value of the given src .
11593	Return True if the mapping exists in the database .
11594	Rename a file .
11595	Rename a key .
11596	Return a list of keys matching the given pattern .
11597	Returns the number of keys in the database .
11598	Prepare the attributes for this element .
11599	Verify the signature .
11600	Returns the queryset for the given request .
11601	Save model .
11602	Saves a form set of photos .
11603	Parse the header range .
11604	Check if ranges are valid .
11605	Convert a list of ranges to a list of ranges .
11606	Condense ranges .
11607	Render social widget .
11608	Add a matrix to the matrix .
11609	Multiplies the matrix .
11610	Update the probability for the read level .
11611	Run the model on the model .
11612	Report the number of read counts .
11613	Report the depth of each allele in a file .
11614	Export the posterior probability to a file .
11615	Print a list of reads .
11616	Convert a string to a string .
11617	Convert a string to a string .
11618	Detects the given text .
11619	Initialize the scheme .
11620	Convert y to UTF - 8 .
11621	Set the number of scripts .
11622	Handle unrecognised unicode .
11623	Computes the equivalence of a char .
11624	Translate a string to a string .
11625	Generate a gramfuzzer .
11626	Build a quoted string .
11627	Convert a list of verbose verbs .
11628	Clears sent messages .
11629	Load the contents of a file .
11630	Read a filename from a filename .
11631	Read a filename from the cache .
11632	Returns a list of codepoints in a filename .
11633	Return a list of all orthographies in the library .
11634	Generate OAuth2 headers .
11635	Parse OAuth2 access token .
11636	Refresh access token
11637	Get data from a file .
11638	Write data to a file .
11639	Write json data to file
11640	Get data from json file
11641	Load data from a file .
11642	Write yaml data to a file .
11643	Perform the transform on the model .
11644	Fit the model to the matrix .
11645	Fit the model to the matrix .
11646	Transforms the transform matrix .
11647	Fit a matrix to a matrix .
11648	Fit the model .
11649	Performs the transform on the model .
11650	Fit the model to the model .
11651	Transform the model into a vector .
11652	Get the version of this version .
11653	Return the version of the current version .
11654	Fit the model .
11655	Transforms a set of features .
11656	Fit the model to the model .
11657	Fit the model to the model .
11658	Transforms a set of features .
11659	Invokes the inverse transform function .
11660	Fit the kmeans .
11661	Performs the transform on the model .
11662	Check if an array is a categorical type .
11663	Convert an array to an integer .
11664	Start the server .
11665	Build a list of flann indices for each bag .
11666	Calculate the distance for each bag .
11667	r Calculates the linear linear equation of the model .
11668	Calculate the quadratic estimate of the given rhos .
11669	Return the topological sort order of dependencies .
11670	Get the K s Ks .
11671	Generate a dictionary of arguments for the FLANN .
11672	Fit the model .
11673	Make a set of features .
11674	Return a copy of the features .
11675	Make a new features object .
11676	Fit the model .
11677	Returns the mean of the data .
11678	Starts listening for reading .
11679	Connect to the server .
11680	Disconnect the socket .
11681	Send a command to the socket .
11682	Read lines from the socket .
11683	Read a block from the stream .
11684	Read XML from the stream .
11685	%prog analysis
11686	Get information about a user .
11687	Get information about changeset .
11688	Download the changeset for the given changeset .
11689	Get metadata for changeset .
11690	Parse geojson geometry .
11691	Filter the content of this node .
11692	Set the fields of this object .
11693	Sends the given reason .
11694	Perform analysis .
11695	Verify that the comment is valid .
11696	Verify that the editor is valid .
11697	Count the changeset .
11698	Unwrap a stream from a stream .
11699	Starts the server .
11700	Spawn a new God .
11701	Builds the offspring of the given egg .
11702	Compute cosine of two vectors .
11703	Set the gender of the chromosome .
11704	Set inherited traits .
11705	Creates a sequence of DNA sequences .
11706	Replace the genes in the gene .
11707	Generate gamete .
11708	Print the parents of the parent .
11709	Get a single instance of the stage .
11710	Perform a request .
11711	Add the logged in session to the request .
11712	Flatten a dict .
11713	Get an instance of the pipeline .
11714	Schedule a pipeline .
11715	Generate console output .
11716	Edit a config .
11717	Create a new template .
11718	Deletes the resource .
11719	Returns a set of all pipelines .
11720	Gets a zip file .
11721	Set the config loader .
11722	Return a Flask app class .
11723	Initialize the application .
11724	Initialize the configuration .
11725	Convert camelCase to camelCase
11726	Format seconds in seconds .
11727	Print a dictionary of dictionaries .
11728	Assert that the haystack contains the given needle .
11729	Flag nested classes .
11730	Calculate TVPC data for TVPC .
11731	Compress input string .
11732	Register a class .
11733	Check if a class is a valid class .
11734	Get the resample data .
11735	Sanitize a path .
11736	Validate an object .
11737	Decorator for routes .
11738	Attach a blueprint to the bundle .
11739	Parse dot notation .
11740	Returns the first set of symbols in the given symbols .
11741	Compute the first nonterminals .
11742	Compute the follow .
11743	Return the initial closure .
11744	Move a symbol .
11745	Return a set of rules that match the given rules .
11746	Initialize the application .
11747	Return a list of routes .
11748	Check if a path exists .
11749	Attach a blueprint .
11750	Register a blueprint .
11751	Get blueprint routes .
11752	Compute the precedence of the given terminals .
11753	Create a table from the given grammar .
11754	Parse a definite clause .
11755	Checks if all symbols are in the same model .
11756	Return a list of propositional symbols .
11757	Return true if expression is true .
11758	Determine if the given clauses are true .
11759	Check if x is a variable .
11760	Remove a sentence .
11761	Refresh settings .
11762	Searches for the alphabeta search .
11763	Return the value of the player .
11764	Compute the fitness of a player .
11765	Checks if a row is in the board .
11766	Update a dict with the given entries .
11767	Generate a random sample from a sequence .
11768	Return a random sample from a sequence of weights .
11769	Print a printf function .
11770	Return the name of the object .
11771	Open an AIMA file .
11772	Create a NaiveBayes learner .
11773	Calculate the number of probability distributions .
11774	Create a NeuralNetLearner .
11775	Ensemble learner .
11776	Return a function that returns a predefined score .
11777	Return a copy of a dataset .
11778	Perform a leave - out cross - validation .
11779	Generate a random restaurant .
11780	Create a continuous xor .
11781	Compare two datasets .
11782	Check that all fields are valid .
11783	Add an example to the list of examples .
11784	Check that the given example is valid .
11785	Returns the number of the given attribute .
11786	Return a copy of the input .
11787	Add an observation to the distribution .
11788	Sets the number of observations for the given object .
11789	Return a random sample from the distribution .
11790	Recursively revise the constraints .
11791	Calculate the minimum value for a given assignment .
11792	Returns a sorted list of choices for a given variable .
11793	Perform a forward checking on the constraint .
11794	Calculate an AC3 constraint .
11795	Generate a set of conflicting conflicts .
11796	Returns a random value for a given variable .
11797	Returns the number of conflicts between two variables .
11798	Assigns a variable to a variable .
11799	Prune a variable .
11800	Return the inferred assignment of inferred variables .
11801	Restore a list of infos from the current state .
11802	Return a list of variables in the current assignment .
11803	Calculate the number of conflicts for a given variable .
11804	Assign a variable to the CSP .
11805	Record a conflict between two variables .
11806	Return a sequence of words in the given text .
11807	Encode a plaintext with the given code .
11808	Generate a sample of words .
11809	Index a collection of files .
11810	Index a document .
11811	Compute the score for a given word .
11812	Print a list of documents .
11813	Show the results for the given query .
11814	Compute the score of a plaintext .
11815	Search for the given ciphertext .
11816	Compute the score of the given code .
11817	Get the value of the setting .
11818	Compute the expected probability of a state .
11819	Return the state of the given state .
11820	Return the settings as a dictionary .
11821	Create a new setting .
11822	Check if value is compatible .
11823	Returns a function that returns a function that returns a function that returns a function that evaluates to the given time .
11824	%prog search algorithm .
11825	Return a random slice of cubes .
11826	Print the board in the board .
11827	Return a list of neighbors between two nodes .
11828	Return the square root of n2 .
11829	Expand all nodes in the given problem .
11830	Return a child node .
11831	Return the path of this node .
11832	Creates a new sample between two genes .
11833	Make an undirected graph .
11834	Convenience method to connect between two points .
11835	Add a link to the graph
11836	Calculate the distance of a node .
11837	Return a list of all rows in the given state .
11838	Return the next row at the given row .
11839	Set the word in the wordlist .
11840	Calculate the total score of words .
11841	Trace agent .
11842	Create a new AgentBasedVacuumAgent .
11843	Step the model .
11844	Run the environment .
11845	List all things at a given location .
11846	Add a new Thing .
11847	Delete the given thing .
11848	Return a list of all things in the given location .
11849	Returns the perceptents of the given agent .
11850	Move the given object to the given location .
11851	Add walls to the grid
11852	Parse a list of words .
11853	Add an edge to the chart
11854	Add an edge to the sentence .
11855	Add an edge to the chart .
11856	Add an edge to the chart .
11857	Display settings .
11858	Create a Factor from the given variables .
11859	Compute the sum of the variables in the factors .
11860	Iterate over all variables of the given variables .
11861	Check if an event is consistent with the given evidence .
11862	Compute a weighted sample of an event .
11863	Return a human - readable representation of the approximate probability .
11864	Add a node to the BayesNode .
11865	Multiply two factors .
11866	Calculate a factor of a variable .
11867	Normalize the distribution .
11868	Remove whitespace nodes from a node .
11869	Convert hue to RGB color
11870	Convert RGB color to hls .
11871	Convert hex string to color
11872	Wait for the device .
11873	Get json from api
11874	Put a cursor to the cursor .
11875	Get password .
11876	Get the current stdin .
11877	Format a record .
11878	Get the owner of the process .
11879	Search for a process in a process .
11880	Search for all processes in the process .
11881	Scan a pid for a process
11882	Search for all processes in the process .
11883	Search for open files for a given pid .
11884	Search for all processes in the process .
11885	Connect to the Hub .
11886	Send a command to the server .
11887	Receive data from the socket .
11888	Get light data
11889	Return a list of all bulbs .
11890	Set the brightness .
11891	Set all color values
11892	Update lights .
11893	Retrieve a file from a file .
11894	Read a text file .
11895	Clean up files .
11896	Create index file .
11897	Create index files .
11898	Get the image from a file .
11899	Get the src from an image .
11900	Get thumbnail image from file .
11901	Run the server .
11902	Serve the index file .
11903	Decorator for static functions .
11904	Generate a masked mask .
11905	Calculate the noise of a given size .
11906	Generate a permutation matrix .
11907	Return a list of four blocks .
11908	Convert a matrix to a bipart matrix .
11909	Convert a matrix to a pattern matrix .
11910	Return a version of the current version .
11911	Get the version of a file .
11912	Prints an error .
11913	Tag a tag
11914	Initialize the environment .
11915	Render a template .
11916	Render the template to a file .
11917	Render a Jinja template .
11918	Get the dataframe .
11919	Return the index of dataframe .
11920	Get the object from the view .
11921	Returns the paginator instance .
11922	Paginate dataframe .
11923	Parse the config file .
11924	Render a Jinja template .
11925	Parse the given source .
11926	Parse a file path .
11927	Start the server .
11928	Get the list of files
11929	Watch the files .
11930	Deploy blog .
11931	Context manager .
11932	Find a block by name .
11933	Load all widgets .
11934	Return a list of widgets for a field .
11935	Resolve block list .
11936	Return a dictionary of display names .
11937	Create a message .
11938	Add a message to the store .
11939	Add a message to the user .
11940	Mark a message as read .
11941	Mark all messages in a user .
11942	Return a list of messages archived by user .
11943	Returns a list of messages .
11944	Add a message to the store .
11945	Store messages .
11946	Prepare messages .
11947	Run Jocker .
11948	Initialize logger .
11949	Configure a custom object .
11950	Set global verbosity level .
11951	Import config file .
11952	Execute Jocker .
11953	Parse a string from a string .
11954	Upload a gif to an image .
11955	Return True if ip is a dot notation .
11956	Checks if ip is a binary .
11957	Determine if the given IP is octal .
11958	Determine if the given IP is decimal .
11959	Checks if the given notation is valid .
11960	Checks if the given number is a bit integer .
11961	Check if a wildcard is a wildcard .
11962	Convert an IP address to a decoded decimal .
11963	Convert decimal to dot notation
11964	Convert an IP address to decimal .
11965	Convert an IP address to decimal .
11966	Convert an IP address to decimal .
11967	Convert bytes to bits .
11968	Convert an IP address to a binary string .
11969	Convert a netmask to a decoder .
11970	Convert a wildcard to a decimal number .
11971	Determine if the given IP is a valid IP address .
11972	Convert input to decimal notation
11973	Convert an IP address to an IP address .
11974	Convert a name to a name .
11975	Add a new IP address to another .
11976	Return the difference between two IP addresses .
11977	Returns the ip address of this IP .
11978	Get the wildcard address .
11979	Set the IP address .
11980	Set IP address .
11981	Set the IP address .
11982	Check if the given IP is valid .
11983	Upload a file .
11984	Copy a storage object to a storage object .
11985	Upload a folder .
11986	Upload a file .
11987	Trigger an event .
11988	Connect to the consumer .
11989	Handles incoming message .
11990	Check if two strings are equal .
11991	Decodes HTML entities .
11992	Set signature_passphrases .
11993	Set encryption_passphrases .
11994	Sets the algorithms .
11995	Returns a dictionary of Algorithm objects .
11996	Set the options .
11997	Verify signature .
11998	Encodes the given data .
11999	Decode data .
12000	Sign the data using the given options .
12001	Unsigns data .
12002	Remove magic from the data .
12003	Add data to the header .
12004	Read header data .
12005	Remove header from data .
12006	Read the version .
12007	Extract algorithm information .
12008	Generate a key from passphrase .
12009	Update dict with default values
12010	Get the table of contents .
12011	Extract a file from the table .
12012	Perform the photometry .
12013	Generate a panel for the plot
12014	Calculates the center of the postcard
12015	Define the plot for the plot .
12016	Calculate the uncertainty of the model .
12017	Dump a field .
12018	Disassemble the file descriptor .
12019	Find imports from pbds .
12020	Write a fasta file to a file .
12021	Add a line error .
12022	Checks if the parent is within the parent .
12023	Check the phase of the CDS .
12024	Advance a new feature .
12025	Remove a line from the tree .
12026	Get abfid from fname
12027	Get the protocol ID from a file .
12028	Write a header to a file
12029	Generate a generator for each sweep .
12030	Load the comments from the file .
12031	Gets the protocol sequence sequence .
12032	Calculate the average of the given time .
12033	Calculate the average of the sweep .
12034	Generate a Gaussian kernel .
12035	Returns the sweep of the image .
12036	Return a list of dictionaries .
12037	Returns the values of a given key .
12038	Convert data to dictionaries
12039	Launch the HTML for the given HTML .
12040	Print out out out of an item
12041	Convert data to HTML .
12042	Convert XML file to Python
12043	Exponential exponential exponential exponential .
12044	Perform cross cross cross cross cross cross - cross - cross - cross - cross - border
12045	Return the origin of the given object .
12046	Save a thing to a file .
12047	Return a string representation of a dictionary .
12048	Determine the protocol version of a file .
12049	Scan ABF folder .
12050	Get the parent file name .
12051	Get the parent of the given ABF file .
12052	Get the notes for the given ABF file .
12053	Get IDs from files .
12054	Inspect an ABF file .
12055	Login to FTP .
12056	Match a folder to a folder .
12057	Uploads a file to the server .
12058	Ask a password .
12059	Show a message with the given title .
12060	Ask the user to ask the questionbox .
12061	Process the arguments .
12062	Generate a summary of the analysis .
12063	Calculate average average for a feature .
12064	Lazy loads all ABF files .
12065	Plot the gain function .
12066	Generate a list of comments .
12067	An annotate a SWHab .
12068	Create a new figure
12069	Save a figure to a file .
12070	Try to load the swhlablab module from the given path .
12071	Update the state of the batch .
12072	Print all the arguments .
12073	Print the trace summary .
12074	Update the state of the step .
12075	Analyze a file .
12076	Create a figure and save it to the plot .
12077	Create a figure .
12078	Save the plot to the plot
12079	Creates a plot of all sweeps .
12080	Creates an overlay plot .
12081	Figure out the protocols .
12082	Rename a file with the given character .
12083	Return a list of files by extension .
12084	Get files by cell names .
12085	Searches all files in the given folder .
12086	Generate the HTML index for the page .
12087	Generate HTML for all cells .
12088	Provenience function for creating a PUT file .
12089	%prog protobuf .
12090	%prog phase - 1 - 1 - 1 - 1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
12091	This function is used to create a plot with the mean of the average .
12092	Convenience function for creating an IV .
12093	This function is used to plot the mmmon .
12094	Convenience function for creating a VTV IV .
12095	Index images .
12096	Saves the activatable model .
12097	Deletes the active Activatable model .
12098	Prints the specs .
12099	Get root directory .
12100	Append specs to the log file .
12101	Records information about the setup .
12102	Launch the process group .
12103	Print the summary of the batch .
12104	Execute the query and launch the job .
12105	Execute qsub command .
12106	Launch the process group .
12107	Check that the given launchers are valid .
12108	Launch all the batched jobs .
12109	Run all the launchers .
12110	Input a list of options
12111	Save metadata to disk .
12112	Return the path to the file .
12113	Check if file is supported .
12114	Save image data to disk .
12115	Get the timestamp of a file .
12116	Load results from a file .
12117	Calculate the ndist distribution of data
12118	Print information about an abf file .
12119	Writes the header to the file .
12120	Generate a color map .
12121	Get data from a time point
12122	Filter the Gaussian data
12123	Validate activatable models .
12124	Convert arguments to a Table .
12125	Pprint arguments .
12126	Return a string representation of the argument set .
12127	Collects a collection of specs by key .
12128	Return a summary of the items .
12129	Build a list of specs .
12130	Print the specification .
12131	Sorts a list of arguments .
12132	Return a list of linspace between start and stop .
12133	Extract data from a log file .
12134	Write data to a log file .
12135	Create a new instance of a directory .
12136	Return a list of fields .
12137	Load and return a list of tags .
12138	Return a list of files matching the given pattern .
12139	Create a FileInfo object from a pattern .
12140	Load a table .
12141	Loads dataframe into a DataFrame .
12142	Get metadata from source .
12143	Push data to the queue .
12144	Figure out the spectrum .
12145	Runs all images in a folder .
12146	Analyze an ABF file .
12147	Scan the files in the folder .
12148	Convert images to images .
12149	Analyze all ABF files .
12150	Return HTML for a file .
12151	Generate HTML for a single BASF .
12152	Generate HTML for a single plot .
12153	Convert a signal to a signal .
12154	Return a human readable time .
12155	Move a list to a list .
12156	Move a list to a list .
12157	Return a list of items in a list .
12158	Sort a list of IDs .
12159	Return a list of files in a folder
12160	Return the parent group of the given ID .
12161	Returns the path to the user .
12162	Try to catch exceptions .
12163	Check if a given event is exceeded .
12164	Add a listener to the queue .
12165	Add a listener to the event .
12166	Remove a listener .
12167	Dispatch a coroutine .
12168	Dispatches an event .
12169	Dispatches an event .
12170	Emits an event .
12171	Return the number of listeners .
12172	Generate PNG images
12173	Generate a html file .
12174	Generate a list of files in a folder
12175	Plot all sweeps .
12176	Plot the shape of the data .
12177	Plot the variance of the data .
12178	Ensure that the analysis is detected .
12179	Initialize APF .
12180	Get the author and version of the package .
12181	Create a new API subclass .
12182	Execute a method .
12183	Check if a method exists .
12184	Add a namespace to the namespace .
12185	Extract all elements from a document .
12186	Join the real time .
12187	Handle a message .
12188	Check if message is a message .
12189	Create a new BotBot instance from an API token .
12190	Format a message .
12191	Get the URL of the socket .
12192	Generate a list of instruction instructions .
12193	Respond to a channel .
12194	Validate first message .
12195	Returns a list of all app names in the project .
12196	Returns a list of task classes .
12197	Returns a list of all the tasks .
12198	Convert this dataset to a cldf file .
12199	Return the description of the documentation .
12200	Parse a JSON file .
12201	Parse a YAML file .
12202	Initialize a JSON object from a JSON string .
12203	Compile a parselet tree .
12204	Add auto - foreign keys .
12205	Build a URL for the given endpoint .
12206	Raises an exception if the response is raised .
12207	Truncate a text .
12208	Add a list of entries .
12209	Returns the cache key for the given user .
12210	Cache the result of a function .
12211	Remove all cached functions .
12212	Get the field for a proxy .
12213	Update a field object from a proxy object .
12214	Create a model model class .
12215	Get the locals of the frame .
12216	Iterate over all local variables .
12217	Print file info .
12218	Bind arguments to a signature .
12219	Given a list of parameters return a tuple of matchers .
12220	Creates a decorator .
12221	Dispatch a function .
12222	Dispatch a function .
12223	Execute the command .
12224	Convert a path to a shapefile
12225	Convert a Grib file to a TIFF file
12226	Update preferences .
12227	Bind a proxy to a prefixed prefixed prefixed prefixed value .
12228	Register admin models .
12229	Automatically register the site preferences .
12230	Unpatches all local variables .
12231	Create a new proxy module .
12232	Register site preferences .
12233	Add a prefixed prefixed prefixed prefs .
12234	Bind a preference .
12235	Generate versionwarning data .
12236	Decorator to create a new objective function .
12237	Determine the objective of the giventa .
12238	r Calculates the gradients of the giventa .
12239	Calculate the coefficient of the giventa .
12240	Compute the gradients of the giventa .
12241	Calculate the coefficient of the sphere .
12242	Calculate the bohache v for the giventa .
12243	Determine the density of the given angle .
12244	r Calculates the gradient of the tblink .
12245	Returns a list of all buckets in the S3 connection .
12246	Get a bucket .
12247	Create a new bucket .
12248	Synchronously synchronously synchronously synchronously synchronize the database .
12249	Get the key for the bucket .
12250	Get a key from the bucket .
12251	Get all keys in the bucket .
12252	Delete keys from the bucket .
12253	Deletes a key .
12254	List all keys in the bucket .
12255	Synchronously synchronizes the database .
12256	r Compute the objective function of the objective function .
12257	Smooths the given x with the given penalty .
12258	Compute the sdcone of x .
12259	Calculate the simplex product of x .
12260	Compute the columns of x .
12261	Gradient optimizer .
12262	Add a proximal operator .
12263	Load meta data .
12264	Send a file to the database .
12265	Wraps f_df_df .
12266	Decorator for decorator .
12267	Print the gradients of a function .
12268	Evaluate a spec .
12269	Evaluate the checksum .
12270	Read a table from a file .
12271	Get the schema for a given file .
12272	Convert a reference to a reference .
12273	Check if a character is valid .
12274	Convert ISO reference to int
12275	Check if iso reference is valid
12276	Generate a barcode .
12277	Add a file to a file .
12278	Runs a command on the repository .
12279	Add files to the package .
12280	Returns a list of files matching the given includes .
12281	Run a command .
12282	Get resource by path
12283	Lookup a repository .
12284	Returns the root directory for the given repository .
12285	Add a new repo .
12286	Lookup a git repository .
12287	Shell command .
12288	Determine if the repository exists .
12289	Bootstrap datapackage .
12290	Initialize the repository .
12291	Add the metadata for the given files .
12292	Add git code to the package .
12293	Add actions to the metadata file .
12294	Add platform information to the package .
12295	Add dependencies to metadata .
12296	Post the given repository .
12297	Show a list of plugins
12298	Discover all plugins .
12299	Register a plugin .
12300	Search for plugins .
12301	Instantiate a validator .
12302	Validate a repository .
12303	Check if url is valid .
12304	Post a repository .
12305	Get a module class .
12306	Find executable files .
12307	Gets the repo for a repository .
12308	Return a list of files to commit .
12309	Add files to a directory
12310	Pull a stream .
12311	Record a file .
12312	Create a new ingest point .
12313	Creates a new transformer from the repository .
12314	Run git command .
12315	Run a generic command .
12316	Initialize repository .
12317	Delete a repo
12318	Drop a repo
12319	Get the permalink for a given path .
12320	Add files to the repo
12321	Sends the status of the status .
12322	Convert a Json object to a dictionary .
12323	Decorator for api call .
12324	Saves the order .
12325	Remove tokens from a list of tokens .
12326	Initialize the plugin .
12327	Update global variables .
12328	Initialize postreceive hook .
12329	Compute SHA256 hash .
12330	Run the given command .
12331	Get a list of all commits .
12332	Get a list of diffs from history .
12333	Wait for a command .
12334	Saves the current user .
12335	Install a package .
12336	Install a package .
12337	Install a pip install .
12338	Stops a macro from a path .
12339	Compress images .
12340	Compress a PNG image .
12341	Set path .
12342	Returns a list of image paths .
12343	Return the image for the given field .
12344	Return a list of all images in the image .
12345	Stops all files in a folder .
12346	Compress images .
12347	Return the metadata for a field .
12348	Strip the coordinates of a single tile .
12349	Create a droplet .
12350	Get a dropletActions .
12351	Restore an image .
12352	Rebuild an image .
12353	Renames a file .
12354	Change the kernel .
12355	Deletes the object .
12356	Wait until all actions are completed .
12357	Connect to the SSH server .
12358	Send a request to the API .
12359	Format request parameters .
12360	Formats a request URL .
12361	Send a request to the API .
12362	Returns a list of all items in the list .
12363	Retrieves a model from the collection .
12364	Transfer a region .
12365	Get an image actions
12366	Update a key .
12367	Create a new instance .
12368	Get a domain record .
12369	Rename a domain record .
12370	Get a domain record .
12371	Logs a user .
12372	Split a list into a list .
12373	Get the droplets of the droplet .
12374	Take a snapshot of a droplet
12375	Return list of allowed operations .
12376	Assert that the allowed operations are allowed .
12377	Make a response .
12378	Perform a GET request .
12379	Create a new resource .
12380	Create a new resource .
12381	Deletes the model .
12382	Link this resource .
12383	Create a project .
12384	Decorator to check if the value is an integer .
12385	Parse a query string .
12386	Split text into segments .
12387	Parse a query string .
12388	Set the value of a target .
12389	Parse a range specification .
12390	Paginate items from request .
12391	Checks if a function is optional .
12392	Read data from the stream .
12393	Set the configuration .
12394	Decorator for delegations .
12395	Register a method .
12396	Get a method for the given arguments .
12397	Generate a generator key for the given arguments .
12398	Generate a generator .
12399	Parse a requirement .
12400	Add a new requirement .
12401	Return True if the requirements are satisfied .
12402	Add a requirement .
12403	Returns a list of requirements for changes .
12404	Updates the requirements for this requirement .
12405	Reverse the original content .
12406	Serialize the response .
12407	Convert a value to a collection .
12408	Merge options into the given options .
12409	Get information about a package .
12410	Get all versions of a package .
12411	Close the stream .
12412	Write a chunk to the stream .
12413	Serialize data to response .
12414	Flush the stream .
12415	Send data to the stream .
12416	Close the connection .
12417	Return a copy of a directory .
12418	Capture the stdout .
12419	Capture the stderr output .
12420	Return a list of urls .
12421	Write an object to a file .
12422	Dump an object to a string .
12423	Load a dictionary from a file .
12424	Load data from a string .
12425	Reverse the bumpers .
12426	Expands a list of targets .
12427	Gets the configuration file .
12428	Checks if the directory exists .
12429	Create virtualenv .
12430	Create the nginx configuration .
12431	Creates the script for the application .
12432	Create the environment .
12433	Dasherize a string .
12434	Redirect to the client .
12435	Parse a path .
12436	Traverse a request .
12437	Streams a sequence of data to a response .
12438	Deserialize the resource .
12439	Serialize the resource .
12440	Dispatch request .
12441	Ensure that the user is authenticated .
12442	Ensure that the user is accessible .
12443	Ensure that the request is allowed .
12444	Route method .
12445	Set HTTP methods
12446	Decorator to register a resource .
12447	Render a string to a string .
12448	Parse cookie string .
12449	Add a method to the API .
12450	Generate a Statement for the given effect .
12451	Derefs the given data .
12452	Check if pre_requirement is valid .
12453	Convert config to a list of arguments .
12454	Create a virtual environment .
12455	Decorator to handle errors .
12456	Install a project .
12457	Iterate over data and return an iterable .
12458	Iterate over all keys .
12459	Main entry point .
12460	Parse the arguments .
12461	Run a pip command .
12462	Prepare command line arguments .
12463	Print an error message .
12464	Print a message .
12465	Read a config file from a file .
12466	Run a command .
12467	Run hook .
12468	Save a traceback to a file .
12469	Convert value to string .
12470	Copy src to dst .
12471	Get the absolute path of a folder .
12472	Get the extension of a filepath .
12473	Add extension to filepath .
12474	Join a path to a filelist
12475	Remove all files from a folder
12476	Returns the number of bytes in the given filepath .
12477	Merge two dictionaries .
12478	Get the path to the syspath .
12479	Return the rcfile for the given application .
12480	Retrieves a section from the RCF file .
12481	Get the value of a variable variable .
12482	Find a variable in the RCF file .
12483	Filters a list of lists .
12484	Get a subdict by path .
12485	Return a list of all leaf nodes in a dictionary .
12486	Returns a list of files that match the given path .
12487	Create a folder
12488	Import config file .
12489	Remove all nodes that match the given pattern .
12490	Returns the number of nodes matching the given pattern .
12491	Convert X to float64 .
12492	Convert an iterable to a list of indices .
12493	Check if an array is valid .
12494	Check for X and y and y .
12495	Convert y to a column vector .
12496	Check if the input is a float .
12497	Convert an array to a numpy array .
12498	Convert an XFM file to a functional functional .
12499	Convert fwhm to sigma
12500	Convert Sigma to fwhm .
12501	Smooth data .
12502	Smooth images .
12503	Smooth image .
12504	Smooth image .
12505	Create a signed session .
12506	Create a signed session .
12507	Convert voxspace to mmspace
12508	Return the coordinates of a 3D image .
12509	Get image information .
12510	Get image data
12511	Load a nipy image .
12512	Convert niftilist filelist into an array .
12513	Crop an image to a new image .
12514	Crop an image .
12515	Create a new numpy image .
12516	Get a h5 file from a file .
12517	Extract datasets from h5 file .
12518	Get a list of nodes from a H5 file .
12519	Set the mask .
12520	Load images and labels and labels .
12521	Save the variables to a file .
12522	Exit the given message .
12523	Execute a command .
12524	Call the given command .
12525	Run condor command .
12526	Submit a command .
12527	Clean up a directory .
12528	Upload a pipfile
12529	Load the command table .
12530	Open a volume file .
12531	Renames a file group group .
12532	Store a list of dicom files .
12533	Create a list of items from a set of files .
12534	Update the items in the list .
12535	Copy files to another folder .
12536	Create a DICOM reader for a DICOM file .
12537	Parses all DICOM files .
12538	Returns a set of unique field values for a given field .
12539	Find all dicoms in a directory .
12540	Check if a file is a DICOM file .
12541	Groups a list of dicoms from a file .
12542	Get the attributes of the model .
12543	Merge two images .
12544	Decorator for nifti1 image .
12545	Divide an image
12546	Apply mask .
12547	Return the absolute value of an image .
12548	Convert an icc image to zscore .
12549	Compute spatial map .
12550	Write meta data to file .
12551	Write raw data to a file .
12552	Write a mhd file .
12553	Copy mhd file and raw data to dst .
12554	Convert a file to pandas .
12555	Convert a file to Pandas DataFrame .
12556	Save a list of variables to a file .
12557	Return a VersionedCli instance .
12558	Determine the drain of the image .
12559	Return the largest connected component of volume .
12560	Return a set of clusters for a given volume .
12561	Create a list of roi files .
12562	Return a list of unique non - zero values .
12563	Calculate the center of a volume .
12564	Partition data from a datavol volume .
12565	Extract a 3D volume from an image .
12566	Retrieve a dataset .
12567	Create a new empty dataset .
12568	Create a dataset .
12569	Save data to disk .
12570	Fill missing values with missing values .
12571	Read an object from the file .
12572	Put a value into the HDFStore .
12573	Put data into a DataFrame .
12574	Sets the fwhm .
12575	Apply a mask to the image .
12576	Set image mask
12577	Apply the mask to the data .
12578	Apply smoothing to the data .
12579	Return the mask and mask .
12580	Save the image to a file .
12581	Setup logging .
12582	Extract 3D data from a file .
12583	Safely cache function .
12584	Convert spatial image to hdf group .
12585	Convert spatial image to HDFS .
12586	Get nifti1 header from h5attrs .
12587	Convert a hdf5 group to nifti image
12588	Insert volumes in a file .
12589	Return a generator that yields all elements of the given iterable .
12590	Get a list of dictionaries
12591	Get the JSON representation of a dictionary .
12592	Query a RELIATION dictionary .
12593	Execute a RELIATION command .
12594	Ensure that the given endpoint is valid .
12595	Get an AAD token for a given endpoint .
12596	Read a xl file .
12597	Check if xl_path is valid .
12598	Read xl_path from xl_path .
12599	Get a list of sheets from a file .
12600	Concatenate multiple sheets .
12601	Checks if a DataFrame is valid .
12602	Return a list of values for a given column .
12603	Return a list of duplicated rows .
12604	Remove duplicated values from a sequence .
12605	Convert data to string
12606	Search for unique items .
12607	Find unique entry for a sample .
12608	Build a query from a sample .
12609	Query data from data .
12610	Concatenate queries .
12611	Search for elements by eid
12612	Search for a single sample .
12613	Check if a sample is unique .
12614	Update a unique record .
12615	Returns the number of rows in the table .
12616	Return True if obj is an image
12617	Get data from img .
12618	Return the shape of the image .
12619	Check if two images are compatible .
12620	Check if two images are equal .
12621	Return a string representation of an image .
12622	Check if two arrays are equal .
12623	Return a list of files matching the given regex .
12624	Return a list of files matching a regular expression .
12625	Get list of files in a directory .
12626	Find a list of files in a folder .
12627	Iterate over all files in a folder .
12628	Get all files in a folder
12629	Recursively recursively recursively recursively .
12630	Compose error message .
12631	Groups a list of dicomom files .
12632	Copy all the groups to a folder .
12633	Calculate the distance between two files .
12634	Determine if the dcmf1 is equal to the dcmf2 .
12635	Calculate the levenshtein analysis .
12636	Compute the upper threshold of the distance matrix .
12637	Return a list of groups in the same folder
12638	Merge a list of DICOM groups .
12639	Move dicomoms to a folder .
12640	Get the unique field values for a given field name .
12641	Get the value of a service fabric .
12642	Get the boolean value of a service fabric .
12643	Set configuration value .
12644	Get the certificate path .
12645	Sets the cache to use .
12646	Set the metadata for an AAD resource .
12647	Sets the authentication credentials .
12648	Return a list of objects that match the given field name .
12649	Check if a string is valid .
12650	Check if a string is a regular expression .
12651	Finds the first occurrence of a given pattern .
12652	Generate configuration file .
12653	Call dcm2n2n2 .
12654	Convert dcm2 to nii
12655	Given a list of filepaths return a list of filenames .
12656	Convert a named tuple into a dict .
12657	Merge two dictionaries into a dictionary .
12658	Append a list of dictionaries to a list of dictionaries .
12659	Import a python file .
12660	Copy a configuration file to a directory .
12661	Convert a file to pandas .
12662	Load a mask from an image .
12663	Load image data .
12664	Computes the union of a list of images .
12665	Apply mask to image
12666	Apply a mask to an image .
12667	Convert a vector to a volume .
12668	Convert a matrix to a 4D volume .
12669	Convert an image list to an array .
12670	Create a ServiceFabricClient .
12671	Aggregate a column .
12672	Groups the dataframe .
12673	Aggregate dataframe .
12674	Sets a subset of dataframe .
12675	Modify dataframe .
12676	Convert a character to a string .
12677	Escape a string .
12678	Unescape a string .
12679	Determine if the user can send a notice .
12680	Get formatted messages .
12681	Copy attributes from source to destination .
12682	Return a DataFrame with the given index .
12683	Show notice settings .
12684	Perform a query .
12685	Return a list of pods .
12686	Find the first node in the tree .
12687	Get notification language .
12688	Send a notification to the user .
12689	Send a message to the queue .
12690	Queue a list of users .
12691	Write a pair of pairs to a table .
12692	Return a string representation of the TSOff3 .
12693	Aggregate a column .
12694	Check if two sets are disjoint .
12695	Check if two sets are equal .
12696	Return the XML representation of the MARC .
12697	Parse a MARC record .
12698	Parse control fields .
12699	Parse a list of subfields .
12700	Returns the name of the IAI .
12701	Return a list of subfields for a given datafield .
12702	Return a list of parameters for a given parameter .
12703	Sets the parameters for a given parameter .
12704	Create a quaternion from the given axis .
12705	Calculate the center of the mass of the bodies of the bodies of the bodies of bodies .
12706	Set the state of the body .
12707	Set the rotation .
12708	Return the world coordinates of the given position .
12709	Return the world coordinates of the world .
12710	Return the relative offset of the world .
12711	Add a force to the body
12712	Add a torque .
12713	Join the world to the world .
12714	Connect to a joint .
12715	Returns a list of the positions of this object .
12716	Returns a list of all the positions of this object .
12717	Returns a list of angles .
12718	Get angle rates
12719	Return a list of axes .
12720	Set the loops
12721	Set the high stop stops .
12722	Set the velocities .
12723	Set the maxforces of the model .
12724	Set erps
12725	Set the CFM parameters .
12726	Set the stop cfms
12727	Set the stop erps
12728	Set the axes .
12729	Set the axes .
12730	Returns a list of axes .
12731	Create a new body .
12732	Create a joint with the given shape .
12733	Move the next position in the world .
12734	Sets the body of the body .
12735	Step in the world space .
12736	Checks if two bodies are connected .
12737	Parse AMC file .
12738	Create the bones of the world .
12739	Create a list of joints .
12740	Parse a list of corporations .
12741	Parse a list of persons .
12742	Returns a list of ISBNs .
12743	Return a list of URLs
12744	Return an array of internal URLs
12745	r Calculates the PID of the PID
12746	Convert iterables into a flat array .
12747	Load data from a source file .
12748	Parse a skeleton configuration file .
12749	Load an ASF file .
12750	Set the PID parameters for this model .
12751	Return a list of joint tracks .
12752	Return a list of indices for a given name .
12753	Return a list of indices for a given name .
12754	Calculates the joint distance between two points .
12755	Enable motors .
12756	Set target angles
12757	Add a torque to the list of joints .
12758	Returns a sorted list of channels .
12759	Load data from a CSV file .
12760	Load data from c3d file .
12761	Process the data .
12762	Create the bodies of the mesh .
12763	Load attachments from source file .
12764	Attach a ball to a ball .
12765	Reposition the frame .
12766	Calculate the distances between two points .
12767	Compute the forces of the model .
12768	Loads a skeleton from a file .
12769	Load markers from a file .
12770	Perform a step .
12771	Settle a frame to a given frame .
12772	Iterate over all markers .
12773	Iterate over a marker frame .
12774	Iterate over the vertices .
12775	Iterate over all angles in the given angles .
12776	Iterate over the motors at the given position .
12777	Reverse a list of words .
12778	Render the world .
12779	Gets a stream of streams .
12780	Returns a list of users .
12781	Set the name of the room .
12782	Sets the topic .
12783	Send a message to the room .
12784	Returns a list of config directories .
12785	Returns the path to the xdg config .
12786	Returns the filename of the configuration .
12787	Check if a file is valid .
12788	Load the config file .
12789	Get a list of styles
12790	Create a connection from settings .
12791	Perform a DELETE request .
12792	Perform a POST request .
12793	Perform a GET request .
12794	Returns the headers for the user .
12795	Gets the password url .
12796	Parse a JSON response .
12797	Build an HTTP request .
12798	Fetch a HTTP request .
12799	Returns the URL for the request .
12800	Determine if the type is a text .
12801	Get all rooms
12802	Get a room by name .
12803	Gets a room .
12804	Get a user by id .
12805	Search for messages .
12806	Attach a observer to the observer .
12807	Handle incoming messages .
12808	Fetch messages from room
12809	Handle received messages .
12810	Send a connection to the server .
12811	Called when a line is received .
12812	Handle raw data .
12813	Returns a list of styles .
12814	Start processing .
12815	Finish the file .
12816	Send a block to the consumer .
12817	Returns the length of the chunk .
12818	Build chunk headers .
12819	Get file size .
12820	Generate filename for filename .
12821	Convert a string to a path .
12822	Return the path of the path .
12823	Generate a list of filenames .
12824	Execute the code .
12825	Parse the given text .
12826	Flush the buffer .
12827	Add data .
12828	Log an error message .
12829	Parses a list of texts .
12830	Set campfire entity data .
12831	Validate XML text .
12832	Validate XML name .
12833	Called when the game is entered .
12834	Handle the update stage .
12835	Called when the game is finished .
12836	Return a dictionary of records .
12837	Initialize the connection .
12838	Connect to the database .
12839	Initialize the pool .
12840	Connect to the database .
12841	Close the connection .
12842	Receive actor id from server .
12843	Executes a synchronously synchronously synchronously synchronously synchronously synchronously synchronously synchronously .
12844	Execute a message .
12845	Relay message .
12846	Generate data item
12847	Ensure that object is active .
12848	Add a member checks to the members of members .
12849	Add a callback to the API .
12850	Removes the world from the world .
12851	Unlock the lock .
12852	Scan an XML tree .
12853	Scans an event stream .
12854	Parse a file .
12855	Generate a sub - tree of events .
12856	Merge events from events .
12857	Return a generator that yields events from the given events .
12858	Creates a BusinessDate object from a datetime object .
12859	Convert this instance to a date .
12860	Add a period .
12861	Returns a new BusinessDate object with the given number of months .
12862	Add business days to this day
12863	Parse a quoted string .
12864	Returns the number of days in a month .
12865	Setup the router .
12866	Initialize the database .
12867	Clean up all databases .
12868	Register a model .
12869	Manage the context manager .
12870	Migrate data from database .
12871	Decorator for chain .
12872	Return the next one or more of the next one .
12873	Checks that the next one is one of the next one .
12874	Checks if a predicate is satisfied .
12875	Creates a generator that yields a token .
12876	Returns a list of all optional arguments .
12877	Yields a list of tuples .
12878	Returns a list of strings that match the given term .
12879	Separator .
12880	Fill the contents of the buffer .
12881	Return the next token .
12882	Main entry point .
12883	Run supervisor .
12884	Get field type .
12885	Convert the value to a python value .
12886	Get the webfs api endpoint .
12887	Create a new session .
12888	Call the given path .
12889	Handle a set operation .
12890	Handle text item .
12891	Handle an int .
12892	Handle long .
12893	Get the power of the device .
12894	Set the power of the device .
12895	Get all modes .
12896	Get the volume steps .
12897	Get the current state of the device .
12898	Set the mute mode .
12899	Get the play status .
12900	Get all the equalisers .
12901	Set the sleep value .
12902	Sets the value of the given value .
12903	Parse a list of genome fields .
12904	Return the index of a value .
12905	Return a copy of this object .
12906	Determine if the object has unsaved changes .
12907	Assert that the given value is valid .
12908	Load data from a file .
12909	Create a new instance from a json file .
12910	Return the intersection of this composite .
12911	Return the union of this composite .
12912	Append an item to the list .
12913	Add an item to the list .
12914	Write json to file .
12915	Return a list of filelist objects .
12916	Remove all files in the tree .
12917	Refreshes a reference .
12918	Deletes multiple models .
12919	Save the model .
12920	Reload all objects .
12921	Refreshes the list of objects .
12922	Render the template .
12923	Generate a tag .
12924	Return a string representation of an object .
12925	Match the genome to a clinit variable .
12926	Return a dictionary as a dictionary .
12927	Parse alignment data .
12928	Parse info field .
12929	Return a dictionary as a dictionary .
12930	Get the position of a VCF line .
12931	Convert the value to a storage .
12932	Navigate to VCF directory
12933	Return a dictionary representing the ClinVarAlveAlter .
12934	Parse the frequencies .
12935	Parse allele data .
12936	Decorator to add blok .
12937	Decorator for deprecated function .
12938	Set default Redis connection params
12939	Clear all Redis pools
12940	Returns a redis pool based on parameters .
12941	Print the contents of this object .
12942	Determine if the object has unsaved changes .
12943	Compare two objects .
12944	Save the IndexedRedis object .
12945	Returns true if this object has the same values
12946	Return a copy of this object .
12947	Save this object to external storage .
12948	Reload the object .
12949	Creates a copy of a model .
12950	Create an instance of RedisRedisModel
12951	Get a new Redis connection .
12952	Gets the connection .
12953	Add a new ID to the database .
12954	Removes an ID from the database .
12955	Add an id to the index .
12956	Remove an ID from the index .
12957	Get the key for the index .
12958	Removes a string from the index .
12959	Return the next unique ID .
12960	Add a filter to the filter object .
12961	Returns the number of filters .
12962	Check if the given id exists .
12963	Return a list of primary keys .
12964	Returns an IRQueryList containing all the primary keys .
12965	Returns a list of all fields matching the given fields .
12966	Return a list of all indexed fields .
12967	Return a random object .
12968	Deletes the model .
12969	Retrieve a single item from the database .
12970	Calls the cascadeFetch function .
12971	Retrieves a list of objects from the database .
12972	Get all fields in the database .
12973	Retrieves a list of fields from a list of fields .
12974	Convert a list of indexes to a database .
12975	Saves the object .
12976	Convert a list of objects to a hash .
12977	Delete an object
12978	Delete an object by its primary key .
12979	Delete multiple objects
12980	Deletes multiple objects from the database .
12981	Convert HTML to a string .
12982	Convert a file object to a string .
12983	Parse a file .
12984	Decorator for keyword arguments .
12985	Returns the compression mode for this RedisRedis .
12986	Convert value to bytes .
12987	Return a new function that takes a function and returns a new function .
12988	Returns the URL of the remote jupyter proxy .
12989	Setup notebook .
12990	%prog overview
12991	Create a new hierarchy .
12992	Generate a list of reffs .
12993	Return a list of references to a given level .
12994	Calculate a table from a cluster
12995	Takes an array of temperature and returns the temperature .
12996	Main entry point .
12997	Create a figure for a cluster
12998	Takes a cluster and returns a list of tuples .
12999	Create the HRD diagram for the given cluster .
13000	Calculates the coordinates of the diagram .
13001	Generate HR diagram from data .
13002	Filter cluster data
13003	Modify data .
13004	Modify input .
13005	Retrieves credentials for a given user .
13006	Updates the path of the file .
13007	Initialize WindowsPath2 .
13008	Return the path of the windows path .
13009	Format JSON object .
13010	Print a line .
13011	Get the current IP address .
13012	Pretty print a dataframe
13013	Strip labels .
13014	Remove namespace from document .
13015	Return True if the given URI matches the given URI .
13016	Decorator for hook .
13017	Add a hook .
13018	Configure the database .
13019	Assemble a SQL statement .
13020	Execute a raw SQL query .
13021	Process a list of columns .
13022	Execute a SQL query .
13023	Execute a SELECT statement .
13024	Get a single row from the database .
13025	Create a payload file .
13026	Combine two files .
13027	Detect the target OS .
13028	Explicitly exploit .
13029	Perform an exploit .
13030	Create a new http server .
13031	Poll a single thread .
13032	Start the server .
13033	Writes an index to a file .
13034	Write triples to a file .
13035	Read translations from a file .
13036	Read an openke translation file .
13037	Show tags .
13038	Main entry point .
13039	Show a list of users .
13040	Recursively process annotations .
13041	Start a pipe .
13042	Create a query from a section
13043	Creates a list of processes in a directory .
13044	Main entry point .
13045	Returns the locale for the given iso code .
13046	Fetches a list of references for a citation .
13047	Return the name of the citation type .
13048	Returns the filter for the given type .
13049	Checks if the given service is valid .
13050	Main entry point .
13051	Import a Nmap from a host
13052	Run nmap .
13053	Run nmap scan .
13054	Run nmap scan .
13055	List all port counts .
13056	Rename plugin endpoint .
13057	Returns the locale for the request .
13058	Transform an object into a string .
13059	Get the inventory .
13060	Get reffs for a given object .
13061	Get the passage of the given object .
13062	Get the siblings of the given object .
13063	Generate a slug for a collection .
13064	Creates a link to a book .
13065	Return a JSON representation of a member .
13066	Return a list of members of a collection .
13067	Create a list of parents for a collection .
13068	Renders all collections .
13069	Render a collection .
13070	Return a list of references for a given object .
13071	Return a redirect for the given object .
13072	Renders a passage .
13073	Renders a single asset
13074	Register secondary assets .
13075	Create a blueprint .
13076	Creates a view .
13077	Return a list of all collections .
13078	Returns the cache keys for the given endpoint .
13079	Render a template .
13080	Register the blueprint .
13081	Register filters .
13082	Register plugins .
13083	Convert text into chunks .
13084	Add a tag
13085	Set a value for a given section .
13086	Get the value of a section .
13087	Gets the config directory .
13088	Write configuration to the configuration file .
13089	Check if a remote branch is tracked .
13090	Main entry point .
13091	Get the name of the network interface .
13092	Loads the list of services .
13093	Write targets to the target file .
13094	Start the process .
13095	Called when a file is received .
13096	Watch the directory .
13097	Terminate all processes .
13098	Wait for all processes .
13099	Returns an array of annotations for the target targets .
13100	Renders the text .
13101	Main entry point .
13102	Get the UID of the editor .
13103	Create a scan .
13104	Start a scan .
13105	Compare two DataStore objects .
13106	Add a tag .
13107	Remove a tag .
13108	Convert this object to a dict .
13109	Retrieves the annotations of the query .
13110	Return the name of the item .
13111	Return a list of dictionaries .
13112	Returns a list of IP addresses .
13113	Transfer a DNS zone .
13114	Resolve DNS addresses .
13115	Parse a list of IP addresses .
13116	Create a connection .
13117	Search for Elasticsearch .
13118	Search for arguments .
13119	Returns the number of documents in Elasticsearch .
13120	Count the number of arguments .
13121	Generate a pipe from stdin .
13122	Convert a range to a Range object .
13123	Return a parser for the core .
13124	Convert an object to ID .
13125	Convert a user to an object .
13126	Returns a list of all domains .
13127	Return a list of lines .
13128	Convert the XML tree to commands .
13129	Initialize indices .
13130	Parse a single computer .
13131	Parses a list of hostcomputer .
13132	Parse a user .
13133	Parse domain users .
13134	Import a list of domains .
13135	Search for a query .
13136	Perform a request .
13137	Convert string to unicode .
13138	Perform a GET request .
13139	Return a JSON representation of this object .
13140	Read the contents of the resource .
13141	Build an index mapping from triples .
13142	Return a list of triples from the given indexes .
13143	Transform a triples into a Numpy array .
13144	Pack triples of triples .
13145	Remove duplicate relation from triples .
13146	Remove direct link triples from the triples .
13147	Replace all triples in the given triples .
13148	Freeze the index .
13149	Log an operation .
13150	Log a state .
13151	Log an update .
13152	Log an error .
13153	Decorator to wrap a cursor .
13154	Decorator to wrap a cursor .
13155	Decorator for ntuple .
13156	Decorator to execute a transaction .
13157	Returns the number of rows in a table .
13158	Insert data into table .
13159	Update a table .
13160	Delete a row from a table .
13161	Execute a SELECT clause .
13162	Execute raw SQL query .
13163	Serialize text .
13164	Format a value .
13165	Recursively traverse the elements in the given element .
13166	Parse query string .
13167	Insert a new element into the list .
13168	Return the children of this element .
13169	Returns true if the node matches the given predefined rule .
13170	Return the path of this tag .
13171	Iterate over all children .
13172	Return the last child node .
13173	Return all parents of this tag .
13174	Return the next element .
13175	Return the previous tag .
13176	Return a list of observations .
13177	Get cache key .
13178	Decorator to cache a function .
13179	Decorator to get the value of a function .
13180	Get column numbers from a list of columns .
13181	Return a tuple of column names .
13182	Writes an observation to the writer .
13183	Convert observation data to a row .
13184	Convert a row into a dictionary .
13185	Get the default tag for the given app .
13186	Download all observations from the given observer code .
13187	Generate image path .
13188	Process the lander page .
13189	Upload data to MongoDB .
13190	Convert json object to xml
13191	Convert JSON object to XML .
13192	Convert geojson to GML .
13193	Convert geometries to XML element .
13194	Remove comments from tex_source
13195	Replace macros in the tex_source
13196	Ensure that the given document is valid .
13197	Convert input doc to a string .
13198	Read a file from a given root_path .
13199	Convert the content to a string .
13200	Formats the title as a string .
13201	Formats a short title .
13202	Formats the abstract text .
13203	Formats the authors of the authors .
13204	Parse the document class .
13205	Parse the title .
13206	Parse the document reference .
13207	Parse the author .
13208	Parse the abstract document .
13209	Prepare the snippet for pandoc .
13210	Loads the BibTeX file .
13211	Parse the revision date .
13212	Build a JSON - LD file .
13213	Rename a database .
13214	Check if the socket is available .
13215	Dump a database to a database .
13216	Restore a database .
13217	Return a string representation of a connection .
13218	Returns the URL for the connection .
13219	Shell command .
13220	Return a list of settings .
13221	Display a breakfast command .
13222	Show a message for a lunch .
13223	Display a dinner .
13224	Main entry point .
13225	Process a list of product URLs .
13226	Process ltd document .
13227	Decorator for decorator .
13228	Get an installation token .
13229	Create a JWT .
13230	Get the macros from a tex_source
13231	Get the definition of the def macros
13232	Get a list of macro macros .
13233	Load a module .
13234	Convert a value to a timezone .
13235	Ensure the value is naive .
13236	Convert datetime to timezone .
13237	Returns the next interval .
13238	Return a list of daily schedules for the given range .
13239	Returns a list of intervals for the given range .
13240	Checks if the given date is included in the query .
13241	Generate a list of daily periods .
13242	Returns a Period object representing the period .
13243	Returns a set of weekdays .
13244	Creates a temporary directory .
13245	Download a text from a URL .
13246	Download a list of bibtex files .
13247	Downloads a list of libtex files .
13248	Get a BibTeX object from a list of BibTeX files .
13249	Get the URL for the entry .
13250	Get the author of a entry .
13251	This method is used to process the ontology .
13252	Reduce the metadata from the github repository .
13253	Download metadata from GitHub .
13254	Returns the time zone .
13255	Sets the current time .
13256	Return a dictionary representation of this entry .
13257	Save an entry to the file .
13258	Returns the file path for the given Uid .
13259	Combine a collection of members .
13260	Main entry point .
13261	Gets the task tree tree .
13262	Define a task .
13263	Get the parameters of the task .
13264	Get a configuration value .
13265	Returns a new instance of the given plugin class .
13266	Convert XML to json
13267	Convert geometries to geojson .
13268	Convert geometries to geojson
13269	Convert a Paragraph element to a paragraph .
13270	Return all subclasses of this class .
13271	Return a list of unique elements .
13272	Convert an array of values to a masked array .
13273	Convert obj to json
13274	Convert obj to json .
13275	Update descib_path .
13276	Update the rib_path .
13277	Update the lcin path .
13278	Recursively update the RIN_path .
13279	This method is called when a child of a child .
13280	Handles the children of the child .
13281	Parse the given source .
13282	Parse a command .
13283	Parse whitespace argument .
13284	Create a list of events from a document .
13285	Clone a dataset .
13286	Get the dataframe from a variable .
13287	Load a query .
13288	Read a commit timestamp for a file .
13289	Get the commit date for the given files .
13290	Iterate over filepaths with given extension .
13291	Returns a list of variables matching the given keyword arguments .
13292	Return a JSON representation of the variables .
13293	Ensure pypoc is installed .
13294	Convert text to pandas .
13295	Convert a latex document to a latex document .
13296	Decode a JSON string .
13297	Encode obj to json
13298	Find all repositories in the repository .
13299	Install a package .
13300	Upgrade a package .
13301	Return a pandas DataFrame with quantile .
13302	Calculate the distance between two points .
13303	Calculate the mean distance between two points .
13304	Compute the mfbe .
13305	Compute the difference between two arrays .
13306	Calculates the correlation between two points .
13307	Compute the mean of a given b .
13308	Compute the gmv .
13309	Calculate percentage between two values .
13310	Returns a list of stats for a set of samples .
13311	Return the path to the site .
13312	Preactivate environment variables .
13313	Activate the site .
13314	Removes the directory .
13315	Gets the command .
13316	Create a virtual environment .
13317	Removes the given environment .
13318	Launch a module .
13319	Deactivate the environment .
13320	Return a list of available modules .
13321	Add a module to the environment .
13322	Removes the active module
13323	Format a list of objects .
13324	Show all active modules .
13325	Activate the given paths .
13326	Create a new virtual environment .
13327	Remove a virtual environment .
13328	Add a path to the cache .
13329	Remove a virtual environment .
13330	Create a new module
13331	Add a new module
13332	Localize a module .
13333	Resolve a path .
13334	Return a virtual environment for the given path .
13335	Try to find a resolver .
13336	Try to find a module .
13337	Try to find an active env module .
13338	Redirect a path to a resolver .
13339	Transpose an array .
13340	Roll axis .
13341	Expand an array of dimensions .
13342	Concatenate multiple arrays .
13343	Return the shape of the array .
13344	Returns the mean of an array .
13345	Return True if shape is valid .
13346	Run a command .
13347	Return a list of shell commands .
13348	Display a prompt .
13349	Launch a command .
13350	Add a file to the repository .
13351	Add a list of files .
13352	Iterate over all files in the repository .
13353	Register a status job .
13354	Pipe text to stdout .
13355	Calculate profiler for profiler .
13356	Run a global hook .
13357	Calculates the mean of a row .
13358	Calculate an AOT - V - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
13359	Validate the environment .
13360	Load environment variables .
13361	Save environment variables .
13362	Prompt a text prompt .
13363	Prints text to terminal .
13364	Setup the executor engine .
13365	Return a list of objects .
13366	Apply a function to the given object .
13367	Register a proxy type .
13368	Check if path is a git repository .
13369	Determine if path is a home directory .
13370	Check if path is redirecting .
13371	Redirect to environment variables .
13372	Expand a path to an absolute path .
13373	Return the absolute path of the given paths .
13374	Return path to binpath .
13375	Ensure path exists .
13376	Yield all files in a directory .
13377	Yield all files in a directory .
13378	Preprocess a dictionary .
13379	Joins a sequence .
13380	Join two dictionaries .
13381	Convert environment variables to a dictionary .
13382	Convert a dict to a dict .
13383	Expand environment variables .
13384	Generate a temporary env file .
13385	Store environment variables .
13386	Returns the upstream URL for the given URI .
13387	Creates an HTTP request object .
13388	Get the TTL of the response .
13389	Create manifest .
13390	Format a pathname .
13391	Format a UUID .
13392	Return a paginated list of updates .
13393	Send a client to a client .
13394	Returns the value of the given name .
13395	Update settings .
13396	Get settings and attributes .
13397	Retrieves a class from a given class or class .
13398	Checks if the plugin is valid .
13399	Returns the path to the resource path .
13400	Add a logbook .
13401	Remove a logbook .
13402	Return a list of all the available log files .
13403	Check if user is accepted
13404	Parses the given element .
13405	Prepare the image for the image
13406	Submit the user to the logbook .
13407	Send a file to the logbook .
13408	Setup the UI .
13409	Show the menu .
13410	Add a list of logbooks to the log
13411	Removes a list of logbooks .
13412	Change log type .
13413	Add the menu to the menu .
13414	Remove a layout .
13415	Add a label .
13416	Return the linkcode for the given module .
13417	sync dbdb
13418	Start the runserver .
13419	Schema migration .
13420	Validate the given definition .
13421	Map IDs to IDs .
13422	Get all entries for a given key .
13423	Return a list of lines .
13424	Get a single message .
13425	Create a new message .
13426	Update a message .
13427	Delete messages .
13428	Get a single site .
13429	Get all sites .
13430	Create a new site .
13431	Generates a link for the given object .
13432	Return a link to the given rank .
13433	Show a figure .
13434	Validate index .
13435	Cut a line .
13436	Updates the positions .
13437	Cut a line into a list .
13438	Extend a range of strings .
13439	Lock a file .
13440	Unlock a file .
13441	Initialize local catalog .
13442	Initialize local catalog .
13443	Returns a list of all nodes in the tree .
13444	Return the index of the given x .
13445	Create a new user .
13446	Get messages from response .
13447	Authenticate the user .
13448	Make a GET request .
13449	Perform a POST request .
13450	Returns the value of the given field .
13451	Returns the maximum image maximum .
13452	Return the minimum image minimum .
13453	Spawn a greenlet .
13454	Return the usage of the program .
13455	Parse a list of sections .
13456	Open a bucket .
13457	Upload a file to S3 .
13458	Downloads a S3 file .
13459	Creates a calendar .
13460	List all comments .
13461	Show event list .
13462	Show the video list .
13463	Add a new event .
13464	Add memory .
13465	Register a library .
13466	Set the moments of the signal .
13467	Sets the channel siren .
13468	Normalize a slice .
13469	Add error message .
13470	Copy a zip file to dst .
13471	Apply changeset to changeset
13472	Validate the event form .
13473	Loop through the background loop .
13474	Loop through the thread .
13475	Start the gevent loop .
13476	Kill the greenlet loop .
13477	Create a non - uniform image .
13478	Convert a sentence to a space .
13479	Converts hyphens to hyphens .
13480	Replace string with replacement with replacement
13481	Perform a regular expression .
13482	Make Sphinx .
13483	Rsync docs .
13484	Generate ghpages .
13485	Show HTML documentation .
13486	Minify CSS rules .
13487	Get the index of the file .
13488	Create a new task .
13489	Update the tasks admin .
13490	Recursively reconcile the given challenge .
13491	Prompt a user with a prompt .
13492	Prompt user with custom options .
13493	Read config file .
13494	Write config file .
13495	Initialize a new word .
13496	Return a new version of this version .
13497	Clone this tag .
13498	Return a copy of this instance with the given label .
13499	Parse a tag .
13500	Takes a figure out of the figure .
13501	Update time .
13502	Add extra context to the context .
13503	Create a new challenge .
13504	Update the challenge .
13505	Check if the challenge exists
13506	Get a single position .
13507	Get a list of positions
13508	Create a new position .
13509	Run sloc count .
13510	Execute pyflake
13511	HTTP exception handler .
13512	Determine if the given value is a color .
13513	r Calculates the Reynolds number for a given length .
13514	Calculate froude number
13515	Calculate residual residual residual residual .
13516	Specifies the length of the surface .
13517	Calculate the resistance of the surface .
13518	Return the maximum area of the deck .
13519	Return the power of the vehicle .
13520	Configure the server .
13521	Send a submission to a submission .
13522	Return the URL for the given slug .
13523	Convert response to JSON .
13524	Safely join all greenlets .
13525	Error handler .
13526	Convert this Message to a Message .
13527	Clean up all files .
13528	Print options .
13529	Parse a raw message .
13530	Add a child node to this node .
13531	Return a list of ancestors .
13532	Return all ancestors of this node .
13533	Return all descendants of this node .
13534	Return True if this node is removed .
13535	Remove all nodes from the graph .
13536	Return a list of nodes in the list .
13537	Check if the rule is allowed .
13538	Get a single location .
13539	Get a list of locations .
13540	Compute the chisq .
13541	Create a new task .
13542	Update the task admin .
13543	Create a task from a server .
13544	Convert a string to a string .
13545	Get a user .
13546	Get a list of users .
13547	Set virtualenv .
13548	Update dst .
13549	Install pip install .
13550	Get a resource
13551	Put a resource
13552	Post a resource .
13553	Delete a resource
13554	Create a new shift
13555	Delete shifts .
13556	Return all comments for this event .
13557	Return a list of all images .
13558	Returns the number of images in this update .
13559	Gets the top - level assets .
13560	Decorator to wrap a function .
13561	Launch a menu .
13562	Save the model .
13563	Replace all items in the list .
13564	Generate a list of field names .
13565	Registers an HTTP error handler .
13566	Plot a plot .
13567	Returns a range of linear interpolation between start and stop .
13568	Decorator for the selected course .
13569	Decorator for the selected exercise .
13570	Decorator for testing .
13571	Configure server .
13572	Download a course .
13573	Skip the given course .
13574	Run the given command .
13575	Select a course .
13576	Submit an Exercise .
13577	Submit a paste .
13578	Update course metadata .
13579	Determine the type of x .
13580	Return a dictionary of values from a dictionary .
13581	Apply types to the given line .
13582	Convert a CSV file to a CSV file .
13583	Generate a link for an object .
13584	Display the given object .
13585	Add a link .
13586	Add an object to the list .
13587	Add a formatted field to the list .
13588	Decorator for POST requests .
13589	Decorator for JSON POST request .
13590	Compute the Sigma sigma .
13591	Calculate the number of p_poule .
13592	Fetch a tag from the upstream repository .
13593	Check environment variables .
13594	Print information about the latest version .
13595	Confirm a tag .
13596	Get the value of a given key .
13597	Return a list of file paths .
13598	Perform a tick .
13599	Push a key into the list .
13600	Increment counter .
13601	Prints the progress bar .
13602	Print a warning message .
13603	Print an error message .
13604	Execute a command .
13605	Return the url for a point
13606	Main entry point .
13607	Save an object to a file .
13608	Unpack a file .
13609	Formats a contact form .
13610	Load gitconfig file .
13611	Add additional arguments to the git repo .
13612	Run the main thread .
13613	Combines a list of filenames .
13614	Apply an orientation to an image .
13615	Generate a scaffold file .
13616	Create a new site .
13617	Publish the site .
13618	Get all branches .
13619	Get current branch .
13620	Create a diff between two tags .
13621	Return a function that returns the first element of the given function .
13622	Return a function that returns a list of results .
13623	Convert a value to a string .
13624	Convert value to integer .
13625	Convert value to bool .
13626	Parse a value .
13627	Convert a value to a datetime object .
13628	Parses the given query into a dictionary .
13629	Put metrics .
13630	Render resource .
13631	Adapts a response to a resource .
13632	Handle render result .
13633	Return the handler for the given request .
13634	Parse Accept headers .
13635	Split headers into CGI headers .
13636	Returns the content encoding of the request .
13637	Decorator for a function .
13638	Configure settings .
13639	Bind a module to the given path .
13640	Get the version of the transaction .
13641	Send a transaction .
13642	Check if the connection has been sent .
13643	List all commands .
13644	Add additional arguments to the parser .
13645	Parse command line arguments .
13646	Convert a name to underscores .
13647	Get a list of fuel prices .
13648	Get the prices for a station
13649	Returns a list of station prices for a given radius .
13650	Returns a list of prices for a given location .
13651	Retrieves information about a reference .
13652	Prepare the apache file .
13653	Matches a text field .
13654	Matches an integer .
13655	Match the given components .
13656	Decorator to route a resource .
13657	Creates a new router for the given object .
13658	Add a function to the router .
13659	Add a route to the router .
13660	Add a subroute .
13661	Create a temporary temporary file .
13662	Write a file to a temporary file .
13663	Get item by uuid
13664	Sets an item to a file .
13665	Update an item with the given uuid
13666	Handle command .
13667	Execute a command .
13668	Create a slinky bucket .
13669	Check if the stdout is readable .
13670	Returns a list of all the indices of the given string .
13671	Strip a string .
13672	Initialize the build .
13673	Add a file to the list .
13674	Add a directory .
13675	Add a path object to the bundle .
13676	Add prepare_handler .
13677	Prepare the compiler .
13678	Returns the number of files in the directory .
13679	Register JSON data from JSON .
13680	Returns a dictionary with the translation keys
13681	Return the JSON representation of this object .
13682	Return a list of tuples
13683	Perform a GET request .
13684	Perform a POST request .
13685	Load environment variables .
13686	Creates a new instance of embedding data .
13687	Assert that two files are equal .
13688	Generate HTML diff .
13689	Add a peer
13690	Remove a peer
13691	Return a dictionary of peers .
13692	Broadcast a transaction .
13693	Register a service .
13694	Main entry point .
13695	Print a debug message .
13696	Parse a string .
13697	Read a file .
13698	Wait until the process is reached .
13699	Make sure the given fileobj is a seekable .
13700	Initialize the application .
13701	Handle tracing request .
13702	Called when the request is finished .
13703	Expand words from a line .
13704	Iterate over lines .
13705	Iterate over all characters in text .
13706	Iterate over lines in text .
13707	Removes words from a line .
13708	Check if ip is valid
13709	Check if the result is a threat .
13710	Check if the result is suspicious .
13711	Invalidate an IP address .
13712	Invalidate the cache .
13713	Run the consumer .
13714	Upload a batch .
13715	Get next item from queue .
13716	Get the next item from the queue .
13717	Request a batch of messages .
13718	Convert a URL to underscores .
13719	Create a tree from a list of endpoints .
13720	Main entry point .
13721	Query WMI .
13722	Logs a URL .
13723	Write a file to the store .
13724	Perform a POST request .
13725	Registers credentials .
13726	Set connection information .
13727	Sets the DELETE command .
13728	Return the balance of a given address .
13729	Calculates the balance of the given address .
13730	Convert value to bool .
13731	Validate environment variable .
13732	Validate that the environment variable is a boolean value .
13733	Convert value to python log level .
13734	Register a range type .
13735	Get API error from response .
13736	Get params from request .
13737	Get the query context .
13738	Run the real time loop .
13739	Keep alive threads .
13740	Connect to the server .
13741	Decorator for caching .
13742	Returns a connection to the database .
13743	Get the schema .
13744	Create a new table .
13745	Get the table .
13746	Create a new item .
13747	Retrieves a single item from DynamoDB .
13748	Get a counter .
13749	Decorator to create a relationship .
13750	Create a new one - to - many relationship .
13751	Handle HTML code .
13752	Add a foreign key constraint .
13753	Prepare a path .
13754	Read data from a file .
13755	Write contents to file .
13756	Copy a file to dest .
13757	Get file extension .
13758	Split a path .
13759	Creates a URL for the given parts .
13760	Formats the given time .
13761	Handle a response .
13762	Check if the cursor is next .
13763	Wrap a color .
13764	Register a message .
13765	Insert a value into the list .
13766	Parse a string .
13767	Add a bundle to this asset .
13768	Collect all files .
13769	Get the minifier .
13770	Render an asset .
13771	Collect all links from the assets .
13772	Return the default value for the given object .
13773	Initialize logger .
13774	Format a record .
13775	Include the database .
13776	Get absolute path and relative paths .
13777	Add an enum descriptor .
13778	Finds a file containing the given symbol .
13779	Find a message type by name .
13780	Find enum type by name .
13781	Find an extension by its name .
13782	Convert an enum descriptor to a descriptor .
13783	Make a field descriptor .
13784	Creates a database session .
13785	Generate a random string .
13786	Ensure that the given field is valid .
13787	Flush the queue .
13788	Open a file or file object .
13789	Run marv command .
13790	Decode a message set .
13791	Get the application name .
13792	Get a function by name .
13793	Handle a function .
13794	Iterate over a map document .
13795	Handle a reduce function .
13796	Handle a reduce function .
13797	Handle a function .
13798	Handle the command line .
13799	Log a string .
13800	Generate a unique guid .
13801	Revoke a token .
13802	Authentication method .
13803	Validate a request code .
13804	Generate a random token
13805	Merge ordered lists of ordered objects .
13806	Validate required fields .
13807	Get the current time .
13808	Run the crawler .
13809	Get the version of a file .
13810	Make a file descriptor .
13811	Get the top level of this type .
13812	Find method by name
13813	Convert a message to JSON .
13814	Convert a message to a JSON object .
13815	Convert message to json object
13816	Parse a JSON string into a JSON object .
13817	Convert a field value pair into a message type .
13818	Convert a value to a message .
13819	Convert a value to a Message object .
13820	Convert a list of values to a list of values .
13821	Convert a value to a struct .
13822	Update the notebook configuration .
13823	End the timer .
13824	Convert this instance to a JSON string .
13825	Deserialize a duration string .
13826	Parses a JSON string .
13827	Get a document .
13828	Read the contents of a file .
13829	Remove a collection .
13830	Return the URL of this resource .
13831	Perform an API call .
13832	Skip field value .
13833	Parse an integer .
13834	Print a message .
13835	Parses a message and merges the message .
13836	Merge a message field .
13837	Consume an identifier .
13838	Consume an integer .
13839	Consume float .
13840	Consume Bool .
13841	Consume a single byte string .
13842	Convert ark_timestamp to UTC .
13843	Close the connection .
13844	Process the given content .
13845	Return a unique unique path .
13846	Return a list of numbered paths .
13847	Return a tuple of splitext files .
13848	Set the modification time .
13849	Get the timestamp of a file .
13850	Ensure that a function is not present .
13851	Check if path is hidden .
13852	Set the age of the game .
13853	Runs the process .
13854	Appends the main thread to the main thread .
13855	Get text from node
13856	Get the balance
13857	Send a message .
13858	Perform a curl request .
13859	Read the contents of a file .
13860	Check if the given class is a date type .
13861	Convert a date to a datetime object .
13862	Return the timezone of the given date .
13863	Return the timestamp of the given date .
13864	Return the timestamp of the given date .
13865	Convert timestamp to timezone .
13866	Convert timestamp to timezone .
13867	Truncate a given unit .
13868	Calculate the given weekday .
13869	Get the native EOL style for the given platform .
13870	Normalize path .
13871	Convert a path to a canonical path .
13872	Standardize path .
13873	Copy a file to target_filename .
13874	Copy file to target_filename
13875	Copy files to target directory
13876	Copy all files in the specified directory .
13877	Copies a directory .
13878	Delete file .
13879	Append contents to a file .
13880	Move file to target_filename .
13881	Move directory to target directory .
13882	Get the contents of a file .
13883	Get the lines of a file .
13884	List files in a directory .
13885	Create a file .
13886	Replace the contents of a file .
13887	Create a directory .
13888	Delete a directory .
13889	List available network drives .
13890	Create a symbolic link .
13891	Read a link .
13892	Assert that path is local .
13893	Handle the contents of the contents of the contents .
13894	Return True if filename matches the given mask .
13895	Find all files in a directory .
13896	Expand a path to a file .
13897	Dump a directory to a string
13898	Generate a generator of random hashes .
13899	Push a value to an object .
13900	Convert a database string to a string .
13901	Get the database from a database .
13902	Checks if a database specification exists .
13903	Convert two values to a default value .
13904	Parse a hub key .
13905	Matches a part of a string .
13906	Apply defaults to commands .
13907	Create command line arguments .
13908	Create subparsers .
13909	Show the command .
13910	Creates a CheckPathAction .
13911	Create a new user
13912	Add properties for the extension .
13913	Unpack a message from a message .
