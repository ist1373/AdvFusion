0	Convert a string to a list of URLs
1	Download a dailymotion video .
2	Downloads a video .
3	Formats text with colors .
4	Print a log message .
5	Print a message .
6	Prints the given message .
7	Determine the operating system OS .
8	Download video by channel
9	Get information about a ckplayer .
10	Get video url from video_id
11	Get the real URL for a given URL .
12	Convert a string to a string .
13	Download a video .
14	Download the stream .
15	Download video by id
16	Match all patterns in text .
17	Parse a query parameter .
18	Get content from url .
19	Perform a POST request .
20	Parse hostname and port .
21	Get the room id for a room
22	Get the title of a topic .
23	Downloads a list of topics for a given course .
24	Download a page from a course topic topic .
25	Checks if the given task is running .
26	Get the event buffer .
27	Returns a connection to a Snowflake .
28	Get AWS credential credentials .
29	Returns the value of a field .
30	Copy the given SQL to a file .
31	Copy a table to a file .
32	Upload a file to Google Cloud Storage .
33	Get max partition .
34	Return a connection to the database .
35	Display the current state of a task .
36	Restarts the workers on the master .
37	Gets the client connection .
38	Translates the given values .
39	Get an instance of an instance .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the SQL proxy .
49	Stop the SQL proxy .
50	Get the version of the proxy .
51	Create a new connection .
52	Retrieve a connection .
53	Delete a connection .
54	Gets a proxy runner instance .
55	Get the database hook .
56	Clean up database hook .
57	Reserve a free port .
58	Normalize a job id .
59	Get error code .
60	Delete all DagRuns
61	Delete all task instances .
62	Set the state of the dag .
63	Print statistics about the task .
64	Heartbeat tasks .
65	Invoke lambda .
66	Create the evaluation ops for evaluation .
67	Create a directory .
68	Convert string to float
69	Make a naive datetime .
70	Make a naive datetime object .
71	Return a datetime object .
72	Get the connection to the druid broker
73	Return a connection to the server .
74	Perform a request .
75	Raises an exception if the response is raised .
76	Run the given request and check the response .
77	Create a new session .
78	Decorator to create a session .
79	Reset all tables .
80	Return a pretty formatted string representation of an exception .
81	Retrieves records from the database .
82	Get Pandas DataFrame
83	Run a SQL query .
84	Insert rows into table .
85	Get the connection to the MongoClient .
86	Check if a collection exists .
87	Create a new container .
88	Check if a database exists .
89	Create a new database .
90	Delete a database .
91	Delete a collection .
92	Insert documents into the database .
93	Delete a document .
94	Get a document by id .
95	Get a list of documents from the database .
96	Get a function by name .
97	Create a new function .
98	Update a function .
99	Upload a function to a zip file .
100	Delete a function .
101	Returns the status of all dependencies in the task .
102	Checks if the requirement is satisfied .
103	Returns a generator that yields all the failures of the task .
104	Parse S3 config file .
105	Get the credentials for the given region .
106	Return a connection to the database .
107	Flush the buffer .
108	Check if a file is a zip file .
109	Return a list of file paths .
110	Construct a TaskInstance instance .
111	Start the DagFileProcessorManager .
112	Terminate the manager .
113	Exit the process .
114	Start the dag process .
115	Start the worker .
116	Starts the worker .
117	Refresh the dag directory
118	Print statistics about the file .
119	Clear all import errors .
120	Log file processing .
121	Sets the list of file paths .
122	Wait until the process is finished .
123	Heartbeat the process .
124	Terminate the process .
125	Create a SSH client .
126	Create a transfer job .
127	Get a transfer job .
128	List all transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer job to be completed .
135	Find all tasks for a task instance .
136	Return the number of available slots .
137	Run a command .
138	Remove an option .
139	Get a section .
140	Allocate keys in the project .
141	Start a transaction .
142	Commit a project .
143	Lookup a list of keys .
144	Rollback a project .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll operation until operation is completed .
149	Export to a storage bucket .
150	Import data from a storage bucket .
151	Publish a message to a target
152	Get the hostname of the hostname
153	Get a LanguageServiceClient
154	Analyze a document .
155	An annotate text .
156	Simplify a document .
157	Get a list of template fields for a given name .
158	Renders a template field .
159	Disposes the database connection pool .
160	Prepare the classpath .
161	Check if task_id is ready .
162	Detect configuration variable .
163	Convert an object to a dictionary .
164	Generate chunks of items .
165	Reduce an iterable of iterable .
166	Chain two tasks .
167	Pretty print table .
168	Render a log file .
169	Returns a connection to the dataprocap .
170	Wait for a given operation .
171	Convert a string to a string .
172	Handles the run operation .
173	Runs a Pigopop .
174	Fetch the state of a celery task .
175	Calculate the number of tasks per send_send_process_count .
176	Calculate the number of tasks per fetch .
177	Set default value .
178	Returns a connection to the ML API .
179	Create a new job .
180	Get a job by id .
181	Wait for a job .
182	Create a new version .
183	Set default version
184	List all versions of a model .
185	Delete a version .
186	Create a new model .
187	Get a model .
188	Write batch data to DynamoDB .
189	Initiate the executors .
190	Get the default executor .
191	Get the executor for the given executor .
192	Handle a segment error .
193	Return a pymssql connection .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Get all available pools
198	Create a new pool
199	Delete a pool
200	Create a container group .
201	Get the status code of the current state .
202	Returns a list of all events for a given resource group .
203	Get a list of logs .
204	Delete a container .
205	Check if a container exists .
206	Apply the default operator to a function .
207	Construct the ingest query .
208	Checks if a message is available .
209	Find a dag run .
210	Return a list of TaskInstance instances .
211	Get task instance by id
212	Get the previous dag run .
213	Get the previous scheduled dag run .
214	Update the state of the task .
215	Verify that the task is valid .
216	Perform a jenkins request .
217	Convert a context to Airflow variables .
218	Trigger conditionally trigger
219	Send a metric .
220	Query a metric .
221	Get a dag by id
222	Kill zombie jobs .
223	Baggers a dag .
224	Collect dag files from a dag .
225	Return a summary of the dag bag .
226	Add days to date
227	Convert datetime to output format .
228	Checks if the file is a directory .
229	Checks if the contents of the file exists .
230	Clear task instances .
231	Return the next attempt number .
232	Generate command for execution .
233	Return the current state of this task .
234	Record the task instance .
235	Refresh TaskInstance
236	Removes all XCom data from the database .
237	Return the identifier of the task .
238	Determine if the task is done .
239	Returns the next retry date .
240	Determine if the request is ready to be ready .
241	Check if the pool is full
242	Gets the DagRun object .
243	Push a key to the task .
244	Perform a pull request .
245	Initialize the run context .
246	Close the file .
247	Returns a connection to the compute API .
248	Start an instance .
249	Set machine type .
250	Get a single instance template
251	Insert an instance template .
252	Get instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to be completed .
255	Check if a bucket exists .
256	Create a new bucket .
257	Check if a prefix exists in the bucket .
258	List all common prefixes .
259	List all keys in a bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Read a key .
263	Select a key from S3Object
264	Check if a wildcard key exists .
265	Get a key from a wildcard .
266	Upload a file to S3 .
267	Load a string .
268	Upload bytes to S3 .
269	Upload a file object to S3 .
270	Copy an object to a destination .
271	Execute a cassandra connection .
272	Convert a user type to a dictionary .
273	Send an email to the user .
274	Get the speech client .
275	Recognize speech .
276	Execute the query .
277	Loads airflow plugins .
278	Check if a plugin is valid .
279	Skip all tasks in a dag .
280	Creates a new AzureDL file .
281	Check if a file exists .
282	Upload a file to the remote server .
283	List all files in a directory .
284	Execute the query .
285	Uncompress a file .
286	Execute mssql .
287	Decorator for logging .
288	Build metrics for a function .
289	Create a cgroup .
290	Delete a cgroup .
291	Parse hostname .
292	Perform an API call .
293	Returns a connection to the server .
294	Perform a query .
295	Describe an object .
296	Return a list of available fields .
297	Get an object from the given fields .
298	Convert a column to a timestamp .
299	Write query results to a file .
300	Return a MongoClient instance .
301	Get a collection of a MongoDB collection .
302	Replace multiple documents .
303	Checks if a mail attachment has a given name .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get a list of attachments by name .
307	Get the file and payload .
308	Put records .
309	Get the status of the task .
310	Send email to email .
311	Send email to SMTP .
312	Process a result value .
313	Check if a blob exists .
314	Check if a container has a prefix .
315	Load a string from a string .
316	Read a file .
317	Delete a file .
318	Generate a list of MLSD objects .
319	Get FTP connection .
320	List all files in a directory .
321	Retrieve a file from the FTP server .
322	Stores a remote file .
323	Get the modification time of a file .
324	Execute the webhook .
325	Get FileService
326	Check if a directory exists .
327	Check if a file exists .
328	List all files in a share .
329	Create a directory .
330	Load a file .
331	Create a file from a string .
332	Load a file from a stream .
333	Get the storage connection .
334	Copy a source to another bucket .
335	Download a file .
336	Upload a file to the bucket .
337	Check if a file exists .
338	Checks if the given object is updated .
339	Delete a blob .
340	List all the objects in a bucket .
341	Get the size of a file .
342	Get the CRC32 CRC of the given object .
343	Get the MD5 hash of an object .
344	Create a new bucket .
345	Compose all objects in a bucket .
346	Determine if the secondary status is changed .
347	Generate the secondary status message .
348	Upload a file to S3 .
349	Configure S3 resources .
350	Check S3 URL .
351	Returns a connection to the log server .
352	Create a new training job .
353	Create a new hyperparameter job .
354	Create a transform job .
355	Create an endpoint .
356	Describe training job .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute a python file .
360	Run migrations .
361	Run migrations .
362	Delete an instance .
363	Create an instance of Instance .
364	Create a table .
365	Delete a table .
366	Update a cluster
367	Prepare CLI command .
368	Prepare the Hiveconf configuration .
369	Load data from a table .
370	Load a table from a file .
371	Get metastore client .
372	Check for a named partition .
373	Check if a table exists .
374	Return a connection to a Hive server .
375	Get the results of a query .
376	Write the results to a CSV file .
377	Get records from a HQL query .
378	Get Pandas DataFrame
379	Gets the client connection .
380	Gets the endpoint endpoint .
381	Send a Dingding webhook message .
382	Bind parameters to a string .
383	Escape a string .
384	Cast a string to a bq type .
385	Validate value .
386	Returns a BigQuery instance .
387	Get a new BigQuery instance .
388	Check if a table exists .
389	Create a new empty table .
390	Patch a table .
391	Cancel a job .
392	Delete a table .
393	Run a table update .
394	Grant access to a dataset .
395	Get a dataset .
396	Get a list of datasets
397	Insert rows into table .
398	Execute the given operation .
399	Execute a sequence of parameters .
400	Get the next row from the queue .
401	Query the PostgresHook .
402	Make sure that the remote directory exists .
403	Create a queue .
404	Send a message to the queue .
405	Runs the command .
406	Clean up the config file .
407	Main entry point .
408	Build HTML header
409	Build the container .
410	Build the json chart
411	Create a x3 axis .
412	Create a y - axis .
413	Return a connection to the database .
414	Decorator for logging .
415	Decorator to handle gzip requests .
416	Get the last dagrun of a dag .
417	Create a new DAGrun .
418	Send a message to the queue .
419	Return a json response .
420	Open a zip file .
421	Generate cache key .
422	Get VideoIntelligenceService
423	An annotate a video .
424	Get API key .
425	Creates a new http connection .
426	Execute the API .
427	Build the payload payload .
428	Execute a hook .
429	Gets the client connection .
430	Run a query .
431	Get the status of a query .
432	Poll query status .
433	Returns a connection to the remote server .
434	Handle a rate limit .
435	Perform a GET request .
436	Returns a set of partitions .
437	Get a table .
438	Get the location of a table .
439	Get cluster status
440	Delete a cluster .
441	Return a list of snapshots .
442	Restore a cluster snapshot .
443	Create a cluster snapshot .
444	Execute a Slack Hook .
445	Create a jobflow .
446	Filter files in a list of files .
447	Filter the results of ignored extensions .
448	Execute the query .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool
452	Convert Python dict to proto
453	Wait for a given operation .
454	Get a specific operation .
455	Append a label to the cluster .
456	Create a cluster .
457	Get a cluster by name .
458	Get the webhook endpoint .
459	Build the message payload .
460	Execute the webhook .
461	Encrypt a key .
462	Import a table .
463	Import a query .
464	Export a table .
465	Get TextToSpeechClient
466	Synthesize input data .
467	Close the file .
468	Gets the init container .
469	Get the environment variables .
470	Get worker secrets .
471	Get the security context .
472	Get the extra links for the task .
473	Heartbeat the job .
474	Launch the worker process .
475	Start the DagFileProcessor .
476	Determine if the process is done .
477	Exit gracefully exit .
478	Update import errors .
479	Process the task instances .
480	Change the state of tasks in a dag .
481	Get the concurrency map for the given states .
482	Change the state of the task instances .
483	Enqueue task instances .
484	Execute the execution of the task .
485	Sets the state of the task instance .
486	Process the event queue events .
487	Process a DAG file .
488	Update the counters for the task instance .
489	Manage the state of the executor .
490	Get a dag run .
491	Return a list of tasks for a dag run .
492	Execute all tasks in a dag .
493	Sets the unfinished dag_run of dag_run .
494	Run backfill task .
495	Callback for heartbeat .
496	Get a client .
497	Get an instance of an instance .
498	Apply a function to an instance .
499	Create a new instance .
500	Update an instance of an instance .
501	Delete an instance .
502	Get a database instance .
503	Create a new database .
504	Update a database .
505	Delete a database .
506	Checks if the given attachment is present .
507	Prepare additional parameters .
508	Get the connection .
509	Check if a table exists .
510	Check if a record exists .
511	Build the track status command .
512	Submit sparkflow .
513	Process Spark submit logs .
514	Process Spark driver status .
515	Get the task runner for the given task .
516	Waits until the job is completed .
517	Execute MySQL query .
518	Create a CSV file .
519	Write the schema to the file .
520	Return a dictionary of column types .
521	Convert mysql_type to string .
522	Execute SQoopHook .
523	Apply the given function to the backend .
524	Parse extra data
525	Return a list of dates .
526	Scale time units .
527	Return the number of days in seconds .
528	Initialize a role .
529	Delete a role
530	Get user roles .
531	Returns a set of all permissions for this user .
532	Check if the user has a role .
533	Check if a permission has a permission .
534	Clean up faulty permissions .
535	Merge permission view .
536	Update admin permissions .
537	Synchronize a dag view .
538	Create permissions for all DAGs .
539	Get the Fernet object .
540	Checks for a table .
541	Get the AwsGlueCatalog object .
542	Checks if the queue is alive .
543	Returns an instance of the connection .
544	Retrieves a connection from the webhook .
545	Check if a path exists
546	Upload a file to the given destination .
547	Get pinot connection
548	Get the URI of the connection .
549	Convert a field to a dictionary .
550	Convert a time to a dictionary .
551	Get redis object
552	Return a pandas DataFrame from the database .
553	Run a SQL statement .
554	Set autocommit .
555	Insert rows into table .
556	Serialize a cell .
557	Return the status of the job .
558	Get extra links .
559	Get a cloudant session .
560	Execute Slackhook .
561	Get the credentials for this hook .
562	Creates an authorized HTTP request .
563	Decorator for catching HTTP exceptions .
564	Decorator to set the default project id .
565	Return a list of unfinished states .
566	Prepare the command to be executed .
567	Convert PIL image to torch .
568	Normalize a tensor .
569	Resize an image .
570	Pad image with padding .
571	Crop an image .
572	Resized crop image
573	Flip an image .
574	Compute the perspective of the image .
575	Flip an image .
576	Creates a cropped image .
577	Adjust the brightness .
578	Adjust the contrast of the image .
579	Adjust the saturation factor .
580	Adjust the hue factor .
581	Adjust gamma of the image .
582	Rotate an image .
583	Apply affine transform to an image .
584	Convert an image to a grayscale .
585	Save a tensor to a file .
586	Find all classes in a directory .
587	Read an image file from a directory .
588	Reads labels from a file .
589	Reads and returns a torch tensor .
590	Compute the accuracy of a target .
591	Sets the print function to be executed .
592	Download a URL from a URL .
593	List all directories .
594	List files in a directory .
595	Download a file from Google Drive .
596	Generate random parameters
597	Generate a random set of parameters
598	Get the parameters for the image .
599	Get the params for a given color .
600	Generate a random params
601	Download the file and download it .
602	Download all images from the raw folder .
603	Download a zip file from the raw folder .
604	Get current theme name .
605	Run autocomplete .
606	Sets the settings for the page .
607	Returns a list of all the themes .
608	Return a list of search queries .
609	Get the response from the response .
610	Create a custom gradient .
611	Mvn nvn
612	Calculate the log probability of a school school .
613	Benchmark a school school school .
614	Expand docstring .
615	Return the name of a distribution .
616	Build a random variable .
617	Create a random variable .
618	Generate a random random variable .
619	Predictive a single step .
620	Calculate the forecast for the given time series .
621	Return the maximum value of x .
622	Assert that x is finite .
623	Assert that x is less than rank .
624	Compute the size of an event .
625	Evaluate all - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
626	Convert an identifier to a tensor function .
627	Compute the size of the mixture of two components .
628	Get the next interceptor .
629	Decorator to wrap a function .
630	Creates a tape for the tape .
631	Generate random logistic data for a given number .
632	Visualize a decision .
633	Build a batch of training batches .
634	Check that the map_values are valid .
635	Trace the state of a function .
636	Call a function with the given arguments .
637	Call the function and gradients .
638	Broadcast the given structure to the given structure .
639	Transform log_prob_prob_fn .
640	Perform leapfrog step .
641	Compute the metropolis step .
642	Compute the Hamiltonian of the Hamiltonian .
643	Adapts a set of inputs to a set of inputs .
644	Create a new layer from a given configuration .
645	Convert x to Tensor .
646	Create scale operator .
647	Generate a random walk function .
648	Generate a random walk function .
649	Expand a tensor to a tensor .
650	Compute the entropy of the distribution .
651	Calculate the cat probabilities for the model .
652	Validate the arguments .
653	Ensure that TensorFlow is installed .
654	Compute logistic regression .
655	Get the covertype of the coverage .
656	Computes the cholesky covariance of the given x axis .
657	Calculate the standard deviation of a variable .
658	Variance of variance
659	Ensure that the axis is positive .
660	Convert x to tensor .
661	Compute the standardization of x .
662	Returns the inverse of the given z .
663	Compute the semicolon transform matrix .
664	Creates a multilocalNormalizer for a given level .
665	Sample a random number of samples .
666	Generate random permutations .
667	Get the indices for the given sequence .
668	Returns the size of the number of bases .
669	Return a list of random primes .
670	Returns the epsilon for the given dtype .
671	Hager for hager .
672	Fix the step size .
673	Perform a search and search on the given value .
674	Searches for a line search .
675	Perform a line search .
676	Prepare the arguments for evaluation .
677	Convert values to a string .
678	r Compute the softmax normalization of a quadrature .
679	Compute the quadrature for a softmax normal distribution .
680	Check if a quadrature parameter is valid .
681	Determine the batch event shapes .
682	Interpolate the coordinates of a grid .
683	Compute the interpolation of a grid .
684	Calculate the linearOperator for a scalar operation .
685	Concatenate vectors .
686	Compute the log vector of vs .
687	Compute the log matrix for a vector .
688	Compute the sum of vs .
689	Extract the log probabilities from the distribution .
690	Compute the marginal hidden state of the model .
691	Calculate posterior marginal marginal marginal distribution .
692	Perform the posterior mode .
693	Choose random direction between two states .
694	Sample next step .
695	If fn_arg_arg_list_arg_list is None then return the result .
696	Helper function for padding .
697	Perform a single step .
698	Builds a model for training .
699	Builds the variance of a model .
700	Minimize in graph .
701	Compute the moments of the given time series .
702	Compute the initial value of a given time series .
703	Returns the broadcast shape of the distribution .
704	Creates a multivariate joint distribution .
705	Summarize multivariate distributions .
706	Compute empirical statistics .
707	Expand trailing dimensions .
708	Convert an observed time series of observed time series .
709	Compute the mixture of the mixture of the mixture .
710	Return the range of the range .
711	Generate a summary statistic for a given attribute .
712	Return a function that returns a function that wraps the given function .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Compute the KL divergence between two distributions .
716	Build the distribution .
717	Resolve the distribution of the distribution .
718	Compute the entropy of the distribution .
719	Check that the argument is in the distribution .
720	Create an image summary .
721	Simplified function .
722	Generate a latent analysis .
723	Summarize distribution parameters .
724	Summarize the mean of input inputs .
725	Compute the multivariate normalization .
726	Compute the initial state of the model .
727	Compute the LST model .
728	Perform convolution .
729	Generate the likelihood of the model .
730	Reconstructs a tensor .
731	Sample the static distribution .
732	Generate a random distribution .
733	Return the batch shape of the model .
734	Return the batch shape of the model .
735	Make a state space model .
736	Generate a prior sampling model .
737	Compute the min_event_ndims for each bin event .
738	Convert a vector to square matrix size .
739	Return a sorted array of values sorted by axis .
740	Sort a list of values .
741	Return a tensor tensor .
742	Compute the n - th - th - th - th - th .
743	Return a tensor tensor .
744	Logs a log of x .
745	Calculate the log of ndtrptotic series .
746	Compute the erfinv .
747	Compute the log of x .
748	Compute the log probability for a given count .
749	Benchmark text messages .
750	Determine if the marginal distribution is a multivariate marginal distribution .
751	Gets the marginal distribution distribution .
752	Return the index points for the given index .
753	Create an IFFF stack .
754	Perform a step .
755	Bootstrap training results .
756	Compute the outer square squared difference between two vectors .
757	Compute the value of the gradients of a function .
758	Prevent the second derivative of x .
759	Distributional transform function .
760	Split a covariance into a list of marginals .
761	Compute the decomposition of a model .
762	Compute the decomposition of a model .
763	Compose forecast by component .
764	Convert x to sparse tensor .
765	Decorator for operator operator .
766	Return a string representation of a tensor .
767	Return the shape of the sample .
768	Get the sample shape of the sample .
769	Returns the value of the distribution .
770	Evaluate the value .
771	Return the numpy tensor .
772	Calculates the normalization of the prior distribution .
773	Create a real nvp_default_template .
774	Returns the unit norm of a given dimension .
775	Calculate the log of the given x .
776	Compute the log normalization of the model .
777	Return the common dtype of args .
778	Make a summary of the statistics .
779	Broadcast tensor to target tensors .
780	Compute the probability of the peak
781	Compute the effective sample size .
782	Compute the effective sample size for the given states .
783	Compute the scale reduction for a single state .
784	Return the size of x .
785	broadcast a secondary argument to a list of states .
786	r Compute a quadratic Gaussian Gaussian model .
787	r Compute the quantiles for a given distribution .
788	Merge two maps .
789	Remove a field from the mapping .
790	Merge two values .
791	Recursively convert a dict into a tuple .
792	Generate the leftdoubling step .
793	Finds the best index of x .
794	Returns a slice of the bounds of the bounding box .
795	Generate a sample with shrinkage .
796	Generate a slice of samples for a single dimension .
797	Decorator to set the value for a model .
798	Create a logjoint function for the given model .
799	Get the input arguments for a function .
800	Block convolution layer .
801	Builds a tree from the current state .
802	Decorator to ensure that the value is None .
803	Determine if the state of the state of the state of two states .
804	Perform a leapfrog function .
805	Calculate the log - joint log .
806	Generate random distribution .
807	Returns a function that is used to generate the locator .
808	Returns a function for the mean field normalization function .
809	Creates a random normal distribution for the given shape .
810	Deserialize a function .
811	Serialize a function .
812	Convert a structure to a nested structure .
813	Convert nested struct to tensor .
814	Convert args to tensor .
815	Call fn with args .
816	Returns a dict with the attributes of the tensor .
817	Creates a mixture of mixture covariance .
818	Pack images .
819	Download a file .
820	Build the fake_input_fn function .
821	Validate block sizes .
822	Checks if the given tensors are equal .
823	Creates a multivariate normal distribution .
824	Bernoulli model .
825	Normalize a tensor .
826	Create a poisson distribution .
827	Compute the Euler algorithm for the given state .
828	Gets the drift drift part of the model .
829	Compute the log acceptance correction correction .
830	Helper function to call the given volatility function .
831	Given a state_parts and a state_parts of the state_parts of the state_parts .
832	Creates an AR transition matrix .
833	Compute the shape of the shape .
834	Perform a reshape operation .
835	Call the function on the given function .
836	Determine the Gaussian distribution for a given k .
837	Return a list of distributed distributions .
838	Calculates the distribution of a distribution .
839	Creates a lambda function for the LDA layer .
840	Generate a list of topics .
841	Creates a dataset from a dataset .
842	Builds a list of fake inputs .
843	Builds the inputs for the given dataset .
844	Minimize the gradients .
845	Add a set of ems to the model .
846	Save images to a file .
847	Visualize training data .
848	Loads the gold - indist dataset .
849	Convert dtype to numpy dtype .
850	Return the base dtype of dtype .
851	Return True if dtype is a boolean .
852	Return True if dtype is complex .
853	Returns the maximum value of dtype .
854	Return the name of the given dtype .
855	Returns the size of the given dtype .
856	Ensure that all items are equal .
857	Ensures that tensors are equal .
858	Minimize the objective function .
859	Compute the Nelder model for the given model .
860	Return a function that returns a function that returns a function that can be used by the objective function .
861	Returns a function that evaluates the given objective function .
862	A function that returns a function that evaluates the objective function .
863	Trink the solution to the best solution .
864	Replace the x with the given index .
865	Checks if the given solution is a constraint .
866	Prepare arguments .
867	Prepare the arguments for the initial simulation .
868	Prepare the arguments for a single vertex .
869	Evaluate the objective function .
870	Plot the weight of the weights .
871	Plot the predicted output of the predicted predictions .
872	Creates a dummy dataset .
873	Returns a dictionary representation of the configuration .
874	Deserialize the configuration .
875	Multiply a matrix .
876	Helper function for standard deviation .
877	Assigns the log_moving_exp_exp_exp_exp_exp_exp_exp_exp_exp_exp_exp_exp_exp_exp_expand_expand_exp_expand_expand_exp_exp_expand_expand_exp_exp_expand_exp_exp_exp_exp_exp_exp_exp_exp_exp_expand_expand_exp_Expression_exp_expand_Expression_Expression_exp_Expression_exp_exp_Expression_Expression_Expression_Expression_
878	Make a columnar to a column .
879	Generate random radememacher .
880	Returns a random rayleigh distribution .
881	Pick a scalar condition .
882	Finish the log_prob .
883	Calculate the probability for each event .
884	Takes a tensor and returns a tensor .
885	Undoizes the batch norm .
886	Validate BatchNormalization layer .
887	Slice a single parameter .
888	Convert a distribution to a dictionary .
889	Apply a single step .
890	Apply a slice of slices to the distribution .
891	Apply slices to the distribution .
892	Fit the model .
893	Returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns True .
894	Prepare the arguments .
895	Return the number of columns in x .
896	Decorator for static functions .
897	Copies a docstring to a function .
898	Returns the value of the constant .
899	Return the rank of the tensor .
900	Wrapper for case cases .
901	Generate a new scope .
902	Compute the mean of a mixture of mixture weights .
903	Make a tril scale .
904	Make a diagonal scale .
905	Compute shapes from the given scale and scale .
906	Check if the scale is a diagonal scale .
907	Check that the distribution is a scalar distribution .
908	Pad the mixture_dims .
909	Pick a scalar condition .
910	Move a dimension to the specified dimension .
911	Check if x is nonnegative integer .
912	Return True if two shapes are equal .
913	Get the value of a static constant .
914	Checks if the given dtype is known to unsigned bytes .
915	Checks if the given dtype is a known type .
916	Return the largest integer of the given dtype .
917	Return the smallest integer of the given dtype .
918	Checks if the given dtype is an integer type .
919	Ensure that a categorical event is valid .
920	Compute the log_combinations .
921	Rotate x .
922	Pick a random vector .
923	Returns a copy of the static broadcast shape .
924	Generate a new random seed .
925	Create a tridiag .
926	Returns the dimension size for the given axis .
927	Process the quadrature grid and probabilities .
928	Get the parent frame arguments .
929	Expand a tensor .
930	Return a copy of the given output tensor .
931	Validate that the rightmost dimension is valid .
932	Validate permutation .
933	Compute the event shape .
934	Concatenate two tensors .
935	Return the dimensions of x .
936	Merge two tensors .
937	Returns a new tensor with the given rank .
938	Checks that the given shape is equal to the given shape .
939	Calculate the shape of the sample .
940	Builds a backward step step .
941	Performs the backward smoothing update .
942	Build a kalman filter .
943	Perform linear gaussian update .
944	Perform a Kalman transition .
945	Builds a Kalman mean step .
946	Build a function that returns a covariance of the covariance .
947	Builds a Kalman sample step .
948	Propagate the mean of the mean .
949	Propagate covariance to covariance .
950	Compute the smoothing step .
951	Sample a random number of samples .
952	Calculates the marginal marginal marginal distribution of the model .
953	Calculate the mean of the model .
954	Compute the covariance of the covariance matrix .
955	Convert latent variables to observations .
956	Returns the log normalization of the event .
957	Compute the mode of the model .
958	Rotate the samples .
959	Generate a random sample .
960	Return a copy of a function .
961	Remove values from a dict .
962	Convert a dict to a pretty - printed dict .
963	Get the samples of the distribution .
964	Return True if x is a named tuple .
965	Choose the base case based on the input .
966	Return a type based on the accepted arguments .
967	Safe sum of x .
968	Compute the value and gradients .
969	Calls a function and returns the result of a function .
970	Creates a loop for a loop .
971	Perform a trace scan .
972	Decorator to wrap a setter .
973	Decorator for innermost results .
974	Enables the parameters in the kernel .
975	Replace the shape_shape_shape in the input_shape .
976	Replace the event shape in tensors .
977	Check if the shape is valid .
978	Return a boolean indicating whether the given input is converged .
979	Get initial state of initial state .
980	Perform a line search step .
981	Restrict the given value to the given position .
982	Update the current position .
983	Determine if the problem is convergence .
984	Convert value to target .
985	Compute the harmonic number .
986	Creates a function that returns a function that can be used by the distribution .
987	Get the field from the kernel results .
988	Compute the exchange states .
989	Return the variance of the variance term .
990	A function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function .
991	Returns a function that transforms the given bijector .
992	Return a function that returns the inverse transform function .
993	Performs a single step .
994	Perform a where condition .
995	Compute the secant2 .
996	Compute the second constraint between two arguments .
997	Internal function to apply a function to the inner function .
998	Compute the update function for the given value .
999	Perform a bracketing function .
1000	Compute the bisect .
1001	Compute the bisect .
1002	Check if two values are finite .
1003	Determine if the coefficient is satisfied .
1004	Compute the difference between two values .
1005	Create a new step size .
1006	Compute a single step of a model .
1007	Compute log_acceptance correction .
1008	Perform a step .
1009	Returns the kernel results .
1010	Create a Bayesian resnet .
1011	Create a resnet block .
1012	Creates an encoder for the given tensor .
1013	Creates a decoder for the given topics .
1014	Creates a Priorichlet .
1015	Generate a Markov chain .
1016	Create a deep exponent of the model .
1017	Creates a deterministic deterministic estimator .
1018	Train a Gaussian model .
1019	Loads a list of nips .
1020	Initialize parameters .
1021	Return the klfn for the given type .
1022	Reads an image from a file .
1023	Download the data from the data directory .
1024	Create a character from a skin .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a dataset .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels .
1031	Creates a random sample of images .
1032	Counts the number of integers .
1033	Find bins in x .
1034	Create a histogram with the given edges .
1035	Compute quantiles of x .
1036	Returns the ndims for the given tensor .
1037	Inserts the back dimension into a tensor .
1038	Creates a list of numeric indices for a given axis .
1039	Move dimensions to flat end .
1040	Sort tensor .
1041	Make a list of component state space models .
1042	Compute amari alpha .
1043	Translates a logu .
1044	Compute the jensenannon .
1045	Parses the logu .
1046	Compute the squared sharness of a given logu .
1047	Compute the triangular tensor .
1048	Compute the power of a logu .
1049	Calculate log1p .
1050	Compute the Jacobian of the given logu .
1051	Calculate the mean of the given logu .
1052	Compute the dual CSISzar function .
1053	Compute the symmetric csizar function .
1054	Calculate a montezar .
1055	Helper function to log a loguator .
1056	Ensure that ndims are valid .
1057	Applies a batch of indices to a batch .
1058	Broadcast the given event and params .
1059	Compute the expectation of the expectation .
1060	Broadcast an event to the given event .
1061	Compute the minimization function .
1062	Returns a list of inputs that should be applied to the initializer .
1063	Update the inverse Hessian .
1064	Calculate the inverse of the gradients .
1065	Multiplies a matrices .
1066	Compute the product of two tensors .
1067	Transpose a matrix .
1068	Pad a tensor to a tensor .
1069	Compute the sum of ndims .
1070	r Compute the square gradient of x .
1071	Returns the common dtype of the given arg_list .
1072	Compute the minimization function .
1073	Gets the initial state of the bfgsgs .
1074	Get search direction .
1075	Make an empty queue for an element .
1076	Push a queue to the queue .
1077	Return True if x is positive .
1078	Return true if x is larger than max_bounds .
1079	Generate a uniform correlation matrix .
1080	Compute correlation matrix for correlation matrix .
1081	Calculate the confidence interval between samples .
1082	Compute the total volume of the correlation matrix .
1083	Generate the VonMiseCDF series for the given concentration .
1084	Calculate the norm of the given concentration .
1085	Perform a single step .
1086	Minimize the objective function .
1087	Get initial arguments for the initial population .
1088	Find the best value in the population .
1089	Checks if the population of the population of the population .
1090	Generate a random population .
1091	Perform binary crossover .
1092	Get the mutation part of the population .
1093	Generate random mixing indices .
1094	Ensure that tensor is a list .
1095	Returns the value of the tensor .
1096	Compute soft threshold .
1097	Clips the given t .
1098	Build a batch of images .
1099	Plot generated images .
1100	Convert the given productions to a string .
1101	Compute the model .
1102	Compute the latent code .
1103	Compute thehat integral of x .
1104	Compute the inverse of the given x .
1105	Compute the rank of a matrix .
1106	Perform a pinv .
1107	Compute the LU solver .
1108	Compute the inverse of the LU matrix .
1109	Helper function to construct the assertion assertions .
1110	Computes the assertions for the lower case .
1111	Convert a sparse block to a sparse tensor .
1112	Validate a matrix .
1113	Calculate the gradients of a model .
1114	Fit a sparse model .
1115	Generate a slice of slices .
1116	Generate a mask .
1117	Create a masked layer .
1118	Creates a random input array .
1119	Create a list of degrees .
1120	Create masks for a list of degrees .
1121	Create a masked initializer for the given mask .
1122	Builds the model .
1123	Call autoregressive layer .
1124	Generate a random sample .
1125	Creates a new MVNDI .
1126	Return a function that takes a series of timeseries .
1127	Convert params to weights .
1128	Return the depth of the graph .
1129	Find the best order of the tree .
1130	Flatten a distribution rule .
1131	Build the distribution .
1132	Calculate the variance of the model .
1133	Calculate the optimal variance of the model .
1134	Builds a function that returns true if the given number of steps are the same .
1135	Builds and returns the residuals matrix .
1136	Build the transition matrix .
1137	Builds a seasonal transition .
1138	Builds a seasonal transition for a seasonal transition .
1139	Check if the observation data is empty .
1140	Validate observation data .
1141	Add a new scheduler .
1142	Set the value of a checkpoint .
1143	Set the gradient clip .
1144	Optimize the network .
1145	Set the train summary .
1146	Set the value of the value .
1147	Create a new optimizer .
1148	Set the training data for this dataset .
1149	Set summary trigger .
1150	Reads and returns a list of data sets .
1151	Get a list of texts from a source directory .
1152	Get a dictionary of w2v files
1153	Compile the BigDL .
1154	Fit the model .
1155	Evaluate the evaluation .
1156	Predict a dataset .
1157	Get mnist data .
1158	Preprocess training data .
1159	Get the end trigger .
1160	Set validation for validation .
1161	Returns the value of the property .
1162	Call a bigDL function .
1163	Call Java function .
1164	Convert RDD to Java object .
1165	Convert an object into a java object .
1166	Get an activation layer by name .
1167	Create a new instance from a numpy array .
1168	Get the label of the image .
1169	Create a DistributedImageFrame from a file .
1170	Write a file to disk .
1171	Get the image of the image .
1172	Return the image as an image .
1173	Get the label of this image .
1174	Get predictions for the image .
1175	Predict a dataset .
1176	Fit the model .
1177	Transform the image to a bigDL image .
1178	Save a keras model .
1179	Build Keras model .
1180	Predict the class distribution .
1181	Set the weights .
1182	Get the weight of the layer .
1183	Save the tensorflow to the given path .
1184	Run the evaluation .
1185	Load a torch layer .
1186	Load Keras model .
1187	Create a new criterion .
1188	Load weights from a json file .
1189	Loads the imdb dataset .
1190	Build Keras model .
1191	Get the input shape .
1192	Get the output shape .
1193	Get mnist data .
1194	Extract the data sets from a directory
1195	Get the bigDL classpath for the bigDL library .
1196	Determine if Spark is a Spark version .
1197	Export a checkpoint .
1198	Save a variable to a bigDL file .
1199	Expand a unit of units .
1200	Precompute future symbols .
1201	Performs simple attention on the given memory .
1202	Compute the attention for a given state .
1203	Computes the number of matches between two sequences .
1204	Get the log file .
1205	Log an utterance .
1206	Calculate summary of gradients .
1207	Dump the weights to a file .
1208	Read data from config file .
1209	Train an evaluation model .
1210	Interact the agent .
1211	Convert a list of labels to one .
1212	Convert probabilities to one - hot labels .
1213	Creates a new tf session .
1214	Load model .
1215	Get the momentum variable .
1216	Update graph variables .
1217	Calculate F1_mac_score .
1218	Process a word .
1219	Convenience function for stacking layers .
1220	Create a bi - neural network .
1221	RNN layer .
1222	Create a stacked highway layer .
1223	Generate embedding layer .
1224	Create a grunn grunn .
1225	Creates a cudnet compatible UUID .
1226	r Compute LSTM .
1227	Creates a cdNN layer .
1228	Convenience wrapper for CUDNN .
1229	Wrapper for cudl .
1230	Convenience function to create a CUNN layer .
1231	Drop out a dropout .
1232	Builds the network .
1233	Build word_cnn_cnn .
1234	Build basic network .
1235	Train a batch of data .
1236	Predict a batch of objects .
1237	Convert a list of sentences into an array .
1238	Make a list of tags .
1239	Calculate the bleu measure .
1240	Verify that the given URL is valid .
1241	Extract certificates from a string .
1242	Verify the certificate chain .
1243	Verify that the signature is valid .
1244	Verify the signature chain .
1245	Return a list of all control controls .
1246	Return a list of ms_framework_framework extensions .
1247	Return a list of telegram messages .
1248	Return a list of all the active control controls .
1249	Main entry point .
1250	Decorator to wrap a function .
1251	Decorator for decorator .
1252	Calculate the accuracy of a dataset .
1253	Round accuracy .
1254	Create pretrained initializer .
1255	Read data from a file .
1256	Make a hellobot agent .
1257	Convert x to 1 .
1258	Pretty print metrics .
1259	Populate the settings directory .
1260	Load the model .
1261	Save the model .
1262	Get training op .
1263	Search for a word .
1264	Make the default operation costs .
1265	Start the timer .
1266	Handle a request .
1267	Actual actor .
1268	Generate a response .
1269	Handle an intent .
1270	Handle launch .
1271	Handle unsupported messages .
1272	Pretty print the struct .
1273	Convert a list of losses to a float .
1274	Build a Chainer model .
1275	Interactive model .
1276	Predict data from a stream .
1277	Read a list of words from a file .
1278	Create a function from a string .
1279	Decorator to register a metric .
1280	Get a function by name .
1281	Return the decay type from a string .
1282	Returns the best best value for the given values .
1283	Encode a list of tokens .
1284	Read the requirements file .
1285	Calculate the log loss of the given data .
1286	Export the weights to a hub .
1287	Show details of item data .
1288	Create an Ecommerce agent .
1289	Run the bot framework .
1290	Download a file .
1291	Extract a tar file from a file .
1292	Download a file from a URL .
1293	Recursively updates the editable dictionary .
1294	Set the MD5 path of a URL .
1295	Set a query parameter .
1296	Alexa response .
1297	Return the JSON representation of this control .
1298	Creates a message for the bot .
1299	Return the JSON representation of this control .
1300	Return the rich framework for this message .
1301	Compute the F1 v1 .
1302	Calculates the recall for the given number of predictions .
1303	Check if the GPU is available .
1304	Parse a config property .
1305	Parse a config file .
1306	Expand the given path .
1307	Create a Component from a dictionary .
1308	Runs the request .
1309	Delete a conversation .
1310	Refresh valid certificates .
1311	Verify that the signature is valid .
1312	Handle a request .
1313	Create a class from a string .
1314	Registers a model class .
1315	Get a model by name .
1316	Get GLM registration path .
1317	Create a GLM model from a model .
1318	Create a H2OCluster object from a H2OCluster .
1319	Shutdown the H2O instance .
1320	Check if the server is running
1321	Show the status of the cluster .
1322	List all jobs
1323	List time zones .
1324	Fill the properties from h2custer .
1325	Get the metalearner parameters .
1326	Starts the test function .
1327	Retrieve a summary of a frame .
1328	Delete a Frame .
1329	Get model builders .
1330	Validate model parameters .
1331	Compute model metrics .
1332	Get model metrics .
1333	Delete a model .
1334	Return a pandas DataFrame
1335	Run all EC2 instances .
1336	Terminate the specified instances .
1337	Stop an instance of EC2 instances .
1338	Start an EC2 instance .
1339	Reboot the specified instances .
1340	Wait for SSH on the specified hosts .
1341	Get the full name of a function .
1342	Find a function from a frame .
1343	Return a string representation of a function .
1344	Wrap text into text .
1345	Join the job .
1346	Train the model .
1347	Fit the model .
1348	Return a dictionary of parameters .
1349	Handle signal handler .
1350	Removes the output directory .
1351	Remove rsandbox directory
1352	Get the port from the stdout .
1353	Scrape cloud size from stdout
1354	Stop the JVM .
1355	Stop all nodes .
1356	Get the IP address .
1357	Get the port of the node .
1358	Get the roc metrics for this model .
1359	Determine the vector size .
1360	Calculate the mean of the H2O .
1361	Calculate the mean of the H2O .
1362	Calculate the median error of the H2O .
1363	Calculate the variance of the predicted variance .
1364	Assert that variable is a type .
1365	Assert that a value matches a regular expression .
1366	Assert that the given condition is satisfied .
1367	Retrieves the assertion arguments .
1368	Check if a variable is a valid type .
1369	Return the name of a type .
1370	Generate lambda source code .
1371	Check if a variable is not valid .
1372	Check if a variable is a string .
1373	Get the configuration .
1374	Read config file .
1375	Return a generator that yields a list of log files .
1376	Execute the progress function .
1377	Store the progress of the model .
1378	Calculate model parameters .
1379	Calculate the completion time for the progress .
1380	Guess the next poll interval .
1381	Compute the progress of a given time .
1382	Calculate the time at the given progress .
1383	Draw the given text .
1384	Compute the width of the progress bar .
1385	Get terminal size .
1386	Set the file encoding .
1387	Fit the model to the target frame .
1388	Get a frame from H2O frame .
1389	Refresh the frame .
1390	Return the type of a column .
1391	Get columns by type
1392	Return the summary of the H2OFrame .
1393	Describe the frame .
1394	Return a new DataFrame .
1395	Multiply a matrix .
1396	Return a list of all levels in the H2OFrame .
1397	Return the number of levels .
1398	Set the level of this frame .
1399	Set domain levels .
1400	Rename columns .
1401	Set column names .
1402	Set the name of the frame .
1403	Returns true if the given item is in the given list .
1404	Returns a new H2Frame with the given number of folds .
1405	Return a column of the K2OFrame .
1406	Print the structure of the H2OFrame .
1407	Return a pandas dataframe .
1408	Removes a column from this frame .
1409	Compute the quantile .
1410	Concatenate multiple frames .
1411	Bind dataframe to the dataframe .
1412	Bind the dataframe to the dataframe .
1413	Splits a set of ratios into a single frame .
1414	Creates a GroupBy expression .
1415	Fill a H2OFrame with the given method .
1416	Implements the values of the columns in the table .
1417	Merge two columns .
1418	Return the value of this frame .
1419	Insert missing values .
1420	Return the variance of the variable .
1421	Corresponds to coroutine
1422	Compute the distance between two points .
1423	Return the result as a factor .
1424	Returns a new H2Frame with the given pattern .
1425	Count the number of rows matching the pattern .
1426	Returns a new H2Frame with the given index .
1427	Returns a new H2Frame .
1428	Compute the entropy of the H2OFrame .
1429	Return the number of substrings for the given path .
1430	Return a new H2OFrame .
1431	Calculate histogram .
1432	Compute the maximum number of words .
1433	Replace the content with the given pattern .
1434	Return the value of this H2OFrame .
1435	Return a new H2Frame expression .
1436	Return a copy of this H2Frame .
1437	Compute the difference between two frames .
1438	Return a copy of this H2Frame .
1439	Compute the minute of the minute .
1440	Run the H2O frame .
1441	Generate a random splitted split .
1442	Cut the data from the frame .
1443	Return the maximum value of this H2Frame .
1444	Apply a function to the H2Frame .
1445	Parse a text string .
1446	Parse a file .
1447	Move a row to the current position .
1448	Unparse the token .
1449	Get the size of the metric .
1450	Get the centers of the cells .
1451	Returns a list of the centers of the cluster .
1452	Connect to H2OConnection .
1453	Perform HTTP request .
1454	Check the version of H2O .
1455	Load a path from a path .
1456	Upload a file .
1457	Import data from a file .
1458	Import a Hive table .
1459	Import SQL table .
1460	Import SQL table .
1461	Parse a H2O frame .
1462	Creates a deep copy of the given data .
1463	Get the model for the given model .
1464	Get a grid by id
1465	Get a frame by ID .
1466	Download a POJO file .
1467	Download a CSV file .
1468	Download all H2O logs .
1469	Export a frame to a file .
1470	Convert data to a list .
1471	Show a demo function .
1472	Load a dataset from a file .
1473	Create a new model metrics .
1474	Put a file to a file
1475	Upload a custom metric .
1476	Check that the frame ID is valid .
1477	Returns a human readable string representation of the given size .
1478	Normalize a slice .
1479	Return True if the slice is normalized .
1480	Predict a pandas dataframe .
1481	Predict a CSV file .
1482	Decorator for deprecated decorator .
1483	Join the job .
1484	Return a dictionary of features for a given layer .
1485	Display the summary of the model .
1486	Show the grid search .
1487	Returns a list of hyperparameters for a model .
1488	Return a dictionary of hyperparameters .
1489	Get the grid for the grid .
1490	Calculate the F1 model
1491	Compute the importances of the model .
1492	Projects the predictions of the predicted data .
1493	Plot the screeplot .
1494	Translate a name into a string .
1495	Determines indentation of text .
1496	Extract the run from the log file .
1497	Extracts the log from the given arguments .
1498	Close the H2O session .
1499	Get the session ID .
1500	Start logging .
1501	Prepare data payload .
1502	Prepare file payload .
1503	Log a transaction .
1504	Log the end of a transaction .
1505	Log a message .
1506	Process the response .
1507	Print a message .
1508	Get the automl for a project .
1509	Download a POJO .
1510	Download a mojo .
1511	Fit the model .
1512	Transforms the model to the model .
1513	Invokes the inverse transform .
1514	Extracts a string from a string .
1515	Finds the node name of the node .
1516	Find the git hash branch for the given line .
1517	Find the build timeout .
1518	Find the build_failure_failure_failure
1519	Find the build_id from the build_id
1520	Extract the job build URL from the given URL .
1521	Grab all java messages from a file .
1522	Saves the dictionary to the output directory .
1523	Update the summary file .
1524	Write file content to file .
1525	Write a Java message to a text file .
1526	Loads all java messages from the pickle file .
1527	Normalize an enum constant .
1528	Find synonyms for a word .
1529	Poll the job .
1530	Writes the Assembly to the given path .
1531	Fit the assembly to the given frame .
1532	Perform a percentile on a sorted list .
1533	Return the default params .
1534	Get the actual parameters of the model .
1535	Determine the deep features of a dataset .
1536	Get the scoring history for this model .
1537	Show the model .
1538	Compute variable importances .
1539	r Return the residual degrees of the model .
1540	Return a dictionary of coefficients .
1541	Download a POJO file .
1542	Download a MOJO file .
1543	Save the model to disk .
1544	Raises an exception if there is a mismatch .
1545	Returns a list of cross validation models .
1546	%prog g2b
1547	%prog deeplearning
1548	%prog globs
1549	Wait for keypress .
1550	Return a DataFrame as a DataFrame .
1551	Display the table .
1552	Start a JVM .
1553	Find the J2o J2 server .
1554	Return a list of jar paths .
1555	Return a dictionary of hits for each hit .
1556	Create a DictWriter for a CSV file .
1557	Convert a URI to a path .
1558	Convert a path to a URI .
1559	Parse a list of functions .
1560	Generate documentation for a given URI .
1561	Determine a list of available modules .
1562	Write API docs to outdir .
1563	Write all modules in a directory .
1564	Return a list of cell values .
1565	Load the json file .
1566	Add new message to the list .
1567	Update the message dictionary .
1568	Extract message from a file .
1569	Saves the state of the JsonMessages .
1570	Print a dictionary of messages to a file .
1571	Parse arguments .
1572	Prints the command line .
1573	Find all files in a directory .
1574	Finds the magic text in a file .
1575	Main function for testing .
1576	Transform data into a H2OFrame .
1577	Summarize all failed tests
1578	Extracts PrintSaveIntermittens
1579	Plot the ROC Curve .
1580	Compute confusion matrix .
1581	Determine if the model is available .
1582	Removes all failed tests from the given month to the given month .
1583	Return a list of all endpoint groups .
1584	Update the site forward .
1585	Convert data to json .
1586	Comment a user .
1587	Get credentials for a user .
1588	Likes a user .
1589	Like you like you like you like you like you like you like you like you like you want you like you like you want you like you want you you want you want you you want you you you want you you you want you you want you you want you want you you want you you you you you you you you you you you you want you you you want you want you want you want you want you want you want you you want you you you want you you you you you want you want you want you you want you want you want to want you want you you want you want you want to want you you want you want to
1590	Checks if user is notbot .
1591	Read list of lines from a file .
1592	Sets the message for this message .
1593	Send a message to the queue .
1594	Downloads a VPC resource .
1595	Guess the service information from a path .
1596	Update a power shell .
1597	Deletes an application by ID .
1598	Create or update an application definition .
1599	Returns the URL for the request .
1600	Creates a new connection .
1601	Perform a request .
1602	Execute script actions .
1603	Checks if the frontdoor name is available .
1604	Purges a vault .
1605	Gets the authorization server .
1606	Validate the request URI .
1607	Loads the CLI profile .
1608	Get the credentials for the given resource .
1609	Resolve a query .
1610	Check the name of the name availability of the specified location .
1611	Open a HTTP request .
1612	Set the timeout .
1613	Sets a request header .
1614	Get all response headers .
1615	Send a request .
1616	Return the status of this request .
1617	Return the status of the request .
1618	Return the response body .
1619	Sets the client certificate .
1620	Perform a PUT request .
1621	Set a header value .
1622	Send request body .
1623	Return a Response object .
1624	Get the human readable id from the given name .
1625	Returns the serialization name for the given element .
1626	Verify a face to a person .
1627	Add a new job .
1628	Extract the properties from the given entry .
1629	Get the children of a node .
1630	Find namespaces from a child node .
1631	Convert XML string to namespace namespace .
1632	Converts an XML string into a ServiceBusRegion .
1633	Convert an XML string to a namespace availability response .
1634	Convert XML string to Metadata object .
1635	Replace the runbook .
1636	Gets a list of domain recommendations .
1637	Update a KbOperation .
1638	Gets the list of member groups .
1639	Build a package from a PR .
1640	Import data .
1641	Publish a runbook .
1642	Renew the session .
1643	Replace word alterations .
1644	Add a secret value .
1645	Get storage account properties .
1646	Gets the keys for a given service .
1647	Regenerate storage account keys .
1648	Create a storage account .
1649	Updates a storage account .
1650	Delete a storage account .
1651	Checks if the given service name is available .
1652	Get HostedService properties .
1653	Create a new hosted service .
1654	Delete a hosted service .
1655	Create a new deployment .
1656	Deletes a deployment .
1657	Swap a deployment .
1658	Change the deployment configuration .
1659	Updates a deployment status .
1660	Upgrade a deployment .
1661	Walk up a upgrade domain .
1662	Reboot a role instance .
1663	Delete role instances .
1664	Checks if the specified service name is available .
1665	Returns a list of certificates for a given service .
1666	Gets a certificate .
1667	Create a new service certificate .
1668	Delete a certificate .
1669	Get a subscription certificate .
1670	Add a new subscription certificate .
1671	Delete a certificate .
1672	Get affinity group properties .
1673	Create a new affinity group .
1674	Deletes an affinity group .
1675	List subscription operations .
1676	Create a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associate a reserved IP address .
1679	Disassociate a reserved IP address .
1680	Gets the reserved IP address .
1681	Gets a role .
1682	Create a virtual machine deployment .
1683	Create a new role .
1684	Update a role .
1685	Delete a role .
1686	Capture a role .
1687	Start a role .
1688	Start a role .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Add a DNS server .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Returns a list of resource extensions for a publisher .
1696	Represents a VM image .
1697	Unplicate a VM image .
1698	Share a VM image .
1699	Create a VM image .
1700	Delete a VM image .
1701	List VM images .
1702	Updates a VM image .
1703	Creates a new image .
1704	Updates an image .
1705	Updates an OS image .
1706	Delete an image .
1707	Gets a data virtual disk .
1708	Creates a new data virtual disk .
1709	Updates a data virtual disk .
1710	Deletes a data disk .
1711	Add a new disk .
1712	Update a disk .
1713	Delete a disk .
1714	Summarize a policy group .
1715	Build the receiver .
1716	Fetch the next batch .
1717	Renew the session .
1718	Create a virtual machine scaling operation .
1719	Convert a VMScaleSet to a single placement group .
1720	Display screen text .
1721	Create a new key .
1722	Import a key .
1723	Update a key .
1724	Sets a secret .
1725	Sets the certificate issuer .
1726	Parse a connection string .
1727	Get a subscription .
1728	Returns a list of subscriptions for a topic .
1729	Send messages to the sender .
1730	Get sender instance .
1731	Create a new Receiver instance .
1732	Create a deadletter receiver .
1733	Parse the response from the response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to be completed .
1737	Get operation status .
1738	Update the request header .
1739	Check if travis_tag is enabled .
1740	Gets a list of certificates .
1741	Returns a list of all regions for this service .
1742	List all namespaces .
1743	Get a namespace .
1744	Create a namespace .
1745	Delete a namespace .
1746	Check if a namespace is available .
1747	List topics .
1748	List all notification hubs .
1749	Returns a list of all the relays for a given name .
1750	Get metrics for a given queue .
1751	Get metrics for a given topic .
1752	Get metrics for a given metric .
1753	Get metrics for a given relay .
1754	Create a new environment .
1755	Creates a new env with pip installed packages .
1756	Create a new server .
1757	Reset server admin password .
1758	List all the quota quotas .
1759	Gets the events for a given server .
1760	Create a firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	List all firewall rules .
1764	Gets a list of service level objects .
1765	Create a new database .
1766	Updates a database .
1767	Delete a database .
1768	List all databases .
1769	Gets the list of agreements .
1770	Close the message handler .
1771	Close the receiver .
1772	Get session state .
1773	Set session state .
1774	Receive deferred messages .
1775	Merge an existing reservation .
1776	Validate a bearer challenge .
1777	Purges a table .
1778	Return an error handler .
1779	Create a queue .
1780	Deletes a queue .
1781	Get a queue .
1782	Create a new topic .
1783	Get a topic .
1784	Create a new rule .
1785	Get a specific rule .
1786	Lists all rules in a topic .
1787	Create a subscription .
1788	Get a subscription .
1789	List subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlock a subscription message .
1792	Sends a message to a queue .
1793	Unlock a queue .
1794	Receive a queue message .
1795	Receive a subscription message .
1796	Create an event hub .
1797	Update an event hub .
1798	Gets an event hub .
1799	Send an event .
1800	Update service bus headers .
1801	Get authorization string .
1802	Check if a token is expired .
1803	Gets a token from the service .
1804	Update request URI and query parameters .
1805	Reset a service principal profile .
1806	Deletes a message .
1807	Unlock the queue .
1808	Renew lock .
1809	Add custom headers to the request .
1810	Return the batch body as a batch .
1811	Get cluster health information .
1812	Get cluster health policy .
1813	Unprovision application type .
1814	Gets a list of task IDs .
1815	Submit a property batch .
1816	Raises an exception if an error occurred .
1817	Start a web site trace operation .
1818	Gets the list of slot differences between two slots .
1819	Swap slot .
1820	Get information about a specific event .
1821	Add a face from a stream .
1822	Handle redirect .
1823	Create and start a new migration .
1824	Publish events .
1825	Move a resource group .
1826	Set the profile .
1827	Gets the query results for a management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a topic .
1831	Delete a topic .
1832	Create a subscription .
1833	Create a new instance from a connection string .
1834	Get the properties of the queue .
1835	Check if the lock is expired .
1836	Create a new session .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Return a list of results .
1840	Add a batch of tasks to the batch .
1841	Process the task collection .
1842	Build the configuration from the configuration .
1843	Reset password .
1844	Start an environment .
1845	Create a message from the response .
1846	Convert an etree element to a Rule object .
1847	Convert an ETree element to a Queue .
1848	Convert an ETree element to a Topic object .
1849	Convert an ETree element into a Subscription object .
1850	Create a new certificate .
1851	Deletes a certificate .
1852	Get a client from the CLI profile .
1853	Get a client from a json dictionary .
1854	Get a client from the auth file .
1855	Parse a list of response results .
1856	Extract the properties from an element .
1857	Deletes a certificate .
1858	Returns a QueueClient instance .
1859	List all queues .
1860	Get a topic .
1861	List all topics .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Get a single site .
1865	Create a new site .
1866	Delete a website .
1867	Update a website .
1868	Restart a site .
1869	Get historical usage metrics .
1870	Gets the metrics definitions for a given website .
1871	Get the publish profile XML .
1872	Get publish profile .
1873	Updates the policies .
1874	Create a cloud service .
1875	Check if a job collection is available .
1876	Gets a single job collection .
1877	Complete a restore operation .
1878	Cancels scheduled messages .
1879	Send pending messages .
1880	Reconnect to the sender .
1881	Get the certificate from the publish settings file .
1882	Load cached cookies .
1883	Return the width of a terminal .
1884	Return the cut prefix of the given value .
1885	Print a message in the terminal .
1886	Format the size of a file .
1887	Format elapsed time .
1888	Create a status line .
1889	Generate progress bar .
1890	Generate segment numbers .
1891	Return a list of segments .
1892	Wait until the event is reached .
1893	Put a segment into the queue .
1894	Add a value to the queue .
1895	Parse pvsw request parameters .
1896	Extracts the nonce from the request .
1897	Find vpid from url
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse query string .
1901	Search for keys in a dictionary .
1902	Spawn a new process .
1903	Iterate over HTML tags .
1904	Parse a manifest file .
1905	Determine the JSON encoding of a sample .
1906	Parse JSON response .
1907	Parse XML response .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query params .
1911	Get the message .
1912	Make a log record .
1913	Login to LiveEdu .
1914	Load a support plugin .
1915	Updates a QSD query .
1916	Iterate over all the tags .
1917	Return a set of required dependencies .
1918	Check file output .
1919	Creates an output stream .
1920	Create a http server .
1921	Iterate over HTTP requests .
1922	Run the http server .
1923	Starts the output stream .
1924	Open a stream .
1925	Open a stream .
1926	Read data from a stream .
1927	Handle the given stream .
1928	Fetch a list of streams .
1929	Fetches all streams for a given plugin .
1930	Resolve a stream name .
1931	Format a list of streams .
1932	Handle the given URL .
1933	Print all available plugins .
1934	Authenticate the streamlink .
1935	Load plugins from a directory .
1936	Setup command line arguments .
1937	Setup the console .
1938	Setup HTTP session .
1939	Setup plugin plugins .
1940	Setup the streamlink options .
1941	Log current version .
1942	Get the stream ID of the image .
1943	Get the video from the given text .
1944	Sets the given option .
1945	Get an option by key
1946	Set a plugin option .
1947	Get the value of a plugin .
1948	Resolve a URL .
1949	Load plugins from a path .
1950	Convert the given value to an integer .
1951	Check if a string starts with a string .
1952	Check if a string is a valid string .
1953	Check if a string contains a string .
1954	Get the value of an attribute .
1955	Apply a function to a function .
1956	Transform a function into a dictionary .
1957	Validate a URL .
1958	Transform an element to an element .
1959	Find all elements of an element .
1960	Find the url for the player .
1961	Load a M3 UUID from the given data .
1962	Returns the supported player for the given command .
1963	Logs a user .
1964	Extracts the stream id from HTML .
1965	Extracts the stream_info from HTML .
1966	Login to login .
1967	Add a function to the map .
1968	Perform API call .
1969	Start a new session .
1970	Get information about a media .
1971	Create a Crunchyroll API .
1972	Compress a string .
1973	Return a string representation of a character .
1974	Return a string representation of a string .
1975	Read bytes from the stream .
1976	Return the value of this code .
1977	Return explanation .
1978	Sets the decoder for decoding .
1979	Set the length of the sequence .
1980	Show the code of the code .
1981	Read a tuple from a stream .
1982	Return the explanation for the given index .
1983	Returns the value at the given index .
1984	Return the span of the given index .
1985	Returns the value for the given index .
1986	Return the mnemonic for the given index .
1987	Return the name of the given index .
1988	Compiles the actions table .
1989	Evaluate action
1990	Generate a hex string for the given position .
1991	Process the stream .
1992	Read metablock length .
1993	Check if the stream is uncompressed
1994	Read block type .
1995	Convert a list of values to an IMF .
1996	Reads a list of prefixes .
1997	Convert a color to a monochrome color .
1998	Calculate the polychrome of the given color .
1999	Create an Arrow Table from a DataFrame .
2000	Patch the given f .
2001	Add virtual coordinates to the model .
2002	Add virtual motion columns to the model .
2003	Generate graph viz graph .
2004	Calculate the number of values in the dataset .
2005	Maps the expression to the given mapping .
2006	Creates a new application .
2007	Open multiple files .
2008	Convert a SAMP message to a dictionary .
2009	Create a Dataset from an astropy table .
2010	Create a DataFrame .
2011	Create a new instance from a scalar .
2012	Create a DataFrame from a pandas DataFrame .
2013	Create a DataFrame from a CSV file .
2014	Create a server instance .
2015	Generate a Zeldovich .
2016	Concatenate dfs .
2017	Create a column virtual range .
2018	Open a dataset .
2019	Evaluate a dataset .
2020	Decorator for a function .
2021	Return a set of columns depending on the selection .
2022	Run a task .
2023	Sorts the sorted list of pairs .
2024	Get information about a file .
2025	Clear the canvas .
2026	Wait for the last plot .
2027	Open a document .
2028	Write file to file .
2029	Split arrays into arrays .
2030	Perform nop operation .
2031	Compute the first occurrence of an expression .
2032	Calculates the mean of an expression .
2033	Calculates the sum of the expressions .
2034	Return the standard deviation of the given expression .
2035	Calculate the covariance of the distribution .
2036	Calculates the minimum value for a given expression .
2037	Returns the minimum value of the given expression .
2038	Compute the median of the expression .
2039	Creates a plot of the plot .
2040	Calculate the number of healpix results .
2041	Plot a healpix plot .
2042	Plot a 3D 3D plot .
2043	Return the dtype of the given expression .
2044	Returns the path to the private directory .
2045	Get the state of the state .
2046	Set the state of the table .
2047	Removes virtual meta meta files .
2048	Write the virtual meta data to a file .
2049	Write the meta data to the metadata file .
2050	Return a list of subspaces for the given dimensions .
2051	Set a variable .
2052	Evaluates a variable .
2053	Evaluate a selection mask .
2054	Return a dictionary representation of this object .
2055	Return a copy of this DataFrame .
2056	Return a pandas DataFrame .
2057	Convert the DataFrame to an Arrow Table .
2058	Create an astropy table .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add a vector to the vector
2062	Add a vector to the spherical coordinates .
2063	Add a vector to the physical grid .
2064	Add virtual columns to cartesian coordinates .
2065	Add virtual columns to the matrix .
2066	Add virtual columns to cartesian coordinates .
2067	Add a virtual column to the grid .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable to the table .
2071	Delete a variable .
2072	Return the tail of the list .
2073	Print the head and tail of the table .
2074	Determine the statistics of the dataset .
2075	Concatenate two lists
2076	Sets the current row .
2077	Return a list of column names .
2078	Trim the DataFrame .
2079	Return a copy of this DataFrame .
2080	Extracts the data from this object .
2081	Return a random number of samples .
2082	Splits an array with the given fraction .
2083	Splits the data into an iterable .
2084	Sort the values in the indices .
2085	Compute a virtual column .
2086	Undo the selection .
2087	Renders a selection .
2088	Return True if the selection should beredo .
2089	Select a boolean expression .
2090	Select a non - missing column .
2091	Return a copy of this DataFrame .
2092	Select a rectangle .
2093	Selects a box within a box .
2094	Selects a circle from a rectangle .
2095	Select an ellipse ellipse .
2096	Selects a selection .
2097	Select a selection from the current selection .
2098	Set the current selection .
2099	Create a new selection .
2100	Find a valid name .
2101	Return a list of root nodes .
2102	Generate a graph of dataframe .
2103	Categorize a column .
2104	Convert a column to an integer .
2105	Return the data as a Dataset .
2106	Return the length of the array .
2107	Add a new dataframe to another .
2108	Concatenate two DataFrames .
2109	Export the data to a file .
2110	Add a column to the DataFrame .
2111	Patch a DataFrame .
2112	Register a function .
2113	Fill an array with values .
2114	Calculate the dayofweek of x .
2115	Calculate the dayof year of x .
2116	Return True if x is a leap year .
2117	Return the year of the given x .
2118	Calculate the month of x .
2119	Return the month name .
2120	Calculate the day of x .
2121	Return the day name of the day .
2122	Calculate the dayofyear field of x .
2123	Calculate the time of the day .
2124	Calculate the minute of the day .
2125	Calculate the seconds of the second day .
2126	Capitalize a string .
2127	Concatenate two strings .
2128	Return True if x contains a string .
2129	Returns the number of strings in x .
2130	Finds a substring in x .
2131	Return a column at the specified index .
2132	Return the index of a substring .
2133	Return a column as a string .
2134	Return a copy of a string .
2135	Pad a string to a string .
2136	Return a column of a string .
2137	Find the first occurrence of a substring .
2138	Return the index of a substring .
2139	Return a new column as a string .
2140	Return a copy of a string .
2141	Return a slice of strings .
2142	Strip a string .
2143	Return a column as a string .
2144	Convert x to a column .
2145	Get the autotype of an array .
2146	Return a copy of this object .
2147	Write properties to file .
2148	Write a comment .
2149	Write a property .
2150	Iterate over properties .
2151	Yields lines from a file .
2152	Show all installed versions .
2153	Renames a keyword argument .
2154	Set the fftlib library .
2155	%prog beat_file
2156	Adjusts the pitch correction of a file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time to frames .
2160	Convert a MIDI to a string .
2161	Convert a frequency frequency to a melogram .
2162	Calculate the frequency of a melogram .
2163	Calculate fft frequencies .
2164	Calculate the frequency frequency for a given frequency .
2165	Calculates the melz frequencies for a given frequency .
2166	Calculate the weighting of frequencies .
2167	Return a time - like time - like time - like time .
2168	Return a list of samples for a given frame .
2169	r Compute a cqt frequency .
2170	Calculate the pseudo - Fourier coefficient .
2171	Calculate an icqt frequency .
2172	Calculate the Fourier filter for a given frequency .
2173	Trim the cqt response .
2174	Calculate the response of the response .
2175	Calculate the number of downsample count .
2176	Calculate the amplitude of a signal .
2177	Calculate the cost of the gradu cost .
2178	Determines the backtracking backtracking step .
2179	Compute viterbi .
2180	r Compute the Viteration of the given probability matrix .
2181	Return a random transition matrix .
2182	Generate transition loop .
2183	Calculate transition cycle .
2184	Compute the transition matrix .
2185	Calculate the onset of the onset .
2186	Calculate the onset strength of an onset .
2187	Calculate the onset of an event .
2188	Calculate the onset strength of a set of samples .
2189	Write a CSV file to a CSV file .
2190	Write audio data to a file .
2191	Convert data to a cmap .
2192	Plot a waveplot .
2193	Set the current image
2194	Return the coordinates of the axes .
2195	Ensure that the axes is valid .
2196	Scale axes .
2197	Calculate the frequency frequency for a given frequency .
2198	Calculate the center of a band .
2199	Calculate the cqt frequency for a given number .
2200	Calculate the coordinates of a chromosome .
2201	Convert numpy coordinates to time .
2202	Estimate the tuning of the pitch .
2203	Piprack a spectrogram .
2204	Calculate the phase of a dataset .
2205	Compute the harmonic harmonic of the given YFT .
2206	Perform percussive .
2207	Perform a time stretch .
2208	Calculate the pitch shift of the pitch .
2209	Rearches the audio .
2210	Return True if the signal is non - zero .
2211	Trims a signal .
2212	Splits a signal into a list of samples .
2213	Calculate phase for a phase .
2214	r Calculates the amplitude of a signal .
2215	Compute the spectrogram .
2216	%prog beats
2217	Compute the decomposition of a matrix .
2218	r Compute the n - dimensional correlation matrix .
2219	Perform a filter on a set of targets .
2220	Calculate the weights for a given frequency .
2221	Calculate chroma for a given frequency
2222	Convert a window to a float .
2223	r Calculates the constant frequency for a given frequency .
2224	Calculate the frequency length of the frequency .
2225	Convert cq to chroma .
2226	Returns the window width of a window .
2227	Convert a window to a signal .
2228	Generate a filter .
2229	Calculates the frequency frequencies for a given tuning .
2230	Fill window_sq_sq_sq .
2231	Calculate the squares of a window .
2232	Determines the diagonal of a window .
2233	Calculate the spectral centroid centroid of a spectrogram .
2234	Calculates a spectral roll off off of a signal .
2235	Calculate the density of a spectrum .
2236	Compute the features of a spectrogram .
2237	Calculate the cross cross - cross - cross - cross - cross - cross - cross - cross - cross - cross - cross - cross - cross - cross - crossing - cross - cross - cross - cross - cross - cross - cross - cross - cross - cross - crossing - cross - cross - cross - cross - cross - cross - cross - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
2238	Calculate the chroma for a spectrogram .
2239	Calculate the chroma for a cq .
2240	Calculate the melspectrogram .
2241	Computes the jaccard of two integers .
2242	Match intervals between two intervals .
2243	Match two intervals .
2244	Match two intervals .
2245	Match two events .
2246	Calculate salience for salience .
2247	Compute the interpolation of the input frequency .
2248	Calculate the harmonic frequency of a frequency .
2249	Calculates the harmonic harmonics between two frequencies .
2250	Load samples from a file .
2251	Load audio data .
2252	Convert y to mono .
2253	Resample a signal to a signal .
2254	r Compute the autocorrelation of the input vector .
2255	Calculates the LPC of a given y .
2256	Simplified function .
2257	Calculate a tone .
2258	Calculate chirp .
2259	Returns a set of files in the given directory .
2260	Stretch the audio .
2261	Parse command line arguments .
2262	%prog hss
2263	Track the beat track .
2264	Calculate a track tracker for a given onset .
2265	Calculate the local score for a given period .
2266	Calculate the backlink track for a given period .
2267	Return the last beat .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert lag matrix to recurrence .
2270	Decorator to filter a function .
2271	Return a slice of the segments of the given frames .
2272	Agglomerative clustering .
2273	Calculate the path of a path .
2274	Detects the onset of a file .
2275	Create a frame from the input buffer .
2276	Validate audio data .
2277	Validate x .
2278	Fix the length of the data .
2279	Sort an array by axis .
2280	Normalize a S .
2281	Return True if x is True .
2282	Calculate the peak picker .
2283	Parse a sparse matrix .
2284	Roll a sparse matrix .
2285	Convert x to float .
2286	Convert an index to a slice .
2287	Synchronously synchronizes data from data .
2288	Compute softmask .
2289	Return the smallest value of x .
2290	Write frames to a video file .
2291	Reads the image .
2292	Get a frame from the buffer .
2293	Convert the image to a file .
2294	Track progress of tasks .
2295	Track parallel progress .
2296	Flip an image .
2297	Rotate an image .
2298	Clones a bboxes .
2299	Scale bboxes by scale
2300	Crop a bbox image .
2301	Implementation of pad .
2302	Convert an image to a multi - dimension .
2303	Returns the size of the given size .
2304	Resize an image .
2305	Resize image to dst
2306	Rescale an image .
2307	Register a file handler .
2308	Returns the priority of the given priority .
2309	Decide an array of values in a given array .
2310	Show an image .
2311	Show bboxes .
2312	Read a flow file .
2313	Write a flow to a file .
2314	Determine the flow of a flow .
2315	Load a state dictionary from a state dictionary .
2316	Load a checkpoint from a model .
2317	Convert a dictionary of weights to cpu .
2318	Save model to disk .
2319	Initialize optimizer .
2320	Initialize the logger .
2321	Returns the current LRU .
2322	Register a hook .
2323	Run the given workflow .
2324	Register training hooks .
2325	Convert a video to a file .
2326	Resize video .
2327	Cut a video .
2328	Concatenate video list .
2329	List items from a file .
2330	Read a dictionary from a file .
2331	Convert a 3D image into a convolution .
2332	Create an object from a dict .
2333	Read an image .
2334	Decode an image into an image .
2335	Write an image to a file .
2336	Convert a BGR color to a gray image .
2337	Convert RGB image to BGR color .
2338	Convert an iterable to an iterable .
2339	Check if the given sequence is a sequence of elements .
2340	Slice a list of indices .
2341	Ensure that the given function is valid .
2342	Calculates the average of the history .
2343	Convert input input to a batch .
2344	Convert a color to a tuple .
2345	Check the time of a timer .
2346	Start the thread .
2347	Returns the duration of this timer .
2348	Return the duration of the last time .
2349	Show a flow
2350	Convert a flow to RGB .
2351	Creates a color wheel .
2352	Compute the accuracy of a target .
2353	Convert inputs to target_gpus .
2354	Convert input inputs into a tuple .
2355	Fetch the response .
2356	Returns a JSON representation of the response .
2357	Retrieve the contents of this object .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Create a request .
2361	Start master workers .
2362	Normalize a task .
2363	Parse yaml file .
2364	Return the wheel name .
2365	Returns the name of the archive .
2366	Add additional requirements to the metadata file .
2367	Convert egginfo to distinfo
2368	Create a message .
2369	Suggests a list of actions .
2370	Add an attachment .
2371	Create a list of attachments .
2372	Creates an attachment .
2373	Create a trace .
2374	Sets the telemetry client .
2375	Reads data from the database .
2376	Write changes to the store .
2377	Deletes all items from the collection .
2378	Create a store item .
2379	Create a dictionary from a store item .
2380	Sanitize key .
2381	Create the database and container .
2382	Get a database or create a database .
2383	Retrieve a container from the database .
2384	Fill qnata event .
2385	Return a conversation reference .
2386	Returns the name of the step .
2387	Checks if the given channel is supported .
2388	Checks if a channel is supported .
2389	Get channel id .
2390	Checks if the token is a valid token .
2391	Creates an attachment .
2392	Returns the list of parameters .
2393	Return a copy of this instance .
2394	Return the inverse of this gate .
2395	Set the control value .
2396	Return a copy of this object .
2397	Convert a string to a string .
2398	Generate Qasmif .
2399	Run a circuit .
2400	Run a pass on the given dag .
2401	Return a list of all the passes .
2402	Return a dictionary of all the passes .
2403	Create a new FlowController .
2404	Create a new UBase object .
2405	Parse single gate parameters .
2406	Compute a single gate matrix .
2407	Compute the einsum index for the given gates .
2408	Compute the einsumul index for the given gates .
2409	Compute the gatesum for the given gate indices .
2410	Convert a circuit into a DAG circuit .
2411	Calculate the exponential fit for a given x .
2412	Calculate the fit_fit function .
2413	Plot coherence .
2414	Return the shape of the rb data .
2415	Plot the RDF data .
2416	Split a list of runs into a list of gates .
2417	Compute the inverse of the uz3 .
2418	Convert yz to y z zy zy zeros .
2419	Validate input state .
2420	Trim the image .
2421	Get the span span of the given instruction .
2422	Convert a circuit to an Instruction .
2423	Runs the given dag .
2424	Return the best subset of the nodes in the graph .
2425	Add qubits to the circuit .
2426	Calculate the average of the observed data .
2427	Process a bit id .
2428	Process a custom node .
2429	Process a node .
2430	Process a CDT node .
2431	Process a measure .
2432	Process a condition .
2433	Create a DAG op .
2434	Return the duration of the given channels .
2435	Get the start time of a channel .
2436	Get the stop time of a channel .
2437	Return an iterable of instructions in this scheduler .
2438	Check if the value is a valid type .
2439	Adds additional data to the original data .
2440	Load additional data from the original data .
2441	Create validation schema .
2442	Validate an instance .
2443	Decorator to validate the model .
2444	Convert the model to a dict .
2445	Create a model from a dict .
2446	r Compute the quaternion of the Hilbert curve .
2447	Compute the partial trace vector .
2448	Convert a density matrix to a matrix .
2449	Deserialize a matrix .
2450	Convert a choi matrix into a matrix .
2451	Clip an array .
2452	Compute the outer of two vectors .
2453	Compute the concurrence of the given state .
2454	Compute the Shannon entropy of pvec .
2455	Compute the entropy of the given state .
2456	Calculate the mutual information of a state .
2457	Evaluate the entropy of a state .
2458	Compute the eof qubit entropy .
2459	Flatten a schedule .
2460	Shift a schedule .
2461	Create a new ScheduleComponent .
2462	Append a child to a schedule .
2463	Create a new U3 gate .
2464	Return the backend status .
2465	Starts the iteration .
2466	Return the time of the current iteration .
2467	Disassemble an experiment .
2468	Computes the hamming distance between two strings .
2469	Create a quaternion from an axis .
2470	Create a quaternion from an Euler .
2471	Normalize the quaternion .
2472	Convert the vector to a matrix .
2473	Convert the vector to zeros .
2474	Convert data to a dictionary .
2475	Plot histogram .
2476	Checks the value of an InstructionParameter .
2477	Check that the given index is valid .
2478	Check if matrix is a square matrix .
2479	Check if matrix is a diagonal matrix .
2480	Check if a matrix is symmetric .
2481	Checks if a matrix is a Hessian matrix .
2482	Checks if a matrix is positive .
2483	Check if a matrix is an identity matrix .
2484	Checks if a matrix is a matrix .
2485	Convert the input to a choi channel .
2486	Convert data to superopop .
2487	Convert data to kraus .
2488	Convert the input data to a chi .
2489	Convert data to a PTM .
2490	Convert data to Stinespring .
2491	Convert data to operator .
2492	Convert an operator to a PUT operator .
2493	Convert the input data to an operator .
2494	Convert the input data to a choi .
2495	Convert data to superopop .
2496	Convert the kraus matrix to a choi .
2497	Convert data to kraus .
2498	Convert straespring to kraus .
2499	Convert the stoi waveform to a single choice .
2500	Convert a set of kraus components to stra .
2501	Convert the kraus matrix to superop .
2502	Convert the input data to a choi .
2503	Convert the input data to a Pauli .
2504	Rearvel matrix .
2505	Transform a Pauli matrix into a matrix .
2506	Checks if the input dimension is n qubit .
2507	Hide ticks and labels .
2508	Set the label of the label .
2509	Clear all points .
2510	Add vectors .
2511	Add an annotation .
2512	Render the axes .
2513	Plot the frontframe .
2514	Show the plot .
2515	Calculate two qubit tensor .
2516	Return the top level of this layer .
2517	Return the full string representation of this layer .
2518	Return a string representation of the bot .
2519	Return the length of this list .
2520	Return a list of parameters for a label .
2521	Return the label for a box .
2522	Return the latex expression as latex .
2523	Compile a circuit .
2524	Filter warnings .
2525	Return information about local hardware .
2526	Check if the given hostname exists .
2527	Prints the status of a job .
2528	Convenience function for constant values .
2529	Compute the square of the given times .
2530	r Compute the triangle of the given time .
2531	Calculate the cosine of the given frequency .
2532	Fix gaussian width .
2533	Calculate Gaussian Gaussian Gaussian .
2534	Calculate the Gaussian derivative of a given time .
2535	r Compute the gaussian square of a square .
2536	Creates a pass manager .
2537	Creates a pass manager for the given basis gates .
2538	Check if the given register is in the circuit .
2539	Return a copy of this circuit .
2540	Return the inverse of this circuit .
2541	Appends an instruction to the circuit .
2542	Attach an instruction .
2543	Add a register to the circuit circuit .
2544	Check qubits .
2545	Check if qargs are valid .
2546	Check that the cargs are valid .
2547	Check if the circuit is compatible .
2548	Return a string representation of the QR code .
2549	Draw circuit circuit .
2550	Return the number of gates .
2551	Return the width of this image .
2552	Count the number of operations .
2553	Return the number of connected components .
2554	Bind a circuit to the circuit .
2555	Bind a parameter to the given parameter .
2556	Draws a pulse .
2557	Search for forward n_naps .
2558	Map free gates .
2559	Calculate the distance between two gates .
2560	Return the score of a step .
2561	Copy the circuit metadata to a DAG .
2562	Transform a gate to a graph .
2563	Create a DAGNode from a graph .
2564	Run the decomposition .
2565	Add a physical qubit .
2566	Add an edge to the graph .
2567	Return a new CouplingMap .
2568	Return a list of physical qubits .
2569	Returns True if the graph is connected .
2570	Compute the distance matrix .
2571	Compute the distance between two qubits .
2572	Transpile a circuit .
2573	Create a new cu1 gate .
2574	Return the inverse of this instruction .
2575	Add qubits to the gate .
2576	Add a cif condition .
2577	Subscribe to a given event .
2578	Dispatch event .
2579	Unsubscribe an event .
2580	Publish an event .
2581	Initialize the circuit .
2582	Define the circuit .
2583	Return a circuit to uncompute the decomposition of this circuit .
2584	Calculates the angle of a complex pair .
2585	Create a circuit circuit .
2586	Return True if value is a virtual machine .
2587	Return a copy of the layout .
2588	Combine an edge map from another layout .
2589	Creates a new CffoliGateGateGateGate .
2590	Insert a schedule into the schedule .
2591	Raises an exception if it is not silenced .
2592	Convert gates into indices .
2593	Runs the decomposition .
2594	Update the layer graph .
2595	Return a list of Pauli groups .
2596	Create a Qisk from a label .
2597	Initialize a Qisk .
2598	Creates a new Pauli .
2599	Convert QuantumInfo to operator .
2600	Convert this circuit to an Instruction circuit .
2601	Update the qubits .
2602	Update the qubits .
2603	Insert a Pauli .
2604	Appends a Paulis .
2605	Delete qubits .
2606	Generate a random number of qubits .
2607	Create a Pauli .
2608	Get the measure outcome of a qubit .
2609	Add a sample to the simulation .
2610	Add a quantum measure .
2611	Add a qasm_reset to the matrix .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Validate the measurements .
2616	Run the given qobj .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initialize the unitary matrix .
2621	Returns the unitary of the unit .
2622	Run a job .
2623	Validate the circuit .
2624	Checks if a bit is a bit .
2625	Run the given dag .
2626	Checks if this interval is overlap .
2627	Returns a new interval with the given time .
2628	Shift the timeslot .
2629	Returns the start time for the given channels .
2630	Return the end time of the given channels .
2631	Checks if the given timeslots are merged .
2632	Merge the timeslot with the given timeslot .
2633	Returns a new timeslot collection .
2634	Report a comment .
2635	Return a dictionary with the values of rho .
2636	Plot the state of the state of a state .
2637	Creates a rzz gate .
2638	Add a cswap gate to the gate .
2639	Initialize the backend properties .
2640	Create a program graph .
2641	Select next edge from the program .
2642	Select the best cost of the gate .
2643	Given a prog_qubit_qubit_qubit_qubit_qubit_qubit_qubits return the best value of the given prog_qubits .
2644	Run the program .
2645	Return a list of instruction instructions .
2646	Return the inverse of this gate .
2647	Add qubits to the gate .
2648	Add a cif condition .
2649	Return True if the matrix is unitary .
2650	Return the conjugate of this matrix .
2651	Transpose self .
2652	Power of the operator .
2653	Return the shape of the output .
2654	Convert an Instruction into an Operator .
2655	Updates the mapper for the given layer .
2656	Separate a bitstring into a string .
2657	Format a memory - level memory memory .
2658	Format a memory - level memory memory .
2659	Formats a list of memory - level arrays .
2660	Formats the given counts .
2661	Formats a state vector .
2662	Format a matrix .
2663	Decorator to submit a job .
2664	Submit a job .
2665	Return the current job status .
2666	Checks if this range is included in the range .
2667	Plot the blochs of a multivariate matrix .
2668	Get the qubit frequencies for the given channel .
2669	Get the default values for the given user .
2670	Run the given circuit .
2671	Plot the state of the state of a state .
2672	Calculate the number of rows in n .
2673	Compute the lexical index of a list .
2674	Plot the state of the state of the given state .
2675	Return a list of all available backends .
2676	Return the op .
2677	Create a new SamplePulsePulse .
2678	Create a new SamplePulse .
2679	Calculate a square pulse of a square .
2680	Calculate a wavetooth signal .
2681	Calculate a single triangle .
2682	Calculate a waveP pulse .
2683	Calculate a signal for a signal .
2684	Calculate a sample for a given duration .
2685	Generate a sample derivative of a given duration .
2686	Calculate a sample for a given duration .
2687	Calculates the distance between the axes .
2688	Return a string representation of this QRegression .
2689	Returns an instance of the backend instance .
2690	Rename a register .
2691	Remove all operations from the tree .
2692	Add a quantum circuit .
2693	Add a register to the circuit .
2694	Add a wire to the graph .
2695	Check if the condition is valid .
2696	Return a list of bits in a condition .
2697	Add a new op node .
2698	Apply an operation to the circuit .
2699	Checks that the given edges are valid .
2700	Check that the wiremap is valid .
2701	Map condition to wire_map .
2702	Extends a graph to the graph .
2703	Compose a circuit .
2704	Checks that a list of wires are valid .
2705	Create a map of predicates for a node .
2706	Compute the full predicates for the input circuit .
2707	Return a list of topological nodes .
2708	Iterate over all nodes in the graph .
2709	Return a list of all op nodes .
2710	Return a list of all gate nodes .
2711	Return a list of named nodes .
2712	Get two gates .
2713	Returns the predecessors of the given node .
2714	Return a list of all the successors of the given node .
2715	Returns the ancestors of the given node .
2716	Returns a list of quantum successors for a given node .
2717	Remove a node from the graph .
2718	Remove all ancestors of a node .
2719	Remove all nodes of a node .
2720	Remove all nodes of the given node .
2721	Remove all nodes from a node .
2722	Returns a new DAGCircuit .
2723	Generate a serialized layer .
2724	Yields the multigraph layer .
2725	Return a set of nodes that match the given name .
2726	Iterate over all nodes in the circuit .
2727	Count the number of operations .
2728	Return the summary of this tensor .
2729	Create a TomographyBasis .
2730	Calculates the gates for the given operator .
2731	Compute a tomography set .
2732	Process a tomography set .
2733	Create a tomography circuit .
2734	Compute the data for each circuit .
2735	Calculate the marginal counts of the measurement .
2736	Calculates the reconstruction of the transformation data .
2737	Compute the Leastsq fit .
2738	Compute the projection of an op_list .
2739	r Compute the inverse of the linear linear linear linearization of the given frequency .
2740	Calculate rho .
2741	Calculate the wigner data for a measurement .
2742	Schedule a measurement .
2743	Run text checker .
2744	Check the status of a job .
2745	Calculate the Euler angles for the given unitary matrix .
2746	Simplified UUID .
2747	Run the given graph with the given layout .
2748	Show qubits tab .
2749	Show the job history .
2750	Plot the job history .
2751	Draw the pulse .
2752	Create a cu3 gate .
2753	Build a Bell circuit .
2754	Transpile a circuit .
2755	Transpile a circuit .
2756	Execute the given experiments .
2757	Get the drive channel .
2758	Return the control channel .
2759	Get the measure channel .
2760	Acquire channel .
2761	Compute the input state of the input state .
2762	Assemble the experiment .
2763	Unset the logger .
2764	Plot the state of a state .
2765	Process two channels .
2766	Updates the input data .
2767	Pop the lexer .
2768	Push a file into the stack .
2769	Run a DAG circuit .
2770	Returns the bound method for the given instruction .
2771	Convert an instruction into a dictionary .
2772	Convert a frame change to a frame change .
2773	Convert a persistent value to a persistent value .
2774	Convert a drive to a QObject model .
2775	Convert an instruction to a QObject model .
2776	Update the annotations .
2777	Generate a sampling function .
2778	Filter a list of backend instances .
2779	Resolve backend name .
2780	Convert a dag to a circuit .
2781	Convert a matrix to a dictionary .
2782	Updates a symbol .
2783	Verify that a bit is declared in the gate .
2784	Verify that an expression is valid .
2785	Verify that the given object is a valid gate .
2786	Verify that the register is valid .
2787	Verify that all children are valid .
2788	Find the column of the given token .
2789	Parse debug value .
2790	Parse the given data .
2791	Run the given data .
2792	Parse the contents of the file .
2793	Create a crz gate .
2794	Calculate the basis of a bitstring .
2795	Return the density of the density matrix .
2796	Calculate the purity of a state .
2797	Run a dag .
2798	Display a backend visualization .
2799	Update the status of the backend .
2800	Generate a widget for the jobs .
2801	Run the given dag .
2802	Get a backend by name .
2803	Return the shape of bipartite .
2804	Return a generator of register_labels .
2805	Truncate float .
2806	Create a latex file .
2807	Returns the width of the image .
2808	Returns the size of the page .
2809	Load schema .
2810	Return a validator for a given schema .
2811	Load all schemas and validators .
2812	Validate a JSON object against a schema .
2813	Formats a list of errors .
2814	Makes the majority of the majority of two nodes .
2815	Makes a semajority .
2816	Generate a LaTeX source .
2817	Draw a matplotlib circuit .
2818	Return a random unit of the given dimension .
2819	Returns a random density matrix .
2820	Generate a Gaussian matrix .
2821	Calculate the density of the density matrix .
2822	Calculate the density of the density of the distribution .
2823	Returns a list of all the children of this node .
2824	Power of the matrix .
2825	Compute the components of a subsystem .
2826	Convert an instruction into a SuperOp object .
2827	Run a dag .
2828	Convert circuits to qobj .
2829	Run the decomposition of the given dag .
2830	Run the given gate .
2831	Define the gate definition .
2832	Check if the value is a collection .
2833	Checks if a value is valid .
2834	Set the ATOL .
2835	Sets the rtol constraint .
2836	Reshape the dimension .
2837	Return a tuple of the input dimensions .
2838	Return a tuple of output dimensions for the given qargs .
2839	Return a copy of this instance .
2840	Perform the power of the matrix .
2841	Return a tuple of dims .
2842	Compute the einsum of a tensor .
2843	Deserialize value .
2844	Serialize the given value .
2845	Checks if the given value is a valid type .
2846	Compute the fidelity between two states .
2847	Compute the inverse of a function .
2848	Return a snapshot of this snapshot .
2849	Set the label .
2850	Return True if the operator is unitary .
2851	Convert self to operator .
2852	Convert QuantumChannel to Instruction .
2853	Initialize the transformer .
2854	Sort an enum by name .
2855	Patch the strptime object .
2856	Returns an OrderedDict with the given languages .
2857	Get a list of all the available languages .
2858	Check if tokens are valid .
2859	Split a string into a list of strings .
2860	Parse a date string .
2861	Parse a time string .
2862	Check if the given date string is valid .
2863	Translate a date string .
2864	Parse a date string .
2865	Get the ammo generator .
2866	Convert an exception to net .
2867	Convert an exception to HTTP code
2868	Reads the configuration .
2869	Compose the phantom config .
2870	Get information about the streams .
2871	Compose the stderr configuration .
2872	Log stdout to stdout .
2873	Expand a string into an integer .
2874	Reads the StepperWrapper .
2875	Publish the stepper
2876	Generate the stpd file .
2877	Read the options from the cache .
2878	Write the info to the cache .
2879	Create stpd file .
2880	Create a new LPSP
2881	Calculate the rps for the given time .
2882	Execute a command .
2883	Decode a list of metrics .
2884	Create a list of points for a given label .
2885	Publish a status
2886	Count the number of matched codes .
2887	Stop the pool .
2888	Feeds all worker tasks .
2889	Initialize the kernel .
2890	Add user options .
2891	Configure the configuration .
2892	Shutdown the plugin .
2893	Collect data from results .
2894	Notify listeners .
2895	Get a URI for a URI .
2896	Parse duration .
2897	Start the agent .
2898	Start the agent .
2899	Determine the port port .
2900	Add JMX components to the JMX file .
2901	Terminate the process .
2902	Read stats from a list of stats .
2903	Create a criterion from the given string .
2904	Get the configuration from the given XML file .
2905	Create a new config file .
2906	Check the disk usage .
2907	Check if the memory is available .
2908	Get terminal size .
2909	Get right line .
2910	Truncate a line of lines .
2911	Renders the left panel .
2912	Render the screen .
2913	Add a new info widget .
2914	Fill a rectangle .
2915	Get the length of a line .
2916	Create a load plan .
2917	Returns the string representation of the current level .
2918	Add a widget to the screen .
2919	Make a request to the writer .
2920	Load all plugins from the config .
2921	Get a plugin by type
2922	Returns a list of plugins that match the given type .
2923	Collect a file to the artifacts directory .
2924	Add an artifact file to the collector .
2925	Create a temporary temporary file .
2926	Load config files .
2927	Flush the config file .
2928	Get a list of options for a given section .
2929	Find all sections in the config .
2930	Decode a chunk of statistics .
2931	Get information about the phantom .
2932	Prepare the agent .
2933	Poll agent data .
2934	Send collected data to the monitor .
2935	Determine the configuration .
2936	Handle data items .
2937	Decode agent data .
2938	Subscribe to the given channels .
2939	Run the event loop .
2940	Close the connection .
2941	Perform a single request .
2942	Submit a new order .
2943	Get an order by its ID .
2944	Get a single position .
2945	List assets .
2946	Get a single asset .
2947	Create a new sub - plan sub - plan subplan .
2948	Convert a dict to a dict .
2949	Validate an object parameter .
2950	Construct an event logger .
2951	Construct a JSON event logger .
2952	Load configuration from a file .
2953	Get repository configuration .
2954	Return a string representation of a graph .
2955	Get a pipeline by name .
2956	Get all the pipelines
2957	Get next event .
2958	Execute a pipeline through the pipeline .
2959	Wait for all processes .
2960	Create a new Field instance .
2961	Build the execution plan .
2962	Build a plan from a pipeline .
2963	Build a sub - pipeline .
2964	Return the solid name of the pipeline .
2965	Construct a list of publish commands .
2966	Release a new version .
2967	Create a pipeline context definition .
2968	Decorator to create input schema .
2969	Decorator for output_selector .
2970	Print a text block .
2971	Download data from S3 .
2972	Upload a file to S3 .
2973	Decorator to raise a DagsterError exception .
2974	Create a new directory .
2975	Context manager manager .
2976	Creates a new LoggerLog .
2977	Return True if the step is successful .
2978	Return True if step is skipped .
2979	Returns the transformed values .
2980	Returns the transformed value for the given output .
2981	Return the failure data .
2982	Create a new PermissiveDict .
2983	Check if a dataset is valid .
2984	Check if a table is valid .
2985	Execute core transform .
2986	Decorate a dagster type .
2987	Create a resource definition .
2988	Create an event .
2989	Coerce a list of vertices .
2990	Get connection params .
2991	Get a new database connection .
2992	Create a new Cursor instance .
2993	Close the connection .
2994	Create a model from a dict .
2995	Convert a list of mdl objects into a list .
2996	Create a form field .
2997	Convert a value to a Python object .
2998	Apply rel filters to the queryset .
2999	Compute nfps .
3000	Compute nfps .
3001	Compute the best partitions for a set of sizes .
3002	Compute optimal partitions .
3003	Calculate the c1 and r2 .
3004	Initialize the slots .
3005	Returns the number of bytes in bytes .
3006	Serialize this MinHash .
3007	Deserialize a string .
3008	Update the hash .
3009	Merge two hashes .
3010	Creates a new MinHash .
3011	Index a set of entries .
3012	Query all indexes in the index .
3013	Computes the minimum hash of a vector .
3014	Remove a key from the cache .
3015	Update the hash of the given b .
3016	Compute the count of the linear distribution .
3017	Merge the HyperLogLogLog with another HyperLogLogLog .
3018	Clears the matrix .
3019	Calculate the score of the prediction .
3020	Calculate the mean of an array .
3021	Index all hashes in the hashtable .
3022	Query the minhash of minhash .
3023	Close all tables .
3024	Return an ordered list of ordered list objects .
3025	Return an unordered set storage .
3026	Get user data .
3027	Get social login .
3028	Select text from text .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse a value .
3032	Increment the current line .
3033	Parse a configurable reference .
3034	Add an exception to the exception .
3035	Convert a string to Markdown .
3036	Runs the operative configuration .
3037	Ensure fn is wrapped .
3038	Decorator for decorator .
3039	Format a value .
3040	Clears the configuration .
3041	Bind a value to a Gin configuration .
3042	Retrieve a parameter from a configuration key .
3043	Determine if a function has a parameter .
3044	Get the argument spec for a function .
3045	Returns the list of positional arguments for the given function .
3046	Get the list of positional arguments for a function .
3047	Get the default values for the given function .
3048	Generate a new scope scope .
3049	Decorator to configure a function .
3050	Return a string representation of a configuration string .
3051	Parse a config file .
3052	Registers a file reader .
3053	Parse a config file .
3054	Parse configuration files and bindings .
3055	Parse a value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over all configurable values .
3059	Add a constant .
3060	Create a class from an enum .
3061	Return a list of selector matching a partial selector .
3062	Returns a list of all matched matches .
3063	Return the minimal selector for the given selector .
3064	Convert a query to a string .
3065	Parse retry after retry .
3066	Validate the value .
3067	Return the description of the property .
3068	Sets the value of the widget .
3069	Get a specific thing .
3070	Initialize the object .
3071	Set default headers
3072	Check if the request is allowed .
3073	Get a thing .
3074	Handle a message .
3075	Perform a POST request .
3076	Delete an action .
3077	Start the server .
3078	Return the action description .
3079	Start the action .
3080	Finish the task .
3081	Return the description of this event .
3082	Get the IP address .
3083	Return a list of all available interfaces .
3084	Set the value of the given value .
3085	Sets the value of the external update .
3086	Return a description of a thing .
3087	Sets the href prefix for this action .
3088	Return a dictionary of property descriptors .
3089	Returns a list of all actions for the given action .
3090	Return a list of all event descriptors .
3091	Add a property .
3092	Remove a property .
3093	Get the value of a property .
3094	Return a dictionary of properties .
3095	Set the value of a property .
3096	Get action by id
3097	Add an event .
3098	Add an available event .
3099	Create a new action .
3100	Remove an action from the queue .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify the property status .
3106	Notify the subscriber status .
3107	Send an event .
3108	Return a new instance of the model .
3109	Update the record with the given fields .
3110	Insert rows into the database .
3111	Create a new model .
3112	Creates a new model .
3113	Builds a postgres insert .
3114	Checks if the given field is a magic field .
3115	Returns a list of INSERT fields .
3116	Saves the model .
3117	Handle delete event .
3118	Checks if the given fields are not None .
3119	Resolve the expression .
3120	Return a SQL statement as a string .
3121	Return a copy of this instance .
3122	Add additional conditions to the table .
3123	Determine if the given field is a HStoreField .
3124	Insert values into the database .
3125	Creates a required constraint for a given field .
3126	Renames the required constraint .
3127	Drop the required constraint .
3128	Return a unique constraint name .
3129	Create SQL for creating a new index .
3130	Create a custom command .
3131	Get the base backend base class .
3132	Prepare the database .
3133	Prepare the given value .
3134	Return a string representation of the query .
3135	Return a list of SQL queries .
3136	Rewrite SQL query .
3137	Rewrite an INSERT statement .
3138	Rewrite SQL statement .
3139	Build a list of conflict targets .
3140	Get model field .
3141	Format a field name .
3142	Format a field value .
3143	Create a unique unique constraint .
3144	Renames a unique constraint .
3145	Drop a unique constraint .
3146	Return unique constraint name .
3147	Iterate over unique keys .
3148	Add a condition to the query .
3149	Return the SQL statement as a string .
3150	Calculate the tdist confidence level .
3151	Compute the pooled sample of two samples .
3152	Compute the difference between two samples .
3153	Determine if two samples are significant .
3154	Return a list of topological order nodes .
3155	Generate a random number of Queens .
3156	Play the board .
3157	Select from the board .
3158	Go through a board .
3159	Filter a list of benchmarks .
3160	Expand a benchmark name .
3161	Generate a list of strings .
3162	Initialize benchmark .
3163	Return the domain s domain .
3164	Fetch messages from channel .
3165	Parses raw posts .
3166	Get user information .
3167	Fetch items from a category
3168	Fetch items from RSS feed .
3169	Setup the command line parser .
3170	Fetch items from a category
3171	Get bug bugs .
3172	Get a list of comments for a given bug .
3173	Get the history of a bug .
3174	Retrieve the attachments for the given bug_ids .
3175	Get all notes for a given issue .
3176	Fetch merged merge requests .
3177	Get a list of notes for a merge .
3178	Get a list of versions of a merge .
3179	Get a list of merged merges .
3180	Get a merged merge .
3181	Get all versions of a merge .
3182	Get a merged version of a merge .
3183	Get a list of notes for a given item .
3184	Get emojis for an item
3185	Get a list of emoji objects for an item .
3186	Calculate the rate limit for the rate limit .
3187	Fetch items from a given path .
3188	Initialize the rate limit .
3189	Setup the command line arguments .
3190	Fetch items from a category
3191	Return a unique identifier for the given item .
3192	Get the members of a conversation .
3193	Get information about a channel .
3194	Get information about a user .
3195	Setup slack command parser .
3196	Get the timestamp of a metadata item .
3197	Parse a CSV file .
3198	Parse a list of bug bugs .
3199	Parse bug activity .
3200	Log out of the bugzilla .
3201	Get the metadata of the bug .
3202	Get a list of bugstrings
3203	Get a list of bug bugs .
3204	Get bug activity activity activity .
3205	Fetch items from a category .
3206	Fetch events from a group
3207	Get events for a given group .
3208	Get comments for a given event .
3209	Get a list of RRSVPS for a given event .
3210	Fetch the HTML for the given question .
3211	Fetch comments from a question .
3212	Builds a question object from HTML .
3213	Fetch all questions from a given path .
3214	Get HTML for a question
3215	Get comments for a post .
3216	Parse a question container .
3217	Parse the answer of a question .
3218	Parse the number of pages .
3219	Parse user info .
3220	Fetch reviews from a category .
3221	Parse reviews .
3222	Fetch the latest reviews .
3223	Get the server version .
3224	Get reviews .
3225	Retrieves the next group item .
3226	Execute command .
3227	Execute command .
3228	Execute a remote command .
3229	Setup command line parser .
3230	Fetch a single issue
3231	Fetch all attachments for a given issue .
3232	Fetch messages from a issue .
3233	Fetch all activities .
3234	Fetch user data .
3235	Get user information .
3236	Get a single issue .
3237	Get a list of issues for a given issue .
3238	Get the URL of the project .
3239	Fetch items from the given path .
3240	Get a list of subscriptions
3241	Find the group id .
3242	Fetch data from url
3243	Setup command line arguments .
3244	Generate a unique uuid .
3245	Fetch items from backend .
3246	Fetch items from an archive .
3247	Finds the backends of the given package .
3248	Fetch metadata for a given category .
3249	Fetch items from archive .
3250	Filter classified data .
3251	Parse arguments .
3252	Set authentication arguments .
3253	Set the archive arguments .
3254	Set output arguments .
3255	Execute the backend .
3256	Initialize the archive manager .
3257	Calculate the timestamp of a metadata item .
3258	Parse a MBox message .
3259	Fetch messages from a mailing list .
3260	Copy the mbox to a temporary file .
3261	Validate message .
3262	Convert a message to a dict .
3263	Get a message from the file .
3264	Fetch items from the repository .
3265	Fetch items from repository .
3266	Parses a git log file .
3267	Initialize git repository .
3268	Setup git command parser .
3269	Parse the contents of the stream .
3270	Clone repository .
3271	Count the number of objects in the repository .
3272	Determine if the repository is detached .
3273	Update repository .
3274	Syncs the repository .
3275	Get a list of all the revisions in the repository .
3276	Get the log of the repository .
3277	Show a list of commits .
3278	Fetch the packages from the repository .
3279	Read commits from a pack .
3280	Update references from refs .
3281	Determine the refs of the repository .
3282	Update a git ref .
3283	Execute a command .
3284	Read the stderr from the stdout .
3285	Execute git command .
3286	Fetch a list of tweets .
3287	Fetch a list of tweets .
3288	Get a list of tweets .
3289	Setup the command line arguments .
3290	Fetch items from a category
3291	Fetch items from a category .
3292	Parses the results into a dictionary .
3293	Get hits for a given keywords .
3294	Get the metadata for the given item .
3295	Return the metadata for a given item .
3296	Fetch pull requests for a given date .
3297	Fetch repo info
3298	Get a list of all issue reactions .
3299	Get a list of all issue comments .
3300	Get the list of issue assignments .
3301	Get the list of reviewers for the given pr_number .
3302	Get a list of commit commits .
3303	Get list of pull review comments .
3304	Get user information .
3305	Get a list of all the reactions for a given issue .
3306	Get a list of issues .
3307	Get a list of pull requests .
3308	Get the repository s repository .
3309	Get a list of reviews for a given number .
3310	Get a list of pull commits .
3311	Get a list of reactions for a comment .
3312	Get user information .
3313	Get a list of orgs for a given login .
3314	Get the rate limit for the given token .
3315	Get the rate limit rate limit .
3316	Choose the best api token .
3317	Check if token is valid .
3318	Update the current rate limit .
3319	Initialize metadata .
3320	Store an entry in the database .
3321	Retrieve an entry from the archive .
3322	Create a new archive .
3323	Generate a hashcode .
3324	Verify the archive .
3325	Load metadata from archive .
3326	Count the number of rows in the archive .
3327	Create a new archive .
3328	Remove an archive .
3329	Search for archives .
3330	Iterate over all files in the archive .
3331	Search all files in the directory .
3332	Checks if a file is a compressed file type .
3333	Generate a range of months between two dates .
3334	Convert a message to a dictionary .
3335	Remove invalid XML characters from XML .
3336	Convert XML string to dict
3337	Parses a JSON string .
3338	Get a list of issues for a given date .
3339	Get information about a specific issue .
3340	Get a user .
3341	Call a Redmine client .
3342	Fetch items for a specific category
3343	Fetch data from repository
3344	Get a repository for a repository .
3345	Map custom fields to fields .
3346	Filter custom fields .
3347	Parses a page .
3348	Fetch issues from a given url .
3349	Get a list of issues
3350	Get comments for a given issue .
3351	Get list of fields
3352	Fetch items from a category
3353	Get list of jobs
3354	Get all builds for a given job .
3355	Parses a page .
3356	Returns a generator of all questions .
3357	Setup the command line arguments .
3358	Fetch items from a category .
3359	Returns the maximum timestamp of reviews .
3360	Fetch all pages from the given url .
3361	Get all pages in a namespace
3362	Get recent changes .
3363	Fetch items from a category .
3364	Parses raw messages from JSON .
3365	Determine if a message matches the given chats .
3366	Get a list of updates .
3367	Fetch articles from group
3368	Extract metadata from an item
3369	Parse an article .
3370	Fetch data from remote .
3371	Fetch a single article .
3372	Fetch data from remote server .
3373	Fetch data from archive .
3374	Create a new http session .
3375	Set rate limit .
3376	Sleep for rate limit .
3377	Update rate limit .
3378	Parse a Supybot log file .
3379	Retrieve a list of archived archives .
3380	Return a list of all supersybot archives .
3381	Parses the input stream .
3382	Parses the given string .
3383	Parse a message from a string .
3384	Fetch topics from a category .
3385	Parse a list of topics .
3386	Get a topic
3387	Perform a POST request .
3388	Fetch tasks from a category .
3389	Parse a list of tasks .
3390	Parse a list of users .
3391	Generate a list of tasks for a given date .
3392	Return a list of transactions for the given phids .
3393	Returns a list of users for the given phids .
3394	Get a list of phids
3395	Perform a method call .
3396	Generate metadata ID for a given item .
3397	Parses the contents of a JSON summary .
3398	Get the contents of a resource .
3399	Get historical content .
3400	Parses the result .
3401	Get the capabilities URL for a service .
3402	Read capabilities from a URL .
3403	Read a string from a string .
3404	Parses the result of a measurement .
3405	Build the url for this request .
3406	Get the elements of a complex type .
3407	Constructs a schema from an element .
3408	Get the URL for a feature type .
3409	%prog complex input
3410	Get movie list
3411	Get a list of TV TVs .
3412	Get a list of movies .
3413	Get information about a specific resource .
3414	Get the list of alternative titles .
3415	Retrieve a list of credits .
3416	Get external IDs .
3417	Get the keywords associated with the key .
3418	Get recommendations .
3419	Get release dates .
3420	Get all releases .
3421	Get a list of translations .
3422	Get a list of similar movies .
3423	Get a list of reviews .
3424	Get a list of changes .
3425	Get the upcoming track .
3426	Get the status of the current song .
3427	Returns a list of popular users .
3428	Get the top level of the top level .
3429	Get account states .
3430	Set rating .
3431	Get movie credits
3432	Get a list of tv credits .
3433	Get information about a credit card .
3434	Get a list of TV objects .
3435	Get information about the current user .
3436	Gets the list of movies .
3437	Get information about a user .
3438	Get a list of movies .
3439	Create a new token
3440	Validate a token .
3441	Create a new session .
3442	Create a new guest session .
3443	Get rated movies .
3444	Get item status .
3445	Create a new list .
3446	Remove an item .
3447	Clears the list .
3448	Get a list of content ratings .
3449	Get a list of similar objects .
3450	Get the current state of the air .
3451	Get information about a series .
3452	Get the credits for the series .
3453	Get a list of external IDs .
3454	Get information about the series .
3455	Get the credits for the series .
3456	Get the external IDs .
3457	Set the attributes of the response .
3458	Get a movie .
3459	Get a collection of objects .
3460	Get information about the TV .
3461	Get person information .
3462	Get company information .
3463	Get information about a keyword .
3464	Get a list of multi - items
3465	Normalize a string .
3466	Given a list of refs returns a tuple of ngrams .
3467	Return a tuple containing the number of n - grams .
3468	r Compute the erfcc of x .
3469	Align two texts .
3470	Get all descriptors in a module .
3471	Register a JSON descriptor .
3472	Register a new version .
3473	Print a progress bar .
3474	Check if the given descriptor is a descriptor .
3475	Return a JSON representation of this object .
3476	Return the coordinate of this descriptor .
3477	Calculate the atom at the given index .
3478	Return the surface area of the surface .
3479	Initialize a molecule from a molecule .
3480	Create a Constor instance from a JSON object .
3481	Fill with missing values .
3482	Drop all missing values .
3483	Return a dictionary of items in the dictionary .
3484	Return a dictionary as a dictionary .
3485	Get the name of the attribute .
3486	Log a function .
3487	Decorator to wrap a function .
3488	Print a message to stdout .
3489	Print a message .
3490	Fail a message .
3491	Generate a temporary file .
3492	Sets a temporary file to the given target .
3493	Clean up temporary files .
3494	Get the full path of the path .
3495	Get the legal params for the given method .
3496	Merge option parameters .
3497	Add options to the parser .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Join all workers .
3501	Process the number of tasks .
3502	Get S3 keys from environment variables .
3503	Get S3 keys from the command line .
3504	Get S3 keys from S3 config file .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List all buckets .
3508	Return a list of S3 files in S3 .
3509	Return a list of files .
3510	Expand a list of files into a list .
3511	Upload a single file to the pool .
3512	Put files in a directory .
3513	Create a bucket .
3514	Update the permissions of the object .
3515	Print a list of files
3516	Download a single file
3517	Get a list of files from source .
3518	Copies a single file to a given target .
3519	Copy files from source to target .
3520	Delete all files from a source
3521	Return a list of relative paths .
3522	Synchronously synchronously synchronously .
3523	Returns the hash of a file .
3524	Returns the MD5 hash of the file .
3525	Create a directory for the given target .
3526	Checks if a remote key exists in the cache .
3527	Return True if path matches filter_path
3528	Recursively walk the S3 directory .
3529	Add a conditional object to the list .
3530	Get file privilege .
3531	Lookup a S3 URL .
3532	Read data from source file .
3533	Upload a file to S3 .
3534	Verify the downloaded file size .
3535	Write a file to a file .
3536	Copy a source to the S3 .
3537	Run command .
3538	Validate arguments .
3539	Print a list of objects .
3540	List all buckets
3541	Create a new bucket .
3542	Handle a file command .
3543	Get a list of files
3544	%prog command
3545	Dynamically handle dsync command .
3546	Handle cp command .
3547	Handle mv command .
3548	Delete files from S3 .
3549	Handle a command .
3550	%prog total size
3551	Parse a date string .
3552	Parse a time value .
3553	Parse a delta .
3554	Check the value of a dict .
3555	Determine the gateway configuration .
3556	Create a new Mcast socket .
3557	Read data from a hub .
3558	Push data to the server .
3559	Returns the key of the token .
3560	Handle exceptions .
3561	Add module to Rollbar .
3562	Ensure that the log handler exists .
3563	Retrieves the request .
3564	Initialize Rollbar .
3565	Decorator for lambda function .
3566	Report a message to Rollbar .
3567	Search for items
3568	Create a log file .
3569	Build the user data .
3570	Add lambda context data .
3571	Add request data to Rollbar .
3572	Determine if a frame is added .
3573	Build request data .
3574	Build server data .
3575	Build the payload for the request .
3576	Main entry point .
3577	Compose a Hangul character .
3578	Decompose a Hangul letter .
3579	Determine if the given letter has the given letter .
3580	Attach a word to a word .
3581	Checks if the given node is inside an exception .
3582	Check if node is inside lambda .
3583	Get all elements of a node .
3584	Checks if the given node is an exception .
3585	Check if the given node is a superclass .
3586	Check if node is an error .
3587	Checks if the given node is a default argument .
3588	Check if node is a function decorator .
3589	Check if the given node is an ancestor .
3590	Return the parent of the given node .
3591	Decorator to store messages .
3592	Collect all fields from a format string .
3593	Get the argument from the call node .
3594	Checks if the given node is a standard exception .
3595	Checks if the given handler is an error .
3596	Return True if the given node is a property .
3597	Determine if the given function is a decorator .
3598	Finds the try_except handler for the given node .
3599	Checks if the given node is a fallback block .
3600	Get the handler handlers for the given node .
3601	Check if the given node is ignored .
3602	Check if a class is abstract .
3603	Try to infer a node .
3604	Return the type of the given node .
3605	Checks if a function is registered in the given function .
3606	Checks if the given node is postponed .
3607	Return a list of qualified names .
3608	Get the name of the import node .
3609	Return a string representation of a tree .
3610	Writes a graph to the graph .
3611	Visits an import node .
3612	Visits an import from a node .
3613	Checks the position of a node .
3614	Records an import statement .
3615	Check the order of imports .
3616	Check if a module is relative to a relative import node .
3617	Add an imported module .
3618	Check if a module is deprecated .
3619	Check if the given node is preferred .
3620	Report external dependencies .
3621	Return a set of imports from the dependency graph .
3622	Get the default options .
3623	Insert default options .
3624	Return True if the given node is visible .
3625	Get callbacks for a node .
3626	Visit a node .
3627	Check if the message id is consistent .
3628	Recursively visit a call .
3629	Check if node is a datetime .
3630	Check if node is open mode .
3631	Handle a message .
3632	Display messages .
3633	Get the title of a node .
3634	Set default options .
3635	Determines whether the given node is shown .
3636	Add a class .
3637	Get the ancestors of a node .
3638	Return an iterator over all the association nodes .
3639	Extract classes from a class .
3640	Parses a project .
3641	Add a import from a node .
3642	Create a class diagram for the given class .
3643	Generate a list of Diadef diagrams .
3644	Check if owner is ignored .
3645	Return a list of names that match the given attribute .
3646	Checks if the node is a member .
3647	Check if node is a parent node .
3648	Check if the given name is a variable .
3649	Determine if a variable is a context variable .
3650	Visit an attribute node .
3651	Visits a node .
3652	Checks if the given node is a callable .
3653	Visits an unary op .
3654	Iterate over all interfaces .
3655	Create a project from files .
3656	Visit a package .
3657	Visit a function definition .
3658	Visit a node .
3659	Handle assignment type .
3660	Visit an import node .
3661	Visit an import from a node .
3662	Compute the module for the given context .
3663	Check if a module is imported .
3664	Get ANSI code for a color .
3665	Convert a message to an ASCII string .
3666	Register the given linter .
3667	Handle a message .
3668	Display a layout .
3669	Handle a message .
3670	Open a graph .
3671	Create a node .
3672	Write an edge to the stream .
3673	Check if a new format is valid .
3674	Processes non - escaped characters .
3675	Visit a section .
3676	Visit a evaluation section .
3677	Visit a layout .
3678	Write a table to the output .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Checks if the given symbol is valid .
3683	Raise an InvalidMessageError if it doesn t exist .
3684	Raise an InvalidMessageErrorError if the given symbol id is not valid .
3685	Returns a list of message definitions for a given message id .
3686	Return a string representation of a message .
3687	Print help message .
3688	List messages .
3689	Initialize the plugin .
3690	Return the number of cpu_counts
3691	Report messages for messages .
3692	Fix import path .
3693	Load a list of plugin modules .
3694	Load plugin configuration .
3695	Set the value of an option .
3696	Register a checker .
3697	Disable the report .
3698	Enable python3 export mode .
3699	Return list of checkers .
3700	Returns a sorted list of checkers .
3701	Return a list of checkers .
3702	Expands a list of modules .
3703	Set the current module .
3704	Checks the given AST node .
3705	Report evaluation .
3706	Handle help message .
3707	Print full documentation .
3708	List messages .
3709	List checker groups .
3710	Normalize text .
3711	Get module id and frame id .
3712	Safely decode a string .
3713	Checks if a file is in the blacklist .
3714	Register plugin plugins .
3715	Convert a string to a comment .
3716	Format option value .
3717	Format a section .
3718	Format the given options .
3719	Insert a child at the given index .
3720	Add a child to this node .
3721	Return the parents of this node .
3722	Format the layout .
3723	Get the contents of a table .
3724	Compute the content of a layout .
3725	Collect block lines from a module .
3726	Handle an ignored message .
3727	Register a report .
3728	Create a section of the report .
3729	Add a set of stats .
3730	Get the property name of the setter .
3731	Get the setter for a setter .
3732	Returns True if the given function returns True .
3733	Return a list of possible exception types .
3734	Process a module .
3735	Process a module .
3736	Process comments .
3737	Checks if the given statement is a future .
3738	Return True if the given statement is in the given statement .
3739	Return the method name for the given name .
3740	Get the extra info for the given node .
3741	Determine if the node is a global scope .
3742	Return True if the given name is assigned to the given name .
3743	Mark a node as consumed .
3744	Visits global variables .
3745	Checks if the given node scope is ignored .
3746	Checks if the given node is homonymized .
3747	Check if the given node is unpackable .
3748	Check that all metaclasses are met .
3749	Get all packages in a directory .
3750	Install the package .
3751	Run the install_dir .
3752	Report the difference between two lines .
3753	Runs the analysis .
3754	Append a stream to the stream .
3755	Compute a list of sims .
3756	Display a list of similarities between two lines .
3757	Find lines between two lines .
3758	Iterate over all lines in a list of lines .
3759	Iterate over lines at start_at .
3760	Creates a new index for each line .
3761	Check if the definition is equal to the given definition .
3762	Check if two arguments are equal .
3763	Determine if the original parameter has a default value .
3764	Determine if the original parameters are different .
3765	Try to infer a call result .
3766	Add access to the scope .
3767	Visits a class definition .
3768	Check that node is consistent .
3769	Checks if the given node is valid .
3770	Visits a functiondef node definition .
3771	Checks if the given function is a superdelegation .
3772	Traverses a function definition .
3773	Check if node is in slots .
3774	Visit a name .
3775	Checks that accessed members are accessed .
3776	Checks if the class is an abstract method .
3777	Checks if a method is valid .
3778	Return True if the given node is a valid method .
3779	Checks if the given body is raising True .
3780	Checks that the given exception is invalid .
3781	Visits a function definition .
3782	Displays the report .
3783	Checks if the given node is a named type .
3784	Checks if a class is an enum class .
3785	Checks if the given node is a dataclass .
3786	Open the linter .
3787	Visits a class definition .
3788	Traverses a class definition .
3789	Visit an AST node .
3790	Check if a boolean expression is a boolean .
3791	Checks the docstring for documentation .
3792	Formats the template .
3793	Checks if the given token is a trailing comma .
3794	Check if the given node is an ELIF .
3795	Checks if the given node is simplified .
3796	Check if the given node is a stop iteration .
3797	Check if the exception is in the stopiteration .
3798	Checks if the next iteration is raised .
3799	Checks if the given node is nested .
3800	Return a dictionary containing all the types of the given node .
3801	Check if the given node is a merge .
3802	Checks if the given node is chained .
3803	Return True if node is an OR or not .
3804	Check if a node is consistent .
3805	Determine if the node is a node .
3806	Visit iterating over iterators .
3807	Check if graphviz is available .
3808	Run the command line .
3809	Write package packages .
3810	Write the classes to the graph .
3811	Sets the printer .
3812	Set the graph of the graph .
3813	Return True if the current version is emitted .
3814	Format the help message .
3815	Get the environment variables .
3816	Lint a file .
3817	Run pylint .
3818	Get a list of vertices in a graph .
3819	Get the source code .
3820	Generate the graph .
3821	Format a section .
3822	Register a message by id .
3823	Disable a message .
3824	Enable a message .
3825	Return the symbol of a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Prints the full documentation .
3829	Prints information about a checker .
3830	Get the indent length of a line .
3831	Get line indentation line .
3832	Return the indentation of a token .
3833	Handle a line start .
3834	Return a list of valid indentations .
3835	Return the indentation for the given bracket .
3836	Return a continuation token .
3837	Push a token .
3838	Add a new line .
3839	Checks if a keyword is a keyword .
3840	Check if token is valid .
3841	Check if two tokens are equal .
3842	Checks if the tokens are whitespace .
3843	Visits a statement .
3844	Check for multiple statements .
3845	Checks if the given lines are valid .
3846	Checks the indentation of the given string .
3847	Return True if the given node is iterable .
3848	Check if the given node is a conditional import .
3849	Visits a name .
3850	Visit a subscript node .
3851	Visit an attribute node .
3852	Visits an exception handler .
3853	Checks if an exception is raised .
3854	Find the pylintrcrc file .
3855	Validate value .
3856	Expand the default value .
3857	Match long option .
3858	Register a new options provider .
3859	Set provider option .
3860	Set a global option .
3861	Generate the configuration .
3862	Load config file .
3863	Load the command line configuration .
3864	Add a help section .
3865	Return the help message .
3866	Load the default values from the options .
3867	Return the name of an option .
3868	Get option definition .
3869	Generate a list of options by section name .
3870	Check if a function call is a method call .
3871	Check if a string is a complex format string .
3872	Visit a module .
3873	Visit a import from a module .
3874	Visit a module import .
3875	Visits a call .
3876	Check if a format string is valid .
3877	Return True if node is in loop .
3878	Gets the break loop .
3879	Determine if the given loop exits .
3880	Returns a set of properties for the given configuration .
3881	Determine the name of a function .
3882	Generate a report by type
3883	Determine if node is redefined .
3884	Check if a call is a single argument .
3885	Checks if a node is starred .
3886	Check for non - local variables .
3887	Visit a call .
3888	Checks if the given node is a loop .
3889	Check if node is in loop .
3890	Open the linter .
3891	Visits an expression node .
3892	Visit a lambda node .
3893	Visits an assertion .
3894	Visits a dictionary .
3895	Check if node is reachable .
3896	Checks if the given node has been reached .
3897	Check if a node is reversed .
3898	Checks if the given node is a new keyword .
3899	Checks the name of the given node .
3900	Checks the docstring for documentation .
3901	Checks if a literal node is valid .
3902	Add a subgraph .
3903	Parse a subgraph .
3904	Visit a module tree .
3905	Add a checker .
3906	Recursively walk the AST node .
3907	Add a relationship to this object .
3908	Get the relationship for a given object .
3909	Return a list of attribute names .
3910	Return a list of all methods of the given node .
3911	Add an object to the graph .
3912	Return a list of class names .
3913	Return a list of class definitions .
3914	Get class by name .
3915	Return a list of all modules .
3916	Get a module by name .
3917	Get a module by name .
3918	Add a node to the node .
3919	Deletes the grant .
3920	Return the query .
3921	Get user by password .
3922	Get a user by access_token .
3923	Set a new token .
3924	Set a grant .
3925	Get a user by code .
3926	Prepare a request .
3927	Initialize the application .
3928	Create a new OAuth remote app .
3929	Make a request .
3930	Authorize the authorization .
3931	Handle OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle authorization response .
3934	Decorator for authorized_handler .
3935	Hash a token .
3936	Make a client with the given token .
3937	Creates a new client .
3938	Decorator to set the insecure transport .
3939	Confirm an authorization request .
3940	Decorator to create a request token .
3941	Get client secret .
3942	Get request token secret .
3943	Get access token from request .
3944	Get the default realms for a client .
3945	Get the realms of the given token .
3946	Get the redirect uri for the given token .
3947	Get the rsa key from the client .
3948	Validate client key .
3949	Validate request token .
3950	Validate access token .
3951	Checks if the given timestamp is valid .
3952	Validate redirect_uri .
3953	Validate the given token .
3954	Validate a Verifier .
3955	Verify request token .
3956	Verify that the given token is valid .
3957	Save access token .
3958	Save request token .
3959	Save a Verifier to the store .
3960	Returns the error URI for the provider .
3961	Confirm an authorization request .
3962	Verify the request .
3963	Get client credentials from request .
3964	Checks if a client is authenticated .
3965	Authenticate client .
3966	Authenticate client .
3967	Get the scope of a refresh token .
3968	Confirm a refresh token .
3969	Get the default redirect uri .
3970	Get default scopes .
3971	Destroy an authorization token .
3972	Save authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client ID .
3976	Validate a client .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke a token .
3983	Update API request data .
3984	Convert a dictionary to a string .
3985	Changes the authorization header .
3986	Register a remote app to the remote app .
3987	Create a remote app .
3988	Extract parameters from request .
3989	Convert text to bytes .
3990	Decode a base64 encoded string .
3991	Create a response with the given headers .
3992	Returns a list of cached clients .
3993	Add a remote app .
3994	Add a remote application .
3995	Checks if an exception is raised .
3996	Check that the certificate is successful .
3997	Load private key .
3998	Try to load private key .
3999	Try to load private key from private key
4000	Checks if the CRRL is revoked .
4001	Check if the revocation is revoked .
4002	Create a certificate request .
4003	Create an X509 certificate .
4004	Creates a decorator that wraps a function .
4005	Loads certificates from a CA certificate .
4006	Set the default passphrase callback .
4007	Use SSL_certificate_file .
4008	Use SSL_certificate_file .
4009	Use this method to use a SSL certificate .
4010	Add an extra chain to the context .
4011	Use private keyfile .
4012	Use this method to use a private key .
4013	Load a client certificate .
4014	Sets the verification depth .
4015	Load a temporary dh file .
4016	Set cipher list .
4017	Set client CA certificate list .
4018	Add a client CA certificate .
4019	Set the callback for the TLS server .
4020	Sets whether or not the TLS extension should be used .
4021	Set the next NPN select callback .
4022	Set the alpn protocols .
4023	Set the ALPN select callback .
4024	Set OCSP callback .
4025	Set OCSP server callback .
4026	Set an OCSP client callback .
4027	Set the SSL context .
4028	Returns the server s server name .
4029	Set the TLS host name .
4030	Read data from the socket .
4031	Read bytes from the socket .
4032	Read bytes from the socket .
4033	Tries to renegotiate the connection .
4034	Shutdown the SSL socket .
4035	Returns a list of ciphers .
4036	Returns a list of certificate names .
4037	Set the shutdown state .
4038	Generate a random random string .
4039	Generate a random random string .
4040	Get the master key .
4041	Export a key - value pair .
4042	Gets a session .
4043	Get the current cipher name .
4044	Get the current cipher bits .
4045	Get the current cipher version .
4046	Get the protocol version .
4047	Get the next protocol negotiated by the SSL protocol .
4048	Set the alpn protocols .
4049	Gets the TLS Negotiated value for this SSL certificate .
4050	Create a new memory buffer .
4051	Convert binary data to a string .
4052	Set the Asn1 timestamp .
4053	Convert a timestamp to a string .
4054	Get a curve by name .
4055	Dump a public key .
4056	Load a public key .
4057	Sign the data using the given digest .
4058	Verify a certificate .
4059	Dump a CRL .
4060	Convert this key to a cryptography key .
4061	Generate an RSA key .
4062	Check if the key is valid .
4063	Loads the elliptic curve curves .
4064	Returns a list of elliptic curves .
4065	Convert curve to ECKey .
4066	Derive the name of the certificate .
4067	Return a list of all the components of this name .
4068	Return the short name of this extension .
4069	Get the data of the extension .
4070	Return the certificate signing request .
4071	Set the public key .
4072	Get the public key for this request .
4073	Returns the name of the certificate .
4074	Add extensions to the request .
4075	Returns a list of X509Extensions .
4076	Verify that the request is valid .
4077	Return a cryptography certificate .
4078	Set the certificate .
4079	Get the public key .
4080	Set the public key .
4081	Sign a PKey .
4082	Gets the signature algorithm .
4083	Returns the digest of the given name .
4084	Set the serial number .
4085	Returns the serialized serial number .
4086	Adjust the amount of time after the given amount .
4087	Adjust the amount of time before the certificate .
4088	Determine if the object has expired .
4089	Returns the name of the issuer .
4090	Set the issuer name .
4091	Returns the name of the certificate .
4092	Set the subject name .
4093	Add an extension to the certificate .
4094	Get an X509 extension .
4095	Add a certificate to the store .
4096	Add a crl .
4097	Sets the validity of the certificate .
4098	Initialize the certificate .
4099	Return an exception from the context .
4100	Verify certificate .
4101	Sets the serialized serial number .
4102	Gets the serialized serial number .
4103	Set the reason .
4104	Return the reason of the certificate .
4105	Set the revocation date .
4106	Return the certificate revocation list .
4107	Return a list of revoked revocation codes .
4108	Get the issuer of the certificate .
4109	Sign a certificate .
4110	Export a certificate .
4111	Get the name of the type .
4112	Sets the certificate certificates .
4113	Export the certificate .
4114	Sign a PKey .
4115	Verify the given key .
4116	Return a string representation of this SPKI .
4117	Gets the public key .
4118	Set the public key .
4119	Create an exception from an error queue .
4120	Convert text to bytes .
4121	Create a helper function for printing tokens .
4122	Get service metadata .
4123	Generate a list of issues .
4124	Get annotations for a card .
4125	Get a list of boards
4126	Get list of lists
4127	Get a list of cards
4128	Get comments for a card .
4129	Returns the URL for the given path .
4130	Get a list of results from a URL .
4131	Convert a link to a dict .
4132	Get a list of issues
4133	Get a list of pulls for a given tag .
4134	Aggregate remote issues .
4135	Return the value of the given key or default if not found .
4136	Returns a dictionary of template templates .
4137	Validate the configuration .
4138	Determine if the given issue is included .
4139	Create a table from a grid .
4140	Execute the given command .
4141	Get an integer value from the config file .
4142	Pull issues from a project .
4143	Get data from url
4144	Get a collection of values from a URL .
4145	Find the local UUID for a given issue .
4146	Merge the fields of a field .
4147	Build the uuas config for the given targets .
4148	Parse a sprintf string .
4149	Get OAuth2 credentials .
4150	Perform a multi - group of scores .
4151	Calculate the pvalues for a set of genes .
4152	Calculate the fdrc correction of pvals .
4153	Compute the zscore of the data2d array .
4154	Plot a heatmap .
4155	Adjust the spine of the axes .
4156	Prepare command line arguments .
4157	Add prerank tool .
4158	Add the plot to the plot .
4159	Add enrichmentr .
4160	Calculate enrichment score .
4161	Generate a ranking metric for the given exprs .
4162	Calculate the ranking of the data .
4163	Calculate the psea pval . pval .
4164	Compute the enrichment of enrichment scores .
4165	Return a list of Mart objects
4166	Get a list of datasets
4167	Get the attributes of a dataset .
4168	Get filters for a dataset .
4169	Perform a query .
4170	%prog gsea
4171	Runs a single sample of samples .
4172	Run prerank .
4173	Perform replots .
4174	Set the number of processes .
4175	Load genes from gmt_list .
4176	Returns a list of library libraries .
4177	Downloads the enrichment of the given library .
4178	Calculate heatmatrices
4179	Saves the results in a zip file .
4180	Load the gene expression .
4181	Run GSEA algorithm .
4182	Run GSEA .
4183	Runs each sample in each sample
4184	Run enrichment score .
4185	Saves the raw enrichment scores .
4186	Parse GSEA file .
4187	Run enrichr .
4188	Parse a set of gene sets .
4189	Parse the gene list .
4190	Send a list of genes
4191	Check the gene list of genes .
4192	Get a set of background genes from the database .
4193	Run enrichment .
4194	Create a cube .
4195	Generate an icosphere .
4196	Create a torus filter .
4197	Generate a plane of a grid .
4198	Create a cube .
4199	Get color values
4200	Check a list of terms .
4201	Make a list .
4202	Write a filter .
4203	Add a loop to the loop .
4204	Merge two vertices .
4205	Close holes .
4206	Split the vertices into a single vertex .
4207	Filters a snapshot of a snapshot .
4208	Translate a script .
4209	Rotate the given angle .
4210	Apply a scaling function to a scalar .
4211	Calculate a function for a cylinder function .
4212	Wrapper around a cylinder .
4213	Bend a script .
4214	Reverse a curve .
4215	Convert a texture to a texture .
4216	Convert a mesh to a mesh .
4217	Generate uniform mesh .
4218	Convert a script to a screen .
4219	Generate voronoi .
4220	Select all faces .
4221	Filter the vertices .
4222	Add a function to the filter function .
4223	Add a function to a vertex .
4224	Create a cylindrical vertex .
4225	Run spherical vertices .
4226	Convert a filter to a filter .
4227	Rename the current mesh .
4228	Change the current layer .
4229	Create a copy of the current layer .
4230	Delete the lower layer .
4231	Handles an error .
4232	Create a new filter script .
4233	Add a layer .
4234	Delete a layer .
4235	Save the filters to a file .
4236	Runs the script on the model .
4237	Runs the polygon .
4238	Generate Hausdorff distance .
4239	Create a poisson disk .
4240	Generate mesh element .
4241	Generate a clustered vertex .
4242	Generate a flat plane .
4243	Generate a per - triangle per - triangle .
4244	Generate a Voronoi Atlas .
4245	Compute the topology measurements .
4246	Parse the topology .
4247	Parse Hausdorff distance .
4248	Generate a function for a function .
4249	Generate voronoi .
4250	Generate a cyclic strain .
4251	Convert x y to x .
4252	Calculate the cross - cross - cross - cross - cross - plane cross - cross - plane .
4253	Multiply a scalar vector .
4254	Add a new vertex attribute .
4255	Flip all faces in the given script .
4256	Generate a set of points for a given script .
4257	Generate a taubin .
4258	Filters the depth of a simulation .
4259	Sort polylines in a file .
4260	Measure topology .
4261	Measure all polygons .
4262	Measure dimensions of a dimension .
4263	Lowercase filename .
4264	Patch the request class .
4265	Get the config for the given set .
4266	Configure uploads .
4267	Returns the current upload configuration .
4268	Returns the URL for the uploaded file .
4269	Returns the path to the destination file .
4270	Check if an extension is allowed .
4271	Resolve a file name .
4272	Get the version info from a file .
4273	Remove duplicates from objects .
4274	Returns the difference between two objects .
4275	Formats a list of objects .
4276	Trace memory usage .
4277	Return a list of all code events in the list .
4278	Return the overhead of this object .
4279	Compute the memory overhead .
4280	Return the package profiler .
4281	Return the profiled module .
4282	Return the result of the function .
4283	Run the analysis .
4284	Return a set of module names .
4285	Run a function in a separate process .
4286	Get the run object type .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function .
4290	Replace the command line arguments .
4291	Sample a signal .
4292	Insert a stack into the stack .
4293	Fill the number of samples in a node .
4294	Format a tree .
4295	Generate the call tree .
4296	Return a summary of the package .
4297	Return the profile for the run .
4298	Profiler function .
4299	Transform profiler stats .
4300	Return a dictionary of the package s package .
4301	Return a dictionary of the module .
4302	Perform a profile .
4303	Initialize the database .
4304	Show guest book .
4305	Add a new entry
4306	Run profiler handler .
4307	Start HTTP server .
4308	Handle the root file .
4309	Handle the actual content .
4310	Handle GET request .
4311	Handle POST request .
4312	Send an HTTP response .
4313	Check if a module path is a standard library .
4314	Records a new line .
4315	Return a list of lines that are not in stdlib .
4316	Fill the heatmap .
4317	Return a list of lines with skip_map .
4318	Generate the profile for the profiler .
4319	Format the heatmap .
4320	Generate a profile module .
4321	Return a profiled profile .
4322	Run the profiler .
4323	Run a function and return the result .
4324	Predict the probability of a dataset .
4325	Predict the log probability of a block .
4326	Fit the model to the model .
4327	Compute the number of indices in the corpus .
4328	Sorts the vocabulary .
4329	Limits the features in the corpus .
4330	Fit the model .
4331	Transform the input matrix into a matrix .
4332	Convert this object to a Scikit .
4333	Fit the model to Spark .
4334	Perform Spark prediction .
4335	Fit the model to Spark .
4336	Fit the model to the model .
4337	Fit the model to the model .
4338	Compute the score of a given Z .
4339	Fit the estimator .
4340	Return the score of the estimator .
4341	Fit the model to Spark .
4342	Predict the Spark KML model .
4343	Predict classifier .
4344	Checks if the given RDD is valid .
4345	Compute the vocab .
4346	Compute the mean of the matrix .
4347	Calculate the fit for a given ZDD .
4348	Transform a ZDDD into a SparkSVD .
4349	Iterate over an iterator .
4350	Block a tuple of tuples .
4351	Create a BlockRDD from rdd .
4352	Transform an RDD into a RDD .
4353	Return the shape of the dataset .
4354	Convert to an array .
4355	Apply a function to the given function .
4356	Returns the bitmask for the given perm .
4357	Return True if path is root .
4358	Check configuration file .
4359	Read the config file .
4360	Run a command as a command .
4361	Execute a command .
4362	Execute a command on a ssh command .
4363	Validate the configuration .
4364	Get the headers .
4365	Get the body of the request .
4366	Returns the URL for the Home Assistant .
4367	Get the URL for the event .
4368	Convert a packet to a string .
4369	Print a packet .
4370	Discover devices .
4371	Execute the device .
4372	Send a confirmation message to the device .
4373	Handle push events .
4374	Execute the given device .
4375	Run the scan .
4376	Convert a transaction to a transaction .
4377	Find the ledger file .
4378	Checks if a test is installed .
4379	Get the long description of a file .
4380	Create a PrecalculatedTextMeasurer from a JSON file .
4381	Return a PrecalculatedTextMeasurer instance .
4382	Generate a badge .
4383	Generate a generator that yields all supported characters .
4384	Generate Unicode characters from a list of characters .
4385	Calculate a mapping of characters to the given length .
4386	Write a JSON file to a JSON file .
4387	Convenience function for convolution .
4388	Calculate Gaussian kernel .
4389	Convert image to grayscale .
4390	%prog pyssim
4391	Compute the SIM value of the image .
4392	Compute the SSIM value between two images .
4393	Destroy this object .
4394	Set the version of the current code .
4395	Get the status of this node .
4396	Print the status of the device .
4397	Convert a connection to a node
4398	Try to bind to the server .
4399	Handle a new connection .
4400	Handle incoming message received from the server .
4401	Handles a failure callback .
4402	Checks if the given node is connected .
4403	Connect to a node .
4404	Called when the connection is connected .
4405	Called when a message is received .
4406	Handle disconnected connections .
4407	Add a node to this node .
4408	Drop a node .
4409	Send a message to the node .
4410	Destroy the connection .
4411	Put item into queue .
4412	Put item into heap .
4413	Return the next item .
4414	Acquire a lock .
4415	Check if a lock is acquired .
4416	Release a lock .
4417	Decorator to check if a function is valid
4418	Determine if a token is required .
4419	Set a list of hosts .
4420	Create an Elasticsearch index .
4421	Migrate all indexes in the database .
4422	Remove metadata from report
4423	Saves the aggregated report to Kafka .
4424	Extract XML from a file .
4425	Parse an aggregate report file .
4426	Convert a report to a CSV file .
4427	Parse a report file .
4428	Get IMAP capabilities .
4429	Save the results to the output directory .
4430	Creates a zip file for the report .
4431	Email the results of a report .
4432	Save the report to Splunk .
4433	Saves the report to Splunk .
4434	Decode base64 encoded data .
4435	Get the base domain for the given domain .
4436	Get the reverse address of a given IP address .
4437	Convert human readable timestamp to datetime .
4438	Downloads the GeoIP address for the given IP address .
4439	Get information about an IP address .
4440	Convert a message to an Outlook message .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain all subscriptions .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribes a subscription .
4449	Flush the connection .
4450	Select next server .
4451	Process an error message .
4452	Process an error .
4453	Generate connection command .
4454	Process a ping .
4455	Process a message .
4456	Process a list of servers .
4457	Process the connection .
4458	Flush the buffer .
4459	Reads the connection loop .
4460	Perform coactivation .
4461	Decode images .
4462	Load features from a file .
4463	Load features from images .
4464	Calculate the correlation correlation coefficient .
4465	Return the dot product of the image .
4466	Return a list of features selected by features .
4467	Get a list of studies for a given dataset .
4468	Calculate the index of a dataset .
4469	Classifier for classification .
4470	Classifier for classification .
4471	Compute the model .
4472	Set the class weight of the classifier .
4473	Calculate the cross - validation of the model .
4474	Fit a dataset .
4475	Compute the average of regions within a dataset .
4476	Get random voxels
4477	Get the top words of the model .
4478	Calculate the pearson correlation coefficient .
4479	Calculate the fdr of p .
4480	Load activation data from a file .
4481	Create the image table .
4482	Returns a list of IDs that match the given features .
4483	Add features .
4484	Returns a list of feature names .
4485	Get the number of feature counts .
4486	Load a dataset from a file .
4487	Save the model to disk .
4488	Get the data of the image .
4489	Get feature data .
4490	Return the names of the names of the given features .
4491	Returns a list of indices for the given features .
4492	Search for features .
4493	Get the IDs of the given expression .
4494	Convert sparse data to csr .
4495	Decorator for deprecated functions .
4496	Transform a matrix to a matrix .
4497	Convert xyz to a matrix .
4498	Apply transformation to foci .
4499	Mask an image .
4500	Returns the mask of the layer .
4501	Load image images .
4502	Save data to a file .
4503	Set logging level .
4504	Expand address .
4505	Convert a string to a list of tokens .
4506	Parse address .
4507	Generate a list of hashes for a given labels .
4508	Convert a dict to an object .
4509	Get the price of a ticker
4510	Returns a pandas DataFrame for the given tickers .
4511	Returns a list of bulk news for a given file .
4512	Perform a request .
4513	Get the bearer token .
4514	Perform a request .
4515	Get album tracks
4516	Get artist .
4517	Get artists albums
4518	Get a list of artists for the artist .
4519	Get artists related artists .
4520	Get artists .
4521	Get a specific category .
4522	Get a list of playlists .
4523	Get a list of categories .
4524	Get featured playlists .
4525	Get new releases .
4526	Get recommendations .
4527	Get a list of artists in a list of artists .
4528	Get a list of Albums .
4529	Get all album albums .
4530	Get the total album albums .
4531	List artists related to this artist .
4532	Get the currently playing track .
4533	Get the current player .
4534	Get all available devices .
4535	Get a list of recentlyplayed tracks .
4536	Replace tracks in a playlist .
4537	Reorder a playlist .
4538	Create a new playlist .
4539	Get a list of playlists .
4540	Get a list of tracks .
4541	Get all tracks .
4542	Return OAuth2 URL .
4543	Get an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user .
4547	Get a list of albums .
4548	Get artists .
4549	Perform a search query .
4550	Convert string to ID .
4551	Asserts that the given attribute has an attribute .
4552	Create a new instance from a client .
4553	Generate OAuth2 URL .
4554	Get the attributes of this request .
4555	Return the parameters as a string .
4556	Build a list of Playlist tracks .
4557	Returns a list of playlist tracks .
4558	Resume playback .
4559	Transfer a player to the user .
4560	Retrieves an object from the given href .
4561	Retrieves the current request .
4562	Convert data to short_month
4563	Update the code URLs .
4564	Check if the current version is greater than the current version .
4565	Determine if the current version is a version .
4566	Checks if the current version of the current version .
4567	Saves the configuration to the backup file .
4568	Restore the backup .
4569	Determine if the given line is ignored .
4570	Handle a list of options .
4571	Extracts the base URL from an element .
4572	Formats a list of strings .
4573	Access the request .
4574	Returns the HTTP code for this API .
4575	Check if domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if ipv4 is valid
4578	Check if ipv4 is valid
4579	Check if url is valid
4580	Load the configuration .
4581	Make sure the user is safe
4582	Check if a URL is downloaded .
4583	Checks if the entry is valid .
4584	Print the header .
4585	Determine if the file should be run .
4586	Check if a domain is valid .
4587	Checks if the URL is a valid URL .
4588	Print the log out of the log
4589	Formats an extracted domain .
4590	Extract domains from a file .
4591	Return a list of file names .
4592	Return a list of file URLs .
4593	Switch to a specific variable
4594	Retrieves the expiration date .
4595	Generate a file
4596	Get the structure .
4597	Create a directory .
4598	Deletes all the entries in the tree .
4599	Set path to config file
4600	Load the configuration file .
4601	Install the production config .
4602	Downloads the network configuration .
4603	Install the psl configuration .
4604	Install directory structure .
4605	Merge config values from upstream .
4606	Load the configuration file .
4607	Split a version string into a tuple .
4608	Checks if two versions are newer than upstream .
4609	Check if the project is cloned .
4610	Handle non - existing index .
4611	Returns the directory path to the host file .
4612	Print the file to the file .
4613	Print status file
4614	Determine if the domain is not present .
4615	Process a list of public extensions .
4616	Load data from the database .
4617	Convert a regular expression to a regular expression .
4618	Convert a URL to a hierarchical string .
4619	Load the database .
4620	Get the referrer for the given extension .
4621	Extracts the domains from the internet .
4622	Update the database .
4623	Mine the request to mine .
4624	Retrieve information from a file .
4625	This method is used to restore the miner .
4626	Add one or more files to the list .
4627	Removes the file from the blockchain .
4628	Return a list of mined files
4629	Process the blockchain .
4630	Get the contents of a file .
4631	Write content to file
4632	Write the user to the log
4633	Write expiration date .
4634	Called when a file is not found .
4635	Write the header to the file .
4636	Return a string representation of the header .
4637	Return the header as a string .
4638	Creates a new data structure .
4639	Get size from header .
4640	Colorify data
4641	Print data to JSON .
4642	Print the data to the output .
4643	Saves the log file .
4644	Calculate the datetime data .
4645	Format the execution time .
4646	Return a list of files to delete .
4647	Return a list of databases to be deleted .
4648	Delete all files
4649	Hash the file .
4650	Return the hash of the data .
4651	Returns the hash of the hash .
4652	Execute the command .
4653	Remove a key from the dictionary .
4654	Rename key to dictionary .
4655	Merge two dictionaries .
4656	Write the dictionary to a JSON file .
4657	Convert the dictionary to a yaml file .
4658	Return the path of the path .
4659	Write data to file .
4660	Read the contents of the file .
4661	Return a sorted list of strings .
4662	Merge two lists .
4663	Return a list of strings that are not matching .
4664	Match the regular expression .
4665	Replace all occurrences in the string .
4666	Count the number of tests
4667	Calculate the counter percentage
4668	Logs the percentage of the report .
4669	Check if url is valid .
4670	Check if domain is valid .
4671	Check if the element is a subdomain .
4672	Checks if a test is valid .
4673	Replace the historical data from the database .
4674	Retrieve data from the database .
4675	Backup the inactive database .
4676	Return the timestamp of the database .
4677	Return the contents of the file .
4678	Check if the database is present .
4679	Retrieve information about the user .
4680	Save the user to the database .
4681	Check if file is in database
4682	Check if the user has expired .
4683	Get the expiration date .
4684	Add the user to the database .
4685	Set travis permissions .
4686	Run Travis .
4687	Searches for the namespace .
4688	Perform a WHOIS request .
4689	Return the URL of the URL .
4690	Get the referer of the domain .
4691	Return the current object .
4692	Return a list of standard paths .
4693	Return a generator of standard package names .
4694	Return a generator that yields a line number of lines .
4695	Return the module name of the import module .
4696	Return a generator that yields the line number of lines that are imported .
4697	Return a generator that yields the name of the imported module .
4698	Return a generator that yields a line number of lines .
4699	Generate duplicate line numbers .
4700	Creates a dictionary with key - value pairs .
4701	Check source code .
4702	Extract package name from line .
4703	Check if a line is multiline .
4704	Check if a line is multiline .
4705	Filters a line from a string .
4706	Split a line into a string .
4707	Filter source code .
4708	Get a dictionary of messages by line .
4709	Filter a line from a string .
4710	Remove duplicate key numbers .
4711	Check if a dictionary contains a key .
4712	Check if value is a literal or not .
4713	Return a generator that yields tokens from a source file .
4714	Return a generator that yields lines from a source file .
4715	Get indentation of a line .
4716	Get the end of a line .
4717	Fix the source code .
4718	Split comma separated comma separated comma separated comma separated strings .
4719	Check if a file is a Python file .
4720	Check if the given filename is excluded .
4721	Find all files in a directory .
4722	Main entry point .
4723	Read the lease response .
4724	Write the request to the output stream .
4725	Write the request to the output stream .
4726	Reads the cancel response from the input stream .
4727	Create a new name .
4728	Reads the digest .
4729	Write the digest .
4730	Create a new digest .
4731	Reads the ApplicationSpecificInformation object from the input stream .
4732	Write the application information .
4733	Create a new ApplicationSpecificInformation object .
4734	Reads the DerivationParameters from the input stream .
4735	Write the DerivationParameters to the output stream .
4736	Reads the GetRequest payload .
4737	Write this request to the output stream .
4738	Reads the GetResponsePayload payload .
4739	Write the request to the output stream .
4740	Reads the signature of the signature .
4741	Write this object to the output stream .
4742	Reads the signature of the signature .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Get attributes from managed object .
4747	Get the attribute name from the managed object .
4748	Set attributes on the managed object .
4749	Set attribute value .
4750	Check if a policy is allowed .
4751	Write the payload to the output stream .
4752	Create a new Secret object .
4753	Set a setting .
4754	Load settings from a file .
4755	Process a bind parameter .
4756	Processes the result value .
4757	Read a long integer .
4758	Write the long integer to the stream .
4759	Validate the value .
4760	Reads a BigInteger from a stream .
4761	Write the BigInteger to the stream .
4762	Validate the value .
4763	Validate the value .
4764	Read a boolean value from the buffer .
4765	Write the boolean value to the buffer .
4766	Write the boolean value to the stream .
4767	Validate the value .
4768	Reads the interval from the stream .
4769	Validate the interval .
4770	Returns a dictionary containing the encryption data .
4771	Set the key wrapping data .
4772	Validate the key .
4773	Validate the secret data .
4774	Validate the value .
4775	Convert attribute name to tag name .
4776	Convert attribute tag to name .
4777	Get bitmask from enumerations .
4778	Get a list of enumerations from an enumeration .
4779	Check if the given enumeration is a bitmask .
4780	Reads a KeyPairRequest payload .
4781	Write this template to the output buffer .
4782	Reads the KeyPairResponse payload .
4783	Write this key to the output buffer .
4784	Reads attributes from the input buffer .
4785	Write the request to the output buffer .
4786	Reads the GetAttributeListResponse payload .
4787	Write this attribute to the output buffer .
4788	Return a list of files in a directory .
4789	Scan the policy files .
4790	Runs the monitor .
4791	Get the certificate from a connection .
4792	Get the extended key usage of the certificate .
4793	Get a list of common names from a certificate .
4794	Get client identity from certificate .
4795	Reads a CreateRequest payload .
4796	Write this object to the output buffer .
4797	Reads the CreateResponse payload .
4798	Write the object to the output buffer .
4799	Convert an object to core key
4800	Read the EncryptResponse payload .
4801	Reads the DeriveKeyRequest payload .
4802	Write the DeriveKey to the output buffer .
4803	Check if the given attribute is supported .
4804	Check if the given attribute is deprecated .
4805	Checks if the given attribute is applicable to the given object .
4806	Determine if the given attribute is multiple instances .
4807	Returns the value of the given value .
4808	Reads the check response from the input stream .
4809	Write the check response to the output stream .
4810	Read the attribute reference from the input buffer .
4811	Write the attribute reference to the output buffer .
4812	Read attributes from a stream .
4813	Write the attributes to the output stream .
4814	Reads the nonce .
4815	Write the nonce to the output stream .
4816	Reads the credentials from the input stream .
4817	Write the credentials to the output stream .
4818	Reads the device credential .
4819	Write the device to the output stream .
4820	Reads the credentials from the input stream .
4821	Writes the credentials to the output stream .
4822	Reads the MAC signature .
4823	Write the MAC signature .
4824	Reads a KeyWrapper object from the input stream .
4825	Write this message to the output stream .
4826	Reads the KeyWrapperSpec from the input stream .
4827	Write this message to the output stream .
4828	Read the extension information .
4829	Write the extension information .
4830	Create an extension object .
4831	Read the revocation reason .
4832	Write this revocation reason .
4833	Validate revocation code .
4834	Read the ObjectDefaults object .
4835	Write the objectDefaults to the output buffer .
4836	Reads the DefaultsInformation object .
4837	Write the DefaultsInformation object .
4838	Read the RNGParameters object .
4839	Write the RNGParameters object to the output buffer .
4840	Reads the profile information .
4841	Write the profile information .
4842	Write the validation information .
4843	Read the capabilities information from the input buffer .
4844	Write the capabilities to the output buffer .
4845	Stop connections .
4846	Start the server .
4847	Read the LocateRequest payload .
4848	Write this object to the output buffer .
4849	Reads the LocateResponse payload .
4850	Write the LocateResponse payload to the output buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a HMAC authentication code .
4854	Encrypts the given plaintext using the AES algorithm .
4855	Encrypts a symmetric encryption key .
4856	Encrypts asymmetric encryption algorithm .
4857	Decrypt asymmetric ciphertext .
4858	Create RSA key pair .
4859	Derive key derivation .
4860	Create RSA private key .
4861	Verify signature .
4862	Reads the signature from the input stream .
4863	Write the payload to the output stream .
4864	Reads the GetUsageAllocationRequest payload .
4865	Convert a protocol version to a KMIP version .
4866	Read the protocol version .
4867	Write the protocol version .
4868	Reads the credentials from the input stream .
4869	Write the credentials to the output stream .
4870	Reads the PollRequest payload .
4871	Reads the certificate .
4872	Write the certificate .
4873	Authenticate to SLUGS .
4874	Reads the ArchiveResponse payload from the input stream .
4875	Write this ArchiveResponse to the output stream .
4876	Start the connection loop .
4877	Reads the RekeyResponse payload .
4878	Check if the profile is supported .
4879	Derive a key .
4880	Get attributes for a given UUID .
4881	Get attribute list .
4882	Perform a query .
4883	Sign the given data .
4884	Open a client connection .
4885	Close the client .
4886	Create a new encryption key .
4887	Create a new keypair .
4888	Register a managed object .
4889	Receives a unique identifier .
4890	Derive a key from an object type .
4891	Locate all items in this object .
4892	Checks if the user is valid .
4893	Gets a secret .
4894	Gets the attributes of the device .
4895	Activate a device .
4896	Revoke a revocation .
4897	Macrypt data .
4898	Builds a CryptographicParameters object .
4899	Builds the encryption key information .
4900	Build MAC signature key .
4901	Builds a key wrapping the given value .
4902	Build common attributes .
4903	Build the name attribute .
4904	Reads the query payload from the input buffer .
4905	Write the query to the output buffer .
4906	Write this object to the output buffer .
4907	Reads the GetAttributesResponse payload .
4908	Write the request to the output buffer .
4909	Get a single entry point .
4910	Get a dictionary of all the named ephemeral entries .
4911	Get all entries in the given path .
4912	Load object from object .
4913	Create an entry point from a string .
4914	Run live reload .
4915	Generate project files .
4916	Generate a controller .
4917	Generate action .
4918	Generate a form .
4919	Generate model .
4920	Generate macro .
4921	Create a new directory .
4922	Rewrite src_file to dst_file .
4923	Convert a value to a string .
4924	Checks if a URL is valid .
4925	Encodes the given value into a string .
4926	Decode a JSON - encoded string .
4927	Decorator to wrap a function .
4928	Returns the absolute URL for the given endpoint .
4929	Load the environment .
4930	Sends a user to the session .
4931	Get current user .
4932	Create a Flask app .
4933	Register the Jinja Jinja .
4934	Register routes .
4935	Register error handler .
4936	Register the hooks for the application .
4937	Write dataframe to a CSV file .
4938	Read dataframe from a CSV file .
4939	Serializes dataframe into a DataFrame .
4940	Deserialize a DataFrame .
4941	Update the dataframe .
4942	Updates this instance s data .
4943	Returns the URL of the contents of this file .
4944	Adds a dataframe to the database .
4945	Creates a new record from raw data .
4946	Open an intermediate dataset .
4947	Read the contents of this dataset .
4948	Read the contents of this dataset .
4949	Convert the DataFrame to a DataFrame .
4950	Get an intermediate dataset .
4951	Get all experiments for a workspace .
4952	Get all datasets for a workspace .
4953	Get a dataset .
4954	Publish a function .
4955	Publish a service .
4956	Decorator for annotations .
4957	Decorator for a function .
4958	Attach a function to a function .
4959	Find a set of global variables .
4960	Return a copy of this Pen .
4961	Lookup a color .
4962	Draw a rectangle .
4963	Calculate the distance between two points .
4964	Calculate the cbstein b .
4965	Build a list of choices from the tree .
4966	Get options for command_options .
4967	Register a function to be called when a function is called .
4968	Compose a dynamic sitet tree .
4969	Initialize the cache .
4970	Clears the site .
4971	Get an entry from the cache .
4972	Update a value in the cache .
4973	Set an entry in the cache .
4974	Initialize the page .
4975	Resolve the tree alias for the given language .
4976	Determine if current app is admin .
4977	Calculate the depth of a tree .
4978	Return the current item in the tree .
4979	Returns the URL for the given sitetree .
4980	Initialize the site .
4981	Get the attribute value for the current page .
4982	Get the ancestor of the current item .
4983	Show menu items .
4984	Checks if the user has access to the given item .
4985	Generate breadcrumbs .
4986	Return a list of sitet items .
4987	Render a list of children items .
4988	Returns the children of the given tree .
4989	Updates the tree s children .
4990	Filter items .
4991	Returns the ancestor of the given item .
4992	Add a tree to the tree .
4993	Resolve a variable name .
4994	Parse sitetree tree .
4995	Parse sitetree children .
4996	Create sitet breadcrumbs node .
4997	Parse sitetree menu .
4998	Render a template .
4999	Parse a tag .
5000	Get the URL for a model .
5001	Reregisters the tree admin .
5002	Handles redirects .
5003	Redirect to a new item .
5004	Add a new item to the list .
5005	Respond to a change .
5006	Returns the form for the given object .
5007	Get the tree for the given item .
5008	Move the item to the tree .
5009	Save the item to the tree .
5010	Returns a list of urls .
5011	Dump a view to a file .
5012	Create a new tree .
5013	Create a new item .
5014	Try to import a site site .
5015	Get the model class .
5016	Create a new Config instance from a mapping .
5017	Create a Config from a Python file .
5018	Create a Config from a TOML file .
5019	Create a Config object from an object .
5020	Create a ZipkinAttrs object for a span .
5021	Create headers for new span .
5022	Returns the current context for the current context .
5023	Start tracing .
5024	Stop tracing .
5025	Update binary annotations .
5026	Add a SAMB binary annotation .
5027	Set the span name .
5028	Create an endpoint .
5029	Return a new Endpoint with the given name .
5030	Build a v1 span .
5031	Encode a list of spans .
5032	Create a protobuf message from a span .
5033	Convert hexadecimal to bytes .
5034	Get the protocol type for the given kind .
5035	Convert an endpoint to a zipkin endpoint .
5036	Convert annotations to zipkin annotations .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Return a copy of an endpoint .
5041	Create a list of annotations for a given host .
5042	Return a list of binary annotations .
5043	Create a span .
5044	Convert a thrift span to bytes .
5045	Encode a list of Thrift objects .
5046	Determine the version of the message .
5047	Convert a list of spans .
5048	Push a zipkin attribute .
5049	Encode a span .
5050	Create a json_endpoint object
5051	Encode a span .
5052	Decode a slice of spans .
5053	Convert thrift_endpoint to a Endpoint .
5054	Decode thrift annotations .
5055	Convert thrift_binary_binary_annotation_annotation_annotation_annotation .
5056	Decode a Thrift Span .
5057	Convert a trace_id to a string .
5058	Convert unsigned integer to lower hex
5059	Write a hexadecimal value .
5060	Called when a tag has been processed .
5061	Set the transaction code .
5062	Set the mp_id of a tag .
5063	Set tnr tags
5064	Parse the data from a string .
5065	Parses a string into transactions .
5066	Join a string into a string .
5067	Parse response from response .
5068	Wait for a rate limit .
5069	Perform a request .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read data from the stream .
5073	Write a message to the stream .
5074	Close the file .
5075	Decode a string .
5076	Encode a term .
5077	Add a new IP address to the list of addresses .
5078	Send pending messages .
5079	Set remote serviceHello callback
5080	Stops the discovery server .
5081	Clear all local services .
5082	Search for services .
5083	Create a SOAP message .
5084	Discover system systems .
5085	Gets the tag manager .
5086	Get all child relations .
5087	Returns a list of child m2m_m2m_m2m_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M_M2M2M_M2M_M2M_M2M_M2M2M_M2M_M2M2M2M2M2M2M_M2M_M2M_M
5088	Saves the model .
5089	Create a model from a serializable data .
5090	Validate that all fields are unique .
5091	Return True if the form has changed .
5092	Return a new address with the valid checksum .
5093	Generate the checksum .
5094	Parse arguments .
5095	Creates an argument parser .
5096	Prompt a random seed .
5097	Validate signatures .
5098	Get the key at the given index .
5099	Get the key for the given address .
5100	Create a new KeyIterator .
5101	Creates a Kerl .
5102	Absorb a trits into the state .
5103	Removes the trits of the given trits .
5104	Transform the state of the state .
5105	Get a list of digests .
5106	Get private keys .
5107	Prepare multisig transfer .
5108	Add two Trits to the right .
5109	Return a list of trits from an integer .
5110	Add two Trits .
5111	Computes the sum of two integers .
5112	Print a seed .
5113	Find all transactions .
5114	Get a list of available inputs .
5115	Get new addresses .
5116	Get a list of Transfers .
5117	Promote a transaction .
5118	Replay a transaction .
5119	Send a transfer command .
5120	Send a trytes command .
5121	Resolve a URI .
5122	Send a request to the server .
5123	Log a message .
5124	Send a HTTP request to the server .
5125	Validate the response .
5126	Seed a response .
5127	Add a digest .
5128	Get the address of the address .
5129	Generate a generator for the address .
5130	Create an address from a digest .
5131	Generate a random address .
5132	Find transactions objects .
5133	Iterate over all available addresses .
5134	Get all bundles from a transaction hash .
5135	Checks if the given encoding is valid .
5136	Get codec info .
5137	Encode a byte array .
5138	Decode bytes into bytes .
5139	Find addresses in the database .
5140	Add a command to the router .
5141	Creates a transaction from a string .
5142	Return a JSON representation of this object .
5143	Returns the validity of the signature .
5144	Set the state of the transaction .
5145	Return a list of all the messages in the transaction .
5146	Return a list of tuples .
5147	Return a list of all the transactions in this transaction .
5148	Find commands from a package .
5149	Execute the request .
5150	Apply filter .
5151	Get the URL for a job .
5152	Return all errors .
5153	Return True if the validation is valid .
5154	Creates a validationator for the bundle .
5155	Returns a list of errors that match the given groups .
5156	Return the error message for a group .
5157	Traverse a transaction .
5158	Start an API client .
5159	Generate a random seed .
5160	Get the digest of the hash .
5161	Sign the input bundle .
5162	Print a pretty representation of this object .
5163	Absorb a trits .
5164	Removes the given trits .
5165	Create a new exception with the given context .
5166	Return the security level .
5167	Increment the legacy tag .
5168	Return the current tag .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign inputs .
5172	Sign inputs to the bundle .
5173	Creates the inputs for the input address .
5174	Convert a value to a standard unit .
5175	Decompress a G1 z1 .
5176	Compute the prime_field_inv .
5177	Create a new instance from a JSON file .
5178	Find all words in a category .
5179	Find the synonym for the given word .
5180	Expand abbreviations from lexicon .
5181	Split the text into a list of descriptions .
5182	Return a list of categories .
5183	Generate a new color .
5184	Plot the component .
5185	Loads a built - in string .
5186	Create a TimeScale object from a name .
5187	Create a new Decorator from a list of components .
5188	Create a Decorator from an image .
5189	Create a CSV from a CSV file .
5190	Convert the table to a CSV file .
5191	Returns the maximum width of the list .
5192	Return a Decor for a given component .
5193	Get the value of a decorator .
5194	Return the component of the given colour .
5195	Plot the data .
5196	Create an instance from a text string .
5197	Return the summary of this component .
5198	Renders a rock class .
5199	Process a row from text .
5200	Parse CANSTATATATAT format .
5201	Return True if all elements are equal .
5202	Return a sorted list of contiguous integers .
5203	Create a list of intervals from the topology .
5204	Clean up longitudinal data
5205	Create a list of intervals from a file .
5206	Build a list of intervals .
5207	Create a CSV from a CSV file .
5208	Create a list of intervals from an image .
5209	Create a new StriplLog instance from a log .
5210	Creates a class from a string .
5211	Create a new Interval from a file .
5212	Return a new Striplog .
5213	Create a CSV file .
5214	Return a string representation of the Lithology .
5215	Plot an axis .
5216	Get data for a given field .
5217	Extract data from a log .
5218	Find a single entry in the list .
5219	Find all overlaps in this collection .
5220	Find gaps in gaps .
5221	Removes lines from the stripe .
5222	Return a copy of the strip .
5223	Fill gaps with gaps .
5224	Return a new Striplog .
5225	Return a new Striplog .
5226	Merge overlapping segments .
5227	Calculate the histogram .
5228	Return a copy of this object .
5229	Returns a copy of the slice .
5230	Return a dictionary of test tests .
5231	Convert hex string to name
5232	Calculate log likelihood from an image .
5233	Get field name .
5234	Get all jobs
5235	Parses a job .
5236	Update a token .
5237	Get all allocations .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Update a deployment .
5241	Drain a node .
5242	Drain a node .
5243	Add an eligible node to the node .
5244	List files .
5245	Get a stream of data from a file .
5246	Stat a file .
5247	Join agent .
5248	Update a list of servers .
5249	Force leave a node .
5250	Get a list of nodes .
5251	Get a list of evaluations .
5252	Get namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Reverse a job .
5257	Starts a job .
5258	Deletes a job .
5259	Get the configuration of the draft .
5260	Delete a peer .
5261	Get all deployments .
5262	Get a random value for a given type .
5263	Get the mutator for the given object .
5264	Get a random string for a given object .
5265	Generate a random string .
5266	Convert a string to unicode
5267	Run the server .
5268	Stop the server .
5269	Render a custom HTML file
5270	Serve the response .
5271	Generate a fuzzing object .
5272	Spawns a new shell .
5273	Get output from stdin .
5274	Finish the process .
5275	Close the process .
5276	Starts the worker .
5277	Execute the given object .
5278	Decode a JSON string .
5279	Build a random string .
5280	Builds a string .
5281	Builds a quoted string .
5282	Generate a random value .
5283	Builds the algorithm .
5284	Build the definition for the given ref .
5285	Generate a random string .
5286	Shutdown the process .
5287	Run the process and monitor the process .
5288	Start the monitor .
5289	Returns a random float .
5290	Add a definition to a category .
5291	Add a category to a category .
5292	Generate a gramfuzz .
5293	Fuzzes the given element .
5294	Returns a fuzzed fuzzed string .
5295	Fuzzed data from JSON .
5296	Decorate a function decorator .
5297	Handle sigterm signal .
5298	Exit the command .
5299	Pause command .
5300	Resume the command .
5301	Stop command .
5302	Starts the command .
5303	Returns a list of all events .
5304	Set the moodle .
5305	Set the avatar .
5306	Get information about a given URL .
5307	Add a contact to the user
5308	Get a single user by id .
5309	Get a list of all available bots .
5310	Get a bot .
5311	Search for a user .
5312	Returns a list of all available requests .
5313	Create a new instance from a given skype .
5314	Merge this object with another .
5315	Merges an object into the cache .
5316	Perform a synchronous synchronously call .
5317	Read the token from the file .
5318	Write token to file
5319	Verify the given token .
5320	Refresh Skype token
5321	Get user ID
5322	Get the registration token
5323	Synchronously synchronizes the endpoints for the user .
5324	Check if a user is a valid user .
5325	Authentication token .
5326	Authenticate to Skype .
5327	Configure the messaging service .
5328	Ping a user .
5329	Get a list of chat chats .
5330	Get a single chat .
5331	Create a new thread .
5332	Return the id of the user .
5333	Get chat to id .
5334	Iterate over a function yielding items from fn .
5335	Convert text to unicode
5336	Determine the format of the given text .
5337	Parse a text file .
5338	Convert this Post to a dict .
5339	Load a YAML file .
5340	Export metadata to yaml .
5341	Export metadata to JSON .
5342	Return the result of the list .
5343	Return a list of items .
5344	Returns a list of sublists matching the given pattern .
5345	Convert the pattern to a new string .
5346	Return a list of arguments .
5347	Returns a list of list of all the arguments matching the given pattern .
5348	Convert strings to a dictionary .
5349	Return a string representation of a trie .
5350	Check if the given key is valid .
5351	Insert a string into the list .
5352	Return the partition of the given char .
5353	Return the subspans for the given type .
5354	Perform shrink update .
5355	Inserts the given index .
5356	Return the nesting level of this node .
5357	Return a copy of the span .
5358	Return the extended link of the extended link .
5359	Convert a list of spans to a dictionary .
5360	Return a string representation of this object .
5361	Returns a list of parameters .
5362	Return a list of parser functions .
5363	Return a list of templates .
5364	Returns a list of Wikipedia links .
5365	Return a list of comments .
5366	Return a list of external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	Returns a list of lists with the given pattern .
5370	Return a list of tag names .
5371	Iterate over all subspans .
5372	Return a list of all the ancestors of the given type .
5373	Get the parent of the given type .
5374	Return the mode of a list .
5375	Get an argument by name .
5376	Normalize the name of the template .
5377	Removes the first argument from the list of arguments .
5378	Remove duplicate arguments .
5379	Set a single argument .
5380	Get an argument by name .
5381	Checks if the argument is a valid argument .
5382	Removes an argument by name .
5383	Convert a string to a string
5384	Find an ellipsoid .
5385	Create a cron from a URL .
5386	Parse a GeoJSON file .
5387	Convert an EPSG code to a cron code object .
5388	Create a cron code from ESRI code .
5389	Create a cron code from a cron code .
5390	Create a crs object from a string .
5391	Write the record to the output stream .
5392	Read a raw VLR record from a stream .
5393	Parse a list of GeoTiff keys from vlrs .
5394	Parse a GeoTiffKey .
5395	Get the signedness of an extra dimension .
5396	Get the id of an extra dimension .
5397	Create a new instance from a point record .
5398	Copy fields from another record .
5399	Add zeros to the array .
5400	Returns a list of all the dimension names .
5401	Create a new zeros .
5402	Create a DataFrame from a stream .
5403	Create a point from a compressed buffer .
5404	Returns the x coordinate of the data .
5405	Determine the y axis of the dataset .
5406	Calculate the z dimension of the vector .
5407	Add extra dimensions .
5408	Write to a file .
5409	Write to a file .
5410	Write this object to a file .
5411	Builds a dictionary representation of a point format .
5412	Builds the unpacked dtypes for a point format .
5413	Convert a data type to a point format .
5414	Returns the minimum file version for the given point format .
5415	Check if a point format is compatible with the given version .
5416	Returns a list of vlrs matching the given type .
5417	Extract vlrs from the list of vlrs .
5418	Read VLR list from data stream .
5419	Check if the file format is a point format
5420	Return True if the las files are equal .
5421	Raises an exception if the file is not a file signature .
5422	Read header .
5423	Read VLRS .
5424	Read points from vlrs .
5425	Reads data from the stream .
5426	Read the internal waveform packet .
5427	Read evlrs from the stream .
5428	Check if the expected position is at the end of the stream .
5429	Open a las file .
5430	Read alas file .
5431	Create a LasData object from a header .
5432	Create a LasData object .
5433	Convert a source to a PackedPointRecord .
5434	Merge las files .
5435	Write the las file to the las file .
5436	Returns the date of this object .
5437	Set the Date object .
5438	Returns a list of the min and z .
5439	Sets the minimum value of the grid .
5440	Return a list of max values .
5441	Set the maximum values .
5442	Returns the scales .
5443	Returns the offset of this vector .
5444	Parses a file version .
5445	Convert old_version to new_version .
5446	Unpack a mask into an array .
5447	Pack a subfield into an array .
5448	Return a list of names that are lost .
5449	Return a dict of subfields .
5450	Returns the number of bytes in the memory .
5451	Checks if a waveform packet has a waveform packet .
5452	Main entry point .
5453	Calculate the CRC of a command .
5454	Print a hex string .
5455	Verify the response and strip it .
5456	Return a list of set bit numbers .
5457	Generate query string .
5458	Example of a demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Displays a disarm command .
5462	Clear the alarm .
5463	Set the output of the device .
5464	Keep the connection .
5465	Monitor the status of the monitor .
5466	Close the connection .
5467	Purges the database .
5468	Guess the type of a file .
5469	Get file id .
5470	Get a notebook from the database .
5471	Create a notebook model from the database .
5472	Get a directory .
5473	Convert a list of file records into a dictionary .
5474	Convert a database record into a dictionary .
5475	Create a file model from database .
5476	Save a notebook .
5477	Save a file to the database .
5478	Rename a file .
5479	Delete a file .
5480	Ensure the given user_id exists .
5481	Delete a user .
5482	Create a directory .
5483	Check if a table is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return all directories in a directory .
5488	Return a filter that matches the given api_path .
5489	Select a file for a user .
5490	Return a list of default fields .
5491	Retrieves a single file .
5492	Get a file .
5493	Get file ID .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file .
5497	Generate a list of files .
5498	Delete remote checkpoints .
5499	Generate a list of checkpoint checkpoints .
5500	Generate notebooks for the given table .
5501	Receives the content of a row .
5502	Re - encrypt the contents of a user .
5503	Derive a single Fernet key .
5504	Derive the fallback key from a list of passwords .
5505	Creates a new FernetEncryption instance .
5506	Return a memoized function .
5507	Get column name .
5508	Convert a row to a dict .
5509	Convert a row into a dict .
5510	Create a notebook checkpoint .
5511	Create a file checkpoint .
5512	Delete a remote checkpoint .
5513	Get the content of a checkpoint .
5514	Return a list of all checkpoint points for the given path .
5515	Rename all checkpoint checkpoints .
5516	Delete all checkpoint checkpoints .
5517	Purges the database .
5518	Resolve a path .
5519	Apply prefix to a directory .
5520	Decorator for a path .
5521	Decorator for a path .
5522	Decorates a path to a new path .
5523	Called when the manager is changed .
5524	Get the root directory .
5525	Normalize API path .
5526	Split a path into a directory .
5527	Return a base64 encoded string .
5528	Read a base64 encoded file .
5529	Decode bytes from base64 .
5530	Deserialize a binary file .
5531	Return a list of all paths in the given path .
5532	Decorator to raise a 404 error .
5533	Create a postgres checkpoint .
5534	Separate a list of directories .
5535	Iterate over all directories .
5536	Iterate over all files .
5537	Iterate over all files in a directory .
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Generate an alembic file .
5543	Upgrade a database .
5544	Sanitize a block .
5545	Queue an embed_type .
5546	Load the embed_type of embed_type .
5547	Insert an embed into the given block .
5548	Load embedding data .
5549	Validate data .
5550	View manager .
5551	Return a JSON representation of this object .
5552	Remove authenticated fields from the model .
5553	Remove fields from the request .
5554	Returns a list of published objects .
5555	Get queryset .
5556	Get the queryset .
5557	Gets the value of the attribute .
5558	Validate widget .
5559	Validate a zone .
5560	Check if a string is a valid UUID
5561	Return the user s permissions .
5562	Modify permissions .
5563	Validate authorator .
5564	Save a zone .
5565	Get the data for this model .
5566	Prepare the data for each field .
5567	Render the template .
5568	Get the settings for this Integration .
5569	Callback for integration .
5570	Get integration settings .
5571	Update integration settings .
5572	Signup a user .
5573	Create a tag for the given contents .
5574	Render a zone .
5575	Save the featured image .
5576	Save a subsection .
5577	Get the file extension .
5578	Returns the URL for the image .
5579	Saves the image .
5580	Save image to disk .
5581	Return the database connection .
5582	Create a BandwidthStream for a given file object .
5583	Read bytes from the stream .
5584	Consume an item from the pool .
5585	Schedules the given amount of time .
5586	Process the given token .
5587	Returns the projected rate for the given amount .
5588	Record the consumption rate .
5589	Download a file .
5590	Poll for a transfer .
5591	Get callbacks .
5592	Return a dictionary with whitelisted keys .
5593	Decrement the counter .
5594	Finalize the queue .
5595	Check if a file is a special file .
5596	Acquire a tag .
5597	Release a lock .
5598	Adjust the size of the chunk size .
5599	Queues a write task to a file .
5600	Creates an io_write task .
5601	Get the download manager manager .
5602	Main entry point .
5603	Write data to file .
5604	Request data for the given offset .
5605	Return True if file object is a seekable .
5606	Upload a file object to a bucket .
5607	Download a file .
5608	Copies a copy of a file .
5609	Perform a delete operation .
5610	Shutdown the server .
5611	Cancel a transfer .
5612	Wait for the transfer .
5613	Read data from file .
5614	Wrap data into a file .
5615	Gets the upload manager for the given transfer .
5616	Set the exception .
5617	Set the result .
5618	Set the exception .
5619	Return the result .
5620	Cancel the future .
5621	Submit a task .
5622	Add a callback to the queue .
5623	Add a function to be executed .
5624	Announce the future .
5625	Submit a task .
5626	Add a callback to the future .
5627	Upload a file .
5628	Download a file .
5629	Iterate through all the step definitions .
5630	Parse the argument arguments .
5631	Refactor a step .
5632	Iterate over step functions .
5633	Validate step arguments .
5634	Refactor a step .
5635	Select python file .
5636	Gets a list of team items .
5637	Create a new team .
5638	Update membership .
5639	Delete a membership .
5640	Get the fact fact
5641	Post a webhook
5642	List items in a room .
5643	Delete a membership .
5644	Validate the base URL .
5645	Check if string is a web URL .
5646	Open a local file .
5647	Checks that the given object is valid .
5648	Create a dict from a list of dictionaries .
5649	Checks if the response code is valid .
5650	Convert JSON data to a dictionary .
5651	Convert a date string to a string .
5652	List all items in a team .
5653	Create a new team .
5654	Update a room .
5655	Delete a room .
5656	Gets a list of items from an organization .
5657	Gets the created time .
5658	Get access token .
5659	Create a new resource .
5660	Update a webhook .
5661	Delete a webhook .
5662	Fixes the next URL for the next request .
5663	Set the wait_rate limit .
5664	Update request headers .
5665	Returns the absolute URL of the given URL .
5666	Perform a request .
5667	Perform a GET request .
5668	Get a list of pages from a URL .
5669	Get items from a URL .
5670	Create a PUT request .
5671	Delete a URL .
5672	Create a new user .
5673	List items in a room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new email .
5677	Retrieves a person .
5678	Update a person .
5679	Delete a person .
5680	Get the current user .
5681	List all items in the API .
5682	Get a list of items from the API .
5683	Create a new object .
5684	Update team .
5685	Delete a team .
5686	List items from a resource .
5687	Serializes the given data into a tuple .
5688	Perform a GET request .
5689	Get the last activity .
5690	Post a webhook .
5691	Get the URL of the ngrok client .
5692	Delete a webhook
5693	Create a webhook
5694	Creates a webhook .
5695	%prog console
5696	Read all telegram messages .
5697	Read data from the queue .
5698	Create a DSMR protocol .
5699	Create a DSMR reader .
5700	Create a new DSMR reader .
5701	Handle data received .
5702	Called when the connection is closed .
5703	Handle a telegram .
5704	Parse Telegram data .
5705	Get the version of a file .
5706	Ensure Python version is supported .
5707	Find all packages in the top level .
5708	Create a command class .
5709	Create a command for a function .
5710	Run a command .
5711	Ensure that targets are missing .
5712	Wrap a command .
5713	Create a file handler for a package .
5714	Returns a list of files that match the specified pattern .
5715	Get package data .
5716	Compile a pattern .
5717	Iterate through a path .
5718	Translate a glob pattern .
5719	Join a list of strings into a string .
5720	Translate a glob pattern .
5721	Truncate a table .
5722	Write a table .
5723	Write indexes to database .
5724	Write the triggers to the database .
5725	Write constraints to database .
5726	Write the contents of a table .
5727	Process a row .
5728	Write the indexes for a table .
5729	Write the constraints for a table .
5730	Write the triggers to the file .
5731	Return the number of rows in the queue .
5732	Enqueue data .
5733	Starts the queue .
5734	Build a query string .
5735	Convert an object to a JSON format .
5736	Connect to MySQL database .
5737	Execute a query .
5738	Return a connection to the database .
5739	Run benchmark .
5740	Connect to the pool .
5741	Lookup an error by its name .
5742	Return the total number of connections .
5743	Handle connection failure .
5744	Generate a simple SQL expression .
5745	Update a table .
5746	Connect to the database .
5747	Setup the database .
5748	Destroy the database .
5749	Start a step .
5750	Stop a step .
5751	Parse raw steps .
5752	Disconnect from API .
5753	Initialize the connection .
5754	Connect to websocket .
5755	Handle incoming messages .
5756	Stop timers .
5757	Send ping to the server
5758	Check if a ping is received .
5759	Send a request to the server .
5760	Unpause the channel .
5761	Dispatch a system message .
5762	Handle client info .
5763	Error handler .
5764	Handle data handler .
5765	Resubscribe to the channel .
5766	Handle authentication .
5767	Handle a configuration .
5768	Update the timestamp of a channel .
5769	Reset all channels .
5770	Get a list of candles
5771	Configure bitfinex config
5772	Subscribe to a tick .
5773	Unsubscribe from a Ticker
5774	Subscribe to an order book .
5775	Unsubscribe a book .
5776	Subscribe to a book .
5777	Unsubscribe from raw order book .
5778	Subscribe to a trade .
5779	Unsubscribe from a trade
5780	Subscribe to candles
5781	Unsubscribe from candles
5782	Authenticate the API .
5783	Cancel an order .
5784	Handle a command .
5785	Handle a device command .
5786	Handle a message notification .
5787	Create a new DeviceType .
5788	Publish an event .
5789	Update a device .
5790	Returns an IterableClientStatusList with the given status .
5791	List all bundles .
5792	Create a new bundle
5793	Update a schema .
5794	Disconnects the connection to the client .
5795	Called when the client is connected .
5796	Subscribe to a specific device
5797	Subscribe to device status
5798	Subscribe to device commands
5799	Publish a command .
5800	Handle an unsupported message .
5801	Handle a device event .
5802	Handle a device status .
5803	Handles the application status .
5804	Get last event
5805	Get all events for a device .
5806	Perform API call .
5807	Perform a request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of points in the index .
5811	Find nearest neighbors in the index .
5812	Get the bounds of this index .
5813	Delete data from index .
5814	Create an index from a stream .
5815	Load a byte array .
5816	Delete an object .
5817	Checks if the given function returns True .
5818	Load the application .
5819	Initialize the application .
5820	Run the application .
5821	Convert the value to a native version .
5822	Perform a crop on the image .
5823	Process the image .
5824	Process image .
5825	Convert an image to an image .
5826	Convert the data to a python version .
5827	Process the placeholder image .
5828	Saves the model to the model .
5829	Update ppoi field .
5830	Save the form data to the form .
5831	Creates a form field .
5832	Convert obj to string
5833	Auto - discover all the virtualimage fields .
5834	Unregister a SizedImage subclass .
5835	Unregister a filter .
5836	Returns the URL of the image .
5837	Builds and sets the filters for the field .
5838	Get the root folder of the version file .
5839	Get the size of the root folder .
5840	Get the size of the root folder .
5841	Delete all files from the storage .
5842	Preprocess image .
5843	Preprocess GIF image .
5844	Preprocess a JPEG image .
5845	Retrieve an image .
5846	Save an image to disk .
5847	Return a string representation of ppoi .
5848	Create a new image .
5849	Render the widget .
5850	Get the context for the widget .
5851	Build attributes from base_attrs .
5852	Get the full path to a file .
5853	Get the path to a file .
5854	Validate a list of sizes .
5855	Get image url from image_key
5856	Get the rendition key set .
5857	Format instruction .
5858	Format a function .
5859	Decode a bytecode .
5860	Decode a module .
5861	Decorator for deprecated functions .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the server .
5865	Handles incoming requests .
5866	Parse an AGI result .
5867	Perform an agi code .
5868	Reset all instances .
5869	Return a list of all instances of this instance .
5870	Get metadata from a path .
5871	Returns a list of primary keys for a model .
5872	Deserialize the given value .
5873	Get an existing instance of the given value .
5874	Get the fields of the given schema .
5875	Deserialize a model .
5876	Split the model data into a dictionary .
5877	Delete tables .
5878	Create a new snapshot .
5879	List all snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Update the indexes for each epoch .
5885	Remove text from text .
5886	Apply a function to the given function .
5887	Creates a function that returns a list of tokens .
5888	Processes text .
5889	Perform parallel processing .
5890	Calculate the maximum length of the document length .
5891	Return a pandas Pandas DataFrame
5892	Map param_type to string types .
5893	Parse the interfaces .
5894	Returns the inverse of this matrix .
5895	Recursively update the record .
5896	Return a copy of this instance .
5897	Return a copy of this node .
5898	Determine if two dictionaries are equal .
5899	Convert an argument to a tuple .
5900	Clear the internal state .
5901	Move a node to the next node .
5902	Create a temporary file .
5903	Returns a list of addresses matching the given query .
5904	Merge arguments into config .
5905	Load address books .
5906	Prepare search queries .
5907	Create new contact .
5908	Show a list of birth days .
5909	Get phone number
5910	List all contacts .
5911	Modify a vcard .
5912	Delete a contact
5913	Execute the source subcommand .
5914	Merges a list of vcards into a list of vcards .
5915	Creates a copy of vCard .
5916	Get action by alias .
5917	Convert a boolean value to a boolean value .
5918	Create a new contact object .
5919	Create a new address from a file .
5920	Create a contact object from a user input .
5921	Create a new contact object from an existing contact .
5922	Get a list of names part of the vcard .
5923	Add a category .
5924	Parse a list of type types .
5925	Convert a list to a string .
5926	Convert a string to a datetime object .
5927	Compares two Uids .
5928	Search for all contacts .
5929	Returns a generator that matches the given query .
5930	Search for a user by its name .
5931	Search for addresses .
5932	Gets the short uids for the user .
5933	Get short uid from uid
5934	Return a list of files that match the given search .
5935	Loads a VCard object from the directory .
5936	Get an abook by name .
5937	Return a list of available architectures .
5938	List available architectures .
5939	Get the argument spec for a function .
5940	Dispatch a parser .
5941	Convert a prompt to a string .
5942	Encode output .
5943	Guess the given keyword arguments .
5944	Add commands to the parser .
5945	Decorator to set a named name .
5946	Decorator for arguments .
5947	Confirm user input .
5948	Replace the query .
5949	Add a pattern to the filter .
5950	Returns the results of the query .
5951	Returns the first item in the collection .
5952	Delete all entities .
5953	Called when deleting entities .
5954	Redis a redis command .
5955	Estimate the work for the given index .
5956	Perform a search query .
5957	Count the number of records in the database .
5958	Return a connection to the given object .
5959	Return a list of strings .
5960	Generate indices for a model .
5961	Clean old indexes .
5962	Add an object to the session .
5963	Get the value of a given pk .
5964	Write data to redis .
5965	Save this object to the database .
5966	Deletes a record .
5967	Retrieve a single item from the database .
5968	Register a function .
5969	Open a semaphore .
5970	Get cpu count .
5971	Send a result to the queue .
5972	Start the worker process .
5973	Add a call item to the queue .
5974	Ensure that the executor is running .
5975	Wrapper to wrap non - pickled objects .
5976	Start the server .
5977	Duplicate connection object .
5978	Gets a reusable executor .
5979	Waits until all jobs have completed .
5980	Get the pre - prepared data for the process .
5981	Prepare process .
5982	Close all open files .
5983	Kill subprocesses from psutil
5984	Recursively terminates a process .
5985	Get a list of exit codes .
5986	Format a list of exitcodes .
5987	Main entry point .
5988	Ensure the process is running .
5989	Print an event processor .
5990	Run the program .
5991	Interactive interactive console .
5992	Split a string into a list of arguments .
5993	Get the stack of frames in the stack .
5994	Runs a hook on the given object .
5995	Clears the stack .
5996	Return the value of the given argument .
5997	Validate an integer .
5998	Process commands .
5999	Queue a file to be started .
6000	Get the next token from a string .
6001	Print an error message .
6002	Read a command line .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble an instruction from a byte string .
6006	Count the number of frames in the frame .
6007	Get the name of the call function .
6008	Prints the stack trace of the stack .
6009	Lookup a subcommand .
6010	Display a short help message
6011	Add a subcommand .
6012	Run a subcommand .
6013	Start debugging .
6014	Show a command .
6015	Run a line number .
6016	Find the debugger of the given frame .
6017	Return a map of thread names .
6018	Validate an integer .
6019	Check if the given argument is on the given argument .
6020	Run a boolean on the debugger .
6021	Sets an integer value .
6022	Run a boolean on the debugger .
6023	Show int value
6024	Show a value .
6025	Return True if the given line is a def statement .
6026	Return True if the given line is a class definition .
6027	Tries to quit a thread .
6028	Determine if the color is a terminal .
6029	Determine if the color is dark .
6030	Return the signature of a frame .
6031	Return a list of display names .
6032	Return a list of display names for the given frame .
6033	Return a string representation of this option .
6034	Read a message from the input stream .
6035	Show debug information .
6036	Undefined subcommand .
6037	Run the given arguments .
6038	Print a simple list of strings .
6039	Lookup a signal name .
6040	Lookup a signal by name .
6041	Return the sign name for the given name .
6042	Set a signal for a signal .
6043	Checks if all signatures have been changed .
6044	Print information about a signal .
6045	Handle signal handler .
6046	Handle printing .
6047	Handle a signal .
6048	Get module name from filename .
6049	Search for a file .
6050	Find a python script from a python script .
6051	Returns a list of all python files in the caller .
6052	Write a message to the output .
6053	Run the program .
6054	Columnize commands .
6055	Triggers the debugger .
6056	Close the connection .
6057	Write a message to the server .
6058	Completes a prefix .
6059	Execute a command
6060	Add an ignore filter to ignore .
6061	Return the filename for the given filename .
6062	Return the name of the file .
6063	Check if the trace is started .
6064	Check if a frame is stop .
6065	Set the next step .
6066	Print a trace trace .
6067	Run the given file .
6068	Checks if the function name is valid .
6069	Remove a breakpoint .
6070	Delete a breakpoint by its number .
6071	Enables all breakpoints .
6072	Enables a breakpoint .
6073	Delete breakpoints by lineno .
6074	Open input stream .
6075	Read a line from the input stream .
6076	Confirm a prompt .
6077	Parse whitespace .
6078	Parse a number .
6079	Asynchronously returns a future .
6080	Restore the original login session .
6081	Load a module from a path .
6082	Iterate over all documents .
6083	Main entry point .
6084	Transforms a JSON file into a temporary file .
6085	Open a JSON file .
6086	Normalize data from a stream .
6087	Convert a date string to a float .
6088	Detect file encoding .
6089	Read JSON lines from a file .
6090	Transforms a file to a temporary file .
6091	Read a CSV file .
6092	Read a CSV file .
6093	Translate a CSV file .
6094	Connect to the given URL .
6095	Save a token .
6096	Perform a request .
6097	Delete a path .
6098	Wait until the project is running .
6099	Return the root URL for the given URL .
6100	Save a token to the user .
6101	Perform a JSON request .
6102	Perform a POST request .
6103	Changes the path to the URL .
6104	Get the default account .
6105	Return the documentation for the API .
6106	Wait for a job .
6107	Get raw data for a given path .
6108	Print the result as a CSV file .
6109	Read parameters from input file .
6110	Simplify doc .
6111	Create a project .
6112	Upload a JSON file .
6113	Main entry point .
6114	Upload a stream to a project .
6115	Upload a file .
6116	Main entry point .
6117	Create a login token from a user .
6118	Login the user .
6119	Post login page .
6120	Get data for a resource
6121	Fetch data from the data .
6122	Prepare the view .
6123	Initialize the view .
6124	Displays the response .
6125	Handle a change event .
6126	Update the menu .
6127	Return a list of urls .
6128	Handle a change event .
6129	Handle a change event .
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy the widget .
6133	Add a child to the widget .
6134	Remove a child .
6135	Return a generator of child widgets .
6136	Set attribute value .
6137	Update a proxy .
6138	Notify changes .
6139	Return a list of nodes matching the given query .
6140	Prepare the object .
6141	Initialize the widget .
6142	Sets the raw HTML source .
6143	Observice mode .
6144	Called when the block is changed .
6145	Update the children of this block .
6146	Read the contents of a file .
6147	Print an error message .
6148	Error handling errors .
6149	Get product by name .
6150	Create a new session
6151	Reset the store
6152	Get a list of Stores
6153	Sets delivery system .
6154	Get a menu
6155	Add item to basket
6156	Add Pizza to basket .
6157	Add a side to Basket .
6158	Remove item from basket
6159	Set payment method .
6160	Process a payment .
6161	Perform a GET request .
6162	Perform a POST request .
6163	Call a method on the API .
6164	Append an item to the menu .
6165	Add an exit item to the list .
6166	Draw the menu .
6167	Process user input .
6168	Select the selected item .
6169	Parse old menu data .
6170	Return the top - level sorted by value .
6171	Returns the top - level aggregation of the given data .
6172	Convert a column to datetime .
6173	Convert datetime to str .
6174	Change date format .
6175	Cast a column to a column .
6176	Return the rank of the given values .
6177	Returns a pandas pandas data .
6178	Perform a comparison operation .
6179	Round a column to a column .
6180	Apply absolute values to a column .
6181	Pivot pandas DataFrame
6182	Pivot a variable by a group .
6183	Group by group_cols .
6184	Compute the sum of a column .
6185	Add a missing row to a DataFrame .
6186	Decorator for catching exceptions .
6187	Log a message to a logger .
6188	Logs a function .
6189	Decorator to log shapes .
6190	Rename columns .
6191	Compute the sum of the values in the given DataFrame .
6192	Combine a list of aggregated columns .
6193	Get a parameter value from a function call .
6194	Remove old entries from cache .
6195	Roll up a group of levels .
6196	Return the largest column of a column .
6197	Return the minimum value of a column .
6198	Fill NaN values with values .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add a number of years to the given year .
6202	Parse a date string .
6203	Filter data by date column .
6204	Percentage the percentage of a column .
6205	Core core family core .
6206	Returns a list of learning updates .
6207	Get training parameters .
6208	Add new parameters to the network .
6209	Compute the first layer of the input tensor .
6210	Prepare the network .
6211	Compute the cost of a tensor .
6212	Apply a function to the dataset .
6213	Normalize the target set .
6214	Report the report .
6215	Perform training on the network .
6216	Sample the next step .
6217	Compute the alignment weights for the current state .
6218	Compute the context vector .
6219	Concatenate vars .
6220	Pad the dataset with the given length .
6221	r Compute the rmsprop .
6222	Report the current time .
6223	Compute the cost of the given data .
6224	Run the monitor .
6225	Build loop variables .
6226	Scan the given variables .
6227	Compute momentum .
6228	Add an IF train .
6229	Skip the number of batches .
6230	Load a model from a file .
6231	Iterate over the training set .
6232	Run a training step .
6233	Run the validator .
6234	Report a report .
6235	Get the current dataset .
6236	Apply a function to the tensor .
6237	Report the information about the used parameters .
6238	Creates a variable .
6239	Create variables from a dataset .
6240	Compute the shared value .
6241	Stack encoding layers .
6242	Stack decoding layers .
6243	Convenience method for encoding .
6244	Decodes the input matrix .
6245	Create a Gaussian Gaussian kernel .
6246	Register a layer .
6247	Monitor the output of the layer .
6248	Returns all the parameters .
6249	Setup the input variables .
6250	Compute the output .
6251	Save model parameters to disk .
6252	Load parameters from a file .
6253	Report the network information .
6254	Register a list of parameters .
6255	Register a list of updates .
6256	Register training updates .
6257	Register a list of monitors .
6258	Compute the norm of multiple tensors .
6259	Write an element to a file .
6260	Load a pickled element from a file .
6261	Load the parameters from the model .
6262	Create request elements .
6263	Decode a user s state .
6264	Parse x_credentials .
6265	Filter access_request_element elements .
6266	Login to Widget .
6267	Normalize a dictionary .
6268	Convert items to a dictionary .
6269	Parse a query string into a dictionary .
6270	Resolve provider class .
6271	Create a cookie
6272	Save session data .
6273	Get data from cookie .
6274	Get the data for this request .
6275	Returns the signature of the given parts .
6276	Serialize a value into a string .
6277	Returns True if the token is valid .
6278	Checks if the token is expired .
6279	Serialize the credentials .
6280	Checks if a string is a binary string .
6281	Returns the content of the response .
6282	Create an OAuth2 request .
6283	Access user info .
6284	Decorator to authenticate a user .
6285	Login to the user .
6286	Generate session key .
6287	Set a value in the session .
6288	Generate a random csrf generator .
6289	Logs a message .
6290	Return True if the status is in a category .
6291	Split a URL into a base URL .
6292	Decorator for cross - origin .
6293	Set CORS headers .
6294	Returns a dict containing the cORS_kwarg dict .
6295	Convert an object to a string .
6296	Ensure that an instance is an iterable .
6297	Return True if two values are equal .
6298	Decorator for deprecated functions .
6299	Deserialize a audio segment .
6300	Create a AudioSegment from a file .
6301	Create a AudioSegment from a numpy array .
6302	Execute SOX command .
6303	Filters the audio file .
6304	Calculate the fft .
6305	Generate frames from the stream .
6306	Normalize the SPL segment .
6307	Return a new AudioSegment .
6308	Resample the audio .
6309	Serialize this object into a serialized string .
6310	Calculate spectrogram of spectrogram .
6311	Choose the first offset of the given candidates .
6312	Calculate the offset of the first offset in the set of offsets .
6313	Calculate the offset of the offset of the onset front of the onset .
6314	Match offset_front_front .
6315	Iterate over the overlap between two positions .
6316	Update segmentation mask .
6317	Return the index of the front of a given index .
6318	Returns a generator that yields all the IDs of the given onset .
6319	Return a list of offsets for a given onset .
6320	Removes all fronts of the segmentation .
6321	Removes all fronts from the given size .
6322	Break the front of the front of the front of the fronts .
6323	Merge adjacent segments .
6324	Separate mask masks .
6325	Decompute the given mask .
6326	Perform an ASFT task .
6327	Batch filter .
6328	Low - level filter .
6329	Convert a list of data to TF inputs .
6330	Expand the data set in the data set .
6331	Return True if all elements are equal .
6332	Groups the annotations of the audit file .
6333	Load the audit confusion matrix .
6334	Convert a list of data to TF inputs .
6335	Update the index url for the pip file .
6336	Check if the requirements file is valid .
6337	Resolve all streams .
6338	Return a list of StreamInfo objects for a given property .
6339	Resolve a stream by predicate .
6340	Handle an error .
6341	Push data to stream .
6342	Push data into the stream .
6343	Get stream info .
6344	Open a stream .
6345	Adjust the time correction .
6346	Return a child node .
6347	Return the next sibling element .
6348	Return the previous sibling of this node .
6349	Sets the name of this object .
6350	Sets the value of the expression .
6351	Append a child element to this node .
6352	Prepend a child element .
6353	Append a copy of the element .
6354	Prepend a copy of this element .
6355	Remove a child node .
6356	Returns a list of StreamInfo objects .
6357	Print a pair of tokens .
6358	Run autocomplete command .
6359	Compute the edges of the given token .
6360	Iterate over all processors .
6361	Perform an imap operation on the pool .
6362	Return a list of fuzzy neighbors .
6363	Print a fuzzy word .
6364	Run a fuzzy index .
6365	Extract the results from the results .
6366	Display help commands .
6367	Print information about the database
6368	Execute a DB key .
6369	Print geometash .
6370	Get a single document
6371	Execute index command .
6372	%prog score
6373	Compare two strings
6374	Send a response to the server .
6375	Return a list of requests .
6376	Get the bits from an array .
6377	Convert an array of types into a bit array .
6378	Convert a slice to a slice .
6379	Find all files in a directory .
6380	Returns true if the given iterable is in the given iterable .
6381	Creates a statement for each item in a single unit .
6382	Shift a signal to the right of a signal .
6383	Calculate log2 .
6384	Return True if num is a power 2 .
6385	Add a case statement .
6386	Define the default statement .
6387	Register interfaces for the given interface .
6388	Called when a simulation is started .
6389	Log a change .
6390	Render a method .
6391	Return a list of agent agents .
6392	Returns the associated clk for this unit .
6393	Return a generator that yields each element in iterable .
6394	Generate a grouped collection by fn .
6395	Flatten iterables .
6396	Merge nested elements into the nested list .
6397	Remove unconnected signals .
6398	Checks if the given proc is an expression .
6399	Try to merge two processes .
6400	Reduce all processes in a list of processes .
6401	Handle a write request .
6402	Convert a unit to Rtl .
6403	Return the name of the output of the process .
6404	Return a list of all the drivers of the given statements .
6405	Register a register signal .
6406	Creates a new instance of the target .
6407	Get the maximum id for the given stm .
6408	Returns the maximum id of the given proc .
6409	Write data to simf .
6410	Change the direction of the interface .
6411	Load a list of declarations .
6412	Return a list of signals for this interface .
6413	Get the physical name of this entity .
6414	Return the length of the interface .
6415	Get sensitivity by operator .
6416	Evaluate the given operator .
6417	Convert bits to a type .
6418	Reinterprets a set of bits into a HStruct .
6419	Calculate the full word count of words .
6420	Group words by word index .
6421	Print interfaces .
6422	Generate frames from a transaction .
6423	Iterate through all words .
6424	Pack data into memory .
6425	Clean up the state of the signal .
6426	Determine the closure for the given statements .
6427	Determine the sensitivity sequence of signals .
6428	Return the context of the current context .
6429	Handles the reduction of results .
6430	Merge two statements .
6431	Determines whether the statement lists are merged .
6432	Merge a list of statements .
6433	Merge two statements .
6434	Reduce a list of statements .
6435	Called when a parent event is dependent .
6436	Set the parent statement .
6437	Register a list of statements .
6438	Destroy the driver .
6439	Registers a new signature .
6440	Return a signature for the given type .
6441	Clean up the subunit .
6442	Recursively walk the fields of a sigOrStruct .
6443	Unpack data into a HStruct .
6444	Return a copy of this operator .
6445	Add sensitivity to the given sensitivity .
6446	Evaluate conditional conditions .
6447	Connects a simUnit to another simUnit .
6448	Create a new updater .
6449	Creates a new instance of an array .
6450	Create a bit vector .
6451	Register a HWProcess .
6452	Evaluate param .
6453	Set the value of this parameter .
6454	Create a HType from an interface map .
6455	Finalize memory .
6456	Get the index of the index .
6457	Convert a Python object into a Value object .
6458	Return the value of the specified type .
6459	Reinterpret the value of a type or type .
6460	Walk through a list of interfaces .
6461	Connects and returns a list of connected interfaces .
6462	Pack an interface into an interface .
6463	Encode a rom into a process .
6464	Convert this object to Rtl .
6465	Register an interface for an interface .
6466	Try to reduce a value and return the value .
6467	Reduce the value of a value .
6468	Return a new name scope .
6469	Determine whether the given unit is serialized .
6470	Create a HdlType for a HdlType .
6471	Serialize an IF container .
6472	Get the base condition .
6473	Returns a new SimBitsTitsTitsTuple .
6474	Get the name of a constant .
6475	Remove the driver s drivers .
6476	Load data from an array .
6477	Load a bit address from a hdlType .
6478	Load a HSDType from a HdlType .
6479	Returns the width of the item .
6480	Recursively walk the tree .
6481	Return the sign of the given value .
6482	Merge two Statements .
6483	Returns the indent of the given indent number .
6484	Raises an exception if the object is not available .
6485	Register a parameter .
6486	Update the parameters from the given object .
6487	Register a unit .
6488	Register an interface .
6489	Register an array of arrays .
6490	Get a single driver .
6491	Evaluate the operands .
6492	Create a new RtlSignal .
6493	Return a new context with indentation .
6494	Try to connect to a unit .
6495	Propagate a clk to a clk .
6496	Convert a CLK object to a LSTN .
6497	Propagate cls and rst .
6498	Propagate rstn to rst
6499	Propagate rst to rst
6500	Iterate over all bits in the given sigOrVal .
6501	Recursively serialize an ExcludeUnit .
6502	Serialize a single unit .
6503	Evaluate the given parent unit .
6504	Returns the full name of the interface .
6505	Make an association .
6506	Prepare a unit for a unit .
6507	Convert a unit to a sim model .
6508	Recursively reconnect signal signals to a model .
6509	Simplified method .
6510	Initialize the TWriteCallback .
6511	Connect signal to a signal .
6512	Register an external port .
6513	Connect to the given connection .
6514	Returns the signSig signature for the given direction .
6515	Determine if the given process is evalling .
6516	Add a process to the queue .
6517	Add a proc to the simulation .
6518	Schedules the combination of combine events .
6519	Schedule applied values .
6520	Given a set of values return a tuple of values .
6521	Run combin process .
6522	Run sequence processes .
6523	Applies the values to the list of values .
6524	Return the value of the signature .
6525	Write a value to the signal .
6526	Add a process .
6527	Simulate the specified unit .
6528	Create a new RtlSignal .
6529	Convert a list of statements to a list of operands .
6530	Create a new Rtl signal .
6531	Computes the hamming distance between two hashes .
6532	Calculate average hash of image .
6533	Computes the distance between two images .
6534	Setup Vizio device .
6535	Update the current state .
6536	Moves the volume .
6537	Updates the volume .
6538	Volume down the volume
6539	Set the volume level .
6540	Reset the board .
6541	Return the piece of the piece at the given square .
6542	Removes a piece from the board .
6543	Set the piece at the given piece .
6544	Checks if the given move is a poison or not .
6545	Determine if the king is a failure .
6546	Checks if the game is running .
6547	Checks if the checkmate is valid .
6548	Determines if the transliteration is a valid number .
6549	Removes a move from the board .
6550	Return a string representation of the board .
6551	Push a word to the list .
6552	Returns the zobrist hash of the board .
6553	Return the symbol of this piece .
6554	Creates a color from a given symbol .
6555	Return the address of this piece .
6556	Create a piece from a string .
6557	Parse a list of commits .
6558	Parse a commit .
6559	Load config from CLI .
6560	Execute a command line from the CLI .
6561	Add a config file to the parser .
6562	Load config file .
6563	Generate a YAML file .
6564	Generate a Markdown class .
6565	Cast value to string .
6566	Return a list of dates between two dates .
6567	Parse a string .
6568	Load a currency from a file .
6569	Set the missing rates .
6570	Compute the missing rates for the given currency .
6571	Returns the rate for a given currency .
6572	Convert an amount to another currency .
6573	Returns a list of tuples of the given iterable .
6574	Animation function to animate frames
6575	Read a record from the file .
6576	Write data to file .
6577	Return a list of mappings .
6578	Returns the comments of the file .
6579	Add an array to the file .
6580	Close the file .
6581	Compute the position of the given tdb .
6582	Close the file .
6583	Load the PCK data .
6584	Compute the difference between two segments .
6585	Visits a call .
6586	Visits a binary op .
6587	Visits a dictionary node .
6588	Visits a joined string .
6589	Visits a keyword .
6590	Visits an exception .
6591	Detect logging level .
6592	Get exception handler name .
6593	Get the id attribute of a value .
6594	Check if the given node is a bare exception .
6595	Check if an exception is raised .
6596	Delete the file if it exists .
6597	Add a link to the database .
6598	Returns the rendered PDF content .
6599	Render a PDF template .
6600	Convert a string to a string .
6601	Configure a module .
6602	Convert a string to underscores .
6603	Ensure that the mcs can be created .
6604	Parse a list of prices .
6605	Load the contents of a file .
6606	Parse a price line .
6607	Translate a symbol .
6608	Load symbol maps .
6609	Get the session .
6610	Add a price .
6611	Import a CSV file .
6612	Show latest prices .
6613	List all available prices .
6614	Download prices .
6615	Prune old price entries
6616	Get the default session .
6617	Create a new symbol map
6618	List all symbol maps
6619	Get symbol map by symbol
6620	Read lines from a file .
6621	Map entity to PriceModel
6622	Convert a PriceModel to a Price object .
6623	Read configuration file .
6624	Get the path to the config file .
6625	Create user config file .
6626	Returns the path to the config file .
6627	Get the contents of the config file .
6628	Set the value of a section .
6629	Get the value of a section .
6630	Save the configuration .
6631	Parse a symbol .
6632	Add a price .
6633	Add a price entity .
6634	Download a price .
6635	Get the session .
6636	Get prices for a given date .
6637	Get prices for a given date .
6638	Prune all stocks .
6639	Prune prices .
6640	Download a price .
6641	Returns a list of securities for a given currency .
6642	Return a partial state partial .
6643	Update the children of the call .
6644	Iterate over all children .
6645	Decorator that decodes a function .
6646	Checks that the number of part_length is equal .
6647	Checks if two AST nodes are equal .
6648	Checks if the given text contains the given text .
6649	Checks if a given package is imported .
6650	Assert that the text contains the given text .
6651	Checks if the given index is printout .
6652	Check if the code has no error .
6653	Checks whether the student has been chosen .
6654	Check for a function .
6655	Get result from process
6656	Overrides the given solution .
6657	Checks if an instance is an instance of an instance .
6658	Return a copy of the defined items .
6659	Convert this node to a child node .
6660	Get a parser from a tree .
6661	Check if there is a context loop .
6662	Check if the solution has a context with the given name .
6663	Check if the given part is a valid student .
6664	Checks if the given index is a valid solution .
6665	Check arguments for arguments .
6666	Verify a call string .
6667	Calculate the realomaly .
6668	Initialize the application .
6669	Initialize the LDAP server .
6670	Add a server to the pool .
6671	Remove connection from Ldap3 .
6672	Removes the connection from the context .
6673	Authenticate to LDAP .
6674	Authenticate a user .
6675	Authenticate the LDAP search .
6676	Returns a list of groups matching the specified DN .
6677	Get information about a user .
6678	Get user information for a given username .
6679	Get a single LDAP object .
6680	Make a connection to a flask application .
6681	Make a connection .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Perform a search query .
6685	Search for labels
6686	Search for repositories .
6687	Search for all artifacts .
6688	Speak the client .
6689	Announce a command .
6690	Update the secrets .
6691	Update headers .
6692	Requests client secrets .
6693	Download a URL from a URL .
6694	Perform a GET request .
6695	Update the authorization header .
6696	Get or create a folder .
6697	Read the response from the response .
6698	Get the bucket .
6699	Update client secrets .
6700	Initialize the client .
6701	Load the secrets .
6702	Returns a list of logs .
6703	List all containers .
6704	Create an endpoint folder
6705	Initializes the transfer client .
6706	Search for all containers
6707	Get the status of the client
6708	Add a value to the secret
6709	Remove a variable from the backend
6710	Activate a backend .
6711	Delete a backend
6712	Update the base base for the image .
6713	Create a basic auth header .
6714	Generate a signature .
6715	Generate a header signature .
6716	Perform a DELETE request .
6717	Perform a HEAD request .
6718	Perform a paginated GET request .
6719	Check if SSL is enabled
6720	Remove an image .
6721	Return a dictionary with the current version .
6722	Get install requirements .
6723	Get the singularity version .
6724	Check if install is installed .
6725	Returns the absolute path of the module .
6726	Get the thumbnail image .
6727	Run a command .
6728	Get metadata from image file .
6729	Update the secrets .
6730	Print the output to the output file .
6731	Kill command .
6732	List logs .
6733	Return a list of all collections .
6734	Update the secrets .
6735	Update the secrets .
6736	Get the client for the given image .
6737	Execute an ipython command .
6738	Get a list of manifest manifests .
6739	Get the manifest for a repository .
6740	Get the download cache directory .
6741	Extract the environment variable .
6742	Updates the gitlab registry .
6743	Update the secrets .
6744	Get the metadata for the artifact .
6745	Get the settings for a client .
6746	Check if the given name exists and update it .
6747	Update a setting .
6748	Authorizes a request to the registry .
6749	List builders .
6750	Load all templates for a given name .
6751	Get IP address
6752	Run a build .
6753	List all containers .
6754	List all containers
6755	Main entry point .
6756	Main entry point .
6757	Initialize the database .
6758	Get the build template .
6759	Return a list of available endpoint objects
6760	List endpoints
6761	List all files in the given endpoint .
6762	Shows an image .
6763	Read the client secrets file .
6764	Initialize the service .
6765	Delete an object
6766	Delete a file
6767	Destroy an instance .
6768	Get subparsers from parser .
6769	Generate a string .
6770	Returns a temporary directory for the given directory .
6771	Extract a tar archive .
6772	Extract a tarball from the given archive .
6773	Get the hash of a file .
6774	Read a file .
6775	Read json file .
6776	Clean up files .
6777	Push an image to the bucket .
6778	Get or create a collection .
6779	Get a collection by name .
6780	Get a container by name .
6781	List containers .
6782	Return information about a container .
6783	Rename an image .
6784	Move an image to the container
6785	Remove an image
6786	Add an image to the registry .
6787	Push an image to the registry .
6788	Parse a header from a recipe .
6789	Find a single recipe .
6790	Create a tarball for the given files .
6791	Run a build .
6792	Update blob metadata .
6793	Formats a container name .
6794	Determine if the user should be displayed .
6795	Emit an error message .
6796	Write message to stream .
6797	Prints a table .
6798	Push an image to the container
6799	Get a template by name .
6800	Get the manifest for a given tag .
6801	Get the build template .
6802	Update the secrets
6803	Return a string representation of a class .
6804	Error handling errors .
6805	Creates a new temporary file .
6806	Returns the Gravatar URL for the given user .
6807	Get the URL of a gravatar avatar .
6808	Determine if the given email exists .
6809	Returns the URL of the Gravatar profile .
6810	Generator for chimera blocks .
6811	Compute the chimera of a block .
6812	Enumerate the residues of a molecule .
6813	Convenience method for enumeration .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Calculates the canonicalization of a molecule .
6817	Validate a molecule .
6818	Removes the molecule from the molecule .
6819	Standardize a molecule .
6820	Enumerate Tautomers from a molecule .
6821	Convert a molecule to a molecule .
6822	Standardize a molecule .
6823	Return the tautomer parent of a molecule .
6824	Return the largest fragment of a molecule .
6825	Remove the stereo parent from the molecule .
6826	Set the isotope of the molecule .
6827	Charge the parent of a molecule .
6828	Return the parent parent of a molecule .
6829	Main entry point .
6830	Removes all fragments from the molecule .
6831	Choose the largest fragment of a molecule .
6832	Integrate an IVP .
6833	Get the statistics for a GitHub user .
6834	Get members of org
6835	Get all teams
6836	Get all repositories
6837	Get the total contributors
6838	Get list of pull requests .
6839	Get a list of issues
6840	Get the readme for a repository .
6841	Get the license for a repository
6842	Get a list of commits .
6843	Write a json file to a JSON file .
6844	Write the total number of files to a file .
6845	Write a file to a file .
6846	Check if a file path exists .
6847	Remove a date from a file
6848	Return a list of organizations
6849	Create an enterprise session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get organization information
6854	Write to a file .
6855	Create a project from gitlab .
6856	Creates a project from the given record .
6857	Get the license object for the given license .
6858	Get a list of all projects .
6859	Get a list of releases
6860	Get list of referrers
6861	Get the data for the data
6862	Write a JSON file to the repository .
6863	Write data to file .
6864	Checks if a data file contains data .
6865	Write data to file .
6866	Write references to a file .
6867	Process a JSON file .
6868	Fetch data from a URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get all members of the org
6872	Write user to file .
6873	Connect to the given URL .
6874	Connect to gitlab .
6875	Query a list of projects .
6876	Convert git repo to sloc
6877	Compute the labor hours for the given sloc .
6878	Remove empty strings from a dictionary .
6879	Read a GQL query file .
6880	Query a git repository .
6881	Submit a gitquery
6882	Waits for the given time stamp .
6883	Count the number of seconds .
6884	Load data from file
6885	Save data to file
6886	Creates a new TFS connection .
6887	Create a TFS Enterprise Enterprise Enterprise .
6888	Create a TFS Enterprise Client
6889	Creates a new TFS API client .
6890	Creates a TFS Git Git Git Git Git API client .
6891	Get git repositories for a project .
6892	Retrieves a list of branches for a project .
6893	Get the year of the year .
6894	Calculates the total number of commits .
6895	Write last year commits to file .
6896	Configure the backend .
6897	Return a MetricsInterface object for a given object .
6898	Add a timing metric .
6899	Context manager .
6900	Decorator to decorator .
6901	Generate a tag .
6902	Log a timing event .
6903	Log a statogram .
6904	Roll up all counters .
6905	Order a list of members .
6906	Converts a value to an enum .
6907	Convert a value to a python type .
6908	Return the name of the given value .
6909	Resolve the given object .
6910	Projects a list of dictionaries into a dictionary .
6911	Return the mean of the counter .
6912	Mark a value as a counter .
6913	Calculate the mean rate .
6914	Mark the value of the derivative .
6915	Send a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a metric to the buffer .
6919	Retrieves a configuration value from the configuration .
6920	Ensure that data is valid .
6921	Get or set or set a default value .
6922	Given a list of ledger ids return a map of ledger ids .
6923	Get current division divisions
6924	Map an exact invoice number to a foreign invoice number .
6925	Solve a Sudoku matrix .
6926	Creates a view .
6927	Create a form view .
6928	Add a method view to the injector .
6929	Creates an API view .
6930	Create a generic API view .
6931	Create a model view set .
6932	Connect to a file descriptor .
6933	Read data from the socket .
6934	Close the connection .
6935	Called when a connection was lost .
6936	Add a watch request to the queue .
6937	Unregister a watcher .
6938	Setup a watcher for a given path .
6939	Initialize the client .
6940	Get an event from the stream .
6941	Touch the device .
6942	Called when the interval is completed .
6943	Calculate the failure .
6944	Close all connections .
6945	Check if the connection is stared .
6946	Connect to a NQdd server .
6947	Query the lookup dnsd
6948	Set the maximum number of connections .
6949	Called when a message is done .
6950	Add a callback to the event .
6951	Removes a listener from the list .
6952	Trigger an event .
6953	Publish a message .
6954	Set feature transform .
6955	Return prediction of training data
6956	Calculate the angle of a given time .
6957	Parse a log file .
6958	Clean up a fastq file .
6959	Merge the default adapters .
6960	Runs the trimomatic analysis .
6961	Reads a depth file .
6962	Main entry point for plotting .
6963	Set the path to the file .
6964	Set the main channel names .
6965	Get user channel information .
6966	Render a template .
6967	Return a string representation of the template .
6968	Set the channel channels .
6969	Update main forks .
6970	Set secondary channel .
6971	Update the attributes of the component .
6972	Sets the compiler of the compiler .
6973	Set raw inputs .
6974	Set secondary inputs .
6975	Set extra inputs .
6976	Parse the coverage header .
6977	Parse assembly file .
6978	Get the content of a sequence .
6979	Filter contigs .
6980	Returns the length of the assembly .
6981	Write the assembly to the output file .
6982	Write the report to the output file .
6983	Remove inner loops from text .
6984	Checks for inner forks .
6985	Run insanity checks .
6986	Parse a pipeline string .
6987	Determine the source for a fork .
6988	Parse a string from a raw string .
6989	Establish a linear connection to a list of processes .
6990	Establish a connection to the sink .
6991	Add unique identifiers to the pipeline .
6992	Remove unique identifiers .
6993	Check if required files are required .
6994	Convert a header to a dictionary .
6995	Calculate hms from a string .
6996	Return the size of the given size .
6997	Get pipeline processes .
6998	Clear all processes .
6999	Update barrier status
7000	Retrieve log lines from a file .
7001	Assign the resources that are not in the process .
7002	Update process stats
7003	Parse log file .
7004	Update the inspector .
7005	Displays the overview .
7006	Updates the cursor .
7007	Handles the right left side of the screen .
7008	Returns the last lines of the log file .
7009	Prepare the static files for the pipeline .
7010	Convert a dag file to a dictionary .
7011	Returns the hash of the pipeline .
7012	Get next flow file path .
7013	Main entry point for the sample .
7014	Main entry point .
7015	Runinnuendo .
7016	Run a recipe .
7017	List all recipes .
7018	Validate a pipeline .
7019	Build the pipeline for the given task .
7020	Build the task pipeline .
7021	Defines a pipeline string .
7022	Run auto - pipeline .
7023	Return a string representation of a component .
7024	Write data to a file .
7025	Main entry point .
7026	Fix the contig names .
7027	Clean up a fastq file .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over all data in the database .
7031	Get the contig id from a contig string .
7032	Get the plot data .
7033	Write the data to the report .
7034	Main entry point .
7035	Parse assembly file .
7036	Get summary stats .
7037	Get the labels for the window .
7038	Calculate the average percentage of a sequence
7039	Calculate the gciding window for a given window .
7040	Runs the skesa .
7041	Generate a JSON report
7042	Calculate the index of a list .
7043	Parses a range of nucleotide sequences .
7044	Calculate the optimal distance between two samples .
7045	Get summary information from a file .
7046	Check the summary of a summary file .
7047	Parses the log file .
7048	Parse a process name .
7049	Add a dependency to the process .
7050	Determine if the given template is backward .
7051	Build the header .
7052	Build the footer
7053	Set the main channels .
7054	Set the main process .
7055	Set secondary channels .
7056	Set the status channels .
7057	Return a string representation of a resource .
7058	Return a string representation of a container .
7059	Returns a string representation of the parameters .
7060	Returns a string representation of the parameters .
7061	Get the manifest for the pipeline .
7062	Sets the configuration .
7063	Write a dag to a file
7064	Render a pipeline .
7065	Write the configuration files to the project .
7066	Export parameters to stdout .
7067	Export all directives .
7068	Get docker tags
7069	Build the configuration .
7070	Set kmer kmer options .
7071	Main entry point for SPADES .
7072	Gets the id of the report .
7073	Update the trace of the trace .
7074	Update the log file size .
7075	Send live report .
7076	Initialize the live report .
7077	Close the report .
7078	Convert the adapter to a file .
7079	Main entry point .
7080	Send master to the output file .
7081	%prog mash output
7082	Generate the versions of the context .
7083	%prog mash output
7084	Return a string with colored colors .
7085	Print a list of procs .
7086	Collects a list of processes .
7087	Try to guess the file compression .
7088	Gets the range range of a string .
7089	Return a list of all encodings in a range .
7090	Parse the coverage table .
7091	Filter an assembly file .
7092	Run samtools filter .
7093	Evaluate minimum coverage .
7094	Get the size of the assembly file .
7095	Main entry point .
7096	Convert camelCase name to camel case .
7097	Collects all components from the components .
7098	Main entry point .
7099	Similar to quickhull .
7100	Maps the data to the data .
7101	Perform median filter .
7102	Compute the Gaussian Gaussian kernel .
7103	Compute the SSM distance between X .
7104	Compute the sum of the n c .
7105	Perform a gaussian filter .
7106	Compute the nuclidean distance .
7107	Calculate circular shift .
7108	Compute the embedded space .
7109	Plots the output of a file .
7110	Plot the boundaries of all boundaries .
7111	Plot labels .
7112	Plot a single track .
7113	Plot a tree .
7114	Return a list of feature segments .
7115	Convert feat_segment segments into a list of features .
7116	Compute the similarity of the features .
7117	Fit the model to the dataset .
7118	Calculate the shape of a dataset .
7119	Read references from a file .
7120	Finds the estimate of an estimate .
7121	Save estimations .
7122	Returns a list of Algorithm Algorithm objects .
7123	Get the configuration for a feature .
7124	Returns a list of files in the given path .
7125	Reads hierarchy references from a file .
7126	Get the duration of a file .
7127	Write mappings to a file .
7128	Returns the file path to the given directory .
7129	Align the segments of a song .
7130	Estimate the beats of the audio .
7131	Read the annotations from the file .
7132	Compute the beat sync features .
7133	Read features from file .
7134	Write the features to the file .
7135	Returns a list of all parameter names .
7136	Compute the framesync timesync time .
7137	Calculate the frame timesync time series .
7138	Compute the features .
7139	Select features from a file .
7140	Preprocess the features .
7141	Perform postprocessing .
7142	Main entry point .
7143	Print the mean of the results .
7144	Compute the GTF results .
7145	Compute the information gain gain .
7146	Process a track .
7147	Returns the file name for the given boundaries .
7148	Processes a file and returns the results .
7149	Add a config variable .
7150	Compute all features in a file .
7151	Compute all features in a file .
7152	Calculate the cost of the Gaussian distribution .
7153	Calculate the normalization of a function .
7154	Calculate the minimum value of a function .
7155	Normalize the data .
7156	Calculate time frames for a given duration .
7157	Remove empty segments .
7158	Convenience function to create audio audio .
7159	Synchronize labels with new labels .
7160	Process segmentation level .
7161	Align the end of the end of two lists .
7162	Compute the distance between the given node .
7163	Estimate the k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k -
7164	Return the data for the given labels .
7165	Run k - wise k - means k - mean .
7166	Compute the BIC distribution of the given matrix .
7167	Calculate the magnitude of a matrix .
7168	Convert a JSON file into a bounds array .
7169	Convert a json file to a bounds array .
7170	Convert a json file to labels .
7171	Convert a JSON file to a list of beats .
7172	Compute the fft2d .
7173	Compute the label of the activation matrix .
7174	Filter the activation matrix .
7175	Get the boundaries module module .
7176	Get a module module module .
7177	Run hierarchical algorithm .
7178	Run a flat file .
7179	Runs the algorithm on the audio file .
7180	Segments a track .
7181	Process a file .
7182	Updates the weight of the model .
7183	Main entry point .
7184	Decorator for a coroutine .
7185	Calculate the accumulator .
7186	Creates a new task .
7187	Spool a generator .
7188	Send a command to the target stream .
7189	Decorator for push_url .
7190	Translate a source to a translation .
7191	Get the translation table for a given language .
7192	Print a translation table .
7193	Remove nodes from a network .
7194	Write a network to a HDF file .
7195	Create a network from a pdf file .
7196	Set the variables for the given node_ids .
7197	Aggregate accessibility variables for a given distance .
7198	Returns the indices of the nodes in the kdtree .
7199	Plot the data of the plot .
7200	Set the poi for the given category .
7201	Find nearest poi for a given distance .
7202	Compute the low connectivity of the network .
7203	Process a node .
7204	Make an OSM query .
7205	Build a query string for a node .
7206	Return a pandas DataFrame containing nodes .
7207	Check if value is a regular expression .
7208	Compare value against expectation .
7209	Decorator for a function .
7210	Compare two expressions .
7211	Trigger the given arguments .
7212	Check if the given request matches the given request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Sets the request body .
7216	Set the response body .
7217	Set a value in the container .
7218	Add functions to target .
7219	Trigger a request .
7220	Add a URL to the request .
7221	Set headers .
7222	Add headers that match the given names .
7223	Add headers match .
7224	Sets the content of the request .
7225	Add parameters to the request .
7226	Sets the body of the request .
7227	Sets the JSON request .
7228	Sets the XML document .
7229	Sends a file .
7230	Sets the status of this object .
7231	Set the error .
7232	Respond to the mock
7233	Match a request .
7234	Activate async function .
7235	Set the mock engine .
7236	Enable network networks .
7237	Create a mock instance
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Determine if the request should be used .
7242	Match a request .
7243	Return a copy of this request .
7244	Activate a function .
7245	Context manager .
7246	Add interceptors to the engine .
7247	Remove an interceptor .
7248	Get a setting for a given key .
7249	Returns the SQL for this column .
7250	Pre - save the model instance .
7251	Return the placeholder for the given value .
7252	Get the column for the given alias .
7253	Returns the placeholder for the key .
7254	Convert a yaml string into a dict .
7255	Compute the base regression regression .
7256	Compute the covariance matrix .
7257	Recursive method for recursively .
7258	Calculate the weights of the tree .
7259	Calculate the variance of a variable .
7260	Compute the explained variance .
7261	Compute the regression model .
7262	Find the best root of the tree .
7263	Sets the Tc values of Tc .
7264	Calculate the branch count for each branch .
7265	Calculate the cost of a branch .
7266	Attaches the merger to the tree .
7267	Optimize the time scale .
7268	Convert a profile to a sequence .
7269	Normalize a profile .
7270	Gets the GTR value for this Group .
7271	Set the GTR model .
7272	Set the sequence length .
7273	Attach sequences to the tree .
7274	Prepare the tree .
7275	Prepare the node tree .
7276	Calculate the distance between all leaf nodes .
7277	Recursively reconstruct the alignment of the tree .
7278	Get the mutation matrix for a branch .
7279	Returns the expanded sequence for the given node .
7280	Generate Fitch profiles .
7281	Compute the state of a node .
7282	Intersect two arrays .
7283	Calculate the sequence LHH .
7284	Calculate the likelihood of the lineage .
7285	Return the length of the given branch .
7286	Optimize the branch length .
7287	Optimize the branch length .
7288	Return the optimal length of a branch .
7289	Optimize sequences and branch lengths .
7290	Return a copy of the alignment .
7291	Compute the Q .
7292	Creates a new GTR instance with the given parameters .
7293	Creates a model based on the model .
7294	Checks if the GTR rate is fixed .
7295	Compute the probability of a sequence .
7296	r Compute the optimal solution of a sequence .
7297	Computes the optimal optimal distribution for the given sequence .
7298	Calculate the probability of a profile .
7299	Evaluate the profile of a profile .
7300	Calculate the log likelihood of a sequence .
7301	Set the branch length .
7302	Calculate the clock filter .
7303	Plot the root node to the tree .
7304	Resolve multiple merges .
7305	Print the log likelihood of the tree .
7306	Add a coalescent model to the tree .
7307	Find the best root of the tree .
7308	Ensure the tree is in a tree .
7309	Create GTR model .
7310	Read a VCF file .
7311	Recursively recreate ancestral sequences .
7312	Calculate FWHM .
7313	Calculate the delta distribution of a given point .
7314	Multiplies two distributions .
7315	Assign dates from the tree .
7316	Setup TreeRegression .
7317	Make a time tree .
7318	Calculate the likelihood of the tree .
7319	Convert a list of days to a date .
7320	Calculate the date uncertainty of a node .
7321	Calculate the maximum probability for a given node .
7322	Find the minimum value of an interpolation object .
7323	Finds the median of an interp object .
7324	Convert datetime to a date .
7325	Create a new instance from a clock model .
7326	Connect to Guacd server
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Start the connection .
7332	Convert unicode string to UTF - 8 .
7333	Load an instruction .
7334	Encode an argument .
7335	Encode the instruction .
7336	Return the URL for the class .
7337	Return the URL of this instance .
7338	Return the URL for the class .
7339	Download file .
7340	Return the parent job object .
7341	Ask the user to enter the credentials .
7342	Login to the solver .
7343	Print user info .
7344	Print a user .
7345	Returns a new instance with the specified filters .
7346	Returns a new chromosome with the specified range .
7347	Returns a new chromosome with the specified position .
7348	Get a list of facet facets .
7349	Process filters .
7350	Return the next page .
7351	Execute query .
7352	Migrate this dataset to another dataset .
7353	Runs the solver .
7354	Download a vault folder .
7355	Construct a new instance from the given values .
7356	Log out the OAuth2 client .
7357	Perform a request .
7358	Retrieve the child task .
7359	Cancels the task .
7360	Parse SNPE information .
7361	Convert a row to a dictionary .
7362	Get the authentication credentials .
7363	Save the configuration to a file .
7364	Format a value as a string .
7365	Normalize tabular data .
7366	Build a row of data cells .
7367	Build a horizontal line of columns .
7368	Prefix cells in a row .
7369	Format a table .
7370	Migrate this dataset to another dataset .
7371	Validate full path .
7372	Upload a file .
7373	Validate the full path .
7374	Validate the given URL .
7375	Add files to manifest .
7376	Iterate over records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new output format .
7380	Formats the output of data .
7381	Iterate over a list of tables .
7382	Get the user s application config directory .
7383	Return a list of system config directories .
7384	Read the default configuration .
7385	Read configuration files .
7386	Get user config file .
7387	Get system config files .
7388	Return a list of file paths .
7389	Write the default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace all characters in a string .
7393	Execute a sequence of commands .
7394	Apply options to the command .
7395	Apply an option to the command .
7396	Initialize options .
7397	Run pep8radius .
7398	Run the command .
7399	Truncate a list of strings .
7400	Formats a list of numbers .
7401	Format a row .
7402	Create a vertical table .
7403	Generate a list of tables .
7404	Render a template file .
7405	Checks if the given type is numeric .
7406	Checks if the given type is a bool .
7407	Check if a type is a binary type .
7408	Generate a key from a template .
7409	Generate a key pair pair .
7410	Find all objects matching the given template .
7411	Insert an image into an image .
7412	Export a gene panel .
7413	Returns the first day of the given weekday .
7414	Repeat a day .
7415	Recursively repeat the last time .
7416	Calculate the number of weeks .
7417	Handle a single chunk .
7418	Generate a list of variants for a collaborator .
7419	Export a list of sample variants .
7420	Export a transcript file .
7421	Update a user .
7422	Generate a list of str variants for a specific institute .
7423	Retrieve a single variant .
7424	Get a string for a specific variant .
7425	Verify a variant .
7426	Export a clinvar export .
7427	Get cancer variants
7428	Calls a variant for a specific variant .
7429	Handle an evaluation .
7430	Assign a classification .
7431	Uploads a panel to a file .
7432	Downloads and returns a zip file .
7433	Return a dictionary of genes by alias .
7434	Add incomplete peetrance information .
7435	Link gene genes .
7436	Perform MME request .
7437	Get a list of connected nodes
7438	Get the coordinate coordinates for a given chromosome .
7439	Get the subcategory for a given category .
7440	Calculate the length of the length of the variant .
7441	Determine the end of the given position .
7442	Parse the coordinates of a variant .
7443	%prog file
7444	Create a new panel
7445	Update a panel .
7446	Export panel .
7447	Edit a panel .
7448	Load a delivery report
7449	Return a dictionary of hpo terms .
7450	Run the whitelist .
7451	Build phenotype object .
7452	Get gene information for a hgnc .
7453	Convert a query to JSON .
7454	List all institutes .
7455	Display transcripts .
7456	Return a list of events for a given month .
7457	Get a list of variants for a particular variant .
7458	Return a list of variants for a given institute .
7459	Generate a variant of a variant .
7460	Create a variant of a variant .
7461	Parse a variant object .
7462	Generate the header header for the variant .
7463	Get the variant information for a gene .
7464	Get predictions from genes .
7465	Create a Variant object for the variant .
7466	Find bai file .
7467	Get observations for a particular variant .
7468	Parse a gene object .
7469	Return a string representation of a transcript .
7470	Return the end position of the variant .
7471	Return the frequency of the variant .
7472	Generate a human - readable human - readable human readable string .
7473	Generate a link for a variant .
7474	Get the cosmic link for a variant .
7475	Return a link to the beacon .
7476	Generate a URL for a variant
7477	Return the human - readable human - readable human - readable human readable human readable .
7478	Return the expected inheritance of a variant .
7479	Return a list of callers for the given variant object .
7480	Return a dict of variant variants .
7481	Export a clinvar to a dictionary .
7482	Return a dict of clinvar submission for the given institute .
7483	Return the ACM for a specific variant .
7484	Submit a variant .
7485	Convert an evaluation object into an Evaluation object .
7486	Upload a panel to a panel
7487	Create a CSV file for the given institute .
7488	Export all genes .
7489	Parses and returns a list of acnsig sessions .
7490	Parse compound compounds .
7491	Export all genes from a build
7492	Builds a single Individual object from the database .
7493	Load variants .
7494	Return a response with the given name .
7495	Runs a collection of collections .
7496	Show an institute .
7497	Update an institute .
7498	Get file handle .
7499	Calculate the total number of seconds .
7500	Returns the next non - zero and prev .
7501	Check the year and month .
7502	Calculate the day of a week .
7503	Parse case data .
7504	Add peddy information to peddy file
7505	Parse a single sample .
7506	Parse individual individuals .
7507	Parse a case .
7508	Parse a pedigree file .
7509	Build a evaluation object .
7510	Export the mitochondrial variants for the case .
7511	Checks if pvs is a path .
7512	Determine if the path is a valid path .
7513	Determines whether or not the bs are likely to be likely .
7514	Returns the prediction of the ACM .
7515	Add genes to the variant .
7516	Fetch variants from a case .
7517	Returns a list of variants for the given institute .
7518	Retrieve a variant from the database .
7519	Returns a list of all genes in the database .
7520	Return a list of variants that have been verified .
7521	Gets the causatives of the given institute .
7522	Return a list of variations of a specific case .
7523	Return a generator that yields the variant of the given variant .
7524	Delete all variants in the case .
7525	Return a list of variants that match the given variant .
7526	Evaluate the evaluated variants .
7527	Get the VCF file for a specific region .
7528	Retrieve a list of variants for a given sample .
7529	Get a MongoDB connection .
7530	Get a list of objects from a form submission .
7531	Get the header header for the submission .
7532	Return a list of CSV submission lines .
7533	Load the transcripts from a set of transcripts .
7534	Load a gene panel .
7535	Build an exon from an exon .
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete a user .
7539	Delete genes collection .
7540	Delete exons .
7541	Delete a case .
7542	Show individual individuals .
7543	Parses a list of MatchMaker objects .
7544	Show all cases in the given institute .
7545	Load a user .
7546	Login user .
7547	Build an institute .
7548	Delete an event .
7549	Create a new event .
7550	Fetch all comments for the given institute .
7551	Returns the events for the given user .
7552	Add a phenotype to the gene .
7553	Remove phenotype term .
7554	Create a comment .
7555	Return a list of genotypes for a variant .
7556	Checks if the given coordinates are in the given coordinates .
7557	Get hpo terms
7558	Export transcripts .
7559	Load exons from a build
7560	Load a region .
7561	Get all events for a month .
7562	Returns a list of active records .
7563	Parse the requirements file .
7564	Return the existing gene for the given panel .
7565	Update a gene panel
7566	Create a new gene panel
7567	Export a panel .
7568	Get archive information .
7569	Migrate the scout case .
7570	Migrate an archive to the archive .
7571	Runs a scan .
7572	Load the hgnc genes from the hgnc file .
7573	%prog hpo
7574	Create a Flask app .
7575	Configure the extension .
7576	Register the blueprint .
7577	Configure coverage .
7578	Return a list of gene aliases .
7579	Build a panel .
7580	Export verified variants .
7581	Export variants .
7582	Generate a VCF entry .
7583	Run mongo server .
7584	Generate md5 key .
7585	Initialize the database .
7586	Initialize the database .
7587	Run scout index .
7588	Run the database setup .
7589	Run the demo demo .
7590	Setup the server .
7591	Show the institutes .
7592	Parse the genetic model information .
7593	Display the panel panels .
7594	Add an institute .
7595	Update an institute .
7596	Fetch a single institute .
7597	Check if a date is a valid date
7598	Convert a date into a datetime object .
7599	Export hpo_gen_term
7600	Parse a rank score entry .
7601	Add a user .
7602	Check if MongoDB connection is valid .
7603	Initialize MongoDB client .
7604	Load a delivery report .
7605	Adds a user to the database .
7606	Run a pileup command .
7607	Load a list of exons from a list of genes .
7608	Update compound compounds .
7609	Add gene links to genes .
7610	%prog hgnc
7611	Parse hgnc file .
7612	Parse hgnc genes .
7613	Gets a single clinvar submission .
7614	Update the submission id for the given submission .
7615	Get the clinvar id for a submission .
7616	Add a new submission to the submission .
7617	Update the clinvar submission status .
7618	Retrieve all clinvar submissions for a given user .
7619	Delete a clinvar object
7620	Convert case_id_id to a dict
7621	Parse hpo_obo_obo .
7622	Return a dict of all genes in the store .
7623	Return a list of genes for a given hgnc_id .
7624	Get a list of genes
7625	Check if all panels exist .
7626	Load all SNV variants for a particular case .
7627	Load a Scout from the database .
7628	Decorator to render a function .
7629	Get institute information for a given institute .
7630	Return a list of institutes .
7631	Gets the hgnc id for a gene .
7632	Update a panel .
7633	Load disease terms .
7634	Loads the disease terms from the hpo file .
7635	Parse a variant of a variant .
7636	Parse the frequency of a variant .
7637	Parse SV_Frequency .
7638	Display all users .
7639	Build the hgnc gene .
7640	Load a panel .
7641	Load an atom panel .
7642	Compare two genes .
7643	Updates the MIME version for the new genes .
7644	Insert a gene panel .
7645	Get a single panel .
7646	Delete a panel .
7647	Fetch a gene panel .
7648	Return a list of genes for a specific gene .
7649	Build a list of genes for a gene .
7650	Update a panel .
7651	Add a panel to the panel .
7652	Apply pending updates to the panel .
7653	Return a set of clinical symbols for a given case .
7654	Get a list of cases for the given institute .
7655	Send message to SMTP .
7656	Load indexes .
7657	Update indexes .
7658	Drops all indexes .
7659	Build a Mongo query .
7660	Build a Mongo query .
7661	Add clinsig to MongoDB query
7662	Add coordinates to the query .
7663	Add genes to the query .
7664	Drops a scout .
7665	Parses a CSV file .
7666	Build clnsig object .
7667	Load a gene from the database .
7668	Load a transcript .
7669	Load a transcript from the database .
7670	Fetch a gene from hgnc .
7671	Get the Hgnc ID for a Hgnc symbol .
7672	Fetch the genes for a given Hgnc symbol .
7673	Fetch all genes in the database .
7674	Returns the number of genes in the database .
7675	Drops the hgnc_gene collection .
7676	Drops the transcripts collection .
7677	Drops the exons collection .
7678	Fetches all the ensembl transcripts .
7679	Convert hgnc symbols to a dictionary .
7680	Find a gene by alias .
7681	Fetch genes by alias .
7682	Get ensembl genes
7683	Convert hgnc to hgnc symbol .
7684	Add hgnc_id to a list of genes .
7685	Return a dictionary of intervals for a chromosome .
7686	Run omim integration .
7687	Return a dictionary of cases for a given institute .
7688	Get information about a specific institute .
7689	Perform a match maker for a matchmaker .
7690	Match MME match maker .
7691	Delete a matchmaker
7692	Generate a report report
7693	Generate PDF report .
7694	Determine if a case is diagnosis .
7695	Add a phenotype to the database .
7696	Remove phenotypes .
7697	Delete an event .
7698	Update the status of an institute .
7699	Assigns an institute .
7700	List HOTer terms .
7701	Mark a variant .
7702	Mark a specific variation .
7703	Displays a delivery report .
7704	Shows a share .
7705	Reverse a case .
7706	Open a research .
7707	Send a VCF to a file .
7708	Send multiqc .
7709	Get a list of cases for a specific case .
7710	Return the contents of a case .
7711	Get coverage report for a specific sample
7712	Returns a list of submissions for a given user .
7713	Export the samples to a file .
7714	Update the synopsis .
7715	Return a list of diseases for a given HPO .
7716	Convert a VCF to a CCF file .
7717	Return a dictionary of information for a single institute .
7718	Get the unevaluated results for the given institute .
7719	Add a new MME .
7720	Delete a matchmaker
7721	Returns a dictionary of matches for a given case .
7722	Perform a match maker .
7723	Updates the genes for the given build .
7724	Parse the callers .
7725	Build a transcript .
7726	Load an institute .
7727	Parses the cadd transcript .
7728	Load a case .
7729	Update a variant .
7730	Update variant rank .
7731	Update compound compound compounds .
7732	Update compound compound objects .
7733	Update compound compounds .
7734	Updates the compounds for the given case .
7735	Load a variant .
7736	Insert a variant .
7737	Load variants from the database .
7738	Assign a case to a case .
7739	Create a new case .
7740	Determine the diagnosis .
7741	Update the checked status of a case .
7742	Order validation for a variant .
7743	Returns a list of Sanger objects ordered by the given institute .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Update the dismiss variant .
7747	Update the ACM .
7748	Parses a sequence of IDs into a dictionary .
7749	Parses a simple ID .
7750	Generate the MD5 document ID for a specific variant .
7751	Convert genes to hgnc
7752	Return a new variant ID for a variant .
7753	Get the number of cases in the database .
7754	Updates the list of genes for the given case .
7755	Fetch a case .
7756	Delete a case .
7757	Adds a case to the database .
7758	Replace a case .
7759	Update the case id for the case .
7760	Submit an evaluation .
7761	Returns a list of evaluations for a given variant .
7762	Parse transcript lines .
7763	Parses the genes from the query .
7764	Parses the transcript request .
7765	Parse ensembl file .
7766	Parse ensembl genes .
7767	Parse ensembl exons .
7768	Parse the ensembl request .
7769	Initialize logger .
7770	Parse a line from a line .
7771	Parses a MIMM file .
7772	Get a set of phenotypes from a genemap file .
7773	%prog file
7774	Convert string to float
7775	Formats a month .
7776	Format a day .
7777	Formats a month name .
7778	Generate the popover header .
7779	Get information about a panel .
7780	Parse a gene information .
7781	Parse a list of genes .
7782	Parse a gene panel panel .
7783	Show a list of diseases
7784	Delete HPO terms .
7785	Return a dictionary of users .
7786	Parse the conservations
7787	Parse the conservation of a variant .
7788	Get general case information .
7789	Gets a list of cases for each case .
7790	Render the given context .
7791	Get year and month and month .
7792	Check if a date is cancelled .
7793	Fetch a hpo term .
7794	Search for HPO terms .
7795	Find a disease term .
7796	Returns a list of all diseases associated with a gene .
7797	Load a disease term .
7798	Generate a list of genes for a given term .
7799	Read data from HDF5 file .
7800	Set the frequency of the frequency
7801	Sets the time axis for a file .
7802	Read a filterbank file .
7803	Compute the lst location of the segment .
7804	Generate a random DC bin .
7805	Print information about the file .
7806	Calculate the extent .
7807	Plot the waterfall .
7808	Plot the time series .
7809	Write the filter to a file .
7810	Calculate the median bandpass .
7811	Convert the input data to the mean .
7812	Apply the MUC to the MUC .
7813	Calculate the values of the pols .
7814	Calculate the fracpols of a string
7815	Write waterfall to a waterfall .
7816	Find the closest value in xarr .
7817	Rebuild a darray .
7818	Unpack nbit data .
7819	Calculate the difference between two streams .
7820	Plot Stokes Stokes Stokes Stokes .
7821	Plot the data of a diode .
7822	Plot the gain offsets .
7823	Open a file .
7824	Setup selection range .
7825	Calculate the size of the file .
7826	Calculate the shape of the selection .
7827	Setup channels .
7828	Sets the frequencies for the channel .
7829	Populate the timestamps .
7830	Populate the frequencies .
7831	Calculate the number of channels .
7832	Calculate the number of blobs .
7833	Determine if the selection is high .
7834	Read data .
7835	Read all data .
7836	Read a row from the file .
7837	Read data from the container .
7838	Update the header .
7839	Print information about the file .
7840	Write to file
7841	Write to hdf5 file
7842	Write data to hdf5 file .
7843	Get blob dimensions .
7844	Get the chunk size for the file .
7845	Grab data from the data .
7846	%prog tool
7847	Read first header from file .
7848	Find the number of blocks in the file .
7849	Print statistics .
7850	Plot the histogram .
7851	Generate filter header .
7852	Find the header size of a file .
7853	Tool tool tool tool .
7854	%prog tool
7855	Calculate a fold of data .
7856	Integrate a waterfall .
7857	Calculate the calfluxes .
7858	Calculate the center of a channel .
7859	Calculate the f_ratios .
7860	Calculate the diode spec .
7861	Calculate the time series
7862	Calculate fluxes for fluxes
7863	Return the header of a file .
7864	Check if a file is a filterbank .
7865	Replace the header with the given keyword .
7866	Generate signature header .
7867	Convert angle to sigproc .
7868	Calculate the number of integers in a file .
7869	Convert this frame to a dictionary .
7870	Creates a subcommand for a recurrence .
7871	Create a zonefile parser .
7872	Remove comments from text
7873	Add the default name to the text .
7874	Parse a record .
7875	Parse a list of json files .
7876	Parse a zone file .
7877	Quote a field with the given field .
7878	Parse a schema string .
7879	Convert classes to Python package .
7880	Generate a class source code .
7881	Decorator to disable auto - store .
7882	Convert a record into a dictionary .
7883	Load a record from a JSON dictionary .
7884	Load a JSON record .
7885	Add a record to the database .
7886	Get the schema for the given record .
7887	Return a dict representation of this object .
7888	Mixin classes .
7889	Create a new Metaclass instance .
7890	Return a dictionary representation of a record .
7891	Get the root schema for a record .
7892	Generator for mr_reader
7893	Write output to output stream .
7894	Push a key into an OrderedDict .
7895	Returns a search result .
7896	Returns a search result .
7897	Return all entities in this resource .
7898	Extracts the entity from the collection .
7899	Return a new quote for the given quote .
7900	Escape a string .
7901	Compute the elementary rotation matrix .
7902	Calculate the covariance matrix .
7903	Calculate the average value of a vrad error .
7904	Calculate standard error
7905	Calculate the magnitude of a G .
7906	Calculate the magnitude of the magnitude of the magnitude of the magnitude .
7907	Creates a plot of a plot .
7908	Calculate the average number of transits .
7909	Returns the angular distance between two angles .
7910	Transform a cartesian coordinates to a cartesian coordinates .
7911	Transform the SkyCoordinates to a spherical coordinates .
7912	Transforms the covariance matrix to the matrix .
7913	Returns the error scaling factor for the given observable .
7914	Creates a plot of the plot .
7915	Creates a plot of a plot .
7916	Decorator that returns a function that returns the result .
7917	Decorator to wrap an exception .
7918	Uniquify a value .
7919	Iterate over each item in the collection .
7920	Removes all elements from the collection .
7921	Return a collection of items from the collection .
7922	Return a collection of items from the collection .
7923	Return a collection of items from the collection .
7924	Returns a new collection of elements .
7925	Find a node .
7926	Returns the system path to the system .
7927	Iterate through a group .
7928	Iterate over all registered options .
7929	Return a string representation of an event .
7930	Builds a list of events from the given events .
7931	Print the results of the kernel .
7932	Print the results of the benchmark .
7933	Prints the results of a layer condition .
7934	Clean up the code .
7935	Round a number to a number .
7936	Return a list of blocks in the given indices .
7937	Calculate cache access .
7938	Calculate the cycles .
7939	Analyze the kernel .
7940	Analyze the IAC .
7941	Strip all lines from a list of lines .
7942	Strip unreferenced labels .
7943	Select the best block from the assembly .
7944	Selects a pointer to a block pointer .
7945	Print a list of blocks in the assembly file .
7946	Inserts lines into a list of lines .
7947	Run an IAC analysis .
7948	Main entry point .
7949	Simulate the kernel .
7950	Generate a space between start and stop .
7951	Get the last modified date .
7952	Check if the arguments are valid .
7953	Main entry point .
7954	Main entry point .
7955	Create a symbol .
7956	Transform a multi - dimensional array declaration to an array .
7957	Transform a multi - dimensional array into an array .
7958	Finds the type of the given AST node .
7959	Convert a function to iterable .
7960	Checks if the kernel has a mixin .
7961	Sets a constant .
7962	Substitute constants .
7963	Returns a dictionary of variables for the given variables .
7964	Calculate relative offset .
7965	Remove duplicate accesses .
7966	Return the length of the iteration .
7967	Iterate over the loop stack .
7968	Return an ordered list of free symbols .
7969	Compiles a list of variables .
7970	Computes the relative distance between the variables .
7971	Convert global iterator to indices .
7972	Returns the global iterator of all variables .
7973	Convert indices to global iterator .
7974	Returns the maximum number of variables in the loop .
7975	Print the kernel info .
7976	Print the information about the variables .
7977	Print all constants .
7978	Print the kernel code .
7979	Convert math ast to symbol .
7980	Get the offset of an array of arrays .
7981	Get the basename of an array .
7982	Get the index type of the loop .
7983	Build a list of declarations .
7984	Return a list of array declarations .
7985	Return a list of loop statements .
7986	Build an array of array declarations .
7987	Find the innermost loop .
7988	Builds the initializer of the kernel .
7989	Build a dummy block for the kernel .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get the kernel code .
7993	Build a kernel call .
7994	Returns the main code for the code .
7995	Perform analysis analysis .
7996	Build the executable .
7997	Convert a string to a sympy symbol .
7998	Get the identifier of the file .
7999	Get the last modified date .
8000	Return a list of cached caches .
8001	Calculate the bandwidth of the benchmark .
8002	Get compiler .
8003	Parse a perfctr event .
8004	Ensure that there is no overlap .
8005	Returns the path to the header file .
8006	Align an iteration of the given iteration .
8007	Get the number of load_count
8008	Get the number of hits .
8009	Get the total number of misses .
8010	Get the number of stores .
8011	Get the number of evicts .
8012	Get information about the current memory .
8013	Replace environment variable with given name .
8014	Configure arggroup arguments .
8015	Report the results .
8016	Parse the description .
8017	Schedule a retry .
8018	Build a purchase item .
8019	Records a purchase .
8020	Get the contents of a course .
8021	Get the details of a course run .
8022	Update the unenrolled list .
8023	Send a course refund notification .
8024	Send an offer assignment notification .
8025	Get the logger configuration .
8026	Attempt to retry an order .
8027	Fulfills an order .
8028	Gets the Sailthru client .
8029	Get a key from the cache .
8030	Sets a value to the cache .
8031	Returns the value of the configuration variable .
8032	Get the filename for the given environment variable .
8033	Get the value of the key by version .
8034	Return the Eplus version of the Eplus package .
8035	Get the file references .
8036	Populate device data from JSON data .
8037	Return a list of external files .
8038	Set default values .
8039	Prepare the extensible data .
8040	Returns the name of the extended field .
8041	Return a dictionary of short references .
8042	Returns the value of the given column .
8043	Update the value of the given value .
8044	Update the device .
8045	Set default values .
8046	Add fields to this record .
8047	Pop the value at the given index .
8048	Insert a value at the given index .
8049	Delete the device .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex pattern for the given line .
8053	Return the remaining duration of the given time .
8054	Serialize the event .
8055	Perform HTTP request .
8056	Get a list of available services
8057	Try to create a directory .
8058	Configure a service .
8059	Register the agent state .
8060	Set recording state .
8061	Update the record status .
8062	Update agent state .
8063	Return the pyca configuration file .
8064	Update the configuration file .
8065	Check if the agent is enabled .
8066	Initialize the logger .
8067	Show the preview of the recording .
8068	Serve an image .
8069	Run all modules .
8070	Parse a VCalendar .
8071	Get a list of scheduled events .
8072	Main loop loop .
8073	Run the agent loop .
8074	Make an error response .
8075	Creates a JSON response .
8076	Return the status of the service .
8077	List events .
8078	Get a record by uid
8079	Delete an event
8080	Modify an event .
8081	Get the configuration parameters for the given properties .
8082	Ingest the ingest service .
8083	Start recording event .
8084	Render an HTML fragment .
8085	Return a list of all resources .
8086	Convert this object to a dictionary .
8087	Create a Fragment .
8088	Add content .
8089	Add a text resource .
8090	Add a URL to the fragment .
8091	Initialize the JavaScript object .
8092	Convert all resources to HTML .
8093	Convert a resource to HTML .
8094	Respond to a GET request .
8095	Render a standalone response .
8096	Render a standalone HTML fragment .
8097	Calculate p - p - p - p - p - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
8098	Convert a list of values to an array .
8099	Get the values from the error table .
8100	Compute the posterior probability of the experiment .
8101	Calculate the final error of the data table .
8102	Compute the summary table summary of a dataset .
8103	Calculate error statistics .
8104	Calculate the cutoff cutoff for a given threshold .
8105	Compute the score of a classifier .
8106	Implements the inference algorithm .
8107	Generate a peptide .
8108	Convenience method to infer the protein from the input file .
8109	Subscample a file .
8110	Reduce input file to output file .
8111	Backpropagate the input file .
8112	Filter sqmass files
8113	Get a group by its ID .
8114	Create a new group .
8115	Delete a group .
8116	Get members of a group .
8117	Update members of a group .
8118	Get the number of effective members of a group .
8119	Checks if the group is effective .
8120	Modify configuration file .
8121	Create a dataset .
8122	Decrypt the contents of the given key .
8123	Get stdout from stdin .
8124	Get stdout from stdout .
8125	Get stderr output from stdout .
8126	Get the output of the command .
8127	Yield the stdout of the stdin .
8128	Return the stdout of the stdout .
8129	Return the stdout of the stderr .
8130	Wrapper for debugging .
8131	List empty accounts .
8132	List container contents .
8133	Wrapper for stdout .
8134	Wrapper for stderr .
8135	Write an error message .
8136	Print help information .
8137	Print usage information .
8138	Print version information .
8139	Perform a request .
8140	Create a new account .
8141	Delete an account .
8142	Put a container .
8143	Perform a HEAD request .
8144	Get an object from the container .
8145	Put an object into the container .
8146	Perform a POST request .
8147	Resolve an option with the given section .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Show auth information .
8151	Generate a temporary URL .
8152	Quote a value .
8153	Fetches a list of containers .
8154	Get a client .
8155	Encrypt data from stdin .
8156	Decrypt an encrypted stream .
8157	Upload a directory structure .
8158	Put an account .
8159	Put a container into a container .
8160	Create a multipart request body .
8161	Create a container .
8162	Execute a tempurl .
8163	Prints information about x_trans_id .
8164	Print help for the command .
8165	Check if the buffer is empty .
8166	Encrypt the given key .
8167	Get the status of a repository .
8168	Get a pull request .
8169	Get pull requests .
8170	Apply the forwards to the database .
8171	Returns a list of slider items for a given amount .
8172	Render a SliderItem
8173	Acquire a reader .
8174	Release the reader .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task .
8179	Return a list of tasks .
8180	Return a dictionary representation of this object .
8181	Create a Task instance from a dict .
8182	Run a Perceval job .
8183	Initialize the archive manager .
8184	Execute the backend .
8185	Execute the backend .
8186	Create an Elasticsearch index .
8187	Create an Elasticsearch mapping .
8188	Generate JSON encoder .
8189	Write items to writer .
8190	Add a new task .
8191	Cancel a task .
8192	Return all items in the queue .
8193	Validate arguments .
8194	Parse archive arguments .
8195	Perform a job .
8196	Schedule a job .
8197	Cancel a job .
8198	Start the job listener .
8199	Listen for messages .
8200	Schedule the scheduler .
8201	Schedule a task .
8202	Cancel a task .
8203	Handle a job .
8204	Handle a failed job .
8205	Build job arguments .
8206	Retrieve a secret from the system .
8207	Register a view .
8208	Register a view .
8209	Reverse an action .
8210	Return the name of the view .
8211	Returns the version of the given version .
8212	Resolve an alias .
8213	Get the engine for the given scheme .
8214	Parse a path .
8215	Get database configuration from url .
8216	Parse a database url .
8217	Create a user .
8218	Return a response for a user .
8219	Create a password change .
8220	Build a url field .
8221	Parse a boolean value .
8222	Parse an integer value .
8223	Return a parser for the given type .
8224	Get settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode a string .
8227	Create a field from a dict .
8228	Create a validator from a dict .
8229	Compute cartesian product .
8230	Return a list of unique points .
8231	Convert the kwargs to a dictionary .
8232	Decorator for logging .
8233	Try to create a directory .
8234	Get a list of strings .
8235	Renames a log file .
8236	Set the logger .
8237	Extract variables from a trajectory .
8238	Show progress bar .
8239	Replace the arguments in the given parser .
8240	Convert parser to string .
8241	Find multi - processor options .
8242	Find multiproc dictionary .
8243	Check the log config .
8244	Parse the log file .
8245	Handle a dict of log_config
8246	Make a list of stdout handlers .
8247	Finalize the tool .
8248	Starts the stream .
8249	Write a buffer to the stream .
8250	Return True if the results are equal .
8251	Check if two parameters are equal .
8252	Decorator for manual run .
8253	Decorator for deprecated functions .
8254	Decorator to decorate a function .
8255	Decorator for deprecated keyword arguments .
8256	Perform a retry .
8257	Add a prefix to the class .
8258	Add parameters to the model .
8259	Run a network .
8260	Calculate the euler evolution .
8261	Add parameters to the function .
8262	Compute the difference between two values .
8263	Create a storage service .
8264	Create a new HDF5StorageService instance .
8265	Add parameters to the simulation .
8266	Computes the difference between two values .
8267	Compact hdf5 file .
8268	Determine if the parameter is explored .
8269	Build the equation of the model .
8270	Prepare the model for the model .
8271	Build the model .
8272	Build the network model .
8273	This method is used to build a network .
8274	Build the network connections .
8275	Add parameters to the simulation .
8276	Compute the fano factor of a neuron .
8277	Compute the meanFano factor .
8278	Analyze the network .
8279	Add a subrun to the network .
8280	Add the monitor to the network .
8281	Create a folder for the plot .
8282	Plot a result .
8283	Print a plot of spikes .
8284	Runs the analysis .
8285	Gets the number of tuples .
8286	Explicitly explore a batch .
8287	Gets the variables of this node .
8288	Returns the function function for this node .
8289	Set the name of this object .
8290	Set the details of the build .
8291	Convert a node to a message .
8292	Remove a subnode from the tree .
8293	Delete a node .
8294	Remove a node .
8295	Remove a node from the given branch .
8296	Translate a shortcut name .
8297	Add prefix to the root node .
8298	Determine the type of the tree .
8299	Add a generic node .
8300	Add a node to the tree .
8301	Add a link to the root node .
8302	Check if a list of names are valid .
8303	Create a new group .
8304	Create a new instance of the given parameter .
8305	Sets the details of a node .
8306	Iterate over the nodes in the tree .
8307	Creates an iterator for a node .
8308	Recursive traversal of a node .
8309	Performs a fast search on a node .
8310	Search for a node .
8311	Search for backwards compatibility .
8312	Gets the children of this node .
8313	Create a group from storage .
8314	Create a leaf node from storage .
8315	Return a list of directory names .
8316	Return a tree representation of the tree .
8317	Return the parent node .
8318	Add a group .
8319	Add a link to the network .
8320	Remove a link from the network .
8321	Add a leaf node .
8322	Remove a node from the parent .
8323	Remove a child .
8324	Return True if the item contains the given item .
8325	Get the default value for the given name .
8326	Get the children of this node .
8327	Returns a copy of the groups .
8328	Return a copy of the leaves .
8329	Get the list of links .
8330	Store a child .
8331	Store the trajectory .
8332	Load a child node .
8333	Load the trajectory .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a configuration group .
8341	Add a configuration .
8342	Evaluate the maximum fitness .
8343	Add commit variables .
8344	Make a git commit .
8345	Flatten nested dictionaries .
8346	Recursively nest nested dictionaries .
8347	Create a progress barbar .
8348	Get the arguments for a function .
8349	Returns a dictionary containing the matching keyword arguments .
8350	Format a timestamp .
8351	Convert a socket to a TCP socket .
8352	Create a directory .
8353	Reset the index .
8354	Get the remaining time for the given index .
8355	Convert this object to a dictionary .
8356	Remove an annotation .
8357	Return a string representation of f_ann .
8358	Make an ordinary result .
8359	Make a copy of a result .
8360	Create a shared data object
8361	Sends a request to the storage .
8362	Get the data node .
8363	Check if item is supported .
8364	Create a shared data object
8365	Modify multi - process results .
8366	Lock a client .
8367	Send shutdown signal .
8368	Close the connection .
8369	Start the client .
8370	Send a request to the server .
8371	Acquire lock .
8372	Listen for messages .
8373	Put data into queue .
8374	Determines the pid of the connection .
8375	Handle data .
8376	Runs the process .
8377	Receive data from the queue .
8378	Receive data from the server .
8379	Store data in the storage .
8380	Store a message in the store .
8381	Store a list of trajectory references .
8382	Decorator to create a new function .
8383	Collect options from a section
8384	Collect configs from config
8385	Interpret the configuration .
8386	Add parameters to trai .
8387	Convert a rule number to an array .
8388	Make a random state .
8389	Plot a pattern .
8390	Compute the cellular automaton for a given rule .
8391	Compute all the patterns for each rule .
8392	Called when the node is updated .
8393	Gets the view group .
8394	Loads the given message .
8395	Store a message .
8396	Load a list of messages from an iterable .
8397	Checks to see if the traf properties are set .
8398	Store a list of messages .
8399	Close the underlying HDF5 file .
8400	Extracts the information about the file .
8401	Creates a backup of a traj file .
8402	Read out a row from a row .
8403	Prepare a traj5 segment .
8404	Load meta data from traj .
8405	Load a sub - branch .
8406	Check the version of the trajectory .
8407	Fill the run table .
8408	Load the explorations .
8409	Store explorations .
8410	Make a list of tables for the given tables .
8411	Store a trajectory .
8412	Store a subtree in the tree .
8413	Create a leaf node .
8414	Load nodes from a tree .
8415	Store the nodes in the tree .
8416	Add a row entry to the table .
8417	Create a table or create a table .
8418	Get node by name .
8419	Recursively set all the attributes to recursively .
8420	Convert data to native type .
8421	Add a row to the table .
8422	Convert a row into a table .
8423	Extract data from an INSERT table .
8424	Convert a string to a truncated string .
8425	Create a new hdf5 group .
8426	Create a new HDF5 group .
8427	Recursively store annotations for an item .
8428	Load annotations from node .
8429	Store a group in a group .
8430	Load a group from a group .
8431	Loads all the vdf files from the HDF5 file .
8432	Extract missing flags from data_dict .
8433	Add comment to the table .
8434	Add meta information to the group .
8435	Create a store from a dictionary .
8436	Store the value of the given instance .
8437	Write a shared array to a shared array .
8438	Write a shared table .
8439	Write a dictionary to a nested object .
8440	Write dataframe to pandas data .
8441	Write data into a new array .
8442	Write an array into the HDF5 file .
8443	Delete a link .
8444	This method is used to remove a parameter or group .
8445	Write data into a table .
8446	Make a description of a table .
8447	Retrieve a table column .
8448	Returns the maximum length of a list of strings .
8449	Recursively load the contents of a file .
8450	Read a dictionary of dictionaries .
8451	Reads the shared data from the storage .
8452	Read data from a table .
8453	Read an array of data .
8454	Load a trajectory .
8455	Return the name of a set .
8456	Set the properties of the device .
8457	Add dynamic imports .
8458	Set the name of the run .
8459	Iterate over the trajectory .
8460	shrink the trajectory .
8461	Add a parameter to the trajectory .
8462	Set a preset parameter .
8463	Prepare the experiment .
8464	Retrieves a single value from the run .
8465	Check if the run is completed .
8466	Remove expanded parameter from disk .
8467	Copy a node from a node .
8468	Explicitly explore the trajectory .
8469	Update the run information .
8470	Add a single run information .
8471	Lock all parameters .
8472	Lock the derived parameters .
8473	Finalize the run .
8474	Load the skeleton .
8475	Loads a vypet .
8476	Create a backup .
8477	Make a list of wildcards .
8478	Merge two trajectories .
8479	Merge a single run of a single run .
8480	Rename a full name .
8481	Merge the derived parameters .
8482	Merges the links in the triples .
8483	Merge two config files .
8484	Merge two dictionaries .
8485	Merge the results into a dictionary .
8486	Migrate trajectory .
8487	Store the trajectory .
8488	Restore default values .
8489	Sets the given index to the given index .
8490	Make a single run .
8491	Return a list of run names .
8492	Returns the run information for the run .
8493	Iterate over a list of parameters .
8494	Start a trajectory .
8495	Finalize the run .
8496	Set the start of the run .
8497	Set the completion of the run .
8498	Creates a new instance of the class .
8499	Return a dictionary of items in a dictionary .
8500	Finalize the run .
8501	Retrieve the configuration .
8502	Return a dictionary of results .
8503	Store items in the trajectory .
8504	Load items from a trajectory .
8505	Remove items from an iterator .
8506	Delete all links from an iterator .
8507	Remove all children .
8508	Remove items from the trajectory .
8509	Perform a single run on a single run .
8510	Generate a single running pool .
8511	Configure the pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configure the SCOOP_revop .
8515	Runs a single run .
8516	Configure the logging system .
8517	Configure the niceness .
8518	Handle a single run command .
8519	Run a single run .
8520	Wrapper for logging .
8521	Load a class .
8522	Creates a new class with the given name .
8523	Return the length of the range .
8524	Return a string representation of the evaluation .
8525	Compare two values .
8526	Returns a copy of this parameter .
8527	Explicitly explore a parameter .
8528	Expand an array .
8529	Check if a list of values are valid .
8530	Store the data in this object .
8531	Load the data from the parameter .
8532	Load a parameter from the array .
8533	Check if two values are equal .
8534	Check if data is supported .
8535	Serialize a matrix .
8536	Builds the names of a set of parameters .
8537	Constructs a matrix from data_list
8538	Loads the data from a dictionary .
8539	Store the data in the store .
8540	Load a pickle parameter .
8541	Translate a key .
8542	Convert the data to a string .
8543	Convert the data to a dictionary .
8544	Sets the value of this variable .
8545	Get a value from the result .
8546	Set a single item .
8547	Check if the given item is supported .
8548	Serializes the data into a dictionary .
8549	Load data from a dictionary .
8550	Set a single value .
8551	Serialize the data into a dictionary .
8552	Load a pickle parameter .
8553	Merge all files in the folder .
8554	Upload a file to SFS .
8555	Download a file
8556	Create a session .
8557	Merge trajaxories
8558	Start the jobs
8559	Multiplies the two vectors .
8560	Runs a simulation .
8561	Process a list of firing rates .
8562	Add parameters to the simulation .
8563	Add an exploration to the trajectory
8564	Execute the prerun of a network .
8565	Execute a network run .
8566	Extract all subruns from a traj .
8567	Run a network run .
8568	Add parameters to the analysis .
8569	Run the pre - run network .
8570	Run the network .
8571	Run the network simulation .
8572	Generate a filename for the given traj .
8573	Return the next element .
8574	Merge all trajectories in a folder .
8575	Handle SIGINT signal .
8576	Load configuration from a file .
8577	Request PIN .
8578	Request tokens from ECBee .
8579	Refresh the access token
8580	Get all thermostatats
8581	Write token to file
8582	Set hvac mode .
8583	Set the fan minimum on the specified index .
8584	Set the temperature temperature .
8585	Sets the condition for the simulation .
8586	Delete a vacation .
8587	Resume a program .
8588	Send a message
8589	Set the humidity level .
8590	Generate a random delay .
8591	Generate a timeout .
8592	Generate timeout for renewing .
8593	Generate a new lease time .
8594	Return a dictionary of fsm_attributes
8595	Reset attributes .
8596	Get the timeout for the given state .
8597	Set the timeout for the given state .
8598	Send a discover request .
8599	Select the offer .
8600	Send a request .
8601	Sets the timeouts .
8602	Process a packet .
8603	Check if a packet is received .
8604	Initiate the current state .
8605	Change the bounding state
8606	RENEWING state
8607	Initiate a new binding .
8608	Sends the current state .
8609	Initiate an error
8610	Called when a response is received .
8611	Timeout for sending requests .
8612	Called when the request is renewed .
8613	Called when a request is received .
8614	Receive an offer .
8615	Receive ack request .
8616	Process NAK request .
8617	Receive an ACK packet .
8618	Process a NAK packet .
8619	Receive an ACK .
8620	Receive a NAK .
8621	Called when the lease is renewed .
8622	Set the value of the query .
8623	Add a new value to the query .
8624	Remove a value from the query .
8625	Get status of the supervisor .
8626	Create the output for the given program .
8627	Main entry point .
8628	Validate a message .
8629	Read data from a TPT file .
8630	Add the deformation to the data .
8631	Convert a tdms file to fcs .
8632	Determine if two files are equal .
8633	Create a new patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if a file exists in a patch .
8637	Backup a file .
8638	Add a file to the database .
8639	Run the command .
8640	Create directory .
8641	Copy this directory to another directory .
8642	Add a link to this file .
8643	Copy this file to another file .
8644	Get the directory of the file .
8645	Backup a file .
8646	Refresh a patch .
8647	Unapply a patch .
8648	Unapply the top - level patch .
8649	Unapply all applied patches .
8650	Apply a patch .
8651	Apply the next patch to the series .
8652	Apply all patches .
8653	Read lines from the series file .
8654	Save the patch file .
8655	Add a patch .
8656	Insert patches into the list of patches .
8657	Add patches to the list of patches .
8658	Remove a patch .
8659	Returns a list of patches that match the given patch .
8660	Returns a list of patches that match the given patch .
8661	Returns a list of patches that match the given patch .
8662	Replace a patch .
8663	Create the version file .
8664	Checks the version of the version file .
8665	Add the argument to the parser .
8666	Add arguments to parser .
8667	Add arguments to subparsers .
8668	Set subparsers .
8669	Add subparsers to the parser .
8670	Check if a file is in a patch .
8671	Check if a file is in the next patch .
8672	Reverse a file .
8673	Import a patch .
8674	Import patches from quilt .
8675	Add a way to the world .
8676	Return a generator that yields nodes that are missing .
8677	Add a node .
8678	Build a route .
8679	Create a short name for a route .
8680	Get the agency ID for a relation .
8681	Processes the public transport .
8682	Add a relation .
8683	Create dummy data .
8684	Parses a list of agencies .
8685	Generate dummy trips for a trip .
8686	Write a zip file to a zip file .
8687	Write unzipped files to destination .
8688	Build the agency .
8689	Extracts all stops from a node .
8690	Build a shape from a relation .
8691	Returns the list of supported versions .
8692	Send an APD device .
8693	Authenticate device .
8694	Register an enrollment .
8695	Authenticate to U2F
8696	Register a U2F device .
8697	Convert data to string
8698	Wrap a function .
8699	Wrap a class .
8700	Return True if the filepath matches the pattern .
8701	Get email address .
8702	Return the entry for the given entry .
8703	Convert markdown text to rst
8704	Start a Flaw web server .
8705	Record an error .
8706	Convert url to image
8707	Convert a string to an image .
8708	Decorator to validate an image .
8709	Check if image size is bigger than size .
8710	Raises an error if the image is bigger than the given width .
8711	Raises an error if the image is bigger than the given height .
8712	Parse a category .
8713	Parse the total number of tuples .
8714	Get all items from the source .
8715	Save an error .
8716	Parses the contents of the source .
8717	Parse an item .
8718	Get a model instance .
8719	Save an item .
8720	Download a file .
8721	Loads the source file .
8722	Get all items from the source file .
8723	Allow network access to the sandbox .
8724	Run docker command .
8725	Add files to the container .
8726	Add a file to the container .
8727	Returns a list of all enrollments for a given course .
8728	Get all enrollments for a given course .
8729	Returns a list of all enrollments for a given section .
8730	Get all enrollments for a given section .
8731	Returns a list of enrollments for a user .
8732	Enroll a user .
8733	Get all roles in a given account .
8734	Gets all roles in the given account .
8735	Get the effective course roles in the given account .
8736	Get a single role .
8737	Gets a role by its ID .
8738	Get a single course .
8739	Gets a course by its id .
8740	Get all the courses in a given account .
8741	Returns a list of courses in the specified account .
8742	Get a list of all courses in a account .
8743	Returns a list of all courses in the specified account .
8744	Get a list of courses for a given regid .
8745	Create a new course .
8746	Update a course id .
8747	Get activity activity for a given term .
8748	Get the grades for a given term .
8749	Get statistics for a given term .
8750	Returns the activity activity for the given SIS_course_id .
8751	Gets the assignments for the given SIS_course_id .
8752	Get a list of student s summaries for a given course .
8753	Gets the activity activity for the given user .
8754	Get student messages for a given user .
8755	Get all external tools in an account .
8756	Get all external tools in a course .
8757	Create a new external tool .
8758	Update external tool .
8759	Delete external tool .
8760	Checks that all required parameters are set .
8761	Get a user profile .
8762	Get a list of users for a given course .
8763	Returns a list of users for a given course .
8764	Create a new user .
8765	Get a list of loggedins .
8766	Update a login .
8767	Return the next page of the next page .
8768	Get resource URL .
8769	Get a paginated resource .
8770	Get a resource .
8771	Put a resource .
8772	Perform a POST request .
8773	Delete a resource
8774	Get a list of all the admins .
8775	Create a new admin admin .
8776	Creates a new admin .
8777	Delete an admin .
8778	Deletes an admin .
8779	Create a grading standard for a course .
8780	Get a specific section .
8781	Gets a section by its ID .
8782	Get all sections in a course .
8783	Get sections in a course .
8784	Get all sections in a course .
8785	Returns a list of sections in a course .
8786	Create a new course section .
8787	Update a course .
8788	Get a list of quizzes .
8789	Get a single account .
8790	Get a list of all the subaccounts .
8791	Update an existing account .
8792	Update the SIS account ID .
8793	Get the credentials for a given account .
8794	Update auth settings .
8795	Get a term by its id .
8796	Import a CSV file .
8797	Import a directory .
8798	Get SIS import status .
8799	Build a zip file
8800	Get all assignments for a given course .
8801	Update an assignment .
8802	Get all available report types .
8803	Get a list of reports for a given account .
8804	Create a report .
8805	Creates a report .
8806	Create a report report .
8807	Create a report report .
8808	Get report data from report
8809	Get report status .
8810	Delete a report
8811	Move detectionions to the specified position .
8812	Flip the detection of the detector .
8813	Convert obj to a dict .
8814	Get config from settings .
8815	Return the value of the empty value .
8816	Parse a list of arguments .
8817	Create a new metric with the specified metrics .
8818	Setup logging for logging .
8819	Configure the registry .
8820	Create metrics for the given configs .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics .
8824	Wrap a message .
8825	Fix the HTTP POST message .
8826	Perform a query .
8827	Return information about the pods .
8828	Returns a list of all the results of this Pod .
8829	Encode data .
8830	Call the API method .
8831	Get a GET request .
8832	Deletes a given URL .
8833	Make a PUT request .
8834	Perform a POST request .
8835	Process a query .
8836	Returns a list of sentences with the given length .
8837	Disambiguate PDF .
8838	Disambiguate a query .
8839	Segments a text segment .
8840	Get language recognition .
8841	Fetch a concept
8842	Fit the model to the model .
8843	Returns the score of the given features .
8844	Fit the model to the model .
8845	Fit the model to the model .
8846	Compute the score of the model .
8847	Compute the feature map .
8848	Transform features into a new feature .
8849	Compute the score of the feature .
8850	Predict a MDR model .
8851	Iterate over all model models .
8852	Plot the mdr grid .
8853	Get the config from the app .
8854	Get a value for a given key .
8855	Create a Vector from a list of members .
8856	Creates a Vector from a list of members .
8857	Evaluate a file .
8858	Evaluate a stream .
8859	Evaluate a string .
8860	Bootstrap a module .
8861	Run the given code .
8862	Creates a MultiFunction .
8863	Add a method to the map .
8864	Add a method to the MultiFunction .
8865	Get a method for the given key .
8866	Remove a method from the map .
8867	Remove a method .
8868	Check if a variable is a macro .
8869	Return the location of the current line .
8870	Decorator for parsing a form .
8871	Ensure that the given node is not valid .
8872	Assert that a node is tail .
8873	Resolve a bare symbol .
8874	Resolve symbol .
8875	Parse an AST node .
8876	Determine whether or not the variable should be shown .
8877	Add a new symbol .
8878	Return a string representation of a list of strings .
8879	Return a string representation of a sequence .
8880	Return a human readable string representation of the object .
8881	Return a string representation of the given object .
8882	Fix missing locations .
8883	Compile a form form .
8884	Compile a module .
8885	Compile a module .
8886	Compile the given code .
8887	Return an iterable of iterable .
8888	Convert a string to a string .
8889	Removes a string from a string .
8890	Calculate a fraction .
8891	Creates a logger .
8892	Create a new map from kvs .
8893	Partition a collection of elements .
8894	Decorator to wrap a function .
8895	Read namespace .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set of values .
8900	Read a map .
8901	Read a string .
8902	Read a symbol .
8903	Read keyword .
8904	Read meta data from the reader .
8905	Read a function .
8906	Read a quoted string .
8907	Expand a list of lexic quotes .
8908	Processes a single quoted form .
8909	Parse a syntaxquoted form .
8910	Read a unquoted form .
8911	Read a leref form .
8912	Read a character .
8913	Read a regex pattern .
8914	Read a reader .
8915	Read next comment .
8916	Read next token .
8917	Read a stream from a stream .
8918	Read a string from a string .
8919	Read a file from a file .
8920	Update the current position .
8921	Push back to the stack .
8922	Get next token .
8923	Create a base64 encoded bytecode .
8924	Get a list of bytecode from the cache .
8925	Get the cache from a source file .
8926	Hook for hook imports .
8927	Find a module spec .
8928	Execute the given cache .
8929	Execute the given module .
8930	Execute a module .
8931	Create a new symbol .
8932	Convert a text string into an iterable .
8933	Get or create a Keyword .
8934	Return a keyword .
8935	Creates a chain of Py AST nodes .
8936	Load an attribute .
8937	Decorator to wrap an AST node .
8938	Generate a generator from a collection .
8939	Convert a PyPy AST node to a PyPy AST .
8940	Decorator to create a PyPy AST .
8941	Decorator to create a PyPy AST .
8942	Return True if the variable is dynamic .
8943	Return True if the variable is a redef .
8944	Convert an expression to an expression .
8945	Generate a function expression .
8946	Checks if the given def symbol is a warning .
8947	Convert a node to PyPy AST .
8948	Return the name of the named name .
8949	Convert a list of arguments to a Python AST .
8950	Convert a single function to PyPy AST .
8951	Convert a function to PyPy AST .
8952	Convert a fn to PyPy AST .
8953	Convert a node to PyPy AST .
8954	Convert a node to PyPy AST .
8955	Convert invocation to PyPy AST .
8956	Convert a quote to PyPy AST node .
8957	Convert recursively recursively to PyPy AST .
8958	Convert recur into PyPy AST .
8959	Convert a SETB AST node to a Python AST .
8960	Generate a PyPy AST node .
8961	Convert a node to PyPy AST .
8962	Convert a local node to PyPy AST .
8963	Convert a variable name to an AST node .
8964	Convert a node to PyPy AST .
8965	Convert an object to a PyPy AST node .
8966	Convert a node to PyPy AST .
8967	Generate a PyHostForm from a node .
8968	Convert a value to a Python AST .
8969	Convert a list of literals to PyPy AST .
8970	Generate a PyPy AST node .
8971	Iterate over the module imports .
8972	Return an import from a module .
8973	Create a new namespace variable .
8974	Return a set of set of members .
8975	Return a set of set of members .
8976	Visit an AST node .
8977	Visits an expression .
8978	Visit a function definition .
8979	Visit a node .
8980	Visit a Try .
8981	Create a new module .
8982	Returns the first element of the given object .
8983	Return the rest of the given object .
8984	Return the first occurrence of a collection .
8985	Returns the next element in the collection .
8986	Consumes the given sequence .
8987	Convert an object to a sequence .
8988	Concatenate multiple sequences .
8989	Associative associates the given mappings .
8990	Convenience function for conjunctions .
8991	Decorator for a function .
8992	Dereferences an object .
8993	Checks if two values are equal .
8994	Divide two numbers .
8995	Sort a collection .
8996	Check if a collection contains a key .
8997	Get the value of a given key .
8998	Convert an object to lisp .
8999	Convert an object into a Python object .
9000	Return a string representation of an object .
9001	Collect arguments .
9002	Decorator for a function .
9003	Decorator for decorator .
9004	Decorator to wrap a function .
9005	Add a function to the base function .
9006	Resolve a symbol .
9007	Resolve a variable .
9008	Add the generated python code to the given variable .
9009	Bootstrap dynamic variables .
9010	Create a new variable .
9011	Ensure a variable is bound .
9012	Find a variable in the namespace .
9013	Find a variable in the namespace .
9014	Find a variable by its namespace .
9015	Add a default import .
9016	Add an alias .
9017	Convert a symbol to a variable .
9018	Convert a symbol to a new map .
9019	Find a variable by symbol .
9020	Add an import to the module .
9021	Get a module by symbol .
9022	Add a refer to a variable .
9023	Get the refer to the given symbol .
9024	Return a map of all the references in the given namespace .
9025	Refer to another namespace .
9026	Get a namespace from the cache .
9027	Get a namespace .
9028	Get a namespace .
9029	Remove a namespace .
9030	Return a CompletionMatcher that matches the given text .
9031	Return an iterable of all qualified namespaces .
9032	Return an iterable of all imported names and aliases .
9033	Return an iterable of the names of the internals .
9034	Return a iterable of the names of the given value .
9035	Completes the given text .
9036	Return tuple of arguments .
9037	Return a list of members .
9038	Return a list of lists .
9039	Change the value of the given style .
9040	Decrypt a JWT token .
9041	Encrypt a JWT .
9042	Delete an item from the cache .
9043	Convert this expression to a Python object .
9044	Close the writer .
9045	Parse a string into an expression .
9046	Write ndb model to file .
9047	Decode a datetime object .
9048	Decode a date .
9049	Decodes the given value .
9050	Default encoding function .
9051	Validate the release version .
9052	Generate a changelog .
9053	Return a list of strongly connected components .
9054	Computes the topological sort of a graph .
9055	Set the parent .
9056	Returns the parent of this object .
9057	Add operator to the expression .
9058	Add an element .
9059	Add multiple elements to the expression .
9060	Creates a new operator expression .
9061	Log a function .
9062	Parse incoming message .
9063	Convert a list of tuples into a dict .
9064	Check if the given command matches the given command .
9065	Prepare the command for sending commands .
9066	Flush incoming socket messages .
9067	Enable a slide .
9068	Save a template to disk .
9069	Load a template from a file .
9070	Get information about the device .
9071	Increment a file .
9072	Return the path to the system .
9073	Parse package json file .
9074	Handles JSON error handling .
9075	Validate the response .
9076	Compute the homogenization of a wave .
9077	Interpolate the wave vector from the wave vector .
9078	Computes the indep vector between two samples .
9079	Verify that the waveforms are compatible .
9080	Load the systemjs manifest .
9081	Return a tuple of tuples for a module .
9082	Run a trace .
9083	Shortcut to shorten a URL .
9084	Expand a short URL
9085	Get URL statistics .
9086	Get the stats for a given filter .
9087	Get the statistics of the database .
9088	Print pypkg command .
9089	Print a command to the terminal .
9090	Log a message .
9091	Decorator for caching methods .
9092	Yield chunks from iterable .
9093	Decorator for chunking .
9094	Flatten an iterable .
9095	Prints a SIGINT signal .
9096	Print a CSV table .
9097	Create a dummy instance .
9098	Convert a human readable string to an integer .
9099	Create a new GoogleLS client .
9100	Run a waveform module .
9101	Generate a list of links for the requirements .
9102	Create a common entry .
9103	Generate a list of python packages .
9104	Convert a list of strings to words .
9105	Generate a chunk of noise
9106	Generate chunks from a frequency matrix .
9107	Write a touchstone file .
9108	Return the bounding waveform of a waveform .
9109	Builds the units of an indepoint .
9110	Create a new wave operation .
9111	Calculate the area of the running unit .
9112	Validate the minimum and maximum values .
9113	Calculate the angle of a wave .
9114	Calculate the angle of a wave .
9115	Calculate the axis of a wave .
9116	Calculate the angle of a wave .
9117	Return the average of the waveform .
9118	Determine the magnitude of a wave .
9119	Derive derivative of a waveform .
9120	Calculate the Fourier of a wave .
9121	Calculate the fftm .
9122	r Compute the Fourier phase .
9123	Calculate the real Fourier rftr .
9124	Calculate the database for a given waveform .
9125	Calculate the imagesti of a wave .
9126	Calculate the absolute value of a waveform .
9127	r Compute the phase of a wave .
9128	Calculate the real value of a waveform .
9129	Calculate the integral of a waveform .
9130	Compute the delay of a wavelet .
9131	Compute the log of a wave .
9132	Calculate the average of a waveform .
9133	r Compute the nintegral of a waveform .
9134	Return the maximum value of a waveform .
9135	Return the minimum value of a waveform .
9136	Return a copy of a wave .
9137	Round a wave .
9138	r Compute the square of a wave .
9139	Return a copy of a waveform .
9140	Return a copy of the waveform .
9141	Convert a wave to a float .
9142	Convert a wave to an integer .
9143	Calculate the value of the wave variable .
9144	Return a list of all the files in the system .
9145	Get the short description of a long description .
9146	Build an expression string .
9147	Find the next item from the list of items .
9148	Return a list of functions for a given expression .
9149	Return a list of pairs between two lists .
9150	Parse an expression .
9151	Remove duplicates from the expression .
9152	Splits a string into a tuple .
9153	Convert a number to an exponent .
9154	Convert a number to an exponent .
9155	Convert a number to a string .
9156	Convert a number to a float .
9157	Return the peng fraction of the given snum .
9158	Parse peng .
9159	Parse the power of a power .
9160	Returns the power of a suffix .
9161	Remove extra delimim delimiter from expr .
9162	Convert a number to a scientific representation .
9163	Convert a number to a number .
9164	Find sourcemap comment .
9165	Determine if the app is needed .
9166	Bundle bundle .
9167	Return the trace of the given app .
9168	Determine if the dependency tree matches the given hashes .
9169	Format a hexadecump dump .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Loads an object from an object .
9173	Split a line into a single line .
9174	Check if the context is initialized .
9175	Return the help text for the builtin command .
9176	Find a function in the context .
9177	List all functions in the context .
9178	Check if arg is a flag .
9179	Process arguments .
9180	Extracts the value from the given arguments .
9181	Invoke a single line .
9182	Invoke the command line .
9183	Invoke a string .
9184	Parse a parameter declaration .
9185	Parse a return value .
9186	Classify a section name .
9187	Convert a line into a Section .
9188	Return a list of paragraphs .
9189	Wrap the contents of the documentation .
9190	Convert value to type .
9191	Convert a binary value to a type .
9192	Get the size of a type .
9193	Format a value to a type .
9194	Validate type object .
9195	Check if the given type is known .
9196	Split a complex type into a complex type .
9197	Instantiate a complex type .
9198	Returns the type of the given type .
9199	Checks if the given type is known .
9200	Inject a type .
9201	Load a type from a module .
9202	Check if the spec is filled
9203	Add a parameter to the parameter system .
9204	Set the type of a type .
9205	Set a custom return value .
9206	Match a short name .
9207	Return the type of a parameter .
9208	Return the signature of the parameter .
9209	Format the return value .
9210	Convert a positional argument to a value .
9211	Check that the arguments are valid .
9212	Convert an argument to a validator .
9213	Format the message .
9214	Return a dictionary representation of this message .
9215	Check and execute a function .
9216	Parse validators .
9217	Find all objects in a container .
9218	Get a context from a module .
9219	Return the help text for a function .
9220	Decorate a decorator .
9221	Decorator to wrap a function .
9222	Decorator to create a type .
9223	Decorator to set context .
9224	Decorate a decorator .
9225	An annotated function .
9226	Return the short description of a function .
9227	Load cron commands .
9228	Install cron tasks .
9229	Print all tasks .
9230	Uninstall cron .
9231	Create a new URI .
9232	Load project configs .
9233	Save project config files .
9234	Defines a singleton instance .
9235	Gets the project dependencies for this project .
9236	Decorator for postprocess .
9237	Initialize the project .
9238	Sets a value for a given key .
9239	Set the value of an attribute .
9240	Create an instance from an iterable .
9241	Set the value of the current state .
9242	Set the values of the given values .
9243	Modify a function .
9244	Collect arguments from n .
9245	Performs a function on the lens .
9246	Apply a function to a function .
9247	View the fold .
9248	Return a list of Folders .
9249	Overrides the given setter .
9250	Set the value of the given state .
9251	Iterate over the setter .
9252	Return the kind of the kind .
9253	Main entry point .
9254	Return the difference between two vectors .
9255	Handles input .
9256	Iterate over robots .
9257	End the game .
9258	Get player position
9259	Play a game .
9260	Make a move .
9261	The winner of this board .
9262	Generate a list of possible pins .
9263	Process an item .
9264	Open the spider .
9265	Upload a chunk to the S3 .
9266	Creates a file object .
9267	Get account state .
9268	Get asset state .
9269	Get a block by hash .
9270	Get block hash .
9271	Get the fee fee for a block .
9272	Get the state of a contract .
9273	Get raw transaction data .
9274	Get storage data for a given key .
9275	Get a transaction output .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send raw transaction .
9280	Validate address .
9281	Send a request to the server .
9282	Return True if the string is a hash .
9283	Check if a string is a hash .
9284	Encode invocation parameters .
9285	Decode the invocation result .
9286	Decorate the first keyword argument .
9287	Apply a timezone to a datetime .
9288	Apply the timezone to the given datetime .
9289	Save the template to a file .
9290	Render the barcode .
9291	Calculate the checksum .
9292	Renders the given code .
9293	Connect to KVS .
9294	Main entry point .
9295	Download a remote file
9296	Upload a remote file to S3 .
9297	Synchronously down a configuration file .
9298	%prog diff
9299	Parse environment variable .
9300	Set basic authentication .
9301	Set API key .
9302	Get json content from folder
9303	Get all schemas .
9304	Get schema .
9305	Return a RefResolver for this schema .
9306	Validate object .
9307	Returns a list of valid examples .
9308	Get the list of invalid examples .
9309	Build the URL for the user agent .
9310	Process auth_url from url .
9311	Get access token .
9312	Get the id of the user .
9313	Get a list of objects in a folder .
9314	Create a folder .
9315	Add a comment to an object .
9316	Decode object to unicode .
9317	Sets the drop target .
9318	Handles drag operation .
9319	Set the default top level window .
9320	Show the inspector for the given object .
9321	Open a shell .
9322	Convert a Python font description to a gui .
9323	Load HTML page from given location .
9324	Get the value of a tag .
9325	Send outgoing communication .
9326	Show the help dialog
9327	Handles the mouse down event .
9328	Move the selected object .
9329	Called when a selection is changed .
9330	Handles cursor events .
9331	Delete all objects
9332	Create a copy of the selected object .
9333	Refresh the control image .
9334	Calculate the best position of the given widget .
9335	Returns the data for the given item .
9336	Set the data for the given item
9337	Find the data for a specific py_data
9338	Delete item from list
9339	Delete all items from the list
9340	Removes all items from the table .
9341	Sets the selected item .
9342	Returns the string of the selected item .
9343	Sets the data for the given item .
9344	Append an item to the control .
9345	Construct a string representation of an object .
9346	Find an object by name
9347	Create a new copy of this object .
9348	Add a child to the window .
9349	Sets the parent control .
9350	Copy the background bitmap to the background .
9351	Draw the background image .
9352	Draw the label
9353	Find all modules in the given rootpath .
9354	Return a list of column headings .
9355	Reset the view .
9356	Update all values in the grid
9357	Update column attributes .
9358	Sort the data by column .
9359	Clear all rows .
9360	Create a ComboBox
9361	Start the edit control .
9362	End editing the current cell .
9363	Is the given key?
9364	Start the start key .
9365	Decorator to register a type .
9366	Enables menu items .
9367	Check if menu item is enabled
9368	Enable the top level menu .
9369	Check if the menu is enabled .
9370	Remove a menu .
9371	Submit a form submit event .
9372	Set the attributes of the object .
9373	Visits the autosummary table .
9374	Return the document for the given object .
9375	Makes a string and mangles a string .
9376	Import module by name .
9377	Create an autolink role .
9378	Show an alert dialog
9379	Prompt user input .
9380	Select a font .
9381	Select a color .
9382	Choose a directory .
9383	Show text dialog
9384	Set whether the item has children .
9385	Set icon .
9386	Show the window .
9387	Parse a source file .
9388	Save a resource to a source file .
9389	Create a Window from a python resource .
9390	Create a Component from a resource .
9391	Associate event handlers .
9392	Convert a property name to a property name .
9393	Write data to the clipboard
9394	Find autosummary from a docstring .
9395	Load the given object .
9396	Show the given object .
9397	Activate a selected item .
9398	Updates the given object .
9399	Show context menu menu
9400	Convert a value to a native representation .
9401	Add an expression to the filter .
9402	Register a node filter .
9403	Assert that the current path matches the given path .
9404	Assert that the given path matches the given path .
9405	Checks if the current path exists .
9406	Checks if the given path exists .
9407	Select the selected option .
9408	Apply the filter to the given value .
9409	Return a webdriver instance .
9410	Return the XPath expression .
9411	Checks if the given node matches the filter .
9412	Switches to a frame .
9413	Accept an alert .
9414	Accept a dialog .
9415	Displays a confirmation dialog .
9416	Accept a prompt .
9417	Displays a prompt .
9418	Save the page to the given path .
9419	Save screenshot .
9420	Raises an exception if the server is raised .
9421	Checks if the given value matches the given value .
9422	Check if a field is checked .
9423	Checks if a field is checked .
9424	Check if a field is checked .
9425	Checks if a field is checked .
9426	Assert that the text matches the specified count .
9427	Assert that there is no text .
9428	Assert that the given title matches the given title .
9429	Assert that the given title matches the given title .
9430	Checks if the given title matches the given title .
9431	Assert that the element has a title .
9432	Find all objects matching the given criteria .
9433	Find the first element matching the given criteria .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setting a setter .
9438	Decorator to synchronize a function .
9439	Check if an error is caught .
9440	Compare the number of results .
9441	Checks if the result is at least one .
9442	Checks if the given options are not None .
9443	Build a failure message .
9444	Returns True if count matches count .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert text to regex .
9448	Determine if the path matches the expected path .
9449	Resize the window to the specified width .
9450	Boot the WSGI application .
9451	Set the cgetter .
9452	Set the instance method .
9453	Set the class method .
9454	Return the traceback as a string .
9455	Return a string representation of an object .
9456	Get the logger for instance .
9457	Set the logger .
9458	Call the API method .
9459	List channels .
9460	List users .
9461	Create a message .
9462	Translate message to slack
9463	Send a Slackack message .
9464	Read a channel from the server .
9465	Run the Slack API .
9466	Run the client .
9467	Return the difference between two dicts .
9468	Colorize a message .
9469	Called when a task is started .
9470	Prints the status of the runner .
9471	Print a summary of stats
9472	Called when the runner is finished .
9473	Convert a prefix to a prefix .
9474	Check if a value is empty .
9475	Add a model .
9476	Return a dictionary containing all elements in this collection .
9477	Load data from a dictionary .
9478	Convert this object to a dictionary .
9479	Parse the config file .
9480	Parse the state of the state .
9481	Translate the configuration to a string .
9482	Load all filters .
9483	Find a mapping file .
9484	Convert a model to a dictionary .
9485	Determines the difference between two objects .
9486	Perform a POST request .
9487	Get authorization code .
9488	Get the token for the given code .
9489	Get query params from url
9490	Remove a URL from a URL .
9491	Build a URL from a base URL .
9492	Handle exception .
9493	Create a response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get a token from the authorization code .
9499	Get authorization code from a URI .
9500	Get token from POST data .
9501	Returns the authorization object .
9502	Open a bus .
9503	Read a byte from the bus .
9504	Read bytes from the bus .
9505	Read byte data from the bus .
9506	Write bytes to the bus .
9507	Write byte data to the bus .
9508	Write data to the bus .
9509	Generate the CDN URL for this node .
9510	Create a copy of this object .
9511	Create a local copy of this file .
9512	Create a remote copy .
9513	Creates a new instance of a file .
9514	Upload a file
9515	Upload a file from a URL .
9516	Upload a URL to a file .
9517	Returns a list of all files in the group .
9518	Construct a group from a group .
9519	Create a new group .
9520	Perform a REST operation .
9521	Return a generator of UUIDs .
9522	List items .
9523	Generate a bar .
9524	Perform an upload request .
9525	Get the status of the home mode .
9526	List all cameras .
9527	Get a list of cameras .
9528	Get camera snapshot .
9529	Disable a camera .
9530	Get camera event for camera event .
9531	Save a camera event
9532	Update cameras .
9533	Checks if a list is a last item
9534	Iterate over a list of nodes .
9535	Get the lvl value for a given item
9536	Gets the vMerge value for this cell .
9537	Get the grid span for the grid .
9538	Get the cell at the given index .
9539	Return True if style is false
9540	Determines if the text is bold .
9541	Determine if the element is italics .
9542	Checks if the rpr is underlined .
9543	Determine if a title is a title
9544	Iterate through text_run_run_content_content_content_content_content_data_data_data_data .
9545	Get the relationship information for a tree .
9546	Get document data from file .
9547	Get the ordered list type for a given number .
9548	Build list of items from list .
9549	Build a tracer .
9550	Build a table element .
9551	Gets the content of a tag .
9552	Remove tag from tree
9553	Find a dataset
9554	Load the MLIST file .
9555	Load cifar data from a tar file .
9556	Plot a list of images .
9557	Plot layers .
9558	Plot the filters .
9559	Generate a batch of arrays .
9560	Encode a string into a list .
9561	Generate a batch of batches .
9562	Predict a sequence of sequences .
9563	Add a convolution matrix .
9564	Encodes the input to the output .
9565	Decode the given z .
9566	Find the output of the given layer .
9567	Returns the result of the autoencoder .
9568	Predict the output of the model .
9569	Predict the probability of the input .
9570	Predict the logit .
9571	Calculate the mean of the data .
9572	Create a batch of features for each sequence .
9573	Generate samples from a dataset .
9574	Load a network from a path .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Iterate over outputs matching the given patterns .
9578	Return a list of params matching the given patterns .
9579	Return a list of regularizers from a given kwargs .
9580	Returns a list of variables .
9581	Compute the accuracy of the target .
9582	Perform a scan .
9583	Build an Activation .
9584	Generate a reservoir from a list of xs .
9585	Set the loss .
9586	Create a new training dataset .
9587	Train all monitors .
9588	Generate a hash of layers .
9589	Build the computation graph .
9590	Returns the inputs of this layer .
9591	Returns a list of all the variables in this model .
9592	Find a layer by its name .
9593	Compute the feed forward function .
9594	Predict the output .
9595	Compute the score of the given data .
9596	Save model to disk .
9597	Load a model from a file .
9598	Compute the loss of the layer .
9599	Computes the updates of the graph .
9600	Returns the output size of the layer .
9601	Connects the given inputs .
9602	Bind the network to the graph .
9603	Resolve the inputs for the given layers .
9604	Resolve output shapes .
9605	Log the layer .
9606	Returns the total number of parameters .
9607	Convert string to string .
9608	Resolve the shape of a layer .
9609	Find a parameter by key .
9610	Add a bias .
9611	Return a dictionary representation of this model .
9612	Calculate the loggaboration of the model .
9613	Calculate the loggaborative image .
9614	Add a new tier .
9615	Remove a tier .
9616	Get a tier by name .
9617	Return an EAF .
9618	Add a point to the chart
9619	Add a new interval .
9620	Remove an interval from the intervals .
9621	Remove a point from the intervals .
9622	Iterate over all intervals .
9623	Return a list of all intervals in this chart .
9624	Indent the given element .
9625	Add an annotation .
9626	Add a cv entry to the vocabulary .
9627	Add a description to the vocabulary .
9628	Add an external reference to the registry .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a link to the media .
9633	Add a locale .
9634	Add a link to a secondary link .
9635	Add a tier .
9636	Remove all time slots .
9637	Extracts the annotations from the given tier .
9638	Generate a unique ID .
9639	Generate a unique timestamp .
9640	Returns a list of child tiers for the given ID .
9641	Get the full time interval .
9642	Gets the reference data for the given ID .
9643	Get the list of reference annotations for the given ID .
9644	Returns a list of tier IDs for a given lingu type .
9645	Merge a list of tiers into a new one .
9646	Remove all annotations from a tier .
9647	Removes a description from the vocabulary .
9648	Remove a license .
9649	Remove all linked files from the media .
9650	Remove a property .
9651	Removes reference annotations from the annotations .
9652	Removes secondary linked files from this link .
9653	Remove a tier .
9654	Removes all tiers from the cache .
9655	Renames a tier .
9656	Shift the annotations in the annotations .
9657	Main entry point .
9658	Display information about the storage .
9659	Returns the base level of the given text .
9660	Get embedding levels .
9661	Compute the implicit embedding for the given base level .
9662	Calculate the number of runs .
9663	Resolve weak types .
9664	Resolve general types .
9665	Reverse contiguous sequences .
9666	Reorder the resolved levels .
9667	Process the current scene .
9668	Convert the given lines into a list of strings .
9669	Add an attribute to the object .
9670	Command line arguments .
9671	Maintain backwards compatibility .
9672	Show the GUI .
9673	Try to discover the GUI .
9674	Deregister the host
9675	Add to file menu menu .
9676	Context manager .
9677	Context manager .
9678	Show a warning message .
9679	Setup the types of the bot .
9680	Generate cumulative data .
9681	Get the values for a single axis .
9682	Draw a constant line .
9683	Load the transform parameters .
9684	Reverse a mapping .
9685	Generate a generator from a range of floats .
9686	Add data .
9687	Add svg definitions .
9688	Add a new configuration .
9689	Generate a graph .
9690	Calculate the left margin .
9691	Calculate the right margin .
9692	Calculate top margin .
9693	Add a popup .
9694	Calculate bottom margin .
9695	Draw the graph
9696	Create a datapoint label .
9697	Draw the X axis labels .
9698	Draw the y axis labels .
9699	Draw the x - axis of the x axis .
9700	Draw the y axis of y axis .
9701	Draw the graph title and title .
9702	Render inline styles .
9703	Create a SVG document .
9704	Get the stylesheet resources for this instance .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Send a message .
9709	Dispatch patterns .
9710	Create new nick
9711	Handle a ping .
9712	Handle registration .
9713	Enter the event loop .
9714	Register a slave to the boss .
9715	Run task runner .
9716	Add a callback to the boss .
9717	Return a list of command patterns .
9718	Register a success message .
9719	Execute a worker .
9720	Add a nick to the queue .
9721	Send validation email .
9722	Send password reset .
9723	Validate password strength .
9724	Verify a token .
9725	Delete the avatar .
9726	Checks if the request is authorized .
9727	Returns a thread pool .
9728	Return a client instance .
9729	Retrieve the TLS client .
9730	Return service name .
9731	Execute a docker container .
9732	Execute a docker container .
9733	Poll docker service .
9734	Stop docker service .
9735	Filter the value of a unique email .
9736	Updates the given instance .
9737	Update the password .
9738	Validate the email address .
9739	Create a new token .
9740	Delete a token
9741	Resend confirmation email .
9742	Validate the email .
9743	Update the expiration date .
9744	Return the password reset email context .
9745	Send notification to email .
9746	Sets the email reset email .
9747	Add a validation email to the email .
9748	Authenticate user .
9749	Authenticate credentials .
9750	Show a notebook .
9751	Process the hv plot .
9752	Get a custom JS callback for a change .
9753	Return a new widget instance .
9754	Render the given object .
9755	Create a text widget .
9756	Return a list of named object names .
9757	Get the owner of a method .
9758	Assign the authentication credentials .
9759	Ping the server .
9760	Get information about the current user .
9761	Return the status of the cluster .
9762	Convert bytes to human readable format .
9763	Return the total load of the CPU .
9764	Gets the memory size .
9765	Get the total amount of the network .
9766	Return a list of volumes .
9767	Get a volume by id
9768	Get the total size of a volume .
9769	Get the percentage of a volume .
9770	Calculate the volume temp .
9771	Return the maximum volume of a volume .
9772	Get a single disk .
9773	Login to the user
9774	Perform a GET request .
9775	Execute a GET request .
9776	Updates the system information .
9777	Retrieve information about the system .
9778	Access the storage
9779	Creates a context from a request .
9780	Get tenant token .
9781	Build the attribute dictionary .
9782	Set the installed apps .
9783	Remove all installed apps .
9784	Get global settings .
9785	Do a GET request .
9786	Get a value from the config .
9787	Change the value of a key .
9788	Migrate config file .
9789	Start the web server .
9790	Waits until the server is reached .
9791	Get the access information for the current user .
9792	Check if token is present
9793	Set access credentials .
9794	Refresh OAuth2 token
9795	Create manifest table .
9796	Split a full path into a bucket .
9797	Checks if a given bucket exists in the bucket .
9798	Extract the run id from the key .
9799	Convert a dict to a dictionary .
9800	Add a run_id to the manifest .
9801	Check if a manifest is in a manifest .
9802	Extract the schema from a URI .
9803	Convert a schema name to a snake case .
9804	Parse a JSON string into a list of contexts .
9805	Parse unstructured event .
9806	Transform a line into JSON .
9807	Convert the given event to JSON .
9808	Get the used template name from the response .
9809	Print the context .
9810	Print variables .
9811	Convert SQL to HTML .
9812	Format Django context .
9813	Formats a dictionary of dictionaries .
9814	Styles the given text .
9815	Formats the object with the given context .
9816	Writes the object to the stream .
9817	Get a token from a string .
9818	Get a list of nodes from a string .
9819	Convert latex content to text .
9820	Sets the file input directory .
9821	Read a file from a file .
9822	Convert latex to text .
9823	Convert a string to a LaTeX representation .
9824	Convert a string to unicode .
9825	Get organization information .
9826	Get a list of boards
9827	Get a list of members .
9828	Updates an organization .
9829	Remove a member .
9830	Add a member by ID .
9831	Add a member to the user .
9832	Retrieves information about a list .
9833	Create a new card .
9834	Get label information .
9835	Retrieves a list of items .
9836	Update a label .
9837	Update label dict .
9838	Get the authorization URL for the given application .
9839	Get the card information .
9840	Get board .
9841	Get a list of objects .
9842	Get list of checklists .
9843	Add a comment .
9844	Add an attachment .
9845	Add a checklist .
9846	Create a label from a dict .
9847	Add a label to a label .
9848	Add a member .
9849	Get information about a member .
9850	Get a list of cards .
9851	Get a list of organisations .
9852	Create a new board .
9853	Decorator for a singleton method .
9854	Get board information .
9855	Get list of lists
9856	Get a list of labels .
9857	Get a single card .
9858	Get list of checklists
9859	Get an organization .
9860	Update a board .
9861	Create a new list .
9862	Create a label .
9863	Get information about a checklist .
9864	Get the card .
9865	Returns a list of all items in the checklist .
9866	Update a checklist .
9867	Add an item to the database .
9868	Remove an item .
9869	Update a checklist item .
9870	Update a checklist item .
9871	Add authorization parameters to query params
9872	Raises an error if the response is not authorized .
9873	Build the URL for the given path .
9874	Fetches a JSON request .
9875	Create a new organisation .
9876	Create a new board .
9877	Create a new label
9878	Create a new list .
9879	Create a new card
9880	Create a new checklist .
9881	Create a new member .
9882	Create an organization .
9883	Get a board .
9884	Create a new list .
9885	Get a card .
9886	Get a checklist .
9887	Create a new member .
9888	Extract a domain from a URL .
9889	Convert text to raw text .
9890	Convert text to raw text .
9891	Convert text to raw text pairs .
9892	Set password .
9893	Split text into text .
9894	Mark the text in a regex .
9895	Mark the beginning of a regex .
9896	Main entry point .
9897	Creates a cipher .
9898	Get AES mode .
9899	Return the priority of the encryption .
9900	Check the encryption scheme .
9901	Publish a message
9902	Make a unique identifier .
9903	Connect to the MQTT server .
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 - bit integer value .
9908	Encode a value to a byte array .
9909	Decode the length of the encoded length .
9910	Encode the packet .
9911	Encode this message .
9912	Decode the packet .
9913	Encode the session .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode the message .
9917	Encode this message .
9918	Decode a packet .
9919	Encode the message .
9920	Encode this message .
9921	Decode a packet .
9922	Decode a packet .
9923	Get the URL for the API call .
9924	Perform a request .
9925	Refresh all blocks .
9926	Formats the data .
9927	Fit the data to the model .
9928	Fit KMeans .
9929	Fit mean shift .
9930	Fit the clustering algorithm .
9931	Predict classifier .
9932	Map the number of clusters .
9933	Sort the clusters in the cluster .
9934	Convert datetime to datetime
9935	Get total number of points .
9936	Calculate the total time span .
9937	Determine the units of a given number .
9938	Return a human - readable representation of a string .
9939	Convert a string to a name
9940	Extracts the massname from a string
9941	Collate files in a directory .
9942	Iterate over a boolean array .
9943	Convert tuples to bool .
9944	Similar to smooth smooth .
9945	Perform a fast gradient .
9946	Finds the intersection of x .
9947	Convenience function for clustering .
9948	Convenience function for clustering .
9949	Cluster a dataset .
9950	Return a list of all the defined SRM records .
9951	Read a configuration file .
9952	Read latools config file .
9953	Print all available LATools configurations .
9954	Copy the SRM table to a file .
9955	Create a configuration file .
9956	Change the default configuration .
9957	Remove downhole filter .
9958	Apply a filter to a filter .
9959	Perform a despike .
9960	Plot autorange plot .
9961	Create RNGs .
9962	Calculate the ratio of the analysis .
9963	Calculate calibration values
9964	Sample the analysis of the analysis .
9965	Calculate the ablation times .
9966	Add threshold to the filter .
9967	Filter the gradients of a given window .
9968	Calculate the correlation coefficient for a given window .
9969	Filters the correlation of the correlation between two samples .
9970	Add a new filter to the filter .
9971	Return a dictionary of parameters .
9972	Plot histograms .
9973	Compute summary statistics .
9974	Load reference data .
9975	Lookup a type and return it .
9976	Return a list of all elements in the grid .
9977	Calculate the mass of a molecule
9978	Generate ANSI sequences .
9979	Iterate over all elements in the stack .
9980	Return a tuple of tuples .
9981	Calculate the gaussian weighted by a given factor .
9982	Calculate Gaussian Gaussian Gaussian
9983	Calculate stderr of stdout
9984	Returns the samples for the given subset .
9985	Perform a despike .
9986	Calculate a weighted average mean weighted mean .
9987	Calculate the background for the analysis .
9988	Subtracts the background from the data .
9989	Calculate the ratio of the data .
9990	Make a subset of samples .
9991	Filter the gradient of the gradients .
9992	Fit a classifier .
9993	Apply a classifier to the classifier .
9994	Filter the correlation between two samples .
9995	Filter the data on each sample .
9996	Filters the filtered data .
9997	Return a string representation of the filter .
9998	Add a filter to the dataset .
9999	Filter the number of samples .
10000	Plot gradient histogram .
10001	Calculate the gradient of the gradient .
10002	Plot histograms .
10003	Draw a trace plot .
10004	Draw gradient plots .
10005	Filters the results of a report .
10006	Sample a sample of samples .
10007	Return a pandas DataFrame
10008	Export trace data to a file .
10009	Export the traces of the analysis .
10010	Save the log file .
10011	Perform minimal export .
10012	Split a file into a file .
10013	Applies a fold to the given z .
10014	Plot a plot of pca .
10015	Calculate the probability of a given S .
10016	Calculate the median value of a sample .
10017	Determine noise for noise .
10018	Evaluate the noise of a signal .
10019	Add a filter .
10020	Remove a set of components .
10021	Clears all components .
10022	Clean up all components .
10023	Return the fuzzer for the given fuzzkey .
10024	Return a boolean from a key .
10025	Grab a filter from a given filter .
10026	Get information about the component .
10027	Log a function .
10028	Write log file to file .
10029	Read a log file .
10030	Decorator for autologin .
10031	Get information about the modem .
10032	Send a message
10033	Parse a file .
10034	Return the URL for the nbview .
10035	Generate a thumbnail image .
10036	Generate code div .
10037	Gets the code example .
10038	Return the URL of this node .
10039	Get the output file name .
10040	Process the notebook .
10041	Create a python file .
10042	Generate data for download .
10043	Create thumbnail image .
10044	Returns the description of the description .
10045	Scale an image to an image .
10046	Save image to thumbnail .
10047	Copy the thumbnail figure .
10048	Get the URL for a given nbfile .
10049	Return a list of languages for a given field .
10050	Returns the default value for the given field .
10051	Process a thumbnail file .
10052	Creates a new image .
10053	Refresh the thumbnail cache .
10054	Returns a list of all the thumbnail images .
10055	Create a new image .
10056	Delete image .
10057	Create a thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Receive a message .
10061	Subscribe to a number .
10062	Return a set of states .
10063	Add a new provider .
10064	Send message .
10065	Create a receiver for a receiver .
10066	Return a list of all the receivers for the receiver .
10067	Receive a message .
10068	Receive a status message .
10069	Decorator to wrap a function .
10070	Forward an object to the client .
10071	Sign a transaction .
10072	Estimate gas gas .
10073	Estimate the gas gas .
10074	Write to the stream .
10075	Read a line from the device .
10076	Send a message .
10077	Return the message as a string .
10078	Check if the message has a bad header .
10079	Attach an attachment to this message .
10080	Register services .
10081	Create a Config from a module .
10082	Register the given resources .
10083	Require a key .
10084	Return True if the object is exhausted .
10085	Setup the data manager .
10086	Calculate the number of energy for a given wavelength .
10087	Calculate the coefficient of a given wavelength .
10088	Initialize the user
10089	Login to the backend .
10090	Return a list of all domains in this domain .
10091	Get all items from an endpoint .
10092	Patch an object .
10093	Delete an endpoint
10094	Returns true if the given file is equal to the given path .
10095	Create junction link .
10096	Initialize the logger .
10097	Raises an error .
10098	Claims a list of reads from a file .
10099	Get a new column header .
10100	Claims a set of vcf files from a file .
10101	Initialize the population statistics .
10102	Claims unclaimed vcf files .
10103	Split a string into lines .
10104	Returns the prefix of the line terminator .
10105	Return the suffix of the given data .
10106	Read next line from the file .
10107	Seek the previous line .
10108	Return a list of lines from the file .
10109	Return a list of lines from the file .
10110	Read lines from the file .
10111	Claims a list of reads from a file .
10112	Parse a VCF record .
10113	Generate a list of sample tag values from a VCF record .
10114	Format the tags .
10115	Joins the info fields .
10116	Return the format for the sample tag .
10117	Return the field name for a sample .
10118	Return a string representation of the VCF record .
10119	Add a new sample tag value .
10120	Add a new filter .
10121	List available categories .
10122	Creates a form for the given category .
10123	Create a staff product form .
10124	Add a product error .
10125	Decorator to memoize a user .
10126	Create a model form for a model .
10127	Returns all items in the cart .
10128	Send email to email
10129	Iterate over OpenStreetMap
10130	Parse OSM file .
10131	Iterate over OpenStreetMap .
10132	Returns True if the condition is a condition .
10133	Check if user is met .
10134	Returns the remainder of the given user .
10135	Filter the queryset .
10136	Filter the queryset .
10137	Apply the query to the queryset .
10138	Filter the queryset .
10139	Pre - filter conditions .
10140	Decorator to modify the cart .
10141	Create a Cart object for a given user .
10142	Extend reservation duration .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Try to fix simple errors .
10146	Recalculate discounts .
10147	Adds a discount to the cart .
10148	Decorate a report view .
10149	Generate a list of rows .
10150	Returns the form for the given request .
10151	Render data .
10152	List all registered reports .
10153	List items sold .
10154	Calculate sales summary summary .
10155	Return a list of payments .
10156	Show credit note refunds
10157	List product status .
10158	Displays the discount status .
10159	List product items .
10160	Return a list of payments for each invoice .
10161	Show credit notes .
10162	Return a list of Invoice objects .
10163	List attendees .
10164	List speaker registrations .
10165	List product items .
10166	Return a list of available categories for the given user .
10167	Get the available credit note for the customer .
10168	Determine if the user is sold in the given context .
10169	Redirect to a page .
10170	Edit the attendee profile .
10171	Handles a profile form .
10172	Display a product category .
10173	Handles product forms .
10174	Handle a voucher form .
10175	Displays a checkout page .
10176	Access an invoice .
10177	Display an invoice .
10178	Manage manual payment .
10179	Refund an invoice
10180	Apply a credit note .
10181	Modify the registration form .
10182	Extend a new reservation .
10183	Sends an invoice to the email .
10184	Displays a badge .
10185	Render badge .
10186	Return a list of available discounts .
10187	Answers the number of occurrences of a discount .
10188	List available products .
10189	Apply a credit note to the invoice .
10190	Calculate the cancellation fee .
10191	Generate a random access code .
10192	Evaluate a function .
10193	Get object from name .
10194	Create an invoice from a cart .
10195	Generate a manual invoice .
10196	Generate line items from cart .
10197	Apply credit notes to invoice .
10198	Determine if the user can be viewed .
10199	Refresh the invoice .
10200	Validate that the invoice is allowed .
10201	Update the invoice status .
10202	Mark the invoice as paid .
10203	Checks if the invoice is a cart .
10204	Update the validity of the invoice .
10205	Validate the invoice .
10206	Refunds the invoice .
10207	Send an invoice
10208	Update the annotation .
10209	Flatten a nested field .
10210	Print download files .
10211	Download a single field from the pipeline .
10212	Get data for a specific project .
10213	Get all processors
10214	Print a list of input fields .
10215	Rundata a string
10216	Upload a processor to a project .
10217	Upload a file .
10218	Download data from a file .
10219	Get all subclasses of a class .
10220	Get the repository and project s repository .
10221	Given a list of phenotypes return a list of phenotypes .
10222	Generate a list of variant phenotypes with a list of variants .
10223	Search for variants by coordinate .
10224	Performs a bulk search query on a query .
10225	Updates the element from the cache .
10226	Uniqify a sequence .
10227	Authenticate asana .
10228	Select a list of items from a list .
10229	Get the data for a given issue .
10230	Move an issue data to another .
10231	Get saved task data .
10232	Get an Asana task .
10233	Save the data to disk .
10234	Apply a value to the config .
10235	Decorator for transport .
10236	Flush the queue .
10237	Create a new task .
10238	Format task numbers .
10239	Create a new task .
10240	Return a list of all the data types .
10241	Log an EK meter .
10242	Initialize the port .
10243	Set polling values .
10244	Combine the fields of the V4 .
10245	Render the meter readings from the meter .
10246	Set the request context
10247	Calculate the PF for a given pf .
10248	Set the maximum period of the device .
10249	Set the meter password .
10250	Unpack data from data .
10251	Convert the data to a float value .
10252	Return a serialized string representation of the meter .
10253	Called by CRMeter
10254	Splits an EkmDate into a named tuple .
10255	Get the months buffer .
10256	Set CT ratio
10257	Assign a schedule .
10258	Assign a schedule to the schedule .
10259	Set seasonSchedules
10260	Assigns a holiday date
10261	Read a set of schedules .
10262	Extracts the schedule from the schedule .
10263	Read month tar files
10264	Extracts a month tarball from a month .
10265	Read the calendar dates .
10266	Extracts the date from the calendar .
10267	Read the settings .
10268	Write a command to the device .
10269	Serialize a password .
10270	Update the observer s observers .
10271	Initialize the LCD lookup .
10272	Perform a request .
10273	Request A V4A
10274	Request BGP B
10275	Make sure that all the fields are in the same order .
10276	Calculate the power of the power factor .
10277	Sets a list of display items .
10278	Set the relay duration .
10279	Serialize the serial port .
10280	Sets the ratio of the pulse ratio .
10281	Set zero - resettable KWH
10282	Set the lcd .
10283	Iterate over all fields in a schema .
10284	Iterate over all fields in a schema .
10285	Generate paragraphs .
10286	Generate random text
10287	Returns a summary of the results of the elapsed time .
10288	Renders the given color .
10289	Show text .
10290	Return a summary of a result .
10291	Parse command line arguments .
10292	Setup the current instance .
10293	Run the test suite .
10294	Transform a python file .
10295	Transform a description .
10296	Transform a description into a description .
10297	Transform an example node .
10298	Transform the example body into a node .
10299	Return a function that takes arguments as arguments .
10300	Register a FileFinder .
10301	Convert a string to a python code .
10302	Apply arguments to the arguments parser .
10303	Load a module by name .
10304	Load imports from a path .
10305	Discover all files in a directory .
10306	Checks if the given location is valid .
10307	Read messages from a file .
10308	Add a command .
10309	Remove a file .
10310	Start a restart .
10311	Call the results .
10312	Creates a new MultiService .
10313	Make a service
10314	Refresh session
10315	Remove expired nodes .
10316	Remove a node .
10317	Get the last updated node .
10318	Get all nodes in the database .
10319	Refresh the session .
10320	Increment the number of times modified times .
10321	Dereference a node .
10322	Return a list of tokens .
10323	Checks if a path is invalid .
10324	Merge the given status .
10325	Checks if a value exists .
10326	Query a token .
10327	Convert a constant to a constant .
10328	Splits a function into an iterable .
10329	Unplatted function .
10330	Run a process .
10331	Create a new TimerService .
10332	Parse a reader from a reader .
10333	Parse a literal .
10334	Parse a parser .
10335	Create a new RepeatedOnceParser .
10336	Return a ReplatedParser instance .
10337	Create a new RepeatedOnceParser .
10338	Return a new RepeatedSeparatedParser .
10339	Check the state of the given location .
10340	Close the state .
10341	Check if the URL is valid .
10342	Add a heart to the master .
10343	Wrap a service .
10344	Freeze a checkpoint .
10345	Convenience method to freeze the model .
10346	Save the graph to the graph .
10347	Save a checkpoint to a checkpoint .
10348	Save weights from a checkpoint .
10349	Restore a checkpoint from a checkpoint .
10350	Parse a tag .
10351	Render a tag .
10352	Validate arguments .
10353	Get the context data .
10354	Parse a tag .
10355	Get context data .
10356	Convert caffe model to Tensorflow .
10357	Convenience method to freeze the model .
10358	Convenience function to save the graph to the output file .
10359	Make a sequence of rows from a sequence .
10360	Generate a group of n items from an iterable .
10361	Yield all elements from an iterable .
10362	Remove duplicate duplicates .
10363	Return the next iterable .
10364	Take a iterable of iterable and yield the next iterable .
10365	Split a number of items into a list of bins .
10366	Ensure that item is iterable .
10367	Decorator to suppress exceptions .
10368	Return a list of duplicates .
10369	Assert that iterable is ordered .
10370	Swap the partition result .
10371	Split a dictionary by key .
10372	Returns a list of all available queues .
10373	Reset the iterator .
10374	Parse a token .
10375	Create a template tag .
10376	Return a public keychain .
10377	Fetch all SQLite records from the database .
10378	Iterate over an object .
10379	Return True if the given selector matches the given object .
10380	Parse a selector .
10381	Parse selector .
10382	Return a list of all the parents of the given nodes .
10383	Return a list of all ancestors of the given node .
10384	Return a list of siblings of the given nodes .
10385	Evaluate nth node .
10386	Match validators .
10387	Ping a port .
10388	Get HTTP request body .
10389	Expire the cache .
10390	Sets the value of a key .
10391	Get a value from the store .
10392	Check if a key exists in the store .
10393	Check if the given timestamp is valid .
10394	Create a NistBeaconValue from a JSON string .
10395	Create a NistBeaconValue from XML .
10396	Render the rendered content .
10397	Get a list of lines from the log file .
10398	Returns a list of rows .
10399	Validate a token .
10400	Returns a Fernet instance .
10401	Validate a token .
10402	Create a token link .
10403	Convenience function to calculate a counter between two numbers .
10404	Calculate a counter between two values .
10405	Calculate the average duration .
10406	Setup the output of the network .
10407	Setup sources .
10408	Send an event to the queue .
10409	Watch the source for the source .
10410	Parse a format string .
10411	Parses the given line .
10412	Validate the expiration date .
10413	Validate the request .
10414	Verify that the token is valid .
10415	Return the name of the device .
10416	Warn a node .
10417	Connect to the receivers .
10418	Create a secret link .
10419	Send an Accept request .
10420	Send a confirmation notification .
10421	Send email verification .
10422	Send a reject request .
10423	Send a notification .
10424	Create a new secret link .
10425	Validate a token .
10426	Revoke a link .
10427	Create a new request .
10428	Get the request by the given request id .
10429	Confirm an email .
10430	Accept a request .
10431	Send a request to the request .
10432	Create a secret link .
10433	Create a SHA512 hash .
10434	Verify that a message is valid .
10435	Check if a record is embargoed .
10436	Create access request .
10437	Confirm email confirmation .
10438	Returns a SSH command instance .
10439	Reverse a column .
10440	Return the selected value .
10441	Returns the items in the query .
10442	Get the version of the file .
10443	Set the version of the file .
10444	Initialize the configuration .
10445	Start timer .
10446	Execute the queue .
10447	Deletes a shared link .
10448	Create a new Riemann client
10449	Stop the connection .
10450	Empty the queue .
10451	Add events to the queue .
10452	Create a client .
10453	Create a new Elasticsearch client
10454	Encode an event .
10455	Encode the given events .
10456	Decode a message .
10457	Send an event to the device .
10458	Generate file preview
10459	Retrieve a file preview .
10460	Send a message to the queue .
10461	Main loop loop .
10462	Checks if the current time is logged .
10463	Respond to the response .
10464	Abort the SASL authentication .
10465	Given a list of chars return a string .
10466	Generate AdminFooter node .
10467	Build payment parameters .
10468	Builds a payment parameters .
10469	Perform a payment with an alias .
10470	Return the version string .
10471	Constructs the layout .
10472	Handles the post creation .
10473	Configure shortcuts .
10474	Called when a file is activated .
10475	Handle select item .
10476	Sets the current location .
10477	Finalize the options .
10478	Run the resource .
10479	Run the command .
10480	Fetch all children .
10481	Refreshes all children .
10482	Returns the icon for the given index .
10483	Execute a subprocess .
10484	Returns the maxfd of the file .
10485	Close a file descriptor .
10486	Close open files .
10487	Redirect to a file .
10488	Set the attributes of the form .
10489	Try to import a module and return it .
10490	Return a list of submodules for the given module .
10491	Create a include node .
10492	Get gravatar url
10493	Get a Gravatar image .
10494	Checks if a filesystem value is valid .
10495	Checks if the given URL is valid .
10496	Returns the absolute path to the absolute path .
10497	List all objects in S3 .
10498	Build the worklfow json file .
10499	Execute the API request .
10500	Archive a project .
10501	Create a directory .
10502	List the contents of the archive .
10503	Restore a project from the archive .
10504	Create a new instance of the API client .
10505	List all files in a path .
10506	Download a file .
10507	Check if a path exists .
10508	Get the parent of the given path .
10509	Create a folder .
10510	Upload a file to the storage .
10511	Delete a folder .
10512	Validate storage path .
10513	Create a new StorageClient instance .
10514	Create a new Storage instance .
10515	Get information about a specific entity .
10516	Set entity metadata .
10517	Get metadata for a given entity .
10518	Update entity metadata .
10519	Deletes the metadata for a given entity .
10520	List all projects .
10521	Get information about a project .
10522	Create a project .
10523	Delete a project .
10524	Create a new folder .
10525	Get information about a folder .
10526	Delete a folder .
10527	Upload file content .
10528	Copies the content of a file .
10529	Download file content .
10530	Get the signed URL for a file .
10531	Emits a record .
10532	Convert a service to a service URL .
10533	Return a copy of this request .
10534	Return a copy of this request .
10535	Throws an exception .
10536	Return list of field names .
10537	Add a job to a job .
10538	%prog genotype gvfs . gvcfs
10539	Run ononator .
10540	Sort a list of dictionaries .
10541	Returns a list of datetime objects .
10542	Load data from a folder
10543	Add tshift to the data
10544	Return the sum of the data
10545	Collect a serial device .
10546	Create a new user .
10547	Parse a list of VN results .
10548	Parse the release results .
10549	Parse a list of producers .
10550	Parse character results .
10551	Parse tag results .
10552	Parses a list of users .
10553	Create a tarball file .
10554	Perform all files in the output directory .
10555	Copy a file to the output directory .
10556	Creates a list of parameters for Spark .
10557	Return a list of docker parameters .
10558	Refresh the metadata
10559	Run MuTect .
10560	Create a new metadata .
10561	List streams .
10562	Export the device .
10563	Search VNDB .
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the device .
10567	List users .
10568	Run BWA index .
10569	Connect to the server
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a value into the cache .
10573	Sync all datapoints .
10574	Start syncer .
10575	Stop the thread .
10576	Download a job from a URL .
10577	Upload a file to S3 .
10578	List labels .
10579	Print the tree of the ontology .
10580	Calculate the average size of the insert size .
10581	Get the docker container id .
10582	Run star_index .
10583	Create a new document .
10584	Export the stream to a directory .
10585	Return the device .
10586	Get labels for ontology .
10587	Gets the hierarchy of the ontology .
10588	Run the command .
10589	Populate the argument parser .
10590	Get empty config .
10591	Get the mount path for the container .
10592	Add an option to the argument parser .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Sets the HTTP authentication .
10596	Handle a response .
10597	Get the current connection .
10598	Create a CRUD resource .
10599	Update a path
10600	Delete a path
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return list of devices .
10604	Run the cutadapt command .
10605	Run samtools .
10606	Run samtools index .
10607	Runs the markdup command .
10608	Run samblaster .
10609	Remove duplicate duplicates .
10610	Run a picard .
10611	Run base recalibration .
10612	Run kallisto .
10613	Run rsem_ref
10614	Get user affinity for a test
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Attempt to reconnect to the connection .
10619	Resubscribes all subscriptions .
10620	Handle websocket connection .
10621	Called when the connection is closed .
10622	Handle connection error .
10623	Handles incoming messages .
10624	Ensure the connection is alive .
10625	Select variants from GATK .
10626	Run GATK filter .
10627	Run VariantRecalarator .
10628	Apply variant recalibration .
10629	Run GATK .
10630	Check if bam is quickcheck
10631	Load handlers from the given mapping .
10632	Write configuration to disk .
10633	Load the config file .
10634	Get an ontology term
10635	Search for ontology .
10636	Suggests an ontology .
10637	Iterate over all descendants of an ontology .
10638	Iterate over all descendants of an ontology .
10639	Iterate over labels .
10640	Iterate over all children of the ontology .
10641	Run fastqc .
10642	Add a stream to the query .
10643	Create a Flask app .
10644	Start Spark container .
10645	Start Spark container .
10646	Start the datanode .
10647	Stop the worker .
10648	Check if the container is running .
10649	Generate tokens from a file .
10650	Lookup a zone .
10651	Fetch the configuration for a zone .
10652	Merge the configuration files into an XML tree .
10653	Validate changeset .
10654	Given a list of members return a sorted list of members .
10655	Return the fitness score .
10656	Calculate the cost function for each member .
10657	Calculate the median value of this member .
10658	Returns the parameters of the parameters .
10659	Return the list of members .
10660	Add a new parameter .
10661	Generate a new population .
10662	Normalize key - value pairs .
10663	Get the environment variables .
10664	Wrap a callable .
10665	Transform hits into a list of packages .
10666	Transform result to string .
10667	Convert HTML to xhtml
10668	Convert XML to HTML .
10669	Convert a document to a string .
10670	Open a document .
10671	Drop the tree .
10672	Drop the tag .
10673	Get element by id .
10674	Creates a CSS select selector .
10675	Return a list of members of the logger .
10676	Get the count of the environment variables .
10677	Checks if the module is a single class
10678	Check if a module is a single module
10679	Validate request parameters .
10680	Validate the request .
10681	Decode a file system .
10682	Escape a list of arguments .
10683	Get codec name .
10684	Detect the BOM encoding .
10685	Get remote address .
10686	Convert an amount to a decimal .
10687	Parse a string .
10688	Parse a file .
10689	Convert a beautiful tree into a tree .
10690	Get the current traceback .
10691	Return a string representation of the exception .
10692	Render the traceback .
10693	Generate plaintext traceback .
10694	Return a list of lines in the source code .
10695	Render the source table .
10696	Search for egg_info and return None if found .
10697	Get the index URLs for a project .
10698	Find all versions in the project .
10699	Find a requirement for a requirement .
10700	Sort links .
10701	Get the content type of a URL .
10702	Iterate over all links .
10703	Return True if the request is valid .
10704	Find all data files in a package .
10705	Return a list of files that match the given package .
10706	Parse a file .
10707	Return a list of lines .
10708	Ignore comments .
10709	Compile a marker .
10710	Transforms a node .
10711	Visit a node .
10712	Convert value to number
10713	Creates a decorator for the current context .
10714	Push a new app context .
10715	Pops the app context .
10716	Return a copy of this instance .
10717	Match the request .
10718	Push a request to the context .
10719	Convert a path to a relative path .
10720	Return True if the distribution is editable .
10721	Decorator to register a url value .
10722	Add a function to the app .
10723	Decorator to register an error handler .
10724	Decorator to yield a generator .
10725	Make a response object .
10726	Generate a URL for a request .
10727	Return a path to a directory .
10728	Get the root path for the given import_name .
10729	Return the Jinja loader .
10730	Run the completion command .
10731	Get the cookie domain domain .
10732	Generate a cache for a link .
10733	Determine if the root is a pure library .
10734	Return a list of path paths for uninstallation .
10735	Check if a wheel is compatible with the given version .
10736	Builds a pip - installed wheel .
10737	Iterate over all symbols .
10738	Ensure that the rate is fresh .
10739	Add egg_info to the list .
10740	Write the delete marker file .
10741	Determine if a virtualenv is running .
10742	Get username .
10743	Create a distutils scheme .
10744	Parse cache control header .
10745	Get a cached request .
10746	Cache response .
10747	Update zipimporter cache .
10748	Loads the script from the script .
10749	Installs the site_py_py_py_py_py_py .
10750	Save the path to the file .
10751	Convert a value to a converter .
10752	Add filters .
10753	Configure logging handler .
10754	Add handlers to logger .
10755	Configure logger .
10756	Execute a file .
10757	Overrides a temporary directory .
10758	Get the url of the repository .
10759	Get a value from an object .
10760	Generate a generator .
10761	Compile the template .
10762	Get the default cache for the environment .
10763	Find eggs in a zip file .
10764	Return a Distribution object from the given path .
10765	Declare a namespace .
10766	Get the name of the class .
10767	Find the adapter for the given object .
10768	Ensure the given path exists .
10769	Iterate over all entries in the distribution .
10770	Determine if the given dist can be added .
10771	Return the best match for the given requirements .
10772	Evaluate a Marker .
10773	Evaluate a Marker .
10774	Format a record .
10775	Formats a number with the given currency .
10776	Parse a number pattern .
10777	Returns a decimal number for the given precision .
10778	Get the precision of the given number .
10779	Convert scientific notation to scientific notation .
10780	Calculate the total seconds .
10781	Parse a list of requirements .
10782	Return a subclass of the given class .
10783	Ensure that a requirement is valid .
10784	Fetch the egg from the build .
10785	Run dice roll .
10786	Convert an object to a price class .
10787	Create a price .
10788	Validate request .
10789	Get the method .
10790	Apply a method to the server .
10791	Get the module module .
10792	Return the blueprint name of the blueprint .
10793	Attaches enctype errors .
10794	Return an instance of the abstract dist .
10795	Add a requirement .
10796	Iterate over all available requirements .
10797	Check if requirement is installed .
10798	Return a list of requirements for this dependency .
10799	Get all namespace packages in the distribution .
10800	Encode obj to json .
10801	Tokenize a document .
10802	Merge two tokens .
10803	Copy annotations from src to dest .
10804	Compress tokens .
10805	Convert tokens to markup .
10806	Expand a list of tokens .
10807	Search for unbalanced end_end_end_end .
10808	Fix up chunks of chunks .
10809	Recursively flattens a list of elements .
10810	Split text into a list of words .
10811	Return an HTML tag .
10812	Return the end of a tag .
10813	Serialize an element into a string .
10814	Fixes all INSERT tags .
10815	Extract a constant from code .
10816	Generate the cache URL for the AWS API .
10817	Autolink element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorator for API calls .
10821	Returns a treeWalker for the given tree type .
10822	Export an svn repository .
10823	Get the revision for the given location .
10824	Decorator to wrap a setup function .
10825	Return the name of the module .
10826	Determine if the configuration is propagated .
10827	Return the path to the instance .
10828	Update template context .
10829	Handle an HTTP exception .
10830	Checks if an exception is raised .
10831	Handle an exception .
10832	Raises an exception if the request was redirected .
10833	Perform a full request .
10834	Creates a default response .
10835	Create a URL adapter for the given request .
10836	Inject url_default_default_defaults .
10837	Return a generator that yields unique values .
10838	Parse the requirements .
10839	Convert a requirement to a string .
10840	Convert pkginfo to metadata
10841	Yield all modules in the system .
10842	Returns a generator that yields all classes in the module .
10843	Return a list of all methods of the class .
10844	Find the basename of a file .
10845	Check if path is a module path .
10846	Iterate over all files in the given directory .
10847	Generate a list of paths .
10848	Dumps the default arguments to a dictionary .
10849	Load the JSON decoder defaults .
10850	Sets the value of a mapping .
10851	Increment the value of a key .
10852	Dump a value into a string .
10853	Build a dictionary of options from a request .
10854	Populate the link .
10855	Ensure the source directory exists .
10856	Remove temporary files from the source directory .
10857	Get the distribution of the egg .
10858	Read data from the stream .
10859	Returns the headers for the response .
10860	Convert a URI to a URI .
10861	Return the path to the cache directory .
10862	Return the path to the user data directory .
10863	Return the path to the log directory .
10864	Return the path to the user s config directory .
10865	Return a list of site config directories for the given appname .
10866	Iterate over all modules .
10867	Restart the process .
10868	Convert a string to a string .
10869	Find the CA certificate bundle .
10870	Parse HTML document .
10871	Parse the given stream .
10872	Parse the given stream .
10873	Translate a word .
10874	Convert input data to tokens .
10875	Bind to the server .
10876	Print a report .
10877	Load a bytecode from a file .
10878	Convert a stylesheet to a dictionary .
10879	Run a command .
10880	Gets the version of the module .
10881	Return a list of distributions for a given location .
10882	Search for external links .
10883	Open a URL .
10884	Process a URL .
10885	Return a list of paths that have been removed .
10886	Initialize the pathinfo .
10887	Add a package .
10888	Add a list of paths to the system .
10889	Check if user is enabled .
10890	Add user - packages to the user .
10891	Set up the shell .
10892	Alias for encoding .
10893	Set default encoding .
10894	Force the global eggs after the local site_packages .
10895	Fixes the python classpath .
10896	Create a new subprocess .
10897	Check if pyrex is installed .
10898	Convert PyXrex source to language .
10899	Runs the application .
10900	Get a resource .
10901	Return the user agent string .
10902	Return True if the given name is a URL .
10903	Unpack a file .
10904	Download a URL from a URL .
10905	Check if a file is downloaded .
10906	Register currency format .
10907	Register a currency exchange .
10908	Decode data .
10909	Return the default template context .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Checks if the given name is declared in the scope .
10915	Visit a name .
10916	Visit the given node .
10917	Visits the given node .
10918	Create a zip file .
10919	Decorator for atomic operations .
10920	Create a service factory .
10921	Convert an object to unicode .
10922	Return a list of distributions matching the requirements .
10923	Populate the requirements set .
10924	Export the pip file .
10925	Lookup an Amazon Product .
10926	Iterate over all pages .
10927	Answers the ancestor of this element .
10928	Return a list of children children .
10929	Return the value of the given path .
10930	Return the text of the element .
10931	Return the date of the element .
10932	Get price and currency and currency .
10933	Get the price for this item .
10934	Send a request to the cache .
10935	Build the response .
10936	Make an attribute getter for an attribute .
10937	Turns a string into a string .
10938	Sorts the given value .
10939	Group by attribute .
10940	Makes an iterator over a list of values .
10941	Create a logger .
10942	Compares two values .
10943	Verify that the given key is valid .
10944	Derive key derivation .
10945	Returns the signature for the given value .
10946	Sign a value .
10947	Verify the signature of the given value .
10948	Unsign a signed value .
10949	Sign a value .
10950	Validate a signed value .
10951	Serializes an object into a string .
10952	Handle a server error .
10953	Find a list of packages .
10954	Return a generator that yields the parents of the given packages .
10955	Iterate over all directories in base_path .
10956	Prepare the response .
10957	Unign a RPM file .
10958	Unpack a wheel .
10959	Install scripts from a set of distributions .
10960	Renders the graph .
10961	Redraw the canvas .
10962	Get a node by its ID .
10963	Called when the graph is changed .
10964	Add edges to the graph .
10965	Called when a component is changed .
10966	Handle mouse click .
10967	Called when the diagram is changed .
10968	Clears the canvas .
10969	Called when a domain is changed .
10970	Map the domain model to a new domain .
10971	Unmap all elements in the model .
10972	Map an element to an element .
10973	Set the style of a node .
10974	Parses the data .
10975	Process font .
10976	Process ellipse .
10977	Process a Polygon .
10978	Process a Polyline .
10979	Process text .
10980	Process an image .
10981	Render GridFS file .
10982	Save the object to the dot file .
10983	Load a dot file .
10984	Checks if the given point is in the given point
10985	Draw the bounding box .
10986	Creates a new wizard .
10987	Start SQLAlchemy .
10988	Parses the graph and returns the model .
10989	Create a new graph .
10990	Open a file .
10991	Save the model .
10992	Save the model to the file .
10993	Configure the graph .
10994	Configure nodes .
10995	Configure edges .
10996	Show the info about the user .
10997	Add a new node .
10998	Add an edge to the graph .
10999	Add a subgraph .
11000	Add a cluster .
11001	Request the graph for the current graph .
11002	Edit the options .
11003	Configure the dot code .
11004	Called when the user exits .
11005	Move the points to the origin .
11006	Save the file to a file .
11007	Load the contents of a file .
11008	Save a file to a file .
11009	Load object from file .
11010	A convenience method for creating a new property .
11011	Parse a file .
11012	Get start words .
11013	Add a new MarkovChain .
11014	Remove a chain .
11015	Recursively build a chain .
11016	Generate a sentence .
11017	Create a new file .
11018	Add a new node .
11019	Delete a node .
11020	Get node by ID
11021	Delete an edge from the graph .
11022	Add a edge to the graph .
11023	Add a subgraph .
11024	Check if the program is changed .
11025	Set the list of nodes .
11026	Parse a dot file .
11027	Parse a dot file .
11028	Build the top level graph .
11029	Build a graph from a list of tokens .
11030	Get the time units of the given seconds .
11031	Format a duration .
11032	Change the path .
11033	Creates the UI .
11034	Split a sequence into a sequence .
11035	Iterate over an iterable .
11036	Main entry point .
11037	Get the children of the given object .
11038	Add a child to the object .
11039	Insert a child into the object .
11040	Delete a child .
11041	Called when a node is replaced .
11042	Called when a node is changed .
11043	Return the label of the object .
11044	Set the label of the object .
11045	Called when a label is changed .
11046	Initialize the graph .
11047	Updates the editor .
11048	Add listeners to the graph editor .
11049	Replace nodes with new nodes .
11050	Called when a node is changed .
11051	Add features to the graph .
11052	Replace edges with new edges .
11053	Called when a node is changed .
11054	Add edges to the graph .
11055	Parse an xdot directive .
11056	Event handler for drawing
11057	Creates a new Node instance .
11058	Create a new edge instance .
11059	Prepare a MongoEngineProxy instance .
11060	Parse the drawing directive .
11061	Parse a label directive .
11062	Called when drawing changes .
11063	Change the position of the component .
11064	Change the position of the component .
11065	Called when the toolbar is pressed .
11066	Show highlight information .
11067	Draw the main layer .
11068	Check if a point is in a polygon
11069	Draw the main layer .
11070	Handle an event .
11071	Run the loop .
11072	Get the full URL for a page .
11073	Render the previous page links .
11074	Render the seo links .
11075	Return True if the candidate matches the given pattern .
11076	Selects the content type matching the requested pattern .
11077	Rewrite a URL .
11078	Remove url auth from url
11079	Create URL identifier .
11080	Normalize host name .
11081	Find all modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of available modules .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure that a directory exists .
11087	Put a text into the blob .
11088	Check validity of a card number .
11089	Get the version of the git version .
11090	Load a module .
11091	Add a path to the list .
11092	Find a module by name .
11093	Split a line into a list of lines .
11094	Remove all namespaces from the root .
11095	Checks that the version of the version is consistent .
11096	Create a new instance from yaml .
11097	Merges the dictionary into the dictionary .
11098	Execute all actions .
11099	Create a new instance from a yaml file .
11100	Add details about the error message .
11101	Emits a record .
11102	Gets the context for rendering .
11103	Log an attempt .
11104	Add url to queue
11105	Start the workers .
11106	Sets the value of a key .
11107	Get the value of a key .
11108	Recursively recursively recursively recursively recursively .
11109	Get the index of a given key .
11110	Delete a key
11111	Plot the heatmap .
11112	Add months to the given timestamp .
11113	Add months to a date .
11114	Checks if the current month is a valid month .
11115	Sets the music service .
11116	Sets the storage service .
11117	Read data from CSV file .
11118	Return a list of dictionaries from a json file .
11119	Write data to json .
11120	Return a list of labels for a given label .
11121	Calculate the average value for a given label .
11122	Calculate the feature importance of the feature .
11123	Restore data from session .
11124	Merge two dictionaries .
11125	Decorator for multi - dispatch .
11126	Decorator to call a method .
11127	Find all registered blocks .
11128	Verify that the given block is valid .
11129	Registers a block .
11130	Unregisters a block type .
11131	Convert a file to MP3 .
11132	Return a nice version of the desired version .
11133	Handles SSL redirect .
11134	Initialize celery .
11135	Queues an email to the database .
11136	Parse Accept header value .
11137	Parse cache control control header .
11138	Parse a content type .
11139	Parse a header value .
11140	Parse a list .
11141	Parse a list of parameters .
11142	Resize an image to a width .
11143	Add a value to the link .
11144	Download a video .
11145	Connect to Google Drive .
11146	Upload a file .
11147	Connect to the device .
11148	Write the input parameters to a file .
11149	Update the sky file filename
11150	Read an ahpi from a file .
11151	Sets the angle of the given parameter .
11152	Read the water absorption from a file .
11153	Read the water scattering from a file .
11154	Read the IOP from a file .
11155	Write an IOP object to a file .
11156	Builds the b .
11157	Calculate the absorption .
11158	Build the total attenuation .
11159	Build all IOPs from IOPs
11160	Sets the parameters of the parameters .
11161	Read parameters from a file .
11162	Convert string to float list
11163	Read the report from a file .
11164	Set signal handler for signals .
11165	Handle a signal signal .
11166	Handle a signal handler .
11167	Pause signal .
11168	Abort signal handler .
11169	Handle a signal signal .
11170	Unregisters an event .
11171	Fetch metrics for a given metric .
11172	Returns a sorted sorted list of metrics .
11173	Return a list of tuples .
11174	Print an item to stdout .
11175	Print all items in an iterable .
11176	Parse a function from a function .
11177	Sets the signature of a partial .
11178	Create a new argv .
11179	Determine whether the given filename should be ignored .
11180	Get the key for a file .
11181	Convert vlq into integer
11182	Read a table from data .
11183	Parse the header .
11184	Returns the duration of seconds .
11185	Print the details of the game .
11186	Sets the values of the data .
11187	Display the results of the search file .
11188	Write batch data to file .
11189	Perform data processing .
11190	Displays the connection .
11191	Print graphic information .
11192	Display error message .
11193	Hide the error message .
11194	Run the planarradadad .
11195	Cancel a planaradadad .
11196	Quit the program .
11197	Save the figure
11198	Open the log file .
11199	Open the document .
11200	Sets the values of the grid .
11201	Handles click event .
11202	Handle mouse move .
11203	Display the mouse position .
11204	Create a new LockSet for the given genesis block .
11205	Sign the signature .
11206	Returns the hash of the signature .
11207	Checks if the current state is valid .
11208	Issues the amount of funds .
11209	Returns the highest lock for this block .
11210	Returns the last block proposal of the block .
11211	Returns the highest lock set for this block .
11212	Get the timeout for the chain .
11213	Called when a peer is received .
11214	Create a list of privkeys
11215	Returns the delay of a packet .
11216	Deliver a packet .
11217	Create a proxy for a contract .
11218	Returns the native contract class for the given address .
11219	Register a native contract .
11220	Updates the filter .
11221	Receive a list of transactions .
11222	Convert a vgg image to an image .
11223	Convert image to vgg
11224	Returns a function for the given layer .
11225	Get the output of a layer .
11226	Get the features for the given layer .
11227	Create a new key file .
11228	Finish the job .
11229	Load data from a file .
11230	Put items into the database .
11231	Release the table .
11232	Return a list of tables .
11233	Fix the compiler .
11234	Find the latest version .
11235	Get the value of a key .
11236	Set the value of a key .
11237	Handle a table .
11238	Execute a command .
11239	Get the value of a key .
11240	Write the default configuration to a file .
11241	Sets the filters for the given names .
11242	Serialize the data to an archive .
11243	Return a string representation of the export .
11244	Convert a string to a float .
11245	Parse a string into a dictionary .
11246	Parse device settings .
11247	Wrap text into text .
11248	Detect device devices .
11249	Set the center_freq .
11250	Calculate the output of a PSD state .
11251	Wait for psd_state .
11252	Updates the samples of the given samples .
11253	Read data from a file .
11254	Write pwr_array to file .
11255	Submit a function .
11256	Calculate the number of times to repeat .
11257	Generate a frequency plan .
11258	Create a new buffer .
11259	Sets up the audio .
11260	Stop the stream .
11261	Set the frequency of the device .
11262	Create a new frequency list .
11263	Sets the address of the bus .
11264	Run Cake build .
11265	Filter a set of datetimes .
11266	Mask datetime .
11267	Mask a datetime .
11268	Converts a list of dates to a set of days .
11269	Return a set of dates that are deleted .
11270	Converts a list of dates into a set of dates .
11271	Return a list of dates that are deleted .
11272	Get the control of the SPI control .
11273	Read a bit at the given address .
11274	Write a bit to the given address .
11275	Get the bit number from a bit pattern .
11276	Watch all GPIO events .
11277	Handles all event handlers .
11278	Sets up the GPIO pin to the user .
11279	Set the GPIO edge for the GPIO device .
11280	Wait until file exists .
11281	Register a pin function .
11282	Deletes a pin function .
11283	Enable GPIO interrupts .
11284	Send bytes to the device .
11285	Renders the tab .
11286	Check if the form has errors .
11287	Render a link .
11288	Extract the version of the package .
11289	Gets the form keyword arguments .
11290	Check status .
11291	Perform a GET request .
11292	Get download link .
11293	Upload a link to a folder .
11294	Upload a file .
11295	Upload a remote URL .
11296	Get remote upload status
11297	Returns a list of files for a given folder .
11298	Return a list of running files in a folder .
11299	Calculate the humidity of a temperature .
11300	Calculate the density of a temperature .
11301	Publish the request .
11302	Returns the CRC of the given data .
11303	Verify that the data is valid
11304	Convert a date to a string .
11305	Determine if the archive is an archive .
11306	Sleep up the weather station
11307	Send a command
11308	Execute DMPFTFT command .
11309	Retrieves the data from the archive .
11310	Parse the loop .
11311	Update weather .
11312	Initialize logging .
11313	Return a list of pub_services
11314	Gets the wind gust of the given station .
11315	Sets the parameters of the model .
11316	Set arguments .
11317	Write the arguments to the file .
11318	Decorator to wrap a request .
11319	Initialize the application .
11320	Returns True if all requirements are satisfied .
11321	Add an override to the stack .
11322	Pop the override context .
11323	Context manager .
11324	Add additional context .
11325	Pop the current context .
11326	Context manager .
11327	Return a list of field names .
11328	Interpret the results of the results .
11329	Extract params from query
11330	Run a query .
11331	Return a pandas DataFrame
11332	Get the network graph .
11333	Create a pie chart .
11334	Plot the plot .
11335	Create a plot plot .
11336	Convert the result to a CSV result .
11337	Checks if a user is required .
11338	Return context data .
11339	Return a sorted list of widgets sorted by their position .
11340	Return a list of widgets that should be updated .
11341	Register a dashboard widget .
11342	Unregister widget .
11343	Get the last update .
11344	Get a single Dashboard widget .
11345	Save a setting to the dashboard .
11346	Determine if the user should be updated .
11347	Convert an array to an array .
11348	Create a new numpy array .
11349	Concatenate multiple arrays .
11350	Check if args are valid .
11351	Format the axes .
11352	Wrapper around SparkArraySpark .
11353	Align the given axes .
11354	Convert to Spark .
11355	Return the tordd .
11356	Return a new RDD with the given size .
11357	Apply a function to the dataset .
11358	Creates a new chunk .
11359	Map a function to a given function .
11360	Apply a function to the SparkArray .
11361	Calculate the plan .
11362	Remove padding from the given number .
11363	Get the number of chunks in a plan .
11364	Return a list of dims .
11365	Creates a mask for the given indices .
11366	Repart the dataset .
11367	Return a list of all elements in the array .
11368	Align the given axis .
11369	Return the first element in the collection .
11370	Return the stats for the given axis .
11371	Return the mean of the data .
11372	Return the variance of the variable .
11373	Return the standard deviation .
11374	Return the sum of the stats .
11375	Return the maximum value of the given axis .
11376	Return the minimum value of the given axis .
11377	Create a new chunked array .
11378	Swaps the data in the array .
11379	Transpose the given axes .
11380	Swap two axes .
11381	Shows the given shape .
11382	Resize the given shape .
11383	Return a copy of this dimension .
11384	Return a new dataset with the given type .
11385	Clip the dataset .
11386	Convert this collection to an array .
11387	Convert an argument to a tuple .
11388	Convert arguments to tuple .
11389	Raise an ndarray .
11390	Return True if two arrays are equal .
11391	Convert a list of indices to a list .
11392	Convert a slice into a slice .
11393	Check if two keys are transposeable .
11394	Raises an error if the new keys are not equal .
11395	Return a concatenated array of values .
11396	Expand an array of dimensions .
11397	Returns an iterator over the elements of the rdd .
11398	Decorator to wrap a function .
11399	Lookup a constructor .
11400	Return a new BoltArray .
11401	Transpose the given axes .
11402	Return a new BoltArray .
11403	Transpose the given axes .
11404	Create a new numpy array .
11405	Create a new numpy array .
11406	Concatenate arrays .
11407	Calculate the likelihood of a discrete distribution .
11408	Returns the most likely alpha - likelihood of the given data .
11409	Calculate the alpha of the discrete alpha .
11410	Calculate the best alpha for the given data .
11411	Calculate the best alpha for a given data .
11412	Plot the likelihood of the model .
11413	Calculate Lognormal distribution .
11414	Sanitizes HTML tags .
11415	Configure a YNDex .
11416	Return a list of tag names .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Generate SHA512 hash .
11420	Parse a long .
11421	Decode a key .
11422	Parse options .
11423	Process a SSH RSA key .
11424	Parse a DSA key .
11425	Parses ECDS SHA256 key .
11426	Processes an E2551916 key .
11427	Parses the key data .
11428	Perform a step .
11429	Process a token .
11430	Return a list of mechs .
11431	Store the Credentials .
11432	Main entry point .
11433	Initialize the distribution .
11434	Create a new audio file .
11435	Generate the H5B5 CSS .
11436	Render a django - frontend .
11437	Generate font fontawesome .
11438	Render the modernizr . js . js . js . js . js . js . js . js . js . js . js . js . js . js
11439	Render django jquery . js
11440	Render the django - frontend UI .
11441	Generate django datatables
11442	Generate the CSS for the jquery data .
11443	Render the django data table .
11444	Generate the django form for django .
11445	Render the scrollToScrollTo scroll to the given version .
11446	Generate the javascript for smooth scrolling .
11447	Generate the CSS CSS for the Twig framework .
11448	Generate the google analytics .
11449	Renders a text element .
11450	Generate hash hashes for a user .
11451	Calculate the expiration time .
11452	Get a token for a user .
11453	Serialize an object into a dictionary .
11454	Deserialize a profile .
11455	Update a profile .
11456	Log a user login .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get the username of a user .
11460	Create a user .
11461	Login a user .
11462	Log out the user .
11463	Login to the user .
11464	Login with password .
11465	Login to the user .
11466	Change the user s password .
11467	Send a reset password .
11468	Reset password .
11469	Merge two dictionaries .
11470	Read a file .
11471	Get the id of an object .
11472	Given a model_id return an Ordered_Mapping object .
11473	Return the object id for the given meteor_id .
11474	Returns an object mapping to an object mapping .
11475	Get a single model by its id .
11476	Set the default forwards for the given operation .
11477	Set the default mapping for the given operation .
11478	Truncate all models .
11479	Triggers the migrations .
11480	Triggers the database .
11481	Initialize the options .
11482	Finalize options .
11483	Run the build .
11484	Convert a path to a directory .
11485	Sets a random seed .
11486	Return the state of the state
11487	Generate a random string .
11488	Decorator to decorate API endpoint .
11489	Return a list of API endpoint names for the given object .
11490	Clears the API path cache .
11491	Print a formatted value .
11492	Validate keyword arguments .
11493	Initialize the connection .
11494	Close the connection .
11495	Process a message .
11496	Yields frames from a message .
11497	Process a message .
11498	Dispatch a message .
11499	Receive a connection .
11500	Receive a ping message .
11501	Receive a sub subscription .
11502	Receive a subscription .
11503	Receive a method .
11504	Generate socketjs info .
11505	Start a DDPLauncher .
11506	Main entry point .
11507	Print a message .
11508	Stop the server .
11509	Start postgres greenlet greenlet .
11510	Runs the database .
11511	Poll a connection .
11512	Ensure that the thread is ready .
11513	Generate a random ID .
11514	Autodiscover API .
11515	Return an object as a dictionary .
11516	Get an object by name .
11517	Send a record to the server .
11518	Create a middleware middleware .
11519	Add a route to the router .
11520	Add a resource object .
11521	Run the application .
11522	Send a message .
11523	Send a bulk message to APNS .
11524	Fetch inactive IDs from APNS .
11525	Send a message .
11526	Send a bulk message .
11527	Send a JSON request to the device .
11528	Send data to API .
11529	Get model from module location .
11530	Run fast forward selection algorithm .
11531	Search for tweets .
11532	Translate a term .
11533	Get trending information .
11534	Get a GIF .
11535	Get the screen s screensaver .
11536	Upload tags to a file .
11537	Normalizes the data .
11538	Fetch data from the API .
11539	Translate a term .
11540	Generate GIF images .
11541	Fetch GIF from GIF .
11542	Upload GIF to GIF .
11543	Generate an access control element .
11544	Authenticate the user .
11545	Upload a video .
11546	Check the status of a video .
11547	Update a video entry .
11548	Delete a video .
11549	Check if a video is available
11550	Display a video .
11551	List videos .
11552	Uploads a video .
11553	Upload a video .
11554	Upload a video .
11555	Remove a video .
11556	Get the video entry .
11557	Saves the video .
11558	Delete a video .
11559	Update metadata .
11560	Update a metadata field .
11561	Update the item .
11562	Parse a string .
11563	Dump a list of trees .
11564	Load data from a file .
11565	Read a file .
11566	Parse a node .
11567	Create a new node .
11568	Return a string representation of this node .
11569	Convert ASCII characters to ASCII .
11570	Get node by label
11571	Removes all descendants from the tree .
11572	Resolve polytomies .
11573	Remove internal names .
11574	Remove all leaf names .
11575	Decorator for authentication .
11576	Dispatches a JSON string .
11577	Require a setting .
11578	Get an argument by name .
11579	Get a list of all arguments .
11580	Convert a callback to a callback .
11581	Get cookie by name .
11582	Clears a cookie .
11583	Redirect to the given callback .
11584	Get the authenticated user .
11585	Generate OAuth request parameters .
11586	Redirect to OAuth .
11587	Perform a Facebook request .
11588	Get an authenticated user .
11589	Concatenate a URL to a URL .
11590	Parse header .
11591	Add a header to the list .
11592	Get a list of headers .
11593	Parse a line .
11594	Parse headers from headers .
11595	Normalize HTTP headers .
11596	Convert value to UTF - 8 .
11597	Convert value to unicode .
11598	Convert a value to a string .
11599	Recursively convert obj to unicode .
11600	Check if the plugin is valid .
11601	Iterate over all subclasses .
11602	Selects a policy based on the policy .
11603	Return the occupancy of a grid .
11604	Write a box to a file .
11605	Write pdb to pdb file
11606	Determine the number of molecules .
11607	Resize pbc to pbc .
11608	Write the topology to a file .
11609	Iterate over a file .
11610	Add a message to the cache .
11611	Send a message to users .
11612	Get all messages for a user .
11613	Process the response .
11614	Check config file .
11615	Verify that the given message is valid .
11616	Retrieve data from config .
11617	Retrieve the password from the config .
11618	Update config data .
11619	Update the user s password .
11620	Create a config profile .
11621	Display required items .
11622	Get data from user .
11623	Get auth from user_type
11624	Configure a profile .
11625	Write data to cfg
11626	Write auth to cfg
11627	Add attachments to the message .
11628	Send message .
11629	Send a message .
11630	Create a message based on the given type .
11631	Decorate a credential property .
11632	Validate an attribute .
11633	Validate input .
11634	Validate a Twilio .
11635	Validate slackpost post post post .
11636	Validate a phone number .
11637	Send a message to the pool .
11638	Add a message to the queue .
11639	Get body from file
11640	Remove all arguments from kwargs .
11641	Send a message .
11642	Get the id of a chat .
11643	Send a message to the server .
11644	Send message to Telegram .
11645	Get SMTP server .
11646	Generate a MIME message .
11647	Add header to message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Gets a session .
11651	Returns a SMTP instance .
11652	Create a SMTP session .
11653	Send the message to the email .
11654	Save the tags to the file .
11655	Unload image .
11656	Get image region .
11657	Validate this object .
11658	Clears the cache .
11659	Serialize this object .
11660	Read data from the file .
11661	Delete the file .
11662	Resize the contents of this file .
11663	Insert a new chunk .
11664	Save the data to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a line .
11668	Add lines to the source .
11669	Draw a string .
11670	Parse an ISO8601 time string .
11671	Convert a list of words into a string .
11672	Return HTML for a cross reference .
11673	Generate a HTML paragraph .
11674	Generate HTML code .
11675	Generate HTML code .
11676	Save metadata to a file .
11677	Update the parents of a file .
11678	Start the game .
11679	Registers a mapping .
11680	Retrieves the given controller .
11681	Register a freeform key .
11682	Encrypts a string to a string .
11683	Get request headers .
11684	Send a request to the API .
11685	Send a GET request .
11686	Send a POST request .
11687	Send a delete request .
11688	Convert a value to an APE value .
11689	Send a request to the server .
11690	Perform an autopaginating API call .
11691	List hosted zones .
11692	Create a hosted zone .
11693	List resource records for a zone .
11694	Change resource record set .
11695	Draw an image .
11696	Draw an image in the image .
11697	Returns the size of the packet .
11698	Replace old pages .
11699	Find the last page of the given file .
11700	Set a section .
11701	Add markup to doc .
11702	Processes the markup .
11703	Get the markup for a given tag .
11704	Creates a new hosted zone writer .
11705	Lock file object .
11706	Insert bytes into a file .
11707	Delete bytes from file .
11708	Convert data to UTF - 8 .
11709	Add a change .
11710	Parse the change_info
11711	Measure the text of a string .
11712	Returns True if the object is modified .
11713	Delete this record .
11714	Saves this resource record .
11715	Parse ID3v1 .
11716	Make an ID3V1 version 3 . 1 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3
11717	Fetch data from file .
11718	Remove all keys from a key
11719	Load a frame .
11720	Updates the common information .
11721	Updates the unknown frame .
11722	Unload sound .
11723	Play a sound .
11724	Set the loop points .
11725	Return a list of glyphs .
11726	Filter glyph names .
11727	Dump a string to a file .
11728	Dump an unsigned unsigned char array .
11729	Main entry point .
11730	Check if path exists .
11731	Return a list of file names .
11732	Parse a hosted zone .
11733	Parse the delegation set .
11734	Write block data to bytes .
11735	Group padding .
11736	Delete the metadata block .
11737	Save the audio file .
11738	Parse a RRSet alias .
11739	Parse RRset record values .
11740	Parse an RRSet record .
11741	Delete this zone .
11742	Create a new record set .
11743	Create a new record set .
11744	Create a new AAAAR record set .
11745	Create a new CNAME record .
11746	Create a new MXResourceRecordSet .
11747	Create a new NSResourceRecordSet .
11748	Create a new PTR record .
11749	Create a new SPFRecordSet .
11750	Create a SRV resource record .
11751	Create a TXT record set .
11752	Register a TXXXKey .
11753	Get the values of a change .
11754	Write a change .
11755	Write a change set of changes to a resource .
11756	Initialize the log file .
11757	Get an item by its alias .
11758	Freeze a dict .
11759	Return a string representation of HTML tags .
11760	Initialize the app .
11761	Initialize the bars .
11762	Bind a bar to a bar .
11763	Return a dictionary of arguments .
11764	Return the url for this request .
11765	Check if current request is current .
11766	Validate a metric class .
11767	Get a stat by name .
11768	Calculate statistics .
11769	Autodiscover plugins .
11770	Export metrics to CSV .
11771	Handle the maintenance .
11772	Get a list of values from a GET request .
11773	Get the value of a GET request .
11774	Get next colour .
11775	Get gecko params
11776	Gets the number of statistics for a given request .
11777	Gets a list of metrics for the current user .
11778	Generate a chart line chart .
11779	Return a list of metrics for a given request .
11780	Return a list of metrics for a given request .
11781	Return all active stats .
11782	Register a gadget .
11783	Return the context data .
11784	Print an error message .
11785	Decorator for validation .
11786	Display a single line input .
11787	List items in a list
11788	Input file input .
11789	Get all games for a given year .
11790	The winner of the game .
11791	Returns the year of the game .
11792	Return a pandas DataFrame for the team .
11793	Get the surface of the game .
11794	Get coin toss .
11795	Get weather information .
11796	Retrieve information about a document .
11797	Get the schedule for the game .
11798	Get the standings .
11799	Get team stats table
11800	Return a list of Roy votes .
11801	Returns a pandas DataFrame for each line .
11802	Returns the year of the game .
11803	Get the statistics for the player .
11804	Changes the current working directory to the current working directory .
11805	Decorator to cache a given URL .
11806	Returns a tuple containing the key - value pairs for the given arguments .
11807	Wrapper around memoize function .
11808	Return the age of the year .
11809	Get stats table .
11810	Get stats for a particular game .
11811	Get stats for a given kind .
11812	Get the per minute per minute
11813	Get the stats for the perposs .
11814	Returns the statistics for the given kind .
11815	Return the stats table for the given kind .
11816	Returns a summary of the statistics table .
11817	Get the data for a game .
11818	Show session data
11819	Expand details into a pandas DataFrame .
11820	Add team columns to the table .
11821	Add feature features to the team .
11822	Calculate the initial win probability for a line .
11823	Return a pandas data .
11824	Return a list of awards for a year .
11825	Get team name .
11826	Return the boxscore for the given year .
11827	Return the pq tag for the given keyword .
11828	Get a list of coaches for a game .
11829	Return a pandas DataFrame for a given year .
11830	Returns the opposite coordinator for the given year .
11831	Determine the definition for a given year .
11832	Return the stadium for the given year .
11833	Returns the default scheme for the given year .
11834	Determine the definition for a given year .
11835	Return a pandas DataFrame for a given year .
11836	Get html from url
11837	Flatten a list of links .
11838	Convert a URL to a ID .
11839	Convert kwargs to qwargs
11840	Read data from a file .
11841	Creates a new connection .
11842	Gets a direct read from the queue .
11843	Close the connection .
11844	Get a batch of data from a file .
11845	Get the remainder of a file .
11846	Read data from a file .
11847	Returns a generator that yields rows from the given path .
11848	Parse a pb file .
11849	Write pb object to file .
11850	Read a varint from the stream .
11851	Iterate over all objects in the stream .
11852	Close the file .
11853	Write pb2 objects to the buffer .
11854	Flush the buffer .
11855	Returns the directory for this game .
11856	Input text to keyboard .
11857	Create a fake video .
11858	Evaluate traits .
11859	Wait for a condition .
11860	Wait until the element is present .
11861	Add ignored exceptions .
11862	Gets the volume .
11863	Returns the main source code .
11864	Send a message to the server .
11865	Get the status of the player .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select the specified source .
11870	Decode a request .
11871	Returns the CRC of the given plaintext .
11872	Encrypt a value .
11873	Prints the missing schema .
11874	Return a list of all links in HTML .
11875	Check if a song name is a song name
11876	Parses a song .
11877	Generate a URL for a song .
11878	Parse Google Google .
11879	Parse a song .
11880	get html response from url
11881	Download file from url
11882	Download a file
11883	Returns a list of station codes for a city
11884	Gets the location of a location .
11885	Parse observation response .
11886	Get station observations for a station
11887	Get search paths .
11888	Returns a list of compiler extensions .
11889	Return the mimetype of the compiler .
11890	Return the compiler mime type .
11891	Return the compiler format for the compiler .
11892	Register a new mimetype .
11893	Unregisters a processor .
11894	Returns a list of paths .
11895	Register default values .
11896	Import Qt core from PySide API .
11897	Return a netnode instance
11898	Add a plugin name to the network .
11899	Deletes a network plugin .
11900	Import settings from config file .
11901	Export settings to a file .
11902	Return a DirectoryIDSettings object .
11903	Iterate over all keys .
11904	Wrapper for simple error handling .
11905	Return a Table instance .
11906	List tables .
11907	Fetch items from a category
11908	Return the ID of the given item .
11909	Get the updated timestamp of the item .
11910	Fetch the owner of a crate .
11911	Fetch the owner of a crate .
11912	Fetch the versions of a crate .
11913	Fetch the version of a crate .
11914	Fetch data from crate .
11915	Retrieve the summary of the category .
11916	Get a list of crates
11917	Get a crate .
11918	Get the raw attribute of a crate .
11919	Fetch items from a path .
11920	Fetch items from a category
11921	Fetches questions for a given category .
11922	Iterate over all available questions .
11923	Fetch items from a category
11924	Calculate the updated timestamp for the given item .
11925	Returns the category category for the given item .
11926	Fetch items from the API .
11927	Return the buffer list .
11928	Return the priority of this IOC .
11929	Close the queue .
11930	Submit a block list .
11931	Cancel a block .
11932	Cancel all pending blocks .
11933	Returns a list of all events in the queue .
11934	Fetch items from a category
11935	Get all cells in the spreadsheet
11936	Parses the feed .
11937	Returns a list of formats for the given pid type .
11938	Return the permission factory .
11939	Create a blueprint .
11940	Create a route rule .
11941	Display a record .
11942	Default view method .
11943	Export record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Sends a timing metric .
11949	Add a timer to the log .
11950	Send a gauge .
11951	Sends a gauge delta .
11952	Sets a metric .
11953	Add data to batch .
11954	Create a batch client .
11955	Return a new instance of the unit .
11956	Flush batches .
11957	Create a new permission checker .
11958	Create a TCP batch client .
11959	Flush all batches .
11960	Create a new TCP client .
11961	Create a new user .
11962	Implements an OpenMath function .
11963	Convert a term to OpenMath .
11964	Convert an OMS object into a Python object .
11965	Convert an object to OpenMath .
11966	Register a conversion to an openmath object .
11967	Registers a conversion to python conversion .
11968	Initialize the application .
11969	Return a list of valid choices .
11970	Split the kwargs into a dictionary .
11971	Register a field type .
11972	Creates a value from the registry .
11973	Return a dict with the default form fields .
11974	Decorator for field_required .
11975	Decorator for field choices .
11976	Return a string representation of a field .
11977	Return email address .
11978	Generate a date field .
11979	Generate a datetime string .
11980	Return a string representation of a field .
11981	Return a string representation of a field .
11982	Generate a time field .
11983	Generate a random choice field .
11984	Generate a list of choices .
11985	Generate a random choice for a given field .
11986	Encode an object to bytes .
11987	Publish package .
11988	Tag the given version .
11989	Decorator to wrap a field .
11990	Load a global global variable .
11991	Build an instance of a class .
11992	Create an OMS list .
11993	Create an OMS tuple .
11994	Decode data into bytes .
11995	Encode the given data .
11996	Convert a number to a floating point .
11997	Format a number .
11998	Convert a number to a currency .
11999	Convert data to numpy array .
12000	Convert an array to a compressed string .
12001	Add a workspace .
12002	Remove a workspace .
12003	Return a list of workspace names .
12004	Retrieves a Widget by name .
12005	Check if a workspace exists .
12006	Sync workspace .
12007	Clone a repository .
12008	Check if ndio is available
12009	Convert array to voxels .
12010	Convert a list of voxels into a numpy array .
12011	Prints a workspace .
12012	Print a new repo
12013	Set the console handler .
12014	Execute a command .
12015	Load an image from a file .
12016	Save a PNG file to a PNG file .
12017	Save a collection of numpy arrays .
12018	Print workspace information .
12019	Print status information .
12020	Returns the block size for the given token .
12021	Upload blosc to blosc .
12022	Load an image from a TIFF file .
12023	Save a TIFF file .
12024	Load a multipart multipart file .
12025	Write the configuration file .
12026	Clone a branch .
12027	Get the version of yoda .
12028	Prints and prints the given greeting .
12029	Print an option .
12030	Reserve IDs for a channel .
12031	Merge multiple IDs .
12032	Set the status of a channel .
12033	List all projects in a dataset .
12034	Get a single dataset .
12035	List all datasets .
12036	Parse a list of workspace details .
12037	Show workspace .
12038	Show workspace information .
12039	Show all workspace .
12040	Returns the URL for this endpoint .
12041	Guess the format of a file .
12042	Open a file .
12043	Convert input file to a file .
12044	Build a build graph .
12045	Compute invariants for invariants .
12046	Convert a graph to a graph .
12047	Convert a list of ramons to a dictionary .
12048	Return the RAMON type for the given type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a JSON representation of a dataset .
12052	Convert a dataset to a dictionary .
12053	Convert a channel to a dictionary .
12054	Return a dict representation of a project .
12055	Identify image size .
12056	Put data into Ndio .
12057	Find the path of a workspace .
12058	Get public tokens
12059	Get information about a project .
12060	Set the metadata for the given token .
12061	Get a URL for a given URL .
12062	Perform a POST request .
12063	Delete a URL
12064	Load data from a HDF5 file .
12065	Save an array to a HDF5 file .
12066	Find gaps in a tree .
12067	Return a NvimIOIO for the given io .
12068	Install Jinja translations .
12069	Execute exclusive lock .
12070	Calculate the percentage of a part .
12071	Get cache stats
12072	Get a list of cache slabs
12073	Return the context data .
12074	Display server status .
12075	Display the memcache dashboard .
12076	Display memcache statistics .
12077	Displays the slabs for a given server .
12078	Convert value to human readable string
12079	Find a config file .
12080	Add a directory .
12081	Apply the configuration to the config .
12082	Return the path of this file .
12083	Read file contents .
12084	Write data to file .
12085	Configure logging .
12086	Create a new file .
12087	Apply the configuration applied to this node .
12088	Return the path of this node .
12089	Remove the directory .
12090	Prepare the environment .
12091	Clean up all children .
12092	Returns the path to the given path .
12093	List all files .
12094	Write data to disk .
12095	Read a file .
12096	Add a file to this directory .
12097	Save the configuration to disk .
12098	Load a YAML file .
12099	Clean up the file .
12100	Load plugins from a directory .
12101	Update a dict with the given source .
12102	Return a child node .
12103	Resolve path .
12104	Get the value of the item .
12105	Update a ConfigNode .
12106	Load the config file .
12107	Apply config to a string .
12108	Build the URL for a callback .
12109	Process input .
12110	Send output to the socket .
12111	Send an RPC call
12112	Read data from a socket .
12113	Write the output to the output stream .
12114	Decorator to wrap a function .
12115	Get the set of remote set modes .
12116	Configure the node .
12117	Returns the address of this message .
12118	Returns the target address of this target .
12119	Called when the session is closed .
12120	Create a new sender .
12121	Create a new SenderLink .
12122	Create a new receiver .
12123	Create a new ReceiverLink .
12124	Destroy a link .
12125	Close the session .
12126	Process an event .
12127	Extend Markdown .
12128	Close the receiver .
12129	Close the receiver .
12130	Get the host port and port .
12131	Connect to a socket .
12132	Create a server socket .
12133	Return a list of available connections .
12134	Decorator to wrap a function .
12135	Process the connection .
12136	Return the output of the output .
12137	Create a sender .
12138	Rejects a link to the sender .
12139	Create a new receiver .
12140	Handle connection failure .
12141	Check if the connection is active .
12142	Close the remote connection .
12143	Handle an error .
12144	Decorator for Twilio .
12145	Return a string representation of the color .
12146	Get font data .
12147	Set compression .
12148	Add an object to the buffer .
12149	Write a stream .
12150	Output stream .
12151	Add a page to the document .
12152	Set the color scheme .
12153	Set the default font .
12154	Add a new page .
12155	Sets the font size .
12156	Adds text to the page .
12157	Add new line to the page .
12158	Add a chart to the chart
12159	Output pages .
12160	Get orientation changes .
12161	Output fonts .
12162	Output images .
12163	Output the image .
12164	Transform a matrix into a matrix
12165	Returns the absolute position of the current position .
12166	Set the style .
12167	Rotate a point
12168	Set the information about this object .
12169	Set the display mode .
12170	Close the document .
12171	Writes the header .
12172	Puts the page .
12173	put the resource dictionary
12174	Print information about this object .
12175	Output the catalog .
12176	Write the trailer to the file .
12177	Run a floyd on a sequence .
12178	Iterate over a sequence of sequences .
12179	Generate a generator for a sequence of sequences .
12180	Iterate over a sequence of sequences .
12181	Checks if the model is fit .
12182	Checks if the model is fit .
12183	Checks if the coordinate is greater than another coordinate .
12184	Checks if the coordinate is greater than another coordinate .
12185	Return a new copy of this cursor .
12186	Add x to x
12187	Add y to y .
12188	Draws the text .
12189	Create a new tag .
12190	List tags .
12191	Get a label by name
12192	Update a label .
12193	Delete a tag
12194	Create a tag .
12195	List tags .
12196	Returns a list of tags matching the given label .
12197	Create a hook .
12198	List hooks .
12199	Update a hook .
12200	Create an alert .
12201	Get a list of alerts .
12202	Update an alert .
12203	Setup Sphinx .
12204	Returns the path to the theme directory .
12205	Perform a POST request .
12206	List hosts .
12207	Get a list of logs for a given log set .
12208	Finds the tracker for the given position .
12209	Calculate the duration of this particle .
12210	Update the parameters of the model .
12211	Compute the transition .
12212	Create a binary bin .
12213	Free memory .
12214	Read data from the socket .
12215	Read lines from the buffer .
12216	Generate a generator from the buffer .
12217	Parse the status of the response .
12218	Generate info generator .
12219	Print information about a message .
12220	Send a command .
12221	List capabilities .
12222	Read the mode reader .
12223	Quit the server .
12224	Get the date from the server .
12225	Command line help .
12226	Generator for new groups .
12227	Generate new news generator .
12228	Return a new list of news .
12229	List active active groups .
12230	List active times .
12231	List all news groups .
12232	Generate a list of information about the view .
12233	List all extensions .
12234	Return a generator for a list of items .
12235	Return a list of items matching keyword arguments .
12236	Group a group
12237	Get next article .
12238	Perform an article .
12239	Perform a HEAD request .
12240	Get the body of a message .
12241	Set the xg title for the specified pattern .
12242	Perform XHDR request .
12243	XZHDR header .
12244	Return a generator of xover lines .
12245	Return a generator of xpatches .
12246	Return a list of xpatches for a given pattern .
12247	Compress a feature .
12248	Send a POST request .
12249	Returns the offset of the given value .
12250	Convert a string to a timestamp .
12251	Convert a string to a datetime object .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform a GET request .
12255	List all scheduled queries .
12256	List the tags in the log entries .
12257	Get a tag by name .
12258	Create an alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new scheduled query .
12262	Delete an alert .
12263	Unparse a range .
12264	Parse newsgroup info .
12265	Parse a header line .
12266	Unparse headers .
12267	Send POST request
12268	Run a test suite .
12269	Generate a docstring .
12270	Decorator to decorator .
12271	Generate a docstring .
12272	Set the value .
12273	Checks the value of the given value .
12274	Return the value of the variable .
12275	Check if value is a scalar .
12276	Return the symmetric error .
12277	Set errors .
12278	Set the values of this object .
12279	Import metrics .
12280	Extract metrics from a list of metrics .
12281	Filter metrics .
12282	Execute the API call
12283	Parse an expression .
12284	Parse operator .
12285	Opens an op .
12286	Initialize required properties .
12287	Return a list of parameter names .
12288	Return a list of all the parameters of the model .
12289	Return the errors of the model .
12290	Clears the derived parameters .
12291	Sets the method name .
12292	Parse the environment variables .
12293	Get URL parameters .
12294	Perform a GET request .
12295	Perform a delete request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Validate scene info .
12300	Verify the type of the satellite .
12301	Get the size of a remote file .
12302	Download a scene from the scene .
12303	Validate bands .
12304	Connect to Earthexplorer
12305	Creates a decorator that returns a function that returns a function that returns a function that returns a function that returns a function that matches the given prefix .
12306	Return the timezone for the given zone .
12307	Normalize a datetime object .
12308	Escapes the given iterable .
12309	Returns a list of line positions for the given text .
12310	Parses a line to a source .
12311	Dump the results of the response .
12312	Remove all the aggregations .
12313	Load a list of fortune files .
12314	Set the probability of a file .
12315	Main entry point .
12316	Parse a rule .
12317	Parse special_handling .
12318	Gets the grammar .
12319	Returns a list of rules .
12320	List of comments .
12321	Gets the directives .
12322	Returns the output source .
12323	Compile the template .
12324	Return a string of imports .
12325	Returns a string representation of the token type .
12326	Return the class definition .
12327	Get the entry point .
12328	Get the definition for a rule .
12329	Get the source of a rule .
12330	Get the transform for a rule .
12331	Convert an expression to an ASN .
12332	Convert a node to an ASN .
12333	Replace operands .
12334	Remove grouping groups .
12335	Convert AST node to code .
12336	Convert an astree node to code .
12337	Convert a terminal to a string .
12338	Convert an AST option group into a string .
12339	Convert a repetition group to code .
12340	Convert special_handling_handling_handling to code .
12341	Convert an opr to a code string .
12342	Convert an opr to code .
12343	Convert an opr to code .
12344	Convert an operation to a code .
12345	Convert an opr to code .
12346	Return a list of directives that match the given predicate .
12347	Determines if a child node is an expression .
12348	Parse a comment from a comment .
12349	Handles the results .
12350	Generate a new ID .
12351	Remove a hotkey .
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the arguments .
12355	Convert infix operators to postfix .
12356	Convert a list of operands to an OptreeNode .
12357	Reduce all operands .
12358	Add arguments to the parser .
12359	Load plugin manifest .
12360	Get a metric definition by name
12361	Get the length of the fields of the table .
12362	Get the width of the metrics table .
12363	Escape the metrics .
12364	Output field markdown .
12365	Output metrics for metrics .
12366	Generate Markdown .
12367	Parse text into a tree .
12368	Attempt to attempt to parse the text .
12369	Add command line arguments .
12370	Parse a time string .
12371	Output a CSV file .
12372	Output a JSON formatted JSON string .
12373	Output a JSON string .
12374	Outputs the results of the given text .
12375	Determines if a node is trimmed .
12376	Prints a tree .
12377	Generate a repetition .
12378	Get a terminal node .
12379	Get a repetition node .
12380	Returns the exclusion of the given text .
12381	Return the number of leading whitespace in text .
12382	Call extractor .
12383	Returns the position of this node .
12384	Return True if this node is empty .
12385	Add ignored .
12386	Check if the node is a type .
12387	Return a copy of this node .
12388	Return a copy of this node .
12389	Return a new ParsedNode .
12390	Return a new ParseNode .
12391	Return a copy of this parser .
12392	Return the current position .
12393	Return the max_readed position .
12394	Increment the next character .
12395	Move next line to next line .
12396	Move previous line to previous line .
12397	Returns the last readed line .
12398	Increment cursor position .
12399	Save the cursor to the cursor .
12400	Restore the current context .
12401	Return a formatted string representation of this object .
12402	Set the name of this object .
12403	Count the number of variables .
12404	Count the number of functions .
12405	Update the number of variables .
12406	Update scope .
12407	Return a new scope .
12408	Update the intersection of the set .
12409	Return a new Scope with the given signature .
12410	Return a copy of this Scope .
12411	Return a new Scope with the given signature .
12412	Update the symmetric difference between two sets .
12413	Return a copy of this scope .
12414	Add a signature .
12415	Remove a signature .
12416	Discard a signature .
12417	Return the values of this signature .
12418	Return the first signature .
12419	Return the last signature .
12420	Get a signature by key .
12421	Get scope by symbol name .
12422	Get a signature by name .
12423	Return a list of all the symbols in this scope .
12424	Call the injector .
12425	Normalize an AST node .
12426	Set another node .
12427	Return a generator that yields all rows in the list .
12428	Check if a hit is ok
12429	Return the signature of the signature .
12430	Resolve the resolution of this expression .
12431	Return a list of names for a given type .
12432	Set the resolution of the given type .
12433	Delete local file .
12434	Delete a file .
12435	Delete a file .
12436	Save local file to disk .
12437	Saves a file to a S3 object .
12438	Save the object to a file .
12439	Return a list of S3 objects matching the given path .
12440	Create a new enumeration .
12441	Check that the given function is valid .
12442	Set a callable by name .
12443	Add a method to the class .
12444	Add a hook .
12445	Define a rule .
12446	Register a directive .
12447	Decorator for decorator .
12448	Binds a rule to the rule .
12449	Read the end of the stream .
12450	Pushes the rules to the tree .
12451	Parses the rule nodes .
12452	Return the value of a node .
12453	Add a new stream to the stream .
12454	Start a tag .
12455	End a tag .
12456	Set the rules .
12457	Set the hooks .
12458	Set the directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Checks if text is a text string .
12462	Read a character from the stream .
12463	Read a character from the stream .
12464	Read from the stream .
12465	Ignore whitespace .
12466	Set the hit_dtype .
12467	Set cluster dtype .
12468	Checks that the given hits are valid .
12469	Add a ruleclause .
12470	Add rules to bnf .
12471	Add a rule to the parser .
12472	Add sequences to the parser .
12473	Add alternative alternatives .
12474	Add a range to the sequence .
12475	Add a rule to the parser .
12476	Add a capture .
12477	Add a bind to the sequence .
12478	Add a hook .
12479	Set the number of parameters for the given number .
12480	Parse a string .
12481	Parse a character .
12482	Parses a parameter .
12483	Set the name of a hook .
12484	Add a parameter .
12485	Gets the rules for this BBN .
12486	Ignore cxx .
12487	Add a new state .
12488	Return a dot representation of the graph .
12489	Write a dot file to a dot file .
12490	Create a PNG file .
12491	Return a string representation of this event .
12492	Returns the next state .
12493	Reset the living state .
12494	Initiate a block .
12495	Infer a subexpr .
12496	Infer the given identifier .
12497	Infer a literal value .
12498	Dump all nodes in this node .
12499	Generate a function for the topology .
12500	Exit scope .
12501	Parse a statement .
12502	Visit a call .
12503	Return a lambda expression .
12504	Visit a hook .
12505	Visit a rule .
12506	Visit a Capture .
12507	Visit a scope .
12508	Visit AST node .
12509	Visit a sequence .
12510	Visit a RepOptional expression .
12511	Visit a rep0 node .
12512	Visit a rep1 node .
12513	Concatenate a string into a string .
12514	Set indentation .
12515	Convert a list into a string .
12516	Print a list of nodes .
12517	Populate a sequence from a sequence .
12518	Populate the state register with the given sequence .
12519	Build the state tree .
12520	Checks if a node is equal to the given value .
12521	Build a grammar from a string .
12522	Build a grammar from a file .
12523	Parse the given source .
12524	Parse a file .
12525	Set a node to a node .
12526	Set the value of a node .
12527	Add a subnode to the node .
12528	Default serializer .
12529	Get a list of deposids .
12530	Dump a deposition .
12531	Return a list of ids for a given date .
12532	Return a list of ids for the given date .
12533	Import bibdoc file .
12534	Dump BibDoc to BibDoc .
12535	Return the count of the database .
12536	Check if a BibDoc exists
12537	Dump an object to a dictionary .
12538	Get the number of users .
12539	Dump a user to a dictionary .
12540	Get the number of communities .
12541	Return a set of modified ids for a given date .
12542	Return a set of records that have been modified .
12543	Return a set of fireroles for the given collection .
12544	Return a list of revisions for a particular record .
12545	Get the list of collections for a record .
12546	Dump record to JSON .
12547	Get a list of records from a given date .
12548	Dump a record .
12549	Return a dictionary representation of the RA .
12550	Load a model from the database .
12551	Collect all things from the migration .
12552	Initialize the application context .
12553	Create a memoize function .
12554	Gets the run_sql .
12555	Get the connected roles for the given action .
12556	Get a list of actions from a query .
12557	Return a dictionary representation of rt .
12558	Load a token from the OAuth2 server .
12559	Import data from database .
12560	Get the import value from the app .
12561	Dump an object to a dictionary .
12562	Return a list of user s users .
12563	Get the number of users in the database .
12564	Dump a user to a dictionary .
12565	Load deposit data .
12566	Create a record and store it in the database .
12567	Load record from database .
12568	Load a list of records .
12569	Print all records in a dump .
12570	Load data from a list of dumps .
12571	Load communities .
12572	Load users from sources .
12573	Loads dependencies from sources .
12574	Get profiler statistics .
12575	Main entry point .
12576	Dump stats .
12577	Delete the profile .
12578	Delete the profile .
12579	Get current status
12580	Disable timestamp .
12581	Load a user .
12582	Calculate the translation of images .
12583	Strips all images in an image collection .
12584	Add one or more dimensions to an array .
12585	Create a dump .
12586	Create a record .
12587	Update a record .
12588	Create a persistent identifier .
12589	Delete a record .
12590	Create a new record .
12591	Create a new FileVersion object .
12592	Delete buckets .
12593	Return a list of PIDs that are missing .
12594	Prepare revisions .
12595	Prepare the list of files
12596	Prepare pids .
12597	Check if a record is deleted .
12598	Load a community .
12599	Load a Community Community .
12600	Dump a thing .
12601	Check if a thing exists
12602	Delete the event handlers .
12603	Calculate the magnitude of a vector .
12604	Normalize a vector .
12605	Transform texCoords .
12606	Ensure all bones in the data .
12607	Set the length of the mesh .
12608	Sets the child bone .
12609	Get the point of the pivot point
12610	Start animation .
12611	Set the current state of this object .
12612	Unset the current state .
12613	Set the state of the region .
12614	Unset the rotation state .
12615	Ensure that object has been created .
12616	Redraw the model .
12617	Draws the model .
12618	Set model .
12619	Write a report to a file .
12620	Create a test suite .
12621	Add a menu .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the window .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label to the widget .
12630	Add a button to the dialog .
12631	Exit the dialog .
12632	Add a button to the dialog .
12633	Add a button to the dialog .
12634	Update the progress bar .
12635	Render the actor .
12636	Renders the world .
12637	Context manager .
12638	Check if a resource exists .
12639	Add a category .
12640	Get the missing texture .
12641	Get a model by name
12642	Load a model .
12643	Returns the model data for the given name .
12644	Load model data .
12645	Add widget .
12646	Draw the submenu .
12647	Redraw the background .
12648	Redraw the scrollbar .
12649	Determine if the mouse is at the given position .
12650	Calculate the p .
12651	Add a layer .
12652	Get a region from the buffer .
12653	Draw the buffer .
12654	Add an action .
12655	Perform an action .
12656	Registers a new ID .
12657	Add a layer .
12658	Draw the layer .
12659	Delete the layer .
12660	Return the border of the widget .
12661	Get the offset of this widget .
12662	Returns the size of the widget .
12663	Read a mesh from a HDF file .
12664	Create a connection for a given shape .
12665	Set the list of fields .
12666	Add a list of fields .
12667	Checks that all elements are valid .
12668	Return the space space .
12669	Calculates the centroids of the given element .
12670	Return a list of angles for each element .
12671	Return a list of all the edges in the mesh .
12672	Compute the stats of the cluster .
12673	Convert an element set to a node set .
12674	Convert nodes to surfaces .
12675	Add a set of surfaces to the element set .
12676	Return the metadata for the fields of the fields .
12677	Return the metadata for this step .
12678	Create the working directory .
12679	Run post processing .
12680	Run GMSHSHH .
12681	Read a history report from a history file .
12682	Read a field report from a file .
12683	Convert a list of strings to a string .
12684	Return a string representation of the equation .
12685	Return a string representation of a dataset .
12686	Parse response .
12687	Perform a GET request .
12688	Write the xy report to a file .
12689	Write a field report .
12690	List all available components .
12691	Return the error message for the given value .
12692	Checks if the exception is thrown .
12693	Set the data for the data .
12694	Returns the axis mode for the given axis .
12695	Set the options for plotting .
12696	Create a class .
12697	Poll the data feed .
12698	Convert value to float
12699	Convert str_value to float
12700	Generate a GraphR Renderer .
12701	Convert XML to unicode .
12702	Convert raw HTML to HTML .
12703	Check if the given mime type matches the given mime type .
12704	Clean up a domain name .
12705	Given a domain name return a list of cut cuts .
12706	Convert a token to a hash .
12707	Collects words in sentence .
12708	Index a document item .
12709	Return a list of tokens .
12710	Get the number of documents for the given hashes .
12711	Lookup a hash of a hash .
12712	Iterate over a hash table .
12713	Return a list of stream items .
12714	Create a stream item from an entry .
12715	Creates a content item from a node .
12716	Read a varint .
12717	Parse an object .
12718	Serialize a stream item key .
12719	Convert a stream item to a key .
12720	Context manager for working directory .
12721	Strip prefix from string .
12722	Remove suffix from string .
12723	Checks if the given haystack contains a substring .
12724	Creates a web page .
12725	Start the server .
12726	Exit the server .
12727	Add a route to the router .
12728	Decorator to register an error handler .
12729	Read a file .
12730	Returns a callback for the error handler .
12731	Add a callback to the route .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize a pattern .
12735	Return the response body .
12736	Add a header .
12737	Set a cookie .
12738	Return the status line .
12739	Gets the content type .
12740	Get all data for a given key .
12741	Recursively deletes a directory .
12742	Get list of open files
12743	Print file type stats
12744	Run rejester .
12745	Attempt to fetch data from a file .
12746	Get a list of lines from a file .
12747	Return a random order pair .
12748	Generate a random adjspecies pair .
12749	Makes a sentence .
12750	%prog similarity
12751	%prog hirana
12752	List entities .
12753	%prog short sum
12754	List keywords .
12755	Run chrono .
12756	Create a stage .
12757	Create a list of stages .
12758	Initialize all stages .
12759	Runs the input stream .
12760	Run all of the writers .
12761	Runs incremental transforms .
12762	Replace the pipeline with the given name .
12763	Make an application .
12764	Given a list of sentences return a set of equivalence ids .
12765	Determine if target_mentions are in target_mentions .
12766	Check if target_mentions are in target_mentions .
12767	Compile the mentions of a mention .
12768	Perform multi token match .
12769	Create a tag file .
12770	Align a chunk to a chunk .
12771	Shutdown the child process .
12772	Multiply multiline p .
12773	Fix email addresses .
12774	Generate sentences in sentences .
12775	Create a sorted collection index .
12776	Creates a list of sentences .
12777	Convert HTML entities to unicode .
12778	Creates a temporary file to be cleaned up .
12779	Creates a new scanner .
12780	Clean up a span .
12781	Align a chunk to a file .
12782	Make absolute path to absolute paths .
12783	Initialize the pipeline .
12784	Generate a human - readable stream .
12785	Convert HTML to HTML .
12786	Convert HTML to HTML .
12787	Creates a clean file for a file .
12788	Clean up a span .
12789	Main entry point .
12790	Try to load a stage .
12791	Load all stages from the given path .
12792	Load all stages from a module .
12793	Initialize a stage .
12794	Read bytes from index_bytes .
12795	Check if a href is a valid URL .
12796	Creates a list of annotated links .
12797	Yield all file paths under input_dir .
12798	Iterate over all tasks .
12799	Get a random item from the database .
12800	Generate tokens from a sentence .
12801	Return a list of sentences .
12802	Retry function .
12803	Verify that the given data is valid .
12804	Get the S3 bucket .
12805	Decode data into a stream .
12806	Extract a chunk from a file .
12807	Convert a stream id to kvlayer key .
12808	Convert kvlayer key to stream id .
12809	Generate a key for a stream item .
12810	Main entry point .
12811	Build a parser .
12812	Add xpaths to the stream item
12813	Convert sentences to char tokens .
12814	Convert a list of ASCII tokens to a string .
12815	Convert char offsets to xpaths .
12816	Add a new tag .
12817	Return the path of the element .
12818	Return the index of the text element .
12819	Return all descendants of an element .
12820	Return a list of elements in the given source .
12821	Return a list of elements matching the given name .
12822	Return a list of elements matching the given pattern .
12823	Select an element with the given name .
12824	Iterate over all the siblings of the given element .
12825	Make a pretty indentation .
12826	Call inkscape .
12827	Inkscape an input file .
12828	Convert SVG file to PDF .
12829	Convert a SVG file to a PNG file .
12830	Get the environment for the given file path .
12831	Setup the template file .
12832	Fill the contents of the template .
12833	Save template content to file .
12834	Create a document from a template file .
12835	Fill the contents of the SVG document .
12836	Render the template to a file .
12837	Render a PDF file .
12838	Parses a string and returns a Parser instance .
12839	Parse HTML document .
12840	Get markup fragment from markup .
12841	Insert a text into the XML document .
12842	Inserts a node at the given node .
12843	Return a clone of this node .
12844	Execute a command .
12845	Return a string representation of a node .
12846	Insert a child into this node .
12847	Parse configuration file .
12848	Get Google API credentials .
12849	Create event datetime datetime .
12850	Create a google calendar event .
12851	Main entry point .
12852	Get file extension .
12853	Add extension to filepath
12854	Return a temporary temporary file .
12855	Remove all files from the workdir .
12856	Convert csv file to json file .
12857	Replace the content of a file .
12858	Parse HTML tags .
12859	Check if the tag is a link .
12860	Create an italic tag .
12861	Create a strong tag .
12862	Create the underline tag .
12863	Parse tag attributes .
12864	Clean linebreaks .
12865	Parse query string .
12866	Parse attribute value .
12867	Translate all keys in a dictionary .
12868	Return a string representation of this object .
12869	Find all files in a folder
12870	Concatenate strings .
12871	Returns a generator that starts with the given part .
12872	Determine if a part contains a part .
12873	Return the length of a string .
12874	Generate a boolean value .
12875	Iterate over a sequence .
12876	Lookup a table by key .
12877	Replace characters in svg code .
12878	Check svg file .
12879	Merge two svg files .
12880	Merge PDF files .
12881	Embed font to svg
12882	Embed font to svg
12883	Check that all inputs are valid .
12884	Check if the function is valid .
12885	Recursively recursively recursively recursively .
12886	Creates the input from the input file .
12887	Recursively recursively recursively .
12888	Convert obj to string
12889	Convert obj to number
12890	Convert obj to boolean
12891	Serialize an XPath expression .
12892	Change file encoding .
12893	Save a QR Code into a QR Code .
12894	Launch a trial .
12895	Call a command .
12896	Convert a tex file to PDF .
12897	Return a list of options for the given phase .
12898	Transforms a geometry to a spatial reference .
12899	Create a Geometry object from a GeoJSON object .
12900	Expand two lists
12901	Return the intersection of this envelope .
12902	Return True if this envelope intersects the envelope .
12903	Return a Polygon representing this Polygon .
12904	Create a DataFrame from a ZFrame .
12905	Write the data to a file .
12906	Select a table with a condition .
12907	Return a table with the given nuclei .
12908	Return the intersection of the table .
12909	Return a new Table with the given table .
12910	Select odd numbers .
12911	Return a subset of odd numbers .
12912	Returns a subset of all elements that are odd .
12913	Calculate the error of the table
12914	r Return the mean of the error
12915	Calculate the binding energy .
12916	Calculate the S2N of the S2 .
12917	Calculate the S1N of the S1 .
12918	Calculate the S2P
12919	S1 p1 p1 p1
12920	Return a derived table with the given name .
12921	Execute a function on the database .
12922	Derive key derivation .
12923	Bootstrap the database .
12924	Search for domain .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs from a file
12928	Return the prefix of a virtual filesystem .
12929	The SID of the SID .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file
12933	Get all available drivers .
12934	Return the driver for the given path .
12935	Convert geomometry to an array .
12936	Rasterize a layer .
12937	Opens a raster file .
12938	Create an Image from a byte array .
12939	Creates a copy of raster .
12940	Gets the options for the DMD_CREATION_OPTION .
12941	Create a Raster .
12942	Set the geometry of the geometry .
12943	Return an array of data as an array .
12944	Returns the envelope .
12945	Return the image driver .
12946	Create a new raster instance .
12947	Return a masked array with the given geometry .
12948	Get the nodata value .
12949	Read a single Raster image .
12950	Resample the image .
12951	Save the image to the given path .
12952	Set the projection .
12953	Warp the source to a destination .
12954	Calculate chunk length .
12955	Lookup the given charset .
12956	Encode a chunk .
12957	Convert a chunk to long .
12958	Get chunk from data .
12959	Decorator for memoize function .
12960	Return a regexp for a file .
12961	Normalize date format .
12962	Determine the timezone .
12963	Convert this object to a dictionary .
12964	Activate pdb hook .
12965	Print an emphasis message .
12966	Handle a job handler .
12967	Main entry point for worker .
12968	Run a worker pool .
12969	Sets the classification .
12970	Send a message to the queue .
12971	Turn a light on a light .
12972	Turn a switch on a device .
12973	Turn the specified brightness on the device .
12974	Turn off a device .
12975	Send messages to the queue .
12976	Send a message to the peer .
12977	Create an adapter for the given object .
12978	Sets the nature of this Product .
12979	Update the dict with the given options .
12980	Reset defaults .
12981	Set the configuration files .
12982	Iterate over all options in the dict .
12983	Return a list of default values .
12984	Create a configuration file .
12985	Update the configuration .
12986	Read a configuration file .
12987	Read configs from the config file .
12988	Return a list of options for a section .
12989	Return a list of sections for the given command .
12990	Solver for a command .
12991	Add options to parser .
12992	Build the main command .
12993	Parse command line arguments .
12994	Generate zsh command .
12995	Completes a command .
12996	Return a list of commands for a command .
12997	Create a bash completion command .
12998	Start a master server .
12999	Connect to the transport .
13000	Called when a line is received .
13001	Close the worker connection .
13002	Handle a job loaded .
13003	Handle a response .
13004	Close the job .
13005	Run a list of jobs .
13006	Close all workers .
13007	Change the waiters .
13008	Add a result .
13009	Wait for changes to be changed .
13010	Load the next job .
13011	Called when the job is completed .
13012	Add a result .
13013	Cancel all jobs .
13014	Wait for all jobs .
13015	Distributed jobs .
13016	Add a new job set .
13017	Get a job from the current state .
13018	Retrieve a job from the pool .
13019	Add a result .
13020	Handle a job set .
13021	Close all active js files .
13022	Uniquify a list .
13023	Check if an object matches the given regex .
13024	Get all entries in the cache .
13025	Get the EC2 region .
13026	Filter entries in a list of entries .
13027	Get a host name .
13028	Create an instance from a dictionary .
13029	Get attribute value .
13030	Sort entries by attribute .
13031	Return a string representation of the table .
13032	Create a new instance from a boto instance .
13033	Returns True if the filter matches the given filter .
13034	Display the public IP address .
13035	Render a list of entries .
13036	Add timestamp to the logger .
13037	Setup logger .
13038	Create a logger .
13039	Setup Celery .
13040	Get a single worker .
13041	Delete a worker
13042	Create a ConfOpt .
13043	Creates a configuration section .
13044	Set options from confs .
13045	Executes command line command .
13046	Create the completion files for the given command .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare rows in table
13051	Generate a color .
13052	Get a hash of a string
13053	Return a random color .
13054	Get input .
13055	Check username and password
13056	Check if token is valid .
13057	Decorator to ensure that the user is authenticated .
13058	Check if the process is running
13059	Try to import a module .
13060	Get the IP address .
13061	Make a request .
13062	Prepare POST parameters .
13063	Start the server .
13064	Render a template .
13065	Stream a command .
13066	Stream commands .
13067	Stream commands .
13068	Calculate the network days for a given date .
13069	Get the path of the command .
13070	Build the SSH command .
13071	Build the SCP command .
13072	Copy entries to a remote directory .
13073	Creates a copy of the entries from the given entries .
13074	Runs a command on the host .
13075	Connect to the given entry .
13076	Load a LSI profile .
13077	Create a LsiProfile object from the given arguments .
13078	Add a relationship .
13079	Return a list of related packages related to this package .
13080	Load relationships from source .
13081	Add a new part .
13082	Load a part of a part .
13083	Find an item by name .
13084	Create a ContentType instance from the given element .
13085	Parses the given input string .
13086	Build the JWT .
13087	Assigns the force field to an atom .
13088	Finds the max radp and NPNP .
13089	Return a dict of ff_params .
13090	Return a stream of bytes .
13091	Return a generator that yields all segments of the given name .
13092	Copy a directory to a directory .
13093	Open a bucket .
13094	Upload a directory .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	List all directories in a directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Ensure that the user is authenticated .
13102	Return English string for English language .
13103	Delete a directory .
13104	Return the URL of the home page .
13105	Decorator to silence the user .
13106	Create a breadcrumb for a project .
13107	Create a breadcrumb for a project .
13108	Calculate the energy energy energy .
13109	Calculate the internal energy .
13110	Return a sorted list of hotspotents .
13111	Get the token for a given host .
13112	Uploads the ltd to the given project .
13113	Checks if a Travis event should be skipped .
13114	Purges a surrogate key .
13115	Register a build .
13116	Confirm a build .
13117	Recursively merges a dictionary into a dictionary .
13118	Main entry point .
13119	Edit a part .
13120	List contents of a zipfile .
13121	Split a path .
13122	Find a file path .
13123	Get the editor editor .
13124	Process a module .
13125	Generate a chart .
13126	Generate HTML for a chart .
13127	Serialize data to a chart .
13128	patch json data
13129	Convert JSON data to HTML
13130	Convert a dict to a DataFrame
13131	Write html file to folder
13132	Create a chart class for a chart .
13133	Encode xfield fields .
13134	Generate a role role .
13135	Get the tarball URL for the app .
13136	Create a new app .
13137	Delete an app .
13138	Add an iterable attribute .
13139	Generate a random string .
13140	Generate a random IP address .
13141	Generate a random date .
13142	Returns a session object .
13143	Perform an API request .
13144	Create a new build .
13145	Check the status of a build .
13146	Generate a sequence of sequences .
13147	Decorator to memoize a function .
13148	Decorator to generate a unique number of arguments .
13149	Register subcommands .
13150	Return the root argparse parser .
13151	Return the description of the documentation .
13152	Return the help string .
13153	Run the command .
13154	Encode a string .
13155	Retrieve a list of alleles from the server .
13156	Returns the last activity of the last activity .
13157	Request activity list .
13158	Request activity data .
13159	Get the endpoint endpoint endpoint .
13160	Return the activity endpoint for the given athlete .
13161	Perform a GET request .
13162	Create a new build .
13163	Return a url with the given view .
13164	Generate a random title .
13165	Generate a person .
13166	Generate a random name .
13167	Render the chart .
13168	Set the dataset .
13169	Render the chart .
13170	Return the type of the given type .
13171	Returns the URL of this request .
13172	Show a webbrowser .
13173	Save image to file .
13174	Attempt to open a request .
13175	Return an Image object .
13176	Write the URL to the file .
13177	Calculate the checksum of the file .
13178	Generate a random amount .
13179	Decorator to set entity name .
13180	Return a dict with unprotected claims .
13181	Return a list of the keys of the signing keys .
13182	Unpack a metadata statement .
13183	Sign a metadata statement .
13184	Evaluate metadata .
13185	Check if metadata is correct .
13186	Extend a request to the request .
13187	Parse command line arguments .
13188	Add logging options .
13189	Apply logging options to log files .
13190	Log a message .
13191	Calculate a dictionary for a word .
13192	Return an iterable of words in a word .
13193	Return the name of the class name .
13194	Transform a series of timeseries into a list of points .
13195	Get the last value of a series .
13196	Validate page number .
13197	Get a page from an iterator .
13198	Chmod a path
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new request .
13203	Update a metadata statement .
13204	Update signature .
13205	Yield the contents of a bundle .
13206	Create a bundle .
13207	Returns a list of urls for a given asset type .
13208	Generate HTML tags for a given asset type .
13209	Generate HTML tags .
13210	Convert a URL to a URL .
13211	Find all links in url
13212	Connect to AMP server .
13213	Get all modules in the project .
13214	Import service modules
13215	Convert a string to a list of strings .
13216	Return a copy of a document .
13217	Convert a list of datetime objects to a document .
13218	Print the cursor to the cursor .
13219	Prints the output of the cursor .
13220	Given a list of tasks return a list of tasks .
13221	Add default dependencies to the project .
13222	Add default types to the given project .
13223	Add default sequences to a project .
13224	Add a new Rnd shot to a project .
13225	This function is called when the model is created .
13226	Create a new Shot .
13227	Create all tasks for the given element .
13228	Preconnect a peer .
13229	Send a packet .
13230	Returns the value of a given section .
13231	Decorator to add a function to a function .
13232	Decorator to register a cinder .
13233	Decorator to add a function to a function .
13234	Decorator to register a glance event .
13235	Decorator for Swift functions .
13236	Decorator to register a function .
13237	Decorator to add a custom event .
13238	Add a factory .
13239	Remove a factory .
13240	Connect to the given factory .
13241	Receive data received from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Create a new AMP connection .
13245	Create a new AMP connection .
13246	Receive data received from the server .
13247	Send data to remote server .
13248	Handle connection lost .
13249	Returns the local protocol for the given connection identifier .
13250	Handle remote data .
13251	Disconnect a connection .
13252	Return the centered string centered on the given string .
13253	Prints a clock on the terminal .
13254	Return a string representation of a version number .
13255	Determine the unit framework framework .
13256	Assert that the given value is a unit .
13257	Pad data with padding .
13258	Removes padding from a block .
13259	Sign a request .
13260	Gather the metadata for the given context .
13261	Prints a human readable word .
13262	Creates a parser for the NABB .
13263	Main entry point .
13264	Called when a packet is received .
13265	Called when a type is received .
13266	Create a function stub .
13267	Check if the given callid is ping .
13268	Return a regex pattern for the command .
13269	Deserialize a string from a string representation .
13270	Convert this object to a string representation .
13271	Verify the metadata .
13272	Parse a remote response .
13273	Dump a database to a database .
13274	List all databases .
13275	Get local files from a path .
13276	Synchronously synchronizes all files in a folder .
13277	Decorator to check if token is allowed .
13278	Login form .
13279	Build a command .
13280	Creates a new instance of a resource .
13281	Load the json file .
13282	Create a JWT from a JWT .
13283	Creates a JWT request for signing keys .
13284	Register a library .
13285	Deserialize a test directory .
13286	Main entry point .
13287	Return the score of a letter .
13288	Score word score .
13289	Generate a list of wordlists .
13290	Check if a word is valid .
13291	Main entry point .
13292	Main entry point .
13293	Respond to a string .
13294	Get the command and responder function .
13295	Parse request arguments .
13296	Run a response .
13297	Write a response .
13298	Called when a connection is lost .
13299	Build a JSON - encoded protocol .
13300	Convert JWKS to a KeyJar object .
13301	Loads a KeyJar from a JSON string .
13302	Process the given event type .
13303	Process cinder .
13304	Process a custom event .
13305	Process a glance event .
13306	Perform a swift process .
13307	Process a custom event .
13308	Perform heatprocess .
13309	Serve the application .
13310	Print a message to stdout .
13311	Print a message .
13312	Register a new CommandSubClass .
13313	Register a new CommandSubClass .
13314	Converts a value to a string .
13315	Converts a string into a Value object .
13316	Update the completers dictionary .
13317	Start the Ternya connection .
13318	Initialize mq .
13319	Import customer modules
13320	Initialize the consumer consumer
13321	Initialize cinder consumer .
13322	Initialize the consumer consumer .
13323	Initialize the consumer consumer .
13324	Initialize the consumer consumer .
13325	Enable an openstack component .
13326	Get information about a song .
13327	Download a song .
13328	Execute the instructions .
13329	Load a name from the global variables .
13330	Call a function .
13331	Dump MySQL database .
13332	Render a DTA file .
13333	Called by the application .
13334	Run the application .
13335	Caches the given path to the given path .
13336	Copy files from src to dst .
13337	Starts the debugger .
13338	Get the mtime of a file .
13339	Check if a file is changed .
13340	Sync all files in the database .
13341	Clear all files in the directory .
13342	Scrape a feed
13343	Download the image
13344	Check if image has changed
13345	Compile a tag .
13346	Finds the caller of the caller .
13347	Get the defining component of a PE .
13348	Main entry point .
13349	Find a symbol by name .
13350	Checks if the pe_pe_pe is contained in the PE .
13351	Check if a PE is a global PE .
13352	Get data type name .
13353	Returns a list of attributes that are related to the rgo .
13354	Creates a new enumeration from the given EDT .
13355	Create a bridge .
13356	Create an external entity .
13357	Create a function to execute a function .
13358	Creates a constant from a CST .
13359	Create a new operation .
13360	Create a derived attribute .
13361	Create a class .
13362	Create a simple association .
13363	Create an association .
13364	Create an association .
13365	Create a component for a component .
13366	Perform a call .
13367	Accept a reply .
13368	Send a reply to a reply .
13369	Raise a reply .
13370	Send a call to the queue .
13371	Establish a connection from the pool .
13372	Dispatch a reply .
13373	Guess a type name .
13374	Deserialize a value .
13375	Parses a literal string .
13376	Parses a paren expression .
13377	Get the content of the given content .
13378	Iterate over all documents in the collection .
13379	Put items into the index .
13380	Delete a content .
13381	Delete all mappings .
13382	Delete the index .
13383	Iterate over all keys in the cache .
13384	Iterate over all keys in the database .
13385	Scan a prefix for a given prefix .
13386	Scan a prefix for a prefix .
13387	Perform fulltext scan .
13388	Iterate over all features in the query .
13389	Iterate over keywords .
13390	Iterate over all keywords in the query .
13391	Iterate over all features in the index .
13392	Determines whether or not a feature name is a list of feature names .
13393	Creates a list of filters for each key range .
13394	Create a new index .
13395	Create the field type mapping .
13396	Retrieve the index mapping .
13397	Retrieve the field types .
13398	Creates a disjunction from a query .
13399	Return the number of bytes in a dictionary .
13400	Count the number of bytes in the scan .
13401	Return a human - readable string representation of fc .
13402	Process the docopt options .
13403	Return the default formatter for the given error .
13404	Return a pretty representation of a link .
13405	Return a string representation of a unique identifier .
13406	Check that the metaclass is unique .
13407	Check if a link is integrity integrity .
13408	Check if a subtype is in a subtype .
13409	Return a generator for a feature index .
13410	Convert a value to a string .
13411	Put items in the database .
13412	Delete all indexes .
13413	Scan all keys in the table .
13414	Iterate over all keys in the table .
13415	Scan an index by value .
13416	Get index prefix for index .
13417	Scan a prefix and return a key .
13418	Scan index prefix and return results .
13419	Define an index .
13420	Put an index into the index .
13421	Put raw value into kvl .
13422	Generate index keys for index .
13423	Return the index for the given name .
13424	Check pypi package name .
13425	Add a direction .
13426	Get the type name of a datetime .
13427	Gets the referenced attribute .
13428	Builds the core type for the given type .
13429	Build an enum type .
13430	Build a complex type .
13431	Build user type .
13432	Build a type from a datetime
13433	Build an XML class .
13434	Build a component of a component .
13435	Build an XML schema .
13436	Parses a string .
13437	Fetch a list ofikes from a street register .
13438	Set position of node .
13439	Decorator for tracking a function .
13440	Parses a double - quoted string .
13441	Parses a quoted string .
13442	Parses an arrow .
13443	Parses a string .
13444	Parses a string .
13445	Parse a string .
13446	Parse dot notation .
13447	Parses a string .
13448	Parse RQBRBR .
13449	Parse QMARK .
13450	ParseLESSTANHANHANHANSTAN .
13451	Parses a string .
13452	Parses a string .
13453	Create a queue .
13454	Delete a queue
13455	List queues .
13456	List exchanges .
13457	Purge a queue .
13458	Create a multipart message .
13459	Read the contents of the image .
13460	Check if text is visible .
13461	Main entry point .
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Serialize a class .
13465	Main entry point .
13466	Search for a query .
13467	Partition a collection .
13468	Run the robot .
13469	Determines the bidi context .
13470	Finds a link based on a relationship .
13471	Fetches the target class .
13472	Compute lookup key .
13473	Compute index key .
13474	Get attribute type .
13475	Create a new instance .
13476	Return all instances of the metaclass .
13477	Define a meta class .
13478	Send a message to the socket .
13479	Receive messages from a socket .
13480	Run dead code .
13481	Parse email addresses .
13482	RPC decorator .
13483	Return a dictionary of rpc_spec .
13484	Normalize postcode middleware .
13485	Return the next value .
13486	Accepts all the SYSYSSYS .
13487	Accept a C_C_C_C_C_C_C_C .
13488	Accepts an EP_PK_PKGPKG .
13489	Get the brightness of the image .
13490	Match the pattern .
13491	Find the position of the given position .
13492	Returns the selection for the given character .
13493	Called when the cursor is changed .
13494	Return exception information .
13495	Creates a new interactive prompt .
13496	Return a mapper instance .
13497	Add a url to the router .
13498	Add a URL to a URL .
13499	Add a function to the store .
13500	Add a function to the registry .
13501	Call the given URL .
13502	Execute the command .
13503	Called when the cursor is pressed .
13504	Check if the cursor is pressed .
13505	Get the history of the current cursor .
13506	Get the next line of the current cursor .
13507	Handle a reply .
13508	Return True if the user is locked .
13509	Returns the edit history for the given index .
13510	Sets the history .
13511	Store the current state of the input buffer .
13512	Called when the user is closed .
13513	Generate a collection of records .
13514	Convert a collection to a pandas DataFrame .
13515	Perform a spin on a collection .
13516	Set the attributes of this object .
13517	Subscribes to the stream .
13518	Log a message .
13519	Sort a list of lists .
13520	Iterate over an iterable .
13521	Convert a notebook to a notebook .
13522	Get the platform supported platform .
13523	Returns the importer for the given path .
13524	Creates a StringIO object .
13525	Parse a version string .
13526	Determine whether or not a setuptools or not .
13527	Add a new entry to the registry .
13528	Find all installed plugins .
13529	Returns the path to the cache file .
13530	Parse an entry point .
13531	Gets the package s package info .
13532	Compute the dependencies of the package .
13533	Parse filename and format .
13534	Collapse leading whitespace .
13535	Hide the completion of the completion widget .
13536	Show the completion widget .
13537	Return the current cursor cursor .
13538	Updates the current cursor .
13539	Register admin site .
13540	Return a list of partition partitions .
13541	Get the system cpu time .
13542	Return a list of cpu_cpu times
13543	Read data from stdin .
13544	Reads a raw block from stdin .
13545	Update tab bar bar .
13546	Create a new tab with the current kernel .
13547	Add a new tab .
13548	Add a menu action to the menu .
13549	Creates a dynamic magic function .
13550	Populate all magic menus .
13551	Close the kernel .
13552	Generate password
13553	Checks if a passphrase is valid .
13554	Generate a boolean cell .
13555	Indented short title .
13556	Collects a list of boolean boolean values from the list .
13557	Toggle boolean value .
13558	Checks if the user is a change .
13559	Checks if the user has a permission .
13560	Add children to the graph .
13561	Create a Bintree from a Bintree .
13562	Submit jobs to the given graph .
13563	Validate the tree .
13564	Make a color table .
13565	Return a copy of this ColorScheme .
13566	Add a new scheme .
13567	Set the active scheme .
13568	Return the path to the home directory .
13569	Handles IO messages .
13570	Handle a request request .
13571	Wait for the kernel .
13572	Sets the style .
13573	Get the format for the given token .
13574	Get the text from the document .
13575	Returns a QTextFormat instance for the given token .
13576	Find the given command .
13577	Normalize path .
13578	Ensure that the given name is a namespace .
13579	Checks that the given entry points are valid .
13580	Return true if src is blank .
13581	Determines if the given source is a string .
13582	Transform the given line into a string .
13583	Transform an assignment line to an ipython .
13584	Transform a line into a single line .
13585	Transform an ipy prompt .
13586	Parses the given lines .
13587	Check if the input is accepted .
13588	Find the indent of a line .
13589	Store the lines in the buffer .
13590	Reset the raw source
13591	Handle cell magic magic .
13592	Append lines to the cell .
13593	Transform a cell .
13594	Push a line into the buffer .
13595	Initialize the observers .
13596	Post a notification .
13597	Return a set of observers for a notification .
13598	Add a callback to the registry .
13599	Create a new job .
13600	Update the status of the running jobs .
13601	Print a group of jobs
13602	Flush a group .
13603	Return the status of the job .
13604	Get the status of the cluster .
13605	Initialize the background thread .
13606	Insert a value at the given index .
13607	Return a copy of this instance .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Sets the current working directory .
13612	Move the current state to the given state .
13613	Compute the energy of the given state .
13614	Return a dictionary with default values .
13615	Check if table_info is valid
13616	Convert a line to a dictionary .
13617	Render a check .
13618	Print a warning message .
13619	Parse the config file .
13620	Create a table of rows .
13621	Generate a link .
13622	Generate javascript file .
13623	Generate CSS file .
13624	Generate an HTML tag .
13625	Subtract value from value
13626	Multiply a value .
13627	Divide a number .
13628	Modify a value .
13629	Return the verbose name of the model .
13630	Split a user input into a string .
13631	Add options to the parser .
13632	Add a builtin .
13633	Remove a builtin .
13634	Deactivate all builtins .
13635	Find the name of a requirement .
13636	Generate a list of link links for this page .
13637	Convert a string to a list .
13638	Main entry point .
13639	Add an action to the dashboard .
13640	Append an action to the parser .
13641	Parse command line arguments .
13642	Print help message .
13643	Run the command .
13644	Check if args are valid
13645	Execute the given options .
13646	Print information about the coverage .
13647	Unserialize a serialized object .
13648	Set the display hook .
13649	Log errors .
13650	Check if a URL is a valid URL .
13651	Validate URL .
13652	Validate url container .
13653	Return the name of the given keys .
13654	Select random ports .
13655	Decorator to create a remote function .
13656	Decorator to create a parallel function .
13657	Map all sequences to the given sequence .
13658	Get the tail of the current history .
13659	Set auto indentation .
13660	Initialize logstart .
13661	Save sys_module_module_state
13662	Restore the sys module state .
13663	Register a post_execute function .
13664	Create a new main module .
13665	Cache the main module for the main module .
13666	Initialize user namespace .
13667	Return a list of all namespace references .
13668	Reset the history .
13669	Delete a variable .
13670	Reset selector .
13671	Add variables to the stack .
13672	Determine if a name is found .
13673	Recursively find a property .
13674	Find object by name .
13675	Inspect an object and return it .
13676	Initialize the history manager .
13677	Show traceback .
13678	Show traceback .
13679	Show traceback .
13680	Show an error message .
13681	Prepare the readline .
13682	Completes text .
13683	Set a custom completer .
13684	Set the completer of the current context .
13685	Run a line magic .
13686	Find a magic object by name .
13687	Define a macro .
13688	Run a command on the system .
13689	Rewrite the output of the command .
13690	Return a dictionary of user variables .
13691	Converts the given expressions into a dictionary .
13692	Evaluate expression .
13693	Execute the given file .
13694	Run a cell magic .
13695	Run the given cell .
13696	Runs a list of nodes .
13697	Enable pylab tools .
13698	Expand variables to a variable .
13699	Create a temporary file .
13700	Extract input lines from a range .
13701	Find user code from target file .
13702	Ends the session .
13703	Publish a message .
13704	Send a message to the client .
13705	Decorator to skip test conditions .
13706	Decorator that returns a function that can be used to determine whether a known failure was made .
13707	Decorator for deprecated warnings .
13708	List all profiles in a directory .
13709	Return a list of profiled profiles .
13710	Find a version by key .
13711	Run a command .
13712	Determine if filename exists .
13713	Get next line .
13714	Send a message to the stream .
13715	Send a command to the terminal .
13716	Prepare a regex pattern .
13717	Expect a pattern .
13718	Searches for the buffer .
13719	Prepare a regex pattern .
13720	Search for the buffer .
13721	Search for buffer .
13722	Add a listener to the logger .
13723	Unpack a directory .
13724	Write a message to stdout .
13725	Return last error .
13726	Return the output of the command .
13727	Find the source code for a file .
13728	Returns a sorted list of all arcs that are executed .
13729	Return a sorted list of arcs that are missing .
13730	Return a sorted list of arcs .
13731	Return a list of branch lines .
13732	Total number of branches .
13733	Return a dict with the missing branch arcs .
13734	Calculate the branch stats .
13735	Set the precision .
13736	Calculate the pc coverage coverage .
13737	Returns a string representation of the pc_covered .
13738	Highlights text in haystack .
13739	Highlights a string .
13740	Highlights keywords .
13741	Run a function .
13742	Unquote a string .
13743	Convert a string to a string .
13744	Generate a marquee of text .
13745	Format screen .
13746	Decode text to dedent .
13747	Return a list of paragraphs .
13748	Find optimal width and widths .
13749	Return the value of the given index .
13750	Compute a matrix of items from a list of items .
13751	Return a list of strings separated by fields .
13752	Build the kernel arguments .
13753	Initialize SSH connection .
13754	Return a pretty representation of an object .
13755	Print a representation of an object .
13756	Get the mro_class of a class .
13757	Print a pretty printable object .
13758	Creates a wrapper for a sequence .
13759	Create a pretty printable for a dict .
13760	Print the superclass .
13761	Print a regular expression .
13762	Print the type of the given object .
13763	Print a function .
13764	Print an exception .
13765	Set a function for a type .
13766	Registers a type by name .
13767	Write text to output .
13768	Break a line .
13769	End a group .
13770	Flush the buffer .
13771	Print a pretty printable object .
13772	Return a set of exception colors .
13773	Write a row to the spreadsheet .
13774	Get the contents of the clipboard
13775	Get the contents of the clipboard .
13776	Get the text from the clipboard .
13777	Get the prefix of the build directory .
13778	Replace keys in dictionary .
13779	Extract dates from a dictionary
13780	Convert an object to a string .
13781	Convert an object to a date .
13782	Convert obj to json
13783	Check if the site directory exists .
13784	Write a script to the install directory .
13785	Sleep to the engine .
13786	Create a parser .
13787	Convert python extensions to csv files .
13788	Main entry point .
13789	Build a PackageFinder instance .
13790	Change log level .
13791	Return the default logger .
13792	Check that the flags are changed .
13793	Print the help help for the class .
13794	Print the command line help .
13795	Print subcommands .
13796	Print help information .
13797	Print examples .
13798	Update the configuration .
13799	Initialize a subcommand .
13800	Flattens the flags .
13801	Parse command line arguments .
13802	Load config file .
13803	Generate the configuration file .
13804	Returns a random number of elements in an array .
13805	Generator for formatting .
13806	Write a message to the output stream .
13807	Called when the config is changed .
13808	Return the help of the class .
13809	Get the help for a trait .
13810	Generate a section of a class .
13811	Clears the instance .
13812	Returns a new instance of the given class .
13813	Format a failure .
13814	Print a crash handler .
13815	Flush the channel .
13816	Start channels .
13817	Read data from a file .
13818	Read data from a file .
13819	Execute a command .
13820	Split a string into a list of tokens .
13821	Compress dhist from hhist .
13822	Register the magics class .
13823	Add a function to the dictionary .
13824	Generate a decorator for a method call .
13825	Decorator to register a function for a function .
13826	Return a dictionary of the documentation for the given type .
13827	Register magic objects .
13828	Register a function .
13829	Formats a text string .
13830	Parse command line arguments .
13831	Set a default option .
13832	Display a gui reference .
13833	Create a task from a callable .
13834	Get task info from a task
13835	Get a function from the task .
13836	Calculate next run
13837	Submit task .
13838	Run a task .
13839	Run the task asynchronously .
13840	Runs a given function .
13841	Run the given callable .
13842	Find url file .
13843	Bind the kernel to the kernel .
13844	Parse test steps .
13845	Create an interrupt event .
13846	Run the main thread .
13847	Filter a dict of namespace names .
13848	List all the names of a namespace .
13849	Raises an exception if the given dict is mutually exclusive .
13850	Determines if the figure is interactive .
13851	Flush the figure .
13852	Send a figure .
13853	Load an IPython extension .
13854	Unload a module .
13855	Generate random ports .
13856	Initialize the notebook .
13857	Handle SIGINT signal .
13858	Confirm the user exit .
13859	Shutdown kernel .
13860	Generate price options
13861	Replace multiple values in a dictionary .
13862	Renders a command .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix the version .
13866	Checks if an object is an array .
13867	Gets the partition of a sequence .
13868	Parses the pexpect .
13869	Run a file .
13870	Run the given source .
13871	Report coverage report .
13872	Generate XML file .
13873	Fetch a file from a file .
13874	Reduces a list of frequencies .
13875	Compute the frequency frequency of a file .
13876	Convert a file to digits .
13877	Calculate the frequency for a given number of digits .
13878	Calculate the frequency of two digits .
13879	Calculate the frequency of n digits .
13880	Plot two frequencies .
13881	Plot the frequencies for a single digit frequency
13882	Print a debug message .
13883	Reverse a view .
13884	Check if a prefix is private .
13885	Create a test suite .
13886	Execute a test script .
13887	Run a test script .
13888	Print a test script .
13889	Return a dict containing all the hashes in the hashroot .
13890	Remove all files from hashroot
13891	Return a list of all files in the directory .
13892	Check if a record is allowed .
13893	Check if a record matches the given matchers .
13894	Format an error .
13895	Embed interactive shell .
13896	Start the main loop .
13897	Creates a new CSV writer .
13898	Prepare a list of languages .
13899	Writes a po file to a po file .
13900	Write header to file
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Run a python module .
13904	Run a python file .
13905	Generate code from a python file .
13906	Creates a python code from a python file .
13907	Return an HTML table for HTML tables .
13908	Set the current value .
13909	Cancel completion .
13910	Select the index of the given row .
13911	Selects the row up to the current index .
13912	Selects the next element in the list .
13913	Selects the left column of this node .
13914	Selects the right column .
13915	Update the list of items .
13916	Returns a dictionary of word frequencies .
13917	Print word frequencies .
13918	Return the XML representation of this node .
13919	Write a file to a file .
13920	Validate a pin .
13921	Send a shared pin .
13922	Delete a shared pin
13923	Send a user to a user .
13924	Delete a pin .
13925	Subscribe to a user .
13926	List subscriptions .
13927	Decorator to monitor a task .
13928	Start the progress bar .
13929	Context manager .
13930	Creates a new subprocess .
13931	Update progress .
13932	Create a new progress monitor .
13933	Set the status of the task .
13934	Generate a page .
13935	Sets the location of the package .
13936	Load a config file .
13937	Load the config file .
13938	Read the config file .
13939	Load a flag from a dict .
13940	Decode a list of arguments .
13941	Load the configuration from the given arguments .
13942	Load the config file .
13943	Parse the arguments .
13944	Convert the parsed data into a config object .
13945	Find a module .
13946	Add a callback to the stop callback .
13947	Notify the process .
13948	Notify the process .
13949	Interrupt the daemon .
13950	Returns the command line arguments .
13951	Start the MPILauncher .
13952	Send a remote file to the remote server .
13953	Fetch a remote file from remote location
13954	Return the number of engines .
13955	Start the engine .
13956	Start a job .
13957	Return the default context for the cluster .
13958	Parse the job id .
13959	Write a batch script .
13960	Start the batch .
13961	Create a menu menu .
13962	Append a JPEG image .
13963	Append a PNG image .
13964	Appends the given svg .
13965	Add an image to the document .
13966	Copy the image to the clipboard .
13967	Get the image for the given name .
13968	Insert an image .
13969	Inserts a SVG into the cursor .
13970	Save an image .
13971	Called when the event is changed .
13972	Initialize environment variables .
13973	Automatically rewrites the input command .
13974	Ask for exit .
13975	Set the next input text .
13976	Read a config file .
13977	Get a list of values from a section
13978	Get a list of lines from a section .
13979	Parse the environment variable .
13980	Set the values from a dictionary .
13981	Load configuration files from a file .
13982	Set an attribute from a config option .
13983	Expand a path to a user .
13984	Set the list of delims .
13985	Split a line into a single line .
13986	Return a list of all the names of the given text .
13987	Return list of attr matches .
13988	Called when a node is changed .
13989	Return a list of file matches .
13990	Return a list of alias matches .
13991	Return a list of tuples matching the given text .
13992	Return the default arguments .
13993	Complete completion .
13994	Completes text completion .
13995	Return True if the record matches the given records .
13996	Returns a list of records matching the given check .
13997	Extract a subdict from a dict .
13998	Return True if the prompt is quiet .
13999	Write output prompt .
14000	Write format data to stdout .
14001	Log output .
14002	Raises an exception if the object is not free .
14003	Convert a string to a timestamp .
14004	Change the event loop .
14005	Dispatch a control message .
14006	Dispatch a shell .
14007	Start the shell .
14008	Perform one iteration .
14009	Publish a Pyinin .
14010	Abort a request .
14011	Clear a request .
14012	Return the name of the kernel .
14013	Send shutdown message .
14014	Called by the context .
14015	Remove all modules from the stack .
14016	Return absolute path .
14017	Return True if a file is a file .
14018	Return True if obj is a class .
14019	Check if a path is a package .
14020	Get package name .
14021	Convert a label to a string .
14022	Return the last key for a given regex .
14023	Transform a function to a function .
14024	Transform a class to a class .
14025	Get the CPU CPU time .
14026	Returns the command line of the process .
14027	Get list of open files .
14028	Returns a list of connected connections .
14029	Check if user has a group .
14030	Resolve a class .
14031	Calculate usage percentage .
14032	Return a memoized function .
14033	Decorator for deprecated functions .
14034	Login to GODoc .
14035	Get GODoc key from URL .
14036	Ensure the temp directory exists .
14037	Removes all temporary files from disk .
14038	Upload a file to GDD .
14039	Synchronously synchronizes the source file .
14040	Download data from GDocs .
14041	Upload PODocs to local directory
14042	Clears the contents of the document .
14043	Create a new Qt console .
14044	Check if url is accessible .
14045	Checks if a URL contains the given contents .
14046	Get HTTP response code .
14047	Compare the content type of a URL .
14048	Compare HTTP response code .
14049	Validate data .
14050	Clear output .
14051	Finds the path for the given command .
14052	Return a list of code units .
14053	Return the full name of the module .
14054	Returns the source file .
14055	Check if the file is a Python file .
14056	Return the total number of seconds .
14057	Return the result of the result .
14058	Wait for messages to be ready .
14059	Get the results of the job .
14060	Abort this message .
14061	Calculate the elapsed time .
14062	Wait for all tasks .
14063	Publish the display pubpublish .
14064	Wait for output to be ready .
14065	Wait for pending messages .
14066	Return absolute path .
14067	Prepare patterns .
14068	Get the separator of a string .
14069	Find all python files in a directory .
14070	Return the relative filename .
14071	Return the canonical filename for the given filename .
14072	Get zip data from a file .
14073	Check if a file path matches the directory .
14074	Check if a file path matches the pattern .
14075	Maps the given path to the absolute path .
14076	Loop through the kernel .
14077	Loop through the kernel .
14078	Loop through the kernel .
14079	Loop through Gtk kernel .
14080	Run a COCon loop .
14081	Enable gui event loop .
14082	Calculate GO E .
14083	Calculate the center of a matrix .
14084	Calculates the difference between the ensemble of the ensemble .
14085	Create a new instance .
14086	Parse a file configuration file .
14087	Parse step configuration .
14088	Initialize the crash handler .
14089	Load the config file .
14090	Initialize the profile directory .
14091	Generate the default configuration file .
14092	Write the file to the file .
14093	Clears the file .
14094	Return a dictionary of line data .
14095	Return a dictionary of arcs .
14096	Write data to file
14097	Read a file from a file .
14098	Read data from a file .
14099	Read data from a file .
14100	Merge parallel data into parallel data .
14101	Add line data .
14102	Add arc data .
14103	Add file to hash .
14104	Return the summary of the file .
14105	Get a list of lines from a given string .
14106	Main loop loop .
14107	Replace multiple lines in a single line .
14108	Read the input from the input stream .
14109	Edit syntax error .
14110	Determine if the error is recompile .
14111	Exit the user .
14112	Get the revision of the VCS .
14113	Creates a new frontend widget .
14114	Initialize the colors .
14115	Return information about this node .
14116	Convert a roj object to an array .
14117	Finds the source code for the given object .
14118	Sets the colors for the current mode .
14119	Toggle the color scheme .
14120	Convert a traceback to text .
14121	Print a structured traceback .
14122	Format a list of lines .
14123	Format exception .
14124	Show the exception only .
14125	Start debugging .
14126	Set the mode .
14127	Decorator to check if a group is required .
14128	Ensure that a module is imported .
14129	Add a line .
14130	Create a new section .
14131	Get a function by name .
14132	Return a string representation of the given expression .
14133	Render the template .
14134	Apply dot notation .
14135	Render a template .
14136	Return a dictionary with default format .
14137	Set a function for a type .
14138	Registers a function by name .
14139	Called when a float is changed .
14140	Return a list of all user config files .
14141	Configure the command line options .
14142	Configure logging .
14143	Configure the working directory .
14144	Print a page to the screen .
14145	Prints the given string from the given string .
14146	Page for a file .
14147	Get pager command .
14148	Get the start of a pager .
14149	Print a snip .
14150	Print a basic string .
14151	Return a PNG image .
14152	Return a PNG image as PNG .
14153	Return True if the given object can be printed .
14154	Print a latex string .
14155	Add options to the plugin .
14156	Validate a list of strings .
14157	Validate a string .
14158	Run the loop loop .
14159	Handle incoming messages .
14160	Execute a command .
14161	Completes the complete text .
14162	Get information about an object .
14163	Send a history request to the server .
14164	Shutdown the server .
14165	Flush the buffer .
14166	Send a string to the server .
14167	Start the channel .
14168	Stop all channels .
14169	Return True if the channel is running .
14170	Load the connection file .
14171	Writes the connection file .
14172	Start the kernel .
14173	Shutdown the kernel .
14174	Restarts the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Send a signal to the kernel .
14178	Check if the channel is alive .
14179	Returns the shell channel .
14180	Returns the subchannel .
14181	Returns the HbChannel instance .
14182	Bind the kernel .
14183	Log a message .
14184	Retrieves the list of available extensions .
14185	Run pre - step before step .
14186	Called after a step .
14187	Finalize the extension .
14188	Iterate over the egg directory .
14189	Checks if a module is in a package .
14190	Launch an IPController .
14191	Save connection information .
14192	Load config from json file
14193	Load the secondary config file .
14194	Execute the given cell .
14195	Enable auto - op .
14196	Disable auto - op .
14197	Parses a cell .
14198	Run heartbeat .
14199	Run a task .
14200	Remove a task .
14201	Patch the given protocol .
14202	Patch an object with the given name .
14203	Accept a connection .
14204	Accept a connection .
14205	Return a ProxyAgent instance
14206	Validate form .
14207	Deletes the object .
14208	Called when the user is saved .
14209	Generate report report .
14210	Check if the module is enabled .
14211	Execute the editor .
14212	Try to fix the error message .
14213	Get the contents of the clipboard .
14214	Add a function to the chain .
14215	Get metadata for a given path .
14216	Configure the logger .
14217	Import a module .
14218	Try to try to attempt a passwordless SSH server .
14219	Try to try to try to open a ssh server .
14220	Try to connect to the given server .
14221	Create a connection to a socket .
14222	Open a tunnel .
14223	Stop the scheduler .
14224	Unwrap an exception .
14225	Registers the engine .
14226	Unregister the engine .
14227	Handle the execute reply .
14228	Flush notifications .
14229	Flush results .
14230	Flush control messages .
14231	Flush incoming control messages .
14232	Flush messages from the socket .
14233	Perform a spin on the queue .
14234	Stop spinning thread .
14235	Flush the socket .
14236	Wait for pending jobs .
14237	Send a request to the server .
14238	Send a request to the server .
14239	Get the result of a specific message .
14240	Get the status of the queue .
14241	Purge results from the engine .
14242	Get the history of the hub .
14243	Execute a query .
14244	Return a set of opcode names .
14245	Get the byte parser .
14246	Return a set of lines matching the given regexes .
14247	Parse the text .
14248	Returns the first line of the first line .
14249	Given a list of lines return a set of lines .
14250	Parse the source code .
14251	Return a list of arcs .
14252	Return the number of exit counts .
14253	Return a list of child classes .
14254	Return a generator of byte numbers .
14255	Find all the statements in the parser .
14256	Return a string representation of a blockstack .
14257	Split the code into chunks .
14258	Validate the given chunks .
14259	Iterate over chunks in chunks .
14260	Returns a list of all the chunks of this parser .
14261	Return all arcs .
14262	Add coverage information .
14263	Start coverage .
14264	Generate coverage report
14265	Determine if the given file is a file .
14266	Parse a distribution name .
14267	Open a URL to a URL .
14268	Fetches the distribution for the given requirement .
14269	Return the parent of the given object .
14270	Return the root topic .
14271	Render a template .
14272	Configure the configuration .
14273	Format an error .
14274	Splits the data into a list of numbers .
14275	Convert nbformat to nbformat
14276	Convert hexadecimal color to RGB .
14277	Get the colors for the given stylename .
14278	Get the font from the given family .
14279	Handle a command .
14280	Handle a history request .
14281	Handle python output .
14282	Handle display data .
14283	Called when the shell is started .
14284	Execute a file .
14285	Process an error message .
14286	Process the payload .
14287	Set the default style .
14288	Edit the editor .
14289	Return a string with the given number .
14290	Make a continuation prompt .
14291	Sets the style sheet .
14292	Sets the highlight style .
14293	Handle a response .
14294	Sign request parameters .
14295	Transform data into dict .
14296	Get virtual memory information .
14297	Get the CPU CPU time .
14298	Get the number of processes .
14299	Get the gids of the process .
14300	Return a list of all the process threads .
14301	Get list of open files .
14302	Get the commit hash of a package .
14303	Get information about a package .
14304	Return a list of python packages .
14305	Get the number of cpu cores .
14306	Get the number of cpus .
14307	Returns the next set of messages .
14308	Fetch one row from the database .
14309	Fetch rows from the database .
14310	Fetch all rows .
14311	Connect to peer
14312	Convert a JSON string to a notebook .
14313	Read a Python notebook from a python file .
14314	Read data from a file .
14315	Writes the given format to the given format .
14316	Write nb to file .
14317	Convert file to metadata
14318	Load values from a dictionary .
14319	Determine if the given name matches .
14320	Determine whether the given class matches the given class .
14321	Determine if the given directory matches the given directory .
14322	Determine if the given file is a file .
14323	Determine if a function has a given function .
14324	Determine if the given method matches the given method .
14325	Determine if a module has a given module .
14326	Read lines from a file .
14327	Parses a list of commands .
14328	Print list of lines .
14329	%prog pdef
14330	Returns the conversion factor for a given currency .
14331	Convert a currency to a currency .
14332	Compute the price of the market .
14333	Returns the encoding of the given stream .
14334	Get the default encoding .
14335	Write the connection file .
14336	Initialize the heartbeat .
14337	Log connection info .
14338	Initialize the session .
14339	Initialize the output stream .
14340	Initialize the kernel .
14341	Initialize connection .
14342	Register the controller .
14343	Convert HTML content to text .
14344	Convert Markdown content to text .
14345	Convert domain name to FQDN .
14346	Set the options for NoseExclude .
14347	Configure NoseExclude .
14348	Determine if the given directory should be excluded .
14349	Determine if the given extension is a dynamic dynamic .
14350	Call each function in a list of functions .
14351	Call each function in a list of functions .
14352	Append a function .
14353	Insert a function into the list .
14354	Format the usage .
14355	Initialize the application .
14356	Create a pid file .
14357	Remove the pid file .
14358	Get pid from file
14359	Construct a magic argument parser .
14360	Return the name of the magic function .
14361	Highlights the given string .
14362	Rehighlight the given block .
14363	Set the position of the frontendighter .
14364	Copy the clipboard to the clipboard .
14365	Execute a shell command .
14366	Called when the prompt finished .
14367	Checks if tab is pressed .
14368	Create a context menu .
14369	Filter the keypress event .
14370	Inserts a continuation prompt .
14371	Handle a complete reply .
14372	Sends a callback to the console .
14373	Handle a callback .
14374	Handle a reply .
14375	Handle input request .
14376	Handle a kernel shutdown .
14377	Handle object info .
14378	Handle python output .
14379	Handle stream .
14380	Handle shutdown .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the kernel .
14384	Restart kernel .
14385	Call the callTip .
14386	Completes the command .
14387	Process an error message .
14388	Process a message .
14389	Change the contents of the document .
14390	Add a plugin .
14391	Chain all methods .
14392	Generate a generator .
14393	Runs a single plugin .
14394	Configure plugins .
14395	Load all the plugins .
14396	Load plugins .
14397	Convert latex to PNG .
14398	Convert latex to HTML .
14399	Convert math text to image .
14400	Checks if the requirement exists .
14401	Generate a list of processes .
14402	Calculate the percent of the CPU .
14403	Return a dict containing the attributes of this object .
14404	Return the name of the process .
14405	Guess the executable .
14406	Return a list of child processes .
14407	Gets the CPU percentage .
14408	Get the memory percentage .
14409	Get memory maps .
14410	Check if the process is running .
14411	Stops the process .
14412	Resume the process .
14413	Kill the process .
14414	Wait for the process .
14415	Wrap the kernel .
14416	Hijack the gtk
14417	Check if an identifier is shadowed .
14418	Initialize the transformer .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Handle a prefilter .
14428	Find the handler for the given line info .
14429	Transform a line .
14430	Prefilters the given line .
14431	Convert lines to prefilter .
14432	Check if the user is autocalled .
14433	Check if the given line is valid .
14434	Returns the handler for the given line .
14435	Checks if the given line is an alias .
14436	Handle a line .
14437	Process the given line .
14438	Handle a magic line .
14439	Handle the magic command .
14440	Handle a line .
14441	Handle a command line .
14442	Called when the widget is clicked .
14443	Enter the callTip widget .
14444	Paint the call tip .
14445	Show information about a call .
14446	Show a tooltip .
14447	Handle cursor position .
14448	Creates a property with a proxied attribute .
14449	Convert path to absolute path .
14450	Validate an instance .
14451	Returns the masked dictionary .
14452	Determine if the virtualenv is running .
14453	Calculate a dictionary of word frequencies .
14454	Decorator to create a view .
14455	Default aliases .
14456	Define an alias .
14457	Define an alias .
14458	Validate alias .
14459	Execute an alias
14460	Transform an alias .
14461	Expands an alias .
14462	The auto - help directive .
14463	Reset the SGR style .
14464	Split a string into a string .
14465	Get the color for the given color .
14466	Return a QTextCharFormat instance .
14467	Generate a JWT token .
14468	Decorator for mutex .
14469	Clean up the JWT .
14470	Check if a token is already used .
14471	Validate a JWT token .
14472	Create a semaphore .
14473	Returns the common prefix of the given items .
14474	Filter event events .
14475	Return the size of the widget .
14476	Checks if the cursor is cut .
14477	Determines whether the text is paste .
14478	Clear the input buffer .
14479	Cut the text .
14480	Execute the given input .
14481	Gets the input buffer .
14482	Sets the input buffer .
14483	Set the font .
14484	Inserts text to clipboard .
14485	Prints the dialog .
14486	Set the cursor to the current cursor .
14487	Reset font .
14488	Append custom text to the cursor .
14489	Append HTML text .
14490	Append HTML to the text .
14491	Appends a plain text text .
14492	Clear temporary buffer .
14493	Completes the cursor .
14494	Fill temporary buffer with given text .
14495	Determines whether or not the modifiers are pressed .
14496	Create the widget .
14497	Create a new page control .
14498	Filter page keypress .
14499	Returns the text of the given block .
14500	Gets the end of the cursor .
14501	Get the cursor position of the input buffer .
14502	Get the line of the input buffer .
14503	Get the cursor cursor .
14504	Gets the cursor cursor .
14505	Insert a continuation prompt .
14506	Insert HTML text into the cursor .
14507	Insert html text into text .
14508	Insert text into text .
14509	Check if cursor is in buffer .
14510	Cancel the input buffer .
14511	Updates the page .
14512	Start the prompt .
14513	Reads a line from the widget .
14514	Set the prompt prompt .
14515	Sets the cursor to the cursor .
14516	Show the prompt .
14517	Adjust the scroll bar .
14518	Main entry point .
14519	Copy the config file to the specified location .
14520	Create a profile directory .
14521	Find a profile directory by name .
14522	Convert a cmp to a key .
14523	Read a file .
14524	Read and return a list of lines .
14525	Create a temporary file with the given filename .
14526	Close the stream .
14527	Write data to file .
14528	Add a new heartbeat handler .
14529	Add a heart failure handler .
14530	Handle a ping .
14531	Return a list of sequences from a sequence .
14532	Return path to filename and filename .
14533	Iterate over all files .
14534	Display all the elapsed statistics .
14535	Calculate the time unit of the elapsed time .
14536	Extract the configuration from a zip file .
14537	Uncache a zip directory .
14538	Parse a quoted string .
14539	Check to see if the dist_dir exists .
14540	Sets the options for fetching .
14541	Create the home directory .
14542	Check if a file is an archive .
14543	Decorator for mutable methods .
14544	Return a new instance of Readonly .
14545	Create a new notebook cell .
14546	Create a new metadata node .
14547	Create a new notebook node .
14548	Return True if path is writable .
14549	Unquote a filename .
14550	Get the filename of a file .
14551	Find a file in the path .
14552	Get the home directory .
14553	Get the xdg config directory .
14554	Get the IPython directory for the environment .
14555	Get the path of the package .
14556	Get the path of the module .
14557	Check if target is outdated
14558	Return a hash of a file .
14559	Check if we have old_config file
14560	Updates suggestions for the given object .
14561	Get suggestions for a given object .
14562	Get suggestions for a given object .
14563	Relative path to relative path .
14564	Return a list of files matching the given pattern .
14565	Return a list of lines .
14566	Return the MD5 hash of the file .
14567	Start the snapshot .
14568	Print the profiler report .
14569	Close the profiler .
14570	Handle the heartbeat .
14571	Enable the WX API .
14572	Disable the widget .
14573	Disable the Qt4 .
14574	Enable the interactive GUI .
14575	Enable a Qt widget .
14576	Enable pyglet .
14577	This function is used to store a wavelet signal .
14578	Initialize the histogram .
14579	Execute a SQL query
14580	Get information about a session .
14581	Returns a list of rows in the database .
14582	Get a range of ranges from a string .
14583	Get history file name .
14584	Set the session name .
14585	Reset the output history .
14586	Return a generator for a range of histograms .
14587	Store the output of the log output .
14588	Write the history to the database .
14589	Stop the thread .
14590	Returns the number of CPUs in the system .
14591	Return a list of cpu_cpu times
14592	Return a list of disk partitions .
14593	Get a list of PIDs .
14594	Return a human - readable version of a pair .
14595	Format a list of statements .
14596	Return a short description of the stack .
14597	Wrapper for expensive caching .
14598	Joins the given regexes .
14599	Remove file from path .
14600	Update the MD5 hash .
14601	Update cluster profiles
14602	Starts a cluster .
14603	Stop the cluster .
14604	Find the path for the given command .
14605	Reads the body of the process .
14606	Find the code units in the coverage file .
14607	Report coverage of coverage files .
14608	Decorator to wrap exceptions .
14609	Set the trace .
14610	Decorator to wrap a function .
14611	Initialize the extensions .
14612	Initialize the code .
14613	Runs the exec_lines from the app .
14614	Run startup files .
14615	Execute the exec_files
14616	Run the command line .
14617	Run the module .
14618	Decorator for generic types .
14619	Get the data filename for a file .
14620	Read data from a file .
14621	Escape a string .
14622	Report coverage report .
14623	Create local static report files .
14624	Write html to file .
14625	Generate a hash of a file .
14626	Create the index file .
14627	Read the status of the file .
14628	Write the status file .
14629	Sort two lists .
14630	Return a slice of elements in a sequence .
14631	Split a sequence into a string .
14632	Read the config file .
14633	Read manifest from manifest file .
14634	Convert a glob pattern to a regular expression .
14635	Return True if filename matches patterns .
14636	Get the versioned files in git .
14637	Start a kernel .
14638	Shutdown the kernel .
14639	Kill a kernel .
14640	Get a kernel by id .
14641	Get the ports for a kernel .
14642	Returns the notebook for the given kernel .
14643	Start the kernel .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restarts a kernel .
14647	Create an IO stream for the given kernel .
14648	Create a shell stream .
14649	Create a hb stream for the given kernel .
14650	Reset this instance .
14651	Export HTML to a file .
14652	Export HTML to a file .
14653	Ensure the image tag is UTF8 .
14654	Convert HTML to HTML .
14655	Exports the figure to a file .
14656	Get a unique object or None .
14657	Gets the query for the query .
14658	Get a query string from a string .
14659	Get a query for a date field .
14660	Get a query for a dateless date .
14661	Returns the query for the given field .
14662	Add case insensitive fields .
14663	Add options to the parser .
14664	Validate attributes against a method
14665	Determine if the given method is valid .
14666	Rotate the text .
14667	Parses zmq module .
14668	Create a parser from a schema .
14669	Returns the websocket URL .
14670	Reserialize a reply .
14671	Inject cookie message .
14672	Start a heartbeat .
14673	Start the hb stream .
14674	Stop the hb stream .
14675	Fload the file .
14676	Returns the index for the given index .
14677	Sets the given index .
14678	Edit the editor .
14679	Show the current block .
14680	Show all the contents of this block .
14681	Iterate over a collection .
14682	Run a collection of processes .
14683	Run a function on a sequence .
14684	Run a collection of parallel processes .
14685	Decorator to wrap a function .
14686	Decorator to wrap object attributes .
14687	Returns a list of lines in the trace .
14688	Finds inpectable lines in lines .
14689	Display a countdown .
14690	Clean up all engines .
14691	Perform a pre - run condition .
14692	Called by post_call
14693	Save the messages to the client .
14694	Synchronously synchronously synchronously synchronously .
14695	Sends a function to the given function .
14696	Return a list of all messages .
14697	Get a message from the queue .
14698	Decorator to wrap a function .
14699	Return a tuple of all fields of the given fields .
14700	Parse a url .
14701	Return a list of module names .
14702	Return a list of all available modules .
14703	Helper function for quick completions .
14704	Return a list of module names .
14705	Return a list of files that match the command line .
14706	Determine the completion of a user .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Report the error report .
14710	Add an error .
14711	Add a failure .
14712	Add a test to the error list .
14713	Generate a random number between two loads .
14714	Generate a random weighted weighted weighted random weighted random weighted distribution .
14715	Register a new engine .
14716	Unregister an engine .
14717	Handles running tasks .
14718	Dispatch a task .
14719	Audit the timeouts of the task .
14720	Attempt to fail a failure .
14721	Attempt to run a task .
14722	Save the given job .
14723	Submit a job .
14724	Dispatch a result .
14725	Handle a single message .
14726	Handle unmetency dependency .
14727	Update the dependency graph .
14728	Start logging .
14729	Print the state of the logfile .
14730	Log a line .
14731	Write data to log file .
14732	Stop logging .
14733	Create a new WorksbookNode .
14734	Add a command to the list .
14735	Add an object to the chain .
14736	Returns a generator that matches the given key .
14737	Return a list of tuples matching the given key .
14738	Handle a notebook directory .
14739	Return a list of notebook notebooks .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find the path for a notebook .
14744	Get path by name .
14745	Get a notebook .
14746	Get notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Iterate over a list of tokens .
14754	Generate a list of tokens from a source string .
14755	Load the default config file .
14756	Return a list of default classes .
14757	Parse command line arguments .
14758	Initialize the terminal .
14759	Initialize the shell .
14760	Initialize banner .
14761	Return a string representation of an object .
14762	Parses the given name .
14763	Set the default value for this object .
14764	Called when a trait change is changed .
14765	Return a dict of trait traits .
14766	Get the metadata for a trait .
14767	Validate the given value .
14768	Returns the default value for this instance .
14769	Determine if the given set of completed items are satisfied .
14770	Return True if the result is unreachable .
14771	Return a dictionary containing all dependencies .
14772	Return the depth of the tree .
14773	Print a Bintree .
14774	Disambiguate DNS URL .
14775	Return all values of a given value .
14776	Validate targets .
14777	Dispatch a monitor .
14778	Dispatch a query .
14779	Handle a new heartbeat .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save task result .
14783	Save a message to the database .
14784	Handle connection request .
14785	Register the engine .
14786	Unregisters an engine .
14787	Finish a registered engine .
14788	Send a shutdown request .
14789	Purge results .
14790	Extracts the data from the response .
14791	Get results from a message .
14792	Get the history of a message .
14793	Handle a query .
14794	Create a new directory .
14795	Decode a command output .
14796	Run a command with the given command .
14797	Execute the command .
14798	Dispatch a message .
14799	Determine if the message is from the current session .
14800	Report a list of morfons .
14801	An annotated file .
14802	Get the installed version .
14803	Convert an object to unicode .
14804	Extract the header from a message .
14805	Check if the message is valid .
14806	Create a new message .
14807	Sign a message list .
14808	Serialize a message .
14809	Send a message to the stream .
14810	Send a message to the stream .
14811	Receive messages from a socket .
14812	Fetch identities from a list of identities .
14813	Unserialize a message list .
14814	Save a SVG document .
14815	Copy a string to the clipboard .
14816	Convert a SVG string to an image .
14817	Return dict of object info .
14818	Return the contents of an object .
14819	Get the source of an object .
14820	Get the arguments of a function .
14821	Return the call string for the call .
14822	Find the file name of an object .
14823	Find the source lines of the object .
14824	Return a string representation of an object .
14825	Generate a header .
14826	Print info about a message .
14827	Print a callable .
14828	Print a docstring .
14829	Print the source code for the given object .
14830	Print a file .
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for a namespace matching a pattern .
14834	Returns a thread that can be used to run a thread .
14835	Decorator for testing .
14836	Find the best match for the given query .
14837	Return a string representation of the XML document .
14838	Return the XML representation of this object .
14839	Load all modules in a package .
14840	Convert a dictionary to a dictionary .
14841	Merge two dictionaries .
14842	Convert an object to a primitive .
14843	Format a raw string into a string .
14844	Return a list of figure names for a given figure .
14845	Print a figure .
14846	Decorator to run matplotlib .
14847	Select figure format .
14848	Find and return the gui and backend .
14849	Activate a matplotlib .
14850	Configure inline support .
14851	Activate pylablib .
14852	Trace a trace event .
14853	Starts the thread .
14854	Stop the thread .
14855	Start tracing .
14856	Starts the trace .
14857	Starts the collector .
14858	Stop the collector .
14859	Pause all traces .
14860	Resume the tracer .
14861	Get line data .
14862	Collect exceptions from a list of exceptions .
14863	Render the traceback .
14864	Start coverage process .
14865	Return the canonical directory of a file .
14866	Returns the source code for the given file .
14867	Checks if the given filename is a trace .
14868	Checks if a file is tracing .
14869	Log warnings .
14870	Checks if source_packages are found .
14871	Start the configuration .
14872	Called when the process is started .
14873	Exclude a regex .
14874	Returns the regex for the given config .
14875	Save the data .
14876	Combines the data in parallel data .
14877	Collect data from source .
14878	Compute the analysis of a morf .
14879	Analyze a morf file .
14880	Perform analysis .
14881	Report a summary of the report .
14882	An annotated files .
14883	Generate HTML report .
14884	Generate xml report .
14885	Display a list of objects .
14886	Displays a list of objects .
14887	Display a list of objects .
14888	Display a PNG image .
14889	Displays an image .
14890	Display a latex object .
14891	Displays a JSON object .
14892	Displays a javascript object .
14893	Reload the contents of the file .
14894	Find the path of the command .
14895	Execute a command .
14896	Forward read events .
14897	Run the next line .
14898	Find the launcher class .
14899	Starts the cluster .
14900	Builds a launcher class .
14901	Start the engine .
14902	Start ipcluster .
14903	Get the app instance .
14904	Check if an event loop is running .
14905	Start an event loop .
14906	Gets the Qt application .
14907	Determine if the application loop is running .
14908	Start event loop .
14909	Creates a blank canvas .
14910	Draws a cross - diagonal cross cross border .
14911	Draw a line between two points .
14912	Set text at given position .
14913	Convert an image to a canvas .
14914	Generate a random UUID .
14915	Generate unique key from get_dict .
14916	Get the domain name of a URL .
14917	Get url arguments from url
