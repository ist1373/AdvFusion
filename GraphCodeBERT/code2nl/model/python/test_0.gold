0	Save model to a pickle located at path
1	CNN from Nature paper .
2	convolutions - only net
3	Create a wrapped monitored SubprocVecEnv for Atari and MuJoCo .
4	Parse arguments not consumed by arg parser into a dicitonary
5	from mpi4py import MPI will call MPI_Init by default . If the child process has MPI environment variables MPI will think that the child process is an MPI process just like the parent and do bad things such as hang . This context manager is a hacky way to clear those environment variables temporarily such as when we are starting multiprocessing Processes .
6	Demmel p 312
7	Create placeholder to feed observations into of the size appropriate to the observation space
8	Create placeholder to feed observations into of the size appropriate to the observation space and add input encoder of the appropriate type .
9	Encode input in the way that is appropriate to the observation space
10	Pickles the current policy for later inspection .
11	Generates a dictionary that contains all collected statistics .
12	Smooth signal y where radius is determines the size of the window
13	Deep - copy an observation dict .
14	Get dict - structured information about a gym . Space .
15	Calculates q_retrace targets
16	See Schedule . value
17	Control a single environment instance using IPC and shared memory .
18	Main entrypoint for A2C algorithm . Train a policy with given network architecture on a given environment using a2c algorithm .
19	swap and then flatten axes 0 and 1
20	Print the number of seconds in human readable format .
21	Add a boolean flag to argparse parser .
22	Given an a gym environment possibly wrapped multiple times returns a wrapper of class named classname or raises ValueError if no such wrapper was applied
23	Unpickle a possible compressed pickle .
24	Update the estimate .
25	Stores provided method args as instance attributes .
26	Flattens a variables and their gradients .
27	Creates a simple neural network
28	Re - launches the current script with workers Returns parent for original parent child for MPI children
29	Get default session or create one with a given config
30	Initialize all the uninitialized variables in the global scope .
31	adjust shape of the data to the shape of the placeholder if possible . If shape is incompatible AssertionError is thrown
32	Configure environment for DeepMind - style Atari .
33	Reset only when lives are exhausted . This way all states are still reachable even though lives are episodic and the learner need not know about any of this behind - the - scenes .
34	Count the GPUs on this machine .
35	Set CUDA_VISIBLE_DEVICES to MPI rank if not already set
36	Returns the rank of each process on its machine The processes on a given machine will be assigned ranks 0 1 2 ... N - 1 where N is the number of processes on this machine .
37	Copies the file from rank 0 to all other ranks Puts it in the same place on all machines
38	Perform a reduction operation over dicts
39	computes discounted sums along 0th dimension of x .
40	See ReplayBuffer . store_effect
41	Update priorities of sampled transitions .
42	Configure environment for retro games using config similar to DeepMind - style Atari in wrap_deepmind
43	Creates a sample function that can be used for HER experience replay .
44	convert a list of = - spaced command - line arguments to a dictionary evaluating python objects when possible
45	Estimate the geometric median of points in 2D .
46	Project the keypoint onto a new position on a new image .
47	Move the keypoint around on an image .
48	Draw the keypoint onto a given image .
49	Generate nearby points to this keypoint based on manhattan distance .
50	Create a shallow copy of the Keypoint object .
51	Create a deep copy of the Keypoint object .
52	Project keypoints from one image to a new one .
53	Draw all keypoints onto a given image .
54	Move the keypoints around on an image .
55	Create a shallow copy of the KeypointsOnImage object .
56	Create a deep copy of the KeypointsOnImage object .
57	Project the bounding box onto a differently shaped image .
58	Extend the size of the bounding box along its sides .
59	Compute the intersection bounding box of this bounding box and another one .
60	Compute the union bounding box of this bounding box and another one .
61	Compute the IoU of this bounding box with another one .
62	Estimate whether the bounding box is fully inside the image area .
63	Estimate whether the bounding box is at least partially inside the image area .
64	Estimate whether the bounding box is partially or fully outside of the image area .
65	Clip off all parts of the bounding box that are outside of the image .
66	Draw the bounding box on an image .
67	Extract the image pixels within the bounding box .
68	Create a shallow copy of the BoundingBox object .
69	Draw all bounding boxes onto a given image .
70	Remove all bounding boxes that are fully or partially outside of the image .
71	Clip off all parts from all bounding boxes that are outside of the image .
72	Create a deep copy of the BoundingBoxesOnImage object .
73	Augmenter that embosses images and overlays the result with the original image .
74	Augmenter that detects all edges in images marks them in a black and white image and then overlays the result with the original image .
75	Augmenter that detects edges that have certain directions and marks them in a black and white image and then overlays the result with the original image .
76	Normalize a shape tuple or array to a shape tuple .
77	Project coordinates from one image shape to another .
78	Create an augmenter to add poisson noise to images .
79	Augmenter that sets a certain fraction of pixels in images to zero .
80	Augmenter that sets rectangular areas within images to zero .
81	Creates an augmenter to apply impulse noise to an image .
82	Adds salt and pepper noise to an image i . e . some white - ish and black - ish pixels .
83	Adds pepper noise to an image i . e . black - ish pixels .
84	Adds coarse pepper noise to an image i . e . rectangles that contain noisy black - ish pixels .
85	Augmenter that changes the contrast of images .
86	Checks whether a variable is a float .
87	Checks whether a variable is a numpy integer array .
88	Checks whether a variable is a numpy float array .
89	Returns a new random state .
90	Creates a copy of a random state .
91	Create N new random states based on an existing random state or seed .
92	Generate a normalized rectangle to be extract from the standard quokka image .
93	Computes the intended new shape of an image - like array after resizing .
94	Returns an image of a quokka as a numpy array .
95	Returns a segmentation map for the standard example quokka image .
96	Returns example keypoints on the standard example quokke image .
97	Returns example bounding boxes on the standard example quokke image .
98	Returns example polygons on the standard example quokke image .
99	Returns the angle in radians between vectors v1 and v2 .
100	Compute the intersection point of two lines .
101	Draw text on an image .
102	Resizes a single image .
103	Compute the amount of pixels by which an array has to be padded to fulfill an aspect ratio .
104	Pad an image - like array on its sides so that it matches a target aspect ratio .
105	Resize an array by pooling values within blocks .
106	Resize an array using average pooling .
107	Resize an array using max - pooling .
108	Converts multiple input images into a single image showing them in a grid .
109	Converts the input images to a grid image and shows it in a new window .
110	Shows an image in a window .
111	Generate a non - silent deprecation warning with stacktrace .
112	Returns whether an augmenter may be executed .
113	A function to be called after the augmentation of images was performed .
114	Return the multiprocessing . Pool instance or create it if not done yet .
115	Augment batches .
116	Augment batches asynchonously .
117	Augment batches from a generator .
118	Augment batches from a generator in a way that does not guarantee to preserve order .
119	Terminate the pool immediately .
120	Stop all workers .
121	Returns a batch from the queue of augmented batches .
122	Augment endlessly images in the source queue .
123	Terminates all background processes immediately .
124	Convert this unnormalized batch to an instance of Batch .
125	Converts another parameter s results to positive values .
126	Converts another parameter s results to negative values .
127	Estimate the area of the polygon .
128	Project the polygon onto an image with different shape .
129	Find the index of the point within the exterior that is closest to the given coordinates .
130	Estimate whether the polygon is fully inside the image area .
131	Estimate whether the polygon is at least partially inside the image area .
132	Estimate whether the polygon is partially or fully outside of the image area .
133	Cut off all parts of the polygon that are outside of the image .
134	Extract the image pixels within the polygon .
135	Set the first point of the exterior to the given point based on its coordinates .
136	Set the first point of the exterior to the given point based on its index .
137	Convert this polygon to a Shapely polygon .
138	Convert this polygon to a Shapely LineString object .
139	Convert this polygon to a bounding box tightly containing the whole polygon .
140	Convert this polygon s exterior to Keypoint instances .
141	Convert this polygon s exterior to a LineString instance .
142	Create a polygon from a Shapely polygon .
143	Estimate if this and other polygon s exterior are almost identical .
144	Create a shallow copy of the Polygon object .
145	Create a deep copy of the Polygon object .
146	Project polygons from one image to a new one .
147	Draw all polygons onto a given image .
148	Remove all polygons that are fully or partially outside of the image .
149	Clip off all parts from all polygons that are outside of the image .
150	Create a deep copy of the PolygonsOnImage object .
151	Create a MultiPolygon from a Shapely MultiPolygon a Shapely Polygon or a Shapely GeometryCollection .
152	Return a list of unordered intersection points .
153	Get item with min key of tree raises ValueError if tree is empty .
154	Get item with max key of tree raises ValueError if tree is empty .
155	Get predecessor to key raises KeyError if key is min key or key does not exist .
156	Get successor to key raises KeyError if key is max key or key does not exist .
157	Generate 2D OpenSimplex noise from X Y coordinates .
158	Convert images to another colorspace .
159	Augmenter to convert images to their grayscale versions .
160	Get the height of a bounding box encapsulating the line .
161	Get the width of a bounding box encapsulating the line .
162	Get for each point whether it is inside of the given image plane .
163	Get the euclidean distance between each two consecutive points .
164	Compute the minimal distance between each point on self and other .
165	Compute the minimal distance between the line string and other .
166	Project the line string onto a differently shaped image .
167	Estimate whether the line string is fully inside the image area .
168	Estimate whether the line string is at least partially inside the image .
169	Find all intersection points between the line string and other .
170	Draw this line segment as a binary image mask .
171	Draw the line segments of the line string as a heatmap array .
172	Draw the points of the line string as a heatmap array .
173	Draw the line segments and points of the line string as a heatmap array .
174	Draw the points of the line string on a given image .
175	Draw the line string on an image .
176	Extract the image pixels covered by the line string .
177	Concatenate this line string with another one .
178	Adds N interpolated points with uniform spacing to each edge .
179	Convert the line string points to keypoints .
180	Generate a bounding box encapsulating the line string .
181	Generate a polygon from the line string points .
182	Generate a heatmap object from the line string .
183	Generate a segmentation map object from the line string .
184	Compare this and another LineString s coordinates .
185	Compare this and another LineString .
186	Create a shallow copy of the LineString object .
187	Draw all line strings onto a given image .
188	Clip off all parts of the line strings that are outside of the image .
189	Create a shallow copy of the LineStringsOnImage object .
190	Create a deep copy of the LineStringsOnImage object .
191	Blend two images using an alpha blending .
192	Augmenter to alpha - blend two image sources using simplex noise alpha masks .
193	Augmenter that always executes exactly one of its children .
194	Augmenter that runs an assert on each batch of input images using a lambda function as condition .
195	Augmenter that sharpens images and overlays the result with the original image .
196	Augmenter to draw clouds in images .
197	Augmenter to draw fog in images .
198	Augmenter to add falling snowflakes to images .
199	Render the segmentation map as an RGB image .
200	Draw the segmentation map as an overlay over an image .
201	Pad the segmentation map on its sides so that its matches a target aspect ratio .
202	Resize the segmentation map array to the provided size given the provided interpolation .
203	Convert segmentation map to heatmaps object .
204	Convert heatmaps to segmentation map .
205	Create a deep copy of the segmentation map object .
206	Offer a new event s at point p in this queue .
207	Render the heatmaps as RGB images .
208	Draw the heatmaps as overlays over an image .
209	Inverts each value in the heatmap shifting low towards high values and vice versa .
210	Pad the heatmaps on their sides so that they match a target aspect ratio .
211	Convert this heatmaps object to a 0 - to - 255 array .
212	Create a heatmaps object from an heatmap array containing values ranging from 0 to 255 .
213	Create a heatmaps object from an heatmap array containing values ranging from 0 . 0 to 1 . 0 .
214	Change the value range of a heatmap from one min - max to another min - max .
215	Create a deep copy of the Heatmaps object .
216	If the header key does not exist then set it to value . Returns the header value .
217	Append a header preserving any duplicate entries .
218	Given a function parse the docstring as YAML and return a dictionary of info .
219	Given directory and packages arugments return a list of all the directories that should be used for serving static files from .
220	Returns an HTTP response given the incoming path method and request headers .
221	Perform a one - off configuration check that StaticFiles is actually pointed at a directory so that we can raise loud errors rather than just returning 404 responses .
222	Given the request and response headers return True if an HTTP Not Modified response could be returned instead .
223	Builds a scope and request body into a WSGI environ object .
224	Receive ASGI websocket messages ensuring valid state transitions .
225	Send ASGI websocket messages ensuring valid state transitions .
226	Finds the top long short and absolute positions .
227	Finds the max and median long and short position concentrations in each time period specified by the index of positions .
228	Determines the long and short allocations in a portfolio .
229	Returns style factor exposure of an algorithm s positions
230	Plots DataFrame output of compute_style_factor_exposures as a line graph
231	Returns arrays of long short and gross sector exposures of an algorithm s positions
232	Plots outputs of compute_sector_exposures as area charts
233	Plots output of compute_sector_exposures as area charts
234	Plots output of compute_sector_exposures as line graphs
235	Returns arrays of long short and gross market cap exposures of an algorithm s positions
236	Plots outputs of compute_cap_exposures as line graphs
237	Returns arrays of pth percentile of long short and gross volume exposures of an algorithm s held shares
238	Generate a number of tear sheets that are useful for analyzing a strategy s performance .
239	Generate a number of plots for analyzing a strategy s positions and holdings .
240	Generate a number of plots for analyzing a strategy s transactions .
241	Generates a report detailing portfolio size constraints set by least liquid tickers . Plots a capacity sweep a curve describing projected sharpe ratio given the slippage penalties that are applied at various capital bases .
242	Generate plots and tables for analyzing a strategy s performance .
243	Sums the absolute value of shares traded in each name on each day . Adds columns containing the closing price and total daily volume for each day - ticker combination .
244	Compute the number of days that would have been required to fully liquidate each position on each day based on the trailing n day mean daily bar volume and a limit on the proportion of a daily bar that we are allowed to consume .
245	For each traded name find the daily transaction total that consumed the greatest proportion of available daily bar volume .
246	Applies quadratic volumeshare slippage model to daily returns based on the proportion of the observed historical daily bar dollar volume consumed by the strategy s trades . Scales the size of trades based on the ratio of the starting capital we wish to test to the starting capital of the passed backtest data .
247	Maps a single transaction row to a dictionary .
248	Formats a transaction DataFrame .
249	Extract daily transaction data from set of transaction objects .
250	Apply a slippage penalty for every dollar traded .
251	- Value of purchases and sales divided by either the actual gross book or the portfolio value for the time step .
252	Merge transactions of the same direction separated by less than max_delta time duration .
253	Group transactions into round trips . First transactions are grouped by day and directionality . Then long and short transactions are matched to create round - trip round_trips for which PnL duration and returns are computed . Crossings where a position changes from long to short and vice - versa are handled correctly .
254	Appends transactions that close out all positions at the end of the timespan covered by positions data . Utilizes pricing information in the positions DataFrame to determine closing price .
255	Translates round trip symbols to sectors .
256	Generate various round - trip statistics .
257	Print various round - trip statistics . Tries to pretty - print tables with HTML output if run inside IPython NB .
258	Attributes the performance of a returns stream to a set of risk factors .
259	Compute daily risk factor exposures .
260	Takes perf attribution data over a period of time and computes annualized multifactor alpha multifactor sharpe risk exposures .
261	Calls perf_attrib using inputs and displays outputs using utils . print_table .
262	Plot total specific and common returns .
263	Plot each factor s contribution to performance .
264	Convert positions to percentages if necessary and change them to long format .
265	Compute cumulative returns less costs .
266	If zipline asset objects are used we want to print them out prettily within the tear sheet . This function should only be applied directly before displaying .
267	Decorator so that functions can be written to work on Series but may still be called with DataFrames .
268	Pretty print a pandas DataFrame .
269	Attempt to detect an intraday strategy . Get the number of positions held at the end of the day and divide that by the number of unique stocks transacted every day . If the average quotient is below a threshold then an intraday strategy is detected .
270	Logic for checking if a strategy is intraday and processing it .
271	Intraday strategies will often not hold positions at the day end . This attempts to find the point in the day that best represents the activity of the strategy on that day and effectively resamples the end - of - day positions with the positions at this point of day . The point of day is found by detecting when our exposure in the market is at its maximum point . Note that this is an estimate .
272	Drop entries from rets so that the start and end dates of rets match those of benchmark_rets .
273	For use in tests ; applied UTC timestamp to DataFrame .
274	Calls the currently registered returns_func
275	Sample a colormap from matplotlib
276	Decorator to set plotting context and axes style during function call .
277	Create pyfolio default plotting style context .
278	Create pyfolio default axes style context .
279	Plots a heatmap of returns by month .
280	Plots a bar graph of returns by year .
281	Plots a distribution of monthly returns .
282	Plots total amount of stocks with an active position either short or long . Displays daily total daily average per month and all - time daily average .
283	Plots total amount of stocks with an active position breaking out short and long into transparent filled regions .
284	Plots cumulative returns highlighting top drawdown periods .
285	Plots how far underwaterr returns are over time or plots current drawdown vs . date .
286	Create box plot of some performance metrics of the strategy . The width of the box whiskers is determined by a bootstrap .
287	Prints some performance metrics of the strategy .
288	Plots raw returns over time .
289	Plots cumulative rolling returns versus some benchmarks .
290	Plots the rolling 6 - month and 12 - month beta versus date .
291	Plots the rolling volatility versus date .
292	Plots the rolling Sharpe ratio versus date .
293	Plots gross leverage versus date .
294	Plots a cake chart of the long and short exposure .
295	Plots the max and median of long and short position concentrations over the time .
296	Plots the sector exposures of the portfolio over time .
297	Creates a box plot of daily weekly and monthly return distributions .
298	Plots turnover vs . date .
299	Plots equity curves at different per - dollar slippage assumptions .
300	Plots curve relating per - dollar slippage to average annual returns .
301	Plots a histogram of daily turnover rates .
302	Plots trading volume per day vs . date .
303	Plots a histogram of transaction times binning the times into buckets of a given duration .
304	Prints information about the worst drawdown periods .
305	Plots monthly returns as a timeseries .
306	Plots timespans and directions of a sample of round trip trades .
307	Prints the share of total PnL contributed by each traded name .
308	Plots a probability distribution for the event of making a profitable trade .
309	Plots the upper and lower bounds of an n standard deviation cone of forecasted cumulative returns . Redraws a new cone when cumulative returns fall outside of last cone drawn .
310	Variance - covariance calculation of daily Value - at - Risk in a portfolio .
311	Determines the Sortino ratio of a strategy .
312	Determines the downside deviation below a threshold
313	Determines the Sharpe ratio of a strategy .
314	Determines the rolling beta of a strategy .
315	Calculates the gross leverage of a strategy .
316	Calculates various performance metrics of a strategy for use in plotting . show_perf_stats .
317	Calculates various bootstrapped performance metrics of a strategy .
318	Performs a bootstrap analysis on a user - defined function returning a summary statistic .
319	Calculate various summary statistics of data .
320	Determines peak valley and recovery dates given an underwater DataFrame .
321	Determines the maximum drawdown of a strategy .
322	Finds top drawdowns sorted by drawdown amount .
323	Places top drawdowns in a table .
324	Determines the rolling volatility of a strategy .
325	Determines the rolling Sharpe ratio of a strategy .
326	Gnerate alternate paths using available values from in - sample returns .
327	Gnerate the upper and lower bounds of an n standard deviation cone of forecasted cumulative returns .
328	Extracts returns based on interesting events . See gen_date_range_interesting .
329	Run Bayesian alpha - beta - model with T distributed returns .
330	Run Bayesian model assuming returns are normally distributed .
331	Bayesian Estimation Supersedes the T - Test
332	Run stochastic volatility model .
333	Generate plot for stochastic volatility model .
334	Compute 5 25 75 and 95 percentiles of cumulative returns used for the Bayesian cone .
335	Compute Bayesian consistency score .
336	Run one of the Bayesian models .
337	Generate cumulative returns plot with Bayesian cone .
338	Wrapper for _log_counter_per_token .
339	Log msg % args at level level once per n times .
340	Log msg % args at level level only if condition is fulfilled .
341	Assemble a logline prefix using the google2 format .
342	Creates a distributed session .
343	A helper function to compute validation related metrics
344	A helper function that shows how to train and validate a model at the same time .
345	A generic function to load mnist - like dataset .
346	Load Matt Mahoney s dataset .
347	Load IMDB dataset .
348	Load Nietzsche dataset .
349	Load WMT 15 English - to - French translation dataset .
350	Load Flickr25K dataset .
351	Download file from Google Drive .
352	Load CelebA dataset
353	Assign the given parameters to the TensorLayer network .
354	Load model from npz and assign to a network .
355	Input parameters and the file name save parameters as a dictionary into . npz file .
356	Save parameters into ckpt file .
357	Load parameters from ckpt file .
358	Load . npy file .
359	r Return a file list in a folder by given a path and regular expression .
360	Return a folder list in a folder by given a folder path .
361	Check a folder by given name if not exist create the folder and return False if directory exists return True .
362	Checks if file exists in working_directory otherwise tries to dowload the file and optionally also tries to extract the file if format is . zip or . tar
363	Sort list of string with number in human order .
364	Process a batch of data by given function by threading .
365	Transform keypoint coordinates according to a given affine transform matrix . OpenCV format x is width .
366	Projective transform by given coordinates usually 4 coordinates .
367	Rotate an image randomly or non - randomly .
368	Randomly or centrally crop an image .
369	Randomly or centrally crop multiple images .
370	Flip the axis of an image such as flip left and right up and down randomly or non - randomly
371	Flip the axises of multiple images together such as flip left and right up and down randomly or non - randomly
372	Shift an image randomly or non - randomly .
373	Change the brightness of a single image randomly or non - randomly .
374	Perform illumination augmentation for a single image randomly or non - randomly .
375	Adjust hue of an RGB image .
376	Resize an image by given output size and method .
377	Scales each value in the pixels of the image .
378	Normalize an image by rescale samplewise centering and samplewise centering in order .
379	Normalize every pixels by the same given mean and std which are usually compute from all examples .
380	Return the ZCA whitening principal components matrix .
381	Apply ZCA whitening on an image by given principal components matrix .
382	Randomly set some pixels to zero by a given keeping probability .
383	Inputs a list of points return a 2D image .
384	r Input string format of class x y w h return list of list format .
385	Parse darknet annotation format into two lists for class and bounding box .
386	Left - right flip the image and coordinates for object detection .
387	Resize an image and compute the new bounding box coordinates .
388	Remove padding .
389	Return mask for sequences .
390	Randomly crop an image and corresponding keypoints without influence scales given by keypoint_random_resize_shortestedge .
391	Flip an image and corresponding keypoints .
392	Randomly resize an image and corresponding keypoints . The height and width of image will be changed independently so the scale will be changed .
393	Take 1D float array of rewards and compute discounted rewards for an episode . When encount a non - zero value consider as the end a of an episode .
394	Calculate the loss for Policy Gradient Network .
395	Log weight .
396	Choice and return an an action by given the action probability distribution .
397	Softmax cross - entropy operation returns the TensorFlow expression of cross - entropy for two distributions it implements softmax internally . See tf . nn . sparse_softmax_cross_entropy_with_logits .
398	Sigmoid cross - entropy operation see tf . nn . sigmoid_cross_entropy_with_logits .
399	Binary cross entropy operation .
400	Return the TensorFlow expression of normalized mean - square - error of two distributions .
401	Returns the expression of cross - entropy of two sequences implement softmax internally . Normally be used for Dynamic RNN with Synced sequence input and output .
402	Max - norm regularization returns a function that can be used to apply max - norm regularization to weights .
403	Ramp activation function .
404	Swish function .
405	Return the softmax outputs of images every pixels have multiple label the sum of a pixel is 1 .
406	Return tensor for sequence length if input is tf . string .
407	State size of the LSTMStateTuple .
408	Tensorflow version of np . repeat for 1D
409	Batch version of tf_map_coordinates
410	Batch map offsets into input
411	Generate a generator that input a group of example in numpy . array and their labels return the examples and labels by the given batch size .
412	Save model architecture and parameters into database timestamp will be added automatically .
413	Finds and returns a model architecture and its parameters from the database which matches the requirement .
414	Delete model .
415	Saves one dataset into database timestamp will be added automatically .
416	Finds and returns a dataset from the database which matches the requirement .
417	Finds and returns all datasets from the database which matches the requirement . In some case the data in a dataset can be stored separately for better management .
418	Delete datasets .
419	Saves the training log timestamp will be added automatically .
420	Saves the validation log timestamp will be added automatically .
421	Deletes training log .
422	Deletes validation log .
423	Uploads a task to the database timestamp will be added automatically .
424	Finds and runs a pending task that in the first of the sorting list .
425	Delete tasks .
426	Finds and runs a pending task .
427	Augment unigram features with hashed n - gram features .
428	Load IMDb data and augment with hashed n - gram features .
429	Read one image .
430	Returns all images in list by given path and name of each image file .
431	Save a image .
432	Save multiple images into one single image .
433	Draw bboxes and class labels on image . Return or save the image with bboxes example in the docs of tl . prepro .
434	Display a group of RGB or Greyscale CNN masks .
435	Visualize the embeddings by using t - SNE .
436	Visualize every columns of the weight matrix to a group of Greyscale img .
437	Save data into TFRecord .
438	Return tensor to read from TFRecord .
439	Print all info of parameters in the network
440	Print all info of layers in the network .
441	Returns the number of parameters in the network .
442	Return the parameters in a list of array .
443	Get all arguments of current layer for saving the graph .
444	returns a tensorflow operation for computing the Region of Interest Pooling
445	Prefetches string values from disk into an input queue .
446	Batches input images and captions .
447	The multiplication counter part of tf . nn . bias_add .
448	Alternative implementation of tf . nn . bias_add which is compatiable with tensorRT .
449	Data Format aware version of tf . nn . batch_normalization .
450	Computing the scale parameter .
451	Reshapes a high - dimension vector input .
452	Get a list of layers output in a network by a given name scope .
453	Get a list of TensorFlow variables by a given name scope .
454	Returns the initialized RNN state . The inputs are LSTMStateTuple or State of RNNCells and an optional feed_dict .
455	Remove the repeated items in a list and return the processed list . You may need it to create merged layer like Concat Elementwise and etc .
456	Ternary operation use threshold computed with weights .
457	Adds a deprecation notice to a docstring .
458	Creates a tensor with all elements set to alpha_value . This operation returns a tensor of type dtype with shape shape and all elements set to alpha .
459	Return the predict results of given non time - series network .
460	Input the predicted results targets results and the number of class return the confusion matrix F1 - score of each class accuracy and macro F1 - score .
461	Return a list of random integer by the given range and quantity .
462	Close TensorFlow session TensorBoard and Nvidia - process if available .
463	Open Tensorboard .
464	Clears all the placeholder variables of keep prob including keeping probabilities of all dropout denoising dropconnect etc .
465	Set the GPU memory fraction for the application .
466	Generate a training batch for the Skip - Gram model .
467	Sample an index from a probability array .
468	Sample from top_k probabilities .
469	Creates the vocabulary of word to word_id .
470	Read list format context from a file .
471	Reads through an analogy question file return its id format .
472	Given a dictionary that maps word to integer id . Returns a reverse dictionary that maps a id to word .
473	Build the words dictionary and replace rare words with UNK token . The most common word has the smallest integer id .
474	Save the vocabulary to a file so the model can be reloaded .
475	Convert a string to list of integers representing token - ids .
476	Tokenize data file and turn into token - ids using given vocabulary file .
477	Calculate the bleu score for hypotheses and references using the MOSES ulti - bleu . perl script .
478	Returns the integer id of a word string .
479	Returns the integer word id of a word string .
480	Returns the word string of an integer word id .
481	How to use Embedding layer and how to convert IDs to vector IDs to words etc .
482	Create and start a swarm job .
483	Retrieve the Engine - level model params from a Swarm model
484	Enable the diagnostic feature for debugging unexpected concurrency in acquiring ConnectionWrapper instances .
485	Returns a dictionary of arguments for DBUtils . SteadyDB . SteadyDBConnection constructor .
486	Gets a logger for the given class in this module
487	Release the database connection and cursor
488	Check for concurrency violation and add self to _clsOutstandingInstances .
489	Close the policy instance and its shared database connection .
490	Get a Connection instance .
491	Close the policy instance and its database connection pool .
492	Get a connection from the pool .
493	Close the policy instance .
494	Create a Connection instance .
495	Release database connection and cursor ; passed as a callback to ConnectionWrapper
496	Reclassifies given state .
497	Construct a _HTMClassificationRecord based on the state of the model passed in through the inputs .
498	Adds the record to the KNN classifier .
499	Removes the given records from the classifier .
500	Removes any stored records within the range from start to end . Noninclusive of end .
501	returns the classified labeling of record
502	Since the KNN Classifier stores categories as numbers we must store each label as a number . This method converts from a label to a unique number . Each label is assigned a unique bit so multiple labels may be assigned to a single record .
503	This method takes a list of labels and returns a unique category number . This enables this class to store a list of categories for each point since the KNN classifier only stores a single number category for each record .
504	Converts a category number into a list of labels
505	Returns a state s anomaly vertor converting it from spare to dense
506	Get the labels on classified points within range start to end . Not inclusive of end .
507	Remove labels from each record with record ROWID in range from start to end noninclusive of end . Removes all records if labelFilter is None otherwise only removes the labels equal to labelFilter .
508	Returns True if the record matches any of the provided filters
509	Removes the set of columns who have never been active from the set of active columns selected in the inhibition round . Such columns cannot represent learned pattern and are therefore meaningless if only inference is required . This should not be done when using a random unlearned SP since you would end up with no active columns .
510	Updates the minimum duty cycles defining normal activity for a column . A column with activity duty cycle below this minimum threshold is boosted .
511	Updates the minimum duty cycles in a global fashion . Sets the minimum duty cycles for the overlap all columns to be a percent of the maximum in the region specified by minPctOverlapDutyCycle . Functionality it is equivalent to _updateMinDutyCyclesLocal but this function exploits the globality of the computation to perform it in a straightforward and efficient manner .
512	Updates the minimum duty cycles . The minimum duty cycles are determined locally . Each column s minimum duty cycles are set to be a percent of the maximum duty cycles in the column s neighborhood . Unlike _updateMinDutyCyclesGlobal here the values can be quite different for different columns .
513	Updates the duty cycles for each column . The OVERLAP duty cycle is a moving average of the number of inputs which overlapped with the each column . The ACTIVITY duty cycles is a moving average of the frequency of activation for each column .
514	The average number of columns per input taking into account the topology of the inputs and columns . This value is used to calculate the inhibition radius . This function supports an arbitrary number of dimensions . If the number of column dimensions does not match the number of input dimensions we treat the missing or phantom dimensions as ones .
515	The range of connected synapses for column . This is used to calculate the inhibition radius . This variation of the function only supports a 1 dimensional column topology .
516	The range of connectedSynapses per column averaged for each dimension . This value is used to calculate the inhibition radius . This variation of the function only supports a 2 dimensional column topology .
517	This method increases the permanence values of synapses of columns whose activity level has been too low . Such columns are identified by having an overlap duty cycle that drops too much below those of their peers . The permanence values for such columns are increased .
518	This method ensures that each column has enough connections to input bits to allow it to become active . Since a column must have at least self . _stimulusThreshold overlaps in order to be considered during the inhibition phase columns without such minimal number of connections even if all the input bits they are connected to turn on have no chance of obtaining the minimum threshold . For such columns the permanence values are increased until the minimum number of connections are formed .
519	Returns a randomly generated permanence value for a synapses that is initialized in a connected state . The basic idea here is to initialize permanence values very close to synPermConnected so that a small number of learning steps could make it disconnected or connected .
520	Returns a randomly generated permanence value for a synapses that is to be initialized in a non - connected state .
521	Initializes the permanences of a column . The method returns a 1 - D array the size of the input where each entry in the array represents the initial permanence value between the input bit at the particular index in the array and the column represented by the index parameter .
522	Update boost factors when global inhibition is used
523	Update boost factors when local inhibition is used
524	Performs inhibition . This method calculates the necessary values needed to actually perform inhibition and then delegates the task of picking the active columns to helper functions .
525	Perform global inhibition . Performing global inhibition entails picking the top numActive columns with the highest overlap score in the entire region . At most half of the columns in a local neighborhood are allowed to be active . Columns with an overlap score below the stimulusThreshold are always inhibited .
526	Performs local inhibition . Local inhibition is performed on a column by column basis . Each column observes the overlaps of its neighbors and is selected if its overlap score is within the top numActive in its local neighborhood . At most half of the columns in a local neighborhood are allowed to be active . Columns with an overlap score below the stimulusThreshold are always inhibited .
527	Gets a neighborhood of columns .
528	Gets a neighborhood of inputs .
529	Factory function that creates typed Array or ArrayRef objects
530	Returns list of input names in spec .
531	Returns list of output names in spec .
532	Get parameter value
533	Set parameter value
534	Get the collection of regions in a network
535	Write state to proto object .
536	Read state from proto object .
537	Runs the OPF Model
538	Main loop of the OPF Model Runner .
539	Run final activities after a model has run . These include recording and logging the final score
540	Create a checkpoint from the current model and store it in a dir named after checkpoint GUID and finally store the GUID in the Models DB
541	Delete the stored checkpoint for the specified modelID . This function is called if the current model is now the best model making the old model s checkpoint obsolete
542	Get the label for the metric being optimized . This function also caches the label in the instance variable self . _optimizedMetricLabel
543	Method which returns a dictionary of field statistics received from the input source .
544	Retrieves the current results and updates the model s record in the Model database .
545	Reads the current best model for the job and returns whether or not the current model is better than the best model stored for the job
546	Writes the results of one iteration of a model . The results are written to this ModelRunner s in - memory cache unless this model is the best model for the job . If this model is the best model the predictions are written out to a permanent store via a prediction output stream instance
547	Writes the contents of this model s in - memory prediction cache to a permanent store via the prediction output stream instance
548	Delete s the output cache associated with the given modelID . This actually clears up the resources associated with the cache rather than deleting al the records in the cache
549	Creates and returns a PeriodicActivityMgr instance initialized with our periodic activities
550	Check if the cancelation flag has been set for this model in the Model DB
551	Save the current metric value and see if the model s performance has leveled off . We do this by looking at some number of previous number of recordings
552	Sets the current model as orphaned . This is called when the scheduler is about to kill the process to reallocate the worker to a different process .
553	Set our state to that obtained from the engWorkerState field of the job record .
554	Return the field contributions statistics .
555	Return the list of all swarms in the given sprint .
556	Return the list of all completed swarms .
557	Return the list of all completing swarms .
558	Return the best model ID and it s errScore from the given sprint which may still be in progress . This returns the best score from all models in the sprint which have matured so far .
559	Change the given swarm s state to newState . If newState is completed then bestModelId and bestErrScore must be provided .
560	Return True if there are any more good sprints still being explored . A good sprint is one that is earlier than where we detected an increase in error from sprint to subsequent sprint .
561	Return True if the given sprint has completed .
562	Adds one encoder .
563	Verify the validity of the node spec object
564	Convert the information of the node spec to a plain dict of basic types
565	Chooses the best model for a given job .
566	Create the encoder instance for our test and return it .
567	Validates control dictionary for the experiment context
568	Extract all items from the allKeys list whose key matches one of the regular expressions passed in reportKeys .
569	Get a specific item by name out of the results dict .
570	Perform standard handling of an exception that occurs while running a model .
571	This creates an experiment directory with a base . py description file created from baseDescription and a description . py generated from the given params dict and then runs the experiment .
572	Recursively copies a dict and returns the result .
573	Recursively applies f to the values in dict d .
574	Return a clipped version of obj suitable for printing This is useful when generating log messages by printing data structures but don t want the message to be too long .
575	Loads a json value from a file and converts it to the corresponding python object .
576	Activity tick handler ; services all activities
577	Recursively updates the values in original with the values from updates .
578	Compares two python dictionaries at the top level and report differences if any to stdout
579	Compares two python dictionaries at the top level and return differences
580	Return the Spec for IdentityRegion .
581	Given model params figure out the correct resolution for the RandomDistributed encoder . Modifies params in place .
582	Remove labels from each record with record ROWID in range from start to end noninclusive of end . Removes all records if labelFilter is None otherwise only removes the labels eqaul to labelFilter .
583	This method will add the record to the KNN classifier .
584	This method will remove the given records from the classifier .
585	This method will remove any stored records within the range from start to end . Noninclusive of end .
586	return the classified labeling of record
587	Construct a _HTMClassificationRecord based on the current state of the htm_prediction_model of this classifier .
588	Run an iteration of this anomaly classifier
589	Sets the autoDetectWaitRecords .
590	Allocate the spatial pooler instance .
591	Run one iteration profiling it if requested .
592	Run one iteration of SPRegion s compute
593	Initialize all ephemerals used by derived classes .
594	Figure out whether reset sequenceId both or neither are present in the data . Compute once instead of every time .
595	Return the class corresponding to the given temporalImp string
596	Get the default arguments from the function and assign as instance vars .
597	Run one iteration of TMRegion s compute
598	Perform an internal optimization step that speeds up inference if we know learning will not be performed anymore . This call may for example remove all potential inputs to each column .
599	Computes the raw anomaly score .
600	Compute the anomaly score as the percent of active columns not predicted .
601	Adds a graph to the plot s figure .
602	Adds a histogram to the plot s figure .
603	Adds an image to the plot s figure .
604	Adds a subplot to the plot s figure at specified position .
605	Get version from local file .
606	Make an attempt to determine if a pre - release version of nupic . bindings is installed already .
607	Read the requirements . txt file and parse into requirements for setup s install_requirements option .
608	Indent all lines in the given string
609	Generates the string representation of a MetricSpec object and returns the metric key associated with the metric .
610	Generates a file by applying token replacements to the given template file
611	Checks to see if property is specified in options . If not reads the default value from the schema
612	Returns the experiment description schema . This implementation loads it in from file experimentDescriptionSchema . json .
613	Generates the non - default metrics specified by the expGenerator params
614	Gets the predicted field and it s datatype from the options dictionary
615	Generates the token substitutions related to the predicted field and the supplemental arguments for prediction
616	Parses validates and executes command - line options ;
617	Parses a textual datetime format and return a Python datetime object .
618	String to boolean
619	Unescapes a string that may contain commas tabs newlines and dashes
620	Parses a string containing only 0 s and 1 s and return a Python list object .
621	Parse a string of space - separated numbers returning a Python list .
622	Translate an index into coordinates using the given coordinate system .
623	Translate coordinates into an index using the given coordinate system .
624	Get the points in the neighborhood of a point .
625	Returns coordinates around given coordinate within given radius . Includes given coordinate .
626	Returns the top W coordinates by order .
627	Hash a coordinate to a 64 bit integer .
628	Returns the order for a coordinate .
629	Maps the coordinate to a bit in the SDR .
630	Function for running binary search on a sorted list .
631	Adds a new segment on a cell .
632	Destroys a segment .
633	Creates a new synapse on a segment .
634	Destroys a synapse .
635	Compute each segment s number of active synapses for a given input . In the returned lists a segment s active synapse count is stored at index segment . flatIdx .
636	Returns the number of segments .
637	Reads deserialized data from proto object
638	Retrieve the requested property as a string . If property does not exist then KeyError will be raised .
639	Retrieve the requested property and return it as a bool . If property does not exist then KeyError will be raised . If the property value is neither 0 nor 1 then ValueError will be raised
640	Set the value of the given configuration property .
641	Return a dict containing all of the configuration properties
642	Parse the given XML file and store all properties it describes .
643	Return the list of paths to search for configuration files .
644	Add noise to the given input .
645	Generate a coincidence matrix . This is used to generate random inputs to the temporal learner and to compare the predicted output against .
646	Generate a list of random sparse distributed vectors . This is used to generate training vectors to the spatial or temporal learner and to compare the predicted output against .
647	Generate a set of simple sequences . The elements of the sequences will be integers from 0 to nCoinc - 1 . The length of each sequence will be randomly chosen from the seqLength list .
648	Generate a set of hub sequences . These are sequences which contain a hub element in the middle . The elements of the sequences will be integers from 0 to nCoinc - 1 . The hub elements will only appear in the middle of each sequence . The length of each sequence will be randomly chosen from the seqLength list .
649	Generate a non overlapping coincidence matrix . This is used to generate random inputs to the temporal learner and to compare the predicted output against .
650	Generate a set of simple and hub sequences . A simple sequence contains a randomly chosen set of elements from 0 to nCoinc - 1 . A hub sequence always contains a hub element in the middle of it .
651	Given two TM instances see if any parameters are different .
652	Return True if seg1 and seg2 are identical ignoring order of synapses
653	Function that compares two spatial pooler instances . Compares the static variables between the two poolers to make sure that they are equivalent .
654	Accumulate a list of values values into the frequency counts freqCounts and return the updated frequency counts
655	Helper function used by averageOnTimePerTimestep . durations is a vector which must be the same len as vector . For each on in vector it fills in the corresponding element of duration with the duration of that on signal up until that time
656	Computes the average on - time of the outputs that are on at each time step and then averages this over all time steps .
657	Returns the average on - time averaged over all on - time runs .
658	This is usually used to display a histogram of the on - times encountered in a particular output .
659	Returns the stability for the population averaged over multiple time steps
660	Returns the percent of the outputs that remain completely stable over N time steps .
661	Compute the saturation for a continuous level . This breaks the level into multiple regions and computes the saturation level for each region .
662	Compares the actual input with the predicted input and returns results
663	Generates centre offsets and spread offsets for block - mode based training regimes - star cross block .
664	Make a two - dimensional clone map mapping columns to clone master .
665	Pretty print a numpy matrix using the given format string for each value . Return the string representation
666	Generates a random sample from the discrete probability distribution and returns its value and the log of the probability of sampling that value .
667	Form of distribution must be an array of counts in order of self . keys .
668	Generates a random sample from the Poisson probability distribution and returns its value and the log of the probability of sampling that value .
669	Link sensor region to other region so that it can pass it data .
670	Create required links from a sensor region to a classifier region .
671	Create and initialize a network .
672	Get prediction results for all prediction steps .
673	Run the Hot Gym example .
674	Loads all the parameters for this dummy model . For any paramters specified as lists read the appropriate value for this model using the model index
675	Protected function that can be overridden by subclasses . Its main purpose is to allow the the OPFDummyModelRunner to override this with deterministic values
676	Checks to see if the model should exit based on the exitAfter dummy parameter
677	Returns a description of the dataset
678	Generate multiple records . Refer to definition for generateRecord
679	Returns the nth record
680	Returns all the records
681	Add values to the field i .
682	Returns the sdr for jth value at column i
683	Returns the nth encoding with the predictedField zeroed out
684	Returns the cumulative n for all the fields in the dataset
685	Returns the cumulative w for all the fields in the dataset
686	Returns the nth encoding
687	Returns encodings for all the records
688	Export all the records into a csv file in numenta format .
689	Deletes all the values in the dataset
690	Value is encoded as a sdr using the encoding parameters of the Field
691	Set up the dataTypes and initialize encoders
692	Initialize the encoders
693	Loads the experiment description file from the path .
694	Loads the experiment description python script from the given experiment directory .
695	Loads a description file and returns it as a module .
696	Return the modelID of the model with the given paramsHash or None if not found .
697	Return the model ID of the model with the best result so far and it s score on the optimize metric . If swarm is None then it returns the global best otherwise it returns the best for the given swarm for all generatons up to and including genIdx .
698	Return particle info for a specific modelId .
699	Return a list of particleStates for all particles we know about in the given swarm their model Ids and metric results .
700	Return a list of particleStates for all particles in the given swarm generation that have been orphaned .
701	Return the generation index of the first generation in the given swarm that does not have numParticles particles in it either still in the running state or completed . This does not include orphaned particles .
702	Return a dict of the errors obtained on models that were run with each value from a PermuteChoice variable .
703	Generate stream definition based on
704	Test if it s OK to exit this worker . This is only called when we run out of prospective new models to evaluate . This method sees if all models have matured yet . If not it will sleep for a bit and return False . This will indicate to the hypersearch worker that we should keep running and check again later . This gives this worker a chance to pick up and adopt any model which may become orphaned by another worker before it matures .
705	Record or update the results for a model . This is called by the HSW whenever it gets results info for another model or updated results on a model that is still running .
706	Run the given model .
707	Return true if the engine services are running
708	Starts a swarm given a path to a JSON file containing configuration .
709	Starts a swarm given a path to a permutations . py script .
710	Back up a file
711	Creates an iterator that returns ModelInfo elements for the given modelIDs
712	Launch worker processes to execute the given command line
713	Starts HyperSearch as a worker or runs it inline for the dryRun action
714	Instantiates a _HyperSearchJob instance from info saved in file
715	Saves the given _HyperSearchJob instance s jobID to file
716	Loads a saved jobID from file
717	Returns filepath where to store HyperSearch JobID
718	Emit model info to csv file
719	Queuries DB for model IDs of all currently instantiated models associated with this HyperSearch job .
720	Retrives the optimization key name and optimization function .
721	Retrives a dictionary of metrics that combines all report and optimization metrics
722	Returns the next n values for the distribution as a list .
723	Returns the periodic checks to see if the model should continue running .
724	Iterates through stream to calculate total records after aggregation . This will alter the bookmark state .
725	Return a pattern for a number .
726	Add noise to pattern .
727	Return the set of pattern numbers that match a bit .
728	Return a map from number to matching on bits for all numbers that match a set of bits .
729	Pretty print a pattern .
730	Generates set of random patterns .
731	Gets a value of w for use in generating a pattern .
732	Generates set of consecutive patterns .
733	Perform inference for a single step . Given an SDR input and a weight matrix return a predicted distribution .
734	Calculate error signal
735	Sort a potentially big file
736	Sort in memory chunk of records
737	Merge sorted chunk files into a sorted output file
738	Feeds input record through TM performing inference and learning . Updates member variables with new state .
739	Print a message to the console .
740	Returns coordinate for given GPS position .
741	Returns radius for given speed .
742	Read serialized object from file .
743	Write serialized object to file .
744	Decorator for functions that require anomaly models .
745	Remove labels from the anomaly classifier within this model . Removes all records if labelFilter == None otherwise only removes the labels equal to labelFilter .
746	Add labels from the anomaly classifier within this model .
747	Get labels from the anomaly classifier within this model .
748	Compute Anomaly score if required
749	Remove entries with 0 likelihood or likelihood less than minLikelihoodThreshold but don t leave an empty dict .
750	Returns reference to the network s Classifier region
751	Attaches an AnomalyClassifier region to the network . Will remove current AnomalyClassifier region if it exists .
752	Setup our resultsPerChoice history based on the passed in resultsPerChoice .
753	Translates the given metrics value to JSON string
754	Tell the writer which metrics should be written
755	Get field metadate information for inferences that are of dict type
756	Creates the inference output directory for the given experiment
757	A decorator that maintains the attribute lock state of an object
758	Generates a set of input record
759	Creates an one - off record for each record in the inputs . Appends new records to the same inputs list .
760	Creates a neighboring record for each record in the inputs and adds new records at the end of the inputs list
761	Modifies up to maxChanges number of bits in the inputVal
762	Returns a random selection from the inputSpace with randomly modified up to maxChanges number of bits .
763	Creates a RecordSensor region that allows us to specify a file record stream as the input source .
764	Creates and returns a new Network with a sensor region reading data from dataSource . There are two hierarchical levels each with one SP and one TM .
765	Runs specified Network writing the ensuing anomaly scores to writer .
766	Removes trailing whitespace on each line .
767	Gets the current metric values
768	Gets detailed info about a given metric in addition to its value . This may including any statistics or auxilary data that are computed for a given metric .
769	Stores the current model results in the manager s internal store
770	Get the actual value for this field
771	Creates the required metrics modules
772	Shift the model result and return the new instance .
773	Collect statistics for each of the fields in the user input data file and return a stats dict object .
774	Run according to options in sys . argv and diff classifiers .
775	Abbreviate the given text to threshold chars and append an ellipsis if its length exceeds threshold ; used for logging ;
776	Generates the ClientJobs database name for the given version of the database
777	Locate the current version of the jobs DB or create a new one and optionally delete old versions laying around . If desired this method can be called at any time to re - create the tables from scratch delete old versions of the database etc .
778	Return a sequence of matching rows with the requested field values from a table or empty sequence if nothing matched .
779	Return a single matching row with the requested field values from the the requested table or None if nothing matched .
780	Add an entry to the jobs table for a new job request . This is called by clients that wish to startup a new job like a Hypersearch stream job or specific model evaluation from the engine .
781	Place the given job in STATUS_RUNNING mode ; the job is expected to be STATUS_NOTSTARTED .
782	Look through the jobs table and reactivate all that are already in the running state by setting their _eng_allocate_new_workers fields to True ; used by Nupic Scheduler as part of its failure - recovery procedure .
783	Look through the jobs table and get the demand - minimum and maximum number of workers requested if new workers are to be allocated if there are any untended dead workers for all running jobs .
784	Set cancel field of all currently - running jobs to true .
785	Look through the jobs table and count the running jobs whose cancel field is true .
786	Look through the jobs table and get the list of running jobs whose cancel field is true .
787	Generator to allow iterating slices at dynamic intervals
788	Get all info about a job with model details if available .
789	Get all info about a job
790	Change the status on the given job
791	Change the status on the given job to completed
792	Cancel the given job . This will update the cancel field in the jobs table and will result in the job being cancelled .
793	Fetch all the modelIDs that correspond to a given jobID ; empty sequence if none
794	Return the number of jobs for the given clientInfo and a status that is not completed .
795	Return the number of jobs for the given clientKey and a status that is not completed .
796	Fetch jobIDs for jobs in the table with optional fields given a specific clientInfo
797	Update the results string and last - update - time fields of a model .
798	Delete all models from the models table
799	Get ALL info for a set of models
800	Gets the specified fields for all the models for a single job . This is similar to modelsGetFields
801	Gets fields from all models in a job that have been checkpointed . This is used to figure out whether or not a new model should be checkpointed .
802	Get the params and paramsHash for a set of models .
803	Get the results string and other status fields for a set of models .
804	Look through the models table for an orphaned model which is a model that is not completed yet whose _eng_last_update_time is more than maxUpdateInterval seconds ago .
805	Initialize attributes that are not saved with the checkpoint .
806	Begin writing output tap files .
807	Disable writing of output tap files .
808	Write outputs to output tap file .
809	Store a training sample and associated category label
810	Does nothing . Kept here for API compatibility
811	Generate requested statistics for a dataset and cache to a file . If filename is None then don t cache to a file
812	Given model params figure out the correct parameters for the RandomDistributed encoder . Modifies params in place .
813	Intercepts TemporalMemory deserialization request in order to initialize TemporalMemoryMonitorMixin state
814	Pick a value according to the provided distribution .
815	Returns an array of length size and type dtype that is everywhere 0 except in the index in pos .
816	Returns an array of length size and type dtype that is everywhere 0 except in the indices listed in sequence pos .
817	Returns an array of length size and type dtype that is everywhere 0 except in the indices listed in sequence pos . The non - zero indices contain a normalized distribution based on the counts .
818	Grows the histogram to have rows rows and cols columns . Must not have been initialized before or already have the same number of columns . If rows is smaller than the current number of rows does not shrink . Also updates the sizes of the row and column sums .
819	Add distribution to row row . Distribution should be an array of probabilities or counts .
820	Run a named function specified by a filesystem path module name and function name .
821	Routine for computing a moving average .
822	Instance method wrapper around compute .
823	Compute and store metric value
824	Helper function to return a scalar value representing the most likely outcome given a probability distribution
825	Helper function to return a scalar value representing the expected value of a probability distribution
826	Return the field names for each of the scalar values returned by getScalars .
827	Gets the value of a given field from the input record
828	Return the offset and length of a given field within the encoded output .
829	Return a description of the given bit in the encoded output . This will include the field name and the offset within the field .
830	Pretty - print the encoded output using ascii art .
831	Takes an encoded output and does its best to work backwards and generate the input that would have generated it .
832	The similarity of two patterns in the bit - encoding space is displayed alongside their similarity in the sp - coinc space .
833	create a random input vector
834	Run the spatial pooler with the input vector
835	Clears the state of the KNNClassifier .
836	A list of row indices to remove . There are two caveats . First this is a potentially slow operation . Second pattern indices will shift if patterns before them are removed .
837	Return the distances between the input pattern and all other stored patterns .
838	Finds the category that best matches the input pattern . Returns the winning category index as well as a distribution over all categories .
839	Returns the index of the pattern that is closest to inputPattern the distances of all patterns to inputPattern and the indices of the k closest categories .
840	Returns the closest training pattern to inputPattern that belongs to category cat .
841	Gets a training pattern either by index or category number .
842	Gets the partition id given an index .
843	Adds partition id for pattern index
844	Rebuilds the partition Id map using the given partitionIdList
845	Calculate the distances from inputPattern to all stored patterns . All distances are between 0 . 0 and 1 . 0
846	Return the distances from inputPattern to all stored patterns .
847	Change the category indices .
848	Converts all of the non - numeric fields from spatialOutput and temporalOutput into their scalar equivalents and records them in the output dictionary .
849	Computes the width of dataOut .
850	Set the value of a Spec parameter . Most parameters are handled automatically by PyRegion s parameter set mechanism . The ones that need special treatment are explicitly handled here .
851	Put us back at the beginning of the file again .
852	Returns next available data record from the file .
853	Saves the record in the underlying csv file .
854	Saves multiple records in the underlying storage .
855	Gets a bookmark or anchor to the current position .
856	Seeks to numRecords from the end and returns a bookmark to the new position .
857	Keep track of sequence and make sure time goes forward
858	Extracts start row from the bookmark information
859	Returns True if the inference from this timestep is predicted the input for the NEXT timestep .
860	Returns the number of records that elapse between when an inference is made and when the corresponding input record will appear . For example a multistep prediction for 3 timesteps out will have a delay of 3
861	Returns the maximum delay for the InferenceElements in the inference dictionary
862	Returns True if the inference type is temporal i . e . requires a temporal memory in the network .
863	Utility function for creating enumerations in python
864	Makes directory for the given directory path with default permissions . If the directory already exists it is treated as success .
865	Parse the given XML file and return a dict describing the file .
866	Set multiple custom properties and persist them to the custom configuration store .
867	Clear all configuration properties from in - memory cache but do NOT alter the custom configuration file . Used in unit - testing .
868	Clear all custom configuration settings and delete the persistent custom configuration store .
869	If persistent is True delete the temporary file
870	Returns a dict of all temporary values in custom configuration file
871	Edits the XML configuration file with the parameters specified by properties
872	Sets the path of the custom configuration file
873	Get the particle state as a dict . This is enough information to instantiate this particle on another worker .
874	Init all of our variable positions velocities and optionally the best result and best position from the given particle .
875	Copy specific variables from particleState into this particle .
876	Return the position of a particle given its state dict .
877	Agitate this particle so that it is likely to go to a new position . Every time agitate is called the particle is jiggled an even greater amount .
878	Choose a new position based on results obtained so far from all other particles .
879	Get the logger for this object .
880	Create a new model instance given a description dictionary .
881	Perform one time step of the Temporal Memory algorithm .
882	Calculate the active cells using the current active columns and dendrite segments . Grow and reinforce synapses .
883	Calculate dendrite segment activity using the current active cells .
884	Indicates the start of a new sequence . Clears any predictions and makes sure synapses don t grow to the currently active cells in the next time step .
885	Determines which cells in a predicted column should be added to winner cells list and learns on the segments that correctly predicted this column .
886	Punishes the Segments that incorrectly predicted a column to be active .
887	Create a segment on the connections enforcing the maxSegmentsPerCell parameter .
888	Destroy nDestroy synapses on the specified segment but don t destroy synapses to the excludeCells .
889	Gets the cell with the smallest number of segments . Break ties randomly .
890	Creates nDesiredNewSynapes synapses on the segment passed in if possible choosing random cells from the previous winner cells that are not already on the segment .
891	Updates synapses on segment . Strengthens active synapses ; weakens inactive synapses .
892	Returns the index of the column that a cell belongs to .
893	Returns the indices of cells that belong to a column .
894	Maps cells to the columns they belong to .
895	Returns the indices of the predictive cells .
896	Reads deserialized data from proto object .
897	Generate a sequence from a list of numbers .
898	Add spatial noise to each pattern in the sequence .
899	Pretty print a sequence .
900	Returns pretty - printed table of traces .
901	Returns pretty - printed table of metrics .
902	Compute updated probabilities for anomalyScores using the given params .
903	Return the value of skipRecords for passing to estimateAnomalyLikelihoods
904	capnp deserialization method for the anomaly likelihood object
905	capnp serialization method for the anomaly likelihood object
906	Compute the probability that the current value plus anomaly score represents an anomaly given the historical distribution of anomaly scores . The closer the number is to 1 the higher the chance it is an anomaly .
907	Replaces the Iteration Cycle phases
908	Processes the given record according to the current iteration cycle phase
909	Advance to the next iteration cycle phase
910	Processes the given record according to the current phase
911	Advances the iteration ;
912	Serialize via capnp
913	Deserialize via capnp
914	Accepts log - values as input exponentiates them computes the sum then converts the sum back to log - space and returns the result . Handles underflow by rescaling so that the largest values is exactly 1 . 0 .
915	Accepts log - values as input exponentiates them normalizes and returns the result . Handles underflow by rescaling so that the largest values is exactly 1 . 0 .
916	Log msg % args with severity DEBUG .
917	Log msg % args with severity INFO .
918	Log msg % args with severity WARNING .
919	Log msg % args with severity ERROR .
920	Log msg % args with severity CRITICAL .
921	Log msg % args with the integer severity level .
922	Takes a record and returns true if record meets filter criteria false otherwise
923	Returns sum of the elements in the list . Missing items are replaced with the mean value
924	Returns mean of non - None elements of the list
925	Returns most common value seen in the non - None elements of the list
926	Generate a dataset of aggregated values
927	Generate the filename for aggregated dataset
928	Add the aggregation period to the input time t and return a datetime object
929	Given the name of an aggregation function returns the function pointer and param .
930	Generate the aggregated output record
931	Return the next aggregated record if any
932	Run one iteration of this model .
933	Return the absolute path of the model s checkpoint file .
934	Serializes model using capnproto and writes data to checkpointDir
935	Deserializes model from checkpointDir using capnproto
936	Save the state maintained by the Model base class
937	Save the model in the given directory .
938	Return the absolute path of the model s pickle file .
939	Run a single OPF experiment .
940	Used as optparse callback for reaping a variable number of option args . The option may be specified multiple times and all the args associated with that option name will be accumulated in the order that they are encountered
941	Report usage error and exit program with error indication .
942	Creates and runs the experiment
943	Creates directory for serialization of the model
944	Get checkpoint parent dir .
945	Returns a checkpoint label string for the given model checkpoint directory
946	Return true iff checkpointDir appears to be a checkpoint directory .
947	List available checkpoints for the specified experiment .
948	Runs a single experiment task
949	Creates and returns a list of activites for this TaskRunner instance
950	Corrupts a copy of a binary vector by inverting noiseLevel percent of its bits .
951	Shows predictions of the TM when presented with the characters A B C D X and Y without any contextual information that is not embedded within a sequence .
952	Trains the TM with given sequence for a given number of time steps and level of input corruption
953	Does a bitwise compare of the two bitmaps and returns a fractonal value between 0 and 1 of how similar they are .
954	Utility function to get information about function callers
955	Utility function to display nice titles
956	Get the arguments default values and argument descriptions for a function .
957	Generate a filepath for the calling app
958	Return the number of months and seconds from an aggregation dict that represents a date and time .
959	Return the result from dividing two dicts that represent date and time .
960	Validate a python object against an OPF json schema file
961	Helper function to create a logger object for the current object with the standard Numenta prefix .
962	Returns a subset of the keys that match any of the given patterns
963	Convert the input which is in normal space into log space
964	Exports a network as a networkx MultiDiGraph intermediate representation suitable for visualization .
965	Returns a string representing a numpy array of 0 s and 1 s
966	Computes the percentage of overlap between vectors x1 and x2 .
967	Copies the contents of vector x1 into vector x2 .
968	Poll CPU usage make predictions and plot the results . Runs forever .
969	Returns args dictionary from the calling method
970	List of our member variables that we don t need to be saved
971	If state is allocated in CPP copy over the data into our numpy arrays .
972	If we are having CPP use numpy - allocated buffers set these buffer pointers . This is a relatively fast operation and for safety should be done before every call to the cells4 compute methods . This protects us in situations where code can cause Python or numpy to create copies .
973	A segment is active if it has > = activationThreshold connected synapses that are active due to infActiveState .
974	Given a bucket index return the list of non - zero bits . If the bucket index does not exist it is created . If the index falls outside our range we clip it .
975	Create the given bucket index . Recursively create as many in - between bucket indices as necessary .
976	Return a new representation for newIndex that overlaps with the representation at index by exactly w - 1 bits
977	Return True if this new candidate representation satisfies all our overlap rules . Since we know that neighboring representations differ by at most one bit we compute running overlaps .
978	Return the overlap between bucket indices i and j
979	Return the overlap between two representations . rep1 and rep2 are lists of non - zero indices .
980	Return True if the given overlap between bucket indices i and j are acceptable . If overlap is not specified calculate it from the bucketMap
981	Initialize the bucket map assuming the given number of maxBuckets .
982	Create a SDR classifier factory . The implementation of the SDR Classifier can be specified with the implementation keyword argument .
983	Convenience method to compute a metric over an indices trace excluding resets .
984	Metric for number of predicted = > active cells per column for each sequence
985	Metric for number of sequences each predicted = > active cell appears in
986	Pretty print the connections in the temporal memory .
987	Pretty print the cell representations for sequences in the history .
988	Generates a Network with connected RecordSensor SP TM .
989	Adds a value over a range of rows .
990	Multiplies a value over a range of rows .
991	Copies a range of values to a new location in the data set .
992	Samples n rows .
993	Return the bit offset of the first bit to be set in the encoder output . For periodic encoders this can be a negative number when the encoded output wraps around .
994	generate description from a text description of the ranges
995	Reset the state of all cells .
996	Called at the end of learning and inference this routine will update a number of stats in our _internalStats dictionary including our computed prediction score .
997	Print an integer array that is the same shape as activeState .
998	Print a floating point array that is the same shape as activeState .
999	Print up to maxCols number from a flat floating point array .
1000	Print the parameter settings for the TM .
1001	Called at the end of inference to print out various diagnostic information based on the current verbosity level .
1002	Update our moving average of learned sequence length .
1003	Update the inference active state from the last set of predictions and the current bottom - up .
1004	Phase 2 for the inference state . The computes the predicted state then checks to insure that the predicted state is not over - saturated i . e . look too close like a burst . This indicates that there were so many separate paths learned from the current input columns to the predicted input columns that bursting on the current input columns is most likely generated mix and match errors on cells in the predicted columns . If we detect this situation we instead turn on only the start cells in the current active columns and re - generate the predicted state from those .
1005	A utility method called from learnBacktrack . This will backtrack starting from the given startOffset in our prevLrnPatterns queue .
1006	This backtracks our learning state trying to see if we can lock onto the current set of inputs by assuming the sequence started up to N steps ago on start cells .
1007	Compute the learning active state given the predicted state and the bottom - up input .
1008	Compute the predicted segments given the current set of active cells .
1009	Handle one compute possibly learning .
1010	This method goes through a list of segments for a given cell and deletes all synapses whose permanence is less than minPermanence and deletes any segments that have less than minNumSyns synapses remaining .
1011	This method deletes all synapses whose permanence is less than minPermanence and deletes any segments that have less than minNumSyns synapses remaining .
1012	Removes any update that would be for the given col cellIdx segIdx .
1013	Find weakly activated cell in column with at least minThreshold active synapses .
1014	For the given cell find the segment with the largest number of active synapses . This routine is aggressive in finding the best match . The permanence value of synapses is allowed to be below connectedPerm . The number of active synapses is allowed to be below activationThreshold but must be above minThreshold . The routine returns the segment index . If no segments are found then an index of - 1 is returned .
1015	Return the index of a cell in this column which is a good candidate for adding a new segment .
1016	Choose n random cells to learn from .
1017	This function applies segment update information to a segment in a cell .
1018	Add a new synapse
1019	Very simple patterns . Each pattern has numOnes consecutive bits on . The amount of overlap between consecutive patterns is configurable via the patternOverlap parameter .
1020	Create training sequences that share some elements in the middle .
1021	Create a bunch of sequences of various lengths all built from a fixed set of patterns .
1022	Create one or more TM instances placing each into a dict keyed by name .
1023	Check for diffs among the TM instances in the passed in tms dict and raise an assert if any are detected
1024	Decide whether a particular character needs to be quoted .
1025	Quote a single character .
1026	Read input apply quoted - printable encoding and write to output .
1027	Get the integer value of a hexadecimal number .
1028	Encode a string using Base64 .
1029	Decode a Base64 encoded string .
1030	Encode a string using Base32 .
1031	Decode a Base32 encoded string .
1032	Decode a Base16 encoded string .
1033	Encode a file .
1034	Decode a file .
1035	Encode a string into multiple lines of base - 64 data .
1036	Returns a range identical to this one but indicating that it was expanded from the range expanded_from .
1037	Returns a zero - length range located just before the beginning of this range .
1038	Returns a zero - length range located just after the end of this range .
1039	Returns a zero - based column number of the beginning of this range .
1040	Returns the line number of the beginning of this range .
1041	Returns the lines of source code containing the entirety of this range .
1042	An AST comparison function . Returns True if all fields in left are equal to fields in right ; if compare_locs is true all locations should match as well .
1043	Called if no explicit visitor function exists for a node .
1044	Convert a 32 - bit or 64 - bit integer created by float_pack into a Python float .
1045	Convert a Python float x into a 64 - bit unsigned integer with the same byte representation .
1046	A context manager that appends note to every diagnostic processed by this engine .
1047	Format a list of traceback entry tuples for printing .
1048	Print up to limit stack trace entries from the traceback tb .
1049	Print exception up to limit stack trace entries from tb to file .
1050	Format a stack trace and the exception information .
1051	Format the exception part of a traceback .
1052	Print a stack trace from its invocation point .
1053	Extract the raw traceback from the current stack frame .
1054	Initialize internal state of the random number generator .
1055	x random = random . random - > shuffle list x in place ; return None .
1056	Return a list of slot names for a given class .
1057	Register an extension code .
1058	Unregister an extension code . For testing only .
1059	Update a wrapper function to look like the wrapped function
1060	Convert a cmp = function into a key = function
1061	Remove quotes from a string .
1062	Returns time format preferred for Internet standards .
1063	Read header lines .
1064	Determine whether a given line is a legal header .
1065	Get the first header line matching name .
1066	Get the header value for a name .
1067	Get all values for a header .
1068	Get a list of addresses from a header .
1069	Parse up to the start of the next address .
1070	Parse all addresses .
1071	Parse an RFC 2822 addr - spec .
1072	Get the complete domain name from an address .
1073	Parse a header fragment delimited by special characters .
1074	Parse a sequence of RFC 2822 phrases .
1075	year month - > number of days in that month in that year .
1076	year month day - > ordinal considering 01 - Jan - 0001 as day 1 .
1077	Contruct a date from a proleptic Gregorian ordinal .
1078	Return the date formatted according to ISO .
1079	Return a new date with new values for the specified fields .
1080	Return a 3 - tuple containing ISO year week number and weekday .
1081	Return the timezone name .
1082	Return a new time with new values for the specified fields .
1083	Construct a datetime from a given date and a given time .
1084	Return the time part with tzinfo None .
1085	Return the time part with same tzinfo .
1086	Return a new datetime with new values for the specified fields .
1087	Same as a + b for a and b sequences .
1088	Return the number of times b occurs in a .
1089	Return the first index of b in a .
1090	Same as a + = b for a and b sequences .
1091	Return a JSON representation of a Python string
1092	Return the string obtained by replacing the leftmost non - overlapping occurrences of the pattern in string by the replacement repl . repl can be either a string or a callable ; if a string backslash escapes in it are processed . If it is a callable it s passed the match object and must return a replacement string to be used .
1093	Split the source string by the occurrences of the pattern returning a list containing the resulting substrings .
1094	Return a list of all non - overlapping matches in the string .
1095	Escape all non - alphanumeric characters in pattern .
1096	Release the GeneratedTempVar v so it can be reused .
1097	Decode uuencoded file
1098	Use SequenceMatcher to return list of the best good enough matches .
1099	Return number of ch characters at the start of line .
1100	r Compare two sequences of lines ; generate the delta as a unified diff .
1101	r Compare two sequences of lines ; generate the delta as a context diff .
1102	r Generate one of the two sequences that generated a delta .
1103	Make a new Match object from a sequence or iterable
1104	Set the first sequence to be compared .
1105	Set the second sequence to be compared .
1106	Return list of triples describing matching subsequences .
1107	Return list of 5 - tuples describing how to turn a into b .
1108	Isolate change clusters by eliminating ranges with no changes .
1109	r Compare two sequences of lines ; generate the resulting delta .
1110	Generate comparison results for a same - tagged range .
1111	r Format ? output and deal with leading tabs .
1112	Returns HTML file of side by side comparison with change highlights
1113	Builds list of text lines by splitting text lines at wrap point
1114	Collects mdiff output into separate lists
1115	Create unique anchor prefixes
1116	Makes list of next links
1117	Returns HTML table of side by side comparison with change highlights
1118	Create and return a benchmark that runs work_func p times in parallel .
1119	List directory contents using cache .
1120	Format a Python o into a pretty - printed representation .
1121	Format o for a specific context returning a string and flags indicating whether the representation is readable and whether the o represents a recursive construct .
1122	A decorator returning a function that first runs inner_rule and then if its return value is not None maps that value using mapper .
1123	A rule that accepts a token of kind kind and returns it or returns None .
1124	A rule that accepts a token of kind kind and returns its location or returns None .
1125	A proxy for a rule called name which may not be yet defined .
1126	A rule that executes inner_rule and emits a diagnostic error if it returns None .
1127	A rule that accepts a sequence of tokens satisfying rules and returns a tuple containing their return values or None if the first rule was not satisfied .
1128	A rule that accepts a sequence of tokens satisfying rules and returns the value returned by rule number n or None if the first rule was not satisfied .
1129	A rule that accepts token of kind newline and returns an empty list .
1130	Join a base URL and a possibly relative URL to form an absolute interpretation of the latter .
1131	Removes any existing fragment from URL .
1132	Return a new SplitResult object replacing specified fields with new values
1133	Get the lines for a file from the cache . Update the cache if it doesn t contain an entry for this file already .
1134	Update a cache entry and return its list of lines . If something s wrong print a message discard the cache entry and return an empty list .
1135	Test whether a path is a regular file
1136	Return true if the pathname refers to an existing directory .
1137	Given a list of pathnames returns the longest common leading component
1138	Split the extension from a pathname .
1139	Wrap a single paragraph of text returning a list of wrapped lines .
1140	Fill a single paragraph of text returning a new string .
1141	Remove any common leading whitespace from every line in text .
1142	Convert a long integer to a byte string .
1143	Transform a list of characters into a list of longs .
1144	Initialize the message - digest and set all fields to zero .
1145	Enter a new event in the queue at an absolute time . Returns an ID for the event which can be used to remove it if necessary .
1146	Shallow copy operation on arbitrary Python objects .
1147	Deep copy operation on arbitrary Python objects .
1148	Keeps a reference to the object x in the memo .
1149	Issue a deprecation warning for Python 3 . x related changes .
1150	Hook to write a warning to a file ; replace if you like .
1151	Function to format a warning the standard way .
1152	Issue a warning or maybe ignore it or raise an exception .
1153	Compute the hash value of a set .
1154	Remove an element . If not a member raise a KeyError .
1155	Return the popped value . Raise KeyError if empty .
1156	Returns value as a valid Go string literal .
1157	Acquire a lock blocking or non - blocking .
1158	Release a lock decrementing the recursion level .
1159	Wait until notified or until a timeout occurs .
1160	Wake up one or more threads waiting on this condition if any .
1161	Acquire a semaphore decrementing the internal counter by one .
1162	Set the internal flag to true .
1163	Block until the internal flag is true .
1164	Start the thread s activity .
1165	Method representing the thread s activity .
1166	Wait until the thread terminates .
1167	Debug helper to print the ABC registry .
1168	quotetabs = True means that tab and space characters are always quoted . istext = False means that \ r and \ n are treated as regular characters header = True encodes space characters with _ and requires real _ characters to be quoted .
1169	Run length encoding for binhex4 . The CPython implementation does not do run length encoding of \ x90 characters . This implementation does .
1170	Format a paragraph of free - form text for inclusion in the help output at the current indentation level .
1171	Return a comma - separated list of option strings & metavariables .
1172	Update the option values from an arbitrary dictionary but only use keys from dict that already have a corresponding attribute in self . Any keys in dict without a corresponding attribute are silently ignored .
1173	Insert item x in list a and keep it sorted assuming a is sorted .
1174	Lock a mutex call the function with supplied argument when it is acquired . If the mutex is already locked place function and argument in the queue .
1175	Unlock a mutex . If the queue is not empty call the next function with its argument .
1176	Return a clone object .
1177	Scan through string looking for a location where this regular expression produces a match and return a corresponding MatchObject instance . Return None if no position in the string matches the pattern .
1178	Return the string obtained by replacing the leftmost non - overlapping occurrences of pattern in string by the replacement repl .
1179	Split string by the occurrences of pattern .
1180	Creates a tuple of index pairs representing matched groups .
1181	Returns one or more subgroups of the match . Each argument is either a group index or a group name .
1182	Skips forward in a string as fast as possible using information from an optimization info block .
1183	Creates a new child context of this context and pushes it on the stack . pattern_offset is the offset off the current code position to start interpreting from .
1184	Returns True if the current context matches False if it doesn t and None if matching is not finished ie must be resumed after child contexts have been matched .
1185	Dispatches a context on a given opcode . Returns True if the context is done matching False if it must be resumed when next encountered .
1186	Checks whether a character matches set of arbitrary length . Assumes the code pointer is at the first member of the set .
1187	Remove the exponent by changing intpart and fraction .
1188	Round or extend the fraction to size digs .
1189	Return a random int in the range [ 0 n ) .
1190	Return the subset of the list NAMES that match PAT
1191	Test whether FILENAME matches PATTERN including case .
1192	Translate a shell PATTERN to a regular expression .
1193	Indicate that a formerly enqueued task is complete .
1194	Put an item into the queue .
1195	Determines all modules that script transitively depends upon .
1196	Processes a future import statement returning set of flags it defines .
1197	Combine multiple context managers into a single nested context manager .
1198	Creates the TensorFlow operations for calculating the L2 loss between predicted state values and actual rewards .
1199	Returns the TensorFlow variables used by the baseline .
1200	Creates a baseline from a specification dict .
1201	Resets the environment to its initialization state . This method needs to be called to start a new episode after the last episode ended .
1202	Pass action to universe environment return reward next step terminal state and additional info .
1203	Iteration loop body of the conjugate gradient algorithm .
1204	Creates a layer from a specification dict .
1205	Returns the target optimizer arguments including the time the list of variables to optimize and various functions which the optimizer might require to perform an update step .
1206	Creates an environment from a specification dict .
1207	When used for spinx extension .
1208	Pass through rest role .
1209	Pass through rest link .
1210	Rendering table element . Wrap header and body in it .
1211	Most of this method is from docutils . parser . rst . Directive .
1212	Worker Agent generator receives an Agent class and creates a Worker Agent class that inherits from that Agent .
1213	The target function for a thread runs an agent and environment until signaled to stop . Adds rewards to shared episode rewards list .
1214	Returns x y from flat_position integer .
1215	Wait until there is a state .
1216	Creates an optimizer from a specification dict .
1217	Registers the saver operations to the graph in context .
1218	Saves this component s managed variables .
1219	Restores the values of the managed variables from disk location .
1220	Calls reset on all our Preprocessor objects .
1221	Process state .
1222	Shape of preprocessed state given original shape .
1223	Creates a preprocessing stack from a specification dict .
1224	Makes sure our optimizer is wrapped into the global_optimizer meta . This is only relevant for distributed RL .
1225	Constructs the memory and the optimizer objects . Generates and stores all template functions .
1226	Creates and returns the TensorFlow operations for calculating the sequence of discounted cumulative rewards for a given sequence of single rewards .
1227	Creates the TensorFlow operations for calculating the loss per batch instance .
1228	Creates the TensorFlow operations for calculating the full loss of a batch .
1229	Returns the optimizer arguments including the time the list of variables to optimize and various functions which the optimizer might require to perform an update step .
1230	Creates the TensorFlow operations for performing an optimization update step based on the given input states and actions batch .
1231	Imports experiences into the TensorFlow memory structure . Can be used to import off - policy data .
1232	Stores experiences .
1233	Creates a distribution from a specification dict .
1234	Utility method for unbuffered observing where each tuple is inserted into TensorFlow via a single session call thus avoiding race conditions in multi - threaded mode .
1235	Creates an agent from a specification dict .
1236	Returns a named tensor if available .
1237	Creates a network from a specification dict .
1238	Stores a transition in replay memory .
1239	Change the priority of a leaf node
1240	Change the priority of a leaf node .
1241	Similar to position ++ .
1242	Sample random element with priority greater than p .
1243	Sample minibatch of size batch_size .
1244	Computes priorities according to loss .
1245	Imports experiences .
1246	Ends our server tcp connection .
1247	Receives a message as msgpack - numpy encoded byte - string from the given socket object . Blocks until something was received .
1248	Determines whether action is available . That is executing it would change the state .
1249	Determines whether action Left is available .
1250	Execute action add a new tile update the score & return the reward .
1251	Executes action Left .
1252	Adds a random tile to the grid . Assumes that it has empty fields .
1253	Prints the current state .
1254	Creates the tf . train . Saver object and stores it in self . saver .
1255	Creates the tf . train . Scaffold object and assigns it to self . scaffold . Other fields of the Scaffold are generated automatically .
1256	Creates and returns a list of hooks to use in a session . Populates self . saver_directory .
1257	Returns the tf op to fetch when unbuffered observations are passed in .
1258	Returns the list of all of the components this model consists of that can be individually saved and restored . For instance the network or distribution .
1259	Saves a component of this model to the designated location .
1260	Restores a component s parameters from a save location .
1261	Looks up a component by its name .
1262	Imports demonstrations i . e . expert observations . Note that for large numbers of observations set_demonstrations is more appropriate which directly sets memory contents to an array an expects a different layout .
1263	Return the state space . Might include subdicts if multiple states are available simultaneously .
1264	Sanity checks a states dict used to define the state space for an MDP . Throws an error or warns if mismatches are found .
1265	Sanity checks an actions dict used to define the action space for an MDP . Throws an error or warns if mismatches are found .
1266	Builds and returns an Extraterrestrial Marauders game .
1267	Handles the behaviour of visible bolts flying toward Marauders .
1268	Launches a new bolt from the player .
1269	Handles the behaviour of visible bolts flying toward the player .
1270	Launches a new bolt from a random Marauder .
1271	Creates and stores Network and Distribution objects . Generates and stores all template functions .
1272	Creates and returns the Distribution objects based on self . distributions_spec .
1273	Creates an exploration object from a specification dict .
1274	Creates a memory from a specification dict .
1275	Fetches experiences for given indices .
1276	Initialization step preparing the arguments for the first iteration of the loop body .
1277	Iteration loop body of the line search algorithm .
1278	Render markdown formatted text to html .
1279	Parse setext heading .
1280	Grammar for hard wrap linebreak . You don t need to add two spaces at the end of a line .
1281	Rendering block level code . pre > code .
1282	Rendering block level pure html content .
1283	Rendering a given link or email address .
1284	Rendering the ref anchor of a footnote .
1285	Rendering a footnote item .
1286	Convert MetaParams into TF Summary Format and create summary_op .
1287	Enable markdown syntax in docstrings
1288	Creates the TensorFlow operations for calculating the baseline loss of a batch .
1289	Returns the baseline optimizer arguments including the time the list of variables to optimize and various functions which the optimizer might require to perform an update step .
1290	Creates the TensorFlow operations for performing an optimization step on the given variables including actually changing the values of the variables .
1291	Constructs the extra Replay memory .
1292	Imports a single experience to memory .
1293	Extends the q - model loss via the dqfd large - margin loss .
1294	Combines Q - loss and demo loss .
1295	Stores demonstrations in the demo memory .
1296	Performs a demonstration update by calling the demo optimization operation . Note that the batch data does not have to be fetched from the demo memory as this is now part of the TensorFlow operation of the demo update .
1297	Creates a solver from a specification dict .
1298	Return bool True if succeed otherwise False .
1299	Reset to the default text color on console window . Return bool True if succeed otherwise False .
1300	WindowFromPoint from Win32 . Return int a native window handle .
1301	mouse_event from Win32 .
1302	keybd_event from Win32 .
1303	PostMessage from Win32 . Return bool True if succeed otherwise False .
1304	SendMessage from Win32 . Return int the return value specifies the result of the message processing ; it depends on the message sent .
1305	GetConsoleOriginalTitle from Win32 . Return str . Only available on Windows Vista or higher .
1306	GetConsoleTitle from Win32 . Return str .
1307	Check if desktop is locked . Return bool . Desktop is locked if press Win + L Ctrl + Alt + Del or in remote desktop mode .
1308	Return True if process is 64 bit . Return False if process is 32 bit . Return None if unknown maybe caused by having no acess right to the process .
1309	Create Win32 struct INPUT for SendInput . Return INPUT .
1310	Create Win32 struct MOUSEINPUT for SendInput . Return INPUT .
1311	Create Win32 struct KEYBDINPUT for SendInput .
1312	Create Win32 struct HARDWAREINPUT for SendInput .
1313	Call IUIAutomation ElementFromPoint x y . May return None if mouse is over cmd s title bar icon . Return Control subclass or None .
1314	Get a native handle from point x y and call IUIAutomation . ElementFromHandle . Return Control subclass .
1315	Delete log file .
1316	Return ctypes . Array an iterable array of int values in argb .
1317	Return list a list of Control subclasses .
1318	Call native SetWindowText if control has a valid native handle .
1319	Determine whether current control is top level .
1320	Get the top level control which current control lays . If current control is top level return self . If current control is root control return None . Return PaneControl or WindowControl or None .
1321	Set top level window maximize .
1322	Move window to screen center .
1323	Set top level window active .
1324	If you want to use functionalities related to Controls and Patterns in a new thread . You must call InitializeUIAutomationInCurrentThread first in the thread and call UninitializeUIAutomationInCurrentThread when the thread exits . But you can t use use a Control or a Pattern created in a different thread . So you can t create a Control or a Pattern in main thread and then pass it to a new thread and use it .
1325	Implements Algorithm 3 in manuscript
1326	Alternative constructor for a TensorFlowModel that accepts a tf . keras . Model instance .
1327	Calculates the distance of a given image to the original image .
1328	Interface to model . channel_axis for attacks .
1329	Returns true if _backward and _forward_backward can be called by an attack False otherwise .
1330	Interface to model . predictions for attacks .
1331	Interface to model . batch_predictions for attacks .
1332	Interface to model . gradient for attacks .
1333	Interface to model . predictions_and_gradient for attacks .
1334	Interface to model . backward for attacks .
1335	Returns the index of the largest logit ignoring the class that is passed as exclude .
1336	Concatenates the names of the given criteria in alphabetical order .
1337	Transforms predictions into probability values .
1338	Calculates the cross - entropy .
1339	Calculates the cross - entropy for a batch of logits .
1340	Binarizes the values of x .
1341	Returns an example image and its imagenet class label .
1342	Returns a batch of example images and the corresponding labels
1343	Creates an array like a with all values set to 0 except one .
1344	Looks up the precomputed adversarial image for a given image .
1345	Convenience method that calculates predictions for a single image .
1346	Calculates the gradient of the cross - entropy loss w . r . t . the image .
1347	Clone a remote git repository to a local path .
1348	Result may be a python dictionary array or a primitive type that can be converted to JSON for writing back the result .
1349	Writes the message as part of the response and sets 404 status .
1350	write back json response
1351	Makes the base dict for the response . The status is the string value for the key status of the response . This should be success or failure .
1352	Makes the python dict corresponding to the JSON that needs to be sent for a successful response . Result is the actual payload that gets sent .
1353	Makes the python dict corresponding to the JSON that needs to be sent for a failed response . Message is the message that is sent as the reason for failure .
1354	Helper function to get request argument . Raises exception if argument is missing . Returns the cluster argument .
1355	Helper function to get request argument . Raises exception if argument is missing . Returns the role argument .
1356	Helper function to get request argument . Raises exception if argument is missing . Returns the environ argument .
1357	Helper function to get topology argument . Raises exception if argument is missing . Returns the topology argument .
1358	Helper function to get component argument . Raises exception if argument is missing . Returns the component argument .
1359	Helper function to get instance argument . Raises exception if argument is missing . Returns the instance argument .
1360	Helper function to get starttime argument . Raises exception if argument is missing . Returns the starttime argument .
1361	Helper function to get endtime argument . Raises exception if argument is missing . Returns the endtime argument .
1362	Helper function to get query argument . Raises exception if argument is missing . Returns the query argument .
1363	Helper function to get offset argument . Raises exception if argument is missing . Returns the offset argument .
1364	Helper function to get length argument . Raises exception if argument is missing . Returns the length argument .
1365	Helper function to get metricname arguments . Notice that it is get_argument s variation which means that this can be repeated . Raises exception if argument is missing . Returns a list of metricname arguments
1366	Helper function to validate interval . An interval is valid if starttime and endtime are integrals and starttime is less than the endtime . Raises exception if interval is not valid .
1367	Tries to connect to the Heron Server
1368	Registers protobuf message builders that this client wants to receive
1369	Create a tar file with a given set of files
1370	Retrieve the given subparser from parser
1371	This will extract heron directory from . pex file .
1372	Get all the heron lib jars with the absolute paths
1373	if role is not provided supply userid if environ is not provided supply default
1374	Parse the command line for overriding the defaults and create an override file .
1375	Parse the command line for overriding the defaults
1376	Get the path of java executable
1377	Check if the java home set
1378	Check if the release . yaml file exists
1379	Print build_info from release . yaml
1380	Print version from release . yaml
1381	Get the summary of exceptions for component_name and list of instances . Empty instance list will fetch all exceptions .
1382	Returns the UUID with which the watch is registered . This UUID can be used to unregister the watch . Returns None if watch could not be registered .
1383	Unregister the watch with the given UUID .
1384	Call all the callbacks . If any callback raises an Exception unregister the corresponding watch .
1385	set physical plan
1386	set packing plan
1387	set exectuion state
1388	Number of spouts + bolts
1389	Get all the machines that this topology is running on . These are the hosts of all the stmgrs .
1390	Get the current state of this topology . The state values are from the topology . proto RUNNING = 1 PAUSED = 2 KILLED = 3 if the state is None Unknown is returned .
1391	converts pb kvs to dict
1392	Sync the topologies with the statemgrs .
1393	Find and return the topology given its cluster environ topology name and an optional role . Raises exception if topology is not found or more than one are found .
1394	Returns all the topologies for a given state manager .
1395	Adds a topology in the local cache and sets a watch on any changes on the topology .
1396	Removes the topology from the local cache .
1397	Returns the repesentation of execution state that will be returned from Tracker .
1398	Returns the representation of scheduler location that will be returned from Tracker .
1399	Returns the representation of tmaster that will be returned from Tracker .
1400	Returns the representation of logical plan that will be returned from Tracker .
1401	Returns the representation of packing plan that will be returned from Tracker .
1402	Extracts info from the stored proto states and convert it into representation that is exposed using the API . This method is called on any change for the topology . For example when a container moves and its host or some port changes . All the information is parsed all over again and cache is updated .
1403	Returns the JSON representation of a topology by its name cluster environ and an optional role parameter . Raises exception if no such topology is found .
1404	load config files
1405	validate extra link
1406	validate visualization url format
1407	Emits a new tuple from this Spout
1408	Checks whether we still need to do more work
1409	normalize raw logical plan info to table
1410	filter to keep bolts
1411	filter to keep spouts
1412	Helper function to get topologies with a callback . The future watch is placed only if isWatching is True .
1413	Helper function to get packing_plan with a callback . The future watch is placed only if isWatching is True .
1414	get physical plan
1415	create physical plan
1416	get execution state
1417	Helper function to get execution state with a callback . The future watch is placed only if isWatching is True .
1418	create execution state
1419	get scheduler location
1420	Helper function to get scheduler location with a callback . The future watch is placed only if isWatching is True .
1421	Deserializes Java primitive data and objects serialized by ObjectOutputStream from a file - like object .
1422	Deserializes Java objects and primitive data serialized by ObjectOutputStream from a string .
1423	copy an object
1424	Names of all state locations must be unique .
1425	Implements Pulsar Spout s initialize method
1426	Fetches Instance jstack from heron - shell .
1427	Create the parse for the update command
1428	Build extra args map
1429	flatten extra args
1430	run the update command
1431	This method is used by other modules and so it is not a part of the class . Fetches Instance pid from heron - shell .
1432	Checks if a given gtype is sane
1433	Custom grouping from a given implementation of ICustomGrouping
1434	Custom grouping from a given serialized string
1435	Registers its metrics to a given metrics collector with a given interval
1436	Update the value of CountMetric or MultiCountMetric
1437	Update the value of ReducedMetric or MultiReducedMetric
1438	Update received packet metrics
1439	Update sent packet metrics
1440	Registers metrics to context
1441	Apply update to serialization metrics
1442	Apply updates to the next tuple metrics
1443	Apply updates to the execute metrics
1444	Apply updates to the deserialization metrics
1445	Registers a given metric
1446	Poll from the buffer
1447	Offer to the buffer
1448	Parse version to major minor patch pre - release build parts .
1449	Creates all the zookeeper state_managers and returns them in a list
1450	Returns all the file state_managers .
1451	Increments the value of a given key by to_add
1452	Updates a value of a given key and apply reduction
1453	Adds a new key to this metric
1454	Add a new data tuple to the currently buffered set of tuples
1455	Add the checkpoint state message to be sent back the stmgr
1456	Check if an entry in the class path exists as either a directory or a file
1457	Given a java classpath check whether the path entries are valid or not
1458	Get a list of paths to included dependencies in the specified pex file
1459	Loads pex file and its dependencies to the current python path
1460	Resolves duplicate package suffix problems
1461	Imports and load a class from a given pex file path and python class name
1462	Adds a new source to the computation DAG
1463	Builds the topology and returns the builder
1464	For each kvp in config do wildcard substitution on the values
1465	Create a map of command names and handlers
1466	set default time
1467	Process a single tuple of input
1468	Called every slide_interval
1469	Called every window_duration
1470	Get summary of stream managers registration summary
1471	Set up log process and signal handlers
1472	Register exit handlers initialize the executor and run it .
1473	get the command to start the topology health manager processes
1474	get the command to start the tmaster processes
1475	Returns the processes to handle streams including the stream - mgr and the user code containing the stream logic of the topology
1476	Get the command to start the checkpoint manager process
1477	For the given packing_plan return the container plan with the given container_id . If protobufs supported maps we could just get the plan by id but it doesn t so we have a collection of containers to iterate over .
1478	Get a map from all daemon services name to the command to start them
1479	Wait for the termination of a process and log its stdout & stderr
1480	Start all commands and add them to the dict of processes to be monitored
1481	Monitor all processes in processes_to_monitor dict restarting any if they fail up to max_runs times .
1482	Prepare either TMaster or Streaming commands according to shard . The Shell command is attached to all containers . The empty container plan and non - exist container plan are bypassed .
1483	Determines the commands to be run and compares them with the existing running commands . Then starts new ones required and kills old ones no longer required .
1484	Receive updates to the packing plan from the statemgrs and update processes as needed .
1485	Builds the topology and submits it
1486	Force every module in modList to be placed into main
1487	Loads additional properties into class cls .
1488	Save a module as an import
1489	Save a file
1490	Returns last n lines from the filename . No exception handling
1491	Returns a serializer for a given context
1492	Registers a new timer task
1493	Get the next timeout from now
1494	Triggers expired timers
1495	Find the index of the closing braces for the opening braces at the start of the query string . Note that first character of input string must be an opening braces .
1496	The subparts are seperated by a comma . Make sure that commas inside the part themselves are not considered .
1497	Returns a parse tree for the query each of the node is a subclass of Operator . This is both a lexical as well as syntax analyzer step .
1498	Should be called when tuple was buffered into in_stream
1499	Indicate that processing of a Tuple has succeeded
1500	Indicate that processing of a Tuple has failed
1501	Template slave config file
1502	Template scheduler . yaml
1503	Tempate uploader . yaml
1504	template apiserver . hcl
1505	Template statemgr . yaml
1506	template heron tools
1507	get cluster info for standalone cluster
1508	add additional parameters to parser
1509	teardown the cluster
1510	Start a Heron standalone cluster
1511	Start Heron tracker and UI
1512	distribute Heron packages to all nodes
1513	Wait for a nomad master to start
1514	Wait for a Nomad job to start
1515	scp and extract package
1516	Tar a directory
1517	Start master nodes
1518	Star slave nodes
1519	read config files to get roles
1520	get home directory of remote host
1521	get host name of remote host
1522	check if this host is this addr
1523	Log message optionally providing a logging level
1524	Resolve all symbolic references that src points to . Note that this is different than os . path . realpath as path components leading up to the final location may still be symbolic links .
1525	normalize raw result to table
1526	Prepend msg to add some context information
1527	Returns true if the host is reachable . In some cases it may not be reachable a tunnel must be used .
1528	Pick an unused port . There is a slight chance that this wont work .
1529	Establish an ssh tunnel for each local host and port that can be used to communicate with the state host .
1530	Monitor the rootpath and call the callback corresponding to the change . This monitoring happens periodically . This function is called in a seperate thread from the main thread because it sleeps for the intervals between each poll .
1531	Get physical plan of a topology
1532	Get execution state
1533	Get scheduler location
1534	Creates SocketOptions object from a given sys_config dict
1535	Initializes a topology protobuf
1536	Retrieves heron options from the HERON_OPTIONS environment variable .
1537	Add specs to the topology
1538	Add a spout to the topology
1539	Add a bolt to the topology
1540	Set topology - wide configuration to the topology
1541	Builds the topology and submits to the destination
1542	map from query parameter to query name
1543	Synced API call to get all cluster names
1544	Synced API call to get logical plans
1545	Synced API call to get topology information
1546	Synced API call to get component metrics
1547	Configure logger which dumps log on terminal
1548	Initializes a rotating logger
1549	simply set verbose level based on command - line args
1550	Returns Spout protobuf message
1551	Returns Bolt protobuf message
1552	Returns Component protobuf message
1553	Returns component - specific Config protobuf message
1554	Adds inputs to a given protobuf Bolt message
1555	Adds outputs to a given protobuf Bolt or Spout message
1556	Returns a set of output stream ids registered for this component
1557	Returns a StreamId protobuf message
1558	Returns a StreamSchema protobuf message
1559	Returns component_id of this GlobalStreamId
1560	Registers a new metric to this context
1561	Returns the declared inputs to specified component
1562	Returns the task ids allocated for the given component id
1563	Registers a specified task hook to this context
1564	Returns this context s metrics collector
1565	invoke task hooks for every time spout acks a tuple
1566	invoke task hooks for every time spout fails a tuple
1567	invoke task hooks for every time bolt processes a tuple
1568	invoke task hooks for every time bolt acks a tuple
1569	invoke task hooks for every time bolt fails a tuple
1570	We use the packer to make a package for the jar and dump it to a well - known location . We then run the main method of class with the specified arguments . We pass arguments as an environment variable HERON_OPTIONS .
1571	Extract and execute the java files inside the tar and then add topology definition file created by running submitTopology
1572	Implements TextFile Generator s setup method
1573	add optional verbose argument
1574	add optional tracker_url argument
1575	Hex encode a binary string
1576	Makes the http endpoint for the heron shell if shell port is present otherwise returns None .
1577	Make the url for log - files in heron - shell from the info stored in stmgr . If no instance_id is provided the link will be to the dir for the whole container . If shell port is not present it returns None .
1578	Make the url for log - file data in heron - shell from the info stored in stmgr .
1579	Creates Outgoing Packet from a given reqid and message
1580	Sends this outgoing packet to dispatcher s socket
1581	Creates an IncomingPacket object from header and data
1582	Reads incoming data from asyncore . dispatcher
1583	Generates a random REQID for request
1584	Reads yaml config file and returns auto - typed config_dict
1585	Send messages in out_stream to the Stream Manager
1586	Called when state change is commanded by stream manager
1587	Checks if a given stream_id and tuple matches with the output schema
1588	Returns the topology config
1589	Sets a new topology context
1590	Converts Config protobuf message to python dictionary
1591	Checks whether there are any bolts that consume any of my streams using custom grouping
1592	Adds the target component
1593	Prepares the custom grouping for this component
1594	Choose tasks for a given stream_id and values and Returns a list of target tasks
1595	Format a line in the directory list based on the file s type and other attributes .
1596	Format the date associated with a file to be displayed in directory listing .
1597	Prefix to a filename in the directory listing . This is to make the listing similar to an output of ls - alh .
1598	Read a chunk of a file from an offset upto the length .
1599	Pipes output of prev_proc into to_cmd . Returns piped process
1600	Runs the command and returns its stdout and stderr .
1601	Feed output of one command to the next and return final output Returns string output of chained application of commands .
1602	parse topology location
1603	normalize raw metrics API result to table
1604	run metrics subcommand
1605	run bolts subcommand
1606	run containers subcommand
1607	Register this bolt to the topology and create HeronComponentSpec
1608	Creates a HeronTuple
1609	Creates a TickTuple
1610	Creates a RootTupleInfo
1611	Updates the global list of line error - suppressions .
1612	Updates the list of global error suppressions .
1613	Returns true if the specified error category is suppressed on this line .
1614	Matches the string with the pattern caching the compiled regexp .
1615	Replaces instances of pattern in a string with a replacement .
1616	Searches the string for the pattern caching the compiled regexp .
1617	If confidence > = verbose category passes filter and is not suppressed .
1618	Does line terminate so that the next symbol is in string constant .
1619	Removes C ++ 11 raw strings from lines .
1620	Find the beginning marker for a multiline comment .
1621	We are inside a comment find the end marker .
1622	Clears a range of lines for multi - line comments .
1623	Find the position just after the end of current parenthesized expression .
1624	If input points to ( or { or [ or < finds the position that closes it .
1625	Find position at the matching start of current expression .
1626	If input points to ) or } or ] or > finds the position that opens it .
1627	Logs an error if no Copyright message appears at the top of the file .
1628	Return the number of leading spaces in line .
1629	Returns the CPP variable that should be used as a header guard .
1630	Checks that the file contains a header guard .
1631	Logs an error if a source file does not include its header .
1632	Logs an error for each line containing bad characters .
1633	Logs an error if there is no newline char at the end of the file .
1634	Checks for calls to thread - unsafe functions .
1635	Checks for the correctness of various spacing around function calls .
1636	Reports for long function bodies .
1637	Checks for common mistakes in comments .
1638	Checks for the correctness of various spacing issues in the code .
1639	Checks for horizontal spacing around parentheses .
1640	Checks for horizontal spacing near commas and semicolons .
1641	Check if expression looks like a type name returns true if so .
1642	Checks for horizontal spacing near commas .
1643	Checks for additional blank line issues related to sections .
1644	Return the most recent non - blank line and its line number .
1645	Looks for redundant trailing semicolon .
1646	Find a replaceable CHECK - like macro .
1647	Checks the use of CHECK and EXPECT macros .
1648	Check alternative keywords being used in boolean expressions .
1649	Determines the width of the line in column positions .
1650	Drops common suffixes like _test . cc or - inl . h from filename .
1651	Figures out what kind of header include is .
1652	r Retrieves all the text between matching open and close parentheses .
1653	Check for unsafe global or static objects .
1654	Check for printf related issues .
1655	Check if current line contains an inherited function .
1656	Check if current line contains an out - of - line method definition .
1657	Check if current line is inside constructor initializer list .
1658	Check for non - const references .
1659	Various cast related checks .
1660	Checks for a C - style cast by looking for the pattern .
1661	Checks whether where function type arguments are expected .
1662	Check if these two filenames belong to the same module .
1663	Fill up the include_dict with new includes found from the file .
1664	Check that make_pair s template arguments are deduced .
1665	Check if line contains a redundant virtual function - specifier .
1666	Check if line contains a redundant override or final virt - specifier .
1667	Checks that the new block is directly in a namespace .
1668	This method determines if we should apply our namespace indentation check .
1669	Flag those C ++ 14 features that we restrict .
1670	Performs lint checks and reports any errors to the given error function .
1671	Loads the configuration files and processes the config overrides .
1672	Does google - lint on a single file .
1673	Prints a list of all the error - categories used by error messages .
1674	Parses the command line arguments .
1675	Searches a list of filenames and replaces directories in the list with all files descending from those directories . Files with extensions not in the valid extensions list are excluded .
1676	Check if a header has already been included .
1677	Reset section checking for preprocessor directive .
1678	Check if a header is in alphabetical order with the previous header .
1679	Returns a non - empty error message if the next header is out of order .
1680	Sets the module s verbosity and returns the previous setting .
1681	Adds more filters to the existing list of error - message filters .
1682	Bumps the module s error statistic .
1683	Print a summary of errors by category and the total .
1684	Start analyzing function body .
1685	r FullName after removing the local path to the repository .
1686	Splits the file into the directory basename and extension .
1687	Collapses strings and chars on a line to simple or blocks .
1688	Check end of namespace comments .
1689	Check if current position is inside template argument list .
1690	Update preprocessor stack .
1691	Get class info on the top of the stack .
1692	Checks that all classes and namespaces have been completely parsed .
1693	Return a new Streamlet by applying map_function to each element of this Streamlet .
1694	Return a new Streamlet by applying map_function to each element of this Streamlet and flattening the result
1695	Return a new Streamlet containing only the elements that satisfy filter_function
1696	Return num_clones number of streamlets each containing all elements of the current streamlet
1697	Return a new Streamlet in which each element of this Streamlet are collected over a window defined by window_config and then reduced using the reduce_function reduce_function takes two element at one time and reduces them to one element that is used in the subsequent operations .
1698	Returns a new Streamlet that consists of elements of both this and other_streamlet
1699	Logs all elements of this streamlet . This returns nothing
1700	Calls consume_function for each element of this streamlet . This function returns nothing
1701	Return a new Streamlet by joining join_streamlet with this streamlet
1702	Return a new Streamlet by outer right join_streamlet with this streamlet
1703	Return a new Streamlet by left join_streamlet with this streamlet
1704	Return a new Streamlet by outer join_streamlet with this streamlet
1705	extract common args
1706	Parses command strings and returns a Popen - ready list .
1707	Executes a given commmand and returns Response .
1708	Spawns a new process from the given command .
1709	Sends a line to std_in .
1710	Converts Py type to PyJs type
1711	name is py type
1712	note py_arr elems are NOT converted to PyJs types!
1713	note py_obj items are NOT converted to PyJs types!
1714	Adds op_code with specified args to tape
1715	Records locations of labels and compiles the code
1716	returns n digit string representation of the num
1717	Takes the replacement template and some info about the match and returns filled template
1718	Use this function when unsure whether func takes this and arguments as its last 2 args . It will append 2 args if it does not .
1719	what can be either name of the op or node or a list of statements .
1720	Translates esprima syntax tree to python by delegating to appropriate translating node
1721	Decorator limiting resulting line length in order to avoid python parser stack overflow - If expression longer than LINE_LEN_LIMIT characters then it will be moved to upper line USE ONLY ON EXPRESSIONS!!!
1722	Does not chceck whether t is not resticted or internal
1723	Translates input JS file to python and saves the it to the output path . It appends some convenience code at the end so that it is easy to import JS objects .
1724	executes javascript js in current context
1725	evaluates expression in current context and returns its value
1726	Token can be only a single char . Returns position after token if found . Otherwise raises syntax error if throw otherwise returns None
1727	passes white space from start and returns first identifier if identifier invalid and throw raises SyntaxError otherwise returns None
1728	Returns Python array from Js array
1729	returns none if not found other functions that begin with do_ raise also this do_ type function passes white space
1730	string is of course a py string
1731	Dont use this method from inside bytecode to call other bytecode .
1732	n may be the inside of block or object
1733	n may be the inside of block or object . last is the code before object
1734	This function replaces objects with OBJECTS_LVALS returns new code replacement dict and count . count arg is the number that should be added to the LVAL of the first replaced object
1735	returns True if regexp starts at n else returns False checks whether it is not a division
1736	Returns a first index > = start of chat not in charset
1737	returns end of exponential raises SyntaxError if failed
1738	this function parses the string just like javascript for example literal \ d in JavaScript would be interpreted as d - backslash would be ignored and in Pyhon this would be interpreted as \\ d This function fixes this problem .
1739	checks if self is in other
1740	Download and extract processed data and embeddings .
1741	returns the list of states obtained by adding the given inputs to the current state one by one .
1742	Make a grid of images via numpy .
1743	Save a given Tensor into an image file .
1744	Remove types from function arguments in cython
1745	Sets the access permissions of the map .
1746	Check if there is enough permissions for access
1747	Returns True if index is in range
1748	Translates the index to the internal offsets .
1749	Creates a new mapping in the memory address space .
1750	Returns a sorted list of all the mappings for this memory .
1751	Scan for concrete bytes in all mapped memory . Successively yield addresses of all matches .
1752	Translates a register ID from the disassembler object into the register name based on manticore s alias in the register file
1753	Extract arguments for model from the environment and return as a tuple that is ready to be passed to the model .
1754	Dynamic interface for writing cpu registers
1755	Dynamic interface for reading cpu registers
1756	Tells the CPU to set up a concrete unicorn emulator and use it to execute instructions until target is reached .
1757	Writes int to memory
1758	Selects bytes from memory . Attempts to do so faster than via read_bytes .
1759	Reads int from memory
1760	Read from memory .
1761	Read a NUL - terminated concrete buffer from memory . Stops reading at first symbolic byte .
1762	Write data to the stack and decrement the stack pointer accordingly .
1763	Read nbytes from the stack increment the stack pointer and return data .
1764	Decrement the stack pointer and write value to the stack .
1765	Read a value from the stack and increment the stack pointer .
1766	This will decode an instruction from memory pointed by pc
1767	Decode and execute one instruction pointed by register PC
1768	Notify listeners that an instruction has been executed .
1769	Start executing in Unicorn from this point until we hit a syscall or reach break_unicorn_at
1770	If we could not handle emulating an instruction use Unicorn to emulate it .
1771	Given a Manticore workspace or trace file highlight the basic blocks .
1772	Writes a value in the stack .
1773	Gets a value from the stack .
1774	remove decoded instruction from instruction cache
1775	CPUID instruction .
1776	Logical AND .
1777	Logical compare .
1778	Logical inclusive OR .
1779	ASCII adjust after addition .
1780	ASCII adjust AX before division .
1781	ASCII adjust AX after multiply .
1782	ASCII Adjust AL after subtraction .
1783	Adds with carry .
1784	Compares two operands .
1785	Compares and exchanges .
1786	Compares and exchanges bytes .
1787	Decimal adjusts AL after addition .
1788	Decimal adjusts AL after subtraction .
1789	Unsigned divide .
1790	Signed divide .
1791	Signed multiply .
1792	Increments by 1 .
1793	Unsigned multiply .
1794	Two s complement negation .
1795	Integer subtraction with borrow .
1796	Exchanges and adds .
1797	Byte swap .
1798	Conditional move - Greater .
1799	Conditional move - Overflow .
1800	Conditional move - Not overflow .
1801	Loads status flags into AH register .
1802	Loads effective address .
1803	Moves data after swapping bytes .
1804	Stores AH into flags .
1805	Sets byte if above .
1806	Sets byte if below .
1807	Sets byte if below or equal .
1808	Sets if carry .
1809	Sets byte if equal .
1810	Sets byte if greater or equal .
1811	Sets byte if not above or equal .
1812	Sets byte if not below .
1813	Sets byte if not below or equal .
1814	Sets byte if not greater .
1815	Sets byte if not less or equal .
1816	Sets byte if not overflow .
1817	Sets byte if not sign .
1818	Sets byte if not zero .
1819	Sets byte if overflow .
1820	Sets byte if parity .
1821	Sets byte if parity even .
1822	Sets byte if parity odd .
1823	Sets byte if sign .
1824	Sets byte if zero .
1825	High level procedure exit .
1826	Pushes a value onto the stack .
1827	Procedure call .
1828	Returns from procedure .
1829	Jumps short if above .
1830	Jumps short if below .
1831	Jumps short if below or equal .
1832	Jumps short if carry .
1833	Jumps short if CX register is 0 .
1834	Jumps short if ECX register is 0 .
1835	Jumps short if RCX register is 0 .
1836	Jumps short if greater .
1837	Jumps short if greater or equal .
1838	Jumps short if not below .
1839	Jumps short if not equal .
1840	Jumps short if not greater .
1841	Jumps short if not overflow .
1842	Jumps short if not parity .
1843	Jumps short if not sign .
1844	Jumps short if overflow .
1845	Jumps short if parity .
1846	Jumps short if sign .
1847	Jumps short if zero .
1848	We are just going to ignore the CS selector for now .
1849	Loops according to ECX counter .
1850	Loops if ECX counter is nonzero .
1851	Rotates through carry left .
1852	Shift arithmetic right .
1853	Shift logical right .
1854	Double precision shift right .
1855	Bit scan forward .
1856	Bit scan reverse .
1857	Bit Test .
1858	Bit test and complement .
1859	Compares string operands .
1860	Loads string .
1861	Moves data from string to string .
1862	Scans String .
1863	Stores String .
1864	The shift arithmetic right .
1865	Packed shuffle words .
1866	Packed shuffle doublewords .
1867	Moves byte mask to general - purpose register .
1868	Packed shift right logical double quadword .
1869	Moves with zero - extend .
1870	Moves with sign - extension .
1871	Converts word to doubleword .
1872	Reads time - stamp counter .
1873	Moves low packed double - precision floating - point value .
1874	Moves high packed double - precision floating - point value .
1875	Packed subtract .
1876	Move quadword .
1877	Move Scalar Double - Precision Floating - Point Value
1878	Moves a scalar single - precision floating - point value
1879	Extract Packed Floating - Point Values
1880	Shift Packed Data Right Logical
1881	Constrain state .
1882	Create and return a symbolic buffer of length nbytes . The buffer is not written into State s memory ; write it to the state s memory to introduce it into the program state .
1883	Create and return a symbolic value that is nbits bits wide . Assign the value to a register or write it into the address space to introduce it into the program state .
1884	This finds a set of solutions for symbolic using policy . This raises TooManySolutions if more solutions than maxcount
1885	Reads nbytes of symbolic data from a buffer in memory at addr and attempts to concretize it
1886	Handle memory operations from unicorn .
1887	Emulate a single instruction .
1888	Check if expression is True and that it can not be False with current constraints
1889	Iteratively finds the minimum value for a symbol within given constraints .
1890	Returns the min and max possible values for x within given constraints
1891	If we fail to parse the version we assume z3 s output has changed meaning it s a newer version than what s used now and therefore ok .
1892	Spawns z3 solver process
1893	Auxiliary method to reset the smtlib external solver to initial defaults
1894	Send a string to the solver .
1895	Reads the response from the solver
1896	Check the satisfiability of the current state
1897	Auxiliary method to send an assert
1898	Ask the solver for one possible assignment for given expression using current set of constraints . The current set of expressions must be sat .
1899	Check if two potentially symbolic values can be equal
1900	Returns a list with all the possible values for the symbol x
1901	Ask the solver for one possible result of given expression using given set of constraints .
1902	Produce a summarized record name i . e . manticore . core . executor - > m . c . executor
1903	Colors the logging level in the logging record
1904	Helper for finding the closest NULL or effectively NULL byte from a starting address .
1905	strcmp symbolic model .
1906	strlen symbolic model .
1907	Return all events that all subclasses have so far registered to publish .
1908	This forwards signal to sink
1909	Returns a pstat . Stats instance with profiling results if run was called with should_profile = True . Otherwise returns None .
1910	Runs analysis .
1911	Get the first nbits from value .
1912	Convert a bitstring value of width bits to a signed integer representation .
1913	Policy shared context dictionary
1914	Enqueue state . Save state on storage assigns an id to it then add it to the priority queue
1915	Enqueue it for processing
1916	Dequeue a state with the max priority
1917	Fork state on expression concretizations . Using policy build a list of solutions for expression . For the state on each solution setting the new state with setstate
1918	Entry point of the Executor ; called by workers to start analysis .
1919	Constructor for Linux binary analysis .
1920	Constructor for Decree binary analysis .
1921	Invoke all registered generic hooks
1922	A helper method used to resolve a symbol name into a memory address when injecting hooks for analysis .
1923	helper method for determining binary architecture
1924	helper method for getting all binary symbols with SANDSHREW_ prepended . We do this in order to provide the symbols Manticore should hook on to perform main analysis .
1925	Get a configuration variable group named |name|
1926	Save current config state to an yml file stream identified by |f|
1927	Load an yml - formatted configuration from file stream |f|
1928	Load config overrides from the yml file at |path| or from default paths . If a path is provided and it does not exist raise an exception
1929	Bring in provided config values to the args parser and import entries to the config from all arguments that were actually passed on the command line
1930	Add a variable named |name| to this value group optionally giving it a default value and a description .
1931	Like add but can tolerate existing values ; also updates the value .
1932	Return the description or a help string of variable identified by |name| .
1933	Returns the function signature for the specified name and Solidity JSON metadata inputs array .
1934	Returns the tuple type signature for the arguments of the contract constructor .
1935	Solidity source code snippet related to asm_pos evm bytecode offset . If runtime is False initialization bytecode source map is used
1936	Returns a copy of the Solidity JSON ABI item for the contract constructor .
1937	Returns a copy of the Solidity JSON ABI item for the function associated with the selector hsh .
1938	Returns the tuple type signature for the arguments of the function associated with the selector hsh .
1939	Returns the tuple type signature for the output values of the function associated with the selector hsh .
1940	Returns the signature of the normal function with the selector hsh or None if no such function exists .
1941	Catches did_map_memory and copies the mapping into Manticore
1942	Unmap Unicorn maps when Manticore unmaps them
1943	Set memory protections in Unicorn correctly
1944	Unicorn hook that transfers control to Manticore so it can execute the syscall
1945	Captures memory written by Unicorn
1946	Wrapper that runs the _step function in a loop while handling exceptions
1947	Copy registers and written memory back into Manticore
1948	Copy memory writes from Manticore back into Unicorn in real - time
1949	Sync register state from Manticore - > Unicorn
1950	Only useful for setting FS right now .
1951	A decorator for marking functions as deprecated .
1952	Produce permutations of lst where permutations are mutated by func . Used for flipping constraints . highly possible that returned constraints can be unsat this does it blindly without any attention to the constraints themselves
1953	solve bytes in |datas| based on
1954	Execute a symbolic run that follows a concrete run ; return constraints generated and the stdin data produced
1955	Create a platform without an ELF loaded .
1956	Load program and establish program state such as stack and arguments .
1957	ARM kernel helpers
1958	Adds a file descriptor to the current file descriptor list
1959	Openat SystemCall - Similar to open system call except dirfd argument when path contained in buf is relative dirfd is referred to set the relative path Special value AT_FDCWD set for dirfd to set path relative to current directory
1960	Rename filename oldnamep to newnamep .
1961	Synchronize a file s in - core state with that on disk .
1962	Wrapper for sys_sigaction
1963	Wrapper for sys_sigprocmask
1964	An implementation of chroot that does perform some basic error checking but does not actually chroot .
1965	Wrapper for mmap2
1966	Syscall dispatcher .
1967	Yield CPU . This will choose another process from the running list and change current running process . May give the same cpu if only one running process .
1968	Wait for file descriptors or timeout . Adds the current process in the correspondent waiting list and yield the cpu to another running process .
1969	Remove procid from waitlists and reestablish it in the running list
1970	Awake one process waiting to receive data on fd
1971	Awake process if timer has expired
1972	Compute total load size of interpreter .
1973	A version of openat that includes a symbolic path and symbolic directory file descriptor
1974	allocate - allocate virtual memory
1975	random - fill a buffer with random data
1976	receive - receive bytes from a file descriptor
1977	deallocate - remove allocations The deallocate system call deletes the allocations for the specified address range and causes further references to the addresses within the range to generate invalid memory accesses . The region is also automatically deallocated when the process is terminated .
1978	Yield CPU . This will choose another process from the RUNNNIG list and change current running process . May give the same cpu if only one running process .
1979	Wait for filedescriptors or timeout . Adds the current process to the corresponding waiting list and yields the cpu to another running process .
1980	Symbolic version of Decree . sys_receive
1981	Symbolic version of Decree . sys_transmit
1982	Synchronization decorator .
1983	Save an arbitrary serializable value under key .
1984	Load an arbitrary value identified by key .
1985	Return a managed file - like object into which the calling code can write arbitrary data .
1986	Return a managed file - like object from which the calling code can read previously - serialized data .
1987	Save a state to storage .
1988	Load a state from storage .
1989	Yield a file object representing key
1990	Remove file identified by key .
1991	Return just the filenames that match glob_str inside the store directory .
1992	Get a unique state id .
1993	Load a state from storage identified by state_id .
1994	Save a state to storage return identifier .
1995	Create an indexed output stream i . e . test_00000001 . name
1996	Compare registers from a remote gdb session to current mcore .
1997	Mirror some service calls in manticore . Happens after qemu executed a SVC instruction but before manticore did .
1998	The entry point of the visitor . The exploration algorithm is a DFS post - order traversal The implementation used two stacks instead of a recursion The final result is store in self . result
1999	Overload Visitor . _method because we want to stop to iterate over the visit_ functions as soon as a valid visit_ function is found
2000	a + 0 == > a 0 + a == > a
2001	a | 0 = > a 0 | a = > a 0xffffffff & a = > 0xffffffff a & 0xffffffff = > 0xffffffff
2002	Calculate static type size
2003	Build transaction data from function signature and arguments
2004	Makes a function hash id from a method signature
2005	Translates a python integral or a BitVec into a 32 byte string MSB first
2006	Translates a signed python integral or a BitVec into a 32 byte string MSB first
2007	Read a nbytes bytes long big endian unsigned integer from data starting at offset
2008	Read a nbytes bytes long big endian signed integer from data starting at offset
2009	Make sure an EVM instruction has all of its arguments concretized according to provided policies .
2010	This calculates the amount of extra gas needed for accessing to previously unused memory .
2011	Read size byte from bytecode . If less than size bytes are available result will be pad with \ x00
2012	Current instruction pointed by self . pc
2013	Push into the stack
2014	Read a value from the top of the stack without removing it
2015	Revert the stack gas pc and memory allocation so it looks like before executing the instruction
2016	Stores value in memory as a big endian
2017	Integer division operation
2018	Modulo remainder operation
2019	Signed modulo remainder operation
2020	Modulo addition operation
2021	Calculate extra gas fee
2022	Extend length of two s complement signed integer
2023	Less - than comparison
2024	Greater - than comparison
2025	Signed greater - than comparison
2026	Retrieve single byte from word
2027	Compute Keccak - 256 hash
2028	Get input data of current environment
2029	Copy input data in current environment to memory
2030	Copy code running in current environment to memory
2031	Copy an account s code to memory
2032	Load word from memory
2033	Save word to memory
2034	Save byte to memory
2035	Load word from storage
2036	Save word to storage
2037	Conditionally alter the program counter
2038	Exchange 1st and 2nd stack items
2039	Message - call into this account with alternative account s code
2040	Halt execution returning output data
2041	Halt execution and register account for later deletion
2042	Completed human transaction
2043	Current ongoing human transaction
2044	Read a value from a storage slot on the specified account
2045	Writes a value to a storage slot in specified account
2046	Gets all items in an account storage
2047	True if something has been written to the storage . Note that if a slot has been erased from the storage this function may lose any meaning .
2048	Create a fresh 160bit address
2049	Create a contract account . Sends a transaction to initialize the contract
2050	Toggle between ARM and Thumb mode
2051	MRC moves to ARM register from coprocessor .
2052	Loads double width data from memory .
2053	Writes the contents of two registers to memory .
2054	Address to Register adds an immediate value to the PC value and writes the result to the destination register .
2055	This instruction adds an immediate value to a register value and writes the result to the destination register . It doesn t update the condition flags .
2056	Compare and Branch on Zero compares the value in a register with zero and conditionally branches forward a constant value . It does not affect the condition flags .
2057	Table Branch Halfword causes a PC - relative forward branch using a table of single halfword offsets . A base register provides a pointer to the table and a second register supplies an index into the table . The branch length is twice the value of the halfword returned from the table .
2058	Produce a dict that includes all the keys in d2 that represent different values in d1 as well as values that aren t in d1 .
2059	Get next instruction using the Capstone disassembler
2060	Add a constraint to the set
2061	Declare the variable var
2062	Returns the variable expressions of this constraint set
2063	True if expression_var is declared in this constraint set
2064	Migrate an expression created for a different constraint set to self . Returns an expression that can be used with this constraintSet
2065	Perform the inverse transformation to encoded data . Will attempt best case reconstruction which means it will return nan for handle_missing and handle_unknown settings that break the bijection . We issue warnings when some of those cases occur .
2066	Ordinal encoding uses a single column of integers to represent the classes . An optional mapping dict can be passed in in this case we use the knowledge that there is some true order to the classes themselves . Otherwise the classes are assumed to have no true order and integers are selected at random .
2067	Convert dummy variable into numerical variables
2068	Load the cars dataset split it into X and y and then call the label encoder to get an integer y column .
2069	Load the mushroom dataset split it into X and y and then call the label encoder to get an integer y column .
2070	Convert basen code as integers .
2071	The lambda body to transform the column values
2072	Returns names of object columns in the DataFrame .
2073	Unite data into a DataFrame .
2074	Unite target data type into a Series . If the target is a Series or a DataFrame we preserve its index . But if the target does not contain index attribute we use the index from the argument .
2075	Takes in a classifier that supports multiclass classification and X and a y and returns a cross validation score .
2076	Here we iterate through the datasets and score them with a classifier using different encodings .
2077	A wrapper around click . secho that disables any coloring being used if colors have been disabled .
2078	Associate a notification template from this job template .
2079	Disassociate a notification template from this job template .
2080	Contact Tower and request a configuration update using this job template .
2081	Decorator to aggregate unified_jt - related fields .
2082	Internal method that lies to our monitor method by returning a scorecard for the workflow job where the standard out would have been expected .
2083	Launch a new workflow job based on a workflow job template .
2084	Parse arguments sent to this command .
2085	Monkey - patch click s format_options method to support option categorization .
2086	Return one and exactly one object
2087	Convert next and previous from URLs to integers
2088	Remove the given object .
2089	Return one and exactly one object .
2090	Disassociate the other record from the me record .
2091	Copy an object .
2092	Internal utility function for Unified Job Templates . Returns data about the last job run off of that UJT
2093	Internal utility function to return standard out . Requires the pk of a unified job .
2094	Print out the standard out of a unified job to the command line or output file . For Projects print the standard out of most recent update . For Inventory Sources print standard out of most recent sync . For Jobs print the job s standard out . For Workflow Jobs print a status table of its jobs .
2095	Stream the standard output from a job project update or inventory udpate .
2096	Print the current job status . This is used to check a running job . You can look up the job with the same parameters used for a get request .
2097	Cancel a currently running job .
2098	Relaunch a stopped job .
2099	Update all related inventory sources of the given inventory .
2100	Do extra processing so we can display the actor field as a top - level field
2101	Log the given output to stderr if and only if we are in verbose mode .
2102	Hook for ResourceMeta class to call when initializing model class . Saves fields obtained from resource class backlinks
2103	Returns a callable which becomes the associate or disassociate method for the related field . Method can be overridden to add additional functionality but _produce_method may also need to be subclassed to decorate it appropriately .
2104	Create a new label .
2105	Display full version information .
2106	Echo a setting to the CLI .
2107	Read or write tower - cli configuration .
2108	Retrieves and stores an OAuth2 personal auth token .
2109	Export assets from Tower .
2110	Import assets into Tower .
2111	Empties assets from Tower .
2112	Parse out a list of requirements from the given requirements requirements file .
2113	Modify an already existing .
2114	Trigger a project update job within Ansible Tower . Only meaningful on non - manual projects .
2115	Print the status of the most recent update .
2116	Return file content if file else return value as - is
2117	Match against the appropriate choice value using the superclass implementation and then return the actual choice .
2118	Return the appropriate integer value . If a non - integer is provided attempt a name - based lookup and return the primary key .
2119	Returns filtering parameters to limit a search to the children of a particular node by a particular relationship .
2120	Add a node to run on success .
2121	Remove success node . The resulatant 2 nodes will both become root nodes .
2122	Add a node to run on failure .
2123	Remove a failure node link . The resulatant 2 nodes will both become root nodes .
2124	Add a node to always run after the parent is finished .
2125	Remove an always node link . The resultant 2 nodes will both become root nodes .
2126	Converts a set of CLI input arguments in_data into request data and an endpoint that can be used to look up a role or list of roles .
2127	Operates on item_dict
2128	Add or remove columns from the output .
2129	Populates columns and sets display attribute as needed . Operates on data .
2130	Return a list of roles .
2131	Get information about a role .
2132	Investigate two lists of workflow TreeNodes and categorize them .
2133	Takes the list results from the API in node_results and translates this data into a dictionary organized in a human - readable heirarchial structure
2134	Returns a dictionary that represents the node network of the workflow job template
2135	Associate a notification template from this workflow .
2136	Disassociate a notification template from this workflow .
2137	Create a group .
2138	Return a list of groups .
2139	Associate this group with the specified group .
2140	Disassociate this group from the specified group .
2141	Similar to the Ansible function of the same name parses file with a key = value pattern and stores information in a dictionary but not as fully featured as the corresponding Ansible code .
2142	Returns a string that is valid JSON or YAML and contains all the variables in every extra_vars_opt inside of extra_vars_list .
2143	Expand PyYAML s built - in dumper to support parsing OrderedDict . Return a string as parse result of the original data structure which includes OrderedDict .
2144	Return the appropriate URL prefix to prepend to requests based on the host provided in settings .
2145	Make a request to the Ansible Tower API and return the response .
2146	Remove None - valued and configuration - related keyworded arguments
2147	Combine configuration - related keyworded arguments into notification_configuration .
2148	Create a notification template .
2149	Modify an existing notification template .
2150	Remove the given notification template .
2151	Return a list of notification templates .
2152	Return one and exactly one notification template .
2153	Read tower - cli config values from the environment if present being careful not to override config values that were explicitly passed in .
2154	Read the configuration from the given file .
2155	Maintains the context of the runtime settings for invoking a command .
2156	Launch a new ad - hoc command .
2157	Given a method with a docstring convert the docstring to more CLI appropriate wording and also disambiguate the word object on the base class docstrings .
2158	Given a method return a method that runs the internal method and echos the result .
2159	Convert the payload into a YAML string with proper indentation and return it .
2160	Echos only the id
2161	Retrieve the appropriate method from the Resource decorate it as a click command and return that method .
2162	Update the given inventory source .
2163	Return a list of hosts .
2164	Return a JSON object of all available facts of the given host .
2165	Extra format methods for multi methods that adds all the commands after the options .
2166	Return a list of commands present in the commands and resources folders but not subcommands .
2167	Returns a list of multi - commands for each resource type .
2168	Returns a list of global commands realted to CLI configuration or system management in general .
2169	Given a command identified by its name import the appropriate module and return the decorated command .
2170	Mark this method as a CLI command .
2171	Adds the decorators for all types of unified job templates and if the non - unified type is specified converts it into the unified_job_template kwarg .
2172	Generates a state string to be used in authorizations .
2173	Form an authorization URL .
2174	Parse token from the URI fragment used by MobileApplicationClients .
2175	Fetch a new access token using a refresh token .
2176	Intercept all requests and add the OAuth 2 token if present .
2177	Boolean that indicates whether this session has an OAuth token or not . If self . authorized is True you can reasonably expect OAuth - protected requests to the resource to succeed . If self . authorized is False you need the user to go through the OAuth authentication dance before OAuth - protected requests to the resource will succeed .
2178	Create an authorization URL by appending request_token and optional kwargs to url .
2179	r Fetch a request token .
2180	Fetch an access token .
2181	Extract parameters from the post authorization redirect response URL .
2182	When being redirected we should always strip Authorization header since nonce may not be reused as per OAuth spec .
2183	Returns data with different cfgstr values that were previously computed with this cacher .
2184	Removes the saved cache and metadata from disk
2185	Like load but returns None if the load fails due to a cache miss .
2186	Loads the data
2187	r Wraps around a function . A cfgstr must be stored in the base cacher .
2188	Returns the stamp certificate if it exists
2189	puts products in a normalized format
2190	Get the hash of the each product file
2191	Check to see if a previously existing stamp is still valid and if the expected result of that computation still exists .
2192	Recertify that the product has been recomputed by writing a new certificate to disk .
2193	Returns true of the redirect is a terminal .
2194	Gets the encoding of the redirect IO object
2195	Write to this and the redirected stream
2196	Flush to this and the redirected stream
2197	Log what has been captured so far
2198	Returns path for user - specific data files
2199	Returns a directory which should be writable for any application This should be used for persistent configuration files .
2200	Calls get_app_data_dir but ensures the directory exists .
2201	Calls get_app_config_dir but ensures the directory exists .
2202	Calls get_app_cache_dir but ensures the directory exists .
2203	Uses default program defined by the system to open a file . This is done via os . startfile on windows open on mac and xdg - open on linux .
2204	Locate a command .
2205	Returns the user s home directory . If username is None this is the directory for the current user .
2206	Inverse of os . path . expanduser
2207	Normalizes a string representation of a path and does shell - like expansion .
2208	r Ensures that directory will exist . Creates new dir with sticky bits by default
2209	pip install requirements - parser fname = requirements . txt
2210	Parse the package dependencies listed in a requirements file but strips specific versioning information .
2211	Injects a function into an object instance as a bound method
2212	change file timestamps
2213	Removes a file or recursively removes a directory . If a path does not exist then this is does nothing .
2214	Makes a pretty and easy - to - doctest string representation!
2215	Joins string - ified items with separators newlines and container - braces .
2216	Create a string representation for each item in a dict .
2217	Create a string representation for each item in a list .
2218	used by recursive functions to specify which level to turn a bool on in counting down yields True True ... False counting up yields False False False ... True
2219	Registers a custom formatting function with ub . repr2
2220	Returns an appropriate function to format data if one has been registered .
2221	Convert a string - based key into a hasher class
2222	transforms base shorthand into the full list representation
2223	r Extracts the sequence of bytes that would be hashed by hash_data
2224	r Converts data into a hashable byte representation if an appropriate hashing function is known .
2225	Converts data into a byte representation and calls update on the hasher hashlib . HASH algorithm .
2226	r Packs a long hexstr into a shorter length string with a larger base .
2227	counterpart to _update_hasher
2228	Get a unique hash depending on the state of the data .
2229	Hashes the data in a file on disk .
2230	Registers a function to generate a hash for data of the appropriate types . This can be used to register custom classes . Internally this is used to define how to hash non - builtin objects like ndarrays and uuids .
2231	Returns an appropriate function to hash data if one has been registered .
2232	Numpy extensions are builtin
2233	Register hashing extensions for a selection of classes included in python stdlib .
2234	Reads output from a process in a separate thread
2235	Simultaneously reports and captures stdout and stderr from a process
2236	make an iso8601 timestamp
2237	Imports a module via its path
2238	Returns valid tags an extension module might have
2239	syspath version of modname_to_modpath
2240	Finds the path to a python module from its name .
2241	Determines importable name from file path
2242	Splits the modpath into the dir that must be in PYTHONPATH for the module to be imported and the modulepath relative to this directory .
2243	Get the value of a keyword argument specified on the command line .
2244	Determines if a key is specified on the command line
2245	Horizontally concatenates strings preserving indentation
2246	Create a symbolic link .
2247	Transforms function args into a key that can be used by the cache
2248	memoization decorator that respects args and kwargs
2249	Return a property attribute for new - style classes that only calls its getter on the first access . The result is stored and on subsequent accesses is returned preventing the need to call the getter any more .
2250	Highlights a block of text using ANSI tags based on language syntax .
2251	r Colorizes text a single color using ansii tags .
2252	Checks if the input implements the iterator interface . An exception is made for strings which return False unless strok is True
2253	Generates unique items in the order they appear .
2254	Returns indices corresponding to the first instance of each unique item .
2255	Returns a list of booleans corresponding to the first instance of each unique item .
2256	Constructs a list of booleans where an item is True if its position is in indices otherwise it is False .
2257	Determine if all items in a sequence are the same
2258	Returns the indices that would sort a indexable object .
2259	Zips elementwise pairs between items1 and items2 into a dictionary . Values from items2 can be broadcast onto items1 .
2260	r Groups a list of items by group id .
2261	Builds a histogram of items counting the number of time each item appears in the input .
2262	Find all duplicate items in a list .
2263	r Generates values from a dictionary
2264	Combines the disjoint keys in multiple dictionaries . For intersecting keys dictionaries towards the end of the sequence are given precedence .
2265	Constructs a dictionary that contains keys common between all inputs . The returned values will only belong to the first dictionary .
2266	applies a function to each of the keys in a dictionary
2267	r Swaps the keys and values in a dictionary .
2268	Recursively casts a AutoDict into a regular dictionary . All nested AutoDict values are also converted .
2269	Windows helper for ub . symlink
2270	Perform a real symbolic link if possible . However on most versions of windows you need special privledges to create a real symlink . Therefore we try to create a symlink but if that fails we fallback to using a junction .
2271	Creates real symlink . This will only work in versions greater than Windows Vista . Creating real symlinks requires admin permissions or at least specially enabled symlink permissions . On Windows 10 enabling developer mode should give you these permissions .
2272	Determines if a path is a win32 junction
2273	Returns the location that the junction points raises ValueError if path is not a junction .
2274	rmtree for win32 that treats junctions like directory symlinks . The junction removal portion may not be safe on race conditions .
2275	Test if two hard links point to the same location
2276	Using the windows cmd shell to get information about a directory
2277	Returns generators that double with each value returned Config includes optional start value
2278	Parse a contains validator which takes as the config a simple string to find
2279	Retrieve the adjacency matrix from the nx . DiGraph or numpy array .
2280	Apply causal discovery on observational data using CCDr .
2281	Save data to the csv format by default in two separate files .
2282	Launch an R script starting from a template and replacing text in file before execution .
2283	Execute a subprocess to check the package s availability .
2284	Perform the independence test .
2285	Orient a graph using the method defined by the arguments .
2286	Evaluate a graph taking account of the hardware .
2287	Parallelize the various runs of CGNN to evaluate a graph .
2288	Generate according to the topological order of the graph .
2289	Run the CGNN on a given graph .
2290	Use CGNN to create a graph from scratch . All the possible structures are tested which leads to a super exponential complexity . It would be preferable to start from a graph skeleton for large graphs .
2291	Modify and improve a directed acyclic graph solution using CGNN .
2292	Orient the undirected graph using GNN and apply CGNN to improve the graph .
2293	Evaluate the entropy of the input variable .
2294	Integral approximation estimator for causal inference .
2295	Evaluate a pair using the IGCI model .
2296	Projects the causal pair to the RKHS using the sampled kernel approximation .
2297	Train the model .
2298	Predict the causal score using a trained RCC model
2299	For one variable predict its neighbours .
2300	Build a skeleton using a pairwise independence criterion .
2301	Predict the skeleton of the graph from raw data .
2302	Run GIES on an undirected graph .
2303	Run the GIES algorithm .
2304	Setting up and running GIES with all arguments .
2305	Plot SAM s various losses .
2306	Plot generated pairs of variables .
2307	Reset the parameters .
2308	Feed - forward through the network .
2309	Execute SAM on a dataset given a skeleton or not .
2310	Infer causal relationships between 2 variables using the RECI statistic
2311	Compute the RECI fit score
2312	Infer causal relationships between 2 variables using the CDS statistic
2313	Prediction method for pairwise causal inference using the ANM model .
2314	Compute the fitness score of the ANM model in the x - > y direction .
2315	Run PC on an undirected graph .
2316	Run the PC algorithm .
2317	Setting up and running pc with all arguments .
2318	Predict the graph skeleton .
2319	Autoset GPU parameters using CUDA_VISIBLE_DEVICES variables .
2320	Output some information on CUDA - enabled devices on your computer including current memory usage . Modified to only get number of devices .
2321	Get the default parameters as defined in the Settings instance .
2322	Convert a ChaLearn Cause effect pairs challenge format into numpy . ndarray .
2323	Compute the loss model .
2324	Generic predict method chooses which subfunction to use for a more suited .
2325	Generic dataset prediction function .
2326	Orient an undirected graph using the pairwise method defined by the subclass .
2327	Run the algorithm on an undirected graph .
2328	Run the algorithm on a directed_graph .
2329	Run the algorithm on data .
2330	Compute the gaussian kernel on a 1D vector .
2331	Init a noise variable .
2332	Init a uniform noise variable .
2333	Runs Jarfo independently on all pairs .
2334	Use Jarfo to predict the causal direction of a pair of vars .
2335	Implementation of the Context Likelihood or Relatedness Network algorithm .
2336	Implementation of the ARACNE algorithm .
2337	Apply deconvolution to a networkx graph .
2338	Input a graph and output a DAG .
2339	Returns the weighted average and standard deviation .
2340	Run an instance of GNN testing causal direction .
2341	Pass data through the net structure .
2342	Run the GNN on a pair x y of FloatTensor data .
2343	Run multiple times GNN to estimate the causal direction .
2344	Apply causal discovery on observational data using CAM .
2345	Passing data through the network .
2346	Infer causal directions using the trained NCC pairwise model .
2347	Convert phrase to normilized file name .
2348	A URL that can be used to open the page .
2349	Open the page .
2350	Wait for the page to load .
2351	Register the Selenium specific driver implementation .
2352	Root element for the page region .
2353	Wait for the page region to load .
2354	Finds an element on the page .
2355	Finds elements on the page .
2356	Checks whether an element is present .
2357	Checks whether an element is displayed .
2358	Register driver adapter used by page object
2359	r - ? \ d +
2360	r \ }
2361	r << - \ S + \ r? \ n
2362	r << \ S + \ r? \ n
2363	Initialize the parse table at install time
2364	Add another row of data from a test suite
2365	Return an instance of SuiteFile ResourceFile SuiteFolder
2366	Iterator which visits all suites and suite files yielding test cases and keywords
2367	The general idea is to do a quick parse creating a list of tables . Each table is nothing more than a list of rows with each row being a list of cells . Additional parsing such as combining rows into statements is done on demand . This first pass is solely to read in the plain text and organize it by table .
2368	Return suite or resource or None
2369	Generator which returns all keywords in the suite
2370	Regurgitate the tables and rows
2371	Generator which returns all of the statements in all of the settings tables
2372	Generator which returns all of the statements in all of the variables tables
2373	Return a list of statements
2374	The idea is we recognize when we have a new testcase by checking the first cell . If it s not empty and not a comment we have a new test case .
2375	Report an error or warning
2376	Parse command line arguments and run rflint
2377	Print a list of all rules
2378	Report a rule violation
2379	Returns a list of rules of a given class Rules are treated as singletons - we only instantiate each rule once .
2380	Import the given rule file
2381	Handle the parsing of command line arguments .
2382	Creates a customized Draft4ExtendedValidator .
2383	While yaml supports integer keys these are not valid in json and will break jsonschema . This method coerces all keys to strings .
2384	Open a file read it and return its contents .
2385	Creates validators generator for the spec resolver .
2386	Creates a path to model files model_path - string
2387	Strips illegal characters from a string . Used to sanitize input essays . Removes all non - punctuation digit or letter characters . Returns sanitized string . string - string
2388	Uses aspell to spell correct an input string . Requires aspell to be installed and added to the path . Returns the spell corrected string if aspell is found original string if not . string - string
2389	Makes a list unique
2390	Generates a count of the number of times each unique item appears in a list
2391	Given an input string part of speech tags the string then generates a list of ngrams that appear in the string . Used to define grammatically correct part of speech tag sequences . Returns a list of part of speech tag sequences .
2392	Calculates string edit distance between string 1 and string 2 . Deletion insertion substitution and transposition all increase edit distance .
2393	Generates predictions on a novel data array using a fit classifier clf is a classifier that has already been fit arr is a data array identical in dimension to the array clf was trained on Returns the array of predictions .
2394	Calculates the average value of a list of numbers Returns a float
2395	Calculates kappa correlation between rater_a and rater_b . Kappa measures how well 2 quantities vary together . rater_a is a list of rater a scores rater_b is a list of rater b scores min_rating is an optional argument describing the minimum rating possible on the data set max_rating is an optional argument describing the maximum rating possible on the data set Returns a float corresponding to the kappa correlation
2396	Generates a confusion matrix between rater_a and rater_b A confusion matrix shows how often 2 values agree and disagree See quadratic_weighted_kappa for argument descriptions
2397	Generates a frequency count of each rating on the scale ratings is a list of scores Returns a list of frequencies
2398	Literally encodes the plus sign input is a string returns the string with plus signs encoded
2399	Initializes dictionaries from an essay set object Dictionaries must be initialized prior to using this to extract features e_set is an input essay set returns a confirmation of initialization
2400	Gets a set of gramatically correct part of speech sequences from an input file called essaycorpus . txt Returns the set and caches the file
2401	Generates length based features from an essay set Generally an internal function called by gen_feats Returns an array of length features e_set - EssaySet object
2402	Generates bag of words features from an input essay set and trained FeatureExtractor Generally called by gen_feats Returns an array of features e_set - EssaySet object
2403	Generates bag of words length and prompt features from an essay set object returns an array of features e_set - EssaySet object
2404	Generates prompt based features from an essay set object and internal prompt variable . Generally called internally by gen_feats Returns an array of prompt features e_set - EssaySet object
2405	Update the default prompt string which is . prompt_text should be a string . Returns the prompt as a confirmation .
2406	Gets two classifiers for each type of algorithm and returns them . First for predicting second for cv error . type - one of util_functions . AlgorithmTypes
2407	Extracts features and generates predictors based on a given predictor set predictor_set - a PredictorSet object that has been initialized with data type - one of util_functions . AlgorithmType
2408	Feed in an essay set to get feature vector and classifier essays must be an essay set object additional array is an optional argument that can specify a numpy array of values to add in returns a trained FeatureExtractor object and a trained classifier
2409	Writes out a model to a file . prompt string is a string containing the prompt feature_ext is a trained FeatureExtractor object classifier is a trained classifier model_path is the path of write out the model file to
2410	Function that creates essay set extracts features and writes out model See above functions for argument descriptions
2411	Initialize dictionaries with the textual inputs in the PredictorSet object p_set - PredictorSet object that has had data fed in
2412	Generates features based on an iput p_set p_set - PredictorSet
2413	Reports an OrderError . Error message will state that first_tag came before second_tag .
2414	Write the creation info to out .
2415	Write the fields of a single review to out .
2416	Write the fields of a single annotation to out .
2417	Write a file fields to out .
2418	Write a package fields to out .
2419	Write extracted licenses fields to out .
2420	Write an SPDX tag value document . - document - spdx . document instance . - out - file like object that will be written to . Optionally validate the document before writing and raise InvalidDocumentError if document . validate returns False .
2421	Return an spdx . checksum . Algorithm instance representing the SHA1 checksum or None if does not match CHECKSUM_RE .
2422	Return content of a free form text block as a string .
2423	Set the document version . Raise SPDXValueError if malformed value CardinalityError if already defined
2424	Sets the document data license . Raises value error if malformed value CardinalityError if already defined .
2425	Sets the document name . Raises CardinalityError if already defined .
2426	Sets the document SPDX Identifier . Raises value error if malformed value CardinalityError if already defined .
2427	Sets document comment Raises CardinalityError if comment already set . Raises SPDXValueError if comment is not free form text .
2428	Sets the document namespace . Raise SPDXValueError if malformed value CardinalityError if already defined .
2429	Resets the state to allow building new documents
2430	Sets the spdx_document_uri attribute of the ExternalDocumentRef object .
2431	Builds a tool object out of a string representation . Returns built tool . Raises SPDXValueError if failed to extract tool name or name is malformed
2432	Adds a creator to the document s creation info . Returns true if creator is valid . Creator must be built by an EntityBuilder . Raises SPDXValueError if not a creator type .
2433	Sets created date Raises CardinalityError if created date already set . Raises SPDXValueError if created is not a date .
2434	Sets the license list version Raises CardinalityError if already set SPDXValueError if incorrect value .
2435	Resets builder state to allow building new creation info .
2436	Adds a reviewer to the SPDX Document . Reviwer is an entity created by an EntityBuilder . Raises SPDXValueError if not a valid reviewer type .
2437	Sets the review date . Raises CardinalityError if already set . OrderError if no reviewer defined before . Raises SPDXValueError if invalid reviewed value .
2438	Sets the review comment . Raises CardinalityError if already set . OrderError if no reviewer defined before . Raises SPDXValueError if comment is not free form text .
2439	Resets the builder s state to allow building new annotations .
2440	Adds an annotator to the SPDX Document . Annotator is an entity created by an EntityBuilder . Raises SPDXValueError if not a valid annotator type .
2441	Sets the annotation date . Raises CardinalityError if already set . OrderError if no annotator defined before . Raises SPDXValueError if invalid value .
2442	Sets the annotation comment . Raises CardinalityError if already set . OrderError if no annotator defined before . Raises SPDXValueError if comment is not free form text .
2443	Sets the annotation type . Raises CardinalityError if already set . OrderError if no annotator defined before . Raises SPDXValueError if invalid value .
2444	Sets the annotation SPDX Identifier . Raises CardinalityError if already set . OrderError if no annotator defined before .
2445	Resets the builder s state in order to build new packages .
2446	Creates a package for the SPDX Document . name - any string . Raises CardinalityError if package already defined .
2447	Sets package version if not already set . version - Any string . Raises CardinalityError if already has a version . Raises OrderError if no package previously defined .
2448	Sets the package file name if not already set . name - Any string . Raises CardinalityError if already has a file_name . Raises OrderError if no pacakge previously defined .
2449	Sets the package supplier if not already set . entity - Organization Person or NoAssert . Raises CardinalityError if already has a supplier . Raises OrderError if no package previously defined .
2450	Sets the package originator if not already set . entity - Organization Person or NoAssert . Raises CardinalityError if already has an originator . Raises OrderError if no package previously defined .
2451	Sets the package download location if not already set . location - A string Raises CardinalityError if already defined . Raises OrderError if no package previously defined .
2452	Sets the package homepage location if not already set . location - A string or None or NoAssert . Raises CardinalityError if already defined . Raises OrderError if no package previously defined . Raises SPDXValueError if location has incorrect value .
2453	Sets the package verification code if not already set . code - A string . Raises CardinalityError if already defined . Raises OrderError if no package previously defined . Raises Value error if doesn t match verifcode form
2454	Sets the package s source information if not already set . text - Free form text . Raises CardinalityError if already defined . Raises OrderError if no package previously defined . SPDXValueError if text is not free form text .
2455	Sets the package s concluded licenses . licenses - License info . Raises CardinalityError if already defined . Raises OrderError if no package previously defined . Raises SPDXValueError if data malformed .
2456	Adds a license from a file to the package . Raises SPDXValueError if data malformed . Raises OrderError if no package previously defined .
2457	Sets the package s declared license . Raises SPDXValueError if data malformed . Raises OrderError if no package previously defined . Raises CardinalityError if already set .
2458	Sets the package s license comment . Raises OrderError if no package previously defined . Raises CardinalityError if already set . Raises SPDXValueError if text is not free form text .
2459	Set s the package summary . Raises SPDXValueError if text is not free form text . Raises CardinalityError if summary already set . Raises OrderError if no package previously defined .
2460	Set s the package s description . Raises SPDXValueError if text is not free form text . Raises CardinalityError if description already set . Raises OrderError if no package previously defined .
2461	Raises OrderError if no package defined .
2462	Sets the file SPDX Identifier . Raises OrderError if no package or no file defined . Raises SPDXValueError if malformed value . Raises CardinalityError if more than one spdx_id set .
2463	Raises OrderError if no package or no file defined . Raises CardinalityError if more than one comment set . Raises SPDXValueError if text is not free form text .
2464	Raises OrderError if no package or file defined . Raises CardinalityError if more than one type set . Raises SPDXValueError if type is unknown .
2465	Raises OrderError if no package or file defined . Raises CardinalityError if more than one chksum set .
2466	Raises OrderError if no package or file defined . Raises CardinalityError if already set . Raises SPDXValueError if malformed .
2467	Raises OrderError if no package or file defined . Raises SPDXValueError if malformed value .
2468	Raises OrderError if no package or file defined . Raises SPDXValueError if text is not free form text . Raises CardinalityError if more than one per file .
2469	Raises OrderError if no package or file defined . Raises SPDXValueError if not free form text or NONE or NO_ASSERT . Raises CardinalityError if more than one .
2470	Raises OrderError if no package or file defined . Raises SPDXValueError if not free form text . Raises CardinalityError if more than one .
2471	Sets a file name uri or home artificat . Raises OrderError if no package or file defined .
2472	Resets the builder s state to enable building new files .
2473	Adds a new extracted license to the document . Raises SPDXValueError if data format is incorrect .
2474	Sets license extracted text . Raises SPDXValueError if text is not free form text . Raises OrderError if no license ID defined .
2475	Sets license name . Raises SPDXValueError if name is not str or utils . NoAssert Raises OrderError if no license id defined .
2476	Sets license comment . Raises SPDXValueError if comment is not free form text . Raises OrderError if no license ID defined .
2477	Adds a license cross reference . Raises OrderError if no License ID defined .
2478	Resets builder s state for building new documents . Must be called between usage with different documents .
2479	Return an ISO - 8601 representation of a datetime object .
2480	Return a datetime object from an iso 8601 representation . Return None if string is non conforming .
2481	Must be called before parse .
2482	Parses a license list and returns a License or None if it failed .
2483	Write an SPDX RDF document . - document - spdx . document instance . - out - file like object that will be written to . Optionally validate the document before writing and raise InvalidDocumentError if document . validate returns False .
2484	Return a node representing spdx . checksum .
2485	Return proper spdx term or Literal
2486	Traverse conjunctions and disjunctions like trees and return a set of all licenses in it as nodes .
2487	Return a node representing a conjunction of licenses .
2488	Return a node representing a disjunction of licenses .
2489	Handle extracted license . Return the license node .
2490	Create a node for spdx . file .
2491	Handle dependencies for a single file . - doc_file - instance of spdx . file . File .
2492	Return a review node .
2493	Return an annotation node .
2494	Return a node representing package verification code .
2495	Write package optional fields .
2496	Return a Node representing the package . Files must have been added to the graph before this method is called .
2497	Return node representing pkg_file pkg_file should be instance of spdx . file .
2498	Add hasFile triples to graph . Must be called after files have been added .
2499	Add and return the root document node to graph .
2500	Returns True if the fields are valid according to the SPDX standard . Appends user friendly messages to the messages parameter .
2501	Reports a value error using ERROR_MESSAGES dict . key - key to use for ERROR_MESSAGES . bad_value - is passed to format which is called on what key maps to in ERROR_MESSAGES .
2502	Checks if value is a special SPDX value such as NONE NOASSERTION or UNKNOWN if so returns proper model . else returns value
2503	Return a License from a lics license resource .
2504	Return an a license identifier from an ExtractedLicense or None .
2505	Return extracted text from an ExtractedLicense or None .
2506	Return the license name from an ExtractedLicense or None
2507	Return a list of cross references .
2508	Return license comment or None .
2509	Return an ExtractedLicense object to represent a license object . But does not add it to the SPDXDocument model . Return None if failed .
2510	Build and return an ExtractedLicense or None . Note that this function adds the license to the document .
2511	Parses package fields .
2512	Handles package lics concluded or declared .
2513	Returns first found fileName property or None if not found .
2514	Sets file dependencies .
2515	Parse all file contributors and adds them to the model .
2516	Sets file notice text .
2517	Sets file comment text .
2518	Sets file copyright text .
2519	Sets file license comment .
2520	Sets file license information .
2521	Sets file type .
2522	Sets file checksum . Assumes SHA1 algorithm without checking .
2523	Sets file licenses concluded .
2524	Returns review date or None if not found . Reports error on failure . Note does not check value format .
2525	Returns reviewer as creator object or None if failed . Reports errors on failure .
2526	Returns annotation type or None if found none or more than one . Reports errors on failure .
2527	Returns annotation comment or None if found none or more than one . Reports errors .
2528	Returns annotation date or None if not found . Reports error on failure . Note does not check value format .
2529	Parses a file and returns a document object . File a file like object .
2530	Parse creators created and comment .
2531	Parses the version data license name SPDX Identifier namespace and comment .
2532	Parses the External Document ID SPDX Document URI and Checksum .
2533	Validate the package fields . Append user friendly error messages to the messages list .
2534	Helper for validate_mandatory_str_field and validate_optional_str_fields
2535	Sets document comment Raises CardinalityError if comment already set .
2536	Sets the external document reference s check sum if not already set . chk_sum - The checksum value in the form of a string .
2537	Sets the package s source information if not already set . text - Free form text . Raises CardinalityError if already defined . Raises OrderError if no package previously defined .
2538	Sets the package verification code if not already set . code - A string . Raises CardinalityError if already defined . Raises OrderError if no package previously defined .
2539	Sets the package s verification code excluded file . Raises OrderError if no package previously defined .
2540	Set s the package summary . Raises CardinalityError if summary already set . Raises OrderError if no package previously defined .
2541	Set s the package s description . Raises CardinalityError if description already set . Raises OrderError if no package previously defined .
2542	Sets the file check sum if not already set . chk_sum - A string Raises CardinalityError if already defined . Raises OrderError if no package previously defined .
2543	Raises OrderError if no package or file defined . Raises CardinalityError if more than one per file .
2544	Raises OrderError if no package or no file defined . Raises CardinalityError if more than one comment set .
2545	Sets the review comment . Raises CardinalityError if already set . OrderError if no reviewer defined before .
2546	Sets the annotation comment . Raises CardinalityError if already set . OrderError if no annotator defined before .
2547	Sets the annotation type . Raises CardinalityError if already set . OrderError if no annotator defined before .
2548	Validate all fields of the document and update the messages list with user friendly error messages for display .
2549	includes the contents of a file on disk . takes a filename
2550	pipes the output of a program
2551	unescapes html entities . the opposite of escape .
2552	Set attributes on the current active tag context
2553	Add or update the value of an attribute .
2554	Creates a reference to the parent document to allow for partial - tree validation .
2555	Add new child tags .
2556	Recursively searches children for tags of a certain type with matching attributes .
2557	Normalize attribute names for shorthand and work arounds for limitations in Python s syntax
2558	This will call clean_attribute on the attribute and also allows for the creation of boolean attributes .
2559	Creates a registration message to identify the worker to the interchange
2560	Send heartbeat to the incoming task queue
2561	Receives a results from the MPI worker pool and send it out via 0mq
2562	Receives 1 task request from MPI comm
2563	Pulls tasks from the incoming tasks 0mq pipe onto the internal pending task queue
2564	Start the Manager process .
2565	Decorator function to launch a function as a separate process
2566	Send UDP messages to usage tracker asynchronously
2567	By default tracking is enabled .
2568	Collect preliminary run info at the start of the DFK .
2569	Collect the final run information at the time of DFK cleanup .
2570	Send UDP message .
2571	Send message over UDP .
2572	Start the database manager process
2573	Create the dictionary that will be included in the log .
2574	This function is called as a callback when an AppFuture is in its final state .
2575	Handle the actual submission of the task to the executor layer .
2576	Look for inputs of the app that are remote files . Submit stage_in apps for such files and replace the file objects in the inputs list with corresponding DataFuture objects .
2577	Count the number of unresolved futures on which a task depends .
2578	Add task to the dataflow system .
2579	DataFlowKernel cleanup .
2580	Checkpoint the dfk incrementally to a checkpoint file .
2581	Load a checkpoint file into a lookup table .
2582	Load checkpoints from the checkpoint files into a dictionary .
2583	Load a DataFlowKernel .
2584	Obtains a batch of tasks from the internal pending_task_queue
2585	Pull tasks from the incoming tasks 0mq pipe onto the internal pending task queue
2586	Command server to run async command to the interchange
2587	Start the worker processes .
2588	Return the DataManager of the currently loaded DataFlowKernel .
2589	Shutdown the ThreadPool .
2590	Transport the file from the input source to the executor .
2591	Transport the file from the local filesystem to the remote Globus endpoint .
2592	Finds the checkpoints from all last runs .
2593	Find the checkpoint from the last run if one exists .
2594	Decorator for making functions appear as interactively defined .
2595	Revert to using stdlib pickle .
2596	Import any string - keys in a type mapping .
2597	Prepare an object for pickling .
2598	Can the elements of a sequence .
2599	Invert canning .
2600	Mute newly added handlers to the root level right after calling executor . status
2601	Start the controller .
2602	Specify path to the ipcontroller - engine . json file .
2603	Specify path to the ipcontroller - client . json file .
2604	Terminate the controller process and its child processes .
2605	Create a hash of the task inputs .
2606	Create a hash of the task and its inputs and check the lookup table for this hash .
2607	Updates the memoization lookup table with the result from a task .
2608	Return byte - size of a memoryview or buffer .
2609	Extract buffers larger than a certain threshold .
2610	Restore extracted buffers .
2611	Serialize an object into a list of sendable buffers .
2612	Reconstruct an object serialized by serialize_object from data buffers .
2613	Pack up a function args and kwargs to be sent over the wire .
2614	Generate submit script and write it to a file .
2615	Cancels the jobs specified by a list of job ids
2616	Initialize the boto client .
2617	Read the state file if it exists .
2618	Save information that must persist to a file .
2619	Create a session .
2620	Create and configure VPC
2621	Create and configure a new security group .
2622	Start an instance in the VPC in the first available subnet .
2623	Shut down a list of instances if provided .
2624	Get states of all instances on EC2 which were started by this file .
2625	Submit the command onto a freshly instantiated AWS EC2 instance .
2626	Cancel the jobs specified by a list of job ids .
2627	Print human readable summary of current AWS state to log and to console .
2628	Teardown the EC2 infastructure .
2629	Scale out the existing resources .
2630	Scale in resources
2631	Update the resource dictionary with job statuses .
2632	Scales out the number of active workers by 1 .
2633	Scale in the number of active blocks by the specified number .
2634	Returns the status of the executor via probing the execution providers .
2635	Callback from a parent future to update the AppFuture .
2636	Add a callback to the parent to update the state .
2637	Callback from executor future to update the parent .
2638	The submit method takes the command string to be executed upon instantiation of a resource most often to start a pilot .
2639	Cancels the resources identified by the job_ids provided by the user .
2640	This is a function that mocks the Swift - T side .
2641	Shutdown method to kill the threads and workers .
2642	Submits work to the the outgoing_q .
2643	Return the resolved filepath on the side where it is called from .
2644	If the source files dirpath is the same as dest_dir a copy is not necessary and nothing is done . Else a copy is made .
2645	The App decorator function .
2646	Decorator function for making python apps .
2647	Decorator function for making bash apps .
2648	When a path has not been specified make the run directory .
2649	Internal Monitors the Parsl task s resources by pointing psutil to the task s pid and watching it and its children .
2650	Sends a message to the UDP receiver
2651	Internal Wrap the Parsl app with a function that will call the monitor function and point it at the correct pid when the task begins .
2652	Execute asynchronousely without waiting for exitcode
2653	Transport a local file to a directory on a remote machine
2654	Transport file on the remote side to a local directory
2655	Return true if the path refers to an existing directory .
2656	Create a directory on the remote side .
2657	Let the FlowControl system know that there is an event .
2658	Create the kubernetes deployment
2659	Compose the launch command and call the scale_out
2660	Starts the interchange process locally
2661	Puts a worker on hold preventing scheduling of additional tasks to it .
2662	Sends hold command to all managers which are in a specific block
2663	Scales out the number of blocks by blocks
2664	Return status of all blocks .
2665	Read into buf from the device . The number of bytes read will be the length of buf .
2666	Write the bytes from buffer to the device . Transmits a stop bit if stop is set .
2667	Write the bytes from out_buffer to the device then immediately reads into in_buffer from the device . The number of bytes read will be the length of in_buffer . Transmits a stop bit after the write if stop is set .
2668	Not accurate false due to spikes are observed
2669	Deletes old deployed versions of the function in AWS Lambda .
2670	Deploys a new function to AWS Lambda .
2671	Deploys a new function via AWS S3 .
2672	Uploads a new function to AWS S3 .
2673	Simulates a call to your function .
2674	Copies template files to a given directory .
2675	Builds the file bundle .
2676	Tranlate a string of the form module . function into a callable function .
2677	Install all packages listed to the target directory .
2678	Shortcut to insert the account_id and role into the iam string .
2679	Query STS for a users account_id
2680	Shortcut for getting an initialized instance of the boto3 client .
2681	Register and upload a function to AWS Lambda .
2682	Upload a function to AWS S3 .
2683	Check whether a function exists or not and return its config
2684	Download the data at a URL and cache it under the given name .
2685	Download and return a path to a sample from the FFmpeg test suite .
2686	Download and return a path to a sample that is curated by the PyAV developers .
2687	Get distutils - compatible extension extras for the given library .
2688	Update the dst with the src extending values where lists .
2689	Spawn a process and eat the stdio .
2690	Create a C compiler .
2691	Yield all . pyx and . pxd files in the given root .
2692	segment the raw text into paragraphs
2693	filter the quoted text out of a message
2694	fix hyphenation in the word list for a parsed sentence
2695	parse one document to prep for TextRank
2696	generate word pairs for the TextRank graph
2697	construct the TextRank graph from parsed paragraphs
2698	output the graph in Dot file format
2699	render the TextRank graph for visual formats
2700	run the TextRank algorithm
2701	leverage noun phrase chunking
2702	iterate through the noun phrases
2703	iterator for collecting the single - word keyphrases
2704	iterator for collecting the named - entities
2705	iterator for collecting the noun phrases
2706	create a MinHash digest
2707	determine distance for each sentence
2708	iterator for the most significant key phrases
2709	iterator for the most significant sentences up to a specified limit
2710	construct a sentence text with proper spacing
2711	iterator for JSON - per - line in a file pattern
2712	pretty print a JSON object
2713	Class method that will return a Snapshot object by ID .
2714	Fetch data about tag
2715	Create the tag .
2716	Private method to extract from a value the resources . It will check the type of object in the array provided and build the right structure for the API .
2717	Add the Tag to a Droplet .
2718	Remove the Tag from the Droplet .
2719	Class method that will return a Action object by ID .
2720	Wait until the action is marked as completed or with an error . It will return True in case of success otherwise False .
2721	Class method that will return a Droplet object by ID .
2722	Perform a droplet action .
2723	Take a snapshot!
2724	Change the kernel to a new one
2725	Check and return a list of SSH key IDs or fingerprints according to DigitalOcean s API . This method is used to check and create a droplet with the correct SSH keys .
2726	Create the droplet with object properties .
2727	Returns a list of Action objects This actions can be used to check the droplet s status
2728	Returns a specific Action by its ID .
2729	Get a list of kernels available
2730	Class method that will return a Domain object by ID .
2731	Create new doamin
2732	Returns a list of Record objects
2733	Class method that will return an Account object .
2734	Class method that will return a FloatingIP object by its IP .
2735	Load the FloatingIP object from DigitalOcean .
2736	Creates a FloatingIP and assigns it to a Droplet .
2737	Creates a FloatingIP in a region without assigning it to a specific Droplet .
2738	Assign a FloatingIP to a Droplet .
2739	Class method that will return a Firewall object by ID .
2740	Add tags to this Firewall .
2741	Remove tags from this Firewall .
2742	Class method that will return a SSHKey object by ID .
2743	Load the SSHKey object from DigitalOcean .
2744	This method will load a SSHKey object from DigitalOcean from a public_key . This method will avoid problems like uploading the same public_key twice .
2745	Create the SSH Key
2746	Edit the SSH Key
2747	This function returns a list of Region object .
2748	This function returns a list of Droplet object .
2749	Return a Droplet by its ID .
2750	This function returns a list of Size object .
2751	This function returns a list of Image object .
2752	This function returns a list of Domain object .
2753	Return a Domain by its domain_name
2754	This function returns a list of SSHKey object .
2755	Return a SSHKey object by its ID .
2756	This method returns a list of all tags .
2757	This function returns a list of FloatingIP objects .
2758	Returns a of FloatingIP object by its IP address .
2759	Returns a list of Load Balancer objects .
2760	Returns a Load Balancer object by its ID .
2761	Returns a Certificate object by its ID .
2762	This function returns a list of Certificate objects .
2763	Return a Snapshot by its ID .
2764	This method returns a list of all Snapshots .
2765	This method returns a list of all Snapshots based on Droplets .
2766	This method returns a list of all Snapshots based on volumes .
2767	This function returns a list of Volume objects .
2768	Returns a Volume object by its ID .
2769	This function returns a list of Firewall objects .
2770	Return a Firewall by its ID .
2771	Class method that will return a LoadBalancer object by its ID .
2772	Loads updated attributues for a LoadBalancer object .
2773	Creates a new LoadBalancer .
2774	Save the LoadBalancer
2775	Assign a LoadBalancer to a Droplet .
2776	Unassign a LoadBalancer .
2777	Adds new forwarding rules to a LoadBalancer .
2778	Removes existing forwarding rules from a LoadBalancer .
2779	Customized version of get_data to directly get the data without using the authentication method .
2780	Class method that will return a Record object by ID and the domain .
2781	Creates a new record for a domain .
2782	Destroy the record
2783	Save existing record
2784	Checks if any timeout for the requests to DigitalOcean is required . To set a timeout use the REQUEST_TIMEOUT_ENV_VAR environment variable .
2785	Class method that will return an Volume object by ID .
2786	Creates a Block Storage volume
2787	Attach a Volume to a Droplet .
2788	Detach a Volume to a Droplet .
2789	Create a snapshot of the volume .
2790	Retrieve the list of snapshots that have been created from a volume .
2791	Class method that will return a Certificate object by its ID .
2792	Load the Certificate object from DigitalOcean .
2793	Create the Certificate
2794	Class method that will return an Image object by ID or slug .
2795	Creates a new custom DigitalOcean Image from the Linux virtual machine image located at the provided url .
2796	Load slug .
2797	Transfer the image
2798	Rename an image
2799	Convert transposed convolution layer .
2800	Convert sum .
2801	Convert reduce_sum layer .
2802	Convert concatenation .
2803	Convert slice operation .
2804	Convert clip operation .
2805	Convert elementwise addition .
2806	Convert elementwise subtraction .
2807	Convert Linear .
2808	Convert matmul layer .
2809	Convert constant layer .
2810	Convert transpose layer .
2811	Convert reshape layer .
2812	Convert squeeze operation .
2813	Convert unsqueeze operation .
2814	Convert shape operation .
2815	Convert Average pooling .
2816	Convert 3d Max pooling .
2817	Convert convert_adaptive_max_pool2d layer .
2818	Convert padding layer .
2819	Convert batch normalization layer .
2820	Convert instance normalization layer .
2821	Convert dropout .
2822	Convert relu layer .
2823	Convert leaky relu layer .
2824	Convert sigmoid layer .
2825	Convert softmax layer .
2826	Convert tanh layer .
2827	Convert hardtanh layer .
2828	Convert selu layer .
2829	Convert upsample_bilinear2d layer .
2830	Convert nearest upsampling layer .
2831	A context manager to temporarily set the training mode of model to mode resetting it when we exit the with - block . A no - op if mode is None .
2832	Attempt to return a PWM instance for the platform which the code is being executed on . Currently supports only the Raspberry Pi using the RPi . GPIO library and Beaglebone Black using the Adafruit_BBIO library . Will throw an exception if a PWM instance can t be created for the current platform . The returned PWM object has the same interface as the RPi_PWM_Adapter and BBIO_PWM_Adapter classes .
2833	Stop PWM output on specified pin .
2834	Detect if running on the Raspberry Pi or Beaglebone Black and return the platform type . Will return RASPBERRY_PI BEAGLEBONE_BLACK or UNKNOWN .
2835	Half - duplex SPI write . If assert_ss is True the SS line will be asserted low the specified bytes will be clocked out the MOSI line and if deassert_ss is True the SS line be put back high .
2836	Half - duplex SPI read . If assert_ss is true the SS line will be asserted low the specified length of bytes will be clocked in the MISO line and if deassert_ss is true the SS line will be put back high . Bytes which are read will be returned as a bytearray object .
2837	Full - duplex SPI read and write . If assert_ss is true the SS line will be asserted low the specified bytes will be clocked out the MOSI line while bytes will also be read from the MISO line and if deassert_ss is true the SS line will be put back high . Bytes which are read will be returned as a bytearray object .
2838	Set the input or output mode for a specified pin . Mode should be either GPIO . OUT or GPIO . IN .
2839	Turn on the pull - up resistor for the specified pin if enabled is True otherwise turn off the pull - up resistor .
2840	Write the specified byte value to the GPIO registor . If no value specified the current buffered value will be written .
2841	Write the specified byte value to the IODIR registor . If no value specified the current buffered value will be written .
2842	Write the specified byte value to the GPPU registor . If no value specified the current buffered value will be written .
2843	Disable the FTDI drivers for the current platform . This is necessary because they will conflict with libftdi and accessing the FT232H . Note you can enable the FTDI drivers again by calling enable_FTDI_driver .
2844	Re - enable the FTDI drivers for the current platform .
2845	Return a list of all FT232H device serial numbers connected to the machine . You can use these serial numbers to open a specific FT232H device by passing it to the FT232H initializer s serial parameter .
2846	Close the FTDI device . Will be automatically called when the program ends .
2847	Helper function to call write_data on the provided FTDI device and verify it succeeds .
2848	Helper function to call the provided command on the FTDI device and verify the response matches the expected value .
2849	Helper function to continuously poll reads on the FTDI device until an expected number of bytes are returned . Will throw a timeout error if no data is received within the specified number of timeout seconds . Returns the read data as a string if successful otherwise raises an execption .
2850	Enable MPSSE mode on the FTDI device .
2851	Synchronize buffers with MPSSE by sending bad opcode and reading expected error response . Should be called once after enabling MPSSE .
2852	Set the clock speed of the MPSSE engine . Can be any value from 450hz to 30mhz and will pick that speed or the closest speed below it .
2853	Read both GPIO bus states and return a 16 bit value with their state . D0 - D7 are the lower 8 bits and C0 - C7 are the upper 8 bits .
2854	Return command to update the MPSSE GPIO state to the current direction and level .
2855	Set the input or output mode for a specified pin . Mode should be either OUT or IN .
2856	Half - duplex SPI write . The specified array of bytes will be clocked out the MOSI line .
2857	Half - duplex SPI read . The specified length of bytes will be clocked in the MISO line and returned as a bytearray object .
2858	Half - duplex SPI write then read . Send command and payload to slave as bytearray then consequently read out response from the slave for length in bytes . Designed for use with NOR or NAND flash chips and possibly SD cards ... etc ... Read command is cut in half and performed twice in series to prevent single byte errors . Hardware limits per command are enforced before doing anything . Read length is an optional argument so that it can function similar to transfer but still half - duplex . For reading without writing one can send a blank array or skip that argument .
2859	Full - duplex SPI read and write . The specified array of bytes will be clocked out the MOSI line while simultaneously bytes will be read from the MISO line . Read bytes will be returned as a bytearray object .
2860	Put I2C lines into idle state .
2861	End I2C transaction and get response bytes including ACKs .
2862	Write the specified number of bytes to the chip .
2863	Attempt to detect if a device at this address is present on the I2C bus . Will send out the device s address for writing and verify an ACK is received . Returns true if the ACK is received and false if not .
2864	Read a signed byte from the specified register .
2865	Return an I2C device for the specified address and on the specified bus . If busnum isn t specified the default I2C bus for the platform will attempt to be detected .
2866	Write an 8 - bit value to the specified register .
2867	Read an unsigned byte from the specified register .
2868	Attempt to return a GPIO instance for the platform which the code is being executed on . Currently supports only the Raspberry Pi using the RPi . GPIO library and Beaglebone Black using the Adafruit_BBIO library . Will throw an exception if a GPIO instance can t be created for the current platform . The returned GPIO object is an instance of BaseGPIO .
2869	Set the input or output mode for a specified pin . Mode should be either OUTPUT or INPUT .
2870	Set the input or output mode for a specified pin . Mode should be either DIR_IN or DIR_OUT .
2871	Remove edge detection for a particular GPIO channel . Pin should be type IN .
2872	Returns a generator of Path s
2873	Trash a file in the appropriate trash directory . If the file belong to the same volume of the trash home directory it will be trashed in the home trash directory . Otherwise it will be trashed in one of the relevant volume trash directories .
2874	Returns the ProcessParser for the given process ID or name . It matches by name first .
2875	Add all filenames in the given list to the parser s set .
2876	Add the given lxml representation of the BPMN file to the parser s set .
2877	Assert that there is exactly one node in the give list and return it .
2878	Serializes str Attrib or PathAttrib objects .
2879	Serializes a list where the values are objects of type str Attrib or PathAttrib .
2880	Parse the event definition node and return an instance of Event
2881	Parse the messageEventDefinition node and return an instance of MessageEventDefinition
2882	Parse the timerEventDefinition node and return an instance of TimerEventDefinition
2883	Returns an etree HTML node with a document describing the process . This is only supported if the editor provided an SVG representation .
2884	Connects the event with the given callback . When the signal is emitted the callback is invoked .
2885	Returns the number of connected subscribers .
2886	Returns True if the event is connected to the given function .
2887	Called by the weak reference when its target dies . In other words we can assert that self . weak_subscribers is not None at this time .
2888	Disconnects the signal from the given function .
2889	Parse this node and all children returning the connected task spec .
2890	Create an instance of the task appropriately . A subclass can override this method to get extra information from the node .
2891	Connects this task to the indicating outgoing task with the details in the sequence flow . A subclass can override this method to get extra information from the node .
2892	Connect this task spec to the indicated child .
2893	Returns a list of the names of outgoing sequences . Some may be None .
2894	Connects a taskspec that is executed if the condition DOES match .
2895	Runs the task . Should not be called directly . Returns True if completed False otherwise .
2896	Returns True if the entire Workflow is completed False otherwise .
2897	Cancels all open tasks in the workflow .
2898	Returns the task with the given id .
2899	Returns all tasks whose spec has the given name .
2900	Returns a list of Task objects with the given state .
2901	Runs the task with the given id .
2902	Runs the next task . Returns True if completed False otherwise .
2903	Returns a weak reference to the given method or function . If the callback argument is not None it is called as soon as the referenced function is garbage deleted .
2904	Create a new workflow instance from the given spec and arguments .
2905	Adds a new child and assigns the given TaskSpec to it .
2906	Assigns a new thread id to the task .
2907	Returns True if parent is in the list of ancestors returns False otherwise .
2908	Returns the ancestor that has a task with the given task spec as a parent . If no such ancestor was found the root task is returned .
2909	Returns any descendants that have the given task spec assigned .
2910	Returns the ancestor that has the given task spec assigned . If no such ancestor was found the root task is returned .
2911	Returns the ancestor that has a task with the given name assigned . Returns None if no such ancestor was found .
2912	Marks the task as ready for execution .
2913	Returns a textual representation of this Task s state .
2914	Inherits the data from the parent .
2915	Cancels the item if it was not yet completed and removes any children that are LIKELY .
2916	Returns the subtree as a string for debugging .
2917	Parses args and evaluates any Attrib entries
2918	Parses kwargs and evaluates any Attrib entries
2919	Make sure an object is JSON - serializable Use this to return errors and other info that does not need to be deserialized or does not contain important app data . Best for returning error info and such
2920	Sends Celery asynchronous call and stores async call information for retrieval laster
2921	Abort celery task and retry it
2922	Clear celery task data
2923	Returns list of ancestor task specs based on inputs
2924	Updates the branch such that all possible future routes are added .
2925	Return True on success False otherwise .
2926	Creates the package writing the data out to the provided file - like object .
2927	Writes a local file in to the zip file and adds it to the manifest dictionary
2928	Writes data to the zip file and adds it to the manifest dictionary
2929	Write the manifest content to the zip file . It must be a predictable order .
2930	A subclass can override this method to provide additional parseing or validation . It should call the parent method first .
2931	This is the Signavio specific editor hook for pre - parsing and validation .
2932	Adds the SVG files to the archive for this BPMN file .
2933	Writes the metadata . ini file to the archive .
2934	Utility method to merge an option and config with the option taking precedence
2935	Parses the specified child task node and returns the task spec . This can be called by a TaskParser instance that is owned by this ProcessParser .
2936	Reads the pre - assign or post - assign tag from the given node .
2937	Reads a data or define tag from the given node .
2938	Reads a list of assignments from the given node .
2939	Reads the logical tag from the given node returns a Condition object .
2940	Reads the conditional statement from the given node .
2941	Reads the workflow from the given XML structure and returns a WorkflowSpec instance .
2942	Called by a task spec when it was added into the workflow .
2943	Checks integrity of workflow and reports any problems with it .
2944	Indicate to the workflow that a message has been received . The message will be processed by any waiting Intermediate or Boundary Message Events that are waiting for the message .
2945	Refresh the state of all WAITING tasks . This will for example update Catching Timer Events whose waiting time has passed .
2946	Returns a list of User Tasks that are READY for user action
2947	Deserializes the trigger using the provided serializer .
2948	Evaluate the given expression within the context of the given task and return the result .
2949	Execute the script within the context of the specified task
2950	Checks whether the preconditions for going to READY state are met . Returns True if the threshold was reached False otherwise . Also returns the list of tasks that yet need to be completed .
2951	May be called to fire the Join before the incoming branches are completed .
2952	Connects the task spec that is executed if no other condition matches .
2953	Try to find the container ID with the specified name
2954	Initialize a new state file with the given contents . This function fails in case the state file already exists .
2955	Update the current state file with the specified contents
2956	Try to load a blockade state file in the current directory
2957	Generate a new blockade ID based on the CWD
2958	Make sure the state directory exists
2959	Try to delete the state . yml file and the folder . blockade
2960	Convert blockade ID and container information into a state dictionary object .
2961	Write the given state information into a file
2962	Validate the partitions of containers . If there are any containers not in any partition place them in an new partition .
2963	Get a map of blockade chains IDs - > list of IPs targeted at them
2964	Insert a new rule in the chain
2965	Start the timer waiting for pain
2966	Start the blockade event
2967	Stop chaos when there is no current blockade operation
2968	End the blockade event and return to a steady state
2969	Stop chaos while there is a blockade event in progress
2970	Delete all state associated with the chaos session
2971	Sort a dictionary or list of containers into dependency order
2972	Convert a dictionary of configuration values into a sequence of BlockadeContainerConfig instances
2973	Instantiate a BlockadeConfig instance based on a given dictionary of configuration values
2974	Start the containers and link them together
2975	Destroy all containers and restore networks
2976	Print status of containers and networks
2977	Kill some or all containers
2978	Partition the network between containers
2979	Restore full networking between containers
2980	Fetch the logs of a container
2981	Start the Blockade REST API
2982	Add one or more existing Docker containers to a Blockade group
2983	Get the event log for a given blockade
2984	Performs the actual evaluation of Flas - CORS options and actually modifies the response object .
2985	Safely attempts to match a pattern or string to a request origin .
2986	Compute CORS options for an application by combining the DEFAULT_OPTIONS the app s configuration - specified options and any dictionaries passed . The last specified option wins .
2987	Returns the dictionary of CORS specific app configurations .
2988	Wraps scalars or string types as a list or returns the iterable instance .
2989	A helper method to serialize and processes the options dictionary .
2990	This function is the decorator which is used to wrap a Flask route with . In the simplest case simply use the default parameters to allow all origins in what is the most permissive configuration . If this method modifies state or performs authentication which may be brute - forced you should add some degree of protection such as Cross Site Forgery Request protection .
2991	This call returns an array of symbols that IEX Cloud supports for API calls .
2992	This call returns an array of mutual fund symbols that IEX Cloud supports for API calls .
2993	This call returns an array of OTC symbols that IEX Cloud supports for API calls .
2994	for backwards compat accepting token and version but ignoring
2995	for iex cloud
2996	News about market
2997	Returns the official open and close for whole market .
2998	This returns previous day adjusted price data for whole market
2999	This returns an array of each sector and performance for the current trading day . Performance is based on each sector ETF .
3000	Stock split history
3001	This will return an array of quotes for all Cryptocurrencies supported by the IEX API . Each element is a standard quote object with four additional keys .
3002	Perform the App s actions as configured .
3003	Perform the App s actions as configured
3004	Initializes client id and client secret based on the settings .
3005	This configures whether the credentials will be stored in the session or the Django ORM based on the settings . By default the credentials will be stored in the session unless GOOGLE_OAUTH2_STORAGE_MODEL is found in the settings . Usually the ORM storage is used to integrate credentials into an existing Django user system .
3006	Gets a Credentials storage object provided by the Django OAuth2 Helper object .
3007	Helper method to create a redirect response with URL params .
3008	Gets the authorized credentials for this flow if they exist .
3009	Returns True if there are valid credentials for the current user and required scopes .
3010	Returns the scopes associated with this object kept up to date for incremental auth .
3011	Retrieve stored credential .
3012	Write a credentials to the SQLAlchemy datastore .
3013	Delete credentials from the SQLAlchemy datastore .
3014	Utility function that creates JSON repr . of a credentials object .
3015	Helper for factory constructors from JSON keyfile .
3016	Factory constructor from JSON keyfile by name .
3017	Factory constructor from parsed JSON keyfile .
3018	Generate the assertion that will be used in the request .
3019	Deserialize a JSON - serialized instance .
3020	Create credentials that specify additional claims .
3021	Create a signed jwt .
3022	Determine if the current environment is Compute Engine .
3023	Detects if the code is running in the App Engine environment .
3024	Detect if the code is running in the Compute Engine environment .
3025	Saves a file with read - write permissions on for the owner .
3026	Save the provided GoogleCredentials to the well known file .
3027	Get the well known file produced by command gcloud auth login .
3028	Build the Application Default Credentials from file .
3029	Verifies a signed JWT id_token .
3030	Extract the JSON payload from a JWT .
3031	Parses response of an exchange token request .
3032	Exchanges an authorization code for an OAuth2Credentials object .
3033	Returns OAuth2Credentials from a clientsecrets file and an auth code .
3034	Configures redirect URI parameters for OAuth2WebServerFlow .
3035	Create a Flow from a clientsecrets file .
3036	Utility function that creates JSON repr . of a Credentials object .
3037	Utility class method to instantiate a Credentials subclass from JSON .
3038	Write a credential .
3039	Verify that the credentials are authorized for the given scopes .
3040	Instantiate a Credentials object from a JSON description of it .
3041	True if the credential is expired or invalid .
3042	Return the access token and its expiration information .
3043	Return the number of seconds until this token expires .
3044	Generate the body that will be used in the refresh request .
3045	Refreshes the access_token .
3046	Refresh the access_token using the refresh_token .
3047	Retrieves the list of authorized scopes from the OAuth2 provider .
3048	Attempts to get implicit credentials from local credential files .
3049	Gets credentials implicitly from the environment .
3050	Create a Credentials object by reading information from a file .
3051	Create a DeviceFlowInfo from a server response .
3052	Returns a URI to redirect to the provider .
3053	Returns a user code and the verification URL where to enter it
3054	Construct an RsaVerifier instance from a string .
3055	Construct an RsaSigner instance from a string .
3056	Creates the an empty file if it does not already exist .
3057	Load credentials from the given file handle .
3058	Writes credentials to a file .
3059	A helper method to get or create a backend with thread locking .
3060	Retrieves the current credentials from the store .
3061	A decorator to declare that only the first N arguments my be positional .
3062	Converts stringifed scope value to a list .
3063	Parses unique key - value parameters from urlencoded content .
3064	Updates a URI with new query parameters .
3065	Adds a query parameter to a url .
3066	Adds a user - agent to the headers .
3067	Forces header keys and values to be strings i . e not unicode .
3068	Prepares an HTTP object s request method for auth .
3069	Prepares an HTTP object s request method for JWT access .
3070	Make an HTTP request with an HTTP object and arguments .
3071	Retrieves the flow instance associated with a given CSRF token from the Flask session .
3072	Initialize this extension for the given app .
3073	Loads oauth2 configuration in order of priority .
3074	Flask view that starts the authorization flow .
3075	Flask view that handles the user s return from OAuth2 provider .
3076	The credentials for the current user or None if unavailable .
3077	Returns True if there are valid credentials for the current user .
3078	Returns the user s email address or None if there are no credentials .
3079	Fetch a resource from the metadata server .
3080	Fetch an oauth token for the
3081	Return the secret key for use for XSRF protection .
3082	Composes the value for the state parameter .
3083	Parse the value of the state parameter .
3084	Creates an OAuth2Decorator populated from a clientsecrets file .
3085	Get the email for the current service account .
3086	Determine whether the model of the instance is an NDB model .
3087	Retrieve entity from datastore .
3088	Delete entity from datastore .
3089	Retrieve Credential from datastore .
3090	Write a Credentials to the datastore .
3091	Delete Credential from datastore .
3092	Decorator that starts the OAuth 2 . 0 dance .
3093	Create the Flow object .
3094	Decorator that sets up for OAuth 2 . 0 dance but doesn t do it .
3095	Returns an authorized http instance .
3096	RequestHandler for the OAuth 2 . 0 redirect callback .
3097	Generates a URL - safe token for the given user action time tuple .
3098	Validates that the given token authorizes the user for the action .
3099	Validate parsed client secrets from a file .
3100	Loading of client_secrets JSON file optionally backed by a cache .
3101	Communicate with the Developer Shell server socket .
3102	Core code for a command - line application .
3103	Handle a GET request .
3104	Decorator to enable OAuth Credentials if authorized and setup the oauth object on the request object to provide helper functions to start the flow otherwise .
3105	Generates a code_verifier as described in section 4 . 1 of RFC 7636 .
3106	Creates a code_challenge as described in section 4 . 2 of RFC 7636 by taking the sha256 hash of the verifier and then urlsafe base64 - encoding it .
3107	Retrieves service account info for invalid credentials .
3108	Retrieve stored credential from the Django ORM .
3109	Write a Credentials to the Django datastore .
3110	Delete Credentials from the datastore .
3111	Retrieve the credentials from the dictionary if they exist .
3112	Save the credentials to the dictionary .
3113	Validates a value as a proper Flow object .
3114	Converts our stored JSON string back to the desired type .
3115	Looks up the flow in session to recover information about requested scopes .
3116	View that handles the user s return from OAuth2 provider .
3117	View to start the OAuth2 Authorization flow .
3118	Create an empty file if necessary .
3119	Overrides models . Field method . This is used to convert the value from an instances of this class to bytes that can be inserted into the database .
3120	Convert the field value from the provided model to a string .
3121	Make a signed JWT .
3122	Verifies signed content using a list of certificates .
3123	Checks audience field from a JWT payload .
3124	Verifies the issued at and expiration from a JWT payload .
3125	Verify a JWT against public certs .
3126	Get information about a specific template .
3127	Update the name HTML or folder_id of an existing template .
3128	Delete a specific template .
3129	The MD5 hash of the lowercase version of the list member s email . Used as subscriber_hash
3130	Function that verifies that the string passed is a valid url .
3131	Given two dicts x and y merge them into a new dict as a shallow copy .
3132	Create a new list in your MailChimp account .
3133	Batch subscribe or unsubscribe list members .
3134	Update the settings for a specific list .
3135	Add a new line item to an existing order .
3136	Get links to all other resources available in the API .
3137	Retrieve OAuth2 - based credentials to associate API calls with your application .
3138	Get information about a specific authorized application
3139	Add new promo rule to a store
3140	Get information about a specific folder used to organize campaigns .
3141	Get information about an individual Automation workflow email .
3142	Upload a new image or file to the File Manager .
3143	Get information about a specific file in the File Manager .
3144	Update a file in the File Manager .
3145	Remove a specific file from the File Manager .
3146	Build path with endpoint and args
3147	Iterate over all pages for the given url . Feed in the result of self . _build_path as the url .
3148	Get information about subscribers who were removed from an Automation workflow .
3149	Create a new webhook for a specific list .
3150	Get information about a specific webhook .
3151	Update the settings for an existing webhook .
3152	Delete a specific webhook in a list .
3153	returns the first 10 segments for a specific list .
3154	returns the specified list segment .
3155	updates an existing list segment .
3156	removes an existing list segment from the list . This cannot be undone .
3157	adds a new segment to the list .
3158	Handle authenticated POST requests
3159	Get the metadata returned after authentication
3160	Set the content for a campaign .
3161	Get details about an individual conversation .
3162	Get information about members who have unsubscribed from a specific campaign .
3163	Manually add a subscriber to a workflow bypassing the default trigger settings . You can also use this endpoint to trigger a series of automated emails in an API 3 . 0 workflow type or add subscribers to an automated email queue that uses the API request delay type .
3164	Get information about an Automation email queue .
3165	Get information about a specific subscriber in an Automation email queue .
3166	Cancel a Regular or Plain - Text Campaign after you send before all of your recipients receive it . This feature is included with MailChimp Pro .
3167	Pause an RSS - Driven campaign .
3168	Replicate a campaign in saved or send status .
3169	Resume an RSS - Driven campaign .
3170	Send a MailChimp campaign . For RSS Campaigns the campaign will send according to its schedule . All other campaigns will send immediately .
3171	Add a new customer to a store .
3172	Get information about a specific customer .
3173	Add or update a customer .
3174	Add or update a product variant .
3175	Add feedback on a specific campaign .
3176	Update a specific feedback message for a campaign .
3177	Add a new merge field for a specific list .
3178	Get information about a specific merge field in a list .
3179	Get information about a specific batch webhook .
3180	Update a webhook that will fire whenever any batch request completes processing .
3181	Remove a batch webhook . Webhooks will no longer be sent to the given URL .
3182	Add a new store to your MailChimp account .
3183	Update a store .
3184	Add a new image to the product .
3185	Get information about a specific product image .
3186	Post a new message to a conversation .
3187	Add a new order to a store .
3188	Add a new note for a specific subscriber .
3189	Update tags for a specific subscriber .
3190	Update a specific segment in a list .
3191	Update a specific folder used to organize templates .
3192	Add a new member to the list .
3193	Update information for a specific list member .
3194	Add or update a list member .
3195	Delete a member from a list .
3196	Delete permanently a member from a list .
3197	Pause an automated email .
3198	Start an automated email .
3199	Removes an individual Automation workflow email .
3200	Create a new MailChimp campaign .
3201	Update some or all of the settings for a specific campaign .
3202	Remove a campaign from your MailChimp account .
3203	Delete a cart .
3204	Begin processing a batch operations request .
3205	Get a summary of batch requests that have been made .
3206	Get the status of a batch request .
3207	Stops a batch request from running . Since only one batch request is run at a time this can be used to cancel a long running request . The results of any completed operations will not be available after this call .
3208	Policies returned from boto3 are massive ugly and difficult to read . This method flattens and reformats the policy .
3209	Fully describes an ELB .
3210	Retrieve key from Cache .
3211	Insert item into cache .
3212	Update the cache stats . If no cache - result is specified we iniitialize the key . Otherwise we increment the correct cache - result .
3213	Get access details in cache .
3214	Get general stats for the cache .
3215	Gets the VPC Flow Logs for a VPC
3216	Gets the Classic Link details about a VPC
3217	Gets the VPC Subnets
3218	Gets the VPC Route Tables
3219	Gets the VPC Network ACLs
3220	User function to get the correct client .
3221	Public GCP client builder .
3222	Private GCP client builder .
3223	Google http_auth helper .
3224	Google build client helper .
3225	Call decorated function for each item in project list .
3226	Helper to get creds out of kwargs .
3227	Manipulate connection keywords . Modifieds keywords based on connection type .
3228	General aggregated list function for the GCE service .
3229	General list function for the GCE service .
3230	General list function for Google APIs .
3231	Retrieve detailed cache information .
3232	Get default User Agent String .
3233	NamePrefix = string
3234	Rule = string
3235	List buckets for a project .
3236	List objects in bucket .
3237	Calls _modify and either passes the inflection . camelize method or the inflection . underscore method .
3238	Retrieve the currently active policy version document for every managed policy that is attached to the role .
3239	Get s the IAM Group details .
3240	Fetches the specific IAM group inline - policy document .
3241	Fetch the base IAM Server Certificate .
3242	Used to obtain a boto3 client or resource connection . For cross account provide both account_number and assume_role .
3243	format the rule fields to match AWS to support auditor reuse will need to remap back if we want to orchestrate from our stored items
3244	just store the AWS formatted rules
3245	Get the inline policies for the group .
3246	Get a list of the managed policy names that are attached to the group .
3247	Gets a list of the usernames that are a part of this group .
3248	Fetch the base IAM Group .
3249	Fetch the base Managed Policy .
3250	obtain the shory geoserver version
3251	saves an object to the REST service gets the object s REST location and the data from the object then POSTS the request .
3252	Returns a list of stores in the catalog . If workspaces is specified will only return stores in those workspaces . If names is specified will only return stores that match . names can either be a comma delimited string or an array . Will return an empty list if no stores are found .
3253	Returns a single store object . Will return None if no store is found . Will raise an error if more than one store with the same name is found .
3254	Deletes a granule of an existing imagemosaic
3255	List granules of an imagemosaic
3256	Returns all coverages in a coverage store
3257	Publish a featuretype from data in an existing store
3258	Resources include feature stores coverage stores and WMS stores however does not include layer groups . names stores and workspaces can be provided as a comma delimited strings or as arrays and are used for filtering . Will always return an array .
3259	returns a single resource object . Will return None if no resource is found . Will raise an error if more than one resource with the same name is found .
3260	returns a single layergroup object . Will return None if no layergroup is found . Will raise an error if more than one layergroup with the same name is found .
3261	returns a single style object . Will return None if no style is found . Will raise an error if more than one style with the same name is found .
3262	Returns a list of workspaces in the catalog . If names is specified will only return workspaces that match . names can either be a comma delimited string or an array . Will return an empty list if no workspaces are found .
3263	returns a single workspace object . Will return None if no workspace is found . Will raise an error if more than one workspace with the same name is found .
3264	Extract a metadata link tuple from an xml node
3265	Create a URL from a list of path segments and an optional dict of query parameters .
3266	GeoServer s REST API uses ZIP archives as containers for file formats such as Shapefile and WorldImage which include several boxcar files alongside the main data . In such archives GeoServer assumes that all of the relevant files will have the same base name and appropriate extensions and live in the root of the ZIP archive . This method produces a zip file that matches these expectations based on a basename and a dict of extensions to paths or file - like objects . The client code is responsible for deleting the zip archive when it s done .
3267	Extract metadata Dimension Info from an xml node
3268	Extract metadata Dynamic Default Values from an xml node
3269	Extract metadata JDBC Virtual Tables from an xml node
3270	Extract metadata entries from an xml node
3271	if set get the value of resolution in milliseconds
3272	Read resource information into self . _cache for cached access .
3273	Convert any non - DAVError exception to HTTP_INTERNAL_ERROR .
3274	Return readable string .
3275	Change semantic of DELETE to remove resource tags .
3276	Change semantic of COPY to add resource tags .
3277	Change semantic of MOVE to change resource tags .
3278	Return _VirtualResource object for path .
3279	Add a provider to the provider_map routing table .
3280	Get the registered DAVProvider for a given path .
3281	Computes digest hash .
3282	Read a chunk of bytes from queue .
3283	Read bytes from an iterator .
3284	Handle an error gracefully . May be overridden .
3285	Called when PUT has finished writing .
3286	Handle a COPY request natively .
3287	Read log entries into a list of dictionaries .
3288	Return a dictionary containing all files under source control .
3289	Return HgResource object for path .
3290	Return preferred mapping for a resource mapping .
3291	Convert path to a URL that can be passed to XML responses .
3292	Set a property value or remove a property .
3293	Remove all associated dead properties .
3294	Return True if URI is locked .
3295	Set application location for this resource provider .
3296	Convert a refUrl to a path by stripping the share prefix .
3297	Return True if path maps to an existing collection resource .
3298	Convert XML string into etree . Element .
3299	Wrapper for etree . tostring that takes care of unsupported pretty_print option and prepends an encoding header .
3300	Wrapper for etree . SubElement that takes care of unsupported nsmap option .
3301	Serialize etree . Element .
3302	Convert path to absolute if not None .
3303	Read configuration file options into a dictionary .
3304	Run WsgiDAV using paste . httpserver if Paste is installed .
3305	Run WsgiDAV using gevent if gevent is installed .
3306	Run WsgiDAV using cherrypy . wsgiserver if CherryPy is installed .
3307	Run WsgiDAV using cheroot . server if Cheroot is installed .
3308	Run WsgiDAV using flup . server . fcgi if Flup is installed .
3309	Run WsgiDAV using wsgiref . simple_server on Python 2 . 5 + .
3310	Run WsgiDAV using ext_wsgiutils_server from the wsgidav package .
3311	Handle PROPPATCH request to set or remove a property .
3312	Handle MKCOL request to create a new collection .
3313	Get the data from a chunked transfer .
3314	Get the data from a non - chunked transfer .
3315	Return properties document for path .
3316	Resolve a relative url to the appropriate realm name .
3317	Computes digest hash A1 part .
3318	Return a lock dictionary for a token .
3319	Create a direct lock for a resource path .
3320	Modify an existing lock s timeout .
3321	Delete lock .
3322	Delete all entries .
3323	Set last modified time for destPath to timeStamp on epoch - format
3324	Return readable rep .
3325	Acquire lock and return lock_dict .
3326	Check for permissions and acquire a lock .
3327	Set new timeout for lock if existing and valid .
3328	Return lock_dict or None if not found or invalid .
3329	Acquire a read lock for the current thread waiting at most timeout seconds or doing a non - blocking check in case timeout is < = 0 .
3330	Acquire a write lock for the current thread waiting at most timeout seconds or doing a non - blocking check in case timeout is < = 0 .
3331	Release the currently held lock .
3332	Initialize base logger named wsgidav .
3333	Import a class and instantiate with custom args .
3334	Return a string as hex dump .
3335	Convert bytes into human - readable representation .
3336	Read 1 byte from wsgi . input if this has not been done yet .
3337	Append segments to URI .
3338	Return True if childUri is a child of parentUri .
3339	Return True if childUri is a child of parentUri or maps to the same resource .
3340	URL reconstruction according to PEP 333 .
3341	Read request body XML into an etree . Element .
3342	Start a WSGI response for a DAVError or status code .
3343	Return base64 encoded binarystring .
3344	Return - 1 if infinite else return numofsecs .
3345	Parse HTTP_IF header into a dictionary and lists and cache the result .
3346	Use the mimetypes module to lookup the type for an extension .
3347	Add objects to the group .
3348	Remove objects from the group .
3349	Perform geometric FBA to obtain a unique centered flux distribution .
3350	rebuild the _dict index
3351	Get a list of members using several different ways of indexing
3352	Query the list
3353	Replace an object by another with the same id .
3354	append object to end
3355	adds elements with id s not already in the model
3356	extend list by appending elements from the iterable
3357	extends without checking for uniqueness
3358	Determine the position in the list
3359	insert object before index
3360	Dictionary of elements as keys and their count in the metabolite as integer . When set the formula property is update accordingly
3361	The shadow price in the most recent solution .
3362	Return the model as a YAML document .
3363	Write the cobra model to a file in YAML format .
3364	Load a cobra model from a file in YAML format .
3365	Add pFBA objective
3366	Some common methods for processing a database of flux information into print - ready formats . Used in both model_summary and metabolite_summary .
3367	Coefficient for the reactions in a linear objective .
3368	Check whether a sympy expression references the correct variables .
3369	Set the model objective .
3370	Give a string representation for an optlang interface .
3371	Select a solver for a given optimization problem .
3372	Choose a solver given a solver name and model .
3373	Add variables and constraints to a Model s solver object .
3374	Remove variables and constraints from a Model s solver object .
3375	Add the absolute value of an expression to the model .
3376	Fix current objective as an additional constraint .
3377	Perform standard checks on a solver s status .
3378	Assert model solver status is optimal .
3379	Add a new objective and variables to ensure a feasible solution .
3380	Successively optimize separate targets in a specific order .
3381	Create a new numpy array that resides in shared memory .
3382	Sample a new feasible point from the point x in direction delta .
3383	Build the matrix representation of the sampling problem .
3384	Generate the warmup points for the sampler .
3385	Reproject a point into the feasibility region .
3386	Find an approximately random point in the flux cone .
3387	Identify rdeundant rows in a matrix that can be removed .
3388	Get the lower and upper bound distances . Negative is bad .
3389	Create a batch generator .
3390	Validate a set of samples for equality and inequality feasibility .
3391	Remove metabolites that are not involved in any reactions and returns pruned model
3392	Remove reactions with no assigned metabolites returns pruned model
3393	Undoes the effects of a call to delete_model_genes in place .
3394	identify reactions which will be disabled when the genes are knocked out
3395	remove genes entirely from the model
3396	Perform gapfilling on a model .
3397	Extend gapfilling model .
3398	Update the coefficients for the indicator variables in the objective .
3399	Update gapfilling model with switches and the indicator objective .
3400	Perform the gapfilling by iteratively solving the model updating the costs and recording the used reactions .
3401	Find the external compartment in the model .
3402	Check whether a reaction is an exchange reaction .
3403	Find specific boundary reactions .
3404	Return a valid zero cutoff value .
3405	Sample a single chain for OptGPSampler .
3406	convert compiled ast to gene_reaction_rule str
3407	evaluate compiled ast of gene_reaction_rule with knockouts
3408	parse gpr into AST
3409	Knockout gene by marking it as non - functional and setting all associated reactions bounds to zero .
3410	Removes the association
3411	r Add constraints and objective representing for MOMA .
3412	convert possible types to str float and bool
3413	update new_dict with optional attributes from cobra_object
3414	Convert model to a dict .
3415	Build a model from a dict .
3416	extract the compartment from the id string
3417	translate an array x into a MATLAB cell array
3418	Load a cobra model stored as a . mat file
3419	Save the cobra model as a . mat file .
3420	create a dict mapping model attributes to arrays
3421	send the model to a MATLAB workspace through pymatbridge
3422	Search for a context manager
3423	A decorator to simplify the context management of simple object attributes . Gets the value of the attribute prior to setting it and stores a function to set the value to the old value in the HistoryManager .
3424	Generate a solution representation of the current solver state .
3425	Return all metabolites compartments .
3426	Get or set the constraints on the model exchanges .
3427	Will add a list of metabolites to the model object and add new constraints accordingly .
3428	Remove a list of metabolites from the the object .
3429	Add a boundary reaction for a given metabolite .
3430	Add reactions to the model .
3431	Remove reactions from the model .
3432	Add groups to the model .
3433	Remove groups from the model .
3434	Populate attached solver with constraints and variables that model the provided reactions .
3435	Optimize model without creating a solution object .
3436	Optimize the model using flux balance analysis .
3437	Update all indexes and pointers in a model
3438	Merge two models to create a model with the reactions from both models .
3439	make a single string id SBML compliant
3440	makes all ids SBML compliant
3441	renames genes in a model from the rename_dict
3442	Return the model as a JSON document .
3443	Write the cobra model to a file in JSON format .
3444	Load a cobra model from a file in JSON format .
3445	Add a linear version of a minimal medium to the model solver .
3446	Add a mixed - integer version of a minimal medium to the model .
3447	Convert a solution to medium .
3448	Find the minimal growth medium for the model .
3449	Initialize a global model object for multiprocessing .
3450	Determine the minimum and maximum possible flux value for each reaction .
3451	Find reactions that cannot carry any flux .
3452	Return a set of essential genes .
3453	Return a set of essential reactions .
3454	adds SBO terms for demands and exchanges
3455	Calculate the mol mass of the compound
3456	Build the markdown release notes for Hugo .
3457	Identify the kind of release by comparing to existing ones .
3458	Identify the release type and create a new target file with TOML header .
3459	Provide a common interface for single or multiple knockouts .
3460	Knock out each reaction from a given list .
3461	Knock out each gene from a given list .
3462	Knock out each reaction pair from the combinations of two given lists .
3463	Knock out each gene pair from the combination of two given lists .
3464	Generate the id of reverse_variable from the reaction s id .
3465	The flux value in the most recent solution .
3466	Display gene_reaction_rule with names intead .
3467	All required enzymes for reaction are functional .
3468	Make sure all metabolites and genes that are associated with this reaction are aware of it .
3469	Copy a reaction
3470	Return the stoichiometric coefficient of a metabolite .
3471	Add metabolites and stoichiometric coefficients to the reaction . If the final coefficient for a metabolite is 0 then it is removed from the reaction .
3472	Subtract metabolites from a reaction .
3473	Generate a human readable reaction string
3474	Compute mass and charge balance for the reaction
3475	lists compartments the metabolites are in
3476	Associates a cobra . Gene object with a cobra . Reaction .
3477	Dissociates a cobra . Gene object with a cobra . Reaction .
3478	Builds reaction from reaction equation reaction_str using parser
3479	Clips a prefix from the beginning of a string if it exists .
3480	Clips gene prefix from id .
3481	Reads SBML model from given filename .
3482	Get SBMLDocument from given filename .
3483	Writes cobra model to filename .
3484	Creates bound in model for given reaction .
3485	Create parameter in SBML model .
3486	Get required attribute from SBase .
3487	Checks the libsbml return value and logs error messages .
3488	Creates dictionary of COBRA notes .
3489	Set SBase notes based on dictionary .
3490	Parses cobra annotations from a given SBase object .
3491	Set SBase annotations based on cobra annotations .
3492	String representation of SBMLError .
3493	Calculate the objective value conditioned on all combinations of fluxes for a set of chosen reactions
3494	Compute total output per input unit .
3495	Split metabolites into the atoms times their stoichiometric coefficients .
3496	Return the metabolite weight times its stoichiometric coefficient .
3497	Compute the total components consumption or production flux .
3498	Find all active carbon source reactions .
3499	Assesses production capacity .
3500	Assesses the ability of the model to provide sufficient precursors or absorb products for a reaction operating at or beyond the specified cutoff .
3501	Assesses the ability of the model to provide sufficient precursors for a reaction operating at or beyond the specified cutoff .
3502	Assesses whether the model has the capacity to absorb the products of a reaction at a given flux rate .
3503	Modify a model so all feasible flux distributions are loopless .
3504	Add constraints for CycleFreeFlux .
3505	Convert an existing solution to a loopless one .
3506	Plugin to get a loopless FVA solution from single FVA iteration .
3507	Return a stoichiometric array representation of the given model .
3508	Compute an approximate basis for the nullspace of A . The algorithm used by this function is based on the singular value decomposition of A .
3509	Create a matrix representation of the problem .
3510	r Add constraints and objective for ROOM .
3511	Sample valid flux distributions from a cobra model .
3512	Optimizely template tag .
3513	Clicky tracking template tag .
3514	Top Chartbeat template tag .
3515	Bottom Chartbeat template tag .
3516	Woopra tracking template tag .
3517	Spring Metrics tracking template tag .
3518	KISSinsights set - up template tag .
3519	Matomo tracking template tag .
3520	SnapEngage set - up template tag .
3521	Performable template tag .
3522	Coerce strings to hashable bytes .
3523	Return a SHA - 256 HMAC user_hash as expected by Intercom if configured .
3524	Intercom . io template tag .
3525	UserVoice tracking template tag .
3526	KISSinsights tracking template tag .
3527	Piwik tracking template tag .
3528	Return a constant from django . conf . settings . The setting argument is the constant name the value_re argument is a regular expression used to validate the setting value and the invalid_msg argument is used as exception message if the value is not valid .
3529	Get the user instance from the template context if possible .
3530	Get the identity of a logged in user from a template context .
3531	Return whether the visitor is coming from an internal IP address based on information from the template context .
3532	Mixpanel tracking template tag .
3533	GoSquared tracking template tag .
3534	Olark set - up template tag .
3535	Clickmap tracker template tag .
3536	Gaug . es template tag .
3537	Crazy Egg tracking template tag .
3538	Yandex . Metrica counter template tag .
3539	HubSpot tracking template tag .
3540	Manage the printing and in - place updating of a line of characters
3541	Apply a specified mutant to the source code
3542	Open a subprocess and stream its output without hard - blocking .
3543	Attempt to guess where the python source files to mutate are and yield their paths
3544	Compute an exit code for mutmut mutation testing
3545	Called when advertisement data is received .
3546	Called when GATT characteristics have been discovered .
3547	Called when the specified characteristic has changed its value .
3548	Called when the specified descriptor has changed its value .
3549	Return the RSSI signal strength in decibels .
3550	Return list of GATT characteristics that have been discovered for this service .
3551	Return list of GATT descriptors that have been discovered for this characteristic .
3552	Called when the power state changes .
3553	Start scanning for BLE devices .
3554	Stop scanning for BLE devices .
3555	Power on Bluetooth .
3556	Power off Bluetooth .
3557	Find the first available device that supports this service and return it or None if no device is found . Will wait for up to timeout_sec seconds to find the device .
3558	Wait until the specified device has discovered the expected services and characteristics for this service . Should be called once before other calls are made on the service . Returns true if the service has been discovered in the specified timeout or false if not discovered .
3559	Return the first child service found that has the specified UUID . Will return None if no service that matches is found .
3560	Return a list of GattService objects that have been discovered for this device .
3561	Return a list of UUIDs for services that are advertised by this device .
3562	Return the first child characteristic found that has the specified UUID . Will return None if no characteristic that matches is found .
3563	Return the first child descriptor found that has the specified UUID . Will return None if no descriptor that matches is found .
3564	Read the value of this characteristic .
3565	Write the specified value to this characteristic .
3566	Read the value of this descriptor .
3567	Start scanning for BLE devices with this adapter .
3568	Stop scanning for BLE devices with this adapter .
3569	Called when the BLE adapter found a device while scanning or has new advertisement data for a device .
3570	Called when a device is connected .
3571	Called when a device is disconnected .
3572	Called when services are discovered for a device .
3573	Called when characteristic value was read or updated .
3574	Called when descriptor value was read or updated .
3575	Called when a new RSSI value for the peripheral is available .
3576	Initialize the BLE provider . Must be called once before any other calls are made to the provider .
3577	Disconnect any connected devices that have any of the specified service UUIDs .
3578	Initialize bluez DBus communication . Must be called before any other calls are made!
3579	Clear any internally cached BLE device data . Necessary in some cases to prevent issues with stale device data getting cached by the OS .
3580	Disconnect any connected devices that have the specified list of service UUIDs . The default is an empty list which means all devices are disconnected .
3581	Return a list of all bluez DBus objects that implement the requested interface name and are under the specified path . The default is to search devices under the root of all bluez objects .
3582	Return a list of all bluez DBus objects from the provided list of paths .
3583	Print tree of all bluez objects useful for debugging .
3584	Return the first device that advertises the specified service UUIDs or has the specified name . Will wait up to timeout_sec seconds for the device to be found and if the timeout is zero then it will not wait at all and immediately return a result . When no device is found a value of None is returned .
3585	Retrieve a list of metadata objects associated with the specified list of CoreBluetooth objects . If an object cannot be found then an exception is thrown .
3586	Add the specified CoreBluetooth item with the associated metadata if it doesn t already exist . Returns the newly created or preexisting metadata item .
3587	Remove any metadata associated with the provided CoreBluetooth object .
3588	Convert Objective - C CBUUID type to native Python UUID type .
3589	Set the red green blue color of the bulb .
3590	Return an instance of the BLE provider for the current platform .
3591	Convert the byte array to a BigInteger
3592	Encrypt credentials using the google publickey with the RSA algorithm
3593	Return the default set of request headers which can later be expanded based on the request type
3594	Search the play store for an app .
3595	Get app details from a package name .
3596	Get several apps details from a list of package names .
3597	List all possible subcategories for a specific category . If also a subcategory is provided list apps from this category .
3598	Browse reviews for an application
3599	Download an already purchased app .
3600	Decorator function that injects a requests . Session instance into the decorated function s actual parameters if not given .
3601	Generates a secure authentication token .
3602	Method that gets the authenticated user . The returning user has the token email and the provider data .
3603	Method that constructs a full url with the given url and the snapshot name .
3604	Method that simply adjusts authentication credentials for the request . params is the querystring of the request . headers is the header of the request .
3605	Synchronous GET request .
3606	Asynchronous GET request with the process pool .
3607	Synchronous PUT request . There will be no returning output from the server because the request will be made with silent parameter . data must be a JSONable value .
3608	Asynchronous PUT request with the process pool .
3609	Asynchronous POST request with the process pool .
3610	Synchronous DELETE request . data must be a JSONable value .
3611	Asynchronous DELETE request with the process pool .
3612	Filter queryset based on keywords . Support for multiple - selected parent values .
3613	Returns filtered results followed by excluded results below .
3614	get possible choices for selection
3615	Gets the raw record .
3616	Return True if according to should_index the object should be indexed .
3617	Returns the settings of the index .
3618	Applies the settings to the index .
3619	Registers the given model with Algolia engine .
3620	Unregisters the given model with Algolia engine .
3621	Returns the adapter associated with the given model .
3622	Signal handler for when a registered model has been saved .
3623	Signal handler for when a registered model has been deleted .
3624	Decode geohash returning two strings with latitude and longitude containing only relevant digits and with trailing zeroes removed .
3625	Encode a position given in float arguments latitude longitude to a geohash which will have the character count precision .
3626	Pad a string to the target length in characters or return the original string if it s longer than the target length .
3627	Pad short rows to the length of the longest row to help render jagged CSV files
3628	Pad each cell to the size of the largest cell in its column .
3629	Create the column dividers for a table with given column widths .
3630	Add dividers and padding to a row of cells and return a string .
3631	Convert a 2D array of items into a Markdown table .
3632	Calculate base id and version from a resource id .
3633	Return card info .
3634	Prepare search request send and return parsed data as a dict .
3635	Make a bid .
3636	Return items in your club excluding consumables .
3637	Return staff in your club .
3638	Return all consumables from club .
3639	Return a squad .
3640	Return trade status .
3641	Return items in tradepile .
3642	Start auction . Returns trade_id .
3643	Quick sell .
3644	Remove cards from watchlist .
3645	Remove card from tradepile .
3646	Send to watchlist .
3647	Send card FROM CLUB to first free slot in sbs squad .
3648	Apply consumable on player .
3649	Return active messages .
3650	Convert a decimal number to hexadecimal
3651	Init and configure logger .
3652	Runs its worker method .
3653	Returns a NumPy array that represents the 2D pixel location which is defined by PFNC of the original image data .
3654	Starts image acquisition .
3655	Stops image acquisition .
3656	Adds a CTI file to work with to the CTI file list .
3657	Removes the specified CTI file from the CTI file list .
3658	Releases all external resources including the controlling device .
3659	Called internally during the parsing of the Zabransky database to add coefficients as they are read one per line
3660	Determines the index at which the coefficients for the current temperature are stored in coeff_sets .
3661	r Method to calculate heat capacity of a liquid at temperature T with a given method .
3662	r Method to calculate the integral of a property with respect to temperature using a specified method . Implements the analytical integrals of all available methods except for tabular data the case of multiple coefficient sets needed to encompass the temperature range of any of the ZABRANSKY methods and the CSP methods using the vapor phase properties .
3663	r Method to calculate the integral of a property over temperature with respect to temperature using a specified method . Implements the analytical integrals of all available methods except for tabular data the case of multiple coefficient sets needed to encompass the temperature range of any of the ZABRANSKY methods and the CSP methods using the vapor phase properties .
3664	r Method to calculate heat capacity of a solid at temperature T with a given method .
3665	r Method to calculate heat capacity of a liquid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3666	r Method to calculate heat capacity of a solid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3667	r Method to calculate heat capacity of a gas mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3668	r Calculates the equilibrium K - value assuming Raoult s law or an equation of state model or an activity coefficient model or a combined equation of state - activity model .
3669	r Calculates the objective function of the Rachford - Rice flash equation . This function should be called by a solver seeking a solution to a flash calculation . The unknown variable is V_over_F for which a solution must be between 0 and 1 .
3670	r Calculates the activity coefficients of each species in a mixture using the Wilson method given their mole fractions and dimensionless interaction parameters . Those are normally correlated with temperature and need to be calculated separately .
3671	r Determines the phase of a one - species chemical system according to basic rules using whatever information is available . Considers only the phases liquid solid and gas ; does not consider two - phase scenarios as should occurs between phase boundaries .
3672	Calculates bubble point for a given pressure
3673	r Interface for drawing a 2D image of the molecule . Requires an HTML5 browser and the libraries RDKit and IPython . An exception is raised if either of these libraries is absent .
3674	r Interface for drawing an interactive 3D view of the molecule . Requires an HTML5 browser and the libraries RDKit pymol3D and IPython . An exception is raised if all three of these libraries are not installed .
3675	r Charge of a chemical computed with RDKit from a chemical s SMILES . If RDKit is not available holds None .
3676	r RDKit object of the chemical without hydrogen . If RDKit is not available holds None .
3677	r RDKit object of the chemical with hydrogen . If RDKit is not available holds None .
3678	r Dictionary of legal status indicators for the chemical .
3679	r Dictionary of economic status indicators for the chemical .
3680	r Converts the a temperature reading made in any of the scales ITS - 90 ITS - 68 ITS - 48 ITS - 76 or ITS - 27 to any of the other scales . Not all temperature ranges can be converted to other ranges ; for instance ITS - 76 is purely for low temperatures and 5 K on it has no conversion to ITS - 90 or any other scale . Both a conversion to ITS - 90 and to the desired scale must be possible for the conversion to occur . The conversion uses cubic spline interpolation .
3681	r This function handles the retrieval of a chemical s Global Warming Potential relative to CO2 . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3682	r This function handles the retrieval of a chemical s octanol - water partition coefficient . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3683	r Method to calculate vapor pressure of a fluid at temperature T with a given method .
3684	First EOS - generic method ; should be called by all specific EOSs . For solving for T the EOS must provide the method solve_T . For all cases the EOS must provide a_alpha_and_derivatives . Calls set_from_PT once done .
3685	Counts the number of real volumes in Vs and determines what to do . If there is only one real volume the method set_properties_from_solution is called with it . If there are two real volumes set_properties_from_solution is called once with each volume . The phase is returned by set_properties_from_solution and the volumes is set to either V_l or V_g as appropriate .
3686	Generic method to calculate T from a specified P and V . Provides SciPy s newton solver and iterates to solve the general equation for P recalculating a_alpha as a function of temperature using a_alpha_and_derivatives each iteration .
3687	r Method to calculate a_alpha and its first and second derivatives for this EOS . Returns a_alpha da_alpha_dT and d2a_alpha_dT2 . See GCEOS . a_alpha_and_derivatives for more documentation . Uses the set values of Tc kappa and a . For use in solve_T returns only a_alpha if full is False .
3688	r Method to calculate T from a specified P and V for the PRSV EOS . Uses Tc a b kappa0 and kappa as well obtained from the class s namespace .
3689	r Method to calculate T from a specified P and V for the VDW EOS . Uses a and b obtained from the class s namespace .
3690	r Method to calculate T from a specified P and V for the RK EOS . Uses a and b obtained from the class s namespace .
3691	r Method to calculate T from a specified P and V for the API SRK EOS . Uses a b and Tc obtained from the class s namespace .
3692	r Method to calculate a_alpha and its first and second derivatives for this EOS . Returns a_alpha da_alpha_dT and d2a_alpha_dT2 . See GCEOS . a_alpha_and_derivatives for more documentation . Uses the set values of Tc omega and a . Because of its similarity for the TWUPR EOS this has been moved to an external TWU_a_alpha_common function . See it for further documentation .
3693	r This function handles the retrieval of a chemical s boiling point . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3694	r This function handles the retrieval of a chemical s melting point . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3695	r Calculates enthalpy of vaporization at arbitrary temperatures using the Clapeyron equation .
3696	Adjusts enthalpy of vaporization of enthalpy for another temperature for one temperature .
3697	This function handles the calculation of a chemical s enthalpy of fusion . Generally this is used by the chemical class as all parameters are passed . Calling the function directly works okay .
3698	This function handles the calculation of a chemical s enthalpy of sublimation . Generally this is used by the chemical class as all parameters are passed .
3699	This function handles the retrival of a mixtures s liquidus point .
3700	r This function handles the calculation of a chemical s solubility parameter . Calculation is a function of temperature but is not always presented as such . No lookup values are available ; either Hvapm Vml and T are provided or the calculation cannot be performed .
3701	r Returns the maximum solubility of a solute in a solvent .
3702	r Returns the freezing point depression caused by a solute in a solvent . Can use either the mole fraction of the solute or its molality and the molecular weight of the solvent . Assumes ideal system behavior .
3703	r Calculates saturation liquid volume using Rackett CSP method and critical properties .
3704	r Calculates saturation liquid volume using Yamada and Gunn CSP method and a chemical s critical properties and acentric factor .
3705	r Calculates saturation liquid density using the Townsend and Hales CSP method as modified from the original Riedel equation . Uses chemical critical volume and temperature as well as acentric factor
3706	r Calculate saturation liquid density using the COSTALD CSP method .
3707	r Calculate mixture liquid density using the Amgat mixing rule . Highly inacurate but easy to use . Assumes idea liquids with no excess volume . Average molecular weight should be used with it to obtain density .
3708	r Calculate mixture liquid density using the COSTALD CSP method .
3709	r Method to calculate low - pressure liquid molar volume at tempearture T with a given method .
3710	r Method to calculate pressure - dependent liquid molar volume at temperature T and pressure P with a given method .
3711	r Method to calculate molar volume of a liquid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3712	r Method to calculate pressure - dependent gas molar volume at temperature T and pressure P with a given method .
3713	r Method to calculate molar volume of a gas mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3714	r Method to calculate the molar volume of a solid at tempearture T with a given method .
3715	r Method to calculate molar volume of a solid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3716	r Looks up the legal status of a chemical according to either a specifc method or with all methods .
3717	Look up the economic status of a chemical .
3718	Method to compute all available properties with the Joback method ; returns their results as a dict . For the tempearture dependent values Cpig and mul both the coefficients and objects to perform calculations are returned .
3719	r This function handles the retrieval of a chemical s conductivity . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3720	r Calculate the ionic strength of a solution in one of two ways depending on the inputs only . For Pitzer and Bromley models mis should be molalities of each component . For eNRTL models mis should be mole fractions of each electrolyte in the solution . This will sum to be much less than 1 .
3721	Helper method for balance_ions for the proportional family of methods . See balance_ions for a description of the methods ; parameters are fairly obvious .
3722	r Method to calculate permittivity of a liquid at temperature T with a given method .
3723	r Method to calculate surface tension of a liquid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3724	Data is stored in the format InChI key \ tbool bool bool \ tsubgroup count ... \ tsubgroup count \ tsubgroup count ... where the bools refer to whether or not the original UNIFAC modified UNIFAC and PSRK group assignments were completed correctly . The subgroups and their count have an indefinite length .
3725	r This function handles the retrieval of a chemical s dipole moment . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3726	r This function handles the retrieval of a chemical s critical pressure . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3727	r This function handles the retrieval of a chemical s critical volume . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3728	r This function handles the retrieval of a chemical s critical compressibility . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3729	r Function for calculating a critical property of a substance from its other two critical properties . Calls functions Ihmels Meissner and Grigoras each of which use a general Critical surface type of equation . Limited accuracy is expected due to very limited theoretical backing .
3730	r Function for calculating a critical property of a substance from its other two critical properties but retrieving the actual other critical values for convenient calculation . Calls functions Ihmels Meissner and Grigoras each of which use a general Critical surface type of equation . Limited accuracy is expected due to very limited theoretical backing .
3731	Checks if a CAS number is valid . Returns False if the parser cannot parse the given string ..
3732	Looks up a string which may represent a mixture in the database of thermo to determine the key by which the composition of that mixture can be obtained in the dictionary _MixtureDict .
3733	Charge of the species as an integer . Computed as a property as most species do not have a charge and so storing it would be a waste of memory .
3734	Loads a file with newline - separated integers representing which chemical should be kept in memory ; ones not included are ignored .
3735	r Calculates a property of a chemical in either the liquid or gas phase as a function of temperature only . This means that the property is either at 1 atm or along the saturation curve .
3736	r This function handles the retrieval or calculation a chemical s Stockmayer parameter . Values are available from one source with lookup based on CASRNs or can be estimated from 7 CSP methods . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3737	r This function handles the retrieval or calculation a chemical s L - J molecular diameter . Values are available from one source with lookup based on CASRNs or can be estimated from 9 CSP methods . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3738	r This function calculates the parameter Tstar as needed in performing collision integral calculations .
3739	r This function handles the retrieval of a chemical s gas heat of formation . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3740	r This function handles the retrieval of a chemical s acentric factor omega or its calculation from correlations or directly through the definition of acentric factor if possible . Requires a known boiling point critical temperature and pressure for use of the correlations . Requires accurate vapor pressure data for direct calculation .
3741	r This function handles the calculation of a mixture s acentric factor . Calculation is based on the omegas provided for each pure component . Will automatically select a method to use if no Method is provided ; returns None if insufficient data is available .
3742	r This function handles the calculation of a chemical s Stiel Polar factor directly through the definition of Stiel - polar factor if possible . Requires Tc Pc acentric factor and a vapor pressure datum at Tr = 0 . 6 .
3743	This function is known to produce values 10 times too low . The author s data must have an error . I have adjusted it to fix this .
3744	r Round a number to the nearest whole number . If the number is exactly between two numbers round to the even whole number . Used by viscosity_index .
3745	r Method to calculate low - pressure liquid viscosity at tempearture T with a given method .
3746	r Method to calculate pressure - dependent liquid viscosity at temperature T and pressure P with a given method .
3747	r Method to calculate viscosity of a liquid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3748	r Method to calculate low - pressure gas viscosity at tempearture T with a given method .
3749	r Method to calculate pressure - dependent gas viscosity at temperature T and pressure P with a given method .
3750	r Method to calculate viscosity of a gas mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3751	This function handles the retrieval of Time - Weighted Average limits on worker exposure to dangerous chemicals .
3752	This function handles the retrieval of Short - term Exposure Limit on worker exposure to dangerous chemicals .
3753	This function handles the retrieval of Ceiling limits on worker exposure to dangerous chemicals .
3754	This function handles the retrieval of whether or not a chemical can be absorbed through the skin relevant to chemical safety calculations .
3755	r Looks up if a chemical is listed as a carcinogen or not according to either a specifc method or with all methods .
3756	r This function handles the retrieval or calculation of a chemical s autoifnition temperature . Lookup is based on CASRNs . No predictive methods are currently implemented . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3757	r This function handles the retrieval or calculation of a chemical s Lower Flammability Limit . Lookup is based on CASRNs . Two predictive methods are currently implemented . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3758	r This function handles the retrieval or calculation of a chemical s Upper Flammability Limit . Lookup is based on CASRNs . Two predictive methods are currently implemented . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3759	r Dictionary of atomic fractions for each atom in the mixture .
3760	r Dictionary of mass fractions for each atom in the mixture .
3761	r Interface for drawing a 2D image of all the molecules in the mixture . Requires an HTML5 browser and the libraries RDKit and IPython . An exception is raised if either of these libraries is absent .
3762	r This function handles the retrieval of a chemical s triple temperature . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3763	r This function handles the retrieval of a chemical s triple pressure . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3764	r Calculate Parachor for a pure species using its density in the liquid and gas phases surface tension and molecular weight .
3765	r Calculate a real fluid s Joule Thomson coefficient . The required derivative should be calculated with an equation of state and Cp is the real fluid versions . This can either be calculated with dV_dT directly or with beta if it is already known .
3766	r Calculates the compressibility factor of a gas given its pressure and pressure - form virial coefficients . Any number of coefficients is supported .
3767	r Converts a list of mole fractions to mass fractions . Requires molecular weights for all species .
3768	r Converts a list of mole fractions to volume fractions . Requires molar volumes for all species .
3769	r Checks inputs for suitability of use by a mixing rule which requires all inputs to be of the same length and non - None . A number of variations were attempted for this function ; this was found to be the quickest .
3770	r Simple function calculates a property based on weighted averages of properties . Weights could be mole fractions volume fractions mass fractions or anything else .
3771	r Simple function calculates a property based on weighted averages of logarithmic properties .
3772	r Determines which phase s property should be set as a default given the phase a chemical is and the property values of various phases . For the case of liquid - gas phase returns None . If the property is not available for the current phase or if the current phase is not known returns None .
3773	r Method used to select certain property methods as having a higher priority than were set by default . If forced is true then methods which were not specified are excluded from consideration .
3774	r Method to obtain a sorted list of methods which are valid at T according to test_method_validity . Considers either only user methods if forced is True or all methods . User methods are first tested according to their listed order and unless forced is True then all methods are tested and sorted by their order in ranked_methods .
3775	r Method to solve for the temperature at which a property is at a specified value . T_dependent_property is used to calculate the value of the property as a function of temperature ; if reset_method is True the best method is used at each temperature as the solver seeks a solution . This slows the solution moderately .
3776	r Method to obtain a derivative of a property with respect to temperature of a given order . Methods found valid by select_valid_methods are attempted until a method succeeds . If no methods are valid and succeed None is returned .
3777	r Method to calculate the integral of a property with respect to temperature using a specified method . Uses SciPy s quad function to perform the integral with no options . This method can be overwritten by subclasses who may perfer to add analytical methods for some or all methods as this is much faster .
3778	r Method to calculate the integral of a property with respect to temperature using a specified method . Methods found valid by select_valid_methods are attempted until a method succeeds . If no methods are valid and succeed None is returned . Calls calculate_integral internally to perform the actual calculation .
3779	r Method to calculate the integral of a property over temperature with respect to temperature using a specified method . Uses SciPy s quad function to perform the integral with no options . This method can be overwritten by subclasses who may perfer to add analytical methods for some or all methods as this is much faster .
3780	r Method to load all data and set all_methods based on the available data and properties . Demo function for testing only ; must be implemented according to the methods available for each individual method .
3781	r Method to calculate a property with a specified method with no validity checking or error handling . Demo function for testing only ; must be implemented according to the methods available for each individual method . Include the interpolation call here .
3782	r Method to set the pressure - dependent property methods desired for consideration by the user . Can be used to exclude certain methods which might have unacceptable accuracy .
3783	r Method to obtain a sorted list methods which are valid at T according to test_method_validity . Considers either only user methods if forced is True or all methods . User methods are first tested according to their listed order and unless forced is True then all methods are tested and sorted by their order in ranked_methods .
3784	r Method to calculate the property with sanity checking and without specifying a specific method . select_valid_methods_P is used to obtain a sorted list of methods to try . Methods are then tried in order until one succeeds . The methods are allowed to fail and their results are checked with test_property_validity . On success the used method is stored in the variable method_P .
3785	r Method to perform interpolation on a given tabular data set previously added via set_tabular_data_P . This method will create the interpolators the first time it is used on a property set and store them for quick future use .
3786	r Method to calculate a derivative of a temperature and pressure dependent property with respect to temperature at constant pressure of a given order . Methods found valid by select_valid_methods_P are attempted until a method succeeds . If no methods are valid and succeed None is returned .
3787	r Method to calculate a derivative of a temperature and pressure dependent property with respect to pressure at constant temperature of a given order . Methods found valid by select_valid_methods_P are attempted until a method succeeds . If no methods are valid and succeed None is returned .
3788	r Method to set the T P and composition dependent property methods desired for consideration by the user . Can be used to exclude certain methods which might have unacceptable accuracy .
3789	r Method to calculate a derivative of a mixture property with respect to temperature at constant pressure and composition of a given order . Methods found valid by select_valid_methods are attempted until a method succeeds . If no methods are valid and succeed None is returned .
3790	r Method to calculate a derivative of a mixture property with respect to pressure at constant temperature and composition of a given order . Methods found valid by select_valid_methods are attempted until a method succeeds . If no methods are valid and succeed None is returned .
3791	r This function handles the retrieval of a chemical s refractive index . Lookup is based on CASRNs . Will automatically select a data source to use if no Method is provided ; returns None if the data is not available .
3792	r Generic method to calculate T from a specified P and V . Provides SciPy s newton solver and iterates to solve the general equation for P recalculating a_alpha as a function of temperature using a_alpha_and_derivatives each iteration .
3793	r Sets a kappa and Tc for a specific component before the pure - species EOS s a_alpha_and_derivatives method is called . Both are called by GCEOSMIX . a_alpha_and_derivatives for every component .
3794	r Sets a m and Tc for a specific component before the pure - species EOS s a_alpha_and_derivatives method is called . Both are called by GCEOSMIX . a_alpha_and_derivatives for every component .
3795	r Sets a kappa0 kappa1 and Tc for a specific component before the pure - species EOS s a_alpha_and_derivatives method is called . Both are called by GCEOSMIX . a_alpha_and_derivatives for every component .
3796	r Sets a kappa kappa0 kappa1 kappa2 kappa3 and Tc for a specific component before the pure - species EOS s a_alpha_and_derivatives method is called . Both are called by GCEOSMIX . a_alpha_and_derivatives for every component .
3797	r Sets a omega and Tc for a specific component before the pure - species EOS s a_alpha_and_derivatives method is called . Both are called by GCEOSMIX . a_alpha_and_derivatives for every component .
3798	r Sets a S1 S2 and Tc for a specific component before the pure - species EOS s a_alpha_and_derivatives method is called . Both are called by GCEOSMIX . a_alpha_and_derivatives for every component .
3799	r Estimates the thermal conductivity of parafin liquid hydrocarbons . Fits their data well and is useful as only MW is required . X is the Molecular weight and Y the temperature .
3800	r Estimates the thermal conductivity of hydrocarbons gases at low P . Fits their data well and is useful as only MW is required . Y is the Molecular weight and X the temperature .
3801	r Method to calculate low - pressure liquid thermal conductivity at tempearture T with a given method .
3802	r Method to calculate pressure - dependent liquid thermal conductivity at temperature T and pressure P with a given method .
3803	r Method to calculate thermal conductivity of a liquid mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3804	r Method to calculate low - pressure gas thermal conductivity at tempearture T with a given method .
3805	r Method to calculate pressure - dependent gas thermal conductivity at temperature T and pressure P with a given method .
3806	r Method to calculate thermal conductivity of a gas mixture at temperature T pressure P mole fractions zs and weight fractions ws with a given method .
3807	r Improved formula parser which handles braces and their multipliers as well as rational element counts .
3808	r Basic formula parser to determine the charge from a formula - given that the charge is already specified as one element of the formula .
3809	r Basic formula serializer to construct a consistently - formatted formula . This is necessary for handling user - supplied formulas which are not always well formatted .
3810	Establish a connection to the chat server .
3811	Return request_header for use when constructing requests .
3812	Set this client as active .
3813	Upload an image that can be later attached to a chat message .
3814	Parse the image upload response to obtain status .
3815	Parse channel array and call the appropriate events .
3816	Add services to the channel .
3817	Send a Protocol Buffer formatted chat API request .
3818	Send a generic authenticated POST request .
3819	Invite users to join an existing group conversation .
3820	Create a new conversation .
3821	Leave a one - to - one conversation .
3822	Send an easter egg event to a conversation .
3823	Return conversation info and recent events .
3824	Return one or more user entities .
3825	Get URL to allow others to join a group conversation .
3826	Return info about the current user .
3827	Return suggested contacts .
3828	Return presence status for a list of users .
3829	Remove a participant from a group conversation .
3830	Rename a conversation .
3831	Return user entities based on a query .
3832	Send a chat message to a conversation .
3833	Enable or disable message history in a conversation .
3834	Send an email to invite a non - Google contact to Hangouts .
3835	Set the active client .
3836	Set the notification level of a conversation .
3837	Set focus to a conversation .
3838	Set whether group link sharing is enabled for a conversation .
3839	Set the presence status .
3840	Set the typing status of a conversation .
3841	List all events occurring at or after a timestamp .
3842	Return info on recent conversations and their events .
3843	Convert a microsecond timestamp to a UTC datetime instance .
3844	Convert hangouts_pb2 . ParticipantId to UserID .
3845	Convert UserID to hangouts_pb2 . ParticipantId .
3846	Return TypingStatusMessage from hangouts_pb2 . SetTypingNotification .
3847	Return WatermarkNotification from hangouts_pb2 . WatermarkNotification .
3848	Return authorization headers for API request .
3849	Make an HTTP request .
3850	Make an HTTP request using aiohttp directly .
3851	Search for entities by phone number email or gaia_id .
3852	Return EntityLookupSpec from phone number email address or gaia ID .
3853	Return a readable name for a conversation .
3854	Add foreground and background colours to a color scheme
3855	Sync all conversations by making paginated requests .
3856	Loaded events which are unread sorted oldest to newest .
3857	True if notification level for this conversation is quiet .
3858	Handle a watermark notification .
3859	Update the internal state of the conversation .
3860	Wrap hangouts_pb2 . Event in ConversationEvent subclass .
3861	Add an event to the conversation .
3862	Return default DeliveryMedium to use for sending messages .
3863	Return EventRequestHeader for conversation .
3864	Send a message to this conversation .
3865	Leave this conversation .
3866	Rename this conversation .
3867	Set the notification level of this conversation .
3868	Set your typing status in this conversation .
3869	Update the timestamp of the latest event which has been read .
3870	Get events from this conversation .
3871	Get the event following another event in this conversation .
3872	Get all the conversations .
3873	Leave a conversation .
3874	Add new conversation from hangouts_pb2 . Conversation
3875	Receive a StateUpdate and fan out to Conversations .
3876	Get a cached conversation or fetch a missing conversation .
3877	Receive a hangouts_pb2 . Event and fan out to Conversations .
3878	Receive Conversation delta and create or update the conversation .
3879	Receive SetTypingNotification and update the conversation .
3880	Receive WatermarkNotification and update the conversation .
3881	Sync conversation state and events that could have been missed .
3882	Upgrade name type of this user .
3883	Construct user from Entity message .
3884	Construct user from ConversationParticipantData message .
3885	Get a user by its ID .
3886	Add or upgrade User from ConversationParticipantData .
3887	Add an observer to this event .
3888	Remove an observer from this event .
3889	Fire this event calling all observers with the same arguments .
3890	Return start and end regex pattern sequences for simple Markdown tag .
3891	Return sequence of start and end regex patterns for simple HTML tag
3892	Run a hangups example coroutine .
3893	Return ArgumentParser with any extra arguments .
3894	Run the example coroutine .
3895	Print column headers and rows as a reStructuredText table .
3896	Generate doc for an enum .
3897	Generate docs for message and nested messages and enums .
3898	Compile proto file to descriptor set .
3899	Parse arguments and print generated documentation to stdout .
3900	Create a directory if it does not exist .
3901	Handle exceptions from the asyncio loop .
3902	Handle global keybindings .
3903	Show the overlay menu .
3904	Return an existing or new ConversationWidget .
3905	Add conversation tab if not present and optionally switch to it .
3906	Handle connecting for the first time .
3907	Open conversation tab for new messages & pass events to notifier .
3908	Put a coroutine in the queue to be executed .
3909	Consume coroutines from the queue by executing them .
3910	Rename conversation and call callback .
3911	Re - order the conversations when an event occurs .
3912	Show a temporary message .
3913	Make users stop typing when they send a message .
3914	Handle typing updates .
3915	Update status text .
3916	Convert UTC datetime into user interface string .
3917	Return MessageWidget representing a ConversationEvent .
3918	Handle updating and scrolling when a new event is added .
3919	Load more events for this conversation .
3920	Set the focus to position or raise IndexError .
3921	Return the menu widget associated with this widget .
3922	Handle marking messages as read and keeping client active .
3923	Update this conversation s tab title .
3924	Called when the user presses return on the send message widget .
3925	Update tab display .
3926	Handle keypresses for changing tabs .
3927	Add or modify a tab .
3928	Replace words with corresponding values in replacements dict .
3929	Authenticate with Google .
3930	Get authorization code using Google account credentials .
3931	Authenticate using OAuth refresh token .
3932	Authenticate using OAuth authorization code .
3933	Make OAuth token request .
3934	Use the access token to get session cookies .
3935	Get cached refresh token .
3936	Cache a refresh token ignoring any failure .
3937	Populate and submit a form on the current page .
3938	Parse response format for request for new channel SID .
3939	Yield chunks generated from received data .
3940	Listen for messages on the backwards channel .
3941	Creates a new channel for receiving push data .
3942	Open a long - polling request and receive arrays .
3943	Parse push data and trigger events .
3944	Serialize this segment to a Segment message .
3945	Decode optional or required field .
3946	Decode repeated field .
3947	Decode pblite to Protocol Buffer message .
3948	Generates a timezone aware datetime if the USE_TZ setting is enabled
3949	Populate the database using all the Entity classes previously added .
3950	Perform an ADC read with the provided mux gain data_rate and mode values . Returns the signed integer result of the read .
3951	Perform an ADC read with the provided mux gain data_rate and mode values and with the comparator enabled as specified . Returns the signed integer result of the read .
3952	Read a single ADC channel and return the ADC value as a signed integer result . Channel must be a value within 0 - 3 .
3953	Read the last conversion result when in continuous conversion mode . Will return a signed integer value .
3954	Removed all dusty containers with Exited in their status
3955	Removes all dangling images as well as all images referenced in a dusty spec ; forceful removal is not used
3956	Write the given config to disk as a Dusty sub - config in the Nginx includes directory . Then either start nginx or tell it to reload its config to pick up what we ve just written .
3957	Takes in a Compose spec from the Dusty Compose compiler writes it to the Compose spec folder so Compose can pick it up then does everything needed to make sure the Docker VM is up and running containers with the updated config .
3958	We require the list of all remote repo paths to be passed in to this because otherwise we would need to import the spec assembler in this module which would give us circular imports .
3959	Given a Dusty repo object clone the remote into Dusty s local repos directory if it does not already exist .
3960	Local repo updating suitable for asynchronous parallel execution . We still need to run ensure_local_repo synchronously because it does a bunch of non - threadsafe filesystem operations .
3961	For any active managed repos update the Dusty - managed copy to bring it up to date with the latest master .
3962	Daemon - side command to ensure we re running the latest versions of any managed repos including the specs repo before we do anything else in the up flow .
3963	This command will use the compilers to get compose specs will pass those specs to the systems that need them . Those systems will in turn launch the services needed to make the local environment go .
3964	Stop any currently running Docker containers associated with Dusty or associated with the provided apps_or_services . Does not remove the service s containers .
3965	Restart any containers associated with Dusty or associated with the provided app_or_service_names .
3966	A hack to allow us to rename paths in a case - insensitive filesystem like HFS .
3967	Return a dictionary containing the Compose spec required to run Dusty s nginx container used for host forwarding .
3968	This function returns a dictionary representation of a docker - compose . yml file based on assembled_specs from the spec_assembler and port_specs from the port_spec compiler
3969	Given the assembled specs and app_name this function will return all apps and services specified in conditional_links if they are specified in apps or services in assembled_specs . That means that some other part of the system has declared them as necessary so they should be linked to this app
3970	Given a spec for an app returns the value of the build field for docker - compose . If the path is relative it is expanded and added to the path of the app s repo .
3971	This function returns a dictionary of the docker - compose . yml specifications for one app
3972	This function returns a dictionary of the docker_compose specifications for one service . Currently this is just the Dusty service spec with an additional volume mount to support Dusty s cp functionality .
3973	Returns a list of formatted port mappings for an app
3974	This returns formatted volume specifications for a docker - compose app . We mount the app as well as any libs it needs so that local code is used in our container instead of whatever code was in the docker image .
3975	This code is copied from Docker Compose so that we re exactly compatible with their env_file option
3976	Expands specs . apps . depends . libs to include any indirectly required libs
3977	Expands specs . libs . depends . libs to include any indirectly required libs
3978	Returns all libs that are referenced in specs . apps . depends . libs
3979	Returns all services that are referenced in specs . apps . depends . services or in specs . bundles . services
3980	This function adds an assets key to the specs which is filled in with a dictionary of all assets defined by apps and libs in the specs
3981	This function removes any unnecessary bundles apps libs and services that aren t needed by the activated_bundles . It also expands inside specs . apps . depends . libs all libs that are needed indirectly by each app
3982	This function takes an app or library name and will return the corresponding repo for that app or library
3983	Given the spec of an app or library returns all repos that are guaranteed to live in the same container
3984	Given the name of an app or library returns all repos that are guaranteed to live in the same container
3985	Return a string of all host rules required to match the given spec . This string is wrapped in the Dusty hosts header and footer so it can be easily removed later .
3986	Given a port spec update the hosts file specified at constants . HOST_PATH to contain the port mappings specified in the spec . Any existing Dusty configurations are replaced .
3987	Moves the temporary binary to the location of the binary that s currently being run . Preserves owner group and permissions of original binary
3988	Context manager for setting up a TaskQueue . Upon leaving the context manager all tasks that were enqueued will be executed in parallel subject to pool_size concurrency constraints .
3989	This will output the nginx location config string for specific port spec
3990	This will output the nginx HTTP config string for specific port spec
3991	This will output the nginx stream config string for specific port spec
3992	This function will take in a port spec as specified by the port_spec compiler and will output an nginx web proxy config string . This string can then be written to a file and used running nginx
3993	Starting with Yosemite launchd was rearchitected and now only one launchd process runs for all users . This allows us to much more easily impersonate a user through launchd and extract the environment variables from their running processes .
3994	For OS X versions before Yosemite many launchd processes run simultaneously under different users and different permission models . The simpler asuser trick we use in Yosemite doesn t work since it gets routed to the wrong launchd . We instead need to find the running ssh - agent process and use its PID to navigate ourselves to the correct launchd .
3995	Will check the mac_username config value ; if it is present will load that user s SSH_AUTH_SOCK environment variable to the current environment . This allows git clones to behave the same for the daemon as they do for the user
3996	Recursively delete a path upon exiting this context manager . Supports targets that are files or directories .
3997	Copy a file from the source container to an intermediate staging area on the local filesystem then from that staging area to the destination container .
3998	Copy a path from the local filesystem to a path inside a Dusty container . The files on the local filesystem must be accessible by the user specified in mac_username .
3999	Copy a path from inside a Dusty container to a path on the local filesystem . The path on the local filesystem must be wrist - accessible by the user specified in mac_username .
4000	This function will create the VM directory where a repo will be mounted if it doesn t exist . If wait_for_server is set it will wait up to 10 seconds for the nfs server to start by retrying mounts that fail with Connection Refused .
4001	Given a dictionary containing the expanded dusty DAG specs this function will return a dictionary containing the port mappings needed by downstream methods . Currently this includes docker_compose virtualbox nginx and hosts_file .
4002	This dark magic is used to make yaml . safe_load encode all strings as utf - 8 where otherwise python unicode strings would be returned for non - ascii chars
4003	Returns the Docker registry host associated with a given image name .
4004	Reads the local Docker client config for the current user and returns all registries to which the user may be logged in . This is intended to be run client - side not by the daemon .
4005	Puts the client logger into streaming mode which sends unbuffered input through to the socket one character at a time . We also disable propagation so the root logger does not receive many one - byte emissions . This context handler was originally created for streaming Compose up s terminal output through to the client and should only be used for similarly complex circumstances .
4006	Runs a subprocess with a PTY attached via fork and exec . The output from the PTY is streamed through log_to_client . This should not be necessary for most subprocesses we built this to handle Compose up which only streams pull progress if it is attached to a TTY .
4007	This is used to compile the command that will be run when the docker container starts up . This command has to install any libs that the app uses run the always command and run the once command if the container is being launched for the first time
4008	Raise the open file handles permitted by the Dusty daemon process and its child processes . The number we choose here needs to be within the OS X default kernel hard limit which is 10240 .
4009	Start the daemon s HTTP server on a separate thread . This server is only used for servicing container status requests from Dusty s custom 502 page .
4010	Ripped off and slightly modified based on docker - py s kwargs_from_env utility function .
4011	Get a list of containers associated with the list of services . If no services are provided attempts to return all containers associated with Dusty .
4012	This function is used with dusty up . It will check all active repos to see if they are exported . If any are missing it will replace current dusty exports with exports that are needed for currently active repos and restart the nfs server
4013	Our exports file will be invalid if this folder doesn t exist and the NFS server will not run correctly .
4014	Given a hostname and port attempting to be accessed return a unique consumer ID for accessing logs from the referenced container .
4015	Given an existing consumer ID return any new lines from the log since the last time the consumer was consumed .
4016	This returns a list of formatted volume specs for an app . These mounts declared in the apps spec and mounts declared in all lib specs the app depends on
4017	Returns a list of the formatted volume specs for a lib
4018	Returns a list of the formatted volume mounts for all libs that an app uses
4019	We use VBox directly instead of Docker Machine because it shaves about 0 . 5 seconds off the runtime of this check .
4020	Initialize the Dusty VM if it does not already exist .
4021	Start the Dusty VM if it is not already running .
4022	Using VBoxManage is 0 . 5 seconds or so faster than Machine .
4023	Something in the VM chain either VirtualBox or Machine helpfully sets up localhost - to - VM forwarding on port 22 . We can inspect this rule to determine the port on localhost which gets forwarded to 22 in the VM .
4024	Returns the MAC address assigned to the host - only adapter using output from VBoxManage . Returned MAC address has no colons and is lower - cased .
4025	Given the rather - complex output from an ip addr show command on the VM parse the output to determine the IP address assigned to the interface with the given MAC .
4026	Determine the host - only IP of the Dusty VM through Virtualbox and SSH directly bypassing Docker Machine . We do this because Docker Machine is much slower taking about 600ms total . We are basically doing the same flow Docker Machine does in its own code .
4027	Make a local copy of the sqlite cookie database and return the new filename . This is necessary in case this database is still being written to while the user browses to avoid sqlite locking errors .
4028	Shortcut function to create a cookie
4029	Try to load cookies from all supported browsers and return combined cookiejar Optionally pass in a domain name to only load cookies from the specified domain
4030	Load sqlite cookies into a cookiejar
4031	Decrypt encoded cookies
4032	docstring for _randone
4033	Regular expression parser
4034	Patch isBase64 to prevent Base64 encoding of JSON content
4035	Wrapper for Zotero . _cleanup
4036	ensure that a SavedSearch object exists
4037	Error handler for HTTP requests
4038	It s always OK to include these headers
4039	Add a retrieved template to the cache for 304 checking accepts a dict and key name adds the retrieval time and adds both to self . templates as a new dict using the specified key
4040	Remove keys we added for internal use
4041	Retrieve Zotero items via the API Combine endpoint and request to access the specific resource Returns a JSON document
4042	Extract self first next last links from a request response
4043	Set request parameters . Will always add the user ID if it hasn t been specifically set by an API method
4044	Return the contents of My Publications
4045	Return the total number of items in the specified collection
4046	Return the total number of items for the specified tag
4047	General method for returning total counts
4048	Retrieve info about the permissions associated with the key associated to the given Zotero instance
4049	Get full - text content for an item
4050	Get the last modified version
4051	Get the file from an specific item
4052	Dump a file attachment to disk with optional filename and path
4053	Retrieve all collections and subcollections . Works for top - level collections or for a specific collection . Works at all collection depths .
4054	Get subcollections for a specific collection
4055	Retrieve all items in the library for a particular query This method will override the limit parameter if it s been set
4056	Format and return data from API calls which return Items
4057	Return a list of dicts which are dumped CSL JSON
4058	Return a list of strings formatted as HTML bibliography entries
4059	Return a list of strings formatted as HTML citation entries
4060	Get a template for a new item
4061	Create attachments accepts a list of one or more attachment template dicts and an optional parent Item ID . If this is specified attachments are created under this ID
4062	Show available operators for a given saved search condition
4063	Delete one or more saved searches by passing a list of one or more unique search keys
4064	Add one or more tags to a retrieved item then update it on the server Accepts a dict and one or more tags to add to it Returns the updated item from the server
4065	Retrieve item fields or creator types
4066	Get all available item fields
4067	Update an existing item Accepts one argument a dict containing Item data
4068	Update existing items Accepts one argument a list of dicts containing Item data
4069	Validate saved search conditions raising an error if any contain invalid operators
4070	File upload functionality
4071	Split a multiline string into a list excluding blank lines .
4072	Split a string with comma or space - separated elements into a list .
4073	Evaluate environment markers .
4074	Get configuration value .
4075	Set configuration value .
4076	Compatibility helper to use setup . cfg in setup . py .
4077	Convert Python files using lib3to2 .
4078	Write Python 2 shebang and add encoding cookie if needed .
4079	Get LanguageTool version .
4080	Get supported languages .
4081	Get LanguageTool directory .
4082	Set LanguageTool directory .
4083	Match text against enabled rules .
4084	Return newest compatible version .
4085	Get common directory in a zip file if any .
4086	Process events from proactor .
4087	Allow to run async code before application is closed .
4088	Make a Qt async slot run on asyncio loop .
4089	Class decorator to add a logger to a class .
4090	Selector has delivered us an event .
4091	Add more ASN . 1 MIB source repositories .
4092	Add more transformed MIBs repositories .
4093	Add more transformed MIBs repositories to borrow MIBs from .
4094	r Akaike Information Criterion
4095	r corrected Akaike information criterion
4096	r Kullback information criterion
4097	r approximate corrected Kullback information
4098	r Final prediction error criterion
4099	r Minimum Description Length
4100	r AIC order - selection using eigen values
4101	r MDL order - selection using eigen values
4102	Generate the Main examples gallery reStructuredText
4103	Setup sphinx - gallery sphinx extension
4104	r Correlation function
4105	Cross - correlation using numpy . correlate
4106	Finds the minimum eigenvalue of a Hermitian Toeplitz matrix
4107	r Generate the Morlet waveform
4108	r Evaluate a chirp signal at time t .
4109	r Generate the mexican hat wavelet
4110	Convert autocorrelation sequence to prediction polynomial
4111	convert reflection coefficients to prediction filter polynomial
4112	Convert reflection coefficients to autocorrelation sequence .
4113	Convert reflection coefficients to inverse sine parameters .
4114	Convert reflection coefficients to log area ratios .
4115	Convert log area ratios to reflection coefficients .
4116	Convert line spectral frequencies to prediction filter coefficients
4117	Prediction polynomial to line spectral frequencies .
4118	todo is it really useful ?
4119	Convert a one - sided PSD to a twosided PSD
4120	Convert a two - sided PSD to a one - sided PSD
4121	Convert a two - sided PSD to a center - dc PSD
4122	Convert a center - dc PSD to a twosided PSD
4123	Build a symmetric vector out of stricly positive lag vector and zero - lag
4124	r Return a noisy cosine at a given frequency .
4125	A simple test example with two close frequencies
4126	Simple utilities to retrieve data sets from
4127	Plot the data set using the sampling information to set the x - axis correctly .
4128	Read a WAV file and returns the data and sample rate
4129	Returns the autocovariance of signal s at all lags .
4130	Subtracts an estimate of the mean from signal x at axis
4131	Separate filename content between docstring and the rest
4132	Return list with source file separated into code and text blocks .
4133	Return reStructuredText code block from code string
4134	Returns md5sum of file
4135	Returns True if src_file has a different md5sum
4136	Test existence of image file and no change in md5sum of example
4137	Save all open matplotlib figures of the example code - block
4138	Scales an image with the same aspect ratio centered in an image with a given max_width and max_height if in_fname == out_fname the image can only be scaled down
4139	Save the thumbnail image
4140	Executes the code block of the example file
4141	This version is 10 times faster than arburg but the output rho is not correct .
4142	Solve Ax = B using numpy cholesky solver
4143	This function solve Ax = B directly without taking care of the input matrix properties .
4144	Solve linear system AX = B using CHOLESKY method .
4145	Simple periodogram but matrices accepted .
4146	r Simple periodogram wrapper of numpy . psd function .
4147	r Return Daniell s periodogram .
4148	Return the centered frequency range as a generator .
4149	Return the one - sided frequency range as a generator .
4150	a simple plotting routine to plot the PSD versus frequency .
4151	r Return the power contained in the PSD
4152	Returns a dictionary with the elements of a Jupyter notebook
4153	Converts the RST text from the examples docstrigs and comments into markdown text for the IPython notebooks
4154	Add a markdown cell to the notebook
4155	Saves the notebook to a file
4156	r Computes power spectral density given ARMA values .
4157	Autoregressive and moving average estimators .
4158	Moving average estimator .
4159	PSD estimate using correlogram method .
4160	Helper function to get data over http or from a local file
4161	Select first block delimited by start_tag and end_tag
4162	Parse a dictionary from the search index
4163	Parse a Sphinx search index
4164	Embed hyperlinks to documentation into example code
4165	Get a valid link False if not found
4166	Convert transfer function filter parameters to zero - pole - gain form
4167	Given two list or arrays pad with zeros the shortest array
4168	State - space representation to zero - pole - gain representation .
4169	r Return polynomial transfer function representation from zeros and poles
4170	Zero - pole - gain representation to state - space representation
4171	r Computes the equivalent noise bandwidth
4172	Independant Kaiser window
4173	A Window visualisation tool
4174	r Kaiser window
4175	r Blackman window
4176	r Gaussian window
4177	r Cosine tapering window also known as sine window .
4178	r Lanczos window also known as sinc window .
4179	r Bartlett - Hann window
4180	a common internal function to some window functions with 4 coeffs
4181	r Nuttall tapering window
4182	r Blackman Nuttall window
4183	r Blackman Harris window
4184	r Bohman tapering window
4185	r Flat - top tapering window
4186	Taylor tapering window
4187	r Riesz tapering window
4188	r Riemann tapering window
4189	r Poisson tapering window
4190	r Hann - Poisson tapering window
4191	r Cauchy tapering window
4192	Compute the window data frequency response
4193	Plot the window in the frequency domain
4194	Plot the window in the time domain
4195	Plotting method to plot both time and frequency domain results .
4196	solve the general toeplitz linear equations
4197	solve Tx = Z by a variation of Levinson algorithm where T is a complex hermitian toeplitz matrix
4198	Get the shortest possible module name
4199	Builds a codeobj summary by identifying and resolving used names
4200	Generates RST to place a thumbnail in a gallery
4201	Simple and fast implementation of the covariance AR estimate
4202	r Compute AR coefficients using Yule - Walker method
4203	r Levinson - Durbin recursion .
4204	computes the autocorrelation coefficients R based on the prediction polynomial A and the final prediction error Efinal using the stepdown algorithm .
4205	One step backward Levinson recursion
4206	LEVUP One step forward Levinson recursion
4207	r Simple and fast implementation of the covariance AR estimate
4208	Linear Predictor Coefficients .
4209	Return Pascal matrix
4210	SVD decomposition using numpy . linalg . svd
4211	Try to return a path to static the static files compatible all the way back to Django 1 . 2 . If anyone has a cleaner or better way to do this let me know!
4212	Main command line interface .
4213	Return password from pipe if not on TTY else False .
4214	Return a list of all implemented keyrings that can be constructed without parameters .
4215	The keyring name suitable for display .
4216	Gets the username and password for the service . Returns a Credential instance .
4217	Delete the password for the username of the service .
4218	Helper to read an environment variable
4219	If self . preferred_collection contains a D - Bus path the collection at that address is returned . Otherwise the default collection is returned .
4220	Discover all keyrings for chaining .
4221	Set current keyring backend .
4222	Configure the null keyring as the default .
4223	Load a keyring specified in the config file or infer the best available .
4224	Load the keyring class indicated by name .
4225	Load a keyring using the config file in the config root .
4226	Use freedesktop . org Base Dir Specfication to determine storage location .
4227	Prior versions of keyring would search for the config in XDG_DATA_HOME but should probably have been searching for config in XDG_CONFIG_HOME . If the config exists in the former but not in the latter raise a RuntimeError to force the change .
4228	Use freedesktop . org Base Dir Specfication to determine config location .
4229	Returns a callable that outputs the data . Defaults to print .
4230	Constructs the ArgumentParser for the CLI
4231	Runs the subcommand configured in args on the netgear session
4232	Scan for devices and print results .
4233	Try to autodetect the base URL of the router SOAP service .
4234	Returns the value of the subnode name of element e .
4235	Convert value to to_type returns default if fails .
4236	Login to the router .
4237	Return list of connected devices to the router with details .
4238	Return dict of traffic meter stats .
4239	End of a configuration session . Tells the router we re done managing admin functionality .
4240	Make an API request to the router .
4241	Wrapper function for IPv4 and IPv6 converters .
4242	Using the record length and appropriate start points seek to the country that corresponds to the converted IP address integer . Return offset of record .
4243	Seek and return the region information . Returns dict containing country_code and region_code .
4244	Populate location dict for converted IP . Returns dict with numerous location properties .
4245	Hostname lookup method supports both IPv4 and IPv6 .
4246	Returns the database ID for specified hostname . The id might be useful as array index . 0 is unknown .
4247	Returns the database ID for specified address . The ID might be useful as array index . 0 is unknown .
4248	Returns NetSpeed name from address .
4249	Returns NetSpeed name from hostname . Can be Unknown Dial - up Cable or Corporate .
4250	Returns full country name for specified IP address .
4251	Returns full country name for specified hostname .
4252	Returns Organization ISP or ASNum name for given IP address .
4253	Returns Organization ISP or ASNum name for given hostname .
4254	Returns time zone from country and region code .
4255	Compress a file only if needed .
4256	If the given filename should be compressed returns the compressed filename .
4257	Copy or symlink the file .
4258	Transform path to url converting backslashes to slashes if needed .
4259	Reads markdown file converts output and fetches title and meta - data for further processing .
4260	Loads the exif data of all images in an album from cache
4261	Restores the exif data cache from the cache file
4262	Stores the exif data of all images in the gallery
4263	Removes all filtered Media and subdirs from an Album
4264	Run sigal to process a directory .
4265	Run a simple web server .
4266	Write metadata keys to . md file .
4267	Image processor rotate and resize the image .
4268	Create a thumbnail image .
4269	Return a dict with the raw EXIF data .
4270	Return a dict with the raw IPTC data .
4271	Make a simplified version with common tags from raw EXIF data .
4272	Create output directories for thumbnails and original images .
4273	URL of the album relative to its parent .
4274	Path to the thumbnail of the album .
4275	Make a ZIP archive with all media files and return its path .
4276	Return the list of all sub - directories of path .
4277	Create the image gallery
4278	Process a list of images in a directory .
4279	Returns an image with reduced opacity .
4280	Adds a watermark to an image .
4281	Run the command to resize the video and remove the output file if the processing fails .
4282	Returns the dimensions of the video .
4283	Video processor .
4284	Create a thumbnail image for the video source based on ffmpeg .
4285	Generate the context dict for the given path .
4286	Generate the HTML page and save it .
4287	Return the path to the thumb .
4288	Read settings from a config file in the source_dir root .
4289	Generates and writes the media pages for all media in the gallery
4290	Generate the media page and save it
4291	Asks user for removal of project directory and eventually removes it
4292	Check the defined project name against keywords builtins and existing modules to avoid name clashing
4293	Checks and validate provided input
4294	Convert numeric and literal version information to numeric format
4295	Converts the current version to the next one for inserting into requirements in the < version format
4296	Parse config file .
4297	Dump args to config file .
4298	Convert config options to stdin args .
4299	Call django - admin to create the project structure
4300	Install aldryn boilerplate
4301	Run the migrate command to create the database schema
4302	Create admin user without user input
4303	Pass an argument list to SoX .
4304	Calls SoX help for a lists of audio formats available with the current install of SoX .
4305	Base call to SoXI .
4306	Pass an argument list to play .
4307	Validate that combine method can be performed with given files . Raises IOError if input file formats are incompatible .
4308	Check if files in input file list have the same sample rate
4309	Check if files in input file list have the same number of channels
4310	Set input formats given input_volumes .
4311	Builds input arguments by stitching input filepaths and input formats together .
4312	Check input_volumes contains a valid list of volumes .
4313	Determine if an input file is silent .
4314	Input file validation function . Checks that file exists and can be processed by SoX .
4315	Input file list validation function . Checks that object is a list and contains valid filepaths that can be processed by SoX .
4316	Output file validation function . Checks that file can be written and has a valid file extension . Throws a warning if the path already exists as it will be overwritten on build .
4317	Get a dictionary of file information
4318	Call sox s stat function .
4319	Parse the string output from sox s stat function
4320	Sets SoX s global arguments . Overwrites any previously set global arguments . If this function is not explicity called globals are set to this function s defaults .
4321	Apply a biquad IIR filter with the given coefficients .
4322	Change the number of channels in the audio signal . If decreasing the number of channels it mixes channels together if increasing the number of channels it duplicates .
4323	Comparable with compression this effect modifies an audio signal to make it sound louder .
4324	Converts output audio to the specified format .
4325	Apply a DC shift to the audio .
4326	Delay one or more audio channels such that they start at the given positions .
4327	Downsample the signal by an integer factor . Only the first out of each factor samples is retained the others are discarded .
4328	Add echoing to the audio .
4329	Apply a flanging effect to the audio .
4330	Apply amplification or attenuation to the audio signal .
4331	Loudness control . Similar to the gain effect but provides equalisation for the human auditory system .
4332	Calculate a profile of the audio for use in noise reduction . Running this command does not effect the Transformer effects chain . When this function is called the calculated noise profile file is saved to the profile_path .
4333	Reduce noise in the audio signal by profiling and filtering . This effect is moderately effective at removing consistent background noise such as hiss or hum .
4334	Normalize an audio file to a particular db level . This behaves identically to the gain effect with normalize = True .
4335	Out Of Phase Stereo effect . Mixes stereo to twin - mono where each mono channel contains the difference between the left and right stereo channels . This is sometimes known as the karaoke effect as it often has the effect of removing most or all of the vocals from a recording .
4336	Apply non - linear distortion .
4337	Add silence to the beginning or end of a file . Calling this with the default arguments has no effect .
4338	Apply a phasing effect to the audio .
4339	Pitch shift the audio without changing the tempo .
4340	Remix the channels of an audio file .
4341	Repeat the entire audio count times .
4342	Reverse the audio completely
4343	Removes silent regions from an audio file .
4344	Display time and frequency domain statistical information about the audio . Audio is passed unmodified through the SoX processing chain .
4345	Display time domain statistical information about the audio channels . Audio is passed unmodified through the SoX processing chain . Statistics are calculated and displayed for each audio channel
4346	Swap stereo channels . If the input is not stereo pairs of channels are swapped and a possible odd last channel passed through .
4347	Time stretch audio without changing pitch .
4348	Excerpt a clip from an audio file given the start timestamp and end timestamp of the clip within the file expressed in seconds . If the end timestamp is set to None or left unspecified it defaults to the duration of the audio file .
4349	Voice Activity Detector . Attempts to trim silence and quiet background sounds from the ends of recordings of speech . The algorithm currently uses a simple cepstral power measurement to detect voice so may be fooled by other things especially music .
4350	Apply an amplification or an attenuation to the audio signal .
4351	Lets a user join a room on a specific Namespace .
4352	Lets a user leave a room on a specific Namespace .
4353	Main SocketIO management function call from within your Framework of choice s view .
4354	Keep a reference of the callback on this socket .
4355	Fetch the callback for a given msgid if it exists otherwise return None
4356	Get multiple messages in case we re going through the various XHR - polling methods on which we can pack more than one message if the rate is high and encode the payload for the HTTP channel .
4357	This removes a Namespace object from the socket .
4358	Low - level interface to queue a packet on the wire ( encoded as wire protocol
4359	Spawn a new Greenlet attached to this Socket instance .
4360	This is the loop that takes messages from the queue for the server to consume decodes them and dispatches them .
4361	Watch out if we ve been disconnected in that case kill all the jobs .
4362	Start the heartbeat Greenlet to check connection health .
4363	This functions returns a list of jobs
4364	Encode an attribute dict into a byte string .
4365	Decode a rawstr packet arriving from the socket into a dict .
4366	This function dispatches event messages to the correct functions . You should override this method only if you are not satisfied with the automatic dispatching to on_ - prefixed methods . You could then implement your own dispatch . See the source code for inspiration .
4367	You should always use this function to call the methods as it checks if the user is allowed according to the ACLs .
4368	Use this to use the configured error_handler yield an error message to your application .
4369	Use send to send a simple string message .
4370	Use this to send a structured event with a name and arguments to the client .
4371	Spawn a new process attached to this Namespace .
4372	Return an existing or new client Socket .
4373	Handles post from the Add room form on the homepage and redirects to the new room .
4374	This will fetch the messages from the Socket s queue and if there are many messes pack multiple messages in one payload and return
4375	Encode list of messages . Expects messages to be unicode .
4376	Just quote out stuff before sending it out
4377	This is sent to all in the sockets in this particular Namespace including itself .
4378	Add a parent to this role and add role itself to the parent s children set . you should override this function if neccessary .
4379	Add allowing rules .
4380	Add denying rules .
4381	Exempt a view function from being checked permission
4382	Check whether role is allowed to access resource
4383	Check wherther role is denied to access resource
4384	This is a decorator function .
4385	Remove all binary files in the adslib directory .
4386	Raise a runtime error if on Win32 systems .
4387	Establish a new route in the AMS Router .
4388	Close the connection to the TwinCAT message router .
4389	Return the local AMS - address and the port number .
4390	Read the current ADS - state and the machine - state .
4391	Read the name and the version number of the ADS - server .
4392	Change the ADS state and the machine - state of the ADS - server .
4393	Send data synchronous to an ADS - device .
4394	Read data synchronous from an ADS - device .
4395	Read data synchronous from an ADS - device from data name .
4396	Send data synchronous to an ADS - device from data name .
4397	Add a device notification .
4398	Remove a device notification .
4399	Set Timeout .
4400	Generate a list of 2 month ranges for the range requested with an intersection between months . This is necessary because we can t search for ranges longer than 3 months and the period searched has to encompass the whole period of the mission .
4401	Fetches the list of deputies for the current term .
4402	Removes node from the hash ring and its replicas .
4403	Returns a list of values ordered identically to keys
4404	Return a new Lock object using key name that mimics the behavior of threading . Lock .
4405	Return a language - server diagnostic from a line of the Mypy error report ; optionally use the whole document to provide more context on it .
4406	Establishes a connection to the Lavalink server .
4407	Waits to receive a payload from the Lavalink server and processes it .
4408	Returns the voice channel the player is connected to .
4409	Connects to a voice channel .
4410	Disconnects from the voice channel if any .
4411	Stores custom user data .
4412	Retrieves the related value from the stored user data .
4413	Adds a track to the queue .
4414	Adds a track to beginning of the queue
4415	Adds a track at a specific index in the queue .
4416	Plays the first track in the queue if any or plays a track from the specified index in the queue .
4417	Add track and play it .
4418	Play the queue from a specific point . Disregards tracks before the index .
4419	Plays previous track if it exist if it doesn t raises a NoPreviousTrack error .
4420	Stops the player if playing .
4421	Sets the player s paused state .
4422	Seeks to a given position in the track .
4423	Makes the player play the next song from the queue if a song has finished or an issue occurred .
4424	Returns a player from the cache or creates one if it does not exist .
4425	Removes a player from the current players .
4426	Searches and plays a song from a given query .
4427	Seeks to a given position in a track .
4428	Shows some stats about the currently playing song .
4429	Shows the player s queue .
4430	Removes an item from the player s queue with the given index .
4431	A few checks to make sure the bot can join a voice channel .
4432	Unregisters a hook . For further explanation please have a look at register_hook .
4433	Dispatches an event to all registered hooks .
4434	Updates a player s state when a payload with opcode playerUpdate is received .
4435	Returns a Dictionary containing search results for a given query .
4436	Destroys the Lavalink client .
4437	Returns an optional AudioTrack .
4438	Plays the previous song .
4439	Plays immediately a song .
4440	Plays the queue from a specific point . Disregards tracks before the index .
4441	Lists the first 10 search results from a given query .
4442	Add suggestion terms to the AutoCompleter engine . Each suggestion has a score and string .
4443	Delete a string from the AutoCompleter index . Returns 1 if the string was found and deleted 0 otherwise
4444	Get a list of suggestions from the AutoCompleter for a given prefix
4445	Create the search index . The index must not already exist .
4446	Internal add_document used for both batch and single doc indexing
4447	Add a single document to the index .
4448	Delete a document from index Returns 1 if the document was deleted 0 if not
4449	Load a single document by id
4450	Get info an stats about the the current index including the number of documents memory consumption etc
4451	Search the index for a given query and return a result of documents
4452	Issue an aggregation query
4453	Set the alias for this reducer .
4454	Specify by which fields to group the aggregation .
4455	Specify one or more projection expressions to add to each result
4456	Sets the limit for the most recent group or query .
4457	Format the redis arguments for this query and return them
4458	Add a sortby field to the query
4459	Indicate that value is a numeric range
4460	Indicate that value is a geo region
4461	Bypass transformations .
4462	Transpose a chord label by some number of semitones
4463	Pack data into a jams sandbox .
4464	Load a jam and pack it with audio .
4465	Save a muda jam to disk
4466	Reconstruct a transformation or pipeline given a parameter dump .
4467	Serialize a transformation object or pipeline .
4468	Construct a muda transformation from a JSON encoded string .
4469	Pretty print the dictionary params
4470	Get the list of parameter names for the object
4471	Apply the transformation to audio and annotations .
4472	Iterative transformation generator
4473	A recursive transformation pipeline
4474	A serial transformation union
4475	Calculate the indices at which to sample a fragment of audio from a file .
4476	Slice a fragment of audio from a file .
4477	Normalize path .
4478	Extract storage name from file path .
4479	Determine if a file is empty or not .
4480	Returns either the md5 or sha256 hash of a file at file_path . md5 is the default hash_type as it is faster than sha256
4481	Return storage provider .
4482	Iterate over all storages for this projects .
4483	Store a new file at path in this storage .
4484	Copy data from file - like object fsrc to file - like object fdst
4485	Write contents of this file to a local file .
4486	Remove this file from the remote storage .
4487	Update the remote file from a local file .
4488	Iterate over all children of kind
4489	Decorate a CLI function that might require authentication .
4490	Initialize or edit an existing . osfcli . config file .
4491	Copy all files from all storages of a project .
4492	Fetch an individual file from a project .
4493	List all files from all storages for project .
4494	Upload a new file to an existing project .
4495	Remove a file from the project s storage .
4496	Login user for protected API calls .
4497	Fetch project project_id .
4498	Determines JSONAPI type for provided GUID
4499	Extract JSON from response if status_code matches .
4500	Follow the next link on paginated results .
4501	Make a new project using recursion and alias resolution .
4502	Clear description to default values
4503	Wrapper function for using SPI device drivers on systems like the Raspberry Pi and BeagleBone . This allows using any of the SPI drivers from a single entry point instead importing the driver for a specific LED type .
4504	Defer an edit to run on the EditQueue .
4505	Get all the edits in the queue then execute them .
4506	Scan and report all compatible serial devices on system .
4507	Returns details of either the first or specified device
4508	SHOULD BE PRIVATE METHOD
4509	Set device ID to new value .
4510	Return a named Palette or None if no such name exists .
4511	Return an image cropped on top bottom left or right .
4512	Return an image resized .
4513	Draw a circle in an RGB color with center x0 y0 and radius r .
4514	Draw a filled circle in an RGB color with center x0 y0 and radius r .
4515	Draw a between x0 y0 and x1 y1 in an RGB color .
4516	Draw line from point x0 y0 to x1 y1 using Bresenham s algorithm .
4517	Fill the matrix with the given RGB color
4518	Draw filled triangle with points x0 y0 - x1 y1 - x2 y2
4519	Set the base project for routing .
4520	Set pixel to RGB color tuple
4521	Get RGB color tuple of color at index pixel
4522	Create input output queues call function in a subprocess or a thread .
4523	Scale RGB tuple by level 0 - 256
4524	Save the description as a YML file . Prompt if no file given .
4525	Return a color interpolated from the Palette .
4526	Wait for the event run the task trigger the next task .
4527	Run a function catch report and discard exceptions
4528	Receive a message from the input source and perhaps raise an Exception .
4529	APA102 & SK9822 support on - chip brightness control allowing greater color depth .
4530	Comprehensively adds a new logging level to the logging module and the currently configured logging class .
4531	Construct a layout . SHOULD BE PRIVATE
4532	Return an independent copy of this layout with a completely separate color_list and no drivers .
4533	Set the internal colors starting at an optional offset .
4534	Fill the entire strip with RGB color tuple
4535	Fill entire strip by giving individual RGB values instead of tuple
4536	Fill the entire strip with HSV color tuple
4537	Helper for wheel_color that distributes colors over length and allows shifting position .
4538	Decorator for RestServer methods that take a single address
4539	Decorator for RestServer methods that take multiple addresses
4540	Advance a list of unique ordered elements in - place lexicographically increasing or backward by rightmost or leftmost digit .
4541	Override this method to get called right after self . index is set .
4542	For each row or column in cuts read a list of its colors apply the function to that list of colors then write it back to the layout .
4543	Compose a sequence of events into one event .
4544	These arguments are redundant with just using a project and we should encouraging that as you don t have to learn any dumb flags!
4545	Draws a circle at point x0 y0 with radius r of the specified RGB color
4546	Draws a filled circle at point x0 y0 with radius r and specified color
4547	Draw line from point x0 y0 to x 1 y1 . Will draw beyond matrix bounds .
4548	Draw solid rectangle with top - left corner at x y width w and height h
4549	Draw rectangle with top - left corner at x y width w height h and corner radius r .
4550	Draw solid rectangle with top - left corner at x y width w height h and corner radius r
4551	Draw triangle with points x0 y0 - x1 y1 - x2 y2
4552	Draw solid triangle with points x0 y0 - x1 y1 - x2 y2
4553	Use with caution!
4554	Calculates the coordinates of a point on a circle given the center point radius and angle .
4555	Generates a map of vector lengths from the center point to each coordinate .
4556	Return an iteration over all name color pairs in tables
4557	Return true if this string or integer tuple appears in tables
4558	Return a list of Segments that evenly split the strip .
4559	Return a new segment starting right after self in the same buffer .
4560	Stop the builder if it s running .
4561	Open an instance of simpixel in the browser
4562	Depth first recursion through a dictionary containing type constructors
4563	Tries to convert a value to a type constructor .
4564	Fill a portion of a strip from start to stop by step with a given item . If stop is not given it defaults to the length of the strip .
4565	Older animations in BPA and other areas use all sorts of different names for what we are now representing with palettes .
4566	Square of the euclidean distance
4567	Write a series of frames as a single animated GIF .
4568	Dumps data into a nicely formatted JSON string .
4569	Dumps data as nicely formatted JSON string to a file or file handle
4570	Loads not only JSON files but also YAML files ending in . yml .
4571	Adapt the setter in an animation s layout so that Strip animations can run on on Matrix Cube or Circle layout and Matrix or Cube animations can run on a Strip layout .
4572	Converts an HSV tuple to RGB . Intended for internal use . You should use hsv2rgb_spectrum or hsv2rgb_rainbow instead .
4573	Generates RGB values from HSV values in line with a typical light spectrum .
4574	Generates RGB values from HSV that have an even visual distribution . Be careful as this method is only have as fast as hsv2rgb_spectrum .
4575	Python default hsv to rgb conversion for when hue values in the range 0 - 359 are preferred . Due to requiring float math this method is slower than hsv2rgb_rainbow and hsv2rgb_spectrum .
4576	Order colors by hue saturation and value in that order .
4577	Get a new or existing server for this key .
4578	Set one section in a Project description
4579	Update sections in a Project description
4580	Toggle back and forth between a name and a tuple representation .
4581	Try to coerce the argument into a color - a 3 - tuple of numbers -
4582	Construct an animation set the runner and add in the two reserved fields name and data .
4583	Return an image in the given mode .
4584	Given a PIL . Image returns a ColorList of its pixels .
4585	Given an animated GIF return a list with a colorlist for each frame .
4586	Parse a string representing a time interval or duration into seconds or raise an exception
4587	Stop the Runner if it s running . Called as a classmethod stop the running instance if any .
4588	Display an image on a matrix .
4589	Every other row is indexed in reverse .
4590	Every other column is indexed in reverse .
4591	Coerce a list into a list of triplets .
4592	Return a Palette but don t take into account Pallete Names .
4593	Receives a message and either sets it immediately or puts it on the edit queue if there is one .
4594	Helper method to generate X Y coordinate maps for strips
4595	Make an object from a symbol .
4596	For the duration of this context manager put the PID for this process into pid_filename and then remove the file at the end .
4597	Return an integer index or None
4598	Returns a generator with the elements data taken by offset restricted by self . begin and self . end and padded on either end by pad to get back to the original length of data
4599	Cleans up all sorts of special cases that humans want when entering an animation from a yaml file .
4600	Give each animation a unique mutable layout so they can run independently .
4601	If a project has a Curses driver the section main in the section run must be bibliopixel . drivers . curses . Curses . main .
4602	Merge zero or more dictionaries representing projects with the default project dictionary and return the result
4603	Copy the instance and make sure not to use a reference
4604	Returns a generator for individual account transactions . The latest operation will be first . This call can be used in a for loop .
4605	Upgrade account to life time member
4606	Add an other account to the whitelist of this account
4607	Add an other account to the blacklist of this account
4608	Remove an other account from any list of this account
4609	Recover the public key from the the signature
4610	Use to derive a number that allows to easily recover the public key from the signature
4611	Returns a datetime of the block with the given block number .
4612	Returns the timestamp of the block with the given block number .
4613	Yields blocks starting from start .
4614	Returns the transaction as seen by the blockchain after being included into a block
4615	Yields account names between start and stop .
4616	Refresh the data from the API server
4617	Properly Format Time for permlinks
4618	Take a string representation of time from the blockchain and parse it into datetime object .
4619	Is the store unlocked so that I can decrypt the content?
4620	The password is used to encrypt this masterpassword . To decrypt the keys stored in the keys database one must use BIP38 decrypt the masterpassword from the configuration store with the user password and use the decrypted masterpassword to decrypt the BIP38 encrypted private keys from the keys storage!
4621	Decrypt the encrypted masterkey
4622	Generate a new random masterkey encrypt it with the password and store it in the store .
4623	Derive the checksum
4624	Obtain the encrypted masterkey
4625	Change the password that allows to decrypt the master key
4626	Decrypt the content according to BIP38
4627	Encrypt the content according to BIP38
4628	Derive private key from the brain key and the current sequence number
4629	Load an address provided the public key .
4630	Derive y point from x point
4631	Return the point for the public key
4632	Derive new public key from this key and a sha256 offset
4633	Derive uncompressed public key
4634	Derive new private key from this private key and an arbitrary sequence number
4635	Derive new private key from this key and a sha256 offset
4636	Derive private key using generate_from_seed method . Here the key itself serves as a seed and offset is expected to be a sha256 digest .
4637	Claim a balance from the genesis block
4638	This method will initialize SharedInstance . instance and return it . The purpose of this method is to have offer single default instance that can be reused by multiple classes .
4639	This allows to set a config that will be used when calling shared_blockchain_instance and allows to define the configuration without requiring to actually create an instance
4640	Find the next url in the list
4641	reset the failed connection counters
4642	Is the key key available?
4643	returns all items off the store as tuples
4644	Return the key if exists or a default value
4645	Delete a key from the store
4646	Check if the database table exists
4647	Create the new table in the SQLite database
4648	Returns an instance of base Operations for further processing
4649	Show the transaction as plain json
4650	Try to obtain the wif key from the wallet by telling which account and permission is supposed to sign the transaction
4651	Add a wif that should be used for signing of the transaction .
4652	Set asset to fee
4653	Auxiliary method to obtain the required fees for a set of operations . Requires a websocket connection to a witness node!
4654	Construct the actual transaction and store it in the class s dict store
4655	Verify the authority of the signed transaction
4656	Broadcast a transaction to the blockchain network
4657	Clear the transaction builder and start from scratch
4658	Returns the price instance so that the base asset is base .
4659	Returns the price instance so that the quote asset is quote .
4660	This method obtains the required private keys if present in the wallet finalizes the transaction signs it and broadacasts it
4661	Broadcast a transaction to the Blockchain
4662	Return the default proposal buffer
4663	Let s obtain a new txbuffer
4664	This is an example how to sort votes prior to using them in the Object
4665	The transaction id of this transaction
4666	Sign the transaction with the provided private keys .
4667	This is the refresh method that overloads the prototype in BlockchainObject .
4668	BIP0038 non - ec - multiply encryption . Returns BIP0038 encrypted privkey .
4669	BIP0038 non - ec - multiply decryption . Returns WIF privkey .
4670	This method is strictly only for in memory keys that are passed to Wallet with the keys argument
4671	Unlock the wallet database
4672	Create a new wallet database
4673	Add a private key to the wallet database
4674	Obtain the private key for a given public key
4675	Remove all keys associated with a given account
4676	Obtain owner Private Key for an account from the wallet database
4677	Obtain owner Memo Key for an account from the wallet database
4678	Obtain owner Active Key for an account from the wallet database
4679	Obtain account name from private key
4680	Obtain all accounts associated with a public key
4681	Obtain the first account name from public key
4682	Get key type
4683	Return all accounts installed in the wallet database
4684	Return all installed public keys
4685	Unlock the library internal wallet
4686	Encrypt a memo
4687	Decrypt a message
4688	Derive the share secret between priv and pub
4689	Initialize AES instance
4690	Encode a message with a shared secret between Alice and Bob
4691	Decode a message with a shared secret between Alice and Bob
4692	Verify IPMI environment
4693	Send IPMI command via ipmitool
4694	Find the given pattern in content
4695	Execute the given cmd
4696	Verify BOARD variables and construct exported variables
4697	Cat file and return content
4698	Do format for NVMe device
4699	Get chunk meta of NVMe device
4700	Get sizeof DescriptorTable
4701	Verify LNVM variables and construct exported variables
4702	Create LNVM device
4703	Compare of two Buffer item
4704	Copy stream to buffer
4705	Write buffer to file
4706	Read file to buffer
4707	230v power on
4708	230v power off
4709	TARGET power button
4710	Get chunk information
4711	Verify BLOCK variables and construct exported variables
4712	Execute a script or testcase
4713	Setup test - hooks
4714	Dump the given trun to file
4715	Print essential info on
4716	Create and initialize a testcase
4717	Triggers when exiting the given testsuite
4718	Triggers when entering the given testsuite
4719	Creates and initialized a TESTSUITE struct and site - effects such as creating output directories and forwarding initialization of testcases
4720	setup res_root and aux_root log info and run tcase - enter - hooks
4721	Triggers when exiting the given testrun
4722	Triggers when entering the given testrun
4723	Setup the testrunner data - structure embedding the parsed environment variables and command - line arguments and continues with setup for testplans testsuites and testcases
4724	CIJ Test Runner main entry point
4725	Get chunk meta table
4726	Get item of chunk meta table
4727	S20 unit to generic address
4728	Generic address to device address
4729	Run DMESG job
4730	Start DMESG job in thread
4731	Terminate DMESG job
4732	generate rater pic
4733	generate rate steady
4734	round the data
4735	Verify PCI variables and construct exported variables
4736	Print emphasized neutral the given txt message
4737	Print emphasized good the given txt message
4738	Print emphasized warning the given txt message
4739	Print emphasized error the given txt message
4740	Print emphasized based on rval
4741	Construct dict of paths from environment variables
4742	Define the list of exported variables with prefix with values from env
4743	Verify that the ENV defined NVMe device exists
4744	Get - log - page chunk information
4745	Get a chunk - descriptor for the first chunk in the given state .
4746	Kill all of FIO processes
4747	Translate dict parameters to string
4748	Import external dict to internal dict
4749	Get parameter of FIO
4750	Run FIO job in thread
4751	Run FIO job
4752	Extract hook names from the given entity
4753	Parse descriptions from the the given tcase
4754	Returns content of the given fpath with HTML annotations currently simply a conversion of ANSI color codes to HTML elements
4755	Returns content of the given fpath with HTML annotations for syntax highlighting
4756	Perform postprocessing of the given test run
4757	Replace all absolute paths to re - home it
4758	Main entry point
4759	Verify SSH variables and construct exported variables
4760	Wait util target connected
4761	Factory method for the assertion builder with value to be tested and optional description .
4762	Helper to read the contents of the given file or path into a string with the given encoding . Encoding defaults to utf - 8 other useful encodings are ascii and latin - 1 .
4763	Adds error message to soft errors list if within soft assertions context . Either just force test failure with the given message .
4764	Asserts that val is equal to other .
4765	Asserts that val is not equal to other .
4766	Asserts that the val is identical to other via is compare .
4767	Asserts that the val is not identical to other via is compare .
4768	Asserts that val is of the given type .
4769	Asserts that val is an instance of the given class .
4770	Asserts that val is the given length .
4771	Asserts that val contains the given item or items .
4772	Asserts that val does not contain the given item or items .
4773	Asserts that val contains only the given item or items .
4774	Asserts that val contains the given sequence of items in order .
4775	Asserts that val is iterable and contains duplicate items .
4776	Asserts that val is iterable and does not contain any duplicate items .
4777	Asserts that val is empty .
4778	Asserts that val is not empty .
4779	Asserts that val is equal to one of the given items .
4780	Asserts that val is numeric and is less than other .
4781	Asserts that val is numeric and is between low and high .
4782	Asserts that val is numeric and is close to other within tolerance .
4783	Asserts that val is case - insensitive equal to other .
4784	Asserts that val is string and contains the given item or items .
4785	Asserts that val is string or iterable and starts with prefix .
4786	Asserts that val is string or iterable and ends with suffix .
4787	Asserts that val is string and matches regex pattern .
4788	Asserts that val is non - empty string and all characters are alphabetic .
4789	Asserts that val is non - empty string and all characters are digits .
4790	Asserts that val is non - empty string and all characters are lowercase .
4791	Asserts that val is non - empty string and all characters are uppercase .
4792	Asserts that val is a unicode string .
4793	Asserts that val is iterable and a subset of the given superset or flattened superset if multiple supersets are given .
4794	Asserts that val is a dict and contains the given value or values .
4795	Asserts that val is a dict and does not contain the given value or values .
4796	Asserts that val is a dict and contains the given entry or entries .
4797	Asserts that val is a date and is before other date .
4798	Asserts that val is a path and that it exists .
4799	Asserts that val is an existing path to a file .
4800	Asserts that val is an existing path to a directory .
4801	Asserts that val is an existing path to a file and that file is named filename .
4802	Asserts that val is an existing path to a file and that file is a child of parent .
4803	Asserts that val is callable and that when called raises the given error .
4804	Asserts the val callable when invoked with the given args and kwargs raises the expected exception .
4805	Helper to raise an AssertionError and optionally prepend custom description .
4806	Helper to convert the given args and kwargs into a string .
4807	Give list of input tokenized words create dataframe of characters where first character of the word is tagged as 1 otherwise 0
4808	Generate CSV file for training and testing data
4809	Transform processed path into feature matrix and output array
4810	Given path to processed BEST dataset train CNN model for words beginning alongside with character label encoder and character type label encoder
4811	Evaluate model on splitted 10 percent testing set
4812	Tokenize given Thai text string
4813	Count the number of non - zero values for each feature in sparse X .
4814	Turn tokens into a tokens of n - grams
4815	Create feature array of character and surrounding characters
4816	Given input dataframe create feature dataframe of shifted characters
4817	Return all rows from a cursor as a dict .
4818	Parse a received datetime into a timezone - aware Python datetime object .
4819	Connect to the REST API authenticating with a JWT for the current user .
4820	Use this method decorator to ensure the JWT token is refreshed when needed .
4821	Return redirect to embargo error page if the given user is blocked .
4822	Query the Enrollment API for the course details of the given course_id .
4823	Sort the course mode dictionaries by slug according to the COURSE_MODE_SORT_ORDER constant .
4824	Query the Enrollment API for the specific course modes that are available for the given course_id .
4825	Query the Enrollment API to see whether a course run has a given course mode available .
4826	Call the enrollment API to enroll the user in the course specified by course_id .
4827	Query the enrollment API to get information about a single course enrollment .
4828	Query the enrollment API and determine if a learner is enrolled in a course run .
4829	Calls the third party auth api endpoint to get the mapping between usernames and remote ids .
4830	Retrieve the grade for the given username for the given course_id .
4831	Retrieve the certificate for the given username for the given course_id .
4832	Return a Course Discovery API client setup with authentication for the specified user .
4833	Traverse a paginated API response and extracts and concatenates results returned by API .
4834	Return specified course catalog .
4835	Return paginated response for all catalog courses .
4836	Return a paginated list of course catalogs including name and ID .
4837	Return the courses included in a single course catalog by ID .
4838	Return the course and course run metadata for the given course run ID .
4839	Return the details of a single course by id - not a course run id .
4840	Return single program by name or None if not found .
4841	Return single program by UUID or None if not found .
4842	Get a program type by its slug .
4843	Find common course modes for a set of course runs .
4844	Determine if the given course or course run ID is contained in the catalog with the given ID .
4845	Load data from API client .
4846	Return all content metadata contained in the catalogs associated with the EnterpriseCustomer .
4847	Loads a response from a call to one of the Enterprise endpoints .
4848	Return items that need to be created updated and deleted along with the current ContentMetadataItemTransmissions .
4849	Serialize content metadata items for a create transmission to the integrated channel .
4850	Transmit content metadata creation to integrated channel .
4851	Transmit content metadata update to integrated channel .
4852	Transmit content metadata deletion to integrated channel .
4853	Return the ContentMetadataItemTransmision models for previously transmitted content metadata items .
4854	Create ContentMetadataItemTransmision models for the given content metadata items .
4855	Update ContentMetadataItemTransmision models for the given content metadata items .
4856	Delete ContentMetadataItemTransmision models associated with the given content metadata items .
4857	Flag a method as deprecated .
4858	Ignore any emitted warnings from a function .
4859	View decorator for allowing authenticated user with valid enterprise UUID .
4860	View decorator which terminates stale TPA sessions .
4861	Verify that the username has a matching user and that the user has an associated EnterpriseCustomerUser .
4862	Save the model with the found EnterpriseCustomerUser .
4863	Serialize the EnterpriseCustomerCatalog object .
4864	Return the enterprise related django groups that this user is a part of .
4865	Verify that the username has a matching user .
4866	Save the EnterpriseCustomerUser .
4867	Return the updated course data dictionary .
4868	Return the updated course run data dictionary .
4869	Return the updated program data dictionary .
4870	This implements the same relevant logic as ListSerializer except that if one or more items fail validation processing for other items that did not fail will continue .
4871	This selectively calls the child create method based on whether or not validation failed for each payload .
4872	This selectively calls to_representation on each result that was processed by create .
4873	Perform the enrollment for existing enterprise customer users or create the pending objects for new users .
4874	Validates the lms_user_id if is given to see if there is an existing EnterpriseCustomerUser for it .
4875	Validates the tpa_user_id if is given to see if there is an existing EnterpriseCustomerUser for it .
4876	Validates the user_email if given to see if an existing EnterpriseCustomerUser exists for it .
4877	Validates that the course run id is part of the Enterprise Customer s catalog .
4878	Validate that at least one of the user identifier fields has been passed in .
4879	Update pagination links in course catalog data and return DRF Response .
4880	Create the role_based_access_control switch if it does not already exist .
4881	Delete the role_based_access_control switch .
4882	Create and activate the SAP_USE_ENTERPRISE_ENROLLMENT_PAGE switch if it does not already exist .
4883	Send a completion status call to SAP SuccessFactors using the client .
4884	Handle the case where the employee on SAPSF s side is marked as inactive .
4885	Modify throttling for service users .
4886	Update throttle scope so that service user throttle rates are applied .
4887	Get course mode s SKU discounted price after applying any entitlement available for this user .
4888	This method adds enterprise - specific metadata for each course .
4889	Update course metadata of the given course and return updated course .
4890	Update Marketing urls in course metadata and return updated course .
4891	Collect learner data for the EnterpriseCustomer where data sharing consent is granted .
4892	Generate a learner data transmission audit with fields properly filled in .
4893	Collect the learner completion data from the course certificate .
4894	Collect the learner completion data from the Grades API .
4895	Get enterprise user id from user object .
4896	Get enterprise SSO UID .
4897	Get course s duration as a timedelta .
4898	Remove content metadata items from the items_to_create items_to_update items_to_delete dicts .
4899	Parse and validate arguments for send_course_enrollments command .
4900	Send xAPI statements .
4901	Get course enrollments for all the learners of given enterprise customer .
4902	Django template tag that returns course information to display in a modal .
4903	Django template filter that returns an anchor with attributes useful for course modal selection .
4904	Populates the DataSharingConsent model with the enterprise application s consent data .
4905	Send a completion status payload to the Degreed Completion Status endpoint
4906	Delete a completion status previously sent to the Degreed Completion Status endpoint
4907	Synchronize content metadata using the Degreed course content API .
4908	Make a POST request using the session object to a Degreed endpoint .
4909	Make a DELETE request using the session object to a Degreed endpoint .
4910	Instantiate a new session object for use in connecting with Degreed
4911	Ensure that the wrapped API client s response brings us valid data . If not raise an error and log it .
4912	Return whether or not the specified content is available to the EnterpriseCustomer .
4913	Retrieve the list of courses contained within the catalog linked to this enterprise .
4914	Creates a course enrollment for an EnterpriseCustomerUser .
4915	Returns the list of enterprise customers the user has a specified group permission access to .
4916	Retrieve the list of entitlements available to this learner .
4917	Return whether or not the EnterpriseCustomerCatalog contains the specified content .
4918	Return the metadata for the specified course .
4919	Return the metadata for the specified course run .
4920	Return the metadata for the specified program .
4921	DRF view to list all catalogs .
4922	DRF view to get catalog details .
4923	Retrieve the list of courses contained within this catalog .
4924	Gets email enterprise_name and number_of_codes which are the relevant parameters for this API endpoint .
4925	Get a user - friendly message indicating a missing parameter for the API endpoint .
4926	Return the title of the content item .
4927	Return the description of the content item .
4928	Return the image URI of the content item .
4929	Return the content metadata item launch points .
4930	Return the title of the courserun content item .
4931	Return the description of the courserun content item .
4932	Return the schedule of the courseun content item .
4933	Return the id for the given content_metadata_item uuid for programs or key for other content
4934	Convert an ISO - 8601 datetime string to a Unix epoch timestamp in some magnitude .
4935	Yield successive n - sized chunks from dictionary .
4936	Convert a datetime . timedelta object or a regular number to a custom - formatted string .
4937	Return the transformed version of the course description .
4938	Delete the file if it already exist and returns the enterprise customer logo image path .
4939	Return link by email .
4940	Link user email to Enterprise Customer .
4941	Unlink user email from Enterprise Customer .
4942	Get the enterprise customer uuid linked to the user .
4943	Get the data sharing consent object associated with a certain user enterprise customer and other scope .
4944	Get the data sharing consent object associated with a certain user of a customer for a course .
4945	Get the data sharing consent object associated with a certain user of a customer for a program .
4946	Send xAPI statement for course enrollment .
4947	Send xAPI statement for course completion .
4948	Return the exported and transformed content metadata as a dictionary .
4949	Transform the provided content metadata item to the schema expected by the integrated channel .
4950	Get the consent record relevant to the request at hand .
4951	Gets username course_id and enterprise_customer_uuid which are the relevant query parameters for this API endpoint .
4952	Get an HTTPResponse that can be used when there s no related EnterpriseCustomer .
4953	Perform other one - time initialization steps .
4954	Handle pre_migrate signal - disconnect User post_save handler .
4955	Get actor for the statement .
4956	Get object for the statement .
4957	Parse csv file and return a stream of dictionaries representing each row .
4958	Validate email to be linked to Enterprise Customer .
4959	Return course runs from program data .
4960	Get the earliest date that one of the courses in the program was available . For the sake of emails to new learners we treat this as the program start date .
4961	Returns paginated list .
4962	Clean email form field
4963	Verify course ID and retrieve course details .
4964	Clean program .
4965	Clean the notify_on_enrollment field .
4966	Clean fields that depend on each other .
4967	Verify that the selected mode is valid for the given course .
4968	Verify that selected mode is available for program and all courses in the program
4969	Retrieve a list of catalog ID and name pairs .
4970	Clean form fields prior to database entry .
4971	Final validations of model fields .
4972	Override of clean method to perform additional validation
4973	Clean enterprise channel worker user form field
4974	Ensure that all necessary resources to render the view are present .
4975	Get the set of variables that are needed by default across views .
4976	Return a 404 page with specified error_code after logging error and adding message to django messages .
4977	Return whether the input course or program exist .
4978	Return a dict having course or program specific keys for data sharing consent page .
4979	Process the above form .
4980	Handle the enrollment of enterprise learner in the provided course .
4981	Set the final discounted price on each premium mode .
4982	Return the available course modes for the course run .
4983	Show course track selection page for the enterprise .
4984	Extend a course with more details needed for the program landing page .
4985	Show Program Landing page for the Enterprise s Program .
4986	Get the base variables for any view to route to .
4987	User is requesting a course we need to translate that into the current course run .
4988	Return whether a request is eligible for direct audit enrollment for a particular enterprise customer .
4989	Redirects to the appropriate view depending on where the user came from .
4990	Run some custom GET logic for Enterprise workflows before routing the user through existing views .
4991	Run some custom POST logic for Enterprise workflows before routing the user through existing views .
4992	Task to send content metadata to each linked integrated channel .
4993	Task to send learner data to each linked integrated channel .
4994	Task to unlink inactive learners of provided integrated channel .
4995	Handle User model changes - checks if pending enterprise customer user record exists and upgrades it to actual link .
4996	Set default value for EnterpriseCustomerCatalog . content_filter if not already set .
4997	Assign an enterprise learner role to EnterpriseCustomerUser whenever a new record is created .
4998	Delete the associated enterprise learner role assignment record when deleting an EnterpriseCustomerUser record .
4999	Ensure the user making the API request is associated with an EnterpriseCustomer .
5000	Ensure at least one of the specified query parameters are included in the request .
5001	Returns a batched queryset of EnterpriseCustomerUser objects .
5002	Assigns enterprise role to users .
5003	Entry point for managment command execution .
5004	Send a completion status call to Degreed using the client .
5005	Get the EnterpriseCustomer associated with a running pipeline .
5006	Perform the linking of user in the process of logging to the Enterprise Customer .
5007	Find the LMS user from the LMS model UserSocialAuth .
5008	Instantiate a new session object for use in connecting with SAP SuccessFactors
5009	Send a completion status payload to the SuccessFactors OCN Completion Status endpoint
5010	Make a post request with an auth token acquired for a specific user to a SuccessFactors endpoint .
5011	Make a post request using the session object to a SuccessFactors endpoint .
5012	Make a GET request using the session object to a SuccessFactors endpoint for inactive learners .
5013	Make recursive GET calls to traverse the paginated API response for search students .
5014	Filter only for the user s ID if non - staff .
5015	Apply incoming filters only if user is staff . If not only filter by user s ID .
5016	Send a completion status call to the integrated channel using the client .
5017	Handle the case where the transmission fails .
5018	Add a message to the Django messages store indicating that we failed to retrieve price information about an item .
5019	Validate that a particular image extension .
5020	Validate that a particular image size .
5021	Get the enterprise customer id given an enterprise customer catalog id .
5022	Run sphinx - apidoc after Sphinx initialization .
5023	Generates a list of active integrated channels for active customers filtered from the given options .
5024	Returns the enterprise customer requested for the given uuid None if not .
5025	Assemble a list of integrated channel classes to transmit to .
5026	Get result for the statement .
5027	Get the contents of a file listing the requirements
5028	Iterate over each learner data record and transmit it to the integrated channel .
5029	Transmit content metadata to integrated channel .
5030	Return a DegreedLearnerDataTransmissionAudit with the given enrollment and course completion data .
5031	Render the given template with the stock data .
5032	Build common admin context .
5033	Handle GET request - render Transmit courses metadata form .
5034	Get the list of EnterpriseCustomerUsers we want to render .
5035	Get the list of PendingEnterpriseCustomerUsers we want to render .
5036	Link single user by email or username .
5037	Bulk link users by email .
5038	Enroll a single user in any number of courses using a particular course mode .
5039	Query the enrollment API and determine if a learner is enrolled in a given course run track .
5040	Accept a list of emails and separate them into users that exist on OpenEdX and users who don t .
5041	Enroll existing users in all courses in a program and create pending enrollments for nonexisting users .
5042	Enroll existing users in a course and create a pending enrollment for nonexisting users .
5043	Deduplicate any outgoing message requests and send the remainder .
5044	Notify learners about a program in which they ve been enrolled .
5045	Create message for the users who were not able to be enrolled in a course or program .
5046	Enroll the users with the given email addresses to the courses specified either specifically or by program .
5047	Handle GET request - render linked learners list and Link learner form .
5048	Handle DELETE request - handle unlinking learner .
5049	Perform the query and returns a single object matching the given keyword arguments .
5050	Build a ProxyDataSharingConsent using the details of the received consent records .
5051	Commit a real DataSharingConsent object to the database mirroring current field settings .
5052	Get course completions via PersistentCourseGrade for all the learners of given enterprise customer .
5053	Prefetch Users from the list of user_ids present in the persistent_course_grades .
5054	Get Identity Provider with given id .
5055	Get a list of identity providers choices for enterprise customer .
5056	Get template of catalog admin url .
5057	Create HTML and plaintext message bodies for a notification .
5058	Get a subject line for a notification email .
5059	Send an email notifying a user about their enrollment in a course .
5060	Get the EnterpriseCustomer instance associated with uuid .
5061	Return enterprise customer instance for given user .
5062	Return the object for EnterpriseCustomerUser .
5063	Return track selection url for the given course .
5064	Return url with updated query parameters .
5065	Filter audit course modes out if the enterprise customer has not enabled the Enable audit enrollment flag .
5066	Given an EnterpriseCustomer UUID return the corresponding EnterpriseCustomer or raise a 404 .
5067	Get MD5 encoded cache key for given arguments .
5068	Traverse a paginated API response .
5069	Return grammatically correct translated text based off of a minimum and maximum value .
5070	Format the price to have the appropriate currency and digits ..
5071	Get the site configuration value for a key unless a site configuration does not exist for that site .
5072	Get a configuration value or fall back to default if it doesn t exist .
5073	Get the value in the request either through query parameters or posted data from a key .
5074	Emit a track event for enterprise course enrollment .
5075	Return true if the course run is enrollable false otherwise .
5076	Return true if the course run has a verified seat with an unexpired upgrade deadline false otherwise .
5077	Return course run with start date closest to now .
5078	Return the current course run on the following conditions .
5079	Strip all tags from a string except those tags provided in allowed_tags parameter .
5080	Return the serialized course key given either a course run ID or course key .
5081	LRS client instance to be used for sending statements .
5082	Save xAPI statement .
5083	Return a SapSuccessFactorsLearnerDataTransmissionAudit with the given enrollment and course completion data .
5084	Iterate over each learner and unlink inactive SAP channel learners .
5085	Check that if request user has implicit access to ENTERPRISE_DASHBOARD_ADMIN_ROLE feature role .
5086	Check that if request user has implicit access to ENTERPRISE_CATALOG_ADMIN_ROLE feature role .
5087	Check that if request user has implicit access to ENTERPRISE_ENROLLMENT_API_ADMIN_ROLE feature role .
5088	Instance is EnterpriseCustomer . Return e - commerce coupon urls .
5089	Drops the historical sap_success_factors table named herein .
5090	Return an export csv action .
5091	Return the action method to clear the catalog ID for a EnterpriseCustomer .
5092	Login to pybotvac account using provided email and password .
5093	Get information about maps of the robots .
5094	Get information about robots connected to account .
5095	Return a requested map from a robot .
5096	Get information about persistent maps of the robots .
5097	Calculates the distance between two points on earth .
5098	Takes a graph and returns an adjacency list .
5099	Takes an adjacency matrix and returns an adjacency list .
5100	Takes a dictionary based representation of an adjacency list and returns a dict of dicts based representation .
5101	Takes an adjacency list dict or matrix and returns a graph .
5102	Returns all edges with the specified edge type .
5103	Draws the graph .
5104	Returns the arguments used when plotting .
5105	A function that returns the arrival time of the next arrival for a Poisson random measure .
5106	Returns a color for the queue .
5107	Fetches data from the queue .
5108	Returns an integer representing whether the next event is an arrival a departure or nothing .
5109	Change the number of servers in the queue to n .
5110	This method simulates the queue forward for a specified amount of simulation time or for a specific number of events .
5111	Used to specify edge indices from different types of arguments .
5112	Animates the network as it s simulating .
5113	Resets the queue to its initial state .
5114	Clears data from all queues .
5115	Returns a deep copy of itself .
5116	Draws the network . The coloring of the network corresponds to the number of agents at each queue .
5117	Gets data from queues and organizes it by agent .
5118	Gets data from all the queues .
5119	Prepares the QueueNetwork for simulation .
5120	Returns whether the next event is an arrival or a departure and the queue the event is accuring at .
5121	Resets all edge and vertex colors to their default values .
5122	Change the routing transitions probabilities for the network .
5123	Draws the network highlighting active queues .
5124	Draws the network highlighting queues of a certain type .
5125	Simulates the network forward .
5126	Tells the queues to collect data on agents arrival service start and departure times .
5127	Tells the queues to stop collecting data on agents .
5128	Returns the routing probabilities for each vertex in the graph .
5129	Returns the number of elements in the set that s belongs to .
5130	Locates the leader of the set to which the element s belongs .
5131	Merges the set that contains a with the set that contains b .
5132	Generates a random transition matrix for the graph g .
5133	Creates a random graph where the edges have different types .
5134	Creates a random graph where the vertex types are selected using their pagerank .
5135	Creates a connected graph with random vertex locations .
5136	Yield all of the documentation for trait definitions on a class object .
5137	Add lines to the block .
5138	Process a file object .
5139	Process a single token .
5140	We are transitioning from a noncomment to a comment .
5141	Possibly add a new comment .
5142	Make the index mapping lines of actual code to their associated prefix comments .
5143	Find the comment block just before the given line number .
5144	Loads config from string or dict
5145	Merges config with templates
5146	Converts the configuration dictionary into the corresponding configuration format
5147	Returns a BytesIO instance representing an in - memory tar . gz archive containing the native router configuration .
5148	Like generate but writes to disk .
5149	Adds a single file in tarfile instance .
5150	Parses a native configuration and converts it to a NetJSON configuration dictionary
5151	Merges config on top of template .
5152	Merges list2 on top of list1 .
5153	Evaluates variables in data
5154	Looks for a key in a dictionary if found returns a deepcopied value otherwise returns default value
5155	Loops over item and performs type casting according to supplied schema fragment
5156	returns the template context for install . sh and uninstall . sh
5157	generates install . sh and adds it to included files
5158	generates uninstall . sh and adds it to included files
5159	generates tc_script . sh and adds it to included files
5160	Renders configuration by using the jinja2 templating engine
5161	converts NetJSON address to UCI intermediate data structure
5162	converts NetJSON interface to UCI intermediate data structure
5163	deletes NetJSON address keys
5164	converts NetJSON bridge to UCI intermediate data structure
5165	determines UCI interface proto option
5166	determines UCI interface dns option
5167	determines UCI interface dns_search option
5168	only for mac80211 driver
5169	determines NetJSON protocol radio attribute
5170	determines NetJSON channel_width radio attribute
5171	Returns a configuration dictionary representing an OpenVPN client configuration that is compatible with the passed server configuration .
5172	returns a list of NetJSON extra files for automatically generated clients produces side effects in client dictionary
5173	parse requirements . txt ignore links exclude comments
5174	Get all events for this report . Additional arguments may also be specified that will be passed to the query function .
5175	Get all facts of this node . Additional arguments may also be specified that will be passed to the query function .
5176	Get a single fact from this node .
5177	Get all resources of this node or all resources of the specified type . Additional arguments may also be specified that will be passed to the query function .
5178	Get a resource matching the supplied type and title . Additional arguments may also be specified that will be passed to the query function .
5179	Get all reports for this node . Additional arguments may also be specified that will be passed to the query function .
5180	A base_url that will be used to construct the final URL we re going to query against .
5181	The complete URL we will end up querying . Depending on the endpoint we pass in this will result in different URL s with different prefixes .
5182	Query for nodes by either name or query . If both aren t provided this will return a list of all nodes . This method also fetches the nodes status and event counts of the latest report from puppetdb .
5183	Gets a single node from PuppetDB .
5184	Get the known catalog edges formed between two resources .
5185	Get the available catalog for a given node .
5186	Get event counts from puppetdb aggregated into a single map .
5187	Get Node and Fact information with an alternative query syntax for structured facts instead of using the facts fact - contents and factsets endpoints for many fact - related queries .
5188	Connect with PuppetDB . This will return an object allowing you to query the API through its methods .
5189	The Master has been started from the command line . Execute ad - hoc tests if desired .
5190	Direct operate a single command
5191	Direct operate a set of commands
5192	Select and operate a single command
5193	Select and operate a set of commands
5194	Process measurement data .
5195	The Outstation has been started from the command line . Execute ad - hoc tests if desired .
5196	Set up the OpenDNP3 configuration .
5197	Configure the Outstation s database of input point definitions .
5198	Return the application - controlled IIN field .
5199	A PointValue was received from the Master . Process its payload .
5200	The Master sent a Select command to the Outstation . Handle it .
5201	The Master sent an Operate command to the Outstation . Handle it .
5202	Create Bloomberg connection
5203	Stop and destroy Bloomberg connection
5204	Parse markdown as description
5205	Bloomberg overrides for elements
5206	Standardized earning outputs and add percentage by each blocks
5207	Format pdblp outputs to column - based results
5208	Format intraday data
5209	Logging info for given tickers and fields
5210	Bloomberg reference data
5211	Bloomberg block data
5212	Bloomberg historical data
5213	Bloomberg intraday bar data within market session
5214	Earning exposures by Geo or Products
5215	Active futures contract
5216	Get proper ticker from generic ticker
5217	Check exchange hours vs local hours
5218	Data file location for Bloomberg historical data
5219	Data file location for Bloomberg reference data
5220	Check whether data is done for the day and save
5221	Exchange info for given ticker
5222	Get info for given market
5223	Currency pair info
5224	Market close time for ticker
5225	Flatten any array of items to list
5226	Recursively iterate lists and tuples
5227	Convert dict to string
5228	Load parameters for assets
5229	Load assets infomation from file
5230	Convert YAML input to hours
5231	Make folder as well as all parent folders if not exists
5232	Search all files with criteria Returned list will be sorted by last modified
5233	Search all folders with criteria Returned list will be sorted by last modified
5234	Sort files or folders by modified time
5235	Filter files or dates by date patterns
5236	File modified time in python
5237	Get interval from defined session
5238	Shift start time by mins
5239	Time intervals for market open
5240	Time intervals for market close
5241	Time intervals between market
5242	Explicitly specify start time and end time
5243	Convert to tz
5244	Full infomation for missing query
5245	Check number of trials for missing values
5246	Update number of trials for missing values
5247	Decorator for public views that do not require authentication Sets an attribute in the fuction STRONGHOLD_IS_PUBLIC to True
5248	Utility for sending a predefined request and printing response as well as storing messages in a list useful for testing
5249	Open and manage a BCon wrapper to a Bloomberg API session
5250	Start connection and initialize session services
5251	Initialize blpapi . Session services
5252	Get Open High Low Close Volume and numEvents for a ticker . Return pandas DataFrame
5253	Assemble one EVM instruction from its textual representation .
5254	Assemble a sequence of textual representation of EVM instructions
5255	Disassemble a single instruction from a bytecode
5256	Disassemble all instructions in bytecode
5257	Convert block number to fork name .
5258	Parses an operand from buf
5259	Define delay adjustment policy
5260	The likelihood that the context is a member .
5261	Parse 10 - Q or 10 - K XML report .
5262	Convert string into camel case .
5263	Convert string into capital case . First letters will be uppercase .
5264	Convert string into path case . Join punctuation with slash .
5265	Convert string into spinal case . Join punctuation with backslash .
5266	Convert string into sentence case . First letter capped and each punctuations are joined with space .
5267	Convert string into snake case . Join punctuation with underscore
5268	Checks the validity of the input .
5269	Helper method that labels the nodes of GST with indexes of strings found in their descendants .
5270	Helper method that returns the index of the string based on node s starting index
5271	Returns the Largest Common Substring of Strings provided in stringIdxs . If stringIdxs is not provided the LCS of all strings is returned .
5272	Helper method that finds LCS by traversing the labeled GSD .
5273	Helper method returns the starting indexes of strings in GST
5274	Returns starting position of the substring y in the string used for building the Suffix tree .
5275	Helper method returns the edge label between a node and it s parent
5276	Generator of unique terminal symbols used for building the Generalized Suffix Tree . Unicode Private Use Area U + E000 .. U + F8FF is used to ensure that terminal symbols are not part of the input string .
5277	Query the oracle to find out whether i and j should be must - linked
5278	Create a graph of constraints for both must - and cannot - links
5279	Translates a regular Scikit - Learn estimator or pipeline to a PMML pipeline .
5280	Converts a fitted Scikit - Learn pipeline to PMML .
5281	Translates a regular TPOT configuration to a PMML - compatible TPOT configuration .
5282	Returns an instance of the formset
5283	Returns the supplied URL .
5284	If the formset is valid save the associated models .
5285	Handles GET requests and instantiates a blank version of the formset .
5286	Handles POST requests instantiating a formset instance with the passed POST variables and then checked for validity .
5287	Overrides construct_formset to attach the model class as an attribute of the returned formset instance .
5288	If the form and formsets are valid save the associated models .
5289	If the form or formsets are invalid re - render the context data with the data - filled form and formsets and errors .
5290	Returns the inline formset instances
5291	Handles GET requests and instantiates a blank version of the form and formsets .
5292	Handles POST requests instantiating a form and formset instances with the passed POST variables and then checked for validity .
5293	If inlines_names has been defined add each formset to the context under its corresponding entry in inlines_names
5294	If sort_type is None - inverse current sort for field if no sorted - use asc
5295	Returns the start date for a model instance
5296	Returns the end date for a model instance
5297	Returns an integer representing the first day of the week .
5298	Returns a queryset of models for the month requested
5299	Injects variables necessary for rendering the calendar into the context .
5300	Return a new Colorful object with the given color config .
5301	Parse the given color files .
5302	Parse the given rgb . txt file into a Python dict .
5303	Parse a JSON color file .
5304	Sanitze the given color palette so it can be safely used by Colorful .
5305	Detect what color palettes are supported . It ll return a valid color mode to use with colorful .
5306	Convert RGB to ANSI 256 color
5307	Convert RGB to ANSI 16 color
5308	Convert the given hex string to a valid RGB channel triplet .
5309	Check if the given hex value is a valid RGB color
5310	Translate the given RGB color into the appropriate ANSI escape code for the given color mode . The offset is used for the base color which is used .
5311	Translate the given color name to a valid ANSI escape code .
5312	Resolve the given modifier name to a valid ANSI escape code .
5313	Translate the given style to an ANSI escape code sequence .
5314	Style the given string according to the given ANSI style string .
5315	Set the colorpalette which should be used
5316	Setup this colorful object by setting a colormode and the colorpalette . The extend_colors flag is used to extend the currently active color palette instead of replacing it .
5317	Use a predefined style as color palette
5318	Format the given string with the given args and kwargs . The string can contain references to c which is provided by this colorful object .
5319	Read attribute from sysfs and return as string
5320	Find the port chain a device is plugged on .
5321	Get data from the USB device .
5322	Get device humidity reading .
5323	Read data from device .
5324	Reads the file from Github
5325	Recursively finds size of objects
5326	Create the JSON for configuring arthur to collect data
5327	Return the GitHub SHA for a file in the repository
5328	Get the uuid for a profile name
5329	Execute the raw phase for a given backend section optionally using Arthur
5330	Execute the merge identities phase
5331	Execute the enrich phase for a given backend section
5332	Execute the panels phase
5333	Config logging level output output
5334	Parse command line arguments
5335	Get params to execute the micro - mordred
5336	Get the kibiter vesion .
5337	Upload a panel to Elasticsearch if it does not exist yet .
5338	Upload to Kibiter the title for the dashboard .
5339	Create the menu definition to access the panels in a dashboard .
5340	Remove existing menu for dashboard if any .
5341	Get the menu entries from the panel definition
5342	Order the dashboard menu
5343	Compose projects . json only for mbox but using the mailing_lists lists
5344	Compose projects . json for gerrit but using the git lists
5345	Compose projects . json for git
5346	Compose projects . json for mailing lists
5347	Compose projects . json for github
5348	Compose projects . json for bugzilla
5349	Compose the projects JSON file only with the projects name
5350	Compose projects . json with all data sources
5351	Execute autorefresh for areas of code study if configured
5352	Execute the studies configured for the current backend
5353	Retain the identities in SortingHat based on the retention_time value declared in the setup . cfg .
5354	return list with the repositories for a backend_section
5355	Convert from eclipse projects format to grimoire projects json format
5356	Change a param in the config
5357	Add new configuration to self . conf .
5358	Get Elasticsearch version .
5359	Just a wrapper to the execute_batch_tasks method
5360	Start a task manager per backend to complete the tasks .
5361	Tasks that should be done just one time
5362	Validates the provided config to make sure all the required fields are there .
5363	Converts stdout string to a list .
5364	Converts stderr string to a list .
5365	Customize the message format based on the log level .
5366	Sys . out replacer by default with stderr .
5367	Compact a list of integers into a comma - separated string of intervals .
5368	Get a storage client using the provided credentials or defaults .
5369	Return True if we should retry False otherwise .
5370	Load context from a text file in gcs .
5371	Load a file from either local or gcs .
5372	Check whether the file exists in GCS .
5373	Check whether the file exists on local disk or GCS .
5374	Check whether there is a GCS object whose name starts with the prefix .
5375	True iff an object exists matching the input GCS pattern .
5376	True if each output contains at least one file or no output specified .
5377	Return a dict object representing a pipeline input argument .
5378	Return a multi - line string of the full pipeline docker command .
5379	Builds a pipeline configuration for execution .
5380	Builds pipeline args for execution .
5381	Convert the integer UTC time value into a local datetime .
5382	Returns a Pipeline objects for the job .
5383	Kills the operations associated with the specified job or job . task .
5384	Returns the most relevant status string and last updated date string .
5385	Returns a dictionary of envs or file inputs for an operation .
5386	Create a task name from a job - id task - id and task - attempt .
5387	Rewrite string so that all characters are valid in a docker name suffix .
5388	Return a tuple for sorting most recent first .
5389	Determine if the provided time is within the range inclusive .
5390	Return a Task object with this task s info .
5391	Returns a command to delocalize logs .
5392	The local dir for staging files for that particular task .
5393	Return a dictionary of environment variables for the container .
5394	Returns a command that will stage recursive inputs .
5395	Returns a directory or file path to be the target for gsutil cp .
5396	Returns a command that will stage inputs .
5397	Copy outputs from local disk to GCS .
5398	Get the dsub version out of the _dsub_version . py source file .
5399	Filter the granular v2 events down to events of interest .
5400	Extract elements from an operation event and map to a named event .
5401	Returns the environment for actions that copy logging files .
5402	Return a dict with variables for the prepare action .
5403	Return a dict with variables for the localization action .
5404	Return a dict with variables for the delocalization action .
5405	Returns a dictionary of for the user container environment .
5406	Returns a list of two actions per gcs bucket to mount .
5407	Returns the status of this operation .
5408	Returns the most relevant status string and failed action .
5409	Rounds ram up to the nearest multiple of _MEMORY_MULTIPLE .
5410	Returns a custom machine type string .
5411	Build a VirtualMachine object for a Pipeline request .
5412	Build an Action object for a Pipeline request .
5413	Return a list of operations . See base . py for additional detail .
5414	Returns a provider for job submission requests .
5415	Add provider required arguments epilog message parse and validate .
5416	A string with the arguments to point dstat to the same provider + project .
5417	Returns a URI with placeholders replaced by metadata values .
5418	Inserts task metadata into the logging URI .
5419	Validated google - v2 arguments .
5420	Extract job - global resources requirements from input args .
5421	Allow provider to extract job - specific metadata from command - line args .
5422	Resolve the logging path from job and task properties .
5423	Print status info as we wait for those jobs .
5424	Wait for job and retry any tasks that fail .
5425	A list with for each job its dominant task .
5426	A defaultdict with for each job a list of its tasks .
5427	Waits until any of the listed jobs is not running .
5428	Validates that job and task argument names do not overlap .
5429	r Craft a simple command name from the command .
5430	Rewrite local file URIs as required by the rewrite_uris method .
5431	Helper function to return an appropriate set of mount parameters .
5432	Convenience function simplifies construction of the logging uri .
5433	Split a string into a pair which can have one empty value .
5434	Parse the header from the tasks file into env input output definitions .
5435	Parses task parameters from a TSV .
5436	Parse flags of key = value pairs and return a list of argclass .
5437	Parse env input and output parameters into a job parameters and data .
5438	Validate that arguments passed to submit_job have valid file providers .
5439	Convert the timeout duration to seconds .
5440	Produce a default variable name if none is specified .
5441	Accept a raw uri and return rewritten versions .
5442	Find the file provider for a URI .
5443	Do basic validation of the uri return the path and filename .
5444	Return a valid docker_path uri and file provider from a flag value .
5445	Return a valid docker_path from a Google Persistent Disk url .
5446	Return a valid docker_path for a local file path .
5447	Return a valid docker_path for a GCS bucket .
5448	Return a MountParam given a GCS bucket disk image or local path .
5449	Validate that the name follows posix conventions for env variables .
5450	Validate that the name is a valid GCS bucket .
5451	Turn the specified name and value into a valid Google label .
5452	For each task ensure that each task param entry is not None .
5453	Return a new dict with any empty items removed .
5454	Generator that yields a task - specific view of the job .
5455	Converts a task - id to the numeric task - id .
5456	Raise ValueError if the label is invalid .
5457	Populate a JobDescriptor from the local provider s original meta . yaml .
5458	Populate and return a JobDescriptor from a YAML string .
5459	Returns the task_descriptor corresponding to task_id .
5460	Return a dictionary of environment variables for the user container .
5461	Returns a dict combining the field for job and task params .
5462	Print the filters used to delete tasks . Use raw flags as arguments .
5463	Kill jobs or job tasks .
5464	Return the operation s array of actions .
5465	Return the value for the specified action .
5466	Return the environment for the operation .
5467	Return the image for the operation .
5468	Return all events of a particular type .
5469	Return the most recent timestamp in the operation .
5470	Create a new table that is a summary of the input rows .
5471	Generate formatted jobs individually in order of create - time .
5472	Convert types of task fields .
5473	Return a value for display ; if longer than max length use ellipsis .
5474	Returns a string of comma - delimited key = value pairs .
5475	Presenter to force yaml . dump to use multi - line string style .
5476	Returns a list of zones based on any wildcard input .
5477	Converts a datestamp from RFC3339 UTC to a datetime .
5478	Returns the job - id or job - id . task - id for the operation .
5479	Cancel a batch of operations .
5480	Cancel operations .
5481	Return True if we should retry . False otherwise .
5482	Specific check for auth error codes .
5483	Configures genomics API client .
5484	Executes operation .
5485	Returns a type from a snippit of python source . Should normally be something just like str or Object .
5486	Returns a jsonified response with the specified HTTP status code .
5487	Performs the actual sending action and returns the result
5488	Return the Exception data in a format for JSON - RPC
5489	Try loading given config file .
5490	Make a guess about the config file location an try loading it .
5491	Create a new config file at the default location .
5492	Writes self . cfg to self . config_file .
5493	Validate a configuration key according to section . item .
5494	Searches the given text for mentions and expands them .
5495	Appends tzinfo and assumes UTC if datetime object has no tzinfo already .
5496	Try loading given cache file .
5497	Make a guess about the cache file location an try loading it .
5498	Checks if specified URL is cached .
5499	Adds new tweets to the cache .
5500	Retrieves tweets from the cache .
5501	Tries to remove cached tweets .
5502	Retrieve your personal timeline .
5503	Get or set config item .
5504	Return human - readable relative time string .
5505	Parse the options set defaults and then fire up PhantomJS .
5506	Call PhantomJS with the specified flags and options .
5507	Create a nice image name from the url .
5508	Decorator . Abortable worker . If wrapped task will be cancelled by dispatcher decorator will send ftp codes of successful interrupt .
5509	Return nearest parent permission for path .
5510	Release incrementing the internal counter by one .
5511	Register an approximation of memory used by FTP server process and all of its children .
5512	Connect to FTP server login and return an ftplib . FTP instance .
5513	Return the number of bytes transmitted in 1 second .
5514	Decorator . Bring coroutine result up so it can be used as async context
5515	Context manager with threading lock for set locale on enter and set it back to original state on exit .
5516	Count data for throttle
5517	Set throttle limit
5518	Clone throttles without memory
5519	Update timeout for all throttles
5520	Checks if any of expected matches received .
5521	Parsing directory server response .
5522	Parsing Microsoft Windows dir output
5523	Create stream for write data to destination file .
5524	Compute jenks natural breaks on a sequence of values given nb_class the number of desired class .
5525	Grabs an image directly to a buffer .
5526	Copy the contents of the screen to PIL image memory .
5527	Back - end version .
5528	Open a Mapchete process .
5529	Determine zoom levels .
5530	Worker function running the process .
5531	Yield process tiles .
5532	Process a large batch of tiles .
5533	Process a large batch of tiles and yield report messages per tile .
5534	Run the Mapchete process .
5535	Read from written process output .
5536	Write data into output format .
5537	Get output raw data .
5538	Extract data from tile .
5539	Read existing output data from a previous run .
5540	Open input data .
5541	Calculate hillshading from elevation data .
5542	Extract contour lines from elevation data .
5543	Clip array by geometry .
5544	Clip input array with a vector list .
5545	Create tile pyramid out of input raster .
5546	Create a tile pyramid out of an input raster dataset .
5547	Determine minimum and maximum zoomlevel .
5548	Validate whether value is found in config and has the right type .
5549	Return hash of x .
5550	Validate and return zoom levels .
5551	Snaps bounds to tiles boundaries of specific zoom level .
5552	Clips bounds by clip .
5553	Return a list of zoom levels .
5554	Return parameter dictionary per zoom level .
5555	Return the element filtered by zoom level .
5556	Return element only if zoom condition matches with config string .
5557	Return zoom level as integer or throw error .
5558	Flatten dict tree into dictionary where keys are paths of old dict .
5559	Reverse tree flattening .
5560	Process bounds as defined in the configuration .
5561	Process bounds this process is currently initialized with .
5562	Effective process bounds required to initialize inputs .
5563	Output object of driver .
5564	Input items used for process stored in a dictionary .
5565	Optional baselevels configuration .
5566	Return configuration parameters snapshot for zoom as dictionary .
5567	Return process bounding box for zoom level .
5568	Return process bounds for zoom level .
5569	Generate indexes for given zoom level .
5570	Return raster metadata .
5571	Example process for testing .
5572	Check if output format is valid with other process parameters .
5573	Read data from process output .
5574	Return all available output formats .
5575	Return all available input formats .
5576	Return output class of driver .
5577	Return input class of driver .
5578	Guess driver from file extension .
5579	Dump output JSON and verify parameters if output metadata exist .
5580	Extract contour lines from an array .
5581	Return a list of values between min and max within an interval .
5582	Create an empty Mapchete and process file in a given directory .
5583	Determine target file path .
5584	Create directory and subdirectory if necessary .
5585	Check whether process output is allowed with output driver .
5586	Return verified and cleaned output .
5587	Extract subset from multiple tiles .
5588	Calculate slope and aspect map .
5589	Return hillshaded numpy array .
5590	Return BufferedTile object of this BufferedTilePyramid .
5591	Return all tiles intersecting with bounds .
5592	All metatiles intersecting with given bounding box .
5593	Return all tiles intersecting with input geometry .
5594	Return all BufferedTiles intersecting with tile .
5595	Return dictionary representation of pyramid parameters .
5596	Return tile neighbors .
5597	Determine whether tile touches or goes over pyramid edge .
5598	Read stretch and return raster data .
5599	Open process output as input for other process .
5600	Convert data to web output .
5601	Serve a Mapchete process .
5602	Configure and create Flask app .
5603	Return NumPy arrays from an input raster .
5604	Extract a numpy array from a raster file .
5605	Write a window from a numpy array to an output file .
5606	Extract raster data window array .
5607	Extract and resample from array to target tile .
5608	Return bounds range values from geolocated input .
5609	Return Affine and shape of combined tiles .
5610	Determine if distance over antimeridian is shorter than normal distance .
5611	Return a rasterio . io . MemoryFile instance from input .
5612	Turn input data into a proper array for further usage .
5613	Reproject a geometry to target CRS .
5614	Segmentize Polygon outer ring by segmentize value .
5615	Read a window of an input vector dataset .
5616	Write features to GeoJSON file .
5617	Return geometry of a specific type if possible .
5618	Yield single part geometries if geom is multipart otherwise yield geom .
5619	Convert and optionally clip input raster data .
5620	Determine the best base zoom level for a raster .
5621	Determine the best zoom level in target TilePyramid from given Tile .
5622	Determine whether file path is remote or local .
5623	Check if file exists either remote or local .
5624	Return absolute path if path is local .
5625	Return relative path if path is local .
5626	Write local or remote .
5627	Read local or remote .
5628	Registers a function as a hook . Multiple hooks can be registered for a given type but the order in which they are invoke is unspecified .
5629	Return message digest if a secret key was provided
5630	Callback from Flask
5631	Generate . rst document for PyPi .
5632	Remove common indentation from string .
5633	Find all section names and return a list with their names .
5634	Generate table of contents for array of section names .
5635	Convert a docstring to a markdown text .
5636	Generate markdown document from module including API section .
5637	Compute the maximum temporal distance .
5638	Temporal distance cumulative density function .
5639	Temporal distance probability density function .
5640	Not used in the regular filter process for the time being .
5641	Remove dangling entries from the shapes directory .
5642	Given a set of transit events and the static walk network transform the static walking network into a set of pseudo - connections .
5643	Get the earliest visit time of the stop .
5644	Whether the spreading stop can infect using this event .
5645	Create day_trips and day_stop_times views .
5646	Create a colourbar with limits of lwr and upr
5647	Write temporal networks by route type to disk .
5648	Write out a network
5649	Write out the database according to the GTFS format .
5650	Remove columns ending with I from a pandas . DataFrame
5651	A helper method for scanning the footpaths . Updates self . _stop_profiles accordingly
5652	Context manager for making files with possibility of failure .
5653	Utility function to print sqlite queries before executing .
5654	Create directories if they do not exist otherwise do nothing .
5655	Deal with the first walks by joining profiles to other stops within walking distance .
5656	This validates the day_start_ut of the days table .
5657	Re - create all views .
5658	Loads the tables from the gtfs object and counts the number of rows that have null values in fields that should not be null . Stores the number of null rows in warnings_container
5659	Checks for rows that are not referenced in the the tables that should be linked
5660	Print coordinates within a sequence .
5661	Find corresponding shape points for a list of stops and create shape break points .
5662	Break a shape into segments between stops using break_points .
5663	Get all scheduled stops on a particular route_id .
5664	Interpolate passage times for shape points .
5665	Get the earliest arrival time at the target given a departure time .
5666	Run the actual simulation .
5667	Computes the walk paths between stops and updates these to the gtfs database .
5668	Get a stop - to - stop network describing a single mode of travel .
5669	Compute stop - to - stop networks for all travel modes and combine them into a single network . The modes of transport are encoded to a single network . The network consists of multiple links corresponding to each travel mode . Walk mode is not included .
5670	Compute the temporal network of the data and return it as a pandas . DataFrame
5671	Plot the temporal distance cumulative density function .
5672	Get stop pairs through which transfers take place
5673	Instantiate a GTFS object by computing
5674	Should return the path to the database
5675	Get the distance along a shape between stops
5676	Get name of the GTFS timezone
5677	Get complete trip data for visualizing public transport operation based on gtfs .
5678	Get stop count data .
5679	Get the shapes of all routes .
5680	Get trip counts per day between the start and end day of the feed .
5681	Starting from a specific point and time get complete single source shortest path spreading dynamics as trips or events .
5682	Get closest stop to a given location .
5683	Check that a trip takes place during a day
5684	Convert unixtime to unixtime on GTFS start - of - day .
5685	Increment the GTFS - definition of day start .
5686	Get all possible day start times between start_ut and end_ut Currently this function is used only by get_tripIs_within_range_by_dsut
5687	Get all stop data as a pandas DataFrame for all stops or an individual stop
5688	Obtain a list of events that take place during a time interval . Each event needs to be only partially overlap the given time interval . Does not include walking events .
5689	Return the first and last day_start_ut
5690	Recover pre - computed travel_impedance between od - pairs from the database .
5691	A simple checker that connections are coming in descending order of departure time and that no departure time has been skipped .
5692	Update the profile with the new labels . Each new label should have the same departure_time .
5693	Get the pareto_optimal set of Labels given a departure time .
5694	Make table definitions
5695	Do the actual import . Copy data and store in connection object .
5696	Copy data from one table to another while filtering data at the same time
5697	Get median latitude AND longitude of stops
5698	Get mean latitude AND longitude of stops
5699	Writes data from get_stats to csv file
5700	Count occurrences of values AND return it as a string .
5701	Computes the temporal coverage of each source feed
5702	Return the frequency of all types of routes per day .
5703	Return the sum of vehicle hours in a particular day by route type .
5704	Scan the footpaths originating from stop_id
5705	A Python decorator for printing out the execution time for a function .
5706	When receiving the filled out form check for valid access .
5707	Return a form class for a given string pointing to a lockdown form .
5708	Check if each request is allowed to access the current resource .
5709	Handle redirects properly .
5710	Returns the profile with the received ID as a dict
5711	Get descriptor base path if string or return None .
5712	Retrieve descriptor .
5713	Check if path is safe and allowed .
5714	Validate zipped data package
5715	Slugify foreign key
5716	Validate this Data Package .
5717	Push Data Package to storage .
5718	Pull Data Package from storage .
5719	Convert resource s path and name to storage s table name .
5720	Restore resource s path and name from storage s table .
5721	Convert schemas to be compatible with storage schemas .
5722	Restore schemas from being compatible with storage schemas .
5723	It is possible for some of gdb s output to be read before it completely finished its response . In that case a partial mi response was read which cannot be parsed into structured data . We want to ALWAYS parse complete mi records . To do this we store a buffer of gdb s output if the output did not end in a newline .
5724	Verify there is a process object and that it is still running . Raise NoGdbProcessError if either of the above are not true .
5725	Write to gdb process . Block while parsing responses from gdb for a maximum of timeout_sec .
5726	Get response from GDB and block while doing so . If GDB does not have any response ready to be read by timeout_sec an exception is raised .
5727	Get responses on windows . Assume no support for select and use a while loop .
5728	Get responses on unix - like system . Use select to wait for output .
5729	Build and debug an application programatically
5730	Read count characters starting at self . index and return those characters as a string
5731	characters that gdb escapes that should not be escaped by this parser
5732	Parse gdb mi text and turn it into a dictionary .
5733	Get notify message and payload dict
5734	Get result message and payload dict
5735	In a broadcast queue workers have a unique subscription ensuring that every worker recieves a copy of every task .
5736	Deletes this worker s subscription .
5737	Workers all share the same subscription so that tasks are distributed across all workers .
5738	Enqueues a function for the task queue to execute .
5739	Enqueues a task directly . This is used when a task is retried or if a task was manually created .
5740	Standalone PSQ worker .
5741	Gets the result of the task .
5742	Launch a Process return his pid
5743	Update the list of the running process and return the list
5744	Run processes which push the routing dump of the RIPE in a redis database . The dump has been splitted in multiple files and each process run on one of this files .
5745	Split the file and return the list of filenames .
5746	Give an IP maybe a date get the ASN . This is the fastest command .
5747	Get the ASN and the IP Block announcing the IP at a specific date .
5748	Get the full history of an IP . It takes time .
5749	Get the full history of an IP aggregate the result instead of returning one line per day .
5750	Inconditianilly download the URL in a temporary directory . When finished the file is moved in the real directory . Like this an other process will not attempt to extract an inclomplete file .
5751	Verify that the file has not already been downloaded .
5752	Helper function to turn a string representation of true into boolean True .
5753	Helper function to return a valid URL string given the template tag parameters
5754	Renders a Page object as a Twitter Bootstrap styled pagination bar . Compatible with Bootstrap 3 . x and 4 . x only .
5755	For each package and target check if it is a regression .
5756	Remove trailing junk from the version number .
5757	For each package check if the version in one repo is equal for all targets .
5758	Get the number of packages per target and repository .
5759	Get the Jenkins job urls for each target .
5760	Configure all Jenkins CI jobs .
5761	Configure a single Jenkins CI job .
5762	Write out the groovy script and configs to file .
5763	Order packages topologically .
5764	Removes PEM - encoding from a public key private key or certificate . If the private key is encrypted the password will be used to decrypt it .
5765	Decrypts encrypted ASN . 1 data
5766	Creates an EVP_CIPHER pointer object and determines the buffer size necessary for the parameter specified .
5767	Takes a CryptoAPI RSA private key blob and converts it into the ASN . 1 structures for the public and private keys
5768	Takes a CryptoAPI DSS private key blob and converts it into the ASN . 1 structures for the public and private keys
5769	Loads a certificate public key or private key into a Certificate PublicKey or PrivateKey object via CryptoAPI
5770	Verifies an RSASSA - PKCS - v1 . 5 signature .
5771	Verifies an RSA DSA or ECDSA signature via CryptoAPI
5772	Verifies an RSA DSA or ECDSA signature via CNG
5773	Generates a DSA signature
5774	Generates an ECDSA signature
5775	Generates an RSA DSA or ECDSA signature via CryptoAPI
5776	Generates an RSA DSA or ECDSA signature via CNG
5777	Encrypts a value using an RSA public key via CryptoAPI
5778	Encrypts a value using an RSA public key via CNG
5779	Encrypts a value using an RSA private key via CryptoAPI
5780	Obtains a credentials handle from secur32 . dll for use with SChannel
5781	Creates a SecBufferDesc struct and contained SecBuffer structs
5782	Blocks until the socket is ready to be read from or the timeout is hit
5783	Reads exactly the specified number of bytes from the socket
5784	Blocks until the socket is ready to be written to or the timeout is hit
5785	Reads data from the socket and writes it to the memory bio used by libssl to decrypt the data . Returns the unencrypted data for the purpose of debugging handshakes .
5786	Takes ciphertext from the memory bio and writes it to the socket .
5787	Encrypts plaintext via CryptoAPI
5788	Encrypts plaintext via CNG
5789	Checks if an error occured and if so throws an OSError containing the last OpenSSL error message
5790	Peeks into the error stack and pulls out the lib func and reason
5791	Extracts trusted CA certificates from the OS X trusted root keychain .
5792	Constructs an asn1crypto . x509 . Certificate object and calls the export callback
5793	Return the certificate and a hash of it
5794	Extracts the last OS error message into a python unicode string
5795	Converts a CFDictionary object into a python dictionary
5796	Checks a Security OSStatus error code and throws an exception if there is an error to report
5797	Extracts the function signature and description of a Python function
5798	Walks through a CommonMark AST to find section headers that delineate content that should be updated by this script
5799	A callback used to walk the Python AST looking for classes functions methods and attributes . Generates chunks of markdown markup to replace the existing content .
5800	Tries to find a CA certs bundle in common locations
5801	Extracts trusted CA certs from the system CA cert bundle
5802	Windows returns times as 64 - bit unsigned longs that are the number of hundreds of nanoseconds since Jan 1 1601 . This converts it to a datetime object .
5803	Extracts the X . 509 certificates from the server handshake bytes for use when debugging
5804	Determines if a CertificateRequest message is sent from the server asking the client for a certificate
5805	Determines the length of the DH params from the ServerKeyExchange
5806	Parses the handshake for protocol alerts
5807	Parse the TLS handshake from the client to the server to extract information including the cipher suite selected if compression is enabled the session id and if a new or reused session ticket exists .
5808	Creates a generator returning tuples of information about each record in a byte string of data from a TLS client or server . Stops as soon as it find a ChangeCipherSpec message since all data from then on is encrypted .
5809	Creates a generator returning tuples of information about each message in a byte string of data from a TLS handshake record
5810	Creates a generator returning tuples of information about each extension from a byte string of extension data contained in a ServerHello ores ClientHello message
5811	Raises a TLSVerificationError due to a hostname mismatch
5812	Raises a TLSVerificationError due to certificate being expired or not yet being valid
5813	Looks at the server handshake bytes to try and detect a different protocol
5814	Tries decoding a byte string from the OS into a unicode string
5815	Callback called by Secure Transport to actually read the socket
5816	Reads everything available from the socket - used for debugging when there is a protocol error
5817	Callback called by Secure Transport to actually write to the socket
5818	Get the filesystem path to a file that contains OpenSSL - compatible CA certs .
5819	Takes a set of unicode string OIDs and converts vendor - specific OIDs into generics OIDs from RFCs .
5820	Checks to see if a cache file needs to be refreshed
5821	Create a new version under this service .
5822	Create a new VCL under this version .
5823	Converts the column to a dictionary representation accepted by the Citrination server .
5824	Add a descriptor column .
5825	Execute a patch request and return the result
5826	Checks to see that the query will not exceed the max query depth
5827	Run a dataset query against Citrination .
5828	Run each in a list of PIF queries against Citrination .
5829	Takes an initial response and a way to repeat the request that produced it and retries the request with an increasing sleep period between requests if rate limiting resposne codes are encountered .
5830	Creates a data view from the search template and ml template given
5831	Updates an existing data view from the search template and ml template given
5832	Gets basic information about a view
5833	Creates an ml configuration from dataset_ids and extract_as_keys
5834	This method will spawn a server job to create a default ML configuration based on a search template and the extract as keys . This function will submit the request to build and wait for the configuration to finish before returning .
5835	Utility function to turn the result object from the configuration builder endpoint into something that can be used directly as a configuration .
5836	After invoking the create_ml_configuration async method you can use this method to check on the status of the builder job .
5837	Get the t - SNE projection including responses and tags .
5838	Data analysis endpoint .
5839	Submits an async prediction request .
5840	Returns a string indicating the status of the prediction job
5841	Submits a new experimental design run .
5842	Retrieves the status of an in progress or completed design run
5843	Retrieves the results of an existing designrun
5844	Retrieves a summary of information for a given data view - view id - name - description - columns
5845	Kills an in progress experimental design run
5846	Given a filepath loads the file as a dictionary from YAML
5847	Extracts credentials from the yaml formatted credential filepath passed in . Uses the default profile if the CITRINATION_PROFILE env var is not set otherwise looks for a profile with that name in the credentials file .
5848	Given an API key a site url and a credentials file path runs through a prioritized list of credential sources to find credentials .
5849	List matched filenames in a dataset on Citrination .
5850	Returns the number of files matching a pattern in a dataset .
5851	Retrieves URLs for the files matched by a glob or a path to a directory in a given dataset .
5852	Retrieves a dataset file matching a provided file path
5853	Retrieves a PIF from a given dataset .
5854	Create a new data set .
5855	Update a data set .
5856	Create a new data set version .
5857	Retrieves the set of columns from the combination of dataset ids given
5858	Generates a default search templates from the available columns in the dataset ids given .
5859	Returns a new search template but the new template has only the extract_as_keys given .
5860	Convert an object to a form ready to dump to json .
5861	Make a copy of a dictionary with all keys converted to camel case . This is just calls to_camel_case on each of the keys in the dictionary and returns a new dictionary .
5862	Runs the template against the validation endpoint returns a message indicating status of the templte
5863	Adds a organization - course link to the system
5864	Removes the specfied course from the specified organization
5865	Course key object validation
5866	Organization data validation
5867	Inactivates an activated organization as well as any active relationships
5868	Activates an inactive organization - course relationship
5869	Inactivates an active organization - course relationship
5870	Retrieves the set of courses currently linked to the specified organization
5871	Retrieves the organizations linked to the specified course
5872	Organization object - to - dict serialization
5873	Organization dict - to - object serialization
5874	\ will check the image src against a list of bad image files we know of like buttons etc ...
5875	\ loop through all the images and find the ones that have the best bytez to even make them a candidate
5876	\ checks to see if we were able to find open link_src on this page
5877	\ returns the bytes of the image file on disk
5878	Create a video object from a video embed
5879	\ Writes an image src http string to disk as a temporary file and returns the LocallyStoredImage object that has the info you should need on the image
5880	adds any siblings that may have a decent score to this node
5881	checks the density of links within a node is there not much text and most of it contains linky shit? if so it s no good
5882	\ returns a list of nodes we want to search on like paragraphs and tables
5883	\ remove any divs that looks like non - content clusters of links or paras with no gusto
5884	\ Fetch the article title and analyze it
5885	if the article has meta canonical link set in the url
5886	Close the network connection and perform any other required cleanup
5887	Extract the most likely article content from the html page
5888	wrap the crawling functionality
5889	Returns a unicode object representing s . Treats bytestrings using the encoding codec .
5890	Similar to smart_unicode except that lazy instances are resolved to strings rather than kept as lazy objects .
5891	Returns a bytestring version of s encoded as specified in encoding .
5892	Add URLs needed to handle image uploads .
5893	Handle file uploads from WYSIWYG .
5894	Render the Quill WYSIWYG .
5895	Get the form for field .
5896	Render the toolbar for the given config .
5897	Resize an image for metadata tags and return an absolute URL to it .
5898	Check if mdrun finished successfully .
5899	Return double precision mdrun or fall back to single precision .
5900	Returns simple command line to invoke mdrun .
5901	Return a list of the mpi command portion of the commandline .
5902	Launch local smpd .
5903	Find files from a continuation run
5904	Run gromacs . grompp and return the total charge of the system .
5905	Generate a string that can be added to a mdp include = line .
5906	Create a processed topology .
5907	Primitive text file stream editor .
5908	make_ndx that captures all output
5909	Parse make_ndx output and return groups as a list of dicts .
5910	Delete all frames .
5911	Returns resid in the Gromacs index by transforming with offset .
5912	Combine individual groups into a single one and write output .
5913	Concatenate input index files .
5914	Process make_ndx command and return name and temp index file .
5915	Process a range selection .
5916	Translate selection for a single res to make_ndx syntax .
5917	Simple tests to flag problems with a make_ndx run .
5918	Path for an output file .
5919	Write compact xtc that is fitted to the tpr reference structure .
5920	Write xtc that is fitted to the tpr reference structure .
5921	Strip water and fit to the remaining system .
5922	Create a top level logger .
5923	Reads and parses the configuration file .
5924	Prepare a default GromacsWrapper global environment .
5925	Check if templates directories are setup and issue a warning and help .
5926	Get tool names from all configured groups .
5927	Dict of variables that we make available as globals in the module .
5928	Return option as an expanded path .
5929	Return the textual representation of logging level option or the number .
5930	Use . collection as extension unless provided
5931	Scale dihedral angles
5932	Scale improper dihedrals
5933	Convert string x to the most useful type i . e . int float or unicode string .
5934	Return view of the recarray with all int32 cast to int64 .
5935	Slow conversion of a recarray into a list of records with python types .
5936	Parse colour specification
5937	Transform arguments and return them as a list suitable for Popen .
5938	Print help ; same as using ? in ipython . long = True also gives call signature .
5939	Add switches as options with value True to the options dict .
5940	Build list of arguments from the dict ; keys must be valid gromacs flags .
5941	Combine arguments and turn them into gromacs tool arguments .
5942	Extract standard gromacs doc
5943	Convert input to a numerical type if possible .
5944	Detect if obj is a stream .
5945	Converts between 3 - letter and 1 - letter amino acid codes .
5946	Context manager to execute a code block in a directory .
5947	Unlink path but do not complain if file does not exist .
5948	Remove legend for axes or gca .
5949	Supply a file name for the class object .
5950	If a file exists then continue with the action specified in resolve .
5951	Primitive string formatter .
5952	Start logging of messages to file and console .
5953	Stop logging to logfile and console .
5954	Factory for GromacsCommand derived types .
5955	Find executables in a path .
5956	Load Gromacs 4 . x tools automatically using some heuristic .
5957	Takes one or more index files and optionally one structure file and returns a path for a new merged index file .
5958	Create a array which masks jumps > = threshold .
5959	Represent data as a masked array .
5960	Correlation time of data .
5961	Set and change the parameters for calculations with correlation functions .
5962	Read and cache the file as a numpy array .
5963	Plot xvg file data .
5964	Build Gromacs topology files from pdb .
5965	Make index file with the special groups .
5966	Find vdwradii . dat and add special entries for lipids .
5967	Put protein into box add water add counter - ions .
5968	Energy minimize the system .
5969	Run multiple energy minimizations one after each other .
5970	Set up MD with position restraints .
5971	Set up equilibrium MD .
5972	Write scripts for queuing systems .
5973	Generate a array job .
5974	Primitive queuing system detection ; only looks at suffix at the moment .
5975	Returns the atom object corresponding to an atom number
5976	Compute the total number of unmasked regular pixels in a masks .
5977	Compute an annular masks from an input inner and outer masks radius and regular shape .
5978	Compute a blurring masks from an input masks and psf shape .
5979	Compute a 1D array listing all edge pixel indexes in the masks . An edge pixel is a pixel which is not fully \ surrounding by False masks values i . e . it is on an edge .
5980	Bin up an array to coarser resolution by binning up groups of pixels and using their sum value to determine \ the value of the new pixel .
5981	Setup a figure for plotting an image .
5982	Output the figure either as an image on the screen or to the hard - disk as a . png or . fits file .
5983	Output a figure which consists of a set of subplot either as an image on the screen or to the hard - disk as a \ . png file .
5984	Generate an image psf shape tag to customize phase names based on size of the image PSF that the original PSF \ is trimmed to for faster run times .
5985	Generate an inversion psf shape tag to customize phase names based on size of the inversion PSF that the \ original PSF is trimmed to for faster run times .
5986	Generate a tag for the alignment of the geometry of the bulge and disk of a bulge - disk system to customize \ phase names based on the bulge - disk model . This adds together the bulge_disk tags generated in the 3 functions above
5987	This function determines whether the tracer should compute the deflections at the next plane .
5988	Given a plane and scaling factor compute a set of scaled deflections .
5989	For a deflection stack comput a new grid stack but subtracting the deflections
5990	From the pixel - neighbors setup the regularization matrix using the constant regularization scheme .
5991	From the pixel - neighbors setup the regularization matrix using the weighted regularization scheme .
5992	Open a matplotlib figure and plot the array of data on it .
5993	Get the minimum and maximum of the normalization of the array which sets the lower and upper limits of the \ colormap .
5994	Setup the colorbar of the figure specifically its ticksize and the size is appears relative to the figure .
5995	Plot the mask of the array on the figure .
5996	Plot the borders of the mask or the array on the figure .
5997	Plot a set of points over the array of data on the figure .
5998	Plot a grid of points over the array of data on the figure .
5999	The mapping matrix is a matrix representing the mapping between every unmasked pixel of a grid and \ the pixels of a pixelization . Non - zero entries signify a mapping whereas zeros signify no mapping .
6000	Compute the mappings between a pixelization s pixels and the unmasked regular - grid pixels . These mappings \ are determined after the regular - grid is used to determine the pixelization .
6001	Compute the mappings between a pixelization s pixels and the unmasked sub - grid pixels . These mappings \ are determined after the regular - grid is used to determine the pixelization .
6002	The 1D index mappings between the regular pixels and Voronoi pixelization pixels .
6003	The 1D index mappings between the sub pixels and Voronoi pixelization pixels .
6004	Setup the random seed . If the input seed is - 1 the code will use a random seed for every run . If it is \ positive that seed is used for all runs thereby giving reproducible results .
6005	Generate a two - dimensional poisson noise_maps - mappers from an image .
6006	Factory for loading the ccd data from . fits files as well as computing properties like the noise - map exposure - time map etc . from the ccd - data .
6007	Factory for loading the image from a . fits file
6008	Factory for loading the noise - map from a . fits file .
6009	Factory for loading the background noise - map from a . fits file .
6010	Factory for loading the Poisson noise - map from a . fits file .
6011	Factory for loading the psf from a . fits file .
6012	Factory for loading the exposure time map from a . fits file .
6013	Factory for loading the background sky from a . fits file .
6014	Load the positions of an image .
6015	Output the positions of an image to a positions . dat file .
6016	The estimated signal - to - noise_maps mappers of the image .
6017	The estimated absolute_signal - to - noise_maps mappers of the image .
6018	Setup the noise - map from a weight map which is a form of noise - map that comes via HST image - reduction and \ the software package MultiDrizzle .
6019	Setup the noise - map from an root - mean square standard deviation map which is a form of noise - map that \ comes via HST image - reduction and the software package MultiDrizzle .
6020	Simulate the PSF as an elliptical Gaussian profile .
6021	Loads a PSF from fits and renormalizes it
6022	Loads the PSF from a . fits file .
6023	Renormalize the PSF such that its data_vector values sum to unity .
6024	Convolve an array with this PSF
6025	Determine the geometry of the rectangular grid by overlaying it over a grid of coordinates such that its \ outer - most pixels align with the grid s outer most coordinates plus a small buffer .
6026	Determine the geometry of the Voronoi pixelization by alligning it with the outer - most coordinates on a \ grid plus a small buffer .
6027	Compute the Voronoi grid of the pixelization using the pixel centers .
6028	Compute the neighbors of every Voronoi pixel as an ndarray of the pixel index s each pixel shares a \ vertex with .
6029	Set the x and y labels of the figure and set the fontsize of those labels .
6030	Decorate a profile method that accepts a coordinate grid and returns a data grid .
6031	For a padded grid - stack and psf compute an unmasked blurred image from an unmasked unblurred image .
6032	Setup a grid - stack of grid_stack from a mask sub - grid size and psf - shape .
6033	Setup a grid - stack of grid_stack from a 2D array shape a pixel scale and a sub - grid size . This grid corresponds to a fully unmasked 2D array .
6034	Setup a grid - stack of masked grid_stack from a mask sub - grid size and psf - shape .
6035	Map a function to all grid_stack in a grid - stack
6036	Map a 1D array the same dimension as the grid to its original masked 2D array .
6037	Map a 1D array the same dimension as the grid to its original masked 2D array and return it as a scaled \ array .
6038	Compute the yticks labels of this grid used for plotting the y - axis ticks when visualizing a regular
6039	Compute the xticks labels of this grid used for plotting the x - axis ticks when visualizing a regular
6040	For an input sub - gridded array map its hyper - values from the sub - gridded values to a 1D regular grid of \ values by summing each set of each set of sub - pixels values and dividing by the total number of sub - pixels .
6041	The 1D index mappings between the unmasked sparse - grid and masked sparse grid .
6042	The 1D index mappings between the masked sparse - grid and unmasked sparse grid .
6043	The 1D index mappings between the regular - grid and masked sparse - grid .
6044	Setup a regular padded grid from a 2D array shape psf - shape and pixel - scale .
6045	Compute a 2D padded blurred image from a 1D padded image .
6046	Map a padded 1D array of values to its original 2D array trimming all edge values .
6047	Map a padded 1D array of values to its padded 2D array .
6048	Determine a set of relocated grid_stack from an input set of grid_stack by relocating their pixels based on the \ borders .
6049	Load a default value for redshift from config and set it as the redshift for source or lens galaxies that have falsey redshifts
6050	Run a fit for each galaxy from the previous phase .
6051	For a 2D array and mask map the values of all unmasked pixels to a 1D array .
6052	Determine the mapping between every masked pixelization - grid pixel and pixelization - grid pixel . This is performed by checking whether each pixelization - grid pixel is within the regular - masks and mapping the indexes .
6053	Determine the mapping between every pixelization - grid pixel and masked pixelization - grid pixel . This is performed by checking whether each pixelization - grid pixel is within the regular - masks and mapping the indexes .
6054	Using the mapping between the regular - grid and unmasked pixelization grid compute the mapping between each regular pixel and the masked pixelization grid .
6055	Use the central arc - second coordinate of every unmasked pixelization grid s pixels and mapping between each pixelization pixel and unmasked pixelization pixel to compute the central arc - second coordinate of every masked pixelization grid pixel .
6056	Resize an array to a new size by extracting a sub - set of the array .
6057	Resize an array to a new size around a central pixel .
6058	Bin up an array to coarser resolution by binning up groups of pixels and using their mean value to determine \ the value of the new pixel .
6059	Write a 2D NumPy array to a . fits file .
6060	Read a 2D NumPy array to a . fits file .
6061	For a given inversion mapping matrix convolve every pixel s mapped regular with the PSF kernel .
6062	Integrate the mass profiles s convergence profile to compute the total mass within a circle of \ specified radius . This is centred on the mass profile .
6063	Integrate the mass profiles s convergence profile to compute the total angular mass within an ellipse of \ specified major axis . This is centred on the mass profile .
6064	Routine to integrate an elliptical light profiles - set axis ratio to 1 to compute the luminosity within a \ circle
6065	Calculate the mass between two circular annuli and compute the density by dividing by the annuli surface area .
6066	Rescale the einstein radius by slope and axis_ratio to reduce its degeneracy with other mass - profiles parameters
6067	Calculate the projected convergence at a given set of arc - second gridded coordinates .
6068	Tabulate an integral over the surface density of deflection potential of a mass profile . This is used in \ the GeneralizedNFW profile classes to speed up the integration procedure .
6069	Compute the intensity of the profile at a given radius .
6070	A parameter derived from Sersic index which ensures that effective radius contains 50% of the profile s total integrated light .
6071	Compute the total luminosity of the galaxy s light profiles within a circle of specified radius .
6072	Compute the total luminosity of the galaxy s light profiles within an ellipse of specified major axis . This is performed via integration of each light profile and is centred oriented and aligned with each light model s individual geometry .
6073	Compute the total angular mass of the galaxy s mass profiles within a circle of specified radius .
6074	Compute the total angular mass of the galaxy s mass profiles within an ellipse of specified major_axis .
6075	The Einstein Radius of this galaxy which is the sum of Einstein Radii of its mass profiles .
6076	The Einstein Mass of this galaxy which is the sum of Einstein Radii of its mass profiles .
6077	Compute a scaled galaxy hyper noise - map from a baseline noise - map .
6078	For a given 1D regular array and blurring array convolve the two using this convolver .
6079	Compute the intensities of a list of galaxies from an input grid by summing the individual intensities \ of each galaxy s light profile .
6080	Compute the convergence of a list of galaxies from an input grid by summing the individual convergence \ of each galaxy s mass profile .
6081	Compute the potential of a list of galaxies from an input grid by summing the individual potential \ of each galaxy s mass profile .
6082	Compute the deflections of a list of galaxies from an input grid by summing the individual deflections \ of each galaxy s mass profile .
6083	Compute the deflections of a list of galaxies from an input sub - grid by summing the individual deflections \ of each galaxy s mass profile .
6084	For a tracer extract the image - plane image of every plane and blur it with the PSF .
6085	For lens data compute the unmasked blurred image of every unmasked unblurred image of each plane . To do this \ this function iterates over all planes to extract their unmasked unblurred images .
6086	For lens data compute the unmasked blurred image of every unmasked unblurred image of every galaxy in each \ plane . To do this this function iterates over all planes and then galaxies to extract their unmasked unblurred \ images .
6087	For a fitting hyper_galaxy_image hyper_galaxy model image list of hyper galaxies images and model hyper galaxies compute their contribution maps which are used to compute a scaled - noise_map map . All quantities are masked 1D arrays .
6088	For a contribution map and noise - map use the model hyper galaxies to compute a scaled noise - map .
6089	Fit lens data with a model tracer automatically determining the type of fit based on the \ properties of the galaxies in the tracer .
6090	Wrap the function in a function that checks whether the coordinates have been transformed . If they have not \ been transformed then they are transformed .
6091	Caches results of a call to a grid function . If a grid that evaluates to the same byte value is passed into the same function of the same instance as previously then the cached result is returned .
6092	Determine the sin and cosine of the angle between the profile s ellipse and the positive x - axis \ counter - clockwise .
6093	The angle between each angle theta on the grid and the profile in radians .
6094	Computes the mapping matrix by iterating over the known mappings between the sub - grid and pixelization .
6095	Compute the mappings between a set of regular - grid pixels and pixelization pixels using information on \ how regular pixels map to their closest pixelization pixel on the image - plane pix - grid and the pixelization s \ pixel centres .
6096	Compute the mappings between a set of sub - grid pixels and pixelization pixels using information on \ how the regular pixels hosting each sub - pixel map to their closest pixelization pixel on the image - plane pix - grid \ and the pixelization s pixel centres .
6097	Integrate the light profile to compute the total luminosity within a circle of specified radius . This is \ centred on the light profile s centre .
6098	Integrate the light profiles to compute the total luminosity within an ellipse of specified major axis . \ This is centred on the light profile s centre .
6099	Routine to integrate the luminosity of an elliptical light profile .
6100	Calculate the intensity of the Gaussian light profile on a grid of radial coordinates .
6101	Calculate the intensity of the Sersic light profile on a grid of radial coordinates .
6102	Calculate the intensity of the cored - Sersic light profile on a grid of radial coordinates .
6103	Compute the total luminosity of all galaxies in this plane within a circle of specified radius .
6104	Compute the total luminosity of all galaxies in this plane within a ellipse of specified major - axis .
6105	Compute the total mass of all galaxies in this plane within a circle of specified radius .
6106	Compute the total mass of all galaxies in this plane within a ellipse of specified major - axis .
6107	Trace this plane s grid_stacks to the next plane using its deflection angles .
6108	Compute the yticks labels of this grid_stack used for plotting the y - axis ticks when visualizing an image \
6109	Compute the xticks labels of this grid_stack used for plotting the x - axis ticks when visualizing an \ image
6110	This is a utility function for the function above which performs the iteration over each plane s galaxies \ and computes each galaxy s unmasked blurred image .
6111	Trace the positions to the next plane .
6112	Creates an instance of Array and fills it with a single value
6113	Extract the 2D region of an array corresponding to the rectangle encompassing all unmasked values .
6114	resized the array to a new shape and at a new origin .
6115	Fit lens data with a normal tracer and sensitivity tracer to determine our sensitivity to a selection of \ galaxy components . This factory automatically determines the type of fit based on the properties of the galaxies \ in the tracers .
6116	Setup a mask where all pixels are unmasked .
6117	Setup a mask where unmasked pixels are within a circle of an input arc second radius and centre .
6118	Setup a mask where unmasked pixels are within an annulus of input inner and outer arc second radii and \ centre .
6119	Setup a mask where unmasked pixels are outside an annulus of input inner and outer arc second radii but \ within a second outer radius and at a given centre .
6120	Setup a mask where unmasked pixels are within an ellipse of an input arc second major - axis and centre .
6121	Setup a mask where unmasked pixels are within an elliptical annulus of input inner and outer arc second \ major - axis and centre .
6122	The zoomed rectangular region corresponding to the square encompassing all unmasked values .
6123	Create an instance of the associated class for a set of arguments
6124	Create a new galaxy prior from a set of arguments replacing the priors of some of this galaxy prior s prior models with new arguments .
6125	Plot the observed image of the ccd data .
6126	Normalise and check a backend path .
6127	Test if a file is located within the given directory .
6128	Find and load the build backend
6129	Invoke the mandatory build_sdist hook .
6130	An interface for get requests that handles errors more gracefully to prevent data loss
6131	Try to convert a tar file containing a sequence of frames saved by the meshcat viewer into a single video file .
6132	Get a json dict of the attributes of this object .
6133	Convenience method to create a file from a string .
6134	Convience method to create a kappa file object from a file on disk
6135	Make api method docs inheritted .
6136	Add a kappa model given in a string to the project .
6137	Add a kappa model from a file at given path to the project .
6138	Set the simulation default simulation parameters .
6139	Check if the current simulation is running .
6140	Block until the simulation is done or timeout seconds exceeded .
6141	Checks the input and output to see if they are valid
6142	Append new samples to the data_capture array and increment the sample counter If length reaches Tcapture then the newest samples will be kept . If Tcapture = 0 then new values are not appended to the data_capture array .
6143	Append new samples to the data_capture_left array and the data_capture_right array and increment the sample counter . If length reaches Tcapture then the newest samples will be kept . If Tcapture = 0 then new values are not appended to the data_capture array .
6144	Add new tic time to the DSP_tic list . Will not be called if Tcapture = 0 .
6145	Add new toc time to the DSP_toc list . Will not be called if Tcapture = 0 .
6146	Design an IIR bandstop filter using scipy . signal . iirdesign . The filter order is determined based on f_pass Hz f_stop Hz and the desired stopband attenuation d_stop in dB all relative to a sampling rate of fs Hz . Mark Wickert October 2016
6147	Cascade frequency response Mark Wickert October 2016
6148	The average of the root values is used when multiplicity is greater than one . Mark Wickert October 2016
6149	Design a windowed FIR bandpass filter in terms of passband critical frequencies f1 < f2 in Hz relative to sampling rate fs in Hz . The number of taps must be provided . Mark Wickert October 2016
6150	Design an FIR lowpass filter using remez with order determination . The filter order is determined based on f_pass Hz fstop Hz and the desired passband ripple d_pass dB and stopband attenuation d_stop dB all relative to a sampling rate of fs Hz . Mark Wickert October 2016 updated October 2018
6151	Design an FIR highpass filter using remez with order determination . The filter order is determined based on f_pass Hz fstop Hz and the desired passband ripple d_pass dB and stopband attenuation d_stop dB all relative to a sampling rate of fs Hz . Mark Wickert October 2016 updated October 2018
6152	Design an FIR bandpass filter using remez with order determination . The filter order is determined based on f_stop1 Hz f_pass1 Hz f_pass2 Hz f_stop2 Hz and the desired passband ripple d_pass dB and stopband attenuation d_stop dB all relative to a sampling rate of fs Hz . Mark Wickert October 2016 updated October 2018
6153	Design an FIR bandstop filter using remez with order determination . The filter order is determined based on f_pass1 Hz f_stop1 Hz f_stop2 Hz f_pass2 Hz and the desired passband ripple d_pass dB and stopband attenuation d_stop dB all relative to a sampling rate of fs Hz . Mark Wickert October 2016 updated October 2018
6154	CD sled position control case study of Chapter 18 .
6155	Cruise control with PI controller and hill disturbance .
6156	Stereo demod from complex baseband at sampling rate fs . Assume fs is 2400 ksps Mark Wickert July 2017
6157	Write FIR Filter Header Files Mark Wickert February 2015
6158	Write FIR Fixed - Point Filter Header Files Mark Wickert February 2015
6159	Write IIR SOS Header Files File format is compatible with CMSIS - DSP IIR Directform II Filter Functions Mark Wickert March 2015 - October 2016
6160	Eye pattern plot of a baseband digital communications waveform .
6161	Sample a baseband digital communications waveform at the symbol spacing .
6162	Generate a complex baseband MPSK signal with pulse shaping .
6163	This function generates
6164	A truncated raised cosine pulse used in digital communications .
6165	A truncated square root raised cosine pulse used in digital communications .
6166	A local version of NumPy s PSD function that returns the plot arrays .
6167	Convert an unsigned integer to a numpy binary array with the first element the MSB and the last element the LSB .
6168	Convert binary array back a nonnegative integer . The array length is the bit width . The first input index holds the MSB and the last holds the LSB .
6169	Filter the signal
6170	Filter the signal using second - order sections
6171	Frequency response plot
6172	Select the proper LockManager based on the current backend used by Celery .
6173	Celery task decorator . Forces the task to have only one running instance at a time .
6174	Removed the lock regardless of timeout .
6175	Actual method to read celery settings from app configuration and initialize the celery instance .
6176	Iterator used to iterate in chunks over an array of size num_samples . At each iteration returns chunksize except for the last iteration .
6177	Reduce with func chunk by chunk the passed pytable array .
6178	Map with func chunk by chunk the input pytable array . The result is stored in the output pytable array out_array .
6179	Build an array of timestamps joining the arrays in ph_times_list . time_block is the duration of each array of timestamps .
6180	Returns a merged timestamp array for Donor + Accept . and bool mask for A .
6181	Load the array data in the . mat file fname .
6182	Return an hash string computed on the PSF data .
6183	Check whether the git executable is found .
6184	Get the Git version .
6185	Returns whether there are uncommitted changes in the working dir .
6186	Get one - line description of HEAD commit for repository in current dir .
6187	Get the HEAD commit SHA1 of repository in current dir .
6188	Print the last commit line and eventual uncommitted changes .
6189	Get filenames for donor and acceptor timestamps for the given parameters
6190	Store parameters in params in h5file . root . parameters .
6191	Box volume in m^3 .
6192	Generate a list of Particle objects .
6193	Add particles with diffusion coefficient D at random positions .
6194	Return pathlib . Path for a data - file with given hash and prefix .
6195	Return a RandomState equal to the input unless rs is None .
6196	Compact representation of all simulation parameters
6197	A dict containing all the simulation numeric - parameters .
6198	Print on - disk array sizes required for current set of parameters .
6199	Simulate Brownian motion trajectories and emission rates .
6200	Simulate timestamps from emission trajectories .
6201	Compute one timestamps array for a mixture of N populations .
6202	Merge donor and acceptor timestamps and particle arrays .
6203	D and A emission rates for two populations .
6204	Diffusion coefficients of the two specified populations .
6205	2 - tuple of slices for selection of two populations .
6206	Compute hash of D and A timestamps for single - step D + A case .
6207	Merge donor and acceptor timestamps computes ts a_ch part .
6208	Create a smFRET Photon - HDF5 file with current timestamps .
6209	Print the HDF5 attributes for node_name .
6210	Print all the sub - groups in group and leaf - nodes children of group .
6211	Train model on given training examples and return the list of costs after each minibatch is processed .
6212	Generates a plane on the xz axis of a specific size and resolution . Normals and texture coordinates are also included .
6213	Deferred loading of the scene
6214	Loads a gltf json file
6215	Loads a binary gltf file
6216	Checks if the bin files referenced exist
6217	Pre - parse buffer mappings for each VBO to detect interleaved data for a primitive
6218	Get the bounding box for the mesh
6219	Does the buffer interleave with this one?
6220	Create the VBO
6221	Set the 3D position of the camera
6222	Updates the camera vectors based on the current yaw and pitch
6223	Look at a specific point
6224	The standard lookAt method
6225	Set the camera position move state
6226	Set the rotation state of the camera
6227	Translate string into character texture positions
6228	Initialize load and run
6229	Draw all the nodes in the scene
6230	Draw scene and mesh bounding boxes
6231	Applies mesh programs to meshes
6232	Calculate scene bbox
6233	Generates random positions inside a confied box .
6234	Play the music
6235	Get the current position in the music in seconds
6236	Set the current time in the music in seconds causing the player to seek to this location in the file .
6237	Draw framebuffers for debug purposes . We need to supply near and far plane so the depth buffer can be linearized when visualizing .
6238	Add point light
6239	Render light volumes
6240	Render outlines of light volumes
6241	Combine diffuse and light buffer
6242	Load a single shader
6243	Load a texture array
6244	Draw the mesh using the assigned mesh program
6245	Set the current time jumping in the timeline .
6246	Draw function called by the system every frame when the effect is active . This method raises NotImplementedError unless implemented .
6247	Get a program by its label
6248	Get a texture by its label
6249	Get an effect class by the class name
6250	Create a projection matrix with the following parameters . When aspect_ratio is not provided the configured aspect ratio for the window will be used .
6251	Creates a transformation matrix woth rotations and translation .
6252	Creates a normal matrix from modelview matrix
6253	Scan for available templates in effect_templates
6254	Get the absolute path to the root of the demosys package
6255	Load a file in text mode
6256	Get a finder class from an import path . Raises demosys . core . exceptions . ImproperlyConfigured if the finder is not found . This function uses an lru cache .
6257	Find a file in the path . The file may exist in multiple paths . The last found file will be returned .
6258	Update the internal projection matrix based on current values or values passed in if specified .
6259	Draw node and children
6260	Recursive calculation of scene bbox
6261	Swaps buffers incement the framecounter and pull events .
6262	Sets the new size and buffer size internally
6263	Ensure glfw library version is compatible
6264	Creates a 2D quad VAO using 2 triangles with normals and texture coordinates .
6265	Translate the buffer format
6266	Stop the timer
6267	Set the current time . This can be used to jump in the timeline .
6268	Resolve scene loader based on file extension
6269	Pyglet specific callback for window resize events .
6270	Swap buffers increment frame counter and pull events
6271	Creates a sphere .
6272	Headless window currently don t support double buffering . We only increment the frame counter here .
6273	Loads a resource or return existing one
6274	Loads all the data files using the configured finders .
6275	Attempts to assign a loader class to a resource description
6276	Attempts to get a loader
6277	Pyqt specific resize callback .
6278	Draws a frame . Internally it calls the configured timeline s draw method .
6279	Clear the window buffer
6280	Sets the clear values for the window buffer .
6281	Handles the standard keyboard events such as camera movements taking a screenshot closing the window etc .
6282	The standard mouse movement event method . Can be overriden to add new functionality . By default this feeds the system camera with new values .
6283	Calculates the viewport based on the configured aspect ratio in settings . Will add black borders if the window do not match the viewport .
6284	Start the timer
6285	Toggle pause mode
6286	Check if the loader has a supported file extension
6287	Get or create a Track object .
6288	Get all command names in the a folder
6289	Override settings values
6290	Hack in program directory
6291	Hack in texture directory
6292	Hack in a data directory
6293	Render the VAO .
6294	Transform vertices . Stores the output in a single buffer .
6295	Set the index buffer for this VAO
6296	Obtain the moderngl . VertexArray instance for the program . The instance is only created once and cached internally .
6297	Destroy the vao object
6298	Draw code for the mesh . Should be overriden .
6299	Parse the effect package string . Can contain the package python path or path to effect class in an effect package .
6300	Get all effect directories for registered effects .
6301	Get all resources registed in effect packages . These are typically located in resources . py
6302	Registers a single package
6303	Get a package by python path . Can also contain path to an effect .
6304	Find an effect class by class name or full python path to class
6305	Returns the runnable effect in the package
6306	FInd the effect package
6307	Iterate the module attributes picking out effects
6308	Fetch the resource list
6309	Fetch track value for every runnable effect . If the value is > 0 . 5 we draw it .
6310	Load a 2d texture
6311	Initialize a single glsl string containing all shaders
6312	Initialize multiple shader strings
6313	Print the shader lines
6314	Loads this project instance
6315	Takes a list of resource descriptions adding them to the resource pool they belong to scheduling them for loading .
6316	Reload all shader programs with the reloadable flag set
6317	Get components and bytes for an image
6318	Find the last occurance of the file in finders
6319	Checks if we can create the project
6320	Write manage . py in the current directory
6321	Returns the absolute path to template directory
6322	Resolve program loader
6323	Encode a text using arithmetic coding with the provided probabilities .
6324	r Generate a probability dict from the provided text .
6325	Encode a text using arithmetic coding .
6326	r Fill in self . ngcorpus from a Corpus argument .
6327	r Get the count of an n - gram in the corpus .
6328	Build up a corpus entry recursively .
6329	Fill in self . ngcorpus from a Google NGram corpus file .
6330	r Return term frequency .
6331	r Return the Burrows - Wheeler transformed form of a word .
6332	r Return a word decoded from BWT form .
6333	Return the indel distance between two strings .
6334	Return the normalized indel distance between two strings .
6335	Return similarity .
6336	Return absolute distance .
6337	Return the Baystat distance .
6338	Return the Tversky distance between two strings .
6339	Return the longest common subsequence of two strings .
6340	r Return the longest common subsequence similarity of two strings .
6341	Return the prefix similarity of two strings .
6342	r Return the docs in the corpus with sentences flattened .
6343	r Return the raw corpus .
6344	r Calculate the Inverse Document Frequency of a term in the corpus .
6345	Return Paice - Husk stem .
6346	Return the best guess language ID for the word and language choices .
6347	Reassess the language of the terms and call the phonetic encoder .
6348	Apply a set of final rules to the phonetic encoding .
6349	Expand phonetic alternates separated by |s .
6350	Join prefixes & suffixes in cases of alternate phonetic values .
6351	Prepare & join phonetic numbers .
6352	Remove duplicates from a phonetic encoding list .
6353	Remove embedded bracketed attributes .
6354	Apply a phonetic regex if compatible .
6355	Return the index value for a language code .
6356	Return the strcmp95 distance between two strings .
6357	Return the Naval Research Laboratory phonetic encoding of a word .
6358	Return the longest common substring of two strings .
6359	r Return the longest common substring similarity of two strings .
6360	Return the Needleman - Wunsch score of two strings .
6361	Return the matrix similarity of two strings .
6362	Return the PhoneticSpanish coding of word .
6363	Return the NCD between two strings using BWT plus RLE .
6364	Cast to tuple .
6365	Cast to dict .
6366	Return population N .
6367	r Return precision .
6368	r Return gain in precision .
6369	r Return recall .
6370	r Return specificity .
6371	r Return fall - out .
6372	r Return accuracy .
6373	r Return gain in accuracy .
6374	r Return logarithmic mean of precision & recall .
6375	Return CLEF German stem .
6376	Return the simplest Sift4 distance between two terms .
6377	Return the normalized typo similarity between two strings .
6378	Return the Manhattan distance between two strings .
6379	Return the normalized Manhattan distance between two strings .
6380	Return the normalized Manhattan similarity of two strings .
6381	Return the Jaro or Jaro - Winkler distance between two strings .
6382	Return the normalized Hamming similarity of two strings .
6383	Return the skeleton key .
6384	Calculate the mean pairwise similarity of a collection of strings .
6385	Calculate the pairwise similarity statistics a collection of strings .
6386	Return the R1 region as defined in the Porter2 specification .
6387	Return the R2 region as defined in the Porter2 specification .
6388	Return True iff term ends in a short syllable .
6389	Return True iff term is a short word .
6390	Return Porter helper function _sb_has_vowel value .
6391	Return the eudex phonetic hash of a word .
6392	Return the Q - Grams in src & tar .
6393	Return the NCD between two strings using LZMA compression .
6394	Return the Levenshtein similarity of two strings .
6395	Return the omission key .
6396	Return normalized Minkowski similarity of two strings .
6397	r Return the cosine similarity of two strings .
6398	Return the Monge - Elkan distance between two strings .
6399	Return the Phonem code for a word .
6400	Return CLEF Swedish stem .
6401	Undouble endings - kk - dd and - tt .
6402	Return string fingerprint .
6403	Convert IPA to features .
6404	Get a feature vector .
6405	Compare features .
6406	Return the length similarity of two strings .
6407	r Return harmonic mean .
6408	r Return logarithmic mean .
6409	r Return Seiffert s mean .
6410	r Return Lehmer mean .
6411	r Return Heronian mean .
6412	Return arithmetic - geometric mean .
6413	Return geometric - harmonic mean .
6414	Return arithmetic - geometric - harmonic mean .
6415	Return median .
6416	r Calculate the variance .
6417	Return the stem of a word according to the Schinke stemmer .
6418	Return the normalized Editex similarity of two strings .
6419	Return the NCD between two strings using arithmetic coding .
6420	Read fn and return the contents .
6421	Return the FONEM code of a word .
6422	Return a word with punctuation stripped out .
6423	Return the normalized Synoname distance between two words .
6424	r Return the Jaccard similarity of two strings .
6425	Return the Tanimoto distance between two strings .
6426	Return the normalized common Sift4 similarity of two terms .
6427	Return the NCD between two strings using bzip2 compression .
6428	Return the MetaSoundex code for a word .
6429	Return the S - stemmed form of a word .
6430	Return the Ratcliff - Obershelp similarity of two strings .
6431	Return the MRA comparison rating of two strings .
6432	Return the Parmar - Kumbharana encoding of a word .
6433	Calculate the Hamming distance between the Eudex hashes of two terms .
6434	Return normalized Hamming distance between Eudex hashes of two terms .
6435	Return normalized Hamming similarity between Eudex hashes of two terms .
6436	Yield the next Fibonacci number .
6437	Calculate the distance between the Eudex hashes of two terms .
6438	Return normalized distance between the Eudex hashes of two terms .
6439	Return the Euclidean distance between two strings .
6440	Return the normalized Euclidean distance between two strings .
6441	Return the normalized Euclidean similarity of two strings .
6442	Return Lovins condition K .
6443	Return Lovins condition N .
6444	Return Lovins condition S .
6445	Return Lovins condition X .
6446	Return Lovins condition BB .
6447	Return Lovins stem .
6448	Return the NCD between two strings using zlib compression .
6449	Return Pylint badge color .
6450	Return pydocstyle badge color .
6451	Return flake8 badge color .
6452	Return the bag distance between two strings .
6453	Return the normalized bag distance between two strings .
6454	Return CLEF German stemmer plus stem .
6455	Return the MLIPNS distance between two strings .
6456	Return a similarity of two strings .
6457	Return a distance between two strings .
6458	Return Porter helper function _m_degree value .
6459	Return Porter helper function _has_vowel value .
6460	Return Porter helper function _ends_in_doubled_cons value .
6461	Return Porter helper function _ends_in_cvc value .
6462	Symmetrical logarithmic scale .
6463	Show usage and available curve functions .
6464	Show usage and available palettes .
6465	Get the current terminal size .
6466	Get the escape sequence for indexed color index .
6467	Return the escape sequence for the selected Control Sequence .
6468	Return a value wrapped in the selected CSI and does a reset .
6469	Read points from istream and output to ostream .
6470	Consume data from a line .
6471	Add a set of data points .
6472	Generate a color ramp for the current screen height .
6473	Convert the input size to human readable short form .
6474	Run the filter function on the provided points .
6475	Resolve the points to make a line between two points .
6476	Set a text value in the screen canvas .
6477	Render graph to stream .
6478	Normalised data points using numpy .
6479	Normalised data points using pure Python .
6480	Zero crossing value .
6481	used when allocating memory ingame
6482	Loads the class from the class_path string
6483	process pagination requests from request parameter
6484	Create separate dictionary of supported filter values provided
6485	Search view for http requests
6486	Search for courses
6487	Provide resultset in our desired format from elasticsearch results
6488	Return field to apply into filter if an array then use a range otherwise look for a term match
6489	We have a field_dictionary - we want to match the values for an elasticsearch match query This is only potentially useful when trying to tune certain search operations
6490	We have a filter_dictionary - this means that if the field is included and matches then we can include OR if the field is undefined then we assume it is safe to include
6491	Based on values in the exclude_dictionary generate a list of term queries that will filter out unwanted results .
6492	We have a list of terms with which we return facets
6493	fetch mapped - items structure from cache
6494	set new mapped - items structure into cache
6495	Logs indexing errors and raises a general ElasticSearch Exception
6496	Interfaces with the elasticsearch mappings for the index prevents multiple loading of the same mappings from ES when called more than once
6497	Implements call to add documents to the ES index Note the call to _check_mappings which will setup fields with the desired mappings
6498	Implements call to remove the documents from the index
6499	Implements call to search the index for the desired content .
6500	Call the search engine with the appropriate parameters
6501	Course Discovery activities against the search engine index of course details
6502	Used by default implementation for finding excerpt
6503	Used by default property excerpt
6504	decorate the matches within the excerpt
6505	Called during post processing of result Any properties defined in your subclass will get exposed as members of the result json from the search
6506	Called from within search handler . Finds desired subclass and decides if the result should be removed and adds properties derived from the result information
6507	Property to display a useful excerpt representing the matches within the results
6508	Called from within search handler Finds desired subclass and adds filter information based upon user information
6509	Called from within search handler Finds desired subclass and calls initialize method
6510	Opens data file and for each line calls _eat_name_line
6511	Parses one line of data file
6512	Sets gender and relevant country values for names dictionary of detector
6513	Finds the most popular gender for the given name counting by given counter
6514	Returns best gender for the given name and country pair
6515	Writes the specified string to the output target of the report .
6516	Executes the suite of TidyPy tools upon the project and returns the issues that are found .
6517	Executes the configured suite of issue reports .
6518	Determines whether or not the specified file is excluded by the project s configuration .
6519	Determines whether or not the specified directory is excluded by the project s configuration .
6520	A generator that produces a sequence of paths to files in the project that matches the specified filters .
6521	A generator that produces a sequence of paths to directories in the project that matches the specified filters .
6522	Adds an issue to the collection .
6523	Returns the number of issues in the collection .
6524	Retrieves the issues in the collection .
6525	Retrieves the issues in the collection grouped into buckets according to the key generated by the keyfunc .
6526	A convenience method for parsing a TOML - serialized configuration .
6527	Retrieves the TidyPy tools that are available in the current Python environment .
6528	Retrieves the TidyPy issue reports that are available in the current Python environment .
6529	Retrieves the TidyPy configuration extenders that are available in the current Python environment .
6530	Clears out the cache of TidyPy configurations that were retrieved from outside the normal locations .
6531	Produces a TidyPy configuration that incorporates the configuration files stored in the current user s home directory .
6532	Produces a TidyPy configuration using the pyproject . toml in the project s directory .
6533	Produces the Tidypy configuration to use for the specified project .
6534	Merges the contents of two lists into a new list .
6535	Recursively merges the contents of two dictionaries into a new dictionary .
6536	Prints the specified string to stderr .
6537	A context manager that will append the specified paths to Python s sys . path during the execution of the block .
6538	Compiles a list of regular expressions .
6539	Determines whether or not the target string matches any of the regular expressions specified .
6540	Retrieves the contents of the specified file .
6541	Retrieves the AST of the specified file .
6542	Called when an individual tool completes execution .
6543	Execute an x3270 command
6544	terminates the underlying x3270 subprocess . Once called this Emulator instance must no longer be used .
6545	Return bool indicating connection state
6546	Connect to a host
6547	Wait until the screen is ready the cursor has been positioned on a modifiable field and the keyboard is unlocked .
6548	move the cursor to the given co - ordinates . Co - ordinates are 1 based as listed in the status area of the terminal .
6549	clears the field at the position given and inserts the string tosend
6550	Construct a constraint from a validation function .
6551	Construct a constraint from valid configurations .
6552	Check that a solution satisfies the constraint .
6553	Fix the value of a variable and remove it from the constraint .
6554	Flip a variable in the constraint .
6555	Create a copy .
6556	Create a new constraint that is the projection onto a subset of the variables .
6557	For dwavebinarycsp to be functional at least one penalty model factory has to be installed . See discussion in setup . py for details .
6558	Add a constraint .
6559	Build a binary quadratic model with minimal energy levels at solutions to the specified constraint satisfaction problem .
6560	create a bqm for a constraint with only one variable
6561	create a bqm for a constraint with two variables .
6562	Iterate over complete graphs .
6563	Load a constraint satisfaction problem from a . cnf file .
6564	AND gate .
6565	XOR gate .
6566	Half adder .
6567	Full adder .
6568	Random XOR constraint satisfaction problem .
6569	Work out if a function is callable with some args or not .
6570	Allows a function to be used as either a decorator with args or called as a normal function .
6571	Adds a model chooser definition to the registry .
6572	Generates a model chooser definition from a model and adds it to the registry .
6573	Get audio - related fields
6574	Parse additional url fields and map them to inputs
6575	Convert a list of JSON values to a list of models
6576	Populate all fields of a model with data
6577	Convert one JSON value to a model object
6578	Common repr logic for subclasses to hook
6579	Write command to remote process
6580	Ensure player backing process is started
6581	Play a new song from a Pandora model
6582	Play the station until something ends it
6583	Set stdout to non - blocking
6584	Format a station menu and make the user select a station
6585	Input callback handles key presses
6586	Function decorator implementing retrying logic .
6587	Iterate over a finite iterator forever
6588	Gather user input and convert it to an integer
6589	open the drop box
6590	put a task
6591	return pairs of package indices and results of all tasks
6592	return pairs of package indices and results of finished tasks
6593	return a pair of a package index and result of a task
6594	run the event loops in the background .
6595	Return pairs of run ids and results of finish event loops .
6596	Return a pair of a run id and a result .
6597	Return pairs of run ids and results .
6598	wait until all event loops end and returns the results .
6599	Convert key_vals_dict to tuple_list .
6600	Open the working area
6601	Put a package
6602	Collect the result of a task
6603	Returns the full path of the package
6604	Returns the relative path of the result
6605	Returns the full path of the result
6606	Submit multiple jobs
6607	Return the run IDs of the finished jobs
6608	Wait until all jobs finish and return the run IDs of the finished jobs
6609	Provide the run IDs of failed jobs
6610	return the array . array objects for the branch and its counter branch
6611	put a task and its arguments
6612	put a list of tasks and their arguments
6613	return a list of pairs of IDs and results of finished tasks .
6614	return a pair of an ID and a result of a task .
6615	return a list of pairs of IDs and results of all tasks .
6616	return a list results of all tasks .
6617	expand a path config
6618	expand a path config given as a tuple
6619	check if the jobs are running and return a list of pids for finished jobs
6620	wait until all jobs finish and return a list of pids
6621	return the ROOT . vector object for the branch .
6622	Ensure all config - time files have been generated . Return a dictionary of generated items .
6623	unpack the specified tarball url into the specified directory
6624	return a list of Version objects each with a tarball URL set
6625	return a list of GithubComponentVersion objects for all tags
6626	return a list of GithubComponentVersion objects for the tip of each branch
6627	Returns a decorator to swallow a requests exception for modules that are not accessible without logging in and turn it into an Unavailable exception .
6628	Try to unpublish a recently published version . Return any errors that occur .
6629	Read a list of files . Their configuration values are merged with preference to values from files earlier in the list .
6630	return a configuration value
6631	Set a configuration value . If no filename is specified the property is set in the first configuration file . Note that if a filename is specified and the property path is present in an earlier filename then set property will be hidden .
6632	indicate whether the current item is the last one in a generator
6633	validate source directory names in components
6634	print information about outdated modules return 0 if there is nothing to be done and nonzero otherwise
6635	Test if this module ignores the file at path which must be a path relative to the root of the module .
6636	Publish to the appropriate registry return a description of any errors that occured or None if successful . No VCS tagging is performed .
6637	Try to un - publish the current version . Return a description of any errors that occured or None if successful .
6638	Return the specified script command . If the first part of the command is a . py file then the current python interpreter is prepended .
6639	Run the specified script from the scripts section of the module . json file in the directory of this module .
6640	Check if this module has any dependencies with the specified name in its dependencies list or in target dependencies for the specified target
6641	Check if this module or any of its dependencies have a dependencies with the specified name in their dependencies or in their targetDependencies corresponding to the specified target .
6642	Retrieve and install all the dependencies of this component and its dependencies recursively or satisfy them from a collection of available_components or from disk .
6643	Some components must export whole directories full of headers into the search path . This is really really bad and they shouldn t do it but support is provided as a concession to compatibility .
6644	return a list of GitCloneVersion objects for tags which are valid semantic version idenfitifiers .
6645	merge dictionaries of dictionaries recursively with elements from dictionaries earlier in the argument sequence taking precedence
6646	create a new nested dictionary object with the same structure as dictionary but with all scalar values replaced with value
6647	returns pack . DependencySpec for the base target of this target ( or None if this target does not inherit from another target .
6648	load the configuration information from the target hierarchy
6649	Return true if this target inherits from the named target ( directly or indirectly . Also returns true if this target is the named target . Otherwise return false .
6650	Execute the given command returning an error message if an error occured or None if the command was succesful .
6651	Execute the commands necessary to build this component and all of its dependencies .
6652	Return the builddir - relative path of program if only a partial path is specified . Returns None and logs an error message if the program is ambiguous or not found
6653	Launch the specified program . Uses the start script if specified by the target attempts to run it natively if that script is not defined .
6654	Prune the cache
6655	return decorator to prune cache after calling fn with a probability of p
6656	Calibrate noisy variance estimates with empirical Bayes .
6657	Derive samples used to create trees in scikit - learn RandomForest objects .
6658	Helper function that performs the core computation
6659	Helper functions that implements bias correction
6660	Calculate error bars from scikit - learn RandomForest estimators .
6661	Generates a self - signed certificate for use in an internal development environment for testing SSL pages .
6662	Creates a certificate signing request to be submitted to a formal certificate authority to generate a certificate .
6663	Reads the expiration date of a local crt file .
6664	Scans through all local . crt files and displays the expiration dates .
6665	Confirms the key CSR and certificate files all match .
6666	Recursively merges two dictionaries .
6667	Compares the local version against the latest official version on PyPI and displays a warning message if a newer release is available .
6668	Automatically includes all submodules and role selectors in the top - level fabfile using spooky - scary black magic .
6669	Decorator declaring the wrapped function to be a new - style task .
6670	Decorator for registering a satchel method as a Fabric task .
6671	Check if a path exists and is a file .
6672	Check if a path exists and is a directory .
6673	Check if a path exists and is a symbolic link .
6674	Get the owner name of a file or directory .
6675	Get the user s umask .
6676	Upload a template file .
6677	Compute the MD5 sum of a file .
6678	Get the lines of a remote file ignoring empty or commented ones
6679	Return the time of last modification of path . The return value is a number giving the number of seconds since the epoch
6680	Copy a file or directory
6681	Move a file or directory
6682	Remove a file or directory
6683	Require a file to exist and have specific contents and properties .
6684	Determines if a new release has been made .
6685	Upgrade all packages skip obsoletes if obsoletes = 0 in yum . conf .
6686	Check if an RPM package is installed .
6687	Install one or more RPM packages .
6688	Install a group of packages .
6689	Remove an existing software group .
6690	Get the list of yum repositories .
6691	Uploads media to an Amazon S3 bucket using s3sync .
6692	Issues invalidation requests to a Cloudfront distribution for the current static media bucket triggering it to reload the specified paths from the origin .
6693	Gets an S3 bucket of the given name creating one if it doesn t already exist .
6694	Configures the server to use a static IP .
6695	Upgrade all packages .
6696	Check if a package is installed .
6697	Install one or more packages .
6698	Enable unattended package installation by preseeding debconf parameters .
6699	Get the state of dkpg selections .
6700	Check if the given key id exists in apt keyring .
6701	Trust packages signed with this public key .
6702	Check if a group exists .
6703	Responds to a forced password change via passwd prompts due to password expiration .
6704	Adds the user to the given list of groups .
6705	Creates a user with the given username .
6706	Forces the user to change their password the next time they login .
6707	Run a remote command as the root user .
6708	Iteratively builds a file hash without loading the entire file into memory . Designed to process an arbitrary binary file .
6709	Run inadyn from the commandline to test the configuration .
6710	Opens an SSH connection .
6711	Display percent of disk usage .
6712	Creates an SSH tunnel .
6713	Install the latest version of setuptools _ .
6714	Install setuptools from scratch using installer
6715	Install Python packages with easy_install .
6716	Installs all the necessary packages necessary for managing virtual environments with pip .
6717	Returns true if the virtualenv tool is installed .
6718	Returns true if the virtual environment has been created .
6719	Lists the packages that require the given package .
6720	Creates the virtual environment .
6721	Returns all requirements files combined into one string .
6722	Retrieves all virtual machines instances in the current environment .
6723	Creates and saves an EC2 key pair to a local PEM file .
6724	Determines if a virtual machine instance exists .
6725	Creates a virtual machine instance .
6726	Permanently erase one or more VM instances from existence .
6727	Retrieves the instance name associated with the current host string .
6728	Deletes and recreates one or more VM instances .
6729	Generates a rsync of all deployable code .
6730	Populates the global env variables with custom default settings .
6731	Dynamically creates a module with the given name .
6732	Utility to take the methods of the instance of a class instance and add them as functions to a module module_name so that Fabric can find and call them . Call this at the bottom of a module after the class definition .
6733	Converts a string of comma delimited values and returns a list .
6734	Given the function name looks up the method for dynamically retrieving host data .
6735	Writes the given content to a local temporary file .
6736	An improved version of fabric . operations . reboot with better error handling .
6737	Returns a subset of the env dictionary containing only those keys with the name prefix .
6738	Recursively finds the most recent timestamp in the given directory .
6739	Returns a subset of the env dictionary keys that differ either being added deleted or changed between old and new .
6740	Returns the packager detected on the remote system .
6741	Returns a named tuple describing the operating system on the remote host .
6742	Renders the given template to a string .
6743	Returns a template to a local file . If no filename given a temporary filename will be generated and returned .
6744	Returns a template to a remote file . If no filename given a temporary filename will be generated and returned .
6745	Iterates over sites safely setting environment variables for each site .
6746	perform topo sort on elements .
6747	Returns a list of hosts that have been configured to support the given site .
6748	Returns a copy of the global environment with all the local variables copied back into it .
6749	Context manager that hides the command prefix and activates dryrun to capture all following task commands to their equivalent Bash outputs .
6750	Adds this satchel to the global registeries for fast lookup from other satchels .
6751	Removes this satchel from global registeries .
6752	Returns an ordered list of all task names .
6753	Retrieves the cached local renderer .
6754	Returns a dictionary of satchels used in the current configuration excluding ourselves .
6755	Returns a version of env filtered to only include the variables in our namespace .
6756	Returns true if the given parameter with name key has transitioned to the given value .
6757	Reboots the server and waits for it to come back .
6758	Loads settings for the target site .
6759	Returns a list of all required packages .
6760	Returns true if at least one tracker detects a change .
6761	The standard method called to apply functionality when the manifest changes .
6762	Write the file used to store login credentials for PostgreSQL .
6763	Dumps and loads a database snapshot simultaneously . Requires that the destination server has direct database access to the source server .
6764	Delete a PostgreSQL database .
6765	Directly transfers a table between two databases .
6766	Get the list of network interfaces . Will return all datalinks on SmartOS .
6767	Get the IPv4 address assigned to an interface .
6768	Preparse the packaging system for installations .
6769	Installs system packages listed in apt - requirements . txt .
6770	Installs system packages listed in yum - requirements . txt .
6771	Displays all packages required by the current role based on the documented services provided .
6772	Installs system packages listed as required by services this host uses .
6773	Uninstalls all blacklisted packages .
6774	Writes entire crontab to the host .
6775	Forcibly kills Rabbit and purges all its queues .
6776	Installs and configures RabbitMQ .
6777	Returns a generator yielding all the keys that have values that differ between each dictionary .
6778	Given a list of components re - orders them according to inter - component dependencies so the most depended upon are first .
6779	Returns a generator yielding the named functions needed for a deployment .
6780	Returns the path to the manifest file .
6781	Returns a dictionary representing the current configuration state .
6782	Returns a dictionary representing the previous configuration state .
6783	Marks the remote server as currently being deployed to .
6784	Unmarks the remote server as currently being deployed to .
6785	Update the thumbprint on the remote server but execute no satchel configurators .
6786	Calculates the components functions that need to be executed for a deployment .
6787	Inspects differences between the last deployment and the current code state .
6788	Executes all satchel configurators to apply pending changes to the server .
6789	Retrieves the Django settings dictionary .
6790	Runs the Django createsuperuser management command .
6791	Runs the Dango loaddata management command .
6792	A generic wrapper around Django s manage command .
6793	Loads Django settings for the current site and sets them so Django internals can be run .
6794	Opens a Django focussed Python shell . Essentially the equivalent of running manage . py shell .
6795	Runs the standard Django syncdb command for one or more sites .
6796	Starts a Django management command in a screen .
6797	Retrieves the most recent timestamp of the media in the static root .
6798	Looks up the root login for the given database on the given host and sets it to environment variables .
6799	Renders local settings for a specific database .
6800	Return free space in bytes .
6801	Loads database parameters from a specific named set .
6802	Determines if there s enough space to load the target database .
6803	Sets connection parameters to localhost if not set already .
6804	Downloads the latest Raspbian image and writes it to a microSD card .
6805	Downloads the latest Ubuntu image and writes it to a microSD card .
6806	Creates an image for running Raspbian in a QEMU virtual machine .
6807	Creates a box for easily spinning up a virtual machine with Vagrant .
6808	Configures HDMI to support hot - plugging so it ll work even if it wasn t plugged in when the Pi was originally powered up .
6809	Enables access to the camera .
6810	Some images purporting to support both the Pi2 and Pi3 use the wrong kernel modules .
6811	Runs methods services have requested be run before each deployment .
6812	Applies routine typically application - level changes to the service .
6813	Runs methods services have requested be run before after deployment .
6814	Applies one - time settings changes to the host usually to initialize the service .
6815	Enables all modules in the current module list . Does not disable any currently enabled modules not in the list .
6816	Based on the number of sites per server and the number of resources on the server calculates the optimal number of processes that should be allocated for each WSGI site .
6817	Instantiates a new local renderer . Override this to do any additional initialization .
6818	Installs users for basic httpd auth .
6819	Uploads select media to an Apache accessible directory .
6820	Installs the mod - evasive Apache module for combating DDOS attacks .
6821	Installs the mod - security Apache module .
6822	Installs the mod - rpaf Apache module .
6823	Forwards all traffic to a page saying the server is down for maintenance .
6824	Supervisor can take a very long time to start and stop so wait for it .
6825	Collects the configurations for all registered services and writes the appropriate supervisord . conf file .
6826	Clone a remote Git repository into a new directory .
6827	Add a remote Git repository into a directory .
6828	Fetch changes from the default remote repository .
6829	Fetch changes from the default remote repository and merge them .
6830	Retrieves all commit messages for all commits between the given commit numbers on the current branch .
6831	Retrieves the git commit number of the current head branch .
6832	Get the SSH parameters for connecting to a vagrant VM .
6833	Get the Vagrant version .
6834	Run the following tasks on a vagrant box .
6835	Context manager that sets a vagrant VM as the remote host .
6836	Get the list of vagrant base boxes
6837	Installs Vagrant from the most recent package available from their homepage .
6838	Get the OS distribution ID .
6839	Get the release number of the distribution .
6840	Get the distribution family .
6841	Gets the list of supported locales .
6842	Forcibly terminates all Celery processes .
6843	Sets ownership and permissions for Celery - related files .
6844	This is called for each site to render a Celery config file .
6845	Ensures all tests have passed for this branch .
6846	Returns true if the given host exists on the network . Returns false otherwise .
6847	Deletes all SSH keys on the localhost associated with the current remote host .
6848	Returns the first working combination of username and password for the current host .
6849	Returns true if the host does not exist at the expected location and may need to have its initial configuration set . Returns false if the host exists at the expected location .
6850	Called to set default password login for systems that do not yet have passwordless login setup .
6851	Gets the public IP for a host .
6852	Assigns a name to the server accessible from user space .
6853	Get a partition list for all disk or for selected device only
6854	Get a HDD device by uuid
6855	Check if partition is mounted
6856	Run a MySQL query .
6857	Create a MySQL user .
6858	Check if a MySQL database exists .
6859	Create a MySQL database .
6860	Retrieves the path to the MySQL configuration file .
6861	Enters the root password prompt entries into the debconf cache so we can set them without user interaction .
6862	Drops all views .
6863	This does a cross - match against the TIC catalog on MAST .
6864	This converts the normalized fluxes in the TESS lcdicts to TESS mags .
6865	Reads TESS Ames - format FITS light curve files .
6866	This returns the periodogram plot PNG as base64 plus info as a dict .
6867	This returns the magseries plot PNG as base64 plus arrays as dict .
6868	Finds gaps in the provided time - series and indexes them into groups .
6869	This normalizes the magnitude time - series to a specified value .
6870	Calculate the total SNR of a transit assuming gaussian uncertainties .
6871	Using Carter et al . 2009 s estimate calculate the theoretical optimal precision on mid - transit time measurement possible given a transit of a particular SNR .
6872	Gets the transit start middle and end times for transits in a given time - series of observations .
6873	This gets the out - of - transit light curve points .
6874	This just compresses the sqlitecurve . Should be independent of OS .
6875	This just uncompresses the sqlitecurve . Should be independent of OS .
6876	This just compresses the sqlitecurve in gzip format .
6877	This just uncompresses the sqlitecurve in gzip format .
6878	This validates the sqlitecurve filter string .
6879	This just tries to apply the caster function to castee .
6880	This parses the CSV header from the CSV HAT sqlitecurve .
6881	This parses the header of the LCC CSV V1 LC format .
6882	This describes the LCC CSV format light curve file .
6883	This reads a HAT data server or LCC - Server produced CSV light curve into an lcdict .
6884	This finds the time gaps in the light curve so we can figure out which times are for consecutive observations and which represent gaps between seasons .
6885	This is called when we re executed from the commandline .
6886	This calculates the M - dwarf subtype given SDSS r - i and i - z colors .
6887	This applies EPD in parallel to all LCs in the input list .
6888	This applies EPD in parallel to all LCs in a directory .
6889	This wraps Astropy s BoxLeastSquares for use with bls_parallel_pfind below .
6890	This reads in a K2 lightcurve in CSV format . Transparently reads gzipped files .
6891	This wraps starfeatures .
6892	This drives the get_starfeatures function for a collection of LCs .
6893	This runs get_starfeatures in parallel for all light curves in lclist .
6894	This runs parallel star feature extraction for a directory of LCs .
6895	This bins the phased mag series using the given binsize .
6896	This is the parallel worker for the function below .
6897	This is a parallel worker for the drivers below .
6898	This drives the periodicfeatures collection for a list of periodfinding pickles .
6899	This runs periodic feature generation in parallel for all periodfinding pickles in the input list .
6900	This runs parallel periodicfeature extraction for a directory of periodfinding result pickles .
6901	This parses the header for a catalog file and returns it as a file object .
6902	This loads the external xmatch catalogs into a dict for use in an xmatch .
6903	Wraps the input angle to 360 . 0 degrees .
6904	Converts from HH MM SS to a decimal value .
6905	Calculates the great circle angular distance between two coords .
6906	This calculates the total proper motion of an object .
6907	This converts from equatorial coords to galactic coords .
6908	This converts from galactic coords to equatorial coordinates .
6909	This returns the image - plane projected xi - eta coords for inra indecl .
6910	This generates fake planet transit light curves .
6911	This generates fake EB light curves .
6912	This generates fake flare light curves .
6913	This generates fake sinusoidal light curves .
6914	This generates fake RRab light curves .
6915	This wraps process_fakelc for make_fakelc_collection below .
6916	This adds variability and noise to all fake LCs in simbasedir .
6917	This finds flares in time series using the method in Walkowicz + 2011 .
6918	This calculates the relative peak heights for first npeaks in ACF .
6919	Calculates the autocorr of mag series for specific lag .
6920	This is an alternative function to calculate the autocorrelation .
6921	This is yet another alternative to calculate the autocorrelation .
6922	This calculates the ACF of a light curve .
6923	This calculates the harmonic AoV theta statistic for a frequency .
6924	This opens a new database connection .
6925	This sets the database connection to autocommit . Must be called before any cursors have been instantiated .
6926	This gets or creates a DB cursor for the current DB connection .
6927	This creates a DB cursor for the current DB connection using a randomly generated handle . Returns a tuple with cursor and handle .
6928	Closes the cursor specified and removes it from the self . cursors dictionary .
6929	This returns a trapezoid transit - shaped function .
6930	This xmatches external catalogs to a collection of checkplots .
6931	This xmatches external catalogs to all checkplots in a directory .
6932	This makes color - mag diagrams for all checkplot pickles in the provided list .
6933	This makes CMDs for all checkplot pickles in the provided directory .
6934	This adds CMDs for each object in cplist .
6935	This adds CMDs for each object in cpdir .
6936	This is a parallel worker for parallel_update_cp_objectinfo .
6937	This updates objectinfo for a list of checkplots .
6938	This updates the objectinfo for a directory of checkplot pickles .
6939	This gets the required keys from the requested file .
6940	This is a simple gaussian .
6941	This is a double inverted gaussian .
6942	This returns a double eclipse shaped function .
6943	Converts given J H Ks mags to a B magnitude value .
6944	Converts given J H Ks mags to a V magnitude value .
6945	Converts given J H Ks mags to an R magnitude value .
6946	Converts given J H Ks mags to an I magnitude value .
6947	Converts given J H Ks mags to an SDSS u magnitude value .
6948	Converts given J H Ks mags to an SDSS g magnitude value .
6949	Converts given J H Ks mags to an SDSS r magnitude value .
6950	Converts given J H Ks mags to an SDSS i magnitude value .
6951	Converts given J H Ks mags to an SDSS z magnitude value .
6952	Calculates the Schwarzenberg - Czerny AoV statistic at a test frequency .
6953	Calculates the false alarm probabilities of periodogram peaks using bootstrap resampling of the magnitude time series .
6954	This just puts all of the period - finders on a single periodogram .
6955	This decides if a value is to be fit for or is fixed in a model fit .
6956	This returns a BATMAN planetary transit model .
6957	Assume priors on all parameters have uniform probability .
6958	This just lists all the filter systems available for TRILEGAL .
6959	This runs the TRILEGAL query for decimal equatorial coordinates .
6960	This reads a downloaded TRILEGAL model file .
6961	This compares two values in constant time .
6962	Overrides the default serializer for JSONEncoder .
6963	handles initial setup .
6964	This handles GET requests to the index page .
6965	This handles GET requests for the current checkplot - list . json file .
6966	This handles initial setup of the RequestHandler .
6967	This smooths the magseries with a Gaussian kernel .
6968	This smooths the magseries with a Savitsky - Golay filter .
6969	This calculates the difference in mags after EPD coefficients are calculated .
6970	Detrends a magnitude series given in mag using accompanying values of S in fsv D in fdv K in fkv x coords in xcc y coords in ycc background in bgv and background error in bge . smooth is used to set a smoothing parameter for the fit function . Does EPD voodoo .
6971	This is the EPD function to fit using a smoothed mag - series .
6972	This is the residual function to minimize using scipy . optimize . least_squares .
6973	Detrends a magnitude series using External Parameter Decorrelation .
6974	This uses a RandomForestRegressor to de - correlate the given magseries .
6975	This calculates the Stellingwerf PDM theta value at a test frequency .
6976	Converts magnitude measurements in Kepler band to SDSS r band .
6977	This writes the lcdict to a Python pickle .
6978	This turns the pickled lightcurve file back into an lcdict .
6979	This filters the Kepler lcdict removing nans and bad observations .
6980	This is the EPD function to fit .
6981	After running detrend_centroid this gets positions of centroids during transits and outside of transits .
6982	This is a helper function for centroid detrending .
6983	This calculates the residual and chi - sq values for a Legendre function fit .
6984	This bins the given light curve file in time using the specified bin size .
6985	This time - bins all the LCs in the list using the specified bin size .
6986	This time bins all the light curves in the specified directory .
6987	This wraps varfeatures .
6988	This runs variability feature extraction for a list of LCs .
6989	This runs variable feature extraction in parallel for all LCs in lclist .
6990	This runs parallel variable feature extraction for a directory of LCs .
6991	This is just a shortened form of the function above for convenience .
6992	This is a flare model function similar to Kowalski + 2011 .
6993	This returns the residual between model mags and the actual mags .
6994	This checks the AWS instance data URL to see if there s a pending shutdown for the instance .
6995	This wraps the function above to allow for loading previous state from a file .
6996	This fits a univariate cubic spline to the phased light curve .
6997	This is the worker for running checkplots .
6998	This drives the parallel execution of runcp for a list of periodfinding result pickles .
6999	This drives the parallel execution of runcp for a directory of periodfinding pickles .
7000	This runs the runpf function .
7001	This drives the overall parallel period processing for a list of LCs .
7002	This runs parallel light curve period finding for directory of LCs .
7003	This collects variability features into arrays for use with the classifer .
7004	This gets the best RF classifier after running cross - validation .
7005	This applys an RF classifier trained using train_rf_classifier to varfeatures pickles in varfeaturesdir .
7006	This plots the training results from the classifier run on the training set .
7007	This returns a summed Fourier cosine series .
7008	This is the chisq objective function to be minimized by scipy . minimize .
7009	This is the residual objective function to be minimized by scipy . leastsq .
7010	This downloads a DSS FITS stamp centered on the coordinates specified .
7011	Makes a plot of periodograms obtained from periodbase functions .
7012	This just writes the lcdict to a pickle .
7013	This just reads a pickle LC . Returns an lcdict .
7014	This concatenates a list of light curves .
7015	This concatenates all text LCs for an objectid with the given aperture .
7016	This concatenates all text LCs for the given object and writes to a pklc .
7017	This is a worker for the function below .
7018	This concatenates all text LCs for the given objectidlist .
7019	This merges all TFA text LCs with separate apertures for a single object .
7020	This reads the binned LC and writes it out to a pickle .
7021	This generates the binnedlc pkls for a directory of such files .
7022	Adds catalog info to objectinfo key of all pklcs in lcdir .
7023	This converts the base64 encoded string to a file .
7024	This reads a checkplot gzipped pickle file back into a dict .
7025	This makes a plot of the LC model fit .
7026	This queries the GAIA TAP service for a list of objects near the coords .
7027	This queries the GAIA TAP service for a list of objects in an equatorial coordinate box .
7028	This queries the GAIA TAP service for a single GAIA source ID .
7029	This is the simplified version not using tau .
7030	This calculates the peak associated with the spectral window function for times and at the specified omega .
7031	This calculates the spectral window function .
7032	This validates if an API key for the specified LCC - Server is available .
7033	This gets a new API key from the specified LCC - Server .
7034	This imports an API key from text and writes it to the cache dir .
7035	This submits a POST query to an LCC - Server search API endpoint .
7036	This runs a cone - search query .
7037	This runs a cross - match search query .
7038	This downloads a JSON form of a dataset from the specified lcc_server .
7039	This gets information on a single object from the LCC - Server .
7040	This lists recent publicly visible datasets available on the LCC - Server .
7041	This lists all light curve collections made available on the LCC - Server .
7042	This calculates the Stetson index for the magseries based on consecutive pairs of observations .
7043	This calculates the weighted mean stdev median MAD percentiles skew kurtosis fraction of LC beyond 1 - stdev and IQR .
7044	This calculates percentiles and percentile ratios of the flux .
7045	This rolls up the feature functions above and returns a single dict .
7046	This runs the pyeebls . eebls function using the given inputs .
7047	This wraps the BLS function for the parallel driver below .
7048	This calculates the SNR depth duration a refit period and time of center - transit for a single period .
7049	This function gets the Fortney mass - radius relation for planets .
7050	This is a parallel worker that reforms light curves for TFA .
7051	This applies TFA in parallel to all LCs in the given list of file names .
7052	This applies TFA in parallel to all LCs in a directory .
7053	This just reads a light curve pickle file .
7054	This imports the module specified .
7055	This adds a new LC format to the astrobase LC format registry .
7056	This opens an SSH connection to the EC2 instance at ip_address .
7057	This gets a file from an S3 bucket .
7058	This uploads a file to S3 .
7059	This deletes a file from S3 .
7060	This creates an SQS queue .
7061	This deletes an SQS queue given its URL
7062	This pushes a dict serialized to JSON to the specified SQS queue .
7063	This gets a single item from the SQS queue .
7064	This deletes a message from the queue effectively acknowledging its receipt .
7065	This deletes EC2 nodes and terminates the instances .
7066	This deletes a spot - fleet cluster .
7067	This puts a single file into a Google Cloud Storage bucket .
7068	This just reads a pickled fake LC .
7069	This runs lcproc . lcvfeatures . parallel_varfeatures on fake LCs in simbasedir .
7070	This calculates precision .
7071	This calculates recall .
7072	This calculates the Matthews correlation coefficent .
7073	This is a parallel grid search worker for the function below .
7074	This runs a variable index grid search per magbin .
7075	This runs periodfinding using several period - finders on a collection of fake LCs .
7076	This is a parallel worker for running period - recovery .
7077	This is a parallel driver for periodicvar_recovery .
7078	This runs a TESS Input Catalog cone search on MAST .
7079	This does a cross - match with TIC .
7080	This runs a TIC search for a specified TIC ID .
7081	This sends an email to addresses informing them about events .
7082	This generates a sinusoidal light curve using a Fourier cosine series .
7083	This returns the residual between the model mags and the actual mags .
7084	Makes the mag - series plot tile for checkplot_png and twolsp_checkplot_png .
7085	Precesses target coordinates ra dec from epoch_one to epoch_two .
7086	This returns True if only one True - ish element exists in iterable .
7087	This calculates the future epochs for a transit given a period and a starting epoch
7088	This converts a UTC JD to a Python datetime object or ISO date string .
7089	Returns BJD_TDB or HJD_TDB for input JD_UTC .
7090	This is a parallel worker for makelclist .
7091	This wraps checkplotlist . checkplot_infokey_worker .
7092	Handle changes from atom ContainerLists
7093	Create the underlying widget .
7094	Initialize the underlying map options .
7095	Add markers polys callouts etc ..
7096	Initialize the info window adapter . Should only be done if one of the markers defines a custom view .
7097	Create the fragment and pull the map reference when it s loaded .
7098	Remove the marker if it was added to the map when destroying
7099	If a child is added we have to make sure the map adapter exists
7100	Convert our options into the actual marker object
7101	Convert our options into the actual circle object
7102	Learn the vocabulary dictionary and return term - document matrix . This is equivalent to fit followed by transform but more efficiently implemented .
7103	Add data to flow
7104	Add transformer to flow and apply transformer to data in flow
7105	Train model with transformed data
7106	Export model and transformers to export_folder
7107	Fit linear model with Stochastic Gradient Descent .
7108	pretty print for confusion matrixes
7109	Given a URL look for the corresponding dataset in the local cache . If it s not there download it . Then return the path to the cached file .
7110	Fit CRF according to X y
7111	Predict class labels for samples in X .
7112	Start LanguageBoard web application
7113	In order to obtain the most likely label for a list of text
7114	Fit KimCNNClassifier according to X y
7115	Return the config files for an environment & cluster specific app .
7116	Yield the sources that are present .
7117	Merge the configuration sources and return the resulting DotDict .
7118	Merge dictionary d2 into d1 overriding entries in d1 with values from d2 .
7119	Return a subset of a dictionary using the specified keys .
7120	Convert obj into a DotDict or list of DotDict .
7121	Return a config subset using the filter defined in the deploy config .
7122	Return an auth token based on the client + service + seed tuple .
7123	Write configuration to the applicaiton directory .
7124	Return True if valid raise ValueError if not
7125	Return the total downloads and the downloads column
7126	Add a final row to rows showing the total downloads
7127	Modify soup so Dash . app can generate TOCs on the fly .
7128	Determine the path from the intersphinx inventory entry
7129	Convert docs from SOURCE to Dash . app s docset format .
7130	We use logging s levels as an easy - to - use verbosity controller .
7131	Determine source and destination using the options .
7132	Create boilerplate files & directories and copy vanilla docs inside .
7133	Add icon to docset
7134	Run the Cell code using the IPython globals and locals
7135	Return a new dict with specified keys excluded from the origional dict
7136	Redirect the stdout
7137	Return a string representation of the Python object
7138	Get type information for a Python object
7139	Returns private spend key . None if wallet is view - only .
7140	Sends a transfer from the default account . Returns a list of resulting transactions .
7141	Sends a batch of transfers from the default account . Returns a list of resulting transactions .
7142	Returns specified balance .
7143	Creates a new address .
7144	Sends a transfer . Returns a list of resulting transactions .
7145	Sends a batch of transfers . Returns a list of resulting transactions .
7146	Convert Monero decimal to atomic integer of piconero .
7147	Discover the proper class and return instance for a given Monero address .
7148	Integrates payment id into the address .
7149	Convert hexadecimal string to mnemonic word representation with checksum .
7150	Calculate hexadecimal representation of the phrase .
7151	Given a mnemonic word string return a string of the computed checksum .
7152	Instantiates a picker registers custom handlers for going back and starts the picker .
7153	Calls pick in a while loop to allow user to pick many options . Returns a list of chosen options .
7154	Create options and verbose options from strings and non - string iterables in options array .
7155	Calls input to allow user to input an arbitrary string . User can go back by entering the go_back string . Works in both Python 2 and 3 .
7156	Assigns function to the operators property of the instance .
7157	If you want to change the core prompters registry you can override this method in a Question subclass .
7158	Add a Question instance to the questions dict . Each key points to a list of Question instances with that key . Use the question kwarg to pass a Question instance if you want or pass in the same args you would pass to instantiate a question .
7159	Asks the next question in the questionnaire and returns the answer unless user goes back .
7160	Returns the next Question in the questionnaire or None if there are no questions left . Returns first question for whose key there is no answer and for which condition is satisfied or for which there is no condition .
7161	Move n questions back in the questionnaire by removing the last n answers .
7162	Formats answers depending on fmt .
7163	Helper method for displaying the answers so far .
7164	Creates a new intent optionally checking the cache first
7165	Adds an entity that matches the given lines .
7166	Loads an entity optionally checking the cache first
7167	Loads an intent optionally checking the cache first
7168	Unload an intent
7169	Unload an entity
7170	Trains all the loaded intents that need to be updated If a cache file exists with the same hash as the intent file the intent will not be trained and just loaded from file
7171	Trains in a subprocess which provides a timeout guarantees everything shuts down properly
7172	Tests all the intents against the query and returns data on how well each one matched against the query
7173	Tests all the intents against the query and returns match data of the best intent
7174	Internal pickleable function used to train objects in another process
7175	Re - apply type annotations from . pyi stubs to your codebase .
7176	Recursively retype files or directories given . Generate errors .
7177	Retype src finding types in pyi_dir . Save in targets .
7178	Given a string with source return the lib2to3 Node .
7179	Given a lib2to3 node return its string representation .
7180	Reapplies the typed_ast node into the lib2to3 tree .
7181	Converts type comments in node to proper annotated assignments .
7182	Parse the fugly signature type comment into AST nodes .
7183	Parse a type comment string into AST nodes .
7184	Copies AST nodes from type_comment into the ast3 . arguments in args .
7185	Copies argument type comments from the legacy long form to annotations in the entire function signature .
7186	Return the type given in expected .
7187	Removes the legacy signature type comment leaving other comments if any .
7188	Returns the offset after which a statement can be inserted to the body .
7189	r Recomputes all line numbers based on the number of \ n characters .
7190	lib2to3 s AST requires unique objects as children .
7191	Get user info for GBDX S3 put into instance vars for convenience .
7192	Equalize and the histogram and normalize value range Equalization is on all three bands not per - band
7193	Match the histogram to existing imagery
7194	entry point for contrast stretching
7195	Calculates Normalized Difference Vegetation Index using NIR and Red of an image .
7196	Calculates Normalized Difference Water Index using Coastal and NIR2 bands for WV02 WV03 . For Landsat8 and sentinel2 calculated by using Green and NIR bands .
7197	Plot the image with MatplotLib
7198	Describe the result set of a catalog search for IDAHO images .
7199	Downloads a native resolution orthorectified chip in tif format from a user - specified catalog id .
7200	Create a leaflet viewer html file for viewing idaho images .
7201	Checks to see if a CatalogID has been ordered or not .
7202	Return a wrapped object that warns about deprecated accesses
7203	Given a name figure out if a multiplex port prefixes this name and return it . Otherwise return none .
7204	Set input values on task
7205	Save output data from any task in this workflow to S3
7206	Generate workflow json for launching the workflow against the gbdx api
7207	Execute the workflow .
7208	Get the task IDs of a running workflow
7209	Cancel a running workflow .
7210	Get stdout from all the tasks of a workflow .
7211	Get stderr from all the tasks of a workflow .
7212	Renders the list of layers to add to the map .
7213	Helper method for handling projection codes that are unknown to pyproj
7214	Show a slippy map preview of the image . Requires iPython .
7215	Lists available and visible GBDX tasks .
7216	Registers a new GBDX task .
7217	Gets definition of a registered GBDX task .
7218	Deletes a GBDX task .
7219	Updates a GBDX task .
7220	Write out a geotiff file of the image
7221	append two required tasks to the given output to ingest to VS
7222	Retrieves an AnswerFactory Recipe by id
7223	Saves an AnswerFactory Recipe
7224	Saves an AnswerFactory Project
7225	Deletes a project by id
7226	Renders a javascript snippet suitable for use as a mapbox - gl line paint entry
7227	Renders a javascript snippet suitable for use as a mapbox - gl fill paint entry
7228	Renders a javascript snippet suitable for use as a mapbox - gl fill - extrusion paint entry
7229	Renders a javascript snippet suitable for use as a mapbox - gl heatmap paint entry
7230	Create a vectors in the vector service .
7231	Create a single vector in the vector service
7232	Retrieves a vector . Not usually necessary because searching is the best way to find & get stuff .
7233	Aggregates results of a query into buckets defined by the agg_def parameter . The aggregations are represented by dicts containing a name key and a terms key holding a list of the aggregation buckets . Each bucket element is a dict containing a term key containing the term used for this bucket a count key containing the count of items that match this bucket and an aggregations key containing any child aggregations .
7234	Renders a mapbox gl map from a vector service query
7235	Renders a mapbox gl map from a vector service query or a list of geojson features
7236	Reads data from a dask array and returns the computed ndarray matching the given bands
7237	Get a random window of a given shape from within an image
7238	Iterate over random windows of an image
7239	Return a subsetted window of a given size centered on a geometry object
7240	Iterate over a grid of windows of a specified shape covering an image .
7241	Subsets the Image by the given bounds
7242	Returns the bounds of a geometry object in pixel coordinates
7243	Creates a geotiff on the filesystem
7244	Finds supported geometry types parses them and returns the bbox
7245	convert mercator bbox to tile index limits
7246	Launches GBDX workflow .
7247	Checks workflow status .
7248	Get stdout for a particular task .
7249	Cancels a running workflow .
7250	Launches GBDX batch workflow .
7251	Checks GBDX batch workflow status .
7252	Orders images from GBDX .
7253	Checks imagery order status . There can be more than one image per order and this function returns the status of all images within the order .
7254	Check the heartbeat of the ordering API
7255	Retrieves the strip footprint WKT string given a cat ID .
7256	Retrieves the strip catalog metadata given a cat ID .
7257	Use the google geocoder to get latitude and longitude for an address string
7258	Perform a catalog search over an address string
7259	Perform a catalog search over a specific point specified by lat lng
7260	Find and return the S3 data location given a catalog_id .
7261	Perform a catalog search
7262	Return the most recent image
7263	interface helper function
7264	Config option name value validator decorator .
7265	Runs the current phase .
7266	Runs the operator matcher test function .
7267	Runs the current operator with the subject arguments to test .
7268	Registers a new operator function in the test engine .
7269	Registers a new attribute only operator function in the test engine .
7270	Register plugin in grappa .
7271	Loads the built - in operators into the global test engine .
7272	Registers one or multiple operators in the test engine .
7273	Set the playback rate of the video as a multiple of the default playback speed
7274	Pause playback if currently playing otherwise start playing if currently paused .
7275	Seek the video by relative_position seconds
7276	Set the video to playback position to position seconds from the start of the video
7277	Set the video position on the screen
7278	Play the video and block whilst the video is playing
7279	Play the video asynchronously returning control immediately to the calling code
7280	Quit the player blocking until the process has died
7281	Returns a response with a template depending if the request is ajax or not and it renders with the given context .
7282	Given a document_field and a form_value this will translate the value to the correct result for mongo to use .
7283	Returns the smallest delimited version of field_key that is an attribute on document .
7284	Can edit this object
7285	Can add this object
7286	Can delete this object
7287	Set the form fields for every key in the form_field_dict .
7288	Given field_key will return value held at self . model_instance . If model_instance has not been provided will return None .
7289	Given a string or a list will return true if the last word or element is a digit . sep is used when a string is given to know what separates one word from another .
7290	Given any number of lists and strings will join them in order as one string separated by the sep kwarg . sep defaults to u _ .
7291	Sets existing data to form fields .
7292	Need to set form data so that validation on all post data occurs and places newly entered form data on the form object .
7293	Generate the form for view .
7294	Genereates a dictionary representation of the list field . Document should be the document the list_field comes from .
7295	Given document generates a dictionary representation of the document . Includes the widget for each for each field in the document .
7296	Choose which widget to display for a field .
7297	Set attributes on the display widget .
7298	Gets the default form field for a mongoenigne field .
7299	Performs filtering against the default queryset returned by mongoengine .
7300	Injects data into the context to replicate CBV ListView .
7301	Creates new mongoengine records .
7302	Returns a list of all mongoadmin implementations for the site
7303	Sets a number of commonly used attributes
7304	Provides permissions for mongoadmin for use in the context
7305	As long as the form is set on the view this method will validate the form and save the submitted data . Only call this if you are posting data . The given success_message will be used with the djanog messages framework if the posted data sucessfully submits .
7306	Given the form_key will evaluate the document and set values correctly for the document given .
7307	Get the existing embedded document if it exists else created it .
7308	1 . Figures out what value the list ought to have 2 . Sets the list
7309	Get the time with TZ enabled
7310	Get the time without TZ enabled
7311	Check Validity of an IP address
7312	Check if IP is local
7313	If we can get a valid IP from the request look up that address in the database to get the appropriate timezone and activate it .
7314	This is the most important method
7315	This method process the filters
7316	Mix all values and make the query
7317	Remember the recipients .
7318	Parse message headers then remove BCC header .
7319	Add boundary parameter to multipart message if they are not present .
7320	Convert a message into a multipart message .
7321	Convert markdown in message text to HTML .
7322	Add the attachments from the message from the commandline options .
7323	Send email message using Python SMTP library .
7324	Create sample template email and database .
7325	Command line interface .
7326	A decorator for defining tail - call optimized functions .
7327	Parses a string of numbers and ranges into a list of integers . Ranges are separated by dashes and inclusive of both the start and end number .
7328	create the base url for the api
7329	Make requests to the REST API
7330	Make requests to the Streaming API
7331	Get the tasks attached to the instance
7332	Run the tasks attached to the instance
7333	properly close the client
7334	upload media in chunks
7335	upload a media on twitter
7336	Take the binding predictions returned by IEDB s web API and parse them into a DataFrame
7337	Given a dictionary mapping unique keys to amino acid sequences run MHC binding predictions on all candidate epitopes extracted from sequences and return a EpitopeCollection .
7338	Hackish way to get the arguments of a function
7339	log an exception and its traceback on the logger defined
7340	Get all the file s metadata and read any kind of file object
7341	Get the size of a file
7342	activates error messages useful during development
7343	Returns new BindingPrediction with updated fields
7344	Get the data from the response
7345	Try to fill the gaps and strip last tweet from the response if its id is that of the first tweet of the last response
7346	Get a temporary oauth token
7347	Open authorize page in a browser print the url if it didn t work
7348	get the access token of the user
7349	parse the responses containing the tokens
7350	Return netChop predictions for each position in each sequence .
7351	Parse netChop stdout .
7352	Converts collection of BindingPrediction objects to DataFrame
7353	This function wraps NetMHC3 and NetMHC4 to automatically detect which class to use . Currently based on running the - h command and looking for discriminating substrings between the versions .
7354	Predict MHC affinity for peptides .
7355	Given a sequence convert it to a comma separated string . If however the argument is a single object return its string representation .
7356	Creates one or more files containing one peptide per line returns names of files .
7357	If peptide lengths not specified then try using the default lengths associated with this predictor object . If those aren t a valid non - empty sequence of integers then raise an exception . Otherwise return the peptide lengths .
7358	Check peptide sequences to make sure they are valid for this predictor .
7359	Given a dictionary mapping sequence names to amino acid strings and an optional list of peptide lengths returns a BindingPredictionCollection .
7360	Given a list of HLA alleles and an optional list of valid HLA alleles return a set of alleles that we will pass into the MHC binding predictor .
7361	Connect to the stream
7362	Create the connection
7363	decorator to handle commands with prefixes
7364	set the environment timezone to the timezone set in your twitter settings
7365	Given a list whose first element is a command name followed by arguments execute it and show timing info .
7366	Run multiple shell commands in parallel write each of their stdout output to files associated with each command .
7367	Custom loads function with an object_hook and automatic decoding
7368	read the data of the response
7369	Find the message shown when someone calls the help command
7370	Check the permissions of the user requesting a command
7371	Script to make pMHC binding predictions from amino acid sequences .
7372	Assume that we re dealing with a human DRB allele which NetMHCIIpan treats differently because there is little population diversity in the DR - alpha gene
7373	return the error if there is a corresponding exception
7374	Get the response data if possible and raise an exception
7375	Decorator to associate a code to an exception
7376	prepare all the arguments for the request
7377	Make sure the user doesn t override the Authorization header
7378	Raise error for keys that are not strings and add the prefix if it is missing
7379	Analyze the text to get the right function
7380	run the function you want
7381	A generator for getting all of the edges without consuming extra memory .
7382	Checks whether there are within - group edges or not .
7383	Renders the axis .
7384	Plots nodes to screen .
7385	Computes the theta along which a group s nodes are aligned .
7386	Identifies the group for which a node belongs to .
7387	Finds the index of the node in the sorted list .
7388	Computes the radial position of the node .
7389	Convenience function to find the node s theta angle .
7390	Draws all of the edges in the graph .
7391	The master function that is called that draws everything .
7392	This function adjusts the start and end angles to correct for duplicated axes .
7393	Guesses an appropriate MODS XML genre type .
7394	Get all publications .
7395	Get a single publication .
7396	Get a publication list .
7397	Renders some basic TeX math to HTML .
7398	Takes a string in BibTex format and returns a list of BibTex entries where each entry is a dictionary containing the entries key - value pairs .
7399	Swap the positions of this object with a reference object .
7400	Move this object up one position .
7401	Move this object down one position .
7402	Move object to a certain position updating all affected objects to move accordingly up or down .
7403	Move this object above the referenced object .
7404	Move this object below the referenced object .
7405	Move this object to the top of the ordered stack .
7406	Move this object to the bottom of the ordered stack .
7407	Load custom links and files from database and attach to publications .
7408	Calculates the quartet weights for the test at a random subsampled chunk of loci .
7409	return tree order
7410	count number of sites with cov = 4 and number of variable sites .
7411	finds loci with sufficient sampling for this test
7412	Write nexus to tmpfile runs phyml tree inference and parses and returns the resulting tree .
7413	return a toyplot barplot of the results table .
7414	Plot pairwise distances between all samples
7415	returns a copy of the pca analysis object
7416	A function to build an input file for the program migrate from an ipyrad . loci file and a dictionary grouping Samples into populations .
7417	updates dictionary with the next . 5M reads from the super long string phylip file . Makes for faster reading .
7418	Make phylip and nexus formats . This is hackish since I m recycling the code whole - hog from pyrad V3 . Probably could be good to go back through and clean up the conversion code some time .
7419	Clean up a bunch of loose files .
7420	Index the reference sequence unless it already exists . Also make a mapping of scaffolds to index numbers for later user in steps 5 - 6 .
7421	Builds a single end cluster from the refmapped data .
7422	1 . Run bedtools to get all overlapping regions 2 . Parse out reads from regions using pysam and dump into chunk files . We measure it out to create 10 chunk files per sample . 3 . If we really wanted to speed this up though it is pretty fast already we could parallelize it since we can easily break the regions into a list of chunks .
7423	Run bedtools to get all overlapping regions . Pass this list into the func get_overlapping_reads which will write fastq chunks to the clust . gz file .
7424	check mean insert size for this sample and update hackersonly . max_inner_mate_distance if need be . This value controls how far apart mate pairs can be to still be considered for bedtools merging downstream .
7425	Get all contiguous genomic regions with one or more overlapping reads . This is the shell command we ll eventually run
7426	Get the number of mapped and unmapped reads for a sample and update sample . stats
7427	create some file handles for refmapping
7428	returns a subsample of unlinked snp sites
7429	Returns a treemix plot on a toyplot . axes object .
7430	Randomly resolves iupac hetero codes . This is a shortcut for now we could instead use the phased alleles in RAD loci .
7431	filters for loci with > = N PIS
7432	function that takes a dictionary mapping names to sequences and a locus number and writes it as a NEXUS file with a mrbayes analysis block given a set of mcmc arguments .
7433	Read in sample names from a plain text file . This is a convenience function for branching so if you have tons of sample names you can pass in a file rather than having to set all the names at the command line .
7434	fast line counter . Used to quickly sum number of input reads when running link_fastqs to append files .
7435	faster line counter
7436	Takes a string argument and returns value as a tuple . Needed for paramfile conversion from CLI to set_params args
7437	Returns a data frame with Sample data and state .
7438	Returns a data frame with Sample files . Not very readable ...
7439	Returns a data frame with Sample stats for each step
7440	pretty prints params if called as a function
7441	Set a parameter to a new value . Raises error if newvalue is wrong type .
7442	Returns a copy of the Assembly object . Does not allow Assembly object names to be replicated in namespace or path .
7443	hidden wrapped function to start step 1
7444	hidden wrapped function to start step 2
7445	hidden wrapped function to start step 4
7446	hidden wrapped function to start step 5
7447	Hidden function to start Step 6 .
7448	Return a list of samples that are actually ready for the next step . Each step runs this prior to calling run makes it easier to centralize and normalize how each step is checking sample states . mystep is the state produced by the current step .
7449	Joins first and second read file names
7450	returns the fastest func given data & longbar
7451	returns an iterator to grab four lines at a time
7452	Writes sorted data dsort dict to a tmp files
7453	Collate temp fastq files in tmp - dir into 1 gzipped sample .
7454	Estimate a reasonable optim value by grabbing a chunk of sequences decompressing and counting them to estimate the full file size .
7455	cleanup func for step 1
7456	sends raws to be chunked
7457	puts stats from pickles into a dictionary
7458	fill a matrix with pairwise data sharing
7459	Get the param name from the dict index value .
7460	save to json .
7461	Save assembly and samples as json
7462	function to encode json string
7463	plots histogram of coverages across clusters
7464	return 00 outfile as a pandas DataFrame
7465	a subfunction for summarizing results
7466	Load existing results files for an object with this workdir and name . This does NOT reload the parameter settings for the object ...
7467	Prints a summarized table of results from replicate runs or if individual_result = True then returns a list of separate dataframes for each replicate run .
7468	Sends the cluster bits to nprocessors for muscle alignment . They return with indel . h5 handles to be concatenated into a joint h5 .
7469	concatenates sorted aligned cluster tmpfiles and removes them .
7470	fills the duplicates array from the multi_muscle_align tmp files
7471	build tmp h5 arrays that can return quick access for nloci
7472	return nloci from the tmp h5 arr
7473	Orders catg data for each sample into the final locus order . This allows all of the individual catgs to simply be combined later . They are also in the same order as the indels array so indels are inserted from the indel array that is passed in .
7474	writes arrays to h5 disk
7475	A dask relay function to fill chroms for all samples
7476	inserts indels into the catg array
7477	uses bash commands to quickly count N seeds from utemp file
7478	sort seeds from cluster results
7479	Reconstitutes clusters from . utemp and htemp files and writes them to chunked files for aligning in muscle .
7480	A subfunction of build_clustbits to allow progress tracking . This func splits the unaligned clusters into bits for aligning on separate cores .
7481	Function to remove older files . This is called either in substep 1 or after the final substep so that tempfiles are retained for restarting interrupted jobs until we re sure they re no longer needed .
7482	cleanup for assembly object
7483	parse results from cutadapt into sample data
7484	Filter for samples that are already finished with this step allow others to run pass them to parallel client function to filter with cutadapt .
7485	concatenate if multiple input files for a single samples
7486	sends fastq files to cutadapt
7487	If multiple fastq files were appended into the list of fastqs for samples then we merge them here before proceeding .
7488	Convert vcf from step6 to . loci format to facilitate downstream format conversion
7489	Function for importing a vcf file into loci format . Arguments are the input vcffile and the loci file to write out .
7490	A function to find 2 engines per hostname on the ipyclient . We ll assume that the CPUs are hyperthreaded which is why we grab two . If they are not then no foul . Two multi - threaded jobs will be run on each of the 2 engines per host .
7491	compute stats for stats file and NHX tree features
7492	random sampler for equal_splits func
7493	get the number of quartets as n - choose - k . This is used in equal splits to decide whether a split should be exhaustively sampled or randomly sampled . Edges near tips can be exhaustive while highly nested edges probably have too many quartets
7494	get dstats from the count array and return as a float tuple
7495	numba compiled code to get matrix fast . arr is a 4 x N seq matrix converted to np . int8 I convert the numbers for ATGC into their respective index for the MAT matrix and leave all others as high numbers i . e . - == 45 N == 78 .
7496	groups together several numba compiled funcs
7497	The workhorse function . Not numba .
7498	used in bootstrap resampling without a map file
7499	returns a seq array with RSKYWM randomly replaced with resolved bases
7500	get span distance for each locus in original seqarray
7501	get shape of new bootstrap resampled locus array
7502	fills the new bootstrap resampled array
7503	converts unicode to utf - 8 when reading in json files
7504	parse sample names from the sequence file
7505	runs quartet max - cut on a quartets file
7506	Makes a reduced array that excludes quartets with no information and prints the quartets and weights to a file formatted for wQMC
7507	renames newick from numbers to sample names
7508	write final tree files
7509	save a JSON file representation of Tetrad Class for checkpoint
7510	inputs results from workers into hdf4 array
7511	Get the row index of samples that are included . If samples are in the excluded they were already filtered out of samples during _get_samples .
7512	pads names for loci output
7513	Function from make_loci to apply to chunks . smask is sample mask .
7514	enters funcs for pairs
7515	enter funcs for SE or merged data
7516	Create database file for storing final filtered snps data as hdf5 array . Copies splits and duplicates info from clust_database to database .
7517	Used to count the number of unique bases in a site for snpstring .
7518	filter for indels
7519	write a map file with linkage information for SNPs file
7520	write the bisnp string
7521	Write STRUCTURE format for all SNPs and unlinked SNPs
7522	Sorts concatenates and gzips VCF chunks . Also cleans up chunks .
7523	Returns the most common base at each site in order .
7524	collapse outgroup in ete Tree for easier viewing
7525	plot the tree using toyplot . graph .
7526	iterate over clustS files to get data
7527	much faster implementation for aligning chunks
7528	checks for too many internal indels in muscle aligned clusters
7529	sets up directories for step3 data
7530	build a directed acyclic graph describing jobs to be run in order .
7531	makes plot to help visualize the DAG setup . For developers only .
7532	Blocks and prints progress for just the func being requested from a list of submitted engine jobs . Returns whether any of the jobs failed .
7533	if multiple fastq files were appended into the list of fastqs for samples then we merge them here before proceeding .
7534	Calls vsearch for clustering . cov varies by data type values were chosen based on experience but could be edited by users
7535	Splits the muscle alignment into chunks . Each chunk is run on a separate computing core . Because the largest clusters are at the beginning of the clusters file assigning equal clusters to each file would put all of the large cluster that take longer to align near the top . So instead we randomly distribute the clusters among the files . If assembly method is reference then this step is just a placeholder and nothing happens .
7536	Running on remote Engine . Refmaps then merges then dereplicates then denovo clusters reads .
7537	Load the passed in assembly and create a branch . Copy it to a new assembly and also write out the appropriate params . txt
7538	loads assembly or creates a new one and set its params from parsedict . Does not launch ipcluster .
7539	return probability of base call
7540	call all sites in a locus array .
7541	applies read depths filter
7542	store phased allele data for diploids
7543	split job into bits and pass to the client
7544	checks if the sample should be run and passes the args
7545	check whether mindepth has changed and thus whether clusters_hidepth needs to be recalculated and get new maxlen for new highdepth clusts . if mindepth not changed then nothing changes .
7546	calls chunk_clusters and tracks progress .
7547	reads in . loci and builds alleles from case characters
7548	reports host and engine info for an ipyclient
7549	set the debug dict
7550	turns off debugging by removing hidden tmp file
7551	check if dependency program is there
7552	gets the right version of vsearch muscle and smalt depending on linux vs osx
7553	Worker to distribute work to jit funcs . Wraps everything on an engine to run single - threaded to maximize efficiency for multi - processing .
7554	Populate array with all possible quartets . This allows us to sample from the total and also to continue from a checkpoint
7555	Populate array with random quartets sampled from a generator . Holding all sets in memory might take a lot but holding a very large list of random numbers for which ones to sample will fit into memory for most reasonable sized sets . So we ll load a list of random numbers in the range of the length of total sets that can be generated then only keep sets from the set generator if they are in the int list . I did several tests to check that random pairs are as likely as 0 & 1 to come up together in a random quartet set .
7556	Returns nsets unique random quartet sets sampled from n - choose - k without replacement combinations .
7557	Random sampler for equal_splits functions
7558	Randomly resolve ambiguous bases . This is applied to each boot replicate so that over reps the random resolutions don t matter . Sites are randomly resolved so best for unlinked SNPs since otherwise linked SNPs are losing their linkage information ... though it s not like we re using it anyways .
7559	set mkl thread limit and return old value so we can reset when finished .
7560	get total number of quartets possible for a split
7561	get total number of quartets sampled for a split
7562	Runs quartet max - cut QMC on the quartets qdump file .
7563	Enters results arrays into the HDF5 database .
7564	Creates a client to view ipcluster engines for a given profile and returns it with at least one engine spun up and ready to go . If no engines are found after nwait amount of time then an error is raised . If engines == MPI it waits a bit longer to find engines . If the number of engines is set then it waits even longer to try to find that number of engines .
7565	Memoization decorator for a function taking one or more arguments .
7566	Returns both resolutions of a cut site that has an ambiguous base in it else the single cut site
7567	takes diploid consensus alleles with phase data stored as a mixture of upper and lower case characters and splits it into 2 alleles
7568	returns a seq with complement . Preserves little n s for splitters .
7569	returns complement of sequence including ambiguity characters and saves lower case info for multiple hetero sequences
7570	option to change orientation of reads and sets Qscore to B
7571	returns reverse complement of a string
7572	return optim clusters given iterators and whether it got all or not
7573	prints a progress bar
7574	gets optimum threaded view of ids given the host setup
7575	Detects the number of CPUs on a system . This is better than asking ipyparallel since ipp has to wait for Engines to spin up .
7576	make the subprocess call to structure
7577	private function to clumpp results
7578	Calculates Evanno method K value scores for a series of permuted clumpp results .
7579	returns a list of files that have finished structure
7580	Calculates the Evanno table from results files for tests with K - values in the input list kvalues . The values lnPK lnPPK and deltaK are calculated . The max_var_multiplier arg can be used to exclude results files based on variance of the likelihood as a proxy for convergence .
7581	parse an _f structure output file
7582	call the command as sps
7583	Submits raxml job to run . If no ipyclient object is provided then the function will block until the raxml run is finished . If an ipyclient is provided then the job is sent to a remote engine and an asynchronous result object is returned which can be queried or awaited until it finishes .
7584	find binaries available
7585	private function to perform a single D - stat test
7586	return array of bootstrap D - stats
7587	Returns the . tests list of taxa as a pandas dataframe . By auto - generating this table from tests it means that the table itself cannot be modified unless it is returned and saved .
7588	function that takes a dictionary mapping names to sequences and a locus number and writes it as a NEXUS file with a mrbayes analysis block .
7589	calls fastq - dump on SRRs relabels fastqs by their accession names and writes them to the workdir . Saves temp sra files in the designated tmp folder and immediately removes them .
7590	returns a fields argument formatted as a list of strings . and doesn t allow zero .
7591	Download the accessions into a the designated workdir .
7592	Returns the client in async mode .
7593	Get the CR Constants
7594	Get a player information
7595	Get a clan information
7596	Search for a tournament
7597	Get a list of top clans by war
7598	Get a list of most queried clans
7599	Get a list of most queried players
7600	Get a list of most queried tournaments
7601	Get a list of most queried decks
7602	Get a list of queried tournaments
7603	Get information about a player
7604	Get information about a player s chest cycle
7605	Get inforamtion about a clan
7606	Search for a clan . At least one of the filters must be present
7607	Search for a tournament by its name
7608	Get a list of all the cards in the game
7609	Get a list of all locations
7610	Get a location information
7611	Get a list of top clans by trophy
7612	Get the clan badge image URL
7613	Get the arena image URL
7614	Form a deck link
7615	Converts a %Y%m%dT%H%M%S . %fZ to a UNIX timestamp or a datetime . datetime object
7616	Decorator that converts arguments via annotations .
7617	Validate that the annotation has the correct namespace and is well - formed .
7618	r Beat tracking evaluation
7619	r Chord evaluation
7620	Flatten a multi_segment annotation into mir_eval style .
7621	r Multi - level segmentation evaluation
7622	r Tempo evaluation
7623	r Melody extraction evaluation
7624	Convert a pattern_jku annotation object to mir_eval format .
7625	r Pattern detection evaluation
7626	r Note transcription evaluation
7627	Add a namespace definition to our working set .
7628	Construct a validation schema for a given namespace .
7629	Construct a validation schema for arrays of a given namespace .
7630	Return the allowed values for an enumerated namespace .
7631	Get the dtypes associated with the value and confidence fields for a given namespace .
7632	Print out a listing of available namespaces
7633	Get the dtype associated with a jsonschema type definition
7634	Load the schema file from the package .
7635	r Load a . lab file as an Annotation object .
7636	Expand a list of relative paths to a give base directory .
7637	Safely make a full directory path if it doesn t exist .
7638	Naive depth - search into a directory for files with a given extension .
7639	Get the metadata from a jam and an annotation combined as a string .
7640	Convert jams to labs .
7641	Parse arguments from the command line
7642	A decorator to register namespace conversions .
7643	Convert a given annotation to the target namespace .
7644	Test if an annotation can be mapped to a target namespace
7645	Convert a pitch_hz annotation to a contour
7646	Convert a pitch_hz annotation to pitch_midi
7647	Convert scaper annotations to tag_open
7648	This is a decorator which can be used to mark functions as deprecated .
7649	An intelligent wrapper for open .
7650	r Load a JAMS Annotation from a file .
7651	Pop a prefix from a query string .
7652	Test if a string matches a query .
7653	Custom serialization functionality for working with advanced data types .
7654	Helper function to format repr strings for JObjects and friends .
7655	Update the attributes of a JObject .
7656	Validate a JObject against its schema
7657	Append an observation to the data field
7658	Add observations from row - major storage .
7659	Add observations from column - major storage .
7660	Validate this annotation object against the JAMS schema and its data against the namespace schema .
7661	Trim the annotation and return as a new Annotation object .
7662	Slice the annotation and return as a new Annotation object .
7663	Replace this observation s data with a fresh container .
7664	Sample the annotation at specified times .
7665	Render this annotation list in HTML
7666	Provides sorting index for Observation objects
7667	Filter the annotation array down to only those Annotation objects matching the query .
7668	Trim every annotation contained in the annotation array using Annotation . trim and return as a new AnnotationArray .
7669	Slice every annotation contained in the annotation array using Annotation . slice and return as a new AnnotationArray
7670	Add the contents of another jam to this object .
7671	Serialize annotation as a JSON formatted stream to file .
7672	Validate a JAMS object against the schema .
7673	Trim all the annotations inside the jam and return as a new JAMS object .
7674	Slice all the annotations inside the jam and return as a new JAMS object .
7675	Pretty - print a jobject .
7676	Plotting wrapper for labeled intervals
7677	Plotting wrapper for hierarchical segmentations
7678	Plotting wrapper for pitch contours
7679	Plotting wrapper for events
7680	Plotting wrapper for beat - position data
7681	Plotting wrapper for piano rolls
7682	Visualize a jams annotation through mir_eval
7683	Display multiple annotations with shared axes
7684	Generate a click sample .
7685	Sonify events with clicks .
7686	Sonify beats and downbeats together .
7687	Sonify multi - level segmentations
7688	Sonify pitch contours .
7689	Sonify a piano - roll
7690	Sonify a jams annotation through mir_eval
7691	Validate a jams file against a schema
7692	Handle successful authentication .
7693	Check authorization id and other properties returned by the authentication mechanism .
7694	Start SASL authentication process .
7695	Method decorator generator for decorating event handlers .
7696	Schedule function to be called from the main loop after delay seconds .
7697	Make a RosterItem from an XML element .
7698	Make an XML element from self .
7699	Check if self is valid roster push item .
7700	Check if self is valid roster set item .
7701	Set of groups defined in the roster .
7702	Return a list of items with given name .
7703	Return a list of items within a given group .
7704	Add an item to the roster .
7705	Remove item from the roster .
7706	Load roster from an XML file .
7707	Save the roster to an XML file .
7708	Check for roster related features in the stream features received and set server_features accordingly .
7709	Request roster upon login .
7710	Request roster from server .
7711	Handle successful response to the roster request .
7712	Handle failure of the roster request .
7713	Handle a roster push received from server .
7714	Add a contact to the roster .
7715	Modify a contact in the roster .
7716	Remove a contact from the roster .
7717	Send a roster set to the server .
7718	Unlink and free the XML node owned by self .
7719	Evaluate XPath expression in context of self . xmlnode .
7720	Set history parameters .
7721	Return history parameters carried by the stanza .
7722	Set password for the MUC request .
7723	Get password from the MUC request .
7724	Initialize a MucItem object from a set of attributes .
7725	Initialize a MucItem object from an XML node .
7726	Initialize a MucStatus element from a status code .
7727	Get a list of objects describing the content of self .
7728	Add an item to self .
7729	Get the MUC specific payload element .
7730	Remove the MUC specific stanza payload element .
7731	Make the presence stanza a MUC room join request .
7732	If self is a MUC room join request return the information contained .
7733	Make the iq stanza a MUC room participant kick request .
7734	Do NFKC normalization of Unicode data .
7735	Modify stringprep cache size .
7736	Mapping part of string preparation .
7737	Checks for prohibited characters .
7738	Checks for unassigned character codes .
7739	Checks if sting is valid for bidirectional printing .
7740	Decorator for glib callback methods of GLibMainLoop used to store the exception raised .
7741	Register an io - handler with the glib main loop .
7742	Prepare pending handlers .
7743	Timeout callback called to try prepare an IOHandler again .
7744	Call the timeout handler due .
7745	Stops the loop after the time specified in the loop call .
7746	Creates Iq Message or Presence object for XML stanza element
7747	Examines out the response returned by a stanza handler and sends all stanzas provided .
7748	Process IQ stanza of type response or error .
7749	Process IQ stanza received .
7750	Search the handler list for handlers matching given stanza type and payload namespace . Run the handlers found ordering them by priority until the first one which returns True .
7751	Process message stanza .
7752	Process presence stanza .
7753	Process stanza not addressed to us .
7754	Process stanza received from the stream .
7755	Set response handler for an IQ get or set stanza .
7756	Same as set_response_handlers but assume self . lock is acquired .
7757	Install stanza handlers provided by handler_objects
7758	Send a stanza somwhere .
7759	Call the event dispatcher .
7760	Call the timeout handlers due .
7761	Check if two XML elements are equal .
7762	Create error response for any non - error message stanza .
7763	Find a SessionHandler instance in the list and move it to the beginning .
7764	Schedule a new XMPP c2s connection .
7765	Gracefully disconnect from the server .
7766	Same as close_stream but with the lock acquired .
7767	Handle the AuthenticatedEvent .
7768	Handle the AuthorizedEvent .
7769	Handle stream disconnection event .
7770	Default base client handlers factory .
7771	Return a payload class for given element name .
7772	Unquote quoted value from DIGEST - MD5 challenge or response .
7773	Prepare a string for quoting for DIGEST - MD5 challenge or response .
7774	Compute DIGEST - MD5 response value .
7775	Encodes a vCard field into an RFC2425 line .
7776	Initialize a VCardAdr object from and XML element .
7777	Initialize the mandatory self . fn from self . n .
7778	Initialize a VCard object from XML node .
7779	Initialize a VCard object from an RFC2426 string .
7780	Parse single RFC2425 record and update attributes of self .
7781	Get the RFC2426 representation of self .
7782	Update current status of the item and compute time of the next state change .
7783	Remove the fetcher from cache and mark it not active .
7784	Handle a successfull retrieval and call apriopriate handler .
7785	Handle a retrieval error and call apriopriate handler .
7786	Handle fetcher timeout and call apriopriate handler .
7787	Check if a backup item is available in cache and call the item handler if it is .
7788	Add an item to the cache .
7789	Get an item from the cache .
7790	Update state of an item in the cache .
7791	Remove purged and overlimit items from the cache .
7792	Remove a running fetcher from the list of active fetchers .
7793	Set the fetcher class .
7794	Register a fetcher class for an object class .
7795	Unregister a fetcher class for an object class .
7796	Add a client authenticator class to CLIENT_MECHANISMS_D CLIENT_MECHANISMS and optionally to SECURE_CLIENT_MECHANISMS
7797	Add a client authenticator class to SERVER_MECHANISMS_D SERVER_MECHANISMS and optionally to SECURE_SERVER_MECHANISMS
7798	Class decorator generator for ClientAuthenticator or ServerAuthenticator subclasses . Adds the class to the pyxmpp . sasl mechanism registry .
7799	Check the password validity .
7800	Base64 - encode the data contained in the reply when appropriate .
7801	Send session esteblishment request if the feature was advertised by the server .
7802	Convert ASN . 1 string to a Unicode string .
7803	Get human - readable subject name derived from the SubjectName or SubjectAltName field .
7804	Verify certificate for a server .
7805	Return True if jid is listed in the certificate commonName .
7806	Check if the cerificate is valid for given domain - only JID and a service type .
7807	Verify certificate for a client .
7808	Load certificate data from an SSL socket .
7809	Get certificate data from an SSL socket .
7810	Decode DER - encoded certificate .
7811	Load data from a ASN . 1 subject .
7812	Load data from a ASN . 1 validity value .
7813	Load SubjectAltName from a ASN . 1 GeneralNames value .
7814	Load certificate from a file .
7815	Request client connection and start the main loop .
7816	Add a handler object .
7817	Remove a handler object .
7818	Update _handler_map after handlers have been modified .
7819	Get the next event from the queue and pass it to the appropriate handlers .
7820	Read all events currently in the queue and dispatch them to the handlers unless dispatch is False .
7821	Process a challenge and return the response .
7822	Make a response for the first challenge from the server .
7823	Process the second challenge from the server and return the response .
7824	Process success indicator from the server .
7825	Decorating attaching a feature URI ( for Service Discovery or Capability to a XMPPFeatureHandler class .
7826	Class decorator generator for decorationg StanzaPayload subclasses .
7827	Method decorator generator for decorating stream element handler methods in StreamFeatureHandler subclasses .
7828	Create a new Option object from an XML element .
7829	Add an option for the field .
7830	Create a new Field object from an XML element .
7831	Add a field to the item .
7832	Create a new Item object from an XML element .
7833	Add and item to the form .
7834	Make a submit form using data in self .
7835	Initialize a Form object from an XML element .
7836	Register Service Discovery cache fetchers into given cache suite and using the stream provided .
7837	Remove self from the containing DiscoItems object .
7838	Set the node of the item .
7839	Set the action of the item .
7840	Get the name of the item .
7841	Get the category of the item .
7842	Set the category of the item .
7843	Get the type of the item .
7844	Set the type of the item .
7845	Get the items contained in self .
7846	Add a new item to the DiscoItems object .
7847	Check if self contains an item .
7848	Get the features contained in self .
7849	Check if self contains the named feature .
7850	Add a feature to self .
7851	Remove a feature from self .
7852	List the identity objects contained in self .
7853	Check if the item described by self belongs to the given category and type .
7854	Add an identity to the DiscoInfo object .
7855	Initialize the Service Discovery process .
7856	Handle successful disco response .
7857	Handle disco error response .
7858	Create error response for the a get or set iq stanza .
7859	Create result response for the a get or set iq stanza .
7860	Request a TLS - encrypted connection .
7861	Initiate TLS connection .
7862	Verify the peer certificate on the TLSConnectedEvent .
7863	Default certificate verification callback for TLS connections .
7864	Parse the command - line arguments and run the tool .
7865	Send the initial presence after log - in .
7866	Set item of the dictionary .
7867	Do the expiration of dictionary items .
7868	Do the expiration of a dictionary item .
7869	Decode attributes of the stanza XML element and put them into the stanza properties .
7870	Decode error element of the stanza .
7871	Set stanza payload to a single item .
7872	Add new the stanza payload .
7873	Return list of stanza payload objects .
7874	Get the first payload item matching the given class and optional key .
7875	Serialize an XML element into a unicode string .
7876	Bind to a resource .
7877	Handle resource binding success .
7878	Serialize an XMPP element .
7879	Add a new namespace prefix .
7880	Return the opening tag of the stream root element .
7881	Split an element of attribute qname into namespace and local name .
7882	Make up a new namespace prefix which won t conflict with _prefixes and prefixes declared in the current scope .
7883	Return namespace - prefixed tag or attribute name .
7884	Build namespace declarations and remove obsoleted mappings from declared_prefixes .
7885	Recursive XML element serializer .
7886	Serialize a stanza .
7887	Filter a mechanisms list only to include those mechanisms that cans succeed with the provided properties and are secure enough .
7888	Called when an error stanza is received .
7889	Update user information .
7890	Get a room user with given nick or JID .
7891	Called when current stream changes .
7892	Send a join request for the room .
7893	Send a leave request for the room .
7894	Send a message to the room .
7895	Send a subject change request to the room .
7896	Send a nick change request to the room .
7897	Get own room JID or a room JID for given nick .
7898	Process successful result of a room configuration form request .
7899	Request a configuration form for the room .
7900	Process success response for a room configuration request .
7901	Configure the room using the provided data . Do nothing if the provided form is of type cancel .
7902	Change the stream assigned to self .
7903	Assign MUC stanza handlers to the self . stream .
7904	Create and return a new room state object and request joining to a MUC room .
7905	Remove a room from the list of managed rooms .
7906	Process a groupchat message from a MUC room .
7907	Process an error message from a MUC room .
7908	Process an presence error from a MUC room .
7909	Process an available presence from a MUC room .
7910	Process an unavailable presence from a MUC room .
7911	Get a parameter value .
7912	Add a new setting definition .
7913	Validator for string lists to be used with add_setting .
7914	Return an integer range validator to be used with add_setting .
7915	List known settings .
7916	Make a command - line option parser .
7917	Compare two International Domain Names .
7918	Check if address is valid IP address and return it in a normalized form .
7919	Return jid tuple from an Unicode string .
7920	Prepare localpart of the JID
7921	Prepare domainpart of the JID .
7922	Prepare the resourcepart of the JID .
7923	Unicode string JID representation .
7924	Check if IPv6 is available .
7925	Check if IPv4 is available .
7926	Randomly reorder SRV records using their weights .
7927	Reorder SRV records using their priorities and weights .
7928	Stop the resolver threads .
7929	Start a new working thread unless the maximum number of threads has been reached or the request queue is empty .
7930	Start looking up an A or AAAA record .
7931	Star an XMPP session and send a message then exit .
7932	Establish a client connection to a server .
7933	Same as ComponentStream . connect but assume self . lock is acquired .
7934	Compute the authentication handshake value .
7935	Authenticate on the server .
7936	Set _state and notify any threads waiting for the change .
7937	Start establishing TCP connection with given address .
7938	Same as connect but assumes lock acquired .
7939	Start resolving the SRV record .
7940	Handle SRV lookup result .
7941	Start hostname resolution for the next name to try .
7942	Handler DNS address record lookup result .
7943	Start connecting to the next address on the _dst_addrs list .
7944	Handle connection success .
7945	Continue connecting .
7946	Write raw data to the socket .
7947	Make the stream the target for this transport instance .
7948	Send stream head via the transport .
7949	Send stream tail via the transport .
7950	Send an element via the transport .
7951	Stop current thread until the channel is readable .
7952	Stop current thread until the channel is writable .
7953	Handle the channel writable state . E . g . send buffered data via a socket .
7954	Request a TLS handshake on the socket ans switch to encrypted output . The handshake will start after any currently buffered data is sent .
7955	Return the peer certificate .
7956	Initiate starttls handshake over the socket .
7957	Continue a TLS handshake .
7958	Handle the channel readable state . E . g . read from a socket .
7959	Handle the channel hungup state . The handler should not be writable after this .
7960	Handle an error reported .
7961	Disconnect the stream gracefully .
7962	Same as _close but expects lock acquired .
7963	Feed the stream reader with data received .
7964	Pass an event to the target stream or just log it .
7965	Handle the start tag .
7966	Handle an end tag .
7967	Feed the parser with a chunk of data . Apropriate methods of handler will be called whenever something interesting is found .
7968	Start threads for an IOHandler .
7969	Remove an IOHandler from the pool .
7970	Add a TimeoutHandler to the pool .
7971	Start threads for a TimeoutHandler .
7972	Remove a TimeoutHandler from the pool .
7973	Start the threads .
7974	Stop the threads .
7975	Wait up to timeout seconds raise any exception from the threads .
7976	Reset the LegacyClientStream object state making the object ready to handle new connections .
7977	Initialize authentication when the connection is established and we are the initiator .
7978	Unregister legacy authentication handlers after successfull authentication .
7979	Try to authenticate using the first one of allowed authentication methods left .
7980	Handle legacy authentication timeout .
7981	Handle legacy authentication error .
7982	Handle success of the legacy authentication .
7983	Handle in - band registration error .
7984	Handle registration form received .
7985	Submit a registration form .
7986	Handle registration success .
7987	Request software version information from a remote entity .
7988	Set up stream element handlers .
7989	Handle a stream event .
7990	Called when transport has been connected .
7991	Send stream start tag .
7992	Same as send_stream_error but expects lock acquired .
7993	Restart the stream as needed after SASL and StartTLS negotiation .
7994	Same as send but assume lock is acquired .
7995	Handle stanza received from the stream .
7996	Process stream error element received .
7997	Mark the other side of the stream authenticated as peer
7998	Mark stream authenticated as me .
7999	Authentication properties of the stream .
8000	Fix outgoing stanza .
8001	Fix an incoming stanza .
8002	Initialize Register from an XML node .
8003	Return Data Form for the Register object .
8004	Make Register object for submitting the registration form .
8005	Initialize Delay object from an XML node .
8006	Accept any incoming connections .
8007	Create error response for the any non - error presence stanza .
8008	Activate an plan in a CREATED state .
8009	Execute the PreparedBillingAgreement by creating and executing a matching BillingAgreement .
8010	Decorator that registers a function as a webhook handler .
8011	Create validate and process a WebhookEventTrigger given a Django request object .
8012	Check that the Paypal API keys are configured correctly
8013	Create the upstream applications .
8014	Send a message upstream to a de - multiplexed application .
8015	Handle a downstream message coming from an upstream steam .
8016	Rout the message down the correct stream .
8017	Handle the disconnect message .
8018	default is to wait for the child applications to close .
8019	Capture downstream websocket . send messages from the upstream applications .
8020	Intercept downstream websocket . accept message and thus allow this upsteam application to accept websocket frames .
8021	Handle downstream websocket . close message .
8022	creator method to build FxCurve
8023	Decorator to retry a function max_retries amount of times
8024	Button action event
8025	Generate a single A or B or C regex from a list of shell globs .
8026	Recursively walk a set of paths and return a listing of contained files .
8027	Subdivide groups of paths according to a function .
8028	Decorator to convert a function which takes a single value and returns a key into one which takes a list of values and returns a dict of key - group mappings .
8029	Sort a file into a group based on on - disk size .
8030	Byte - for - byte comparison on an arbitrary number of files in parallel .
8031	Group a list of file handles based on equality of the next chunk of data read from them .
8032	Display a list of files and prompt for ones to be kept .
8033	High - level code to walk a set of paths and find duplicate groups .
8034	Use \\ r to overdraw the current line with the given text .
8035	select sentences in terms of maximum coverage problem
8036	compute centrality score of sentences .
8037	import summarizers on - demand
8038	Return an error code between 0 and 99 .
8039	Return True iff this function should be considered public .
8040	Return True iff this method should be considered public .
8041	Return True iff this class should be considered public .
8042	Parse the given file - like object and return its Module object .
8043	Consume one token and verify it is of the expected kind .
8044	Skip tokens in the stream until a certain token kind is reached .
8045	Parse a single docstring and return its value .
8046	Parse multiple definitions and yield them .
8047	Parse a from x import y statement .
8048	Parse the y part in a from x import y statement .
8049	Use docutils to check docstrings are valid RST .
8050	Load the source for the specified file .
8051	Returns the darkest swatch . Knowing the contract between a light and a dark swatch can help us decide how to display readable typography .
8052	Parses a theme from XML returned by Kuler . Gets the theme s id label and swatches . All of the swatches are converted to RGB . If we have a full description for a theme id in cache parse that to get tags associated with the theme .
8053	Asynchronous connection listener . Starts a handler for each connection .
8054	Asynchronous connection handler . Processes each line from the socket .
8055	Trusted commands cannot be run remotely
8056	Escape newlines in any responses
8057	Attempt to restart the bot .
8058	Resume playback if bot is paused
8059	List bot variables and values
8060	Make the current window fullscreen
8061	Un - fullscreen the current window
8062	Show help on all commands .
8063	Set a variable .
8064	Allow commands to have a last parameter of cookie = somevalue
8065	Draw a daisy at x y
8066	Grab contents of doc and return it
8067	load context - free grammar
8068	reset output buffer re - parse entire source file and return output Since parsing involves a good deal of randomness this is an easy way to get new output without having to reload a grammar file each time .
8069	choose a random child element of a node This is a utility method used by do_xref and do_choice .
8070	Replaces HTML special characters by readable characters .
8071	Returns True when the url generates a 404 Not Found error .
8072	Determine the MIME - type of the document behind the url .
8073	Build requirements based on flags
8074	Draws a image form path in x y and resize it to width height dimensions .
8075	Draw a rectangle from x y of width height .
8076	Set the current rectmode .
8077	Set the current ellipse drawing mode .
8078	Draw an arrow .
8079	Draws a star .
8080	Move relatively to the last point .
8081	Draw a line using relative coordinates .
8082	Draws a curve relatively to the last point .
8083	Set the current transform mode .
8084	Set a scale at which to draw objects .
8085	Stop applying strokes to new paths .
8086	Set the stroke width .
8087	Set the font to be used with new text instances .
8088	Set or return size of current font .
8089	Draws a string of text according to current font settings .
8090	Returns the height of a string of text according to the current font settings .
8091	Graph background color .
8092	Visualization of a default node .
8093	Visualization of a node s id .
8094	Visualization of the edges in a network .
8095	Visualization of a single edge between two nodes .
8096	Visualization of the label accompanying an edge .
8097	Visualization of a shortest path between two nodes .
8098	Creates a new style which inherits from the default style or any other style which name is supplied to the optional template parameter .
8099	Returns a copy of all styles and a copy of the styleguide .
8100	Check the rules for each node in the graph and apply the style .
8101	Returns a copy of the styleguide for the given graph .
8102	Opens the socket and binds to the given host and port . Uses SO_REUSEADDR to be as robust as possible .
8103	Loads all possible TUIO profiles and returns a dictionary with the profile addresses as keys and an instance of a profile as the value
8104	Tells the connection manager to receive the next 1024 byte of messages to analyze .
8105	Gets called by the CallbackManager if a new message was received
8106	copytree that works even if folder already exists
8107	Serialize obj to a JSON formatted str .
8108	Returns a Google web query formatted as a GoogleSearch list object .
8109	Returns a Google images query formatted as a GoogleSearch list object .
8110	Returns a Google news query formatted as a GoogleSearch list object .
8111	Returns a Google blogs query formatted as a GoogleSearch list object .
8112	Creates a unique filename in the cache for the id .
8113	Returns the age of the cache entry in days .
8114	Returns the angle between two points .
8115	Returns the distance between two points .
8116	Determines the intersection point of two lines or two finite line segments if infinite = False . When the lines do not intersect returns an empty list .
8117	Returns a list of points where the circle and the line intersect . Returns an empty list when the circle and the line do not intersect .
8118	Multiplying a matrix by its inverse produces the identity matrix .
8119	Returns a BezierPath object with the transformation applied .
8120	Returns bounds that encompass the intersection of the two . If there is no overlap between the two None is returned .
8121	Returns bounds that encompass the union of the two .
8122	Prints an error message the help message and quits
8123	Draws an outlined path of the input text
8124	Raph Levien s code draws fast LINETO segments .
8125	Mark Meyer s code draws elegant CURVETO segments .
8126	Returns a Yahoo web query formatted as a YahooSearch list object .
8127	Returns a Yahoo images query formatted as a YahooSearch list object .
8128	Returns a Yahoo news query formatted as a YahooSearch list object .
8129	Returns list of suggested spelling corrections for the given query .
8130	Creates a new layer from file Layer PIL Image . If img is an image file or PIL Image object Creates a new layer with the given image file . The image is positioned on the canvas at x y . If img is a Layer uses that layer s x and y position and name .
8131	Flattens the given layers on the canvas . Merges the given layers with the indices in the list on the bottom layer in the list . The other layers are discarded .
8132	Exports the flattened canvas . Flattens the canvas . PNG retains the alpha channel information . Other possibilities are JPEG and GIF .
8133	Removes this layer from the canvas .
8134	Moves the layer up in the stacking order .
8135	Moves the layer down in the stacking order .
8136	Creates a copy of the current layer . This copy becomes the top layer on the canvas .
8137	Increases or decreases the brightness in the layer . The given value is a percentage to increase or decrease the image brightness for example 0 . 8 means brightness at 80% .
8138	Increases or decreases the contrast in the layer . The given value is a percentage to increase or decrease the image contrast for example 1 . 2 means contrast at 120% .
8139	Desaturates the layer making it grayscale . Instantly removes all color information from the layer while maintaing its alpha channel .
8140	Inverts the layer .
8141	Positions the layer at the given coordinates . The x and y parameters define where to position the top left corner of the layer measured from the top left of the canvas .
8142	Resizes the layer to the given width and height . When width w or height h is a floating - point number scales percentual otherwise scales to the given size in pixels .
8143	Rotates the layer . Rotates the layer by given angle . Positive numbers rotate counter - clockwise negative numbers rotate clockwise . Rotate commands are executed instantly so many subsequent rotates will distort the image .
8144	Flips the layer either HORIZONTAL or VERTICAL .
8145	Increases or decreases the sharpness in the layer . The given value is a percentage to increase or decrease the image sharpness for example 0 . 8 means sharpness at 80% .
8146	Returns a histogram for each RGBA channel . Returns a 4 - tuple of lists r g b and a . Each list has 255 items a count for each pixel value .
8147	Applies the hue blend mode . Hues image img1 with image img2 . The hue filter replaces the hues of pixels in img1 with the hues of pixels in img2 . Returns a composite image with the alpha channel retained .
8148	Initialise bot namespace with info in shoebot . data
8149	Return False if bot should quit
8150	Limit to framerate should be called after rendering has completed
8151	Sets a new accessible variable .
8152	Returns RGB values for a hex color string .
8153	Format traceback showing line number and surrounding source .
8154	Creates an SQLite database file . Creates an SQLite database with the given name . The . box file extension is added automatically . Overwrites any existing database by default .
8155	Creates a new table . Creates a table with the given name containing the list of given fields . Since SQLite uses manifest typing no data type need be supplied . The primary key is id by default an integer that can be set or otherwise autoincrements .
8156	Creates a table index . Creates an index on the given table on the given field with unique values enforced or not in ascending or descending order .
8157	Commits any pending transactions and closes the database .
8158	Executes a raw SQL statement on the database .
8159	Edits the row with given id .
8160	Deletes the row with given id .
8161	Get the next available event or None
8162	Publish an event ot any subscribers .
8163	Sets call_transform_mode to point to the center_transform or corner_transform
8164	Doesn t store exactly the same items as Nodebox for ease of implementation it has enough to get the Nodebox Dentrite example working .
8165	Load changed code into the execution environment .
8166	Replace functions in namespace with functions from edited_source .
8167	Run edited source if no exceptions occur then it graduates to known good .
8168	Attempt to known good or tenuous source .
8169	Context in which the user can run the source in a custom manner .
8170	Boids keep a small distance from other boids . Ensures that boids don t collide into each other in a smoothly accelerated motion .
8171	Boids match velocity with other boids .
8172	The speed limit for a boid . Boids can momentarily go very fast something that is impossible for real animals .
8173	Returns the angle towards which the boid is steering .
8174	Tendency towards a particular place .
8175	Calculates the next motion frame for the flock .
8176	Yield match end_idx for each match
8177	Returns a copy of the layout for the given graph .
8178	Returns True if given node can be reached over traversable edges . To enforce edge direction use a node == edge . node1 traversable .
8179	Remove nodes and edges and reset the layout .
8180	Add node from id and return the node object .
8181	Remove node with given id .
8182	Remove edges between nodes with given id s .
8183	Returns the edge between the nodes with given id1 and id2 .
8184	Iterates the graph layout and updates node positions .
8185	Returns the distance from the center to the given node .
8186	Layout the graph incrementally . The graph is drawn at the center of the canvas . The weighted and directed parameters visualize edge weight and direction . The highlight specifies list of connected nodes . The path will be colored according to the highlight style . Clicking and dragging events are monitored .
8187	Removes all nodes with less or equal links than depth .
8188	Calculates betweenness centrality and returns an node id - > weight dictionary . Node betweenness weights are updated in the process .
8189	Calculates eigenvector centrality and returns an node id - > weight dictionary . Node eigenvalue weights are updated in the process .
8190	Returns nodes sorted by betweenness centrality . Nodes with a lot of passing traffic will be at the front of the list .
8191	Returns nodes sorted by eigenvector centrality . Nodes with a lot of incoming traffic will be at the front of the list
8192	Returns nodes with the given category attribute .
8193	Returns a list of leaves nodes connected to leaves etc .
8194	The number of edges in relation to the total number of possible edges .
8195	Rebuilds the graph around the given node id .
8196	Callback from graph . events when a node is clicked .
8197	Compute a cubic Bezier approximation of an elliptical arc .
8198	The angle in degrees between two vectors .
8199	Transform from the local frame to absolute space .
8200	Bot must be set before running
8201	Pass a load of settings into the canvas
8202	If size is not set otherwise set size to DEFAULT_SIZE and return it .
8203	Size is only set the first time it is called
8204	Ask the drawqueue to output to target .
8205	Passes the drawqueue to the sink for rendering
8206	Returns True when point 1 and point 2 overlap . There is an r treshold in which point 1 and point 2 are considered to overlap .
8207	Reflects the point x y through origin x0 y0 .
8208	Calculates the angle between two points .
8209	Calculates the coordinates of a point from the origin .
8210	Returns true when x y is on the path stroke outline .
8211	Inserts a point on the path at the mouse location . We first need to check if the mouse location is on the path . Inserting point is time intensive and experimental .
8212	Freehand sketching .
8213	Exports the path as SVG . Uses the filename given when creating this object . The file is automatically updated to reflect changes to the path .
8214	Handle right mouse button clicks
8215	Show the variables window .
8216	Hide the variables window
8217	Toggle fullscreen from outside the GUI causes the GUI to updated and run all its actions .
8218	Widget Action to Make the window fullscreen and update the bot .
8219	Widget Action to set Windowed Mode .
8220	Widget Action to Close the window triggering the quit event .
8221	Widget Action to Toggle fullscreen from the GUI
8222	Widget Action to toggle showing the variables window .
8223	Called from main loop if your sink needs to handle GUI events do it here .
8224	GUI callback for mouse moved
8225	GUI callback for key pressed
8226	Creates an instance of a class defined in this document . This method sets the context of the object to the current context .
8227	Create an object if fill stroke or strokewidth is not specified get them from the _canvas
8228	Returns an Image object of the current surface . Used for displaying output in Jupyter notebooks . Adapted from the cairo - jupyter project .
8229	Import Nodebox libraries .
8230	Set the canvas size
8231	Set animation framerate .
8232	Set callbacks for input events
8233	Returns the color and its complement in a list .
8234	Returns a list of complementary colors .
8235	Returns a list with the split complement of the color .
8236	Returns the left half of the split complement .
8237	Returns the right half of the split complement .
8238	Returns colors that are next to each other on the wheel .
8239	Returns a triad of colors .
8240	Returns a tetrad of colors .
8241	Roughly the complement and some far analogs .
8242	Outlines each contour in a path with the colors in the list .
8243	Guesses the shade and hue name of a color .
8244	Returns a 0 . 0 - 1 . 0 brightness adjusted to a light source .
8245	A dictionary of all aggregated words .
8246	Returns a list of colors drawn from a morgueFile image .
8247	Returns RGB values based on a descriptive string .
8248	Returns a color rotated on the artistic RYB color wheel .
8249	Returns the name of the nearest named hue .
8250	Returns a mix of two colors .
8251	Rectangle swatch for this color .
8252	Returns a list of colors based on pixel values in the image .
8253	Returns the colors that have the given word in their context .
8254	Returns the intersection of each color s context .
8255	Returns a deep copy of the list .
8256	Returns the darkest color from the list .
8257	Returns one average color for the colors in the list .
8258	Returns a list with the smallest distance between two neighboring colors . The algorithm has a factorial complexity so it may run slow .
8259	Returns a sorted copy with the colors arranged according to the given comparison .
8260	Sorts the list by cmp1 then cuts it into n pieces which are sorted by cmp2 .
8261	Returns a reversed copy of the list .
8262	Returns a list that is a repetition of the given list .
8263	Rectangle swatches for all the colors in the list .
8264	Fancy random ovals for all the colors in the list .
8265	Returns intermediary colors for given list of colors .
8266	Populates the list with a number of gradient colors .
8267	Returns a copy of the range .
8268	Returns a color with random values in the defined h s b a ranges .
8269	Returns True if the given color is part of this color range .
8270	Returns the color information as XML .
8271	Saves the color information in the cache as XML .
8272	Loads a theme from aggregated web data .
8273	Returns a random color within the theme .
8274	Returns a number of random colors from the theme .
8275	Genetic recombination of two themes using cut and splice technique .
8276	Draws a weighted swatch with approximately n columns and rows .
8277	fseq messages associate a unique frame id with a set of set and alive messages
8278	Returns a generator list of tracked objects which are recognized with this profile and are in the current session .
8279	Append a render function and the parameters to pass an equivilent PathElement or the PathElement itself .
8280	Use a closure so that draw attributes can be saved
8281	Returns coordinates for point at t on the line . Calculates the coordinates of x and y for a point at t on a straight line . The t parameter is a number between 0 . 0 and 1 . 0 x0 and y0 define the starting point of the line x1 and y1 the ending point of the line .
8282	Returns the length of the line .
8283	Returns coordinates for point at t on the spline . Calculates the coordinates of x and y for a point at t on the cubic bezier spline and its control points based on the de Casteljau interpolation algorithm . The t parameter is a number between 0 . 0 and 1 . 0 x0 and y0 define the starting point of the spline x1 and y1 its control point x3 and y3 the ending point of the spline x2 and y2 its control point . If the handles parameter is set returns not only the point at t but the modified control points of p0 and p3 should this point split the path as well .
8284	Returns a list with the lengths of each segment in the path .
8285	Returns the length of the path . Calculates the length of each spline in the path using n as a number of points to measure . When segmented is True returns a list containing the individual length of each spline as values between 0 . 0 and 1 . 0 defining the relative length of each spline in relation to the total path length .
8286	Yields all elements as PathElements
8287	An edge weight map indexed by node id s . A dictionary indexed by node id1 s in which each value is a dictionary of connected node id2 s linking to the edge weight . If directed edges go from id1 to id2 but not the other way . If stochastic all the weights for the neighbors of a given node sum to 1 . A heuristic can be a function that takes two node id s and returns and additional cost for movement between the two nodes .
8288	Iterate through a gtk container parent and return the widget with the name name .
8289	Find shoebot executable
8290	Returns the meta description in the page .
8291	Returns the meta keywords in the page .
8292	Returns a sorted copy of the list .
8293	Returns a copy of the list without duplicates .
8294	Returns the largest possible clique for the node with given id .
8295	Returns all the cliques in the graph of at least the given size .
8296	Calls implmentation to get a render context passes it to the drawqueues render function then calls self . rendering_finished
8297	Useful utility ; prints the string in hexadecimal
8298	Tries to interpret the next 8 bytes of the data as a 64 - bit signed integer .
8299	Converts a typetagged OSC message to a Python list .
8300	Given OSC data tries to call the callback with the right address .
8301	Sends decoded OSC data to an appropriate calback
8302	Adds a callback to our set of callbacks or removes the callback with name if callback is None .
8303	Find examples dir .. a little bit ugly ..
8304	Check whether there is no more content to expect .
8305	Send new source code to the bot
8306	Close outputs of process .
8307	Get responses to commands sent
8308	If ctx is a cairocffi Context convert it to a PyCairo Context otherwise return the original context
8309	If python - gi - cairo is not installed using PangoCairo . create_context dies with an unhelpful KeyError check for that and output somethig useful .
8310	Determines if an item in a paragraph is a list .
8311	Uses mimetex to generate a GIF - image from the LaTeX equation .
8312	Draws list markup with indentation in NodeBox .
8313	This is a very poor algorithm to draw Wikipedia tables in NodeBox .
8314	Parses data from Wikipedia page markup .
8315	Returns a list of internal Wikipedia links in the markup .
8316	Returns a list of images found in the markup . An image has a pathname a description in plain text and a list of properties Wikipedia uses to size and place images .
8317	Corrects Wikipedia image markup .
8318	Creates a link from the table to paragraph and vice versa . Finds the first heading above the table in the markup . This is the title of the paragraph the table belongs to .
8319	Returns a list of tables in the markup .
8320	Returns a list of categories the page belongs to .
8321	Returns a list of words that appear in bold in the article . Things like table titles are not added to the list these are probably bold because it makes the layout nice not necessarily because they are important .
8322	Given a Variable and a value cleans it out
8323	Convenience method that works with all 2 . x versions of Python to determine whether or not something is listlike .
8324	Convenience method that works with all 2 . x versions of Python to determine whether or not something is stringlike .
8325	Turns a list of maps lists or scalars into a single map . Used to build the SELF_CLOSING_TAGS NESTABLE_TAGS and NESTING_RESET_TAGS maps out of lists and partial maps .
8326	Sets up the initial relations between this element and other elements .
8327	Destructively rips this element out of the tree .
8328	Finds the last element beneath this object to be parsed .
8329	Returns the first item that matches the given criteria and appears after this Tag in the document .
8330	Returns all items that match the given criteria and appear after this Tag in the document .
8331	Returns the closest sibling to this Tag that matches the given criteria and appears after this Tag in the document .
8332	Returns the siblings of this Tag that match the given criteria and appear after this Tag in the document .
8333	Returns the first item that matches the given criteria and appears before this Tag in the document .
8334	Returns all items that match the given criteria and appear before this Tag in the document .
8335	Returns the closest sibling to this Tag that matches the given criteria and appears before this Tag in the document .
8336	Returns the siblings of this Tag that match the given criteria and appear before this Tag in the document .
8337	Returns the closest parent of this Tag that matches the given criteria .
8338	Returns the parents of this Tag that match the given criteria .
8339	Iterates over a generator looking for things that match .
8340	Encodes an object to a string in some encoding or to Unicode . .
8341	Cheap function to invert a hash .
8342	Used in a call to re . sub to replace HTML XML and numeric entities with the appropriate Unicode characters . If HTML entities are being converted any unrecognized entities are escaped .
8343	Recursively destroys the contents of this tree .
8344	Renders the contents of this tag as a string in the given encoding . If encoding is None returns a Unicode string ..
8345	Return only the first child of this Tag matching the given criteria .
8346	Extracts a list of Tag objects that match the given criteria . You can specify the name of the Tag and any attributes you want the Tag to have .
8347	Initializes a map representation of this tag s attributes if not already initialized .
8348	This method fixes a bug in Python s SGMLParser .
8349	Returns true iff the given string is the name of a self - closing tag according to this parser .
8350	Adds a certain piece of text to the tree as a NavigableString subclass .
8351	Handle a processing instruction as a ProcessingInstruction object possibly one with a %SOUP - ENCODING% slot into which an encoding will be plugged later .
8352	Handle character references as data .
8353	Treat a bogus SGML declaration as raw data . Treat a CDATA declaration as a CData object .
8354	Beautiful Soup can detect a charset included in a META tag try to convert the document to that charset and re - parse the document from the beginning .
8355	Changes a MS smart quote character to an XML or HTML entity .
8356	Given a string and its encoding decodes the string into Unicode . %encoding is a string recognized by encodings . aliases
8357	Given a document tries to detect its XML encoding .
8358	Decorator to run some code in a bot instance .
8359	Scale context based on difference between bot size and widget
8360	Draw just the exposed part of the backing store scaled to fit
8361	Creates a recording surface for the bot to draw on
8362	Return a JSON string representation of a Python data structure .
8363	Return a dict in the form of
8364	If filename was used output a filename along with multifile numbered filenames will be used .
8365	Called when CairoCanvas needs a cairo context to draw on
8366	Called when CairoCanvas has rendered a bot
8367	Function to output to a cairo surface
8368	Strips links from the definition and gathers them in a links property .
8369	Create canvas and sink for attachment to a bot
8370	Create a canvas and a bot with the same canvas attached to it
8371	Create and run a bot the arguments all correspond to sanitized commandline options .
8372	Return True if the buffer was saved
8373	Called when a slider is adjusted .
8374	var was added in the bot while it ran possibly by livecoding
8375	var was added in the bot
8376	Returns cached copies unless otherwise specified .
8377	Returns XML element s attribute or default if none .
8378	Expand the path with color information . Attempts to extract fill and stroke colors from the element and adds it to path attributes .
8379	Returns a copy of the event handler remembering the last node clicked .
8380	Drags given node to mouse location .
8381	Displays a popup when hovering over a node .
8382	Returns a cached textpath of the given text in queue .
8383	Rotates the queued texts and determines display time .
8384	Draws a popup rectangle with a rotating text queue .
8385	write FILENAME Write a local copy of FILENAME using FILENAME_tweaks for local tweaks .
8386	Amend a filename with a suffix .
8387	check FILENAME Check that FILENAME has not been edited since writing .
8388	Merge tweaks into a main config file .
8389	u Write text to the file .
8390	Check if the file still has its original contents .
8391	Check that a checker s visitors are correctly named .
8392	Make a reasonable class name for a class node .
8393	Parse the pylint output - format = parseable lines into PylintError tuples .
8394	The edx_lint command entry point .
8395	Print the help string for the edx_lint command .
8396	Create a transformation class object
8397	Return a trans object
8398	Calculate breaks in data space and return them in transformed space .
8399	Transform from date to a numerical format
8400	Rescale numeric vector to have specified minimum and maximum .
8401	Rescale numeric vector to have specified minimum midpoint and maximum .
8402	Rescale numeric vector to have specified maximum .
8403	Truncate infinite values to a range .
8404	Squish values into range .
8405	Censor any values outside of range with None
8406	Determine if range of vector is close to zero .
8407	Expand a range with a multiplicative or additive constant
8408	Expand a range with a multiplicative or additive constants
8409	Append 2 extra breaks at either end of major
8410	Determine good units for representing a sequence of timedeltas
8411	Minimum and Maximum to use for computing breaks
8412	Convert sequence of numerics to timedelta
8413	Convert timedelta to a number corresponding to the appropriate units . The appropriate units are those determined with the object is initialised .
8414	Round to multiple of any number .
8415	Return the minimum and maximum of x
8416	Return the precision of x
8417	Sort elements of multiple types
8418	Return nearest long integer to x
8419	Check if value is close to an integer
8420	Return true if range is approximately in same order of magnitude
8421	Helper to format and tidy up
8422	Make all labels uniform in format and remove redundant zeros for labels in exponential format .
8423	Get a set of evenly spaced colors in HLS hue space .
8424	Get a set of evenly spaced colors in HUSL hue space .
8425	Utility for creating continuous grey scale palette
8426	Utility for making hue palettes for color schemes .
8427	Utility for making a brewer palette
8428	Create a n color gradient palette
8429	Create a continuous palette using an MPL colormap
8430	Create a discrete palette using an MPL Listed colormap
8431	Create a palette that desaturate a color by some proportion
8432	Create a palette from a list of values
8433	Utility for creating continuous palette from the cubehelix system .
8434	Scale data continuously
8435	Map values to a continuous palette
8436	Map values to a discrete palette
8437	Register a parser for a attribute type .
8438	Used to patch cookiecutter s run_hook function .
8439	Uses cookiecutter to generate files for the project .
8440	Sets up a new project from a template
8441	Parses Github s link header for pagination .
8442	Performs a Github API code search
8443	Lists all temple templates and packages associated with those templates
8444	Update package with latest template . Must be inside of the project folder to run .
8445	List packages created with temple . Enter a github user or organization to list all templates under the user or org . Using a template path as the second argument will list all projects that have been started with that template .
8446	Switch a project s template to a different template .
8447	Returns True if inside a git repo False otherwise
8448	Return True if the target branch exists .
8449	Raises ExistingBranchError if the specified branch exists .
8450	Raises InvalidEnvironmentError when one isnt set
8451	Raises InvalidTempleProjectError if repository is not a temple project
8452	Determine the current git branch
8453	Cleans up temporary resources
8454	Given an old version and new version check if the cookiecutter . json files have changed
8455	Apply a template to a temporary directory and then copy results to target .
8456	Checks if a temple project is up to date with the repo
8457	Given two templates and their respective versions return True if a new cookiecutter config needs to be obtained from the user
8458	Runs a subprocess shell with check = True by default
8459	Reads the temple YAML configuration file in the repository
8460	Writes the temple YAML configuration
8461	Obtains the configuration used for cookiecutter templating
8462	Decorator that sets the temple command env var to value
8463	Perform a github API call
8464	Deploys the package and documentation .
8465	Finds . DS_Store files into path
8466	Method executed dynamically by framework . This method will do a http request to endpoint setted into config file with the issues and other data .
8467	Setter for path property
8468	Parse the config values
8469	Get the OS name . If OS is linux returns the Linux distribution name
8470	Executes the command setted into class
8471	Print a message if the class attribute verbose is enabled
8472	Creates required directories and copy checkers and reports .
8473	Writes a section for a plugin .
8474	Returns a dictionary which contains the current config . If a section is setted only will returns the section config
8475	Returns a class instance from a . py file .
8476	Execute an specific method for each class instance located in path
8477	Run a scan in the path setted .
8478	Install all the dependences
8479	Setter for potential property
8480	Shortcut method for getting a setting value .
8481	Helper to try to get a setting from the environment or pyconfig or finally use a provided default .
8482	Try to get key from the environment .
8483	Changes a setting value .
8484	Updates the current configuration with the values in conf_dict .
8485	Loads all the config plugin modules to build a working configuration .
8486	Return a setting value .
8487	Handle creating the new etcd client instance and other business .
8488	Return a dictionary of settings loaded from etcd .
8489	Return a etcd watching generator which yields events as they happen .
8490	Begins watching etcd for changes .
8491	Return hosts parsed into a tuple of tuples .
8492	Main script for pyconfig command .
8493	Handles the - m argument .
8494	Print an error message and exit .
8495	Return the filename of module if it can be imported .
8496	Parse filename appropriately and then output calls according to the args specified .
8497	Outputs calls .
8498	Return call formatted appropriately for args .
8499	Return output colorized with Pygments if available .
8500	Return arg appropriately parsed or mapped to a usable value .
8501	Return this call as if it were being assigned in a pyconfig namespace .
8502	Return this call as if it were being assigned in a pyconfig namespace but load the actual value currently available in pyconfig .
8503	Return this call as it is called in its source .
8504	Return the call key even if it has to be parsed from the source .
8505	Return only the default value if there is one .
8506	Return the default argument formatted nicely .
8507	Get mappable parameters from YAML .
8508	Construct a pylearn2 dataset .
8509	Build a trainer and run main_loop .
8510	Get model predictions .
8511	Load the dataset using pylearn2 . config . yaml_parse .
8512	creates an additive kernel
8513	Fit and score an estimator with cross - validation
8514	Recursively merge two dictionaries with the elements from top taking precedence over elements from top .
8515	Format a timedelta object for display to users
8516	Like assert_all_finite but only for ndarray .
8517	UserWarning if array contains non - finite elements
8518	Create a Config object from config dict directly .
8519	SHA1 hash of the config file itself .
8520	t - SNE embedding of the parameters colored by score
8521	Scatter plot of score vs each param
8522	An integer - valued dimension bounded between min < = x < = max . Note that the right endpoint of the interval includes max .
8523	A floating point - valued dimension bounded min < = x < max
8524	An enumeration - valued dimension .
8525	Decorator that produces DEBUG level log messages before and after calling a parser method .
8526	Try to find a pattern that matches the source and calll a parser method to create Python objects .
8527	If the given object is an instance of Child add it to self and register self as a parent .
8528	if client_port is 0 any client_port is good
8529	get stats & show them
8530	Diff two thrift structs and return the result as a ThriftDiff instance
8531	Diff two thrift messages by comparing their args raises exceptions if for some reason the messages can t be diffed . Only args of type struct are compared .
8532	Check if two thrift messages are diff ready .
8533	Returns true if all fields of other struct are isomorphic to this struct s fields
8534	tries to deserialize a message might fail if data is missing
8535	pops packets with _at least_ nbytes of payload
8536	similar to pop but returns payload + last timestamp
8537	push the packet into the queue
8538	Deal with the incoming packets
8539	Returns all disk images within a location with a given image name . The name must match exactly . The list may be empty .
8540	Read the user configuration
8541	Save the given user configuration .
8542	Determine the username
8543	Determine the user password
8544	Retrieves a data center by its ID .
8545	Retrieves a data center by its name .
8546	Removes the data center and all its components such as servers NICs load balancers volumes .
8547	Retrieves a single firewall rule by ID .
8548	Removes a firewall rule from the NIC .
8549	Creates a firewall rule on the specified NIC and server .
8550	Updates a firewall rule .
8551	Removes only user created images .
8552	Replace all properties of an image .
8553	Removes a single IP block from your account .
8554	Reserves an IP block within your account .
8555	Retrieves a single LAN by ID .
8556	Retrieves a list of LANs available in the account .
8557	Removes a LAN from the data center .
8558	Creates a LAN in the data center .
8559	Updates a LAN
8560	Retrieves the list of NICs that are part of the LAN .
8561	Retrieves a single load balancer by ID .
8562	Retrieves a list of load balancers in the data center .
8563	Removes the load balancer from the data center .
8564	Creates a load balancer within the specified data center .
8565	Updates a load balancer
8566	Retrieves the list of NICs that are associated with a load balancer .
8567	Associates a NIC with the given load balancer .
8568	Gets the properties of a load balanced NIC .
8569	Removes a NIC from the load balancer .
8570	Retrieves a single location by ID .
8571	Retrieves a NIC by its ID .
8572	Retrieves a list of all NICs bound to the specified server .
8573	Removes a NIC from the server .
8574	Creates a NIC on the specified server .
8575	Updates a NIC with the parameters provided .
8576	Retrieves a single request by ID .
8577	Retrieves a server by its ID .
8578	Retrieves a list of all servers bound to the specified data center .
8579	Removes the server from your data center .
8580	Creates a server within the data center .
8581	Updates a server with the parameters provided .
8582	Retrieves a list of volumes attached to the server .
8583	Retrieves volume information .
8584	Attaches a volume to a server .
8585	Retrieves a list of CDROMs attached to the server .
8586	Retrieves an attached CDROM .
8587	Attaches a CDROM to a server .
8588	Starts the server .
8589	Stops the server .
8590	Reboots the server .
8591	Creates a snapshot of the specified volume .
8592	Restores a snapshot to the specified volume .
8593	Removes a snapshot .
8594	Retrieves a single group by ID .
8595	Creates a new group and set group privileges .
8596	Updates a group .
8597	Removes a group .
8598	Retrieves a list of all shares though a group .
8599	Retrieves a specific resource share available to a group .
8600	Shares a resource through a group .
8601	Removes a resource share from a group .
8602	Retrieves a single user by ID .
8603	Creates a new user .
8604	Updates a user .
8605	Removes a user .
8606	Retrieves a list of all users that are members of a particular group .
8607	Adds an existing user to a group .
8608	Removes a user from a group .
8609	Retrieves a list of all resources .
8610	Retrieves a single resource of a particular type .
8611	Retrieves a single volume by ID .
8612	Retrieves a list of volumes in the data center .
8613	Removes a volume from the data center .
8614	Creates a volume within the specified data center .
8615	Poll resource request status until resource is provisioned .
8616	Returns the given string as a string of bytes . That means in Python2 as a str object and in Python3 as a bytes object . Raises a TypeError if it cannot be converted .
8617	Convert Python snake case back to mixed case .
8618	Find a item a given list by a matching name .
8619	gets info of servers of a data center
8620	gets states of a server
8621	Get details about the currently authenticated user
8622	Get details about specific user
8623	Get the currently authenticated user ID
8624	Add a list of jobs to the currently authenticated user
8625	Replace the currently authenticated user s list of jobs with a new list of jobs
8626	Remove a list of jobs from the currently authenticated user
8627	Get one or more users
8628	Create a project
8629	Create a fixed project
8630	Get one or more projects
8631	Get a single project by ID
8632	Search for all projects
8633	Place a bid on a project
8634	Get the list of bids
8635	Get the list of milestones
8636	Get a specific milestone
8637	Award a bid on a project
8638	Revoke a bid on a project
8639	Accept a bid on a project
8640	Retract a bid on a project
8641	Highlight a bid on a project
8642	Create a milestone payment
8643	Start tracking a project by creating a track
8644	Updates the current location by creating a new track point and appending it to the given track
8645	Gets a specific track
8646	Create a milestone request
8647	Accept a milestone request
8648	Reject a milestone request
8649	Delete a milestone request
8650	Post a review
8651	Get a list of jobs
8652	Create a thread
8653	Create a project thread
8654	Get one or more messages
8655	Search for messages
8656	Get one or more threads
8657	Assumes zipcode is of type str
8658	List of zipcode dicts where zipcode prefix matches partial_zipcode
8659	Use kwargs to select for desired attributes from list of zipcode dicts
8660	Pedantic yet imperfect . Test to see if name is a valid python identifier
8661	Build a palette definition from either a simple string or a dictionary filling in defaults for items not specified .
8662	Migrate all keys in a source stash to a destination stash
8663	Return a generate string size long based on lowercase uppercase and digit chars
8664	Return a dict from a list of key = value pairs
8665	Return a human readable format of a list .
8666	r Init a stash
8667	Insert a key to the stash
8668	Lock a key to prevent it from being deleted purged or modified
8669	Unlock a key to allow it to be modified deleted or purged
8670	Retrieve a key from the stash
8671	Delete a key from the stash
8672	List all keys in the stash
8673	Purge the stash from all of its keys
8674	Export all keys to a file
8675	Load all keys from an exported key file to the stash
8676	Migrate all keys from a source stash to a destination stash .
8677	Use an ssh type key to connect to a machine via ssh
8678	Put a key inside the stash
8679	Return a key with its parameters if it was found .
8680	Return a list of all keys .
8681	Delete a key if it exists .
8682	Purge the stash from all keys
8683	Export all keys in the stash to a list or a file
8684	Import keys to the stash from either a list of keys or a file
8685	Turn a json serializable value into an jsonified encrypted hexa string .
8686	The exact opposite of _encrypt
8687	Return a dictionary consisting of the key itself
8688	Delete the key and return true if the key was deleted else false
8689	Return a dictionary representing a key from a list of columns and a tuple of values
8690	Put and return the only unique identifier possible its url
8691	Put and return the only unique identifier possible its path
8692	Create an Elasticsearch index if necessary
8693	Create a bucket .
8694	Launch minterm from pyserial
8695	setting baudrate if supported
8696	Set the timeout for the communication with the device .
8697	Clears the input and output buffers
8698	will wait for exp to be returned from nodemcu or timeout
8699	write data on the nodemcu port . If binary is True the debug log will show the intended output as hex otherwise as string
8700	Write output to the port and wait for response
8701	restores the nodemcu to default baudrate and then closes the port
8702	This uploads the protocol functions nessecary to do binary chunked transfer
8703	Download a file from device to local filesystem
8704	reading data from device into local file
8705	sends a file to the device using the transfer protocol
8706	Tries to verify if path has same checksum as destination . Valid options for verify is raw sha1 or none
8707	execute the lines in the local file path
8708	Returns true if ACK is received
8709	write lines one by one separated by \ n to device
8710	formats and sends a chunk of data to the device according to transfer protocol
8711	Read a chunk of data
8712	list files on the device
8713	Execute a file on the device using do
8714	Formats device filesystem
8715	Prints a file on the device to console
8716	Show device heap size
8717	Compiles a file specified by path on the device
8718	Removes a file on the device
8719	Backup all files from the device
8720	The upload operation
8721	The download operation
8722	List file on target
8723	Display a widget text or other media in a notebook without the need to import IPython at the top level .
8724	Convert a numeric timestamp to a timezone - aware datetime .
8725	Construct a DelayedCommand to come due at at where at may be a datetime or timestamp .
8726	Rely on pytz . localize to ensure new result honors DST .
8727	Schedule a command to run at a specific time each day .
8728	A class to replace the strftime in datetime package or time module . Identical to strftime behavior in those modules except supports any year . Also supports datetime . datetime times . Also supports milliseconds using %s Also supports microseconds using %u
8729	A function to replace strptime in the time module . Should behave identically to the strptime function except it returns a datetime . datetime object instead of a time . struct_time object . Also takes an optional tzinfo parameter which is a time zone info object .
8730	Returns the nearest year to now inferred from a Julian date .
8731	return the number of seconds in the specified period
8732	Divide a timedelta by a float value
8733	Take a string representing a span of time and parse it to a time delta . Accepts any string of comma - separated numbers each with a unit indicator .
8734	Get the ratio of two timedeltas
8735	Much like the built - in function range but works with dates
8736	Construct a datetime . datetime from a number of different time types found in python and pythonwin
8737	Pass in an Overpass query in Overpass QL .
8738	Return the number of ports .
8739	This attempts to allocate v6 addresses as per RFC2462 and RFC3041 .
8740	Associates the flip with ports and creates it with the flip driver
8741	Allocate or reallocate a floating IP .
8742	Update an existing floating IP .
8743	deallocate a floating IP .
8744	Retrieve a floating IP .
8745	Retrieve a list of floating ips .
8746	Return the number of floating IPs .
8747	Allocate or reallocate a scaling IP .
8748	Update an existing scaling IP .
8749	Deallocate a scaling IP .
8750	Retrieve a scaling IP .
8751	Retrieve a list of scaling ips .
8752	Determine if a vif is on isonet
8753	Splits VIFs into three explicit categories and one implicit
8754	Compares initial security group rules with current sg rules .
8755	Fetches changes and applies them to VIFs periodically
8756	Delete the quota entries for a given tenant_id .
8757	Validate the CIDR for a subnet .
8758	Retrieve a subnet .
8759	Retrieve a list of subnets .
8760	Return the number of subnets .
8761	Delete a subnet .
8762	Updates a SG rule async and return the job information .
8763	Updates a rule and updates the ports
8764	Returns the public net id
8765	A decorator to be used on another decorator
8766	Will add the tenant_id to the context from body .
8767	Validate IP allocation pools .
8768	Adds job to neutron context for use later .
8769	Creates a job with support for subjobs .
8770	Selects an open lswitch for a network .
8771	Configure any additional default transport zone bindings .
8772	Deconfigure any additional default transport zone bindings .
8773	Public interface for fetching lswitch ids for a given network .
8774	Instantiates worker plugins that have requsite properties .
8775	Looks for modules with amtching entry points .
8776	Initializes eventlet and starts wait for workers to exit .
8777	Chunks data into chunk with size< = chunk_size .
8778	Check for overlapping ranges .
8779	Find a deallocated network segment id and reallocate it .
8780	Deletes locks for each IP address that is no longer null - routed .
8781	Creates locks for each IP address that is null - routed .
8782	Return relevant IPAM strategy name .
8783	Return a dict of extra network information .
8784	Create a port .
8785	Update a port .
8786	Diagnose a port .
8787	Set tag on model object .
8788	Get a matching valid tag off the model .
8789	Pop all matching tags off the model and return them .
8790	Pop all matching tags off the port return a valid one .
8791	Does the given port have this tag?
8792	Validates a VLAN ID .
8793	Get all known tags from a model .
8794	Validate and set all known tags on a port .
8795	Creates a payload for the redis server .
8796	Creates a payload for the redis server
8797	Writes a series of security group rules to a redis server .
8798	Gets security groups for interfaces from Redis
8799	Updates security groups by setting the ack field
8800	Run migrations in offline mode .
8801	Run migrations in online mode .
8802	Generic Notifier .
8803	Method to send notifications .
8804	Method builds a payload out of the passed arguments .
8805	Method to build an IP list for the case 1
8806	Returns a tuple of start_period and end_period .
8807	Creates the view for a job while calculating progress .
8808	Retrieve a mac_address_range .
8809	Delete a mac_address_range .
8810	Delete a segment_allocation_range .
8811	Returns a WSGI filter app for use with paste . deploy .
8812	Returns dictionary with keys segment_id and value used IPs count .
8813	Returns dictionary with key segment_id and value unused IPs count .
8814	Returns a set of VIFs from get_instances return value .
8815	Handles changes to interfaces security groups
8816	Update values of a network .
8817	Retrieve a network .
8818	Retrieve a list of networks .
8819	Return the number of networks .
8820	Delete a network .
8821	This is a helper method for testing .
8822	Runs billing report . Optionally sends notifications to billing
8823	Configure all listeners here
8824	Provides an admin context for workers .
8825	Begins the async update process .
8826	Produces a list of ports to be updated async .
8827	Updates the ports through redis .
8828	Gather all ports associated to security group .
8829	Updates a security group rule .
8830	Query for segment allocations .
8831	Sends the given command to Niko Home Control and returns the output of the system .
8832	Implements the if operator with support for multiple elseif - s .
8833	Implements the == operator which does type JS - style coertion .
8834	Implements the < operator with JS - style type coertion .
8835	Implements the < = operator with JS - style type coertion .
8836	Also converts either to ints or to floats .
8837	Implements the merge operator for merging lists .
8838	Gets variable value from data dictionary .
8839	Implements the missing operator for finding missing variables .
8840	Implements the missing_some operator for finding missing variables .
8841	Executes the json - logic with given data .
8842	Performs an indentation
8843	Performs an un - indentation
8844	Handle indent between symbols such as parenthesis braces ...
8845	Improve QTextCursor . atBlockStart to ignore spaces
8846	Update terminal color scheme based on the pygments color scheme colors
8847	Extends mouseMoveEvent to display a pointing hand cursor when the mouse cursor is over a file location
8848	Emits open_file_requested if the press event occured over a file location string .
8849	Connects slots to signals
8850	Setup the python editor run the server and connect a few signals .
8851	Creates a new GenericCodeEdit opens the requested file and adds it to the tab widget .
8852	Add a new empty code editor to the tab widget
8853	Shows an open file dialog and open the file if the dialog was accepted .
8854	Save the current editor document as .
8855	setup the style menu for an editor tab
8856	Update action states when the current tab changed .
8857	Run the current current script
8858	Open the a new tab when goto goes out of the current document .
8859	Worker that returns a list of calltips .
8860	Go to assignements worker .
8861	Returns the list of defined names for the document .
8862	Worker that returns the documentation of the symbol under cursor .
8863	Worker that run the pep8 tool on the current editor text .
8864	Returns the icon resource filename that corresponds to the given typename .
8865	Completes python code using jedi _ .
8866	Strongly inspired from idlelib . ColorDelegator . make_pat
8867	Request a go to assignment .
8868	Not performant but works .
8869	r Read a given BGEN file .
8870	r Create variants metadata file .
8871	Search through lines for match . Raise an Exception if fail to match If match is succesful return the position the match was found
8872	Search through lines for match . Raise an Exception if a match
8873	Return true if instance is an instance of any the Directive types in typeList
8874	Touch a file .
8875	r Compute allele frequency from its expectation .
8876	r Compute dosage from allele expectation .
8877	r Allele expectation .
8878	Try to infer the correct library name .
8879	Fit distance - based AD .
8880	Returns the value of the nearest neighbor from the training set .
8881	Learning is to find the inverse matrix for X and calculate the threshold .
8882	Predict the distances for X to center of the training set .
8883	Predict inside or outside AD for X .
8884	Find min and max values of every feature .
8885	Do nothing and return the estimator unchanged
8886	finalize partial fitting procedure
8887	Compute the header .
8888	Fit structure - based AD . The training model memorizes the unique set of reaction signature .
8889	Return whether this model has a self ref FK and the name for the field
8890	All concrete fields of the SyncableModel subclass except for those specifically blacklisted are returned in a dict .
8891	Returns an unsaved class object based on the valid properties passed in .
8892	Returns the default value for this field .
8893	Should return a 32 - digit hex string for a UUID that is calculated as a function of a set of fields from the model .
8894	Whenever a model is deleted we record its ID in a separate model for tracking purposes . During serialization we will mark the model as deleted in the store .
8895	Static method for error handling .
8896	Checks the condition in poll response to determine if it is complete and no subsequent poll requests should be done .
8897	We set the lower counter between two same instance ids . If an instance_id exists in one fsic but not the other we want to give that counter a value of 0 .
8898	Takes data from the store and integrates into the application .
8899	Takes data from the buffers and merges into the store and record max counters .
8900	SQLite has a limit on the max number of variables allowed for parameter substitution . This limit is usually 999 but can be compiled to a different number . This function calculates what the max is for the sqlite version running on the device . We use the calculated value to chunk our SQL bulk insert statements when deserializing from the store to the app layer .
8901	Authenticate the userargs and password against Django auth backends . The userargs string may be just the username or a querystring - encoded set of params .
8902	We check whether a class has more than 1 FK reference to itself .
8903	Per profile adds each model to a dictionary mapping the morango model name to its model class . We sort by ForeignKey dependencies to safely sync data .
8904	Generic request method designed to handle any morango endpoint .
8905	Creates an access token .
8906	Stores an OWS service in mongodb .
8907	Lists all services in mongodb storage .
8908	Gets service for given name from mongodb storage .
8909	Gets service for given url from mongodb storage .
8910	Delegates owsproxy request to external twitcher service .
8911	A tween factory which produces a tween which raises an exception if access to OWS service is not allowed .
8912	The callable makes it possible to include rpcinterface in a Pyramid application .
8913	Store an OWS service in database .
8914	Lists all services in memory storage .
8915	Get service for given name from memory storage .
8916	Generates a new private key and certificate request submits the request to be signed by the SLCS CA and returns the certificate .
8917	Get parameter in GET request .
8918	Find requested version in GET request .
8919	Check mandatory service name parameter in POST request .
8920	Find requested request type in POST request .
8921	Find requested version in POST request .
8922	Provide a timzeone - aware object for a given datetime and timezone name
8923	return baseurl of given url
8924	Verify ssl service certificate .
8925	Call setup egg_info and return the parsed meta - data .
8926	Bump a development version .
8927	Distribute the project .
8928	Prepare for a release .
8929	Perform source code checks via pylint .
8930	Check for uncommitted changes return True if everything is clean .
8931	Dump project metadata for Jenkins Description Setter Plugin .
8932	Run a command and return its stripped captured output .
8933	Run a command and flush its output .
8934	Return string signifying the SCM used in the given directory .
8935	Factory for the correct SCM provider in workdir .
8936	Exit with error code and message .
8937	Read auth from pip config .
8938	Build Sphinx docs and publish to Confluence .
8939	Provide a zipped stream of the docs tree .
8940	Upload to PyPI .
8941	Upload to WebDAV store .
8942	Upload docs in docs_base to the target of this uploader .
8943	Search for a file named name from cwd or given directory to root . Return None if nothing s found .
8944	A context that enters a given directory and restores the old state on exit .
8945	Context manager that GETs a given url and provides it as a local file .
8946	Run a command .
8947	Run a command or just echo it depending on commit .
8948	Emit a normal message .
8949	Emit a warning message .
8950	Emit an error message to stderr .
8951	Get currently used devpi base URL .
8952	Determine location of tasks . py .
8953	Load and return configuration as a Bunch .
8954	Convert a path part to regex syntax .
8955	Generate parts of regex transformed from glob pattern .
8956	Convert the given glob spec to a compiled regex .
8957	Check patterns in order last match that includes or excludes path wins . Return None on undecided .
8958	Like os . walk and taking the same keyword arguments but generating paths relative to the root .
8959	Build a DEB package .
8960	Perform house - keeping .
8961	Build the project .
8962	Freeze currently installed requirements .
8963	Return current or given time formatted according to ISO - 8601 .
8964	Windows allow application paths to be registered in the registry .
8965	Return a generator of full paths to the given command .
8966	Return the full path to the first match of the given command on the path .
8967	Perform a rachted step replacing one of the internally managed chains with a new one .
8968	Decrypt a message using this double ratchet session .
8969	Encrypt a message using this double ratchet session .
8970	Perform a rachted step calculating a new shared secret from the public key and deriving new chain keys from this secret .
8971	Derive a new set of internal and output data from given input data and the data stored internally .
8972	Create a connection to an other mesh .
8973	Whether a connection can be established between those two meshes .
8974	Create a loader for a knitting pattern set .
8975	Walk the knitting pattern in a right - to - left fashion .
8976	Saves the dump in a file - like object in text mode .
8977	Dump the content to a file .
8978	Dump the ocntent into the file in binary mode .
8979	Saves the dump in a file named path .
8980	Saves the dump in a temporary file and returns its path .
8981	set the pixel but convert the color before .
8982	set the color of the pixel .
8983	The id that identifies the instruction in this cache .
8984	Return the SVG for an instruction .
8985	Return the SVG dict for the SVGBuilder .
8986	Call when there is a change in the instructions .
8987	The last produced mesh .
8988	The last consumed mesh .
8989	The first produced mesh .
8990	The first consumed mesh .
8991	The rows that produce meshes for this row .
8992	The rows that consume meshes from this row .
8993	Load all files from a folder recursively .
8994	Load a folder located relative to a module and return the processed result .
8995	Load a file relative to a module .
8996	Load an example from the knitting pattern examples .
8997	load and process the content behind a url
8998	Load an object from a string and return the processed JSON content
8999	dump a knitting pattern to a file .
9000	Create an iterable from the iterables that contains each element once .
9001	Go through the layout and build the SVG .
9002	Create a definition for the instruction .
9003	Compute the scale of an instruction svg .
9004	Create an SVG from the knitting pattern set .
9005	Add a new empty knitting pattern to the set .
9006	Return a SVGDumper for this instruction .
9007	Transfer this instruction to a new row .
9008	Index of the instruction in the instructions of the row or None .
9009	The instruction after this one or None .
9010	Index of the first produced mesh in the row that consumes it .
9011	The index of the first consumed mesh of this instruction in its row .
9012	Initialize the parsing process .
9013	Parse a knitting pattern set .
9014	Fill a pattern collection .
9015	Parse a row .
9016	Parse an instruction .
9017	Parse a pattern .
9018	Create a new knitting pattern .
9019	Parse a collection of rows .
9020	Connect the parsed rows .
9021	Create a new pattern set .
9022	Add a new row to the pattern .
9023	Write bytes to the file .
9024	Write a string to the file .
9025	An SVG object .
9026	Adds the defs to the SVG structure .
9027	For self . width .
9028	The instructions in a grid .
9029	Walk through the knitting pattern by expanding an row .
9030	expand the consumed meshes
9031	expand the produced meshes
9032	place the instruction on a grid
9033	Loop through all the instructions that are _todo .
9034	Returns an InstructionInGrid object for the instruction
9035	Iterate over instructions .
9036	Iterate over rows .
9037	Iterate over connections between instructions .
9038	The minimum and maximum bounds of this layout .
9039	dump to the file
9040	Add an instruction specification
9041	Convert the specification into an instruction
9042	Eigen decomposition of K .
9043	Derivative of the covariance matrix over the parameters of L .
9044	Listen to parameters change .
9045	Gradient of K .
9046	Robust solve Ax = y .
9047	Draw random samples from a multivariate normal distribution .
9048	Sum of covariance function derivatives .
9049	Effect - sizes parameter B .
9050	r Bernoulli likelihood sampling .
9051	Poisson likelihood sampling .
9052	r Covariance of the prior .
9053	r Mean of the estimated posteriori .
9054	r Covariance of the estimated posteriori .
9055	LMLs fixed - effect sizes and scales for single - marker scan .
9056	r Sample from the specified distribution .
9057	Eigen decomposition of a zero matrix .
9058	r Gradient of the log of the marginal likelihood .
9059	Derivative of the covariance matrix over the lower triangular flat part of L .
9060	Fixed - effect sizes .
9061	Estimates the covariance - matrix of the optimal beta .
9062	Disable parameter optimization .
9063	Enable parameter optimization .
9064	Maximise the marginal likelihood .
9065	Internal use only .
9066	Variance ratio between K and I .
9067	Log of the marginal likelihood for optimal scale .
9068	Log of the marginal likelihood for arbitrary scale .
9069	Degrees of freedom .
9070	r Log of the marginal likelihood .
9071	r Initialize the mean and covariance of the posterior .
9072	Build an engine and a session .
9073	Get a default connection string .
9074	expects a dictionary with mail . keys to create an appropriate smtplib . SMTP instance
9075	a helper method that composes and sends an email with attachments requires a pre - configured smtplib . SMTP instance
9076	connects and optionally authenticates a connection .
9077	Make a function that downloads the data for you or uses a cached version at the given path .
9078	Build a function that handles downloading tabular data and parsing it into a pandas DataFrame .
9079	Decode timestamp using bespoke decoder . Cannot use simple strptime since the ness panel contains a bug that P199E zone and state updates emitted on the hour cause a minute value of 60 to be sent causing strptime to fail . This decoder handles this edge case .
9080	Get all providers registered .
9081	Launch a query across all or a selection of providers .
9082	Get all concepts from all providers .
9083	Get a concept or collection by its uri .
9084	Build the backend and upload it to the remote server at the given index
9085	Install the backend from the given devpi index at the given version on the target host and restart the service .
9086	Returns a sorted version of a list of concepts . Will leave the original list unsorted .
9087	Force update of alarm status and zones
9088	Schedule a state update to keep the connection alive
9089	Return an iterator over the models to be converted to the namespace .
9090	Get the reference BEL namespace if it exists .
9091	Make a namespace .
9092	Convert a PyBEL generalized namespace entries to a set .
9093	Update an already - created namespace .
9094	Add this manager s namespace to the graph .
9095	Add this manager as an annotation to the graph .
9096	Upload the namespace to the PyBEL database .
9097	Remove the default namespace if it exists .
9098	Write as a BEL namespace file .
9099	Write as a BEL annotation file .
9100	Write a BEL namespace mapping file .
9101	Write a BEL namespace for identifiers names name hash and mappings to the given directory .
9102	Get the namespace hash .
9103	Get the long_description from the README . rst file . Assume UTF - 8 encoding .
9104	receives a UUID via the request and returns either a fresh or an existing dropbox for it
9105	expects the id of an existing dropbox and returns its instance
9106	this factory also requires the editor token
9107	preserve the file ending but replace the name with a random token
9108	ensures that no data leaks from drop after processing by removing all data except the status file
9109	creates a zip file from the drop and encrypts it to the editors . the encrypted archive is created inside fs_target_dir
9110	creates an encrypted archive of the dropbox outside of the drop directory .
9111	returns the number of bytes that the cleansed attachments take up on disk
9112	returns a list of strings
9113	returns the user submitted text
9114	returns a list of absolute paths to the attachements
9115	returns a list of absolute paths to the cleansed attachements
9116	destroys all cleanser slaves and their rollback snapshots as well as the initial master snapshot - this allows re - running the jailhost deployment to recreate fresh cleansers .
9117	stops deletes and re - creates all jails . since the cleanser master is rather large that one is omitted by default .
9118	Add a Flask Admin interface to an application .
9119	generates a dropbox uid and renders the submission form with a signed version of that id
9120	accepts a single file upload and adds it to the dropbox as attachment
9121	handles the form submission redirects to the dropbox s status page .
9122	Build a function that handles downloading OBO data and parsing it into a NetworkX object .
9123	Write as a BEL namespace .
9124	Write as a BEL annotation .
9125	Help store an action .
9126	Make a session .
9127	Create the tables for Bio2BEL .
9128	Store a populate event .
9129	Store a populate failed event .
9130	Store a drop event .
9131	Get all actions .
9132	Count all actions .
9133	Ensure the appropriate Bio2BEL data directory exists for the given module then returns the file path .
9134	Build a module configuration class .
9135	Return the SQLAlchemy connection string if it is set .
9136	Get all Bio2BEL modules .
9137	Clear all downloaded files .
9138	Drop all tables from the database .
9139	Provide a label for a list of labels .
9140	Find the best label for a certain labeltype .
9141	Filter a list of labels leaving only labels of a certain language .
9142	Provide a single sortkey for this conceptscheme .
9143	Iterate over instantiated managers .
9144	Drop all .
9145	Clear all caches .
9146	Generate a summary sheet .
9147	Run a combine web interface .
9148	List all actions .
9149	Count the number of BEL relations generated .
9150	Dump as a list of INDRA statements .
9151	convert from list or tuple object to pgmagick . CoordinateList .
9152	convert from list or tuple object to pgmagick . VPathList .
9153	return exif - tag dict
9154	Draw a Bezier - curve .
9155	Scaling Draw Object
9156	set to stroke linecap .
9157	set to stroke linejoin .
9158	Return version string .
9159	Submission to remove a license acceptance request .
9160	Submission to remove a role acceptance request .
9161	Submission to remove an ACL .
9162	Churns over PostgreSQL notifications on configured channels . This requires the application be setup and the registry be available . This function uses the database connection string and a list of pre configured channels .
9163	Given a dbapi cursor lookup all the api keys and their information .
9164	Configuration include fuction for this module
9165	Expands all environment variables in a settings dictionary .
9166	A function task decorator used in place of
9167	This exposes the celery app . The app is actually created as part of the configuration . However this does make the celery app functional as a stand - alone celery application .
9168	Process post - publication events coming out of the database .
9169	Given an archive URI parse to a split ident - hash .
9170	Declaration of routing
9171	Declaration of routes that can be browsed by users .
9172	Declare all routes .
9173	Returns a list of includes to be given to cnxepub . collation . collate .
9174	Given a Binder as binder bake the contents and persist those changes alongside the published content .
9175	Function to supply a database connection object .
9176	Decorator that supplies a cursor to the function . This passes in a psycopg2 Cursor as the argument cursor . It also accepts a cursor if one is given .
9177	Given a model s metadata iterate over the roles . Return values are the role identifier and role type as a tuple .
9178	Obtain the licenses in a dictionary form keyed by url .
9179	Given the model check the license is one valid for publication .
9180	Given the model check that all the metadata role values have valid information in them and any required metadata fields contain values .
9181	Give a database cursor and model check the subjects against the subject vocabulary .
9182	Validates the model using a series of checks on bits of the data .
9183	Lookup a document by id and version .
9184	Given a tree parse to a set of models
9185	Reassemble a Binder object coming out of the database .
9186	Return the list of publications that need moderation .
9187	Configures the session manager
9188	Returns a dictionary of all unique print_styles and their latest tag revision and recipe_type .
9189	Return the list of API keys .
9190	Returns a dictionary with all the past baking statuses of a single book .
9191	Insert a module with the given metadata .
9192	Return the SHA1 hash of the given a file - like object as file . This will seek the file back to 0 when it s finished .
9193	Upsert the file and media_type into the files table . Returns the fileid and sha1 of the upserted file .
9194	Accept a publication request at form value epub
9195	Lookup publication state
9196	Configures the caching manager
9197	Gets the value from the key . If the key doesn t exist the default value is returned otherwise None .
9198	Removes the specified key and returns the corresponding value . If key is not found the default is returned if given otherwise KeyError is raised .
9199	Iterate reversal points in the series .
9200	Decorator for extract_cycles
9201	Iterate cycles in the series .
9202	Count cycles in the series .
9203	Recipe to render a given FST node .
9204	FST node located at the given path
9205	Determine if we re on the targetted node .
9206	Returns prefix for a given multicodec
9207	Adds multicodec prefix to the given bytes input
9208	Removes prefix from a prefixed data
9209	Gets the codec used for prefix the multicodec prefixed data
9210	Archives the provided URL using archive . is
9211	Archives the provided URL using archive . is .
9212	Get the logo for a channel
9213	r ~ |~ \
9214	r | \
9215	r [ ^ \
9216	Lex file .
9217	Load lexer with content from file which can be a path or a file like object .
9218	Inner wrapper to search for mixins by name .
9219	Inner wrapper to search for blocks by name .
9220	Parse arguments to mixin . Add them to scope as variables . Sets upp special variable
9221	This algorithm factors in both the user - provided weight and the difference between the alpha values of the two colors to decide how to perform the weighted average of the two RGB values .
9222	Reverse guard expression . not (
9223	Round half - way away from zero .
9224	Convergent rounding .
9225	Return successive r length permutations of elements in the iterable .
9226	Post parse cycle . nodejs version allows calls to mixins not yet defined or known to the parser . We defer all calls to mixins until after first cycle when all names are known .
9227	Checks if a GitHub call returned multiple pages of data .
9228	Fetch all tags for repository from Github .
9229	Fetch all pull requests . We need them to detect merged_at parameter
9230	Get the creation date of the repository from GitHub .
9231	Fetch events for all issues and add them to self . events
9232	Fetch time for tag from repository .
9233	Fetch commit data for specified event .
9234	The entry point of this script to generate change log ChangelogGeneratorError Is thrown when one of the specified tags was not found in list of tags .
9235	Parse the given ChangeLog data into a list of Hashes .
9236	Create the signal handler map
9237	Daemonize this process
9238	Detects user and project from git .
9239	Convert an ISO formated date and time string to a datetime object .
9240	Fetch event for issues and pull requests
9241	Async fetching of all tags dates .
9242	Find correct closed dates if issues was closed by commits .
9243	Fill actual_date parameter of specified issue by closed date of the commit if it was closed by commit .
9244	Set closed date from this issue .
9245	Encapsulate characters to make markdown look as expected .
9246	Main function to start change log generation
9247	Generate formated list of issues for changelog .
9248	Generate a header for a tag section with specific parameters .
9249	Generate log between 2 specified tags .
9250	Apply all filters to issues and pull requests .
9251	The full cycle of generation for whole project .
9252	Generate log for unreleased closed issues .
9253	Parse issue and generate single line formatted issue line .
9254	If option author is enabled a link to the profile of the author of the pull reqest will be added to the issue line .
9255	Generates log for tag section with header and body .
9256	Generate ready - to - paste log from list of issues and pull requests .
9257	Delete all issues with labels from exclude - labels option .
9258	Add all issues that should be in that tag according to milestone .
9259	Filter issues that belong to specified tag range .
9260	Include issues with labels specified in self . options . include_labels .
9261	Filter all issues that don t have a label .
9262	Filter issues to include only issues with labels specified in include_labels .
9263	This method fetches missing params for PR and filter them by specified options . It include add all PR s with labels from options . include_labels and exclude all from options . exclude_labels .
9264	This method filter only merged PR and fetch missing required attributes for pull requests . Using merged date is more correct than closed date .
9265	Fetch and filter tags fetch dates and sort them in time order .
9266	Sort all tags by date .
9267	Get date and time for tag fetching it if not already cached .
9268	Detect link name and time for specified tag .
9269	Try to detect the newest tag from self . options . base otherwise return a special value indicating the creation of the repo .
9270	If not already cached fetch the creation date of the repo cache it and return the special value indicating the creation of the repo .
9271	Filter tags according since_tag option .
9272	Filter tags according due_tag option .
9273	Filter tags according between_tags option .
9274	Filter tags according exclude_tags and exclude_tags_regex option .
9275	Filter tags according exclude_tags_regex option .
9276	Filter tags according exclude_tags option .
9277	Parses an APRS packet and returns a dict with decoded data
9278	Takes a base91 char string and returns decimal
9279	Takes a decimal and returns base91 char string . With optional parameter for fix with output
9280	Takes a CALLSIGN and returns passcode
9281	Parses the header part of packet Returns a dict
9282	Set a specified aprs - is filter for this connection
9283	Set callsign and password
9284	Initiate connection to APRS server and attempt to login
9285	Closes the socket Called internally when Exceptions are raised
9286	Send a line or multiple lines sperapted by \\ r \\ n
9287	When a position sentence is received it will be passed to the callback function
9288	Attemps connection to the server
9289	Sends login string to server
9290	Generator for complete lines received from the server
9291	Convert UUID to binary blob
9292	Convert binary blob to UUID instance
9293	Convert the python value for storage in the database .
9294	Convert the database value to a pythonic value .
9295	Disconnect from all databases
9296	Find matching database router
9297	Returns dict of values to uniquely reference this item
9298	Apply pagination to query
9299	Apply user specified filters to query
9300	List items from query
9301	Retrieve items from query
9302	Regenerate the signing key for this instance . Store the new key in signing_key property .
9303	Try to pull a date from the request by looking first at the x - amz - date header and if that s not present then the Date header .
9304	Check if date_str is in a recognised format and return an ISO yyyy - mm - dd format version if so . Raise DateFormatError if not .
9305	Handle a request whose date doesn t match the signing key scope date .
9306	Encode body of request to bytes and update content - type if required .
9307	Create the AWS authentication Canonical Request string .
9308	Generate the Canonical Headers section of the Canonical Request .
9309	Generate the AWS4 auth string to sign for the request .
9310	Generate the canonical path as per AWS4 auth requirements .
9311	Parse and format querystring as per AWS4 auth requirements .
9312	Generate the signing key string as bytes .
9313	Generate an SHA256 HMAC encoding msg to UTF - 8 if not already encoded .
9314	Convert a datetime object into a valid STIX timestamp string .
9315	If maybe_dttm is a datetime instance convert to a STIX - compliant string representation . Otherwise return the value unchanged .
9316	Factors out some JSON parse code with error handling to hopefully improve error messages .
9317	Updates Status information
9318	It will poll the URL to grab the latest status resource in a given timeout and time interval .
9319	Validates Status information . Raises errors for required properties .
9320	Validates Collection information . Raises errors for required properties .
9321	Validates API Root information . Raises errors for required properties .
9322	Update the API Root s information and list of Collections
9323	Update the properties of this API Root .
9324	Update the list of Collections contained by this API Root .
9325	Validates server information . Raises errors for required properties .
9326	Update the Server information and list of API Roots
9327	Check that the server is returning a valid Content - Type
9328	Perform an HTTP GET using the saved requests . Session and auth info . If Accept isn t one of the given headers a default TAXII mime type is used . Regardless the response type is checked against the accept header value and an exception is raised if they don t match .
9329	Send a JSON POST request with the given request headers additional URL query parameters and the given JSON in the request body . The extra query parameters are merged with any which already exist in the URL . The json and data parameters may not both be given .
9330	Returns the the amount of memory available for use .
9331	Returns the default number of slave processes to be spawned .
9332	Create a shared memory array from the shape of array .
9333	Create a shared memory array with the same shape and type as a given array filled with value .
9334	Create a shared memory array of given shape and type filled with value .
9335	Copy an array to the shared memory .
9336	Protected get . Get an item from Q . Will block . but if the process group has errors raise an StopProcessGroup exception .
9337	Wait and join the child process . The return value of the function call is returned . If any exception occurred it is wrapped and raised .
9338	Map - reduce with multile processes .
9339	Known issues delimiter and newline is not respected . string quotation with space is broken .
9340	Unpack a structured data - type .
9341	meta class for Ordered construct .
9342	kill all slaves and reap the monitor
9343	ensure the master exit from Barrier
9344	return at most n array items move the cursor .
9345	axis is the axis to chop it off . if self . altreduce is set the results will be reduced with altreduce and returned otherwise will be saved to out then return out .
9346	adapt source to a packarray according to the layout of template
9347	parallel argsort like numpy . argsort
9348	Return a random year .
9349	Return a random dt . date object . Delta args are days .
9350	Return a check digit of the given credit card number .
9351	Return a random credit card number .
9352	Return a random street number .
9353	Return a random job title .
9354	Return a random email text .
9355	Return a str of decimal with two digits after a decimal mark .
9356	Return random words .
9357	Return random sentences .
9358	Return a random paragraph .
9359	Return random paragraphs .
9360	Return a lowercased string with non alphabetic chars removed .
9361	Return random characters .
9362	An aggregator for all above defined public methods .
9363	Return a random user name .
9364	Return a random domain name .
9365	Return random e - mail address in a hopefully imaginary domain .
9366	Return a random bank account number .
9367	Return a random bank identification number .
9368	Return a random taxation ID number for a company .
9369	Return a random government registration ID for a company .
9370	Return a random taxation ID number for a natural person .
9371	Return a random string for use as a password .
9372	Using a schema deserialize a stream of consecutive Avro values .
9373	Check if a given string is in the correct URL format or not
9374	Download a file pointed to by url to a temp file on local disk
9375	This method finds the time range which covers all the Run_Steps
9376	Helper function to parse diff config file which contains SLA rules for diff comparisons
9377	Calculate statistics for given data .
9378	Check if the specifed file exists and is not empty
9379	Given an input timestamp string determine what format is it likely in .
9380	Given a timestamp string return a time stamp in the epoch ms format . If no date is present in timestamp then today s date will be added as a prefix before conversion to epoch ms
9381	Extract SLAs from a set of rules
9382	Organize and store the count of data from the log line into the metric store by metric type transaction timestamp
9383	Parse the Jmeter file and calculate key stats
9384	Parse Jmeter workload output in XML format and extract overall and per transaction data and key statistics
9385	Given a size such as 2333M return the converted value in G
9386	Parse the top output file Return status of the metric parse
9387	get a list of urls from a seeding url return a list of urls
9388	Generate CDF diff plots of the submetrics
9389	Check whether the SLA has passed or failed
9390	Return a timestamp from the raw epoch time based on the granularity preferences passed in .
9391	Organize and store the count of data from the log line into the metric store by columnm group name timestamp
9392	Calculate stats such as percentile and mean
9393	check whether the given sub metric is in important_sub_metrics list
9394	plot CDF for important sub - metrics
9395	Compute anomaly scores for the time series .
9396	Method to extract SAR metric names from the section given in the config . The SARMetric class assumes that the section name will contain the SAR types listed in self . supported_sar_types tuple
9397	Perform the Oct2Py speed analysis . Uses timeit to test the raw execution of an Octave command Then tests progressively larger array passing .
9398	Quits this octave session and cleans up .
9399	Restart an Octave session in a clean state
9400	Run the given function with the given args .
9401	Create a traceback for an Octave evaluation error .
9402	Test whether a name exists and return the name code . Raises an error when the name does not exist .
9403	Test whether the name is an object .
9404	Get or create a function pointer of the given name .
9405	Get or create a user class of the given type .
9406	Clean up resources used by the session .
9407	Read the data from the given file path .
9408	Save a Python object to an Octave file on the given path .
9409	Convert the Octave values to values suitable for Python .
9410	Create a struct from session data .
9411	Convert the Python values to values suitable to send to Octave .
9412	Test if a list contains simple numeric data .
9413	Configure root logger .
9414	Make an Octave class for a given class name
9415	This is how an instance is created when we read a MatlabObject from a MAT file .
9416	Convert to a value to send to Octave .
9417	Get a pointer to the private object .
9418	Decorator to make functional view documentable via drf - autodocs
9419	Decorator for clean docstring formatting
9420	Return true if file is a valid RAR file .
9421	Read current member header into a RarInfo object .
9422	Process current member with op operation .
9423	Load archive members metadata .
9424	Open RAR archive file .
9425	Return file - like object for member .
9426	Return a list of file names in the archive .
9427	Return the instance of RarInfo given name .
9428	Print a table of contents for the RAR file .
9429	Extract a member from the archive to the current working directory using its full name . Its file information is extracted as accurately as possible . member may be a filename or a RarInfo object . You can specify a different directory using path .
9430	Extract the RarInfo objects members to a physical file on the path targetpath .
9431	Convert a RAR archive member DOS time to a Python time tuple .
9432	Wrap c function setting prototype .
9433	Load and validate the header of a pcap file .
9434	Parse a savefile as a pcap_savefile instance . Returns the savefile on success and None on failure . Verbose mode prints additional information about the file s processing . layers defines how many layers to descend and decode the packet . input_file should be a Python file object .
9435	Reads the next individual packet from the capture file . Expects the file handle to be somewhere after the header on the next per - packet header .
9436	Remove the IP packet layer yielding the transport layer .
9437	Strip the Ethernet frame from a packet .
9438	Given an Ethernet frame determine the appropriate sub - protocol ; If layers is greater than zerol determine the type of the payload and load the appropriate type of network packet . It is expected that the payload be a hexified string . The layers argument determines how many layers to descend while parsing the packet .
9439	Call Heartbeat URL
9440	sends a request and gets a response from the Plivo REST API
9441	REST Reload Plivo Config helper
9442	REST Reload Plivo Cache Config helper
9443	REST Call Helper
9444	REST BulkCalls Helper
9445	REST GroupCalls Helper
9446	REST Transfer Live Call Helper
9447	REST Hangup All Live Calls Helper
9448	REST Hangup Live Call Helper
9449	REST Schedule Hangup Helper
9450	REST Cancel a Scheduled Hangup Helper
9451	REST RecordStart helper
9452	REST Conference Mute helper
9453	REST Play something on a Call Helper
9454	REST PlayStop on a Call Helper
9455	REST Schedule playing something on a call Helper
9456	REST Cancel a Scheduled Play Helper
9457	REST Add soundtouch audio effects to a Call
9458	REST Remove soundtouch audio effects on a Call
9459	REST Send digits to a Call
9460	REST Conference Unmute helper
9461	REST Conference Kick helper
9462	REST Conference Hangup helper
9463	REST Conference Deaf helper
9464	REST Conference Undeaf helper
9465	REST Conference RecordStart helper
9466	REST Conference RecordStop
9467	REST Conference Play helper
9468	REST Conference Speak helper
9469	REST Conference List Helper
9470	REST Conference List Members Helper
9471	Return an XML element representing this element
9472	validate a request from plivo
9473	Depth - first search .
9474	Breadth - first search .
9475	Return a node with label . Create node if label is new
9476	Get or create edges using get_or_create_node
9477	Parse dom into a Graph .
9478	Parse a string into a Graph .
9479	Return the other node
9480	Factory for creating the argument parser
9481	Complex code ahead . Comments have been added in as needed .
9482	A to - bytes specific to Python 3 . 5 and below .
9483	A to - bytes specific to Python 3 . 6 and above .
9484	Runs the correct validator for given obj ects . Assumes all same type
9485	Validate the given litezip as struct . Returns a list of validation messages .
9486	Wraps an instruction to be Python 3 . 6 + compatible . This does nothing on Python 3 . 5 and below .
9487	Small helper value to pack an index value into bytecode .
9488	Generates a simple call with an index for something .
9489	Generates a bytecode from an object .
9490	Helper to get optional details about const references
9491	Helper to get optional details about named references
9492	Compiles Pyte objects into a bytecode list .
9493	Simulates the actions of the stack to check safety .
9494	Compiles a set of bytecode instructions into a working function using Python s bytecode compiler .
9495	Given the parsed xml to an ElementTree parse the id from the content .
9496	Parse the file structure to a data structure given the path to a module directory .
9497	Parse a file structure to a data structure given the path to a collection directory .
9498	Parse a litezip file structure to a data structure given the path to the litezip directory .
9499	Converts a completezip file structure to a litezip file structure . Returns a litezip data structure .
9500	Iterate over the instructions in a bytecode string .
9501	Format instruction details for inclusion in disassembly output
9502	Returns intersection of two lists . Assumes the lists are sorted by start positions
9503	Sorts list in place then removes any intervals that are completely contained inside another interval
9504	Returns the distance from the point to the interval . Zero if the point lies inside the interval .
9505	Returns true iff this interval intersects the interval i
9506	Returns true iff this interval contains the interval i
9507	If intervals intersect returns their union otherwise returns None
9508	Like union but ignores whether the two intervals intersect or not
9509	If intervals intersect returns their intersection otherwise returns None
9510	Returns Fasta object with the same name of the bases from start to end but not including end
9511	Replaces all occurrences of old with new
9512	Finds the positions of all gaps in the sequence that are at least min_length long . Returns a list of Intervals . Coords are zero - based
9513	Returns a list of ORFs that the sequence has starting on the given frame . Each returned ORF is an interval . Interval object . If revomp = True then finds the ORFs of the reverse complement of the sequence .
9514	Returns true iff length is > = 6 is a multiple of 3 and there is exactly one stop codon in the sequence and it is at the end
9515	Returns a Fastq object . qual_scores expected to be a list of numbers like you would get in a . qual file
9516	Returns Fastq object with the same name of the bases from start to end but not including end
9517	Removes any leading or trailing N or n characters from the sequence
9518	Returns the number of sequences in a file
9519	Makes interleaved file from two sequence files . If used will append suffix1 onto end of every sequence name in infile_1 unless it already ends with suffix1 . Similar for sufffix2 .
9520	Makes a multi fasta file of random sequences all the same length
9521	Returns the mean length of the sequences in the input file . By default uses all sequences . To limit to the first N sequences use limit = N
9522	Takes a multi fasta or fastq file and writes a new file that contains just one sequence with the original sequences catted together preserving their order
9523	Makes a file of contigs from scaffolds by splitting at every N . Use number_contigs = True to add . 1 . 2 etc onto end of each contig instead of default to append coordinates .
9524	Sorts input sequence file by biggest sequence first writes sorted output file . Set smallest_first = True to have smallest first
9525	Sorts input sequence file by sort - d - k1 1 writes sorted output file .
9526	Writes a FASTG file in SPAdes format from input file . Currently only whether or not a sequence is circular is supported . Put circular = set of ids or circular = filename to make those sequences circular in the output . Puts coverage = 1 on all contigs
9527	Converts input sequence file into a Boulder - IO format as used by primer3
9528	Implements PBKDF2 with the same API as Django s existing implementation using cryptography .
9529	A get or create method for encrypted fields we cache the field in the module to avoid recreation . This also allows us to always return the same class reference for a field .
9530	A decorator for creating encrypted model fields .
9531	Pickled data is serialized as base64
9532	Returns URL - safe sha1 signed base64 compressed JSON string . If key is None settings . SECRET_KEY is used instead .
9533	Retrieve original value and check it wasn t signed more than max_age seconds ago .
9534	Returns a PEP 386 - compliant version number from VERSION .
9535	Returns a tuple of the django_cryptography version . If version argument is non - empty then checks for correctness of the tuple provided .
9536	Return a value check function which raises a value error if the value is not in a pre - defined enumeration of values .
9537	Return a value check function which raises a ValueError if the value does not match the supplied regular expression see also re . match .
9538	Return a value check function which raises a ValueError if the supplied regular expression does not match anywhere in the value see also re . search .
9539	Return a value check function which raises a ValueError if the supplied value when cast as type is less than min or greater than max .
9540	Return a value check function which raises a ValueError if the supplied value when cast as type is less than or equal to min or greater than or equal to max .
9541	Return a value check function which raises a ValueError if the supplied value when converted to a datetime using the supplied format string is less than min or greater than max .
9542	Add a header check i . e . check whether the header record is consistent with the expected field names .
9543	Add a record length check i . e . check whether the length of a record is consistent with the number of expected fields .
9544	Add a value check function for the specified field .
9545	Add a value predicate function for the specified field .
9546	Add a record check function .
9547	Add a record predicate function .
9548	Add a unique check on a single column or combination of columns .
9549	Validate data and return a list of validation problems found .
9550	Validate data and return a iterator over problems found .
9551	Initialise sets used for uniqueness checking .
9552	Apply value check functions on the given record r .
9553	Apply header checks on the given record r .
9554	Apply record length checks on the given record r .
9555	Apply value predicates on the given record r .
9556	Apply record checks on r .
9557	Apply record predicates on r .
9558	Apply unique checks on r .
9559	Invoke each methods on r .
9560	Apply assert methods on r .
9561	Apply check methods on r .
9562	Apply skip functions on r .
9563	Convert the record to a dictionary using field names as keys .
9564	Create an example CSV validator for patient demographic data .
9565	Main function .
9566	Pack given values v1 v2 ... into given bytearray buf starting at given bit offset offset . Pack according to given format string fmt . Give fill_padding as False to leave padding bits in buf unmodified .
9567	Swap bytes in data according to fmt starting at byte offset and return the result . fmt must be an iterable iterating over number of bytes to swap . For example the format string 24 applied to the bytes b \\ x00 \\ x11 \\ x22 \\ x33 \\ x44 \\ x55 will produce the result b \\ x11 \\ x00 \\ x55 \\ x44 \\ x33 \\ x22 .
9568	Telegram chat type can be either private group supergroup or channel . Return user ID if it is of type private chat ID otherwise .
9569	Return a Message instance according to the data received from Facebook Messenger API .
9570	Get response running the view with await syntax if it is a coroutine function otherwise just run it the normal way .
9571	Use the new message to search for a registered view according to its pattern .
9572	For each new message build its platform specific message object and get a response .
9573	Unpack a byte string to the given format . If the byte string contains more bytes than required for the given format the function returns a tuple of values .
9574	Read mat 5 file header of the file fd . Returns a dict with header values .
9575	Read elements from the file .
9576	Read and return the matrix header .
9577	Read full header tag .
9578	Read a numeric matrix . Returns an array with rows of the numeric matrix .
9579	Read a cell array . Returns an array with rows of the cell array .
9580	Read a struct array . Returns a dict with fields of the struct array .
9581	Determine if end - of - file is reached for file fd .
9582	Write data element tag and data .
9583	Write variable header
9584	Write variable data to file
9585	Write compressed variable data to file
9586	Write the numeric array
9587	Returns True if test is True for all array elements . Otherwise returns False .
9588	Private method to execute command .
9589	Create Session by desiredCapabilities
9590	Switch to the given window .
9591	Sets the width and height of the current window .
9592	Sets the x y position of the current window .
9593	Switches focus to the specified frame by index name or webelement .
9594	Execute JavaScript Synchronously in current context .
9595	Execute JavaScript Asynchronously in current context .
9596	Set a cookie .
9597	Save the screenshot to local .
9598	Find an element in the current context .
9599	Find elements in the current context .
9600	Wait for driver till satisfy the given condition
9601	Wait for element till satisfy the given condition
9602	Wait for elements till satisfy the given condition
9603	The factory method to create WebDriverResult from JSON Object .
9604	Raise WebDriverException if returned status is not zero .
9605	Fluent interface decorator to return self if method return None .
9606	Implement the check_unused_args in superclass .
9607	Clear used and unused dicts before each formatting .
9608	format a string by a map
9609	Find name of exception by WebDriver defined error code .
9610	Format the endpoint url by data and then request the remote server .
9611	Internal method to send request to the remote server .
9612	Private method to execute command with data .
9613	find an element in the current element .
9614	Check if an element in the current element .
9615	find elements in the current element .
9616	Assert whether the target is displayed
9617	Take next available controller id and plug in to Virtual USB Bus
9618	Unplug controller from Virtual USB Bus and free up ID
9619	Set a value on the controller If percent is True all controls will accept a value between - 1 . 0 and 1 . 0
9620	Test the functionality of the rController object
9621	Returns the current gamepad state . Buttons pressed is shown as a raw integer value . Use rController . buttons for a list of buttons pressed .
9622	Returns a list of buttons currently pressed
9623	Decodes an encoded 7 - bit ASCII header value into it s actual value .
9624	Imports all available previews classes .
9625	Adds a preview to the index .
9626	Looks up a preview in the index returning a detail view response .
9627	The URL to access this preview .
9628	Renders the message view to a response .
9629	Splits the docstring of the given value into it s summary and body .
9630	Renders and returns an unsent message with the provided context .
9631	Renders and sends an email message .
9632	Renders the message subject for the given context .
9633	Renders and returns an unsent message with the given context .
9634	NBASE = 1000 ndigits = total number of base - NBASE digits weight = base - NBASE weight of first digit sign = 0x0000 if positive 0x4000 if negative 0xC000 if nan dscale = decimal digits after decimal place
9635	A simple method that runs a ManagementUtility .
9636	Utility function for the RedisLogRecord .
9637	JSON - encode a record for serializing through redis .
9638	Publish record to redis logging channel
9639	Publish record to redis logging list
9640	Decorated function is a no - op if TEMPLATE_DEBUG is False
9641	Given a dictionary of variable attribute data from get_details display the data in the terminal .
9642	Start a pdb set_trace inside of the template with the context available as context . Uses ipdb if available .
9643	Start a pydev settrace
9644	Given an iterable with nested iterables generate a flat iterable
9645	Given a variable and one of its attributes that are available inside of a template return its method if it is a callable its class name if it is a model manager otherwise return its value
9646	Given a varaible return the list of attributes that are available inside of a template
9647	Given a variable and one of its attributes determine if the attribute is accessible inside of a Django template and return True or False accordingly
9648	Will parse git log messages in the short format
9649	Determine paths automatically and a little intelligently
9650	Checks the format of the sakefile dictionary to ensure it conforms to specification
9651	This function gives us the option to emit errors or warnings after sake upgrades
9652	Returns sha1 hash of the file supplied as an argument
9653	Writes a sha1 dictionary stored in memory to the . shastore file
9654	Takes sha1 hash of all dependencies and outputs of all targets
9655	Runs the commands supplied as an argument It will exit the program if the commands return a non - zero code
9656	Helper function that returns the node data of the node with the name supplied
9657	Returns a list of nodes that are the parents from all of the nodes given as an argument . This is for use in the parallel topo sort
9658	A sink is a node with no children . This means that this is the end of the line and it should be run last in topo sort . This returns a list of all sinks in a graph
9659	For the parallel topo sort to work the targets have to be executed in layers such that there is no dependency relationship between any nodes in a layer . What is returned is a list of lists representing all the layers or levels
9660	If we don t merge the shas from the sha store and if we build a subgraph the . shastore will only contain the shas of the files from the subgraph and the rest of the graph will have to be rebuilt
9661	Returns the filename of the appropriate sakefile
9662	If you specify a target that shares a dependency with another target both targets need to be updated . This is because running one will resolve the sha mismatch and sake will think that the other one doesn t have to run . This is called a tie . This function will find such ties .
9663	This function gets called when a target is specified to ensure that all tied targets also get included in the subgraph to be built
9664	Takes the sakefile dictionary and builds a NetworkX graph
9665	Removes all the output files from all targets . Takes the graph as the only argument
9666	Writes the graph G in dot file format for graphviz visualization .
9667	Auxiliary function for iterating over a data table .
9668	Prepare transcriptiondata from the transcription sources .
9669	Check the consistency of a given transcription system conversino
9670	Normalize the string according to normalization list
9671	Parse a sound from its name
9672	Runs the ipfn algorithm . Automatically detects of working with numpy ndarray or pandas dataframes .
9673	Return an object described by the accessor by traversing the attributes of context .
9674	Calculate how many days the month spans .
9675	Returns an IEEE 754 float from an array of 4 bytes
9676	calculate the sampling period in seconds
9677	Calculate the adc value that corresponds to a specific bin boundary diameter in microns .
9678	Reads the information string for the OPC
9679	Checks the connection between the Raspberry Pi and the OPC
9680	Read the configuration variables and returns them as a dictionary
9681	Read the second set of configuration variables and return as a dictionary .
9682	Set only the Fan power .
9683	Toggle the power state of the laser .
9684	Read the Serial Number string . This method is only available on OPC - N2 firmware versions 18 + .
9685	Read the firmware version of the OPC - N2 . Firmware v18 + only .
9686	Read the PM data and reset the histogram
9687	Read the gain - scaling - coefficient and sample flow rate .
9688	Return the bin boundaries .
9689	Read the bin particle density
9690	Starts HDLC controller s threads .
9691	Stops HDLC controller s threads .
9692	Sends a new data frame .
9693	Cuts this object from_start to the number requestd returns new instance
9694	Note returns a new Date obj
9695	Find all the timestrings within a block of text .
9696	Check the token and raise an oauth . Error exception if invalid .
9697	Checks nonce of request and return True if valid .
9698	Get delivery log from Redis
9699	Get the possible events from settings
9700	This is an asynchronous sender callable that uses the Django ORM to store webhooks . Redis is used to handle the message queue .
9701	Encodes data to slip protocol and then sends over serial port
9702	Checks the TUN adapter for data and returns any that is found .
9703	Monitors the TUN adapter and sends data over serial port .
9704	Check the serial port for data to write to the TUN adapter .
9705	Wrapper function for TUN and serial port monitoring
9706	Get the field settings if the configured setting is a string try to get a profile from the global config .
9707	Pass the submitted value through the sanitizer before returning it .
9708	Get the field sanitizer .
9709	Maxheap version of a heappop .
9710	Maxheap version of a heappop followed by a heappush .
9711	Push item onto heap maintaining the heap invariant .
9712	Fast version of a heappush followed by a heappop .
9713	Decorator to validate responses from QTM
9714	Async function to connect to QTM
9715	Get the QTM version .
9716	Wait for an event from QTM .
9717	Get measured values from QTM for a single frame .
9718	Stop streaming frames .
9719	Take control of QTM .
9720	Release control of QTM .
9721	Start RT from file . You need to be in control of QTM to be able to do this .
9722	Load a measurement .
9723	Save a measurement .
9724	Load a project .
9725	Set event in QTM .
9726	Used to update QTM settings see QTM RT protocol for more information .
9727	Received from QTM and route accordingly
9728	Get analog data .
9729	Get a single analog data channel .
9730	Get force data .
9731	Get a single force data channel .
9732	Get 6D data .
9733	Get 6D data with euler rotations .
9734	Get image .
9735	Get 3D markers .
9736	Get 3D markers with residual .
9737	Get 3D markers without label .
9738	Get 3D markers without label with residual .
9739	Get 2D markers .
9740	Get 2D linearized markers .
9741	Wait for any or specified event
9742	Sends commands to QTM
9743	async function to reboot QTM cameras
9744	Callback function that is called everytime a data packet arrives from QTM
9745	On socket creation
9746	Parse response from QTM instances
9747	Send discovery packet for QTM to respond to
9748	List running QTM instances asks for input and return chosen QTM
9749	Extract a name to index dictionary from 6dof settings xml
9750	Return true if substring is in string for files in specified path
9751	Find doublefann library
9752	Run SWIG with specified parameters
9753	Commands for experiments .
9754	Get experiment or experiment job .
9755	Delete experiment .
9756	Update experiment .
9757	Stop experiment .
9758	Restart experiment .
9759	Get experiment or experiment job statuses .
9760	Get experiment or experiment job resources .
9761	Get experiment or experiment job logs .
9762	Unbookmark experiment .
9763	Upload code of the current directory while respecting the . polyaxonignore file .
9764	Get cluster and nodes info .
9765	Check a polyaxonfile .
9766	Decorator for CLI with Sentry client handling .
9767	Commands for jobs .
9768	Get job .
9769	Delete job .
9770	Update job .
9771	Stop job .
9772	Restart job .
9773	Get job statuses .
9774	Get job resources .
9775	Get job logs .
9776	Download outputs for job .
9777	Prints as formatted JSON
9778	Login to Polyaxon .
9779	Show current logged Polyaxon user .
9780	Commands for build jobs .
9781	Get build job .
9782	Delete build job .
9783	Update build .
9784	Stop build job .
9785	Bookmark build job .
9786	Get build job resources .
9787	Initialize a new polyaxonfile specification .
9788	Commands for bookmarks .
9789	List bookmarked projects for user .
9790	Remove trailing spaces unless they are quoted with a backslash .
9791	Yield all matching patterns for path .
9792	Check whether a path is ignored . For directories include a trailing slash .
9793	Given a list of patterns returns a if a path matches any pattern .
9794	Returns a whether a path should be ignored or not .
9795	Commands for experiment groups .
9796	Get experiment group by uuid .
9797	Delete experiment group .
9798	Update experiment group .
9799	Stop experiments in the group .
9800	Bookmark group .
9801	Set and get the global configurations .
9802	Get the global config values by keys .
9803	Set the global config values .
9804	Activate a user .
9805	Delete a user .
9806	Deploy polyaxon .
9807	Teardown a polyaxon deployment given a config file .
9808	Create a tar file based on the list of files passed
9809	Print the current version of the cli and platform .
9810	Open dashboard in browser .
9811	Grant superuser role to a user .
9812	Revoke superuser role to a user .
9813	Prints the notebook url for this project .
9814	Start a notebook deployment for this project .
9815	Stops the notebook deployment for this project if it exists .
9816	Add platform specific checks
9817	Install polyaxon using the current config to the correct platform .
9818	Upgrade deployment .
9819	Teardown Polyaxon .
9820	Commands for projects .
9821	Create a new project .
9822	List projects .
9823	Delete project .
9824	Update project .
9825	List experiment groups for this project .
9826	List experiments for this project .
9827	Download code of the current project .
9828	write the object line ; additional args are packed in string
9829	Edges of the grid cells origin at centre of 0 0 .. 0 grid cell .
9830	Write the complete dx object to the file .
9831	Read DX field from file .
9832	Return text cast to the correct type or the selected type
9833	Initialize the corresponding DXclass from the data .
9834	Parse the dx file and construct a DX field object with component classes .
9835	Level - 0 parser and main loop .
9836	Level - 1 parser for comments .
9837	Level - 1 parser for objects .
9838	Level - 2 parser for gridpositions .
9839	Level - 2 parser for gridconnections .
9840	Level - 2 parser for arrays .
9841	Level - 2 parser for a DX field object .
9842	Set parsername as the current parser and apply it .
9843	Split s into tokens and update the token buffer .
9844	Add a new tokenized line from the file to the token buffer .
9845	Return a mesh grid for N dimensions .
9846	Resample to a new regular grid .
9847	Initializes Grid from a CCP4 file .
9848	Initializes Grid from a OpenDX file .
9849	Initialize Grid from gOpenMol plt file .
9850	export density to file using the given format .
9851	Pickle the Grid object
9852	Export the density grid to an OpenDX file .
9853	Returns the coordinates of the centers of all grid cells as an iterator .
9854	Detect the byteorder of stream ccp4file and return format character .
9855	Read header bytes
9856	Get the data for a specific device for a specific end date
9857	Get all devices
9858	Create URL with supplied path and opts parameters dict .
9859	Set a url parameter .
9860	Start subscription manager for real time data .
9861	Update home info .
9862	Update home info async .
9863	Return list of Tibber homes .
9864	Retun an instance of TibberHome for given home id .
9865	Return the currency .
9866	Return the price unit .
9867	Unsubscribe to Tibber rt subscription .
9868	Is real time subscription running .
9869	Removes the temporary value set for None attributes .
9870	Build the execution environment .
9871	Write the data to the output socket .
9872	Store the HTTP status and headers to be sent when self . write is called .
9873	A Cherrypy wsgiserver - compatible wrapper .
9874	Aggregate a list of prefixes .
9875	Walk a py - radix tree and aggregate it .
9876	Metric for ordinal data .
9877	Metric for ratio data .
9878	Coincidence matrix .
9879	Random coincidence matrix .
9880	Distances of the different possible values .
9881	Return the value counts given the reliability data .
9882	Compute Krippendorff s alpha .
9883	Maps to fortran CDF_Inquire .
9884	Gets all CDF z - variable information not data though .
9885	Loads all variables from CDF . Note this routine is called automatically upon instantiation .
9886	Calls fortran functions to load CDF variable data
9887	Read all attribute properties g r and z attributes
9888	Calls Fortran function that reads attribute data . data_offset translates unsigned into signed . If number read in is negative offset added .
9889	Returns uptime in seconds or None on Linux .
9890	A way to figure out the boot time directly on Linux .
9891	Returns uptime in seconds or None on AmigaOS .
9892	Returns uptime in seconds or None on MINIX .
9893	Returns uptime in seconds or None on Plan 9 .
9894	Returns uptime in seconds or None on Solaris .
9895	Returns uptime in seconds or None on Syllable .
9896	Returns uptime in seconds if even remotely possible or None if not .
9897	Returns boot time if remotely possible or None if not .
9898	Initialize an empty JSON file .
9899	A simpler version of data to avoid infinite recursion in some cases .
9900	Overwrite the file with new data . You probably shouldn t do this yourself it s easy to screw up your whole file with this .
9901	Make sure that the class behaves like the data structure that it is so that we don t get a ListFile trying to represent a dict .
9902	Initialize a new file that starts out with some data . Pass data as a list dict or JSON string .
9903	Check if plugin is configured .
9904	Process error .
9905	Sending ICMP packets .
9906	Parse ping command output .
9907	Send a verification email for the email address .
9908	Send a notification about a duplicate signup .
9909	Set this email address as the user s primary email .
9910	Mark the instance s email as verified .
9911	Determine if the confirmation has expired .
9912	Send a verification email to the user .
9913	Create a new user instance .
9914	Create a new email and send a confirmation to it .
9915	Update the instance the serializer is bound to .
9916	Validate the provided is_primary parameter .
9917	Validate the provided data .
9918	Validate the provided confirmation key .
9919	Send out a password reset if the provided data is valid .
9920	Reset the user s password if the provided information is valid .
9921	Validate the provided reset key .
9922	Create a new user from the data passed to the serializer .
9923	Resend a verification email to the provided address .
9924	Create a new email address .
9925	Return all unexpired password reset tokens .
9926	Handle execution of the command .
9927	Get a user by their ID .
9928	Attempt to authenticate a set of credentials .
9929	Returns True if the given username and password authenticate for the given service . Returns False otherwise .
9930	Save the provided data using the class serializer .
9931	Return an HTML tree block describing the given object .
9932	Return the dict key or attribute name of obj which refers to referent .
9933	Walk the object tree ignoring duplicates and circular refs .
9934	Imports the media fixtures files finder class described by import_path where import_path is the full Python path to the class .
9935	Looks for files in the extra locations as defined in MEDIA_FIXTURES_FILES_DIRS .
9936	List all files in all locations .
9937	List all files in all app storages .
9938	Looks for files in the app directories .
9939	Find a requested media file in an app s media fixtures locations .
9940	Set instance variables based on an options dict
9941	Perform the bulk of the work of collectmedia .
9942	Deletes the given relative path using the destination storage backend .
9943	Checks if the target file should be deleted if it already exists
9944	Attempt to link path
9945	Attempt to copy path with storage
9946	Set the current space to Space name and return it .
9947	Create a child space .
9948	Create a child space from an Excel range .
9949	Create a new child space .
9950	Create a node from arguments and return it
9951	Return an ordered mapping from params to args
9952	Get a modelx object from its full name .
9953	Get node from object name and arg string
9954	Hook to override default showwarning .
9955	Custom showtraceback for monkey - patching IPython s InteractiveShell
9956	if maxlen > 0 the message is shortened to maxlen traces .
9957	Monkey patch shell s error handler .
9958	Restore default IPython showtraceback
9959	Restore Python settings to the original states
9960	Retrieve an object by its absolute name .
9961	Display the model tree window .
9962	Get interfaces from their implementations .
9963	Get impls from their interfaces .
9964	Update all LazyEvals in self
9965	Get extra attributes
9966	If args and kwargs contains Cells Convert them to their values .
9967	Return parameter names if the parameters are shareable among cells .
9968	Make a copy of itself and return it .
9969	Return the value of the cells .
9970	Convert column name to index .
9971	Return a range as nested dict of openpyxl cells .
9972	Read values from an Excel range into a dictionary .
9973	Get range from a workbook .
9974	Calculate the Method Resolution Order of bases using the C3 algorithm .
9975	Create a new code object by altering some of code attributes
9976	Replace local variables with free variables
9977	Remove the last redundant token from lambda expression
9978	Find the first FuncDef ast object in source
9979	Extract parameters from a function definition
9980	Extract names from a function definition
9981	True if src is a function definition
9982	Remove decorators from function definition
9983	Replace function name
9984	True if only one lambda expression is included
9985	Reload the source function from the source module .
9986	Get long description from README .
9987	Convert the cells in the view into a DataFrame object .
9988	Create a cells in the space .
9989	Create a cells from a module .
9990	Retrieve an object by a dotted name relative to the space .
9991	Create or get the base space from a list of spaces
9992	Create a new dynamic root space .
9993	Create a dynamic root space
9994	Implementation of attribute setting
9995	Implementation of attribute deletion
9996	Delete a space .
9997	Implementation of cells deletion
9998	Convert multiple cells to a frame .
9999	Convert a CellImpl into a Series .
10000	Remove all nodes with obj and their descendants .
10001	Return nodes with obj .
10002	In replacement for Deprecated add_path method
10003	Rename the model itself
10004	Rename self . Must be called only by its system .
10005	Clear values and nodes calculated from source .
10006	Clear values and nodes of obj and their dependants .
10007	Retrieve an object by a dotted name relative to the model .
10008	Create of get a base space for a tuple of bases
10009	Check if C3 MRO is possible with given bases
10010	Returns a list of command names supported
10011	Returns a dictionary value
10012	Parses option_settings as they are defined in the configuration file
10013	Parses an environment config
10014	Creates an archive from a directory and returns the file that was created .
10015	Adds configuration files to an existing archive
10016	Swaps cnames for an environment
10017	Uploads an application archive version to s3
10018	Returns whether or not the given app_name exists
10019	Creates a new environment
10020	Returns whether or not the given environment exists
10021	Returns the environments
10022	Updates an application version
10023	Returns an environment name for the given cname
10024	Deploys a version to an environment
10025	Returns the versions available
10026	Creates an application version
10027	Deletes unused versions
10028	Describes events from the given environment
10029	adds arguments for the swap urls command
10030	Swaps old and new URLs . If old_environment was active new_environment will become the active environment
10031	dump command dumps things
10032	The init command
10033	Joins a Hangul letter from Korean phonemes .
10034	Waits for an environment to be healthy
10035	Args for the init command
10036	Describes recent events for an environment .
10037	Lists solution stacks
10038	Picks only a coda from a Hangul letter . It returns None if the given letter is not Hangul .
10039	Picks only a coda from a decimal .
10040	Fetch a deposit identifier .
10041	Mint a deposit identifier .
10042	Factory for creating a permission for an admin deposit - admin - access .
10043	Create Invenio - Deposit - UI blueprint .
10044	Default view method .
10045	Create a new deposit identifier .
10046	Extract actions from class .
10047	Base permission factory that check OAuth2 scope and can_method .
10048	Check if a given record is indexed .
10049	Create error handlers on blueprint .
10050	Create Invenio - Deposit - REST blueprint .
10051	Handle deposit action .
10052	Get files .
10053	Handle POST deposit files .
10054	Handle the sort of the files through the PUT deposit files .
10055	Get file .
10056	Handle the file rename through the PUT deposit file .
10057	Handle DELETE deposit file .
10058	Load records .
10059	Load default location .
10060	Load deposit JSON schemas .
10061	Load deposit schema forms .
10062	Factory for record links generation .
10063	Load minter from PIDStore registry based on given value .
10064	Load schema from JSONSchema registry based on given value .
10065	Build a JSON Flask response using the given data .
10066	Serialize a object .
10067	JSON Files Serializer .
10068	Index the record after publishing .
10069	Decorator to update index .
10070	Preserve fields in deposit .
10071	Return an instance of deposit PID .
10072	Convert deposit schema to a valid record schema .
10073	Convert record schema to a valid deposit schema .
10074	Return a tuple with PID and published record .
10075	Merge changes with latest published version .
10076	Store changes on current instance in database and index it .
10077	Create a deposit .
10078	Snapshot bucket and add files in record during first publishing .
10079	Publish new deposit .
10080	Publish the deposit after for editing .
10081	Publish a deposit .
10082	Update selected keys .
10083	Edit deposit .
10084	Discard deposit changes .
10085	Delete deposit .
10086	Clear only drafts .
10087	Update only drafts .
10088	Patch only drafts .
10089	List of Files inside the deposit .
10090	Converts a reStructuredText into its node
10091	Hook the directives when Sphinx ask for it .
10092	Parses the API response and raises appropriate errors if raise_errors was set to True
10093	API call to get a list of templates
10094	API call to get a specific template
10095	API call to create a template
10096	API call to create a new locale and version of a template
10097	API call to create a new version of a template
10098	API call to update a template version
10099	API call to get list of snippets
10100	API call to get a specific Snippet
10101	API call to create a Snippet
10102	Make a dictionary with filename and base64 file data
10103	API call to send an email
10104	Execute all currently queued batch commands
10105	Return instances of all other tabs that are members of the tab s tab group .
10106	Process and prepare tabs .
10107	Adds tab information to context .
10108	Convert a string into a valid python attribute name . This function is called to convert ASCII strings to something that can pass as python attribute name to be used with namedtuples .
10109	Convert the table and column descriptions of a TableGroup into specifications for the DB schema .
10110	Creates a db file with the core schema .
10111	Convenience factory function for csv reader .
10112	Utility function to rewrite rows in tsv files .
10113	Rewrite a dsv file filtering the rows .
10114	Dump a single grid to its ZINC representation .
10115	Parse the given Zinc text and return the equivalent data .
10116	Append the item to the metadata .
10117	Append the items to the metadata .
10118	Construct a regular polygon .
10119	Construct a circle .
10120	Shortcut for creating a rectangle aligned with the screen axes from only two corners .
10121	Create a |Shape| from a dictionary specification .
10122	Keyword arguments for recreating the Shape from the vertices .
10123	Rotate the shape in - place .
10124	Flip the shape in the x direction in - place .
10125	Flip the shape in the y direction in - place .
10126	Flip the shape in an arbitrary direction .
10127	Draw the shape in the current OpenGL context .
10128	Update the shape s position by moving it forward according to its velocity .
10129	Map the official Haystack timezone list to those recognised by pytz .
10130	Retrieve the Haystack timezone
10131	Iterative parser for string escapes .
10132	Parse the incoming grid .
10133	Parse a Project Haystack scalar in ZINC format .
10134	Add an item at a specific location possibly replacing the existing item .
10135	Dump the given grids in the specified over - the - wire format .
10136	Detect the version used from the row content or validate against the version if given .
10137	Assert that the grid version is equal to or above the given value . If no version is set set the version .
10138	Retrieve the official version nearest the one given .
10139	Encrypts file with gpg and random generated password
10140	Checks file sizes for host
10141	Makes parsing arguments a function .
10142	Uploads selected file to the host thanks to the fact that every pomf . se based site has pretty much the same architecture .
10143	Decrypts file from entered links
10144	Creates a Swagger definition from a colander schema .
10145	Creates a list of Swagger params from a colander request schema .
10146	Create a list of Swagger path params from a cornice service path .
10147	Store a parameter schema and return a reference to it .
10148	Creates a Swagger response object from a dict of response schemas .
10149	Store a response schema and return a reference to it .
10150	Generate a Swagger 2 . 0 documentation . Keyword arguments may be used to provide additional information to build methods as such ignores .
10151	Build the Swagger paths and tags attributes from cornice service definitions .
10152	Extract path object and its parameters from service definitions .
10153	Extract swagger operation details from colander view definitions .
10154	Extract schema from view args and transform it using the pipeline of schema transformers
10155	Convert node schema into a parameter object .
10156	Merge b into a recursively without overwriting values .
10157	Create a viewset method for the provided transition_name
10158	Find all transitions defined on model then create a corresponding viewset action method for each and apply it to Mixin . Finally return Mixin
10159	Refresh the project from the original cookiecutter template .
10160	Perform continuous integration tasks .
10161	Generate a number in the range [ 0 num_buckets ) .
10162	Initializer for Sphinx extension API .
10163	Return a dict of stats .
10164	Return a list of personalities readed from the input line .
10165	Return a dict of arrays .
10166	Return a dict of md device define in the line .
10167	Return a dict of md status define in the line .
10168	Return a dict of components in the line .
10169	Register signal receivers which send events .
10170	Returns True if state was successfully changed from idle to scheduled .
10171	Get statistics .
10172	Search for the oldest event timestamp .
10173	Get last aggregation date .
10174	Set bookmark for starting next aggregation .
10175	Format range filter datetime to the closest aggregation interval .
10176	Aggregate and return dictionary to be indexed in ES .
10177	Calculate statistics aggregations .
10178	List the aggregation s bookmarks .
10179	Delete aggregation documents .
10180	Return value on success or raise exception on failure .
10181	Process stats events .
10182	Process stats aggregations .
10183	Delete computed aggregations .
10184	List aggregation bookmarks .
10185	Load events configuration .
10186	Load aggregation configurations .
10187	Load queries configuration .
10188	Publish events .
10189	Comsume all pending events .
10190	Send a message to this actor . Asynchronous fire - and - forget .
10191	Get the anonymization salt based on the event timestamp s day .
10192	Lookup country for IP address .
10193	User information .
10194	Default permission factory .
10195	Register elasticsearch templates for events .
10196	Aggregate indexed events .
10197	Run the actual request
10198	Preprocess an event by anonymizing user information .
10199	Generate event id optimized for ES .
10200	Process events queue .
10201	Register sample events .
10202	Register sample aggregations .
10203	Register queries .
10204	Parse the date range for the query
10205	Extract date from string if necessary .
10206	Run the query .
10207	Build a file - download event .
10208	Build a record - view event .
10209	Check if we can write to the given file
10210	Checks if the user is rooted .
10211	Build nbextension cmdclass dict for the setuptools . setup method .
10212	Count the number of nodes in each subgraph induced by an annotation .
10213	Build a DatafFame to show the overlap between different sub - graphs .
10214	Calculate the subgraph similarity tanimoto similarity in nodes passing the given filter .
10215	Rank sub - graphs by which have the most nodes matching an given filter .
10216	Render the graph as JavaScript in a Jupyter Notebook .
10217	Generate the annotations JSON for Ideogram .
10218	Plots your graph summary statistics on the given axes .
10219	Remove nodes with the given function and namespace .
10220	Preprocess the excel sheet
10221	Preprocess the excel file .
10222	Extract the list of NIFT names from the BEL resource and builds a dictionary mapping from the lowercased version to the uppercase version .
10223	Find pairs of nodes that have mutual causal edges that are regulating each other such that A - > B and B - | A .
10224	Find pairs of nodes that have mutual causal edges that are increasing each other such that A - > B and B - > A .
10225	Extract an undirected graph of only correlative relationships .
10226	Return a set of all triangles pointed by the given node .
10227	Get a set of triples representing the 3 - cycles from a directional graph .
10228	Yield all triples of nodes A B C such that A pos B A pos C and B neg C .
10229	Summarize the stability of the graph .
10230	Flattens the complex or composite abundance .
10231	Flatten list abundances .
10232	Expand all list abundances to simple subject - predicate - object networks .
10233	Helper to deal with cartension expansion in unqualified edges .
10234	Return nodes that are both in reactants and reactions in a reaction .
10235	Expand all reactions to simple subject - predicate - object networks .
10236	Get several graphs by their identifiers .
10237	Prepare a citation data dictionary from a graph .
10238	Counts the citations in a graph based on a given filter
10239	Group the citation counters by subgraphs induced by the annotation .
10240	Count the number of publications of each author to the given graph .
10241	Group the author counters by sub - graphs induced by the annotation .
10242	Get a dictionary from the given PubMed identifiers to the sets of all evidence strings associated with each in the graph .
10243	Count the number of citations from each year .
10244	Create a citation timeline counter from the graph .
10245	Complete the Counter timeline .
10246	Count the confidences in the graph .
10247	Overwrite all PubMed citations with values from NCBI s eUtils lookup service .
10248	Update the context of a subgraph from the universe of all knowledge .
10249	Adds a highlight tag to the given nodes .
10250	Returns if the given node is highlighted .
10251	Removes the highlight from the given nodes or all nodes if none given .
10252	Adds a highlight tag to the given edges .
10253	Remove the highlight from the given edges or all edges if none given .
10254	Get the out - edges to the given node that are causal .
10255	Return a set of all nodes that have an in - degree of 0 .
10256	Return a set of all nodes that have both an in - degree > 0 and out - degree > 0 .
10257	Returns a set of all ABUNDANCE nodes that have an causal out - degree of 0 .
10258	Get top centrality dictionary .
10259	Get a modifications count dictionary .
10260	Remove all values that are zero .
10261	Collapse all of the given functions variants edges to their parents in - place .
10262	Collapse all edges passing the given edge predicates .
10263	Collapse pairs of nodes with the given namespaces that have the given relationship .
10264	Collapse pairs of nodes with the given namespaces that have orthology relationships .
10265	Collapse all equivalence edges away from Entrez . Assumes well formed 2 - way equivalencies .
10266	Collapse consistent edges together .
10267	Collapse all nodes with the same name merging namespaces by picking first alphabetical one .
10268	Output the HBP knowledge graph to the desktop
10269	Return if the node is an upstream leaf .
10270	Get nodes with no incoming edges one outgoing edge and without the given key in its data dictionary .
10271	Check if the node is both a source and also has an annotation .
10272	Get nodes on the periphery of the sub - graph that do not have a annotation for the given key .
10273	Prune unannotated nodes on the periphery of the sub - graph .
10274	Remove all leaves and source nodes that don t have weights .
10275	Generate a mechanistic sub - graph upstream of the given node .
10276	Preprocess the graph stratify by the given annotation then run the NeuroMMSig algorithm on each .
10277	Takes a graph stratification and runs neurommsig on each
10278	Calculate the composite NeuroMMSig Score for a given list of genes .
10279	Calculate the node neighbor score for a given list of nodes . - Doesn t consider self loops
10280	Perform a number of runs
10281	Get the set of possible successor edges peripheral to the sub - graph .
10282	Get the set of possible predecessor edges peripheral to the sub - graph .
10283	Count the source nodes in an edge iterator with keys and data .
10284	Count the target nodes in an edge iterator with keys and data .
10285	Gets all edges from a given subgraph whose source and target nodes pass all of the given filters
10286	Get a summary dictionary of all peripheral nodes to a given sub - graph .
10287	Add all of the members of the complex abundances to the graph .
10288	Adds all of the members of the composite abundances to the graph .
10289	Adds all of the reactants and products of reactions to the graph .
10290	Add the reference nodes for all variants of the given function .
10291	Enrich the sub - graph with the unqualified edges from the graph .
10292	Edges between entities in the sub - graph that pass the given filters .
10293	Add causal edges between entities in the sub - graph .
10294	Return the set of all namespaces with incorrect names in the graph .
10295	Get all namespaces that are used in the BEL graph aren t actually defined .
10296	Return the set of all incorrect names from the given namespace in the graph .
10297	Get the names from a namespace that wasn t actually defined .
10298	Return the dict of the sets of all incorrect names from the given namespace in the graph .
10299	Group the errors together for analysis of the most frequent error .
10300	Takes the names from the graph in a given namespace and the erroneous names from the same namespace and returns them together as a unioned set
10301	Count the number of elements in each value of the dictionary .
10302	What percentage of x is contained within y?
10303	Calculate the tanimoto set similarity .
10304	Calculate the tanimoto set similarity using the minimum size .
10305	Return a dictionary of distances keyed by the keys in the given dict .
10306	Return a distance matrix keyed by the keys in the given dict .
10307	r Calculate an alternative distance matrix based on the following equation .
10308	A convenience function for plotting a horizontal bar plot from a Counter
10309	A convenience function for plotting a vertical bar plot from a Counter
10310	Adds an edge while preserving negative keys and paying no respect to positive ones
10311	Prepares C3 JSON for making a bar chart from a Counter
10312	Prepare C3 JSON string dump for a time series .
10313	Calculate the betweenness centrality over nodes in the graph .
10314	Get get a canonical representation of the ordered collection by finding its minimum circulation with the given sort key
10315	Check if a pair of nodes has any contradictions in their causal relationships .
10316	Return if the set of BEL relations contains a contradiction .
10317	r Generate statistics for a single run
10318	r Compute the average number of runs that have a spanning cluster
10319	Compute the average size of the largest cluster
10320	Compute the average moments of the cluster size distributions
10321	r Generate successive microcanonical percolation ensemble averages
10322	Generate a linear chain with auxiliary nodes for spanning cluster detection
10323	Generate a square lattice with auxiliary nodes for spanning detection
10324	Compile microcanonical averages over all iteration steps into single arrays
10325	Compute the binomial PMF according to Newman and Ziff
10326	Compute the canonical cluster statistics from microcanonical statistics
10327	Helper function to compute percolation statistics
10328	Test the regulator hypothesis of the given node on the input data using the algorithm .
10329	Calculate the final effect of the root node to the sink node in the path .
10330	Return the highest ranked edge from a multiedge .
10331	Group the nodes occurring in edges by the given annotation .
10332	Groups graph into subgraphs and assigns each subgraph a score based on the average of all nodes values for the given node key
10333	Group the nodes occurring in edges by the given annotation with a node filter applied .
10334	Make an expand function that s bound to the manager .
10335	Make a delete function that s bound to the manager .
10336	Create an excel sheet ready to be used in SPIA software .
10337	Build an adjacency matrix for each KEGG relationship and return in a dictionary .
10338	Populate the adjacency matrix .
10339	Export a SPIA data dictionary into an Excel sheet at the given path .
10340	Export a SPIA data dictionary into a directory as several TSV documents .
10341	Export the graph to a SPIA Excel sheet .
10342	Overlays tabular data on the network
10343	Overlay tabular data on the network for data that comes from an data set with identifiers that lack namespaces .
10344	Load and pre - process a differential gene expression data .
10345	Loads many namespaces and combines their names .
10346	Merges namespaces from multiple locations to one .
10347	Run the reverse causal reasoning algorithm on a graph .
10348	Exports all names and missing names from the given namespace to its own BEL Namespace files in the given directory .
10349	Helps remove extraneous whitespace from the lines of a file
10350	Adds a linted version of each document in the source directory to the target directory
10351	Get gene info from Entrez .
10352	Builds a skeleton for gene summaries
10353	Write a boilerplate BEL document with standard document metadata definitions .
10354	Get a sub - graph induced over all nodes matching the query string .
10355	Get the giant component of a graph .
10356	Get a random graph by inducing over a percentage of the original nodes .
10357	Get a random graph by keeping a certain percentage of original edges .
10358	Shuffle the node s data .
10359	Shuffle the relations .
10360	Check if all edges between two nodes have the same relation .
10361	Rewire a graph s edges target nodes .
10362	Check if the source and target nodes are the same .
10363	Check if pmod of source causes activity of target .
10364	Check if the degradation of source causes activity of target .
10365	Check if the translocation of source causes activity of target .
10366	Does the given complex contain the member?
10367	Return if the formation of a complex with u increases the activity of v .
10368	Find edges that are A - A meaning that some conditions in the edge best describe the interaction .
10369	Print a summary of the number of edges passing a given set of filters .
10370	Build a filter that keeps edges whose data dictionaries are super - dictionaries to the given dictionary .
10371	Fail for edges with citations whose references are one of the given PubMed identifiers .
10372	Pass for nodes that have the given namespace .
10373	Pass for nodes that have one of the given namespaces .
10374	Assign if a value is greater than or less than a cutoff .
10375	Help calculate network - wide concordance
10376	Calculates network - wide concordance .
10377	Calculate the one - sided probability of getting a value more extreme than the distribution .
10378	Calculates a graph s concordance as well as its statistical probability .
10379	Returns the concordance scores for each stratified graph based on the given annotation
10380	Returns the results of concordance analysis on each subgraph stratified by the given annotation .
10381	Get a mapping from drugs to their list of gene .
10382	Run EpiCom analysis on many graphs .
10383	Convert the Alzheimer s and Parkinson s disease NeuroMMSig excel sheets to BEL .
10384	Remove all edges between node pairs with inconsistent edges .
10385	Gets all walks under a given length starting at a given node
10386	Matches a simple metapath starting at the given node
10387	Build a database of scores for NeuroMMSig annotated graphs .
10388	Calculate the scores over all biological processes in the sub - graph .
10389	Calculate the scores over precomputed candidate mechanisms .
10390	Generate candidate mechanisms and run the heat diffusion workflow .
10391	Get the average score over multiple runs .
10392	Run the heat diffusion workflow and get runners for every possible candidate mechanism
10393	Run the heat diffusion workflow to get average score for every possible candidate mechanism .
10394	For each sub - graph induced over the edges matching the annotation calculate the average score for all of the contained biological processes
10395	Return an iterable over all nodes that are leaves .
10396	Iterate over all nodes without a score .
10397	Remove random edges until there is at least one leaf node .
10398	Calculate the score for all leaves .
10399	Calculate scores for all leaves until there are none removes edges until there are and repeats until all nodes have been scored . Also yields the current graph at every step so you can make a cool animation of how the graph changes throughout the course of the algorithm
10400	Determines if the algorithm is complete by checking if the target node of this analysis has been scored yet . Because the algorithm removes edges when it gets stuck until it is un - stuck it is always guaranteed to finish .
10401	Return the final score for the target node .
10402	Calculate the new score of the given node .
10403	Return the numpy structured array data type for sample states
10404	The NumPy Structured Array type for canonical statistics
10405	canonical cluster statistics for a single run and a single probability
10406	The NumPy Structured Array type for canonical averages over several runs
10407	Initialize the canonical averages from a single - run cluster statistics
10408	Reduce the canonical averages over several runs
10409	The NumPy Structured Array type for finalized canonical averages over several runs
10410	Finalize canonical averages
10411	Compare generated mechanisms to actual ones .
10412	Print a summary of the number of nodes passing a given set of filters .
10413	Build a filter that only passes on nodes in the given list .
10414	Build a filter that fails on nodes in the given list .
10415	Build a filter function for matching the given BEL function with the given namespace or namespaces .
10416	Build a filter that passes only on nodes that have the given key in their data dictionary .
10417	Returns all variants of the given node .
10418	Get a mapping from variants of the given node to all of its upstream controllers .
10419	Make a dict that accumulates the values for each key in an iterator of doubles .
10420	Return a histogram of the different types of relations present in a graph .
10421	Count in how many edges each annotation appears in a graph
10422	Count in how many edges each annotation appears in a graph but filter out source nodes and target nodes .
10423	Return if the edges between the given nodes are consistent meaning they all have the same relation .
10424	Add edges to the graph when a two way edge exists and the opposite direction doesn t exist .
10425	Add the same edge but in the opposite direction if not already present .
10426	Add the missing unqualified edges between entities in the subgraph that are contained within the full graph .
10427	Build a template BEL document with the given PubMed identifiers .
10428	Output PubMed identifiers from a graph to a stream .
10429	Get count of rows in table object .
10430	Select multiple row
10431	Select row partial match
10432	Select row index
10433	Select last row
10434	Get cell value
10435	Get table row index matching given text
10436	Verify partial table cell value
10437	Get all accessibility application name that are currently running
10438	Start memory and CPU monitoring with the time interval between each process scan
10439	Stop memory and CPU monitoring
10440	get CPU stat for the give process name
10441	get memory stat
10442	Get list of items in given GUI .
10443	Get object properties .
10444	Get object property value .
10445	Gets the list of object available in the window which matches component name or role name or both .
10446	Launch application .
10447	Activate window .
10448	Click item .
10449	Get all states of given object
10450	Get object size
10451	Grab focus .
10452	Wait till a window or component exists .
10453	Wait till a window does not exist .
10454	Check whether an object state is enabled or not
10455	Check item .
10456	Verify check item .
10457	Get access key of given object
10458	Clear contents of general pasteboard .
10459	Method to test if the general pasteboard is empty or not with respect to the type of object you want .
10460	Get LDTP format accessibile name
10461	Match given string by escaping regex characters
10462	Check a menu item exist .
10463	Verify a menu item is enabled
10464	Verify a menu item is checked
10465	Get a list of the running applications .
10466	Get the current frontmost application .
10467	Get a random app that has windows .
10468	Launch the application with the specified bundle ID
10469	Launch app with a given bundle path .
10470	Terminate app with a given bundle ID . Requires 10 . 6 .
10471	Private method to queue events to run .
10472	Add keypress to queue .
10473	Send one character with no modifiers .
10474	Check whether given keyboard character is a single character .
10475	Send one character with the given modifiers pressed .
10476	Private method to handle generic mouse button clicking .
10477	Private method to handle generic mouse left button dragging and dropping .
10478	Wait for a particular UI event to occur ; this can be built upon in NativeUIElement for specific convenience methods .
10479	Retrieve a list of actions supported by the object .
10480	Perform the specified action .
10481	Generator which yields all AXChildren of the object .
10482	Generator which recursively yields all AXChildren of the object .
10483	Method which indicates if the object matches specified criteria .
10484	Perform _match but on another object not self .
10485	Generator which yields matches on AXChildren .
10486	Generator which yields matches on AXChildren and their children .
10487	Return a list of all children that match the specified criteria .
10488	Get the base application UIElement .
10489	Return the bundle ID of the application .
10490	Return the specified item in a pop up menu .
10491	Drag the left mouse button without modifiers pressed .
10492	Double - click and drag the left mouse button without modifiers pressed .
10493	Click the left mouse button without modifiers pressed .
10494	Click the right mouse button without modifiers pressed .
10495	Click the right mouse button with modifiers pressed .
10496	Click the left mouse button and drag object .
10497	Double - click primary mouse button .
10498	Triple - click primary mouse button .
10499	Generic wait for a UI event that matches the specified criteria to occur .
10500	Convenience method to wait for creation of some UI element .
10501	Convenience method to wait for a window with the given name to disappear .
10502	Convenience method to wait for value attribute of given element to change .
10503	Convenience method to wait for focused window to change
10504	Remove registered callback on window create
10505	Stop the current event loop if possible returns True if it expects that it was successful False otherwise
10506	Main entry point . Parse command line options and start up a server .
10507	Server Bind . Forces reuse of port .
10508	Logs the message in the root logger with the log level
10509	Stop logging .
10510	Captures screenshot of the whole desktop or given window
10511	On window create call the function with given arguments
10512	Register at - spi event
10513	Register keystroke events
10514	Get window uptime
10515	Verify scrollbar is vertical
10516	Verify scrollbar is horizontal
10517	Set max value
10518	Set min value
10519	Press scrollbar down with number of iterations
10520	Press scrollbar up with number of iterations
10521	Press scrollbar right with number of iterations
10522	Press scrollbar left with number of iterations
10523	Get all combo box item
10524	Authenticate the gmusicapi Mobileclient instance .
10525	Get playlist information of a user - generated Google Music playlist .
10526	Create song list from a user - generated Google Music playlist .
10527	Cast the positional argument at given position into a list if not already a list .
10528	Send a JSON request .
10529	Return a list of registered projects .
10530	Return a PYBOSSA Project for the project_id .
10531	Return a list with matching project arguments .
10532	Create a project .
10533	Update a project instance .
10534	Delete a Project with id = project_id .
10535	Return a list of registered categories .
10536	Return a PYBOSSA Category for the category_id .
10537	Return a list with matching Category arguments .
10538	Create a Category .
10539	Update a Category instance .
10540	Delete a Category with id = category_id .
10541	Return a list of tasks for a given project ID .
10542	Return a list of matched tasks for a given project ID .
10543	Create a task for a given project ID .
10544	Update a task for a given task ID .
10545	Delete a task for a given task ID .
10546	Return a list of task runs for a given project ID .
10547	Return a list of matched task runs for a given project ID .
10548	Delete the given taskrun .
10549	Return a list of results for a given project ID .
10550	Return a list of matched results for a given project ID .
10551	Update a result for a given result ID .
10552	Return the object without the forbidden attributes .
10553	Create a helping material for a given project ID .
10554	Return a list of helping materials for a given project ID .
10555	Return a list of matched helping materials for a given project ID .
10556	Update a helping material for a given helping material ID .
10557	Authenticate the gmusicapi Musicmanager instance .
10558	Download Google Music songs .
10559	Convert Unix path from Cygwin to Windows path .
10560	Get mutagen metadata dict from a file .
10561	Replace mutagen metadata field list values in mutagen tags with the first list value .
10562	Normalize metadata to improve match accuracy .
10563	Compare two song collections to find missing songs .
10564	Get filepaths with supported extensions from given filepaths .
10565	Exclude file paths based on regex patterns .
10566	Check a song metadata field value for a pattern .
10567	Check a song metadata dict against a set of metadata filters .
10568	Match a Google Music song dict against a set of metadata filters .
10569	Match a local file against a set of metadata filters .
10570	Generate a filename for a song based on metadata .
10571	Create directory structure and file name based on metadata template .
10572	Walk a directory tree with configurable depth .
10573	Load songs from local filepaths .
10574	Load playlists from local filepaths .
10575	Load songs from local playlist .
10576	Extract an alphabetically sorted list of elements from the compounds of the material .
10577	Determine the assay of self .
10578	Get the masses of elements in the package .
10579	Add another chem material package to this material package .
10580	Calculate the density at the specified temperature .
10581	Calculate the density at the specified temperature pressure and composition .
10582	Set the parent path and the path from the new parent path .
10583	Create a sub account in the account .
10584	Remove an account from the account s sub accounts .
10585	Retrieves a child account . This could be a descendant nested at any level .
10586	Create an account in the general ledger structure .
10587	Retrieves an account s descendants from the general ledger structure given the account name .
10588	Returns the account and all of it s sub accounts .
10589	Validates whether the accounts in a list of account names exists .
10590	Returns a report of this class .
10591	Create a transaction in the general ledger .
10592	Calculate a path relative to the specified module file .
10593	Get the date from a value that could be a date object or a string .
10594	Calculate the local Nusselt number .
10595	Calculate the average Nusselt number .
10596	Calculate the local heat transfer coefficient .
10597	Calculate the average heat transfer coefficient .
10598	Set all the size class masses and H20_mass in the package to zero and the solid_density to 1 . 0
10599	Create a template csv file for a data set .
10600	Generate URL on the modularized endpoints and url parameters
10601	Used to instantiate a regular HTTP request object
10602	Calculate the alpha value given the material state .
10603	Calculate the enthalpy at the specified temperature and composition using equation 9 in Merrick1983b .
10604	Create an entity and add it to the model .
10605	Remove an entity from the model .
10606	Prepare the model for execution .
10607	Execute the model .
10608	Extract an alphabetically sorted list of elements from the material s compounds .
10609	Create a MaterialStream based on the specified parameters .
10610	Calculate the enthalpy of the package at the specified temperature .
10611	Calculate the enthalpy of the package at the specified temperature in case the material is coal .
10612	Calculate the temperature of the package given the specified enthalpy using a secant algorithm .
10613	Set the enthalpy of the package to the specified value and recalculate it s temperature .
10614	Set the temperature of the package to the specified value and recalculate it s enthalpy .
10615	Create a complete copy of the package .
10616	Set all the compound masses in the package to zero . Set the pressure to 1 the temperature to 25 and the enthalpy to zero .
10617	Determine the mass of the specified compound in the package .
10618	Determine the mole amounts of all the compounds .
10619	Determine the mole amount of the specified compound .
10620	Determine the sum of mole amounts of all the compounds .
10621	Determine the masses of elements in the package and return as a dictionary .
10622	Determine the mass of the specified elements in the package .
10623	Extract other from this package modifying this package and returning the extracted material as a new package .
10624	Calculate the enthalpy flow rate of the stream at the specified temperature .
10625	Calculate the enthalpy flow rate of the stream at the specified temperature in the case of it being coal .
10626	Calculate the temperature of the stream given the specified enthalpy flow rate using a secant algorithm .
10627	Set the enthalpy flow rate of the stream to the specified value and recalculate it s temperature .
10628	Set the temperature of the stream to the specified value and recalculate it s enthalpy .
10629	Set the higher heating value of the stream to the specified value and recalculate the formation enthalpy of the daf coal .
10630	Create a complete copy of the stream .
10631	Set all the compound mass flow rates in the stream to zero . Set the pressure to 1 the temperature to 25 and the enthalpy to zero .
10632	Determine the mass flow rate of the specified compound in the stream .
10633	Determine the amount flow rates of all the compounds .
10634	Determine the amount flow rate of the specified compound .
10635	Determine the sum of amount flow rates of all the compounds .
10636	Determine the mass flow rates of elements in the stream .
10637	Determine the mass flow rates of elements in the stream and return as a dictionary .
10638	Determine the mass flow rate of the specified elements in the stream .
10639	Extract other from this stream modifying this stream and returning the extracted material as a new stream .
10640	Calculate the Grashof number .
10641	Calculate the Reynolds number .
10642	Calculate the Ralleigh number .
10643	Calculate the Nusselt number .
10644	Calculate the Sherwood number .
10645	Create a model object from the data set for the property specified by the supplied symbol using the specified polynomial degree .
10646	Calculate the material physical property at the specified temperature in the units specified by the object s property_units property .
10647	Create a sub component in the business component .
10648	Remove a sub component from the component .
10649	Retrieve a child component given its name .
10650	Add an activity to the component .
10651	Retrieve an activity given its name .
10652	Prepare the component for execution .
10653	Execute the component at the current clock cycle .
10654	Prepare the entity for execution .
10655	Execute the entity at the current clock cycle .
10656	Update group counts with multiplier
10657	Calculate the amounts from the specified compound masses .
10658	Calculate the mole fractions from the specified compound masses .
10659	Calculate the masses from the specified compound amounts .
10660	Calculate the mole fractions from the specified compound amounts .
10661	Convert the specified mass of the source compound to the target using element as basis .
10662	Determine the mass fraction of an element in a chemical compound .
10663	Determine the set of elements present in a list of chemical compounds .
10664	Determine the molar mass of a chemical compound .
10665	Determine the stoichiometry coefficient of an element in a chemical compound .
10666	Determine the stoichiometry coefficients of the specified elements in the specified chemical compound .
10667	Add another psd material package to this material package .
10668	Get the datetime at a given period .
10669	Calculate the default path in which thermochemical data is stored .
10670	Split a compound s combined formula and phase into separate strings for the formula and phase .
10671	Convert the value to its final form by unit conversions and multiplying by mass .
10672	Writes a compound to an auxi file at the specified directory .
10673	Load all the thermochemical data factsage files located at a path .
10674	Load all the thermochemical data auxi files located at a path .
10675	List all compounds that are currently loaded in the thermo module and their phases .
10676	Calculate the heat capacity of the compound for the specified temperature and mass .
10677	Calculate the heat capacity of the compound phase .
10678	Calculate the portion of enthalpy of the compound phase covered by this Cp record .
10679	Calculate the portion of entropy of the compound phase covered by this Cp record .
10680	Calculate the phase s magnetic contribution to heat capacity at the specified temperature .
10681	Calculate the enthalpy of the compound phase at the specified temperature .
10682	Calculate the phase s magnetic contribution to enthalpy at the specified temperature .
10683	Calculate the entropy of the compound phase at the specified temperature .
10684	Calculate the phase s magnetic contribution to entropy at the specified temperature .
10685	Calculate the phase s magnetic contribution to Gibbs energy at the specified temperature .
10686	Calculate the heat capacity of a phase of the compound at a specified temperature .
10687	Calculate the enthalpy of a phase of the compound at a specified temperature .
10688	Create a polynomial model to describe the specified property based on the specified data set and save it to a . json file .
10689	Create a dictionary of datasets and a material object for air .
10690	Render the report in the specified format
10691	Convert an RGB color representation to a HEX color representation .
10692	Convert an RGB color representation to a YIQ color representation .
10693	Convert an RGB color representation to an HSV color representation .
10694	Convert a HEX color representation to an RGB color representation .
10695	Convert a YIQ color representation to an RGB color representation .
10696	Convert an HSV color representation to an RGB color representation .
10697	Given a start color end color and a number of steps returns a list of colors which represent a scale between the start and end color .
10698	Get key value return default if key doesn t exist
10699	Set key value
10700	Create an A - HREF tag that points to another page usable in paginate .
10701	Set a devices state .
10702	Pull a water heater s modes from the API .
10703	Pull a water heater s usage report from the API .
10704	Pull a device from the API .
10705	Pull the accounts locations .
10706	Pull the accounts vacations .
10707	Create a vacation .
10708	Delete a vacation by ID .
10709	Authenticate with the API and return an authentication token .
10710	Return a list of water heater devices .
10711	Wrap all sqlalchemy model in settings .
10712	Generate the binary strings for a comma seperated list of commands .
10713	Send a string of binary data to the FireCracker with proper timing .
10714	Set RTS and DTR to the requested state .
10715	Send X10 commands using the FireCracker on comPort
10716	Send X10 commands when module is used from the command line .
10717	Returns a normalized house code i . e . upper case . Raises exception X10InvalidHouseCode if house code appears to be invalid
10718	Returns a normalized unit number i . e . integers Raises exception X10InvalidUnitNumber if unit number appears to be invalid
10719	Send X10 command to ??? unit .
10720	Generate an appropriate parser .
10721	Get the pylint command for these arguments .
10722	Wraps a generated function so that it catches all Type - and ValueErrors and raises IntoDPValueErrors .
10723	Get the list of xformer functions for the given signature .
10724	Returns a transformer function for the given signature .
10725	Gets the level for the variant .
10726	Generate the correct function for a variant signature .
10727	Generate the correct function for an array signature .
10728	Generate the correct function for a struct signature .
10729	Handle a base case .
10730	Get the signature of a dbus object .
10731	Enforces lower case options and option values where appropriate
10732	Converts string values to floats when appropriate
10733	Converts string values to booleans when appropriate
10734	Create fork and store it in current instance
10735	Convert list of dictionaries to dictionary of lists
10736	Subdivide list into N lists
10737	turns keyword pairs into path or filename if into == path then keywords are separted by underscores else keywords are used to create a directory hierarchy
10738	Evaluate function on given grid and return values in grid format Assume X and Y are 2 - dimensional arrays containing x and y coordinates respectively of a two - dimensional grid and f is a function that takes 1 - d arrays with two entries . This function evaluates f on the grid points described by X and Y and returns another 2 - dimensional array of the shape of X and Y that contains the values of f .
10739	Decorator that logs function calls in their self . log
10740	Decorator that adds a runtime profile object to the output
10741	Decorator that prints memory information at each call of the function
10742	Decorator that prints memory and runtime information at each call of the function
10743	Declare abstract function . Requires function to be empty except for docstring describing semantics . To apply function first argument must come with implementation of semantics .
10744	Decorator that prints running time information at each call of the function
10745	Similar to validate but validates multiple objects at once each with their own specification . Fill objects that were specified but not provided with NotPassed or default values Apply value_condition to object dictionary as a whole
10746	get all fields of model execpt id
10747	Verify if the file is already downloaded and complete . If they don t exists or if are not complete use homura download function to fetch files . Return a list with the path of the downloaded file and the size of the remote file .
10748	Validate bands parameter .
10749	Check scene name and whether remote file exists . Raises WrongSceneNameError if the scene name is wrong .
10750	Download remote . tar . bz file .
10751	Check whether sceneInfo is valid to download from AWS Storage .
10752	Download each specified band and metadata .
10753	Open an archive on a filesystem .
10754	Slugify a name in the ISO - 9660 way .
10755	Increment an ISO name to avoid name collision .
10756	Slugify a path maintaining a map with the previously slugified paths .
10757	Test whether a path can be written to .
10758	Test whether a stream can be written to .
10759	Construct a contour generator from a curvilinear grid .
10760	Construct a contour generator from a rectilinear grid .
10761	Construct a contour generator from a uniform grid .
10762	Wait until we can make a socket connection to sphinx .
10763	Get a unique token for usage in differentiating test runs that need to run in parallel .
10764	Generates a random token using the url - safe base64 alphabet . The bits argument specifies the bits of randomness to use .
10765	Returns the url of the poll . If the poll has not been submitted yet an empty string is returned instead .
10766	Retrieves a poll from strawpoll .
10767	Submits a poll on strawpoll .
10768	NumPy _ style contour formatter .
10769	MATLAB _ style contour formatter .
10770	Shapely _ style contour formatter .
10771	Get contour lines at the given level .
10772	Get contour polygons between the given levels .
10773	Add a Node object to nodes dictionary calculating its coordinates using offset
10774	Hunt down the settings . py module by going up the FS path
10775	Determine if the given test supports transaction management for database rollback test isolation and also whether or not the test has opted out of that support .
10776	Clean up any created database and schema .
10777	Makes a matplotlib . pyplot . Figure without tooltips or keybindings
10778	updates self . field
10779	removes the closest particle in self . pos to p
10780	See diffusion_correlated for information related to units etc
10781	Makes a guess at particle positions using heuristic centroid methods .
10782	Workhorse of feature_guess
10783	Checks whether to add particles at a given position by seeing if adding the particle improves the fit of the state .
10784	Checks whether or not adding a particle should be present .
10785	Attempts to add missing particles to the state .
10786	Automatically adds and subtracts missing & extra particles .
10787	Automatically adds and subtracts missing & extra particles in a region of poor fit .
10788	Automatically adds and subtracts missing particles based on local regions of poor fit .
10789	Guesses whether particles are bright on a dark bkg or vice - versa
10790	Prime FFTW with knowledge of which FFTs are best on this machine by loading wisdom from the file wisdomfile
10791	Save the acquired wisdom generated by FFTW to file so that future initializations of FFTW will be faster .
10792	How much of inner is in outer by volume
10793	Given a state returns a list of groups of particles . Each group of particles are located near each other in the image . Every particle located in the desired region is contained in exactly 1 group .
10794	Take a platonic image and position and create a state which we can use to sample the error for peri . Also return the blurred platonic image so we can vary the noise on it later
10795	Create a perfect platonic sphere of a given radius R by supersampling by a factor scale on a grid of size N . Scale must be odd .
10796	Translate an image in fourier - space with plane waves
10797	Load default users and groups .
10798	weighting function for Barnes
10799	The first - order Barnes approximation
10800	Correct normalized version of Barnes
10801	Pairwise distance between each point in a and each point in b
10802	Convert cheb coordinates to windowdow coordinates
10803	Evaluates an individual Chebyshev polynomial k in coordinate space with proper transformation given the window
10804	Determine admin type .
10805	Validate subscription policy value .
10806	Validate privacy policy value .
10807	Validate state value .
10808	Delete a group and all associated memberships .
10809	Update group .
10810	Query group by a group name .
10811	Query group by a list of group names .
10812	Query group by user .
10813	Modify query as so include only specific group names .
10814	Invite a user to a group .
10815	Invite users to a group by emails .
10816	Verify if given user is a group member .
10817	Determine if given user can see other group members .
10818	Determine if user can invite people to a group .
10819	Get membership for given user and group .
10820	Filter a query result .
10821	Get a user s memberships .
10822	Get all invitations for given user .
10823	Get all pending group requests .
10824	Get a group s members .
10825	Modify query as so include only specific members .
10826	Modify query as so to order the results .
10827	Create a new membership .
10828	Delete membership .
10829	Activate membership .
10830	Create a new group admin .
10831	Get specific GroupAdmin object .
10832	Delete admin from group .
10833	Get all groups for for a specific admin .
10834	Get count of admins per group .
10835	Get all social newtworks profiles
10836	Based on some criteria filter the profiles and return a new Profiles Manager containing only the chosen items
10837	scan jitter is in terms of the fractional pixel difference when moving the laser in the z - direction
10838	Returns the detailed information on individual interactions with the social media update such as favorites retweets and likes .
10839	Edit an existing individual status update .
10840	Immediately shares a single pending update and recalculates times for updates remaining in the queue .
10841	Permanently delete an existing status update .
10842	Move an existing status update to the top of the queue and recalculate times for all updates in the queue . Returns the update with its new posting time .
10843	Returns an array of updates that are currently in the buffer for an individual social media profile .
10844	Returns an array of updates that have been sent from the buffer for an individual social media profile .
10845	Randomize the order at which statuses for the specified social media profile will be sent out of the buffer .
10846	Edit the order at which statuses for the specified social media profile will be sent out of the buffer .
10847	Create one or more new status updates .
10848	Temporarily do not use any formatter so that text printed is raw
10849	Set the verbosity level of a certain log handler or of all handlers .
10850	Generates a centered boolean mask of a 3D sphere
10851	Local max featuring to identify bright spherical particles on a dark background .
10852	Otsu threshold on data .
10853	Harris - motivated feature detection on a d - dimensional image .
10854	Cumulative distribution function for the traingle distribution
10855	See sphere_analytical_gaussian_exact .
10856	Get the update tile surrounding particle n
10857	Translate index info to parameter name
10858	Get the amount of support size required for a particular update .
10859	Update the particles field given new parameter values
10860	Get position and radius of one or more particles
10861	Get position of one or more particles
10862	Get radius of one or more particles
10863	Add a particle or list of particles given by a list of positions and radii both need to be array - like .
10864	Returns dozscale and particle list of update
10865	Get the tile surrounding particle n
10866	Calls an update but clips radii to be > 0
10867	Generate the composite rotation matrix that rotates the slab normal .
10868	A fast j2 defined in terms of other special functions
10869	Returns Hermite - Gauss quadrature points for even functions
10870	Returns Gauss - Laguerre quadrature points rescaled for line scan integration
10871	Returns the wavefront aberration for an aberrated defocused lens .
10872	Returns a prefactor in the electric field integral .
10873	Calculates one of three electric field integrals .
10874	Calculates the symmetric and asymmetric portions of a confocal PSF .
10875	Calculates a set of Gauss quadrature points & weights for polydisperse light .
10876	Calculates the illumination PSF for a line - scanning confocal with the confocal line oriented along the x direction .
10877	Calculates the point spread function of a line - scanning confocal .
10878	Calculates the point spread function of a line - scanning confocal with polydisperse dye emission .
10879	Wraps a point - spread function in x and y .
10880	Convert a scalar a to a list and all iterables to list as well .
10881	If a single element list extract the element as an object otherwise leave as it is .
10882	Convert an integer or iterable list to numpy array of length dim . This func is used to allow other methods to take both scalars non - numpy arrays with flexibility .
10883	Apply the documentation from superclass to subclass by filling in all overridden member function docstrings with those from the parent class
10884	Array slicer object for this tile
10885	Opposite slicer the outer part wrt to a field
10886	Iterate the vector of all corners of the hyperrectangles
10887	Format a 3d vector field in certain ways see coords for a description of each formatting method .
10888	Returns the coordinate vectors associated with the tile .
10889	Return the kvectors associated with this tile given the standard form of - 0 . 5 to 0 . 5 . norm and form arguments arethe same as that passed to Tile . coords .
10890	Test whether coordinates are contained within this tile .
10891	Intersection of tiles returned as a tile
10892	Translate a tile by an amount dr
10893	Pad this tile by an equal amount on each side as specified by pad
10894	Returns a filtered image after applying the Fourier - space filters
10895	Sets Fourier - space filters for the image . The image is filtered by subtracting values from the image at slices .
10896	Read the file and perform any transforms to get a loaded image
10897	When given a raw image and the scaled version of the same image it extracts the exposure parameters associated with those images . This is useful when
10898	Interal draw method simply prints to screen
10899	Update the value of the progress and update progress bar .
10900	Make sure that the required comps are included in the list of components supplied by the user . Also check that the parameters are consistent across the many components .
10901	Check that the list of components comp is compatible with both the varmap and modelstr for this Model
10902	Put a figure label in an axis
10903	Compares a state s residuals in real and Fourier space with a Gaussian .
10904	Compare the data model and residuals of a state .
10905	Returns 3 masks that trisect an image into 3 triangular portions .
10906	each element of std0 should correspond with the element of std1
10907	Plot two parts of the ortho view the two sections given by orientation .
10908	Plots a set of circles corresponding to a slice through the platonic structure . Copied from twoslice_overlay with comments standaloneness .
10909	create a two particle state and compare it to featuring using a single particle guess
10910	Returns a list of the global parameter names .
10911	Calculates the number of pixels to use for J at a given memory usage .
10912	Returns a non - constant damping vector allowing certain parameters to be more strongly damped than others .
10913	Finds the particles in a tile as numpy . ndarray of ints .
10914	Separates particles into convenient groups for optimization .
10915	Ensures that all particles are included in exactly 1 group
10916	Finds the biggest region size for LM particle optimization with a given memory constraint .
10917	Translates a tile in the padded image to the unpadded image .
10918	Returns the index of the lowest of the passed values . Catches nans etc .
10919	Runs Levenberg - Marquardt optimization on a state .
10920	Levenberg - Marquardt optimization on a set of particles .
10921	Levenberg - Marquardt optimization for every particle in the state .
10922	Optimization of a state along a specific set of directions in parameter space .
10923	Crawls slowly to the minimum - cost state .
10924	Fits a new component to an old component
10925	Keeps all user supplied options the same but resets counters etc .
10926	LM run evaluating 1 step at a time .
10927	workhorse for do_run_1
10928	Workhorse for do_run_2
10929	Takes more steps without calculating J again .
10930	Calculates LM updates with or without the acceleration correction .
10931	Updates the current set of parameter values and previous values sets a flag to re - calculate J .
10932	Returns a dict of termination statistics
10933	Returns a Bool of whether the algorithm has found a satisfactory minimum
10934	Returns a Bool of whether to terminate .
10935	Checks if the full J should be updated .
10936	Updates J JTJ and internal counters .
10937	Execute a Broyden update of J
10938	Execute an eigen update of J
10939	Geodesic acceleration correction to the LM step .
10940	Updates self . J returns nothing
10941	Takes an array param_vals updates function returns the new error
10942	Updates the opt_obj returns new error .
10943	Calculates J along the direction .
10944	Resets the particle groups and optionally the region size and damping .
10945	workhorse for the self . do_run_xx methods .
10946	Calls LMParticles . do_internal_run for each group of particles .
10947	Resets the initial radii used for updating the particles . Call if any of the particle radii or positions have been changed external to the augmented state .
10948	Resets the aug_state and the LMEngine
10949	Returns an object with a the numbers of shares a link has had using Buffer .
10950	Take a sample from a field given flat indices or a shaped slice
10951	Update a single parameter or group of parameters params with values .
10952	Here we build gradient and hessian functions based on the properties of a state that are generally wanted . For each one we fill in _grad or _hess with a function that takes care of various options such as slicing and flattening . For example m below takes the model selects different indices from it maybe flattens it and copies it . This is then used in the fisherinformation gradmodel and hessmodel functions .
10953	Setup the image model formation equation and corresponding objects into their various objects . mdl is a peri . models . Model object
10954	Switch out the data for the model s recreation of the data .
10955	Get the tiles corresponding to a particular section of image needed to be updated . Inputs are the parameters and values . Returned is the padded tile inner tile and slicer to go between but accounting for wrap with the edge of the image as necessary .
10956	Return component by category name
10957	Allows for fast local updates of log - likelihood
10958	Update various internal variables from a model update from oldmodel to newmodel for the tile tile
10959	Sets the memory usage level of the state .
10960	randomly deletes particles and adds 1 - px noise for a realistic initial featuring guess
10961	Creates an image as a peri . util . Image which is similar to the image in the tutorial
10962	Get the value of a list or single parameter .
10963	Set the overall shape of the calculation area . The total shape of that the calculation can possibly occupy in pixels . The second inner is the region of interest within the image .
10964	Notify parent of a parameter change
10965	Combine the fields from all components
10966	Set the shape for all components
10967	Ensure that shared parameters are the same value everywhere
10968	Inherit some functions from the components that we own . In particular let s grab all functions that begin with param_ so the super class knows how to get parameter groups . Also take anything that is listed under Component . exports and rename with the category type i . e . SphereCollection . add_particle - > Component . obj_add_particle
10969	Read all environment variables to see if they contain PERI
10970	Used for breadcrumb dynamic_list_constructor .
10971	List all user memberships .
10972	List all pending memberships listed only for group admins .
10973	List all user pending memberships .
10974	Create new group .
10975	Manage your group .
10976	Delete group .
10977	List user group members .
10978	Leave group .
10979	Approve a user .
10980	Remove user from a group .
10981	Accpet pending invitation .
10982	Get an initial featuring of sphere positions in an image .
10983	Completely optimizes a state from an image of roughly monodisperse particles .
10984	Gets a completely - optimized state from an image and an initial guess of particle positions and radii .
10985	Optimizes a state from an initial set of positions and radii without any known microscope parameters .
10986	Combines centroid featuring with the globals from a previous state .
10987	If state_name or im_name is None picks them interactively through Tk and then sets with or without the full path .
10988	Workhorse for translating particles . See get_particles_featuring for docs .
10989	Links the state st psf zscale with the global zscale
10990	Final optimization for the best - possible state .
10991	Workhorse for creating & optimizing states with an initial centroid guess .
10992	Calculates an ilm order based on the shape of an image . This is based on something that works for our particular images . Your mileage will vary .
10993	Used to check if there is a dict in a dict
10994	Create random parameters for this ILM that mimic experiments as closely as possible without real assumptions .
10995	Creates a barnes interpolant & calculates its values
10996	Returns details of the posting schedules associated with a social media profile .
10997	Set the posting schedules for the specified social media profile .
10998	Calculates the moments of the probability distribution p with vector v
10999	Calculates the 3D psf at a particular z pixel height
11000	Transform z to real - space coordinates from tile coordinates
11001	fftshift and pad the field with zeros until it has size finalshape . if zpad is off then no padding is put on the z direction . returns the fourier transform of the field
11002	Pack the parameters into the form necessary for the integration routines above . For example packs for calculate_linescan_psf
11003	Calculates a linescan psf
11004	Calculates a pinhole psf
11005	Make request and convert JSON response to python objects
11006	Returns all active bets
11007	Return bets with given filters and ordering .
11008	Return slug of a project that given bet is associated with or None if bet is not associated with any project .
11009	Subscribe to event for given bet ids .
11010	Opens local preview of your blog website
11011	Get the relative path to the API resource collection
11012	Starts a new article
11013	Looks for errors in source code of your blog
11014	value_class is initially a string with the import path to the resource class but we need to get the actual class before doing any work
11015	Saves changes and sends them to GitHub
11016	Uploads new version of the blog website
11017	Return the given number as a string with a sign in front of it ie . + if the number is positive - otherwise .
11018	Show Zebra balance .
11019	Show all messages in the messages key of the given dict .
11020	Adds images to the last article
11021	Generates the circle .
11022	Given a string key a corresponding node in the hash ring is returned .
11023	Given a string key it returns a long value this long value represents a place on the hash ring .
11024	Get the Marathon networking mode for the app .
11025	Get the portMappings field for the app container .
11026	Given a list of pem objects sort the objects into the private key leaf certificate and list of CA certificates in the trust chain . This function assumes that the list of pem objects will contain exactly one private key and exactly one leaf certificate and that only key and certificate type objects are provided .
11027	Raises a requests . exceptions . HTTPError if the response has a non - 200 status code .
11028	Sometimes we need the protocol object so that we can manipulate the underlying transport in tests .
11029	Callback to collect the Server - Sent Events content of a response . Callbacks passed will receive event data .
11030	Recursively make requests to each endpoint in endpoints .
11031	Perform a GET request and get the contents of the JSON response .
11032	Get a JSON field from the response JSON .
11033	Parse value from string .
11034	Parse a value from an environment variable .
11035	Perform a request to a specific endpoint . Raise an error if the status code indicates a client or server error .
11036	Check the result of each request that we made . If a failure occurred but some requests succeeded log and count the failures . If all requests failed raise an error .
11037	Set up a client key if one does not exist already .
11038	Set up a client key in Vault if one does not exist already .
11039	Read data from Vault . Returns the JSON - decoded response .
11040	Write data to Vault . Returns the JSON - decoded response .
11041	Get a single value for the given key out of the given set of headers .
11042	Perform a request .
11043	Run the server i . e . start listening for requests on the given host and port .
11044	Create a marathon - acme instance .
11045	Initialise the storage directory with the certificates directory and a default wildcard self - signed certificate for HAProxy .
11046	Initialise the logging by adding an observer to the global log publisher .
11047	Parse the field and value from a line .
11048	Translates bytes into lines and calls lineReceived .
11049	Handle the field value pair .
11050	Dispatch the event to the handler .
11051	Start listening for events from Marathon running a sync when we first successfully subscribe and triggering a sync on API request events .
11052	Fetch the list of apps from Marathon find the domains that require certificates and issue certificates for any domains that don t already have a certificate .
11053	Issue a certificate for the given domain .
11054	When removing an object other objects with references to the current object should remove those references . This function identifies objects with forward references to the current object then removes those references .
11055	When removing an object with foreign fields back - references from other objects to the current object should be deleted . This function identifies foreign fields of the specified object whose values are not None and which specify back - reference keys then removes back - references from linked objects to the specified object .
11056	Ensure that all forward references on the provided object have the appropriate backreferences .
11057	Retrieve value from store .
11058	Initializes the bot plugins and everything .
11059	Connects to slack and enters the main loop .
11060	Does cleanup of bot and plugins .
11061	Sends a message to the specified channel
11062	Sends a message to a user as an IM
11063	Takes a SlackEvent parses it for a command and runs against registered plugin
11064	message_replied event is not truly a message event and does not have a message . text don t process such events
11065	Show current allow and deny blocks for the given acl .
11066	Add a user to the given acl allow block .
11067	Create a new acl .
11068	Delete an acl .
11069	Run the mongod process .
11070	Create a proxy to a class instance stored in proxies .
11071	Class decorator factory ; adds proxy class variables to target class .
11072	Return primary key ; if value is StoredObject verify that it is loaded .
11073	Assign to a nested dictionary .
11074	Retrieve user by username
11075	Adds a user object to the user manager
11076	Sets permissions on user object
11077	Used to send a message to the specified channel .
11078	Schedules a function to be called after some period of time .
11079	Stops a timer if it hasn t fired yet
11080	Utility function to query slack for a particular user
11081	Decorator to mark plugin functions as entry points for web calls
11082	Cast value to its frozen counterpart .
11083	Displays help for each command
11084	Causes the bot to write its current state to backend .
11085	Causes the bot to gracefully shutdown .
11086	Prints information about the user and bot version .
11087	Causes the bot to ignore all messages from the channel .
11088	Causes the bot to resume operation in the channel .
11089	High order function for sort methods .
11090	Select path by criterion .
11091	Select file path by criterion .
11092	Select dir path by criterion .
11093	Count how many files in this directory . Including file in sub folder .
11094	Count how many folders in this directory . Including folder in sub folder .
11095	Select file path by extension .
11096	Select file path by text pattern in file name .
11097	Select file path by text pattern in absolute path .
11098	Select file path by size .
11099	Select file path by modify time .
11100	Select file path by access time .
11101	Select file path by create time .
11102	Make a zip archive .
11103	Create a compressed zip archive backup for a directory .
11104	Decorate methods when locking repository is required .
11105	Decorate methods when synchronizing repository is required .
11106	Investigate pickling errors .
11107	Walk the repository and yield all found files relative path joined with file name .
11108	Walk repository and yield all found directories relative path
11109	Walk repository and yield all found directories relative path .
11110	Walk a certain directory in repository and yield all found directories relative path .
11111	Synchronizes the Repository information with the directory . All registered but missing files and directories in the directory will be automatically removed from the Repository .
11112	Load repository from a directory path and update the current instance .
11113	Create a repository at given real path or load any existing one . This method insures the creation of the directory in the system if it is missing . \ n Unlike create_repository this method doesn t erase any existing repository in the path but loads it instead .
11114	Remove . pyrepinfo file from path if exists and related files and directories when respective flags are set to True .
11115	Save repository . pyrepinfo to disk .
11116	Create a tar file package of all the repository files and directories . Only files and directories that are stored in the repository info are stored in the package tar file .
11117	get directory info from the Repository .
11118	get parent directory info of a file or directory from the Repository .
11119	get file information dict from the repository given its relative path and name .
11120	Given an id get the corresponding file info relative path joined with file name .
11121	Get file relative path given the file name . If file name is redundant in different directories in the repository this method ensures to return all or some of the files according to skip value .
11122	Adds a directory in the repository and creates its attribute in the Repository with utc timestamp . It insures adding all the missing directories in the path .
11123	Remove directory from repository .
11124	Move a directory in the repository from one place to another . It insures moving all the files and subdirectories in the system .
11125	Rename a directory in the repository . It insures renaming the file in the system .
11126	Copy an exisitng system file to the repository . attribute in the Repository with utc timestamp .
11127	Update the value and the utc timestamp of a file that is already in the Repository . \ n If file is not registered in repository and error will be thrown . \ n If file is missing in the system it will be regenerated as dump method is called .
11128	Ensure value is string .
11129	Build per minute stats for each key
11130	Monitors data kept in files in the predefined directory in a new thread .
11131	Stops monitoring the predefined directory .
11132	Called when a file in the monitored directory has been moved .
11133	Tears down all temp files and directories .
11134	Test whether a file target is not exists or it exists but allow overwrite .
11135	Copy this file to other place .
11136	Clients a Docker client .
11137	Decorate methods when repository path is required .
11138	clean repository given before and after states
11139	Get repository descriptive stats
11140	Reset repository instance .
11141	Load repository from a directory path and update the current instance . First new repository still will be loaded . If failed then old style repository load will be tried .
11142	Remove all repository from path along with all repository tracked files .
11143	Get whether creating a file or a directory from the basenane of the given path is allowed
11144	Given a path return relative path to diretory
11145	Get a list representation of repository state along with useful information . List state is ordered relativeley to directories level
11146	Get file information dict from the repository given its relative path .
11147	Check whether a given relative path is a repository file path
11148	Create a tar file package of all the repository files and directories . Only files and directories that are tracked in the repository are stored in the package tar file .
11149	Renames an item in this collection as a transaction .
11150	Use default hash method to return hash value of a piece of string default setting use utf - 8 encoding .
11151	Return md5 hash value of a piece of a file
11152	Return sha256 hash value of a piece of a file
11153	Return sha512 hash value of a piece of a file
11154	A command line auto complete similar behavior . Find all item with same prefix of this one .
11155	Print top_n big dir in this dir .
11156	Print top_n big file in this dir .
11157	Print top_n big dir and top_n big file in each dir .
11158	Create a new folder having exactly same structure with this directory . However all files are just empty file with same file name .
11159	Execute every . py file as main script .
11160	Trail white space at end of each line for every . py file .
11161	Auto convert your python code in a directory to pep8 styled code .
11162	File size in bytes .
11163	Get most recent modify time in timestamp .
11164	Get most recent access time in timestamp .
11165	Get most recent create time in timestamp .
11166	Lists options that have not been used to format other values in their sections . Good for finding out if the user has misspelled any of the options .
11167	List names of options and positional arguments .
11168	Add an Option object to the user interface .
11169	Append a positional argument to the user interface .
11170	Read program documentation from a DocParser compatible file .
11171	Return user friendly help on program options .
11172	Return user friendly help on positional arguments in the program .
11173	Return user friendly help on positional arguments .
11174	Return a summary of program options their values and origins . width is maximum allowed page width use self . width if 0 .
11175	Parse text blocks from a file .
11176	Pop parse and return the first self . nargs items from args .
11177	Parse arguments found in settings files . Use the values in self . true for True in settings files or those in self . false for False case insensitive .
11178	Return the separator that preceding format i or for i == 0 .
11179	Return a URL to redirect the user to for OAuth authentication .
11180	Exchange the authorization code for an access token .
11181	Wraps Lock . acquire
11182	Wraps Lock . release
11183	Handle a dict that might contain a wrapped state for a custom type .
11184	Wrap the marshalled state in a dictionary .
11185	Enable HTTP access to a dataset .
11186	Update the descriptive metadata interactively .
11187	Create a proto dataset .
11188	Interactive prompting to populate the readme .
11189	Default editor updating of readme content .
11190	Show the descriptive metadata in the readme .
11191	Use YAML from a file or stdin to populate the readme .
11192	Add a file to the proto dataset .
11193	Add metadata to a file in the proto dataset .
11194	Convert a proto dataset into a dataset .
11195	Copy a dataset to a different location .
11196	Compress anything to bytes or string .
11197	attempt to deduce if a pre 100 year was lost due to padded zeros being taken off
11198	Change unicode output into bytestrings in Python 2
11199	The CPython version of fromutc checks that the input is a datetime object and that self is attached as its tzinfo .
11200	Given a datetime in UTC return local time
11201	Strip comments from line string .
11202	Strip comments from json string .
11203	dayofweek == 0 means Sunday whichweek 5 means last instance
11204	Convert a registry key s values to a dictionary .
11205	Parse strings as returned from the Windows registry into the time zone name as defined in the registry .
11206	This retrieves a time zone from the local zoneinfo tarball that is packaged with dateutil .
11207	Get the zonefile metadata
11208	Get the configuration for the given JID based on XMPP_HTTP_UPLOAD_ACCESS .
11209	Given a datetime and a time zone determine whether or not a given datetime would fall in a gap .
11210	Set the time zone data of this object from a _tzfile object
11211	Return a version of this object represented entirely using integer values for the relative attributes .
11212	Create a new HMAC hash .
11213	Decodes the given token s header and payload and validates the signature .
11214	Compares the given signatures .
11215	Compares the given tokens .
11216	Is the token valid? This method only checks the timestamps within the token and compares them against the current time if none is provided .
11217	Check for registered claims in the payload and move them to the registered_claims property overwriting any extant claims .
11218	Create a token based on the data held in the class .
11219	Decodes the given token into an instance of Jwt .
11220	Compare against another Jwt .
11221	Download a file .
11222	Test a file is a valid json file .
11223	set dumper .
11224	collections . deque dumper .
11225	collections . OrderedDict dumper .
11226	numpy . ndarray dumper .
11227	Decorator for rruleset methods which may invalidate the cached length .
11228	Returns the last recurrence before the given datetime instance . The inc keyword defines what happens if dt is an occurrence . With inc = True if dt itself is an occurrence it will be returned .
11229	Returns the first recurrence after the given datetime instance . The inc keyword defines what happens if dt is an occurrence . With inc = True if dt itself is an occurrence it will be returned .
11230	Generator which yields up to count recurrences after the given datetime instance equivalent to after .
11231	Return new rrule with same attributes except for those attributes given new values by whichever keyword arguments are specified .
11232	Run the excel_to_html function from the command - line .
11233	Gets the requested template for the given language .
11234	Unserializes a serialized php array and prints it to the console as a data structure in the specified language . Used to translate or convert a php array into a data structure in another language . Currently supports PHP Python Javascript and JSON .
11235	Only API function for the config module .
11236	Create a reusable class from a generator function
11237	Send an item into a generator expecting a final return value
11238	Apply a function to all send values of a generator
11239	Prints the traceback and invokes the ipython debugger on any exception
11240	Copies a file from its location on the web to a designated place on the local machine .
11241	Counts the number of lines in a file .
11242	Indentes css that has not been indented and saves it to a new file . A new file is created if the output destination does not already exist .
11243	Adds line breaks after every occurance of a given character in a file .
11244	Reformats poorly written css . This function does not validate or fix errors in the code . It only gives code the proper indentation .
11245	Take a list of strings and clear whitespace on each one . If a value in the list is not a string pass it through untouched .
11246	Calculates the future value of money invested at an anual interest rate x times per year for a given number of years .
11247	Uses Heron s formula to find the area of a triangle based on the coordinates of three points .
11248	Calculates the median of a list of integers or floating point numbers .
11249	Calculates the average or mean of a list of numbers
11250	Calculates the population or sample variance of a list of numbers . A large number means the results are all over the place while a small number means the results are comparatively close to the average .
11251	Finds the percentage of one number over another .
11252	Get datetime string from datetime object
11253	attr pipe can extract attribute value of object .
11254	attrs pipe can extract attribute values of object .
11255	attrdict pipe can extract attribute values of object into a dict .
11256	flatten pipe extracts nested item from previous pipe .
11257	values pipe extract value from previous pipe .
11258	pack pipe takes n elements from previous generator and yield one list to next .
11259	The pipe greps the data passed from previous generator according to given regular expression .
11260	The pipe greps the data passed from previous generator according to given regular expression . The data passed to next pipe is MatchObject dict or tuple which determined by to in keyword argument .
11261	The resplit pipe split previous pipe input by regular expression .
11262	sub pipe is a wrapper of re . sub method .
11263	wildcard pipe greps data passed from previous generator according to given regular expression .
11264	This pipe read data from previous iterator and write it to stdout .
11265	This pipe get filenames or file object from previous pipe and read the content of file . Then send the content of file line by line to next pipe .
11266	sh pipe execute shell command specified by args . If previous pipe exists read data from it and write it to stdin of shell process . The stdout of shell process will be passed to next pipe object line by line .
11267	This pipe wrap os . walk and yield absolute path one by one .
11268	alias of str . join
11269	alias of string . Template . substitute
11270	alias of string . Template . safe_substitute
11271	Convert data from previous pipe with specified encoding .
11272	Regiser all default type - to - pipe convertors .
11273	Convert Paginator instance to dict
11274	Check that a process is not running more than once using PIDFILE
11275	This function will check whether a PID is currently running
11276	This function will disown so the Ardexa service can be restarted
11277	Run a program and check program return code Note that some commands don t work well with Popen . So if this function is specifically called with shell = True then it will run the old os . system . In which case there is no program output
11278	Yield each integer from a complex range string like 1 - 9 12 15 - 20 23
11279	Do url - encode resource ids
11280	Get item creator according registered item type .
11281	Self - cloning . All its next Pipe objects are cloned too .
11282	Append next object to pipe tail .
11283	Return an generator as iterator object .
11284	Wrap a reduce function to Pipe object . Reduce function is a function with at least two arguments . It works like built - in reduce function . It takes first argument for accumulated result second argument for the new data to process . A keyword - based argument named init is optional . If init is provided it is used for the initial value of accumulated result . Or the initial value is None .
11285	Return a dictionary of network name to active status bools .
11286	flush the line to stdout
11287	runs the passed in arguments and returns an iterator on the output of running command
11288	Build a basic 035 subfield with basic information from the OAI - PMH request .
11289	Strip out namespace data from an ElementTree .
11290	Load values from a dictionary structure . Nesting can be used to represent namespaces .
11291	The oembed endpoint or the url to which requests for metadata are passed . Third parties will want to access this view with URLs for your site s content and be returned OEmbed metadata .
11292	Extract and return oembed content for given urls .
11293	A site profile detailing valid endpoints for a given domain . Allows for better auto - discovery of embeddable content .
11294	scan path directory and any subdirectories for valid captain scripts
11295	Make the request params given location data
11296	Get the tax rate from the ZipTax response
11297	Check if there are exceptions that should be raised
11298	Recursively extract all text from node .
11299	Registers a provider with the site .
11300	Unregisters a provider from the site .
11301	Populate the internal registry s dictionary with the regexes for each provider instance
11302	Find the right provider for a URL
11303	A hook for django - based oembed providers to delete any stored oembeds
11304	The heart of the matter
11305	Load up StoredProviders from url if it is an oembed scheme
11306	Iterate over the returned json and try to sort out any new providers
11307	A kind of cheesy method that allows for callables or attributes to be used interchangably
11308	Return an ImageFileField instance
11309	Build a dictionary of metadata for the requested object .
11310	Parses the date from a url and uses it in the query . For objects which are unique for date .
11311	Override the base .
11312	Add the 909 OAI info to 035 .
11313	Check if we shall add cnum in 035 .
11314	Remove hidden notes and tag a CERN if detected .
11315	Remove INSPIRE specific notes .
11316	Move title info from 245 to 111 proceeding style .
11317	Update reportnumbers .
11318	Remove dashes from ISBN .
11319	Remove duplicate BibMatch DOIs .
11320	260 Date normalization .
11321	041 Language .
11322	Generate directory listing HTML
11323	Checks if files are not being uploaded to server .
11324	Converts capital letters to lower keeps first letter capital .
11325	Scans a block of text and extracts oembed data on any urls returning it in a list of dictionaries
11326	Try to maintain parity with what is extracted by extract since strip will most likely be used in conjunction with extract
11327	Automatically build the provider index .
11328	pass in a list of options promt the user to select one and return the selected option or None
11329	Transforms the argparse arguments from Namespace to dict and then to Bunch Therefore it is not necessary to access the arguments using the dict syntax The settings can be called like regular vars on the settings object
11330	Reads a dom xml element in oaidc format and returns the bibrecord object
11331	display a progress that can update in place
11332	print format_msg to stderr
11333	prints a banner
11334	format columned data so we can easily print it out on a console this just takes columns of data and it will format it into properly aligned columns it s not fancy but it works for most type of strings that I need it for like server name lists .
11335	echo a prompt to the user and wait for an answer
11336	Returns the records listed in the webpage given as parameter as a xml String .
11337	Logs into the specified ftp server and returns connector .
11338	Set the thermostat mode
11339	Set the target temperature to the desired fahrenheit with more granular control of the hold mode
11340	Set the target temperature to the desired celsius with more granular control of the hold mode
11341	Updates the target temperature on the NuHeat API
11342	This function returns a Bunch object from the stated config file .
11343	Authenticate against the NuHeat API
11344	Make a request to the NuHeat API
11345	Return representation of html start tag and attributes .
11346	Return representation of html end tag .
11347	Return stripped HTML keeping only MathML .
11348	return True if callback is an instance of a class
11349	return True if callback is a vanilla plain jane function
11350	these kwargs come from the
11351	find any matching parser_args from list_args and merge them into this instance
11352	Overridden to not get rid of newlines
11353	create string suitable for HTTP User - Agent header
11354	Add a MARCXML datafield as a new child to a XML document .
11355	Given a document return XML prettified .
11356	Transform & and < to XML valid &amp ; and &lt .
11357	Properly format arXiv IDs .
11358	Convert journal name to Inspire s short form .
11359	Add correct nations field according to mapping in NATIONS_DEFAULT_MAP .
11360	Fix bad Unicode special dashes in string .
11361	Try to capitalize properly a title string .
11362	Convert some HTML tags to latex equivalents .
11363	Download URL to a file .
11364	Run a shell command .
11365	Create a logger object .
11366	Perform the actual uncompression .
11367	Locate all files matching supplied filename pattern recursively .
11368	Punctuate author names properly .
11369	Convert a date - value to the ISO date standard .
11370	Convert a date - value to the ISO date standard for humans .
11371	Convert list of images to PNG format .
11372	Generate a safe and closed filepath .
11373	Get letters from string only .
11374	Return True if license is compatible with Open Access
11375	Information about the current volume issue etc . is available in a file called issue . xml that is available in a higher directory .
11376	issue . xml from Elsevier assume the existence of a local DTD . This procedure install the DTDs next to the issue . xml file and normalize it using xmllint in order to resolve all namespaces and references .
11377	main . xml from Elsevier assume the existence of a local DTD . This procedure install the DTDs next to the main . xml file and normalize it using xmllint in order to resolve all namespaces and references .
11378	Return the best effort start_date .
11379	Extract oembed resources from a block of text . Returns a list of dictionaries .
11380	A node which parses everything between its two nodes and replaces any links with OEmbed - provided objects if possible .
11381	Generates a &lt ; link&gt ; tag with oembed autodiscovery bits for an object .
11382	Generates a &lt ; link&gt ; tag with oembed autodiscovery bits .
11383	return the parser for the current name
11384	load the module so we can actually run the script s function
11385	get the contents of the script
11386	parse and import the script and then run the script s main function
11387	return that path to be able to call this script from the passed in basename
11388	load the script and set the parser and argument info
11389	return True if this script can be run from the command line
11390	Handles registering the fields with the FieldRegistry and creating a post - save signal for the model .
11391	I need a way to ensure that this signal gets created for all child models and since model inheritance doesn t have a contrubite_to_class style hook I am creating a fake virtual field which will be added to all subclasses and handles creating the signal
11392	Fetch response headers and data from a URL raising a generic exception for any kind of failure .
11393	Given a url which may or may not be a relative url convert it to a full url path given another full url as an example
11394	Generate a fake request object to allow oEmbeds to use context processors .
11395	dynamically load a class given a string of the format package . Class
11396	Override the base get_record .
11397	Special handling if record is a CMS NOTE .
11398	Handle reportnumbers .
11399	653 Free Keywords .
11400	710 Collaboration .
11401	Return a field created with the provided elements .
11402	Create a list of records from the marcxml description .
11403	Create a record object from the marcxml description .
11404	Filter the given field .
11405	Return a record where all the duplicate fields have been removed .
11406	Return True if rec1 is identical to rec2 .
11407	Return the list of field instances for the specified tag and indications .
11408	Delete the field with the given position .
11409	Add the fields into the record at the required position .
11410	Move some fields to the position specified by field_position_local .
11411	Delete all subfields with subfield_code in the record .
11412	Return the the matching field .
11413	Replace a field with a new field .
11414	Return the subfield of the matching field .
11415	Delete subfield from position specified .
11416	Add subfield into specified position .
11417	Modify controlfield at position specified by tag and field number .
11418	Modify subfield at specified position .
11419	Move subfield at specified position .
11420	Generate the XML for record rec .
11421	Generate the XML for field field and returns it as a string .
11422	Print a record .
11423	Print a list of records .
11424	Return the global and local positions of the first occurrence of the field .
11425	Find subfield instances in a particular field .
11426	Remove unchanged volatile subfields from the record .
11427	Turns all subfields to volatile
11428	Remove empty subfields and fields from the record .
11429	Remove all non - empty controlfields from the record .
11430	Order subfields from a record alphabetically based on subfield code .
11431	Compare 2 fields .
11432	Check if a field is well - formed .
11433	Shift all global field positions .
11434	Return true if MARC tag matches a pattern .
11435	Check if the global field positions in the record are valid .
11436	Sort the fields inside the record by indicators .
11437	Sort a set of fields by their indicators .
11438	Create a record object using the LXML parser .
11439	Retrieve all children from node node with name name .
11440	Iterate through all the children of a node .
11441	Check and correct the structure of the record .
11442	Return a warning message of code code .
11443	Compare twolists using given comparing function .
11444	Parse an XML document and clean any namespaces .
11445	Clean MARCXML harvested from OAI .
11446	Generate the record deletion if deleted form OAI - PMH .
11447	Return a session for yesss . at .
11448	Check for working login data .
11449	Send an SMS .
11450	Return the date of the article in file .
11451	Return this articles collection .
11452	Attach fulltext FFT .
11453	Convert the list of bibrecs into one MARCXML .
11454	Yield single conversion objects from a MARCXML file or string .
11455	Return the opposite mapping by searching the imported KB .
11456	Load configuration from config .
11457	Try to match the current record to the database .
11458	Keep only fields listed in field_list .
11459	Clear any fields listed in field_list .
11460	Add 035 number from 001 recid with given source .
11461	Add a control - number 00x for given tag with value .
11462	650 Translate Categories .
11463	Connects and logins to the server .
11464	Downloads a file from the FTP server to target folder
11465	Changes the working directory on the server .
11466	Lists the files and folders of a specific directory default is the current working directory .
11467	Creates a folder in the server
11468	Delete a file from the server .
11469	Delete a folder from the server .
11470	Returns the filesize of a file
11471	Uploads a file on the server to the desired location
11472	Parses a block of text indiscriminately
11473	Parses a block of text rendering links that occur on their own line normally but rendering inline links using a special template dir
11474	Do the legwork of logging into the Midas Server instance storing the API key and token .
11475	Renew or get a token to use for transactions with the Midas Server instance .
11476	Create an item from the local file in the Midas Server folder corresponding to the parent folder id .
11477	Create a folder from the local file in the midas folder corresponding to the parent folder id .
11478	Create and return a hex checksum using the MD5 sum of the passed in file . This will stream the file rather than load it all into memory .
11479	Create a bitstream in the given item .
11480	Function for doing an upload of a file as an item . This should be a building block for user - level functions .
11481	Function for creating a remote folder and returning the id . This should be a building block for user - level functions .
11482	Function to recursively upload a folder and all of its descendants .
11483	Return whether a folder contains only files . This will be False if the folder contains any subdirectories .
11484	Upload a folder as a new item . Take a folder and use its base name as the name of a new item . Then upload its containing files into the new item as bitstreams .
11485	Upload a pattern of files . This will recursively walk down every tree in the file pattern to create a hierarchy on the server . As of right now this places the file into the currently logged in user s home directory .
11486	Descend a path to return a folder id starting from the given folder id .
11487	Find an item or folder matching the name . A folder will be found first if both are present .
11488	Get a folder id from a path on the server .
11489	Download a folder to the specified path along with any children .
11490	Download the requested item to the specified path .
11491	Recursively download a file or item from the Midas Server instance .
11492	Login and get a token . If you do not specify a specific application Default will be used .
11493	List the folders in the users home area .
11494	Get the default API key for a user .
11495	List the public users in the system .
11496	Get a user by the email of that user .
11497	Create a new community or update an existing one using the uuid .
11498	Get a community based on its name .
11499	Get a community based on its id .
11500	Get the non - recursive children of the passed in community_id .
11501	List all communities visible to a user .
11502	Get the attributes of the specified folder .
11503	Get the non - recursive children of the passed in folder_id .
11504	Delete the folder with the passed in folder_id .
11505	Move a folder to the destination folder .
11506	Create an item to the server .
11507	Get the attributes of the specified item .
11508	Download an item to disk .
11509	Delete the item with the passed in item_id .
11510	Get the metadata associated with an item .
11511	Set the metadata associated with an item .
11512	Share an item to the destination folder .
11513	Move an item from the source folder to the destination folder .
11514	Return all items .
11515	Return all items with a given name and parent folder id .
11516	Return all items with a given name and parent folder name .
11517	Create a link bitstream .
11518	Generate a token to use for upload .
11519	Upload a file into a given item ( or just to the public folder if the item is not specified .
11520	Get the resources corresponding to a given query .
11521	Add a Condor DAG to the given Batchmake task .
11522	Add a Condor DAG job to the Condor DAG associated with this Batchmake task
11523	Extract DICOM metadata from the given item
11524	Log in to get the real token using the temporary token and otp .
11525	Create a big thumbnail for the given bitstream with the given width . It is used as the main image of the given item and shown in the item view page .
11526	Create a 100x100 small thumbnail for the given item . It is used for preview purpose and displayed in the preview and thumbnails sidebar sections .
11527	Search item metadata using Apache Solr .
11528	Create a new scalar data point .
11529	Upload a JSON file containing numeric scoring results to be added as scalars . File is parsed and then deleted from the server .
11530	Obtain particular version of the doc at key .
11531	Find a hash value for the linear combination of invocation methods .
11532	Connects to a Siemens S7 PLC .
11533	Connects to an Arduino UNO on serial port port .
11534	Returns a map of nodename to average fitness value for this block . Assumes that required resources have been checked on all nodes .
11535	Returns a list of available drivers names .
11536	Maps a pin number to a physical device pin .
11537	Sets pin pin to direction .
11538	Gets the ahio . Direction this pin was set to .
11539	Sets pin pin to type .
11540	Gets the ahio . PortType this pin was set to .
11541	Sets the output to the given value .
11542	Reads value from pin pin .
11543	Sets the analog reference to reference
11544	Returns the analog reference .
11545	Sets PWM frequency if supported by hardware
11546	Integrate SIR epidemic model
11547	Return the URL of the server .
11548	Returns an estimate for the maximum amount of memory to be consumed by numpy arrays .
11549	Create coverage reports and open them in the browser .
11550	Start a Modbus server .
11551	Return an exception given status and error codes .
11552	Retrieve the last analog data value received for the specified pin .
11553	Disables analog reporting for a single analog pin .
11554	Disables digital reporting . By turning reporting off for this pin reporting is disabled for all 8 bits in the port -
11555	Enables analog reporting . By turning reporting on for a single pin .
11556	Enables digital reporting . By turning reporting on for all 8 bits in the port - this is part of Firmata s protocol specification .
11557	This method will send an extended data analog output command to the selected pin
11558	Get the stepper library version number .
11559	Write data to an i2c device .
11560	This method stops an I2C_READ_CONTINUOUSLY operation for the i2c device address specified .
11561	This method will call the Tone library for the selected pin . If the tone command is set to TONE_TONE then the specified tone will be played . Else if the tone command is TONE_NO_TONE then any currently playing tone will be disabled . It is intended for a future release of Arduino Firmata
11562	This method arms an analog pin for its data to be latched and saved in the latching table If a callback method is provided when latching criteria is achieved the callback function is called with latching data notification . In that case the latching table is not updated .
11563	This method arms a digital pin for its data to be latched and saved in the latching table If a callback method is provided when latching criteria is achieved the callback function is called with latching data notification . In that case the latching table is not updated .
11564	Configure a pin as a servo pin . Set pulse min max in ms .
11565	Configure stepper motor prior to operation .
11566	Move a stepper motor for the number of steps at the specified speed
11567	Request the stepper library version from the Arduino . To retrieve the version after this command is called call get_stepper_version
11568	open the serial port using the configuration data returns a reference to this instance
11569	This method continually runs . If an incoming character is available on the serial port it is read and placed on the _command_deque
11570	Set the brightness level for the entire display
11571	Populate the bit map with the supplied shape and color and then write the entire bitmap to the display
11572	Write the entire buffer to the display
11573	Set all led s to off .
11574	This method handles the incoming digital message . It stores the data values in the digital response table . Data is stored for all 8 bits of a digital port
11575	This method handles the incoming encoder data message and stores the data in the digital response table .
11576	This method handles the incoming sonar data message and stores the data in the response table .
11577	This method will send a Sysex command to Firmata with any accompanying data
11578	This method is used to transmit a non - sysex command .
11579	Send the reset command to the Arduino . It resets the response tables to their initial values
11580	This method handles the incoming string data message from Firmata . The string is printed to the console
11581	This method starts the thread that continuously runs to receive and interpret messages coming from Firmata . This must be the last method in this file It also checks the deque for messages to be sent to Firmata .
11582	Use requests to fetch remote content
11583	Combine finder_image_urls and extender_image_urls remove duplicate but keep order
11584	Find image URL in background - image
11585	Return the node name where the name would land to
11586	Return the node where the name would land to
11587	Return the encoding idletime or refcount about the key
11588	Pop a value off the tail of src push it on the head of dst and then return it .
11589	RPOP a value off of the src list and LPUSH it on to the dst list . Returns the value .
11590	Move value from set src to set dst not atomic
11591	Returns the members of the set resulting from the union between the first set and all the successive sets .
11592	Store the union of sets src args into a new set named dest . Returns the number of keys in the new set .
11593	Sets each key in the mapping dict to its corresponding value if none of the keys are already set
11594	Rename key src to dst
11595	Rename key src to dst if dst doesn t already exist
11596	Returns a list of keys matching pattern
11597	Returns the number of keys in the current database
11598	Prepare the date in the instance state for serialization .
11599	Verify the signaure of an XML document with the given certificate . Returns True if the document is signed with a valid signature . Returns False if the document is not signed or if the signature is invalid .
11600	Add number of photos to each gallery .
11601	Set currently authenticated user as the author of the gallery .
11602	For each photo set it s author to currently authenticated user .
11603	Outputs a list of tuples with ranges or the empty list According to the rfc start or end values can be omitted
11604	Removes errored ranges
11605	Converts to valid byte ranges
11606	Sorts and removes overlaps
11607	Renders the selected social widget . You can specify optional settings that will be passed to widget template .
11608	In - place addition
11609	In - place multiplication
11610	Updates the probability of read origin at read level
11611	Runs EM iterations
11612	Exports expected read counts
11613	Exports expected depths
11614	Writes the posterior probability of read origin
11615	Prints nonzero rows of the read wanted
11616	Transliterate data with the given scheme_map . This function is used when the source scheme is a Roman scheme .
11617	Transliterate data with the given scheme_map . This function is used when the source scheme is a Brahmic scheme .
11618	Detect the input s transliteration scheme .
11619	Add a variety of default schemes .
11620	converts an array of integers to utf8 string
11621	set the value of delta to reflect the current codepage
11622	Handle unrecognised characters .
11623	Transliterate a Latin character equivalent to Devanagari . Add VIRAMA for ligatures . Convert standalone to dependent vowels .
11624	A convenience method
11625	Load and generate num number of top - level rules from the specified grammar .
11626	Build the Quote instance
11627	Make the list of verbs into present participles
11628	Deletes sent MailerMessage records
11629	Load the includes of an encoding Namelist files .
11630	Return a dict with the data of an encoding Namelist file .
11631	Detect infinite recursion and prevent it .
11632	Returns the set of codepoints contained in a given Namelist file .
11633	Returns list of CharsetInfo about supported orthographies
11634	Generates header for oauth2
11635	Parse oauth2 access
11636	Refresh access token
11637	Calls right function according to file extension
11638	Call right func to save data according to file extension
11639	Write json data into a file
11640	Get data from json file
11641	Get data from . yml file
11642	Write data into a . yml file
11643	Turns distances into RBF values .
11644	Learn the linear transformation to clipped eigenvalues .
11645	Learn the linear transformation to flipped eigenvalues .
11646	Transforms X according to the linear transformation corresponding to flipping the input eigenvalues .
11647	Flips the negative eigenvalues of X .
11648	Learn the transformation to shifted eigenvalues . Only depends on the input dimension .
11649	Transforms X according to the linear transformation corresponding to shifting the input eigenvalues to all be at least self . min_eig .
11650	Picks the elements of the basis to use for the given data .
11651	Transform a list of bag features into its projection series representation .
11652	Get distribution version .
11653	Get a live version string using versiontools
11654	Fit the transformer on the stacked points .
11655	Transform the stacked points .
11656	Fit and transform the stacked points .
11657	Compute the minimum and maximum to be used for later scaling .
11658	Scaling features of X according to feature_range .
11659	Undo the scaling of X according to feature_range .
11660	Choose the codewords based on a training set .
11661	Transform a list of bag features into its bag - of - words representation .
11662	Checks whether the array is either integral or boolean .
11663	Returns argument as an integer array converting floats if convertable . Raises ValueError if it s a float array with nonintegral values .
11664	Signal the start of the process .
11665	Builds FLANN indices for each bag .
11666	Gets within - bag distances for each bag .
11667	r Estimates the linear inner product \ int p q between two distributions based on kNN distances .
11668	r Estimates \ int p^2 based on kNN distances .
11669	Topologically sort a DAG represented by a dict of child = > set of parents . The dependency dict is destroyed during operation .
11670	Ks as an array and type - checked .
11671	The dictionary of arguments to give to FLANN .
11672	Sets up for divergence estimation from new data to X . Builds FLANN indices for each bag and maybe gets within - bag distances .
11673	If unstacked convert to stacked . If stacked do nothing .
11674	Copies the Feature object . Makes a copy of the features array .
11675	Make a Features object with no metadata ; points to the same features .
11676	Specify the data to which kernel values should be computed .
11677	Transform a list of bag features into a matrix of its mean features .
11678	Start listening to the server
11679	Connect to the server
11680	Disconnect from the server
11681	Send a command to the server
11682	Read a line from the server . Data is read from the socket until a character \ n is found
11683	Read a block from the server . Lines are read until a character . is found
11684	Read a block and return the result as XML
11685	Analyse an OpenStreetMap changeset .
11686	Get information about number of changesets blocks and mapping days of a user using both the OSM API and the Mapbox comments APIself .
11687	Return a dictionary with id user user_id bounds date of creation and all the tags of the changeset .
11688	Get the changeset using the OSM API and return the content as a XML ElementTree .
11689	Get the metadata of a changeset using the OSM API and return it as a XML ElementTree .
11690	Read the first feature from the geojson and return it as a Polygon object .
11691	Filter the changesets that intersects with the geojson geometry .
11692	Set the fields of this class with the metadata of the analysed changeset .
11693	Add suspicion reason and set the suspicious flag .
11694	Execute the count and verify_words methods .
11695	Verify the fields source imagery_used and comment of the changeset for some suspect words .
11696	Verify if the software used in the changeset is a powerfull_editor .
11697	Count the number of elements created modified and deleted by the changeset and analyses if it is a possible import mass modification or a mass deletion .
11698	Get a stream URI from a playlist URI uri . Unwraps nested playlists until something that s not a playlist is found or the timeout is reached .
11699	Start asynchronous HTTP Server on an individual process .
11700	Grow this Pantheon by multiplying Gods .
11701	Get it on .
11702	Compare vectors . Borrowed from A . Parish .
11703	This model recognizes that sex chromosomes don t always line up with gender . Assign M F or NB according to the probabilities in p_gender .
11704	Accept either strings or Gods as inputs .
11705	Produce two gametes an egg and a sperm from the input strings . Combine them to produce a genome a la sexual reproduction .
11706	Produce two gametes an egg and a sperm from input Gods . Combine them to produce a genome a la sexual reproduction . Assign divinity according to probabilities in p_divinity . The more divine the parents the more divine their offspring .
11707	Extract 23 chromosomes aka words from gene pool aka list of tokens by searching the list of tokens for words that are related to the given egg_or_sperm_word .
11708	Print parents names and epithets .
11709	Returns all the information regarding a specific stage run
11710	Performs a HTTP request to the Go server
11711	Make the request appear to be coming from a browser
11712	Return a dict as a list of lists .
11713	Returns all the information regarding a specific pipeline run
11714	Schedule a pipeline run
11715	Yields the output and metadata from all jobs in the pipeline
11716	Update template config for specified template name .
11717	Create template config for specified template name .
11718	Delete template config for specified template name .
11719	Returns a set of all pipelines from the last response
11720	Gets an artifact directory by its path .
11721	Configuration loader .
11722	Create Flask application class .
11723	Initialize application object .
11724	Initialize configuration .
11725	Covert name from CamelCase to Normal case .
11726	Format a time in seconds .
11727	Indent representation of a dict
11728	Test for existence of needle regex within haystack .
11729	Mutates any attributes on obj which are classes with link to obj .
11730	Procesa TCU CP FEU diario .
11731	Compress the log message in order to send less bytes to the wire .
11732	Internal bookkeeping to handle nested classes
11733	Needs to be its own method so it can be called from both wantClass and registerGoodClass .
11734	Obtiene los dataframes de los datos de PVPC con resampling diario y mensual .
11735	Performs sanitation of the path after validating
11736	Ensures the passed schema instance is compatible
11737	Journey route decorator
11738	Attaches a flask . Blueprint to the bundle
11739	Returns the DottedRule that results from moving the dot .
11740	Computes the intermediate FIRST set using symbols .
11741	Computes the FIRST set for every symbol in the grammar .
11742	Computes the FOLLOW set for every non - terminal in the grammar .
11743	Computes the initial closure using the START_foo production .
11744	Computes the next closure for rules based on the symbol we got .
11745	Fills out the entire closure based on some initial dotted rules .
11746	Initializes Journey extension
11747	Returns simple info about registered blueprints
11748	Checks if a bundle exists at the provided path
11749	Attaches a bundle object
11750	Register and return info about the registered blueprint
11751	Returns detailed information about registered blueprint routes matching the BlueprintBundle path
11752	Computes the precedence of terminal and production .
11753	Generates the ACTION and GOTO tables for the grammar .
11754	Return the antecedents and the consequent of a definite clause .
11755	Auxiliary routine to implement tt_entails .
11756	Return a list of all propositional symbols in x .
11757	Return True if the propositional logic expression is true in the model and False if it is false . If the model does not specify the value for every proposition this may return None to indicate not obvious ; this may happen even when the expression is tautological .
11758	See if the clauses are true in a partial model .
11759	A variable is an Expr with no args and a lowercase symbol as the op .
11760	Remove the sentence s clauses from the KB .
11761	Updates the cache with setting values from the database .
11762	Search game to determine best action ; use alpha - beta pruning . This version cuts off search and uses an evaluation function .
11763	Return the value to player ; 1 for win - 1 for loss 0 otherwise .
11764	If X wins with this move return 1 ; if O return - 1 ; else return 0 .
11765	Return true if there is a line through move on board for player .
11766	Update a dict or an object with slots according to entries dict .
11767	Pick n samples from seq at random with replacement with the probability of each element in proportion to its corresponding weight .
11768	Return a random - sample function that picks from seq weighted by weights .
11769	Format args with the first argument as format string and write . Return the last arg or format itself if there are no args .
11770	Try to find some reasonable name for the object .
11771	Open a file based at the AIMA root directory .
11772	Just count how many times each value of each input attribute occurs conditional on the target value . Count the different target values too .
11773	Number of bits to represent the probability distribution in values .
11774	Layered feed - forward network .
11775	Given a list of learning algorithms have them vote .
11776	Return a predictor that takes a weighted vote .
11777	Copy dataset replicating each example in proportion to its weight .
11778	Leave one out cross - validation over the dataset .
11779	Generate a DataSet with n examples .
11780	2 inputs are chosen uniformly from ( 0 . 0 .. 2 . 0 ] ; output is xor of ints .
11781	Compare various learners on various datasets using cross - validation . Print results as a table .
11782	Check that my fields make sense .
11783	Add an example to the list of examples checking it first .
11784	Raise ValueError if example has any invalid values .
11785	Returns the number used for attr which can be a name or - n .. n - 1 .
11786	Return a copy of example with non - input attributes replaced by None .
11787	Add an observation o to the distribution .
11788	Include o among the possible observations whether or not it s been observed yet .
11789	Return a random sample from the distribution .
11790	Return true if we remove a value .
11791	Minimum - remaining - values heuristic .
11792	Least - constraining - values heuristic .
11793	Prune neighbor values inconsistent with var = value .
11794	Maintain arc consistency .
11795	Solve a CSP by stochastic hillclimbing on the number of conflicts .
11796	Return the value that will give var the least number of conflicts . If there is a tie choose at random .
11797	Return the number of conflicts var = val has with other variables .
11798	Start accumulating inferences from assuming var = value .
11799	Rule out var = value .
11800	Return the partial assignment implied by the current inferences .
11801	Undo a supposition and all inferences from it .
11802	Return a list of variables in current assignment that are in conflict
11803	The number of conflicts as recorded with each assignment . Count conflicts in row and in up down diagonals . If there is a queen there it can t conflict with itself so subtract 3 .
11804	Assign var and keep track of conflicts .
11805	Record conflicts caused by addition or deletion of a Queen .
11806	Find the best segmentation of the string of characters given the UnigramTextModel P .
11807	Encodes text using a code which is a permutation of the alphabet .
11808	Build up a random sample of text nwords words long using the conditional probability given the n - 1 preceding words .
11809	Index a whole collection of files .
11810	Index the text of a document .
11811	Compute a score for this word on this docid .
11812	Present the results as a list .
11813	Get results for the query and present them .
11814	Return a score for text based on how common letters pairs are .
11815	Search for a decoding of the ciphertext .
11816	Score is product of word scores unigram scores and bigram scores . This can get very small so we use logs and exp .
11817	Returns a SettingDict object .
11818	The expected utility of doing a in state s according to the MDP and U .
11819	Return the state that results from going in this direction .
11820	Returns a SettingDict object for this queryset .
11821	Creates and returns an object of the appropriate type for value .
11822	Returns True if this model should be used to store value .
11823	One possible schedule function for simulated annealing
11824	Call genetic_algorithm on the appropriate parts of a problem . This requires the problem to have states that can mate and mutate plus a value method that scores states .
11825	Return a random Boggle board of size n x n . We represent a board as a linear list of letters .
11826	Print the board in a 2 - d array .
11827	Return a list of lists where the i - th element is the list of indexes for the neighbors of square i .
11828	If n2 is a perfect square return its square root else raise error .
11829	List the nodes reachable in one step from this node .
11830	Fig . 3 . 10
11831	Return a list of nodes forming the path from the root to this node .
11832	Return a new individual crossing self and other .
11833	Make a digraph into an undirected graph by adding symmetric edges .
11834	Add a link from A and B of given distance and also add the inverse link if the graph is undirected .
11835	Add a link from A to B of given distance in one direction only .
11836	h function is straight - line distance from a node s state to goal .
11837	In the leftmost empty column try all non - conflicting rows .
11838	Place the next queen at the given row .
11839	Set the board and find all the words in it .
11840	The total score for the words found according to the rules .
11841	Wrap the agent s program to print its input and output . This will let you see what the agent is doing in the environment .
11842	An agent that keeps track of what locations are clean or dirty .
11843	Run the environment for one time step . If the actions and exogenous changes are independent this method will do . If there are interactions between them you ll need to override this method .
11844	Run the Environment for given number of time steps .
11845	Return all things exactly at a given location .
11846	Add a thing to the environment setting its location . For convenience if thing is an agent program we make a new agent for it . ( Shouldn t need to override this .
11847	Remove a thing from the environment .
11848	Return all things within radius of location .
11849	By default agent perceives things within a default radius .
11850	Move a thing to a new location .
11851	Put walls around the entire perimeter of the grid .
11852	Parse a list of words ; according to the grammar . Leave results in the chart .
11853	Add edge to chart and see if it extends or predicts another edge .
11854	For each edge expecting a word of this category here extend the edge .
11855	Add to chart any rules for B that could help extend this edge .
11856	See what edges can be extended by this edge .
11857	Adds a SettingDict object for the Setting model to the context as SETTINGS . Automatically creates non - existent settings with an empty string as the default value .
11858	Return the factor for var in bn s joint distribution given e . That is bn s full joint distribution projected to accord with e is the pointwise product of these factors for bn s variables .
11859	Eliminate var from all factors by summing over its values .
11860	Yield every way of extending e with values for all vars .
11861	Is event consistent with the given evidence?
11862	Sample an event from bn that s consistent with the evidence e ; return the event and its weight the likelihood that the event accords to the evidence .
11863	Show the probabilities rounded and sorted by key for the sake of portable doctests .
11864	Add a node to the net . Its parents must already be in the net and its variable must not .
11865	Multiply two factors combining their variables .
11866	Make a factor eliminating var by summing over its values .
11867	Return my probabilities ; must be down to one variable .
11868	Strips all whitespace from a minidom XML node and its children
11869	Takes a hls color and converts to proper hue Bulbs use a BGR order instead of RGB
11870	Takes your standard rgb color and converts it to a proper hue value
11871	Takes an HTML hex code and converts it to a proper hue value
11872	Wait for x seconds each wait command is 100ms
11873	Return json from querying Web Api
11874	put text on on screen a tuple as first argument tells absolute position for the text does not change TermCursor position args = list of optional position formatting tokens and strings
11875	get user input without echo
11876	get character . waiting for key
11877	tweaked from source of base
11878	getProcessOwner - Get the process owner of a pid
11879	scanProcessForCwd - Searches a given pid s cwd for a given pattern
11880	scanAllProcessesForCwd - Scans all processes on the system for a given search pattern .
11881	scanProcessForMapping - Searches a given pid s mappings for a certain pattern .
11882	scanAllProcessesForMapping - Scans all processes on the system for a given search pattern .
11883	scanProcessForOpenFile - Scans open FDs for a given pid to see if any are the provided searchPortion
11884	scanAllProcessessForOpenFile - Scans all processes on the system for a given filename
11885	Create and connect to socket for TCP communication with hub .
11886	Send TCP command to hub and return response .
11887	Receive TCP response looping to get whole thing or timeout .
11888	Get current light data as dictionary with light zids as keys .
11889	Get current light data set and return as list of Bulb objects .
11890	Set brightness of bulb .
11891	Set color and brightness of bulb .
11892	Update light objects to their current values .
11893	This function takes a file path beginning with edgar and stores the form in a directory . The default directory is sec_filings but can be changed through a keyword argument .
11894	read file as is
11895	Clean up after ourselves removing created files .
11896	Create an index file in the given location supplying known lists of present image files and subdirectories .
11897	Crawl the root directory downwards generating an index HTML file in each directory on the way down .
11898	Get an instance of PIL . Image from the given file .
11899	Get base - 64 encoded data as a string for the given image . Fallback to return fallback_image_file if cannot get the image data or img is None .
11900	Get a PIL . Image from the given image file which has been scaled down to THUMBNAIL_WIDTH wide .
11901	Run the image server . This is blocking . Will handle user KeyboardInterrupt and other exceptions appropriately and return control once the server is stopped .
11902	Generate indexes and run server from the given directory downwards .
11903	USE carefully ^^
11904	random blending masks
11905	z value as like a seed
11906	Converts a permutation into a permutation matrix .
11907	Convenience function that creates a block matrix with the specified blocks .
11908	Returns the adjacency matrix of a bipartite graph whose biadjacency matrix is A .
11909	Returns the Boolean matrix in the same shape as D with ones exactly where there are nonzero entries in D .
11910	Returns the result of incrementing version .
11911	Gets the current version from the specified file .
11912	Prints the specified message and exits the program with the specified exit status .
11913	Tags the current version .
11914	initialize with templates path parameters templates_path str the position of templates directory global_data dict globa data can be got in any templates
11915	Render data with template return html unicodes . parameters template str the template s filename data dict the data to render
11916	Render data with template and then write to path
11917	shortcut to render data with template . Just add exception catch to renderer . render
11918	Get the DataFrame for this view . Defaults to using self . dataframe .
11919	Indexes the row based on the request parameters .
11920	Returns the row the view is displaying .
11921	The paginator instance associated with the view or None .
11922	Return a single page of results or None if pagination is disabled .
11923	parse config return a dict
11924	shortcut to render data with template and then write to path . Just add exception catch to renderer . render_to
11925	Parse ascii post source return dict
11926	parse post source files name to datetime object
11927	run a server binding to port
11928	get source files update time
11929	watch files for changes if changed rebuild blog . this thread will quit if the main process ends
11930	Deploy new blog to current directory
11931	Temporarily update the context to use the BlockContext for the given alias .
11932	Find the first matching block in the current block_context
11933	Load a series of widget libraries .
11934	Return a list of widget names for the provided field .
11935	Allow reuse of a block within a template .
11936	When dealing with optgroups ensure that the value is properly force_text d .
11937	Message instances are namedtuples of type Message . The date field is already serialized in datetime . isoformat ECMA - 262 format
11938	Send a message to a list of users without passing through django . contrib . messages
11939	Send a message to all users aka broadcast .
11940	Mark message instance as read for user . Returns True if the message was unread and thus actually marked as read or False in case it is already read or it does not exist at all .
11941	Mark all message instances for a user as read .
11942	Renders a list of archived messages for the current user
11943	Retrieve unread messages for current user both from the inbox and from other storages
11944	If the message level was configured for being stored and request . user is not anonymous save it to the database . Otherwise let some other class handle the message .
11945	persistent messages are already in the database inside the archive so we can say they re already stored . Here we put them in the inbox or remove from the inbox in case the messages were iterated .
11946	Like the base class method prepares a list of messages for storage but avoid to do this for models . Message instances .
11947	Main entry point for script .
11948	initializes a base logger
11949	Configure an object with a user - supplied factory .
11950	sets the global verbosity level for console and the jocker_lgr logger .
11951	returns a configuration object
11952	generates a Dockerfile builds an image and pushes it to DockerHub
11953	since the push process outputs a single unicode string consisting of multiple JSON formatted status lines we need to parse it so that it can be read as multiple strings .
11954	Uploads an image file to Imgur
11955	Return true if the IP address is in dotted decimal notation .
11956	Return true if the IP address is in binary notation .
11957	Return true if the IP address is in octal notation .
11958	Return true if the IP address is in decimal notation .
11959	Function internally used to check if the given netmask is of the specified notation .
11960	Return true if the netmask is in bits notatation .
11961	Return true if the netmask is in wildcard bits notatation .
11962	Dotted decimal notation to decimal conversion .
11963	Decimal to dotted decimal notation conversion .
11964	Hexadecimal to decimal conversion .
11965	Octal to decimal conversion .
11966	Binary to decimal conversion .
11967	Generate a table to convert a whole byte to binary . This code was taken from the Python Cookbook 2nd edition - O Reilly .
11968	Decimal to binary conversion .
11969	Bits to decimal conversion .
11970	Wildcard bits to decimal conversion .
11971	Function internally used to detect the notation of the given IP or netmask .
11972	Internally used to convert IPs and netmasks to other notations .
11973	Convert among IP address notations .
11974	Convert a netmask to another notation .
11975	Sum two IP addresses .
11976	Subtract two IP addresses .
11977	Return the bits notation of the netmask .
11978	Return the wildcard bits notation of the netmask .
11979	Set the IP address and the netmask .
11980	Change the current IP .
11981	Change the current netmask .
11982	Return true if the given address in amongst the usable addresses or if the given CIDR is contained in this one .
11983	Upload a file to S3 possibly using the multi - part uploader Return the key uploaded
11984	Copy a file from one bucket into another
11985	Recursively upload a folder into a backet .
11986	Coroutine for uploading a single file
11987	Trigger an event on this channel
11988	Connect to a Pusher websocket
11989	Handle websocket incoming messages
11990	Constant time string comparison
11991	Decodes a limited set of HTML entities .
11992	Set signature passphrases
11993	Set encryption passphrases
11994	Set algorithms used for sealing . Defaults can not be overridden .
11995	Get algorithms used for sealing
11996	Private function for setting options used for sealing
11997	Verify sealed data signature
11998	Encode data with specific algorithm
11999	Decode data with specific algorithm
12000	Add signature to data
12001	Verify and remove signature
12002	Verify and remove magic
12003	Add header to data
12004	Read header from data
12005	Remove header from data
12006	Read header version from data
12007	Get algorithm info
12008	Generate and return PBKDF2 key
12009	Update algorithm definition type dictionaries
12010	This function populates the internal tableOfContents list with the contents of the zip file TOC . If the server does not support ranged requests this will raise and exception . It will also throw an exception if the TOC cannot be found .
12011	This function will extract a single file from the remote zip without downloading the entire zip file . The filename argument should match whatever is in the filename key of the tableOfContents .
12012	Does photometry and estimates uncertainties by calculating the scatter around a linear fit to the data in each orientation . This function is called by other functions and generally the user will not need to interact with it directly .
12013	Creates the figure shown in adjust_aperture for visualization purposes . Called by other functions and generally not called by the user directly .
12014	Identify the centroid positions for the target star at all epochs . Useful for verifying that there is no correlation between flux and position as might be expected for high proper motion stars .
12015	Identify the expected flux value at the time of each observation based on the Kepler long - cadence data to ensure variations observed are not the effects of a single large starspot . Only works if the target star was targeted for long or short cadence observations during the primary mission .
12016	Estimate the photometric uncertainties on each data point following Equation A . 2 of The Paper . Based on the kepcal package of Dan Foreman - Mackey .
12017	Dump single field .
12018	Disassemble serialized protocol buffers file .
12019	Find all missing imports in list of Pbd instances .
12020	Write fasta_dict to fasta_file
12021	Helper function to record and log an error message
12022	checks whether child features are within the coordinate boundaries of parent features
12023	1 . get a list of CDS with the same parent 2 . sort according to strand 3 . calculate and validate phase
12024	Transfer children from old_parent to new_parent
12025	Marks line_data and all of its associated feature s line_status as removed does not actually remove the line_data from the data structure . The write function checks the line_status when writing the gff file . Find the root parent of line_data of type root_type remove all of its descendants . If the root parent has a parent with no children after the remove remove the root parent s parent recursively .
12026	given a filename return the ABFs ID string .
12027	Determine the protocol used to record an ABF file
12028	given the bytestring ABF header make and launch HTML .
12029	iterate over every sweep
12030	read the header and populate self with information about comments
12031	given a sweep return the protocol as condensed sequence . This is better for comparing similarities and determining steps . There should be no duplicate numbers .
12032	return the average of part of the current sweep .
12033	Return a sweep which is the average of multiple sweeps . For now standard deviation is lost .
12034	create kernel based on this ABF info .
12035	Get the filtered sweepY of the current sweep . Only works if self . kernel has been generated .
12036	Given a list of list of dicts return just the dicts .
12037	given a key return a list of values from the matrix with that key .
12038	given a recarray return it as a list of dicts .
12039	given text make it a temporary HTML file and launch it .
12040	show everything we can about an object s projects and methods .
12041	Put 2d numpy data into a temporary HTML file .
12042	given a string or a path to an XML file return an XML object .
12043	mono - exponential curve .
12044	return a list of Is where the data first crosses above threshold .
12045	Try to format anything as a 2D matrix with column names .
12046	save something to a pickle file
12047	convert a dictionary to a pretty formatted string .
12048	determine the comment cooked in the protocol .
12049	scan an ABF directory and subdirectory . Try to do this just once . Returns ABF files SWHLab files and groups .
12050	given an ABF file name return the ABF of its parent .
12051	given an ABF and the groups dict return the ID of its parent .
12052	given an ABF find the parent return that line of experiments . txt
12053	given a path or list of files return ABF IDs .
12054	May be given an ABF object or filename .
12055	return an FTP object after logging in .
12056	upload everything from localFolder into the current FTP folder .
12057	Only scott should do this . Upload new version to site .
12058	use the GUI to ask for a string .
12059	use the GUI to pop up a message .
12060	use the GUI to ask YES or NO .
12061	check out the arguments and figure out what to do .
12062	provide all stats on the first AP .
12063	return average of a feature divided by sweep .
12064	continuously monitor a folder for new abfs and try to analyze them . This is intended to watch only one folder but can run multiple copies .
12065	easy way to plot a gain function .
12066	draw vertical lines at comment points . Defaults to seconds .
12067	stamp the bottom with file info .
12068	makes a new matplotlib figure with default dims and DPI . Also labels it with pA or mV depending on ABF .
12069	Save the pylab figure somewhere . If fname == False show it instead . Height force > dpi force if a tag is given instead of a filename save it alongside the ABF
12070	if the module is in this path load it from the local folder .
12071	Called to update the state of the iterator . This methods receives the set of task ids from the previous set of tasks together with the launch information to allow the output values to be parsed using the output_extractor . This data is then used to determine the next desired point in the parameter space by calling the _update_state method .
12072	When dynamic not all argument values may be available .
12073	Summarizes the trace of values used to update the DynamicArgs and the arguments subsequently returned . May be used to implement the summary method .
12074	Takes as input a list or tuple of two elements . First the value returned by incrementing by stepsize followed by the value returned after a stepsize decrement .
12075	given a filename or ABF object try to analyze it .
12076	frame the current matplotlib plot with ABF info and optionally save it . Note that this is entirely independent of the ABFplot class object . if saveImage is False show it instead .
12077	make sure a figure is ready .
12078	save the existing figure . does not close it .
12079	plot every sweep of an ABF file .
12080	plot the current sweep protocol .
12081	plot the protocol of all sweeps .
12082	Given ABFs and TIFs formatted long style rename each of them to prefix their number with a different number .
12083	given a list of files return a dict organized by extension .
12084	given files and cells return a dict of files grouped by cell .
12085	populate class properties relating to files in the folder .
12086	generate list of cells with links . keep this simple . automatically generates splash page and regnerates frames .
12087	generate a data view for every ABF in the project folder .
12088	hyperpolarization step . Use to calculate tau and stuff .
12089	IC steps . Use to determine gain function .
12090	IC steps . See how hyperpol . step affects things .
12091	repeated membrane tests .
12092	fast sweeps 1 step per sweep for clean IV without fast currents .
12093	repeated membrane tests likely with drug added . Maybe IPSCs .
12094	combination of membrane test and IV steps .
12095	OBSOLETE WAY TO INDEX A FOLDER .
12096	A custom save method that handles figuring out when something is activated or deactivated .
12097	It is impossible to delete an activatable model unless force is True . This function instead sets it to inactive .
12098	Write to file_handle if supplied othewise print output
12099	A helper method that supplies the root directory name given a timestamp .
12100	The log contains the tids and corresponding specifications used during launch with the specifications in JSON format .
12101	All launchers should call this method to write the info file at the end of the launch . The . info file is saved given setup_info supplied by _setup_launch into the root_directory . When called without setup_info the existing info file is updated with the end - time .
12102	Launches processes defined by process_commands but only executes max_concurrency processes at a time ; if a process completes and there are still outstanding processes to be executed the next processes are run until max_concurrency is reached again .
12103	A succinct summary of the Launcher configuration . Unlike the repr a summary does not have to be complete but must supply key information relevant to the user .
12104	The method that actually runs qsub to invoke the python process with the necessary commands to trigger the next collation step and next block of jobs .
12105	This method handles static argument specifiers and cases where the dynamic specifiers cannot be queued before the arguments are known .
12106	Aggregates all process_commands and the designated output files into a list and outputs it as JSON after which the wrapper script is called .
12107	Performs consistency checks across all the launchers .
12108	Launches all available launchers .
12109	Runs the review process for all the launchers .
12110	Helper to prompt the user for input on the commandline .
12111	The implementation in the base class simply checks there is no clash between the metadata and data keys .
12112	Returns the full path for saving the file adding an extension and making the filename unique as necessary .
12113	Returns a boolean indicating whether the filename has an appropriate extension for this class .
12114	Data may be either a PIL Image object or a Numpy array .
12115	return YYYY - MM - DD when the file was modified .
12116	returns a dict of active folders with days as keys .
12117	given some data and a list of X posistions return the normal distribution curve as a Y point at each of those Xs .
12118	show basic info about ABF class variables .
12119	read the ABF header and save it HTML formatted .
12120	use 1 colormap for the whole abf . You can change it! .
12121	return self . dataY around a time point . All units are seconds . if thisSweep == False the time point is considered to be experiment time and an appropriate sweep may be selected . i . e . with 10 second sweeps and timePint = 35 will select the 5s mark of the third sweep
12122	RETURNS filtered trace . Desn t filter it in place .
12123	Raises a ValidationError for any ActivatableModel that has ForeignKeys or OneToOneFields that will cause cascading deletions to occur . This function also raises a ValidationError if the activatable model has not defined a Boolean field with the field name defined by the ACTIVATABLE_FIELD_NAME variable on the model .
12124	Helper function to convet an Args object to a HoloViews Table
12125	Method to define the positional arguments and keyword order for pretty printing .
12126	Formats the elements of an argument set appropriately
12127	Returns a dictionary like object with the lists of values collapsed by their respective key . Useful to find varying vs constant keys and to find how fast keys vary .
12128	A succinct summary of the argument specifier . Unlike the repr a summary does not have to be complete but must supply the most relevant information about the object to the user .
12129	Returns the specs the remaining kwargs and whether or not the constructor was called with kwarg or explicit specs .
12130	Convenience method to inspect the available argument values in human - readable format . The ordering of keys is determined by how quickly they vary .
12131	The lexical sort order is specified by a list of string arguments . Each string is a key name prefixed by + or - for ascending and descending sort respectively . If the key is not found in the operand s set of varying keys it is ignored .
12132	Simple replacement for numpy linspace
12133	Parses the log file generated by a launcher and returns dictionary with tid keys and specification values .
12134	Writes the supplied specifications to the log path . The data may be supplied as either as a an Args or as a list of dictionaries .
12135	Load all the files in a given directory selecting only files with the given extension if specified . The given kwargs are passed through to the normal constructor .
12136	Return the fields specified in the pattern using Python s formatting mini - language .
12137	Loads the files that match the given pattern .
12138	From the pattern decomposition finds the absolute paths matching the pattern .
12139	Convenience method to directly chain a pattern processed by FilePattern into a FileInfo instance .
12140	Load the file contents into the supplied Table using the specified key and filetype . The input table should have the filenames as values which will be replaced by the loaded data . If data_key is specified this key will be used to index the loaded data to retrive the specified item .
12141	Load the file contents into the supplied dataframe using the specified key and filetype .
12142	Generates the union of the source . specs and the metadata dictionary loaded by the filetype object .
12143	Push new data into the buffer . Resume looping if paused .
12144	Create a plot of one area of interest of a single sweep .
12145	Inelegant for now but lets you manually analyze every ABF in a folder .
12146	Reanalyze data for a single ABF . Also remakes child and parent html .
12147	scan folder1 and folder2 into files1 and files2 . since we are on windows simplify things by making them all lowercase . this WILL cause problems on nix operating systems . If this is the case just run a script to rename every file to all lowercase .
12148	run this to turn all folder1 TIFs and JPGs into folder2 data . TIFs will be treated as micrographs and converted to JPG with enhanced contrast . JPGs will simply be copied over .
12149	analyze every unanalyzed ABF in the folder .
12150	return appropriate HTML determined by file extension .
12151	generate a generic flat file html for an ABF parent . You could give this a single ABF ID its parent ID or a list of ABF IDs . If a child ABF is given the parent will automatically be used .
12152	create ID_plot . html of just intrinsic properties .
12153	This applies a kernel to a signal through convolution and returns the result .
12154	simple timer . returns a time object or a string .
12155	if the value is in the list move it to the front and return it .
12156	if the value is in the list move it to the back and return it .
12157	given a list and a list of items to be first return the list in the same order except that it begins with each of the first items .
12158	given a list of goofy ABF names return it sorted intelligently . This places things like 16o01001 after 16901001 .
12159	when given a dictionary where every key contains a list of IDs replace the keys with the list of files matching those IDs . This is how you get a list of files belonging to each child for each parent .
12160	given a groups dictionary and an ID return its actual parent ID .
12161	return the semi - temporary user folder
12162	Coroutine wrapper to catch errors after async scheduling .
12163	Check if the listener limit is hit and warn if needed .
12164	Bind a listener to a particular event .
12165	Add a listener that is only called once .
12166	Remove a listener from the emitter .
12167	Schedule a coroutine for execution .
12168	Execute a sync function .
12169	Dispatch an event to a listener .
12170	Call each listener for the event with the given arguments .
12171	Get the number of listeners for the event .
12172	Convert each TIF to PNG . Return filenames of new PNGs .
12173	given an ID and the dict of files generate a static html for that abf .
12174	expects a folder of ABFs .
12175	simple example how to load an ABF file and plot every sweep .
12176	plot X and Y data then shade its background by variance .
12177	create some fancy graphs to show color - coded variances .
12178	run this before analysis . Checks if event detection occured . If not runs AP detection on all sweeps .
12179	runs AP detection on every sweep .
12180	Return package author and version as listed in init . py .
12181	Create an API subclass with fewer methods than its base class .
12182	Execute a specified Slack Web API method .
12183	Whether a given method exists in the known API .
12184	Extend XPath evaluation with Parsley extensions namespace
12185	Try and convert matching Elements to unicode strings .
12186	Join the real - time messaging service .
12187	Handle an incoming message appropriately .
12188	If you send a message directly to me
12189	Create a new instance from the API token .
12190	Format an outgoing message for transmission .
12191	Get the WebSocket URL for the RTM session .
12192	Generates the instructions for a bot and its filters .
12193	Respond to a message on the current socket .
12194	Check the first message matches the expected handshake .
12195	Returns list of paths to tested apps
12196	Get the imported task classes for each task that will be run
12197	Get the options for each task that will be run
12198	Write the data from the db to a CLDF dataset according to the metadata in self . dataset .
12199	A user - friendly description of the handler .
12200	Create a Parselet instance from a file containing the Parsley script as a JSON object
12201	Create a Parselet instance from a file containing the Parsley script as a YAML object
12202	Interpret input lines as a JSON Parsley script . Python - style comment lines are skipped .
12203	Build part of the abstract Parsley extraction tree
12204	Use CLDF reference properties to implicitely create foreign key constraints .
12205	Create a URL for the specified endpoint .
12206	Raise an appropriate error for a given response .
12207	Truncate the supplied text for display .
12208	Add a source either specified by glottolog reference id or as bibtex record .
12209	Returns a cache key consisten of a username and image size .
12210	Decorator to cache the result of functions that take a user and a size value .
12211	Function to be called when saving or changing an user s avatars .
12212	Returns a field object instance for a given PrefProxy object .
12213	Updates field object with data from a PrefProxy object .
12214	Returns preferences model class dynamically crated for a given app or None on conflict .
12215	Returns locals dictionary from a given frame .
12216	Generator to walk through variables considered as preferences in locals dict of a given frame .
12217	Prints file details in the current directory
12218	Attempt to bind the args to the type signature . First try to just bind to the signature then ensure that all arguments match the parameter types .
12219	For every parameter create a matcher if the parameter has an annotation .
12220	Makes a wrapper function that executes a dispatch call for func . The wrapper has the dispatch and dispatch_first attributes so that additional overloads can be added to the group .
12221	Adds the decorated function to this dispatch .
12222	Adds the decorated function to this dispatch at the FRONT of the order . Useful for allowing third parties to add overloaded functionality to be executed before default functionality .
12223	Dispatch a call . Call the first function whose type signature matches the arguemts .
12224	reprojette en WGS84 et recupere l extend
12225	Convert GRIB to Tif
12226	Triggered on dynamic preferences model save . Issues DB save and reread .
12227	Binds PrefProxy objects to module variables used by apps as preferences .
12228	Registers dynamically created preferences models for Admin interface .
12229	Automatically discovers and registers all preferences available in all apps .
12230	Restores the original values of module variables considered preferences if they are still PatchedLocal and not PrefProxy .
12231	Replaces a settings module with a Module proxy to intercept an access to settings .
12232	Registers preferences that should be handled by siteprefs .
12233	Marks preferences group .
12234	Marks a preference .
12235	Generate the versionwarning - data . json file .
12236	Gives objective functions a number of dimensions and parameter range
12237	Pointwise minimum of two quadratic bowls
12238	Objective and gradient for the rosenbrock function
12239	Beale s function
12240	Booth s function
12241	Three - hump camel function
12242	One of the Bohachevsky functions
12243	Dixon - Price function
12244	Styblinski - Tang function
12245	Return a list of buckets in MimicDB .
12246	Return a bucket from MimicDB if it exists . Return a S3ResponseError if the bucket does not exist and validate is passed .
12247	Add the bucket to MimicDB after successful creation .
12248	Sync either a list of buckets or the entire connection .
12249	Return the key from MimicDB .
12250	Return None if key is not in the bucket set .
12251	Return a list of keys from MimicDB .
12252	Remove each key or key name in an iterable from the bucket set .
12253	Remove key name from bucket set .
12254	Return an iterable of keys from MimicDB .
12255	Sync a bucket .
12256	Minimize the proximal operator of a given objective using L - BFGS
12257	Applies a smoothing operator along one dimension
12258	Projection onto the semidefinite cone
12259	Projection onto the probability simplex
12260	Applies a proximal operator to the columns of a matrix
12261	Turns a coroutine into a gradient based optimizer .
12262	Adds a proximal operator to the list of operators
12263	Set key attributes to retrived metadata . Might be extended in the future to support more attributes .
12264	Called internally for any type of upload . After upload finishes make sure the key is in the bucket set and save the metadata .
12265	Memoizes an objective + gradient function and splits it into two functions that return just the objective and gradient respectively .
12266	Decorates a function with the given docstring
12267	Compares the numerical gradient to the analytic gradient
12268	Evaluate the files identified for checksum .
12269	Check the integrity of the datapackage . json
12270	Guess the filetype and read the file into row sets
12271	Guess schema using messytables
12272	Calculates a checksum for a Finnish national reference number
12273	Helper to make sure the given character is valid for a reference number
12274	Creates the huge number from ISO alphanumeric ISO reference
12275	Validates ISO reference number
12276	Calculates virtual barcode for IBAN account number and ISO reference
12277	Add a normal file including its source
12278	Run the executable and capture the input and output ...
12279	Add files to the repository by explicitly specifying them or by specifying a pattern over files accessed during execution of an executable .
12280	For various actions we need files that match patterns
12281	Run a specific command using the manager
12282	Get metadata for a given file
12283	Lookup all available repos
12284	Working directory for the repo
12285	Add repo to the internal lookup table ...
12286	Lookup a repo based on username reponame
12287	Run a shell command within the repo s context
12288	Check if the datapackage exists ...
12289	Create the datapackage file ..
12290	Initialize an empty repository with datapackage . json
12291	Update metadata with the content of the files
12292	Update metadata with the commit information
12293	Update metadata with the action history
12294	Update metadata host information
12295	Collect information from the dependent repo s
12296	Post to metadata server
12297	Show details of available plugins
12298	Load all plugins from dgit extension
12299	Registering a plugin
12300	Search for a plugin
12301	Instantiate the validation specification
12302	Validate the content of the files for consistency . Validators can look as deeply as needed into the files . dgit treats them all as black boxes .
12303	Check if a URL exists
12304	Post to the metadata server
12305	imports and returns module class from path . to . module . Class argument
12306	Find max 5 executables that are responsible for this repo .
12307	Automatically get repo
12308	Look through the local directory to pick up files to check
12309	Cleanup the paths and add
12310	This will try to pull in a stream from an external source . Once a stream has been successfully pulled it is assigned a local stream name which can be used to access the stream from the EMS .
12311	Records any inbound stream . The record command allows users to record a stream that may not yet exist . When a new stream is brought into the server it is checked against a list of streams to be recorded .
12312	Creates an RTMP ingest point which mandates that streams pushed into the EMS have a target stream name which matches one Ingest Point privateStreamName .
12313	Instantiate the generator and filename specification
12314	Helper function to run commands
12315	Run a generic command within the repo . Assumes that you are in the repo s root directory
12316	Initialize a Git repo
12317	Delete files from the repo
12318	Cleanup the repo
12319	Get the permalink to command that generated the dataset
12320	Add files to the repo
12321	Marks the invoice as sent in Holvi
12322	Convert our Python object to JSON acceptable to Holvi API
12323	API wrapper documentation
12324	Saves this order to Holvi returns a tuple with the order itself and checkout_uri
12325	Return source code based on tokens .
12326	Load profile INI
12327	Update the profile
12328	Insert hook into the repo
12329	Try the library . If it doesnt work use the command line ..
12330	Run a shell command
12331	Get the commit history for a given dataset
12332	Look at files and compute the diffs intelligently
12333	Execute command and wait for it to finish . Proceed with caution because if you run a command that causes a prompt this will hang
12334	Enter sudo mode
12335	Install specified packages using apt - get . - y options are automatically used . Waits for command to finish .
12336	Install specified python packages using pip . - U option added Waits for command to finish .
12337	Install all requirements contained in the given file path Waits for command to finish .
12338	Create fiji - macros for stitching all channels and z - stacks for a well .
12339	Lossless compression . Save images as PNG and TIFF tags to json . Can be reversed with decompress . Will run in multiprocessing where number of workers is decided by leicaexperiment . experiment . _pools .
12340	Lossless compression . Save image as PNG and TIFF tags to json . Process can be reversed with decompress .
12341	Set self . path self . dirname and self . basename .
12342	List of paths to images .
12343	Get path of specified image .
12344	Get list of paths to images in specified well .
12345	Stitches all wells in experiment with ImageJ . Stitched images are saved in experiment root .
12346	Lossless compress all images in experiment to PNG . If folder is omitted images will not be moved .
12347	Get OME - XML metadata of given field .
12348	Get a list of stitch coordinates for the given well .
12349	Create a new droplet
12350	Retrieve a droplet by id
12351	Restore this droplet with given image id
12352	Rebuild this droplet with given image id
12353	Change the name of this droplet
12354	Change the kernel of this droplet
12355	Delete this droplet
12356	wait for all actions to complete on a droplet
12357	Open SSH connection to droplet
12358	Send a request to the REST API
12359	Properly formats array types
12360	create request url for resource
12361	Send a request for this resource to the API
12362	Send list request for all members of a collection
12363	Get single unit of collection
12364	Transfer this image to given region
12365	id or slug
12366	id or fingerprint
12367	Creates a new domain
12368	Get a list of all domain records for the given domain name
12369	Change the name of this domain record
12370	Retrieve a single domain record given the id
12371	Logs the user on to FogBugz .
12372	Chop list_ into n chunks . Returns a list .
12373	return first droplet
12374	Take a snapshot of a droplet
12375	Retrieves the allowed operations for this request .
12376	Assets if the requested operations are allowed in this context .
12377	Fills the response object from the passed data .
12378	Processes a GET request .
12379	Processes a POST request .
12380	Processes a PUT request .
12381	Processes a DELETE request .
12382	Processes a LINK request .
12383	Creates a base Django project
12384	Helper function that performs an ilike query if a string value is passed otherwise the normal default operation .
12385	Parse the querystring into a normalized form .
12386	Return objects representing segments .
12387	we expect foo = bar
12388	Set the value of this attribute for the passed object .
12389	Consumes set specifiers as text and forms a generator to retrieve the requested ranges .
12390	Paginate an iterable during a request .
12391	Decorate test methods with this if you don t require strict index checking
12392	Read and return the request data .
12393	Updates the active resource configuration to the passed keyword arguments .
12394	This decorator wraps descriptor methods with a new method that tries to delegate to a function of the same name defined on the owner instance for convenience for dispatcher clients .
12395	Given a single decorated handler function prepare append desired data to self . registry .
12396	Find the first method this input dispatches to .
12397	Given a node return the string to use in computing the matching visitor methodname . Can also be a generator of strings .
12398	Find all method names this input dispatches to .
12399	Parse string to create an instance
12400	Add requirements to be managed
12401	Check if requirement is already satisfied by what was previously checked
12402	Add new requirements that must be fulfilled for this bump to occur
12403	Parse changes for requirements
12404	Bump dependencies using given requirements .
12405	Restore content in target file to be before any changes
12406	Transforms the object into an acceptable format for transmission .
12407	Extends a collection with a value .
12408	Merges a named option collection .
12409	All package info for given package
12410	All versions for package
12411	Flush and close the stream .
12412	Writes the given chunk to the output buffer .
12413	Serializes the data into this response using a serializer .
12414	Flush the write buffers of the stream .
12415	Writes the passed chunk and flushes it to the client .
12416	Writes the passed chunk flushes it to the client and terminates the connection .
12417	This Context Manager is used to move the contents of a directory elsewhere temporarily and put them back upon exit . This allows testing code to use the same file directories as normal code without fear of damage .
12418	This Context Manager redirects STDOUT to a StringIO objects which is returned from the Context . On exit STDOUT is restored .
12419	This Context Manager redirects STDERR to a StringIO objects which is returned from the Context . On exit STDERR is restored .
12420	Builds the URL configuration for this resource .
12421	Dump an object in req format to the fp given .
12422	Dump an object in req format to a string .
12423	Load an object from the file pointer .
12424	Loads an object from a string .
12425	Reverse all bumpers
12426	Expand targets by looking for - r in targets .
12427	Gets the Nginx config for the project
12428	Creates base directories for app virtualenv and nginx
12429	Creates the virtualenv for the project
12430	Creates the Nginx configuration for the project
12431	Creates scripts to start and stop the application
12432	Creates the full project
12433	Dasherizes the passed value .
12434	Redirect to the canonical URI for this resource .
12435	Parses out parameters and separates them out of the path .
12436	Traverses down the path and determines the accessed resource .
12437	Helper method used in conjunction with the view handler to stream responses to the client .
12438	Deserializes the text using a determined deserializer .
12439	Serializes the data using a determined serializer .
12440	Entry - point of the dispatch cycle for this resource .
12441	Ensure we are authenticated .
12442	Ensure we are allowed to access this resource .
12443	Ensure that we re allowed to use this HTTP method .
12444	Processes every request .
12445	Process an OPTIONS request .
12446	Wraps the decorated function in a lightweight resource .
12447	Render to cookie strings .
12448	update self with cookie_string .
12449	Adds a method to the internal lists of allowed or denied methods . Each object in the internal list contains a resource ARN and a condition statement . The condition statement can be null .
12450	This function loops over an array of objects containing a resourceArn and conditions statement and generates the array of statements for the policy .
12451	AWS doesn t quite have Swagger 2 . 0 validation right and will fail on some refs . So we need to convert to deref before upload .
12452	Check all necessary system requirements to exist .
12453	Convert config dict to arguments list .
12454	Create virtual environment .
12455	Decorator to error handling .
12456	Install library or project into virtual environment .
12457	Iterate over dict items .
12458	Iterate over dict keys .
12459	r Bootstrap Python projects and libraries with virtualenv and pip .
12460	Parse args from command line by creating argument parser instance and process it .
12461	r Run pip command in given or activated virtual environment .
12462	Convert config dict to command line args line .
12463	Print error message to stderr using ANSI - colors .
12464	Print message via subprocess . call function .
12465	Read and parse configuration file . By default filename is relative path to current work directory .
12466	r Call given command with subprocess . call function .
12467	Run post - bootstrap hook if any .
12468	Save error traceback to bootstrapper log file .
12469	Convert Python object to string .
12470	Copy file from src path to dst path . If dst already exists will add + characters to the end of the basename without extension .
12471	Returns the absolute path of folderpath . If the path does not exist will raise IOError .
12472	Return the extension of fpath .
12473	Add the extension ext to fpath if it doesn t have it .
12474	Joins path to each line in filelist
12475	Deletes all files in filelist
12476	Returns the length of the file using the wc GNU command
12477	Merge two dictionaries .
12478	Return a folder path if it exists .
12479	Read environment variables and config files and return them merged with predefined list of arguments .
12480	Return the dictionary containing the rcfile section configuration variables .
12481	Return the value of the variable in the section_name section of the app_name rc file .
12482	Return the section and the value of the variable where the first var_name is found in the app_name rcfiles .
12483	Filters the lst using pattern . If pattern starts with ( it will be considered a re regular expression otherwise it will use fnmatch filter .
12484	Given a nested dictionary adict . This returns its childen just below the path . The path is a string composed of adict keys separated by sep .
12485	Given a nested dictionary this returns all its leave elements in a list .
12486	Looks for path_regex within base_path . Each match is append in the returned list . path_regex may contain subfolder structure . If any part of the folder structure is a
12487	Will create dirpath folder . If dirpath already exists and overwrite is False will append a + suffix to dirpath until dirpath does not exist .
12488	Imports filetree and root_path variable values from the filepath .
12489	Remove the nodes that match the pattern .
12490	Return the number of nodes that match the pattern .
12491	Converts an array - like to an array of floats
12492	Make arrays indexable for cross - validation .
12493	Input validation on an array list sparse matrix or similar .
12494	Input validation for standard estimators .
12495	Ravel column or 1d numpy array else raises an error
12496	Warning utility function to check that data type is floating point .
12497	Convert an arbitrary array to numpy . ndarray .
12498	Call FSL tools to apply transformations to a given atlas to a functional image . Given the transformation matrices .
12499	Convert a FWHM value to sigma in a Gaussian kernel .
12500	Convert a sigma in a Gaussian kernel to a FWHM value .
12501	Smooth images with a a Gaussian filter .
12502	Smooth images using a Gaussian filter .
12503	Smooth images by applying a Gaussian filter . Apply a Gaussian filter along the three first dimensions of arr .
12504	Smooth images by applying a Gaussian filter . Apply a Gaussian filter along the three first dimensions of arr . In all cases non - finite values in input image are replaced by zeros .
12505	Create requests session with any required auth headers applied .
12506	Create requests session with AAD auth headers
12507	Return a grid with coordinates in 3D physical space for img .
12508	Gets a 3D CoordinateMap from img .
12509	Return the header and affine matrix from a Nifti file .
12510	Return the voxel matrix of the Nifti file . If safe_mode will make a copy of the img before returning the data so the input image is not modified .
12511	Read a Nifti file and return as nipy . Image
12512	From the list of absolute paths to nifti files creates a Numpy array with the data .
12513	Crops image to a smaller size
12514	Crops img as much as possible
12515	Create a new image of the same class as the reference image
12516	Return the h5py . File given its file path .
12517	Return all dataset contents from h5path group in h5file in an OrderedDict .
12518	Return the node of type node_type names within h5path of h5file .
12519	self . mask setter
12520	Read the images load them into self . items and set the labels .
12521	Save the Numpy array created from to_matrix function to the output_file .
12522	Writes msg to stderr and exits with return code
12523	Calls the command
12524	Call CLI command with arguments and returns its return value .
12525	Tries to submit cmd to HTCondor if it does not succeed it will be called with subprocess . call .
12526	Submits cmd to HTCondor queue
12527	Clean previously built package artifacts .
12528	Upload the package to an index server .
12529	Load all Service Fabric commands
12530	Open a volumetric file using the tools following the file extension .
12531	Will rename all files in file_lst to a padded serial number plus its extension
12532	Search for dicoms in folders and save file paths into self . dicom_paths set .
12533	Overwrites self . items with the given set of files . Will filter the fileset and keep only Dicom files .
12534	Update this set with the union of itself and dicomset .
12535	Copies all files within this set to the output_folder
12536	Creates a lambda function to read DICOM files . If store_store_metadata is False will only return the file path . Else if you give header_fields will return only the set of of header_fields within a DicomFile object or the whole DICOM file if None .
12537	Generator that yields one by one the return value for self . read_dcm for each file within this set
12538	Return a set of unique field values from a list of DICOM files
12539	Returns a list of the dicom files within root_path
12540	Tries to read the file using dicom . read_file if the file exists and dicom . read_file does not raise and Exception returns True . False otherwise .
12541	Group in a dictionary all the DICOM files in dicom_paths separated by the given hdr_field tag value .
12542	Return the attributes values from this DicomFile
12543	Concatenate images in the direction determined in axis .
12544	Picks a function whose first argument is an img processes its data and returns a numpy array . This decorator wraps this numpy array into a nibabel . Nifti1Image .
12545	Pixelwise division or divide by a number
12546	Return the image with the given mask applied .
12547	Return an image with the binarised version of the data of img .
12548	Return a z - scored version of icc . This function is based on GIFT icatb_convertImageToZScores function .
12549	Return the thresholded z - scored icc .
12550	Write the content of the meta_dict into filename .
12551	Write the data into a raw format file . Big endian is always used .
12552	Write the data and meta_dict in two files with names that use filename as a prefix .
12553	Copy . mhd and . raw files to dst .
12554	SPSS . sav files to Pandas DataFrame through Rpy2
12555	SPSS . sav files to Pandas DataFrame through savreader module
12556	Valid extensions . pyshelf . mat . hdf5 or . h5
12557	Create CLI environment
12558	Find all the ROIs in img and returns a similar volume with the ROIs emptied keeping only their border voxels .
12559	Return the largest connected component of a 3D array .
12560	Return as mask for volume that includes only areas where the connected components have a size bigger than min_cluster_size in number of voxels .
12561	Look for the files in filelist containing the names in roislist these files will be opened binarised and merged in one mask .
12562	Return a sorted list of the non - zero unique values of arr .
12563	Get the center of mass for each ROI in the given volume .
12564	Extracts the values in datavol that are in the ROI with value roivalue in roivol . The ROI can be masked by maskvol .
12565	Pick one 3D volume from a 4D nifti image file
12566	Returns a h5py dataset given its registered name .
12567	Creates a Dataset with unknown size . Resize it before using .
12568	Saves a Numpy array in a dataset in the HDF file registers it as ds_name and returns the h5py dataset .
12569	See create_dataset .
12570	Will get the names of the index colums of df obtain their ranges from range_values dict and return a reindexed version of df with the given range values .
12571	Retrieve pandas object or group of Numpy ndarrays stored in file
12572	Store object in HDFStore
12573	Returns a PyTables HDF Array from df in the shape given by its index columns range values .
12574	Set a smoothing Gaussian kernel given its FWHM in mm .
12575	First set_mask and the get_masked_data .
12576	Sets a mask img to this . So every operation to self this mask will be taken into account .
12577	Return the data masked with self . mask
12578	Set self . _smooth_fwhm and then smooths the data . See boyle . nifti . smooth . smooth_imgs .
12579	Return a vector of the masked data .
12580	Save this object instance in outpath .
12581	Setup logging configuration .
12582	Return a 3D volume from a 4D nifti image file
12583	A wrapper for mem . cache that flushes the cache if the version number of nibabel has changed .
12584	Saves a Nifti1Image into an HDF5 group .
12585	Saves a Nifti1Image into an HDF5 file .
12586	Transforms an H5py Attributes set to a dict . Converts unicode string keys into standard strings and each value into a numpy array .
12587	Returns in a list all images found under h5group .
12588	Inserts all given nifti files from file_list into one dataset in fname . This will not check if the dimensionality of all files match .
12589	Generate all combinations of the elements of iterable and its subsets .
12590	List existing reliable dictionaries .
12591	Query Schema information for existing reliable dictionaries .
12592	Query existing reliable dictionary .
12593	Execute create update delete operations on existing reliable dictionaries .
12594	Verify arguments for select command
12595	Get AAD token
12596	Use openpyxl to read an Excel file .
12597	Return the expanded absolute path of xl_path if if exists and xlrd or openpyxl depending on which module should be used for the Excel file in xl_path .
12598	Return the workbook from the Excel file in xl_path .
12599	Return a list with the name of the sheets in the Excel file in xl_path .
12600	Return a pandas DataFrame with the concat ed content of the sheetnames from the Excel file in xl_path .
12601	Raise an AttributeError if df does not have a column named as an item of the list of strings col_names .
12602	Return a list of not null values from the col_name column of df .
12603	Return a DataFrame with the duplicated values of the column col_name in df .
12604	Return the duplicated items in values
12605	Convert to string all values in data .
12606	Search for items in table that have the same field sub - set values as in sample . Expecting it to be unique otherwise will raise an exception .
12607	Search in table an item with the value of the unique_fields in the sample sample . Check if the the obtained result is unique . If nothing is found will return an empty list if there is more than one item found will raise an IndexError .
12608	Create a TinyDB query that looks for items that have each field in sample with a value compared with the correspondent operation in operators .
12609	Create a tinyDB Query object that looks for items that confirms the correspondent operator from operators for each field_names field values from data .
12610	Create a tinyDB Query object that is the concatenation of each query in queries . The concatenation operator is taken from operators .
12611	Return the element in table_name with Object ID eid . If None is found will raise a KeyError exception .
12612	Search in table an item with the value of the unique_fields in the data sample . Check if the the obtained result is unique . If nothing is found will return an empty list if there is more than one item found will raise an IndexError .
12613	Return True if an item with the value of unique_fields from data is unique in the table with table_name . False if no sample is found or more than one is found .
12614	Update the unique matching element to have a given set of fields .
12615	Return the number of items that match the sample field values in table table_name . Check function search_sample for more details .
12616	Check for get_data and get_affine method in an object
12617	Get the data in the image without having a side effect on the Nifti1Image object
12618	Return the shape of img .
12619	Return true if one_img and another_img have the same shape . False otherwise . If both are nibabel . Nifti1Image will also check for affine matrices .
12620	Return True if the affine matrix of one_img is close to the affine matrix of another_img . False otherwise .
12621	Printing of img or imgs
12622	Returns true if array1 and array2 have the same shapes false otherwise .
12623	Create a list of regex matches that result from the match_regex of all file names within wd . The list of files will have wd as path prefix .
12624	Returns absolute paths of folders that match the regex within folder_path and all its children folders .
12625	Creates a list of files that match the search_regex within file_dir . The list of files will have file_dir as path prefix .
12626	Returns absolute paths of files that match the regex within file_dir and all its children folders .
12627	Returns absolute paths of files that match the regexs within folder_path and all its children folders .
12628	Generator that loops through all absolute paths of the files within folder
12629	Uses glob to find all files or folders that match the regex starting from the base_directory .
12630	Append key - value pairs to msg for display .
12631	Gets a list of DICOM file absolute paths and returns a list of lists of DICOM file paths . Each group contains a set of DICOM files that have exactly the same headers .
12632	Copy the DICOM file groups to folder_path . Each group will be copied into a subfolder with named given by groupby_field .
12633	Calculates the DicomFileDistance between all files in dicom_files using an weighted Levenshtein measure between all field names in field_weights and their corresponding weights .
12634	Check the field values in self . dcmf1 and self . dcmf2 and returns True if all the field values are the same False otherwise .
12635	Updates the status of the file clusters comparing the cluster key files with a levenshtein weighted measure using either the header_fields or self . header_fields .
12636	Thresholds a distance matrix and returns the result .
12637	Returns a list of 2 - tuples with pairs of dicom groups that are in the same folder within given depth .
12638	Extend the lists within the DICOM groups dictionary . The indices will indicate which list have to be extended by which other list .
12639	Copy the file groups to folder_path . Each group will be copied into a subfolder with named given by groupby_field .
12640	Return a dictionary where the key is the group key file path and the values are sets of unique values of the field name of all DICOM files in the group .
12641	Gets a config by name .
12642	Checks if a config value is set to a valid bool value .
12643	Set a config by name to a value .
12644	Path to certificate related files either a single file path or a tuple . In the case of no security returns None .
12645	Set AAD token cache .
12646	Set AAD metadata .
12647	Set certificate usage paths
12648	Returns a list with of the objects in olist that have a fieldname valued as fieldval
12649	Checks whether the re module can compile the given regular expression .
12650	Returns True if the given string is considered a fnmatch regular expression False otherwise . It will look for
12651	Return index of the nth match found of pattern in strings
12652	Generate a dcm2nii configuration file that disable the interactive mode .
12653	Converts all DICOM files within work_dir into one or more NifTi files by calling dcm2nii on this folder .
12654	Call MRICron s dcm2nii to convert the DICOM files inside input_dir to Nifti and save the Nifti file in output_dir with a filename prefix .
12655	Return a subset of filepaths . Keep only the files that have a basename longer than the others with same suffix . This works based on that dcm2nii appends a preffix character for each processing step it does automatically in the DICOM to NifTI conversion .
12656	Transform a named tuple into a dictionary
12657	Extend the within a dict of lists . The indices will indicate which list have to be extended by which other list .
12658	Return a dict of lists from a list of dicts with the same keys . For each dict in list_of_dicts with look for the values of the given keys and append it to the output dict .
12659	Imports the contents of filepath as a Python module .
12660	Copies the files in the built file tree map to despath .
12661	Transforms the input . sav SPSS file into other format . If you don t specify an outputfile it will use the inputfile and change its extension to . csv
12662	Load a Nifti mask volume .
12663	Load a Nifti mask volume and return its data matrix as boolean and affine .
12664	Creates a binarised mask with the union of the files in filelist .
12665	Read a Nifti file nii_file and a mask Nifti file . Returns the voxels in nii_file that are within the mask the mask indices and the mask shape .
12666	Read a Nifti file nii_file and a mask Nifti file . Extract the signals in nii_file that are within the mask the mask indices and the mask shape .
12667	Transform a given vector to a volume . This is a reshape function for 3D flattened and maybe masked vectors .
12668	Transform a given vector to a volume . This is a reshape function for 4D flattened masked matrices where the second dimension of the matrix corresponds to the original 4th dimension .
12669	From the list of absolute paths to nifti files creates a Numpy array with the masked data .
12670	Create a client for Service Fabric APIs .
12671	Aggregate the rows of the DataFrame into a single value .
12672	Pipeable grouping method .
12673	Pipeable aggregation method . Takes either - a dataframe and a tuple of arguments required for aggregation - a tuple of arguments if a dataframe has already been piped into . In any case one argument has to be a class that extends callable .
12674	Pipeable subsetting method .
12675	Pipeable modification method Takes either - a dataframe and a tuple of arguments required for modification - a tuple of arguments if a dataframe has already been piped into . In any case one argument has to be a class that extends callable .
12676	Escape a single character
12677	Escape a string so that it only contains characters in a safe set .
12678	Unescape a string escaped with escape escape_char must be the same as that used in the call to escape .
12679	Determines whether this backend is allowed to send a notification to the given user and notice_type .
12680	Returns a dictionary with the format identifier as the key . The values are are fully rendered templates with the given context .
12681	Copy the attributes from a source object to a destination object .
12682	Returns DataFrameRow of the DataFrame given its index .
12683	The notice settings view .
12684	Query Wolfram Alpha and return a Result object
12685	Return list of all Pod objects in result
12686	Find a node in the tree . If the node is not found it is added first and then returned .
12687	Returns site - specific notification language for this user . Raises LanguageStoreNotAvailable if this site does not use translated notifications .
12688	Creates a new notice .
12689	A basic interface around both queue and send_now . This honors a global flag NOTIFICATION_QUEUE_ALL that helps determine whether all calls should be queued or not . A per call queue or now keyword argument can be used to always override the default global behavior .
12690	Queue the notification in NoticeQueueBatch . This allows for large amounts of user notifications to be deferred to a seperate process running outside the webserver .
12691	A helper function to write lammps pair potentials to string . Assumes that functions are vectorized .
12692	Write tersoff potential file from parameters to string
12693	Aggregate the rows of each group into a single value .
12694	Checks if elements of set2 are in set1 .
12695	Checks if all elements from set2 are in set1 .
12696	Serialize object back to XML string .
12697	Parse MARC XML document to dicts which are contained in self . controlfields and self . datafields .
12698	Parse control fields .
12699	Parse data fields .
12700	This method is used mainly internally but it can be handy if you work with with raw MARC XML object and not using getters .
12701	Return content of given subfield in datafield .
12702	Get the given param from each of the DOFs for a joint .
12703	Set the given param for each of the DOFs for a joint .
12704	Given an angle and an axis create a quaternion .
12705	Given a set of bodies compute their center of mass in world coordinates .
12706	Set the state of this body .
12707	Set the rotation of this body using a rotation matrix .
12708	Convert a body - relative offset to world coordinates .
12709	Convert a point in world coordinates to a body - relative offset .
12710	Convert a relative body offset to world coordinates .
12711	Add a force to this body .
12712	Add a torque to this body .
12713	Connect this body to another one using a joint .
12714	Move another body next to this one and join them together .
12715	List of positions for linear degrees of freedom .
12716	List of position rates for linear degrees of freedom .
12717	List of angles for rotational degrees of freedom .
12718	List of angle rates for rotational degrees of freedom .
12719	List of axes for this object s degrees of freedom .
12720	Set the lo stop values for this object s degrees of freedom .
12721	Set the hi stop values for this object s degrees of freedom .
12722	Set the target velocities for this object s degrees of freedom .
12723	Set the maximum forces for this object s degrees of freedom .
12724	Set the ERP values for this object s degrees of freedom .
12725	Set the CFM values for this object s degrees of freedom .
12726	Set the CFM values for this object s DOF limits .
12727	Set the ERP values for this object s DOF limits .
12728	Set the linear axis of displacement for this joint .
12729	Set the angular axis of rotation for this joint .
12730	A list of axes of rotation for this joint .
12731	Create a new body .
12732	Create a new joint that connects two bodies together .
12733	Move one body to be near another one .
12734	Set the states of some bodies in the world .
12735	Step the world forward by one frame .
12736	Determine whether the given bodies are currently connected .
12737	Parse an AMC motion capture data file .
12738	Traverse the bone hierarchy and create physics bodies .
12739	Traverse the bone hierarchy and create physics joints .
12740	Parse informations about corporations from given field identified by datafield parameter .
12741	Parse persons from given datafield .
12742	Get list of VALID ISBN .
12743	Content of field 856u42 . Typically URL pointing to producers homepage .
12744	URL s which may point to edeposit aleph kramerius and so on .
12745	r Create a callable that implements a PID controller .
12746	Given a sequence of sequences return a flat numpy array .
12747	Load a skeleton definition from a file .
12748	Load a skeleton definition from a text file .
12749	Load a skeleton definition from an ASF text file .
12750	Set PID parameters for all joints in the skeleton .
12751	Get a list of all current joint torques in the skeleton .
12752	Get a list of the indices for a specific joint .
12753	Get a list of the indices for a specific body .
12754	Get the current joint separations for the skeleton .
12755	Enable the joint motors in this skeleton .
12756	Move each joint toward a target angle .
12757	Add torques for each degree of freedom in the skeleton .
12758	Return the names of our marker labels in canonical order .
12759	Load marker data from a CSV file .
12760	Load marker data from a C3D file .
12761	Process data to produce velocity and dropout information .
12762	Create physics bodies corresponding to each marker in our data .
12763	Load attachment configuration from the given text source .
12764	Attach marker bodies to the corresponding skeleton bodies .
12765	Reposition markers to a specific frame of data .
12766	Get a list of the distances between markers and their attachments .
12767	Return an array of the forces exerted by marker springs .
12768	Create and configure a skeleton in our model .
12769	Load marker data and attachment preferences into the model .
12770	Advance the physics world by one step .
12771	Settle the skeleton to our marker data at a specific frame .
12772	Iterate over a set of marker data dragging its skeleton along .
12773	Update the simulator to a specific frame of marker data .
12774	Follow a set of marker data yielding kinematic joint angles .
12775	Follow a set of angle data yielding dynamic joint torques .
12776	Move the body according to a set of torque data .
12777	Sort values but put numbers after alphabetically sorted words .
12778	Draw all bodies in the world .
12779	Get room stream to listen for messages .
12780	Get list of users in the room .
12781	Set the room name .
12782	Set the room topic .
12783	Post a message .
12784	Returns a list of paths specified by the XDG_CONFIG_DIRS environment variable or the appropriate default .
12785	Returns the value specified in the XDG_CONFIG_HOME environment variable or the appropriate default .
12786	Returns the filename which is effectively used by the application . If overridden by an environment variable it will return that filename .
12787	Check if filename can be read . Will return boolean which is True if the file can be read False otherwise .
12788	Searches for an appropriate config file . If found loads the file into the current instance . This method can also be used to reload a configuration . Note that you may want to set reload to True to clear the configuration before loading in that case . Without doing that values will remain available even if they have been removed from the config files .
12789	Get styles .
12790	Create a connection with given settings .
12791	Issue a PUT request .
12792	Issue a POST request .
12793	Issue a GET request .
12794	Get headers .
12795	Get URL used for authentication
12796	Parses a response .
12797	Build a request for twisted
12798	Issue a request .
12799	Build destination URL .
12800	Tells if this message is a text message .
12801	Get rooms list .
12802	Get a room by name .
12803	Get room .
12804	Get user .
12805	Search transcripts .
12806	Attach an observer .
12807	Called when incoming messages arrive .
12808	Fetch new messages .
12809	Called when new messages arrive .
12810	Called when a connection is made and used to send out headers
12811	Callback issued by twisted when new line arrives .
12812	Process data .
12813	Get a dictionary of CSL styles .
12814	Start producing .
12815	Cleanup code after asked to stop producing .
12816	Send a block of bytes to the consumer .
12817	Returns total length for this request .
12818	Build headers for each field .
12819	Returns the file size for given file field .
12820	Generate a path value of type result_type .
12821	Given an ASCII str returns a path of the given type .
12822	Generates a root component for a path .
12823	A strategy which generates filesystem path values .
12824	exec compiled code
12825	replace all blocks in extends with current blocks
12826	flush all buffered string into code
12827	Add POST data .
12828	Given some error text it will log the text if self . log_errors is True
12829	Processes the texts using TweeboParse and returns them in CoNLL format .
12830	Set entity data
12831	validates XML text
12832	validates XML name
12833	Prepare the actors the world and the messaging system to begin playing the game . This method is guaranteed to be called exactly once upon entering the game stage .
12834	Sequentially update the actors the world and the messaging system . The theater terminates once all of the actors indicate that they are done .
12835	Give the actors the world and the messaging system a chance to react to the end of the game .
12836	Template variables .
12837	Use when application is starting .
12838	Catch a connection asyncrounosly .
12839	Initialize self .
12840	Asyncronously wait for a connection from the pool .
12841	Release waiters .
12842	Listen for an id from the server .
12843	Respond when the server indicates that the client is out of sync .
12844	Manage the response when the server rejects a message .
12845	Relay messages from the forum on the server to the client represented by this actor .
12846	Create a new DataItem .
12847	Raise an ApiUsageError if the given object is not a token that is currently participating in the game . To be participating in the game the given token must have an id number and be associated with the world .
12848	Iterate through each member of the class being created and add a safety check to every method that isn t marked as read - only .
12849	Register the given callback to be called whenever the method with the given name is called . You can easily take advantage of this feature in token extensions by using the
12850	Clear all the internal data the token needed while it was part of the world .
12851	Allow tokens to modify the world for the duration of a with - block .
12852	Converts XML tree to event generator
12853	Converts events stream into lXML tree
12854	Parses file content into events stream
12855	selects sub - tree events
12856	merges each run of successive text events into one text event
12857	locates ENTER peer for each EXIT object . Convenient when selectively filtering out XML markup
12858	construct BusinessDate instance from datetime . date instance raise ValueError exception if not possible
12859	construct datetime . date instance represented calendar date of BusinessDate instance
12860	addition of a period object
12861	addition of a number of months
12862	private method for the addition of business days used in the addition of a BusinessPeriod only
12863	Parses as much as possible until it encounters a matching closing quote . By default matches any_token but can be provided with a more specific parser if required . Returns a string
12864	returns number of days for the given year and month
12865	Initialize the application .
12866	Register connection s middleware and prepare self database .
12867	Close all connections .
12868	Register a model in self .
12869	Manage a database connection .
12870	Write your migrations here .
12871	Runs a series of parsers in sequence passing the result of each parser to the next . The result of the last parser is returned .
12872	Returns the current token if is found in the collection provided . Fails otherwise .
12873	Returns the current token if it is not found in the collection provided . The negative of one_of .
12874	Returns the current token if it satisfies the guard function provided . Fails otherwise . This is the a generalisation of one_of .
12875	Succeeds if the given parser cannot consume input
12876	Applies the parser to input zero or more times . Returns a list of parser results .
12877	Consumes as many of these as it can until it term is encountered . Returns a tuple of the list of these results and the term result
12878	Like many_until but must consume at least one of these .
12879	Like sep but must consume at least one of parser .
12880	fills the internal buffer from the source iterator
12881	Advances to and returns the next token or returns EndOfFile
12882	Run a game being developed with the kxg game engine .
12883	Poll the queues that the worker can use to communicate with the supervisor until all the workers are done and all the queues are empty . Handle messages as they appear .
12884	Return database field type .
12885	Parse value from database .
12886	Parse the fsapi endpoint from the device url .
12887	Create a session on the frontier silicon device .
12888	Execute a frontier silicon API call .
12889	Helper method for setting a value by using the fsapi API .
12890	Helper method for fetching a text value .
12891	Helper method for fetching a integer value .
12892	Helper method for fetching a long value . Result is integer .
12893	Check if the device is on .
12894	Power on or off the device .
12895	Get the modes supported by this device .
12896	Read the maximum volume level of the device .
12897	Check if the device is muted .
12898	Mute or unmute the device .
12899	Get the play status of the device .
12900	Get the equaliser modes supported by this device .
12901	Set device sleep timer .
12902	Assumes that start and stop are already in buffer coordinates . value is a byte iterable . value_len is fractional .
12903	Parse genotype from VCF line data
12904	toIndex - An optional method which will return the value prepped for index .
12905	copy - Create a copy of this IRField .
12906	objHasUnsavedChanges - Check if any object has unsaved changes cascading .
12907	Check that a value has a certain JSON type .
12908	Load json or yaml data from file handle .
12909	Load json from file handle .
12910	Recursively compute intersection of data . For dictionaries items for specific keys will be reduced to unique items . For lists items will be reduced to unique items . This method is meant to be analogous to set . intersection for composite objects .
12911	Recursively compute union of data . For dictionaries items for specific keys will be combined into a list depending on the status of the overwrite = parameter . For lists items will be appended and reduced to unique items . This method is meant to be analogous to set . union for composite objects .
12912	Append to object if object is list .
12913	Extend list from object if object is list .
12914	Write composite object to file handle in JSON format .
12915	Return list of files in filetree .
12916	Prune leaves of filetree according to specified regular expression .
12917	Returns the value this reference is pointing to . This method uses ctx to resolve the reference and return the value this reference references . If the call was already made it returns a cached result . It also makes sure there s no cyclic reference and if so raises CyclicReferenceError .
12918	delete - Delete all objects in this list .
12919	save - Save all objects in this list
12920	reload - Reload all objects in this list . Updates in - place . To just fetch all these objects again use refetch
12921	refetch - Fetch a fresh copy of all items in this list . Returns a new list . To update in - place use reload .
12922	Renders as a str
12923	Returns the elements HTML start tag
12924	Returns a repr of an object and falls back to a minimal representation of type and ID if the call to repr raised an error .
12925	Match a genome VCF to variants in the ClinVar VCF file
12926	Return Allele data as dict object .
12927	Create list of Alleles from VCF line data
12928	Parse the VCF info field
12929	Dict representation of parsed VCF data
12930	Very lightweight parsing of a vcf line to get position .
12931	_toStorage - Convert the value to a string representation for storage .
12932	Navigate an open ftplib . FTP to appropriate directory for ClinVar VCF files .
12933	Return ClinVarAllele data as dict object .
12934	Parse frequency data in ClinVar VCF
12935	Parse alleles for ClinVar VCF overrides parent method .
12936	Returns back a class decorator that enables registering Blox to this factory
12937	Decorator for warning user of depricated functions before use .
12938	setDefaultRedisConnectionParams - Sets the default parameters used when connecting to Redis .
12939	clearRedisPools - Disconnect all managed connection pools and clear the connectiobn_pool attribute on all stored managed connection pools .
12940	getRedisPool - Returns and possibly also creates a Redis connection pool based on the REDIS_CONNECTION_PARAMS passed in .
12941	pprint - Pretty - print a dict representation of this object .
12942	hasUnsavedChanges - Check if any unsaved changes are present in this model or if it has never been saved .
12943	diff - Compare the field values on two IndexedRedisModels .
12944	save - Save this object . Will perform an insert if this object had not been saved before otherwise will update JUST the fields changed on THIS INSTANCE of the model .
12945	hasSameValues - Check if this and another model have the same fields and values .
12946	copy - Copies this object .
12947	saveToExternal - Saves this object to a different Redis than that specified by REDIS_CONNECTION_PARAMS on this model .
12948	reload - Reload this object from the database overriding any local changes and merging in any updates .
12949	copyModel - Copy this model and return that copy .
12950	connectAlt - Create a class of this model which will use an alternate connection than the one specified by REDIS_CONNECTION_PARAMS on this model .
12951	_get_new_connection - Get a new connection internal
12952	_get_connection - Maybe get a new connection or reuse if passed in . Will share a connection with a model internal
12953	_add_id_to_keys - Adds primary key to table internal
12954	_rem_id_from_keys - Remove primary key from table internal
12955	_add_id_to_index - Adds an id to an index internal
12956	_rem_id_from_index - Removes an id from an index internal
12957	_get_key_for_index - Returns the key name that would hold the indexes on a value Internal - does not validate that indexedFields is actually indexed . Trusts you . Don t let it down .
12958	_compat_rem_str_id_from_index - Used in compat_convertHashedIndexes to remove the old string repr of a field in order to later add the hashed value
12959	_peekNextID - Look at but don t increment the primary key for this model . Internal .
12960	Internal for handling filters ; the guts of . filter and . filterInline
12961	count - gets the number of records matching the filter criteria
12962	exists - Tests whether a record holding the given primary key exists .
12963	getPrimaryKeys - Returns all primary keys matching current filterset .
12964	all - Get the underlying objects which match the filter criteria .
12965	allOnlyFields - Get the objects which match the filter criteria only fetching given fields .
12966	allOnlyIndexedFields - Get the objects which match the filter criteria only fetching indexed fields .
12967	Random - Returns a random record in current filterset .
12968	delete - Deletes all entries matching the filter criteria
12969	get - Get a single value with the internal primary key .
12970	_doCascadeFetch - Takes an object and performs a cascading fetch on all foreign links and all theirs and so on .
12971	getMultiple - Gets multiple objects with a single atomic operation
12972	getOnlyFields - Gets only certain fields from a paticular primary key . For working on entire filter set see allOnlyFields
12973	getMultipleOnlyFields - Gets only certain fields from a list of primary keys . For working on entire filter set see allOnlyFields
12974	compat_convertHashedIndexes - Reindex fields used for when you change the propery hashIndex on one or more fields .
12975	_doSave - Internal function to save a single object . Don t call this directly . Use save instead .
12976	compat_convertHashedIndexes - Reindex all fields for the provided objects where the field value is hashed or not . If the field is unhashable do not allow .
12977	deleteOne - Delete one object
12978	deleteByPk - Delete object associated with given primary key
12979	deleteMultiple - Delete multiple objects
12980	deleteMultipleByPks - Delete multiple objects given their primary keys
12981	Returns a blox template from an html string
12982	Returns a blox template from a file stream object
12983	Returns a blox template from a valid file path
12984	Accumulate all dictionary and named arguments as keyword argument dictionary . This is generally useful for functions that try to automatically resolve inputs .
12985	getCompressMod - Return the module used for compression on this field
12986	toBytes - Convert a value to bytes using the encoding specified on this field
12987	Like functools . partial but instead of using the new kwargs keeps the old ones .
12988	Callable to configure Bokeh s show method when a proxy must be configured .
12989	Called at the start of notebook execution to setup the environment .
12990	Creates a overview of the hosts per range .
12991	Create an OrderedDict
12992	Groups line reference together
12993	Chunk a text at the passage level
12994	Create a numpy . ndarray with all observed fields and computed teff and luminosity values .
12995	Return the numpy array with rounded teff and luminosity columns .
12996	Checks the arguments to brutefore and spawns greenlets to perform the bruteforcing .
12997	Given a cluster create a Bokeh plot figure using the cluster s image .
12998	Returns rounded teff and luminosity lists .
12999	Given a cluster create a Bokeh plot figure creating an H - R diagram .
13000	Given a numpy array calculate what the ranges of the H - R diagram should be .
13001	Given a numpy array create a Bokeh plot figure creating an H - R diagram .
13002	Filter the cluster data catalog into the filtered_data catalog which is what is shown in the H - R diagram .
13003	Creates a tempfile and starts the given editor returns the data afterwards .
13004	This functions gives the user a way to change the data that is given as input .
13005	Performs a bruteforce for the given users password domain on the given host .
13006	Set the access and modified times of the file specified by path .
13007	Strip \\ ? \ prefix in init phase
13008	Return the path always without the \\ ? \ prefix .
13009	Formats the output of another tool in the given way . Has default styles for ranges hosts and services .
13010	Print the given line to stdout
13011	Gets the IP from the inet interfaces .
13012	Create a pandas DataFrame from a numpy ndarray .
13013	Strips labels .
13014	Remove namespace in the passed document in place .
13015	Check to see if this URI is retrievable by this Retriever implementation
13016	Decorator used to tag a method that should be used as a hook for the specified name hook type .
13017	Subscribes callable to listen to events of name type . The parameters passed to callable are dependent on the specific event being triggered .
13018	Configures this engine based on the options array passed into argv . If argv is None then sys . argv is used instead . During configuration the command line options are merged with previously stored values . Then the logging subsystem and the database model are initialized and all storable settings are serialized to configurations files .
13019	Alias for _assemble_with_columns
13020	Execute a query with provided parameters
13021	Handle provided columns and if necessary convert columns to a list for internal strage .
13022	Execute a DML query
13023	Execute a SELECT statement
13024	Retreive a single record from the table . Lots of reasons this might be best implemented in the model
13025	Creates the final payload based on the x86 and x64 meterpreters .
13026	Combines the files 1 and 2 into 3 .
13027	Runs the checker . py scripts to detect the os .
13028	Starts the exploiting phase you should run setup before running this function . if auto is set this function will fire the exploit to all systems . Otherwise a curses interface is shown .
13029	Exploits a single ip exploit is based on the given operating system .
13030	Create server instance with an optional WebSocket handler
13031	Poll active sockets once
13032	Start serving HTTP requests
13033	write triples into a translation file .
13034	write triples to file .
13035	Returns protobuf mapcontainer . Read from translation file .
13036	Returns map with entity or relations from plain text .
13037	Prints an overview of the tags of the hosts .
13038	Main credentials tool
13039	Provides an overview of the duplicate credentials .
13040	Register nemo and parses annotations
13041	Starts the loop to provide the data from jackal .
13042	Creates a search query based on the section of the config file .
13043	Creates the workers based on the given configfile to provide named pipes in the directory .
13044	Loads the config and handles the workers .
13045	Replace isocode by its language equivalent
13046	A function to construct a hierarchical dictionary representing the different citation layers of a text
13047	Take a string of form %citation_type|passage% and format it for human
13048	Annotation filtering filter
13049	Connect to a service to see if it is a http or https server .
13050	Retrieves services starts check_service in a gevent pool of 100 .
13051	Imports the given nmap result .
13052	Start an nmap process with the given args on the given ips .
13053	Scans the given hosts with nmap .
13054	Scans available smb services in the database for smb signing and ms17 - 010 .
13055	Function to create an overview of the services . Will print a list of ports found an the number of times the port was seen .
13056	Rename endpoint function name to avoid conflict when namespacing is set to true
13057	Retrieve the best matching locale using request headers
13058	Transform input according to potentially registered XSLT
13059	Request the api endpoint to retrieve information about the inventory
13060	Retrieve and transform a list of references .
13061	Retrieve the passage identified by the parameters
13062	Get siblings of a browsed subreference
13063	Generates a SEO friendly string for given collection
13064	Creates a CoINS Title string from information
13065	Build an ancestor or descendant dict view based on selected information
13066	Build member list for given collection
13067	Build parents list for given collection
13068	Retrieve the top collections of the inventory
13069	Collection content browsing route function
13070	Text exemplar references browsing route function
13071	Provides a redirect to the first passage of given objectId
13072	Retrieve the text of the passage
13073	Route for specific assets .
13074	Merge and register assets both as routes and dictionary
13075	Create blueprint and register rules
13076	Create a view
13077	Retrieve main parent collections of a repository
13078	This function is built to provide cache keys for templates
13079	Render a route template and adds information to this route .
13080	Register the app using Blueprint
13081	Register filters for Jinja to use
13082	Register plugins in Nemo instance
13083	Handle a list of references depending on the text identifier using the chunker dictionary .
13084	Obtains the data from the pipe and appends the given tag .
13085	Creates the section value if it does not exists and sets the value . Use write_config to actually set the value .
13086	This function tries to retrieve the value from the configfile otherwise will return a default .
13087	Returns the configuration directory
13088	Write the current config to disk to store them .
13089	Track the specified remote branch if it is not already tracked .
13090	Checkout update and branch from the specified branch .
13091	Returns the interface name of the first not link_local and not loopback interface .
13092	load_targets will load the services with smb signing disabled and if ldap is enabled the services with the ldap port open .
13093	write_targets will write the contents of ips and ldap_strings to the targets_file .
13094	Starts the ntlmrelayx . py and responder processes . Assumes you have these programs in your path .
13095	Function that gets called on each event from pyinotify .
13096	Watches directory for changes
13097	Terminate the processes .
13098	This function waits for the relay and responding processes to exit . Captures KeyboardInterrupt to shutdown these processes .
13099	Retrieve annotations from the query provider
13100	Make breadcrumbs for a route
13101	This function obtains hosts from core and starts a nessus scan on these hosts . The nessus tag is appended to the host tags .
13102	Retrieves the uuid of the given template name .
13103	Creates a scan with the given host ips Returns the scan id of the created object .
13104	Starts the scan identified by the scan_id . s
13105	Bases the comparison of the datastores on URI alone .
13106	Adds a tag to the list of tags and makes sure the result list contains only unique results .
13107	Removes a tag from this object
13108	Returns the result as a dictionary provide the include_meta flag to als show information like index and doctype .
13109	Route to retrieve annotations by target
13110	Returns the label for a given Enum key
13111	Returns the verbose name for a given enum value
13112	Returns the configured DNS servers with the use f nmcli .
13113	Tries to perform a zone transfer .
13114	Resolves the list of domains and returns the ips .
13115	Parses the list of ips turns these into ranges based on the netmask given . Set include_public to True to include public IP adresses .
13116	Creates a connection based upon the given configuration object .
13117	Searches the elasticsearch instance to retrieve the requested documents .
13118	Uses the command line arguments to fill the search function and call it .
13119	Returns the number of results after filtering with the given arguments .
13120	Uses the command line arguments to fill the count function and call it .
13121	Returns a generator that maps the input of the pipe to an elasticsearch object . Will call id_to_object if it cannot serialize the data from json .
13122	Resolves an ip adres to a range object creating it if it doesn t exists .
13123	Argparser option with search functionality specific for ranges .
13124	Searches elasticsearch for objects with the same address protocol port and state .
13125	Resolves the given id to a user object if it doesn t exists it will be created .
13126	Retrieves the domains of the users from elastic .
13127	Returns a list that maps the input of the pipe to an elasticsearch object . Will call id_to_object if it cannot serialize the data from json .
13128	Consumes an ET protocol tree and converts it to state . Command commands
13129	Initializes the indices
13130	Parse the entry into a computer object .
13131	Parse the file and extract the computers import the computers that resolve into jackal .
13132	Parses a single entry from the domaindump
13133	Parses the domain users and groups files .
13134	Parses ldapdomaindump files and stores hosts and users in elasticsearch .
13135	Make an autocomplete API request
13136	Make an API request
13137	Try to convert a string to unicode using different encodings
13138	Handle HTTP GET requests on an authentication endpoint .
13139	Method to call to get a serializable object for json . dump or jsonify based on the target
13140	Read the contents of the Annotation Resource
13141	index all triples into indexes and return their mappings
13142	recover triples from mapping .
13143	Transform triple index into a 1 - D numpy array .
13144	Packs a list of triple indexes into a 2D numpy array .
13145	If entity pairs in a relation is as close as another relations only keep one relation of such set .
13146	Remove direct links in the training sets .
13147	Uses a union find to find segment .
13148	Create a usable data structure for serializing .
13149	Logs an operation done on an entity possibly with other arguments
13150	Logs a new state of an entity
13151	Logs an update done on an entity
13152	Logs an error
13153	Decorator that provides a dictionary cursor to the calling function
13154	Decorator that provides a cursor to the calling function
13155	Decorator that provides a namedtuple cursor to the calling function
13156	Provides a transacted cursor which will run in autocommit = false mode
13157	gives the number of records in the table
13158	Creates an insert statement with only chosen fields
13159	Creates an update query with only chosen fields Supports only a single field where clause
13160	Creates a delete query with where keys Supports multiple where clause with and or or both
13161	Creates a select query for selective columns with where keys Supports multiple where claus with and or or both
13162	Run a raw sql query
13163	This method is used to append content of the text argument to the out argument .
13164	This function should return unicode representation of the value
13165	Helper function to traverse an element tree rooted at element yielding nodes matching the query .
13166	Given a simplified XPath query string returns an array of normalized query parts .
13167	Inserts a new element as a child of this element before the specified index or sibling .
13168	A generator yielding children of this node .
13169	Helper function to determine if this node matches the given predicate .
13170	Returns a canonical path to this element relative to the root node .
13171	Recursively find any descendants of this node with the given tag name . If a tag name is omitted this will yield every descendant node .
13172	Returns the last child of this node .
13173	Yields all parents of this element back to the root element .
13174	Returns the next sibling of this node .
13175	Returns the previous sibling of this node .
13176	Parses the HTML table into a list of dictionaries each of which represents a single observation .
13177	Calculates cache key based on args and kwargs . args and kwargs must be instances of hashable types .
13178	Cache result of function execution into the django cache backend . Calculate cache key based on prefix args and kwargs of the function . For using like object method set method = True .
13179	Wrapper around Django s ORM get functionality . Wrap anything that raises ObjectDoesNotExist exception and provide the default value if necessary . default by default is None . default can be any callable if it is callable it will be called when ObjectDoesNotExist exception will be raised .
13180	Turn column inputs from user into list of simple numbers .
13181	Return only the part of the row which should be printed .
13182	Writes a single observation to the output file .
13183	Takes a dictionary of observation data and converts it to a list of fields according to AAVSO visual format specification .
13184	Converts a raw input record to a dictionary of observation data .
13185	Get the name of the view function used to prevent having to set the tag manually for every endpoint
13186	Downloads all variable star observations by a given observer .
13187	Generates likely unique image path using md5 hashes
13188	Extract transform and load metadata from Lander - based projects .
13189	Upsert the technote resource into the projectmeta MongoDB collection .
13190	Converts a Open511 JSON document to XML .
13191	Converts a Open511 JSON fragment to XML .
13192	Given a dict deserialized from a GeoJSON object returns an lxml Element of the corresponding GML geometry .
13193	Transform a GEOS or OGR geometry object into an lxml Element for the GML geometry .
13194	Delete latex comments from TeX source .
13195	r Replace macros in the TeX source with their content .
13196	Ensures that the provided document is an lxml Element or json dict .
13197	Convert an Open511 document between formats . input_doc - either an lxml open511 Element or a deserialized JSON dict output_format - short string name of a valid output format as listed above
13198	Construct an LsstLatexDoc instance by reading and parsing the LaTeX source .
13199	Get the document content in the specified markup format .
13200	Get the document title in the specified markup format .
13201	Get the document short title in the specified markup format .
13202	Get the document abstract in the specified markup format .
13203	Get the document authors in the specified markup format .
13204	Parse documentclass options .
13205	Parse the title from TeX source .
13206	Parse the document handle .
13207	r Parse the author from TeX source .
13208	Parse the abstract from the TeX source .
13209	Process a LaTeX snippet of content for better transformation with pandoc .
13210	r Load the BibTeX bibliography referenced by the document .
13211	r Parse the \ date command falling back to getting the most recent Git commit date and the current datetime .
13212	Create a JSON - LD representation of this LSST LaTeX document .
13213	Renames an existing database .
13214	Returns True if database server is running False otherwise .
13215	Saves the state of a database to a file .
13216	Loads state of a backup file to a database .
13217	Provides a connection string for database .
13218	Provides a connection string for database as a sqlalchemy compatible URL .
13219	Connects the database client shell to the database .
13220	Returns settings from the server .
13221	Say something in the morning
13222	Say something in the afternoon
13223	Say something in the evening
13224	Command line entrypoint to reduce technote metadata .
13225	Run a pipeline to process extract transform and load metadata for multiple LSST the Docs - hosted projects
13226	Ingest any kind of LSST document hosted on LSST the Docs from its source .
13227	Allows a decorator to be called with or without keyword arguments .
13228	Create a GitHub token for an integration installation .
13229	Create a JSON Web Token to authenticate a GitHub Integration or installation .
13230	r Get all macro definitions from TeX source supporting multiple declaration patterns .
13231	r Get all \ def macro definition from TeX source .
13232	r Get all \ newcommand macro definition from TeX source .
13233	Try to load and return a module
13234	Makes a naive datetime . datetime in a given time zone aware .
13235	Makes an aware datetime . datetime naive in a given time zone .
13236	Converts a datetime to the timezone of this Schedule .
13237	Returns the next Period this event is in effect or None if the event has no remaining periods .
13238	Returns an iterator of Period tuples for every day this event is in effect between range_start and range_end .
13239	Returns an iterator of Period tuples for continuous stretches of time during which this event is in effect between range_start and range_end .
13240	Does this schedule include the provided time? query_date and query_time are date and time objects interpreted in this schedule s timezone
13241	Returns an iterator of Period tuples for every day this schedule is in effect between range_start and range_end .
13242	A Period tuple representing the daily start and end time .
13243	A set of integers representing the weekdays the schedule recurs on with Monday = 0 and Sunday = 6 .
13244	A context manager that creates a temporary database .
13245	Asynchronously request a URL and get the encoded text content of the body .
13246	Asynchronously download a set of lsst - texmf BibTeX bibliographies from GitHub .
13247	Get content of lsst - texmf bibliographies .
13248	Make a pybtex BibliographyData instance from standard lsst - texmf bibliography files and user - supplied bibtex content .
13249	Get a usable URL from a pybtex entry .
13250	Get and format author - year text from a pybtex entry to emulate natbib citations .
13251	Extract transform and load Sphinx - based technote metadata .
13252	Reduce a technote project s metadata from multiple sources into a single JSON - LD resource .
13253	Download the metadata . yaml file from a technote s GitHub repository .
13254	Return the timezone . If none is set use system timezone
13255	Convert any timestamp into a datetime and save as _time
13256	Return a dict that represents the DayOneEntry
13257	Saves a DayOneEntry as a plist
13258	Create and return full file path for DayOne entry
13259	Combine many files into a single file on disk . Defaults to using the time dimension .
13260	The entry point for a yaz script
13261	Returns a tree of Task instances
13262	Declare a function or method to be a Yaz task
13263	Returns a list of parameters
13264	Returns the configuration for KEY
13265	Returns an instance of a fully initialized plugin class
13266	Convert an Open511 XML document or document fragment to JSON .
13267	Given an lxml Element of a GML geometry returns a dict in GeoJSON format .
13268	Translates a deprecated GML 2 . 0 geometry to GeoJSON
13269	Panflute filter function that converts content wrapped in a Para to Plain .
13270	Recursively generate of all the subclasses of class cls .
13271	List unique elements preserving order . Remember only the element just seen .
13272	Returns a masked array with anything outside of values masked . The minv and maxv parameters take precendence over any dict values . The valid_range attribute takes precendence over the valid_min and valid_max attributes .
13273	If input object is an ndarray it will be converted into a list
13274	If input object is an ndarray it will be converted into a dict holding dtype shape and the data base64 encoded .
13275	leftSibling previousSibling leftSib prevSib lsib psib have the same parent and on the left
13276	rightSibling nextSibling rightSib nextSib rsib nsib have the same parent and on the right
13277	leftCousin previousCousin leftCin prevCin lcin pcin parents are neighbors and on the left
13278	rightCousin nextCousin rightCin nextCin rcin ncin parents are neighbors and on the right
13279	_creat_child_desc update depth parent_breadth_path parent_path sib_seq path lsib_path rsib_path lcin_path rcin_path
13280	_upgrade_breadth_info update breadth breadth_path and add desc to desc_level
13281	Parse command content from the LaTeX source .
13282	Parse a single command .
13283	r Attempt to parse a single token on the first line of this source .
13284	Returns a list of TMDDEventConverter elements .
13285	Mostly ripped from nc3tonc4 in netCDF4 - python . Added ability to skip dimension and variables . Removed all of the unpacking logic for shorts .
13286	Returns a Pandas DataFrame of the data . This always returns positive down depths
13287	Load a pre - made query .
13288	Obtain the timestamp for the most recent commit to a given file in a Git repository .
13289	Get the datetime for the most recent commit to a project that affected certain types of content .
13290	Iterative over relative filepaths of files in a directory and sub - directories with the given extension .
13291	Returns variables that match specific conditions .
13292	vfuncs can be any callable that accepts a single argument the Variable object and returns a dictionary of new attributes to set . These will overwrite existing attributes
13293	Decorate a function that uses pypandoc to ensure that pandoc is installed if necessary .
13294	Convert text from one markup format to another using pandoc .
13295	Convert lsstdoc - class LaTeX to another markup format .
13296	Decode a JSON - LD dataset including decoding datetime strings into datetime . datetime objects .
13297	Encode values as JSON strings .
13298	Get all git repositories within this environment
13299	Install a python package using pip
13300	Update a python package using pip
13301	Returns the nb quantiles for datas in a dataframe
13302	Returns the root mean square error betwwen a and b
13303	Returns the normalized mean square error of a and b
13304	Returns the mean fractionalized bias error
13305	Returns the factor of exceedance
13306	Computes the correlation between a and b says the Pearson s correlation coefficient R
13307	Geometric mean bias
13308	Geometric mean variance
13309	Figure of merit in time
13310	Performs several stats on a against b typically a is the predictions array and b the observations array
13311	Path to environments site - packages
13312	Prior to activating store everything necessary to deactivate this environment .
13313	Do some serious mangling to the current python environment ... This is necessary to activate an environment via python .
13314	Remove this environment
13315	Command used to launch this application module
13316	Create a virtual environment . You can pass either the name of a new environment to create in your CPENV_HOME directory OR specify a full path to create an environment outisde your CPENV_HOME .
13317	Remove an environment or module
13318	Activates and launches a module
13319	Deactivates an environment by restoring all env vars to a clean state stored prior to activating environments
13320	Returns a list of available modules .
13321	Add a module to CPENV_ACTIVE_MODULES environment variable
13322	Remove a module from CPENV_ACTIVE_MODULES environment variable
13323	Format a list of environments and modules for terminal output
13324	Show context info
13325	Activate an environment
13326	Create a new environment .
13327	Remove an environment
13328	Add an environment to the cache . Allows you to activate the environment by name instead of by full path
13329	Remove a cached environment . Removed paths will no longer be able to be activated by name
13330	Create a new template module .
13331	Add a module to an environment . PATH can be a git repository path or a filesystem path .
13332	Copy a global module to the active environment .
13333	Resolves VirtualEnvironments with a relative or absolute path
13334	Resolves VirtualEnvironments in CPENV_HOME
13335	Resolves VirtualEnvironments in EnvironmentCache
13336	Resolves module in previously resolved environment .
13337	Resolves modules in currently active environment .
13338	Resolves environment from . cpenv file ... recursively walks up the tree in attempt to find a . cpenv file
13339	Returns a view of the array with axes transposed .
13340	Roll the specified axis backwards until it lies in a given position .
13341	Insert a new axis corresponding to a given position in the array shape
13342	Join a sequence of arrays together . Will aim to join ndarray RemoteArray and DistArray without moving their data if they happen to be on different engines .
13343	Return the shape that would result from broadcasting the inputs
13344	Compute the arithmetic mean along the specified axis .
13345	ax is a valid candidate for a distributed axis if the given subarray shapes are all the same when ignoring axis ax
13346	Returns True if successful False if failure
13347	Return a command to launch a subshell
13348	Generate a prompt with a given prefix
13349	Launch a subshell
13350	Append a file to file repository .
13351	Append files to file repository . ModificationMonitor can append files to repository using this . Please put the list of file names to filelist argument .
13352	Run file modification monitor .
13353	Decorator that invokes add_status_job .
13354	Page through text by feeding it to another program . Invoking a pager through this might support colors .
13355	Calcul du profil annuel
13356	Attempt to run a global hook by name with args
13357	Calcule de moyennes glissantes
13358	Calcul de l AOT40 du 1er mai au 31 juillet
13359	Validate all the entries in the environment cache .
13360	Load the environment cache from disk .
13361	Save the environment cache to disk .
13362	Prompts a user for input . This is a convenience function that can be used to prompt a user for input later .
13363	This function takes a text and shows it via an environment specific pager on stdout .
13364	Prepare all iPython engines for distributed object processing .
13365	Retrieve objects that have been distributed making them local again
13366	Apply a function in parallel to each element of the input
13367	Configure engines so that remote methods returning values of type real_type will instead return by proxy as type proxy_type
13368	Returns True if path is a git repository .
13369	Returns True if path is in CPENV_HOME
13370	Returns True if path contains a . cpenv file
13371	Get environment path from redirect file
13372	Returns an absolute expanded path
13373	Like os . path . join but also expands and normalizes path parts .
13374	Like os . path . join but acts relative to this packages bin path .
13375	Like os . makedirs but keeps quiet if path already exists
13376	Walk down a directory tree . Same as os . walk but allows for a depth limit via depth argument
13377	Walk up a directory tree
13378	Preprocess a dict to be used as environment variables .
13379	Add a sequence value to env dict
13380	Join a bunch of dicts
13381	Convert a dict containing environment variables into a standard dict . Variables containing multiple values will be split into a list based on the argument passed to pathsep .
13382	Convert a python dict to a dict containing valid environment variable values .
13383	Expand all environment variables in an environment dict
13384	Returns an unused random filepath .
13385	Encode current environment as yaml and store in path or a temporary file . Return the path to the stored environment .
13386	Returns the URL to the upstream data source for the given URI based on configuration
13387	Return request object for calling the upstream
13388	Returns time to live in seconds . 0 means no caching .
13389	Guarantee the existence of a basic MANIFEST . in .
13390	Format a pathname
13391	Format a UUID string
13392	attempts to get next and previous on updates
13393	Notify the client of the result of handling a request
13394	Retrieves the setting value whose name is indicated by name_hyphen .
13395	This method does the work of updating settings . Can be passed with enforce_helpstring = False which you may want if allowing end users to add arbitrary metadata via the settings system .
13396	Return a combined dictionary of setting values and attribute values .
13397	Detect if we get a class or a name convert a name to a class .
13398	Asserts that the class has a docstring returning it if successful .
13399	Get absolute path to resource works for dev and for PyInstaller
13400	Add new block of logbook selection windows . Only 5 allowed .
13401	Remove logbook menu set .
13402	Return selected log books by type .
13403	Verify enetered user name is on accepted MCC logbook list .
13404	Parse xml elements for pretty printing
13405	Convert supplied QPixmap object to image file .
13406	Process user inputs and subit logbook entry when user clicks Submit button
13407	Process log information and push to selected logbooks .
13408	Create graphical objects for menus .
13409	Display menus and connect even signals .
13410	Add or change list of logbooks .
13411	Remove unwanted logbooks from list .
13412	Populate log program list to correspond with log type selection .
13413	Add menus to parent gui .
13414	Iteratively remove graphical objects from layout .
13415	Adds labels to a plot .
13416	Determine the URL corresponding to Python object
13417	Update the database with model schema . Shorthand for paver manage syncdb .
13418	Run the dev server .
13419	Run South s schemamigration command .
13420	This static method validates a BioMapMapper definition . It returns None on success and throws an exception otherwise .
13421	The main method of this class and the essence of the package . It allows to map stuff .
13422	Returns all data entries for a particular key . Default is the main key .
13423	Returns list of strings split by input delimeter
13424	Get Existing Message
13425	Creates a message
13426	Modify an existing message .
13427	Delete existing messages .
13428	Returns site data .
13429	Returns a list of sites .
13430	Creates a site
13431	Returns a link to a view that moves the passed in object up in rank .
13432	Returns a link to a view that moves the passed in object down in rank .
13433	Shows a figure with a typical orientation so that x and y axes are set up as expected .
13434	Shifts indicies as needed to account for one based indexing
13435	Returns selected positions from cut input source in desired arrangement .
13436	Processes positions to account for ranges
13437	Performs cut for range from start position to end
13438	Creates list of values in a range with output delimiters .
13439	Locks the file by writing a . lock file . Returns True when the file is locked and False when the file was locked already
13440	Unlocks the file by remove a . lock file . Returns True when the file is unlocked and False when the file was unlocked already
13441	Initiate the local catalog and push it the cloud
13442	Initiate the local catalog by downloading the cloud catalog
13443	Return nodes in the path between a and b going from parent to child NOT including a
13444	Index of the last occurrence of x in the sequence .
13445	Create and save an admin user .
13446	Returns a list of the messages from the django MessageMiddleware package contained within the given response . This is to be used during unit testing when trying to see if a message was set properly in a view .
13447	Authenticates the superuser account via the web login .
13448	Does a django test client get against the given url after logging in the admin first .
13449	Does a django test client post against the given url after logging in the admin first .
13450	Returns the value displayed in the column on the web interface for a given instance .
13451	Highest value of input image .
13452	Lowest value of input image .
13453	spawns a greenlet that does not print exceptions to the screen . if you use this function you MUST use this module s join or joinall otherwise the exception will be lost
13454	Returns usage string with no trailing whitespace .
13455	Setup argparser to process arguments and generate help
13456	Opens connection to S3 returning bucket and key
13457	Upload a local file to S3 .
13458	Download a remote file from S3 .
13459	Creates an ical . ics file for an event using python - card - me .
13460	Returns a list view of all comments for a given event . Combines event comments and update comments in one list .
13461	Returns a list view of updates for a given event . If the event is over it will be in chronological order . If the event is upcoming or still going it will be in reverse chronological order .
13462	Displays list of videos for given event .
13463	Public form to add an event .
13464	Adds a memory to an event .
13465	Inserts Interpreter Library of imports into sketch in a very non - consensual way
13466	Sets the beam moments directly .
13467	Sets the beam moments indirectly using Courant - Snyder parameters .
13468	Given a slice object return appropriate values for use in the range function
13469	Helper to add error to messages field . It fills placeholder with extra call parameters or values from message_value map .
13470	File copy that support compress and decompress of zip files
13471	Apply to the catalog the changesets in the metafile list changesets
13472	Validate that an event with this name on this date does not exist .
13473	When entering the context spawns a greenlet that sleeps for interval seconds between callback executions . When leaving the context stops the greenlet . The yielded object is the GeventLoop object so the loop can be stopped from within the context .
13474	Main loop - used internally .
13475	Starts the loop . Calling a running loop is an error .
13476	Kills the running loop and waits till it gets killed .
13477	Used to plot a set of coordinates .
13478	Fix common spacing errors caused by LaTeX s habit of using an inter - sentence space after any full stop .
13479	Transform hyphens to various kinds of dashes
13480	Replace target with replacement
13481	Regex substitute target with replacement
13482	Call the Sphinx Makefile with the specified targets .
13483	Upload the docs to a remote location via rsync .
13484	Push Sphinx docs to github_ gh - pages branch .
13485	Open your web browser and display the generated html documentation .
13486	Tries to minimize the length of CSS code passed as parameter . Returns string .
13487	Return an open file - object to the index file
13488	Create the tasks on the server
13489	Update existing tasks on the server
13490	Reconcile this collection with the server .
13491	Prompts the user for yes or no .
13492	Prompts the user with custom options .
13493	Reading the configure file and adds non - existing attributes to args
13494	Writing the configure file with the attributes in args
13495	Create a new instance of a game . Note a mode MUST be provided and MUST be of type GameMode .
13496	Bumps the Version given a target
13497	Returns a copy of this object
13498	Returns a Tag with a given revision
13499	Parses a string into a Tag
13500	Tiles open figures .
13501	When a Comment is added updates the Update to set last_updated time
13502	Adds useful global items to the context for use in templates .
13503	Create the challenge on the server
13504	Update existing challenge on the server
13505	Check if a challenge exists on the server
13506	Returns position data .
13507	Returns a list of positions .
13508	Creates a position
13509	Print Source Lines of Code and export to file .
13510	passive check of python programs by pyflakes .
13511	Handle HTTP exception
13512	Returns True if the value given is a valid CSS colour i . e . matches one of the regular expressions in the module or is in the list of predetefined values by the browser .
13513	Reynold number utility function that return Reynold number for vehicle at specific length and speed . Optionally it can also take account of temperature effect of sea water .
13514	Froude number utility function that return Froude number for vehicle at specific length and speed .
13515	Residual resistance coefficient estimation from slenderness function prismatic coefficient and Froude number .
13516	Assign values for the main dimension of a ship .
13517	Return resistance of the vehicle .
13518	Return the maximum deck area of the ship
13519	Total propulsion power of the ship .
13520	Configure the api to use given url and token or to get them from the Config .
13521	Send zipfile to TMC for given exercise
13522	Ensures that the request url is valid . Sometimes we have URLs that the server gives that are preformatted sometimes we need to form our own .
13523	Extract json from a response . Assumes response is valid otherwise . Internal use only .
13524	Wrapper for gevent . joinall if the greenlet that waits for the joins is killed it kills all the greenlets it joins for .
13525	Creates an error from the given code and args and kwargs .
13526	Creates an error Acknowledgement message . The message s code and message are taken from this exception .
13527	Clean up extra files littering the source tree .
13528	print paver options .
13529	\ Parses a binary protobuf message into a Message object .
13530	Creates a new Node based on the extending class and adds it as a child to this Node .
13531	Returns a list of the ancestors of this node .
13532	Returns a list of the ancestors of this node but does not pass the root node even if the root has parents due to cycles .
13533	Returns a list of descendents of this node .
13534	Returns True if it is legal to remove this node and still leave the graph as a single connected entity not splitting it into a forest . Only nodes with no children or those who cause a cycle can be deleted .
13535	Removes the node and all descendents without looping back past the root . Note this does not remove the associated data objects .
13536	Returns a list of nodes that would be removed if prune were called on this element .
13537	Called to verify that the given rule can become a child of the current node .
13538	Returns location data .
13539	Returns a list of locations .
13540	The reduced chi - square of the linear least squares
13541	Create the task on the server
13542	Update existing task on the server
13543	Retrieve a task from the server
13544	Formats a string with color
13545	Returns user profile data .
13546	Returns a list of users .
13547	Attempt to set the virtualenv activate command if it hasn t been specified .
13548	Recursively update the destination dict - like object with the source dict - like object .
13549	Send the given arguments to pip install .
13550	When I Work GET method . Return representation of the requested resource .
13551	When I Work PUT method .
13552	When I Work POST method .
13553	When I Work DELETE method .
13554	Creates a shift
13555	Delete existing shifts .
13556	Returns combined list of event and update comments .
13557	Returns chained list of event and update images .
13558	Gets count of all images from both event and updates .
13559	Gets images and videos to populate top assets .
13560	Decorated methods progress will be displayed to the user as a spinner . Mostly for slower functions that do some network IO .
13561	Launches a new menu . Wraps curses nicely so exceptions won t screw with the terminal too much .
13562	Overridden method that handles that re - ranking of objects and the integrity of the rank field .
13563	Removes any blank ranks in the order .
13564	Returns the field names of a Django model object .
13565	Register all HTTP error code error handlers
13566	Plots but automatically resizes x axis .
13567	Create a vector of values over an interval with a specified step size .
13568	Passes the selected course as the first argument to func .
13569	Passes the selected exercise as the first argument to func .
13570	If func returns False the program exits immediately .
13571	Configure tmc . py to use your account .
13572	Download the exercises from the server .
13573	Go to the next exercise .
13574	Spawns a process with command path - of - exercise
13575	Select a course or an exercise .
13576	Submit the selected exercise to the server .
13577	Sends the selected exercise to the TMC pastebin .
13578	Update the data of courses and or exercises from server .
13579	Determine the type of x
13580	map for a directory
13581	Apply the types on the elements of the line
13582	Convert a file to a . csv file
13583	Returns a link to the django admin change list with a filter set to only the object given .
13584	Returns string representation of an object either the default or based on the display template passed in .
13585	Adds a list_display attribute that appears as a link to the django admin change page for the type of object being shown . Supports double underscore attribute name dereferencing .
13586	Adds a list_display attribute showing an object . Supports double underscore attribute name dereferencing .
13587	Adds a list_display attribute showing a field in the object using a python %formatted string .
13588	View decorator that enforces that the method was called using POST . This decorator can be called with or without parameters . As it is expected to wrap a view the first argument of the method being wrapped is expected to be a request object .
13589	View decorator that enforces that the method was called using POST and contains a field containing a JSON dictionary . This method should only be used to wrap views and assumes the first argument of the method being wrapped is a request object .
13590	Divergence of matched beam
13591	The plasma density in SI units .
13592	Semver tag triggered deployment helper
13593	Performs some environment checks prior to the program s execution
13594	Prints latest tag s information
13595	Prompts user before proceeding
13596	Gets an array from datasets .
13597	Get the current directory state
13598	Add one tick to progress bar
13599	Push k to the top of the list
13600	Call this method to increment the named counter . This is atomic on the database .
13601	print loading message on screen
13602	print warn type message if file handle is sys . stdout print color message
13603	print error type message if file handle is sys . stderr print color message
13604	a built - in wrapper make dry - run easier . you should use this instead use os . system
13605	Returns a Corrected URL to be used for a Request as per the REST API .
13606	Main method .
13607	Pickle and compress .
13608	Decompress and unpickle .
13609	Displays the contact form and sends the email
13610	try use gitconfig info . author email etc .
13611	Init project .
13612	In general you don t need to overwrite this method .
13613	Return a new filename to use as the combined file name for a bunch of files based on the SHA of their contents . A precondition is that they all have the same file extension
13614	Extract the oritentation EXIF tag from the image which should be a PIL Image instance and if there is an orientation tag that would rotate the image apply that rotation to the Image instance given to do an in - place rotation .
13615	Start a new piece
13616	Start a new site .
13617	Publish the site
13618	Returns a list of the branches
13619	Returns the currently active branch
13620	Create a patch between tags
13621	Create a callable that applies func to a value in a sequence .
13622	Create a callable that applies func to every value in a sequence .
13623	Parse a value as text .
13624	Parse a value as an integer .
13625	Parse a value as a boolean .
13626	Parse a value as a delimited list .
13627	Parse a value as a POSIX timestamp in seconds .
13628	Parse query parameters .
13629	Put metrics to cloudwatch . Metric shoult be instance or list of instances of CloudWatchMetric
13630	Render a given resource .
13631	Adapt a result to IResource .
13632	Handle the result from IResource . render .
13633	Negotiate a handler based on the content types acceptable to the client .
13634	Parse and sort an Accept header .
13635	Split an HTTP header whose components are separated with commas .
13636	Extract an encoding from a Content - Type header .
13637	Create a nil - safe callable decorator .
13638	Get or set Settings . _wrapped
13639	bind user variable to _wrapped
13640	Get the version from version module without importing more than necessary .
13641	send a transaction immediately . Failed transactions are picked up by the TxBroadcaster
13642	check if a tx is confirmed else resend it .
13643	Get sub - command list
13644	Add class options to argparser options .
13645	parser cliez app
13646	Convert Hump style to underscore
13647	Fetches fuel prices for all stations .
13648	Gets the fuel prices for a specific fuel station .
13649	Gets all the fuel prices within the specified radius .
13650	Gets the fuel price trends for the given location and fuel types .
13651	Fetches API reference data .
13652	Called before template is applied .
13653	Match a route parameter .
13654	Match an integer route parameter .
13655	Match a request path against our path components .
13656	Decorate a router - producing callable to instead produce a resource .
13657	Create a new Router instance with it s own set of routes for obj .
13658	Add a route handler and matcher to the collection of possible routes .
13659	See txspinneret . route . route .
13660	See txspinneret . route . subroute .
13661	Create a NamedTemporaryFile instance to be passed to atomic_writer
13662	Open a NamedTemoraryFile handle in a context manager
13663	Read entry from JSON file
13664	Save entry to JSON file
13665	Update entry by UUID in the JSON file
13666	Get the number of the shell command .
13667	Execute a shell command .
13668	Simple program that creates an temp S3 link .
13669	Poll self . stdout and return True if it is readable .
13670	Retrieve a list of characters and escape codes where each escape code uses only one index . The indexes will not match up with the indexes in the original string .
13671	Strip all color codes from a string . Returns empty string for falsey inputs .
13672	Called when builder group collect files Resolves absolute url if relative passed
13673	Add single file or list of files to bundle
13674	Add directory or directories list to bundle
13675	Add custom path objects
13676	Add prepare handler to bundle
13677	Called when builder run collect files in builder group
13678	Get the number of files in the folder .
13679	Register the contents as JSON
13680	Translate the data with the translation table
13681	Get the data in JSON form
13682	Get the data as JSON tuples
13683	Issues a GET request against the API properly formatting the params
13684	Issues a POST request against the API allows for multipart data uploads
13685	Go through the env var map transferring the values to this object as attributes .
13686	Create a temporary directory with input data for the test . The directory contents is copied from a directory with the same name as the module located in the same directory of the test module .
13687	Compare two files contents . If the files differ show the diff and write a nice HTML diff file into the data directory .
13688	Returns a nice side - by - side diff of the given files as a string .
13689	Add a peer or multiple peers to the PEERS variable takes a single string or a list .
13690	remove one or multiple peers from PEERS variable
13691	check the status of the network and the peers
13692	broadcasts a transaction to the peerslist using ark - js library
13693	Exposes a given service to this API .
13694	Main entry point expects doctopt arg dict as argd .
13695	Print a message only if DEBUG is truthy .
13696	Parse a string as an integer . Exit with a message on failure .
13697	If s is a file name read the file and return it s content . Otherwise return the original string . Returns None if the file was opened but errored during reading .
13698	Wait for response until timeout . If timeout is specified to None self . timeout is used .
13699	If the file - object is not seekable return ArchiveTemp of the fileobject otherwise return the file - object itself
13700	Setup before_request after_request handlers for tracing .
13701	Records the starting time of this reqeust .
13702	Calculates the request duration and adds a transaction ID to the header .
13703	Insert spaces between words until it is wide enough for width .
13704	Prepend or append text to lines . Yields each line .
13705	Format block by splitting on individual characters .
13706	Format block by wrapping on spaces .
13707	Remove spaces in between words until it is small enough for width . This will always leave at least one space between words so it may not be able to get below width characters .
13708	Check IP trough the httpBL API
13709	Check if IP is a threat
13710	Check if IP is suspicious
13711	Invalidate httpBL cache for IP address
13712	Invalidate httpBL cache
13713	Runs the consumer .
13714	Upload the next batch of items return whether successful .
13715	Return the next batch of items to upload .
13716	Get a single item from the queue .
13717	Attempt to upload the batch and retry before raising an error
13718	Translate camelCase into underscore format .
13719	Creates the Trello endpoint tree .
13720	Prints the complete YAML .
13721	Connect by wmi and run wql .
13722	Wrapper for the other log methods decide which one based on the URL parameter .
13723	Write to a local log file
13724	Write to a remote host via HTTP POST
13725	Helper method to store username and password
13726	Set connection parameters . Call set_connection with no arguments to clear .
13727	Set delegate parameters . Call set_delegate with no arguments to clear .
13728	Takes a single address and returns the current balance .
13729	returns a list of named tuples x . timestamp x . amount including block rewards
13730	Massages the true and false strings to bool equivalents .
13731	If the value is None fail validation .
13732	Make sure the value evaluates to boolean True .
13733	Convert an evar value into a Python logging level constant .
13734	Register a new range type as a PostgreSQL range .
13735	Acquires the correct error for a given response .
13736	Converts the request parameters to Python .
13737	Extracts ORB context information from the request .
13738	Handles real - time updates to the order book .
13739	Used exclusively as a thread which keeps the WebSocket alive .
13740	Connects and subscribes to the WebSocket Feed .
13741	Marks a view function as being exempt from the cached httpbl view protection .
13742	Hook point for overriding how the CounterPool gets its connection to AWS .
13743	Hook point for overriding how the CounterPool determines the schema to be used when creating a missing table .
13744	Hook point for overriding how the CounterPool creates a new table in DynamooDB
13745	Hook point for overriding how the CounterPool transforms table_name into a boto DynamoDB Table object .
13746	Hook point for overriding how the CouterPool creates a DynamoDB item for a given counter when an existing item can t be found .
13747	Hook point for overriding how the CouterPool fetches a DynamoDB item for a given counter .
13748	Gets the DynamoDB item behind a counter and ties it to a Counter instace .
13749	Use an event to build a many - to - one relationship on a class .
13750	Use an event to build a one - to - many relationship on a class .
13751	Djeffify data between tags
13752	Create a foreign key reference from the local class to the given remote table .
13753	Path join helper method Join paths if list passed
13754	Read helper method
13755	Write helper method
13756	Copy file helper method
13757	Split file name and extension
13758	Helper method for absolute and relative paths resolution Split passed path and return each directory parts
13759	Creates fully qualified endpoint URIs .
13760	Makes sure we have proper ISO 8601 time .
13761	Returns the given response or raises an APIError for non - 2xx responses .
13762	Checks if a next message is possible .
13763	Colors text with code and given format
13764	Registers the given message type in the local database .
13765	Insert object before index .
13766	Parse runtime path representation to list .
13767	Add some bundle to build group
13768	Return collected files links
13769	Asset minifier Uses default minifier in bundle if it s not defined
13770	Render all includes in asset by names
13771	Return links without build files
13772	Coerce everything to strings . All objects representing time get output according to default_date_fmt .
13773	Initialize the zlogger .
13774	formats a logging . Record into a standard json log entry
13775	Initialize the model for a Pyramid app .
13776	Return absolute and relative path for file
13777	Adds an EnumDescriptor to the pool .
13778	Gets the FileDescriptor for the file containing the specified symbol .
13779	Loads the named descriptor from the pool .
13780	Loads the named enum descriptor from the pool .
13781	Loads the named extension descriptor from the pool .
13782	Make a protobuf EnumDescriptor given an EnumDescriptorProto protobuf .
13783	Creates a field descriptor from a FieldDescriptorProto .
13784	Get a sqlalchemy . orm . Session instance backed by a transaction .
13785	Generate a random string of the specified length .
13786	Require that the named field has the right data_type
13787	Forces a flush from the internal queue to the server
13788	Use all decompressor possible to make the stream
13789	Manage a Marv site
13790	Returns a decoder for a MessageSet item .
13791	Flask like implementation of getting the applicaiton name via the filename of the including file
13792	Given a Python function name return the function it refers to .
13793	Add a function to the function list in order .
13794	Return the mapping of a document according to the function list .
13795	Reduce several mapped documents by several reduction functions .
13796	Re - reduce a set of values with a list of rereduction functions .
13797	Validate ... this function is undocumented but still in CouchDB .
13798	The main function called to handle a request .
13799	Log an event on the CouchDB server .
13800	Generates a universally unique ID . Any arguments only create more randomness .
13801	revoke_token removes the access token from the data_store
13802	_auth - internal method to ensure the client_id and client_secret passed with the nonce match
13803	_validate_request_code - internal method for verifying the the given nonce . also removes the nonce from the data_store as they are intended for one - time use .
13804	_generate_token - internal function for generating randomized alphanumberic strings of a given length
13805	Merge multiple ordered so that within - ordered order is preserved
13806	Helps us validate the parameters for the request
13807	Get current datetime for every file .
13808	run your main spider here as for branch spider result data you can return everything or do whatever with it in your own code
13809	Read version info from a file without importing it
13810	Make a protobuf Descriptor given a DescriptorProto protobuf .
13811	Returns the root if this is a nested type or itself if its the root .
13812	Searches for the specified method and returns its descriptor .
13813	Converts protobuf message to JSON format .
13814	Converts message to an object according to Proto3 JSON Specification .
13815	Converts Struct message according to Proto3 JSON Specification .
13816	Parses a JSON representation of a protocol message into a message .
13817	Convert field value pairs into regular message .
13818	Convert a JSON object into a message .
13819	Convert a JSON representation into Value message .
13820	Convert a JSON representation into ListValue message .
13821	Convert a JSON representation into Struct message .
13822	Update config options with the provided dictionary of options .
13823	Completes measuring time interval and updates counter .
13824	Converts Duration to string format .
13825	Converts a string to Duration .
13826	Converts string to FieldMask according to proto3 JSON spec .
13827	Return a CouchDB document given its ID revision and database name .
13828	Give reST format README for pypi .
13829	remove records from collection whose parameters match kwargs
13830	Resolve the URL to this point .
13831	Makes the HTTP request .
13832	Skips over a field value .
13833	Parses an integer .
13834	Convert protobuf message to text format .
13835	Converts an text representation of a protocol message into a message .
13836	Merges a single scalar field into a message .
13837	Consumes protocol message field identifier .
13838	Consumes a signed 32bit integer number .
13839	Consumes an floating point number .
13840	Consumes a boolean value .
13841	Consume one token of a string literal .
13842	convert ark timestamp to unix timestamp
13843	Close the connection .
13844	Replace macros with content defined in the config .
13845	Return a pathname possibly with a number appended to it so that it is unique in the directory .
13846	Append numbers in sequential order to the filename or folder name Numbers should be appended before the extension on a filename .
13847	Custom version of splitext that doesn t perform splitext on directories
13848	Set the modified time of a file
13849	Get the modified time for a file as a datetime instance
13850	wrap a function that returns a dir making sure it exists
13851	Check whether a file is presumed hidden either because the pathname starts with dot or because the platform indicates such .
13852	Get closer to your EOL
13853	Open a connection over the serial line and receive data lines
13854	create & start main thread
13855	Scans through all children of node and gathers the text . If node has non - text child - nodes then NotTextNodeError is raised .
13856	Get the number of credits remaining at AmbientSMS
13857	Send a mesage via the AmbientSMS API server
13858	Inteface for sending web requests to the AmbientSMS API Server
13859	Called for each file Must return file content Can be wrapped
13860	Return True if the class is a date type .
13861	Convert a date or time to a datetime . If when is a date then it sets the time to midnight . If when is a time it sets the date to the epoch . If when is None or a datetime it returns when . Otherwise a TypeError is raised . Returned datetimes have tzinfo set to None unless when is a datetime with tzinfo set in which case it remains the same .
13862	Return a date time or datetime converted to a datetime in the given timezone . If when is a datetime and has no timezone it is assumed to be local time . Date and time objects are also assumed to be UTC . The tz value defaults to UTC . Raise TypeError if when cannot be converted to a datetime .
13863	Return a Unix timestamp in seconds for the provided datetime . The totz function is called on the datetime to convert it to the provided timezone . It will be converted to UTC if no timezone is provided .
13864	Return a Unix timestamp in milliseconds for the provided datetime . The totz function is called on the datetime to convert it to the provided timezone . It will be converted to UTC if no timezone is provided .
13865	Return the datetime representation of the provided Unix timestamp . By defaults the timestamp is interpreted as UTC . If tzin is set it will be interpreted as this timestamp instead . By default the output datetime will have UTC time . If tzout is set it will be converted in this timezone instead .
13866	Return the Unix timestamp in milliseconds as a datetime object . If tz is set it will be converted to the requested timezone otherwise it defaults to UTC .
13867	Return the datetime truncated to the precision of the provided unit .
13868	Return the date for the day of this week .
13869	Internal function that determines EOL_STYLE_NATIVE constant with the proper value for the current platform .
13870	Normalizes a path maintaining the final slashes .
13871	Returns a version of a path that is unique .
13872	Replaces all slashes and backslashes with the target separator
13873	Copy a file from source to target .
13874	Copy a file locally to a directory .
13875	Copy files from the given source to the target .
13876	Copies files into directories according to a file mapping
13877	Recursively copy a directory tree .
13878	Deletes the given local filename .
13879	Appends content to a local file .
13880	Moves a file .
13881	Moves a directory .
13882	Reads a file and returns its contents . Works for both local and remote files .
13883	Reads a file and returns its contents as a list of lines . Works for both local and remote files .
13884	Lists the files in the given directory
13885	Create a file with the given contents .
13886	Replaces all occurrences of old by new in the given file .
13887	Create directory including any missing intermediate directory .
13888	Deletes a directory .
13889	On Windows returns a list of mapped network drives
13890	Create a symbolic link at link_path pointing to target_path .
13891	Read the target of the symbolic link at path .
13892	Checks if a given path is local raise an exception if not .
13893	Replaces eol on each line by the given eol_style .
13894	Verifies if a filename match with given patterns .
13895	Searches for files in a given directory that match with the given patterns .
13896	os . path . expanduser wrapper necessary because it cannot handle unicode strings properly .
13897	Helper to iterate over the files in a directory putting those in the passed StringIO in ini format .
13898	Iterator for random hexadecimal hashes
13899	A context manager to replace and restore a value using a getter and setter .
13900	Return the database specifier for a database string . This accepts a database name or URL and returns a database specifier in the format accepted by specifier_to_db . It is recommended that you consult the documentation for that function for an explanation of the format .
13901	Return a CouchDB database instance from a database string .
13902	Make sure a DB specifier exists creating it if necessary .
13903	Exclude NoSet objec
13904	Parse a hub key into a dictionary of component parts
13905	Raise an exception if string doesn t match a part s regex
13906	apply default settings to commands not static shadow self in eval
13907	add commands to parser
13908	get config for subparser and create commands
13909	custom command line action to show version
13910	custom command line action to check file exist
13911	Return the consumer and oauth tokens with three - legged OAuth process and save in a yaml file in the user s home directory .
13912	Adds properties for all fields in this protocol message type .
13913	Unpacks Any message and returns the unpacked message .
