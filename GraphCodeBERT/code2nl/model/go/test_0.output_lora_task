0	Close closes the query .
1	Exec executes the query .
2	contextDone is called when the context is done .
3	NewEngine returns a new Engine .
4	NewInstantQuery creates a new query .
5	NewRangeQuery creates a new query .
6	exec executes the query .
7	cumquerySubqueryOffset returns the cumulative subquery offset for the given path .
8	extractFuncFromPath returns the function name from the path .
9	errorf implements the evaluator interface .
10	overrides the evaluator
11	dropMetricName returns the metric name for the given label .
12	signatureFunc returns a function that returns the signature of the signature .
13	evalSubquery evaluates a subquery expression .
14	vectorSelectorSingle returns the value of the vector selector for the given node .
15	signatureFunc returns the signature for the given labels .
16	VectorscalarBinarBincalarBinBin is a helper function that takes a scalar and returns a vector .
17	 scalarBinOp returns the value of a scalar .
18	shouldDropMetricName returns true if the given operation is dropped .
19	NewEndpoints returns a new Endpoints
20	calculateTrendValue calculates the trend value for the given index .
21	linear regression .
22	dateWrapper takes a function and returns a function that will be used to wrap the given value .
23	getFunction returns a function for the given name
24	Validate validates this ServiceDiscoveryConfig .
25	Dedupe creates a new Deducer .
26	Log implements Deducer .
27	Start implements the Gate interface .
28	New creates a new Discovery .
29	ApplyConfig implements the Handler interface .
30	isReady returns true if the handler is ready .
31	New returns a new http . FileSystem
32	UnmarshalJSON deserializes a tag value .
33	Write writes samples to the client .
34	mergeSamples merges two samples .
35	Describe implements Collector .
36	NewDiscovery creates a new Discovery .
37	newAuthTokenRoundTripper returns a new auth token .
38	newAuthTokenFileRoundTripper creates a new auth token .
39	isContainerNet returns true if the app is container .
40	fetchApps fetches a list of apps
41	randomAppsURL returns a random URL for the server
42	appToTargetGroups converts apps to target groupgroup .
43	extractPortMapping extracts ports from a list of ports .
44	Load loads a configuration from a string .
45	LoadFile loads a configuration file .
46	resolveFilepaths resolves filepaths for filepaths
47	isZero returns true if the global config is zero .
48	CheckTargetAddress checks if the given address is valid .
49	NewDiscovery creates a new discovery .
50	shouldWatch returns true if the given name matches the given tags .
51	shouldWatchFromName returns true if the given name matches the given name .
52	getDatacenter gets the datacenter
53	initialize initializes datacenter
54	watchServices is used to watch services .
55	watchService is used to watch a service
56	NewPod creates a new pod
57	NewMatcher creates a new Matcher .
58	Matches returns true if the given string matches the given string .
59	SpanOperation returns the SpanOperation field s value .
60	NewQueryStats returns a new QueryStats instance
61	NewDiscovery creates a new discovery .
62	UnmarshalYAML unmarshals YAML .
63	Hash returns the hash of labels .
64	HashForLabels returns the hash for the given labels .
65	Copy returns a copy of the Labels .
66	Get returns the value of the given name .
67	Has returns true if the given name exists .
68	Equal returns true if two labels are equal .
69	Map returns a map of labels .
70	New returns a new set of labels .
71	FromStrings returns a slice of labels .
72	NewBuilder creates a new builder .
73	Del deletes a set of names .
74	Labels returns a list of Labels .
75	NewStorage creates a new Storage .
76	ApplyConfig updates the given configuration .
77	Querier returns a new Quer .
78	Close closes all queues .
79	RateLimit returns a new Logger .
80	newHypervisorDiscovery creates a new hypervisorDiscovery .
81	New creates a new API client .
82	RegisterGRPC registers a grpc server .
83	HTTPHandler creates a http handler for the given grpc endpoint .
84	Extract time range from min and max .
85	Write implements io . Writer interface .
86	Close closes the response .
87	newCompressedResponseWriter creates a new compressed response writer .
88	AlertTemplateData creates a new alert template
89	Funcs adds a function to the Expander .
90	ExpandHTML expands the given template files .
91	NewTarget returns a new Target
92	Metadata returns the metadata for the target .
93	hash returns the hash of the target .
94	offset returns the offset of the target .
95	Labels returns a list of labels .
96	DiscoveredLabels returns the discovered labels .
97	SetDiscoveredLabels sets the discovered labels .
98	URL returns the URL for this Target .
99	LastError returns the last error .
100	LastScrape returns the lastScrape time .
101	LastScrapeDuration returns the lastScrapeDuration of the target .
102	Health returns the health of the target .
103	targetFromGroup returns targets from a group .
104	FromTime converts time to int64 .
105	Time converts a timestamp to a time . Time .
106	SetCORS sets the CORS header .
107	Store stores a request to the server .
108	Name returns the name of the client .
109	Read reads a query .
110	NewDiscovery creates a new discovery .
111	createAzureClient creates an azure client
112	newAzureResourceFromID creates a new Azure Resource from the given ID .
113	String returns a string representation of the Timer .
114	Swap swaps two Timers .
115	String returns a string representation of the TimerGroup .
116	RegisterAdminHandler registers an admin handler for admin .
117	ParseExpr parses a string .
118	ParseMetric parses the given input string .
119	ParseMetricSelector returns a list of labels matching the given input .
120	newParser returns a new parser .
121	parseExpr parses an expression .
122	parseSeriesDesc parses a series of labels .
123	typecheck is used to check type of type
124	next returns the next token
125	peek returns the next token .
126	errorf implements the parser . Error interface .
127	error implements parser .
128	expect returns the next token .
129	expectOne returns an item from the parser .
130	overrides the parser
131	expr returns an expression .
132	number converts a string to a float64
133	expectType checks if the given node is a valid type .
134	Appender returns a new appender .
135	Add adds a new timestamp to the timestamp .
136	AddFast adds a new value to the timestamp .
137	Commit is used to commit the timestamp .
138	Add adds a problem to the list of problems .
139	Lint implements the linter interface .
140	lint returns a list of problems for the given metric family .
141	lintHelp checks the help of the help message .
142	lintMetricUnits returns a list of metrics for the given metric family .
143	lintCounter returns a list of metrics for a metric family .
144	Write writes samples to the client .
145	New creates a new pool .
146	Get returns a new bucket .
147	Put implements the Pool interface .
148	TotalSamples returns the total number of samples .
149	Vector returns the vector of the result .
150	Scarar returns the value of the result .
151	NewDiscovery creates a new discovery .
152	NewQueueManager creates a new queue manager .
153	Append adds samples to the queue .
154	Start the queue .
155	Stop stops the queue .
156	StoreSeries stores the given series in the queue .
157	processExternalLabels takes a list of labels and returns the result .
158	start starts the shards .
159	stop stops all shards .
160	enqueue adds a sample to the shard
161	sendSamplesWithBackoff sends a batch of samples .
162	New creates a new Discovery .
163	compileCORSRegexString compiles the given string .
164	computeExternalURL computes the external URL .
165	sendAlerts sends alerts to the sender .
166	Validate validates rules .
167	Validate validates rules .
168	Parse parses the given content .
169	ParseFile parses the given file .
170	TableLinkForExpression returns the table link for the given expression .
171	GraphLinkForExpression returns a graph link for the given expression .
172	NewFanout creates a new fanout .
173	Close closes the fanout .
174	NewMergeQuer returns a new MergeQuer .
175	Select returns a new seriesSet with the given parameters .
176	LabelValues returns a slice of labels matching the given name .
177	LabelNames returns a list of label names .
178	Close closes all queries .
179	NewAlertingRule creates a new AlertingRule
180	SetLastError sets the last error
181	LastError returns the last error
182	SetHealth sets the health check .
183	Health returns the health
184	forStateSample creates a metric sample for the given alert .
185	SetEvaluationDuration sets the evaluation duration .
186	GetEvaluationDuration returns the evaluation duration .
187	State returns the current alert state .
188	ActiveAlerts returns all active alerts
189	current alerts
190	Refresh target groups
191	writeOutput writes the output to the output directory .
192	Run starts the adapter .
193	NewAdapter returns a new Adapter .
194	NewGroupMetrics returns a new Metrics .
195	EngineQueryFunc returns a query for the given query .
196	NewGroup creates a new group .
197	GetEvaluationDuration returns the duration of the group .
198	setEvaluationDuration sets the evaluation duration .
199	GetEvaluationTimestamp returns the evaluation time .
200	setEvaluationTimestamp sets the evaluation time .
201	evalTimestamp returns the timestamp of the group .
202	CopyState copies the current state from the given group .
203	NewManager returns a new Manager instance
204	Stop stops the manager .
205	Update implements the Manager interface .
206	LoadGroups loads the groups from the given file .
207	RuleGroups returns a slice of group groups .
208	Rules returns all registered rules .
209	AlertingRules returns all alerting rules .
210	Collect collects metrics for all rules .
211	NewWALWatcher creates a new WALWatcher .
212	Start starts the WALWatcher .
213	Stop stops the WALWatcher .
214	findSegmentForIndex returns the index for the given index .
215	watch starts a watcher .
216	readCheckpoint reads a checkpoint from a checkpoint directory .
217	get segment size
218	Printf logs a message at the given level .
219	NewZookeeperTree creates a new ZookeeperTreeCache .
220	NewManager returns a new Manager .
221	Name sets the name of the manager
222	Run starts the sender .
223	ApplyConfig implements the Manager interface .
224	StartCustomProvider starts a custom provider .
225	Run implements the StaticProvider interface .
226	NewNerveDiscovery creates a new discovery .
227	NewServersetDiscoveryDiscovery creates a new DiscoveryDiscovery .
228	NewDiscovery creates a new discovery .
229	FuzzParseMetricSelector parses a metric selector .
230	FuzzParseExpr parses a string from a string .
231	FuzzParseStmts parses the input string .
232	NewManager returns a new Manager instance
233	Run starts the reloader .
234	setJitterSeed sets the jitter seed .
235	Stop stops the collector .
236	ApplyConfig applies the given config to the manager
237	TargetAll returns a map of all targets .
238	TargetActive returns a map of active targets .
239	DropsDropped returns a map of targets that have been dropped .
240	getFqdn returns the name of the hostname
241	tagsFromMetric returns a map of tags from a metric .
242	Write writes samples to the server .
243	QueryableClient returns a queryable for the given client .
244	Select returns the series set from the query .
245	ExternalLabelsHandler returns a query that can be used to create a new query .
246	Select returns the series set with the given matcher .
247	PreferLocalStorageFilter returns a query that can be prefixed to the next time .
248	RequiredMatchersFilter returns a QueryableFilter that can be used to filter labels .
249	Select returns the series set with the given matchers .
250	addExternalLabels adds external labels to the list of labels
251	newInstanceDiscovery returns a new instance of InstanceDiscovery
252	ResolvedAt returns true if the given timestamp is resolved .
253	NewManager returns a new Manager .
254	ApplyConfig applies the given config .
255	Run is the main function to run all the targets .
256	Send sends a list of alerts
257	Alertmanagers returns a list of all alerts
258	DroppedAlertManagers returns a list of all alert managers .
259	sendAll sends all alerts
260	Stop stops the manager .
261	sync is used to sync all alert managers
262	alertmanagerFromGroup returns a list of alert managers for the target group .
263	String returns the string representation of the item .
264	isAggregatorWithParam returns true if the item is Aggregator
265	isComparisonOperator returns true if the item is comparator .
266	isSetOperator returns true if the item is set .
267	 precedence .
268	next returns the next rune .
269	peek returns the next rune .
270	emit emit an item
271	linePosition returns the line position of the line .
272	nextItem returns the next item .
273	lex returns a lexer .
274	lexInsideBraces returns the lexical state of the lexer .
275	lexValueSequence parses a value sequence sequence .
276	digitVal returns the number of digits .
277	lexString scans a string .
278	lexSpace is a helper function for lexer .
279	lexLineComment parses a line comment .
280	lexNumberOrDuration returns the number of tokens or an error .
281	scanNumber scans a number .
282	lex identifier .
283	lexKeywordOrIdentifier parses a key - value pair .
284	isLabel returns true if the string is a label .
285	Series returns the value of the series .
286	Type returns the type of the PromParser .
287	nextToken returns the next token .
288	NewAPI creates a new API .
289	mergeLabels merges two labels .
290	Set sets the backing storage .
291	Get returns the underlying storage .
292	Querier returns the underlying storage .
293	Appender returns the underlying storage .
294	Close closes the storage .
295	Adapter returns a new Storage interface .
296	Open opens a tsdb database .
297	Appender returns a new appender .
298	NewRegexp creates a new Regexp .
299	MustNewRegexp returns a new Regexp instance
300	Process returns the labels of the given config .
301	sum64 returns the sum of the given hash .
302	stop stops the scrape pool .
303	reload reloads the scraper pool
304	Sync is used to sync targets .
305	sync is used to sync all targets .
306	appender creates a new appender .
307	Uname returns the name of the system .
308	DecodeReadRequest decodes a read request .
309	EncodeReadResponse encodes a prometheus response .
310	ToQuery converts a query to a query .
311	FromQuery parses a query from a query .
312	ToQueryResult converts a series into a query result .
313	FromQueryResult converts a query result into a SeriesSet .
314	Seek returns true if the given time is reached .
315	At returns the value at the current time .
316	Next returns true if the iterator is next .
317	NewBufferIterator returns a new BufferedSeriesIterator .
318	Reset resets the series iterator .
319	ReduceDelta returns true if the given delta is less than the given delta .
320	PeekBack returns the next item in the buffer .
321	Seek implements the SeekIterator interface .
322	Next returns true if the iterator is available .
323	iterator returns a new series iterator .
324	ReduceDelta computes the delta of the sample .
325	nthLast returns the last element of the sample .
326	next returns the next token
327	Unit returns the unit and text .
328	Metric returns a string representation of the metric .
329	concatenateBuckets merges buckets into buckets .
330	Collect implements CollectorCollector .
331	NewTimestampCollector returns a new TimestampCollector .
332	NewDiscovery creates a new discovery .
333	listFiles returns a list of all files in the directory .
334	watchFiles starts watching files .
335	stop stops discovery .
336	refresh is used to refresh all files in the directory .
337	readFile reads a file from a file .
338	fileSource returns a string representation of a file source
339	NewRecordingRule creates a new record .
340	Eval evaluates the query against the given metric .
341	SetEvaluationDuration sets the evaluation duration .
342	SetLastError sets the last error
343	LastError returns the last error .
344	SetHealth sets the health
345	Health returns the health of the rule .
346	GetEvaluationDuration returns the duration of the rule .
347	HTMLSnippet generates a HTML snippet for a recording rule .
348	rate returns the current rate .
349	tick is used to track the events .
350	incr increments the number of events
351	NewNode creates a new node
352	CheckConfig is used to check config files
353	CheckRules checks if files are valid
354	CheckMetrics checks the metrics .
355	QueryInstant performs a query and returns the result .
356	QueryRange is used to query a query string .
357	QuerySeries queries a series of timeseries .
358	QueryLabels queries labels for a given URL .
359	UnmarshalJSON deserializes a group of targets .
360	NewStreamReader creates a new io . Reader .
361	StatusMessage returns a string representation of the status code .
362	CopyTo copies the arguments to dst .
363	Parse parses a string .
364	ParseBytes parses bytes from b .
365	QueryString returns the query string .
366	AppendBytes appends args to dst .
367	WriteTo implements io . Writer interface .
368	Del deletes a key .
369	DelBytes deletes a key from the args .
370	Add adds a key to the list
371	AddBytes adds a key to the args .
372	AddBytesKV adds a key to the args .
373	AddNoValue adds a key to the list .
374	AddBytesKNoValue adds a key to the list .
375	Set sets the value of a key .
376	SetBytesV sets the value of a key .
377	SetBytesKV sets the value for a key .
378	SetNoValue sets the value for a key .
379	SetBytesKNoValue sets the key for the given key .
380	Peek returns the value at key .
381	PeekBytes returns the value of the given key .
382	PeekMulti returns a slice of values by key .
383	PeekMultiBytes returns a slice of bytes by key .
384	Has returns true if the given key exists .
385	HasBytes returns true if the given key exists .
386	GetUint returns the value of the given key .
387	SetUint sets the value of a key .
388	SetUintBytes sets the value for a key .
389	GetUfloat returns the value of the given key .
390	GetBool returns the value of a key .
391	decodeArgAppendNoPlus decodes an argument to dst .
392	AppendHTMLEscape appends a string to a string .
393	AppendIPv4 appends ip address to dst .
394	ParseIPv4 parses an IPv4 address from a string .
395	ParseUint parses a byte slice .
396	ParseUfloat returns a float64 from buf .
397	AppendQuotedArg appends quotes to dst .
398	Copy copies the URI into dst .
399	SetHash sets the hash of the URI .
400	SetHashBytes sets the hash of the URI .
401	SetQueryString sets the query string .
402	SetQueryStringBytes sets the query string .
403	SetPath sets the path to the URI .
404	SetPathBytes sets the path to the URI .
405	SetScheme sets the scheme .
406	SetSchemeBytes sets the scheme .
407	Reset resets the URI .
408	SetHost sets the host .
409	SetHostBytes sets the host .
410	RequestURI returns the request URI .
411	AppendBytes appends the request to dst .
412	WriteTo implements io . Writer interface .
413	NewWriter creates a new writer .
414	NewPipeConns creates a new PipeConns .
415	Close closes the pipe .
416	LastUseTime returns the last time .
417	AcquireRequest returns a new Request .
418	AcquireResponse returns a new response .
419	DoDeadline implements the LBClient interface .
420	DoTimeout implements the LBClient interface .
421	Do implements the LBClient interface .
422	Serve starts the server .
423	ServeTLS implements the http . Server interface .
424	ServeTLSEmbed implements the Server interface .
425	ListenAndServe starts a new http server .
426	ListenAndServeAndServe returns a new ServeUnix socket .
427	ListenAndServeTLS creates a new HTTPS server .
428	ListenAndServeTLServe listens for TLS connections .
429	TimeoutHandler creates a request handler for a request .
430	LSConnectionState returns the TLS connection state .
431	String returns a string representation of the request .
432	SetContentType sets the content type
433	SetContentTypeBytes sets the ContentTypeBytes field s value .
434	FormFile returns the file header for the given key .
435	SaveMultipartFile saves a multipart file .
436	RemoteAddr returns the remote address .
437	Error sends a message to the response
438	Success sets the response body
439	SuccessString sets the response body
440	IfModifiedSince returns true if the request was modified .
441	NotFound sets the response body
442	Write writes data to the response .
443	WriteString writes a string to the response .
444	Logger returns the logger .
445	NextProto adds the next protocol to the server
446	ListenAndServe is the same as ListenAndServe interface .
447	ListenAndServeServe implements the Serve interface .
448	ListenAndServeTLS implements the Server interface .
449	ListenAndServeTLs listens for TLS connections .
450	ServeTLS implements the Server interface .
451	ServeTLSEmbed implements the Server interface .
452	AppendCertEmbed adds a certificate to the server
453	Serve starts the server .
454	Shutdown shuts down the server .
455	WriteGzip writes data to w . Writer .
456	WriteGunzip writes bytes to w . Writer .
457	AppendGunzipBytes appends bytes to dst .
458	WriteDeflate writes data to w .
459	WriteInflate writes data to w . Writer .
460	AppendInflateBytes appends src to dst .
461	SetRequestURI sets the request URI
462	SetRequestURIBytes sets the RequestURI field s value .
463	RequestURI returns the request URI
464	SendFile sends a file to the response .
465	BodyWriter returns the body of the response .
466	BodyWriter returns the body of the request .
467	Body returns the body of the response .
468	BodyWriteTo writes the body to the writer .
469	BodyWriteTo implements the io . Writer interface .
470	AppendBodyString appends a string to the response buffer .
471	SetBodyString sets the body of the response
472	ResetBody clears the response body .
473	SetBodyRaw sets the body of the response .
474	ReleaseBody releases the body of the response .
475	ReleaseBody closes the body of the request .
476	SwapBody swaps the body of the response .
477	SwapBody swaps the body of the request .
478	Body returns the body of the request .
479	AppendBodyString appends a string to the request buffer .
480	SetBodyString sets the body of the request
481	ResetBody clears the request body .
482	CopyTo copies the request to dst .
483	CopyTo copies the response to dst .
484	WriteMultipartForm writes a multipart form .
485	Reset resets the response .
486	ReadLimitBody reads the body of the response .
487	WriteTo implements io . Writer interface .
488	WriteTo implements io . Writer interface .
489	Write writes the request to the given writer .
490	Write writes the response to the writer .
491	SetLastModified sets the last modified time .
492	PeekCookie returns the value for the given key .
493	ContentType returns the content type .
494	SetServer sets the server s server .
495	SetServerBytes sets the server s server .
496	Host returns the host .
497	SetHost sets the host .
498	SetHostBytes sets the host header .
499	SetUserAgent sets the UserAgent field s value .
500	SetUserAgentBytes sets the UserAgent field s value .
501	Method returns the HTTP GET method
502	SetMethod sets the request method
503	SetMethodBytes sets the HTTP method for the request .
504	RequestURI returns the request URI .
505	SetRequestURI sets the request URI
506	SetRequestURIBytes sets the request URI .
507	HasAcceptEncoding returns true if the given AcceptEncoding is valid .
508	HasAcceptEncodingBytes returns true if the given AcceptEncoding is valid .
509	Len returns the number of bytes .
510	Reset resets the response header .
511	SetCookie sets the cookie value .
512	DelClientCookie deletes a cookie by key .
513	DelCookie deletes a cookie .
514	DelCookie deletes a cookie .
515	DelAllCookies deletes all cookies .
516	Peek returns the value for the given key .
517	PeekBytes returns the value of the given key .
518	Cookie returns the value of a cookie .
519	CookieBytes returns the value for the given key .
520	Cookie parses a cookie into the response .
521	Read reads the header from the buffer .
522	Header returns the header .
523	AppendBytes appends the response header to dst .
524	Write writes the header .
525	WriteTo implements io . Writer interface .
526	Header returns the request header .
527	AppendBytes returns a copy of the request header .
528	ServeFileUncompressed implements the http . Handler interface .
529	NewRequestHandler returns a new RequestHandler
530	FileLastModified returns the file last modified time .
531	CopyTo copies the current cookie to another .
532	SetPath sets the path to the cookie .
533	SetPathBytes sets the path to the cookie .
534	SetDomain sets the domain
535	SetDomainBytes sets the Domain field s value .
536	Expire returns the expire time .
537	SetValue sets the value of the cookie
538	SetValueBytes sets the value of the cookie .
539	SetKey sets the key
540	SetKeyBytes sets the key to the cookie .
541	Reset resets the cookie
542	AppendBytes appends cookie to dst .
543	Cookie returns the cookie .
544	WriteTo implements io . Writer interface .
545	Parse parses a string into a Cookie .
546	ParseBytes parses a string into a Cookie .
547	appendResponseCookieBytes appends response cookies to dst .
548	AcquireTimer returns a new timer .
549	Accept returns a net . Conn .
550	Close closes the connection .
551	FileServer adds a path to the router
552	Reset initializes the context .
553	URLParam returns the value of the given key .
554	URLParam returns the value of the given key .
555	URLParamFromCtx returns the URL param from the given context .
556	Add adds a key to the route params
557	ServerBaseContext adds a context to the middleware .
558	GetHead returns the HTTP request handler for the given request .
559	Ping sends a ping message .
560	StripSlashes returns a new http . HandlerFashes .
561	AllowContentType checks if the given content types are allowed .
562	GetReqID returns the request ID .
563	HandlerFunc adds a middleware to the middleware
564	chain applies middleware to the middlewares .
565	NewMux creates a new Mux .
566	ServeHTTP implements the Handler interface .
567	Use adds middlewares to the middleware
568	Handle implements the Mux interface .
569	HandleFunc registers a handler for the given pattern .
570	Method registers a method for the given method .
571	MethodFunc registers a handler for the given method .
572	Connect registers a new HTTP request .
573	Delete registers a route .
574	Get registers a GET request .
575	Head adds a HEAD request to the Mux .
576	Options implements the Mux interface .
577	Patch adds a pattern to the router .
578	Post registers a POST request .
579	Put adds a route to the router .
580	Trace registers a handler for the given pattern .
581	NotFound adds a handler to the router
582	MethodNotAllowed sets the MethodNotAllowedHandler for this Mux .
583	With adds middlewares to the router
584	NotFoundHandler returns the http . HandlerFunc .
585	MethodNotAllowedHandler returns the HandlerNotAllowedHandler
586	handle adds a route to the router
587	routeHTTP handles the HTTP request .
588	updateSubRoutes updates all sub - routes in the tree
589	methodNotAllowedHandler is an HTTP method that handles a 405 request .
590	RequestLogger creates a new http . Handler .
591	GetLogEntry returns the log entry .
592	WithLogEntry adds a log entry to the request .
593	NewLogEntry creates a new log entry .
594	ContentCharset returns a new http . Handler for the given charset .
595	contentEncoding returns true if the given string contains the given charset .
596	split splits a string into two strings .
597	addChild adds a child node to the node .
598	findRoute finds the route for the given path
599	ArticleCtx adds the article to the page
600	SearchArticles returns a list of articles .
601	CreateArticle creates a new article
602	GetArticle gets the article
603	UpdateArticle updates an article .
604	DeleteArticle deletes an article .
605	AdminRouter returns a router for the admin .
606	AdminOnly returns a new http . Handler that can be used to authenticate .
607	paginate returns an http . HandlerFunc that wraps the next request .
608	init initializes the response
609	NewCompressor returns a new Compressor .
610	Handler returns an http . Handler for the given request .
611	selectEncoder returns the encoder for the given header .
612	DefaultCompress returns a default compression handler
613	Th Throttle returns an http . Handler that will be throttling .
614	ThrottleBacklog creates a new throttler for the given limit .
615	ServeHTTP implements the http . Handler interface .
616	NewWrapResponseWriter creates a new WrapperWriter .
617	Routes returns the routes for the resource
618	NewAWSProvider returns a new AWS provider instance
619	newChanges returns a new instance of Route53 .
620	matchingZones returns a list of route names matching the given hostname .
621	isAWSLoadBalancer returns true if the endpoint is AWS .
622	isAWSAlias returns the AWS alias for the given endpoint .
623	onicalHostedZone returns the canonical zone for a hostname .
624	NewTXTRegistry returns a new TXTRegistry instance
625	Record retrieves all records from the registry .
626	NewDomainFilter returns a new DomainFilter
627	Match returns true if the domain matches the filter .
628	IsConfigured returns true if the filter is configured .
629	InMemoryWithLogging creates a new InMemoryWithLogging option .
630	InMemoryInitZones creates a new InMemoryProvider instance
631	NewInMemoryProvider returns a new InMemoryProvider instance
632	CreateZone creates a new zone
633	Zones returns a map of zones
634	validateChangeBatch checks if a change is valid .
635	NewZoneTagFilter returns a new ZoneTagFilter instance
636	Match returns true if the zone tags match the given filter .
637	NewIngressSource creates a new IngressSource
638	Endpoints returns a slice of all ingresses for the ingress .
639	filterByAnnotations returns the list of ingress matching the given annotations .
640	endpointsFromIngress returns a slice of Endpoints from ingress .
641	NewLabelsFromString creates a new Labels from a string
642	Serialize returns a string representation of the labels .
643	KubeClient returns the KubeClient
644	IstioClient returns the IstioClient
645	ByNames returns a list of source sources with the given names .
646	BuildWithConfig builds a source source for a given source
647	NewKubeClient creates a new Kubernetes client .
648	NewCRDClientForAPIVersionKind returns a REST client for the given kind .
649	NewCRDSource creates a crd source
650	Match returns true if the zone type matches the given zone .
651	NewInfobloxProvider returns a new InfobloxProvider instance
652	ApplyChanges applies changes to zones .
653	NewServiceSource creates a ServiceSource .
654	Endpoints returns the list of all available services for the service .
655	endpoints returns a list of endpoint names for the given service .
656	filterByAnnotations returns a list of services that match the provided annotations .
657	filterByServiceType returns a list of services that match the service type .
658	Calculate returns the plan .
659	NewExoscaleProvider returns a new ExoscaleProvider instance
660	ExoscaleWithLogging sets the ExoscaleOptions field s value .
661	NewLinodeProvider returns a new Linode provider .
662	NewTargets returns a new Targets .
663	Same compares two targets .
664	IsLess returns true if two Targets are less than one .
665	NewEndpoint creates a new Endpoint
666	NewEndpointWithTTL returns a new EndpointWithTTL .
667	GetProviderSpecificProperty returns the ProviderSpecificProperty for the given endpoint .
668	Match returns true if the given zoneID matches the given zoneID .
669	ValidateConfig validates the config
670	CreateRecord creates a new record
671	DeleteRecord deletes a record .
672	UpdateRecord updates a DNS record .
673	GetZone returns a zone
674	ListZones returns all zones
675	Records returns a list of DNS records .
676	ns1BuildBuild creates a DNS record for the given zone .
677	ns1SubmitChanges is used to submit changes to a zone .
678	newNS1Changes creates a new list of ns1 changes .
679	ns1ChangesByZone returns a map of ns1 changes by zone .
680	allLogLevelsAsStrings returns all log levels as strings .
681	Apply implements the UpsertOnlyPolicy interface .
682	RunOnce runs the controller .
683	Run starts the controller .
684	NewCloudFlareProvider returns a CloudFlareProvider instance
685	newCloudFlareChanges returns a list of cloudFlare changes .
686	GetAccountID returns the account ID .
687	NewDnsimplementsProvider returns a new DnsimpleProvider instance
688	Zones returns a list of zones
689	Records returns a list of all DNS records .
690	newDnsimpleplements creates a new DnsimpleChange
691	newDnsimpleplements creates a new list of dnsimplements for the given endpoint .
692	SubmitChanges is used to submit changes .
693	GetRecordID returns the record ID for a given zone .
694	DnsimplepletesZone returns the zone for the given hostname .
695	CreateRecords creates new records for the given endpoint .
696	DeleteRecords deletes the specified endpoint .
697	UpdateRecords updates the records for the given endpoint .
698	ApplyChanges applies changes to the given plan .
699	NewGoogleProvider creates a new Google Cloud Provider .
700	Records returns a list of DNS records .
701	newFilteredRecords returns a list of DNS records .
702	SubmitChange is used to submit a change .
703	separateChange returns a copy of the change between zones .
704	newRecord creates a new ResourceRecordSet .
705	NewRcodeZeroProvider returns a new RcodeZeroProvider instance
706	Zones returns all the zones in the zone .
707	Records returns all the records in the zone .
708	SubmitChanges is used to submit the changeset .
709	NewRcodeZeroChanges returns a list of rcodezero changes for the given endpoint .
710	NewRcodeZeroChange creates a new RRCetChangeChange
711	NewAlibabaCloudProvider returns a new AliasCloudProvider instance
712	recordsForDNS returns a list of DNS records for DNS records .
713	private zone records
714	SaveService saves a service .
715	DeleteService deletes a service
716	newTLSConfig creates a new TLS config .
717	getETCDConfig returns an instance of EtcdConfig
718	newETCDClient creates a new EtcdClient
719	NewCoreDNSProvider returns a new CoreDNSProvider instance
720	Record returns a list of DNS records .
721	NewRfc2136Provider creates a new Rfc2136 provider .
722	StringifyHTTPRonseBody returns the body of the HTTP response body .
723	NewPDNSProvider creates a PDNS provider .
724	mutateRecords updates the records for the given endpoint .
725	NewAWSSDProvider creates a new AWS CloudSSD provider .
726	newSdNamespaceFilter returns a new NamespaceFilterFilter .
727	Records returns a list of all available instances .
728	ApplyChanges applies changes to AWS .
729	ListNamespaces returns a list of namespaces .
730	GetServiceDetail returns details about a service .
731	ListInstancesByServiceID returns a list of InstancesByServiceID .
732	CreateService creates a new service
733	UpdateService updates the service
734	RegisterInstance registers an instance of AWS Service .
735	DeregisterInstance is used to deregisters an Instance
736	targetToInstanceID returns the instance ID for the given target .
737	matchNamespaces returns a list of namespaces matching the given hostname .
738	outingPolicyFromEndpoint returns the routing policy for the given endpoint .
739	isAWSLoadBalancer returns true if the given hostname is AWS .
740	ResolveUpdate is used to resolve a new endpoint
741	Less returns true if the endpoint is less than the target endpoint .
742	NewDigitalOceanProvider creates a new DigitalOcean provider .
743	newDigitalOceanChanges returns a list of digitalOcean changes
744	getRecordID returns the ID of a record
745	DigitalOceanChangesByZone returns a map of digitalOcean changes by zone
746	LegacyEndpointsFromService returns a slice of Endpoints from a Service
747	LegacyEndpointsFromMateService returns a slice of Endpoints from a Service
748	LegacyEndpointsFromMoleService returns a slice of Endpoints from a molecule
749	getTargetsFromTargetAnnotation returns the targets from the given map .
750	findType returns the appropriate type for the given target .
751	endpointsForHostname returns a list of endpoint names for a given hostname .
752	NewDynProvider returns a new instance of DynProvider
753	toRecordToRecord converts an endpoint to a record .
754	Fetch all records in zone
755	zips returns the list of zone IDs in the zone
756	ReplaceRecord replaces a record with the given endpoint .
757	commit is used to commit the zone
758	Endpoints returns all the endpoints in the MultiSource
759	newDesignateClient returns a new DesignClientInterface
760	remapEnv removes environment variables from environment variables
761	create design service client
762	ForEachZone iterates over all zones .
763	ForEachRecord sets the records for a given zone .
764	CreateRecordSet creates a record set .
765	UpdateRecordSet updates a record set .
766	DeleteRecordSet deletes a record set .
767	NewDesignateProvider returns a new DesignProvider .
768	normalizeDomainNames takes a list of domains and returns a list of canonical names .
769	normalizeDomainName returns the domain name .
770	getZones returns a map of zone names .
771	getHostZoneID returns the host ID for the given hostname
772	addEndpoint adds an endpoint to the list of DNS records
773	NewIstioGatewaySource returns a new SourceSourceSource
774	filterByAnnotations returns the list of configs that match the annotation filter .
775	EndpointsFromGatewayConfig returns a list of endpoint objects from the gateway configuration .
776	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpoint .
777	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointList .
778	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointSpec .
779	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointStatus .
780	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Endpoint .
781	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Labels .
782	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProviderSpecific .
783	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Targets .
784	ensureTrailingDot ensures that the hostname is valid .
785	NewNoopRegistry returns a new instance of NoopRegistry
786	ApplyChanges applies changes to the registry .
787	Endpoints returns a list of Endpoints in the source .
788	NewFakeSource creates a new fake source
789	CreateTLSConfig creates a TLS config .
790	NewAWSSDR registry constructor
791	ApplyChanges applies changes to AWS .
792	LoadOCIConfig loads an OCI configuration file .
793	NewOCIProvider creates a new OCI provider .
794	ApplyChanges applies changes to the OCI provider .
795	newRecordOperation creates a new record operation .
796	OperationByZone returns a map of records that have been applied to the given zone .
797	NewAzureProvider creates a new Azure Provider .
798	getAccessToken returns the access token for the given config .
799	Create creates a new disk image .
800	createDiskImage creates a disk image .
801	Save saves the network network .
802	SaveIPv4 saves the IPv4 network .
803	createHostonlyAdapterAdapter creates a host and returns it .
804	listHostOnlyNetwork adapters
805	removeOrphanDHCPServers removes any existing hosts that have been removed .
806	addHostOnlyDHCPServer adds a host to the list of hosts
807	listDHCPSer returns a list of DHCP servers
808	checkIPNetCollision returns true if the host is a hostname .
809	NewDriverNotSupported returns a DriverNotSupported instance
810	DriverName returns the driver name
811	MustBeRunning checks if the driver is running .
812	NewDriver creates a new Driver .
813	migrateStringToSlice converts a string to a slice of strings .
814	DockerClient returns a docker client .
815	CreateContainer creates a container
816	cleanupResourceIfExists deletes a resource if it exists
817	NewDriver returns a new Driver instance
818	GetSSH username
819	Start the virtual machine
820	Stop stops the virtual machine .
821	Restart the virtual machine
822	Remove removes the driver .
823	getCloudInit gets the user data from the driver
824	GenerateCACertificate generates a CACertificate .
825	GenerateCert generates an X509 certificate .
826	ReadTLSConfig reads the TLS config from the given address .
827	ValidateCertificate checks if the given address is valid .
828	IsVTXDisabled returns true if the VM is enabled .
829	NewVBoxManager returns a new VBoxManager instance
830	DriverPath returns the path to the driver
831	AuthenticateDeviceFlow is used to authenticate a device flow .
832	Authenticate service principal
833	tokenFromFile creates a ServicePrincipalToken from a file .
834	deviceFlowFlowAuth creates a service flow token .
835	tokenCachePath returns the path to the token cache .
836	 tenant ID .
837	mkTokenCallback creates a new token callback for the given path
838	NewFmtMachineLogger returns a new FmtMachineLogger .
839	newComputeUtil returns a new ComputeUtil .
840	Disk returns the disk .
841	deleteDisk deletes a disk .
842	staticAddress returns the static address for the given address .
843	openFirewallPorts opens a firewall rule
844	Instance returns the instance of the instance .
845	configureInstance is used to configure the instance
846	addFirewallTag adds a firewall tag to the firewall .
847	uploadSSHKey uploads the ssh key to the cloud
848	parseTags returns a slice of tags from the driver .
849	startInstance starts a new Instance
850	waitForOp waits for the operation to wait until it returns an error
851	waitForRegionalOp returns the operation for the given name .
852	waitForGlobalOp returns the operation for a global operation .
853	IP returns the IP address for this instance .
854	cmdOutput returns the output of the command
855	setVmwareCmd returns the path to the vmware command .
856	RegisterResourceProviders registers a resource provider .
857	CreateResourceGroup creates a resource group .
858	CleanupVirtualNetworkIfExists removes a virtual network .
859	CreateSubnet creates a subnet
860	Cleanup availability set
861	Get public IP address
862	GetPrivateIPAddress returns the private IP address
863	deleteResourceIfExists deletes a resource
864	waitVMPowerState waits for a VMPowerState to see if the VM is available .
865	checkResourceExistsFromError returns true if the error occurred .
866	OSDiskStorageBlob returns the OS disk blob URL for the given VM name .
867	osDiskStorageContainerURL returns the OS disk storage container for the given account .
868	NewKeyPair creates a new KeyPair .
869	Fingerprint returns the fingerprint of the keyPair .
870	GenerateSSHKey creates a new SSH key .
871	loadTenantID returns the tenant ID for the given subscription ID .
872	Find tenant ID
873	save tenant ID
874	Send sends a crash .
875	Create creates a new device .
876	DriverName returns the driver name .
877	GetCreateFlags returns a list of mcn flag .
878	GetMachineName returns the machine name .
879	GetSSHHostname returns the hostname of the device .
880	GetSSHKeyPath returns the path to the device path .
881	GetSSH username
882	Kill terminates the device .
883	Remove removes the device .
884	Start starts the device .
885	Stop stops the driver .
886	MigrateHostV1 mocks base method
887	MigrateHostMetadataV1 mocks base method
888	getNameAndPpid returns the name of the process and parent process .
889	NewDriver returns a new Driver instance
890	SetConfigFromFlags sets the config field s value .
891	PreCreateCheck checks if the driver is valid .
892	Create creates a new instance .
893	GetIP returns the IP address
894	GetState returns the state of the driver .
895	Start starts the driver .
896	Stop stops the driver .
897	Remove removes the driver .
898	NewDriver returns a new Driver .
899	SetConfigFromFlags sets the ConfigFromFlags field s value .
900	PreCreateCheck checks if the driver already exists .
901	Create creates a new CloudStorage .
902	Remove deletes the driver .
903	GetIP returns the IP address
904	GetURL returns the URL of the Docker driver .
905	GetState returns the machine state .
906	Start starts the driver .
907	Stop stops the driver .
908	Restart the driver
909	create creates a virtual machine
910	stream starts streaming .
911	NewDriver returns a new Driver
912	waitForIP returns the IP address of the driver
913	waitStopped waits until the driver is stopped .
914	Start the driver
915	Stop stops the driver .
916	Remove removes the machine .
917	generate disk image
918	GetIP returns the IP address
919	GetSSHKeyPath returns the SSHKeyPath for the driver .
920	GetSSHPort returns the SSH port
921	GetSSH username
922	ResolveStorePath returns the path for the given file .
923	SetSwarmConfigFromFlags sets the SwarmConfig field s value .
924	IsVTXDisabled returns true if the VM is enabled .
925	getReleaseTag retrieves the release tag for a release
926	getReleaseURL returns the URL for the given API URL .
927	Version returns the version of the ISO .
928	DownloadISO downloads a file from a directory
929	Authenticate is used to authenticate the server .
930	GetInstanceIPresses returns a list of IP addresses .
931	targetHost returns the target host name .
932	machineCommand executes a machine command .
933	runActionForeachMachine runs an action on a machine .
934	Create creates a new host
935	GenerateRandomID generates random ID
936	GetCreateFlags returns a list of mcn flags .
937	NewDriver creates a new driver .
938	SetConfigFromFlags sets the ConfigFromFlags field s value .
939	URL returns the host URL
940	newAzureClient creates a new Azure client .
941	generateSSHKey generates the SSH key for the deployment .
942	parseSecurityRuleProtocolProtocol returns the security rule .
943	String returns the string representation of the state .
944	randomString returns a random string with the given alphabet .
945	GetCreateFlags returns a list of mcn flags .
946	generate key bundle
947	NewDriver creates a new Driver
948	PreCreateCheck checks if the driver is valid .
949	validateNoIPCollisions checks if the host is valid .
950	getAvailableTCPPorts returns the available TCP port
951	setPortForwarding sets the port forwarding to the host .
952	getRandomIPInSubnet returns a random IP in a subnet
953	Detect returns the shell command
954	 vault renew duration
955	printVaultWarnings prints a list of warnings .
956	 vault secret renewable
957	transformSecret transforms a secret into a secret
958	updateSecret updates the secret
959	Display returns the string representation of the template config .
960	NewVaultWriteQuery creates a new Vault write query .
961	sha1Map returns the SHA1 hash of a map
962	NewView creates a new View .
963	Data returns the data .
964	DataAndLastIndex returns the last index and last index .
965	poll polls the view for the given view .
966	fetch is used to fetch data from the view
967	NewCatalogNodeQuery creates a CatalogNodeQuery .
968	Fetch fetches a node from the catalog
969	String returns the string representation of the AuthConfig .
970	NewVaultListQuery returns a new VaultListQuery .
971	Remember the data for the given dependency .
972	Records recall the given dependency .
973	ForceSet sets the data for the given hash code .
974	Get forgets the given dependency .
975	NewCatalogDatacentersQuery returns a new CatalogDatacentersQuery .
976	Fetch fetches a list of datacenters .
977	NewCatalogNodesQuery creates a CatalogNodesQuery .
978	Fetch returns a list of nodes in the catalog .
979	Parse parses a signal .
980	DefaultVaultConfig returns a new VaultConfig instance
981	NewTemplate creates a new Template .
982	Execute implements the Template interface .
983	funcMap returns a FuncMap for the given function .
984	StringToFileModeFunc returns a map of file mode .
985	StringToWaitDurationHookFunc returns a DecodeHookHookFunc that decodes the given string .
986	ConsulStringToStructFunc returns a map of ConsulConfig .
987	Key returns true if the given key exists .
988	Get returns the value of the given key .
989	Set sets the value for the given key .
990	SetX sets the value for the given key .
991	MapSet sets the value for the given key .
992	MapSetX mocks base method
993	mapSet sets the value for the given key .
994	MapValues returns the values of the given key .
995	init initializes the scratch .
996	Render implements the Render interface .
997	copyFile copies a file to dst .
998	Copy returns a copy of config
999	Merge merges the config into a new Config .
1000	Parse parses a string into a Config struct .
1001	Must parses a string from a string .
1002	FromFile parses a configuration file .
1003	FromPath returns a Config from a path .
1004	DefaultConfig returns the default config
1005	NewWatcher creates a new watcher .
1006	Watch returns whether the given dependency is watching .
1007	ForceWatching is called when a deprecation is enabled .
1008	Remove removes a dependency .
1009	Size returns the size of the view .
1010	Stop stops the watcher .
1011	Add adds a dependency to the set .
1012	Get returns a dependency from the set .
1013	List returns a list of dependencies .
1014	Len returns the number of items in the set .
1015	String returns a string representation of the set .
1016	deepCopyAndSortAndSort sorts a slice of tags .
1017	respWithMetadata returns a ResponseMetadata .
1018	regexpMatch returns a map of strings matching the given regexp .
1019	NewCatalogServiceQuery creates a CatalogServiceQuery .
1020	NewKVListQuery creates a new KVListQuery .
1021	NewDedupManager creates a new DedupManager .
1022	Start starts the client .
1023	Stop stops the DedupManager .
1024	createSession creates a new session
1025	IsLeader returns true if the template is leader .
1026	UpdateDeps updates the given template .
1027	setLeader sets the leader for the given template .
1028	parseData parses the contents of a template
1029	NewFileQuery creates a new FileQuery .
1030	NewCLI creates a new CLI .
1031	Run runs the command .
1032	stop stops the CLI .
1033	loadConfigs loads configs from the given paths .
1034	logError logs an error .
1035	FileModeGoString returns a string representation of a file .
1036	SignVal returns the signal value .
1037	SignGoString returns a string representation of the signal .
1038	SignPresent returns true if the signal is present .
1039	TimeDurationVal returns the duration of the given time .
1040	TimeDurationDuration returns a string representation of the given time .
1041	CreateConsulClient creates a new ConsulClient
1042	Consul returns the client
1043	 Vault .
1044	Stop stops the client .
1045	NewVaultReadQuery returns a vault read query .
1046	NewKVGetQuery returns a new KVGetQuery instance
1047	NewVaultAgentTokenQuery returns a new VaultAgentTokenQuery .
1048	watch returns a channel for the given path .
1049	NewKVKeysQuery creates a new KVKeysQuery .
1050	New creates a new Child
1051	ExitCh returns the exit chan .
1052	Pid returns the PID of the child process .
1053	Command returns the command .
1054	Start starts the child process .
1055	Sign signals the child process .
1056	Reload reloads the child
1057	Kill kills the child process .
1058	Stop stops the child process .
1059	Env returns the environment variables .
1060	NewHealthServiceQuery creates a new HealthServiceQuery .
1061	Fetch fetches a health service .
1062	acceptStatus returns true if the given list is valid .
1063	RetryFunc returns a retryFunc for retry .
1064	NewRunner creates a new Runner .
1065	Stop stops the Runner .
1066	RenderEvents returns a map of time events .
1067	Sign implements the Runner interface .
1068	diffAndUpdateDeps updates the dependencies of the runner .
1069	templateConfigsFor returns a list of configs for the given template .
1070	TemplateConfigMapping mappings
1071	allTemplatesRendered returns true if all templates are rendered .
1072	childEnv returns a list of child environments
1073	storePid writes the pid file to the file .
1074	deletePid deletes the PID file .
1075	spawnChild starts a child process .
1076	newQuiescence returns a new quiescence .
1077	tick is called when the quiescence is done .
1078	findCommand finds the template for the given template .
1079	newWatcher returns a watcher for the given config .
1080	NewCatalogServicesQuery creates a CatalogService query .
1081	DefaultConsulConfig returns a new ConsulConfig instance
1082	StringToSignalFunc returns a DecodeHookFunc .
1083	String returns a string representation of the WaitVar .
1084	NewVaultTokenQuery returns a new VaultTokenQuery .
1085	NewLogFilter returns a new LevelFilter .
1086	ValidateLevelFilter checks if the given filter is valid .
1087	datacentersFuncFunc returns a list of datacenters that are used in the catalog .
1088	envFunc returns the environment variable for the environment variable .
1089	executeTemplateFunc returns a function that executes the given template .
1090	fileFunc returns a function that returns a function that can be used to build a file .
1091	keyFunc returns a function that can be used to generate a key .
1092	keyExistsFunc returns true if the key exists in the database .
1093	nodeFunc returns a function that returns a new catalog node .
1094	nodeFunc returns a function that returns a list of nodes that can be used in the catalog .
1095	secretFunc returns a function that can be used to generate a secret
1096	secretFunc returns a list of secrets for the given secret .
1097	serviceFunc returns a function that returns a list of health services .
1098	serviceFunc returns a list of services that can be used in the catalog .
1099	treeFunc returns a list of key pairs for the given string .
1100	base64Decode decodes a base64 encoded string .
1101	base64Encode returns a base64 encoded string .
1102	base64URLDecode decodes a base64 encoded string .
1103	base64URLEncoding returns a base64 encoded string .
1104	byTag returns a map of services that match the given type .
1105	Explode takes a list of pairs and returns a map of keys .
1106	expandHelper recursively recursively recursively recursively
1107	check returns true if l is in v .
1108	indent indentation
1109	join a slice of strings
1110	parseBool parses a string .
1111	parseFloat parses a string .
1112	parseInt parses a string from a string .
1113	parseJSON parses a JSON string .
1114	parseUint parses a string .
1115	Plugin runs a plugin .
1116	replaceAll replaces all occurrences of the given string .
1117	ReplaceAll replaces all occurrences of the given string with replacement .
1118	regexMatch returns true if the string matches the given regex .
1119	split returns a slice of strings .
1120	timestamp returns the timestamp as a string .
1121	toJSON converts an interface into a JSON string .
1122	toJSONPrettyPretty returns the JSON representation of a map
1123	toYAML converts mappings to yaml
1124	toTOML converts a map to a string .
1125	add adds b to b
1126	modulo modulo
1127	Expired returns true if the item is expired .
1128	SetDefault sets the default value for the cache
1129	Add adds an item to the cache .
1130	Get retrieves a value from the cache
1131	IncrementInt increments the value in the cache .
1132	Delete removes a key from the cache .
1133	DeleteExpired deletes expired items .
1134	Items returns the items in the cache .
1135	ItemCount returns the number of items in the cache .
1136	Flush removes all items from the cache .
1137	djb33 returns the seed of a seed .
1138	LinkByName returns a Link by name .
1139	NewMockTaskEngine creates a new mock instance
1140	AddTask mocks base method
1141	GetTaskByArn mocks base method
1142	ListTasks mocks base method
1143	MarshalJSON mocks base method
1144	MustInit mocks base method
1145	StateChangeEvents mocks base method
1146	Version mocks base method
1147	NewMockImageManager creates a new mock instance
1148	AddAllImageStates mocks base method
1149	AddAllImageStates mocks base method
1150	GetImageStateFromImage mocks base method
1151	RecordContainerReference mocks base method
1152	StartImageCleanupProcess mocks base method
1153	NewEC2MetadataClient returns a new EC2MetadataClient
1154	DefaultCredentials returns the default role credentials
1155	GetDynamicData returns the dynamic data for the given path .
1156	GetMetadata mocks base method
1157	VPCID returns the VPC ID for the given mac .
1158	SubnetID returns the subnet ID for the given mac address .
1159	newRefreshCredentialsHandler returns a new refreshCredentialsHandler .
1160	handlerFunc returns a function that returns a function that returns a function that will be sent to the server .
1161	AckMessage is used to send a message to the server
1162	handleMessages handles incoming messages .
1163	handleSingleMessage is used to handle a single message .
1164	validRoleType returns true if the given role type is valid .
1165	newPayloadRequestHandler creates a new payload request handler .
1166	handlerFunc returns a function that returns a function that returns a function that can be used to send the payload to the message buffer .
1167	AckMessageId is used to acknowledge a message .
1168	handleMessages is used to handle messages .
1169	handleSingleMessage handles a single message request .
1170	addPayloadTasks adds the given payloads to the payload
1171	addTasks adds the given tasks to the queue .
1172	handleUnrecognizedTask handles unrecognized task errors .
1173	v2HandlersSetup sets the v2 handlers for v2 .
1174	v3HandlersSetup is used to setup v3 handlers .
1175	NewMockProvider creates a new mock instance
1176	IsExpired checks if the provider is expired .
1177	IsExpired mocks base method
1178	Retrieve returns the credentials of the provider .
1179	NewMockContainerMetadataResolver creates a new mock instance
1180	ResolveContainer mocks base method
1181	ResolveContainer mocks base method
1182	ResolveTask mocks base method
1183	NewTaskResponse creates a TaskResponse from the given state .
1184	NewContainerResponse returns a container response .
1185	New creates a new Args instance
1186	DefaultConfig returns the default configuration .
1187	New creates a new http client .
1188	RemoveFromTaskArray removes a task from an array .
1189	adjustForPlatform sets the platform field s value .
1190	PlatformHostConfigOverride overrides the default host config .
1191	String returns the string representation of the EniAttachmentStatusMap .
1192	Main function for the main API .
1193	RetryRules returns the retry rules for the given request .
1194	NewMockTime creates a new mock instance
1195	After mocks base method
1196	AfterFunc mocks base method
1197	Now returns the current time .
1198	Now mocks base method
1199	Sleep mocks base method
1200	Sleep mocks base method
1201	NewMockTimer creates a new mock instance
1202	Reset mocks base method
1203	Reset mocks base method
1204	Stop stops the timer .
1205	Stop mocks base method
1206	AddAgentUpdateHandlers adds the update handler to the agent .
1207	SdkDockerClient returns a docker client .
1208	ContainerStateToState returns the container status of the container .
1209	MetadataFromContainer returns the metadata for a container .
1210	ContainerEvents returns a channel s events .
1211	ListContainers returns a list of containers .
1212	ListPluginsWithFilters returns a list of plugins with enabled capabilities .
1213	APIVersion returns the version of the docker client .
1214	LoadImage loads a docker image from a stream .
1215	UpdateContainerReference updates the container s container state .
1216	AddImageName adds an image name to the image state
1217	GetImageNamesCount returns the number of image names .
1218	UpdateImageState updates the image state .
1219	RemoveImageName removes the image from the image state .
1220	HasImageName returns true if the image name matches the given container .
1221	RemoveContainerReference removes a container from the image state
1222	SetPullSucceeded sets the pullSucceeded field s value .
1223	GetPullSucceeded returns the pullSucceeded status of the image
1224	MarshalJSON marshals the image state
1225	UnmarshalJSON deserializes a taskStatus from a JSON string .
1226	MarshalJSON marshals the TaskStatus to JSON .
1227	NewClient creates a new CNNI client
1228	SetupNS creates a new NNI client .
1229	CleanupNS is used to cleanup a namespace .
1230	ReleaseIPResource releases an IP resource
1231	add adds a network to the network
1232	del deletes a network configuration
1233	createBridgeNetworkConfigWithIP creates a new network network configuration .
1234	createBridgeNetworkConfigWithoutIP creates a new NetworkNetworkConfig with the given config .
1235	constructNetworkConfig creates a network configuration for a given plugin
1236	createIPAMNetworkConfig creates an IPAM network configuration .
1237	Version returns the version of the given name .
1238	Capabilities returns the capabilities of a plugin .
1239	New creates a new UdevWatcher .
1240	newWatcher returns a new UdevWatcher .
1241	performPeriodicReconciliation is used to perform a periodic update .
1242	runOnceOnce is the same asynchronously .
1243	sendENIStateChange sends an ENI state change .
1244	buildState builds the state of the device .
1245	sendENIStateChangeWithRetries attempts to send an ENI state change .
1246	Close closes the client .
1247	signRequestFunc is used to sign a request .
1248	publishMetrics is used to publish metrics .
1249	PublishMetricsOnce is used to publish metrics once .
1250	MetricsToPublishMetrics returns a list of available metrics .
1251	publishHealthMetrics is used to publish health metrics .
1252	PublishHealthMetrics is used to publish health metrics .
1253	createPublishHealthRequests returns a list of available tasks .
1254	copyMetricsMetadata creates a new MetricsMetadata .
1255	copyTaskMetrics returns a copy of taskMetric .
1256	copyHealthMetadata returns a copy of the healthMetadata .
1257	copyTaskHealthMetrics returns a copy of taskHealthMetrics .
1258	UnmarshalJSON deserializes the resources map .
1259	NewVolumeResource creates a new volume resource .
1260	KnownCreated returns true if the volume has been created .
1261	setMountPoint sets the mount point to the volume .
1262	GetMountPoint returns the mount point
1263	Create creates a new volume
1264	Cleanup cleans up the volume
1265	MarshalJSON marshals a VolumeResource .
1266	UnmarshalJSON deserializes a volume resource .
1267	NewMockClientCreator creates a new mock instance
1268	NewASMClient creates a new SecretManager interface
1269	NewASMClient mocks base method
1270	NewTransportProtocol returns a TransportProtocol .
1271	String returns the string representation of the TransportProtocol .
1272	UnmarshalJSON deserializes a TransportProtocol .
1273	MarshalJSON marshals the transport protocol .
1274	NewMockManager creates a new mock instance
1275	GetTaskCredentials mocks base method
1276	RemoveCredentials mocks base method
1277	SetTaskCredentials sets the TaskCredentials field s value .
1278	GetDockerAuthFromASM returns the AuthConfig from the secrets manager .
1279	GetSecretFromASM returns the secret value for a given secret .
1280	NewMockCgroupFactory creates a new mock instance
1281	Load loads a cgroup .
1282	Load mocks base method
1283	LoadImage loads the image from the given config file .
1284	NewCgroupResource creates a new cgroup resource .
1285	Create creates a new TaskCgroup
1286	Cleanup cleans up the cgroup resource
1287	MarshalJSON serializes the cgroup resource .
1288	UnmarshalJSON deserializes a cgroup resource .
1289	GetCgroupRoot returns the cgroup root .
1290	GetCgroupMountPath returns the cgroup mount path
1291	Initialize initializes the cgroup resource .
1292	LoadImage loads the image from the given config .
1293	NewECRFactory returns a new ECRFactory instance
1294	GetClient returns an eCR client .
1295	getClientConfig returns an AWS CloudFormationConfig instance
1296	NewMockAuditLogger creates a new mock instance
1297	GetContainerInstanceArn mocks base method
1298	GetContainerInstanceArn mocks base method
1299	Log mocks base method
1300	Log mocks base method
1301	NewMockInfoLogger creates a new mock instance
1302	Info mocks base method
1303	Info mocks base method
1304	taskShouldBeSent returns true if the task has been sent .
1305	send sends an event to the event queue .
1306	sendContainerStatusToECS sends the container status to the container .
1307	sendTaskStatusToECS sends a task status to ECS
1308	setContainerChangeSent sets the container change status .
1309	setTaskChangeSent sets the status of a task change .
1310	setTaskAttachmentSent sets the status of the task .
1311	GetSecretsFromSSM returns a map of secrets from an SSM client .
1312	Main entry point .
1313	IsRetriableError returns true if the container is retriable .
1314	NewMockFile creates a new mock instance
1315	Chmod mocks base method
1316	Chmod mocks base method
1317	Write mocks base method
1318	NewMockOS creates a new mock instance
1319	Create mocks base method
1320	IsNotExist mocks base method
1321	OpenFile mocks base method
1322	RemoveAll mocks base method
1323	NewMockSSMClientCreator creates a new mock instance
1324	NewSSMClient creates a new SSMClient
1325	NewSSMClient creates a new mock instance
1326	NewMockEC2MetadataClient creates a new mock instance
1327	DefaultCredentials mocks base method
1328	DefaultCredentials mocks base method
1329	GetDynamicData mocks base method
1330	InstanceIdentityDocument mocks base method
1331	NewMockHttpClient creates a new mock instance
1332	GetInstanceIdentityDocument mocks base method
1333	GetUserData mocks base method
1334	GetUserData mocks base method
1335	NewMockClient creates a new mock instance
1336	DescribeECagsForInstance mocks base method
1337	NewMockClientSDK creates a new mock instance
1338	CreateTags mocks base method
1339	DescribeTags mocks base method
1340	DescribeTags mocks base method
1341	NewStateManager returns a new state manager .
1342	Save saves the state manager .
1343	Load loads the state of the basic state .
1344	ValidDependencies returns true if the task is valid .
1345	dependencyCanBeanResolved returns true if the container has been resolved .
1346	onSteadyStateIsResolved returns true if the container is still running .
1347	newAgent creates a new instance of EC2Client
1348	printECSAttributes prints the capabilities .
1349	start starts the container
1350	doStart is used to start a Docker agent
1351	newTaskEngine creates a new TaskEngine
1352	setClusterInConfig sets the configuration for the cluster
1353	getEC2InstanceID returns the EC2 instance ID
1354	constructVPCSubnetAttributes returns a list of all vpc subnet attributes .
1355	registerContainerInstance is used to register a container instance
1356	reregisters a container instance
1357	startAsyncRoutines starts the asyncRoutines .
1358	startACSession starts an ACS session .
1359	getContainerInstanceTagsFromEC2API returns the tags for the EC2 API .
1360	mergeTags merges local tags into a list of locales .
1361	SlicesDeepEqual returns true if two slices are equal .
1362	IsAWSErrorCodeEqual returns true if the error code is equal .
1363	MapToTags converts a map to a list of tags .
1364	CredentialsHandlerImpl implements the http . Handler interface .
1365	processCredentialsRequest is used to process a request .
1366	NewTaskHandler creates a new task handler .
1367	AddStateChangeEvent adds a state change event to the task handler .
1368	startDrainEventsTickerTicker starts the drain events .
1369	taskStateChangesToSend returns a list of task state changes .
1370	batchContainerEventUnsafe adds a container state to the container state .
1371	flushBatchUnsafeUnsafe deletes the given task state .
1372	getTaskEventsUnsafe returns the task events for the given event .
1373	submits task events to the scheduler .
1374	sendChange is used to send a changeable event .
1375	SubmitFirstEvent sends the first event to the queue .
1376	getTasksToEventsLen returns the number of tasks in the queue .
1377	handleInvalidParamException throws an exception if an error occurs .
1378	NewMockControl creates a new mock instance
1379	Exists returns true if the given command exists .
1380	Init mocks base method
1381	NewQueue returns a new Queue .
1382	Reset resets the buffer .
1383	Add adds a container to the queue
1384	GetLastStat returns the last stat .
1385	GetRawUsageStats returns a slice of usage statistics .
1386	getCWStatsSet returns a new GCStatsSet .
1387	NewMockCNIClient creates a new mock instance
1388	Capabilities mocks base method
1389	Capabilities mocks base method
1390	CleanupNS mocks base method
1391	ReleaseIPResource mocks base method
1392	SetupNS mocks base method
1393	SetupNS mocks base method
1394	ContainerAssociationsHandler returns a function that handles container associations .
1395	ContainerAssociationHandler returns a handler for a container association .
1396	NewManager creates a new metadata manager
1397	Create creates a metadata container .
1398	Update updates the metadata .
1399	Clean cleans up the metadata directory .
1400	parseAuthData parses the auth data from a json string .
1401	ServeHTTP implements the http . Handler interface .
1402	NewJitteredTicker creates a new ticker .
1403	getTaskENIPluginVersion retrieves the ECSV plugin attribute .
1404	NewMockECSSDK creates a new mock instance
1405	CreateCluster mocks base method
1406	ListTagsForResource mocks base method
1407	NewMockECSubmitState creates a new mock instance
1408	SubmitContainerStateChange mocks base method
1409	NewMockECClient creates a new mock instance
1410	DiscoverPollEndpoint mocks base method
1411	GetResourceTags mocks base method
1412	NewTaskEngine creates a new TaskEngine .
1413	NewMockStateManager creates a new mock instance
1414	NewStateManager mocks base method
1415	NewStateManager mocks base method
1416	NewMockSaveableOption creates a new mock instance
1417	AddSaveable mocks base method
1418	AddSaveable mocks base method
1419	NewECSClient creates a new API client .
1420	CreateCluster creates a cluster
1421	RegisterContainerInstance is used to register a container instance
1422	Connect connects to the server
1423	IsReady returns true if the client is ready .
1424	SetReadDeadline sets the ReadDeadline field s value .
1425	Disconnect closes the connection
1426	WriteMessage sends a message to the server .
1427	ConsumeMessages reads messages from the server .
1428	handleMessage is used to handle a request
1429	AllTasks returns all the tasks .
1430	AllImageStates returns all image state states .
1431	AllENIAttachment returns all ENIAttaches in the container .
1432	ENIiByMac returns the ENI attachment for the given mac .
1433	AddENIAttachment adds an ENI attachment .
1434	RemoveENIAttachment removes an ENI attachment
1435	GetAllContainerIDs returns all the containers in the container .
1436	ContainerByID returns the container by ID .
1437	ContainerMapByArn returns the container map for the given ARN .
1438	TaskByShortID returns a list of tasks with the given short ID .
1439	TaskByID returns the task by ID .
1440	TaskByArn returns the task by ARN .
1441	AddTask adds a task to the registry .
1442	AddContainer adds a container to the registry .
1443	AddImageState adds a new image state
1444	RemoveTask removes a task from the registry .
1445	taskToIPUnsafe returns the IP address for the given ARN .
1446	removeV3EndpointIDUnsafeUnsafeUnsafeUnsafe removes the given V3EndpointID .
1447	RemoveImageState removes the given image state .
1448	AddTaskIPAddress adds a new IP address to the container .
1449	GetTaskByIP returns a task by IP address .
1450	storeV3EndpointIDToTaskUnsafe is used to store v3 endpoint ID .
1451	storeV3EndpointIDToDockerIDUnsafe is used to store v3 endpoint ID .
1452	DockerIDByV3EndpointID returns the DockerID for the given V3 endpoint ID .
1453	TaskARNNNN returns the task ARN for the given V3 endpoint ID .
1454	v1HandlersSetup sets the http handlers for the server
1455	String returns a string representation of the DockerContainer .
1456	NewContainerWithSteadyState returns a new container with the given steady state .
1457	GetKnownStatus returns the known status of the container .
1458	SetKnownStatus sets the KnownStatus field s value .
1459	GetDesiredStatus returns the desired status of the container .
1460	SetDesiredStatus sets the DesiredStatus field s value .
1461	GetSentStatus returns the status of the container .
1462	SetSentStatus sets the status of the container .
1463	SetKnownExitCode sets the known exit code .
1464	GetKnownExitCode returns the known exit code .
1465	SetRegistryAuthCredentials sets the credential credentials
1466	ShouldPullWithExecution checks if the container is in the container
1467	GetSteadyStateStatus returns the state of the container .
1468	IsKnownSteadyState returns true if the container is known .
1469	IsMetadataFileUpdated returns whether the container has been updated .
1470	SetMetadataFileUpdated sets the MetadataFileUpdated field s value .
1471	IsEssential returns true if the container is essential .
1472	SetCreatedAt sets the CreatedAt field s value .
1473	SetStartedAt sets the StartAt field s value .
1474	SetFinishedAt sets the FinishedAt field s value .
1475	GetCreatedAt returns the created time .
1476	GetStartedAt returns the start of the container .
1477	GetFinishedAt returns the finished time .
1478	SetLabels sets the container s labels .
1479	GetLabels returns the container s labels .
1480	SetKnownPortBindings sets the known ports .
1481	GetKnownPortBindings returns the known port bindings .
1482	SetVolumes sets the volumes for the container .
1483	GetVolumes returns the volumes of the container .
1484	SetNetworkSettings sets the NetworkSettings field s value .
1485	GetNetworkSettings returns the network settings for the container .
1486	SetNetworkMode sets the network mode
1487	GetNetworkMode returns the network mode of the container .
1488	SetHealthStatus sets the health status of the container .
1489	GetHealthStatus returns the health status of the container .
1490	BuildContainerDependency builds a container dependency .
1491	updateAppliedStatusUnsafe updates the status of the container .
1492	SetAppliedStatus sets the ApplicationStatus field s value .
1493	GetAppliedStatus returns the application status .
1494	ShouldPullWithASAuth returns true if the container authentication is enabled .
1495	SetASMDockerAuthConfig sets the container auth config
1496	SetV3EndpointID sets the V3EndpointID field s value .
1497	GetV3EndpointID returns the V3 endpoint ID .
1498	InjectV3MetadataEndpoint injects the V3 endpoint .
1499	ShouldCreateWithSSECsecrets returns true if the container has been created .
1500	ShouldCreateWithASMSecrets returns true if the container has been created .
1501	Get metadata file path
1502	getTaskMetadataDir returns the metadata directory for a task .
1503	MarshalJSON implements the Conditional interface .
1504	UnmarshalJSON unmarshals a ConditionalCondition .
1505	NewASMSecretryResource creates a new instance of an ASM .
1506	Create creates a new Secret
1507	retrieveASMSecretryValue retrieves the secret value from the given API .
1508	getRequiredSecrets returns the required secrets
1509	clearASMSecretaryValue removes all secret data from the secret
1510	MarshalJSON marshals the Secret resource .
1511	UnmarshalJSON deserializes a SecretResource from a JSON string .
1512	Create creates a new cgroup .
1513	Remove removes a cgroup .
1514	Exists checks if the given cgroup path exists .
1515	validateCgroupSpec validates cgroup spec
1516	handleInactivityTimeout implements io . Reader .
1517	NewImageManager returns a new ImageManager instance
1518	RecordContainerReference records a container reference to a container .
1519	RemoveContainerReferenceFromImage removes a container from the image state
1520	getImageState returns the image state of the container
1521	removeImageState removes the image state from the docker image
1522	Merge merges two configs .
1523	NewConfig returns a new instance of Config .
1524	trimWhitespace removes whitespace from config
1525	validateAndOverrideBounds checks if the config is valid .
1526	NewTaskStatsResponse returns a map of stats for a container .
1527	NewSession creates a new session
1528	startSessionOnce starts a new ACS session
1529	startACSession starts the ACS session .
1530	waitForDuration returns true if the session has been established .
1531	createACSClient creates a new ACS client .
1532	aclsWsWsURL returns the ACS URL for the ACS service .
1533	newDisconnectionTimer creates a new TCP connection .
1534	anyMessageHandler returns a function that can be used to receive a message .
1535	validateIPRules validates IP rules
1536	WriteJSONToResponse writes the response to the response .
1537	ValueFromRequest returns the value from the request
1538	GetMuxValueFromRequest returns the value from the request .
1539	LimitReachedHandler returns a function that can be used to handle requests .
1540	UnmarshalJSON deserializes a TransitionDependenciesMap from a JSON string .
1541	Add adds a sequence to the queue .
1542	Done is part of the sequence .
1543	NewMockCgroup creates a new mock instance
1544	Add registers a new process .
1545	Add mocks base method
1546	Delete deletes a cgroup .
1547	MoveTo mocks base method
1548	OOMEventFD returns the OOM event file descriptor .
1549	Processes returns a list of processes .
1550	Stat mocks base method
1551	Subsystems mocks base method
1552	TaskStatsHandler returns a handler for a task .
1553	GetKnownAPIVersions returns a list of supported versions .
1554	NewMockUdev creates a new mock instance
1555	Monitor mocks base method
1556	Monitor mocks base method
1557	SetInferenceDevices sets the InferenceDevices field s value .
1558	SetDeviceName sets the DeviceName field s value .
1559	SetDeviceType sets the DeviceType field s value .
1560	DefaultConfig returns the default config
1561	platformString returns the string representation of the platform .
1562	MapTaskToContainerStatus converts a task status to a container status .
1563	Error implements MultiErr interface
1564	NewMultiError creates a new MultiError .
1565	GetPullCredentials returns the pullCredentials .
1566	SetPullCredentials sets the pullCredentials field s value .
1567	GetDockerAuthConfig returns the docker auth config
1568	SetDockerAuthConfig sets the DockerAuthConfig field s value .
1569	NewMockSecretsManagerAPI creates a new mock instance
1570	CancelRotateSecret mocks base method
1571	CancelRotateSecret mocks base method
1572	CancelRotateSecretRequest mocks base method
1573	CancelRotateSecretWithContext mocks base method
1574	CreateSecret mocks base method
1575	CreateSecretRequest mocks base method
1576	CreateSecretWithContext mocks base method
1577	DeleteResourcePolicy mocks base method
1578	DeleteResourcePolicyRequest mocks base method
1579	DeleteResourcePolicyWithContext mocks base method
1580	DeleteSecret mocks base method
1581	DeleteSecretRequest mocks base method
1582	DeleteSecretWithContext mocks base method
1583	DescribeSecret mocks base method
1584	DescribeSecretRequest mocks base method
1585	DescribeSecretWithContext mocks base method
1586	GetRandomPassword mocks base method
1587	GetRandomPasswordRequest mocks base method
1588	GetRandomPasswordWithContext mocks base method
1589	GetResourcePolicy mocks base method
1590	GetResourcePolicyRequest mocks base method
1591	GetResourcePolicyWithContext mocks base method
1592	GetSecretValue mocks base method
1593	GetSecretValueRequest mocks base method
1594	GetSecretValueWithContext mocks base method
1595	ListSecretIds mocks base method
1596	ListSecretVersionsPages mocks base method
1597	ListSecretVersionsWithContextsWithContextsWithContexts returns an error .
1598	ListSecretIdsRequestsRequest mocks base method
1599	ListSecrets mocks base method
1600	ListSecretsPages mocks base method
1601	ListSecretsRequest mocks base method
1602	ListSecretsWithContext mocks base method
1603	PutResourcePolicy mocks base method
1604	PutResourcePolicyRequest mocks base method
1605	PutResourcePolicyWithContext mocks base method
1606	PutSecretValue mocks base method
1607	PutSecretValueRequest mocks base method
1608	PutSecretValueWithContext mocks base method
1609	RestoreSecret mocks base method
1610	RestoreSecretRequest mocks base method
1611	RestoreSecretWithContext mocks base method
1612	RotateSecret mocks base method
1613	RotateSecretRequest mocks base method
1614	RotateSecretWithContext mocks base method
1615	TagResource mocks base method
1616	TagResourceRequest mocks base method
1617	UntagResource mocks base method
1618	UntagateResourceRequest mocks base method
1619	UntagResourceWithContext mocks base method
1620	UpdateSecret mocks base method
1621	UpdateSecretRequest mocks base method
1622	UpdateSecretVersionStage mocks base method
1623	UpdateSecretStageRequest mocks base method
1624	UpdateSecretVersionWithContext mocks base method
1625	UpdateSecretVersionWithContextWithContext mocks base method
1626	UpdateSecretWithContext mocks base method
1627	createBindsEnvEnv creates a set of binds and environment variables
1628	parseMetadataAtContainerCreate returns metadata for the given task .
1629	parseMetadata parses the metadata and returns the metadata .
1630	parseDockerContainerMetadata parses a DockerContainerMetadata from a container .
1631	parseNetworkMetadata parses the network metadata and returns the network metadata .
1632	Initialize initializes the GPU .
1633	SetGPUIDs sets the GPU IDs .
1634	SetDriverVersion sets the DriverVersion field s value .
1635	GetDriverVersion returns the driver version
1636	GetDevices returns the GPU devices .
1637	NewMockLicenseProvider creates a new mock instance
1638	GetText mocks base method
1639	GetText mocks base method
1640	NewMockBackoff creates a new mock instance
1641	Duration mocks base method
1642	Duration mocks base method
1643	UnmarshalText unmarshals a MetadataStatus .
1644	After implements the DefaultTime interface .
1645	AfterFunc is the same as AfterFunc .
1646	Since returns the duration of the given time .
1647	NewMockTaskResource creates a new mock instance
1648	ApplyTransition mocks base method
1649	Cleanup mocks base method
1650	GetCreatedAt mocks base method
1651	GetTerminalReason mocks base method
1652	Initialize mocks base method
1653	KnownCreated mocks base method
1654	MarshalJSON mocks base method
1655	NextKnownState mocks base method
1656	SetAppliedStatus mocks base method
1657	SetAppliedStatus mocks base method
1658	SetCreatedAt sets the CreatedAt field s value .
1659	SetDesiredStatus mocks base method
1660	SetKnownStatus mocks base method
1661	StatusString mocks base method
1662	NewMockLoader creates a new mock instance
1663	LoadImage mocks base method
1664	Error implements the error interface for ContainerNotFound .
1665	String returns a string representation of the DockerContainerChangeEvent .
1666	UnmarshalJSON deserializes a task volume .
1667	MarshalJSON marshals a TaskVolume .
1668	NewSSMClient creates a new SSM client .
1669	GetClient returns a new docker client .
1670	getWindowsReplaceableVersions returns a list of docker versions .
1671	getWindowsSupportedVersions returns a list of docker versions supported by Windows .
1672	PortBindingFromDockerPortBindings returns a slice of port bindings .
1673	NewASMAuthResource creates a new ASMuthResource
1674	Create creates a new auth resource
1675	GetRequiredASMResources returns the required ASM resources .
1676	GetExecutionCredentialsID returns the executionCredentialsID associated with the request .
1677	clearASMDockerAuthConfig removes the DockerAuthConfig from the registry
1678	GetASMDockerAuthConfig returns the auth config for the given secretID
1679	MarshalJSON marshals an ASMuthResource .
1680	UnmarshalJSON deserializes an ASMuthResource .
1681	ContainerMetadataHandler returns a handler for a container .
1682	GetContainerResponse returns a container response from a container .
1683	GetContainerNetworkMetadata returns the network metadata for a container .
1684	Initialize initializes the cgroup resource .
1685	StartDefaultTerminalHandler starts the default termination handler .
1686	FinalSave is used to finish the task engine .
1687	String returns the string representation of the cache key .
1688	NewECRAuthProvider returns a new DockerAuthProvider instance
1689	getAuthConfigFromCache retrieves the auth config from the cache
1690	getAuthConfigFromEC gets the auth config from an ECRA config
1691	IsTokenValid returns true if the token is valid .
1692	createTaskResponse creates a JSON response for a task
1693	NewTaskStateChangeEvent creates a new TaskStateChangeEvent .
1694	NewContainerStateChangeEvent creates a new container state change event .
1695	SetTaskTimestamps sets the TaskTimestamps field s value .
1696	ShouldBeReported returns true if the task state changes .
1697	GetIPV4Addresses returns the list of IP addresses .
1698	GetIPV6Addresses returns the list of IP addresses .
1699	String returns a string representation of ENI .
1700	ENIISFromACS creates an ENI .
1701	ValidateTaskENI is a helper function for ValidateTaskEN .
1702	NewMockPlugins creates a new mock instance
1703	Scan returns a list of plugins .
1704	Scan mocks base method
1705	TaskFromACS creates a Task from ACS .
1706	initializeDockerVolumes initializes all the volumes in the task
1707	addTaskScopedVolumes adds a container to the container
1708	updateContainerVolumeDependency updates container dependencies for a container
1709	initializeCredentialsEndpoint initializes the credentials endpoint .
1710	initializeContainersV3MetadataEndpointEndpoint sets the V3MetadataEndpointID field s value .
1711	requiresASMDockerAuthAuthData returns true if the task is required .
1712	initializeASMAuthResource creates a new AMMuthResource
1713	requiredSSMSecsecrets returns true if the task is required .
1714	initializeSSMSSecretsResource creates a new SSM secret resource .
1715	getAllSSMSECsecrets returns all the required secrets for the task
1716	requiresASMSECsecrets returns true if the task has been created .
1717	initializeASMSecsecretsResource creates an ASM secret resource .
1718	getAllASMSECsecrets returns all required secrets for the task
1719	BuildCNIConfig returns the configuration for the task
1720	convertENITIConfig converts ENI to ENI .
1721	convertAppMeshToCNIConfigConfig converts AppMesh to CNI .
1722	HostVolumeByName returns the volume by name .
1723	UpdateMountPoints updates the mount points for the container .
1724	DockerConfig returns the docker config
1725	DockerHostConfig returns the host config for the given container .
1726	ApplyExecutionRoleLogsAuthLogsAuth logs the execution credentials for the task .
1727	shouldOverrideNetworkMode returns true if the task is enabled .
1728	applyENIHostname sets the ENI hostname field s value .
1729	shouldOverridePIDMode determines whether the task should be overridden
1730	shouldOverrideIPCMode determines if the IPC mode is an IPC mode .
1731	UpdateStatus updates the status of the task .
1732	UpdateDesiredStatus updates the desired status .
1733	SetKnownStatus sets the known status .
1734	GetKnownStatus returns the known status of the task .
1735	GetKnownStatusTime returns the known status time .
1736	SetCredentialsID sets the credentials ID for the task .
1737	GetCredentialsID returns the credentials ID for the task .
1738	SetExecutionRoleCredentialsID sets the ExecutionCredentialsID field s value .
1739	GetExecutionCredentialsID returns the ExecutionCredentialsID associated with the task .
1740	GetDesiredStatus returns the desired status of the task .
1741	SetDesiredStatus sets the DesiredStatus field s value .
1742	GetSentStatus returns the status of the task .
1743	SetSentStatus sets the status of the task .
1744	SetTaskEN sets the ENI
1745	GetTaskEN returns the ENI .
1746	SetAppMesh sets the AppMesh field s value .
1747	GetAppMesh returns the AppMesh
1748	GetStopSequenceNumber returns the stop sequence number .
1749	SetStopSequenceNumber sets the StopSequenceNumber field s value .
1750	SetPullStartedAt sets the PullStartedAt field s value .
1751	GetPullStartedAt returns the pull start time .
1752	SetPullStoppedAt sets the PullStoppedAt field s value .
1753	GetPullStoppedAt returns the pullStoppedAt .
1754	SetExecutionAt sets the ExecutionStoppedAt field s value .
1755	GetExecutionStoppedAt returns the execution time .
1756	StringUnsafe returns a string representation of the task .
1757	RecordExecutionStoppedAt ensures that the task is stopped .
1758	GetResources returns a list of all task resources .
1759	getResourcesUnsafe returns all resources that are unsafe
1760	AddResource adds a resource to the task
1761	SetTerminalReason sets the terminal reason .
1762	GetTerminalReason returns the terminal reason .
1763	PopulateASMAuthData sets the AsmuthData field s value .
1764	getSSMSecretsResource retrieves all the secrets from the task
1765	PopulateSecrets fills the secrets in the container .
1766	getASMSecretsResource retrieves all the resources from the task
1767	getPIDMode returns the PID of the task .
1768	getIPCMode returns the IPC mode
1769	AssociationsByTypeAndContainer returns a list of association names by type .
1770	AssociationByTypeAndName returns the association by type .
1771	newAttachENIIHandler creates a new instance of AttributeNetworkInterface .
1772	handlerFunc returns a function that returns a function that can be used to create a new instance of the AttachNetworkInterface .
1773	handleMessages is used to handle messages .
1774	handleSingleTaskNetworkInterfaces implements the Attach interface .
1775	addENIAttachmentToState is used to add an ENI attachment to the device .
1776	validateAttachTaskNetworkInterfacesMessage returns an error if the message is invalid .
1777	ForceSave mocks base method
1778	ForceSave mocks base method
1779	NewMockClientServer creates a new mock instance
1780	AddRequestHandler mocks base method
1781	AddRequestHandler mocks base method
1782	Connect mocks base method
1783	Disconnect mocks base method
1784	IsConnected mocks base method
1785	MakeRequest mocks base method
1786	SetAnyRequestHandler mocks base method
1787	SetConnection mocks base method
1788	SetReadDeadline mocks base method
1789	ShouldReportToBackend returns true if the state of the containerStatusStatus is true .
1790	BackendStatus returns the state of the container status .
1791	UnmarshalJSON unmarshals a ContainerStatus .
1792	MarshalJSON marshals the ContainerStatus to JSON .
1793	UnmarshalJSON deserializes a container health status .
1794	MarshalJSON serializes the container health status .
1795	publishMetrics is used to publish metrics .
1796	NewMockDockerClient creates a new mock instance
1797	APIVersion mocks base method
1798	ContainerEvents mocks base method
1799	ContainerEvents mocks base method
1800	CreateContainer mocks base method
1801	CreateVolume mocks base method
1802	DescribeContainer mocks base method
1803	InspectContainer inspects a container
1804	InspectImage mocks base method
1805	KnownVersions mocks base method
1806	KnownVersions mocks base method
1807	ListContainers mocks base method
1808	ListImages mocks base method
1809	ListPlugins mocks base method
1810	ListPluginsWithFilters mocks base method
1811	PullImage mocks base method
1812	RemoveImage mocks base method
1813	StopContainer mocks base method
1814	WithVersion mocks base method
1815	NewMockCache creates a new mock instance
1816	Delete mocks base method
1817	Get mocks base method
1818	Set mocks base method
1819	Set mocks base method
1820	newManagedTask creates a new managed task
1821	runTask processes the managed task
1822	Emits the current status of the current task .
1823	waitForHostResources waits for host resources to be processed .
1824	waitSteady polls the state of the managed task .
1825	 steady state of the managed task .
1826	cleanupCredentials removes credentials from the managed task manager
1827	waitEvent waits for the state of the managed task to wait for the status of the task .
1828	handleResourceStateChange updates the state of the resource state .
1829	itContainerEvent emits a container state change event .
1830	releaseIPInIP is used to release the IP in the network
1831	handleStoppedContainerTransition is called when a container is stopped .
1832	handleEventError is used to handle an event change .
1833	handleContainerStoppedTransitionError is called when a container is stopped .
1834	progressTask processes the managed task
1835	isWaitingForACSExecutionCredentialCredentials returns true if the container has been consumed .
1836	startContainerTransitions starts the container transitions .
1837	startResourceTransitions starts the state of the managed task .
1838	transitionResource changes the state of the resource .
1839	applyResourceState applies the state to the task resource .
1840	waitForStopReported returns true if the task is stopped .
1841	NewFactory returns a new factory .
1842	FindClientAPIVersion returns the docker version of the client .
1843	getClient returns a client for the given version .
1844	findDockerVersions returns a map of docker versions for the given endpoint .
1845	runAgent starts the agent .
1846	sleepCtx sleeps until the given duration is reached .
1847	TaskMetadataHandler returns a handler for task metadata .
1848	Subscribe registers a new event handler .
1849	Broadcast the event to the event stream .
1850	Unsubscribe removes a handler from the event stream
1851	WriteToEvent writes an event to the event stream .
1852	Listen for events .
1853	Start listening for events .
1854	SetLevel sets the log level
1855	ForModule creates a new logger for a module
1856	NewMockWebsocketConn creates a new mock instance
1857	ReadMessage mocks base method
1858	SetWriteDeadline mocks base method
1859	Get mocks base method
1860	NewSSMSECsecretsResource creates a new SSMSecredentialResource
1861	Create creates a new Secret
1862	getGoRoutineMaxNum returns the total number of secrets in the secret
1863	retrieveSSECsecretsValuesByRegion retrieves the values from the given region .
1864	retrieveSSECsecretsValues retrieves the secrets from the given region .
1865	clearSSMSecretsValue removes the secret data from the secret
1866	GetCachedSecretValue returns the cached value for the given secret key .
1867	SetCachedSecretValue sets the cached secret value .
1868	Clean mocks base method
1869	SetAvailabilityZone sets the availability zone
1870	SetContainerInstanceARN mocks base method
1871	SetHostPublicIPv4Address mocks base method
1872	NewMockDockerMetadataClient creates a new mock instance
1873	InspectContainer mocks base method
1874	JsonKeys returns a list of keys from b .
1875	TaskContainerMetadataHandler returns a handler for a task container .
1876	WriteContainerMetadataResponse writes the metadata for a container .
1877	WriteTaskMetadataResponse writes a task metadata response .
1878	Init initializes the container .
1879	Error returns the error message .
1880	Retry returns true if the error is retryable
1881	NewMockDockerStateResolver creates a new mock instance
1882	State mocks base method
1883	printLicense prints the license
1884	Load loads a cgroup .
1885	New creates a new cgroup .
1886	timeoutAndMoveOn moves the function to the given function .
1887	UnmarshalJSON implements the DockerTaskEngine interface .
1888	Init initializes the DockerTaskEngine .
1889	MustInit initializes the DockerTaskEngine
1890	isTaskManaged returns true if the task is managed .
1891	syncState synchronizes the state of the DockerTaskEngine .
1892	filterTasksToStartUnsafe returns a list of tasks that have been started .
1893	updateContainerMetadata updates container metadata
1894	syncContainerStatus synchronizes the container status .
1895	checkTaskState checks the state of the task .
1896	SweepTask removes all containers from the Docker task
1897	startTask starts the task
1898	openEventStream opens the container s events .
1899	handleDockerEvents implements the DockerTaskEngine interface .
1900	handleDockerEvent is used to handle a Docker task
1901	AddTask adds a task to the registry .
1902	ListTasks returns all the tasks .
1903	GetTaskByArn returns the task by ARN .
1904	imagePullRequired returns true if the image should be pulled from the container .
1905	cleanPauseContainerNetworkNetwork cleans up the container .
1906	updateTaskUnsafe is used to update a task
1907	transitionContainer is used to transition a container .
1908	applyContainerState applies the current state to the container .
1909	Version returns the version of the docker task
1910	NewMockSSMClient creates a new mock instance
1911	GetParameters mocks base method
1912	GetParameters mocks base method
1913	NewMockFactory creates a new mock instance
1914	FindClientAPIVersion mocks base method
1915	FindKnownAPIVersions returns the list of known API versions .
1916	GetDefaultClient mocks base method
1917	NewMockFileSystem creates a new mock instance
1918	Copy mocks base method
1919	Exit mocks base method
1920	MockAll mocks base method
1921	Open mocks base method
1922	ReadAll mocks base method
1923	Remove mocks base method
1924	Rename mocks base method
1925	 TeeReader mocks base method
1926	initializeTaskENIDependencies initializes the task environment .
1927	setVPCSubnet sets the VPC subnet
1928	startUdevWatcher starts a new udev .
1929	IncrementCallCount increments the counter count for a call
1930	NewMockTaskEngineState creates a new mock instance
1931	AddContainer mocks base method
1932	AddENIAttachment mocks base method
1933	AddImageState mocks base method
1934	AddTaskIPAddress mocks base method
1935	AllImageStates mocks base method
1936	AllImageStates mocks base method
1937	AllTasks mocks base method
1938	ContainerByID mocks base method
1939	ENIByMac mocks base method
1940	GetAllContainerIDs mocks base method
1941	RemoveENIAttachment mocks base method
1942	RemoveImageState mocks base method
1943	RemoveTask mocks base method
1944	RemoveTask mocks base method
1945	TaskARNNNID returns the task ARN for the given V3 endpoint ID .
1946	TaskByArn mocks base method
1947	UnmarshalJSON mocks base method
1948	String returns the string representation of the container type .
1949	UnmarshalJSON deserializes a container type .
1950	MarshalJSON marshals the ContainerType to JSON .
1951	parseNanoTime parses the given value .
1952	NewMockResponseWriter creates a new mock instance
1953	Header mocks base method
1954	Header mocks base method
1955	WriteHeader mocks base method
1956	WriteHeader mocks base method
1957	compareDockerVersions compares two docker versions .
1958	SignHTTPRequest signs a request with the given credentials .
1959	GetClient returns a client .
1960	getAgentVersions returns a list of docker versions
1961	dockerCPUShares returns the size of the container
1962	verifies the task metadata
1963	Verify task metadata
1964	Verify container metadata
1965	NewMockResult creates a new mock instance
1966	GetAsVersion mocks base method
1967	GetAsVersion mocks base method
1968	Print mocks base method
1969	Print mocks base method
1970	ContainerCreate mocks base method
1971	ContainerInspect mocks base method
1972	ContainerList mocks base method
1973	ContainerRemove mocks base method
1974	ContainerStart mocks base method
1975	ContainerStats mocks base method
1976	ContainerStop mocks base method
1977	Events mocks base method
1978	ImageImport mocks base method
1979	ImageInspectWithRaw mocks base method
1980	ImageList mocks base method
1981	ImageLoad mocks base method
1982	ImagePull mocks base method
1983	ImageRemove mocks base method
1984	Ping mocks base method
1985	PluginList mocks base method
1986	VolumeCreate mocks base method
1987	VolumeInspect mocks base method
1988	VolumeRemove mocks base method
1989	ResolveTask implements the DockerContainer interface .
1990	ResolveContainer implements the DockerContainer interface .
1991	synchronizeState synchronizes the container s stats .
1992	addAndStartStatsContainer starts and starts the stats container
1993	MustInit initializes the Docker stats engine
1994	waitToStop waits for the container to stop .
1995	removeAll removes all containers from the container
1996	addContainerUnsafe adds a container to the container
1997	addToStatsContainerMapUnsafe adds the stats container to the map
1998	GetInstanceMetrics returns the metrics for the container
1999	GetTaskHealthMetrics returns the health metrics for the container .
2000	stopTrackingContainerUnsafe shuts down the container .
2001	handleDockerEvents is used to handle docker events .
2002	removeContainer removes a container from the container
2003	newDockerContainerMetadataResolver returns a new DockerContainerMetadataResolver .
2004	taskContainerMetricsUnsafe returns the container metrics for the given task .
2005	resetStatsUnsafe clears the stats queue .
2006	ContainerDockerStats returns the stats for a container .
2007	newMetricsMetadata returns a new MetricsMetadata instance
2008	compareSemver compares two semver versions
2009	ExtractVersion extracts the version number from the input string .
2010	GetIAMRoleCredentials returns the IAMRoleCredentials .
2011	GenerateCredentialsEndpointRelativeURL returns a string representation of the Credentials endpoint .
2012	IAMRoleCredentialsFromACS creates a new IAMRoleCredentials from an ACL .
2013	SetTaskCredentials sets the TaskCredentials field s value .
2014	GetTaskCredentials returns a TaskIAMRoleCredentials instance
2015	RemoveCredentials removes a task from the manager .
2016	verifyResponseFieldNames verifies that the expected fields are valid .
2017	Getpid mocks base method
2018	Getpid mocks base method
2019	AppMeshFromACS returns a new AppMesh instance
2020	buildAppPorts builds the list of app ports .
2021	buildEgressIgnoredIPs returns the list of egress ignoredIPs
2022	buildEgressIgnoredPorts returns an array of egressIgnoredPorts
2023	appendDefaultEgressIgnoredIPIgnoredIPs returns a list of egressIgnoredIPIgnoredIPs that should be added to the default endpoint .
2024	IsInstanceTypeChangedError returns true if an error occurred .
2025	NewNamedError creates a new default named error .
2026	Error returns the error message .
2027	BuildLinuxResourceSpec builds a Linux resource spec .
2028	buildExplicitLinuxCPUSpec builds a Linux CPU CPU .
2029	buildLinuxCPUCPUSpec builds a Linux CPU CPU .
2030	buildLinuxMemorySpec builds a Linux MemoryMemorySpec .
2031	platformHostConfigOverride overrides the default cgroupConfig override .
2032	OverrideCgroupParent sets the cgroup parent for the task
2033	Get MAC address
2034	retrieve attempts to retrieve the mac address
2035	retrieveOnce retrieves the mac address from the network .
2036	IsValidNetworkDevice checks if the device is valid .
2037	ReceiveMessage implements the EventLogger interface .
2038	GetAuthorizationToken retrieves the authorization token .
2039	NewMockEngine creates a new mock instance
2040	ContainerDockerStats mocks base method
2041	ContainerDockerStats mocks base method
2042	GetInstanceMetrics mocks base method
2043	GetInstanceMetrics mocks base method
2044	GetTaskHealthMetrics mocks base method
2045	RetryWithBackoff creates a new retry with the given callback .
2046	RetryWithBackoffCtx returns an error if the callback fails .
2047	RetryNryN attempts to retry an error .
2048	RetryNWithBackoffCtx returns an error with the given number of times .
2049	AddJitter adds a jitter to the given duration .
2050	NewMockIOUtil creates a new mock instance
2051	WriteFile mocks base method
2052	WriteFile mocks base method
2053	DescribeECSTagsForInstance returns a list of EC2 tags for an instance
2054	TaskContainerStatsHandler returns a handler for a task container .
2055	WriteTaskStatsResponse writes the task stats to the response .
2056	WriteContainerStatsResponse writes the stats for a container .
2057	NewTaskResponse creates a TaskResponse from a task map
2058	NewContainerResponse creates a container response .
2059	NewPortBindingsResponse returns a list of port bindings .
2060	NewVolumesResponse returns a slice of volumes for a container
2061	NewTasksResponse returns a new TasksResponse
2062	NewPublishMetricsRequest creates a new PublishMetricsRequest .
2063	NewPublishHealthMetricsRequest creates a new PublishHealthMetricsRequest .
2064	StartListening starts listening for events .
2065	CopyEvents adds the given event to the buffer .
2066	Consume consumes all events from the buffer .
2067	ContainerStatsHandler returns a handler for container stats .
2068	NewMetricsClient returns a new metrics client .
2069	NewMockECRS creates a new mock instance
2070	NewMockECFactory creates a new mock instance
2071	GetClient mocks base method
2072	NewMockECClient creates a new mock instance
2073	GetCredentialsEventType returns the event type for the given role type .
2074	NewMockGPUManager creates a new mock instance
2075	GetDevices mocks base method
2076	GetGPUIDsUnsafe mocks base method
2077	SetDevices mocks base method
2078	SetDriverVersion mocks base method
2079	SetDriverVersion mocks base method
2080	SetGPUIDs mocks base method
2081	SetRuntimeVersion mocks base method
2082	NewMockRoundTripper creates a new mock instance
2083	RoundTrip mocks base method
2084	RoundTrip mocks base method
2085	NewMockNetLink creates a new mock instance
2086	LinkByName mocks base method
2087	LinkByName mocks base method
2088	LinkList mocks base method
2089	LinkList mocks base method
2090	NewMockCNI creates a new mock instance
2091	AddNetwork mocks base method
2092	AddNetworkList mocks base method
2093	DelNetwork mocks base method
2094	DelNetwork mocks base method
2095	DelNetworkList mocks base method
2096	NewLRUCache creates a new cache .
2097	Get returns the value associated with the given key .
2098	Set adds a value to the cache .
2099	Delete removes a key from the cache .
2100	StartTimer starts a timeout timer .
2101	IsSentStatus returns true if the attachment is sent .
2102	SetSentStatus sets the AttachStatus field s value .
2103	StopAckTimer stops ack timer .
2104	HasExpired checks if the environment has expired .
2105	String returns the string representation of the environment .
2106	StringUnsafe returns a string representation of the ENIAttachment .
2107	StartMetricsSession starts the metrics session
2108	StartSession starts a new telemetry session
2109	heartbeatHandler returns a function that sends a heartbeat message .
2110	AckPublishMetricHandler returns a function that returns a function that can be used to receive an AckPublishMetric .
2111	AckPublishHealthMetricHandler is a function that returns a function that returns a function that will be called when ack is received .
2112	anyMessageHandler returns a function that can be used to receive a message .
2113	formatURL returns a string representation of a container
2114	NativeStack returns a GtkStackSwitcher .
2115	NativeComboBox returns a GtkComboBox object .
2116	NativeComboBox returns a GtkComboBoxText object .
2117	NativeAppChooser returns a GtkAppChooser .
2118	NativeAppChooser returns a GtkAppChooser widget .
2119	Native returns the native representation of the PixbufFormat .
2120	NativeAlignment returns a GtkAlignment object .
2121	Native mocks base method
2122	NativeApplicationWindow returns a GtkApplicationWindow .
2123	TypeString returns the type of the variant .
2124	GetString returns the string representation of the variant .
2125	GetStrv returns a slice of strings .
2126	IsType returns true if the variant is of the variant .
2127	NativeFrame clones the frame clock clock .
2128	NativeFrameTimings returns a GoFrameTimings object .
2129	Native exports a GdkMonitor .
2130	Native returns the native native screen .
2131	Native returns the native variant builder .
2132	String returns the string representation of the status .
2133	ToError returns an error .
2134	NativeLevel returns a GtkLevelBar .
2135	NativeAccelGroup returns a GtkAccelGroup object .
2136	NativeAccelMap returns a GtkAccelMap .
2137	dataRaw returns the value of the list .
2138	native returns the current context .
2139	NativeText returns a GtkTextView .
2140	String returns a string representation of the variant type .
2141	Native returns a GtkApplication object .
2142	NativeMenu returns a GtkMenuShell object .
2143	NativeStyle returns a GtkStyleContext
2144	NewMatrix returns a new Matrix .
2145	native returns a copy of the matrix .
2146	InitTranslate initializes the matrix .
2147	InitScale initializes the matrix .
2148	InitRotate initializes the rotation matrix .
2149	Translate translates a matrix to another matrix .
2150	Scale scales the matrix with the specified scale .
2151	Rotate rotates a matrix .
2152	Multiply mocks base method
2153	nativePaperSize returns the GtkPaperSize object .
2154	NativeGLContext returns a GdkGLContext object .
2155	NativeButton returns a GtkButtonBox .
2156	NativeText returns a GtkTextIter .
2157	NativeContext returns the native context .
2158	NativeViewColumn returns a GtkTreeViewColumn .
2159	Native returns a copy of the VariantIterIter .
2160	Next returns the next element .
2161	LookupAction returns the action associated with the given action name .
2162	AddAction adds a new action map
2163	RemoveAction removes an action .
2164	native returns a copy of the surface .
2165	NewSurface creates a new surface .
2166	NativeDialog returns a GtkAboutDialog object .
2167	AddFont adds a font to the font .
2168	Native returns a GtkLabel .
2169	Native returns the native VariantDict .
2170	NativeAction returns a GtkActionable object .
2171	NativeHeader returns a GtkHeaderBar .
2172	Native returns a GtkList .
2173	NativeBoxRow returns a GtkListRow .
2174	Native returns a new GtkRevealer object .
2175	NativeSearch returns a GtkSearchBar object .
2176	BindProperty mocks base method
2177	GetSource returns the source object .
2178	GetTarget returns the target object .
2179	GetFlags returns the flags of the binding .
2180	NativeFontChooser returns a GtkFontChooser .
2181	NativeFont returns a GtkFontButton .
2182	ChangeActionState changes the state of the action group .
2183	Activate activates an action group .
2184	Native returns a GtkWidget object .
2185	Native allocates a GtkAllocation object .
2186	NativeGLArea returns a GtkGLArea object .
2187	Native returns a GtkTreeView .
2188	SetSearchEqualMatch sets the search function to match the search function .
2189	Goal marshals the given closure and returns the result .
2190	gValueSlice returns a slice of values .
2191	 IdleAdd adds a new source to the source
2192	TimeoutAdd adds a timeout to the source .
2193	sourceAttach attaches a source to the source .
2194	Native returns a pointer to a GObject .
2195	Take a pointer to an object .
2196	GetPropertyType returns the type of a property .
2197	Native returns the native representation of this object .
2198	InitI18n initializes i18n
2199	Local converts a string to a local string .
2200	NativeShortcutsSection returns a GtkShortcutSection .
2201	NativeShortcutsGroup returns a GtkShortGroup .
2202	NativeShortcut returns a GtkShortcut
2203	SimpleActionGroupNew creates a new SimpleActionGroup .
2204	ActionNameIsValid returns true if the given action name is valid .
2205	GetName returns the name of the action .
2206	GetState returns the state of the action .
2207	GetStateHint returns the state of the action .
2208	GetParameterType returns the type of the action .
2209	GetStateType returns the current state type .
2210	ChangeState changes the state of the action .
2211	Activate activates the action .
2212	SimpleActionNew creates a new SimpleAction .
2213	SimpleActionful creates a new SimpleAction .
2214	SetEnabled sets the enabled action to be enabled .
2215	PropertyActionNew creates a new property action .
2216	NativeAdjustment returns a GtkAdjustment .
2217	Native returns a GtkAssistant object .
2218	Native returns a GoBinBin object .
2219	NativeButton returns a GtkColorButton .
2220	NativeCellRend returns a GtkCellRenderer .
2221	NativeCellRend returns a GtkCellSpinnerSpinner .
2222	NativeCellRenderer returns a GtkCellRendererPixPixPixPix .
2223	NativeCellRenderer returns a GtkCellRendererText .
2224	NativeCellRenderer returns a GtkCellToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggleToggle .
2225	NativeCheckButton returns a GtkCheckButton .
2226	NativeCheckItem returns a GtkCheckItem .
2227	NativeClipboard returns a GtkClipboard object .
2228	WaitForTextAvailable returns true if the clip is available .
2229	WaitForText returns the text of the clipboard .
2230	WaitForRichTextAvailable returns true if the buffer is available .
2231	WaitIsUrisAvailable returns true if the clip is available .
2232	WaitIsImageAvailable returns true if the clip is available .
2233	SetImage sets the image .
2234	WaitForImage returns a copy of the clipboard .
2235	WaitIsTargetAvailable returns true if the given target is available .
2236	WaitForContents mocks base method
2237	Native returns a GtkContainer object .
2238	Native returns a GtkCssProvider .
2239	Native returns a GtkDialog object .
2240	Native returns a GtkEntry .
2241	NativeEntry returns a GtkEntryBuffer .
2242	NativeEntryCompletion returns a GtkEntryCompletion .
2243	NativeEvent returns a GtkEventBox object .
2244	NativeExpander returns a GtkExpander .
2245	NativeFileChooser returns a GtkFileChooser .
2246	NativeFileChooser returns a GtkFileChooserButton .
2247	NativeFileChooser returns a GtkFileChooser .
2248	NativeFileChooser returns a GtkFileChooser widget .
2249	NativeFilter returns a GtkFileFilter object .
2250	NativeFrame returns a GtkFrame object .
2251	NativeAspectFrame returns a GtkAspectFrame .
2252	Native returns a GtkGrid object .
2253	Native returns a GtkImage .
2254	SetSize sets the size of the layout .
2255	GetSize returns the size of the layout .
2256	NativeLink returns a GtkLinkButton .
2257	NativeStore returns a GtkListStore .
2258	NativeButton returns a GtkMenuButton .
2259	NativeMenu returns a GtkMenuItem .
2260	SetLabel sets the label of the menu item .
2261	GetLabel returns the label of the menu item .
2262	NativeMessage returns a GtkMessageDialog .
2263	NativeNote returns a GtkNotebook object .
2264	NativeWindow returns a GtkOffscreenWindow .
2265	NativeOrientable returns a GtkOrientable object .
2266	NativeOverlay returns a GtkOverlay object .
2267	NativePaned returns a GtkPaned object .
2268	NativeProgress returns a GtkProgressBar .
2269	NativeButton returns a GtkRadioButton .
2270	NativeMenuItem returns a GtkMenuItem .
2271	Native returns a GtkRange object .
2272	NativeChooser returns a GtkChooser .
2273	NativeFilter returns a new GtkFilter object .
2274	Native returns a GtkScale object .
2275	NativeScrollbar returns a GtkScrollbar .
2276	NativeScrolledWindow returns the native window .
2277	NativeSearchEntry returns a GtkSearchEntry .
2278	NativeSelectionData returns a GtkSelectionData object .
2279	GetData returns the data of the selection .
2280	GetData gets the data from the given pointer .
2281	SetData sets the data for the given atom .
2282	DragSetIconPix sets the icon of a dragbuffer .
2283	nativeSeparator returns a GtkSeparator .
2284	NativeMenuItem returns a GtkSeparator .
2285	NativeTool returns a GtkSeparatorToolItem .
2286	NativeButton returns a GtkSpinButton .
2287	Native returns a GtkSpinner object .
2288	NativeStatus returns a GtkStatusBar .
2289	Native returns a Gtk switch .
2290	NativeText returns a GtkTextTag .
2291	NativeText returns a GtkTextTag .
2292	NativeText returns a GtkTextBuffer .
2293	SelectRange implements the TextBuffer interface .
2294	NativeToggle returns a GtkToggleButton .
2295	NativeTool returns a GtkTool .
2296	NativeButton returns a GtkToolButton .
2297	NativeToolButton returns a GtkToggleToolButton .
2298	NativeTool returns a GtkToolItem .
2299	NativeIter returns a GtkTreeIter .
2300	NativeTree returns a GtkTreeModel object .
2301	TreePathFromList creates a TreePath from the given list .
2302	NativePath returns a GtkTreePath .
2303	GetIndices returns the indices of the tree path .
2304	NativeSelection returns a GtkTreeSelection .
2305	GetPath returns the path of the tree row .
2306	GetModel returns the tree of the tree row .
2307	Valid returns true if the tree is valid .
2308	Native returns a GtkTreeStore .
2309	Insert inserts a new tree .
2310	GetDefaultDefault returns the default settings .
2311	NativeText returns a GtkTextMark object .
2312	native returns a copy of the pattern .
2313	Native returns a GtkWindow .
2314	NativeAt returns a GdkAt atomically .
2315	GdkAtom creates an atom from an atom name .
2316	NativeDevice returns a GdkDevice .
2317	Native converts the cursor to a GdkCursor .
2318	NativeDevice mocks base method
2319	NativeDisplay returns a GdkDisplay object .
2320	NativeDragContext returns the gdk drag context .
2321	NativeEvent returns the native GdkEvent .
2322	XRoot returns the X root of the event button .
2323	YRoot returns the y root of the event button .
2324	SetColors sets the color of the RGBA .
2325	NativeWindow returns a GdkWindow .
2326	ClosureNew creates a new closure .
2327	NativeChooser returns a GtkColorChooser .
2328	NativeChooserDialog returns a GtkColorDialog .
2329	Native returns a Go source object .
2330	Translate translates the given coordinates to the current context .
2331	Scale scales the current context
2332	Rotate rotates the specified angle .
2333	Transform applies a transformation to the current context .
2334	SetMatrix sets the matrix .
2335	GetMatrix returns the current matrix .
2336	UserToDevice converts a user to a device .
2337	UserToDeviceDistance returns the distance between two points .
2338	DeviceToUser converts a device to a user .
2339	DeviceToUserDistance returns the distance between two points .
2340	Draw draws the sprite to the screen .
2341	Length returns the length of the stream .
2342	Decode decodes an audio stream .
2343	IsMouseButtonPressed returns true if mouse button pressed .
2344	Touch returns a slice of TouchIDs .
2345	paeth returns the value of a given b .
2346	filterPath filters the pixel data in pixels
2347	MipmapLevel returns the mipmap level for the given det .
2348	hideConsoleWindowOnWindows is used to hide the console window .
2349	DepthMask sets the depth mask .
2350	EdgeFlag sets the edge flag .
2351	TexImage3 draws a texture into a texture .
2352	Queries returns the quad vertices of the image .
2353	PutVertex implements the Image interface .
2354	scaleUpdater updates the current scale .
2355	NewBoard creates a new board .
2356	Update updates the board .
2357	Move moves the board to the board .
2358	Size returns the size of the board .
2359	Draw draws the board .
2360	ClearIndex clears the index .
2361	CreateProgram creates a new program .
2362	DebugMessageCallback registers a callback for debugging .
2363	GetError returns the value of the error .
2364	GetGraphicsResetStatus returns the status of the terminal .
2365	LineWidth sets the line width
2366	PassThrough passes the given token to the given token .
2367	PointSize sets the size of a point .
2368	IsReady returns true if the context is ready .
2369	NewPlayerFromBytes creates a new Player from the given bytes .
2370	Close closes the player .
2371	Seek implements the Player interface .
2372	decode decodes the image .
2373	Decode decodes an image .
2374	DecodeConfig decodes the given io . Reader .
2375	Add adds a new color to the current color .
2376	IsButtonPressed returns true if the given button is pressed .
2377	ButtonName returns the name of a button .
2378	AppendHookOnBeforeUpdate adds a function to the hook .
2379	DebugPrint prints a string with the given string .
2380	GamepadIDPressed button
2381	Seek implements the Stream interface .
2382	decode decodes an audio stream .
2383	MovePieceToLeft moves the piece to the left corner of the given piece .
2384	RotatePieceRight returns the angle of the given piece .
2385	RotatePieceLeft returns the left side of the given piece .
2386	flushable returns true if all lines are flushed .
2387	flushableLine returns true if the field is a block .
2388	flushLine removes the line at the given index .
2389	intersect returns the intersection of two lines
2390	RayCasting returns a slice of all points in the given object .
2391	Str converts a string to a uint8 .
2392	Close closes the stream .
2393	NewWorld creates a new world .
2394	init initializes the world area
2395	Update the world area
2396	Draw panics on the world
2397	DrawLine draws a line .
2398	DrawRect adds a rectangle to the image .
2399	NewGame creates a new game .
2400	Update updates the game .
2401	Draw draws the game .
2402	IsKeyJustReleased returns true if the key has been released .
2403	KeyPressDuration returns the duration of the given key .
2404	IsMouseButtonJustReleased returns true if the mouse button has been released .
2405	MouseButtonPressDuration returns the duration of the given mouse button .
2406	JustConnectedGamepadIDs returns the list of gamepad IDs .
2407	IsGameJustDisconnected returns true if the gamepad has been disconnected .
2408	IsGamepadButtonJustPressed returns true if the game has been pressed .
2409	IsGamepadButReleased returns true if the gamepad button has been released .
2410	GamepadButtonPressDuration returns the duration of the gamepad .
2411	JustPressedTouchIDs returns the list of all touch IDs that are pressed .
2412	IsTouchJustReleased returns true if the given id has been released .
2413	TouchPressDuration returns the touch duration for the given id .
2414	viewportSize returns the size of the image .
2415	Loop starts a goroutine .
2416	Run runs a function with the given function .
2417	InternalImageSize returns the internal image size .
2418	Square calculates the square of a square .
2419	Play note .
2420	the piano at the given frequency
2421	Play note
2422	Draw implements the image .
2423	String returns a string representation of GeoM .
2424	Reset resets the geometry
2425	Concat concatenate a GeoM .
2426	Rotate rotates the given angle .
2427	Invert returns the coordinates of the geometry .
2428	ScaleGeo returns a GeoM with the given coordinates .
2429	TranslateGeo returns a GeoGeoGeo object .
2430	RotateGeo returns a new GeoM .
2431	newFramebufferFromTexture creates a framebuffer from a texture .
2432	newScreenFramebuffer returns a new framebuffer .
2433	aque returns true if the image is opaque .
2434	writeIDATs writes the image to the buffer .
2435	zlibToZlib returns zlib zlib . zlib . zlib
2436	Encode writes the image to w .
2437	Encode writes the image to w .
2438	NewImage creates a new image
2439	NewScreenFramebufferImage returns a new image frame .
2440	internalSize returns the size of the image .
2441	makeStale clears the image .
2442	ReplacePixels replaces the image with the given width and height .
2443	DrawTriangles draws the given vertices .
2444	appendDrawTriangles creates a new drawTriangles history .
2445	makeStaleIf sets the stale image if it is stale .
2446	readPixelsFromGPU reads from GPU .
2447	resolveStale checks if the image is stale .
2448	dependOn returns true if the image is dependent on the image .
2449	dependImages returns a map of all the images in the image .
2450	hasDependency returns true if the image has a dependency .
2451	Disposes the image .
2452	IsInvalidated returns true if the image is invalidated .
2453	NewImage creates a new image
2454	Pixels returns the result of the image .
2455	CopyPixels copies the image .
2456	Pos returns the current position of the current tile .
2457	NextPos returns the next position of the tile .
2458	NewTile returns a new Tile .
2459	MoveTiles moves the tiles to the specified size .
2460	Update updates the tile .
2461	String returns a string representation of the color .
2462	ScaleColor scales a color
2463	TranslateColor converts a color to a color .
2464	RotateHue returns the color of the current color .
2465	availableFilename returns the filename for the given prefix .
2466	appMain is the main function for the application
2467	repeatedKeyPressed returns true if the given key is repeating .
2468	totalBytes returns the total number of bytes .
2469	newArrayBuffer returns a new buffer buffer .
2470	enable implements the ArrayBuffer interface .
2471	disable disables all vertices .
2472	reset the state of the openGL state .
2473	CompareFloat32ArrayArray returns true if two floats are equal .
2474	NewInfiniteLoopWithIntro returns a new infinite loop .
2475	Read implements io . Reader interface .
2476	Seek implements io . Seek interface .
2477	remove removes the image from the list
2478	resolveStaleImages resizes stale images .
2479	Move forward forward to the game
2480	RotateRight rotates the player .
2481	RotateLeft rotates the player .
2482	updateGroundImage updates the current game .
2483	drawGroundImage draws the ground of the given image .
2484	String returns the string representation of the directory .
2485	Update updates the mouse state .
2486	Dir returns the current state of the input .
2487	Read reads from the stream .
2488	Size returns the size of the image
2489	Fill fills the image with the given color .
2490	Bounds returns the bounds of the image .
2491	Disposes the image .
2492	NewImage creates a new Image
2493	makeVolatile mocks base method
2494	IsFullscreen returns true if the user is fullscreen .
2495	glfwSize returns the width of the window .
2496	getScale returns the scale of the screen
2497	actual screen scale
2498	Set screen size
2499	currentMonitor returns the current monitor .
2500	CopyImage returns a copy of the image .
2501	appendVertices appends vertices to the queue .
2502	EnqueueTrianglesCommand adds a triangle to the queue .
2503	Enqueue adds a command to the queue .
2504	Flush all commands .
2505	ExecuteTriangles command
2506	CanMerge returns true if the command is valid .
2507	Executes the replacePixels command .
2508	Exec execute command
2509	Exec executes the command .
2510	Exec executes the command .
2511	Execute the screenbuffer command
2512	schemaHostNetworkPolicy returns a schema schema for host network .
2513	expandHostNicCriteria returns a HostNicFailureCriteria instance
2514	flattenHostNicFailureCriteria flattens a HostNicFailureCriteria
2515	expandHostNicPolicyPolicy creates a HostNicPolicyPolicy .
2516	FlattenHostNicPolicy flattens a HostNicPolicyPolicy .
2517	expandHostNicTeamingPolicy creates a HostNicTeamingPolicy .
2518	flattenHostNicTeamingPolicy recursively flattens a HostNicPolicy .
2519	expandHostNetworkSecurityPolicy creates a HostNetworkSecurityPolicy .
2520	flattenHostNetworkSecurityPolicy flattens a HostNetworkSecurityPolicy .
2521	expandHostNetworkTrafficPolicy creates a HostNetworkTrafficPolicy .
2522	flattenHostNetworkTrafficPolicy flattens HostNetworkTrafficPolicy .
2523	expandHostNetworkPolicy creates a HostNetworkPolicy .
2524	flattenHostNetworkPolicy flattens a HostNetworkNetworkPolicy object
2525	schemaNasVolumeSpec returns a schema for hostNas volume .
2526	expandHostNasVolumeSpec returns a HostNasVolumeSpec .
2527	flattenHostNasVolume flattens a HostNasVolume
2528	isNASVolume returns true if the given host is a NFS volume .
2529	expandVMVSPortgroupPolicy expands a VMware DVPortgroup policy .
2530	flattenVMDVSPortgroupPolicy flattens a VMware DVSPORT policy .
2531	expandDVPortgroupConfigSpec returns a DVPortgroupConfigSpec .
2532	flattenDVPortgroupConfigInfo recursively flattens a DVPortgroup configuration object .
2533	expandClusterHostGroup expands a cluster group .
2534	flattenClusterHostGroup is a helper function to flatten the clusterHostGroup
2535	resourceVSphereComputeClusterHostGroupFlattenID returns a string representation of the cluster .
2536	resourceVSphereComputeClusterGroupFetchObjects fetches the cluster and returns it .
2537	netifKey returns a string representation of the network interface .
2538	matchGateway returns true if the given address is a gateway
2539	expandCustomizationGlobalIPSettings retrieves the custom customizations for the given resource .
2540	expandCustomizeLinuxPrep returns an instance of CustomizationLinuxPrepares
2541	expandCustomizationGuiRunOnce returns a new CustomizationGuiRunUniRunOnceRun .
2542	expandCustomizationGuiUnattended returns a CustomizationGuiUnattended from the resource data .
2543	expandCustomizationIdentification returns a custom customization identifier .
2544	expandCustomizationUserData returns a custom customization user data .
2545	expandCustomizationSysprep returns a new CustomizationSysprep .
2546	expandCustomizationSysprepText returns the CustomizationSysprepText field .
2547	expandCustomizationIPSettingsIPV6AddressSpec returns a custom customization for the given network .
2548	expandCustomizationIPSettings returns a custom customization for the given network .
2549	expandSliceOfCustomizationAdapterMappingMapping mappings
2550	ExpandCustomizationSpec returns a custom customization spec .
2551	ValidateCustomizationSpec validates customization spec .
2552	schemaHostVirtualSwitchBridgeBondBridge returns a schema schema map .
2553	expandHostVirtualSwitchConfig returns an instance of HostVirtualSwitchConfigConfig
2554	flattenHostVirtualVirtualSwitchConfig is a helper function to flatten a HostVirtualSwitchConfig
2555	expandLinkDiscoveryProtocolConfig returns an instance of LinkDiscoveryProtocolConfig .
2556	flattenLinkDiscoveryProtocolConfig flattens a LinkDiscoveryProtocolConfig .
2557	expandHostVirtualSwitchBridge creates an instance of HostVirtualSwitchBridgeBridge
2558	FlattenHostVirtualSwitchBridge is used to flatten the HostVirtualSwitchBridge interface .
2559	schemaVirtualVirtualSwitchSpec returns a schema schema for the host virtual machine .
2560	expandHostVirtualSwitchSpec returns a HostVirtualSwitchSpec .
2561	flattenHostVirtualSwitchSpec flattens a HostVirtualSwitchSpec .
2562	saveHostVirtualVirtualSwitchID is used to save a host virtual machine
2563	virtualSwitchSwitchIDsFromResourceID returns a list of virtual switches from the given resource .
2564	expandStorageDrsVMConfigInfo returns the storage DRSVConfigInfo for the given vm .
2565	flattenStorageDrsVMConfigInfo is used to flatten StorageDrsVmConfigInfo .
2566	resourceVSphereStorageVdrOverrideFlushIDFlattenID returns a string representation of the VSphereStorageDRSVD .
2567	resourceVSphereStorageVRSOverrideFindEntry retrieves the storage for the given pod .
2568	NetworkInterfaceSubresourceSchema returns a map of network interfaces .
2569	NewNetworkInterfaceSubresource creates a new network interface .
2570	NetworkInterfaceDiffOperation returns the network interface for the given resource diff .
2571	ReadNetworkInterfaceTypes reads a list of network interfaces .
2572	baseVirtualEthernetVirtualEthernetToBaseVirtualDevice converts a VirtualEthernetCardCardCardCardCardCard .
2573	baseVirtualVirtualEthernetToBaseVirtualEthernetCard converts a base virtual machine to a base virtual machine .
2574	virtualEthernetCardCardString returns the type of the virtual network interface .
2575	Create creates a virtual network interface
2576	Read reads the network interface from the list of virtual devices .
2577	Delete deletes a virtual device
2578	ValidateDiff validates the resource interface .
2579	nicUnitRange returns the number of units in the list .
2580	hostStorageSystemStorageFromHostID returns the host storage system .
2581	FromUUID creates a virtual machine from the API .
2582	virtualMachineFromSearchIndex returns the virtual machine from the search index .
2583	virtualMachineViewFromContainerView creates a virtual machine from a container view
2584	Properties returns the properties of a virtual machine .
2585	WaitForGuestIP returns an error if the VM is not in the VM .
2586	WaitForGuestNet waits for a virtual machine to be configured on the VM .
2587	Create creates a virtual machine .
2588	Clone clones a virtual machine
2589	Customize creates a new virtual machine .
2590	MoveToFolder mocks base method
2591	Relocate a virtual machine
2592	MOIDForUUID returns the MOID for a UUID .
2593	UUIDForMOID returns the UUID for the VM .
2594	MOIDForUUIDs returns a list of MOIDs for a given UUID .
2595	UUIDsForMOID returns a list of UUIDs for the given moids .
2596	UUIDsForManagedObjectReferences returns UUIDs for a ManagedObjectReference .
2597	MOIDs returns a slice of MOIDs .
2598	ManagedObjectReferences returns a list of ManagedObjectReferences .
2599	UUIDs returns a slice of UUIDs .
2600	FromKeyGroup retrieves a DistributedPortGroupGroupGroup from a DVS .
2601	FromMOID returns a DistributedVirtualPortgroup .
2602	FromPath returns a DistributedVirtualPortgroup from the given path .
2603	Properties returns the properties of the property .
2604	Create a new DVPortgroup
2605	Properties returns the properties of a Datastore .
2606	MoveToFolder mocks base method
2607	MoveToFolderSystemRelativeToFolderRelative moves the host system to the specified host system .
2608	Browser returns an instance of HostDatastore
2609	SearchDatastore searches for a given datastore .
2610	FileExists returns true if the given name exists .
2611	FromPath returns a VirtualApp from the given path .
2612	FromID returns a VirtualApp from the given ID .
2613	IsVApp returns true if the VApp is VApp
2614	Create a VirtualApp
2615	Update an existing VAppConfig
2616	ResourceIDString returns a string representation of a resource ID .
2617	SliceInterfacesToStrings converts an interface to strings .
2618	SliceStringsToInterfaces converts strings to interfaces .
2619	SliceInterfacesToManagedObjectReferences converts slice of interfaces to ManagedObjectReferences .
2620	BoolStringPtrPtr converts a string to a string .
2621	ValidateBoolStringPtr returns an error if the value is valid .
2622	BoolPolicy returns a new BoolPolicy .
2623	GetBoolPolicy returns a BoolPolicy .
2624	SetBoolPolicy sets the BoolPolicy field s value .
2625	StringPolicy creates a new StringPolicy
2626	GetStringPolicy returns the string value for the given key .
2627	SetStringPolicy sets the value of a string .
2628	LongPolicy creates a long policy .
2629	GetLongPolicy returns the LongPolicy from the given key .
2630	SetLongPolicy sets the LongPolicy field s value .
2631	AllFieldsEmpty returns true if v is empty .
2632	DeRef returns the value of the given value .
2633	Less returns true if the given index is less than j .
2634	Swap swaps the elements in the sorted order .
2635	hostDatastoreSystemIDFromHostID returns host datastore system
2636	availableScsiDisk returns the system scsi disk for the given name .
2637	diskSpecForCreate returns the disk spec for the specified device .
2638	diskSpecForExtend returns the disk spec for the specified device .
2639	removeDatastore removes a datastore
2640	queryVmfsExtendOptions returns a list of VMsfsOptions for the specified device .
2641	extendVmfs implements the VirtualDatastore interface .
2642	setVSphereComputeDefaultsImportSetImportDefaults sets the default values for a resource .
2643	resourceVSphereClusterApply creates a ClusterClusterResource
2644	resourceVSphereClusterClusterApply applies the tags to the cluster .
2645	resourceVSphereClusterClusterReadTags retrieves all tags for a given cluster .
2646	resourceVSphereComputeCustomAttributesApplyApplyApplyCustomAttributes applies the custom attributes to the given resource .
2647	resourceVSphereClusterClusterReadClusterReadClusterReadCluster retrieves all custom attributes from the given resource .
2648	resourceVSphereClusterGetClusterCluster retrieves a ClusterClusterResource
2649	resourceVSphereComputeClusterFromPath returns a ClusterClusterResource
2650	resourceVSphereClusterSaveClusterSaveCluster saves the datacenter of the cluster .
2651	resourceVSphereClusterClusterSaveName saves the name of the cluster .
2652	resourceVSphereClusterClusterApply changes the name of the cluster .
2653	resourceVSphereChangeClusterChanges applies a folder change to a folder .
2654	resourceVSphereClusterValidateEmptyClusterValidateEmptyClusterValidate checks if the cluster is empty .
2655	resourceVSphereClusterApplyDelete deletes a cluster .
2656	resourceVSphereComputeClusterClusterData flattens the cluster data into the vSphere cluster .
2657	expandClusterConfigSpec returns a clusterConfigSpec .
2658	flattenClusterConfigSpecExistSpec is a helper function to flatten the cluster configuration .
2659	expandClusterDasConfigInfo returns an instance of ClusterDasConfigInfo .
2660	flattenClusterDasConfigInfo is used to flatten a clusterDasConfigInfo .
2661	expandBaseClusterAdmissionControlPolicy returns a BaseClusterDasAdmissionControlPolicy for the given policy .
2662	flattenBaseClusterAdmissionControlPolicy flattens the base64AdmissionControlPolicy to be used to flatten the given object .
2663	expandClusterFailoverResources creates a ClusterFailoverControlPolicy .
2664	FlattenClusterFailoverResources flattens the cluster failover resources .
2665	expandClusterFailoverControlPolicy creates a ClusterFailoverControlPolicyPolicy .
2666	flattenClusterFailoverPolicyAdmissionPolicy flattens the cluster failover policy .
2667	expandClusterFailoverHostAdmissionPolicy creates a cluster failover policy .
2668	flattenClusterFailoverHostAdmissionPolicy flattens the cluster failover policy .
2669	expandClasVASVMSVSettings returns a ClusterDMSVSettings object .
2670	FlattenClasVMSVMSVSettings flattens a clusterDMSVMSVMSVMSVMSVSettings into a CloudFormation object .
2671	expandClusterVMComponentProtectionSettings returns a ClusterVmComponentProtectionSettings .
2672	flattenClusterVMComponentProtectionSettings flattens the cluster vmComponentProtection settings .
2673	expandClusterVMToolsMonitoringSettings returns a ClusterVMToolsMonitoringSettings instance
2674	FlattenClusterVMToolsMonitoringSettings updates the cluster vmools settings .
2675	expandClusterDpmConfigInfo returns a ClusterDpmConfigInfo instance
2676	flattenClusterDpmConfigInfo flattens the cluster dpmConfigInfo into a structure .
2677	expandClusterDRSConfigInfo returns an instance of ClusterDRSConfigInfo .
2678	FlattenClusterDrsConfigInfo flattens the cluster drs configuration .
2679	expandResourceVSphereAdvancedOptions returns a list of options for the given resource .
2680	expandClusterInfraUpdateInfo returns a ClusterInfraUpdateInfo instance
2681	FlattenClusterInfraUpdateInfo is used to flatten the clusterInfraUpdateInfo fields .
2682	expandClusterOrchestrationInfo returns a ClusterOrchestrationInfo instance
2683	FlattenClusterOrchestrationInfo flattens the clusterOrchestrationInfo fields .
2684	expandClusterProactiveDrsConfigInfo returns an instance of ClusterProactiveDrsConfigInfo .
2685	flattenClusterProactiveDrsConfigInfo flattens the clusterProactiveDrs configuration .
2686	Properties returns the properties of a pod .
2687	Create creates a storage pod .
2688	ApplyDRSConfiguration applies the specified StorageDRS configuration .
2689	Rename renames a pod .
2690	MoveToFolder mocks base method
2691	StorageDRSEnabled returns true if the pod is enabled .
2692	CreateVM creates a virtual machine .
2693	CloneVM clones a virtual machine
2694	ReconfigureVM is used to reconfigure the VM .
2695	RelocateVM implements the Storage interface .
2696	HasDiskCreationOperations returns true if the given list of devices have been created .
2697	IsMember returns true if the given Pod is member of the given Pod .
2698	NewConfig returns a new Config instance
2699	Client returns a new VSphere client
2700	EnableDebug enables debugging .
2701	sessionFile returns the session file name .
2702	vimSessionFile returns the file path for the Vim session .
2703	restSessionFile returns the path to the rest session file .
2704	SaveVimClient saves the VVM client to disk .
2705	SaveRestClient saves the rest of the rest client .
2706	restoreVimClient restores the vim session
2707	readRestSessionID returns the rest session ID .
2708	LoadVimClient loads a vim client
2709	LoadRestClient loads a REST client from a URL .
2710	SavedVimSessionOrNew creates a new VVM session or returns it .
2711	SaveRestSessionOrNewSessionOrNew creates a new REST session .
2712	wait waits until the VM is completed
2713	selectEventsForReference returns a list of events for a given reference
2714	getDatastore returns the datastore for the given ds .
2715	resourceVSphereVirtualMachineUpdateReconfigUpdateReconfig is used to reconfigure a virtual machine .
2716	resourceVSphereVirtualMachineCreateBareWithSDRS creates a virtual machine .
2717	resourceVSphereStandardCreateBareStandard creates a virtual machine .
2718	resourceVSphereVirtualMachineCreateWithSDRS creates a virtual machine .
2719	resourceVSphereVirtualMachineRollbackRollback creates a new virtual machine .
2720	resourceVSphereVirtualMachineRelocateLocationRelocateRelocateLocationRelocateWithSDRS updates the virtual machine .
2721	Apply virtual devices
2722	expandClusterDpmHostConfigInfo returns an instance of ClusterDpmHostConfigInfo .
2723	flattenClusterDpmHostConfigInfo flattens a clusterDpmHostConfigInfo into a structure .
2724	resourceVSphereDPMHostOverrideFlattenID returns a string representation of the VSphereDPM host .
2725	resourceVSphereDPMHostOverrideFindEntry finds the DPMHostConfig for the given host .
2726	resourceVSphereVirtualDisk returns a ResourceVSphereResource
2727	createHardDisk creates a hard disk .
2728	searchForDirectory searches for a directory for a given directory .
2729	processMountOperations processes mount operations
2730	processUnmountOperations handles unmount operations .
2731	isEligibleTagEndpoint returns true if the client is eligible for the specified client .
2732	tagCategoryByName returns the tag by name .
2733	tagByName returns the tag by name .
2734	tagsSchema returns a schema schema .
2735	tagTypeForObject returns the tag type for the given object .
2736	readTagsForResource reads the tags for a resource .
2737	diff returns the diff between two tags .
2738	processAttachOperations processes the tags and attaches them to the object .
2739	tagsClientIfDefined returns a client for the given resource .
2740	processTagDiff processes the tags of the given object .
2741	expandDVSContactInfo returns a DVSContactInfo object .
2742	flattenDVSContactInfo flattens a DVSContactInfo object .
2743	expandDistributedVirtualVirtualVirtualSwitchMemberSpec returns a DistributedVirtualVirtualSwitchHostMemberSpecSpec .
2744	FlattenDistributedVirtualSwitchHostMember returns a map of all the devices in the given object .
2745	expandSliceVirtualVirtualSwitchHostMemberSpec returns a slice of DistributedVirtualSwitchHostMemberSpecSpecSpecSpecSpecSpecSpecSpec .
2746	flattenSliceVirtualVirtualSwitchHostMember flattens a list of DistributedVirtualVirtualVirtualSwitchHostHostMemberHostMember objects into a map .
2747	expandVMIpfixConfig returns an instance of VMwareIpFixConfig
2748	FlattenVMIpfixConfig flattens a VMware IPfixConfig
2749	flattenDvsHostInfrastructureResource flattens a DVSHostInfrastructure resource .
2750	expandDVSNamePplinkPolicyPolicy expands a DVS name to a DVS name .
2751	flattenDVSNameArrayPplinkPortPolicy flattens a DVS name into a DVSNameArray .
2752	expandVMDVSConfigSpec returns a VMwareDVSConfigSpecSpec .
2753	flattenVMDVSConfigInfo recursively flatten a VMwareDVSDVSConfigInfo object .
2754	schemaDVSCreateSpec returns a schema for dvs .
2755	expandDVSCreateSpec returns an instance of DVSCreateSpec .
2756	getWithRestart returns the value of the given key
2757	vAppSubresourceSchema returns a map of VAppSubresource .
2758	expandVirtualMachineBootOptions expands virtual machine bootstrap options .
2759	flattenVirtualMachineBootOptions flattens the virtual machine configuration .
2760	expandVirtualMachineFlagInfo returns the virtual machine flag .
2761	flattenVirtualMachineFlagInfo flattens virtual machine flag info .
2762	expandToolsConfigInfo returns the tools config info for the given resource .
2763	flattenToolsConfigInfo flattens the tools configuration for the given object .
2764	schemaVirtualMachineResourceAllocation allocates a map of virtual machine resources .
2765	expandVirtualMachineResourceAllocation returns the resource allocation info .
2766	expandLatencySensitivity returns a LatencySensitivity .
2767	flattenLatencySensitivity adds a LatencySensitivity to a resource .
2768	flattenVirtualMachineResourceAllocation is used to flatten the resource data .
2769	flattenVAppConfig flattens the VAppConfig from the vmConfig
2770	expand virtual machine config
2771	flattenVirtualMachineConfigInfo flattens a virtual machine configuration .
2772	expandVirtualMachineConfigChangeSpecChanges is used to expand virtual machine configs .
2773	getMemoryReservationLockedToMaxMaxMaxLock is used to determine whether the resource is locked .
2774	FromPathOrDefault returns a ResourcePool with the given name .
2775	Properties returns the properties of the resource pool .
2776	ValidateHost validates the host
2777	OSFamily returns the OS family of the VM .
2778	Create creates a resource pool
2779	Update an existing resource pool
2780	MoveIntoResourcePool mocks base method
2781	expandClusterDasVMConfigInfo returns a ClusterDASVConfigInfo object for the given VM .
2782	FlattenClasVASVConfigInfo flattens the cluster DASV settings .
2783	resourceVSphereHAVMOverrideFlattenID returns a string that will be used to generate the VSphereHA VM for the given VM .
2784	resourceVSphereHAVMOverrideFindEntry retrieves the value of the VSphereHAVM configuration for the given VM .
2785	schemaHostPortGroupSpec returns a schema schema for host port .
2786	expandHostPortGroupSpec returns a HostPortGroupSpec .
2787	flattenHostPortGroupSpec flattens HostPortGroupSpec .
2788	calculatePorts returns a set of ports for the host port group .
2789	PortGroupPortSchema returns the port group port .
2790	saveHostPortPortGroupID sets the host port group ID .
2791	PortGroupGroupIDsFromResourceID returns the port group IDs from the given resource .
2792	BaseFromPath returns the base resource from the given path .
2793	BaseFromReference returns a BaseComputeResource from a ManagedObjectReference .
2794	BaseProperties returns the properties of the object .
2795	BasePropertiesFromReference returns the base properties from the given reference .
2796	DefaultDevicesFromReference returns the default devices for the given reference .
2797	OSFamily returns the OS family of the VM .
2798	EnvironmentBrowserFromReference returns a new EnvironmentBrowser instance
2799	Properties returns the properties of a cluster .
2800	Create creates a cluster .
2801	MoveToFolder mocks base method
2802	Reconfigure is used to reconfigure the cluster .
2803	Delete deletes a cluster
2804	IsMember returns true if the host is a member of the cluster .
2805	MoveHostsTo mocks base method
2806	MoveHostsOutOf attempts to move hosts to the cluster .
2807	expandVmwareDistributedVirtualSwitchIDSpec returns an instance of VmwareDistributedVirtualSwitchVlanIdSpec .
2808	flattenVmwareVlanIDSpec is a helper function to flatten the vlan s vlanIdSpec
2809	expandVmwareDistributedVirtualSwitchVlanSpec returns a slice of VmwareTrunkVlanSpec .
2810	flattenVmwareVlanSpec is a helper function to flatten the VmwareSpec .
2811	expandVmwareDistributedVirtualSwitchSpec returns an instance of VmwareSpecSpec .
2812	flattenVmwareDistributedVirtualSwitchSpec is a helper function to flatten vlan spec .
2813	expandVmwareVlanSpec returns the base VmwareVlanSpec for the given resource .
2814	flattenVmwareVlanSpec is a helper function to flatten the vmwareSpec
2815	expandDVSFailureCriteria returns a DVSFailureCriteria for the given resource .
2816	flattenDVSFailureCriteria flattens a DVSFailureCriteria into an error .
2817	expandVMUplinkUplinkPolicyOrderPolicy returns an instance of VMwareUplinkUplinkPolicyPolicy .
2818	flattenVMUplinkUplinkOrderPolicy flattens a VMwareUplinkPortPolicyOrderPolicy .
2819	expandVmwarePortTeams expands a VmwareUplinkPort .
2820	flattenVmwareUplinkTplinkPolicy flattens a VmwareUplinkPolicy .
2821	expandDVSSecurityPolicy creates a new DVSSecurityPolicy .
2822	flattenDVSSecurityPolicy flattens a DVSSecurityPolicy .
2823	expandVMUplinkLacpPolicy creates a VMwareUplinkLacpPolicy .
2824	flattenVMUplinkLacpPolicy flattens a VMwareUplinkLacpPolicy .
2825	expandDVSTrafficPolicyIngressPolicyIngressPolicyIngress returns an instance of DVSTrafficPolicy .
2826	flattenDVSTrafficPolicyIngressPolicyIngressPolicyIngressPolicyIngressPolicyIngressPolicyIngress policy .
2827	expandVMDVSortSetting creates a VMwareDVSPortSetting .
2828	flattenVMDVSPortSetting flattens a VMwareDVSPortSetting object .
2829	expandClusterDrsVMConfigInfo returns a ClusterDRSVConfigInfo object .
2830	flattenClusterDRSConfigInfo flattens the cluster drs .
2831	resourceVSphereVMOverrideParseIDParseIDParseID parses the given ID and returns the value of the resourceVRSVRSVRSVMOverride .
2832	resourceVSphereDRSOverrideFindEntry finds the DRRSV configuration for the given VM .
2833	resourceVMAqNetAffinityRuleFlattenRuleFattenRuleFlushID returns a string representation of the given key .
2834	schemaDatastoreSummary returns a map of schema data .
2835	flattenDatastoreSummary flattens a datastore summary .
2836	resourceVSphereDatastorePathOrStoragePath returns the path to the given resource .
2837	resourceVSphereDatastorePathOrStoragePath is a helper function to read a folder or folder .
2838	CdromSubresourceSchema returns a map of subresource schemas .
2839	NewCdromSubresource creates a new CdromSubresource
2840	CdromDiffOperationOperation performs a CdromDiff operation .
2841	ValidateDiff validates the diff .
2842	Create creates a new VirtualDeviceConfigSpec
2843	Read reads a virtual device from the list of devices .
2844	Update implements cdrom interface .
2845	Delete deletes a virtual device
2846	mapCdrom converts a cdrom to a list of devices
2847	VerifyVAppTransport verifies the VAppTransport .
2848	verifyVAppCdromIsoIsoIso is a helper function to verify if the device is valid .
2849	DatastorePathFromString returns a DatastorePath from a string .
2850	IsVmdKMDK returns true if the given path is a VMDK .
2851	QueryDiskType returns virtual disk type
2852	Delete a virtual disk
2853	SOAPFault returns the soap fault from the given error .
2854	vimSOAPFault returns the VimFault of the given error .
2855	taskFault returns the fault of the given error .
2856	IsManagedObjectNotFound returns true if an error occurred .
2857	isNotFoundError returns true if the given error is not found .
2858	IsAnyNotFoundError returns true if an error occurred .
2859	IsResourceInUseError returns true if the given error occurs .
2860	isConcurrentAccessError returns true if an error occurred .
2861	RenameObject renames a managed object .
2862	VMVidateVirtualCenter is a helper function to validate virtualCenter .
2863	parseVersion parses VSphereVersion and returns VSphereVersion .
2864	parseVersionFromInfo returns the VSphereVersion from the given info .
2865	ParseVersionFromClient returns a VSphereVersion from a client
2866	String returns a string representation of VSphereVersion .
2867	ProductEqual returns true if the VSphereVersion is equal .
2868	Less returns true if the VSphereVersion is older than the other .
2869	Equal returns true if vSphereVersion is equal .
2870	expandClusterVMGroup expands a cluster VM group .
2871	FlattenClusterVMGroup flattens the cluster VMs group .
2872	resourceVSphereComputeClusterGroupFindEntry finds a cluster VSphere group by name .
2873	resourceVSphereComputeClusterGroupFetchObjects fetches the cluster and returns it .
2874	resourceVSphereResourcePoolApply applies the tags to the resource pool .
2875	resourceVSphereResourcePoolReadTags reads the tags for a resource pool .
2876	expandClusterAffinityRuleSpec returns a ClusterAffinityRuleSpec .
2877	FlattenClusterAffinityRuleSpec is used to flatten cluster affinity rules .
2878	resourceVMAFFinityClusterRuleFindEntryFindEntry looks for a given key .
2879	ConfigSchema returns a schema schema .
2880	VirtualMachineCloneSchema returns a schema schema .
2881	Validate virtual machine clone
2882	validateCloneSnapshots validates snapshot snapshots
2883	ReferenceProperties returns the properties of a network .
2884	SystemOrDefault returns the default host system .
2885	Properties returns the properties of the host system .
2886	ResourcePool returns a resource pool .
2887	hostSystemSystemNameFromID returns the host system name .
2888	NameOrID returns the name of the host system .
2889	EnterMaintenanceMode mocks base method
2890	Exit maintenance mode
2891	DvsFromUUID returns the DVS from the given UUID .
2892	DvsFromPath returns a virtual machine from a path .
2893	dvsProperties retrieves the properties of a VMsware .
2894	UpgradeDVS upgrade DVS
2895	enableDVSNetworkResourceManagement is used to enable network resources .
2896	resourceVMAVARinityAffinityRuleFlattenRuleFlushID returns a string representation of a pod .
2897	resourceVMAEmaAffinityRuleFindEntryFindEntry looks for a pod and returns it .
2898	resourceVMAEmaAffinityRuleFindRuleByName finds the cluster affinity rule for a given pod .
2899	resourceVMAV1AffinityRuleFetchObjects fetches the list of objects for the given pod .
2900	controllerTypeToClassToClass returns the type of the given controller .
2901	Addr returns the string representation of the Subresource .
2902	HasChange returns true if the given key exists .
2903	GetChange returns the change for the given key .
2904	GetWithRestart implements the Subresource interface .
2905	GetWithVeto returns the value of the given key .
2906	SetRestart sets the rest of the resource .
2907	Hash returns the hash of the subresource .
2908	computeDevAddr computes the device address .
2909	splitDevAddr returns the id of the given id
2910	findVirtualDeviceInListSelector returns true if the given controller is in the list .
2911	findVirtualDeviceInListSelectFunc returns true if the device is in the list .
2912	findControllerForDevice finds the controller for a given device
2913	FindVirtualDeviceByAddr finds a virtual device by address
2914	FindVirtualDevice finds the virtual device with the given list .
2915	String returns the string representation of the subresource .
2916	SwapSCIDevices swaps the specified device to the specified device .
2917	NormalizeSCSIUses normalizes a list of virtual devices .
2918	setSCSIBusSharing sets the SCSIBus field s value .
2919	createSCSIController creates a new VirtualDeviceSpec .
2920	ReadSCSIususType returns the type of the SCSI controller .
2921	ReadSCSIusSharing returns the number of shared controllers .
2922	pickSCSIController selects the specified bus .
2923	ControllerForCreateUpdate returns the controller for the given type .
2924	applyDeviceChange applies the changes to the list of devices
2925	DeviceListString returns a string representation of a VirtualDeviceList .
2926	DeviceChangeString returns a string representation of the device change .
2927	subresourceListString returns a string representation of the subresource list
2928	scsiControllerControllerList returns a string representation of the scsi controller .
2929	AppendDeviceChangeSpec returns a slice of virtualDeviceChangeSpec .
2930	expandClusterDependencyRuleInfo returns an instance of ClusterDependencyRuleInfo .
2931	flattenClusterDependencyRuleInfo flattens ClusterDependencyRuleInfo .
2932	resourceVSphereComputeIDPependencyRuleParseID parses the given ID from the given ID .
2933	resourceVSphereComputeVMDependencyRuleFetchObjects fetches the VSphere ComputeVMDependency rule .
2934	resourceVSphereDatastoreClusterApply creates a storage pod .
2935	resourceVSphereDatastoreClusterApply applies the tags to the cluster .
2936	resourceVSphereDatastoreClusterReadTags retrieves all tags for the given resource .
2937	resourceVSphereDatastoreClusterApplyClusterApply applies custom attributes to the given resource .
2938	resourceVSphereDatastoreClusterReadClusterReadAttributes reads the meta data from the meta data .
2939	resourceVRSConfigApplyApplySRSConfigApply applies the given resource to the given resource .
2940	resourceVRSConfigChange returns true if the given resource has the specified schema .
2941	resourceVSphereDatastoreClusterGetPodGetPod retrieves the storage pod s storage pod .
2942	resourceVSphereDatastoreClusterFromPath retrieves the storage pod from the given meta data .
2943	resourceVSphereDatastoreClusterSaveNameSavePathAndPath is a helper function to set the name of the pod .
2944	resourceVSphereDatastoreClusterApplyChanges applies the name to the cluster .
2945	resourceVSphereDatastoreChange applies a folder change to the cluster .
2946	resourceVSphereDatastoreClusterValidateEmptyClusterValidate checks if the pod is empty .
2947	resourceVSphereDatastoreClusterDelete deletes the pod data from the cluster .
2948	resourceVSphereDatastoreClusterClusterClusterFlushData is a helper function to flatten the storage of the given resource .
2949	expandStorageDrsPodConfigSpec returns an instance of StorageDRSPodConfigSpec .
2950	flattenStorageDrsPodConfigInfo flattens a StorageDrsPodConfigInfo into an object .
2951	expandStorageDrsAutomationConfig returns an instance of StorageDRSAutomationConfig
2952	flattenStorageDrsAutomationConfig creates a storageDrsAutomationAutomationConfig for the given storage .
2953	expandStorageDrsLoadBalancerConfig returns an instance of StorageDRSILoadConfig
2954	flattenStorageDrsLoadBalancerConfig is a helper function to flatten StorageDrs .
2955	expandStorageDRSSpaceLoadConfig returns a StorageDRSSpaceConfig object .
2956	flattenStorageDrsSpaceLoadBalancerLoadConfig is a helper function to flatten StorageDRSSpaceConfig .
2957	expandStorageDrsOptionSpec returns a slice of StorageDrsOptionSpecSpec .
2958	flattenStorageDrsOptionSpec is a helper function to flatten the options for storage .
2959	resourceVSphereFolderMigrateState mocks base method
2960	migrateVSphereFolderMigrateState mocks base method
2961	getDatacenter returns the datacenter of a service
2962	datacenterFromID returns the datacenter from the given ID .
2963	NewDiskSubresource creates a new subresource .
2964	DiskApplyOperation performs a diskApplyOperation .
2965	deleteOperationDeleteOperationDelete deletes the specified disk .
2966	diskApplyOperationCreateOperationCreateUpdate creates a new disk update operation .
2967	DiskMigrateRelocateOperation returns a list of VirtualMachineRelocateSpec .
2968	DiskCloneRelocateOperation returns a list of virtual machines that can be used to create a virtual machine .
2969	DiskImportOperation performs a disk import operation .
2970	ReadDiskAttrsForData returns a map of devices for data source .
2971	Create creates a new VirtualDeviceConfigSpec
2972	Read reads the specified VirtualDiskList .
2973	Update implements the DiskSubresource interface .
2974	Delete deletes a virtual device
2975	DiffExisting returns the diff of the resource .
2976	DiffGeneral returns the diff of the resource subresource .
2977	normalizeDiskDatastore updates disk datastore
2978	Relocate implements the DiskSubresource interface .
2979	String returns a string representation of the DiskSubresource .
2980	expandDiskSettings expands disk settings .
2981	createDisk creates a new virtual disk .
2982	assignDisk assigns the disk to the specified volume .
2983	findControllerInfo returns the details of the controller
2984	diskRelocateListString returns a string representation of the list of disks .
2985	diskRelocateString returns a string representation of the diskRelocateSpec
2986	Less returns true if the given index is less than the given index .
2987	Swaps the list of virtual devices .
2988	Less returns true if the sort is less than j .
2989	Swap swaps the virtual disk subresourceSorts .
2990	datastastorePathHas returns true if the path is a base path .
2991	findVirtualDisk finds the virtual disk for the given list .
2992	diskCapacityInGiB returns the size of the given disk .
2993	hostNetworkSystemFromHosts returns a HostNetworkSystem
2994	hostNetworkSystemSystemIDFromHostSystemID returns a HostNetworkSystem .
2995	hostVSwitchFromName returns a HostVSwitch from the given name .
2996	hostPortGroupFromName retrieves the host portgroup by name .
2997	networkObjectFromHostSystem returns a network object from a host system .
2998	resourceVSphereLicenseUpdate updates the license license
2999	isKeyPresent returns true if the given key is present .
3000	UpdateLabel updates a license label
3001	DecodeError decodes the license manager .
3002	resourceVSphereVAppApplyTagsApply applies the tags to the VSphereVContainer .
3003	resourceVSphereVContainerReadTags reads the tags for a VSphere VSphereVContainer .
3004	expandClusterVMHostRuleInfo returns an instance of ClusterVmHostRuleInfo .
3005	flattenClusterVMHostRuleInfo flattens the clusterVmHostRuleInfo .
3006	migrateVSphereVirtualMachineMigrateState mocks base method
3007	migrateVSphereVirtualMachineStateV3 migrates virtual machine state .
3008	NewEnvironmentBrowser returns a new EnvironmentBrowser instance
3009	DefaultDevices returns a list of virtual devices .
3010	OSFamily returns the OS family of the guest .
3011	QueryConfigOptionDescriptor returns a list of virtual machine configs .
3012	RootFromDatacenter returns the root path for the given datacenter .
3013	PathFromDatacenter creates a path from a datacenter
3014	SplitDatacenter is part of the root path
3015	SplitRelativeFolder splits a relative path into a relative path
3016	NewRootFromPath creates a new root path from the given inventory path .
3017	datacenterSystemSystemIDFromHostSystemID returns the path of the host system .
3018	datastastoreRootPathFromHostSystemID returns the root path for the given host system .
3019	validateDatastoreFolder validates the given folder .
3020	validateHostFolder checks if the given folder is valid .
3021	validate virtual machine
3022	validateNetworkFolder validates the network folder .
3023	NormalizePath normalizes path
3024	MoveObjectTo mocks base method
3025	Properties returns the properties of a folder .
3026	FindType returns the type of the given folder .
3027	ToServerListQuery returns the server s query string .
3028	Index returns the index of the given string .
3029	Any returns true if the given slice matches the given function .
3030	client returns a new http client .
3031	lookupProject returns the project s project name .
3032	lookupZones returns a list of zones for a given project .
3033	lookupAddrs returns the list of addresses for a given tag .
3034	New returns a new Discover .
3035	WithUserAgent sets the user agent
3036	WithProviders returns a new Provider with the given map .
3037	Names returns the names of the providers .
3038	Help returns the help message .
3039	Addrs returns a list of all registered providers .
3040	String returns a string representation of the Config .
3041	PodAddrs returns a list of pod addresses .
3042	argsOrEnv returns the value of the given key .
3043	Addrs returns a list of addresses from the provider
3044	setLog sets the logger
3045	DiscoverErr returns an error with the given format .
3046	valueOrEnv returns the value or an environment variable if it exists .
3047	newVSphereClient returns a new vSphere client
3048	newVimSession creates a new VM session
3049	newRestSession creates a new REST session
3050	Addrs returns a list of VSphere client addresses
3051	tagIDFromName retrieves the tag from the given name .
3052	tagCategoryByName returns the tag by name .
3053	tagByName retrieves a tag by name .
3054	VirtualMachineIPsForTag returns the list of virtual machines for a given tag .
3055	virtualMachinesForTag returns a list of virtual machines for a tag .
3056	ipAddrsForVirtualMachines returns the list of IP addresses for a virtual machine .
3057	virtualMachineFromMOID retrieves a virtual machine from the VM
3058	virtual machine properties
3059	buildAndSelectGuestIPs builds a list of IP addresses from a virtual machine .
3060	skipIPAddr returns true if the IP address is skipped .
3061	virtualMachineNames returns a list of virtual machine names .
3062	validateAndWrapHandler wraps the given handler .
3063	validateAndWrapHandles wraps a list of handlers .
3064	NewWithLogger returns a new Macaron
3065	Handlers sets the handlers .
3066	Use adds a handler to the middleware .
3067	ServeHTTP is the same as ServeHTTP
3068	SetURLPrefix sets the URL prefix
3069	SetConfig creates a new configuration file .
3070	String returns the string representation of the request body .
3071	RemoteAddr returns the remote address
3072	HTML renders a HTML template
3073	HTMLSet renders HTML set .
3074	Query returns the value of the request .
3075	QueryTrim removes a string from the context .
3076	QueryStrings returns a slice of string values .
3077	QueryEscape returns the escaped query string .
3078	QueryBool returns the value of the query parameter .
3079	QueryInt returns int value as int
3080	QueryInt64 returns the value as int64 .
3081	QueryFloat64 returns a float64 value .
3082	SetParams sets the params for the request .
3083	GetFile gets a file by name
3084	SaveToFile saves a file to a file .
3085	GetCookie retrieves a cookie from the request .
3086	Get cookie value
3087	GetCookieInt64 returns an int64 value .
3088	GetCookieFloat64 returns a float64 value .
3089	SetSecureCookie sets the SecureCookie field s value .
3090	GetSecureCookie returns the secure cookie for the given key .
3091	SetSuperSecureCookie sets the secure cookie with the given name .
3092	GetSuperSecureCookie retrieves a cookie from the cookie
3093	ServeContent implements the http . Handler interface .
3094	ServeFileContent implements the http . Handler interface .
3095	ServeFile serves a file .
3096	ChangeStaticPath changes the static path to the static path .
3097	getNextWildcard returns the next wildcard matching pattern .
3098	getRawPattern extracts the raw pattern from a string .
3099	URLPath returns the URL for the leaf node .
3100	NewRouteMap returns a new route map
3101	getLeaf returns the route for the given pattern .
3102	add adds a route to the route map
3103	Name adds a name to the router
3104	handle adds a route to the router
3105	Handle implements the Router interface .
3106	Comb registers a Combo with the given pattern .
3107	NotFound adds a handler to the router .
3108	InternalServerError registers an internal error handler .
3109	URLFor returns the URL for a named route .
3110	Name sets the name of the route
3111	NewResponseWriter returns a new ResponseWriter
3112	Logger returns a logger for the current request .
3113	NewTplFile creates a new TplFile .
3114	NewTemplateFileSystem creates a new TemplateFileSystem .
3115	NewTemplateSet returns a new TemplateSet .
3116	GenerateETag returns the ETag for the given file .
3117	Populate fills the graph with the given values .
3118	String returns the string representation of the object .
3119	Provide adds an object to the graph .
3120	Populate is used to populate the graph .
3121	Object returns a slice of objects .
3122	newPubSub creates a new pubsub subscription .
3123	Stat implements the PubSub interface .
3124	New creates a new app .
3125	Configure the application configuration .
3126	ParseConfig parses the Prometheus registry .
3127	ReloadConfig reloads the cache
3128	stopListeners stops all listeners .
3129	MarshalText returns the offset of the Offset .
3130	UnmarshalText unmarshals an Offset .
3131	MarshalText marshals the protocol .
3132	UnmarshalText unmarshals the protocol .
3133	UnmarshalText unmarshals a Duration .
3134	NewOptions returns a new Options instance
3135	Stat implements Kafka .
3136	New returns a new Cache .
3137	SetMaxSize sets the maximum size of the cache .
3138	GetShard returns a Shard .
3139	Add adds data to the cache .
3140	Pop removes a key from the cache .
3141	ParseCarbonlinkRequest parses a carbonlink request .
3142	NewCarbonlinkListener creates a new carbonlink listener
3143	OnePoint creates a new point
3144	NowPoint returns a new point for the given metric .
3145	Copy returns a copy of the Points
3146	ParseText parses a line .
3147	Eq returns true if two points are equal .
3148	Match matches the given metric
3149	ParseRetentionDefs parses retention definitions .
3150	RestoreFromFile restores the data from a file .
3151	RestoreFromDir is used to restore the given dump directory .
3152	Restore restores data from the given path .
3153	Root is a helper for testing .
3154	delete deletes the given key .
3155	NewWhisper creates a Whisper instance
3156	NewWhisperAggregation returns a new WhisperAggregation
3157	match matches a metric
3158	oldPlain parses the plain text and returns a slice of points .
3159	UpdateIntegrationPD request
3160	GetIntegrationPD returns information about the integration .
3161	CreateIntegrationSlack creates a new IntegrationSlack
3162	UpdateIntegrationSlack updates a Slack integration .
3163	GetIntegrationSlack returns an IntegrationSlackRequest
3164	CreateIntegrationAWSccount creates an integration account
3165	GetIntegrationAWSCCs returns an array of integration accounts .
3166	DeleteIntegrationAWS account
3167	ListIntegrationGCP returns a list of IntegrationGCP objects
3168	CreateIntegrationGCP creates a new IntegrationGCP .
3169	UpdateIntegrationGCP updates a new IntegrationGCP update .
3170	DeleteIntegrationGCP deletes a new IntegrationGCP .
3171	GetDashboardList returns a DashboardList .
3172	GetDashboardLists returns a list of dashboard lists .
3173	Create a dashboard list
3174	UpdateDashboardList updates a dashboard list .
3175	GetDashboardListItems returns a list of DashboardList items .
3176	Snapshot returns a snapshot of the given query .
3177	SearchHosts returns a list of Hosts for a given search .
3178	SearchMetrics returns metrics for a given search .
3179	Create an alert
3180	Update an alert
3181	Get an alert
3182	GetAlerts returns all alerts
3183	Create a comment
3184	Create a new comment
3185	Edit comment
3186	Create a monitor
3187	UpdateMonitor updates a monitor .
3188	Get a monitor
3189	Get monitors by name
3190	Get monitors by tags
3191	Get monitors .
3192	GetSyntheticsLocations returns a list of Synthetics locations .
3193	GetBool returns the boolean value of a bool .
3194	GetIntOk returns the int value of an int .
3195	GetStringOk returns the string representation of a string .
3196	GetJsonNumberOkOk returns the value of the json .
3197	GetPrecision returns the precision of a precision value .
3198	GetStringId returns a string representation of the given id .
3199	GetDashboard returns a dashboard .
3200	GetDashboards returns a list of all Dashboards .
3201	CreateDashboard creates a dashboard .
3202	UpdateDashboard updates a dashboard .
3203	InviteUsers mocks base method
3204	Create a user .
3205	GetUsers returns a list of users .
3206	GetUser gets a user by handle
3207	UpdateUser updates a user .
3208	DeleteUser deletes a user
3209	Get board .
3210	DeleteBoard deletes a board .
3211	CreateBoard creates a board .
3212	UpdateBoard updates a board .
3213	NewClient returns a new Client instance
3214	SetKeys sets the api key and app key .
3215	Validate returns true if the client is valid .
3216	MuteHost mocks base method
3217	UnmuteHost mocks base method
3218	GetSilenced sets the Silenced field s value .
3219	GetSilencedOkOk returns true if the alert is set .
3220	HasSilenced returns true if the alert is set .
3221	GetState returns the State field s value .
3222	GetStateOk returns the state of Alert
3223	HasState returns true if the alert is set .
3224	GetAlertIdOkOk returns the AlertIdOk field s value .
3225	GetKey returns the Key field s value .
3226	GetKeyOk returns the KeyOk if it s non - nil zero value otherwise .
3227	HasKey returns true if the API key is set .
3228	GetFacetOk returns the FacetOk field s value .
3229	GetOrder returns the order field s value .
3230	GetOrderOk sets the OrderOk field s value .
3231	HasOrder returns true if the query is set .
3232	GetAuthorHandle returns the AuthorHandle field s value .
3233	GetAuthorHandleOk returns the AuthorHandleOk field s value .
3234	HasAuthorHandle returns true if the board has author handle .
3235	GetIsReadOnly returns true if the board is read .
3236	GetIsReadOnlyOk returns true if the board is read or not .
3237	HasIsReadOnly returns true if the board is read or not .
3238	GetLayout returns the layout layout .
3239	GetLayoutOk returns the layout of the board .
3240	HasLayout returns true if the board has layout .
3241	GetShowPresent returns the ShowPresent field if it s non - nil zero value otherwise .
3242	GetShowPresentOk returns the ShowPresentOk field if it s non - nil zero value otherwise .
3243	HasShowPresent returns true if the change is present .
3244	GetChannelName returns the ChannelName field s value .
3245	GetChannelNameOk returns the channel name if it s non - nil zero value otherwise .
3246	HasChannelName returns true if the channelName field is set .
3247	GetTransferAllUserComments returns the TransferAllUserComments field s value .
3248	GetTransferAllUserCommentsOk returns the TransferAllUserCommentsOk field s value .
3249	HasTransferAllUserComments returns true if this ChannelSlackRequest is true .
3250	GetHostName returns the HostName field s value .
3251	GetHostNameOk returns the host name of the check .
3252	HasHostName returns true if the CheckName field is set .
3253	GetTimestamp returns the timestamp of the check .
3254	GetTimestampOk returns the timestamp of the check .
3255	HasTimestamp returns true if the check is set .
3256	GetRelatedId returns the RelatedId field s value .
3257	GetRelatedIdOk returns the RelatedId of the Comment
3258	HasRelatedId returns true if the comment is related to this comment .
3259	GetImageURL returns the ImageURL field s value .
3260	GetImageURLOk returns the image URL if it s non - nil zero value otherwise .
3261	HasImageURL returns true if the condition is set .
3262	GetInvert returns the Invert field s value .
3263	GetInvertOkOk returns true if the ConditionalFormat field s value .
3264	HasInvert returns true if the ConditionalFormat is true .
3265	GetIcon returns the Icon field s value .
3266	GetIconOk sets the IconOk field s value .
3267	HasIcon returns true if the user has an icon .
3268	GetCustomImageUrl returns the CustomImageUrl field s value .
3269	GetCustomImageUrlOk returns the CustomImageUrlUrlOk if it s non - nil zero value otherwise .
3270	HasCustomImageUrl returns true if the DashboardConditionalFormat field is set .
3271	GetInverted returns the InvertedConditional field if it s non - nil zero value otherwise .
3272	GetInvertedOkOk returns true if the DashboardConditionalFormat field s value .
3273	HasInverted returns true if the DashboardConditionalFormat is true .
3274	GetDashboardCount returns the DashboardCount field s value .
3275	GetDashboardCountOk returns the DashboardCount field s value .
3276	HasDashboardCount returns true if the dashboard has a dashboard count .
3277	GetModified returns the Modified field s value .
3278	GetModifiedOk returns true if the dashboard is modified
3279	HasModified returns true if the dashboard is modified .
3280	GetActive returns the active state of this Downtime .
3281	GetActiveOk returns true if the downtime is active .
3282	HasActive returns true if the downtime is active .
3283	GetCanceled returns the Canceled field s value .
3284	GetCanceledOk returns true if the Downtime is canceled .
3285	HasCanceled returns true if the Downtime has been canceled .
3286	GetMonitorId returns the monitorId field s value .
3287	GetMonitorIdOk returns the monitorId if it s non - nil zero value otherwise .
3288	HasMonitorId returns true if the DowntimeId field is set .
3289	GetParentId returns the ParentId field s value .
3290	GetParentIdOkOk returns the ParentId if it s non - nil zero value otherwise .
3291	HasParentId returns true if the DowntimeId is set .
3292	GetRecurrence returns the Recurrence field s value .
3293	GetRecurrenceOk returns the recurrence of this Downtime .
3294	HasRecurrence returns true if the Downtime field is set .
3295	GetTimezone returns the timezone
3296	GetTimezoneOk returns the timezone if it s non - nil zero value otherwise .
3297	HasTimezone returns true if the timezone is set .
3298	GetAlertType returns the AlertType field s value .
3299	GetAlertTypeOk returns the AlertTypeOk field s value .
3300	HasAlertType returns true if the event is set .
3301	GetEventType returns the EventType field s value .
3302	GetEventTypeOk returns the EventTypeOk field s value .
3303	HasEventType returns true if the event type is set .
3304	GetPriority returns the priority of the event .
3305	GetPriorityOk returns the priority of the event .
3306	HasPriority returns true if the event has priority .
3307	GetSourceType returns the SourceType field s value .
3308	GetSourceTypeOk returns the SourceTypeOk field s value .
3309	HasSourceType returns true if the event type is set .
3310	GetDefinition returns the GraphDefinition field s value .
3311	GetDefinitionOk returns the definition of the graph .
3312	HasDefinition returns true if the graph has a definition .
3313	GetIncludeNoMetrics sets the IncludeNoMetricHosts field s value .
3314	GetIncludeNoMetricHostsOksWithMetrics returns true if the graph is not included in the graph .
3315	HasIncludeNoMetricHosts returns true if the graph is included in the graph .
3316	GetIncludeUngroups retrieves the IncludeUngroupedHosts field s value .
3317	GetIncludeUngroupedHostsOksOksOk returns true if the graph is not included .
3318	HasIncludeUngroupedHosts returns true if the graph has been included .
3319	GetVal returns the value of a GraphDefinitionMarker .
3320	GetValOkOk returns the value of ValidationMarker .
3321	HasVal returns true if the graph definition is valid .
3322	GetOrderDirection returns the OrderDirection field s value .
3323	GetOrderDirectionOk returns the OrderDirectionOk field s value .
3324	HasOrderDirection sets the OrderDirection field s value .
3325	GetStacked sets the Stacked field s value .
3326	GetStackedOkOk returns true if the GraphDefinitionRequest field s value .
3327	HasStacked returns true if the GraphDefinitionRequest is set .
3328	GetLastNoData sets the LastDataTs field s value .
3329	GetLastNoDataOkOk returns the LastNoDataOkOk if it s non - nil zero value otherwise .
3330	HasLastNoData sets the LastNoData field s value .
3331	GetLastNotifiedTs returns the LastNotifiedTs field s value .
3332	GetLastNotifiedTsOk returns the LastNotifiedTsOk field if it s non - nil zero value otherwise .
3333	HasLastNotifiedTs returns true if the group has not been set .
3334	GetLastResolvedTs returns the LastResolvedTs field s value .
3335	GetLastResolvedTsOk returns the LastResolvedTsOk field s value .
3336	HasLastResolvedTs returns true if the group has been resolved .
3337	GetLastTriggeredTs returns the LastTriggeredTs field s value .
3338	GetLastTriggeredTsOkOk returns the LastTriggeredTs field if it s non - nil zero value otherwise .
3339	HasLastTriggeredTimig returns true if the group has been created .
3340	GetTriggeringValue returns the TriggeringValue field s value .
3341	GetTriggeringValueOk returns the TriggeringValueOk field s value .
3342	HasTriggeringValue returns true if the GroupData field is set .
3343	GetEndTime returns the EndTime field s value .
3344	GetEndTimeOkOk returns the EndTimeOk field s value .
3345	HasEndTime returns true if the HostActionMute is set .
3346	GetOverride returns the Override field if it s non - nil zero value otherwise .
3347	GetOverrideOk returns the OverrideOverride field if it s non - nil zero value otherwise .
3348	HasOverride returns true if the HostActionMuteMuteMuteMute is set .
3349	GetFill returns the FillmapRequest field s value .
3350	GetFillOk returns the FillMap field s value .
3351	HasFill returns true if the request has a Fill request .
3352	GetSize returns the size of the HostmapRequest
3353	GetSizeOk returns the size of the HostmapRequest
3354	HasSize returns true if the HostmapRequests is set .
3355	GetRoleNameOk returns the RoleNameOk field s value .
3356	GetAccountIDOkOk sets the AccountIDOk field s value .
3357	GetAuthProviderX509CertURL retrieves the AuthProviderX509CertURL field s value .
3358	GetAuthProviderX509CertURLOkURL returns the AuthProviderX509CertURL field if it s non - nil zero value otherwise .
3359	HasAuthProviderX509CertURL retrieves the AuthProviderX509CertURL field s value .
3360	GetAuthURI returns the AuthURI field s value .
3361	GetAuthURIOk returns the AuthURI field s value .
3362	HasAuthURI returns true if the authentication URI is set .
3363	GetClientID returns the ClientID field s value .
3364	GetClientIDOkOk returns the ClientIDOk field s value .
3365	HasClientID returns true if there is a client ID .
3366	GetClientX509CertURL retrieves the ClientX509CertURL field s value .
3367	GetClientX509CertURLOkURL returns the ClientX509CertURL field if it s non - nil zero value otherwise .
3368	HasClientX509CertURL returns true if the client X509CertURL is set .
3369	GetHostFiltersOk sets the HostFiltersOk field s value .
3370	GetPrivateKey returns the PrivateKey field s value .
3371	GetPrivateKeyOk returns the PrivateKeyOk field if it s non - nil zero value otherwise .
3372	HasPrivateKey returns true if there is a private key .
3373	GetPrivateKeyID returns the PrivateKeyID field s value .
3374	GetPrivateKeyIDOk returns the PrivateKeyID field if it s non - nil zero value otherwise .
3375	HasPrivateKeyID returns true if there is a private key ID .
3376	GetTokenURI returns the TokenURI field s value .
3377	GetTokenURI retrieves the TokenURI field s value .
3378	HasTokenURI returns true if there is a token URI .
3379	GetClientEmailOk returns the ClientEmailEmailOk field s value .
3380	GetProjectIDOk returns the ProjectIDOk field s value .
3381	GetAPITokenOk returns the APITokenOk
3382	GetSubdomainOk returns the SubdomainOk
3383	GetID returns the ID of the LogSet .
3384	GetIDOkOk returns the ID of the LogSet
3385	HasID returns true if the LogSet is set .
3386	GetPerUnit returns the PerUnit field s value .
3387	GetPerUnitOk returns the PerUnitOk if it s non - nil zero value otherwise .
3388	HasPerUnit returns true if the MetricMetadata field is set .
3389	GetShortName returns the ShortName field s value .
3390	GetShortNameOk returns the ShortNameOk field if it s non - nil zero value otherwise .
3391	HasShortName returns true if the MetricMetadata field is set .
3392	GetStatsdInterval returns the StatsdInterval field s value .
3393	GetStatsdIntervalOk returns the statsd interval if it s non - nil zero value otherwise .
3394	HasStatsdInterval returns true if the MetricMetadata field is set .
3395	GetOverallState returns the OverallState field s value .
3396	GetOverallStateOk returns the overall state of the monitor
3397	HasOverallState returns true if the monitor is running .
3398	GetOverallStateModified returns the OverallStateModified field s value .
3399	GetOverallStateModifiedOk returns the OverallStateModifiedIfModified field s value .
3400	HasOverallStateModified returns true if the monitor has been modified .
3401	GetBackgroundColor returns the BackgroundColor field s value .
3402	GetBackgroundColorOk returns the BackgroundColorOk field s value .
3403	HasBackgroundColor returns true if the note definition is set .
3404	GetContent returns the Content field s value .
3405	GetContentOk returns the content of the note .
3406	HasContent returns true if the note definition is set .
3407	GetShowTick returns the ShowTick field s value .
3408	GetShowTickOk gets the ShowTickOk field s value .
3409	HasShowTick returns true if the note should be shown .
3410	GetEnableLogsSample sets the EnableLogsSample field s value .
3411	GetEnableLogsSampleOK returns true if the options are enabled .
3412	HasEnableLogsSample returns true if o is enabled .
3413	GetEscalationMessage returns the EscalationMessage field s value .
3414	GetEscalationMessageOk returns the EscalationMessageOk field s value .
3415	HasEscalationMessage returns true if the options are set .
3416	GetEvaluationDelay sets the EvaluationDelay field s value .
3417	GetEvaluationDelayOk sets the EvaluationDelayDelay field s value .
3418	HasEvaluationDelay returns true if the options are set .
3419	GetIncludeTags returns the IncludeTags field s value .
3420	GetIncludeTagsOk gets the IncludeTagsOk field s value .
3421	HasIncludeTags returns true if the options are set .
3422	GetLocked sets the Locked field s value .
3423	GetLockedOk sets the LockedOk field s value .
3424	HasLocked returns true if the options are locked .
3425	GetNewHostDelay sets the NewHostDelay field s value .
3426	GetNewHostDelayOk returns the NewHostDelay field if it s non - nil zero value otherwise .
3427	HasNewHostDelay returns true if the options are set .
3428	GetNotifyAudit sets the NotifyAudit field s value .
3429	GetNotifyAuditOk gets the NotifyAuditOk field s value .
3430	HasNotifyAudit returns true if the options are set .
3431	GetQueryConfig returns the QueryConfig field s value .
3432	GetQueryConfigOk returns the QueryConfigOk if it s non - nil zero value otherwise .
3433	HasQueryConfig returns true if the options are set .
3434	GetRenotifyInterval sets the RenotifyInterval field s value .
3435	GetRenotifyIntervalOk sets the RenotifyInterval field s value .
3436	HasRenotifyInterval returns true if the options are set .
3437	GetRequireFullWindow returns the RequireWindow field s value .
3438	GetRequireFullWindowOk returns true if it s non - nil zero value otherwise .
3439	HasRequireFullWindow returns true if the options are set .
3440	GetThresholds returns the ThresholdCount field s value .
3441	GetThresholdsOk returns the ThresholdCount field s value .
3442	HasThresholds returns true if the options are set .
3443	GetThresholdWindows returns the ThresholdWindows field s value .
3444	GetThresholdWindowsOk sets the ThresholdWindowsOk field s value .
3445	HasThresholdWindows returns true if the options are set .
3446	GetTimeoutH returns the timeout
3447	GetTimeoutHOkOk returns the timeout of the timeout
3448	HasTimeoutH returns true if the options are set .
3449	GetSeconds returns the seconds of the Period
3450	GetSecondsOkOk returns the seconds of the Period
3451	HasSeconds returns true if the Period field is set .
3452	GetLogSet returns the LogSet field s value .
3453	GetLogSetOk returns the LogSetOk .
3454	HasLogSet returns true if the query is set .
3455	GetQueryIsFailed sets the QueryIsFailed field s value .
3456	GetQueryIsFailedOk returns true if the query was failed .
3457	HasQueryIsFailed returns true if the query was failed .
3458	GetQueryString returns the QueryString field s value .
3459	GetQueryStringOk returns the query string if it s non - nil zero value otherwise .
3460	HasQueryString returns true if the query string is set .
3461	GetTimeRange returns the TimeRange field s value .
3462	GetTimeRangeOk returns the TimeRangeOk if it s non - nil zero value otherwise .
3463	HasTimeRange returns true if the query has time range .
3464	GetUntilDate returns the UntilDate field s value .
3465	GetUntilDateOk returns the DateDateOk field if it s non - nil zero value otherwise .
3466	HasUntilDate returns true if the recurrence field is set .
3467	GetUntilOccurrences returns the NumberOccurrences field s value .
3468	GetUntilOccurrencesOk returns the number of occurrences of this recurrence .
3469	HasUntilOccurrences returns true if the recurrence occurs .
3470	GetAPIKey returns the API key of the request .
3471	GetAPIKeyOk returns the API key of the request .
3472	HasAPIKey returns true if the request has a valid API key .
3473	GetComment returns the Comment field s value .
3474	GetCommentOk returns the CommentOk field if it s non - nil zero value otherwise .
3475	HasComment returns true if the request has comment .
3476	GetDashboard returns the Dashboard field s value .
3477	GetDashboardOk returns the DashboardOk if it s non - nil zero value otherwise .
3478	HasDashboard returns true if the request has a dashboard .
3479	GetEvent returns the Event field s value .
3480	GetEventOk returns the EventOk if it s non - nil zero value otherwise .
3481	HasEvent returns true if the request has an event .
3482	GetTags returns the TagMap
3483	GetTagsOk returns the tags of the request .
3484	HasTags returns true if the request has been set .
3485	GetThreshold returns the threshold field s value .
3486	GetThresholdOkOk returns the Threshold field s value .
3487	HasThreshold returns true if the rule is set .
3488	GetXaxis returns the XaxisAxis field s value .
3489	GetXaxisOkOk returns the XaxisAxisOk field s value .
3490	HasXaxis sets the Xaxis field s value .
3491	GetShared returns the Sharedboard field s value .
3492	GetSharedOk returns true if the screen is shared .
3493	HasShared returns true if the screen is shared .
3494	GetAggr returns the Aggr field s value .
3495	GetAggrOk returns the AggrOk field s value .
3496	HasAggr returns true if the series has aggregation .
3497	GetDisplayNameOk returns the DisplayNameOk field s value .
3498	GetLength returns the length of the series .
3499	GetLengthOk returns the length of the series .
3500	HasLength returns true if the series has length .
3501	GetScope returns the Scope field s value .
3502	GetScopeOk returns the scope of the Series
3503	HasScope returns true if the series is set .
3504	GetUnits returns the UnitPair field s value .
3505	GetUnitsOk returns the UnitPair field s value .
3506	HasUnits returns true if the series has units .
3507	GetServiceKeyOk returns the ServiceKeyOk field s value .
3508	GetOperator returns the operator field s value .
3509	GetOperatorOk returns the OperatorOk field s value .
3510	HasOperator returns true if the assertion has an operator .
3511	GetProperty gets the Property field s value .
3512	GetPropertyOk returns the PropertyOk field s value .
3513	HasProperty returns true if the assertion is set .
3514	GetRequest returns the SyntheticsRequest field s value .
3515	GetRequestOk returns the RequestOk field s value .
3516	HasRequest returns true if the SyntheticsConfig field is set .
3517	GetIsMobile returns the IsMobile field s value .
3518	GetIsMobileOk sets the IsMobileOk field s value .
3519	HasIsMobile returns true if the device is mobile .
3520	GetUserAgent returns the UserAgent field s value .
3521	GetUserAgentOkOk returns the UserAgentOk field s value .
3522	HasUserAgent sets the UserAgent field s value .
3523	GetRegion returns the Region field s value .
3524	GetRegionOk returns the RegionOk field s value .
3525	HasRegion returns true if the SyntheticsLocation field is set .
3526	GetFollowRedirects sets the FollowRedirects field s value .
3527	GetFollowRedirectsOk sets the FollowRedirectsOks field s value .
3528	HasFollowRedirects returns true if the SyntheticsOptions field s value .
3529	GetMinFailureDuration returns the MinFailureDuration field s value .
3530	GetMinFailureDurationOk sets the MinFailureDurationOk field s value .
3531	HasMinFailureDuration sets the MinFailureDuration field s value .
3532	GetMinLocationFailed returns the minLocationFailed field s value .
3533	GetMinLocationFailedOk returns the MinLocationFailedOk field s value .
3534	HasMinLocationFailed sets the MinLocationFailed field s value .
3535	GetTickEvery returns the TickEvery field s value .
3536	GetTickEveryOk returns the TickEveryOk field s value .
3537	HasTickEvery returns true if all ticks are set .
3538	GetBody returns the Body field s value .
3539	GetBodyOk returns the BodyOk field s value .
3540	HasBody returns true if the body has body .
3541	GetMethod returns the Method field s value .
3542	GetMethodOk returns the MethodOk field s value .
3543	HasMethod returns true if the SyntheticsRequest field is set .
3544	GetTimeout returns the timeout field s value .
3545	GetTimeoutOk sets the timeout field s value .
3546	HasTimeout returns true if the request has timeout .
3547	GetConfig returns the SyntheticsConfig field s value .
3548	GetConfigOk returns the SyntheticsConfig field if it s non - nil zero value otherwise .
3549	HasConfig returns true if the SyntheticsTest test is set .
3550	GetDeletedAt returns the DeletedAt field s value .
3551	GetDeletedAtOk returns the DeletedAt field s value .
3552	HasDeletedAt returns true if the document has been deleted .
3553	GetModifiedBy returns the ModifiedBy field s value .
3554	GetModifiedByOk returns the ModifiedByOk field s value .
3555	HasModifiedBy returns true if the document has been modified .
3556	GetMonitorStatus returns the MonitorStatus field s value .
3557	GetMonitorStatusOk sets the MonitorStatusOk field s value .
3558	HasMonitorStatus returns true if the test status is set .
3559	GetPublicId returns the publicId field s value .
3560	GetPublicIdOkOk returns the PublicIdOk field s value .
3561	HasPublicId returns true if the document has a public id .
3562	GetDefault returns the default value
3563	GetDefaultOk returns the default value
3564	HasDefault returns true if the template variable is set .
3565	GetPrefix returns the prefix of the template variable .
3566	GetPrefixOk returns the prefix of the template variable .
3567	HasPrefix returns true if the template variable is set .
3568	GetCritical returns the Critical field s value .
3569	GetCriticalOk returns the CriticalOk field s value .
3570	HasCritical returns true if the threshold is critical .
3571	GetCriticalRecovery returns the CriticalRecovery field s value .
3572	GetCriticalRecoveryOk returns the CriticalRecoveryOk field s value .
3573	HasCriticalRecovery returns true if the threshold is critical .
3574	GetOk returns the OkCount field s value .
3575	GetOkOk returns the OkCount field s value .
3576	HasOk returns true if the threshold is ok .
3577	GetTimeAggregator returns the TimeAggregator field s value .
3578	GetTimeAggregatorOk returns the TimeAggregatorOk field s value .
3579	HasTimeAggregator returns true if the threshold is set .
3580	GetUnknown returns the Unknown Number field if it s non - nil zero value otherwise .
3581	GetUnknownOkOk returns the unknown value if it is unknown .
3582	HasUnknown returns true if the threshold is unknown .
3583	GetWarning returns the warning value .
3584	GetWarningOkOk returns the warning value if it s non - nil zero value otherwise .
3585	HasWarning returns true if the threshold has a warning .
3586	GetWarningRecovery gets the WarningRecovery field s value .
3587	GetWarningRecoveryOk returns the WarningRecoveryOk if it s non - nil zero value otherwise .
3588	HasWarningRecovery returns true if the threshold has a warning .
3589	GetRecoveryWindow returns the RecoveryWindow field s value .
3590	GetRecoveryWindowOk returns the RecoveryWindowOk field s value .
3591	HasRecoveryWindow returns true if the threshold is set .
3592	GetTriggerWindow returns the TriggerWindow field s value .
3593	GetTriggerWindowOk returns the TriggerWindowOk field s value .
3594	HasTriggerWindow returns true if the threshold window is set .
3595	GetQueryType returns the QueryType field s value .
3596	GetQueryTypeOk returns the QueryTypeOk field s value .
3597	HasQueryType returns true if the TileDefRequest field is set .
3598	GetTextFilter returns the TextFilter field s value .
3599	GetTextFilterOk returns the TextFilterOk field s value .
3600	HasTextFilter returns true if the TileDefRequest is true .
3601	GetFrom returns the From field s value .
3602	GetFromOk returns the value of this TimeRange .
3603	HasFrom returns true if the time range is set .
3604	GetLive returns the LiveRange field s value .
3605	GetLiveOk returns true if the time range is live .
3606	HasLive returns true if the time range is live .
3607	GetTo returns the value of the time range
3608	GetToOk returns the value of t .
3609	HasTo returns true if the time range is set .
3610	GetShowLegend returns the ShowLegend field s value .
3611	GetShowLegendOk gets the ShowLegendOk field s value .
3612	HasShowLegend returns true if there is a show legend .
3613	GetLineType returns the LineType field s value .
3614	GetLineTypeOk returns the lineTypeOk field s value .
3615	HasLineType returns true if t is a line type .
3616	GetLineWidth returns the lineWidth field s value .
3617	GetLineWidthOk returns the line width of the line .
3618	HasLineWidth returns true if the line width is set .
3619	GetNewStatus returns the NewStatus field s value .
3620	GetNewStatusOkOk returns the NewStatusOk field s value .
3621	HasNewStatus returns true if the ToggleStatus field is set .
3622	GetService returns the ServiceDefinition field s value .
3623	GetServiceOk returns the ServiceOk field s value .
3624	HasService returns true if the TraceServiceDefinition is true .
3625	GetShowBreakdown gets the ShowBreakdown field s value .
3626	GetShowBreakdownOk gets the ShowBreakdownOk field s value .
3627	HasShowBreakdown returns true if the trace should be shown .
3628	GetShowDistribution returns the ShowDistribution field s value .
3629	GetShowDistributionOk gets the ShowDistributionOk field s value .
3630	HasShowDistribution sets the ShowDistribution field s value .
3631	GetShowErrors returns the ShowErrors field s value .
3632	GetShowErrorsOkOk gets the ShowErrorsOk field s value .
3633	HasShowErrors returns true if the TraceServiceDefinition is true .
3634	GetShowHits returns the ShowHits field s value .
3635	GetShowHitsOk gets the ShowHitsOk field s value .
3636	HasShowHits returns true if the TraceServiceDefinition is true .
3637	GetShowLatency gets the ShowLatency field s value .
3638	GetShowLatencyOk sets the ShowLatencyOk field s value .
3639	HasShowLatency sets the ShowLatency field s value .
3640	GetShowResourceList returns the ShowResourceList field s value .
3641	GetShowResourceListOk gets the ShowResourceListOk field s value .
3642	HasShowResourceList returns true if the trace definition is set .
3643	GetSizeFormat returns the SizeFormat field s value .
3644	GetSizeFormatOk returns the SizeFormatOk field s value .
3645	HasSizeFormat returns true if the TraceServiceDefinition field is set .
3646	GetSpanName returns the SpanName field s value .
3647	GetSpanNameOk returns the span name of the span .
3648	HasSpanName returns true if the TraceServiceDefinition field s value .
3649	GetFromTs returns the FromTs field s value .
3650	GetFromTsOkOk returns the FromTsValueOk if it s non - nil zero value otherwise .
3651	HasFromTs returns true if the TriggeringValue is set .
3652	GetToTs returns the ToTs field s value .
3653	GetToTsOkOk returns the ToTsOkOk field s value .
3654	HasToTs returns true if the TTS value is set .
3655	GetAlertID returns the AlertID field s value .
3656	GetAlertIDOkOk returns the alert ID of the Widget .
3657	HasAlertID returns true if the widget has an alert ID .
3658	GetAutoRefresh returns the autoRefresh field if it s non - nil zero value otherwise .
3659	GetAutoRefreshOk returns true if the widget has been refreshed .
3660	HasAutoRefresh returns true if the widget has autoRefresh .
3661	GetBgcolor returns the bgcolor field s value .
3662	GetBgcolorOkOk returns the background color of the Widget
3663	HasBgcolor returns true if the widget has a background color .
3664	GetColumns returns the Columns field s value .
3665	GetColumnsOk returns the column s columns .
3666	HasColumns returns true if the widget has columns .
3667	GetHTML returns the HTML of the Widget .
3668	GetHTMLOk returns the HTML of the Widget .
3669	HasHTML returns true if the Widget has been rendered .
3670	GetLayoutVersion returns the layoutVersion field s value .
3671	GetLayoutVersionOk returns the layout version of the Widget .
3672	HasLayoutVersion returns true if the widget has layout version .
3673	GetLegend returns the legend field s value .
3674	GetLegendOk returns the legend of the Widget
3675	HasLegend returns true if the Widget has a legend .
3676	GetManageStatusShowTitle gets the ManageStatusShowTitle field s value .
3677	GetManageStatusShowTitleOk returns true if the widget s ManageStatusShowTitleShowTitleShowTitle is set .
3678	HasManageStatusShowTitle returns true if the widget is set .
3679	GetManageStatusTitleAlign returns the ManageTitleTitleAlign field s value .
3680	GetManageStatusTitleAlignOk returns the value of the ManageTitleTitleTitleAlignTitleAssignals property .
3681	HasManageTitleTitleTitleAlign returns true if the widget is set .
3682	GetManageStatusTitleSize returns the size of the widget .
3683	GetManageStatusTitleSizeOk returns the size of the widget
3684	HasManageStatusTitleSize returns true if the widget is set .
3685	GetManageStatusTitleText returns the ManageStatusText field s value .
3686	GetManageStatusTitleTextOk returns the ManageStatusText field s value .
3687	HasManageStatusTitleText returns true if the widget is set .
3688	GetMonitor returns the ScreenboardMonitor
3689	GetMonitorOk returns the screenboard of the Widget .
3690	HasMonitor returns true if the widget has a Monitor .
3691	GetMustShowBreakdown returns the MustShowBreakdown field if it s non - nil zero value otherwise .
3692	GetMustShowBreakdownOkOk returns true if the WidgetBreakdown is not set .
3693	HasMustShowBreakdown returns true if the Widget has been shown .
3694	GetMustShowDistribution returns the MustShowDistribution field if it s non - nil zero value otherwise .
3695	GetMustShowDistributionOk returns true if the Widget is not present .
3696	HasMustShowDistribution returns true if the widget has been shown .
3697	GetMustShowErrors returns the MustShowErrors field if it s non - nil zero value otherwise .
3698	GetMustShowErrorsOkErrorsOk returns true if the Widget does not exist .
3699	HasMustShowErrors returns true if the Widget does not exist .
3700	GetMustShowHits returns the MustShowHits field if it s non - nil zero value otherwise .
3701	GetMustShowHitsOkOk returns true if the Widget is ok .
3702	HasMustShowHits returns true if the Widget has been set .
3703	GetMustShowLatency returns the MustShowLatency field if it s non - nil zero value otherwise .
3704	GetMustShowLatencyOkOk returns true if the Widget does not exist .
3705	HasMustShowLatency returns true if the Widget has been set .
3706	GetMustShowResourceList returns the MustShowResourceList field if it s non - nil zero value otherwise .
3707	GetMustShowResourceListOk returns true if the WidgetListItemList is ok .
3708	HasMustShowResourceList returns true if the WidgetList is true .
3709	GetParams returns the params
3710	GetParamsOk returns the params of the Widget
3711	HasParams returns true if the widget has params
3712	GetServiceService returns the ServiceService field s value .
3713	GetServiceServiceOk returns the service service service service .
3714	HasServiceService returns true if the widget has a service service .
3715	GetSizeVersion returns the SizeVersion field s value .
3716	GetSizeVersionOk returns the size of the Widget
3717	HasSizeVersion returns true if the widget has a size .
3718	GetTextSize returns the TextSize field s value .
3719	GetTextSizeOk returns the text size of the Widget
3720	HasTextSize returns true if the widget has a text size .
3721	GetTick returns the Tick field s value .
3722	GetTickOk returns true if the widget is ticked .
3723	HasTick returns true if the widget has a tick .
3724	GetTileDef returns the TileDef field s value .
3725	GetTileDefOk returns the TileDefOk if it s non - nil zero value otherwise .
3726	HasTileDef returns true if the TileDef has a TileDef .
3727	GetTitleText returns the TitleText field s value .
3728	GetTitleTextOk returns the title of the Widget
3729	HasTitleText returns true if the widget has title text .
3730	GetURL returns the URL of the Widget .
3731	GetURLOk returns the URL of the Widget .
3732	HasURL returns true if the Widget has a URL .
3733	GetCompute returns the Compute field s value .
3734	GetComputeOk returns the ComputeOkOrLog field s value .
3735	HasCompute returns true if the widget has been computed .
3736	GetIndex returns the Index field s value .
3737	GetIndexOk returns the IndexOk field if it s non - nil zero value otherwise .
3738	HasIndex returns true if the widget has the index .
3739	GetSearch returns the search value
3740	GetSearchOk returns the SearchOrLog query value .
3741	HasSearch returns true if the widget has a search .
3742	GetHideValue returns the HideValue field s value .
3743	GetHideValueOk returns the HideValueOk field if it s non - nil zero value otherwise .
3744	HasHideValue returns true if the WidgetConditionalFormat field is set .
3745	GetImageUrl returns the ImageUrl field s value .
3746	GetImageUrlOkOk returns the image url if it s non - nil zero value otherwise .
3747	HasImageUrl returns true if the WidgetConditionalFormat field is set .
3748	GetAliasName returns the alias name .
3749	GetAliasNameOk returns the alias name of the widget .
3750	HasAliasName returns true if the widget is alias name .
3751	GetSearchBy returns the searchBy field s value .
3752	GetSearchByOk returns the searchByOk field s value .
3753	HasSearchBy returns true if the WidgetProcessQuery field is set .
3754	GetIncludeUnits returns the IncludeUnits field s value .
3755	GetIncludeUnitsOk sets the IncludeUnitsOk field s value .
3756	HasIncludeUnits returns true if the Y axis has been included .
3757	dump dumps the template data
3758	newAccessor returns a new accessor
3759	addIdent adds an identifier to the template .
3760	addSelectorExpr adds a selector to the template
3761	addMapType adds a map type to the template .
3762	addArrayType adds an array type to the template .
3763	CreateDowntime creates a new Downtime .
3764	UpdateDowntime updates a downtime .
3765	GetDowntime returns a Downtime object
3766	GetDowntime returns a list of Downtimes .
3767	MarshalJSON serializes the API key .
3768	UnmarshalJSON unmarshals an API key .
3769	Get API keys
3770	Get API key
3771	Create a new API key
3772	DeleteAPIKey deletes an API key .
3773	PostMetrics sends a series of metrics .
3774	Get screenboard
3775	Get screenboards
3776	Create a Screenboard
3777	Update screenboard
3778	ShareScreenboard shares a screen .
3779	RevokeScreenboard deletes a screen .
3780	GetTags returns the tags for the specified source .
3781	GetHostTags returns the tags of a host
3782	AddTagsToHost adds tags to host
3783	RemoveHostTags removes host tags from a host
3784	redactError returns an error if the error occurs .
3785	doRequestWithRetries performs a request with retries .
3786	PostEvent posts an event .
3787	GetEvent returns an event by ID .
3788	GetEvents returns a list of events .
3789	ViewMetadata returns a MetricMetadata for a given metric .
3790	PostCheck posts a check
3791	WriteObject writes an object to the stream .
3792	ReadObject implements io . Reader .
3793	SetParams sets the request parameters
3794	SetMeta sets the meta data
3795	SetResult sets the response
3796	SetError sets the error
3797	Close closes the connection .
3798	Reply sends a reply to the server .
3799	ReplyWithError sends a response with the given ID .
3800	LogMessages log messages
3801	HandlerWithError creates a new HandlerWithErrorConfigurer .
3802	Handle implements the Handler interface .
3803	ReadObject reads an object from the stream .
3804	PickID sets the ID of the request .
3805	String returns a string representation of the node address .
3806	ccIP returns the CRC of the given IP .
3807	Stats returns the stats .
3808	NewServer creates a new Server .
3809	SetIPBlockList sets the IP block list .
3810	AddNode adds a node to the server
3811	getNode returns a node for the given address .
3812	Ping implements the Server interface .
3813	addResponseNodes adds all nodes to the server
3814	findNode attempts to find a node at the given address .
3815	Bootstrap is used to bootstrap the server .
3816	NumNodes returns the number of nodes .
3817	Nodes returns all the nodes in the table .
3818	Close closes the server .
3819	IsGood returns true if the node is good .
3820	NumContacted returns the number of connected peers .
3821	Announce announces a peer .
3822	maybeAnnouncePeer announces a peer .
3823	Close closes the announcement .
3824	NewUUID returns a new UUID .
3825	SetNodeInterface sets the node interface
3826	NodeID returns the node ID .
3827	SetNodeID sets the node ID
3828	NodeID returns the node ID
3829	ParseBytes parses a UUID into a UUID .
3830	MustParse parses a string .
3831	FromBytes converts a byte slice into a UUID .
3832	Must panics if an error occurs .
3833	Variant returns the variant of the UUID .
3834	Time returns the time of the UUID .
3835	MarshalText serializes a UUID to a string .
3836	UnmarshalText unmarshals a UUID .
3837	UnmarshalBinary unmarshals a UUID into a UUID .
3838	RunCursorAt returns the cursor at the given cursor position .
3839	Run executes the select .
3840	New returns a new ScreenBuf instance .
3841	Clear clears the screen .
3842	Write implements the ScreenBuf interface .
3843	Flush the screen buffer .
3844	Styler returns a string with the given attributes .
3845	New creates a new List .
3846	Prev returns the previous element .
3847	Search searches the list with the given term .
3848	CancelSearch removes all items from the list
3849	SetStart sets the cursor position .
3850	SetCursor sets the cursor position .
3851	Next returns the next element
3852	PageUp advances the list of items in the list .
3853	PageDown moves the cursor to the current scope .
3854	Items returns the items in the list .
3855	NewCursor creates a new cursor .
3856	Corrects the cursor position .
3857	format returns a string representation of a string
3858	Format returns the string representation of the cursor .
3859	FormatMask returns a string representation of the cursor .
3860	Replace replaces the character in the cursor .
3861	Place sets the cursor position .
3862	Move moves cursor position
3863	Backspace moves the cursor to the backspace .
3864	Listen listens to the cursor and returns the cursor position .
3865	AggregateIssueChan returns a channel of issues .
3866	StaticCallee returns the value of the call .
3867	Func returns the function with the given name .
3868	Var returns a global variable .
3869	Const returns a named constant .
3870	Type returns the type of the package .
3871	getGoPath returns the path to the home directory
3872	addPath adds a path to the list of paths
3873	configureEntersForInstall is used to configure the linter .
3874	UnmarshalStrict unmarshals a byte slice into an interface .
3875	Decode implements the Decode interface .
3876	Close closes the encoder .
3877	save a simple key to the parser .
3878	align returns the value of x .
3879	lintName returns the name of the given name .
3880	sanCheck checks whether a function is valid .
3881	MustSanityCheck checks if fn is valid .
3882	findDuplicate returns the first block in the list .
3883	newIssuePathFromAbsPath returns a new IssuePath from an absolute path .
3884	NewIssue creates a new issue .
3885	SortIssueChan returns a channel with the given order .
3886	logBinopOp evaluates a binary expression .
3887	expr returns the value of an expression .
3888	stmtList adds statements to the builder .
3889	AssignOp adds an op to the builder .
3890	localValueSpec computes the local value spec .
3891	ArrayLen computes the length of an array .
3892	switchStmt creates a switch statement .
3893	typeSwitchStmt creates a type switch statement .
3894	forStmt adds a statement to the builder .
3895	rangeStmt renders a range statement .
3896	buildFunction builds a function for a function .
3897	buildFuncDecl builds a function for a function declaration .
3898	Build builds all packages in the program .
3899	objectOf returns the object of the given identifier .
3900	typeOf returns the type of the given expression .
3901	parses an event .
3902	peek returns the next event type .
3903	prepare converts the given node to a new value .
3904	Parse parses a string .
3905	ParseVerb parses a verb .
3906	terminates returns true if the function is terminating .
3907	read_reader_read_handler is used to read the input stream .
3908	set input reader
3909	initialize the yaml_emitter .
3910	Write the given buffer to the output writer .
3911	setOutputWriter sets the output writer
3912	Initialize a YAML event .
3913	flush writes to the buffer .
3914	processConversion is used to process a conversion function .
3915	processCompositeLiteral checks if the given node is valid .
3916	processCgoExported checks if the given node is exported .
3917	WritePackage writes a package to buf .
3918	NewLinter creates a new Linter .
3919	IsStub returns true if the function is a stub .
3920	CheckUnexportedReturn is used to check if the function is not exported .
3921	CreateProgram creates a new program .
3922	IsIgnored checks if the given issue is ignored .
3923	Unmatched returns a map of ignored files .
3924	LoadFiles loads the directives from the given paths .
3925	ForArch returns a new Sizes with the given arch .
3926	CheckFrom returns true if the given value is converted to the given type .
3927	emitNode emits an event .
3928	IsBlank returns true if the expression is blank .
3929	Dereference returns the type of the given type .
3930	TCPDialCheck checks whether the given address is TCP dialed .
3931	HTTPGetCheck returns a check for HTTP GET request .
3932	DNSResolveCheck checks if a host is valid .
3933	NewHandler returns a new Handler instance
3934	NewMetricsHandler creates a new metrics handler .
3935	Timeout returns an error if the check fails .
3936	NewPinger creates a new Pinger .
3937	Network sets the network configuration
3938	AddIP adds a new IP address
3939	AddIPAddr adds a new IP address
3940	RemoveIP removes an IP from the pool .
3941	RemoveIPAddr removes the given IP address .
3942	MakeLang creates a slug from a string
3943	Replace replaces the given string with the given map .
3944	ReplaceRuneRune replaces a string with the given map .
3945	Parse parses the command line arguments .
3946	Sum returns a copy of the x .
3947	Reset is used to reset the zero value .
3948	Write implements io . Writer .
3949	Sum32 computes the sum of the XXH zeros .
3950	ChecksumZero calculates the checksum of the input .
3951	Uint32Zero returns a uint32 from x .
3952	UncompressBlock decodes src into dst .
3953	NewReader returns a new Reader .
3954	Reset initializes the reader .
3955	readUint32 reads a uint32 from the stream .
3956	Write implements io . Writer interface .
3957	compressBlock compresses the given data .
3958	Flush writes the data to the writer .
3959	Close closes the writer .
3960	Reset resets the writer .
3961	writeUint32 writes a uint32 to the buffer .
3962	Uncompress is used to uncompress a file .
3963	Compress is used to compress the output .
3964	Fuzz fuzzer
3965	NewClient creates a new client
3966	Subscribe registers a function to the client
3967	Start starts the server .
3968	PushEvent sends an event to the event bus
3969	New creates a new EventBus
3970	doSubscribe adds a function to the event bus
3971	Subscribe implements the EventBus interface .
3972	HasCallback returns true if the given topic exists .
3973	Unsubscribe removes an event from the bus .
3974	Publish publishes a topic .
3975	NewNetworkBus creates a new network bus
3976	Start starts the server
3977	NewServer creates a new server
3978	HasClientSubscribed returns true if the given argument is subscribed .
3979	Start starts the server .
3980	Register registers a new subscriber .
3981	Valid checks if the given time is valid .
3982	HasValidTLD returns true if the domain is valid .
3983	IsTLDMap returns true if the given label matches the given label .
3984	Execute checks if the certificate is valid .
3985	lintReversedIPAddressLabels returns an error if not found .
3986	CheckRDNSequenceWhiteSpace checks if the given RDN sequence is valid .
3987	IsIA5String returns true if the raw string is an IA5 string .
3988	AllAlternateNameWithTagName returns true if the given tag matches the given tag .
3989	IsEV returns true if the given list is an EVID .
3990	Execute implements the Lint interface .
3991	getData gets data from url
3992	getGTLDData retrieves the GTLD data from the ICANN_GT_JSON .
3993	legacyGTLDs returns a list of GTLDs for the given list of entries .
3994	validateGTLDs validates a list of GTLDs
3995	init initializes flag
3996	IsNameAttribute returns true if oid is a name attribute .
3997	MarshalJSON returns the JSON representation of the LintStatus .
3998	String returns the string representation of the LintStatus .
3999	EncodeLintDescriptionsToJSON encodes lints to JSON .
4000	LintCertificate verifies that the certificate is valid .
4001	CheckApplies returns true if the certificate should be applied .
4002	failResult creates a new LintResult
4003	CheckEffective checks if the certificate is effective .
4004	GetExtFromCert returns the extension for the given certificate .
4005	TypeInName returns true if the given name matches the given name .
4006	GetMappedPolicies returns a copy of the policy .
4007	printJSON prints the given value to stdout .
4008	UnmarshalJSON deserializes a URI into a URI .
4009	NewClient returns a new client .
4010	NewEnterpriseClient creates a new enterprise client .
4011	Query executes a query .
4012	Mutate mocks base method
4013	Populate files .
4014	DetectPath attempts to detect the current path .
4015	pathUp sets the path up to the current directory .
4016	pathDown sets the path down to the current directory
4017	Destroy removes the control .
4018	preload loads data from cache
4019	value retrieves the value from the cache
4020	Refresh screen
4021	AddWindow creates a new Window
4022	DestroyWindow destroys the current window .
4023	IsDeadKey returns true if the given key is dead .
4024	SetTextDisplay sets the text display .
4025	CreateRadioGroup creates a new RadioGroup
4026	Selected returns the selected radio button .
4027	SelectItem selects a radio group .
4028	SetSelected sets the selected item .
4029	AddItem adds a new RadioGroup
4030	NewColorParser creates a new color parser .
4031	NextElement returns the next element
4032	SetTitle sets the title of the edit field .
4033	SetMaxWidth sets the maximum width .
4034	SetSize sets the size of the edit field
4035	PopAttributes pops the attributes from the canvas .
4036	PushClip pushes a clip to the canvas
4037	PopClip removes the clip from the canvas
4038	InClipRect returns true if the canvas is in a clip rectangle .
4039	Set screen size
4040	Symbol returns a terminal cell .
4041	SetClipRect sets the clip rectangle
4042	ClipRect returns the current canvas .
4043	Draw horizontal line
4044	DrawVerticalLine renders a vertical line .
4045	DrawRawText draws a raw text .
4046	Draw text vertically
4047	DrawRawTextVertical Draws a raw text .
4048	DrawFrame draws a frame .
4049	FillRect fills the given rectangle with the given rectangle .
4050	TextExtent returns the width of the text .
4051	Ensure that the list is visible .
4052	Clear clears the list .
4053	AddItem adds a new item to the list .
4054	SelectItem selects an item from the list .
4055	Item returns the item at the given id .
4056	FindItem finds the item in the list .
4057	PartFindItem returns the first item in the list .
4058	SelectItemText returns the selected item .
4059	RemoveItem removes an item from the list .
4060	SysColor returns the color for the given color .
4061	SysObject returns the theme for the given theme .
4062	SetThemePath sets the theme path .
4063	Load a theme
4064	ReloadTheme loads a theme
4065	ThemeInfo returns the current theme .
4066	Ellipses a string .
4067	CutText cuts the given string .
4068	AlignText aligns the text to the given width .
4069	SliceColorized converts a string to a string
4070	ColorToString converts an attribute to a string .
4071	MainLoop runs the main loop .
4072	CreateEditField creates a new edit field .
4073	ChildAt returns the child at the given position .
4074	DeactivateControls removes all children of the given parent .
4075	ActivateControl activates a control .
4076	FindChild finds the child of the given parent .
4077	IsMouseClickEvent returns true if the event is a mouse click event .
4078	FindFirstControl returns the first control of the given parent .
4079	ActiveControl returns the active control of the given parent .
4080	FindFirstActiveControl returns the first active control of the given parent .
4081	SendEventToChild sends an event to the given parent .
4082	CalculateClipper returns the center of the given control .
4083	ClippedParent returns the parent of the given control .
4084	ControlInRect returns true if the control is within the rectangle .
4085	CreateAlertDialog creates a confirmation dialog .
4086	ProcessEvent processes a checkbox event .
4087	SetState sets the state of the checkBox
4088	State returns the state of the checkBox .
4089	SetAllow3State sets the Allow3State field s value .
4090	SetSize sets the size of the checkBox
4091	ScrollTo scroll to the frame
4092	Ensure that the column is visible .
4093	EnsureRowVisible ensures that the table is visible .
4094	Columns returns a slice of columns .
4095	SetColumnInfo sets the column info .
4096	OnKeyPress adds a function to the table view
4097	OnDrawCell adds a function to the table view
4098	SetSelectedRow sets the selected row .
4099	SetSelectedCol sets the selected column .
4100	SetSelected sets the selected value .
4101	OnChange registers a callback for a radio button .
4102	SetText implements the TextView interface .
4103	SetWordWrap sets the wordWrap field s value .
4104	LoadFile loads a text file .
4105	AddText adds text to the text view .
4106	Value returns the value of the progress bar .
4107	SetLimits sets the minimum value of the progress bar .
4108	Step returns the progress bar
4109	 SecondaryColors returns the secondary color of the progress bar .
4110	SetSecondaryColors sets the color of the progress bar .
4111	SetAutoSize sets the auto size .
4112	SetBarGap sets the gap gap .
4113	SetMinBarWidth sets the minimum width .
4114	SetShowTitles sets the showTitles field s value .
4115	SetLegendWidth sets the legend width .
4116	OnDrawCell adds a callback to the chart
4117	SetShowMarks sets the mark marks .
4118	OnKeyDown sets the key down to the window
4119	SetMaximizes the window .
4120	SetVisible sets the visibility of the window .
4121	SetTop sets the top of the chart .
4122	SetAutoScale sets the autoScale field s value .
4123	SetHilitePeaks sets hilite peak
4124	loadEnv loads environment variables
4125	Get returns the value for the given key .
4126	MustGet returns the value for the given key .
4127	Set sets the environment variable
4128	MustSet sets the environment variable
4129	GoPaths returns a list of paths .
4130	CurrentModule returns the current module path .
4131	request sends a request to the client
4132	validate validates the notification request .
4133	NewNetworkNumber creates a NetworkNumber from an IP .
4134	ToIP converts a NetworkNumber to an IP .
4135	Equal returns true if the network number is equal .
4136	Next returns the next network number .
4137	Previous returns the previous network number .
4138	NewNetwork creates a new Network .
4139	Masked returns a new Network with the given ones .
4140	Contains returns true if the network is contained in the network .
4141	Covers returns true if the network is within the network .
4142	LeastCommonBitPosition returns the lowest bit position of the network .
4143	Equal returns true if the network is equal .
4144	Mask mocks base method
4145	NextIP returns the next IP address .
4146	PreviousIP returns the previous IP address .
4147	newPrefixTree creates a new prefix tree .
4148	Insert inserts an entry into the prefix table .
4149	Remove removes a prefix from the router .
4150	Contains returns true if the given IP is contained in the prefix .
4151	String returns a string representation of the prefix .
4152	walkDepth returns a channel of all entries in the tree .
4153	newBruteRanger returns a new bruteRanger .
4154	Insert inserts an entry into the database .
4155	Remove removes an entry from the router .
4156	Contains returns true if the given IP matches the given IP .
4157	ParseMessage parses an IRC message .
4158	NewClient creates a new client
4159	Say sends a message to the channel .
4160	 Whisper message
4161	Join a channel
4162	Depart stops a channel .
4163	Disconnect closes the connection .
4164	Connect connects to the IRC server .
4165	Userlist returns a list of all users in a channel
4166	handleLine receives a message from the client
4167	Execute the command line .
4168	ExecuteOrgUsers implements the CommandManager interface .
4169	classify returns a classification that can be used as a classification segment .
4170	Execute the space security groups .
4171	ExecuteSpaces implements the CommandManager interface .
4172	Execute the SpaceNamedQuotaConfig
4173	ExecuteASGToConfiguration implements the Command interface .
4174	ExecuteSpaceUsers implements the CommandManager interface .
4175	Execute deletes a list of Orgs
4176	Execute the name of the org .
4177	Contains returns true if the given space name contains the given space .
4178	ExecuteOrgQuotas executes the update command .
4179	ExecuteSpace executes the update command .
4180	Orgs returns an array of Orgs
4181	GetGlobalConfig returns the global configuration .
4182	GetOrgConfigs returns all org configs
4183	GetSpaceDefaults returns the space configuration .
4184	AddOrgToConfig adds an org to the config
4185	AddSpaceToConfig adds a space to the config directory .
4186	CreateConfigIfNotExists creates a config file if it exists .
4187	DeleteConfigIfExists deletes the config directory .
4188	RenameSpaceConfiguration executes the command .
4189	Execute creates a new space .
4190	DeleteSpace deletes a space
4191	NewExportManager returns a new ExportManager instance
4192	Contains returns true if the organization belongs to the given org .
4193	UpdateOrgs updates the orgs
4194	UpdateSpaces updates the space configs .
4195	allDesiredSegment returns a list of all the desired segments .
4196	ListUsers returns a list of users .
4197	ExecuteSpaceCommand executes the update command .
4198	RemoveUnknownVisibilityites removes all visibility of a service .
4199	DisablePublicServiceAccess is used to disable public services .
4200	ListServiceInfo returns information about a service .
4201	Execute creates a new Org .
4202	ExecuteOrgs executes the command .
4203	Executes the DeleteOrgConfiguration command .
4204	Executes the DeleteSpaceConfiguration command .
4205	Executes the deleteSpaces command .
4206	NewKeyProvider returns a new SecretProvider instance
4207	NewConfiguration returns a new configuration instance
4208	NewConfigurationTrustProvider creates a new ConfigurationTrustProvider .
4209	NewValidator returns a new JWWT instance
4210	ValidateRequest validates a JWT request .
4211	ValidateRequestWithLeeway invokes the JWWT method .
4212	Claim claims for a JWT token
4213	NewJWKClient creates a new JWK client .
4214	NewJWKClientWithCache creates a new JWK client with the given options .
4215	GetKey returns the key associated with the given ID .
4216	GetSecret gets the secret from the request .
4217	FromMultiple returns a RequestTokenExtractorFunc that extracts tokens from the request .
4218	FromParams returns a JWT token from the request .
4219	NewMemoryKeyCacher returns a new KeyCacher .
4220	Get retrieves a key from the cache .
4221	Add adds a key to the cache
4222	keyIsExpired returns true if the key is expired .
4223	handleOverflow checks if the cache has been exceeded .
4224	Patch implements io . Patch interface .
4225	Diff implements io . Reader .
4226	validColor returns true if the given color is valid .
4227	New creates a new Spinner .
4228	Start starts the spinner .
4229	Stop stops the spinner .
4230	Reverse reverses the string .
4231	Color sets the color
4232	UpdateSpeed updates the speed .
4233	UpdateCharSet updates the charset .
4234	 erase the current line
4235	GenerateNumberSequence returns a slice of strings .
4236	header returns the header of the stream .
4237	NewMultiplex creates a new Multix .
4238	Accept accepts multiple streams .
4239	NewNamedStream creates a new stream with the given name .
4240	encodeInt returns a uint64 encoded integer .
4241	Center returns the center of the box .
4242	Round returns the bounding box .
4243	BoundingBox returns a bounding box for a given hash .
4244	BoundingBoxIntWithPrecision returns a bounding box for a given hash .
4245	DecodeCenter returns the center of the given hash .
4246	Neighbors returns the neighbors of the given hash .
4247	NeighborsIntWithPrecision returns a slice of int64 encoded integers .
4248	NeighborsIntWithPrecision returns the number of neighbors in the given hash .
4249	Spread a 32 - bit integer .
4250	newEncoding creates a new encoding .
4251	Encode converts a uint64 to a string
4252	InitArgs initializes the Linux factory
4253	InitPath initializes the Linux factory
4254	StartInitializes the container .
4255	newConsole creates a new console .
4256	mount mounts the given rootfs .
4257	dustStdio implements the LinuxConsole interface .
4258	open opens a new file
4259	ptname returns the name of the file .
4260	finalizeNamespace cleans up the namespaces
4261	joinExistingNamespaces joins the given namespaces .
4262	setupUser sets up the user s config .
4263	killCgroupProcesses kills all processes
4264	addUidMappings adds uid mappings to the system .
4265	dropBoundingSet clears the whitelist .
4266	drop drops all capabilities .
4267	ensureParent adds the parent directory to the directory .
4268	Pid returns the PID of the process .
4269	Sign signals the process .
4270	NewConsole creates a new console .
4271	setupRootfs initializes the root filesystem .
4272	createDevices creates a new device node .
4273	createDeviceNode creates a new device node .
4274	remountReadonly mounts the given path to the given path .
4275	joinCpuset sets the cgroup for the given pid .
4276	joinBlkio creates a blkio for the given pid
4277	execSet executes the setns command .
4278	GetAllSubsystems returns all subsystems .
4279	GetCgroupDirDir returns the cgroup directory for the given subsystem .
4280	Capture returns a stacktrace .
4281	getCgroupParamUint returns the cgroup parameter
4282	GetAdditionalGroupsPath retrieves the list of groups from the given group path .
4283	addArgsFromEnv parses environment variables from environment variables
4284	InitLabels initializes the list of labels .
4285	SetFileLabel sets the file label
4286	SetFileCreateLabel sets the file label
4287	Relabel replaces file label with relabel
4288	NetworkGetRoutes returns a list of routes .
4289	CreateBridge creates a bridge .
4290	DeleteBridge deletes a bridge .
4291	AddToBridge adds a bridge to the interface .
4292	DelFromBridge removes a bridge from the interface .
4293	labelIndex returns the index of the label .
4294	getSelinuxMountPoint returns the selinux mount point
4295	SelinuxEnabled returns true if selinux is enabled
4296	SetFilecon sets the sconux to the given file .
4297	GetFilecon returns the value of a file .
4298	check bad prefixes
4299	Chconverts a scon to a file .
4300	DupSecOpt takes a src and returns a list of strings that can be used in the context
4301	attach attaches a network to the network
4302	Add adds a syscall to the context .
4303	Load initializes the context .
4304	newGraph returns a new graph .
4305	MakeDisjointSet creates a new DisjointSet with the given name .
4306	FindSet returns a DisjointSet with the given name .
4307	Union concatenates two trees .
4308	Me Me
4309	List projects .
4310	DisableProject deletes a project .
4311	FollowProject creates a project .
4312	GetProject returns a project by account name .
4313	ListRecentBuilds returns a list of Builds .
4314	ListRecentBuildsForProject returns a list of Builds for a project .
4315	ListBuild artifacts
4316	AddSSHUser adds a build to a build .
4317	Build builds a build .
4318	ParameterizedBuild returns a build with the specified parameters .
4319	BuildOpts returns the build options .
4320	ClearCache deletes a repository
4321	DeleteEnvVar deletes an existing environment variable .
4322	AddSSHKey adds a new SSH key to the account
4323	GetActionOutputs returns the output of an action .
4324	List checkout keys
4325	Create a checkout key
4326	Get checkout key
4327	DeleteCheckoutKey deletes a checkout key
4328	New creates a new client .
4329	Clone returns a new client .
4330	Count counts the number of items .
4331	Gets a gauge .
4332	Timing adds a value to the client .
4333	Send sends the given bucket .
4334	Unique adds a unique value to the bucket .
4335	Flush closes the connection .
4336	Close closes the connection .
4337	SampleRate sets the rate of the client
4338	Prefix adds a prefix to the client
4339	TagsFormat sets the tag format
4340	Tags adds tags to the client
4341	flush writes n bytes to w .
4342	BuildQwerty creates a graphwerty graph from the graph
4343	BuildDvorakGraph builds a graph from the given data .
4344	BuildKeypad returns the keypad graph
4345	BuildMacKeypad creates a new MAC keypad
4346	BuildLeet builds a graph from a file .
4347	DictionaryEntropy returns the entropy of the given rank .
4348	SpatialEntropy returns the entropy of the given match .
4349	RepeatEntropy returns the entropy of a match .
4350	SequenceEntropy returns the entropy of a sequence .
4351	ExtraLeetEntropy returns the entropy of the given password .
4352	DateEntropy returns the entropy of a date match .
4353	omimim returns a list of matches for the given password .
4354	Null returns the next non - zero value .
4355	Number returns the number of bytes .
4356	Array parses a byte array .
4357	FindRange returns a slice of bytes in the given range .
4358	Object parses an object .
4359	FindKey finds a key from the input stream .
4360	FindIndex finds the index at the given index .
4361	dot returns an OpFunc for the given key .
4362	Chain returns a new OpFunc with the given filters .
4363	Index returns the index of the given index .
4364	Range returns a slice of bytes in range .
4365	String returns the position of a string .
4366	Boolean checks if the input is a boolean .
4367	Must panics if an error occurs .
4368	Parse parses a selector .
4369	Any parses a string into an array .
4370	ProxyRequestFromContext returns the request request from the context .
4371	DurationValue returns the duration of the given Duration .
4372	Base64Value returns the base64 value .
4373	URIValue converts a string to a URI .
4374	EmailValue returns the email address .
4375	HostnameValue returns the hostname value .
4376	IP4Value returns the IPv4 value .
4377	 IPv6 value .
4378	CIDRValue returns the CIDR value .
4379	MACValue returns the MAC value .
4380	UUIDValue converts a UUID to a UUID .
4381	UUID3Value returns a UUID3 .
4382	UUID4Value returns a UUID4 .
4383	UUID5Value returns the UUID5 value .
4384	BNValue returns the ISBN value
4385	BN10Value returns the ISBN10 value .
4386	BN13Value returns the ISBN13 value .
4387	CreditCardValue returns the CreditCard value for a credit card .
4388	SSNValue returns the SSN field s value .
4389	HexColorValue returns the hexadecimal color value .
4390	RGBColorValue returns the RGBA color value .
4391	PasswordValue returns the value of the password field .
4392	MarshalJSON marshals the ObjectId to JSON .
4393	MarshalEasyJSON marshals an ObjectId to a Writer .
4394	UnmarshalJSON implements json . Unmarshaler interface .
4395	UnmarshalEasyJSON unmarshals an object into an object .
4396	SetBSON sets the BSON field s value .
4397	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ObjectId .
4398	IsHostname checks if a string is a valid hostname .
4399	IsEmail returns true if the given string is an email address .
4400	MarshalJSON marshals Base64 to JSON .
4401	MarshalEasyJSON writes a base64 encoded string to w .
4402	UnmarshalJSON implements json . Unmarshaler interface .
4403	UnmarshalEasyJSON unmarshals a base64 string .
4404	SetBSON sets the base64 field s value .
4405	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Base64 .
4406	MarshalJSON returns the JSON representation of the URI .
4407	MarshalEasyJSON encodes a URI to a JSON .
4408	UnmarshalJSON implements json . Unmarshaler interface .
4409	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new URI .
4410	MarshalJSON marshals an email to a JSON string .
4411	MarshalEasyJSON encodes an email into a Writer .
4412	UnmarshalJSON deserializes an email .
4413	UnmarshalEasyJSON unmarshals an email .
4414	SetBSON sets the BSON field s value .
4415	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Email .
4416	MarshalEasyJSON encodes a Hostname to a Writer .
4417	SetBSON sets the Hostname field s value .
4418	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Hostname .
4419	MarshalEasyJSON implements io . Writer interface .
4420	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new IPv4 .
4421	MarshalEasyJSON implements io . Writer interface .
4422	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new IPv6 .
4423	MarshalEasyJSON encodes a CIDR to a Writer .
4424	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new CIDR .
4425	MarshalEasyJSON implements io . Writer interface .
4426	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new MAC .
4427	MarshalEasyJSON encodes a UUID to a Writer .
4428	SetBSON sets the UUID field s value .
4429	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID .
4430	MarshalEasyJSON implements io . Writer interface .
4431	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID3 .
4432	MarshalEasyJSON writes the UUID to w . Writer .
4433	UnmarshalJSON implements json . Unmarshaler interface .
4434	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID4 .
4435	MarshalEasyJSON implements io . Writer .
4436	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID .
4437	MarshalEasyJSON encodes an ISBN .
4438	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN .
4439	MarshalEasyJSON implements io . Writer .
4440	UnmarshalEasyJSON unmarshals an ISBN .
4441	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN10 .
4442	MarshalEasyJSON marshals an ISBN13 .
4443	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN13 .
4444	MarshalEasyJSON encodes a CreditCard .
4445	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new CreditCard .
4446	MarshalEasyJSON encodes an SSN .
4447	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new SSN .
4448	MarshalJSON serializes the hexadecimal color .
4449	MarshalEasyJSON implements io . Writer .
4450	UnmarshalJSON deserializes a hexadecimal color
4451	UnmarshalEasyJSON unmarshals a hexadecimal color .
4452	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new HexColor .
4453	MarshalEasyJSON implements io . Writer interface .
4454	UnmarshalJSON deserializes a RGBA color .
4455	UnmarshalEasyJSON unmarshals a string from a string .
4456	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new RGBColor .
4457	MarshalJSON marshals the password .
4458	MarshalEasyJSON writes the password to w .
4459	SetBSON sets the password field s value .
4460	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Password .
4461	IsDateTime checks if a string is a date time .
4462	ParseDateTime parses a datetime string .
4463	UnmarshalText unmarshals a DateTime .
4464	Scan scans the given raw data from raw data .
4465	Value returns the value of the date .
4466	MarshalJSON marshals the DateTime to JSON .
4467	MarshalEasyJSON marshals a DateTime .
4468	UnmarshalJSON implements json . Unmarshaler interface .
4469	UnmarshalEasyJSON unmarshals a DateTime .
4470	SetBSON sets the DateTime field s value .
4471	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DateTime .
4472	IsDuration checks if string is a duration .
4473	ParseDuration parses a string into a duration .
4474	Scan sets the Duration field s value .
4475	Value returns the value of the Duration .
4476	MarshalJSON marshals Duration to JSON .
4477	MarshalEasyJSON marshals a Duration to a Writer .
4478	UnmarshalJSON unmarshals a Duration .
4479	UnmarshalEasyJSON unmarshals a Duration .
4480	SetBSON sets the Duration field s value .
4481	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Duration .
4482	DateValue returns the date value .
4483	IsDate returns true if the string is a date .
4484	UnmarshalText unmarshals a date .
4485	Scan scans the given raw data .
4486	Value returns the value of the date .
4487	MarshalEasyJSON implements io . Writer .
4488	UnmarshalJSON unmarshals a Date object
4489	UnmarshalEasyJSON unmarshals a date .
4490	SetBSON sets the Date field s value .
4491	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Date .
4492	DateTimeValue returns the DateTime field .
4493	NewSeededFormats returns a new RegistryFormats .
4494	Add adds a new format to the default format
4495	GetType returns the type for the given name .
4496	DelByName removes a known format by name .
4497	DelByFormat removes a format from the default format .
4498	ContainsName returns true if the given name matches the given name .
4499	ContainsFormat returns true if the given format matches the given format .
4500	Parse parses a string representation of the given format .
4501	Sequence returns a new Filter with the given filters .
4502	Contents returns the contents of the contents of the contents .
4503	Items adds items to the list
4504	Repeat adds a string to the output .
4505	Numbers returns a new number of numbers
4506	Uniq returns a FilterFunc that can be used to filter strings .
4507	UniqWithCount returns a filter that can be used to generate a new one .
4508	Reverse returns a filter that can be used to filter strings .
4509	SampleWithSeed returns a new sample with random samples .
4510	First returns a FilterFunc that returns a FilterFunc .
4511	Last returns a FilterFunc that can be used to filter elements .
4512	DropLast returns a filter that drops the number of elements .
4513	Text returns a new sort filter .
4514	TextDecreasing implements SortFilter .
4515	Num returns a new sort filter .
4516	NumDecreasing implements SortFilter .
4517	By returns a new sort filter .
4518	FlipLast returns a new sort filter .
4519	RunFilter implements the SortFilter interface .
4520	RunFilter runs the filter .
4521	Grep returns a filter that matches r .
4522	GrepNot returns a filter that matches r .
4523	LimitArgs sets the limit arguments .
4524	Cat returns a filter that can be used to filter files .
4525	ReadLines reads lines from an io . Reader .
4526	IsComment returns true if the host is a comment .
4527	NewHostsLine creates a new HostsLine
4528	IsWritable returns true if the host is writable .
4529	Flush the hosts .
4530	Add adds a new host to the host
4531	Remove removes hosts from host
4532	NewHosts returns a new Hosts instance
4533	NewOpenAPISchemaFor implements the OpenAPISchema interface .
4534	Validate validates an object .
4535	FlattenToV1 converts an object to v1 .
4536	ParseVersion parses a server version .
4537	FetchVersion returns the server version of the server .
4538	SetMetaDataAnnotation sets the metadata for the given object .
4539	SetMetaDataLabel sets the label for the given object .
4540	ResourceNameFor returns the resource name for the given object .
4541	FqName returns the name of the given object .
4542	String returns a string representation of the image name .
4543	RepoRepoName returns the name of the image name .
4544	RegistryURL returns the URL for the image name .
4545	ParseImageName parses an image name .
4546	NewRegistryResolver returns a new Resolver .
4547	NewLogFormatter returns a new log formatter .
4548	NewMemcachedDiscoveryClient returns a new instance of MemcachedDiscoveryClient
4549	ClientForResource returns a resource interface for the given object .
4550	formatDiff formats diffs into a string
4551	isEmptyValue returns true if the given value is empty .
4552	depTier returns the dependency for the given object .
4553	New creates a new Lexer .
4554	NextToken returns the next token .
4555	InnerText returns the inner text representation of the block statement .
4556	MarkdownHelper renders a Markdown helper .
4557	Parse parses a string .
4558	NewHelperMap creates a new HelperMap
4559	AddMany adds a helper to the helper map
4560	RenderRenderer renders the given input .
4561	Render renders the given input .
4562	RunScript runs a script .
4563	NewTemplate returns a new Template .
4564	Parse parses the template
4565	Exec executes the template .
4566	Clone clones the template .
4567	Render renders the given string .
4568	BlockWith renders a block with the given context .
4569	Has returns true if the given key exists .
4570	Export returns a map of the current context .
4571	NewContextWith returns a new Context with the given data .
4572	NewContextWithContext creates a new context .
4573	Aggregate returns a slice of all goroutines .
4574	Less returns true if the bucket is less than the bucket .
4575	parseDump parses a dump of goroutines .
4576	hasPathPrefix returns true if the map contains a path prefix
4577	getFiles returns a list of all files in goroutines
4578	splitPath splits a path into a list of paths .
4579	isFile returns true if path is a file .
4580	rootIn returns the root path for the given root .
4581	findRoots finds the root GOPATH roots .
4582	String returns the string representation of the function .
4583	Name returns the name of the function .
4584	PkgName returns the package name
4585	IsExported returns true if f is exported .
4586	IsPtr returns true if the argument is a pointer .
4587	Equal returns true if two Args are equal .
4588	similarity returns true if the arguments are equal .
4589	merge merges two Args
4590	Equal returns true if this call is equal .
4591	similarity returns true if the call is similar
4592	merge merges a call into a Call object .
4593	PkgSrc returns the path for the call .
4594	updateLocations updates the location of the local goroutine
4595	Equal returns true if the stack is equal .
4596	similarity returns true if the stack is similar to the stack
4597	merge merges the stack into the stack .
4598	Less returns true if stack is less than r .
4599	Equal returns true if the signature is equal .
4600	similarity returns true if the signature matches the given signature .
4601	merge merges the signature into a new Signature .
4602	Less returns true if the signature is less than the signature .
4603	CreatedByString returns a string representation of the signature .
4604	nameArguments returns the names of the names of a goroutine .
4605	CalculateLengths returns the number of lines in the stack .
4606	functionColor returns the color for the given line .
4607	ColorColor returns the color of the palette .
4608	BucketHeader returns a string representation of a bucket .
4609	callLine returns a string representation of a line .
4610	StackLines returns a string representation of a stack trace .
4611	mergeGoroutine updates the cache for the given goroutine .
4612	load loads the cache from the cache .
4613	getFuncAST returns the AST for the given file .
4614	fieldToType converts field to type
4615	extractArgumentsType extracts the arguments from the given function .
4616	Reset resets the template
4617	Unlock unlocks the mutex
4618	RUnlock implements the lock .
4619	other implements the lockOrder interface .
4620	getSourceLines returns the lines of a file .
4621	Stack returns a slice of stack stacks .
4622	NewWithAlphabet returns a string with the given alphabet .
4623	numToString converts a number to a string
4624	StringToNum converts a string to a number .
4625	newAlphabet returns a new alphabet .
4626	Index returns the index of the given string .
4627	reduce converts a list of strings to a list of strings .
4628	Is returns true if the given error is equal .
4629	Error returns the error message .
4630	ErrorStack returns a string representation of the error .
4631	TextStyle converts a text style to a string .
4632	NewPointsIndex returns a new PointsIndex
4633	NewExpiringPointsIndex returns a new PointsIndex .
4634	Get returns the point at the given id .
4635	GetAll returns all points in the index
4636	Add adds a point to the index .
4637	Remove removes a point from the index .
4638	Range returns a slice of points in the index .
4639	KNearest returns a slice of points for a given point .
4640	PointsWithin returns a slice of points within a given point .
4641	newMultiValueCounter returns a new multi - value counter .
4642	newAverageAccumulator returns a new instance of the average counter .
4643	newGeoIndex creates a new GeoIndex
4644	AddEntryAt adds a point to the index .
4645	GetEntryAt returns the entry at the given point .
4646	Range returns the range of cells in the range
4647	NewClusteringIndex creates a new ClusteringIndex
4648	NewExpiringClusteringIndex creates a new ClusteringIndex
4649	Range returns the range of points between two points .
4650	KNearest returns the nearest point at the given point .
4651	Push adds an element to the queue .
4652	Pop removes the element from the queue .
4653	Peek returns the element in the queue .
4654	PeekBack returns the next element in the queue .
4655	ForEach iterates over all elements in the queue .
4656	Clone returns a copy of the set .
4657	NewCountIndex creates a new count index .
4658	NewExpiringCountIndex creates a new count index .
4659	Range returns a slice of points in the index .
4660	KNearest returns a slice of points at the given point .
4661	DirectionTo returns the direction of the given point .
4662	 Bearing Bearing
4663	Returns the approximate distance between two points .
4664	newResult creates a new result .
4665	NewSource creates a new source
4666	newHelperMethodYield creates a helper function that returns an instance of helper method .
4667	newHelperMethodDoctype creates a new helper method .
4668	NewFile creates a new File .
4669	Load loads a template .
4670	getCache returns the template for the given name .
4671	setCache adds a template to the cache .
4672	FlushCache clears the cache .
4673	newPlainTextInner returns a plain text .
4674	newEmptyElement creates a new empty element .
4675	newComment creates a new comment .
4676	newHelperMethodJavascriptJavascript creates a new helper method .
4677	ParseSource parses a source .
4678	parseBytes parses a string into a list of elements .
4679	appendChildren recursively adds children to the result .
4680	newHTMLComment creates a new HTML comment .
4681	newHelperMethodInclude returns an instance of helper method .
4682	newHelperMethodConditionalComment creates a helper for a helper method .
4683	CompileResult compiles a result into a template
4684	CompileResultWithTemplate compiles the result into a template .
4685	AppendChild appends a child element to the element .
4686	writeChildren writes the children of the element .
4687	newElementBase returns a new elementBase .
4688	readFiles reads a source file and returns a source .
4689	readFile reads a file .
4690	findIncludes finds all included files in the given data .
4691	findIncludePaths returns the list of include paths in the file .
4692	hasFile returns true if the given path matches the given path .
4693	newHelperMethodCSS creates a helper function for creating a new helper method .
4694	newElement creates a new element
4695	newHelperMethodContent creates a helper method for creating a helper method .
4696	setAttributes sets the attributes of the tag .
4697	noCloseTag returns true if there is no closing tag .
4698	IsBlockElement returns true if the element is inline .
4699	newHTMLTag creates a new HTML tag .
4700	extractTagName extracts the tag name from a string .
4701	extractID extracts the ID from a string .
4702	extractClasses extracts classes from a string .
4703	parseTokens parses and returns a list of tokens .
4704	newPlainText creates a plain text .
4705	isHelperMethod returns true if the line is a helper method .
4706	isHelperMethodOf returns true if the given name is a helper method .
4707	isPlainText returns true if the line is a plain text .
4708	isComment returns true if the line is a comment .
4709	isHTMLComment returns true if the line is a HTML comment .
4710	isAction checks if the line is action .
4711	fileName returns the file name .
4712	childOf returns true if the line is a child .
4713	newLine creates a new line .
4714	indent indentation
4715	InitializeOptions initializes options .
4716	AddNoCloseTagName adds a name to the option list .
4717	DeleteNoCloseTagName deletes the named tag name .
4718	Asset returns the asset .
4719	newAction creates a new action .
4720	AddRelayTransport creates a new transport .
4721	NewRelay creates a new Relay .
4722	ParseJSONBody parses a JSON body and parses it into an object .
4723	New creates a new Runner
4724	RunGroup runs the given group .
4725	ParseFile parses a list of groups .
4726	ParseLine parses a line .
4727	Capture captures the comment .
4728	Bytes returns a byte slice of lines .
4729	Equal returns true if the value is equal
4730	Type returns the type of the value .
4731	NewServer creates a new http server
4732	PrettyPrintAsJSON prints an input as JSON .
4733	StringMarshalJSON returns a string representation of data .
4734	StringMD5Hex returns the MD5 hash of data .
4735	StringSHA1BaseBase64 returns a base64 encoded string .
4736	StringJoinFormat formats a slice of values into a string .
4737	StringJoin returns a string representation of values .
4738	Less returns true if two strings are sorted .
4739	Swap swaps two strings .
4740	StringMap returns a slice of strings .
4741	StringFilter returns a slice of strings .
4742	StringFindBetween finds between two strings .
4743	StringFind finds a string with the given token .
4744	EncryptAES encrypts a plaintext using AES encryption .
4745	DecryptAES decrypts a ciphertext .
4746	PanicIfErr panics if the given arguments are not nil .
4747	AsError converts an error into an error .
4748	FirstError returns the first error of the given errs .
4749	LastError returns the last error
4750	AsErrorList returns an error list .
4751	Error returns the error message .
4752	Last returns the last error
4753	Collect adds an error to the list .
4754	HTTPCompressHandlerFunc returns an http . HandlerFunc that wraps the http . HandlerFunc .
4755	HTTPPostJSON sends an HTTP POST request to the given URL .
4756	HTTPDelete is an HTTP DELETE request .
4757	HTTPUnmarshalRequestBodyJSON unmarshals the request body .
4758	GetWriter returns a flate writer .
4759	Return a flate writer .
4760	GetWriter returns a gzip writer .
4761	Return a gzip writer .
4762	FileGetLines reads lines from a file or returns a list of lines .
4763	FileGetLastLine returns the last line of the last line .
4764	FileSize returns the size of the file .
4765	BytesHead returns a slice of lines of the given data .
4766	BytesMap maps a function to a byte slice .
4767	BytesFilter returns a slice of bytes filtered by the given function .
4768	RefSetStructFieldString sets the field s value .
4769	ReadBinary reads the data from the given io . Reader .
4770	WriteFull writes data to writer .
4771	ReadLine reads a line from an io . Reader .
4772	WaitForStdin is a helper function to wait for a line to be printed .
4773	GetenvDefault returns the default value for the given key .
4774	NetIP returns the network IP address .
4775	RealNetIP returns the real network IP address
4776	Load loads the configuration from the given configuration .
4777	LoadJSON loads the configuration from the given configuration .
4778	LoadTOML loads the configuration from a configuration file .
4779	LoadBytes loads the configuration from the given source .
4780	LoadJSONBytes loads the configuration from the given source .
4781	LoadTOMLBytes loads the configuration from the given source .
4782	LoadWithEnvJSON loads the configuration from the given configuration .
4783	LoadWithEnvTOML loads a configuration from a configuration file .
4784	LoadWithEnvBytes loads config from src .
4785	LoadWithEnvJSONBytes loads config from src .
4786	LoadWithEnvTOMLBytes loads config from src .
4787	Crop crops the image .
4788	Compute the size of the image .
4789	computeCropArea returns the crop area for the given bounds .
4790	New creates a new git command
4791	NewLongCmd creates a new git command
4792	Command returns the command .
4793	Exec executes the git command .
4794	stopProcess stops the git command .
4795	runCmd runs a command .
4796	runCmdOutput returns the output of the command .
4797	Init initializes git repository
4798	writeScriptFile writes a script to a file .
4799	git wrapper for git wrapper
4800	bashScript generates a script for the given repo .
4801	handleToken is used to handle a token
4802	Handle implements the GenericHook interface .
4803	handleSignature handles the signature of the request .
4804	setup creates a new webhook
4805	parseURL parses the repo and returns a new URL .
4806	Start starts a new repo
4807	add adds a new repo service
4808	Repo returns the repository at the given index .
4809	String returns a string representation of the repository .
4810	Val returns the value of the repository
4811	Pull pulls the repo from the repository
4812	Pull commits the repository .
4813	 checkout a commit
4814	gitCmd runs git command
4815	Prepare initializes the repo .
4816	Gets the most recent commit of the repository .
4817	OriginURL returns the origin URL for the repository .
4818	execThen executes the command in the repository .
4819	Stdin sets the stdin
4820	Stdout sets stdout to stdout .
4821	Stderr sets stderr to stdout .
4822	Mkdir mocks base method
4823	MkdirAll mocks base method
4824	Stat implements GitOS .
4825	LookPath returns the path for the given file .
4826	TempFile creates a temporary file with the given prefix .
4827	ReadDir reads the contents of a directory .
4828	Command returns a new git command
4829	NewTicker returns a new Ticker .
4830	TimeSince returns the time of the given time .
4831	handleSignature checks if the request is valid .
4832	Error returns the error message .
4833	hookName returns the name of a hook .
4834	ServeHTTP implements the http . Handler interface .
4835	hostname returns the hostname
4836	generateOptions generates the options for a query .
4837	generate query options
4838	convertOptions converts the options into an array .
4839	mode returns the file mode
4840	registerAlias registers a scheme .
4841	Register registers a scheme .
4842	Unregister a scheme .
4843	has returns true if a string contains a b .
4844	SchemeDriverAndAliases returns the scheme and aliases .
4845	GenerateFromURL parses a URL from a URL string .
4846	GenoOpa returns the URL for the given URL .
4847	GeneratePostgres generates a postgres query string
4848	GenerateSQLServer generates a sql server for the given URL .
4849	GenerateMySQL generates the MySQL database for the given URL .
4850	GenOracle creates a new Oracle Oracle Oracle Oracle .
4851	GenerateFirebird generates a URL for the given URL .
4852	GenerateADDB generates the DODB for the given URL .
4853	GenerateODBC generates the database for the given URL .
4854	GenerateOLEBC generates an OLETE query string
4855	GenerateClickhouse generates a URL for Clickhouse .
4856	GenerateVoltDB generates a string for a given URL .
4857	GeneratePresto generates a Presto from a URL .
4858	GenCassandra generates a cassandra query string .
4859	GenSnowflake generates a Snowflake from a URL .
4860	String returns a string representation of the URL .
4861	Short returns the string representation of the URL .
4862	Normalize returns a normalized string representation of the URL .
4863	NewLimiter returns a new RateLimiter .
4864	Has returns true if the given id exists .
4865	Attemptsed attempts to attempt to attempt to attempt to attempt to get the number of attempts .
4866	Left returns the left of the limit .
4867	Attempt attempts to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt the number of attempts to attempt to attempt to attempt to attempt to attempt to attempt to retrieve the number of times .
4868	IsPublicIP returns true if the given IP is public .
4869	ParseForwarded returns the forwarded IP address
4870	In returns true if the field is in the mode .
4871	Out returns true if the field is out .
4872	SetLobReader sets the reader s value .
4873	Error returns the error message .
4874	SetIdx sets the index of the error .
4875	Code returns the error code .
4876	Position returns the position of the error .
4877	Level returns the level of the error .
4878	Text returns the text of the error .
4879	IsWarning returns true if the error occurred .
4880	IsError returns true if the error occurred .
4881	IsFatal returns true if the error occurred .
4882	Size returns the number of bytes in bytes .
4883	StringSize returns the size of a string .
4884	FullRune returns true if p is full rune .
4885	DecodeRuneRune decodes a byte slice .
4886	R rune length
4887	On returns true if the tracer is enabled .
4888	SetOn sets whether or not or not .
4889	read reads the segment header .
4890	Go starts the sniffer .
4891	Write writes data to the session .
4892	NewSession creates a new Session .
4893	QueryDirect sends a query to the server .
4894	ExecDirect executes a query .
4895	Prepare sends a query to the session .
4896	Exec executes a statement .
4897	DropStatementID deletes a statement ID .
4898	Call implements the Session interface .
4899	Query executes the given statement .
4900	FetchNext fetches the next part of the request .
4901	CloseResultsetID sets the resultset ID for the given ID .
4902	Commit commits the transaction .
4903	NewReader returns a new Reader .
4904	NewReaderSize creates a new reader .
4905	GetError returns the error .
4906	Skip implements io . Reader .
4907	ReadB implements io . Reader .
4908	ReadFull implements io . Reader
4909	ReadBool returns true if the reader is read .
4910	ReadInt16 reads an int16 from the reader .
4911	ReadUint16 reads a uint16 .
4912	ReadInt32 reads an int32 from the reader .
4913	ReadUint32 reads a uint32 from the reader .
4914	ReadInt64 reads an int64 .
4915	ReadUint64 reads a uint64 .
4916	ReadFloat32 reads a float32 from the reader .
4917	ReadFloat64 reads a float64 from the reader .
4918	ReadCesu8 reads CESU8 bytes from the reader .
4919	NewWriter returns a new Writer .
4920	NewWriterSize creates a new Writer .
4921	Flush implements Writer .
4922	WriteZoes writes the number of bytes to the writer .
4923	Write writes p to w .
4924	WriteB writes a byte to the writer .
4925	WriteBool writes a boolean value to the writer .
4926	WriteInt8 writes an int8 to the writer .
4927	WriteInt16 writes an int16 to the writer .
4928	WriteUint32 writes a uint32 to w .
4929	WriteInt64 writes an int64 to the writer .
4930	WriteFloat32 writes a float32 to the writer .
4931	WriteFloat64 writes a float64 to the writer .
4932	WriteString writes a string to the writer .
4933	WriteCesu8 writes c to w .
4934	WriteStringCesu8 writes a string to w .
4935	DataType returns the DataType for the given type .
4936	Name returns the field name .
4937	NewBasicAuthConnector creates a new Connector .
4938	Locale returns the locale
4939	FetchSize returns the size of the connection .
4940	Timeout returns the timeout .
4941	LSConfig returns the TLS configuration .
4942	SetTLSConfig sets the TLS configuration .
4943	SessionVariables returns the session variables .
4944	SetSessionVariables sets the session variables .
4945	BasicAuthDSN returns the DSN for the connection .
4946	Row writes the row to dest .
4947	readShortUtf8 reads bytes from bufio .
4948	NewLob creates a new Lob .
4949	TokenString returns a string representation of a token .
4950	NewScanner returns a new scanner .
4951	Next implements Scanner .
4952	RandomIdentifier generates a random identifier
4953	String returns the string representation of the identifier .
4954	Parse parses a base64 string .
4955	Serialize returns a base64 encoded string .
4956	Align aligns the data into a byte slice .
4957	Xor returns a slice of two byte arrays .
4958	Slice returns a slice of bytes .
4959	Random returns a random byte slice .
4960	Concat concatenates two arrays .
4961	Unwrap returns a slice of arrays .
4962	UInt64ToBytes converts a uint64 to a byte slice .
4963	UInt32ToBytes converts a uint32 to a byte slice .
4964	Dump returns a string representation of an array .
4965	Decode decodes a string .
4966	Encode encodes data into a string .
4967	Decode decodes a token
4968	DecodeBytes decodes the given token .
4969	DerivePBKKDF2 creates a PKKKDF2 .
4970	ReadPrivate returns a private key .
4971	ReadPublic reads a public key .
4972	AddPk7 adds padding to a block .
4973	RemovePk7 removes padding from the padded data .
4974	ContainerMetrics returns a list of container metrics .
4975	SortRecent sorts log messages .
4976	SortContainerMetrics sorts the container metrics .
4977	New creates a new Consumer .
4978	TailingLogs returns a channel s tailing logs .
4979	TailingLogsWithoutReconnect returns a channel that can be sent to the consumer .
4980	Stream streams the given app GUID .
4981	StreamWithoutReconnect sends a channel to the consumer .
4982	Firehose calls Firehose .
4983	FirehoseWithoutReconnect is like Firehose .
4984	FilteredFirehose returns a channel with the given filter .
4985	SetOnConnectCallback sets the callback for the consumer
4986	Close closes the consumer .
4987	zpool returns a slice of zpools
4988	GetZpool returns a zpool
4989	Destroy destroys the pool
4990	ListZpools returns a list of zpools
4991	Error returns the error message .
4992	zfs runs zfs command
4993	GetDataset returns a Dataset .
4994	Clone clones a dataset .
4995	Unmount the Dataset
4996	Mount mocks base method
4997	ReceiveSnapshot reads a snapshot from an input stream .
4998	SendSnapshot sends a snapshot to the dataset .
4999	Destroy destroys a dataset
5000	Rename renames a dataset .
5001	Snapshot returns a snapshot of a dataset .
5002	Rollback is part of the Dataset
5003	Children returns a list of datasets .
5004	Diff returns a list of inode changes .
5005	mb32 returns the number of bytes in the given x .
5006	mb64 returns the number of bytes in n .
5007	EncodeAll encodes a slice of uint32 .
5008	DecodeAll decodes all elements from src into dst .
5009	canPack returns true if the given slice is not packed .
5010	pack28 converts a slice into a uint32
5011	pack14 packs the input into a uint32 .
5012	pack9 returns the number of bytes in the given slice .
5013	pack7 returns the number of bytes in a slice .
5014	DecodeAll decodes all elements from src .
5015	Out returns the output of the client .
5016	Step runs the next step in the stream .
5017	DialWithTimeout attempts to connect to a given URL .
5018	ParseURL parses a URL into a DialInfo object .
5019	LiveServers returns the list of live servers .
5020	DB returns a new Database
5021	Cursor returns a new collection .
5022	With adds the session to the database .
5023	With adds the session to the collection .
5024	Logout removes all credentials from the database
5025	LogoutAll deletes all credentials
5026	RemoveUser removes a user from the database .
5027	New returns a new session
5028	Copy returns a copy of the session
5029	Clone returns a copy of the session
5030	Close closes the session .
5031	Refresh refreshes the session .
5032	SetSyncTimeout sets the sync timeout
5033	SetSocketTimeout sets the socket timeout .
5034	SetCursorTimeout sets the cursor timeout .
5035	SetPoolLimit sets the pool limit
5036	Safe returns the current session
5037	Fsync is part of the session
5038	FsyncUnlock unlocks the lock
5039	Repair is used to repair the collection .
5040	Iter returns a new Iterator .
5041	One retrieves the result from the pipe
5042	Batch batch size
5043	IsDup returns true if the given error occurs .
5044	DropCollection deletes the collection .
5045	Skip skips the query .
5046	Limit sets the limit to the query .
5047	SetMaxScan sets the MaxScan field s value .
5048	LogReplay is part of the query .
5049	CollectionNames returns a list of collection names .
5050	DatabaseNames returns the names of the database .
5051	Timeout returns true if the iterator is timed out .
5052	Count returns the number of documents in the query .
5053	Count returns the number of documents in the collection .
5054	VersionAtLeast returns true if the build is at least one version .
5055	BuildInfo returns the build info .
5056	setSocket sets the mongo socket
5057	writeQuery writes a query to the database .
5058	Acquire increments the number of references .
5059	Release releases the cluster
5060	syncServersLoop is used to sync servers .
5061	Close closes the server .
5062	RecycleSocket recycles the given socket .
5063	AbendSocket removes the given socket from the server .
5064	BestFit returns the best available mongo server .
5065	Add adds a template to the Render .
5066	Instance implements the Render interface .
5067	loadTemplate loads a template
5068	New returns a new Render instance
5069	Create creates a new Render .
5070	Validate validates the template
5071	tokenFor returns a token for a transaction .
5072	NewRunner returns a new Runner .
5073	Run runs the given operations .
5074	ResumeAll is used to resume all transactions .
5075	Resume implements the Runner interface .
5076	SetChaos sets the Chaos setting .
5077	Connect connects to the database .
5078	ErrorHandler is used to handle errors .
5079	assert asserts that the transaction has been asserted .
5080	Server returns the mongo server
5081	ServerInfo returns the mongo server info .
5082	Initialize initializes the mongo socket .
5083	Acquire returns a new mongo server .
5084	Release releases the connection
5085	SetTimeout sets the timeout
5086	Error implements the Error interface .
5087	Error returns a string representation of StructErrors
5088	New creates a new Validate
5089	Field adds a field to the validation .
5090	FieldWithValue adds a field with the given tag .
5091	Create creates a new article
5092	Edit the article
5093	List lists all articles
5094	Update updates the article .
5095	Delete deletes the article .
5096	ObjectIdHex returns an ObjectId from a string .
5097	IsObjectIdHex returns true if the string is an object id .
5098	NewObjectId returns a new ObjectId .
5099	NewObjectIdWithTime returns a new ObjectId with the given time .
5100	MarshalJSON returns the JSON representation of an object .
5101	byteSlice returns a slice of bytes .
5102	Time returns the time of the object .
5103	Counter returns the number of bytes .
5104	Insert adds documents to the bulk .
5105	Run executes the bulk operation .
5106	hasLengthOf returns true if the field is the length of the given field .
5107	hasMinOf returns true if the current value is greater than the given field .
5108	hasMaxOf returns true if the top of the top of the top of the top of the top .
5109	Connect connects to MongoDB .
5110	SetDebug sets debug mode
5111	Remove removes a file .
5112	SetChunkSize sets the chunk size .
5113	SetId sets the id of the file .
5114	SetName sets the file name .
5115	SetContentType sets the content type .
5116	Size returns the size of the file .
5117	SetUploadDate sets the upload date .
5118	Abort implements GridFile .
5119	Write writes data to file .
5120	Read implements io . Reader interface .
5121	Set cursor position
5122	collectAnsiIntoIntoIntoIntoInto converts ANSI mode to Windows .
5123	invertAttributes returns the attributes of the given windows mode .
5124	simulateLF is used to simulate the current window .
5125	executeLFF executes the command line .
5126	effectiveSr returns the scroll region of the window .
5127	Scroll the screen screen .
5128	scrollLine scrolls the screen to the screen .
5129	bytesToHex converts bytes to hexadecimal
5130	readCloser returns a CachedFileCloser .
5131	New returns a new cached downloader .
5132	PopulateCache is used to populate the cache .
5133	Log logs a message .
5134	Output prints the given message .
5135	Success logs a message
5136	Info logs a message
5137	Error prints the error message .
5138	Warn prints a warning message .
5139	Running implements the UI interface .
5140	Log logs a message
5141	Output prints a message .
5142	Error logs a message .
5143	Log logs a message .
5144	Output implements the Prefix interface .
5145	Success logs a message
5146	Info logs a message
5147	Error logs a message .
5148	Warning logs a warning message .
5149	Running implements the Prefix interface .
5150	NewUI returns a new BasicUI instance
5151	AddColor creates a new ColorUI
5152	Log logs a message .
5153	NewMongoStore creates a new MongoStore .
5154	New creates a new session
5155	Push adds a new segment to the stack .
5156	Pop removes the current segment from the stack .
5157	Peek returns the current segment .
5158	RecordMetricsWithRecorder records the given Recorder .
5159	Init initializes the embedded embedded app .
5160	errNo returns the error number for the given integer .
5161	caller returns the name of the caller .
5162	doInit initializes a new license
5163	RequestShutdown shuts down the given reason .
5164	NewTx creates a new transaction .
5165	NewRequestTx creates a new transaction .
5166	NewBackgroundTx creates a new background transaction .
5167	Start starts the transaction .
5168	End terminates the transaction .
5169	StartGeneric starts a new segment .
5170	StartDatastore starts a datastore segment .
5171	StartExternal implements the Transaction interface .
5172	EndSegment implements the Transaction interface .
5173	ReportError reports an error .
5174	WithTx adds a transaction to the context .
5175	FromContext returns a transaction from the context .
5176	TraceExternal returns a Trace with the given name .
5177	TraceGeneric creates a new Trace .
5178	TraceDatastore starts a datastore
5179	trace creates a new Trace
5180	Serve implements the http . Handler interface .
5181	Purge removes all items from the cache .
5182	RemoveOld removes the oldest item from the cache .
5183	Keys returns the list of keys .
5184	removeElement removes the entry from the cache .
5185	DefaultCluster returns a new cluster
5186	NewClusterWithHost returns a new Cluster
5187	AddHost adds an address to the cluster .
5188	Host returns the host
5189	RemoveHost removes a host from the cluster .
5190	Hosts returns the list of hosts .
5191	Less returns true if this column is less than another .
5192	Less returns true if the field value is less than the given RecordValue .
5193	Index creates a new index .
5194	Indexes returns a map of indexes .
5195	HasIndex returns true if the schema exists .
5196	NewPQLBaseQuery creates a new PQLBaseQuery instance
5197	Add adds a query to the batch .
5198	NewPQLRowQuery creates a new PQLRowQuery .
5199	String returns the JSON representation of the IndexOptions .
5200	OptIndexKeys sets the keys for the index .
5201	OptIndexTrackExistence sets the IndexExistence field s value .
5202	NewIndex creates a new index .
5203	Field returns the fields of the index .
5204	HasField returns true if the given field exists .
5205	Field returns a new Field .
5206	BatchQuery creates a new PQL query .
5207	RawQuery returns a PQLBaseQuery with the given query string .
5208	Intersect returns a new PQLRowQuery .
5209	Not returns a new PQLRow .
5210	Count returns the query for the given row .
5211	Options adds the options to the query .
5212	GroupBy returns a PQLQuery with the given rows .
5213	GroupByLimit sets the LIMIT clause for the query .
5214	GroupByFilter adds a query to the query .
5215	OptFieldTypeSet sets the field type .
5216	OptFieldTypeInt sets the FieldType field s value .
5217	OptFieldTypeTime sets the TimeType field s value .
5218	OptFieldTypeMutex mocks base method
5219	Row adds a row to the query .
5220	Set sets the field s value .
5221	SetTimestamp sets the timestamp for the field .
5222	ClearRow removes a row from the field .
5223	RowTopN adds a row to the query .
5224	FilterAttrTopN adds an attribute to the query .
5225	Stores the field with the given row .
5226	NotNull returns a PQL row query .
5227	Between returns a PQLRowQuery .
5228	SetIntValue sets the value of a field .
5229	NewPQLRowsQuery creates a new PQLRowsQuery .
5230	Rows returns a PQLRowsQuery .
5231	RowsLimit returns a query for the given field .
5232	Result returns the result of the query .
5233	MarshalJSON returns a JSON representation of RowResult .
5234	NewURIFromHostPort creates a new URI from a host and port .
5235	NewURIFromAddress creates a new URI from a given address .
5236	SetScheme sets the scheme .
5237	SetHost sets the host
5238	Normalize returns the URI of the URI .
5239	Equals returns true if this URI is equal .
5240	ValidLabel checks if the given label is valid .
5241	ValidKey returns true if the key is valid .
5242	NewClient creates a new client with the given address and options .
5243	Query executes a query .
5244	CreateIndex creates a new index .
5245	CreateField creates a new field .
5246	EnsureIndex creates a new index .
5247	EnsureField creates a field .
5248	DeleteIndex deletes an index .
5249	DeleteField deletes a field .
5250	SyncSchema updates the schema .
5251	Schema returns the schema .
5252	ImportField imports a field into the database .
5253	ExportField returns a reader for the given field .
5254	Status returns the status of the server .
5255	HTTPRequest sends a HTTP request to the server .
5256	doRequest sends a request to the client
5257	statusToNodeShardsForIndex returns a map of nodes for the given index .
5258	ExperimentalReplayImport implements io . Reader .
5259	ViewByTimeUnit returns the view by the given time .
5260	OptClientSocketTimeout sets the timeout timeout
5261	OptClientConnectTimeout sets the connection timeout
5262	OptClientPoolSizePerRoute sets the PoolSizePerRoutePerRoute field s value .
5263	OptClientTotalPoolSize sets the TotalPoolPoolSize field s value .
5264	OptClientTLSConfig sets the client TLS configuration .
5265	OptClientManualServerAddress sets the manual server address .
5266	ExperimentalOptClientLogImports sets the ImportLogImports field s value .
5267	OptQueryColumnAttrs sets the ColumnAttrs field s value .
5268	OptQueryShards adds shards to the query .
5269	OptQueryExcludeAttrs sets the ExcludeRowAttrs field s value .
5270	OptQueryExcludeColumns sets the ExcludeColumns field s value .
5271	OptImportThreadCount sets the number of threads to use .
5272	OptImportBatchSize sets the batchSize field s value .
5273	OptImportStatusChannel sets the StatusStatusChannel field s value .
5274	OptImportClear clears the import options .
5275	OptImportRoaring sets the ImportRoaring field s value .
5276	OptImportSort sets the ImportOption field s value .
5277	Read reads the data from the reader .
5278	ColumnUnmarshallerWithTimestamp returns a new RecordUnmarshaler .
5279	NewIterator returns a new Iterator .
5280	NewColumnIterator returns a new Iterator .
5281	NewColumnIteratorWithTimestampFormat returns a new Iterator with the given format .
5282	NewValueIterator returns a new Iterator with the given format .
5283	NextRecord returns the next record .
5284	FieldValueUnmarshaller returns a RecordUnmarshaler .
5285	MergeConfig merges two Config objects .
5286	stringFormat returns a string representation of the config
5287	elementFromLine returns a slice of elements from a line
5288	widthFromLines returns the width of the given lines .
5289	Format formats the given lines into a string .
5290	Build builds the URL for the given URL .
5291	Build builds the URL for the given URL .
5292	braceIndices returns a slice of indices .
5293	Extract extracts the values from the request .
5294	mergeValues merges two values .
5295	redirectPath returns a redirect handler for the given path .
5296	CompileRegexp returns a Regexp instance
5297	MatchString returns true if the string matches the regexp .
5298	Values returns the values for the given string .
5299	Revert converts the given values into a string .
5300	RevertValid returns a string that matches the given values .
5301	write writes to the template .
5302	NewMultiple creates a new Cmp .
5303	New creates a new Cmp .
5304	CompareFile compares two files
5305	readPartial reads and returns the number of bytes .
5306	postEOFCheck checks if the given reader is valid .
5307	Stats returns a list of stats
5308	Info returns information about the HA proxy
5309	RunCommand runs a command .
5310	IsExist returns true if an error occurred .
5311	check if file exists
5312	Contain returns true if the file contains the given bytes .
5313	ContainString returns true if the file contains the given string .
5314	init initializes the logger
5315	StartLogger starts the logger
5316	openDBFile opens a database file .
5317	backup attempts to backup the file
5318	New returns a new Packager .
5319	RegisterCrypt registers a Crypt .
5320	New creates a new Crypter .
5321	NewFromHash creates a Crypter from a hash .
5322	Text implements Scanner .
5323	Exec executes a command .
5324	ExecSudo executes a command with the given arguments .
5325	nextUID returns the next uid
5326	nextGUID returns the next gid of the group
5327	NextSystemUID returns the next UUID in the database .
5328	NextSystemGID returns the next gid .
5329	NextUID returns the next unique id .
5330	NextGID returns the next gid .
5331	NewShadow returns a new shadow .
5332	Parse shadow file .
5333	Lookup shadow by name
5334	Add adds a new shadow .
5335	Copy copies the source file to dest .
5336	Create creates a new file .
5337	loadConfig initializes the config
5338	NewEdit returns a new edit file .
5339	AppendString appends a string to the edit .
5340	Comment adds a comment to the file .
5341	CommentOut removes all comments from a line .
5342	CommentM comment
5343	CommentOutM mocks base method
5344	ReplaceN replaces the specified number of characters in a file .
5345	ReplaceAtLine replaces the lines at the given filename .
5346	ReplaceAtLineN replaces multiple lines at the given filename .
5347	init initializes the settings
5348	getSettingsForUid returns the settings for a user .
5349	Set sets the value of a file .
5350	Write a set of values to a file .
5351	Set sets key value
5352	Makes a set of keys
5353	SetForUid sets the key for a user
5354	Makes a set of keys for a user .
5355	Sets the value of a key .
5356	Sets a set of values to the global settings .
5357	SetsysForUid sets the value for the given UID .
5358	MSSetsForUidForUid sets the keys for the given UID .
5359	NewGShadow returns a new GShadow instance
5360	parseGShadow parses a GShadow file .
5361	lookup looks up a field and returns it
5362	LookupGShadow returns a GShadow by name .
5363	Add adds a group to the group .
5364	NewUser returns a new User .
5365	NewSystemUser returns a new User .
5366	IsOfSystem returns true if user is in system
5367	parseUser parses a row from a row .
5368	lookup looks up the field in the given line .
5369	LookupUID looks up a user by id .
5370	LookupUser returns a user by name .
5371	GetUsername returns the username of the user .
5372	GetUsernameFromEnv returns the username from the environment variable .
5373	AddUser adds a user .
5374	AddSystemUser adds a user to the system .
5375	Add adds a user to the database .
5376	DeleteUser deletes a user
5377	ParseFile parses a configuration file .
5378	Print prints the configuration .
5379	Getbool returns the value of the given key .
5380	GetInt returns the value of a key .
5381	Get uint value
5382	GetFloat returns the value of the given key .
5383	Set sets the value of a key .
5384	Run runs a command .
5385	NewInfo returns a new info object
5386	OwnerHasHas returns true if the user has permissions .
5387	GroupHas returns true if the user has the given permissions .
5388	OthersHave returns true if the user has all permissions
5389	OwnerHasHas returns true if the owner has the given permissions .
5390	lookupCrypter looks up the shadow password and returns it .
5391	Passwd sets the user s password
5392	Passwd sets the password for the given key
5393	ChPasswd adds a password to the user .
5394	ChGPasswd adds a key to the group
5395	LockUser locks a user .
5396	NewGroup creates a new Group
5397	NewSystemGroup creates a new system group .
5398	IsOfSystem returns true if the group belongs to .
5399	parseGroup parses a group .
5400	lookup looks for a field in a group
5401	LookupGID returns the group by gid .
5402	LookupGroup returns a group by name .
5403	GetGroups returns a list of groups .
5404	GetgroupsName returns the name of the group
5405	AddGroup adds a group to the group .
5406	AddSystemGroup adds a system group
5407	Add a new group
5408	DelGroup deletes a group
5409	AddUsersToGroup adds a group to a group
5410	DeleteUsersInGroup removes all members in a group .
5411	checkGroup returns true if the group contains the given value
5412	Detect returns the distribution for the given OS .
5413	AddSystem adds a system to the world .
5414	AddSystemInterface adds a system interface to the world .
5415	AddEntity adds an entity to the world .
5416	Update updates the current world .
5417	RemoveEntity removes an entity from the world .
5418	NewBasics creates a new list of entities .
5419	AppendChild adds a child to the entity .
5420	Less returns true if i is less than j .
5421	Swap swaps the identifier and j .
5422	NewGroup creates a new Group
5423	Members returns the members of the group .
5424	Leave leaves the group
5425	Add adds a new member to the group .
5426	Broadcast sends a message to the group .
5427	Send sends a message to the group .
5428	Send sends a message to the group .
5429	update is used to update a priority .
5430	NewBot creates a new bot
5431	Updates the time of the bot .
5432	Handle incoming messages .
5433	handle outgoing messages
5434	WaitFor returns true if the message is in the bot
5435	Standard registration .
5436	sendUserCommand sends a user to the bot
5437	SetNick sets the nick
5438	Run starts the bot .
5439	ChMode mocks base method
5440	Close closes the bot
5441	AddTrigger adds a handler to the bot .
5442	Handle returns true if the message is triggered .
5443	Start Unix listener .
5444	 hijack session
5445	End returns true if the call is ended .
5446	EndUnsuccessfulUnsuccessful returns true if the call was completed .
5447	Cancel a call
5448	Hook implements the CallService interface .
5449	Redirect redirects to a call .
5450	Create creates a new call .
5451	MakeCall creates a Call .
5452	GetCallsInRange iterates over a range of calls .
5453	GetNextCallsInRange returns the next call of the next call .
5454	GetRecordings retrieves the records for a call .
5455	GetRecordingsIterator returns a new RecordingPageIterator .
5456	Get returns a voice price .
5457	Get returns a voice number .
5458	GetPage returns the page price page .
5459	Get returns a message price .
5460	GetPage returns the page price page .
5461	Delete deletes a key .
5462	GetAlertsInRange returns a list of alerts in the given range .
5463	GetNextAlertsInRange returns a list of Alerts in the given range .
5464	Description returns the title of the alert .
5465	StatusCode returns the status code
5466	Human friendly representation of a Direction .
5467	SendMessage mocks base method
5468	GetPage returns the next message page .
5469	GetMessagesInRange returns a list of messages in a range .
5470	GetNextMessagesInRange returns the next messages in the given range .
5471	Get a Queue
5472	Create creates a new queue .
5473	Delete deletes a queue .
5474	GetConferencesInRange returns a list of Conference objects in the given range .
5475	GetNextConferencesInRange returns a list of conferences in the given range .
5476	NewPhoneNumber creates a new PhoneNumber from a string .
5477	Pretty formats a phone number .
5478	NewTwilioTime returns a new TwilioTime instance
5479	price returns the price for a given unit
5480	Capitalize a string .
5481	Delete deletes the caller ID .
5482	NewPricClient creates a new API client .
5483	NewClient creates a new client .
5484	CreateResource mocks base method
5485	MakeRequest sends a request to the API .
5486	Delete deletes an application .
5487	URL returns the URL for the recording .
5488	Delete deletes a recording .
5489	Get a media .
5490	BuyNumber buys a phone number .
5491	Get returns a new IncomingPhoneNumber .
5492	Release releases a number .
5493	GetPage returns the page number for the given data .
5494	Get returns a Transcription .
5495	Delete deletes a transcription .
5496	Get returns the number price price .
5497	GetPage returns the page price page .
5498	Next implements the NextPage interface .
5499	NewNextPageIterator returns a new PageIterator instance
5500	containsResultsInRange returns true if the results in the given range .
5501	indexOutsideRange returns a list of indexes that are outside of the range .
5502	NewDefaultLogger returns a new FileLogger .
5503	initLoggerBySize initializes logger by size
5504	initLoggerByDaily creates a log file with the given date .
5505	fileMonitor is used to monitor log files .
5506	fileCheck is called when a file is caught .
5507	Close closes the log file .
5508	logWriter creates a new log writer .
5509	Printf writes a message to the log .
5510	Print implements the Logger interface .
5511	Println implements the Logger interface .
5512	SetMaxFileCount sets the MaxFileCount field s value .
5513	SetMaxFileSize sets the maximum size of the file .
5514	fileSize returns the size of the file
5515	GetProfile returns the profile of a user .
5516	Handler implements the Messenger interface .
5517	DeleteGetStartedButton deletes a button .
5518	NewWebURLButton creates a new Button .
5519	NewPostbackButton creates a new Button .
5520	NewPhoneNumberButton creates a new ButtonButton
5521	Concatenates a string into a string .
5522	commonKind returns the common kind of v1 .
5523	pushNumberValue pushes a value to the given value .
5524	unsizedKind returns the kind of the given value .
5525	luaToString converts an int to a string .
5526	Mark a value in the visitor .
5527	push pushes a value to the stack
5528	copySliceToTable copies a slice of values to the given value .
5529	GoToLua is a helper function that can be called by Go .
5530	NewLuaObject creates a new LuaObject .
5531	NewLuaObjectFromName returns a LuaObject from the given name .
5532	NewLuaObjectFromValue creates a LuaObject from the given value .
5533	Close closes the LuaObject .
5534	Get the value of a Lua object .
5535	GetObject returns the value of the object .
5536	Push registers a LuaObject .
5537	Setv sets the value of a LuaObject .
5538	Iter returns a LuaTableIter .
5539	NewClient creates a new client
5540	NewClientWithServerInfo creates a new client with server information .
5541	Status sets the status of the client
5542	Join a room
5543	Part part of a room .
5544	Say message to room
5545	PrivSay sends a message to the chat
5546	KeepAlive closes the connection .
5547	RequestRooms requests the client
5548	RequestUsers sends users to the client
5549	Copy copies src to dst .
5550	ToTable converts string to tabular data
5551	NumRows returns the number of rows in the table .
5552	LongestLine returns the longest line of the scenario .
5553	LongestLine returns the longest line of the feature .
5554	BuildAndRunDirWithGoTags runs the build and runs the build and returns the error .
5555	getImportPath returns the full path of the import path .
5556	Sum computes the digest of the digest .
5557	Decode decodes an io . Reader .
5558	retryPart attempts to retry the given part .
5559	putPart adds a part to the object .
5560	Abort attempts to abort an object .
5561	WaitInstanceUntilReady waits until the VM is ready to be ready to be ready .
5562	FindPerformancePrice finds the price of a product .
5563	FindPerformanceSpacePrice finds the price for a given size .
5564	FindPerformanceIOPSProduces the performance of a product package .
5565	WithTimeout adds the timeout to the find vmsByStatesByStates params
5566	WithContext adds the context to the find vmsByStatesByStates params
5567	WithStates adds the list of states to the list of states .
5568	WithPayload sets the Payload field s value .
5569	WithTimeout adds the timeout to the query params
5570	WithContext adds the context to the OrderVMByFilter params
5571	WithBody sets the BodyFilter field s value .
5572	Delete implements the FakeClient interface .
5573	Fetch returns the agent settings .
5574	Update implements the FakeClient interface .
5575	NewHTTPClient creates a new http client .
5576	New creates a new SoftLayerVool
5577	SetTransport sets the transport
5578	Validate validates the vms response
5579	WithTimeout adds the timeout to the find vmsByDeployment params
5580	WithContext adds the context to the find vmsByDeployment params
5581	WithDeployment sets the Deployment field s value .
5582	WithTimeout sets the timeout
5583	WithContext adds the context to the update vmp params
5584	WithBody sets the Body field s value .
5585	NewAgentSettings returns a new AgentSettings .
5586	ConfigureNetworks sets the NetworkSettings field s value .
5587	DetachPersistentDisk deletes a persistent disk .
5588	Validate validates the client TLS options .
5589	WithTimeout adds the timeout to the find vmsByFilters params
5590	WithContext adds the context to the find vmsByFilters params
5591	WithBody adds the body to the find vms filter params
5592	WithTimeout sets the timeout
5593	WithContext adds the context to the delete vmp params
5594	WithCid sets the CidParams field s value .
5595	WithPayload sets the Payload field s value .
5596	Validate validates this state .
5597	WithTimeout adds the timeout to the update vm
5598	WithContext adds the context to the update vm state params
5599	WithBody adds the body to the update vm state params
5600	WithCid sets the Cid field s value .
5601	WithTimeout sets the timeout
5602	WithContext adds the context to the addVMPar params
5603	WithBody adds the body to the addVMP params
5604	Validate validates the agent options .
5605	WithTimeout sets the timeout
5606	WithContext adds the context to the list vars params
5607	Validate validates the error
5608	WithPayload sets the Payload field s value .
5609	Validate validates the error type
5610	WithTimeout adds the timeout to the get VMByCid params
5611	WithContext adds the context to the get vmByCid params
5612	WithCid adds the cid to the getVMByCid params
5613	Validate validates the VM response .
5614	LoadCodec returns a new WordCodec instance
5615	MustLoadCodec returns a new WordCodec instance
5616	loadBank loads the words from a bank .
5617	bytesFromWordsFromWords returns the length of the number of bytes .
5618	GetIndex returns the index of a word .
5619	Sum returns the sum of bz .
5620	Equals returns true if the given privKey is equal .
5621	Generate generates a new private keyed by index
5622	Set adds a value to the map
5623	NewPrivKeyLedgerSec256Key1 returns a new PrivKeyLedger .
5624	ValidateKey validates the public key .
5625	Sign signs a message with the given message .
5626	getPubKey returns the public key for the given private key .
5627	Equals returns true if the given key is equal to the given key .
5628	SimpleHashFromHashers returns a simple hash of hashes .
5629	Verify returns true if the proof is valid .
5630	computeHashFromAunts computes the hash from the given index .
5631	ComputePrivateKey returns the private key for the given path .
5632	ComputeBTCAddressForPrivKey returns the BTC address for the given private key .
5633	SignBTCMessage signs a message with the given private key .
5634	ComputeMastersFromSeed returns a copy of the masters from the given seed .
5635	ComputeWIF computes the WIF from a private key .
5636	DerivePublicKeyForPath returns the public key for the given path .
5637	DerivePrivateKey extracts a private key from a private key .
5638	DerivePublicKey extracts the public key from the given public key .
5639	addPoints adds the points to the given b .
5640	addScalars adds a scalar to b .
5641	HexDecode converts a string to a byte slice .
5642	I64 computes the I64 HMAC
5643	BTCAddrAddrFromPubKeyBytes creates a BTC address from the given pubKeyBytes .
5644	BTCAddrAddrBytesFromPubKeyBytes returns the address bytes from the given pubKeyBytes .
5645	WIFFromPrivKeyBytes returns the WIF from the given privKeyBytes .
5646	PubKeyBytesFromPrivKeyBytes converts a private key to a public key .
5647	ReverseBytes returns a slice of bytes .
5648	getLedger returns the ledger
5649	CreateLedger creates a new ledger key .
5650	CreateOffline implements the Keybase interface .
5651	Recover attempts to recover a private key .
5652	List returns all info in the database .
5653	Get returns info about the given key .
5654	Sign implements the Keybase interface .
5655	ExportPubKey exports a public key .
5656	ImportPubKey imports a public key .
5657	Update implements the Keybase interface .
5658	randBytes returns a random byte slice .
5659	GenerateFromPassword generates a hash from a password .
5660	CompareHashAndPassword compares the given hash and password and returns an error .
5661	Cost returns the cost of the given hash .
5662	decodeCost decodes a hash .
5663	ASTToString converts AST to string .
5664	writeByte writes a byte to the buffer .
5665	writeString writes a string to the buffer .
5666	print a AST node
5667	printInner prints the inner representation of the type .
5668	printBase is used to print the AST .
5669	printDimension prints the dimension of an array .
5670	printArgs prints the arguments .
5671	parenthesize parses an AST node .
5672	printInner returns a list of ASTs
5673	printOneInner is used to print the inner method .
5674	isEmpty returns true if the AST is empty .
5675	Filter converts name to string
5676	ToString returns a string representation of the given name .
5677	ToAST returns an AST representing the given name .
5678	doDemangle takes a name and returns an AST .
5679	copy returns a copy of the state .
5680	fail panics on error
5681	failEarlier attempts to fail if an error occurs .
5682	vance advances the current state .
5683	checkChar checks if a character is a character .
5684	Error returns the error message .
5685	adjustErr adjusts the offset of an error .
5686	hasReturnType returns true if the AST is a return type .
5687	isCDtorConversion returns true if the AST is a CDtorConversion .
5688	JavaResource parses a Java resource .
5689	mergeQualifiers merges two Qualifiers .
5690	setTemplate sets the template .
5691	clearTemplateArgs clears the template arguments .
5692	exprList returns an AST node .
5693	cloneSuffix clones the given AST .
5694	simplified returns a copy of AST .
5695	findArgumentPack returns the first argument of an AST .
5696	doDemangle removes the given name from the given string .
5697	options returns a slice of options
5698	MultipartForm is part of the request .
5699	Json parses a JSON - RPC request .
5700	validateStruct validates a struct
5701	ErrorHandler is used to handle errors .
5702	Get returns the value of a locale .
5703	SetMessage adds a message to the file .
5704	Interactive is used to handle idle requests .
5705	 IdleWithFallback is used to handle idle requests .
5706	putToBottom adds the given address to the list .
5707	defaultPool returns a redis pool
5708	close closes all pools .
5709	MasterAddr returns the master address
5710	 slave addresses
5711	Addr returns the address of the slave
5712	Available returns true if the slave is available .
5713	Slaves returns the list of slaves .
5714	NinelAddrs returns the list of Sentinel addresses .
5715	Close closes the Sentinel .
5716	NewServerList creates a new ServerList
5717	NewFromServers creates a new client .
5718	Close closes the connection .
5719	Get retrieves the item by key .
5720	GetMulti retrieves a list of items from the server
5721	Set sets a single item
5722	Add adds an item to the server .
5723	CompareAndSwap swaps two items in the client .
5724	Delete deletes a key
5725	Increment increments the value of a key .
5726	Flush deletes all servers .
5727	ChildClosing closes the child process .
5728	OnClosingContext returns a new context .
5729	OnClosedContext creates a new context for the process .
5730	LimitChan returns a channel with the given limit .
5731	WithParent creates a new child process with the given parent .
5732	WithContextAndTeardown implements goprocess .
5733	SetTeard sets the teardown function .
5734	close closes the process .
5735	CloseAfterChildren closes the process .
5736	Ticker creates a new ProcessFunc .
5737	TickerGo is a function to run a goroutine .
5738	Identify sends a customer .
5739	Track tracks an event
5740	TrackAnonymous tracks an anonymous event
5741	Delete a customer
5742	AddDevice adds a device to the customer .
5743	DeleteDevice deletes a device .
5744	initLocales returns a matcher for the given options .
5745	I18n returns a handler for the given options .
5746	FetchCheck returns a check for a given CID .
5747	FetchChecks returns a list of checks
5748	New creates a new API API .
5749	Get returns the content of the request
5750	Post performs a POST request
5751	apiRequest sends a request to the API
5752	FetchGraph fetches a graph .
5753	Fetch graphs
5754	UpdateGraph updates a graph .
5755	Create a graph
5756	DeleteGraph deletes a graph .
5757	DeleteGraphByCID deletes a graph by cid .
5758	FetchCheckBundle fetches a CheckBundle by cid .
5759	FetchCheckBundle returns a list of checkBundles .
5760	UpdateCheckBundle updates a CheckBundle
5761	DeleteCheckBundle deletes a CheckBundle
5762	DeleteCheckBundleByCID deletes a check bundle by cid .
5763	Measure adds a metric to the metric
5764	SetGauge sets the gauge value
5765	AddGauge adds a metric to the metric
5766	RemoveGauge removes a gauge from the metric .
5767	RemoveGaugeFunc removes a gauge from the metric .
5768	getGaugeType returns the type of the gauge type
5769	FetchCheckBundleMetrics returns a CheckBundleMetrics for the given CID .
5770	UpdateCheckBundleMetrics updates a checkBundleMetrics
5771	getBroker returns a broker .
5772	getBrokerCN returns the CN of the given broker .
5773	selectBroker selects a broker from the broker
5774	checkerCheckType returns true if the given check type is valid .
5775	FetchMetricCluster returns a MetricCluster
5776	FetchMetricClusters returns a list of MetricCluster objects .
5777	UpdateMetricCluster updates a metric cluster
5778	CreateMetricCluster creates a new MetricCluster
5779	DeleteMetricCluster deletes a metric
5780	DeleteMetricClusterByCID deletes a metric by cID .
5781	loadCACert loads the CACert from the cache
5782	fetchCert fetches a certificate from the cache
5783	Fetch accounts
5784	UpdateAccount updates an existing account .
5785	FetchAnnotation fetches an annotation from a CID .
5786	FetchAnnotations fetches a list of annotations .
5787	UpdateAnnotation updates an existing annotation .
5788	Create an annotation
5789	DeleteAnnotation deletes an annotation .
5790	DeleteAnnotationByCID deletes an annotation by cID .
5791	FetchOutlierReport returns the outlier report
5792	FetchOutlierReports returns a list of outlier reports .
5793	UpdateOutlierReport updates the outlier report
5794	CreateOutlierReport creates a new OutlierReport
5795	DeleteOutlierReport deletes a outlier report
5796	DeleteOutlierReportByCID deletes the outlier report by cid .
5797	FetchUsers returns all users .
5798	UpdateUser updates a user .
5799	SetMetricTags sets metrics for a metric .
5800	AddMetricTags adds a metric to the metric .
5801	FetchMetric fetches a metric .
5802	FetchMetrics returns a list of metrics .
5803	UpdateMetric updates a metric
5804	FetchAcknowledgement returns the acknowledgement for the given CID .
5805	FetchAcknowledgements fetches all the acknowledgements .
5806	UpdateAcknowledgement updates acknowledgement .
5807	CreateAcknowledgement creates a new acknowledgement
5808	Reset resets the metrics .
5809	snapshot returns a copy of the metrics
5810	Timing registers a metric value .
5811	RecordValue records a metric value .
5812	RecordCountForValue sets the number of values for a given metric .
5813	SetHistogramValue sets a metric value
5814	RemoveHistogram removes a metric from the metric
5815	NewHistogram creates a new histogram .
5816	RecordValue implements the Histogram interface .
5817	checkBundleSearch searches for a given criteria .
5818	createNewCheck creates a new CheckBundle
5819	makeSecret generates a random secret
5820	fetchCheckBySubmissionURL fetches a check for a submission
5821	Initialize the check manager
5822	IsReady returns true if the check manager is ready .
5823	GetSubmissionURL returns the submitted submission URL .
5824	ResetTrap is used to reset the cert pool
5825	RefreshTrap refreshes the check manager
5826	FetchRuleSetGroup returns a RuleSetGroup
5827	FetchRuleSetGroups retrieves all rules from the API .
5828	UpdateRuleSetGroup updates a rule set .
5829	CreateRuleSetGroup creates a RuleSetGroup
5830	DeleteRuleSetGroupGroup deletes a rule set .
5831	DeleteRuleSetGroupByCID deletes a rule set by cID .
5832	FetchDashboard fetches a dashboard .
5833	FetchDashboards fetches the dashboard
5834	UpdateDashboard updates a dashboard .
5835	CreateDashboard creates a dashboard .
5836	DeleteDashboard deletes a dashboard .
5837	DeleteDashboardByCID deletes a dashboard .
5838	SetText sets a text value .
5839	SetTextValue sets the text value for a metric .
5840	RemoveText removes the text from the metric .
5841	RemoveTextFunc removes textFunc from metrics
5842	Fetch an alert
5843	Fetch alerts
5844	FetchRuleSet fetches a rule set by cid .
5845	FetchRuleSets returns a list of rules for the API .
5846	UpdateRuleSet updates a rule set .
5847	CreateRuleSet creates a new RuleSet
5848	DeleteRuleSet deletes a rule set .
5849	DeleteRuleSetByCID deletes a rule set by cID .
5850	IncrementByValue increments a metric value .
5851	Set sets metric value
5852	RemoveCounter removes a counter from the metric .
5853	RemoveCounterFunc removes a counter function .
5854	PromOutput writes metrics to the output buffer .
5855	Flush the metrics to the collector .
5856	FetchWorksheet fetches a worksheet
5857	FetchWorksheets returns a list of worksheets .
5858	UpdateWorksheet updates a workspace .
5859	CreateWorksheet creates a worksheet
5860	DeleteWorksheet deletes a worksheet
5861	DeleteWorksheetByCID deletes a worksheet by cid .
5862	FetchContact returns a contact group .
5863	Fetch contact groups
5864	UpdateContact updates a contact group .
5865	CreateContact creates a contact group
5866	DeleteContactGroup deletes a contact group .
5867	Fetch a broker
5868	FetchBrokers returns a list of broker names .
5869	ActivateMetric activates a given metric
5870	AddMetricTags adds a metric tags to the check .
5871	addNewMetrics adds new metrics to the checkBundle
5872	 inventory metrics
5873	countNewTagsCount returns the number of tags in the given list .
5874	Pluralize returns the plural form of the given word .
5875	Singularize returns the singular form of the given word .
5876	Capitalize a word .
5877	Camelize camelcase
5878	getSuitableAlgorithmFromCurve returns the algorithm for the given curve .
5879	getAlgorithmFromKeyData returns the algorithm for the given key .
5880	buildEncArgs builds a JSON encoded map of arguments .
5881	doDec decodes a JSON string .
5882	doEnc encodes a JWT .
5883	Transport sets the http transport
5884	Proxy adds a proxy to the GServiceAccount
5885	Expiration sets the expiration time
5886	Encode encodes an object into a byte slice .
5887	PeekHeaderField reads a header field from buf .
5888	PeekAlgorithm reads the algorithm from buf .
5889	PeekAlgorithmAndIssuer returns the algorithm and issuer name .
5890	NewEllipticSigner returns a new Signer .
5891	NewTokenSource creates a new token source
5892	Client returns an http client
5893	Sign implements the RSA method .
5894	Verify returns an error if the given hash is valid .
5895	NewRSASigner returns a new Signer .
5896	getFieldWithTag returns the field with the given tag name
5897	decodeToObjOrFieldWithTagWithTag is used to decode the object with the given tag name .
5898	grabEncodeTargets takes an object and returns the payload and payload .
5899	encodeTargets encodes the given object into an object .
5900	peekField reads a field from buf .
5901	ExpiresIn sets the ExpiresIn field s value .
5902	Claim sets a claim
5903	Transport sets the http transport
5904	NewHMACSigner returns a new Signer .
5905	FromJSON returns a new GServiceAccount .
5906	FromReader returns a GServiceAccount from an io . Reader .
5907	FromFile loads a GServiceAccount from a JSON file .
5908	Signer returns a JWT .
5909	Encode encodes an object .
5910	UnmarshalText unmarshals an Algorithm .
5911	DecodeUnverifiedToken decodes an unverified token .
5912	PublicKey returns the public key .
5913	PrivateKey returns the private key .
5914	RegisterLocation registers a new location .
5915	NewArena returns a new Arena .
5916	NewSkiplist creates a new Skiplist .
5917	Init initializes the iterator .
5918	Value returns the value of the iterator .
5919	Set sets the value of the iterator .
5920	SetMeta sets the meta value .
5921	Delete deletes the record .
5922	isSameArray returns true if two values are equal .
5923	New creates a new client .
5924	WriteIndentedN writes n to w .
5925	WriteIndented writes the given bytes to w .
5926	NewReporter returns a new reporter .
5927	PostCount returns the number of posts for a given user .
5928	PostCountTime adds a count time to the report .
5929	PostValue adds a value to the metric .
5930	PostValueTime adds a value to the metric .
5931	PostEZCount adds the given count to the metric .
5932	PostEZCountTime adds a count time to the metric .
5933	PostEZValue adds a value to the metric .
5934	PostEZValueTimeTime adds the given value to the metric .
5935	PostCount adds a stat to the reporter .
5936	PostCountTime adds a timestamp to the report .
5937	PostCountOne returns the number of posts for a given user .
5938	PostValue adds a value to the reporter .
5939	PostValueTime adds a timestamp to the reporter .
5940	PostEZCount is the same as PostEZCount .
5941	PostEZCount adds a count to the reporter .
5942	PostEZCountTime adds an entry to the reporter .
5943	PostEZValue adds a value to the reporter .
5944	PostEZValueTime adds a value to the reporter .
5945	NewBatchReporter creates a new Reporter .
5946	cleanHost cleans up hostnames and ports .
5947	GetHost returns the host for the given host .
5948	Rescan scans the host and returns the scan .
5949	Diff returns the difference between two hosts .
5950	ToString returns a string representation of Host
5951	Init initializes the scan .
5952	AddHosts adds hosts to scan .
5953	SetHosts sets the Hosts field s value .
5954	AddPorts adds ports to the scan .
5955	SetPorts sets the ports .
5956	SetTCPPorts sets the TCP ports .
5957	SetUDPPorts sets the UDPPorts field s value .
5958	AddFlags adds flags to scan .
5959	IntenseAllTCPPorts returns a Scan for all ports .
5960	ToString returns a string representation of the scan .
5961	CreateNmapArgs initializes NmapArgs .
5962	uint16ListToString converts uint16 to strings
5963	ToString returns a string representation of the port
5964	Counter returns the current counter .
5965	Increment increments the counter .
5966	NewHOTP creates a new HOTP .
5967	URL returns a URL for the given key .
5968	 QR code
5969	Truncate returns the number of bytes in bytes .
5970	FromURL parses a URL string from a URL string .
5971	GenerateHOTP generates a new HOTP .
5972	YubiKey returns a YubiKey from a string .
5973	Integrity checks the validity of the HMP .
5974	Check returns true if the given code is valid .
5975	Marshal marshals an OOTP .
5976	Unmarshal unmarshals an OOTP .
5977	NewWriterPool creates a new writer pool .
5978	Get returns a writer for the given writer .
5979	Len returns the number of bytes in the pool .
5980	NewReaderPool creates a new reader pool .
5981	Get implements io . Reader .
5982	SetRate sets the rate of the pool .
5983	Len returns the number of bytes in the pool .
5984	NewMeasuredWriter returns a new MeasuredWriter .
5985	BytesPerSec returns the number of bytes per second .
5986	NewMeasuredReader returns a new MeasuredReader .
5987	BytesPeriod returns the number of bytes per period .
5988	BytesPerSec returns the number of bytes per second .
5989	ThrottledReader returns a ThrottledReader .
5990	Th ThrottledWriter returns a ThrottlerWriter .
5991	NewDNSServer creates a new DNS server .
5992	qualifiedSrv returns a string representation of a service .
5993	QualifySrvHosts returns a list of SRV records .
5994	GetA returns a DNS .
5995	SetA sets a new IP address
5996	DeleteA deletes a record .
5997	SetSRV sets the SRV record .
5998	DeleteSRV deletes a SRV record .
5999	Json converts data to typed struct
6000	Must parses data into a Typed object .
6001	JsonReader parses an io . Reader .
6002	JsonFile parses a JSON file .
6003	JsonArray converts data into typed array .
6004	JsonFileArray parses a JSON array .
6005	Bool returns the value of the given key .
6006	BoolOr returns the value of the given key .
6007	BoolMust returns true if the key exists .
6008	BoolIf returns the value of the given key .
6009	IntOr returns the value of the given key .
6010	IntMustMust returns an int if it exists .
6011	IntIf returns the value of the given key .
6012	FloatOr returns the value of the given key .
6013	FloatMust returns the float64 if it exists .
6014	FloatIf returns the value of the given key .
6015	StringOr returns a string or an empty string if it exists .
6016	StringMust returns the string if it exists .
6017	TimeOr returns the value of the given key .
6018	TimeMust returns the time if it exists .
6019	TimeIf returns the time if it exists .
6020	ObjectMust returns the object if it exists .
6021	InterfaceOr returns the value of the given key or nil if not found .
6022	InterfaceMust returns the interface if it exists .
6023	InterfaceIf returns the value if it exists .
6024	Bools returns a slice of bool values .
6025	BoolsOr returns a slice of bool or an array of bool values .
6026	Ints returns a slice of ints .
6027	Ints64 returns a slice of ints64s .
6028	Float returns a slice of floats .
6029	Strings returns a slice of strings .
6030	Object implements Typed interface .
6031	ObjectIf returns a list of objects that match the given key .
6032	GetSessions retrieves all sessions from a channel .
6033	ObjectChange sends a subscription to the database .
6034	AutoOfferingPopup pops a list of jobs .
6035	MarshalJSON marshals the base64 into a byte slice .
6036	Scan scans the given src from src .
6037	NewWorker creates a new worker .
6038	NewLoggerBase creates a new LoggerBase
6039	Log implements the Logger interface .
6040	PreAccountAddBalanceApp approves the given job .
6041	PreAccountAddBalanceAddBalance adds a new balance to the blockchain .
6042	AfterAccountAddBalance adds a new account balance to the worker .
6043	AfterAccountReturnBalanceBalance updates the balance of a job .
6044	AccountUpdateBalances updates the job balance
6045	PreAccountReturnBalance balances the given job .
6046	GetOfferingUsage returns the number of units for a given offering .
6047	GetProductUsage returns the usage of a product .
6048	AddMapping adds a new port mapping to the network
6049	DeleteMapping deletes a port mapping
6050	PostCheque sends a payload to the queue .
6051	NewHTTPClient creates a new http client .
6052	NewServer creates a new server .
6053	AddHandler adds a handler to the server
6054	ListenAndServe starts the HTTPS server .
6055	Recover recovers the service status from the database .
6056	ConnStr returns the connection string
6057	NewDBFromConnStr returns a new DB .
6058	NewDB creates a new DB .
6059	GetCountry returns the country of the given URL .
6060	Endpoint returns the endpoint for the given key .
6061	NewServer creates a new server .
6062	NewMonitor creates a new monitor .
6063	initLastProcessedBlock initializes the last processed block
6064	Start starts the monitor .
6065	newClient creates a new client .
6066	Loop runs a loop .
6067	Offering returns a base64 string for the given hash .
6068	Endpoint returns the endpoint for the given channel key .
6069	Ping requests the server
6070	GetEthTransactions returns a list of eth transactions for a given type
6071	AgentSeal encodes the given message with the given client .
6072	ClientOpen opens a client .
6073	PackWithSignature encodes a message with the given key .
6074	UnpackSignature unmarshals the signature .
6075	VerifySignature checks if the given message is valid .
6076	signature returns the signature of the given message .
6077	GetObject gets the object from the database .
6078	GetObjectByHash retrieves the object by hash .
6079	ToError converts an error to an error .
6080	SetPassword sets the password .
6081	UpdatePassword updates the password .
6082	GetToken returns the token for the given password .
6083	NewProcessor creates a new processor .
6084	NewConfig returns a new Config instance
6085	NewQueue creates a new queue
6086	AddWithDataAndDelay adds a job to the queue .
6087	AddWithData adds a job to the queue .
6088	AddSimple adds a new job to the queue .
6089	AddWithDelay adds a new job to the queue .
6090	Subscribe implements the Queue interface .
6091	Unsubscribe removes a subscription from the queue
6092	TopUpChannel pushes a channel to the queue
6093	ChangeChannelStatus changes the status of a channel .
6094	GetAgentChannels returns a list of all available channels .
6095	GetChannelsUsage retrieves all channels for the given token .
6096	GetClientChannels returns a list of client channels .
6097	ReadSetting reads a setting from the database .
6098	ReadUintSetting reads a value from the database .
6099	ReadBoolSetting reads a setting from the database .
6100	SuspendChannel is part of the service .
6101	ActivateChannel activates a service .
6102	TerminateChannel terminates a service .
6103	ExportPrivateKey exports a private key
6104	GetAccounts returns a list of accounts .
6105	GenerateAccount creates a new account .
6106	ImportAccountFromHex creates an account from a private key .
6107	ImportAccountFromJSON loads an account from a JSON blob .
6108	TransferTokens transfers tokens to account
6109	UpdateBalance updates a balance
6110	UpdateAccount updates an account
6111	GetLastBlockNumber returns the last block number .
6112	GetEndpoint returns the endpoint for the given product .
6113	SetProductConfig sets the product configuration .
6114	NewWriterLogger creates a new Logger .
6115	NewFileLogger creates a new logger .
6116	NewClient creates a new instance of the client
6117	Parse parses the given configuration .
6118	Map mocks base method
6119	AddMapping adds a mapping to the discovery .
6120	DeleteMapping removes a mapping from the discovery .
6121	ReadFile reads a file .
6122	GetUserRole returns the user role
6123	NewHandler creates a new Handler .
6124	NewBackend creates a new backend instance
6125	addTimeout adds a timeout to the backend
6126	PendingNonceAt returns the number of pending nonce .
6127	SuggestGasPrice returns the amount of gas price .
6128	EstimateGas returns the gas for the given call .
6129	cooperativeClose is used to close a transaction .
6130	GetTransactionByHash returns a transaction by hash .
6131	RegisterServiceOffering registers a service offering .
6132	PTCBalanceOf returns the balance of the given address .
6133	PtcIncreaseApproval implements the PTCRPC interface .
6134	PSCBalanceOf returns the balance of the given address .
6135	PSCAddERC20 creates a new transaction with the given amount .
6136	PSCGetOfferingInfo returns the information for the given block .
6137	PSCGetChannelInfo returns the channel info for the given block number .
6138	EthBalanceAt returns the balance at the given owner .
6139	PSCSettle sends a PSCSettle transaction .
6140	PSCRemoveServiceOffering removes a service offering .
6141	PSCPopupServiceOffering is part of the backend .
6142	FilterLogs returns a list of logs for the given filter .
6143	HeaderByNumber returns a header by number .
6144	PTCAddress returns the PTC address .
6145	PSCAddress returns the PSC address .
6146	NewHandler returns a new Handler .
6147	KeyFromChannelData returns the key from channel data .
6148	AgentAfterChannelCreated creates an agent after the given job .
6149	AgentAfterChannelTopUp sets the agent after the given job .
6150	AgentAfterUncooperativeCloseRequest is called when an agent is closed .
6151	AgentAfterUncooperativeClose closes the given job .
6152	AgentAfterCooperativeClose closes the given job .
6153	AgentPreServiceSuspend is part of the worker .
6154	AgentPresuspend implements the Worker interface .
6155	AgentPreServiceTerminate terminates the given job .
6156	AgentAfterOfferingMsgBPublishMsgPublish is used to add an offer to the broker .
6157	AgentAfterOfferingDelete is part of the worker .
6158	AgentPreOfferingDelete deletes the given job .
6159	checkInPeriod checks if the block is in the given period .
6160	AgentPreOfferingPopup pops a job from the given job .
6161	AgentAfterOfferingPopUpUp updates the offered offering .
6162	Print prints a message .
6163	Error returns the error message .
6164	Message returns the message for the given error .
6165	RespondResult sends a response to the server .
6166	RespondError sends an error to the server .
6167	handlePay handles a request .
6168	getOpenBlockNumber returns the open block number for the given job .
6169	Offering returns the offering for the given hash .
6170	HandlersMap returns a map of registered handlers .
6171	Version returns the version of the database .
6172	Migrate migrations
6173	NewMonitor returns a new Monitor .
6174	Run starts the monitor .
6175	VerifyBillingLags verifies that the server is valid .
6176	VerifySuspendChannelsAndUnsuspend is used for testing .
6177	VerifyChannelsForInactivity verifies that all channels have been received .
6178	VerifySuspendedChannelsAndTerminate returns an error if the service is not available .
6179	NewLogger creates a new logger .
6180	BalanceClosingHash returns the balance of a block .
6181	Run is used to run the map .
6182	RecoverPubKey attempts to recover a public key .
6183	GetTemplates returns a list of templates for the given token .
6184	CreateTemplate creates a new template
6185	CreateProduct creates a new product .
6186	UpdateProduct updates a product .
6187	GetProducts returns a list of products .
6188	NewHandler returns a new Handler .
6189	EncryptedKey encodes a private key
6190	ExecuteCommand executes the command .
6191	AddMapping adds a port mapping to the network
6192	DeleteMapping removes a port mapping
6193	NewMonitor returns a new Monitor .
6194	GetOfferingIncome returns the balance of the given offering .
6195	GetProductIncome returns the sum of the given product .
6196	GetTotalIncome returns the total amount of channels in the channel .
6197	Up00001 mocks base method
6198	GetSettings returns the settings for the given token .
6199	UpdateSettings updates settings .
6200	IsIPv4 returns true if the string is a valid IP address .
6201	IsHostname returns true if the given string is a hostname .
6202	IsNetPort returns true if the given string is a network port .
6203	IsTLSCert returns true if the given block is a TLS certificate .
6204	ValidateJSON validates a JSON schema .
6205	NewConfig returns a new Config instance
6206	ReadJSONFile reads a JSON file .
6207	WriteJSONFile writes a JSON file to a file .
6208	IsUUID returns true if the string is a UUID .
6209	ExeDirJoin returns the path of the exec directory
6210	RootPath returns the root path .
6211	Caller returns the caller s caller .
6212	CheckConnection returns true if the given network connection is connected .
6213	ClientAfterChannelCreate creates a client after the given job .
6214	ClientEndpointCreate creates a new endpoint endpoint
6215	ClientAfterUncooperativeClose closes the given job .
6216	ClientAfterCooperativeClose closes the given job .
6217	ClientPreServiceTerminate is part of a job .
6218	ClientPreServiceSuspend sends a job to the queue .
6219	ClientPresuspend removes a job from the queue .
6220	ClientPreUncooperativeClose closes the given job .
6221	ClientPreChannelTopUp saves the top of the given job .
6222	ClientAfterChannelTopUp adds a job to the worker
6223	ClientUncooperativeCloseRequest sends a client to the client .
6224	ClientAfterUncooperativeClose requests the client after the given job .
6225	ClientAfterOfferingMsgBPublishMsgPublish publishes the given job to the client .
6226	ClientAfterOfferingPopUp updates the offered offering .
6227	ClientAfterOfferingDelete is part of the worker .
6228	DecrementCurrentSupply decrement the current job .
6229	GetEndpoints returns a list of Endpoints for a given channel .
6230	GetGUISettings retrieves the GUI settings from the database .
6231	SetGUISettings sets the GUI settings .
6232	HandleFunc registers a handler for the given pattern .
6233	RequireHTTPMets returns a HandlerFunc that can be used for HTTP requests .
6234	RequireBasicAuth is a helper function for RequireBasicAuth
6235	New creates a new service .
6236	EndpointMessage returns the message for the given channel ID .
6237	ConnChange sends a connection to the server .
6238	FromBase64ToHex converts a base64 string to a hex string .
6239	HexToBytes converts hex string to bytes .
6240	ToBytes converts a base64 string to a byte slice .
6241	ToHash converts a base64 string to a hash .
6242	HashToHash converts hex string to a Hash .
6243	HexToAddress converts a hex string to an address .
6244	BytesToUint32 converts b to uint32
6245	Uint32ToBytes converts uint32 to bytes .
6246	Uint64ToBytes converts uint64 to bytes .
6247	Uint192ToBytes converts x to a byte slice .
6248	HashPassword is used to generate a base64 string .
6249	ValidatePassword checks if the given password is valid .
6250	GetUint64Setting returns the value for a given key .
6251	ChannelKey returns the channel key for the given client .
6252	MinDeposit returns the minimum value for the given offering .
6253	AcceptOffering is used to accept an offer .
6254	ChangeOfferingStatus changes the offer status of the offer .
6255	GetClientOfferings returns a list of client offers
6256	GetAgentOfferings returns a list of offered offerings .
6257	setOfferingHash sets the offer hash for an offering .
6258	fillOffering fills the offer for the given offering .
6259	UpdateOffering updates an offering .
6260	CreateOffering creates a new offering .
6261	GetClientOfferingsFilterParams returns an instance of ClientOfferingsFilterParams .
6262	PingOfferings returns a map of offered offerings .
6263	NewServer creates a new server .
6264	Mux mux
6265	NewLogger returns a new Logger
6266	Printf prints a formatted log message .
6267	GetURL returns the URL for the given path
6268	NewHTTPRequest creates a new http request .
6269	NewHTTPRequestWithURL creates a new HTTP request with the given URL .
6270	Send sends a request to the client
6271	Check checks if the token is valid .
6272	Make creates a random token
6273	GetLogs returns a list of log events .
6274	AuthClient authenticates a client .
6275	Start session
6276	UpdateSession updates the session .
6277	OfferingMessage returns an instance of OfferingMessage
6278	ValidMsg returns true if the given schema is valid .
6279	NewClient creates a new client .
6280	Panic panics if panics or not
6281	ParseRequest parses the request and parses the request body
6282	Save returns the list of services .
6283	NewClient creates a new client .
6284	ParseRate parses the response and returns a RateLimit object .
6285	SetOutputPath sets the output path to the given path .
6286	UpdateConfig updates the global configuration .
6287	SetTracerPath sets the path to the given path .
6288	SetOutputPath sets the output directory
6289	SetPipes sets the pipe to stdout .
6290	AppendOptionWithPrefix adds a prefix to the list of options .
6291	MarshalRaw implements the Marshaller interface .
6292	MarshalString implements the Marshaler interface .
6293	MarshalBytes implements the Marshaller interface .
6294	MarshalBool implements marshaler .
6295	MarshalUint32 encodes a uint32 into a byte array .
6296	MarshalUint64 implements the Marshaller interface .
6297	ElementSizeExceeded returns an error .
6298	nextSpecialChar returns the next character of the next character .
6299	nextSpecialChar returns the next character in the buffer .
6300	NewDecoder returns a new decoder .
6301	Register registers a constructor .
6302	MustRegister registers a new dependency .
6303	Create creates a new dependency .
6304	cachedCreateFromType creates a new instance of the given type .
6305	NewDependencyInjector returns a new dependency injector
6306	NewServiceContainer returns a new ServiceContainer instance
6307	AssetUrl returns the URL for the given name .
6308	Prefix returns a new asset pipeline .
6309	ServeHTTP implements the http . Handler interface .
6310	getResponse gets the response from the request
6311	isValid checks if the controller is valid
6312	NewHandler creates a new ControllerHandler .
6313	Handler creates a new http . HandlerFunc .
6314	SetRequest sets the request
6315	Session returns the session
6316	RenderView renders a template
6317	RenderTemplate renders a template
6318	RedirectRoute returns a redirect response .
6319	UrlFor returns the URL for a route .
6320	CookieValue returns the value of a cookie value .
6321	BodyData returns the body of the request .
6322	QueryValue returns the value for the given key .
6323	FormValueOrDefault returns the value of the given key .
6324	UrlValue returns the value for the given key .
6325	Contains returns true if the string contains a substring .
6326	RemoveStringsFromString removes strings from a string .
6327	Map maps a string to a map of strings .
6328	Equal returns true if two strings are equal .
6329	Uniq returns a slice of strings .
6330	NewCookieSigner returns a new cookie signer .
6331	EncodeCookie encodes a cookie
6332	DecodeCookie decodes a cookie .
6333	DecodeValue decodes a cookie value .
6334	EncodeValue encodes a cookie .
6335	ServeHTTP implements the http . Handler interface .
6336	NewSprocketsServer creates a SprocketsServer instance
6337	normaliseKey is used to convert the key to a string
6338	Stop and log the given section name .
6339	MonitorFunc mocks base method
6340	MonitorReflectedFunc mocks base method
6341	LogRequest logs a request .
6342	CommonLogHandler returns a common log handler for the given template .
6343	ServeHTTP implements the http . Handler interface .
6344	UrlUsername returns the username of the request .
6345	UrlFor returns a URL for a given name
6346	AbsoluteUrlFor returns the absolute URL for a given name .
6347	Parse parses JSON data into an interface .
6348	Load from env
6349	RegexPath applies the given regexp .
6350	CacheControl returns a new HTTP request .
6351	transform transforms a map into a map
6352	DiscoverWalk walks the given app .
6353	DiscoverEndpoints returns the endpoints of the given app .
6354	JSONFieldsFromStruct returns a list of fields from a struct .
6355	StructFieldFromJSONName returns the field name of a struct .
6356	Enumerate implements the Dictionary interface .
6357	Release releases the message .
6358	Wrap wraps an error with the given text .
6359	causer creates a new CA user .
6360	From converts ctx to Context
6361	With adds a new context to the context .
6362	Format implements the Format interface .
6363	NewWriter returns a new Writer .
6364	Level returns a map of levels .
6365	SetLevel sets a level effect
6366	Suppress adds all levels to the writer .
6367	IsSuppressed returns true if the given level is suppressed .
6368	Handle adds a handler to the writer .
6369	SetOutput sets the output writer .
6370	Enumerate implements the Directory interface .
6371	All returns true if the subject matches the given predicate .
6372	All returns true if all elements are equal .
6373	Any returns true if the iterator is true .
6374	Anyp returns true if the iterator is true .
6375	AsEnumerable returns an Enumerable .
6376	First returns the first element of the subject .
6377	Merge merges two Enumerator .
6378	ParallelSelect returns a new Enumerable .
6379	ParallelSelect implements the enumerator interface .
6380	Reverse returns an ordered list of elements .
6381	Select returns a new Enumerable .
6382	Select returns an iterator over all elements in the iterators .
6383	SelectMany returns a copy of the given subject .
6384	SelectMany returns a copy of the elements in the enumerator .
6385	Single returns the first element of an iterable .
6386	Single p .
6387	Skip returns a copy of the given subject .
6388	splitN splits n elements into a slice of elements .
6389	Take takes a subject and returns a new Enumerable .
6390	Take returns an iterator over the enumerator .
6391	TakeWhile returns a new Enumerable with the given predicate .
6392	TakeWhile returns a channel that matches the given criteria .
6393	 Tee returns an iterator over the elements of the iterator .
6394	ToSlice returns a slice of elements .
6395	Where returns a new Enumerable .
6396	Where returns a channel with the given predicate .
6397	ReleaseBuffer releases the buffer .
6398	NewStack creates a new Stack .
6399	Enumerate implements the Stack interface .
6400	IsEmpty returns true if the stack is empty .
6401	Push adds an entry to the stack .
6402	Pop removes the element from the stack .
6403	Peek returns the first element in the stack .
6404	Size returns the size of the stack .
6405	NewLinkedList creates a new LinkedList .
6406	AddBack adds an entry to the list .
6407	Enumerate returns an iterable of items in the list .
6408	Get returns the item at position .
6409	IsEmpty returns true if the list is empty .
6410	Length returns the length of the list .
6411	PeekBack returns the last item in the list .
6412	PeekFront returns the first item in the list .
6413	RemoveFront removes the first element from the list .
6414	RemoveBack removes the last item from the list .
6415	Sort sorts the elements in the list .
6416	Sorta sorts a list of strings .
6417	Sort i . e . e
6418	String returns a string representation of the list .
6419	Swap swaps two lists .
6420	merge two lists
6421	split splits the head of the tree into the right tree .
6422	Add adds an entry to the queue .
6423	Enumerate implements the Queue interface .
6424	IsEmpty returns true if the queue is empty .
6425	Length returns the length of the queue .
6426	Next returns the next element .
6427	Peek returns the first item in the queue .
6428	ToSlice implements Queue .
6429	EnableVirtualTerminalProcessing enables virtual terminal processing .
6430	unquote unquoted unquoted a string
6431	countScalars returns the number of keys in a slice .
6432	IsTerminal returns true if the writer is a terminal .
6433	Add adds an entry to the list .
6434	AddAt adds an entry to the list .
6435	Enumerate implements the Listener interface .
6436	Get returns the item at the given position .
6437	IsEmpty returns true if the list is empty .
6438	Length returns the length of the list .
6439	Remove removes the element from the list .
6440	Set adds a value to the list .
6441	String returns a string representation of the list .
6442	Swap swaps two lists .
6443	MarshalText serializes the list of strings .
6444	UnmarshalText unmarshals a list of strings .
6445	replace returns a string representation of a time .
6446	Format returns a string representation of the given time .
6447	logName returns the name of the log .
6448	Monotonic returns the current time .
6449	set sets the Severity field s value .
6450	Set sets the Severity field s value .
6451	set sets the value of the level
6452	match returns true if the file matches the pattern .
6453	match matches pattern
6454	match returns true if the file is a trace location
6455	NewLogger creates a new Logger .
6456	SetLogDir sets the log directory
6457	SetLogToStderr sets the LogToStderr field s value .
6458	SetAlsoLogToStderr sets the LogToStderr field s value .
6459	setVState sets the verbosity of the logger .
6460	getBuffer returns a new buffer .
6461	putBuffer adds a buffer to the log .
6462	output implements the logger interface .
6463	timeoutFlush flushes the log to the log .
6464	stack returns a slice of stack traces
6465	Exit is called when an error occurred .
6466	RotateFile rotates the file .
6467	createFiles creates a new flushing flushing file
6468	flushDaemon is used to flush all log messages .
6469	lockAndFlushAll flushes all log messages .
6470	Flush all files in the log .
6471	Add adds a function to the bundle .
6472	Join implements the Bundle interface .
6473	NewBundle creates a new Bundle .
6474	Expand expands a list of tokens .
6475	CacheFunc returns a new http . HandlerFunc .
6476	CacheFassthttp creates a new FASthttp .
6477	CacheFassthttpFunc returns a CacheFunc that caches the given body and expiration .
6478	ContentType returns the content type of the response .
6479	ServeHTTP implements the http . Handler interface .
6480	New creates a new http server .
6481	AcquireResponseRecorder returns a new ResponseRecorder .
6482	ReleaseResponseRecorder releases a ResponseRecorder .
6483	Claim returns true if the request is valid
6484	Rule sets the rule .
6485	Reset resets the response
6486	NoCache sets the response header
6487	clientOAuth creates a new client .
6488	authenticate is used to authenticate a client .
6489	APIKeyAuth creates a new API key authentication .
6490	authenticate authenticates the request with the given endpoint .
6491	serviceOAuth creates a serviceOAuth authentication .
6492	authenticate is used to authenticate a service
6493	OAuthService creates an OAuth service
6494	CreateAuthorizeUrl creates an authorization URL .
6495	RefreshTokens refreshes OAuth tokens
6496	NewTokens returns a new OAuth tokens
6497	NewTokensFromRequest creates a new OAuth tokens from a request .
6498	Request sends a request to the server
6499	createRequest creates a new http request
6500	executeRequest executes the given HTTP request .
6501	simulateRequest mocks base method
6502	ApiKeyClient creates a new API client .
6503	OAuthClient creates an OAuth client
6504	Get returns a JSON - RPC request .
6505	GetBalance returns the balance of the account
6506	GetAllAddresses returns a list of addresses .
6507	GenerateReceiveAddress creates a new address .
6508	SendMoney mocks base method
6509	RequestMoney returns a transaction confirmation .
6510	ResendRequest resends a request
6511	CancelRequest cancel a request
6512	CompleteRequest completes a transaction .
6513	Create a button
6514	CreateOrderFromButton creates a new order from a button
6515	Create a new user
6516	Buy a transfer
6517	Get contacts
6518	GetCurrencies returns a list of currencies .
6519	GetExchangeRates returns the exchange rates .
6520	GetExchangeRate returns the exchange rate
6521	GetTransactions returns a list of transactions .
6522	GetOrders returns a list of orders .
6523	GetTransfers returns a list of Transfers .
6524	GetBuyPrice returns the price for a given quantity .
6525	GetSellPrice returns prices for a given quantity .
6526	GetTransaction returns a transaction .
6527	GetOrder returns order by id
6528	GetUser returns the user
6529	NewSerialDispatcher returns a new instance of SerialDispatcher
6530	AppendHandlers appends the handlers to the SerialDispatcher .
6531	DispatchOptional implements the SerialDispatcher interface .
6532	NewParallelDispatcher returns a new Dispatcher .
6533	ReleaseMsg releases a message .
6534	ReleaseBuffer releases the buffer .
6535	Close closes the connection .
6536	Write implements the Conn interface .
6537	Accept returns a new Conn .
6538	AddDialer adds a Dialer to the Dialer .
6539	subDialerForAddr returns the subdialer for the given address .
6540	rawConnDial dials a remote peer .
6541	MultiaddrProtocolsMatch returns true if all of the protocols are equal .
6542	MultiaddrMatch returns the Multiaddr matching the given srcs .
6543	get gets the value from the map
6544	getArray returns the value of the given key .
6545	buildParams build params
6546	unsetGPGAgentInfo is used to unset environment variables
6547	AssuanSend sends a command to the current context .
6548	NewData returns a new data .
6549	NewDataFile creates a new data file .
6550	NewDataBytes returns a new Data object .
6551	NewDataReader returns a new DataReader .
6552	NewDataWriter creates a new data writer .
6553	NewDataReadWriter creates a new data read writer .
6554	NewDataReadWriteSeeker returns a new data object .
6555	Close closes the data .
6556	Name returns the file name .
6557	NewCommand creates a new command .
6558	Arg adds an argument to the command .
6559	String returns a string representation of the command .
6560	Columns returns a list of columns .
6561	Get returns the value of a column .
6562	GetBool returns true if the given column exists .
6563	GetInt returns the int64 value of the given column .
6564	GetSlice returns a slice of values from the record .
6565	GetString returns the string value as a string .
6566	GetTime returns the time of the given column .
6567	ChangeContactModattr modifies the presence of a contact
6568	ChangeContactModifier returns a new instance of ChangeModifier .
6569	ChangeContactModsattr mocks base method
6570	ChangeCustomContactVar returns a command that can be used to change a specific contact .
6571	ChangeCustomHostVar returns a command that changes the specified host name .
6572	ChangeCustomSvcVar creates a new command with the specified name .
6573	ChangeHostCheckTimeperiod returns a new instance of the livestatus command .
6574	ChangeHostModattr returns a command that changes the given value .
6575	ChangeSvcModattr changes the value of a service .
6576	DeleteAllSvcComments deletes all services for a given host .
6577	DisablePassiveSvcChecks returns a command that can be used to disable a service .
6578	DisableServiceFlapDetection sets the service flap detector .
6579	DisableSvcCheck is used to disable a service .
6580	DisableSvcEventHandler is used to disable a service .
6581	DisableSvcFlapDetection is used to disable a service .
6582	DisableSvcNotifications is used to disable a service .
6583	EnablePassiveSvcChecks returns a command that can be used to enable a service .
6584	EnableSvcCheck creates a new service health check .
6585	EnableSvcEventHandler returns a command for the service .
6586	EnableSvcFlapDetection is used to enable a service .
6587	EnableSvcNotifications allows you to enable a service .
6588	RemoveSvcAcknowledgement removes a service acknowledgement .
6589	StartObsessingOverSvc returns a command that starts observing the given host name .
6590	StopObsessingOverSvc returns a StopObservingOverSvc .
6591	NewQuery creates a new Query
6592	Columns adds columns to the query .
6593	Filter adds a rule to the query .
6594	And adds a condition to the query .
6595	Negate deletes the query .
6596	WaitObject sends a request to the query .
6597	WaitCondition adds a condition to the query .
6598	WaitConditionNegate sets the WaitConditionNegate field s value .
6599	WaitTrigger adds a trigger to the query .
6600	WaitTimeout sets the timeout for the query .
6601	KeepAlive sets the KeepAlive field s value .
6602	ReadTimeout sets the read timeout
6603	String returns a string representation of the query .
6604	NewClient creates a new client
6605	NewClientWithDialer creates a new client .
6606	Exec executes a request .
6607	xtoi22 returns the number of bytes in a string .
6608	Mask mocks base method
6609	New creates a new OUI database .
6610	Lookup returns the address for the given address .
6611	DeviceLookup returns the vendor for the given mac address .
6612	Contains checks if the address is in the address block .
6613	 ThrottledReader wraps io . Reader .
6614	NewThrottledBucket creates a new bucket .
6615	NewCmdWithRunner creates a new CmdWithRunner with the given runner .
6616	MustNewCmdWithRunner creates a new CmdWithRunner with the given runner .
6617	importBreakPaths returns a list of imports from a file .
6618	SelfProxyCmderSupplier returns a CmderrSupplier that returns a Cmdder .
6619	SupplierWithPrependedArgs returns a new CmdderWithPrependedArgs with the given arguments .
6620	SelfCmder returns the cmdder .
6621	CmderWithPrependedArgs returns a new Cmdder with prependedArgs .
6622	NewSeeforRouter creates a new Seefor
6623	ServeHTTP is used to serve HTTP requests .
6624	Before adds middleware to the chain
6625	After adds middleware to the chain
6626	UseTimer returns a new Timer instance
6627	NewRouter creates a new router
6628	ServeHTTP implements the router interface .
6629	Group registers a group .
6630	findChild finds a route node by its path
6631	insertChild adds a new route to the route node
6632	Get returns the counter for the given name .
6633	ServeHTTP implements the http . Handler interface .
6634	Main entry point
6635	NewGroupRouter creates a new GroupRouter
6636	RouteMiddleware registers a route middleware for the route .
6637	RouteHandlerFunc returns a HandlerFunc that returns a HandlerFunc .
6638	RectFromSphere returns a Rectangle from a sphere .
6639	CopyRect returns a new Rectangle .
6640	Size returns the size of the rectangle
6641	Overlaps returns true if the rectangle intersects .
6642	String returns a string representation of the Rectangle .
6643	Dx returns the width of the rectangle .
6644	Ddy returns the height of the rectangle .
6645	In returns true if the Rectangle contains the given Rectangle .
6646	Approx returns true if x is equal .
6647	ApproxEpsilon returns true if x is equal .
6648	SetXYZ sets the coordinates of the vector .
6649	V3DistrDistr returns the distance between two vectors .
6650	Copy copies the Vec3 to dst .
6651	Assign assigns the vector to the vector .
6652	Dist2D returns the distance between two vectors .
6653	Dist2DSqr returns the distance between two vectors .
6654	Cross returns a new Vec3 .
6655	dot2D returns the dot product of the vector .
6656	NewRay creates a new Ray .
6657	IntersectRect computes the intersection of a rectangle .
6658	SupportedFunc returns an error if the request is supported .
6659	NewSigner returns a new Signer .
6660	NewVerifier creates a new Verifier .
6661	Request sends a request .
6662	Status returns a status response
6663	Cancel cancelation
6664	Discover returns a discovery response
6665	NewClient returns a new Client instance
6666	Push adds a value to the stack .
6667	Pop removes the value from the stack .
6668	Pop last element
6669	Peek returns the first value in the stack .
6670	PeekN returns a slice of elements .
6671	V2f32 returns a new Vec .
6672	Veci returns a new Vec .
6673	Add adds the vector to the vector .
6674	Sub subtracts two Vecs .
6675	In returns true if the given rectangle is in the rectangle .
6676	Len returns the length of the vector .
6677	ApproxFuncEqual returns true if two vectors are equal .
6678	Merge merges two handlers .
6679	respCode returns the status code for the request .
6680	NewServer creates a new server .
6681	Call is used to send a CallbackRequest
6682	ErrNotFound returns an error response .
6683	ErrUnsupportedRequestType returns an error response .
6684	ErrUnsupportedIdentity returns an error response .
6685	ErrMissingRequiredField returns an error response .
6686	ErrInvalidRequestSignature returns an error response .
6687	Database servers .
6688	SnapshotDatabaseServer returns a snapshot of the given identifier .
6689	ResetPasswordForDatabaseServer deletes a password server .
6690	Servers returns a list of servers .
6691	Server returns a server .
6692	DestroyServer deletes a server
6693	LockServer mocks base method
6694	UnlockServer unlocks a server .
6695	SnapshotServer returns a snapshot of the specified identifier .
6696	FullConsoleUrl returns the full URL of the server .
6697	FirewallRule returns a firewall rule
6698	ServerGroups returns a list of server groups .
6699	ServerGroup returns a server group .
6700	Add servers to a server group
6701	Move servers to a server group .
6702	LoadBalancers returns a list of LoadBalancers
6703	Loads a load balancer
6704	AddNodesToLoadBalancer adds nodes to load balancer
6705	Remove listeners from load balancer
6706	LockResource mocks base method
6707	FirewallPolicies returns a list of firewall policies .
6708	FirewallPolicy returns a FirewallPolicy .
6709	Applies a firewall policy .
6710	Extract extracts the AuthResult from the GetAuthResult .
6711	ApiClients returns a list of all API clients .
6712	ApiClient returns a new ApiClient
6713	ResetSecretForApiClient returns a new ApiClient with the given identifier .
6714	Images returns a list of images .
6715	Image returns an image .
6716	Account returns all accounts .
6717	Account returns an account .
6718	CloudIPs returns a list of CloudIPs
6719	CloudIP returns the CloudIP API for the given identifier .
6720	MapCloudIPtoServer creates a new IP address from the server
6721	setAuthHeader sets the authorization header for the request .
6722	Auth returns the auth result of the user
6723	Returns a list of collaborations .
6724	 Collaboration
6725	Database snapshots
6726	Database snapshot
6727	Scan returns a list of alive IP addresses .
6728	ToFile converts src to dest
6729	ToWriter converts src to writer .
6730	FromURL downloads a file from a URL .
6731	ForPeriod returns the code for the given period .
6732	QRCodeData returns the QR code for the given label .
6733	RandomSecret generates a random secret
6734	DefaultPeerConfig returns a new PeerConfig instance
6735	PubKey returns the public key of the peer .
6736	OnStart is part of the broker
6737	Send sends a message to the server
6738	WriteTo implements io . Writer interface .
6739	Equals returns true if the peer is equal .
6740	FuzzConnAfter returns a new connection after the given connection .
6741	NewMConnectionWithConfig creates a new MConnection with the given config .
6742	recover attempts to recover the connection .
6743	Send sends a message to the channel
6744	TrySend sends a message to the channel
6745	CanSend returns true if the channel is available .
6746	sendRoutine sends a message to the server .
6747	sendSomeMsgPackets sends a batch of messages .
6748	sendMsgPacket sends a message to the channel .
6749	nextMsgPacket returns the next packet .
6750	writeMsgPacketTo writes a message to w .
6751	recvMsgPacket receives a packet from the channel .
6752	hash24 returns the hash of the input .
6753	incrNonce increments the number of nonce .
6754	List returns the list of peers .
6755	ListenRoutine starts listening for the listener .
6756	NewAddrBook creates a new AddrBook .
6757	OnStart implements the AddrBook interface .
6758	RemoveAddress removes an address from the map .
6759	loadFromFile loads the address from a file .
6760	Save saves the AddrBook .
6761	addToOldBucket adds a new address to the old address .
6762	expireNew is used to expire new addresses .
6763	DialSeeds sends a list of seeds to the given address .
6764	NewNetAddressStrings creates a new NetAddressStrings .
6765	NewNetAddressIPPort creates a new NetAddress
6766	Equals returns true if the given network is equal .
6767	Dial connects to a network address .
6768	Valid returns true if the network is valid .
6769	reachabilityTo returns the address of the given NetAddress .
6770	NewPEXReactor creates a new PEXReactor .
6771	OnStart starts a new peer .
6772	Receive sends a message to the peer .
6773	RequestPEX sends a PEX request to the peer
6774	SendAddrs sends an address to the peer .
6775	IncrementMsgCountForPeer implements PEXReactor .
6776	DecodeMessage decodes a PEX message .
6777	NewReader returns a new Reader .
6778	LogOnPanic logs an error .
6779	Wrap wraps an http . Handler with panics .
6780	Start starts the logger .
6781	New creates a new service .
6782	Wrap wraps http . HandlerFunc
6783	GetString returns the value of the given key .
6784	GetInt returns the value of the given key .
6785	RegisterDriver registers a new driver .
6786	Open opens a pubsub connection
6787	SendEvents sends events to the websocket .
6788	Unmarshal unmarshals data into a map
6789	Publish sends a message to the hub
6790	Subscribe creates a new channel
6791	getChannel returns a channel .
6792	remove removes a channel from the hub .
6793	Open opens a new pubsub connection
6794	Publish publishes a message to the hub .
6795	Subscribe sends a channel to the hub
6796	MakeHub creates a new instance of the given config .
6797	Fib returns a Fibon function that returns a Fibon .
6798	roundIndex returns a slice of indices .
6799	Dir returns the home directory
6800	Ask the user s question .
6801	InteractionCount returns the number of interactions .
6802	TimeElapsed returns the duration of the session .
6803	History returns all queries in the session .
6804	Bool returns the value of a flag .
6805	String returns the value of the given name .
6806	Fail attempts to fail .
6807	Fail returns true if the T is failed .
6808	Logf logs a formatted message .
6809	Error prints an error .
6810	Errorf logs an error with the given format .
6811	Init initializes the client
6812	Value returns the value of the client .
6813	Child adds a child to the client
6814	Push a value to the client
6815	Update an existing value
6816	Remove a path
6817	Rules returns a list of rules for the given params
6818	SetRules sets the rules for the given rules .
6819	Call calls the given method .
6820	SetTraceInfo implements the Trace interface .
6821	Finish finishes the trace .
6822	ServeMetrics is used to serve metrics .
6823	DumpMetrics dump metrics into a string .
6824	NewEventLog creates a new EventLog .
6825	Printf implements the Logger interface .
6826	Errorf logs an error
6827	SetLogger creates a new logger
6828	ServeHTTP implements http . Handler interface .
6829	TitleFromContext returns the title from the context .
6830	NewContext returns a context with the given family .
6831	New returns a new Client instance
6832	NewWithClient returns a new Client instance
6833	Devices returns a list of devices .
6834	Device returns a device by nickname .
6835	PushNote sends a note to the device
6836	PushLink sends a link to the device .
6837	PushSMS sends a message to the device .
6838	Me Me
6839	Push sends a request to the server
6840	PushNote creates a new note
6841	PushNoteToChannel sends a note to the channel .
6842	PushLink adds a link to the user .
6843	PushLinkToChannel pushes a link to a channel .
6844	PushSMS sends a message to the device .
6845	Subscription returns a subscription for the given tag .
6846	PushNote sends a note to the channel .
6847	PushLink sends a link to the channel .
6848	NewCachedLoader creates a new cache loader
6849	Import import data from cache
6850	Initialize the cache .
6851	Get retrieves a value from the cache .
6852	MustGetString gets a string from the cache
6853	MustGetBool retrieves a bool from the cache .
6854	MustGetInt returns the value of the given key .
6855	MustGetDuration returns the duration of the cache .
6856	NewRandomDNSBalancer returns a new balancer .
6857	writeServiceToCache writes a service to the cache .
6858	StringToLabels converts string to labels .
6859	SetClockSequence sets the clock sequence
6860	Trace logs a message .
6861	Debug logs a message .
6862	Info logs a message .
6863	Warn logs a message .
6864	Error logs a message .
6865	Critical logs a message .
6866	SendPaste sends a paste
6867	GetPasteTextById returns the text of a paste
6868	ExecAndWait waits for the stream and waits for it to complete .
6869	ExecutorName sets the ExecutorName field s value .
6870	Exe sets the Exece builder
6871	Args sets the Args field s value .
6872	Dir sets the directory s directory .
6873	Env sets environment variables
6874	Writers sets the stdout writer .
6875	StdoutWriter sets the StdoutWriter
6876	StdoutPrefix sets the StdoutPrefix field s value .
6877	StderrWriter sets the StderrWriter .
6878	StderrPrefix sets the StderrPrefix field s value .
6879	Build builds the Executor .
6880	MakeWidget creates a Widget .
6881	SetText sets the text of the label
6882	AddLabel adds a label to the window
6883	printf writes a color to the window
6884	setCell sets the cell at the given position .
6885	Resize the window .
6886	render renders the window
6887	Focus widget .
6888	focusPrevious is used to focus the window .
6889	keyHandler returns the key handler for the window .
6890	Color returns a string representation of an Attribute .
6891	EscapedLen returns the length of a string .
6892	Unescape escapes a string
6893	init initializes the window
6894	initKeyHandler initializes the key handler
6895	Init initializes the terminal .
6896	Deinit initializes the terminal .
6897	NewWindow creates a new Window
6898	flush flushes all cells to the terminal
6899	focusWindow is used to focus the window .
6900	resizeAndRender renders the window .
6901	Panic prints a message with the given format .
6902	Exit is used to exit the terminal
6903	AddList creates a new List .
6904	Append appends a string to the list .
6905	Focus sets the cursor position .
6906	SetText sets the text .
6907	AddEdit adds a new edit to the window
6908	makeAuthorizationHeaders returns the authorization headers .
6909	Start the current session
6910	FetchEntity fetches an entity from the session .
6911	SaveEntity adds an entity to the session .
6912	DeleteEntity deletes an entity .
6913	FetchChildren fetches the children of the given parent .
6914	CreateChild creates a new child identifier .
6915	AssignChildren adds children to the session .
6916	NextEvent sends a notification to the session .
6917	String returns a string representation of the Identity .
6918	NewPushCenter creates a new PushCenter
6919	RegisterHandlerForIdentity registers an event handler for the given identity .
6920	UnregisterHandlerForIdentity implements the PushCenter interface for PushCenter
6921	HasHandlerForIdentity returns true if the given identity matches the given identity .
6922	Start starts the PushCenter
6923	Stop stops the PushCenter
6924	Logger returns the default logger
6925	String returns a string representation of FetchingInfo .
6926	NewClient creates a new http client
6927	Post sends metrics to the server
6928	MetricID returns a metric ID
6929	SplitMetricID returns the name of a metric ID .
6930	NewRateScale creates a new RateScale
6931	Snapshot returns the current rate of the rate .
6932	NewDeriveScale creates a new DeriveScale .
6933	Update implements the Derive interface .
6934	Snapshot returns the current histogram .
6935	Update implements the Gauge interface .
6936	Snapshot returns the value of the gauge .
6937	NewUnstarted returns a new registry .
6938	Subscribe adds a reporter to the registry .
6939	Get returns the instrument by name .
6940	Register registers a metric .
6941	Fetch retrieves a metric from the registry
6942	Size returns the number of instruments .
6943	Tags returns the tags .
6944	SetTags sets the tags .
6945	AddTags adds tags to the registry
6946	Close closes the registry .
6947	New creates a new Reporter
6948	Metric adds a metric to the reporter .
6949	FilterBefore returns the rows before the given filter .
6950	Set sets the value for the given key .
6951	SetStr implements EnvVar .
6952	Get returns the value of the given key .
6953	String returns a string representation of the EnvVar .
6954	Add adds a value to the set .
6955	AddAll adds all values to the set .
6956	Remove removes a value from the set .
6957	RemoveAll removes all values from the set .
6958	Contains returns true if the set contains the given value .
6959	ContainsAll returns true if the set contains the given values .
6960	ContainsFunc returns true if the set contains the given function .
6961	Clear clears the set .
6962	Iterator returns an iterator over the set of elements .
6963	Items returns a slice of items .
6964	ItemsFunc returns all items in the set .
6965	FixWeekend returns the week end of the week .
6966	GetHolidays returns a list of holidays for the given country code .
6967	GetInt returns the value of the given key .
6968	GetFloat returns a float64 value .
6969	GetBool returns the value of the given key .
6970	Exists returns true if the key exists .
6971	getValue returns the value for the given key
6972	Load loads the config file .
6973	loadPath returns the path to the path
6974	New returns a new Reader .
6975	readMimetypes reads a list of mimetypes
6976	Get returns the mime type .
6977	SetHeader adds a header to the response .
6978	GetFileSize returns the size of a file .
6979	ListenAndServe starts the websocket server .
6980	SendRequest sends a request to the server
6981	SendRequestArr sends a request to the server
6982	Close closes the server .
6983	ws a websocket connection
6984	SafeCreateS3Bucket creates a S3B bucket .
6985	NewWriter creates a new writer .
6986	NewReader returns an io . Reader .
6987	Delete deletes a path
6988	CertAtuh returns an error if it is not valid
6989	Params sets the params
6990	Next returns the next request .
6991	Result returns the result of the result .
6992	ErrorData parses the error data from the response .
6993	MiddlewareList adds a middleware to the middleware
6994	LogFactory creates a new logger .
6995	NewRouter creates a new router
6996	Request adds a route to the router .
6997	Middleware middleware middleware
6998	NotFound is a middleware that is not found .
6999	NewMysqlDump creates a new MysqlDump instance
7000	NewRemoteMysqlDump creates a new MysqlDump .
7001	Import import file
7002	Dump dumps the database to the destination .
7003	NewRemoteExecutor creates a new Executor .
7004	Execute executes a command .
7005	World renders the world .
7006	Name returns the name of the user
7007	NewPgDump returns a new PgDump instance
7008	NewPgRemoteDump returns a new PgDBDump instance
7009	Import import file
7010	New returns a new IrcText instance
7011	SetFg sets the foreground color
7012	SetBg sets the BgColor field s value .
7013	HandlerBuilder creates a scaffold handler for the given interface .
7014	LoggerWithPrefix creates a logger with the given prefix .
7015	NewEncoder returns a new Encoder .
7016	Parse returns the parser for the given request .
7017	Responder returns a Responder .
7018	NewErrorStatus creates a new error status
7019	ConvertErrorStatus converts an error to an error .
7020	Read implements the FileEntry interface .
7021	EntrySize returns the size of the file extension .
7022	NewLager creates a new logger .
7023	URLParts returns the parts of the request .
7024	URLPart returns the URL part of the request .
7025	StoreParam adds a parameter to the context .
7026	GetParam returns the Param with the given name .
7027	Int32 returns the value of the parameter .
7028	UInt returns the unsigned integer value .
7029	UInt32 returns a uint32 value .
7030	Float32 returns float32 as float32
7031	UploadFile uploads a file to the remote server
7032	RemoveRemoteFile removes remote file .
7033	GetRemoteFile returns the remote file .
7034	NewConn creates a new connection
7035	RemoteAddr returns the remote address .
7036	SendRequest sends a request to the server
7037	SendRequestArr sends a request to the server
7038	Close closes the connection .
7039	sendResponse sends a response
7040	send sends a message to the websocket .
7041	Receive sends a message to the websocket .
7042	setConn sets the connection to the websocket connection .
7043	startReceive starts the connection .
7044	NewPbo creates a PBO from a file .
7045	NewReadWriteCloser creates a new mock instance
7046	Read mocks base method
7047	Write implements io . WriteCloser interface .
7048	SafeRemoveSSH removes a file from the server .
7049	SafeCreateSSH creates a new ssh file .
7050	SafeCreate creates a new file .
7051	HMAC generates a new HMAC token .
7052	Scaffold creates a new router with the given platform .
7053	Route adds a pattern to the router .
7054	Group adds a pattern to the router .
7055	Platform adds a new route to the router .
7056	Handle implements the Router interface .
7057	Options adds a route to the router .
7058	Use adds middleware to the router
7059	NotFound adds a 404 handler to the router .
7060	AddHandlerBuilder adds a builder to the router .
7061	ServeErrorPage implements the http . Handler interface .
7062	GetErrorHandler returns the error handler for the given status code .
7063	SetErrorHandler sets the error handler
7064	SetErrorHandlerFunc sets the error handler for the given status code .
7065	Echo implements the Echo interface .
7066	UnmarshalBinary unmarshals a ConfigArgument .
7067	ataIdentify attempts to identify an ASA .
7068	atARead reads an ACA command from the given io . Reader .
7069	atAWrite implements io . Reader interface .
7070	calculateLBA calculates the lba value from rlba
7071	MarshalBinary returns a binary representation of the ReserveReleaseArg .
7072	UnmarshalBinary unmarshals a ReserveReleaseArg .
7073	MarshalBinary serializes an ATAArgument .
7074	New creates a new fixture .
7075	FromYAML loads a fixture from a database .
7076	FromJSON creates a fixture from a database .
7077	MarshalBinary serializes the directive .
7078	MarshalBinary implements the MACMask interface .
7079	NewSendToLogger returns a new Logger instance
7080	NewMulti returns a new MultiLogBackend .
7081	OutLog returns a Writer with the given level .
7082	PublishPort adds a port to the container
7083	Name sets the name of the run config .
7084	AddArgs adds args to the RunConfig
7085	NewCORSHandler returns a new CORBA instance
7086	CreatePreflight creates a list of routes for the given routes .
7087	ServeHTTP implements the http . Handler interface .
7088	Handle implements the Handler interface .
7089	NewRandomSourceListSecure returns a random source list .
7090	Handle implements the SyslogHandler interface .
7091	Close closes the writer .
7092	hasDatePrefix returns true if the string is a date prefix .
7093	Match returns the match string .
7094	Match matches the given string .
7095	MatchRune returns true if the given rune matches the given rune .
7096	Match returns the position of the given string .
7097	Alloc allocates a new DB .
7098	Free releases the pool .
7099	Infof log message
7100	Warningf logs a warning message .
7101	Errorf logs a message .
7102	Fatalf logs a message .
7103	ToPhone converts a string to a phone number
7104	ToURL converts a string to a URL
7105	ToSSN converts a string to a string
7106	ToMorseCode converts a string to a string
7107	ToPirateSpeak converts a string to a string
7108	ToIRSA converts a string to a string .
7109	newDefaultLogger returns a new logger
7110	Logf logs a level to the default logger .
7111	Section returns the list of sections .
7112	Options returns the options for the given section .
7113	OptionMap returns a map of options for the given section .
7114	Comments returns the comments for the given section .
7115	AddComment adds a comment to the config .
7116	Parse parses the given io . Reader .
7117	Write implements io . Writer interface .
7118	Get returns the value for the given section .
7119	Set sets the value of a section .
7120	Delete deletes an option
7121	Convert converts value to target type .
7122	Postpone is part of the cache item
7123	Filter returns a new LogBackend
7124	Op creates a new ruler .
7125	ApplyRuleIf returns a rule that applies the given condition .
7126	ApplyRuleIfElse returns a rule that applies the given rule .
7127	AuthHandler returns an http . Handler that can be used to authenticate the request .
7128	HasBin returns true if the Docker container exists .
7129	Run executes a command .
7130	GetReader gets the reader from the header .
7131	SetName sets the name of the header .
7132	SetValue sets the value of the HttpHeader field s value .
7133	SetWriter sets the Header field s value .
7134	encryptKey returns the key for the given entity .
7135	NewContentNegotiator returns a new ContentNegotiator instance
7136	NewJsonXmlContent returns a new ContentNegotiator
7137	Negotiate returns the content of the given request .
7138	AddEncoder adds an encoder to the given content type .
7139	getEncoder returns the encoder for the given request .
7140	CanSign implements the PublicKeyAlgorithm interface .
7141	ByWinnings returns a sorted list of players .
7142	WaitFunc returns true if the given interval is true .
7143	FormatDialAddress returns a string representation of NetworkNode .
7144	SetFromDocker sets the PortNode field s value .
7145	Read reads bytes from a random byte slice .
7146	readByte reads a random byte from the store .
7147	RecoverHandlerJson is a convenience function that wraps the http . json . json
7148	DefaultServiceConfig returns a default service config .
7149	NewService creates a new Service .
7150	RunLight runs a light .
7151	initConfig initializes the stack
7152	HasExposedPorts returns true if the container is enabled .
7153	Inspect inspects the container
7154	Kill the container
7155	NetworkNodes returns a list of network nodes .
7156	Remove removes the container from the container
7157	WaitStartup waits for the container and waits for it to wait until it is ready .
7158	NewHandler creates a new Handler .
7159	Handle implements the Handler interface .
7160	NewCounter returns a new Counter .
7161	Metrics returns a slice of Collector .
7162	Retrieve retrieves the files from the given sources .
7163	Compile compiles a source file into vfs .
7164	readBlockAt reads the file at the given offset .
7165	writeTo writes the file to the writer .
7166	Push pushes data to the stack
7167	Pop pops the stack from the stack .
7168	Peek returns the header of the stack .
7169	Return the header of the stack .
7170	IterateBackward implements the Stack interface .
7171	IterateForward implements the Stack interface .
7172	Close closes the stack .
7173	OpenStack creates a new Stack .
7174	NewStack creates a new Stack .
7175	NewSessionCache creates a new session cache .
7176	getInvalidTokenError returns an error if the token is invalid .
7177	Get retrieves a session from the cache .
7178	Add adds the token to the cache
7179	Delete deletes a session
7180	Set sets the value of a session
7181	NewClient creates a new client
7182	connect connects to the server
7183	Write a message to the IRC server .
7184	readMessage reads a message from the IRC server .
7185	Stop stops the client .
7186	GetChannels returns a list of channels .
7187	JsonWrite writes a response to w .
7188	JsonRead reads an object from the given body .
7189	VerifyKeySignature implements the PublicKey interface .
7190	NewUser creates a new user .
7191	Next implements the Handler interface .
7192	ServeHTTP implements the http . Handler interface .
7193	UseHandler sets the handler for the route .
7194	HandleMethod adds a method to the route .
7195	Handle adds a handler to the route .
7196	Get adds a route to the router .
7197	Post registers a POST request to the router .
7198	Put adds a route to the route .
7199	Patch adds a patch to the route .
7200	Delete registers a route .
7201	Options implements the Route interface .
7202	NewSalter returns a new salt .
7203	Boken generates a random salt
7204	Token returns a random string
7205	getRandomBytes returns random bytes from r .
7206	NewNewsItem creates a new news item
7207	Write implements the LogWriter interface .
7208	Write implements io . Writer interface .
7209	Write writes a warning to the log .
7210	Write implements the ErrorWriter interface .
7211	GetLogger returns a logger by name .
7212	RemoveLogger removes a named logger .
7213	WaitForUnprocessedRecords waits for all loggers .
7214	run starts the logger .
7215	WaitForUnprocessedRecords waits for unprocessed records .
7216	SetBufferLength sets the buffer length .
7217	AddHandler adds a handler to the logger .
7218	ClearHandlers clears all handlers .
7219	SetLevel sets the log level
7220	log implements the Logger interface .
7221	Logf logs a message at the given level .
7222	Log implements the Logger interface .
7223	Emergencyf log level
7224	Alertf logs an alert .
7225	Criticalf logs a message .
7226	Errorf logs an error .
7227	Warningf logs a warning .
7228	Noticef writes a message to the logger .
7229	Infof log message
7230	Debugf logs a message .
7231	SetHandler sets the handler for the entry
7232	SetMethodHandler sets the handler for the given method .
7233	GetHandler returns the handler for the given method .
7234	getChildEntry returns the entry at the given pat .
7235	MergePatterns merges the given list of patterns .
7236	AddEntry adds a new entry to the entry .
7237	addPatterns adds patterns to the entry .
7238	execPrefix returns the route for the given URL
7239	traverse traverses the entry and returns the route .
7240	getExecMatch returns a function that matches the given matcher
7241	MergeRoutes returns a slice of Routes .
7242	Debugln implements logger .
7243	Debugf logs a message .
7244	Probosef logs a message to the logger .
7245	Infoln implements logger .
7246	Infof logs a message .
7247	OKln implements the logger .
7248	Okf implements the logger .
7249	Fatalln implements the logger .
7250	Fatalf logs a message .
7251	ShouldDebug returns true if the logger is enabled .
7252	SetDebug sets the debug level of the logger .
7253	Gets the status of the logger .
7254	NewFacility creates a new logger .
7255	removeNonDigits removes all digits from the format .
7256	removeNonWordChars removes all non - word characters .
7257	urlEncodeSpaces adds spaces to the format .
7258	randomSelect returns a random int from an array
7259	NewStdFormatter returns a new StdFormatter .
7260	Get returns the middleware .
7261	parseMatcher parses a matcher .
7262	isMatchPattern returns true if the string is a match pattern .
7263	routeSplitFunc returns the route split function .
7264	SplitPath splits a string into a slice of routes .
7265	is next suffix pattern
7266	PeekNextPattern returns the next pattern in the slice .
7267	NewPlayer returns a new Player .
7268	Push adds a reader to the reader .
7269	NewCatering creates a new Catering .
7270	GroupByMonths returns a map of Tournaments for the given season .
7271	validateTournamentInfo validates the tournament info .
7272	NewTournament creates a new tournament .
7273	IndexOf returns the index of the given string .
7274	IndexOfIgnoreCase returns the index of the given string .
7275	NewCache returns a new Cache .
7276	Count returns the number of values in the cache .
7277	Flush the cache .
7278	removeExpired removes expired entries from cache .
7279	NewImage returns a new Image instance
7280	Exists checks if the image exists .
7281	Pull pulls the image
7282	Run runs the image .
7283	Setup initializes the image
7284	NewLocation creates a new location .
7285	PortAt returns the port at the given index .
7286	SplitPort returns the port at the given index .
7287	Priority returns the severity of the system .
7288	OK returns whether the system is OK
7289	Format formats a record .
7290	Open opens the database .
7291	Begin creates a new transaction .
7292	View executes a function in the database .
7293	CopyFile copies a file with the given mode .
7294	CreateBucketIfNotExists creates a bucket if it exists .
7295	Delete deletes the given key .
7296	ForEach iterates over all buckets in the bucket .
7297	ForEachGob iterates over all buckets in the given bucket .
7298	Put implements the Put interface .
7299	Value retrieves a value from the bucket .
7300	Update updates the value of a key .
7301	OpenBucket opens a bucket in the bucket .
7302	CreateBucketIfNotExists creates a bucket if it exists .
7303	Delete deletes a key from the bucket .
7304	 GobValue retrieves a value from the bucket .
7305	NextSequence returns the next sequence .
7306	Put implements the Bucket interface .
7307	PutGob writes a value to the bucket .
7308	Drop the database .
7309	HandleError implements the Handler interface .
7310	Handle implements the Writer interface .
7311	Handle implements the Handler interface .
7312	WaitPeerListening returns true if the given network is listening on the given network .
7313	NewEvent creates a new event
7314	Subscribe adds a handler to the bus .
7315	Unsubscribe removes a handler from the bus .
7316	Publish publishes an event .
7317	HandleOnly implements HandlerFunc .
7318	ContextWithPublisher adds a publisher to the context .
7319	PublisherContext returns the publisher .
7320	PublishNamedEvent publishes a named event body .
7321	PublishEventContext sends an event to the publisher .
7322	PublishNamedEvent sends a named event to the given context .
7323	String returns the string representation of the given level .
7324	UnmarshalJSON unmarshals a JSON level .
