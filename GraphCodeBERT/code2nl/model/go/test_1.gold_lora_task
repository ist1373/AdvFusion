0	NewSTM initiates a new STM instance using serializable snapshot isolation by default .
1	first returns the store revision from the first fetch
2	cmps returns a cmp list testing no writes have happened past rev
3	NewSTMRepeatable is deprecated .
4	NewSTMSerializable is deprecated .
5	NewSTMReadCommitted is deprecated .
6	NewCertPool creates x509 certPool with provided CA files .
7	NewCert generates TLS cert by using the given cert key and parse function .
8	Pause pauses the peer . The peer will simply drops all incoming messages without returning an error .
9	Resume resumes a paused peer .
10	pick picks a chan for sending the given message . The picked chan and the picked chan string name are returned .
11	post posts the given request . It returns nil when request is sent out and processed successfully .
12	newTxnResp allocates a txn response for a txn request given a path .
13	applyCompare applies the compare request . If the comparison succeeds it returns true . Otherwise returns false .
14	OpCompact wraps slice CompactOption to create a CompactOp .
15	NewPriorityQueue creates an etcd priority queue .
16	Enqueue puts a value into a queue with a given priority .
17	NewLeaderStats generates a new LeaderStats with the given id as leader
18	Succ updates the FollowerStats with a successful send
19	Fail updates the FollowerStats with an unsuccessful send
20	delete removes a watcher and returns the number of remaining watchers .
21	startStreamWriter creates a streamWrite and starts a long running go - routine that accepts messages and writes to the attached outgoing connection .
22	checkStreamSupport checks whether the stream type is supported in the given version .
23	maybeUpdate returns false if the given n index comes from an outdated message . Otherwise it updates the progress and returns true .
24	IsPaused returns whether sending log entries to this node has been paused . A node may be paused because it has rejected recent MsgApps is currently waiting for a snapshot or has reached the MaxInflightMsgs limit .
25	needSnapshotAbort returns true if snapshot progress s Match is equal or higher than the pendingSnapshot .
26	add adds an inflight into inflights
27	grow the inflight buffer by doubling up to inflights . size . We grow on demand instead of preallocating to inflights . size to handle systems which have thousands of Raft groups per process .
28	freeTo frees the inflights smaller or equal to the given to flight .
29	SaveDBFrom saves snapshot of the database from the given reader . It guarantees the save operation is atomic .
30	DBFilePath returns the file path for the snapshot of the database with given id . If the snapshot does not exist it returns error .
31	Set parses a command line set of strings separated by comma . Implements flag . Value interface . The values are set in order .
32	NewUniqueStringsValue implements string slice as flag . Value interface . Given value is to be separated by comma . The values are set in order .
33	UniqueStringsFromFlag returns a string slice from the flag .
34	UniqueStringsMapFromFlag returns a map of strings from the flag .
35	Percentiles returns percentile distribution of float64 slice .
36	VerifyBootstrap sanity - checks the initial config for bootstrap case and returns an error for things that should never happen .
37	VerifyJoinExisting sanity - checks the initial config for join existing cluster case and returns an error for things that should never happen .
38	hasLocalMember checks that the cluster at least contains the local server .
39	advertiseMatchesCluster confirms peer URLs match those in the cluster peer list .
40	ReqTimeout returns timeout for request to finish .
41	getStatus gets a copy of the current raft status .
42	GetDefaultHost obtains the first IP address of machine from the routing table and returns the IP address as string . An IPv4 address is preferred to an IPv6 address for backward compatibility .
43	Used to get an address of interface .
44	Used to get a name of interface .
45	lsCommandFunc executes the ls command .
46	printLs writes a response out in a manner similar to the ls command in unix . Non - empty directories list their contents and files list their name .
47	rPrint recursively prints out the nodes in the node structure .
48	NewLeaseRenewerCommand returns the cobra command for lease - renewer runner .
49	Read reads the snapshot named by snapname and returns the snapshot .
50	GetCipherSuite returns the corresponding cipher suite and boolean value if it is supported .
51	post POSTs a data payload to a url . Returns nil if the POST succeeds error on any failure .
52	send persists state to stable storage and then sends to its mailbox .
53	sendHeartbeat sends a heartbeat RPC to the given peer .
54	bcastAppend sends RPC with entries to all peers that are not up - to - date according to the progress recorded in r . prs .
55	bcastHeartbeat sends RPC without entries to all the peers .
56	tickElection is run by followers and candidates after r . electionTimeout .
57	tickHeartbeat is run by leaders to send a MsgBeat after r . heartbeatTimeout .
58	stepCandidate is shared by StateCandidate and StatePreCandidate ; the difference is whether they respond to MsgVoteResp or MsgPreVoteResp .
59	restore recovers the state machine from a snapshot . It restores the log and the configuration of state machine .
60	promotable indicates whether state machine can be promoted to leader which is true when its own id is in progress list .
61	checkQuorumActive returns true if the quorum is active from the view of the local raft state machine . Otherwise it returns false . checkQuorumActive also resets all RecentActive to false .
62	increaseUncommittedSize computes the size of the proposed entries and determines whether they would push leader over its maxUncommittedSize limit . If the new entries would exceed the limit the method returns false . If not the increase in uncommitted entry size is recorded and the method returns true .
63	reduceUncommittedSize accounts for the newly committed entries by decreasing the uncommitted entry size limit .
64	newPeriodic creates a new instance of Periodic compactor that purges the log older than h Duration .
65	Pause pauses periodic compactor .
66	Resume resumes periodic compactor .
67	Lock locks the mutex with a cancelable context . If the context is canceled while trying to acquire the lock the mutex tries to clean its stale lock entry .
68	NewLocker creates a sync . Locker backed by an etcd mutex .
69	NewFIFOScheduler returns a Scheduler that schedules jobs in FIFO order sequentially
70	Schedule schedules a job that will be ran in FIFO order sequentially .
71	Stop stops the scheduler and cancels all pending jobs .
72	NewServer returns a new agent server .
73	StartServe starts serving agent server .
74	Stop stops serving gRPC server .
75	Transport communicates with etcd tester .
76	RegisterInterruptHandler registers a new InterruptHandler . Handlers registered after interrupt handing was initiated will not be executed .
77	HandleInterrupts calls the handler functions on receiving a SIGINT or SIGTERM .
78	OpGet returns get operation based on given key and operation options .
79	OpDelete returns delete operation based on given key and operation options .
80	OpPut returns put operation based on given key - value and operation options .
81	OpTxn returns txn operation based on given transaction conditions .
82	WithFromKey specifies the range of Get Delete Watch requests to be equal or greater than the key in the argument .
83	withTop gets the first key over the get s prefix given a sort order
84	Exist returns true if there are any files in a given directory .
85	searchIndex returns the last array index of names whose raft index section is equal to or smaller than the given index . The given names MUST be sorted .
86	names should have been sorted based on sequence number . isValidSeq checks whether seq increases continuously .
87	NewListener creates a new listner .
88	cafiles returns a list of CA file paths .
89	ServerConfig generates a tls . Config object for use by an HTTP server .
90	ClientConfig generates a tls . Config object for use by an HTTP client .
91	NewListener creates a Listener which accepts connections from an inner Listener and wraps each connection with Server . The configuration config must be non - nil and must have at least one certificate .
92	applyV2Request interprets r as a call to v2store . X and returns a Response interpreted from v2store . Event
93	NewRoleCommand returns the cobra command for role .
94	roleAddCommandFunc executes the role add command .
95	roleGetCommandFunc executes the role get command .
96	roleGrantPermissionCommandFunc executes the role grant - permission command .
97	roleRevokePermissionCommandFunc executes the role revoke - permission command .
98	NewCluster returns an unlaunched cluster of the given size which has been set to use static bootstrap .
99	NewClusterByConfig returns an unlaunched cluster defined by a cluster configuration
100	HTTPMembers returns a list of all active members as client . Members
101	waitLeader waits until given members agree on the same leader .
102	waitNoLeader waits until given members lose leader .
103	isMembersEqual checks whether two members equal except ID field . The given wmembs should always set ID field to empty string .
104	listenGRPC starts a grpc server over a unix domain socket on the member
105	NewClientV3 creates a new grpc client connection to the member
106	Clone returns a member with the same server configuration . The returned member will not set PeerListeners and ClientListeners .
107	Close stops the member s etcdserver and closes its connections
108	Stop stops the member but the data dir of the member is preserved .
109	checkLeaderTransition waits for leader transition returning the new leader ID .
110	Restart starts the member using the preserved data dir .
111	Terminate stops the member and removes the data dir .
112	Metric gets the metric value for a member
113	InjectPartition drops connections from m to others vice versa .
114	RecoverPartition recovers connections from m to others vice versa .
115	NewClusterV3 returns a launched cluster with a grpc client connection for each cluster member .
116	ParseWithDefaults will load options from the specified map or set defaults where appropriate
117	Parse will load options from the specified map
118	Key will parse and return the appropriately typed key for the selected signature method
119	fill populates pb . ResponseHeader using etcdserver information
120	add puts a watcher into receiving a broadcast if its revision at least meets the broadcast revision . Returns true if added .
121	Watch creates a new watcher in the stream and returns its WatchID .
122	newFileEncoder creates a new encoder with current file offset for the page writer .
123	purgeFile is the internal implementation for PurgeFile which can post purged files to purgec if non - nil .
124	Set parses a command line set of strings separated by comma . Implements flag . Value interface .
125	NewStringsValue implements string slice as flag . Value interface . Given value is to be separated by comma .
126	StringsFromFlag returns a string slice from the flag .
127	Cluster only keeps the major . minor .
128	NewPageWriter creates a new PageWriter . pageBytes is the number of bytes to write per page . pageOffset is the starting offset of io . Writer .
129	Watch function returns a Watcher . If recursive is true the first change after index under key will be sent to the event channel of the watcher . If recursive is false the first change after index at key will be sent to the event channel of the watcher . If index is zero watch will start from the current index + 1 .
130	notify function accepts an event and notify to the watchers .
131	clone function clones the watcherHub and return the cloned one . only clone the static content . do not clone the current watchers .
132	isHidden checks to see if key path is considered hidden to watch path i . e . the last element is hidden or it s within a hidden directory
133	just archive the first file
134	start but do not wait for it to complete
135	SIGQUIT to exit with stackstrace
136	stop proxy etcd delete data directory
137	LimitListener returns a Listener that accepts at most n simultaneous connections from the provided Listener .
138	allowMethod verifies that the given method is one of the allowed methods and if not it writes an error to w . A boolean is returned indicating whether or not the method is allowed .
139	NewWatchServer returns a new watch server .
140	FiltersFromRequest returns mvcc . FilterFunc from a given watch create request .
141	newPipelineHandler returns a handler for handling raft messages from pipeline for RaftPrefix . The handler reads out the raft message from request body and forwards it to the given raft state machine for processing .
142	checkClusterCompatibilityFromHeader checks the cluster compatibility of the local member from the given header . It checks whether the version of local member is compatible with the versions in the header and whether the cluster ID of local member matches the one in the header .
143	KeyExists returns a comparison operation that evaluates to true iff the given key exists . It does this by checking if the key Version is greater than 0 . It is a useful guard in transaction delete operations .
144	KeyMissing returns a comparison operation that evaluates to true iff the given key does not exist .
145	ValidateSecureEndpoints scans the given endpoints against tls info returning only those endpoints that could be validated as secure .
146	putNewKV attempts to create the given key only succeeding if the key did not yet exist .
147	newUniqueEphemeralKey creates a new unique valueless key associated with a session lease
148	NewUpdateDirCommand returns the CLI command for updatedir .
149	updatedirCommandFunc executes the updatedir command .
150	handleBackup handles a request that intends to do a backup .
151	saveDB copies the v3 backend and strips cluster information .
152	NewWatchCommand returns the cobra command for watcher runner .
153	NewV3 returns a new snapshot Manager for v3 . x snapshot .
154	Save fetches snapshot from remote etcd server and saves data to target path .
155	Status returns the snapshot file information .
156	Restore restores a new etcd data directory from given snapshot file .
157	NewAuthStore creates a new AuthStore .
158	NewTokenProvider creates a new token provider .
159	MendPeer recovers the message dropping behavior of the given peer .
160	the caller of this function must have the peers mutex .
161	ActivePeers returns a channel that closes when an initial peer connection has been established . Use this to wait until the first peer connection becomes active .
162	taken from go s ResolveTCP code but uses configurable ctx
163	resolveTCPAddrs is a convenience wrapper for net . ResolveTCPAddr . resolveTCPAddrs return a new set of url . URLs in which all DNS hostnames are resolved .
164	urlsEqual checks equality of url . URLS between two arrays . This check pass even if an URL is in hostname and opposite is in IP address .
165	URLStringsEqual returns true if given URLs are valid and resolved to same IP addresses . Otherwise return false and error if any .
166	NewLeaseCommand returns the cobra command for lease .
167	NewLeaseGrantCommand returns the cobra command for lease grant .
168	leaseGrantCommandFunc executes the lease grant command .
169	NewLeaseRevokeCommand returns the cobra command for lease revoke .
170	leaseRevokeCommandFunc executes the lease grant command .
171	NewLeaseTimeToLiveCommand returns the cobra command for lease timetolive .
172	leaseTimeToLiveCommandFunc executes the lease timetolive command .
173	NewLeaseListCommand returns the cobra command for lease list .
174	leaseListCommandFunc executes the lease list command .
175	NewLeaseKeepAliveCommand returns the cobra command for lease keep - alive .
176	leaseKeepAliveCommandFunc executes the lease keep - alive command .
177	NewAlarmCommand returns the cobra command for alarm .
178	alarmDisarmCommandFunc executes the alarm disarm command .
179	alarmListCommandFunc executes the alarm list command .
180	Flags returns etcd flags in string slice .
181	EmbedConfig returns etcd embed . Config .
182	PProfHandlers returns a map of pprof handlers keyed by the HTTP path .
183	NewBackendQuota creates a quota layer with the given storage limit .
184	NewClusterProxy takes optional prefix to fetch grpc - proxy member endpoints . The returned channel is closed when there is grpc - proxy endpoint registered and the client s context is canceled so the register loop returns .
185	NewHandler returns an http Handler for lease renewals
186	TimeToLiveHTTP retrieves lease information of the given lease ID .
187	newWatcherBatch maps watchers to their matched events . It enables quick events look up by watcher .
188	add puts a watcher in the group .
189	contains is whether the given key has a watcher in the group .
190	delete removes a watcher from the group .
191	choose selects watchers from the watcher group to update
192	watcherSetByKey gets the set of watchers that receive events on the given key .
193	Compare on an interval gives == if the interval overlaps .
194	successor is the next in - order node in the tree
195	updateMax updates the maximum values for a node and its ancestors
196	visit will call a node visitor on each node that overlaps the given interval
197	Delete removes the node with the given interval from the tree returning true if a node is in fact removed .
198	Insert adds a node with the given interval into the tree .
199	rotateLeft moves x so it is left of its right child
200	replaceParent replaces x s parent with y
201	MaxHeight is the expected maximum tree height given the number of nodes
202	Visit calls a visitor function on every tree node intersecting the given interval . It will visit each interval [ x y ) in ascending order sorted on x .
203	find the exact node for a given interval
204	Find gets the IntervalValue for the node matching the given interval
205	Intersects returns true if there is some tree node intersecting the given interval .
206	Contains returns true if the interval tree s keys cover the entire given interval .
207	Stab returns a slice with all elements in the tree intersecting the interval .
208	Union merges a given interval tree into the receiver .
209	NewExactReadCloser returns a ReadCloser that returns errors if the underlying reader does not read back exactly the requested number of bytes .
210	NewElection returns a new election on a given key prefix .
211	ResumeElection initializes an election with a known leader .
212	Proclaim lets the leader announce a new value without another election .
213	Resign lets a leader start a new election .
214	Leader returns the leader value for the current election .
215	Observe returns a channel that reliably observes ordered leader proposals as GetResponse values on every current elected leader key . It will not necessarily fetch all historical leader updates but will always post the most recent leader value . The channel closes when the context is canceled or the underlying watcher is otherwise disrupted .
216	check whether request satisfies the quota . If there is not enough space ignore request and raise the free space alarm .
217	NewExecWatchCommand returns the CLI command for exec - watch .
218	execWatchCommandFunc executes the exec - watch command .
219	NewListener returns a listener for raft message transfer between peers . It uses timeout listener to identify broken streams promptly .
220	NewRoundTripper returns a roundTripper used to send requests to rafthttp listener of remote peers .
221	createPostRequest creates a HTTP POST request that sends raft message .
222	checkPostResponse checks the response of the HTTP POST request that sends raft message .
223	serverVersion returns the server version from the given header .
224	checkVersionCompatibility checks whether the given version is compatible with the local version .
225	setPeerURLsHeader reports local urls for peer discovery
226	addRemoteFromRequest adds a remote peer according to an http request header
227	NewKeysAPIWithPrefix acts like NewKeysAPI but allows the caller to provide a custom base URL path . This should only be used in very rare cases .
228	TTLDuration returns the Node s TTL as a time . Duration object
229	SetPflagsFromEnv is similar to SetFlagsFromEnv . However the accepted flagset type is pflag . FlagSet and it does not do any logging .
230	FlagToEnv converts flag string to upper - case environment variable key string .
231	excerpt replaces middle part with ellipsis and returns a double - quoted string safely escaped with Go syntax .
232	The 9 pass functions below takes the raftpb . Entry and return if the entry should be printed and the type of entry the type of the entry will used in the following print function
233	The 4 print functions below print the entry format based on there types printInternalRaftRequest is used to print entry information for IRRRange IRRPut IRRDeleteRange and IRRTxn entries
234	listEntriesType filters and prints entries based on the entry - type flag
235	newLog returns log using the given storage and default options . It recovers the log to the state that it just commits and applies the latest snapshot .
236	newLogWithSize returns a log using the given storage and max message size .
237	findConflict finds the index of the conflict . It returns the first pair of conflicting entries between the existing entries and the given entries if there are any . If there is no conflicting entries and the existing entries contains all the given entries zero will be returned . If there is no conflicting entries but the given entries contains new entries the index of the first new entry will be returned . An entry is considered to be conflicting if it has the same index but a different term . The first entry MUST have an index equal to the argument from . The index of the given entries MUST be continuously increasing .
238	nextEnts returns all the available entries for execution . If applied is smaller than the index of snapshot it returns all committed entries after the index of snapshot .
239	allEntries returns all entries in the log .
240	slice returns a slice of log entries from lo through hi - 1 inclusive .
241	NewSession gets the leased session for a client .
242	Close orphans the session and revokes the session lease .
243	WithTTL configures the session s TTL in seconds . If TTL is < = 0 the default 60 seconds TTL will be used .
244	WithLease specifies the existing leaseID to be used for the session . This is useful in process restart scenario for example to reclaim leadership from an election prior to restart .
245	addRequest adds a read only reuqest into readonly struct . index is the commit index of the raft state machine when it received the read only request . m is the original read only request message from the local or remote node .
246	recvAck notifies the readonly struct that the raft state machine received an acknowledgment of the heartbeat that attached with the read only request context .
247	advance advances the read only request queue kept by the readonly struct . It dequeues the requests until it finds the read only request that has the same context as the given m .
248	lastPendingRequestCtx returns the context of the last pending read only request in readonly struct .
249	Start performs any initialization of the Server necessary for it to begin serving requests . It must be called before Do or Process . Start must be non - blocking ; any long - running server functionality should be implemented in goroutines .
250	start prepares and starts server in a new goroutine . It is no longer safe to modify a server s fields after it has been sent to Start . This function is just used for testing .
251	Process takes a raft message and applies it to the server s raft state machine respecting any timeout of the given context .
252	ReportSnapshot reports snapshot sent status to the raft state machine and clears the used snapshot from the snapshot store .
253	MoveLeader transfers the leader to the given transferee .
254	TransferLeadership transfers the leader to the chosen transferee .
255	configure sends a configuration change through consensus and then waits for it to be applied to the server . It will block until the change is performed or there is an error .
256	sync proposes a SYNC request and is non - blocking . This makes no guarantee that the request will be proposed or performed . The request will be canceled after the given timeout .
257	publish registers server information into the cluster . The information is the JSON representation of this server s member struct updated with the static clientURLs of the server . The function keeps attempting to register until it succeeds or its server is stopped .
258	applyEntryNormal apples an EntryNormal type raftpb request to the EtcdServer
259	applyConfChange applies a ConfChange to the server . It is only invoked with a ConfChange that has already passed through Raft
260	monitorVersions checks the member s version every monitorVersionInterval . It updates the cluster version if all members agrees on a higher one . It prints out log if there is a member with a higher version than the local version .
261	goAttach creates a goroutine on a given function and tracks it using the etcdserver waitgroup .
262	NewRoundrobinBalanced returns a new roundrobin balanced picker .
263	Pick is called for every client request .
264	NewTLSListener handshakes TLS connections and performs optional CRL checking .
265	acceptLoop launches each TLS handshake in a separate goroutine to prevent a hanging TLS connection from blocking other connections .
266	SetEndpoints updates the endpoints for ResolverGroup . All registered resolver are updated immediately with the new endpoints .
267	Target constructs a endpoint target using the endpoint id of the ResolverGroup .
268	Target constructs a endpoint resolver target .
269	Build creates or reuses an etcd resolver for the etcd cluster name identified by the authority part of the target .
270	Handle interprets r and performs an operation on s . store according to r . Method and other fields . If r . Method is POST PUT DELETE or a GET with Quorum == true r will be sent through consensus before performing its respective operation . Do will block until an action is performed or there is an error .
271	NewElectionCommand returns the cobra command for election runner .
272	nodeToMember builds member from a key value node . the child nodes of the given node MUST be sorted by key .
273	NewTmpBackend creates a backend implementation for testing .
274	newRevision creates a new instance of Revisonal compactor that purges the log older than retention revisions from the current revision .
275	Run runs revision - based compactor .
276	Pause pauses revision - based compactor .
277	Resume resumes revision - based compactor .
278	voteResponseType maps vote and prevote message types to their corresponding responses .
279	DescribeMessage returns a concise human - readable description of a Message for debugging .
280	DescribeEntry returns a concise human - readable description of an Entry for debugging .
281	DescribeEntries calls DescribeEntry for each Entry adding a newline to each .
282	SetLogger sets client - side Logger .
283	GetLogger returns the current logutil . Logger .
284	maybeFirstIndex returns the index of the first possible entry in entries if it has a snapshot .
285	maybeLastIndex returns the last index if it has at least one unstable entry or snapshot .
286	maybeTerm returns the term of the entry at index i if there is any .
287	shrinkEntriesArray discards the underlying array used by the entries slice if most of it isn t being used . This avoids holding references to a bunch of potentially large entries that aren t needed anymore . Simply clearing the entries wouldn t be safe because clients might still be using them .
288	SaveSnap saves the snapshot to disk and release the locked wal files since they will not be used .
289	New creates a new etcdv3 client from a given configuration .
290	NewCtxClient creates a client with a context but no underlying grpc connection . This is useful for embedded cases that override the service interface implementations and do not need connection management .
291	NewFromURL creates a new etcdv3 client from a URL .
292	Close shuts down the client s etcd connections .
293	Endpoints lists the registered endpoints for the client .
294	SetEndpoints updates client s endpoints .
295	Sync synchronizes client s endpoints with the known endpoints from the etcd membership .
296	dialSetupOpts gives the dial opts prior to any authentication .
297	Dial connects to a single endpoint using the client s config .
298	dialWithBalancer dials the client s current load balanced resolver group . The scheme of the host of the provided endpoint determines the scheme used for all endpoints of the client connection .
299	dial configures and dials any grpc balancer target .
300	WithRequireLeader requires client requests to only succeed when the cluster has a leader .
301	roundRobinQuorumBackoff retries against quorum between each backoff . This is intended for use with a round robin load balancer .
302	isHaltErr returns true if the given error and context indicate no forward progress can be made even after reconnecting .
303	NewLease wraps a Lease interface to filter for only keys with a prefix and remove that prefix when fetching attached keys through TimeToLive .
304	IsCreate returns true if the event tells that the key is newly created .
305	Err is the error value if this WatchResponse holds an error .
306	IsProgressNotify returns true if the WatchResponse is progress notification .
307	RequestProgress requests a progress notify response be sent in all watch channels .
308	nextResume chooses the next resuming to register with the grpc stream . Abandoned streams are marked as nil in the queue since the head must wait for its inflight registration .
309	dispatchEvent sends a WatchResponse to the appropriate watcher stream
310	broadcastResponse send a watch response to all watch substreams .
311	unicastResponse sends a watch response to a specific watch substream .
312	joinSubstreams waits for all substream goroutines to complete .
313	toPB converts an internal watch request structure to its protobuf WatchRequest structure .
314	toPB converts an internal progress request structure to its protobuf WatchRequest structure .
315	Contains returns whether the set contains the given value
316	ContainsAll returns whether the set contains all given values
317	Equals returns whether the contents of two sets are identical
318	Values returns the values of the Set in an unspecified order .
319	Copy creates a new Set containing the values of the first
320	Sub removes all elements in other from the set
321	v2MembersURL add the necessary path to the provided endpoint to route requests to the default v2 members API .
322	NewMigrateCommand returns the cobra command for migrate .
323	publishEntries writes committed log entries to commit channel and returns whether all entries could be published .
324	openWAL returns a WAL ready for reading .
325	replayWAL replays WAL entries into the raft instance .
326	stop closes http closes all channels and stops raft .
327	NewWatchCommand returns the cobra command for watch .
328	InitialState implements the Storage interface .
329	SetHardState saves the current HardState .
330	Entries implements the Storage interface .
331	Term implements the Storage interface .
332	LastIndex implements the Storage interface .
333	FirstIndex implements the Storage interface .
334	Snapshot implements the Storage interface .
335	ApplySnapshot overwrites the contents of this Storage object with those of the given snapshot .
336	Compact discards all log entries prior to compactIndex . It is the application s responsibility to not attempt to compact an index greater than raftLog . applied .
337	unreachable notices the picker that the given url is unreachable and it should use other possible urls .
338	NewEndpointCommand returns the cobra command for endpoint .
339	epHealthCommandFunc executes the endpoint - health command .
340	NewElectCommand returns the cobra command for elect .
341	NewDefragCommand returns the cobra command for Defrag .
342	RegisterBuilder creates and registers a builder . Since this function calls balancer . Register it must be invoked at initialization time .
343	Build is called initially when creating ccBalancerWrapper . grpc . Dial is called to this client connection . Then resolved addresses will be handled via HandleResolvedAddrs .
344	recordTransition records state change happening in every subConn and based on that it evaluates what aggregated state should be . It can only transition between Ready Connecting and TransientFailure . Other states Idle and Shutdown are transitioned into by ClientConn ; in the beginning of the connection before any subConn is created ClientConn is in idle state . In the end when ClientConn closes it is in Shutdown state . recordTransition should only be called synchronously from the same goroutine .
345	doSerialize handles the auth logic with permissions checked by chk for a serialized request get . Returns a non - nil error on authentication failure .
346	send filters out repeated events by discarding revisions older than the last one sent over the watch channel .
347	post puts a watch response on the watcher s proxy stream channel
348	OriginAllowed determines whether the server will allow a given CORS origin . If CORS is empty allow all .
349	IsHostWhitelisted returns true if the host is whitelisted . If whitelist is empty allow all .
350	Valids returns the list of valid strings .
351	NewSelectiveStringsValue creates a new string slice flag for which any one of the given strings is a valid value and any other value is an error .
352	NewKV wraps a KV instance so that all requests are prefixed with a given string .
353	NewURLsValue implements url . URL slice as flag . Value interface . Given value is to be separated by comma .
354	URLsFromFlag returns a slices from url got from the flag .
355	configure peer handlers after rafthttp . Transport started
356	NewStore returns a new store . It is useful to create a store inside mvcc pkg . It should only be used for testing externally .
357	appendMarkTombstone appends tombstone mark to normal revision bytes .
358	IsDirWriteable checks if dir is writable by writing and removing a file to dir . It returns nil if dir is writable .
359	TouchDirAll is similar to os . MkdirAll . It creates directories with 0700 permission if any directory does not exists . TouchDirAll also ensures the given directory is writable .
360	CreateDirAll is similar to TouchDirAll but returns error if the deepest directory was not empty .
361	ZeroToEnd zeros a file starting from SEEK_CUR to its SEEK_END . May temporarily shorten the length of the file .
362	Open returns a fresh file for writing . Rename the file before calling Open again or there will be file collisions .
363	NewRaftLoggerFromZapCore creates raft . Logger from zap . Core and zapcore . WriteSyncer .
364	NewConfig creates a new clientv3 . Config from a yaml file .
365	RegisterElectionHandler registers the http handlers for service Election to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the enabledMap when the cluster version increases .
367	NewLockCommand returns the cobra command for lock .
368	raft . Node does not have locks in Raft package
369	advanceTicks advances ticks of Raft node . This can be used for fast - forwarding election ticks in multi data - center deployments thus speeding up election process .
370	NewAuthCommand returns the cobra command for auth .
371	authEnableCommandFunc executes the auth enable command .
372	authDisableCommandFunc executes the auth disable command .
373	RetryKVClient implements a KVClient .
374	RetryLeaseClient implements a LeaseClient .
375	RetryClusterClient implements a ClusterClient .
376	RetryMaintenanceClient implements a Maintenance .
377	RetryAuthClient implements a AuthClient .
378	NewSetDirCommand returns the CLI command for setDir .
379	Enter waits for count processes to enter the barrier then returns
380	Leave waits for count processes to leave the barrier then returns
381	HandleBasic adds handlers to a mux for serving JSON etcd client requests that do not access the v2 store .
382	WriteError logs and writes the given Error to the ResponseWriter If Error is an etcdErr it is rendered to the ResponseWriter Otherwise it is assumed to be a StatusInternalServerError
383	MemberByName returns a Member with the given name if exists . If more than one member has the given name it will panic .
384	PeerURLs returns a list of all peer addresses . The returned list is sorted in ascending lexicographical order .
385	ValidateConfigurationChange takes a proposed ConfChange and ensures that it is still valid .
386	AddMember adds a new Member into the cluster and saves the given member s raftAttributes into the store . The given member should have empty attributes . A Member with a matching id must not exist .
387	RemoveMember removes a member from the store . The given id MUST exist or the function panics .
388	ValidateClusterAndAssignIDs validates the local cluster by matching the PeerURLs with the existing cluster . If the validation succeeds it assigns the IDs from the existing cluster to the local cluster . If the validation fails an error will be returned .
389	Keep finds all revisions to be kept for a Compaction at the given rev .
390	closeRequireLeader scans keepAlives for ctxs that have require leader and closes the associated channels .
391	resetRecv opens a new lease stream and starts sending keep alive requests .
392	recvKeepAlive updates a lease based on its LeaseKeepAliveResponse
393	deadlineLoop reaps any keep alive channels that have not received a response within the lease TTL
394	sendKeepAliveLoop sends keep alive requests for the lifetime of the given stream .
395	NewKV wraps a KV instance so that all requests are wired through a leasing protocol .
396	rescind releases a lease from this client .
397	LeaseValue compares a key s LeaseID to a value of your choosing . The empty LeaseID is 0 otherwise known as NoLease .
398	ValueBytes returns the byte slice holding the comparison value if any .
399	WithRange sets the comparison to scan the range [ key end ) .
400	WithPrefix sets the comparison to scan all keys prefixed by the key .
401	mustInt64 panics if val isn t an int or int64 . It returns an int64 otherwise .
402	mustInt64orLeaseID panics if val isn t a LeaseID int or int64 . It returns an int64 otherwise .
403	Next gets the next set of updates from the etcd resolver . Calls to Next should be serialized ; concurrent calls are not safe since there is no way to reconcile the update ordering .
404	use stderr as fallback
405	newKV creates a Key - Value pair
406	newDir creates a directory
407	Read function gets the value of the node . If the receiver node is not a key - value pair a Not A File error will be returned .
408	Write function set the value of the node to the given value . If the receiver node is a directory a Not A File error will be returned .
409	List function return a slice of nodes under the receiver node . If the receiver node is not a directory a Not A Directory error will be returned .
410	GetChild function returns the child node under the directory node . On success it returns the file node
411	Add function adds a node to the receiver node . If the receiver is not a directory a Not A Directory error will be returned . If there is an existing node with the same name under the directory a Already Exist error will be returned
412	Remove function remove the node .
413	Compare function compares node index and value with provided ones . second result value explains result and equals to one of Compare .. constants
414	Clone function clone the node recursively and return the new node . If the node is a directory it will clone all the content under this directory . If the node is a key - value pair it will clone the pair .
415	isConnectedToQuorumSince checks whether the local member is connected to the quorum of the cluster since the given time .
416	isConnectedSince checks whether the local member is connected to the remote member since the given time .
417	numConnectedSince counts how many members are connected to the local member since the given time .
418	longestConnected chooses the member with longest active - since - time . It returns false if nothing is active .
419	isTornEntry determines whether the last entry of the WAL was partially written and corrupted because of a torn write .
420	StartMockServersOnNetwork creates mock servers on either tcp or unix sockets .
421	StartAt restarts mock server at given index .
422	StopAt stops mock server at given index .
423	Stop stops the mock server immediately closing all open connections and listeners .
424	NewCheckCommand returns the cobra command for check .
425	NewCheckPerfCommand returns the cobra command for check perf .
426	NewCheckDatascaleCommand returns the cobra command for check datascale .
427	NewGetCommand returns the cobra command for get .
428	NewGetCommand returns the CLI command for get .
429	PickPeerURL chooses a random address from a given Member s PeerURLs . It will panic if there is no PeerURLs available in Member .
430	HandleMetricsHealth registers metrics and health handlers .
431	NewRemoveCommand returns the CLI command for rm .
432	rmCommandFunc executes the rm command .
433	checkIntervals tests whether puts and deletes overlap for a list of ops . If there is an overlap returns an error . If no overlap return put and delete sets for recursive evaluation .
434	ReportEventReceived reports that an event is received . This function should be called when the external systems received an event from mvcc . Watcher .
435	RegisterKVHandler registers the http handlers for service KV to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service Watch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd runs StartEtcd in addition to hooks needed for standalone etcd .
442	identifyDataDirOrDie returns the type of the data dir . Dies if the datadir is invalid .
443	openLast opens the last wal file for read and write .
444	gotLeader will force update the leadership status to having a leader .
445	lostNotify returns a channel that is closed if there has been a leader loss not yet followed by a leader reacquire .
446	newGRPCProxyCommand returns the cobra command for grpc - proxy .
447	NewMemberCommand returns the cobra command for member .
448	NewMemberAddCommand returns the cobra command for member add .
449	NewMemberRemoveCommand returns the cobra command for member remove .
450	NewMemberUpdateCommand returns the cobra command for member update .
451	NewMemberListCommand returns the cobra command for member list .
452	memberAddCommandFunc executes the member add command .
453	memberRemoveCommandFunc executes the member remove command .
454	memberUpdateCommandFunc executes the member update command .
455	memberListCommandFunc executes the member list command .
456	Open opens the WAL at the given snap . The snap SHOULD have been previously saved to the WAL or the following ReadAll will fail . The returned WAL is ready to read and the first record will be the one after the given snap . The WAL cannot be appended to before reading out all of its previous records .
457	OpenForRead only opens the wal files for read . Write on a read only wal panics .
458	Verify reads through the given WAL and verifies that it is not corrupted . It creates a new decoder to read through the records of the given WAL . It does not conflict with any open WAL but it is recommended not to call this function after opening the WAL for writing . If it cannot read out the expected snap it will return ErrSnapshotNotFound . If the loaded snap doesn t match with the expected one it will return error ErrSnapshotMismatch .
459	Close closes the current WAL file and directory .
460	notify function notifies the watcher . If the watcher interests in the given path the function will return true .
461	Remove removes the watcher from watcherHub The actual remove function is guaranteed to only be executed once
462	mkPathDepth makes a path to a key that encodes its directory depth for fast directory listing . If a depth is provided it is added to the computed depth .
463	mkV2Node creates a V2 NodeExtern from a V3 KeyValue
464	prevKeyFromPuts gets the prev key that is being put ; ignores the put action response .
465	NewWeightedReport returns a report that includes both weighted and unweighted statistics .
466	NewURLsMapFromStringMap takes a map of strings and returns a URLsMap . The string values in the map can be multiple values separated by the sep string .
467	String turns URLsMap into discovery - formatted name - to - URLs sorted by name .
468	URLs returns a list of all URLs . The returned list is sorted in ascending lexicographical order .
469	parse parses the given string and returns a map listing the values specified for each key .
470	NewClientHandler generates a muxed http . Handler with the given parameters to serve etcd client requests .
471	writeKeyEvent trims the prefix of key path in a single Event under StoreKeysPrefix serializes it and writes the resulting JSON to the given ResponseWriter along with the appropriate headers .
472	writeKeyError logs and writes the given Error to the ResponseWriter . If Error is not an etcdErr the error will be converted to an etcd error .
473	getUint64 extracts a uint64 by the given key from a Form . If the key does not exist in the form 0 is returned . If the key exists but the value is badly formed an error is returned . If multiple values are present only the first is considered .
474	getBool extracts a bool by the given key from a Form . If the key does not exist in the form false is returned . If the key exists but the value is badly formed an error is returned . If multiple values are present only the first is considered .
475	waitDeletes efficiently waits until all keys matching the prefix and no greater than the create revision .
476	AddOutputPaths adds output paths to the existing output paths resolving conflicts .
477	NewConfig creates a new Config populated with default values .
478	PeerURLsMapAndToken sets up an initial peer URLsMap and cluster token for bootstrap or discovery .
479	GetDNSClusterNames uses DNS SRV records to get a list of initial nodes for cluster bootstrapping .
480	checkBindURLs returns an error if any URL uses a domain name .
481	GetCluster gets the cluster information via DNS discovery . Also sees each entry as a separate instance .
482	GetClient looks up the client endpoints for a service and domain .
483	GetSRVService generates a SRV service including an optional suffix .
484	ReadDir returns the filenames in the given directory in sorted order .
485	compact keyspace history to a provided revision
486	defrag a given endpoint
487	NewUserCommand returns the cobra command for user .
488	userAddCommandFunc executes the user add command .
489	userGetCommandFunc executes the user get command .
490	userChangePasswordCommandFunc executes the user passwd command .
491	addEvent function adds event into the eventHistory
492	scan enumerates events from the index history and stops at the first point where the key matches .
493	clone will be protected by a stop - world lock do not need to obtain internal lock
494	openSnapshotBackend renames a snapshot db to the current etcd db and opens it .
495	openBackend returns a backend using the current etcd db .
496	recoverBackendSnapshot recovers the DB from a snapshot in case etcd crashes before updating the backend db after persisting raft snapshot to disk violating the invariant snapshot . Metadata . Index < db . consistentIndex . In this case replace the db with the snapshot db sent by the leader .
497	NewUpdateCommand returns the CLI command for update .
498	updateCommandFunc executes the update command .
499	FrontAndBack gets the front and back elements in the queue We must grab front and back together with the protection of the lock
500	Insert function insert a RequestStats into the queue and update the records
501	Rate function returns the package rate and byte rate
502	Clear function clear up the statsQueue
503	UniqueStrings returns a slice of randomly generated unique strings .
504	RandomStrings returns a slice of randomly generated strings .
505	IsKeyNotFound returns true if the error code is ErrorCodeKeyNotFound .
506	IsRoleNotFound returns true if the error means role not found of v2 API .
507	IsUserNotFound returns true if the error means user not found of v2 API .
508	JoinCluster will connect to the discovery service at the given url and register the server represented by the given id and config to the cluster
509	GetCluster will connect to the discovery service at the given url and retrieve a string describing the cluster
510	newProxyFunc builds a proxy function from the given string which should represent a URL that can be used as a proxy . It performs basic sanitization of the URL and returns any error encountered .
511	isSafeRetry returns true if request is safe for retry with the given error .
512	withRetryPolicy sets the retry policy of this call .
513	withAuthRetry sets enables authentication retries .
514	withMax sets the maximum number of retries on this call or this interceptor .
515	WithBackoff sets the BackoffFunc used to control time between retries .
516	RecvAppendReq updates the ServerStats in response to an AppendRequest from the given leader being received
517	SendAppendReq updates the ServerStats in response to an AppendRequest being sent by this server
518	merge merges data from bb into bbsrc .
519	deleteRevKey deletes a key by revision returning false if key is missing
520	isMemberBootstrapped tries to check if the given member has been bootstrapped in the given cluster .
521	GetClusterFromRemotePeers takes a set of URLs representing etcd peers and attempts to construct a Cluster by accessing the members endpoint on one of these URLs . The first URL to provide a response is used . If no URLs provide a response or a Cluster cannot be successfully created from a received response an error is returned . Each request has a 10 - second timeout . Because the upper limit of TTL is 5s 10 second is enough for building connection and finishing request .
522	If logerr is true it prints out more error messages .
523	getRemotePeerURLs returns peer urls of remote members in the cluster . The returned list is sorted in ascending lexicographical order .
524	getVersions returns the versions of the members in the given cluster . The key of the returned map is the member s ID . The value of the returned map is the semver versions string including server and cluster . If it fails to get the version of a member the key will be nil .
525	decideClusterVersion decides the cluster version based on the versions map . The returned version is the min server version in the map or nil if the min version in unknown .
526	getVersion returns the Versions of the given member via its peerURLs . Returns the last error if it fails to get the version .
527	NewTimeoutDetector creates the TimeoutDetector .
528	Reset resets the NewTimeoutDetector .
529	Observe observes an event for given id . It returns false and exceeded duration if the interval is longer than the expectation .
530	NewPeerHandler generates an http . Handler to handle etcd peer requests .
531	put puts a revision to the keyIndex .
532	tombstone puts a revision pointing to a tombstone to the keyIndex . It also creates a new empty generation in the keyIndex . It returns ErrRevisionNotFound when tombstone on an empty generation .
533	get gets the modified created revision and version of the key that satisfies the given atRev . Rev must be higher than or equal to the given atRev .
534	since returns revisions since the given rev . Only the revision with the largest sub revision will be returned if multiple revisions have the same main revision .
535	keep finds the revision to be kept if compact is called at given atRev .
536	findGeneration finds out the generation of the keyIndex that the given rev belongs to . If the given rev is at the gap of two generations which means that the key does not exist at the given rev it returns nil .
537	cancelWatcher removes references of the watcher from the watchableStore
538	syncWatchersLoop syncs the watcher in the unsynced map every 100ms .
539	syncVictimsLoop tries to write precomputed watcher responses to watchers that had a blocked watcher channel
540	moveVictims tries to update watches with already pending event data
541	kvsToEvents gets all events for the watchers from all key - value pairs
542	notify notifies the fact that given event at the given rev just happened to watchers that watch on the key of the event .
543	Check if the provided function is being called in the op options .
544	UnsafePut must be called holding the lock on the tx .
545	UnsafeSeqPut must be called holding the lock on the tx .
546	UnsafeRange must be called holding the lock on the tx .
547	UnsafeDelete must be called holding the lock on the tx .
548	UnsafeForEach must be called holding the lock on the tx .
549	Commit commits a previous tx and begins a new writable one .
550	CommitAndStop commits the previous tx and does not create a new one .
551	Renew renews an existing lease . If the given lease does not exist or has expired an error will be returned .
552	Attach attaches items to the lease with given ID . When the lease expires the attached items will be automatically removed . If the given lease does not exist an error will be returned .
553	revokeExpiredLeases finds all leases past their expiry and sends them to epxired channel for to be revoked .
554	checkpointScheduledLeases finds all scheduled lease checkpoints that are due and submits them to the checkpointer to persist them to the consensus log .
555	expireExists returns true if expiry items exist . It pops only when expiry item exists . next is true to indicate that it may exist in next attempt .
556	findExpiredLeases loops leases in the leaseMap until reaching expired limit and returns the expired leases that needed to be revoked .
557	refresh refreshes the expiry of the lease .
558	forever sets the expiry of lease to be forever .
559	Keys returns all the keys attached to the lease .
560	Remaining returns the remaining time of the lease .
561	NewCompactionCommand returns the cobra command for compaction .
562	compactionCommandFunc executes the compaction command .
563	NewPutCommand returns the cobra command for put .
564	putCommandFunc executes the put command .
565	NewHandler creates a new HTTP handler listening on the given transport which will proxy requests to an etcd cluster . The handler will periodically update its view of the cluster .
566	NewReadonlyHandler wraps the given HTTP handler to allow only GET requests
567	NewSetCommand returns the CLI command for set .
568	setCommandFunc executes the set command .
569	waitOnLowest will wait on the last key with a revision < rwm . myKey . Revision with a given prefix . If there are no keys left to wait on return true .
570	GetDefaultInterfaces fetches the device name of default routable interface .
571	NewSnapshotCommand returns the cobra command for snapshot .
572	NewMoveLeaderCommand returns the cobra command for move - leader .
573	transferLeadershipCommandFunc executes the compaction command .
574	OpenDir opens a directory in windows with write access for syncing .
575	NewRemoveDirCommand returns the CLI command for rmdir .
576	rmdirCommandFunc executes the rmdir command .
577	NewDelCommand returns the cobra command for del .
578	delCommandFunc executes the del command .
579	NewExpect creates a new process for expect testing .
580	NewExpectWithEnv creates a new process with user defined env variables for expect testing .
581	ExpectFunc returns the first line satisfying the function f .
582	Expect returns the first line containing the given string .
583	LineCount returns the number of recorded lines since the beginning of the process .
584	Signal sends a signal to the expect process
585	keyFunc returns the key of a request which is used to look up its caching response in the cache .
586	Add adds the response of a request to the cache if its revision is larger than the compacted revision of the cache .
587	Get looks up the caching response for a given request . Get is also responsible for lazy eviction when accessing compacted entries .
588	Invalidate invalidates the cache entries that intersecting with the given range from key to endkey .
589	Compact invalidate all caching response before the given rev . Replace with the invalidation is lazy . The actual removal happens when the entries is accessed .
590	NewUniqueURLsWithExceptions implements url . URL slice as flag . Value interface . Given value is to be separated by comma .
591	UniqueURLsFromFlag returns a slice from urls got from the flag .
592	UniqueURLsMapFromFlag returns a map from url strings got from the flag .
593	Hold creates the barrier key causing processes to block on Wait .
594	Release deletes the barrier key to unblock all waiting processes .
595	Wait blocks on the barrier key until it is deleted . If there is no key Wait assumes Release has already been called and returns immediately .
596	NewLockRacerCommand returns the cobra command for lock - racer runner .
597	ElectionTimeout returns an election timeout duration .
598	DialEtcdGRPCServer creates a raw gRPC connection to an etcd member .
599	CreateEtcdClientConfig creates a client configuration from member .
600	CreateEtcdClient creates a client from member .
601	CheckCompact ensures that historical data before given revision has been compacted .
602	Defrag runs defragmentation on this member .
603	RevHash fetches current revision and hash on this member .
604	Rev fetches current revision on this member .
605	Compact compacts member storage with given revision . It blocks until it s physically done .
606	IsLeader returns true if this member is the current cluster leader .
607	WriteHealthKey writes a health key to this member .
608	SaveSnapshot downloads a snapshot file from this member locally . It s meant to requested remotely so that local member can store snapshot file on local disk .
609	RestoreSnapshot restores a cluster from a given snapshot file on disk . It s meant to requested remotely so that local member can load the snapshot file from local disk .
610	NewWatcher wraps a Watcher instance so that all Watch requests are prefixed with a given string and all Watch responses have the prefix removed .
611	NewRawNode returns a new RawNode given configuration and a list of raft peers .
612	Campaign causes this RawNode to transition to candidate state .
613	Propose proposes data be appended to the raft log .
614	ProposeConfChange proposes a config change .
615	ApplyConfChange applies a config change to the local node .
616	Step advances the state machine using the given message .
617	Ready returns the current point - in - time state of this RawNode .
618	WithProgress is a helper to introspect the Progress for this node and its peers .
619	ReportUnreachable reports the given node is not reachable for the last send .
620	ReportSnapshot reports the status of the sent snapshot .
621	TransferLeader tries to transfer leadership to the given transferee .
622	ReadIndex requests a read state . The read state will be set in ready . Read State has a read index . Once the application advances further than the read index any linearizable read requests issued before the read request can be processed safely . The read state will have the same rctx attached .
623	printcURL prints the cURL equivalent request to stderr . It returns an error if the body of the request cannot be read . The caller MUST cancel the request if there is an error .
624	StartNode returns a new Node given configuration and a list of raft peers . It appends a ConfChangeAddNode entry for each given peer to the initial log .
625	RestartNode is similar to StartNode but does not take a list of peers . The current membership of the cluster will be restored from the Storage . If the caller has an existing state machine pass in the last log index that has been applied to it ; otherwise use zero .
626	Tick increments the internal logical clock for this Node . Election timeouts and heartbeat timeouts are in units of ticks .
627	MustSync returns true if the hard state and count of Raft entries indicate that a synchronous write to persistent storage is required .
628	NewGRPC17Health returns a new health balancer with gRPC v1 . 7 .
629	NeedUpdate returns true if all connections are down or addresses do not include current pinned address .
630	dflSignal sets the given signal to SIG_DFL
631	New creates a store where the given namespaces will be created as initial directories .
632	Index retrieves the current index of the store .
633	Get returns a get event . If recursive is true it will return all the content under the node path . If sorted is true it will sort the content by keys .
634	Create creates the node at nodePath . Create will help to create intermediate directories with no ttl . If the node has already existed create will fail . If any node on the path is a file create will fail .
635	Set creates or replace the node at nodePath .
636	returns user - readable cause of failed comparison
637	Delete deletes the node at the given path . If the node is a directory recursive must be true to delete it .
638	walk walks all the nodePath and apply the walkFunc on each directory
639	InternalGet gets the node of the given nodePath .
640	DeleteExpiredKeys will delete all expired keys
641	checkDir will check whether the component is a directory under parent node . If it is a directory this function will return the pointer to that node . If it does not exist this function will create a new directory and return the pointer to that node . If it is a file this function will return error .
642	Save saves the static state of the store system . It will not be able to save the state of watchers . It will not save the parent field of the node . Or there will be cyclic dependencies issue for the json package .
643	Recovery recovers the store system from a static state It needs to recover the parent field of the nodes . It needs to delete the expired nodes since the saved time and also needs to create monitoring go routines .
644	Next generates a id that is unique .
645	NewMakeMirrorCommand returns the cobra command for makeMirror .
646	NewZapCoreLoggerBuilder generates a zap core logger builder .
647	NewSyncer creates a Syncer .
648	DropPort drops all tcp packets that are received from the given port and sent to the given port .
649	SetLatency adds latency in millisecond scale with random variations .
650	RemoveLatency resets latency configurations .
651	NewTxnCommand returns the cobra command for txn .
652	txnCommandFunc executes the txn command .
653	New returns a new Compactor based on given mode .
654	printResponseKey only supports to print key correctly .
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	grpcHandlerFunc returns an http . Handler that delegates to grpcServer on incoming gRPC connections or otherHandler otherwise . Given in gRPC docs .
657	addCORSHeader adds the correct cors headers given an origin
658	fallback computes the ops to fetch all possible conflicting leasing keys for a list of ops .
659	IDFromString attempts to create an ID from a base - 16 string .
660	Release deletes the pid file and releases our lock on the directory .
661	EncodedSize is the size of the ValueStruct when encoded
662	Decode uses the length of the slice to infer the length of the Value field .
663	NewMergeIterator returns a new MergeIterator from a list of Iterators .
664	initHeap checks all iterators and initializes our heap and array of keys . Whenever we reverse direction we need to run this .
665	Valid returns whether the MergeIterator is at a valid element .
666	Key returns the key associated with the current iterator
667	Value returns the value associated with the iterator .
668	Next returns the next element . If it is the same as the current key ignore it .
669	Seek brings us to element with key > = given key .
670	Close implements y . Iterator
671	Encode encodes Pointer into byte buffer .
672	Decodes h from buf .
673	Encodes e to buf . Returns number of bytes written .
674	SetEntry is the equivalent of Txn . SetEntry .
675	Set is equivalent of Txn . SetWithMeta .
676	SetWithTTL is equivalent of Txn . SetWithTTL .
677	Delete is equivalent of Txn . Delete .
678	Caller to commit must hold a write lock .
679	Flush must be called at the end to ensure that any pending writes get committed to Badger . Flush returns any error stored by WriteBatch .
680	Error returns any errors encountered so far . No commits would be run once an error is detected .
681	getMemtables returns the current memtables and get references .
682	writeRequests is called serially by only one goroutine .
683	ensureRoomForWrite is always called serially .
684	WriteLevel0Table flushes memtable .
685	handleFlushTask must be run serially .
686	flushMemtable must keep running until we send it an empty flushTask . If there are errors during handling the flush task we ll retry indefinitely .
687	This function does a filewalk calculates the size of vlog and sst files and stores it in y . LSMSize and y . VlogSize .
688	Size returns the size of lsm and value log files in bytes . It can be used to decide how often to call RunValueLogGC .
689	Next would return the next integer in the sequence updating the lease by running a transaction if needed .
690	Release the leased sequence to avoid wasted integers . This should be done right before closing the associated DB . However it is valid to use the sequence after it was released causing a new lease with full bandwidth .
691	KeySplits can be used to get rough key ranges to divide up iteration over the DB .
692	Flatten can be used to force compactions on the LSM tree so all the tables fall on the same level . This ensures that all the versions of keys are colocated and not split across multiple levels which is necessary after a restore from backup . During Flatten live compactions are stopped . Ideally no writes are going on during Flatten . Otherwise it would create competition between flattening the tree and new tables being created at level zero .
693	Mmap uses the mmap system call to memory - map a file . If writable is true memory protection of the pages is set so that they may be written to as well .
694	Madvise uses the madvise system call to give advise about the use of memory when using a slice that is memory - mapped to a file . Set the readahead flag to false if page references are expected in random order .
695	Any deleted or invalid versions at or below ts would be discarded during compaction to reclaim disk space in LSM tree and thence value log .
696	hasConflict must be called while having a lock .
697	Set adds a key - value pair to the database . It will return ErrReadOnlyTxn if update flag was set to false when creating the transaction . The current transaction keeps a reference to the key and val byte slice arguments . Users must not modify key and val until the end of the transaction .
698	SetWithMeta adds a key - value pair to the database along with a metadata byte . This byte is stored alongside the key and can be used as an aid to interpret the value or store other contextual bits corresponding to the key - value pair . The current transaction keeps a reference to the key and val byte slice arguments . Users must not modify key and val until the end of the transaction .
699	Delete deletes a key . This is done by adding a delete marker for the key at commit timestamp . Any reads happening before this timestamp would be unaffected . Any reads after this commit would see the deletion . The current transaction keeps a reference to the key byte slice argument . Users must not modify the key until the end of the transaction .
700	Get looks for key and returns corresponding Item . If key is not found ErrKeyNotFound is returned .
701	CommitWith acts like Commit but takes a callback which gets run via a goroutine to avoid blocking this function . The callback is guaranteed to run so it is safe to increment sync . WaitGroup before calling CommitWith and decrementing it in the callback ; to block until all callbacks are run .
702	View executes a function creating and managing a read - only transaction for the user . Error returned by the function is relayed by the View method . If View is used with managed transactions it would assume a read timestamp of MaxUint64 .
703	Update executes a function creating and managing a read - write transaction for the user . Error returned by the function is relayed by the Update method . Update cannot be used with managed transactions .
704	Seek brings us to the first block element that is > = input key .
705	SeekToLast brings us to the last element . Valid should return true .
706	parseKV would allocate a new byte slice for key and for value .
707	NewIterator returns a new iterator of the Table
708	seekFrom brings us to a key that is > = input key .
709	seekForPrev will reset iterator and seek to < = key .
710	Value follows the y . Iterator interface
711	Seek follows the y . Iterator interface
712	NewConcatIterator creates a new concatenated iterator
713	Valid implements y . Interface
714	Next advances our concat iterator .
715	Close implements y . Interface .
716	OpenExistingFile opens an existing file errors if it doesn t exist .
717	Copy copies a byte slice and returns the copied slice .
718	KeyWithTs generates a new key by appending ts to key .
719	ParseTs parses the timestamp from the key bytes .
720	ParseKey parses the actual key from the key bytes .
721	SameKey checks for key equality ignoring the version timestamp suffix .
722	FixedDuration returns a string representation of the given duration with the hours minutes and seconds .
723	NewCloser constructs a new Closer with an initial count on the WaitGroup .
724	NewThrottle creates a new throttle with a max number of workers .
725	Do should be called by workers before they start working . It blocks if there are already maximum number of workers working . If it detects an error from previously Done workers it would return it .
726	Done should be called by workers when they finish working . They can also pass the error status of work done .
727	Finish waits until all workers have finished working . It would return any error passed by Done .
728	SetDiscardTs sets a timestamp at or below which any invalid or deleted versions can be discarded from the LSM tree and thence from the value log to reclaim disk space . Can only be used with managed transactions .
729	openReadOnly assumes that we have a write lock on logFile .
730	iterate iterates over log file . It doesn t not allocate new memory for every kv pair . Therefore the kv pair is only valid for the duration of fn call .
731	sortedFids returns the file id s not pending deletion sorted . Assumes we have shared access to filesMap .
732	write is thread - unsafe by design and should not be called concurrently .
733	populateDiscardStats populates vlog . lfDiscardStats This function will be called while initializing valueLog
734	Backup is a wrapper function over Stream . Backup to generate full and incremental backups of the DB . For more control over how many goroutines are used to generate the backup or if you wish to backup only a certain range of keys use Stream . Backup directly .
735	ToList is a default implementation of KeyToList . It picks up all valid versions of the key skipping over deleted or expired keys .
736	keyRange is [ start end ) including start excluding end . Do ensure that the start end byte slices are owned by keyRange struct .
737	produceKVs picks up ranges from rangeCh generates KV lists and sends them to kvChan .
738	Orchestrate runs Stream . It picks up ranges from the SSTables then runs NumGo number of goroutines to iterate over these ranges and batch up KVs in lists . It concurrently runs a single goroutine to pick these lists batch them up further and send to Output . Send . Orchestrate also spits logs out to Infof using provided LogPrefix . Note that all calls to Output . Send are serial . In case any of these steps encounter an error Orchestrate would stop execution and return that error . Orchestrate can be called multiple times but in serial order .
739	NewStream creates a new Stream .
740	NewStreamAt creates a new Stream at a particular timestamp . Should only be used with managed DB .
741	DecrRef decrements the refcount and possibly deletes the table
742	ParseFileID reads the file id out of a filename .
743	PrintHistogram builds and displays the key - value size histogram . When keyPrefix is set only the keys that have prefix keyPrefix are considered for creating the histogram
744	newSizeHistogram returns a new instance of keyValueSizeHistogram with properly initialized fields .
745	buildHistogram builds the key - value size histogram . When keyPrefix is set only the keys that have prefix keyPrefix are considered for creating the histogram
746	printHistogram prints the histogram data in a human - readable format .
747	Init initializes a WaterMark struct . MUST be called before using it .
748	Begin sets the last index to the given value .
749	BeginMany works like Begin but accepts multiple indices .
750	Done sets a single index as done .
751	DoneMany works like Done but accepts multiple indices .
752	SetDoneUntil sets the maximum index that has the property that all indices less than or equal to it are done .
753	WaitForMark waits until the given index is marked as done .
754	Encode encodes the header .
755	Decode decodes the header .
756	NewTableBuilder makes a new TableBuilder .
757	keyDiff returns a suffix of newKey that is different from b . baseKey .
758	Add adds a key - value pair to the block . If doNotRestart is true we will not restart even if b . counter > = restartInterval .
759	blockIndex generates the block index for the table . It is mainly a list of all the block base offsets .
760	Finish finishes the table by appending the index .
761	Errorf logs an ERROR log message to the logger specified in opts or to the global logger if no logger is specified in opts .
762	Infof logs an INFO message to the logger specified in opts .
763	DecrRef decrements the refcount deallocating the Skiplist when done using it
764	NewSkiplist makes a new empty skiplist with a given arena size
765	Put inserts the key - value pair .
766	Get gets the value associated with the key . It returns a valid value if it finds equal or earlier version of the same key .
767	Key returns the key at the current position .
768	Value returns value .
769	Next advances to the next position .
770	Prev advances to the previous position .
771	Seek advances to the first entry with a key > = target .
772	SeekForPrev finds an entry with key < = target .
773	NewUniIterator returns a UniIterator .
774	Next implements y . Interface
775	Seek implements y . Interface
776	asChanges returns a sequence of changes that could be used to recreate the Manifest in its present state .
777	Must be called while appendLock is held .
778	Check does some sanity check on one level of data or in - memory index .
779	AcquireDirectoryLock acquires exclusive access to a directory .
780	Release removes the directory lock .
781	AssertTruef is AssertTrue with extra info .
782	Wrapf is Wrap with extra info .
783	initTables replaces s . tables with given tables . This is done during loading .
784	deleteTables remove tables idx0 ... idx1 - 1 .
785	tryAddLevel0Table returns true if ok and no stalling .
786	getTableForKey acquires a read - lock to access s . tables . It returns a list of tableHandlers .
787	get returns value for a given key or the key after that . If not found return nil .
788	overlappingTables returns the tables that intersect with key range . Returns a half - interval . This function should already have acquired a read lock and this is so important the caller must pass an empty parameter declaring such .
789	String returns a string representation of Item
790	KeyCopy returns a copy of the key of the item writing it to dst slice . If nil is passed or capacity of dst isn t sufficient a new slice would be allocated and returned .
791	ValueSize returns the exact size of the value . This can be called to quickly estimate the size of a value without fetching it .
792	NewKeyIterator is just like NewIterator but allows the user to iterate over all versions of a single key . Internally it sets the Prefix option in provided opt and uses that prefix to additionally run bloom filter lookups before picking tables from the LSM tree .
793	Valid returns false when iteration is done .
794	ValidForPrefix returns false when iteration is done or when the current key is not prefixed by the specified prefix .
795	Close would close the iterator . It is important to call this when you re done with iteration .
796	parseItem is a complex function because it needs to handle both forward and reverse iteration implementation . We store keys such that their versions are sorted in descending order . This makes forward iteration efficient but revese iteration complicated . This tradeoff is better because forward iteration is more common than reverse . This function advances the iterator .
797	Seek would seek to the provided key if present . If absent it would seek to the next smallest key greater than the provided key if iterating in the forward direction . Behavior would be reversed if iterating backwards .
798	GetMergeOperator creates a new MergeOperator for a given key and returns a pointer to it . It also fires off a goroutine that performs a compaction using the merge function that runs periodically as specified by dur .
799	Get returns the latest value for the merge operator which is derived by applying the merge function to all the values added so far . If Add has not been called even once Get will return ErrKeyNotFound .
800	compareAndAdd will check whether we can run this compactDef . That it doesn t overlap with any other running compaction . If it can be run it would store this run in the compactStatus state .
801	newArena returns a new arena .
802	putNode allocates a node in the arena . The node is aligned on a pointer - sized boundary . The arena offset of the node is returned .
803	getNode returns a pointer to the node located at offset . If the offset is zero then the nil node pointer is returned .
804	getKey returns byte slice at offset .
805	getVal returns byte slice at offset . The given size should be just the value size and should NOT include the meta bytes .
806	getNodeOffset returns the offset of node in the arena . If the node pointer is nil then the zero offset is returned .
807	These variables are global and have cumulative values for all kv stores .
808	revertToManifest checks that all necessary table files exist and removes all table files not referenced by the manifest . idMap is a set of table file id s that were read from the directory listing .
809	dropTree picks all tables from all levels creates a manifest changeset applies it and then decrements the refs of these tables which would result in their deletion .
810	dropPrefix runs a L0 - > L1 compaction and then runs same level compaction on the rest of the levels . For L0 - > L1 compaction it runs compactions normally but skips over all the keys with the provided prefix . For Li - > Li compactions it picks up the tables which would have the prefix . The tables who only have keys with this prefix are quickly dropped . The ones which have other keys are run through MergeIterator and compacted to create new tables . All the mechanisms of compactions apply i . e . level sizes and MANIFEST are updated as in the normal flow .
811	Returns true if level zero may be compacted without accounting for compactions that already might be happening .
812	doCompact picks some table on level l and compacts it away to the next level .
813	get returns the found value if any . If not found we return nil .
814	seekTotal retrives the total of all accounts by seeking for each account key .
815	Range is [ lowTs highTs ) .
816	Create replaces the stored snapshot with a new one using the given args
817	List returns the latest snapshot taken
818	Open wraps an io . ReadCloser around the snapshot contents
819	Write appends the given bytes to the snapshot contents
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore based on a base directory . The retain parameter controls how many snapshots are retained . Must be at least 1 .
821	NewFileSnapshotStore creates a new FileSnapshotStore based on a base directory . The retain parameter controls how many snapshots are retained . Must be at least 1 .
822	snapshotName generates a name for the snapshot .
823	Create is used to start a new snapshot
824	List returns available snapshots in the store .
825	getSnapshots returns all the known snapshots .
826	readMeta is used to read the meta data for a given named backup
827	Open takes a snapshot ID and returns a ReadCloser for that snapshot .
828	ReapSnapshots reaps any snapshots beyond the retain count .
829	Write is used to append to the state file . We write to the buffered IO object to reduce the amount of context switches .
830	Close is used to indicate a successful end .
831	Cancel is used to indicate an unsuccessful end .
832	finalize is used to close all of our resources .
833	writeMeta is used to write out the metadata we have .
834	NewNetworkTransportWithConfig creates a new network transport with the given config struct
835	setupStreamContext is used to create a new stream context . This should be called with the stream lock held .
836	getStreamContext is used retrieve the current stream context .
837	SetHeartbeatHandler is used to setup a heartbeat handler as a fast - pass . This is to avoid head - of - line blocking from disk IO .
838	CloseStreams closes the current streams .
839	Close is used to stop the network transport .
840	getExistingConn is used to grab a pooled connection .
841	getConnFromAddressProvider returns a connection from the server address provider if available or defaults to a connection using the target server address
842	getConn is used to get a connection from the pool .
843	returnConn returns a connection back to the pool .
844	listen is used to handling incoming connections .
845	handleConn is used to handle an inbound connection for its lifespan . The handler will exit when the passed context is cancelled or the connection is closed .
846	handleCommand is used to decode and dispatch a single command .
847	decodeResponse is used to decode an RPC response and reports whether the connection can be reused .
848	sendRPC is used to encode and send the RPC .
849	newNetPipeline is used to construct a netPipeline from a given transport and connection .
850	decodeResponses is a long running routine that decodes the responses sent on the connection .
851	AppendEntries is used to pipeline a new append entries request .
852	Closed is used to shutdown the pipeline connection .
853	NewObserver creates a new observer that can be registered to make observations on a Raft instance . Observations will be sent on the given channel if they satisfy the given filter . If blocking is true the observer will block when it can t send on the channel otherwise it may discard events .
854	RegisterObserver registers a new observer .
855	DeregisterObserver deregisters an observer .
856	observe sends an observation to every observer .
857	NewInmemStore returns a new in - memory backend . Do not ever use for production . Only for testing .
858	FirstIndex implements the LogStore interface .
859	LastIndex implements the LogStore interface .
860	GetLog implements the LogStore interface .
861	StoreLog implements the LogStore interface .
862	StoreLogs implements the LogStore interface .
863	DeleteRange implements the LogStore interface .
864	Set implements the StableStore interface .
865	Get implements the StableStore interface .
866	SetUint64 implements the StableStore interface .
867	GetUint64 implements the StableStore interface .
868	NewLogCache is used to create a new LogCache with the given capacity and backend store .
869	Connect is used to connect this transport to another transport for a given peer name . This allows for local routing .
870	Disconnect is used to remove the ability to route to a given peer .
871	DisconnectAll is used to remove all routes to peers .
872	Respond is used to respond with a response error or both
873	Open is a function you can call to access the underlying snapshot and its metadata .
874	vote is used to respond to a verifyFuture . This may block when responding on the notifyCh .
875	notifyAll is used to notify all the waiting verify futures if the follower believes we are still the leader .
876	cleanNotify is used to delete notify .
877	LastContact returns the time of last contact .
878	setLastContact sets the last contact to the current time .
879	replicate is a long running routine that replicates log entries to a single follower .
880	pipelineReplicate is used when we have synchronized our state with the follower and want to switch to a higher performance pipeline mode of replication . We only pipeline AppendEntries commands and if we ever hit an error we fall back to the standard replication which can handle more complex situations .
881	pipelineSend is used to send data over a pipeline . It is a helper to pipelineReplicate .
882	pipelineDecode is used to decode the responses of pipelined requests .
883	setupAppendEntries is used to setup an append entries request .
884	setPreviousLog is used to setup the PrevLogEntry and PrevLogTerm for an AppendEntriesRequest given the next index to replicate .
885	setNewLogs is used to setup the logs which should be appended for a request .
886	appendStats is used to emit stats about an AppendEntries invocation .
887	handleStaleTerm is used when a follower indicates that we have a stale term .
888	AppendEntries sends the appropriate RPC to the target node .
889	RequestVote sends the appropriate RPC to the target node .
890	InstallSnapshot is used to push a snapshot down to a follower . The data is read from the ReadCloser and streamed to the client .
891	EncodePeer is used to serialize a peer name .
892	DecodePeer is used to deserialize a peer name .
893	AppendEntries is used to add another request to the pipeline . The send may block which is an effective form of back - pressure .
894	ReadPeersJSON consumes a legacy peers . json file in the format of the old JSON peer store and creates a new - style configuration structure . This can be used to migrate this data or perform manual recovery when running protocol versions that can interoperate with older unversioned Raft servers . This should not be used once server IDs are in use because the old peers . json file didn t have support for these nor non - voter suffrage types .
895	ReadConfigJSON reads a new - style peers . json and returns a configuration structure . This can be used to perform manual recovery when running protocol versions that use server IDs .
896	NewTCPTransport returns a NetworkTransport that is built on top of a TCP streaming transport layer .
897	NewTCPTransportWithLogger returns a NetworkTransport that is built on top of a TCP streaming transport layer with log output going to the supplied Logger
898	NewTCPTransportWithConfig returns a NetworkTransport that is built on top of a TCP streaming transport layer using the given config struct .
899	Dial implements the StreamLayer interface .
900	Accept implements the net . Listener interface .
901	Addr implements the net . Listener interface .
902	restoreSnapshot attempts to restore the latest snapshots and fails if none of them can be restored . This is called at initialization time and is completely unsafe to call at any other time .
903	BootstrapCluster is equivalent to non - member BootstrapCluster but can be called on an un - bootstrapped Raft instance after it has been created . This should only be called at the beginning of time for the cluster and you absolutely must make sure that you call it with the same configuration on all the Voter servers . There is no need to bootstrap Nonvoter and Staging servers .
904	Leader is used to return the current leader of the cluster . It may return empty string if there is no current leader or the leader is unknown .
905	Apply is used to apply a command to the FSM in a highly consistent manner . This returns a future that can be used to wait on the application . An optional timeout can be provided to limit the amount of time we wait for the command to be started . This must be run on the leader or it will fail .
906	Barrier is used to issue a command that blocks until all preceeding operations have been applied to the FSM . It can be used to ensure the FSM reflects all queued writes . An optional timeout can be provided to limit the amount of time we wait for the command to be started . This must be run on the leader or it will fail .
907	VerifyLeader is used to ensure the current node is still the leader . This can be done to prevent stale reads when a new leader has potentially been elected .
908	AddVoter will add the given server to the cluster as a staging server . If the server is already in the cluster as a voter this updates the server s address . This must be run on the leader or it will fail . The leader will promote the staging server to a voter once that server is ready . If nonzero prevIndex is the index of the only configuration upon which this change may be applied ; if another configuration entry has been added in the meantime this request will fail . If nonzero timeout is how long this server should wait before the configuration change log entry is appended .
909	RemoveServer will remove the given server from the cluster . If the current leader is being removed it will cause a new election to occur . This must be run on the leader or it will fail . For prevIndex and timeout see AddVoter .
910	Shutdown is used to stop the Raft background routines . This is not a graceful operation . Provides a future that can be used to block until all background routines have exited .
911	Snapshot is used to manually force Raft to take a snapshot . Returns a future that can be used to block until complete and that contains a function that can be used to open the snapshot .
912	Restore is used to manually force Raft to consume an external snapshot such as if restoring from a backup . We will use the current Raft configuration not the one from the snapshot so that we can restore into a new cluster . We will also use the higher of the index of the snapshot or the current index and then add 1 to that so we force a new state with a hole in the Raft log so that the snapshot will be sent to followers and used for any new joiners . This can only be run on the leader and blocks until the restore is complete or an error occurs . WARNING! This operation has the leader take on the state of the snapshot and then sets itself up so that it replicates that to its followers though the install snapshot process . This involves a potentially dangerous period where the leader commits ahead of its followers so should only be used for disaster recovery into a fresh cluster and should not be used in normal operations .
913	String returns a string representation of this Raft node .
914	LastContact returns the time of last contact by a leader . This only makes sense if we are currently a follower .
915	Logf will record a formatted message to the contained debug log
916	containsNode returns true if the slice nodes contains n
917	LeaderPlus returns the leader + n additional nodes from the cluster the leader is always the first node in the returned slice .
918	WaitTilUptoDate blocks until all nodes in the cluster have gotten their commitedIndex upto the Index from the last successful call to Apply
919	assertLogEntryEqual compares the 2 raft Log entries and reports any differences to the supplied testing . T instance it return true if the 2 entries are equal false otherwise .
920	runFSM is a long running goroutine responsible for applying logs to the FSM . This is done async of other logs since we don t want the FSM to block our internal operations .
921	Clone makes a deep copy of a Configuration .
922	Clone makes a deep copy of a configurations object .
923	hasVote returns true if the server identified by id is a Voter in the provided Configuration .
924	checkConfiguration tests a cluster membership configuration for common errors .
925	nextConfiguration generates a new Configuration from the current one and a configuration change request . It s split from appendConfigurationEntry so that it can be unit tested easily .
926	encodePeers is used to serialize a Configuration into the old peers format . This is here for backwards compatibility when operating with a mix of old servers and should be removed once we deprecate support for protocol version 1 .
927	decodePeers is used to deserialize an old list of peers into a Configuration . This is here for backwards compatibility with old log entries and snapshots ; it should be removed eventually .
928	encodeConfiguration serializes a Configuration using MsgPack or panics on errors .
929	decodeConfiguration deserializes a Configuration using MsgPack or panics on errors .
930	Start a goroutine and properly handle the race between a routine starting and incrementing and exiting and decrementing .
931	getLastIndex returns the last index in stable storage . Either from the last log or from the last snapshot .
932	getLastEntry returns the last index and term in stable storage . Either from the last log or from the last snapshot .
933	checkRPCHeader houses logic about whether this instance of Raft can process the given RPC message .
934	setLeader is used to modify the current leader of the cluster
935	requestConfigChange is a helper for the above functions that make configuration change requests . req describes the change . For timeout see AddVoter .
936	run is a long running goroutine that runs the Raft FSM .
937	runFollower runs the FSM for a follower .
938	liveBootstrap attempts to seed an initial configuration for the cluster . See the Raft object s member BootstrapCluster for more details . This must only be called on the main thread and only makes sense in the follower state .
939	runCandidate runs the FSM for a candidate .
940	runLeader runs the FSM for a leader . Do the setup here and drop into the leaderLoop for the hot loop .
941	startStopReplication will set up state and start asynchronous replication to new peers and stop replication to removed peers . Before removing a peer it ll instruct the replication routines to try to replicate to the current index . This must only be called from the main thread .
942	configurationChangeChIfStable returns r . configurationChangeCh if it s safe to process requests from it or nil otherwise . This must only be called from the main thread . Note that if the conditions here were to change outside of leaderLoop to take this from nil to non - nil we would need leaderLoop to be kicked .
943	verifyLeader must be called from the main thread for safety . Causes the followers to attempt an immediate heartbeat .
944	checkLeaderLease is used to check if we can contact a quorum of nodes within the last leader lease interval . If not we need to step down as we may have lost connectivity . Returns the maximum duration without contact . This must only be called from the main thread .
945	restoreUserSnapshot is used to manually consume an external snapshot such as if restoring from a backup . We will use the current Raft configuration not the one from the snapshot so that we can restore into a new cluster . We will also use the higher of the index of the snapshot or the current index and then add 1 to that so we force a new state with a hole in the Raft log so that the snapshot will be sent to followers and used for any new joiners . This can only be run on the leader and returns a future that can be used to block until complete .
946	appendConfigurationEntry changes the configuration and adds a new configuration entry to the log . This must only be called from the main thread .
947	dispatchLog is called on the leader to push a log to disk mark it as inflight and begin replication of it .
948	processLogs is used to apply all the committed entries that haven t been applied up to the given index limit . This can be called from both leaders and followers . Followers call this from AppendEntries for n entries at a time and always pass future = nil . Leaders call this once per inflight when entries are committed . They pass the future from inflights .
949	processLog is invoked to process the application of a single committed log entry .
950	processRPC is called to handle an incoming RPC request . This must only be called from the main thread .
951	processHeartbeat is a special handler used just for heartbeat requests so that they can be fast - pathed if a transport supports it . This must only be called from the main thread .
952	setLastContact is used to set the last contact time to now
953	persistVote is used to persist our vote for safety .
954	setCurrentTerm is used to set the current term in a durable manner .
955	setState is used to update the current state . Any state transition causes the known leader to be cleared . This means that leader should be set only after updating the state .
956	Called by leader after commitCh is notified
957	Internal helper to calculate new commitIndex from matchIndexes . Must be called with lock held .
958	randomTimeout returns a value that is between the minVal and 2x minVal .
959	generateUUID is used to generate a random UUID .
960	Decode reverses the encode operation on a byte slice input .
961	Encode writes an encoded object to a new bytes buffer .
962	backoff is used to compute an exponential backoff duration . Base time is scaled by the current round up to some maximum scale factor .
963	newApplySource will create a new source any source created with the same seed will generate the same sequence of data .
964	reset this source back to its initial state it ll generate the same sequence of data it initially did
965	DefaultConfig returns a Config with usable defaults .
966	ValidateConfig is used to validate a sane configuration
967	runSnapshots is a long running goroutine used to manage taking new snapshots of the FSM . It runs in parallel to the FSM and main goroutines so that snapshots do not block normal operation .
968	shouldSnapshot checks if we meet the conditions to take a new snapshot .
969	takeSnapshot is used to take a new snapshot . This must only be called from the snapshot thread never the main thread . This returns the ID of the new snapshot along with an error .
970	compactLogs takes the last inclusive index of a snapshot and trims the logs that are no longer needed .
971	WebpackCheck will compare the current default Buffalo webpack . config . js against the applications webpack . config . js . If they are different you have the option to overwrite the existing webpack . config . js file with the new one .
972	New generator for adding VCS to an application
973	UnixSocket returns a new Listener on that address
974	Get a registered ErrorHandler for this status code . If no ErrorHandler has been registered a default one will be returned .
975	PanicHandler recovers from panics gracefully and calls the error handling code for a 500 error .
976	partialFeeder returns template string for the name from TemplateBox . It should be registered as helper named partialFeeder so plush can find it with the name .
977	New render . Engine ready to go with your Options and some defaults we think you might like .
978	WriteTo implements io . WriterTo . It dumps the whole message into w .
979	Send a message using SMTP configuration or returns an error if something goes wrong .
980	NewSMTPSender builds a SMTP mail based in passed config .
981	Param returns a param either named or query string based on the key .
982	Set a value onto the Context . Any value set onto the Context will be automatically available in templates .
983	Value that has previously stored on the context .
984	Redirect a request with the given status to the given URL .
985	File returns an uploaded file by name or an error
986	MarshalJSON implements json marshaling for the context
987	New generator for creating a Buffalo API application
988	New returns a new instance of App and adds some sane and useful defaults .
989	DeprecrationsCheck will either log or fix deprecated items in the application
990	List default implementation . Returns a 404
991	Render the provided Data to the provider Writer using the RendererFunc provide .
992	Save the current session .
993	GetOnce gets a value from the current session and then deletes it .
994	Set a value onto the current session . If a value with that name already exists it will be overridden with the new value .
995	Clear the current session
996	Get a session using a request and response .
997	New generator to create a grift task
998	New generator for creating webpack asset files
999	New generator to generate refresh templates
1000	NewMessage creates a new message . It uses UTF - 8 and quoted - printable encoding by default .
1001	Reset resets the message so it can be reused . The message keeps its previous settings so it is in the same state that after a call to NewMessage .
1002	SetHeader sets a value to the given header field .
1003	SetHeaders sets the message headers .
1004	SetAddressHeader sets an address to the given header field .
1005	FormatAddress formats an address and a name as a valid RFC 5322 address .
1006	SetDateHeader sets a date to the given header field .
1007	FormatDate formats a date as a valid RFC 5322 date .
1008	SetBody sets the body of the message . It replaces any content previously set by SetBody SetBodyWriter AddAlternative or AddAlternativeWriter .
1009	SetPartEncoding sets the encoding of the part added to the message . By default parts use the same encoding than the message .
1010	SetHeader is a file setting to set the MIME header of the message part that contains the file content . Mandatory headers are automatically added if they are not set when sending the email .
1011	SetCopyFunc is a file setting to replace the function that runs when the message is sent . It should copy the content of the file to the io . Writer . The default copy function opens the file with the given filename and copy its content to the io . Writer .
1012	AttachReader attaches a file using an io . Reader
1013	Attach attaches the files to the email .
1014	EmbedReader embeds the images to the email .
1015	Embed embeds the images to the email .
1016	ValidateTemplates returns a genny . RunFn that will walk the given box and run each of the files found through each of the template validators
1017	PlushValidator validates the file is a valid Plush file if the extension is . md . html or . plush
1018	Validate options are useful
1019	LoadPlugins will add listeners for any plugins that support events
1020	WriteHeader sets the status code for a response
1021	Write the body of the response
1022	Flush the response
1023	CloseNotify implements the http . CloseNotifier interface
1024	Run all compatible checks
1025	onlyRelevantFiles processes only . go files excluding folders like node_modules and vendor .
1026	GoTemplateEngine implements the TemplateEngine interface for using standard Go templates
1027	GET maps an HTTP GET request to the path and the specified handler .
1028	Redirect from one URL to another URL . Only works for GET requests .
1029	ANY accepts a request across any HTTP method for the specified path and routes it to the specified Handler .
1030	buildRouteName builds a route based on the path passed .
1031	New mailer generator . It will init the mailers directory if it doesn t already exist
1032	NewDialer returns a new SMTP Dialer . The given parameters are used to connect to the SMTP server .
1033	Dial dials and authenticates to an SMTP server . The returned SendCloser should be closed when done using it .
1034	DialAndSend opens a connection to the SMTP server sends the given emails and closes the connection .
1035	Set allows to set a list of values into a particular key .
1036	Add adds a flash value for a flash key if the key already has values the list for that value grows .
1037	Persist the flash inside the session .
1038	newFlash creates a new Flash and loads the session data inside its data .
1039	Get returns the value of the cookie with the given name . Returns http . ErrNoCookie if there s no cookie with that name in the request .
1040	Set a cookie on the response which will expire after the given duration .
1041	SetWithExpirationTime sets a cookie that will expire at a specific time . Note that the time is determined by the client s browser so it might not expire at the expected time for example if the client has changed the time on their computer .
1042	Delete sets a header that tells the browser to remove the cookie with the given name .
1043	NewMessage builds a new message .
1044	NewFromData builds a new message with raw template data given
1045	New builds a new message with the current buffalo . Context
1046	CloseNotify return true across the channel when the connection in the browser has been severed .
1047	NewEventSource returns a new EventSource instance while ensuring that the http . ResponseWriter is able to handle EventSource messages . It also makes sure to set the proper response heads .
1048	NewSimpleWithContext creates a basic implementation of the Worker interface that is backed using just the standard library and goroutines .
1049	Register Handler with the worker
1050	Start the worker
1051	Stop the worker
1052	Perform a job as soon as possibly using a goroutine .
1053	PerformAt performs a job at a particular time using a goroutine .
1054	PerformIn performs a job after waiting for a specified amount using a goroutine .
1055	String returns a JSON representation of the RouteInfo
1056	Alias path patterns to the this route . This is not the same as a redirect .
1057	Name allows users to set custom names for the routes .
1058	BuildPathHelper Builds a routeHelperfunc for a particular RouteInfo
1059	New generator for adding travis or gitlab
1060	New returns a new generator for build actions on a Buffalo app
1061	RegisterCustomDecoder allows to define custom type decoders .
1062	Replace a piece of middleware with another piece of middleware . Great for testing .
1063	Routes returns a list of all of the routes defined in this application .
1064	WrapBuffaloHandler wraps a buffalo . Handler to standard http . Handler
1065	PackageJSONCheck will compare the current default Buffalo package . json against the applications package . json . If they are different you have the option to overwrite the existing package . json file with the new one .
1066	match takes an import path and replacement map .
1067	Send sends emails using the given Sender .
1068	Last checks if the name is the last of the parts
1069	Stop the application and attempt to gracefully shutdown
1070	DepEnsure runs dep ensure - v or go get - u depending on app tooling to make sure that any newly changed imports are added to dep or installed .
1071	String implements fmt . String
1072	New resource generator
1073	AddBody the message by receiving a renderer and rendering data first message will be used as the main message Body rest of them will be passed as alternative bodies on the email message
1074	AddBodies Allows to add multiple bodies to the message it returns errors that could happen in the rendering .
1075	AddAttachment adds the attachment to the list of attachments the Message has .
1076	AddEmbedded adds the attachment to the list of attachments the Message has and uses inline instead of attachement property .
1077	SetHeader sets the heder field and value for the message
1078	New generator for creating a Buffalo Web application
1079	New generator for creating basic asset files
1080	New returns a generator that performs buffalo related rx checks
1081	Cleanup all of the generated files
1082	MDTemplateEngine runs the input through github flavored markdown before sending it to the Plush engine .
1083	Update updates the configmap with the data from the identified files
1084	FilterChanges determines which of the changes are relevant for config updating returning mapping of config map to key to filename to update that key from .
1085	Get Labels from Regexp matches
1086	getLabelsFromGenericMatches returns label matches with extra labels if those have been configured in the plugin config .
1087	Start will begin polling the config file at the path . If the first load fails Start will return the error and abort . Future load failures will log the failure message but continue attempting to load .
1088	Subscribe registers the channel for messages on config reload . The caller can expect a copy of the previous and current config to be sent down the subscribed channel when a new configuration is loaded .
1089	Config returns the latest config . Do not modify the config .
1090	Set sets the config . Useful for testing .
1091	IsMember returns true if user is in org .
1092	ListIssueComments returns comments .
1093	ListPullRequestComments returns review comments .
1094	ListReviews returns reviews .
1095	ListIssueEvents returns issue events
1096	CreateComment adds a comment to a PR
1097	CreateReview adds a review to a PR
1098	CreateCommentReaction adds emoji to a comment .
1099	CreateIssueReaction adds an emoji to an issue .
1100	DeleteComment deletes a comment .
1101	DeleteStaleComments deletes comments flagged by isStale .
1102	GetPullRequest returns details about the PR .
1103	GetPullRequestChanges returns the file modifications in a PR .
1104	GetRef returns the hash of a ref .
1105	DeleteRef returns an error indicating if deletion of the given ref was successful
1106	GetSingleCommit returns a single commit .
1107	CreateStatus adds a status context to a commit .
1108	ListStatuses returns individual status contexts on a commit .
1109	GetCombinedStatus returns the overall status for a commit .
1110	GetRepoLabels gets labels in a repo .
1111	GetIssueLabels gets labels on an issue
1112	AddLabel adds a label
1113	RemoveLabel removes a label
1114	FindIssues returns f . Issues
1115	AssignIssue adds assignees .
1116	GetFile returns the bytes of the file .
1117	ListTeams return a list of fake teams that correspond to the fake team members returned by ListTeamMembers
1118	ListTeamMembers return a fake team with a single sig - lead GitHub teammember
1119	IsCollaborator returns true if the user is a collaborator of the repo .
1120	ListCollaborators lists the collaborators .
1121	ClearMilestone removes the milestone
1122	SetMilestone sets the milestone .
1123	ListMilestones lists milestones .
1124	ListPRCommits lists commits for a given PR .
1125	GetRepoProjects returns the list of projects under a repo .
1126	GetOrgProjects returns the list of projects under an org
1127	GetProjectColumns returns the list of columns for a given project .
1128	CreateProjectCard creates a project card under a given column .
1129	DeleteProjectCard deletes the project card of a specific issue or PR
1130	MoveProjectCard moves a specific project card to a specified column in the same project
1131	CreateDatabaseClient creates and connects a new instance of an InfluxDB It is created based on the fields set in the configuration .
1132	Push a point to the database
1133	NewProwJobWithAnnotation initializes a ProwJob out of a ProwJobSpec with annotations .
1134	NewProwJob initializes a ProwJob out of a ProwJobSpec .
1135	NewPresubmit converts a config . Presubmit into a prowapi . ProwJob . The prowapi . Refs are configured correctly per the pr baseSHA . The eventGUID becomes a github . EventGUID label .
1136	PresubmitSpec initializes a ProwJobSpec for a given presubmit job .
1137	PostsubmitSpec initializes a ProwJobSpec for a given postsubmit job .
1138	PeriodicSpec initializes a ProwJobSpec for a given periodic job .
1139	BatchSpec initializes a ProwJobSpec for a given batch job and ref spec .
1140	PartitionActive separates the provided prowjobs into pending and triggered and returns them inside channels so that they can be consumed in parallel by different goroutines . Complete prowjobs are filtered out . Controller loops need to handle pending jobs first so they can conform to maximum concurrency requirements that different jobs may have .
1141	ProwJobFields extracts logrus fields from a prowjob useful for logging .
1142	ClusterToCtx converts the prow job s cluster to a cluster context
1143	AddCommand registers new help text for a bot command .
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the merge method to use for a repo . The default of merge is returned when not overridden .
1149	Query returns the corresponding github search string for the tide query .
1150	ForRepo indicates if the tide query applies to the specified repo .
1151	OrgExceptionsAndRepos determines which orgs and repos a set of queries cover . Output is returned as a mapping from included org - > repos excluded in the org and a set of included repos .
1152	QueryMap creates a QueryMap from TideQueries
1153	ForRepo returns the tide queries that apply to a repo .
1154	Validate returns an error if any contexts are listed more than once in the config .
1155	GetTideContextPolicy parses the prow config to find context merge options . If none are set it will use the prow jobs configured and use the default github combined status . Otherwise if set it will use the branch protection setting or the listed jobs .
1156	IsOptional checks whether a context can be ignored . Will return true if - context is registered as optional - required contexts are registered and the context provided is not required Will return false otherwise . Every context is required .
1157	MissingRequiredContexts discard the optional contexts and only look of extra required contexts that are not provided .
1158	ValidateWebhook ensures that the provided request conforms to the format of a GitHub webhook and the payload can be validated with the provided hmac secret . It returns the event type the event guid the payload of the request whether the webhook is valid or not and finally the resultant HTTP status code
1159	HelpProvider constructs the PluginHelp for this plugin that takes into account enabled repositories . HelpProvider defines the type for function that construct the PluginHelp for plugins .
1160	HandleEvent handles a GitHub PR event to determine if the needs - rebase label needs to be added or removed . It depends on GitHub mergeability check to decide the need for a rebase .
1161	HandleAll checks all orgs and repos that enabled this plugin for open PRs to determine if the needs - rebase label needs to be added or removed . It depends on GitHub s mergeability check to decide the need for a rebase .
1162	NewDryRunProwJobClient creates a new client that uses deck as a read - only proxy for ProwJob data
1163	Create does nothing on a dry - run client
1164	Update does nothing on a dry - run client
1165	UpdateStatus does nothing on a dry - run client
1166	Delete does nothing on a dry - run client
1167	DeleteCollection does nothing on a dry - run client
1168	Get does nothing on a dry - run client
1169	List reaches out to deck to retrieve the ProwJobs on the cluster via proxy
1170	Watch does nothing on a dry - run client
1171	Patch does nothing on a dry - run client
1172	hasSynced returns true when every prowjob and pipeline informer has synced .
1173	Run starts threads workers returning after receiving a stop signal .
1174	runWorker dequeues to reconcile until the queue has closed .
1175	fromKey converts toKey back into its parts
1176	enqueueKey schedules an item for reconciliation
1177	finalState returns true if the prowjob has already finished
1178	description computes the ProwJobStatus description for this condition or falling back to a default if none is provided .
1179	prowJobStatus returns the desired state and description based on the pipeline status
1180	pipelineMeta builds the pipeline metadata from prow job definition
1181	sourceURL returns the source URL from prow jobs repository reference
1182	makePipelineGitResource creates a pipeline git resource from prow job
1183	makePipeline creates a PipelineRun from a prow job using the PipelineRunSpec defined in the prow job
1184	matchingConfigs filters irrelevant RequireMtchingLabel configs from the list of all configs . branch should be empty for Issues and non - empty for PRs . label should be omitted in the case of open and reopen actions .
1185	SuggestCodeChange returns code suggestions for a given lint . Problem Returns empty string if no suggestion can be given
1186	ServeExternalPluginHelp returns a HandlerFunc that serves plugin help information that is provided by the specified ExternalPluginHelpProvider .
1187	protect protects branches specified in the presubmit and branch - protection config sections .
1188	UpdateOrg updates all repos in the org with the specified defaults
1189	UpdateRepo updates all branches in the repo with the specified defaults
1190	UpdateBranch updates the branch with the specified configuration
1191	LoadConfig loads options from serialized config
1192	Run uploads artifacts with the specified options forever . Sends a stop message to the artifact uploader when it is interrupted .
1193	Start creates goroutines to monitor the files that contain the secret value .
1194	reloadSecret will begin polling the secret file at the path . If the first load fails Start with return the error and abort . Future load failures will log the failure message but continue attempting to load .
1195	GetSecret returns the value of a secret stored in a map .
1196	setSecret sets a value in a map of secrets .
1197	GetTokenGenerator returns a function that gets the value of a given secret .
1198	New creates a new History struct with the specificed recordLog size limit .
1199	Record appends an entry to the recordlog specified by the poolKey .
1200	ServeHTTP serves a JSON mapping from pool key - > sorted records for the pool .
1201	Flush writes the action history to persistent storage if configured to do so .
1202	AllRecords generates a map from pool key - > sorted records for the pool .
1203	MakeCommand returns a download command .
1204	CheckFlags looks for comments matching regexes
1205	ReceiveComment adds matching comments to InfluxDB
1206	NewController constructs a new instance of the crier controller .
1207	Run is the main path of execution for the controller loop .
1208	runWorker executes the loop to process new items added to the queue .
1209	New creates a LocalGit and a git . Client pointing at it .
1210	MakeFakeRepo creates the given repo and makes an initial commit .
1211	AddCommit adds the files to a new commit in the repo .
1212	CheckoutNewBranch does git checkout - b .
1213	Checkout does git checkout .
1214	RevParse does git rev - parse .
1215	CleanAll cleans all of the resources for all of the regions visible to the provided AWS session .
1216	optionsForRepo gets the plugins . Lgtm struct that is applicable to the indicated repo .
1217	getChangedFiles returns all the changed files for the provided pull request .
1218	loadReviewers returns all reviewers and approvers from all OWNERS files that cover the provided filenames .
1219	NewController returns a new gerrit controller client
1220	SaveLastSync saves last sync time in Unix to a volume
1221	Sync looks for newly made gerrit changes and creates prowjobs according to specs
1222	AddFlags adds event to the command help
1223	CheckFlags is delegated to EventMatcher
1224	ReceiveIssueEvent adds issue events to InfluxDB
1225	Upload uploads all of the data in the uploadTargets map to GCS in parallel . The map is keyed on GCS path under the bucket
1226	FileUploadWithMetadata returns an UploadFunc which copies all data from the file on disk into GCS object and also sets the provided metadata fields on the object .
1227	DataUploadWithMetadata returns an UploadFunc which copies all data from src reader into GCS and also sets the provided metadata fields onto the object .
1228	HasLabel checks if label is in the label set issueLabels .
1229	ImageTooBig checks if image is bigger than github limits
1230	LevelFromPermissions adapts a repo permissions struct to the appropriate permission level used elsewhere
1231	PermissionsFromLevel adapts a repo permission level to the appropriate permissions struct used elsewhere
1232	newProwJobs returns a ProwJobs
1233	GetApplicable returns the subset of blockers applicable to the specified branch .
1234	serve starts a http server and serves Jenkins logs and prometheus metrics . Meant to be called inside a goroutine .
1235	NewCountPlugin counts events and number of issues in given state and for how long .
1236	ReceiveComment creates a fake commented event
1237	helper to update disk metrics
1238	LogStatus outputs current status of all resources
1239	SyncConfig updates resource list from a file
1240	Metric returns a metric object with metrics filled in
1241	FormatURL will return the GH markdown to show the image for a specific dogURL .
1242	runAndSkipJobs executes the config . Presubmits that are requested and posts skipped statuses for the reporting jobs that are skipped
1243	validateContextOverlap ensures that there will be no overlap in contexts between a set of jobs running and a set to skip
1244	RunRequested executes the config . Presubmits that are requested
1245	skipRequested posts skipped statuses for the config . Presubmits that are requested
1246	Match is labeled with label
1247	Match is unlabeled
1248	AddFlags injects GitHub options into the given FlagSet .
1249	AddFlagsWithoutDefaultGitHubTokenPath injects GitHub options into the given Flagset without setting a default for for the githubTokenPath allowing to use an anonymous GitHub client
1250	Validate validates GitHub options .
1251	GitHubClientWithLogFields returns a GitHub client with extra logging fields
1252	GitHubClient returns a GitHub client .
1253	GitClient returns a Git client .
1254	toMap returns maps the file name to its coverage for faster retrieval & membership check
1255	findChanges compares the newList of coverage against the base list and returns the result
1256	CreateDatabase for the MySQLConfig
1257	ShouldReport returns if this prowjob should be reported by the github reporter
1258	Report will report via reportlib
1259	MarkComplete figures out which ARNs were in previous passes but not this one and eliminates them . It should only be run after all resources have been marked .
1260	NewJobAgent is a JobAgent constructor .
1261	Start will start the job and periodically update it .
1262	Jobs returns a thread - safe snapshot of the current job state .
1263	ProwJobs returns a thread - safe snapshot of the current prow jobs .
1264	GetProwJob finds the corresponding Prowjob resource from the provided job name and build ID
1265	GetJobLog returns the job logs works for both kubernetes and jenkins agent types .
1266	unionStrings merges the parent and child items together
1267	Apply returns a policy that merges the child into the parent
1268	GetOrg returns the org config after merging in any global policies .
1269	GetRepo returns the repo config after merging in any org policies .
1270	GetBranch returns the branch config after merging in any repo policies .
1271	GetPolicy returns the protection policy for the branch after merging in presubmits .
1272	UpdateIssueEvents fetches all events until we find the most recent we have in db and saves everything in database
1273	enqueueKey schedules an item for reconciliation .
1274	prowJobStatus returns the desired state and description based on the build status .
1275	buildEnv constructs the environment map for the job
1276	defaultArguments will append each arg to the template except where the argument name is already defined .
1277	defaultEnv adds the map of environment variables to the container except keys already defined .
1278	injectSource adds the custom source container to call clonerefs correctly . Returns true if it added this container Does nothing if the build spec predefines Source
1279	injectedSteps returns initial containers a final container and an additional volume .
1280	determineTimeout decides the timeout value used for build
1281	makeBuild creates a build from the prowjob using the prowjob s buildspec .
1282	newLabels creates a new Label for each label in the issue
1283	newAssignees creates a new Label for each label in the issue
1284	NewIssueComment creates a Comment from a github . IssueComment
1285	messageFilter builds a filter for jobs based on the messageBody matching the trigger regex of the jobs .
1286	IsSuccess means the job passed
1287	IsFailure means the job completed with problems .
1288	IsAborted means something stopped the job before it could finish .
1289	ProwJobID extracts the ProwJob identifier for the Jenkins build in order to correlate the build with a ProwJob . If the build has an empty PROW_JOB_ID it didn t start by prow .
1290	BuildID extracts the build identifier used for placing and discovering build artifacts . This identifier can either originate from tot or the snowflake library depending on how the Jenkins operator is configured to run . We return an empty string if we are dealing with a build that does not have the ProwJobID set explicitly as in that case the Jenkins build has not started by prow .
1291	CrumbRequest requests a CSRF protection token from Jenkins to use it in subsequent requests . Required for Jenkins masters that prevent cross site request forgery exploits .
1292	measure records metrics about the provided method path and code . start needs to be recorded before doing the request .
1293	GetSkipMetrics fetches the data found in the provided path . It returns the content of the response or any errors that occurred during the request or http errors . Metrics will not be gathered for this request .
1294	Get fetches the data found in the provided path . It returns the content of the response or any errors that occurred during the request or http errors .
1295	request executes a request with the provided method and path . It retries on transport failures and 500s . measure is provided to enable or disable gathering metrics for specific requests to avoid high - cardinality metrics .
1296	doRequest executes a request with the provided method and path exactly once . It sets up authentication if the jenkins client is configured accordingly . It s up to callers of this function to build retries and error handling .
1297	getJobName generates the correct job name for this job type
1298	getBuildPath builds a path to trigger a regular build for this job
1299	GetJobInfo retrieves Jenkins job information
1300	JobParameterized tells us if the Jenkins job for this ProwJob is parameterized
1301	EnsureBuildableJob attempts to detect a job that hasn t yet ran and populated its parameters . If detected it tries to run a build until the job parameters are processed then it aborts the build .
1302	LaunchBuild launches a regular or parameterized Jenkins build depending on whether or not we have params to POST
1303	Build triggers a Jenkins build for the provided ProwJob . The name of the ProwJob is going to be used as the Prow Job ID parameter that will help us track the build before it s scheduled by Jenkins .
1304	BuildFromSpec triggers a Jenkins build for the provided ProwJobSpec . prowJobID helps us track the build before it s scheduled by Jenkins .
1305	GetEnqueuedBuilds lists all enqueued builds for the provided jobs .
1306	Abort aborts the provided Jenkins build for job .
1307	PresubmitToJobSpec generates a downwardapi . JobSpec out of a Presubmit . Useful for figuring out GCS paths when parsing jobs out of a prow config .
1308	PostsubmitToJobSpec generates a downwardapi . JobSpec out of a Postsubmit . Useful for figuring out GCS paths when parsing jobs out of a prow config .
1309	PeriodicToJobSpec generates a downwardapi . JobSpec out of a Periodic . Useful for figuring out GCS paths when parsing jobs out of a prow config .
1310	GetBuildID calls out to tot in order to vend build identifier for the job
1311	listGcsObjects get the slice of gcs objects under a given path
1312	FindBaseProfile finds the coverage profile file from the latest healthy build stored in given gcs directory
1313	sortBuilds converts all build from str to int and sorts all builds in descending order and returns the sorted slice
1314	GetAll retrieves all regions from the AWS API
1315	NewEventClient creates an EventClient struct . This should be used once per webhook event .
1316	PruneComments fetches issue comments if they have not yet been fetched for this webhook event and then deletes any bot comments indicated by the func shouldPrune .
1317	FormatResponse nicely formats a response to a generic reason .
1318	FormatSimpleResponse formats a response that does not warrant additional explanation in the details section .
1319	FormatICResponse nicely formats a response to an issue comment .
1320	FormatResponseRaw nicely formats a response for one does not have an issue comment
1321	Validate ensures that the set of options are self - consistent and valid .
1322	Encode will encode the set of options in the format that is expected for the configuration environment variable .
1323	RegisterIssueHandler registers a plugin s github . IssueEvent handler .
1324	RegisterIssueCommentHandler registers a plugin s github . IssueCommentEvent handler .
1325	RegisterPullRequestHandler registers a plugin s github . PullRequestEvent handler .
1326	RegisterStatusEventHandler registers a plugin s github . StatusEvent handler .
1327	RegisterPushEventHandler registers a plugin s github . PushEvent handler .
1328	RegisterReviewEventHandler registers a plugin s github . ReviewEvent handler .
1329	RegisterReviewCommentEventHandler registers a plugin s github . ReviewCommentEvent handler .
1330	RegisterGenericCommentHandler registers a plugin s github . GenericCommentEvent handler .
1331	NewAgent bootstraps a new config . Agent struct from the passed dependencies .
1332	InitializeCommentPruner attaches a commentpruner . EventClient to the agent to handle pruning comments .
1333	CommentPruner will return the commentpruner . EventClient attached to the agent or an error if one is not attached .
1334	Load attempts to load config from the path . It returns an error if either the file can t be read or the configuration is invalid .
1335	Config returns the agent current Configuration .
1336	Set attempts to set the plugins that are enabled on repos . Plugins are listed as a map from repositories to the list of plugins that are enabled on them . Specifying simply an org name will also work and will enable the plugin on all repos in the org .
1337	Start starts polling path for plugin config . If the first attempt fails then start returns the error . Future errors will halt updates but not stop .
1338	GenericCommentHandlers returns a map of plugin names to handlers for the repo .
1339	IssueHandlers returns a map of plugin names to handlers for the repo .
1340	IssueCommentHandlers returns a map of plugin names to handlers for the repo .
1341	PullRequestHandlers returns a map of plugin names to handlers for the repo .
1342	ReviewEventHandlers returns a map of plugin names to handlers for the repo .
1343	ReviewCommentEventHandlers returns a map of plugin names to handlers for the repo .
1344	StatusEventHandlers returns a map of plugin names to handlers for the repo .
1345	PushEventHandlers returns a map of plugin names to handlers for the repo .
1346	EventsForPlugin returns the registered events for the passed plugin .
1347	insertLink attempts to set metadata . links . resultstore . url to viewURL . returns true if started metadata was updated .
1348	HelpProvider construct the pluginhelp . PluginHelp for this plugin .
1349	getPatch gets the patch for the provided PR and creates a local copy of it . It returns its location in the filesystem and any encountered error .
1350	releaseNoteNoteFromParentPR gets the release note from the parent PR and formats it as per the PR template so that it can be copied to the cherry - pick PR .
1351	ValidatePayload ensures that the request payload signature matches the key .
1352	PayloadSignature returns the signature that matches the payload .
1353	updateString will return true and set have to want iff they are set and different .
1354	updateBool will return true and set have to want iff they are set and different .
1355	configureOrgMeta will update github to have the non - nil wanted metadata values .
1356	configureTeamRepos updates the list of repos that the team has permissions for when necessary
1357	ShouldReport tells if a prowjob should be reported by this reporter
1358	Run will upload files to GCS as prescribed by the options . Any extra files can be passed as a parameter and will have the prefix prepended to their destination in GCS so the caller can operate relative to the base of the GCS dir .
1359	Format implements logrus . Formatter s Format . We allocate a new Fields map in order to not modify the caller s Entry as that is not a thread safe operation .
1360	FindLabels returns the list of labels matching the regex
1361	AddFlags binds flags to options .
1362	NewAgent returns a new GitHub OAuth Agent .
1363	HandleLogin handles GitHub login request from front - end . It starts a new git oauth session and redirect user to GitHub OAuth end - point for authentication .
1364	HandleLogout handles GitHub logout request from front - end . It invalidates cookie sessions and redirect back to the front page .
1365	Handles server errors .
1366	FromItem implements the Object interface
1367	GetItems implements the Collection interface
1368	SetItems implements the Collection interface
1369	UnmarshalText validates the text is a valid string
1370	IsAssignee checks if a user is assigned to the issue .
1371	IsAuthor checks if a user is the author of the issue .
1372	HasLabel checks if an issue has a given label .
1373	Branch returns the name of the branch to which the user pushed .
1374	truncate converts really long messages into really ... messages .
1375	reportStatus should be called on any prowjob status changes
1376	parseIssueComments returns a list of comments to delete a list of table entries and the ID of the comment to update . If there are no table entries then don t make a new comment . Otherwise if the comment to update is 0 create a new comment .
1377	createComment take a ProwJob and a list of entries generated with createEntry and returns a nicely formatted comment . It may fail if template execution fails .
1378	Config returns the lens s configuration .
1379	Callback does nothing .
1380	FormatRecord describes the record in a human - readable manner for inclusion into build logs
1381	Namespace returns a copy of the client pointing at the specified namespace .
1382	NewFakeClient creates a client that doesn t do anything . If you provide a deck URL then the client will hit that for the supported calls .
1383	NewClientInCluster creates a Client that works from within a pod .
1384	NewClientFromFile reads a Cluster object at clusterPath and returns an authenticated client using the keys within .
1385	NewClient returns an authenticated Client using the keys in the Cluster .
1386	ReplaceConfigMap puts the configmap into name . Analogous to kubectl replace configmap If config . Namespace is empty the client s specified namespace is used . Returns the content returned by the apiserver
1387	GetDiskUsage wraps syscall . Statfs for usage in GCing the disk
1388	GetATime the atime for a file logging errors instead of failing and returning defaultTime instead
1389	RegisterLens registers new viewers
1390	GetLens returns a Lens by name if it exists ; otherwise it returns an error .
1391	LastNLines reads the last n lines from an artifact .
1392	NewClient creates a slack client with an API token .
1393	WriteMessage adds text to channel
1394	MarkAndSweep looks at the provided set and removes resources older than its TTL that have been previously tagged .
1395	ListAll populates a set will all available NATGateway resources .
1396	NewClient creates a Boskos client for the specified URL and resource owner . Clients created with this function default to retrying failed connection attempts three times with a ten second pause between each attempt .
1397	public method Acquire asks boskos for a resource of certain type in certain state and set the resource to dest state . Returns the resource on success .
1398	AcquireWait blocks until Acquire returns the specified resource or the provided context is cancelled or its deadline exceeded .
1399	AcquireByState asks boskos for a resources of certain type and set the resource to dest state . Returns a list of resources on success .
1400	ReleaseAll returns all resources hold by the client back to boskos and set them to dest state .
1401	ReleaseOne returns one of owned resources back to boskos and set it to dest state .
1402	UpdateAll signals update for all resources hold by the client .
1403	SyncAll signals update for all resources hold by the client .
1404	UpdateOne signals update for one of the resources hold by the client .
1405	Metric will query current metric for target resource type . Return a common . Metric object on success .
1406	HasResource tells if current client holds any resources
1407	DialContext connects to the address on the named network using the provided context .
1408	NewDashboardAgent creates a new user dashboard agent .
1409	QueryPullRequests is a query function that returns a list of open pull requests owned by the user whose access token is consumed by the github client .
1410	GetHeadContexts returns the status checks contexts of the head commit of the PR .
1411	ConstructSearchQuery returns the GitHub search query string for PRs that are open and authored by the user passed . The search is scoped to repositories that are configured with either Prow or Tide .
1412	NewBundledStates is the constructor for BundledStates
1413	ReceiveEvent is called when something happens on an issue . The state for that issue is updated .
1414	ages return the age of each active states
1415	Percentile returns given percentile for age of all active states at time t
1416	NewMetrics creates a new set of metrics for the Jenkins operator .
1417	NewDiskCache creates a GitHub cache RoundTripper that is backed by a disk cache .
1418	NewMemCache creates a GitHub cache RoundTripper that is backed by a memory cache .
1419	NewFromCache creates a GitHub cache RoundTripper that is backed by the specified httpcache . Cache implementation .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners consturcts a new Owners instance . filenames is the slice of files changed .
1423	GetApprovers returns a map from ownersFiles - > people that are approvers in them
1424	GetAllPotentialApprovers returns the people from relevant owners files needed to get the PR approved
1425	GetReverseMap returns a map from people - > OWNERS files for which they are an approver
1426	temporaryUnapprovedFiles returns the list of files that wouldn t be approved by the given set of approvers .
1427	KeepCoveringApprovers finds who we should keep as suggested approvers given a pre - selection knownApprovers must be a subset of potentialApprovers .
1428	GetSuggestedApprovers solves the exact cover problem finding an approver capable of approving every OWNERS file in the PR
1429	GetOwnersSet returns a set containing all the Owners files necessary to get the PR approved
1430	GetShuffledApprovers shuffles the potential approvers so that we don t always suggest the same people .
1431	String creates a link for the approval . Use Login if you just want the name .
1432	IntersectSetsCase runs the intersection between to sets . String in a case - insensitive way . It returns the name with the case of one .
1433	NewApprovers create a new Approvers with no approval .
1434	AddLGTMer adds a new LGTM Approver
1435	RemoveApprover removes an approver from the list .
1436	AddAssignees adds assignees to the list
1437	GetCurrentApproversSetCased returns the set of approvers logins with the original cases .
1438	GetFilesApprovers returns a map from files - > list of current approvers .
1439	NoIssueApprovers returns the list of people who have no - issue approved the pull - request . They are included in the list iff they can approve one of the files .
1440	UnapprovedFiles returns owners files that still need approval
1441	GetFiles returns owners files that still need approval .
1442	IsApproved returns a bool indicating whether the PR is fully approved . If a human manually added the approved label this returns true ignoring normal approval rules .
1443	ListApprovals returns the list of approvals
1444	ListNoIssueApprovals returns the list of no - issue approvals
1445	GenerateTemplate takes a template name and data and generates the corresponding string .
1446	Writes the golang text template at templatePath to outputPath using the given data
1447	Labels returns a sorted list of labels unique by name
1448	LabelsForTarget returns labels that have a given target
1449	LoadConfig reads the yaml config at path
1450	loadLabels returns what labels exist in github
1451	Delete the label
1452	Create the label
1453	classifyLabels will put labels into the required archaic dead maps as appropriate .
1454	linkify transforms a string into a markdown anchor link I could not find a proper doc so rules here a mostly empirical
1455	NewCache returns a new Cache given the root directory that should be used on disk for cache storage
1456	KeyToPath converts a cache entry key to a path on disk
1457	file path helper
1458	Put copies the content reader until the end into the cache at key if contentSHA256 is not then the contents will only be stored in the cache if the content s hex string SHA256 matches
1459	Get provides your readHandler with the contents at key
1460	Delete deletes the file at key
1461	NewGCSArtifact returns a new GCSArtifact with a given handle canonical link and path within the job
1462	Size returns the size of the artifact in GCS
1463	ReadAll will either read the entire file or throw an error if file size is too big
1464	ReadTail reads the last n bytes from a file in GCS
1465	gzipped returns whether the file is gzip - encoded in GCS
1466	optionsForRepo gets the plugins . Welcome struct that is applicable to the indicated repo .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if there are both branches and skip_branches are unset
1471	Intersects checks if other Brancher would trigger for the same branch .
1472	ShouldRun determines if we can know for certain that the job should run . We can either know for certain that the job should or should not run based on the matcher or we can not be able to determine that fact at all .
1473	RunsAgainstChanges returns true if any of the changed input paths match the run_if_changed regex .
1474	CouldRun determines if the postsubmit could run against a specific base ref
1475	ShouldRun determines if the postsubmit should run in response to a set of changes . This is evaluated lazily if necessary .
1476	CouldRun determines if the presubmit could run against a specific base ref
1477	ShouldRun determines if the presubmit should run against a specific base ref or in response to a set of changes . The latter mechanism is evaluated lazily if necessary .
1478	GetPresubmit returns the presubmit job for the provided repo and job name .
1479	SetPresubmits updates c . Presubmits to jobs after compiling and validating their regexes .
1480	SetPostsubmits updates c . Postsubmits to jobs after compiling and validating their regexes .
1481	AllPresubmits returns all prow presubmit jobs in repos . if repos is empty return all presubmits .
1482	AllPostsubmits returns all prow postsubmit jobs in repos . if repos is empty return all postsubmits .
1483	AllPeriodics returns all prow periodic jobs .
1484	ClearCompiledRegexes removes compiled regexes from the presubmits useful for testing when deep equality is needed between presubmits
1485	Empty checks if a SimpleConfig could be considered empty
1486	NewClient is the constructor for Client
1487	ExpandAlias returns members of an alias
1488	ExpandAliases returns members of multiple aliases duplicates are pruned
1489	ParseFullConfig will unmarshal OWNERS file s content into a FullConfig Returns an error if the content cannot be unmarshalled
1490	ParseSimpleConfig will unmarshal an OWNERS file s content into a SimpleConfig Returns an error if the content cannot be unmarshalled
1491	decodeOwnersMdConfig will parse the yaml header if it exists and unmarshal it into a singleOwnersConfig . If no yaml header is found do nothing Returns an error if the file cannot be read or the yaml header is found but cannot be unmarshalled .
1492	findOwnersForFile returns the OWNERS file path furthest down the tree for a specified file using ownerMap to check for entries
1493	FindApproverOwnersForFile returns the OWNERS file path furthest down the tree for a specified file that contains an approvers section
1494	FindReviewersOwnersForFile returns the OWNERS file path furthest down the tree for a specified file that contains a reviewers section
1495	FindLabelsForFile returns a set of labels which should be applied to PRs modifying files under the given path .
1496	IsNoParentOwners checks if an OWNERS file path refers to an OWNERS file with NoParentOwners enabled .
1497	Ratio returns the percentage of statements that are covered
1498	FromPayload set the PeriodicProwJobEvent from the PubSub message payload .
1499	ToMessage generates a PubSub Message from a PeriodicProwJobEvent .
1500	UnmarshalText returns an error if text ! = secret or closed
1501	compileApplicableBlockades filters the specified blockades and compiles those that apply to the repo .
1502	calculateBlocks determines if a PR should be blocked and returns the summary describing the block .
1503	MergeMultipleProfiles merges more than two profiles together . MergeMultipleProfiles is equivalent to calling MergeProfiles on pairs of profiles until only one profile remains .
1504	AddFlags adds flags to the FlagSet that populate the wrapper options struct provided .
1505	processNextItem attempts to upload container logs to GCS
1506	handleErr checks if an error happened and makes sure we will retry later .
1507	AggregateFilter builds a filter that evaluates the child filters in order and returns the first match
1508	FilterPresubmits determines which presubmits should run and which should be skipped by evaluating the user - provided filter .
1509	MakeCommand returns a filter command .
1510	Push adds event to the heap
1511	Pop retrieves the last added event
1512	NewFakeOpenPluginWrapper is the constructor for FakeOpenPluginWrapper
1513	ReceiveIssue creates a fake opened event
1514	Validate ensures that the configuration options are valid
1515	Complete internalizes command line arguments
1516	Set parses out overrides from user input
1517	ensure will ensure binary is on path or return an error with install message .
1518	output returns the trimmed output of running args or an err on non - zero exit .
1519	projects returns the list of accessible gcp projects
1520	selectProject returns the user - selected project defaulting to the current gcloud one .
1521	createCluster causes gcloud to create a cluster in project returning the context name
1522	createContext has the user create a context .
1523	contextConfig returns the loader and config which can create a clientconfig .
1524	selectContext allows the user to choose a context This may involve creating a cluster
1525	applyCreate will dry - run create and then pipe this to kubectl apply . If we use the create verb it will fail if the secret already exists . And kubectl will reject the apply verb with a secret .
1526	determineSkippedPresubmits identifies the largest set of contexts we can actually post skipped contexts for given a set of presubmits we re triggering . We don t want to skip a job that posts a context that will be written to by a job we just identified for triggering or the skipped context will override the triggered one
1527	Dispatch receives channels to each type of events and dispatch them to each plugins .
1528	CreateIssue tries to create and return a new github issue .
1529	CreateStatus creates or updates a status context on the indicated reference .
1530	ForEachPR iterates over all PRs that fit the specified criteria calling the munge function on every PR . If the munge function returns a non - nil error ForEachPR will return immediately with a non - nil error unless continueOnError is true in which case an error will be logged and the remaining PRs will be munged .
1531	GetCollaborators returns all github users who are members or outside collaborators of the repo .
1532	GetCombinedStatus retrieves the CombinedStatus for the specified reference .
1533	GetIssues gets all the issues in a repo that meet the list options .
1534	GetRepoLabels gets all the labels that valid in the specified repo .
1535	GetUser gets the github user with the specified login or the currently authenticated user . To get the currently authenticated user specify a login of .
1536	Check if the config provided through the flags take valid values .
1537	Create logfile for systemd service in outputDir with the given journalctl outputMode .
1538	createFullSystemdLogfile creates logfile for full systemd journal in the outputDir .
1539	Create logfiles for systemd services in outputDir .
1540	Copy logfiles specific to this node based on the cloud - provider system services etc to a temporary directory . Also create logfiles for systemd services if journalctl is present . We do not expect this function to see an error .
1541	Write a marker file to GCS named after this node to indicate logexporter s success . The directory to which we write this file can then be used as a registry to quickly fetch the list of nodes on which logexporter succeeded .
1542	MakeCommand returns a junit command .
1543	warnDeprecated prints a deprecation warning for a particular configuration option .
1544	Describe generates a human readable description of the behavior that this configuration specifies .
1545	TriggerFor finds the Trigger for a repo if one exists a trigger can be listed for the repo itself or for the owning organization
1546	EnabledReposForPlugin returns the orgs and repos that have enabled the passed plugin .
1547	EnabledReposForExternalPlugin returns the orgs and repos that have enabled the passed external plugin .
1548	SetDefaults sets default options for config updating
1549	validatePlugins will return error if there are unknown or duplicated plugins .
1550	ShouldReport returns if this prowjob should be reported by the gerrit reporter
1551	Run clones the refs under the prescribed directory and optionally configures the git username and email in the repository as well .
1552	PathForRefs determines the full path to where refs should be cloned
1553	gitCtxForRefs creates a gitCtx based on the provide refs and baseDir .
1554	commandsForBaseRef returns the list of commands needed to initialize and configure a local git directory as well as fetch and check out the provided base ref .
1555	gitTimestampEnvs returns the list of environment variables needed to override git s author and commit timestamps when creating new commits .
1556	gitRevParse returns current commit from HEAD in a git tree
1557	commandsForPullRefs returns the list of commands needed to fetch and merge any pull refs as well as submodules . These commands should be run only after the commands provided by commandsForBaseRef have been run successfully . Each merge commit will be created at sequential seconds after fakeTimestamp . It s recommended that fakeTimestamp be set to the timestamp of the base ref . This enables reproducible timestamps and git tree digests every time the same set of base and pull refs are used .
1558	ProduceCovList summarizes profiles and returns the result
1559	popRandom randomly selects an element of set and pops it .
1560	resolve loads all of the clients we need and caches them for future calls .
1561	ProwJobClientset returns a ProwJob clientset for use in informer factories .
1562	ProwJobClient returns a ProwJob client .
1563	InfrastructureClusterClient returns a Kubernetes client for the infrastructure cluster .
1564	BuildClusterClients returns Pod clients for build clusters .
1565	Age gives the time since the state has been activated .
1566	ReceiveEvent checks if the event matches the exit criteria . Returns a new InactiveState or self and true if it changed .
1567	ReceiveEvent checks if the event matches the entry criteria Returns a new ActiveState or self and true if it changed .
1568	Active is true if all the states are active .
1569	Age returns the time since all states have been activated . It will panic if any of the state is not active .
1570	ReceiveEvent will send the event to each individual state and update them if they change .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig casts an Item object to a ResourcesConfig
1573	Copy returns a copy of the TypeToResources
1574	MakeCommand returns an aggregate command .
1575	incrementNumPendingJobs increments the amount of pending ProwJobs for the given job identifier
1576	setPreviousReportState sets the github key for PrevReportStates to current state . This is a work - around for plank - > crier migration to become seamless .
1577	SyncMetrics records metrics for the cached prowjobs .
1578	DumpProfile dumps the profiles given to writer in go coverage format .
1579	blocksEqual returns true if the blocks refer to the same code otherwise false . It does not care about Count .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New constructs a Spyglass object from a JobAgent a config . Agent and a storage Client .
1583	Lenses gets all views of all artifact files matching each regexp with a registered lens
1584	JobPath returns a link to the GCS directory for the job specified in src
1585	RunPath returns the path to the GCS directory for the job run specified in src .
1586	ExtraLinks fetches started . json and extracts links from metadata . links .
1587	needDemux returns whether there are any external plugins that need to get the present event .
1588	demuxExternal dispatches the provided payload to the external plugins .
1589	dispatch creates a new request using the provided payload and headers and dispatches the request to the provided endpoint .
1590	AddFlags adds state and percentiles to the command help
1591	CheckFlags configures which states to monitor
1592	ReceiveIssueEvent computes age percentiles and saves them to InfluxDB
1593	Load loads and parses the config at path .
1594	loadConfig loads one or multiple config files and returns a config object .
1595	yamlToConfig converts a yaml file into a Config object
1596	ReadFileMaybeGZIP wraps ioutil . ReadFile returning the decompressed contents if the file is gzipped or otherwise the raw contents
1597	finalizeJobConfig mutates and fixes entries for jobspecs
1598	validateComponentConfig validates the infrastructure component configuration
1599	ConfigPath returns the value for the component s configPath if provided explicitly or default otherwise .
1600	ValidateController validates the provided controller config .
1601	defaultJobBase configures common parameters currently Agent and Namespace .
1602	SetPresubmitRegexes compiles and validates all the regular expressions for the provided presubmits .
1603	setBrancherRegexes compiles and validates all the regular expressions for the provided branch specifiers .
1604	SetPostsubmitRegexes compiles and validates all the regular expressions for the provided postsubmits .
1605	Body creates a view for prow job metadata .
1606	NewBoskosHandler constructs the boskos handler .
1607	ErrorToStatus translates error into http code
1608	DumpProfile dumps the profile to the given file destination . If the destination is - it instead writes to stdout .
1609	LoadProfile loads a profile from the given filename . If the filename is - it instead reads from stdin .
1610	NewClient returns a client that talks to GitHub . It will fail if git is not in the PATH .
1611	SetCredentials sets credentials in the client to be used for pushing to or pulling from remote repositories .
1612	Checkout runs git checkout .
1613	CheckoutNewBranch creates a new branch and checks it out .
1614	Merge attempts to merge commitlike into the current branch . It returns true if the merge completes . It returns an error if the abort fails .
1615	CheckoutPullRequest does exactly that .
1616	Config runs git config .
1617	retryCmd will retry the command a few times with backoff . Use this for any commands that will be talking to GitHub such as clones or fetches .
1618	LabelsAndAnnotationsForSpec returns a minimal set of labels to add to prowjobs or its owned resources . User - provided extraLabels and extraAnnotations values will take precedence over auto - provided values .
1619	ProwJobToPod converts a ProwJob to a Pod that will run the tests .
1620	CloneLogPath returns the path to the clone log file in the volume mount . CloneLogPath returns the path to the clone log file in the volume mount .
1621	cloneEnv encodes clonerefs Options into json and puts it into an environment variable
1622	sshVolume converts a secret holding ssh keys into the corresponding volume and mount . This is used by CloneRefs to attach the mount to the clonerefs container .
1623	InjectEntrypoint will make the entrypoint binary in the tools volume the container s entrypoint which will output to the log volume .
1624	PlaceEntrypoint will copy entrypoint from the entrypoint image to the tools volume
1625	kubeEnv transforms a mapping of environment variables into their serialized form for a PodSpec sorting by the name of the env vars
1626	Client returns a Kubernetes client .
1627	handle interacts with GitHub to drive the pull request to the proper state by adding and removing comments and labels . If a PR has a WIP prefix it needs an explanatory comment and label . Otherwise neither should be present .
1628	SendHook sends a GitHub event of type eventType to the provided address .
1629	Clean by janitor script
1630	async janitor goroutine
1631	Run will block listening to all subscriptions and return once the context is cancelled or one of the subscription has a unrecoverable error .
1632	specToStarted translate a jobspec into a started struct optionally overwrite RepoVersion with provided mainRefSHA
1633	Run will start the initupload job to upload the artifacts logs and clone status .
1634	hasPRChanged indicates that the code diff may have changed .
1635	UpdateIssues downloads new issues and saves in database
1636	handleReviewEvent should only handle reviews that have no approval command . Reviews with approval commands will be handled by handleGenericCommentEvent .
1637	Returns associated issue or 0 if it can t find any . This is really simple and could be improved later .
1638	optionsForRepo gets the plugins . Approve struct that is applicable to the indicated repo .
1639	localOnlyMain contains logic used only when running locally and is mutually exclusive with prodOnlyMain .
1640	summarize summarizes all items in the Group and stores the result
1641	Subset returns the subset obtained through applying filter
1642	ListDirectories gets a list a sub - directories that contains source code .
1643	readRequest extracts the request from the AdmissionReview reader
1644	handle reads the request and writes the response
1645	writeResponse gets the response from onlyUpdateStatus and writes it to w .
1646	onlyUpdateStatus returns the response to the request
1647	convertSuiteMeta converts a junit result in gcs to a ResultStore Suite .
1648	NewHealth creates a new health request multiplexer and starts serving the liveness endpoint on the given port
1649	ServeReady starts serving the readiness endpoint
1650	NewController makes a Controller out of the given clients .
1651	newExpectedContext creates a Context with Expected state .
1652	contextsToStrings converts a list Context to a list of string
1653	filterSubpools filters non - pool PRs out of the initially identified subpools deleting any pools that become empty . See filterSubpool for filtering details .
1654	filterSubpool filters PRs from an initially identified subpool returning the filtered subpool . If the subpool becomes empty nil is returned to indicate that the subpool should be deleted .
1655	poolPRMap collects all subpool PRs into a map containing all pooled PRs .
1656	unsuccessfulContexts determines which contexts from the list that we care about are failed . For instance we do not care about our own context . If the branchProtection is set to only check for required checks we will skip all non - required tests . If required tests are missing from the list they will be added to the list of failed contexts .
1657	accumulate returns the supplied PRs sorted into three buckets based on their accumulated state across the presubmits .
1658	tryMerge attempts 1 merge and returns a bool indicating if we should try to merge the remaining PRs and possibly an error .
1659	prChanges gets the files changed by the PR either from the cache or by querying GitHub .
1660	prune removes any cached file changes that were not used since the last prune .
1661	dividePool splits up the list of pull requests and prow jobs into a group per repo and branch . It only keeps ProwJobs that match the latest branch .
1662	AggregateProfiles takes multiple coverage profiles and produces a new coverage profile that counts the number of profiles that hit a block at least once .
1663	countToBoolean converts a profile containing hit counts to instead contain only 1s or 0s .
1664	NewStorage instantiates a new Storage with a PersistenceLayer implementation If storage string is not empty it will read resource data from the file
1665	AddResource adds a new resource
1666	DeleteResource deletes a resource if it exists errors otherwise
1667	UpdateResource updates a resource if it exists errors otherwise
1668	GetResource gets an existing resource errors otherwise
1669	GetResources list all resources
1670	SyncResources will update resources every 10 mins . It will append newly added resources to ranch . Resources And try to remove newly deleted resources from ranch . Resources . If the newly deleted resource is currently held by a user the deletion will yield to next update cycle .
1671	ParseConfig reads in configPath and returns a list of resource objects on success .
1672	problemsInFiles runs buildifier on the files . It returns a map from the file to a list of problems with that file .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns a link to where pod logs are streamed
1675	ReadAt implements reading a range of bytes from the pod logs endpoint
1676	ReadAll reads all available pod logs failing if they are too large
1677	ReadAtMost reads at most n bytes
1678	ReadTail reads the last n bytes of the pod log
1679	newProblems compares the list of problems with the list of past comments on the PR to decide which are new .
1680	problemsInFiles runs golint on the files . It returns a map from the file to a map from the line in the patch to the problem .
1681	remove merged presets from a podspec
1682	undo merged presets from loaded presubmit and its children
1683	these are unnecessary and make the config larger so we strip them out
1684	monitorDiskAndEvict loops monitoring the disk evicting cache entries when the disk passes either minPercentBlocksFree until the disk is above evictUntilPercentBlocksFree
1685	difference returns a new orgRepoConfig that represents the set difference of the repos specified by the receiver and the parameter orgRepoConfigs .
1686	union returns a new orgRepoConfig that represents the set union of the repos specified by the receiver and the parameter orgRepoConfigs
1687	clearStaleComments deletes old comments that are no longer applicable .
1688	determineReleaseNoteLabel returns the label to be added based on the contents of the release - note section of a PR s body text .
1689	getReleaseNote returns the release note from a PR body assumes that the PR body followed the PR template
1690	NewClient creates a new client from a boskosClient interface
1691	Acquire gets a resource with associated leased resources
1692	ReleaseOne will release a resource as well as leased resources associated to it
1693	UpdateAll updates all the acquired resources with a given state
1694	GetGitHubClient creates a client for each token
1695	GetUsername finds the login for each token
1696	CreateTokenHandler parses the token and create a handler
1697	CreateTokenHandlers goes through the list of token files and create handlers
1698	String returns the string representation of a prow job identifier
1699	TerminateOlderPresubmitJobs aborts all presubmit jobs from the given list that have a newer version . It calls the cleanup callback for each job before updating its status as aborted .
1700	PushMetrics is meant to run in a goroutine and continuously push metrics to the provided endpoint .
1701	RateLimiter creates a ratelimiting queue for a given prow controller .
1702	checkExistingStatus will retrieve the current status of the DCO context for the provided SHA .
1703	checkExistingLabels will check the provided PR for the dco sign off labels returning bool s indicating whether the yes and the no label are present .
1704	1 . Check commit messages in the pull request for the sign - off string 2 . Check the existing status context value 3 . Check the existing PR labels 4 . If signed off apply appropriate labels and status context . 5 . If not signed off apply appropriate labels and status context and add a comment .
1705	MardkownSHAList prints the list of commits in a markdown - friendly way .
1706	PathForSpec determines the GCS path prefix for files uploaded for a specific job spec
1707	AliasForSpec determines the GCS path aliases for a job spec
1708	RootForSpec determines the root GCS path for storing artifacts about the provided job .
1709	NewSingleDefaultRepoPathBuilder returns a builder that handles the legacy path encoding where a path will contain org and repo for all but one default repo
1710	NewExplicitRepoPathBuilder returns a builder that handles the path encoding where a path will always have an explicit org_repo path segment
1711	RegisterSourceOrDie registers a source of auto - filed issues .
1712	CreateAndSync is the main workhorse function of IssueCreator . It initializes the IssueCreator asks each source for its issues to sync and syncs the issues .
1713	loadCache loads the valid labels for the repo the currently authenticated user and the issue cache from github .
1714	setIntersect removes any elements from the first list that are not in the second returning the new set and the removed elements .
1715	sync checks to see if an issue is already on github and tries to create a new issue for it if it is not . True is returned iff a new issue is created .
1716	GetAWSCreds tries to fetch AWS credentials from a resource
1717	stopper returns a channel that remains open until an interrupt is received .
1718	newPipelineConfig returns a client and informer capable of mutating and monitoring the specified config .
1719	KubeClient returns a Kubernetes client .
1720	ProwJobClient returns a Kubernetes client .
1721	resolve sym links into the actual log directory for a particular test run
1722	reads specified JSON file in to data
1723	Lists the GCS directory paths immediately under prefix .
1724	Lists all GCS keys with given prefix .
1725	Gets all build ids for a job .
1726	FilterProfilePaths produces a new profile that removes either everything matching or everything not matching the provided paths depending on the value of include . Paths are interpreted as regular expressions . If include is true paths is treated as a whitelist ; otherwise it is treated as a blacklist .
1727	LoadSecrets loads multiple paths of secrets and add them in a map .
1728	LoadSingleSecret reads and returns the value of a single file .
1729	Set the bool according to the string .
1730	NewOpener returns an opener that can read GCS and local paths .
1731	IsNotExist will return true if the error is because the object does not exist .
1732	LogClose will attempt a close an log any error
1733	Writer returns a writer that overwrites the path .
1734	InitGitHubOAuthConfig creates an OAuthClient using GitHubOAuth config and a Cookie Store to retain user credentials .
1735	deltaDisplayed converts a coverage ratio delta into a string value to be displayed by coverage robot
1736	makeTable checks each coverage change and produce the table content for coverage bot post It also report on whether any coverage fells below the given threshold
1737	ContentForGitHubPost constructs the message covbot posts
1738	AddFlags parses options for github client
1739	CheckFlags looks for organization and project flags to configure the client
1740	getGitHubClient create the github client that we use to communicate with github
1741	limitsCheckAndWait make sure we have not reached the limit or wait
1742	FetchIssues from GitHub until latest time
1743	hasID look for a specific id in a list of events
1744	FetchIssueEvents from github and return the full list until it matches latest The entire last page will be included so you can have redundancy .
1745	These are the only actions indicating the code diffs may have changed .
1746	NewFetcher creates a new Fetcher and initializes the output channels
1747	fetchRecentIssues retrieves issues from DB but only fetches issues modified since last call
1748	fetchRecentEventsAndComments retrieves events from DB but only fetches events created since last call
1749	Fetch retrieves all types of events and push them to output channels
1750	Issues is the main work method of FlakyJobReporter . It fetches and parses flaky job data then syncs the top issues to github with the IssueCreator .
1751	Title yields the initial title text of the github issue .
1752	Labels returns the labels to apply to the issue created for this flaky job on github .
1753	ReadHTTP fetches file contents from a URL with retries .
1754	Return valid json .
1755	NewJobSpec converts a prowapi . ProwJobSpec invocation into a JobSpec
1756	ResolveSpecFromEnv will determine the Refs being tested in by parsing Prow environment variable contents
1757	EnvForSpec returns a mapping of environment variables to their values that should be available for a job spec
1758	EnvForType returns the slice of environment variables to export for jobType
1759	getRevisionFromRef returns a ref or sha from a refs object
1760	GetRevisionFromSpec returns a main ref or sha from a spec object
1761	helpProvider provides information on the plugin
1762	Use load to read a generated files config file and populate g with the commands . paths - from - repo commands are aggregated into repoPaths . It is the caller s responsibility to fetch these and load them via g . loadPaths .
1763	Use loadPaths to load a file of new - line delimited paths such as resolving file data referenced in a paths - from - repo command .
1764	Match determines whether a file given here by its full path is included in the generated files group .
1765	CreateDatabase creates and connects a new instance of an InfluxDB It is created based on the fields set in the configuration .
1766	mergeTags merges the default tags with the exta tags . Default will be overridden if it conflicts .
1767	tagsToWhere creates a where query to match tags element
1768	Push a point to the database . This appends to current batchpoint
1769	artifact constructs an artifact handle for the given job build
1770	serve starts a http server and serves prometheus metrics . Meant to be called inside a goroutine .
1771	gather metrics from plank . Meant to be called inside a goroutine .
1772	makeRequest renders a branch protection policy into the corresponding GitHub api request .
1773	makeReviews renders review policy into the corresponding GitHub api object . Returns nil if the policy is nil or approvals is nil or 0 .
1774	Header executes the header section of the template .
1775	Callback is used to retrieve new log segments
1776	logLinesAll reads all of an artifact and splits it into lines .
1777	LogViewTemplate executes the log viewer template ready for rendering
1778	DeepCopyObject implements runtime . Object interface
1779	FromItem implements Object interface
1780	SetItems implements Collection interface
1781	DeepCopyObject implements Collection interface
1782	useContext calls kubectl config use - context ctx
1783	currentContext returns kubectl config current - context
1784	command creates an exec . Cmd with Stderr piped to os . Stderr and returns the args
1785	describeCluster returns details from gcloud container clusters describe .
1786	Set appends a value onto the strslice .
1787	parseXML extracts a gcsDir object from XML . If this returns a nil gcsDir the XML indicated that this was not a directory at all .
1788	Render writes HTML representing this gcsDir to the provided output .
1789	Render writes HTML representing this Record to the provided output .
1790	Render writes HTML representing this Prefix to the provided output .
1791	Printf logs a formatted line to the logging output .
1792	NewClient returns a new gerrit client
1793	SetReview writes a review comment base on the change id + revision
1794	GetBranchRevision returns SHA of HEAD of a branch
1795	private handler implementation details
1796	NewTypeFilterWrapperPlugin is the constructor of TypeFilterWrapperPlugin
1797	AddFlags adds no - pull - requests and no - issues to the command help
1798	CheckFlags makes sure not both PR and issues are ignored
1799	AddFlags adds kube client flags to existing FlagSet .
1800	Validate validates Kubernetes client options .
1801	Client returns a ClientInterface based on the flags provided .
1802	newClientFromFlags creates a CRD rest client from provided flags .
1803	createRESTConfig for cluster API server pass empty config file for in - cluster
1804	registerResource sends a request to create CRDs and waits for them to initialize
1805	newDummyClient creates a in memory client representation for testing such that we do not need to use a kubernetes API Server .
1806	Update implements ClientInterface
1807	TrustedPullRequest returns whether or not the given PR should be tested . It first checks if the author is in the org then looks for ok - to - test label .
1808	buildAll ensures that all builds that should run and will be required are built
1809	Run will watch for the process being wrapped to exit and then post the status of that process and any artifacts to cloud storage .
1810	AddConfig adds a new config
1811	DeleteConfig deletes an existing config if it exists or fail otherwise
1812	UpdateConfig updates a given if it exists or fail otherwise
1813	GetConfig returns an existing if it exists errors out otherwise
1814	GetConfigs returns all configs
1815	SyncConfigs syncs new configs
1816	Adds the list of known types to the Scheme .
1817	NewController constructs a new controller to reconcile stauses on config change
1818	Run monitors the incoming configuration changes to determine when statuses need to be reconciled on PRs in flight when blocking presubmits change
1819	addedBlockingPresubmits determines new blocking presubmits based on a config update . New blocking presubmits are either brand - new presubmits or extant presubmits that are now reporting . Previous presubmits that reported but were optional that are no longer optional require no action as their contexts will already exist on PRs .
1820	removedBlockingPresubmits determines stale blocking presubmits based on a config update . Presubmits that are no longer blocking due to no longer reporting or being optional require no action as Tide will honor those statuses correctly .
1821	migratedBlockingPresubmits determines blocking presubmits that have had their status contexts migrated . This is a best - effort evaluation as we can only track a presubmit between configuration versions by its name . A presubmit migration that had its underlying job and context changed will be treated as a deletion and creation .
1822	Load loads the set of options preferring to use JSON config from an env var but falling back to command line flags if not possible .
1823	canExecuteConcurrently checks whether the provided ProwJob can be executed concurrently .
1824	getJenkinsJobs returns all the Jenkins jobs for all active prowjobs from the provided list . It handles deduplication .
1825	terminateDupes aborts presubmits that have a newer version . It modifies pjs in - place when it aborts .
1826	Throttle client to a rate of at most hourlyTokens requests per hour allowing burst tokens .
1827	NewClientWithFields creates a new fully operational GitHub client . With added logging fields . getToken is a generator for the GitHub access token to use . bases is a variadic slice of endpoints to use in order of preference . An endpoint is used when all preceding endpoints have returned a conn err . This should be used when using the ghproxy GitHub proxy cache to allow this client to bypass the cache if it is temporarily unavailable .
1828	NewClient creates a new fully operational GitHub client .
1829	NewDryRunClient creates a new client that will not perform mutating actions such as setting statuses or commenting but it will still query GitHub and use up API tokens . getToken is a generator the GitHub access token to use . bases is a variadic slice of endpoints to use in order of preference . An endpoint is used when all preceding endpoints have returned a conn err . This should be used when using the ghproxy GitHub proxy cache to allow this client to bypass the cache if it is temporarily unavailable .
1830	NewFakeClient creates a new client that will not perform any actions at all .
1831	Make a request with retries . If ret is not nil unmarshal the response body into it . Returns an error if the exit code is not one of the provided codes .
1832	requestRaw makes a request with retries and returns the response body . Returns an error if the exit code is not one of the provided codes .
1833	Not thread - safe - callers need to hold c . mut .
1834	readPaginatedResultsWithValues is an override that allows control over the query string .
1835	UpdatePullRequest modifies the title body open state
1836	getLabels is a helper function that retrieves a paginated list of labels from a github URI path .
1837	convert to a StateCannotBeChanged if appropriate or else return the original error
1838	IsMergeable determines if a PR can be merged . Mergeability is calculated by a background job on GitHub and is not immediately available when new commits are added so the PR must be polled until the background job completes .
1839	Token is an implementation for oauth2 . TokenSource interface .
1840	ListArtifacts gets the names of all artifacts available from the given source
1841	KeyToJob takes a spyglass URL and returns the jobName and buildID .
1842	prowToGCS returns the GCS key corresponding to the given prow key
1843	FetchArtifacts constructs and returns Artifact objects for each artifact name in the list . This includes getting any handles needed for read write operations direct artifact links etc .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload the result downloaded from path into project .
1855	ApplyDefault applies the defaults for the ProwJob decoration . If a field has a zero value it replaces that with the value set in def .
1856	Validate ensures all the values set in the DecorationConfig are valid .
1857	ApplyDefault applies the defaults for the UtilityImages decorations . If a field has a zero value it replaces that with the value set in def .
1858	ApplyDefault applies the defaults for GCSConfiguration decorations . If a field has a zero value it replaces that with the value set in def .
1859	Validate ensures all the values set in the GCSConfiguration are valid .
1860	ClusterAlias specifies the key in the clusters map to use . This allows scheduling a prow job somewhere aside from the default build cluster .
1861	NewResource creates a new Boskos Resource .
1862	NewResourcesFromConfig parse the a ResourceEntry into a list of resources
1863	UserDataFromMap returns a UserData from a map
1864	Set parses the flag value into a CommaSeparatedStrings
1865	UnmarshalJSON implements JSON Unmarshaler interface
1866	Extract unmarshalls a string a given struct if it exists
1867	User Data are used to store custom information mainly by Mason and Masonable implementation . Mason used a LeasedResource keys to store information about other resources that used to create the given resource . Set marshalls a struct to a string into the UserData
1868	Update updates existing UserData with new UserData . If a key as an empty string the key will be deleted
1869	ToMap converts a UserData to UserDataMap
1870	FromMap feels updates user data from a map
1871	ItemToResource casts a Item back to a Resource
1872	Run clones the configured refs
1873	addSSHKeys will start the ssh - agent and add all the specified keys returning the ssh - agent environment variables for reuse
1874	Issues is the main work function of the TriageFiler . It fetches and parses cluster data then syncs the top issues to github with the IssueCreator .
1875	loadClusters parses and filters the json data then populates every Cluster struct with aggregated job data and totals . The job data specifies all jobs that failed in a cluster and the builds that failed for each job independent of which tests the jobs or builds failed .
1876	parseTriageData unmarshals raw json data into a triageData struct and creates a BuildIndexer for every job .
1877	topClusters gets the count most important clusters from a slice of clusters based on number of build failures .
1878	topJobsFailed returns the top count job names sorted by number of failing builds .
1879	Title is the string to use as the github issue title .
1880	Labels returns the labels to apply to the issue created for this cluster on github .
1881	New makes a new Cron object
1882	QueuedJobs returns a list of jobs that need to be triggered and reset trigger in jobStatus
1883	HasJob returns if a job has been scheduled in cronAgent or not
1884	addJob adds a cron entry for a job to cronAgent
1885	removeJob removes the job from cronAgent
1886	UpdateComments downloads issue and pull - request comments and save in DB
1887	GatherProwJobMetrics gathers prometheus metrics for prowjobs .
1888	optionOrDefault defaults to a value if option is the zero value
1889	newGCSJobSource creates a new gcsJobSource from a given bucket and jobPrefix
1890	Artifacts lists all artifacts available for the given job source
1891	CanonicalLink gets a link to the location of job - specific artifacts in GCS
1892	JobPath gets the prefix to all artifacts in GCS in the job
1893	targetURL determines the URL used for more details in the status context on GitHub . If no PR dashboard is configured we will use the administrative Prow overview .
1894	newBuildConfig returns a client and informer capable of mutating and monitoring the specified config .
1895	NewClient makes a new Client with the specified token and dry - run status .
1896	retry handles rate limiting and retry logic for a github API call .
1897	depaginate adds depagination on top of the retry and rate limiting logic provided by retry .
1898	NewHelpAgent constructs a new HelpAgent .
1899	GeneratePluginHelp compiles and returns the help information for all plugins .
1900	gets the pull commit hash from metadata
1901	listJobBuilds concurrently lists builds for the given job prefixes that have been run on a PR
1902	getPRBuildData concurrently fetches metadata on each build of each job run on a PR
1903	getGCSDirsForPR returns a map from bucket names - > set of directories containing presubmit data
1904	Helper to delete an image file from the local images directory .
1905	Create the network on the system . The withDatabase flag is used to decide whether to cleanup the database if an error occurs .
1906	The network structs and functions
1907	Transaction creates a new NodeTx object and transactionally executes the node - level database interactions invoked by the given function . If the function returns no error all database changes are committed to the node - level database otherwise they are rolled back .
1908	ForLocalInspectionWithPreparedStmts is the same as ForLocalInspection but it also prepares the statements used in auto - generated database code .
1909	SetDefaultTimeout sets the default go - dqlite driver timeout .
1910	Transaction creates a new ClusterTx object and transactionally executes the cluster database interactions invoked by the given function . If the function returns no error all database changes are committed to the cluster database database otherwise they are rolled back . If EnterExclusive has been called before calling Transaction will block until ExitExclusive has been called as well to release the lock .
1911	EnterExclusive acquires a lock on the cluster db so any successive call to Transaction will block until ExitExclusive has been called .
1912	ExitExclusive runs the given transaction and then releases the lock acquired with EnterExclusive .
1913	Close the database facade .
1914	TxCommit commits the given transaction .
1915	ParseRemote splits remote and object
1916	GetContainerServer returns a ContainerServer struct for the remote
1917	GetImageServer returns a ImageServer struct for the remote
1918	Initialize AppArmor - specific attributes .
1919	Returns true if AppArmor stacking support is available .
1920	Add a device to a container
1921	Add a device to a profile
1922	Create the specified image alises updating those that already exist
1923	GetExistingAliases returns the intersection between a list of aliases and all the existing ones .
1924	String returns a suitable string representation for the status code
1925	ImagesGetExpired returns the names of all images that have expired since the given time .
1926	ImageSourceInsert inserts a new image source .
1927	ImageSourceGet returns the image source with the given ID .
1928	ImageExists returns whether an image with the given fingerprint exists .
1929	ImageGet gets an Image object from the database . If strictMatching is false The fingerprint argument will be queried with a LIKE query means you can pass a shortform and will get the full fingerprint . There can never be more than one image with a given fingerprint as it is enforced by a UNIQUE constraint in the schema .
1930	ImageGetFromAnyProject returns an image matching the given fingerprint if it exists in any project .
1931	Fill extra image fields such as properties and alias . This is called after fetching a single row from the images table .
1932	ImageLocate returns the address of an online node that has a local copy of the given image or an empty string if the image is already available on this node . If the image is not available on any online node an error is returned .
1933	ImageAssociateNode creates a new entry in the images_nodes table for tracking that the current node has the given image .
1934	ImageDelete deletes the image with the given ID .
1935	ImageAliasesGet returns the names of the aliases of all images .
1936	ImageAliasGet returns the alias with the given name in the given project .
1937	ImageAliasRename renames the alias with the given ID .
1938	ImageAliasDelete deletes the alias with the given name .
1939	ImageAliasesMove changes the image ID associated with an alias .
1940	ImageAliasAdd inserts an alias ento the database .
1941	ImageAliasUpdate updates the alias with the given ID .
1942	ImageLastAccessUpdate updates the last_use_date field of the image with the given fingerprint .
1943	ImageLastAccessInit inits the last_use_date field of the image with the given fingerprint .
1944	ImageUpdate updates the image with the given ID .
1945	ImageInsert inserts a new image .
1946	ImageGetPools get the names of all storage pools on which a given image exists .
1947	ImageGetPoolNamesFromIDs get the names of all storage pools on which a given image exists .
1948	ImageUploadedAt updates the upload_date column and an image row .
1949	ImagesGetOnCurrentNode returns all images that the current LXD node instance has .
1950	ImagesGetByNodeID returns all images that the LXD node instance has with the given node id .
1951	ImageGetNodesWithImage returns the addresses of online nodes which already have the image .
1952	ImageGetNodesWithoutImage returns the addresses of online nodes which don t have the image .
1953	Add a new task to the group returning its index .
1954	Start all the tasks in the group .
1955	zfsIsEnabled returns whether zfs backend is supported .
1956	zfsToolVersionGet returns the ZFS tools version
1957	zfsModuleVersionGet returns the ZFS module version
1958	zfsPoolVolumeCreate creates a ZFS dataset with a set of given properties .
1959	zfsPoolVolumeExists verifies if a specific ZFS pool or volume exists .
1960	NetworkIDsNotPending returns a map associating each network name to its ID . Pending networks are skipped .
1961	NetworkConfigAdd adds a new entry in the networks_config table
1962	NetworkNodeJoin adds a new entry in the networks_nodes table . It should only be used when a new node joins the cluster when it s safe to assume that the relevant network has already been created on the joining node and we just need to track it .
1963	NetworkCreatePending creates a new pending network on the node with the given name .
1964	NetworkCreated sets the state of the given network to Created .
1965	NetworkErrored sets the state of the given network to Errored .
1966	NetworkGet returns the network with the given name .
1967	Return the names of the nodes the given network is defined on .
1968	NetworkGetInterface returns the network associated with the interface with the given name .
1969	NetworkConfigGet returns the config map of the network with the given ID .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates the network with the given name .
1972	NetworkUpdateDescription updates the description of the network with the given ID .
1973	NetworkConfigClear resets the config of the network with the given ID associated with the node with the given ID .
1974	NetworkDelete deletes the network with the given name .
1975	NetworkRename renames a network .
1976	GetContainers returns a list of containers
1977	GetContainersFull returns a list of containers including snapshots backups and state
1978	GetContainer returns the container entry for the provided name
1979	CreateContainerFromBackup is a convenience function to make it easier to create a container from a backup
1980	CreateContainer requests that LXD creates a new container
1981	CreateContainerFromImage is a convenience function to make it easier to create a container from an existing image
1982	UpdateContainer updates the container definition
1983	RenameContainer requests that LXD renames the container
1984	ExecContainer requests that LXD spawns a command inside the container
1985	GetContainerFile retrieves the provided path from the container
1986	CreateContainerFile tells LXD to create a file in the container
1987	DeleteContainerFile deletes a file in the container
1988	GetContainerSnapshotNames returns a list of snapshot names for the container
1989	GetContainerSnapshots returns a list of snapshots for the container
1990	GetContainerSnapshot returns a Snapshot struct for the provided container and snapshot names
1991	CreateContainerSnapshot requests that LXD creates a new snapshot for the container
1992	MigrateContainerSnapshot requests that LXD prepares for a snapshot migration
1993	UpdateContainerSnapshot requests that LXD updates the container snapshot
1994	GetContainerState returns a ContainerState entry for the provided container name
1995	UpdateContainerState updates the container to match the requested state
1996	GetContainerLogfiles returns a list of logfiles for the container
1997	GetContainerLogfile returns the content of the requested logfile Note that it s the caller s responsibility to close the returned ReadCloser
1998	GetContainerMetadata returns container metadata .
1999	SetContainerMetadata sets the content of the container metadata file .
2000	GetContainerTemplateFiles returns the list of names of template files for a container .
2001	CreateContainerTemplateFile creates an a template for a container .
2002	DeleteContainerTemplateFile deletes a template file for a container .
2003	ConsoleContainer requests that LXD attaches to the console device of a container .
2004	GetContainerConsoleLog requests that LXD attaches to the console device of a container . Note that it s the caller s responsibility to close the returned ReadCloser
2005	DeleteContainerConsoleLog deletes the requested container s console log
2006	GetContainerBackups returns a list of backups for the container
2007	GetContainerBackup returns a Backup struct for the provided container and backup names
2008	CreateContainerBackup requests that LXD creates a new backup for the container
2009	RenameContainerBackup requests that LXD renames the backup
2010	DeleteContainerBackup requests that LXD deletes the container backup
2011	GetContainerBackupFile requests the container backup content
2012	RsyncSend sets up the sending half of an rsync to recursively send the directory pointed to by path over the websocket .
2013	Return the names of all available patches .
2014	Patches begin here
2015	The lvm . thinpool_name and lvm . vg_name config keys are node - specific and need to be linked to nodes .
2016	GetHTTPClient returns the http client used for the connection . This can be used to set custom http options .
2017	Do performs a Request using macaroon authentication if set .
2018	RawQuery allows directly querying the LXD API This should only be used by internal LXD tools .
2019	RawWebsocket allows directly connection to LXD API websockets This should only be used by internal LXD tools .
2020	RawOperation allows direct querying of a LXD API endpoint returning background operations .
2021	ProfileToAPI is a convenience to convert a Profile db struct into an API profile struct .
2022	Profiles returns a string list of profiles .
2023	ProfileGet returns the profile with the given name .
2024	ProfilesGet returns the profiles with the given names in the given project .
2025	ProfileConfig gets the profile configuration map from the DB .
2026	ProfileConfigClear resets the config of the profile with the given ID .
2027	ProfileConfigAdd adds a config to the profile with the given ID .
2028	ProfileContainersGet gets the names of the containers associated with the profile with the given name .
2029	ProfileCleanupLeftover removes unreferenced profiles .
2030	ProfilesExpandConfig expands the given container config with the config values of the given profiles .
2031	ProfilesExpandDevices expands the given container devices with the devices defined in the given profiles .
2032	Server handling functions GetServer returns the server status as a Server struct
2033	UpdateServer updates the server status to match the provided Server struct
2034	HasExtension returns true if the server supports a given API extension
2035	GetServerResources returns the resources available to a given LXD server
2036	UseProject returns a client that will use a specific project .
2037	Opens the node - level database with the correct parameters for LXD .
2038	Rebalance the raft cluster trying to see if we have a spare online node that we can promote to database node if we are below membershipMaxRaftNodes . If there s such spare node return its address as well as the new list of raft nodes .
2039	Promote makes a LXD node which is not a database node become part of the raft cluster .
2040	Purge removes a node entirely from the cluster database .
2041	List the nodes of the cluster .
2042	Count is a convenience for checking the current number of nodes in the cluster .
2043	Enabled is a convenience that returns true if clustering is enabled on this node .
2044	Check that node - related preconditions are met for bootstrapping or joining a cluster .
2045	Check that cluster - related preconditions are met for bootstrapping or joining a cluster .
2046	Check that cluster - related preconditions are met for accepting a new node .
2047	Check that cluster - related preconditions are met for leaving a cluster .
2048	Check that there is no left - over cluster certificate in the LXD var dir of this node .
2049	ConfigLoad loads a new Config object with the current node - local configuration values fetched from the database . An optional list of config value triggers can be passed each config key must have at most one trigger .
2050	Replace the current configuration with the given values .
2051	Patch changes only the configuration keys in the given map .
2052	HTTPSAddress is a convenience for loading the node configuration and returning the value of core . https_address .
2053	CertificatesGet returns all certificates from the DB as CertBaseInfo objects .
2054	CertificateGet gets an CertBaseInfo object from the database . The argument fingerprint will be queried with a LIKE query means you can pass a shortform and will get the full fingerprint . There can never be more than one image with a given fingerprint as it is enforced by a UNIQUE constraint in the schema .
2055	CertSave stores a CertBaseInfo object in the db it will ignore the ID field from the CertInfo .
2056	CertDelete deletes a certificate from the db .
2057	CertUpdate updates the certificate with the given fingerprint .
2058	Create a new net . Listener bound to the unix socket of the devlxd endpoint .
2059	Servers returns the servers that are currently part of the cluster . If this raft instance is not the leader an error is returned .
2060	Shutdown raft and any raft - related resource we have instantiated .
2061	Create a network raft transport that will handle connections using a rafthttp . Handler .
2062	Create a base raft configuration tweaked for a network with the given latency measure .
2063	Helper to bootstrap the raft cluster if needed .
2064	CPUResource returns the system CPU information
2065	MemoryResource returns the system memory information
2066	GetOperationUUIDs returns a list of operation uuids
2067	GetOperations returns a list of Operation struct
2068	GetOperation returns an Operation entry for the provided uuid
2069	GetOperationWebsocket returns a websocket connection for the provided operation
2070	Useful functions for unreliable backends
2071	Detect whether LXD already uses the given storage pool .
2072	ProjectURIs returns all available project URIs .
2073	ProjectList returns all available projects .
2074	ProjectGet returns the project with the given key .
2075	ProjectExists checks if a project with the given key exists .
2076	ProjectCreate adds a new project to the database .
2077	ProjectUsedByRef returns entities used by projects .
2078	ProjectRename renames the project matching the given key parameters .
2079	ProjectDelete deletes the project matching the given key parameters .
2080	PasswordCheck validates the provided password against the encoded secret
2081	LoadCert reads the LXD server certificate from the given var dir . If a cluster certificate is found it will be loaded instead .
2082	WriteCert writes the given material to the appropriate certificate files in the given LXD var directory .
2083	NewDaemon returns a new Daemon object with the given configuration .
2084	DefaultDaemon returns a new un - initialized Daemon object with default values .
2085	AllowProjectPermission is a wrapper to check access against the project its features and RBAC permission
2086	Convenience function around Authenticate
2087	Authenticate validates an incoming http Request It will check over what protocol it came what type of request it is and will validate the TLS certificate or Macaroon . This does not perform authorization only validates authentication
2088	State creates a new State instance linked to our internal db and os .
2089	UnixSocket returns the full path to the unix . socket file that this daemon is listening on . Used by tests .
2090	Stop stops the shared daemon .
2091	Setup external authentication
2092	Create a database connection and perform any updates needed .
2093	WriteJSON encodes the body as JSON and sends it back to the client
2094	EtagHash hashes the provided data and returns the sha256
2095	EtagCheck validates the hash of the current state with the hash provided by the client
2096	HTTPClient returns an http . Client using the given certificate and proxy .
2097	IsRecursionRequest checks whether the given HTTP request is marked with the recursion flag in its form values .
2098	GetListeners returns the socket - activated network listeners if any . The start parameter must be SystemdListenFDsStart except in unit tests see the docstring of SystemdListenFDsStart below .
2099	Perform a database dump .
2100	Execute queries .
2101	PublicKey is a convenience to encode the underlying public key to ASCII .
2102	PrivateKey is a convenience to encode the underlying private key .
2103	Fingerprint returns the fingerprint of the public key .
2104	GenCert will create and populate a certificate file and a key file
2105	PrintServerInfo prints out information about the server .
2106	LaunchContainers launches a set of containers .
2107	CreateContainers create the specified number of containers .
2108	GetContainers returns containers created by the benchmark .
2109	StartContainers starts containers created by the benchmark .
2110	Set the value of a query parameter in the given URI .
2111	Image handling functions GetImages returns a list of available images as Image structs
2112	GetImageFile downloads an image from the server returning an ImageFileRequest struct
2113	GetImageSecret is a helper around CreateImageSecret that returns a secret for the image
2114	GetPrivateImage is similar to GetImage but allows passing a secret download token
2115	GetPrivateImageFile is similar to GetImageFile but allows passing a secret download token
2116	GetImageAliases returns the list of available aliases as ImageAliasesEntry structs
2117	tryCopyImage iterates through the source server URLs until one lets it download the image
2118	CopyImage copies an image from a remote server . Additional options can be passed using ImageCopyArgs
2119	UpdateImage updates the image definition
2120	DeleteImage requests that LXD removes an image from the store
2121	RefreshImage requests that LXD issues an image refresh
2122	CreateImageAlias sets up a new image alias
2123	UpdateImageAlias updates the image alias definition
2124	RenameImageAlias renames an existing image alias
2125	DeleteImageAlias removes an alias from the LXD image store
2126	Open the node - local database object .
2127	EnsureSchema applies all relevant schema updates to the node - local database . Return the initial schema version found before starting the update along with any error occurred .
2128	FilesystemDetect returns the filesystem on which the passed - in path sits .
2129	Schema for the local database .
2130	Schema updates begin here Copy core . https_address to cluster . https_address in case this node is clustered .
2131	ArchitectureGetLocal returns the local hardware architecture
2132	NewController returns a new Controller using the specific MAAS server and machine
2133	CreateContainer defines a new MAAS device for the controller
2134	DefinedContainer returns true if the container is defined in MAAS
2135	UpdateContainer updates the MAAS device s interfaces with the new provided state
2136	RenameContainer renames the MAAS device for the container without releasing any allocation
2137	DeleteContainer removes the MAAS device for the container
2138	Add a new update to the schema . It will be appended at the end of the existing series .
2139	Ensure that the schema exists .
2140	Return the highest update version currently applied . Zero means that no updates have been applied yet .
2141	Apply any pending update that was not yet applied .
2142	Check that the given list of update version numbers doesn t have holes that is each version equal the preceding version plus 1 .
2143	Check that all the given updates are applied .
2144	Format the given SQL statement in a human - readable way . In particular make sure that each column definition in a CREATE TABLE clause is in its own row since SQLite dumps occasionally stuff more than one column in the same line .
2145	GetAllXattr retrieves all extended attributes associated with a file directory or symbolic link .
2146	Detect whether err is an errno .
2147	Uname returns Utsname as strings
2148	RegisterStmt register a SQL statement . Registered statements will be prepared upfront and re - used to speed up execution . Return a unique registration code .
2149	PrepareStmts prepares all registered statements and returns an index from statement code to prepared statement object .
2150	NewGateway creates a new Gateway for managing access to the dqlite cluster . When a new gateway is created the node - level database is queried to check what kind of role this node plays and if it s exposed over the network . It will initialize internal data structures accordingly for example starting a dqlite driver if this node is a database node . After creation the Daemon is expected to expose whatever http handlers the HandlerFuncs method returns and to access the dqlite cluster using the gRPC dialer returned by the Dialer method .
2151	DialFunc returns a dial function that can be used to connect to one of the dqlite nodes .
2152	Shutdown this gateway stopping the gRPC server and possibly the raft factory .
2153	Sync dumps the content of the database to disk . This is useful for inspection purposes and it s also needed by the activateifneeded command so it can inspect the database in order to decide whether to activate the daemon or not .
2154	Reset the gateway shutting it down and starting against from scratch using the given certificate . This is used when disabling clustering on a node .
2155	LeaderAddress returns the address of the current raft leader .
2156	Wait for the raft node to become leader . Should only be used by Bootstrap since we know that we ll self elect .
2157	Return information about the LXD nodes that a currently part of the raft cluster as configured in the raft log . It returns an error if this node is not the leader .
2158	Return the addresses of the raft nodes as stored in the node - level database . These values might leg behind the actual values and are refreshed periodically during heartbeats .
2159	Create a dial function that connects to the given listener .
2160	DqliteLog redirects dqlite s logs to our own logger
2161	MetadataAsMap parses the Response metadata into a map
2162	MetadataAsOperation turns the Response metadata into an Operation
2163	MetadataAsStringSlice parses the Response metadata into a slice of string
2164	MetadataAsStruct parses the Response metadata into a provided struct
2165	Load reads current content of the filename and loads records .
2166	Write writes current records to file .
2167	AddRecord adds a record to the report .
2168	LoadConfig reads the configuration from the config path ; if the path does not exist it returns a default configuration .
2169	SaveConfig writes the provided configuration to the config file .
2170	Get reads the path s content from your local filesystem .
2171	ConfigPath returns a joined path of the configuration directory and passed arguments
2172	ServerCertPath returns the path for the remote s server certificate
2173	NewConfig returns a Config optionally using default remotes .
2174	Check if CRIU supports pre - dumping and number of pre - dump iterations
2175	The function preDumpLoop is the main logic behind the pre - copy migration . This function contains the actual pre - dump the corresponding rsync transfer and it tells the outer loop to abort if the threshold of memory pages transferred by pre - dumping has been reached .
2176	Return a new root command .
2177	APIExtensionsCount returns the number of available API extensions .
2178	SelectURIs returns a list of LXD API URI strings for the resource yielded by the given query . The f argument must be a function that formats the entity URI using the columns yielded by the query .
2179	SelectStrings executes a statement which must yield rows with a single string column . It returns the list of column values .
2180	Execute the given query and ensure that it yields rows with a single column of the given database type . For every row yielded execute the given scanner .
2181	LazyHandler writes all values to the wrapped handler after evaluating any lazy functions in the record s context . It is already wrapped around StreamHandler and SyslogHandler in this library you ll only need it if you write your own Handler .
2182	Callers returns a Trace for the current goroutine with element 0 identifying the calling function .
2183	name returns the import path qualified name of the function containing the call .
2184	TrimBelow returns a slice of the Trace with all entries below pc removed .
2185	TrimAbove returns a slice of the Trace with all entries above pc removed .
2186	TrimBelowName returns a slice of the Trace with all entries below the lowest with function name name removed .
2187	TrimAboveName returns a slice of the Trace with all entries above the highest with function name name removed .
2188	TrimRuntime returns a slice of the Trace with the topmost entries from the go runtime removed . It considers any calls originating from files under GOROOT as part of the runtime .
2189	GetCaps extracts the list of capabilities effective on the file
2190	SetCaps applies the caps for a particular root uid
2191	Read in ProgressReader is the same as io . Read
2192	Supported check if the given path supports project quotas
2193	GetProject returns the project quota ID for the given path
2194	SetProject sets the project quota ID for the given path
2195	DeleteProject unsets the project id from the path and clears the quota for the project id
2196	GetProjectUsage returns the current consumption
2197	SetProjectQuota sets the quota on the project id
2198	Load a backup from the database
2199	Create a new backup
2200	Rename renames a container backup
2201	Delete removes a container backup
2202	fixBackupStoragePool changes the pool information in the backup . yaml . This is done only if the provided pool doesn t exist . In this case the pool of the default profile will be used .
2203	Count returns the number of rows in the given table .
2204	CountAll returns a map associating each table name in the database with the total count of its rows .
2205	InitTLSConfig returns a tls . Config populated with default encryption parameters . This is used as baseline config for both client and server certificates used by LXD .
2206	Copy a container on a storage pool that does use a thinpool .
2207	Copy a container on a storage pool that does not use a thinpool .
2208	Copy an lvm container .
2209	Copy an LVM custom volume .
2210	GetPrivateImage isn t relevant for the simplestreams protocol
2211	GetPrivateImageFile isn t relevant for the simplestreams protocol
2212	GetImageAliasNames returns the list of available alias names
2213	ProtoRecv gets a protobuf message from a websocket
2214	ProtoSend sends a protobuf message over a websocket
2215	ProtoSendControl sends a migration control message over a websocket
2216	The pty has been switched to raw mode so we will only ever read a single byte . The buffer size is therefore uninteresting to us .
2217	Fetch information about the containers on the given remote node using the rest API and with a timeout of 30 seconds .
2218	Retry wraps a function that interacts with the database and retries it in case a transient error is hit . This should by typically used to wrap transactions .
2219	IsRetriableError returns true if the given error might be transient and the interaction can be safely retried .
2220	AppArmorProfile returns the current apparmor profile .
2221	Functions dealing with storage volumes .
2222	Functions dealing with container storage .
2223	And this function is why I started hating on btrfs ...
2224	ContainerSnapshotRename renames a snapshot of a container .
2225	Needed for live migration where an empty snapshot needs to be created before rsyncing into it .
2226	btrfsPoolVolumesDelete is the recursive variant on btrfsPoolVolumeDelete it first deletes subvolumes of the subvolume and then the subvolume itself .
2227	isBtrfsSubVolume returns true if the given Path is a btrfs subvolume else false .
2228	SelectConfig executes a query statement against a config table which must have key and value columns . By default this query returns all keys but additional WHERE filters can be specified . Returns a map of key names to their associated values .
2229	UpdateConfig updates the given keys in the given table . Config keys set to empty values will be deleted .
2230	Delete the given key rows from the given config table .
2231	FormatSection properly indents a text section
2232	GetProjects returns a list of available Project structs
2233	GetProject returns a Project entry for the provided name
2234	CreateProject defines a new container project
2235	UpdateProject updates the project to match the provided Project struct
2236	RenameProject renames an existing project entry
2237	Read behaves like io . Reader . Read but will retry on EAGAIN
2238	Write behaves like io . Writer . Write but will retry on EAGAIN
2239	NewCanceler returns a new Canceler struct
2240	Cancelable indicates whether there are operations that support cancelation
2241	Cancel will attempt to cancel all ongoing operations
2242	CancelableDownload performs an http request and allows for it to be canceled at any time
2243	Return information about the cluster .
2244	Fetch information about all node - specific configuration keys set on the storage pools and networks of this cluster .
2245	Disable clustering on a node .
2246	This function is used to notify the leader that a node was removed it will decide whether to promote a new node as database node .
2247	Used to update the cluster after a database node has been removed and possibly promote another one as database node .
2248	Used to promote the local non - database node to be a database one .
2249	Filters parses all filtering statement defined for the given entity . It returns all supported combinations of filters sorted by number of criteria .
2250	Parse the structure declaration with the given name found in the given Go package .
2251	Find the StructType node for the structure with the given name
2252	Extract field information from the given structure .
2253	Profile handling functions GetProfileNames returns a list of available profile names
2254	GetProfiles returns a list of available Profile structs
2255	GetProfile returns a Profile entry for the provided name
2256	CreateProfile defines a new container profile
2257	UpdateProfile updates the profile to match the provided Profile struct
2258	RenameProfile renames an existing profile entry
2259	Load creates a new configuration Map with the given schema and initial values . It is meant to be called with a set of initial values that were set at a previous time and persisted to some storage like a database . If one or more keys fail to be loaded return an ErrorList describing what went wrong . Non - failing keys are still loaded in the returned Map .
2260	Dump the current configuration held by this Map . Keys that match their default value will not be included in the dump . Also if a Key has its Hidden attribute set to true it will be rendered as true for obfuscating the actual value .
2261	GetRaw returns the value of the given key which must be of type String .
2262	GetString returns the value of the given key which must be of type String .
2263	GetBool returns the value of the given key which must be of type Bool .
2264	GetInt64 returns the value of the given key which must be of type Int64 .
2265	Update the current values in the map using the newly provided ones . Return a list of key names that were actually changed and an ErrorList with possible errors .
2266	Set or change an individual key . Empty string means delete this value and effectively revert it to the default . Return a boolean indicating whether the value has changed and error if something went wrong .
2267	DoesSchemaTableExist return whether the schema table is present in the database .
2268	Return all versions in the schema table in increasing order .
2269	Return a list of SQL statements that can be used to create all tables in the database .
2270	Create the schema table .
2271	Insert a new version into the schema table .
2272	NewState returns a new State object with the given database and operating system components .
2273	Unload is called by the garbage collector
2274	Create a container struct without initializing it .
2275	Initialize storage interface for this container
2276	OnNetworkUp is called by the LXD callhook when the LXC network up script is run .
2277	setupHostVethDevice configures a nic device s host side veth settings .
2278	Get lxc container state with 1 second timeout If we don t get a reply assume the lxc monitor is hung
2279	Kill this function as soon as zfs is fixed .
2280	Check if the unix device already exists .
2281	Disk device handling
2282	setNetworkRoutes applies any static routes configured from the host to the container nic .
2283	Various container paths
2284	Internal MAAS handling
2285	getSystemHandler on Linux writes messages to syslog .
2286	Return string for minor number of nvidia device corresponding to the given pci id
2287	GetLogger returns a logger suitable for using as logger . Log .
2288	SetLogger installs the given logger as global logger . It returns a function that can be used to restore whatever logger was installed beforehand .
2289	WaitRecord blocks until a log . Record is received on the given channel . It returns the emitted record or nil if no record was received within the given timeout . Useful in conjunction with log . ChannelHandler for asynchronous testing .
2290	AddContext will return a copy of the logger with extra context added
2291	NewDottedVersion returns a new Version .
2292	Parse parses a string starting with a dotted version and returns it .
2293	String returns version as a string
2294	Compare returns result of comparison between two versions
2295	Create the default profile of a project .
2296	Common logic between PUT and PATCH .
2297	Check if a project is empty .
2298	Certificate handling functions GetCertificateFingerprints returns a list of certificate fingerprints
2299	GetCertificates returns a list of certificates
2300	GetCertificate returns the certificate entry for the provided fingerprint
2301	CreateCertificate adds a new certificate to the LXD trust store
2302	UpdateCertificate updates the certificate definition
2303	DeleteCertificate removes a certificate from the LXD trust store
2304	Return a list of templates used in a container or the content of a template
2305	Add a container template file
2306	Delete a container template
2307	Return the full path of a container template .
2308	Error implements the error interface .
2309	ErrorList implements the error interface .
2310	Add adds an Error with given key name value and reason .
2311	UpdateSchema updates the schema . go file of the cluster and node databases .
2312	Like doProfileUpdate but does not update the database since it was already updated by doProfileUpdate itself called on the notifying node .
2313	Profile update of a single container .
2314	Query the db for information about containers associated with the given profile .
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns a list of Network struct
2317	GetNetwork returns a Network entry for the provided name
2318	GetNetworkLeases returns a list of Network struct
2319	GetNetworkState returns metrics and information on the running network
2320	CreateNetwork defines a new network using the provided Network struct
2321	UpdateNetwork updates the network to match the provided Network struct
2322	RenameNetwork renames an existing network entry
2323	Open the cluster database object . The name argument is the name of the cluster database . It defaults to db . bin but can be overwritten for testing . The dialer argument is a function that returns a gRPC dialer that can be used to connect to a database node using the gRPC SQL package .
2324	URLEncode encodes a path and query parameters to a URL .
2325	IsUnixSocket returns true if the given path is either a Unix socket or a symbolic link pointing at a Unix socket .
2326	HostPath returns the host path for the provided path On a normal system this does nothing When inside of a snap environment returns the real path
2327	FileMove tries to move a file by using os . Rename if that fails it tries to copy the file and remove the source .
2328	DirCopy copies a directory recursively overwriting the target if it exists .
2329	StringMapHasStringKey returns true if any of the supplied keys are present in the map .
2330	Spawn the editor with a temporary YAML file for editing configs
2331	WriteTempFile creates a temp file with the specified content
2332	RenderTemplate renders a pongo2 template .
2333	Every returns a Schedule that always returns the given time interval .
2334	Currently only used for loop - backed LVM storage pools . Can be called without overhead since it is essentially a noop for non - loop - backed LVM storage pools .
2335	Dump returns a SQL text dump of all rows across all tables similar to sqlite3 s dump feature
2336	Dump a single table returning a SQL text containing statements for its schema and data .
2337	ProjectHasProfiles is a helper to check if a project has the profiles feature enabled .
2338	ProjectNames returns the names of all available projects .
2339	ProjectMap returns the names and ids of all available projects .
2340	ProjectHasImages is a helper to check if a project has the images feature enabled .
2341	ProjectUpdate updates the project matching the given key parameters .
2342	GetCluster returns information about a cluster If this client is not trusted the password must be supplied
2343	UpdateCluster requests to bootstrap a new cluster or join an existing one .
2344	GetClusterMemberNames returns the URLs of the current members in the cluster
2345	GetClusterMembers returns the current members of the cluster
2346	GetClusterMember returns information about the given member
2347	RenameClusterMember changes the name of an existing member
2348	Disconnect must be used once done listening for events
2349	CompareVersions the versions of two LXD nodes . A version consists of the version the node s schema and the number of API extensions it supports . Return 0 if they equal 1 if the first version is greater than the second and 2 if the second is greater than the first . Return an error if inconsistent versions are detected for example the first node s schema is greater than the second s but the number of extensions is smaller .
2350	HasClientCertificate will return true if a client certificate has already been generated
2351	GenerateClientCertificate will generate the needed client . crt and client . key if needed
2352	LoadModule loads the kernel module with the given name by invoking modprobe .
2353	Parse runs the Go parser against the given package name .
2354	PprofAddress returns the network addresss of the pprof endpoint or an empty string if there s no pprof endpoint
2355	PprofUpdateAddress updates the address for the pprof endpoint shutting it down and restarting it .
2356	NewMethod return a new method code snippet for executing a certain mapping .
2357	Generate the desired method .
2358	Populate a field consisting of a slice of objects referencing the entity . This information is available by joining a the view or table associated with the type of the referenced objects which must contain the natural key of the entity .
2359	StoragePoolID returns the ID of the pool with the given name .
2360	StoragePoolIDsNotPending returns a map associating each storage pool name to its ID . Pending storage pools are skipped .
2361	StoragePoolNodeJoin adds a new entry in the storage_pools_nodes table . It should only be used when a new node joins the cluster when it s safe to assume that the relevant pool has already been created on the joining node and we just need to track it .
2362	StoragePoolNodeJoinCeph updates internal state to reflect that nodeID is joining a cluster where poolID is a ceph pool .
2363	StoragePoolConfigAdd adds a new entry in the storage_pools_config table
2364	StoragePoolCreatePending creates a new pending storage pool on the node with the given name .
2365	StoragePoolCreated sets the state of the given pool to Created .
2366	StoragePoolErrored sets the state of the given pool to Errored .
2367	StoragePoolNodeConfigs returns the node - specific configuration of all nodes grouped by node name for the given poolID . If the storage pool is not defined on all nodes an error is returned .
2368	StoragePoolsGetDrivers returns the names of all storage volumes attached to a given storage pool .
2369	StoragePoolGetID returns the id of a single storage pool .
2370	StoragePoolGet returns a single storage pool .
2371	Return the names of the nodes the given pool is defined on .
2372	StoragePoolConfigGet returns the config of a storage pool .
2373	StoragePoolCreate creates new storage pool .
2374	Add new storage pool config .
2375	StoragePoolUpdate updates a storage pool .
2376	StoragePoolConfigClear deletes the storage pool config .
2377	StoragePoolDelete deletes storage pool .
2378	StoragePoolVolumesGetNames gets the names of all storage volumes attached to a given storage pool .
2379	StoragePoolVolumesGet returns all storage volumes attached to a given storage pool on any node .
2380	StoragePoolNodeVolumesGet returns all storage volumes attached to a given storage pool on the current node .
2381	Returns all storage volumes attached to a given storage pool on the given node .
2382	StoragePoolVolumesGetType get all storage volumes attached to a given storage pool of a given volume type on the given node .
2383	StoragePoolVolumeSnapshotsGetType get all snapshots of a storage volume attached to a given storage pool of a given volume type on the given node .
2384	StoragePoolNodeVolumesGetType returns all storage volumes attached to a given storage pool of a given volume type on the current node .
2385	StoragePoolVolumeGetType returns a single storage volume attached to a given storage pool of a given type on the node with the given ID .
2386	StoragePoolNodeVolumeGetType gets a single storage volume attached to a given storage pool of a given type on the current node .
2387	StoragePoolNodeVolumeGetTypeByProject gets a single storage volume attached to a given storage pool of a given type on the current node in the given project .
2388	StoragePoolVolumeUpdate updates the storage volume attached to a given storage pool .
2389	StoragePoolVolumeDelete deletes the storage volume attached to a given storage pool .
2390	StoragePoolVolumeRename renames the storage volume attached to a given storage pool .
2391	This a convenience to replicate a certain volume change to all nodes if the underlying driver is ceph .
2392	StoragePoolVolumeCreate creates a new storage volume attached to a given storage pool .
2393	StoragePoolVolumeGetTypeID returns the ID of a storage volume on a given storage pool of a given storage volume type on the given node .
2394	StoragePoolNodeVolumeGetTypeID get the ID of a storage volume on a given storage pool of a given storage volume type on the current node .
2395	StoragePoolVolumeTypeToName converts a volume integer type code to its human - readable name .
2396	DevicesAdd adds a new device .
2397	Devices returns the devices matching the given filters .
2398	Patches returns the names of all patches currently applied on this node .
2399	PatchesMarkApplied marks the patch with the given name as applied on this node .
2400	Return Go type of the given database entity .
2401	Return the name of the Post struct for the given entity .
2402	Return the name of the global variable holding the registration code for the given kind of statement aganst the given entity .
2403	Return the code for a dest function to be passed as parameter to query . SelectObjects in order to scan a single row .
2404	CompareConfigs compares two config maps and returns an error if they differ .
2405	CopyConfig creates a new map with a copy of the given config .
2406	NewNotifier builds a Notifier that can be used to notify other peers using the given policy .
2407	Events starts a task that continuously monitors the list of cluster nodes and maintains a pool of websocket connections against all of them in order to get notified about events . Whenever an event is received the given callback is invoked .
2408	Establish a client connection to get events from the given node .
2409	Initialize a full storage interface .
2410	getProfileContent generates the apparmor profile template from the given container . This includes the stock lxc includes as well as stuff from raw . apparmor .
2411	Ensure that the container s policy is loaded into the kernel so the container can boot .
2412	Ensure that the container s policy namespace is unloaded to free kernel memory . This does not delete the policy from disk or cache .
2413	Parse the profile without loading it into the kernel .
2414	getSystemHandler on Windows does nothing .
2415	NotifyUpgradeCompleted sends a notification to all other nodes in the cluster that any possible pending database update has been applied and any nodes which was waiting for this node to be upgraded should re - check if it s okay to move forward .
2416	KeepUpdated is a task that continuously monitor this node s version to see it it s out of date with respect to other nodes . In the node is out of date and the LXD_CLUSTER_UPDATE environment variable is set then the task executes the executable that the variable is pointing at .
2417	Check this node s version and possibly run LXD_CLUSTER_UPDATE .
2418	NewServer returns a new RBAC server instance .
2419	StartStatusCheck starts a periodic status checker .
2420	SyncProjects updates the list of projects in RBAC
2421	AddProject adds a new project resource to RBAC .
2422	DeleteProject adds a new project resource to RBAC .
2423	RenameProject renames an existing project resource in RBAC .
2424	IsAdmin returns whether or not the provided user is an admin .
2425	HasPermission returns whether or not the user has the permission to perform a certain task .
2426	Send an rsync stream of a path over a websocket
2427	Spawn the rsync process
2428	Return a TLS configuration suitable for establishing inter - node network connections using the cluster certificate .
2429	Return true if the given request is presenting the given cluster certificate .
2430	Notification that a container was moved . At the moment it s used for ceph - based containers where the target node needs to create the appropriate mount points .
2431	Used after to create the appropriate mounts point after a container has been moved .
2432	Contains checks if a given device exists in the set and if it s identical to that provided
2433	Update returns the difference between two sets
2434	DeviceNames returns the name of all devices in the set sorted properly
2435	Infof logs at the INFO log level using a standard printf format string
2436	Debugf logs at the DEBUG log level using a standard printf format string
2437	Warnf logs at the WARNING log level using a standard printf format string
2438	Errorf logs at the ERROR log level using a standard printf format string
2439	Critf logs at the CRITICAL log level using a standard printf format string
2440	Forward to the local events dispatcher an event received from another node .
2441	StorageProgressReader reports the read progress .
2442	StorageProgressWriter reports the write progress .
2443	GetLSBRelease returns a map with Linux distribution information
2444	Reset an auto - generated source file writing a new empty file header .
2445	Append a code snippet to a file .
2446	ContainerToArgs is a convenience to convert the new Container db struct into the legacy ContainerArgs .
2447	ContainerNames returns the names of all containers the given project .
2448	ContainerNodeAddress returns the address of the node hosting the container with the given name in the given project . It returns the empty string if the container is hosted on this node .
2449	ContainersListByNodeAddress returns the names of all containers grouped by cluster node address . The node address of containers running on the local node is set to the empty string to distinguish it from remote nodes . Containers whose node is down are addeded to the special address 0 . 0 . 0 . 0 .
2450	ContainerListExpanded loads all containers across all projects and expands their config and devices using the profiles they are associated to .
2451	ContainersByNodeName returns a map associating each container to the name of its node .
2452	SnapshotIDsAndNames returns a map of snapshot IDs to snapshot names for the container with the given name .
2453	ContainerNodeList returns all container objects on the local node .
2454	ContainerNodeProjectList returns all container objects on the local node within the given project .
2455	ContainerRemove removes the container with the given name from the database .
2456	ContainerProjectAndName returns the project and the name of the container with the given ID .
2457	ContainerConfigClear removes any config associated with the container with the given ID .
2458	ContainerConfigGet returns the value of the given key in the configuration of the container with the given ID .
2459	ContainerConfigRemove removes the given key from the config of the container with the given ID .
2460	ContainerSetStateful toggles the stateful flag of the container with the given ID .
2461	ContainerProfilesInsert associates the container with the given ID with the profiles with the given names in the given project .
2462	ContainerProfiles returns a list of profiles for a given container ID .
2463	ContainerConfig gets the container configuration map from the DB
2464	ContainerSetState sets the the power state of the container with the given ID .
2465	ContainerUpdate updates the description architecture and ephemeral flag of the container with the given ID .
2466	ContainerLastUsedUpdate updates the last_use_date field of the container with the given ID .
2467	ContainerGetSnapshots returns the names of all snapshots of the container in the given project with the given name .
2468	ContainerGetSnapshotsFull returns all container objects for snapshots of a given container
2469	ContainerNextSnapshot returns the index the next snapshot of the container with the given name and pattern should have .
2470	ContainerPool returns the storage pool of a given container .
2471	ContainerGetBackup returns the backup with the given name .
2472	ContainerGetBackups returns the names of all backups of the container with the given name .
2473	ContainerBackupCreate creates a new backup
2474	ContainerBackupRemove removes the container backup with the given name from the database .
2475	ContainerBackupRename renames a container backup from the given current name to the new one .
2476	ContainerBackupsGetExpired returns a list of expired container backups .
2477	DefaultOS returns a fresh uninitialized OS instance with default values .
2478	Init our internal data structures .
2479	GetWebsocket returns a raw websocket connection from the operation
2480	Refresh pulls the current version of the operation and updates the struct
2481	CancelTarget attempts to cancel the target operation
2482	GetTarget returns the target operation
2483	Up brings up all configured endpoints and starts accepting HTTP requests .
2484	Down brings down all endpoints and stops serving HTTP requests .
2485	Start an HTTP server for the endpoint associated with the given code .
2486	Stop the HTTP server of the endpoint associated with the given code . The associated socket will be shutdown too .
2487	Use the listeners associated with the file descriptors passed via socket - based activation .
2488	CandidServer returns all the Candid settings needed to connect to a server .
2489	RBACServer returns all the Candid settings needed to connect to a server .
2490	AutoUpdateInterval returns the configured images auto update interval .
2491	MAASController the configured MAAS url and key if any .
2492	OfflineThreshold returns the configured heartbeat threshold i . e . the number of seconds before after which an unresponsive node is considered offline ..
2493	ConfigGetString is a convenience for loading the cluster configuration and returning the value of a particular key . It s a deprecated API meant to be used by call sites that are not interacting with the database in a transactional way .
2494	ConfigGetBool is a convenience for loading the cluster configuration and returning the value of a particular boolean key . It s a deprecated API meant to be used by call sites that are not interacting with the database in a transactional way .
2495	ConfigGetInt64 is a convenience for loading the cluster configuration and returning the value of a particular key . It s a deprecated API meant to be used by call sites that are not interacting with the database in a transactional way .
2496	ClusterAddress returns the cluster addresss of the cluster endpoint or an empty string if there s no cluster endpoint .
2497	General wrappers around Logger interface functions .
2498	RestServer creates an http . Server capable of handling requests against the LXD REST API endpoint .
2499	Extract the project query parameter from the given request .
2500	Extract the given query parameter directly from the URL never from an encoded body .
2501	Return a new db command .
2502	Description return a human - readable description of the operation type .
2503	Permission returns the needed RBAC permission to cancel the oepration
2504	OperationsUUIDs returns the UUIDs of all operations associated with this node .
2505	OperationNodes returns a list of nodes that have running operations
2506	OperationByUUID returns the operation with the given UUID .
2507	OperationAdd adds a new operations to the table .
2508	OperationRemove removes the operation with the given UUID .
2509	Operations returns all operations in the cluster filtered by the given clause .
2510	This task function expires logs when executed . It s started by the Daemon and will run once every 24h .
2511	Given its relative path with respect to the LXD surce tree return the full path of a file .
2512	Keys returns all keys defined in the schema
2513	Defaults returns a map of all key names in the schema along with their default values .
2514	Get the Key associated with the given name or panic .
2515	Assert that the Key with the given name as the given type . Panic if no Key with such name exists or if it does not match the tiven type .
2516	Tells if the given value can be assigned to this particular Value instance .
2517	GetStoragePoolVolumes returns a list of StorageVolume entries for the provided pool
2518	GetStoragePoolVolume returns a StorageVolume entry for the provided pool and volume name
2519	CreateStoragePoolVolume defines a new storage volume
2520	CreateStoragePoolVolumeSnapshot defines a new storage volume
2521	GetStoragePoolVolumeSnapshots returns a list of snapshots for the storage volume
2522	GetStoragePoolVolumeSnapshot returns a snapshots for the storage volume
2523	UpdateStoragePoolVolumeSnapshot updates the volume to match the provided StoragePoolVolume struct
2524	MigrateStoragePoolVolume requests that LXD prepares for a storage volume migration
2525	MoveStoragePoolVolume renames or moves an existing storage volume
2526	UpdateStoragePoolVolume updates the volume to match the provided StoragePoolVolume struct
2527	DeleteStoragePoolVolume deletes a storage pool
2528	RenameStoragePoolVolume renames a storage volume
2529	This performs all non - db related work needed to create the pool .
2530	Helper functions Returns the parent container name snapshot name and whether it actually was a snapshot name .
2531	Load all containers across all projects .
2532	Load all containers of this nodes .
2533	Load all containers of this nodes under the given project .
2534	Perform a single heartbeat request against the node with the given address .
2535	This seems a little excessive .
2536	Things we don t need to care about
2537	Things we do have to care about
2538	AskChoice asks the user to select one of multiple options
2539	AskInt asks the user to enter an integer between a min and max value
2540	AskString asks the user to enter a string which optionally conforms to a validation function .
2541	AskPassword asks the user to enter a password .
2542	AskPasswordOnce asks the user to enter a password . It s the same as AskPassword but it won t ask to enter it again .
2543	Ask a question on the output stream and read the answer from the input stream
2544	Read the user s answer from the input stream trimming newline and providing a default .
2545	The handler for the post operation .
2546	The handler for the delete operation .
2547	IsRootDiskDevice returns true if the given device representation is configured as root disk for a container . It typically get passed a specific entry of api . Container . Devices .
2548	GetRootDiskDevice returns the container device that is configured as root disk
2549	ForwardedResponse takes a request directed to a node and forwards it to another node writing back the response it gegs .
2550	ForwardedResponseIfTargetIsRemote redirects a request to the request has a targetNode parameter pointing to a node which is not the local one .
2551	ForwardedResponseIfContainerIsRemote redirects a request to the node running the container with the given name . If the container is local nothing gets done and nil is returned .
2552	ForwardedOperationResponse creates a response that forwards the metadata of an operation created on another node .
2553	Done prints the final status and prevents any update
2554	Update changes the status message to the provided string
2555	Warn shows a temporary message instead of the status
2556	UpdateProgress is a helper to update the status using an iopgress instance
2557	UpdateOp is a helper to update the status using a LXD API operation
2558	The zfs . pool_name config key is node - specific and needs to be linked to nodes .
2559	Create a new net . Listener bound to the unix socket of the local endpoint .
2560	NewStmt return a new statement code snippet for running the given kind of query against the given database entity .
2561	Generate plumbing and wiring code for the desired statement .
2562	Output a line of code that registers the given statement and declares the associated statement code global variable .
2563	Internal function called by ConnectLXD and ConnectPublicLXD
2564	IsActive checks whether the container state indicates the container is active
2565	RaftNodeAddress returns the address of the LXD raft node with the given ID if any matching row exists .
2566	RaftNodeFirst adds a the first node of the cluster . It ensures that the database ID is 1 to match the server ID of first raft log entry . This method is supposed to be called when there are no rows in raft_nodes and it will replace whatever existing row has ID 1 .
2567	RaftNodeAdd adds a node to the current list of LXD nodes that are part of the dqlite Raft cluster . It returns the ID of the newly inserted row .
2568	RaftNodeDelete removes a node from the current list of LXD nodes that are part of the dqlite Raft cluster .
2569	RaftNodesReplace replaces the current list of raft nodes .
2570	Detect CGroup support .
2571	Configure the sqlite connection so that it s safe to access the dqlite - managed sqlite file also without setting up raft .
2572	ContainerGet returns the container with the given key .
2573	ContainerID return the ID of the container with the given key .
2574	ContainerExists checks if a container with the given key exists .
2575	ContainsFields checks that the mapping contains fields with the same type and name of given ones .
2576	FieldByName returns the field with the given name if any .
2577	FieldColumnName returns the column name of the field with the given name prefixed with the entity s table name .
2578	FilterFieldByName returns the field with the given name if that field can be used as query filter an error otherwise .
2579	ColumnFields returns the fields that map directly to a database column either on this table or on a joined one .
2580	ScalarFields returns the fields that map directly to a single database column on another table that can be joined to this one .
2581	RefFields returns the fields that are one - to - many references to other tables .
2582	Column returns the name of the database column the field maps to . The type code of the field must be TypeColumn .
2583	ZeroValue returns the literal representing the zero value for this field . The type code of the field must be TypeColumn .
2584	FieldColumns converts thegiven fields to list of column names separated by a comma .
2585	FieldArgs converts the given fields to function arguments rendering their name and type .
2586	FieldParams converts the given fields to function parameters rendering their name .
2587	FieldCriteria converts the given fields to AND - separated WHERE criteria .
2588	Helper to initialize LXD clustering . Used by the lxd init command .
2589	JsonFormatEx formats log records as JSON objects . If pretty is true records will be pretty - printed . If lineSeparated is true records will be logged with a new line between each record .
2590	formatValue formats a value for serialization
2591	ResolveTarget is a convenience for handling the value ?targetNode query parameter . It returns the address of the given node or the empty string if the given node is the local one .
2592	Write in ProgressWriter is the same as io . Write
2593	Update the schema and api_extensions columns of the row in the nodes table that matches the given id . If not such row is found an error is returned .
2594	Return a slice of binary integer tuples . Each tuple contains the schema version and number of api extensions of a node in the cluster .
2595	GetArchitectures returns the list of supported architectures .
2596	RuntimeLiblxcVersionAtLeast checks if the system s liblxc matches the provided version requirement
2597	GetExecPath returns the path to the current binary
2598	Connect is a convenience around lxd . ConnectLXD that configures the client with the correct parameters for node - to - node communication . If notify switch is true then the user agent will be set to the special value lxd - cluster - notifier which can be used in some cases to distinguish between a regular client request and an internal cluster request .
2599	ConnectIfContainerIsRemote figures out the address of the node which is running the container with the given name . If it s not the local node will connect to it and return the connected client otherwise it will just return nil .
2600	ConnectIfVolumeIsRemote figures out the address of the node on which the volume with the given name is defined . If it s not the local node will connect to it and return the connected client otherwise it will just return nil . If there is more than one node with a matching volume name an error is returned .
2601	SetupTrust is a convenience around ContainerServer . CreateCertificate that adds the given client certificate to the trusted pool of the cluster at the given address using the given password .
2602	GetStoragePools returns a list of StoragePool entries
2603	GetStoragePool returns a StoragePool entry for the provided pool name
2604	CreateStoragePool defines a new storage pool using the provided StoragePool struct
2605	UpdateStoragePool updates the pool to match the provided StoragePool struct
2606	DeleteStoragePool deletes a storage pool
2607	GetStoragePoolResources gets the resources available to a given storage pool
2608	Make sure all our directories are available .
2609	Config fetches all LXD node - level config keys .
2610	UpdateConfig updates the given LXD node - level configuration keys in the config table . Config keys set to empty values will be deleted .
2611	Config fetches all LXD cluster config keys .
2612	UpdateConfig updates the given LXD cluster configuration keys in the config table . Config keys set to empty values will be deleted .
2613	This helper deletes any node - specific values from the config object since they should not be part of the calculated etag .
2614	Event handling functions GetEvents connects to the LXD monitoring interface
2615	LogfmtFormat return a formatter for a text log file
2616	StorageVolumeNodeAddresses returns the addresses of all nodes on which the volume with the given name if defined . The empty string is used in place of the address of the current node .
2617	StorageVolumeNodeGet returns the name of the node a storage volume is on .
2618	StorageVolumeConfigGet gets the config of a storage volume .
2619	StorageVolumeDescriptionGet gets the description of a storage volume .
2620	StorageVolumeIsAvailable checks that if a custom volume available for being attached . Always return true for non - Ceph volumes . For Ceph volumes return true if the volume is either not attached to any other container or attached to containers on this node .
2621	StorageVolumeDescriptionUpdate updates the description of a storage volume .
2622	StorageVolumeConfigAdd adds a new storage volume config into database .
2623	StorageVolumeConfigClear deletes storage volume config .
2624	Get the IDs of all volumes with the given name and type associated with the given pool regardless of their node_id column .
2625	StorageVolumeCleanupImages removes the volumes with the given fingerprints .
2626	StorageVolumeMoveToLVMThinPoolNameKey upgrades the config keys of LVM volumes .
2627	L accumulates a single line of source code .
2628	Returns the source code to add to the target file .
2629	Pretty will attempt to convert any Go structure into a string suitable for logging
2630	NetworkPublicKey returns the public key of the TLS certificate used by the network endpoint .
2631	NetworkPrivateKey returns the private key of the TLS certificate used by the network endpoint .
2632	NetworkCert returns the full TLS certificate information for this endpoint .
2633	NetworkAddress returns the network addresss of the network endpoint or an empty string if there s no network endpoint
2634	NetworkUpdateAddress updates the address for the network endpoint shutting it down and restarting it .
2635	NetworkUpdateCert updates the TLS keypair and CA used by the network endpoint . If the network endpoint is active in - flight requests will continue using the old certificate and only new requests will use the new one .
2636	Create a new net . Listener bound to the tcp socket of the network endpoint .
2637	Accept waits for and returns the next incoming TLS connection then use the current TLS configuration to handle it .
2638	Config safely swaps the underlying TLS configuration .
2639	IsOffline returns true if the last successful heartbeat time of the node is older than the given threshold .
2640	NodeByAddress returns the node with the given network address .
2641	NodePendingByAddress returns the pending node with the given network address .
2642	NodeByName returns the node with the given name .
2643	NodeName returns the name of the node this method is invoked on .
2644	NodeAddress returns the address of the node this method is invoked on .
2645	NodeIsOutdated returns true if there s some cluster node having an API or schema version greater than the node this method is invoked on .
2646	NodesCount returns the number of nodes in the LXD cluster . Since there s always at least one node row even when not - clustered the return value is greater than zero
2647	NodeRename changes the name of an existing node . Return an error if a node with the same name already exists .
2648	Nodes returns all LXD nodes part of the cluster .
2649	NodeAdd adds a node to the current list of LXD nodes that are part of the cluster . It returns the ID of the newly inserted row .
2650	NodePending toggles the pending flag for the node . A node is pending when it s been accepted in the cluster but has not yet actually joined it .
2651	NodeUpdate updates the name an address of a node .
2652	NodeRemove removes the node with the given id .
2653	NodeHeartbeat updates the heartbeat column of the node with the given address .
2654	NodeIsEmpty returns an empty string if the node with the given ID has no containers or images associated with it . Otherwise it returns a message say what s left .
2655	NodeClear removes any container or image associated with this node .
2656	NodeOfflineThreshold returns the amount of time that needs to elapse after which a series of unsuccessful heartbeat will make the node be considered offline .
2657	NodeUpdateVersion updates the schema and API version of the node with the given id . This is used only in tests .
2658	Transaction executes the given function within a database transaction .
2659	Rollback a transaction after the given error occurred . If the rollback succeeds the given error is returned otherwise a new error that wraps it gets generated and returned .
2660	ProfileURIs returns all available profile URIs .
2661	ProfileGet returns the profile with the given key .
2662	ProfileExists checks if a profile with the given key exists .
2663	ProfileConfigRef returns entities used by profiles .
2664	ProfileUsedByRef returns entities used by profiles .
2665	ProfileCreate adds a new profile to the database .
2666	ProfileRename renames the profile matching the given key parameters .
2667	ProfileDelete deletes the profile matching the given key parameters .
2668	ServerTLSConfig returns a new server - side tls . Config generated from the give certificate info .
2669	NetworkInterfaceAddress returns the first non - loopback address of any of the system network interfaces . Return the empty string if none is found .
2670	IsAddressCovered detects if network address1 is actually covered by address2 in the sense that they are either the same address or address2 is specified using a wildcard with the same port of address1 .
2671	SelectObjects executes a statement which must yield rows with a specific columns schema . It invokes the given Dest hook for each yielded row .
2672	DeleteObject removes the row identified by the given ID . The given table must have a primary key column called id . It returns a flag indicating if a matching row was actually found and deleted or not .
2673	Execute the our task function according to our schedule until the given context gets cancelled .
2674	IsTerminal returns true if the given file descriptor is a terminal .
2675	Bind to the given unix socket path .
2676	Remove any stale socket file at the given path .
2677	Change the file mode of the given unix socket file
2678	Change the ownership of the given unix socket file
2679	cephOSDPoolExists checks whether a given OSD pool exists .
2680	cephOSDPoolDestroy destroys an OSD pool . - A call to cephOSDPoolDestroy will destroy a pool including any storage volumes that still exist in the pool . - In case the OSD pool that is supposed to be deleted does not exist this command will still exit 0 . This means that if the caller wants to be sure that this call actually deleted an OSD pool it needs to check for the existence of the pool first .
2681	cephRBDVolumeExists checks whether a given RBD storage volume exists .
2682	cephRBDSnapshotProtect protects a given snapshot from being deleted This is a precondition to be able to create RBD clones from a given snapshot .
2683	cephRBDCloneCreate creates a clone from a protected RBD snapshot
2684	cephRBDSnapshotListClones list all clones of an RBD snapshot
2685	cephRBDVolumeMarkDeleted marks an RBD storage volume as being in zombie state An RBD storage volume that is in zombie state is not tracked in LXD s database anymore but still needs to be kept around for the sake of any dependent storage entities in the storage pool . This usually happens when an RBD storage volume has protected snapshots ; a scenario most common when creating a sparse copy of a container or when LXD updated an image and the image still has dependent container clones .
2686	cephRBDVolumeUnmarkDeleted unmarks an RBD storage volume as being in zombie state - An RBD storage volume that is in zombie is not tracked in LXD s database anymore but still needs to be kept around for the sake of any dependent storage entities in the storage pool . - This function is mostly used when a user has deleted the storage volume of an image from the storage pool and then triggers a container creation . If LXD detects that the storage volume for the given hash already exists in the pool but is marked as zombie it will unmark it as a zombie instead of creating another storage volume for the image .
2687	cephRBDVolumeRename renames a given RBD storage volume Note that this usually requires that the image be unmapped under its original name then renamed and finally will be remapped again . If it is not unmapped under its original name and the callers maps it under its new name the image will be mapped twice . This will prevent it from being deleted .
2688	cephRBDVolumeRename renames a given RBD storage volume Note that if the snapshot is mapped - which it usually shouldn t be - this usually requires that the snapshot be unmapped under its original name then renamed and finally will be remapped again . If it is not unmapped under its original name and the caller maps it under its new name the snapshot will be mapped twice . This will prevent it from being deleted .
2689	cephRBDSnapshotDelete deletes an RBD snapshot This requires that the snapshot does not have any clones and is unmapped and unprotected .
2690	cephRBDVolumeCopy copies an RBD storage volume This is a non - sparse copy which doesn t introduce any dependency relationship between the source RBD storage volume and the target RBD storage volume . The operations is similar to creating an empty RBD storage volume and rsyncing the contents of the source RBD storage volume into it .
2691	cephRBDVolumeListSnapshots retrieves the snapshots of an RBD storage volume The format of the snapshot names is simply the part after the
2692	getRBDSize returns the size the RBD storage volume is supposed to be created with
2693	getRBDFilesystem returns the filesystem the RBD storage volume is supposed to be created with
2694	copyWithoutSnapshotsFull creates a non - sparse copy of a container This does not introduce a dependency relation between the source RBD storage volume and the target RBD storage volume .
2695	copyWithoutSnapshotsFull creates a sparse copy of a container This introduces a dependency relation between the source RBD storage volume and the target RBD storage volume .
2696	GetConfigCmd returns a cobra command that lets the caller see the configured auth backends in Pachyderm
2697	SetConfigCmd returns a cobra command that lets the caller configure auth backends in Pachyderm
2698	NewSharder creates a Sharder using a discovery client .
2699	NewRouter creates a Router .
2700	renewUserCredentials extends the TTL of the Pachyderm authentication token userToken using the vault plugin s Admin credentials . userToken belongs to the user who is calling vault and would like to extend their Pachyderm session .
2701	NewLocalClient returns a Client that stores data on the local file system
2702	AddSpanToAnyExisting checks ctx for Jaeger tracing information and if tracing metadata is present it generates a new span for operation marks it as a child of the existing span and returns it .
2703	InstallJaegerTracerFromEnv installs a Jaeger client as then opentracing global tracer relying on environment variables to configure the client . It returns the address used to initialize the global tracer if any initialization occurred
2704	UnaryClientInterceptor returns a GRPC interceptor for non - streaming GRPC RPCs
2705	StreamClientInterceptor returns a GRPC interceptor for non - streaming GRPC RPCs
2706	UnaryServerInterceptor returns a GRPC interceptor for non - streaming GRPC RPCs
2707	StreamServerInterceptor returns a GRPC interceptor for non - streaming GRPC RPCs
2708	CloseAndReportTraces tries to close the global tracer which in the case of the Jaeger tracer causes it to send any unreported traces to the collector
2709	newWriter creates a new Writer .
2710	For sets b . MaxElapsedTime to maxElapsed and returns b
2711	Helper function used to log requests and responses from our GRPC method implementations
2712	Format proxies the closure in order to satisfy logrus . Formatter s interface .
2713	NewGRPCLogWriter creates a new GRPC log writer . logger specifies the underlying logger and source specifies where these logs are coming from ; it is added as a entry field for all log messages .
2714	Read loads the Pachyderm config on this machine . If an existing configuration cannot be found it sets up the defaults . Read returns a nil Config if and only if it returns a non - nil error .
2715	Write writes the configuration in c to this machine s Pachyderm config file .
2716	Read reads val from r .
2717	Write writes val to r .
2718	NewReadWriter returns a new ReadWriter with rw as both its source and its sink .
2719	RunGitHookServer starts the webhook server
2720	newLoggingPipe initializes a loggingPipe
2721	Read implements the corresponding method of net . Conn
2722	Write implements the corresponding method of net . Conn
2723	Accept implements the corresponding method of net . Listener for TestListener
2724	Close implements the corresponding method of net . Listener for TestListener . Any blocked Accept operations will be unblocked and return errors .
2725	errorf is analogous to fmt . Errorf but generates hashTreeErrors instead of errorStrings .
2726	InitWithKube is like InitServiceEnv but also assumes that it s run inside a kubernetes cluster and tries to connect to the kubernetes API server .
2727	GetEtcdClient returns the already connected etcd client without modification .
2728	GetKubeClient returns the already connected Kubernetes API client without modification .
2729	NewHasher creates a hasher .
2730	HashJob computes and returns the hash of a job .
2731	HashPipeline computes and returns the hash of a pipeline .
2732	Status returns the statuses of workers referenced by pipelineRcName . pipelineRcName is the name of the pipeline s RC and can be gotten with ppsutil . PipelineRcName . You can also pass for pipelineRcName to get all clients for all workers .
2733	Cancel cancels a set of datums running on workers . pipelineRcName is the name of the pipeline s RC and can be gotten with ppsutil . PipelineRcName .
2734	Conns returns a slice of connections to worker servers . pipelineRcName is the name of the pipeline s RC and can be gotten with ppsutil . PipelineRcName . You can also pass for pipelineRcName to get all clients for all workers .
2735	Clients returns a slice of worker clients for a pipeline . pipelineRcName is the name of the pipeline s RC and can be gotten with ppsutil . PipelineRcName . You can also pass for pipelineRcName to get all clients for all workers .
2736	NewClient returns a worker client for the worker at the IP address passed in .
2737	RunFixedArgs wraps a function in a function that checks its exact argument count .
2738	RunBoundedArgs wraps a function in a function that checks its argument count is within a range .
2739	Run makes a new cobra run function that wraps the given function .
2740	ErrorAndExit errors with the given format and args and then exits .
2741	ParseCommit takes an argument of the form repo [
2742	ParseBranch takes an argument of the form repo [
2743	ParseFile takes an argument of the form repo [
2744	Set adds a string to r
2745	SetDocsUsage sets the usage string for a docs - style command . Docs commands have no functionality except to output some docs and related commands and should not specify a Run attribute .
2746	makeCronCommits makes commits to a single cron input s repo . It s a helper function called by monitorPipeline .
2747	Writer implements the corresponding method in the Client interface
2748	Reader implements the corresponding method in the Client interface
2749	Delete implements the corresponding method in the Client interface
2750	Walk implements the corresponding method in the Client interface
2751	Exists implements the corresponding method in the Client interface
2752	GetBlock encodes a hash into a readable format in the form of a Block .
2753	Health implements the Health method for healthServer .
2754	split is like path . Split but uses this library s defaults for canonical paths
2755	ValidatePath checks if a file path is legal
2756	MatchDatum checks if a datum matches a filter . To match each string in filter must correspond match at least 1 datum s Path or Hash . Order of filter and data is irrelevant .
2757	NewCacheServer creates a new CacheServer .
2758	authorizePipelineOp checks if the user indicated by ctx is authorized to perform operation on the pipeline in info
2759	sudo is a helper function that copies pachClient grants it PPS s superuser token and calls f with the superuser client . This helps isolate PPS s use of its superuser token so that it s not widely copied and is unlikely to leak authority to parts of the code that aren t supposed to have it . Note that because the argument to f is a superuser client it should not be used to make any calls with unvalidated user input . Any such use could be exploited to make PPS a confused deputy
2760	setPipelineDefaults sets the default values for a pipeline info
2761	incrementGCGeneration increments the GC generation number in etcd
2762	NewDebugServer creates a new server that serves the debug api over GRPC
2763	Health health checks pachd it returns an error if pachd isn t healthy .
2764	In test mode we use unique names for cache groups since we might want to run multiple block servers locally which would conflict if groups had the same name . We also do not report stats to prometheus
2765	watchGC watches for GC runs and invalidate all cache when GC happens .
2766	splitKey splits a key into the format we want and also postpends the generation number
2767	NewWriter returns a new Writer it will flush when it gets termHeight many lines including the header line . The header line will be reprinted termHeight many lines have been written . NewStreamingWriter will panic if it s given a header that doesn t end in \ n .
2768	Write writes a line to the tabwriter .
2769	PrintRepoHeader prints a repo header .
2770	PrintRepoInfo pretty - prints repo info .
2771	PrintDetailedRepoInfo pretty - prints detailed repo info .
2772	PrintBranch pretty - prints a Branch .
2773	PrintCommitInfo pretty - prints commit info .
2774	PrintDetailedCommitInfo pretty - prints detailed commit info .
2775	PrintFileInfo pretty - prints file info . If recurse is false and directory size is 0 display - instead If fast is true and file size is 0 display - instead
2776	PrintDetailedFileInfo pretty - prints detailed file info .
2777	Add adds an ancestry reference to the given string .
2778	RetryNotify calls notify function with the error and wait duration for each failed attempt before sleep .
2779	Get does a filtered write of id s hashtree to the passed in io . Writer .
2780	Delete deletes a hashtree from the cache .
2781	PrintJobInfo pretty - prints job info .
2782	PrintPipelineInfo pretty - prints pipeline info .
2783	PrintWorkerStatus pretty prints a worker status .
2784	PrintDetailedJobInfo pretty - prints detailed job info .
2785	PrintDetailedPipelineInfo pretty - prints detailed pipeline info .
2786	PrintDatumInfo pretty - prints file info . If recurse is false and directory size is 0 display - instead If fast is true and file size is 0 display - instead
2787	PrintDetailedDatumInfo pretty - prints detailed info about a datum
2788	PrintFile values for a pfs file .
2789	ShorthandInput renders a pps . Input as a short readable string
2790	Retrieve returns nil if it successfully retrieved the value . Error is returned if the value were not obtainable or empty .
2791	IsExpired returns if the credentials are no longer valid and need to be retrieved .
2792	NewBranch creates a pfs . Branch
2793	NewCommit creates a pfs . Commit .
2794	NewCommitProvenance creates a pfs . CommitProvenance .
2795	NewFile creates a pfs . File .
2796	CreateRepo creates a new Repo object in pfs with the given name . Repos are the top level data object in pfs and should be used to store data of a similar type . For example rather than having a single Repo for an entire project you might have separate Repos for logs metrics database dumps etc .
2797	InspectRepo returns info about a specific Repo .
2798	ListRepo returns info about all Repos . provenance specifies a set of provenance repos only repos which have ALL of the specified repos as provenance will be returned unless provenance is nil in which case it is ignored .
2799	DeleteRepo deletes a repo and reclaims the storage space it was using . Note that as of 1 . 0 we do not reclaim the blocks that the Repo was referencing this is because they may also be referenced by other Repos and deleting them would make those Repos inaccessible . This will be resolved in later versions . If force is set to true the repo will be removed regardless of errors . This argument should be used with care .
2800	BuildCommit builds a commit in a single call from an existing HashTree that has already been written to the object store . Note this is a more advanced pattern for creating commits that s mostly used internally .
2801	StartCommitParent begins the process of committing data to a Repo . Once started you can write to the Commit with PutFile and when all the data has been written you must finish the Commit with FinishCommit . NOTE data is not persisted until FinishCommit is called . branch is a more convenient way to build linear chains of commits . When a commit is started with a non empty branch the value of branch becomes an alias for the created Commit . This enables a more intuitive access pattern . When the commit is started on a branch the previous head of the branch is used as the parent of the commit . parentCommit specifies the parent Commit upon creation the new Commit will appear identical to the parent Commit data can safely be added to the new commit without affecting the contents of the parent Commit . You may pass as parentCommit in which case the new Commit will have no parent and will initially appear empty .
2802	FinishCommit ends the process of committing data to a Repo and persists the Commit . Once a Commit is finished the data becomes immutable and future attempts to write to it with PutFile will error .
2803	InspectCommit returns info about a specific Commit .
2804	BlockCommit returns info about a specific Commit but blocks until that commit has been finished .
2805	ListCommit lists commits . If only repo is given all commits in the repo are returned . If to is given only the ancestors of to including to itself are considered . If from is given only the descendents of from including from itself are considered . number determines how many commits are returned . If number is 0 all commits that match the aforementioned criteria are returned .
2806	ListCommitF lists commits calling f with each commit . If only repo is given all commits in the repo are returned . If to is given only the ancestors of to including to itself are considered . If from is given only the descendents of from including from itself are considered . number determines how many commits are returned . If number is 0 all commits that match the aforementioned criteria are returned .
2807	ListCommitByRepo lists all commits in a repo .
2808	CreateBranch creates a new branch
2809	InspectBranch returns information on a specific PFS branch
2810	ListBranch lists the active branches on a Repo .
2811	SetBranch sets a commit and its ancestors as a branch . SetBranch is deprecated in favor of CommitBranch .
2812	DeleteBranch deletes a branch but leaves the commits themselves intact . In other words those commits can still be accessed via commit IDs and other branches they happen to be on .
2813	DeleteCommit deletes a commit .
2814	FlushCommit returns an iterator that returns commits that have the specified commits as provenance . Note that the iterator can block if jobs have not successfully completed . This in effect waits for all of the jobs that are triggered by a set of commits to complete . If toRepos is not nil then only the commits up to and including those repos will be considered otherwise all repos are considered . Note that it s never necessary to call FlushCommit to run jobs they ll run no matter what FlushCommit just allows you to wait for them to complete and see their output once they do .
2815	FlushCommitF calls f with commits that have the specified commits as provenance . Note that it can block if jobs have not successfully completed . This in effect waits for all of the jobs that are triggered by a set of commits to complete . If toRepos is not nil then only the commits up to and including those repos will be considered otherwise all repos are considered . Note that it s never necessary to call FlushCommit to run jobs they ll run no matter what FlushCommitF just allows you to wait for them to complete and see their output once they do .
2816	FlushCommitAll returns commits that have the specified commits as provenance . Note that it can block if jobs have not successfully completed . This in effect waits for all of the jobs that are triggered by a set of commits to complete . If toRepos is not nil then only the commits up to and including those repos will be considered otherwise all repos are considered . Note that it s never necessary to call FlushCommit to run jobs they ll run no matter what FlushCommitAll just allows you to wait for them to complete and see their output once they do .
2817	SubscribeCommit is like ListCommit but it keeps listening for commits as they come in .
2818	SubscribeCommitF is like ListCommit but it calls a callback function with the results rather than returning an iterator .
2819	PutObjectAsync puts a value into the object store asynchronously .
2820	PutObject puts a value into the object store and tags it with 0 or more tags .
2821	PutObjectSplit is the same as PutObject except that the data is splitted into several smaller objects . This is primarily useful if you d like to be able to resume upload .
2822	GetObject gets an object out of the object store by hash .
2823	GetObjectReader returns a reader for an object in object store by hash .
2824	GetObjects gets several objects out of the object store by hash .
2825	TagObject applies a tag to an existing object .
2826	ListObject lists objects stored in pfs .
2827	InspectObject returns info about an Object .
2828	GetTag gets an object out of the object store by tag .
2829	GetTagReader returns a reader for an object in object store by tag .
2830	ListTag lists tags stored in pfs .
2831	Compact forces compaction of objects .
2832	NewPutFileClient returns a new client for putting files into pfs in a single request .
2833	PutFileOverwrite is like PutFile but it overwrites the file rather than appending to it . overwriteIndex allows you to specify the index of the object starting from which you d like to overwrite . If you want to overwrite the entire file specify an index of 0 .
2834	Close must be called after you re done using a putFileClient . Further requests will throw errors .
2835	CopyFile copys a file from one pfs location to another . It can be used on directories or regular files .
2836	GetFile returns the contents of a file at a specific Commit . offset specifies a number of bytes that should be skipped in the beginning of the file . size limits the total amount of data returned note you will get fewer bytes than size if you pass a value larger than the size of the file . If size is set to 0 then all of the data will be returned .
2837	GetFileReader returns a reader for the contents of a file at a specific Commit . offset specifies a number of bytes that should be skipped in the beginning of the file . size limits the total amount of data returned note you will get fewer bytes than size if you pass a value larger than the size of the file . If size is set to 0 then all of the data will be returned .
2838	GetFileReadSeeker returns a reader for the contents of a file at a specific Commit that permits Seeking to different points in the file .
2839	InspectFile returns info about a specific file .
2840	ListFile returns info about all files in a Commit under path .
2841	ListFileHistory returns info about all files and their history in a Commit under path .
2842	ListFileF returns info about all files in a Commit under path calling f with each FileInfo .
2843	Walk walks the pfs filesystem rooted at path . walkFn will be called for each file found under path in lexicographical order . This includes both regular files and directories .
2844	DeleteFile deletes a file from a Commit . DeleteFile leaves a tombstone in the Commit assuming the file isn t written to later attempting to get the file from the finished commit will result in not found error . The file will of course remain intact in the Commit s parent .
2845	Write performs a write .
2846	Close closes the writer .
2847	PrettyPrintVersionNoAdditional returns a version string without version . Additional .
2848	Walk the command tree wrap any examples in a block - quote with shell highlighting
2849	errMissingField returns a logical response error that prints a consistent error message for when a required field is missing .
2850	validateFields verifies that no bad arguments were given to the request .
2851	putConfig parses and returns the configuration data from the storage backend .
2852	getConfig parses and returns the configuration data from the storage backend .
2853	Serve serves stuff .
2854	NewPuller creates a new Puller struct .
2855	PullTree pulls from a raw HashTree rather than a repo .
2856	Push puts files under root into an open commit .
2857	PushObj pushes data from commit to an object store .
2858	PushFile makes sure that pfsFile has the same content as osFile .
2859	Dump writes debug information from the server to w .
2860	Profile writes a pprof profile for pachd to w .
2861	Binary writes the running pachd binary to w .
2862	RegisterCacheStats creates a new wrapper for groupcache stats that implements the prometheus . Collector interface and registers it
2863	wait until more than n bytes have been written
2864	RunWorkload runs a test workload against a Pachyderm cluster .
2865	createRepo creates a new repo in the cluster
2866	advanceCommit either starts or finishes a commit depending on the state of the cluster .
2867	RandString returns a random alphabetical string of size n
2868	NewReader returns a Reader which generates strings of characters .
2869	iterDir iterates through the nodes under path it errors with PathNotFound if path doesn t exist it errors with PathConflict if path exists but isn t a directory .
2870	FSSize gets the size of the hashtree
2871	Diff returns the diff of two hashtrees at particular paths .
2872	Serialize serializes a binary version of the hashtree .
2873	Deserialize deserializes a hashtree .
2874	Copy returns a copy of the hashtree .
2875	Destroy cleans up the on disk structures for the hashtree .
2876	PutFileOverwrite is the same as PutFile except that instead of appending the objects to the end of the given file the objects are inserted to the given index and the existing objects starting from the given index are removed .
2877	PutDirHeaderFooter implements the hashtree . PutDirHeaderFooter interface method
2878	PutFileHeaderFooter implements the HashTree PutFileHeaderFooter method
2879	deleteDir deletes a directory and all the children under it
2880	NewReader creates a new hashtree reader .
2881	Read reads the next merge node .
2882	NewWriter creates a new hashtree writer .
2883	Write writes the next merge node .
2884	Copy copies a hashtree reader in a writer .
2885	Index returns the index for a hashtree writer .
2886	GetRangeFromIndex returns a subtree byte range in a serialized hashtree based on a passed in prefix .
2887	NewFilter creates a filter for a hashtree shard .
2888	PathToTree computes the hashtree shard for a path .
2889	Merge merges a collection of hashtree readers into a hashtree writer .
2890	Hash updates all of the hashes and node size metadata it also checks for conflicts .
2891	IsGlob checks if the pattern contains a glob character
2892	GlobLiteralPrefix returns the prefix before the first glob character
2893	GetHashTreeObject is a convenience function to deserialize a HashTree from an object in the object store .
2894	GetHashTreeTag is a convenience function to deserialize a HashTree from an tagged object in the object store .
2895	PutHashTree is a convenience function for putting a HashTree to an object store .
2896	NewChildCursor creates a new child cursor .
2897	Next gets the next key value pair .
2898	NewOrdered creates a new ordered hashtree .
2899	MkdirAll puts all of the parent directories of a given path into the hashtree .
2900	PutDir puts a directory in the hashtree .
2901	Serialize serializes an ordered hashtree .
2902	NewUnordered creates a new unordered hashtree .
2903	Ordered converts an unordered hashtree into an ordered hashtree .
2904	revokeUserCredentials revokes the Pachyderm authentication token userToken using the vault plugin s Admin credentials .
2905	NewAPIServer creates a new APIServer for the given Version .
2906	String returns a string representation of the Version .
2907	getPipelineInfo gets the PipelineInfo proto describing the pipeline that this worker is part of . getPipelineInfo has the side effect of adding auth to the passed pachClient which is necessary to get the PipelineInfo from pfs .
2908	removeStr removes s from ss preserving the sorted order of ss ( for removing child strings from DirectoryNodes .
2909	PublicCertToPEM serializes the public x509 cert in cert to a PEM - formatted block
2910	GenerateSelfSignedCert generates a self - signed TLS cert for the domain name address with a private key . Other attributes of the subject can be set in name and ip addresses can be set in ipAddresses
2911	ActivateCmd returns a cobra . Command to activate Pachyderm s auth system
2912	DeactivateCmd returns a cobra . Command to delete all ACLs tokens and admins deactivating Pachyderm s auth system
2913	LoginCmd returns a cobra . Command to login to a Pachyderm cluster with your GitHub account . Any resources that have been restricted to the email address registered with your GitHub account will subsequently be accessible .
2914	LogoutCmd returns a cobra . Command that deletes your local Pachyderm credential logging you out of your cluster . Note that this is not necessary to do before logging in as another user but is useful for testing .
2915	WhoamiCmd returns a cobra . Command that deletes your local Pachyderm credential logging you out of your cluster . Note that this is not necessary to do before logging in as another user but is useful for testing .
2916	CheckCmd returns a cobra command that sends an Authorize RPC to Pachd to determine whether the specified user has access to the specified repo .
2917	GetCmd returns a cobra command that gets either the ACL for a Pachyderm repo or another user s scope of access to that repo
2918	SetScopeCmd returns a cobra command that lets a user set the level of access that another user has to a repo
2919	ListAdminsCmd returns a cobra command that lists the current cluster admins
2920	ModifyAdminsCmd returns a cobra command that modifies the set of current cluster admins
2921	GetAuthTokenCmd returns a cobra command that lets a user get a pachyderm token on behalf of themselves or another user
2922	UseAuthTokenCmd returns a cobra command that lets a user get a pachyderm token on behalf of themselves or another user
2923	Cmds returns a list of cobra commands for authenticating and authorizing users in an auth - enabled Pachyderm cluster .
2924	ParseScope parses the string s to a scope ( for example parsing a command - line argument .
2925	IsErrNotActivated checks if an error is a ErrNotActivated
2926	IsErrPartiallyActivated checks if an error is a ErrPartiallyActivated
2927	IsErrNotSignedIn returns true if err is a ErrNotSignedIn
2928	IsErrBadToken returns true if err is a ErrBadToken
2929	IsErrNotAuthorized checks if an error is a ErrNotAuthorized
2930	IsErrInvalidPrincipal returns true if err is an ErrInvalidPrincipal
2931	IsErrTooShortTTL returns true if err is a ErrTooShortTTL
2932	NewDatumFactory creates a datumFactory for an input .
2933	NewCollection creates a new collection .
2934	Path returns the full path of a key in the etcd namespace
2935	Giving a value an index and the key of the item return the path under which the new index item should be stored .
2936	Giving a value a multi - index and the key of the item return the paths under which the multi - index items should be stored .
2937	Upsert is like Update but key is not required to be present
2938	get is an internal wrapper around etcdClient . Get that wraps the call in a trace
2939	List returns objects sorted based on the options passed in . f will be called with each key val will contain the corresponding value . Val is not an argument to f because that would require f to perform a cast before it could be used . You can break out of iteration by returning errutil . ErrBreak .
2940	Watch a collection returning the current content of the collection as well as any future additions .
2941	WatchByIndex watches items in a collection that match a particular index
2942	WatchOne watches a given item . The first value returned from the watch will be the current value of the item .
2943	WatchOneF watches a given item and executes a callback function each time an event occurs . The first value returned from the watch will be the current value of the item .
2944	Get gets a key s value by returning an io . ReadCloser that should be closed when done .
2945	Keys returns the keys in sorted order .
2946	Clear clears the cache .
2947	NewHTTPServer returns a Pachyderm HTTP server .
2948	NewDeployServer creates a deploy server
2949	Export a tarball of the images needed by a deployment .
2950	Import a tarball of the images needed by a deployment such as the one created by Export and push those images to the registry specific in opts .
2951	DatumTagPrefix hashes a pipeline salt to a string of a fixed size for use as the prefix for datum output trees . This prefix allows us to do garbage collection correctly .
2952	NewPFSInput returns a new PFS input . It only includes required options .
2953	NewPFSInputOpts returns a new PFS input . It includes all options .
2954	NewJobInput creates a pps . JobInput .
2955	NewPipelineInput creates a new pps . PipelineInput
2956	CreateJob creates and runs a job in PPS . This function is mostly useful internally users should generally run work by creating pipelines as well .
2957	ListJob returns info about all jobs . If pipelineName is non empty then only jobs that were started by the named pipeline will be returned If inputCommit is non - nil then only jobs which took the specific commits as inputs will be returned . The order of the inputCommits doesn t matter . If outputCommit is non - nil then only the job which created that commit as output will be returned .
2958	ListJobF returns info about all jobs calling f with each JobInfo . If f returns an error iteration of jobs will stop and ListJobF will return that error unless the error is errutil . ErrBreak in which case it will return nil . If pipelineName is non empty then only jobs that were started by the named pipeline will be returned If inputCommit is non - nil then only jobs which took the specific commits as inputs will be returned . The order of the inputCommits doesn t matter . If outputCommit is non - nil then only the job which created that commit as output will be returned .
2959	FlushJob calls f with all the jobs which were triggered by commits . If toPipelines is non - nil then only the jobs between commits and those pipelines in the DAG will be returned .
2960	FlushJobAll returns all the jobs which were triggered by commits . If toPipelines is non - nil then only the jobs between commits and those pipelines in the DAG will be returned .
2961	DeleteJob deletes a job .
2962	StopJob stops a job .
2963	RestartDatum restarts a datum that s being processed as part of a job . datumFilter is a slice of strings which are matched against either the Path or Hash of the datum the order of the strings in datumFilter is irrelevant .
2964	ListDatum returns info about all datums in a Job
2965	ListDatumF returns info about all datums in a Job calling f with each datum info .
2966	InspectDatum returns info about a single datum
2967	Next retrieves the next relevant log message from pachd
2968	InspectPipeline returns info about a specific pipeline .
2969	ListPipeline returns info about all pipelines .
2970	DeletePipeline deletes a pipeline along with its output Repo .
2971	StartPipeline restarts a stopped pipeline .
2972	StopPipeline prevents a pipeline from processing things it can be restarted with StartPipeline .
2973	RerunPipeline reruns a pipeline over a given set of commits . Exclude and include are filters that either include or exclude the ancestors of the given commits . A commit is considered the ancestor of itself . The behavior is the same as that of ListCommit .
2974	CreatePipelineService creates a new pipeline service .
2975	GetDatumTotalTime sums the timing stats from a DatumInfo
2976	Mount pfs to mountPoint opts may be left nil .
2977	NewBufPool creates a new BufPool that returns buffers of the given size .
2978	StorageRootFromEnv gets the storage root based on environment variables .
2979	BlockPathFromEnv gets the path to an object storage block based on environment variables .
2980	NewGoogleClient creates a google client with the given bucket name .
2981	NewGoogleClientFromSecret creates a google client by reading credentials from a mounted GoogleSecret . You may pass for bucket in which case it will read the bucket from the secret .
2982	NewGoogleClientFromEnv creates a Google client based on environment variables .
2983	NewMicrosoftClientFromSecret creates a microsoft client by reading credentials from a mounted MicrosoftSecret . You may pass for container in which case it will read the container from the secret .
2984	NewMicrosoftClientFromEnv creates a Microsoft client based on environment variables .
2985	NewMinioClientFromSecret constructs an s3 compatible client by reading credentials from a mounted AmazonSecret . You may pass for bucket in which case it will read the bucket from the secret .
2986	NewMinioClientFromEnv creates a Minio client based on environment variables .
2987	NewAmazonClientFromSecret constructs an amazon client by reading credentials from a mounted AmazonSecret . You may pass for bucket in which case it will read the bucket from the secret .
2988	NewAmazonClientFromEnv creates a Amazon client based on environment variables .
2989	NewClientFromURLAndSecret constructs a client by parsing URL and then constructing the correct client for that URL using secrets .
2990	ParseURL parses an URL into ObjectStoreURL .
2991	NewClientFromEnv creates a client based on environment variables .
2992	NewExponentialBackOffConfig creates an exponential back - off config with longer wait times than the default .
2993	Close closes the ReaderCloser contained in b .
2994	Close closes the WriteCloser contained in b .
2995	IsRetryable determines if an operation should be retried given an error
2996	RunStdin runs the command with the given stdin and arguments .
2997	RunIODirPath runs the command with the given IO and arguments in the given directory specified by dirPath .
2998	NewAuthServer returns an implementation of authclient . APIServer .
2999	expiredClusterAdminCheck enforces that if the cluster s enterprise token is expired only admins may log in .
3000	getOneTimePassword contains the implementation of GetOneTimePassword but is also called directly by handleSAMLREsponse . It generates a short - lived authentication code for username writes it to a . authenticationCodes and returns it
3001	hashToken converts a token to a cryptographic hash . We don t want to store tokens verbatim in the database as then whoever that has access to the database has access to all tokens .
3002	getAuthToken extracts the auth token embedded in ctx if there is on
3003	canonicalizeSubjects applies canonicalizeSubject to a list
3004	Matches checks that a string matches a regular - expression .
3005	OneOfMatches checks whether one element of a slice matches a regular - expression .
3006	Equal checks equality of two values .
3007	NotEqual checks inequality of two values .
3008	oneOfEquals is a helper function for EqualOneOf OneOfEquals and NoneEquals that simply returns a bool indicating whether elem is in slice . sliceName is used for errors
3009	NoneEquals checks one element of a slice equals a value . Like EqualsOneOf NoneEquals unwraps pointers .
3010	NoError checks for no error .
3011	NoErrorWithinT checks that f finishes within time t and does not emit an error
3012	NoErrorWithinTRetry checks that f finishes within time t and does not emit an error . Unlike NoErrorWithinT if f does error it will retry it .
3013	YesError checks for an error .
3014	NotNil checks a value is non - nil .
3015	Nil checks a value is nil .
3016	False checks a value is false .
3017	NewSTM intiates a new STM operation . It uses a serializable model .
3018	NewDryrunSTM intiates a new STM operation but the final commit is skipped . It uses a serializable model .
3019	newSTMRepeatable initiates new repeatable read transaction ; reads within the same transaction attempt to always return the same data .
3020	newSTMSerializable initiates a new serialized transaction ; reads within the same transaction attempt to return data from the revision of the first read .
3021	newSTMReadCommitted initiates a new read committed transaction .
3022	commit always goes through when read committed
3023	Pipelines returns a Collection of pipelines
3024	Jobs returns a Collection of jobs
3025	NewTicker returns a new Ticker containing a channel that will send the time at times specified by the BackOff argument . Ticker is guaranteed to tick at least once . The channel is closed when Stop method is called or BackOff stops .
3026	nodeToMap translates the contents of a node into a map nodeToMap can be called on the same map with successive results from watch to accumulate a value nodeToMap returns true if out was modified
3027	ServiceAccount returns a kubernetes service account for use with Pachyderm .
3028	ClusterRole returns a ClusterRole that should be bound to the Pachyderm service account .
3029	RoleBinding returns a RoleBinding that binds Pachyderm s Role to its ServiceAccount .
3030	GetSecretEnvVars returns the environment variable specs for the storage secret .
3031	PachdService returns a pachd service .
3032	GithookService returns a k8s service that exposes a public IP
3033	EtcdDeployment returns an etcd k8s Deployment .
3034	EtcdStorageClass creates a storage class used for dynamic volume provisioning . Currently dynamic volume provisioning only works on AWS and GCE .
3035	EtcdVolume creates a persistent volume backed by a volume with name name
3036	EtcdNodePortService returns a NodePort etcd service . This will let non - etcd pods talk to etcd
3037	EtcdHeadlessService returns a headless etcd service which is only for DNS resolution .
3038	EtcdStatefulSet returns a stateful set that manages an etcd cluster
3039	DashDeployment creates a Deployment for the pachyderm dashboard .
3040	DashService creates a Service for the pachyderm dashboard .
3041	WriteSecret writes a JSON - encoded k8s secret to the given writer . The secret uses the given map as data .
3042	GoogleSecret creates a google secret with a bucket name .
3043	WriteDashboardAssets writes the k8s config for deploying the Pachyderm dashboard to encoder
3044	WriteLocalAssets writes assets to a local backend .
3045	WriteCustomAssets writes assets to a custom combination of object - store and persistent disk .
3046	WriteAmazonAssets writes assets to an amazon backend .
3047	WriteGoogleAssets writes assets to a google backend .
3048	WriteMicrosoftAssets writes assets to a microsoft backend
3049	Images returns a list of all the images that are used by a pachyderm deployment .
3050	AddRegistry switches the registry that an image is targeting unless registry is blank
3051	withCanonicalRandomizationFactor is a utility function used by all NewXYZBackoff functions to clamp b . RandomizationFactor to either 0 or 1
3052	Reset the interval back to the initial retry interval and restarts the timer .
3053	Increments the current interval by multiplying it with the multiplier .
3054	NewBlockAPIServer creates a BlockAPIServer using the credentials it finds in the environment
3055	LocalStorage creates a local chunk storage instance . Useful for storage layer tests .
3056	deleteJob is identical to updateJobState except that jobPtr points to a job that should be deleted rather than marked failed . Jobs may be deleted if their output commit is deleted .
3057	writeXML serializes a struct to a response as XML
3058	clean canonicalizes path for a Pachyderm 1 . 7 hashtree
3059	NewFromAddress constructs a new APIClient for the server at addr .
3060	getUserMachineAddrAndOpts is a helper for NewOnUserMachine that uses environment variables config files etc to figure out which address a user running a command should connect to .
3061	NewInCluster constructs a new APIClient using env vars that Kubernetes creates . This should be used to access Pachyderm from within a Kubernetes cluster with Pachyderm running on it .
3062	Close the connection to gRPC
3063	DeleteAll deletes everything in the cluster . Use with caution there is no undo .
3064	SetMaxConcurrentStreams Sets the maximum number of concurrent streams the client can have . It is not safe to call this operations while operations are outstanding .
3065	WithCtx returns a new APIClient that uses ctx for requests it sends . Note that the new APIClient will still use the authentication token and metrics metadata of this client so this is only useful for propagating other context - associated metadata .
3066	NewDLock attempts to acquire a distributed lock that locks a given prefix in the data store .
3067	DatumID computes the id for a datum this value is used in ListDatum and InspectDatum .
3068	Run user error code and return the combined output of stdout and stderr .
3069	HashDatum computes and returns the hash of datum + pipeline with a pipeline - specific prefix .
3070	HashDatum15 computes and returns the hash of datum + pipeline for version < = 1 . 5 . 0 with a pipeline - specific prefix .
3071	Status returns the status of the current worker .
3072	Cancel cancels the currently running datum
3073	mergeStats merges y into x
3074	mergeChunk merges the datum hashtrees into a chunk hashtree and stores it .
3075	IsCommitNotFoundErr returns true if err has an error message that matches ErrCommitNotFound
3076	IsCommitDeletedErr returns true if err has an error message that matches ErrCommitDeleted
3077	IsCommitFinishedErr returns true of err has an error message that matches ErrCommitFinished
3078	IsRepoNotFoundErr returns true if err is an error message about a repo not being found
3079	IsBranchNotFoundErr returns true if err is an error message about a branch not being found
3080	IsFileNotFoundErr returns true if err is an error message about a PFS file not being found
3081	Version returns the version of pachd as a string .
3082	validateRepoName determines if a repo name is valid
3083	newDriver is used to create a new Driver instance
3084	inspectCommit takes a Commit and returns the corresponding CommitInfo . As a side effect this function also replaces the ID in the given commit with a real commit ID .
3085	scratchCommitPrefix returns an etcd prefix that s used to temporarily store the state of a file in an open commit . Once the commit is finished the scratch space is removed .
3086	scratchFilePrefix returns an etcd prefix that s used to temporarily store the state of a file in an open commit . Once the commit is finished the scratch space is removed .
3087	getTreeForFile is like getTreeForCommit except that it can handle open commits . It takes a file instead of a commit so that it can apply the changes for that path to the tree before it returns it .
3088	this is a helper function to check if the given provenance has provenance on an input branch
3089	If full is false exclude potentially large fields such as Objects and Children
3090	fileHistory calls f with FileInfos for the file starting with how it looked at the referenced commit and then all past versions that are different .
3091	Put the tree into the blob store Only write the records to etcd if the commit does exist and is open . To check that a key exists in etcd we assert that its CreateRevision is greater than zero .
3092	ReadRow parses the pgdump file and populates the header and the footer It returns EOF when done and at that time both the Header and Footer will be populated . Both header and footer are required . If either are missing an error is returned
3093	NewReporter creates a new reporter and kicks off the loop to report cluster metrics
3094	ReportUserAction pushes the action into a queue for reporting and reports the start finish and error conditions
3095	FinishReportAndFlushUserAction immediately reports the metric but does not block execution . It returns a wait function which waits or times out after 5s . It is used by the pachctl binary and runs on users machines
3096	Read reads from the byte stream produced by the set of DataRefs .
3097	ActivateCmd returns a cobra . Command to activate the enterprise features of Pachyderm within a Pachyderm cluster . All repos will go from publicly - accessible to accessible only by the owner who can subsequently add users
3098	GetStateCmd returns a cobra . Command to activate the enterprise features of Pachyderm within a Pachyderm cluster . All repos will go from publicly - accessible to accessible only by the owner who can subsequently add users
3099	Cmds returns pachctl commands related to Pachyderm Enterprise
3100	NewConfiguration creates a generic configuration from a specific type of configuration .
3101	Repos returns a collection of repos
3102	PutFileRecords returns a collection of putFileRecords
3103	Commits returns a collection of commits
3104	Branches returns a collection of branches
3105	OpenCommits returns a collection of open commits
3106	NewDAG creates a DAG and populates it with the given nodes .
3107	NewNode adds a node to d .
3108	Sorted returns all nodes in a topologically sorted order
3109	Leaves returns a slice containing all leaves in d .
3110	Ancestors returns a slice containing all ancestors of a node id in d which are a descendant of at least one of the nodes in from .
3111	Descendants returns a slice containing all descendants of a node id in d which are an ancestor of at least one of the nodes in to .
3112	Ghosts returns nodes that were referenced as parents but never created .
3113	NewPortForwarder creates a new port forwarder
3114	Run starts the port forwarder . Returns after initialization is begun returning any initialization errors .
3115	RunForDaemon creates a port forwarder for the pachd daemon .
3116	RunForSAMLACS creates a port forwarder for SAML ACS .
3117	RunForDashUI creates a port forwarder for the dash UI .
3118	RunForDashWebSocket creates a port forwarder for the dash websocket .
3119	RunForPFS creates a port forwarder for PFS over HTTP .
3120	RunForS3Gateway creates a port forwarder for the s3gateway .
3121	Lock uses pidfiles to ensure that only one port forwarder is running across one or more pachctl instances
3122	Close shuts down port forwarding .
3123	Unmarshal unmarshals the item in an event into a protobuf message .
3124	UnmarshalPrev unmarshals the prev item in an event into a protobuf message .
3125	MakeWatcher returns a Watcher that uses the given event channel and done channel internally to deliver events and signal closure respectively .
3126	CheckType checks to make sure val has the same type as template unless template is nil in which case it always returns nil .
3127	NewPool creates a new connection pool with connections to pods in the given service .
3128	Do allows you to do something with a grpc . ClientConn . Errors returned from f will be returned by Do .
3129	Close closes all connections stored in the pool it returns an error if any of the calls to Close error .
3130	buildImage builds a new docker image .
3131	pushImage pushes a docker image .
3132	Creates a new minioClient structure and returns
3133	Creates a new minioClient S3V2 structure and returns
3134	Creates a new minio writer and a go routine to upload objects to minio server
3135	This will block till upload is done
3136	PipelineRepo creates a pfs repo for a given pipeline .
3137	PipelineRcName generates the name of the k8s replication controller that manages a pipeline s workers
3138	GetRequestsResourceListFromPipeline returns a list of resources that the pipeline minimally requires .
3139	GetLimitsResourceListFromPipeline returns a list of resources that the pipeline maximally is limited to .
3140	getNumNodes attempts to retrieve the number of nodes in the current k8s cluster
3141	GetExpectedNumWorkers computes the expected number of workers that pachyderm will start given the ParallelismSpec spec . This is only exported for testing
3142	GetExpectedNumHashtrees computes the expected number of hashtrees that Pachyderm will create given the HashtreeSpec spec .
3143	FailPipeline updates the pipeline s state to failed and sets the failure reason
3144	JobInput fills in the commits for a JobInfo
3145	PipelineReqFromInfo converts a PipelineInfo into a CreatePipelineRequest .
3146	NewPipelineManifestReader creates a new manifest reader from a path .
3147	NextCreatePipelineRequest gets the next request from the manifest reader .
3148	DescribeSyntaxError describes a syntax error encountered parsing json .
3149	UpdateJobState performs the operations involved with a job state transition .
3150	New returns a new uuid .
3151	Code returns the HTTP error code associated with h
3152	NewHTTPError returns a new HTTPError where the HTTP error code is code and the error message is based on formatStr and args
3153	NewStorage creates a new Storage .
3154	DeleteAll deletes all of the chunks in object storage .
3155	Chunk splits a piece of data up this is useful for splitting up data that s bigger than MaxMsgSize
3156	ChunkReader splits a reader into reasonably sized chunks for the purpose of transmitting the chunks over gRPC . For each chunk it calls the given function .
3157	NewStreamingBytesReader returns an io . Reader for a StreamingBytesClient .
3158	WriteToStreamingBytesServer writes the data from the io . Reader to the StreamingBytesServer .
3159	WriteFromStreamingBytesClient writes from the StreamingBytesClient to the io . Writer .
3160	NewSidecarAPIServer creates an APIServer that has limited functionalities and is meant to be run as a worker sidecar . It cannot for instance create pipelines .
3161	NewEnterpriseServer returns an implementation of ec . APIServer .
3162	validateActivationCode checks the validity of an activation code
3163	Activate implements the Activate RPC
3164	Deactivate deletes the current cluster s enterprise token and puts the cluster in the NONE enterprise state . It also deletes all data in the cluster to avoid invalid cluster states . This call only makes sense for testing
3165	lookExtensions finds windows executable by its dir and path . It uses LookPath to try appropriate extensions . lookExtensions does not search PATH instead it converts prog into . \ prog .
3166	Start starts the specified command but does not wait for it to complete . The Wait method will return the exit code and release associated resources once the command exits .
3167	CombinedOutput runs the command and returns its combined standard output and standard error .
3168	StdinPipe returns a pipe that will be connected to the command s standard input when the command starts . The pipe will be closed automatically after Wait sees the command exit . A caller need only call Close to force the pipe to close sooner . For example if the command being run will not exit until standard input is closed the caller must close the pipe .
3169	StdoutPipe returns a pipe that will be connected to the command s standard output when the command starts . Wait will close the pipe after seeing the command exit so most callers need not close the pipe themselves ; however an implication is that it is incorrect to call Wait before all reads from the pipe have completed . For the same reason it is incorrect to call Run when using StdoutPipe . See the example for idiomatic usage .
3170	dedupEnvCase is dedupEnv with a case option for testing . If caseInsensitive is true the case of keys is ignored .
3171	InputName computes the name of an Input .
3172	SortInput sorts an Input .
3173	InputBranches returns the branches in an Input .
3174	ValidateGitCloneURL returns an error if the provided URL is invalid
3175	containsEmpty is a helper function used for validation ( particularly for validating that creds arguments aren t empty
3176	NewAPIServer returns a new admin . APIServer
3177	Ago pretty - prints the amount of time that has passed since timestamp as a human - readable string .
3178	TimeDifference pretty - prints the duration of time between from and to as a human - reabable string .
3179	Duration pretty prints a duration in a human readable way .
3180	InspectCluster retrieves cluster state
3181	Extract all cluster state call f with each operation .
3182	ExtractAll cluster state as a slice of operations .
3183	ExtractWriter extracts all cluster state and marshals it to w .
3184	ExtractURL extracts all cluster state and marshalls it to object storage .
3185	ExtractPipeline extracts a single pipeline .
3186	Restore cluster state from an extract series of operations .
3187	RestoreReader restores cluster state from a reader containing marshaled ops . Such as those written by ExtractWriter .
3188	RestoreFrom restores state from another cluster which can be access through otherC .
3189	RestoreURL restures cluster state from object storage .
3190	IgnoreTypes returns an Option that ignores all values assignable to certain types which are specified by passing in a value of each type .
3191	AppendEllipsis appends a new ellipsis node to the list if none already exists at the end . If cs is non - zero it coalesces the statistics with the previous diffStats .
3192	IsType reports whether the reflect . Type is of the specified function type .
3193	NameOf returns the name of the function value .
3194	PointerOf returns a Pointer from v which must be a reflect . Ptr reflect . Slice or reflect . Map .
3195	String returns a human - readable string representing the edit - script where Identity UniqueX UniqueY and Modified are represented by the . X Y and M characters respectively .
3196	stats returns a histogram of the number of each type of edit operation .
3197	connect appends any necessary Identity Modified UniqueX or UniqueY types to the edit - script to connect p . point to dst .
3198	EquateNaNs returns a Comparer option that determines float32 and float64 NaN values to be equal . EquateNaNs can be used in conjunction with EquateApprox .
3199	Index returns the ith step in the Path and supports negative indexing . A negative index starts counting from the tail of the Path such that - 1 refers to the last step - 2 refers to the second - to - last step and so on . If index is invalid this returns a non - nil PathStep that reports a nil Type .
3200	Key is the index key ; it may return - 1 if in a split state
3201	String provides a full report of the differences detected as a structured literal in pseudo - Go syntax . String may only be called after the entire tree has been traversed .
3202	FormatType prints the type as if it were wrapping s . This may return s as - is depending on the current type and TypeMode mode .
3203	formatMapKey formats v as if it were a map key . The result is guaranteed to be a single line .
3204	formatString prints s as a double - quoted or backtick - quoted string .
3205	formatHex prints u as a hexadecimal integer in Go notation .
3206	formatPointer prints the address of the pointer .
3207	Visit inserts pointer v into the visited map and reports whether it had already been visited before .
3208	retrieveUnexportedField uses unsafe to forcibly retrieve any field from a struct such that the value has read - write permissions . The parent struct v must be addressable while f must be a StructField describing the field to retrieve .
3209	insert inserts a sequence of field accesses into the tree .
3210	matchPrefix reports whether any selector in the fieldTree matches the start of path p .
3211	canonicalName returns a list of identifiers where any struct field access through an embedded field is expanded to include the names of the embedded types themselves . For example suppose field Foo is not directly in the parent struct but actually from an embedded struct of type Bar . Then the canonical name of Foo is actually Bar . Foo . Suppose field Foo is not directly in the parent struct but actually a field in two different embedded structs of types Bar and Baz . Then the selector Foo causes a panic since it is ambiguous which one it refers to . The user must specify either Bar . Foo or Baz . Foo .
3212	FilterPath returns a new Option where opt is only evaluated if filter f returns true for the current Path in the value tree . This filter is called even if a slice element or map entry is missing and provides an opportunity to ignore such cases . The filter function must be symmetric such that the filter result is identical regardless of whether the missing value is from x or y . The option passed in may be an Ignore Transformer Comparer Options or a previously filtered Option .
3213	normalizeOption normalizes the input options such that all Options groups are flattened and groups with a single element are reduced to that element . Only coreOptions and Options containing coreOptions are allowed .
3214	flattenOptions copies all options in src to dst as a flat list . Only coreOptions and Options containing coreOptions are allowed .
3215	CanFormatDiffSlice reports whether we support custom formatting for nodes that are slices of primitive kinds or strings .
3216	formatASCII formats s as an ASCII string . This is useful for printing binary strings in a semi - legible way .
3217	coalesceAdjacentEdits coalesces the list of edits into groups of adjacent equal or unequal counts .
3218	SortKeys sorts a list of map keys deduplicating keys if necessary . The type of each value must be comparable .
3219	FormatDiff converts a valueNode tree into a textNode tree where the later is a textual representation of the differences detected in the former .
3220	coalesceAdjacentRecords coalesces the list of records into groups of adjacent equal or unequal counts .
3221	Diff returns a human - readable report of the differences between two values . It returns an empty string if and only if Equal returns true for the same input values and options . The output is displayed as a literal in pseudo - Go syntax . At the start of each line a - prefix indicates an element removed from x a + prefix to indicates an element added to y and the lack of a prefix indicates an element common to both x and y . If possible the output uses fmt . Stringer . String or error . Error methods to produce more humanly readable outputs . In such cases the string is prefixed with either an s or e character respectively to indicate that the method was called . Do not depend on this output being stable . If you need the ability to programmatically interpret the difference consider using a custom Reporter .
3222	statelessCompare compares two values and returns the result . This function is stateless in that it does not alter the current result or output to any registered reporters .
3223	sanitizeValue converts nil interfaces of type T to those of type R assuming that T is assignable to R . Otherwise it returns the input value as is .
3224	Check scans the Path for any recursive transformers and panics when any recursive transformers are detected . Note that the presence of a recursive Transformer does not necessarily imply an infinite cycle . As such this check only activates after some minimal number of path steps .
3225	makeAddressable returns a value that is always addressable . It returns the input verbatim if it is already addressable otherwise it creates a new value and returns an addressable copy .
3226	Marshal passes a Field instance through to the appropriate field - type - specific method of an Encoder .
3227	String returns a string representation of the key and value .
3228	Set applies the tag to an existing Span .
3229	Inject implements the Injector interface
3230	Extract implements the Extractor interface
3231	ToLogRecord converts a deprecated LogData to a non - deprecated LogRecord
3232	New returns a MockTracer opentracing . Tracer implementation that s intended to facilitate tests of OpenTracing instrumentation .
3233	StartSpan belongs to the Tracer interface .
3234	RegisterInjector registers injector for given format
3235	RegisterExtractor registers extractor for given format
3236	Inject belongs to the Tracer interface .
3237	Extract belongs to the Tracer interface .
3238	ContextWithSpan returns a new context . Context that holds a reference to span s SpanContext .
3239	Set adds a uint32 tag to the span
3240	Set adds a uint16 tag to the span
3241	Add adds a bool tag to the span
3242	SetString records IP v4 host address of the peer as a . - separated tuple to the span . E . g . 127 . 0 . 0 . 1
3243	EmitString belongs to the log . Encoder interface
3244	EmitLazyLogger belongs to the log . Encoder interface
3245	RunAPIChecks runs a test suite to check a Tracer against the OpenTracing API . It is provided a function that will be executed to create and destroy a tracer for each test in the suite and the given APICheckOption functional options opts .
3246	CheckBaggageValues returns an option that sets whether to check for propagation of baggage values .
3247	CheckExtract returns an option that sets whether to check if extracting contexts from carriers works .
3248	CheckInject returns an option that sets whether to check if injecting contexts works .
3249	CheckEverything returns an option that enables all API checks .
3250	UseProbe returns an option that specifies an APICheckProbe implementation to use .
3251	WithBaggageItem creates a new context with an extra baggage item .
3252	Tags returns a copy of tags accumulated by the span so far
3253	Tag returns a single tag
3254	Logs returns a copy of logs accumulated in the span so far
3255	Context belongs to the Span interface
3256	SetTag belongs to the Span interface
3257	SetBaggageItem belongs to the Span interface
3258	BaggageItem belongs to the Span interface
3259	Finish belongs to the Span interface
3260	FinishWithOptions belongs to the Span interface
3261	String allows printing span for debugging
3262	LogFields belongs to the Span interface
3263	The caller MUST NOT hold s . Lock
3264	LogKV belongs to the Span interface . This implementations coerces all values to strings though that is not something all implementations need to do . Indeed a motivated person can and probably should have this do a typed switch on the values .
3265	LogEvent belongs to the Span interface
3266	LogEventWithPayload belongs to the Span interface
3267	SetOperationName belongs to the Span interface
3268	registriesDirPath returns a path to registries . d
3269	loadAndMergeConfig loads configuration files in dirPath
3270	ParseReference converts a string which should not start with the ImageTransport . Name prefix into an OpenShift ImageReference .
3271	NewReference returns an OpenShift reference for a reference . NamedTagged
3272	CheckAuth validates the credentials by attempting to log into the registry returns an error if an error occurred while making the http request or the status code received was 401
3273	doHttp uses the clients internal TLS configuration for doing the provided HTTP request . It returns the response and an error on failure .
3274	detectPropertiesHelper performs the work of detectProperties which executes it at most once .
3275	detectProperties detects various properties of the registry . See the dockerClient documentation for members which are affected by this .
3276	getExtensionsSignatures returns signatures from the X - Registry - Supports - Signatures API extension using the original data structures .
3277	NewTransport Creates a default transport
3278	Reads the global registry file from the filesystem . Returns a byte array
3279	GetRegistries returns an array of strings that contain the names of the registries as defined in the system - wide registries file . it returns an empty array if none are defined
3280	GetInsecureRegistries returns an array of strings that contain the names of the insecure registries as defined in the system - wide registries file . it returns an empty array if none are defined
3281	RegistriesConfPath is the path to the system - wide registry configuration file
3282	NewOptionalBool converts the input bool into either OptionalBoolTrue or OptionalBoolFalse . The function is meant to avoid boilerplate code of users .
3283	changeContextState changes pc . state or fails if the state is unexpected
3284	Destroy should be called when the user of the context is done with it .
3285	policyIdentityLogName returns a string description of the image identity for policy purposes . ONLY use this for log messages not for any decisions!
3286	requirementsForImageRef selects the appropriate requirements for ref .
3287	ParseImageName converts a URL - like image name to a types . ImageReference .
3288	BlobInfoFromOCI1Descriptor returns a types . BlobInfo based on the input OCI1 descriptor .
3289	OCI1FromManifest creates an OCI1 manifest instance from a manifest blob .
3290	OCI1FromComponents creates an OCI1 manifest instance from the supplied data .
3291	newReference returns a dockerReference for a named reference .
3292	tagOrDigest returns a tag or digest from the reference .
3293	updateEmbeddedDockerReference handles the Docker reference embedded in Docker schema1 manifests .
3294	isTTY returns true if the io . Writer is a file and a tty .
3295	copyUpdatedConfigAndManifest updates the image per ic . manifestUpdates if necessary stores the resulting config and manifest to the destination and returns the stored manifest .
3296	createProgressBar creates a mpb . Bar in pool . Note that if the copier s reportWriter is ioutil . Discard the progress bar s output will be discarded
3297	copyConfig copies config . json if any from src to dest .
3298	diffIDComputationGoroutine reads all input from layerStream uncompresses using decompressor if necessary and sends its digest and status if any to dest .
3299	computeDiffID reads all input from layerStream uncompresses it using decompressor if necessary and returns its digest .
3300	compressGoroutine reads all input from src and writes its compressed equivalent to dest .
3301	NewDockerClient initializes a new API client based on the passed SystemContext .
3302	defaultPolicyPath returns a path to the default policy of the system .
3303	NewPolicyFromFile returns a policy configured in the specified file .
3304	NewPolicyFromBytes returns a policy parsed from the specified blob . Use this function instead of calling json . Unmarshal directly .
3305	newPolicyRequirementFromJSON parses JSON data into a PolicyRequirement implementation .
3306	newPRSignedBy returns a new prSignedBy if parameters are valid .
3307	newPRSignedByKeyPath is NewPRSignedByKeyPath except it returns the private type .
3308	NewPRSignedByKeyPath returns a new signedBy PolicyRequirement using a KeyPath
3309	newPRSignedByKeyData is NewPRSignedByKeyData except it returns the private type .
3310	NewPRSignedByKeyData returns a new signedBy PolicyRequirement using a KeyData
3311	IsValid returns true iff kt is a recognized value
3312	newPRSignedBaseLayer is NewPRSignedBaseLayer except it returns the private type .
3313	newPolicyReferenceMatchFromJSON parses JSON data into a PolicyReferenceMatch implementation .
3314	newPRMExactReference is NewPRMExactReference except it resturns the private type .
3315	newPRMExactRepository is NewPRMExactRepository except it resturns the private type .
3316	newImageSource sets up an image for reading .
3317	getBlobAndLayer reads the data blob or filesystem layer which matches the digest and size if given .
3318	computeID computes a recommended image ID based on information we have so far . If the manifest is not of a type that we recognize we return an empty value indicating that since we don t have a recommendation a random ID should be used if one needs to be allocated .
3319	PutManifest writes the manifest to the destination .
3320	PutSignatures records the image s signatures for committing as a single data blob .
3321	newImage creates an image that also knows its size
3322	newImageSource returns an ImageSource for reading from an existing directory . newImageSource untars the file and saves it in a temp directory
3323	LoadManifestDescriptor loads the manifest
3324	Close removes resources associated with an initialized ImageSource if any . Close deletes the temporary directory at dst
3325	append adds s to the end of os only if it is not included already .
3326	isMultiImage returns true if img is a list of images
3327	lockPath obtains the pathLock for path . The caller must call unlockPath eventually .
3328	unlockPath releases the pathLock for path .
3329	view returns runs the specified fn within a read - only transaction on the database .
3330	update returns runs the specified fn within a read - write transaction on the database .
3331	uncompressedDigest implements BlobInfoCache . UncompressedDigest within the provided read - only transaction .
3332	appendReplacementCandiates creates prioritize . CandidateWithTime values for digest in scopeBucket and returns the result of appending them to candidates .
3333	indexExists checks whether the index location specified in the OCI reference exists . The implementation is opinionated since in case of unexpected errors false is returned
3334	createSignature creates a new signature of manifest using keyIdentity .
3335	ParseReference converts a string which should not start with the ImageTransport . Name prefix into an OCI ImageReference .
3336	NewReference returns an OCI reference for a directory and a image . We do not expose an API supplying the resolvedDir ; we could but recomputing it is generally cheap enough that we prefer being confident about the properties of resolvedDir .
3337	getIndex returns a pointer to the index references by this ociReference . If an error occurs opening an index nil is returned together with an error .
3338	LoadManifestDescriptor loads the manifest descriptor to be used to retrieve the image name when pulling an image
3339	blobPath returns a path for a blob within a directory using OCI image - layout conventions .
3340	SignDockerManifest returns a signature for manifest as the specified dockerReference using mech and keyIdentity .
3341	VerifyDockerManifestSignature checks that unverifiedSignature uses expectedKeyIdentity to sign unverifiedManifest as expectedDockerReference using mech .
3342	newOpenshiftClient creates a new openshiftClient for the specified reference .
3343	doRequest performs a correctly authenticated request to a specified path and returns response body or an error object .
3344	getImage loads the specified image object .
3345	convertDockerImageReference takes an image API DockerImageReference value and returns a reference we can actually use ; currently OpenShift stores the cluster - internal service IPs here which are unusable from the outside .
3346	ensureImageIsResolved sets up s . docker and s . imageStreamImageName
3347	newImageDestination creates a new ImageDestination for the specified reference .
3348	newUntrustedSignature returns an untrustedSignature object with the specified primary contents and appropriate metadata .
3349	MarshalJSON implements the json . Marshaler interface .
3350	UnmarshalJSON implements the json . Unmarshaler interface
3351	verifyAndExtractSignature verifies that unverifiedSignature has been signed and that its principial components match expected values both as specified by rules and returns it
3352	RewriteReference will substitute the provided reference prefix to the endpoints location from the ref and creates a new named reference from it . The function errors if the newly created reference is not parsable .
3353	getV1Registries transforms v1 registries in the config into an array of v2 registries of type Registry .
3354	getConfigPath returns the system - registries config path if specified . Otherwise systemRegistriesConfPath is returned .
3355	GetRegistries loads and returns the registries specified in the config . Note the parsed content of registry config files is cached . For reloading use InvalidateCache and re - call GetRegistries .
3356	Reads the global registry file from the filesystem . Returns a byte array .
3357	Manifest overrides the UnparsedImage . Manifest to always use the fields which we have already fetched .
3358	ConfigUpdate updates the image s default configuration and adds annotations which will be visible in source images created using this reference .
3359	parseImageAndDockerReference converts an image and a reference string into two parsed entities failing on any error and handling unidentified images .
3360	parseDockerReferences converts two reference strings into parsed entities failing on any error
3361	ListNames returns a list of non deprecated transport names . Deprecated transports can be used but are not presented to users .
3362	NewReference returns an OSTree reference for a specified repo and image .
3363	signaturePath returns a path for a signature within a ostree using our conventions .
3364	ValidateImageName returns nil if the image name is empty or matches the open - containers image name specs . In any other case an error is returned .
3365	SplitPathAndImage tries to split the provided OCI reference into the OCI path and image . Neither path nor image parts are validated at this stage .
3366	ValidateOCIPath takes the OCI path and validates it .
3367	ValidateScope validates a policy configuration scope for an OCI transport .
3368	BlobInfoFromSchema2Descriptor returns a types . BlobInfo based on the input schema 2 descriptor .
3369	Schema2FromManifest creates a Schema2 manifest instance from a manifest blob .
3370	Schema2FromComponents creates an Schema2 manifest instance from the supplied data .
3371	SetAuthentication stores the username and password in the auth . json file
3372	RemoveAuthentication deletes the credentials stored in auth . json
3373	RemoveAllAuthentication deletes all the credentials stored in auth . json
3374	readJSONFile unmarshals the authentications stored in the auth . json file and returns it or returns an empty dockerConfigFile data structure if auth . json does not exist if the file exists and is empty readJSONFile returns an error
3375	modifyJSON writes to auth . json if the dockerConfigFile has been updated
3376	findAuthentication looks for auth of registry in path
3377	NewDestination returns a tarfile . Destination for the specified io . Writer .
3378	AddRepoTags adds the specified tags to the destination s repoTags .
3379	writeLegacyLayerMetadata writes legacy VERSION and configuration files for all layers
3380	sendSymlink sends a symlink into the tar stream .
3381	sendBytes sends a path into the tar stream .
3382	sendFile sends a file into the tar stream .
3383	Commit finishes writing data to the underlying io . Writer . It is the caller s responsibility to close it if necessary .
3384	imageMatchesRepo returns true iff image . Names contains an element with the same repo as ref
3385	Resolve the reference s name to an image ID in the store if there s already one present with the same name or ID and return the image .
3386	Return a Transport object that defaults to using the same store that we used to build this reference object .
3387	Return a name with a tag prefixed with the graph root and driver name to disambiguate between images which may be present in multiple stores and share only their names .
3388	Also accept policy that s tied to the combination of the graph root and driver name to apply to all images stored in the Store and to just the graph root in case we re using multiple drivers in the same directory for some reason .
3389	GzipDecompressor is a DecompressorFunc for the gzip compression algorithm .
3390	Bzip2Decompressor is a DecompressorFunc for the bzip2 compression algorithm .
3391	XzDecompressor is a DecompressorFunc for the xz compression algorithm .
3392	DetectCompression returns a DecompressorFunc if the input is recognized as a compressed format nil otherwise . Because it consumes the start of input other consumers must use the returned io . Reader instead to also read from the beginning .
3393	newImageDestination creates a new ImageDestination for the specified image reference .
3394	mountBlob tries to mount blob srcDigest from srcRepo to the current destination .
3395	bicTransportScope returns a BICTransportScope appropriate for ref .
3396	newBICLocationReference returns a BICLocationReference appropriate for ref .
3397	parseBICLocationReference returns a repository for encoded lr .
3398	NewSourceFromStream returns a tarfile . Source for the specified inputStream which can be either compressed or uncompressed . The caller can close the inputStream immediately after NewSourceFromFile returns .
3399	readTarComponent returns full contents of componentPath .
3400	ensureCachedDataIsPresent loads data necessary for any of the public accessors .
3401	loadTarManifest loads and decodes the manifest . json .
3402	Close removes resources associated with an initialized Source if any .
3403	newImageDestination returns a types . ImageDestination for the specified image reference .
3404	imageLoadGoroutine accepts tar stream on reader sends it to c and reports error or success by writing to statusChannel
3405	NewReference returns an OCI reference for a file and a image .
3406	createOCIRef creates the oci reference of the image
3407	creates the temporary directory and copies the tarred content to it
3408	destructivelyPrioritizeReplacementCandidatesWithMax is destructivelyPrioritizeReplacementCandidates with a parameter for the number of entries to limit only to make testing simpler .
3409	newImageDestination returns an ImageDestination for writing to an existing ostree .
3410	resolveExistingPathToFullyExplicit is the same as ResolvePathToFullyExplicit but without the special case for missing final component .
3411	newImageDestination returns an ImageDestination for writing to a directory .
3412	returns true if directory is empty
3413	deletes the contents of a directory
3414	GetRepositoryTags list all tags available in the repository . The tag provided inside the ImageReference will be ignored .
3415	DefaultCache returns the default BlobInfoCache implementation appropriate for sys .
3416	uncompressedDigestLocked implements types . BlobInfoCache . UncompressedDigest but must be called only with mem . mutex held .
3417	Close removes resources associated with an initialized ImageDestination if any Close deletes the temp directory of the oci - archive image
3418	PutManifest writes manifest to the destination
3419	Commit marks the process of storing the image as successful and asks for the image to be persisted after the directory is made it is tarred up into a file and the directory is deleted
3420	tar converts the directory at src and saves it to dst
3421	ParseStoreReference takes a name or an ID tries to figure out which it is relative to the given store and returns it in a reference object .
3422	chooseDigestFromManifestList parses blob as a schema2 manifest list and returns the digest of the image appropriate for the current environment .
3423	ChooseManifestInstanceFromManifestList returns a digest of a manifest appropriate for the current system from the manifest available from src .
3424	manifestSchema1FromComponents builds a new manifestSchema1 from the supplied data .
3425	manifestDigest returns a digest of the manifest from instanceDigest if non - nil ; or from the supplied reference or finally from a fetched manifest .
3426	deleteImage deletes the named image from the registry if supported .
3427	Schema1FromComponents creates an Schema1 manifest instance from the supplied data .
3428	initialize initializes ExtractedV1Compatibility and verifies invariants so that the rest of this code can assume a minimally healthy manifest .
3429	ToSchema2Config builds a schema2 - style configuration blob using the supplied diffIDs .
3430	Digest returns the a digest of a docker manifest with any necessary implied transformations like stripping v1s1 signatures .
3431	MatchesDigest returns true iff the manifest matches expectedDigest . Error may be set if this returns false . Note that this is not doing ConstantTimeCompare ; by the time we get here the cryptographic signature must already have been verified or we are not using a cryptographic channel and the attacker can modify the digest along with the manifest blob .
3432	NormalizedMIMEType returns the effective MIME type of a manifest MIME type returned by a server centralizing various workarounds .
3433	FromBlob returns a Manifest instance for the specified manifest blob and the corresponding MIME type
3434	There is no directory . ParseReference because it is rather pointless . Callers who need a transport - independent interface will go through dirTransport . ParseReference ; callers who intentionally deal with directories can use directory . NewReference . NewReference returns a directory reference for a specified path . We do not expose an API supplying the resolvedPath ; we could but recomputing it is generally cheap enough that we prefer being confident about the properties of resolvedPath .
3435	layerPath returns a path for a layer tarball within a directory using our conventions .
3436	signaturePath returns a path for a signature within a directory using our conventions .
3437	New creates a new Pool of workers that starts with n workers . You must provide a constructor function that creates new Worker types and when you change the size of the pool the constructor will be called to create each new Worker .
3438	NewFunc creates a new Pool of workers where each worker will process using the provided func .
3439	ProcessTimed will use the Pool to process a payload and synchronously return the result . If the timeout occurs before the job has finished the worker will be interrupted and ErrJobTimedOut will be returned . ProcessTimed can be called safely by any goroutines .
3440	SetSize changes the total number of workers in the Pool . This can be called by any goroutine at any time unless the Pool has been stopped in which case a panic will occur .
3441	GetSize returns the current size of the pool .
3442	Returns the Top - Left Point of the rectangle
3443	Returns the Bottom - Right Point of the rectangle
3444	Returns a CvBox2D
3445	Finds box vertices
3446	Prototype for CV_FOURCC so that swig can generate wrapper without mixing up the define
3447	Merge creates one multichannel array out of several single - channel ones .
3448	Split divides a multi - channel array into several single - channel arrays .
3449	AddWeighted calculates the weighted sum of two images .
3450	Calculates the per - element bit - wise conjunction of two arrays .
3451	Calculates the per - element bit - wise conjunction of two arrays with a mask .
3452	Calculates the per - element bit - wise conjunction of an array and a scalar .
3453	Calculates the per - element bit - wise conjunction of an array and a scalar with a mask .
3454	Calculates the per - element bit - wise disjunction of two arrays .
3455	Calculates the per - element bit - wise disjunction of two arrays with a mask .
3456	Calculates the per - element bit - wise disjunction of an array and a scalar .
3457	Calculates the per - element bit - wise disjunction of an array and a scalar with a mask .
3458	Calculates the per - element sum of two arrays with a mask . dst = src1 + src2
3459	Calculates the per - element sum of an array and a scalar . dst = src + value
3460	Calculates the per - element sum of an array and a scalar with a mask . dst = src + value
3461	Calculates the per - element difference between two arrays . dst = src1 - src2
3462	Calculates the per - element difference between two arrays with a mask . dst = src1 - src2
3463	Calculates the per - element difference between an array and a scalar . dst = src - value
3464	Calculates the per - element difference between an array and a scalar with a mask . dst = src - value
3465	Calculates the per - element difference between a scalar and an array . dst = value - src
3466	Calculates the per - element difference between a scalar and an array with a mask . dst = value - src
3467	Calculates the per - element absolute difference between two arrays .
3468	Calculates the per - element absolute difference between an array and a scalar .
3469	MeanStdDevWithMask calculates mean and standard deviation of pixel values with mask
3470	Creates a new sequence .
3471	Adds an element to the sequence end . Returns a pointer to the element added .
3472	Removes element from the sequence end . Copies the element into the paramter element .
3473	Adds an element to the sequence beginning . Returns a pointer to the element added .
3474	Removes element from the sequence beginning . Copies the element into the paramter element .
3475	Gets a pointer to the element at the index
3476	Removes an element from the middle of a sequence .
3477	Delay set delay between retry default is 100ms
3478	BackOffDelay is a DelayType which increases delay between consecutive retries
3479	Error method return string representation of Error It is an implementation of error interface
3480	Arguments adds the arguments to the args .
3481	BodyString sets the request body to the given string .
3482	BodyBytes sets the request body to the given buffer .
3483	Body sets the request body to the given reader .
3484	Option sets the given option .
3485	Header sets the given header .
3486	Send sends the request and return the response .
3487	Exec sends the request a request and decodes the response .
3488	Next waits for the next record and returns that .
3489	Cancel cancels the given subscription .
3490	FileList entries at the given path using the UnixFS commands
3491	Cat the content at the given path . Callers need to drain and close the returned reader after usage .
3492	List entries at the given path
3493	Pin the given path
3494	Pins returns a map of the pin hashes to their info ( currently just the pin type one of DirectPin RecursivePin or IndirectPin . A map is returned instead of a slice because it is easier to do existence lookup by map key than unordered array searching . The map is likely to be more useful to a client than a flat list .
3495	returns ipfs version and commit sha
3496	SwarmPeers gets all the swarm peers
3497	SwarmConnect opens a swarm connection to a specific address .
3498	DagPutOptions applies the given options to a DagPutSettings instance .
3499	Pin is an option for Dag . Put which specifies whether to pin the added dags . Default is false .
3500	Kind is an option for Dag . Put which specifies the format that the dag will be added as . Default is cbor .
3501	Hash is an option for Dag . Put which specifies the hash function to use
3502	AddDir adds a directory recursively with all of the files under it
3503	Publish updates a mutable name to point to a given value
3504	PublishWithDetails is used for fine grained control over record publishing
3505	ResolveValue resolves a PlanValue as a single value based on the supplied bindvars .
3506	GenerateQuery generates a query by substituting the specified bindVariables . The extras parameter specifies special parameters that can perform custom encoding .
3507	EncodeValue encodes one bind variable value into the query .
3508	Lex returns the next token form the Tokenizer . This function is used by go yacc .
3509	skipStatement scans until the EOF or end of statement is encountered .
3510	reset clears any internal state .
3511	Preview analyzes the beginning of the query using a simpler and faster textual comparison to identify the statement type .
3512	NewPlanValue builds a sqltypes . PlanValue from an Expr .
3513	StringIn is a convenience function that returns true if str matches any of the values .
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena creates an arena of the specified size .
3516	NewString copies a byte slice into the arena and returns it as a string . If the arena is full it returns a traditional go string .
3517	SpaceLeft returns the amount of space left in the arena .
3518	ParseStrictDDL is the same as Parse except it errors on partially parsed DDL statements .
3519	ParseNext parses a single SQL statement from the tokenizer returning a Statement which is the AST representation of the query . The tokenizer will always read up to the end of the statement allowing for the next call to ParseNext to parse any subsequent SQL statements . When there are no more statements to parse a error of io . EOF is returned .
3520	Append appends the SQLNode to the buffer .
3521	ExprFromValue converts the given Value into an Expr or returns an error .
3522	Backtick produces a backticked literal given an input string .
3523	NewValue builds a Value using typ and val . If the value and typ don t match it returns an error .
3524	String returns a printable version of the value .
3525	EncodeSQL encodes the value into an SQL statement . Can be binary .
3526	EncodeSQL performs the SQL encoding for InsertValues .
3527	EncodeSQL generates the where clause constraints for the tuple equality .
3528	WalkStatement is the top level walk function . If it encounters a Select it switches to a mode where variables are deduped .
3529	WalkSelect normalizes the AST in Select mode .
3530	BindVariablesEqual compares two maps of bind variables .
3531	New constructs a new Secure instance with supplied options .
3532	Special implementation for Negroni but could be used elsewhere .
3533	FromAuthHeader is a TokenExtractor that takes a give request and extracts the JWT token from the Authorization header .
3534	FromParameter returns a function that extracts the token from the specified query string parameter
3535	FromFirst returns a function that runs multiple token extractors and takes the first token it finds
3536	get the initial RPC containing all of our subscriptions to send to new peers
3537	NewFloodsubWithProtocols returns a new floodsub - enabled PubSub objecting using the protocols specified in ps .
3538	NewFloodSub returns a new PubSub object using the FloodSubRouter .
3539	NewLRUBlacklist creates a new LRUBlacklist with capacity cap
3540	NewRandomSub returns a new PubSub object using RandomSubRouter as the router .
3541	NewGossipSub returns a new PubSub object using GossipSubRouter as the router .
3542	NewPubSub returns a new PubSub management object .
3543	WithValidateThrottle sets the upper bound on the number of active validation goroutines .
3544	WithBlacklist provides an implementation of the blacklist ; the default is a MapBlacklist
3545	handleRemoveSubscription removes Subscription sub from bookeeping . If this was the last Subscription for a given topic it will also announce that this node is not subscribing to this topic anymore . Only called from processLoop .
3546	handleAddSubscription adds a Subscription for a particular topic . If it is the first Subscription for the topic it will announce that this node subscribes to the topic . Only called from processLoop .
3547	announce announces whether or not this node is interested in a given topic Only called from processLoop .
3548	notifySubs sends a given message to all corresponding subscribers . Only called from processLoop .
3549	seenMessage returns whether we already saw this message before
3550	subscribedToMessage returns whether we are subscribed to one of the topics of a given message
3551	msgID returns a unique ID of the passed Message
3552	pushMsg pushes a message performing validation as necessary
3553	validate performs validation and only sends the message if all validators succeed
3554	fast path for single topic validation that avoids the extra goroutine
3555	getValidators returns all validators that apply to a given message
3556	Subscribe returns a new Subscription for the given topic . Note that subscription is not an instanteneous operation . It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers .
3557	SubscribeByTopicDescriptor lets you subscribe a topic using a pb . TopicDescriptor .
3558	GetTopics returns the topics this node is subscribed to .
3559	Publish publishes data to the given topic .
3560	ListPeers returns a list of peers we are connected to in the given topic .
3561	WithValidatorTimeout is an option that sets the topic validator timeout .
3562	WithValidatorConcurrency is an option that sets topic validator throttle .
3563	RegisterTopicValidator registers a validator for topic .
3564	UnregisterTopicValidator removes a validator from a topic . Returns an error if there was no validator registered with the topic .
3565	DefaultMetricPrefix is the default mapping for metrics to statsd keys . It uses a tchannel prefix for all stats .
3566	MetricWithPrefix is the default mapping for metrics to statsd keys .
3567	NewClient returns a json . Client used to make outbound JSON calls .
3568	Call makes a JSON call with retries .
3569	CallPeer makes a JSON call using the given peer .
3570	CallSC makes a JSON call using the given subchannel .
3571	ReadResponse reads a http . Response from the given readers .
3572	writeHeaders writes out the HTTP headers as arg2 and creates the arg3 writer .
3573	ResponseWriter returns a http . ResponseWriter that will write to an underlying writer . It also returns a function that should be called once the handler has completed .
3574	ReadHeaders reads key - value pairs encoded using WriteHeaders .
3575	NewTCPRawRelay creates a relay that just pipes data from one connection to another directly .
3576	NewClient creates a new Hyperbahn client using the given channel . config is the environment - specific configuration for Hyperbahn such as the list of initial nodes . opts are optional and are used to customize the client .
3577	Advertise advertises the service with Hyperbahn and returns any errors on initial advertisement . Advertise can register multiple services hosted on the same endpoint . If the advertisement succeeds a goroutine is started to re - advertise periodically .
3578	Handle deserializes the JSON arguments and calls the underlying handler .
3579	Start starts the test server called by the Client and other upstream servers .
3580	Port returns the actual port the server listens to
3581	SetStrategy sets customized peer selection strategy .
3582	Add adds a peer to the list if it does not exist or returns any existing peer .
3583	GetNew returns a new previously unselected peer from the peer list or nil if no new unselected peer can be found .
3584	Get returns a peer from the peer list or nil if none can be found will avoid previously selected peers if possible .
3585	Remove removes a peer from the peer list . It returns an error if the peer cannot be found . Remove does not affect connections to the peer in any way .
3586	Copy returns a copy of the PeerList as a map from hostPort to peer .
3587	Len returns the length of the PeerList .
3588	exists checks if a hostport exists in the peer list .
3589	getPeerScore is called to find the peer and its score from a host port key . Note that at least a Read lock must be held to call this function .
3590	onPeerChange is called when there is a change that may cause the peer s score to change . The new score is calculated and the peer heap is updated with the new score if the score changes .
3591	updatePeer is called to update the score of the peer given the existing score . Note that a Write lock must be held to call this function .
3592	getConn treats inbound and outbound connections as a single virtual list that can be indexed . The peer must be read - locked .
3593	GetConnection returns an active connection to this peer . If no active connections are found it will create a new outbound connection and return it .
3594	getConnectionRelay gets a connection and uses the given timeout to lazily create a context if a new connection is required .
3595	canRemove returns whether this peer can be safely removed from the root peer list .
3596	addConnection adds an active connection to the peer s connection list . If a connection is not active returns ErrInvalidConnectionState .
3597	removeConnection will check remove the connection if it exists on connsPtr and returns whether it removed the connection .
3598	connectionStateChanged is called when one of the peers connections states changes . All non - active connections are removed from the peer . The connection will still be tracked by the channel until it s completely closed .
3599	Connect adds a new outbound connection to the peer .
3600	BeginCall starts a new call to this specific peer returning an OutboundCall that can be used to write the arguments of the call .
3601	NumConnections returns the number of inbound and outbound connections for this peer .
3602	NumPendingOutbound returns the number of pending outbound calls .
3603	isEphemeralHostPort returns if hostPort is the default ephemeral hostPort .
3604	Get returns the value stored for the given key .
3605	Set sets the value for a given key .
3606	ClearAll clears all the keys .
3607	NewChannel creates a new Channel . The new channel can be used to send outbound requests to peers but will not listen or handling incoming requests until one of ListenAndServe or Serve is called . The local service name should be passed to serviceName .
3608	Serve serves incoming requests using the provided listener . The local peer info is set synchronously but the actual socket listening is done in a separate goroutine .
3609	ListenAndServe listens on the given address and serves incoming requests . The port may be 0 in which case the channel will use an OS assigned port This method does not block as the handling of connections is done in a goroutine .
3610	Register registers a handler for a method . The handler is registered with the service name used when the Channel was created . To register a handler with a different service name obtain a SubChannel for that service with GetSubChannel and Register a handler under that . You may also use SetHandler on a SubChannel to set up a catch - all Handler for that service . See the docs for SetHandler for more information . Register panics if the channel was constructed with an alternate root handler .
3611	PeerInfo returns the current peer info for the channel
3612	GetSubChannel returns a SubChannel for the given service name . If the subchannel does not exist it is created .
3613	serve runs the listener to accept and manage new incoming connections blocking until the channel is closed .
3614	Ping sends a ping message to the given hostPort and waits for a response .
3615	StatsTags returns the common tags that should be used when reporting stats . It returns a new map for each call .
3616	Connect creates a new outbound connection to hostPort .
3617	exchangeUpdated updates the peer heap .
3618	updatePeer updates the score of the peer and update it s position in heap as well .
3619	addConnection adds the connection to the channel s list of connection if the channel is in a valid state to accept this connection . It returns whether the connection was added .
3620	removeClosedConn removes a connection if it s closed . Until a connection is fully closed the channel must keep track of it .
3621	connectionCloseStateChange is called when a connection s close state changes .
3622	State returns the current channel state .
3623	NewReader returns a reader that reads typed values from the reader .
3624	ReadUint16 reads a uint16 .
3625	ReadString reads a string of length n .
3626	ReadLen16String reads a uint16 - length prefixed string .
3627	Register function adds JSON and Thrift handlers to the server channel ch
3628	Run executes the trace behavior
3629	Get returns a relay timer that has not started . Timers must be started explicitly using the Start function .
3630	Put returns a relayTimer back to the pool .
3631	Start starts a timer with the given duration for the specified ID .
3632	Release releases a timer back to the timer pool . The timer MUST have run or be stopped before Release is called .
3633	NewLogger returns a Logger that writes to the given writer .
3634	NewTCPFrameRelay relays frames from one connection to another . It reads and writes frames using the TChannel frame functions .
3635	Create a sub - scope for this set of known tags .
3636	Isolated is a SubChannelOption that creates an isolated subchannel .
3637	Isolated returns whether this subchannel is an isolated subchannel .
3638	Register registers a handler on the subchannel for the given method . This function panics if the Handler for the SubChannel was overwritten with SetHandler .
3639	GetHandlers returns all handlers registered on this subchannel by method name . This function panics if the Handler for the SubChannel was overwritten with SetHandler .
3640	StatsTags returns the stats tags for this subchannel .
3641	Register a new subchannel for the given serviceName
3642	Get subchannel if we have one
3643	GetOrAdd a subchannel for the given serviceName on the map
3644	Discover queries Hyperbahn for a list of peers that are currently advertised with the specified service name .
3645	Start begins a Crossdock client in the background .
3646	Listen initializes the server
3647	WriteRequest writes a http . Request to the given writers .
3648	ReadRequest reads a http . Request from the given readers .
3649	NewReadBufferWithSize returns a ReadBuffer with a given capacity
3650	ReadByte returns the next byte from the buffer .
3651	ReadBytes returns the next n bytes from the buffer
3652	ReadString returns a string of size n from the buffer
3653	ReadUint16 returns the next value in the buffer as a uint16
3654	ReadUint32 returns the next value in the buffer as a uint32
3655	ReadUint64 returns the next value in the buffer as a uint64
3656	ReadUvarint reads an unsigned varint from the buffer .
3657	ReadLen8String reads an 8 - bit length preceded string value
3658	ReadLen16String reads a 16 - bit length preceded string value
3659	FillFrom fills the buffer from a reader
3660	Wrap initializes the buffer to read from the given byte slice
3661	WriteSingleByte writes a single byte to the buffer
3662	WriteBytes writes a slice of bytes to the buffer
3663	WriteUint16 writes a big endian encoded uint16 value to the buffer
3664	WriteUint32 writes a big endian uint32 value to the buffer
3665	WriteUint64 writes a big endian uint64 to the buffer
3666	WriteUvarint writes an unsigned varint to the buffer
3667	WriteString writes a string to the buffer
3668	WriteLen8String writes an 8 - bit length preceded string
3669	WriteLen16String writes a 16 - bit length preceded string
3670	DeferByte reserves space in the buffer for a single byte and returns a reference that can be used to update that byte later
3671	DeferBytes reserves space in the buffer for a fixed sequence of bytes and returns a reference that can be used to update those bytes
3672	FlushTo flushes the written buffer to the given writer
3673	Reset resets the buffer to an empty state ready for writing
3674	Wrap initializes the buffer to wrap the given byte slice
3675	Update updates the uint16 in the buffer
3676	Update updates the uint32 in the buffer
3677	Update updates the uint64 in the buffer
3678	Update updates the bytes in the buffer
3679	UpdateString updates the bytes in the buffer from a string
3680	The ArgReader will handle fragmentation as needed . Once the argument has been read the ArgReader must be closed .
3681	finish finishes the fragment updating the final checksum and fragment flags
3682	newWritableChunk creates a new writable chunk around a checksum and a buffer to hold data
3683	writeAsFits writes as many bytes from the given slice as fits into the chunk
3684	newFragmentingWriter creates a new fragmenting writer
3685	ArgWriter returns an ArgWriter to write an argument . The ArgWriter will handle fragmentation as needed . Once the argument is written the ArgWriter must be closed .
3686	BeginArgument tells the writer that the caller is starting a new argument . Must not be called while an existing argument is in place
3687	Write writes argument data breaking it into fragments as needed
3688	Flush flushes the current fragment and starts a new fragment and chunk .
3689	Close ends the current argument .
3690	handleCallRes handles an incoming call req message forwarding the frame to the response channel waiting for it
3691	Arg2Reader returns an ArgReader to read the second argument . The ReadCloser must be closed once the argument has been read .
3692	handleError handles an error coming back from the peer . If the error is a protocol level error the entire connection will be closed . If the error is a request specific error it will be written to the request s response channel and converted into a SystemError returned from the next reader or access call . The return value is whether the frame should be released immediately .
3693	doneReading shuts down the message exchange for this call . For outgoing calls the last message is reading the call response .
3694	newFragment creates a new fragment for marshaling into
3695	flushFragment sends a fragment to the peer over the connection
3696	failed marks the writer as having failed
3697	arg1Reader returns an ArgReader to read arg1 .
3698	arg2Reader returns an ArgReader to read arg2 .
3699	arg3Reader returns an ArgReader to read arg3 .
3700	argReader returns an ArgReader that can be used to read an argument . The ReadCloser must be closed once the argument has been read .
3701	recvNextFragment receives the next fragment from the underlying message exchange .
3702	releasePreviousFrament releases the last fragment returned by the reader if it s still around . This operation is idempotent .
3703	failed indicates the reader failed
3704	parseInboundFragment parses an incoming fragment based on the given message
3705	NewContext returns a Context that can be used to make Thrift calls .
3706	WithHeaders returns a Context that can be used to make a call with request headers .
3707	healthCheck will do periodic pings on the connection to check the state of the connection . We accept connID on the stack so can more easily debug panics or leaked goroutines .
3708	SetTimeout sets the timeout for the Context .
3709	AddHeader adds a single application header to the Context .
3710	SetHeaders sets the application headers for this Context . If there is a ParentContext its headers will be ignored after the call to this method .
3711	SetConnectTimeout sets the ConnectionTimeout for this context . The context timeout applies to the whole call while the connect timeout only applies to creating a new connection .
3712	SetRetryOptions sets RetryOptions in the context .
3713	SetTimeoutPerAttempt sets TimeoutPerAttempt in RetryOptions .
3714	SetParentContext sets the parent for the Context .
3715	Build returns a ContextWithHeaders that can be used to make calls .
3716	overrideHeaders sets headers if the call options contains non - default values .
3717	Read reads from the reader into the byte slice .
3718	ReadJSON deserializes JSON from the underlying reader into data .
3719	NewArgWriter wraps the result of calling ArgXWriter to provider a simpler interface for writing arguments .
3720	Write writes the given bytes to the underlying writer .
3721	WriteJSON writes the given object as JSON .
3722	Register registers pprof endpoints on the given registrar under _pprof . The _pprof endpoint uses as - http and is a tunnel to the default serve mux .
3723	Count returns the number of non - tombstone items in the relay .
3724	Get checks for a relay item by ID returning the item and a bool indicating whether the item was found .
3725	Add adds a relay item .
3726	Entomb sets the tomb bit on a relayItem and schedules a garbage collection . It returns the entombed item along with a bool indicating whether we completed a relayed call .
3727	NewRelayer constructs a Relayer .
3728	Relay is called for each frame that is read on the connection .
3729	Receive receives frames intended for this connection . It returns whether the frame was sent and a reason for failure if it failed .
3730	Handle all frames except messageTypeCallReq .
3731	addRelayItem adds a relay item to either outbound or inbound .
3732	failRelayItem tombs the relay item so that future frames for this call are not forwarded . We keep the relay item tombed rather than delete it to ensure that future frames do not cause error logs .
3733	WriteStruct writes the given Thrift struct to a writer . It pools TProtocols .
3734	ReadStruct reads the given Thrift struct . It pools TProtocols .
3735	EnsureEmpty ensures that the specified reader is empty . If the reader is not empty it returns an error with the specified stage in the message .
3736	NewServer returns a new Server that can recieve Thrift calls or raw calls .
3737	Advertise advertises with Hyperbahn .
3738	handleCallReqContinue handles the continuation of a call request forwarding it to the request channel for that request where it can be pulled during defragmentation
3739	dispatchInbound ispatches an inbound call to the appropriate handler
3740	CallOptions returns a CallOptions struct suitable for forwarding a request .
3741	Response provides access to the InboundCallResponse object which can be used to write back to the calling peer
3742	SendSystemError returns a system error response to the peer . The call is considered complete after this method is called and no further data can be written .
3743	SetApplicationError marks the response as being an application error . This method can only be called before any arguments have been sent to the calling peer .
3744	Arg2Writer returns a WriteCloser that can be used to write the second argument . The returned writer must be closed once the write is complete .
3745	doneSending shuts down the message exchange for this call . For incoming calls the last message is sending the call response .
3746	newState parses the type information for a parsed Thrift file and returns the state .
3747	rootType recurses through typedefs and returns the underlying type .
3748	checkInclude will check if the type is an included type and if so return the state and type from the state for that file .
3749	isResultPointer returns whether the result for this method is a pointer .
3750	goType returns the Go type name for the given thrift type .
3751	goTypePrefix returns the Go type name for the given thrift type with the prefix .
3752	NewContext returns a new root context used to make TChannel requests .
3753	newIncomingContext creates a new context for an incoming call with the given span .
3754	CurrentCall returns the current incoming call or nil if this is not an incoming call context .
3755	New returns a rand . Rand that is threadsafe .
3756	Health returns true as default Health endpoint .
3757	Headers gets application headers out of the context .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets the response headers .
3760	Child creates a child context with a separate container for headers .
3761	Wrap wraps an existing context . Context into a ContextWithHeaders . If the underlying context has headers they are preserved .
3762	WrapWithHeaders returns a Context that can be used to make a call with request headers . If the parent ctx is already an instance of ContextWithHeaders its existing headers will be ignored . In order to merge new headers with parent headers use ContextBuilder .
3763	WithoutHeaders hides any TChannel headers from the given context .
3764	Notify will store the error and notify all waiters on c that there s an error .
3765	forwardPeerFrame forwards a frame from a peer to the message exchange where it can be pulled by whatever application thread is handling the exchange
3766	recvPeerFrame waits for a new frame from the peer or until the context expires or is cancelled
3767	recvPeerFrameOfType waits for a new frame of a given type from the peer failing if the next frame received is not of that type . If an error frame is returned then the errorMessage is returned as the error .
3768	shutdown shuts down the message exchange removing it from the message exchange set so that it cannot receive more messages from the peer . The receive channel remains open however in case there are concurrent goroutines sending to it .
3769	newMessageExchangeSet creates a new messageExchangeSet with a given name .
3770	addExchange adds an exchange it must be called with the mexset locked .
3771	newExchange creates and adds a new message exchange to this set
3772	deleteExchange will delete msgID and return whether it was found or whether it was timed out . This method must be called with the lock .
3773	removeExchange removes a message exchange from the set if it exists .
3774	expireExchange is similar to removeExchange but it marks the exchange as expired .
3775	forwardPeerFrame forwards a frame from the peer to the appropriate message exchange
3776	copyExchanges returns a copy of the exchanges if the exchange is active . The caller must lock the mexset .
3777	stopExchanges stops all message exchanges to unblock all waiters on the mex . This should only be called on connection failures .
3778	NewFrame allocates a new frame with the given payload capacity
3779	ReadBody takes in a previously read frame header and only reads in the body based on the size specified in the header . This allows callers to defer the frame allocation till the body needs to be read .
3780	WriteOut writes the frame to the given io . Writer
3781	CanRetry returns whether an error can be retried for the given retry option .
3782	HasRetries will return true if there are more retries left .
3783	SinceStart returns the time since the start of the request . If there is no request state then the fallback is returned .
3784	AddSelectedPeer adds a given peer to the set of selected peers .
3785	RunWithRetry will take a function that makes the TChannel call and will rerun it as specifed in the RetryOptions in the Context .
3786	ChecksumSize returns the size in bytes of the checksum calculation
3787	New creates a new Checksum of the given type
3788	parseTemplates returns a list of Templates that must be rendered given the template files .
3789	NewStringSliceFlag creates a new string slice flag . The default value is always nil .
3790	withStateFuncs adds functions to the template that are dependent upon state .
3791	IntrospectOthers returns the ChannelInfo for all other channels in this process .
3792	ReportInfo returns ChannelInfo for a channel .
3793	IntrospectState returns the runtime state of the
3794	IntrospectState returns the runtime state of the subchannels .
3795	IntrospectState returns the runtime state for this peer .
3796	IntrospectState returns the runtime state for this connection .
3797	IntrospectState returns the runtime state for this relayer .
3798	IntrospectState returns the runtime state for this relayItems .
3799	IntrospectState returns the runtime state for this messsage exchange set .
3800	NewContext returns a Context that can be used to make JSON calls .
3801	WriteResponse writes the given Res to the InboundCallResponse .
3802	Wrap wraps a Handler as a tchannel . Handler that can be passed to tchannel . Register .
3803	initFromOpenTracing initializes injectableSpan fields from an OpenTracing Span assuming the tracing implementation supports Zipkin - style span IDs .
3804	startOutboundSpan creates a new tracing span to represent the outbound RPC call . If the context already contains a span it will be used as a parent otherwise a new root span is created . If the tracer supports Zipkin - style trace IDs then call . callReq . Tracing is initialized with those IDs . Otherwise it is assigned random values .
3805	intToIP4 converts an integer IP representation into a 4 - byte net . IP struct
3806	servicePeerToHostPort converts a Hyperbahn ServicePeer into a hostPort string .
3807	NewStatsdReporter returns a StatsReporter that reports to statsd on the given addr .
3808	UnmarshalText implements TextUnMarshaler from encoding
3809	Push implements heap Push interface
3810	Pop implements heap Pop interface
3811	updatePeer updates the score for the given peer .
3812	removePeer remove peer at specific index .
3813	pushPeer pushes the new peer into the heap .
3814	AddPeer adds a peer to the peer heap .
3815	NewClient returns a Client that makes calls over the given tchannel to the given Hyperbahn service .
3816	Add adds a peer to the root peer list if it does not exist or return an existing peer if it exists .
3817	Get returns a peer for the given hostPort if it exists .
3818	WithTimeout sets the timeout to use for each call .
3819	Methods returns the methods on this service not including methods from inherited services .
3820	InheritedMethods returns names for inherited methods on this service .
3821	Arguments returns the argument declarations for this method .
3822	ArgList returns the argument list for the function .
3823	CallList creates the call to a function satisfying Interface from an Args struct .
3824	RetType returns the go return type of the method .
3825	WrapResult wraps the result variable before being used in the result struct .
3826	ReturnWith takes the result name and the error name and generates the return expression .
3827	Declaration returns the declaration for this field .
3828	startIdleSweep starts a poller that checks for idle connections at given intervals .
3829	Start runs the goroutine responsible for checking idle connections .
3830	Stop kills the poller checking for idle connections .
3831	ResolveWithGoPath will resolve the filename relative to GOPATH and returns the first file that exists or an error otherwise .
3832	setExtends will set the ExtendsService for all services . It is done after all files are parsed as services may extend those found in an included file .
3833	Registers a handler
3834	NewClient returns a new Client that can make calls to a benchmark server .
3835	ListenIP returns the IP to bind to in Listen . It tries to find an IP that can be used by other machines to reach this machine .
3836	Close closes the listener . Any blocked Accept operations will be unblocked and return errors .
3837	ReadArgsV2 reads arg2 and arg3 from a reader .
3838	WriteArgs writes the given arguments to the call and returns the response args .
3839	Call makes a call to the given hostPort with the given arguments and returns the response args .
3840	CallSC makes a call using the given subcahnnel
3841	CallV2 makes a call and does not attempt any retries .
3842	NewRealRelay creates a TChannel relay .
3843	NewServer returns a server that can serve thrift services over TChannel .
3844	RegisterHealthHandler uses the user - specified function f for the Health endpoint .
3845	Handle handles an incoming TChannel call and forwards it to the correct handler .
3846	MetricsKey is a string representation of the error code that s suitable for inclusion in metrics tags .
3847	NewSystemError defines a new SystemError with a code and message
3848	NewWrappedSystemError defines a new SystemError wrapping an existing error
3849	Error returns the code and message conforming to the error interface
3850	GetContextError converts the context error to a tchannel error .
3851	GetSystemErrorCode returns the code to report for the given error . If the error is a SystemError we can get the code directly . Otherwise treat it as an unexpected error
3852	ping sends a ping message and waits for a ping response .
3853	handlePingRes calls registered ping handlers .
3854	handlePingReq responds to the pingReq message with a pingRes .
3855	SendSystemError sends an error frame for the given system error .
3856	connectionError handles a connection level error
3857	withStateLock performs an action with the connection state mutex locked
3858	withStateRLock performs an action with the connection state mutex rlocked .
3859	readFrames is the loop that reads frames from the network connection and dispatches to the appropriate handler . Run within its own goroutine to prevent overlapping reads on the socket . Most handlers simply send the incoming frame to a channel ; the init handlers are a notable exception since we cannot process new frames until the initialization is complete .
3860	writeFrames is the main loop that pulls frames from the send channel and writes them to the connection .
3861	hasPendingCalls returns whether there s any pending inbound or outbound calls on this connection .
3862	checkExchanges is called whenever an exchange is removed and when Close is called .
3863	closeNetwork closes the network connection and all network - related channels . This should only be done in response to a fatal connection or protocol error or after all pending frames have been sent .
3864	getLastActivityTime returns the timestamp of the last frame read or written excluding pings . If no frames were transmitted yet it will return the time this connection was created .
3865	Validate validates that the given spec is supported by thrift - gen .
3866	logFailedRegistrationRetry logs either a warning or info depending on the number of consecutiveFailures . If consecutiveFailures > maxAdvertiseFailures then we log a warning .
3867	initialAdvertise will do the initial Advertise call to Hyperbahn with additional retries on top of the built - in TChannel retries . It will use exponential backoff between each of the call attempts .
3868	Service returns the name of the destination service for this callReq .
3869	TTL returns the time to live for this callReq .
3870	SetTTL overwrites the frame s TTL .
3871	finishesCall checks whether this frame is the last one we should expect for this RPC req - res .
3872	Flat returns all the strings in the set sorted and de - duplicated .
3873	Map applies a function that processes individual strings to the strings in ps and returns a new PlatformStrings with the result . Empty strings returned by the function are dropped .
3874	MapSlice applies a function that processes slices of strings to the strings in ps and returns a new PlatformStrings with the results .
3875	GetProtoConfig returns the proto language configuration . If the proto extension was not run it will return nil .
3876	MapExprStrings applies a function to string sub - expressions within e . An expression containing the results with the same structure as e is returned .
3877	FlattenExpr takes an expression that may have been generated from PlatformStrings and returns its values in a flat sorted de - duplicated list . Comments are accumulated and de - duplicated across duplicate expressions . If the expression could not have been generted by PlatformStrings the expression will be returned unmodified .
3878	makePlatformStringsExpr constructs a single expression from the sub - expressions in ps .
3879	String returns OS Arch or OS_Arch if both are set . This must match the names of config_setting rules in
3880	Find searches from the given dir and up for the WORKSPACE file returning the directory containing it or an error if none found in the tree .
3881	runGazelle invokes gazelle with bazel run . In fullMode gazelle will run in the entire repository . In fastMode gazelle will only run in the given directories .
3882	restoreBuildFilesInRepo copies BUILD . in and BUILD . bazel . in files and copies them to BUILD and BUILD . bazel .
3883	FixLoads removes loads of unused go rules and adds loads of newly used rules . This should be called after FixFile and MergeFile since symbols may be introduced that aren t loaded . This function calls File . Sync before processing loads .
3884	fixLoad updates a load statement with the given symbols . If load is nil a new load may be created and returned . Symbols in kinds will be added to the load if they re not already present . Known symbols not in kinds will be removed if present . Other symbols will be preserved . If load is empty nil is returned .
3885	newLoadIndex returns the index in stmts where a new load statement should be inserted . after is a list of function names that the load should not be inserted before .
3886	removeLegacyGoRepository removes loads of go_repository from
3887	Compare returns an integer comparing two versions lexicographically .
3888	ParseVersion parses a version of the form 12 . 34 . 56 - abcd . Non - negative integer components are separated by dots . An arbitrary suffix may appear after - which is ignored .
3889	EmptyFile creates a File wrapped around an empty syntax tree .
3890	LoadWorkspaceFile is similar to LoadFile but parses the file as a WORKSPACE file .
3891	LoadMacroFile loads a bzl file from disk parses it then scans for the load statements and the rules called from the given Starlark function . If there is no matching function name then a new function with that name will be created . The function s syntax tree will be returned within File and can be modified by Sync and Save calls .
3892	EmptyMacroFile creates a bzl file at the given path and within the file creates a Starlark function with the provided name . The function can then be modified by Sync and Save calls .
3893	LoadData parses a build file from a byte slice and scans it for rules and load statements . The syntax tree within the returned File will be modified by editing methods .
3894	LoadWorkspaceData is similar to LoadData but parses the data as a WORKSPACE file .
3895	LoadMacroData parses a bzl file from a byte slice and scans for the load statements and the rules called from the given Starlark function . If there is no matching function name then a new function will be created and added to the File the next time Sync is called . The function s syntax tree will be returned within File and can be modified by Sync and Save calls .
3896	ScanAST creates a File wrapped around the given syntax tree . This tree will be modified by editing methods .
3897	ScanASTBody creates a File wrapped around the given syntax tree . It will also scan the AST for a function matching the given defName and if the function does not exist it will create a new one and mark it to be added to the File the next time Sync is called .
3898	MatchBuildFileName looks for a file in files that has a name from names . If there is at least one matching file a path will be returned by joining dir and the first matching name . If there are no matching files the empty string is returned .
3899	SyncMacroFile syncs the file s syntax tree with another file s . This is useful for keeping multiple macro definitions from the same . bzl file in sync .
3900	MacroName returns the name of the macro function that this file is editing or an empty string if a macro function is not being edited .
3901	Sync writes all changes back to the wrapped syntax tree . This should be called after editing operations before reading the syntax tree again .
3902	Format formats the build file in a form that can be written to disk . This method calls Sync internally .
3903	Save writes the build file to disk . This method calls Sync internally .
3904	HasDefaultVisibility returns whether the File contains a package rule with a default_visibility attribute . Rules generated by Gazelle should not have their own visibility attributes if this is the case .
3905	NewLoad creates a new empty load statement for the given file name .
3906	Symbols returns a list of symbols this statement loads .
3907	Has returns true if sym is loaded by this statement .
3908	Add inserts a new symbol into the load statement . This has no effect if the symbol is already loaded . Symbols will be sorted so the order doesn t matter .
3909	Remove deletes a symbol from the load statement . This has no effect if the symbol is not loaded .
3910	Insert marks this statement for insertion at the given index . If multiple statements are inserted at the same index they will be inserted in the order Insert is called .
3911	NewRule creates a new empty rule with the given kind and name .
3912	SetKind changes the kind of rule this is .
3913	AttrKeys returns a sorted list of attribute keys used in this rule .
3914	Attr returns the value of the named attribute . nil is returned when the attribute is not set .
3915	AttrString returns the value of the named attribute if it is a scalar string . is returned if the attribute is not set or is not a string .
3916	AttrStrings returns the string values of an attribute if it is a list . nil is returned if the attribute is not set or is not a list . Non - string values within the list won t be returned .
3917	DelAttr removes the named attribute from the rule .
3918	SetAttr adds or replaces the named attribute with an expression produced by ExprFromValue .
3919	PrivateAttrKeys returns a sorted list of private attribute names .
3920	SetPrivateAttr associates a value with a key . Unlike SetAttr this value is not converted to a build syntax tree and will not be written to a build file .
3921	Insert marks this statement for insertion at the end of the file . Multiple statements will be inserted in the order Insert is called .
3922	IsEmpty returns true when the rule contains none of the attributes in attrs for its kind . attrs should contain attributes that make the rule buildable like srcs or deps and not descriptive attributes like name or visibility .
3923	CheckInternalVisibility overrides the given visibility if the package is internal .
3924	New constructs a new label from components .
3925	Rel attempts to compute a relative label from this label . If this label is already relative or is in a different package this label may be returned unchanged .
3926	Equal returns whether two labels are exactly the same . It does not return true for different labels that refer to the same target .
3927	Contains returns whether other is contained by the package of l or a sub - package . Neither label may be relative .
3928	Process - go_googleapis case
3929	shouldCall returns true if Walk should call the callback in the directory rel .
3930	shouldUpdate returns true if Walk should pass true to the callback s update parameter in the directory rel . This indicates the build file should be updated .
3931	shouldVisit returns true if Walk should visit the subdirectory rel .
3932	SquashRules copies information from src into dst without discarding information in dst . SquashRules detects duplicate elements in lists and dictionaries but it doesn t sort elements after squashing . If squashing fails because the expression is not understood an error is returned and neither rule is modified .
3933	runClient performs the main work of the client . It attempts to connect to the server via a UNIX - domain socket . If the server is not running it starts the server and tries again . The server does all the work so the client just waits for the server to complete then exits .
3934	UpdateRepo returns an object describing a repository at the most recent commit or version tag . This function uses RemoteCache to retrieve information about the repository . Depending on how the RemoteCache was initialized and used earlier some information may already be locally available . Frequently though information will be fetched over the network so this function may be slow .
3935	NewRemoteCache creates a new RemoteCache with a set of known repositories . The Root and Remote methods will return information about repositories listed here without accessing the network . However the Head method will still access the network for these repositories to retrieve information about new versions . A cleanup function is also returned . The caller must call this when RemoteCache is no longer needed . RemoteCache may write files to a temporary directory . This will delete them .
3936	Remote returns the VCS name and the remote URL for a repository with the given root import path . This is suitable for creating new repository rules .
3937	get retrieves a value associated with the given key from the cache . ok will be true if the key exists in the cache even if it s in the process of being fetched .
3938	ensure retreives a value associated with the given key from the cache . If the key does not exist in the cache the load function will be called and its result will be associated with the key . The load function will not be called more than once for any key .
3939	RelBaseName returns the base name for rel a slash - separated path relative to the repository root . If rel is empty RelBaseName returns the base name of prefix . If prefix is empty RelBaseName returns the base name of root the absolute file path of the repository root directory . If that s empty to then RelBaseName returns root .
3940	Clone creates a copy of the configuration for use in a subdirectory . Note that the Exts map is copied but its contents are not . Configurer . Configure should do this if needed .
3941	IsValidBuildFileName returns true if a file with the given base name should be treated as a build file .
3942	check returns true if at least one of the tag groups is satisfied .
3943	fileNameInfo returns information that can be inferred from the name of a file . It does not read data from the file .
3944	otherFileInfo returns information about a non - . go file . It will parse part of the file to determine build tags . If the file can t be read an error will be logged and partial information will be returned .
3945	protoFileInfo extracts metadata from a proto file . The proto extension already parses these and stores metadata in proto . FileInfo so this is just processing relevant options .
3946	AddRule adds a rule r to the index . The rule will only be indexed if there is a known resolver for the rule s kind and Resolver . Imports returns a non - nil slice . AddRule may only be called before Finish .
3947	Finish constructs the import index and performs any other necessary indexing actions after all rules have been added . This step is necessary because a rule may be indexed differently based on what rules are added later . Finish must be called after all AddRule calls and before any FindRulesByImport calls .
3948	buildImportIndex constructs the map used by FindRulesByImport .
3949	IsSelfImport returns true if the result s label matches the given label or the result s rule transitively embeds the rule with the given label . Self imports cause cyclic dependencies so the caller may want to omit the dependency or report an error .
3950	applyKindMappings returns a copy of LoadInfo that includes c . KindMap .
3951	appendOrMergeKindMapping adds LoadInfo for the given replacement .
3952	RuleName returns a name for a proto_library derived from the given strings . For each string RuleName will look for a non - empty suffix of identifier characters and then append _proto to that .
3953	buildPackage extracts metadata from the . proto files in a directory and constructs possibly several packages then selects a package to generate a proto_library rule for .
3954	selectPackage chooses a package to generate rules for .
3955	generateProto creates a new proto_library rule for a package . The rule may be empty if there are no sources .
3956	generateEmpty generates a list of proto_library rules that may be deleted . This is generated from existing proto_library rules with srcs lists that don t match any static or generated files .
3957	ImportRepoRules reads the lock file of a vendoring tool and returns a list of equivalent repository rules that can be merged into a WORKSPACE file . The format of the file is inferred from its basename .
3958	MergeRules merges a list of generated repo rules with the already defined repo rules and then updates each rule s underlying file . If the generated rule matches an existing one then it inherits the file where the existing rule was defined . If the rule is new then its file is set as the destFile parameter . A list of the updated files is returned .
3959	GenerateRule returns a repository rule for the given repository that can be written in a WORKSPACE file .
3960	FindExternalRepo attempts to locate the directory where Bazel has fetched the external repository with the given name . An error is returned if the repository directory cannot be located .
3961	ListRepositories extracts metadata about repositories declared in a file .
3962	migrateLibraryEmbed converts library attributes to embed attributes preserving comments . This only applies to Go rules and only if there is no keep comment on library and no existing embed attribute .
3963	migrateGrpcCompilers converts go_grpc_library rules into go_proto_library rules with a compilers attribute .
3964	squashCgoLibrary removes cgo_library rules with the default name and merges their attributes with go_library with the default name . If no go_library rule exists a new one will be created . Note that the library attribute is disregarded so cgo_library and go_library attributes will be squashed even if the cgo_library was unlinked . MergeFile will remove unused values and attributes later .
3965	removeLegacyProto removes uses of the old proto rules . It deletes loads from go_proto_library . bzl . It deletes proto filegroups . It removes go_proto_library attributes which are no longer recognized . New rules are generated in place of the deleted rules but attributes and comments are not migrated .
3966	removeLegacyGazelle removes loads of the gazelle macro from
3967	selectPackages selects one Go packages out of the buildable packages found in a directory . If multiple packages are found it returns the package whose name matches the directory if such a package exists .
3968	AddBuiltin registers a builtin kind with its info .
3969	MappedKind records the fact that the given mapping was applied while processing the given package .
3970	Resolver returns a resolver for the given rule and package and a bool indicating whether one was found . Empty string may be passed for pkgRel which results in consulting the builtin kinds only .
3971	sortExprLabels sorts lists of strings using the same order as buildifier . Buildifier also sorts string lists but not those involved with select expressions . This function is intended to be used with bzl . Walk .
3972	checkRulesGoVersion checks whether a compatible version of rules_go is being used in the workspace . A message will be logged if an incompatible version is found . Note that we can t always determine the version of rules_go in use . Also if we find an incompatible version we shouldn t bail out since the incompatibility may not matter in the current workspace .
3973	preprocessTags adds some tags which are on by default before they are used to match files .
3974	setBuildTags sets genericTags by parsing as a comma separated list . An error will be returned for tags that wouldn t be recognized by go build . preprocessTags should be called before this .
3975	splitDirective splits a comma - separated directive value into its component parts trimming each of any whitespace characters .
3976	copyGoModToTemp copies to given go . mod file to a temporary directory . go list tends to mutate go . mod files but gazelle shouldn t do that .
3977	findGoTool attempts to locate the go executable . If GOROOT is set we ll prefer the one in there ; otherwise we ll rely on PATH . If the wrapper script generated by the gazelle rule is invoked by Bazel it will set GOROOT to the configured SDK . We don t want to rely on the host SDK in that situation .
3978	isBuildable returns true if anything in the package is buildable . This is true if the package has Go code that satisfies build constraints on any platform or has proto files not in legacy mode .
3979	startServer starts a new server process . This is called by the client .
3980	watchDir listens for file system changes in root and its subdirectories . The record function is called with directories whose contents have changed . New directories are watched recursively . The returned cancel function may be called to stop watching .
3981	listDirs returns a slice containing all the subdirectories under dir including dir itself .
3982	shouldIgnore returns whether a write to the given file should be ignored because they were caused by gazelle or autogazelle or something unrelated to the build .
3983	recordWrite records that a directory has been modified and that its build file should be updated the next time gazelle runs .
3984	getAndClearWrittenDirs retrieves a list of directories that have been modified since the last time getAndClearWrittenDirs was called .
3985	CombineHandler takes variadic list of handlers and produces one handler that calls each handler in order .
3986	VerifyContentType returns a handler that verifies that a request has a Content - Type header set to the specified value
3987	VerifyMimeType returns a handler that verifies that a request has a specified mime type set in Content - Type header
3988	VerifyBasicAuth returns a handler that verifies the request contains a BasicAuth Authorization header matching the passed in username and password
3989	VerifyJSONRepresenting is similar to VerifyJSON . Instead of taking a JSON string however it takes an arbitrary JSON - encodable object and verifies that the requests s body is a JSON representation that matches the object
3990	VerifyFormKV returns a handler that verifies a request contains a form key with the specified values . It is a convenience wrapper around VerifyForm that lets you avoid having to create a url . Values object .
3991	RespondWithProto returns a handler that responds to a request with the specified status code and a body containing the protobuf serialization of the provided message . Also RespondWithProto can be given an optional http . Header . The headers defined therein will be added to the response headers .
3992	RegisterFailHandlerWithT ensures that the given types . TWithHelper and fail handler are used globally .
3993	EventuallyWithOffset operates like Eventually but takes an additional initial argument to indicate an offset in the call stack . This is useful when building helper functions that contain matchers . To learn more read about ExpectWithOffset .
3994	ConsistentlyWithOffset operates like Consistnetly but takes an additional initial argument to indicate an offset in the call stack . This is useful when building helper functions that contain matchers . To learn more read about ExpectWithOffset .
3995	Expect is used to make assertions . See documentation for Expect .
3996	Eventually is used to make asynchronous assertions . See documentation for Eventually .
3997	Consistently is used to make asynchronous assertions . See documentation for Consistently .
3998	TimeoutCloser returns an io . Closer that wraps the passed - in io . Closer . If the underlying Closer fails to close within the alloted timeout ErrTimeout is returned .
3999	TimeoutReader returns an io . Reader that wraps the passed - in io . Reader . If the underlying Reader fails to read within the alloted timeout ErrTimeout is returned .
4000	TimeoutWriter returns an io . Writer that wraps the passed - in io . Writer . If the underlying Writer fails to write within the alloted timeout ErrTimeout is returned .
4001	Create a NestedError with the given path . If err is a NestedError prepend the path to it . If err is an AggregateError recursively Nest each error .
4002	SetMockService return a new MockService and set as a servicemanager
4003	Uses id or address this is only used because previously we didn t have iaas - id in node metadata .
4004	Write writes and flushes the data .
4005	Hijack will hijack the underlying TCP connection if available in the ResponseWriter .
4006	ListDeploys returns the list of deploy that match a given filter .
4007	AddAll binds a path to GET POST PUT and DELETE methods .
4008	Return timeout in seconds
4009	RegisterHandler inserts a handler on a list of handlers for version 1 . 0
4010	RegisterHandlerVersion inserts a handler on a list of handlers
4011	Check check the status of registered checkers matching names and return a list of results .
4012	DiscoverRepositoryPath finds the path of the repository from a given directory . It returns the path to the repository or an an empty string and a non - nil error if it can t find the repository .
4013	OpenRepository opens a repository by its filepath . You can use DiscoverRepositoryPath to discover the repository from any directory and use the result of this call as parameter for OpenRepository . OpenRepository will return an error if the given path does not appear to be a git repository .
4014	RemoteURL returns the URL of a remote by its name . Or an error if the remote is not declared .
4015	List lists all Apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all Apps in the indexer for a given namespace .
4018	StreamJSONResponse supports the JSON streaming format from the tsuru API .
4019	DropDatabase drop database of any given name
4020	Collection returns a collection by its name . If the collection does not exist MongoDB will create it .
4021	SetLogger defines a new logger for the current target . See the builtin log package for more details .
4022	Error writes the given values to the Target logger .
4023	Errorf writes the formatted string to the Target logger .
4024	Fatal writes the given values to the Target logger .
4025	Debugf writes the formatted string to the Target logger .
4026	GetStdLogger returns a standard Logger instance useful for configuring log in external packages .
4027	Namespace returns the namespace to be used by Custom Resources
4028	recreateContainers relaunch all node containers in the cluster for the given DockerProvisioner logging progress to the given writer . It assumes that the given writer is thread safe .
4029	Check provisioner configs
4030	Check Docker configs
4031	Check Schedulers It verifies your scheduler configuration and validates related confs .
4032	Check Router It verifies your router configuration and validates related confs .
4033	Available returns true if the unit is available . It will return true whenever the unit itself is available even when the application process is not .
4034	Get gets the named provisioner from the registry .
4035	Registry returns the list of registered provisioners .
4036	Error is the string representation of a provisioning error .
4037	validateVersion checks whether current version is greater or equal to supported version .
4038	ReadTarget returns the current target as defined in the TSURU_TARGET environment variable or in the target file .
4039	WriteTarget writes the given endpoint to the target file .
4040	WriteOnTargetList writes the given target in the target list file .
4041	Conn reads the tsuru config and calls storage . Open to get a database connection . Most tsuru packages should probably use this function . storage . Open is intended for use when supporting more than one database .
4042	Apps returns the apps collection from MongoDB .
4043	PoolsConstraints return the pool constraints collection .
4044	Users returns the users collection from MongoDB .
4045	SAMLRequests returns the saml_requests from MongoDB .
4046	AppLogCollection returns the logs collection for one app from MongoDB .
4047	CreateAppLogCollection creates a new capped collection to store logs for an app .
4048	LogsCollections returns logs collections for all apps from MongoDB .
4049	ArchiveBuildCmds build a image using the archive method .
4050	ArchiveDeployCmds is a legacy command to deploys an unit using the archive method .
4051	DeployCmds deploys an unit builded by tsuru .
4052	runWithAgentCmds returns the list of commands that should be passed when the provisioner will run a unit using tsuru_unit_agent to start . This will only be called for legacy containers that have not been re - deployed since the introduction of independent units per process in 0 . 12 . 0 .
4053	newApps returns a Apps
4054	Commits commits the container creating an image in Docker . It then returns the image identifier for usage in future container creation .
4055	processTags removes duplicates and trims spaces from each tag
4056	aggregateContainersBy aggregates and counts how many containers exist each node that matches received filters
4057	chooseNodeToAdd finds which is the node with the minimum number of containers and returns it
4058	chooseContainerToRemove finds a container from the the node with maximum number of containers and returns it
4059	Get gets the named router from the registry .
4060	Default returns the default router
4061	Store stores the app name related with the router name .
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory constructs a new instance of sharedInformerFactory
4069	NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory . Listers obtained via this SharedInformerFactory will be subject to the same filters as specified here .
4070	Proxy is not implemented for OSB API implementations
4071	UnbindUnit is a no - op for OSB API implementations
4072	Create implements Create method of PlanService interface
4073	Remove implements Remove method of PlanService interface
4074	ensureDefault creates and stores an autogenerated plan in case of no plans exists .
4075	DeleteInstance deletes the service instance from the database .
4076	ToInfo returns the service instance as a struct compatible with the return of the service info api call .
4077	Update changes informations of the service instance .
4078	BindApp makes the bind between the service instance and an app .
4079	BindUnit makes the bind between the binder and an unit .
4080	UnbindApp makes the unbind between the service instance and an app .
4081	Status returns the service instance status .
4082	ProxyInstance is a proxy between tsuru and the service instance . This method allow customized service instance methods .
4083	Inc implements Inc method from QuotaService interface
4084	SetLimit redefines the limit of the app . The new limit must be bigger than or equal to the current number of units in the app . The new limit may be smaller than 0 which means that the app should have an unlimited number of units . SetLimit implements SetLimit method from QuotaService interface
4085	Set redefines the inuse units of the app . This new value must be smaller than or equal to the current limit of the app . It also must be a non negative number . Set implements Set method from QuotaService interface
4086	Get implements Get method from QuotaService interface
4087	RemoveImage removes an image manifest from a remote registry v2 server returning an error in case of failure .
4088	RemoveAppImages removes all app images from a remote registry v2 server returning an error in case of failure .
4089	Create implements Create method of PlatformService interface
4090	List implements List method of PlatformService interface
4091	FindByName implements FindByName method of PlatformService interface
4092	Update implements Update method of PlatformService interface
4093	Remove implements Remove method of PlatformService interface
4094	Rollback implements Rollback method of PlatformService interface
4095	GetPoolByName finds a pool by name
4096	Manager returns the current configured manager as defined in the configuration file .
4097	Register registers a new repository manager that can be later configured and used .
4098	start starts the sync process on a different goroutine
4099	Shutdown shutdowns bindSyncer waiting for the current sync to complete
4100	GetForProvisioner gets the builder required by the provisioner .
4101	get gets the named builder from the registry .
4102	Registry returns the list of registered builders .
4103	RegisterQueueTask registers the internal bs queue task for later execution .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write writes and logs the data .
4109	ResetPassword actually resets the password of the user . It needs the token string . The new password will be a random string that will be then sent to the user email .
4110	Adds the list of known types to the given scheme .
4111	Register registers an item as shutdownable
4112	Do shutdowns All registered Shutdownable items
4113	PlatformListImagesOrDefault returns basicImageName when platform is empty for backwards compatibility
4114	MigrateAppsCRDs creates the necessary CRDs for every application on a Kubernetes cluster . This is done by re - provisioning the App on the cluster .
4115	Register register a new migration for later execution with the Run functions .
4116	RegisterOptional register a new migration that will not run automatically when calling the Run funcition .
4117	Run runs all registered non optional migrations if no . Name is informed . Migrations are executed in the order that they were registered . If . Name is informed an optional migration with the given name is executed .
4118	Units returns the list of units .
4119	MarshalJSON marshals the app in json format .
4120	Same as AcquireApplicationLock but it keeps trying to acquire the lock until timeout is reached .
4121	ReleaseApplicationLock releases a lock hold on an app currently it s called by a middleware however ideally it should be called individually by each handler since they might be doing operations in background .
4122	GetByName queries the database to find an app identified by the given name .
4123	AddUnits creates n new units within the provisioner saves new units in the database and enqueues the apprc serialization .
4124	SetUnitStatus changes the status of the given unit .
4125	UpdateNodeStatus updates the status of the given node and its units returning a map which units were found during the update .
4126	available returns true if at least one of N units is started or unreachable .
4127	Grant allows a team to have access to an app . It returns an error if the team already have access to the app .
4128	Revoke removes the access from a team . It returns an error if the team do not have access to the app .
4129	GetTeams returns a slice of teams that have access to the app .
4130	setEnv sets the given environment variable in the app .
4131	getEnv returns the environment variable if it s declared in the app . It will return an error if the variable is not defined in this app .
4132	validateNew checks app name format pool and plan
4133	validate checks app pool and plan
4134	InstanceEnvs returns a map of environment variables that belongs to the given service and service instance .
4135	Run executes the command in app units sourcing apprc before running the command .
4136	GetUnits returns the internal list of units converted to bind . Unit .
4137	GetUUID returns the app v4 UUID . An UUID will be generated if it does not exist .
4138	Envs returns a map representing the apps environment variables .
4139	SetEnvs saves a list of environment variables in the app .
4140	UnsetEnvs removes environment variables from an app serializing the remaining list of environment variables to all units of the app .
4141	AddCName adds a CName to app . It updates the attribute calls the SetCName function on the provisioner and saves the app in the database returning an error when it cannot save the change in the database or add the CName on the provisioner .
4142	Log adds a log message to the app . Specifying a good source is good so the user can filter where the message come from .
4143	LastLogs returns a list of the last lines log of the app matching the fields in the log instance received as an example .
4144	List returns the list of apps filtered through the filter parameter .
4145	Swap calls the Router . Swap and updates the app . CName in the database .
4146	Start starts the app calling the provisioner . Start method and changing the units state to StatusStarted .
4147	GetDbDriver returns the DB driver that was registered with a specific name
4148	GetCurrentDbDriver returns the DB driver specified in the configuration file . If this configuration was omitted it returns the default DB driver
4149	NewForConfig creates a new Clientset for the given config .
4150	GetAppFromUnitID returns app from unit id
4151	NewPipeline creates a new pipeline instance with the given list of actions .
4152	Result returns the result of the last action .
4153	DecodeJsonPayload reads the request body and decodes the JSON using json . Unmarshal .
4154	UrlFor returns the URL object from UriBase with the Path set to path and the query string built with queryParams .
4155	GetCorsInfo derives CorsInfo from Request .
4156	MiddlewareFunc makes CorsMiddleware implement the Middleware interface .
4157	MiddlewareFunc makes RecorderMiddleware implement the Middleware interface .
4158	Record the status code .
4159	MakeRouter returns the router app . Given a set of Routes it dispatches the request to the HandlerFunc of the first route that matches . The order of the Routes matters .
4160	Handle the REST routing and run the user code .
4161	This is run for each new request perf is important .
4162	This is run at init time only .
4163	This validates the Routes and prepares the Trie data structure . It must be called once the Routes are defined and before trying to find Routes . The order matters if multiple Routes match the first defined will be used .
4164	return the result that has the route defined the earliest
4165	Return the first matching Route and the corresponding parameters for a given URL object .
4166	MiddlewareFunc makes ContentTypeCheckerMiddleware implement the Middleware interface .
4167	Provided in order to implement the http . CloseNotifier interface .
4168	MiddlewareFunc makes AccessLogApacheMiddleware implement the Middleware interface .
4169	Execute the text template with the data derived from the request and return a string .
4170	As stored by the auth middlewares .
4171	If qs exists then return it with a leadin ? apache log style .
4172	When the request entered the timer middleware .
4173	If remoteAddr is set then return is without the port number apache log style .
4174	As mesured by the timer middleware .
4175	MiddlewareFunc makes JsonIndentMiddleware implement the Middleware interface .
4176	Replace the parent EncodeJson to provide indentation .
4177	Call the parent WriteHeader .
4178	MakePath generates the path corresponding to this Route and the provided path parameters . This is used for reverse route resolution .
4179	MiddlewareFunc makes RecoverMiddleware implement the Middleware interface .
4180	WrapMiddlewares calls the MiddlewareFunc methods in the reverse order and returns an HandlerFunc ready to be executed . This can be used to wrap a set of middlewares post routing on a per Route basis .
4181	MiddlewareFunc makes GzipMiddleware implement the Middleware interface .
4182	Set the right headers for gzip encoded responses .
4183	Provided in order to implement the http . Hijacker interface .
4184	Make sure the local WriteHeader is called and encode the payload if necessary . Provided in order to implement the http . ResponseWriter interface .
4185	MiddlewareFunc makes AuthBasicMiddleware implement the Middleware interface .
4186	Private function for now
4187	Insert the route in the Trie following or creating the nodes corresponding to the path .
4188	Private function for now .
4189	Given a path and an http method return all the matching routes .
4190	Same as FindRoutes but return in addition a boolean indicating if the path was matched . Useful to return 405
4191	Given a path and whatever the http method return all the matching routes .
4192	Use pushes one or multiple middlewares to the stack for middlewares maintained in the Api object .
4193	MakeHandler wraps all the Middlewares of the stack and the App together and returns an http . Handler ready to be used . If the Middleware stack is empty the App is used directly . If the App is nil a HandlerFunc that does nothing is used instead .
4194	MiddlewareFunc makes PoweredByMiddleware implement the Middleware interface .
4195	MiddlewareFunc makes StatusMiddleware implement the Middleware interface .
4196	GetStatus computes and returns a Status object based on the request informations accumulated since the start of the process .
4197	MiddlewareFunc returns a HandlerFunc that implements the middleware .
4198	Make sure the local WriteHeader is called and call the parent Flush . Provided in order to implement the http . Flusher interface .
4199	MiddlewareFunc makes AccessLogJsonMiddleware implement the Middleware interface .
4200	Fetch the binary from S3
4201	sanityCheck returns true if a check was performed
4202	non - blocking trigger close
4203	fetchLoop is run in a goroutine
4204	not a real fork
4205	Init sets the Path and Interval options
4206	Fetch file from the specified Path
4207	Fetch the binary from the provided URL
4208	NewConfig returns a new configuration instance with sane defaults .
4209	Validate checks a Config instance . It will return a sarama . ConfigurationError if the specified values don t make sense .
4210	NewClient creates a new client instance
4211	AsyncClose implements PartitionConsumer
4212	Close implements PartitionConsumer
4213	MarkOffset implements PartitionConsumer
4214	NewConsumer initializes a new consumer
4215	MarkOffsets marks stashed offsets as processed . See MarkOffset for additional explanation .
4216	ResetOffset marks the provided message as processed alongside a metadata string that represents the state of the partition consumer at that point in time . The metadata string can be used by another consumer to restore that state so it can resume consumption . Difference between ResetOffset and MarkOffset is that it allows to rewind to an earlier offset
4217	Close safely closes the consumer and releases all resources
4218	heartbeat loop triggered by the mainLoop
4219	topic watcher loop triggered by the mainLoop
4220	commit loop triggered by the mainLoop
4221	Fetches latest committed offsets for all subscriptions
4222	MarkOffset stashes the provided message offset
4223	ResetOffset stashes the provided message offset See ResetPartitionOffset for explanation
4224	Offsets returns the latest stashed offsets by topic - partition
4225	Actual is used to build a cluster based on instances on the cloud provider .
4226	Expected is used to build a cluster expected to be on the cloud provider .
4227	Delete is used to delete the instances on the cloud provider
4228	GetReconciler gets the correct Reconciler for the cloud provider currenty used .
4229	GetVersion returns Kubicorn version .
4230	GetVersionJSON returns Kubicorn version in JSON format .
4231	Actual returns the actual resource group in Azure if it exists .
4232	Expected will return the expected resource group as it would be defined in Azure
4233	CreateCmd represents create command
4234	NewUbuntuCluster creates a basic Azure cluster profile to bootstrap Kubernetes .
4235	ProviderConfig is a convenience method that will attempt to return a ControlPlaneProviderConfig for a cluster . This is useful for managing the legacy API in a clean way . This will ignore errors from json . Unmarshal and will simply return an empty config .
4236	SetProviderConfig is a convenience method that will attempt to set a provider config on a particular cluster . Just like it s counterpart ProviderConfig this makes working with the legacy API much easier .
4237	MachineProviderConfigs will return all MachineProviderConfigs for a cluster
4238	SetMachineProviderConfig will attempt to match a provider config to a machine set on the Name field . If a match cannot be made we warn and move on .
4239	NewCluster will initialize a new Cluster
4240	DeployControllerCmd represents the apply command
4241	NewRetrier creates a new Retrier using given properties .
4242	RunRetry runs a retryable function .
4243	MustGenerateRandomBytes generates random bytes or panics if it can t
4244	ExplainCmd represents the explain command
4245	TimeOrderedUUID generates a time ordered UUID . Top 32b are timestamp bottom 96b are random .
4246	GetConfigCmd represents the apply command
4247	RunAnnotated annotates a task with a description and a sequence of symbols indicating task activity until it terminates
4248	ListCmd represents the list command
4249	NewUbuntuCluster creates a simple Ubuntu Amazon cluster
4250	EditCmd represents edit command
4251	RemoveKey removes an existing key from keyring
4252	RemoveKeyUsingFile removes an existing key from keyring given a file
4253	Actual calls DO firewall Api and returns the actual state of firewall in the cloud .
4254	Expected returns the Firewall structure of what is Expected .
4255	Apply will compare the actual and expected firewall config if needed it will create the firewall .
4256	Delete removes the firewall
4257	DeleteCmd represents the delete command
4258	NewStateStore returns clusterStorer object based on type .
4259	Performs a git commit and push of the current cluster changes .
4260	ApplyCmd represents the apply command
4261	ExpandPath returns working directory path
4262	CompletionCmd represents the completion command
4263	AdoptCmd represents the adopt command
4264	StrEnvDef get environment variable or some default def
4265	IntEnvDef get environment variable or some default def
4266	BoolEnvDef get environemnt variable and return bool .
4267	readFromFS reads file from a local path and returns as string
4268	VersionCmd represents the version command
4269	NewSignalHandler creates a new Handler using given properties .
4270	Register starts handling signals .
4271	NewUbuntuCluster creates a simple Ubuntu Openstack cluster .
4272	BeginningOfHour beginning of hour
4273	BeginningOfDay beginning of day
4274	BeginningOfWeek beginning of week
4275	BeginningOfMonth beginning of month
4276	BeginningOfQuarter beginning of quarter
4277	BeginningOfYear BeginningOfYear beginning of year
4278	EndOfMinute end of minute
4279	EndOfHour end of hour
4280	EndOfDay end of day
4281	EndOfWeek end of week
4282	EndOfMonth end of month
4283	EndOfQuarter end of quarter
4284	EndOfYear end of year
4285	MustParse must parse string to time or it will panic
4286	Between check time between the begin end time or not
4287	ParseInLocation parse string to time in location
4288	MustParse must parse string to time or will panic
4289	MustParseInLocation must parse string to time in location or will panic
4290	Between check now between the begin end time or not
4291	NewChannelMemoryBackend creates a simple in - memory logging backend which utilizes a go channel for communication . Start will automatically be called by this function .
4292	Start launches the internal goroutine which starts processing data from the input channel .
4293	Flush waits until all records in the buffered channel have been processed .
4294	Stop signals the internal goroutine to exit and waits until it have .
4295	Formatted returns the formatted log record string .
4296	Message returns the log record message .
4297	SetBackend overrides any previously defined backend for this logger .
4298	MustGetLogger is like GetLogger but panics if the logger can t be created . It simplifies safe initialization of a global logger for eg . a package .
4299	Reset restores the internal state of the logging library .
4300	IsEnabledFor returns true if the logger is enabled for the given level .
4301	Criticalf logs a message using CRITICAL as log level .
4302	Warningf logs a message using WARNING as log level .
4303	Noticef logs a message using NOTICE as log level .
4304	Infof logs a message using INFO as log level .
4305	SetFormatter sets the default formatter for all new backends . A backend will fetch this value once it is needed to format a record . Note that backends will cache the formatter after the first point . For now make sure to set the formatter before logging .
4306	MustStringFormatter is equivalent to NewStringFormatter with a call to panic on error .
4307	formatFuncName tries to extract certain part of the runtime formatted function name to some pre - defined variation . This function is known to not work properly if the package path or name contains a dot .
4308	Log implements the Log function required by the Backend interface .
4309	LogLevel returns the log level from a string representation .
4310	AddModuleLevel wraps a log backend with knobs to have different log levels for different modules .
4311	GetLevel returns the log level for the given module .
4312	SetLevel sets the log level for the given module .
4313	IsEnabledFor will return true if logging is enabled for the given module .
4314	MultiLogger creates a logger which contain multiple loggers .
4315	Log passes the log record to all backends .
4316	GetLevel returns the highest level enabled by all backends .
4317	SetLevel propagates the same level to all backends .
4318	IsEnabledFor returns true if any of the backends are enabled for it .
4319	ConvertColors takes a list of ints representing colors for log levels and converts them into strings for ANSI color formatting
4320	NewSyslogBackend connects to the syslog daemon using UNIX sockets with the given prefix . If prefix is not given the prefix will be derived from the launched command .
4321	NewSyslogBackendPriority is the same as NewSyslogBackend but with custom syslog priority like syslog . LOG_LOCAL3|syslog . LOG_DEBUG etc .
4322	SetBackend replaces the backend currently set with the given new logging backend .
4323	NewCommander returns a new commander with the specified top - level flags and command name . The Usage function for the topLevelFlags will be set as well .
4324	Execute should be called once the top - level - flags on a Commander have been initialized . It finds the correct subcommand and executes it and returns an ExitStatus with the result . On a usage error an appropriate message is printed to os . Stderr and ExitUsageError is returned . The additional args are provided as - is to the Execute method of the selected Command .
4325	explain prints a brief description of all the subcommands and the important top - level flags .
4326	explainGroup explains all the subcommands for a particular group .
4327	explainCmd prints a brief description of a single command .
4328	dealias recursivly dealiases a command until a non - aliased command is reached .
4329	Execute should be called once the default flags have been initialized by flag . Parse . It finds the correct subcommand and executes it and returns an ExitStatus with the result . On a usage error an appropriate message is printed to os . Stderr and ExitUsageError is returned . The additional args are provided as - is to the Execute method of the selected Command . It is a wrapper around DefaultCommander . Execute .
4330	LoadFromData accepts raw data directly from memory and returns a new configuration representation . Note that the configuration is written to the system temporary folder so your file should not contain sensitive information .
4331	LoadFromReader accepts raw data directly from a reader and returns a new configuration representation . You must use ReloadData to reload . You cannot append files a configfile read this way .
4332	ReloadData reloads configuration file from memory
4333	AppendFiles appends more files to ConfigFile and reload automatically .
4334	GetKeyList returns the list of all keys in give section in the same order in the file . It returns nil if given section does not exist .
4335	SaveConfigData writes configuration to a writer
4336	SaveConfigFile writes configuration file to local file system
4337	Find finds exactly one element by CSS selector .
4338	FindByXPath finds exactly one element by XPath selector .
4339	FindByLink finds exactly one anchor element by its text content .
4340	FindByLabel finds exactly one element by associated label text .
4341	FindByName finds exactly element with the provided name attribute .
4342	FindByClass finds exactly one element with a given CSS class .
4343	FindByID finds exactly one element that has the given ID .
4344	First finds the first element by CSS selector .
4345	FirstByXPath finds the first element by XPath selector .
4346	FirstByLink finds the first anchor element by its text content .
4347	FirstByLabel finds the first element by associated label text .
4348	FirstByName finds the first element with the provided name attribute .
4349	All finds zero or more elements by CSS selector .
4350	AllByXPath finds zero or more elements by XPath selector .
4351	AllByLink finds zero or more anchor elements by their text content .
4352	AllByLabel finds zero or more elements by associated label text .
4353	AllByName finds zero or more elements with the provided name attribute .
4354	AllByClass finds zero or more elements with a given CSS class .
4355	AllByID finds zero or more elements with a given ID .
4356	FirstByClass finds the first element with a given CSS class .
4357	Timeout provides an Option for specifying a timeout in seconds .
4358	ChromeOptions is used to pass additional options to Chrome via ChromeDriver .
4359	JoinPage creates a Page using existing session URL . This method takes Options but respects only the HTTPClient Option if provided .
4360	Destroy closes any open browsers by ending the session .
4361	Reset deletes all cookies set for the current domain and navigates to a blank page . Unlike Destroy Reset will permit the page to be re - used after it is called . Reset is faster than Destroy but any cookies from domains outside the current domain will remain after a page is reset .
4362	Navigate navigates to the provided URL .
4363	GetCookies returns all cookies on the page .
4364	SetCookie sets a cookie on the page .
4365	DeleteCookie deletes a cookie on the page by name .
4366	ClearCookies deletes all cookies on the page .
4367	URL returns the current page URL .
4368	Size sets the current page size in pixels .
4369	Screenshot takes a screenshot and saves it to the provided filename . The provided filename may be an absolute or relative path .
4370	Title returns the page title .
4371	HTML returns the current contents of the DOM for the entire page .
4372	PopupText returns the current alert confirm or prompt popup text .
4373	EnterPopupText enters text into an open prompt popup .
4374	ConfirmPopup confirms an alert confirm or prompt popup .
4375	CancelPopup cancels an alert confirm or prompt popup .
4376	SwitchToParentFrame focuses on the immediate parent frame of a frame selected by Selection . Frame . After switching all new and existing selections will refer to the parent frame . All further Page methods will apply to this frame as well . This method is not supported by PhantomJS . Please use SwitchToRootFrame instead .
4377	SwitchToRootFrame focuses on the original default page frame before any calls to Selection . Frame were made . After switching all new and existing selections will refer to the root frame . All further Page methods will apply to this frame as well .
4378	NextWindow switches to the next available window .
4379	CloseWindow closes the active window .
4380	WindowCount returns the number of available windows .
4381	LogTypes returns all of the valid log types that may be used with a LogReader .
4382	MoveMouseBy moves the mouse by the provided offset .
4383	DoubleClick double clicks the left mouse button at the current mouse position .
4384	Click performs the provided Click event using the provided Button at the current mouse position .
4385	Click clicks on all of the elements that the selection refers to .
4386	DoubleClick double - clicks on all of the elements that the selection refers to .
4387	Fill fills all of the fields the selection refers to with the provided text .
4388	Tap performs the provided Tap event on each element in the selection .
4389	Touch performs the provided Touch event at the location of each element in the selection .
4390	FlickFinger performs a flick touch action by the provided offset and at the provided speed on exactly one element .
4391	ScrollFinger performs a scroll touch action by the provided offset on exactly one element .
4392	NewCapabilities returns a Capabilities instance with any provided features enabled .
4393	JSON returns a JSON string representing the desired capabilities .
4394	HaveTitle passes when the expected title is equivalent to the title of the provided page .
4395	HaveURL passes when the expected URL is equivalent to the current URL of the provided page .
4396	HavePopupText passes when the expected text is equivalent to the text contents of an open alert confirm or prompt popup .
4397	HaveLoggedError passes when all of the expected log messages are logged as errors in the browser console . If no message is provided this matcher will pass if any error message has been logged . When negated this matcher will only fail if all of the provided messages are logged .
4398	Text returns the entirety of the text content for exactly one element .
4399	Active returns true if the single element that the selection refers to is active .
4400	Attribute returns an attribute value for exactly one element .
4401	CSS returns a CSS style property value for exactly one element .
4402	Selected returns true if all of the elements that the selection refers to are selected .
4403	Visible returns true if all of the elements that the selection refers to are visible .
4404	Enabled returns true if all of the elements that the selection refers to are enabled .
4405	HaveCount passes when the expected element count is equal to the actual number of elements in the selection .
4406	HaveAttribute passes when the expected attribute and value are present on the element . This matcher will fail if the provided selection refers to more than one element .
4407	EdgeDriver returns an instance of a EdgeDriver WebDriver . Provided Options will apply as default arguments for new pages . New pages will accept invalid SSL certificates by default . This may be disabled using the RejectInvalidSSL Option .
4408	Selendroid returns an instance of a Selendroid WebDriver . Provided Options will apply as default arguments for new pages . New pages will accept invalid SSL certificates by default . This may be disabled using the RejectInvalidSSL Option . The jarFile is a relative or absolute path to Selendroid JAR file . Selendroid will return nil if an invalid path is provided .
4409	SwitchToFrame focuses on the frame specified by the selection . All new and existing selections will refer to the new frame . All further Page methods will apply to this frame as well .
4410	Count returns the number of elements that the selection refers to .
4411	EqualsElement returns whether or not two selections of exactly one element refer to the same element .
4412	MouseToElement moves the mouse over exactly one element in the selection .
4413	loggingMiddleware logs requests to the proxy
4414	chainHandlers takes a set of middleware and joins them together into a single Middleware making it much simpler to compose middleware together
4415	HTTPReverseProxy provides a default setup for proxying internal components within the framework
4416	CheckInstallation checks installation of all of the tools
4417	CheckVersion checks installation of a given binary using semver - compatible comparisions
4418	GetVersionForBinary gets the version of a given Ruby binary
4419	getUser finds a user
4420	Login handles the login API call to the User Service .
4421	Deal with the login request .
4422	Deal with the logout request .
4423	Show the current user if logged in otherwise display a login form .
4424	Run the web application .
4425	WithRequest specifies the details of the HTTP request that will be used to confirm that the Provider provides an API listening on the given interface . Mandatory .
4426	WillRespondWith specifies the details of the HTTP response that will be used to confirm that the Provider must satisfy . Mandatory .
4427	Checks to see if someone has tried to submit a JSON string for an object which is no longer supported
4428	ByUsername finds a user by their username .
4429	ByID finds a user by their ID
4430	UserLogin logs a user in returning an auth token and the user object
4431	newClient creates a new Pact client manager with the provided services
4432	NewClient creates a new Pact client manager with defaults
4433	ListServers lists all known Mock Servers
4434	UpdateMessagePact adds a pact message to a contract file
4435	PublishPacts publishes a set of pacts to a pact broker
4436	Get a port given a URL
4437	Get the address given a URL
4438	sanitiseRubyResponse removes Ruby - isms from the response content making the output much more human readable
4439	Publish sends the Pacts to a broker optionally tagging them
4440	FindPortInRange Iterate through CSV or Range of ports to find open port Valid inputs are 8081 8081 8085 8081 - 8085 . Do not combine list and range
4441	EachLike specifies that a given element in a JSON body can be repeated minRequired times . Number needs to be 1 or greater
4442	Term specifies that the matching should generate a value and also match using a regular expression .
4443	UnmarshalJSON is a custom JSON parser for MapMatcher It treats the matchers as strings
4444	Takes an object and converts it to a JSON representation
4445	match recursively traverses the provided type and outputs a matcher string for it that is compatible with the Pact dsl .
4446	AddMessage creates a new asynchronous consumer expectation
4447	AddInteraction creates a new Pact interaction initialising all required things . Will automatically start a Mock Service if none running .
4448	Teardown stops the Pact Mock Server . This usually is called on completion of each test suite .
4449	Verify runs the current test case against a Mock Service . Will cleanup interactions between tests within a suite .
4450	stateHandlerMiddleware responds to the various states that are given during provider verification statehandler accepts a state object from the verifier and executes any state handlers associated with the provider . It will not execute further middleware if it is the designted state request
4451	VerifyMessageProviderRaw runs provider message verification . A Message Producer is analagous to Consumer in the HTTP Interaction model . It is the initiator of an interaction and expects something on the other end of the interaction to respond - just in this case not immediately .
4452	VerifyMessageConsumerRaw creates a new Pact _message_ interaction to build a testable interaction . A Message Consumer is analagous to a Provider in the HTTP Interaction model . It is the receiver of an interaction and needs to be able to handle whatever request was provided .
4453	VerifyProvider runs the verification process against a running Provider .
4454	NewService creates a new MockService with default settings .
4455	Setup the Management services .
4456	addServiceMonitor watches a channel to add services into operation .
4457	removeServiceMonitor watches a channel to remove services from operation .
4458	List all Service PIDs .
4459	Command creates an os command to be run
4460	call sends a message to the Pact service
4461	DeleteInteractions removes any previous Mock Service Interactions .
4462	AddInteraction adds a new Pact Mock Service interaction .
4463	WritePact writes the pact file to disk .
4464	ExpectsToReceive specifies the content it is expecting to be given from the Provider . The function must be able to handle this message for the interaction to succeed .
4465	WithMetadata specifies message - implementation specific metadata to go with the content
4466	AsType specifies that the content sent through to the consumer handler should be sent as the given type
4467	UserLogin is the login route .
4468	Region returns the service region infering it from S3 domain .
4469	New Returns a new S3 domain defaults to DefaultDomain if empty
4470	Bucket returns a bucket on s3 Bucket Config is initialized to DefaultConfig
4471	PutWriter provides a writer to upload data as multipart upload requests . Each header in h is added to the HTTP request header . This is useful for specifying options such as server - side encryption in metadata as well as custom user metadata . DefaultConfig is used if c is nil . Callers should call Close on w to ensure that all resources are released .
4472	url returns a parsed url to the given path . c must not be nil
4473	SetLogger wraps the standard library log package . It allows the internal logging of s3gof3r to be set to a desired output and format . Setting debug to true enables debug logging output . s3gof3r does not log output by default .
4474	InstanceKeys Requests the AWS keys from the instance - based metadata on EC2 Assumes only one IAM role .
4475	EnvKeys Reads the AWS keys from the environment
4476	Sign signs the http . Request
4477	getAWSKeys gets the AWS Keys from environment variables or the instance - based metadata on EC2 Environment variables are attempted first followed by the instance - based credentials .
4478	find unix home directory
4479	add canned acl to http . Header
4480	uploads a part checking the etag against the calculated value
4481	Try to abort multipart upload . Do not error on failure .
4482	returns true unless partSize is large enough to achieve maxObjSize with remaining parts
4483	CheckDisallowed checks that no environment variables with the prefix are set that we don t know how or want to parse . This is likely only meaningful with a non - empty prefix .
4484	Process populates the specified struct based on environment variables
4485	MustProcess is the same as Process but panics if an error occurs
4486	toTypeDescription converts Go types into a human readable description
4487	Usage writes usage information to stderr using the default header and table format
4488	Usagef writes usage information to the specified io . Writer using the specifed template specification
4489	Usaget writes usage information to the specified io . Writer using the specified template
4490	Scan implements the Scanner interface .
4491	Value implements the driver Valuer interface .
4492	NewTime creates a new Time .
4493	TimeFromPtr creates a new Time that will be null if t is nil .
4494	ValueOrZero returns the inner value if valid otherwise zero .
4495	MarshalJSON implements json . Marshaler . It will encode null if this time is null .
4496	SetValid changes this Time s value and sets it to be non - null .
4497	Ptr returns a pointer to this Time s value or a nil pointer if this Time is null .
4498	NewBool creates a new Bool
4499	BoolFromPtr creates a new Bool that will be null if f is nil .
4500	UnmarshalJSON implements json . Unmarshaler . It supports number and null input . 0 will not be considered a null Bool . It also supports unmarshalling a sql . NullBool .
4501	UnmarshalText implements encoding . TextUnmarshaler . It will unmarshal to a null Bool if the input is a blank or not an integer . It will return an error if the input is not an integer blank or null .
4502	MarshalJSON implements json . Marshaler . It will encode null if this Bool is null .
4503	SetValid changes this Bool s value and also sets it to be non - null .
4504	NewString creates a new String
4505	UnmarshalJSON implements json . Unmarshaler . It supports string and null input . Blank string input produces a null String . It also supports unmarshalling a sql . NullString .
4506	MarshalText implements encoding . TextMarshaler . It will encode a blank string when this String is null .
4507	UnmarshalText implements encoding . TextUnmarshaler . It will unmarshal to a null String if the input is a blank string .
4508	SetValid changes this String s value and also sets it to be non - null .
4509	StringFromPtr creates a new String that be null if s is nil .
4510	MarshalJSON implements json . Marshaler . It will encode null if this String is null .
4511	NewInt creates a new Int
4512	IntFromPtr creates a new Int that be null if i is nil .
4513	UnmarshalJSON implements json . Unmarshaler . It supports number and null input . 0 will be considered a null Int . It also supports unmarshalling a sql . NullInt64 .
4514	MarshalText implements encoding . TextMarshaler . It will encode a zero if this Int is null .
4515	SetValid changes this Int s value and also sets it to be non - null .
4516	UnmarshalText implements encoding . TextUnmarshaler . It will unmarshal to a null Int if the input is a blank or not an integer . It will return an error if the input is not an integer blank or null .
4517	MarshalText implements encoding . TextMarshaler . It will encode a zero if this Bool is null .
4518	SetValid changes this Float s value and also sets it to be non - null .
4519	MarshalJSON implements json . Marshaler . It will encode the zero value of time . Time if this time is invalid .
4520	UnmarshalJSON implements json . Unmarshaler . It supports number and null input . 0 will not be considered a null Float . It also supports unmarshalling a sql . NullFloat64 .
4521	UnmarshalText implements encoding . TextUnmarshaler . It will unmarshal to a null Float if the input is a blank or not an integer . It will return an error if the input is not an integer blank or null .
4522	MarshalJSON implements json . Marshaler . It will encode null if this Float is null .
4523	newGossipChannel returns a named usable channel . It delegates receiving duties to the passed Gossiper .
4524	GossipUnicast implements Gossip relaying msg to dst which must be a member of the channel .
4525	GossipBroadcast implements Gossip relaying update to all members of the channel .
4526	Send relays data into the channel topology via random neighbours .
4527	SendDown relays data into the channel topology via conn .
4528	GobEncode gob - encodes each item and returns the resulting byte slice .
4529	newTokenBucket returns a bucket containing capacity tokens refilled at a rate of one token per tokenInterval .
4530	Blocks until there is a token available . Not safe for concurrent use by multiple goroutines .
4531	Determine the historic token timestamp representing a full bucket
4532	PrefixRangeEnd allows Get Delete and Watch requests to operate on all keys with a matching prefix . Pass the prefix to this function and use the result as the RangeEnd value .
4533	newLocalPeer returns a usable LocalPeer .
4534	Connections returns all the connections that the local peer is aware of .
4535	createConnection creates a new connection originating from localAddr to peerAddr . If acceptNewPeer is false peerAddr must already be a member of the mesh .
4536	ACTOR client API Synchronous .
4537	If the connection is successful it will end up in the local peer s connections map .
4538	SendProtocolMsg implements ProtocolSender .
4539	NewStatus returns a Status object taken as a snapshot from the router .
4540	makePeerStatusSlice takes a snapshot of the state of peers .
4541	makeUnicastRouteStatusSlice takes a snapshot of the unicast routes in routes .
4542	makeBroadcastRouteStatusSlice takes a snapshot of the broadcast routes in routes .
4543	makeLocalConnectionStatusSlice takes a snapshot of the active local connections in the ConnectionMaker .
4544	makeTrustedSubnetsSlice makes a human - readable copy of the trustedSubnets .
4545	Range implements gRPC KVServer . Range gets the keys in the range from the store .
4546	Put implements gRPC KVServer . Put puts the given key into the store . A put request increases the revision of the store and generates one event in the event history .
4547	Delete implements gRPC KVServer . Delete deletes the given range from the store . A delete request increase the revision of the store and generates one event in the event history .
4548	Txn implements gRPC KVServer . Txn processes all the requests in one transaction . A txn request increases the revision of the store and generates events with the same revision in the event history . It is not allowed to modify the same key several times within one txn .
4549	Compact implements gRPC KVServer . Compact compacts the event history in s . User should compact the event history periodically or it will grow infinitely .
4550	From public API method to proposalc .
4551	applyCompare applies the compare request . It returns the revision at which the comparison happens . If the comparison succeeds the it returns true . Otherwise it returns false .
4552	Descriptions returns descriptions for all known peers .
4553	OnGC adds a new function to be set of functions that will be executed on all subsequent GC runs receiving the GC d peer .
4554	OnInvalidateShortIDs adds a new function to a set of functions that will be executed on all subsequent GC runs when the mapping from short IDs to peers has changed .
4555	Choose an available short ID at random .
4556	fetchWithDefault will use reference fields of the passed peer object to look up and return an existing matching peer . If no matching peer is found the passed peer is saved and returned .
4557	Fetch returns a peer matching the passed name without incrementing its refcount . If no matching peer is found Fetch returns nil .
4558	Like fetch but increments local refcount .
4559	FetchByShortID returns a peer matching the passed short ID . If no matching peer is found FetchByShortID returns nil .
4560	GarbageCollect takes a lock triggers a GC and invokes the accumulated GC callbacks .
4561	newRoutes returns a usable Routes based on the LocalPeer and existing Peers .
4562	OnChange appends callback to the functions that will be called whenever the routes are recalculated .
4563	Unicast returns the next hop on the unicast route to the named peer based on established and symmetric connections .
4564	UnicastAll returns the next hop on the unicast route to the named peer based on all connections .
4565	Broadcast returns the set of peer names that should be notified when we receive a broadcast message originating from the named peer based on established and symmetric connections .
4566	BroadcastAll returns the set of peer names that should be notified when we receive a broadcast message originating from the named peer based on all connections .
4567	NewPeer returns a Peer which can be used as a net . PacketConn . Clients must Register a mesh . Gossip before calling ReadFrom or WriteTo . Clients should aggressively consume from ReadFrom .
4568	Register injects the mesh . Gossip and enables full - duplex communication . Clients should consume from ReadFrom without blocking .
4569	ReadFrom implements net . PacketConn . Clients should consume from ReadFrom without blocking .
4570	WriteTo implements net . PacketConn .
4571	LocalAddr implements net . PacketConn .
4572	OnGossip implements mesh . Gossiper . The buf is a single pkt .
4573	OnGossipBroadcast implements mesh . Gossiper . The buf is a single pkt
4574	OnGossipUnicast implements mesh . Gossiper . The buf is a single pkt .
4575	NewDefaultServer is like NewServer but we take care of creating a mesh . Router and meshconn . Peer for you with sane defaults . If you need more fine - grained control create the components yourself and use NewServer .
4576	PeerNameFromUserInput parses PeerName from a user - provided string .
4577	bytes encodes PeerName as a byte slice .
4578	NewRouter returns a new router . It must be started .
4579	Relay all pending gossip data for each channel via random neighbours .
4580	Relay all pending gossip data for each channel via conn .
4581	BroadcastTopologyUpdate is invoked whenever there is a change to the mesh topology and broadcasts the new set of peers to the mesh .
4582	OnGossipUnicast implements Gossiper but always returns an error as a router should only receive gossip broadcasts of TopologyGossipData .
4583	OnGossipBroadcast receives broadcasts of TopologyGossipData . It returns the received update unchanged .
4584	Gossip yields the current topology as GossipData .
4585	OnGossip receives broadcasts of TopologyGossipData . It returns an improved version of the received update . See peers . ApplyUpdate .
4586	Encode implements GossipData .
4587	Construct an empty state object ready to receive updates . This is suitable to use at program start . Other peers will populate us with data .
4588	Merge merges the other GossipData into this one and returns our resulting complete state .
4589	Merge the set into our state abiding increment - only semantics . Return a non - nil mesh . GossipData representation of the received set .
4590	Merge the set into our state abiding increment - only semantics . Return our resulting complete state .
4591	OnGossipBroadcast implements Gossiper .
4592	OnGossip should return everything new I ve just learnt . surrogateGossiper doesn t understand the content of messages but it can eliminate simple duplicates
4593	GenerateKeyPair is used during encrypted protocol introduction .
4594	FormSessionKey is used during encrypted protocol introduction .
4595	NewTCPCryptoState returns a valid TCPCryptoState .
4596	Send implements TCPSender by encoding the msg .
4597	Send implements TCPSender by writing the size of the msg as a big - endian uint32 before the msg . msgs larger than MaxTCPMsgSize are rejected .
4598	Send implements TCPSender by sealing and sending the msg as - is .
4599	Receive implements TCPReciever by Gob decoding into a byte slice directly .
4600	Receive implements TCPReceiver by making a length - limited read into a byte buffer .
4601	Receive implements TCPReceiver by reading from the wrapped TCPReceiver and unboxing the encrypted message returning the decoded message .
4602	Construct a peer with empty state . Be sure to register a channel later so we can make outbound communication .
4603	Increment the counter by one .
4604	Return a copy of our complete state .
4605	Merge the gossiped data represented by buf into our state .
4606	makeRaftPeer converts a net . Addr into a raft . Peer . All peers must perform the Addr - to - Peer mapping in the same way . The etcd Raft implementation tracks the committed entry for each node ID and panics if it discovers a node has lost previously committed entries . In effect it assumes commitment implies durability . But our storage is explicitly non - durable . So whenever a node restarts we need to give it a brand new ID . That is the peer UID .
4607	String returns the peer name and nickname .
4608	Apply f to all peers reachable by peer . If establishedAndSymmetric is true only peers with established bidirectional connections will be selected . The exclude maps is treated as a set of remote peers to blacklist .
4609	ParsePeerUID parses a decimal peer UID from a string .
4610	Swap implements sort . Interface .
4611	Less implements sort . Interface .
4612	DoIntro executes the protocol introduction .
4613	In the V1 protocol the intro fields are sent unencrypted . So we restrict them to an established subset of fields that are assumed to be safe .
4614	newConnectionMaker returns a usable ConnectionMaker seeded with peers making outbound connections from localAddr and listening on port . If discovery is true ConnectionMaker will attempt to initiate new connections with peers it s not directly connected to .
4615	connectionAborted marks the target identified by address as broken and puts it in the TargetWaiting state .
4616	NewGossipSender constructs a usable GossipSender .
4617	Send accumulates the GossipData and will send it eventually . Send and Broadcast accumulate into different buckets .
4618	Broadcast accumulates the GossipData under the given srcName and will send it eventually . Send and Broadcast accumulate into different buckets .
4619	Flush sends all pending data and returns true if anything was sent since the previous flush . For testing .
4620	Sender yields the GossipSender for the named channel . It will use the factory function if no sender yet exists .
4621	Flush flushes all managed senders . Used for testing .
4622	Find the path to package main by looking at the root Caller .
4623	Create creates a channel and returns a token for use by the client . The clientID is an application - provided string used to identify the client .
4624	Send sends a message on the channel associated with clientID .
4625	SendJSON is a helper function that sends a JSON - encoded value on the channel associated with clientID .
4626	remapError fixes any APIError referencing xmpp into one referencing channel .
4627	NamespacedContext wraps a Context to support namespaces .
4628	protoToItem converts a protocol buffer item to a Go struct .
4629	If err is an appengine . MultiError return its first element . Otherwise return err .
4630	Get gets the item for the given key . ErrCacheMiss is returned for a memcache cache miss . The key must be at most 250 bytes in length .
4631	GetMulti is a batch version of Get . The returned map from keys to items may have fewer elements than the input slice due to memcache cache misses . Each key must be at most 250 bytes in length .
4632	Delete deletes the item for the given key . ErrCacheMiss is returned if the specified item can not be found . The key must be at most 250 bytes in length .
4633	DeleteMulti is a batch version of Delete . If any keys cannot be found an appengine . MultiError is returned . Each key must be at most 250 bytes in length .
4634	Increment atomically increments the decimal value in the given key by delta and returns the new value . The value must fit in a uint64 . Overflow wraps around and underflow is capped to zero . The provided delta may be negative . If the key doesn t exist in memcache the provided initial value is used to atomically populate it before the delta is applied . The key must be at most 250 bytes in length .
4635	IncrementExisting works like Increment but assumes that the key already exists in memcache and doesn t take an initial value . IncrementExisting can save work if calculating the initial value is expensive . An error is returned if the specified item can not be found .
4636	set sets the given items using the given conflict resolution policy . appengine . MultiError may be returned .
4637	Get gets the item for the given key and decodes the obtained value into v . ErrCacheMiss is returned for a memcache cache miss . The key must be at most 250 bytes in length .
4638	Stats retrieves the current memcache statistics .
4639	Flush flushes all items from memcache .
4640	RunInBackground runs f in a background goroutine in this process . f is provided a context that may outlast the context provided to RunInBackground . This is only valid to invoke from a service set to basic or manual scaling .
4641	List returns the names of modules belonging to this application .
4642	SetNumInstances sets the number of instances of the given module . version to the specified value . If either module or version are the empty string it means the default .
4643	Versions returns the names of the versions that belong to the specified module . If module is the empty string it means the default module .
4644	DefaultVersion returns the default version of the specified module . If module is the empty string it means the default module .
4645	Start starts the specified version of the specified module . If either module or version are the empty string it means the default .
4646	Stop stops the specified version of the specified module . If either module or version are the empty string it means the default .
4647	Ancestor returns a derivative query with an ancestor filter . The ancestor should not be nil .
4648	EventualConsistency returns a derivative query that returns eventually consistent results . It only has an effect on ancestor queries .
4649	Project returns a derivative query that yields only the given fields . It cannot be used with KeysOnly .
4650	Distinct returns a derivative query that yields de - duplicated entities with respect to the set of projected fields . It is only used for projection queries . Distinct cannot be used with DistinctOn .
4651	DistinctOn returns a derivative query that yields de - duplicated entities with respect to the set of the specified fields . It is only used for projection queries . The field list should be a subset of the projected field list . DistinctOn cannot be used with Distinct .
4652	KeysOnly returns a derivative query that yields only keys not keys and entities . It cannot be used with projection queries .
4653	Limit returns a derivative query that has a limit on the number of results returned . A negative value means unlimited .
4654	Offset returns a derivative query that has an offset of how many keys to skip over before returning results . A negative value is invalid .
4655	BatchSize returns a derivative query to fetch the supplied number of results at once . This value should be greater than zero and equal to or less than the Limit .
4656	Start returns a derivative query with the given start point .
4657	End returns a derivative query with the given end point .
4658	Count returns the number of results for the query . The running time and number of API calls made by Count scale linearly with the sum of the query s offset and limit . Unless the result count is expected to be small it is best to specify a limit ; otherwise Count will continue until it finishes counting or the provided context expires .
4659	Run runs the query in the given context .
4660	Next returns the key of the next result . When there are no more results Done is returned as the error . If the query is not keys only and dst is non - nil it also loads the entity stored for that key into the struct pointer or PropertyLoadSaver dst with the same semantics and possible errors as for the Get function .
4661	Cursor returns a cursor for the iterator s current location .
4662	String returns a base - 64 string representation of a cursor .
4663	Decode decodes a cursor from its base - 64 string representation .
4664	saveEntity saves an EntityProto into a PropertyLoadSaver or struct pointer .
4665	Namespace returns a replacement context that operates within the given namespace .
4666	typeof returns the type of the given name which may be of the form x or p . X .
4667	dot returns the type of typ . name making its decision using the type information in cfg .
4668	joinFunc is the inverse of splitFunc .
4669	validPropertyName returns whether name consists of one or more valid Go identifiers joined by . .
4670	getStructCodec returns the structCodec for the given struct type .
4671	LoadStruct loads the properties from p to dst . dst must be a struct pointer .
4672	SaveStruct returns the properties from src as a slice of Properties . src must be a struct pointer .
4673	ServingURL returns a URL that will serve an image from Blobstore .
4674	DeleteServingURL deletes the serving URL for an image .
4675	CurrentOAuth returns the user associated with the OAuth consumer making this request . If the OAuth consumer did not make a valid OAuth request or the scopes is non - empty and the current user does not have at least one of the scopes this method will return an error .
4676	OAuthConsumerKey returns the OAuth consumer key provided with the current request . This method will return an error if the OAuth request was invalid .
4677	String returns a displayable name for the user .
4678	LoginURL returns a URL that when visited prompts the user to sign in then redirects the user to the URL specified by dest .
4679	LoginURLFederated is like LoginURL but accepts a user s OpenID identifier .
4680	LogoutURL returns a URL that when visited signs the user out then redirects the user to the URL specified by dest .
4681	ctx may be nil .
4682	NewClient returns a client for the given host . All communication will be performed over SSL unless the host is localhost .
4683	NewContext returns a copy of parent that will cause App Engine API calls to be sent to the client s remote host .
4684	NewRemoteContext returns a context that gives access to the production APIs for the application at the given host . All communication will be performed over SSL unless the host is localhost .
4685	Debugf formats its arguments according to the format analogous to fmt . Printf and records the text as a log message at Debug level . The message will be associated with the request linked with the provided context .
4686	guestbookKey returns the key used for all guestbook entries .
4687	toRetryParameter converts RetryOptions to pb . TaskQueueRetryParameters .
4688	NewPOSTTask creates a Task that will POST to a path with the given form data .
4689	ParseRequestHeaders parses the special HTTP request headers available to push task request handlers . This function silently ignores values of the wrong format .
4690	Add adds the task to a named queue . An empty queue name means that the default queue will be used . Add returns an equivalent Task with defaults filled in including setting the task s Name field to the chosen name if the original was empty .
4691	AddMulti adds multiple tasks to a named queue . An empty queue name means that the default queue will be used . AddMulti returns a slice of equivalent tasks with defaults filled in including setting each task s Name field to the chosen name if the original was empty . If a given task is badly formed or could not be added an appengine . MultiError is returned .
4692	Delete deletes a task from a named queue .
4693	DeleteMulti deletes multiple tasks from a named queue . If a given task could not be deleted an appengine . MultiError is returned . Each task is deleted independently ; one may fail to delete while the others are sucessfully deleted .
4694	Lease leases tasks from a queue . leaseTime is in seconds . The number of tasks fetched will be at most maxTasks .
4695	LeaseByTag leases tasks from a queue grouped by tag . If tag is empty then the returned tasks are grouped by the tag of the task with earliest ETA . leaseTime is in seconds . The number of tasks fetched will be at most maxTasks .
4696	Purge removes all tasks from a queue .
4697	ModifyLease modifies the lease of a task . Used to request more processing time or to abandon processing . leaseTime is in seconds and must not be negative .
4698	QueueStats retrieves statistics about queues .
4699	IsTimeoutError reports whether err is a timeout error .
4700	Func declares a new Function . The second argument must be a function with a first argument of type context . Context . This function must be called at program initialization time . That means it must be called in a global variable declaration or from an init function . This restriction is necessary because the instance that delays a function call may not be the one that executes it . Only the code executed at program initialization time is guaranteed to have been run by an instance before it receives a request .
4701	Task creates a Task that will invoke the function . Its parameters may be tweaked before adding it to a queue . Users should not modify the Path or Payload fields of the returned Task .
4702	Request returns the special task - queue HTTP request headers for the current task queue handler . Returns an error if called from outside a delay . Func .
4703	WithContext returns a copy of the parent context and associates it with an in - flight HTTP request . This function is cheap .
4704	WithAPICallFunc returns a copy of the parent context that will cause API calls to invoke f instead of their normal operation . This is intended for advanced users only .
4705	APICall performs an API call . This is not intended for general use ; it is exported for use in conjunction with WithAPICallFunc .
4706	ModuleHostname returns a hostname of a module instance . If module is the empty string it refers to the module of the current instance . If version is empty it refers to the version of the current instance if valid or the default version of the module of the current instance . If instance is empty ModuleHostname returns the load - balancing hostname .
4707	AccessToken generates an OAuth2 access token for the specified scopes on behalf of service account of this application . This token will expire after the returned time .
4708	PublicCertificates retrieves the public certificates for the app . They can be used to verify a signature returned by SignBytes .
4709	ServiceAccount returns a string representing the service account name in the form of an email address ( typically app_id
4710	SignBytes signs bytes using a private key unique to your application .
4711	fetch fetches readBufferSize bytes starting at the given offset . On success the data is saved as r . buf .
4712	seek seeks to the given offset with an effective whence equal to SEEK_SET . It discards the read buffer if the invariant cannot be maintained .
4713	multiKeyToProto is a batch version of keyToProto .
4714	It s unfortunate that the two semantically equivalent concepts pb . Reference and pb . PropertyValue_ReferenceValue aren t the same type . For example the two have different protobuf field numbers . referenceValueToKey is the same as protoToKey except the input is a PropertyValue_ReferenceValue instead of a Reference .
4715	keyToReferenceValue is the same as keyToProto except the output is a PropertyValue_ReferenceValue instead of a Reference .
4716	Put saves the entity src into the datastore with key k . src must be a struct pointer or implement PropertyLoadSaver ; if a struct pointer then any unexported fields of that struct will be skipped . If k is an incomplete key the returned key will be a unique key generated by the datastore .
4717	PutMulti is a batch version of Put . src must satisfy the same conditions as the dst argument to GetMulti .
4718	Delete deletes the entity for the given key .
4719	DeleteMulti is a batch version of Delete .
4720	deploy calls the provided command to deploy the app from the temporary directory .
4721	Next returns the next log record
4722	protoToAppLogs takes as input an array of pointers to LogLines the internal Protocol Buffer representation of a single application - level log and converts it to an array of AppLogs the external representation of an application - level log .
4723	protoToRecord converts a RequestLog the internal Protocol Buffer representation of a single request - level log to a Record its corresponding external representation .
4724	Run starts a query for log records which contain request and application level log information .
4725	run takes the query Result produced by a call to Run and updates it with more Records . The updated Result contains a new set of logs as well as an offset to where more logs can be found . We also convert the items in the response from their internal representations to external versions of the same structs .
4726	Current returns the currently logged - in user or nil if the user is not signed in .
4727	IsAdmin returns true if the current user is signed in and is currently registered as an administrator of the application .
4728	isErrFieldMismatch returns whether err is a datastore . ErrFieldMismatch . The blobstore stores blob metadata in the datastore . When loading that metadata it may contain fields that we don t care about . datastore . Get will return datastore . ErrFieldMismatch in that case so we ignore that specific error .
4729	Stat returns the BlobInfo for a provided blobKey . If no blob was found for that key Stat returns datastore . ErrNoSuchEntity .
4730	Send sets the headers on response to instruct App Engine to send a blob as the response body . This is more efficient than reading and writing it out manually and isn t subject to normal response size limits .
4731	UploadURL creates an upload URL for the form that the user will fill out passing the application path to load when the POST of the form is completed . These URLs expire and should not be reused . The opts parameter may be nil .
4732	Delete deletes a blob .
4733	DeleteMulti deletes multiple blobs .
4734	NewReader returns a reader for a blob . It always succeeds ; if the blob does not exist then an error will be reported upon first read .
4735	Handle arranges for f to be called for incoming XMPP messages . Only messages of type chat or normal will be handled .
4736	Send sends a message . If any failures occur with specific recipients the error will be an appengine . MultiError .
4737	Invite sends an invitation . If the from address is an empty string the default ( yourapp
4738	Send sends a presence update .
4739	GetPresence retrieves a user s presence . If the from address is an empty string the default ( yourapp
4740	GetPresenceMulti retrieves multiple users presence . If the from address is an empty string the default ( yourapp
4741	newStructFLS returns a FieldLoadSaver for the struct pointer p .
4742	SaveStruct returns the fields from src as a slice of Field . src must be a struct pointer .
4743	Namespaces returns all the datastore namespaces .
4744	Kinds returns the names of all the kinds in the current namespace .
4745	RunInTransaction runs f in a transaction . It calls f with a transaction context tc that f should use for all App Engine operations . If f returns nil RunInTransaction attempts to commit the transaction returning nil if it succeeds . If the commit fails due to a conflicting transaction RunInTransaction retries f each time with a new transaction context . It gives up and returns ErrConcurrentTransaction after three failed attempts . The number of attempts can be configured by specifying TransactionOptions . Attempts . If f returns non - nil then any datastore changes will not be applied and RunInTransaction returns that same error . The function f is not retried . Note that when f returns the transaction is not yet committed . Calling code must be careful not to assume that any of f s changes have been committed until RunInTransaction returns nil . Since f may be called multiple times f should usually be idempotent . datastore . Get is not idempotent when unmarshaling slice fields . Nested transactions are not supported ; c may not be a transaction context .
4746	imports returns true if f imports path .
4747	importSpec returns the import spec if f imports path or nil otherwise .
4748	declImports reports whether gen contains an import of path .
4749	isPkgDot returns true if t is the expression pkg . name where pkg is an imported identifier .
4750	isTopName returns true if n is a top - level unresolved identifier with the given name .
4751	isName returns true if n is an identifier with the given name .
4752	isCall returns true if t is a call to pkg . name .
4753	refersTo returns true if n is a reference to the same object as x .
4754	isEmptyString returns true if n is an empty string literal .
4755	countUses returns the number of uses of the identifier x in scope .
4756	assignsTo returns true if any of the code in scope assigns to or takes the address of x .
4757	newPkgDot returns an ast . Expr referring to pkg . name at position pos .
4758	renameTop renames all references to the top - level name old . It returns true if it makes any changes .
4759	matchLen returns the length of the longest prefix shared by x and y .
4760	deleteImport deletes the import path from the file f if present .
4761	rewriteImport rewrites any import of path oldPath to path newPath .
4762	DefaultTicket returns a ticket used for background context or dev_appserver .
4763	flushLog attempts to flush any pending logs to the appserver . It should not be called concurrently .
4764	withDeadline is like context . WithDeadline except it ignores the zero deadline .
4765	KeepAlive signals that the connection is still in use . It may be called to prevent the socket being closed due to inactivity .
4766	applyTransaction applies the transaction t to message pb by using the relevant setter passed to RegisterTransactionSetter .
4767	analyze checks the app for building with the given build tags and returns hasMain app files and a map of full directory import names to original import names .
4768	buildContext returns the context for building the source .
4769	synthesizeMain generates a new main func and writes it to the tarball .
4770	findInGopath searches the gopath for the named import directory .
4771	copyTree copies srcDir to tar file dstDir ignoring skipFiles .
4772	copyFile copies src to tar file dst .
4773	checkMain verifies that there is a single main function . It also returns a list of all Go source files in the app .
4774	isMain returns whether the given function declaration is a main function . Such a function must be called main not have a receiver and have no arguments or return types .
4775	readFile reads and parses the Go source code file and returns whether it has a main function .
4776	initField is similar to reflect s Value . FieldByIndex in that it returns the nested struct field corresponding to index but it initialises any nil pointers encountered when traversing the structure .
4777	loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer .
4778	validIndexNameOrDocID is the Go equivalent of Python s _ValidateVisiblePrintableAsciiNotReserved .
4779	Open opens the index with the given name . The index is created if it does not already exist . The name is a human - readable ASCII string . It must contain no whitespace characters and not start with ! .
4780	Put saves src to the index . If id is empty a new ID is allocated by the service and returned . If id is not empty any existing index entry for that ID is replaced . The ID is a human - readable ASCII string . It must contain no whitespace characters and not start with ! . src must be a non - nil struct pointer or implement the FieldLoadSaver interface .
4781	Get loads the document with the given ID into dst . The ID is a human - readable ASCII string . It must be non - empty contain no whitespace characters and not start with ! . dst must be a non - nil struct pointer or implement the FieldLoadSaver interface . ErrFieldMismatch is returned when a field is to be loaded into a different type than the one it was stored from or when a field is missing or unexported in the destination struct . ErrFieldMismatch is only returned if dst is a struct pointer . It is up to the callee to decide whether this error is fatal recoverable or ignorable .
4782	Delete deletes a document from the index .
4783	DeleteMulti deletes multiple documents from the index . The returned error may be an instance of appengine . MultiError in which case it will be the same size as srcs and the individual errors inside will correspond with the items in srcs .
4784	Search searches the index for the given query .
4785	fetchMore retrieves more results if there are no errors or pending results .
4786	Next returns the ID of the next result . When there are no more results Done is returned as the error . dst must be a non - nil struct pointer implement the FieldLoadSaver interface or be a nil interface value . If a non - nil dst is provided it will be filled with the indexed fields . dst is ignored if this iterator was created with an IDsOnly option .
4787	Facets returns the facets found within the search results if any facets were requested in the SearchOptions .
4788	DefaultBucketName returns the name of this application s default Google Cloud Storage bucket .
4789	valid returns whether the key is valid .
4790	Equal returns whether two keys are equal .
4791	root returns the furthest ancestor of a key which may be itself .
4792	marshal marshals the key s string representation to the buffer .
4793	String returns a string representation of the key .
4794	Encode returns an opaque representation of the key suitable for use in HTML and URLs . This is compatible with the Python and Java runtimes .
4795	DecodeKey decodes a key from the opaque representation returned by Encode .
4796	NewIncompleteKey creates a new incomplete key . kind cannot be empty .
4797	NewKey creates a new key . kind cannot be empty . Either one or both of stringID and intID must be zero . If both are zero the key returned is incomplete . parent must either be a complete key or nil .
4798	AllocateIDs returns a range of n integer IDs with the given kind and parent combination . kind cannot be empty ; parent may be nil . The IDs in the range returned will not be used by the datastore s automatic ID sequence generator and may be used with NewKey without conflict . The range is inclusive at the low end and exclusive at the high end . In other words valid intIDs x satisfy low < = x && x < high . If no error is returned low + n == high .
4799	IsOverQuota reports whether err represents an API call failure due to insufficient available quota .
4800	This is only for classic App Engine adapters .
4801	Send sends an email message .
4802	SendToAdmins sends an email message to the application s administrators .
4803	Failures counts the number of failed tests in this report
4804	Read field key .
4805	Error if typ doesn t match rt .
4806	Read typ3 byte .
4807	Copy into PrefixBytes
4808	A heuristic to guess the size of a registered type and return it as a string . If the size is not fixed it returns variable .
4809	Find all conflicting prefixes for concrete types that implement the interface . Implement in quotes because we only consider the pointer for extra safety .
4810	Ensure that prefix - conflicting implementing concrete types are all registered in the priority list . Returns an error if a disamb conflict is found .
4811	constructConcreteType creates the concrete value as well as the corresponding settable value for it . Return irvSet which should be set on caller s interface rv .
4812	MarshalBinaryLengthPrefixedWriter writes the bytes as would be returned from MarshalBinaryLengthPrefixed to the writer w .
4813	MarshalBinaryBare encodes the object o according to the Amino spec . MarshalBinaryBare doesn t prefix the byte - length of the encoding so the caller must handle framing .
4814	Like UnmarshalBinaryBare but will first decode the byte - length prefix . UnmarshalBinaryLengthPrefixed will panic if ptr is a nil - pointer . Returns an error if not all of bz is consumed .
4815	UnmarshalBinaryBare will panic if ptr is a nil - pointer .
4816	MustMarshalJSON panics if an error occurs . Besides tha behaves exactly like MarshalJSON .
4817	MustUnmarshalJSON panics if an error occurs . Besides tha behaves exactly like UnmarshalJSON .
4818	MarshalJSONIndent calls json . Indent on the output of cdc . MarshalJSON using the given prefix and indent string .
4819	newDataReader creates a new DataReader reading from r .
4820	Read reads the TELNET escaped data from the wrapped io . Reader and un - escapes it into data .
4821	ListenAndServeTLS acts identically to ListenAndServe except that it uses the TELNET protocol over TLS . From a TELNET protocol point - of - view it allows for secured telnet also known as TELNETS which by default listens to port 992 .
4822	Produce makes ProducerFunc fit the Producer interface .
4823	PromoteHandlerFunc turns a HandlerFunc into a Handler .
4824	Serve accepts an incoming TELNET or TELNETS client connection on the net . Listener listener .
4825	Serve accepts an incoming TELNET client connection on the net . Listener listener .
4826	Fail prints usage information to stderr and exits with non - zero status
4827	WriteUsage writes usage information to the given writer
4828	WriteHelp writes the usage string followed by the full help string for each option
4829	MustParse processes command line arguments and exits upon failure
4830	Parse processes command line arguments and stores them in dest
4831	walkFields calls a function for each field of a struct recursively expanding struct fields .
4832	Parse processes the given command line option storing the results in the field of the structs from which NewParser was constructed
4833	parse a value as the appropriate type and store it in the struct
4834	canParse returns true if the type can be parsed from a string
4835	isBoolean returns true if the type can be parsed from a single string
4836	NewFromMap returns a new tree containing the keys from an existing map
4837	Insert is used to add a newentry or update an existing entry . Returns if updated .
4838	Delete is used to delete a key returning the previous value and if it was deleted
4839	DeletePrefix is used to delete the subtree under a prefix Returns how many nodes were deleted Use this to delete large subtrees efficiently
4840	delete does a recursive deletion
4841	Get is used to lookup a specific key returning the value and if it was found
4842	LongestPrefix is like Get but instead of an exact match it will return the longest prefix match .
4843	Minimum is used to return the minimum value in the tree
4844	WalkPrefix is used to walk the tree under a prefix
4845	recursiveWalk is used to do a pre - order walk of a node recursively . Returns true if the walk should be aborted
4846	ToMap is used to walk the tree and convert it into a map
4847	get IP type and calculate IP number ; calculates index too if exists
4848	read unsigned 32 - bit integer
4849	read unsigned 128 - bit integer
4850	populate record with message
4851	for debugging purposes
4852	Main draws a left hand and ear of a gopher . Afterwards it returns the filename . This should only be used during testing .
4853	SaveToPdfFile creates and saves a pdf document to a file
4854	CubicCurveTo adds a cubic bezier curve to the current path
4855	ArcTo adds an arc to the path
4856	String returns a debug text view of the path
4857	Returns new Path with flipped y axes
4858	NewGlyphCache initializes a GlyphCache
4859	Fetch fetches a glyph from the cache calling renderGlyph first if it doesn t already exist
4860	renderGlyph renders a glyph then caches and returns it
4861	Copy Returns a copy of a Glyph
4862	Fill copies a glyph from the cache and fills it
4863	Main draws vertically spaced lines and returns the filename . This should only be used during testing .
4864	Draw vertically spaced lines
4865	Paint satisfies the Painter interface by painting ss onto an image . RGBA .
4866	SetColor sets the color to paint the spans .
4867	NewRGBAPainter creates a new RGBAPainter for the given image .
4868	GetStringBounds returns the approximate pixel bounds of the string s at x y . The the left edge of the em square of the first character of s and the baseline intersect at 0 0 in the returned coordinates . Therefore the top and left coordinates may well be negative .
4869	recalc recalculates scale and bounds values from the font size screen resolution and font metrics and invalidates the glyph cache .
4870	SetFont sets the font used to draw text .
4871	ClearRect fills the specified rectangle with a default transparent color
4872	Add text element to svg and returns its expected width
4873	Creates new group from current context attach it to svg and return
4874	creates new mask attached to svg
4875	Embed svg font definition to svg tree itself Or update existing if already exists for curent font data
4876	TraceQuad generate lines subdividing the curve using a Liner flattening_threshold helps determines the flattening expectation of the curve
4877	GetFontName gets the current FontData with fontSize as a string
4878	Create a new Graphic context from an image
4879	NewFolderFontCache creates FolderFontCache
4880	NewSyncFolderFontCache creates SyncFolderFontCache
4881	Main draws a rotated face of the gopher . Afterwards it returns the filename . This should only be used during testing .
4882	NewPdf creates a new pdf document with the draw2d fontfolder adds a page and set fill color to white .
4883	clearRect draws a white rectangle
4884	NewGraphicContext creates a new pdf GraphicContext
4885	Clear draws a white rectangle over the whole page
4886	GetStringBounds returns the approximate pixel bounds of the string s at x y . The left edge of the em square of the first character of s and the baseline intersect at 0 0 in the returned coordinates . Therefore the top and left coordinates may well be negative .
4887	CreateStringPath creates a path from the string s at x y and returns the string width .
4888	FillStringAt draws a string at x y
4889	overwrite StackGraphicContext methods SetStrokeColor sets the stroke color
4890	SetFillColor sets the fill and text color
4891	SetLineDash sets the line dash pattern
4892	SetLineWidth sets the line width
4893	Main draws Hello World and returns the filename . This should only be used during testing .
4894	Draw Hello World
4895	SaveToPngFile create and save an image to a file using PNG format
4896	LoadFromPngFile Open a png file
4897	Resource returns a resource filename for testing .
4898	Output returns the output filename for testing .
4899	Main draws the tiger
4900	Draw a tiger
4901	Main draws geometry and returns the filename . This should only be used during testing .
4902	Bubble draws a text balloon .
4903	Dash draws a line with a dash pattern
4904	CubicCurve draws a cubic curve with its control points .
4905	FillStroke first fills and afterwards strokes a path .
4906	FillStyle demonstrates the difference between even odd and non zero winding rule .
4907	PathTransform scales a path differently in horizontal and vertical direction .
4908	Star draws many lines from a center .
4909	Draw all figures in a nice 4x3 grid .
4910	ConvertPath converts a paths to the pdf api
4911	Main draws the different line caps and joins . This should only be used during testing .
4912	Draw a line with an angle with specified line cap and join
4913	DrawContour draws the given closed contour at the given sub - pixel offset .
4914	Flatten convert curves into straight segments keeping join segments info
4915	Clear fills the current canvas with a default transparent color
4916	ClearRect fills the current canvas with a default transparent color at the specified rectangle
4917	DrawImage draws an image into dest using an affine transformation matrix an op and a filter
4918	Main draws the image frame and returns the filename . This should only be used during testing .
4919	Draw the image frame with certain parameters .
4920	Draw the droid on a certain position .
4921	ChecksumString32S returns the checksum of the input data without creating a copy with the specific seed .
4922	ChecksumString64S returns the checksum of the input data without creating a copy with the specific seed .
4923	NewS32 creates a new hash . Hash32 computing the 32bit xxHash checksum starting with the specific seed .
4924	NewS64 creates a new hash . Hash64 computing the 64bit xxHash checksum starting with the specific seed .
4925	borrowed from cespare
4926	Checksum32S returns the checksum of the input bytes with the specific seed .
4927	Checksum64S returns the 64bit xxhash checksum for a single input
4928	Returns the current stage in the daemonization process that s kept in an environment variable . The variable is instrumented with a digital signature to avoid misbehavior if it was present in the user s environment . The original value is restored after the last stage so that there s no final effect on the environment the application receives .
4929	New returns plain glg instance
4930	Get returns singleton glg instance
4931	SetMode sets glg logging mode
4932	SetPrefix set Print logger prefix
4933	GetCurrentMode returns current logging mode
4934	InitWriter is initialize glg writer
4935	SetWriter sets writer to glg std writers
4936	SetLevelColor sets the color for each level
4937	SetLevelWriter sets writer to glg std writer per logging level
4938	AddStdLevel adds std log level and returns LEVEL
4939	EnableColor enables color output
4940	EnableLevelColor enables color output
4941	DisableLevelColor disables color output
4942	RawString returns raw log string exclude time & tags
4943	TagStringToLevel converts level string to Glg . LEVEL
4944	Println outputs fixed line Print log
4945	Fatal outputs Failed log and exit program
4946	Fatalf outputs formatted Failed log and exit program
4947	isModeEnable returns the level has already turned on the logging
4948	CaptureMetrics wraps the given hnd executes it with the given w and r and returns the metrics it captured from it .
4949	Get value by key insert the key if not exist
4950	Save saves the cedar to an io . Writer where dataType is either json or gob .
4951	SaveToFile saves the cedar to a file where dataType is either json or gob .
4952	Load loads the cedar from an io . Writer where dataType is either json or gob .
4953	LoadFromFile loads the cedar from a file where dataType is either json or gob .
4954	Key returns the key of the node with the given id . It will return ErrNoPath if the node does not exist .
4955	Value returns the value of the node with the given id . It will return ErrNoValue if the node does not have a value .
4956	Delete removes a key - value pair from the cedar . It will return ErrNoPath if the key has not been added .
4957	Set parses and updates v from the given version string . Implements flag . Value
4958	Compare tests if v is less than equal to or greater than versionB returning - 1 0 or + 1 respectively .
4959	Slice converts the comparable parts of the semver into a slice of integers .
4960	BumpMajor increments the Major field by 1 and resets all other fields to their default values
4961	BumpMinor increments the Minor field by 1 and resets all other fields to their default values
4962	BumpPatch increments the Patch field by 1 and resets all other fields to their default values
4963	validateIdentifier makes sure the provided identifier satisfies semver spec
4964	newStream returns a new stream
4965	addSubscriber will create a new subscriber on a stream
4966	New will create a server and setup defaults
4967	Close shuts down the server closes all of the streams and connections
4968	CreateStream will create a new stream and register it
4969	RemoveStream will remove a stream
4970	StreamExists checks whether a stream by a given id exists
4971	Publish sends a mesage to every client in a streamID
4972	NewClient creates a new client
4973	Subscribe to a data stream
4974	SubscribeChan sends all events to the provided channel
4975	SubscribeRaw to an sse endpoint
4976	Unsubscribe unsubscribes a channel
4977	NewEventStreamReader creates an instance of EventStreamReader .
4978	ReadEvent scans the EventStream for events .
4979	HTTPHandler serves new connections with events for a given stream ...
4980	Add event to eventlog
4981	Replay events to a subscriber
4982	readKey reads a private rsa key from path . The key is expected to be in PEM format .
4983	writeKey writes k to the specified path in PEM format . If file does not exists it will be created with 0600 mod .
4984	anyKey reads the key from file or generates a new one if gen == true . It returns an error if filename exists but cannot be read . A newly generated key is also stored to filename .
4985	sameDir returns filename path placing it in the same dir as existing file .
4986	printAccount outputs account into into w using tabwriter .
4987	tmpl executes the given template text on data writing the result to w .
4988	printUsage prints usageTemplate to w .
4989	FromRequest return client s real public IP address from http request headers .
4990	Do executes DOMStorage . clear against the provided context .
4991	Do executes DOMStorage . disable against the provided context .
4992	Do executes DOMStorage . removeDOMStorageItem against the provided context .
4993	Do executes DOMStorage . setDOMStorageItem against the provided context .
4994	Do executes ServiceWorker . deliverPushMessage against the provided context .
4995	Do executes ServiceWorker . dispatchSyncEvent against the provided context .
4996	Do executes ServiceWorker . inspectWorker against the provided context .
4997	Do executes ServiceWorker . setForceUpdateOnPageLoad against the provided context .
4998	Do executes ServiceWorker . skipWaiting against the provided context .
4999	Do executes ServiceWorker . startWorker against the provided context .
5000	Do executes ServiceWorker . stopAllWorkers against the provided context .
5001	Do executes ServiceWorker . stopWorker against the provided context .
5002	Do executes ServiceWorker . unregister against the provided context .
5003	Do executes ServiceWorker . updateRegistration against the provided context .
5004	Do executes Tethering . bind against the provided context .
5005	Do executes Tethering . unbind against the provided context .
5006	Error satisfies the error interface .
5007	Do executes Animation . releaseAnimations against the provided context .
5008	Do executes Animation . seekAnimations against the provided context .
5009	Do executes Animation . setPaused against the provided context .
5010	Do executes Animation . setPlaybackRate against the provided context .
5011	Do executes Animation . setTiming against the provided context .
5012	Do executes Memory . prepareForLeakDetection against the provided context .
5013	Do executes Memory . forciblyPurgeJavaScriptMemory against the provided context .
5014	Do executes Memory . setPressureNotificationsSuppressed against the provided context .
5015	Do executes Memory . simulatePressureNotification against the provided context .
5016	WithSamplingInterval average number of bytes between samples .
5017	WithSuppressRandomness do not randomize intervals between samples .
5018	Do executes Memory . startSampling against the provided context .
5019	Do executes Memory . stopSampling against the provided context .
5020	Do executes DeviceOrientation . clearDeviceOrientationOverride against the provided context .
5021	Do executes DeviceOrientation . setDeviceOrientationOverride against the provided context .
5022	Do executes Log . startViolationsReport against the provided context .
5023	Do executes Log . stopViolationsReport against the provided context .
5024	String returns the Modifier as string value .
5025	WithNodeID identifier of the node to get the partial accessibility tree for .
5026	WithBackendNodeID identifier of the backend node to get the partial accessibility tree for .
5027	WithObjectID JavaScript object id of the node wrapper to get the partial accessibility tree for .
5028	WithFetchRelatives whether to fetch this nodes ancestors siblings and children . Defaults to true .
5029	Do executes Performance . setTimeDomain against the provided context .
5030	WithClipRect the clip rectangle to apply when replaying the snapshot .
5031	Do executes LayerTree . releaseSnapshot against the provided context .
5032	Do executes IndexedDB . clearObjectStore against the provided context .
5033	Do executes IndexedDB . deleteDatabase against the provided context .
5034	Do executes IndexedDB . deleteObjectStoreEntries against the provided context .
5035	WithKeyRange key range .
5036	Do executes Profiler . setSamplingInterval against the provided context .
5037	Do executes Profiler . start against the provided context .
5038	WithCallCount collect accurate call counts beyond simple covered or not covered .
5039	WithDetailed collect block - based coverage .
5040	Do executes Profiler . startPreciseCoverage against the provided context .
5041	Do executes Profiler . startTypeProfile against the provided context .
5042	Do executes Profiler . stopPreciseCoverage against the provided context .
5043	Do executes Profiler . stopTypeProfile against the provided context .
5044	Do executes Security . setIgnoreCertificateErrors against the provided context .
5045	Do executes HeapProfiler . addInspectedHeapObject against the provided context .
5046	Do executes HeapProfiler . collectGarbage against the provided context .
5047	WithSamplingInterval average sample interval in bytes . Poisson distribution is used for the intervals . The default value is 32768 bytes .
5048	Do executes HeapProfiler . startTrackingHeapObjects against the provided context .
5049	WithReportProgress if true reportHeapSnapshotProgress events will be generated while snapshot is being taken when the tracking is stopped .
5050	Do executes HeapProfiler . stopTrackingHeapObjects against the provided context .
5051	WithReportProgress if true reportHeapSnapshotProgress events will be generated while snapshot is being taken .
5052	Do executes HeapProfiler . takeHeapSnapshot against the provided context .
5053	WithBrowserContextID browserContext to override permissions . When omitted default browser context is used .
5054	Do executes Browser . grantPermissions against the provided context .
5055	WithBrowserContextID browserContext to reset permissions . When omitted default browser context is used .
5056	Do executes Browser . resetPermissions against the provided context .
5057	Do executes Browser . crash against the provided context .
5058	Do executes Browser . crashGpuProcess against the provided context .
5059	WithQuery requested substring in name . Only histograms which have query as a substring in their name are extracted . An empty or absent query returns all histograms .
5060	WithTargetID devtools agent host id . If called as a part of the session associated targetId is used .
5061	Do executes Browser . setWindowBounds against the provided context .
5062	WithImage png encoded image .
5063	Do executes Browser . setDockTile against the provided context .
5064	Do executes CacheStorage . deleteCache against the provided context .
5065	Do executes CacheStorage . deleteEntry against the provided context .
5066	WithPathFilter if present only return the entries containing this substring in the path .
5067	Do executes DOM . discardSearchResults against the provided context .
5068	Do executes DOM . focus against the provided context .
5069	Do executes DOM . markUndoableState against the provided context .
5070	WithIncludeUserAgentShadowDOM true to search in user agent shadow DOM .
5071	Do executes DOM . redo against the provided context .
5072	Do executes DOM . removeAttribute against the provided context .
5073	Do executes DOM . removeNode against the provided context .
5074	Do executes DOM . requestChildNodes against the provided context .
5075	WithNodeID ID of the node to resolve .
5076	WithBackendNodeID backend identifier of the node to resolve .
5077	WithExecutionContextID execution context in which to resolve the node .
5078	Do executes DOM . setAttributeValue against the provided context .
5079	WithName attribute name to replace with new attributes derived from text in case text parsed successfully .
5080	Do executes DOM . setAttributesAsText against the provided context .
5081	Do executes DOM . setFileInputFiles against the provided context .
5082	Do executes DOM . setInspectedNode against the provided context .
5083	Do executes DOM . setNodeValue against the provided context .
5084	Do executes DOM . setOuterHTML against the provided context .
5085	Do executes DOM . undo against the provided context .
5086	Do executes CSS . forcePseudoState against the provided context .
5087	Do executes CSS . setEffectivePropertyValueForNode against the provided context .
5088	Do executes CSS . startRuleUsageTracking against the provided context .
5089	Do executes IO . close against the provided context .
5090	Do executes Storage . clearDataForOrigin against the provided context .
5091	Do executes Storage . trackCacheStorageForOrigin against the provided context .
5092	Do executes Storage . trackIndexedDBForOrigin against the provided context .
5093	Do executes Storage . untrackCacheStorageForOrigin against the provided context .
5094	Do executes Storage . untrackIndexedDBForOrigin against the provided context .
5095	Do executes Overlay . hideHighlight against the provided context .
5096	Do executes Overlay . highlightFrame against the provided context .
5097	WithNodeID identifier of the node to highlight .
5098	WithBackendNodeID identifier of the backend node to highlight .
5099	WithObjectID JavaScript object id of the node to be highlighted .
5100	WithSelector selectors to highlight relevant nodes .
5101	Do executes Overlay . highlightNode against the provided context .
5102	Do executes Overlay . highlightQuad against the provided context .
5103	Do executes Overlay . highlightRect against the provided context .
5104	WithHighlightConfig a descriptor for the highlight appearance of hovered - over nodes . May be omitted if enabled == false .
5105	Do executes Overlay . setInspectMode against the provided context .
5106	Do executes Overlay . setShowAdHighlights against the provided context .
5107	WithMessage the message to display also triggers resume and step over controls .
5108	Do executes Overlay . setPausedInDebuggerMessage against the provided context .
5109	Do executes Overlay . setShowDebugBorders against the provided context .
5110	Do executes Overlay . setShowFPSCounter against the provided context .
5111	Do executes Overlay . setShowPaintRects against the provided context .
5112	Do executes Overlay . setShowScrollBottleneckRects against the provided context .
5113	Do executes Overlay . setShowHitTestBorders against the provided context .
5114	Do executes Overlay . setShowViewportSizeOnResize against the provided context .
5115	Do executes Network . clearBrowserCache against the provided context .
5116	Do executes Network . clearBrowserCookies against the provided context .
5117	WithErrorReason if set this causes the request to fail with the given reason . Passing Aborted for requests marked with isNavigationRequest also cancels the navigation . Must not be set in response to an authChallenge .
5118	WithRawResponse if set the requests completes using with the provided base64 encoded raw response including HTTP status line and headers etc ... Must not be set in response to an authChallenge .
5119	WithURL if set the request url will be modified in a way that s not observable by page . Must not be set in response to an authChallenge .
5120	WithMethod if set this allows the request method to be overridden . Must not be set in response to an authChallenge .
5121	WithPostData if set this allows postData to be set . Must not be set in response to an authChallenge .
5122	WithHeaders if set this allows the request headers to be changed . Must not be set in response to an authChallenge .
5123	WithAuthChallengeResponse response to a requestIntercepted with an authChallenge . Must not be set otherwise .
5124	Do executes Network . continueInterceptedRequest against the provided context .
5125	WithURL if specified deletes all the cookies with the given name where domain and path match provided URL .
5126	WithDomain if specified deletes only cookies with the exact domain .
5127	WithPath if specified deletes only cookies with the exact path .
5128	Do executes Network . deleteCookies against the provided context .
5129	WithConnectionType connection type if known .
5130	Do executes Network . emulateNetworkConditions against the provided context .
5131	Do executes Network . enable against the provided context .
5132	WithUrls the list of URLs for which applicable cookies will be fetched .
5133	Do executes Network . replayXHR against the provided context .
5134	Do executes Network . setBlockedURLs against the provided context .
5135	Do executes Network . setBypassServiceWorker against the provided context .
5136	Do executes Network . setCacheDisabled against the provided context .
5137	WithURL the request - URI to associate with the setting of the cookie . This value can affect the default domain and path values of the created cookie .
5138	WithDomain cookie domain .
5139	WithPath cookie path .
5140	WithSecure true if cookie is secure .
5141	WithHTTPOnly true if cookie is http - only .
5142	WithSameSite cookie SameSite type .
5143	WithExpires cookie expiration date session cookie if not set .
5144	Do executes Network . setCookies against the provided context .
5145	Do executes Network . setDataSizeLimitsForTest against the provided context .
5146	Do executes Network . setExtraHTTPHeaders against the provided context .
5147	Do executes Network . setRequestInterception against the provided context .
5148	Do executes Emulation . clearDeviceMetricsOverride against the provided context .
5149	Do executes Emulation . clearGeolocationOverride against the provided context .
5150	Do executes Emulation . resetPageScaleFactor against the provided context .
5151	Do executes Emulation . setFocusEmulationEnabled against the provided context .
5152	Do executes Emulation . setCPUThrottlingRate against the provided context .
5153	WithColor rGBA of the default background color . If not specified any existing override will be cleared .
5154	Do executes Emulation . setDefaultBackgroundColorOverride against the provided context .
5155	WithScale scale to apply to resulting view image .
5156	WithDontSetVisibleSize do not set visible view size rely upon explicit setVisibleSize call .
5157	WithScreenOrientation screen orientation override .
5158	Do executes Emulation . setDeviceMetricsOverride against the provided context .
5159	Do executes Emulation . setScrollbarsHidden against the provided context .
5160	Do executes Emulation . setDocumentCookieDisabled against the provided context .
5161	Do executes Emulation . setEmitTouchEventsForMouse against the provided context .
5162	Do executes Emulation . setEmulatedMedia against the provided context .
5163	WithLatitude mock latitude .
5164	WithLongitude mock longitude .
5165	WithAccuracy mock accuracy .
5166	Do executes Emulation . setGeolocationOverride against the provided context .
5167	Do executes Emulation . setPageScaleFactor against the provided context .
5168	Do executes Emulation . setScriptExecutionDisabled against the provided context .
5169	WithMaxTouchPoints maximum touch points supported . Defaults to one .
5170	Do executes Emulation . setTouchEmulationEnabled against the provided context .
5171	WithBudget if set after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent .
5172	WithMaxVirtualTimeTaskStarvationCount if set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock .
5173	WithWaitForNavigation if set the virtual time policy change should be deferred until any frame starts navigating . Note any previous deferred policy change is superseded .
5174	WithAcceptLanguage browser langugage to emulate .
5175	WithPlatform the platform navigator . platform should return .
5176	Do executes Emulation . setUserAgentOverride against the provided context .
5177	Do executes Input . dispatchKeyEvent against the provided context .
5178	Do executes Input . insertText against the provided context .
5179	WithButtons a number indicating which buttons are pressed on the mouse when a mouse event is triggered . Left = 1 Right = 2 Middle = 4 Back = 8 Forward = 16 None = 0 .
5180	Do executes Input . dispatchMouseEvent against the provided context .
5181	Do executes Input . dispatchTouchEvent against the provided context .
5182	Do executes Input . emulateTouchFromMouseEvent against the provided context .
5183	Do executes Input . setIgnoreInputEvents against the provided context .
5184	Do executes Input . synthesizePinchGesture against the provided context .
5185	WithXOverscroll the number of additional pixels to scroll back along the X axis in addition to the given distance .
5186	WithYOverscroll the number of additional pixels to scroll back along the Y axis in addition to the given distance .
5187	Do executes Input . synthesizeScrollGesture against the provided context .
5188	Do executes Input . synthesizeTapGesture against the provided context .
5189	Domain returns the Chrome DevTools Protocol domain of the event or command .
5190	WithDepth the maximum depth at which Node children should be retrieved defaults to 1 . Use - 1 for the entire subtree or provide an integer larger than 0 .
5191	Do executes DOMDebugger . removeDOMBreakpoint against the provided context .
5192	WithTargetName eventTarget interface name .
5193	Do executes DOMDebugger . removeEventListenerBreakpoint against the provided context .
5194	Do executes DOMDebugger . removeInstrumentationBreakpoint against the provided context .
5195	Do executes DOMDebugger . removeXHRBreakpoint against the provided context .
5196	Do executes DOMDebugger . setDOMBreakpoint against the provided context .
5197	Do executes DOMDebugger . setEventListenerBreakpoint against the provided context .
5198	Do executes DOMDebugger . setInstrumentationBreakpoint against the provided context .
5199	Do executes DOMDebugger . setXHRBreakpoint against the provided context .
5200	WithExecutor sets the message executor for the context .
5201	Execute uses the context s message executor to send a command or event method marshaling the provided parameters and unmarshaling to res .
5202	AttributeValue returns the named attribute for the node .
5203	xpath builds the xpath string .
5204	String returns the NodeType as string value .
5205	Do executes Cast . setSinkToUse against the provided context .
5206	Do executes Cast . startTabMirroring against the provided context .
5207	Do executes Cast . stopCasting against the provided context .
5208	Do executes BackgroundService . startObserving against the provided context .
5209	Do executes BackgroundService . stopObserving against the provided context .
5210	Do executes BackgroundService . setRecording against the provided context .
5211	Do executes BackgroundService . clearEvents against the provided context .
5212	WithObjectID identifier of the object to call function on . Either objectId or executionContextId should be specified .
5213	WithArguments call arguments . All call arguments must belong to the same JavaScript world as the target object .
5214	WithExecutionContextID specifies execution context which global object will be used to call function on . Either executionContextId or objectId should be specified .
5215	WithObjectGroup symbolic group name that can be used to release multiple objects . If objectGroup is not specified and objectId is objectGroup will be inherited from object .
5216	Do executes Runtime . discardConsoleEntries against the provided context .
5217	WithContextID specifies in which execution context to perform evaluation . If the parameter is omitted the evaluation will be performed in the context of the inspected page .
5218	WithOwnProperties if true returns properties belonging only to the element itself not to its prototype chain .
5219	WithGeneratePreview whether preview should be generated for the results .
5220	WithExecutionContextID specifies in which execution context to lookup global scope variables .
5221	WithObjectGroup symbolic group name that can be used to release the results .
5222	Do executes Runtime . releaseObject against the provided context .
5223	Do executes Runtime . releaseObjectGroup against the provided context .
5224	Do executes Runtime . runIfWaitingForDebugger against the provided context .
5225	Do executes Runtime . setCustomObjectFormatterEnabled against the provided context .
5226	Do executes Runtime . setMaxCallStackSizeToCapture against the provided context .
5227	Do executes Runtime . terminateExecution against the provided context .
5228	Do executes Runtime . addBinding against the provided context .
5229	Do executes Runtime . removeBinding against the provided context .
5230	Do executes Tracing . end against the provided context .
5231	Do executes Tracing . recordClockSyncMarker against the provided context .
5232	WithBufferUsageReportingInterval if set the agent will issue bufferUsage events at this interval specified in milliseconds .
5233	WithNoDisplayUpdates whether updates should not be committed and drawn onto the display . False by default . If true only side effects of the BeginFrame will be run such as layout and animations but any visual updates may not be visible on the display or in screenshots .
5234	WithScreenshot if set a screenshot of the frame will be captured and returned in the response . Otherwise no screenshot will be captured . Note that capturing a screenshot can fail for example during renderer initialization . In such a case no screenshot data will be returned .
5235	Do executes Page . bringToFront against the provided context .
5236	WithClip capture the screenshot of a given region only .
5237	WithFromSurface capture the screenshot from the surface rather than the view . Defaults to true .
5238	WithWorldName an optional name which is reported in the Execution Context .
5239	WithGrantUniveralAccess whether or not universal access should be granted to the isolated world . This is a powerful option use with caution .
5240	Do executes Page . resetNavigationHistory against the provided context .
5241	WithPromptText the text to enter into the dialog prompt before accepting . Used only if this is a prompt dialog .
5242	Do executes Page . handleJavaScriptDialog against the provided context .
5243	WithReferrer referrer URL .
5244	WithTransitionType intended transition type .
5245	WithFrameID frame id to navigate if not specified navigates the top frame .
5246	Do executes Page . navigateToHistoryEntry against the provided context .
5247	WithLandscape paper orientation . Defaults to false .
5248	WithDisplayHeaderFooter display header and footer . Defaults to false .
5249	WithPrintBackground print background graphics . Defaults to false .
5250	WithScale scale of the webpage rendering . Defaults to 1 .
5251	WithPaperWidth paper width in inches . Defaults to 8 . 5 inches .
5252	WithPaperHeight paper height in inches . Defaults to 11 inches .
5253	WithIgnoreInvalidPageRanges whether to silently ignore invalid but successfully parsed page ranges such as 3 - 2 . Defaults to false .
5254	WithFooterTemplate HTML template for the print footer . Should use the same format as the headerTemplate .
5255	WithPreferCSSPageSize whether or not to prefer page size as defined by css . Defaults to false in which case the content will be scaled to fit the paper size .
5256	WithScriptToEvaluateOnLoad if set the script will be injected into all frames of the inspected page after reload . Argument will be ignored if reloading dataURL origin .
5257	Do executes Page . reload against the provided context .
5258	Do executes Page . removeScriptToEvaluateOnNewDocument against the provided context .
5259	Do executes Page . screencastFrameAck against the provided context .
5260	Do executes Page . setAdBlockingEnabled against the provided context .
5261	Do executes Page . setBypassCSP against the provided context .
5262	Do executes Page . setFontFamilies against the provided context .
5263	Do executes Page . setFontSizes against the provided context .
5264	Do executes Page . setDocumentContent against the provided context .
5265	WithDownloadPath the default path to save downloaded files to . This is required if behavior is set to allow .
5266	Do executes Page . setDownloadBehavior against the provided context .
5267	Do executes Page . setLifecycleEventsEnabled against the provided context .
5268	WithFormat image compression format .
5269	WithMaxWidth maximum screenshot width .
5270	WithMaxHeight maximum screenshot height .
5271	WithEveryNthFrame send every n - th frame .
5272	Do executes Page . startScreencast against the provided context .
5273	Do executes Page . stopLoading against the provided context .
5274	Do executes Page . setWebLifecycleState against the provided context .
5275	Do executes Page . stopScreencast against the provided context .
5276	Do executes Page . setProduceCompilationCache against the provided context .
5277	Do executes Page . addCompilationCache against the provided context .
5278	Do executes Page . clearCompilationCache against the provided context .
5279	WithGroup specifies the endpoint group to deliver the report to .
5280	Do executes Page . waitForDebugger against the provided context .
5281	Do executes Target . activateTarget against the provided context .
5282	WithBindingName binding name cdp if not specified .
5283	Do executes Target . exposeDevToolsProtocol against the provided context .
5284	WithBrowserContextID the browser context to create the page in .
5285	WithSessionID session to detach .
5286	Do executes Target . detachFromTarget against the provided context .
5287	Do executes Target . disposeBrowserContext against the provided context .
5288	WithSessionID identifier of the session .
5289	Do executes Target . sendMessageToTarget against the provided context .
5290	Do executes Target . setAutoAttach against the provided context .
5291	Do executes Target . setDiscoverTargets against the provided context .
5292	Do executes Target . setRemoteLocations against the provided context .
5293	WithPatterns if specified only requests matching any of these patterns will produce fetchRequested event and will be paused until clients response . If not set all requests will be affected .
5294	WithHandleAuthRequests if true authRequired events will be issued and requests will be paused expecting a call to continueWithAuth .
5295	Do executes Fetch . failRequest against the provided context .
5296	WithBody a response body .
5297	WithResponsePhrase a textual representation of responseCode . If absent a standard phrase mathcing responseCode is used .
5298	Do executes Fetch . fulfillRequest against the provided context .
5299	WithURL if set the request url will be modified in a way that s not observable by page .
5300	WithMethod if set the request method is overridden .
5301	WithPostData if set overrides the post data in the request .
5302	WithHeaders if set overrides the request headrts .
5303	Do executes Fetch . continueRequest against the provided context .
5304	Do executes Fetch . continueWithAuth against the provided context .
5305	Do executes Debugger . continueToLocation against the provided context .
5306	WithIncludeCommandLineAPI specifies whether command line API should be available to the evaluated expression defaults to false .
5307	Do executes Debugger . pause against the provided context .
5308	Do executes Debugger . pauseOnAsyncCall against the provided context .
5309	Do executes Debugger . removeBreakpoint against the provided context .
5310	Do executes Debugger . resume against the provided context .
5311	Do executes Debugger . setAsyncCallStackDepth against the provided context .
5312	Do executes Debugger . setBlackboxPatterns against the provided context .
5313	Do executes Debugger . setBlackboxedRanges against the provided context .
5314	WithURL URL of the resources to set breakpoint on .
5315	WithURLRegex regex pattern for the URLs of the resources to set breakpoints on . Either url or urlRegex must be specified .
5316	WithScriptHash script hash of the resources to set breakpoint on .
5317	WithColumnNumber offset in the line to set breakpoint at .
5318	WithCondition expression to use as a breakpoint condition . When specified debugger will stop on the breakpoint if this expression evaluates to true .
5319	Do executes Debugger . setBreakpointsActive against the provided context .
5320	Do executes Debugger . setPauseOnExceptions against the provided context .
5321	Do executes Debugger . setReturnValue against the provided context .
5322	WithDryRun if true the change will not actually be applied . Dry run may be used to get result description without actually modifying the code .
5323	Do executes Debugger . setSkipAllPauses against the provided context .
5324	Do executes Debugger . setVariableValue against the provided context .
5325	WithBreakOnAsyncCall debugger will issue additional Debugger . paused notification if any async task is scheduled before next pause .
5326	Do executes Debugger . stepInto against the provided context .
5327	Do executes Debugger . stepOut against the provided context .
5328	Do executes Debugger . stepOver against the provided context .
5329	Listen calls ListenF if it is not null .
5330	ListenClose calls ListenCloseF if it is not null .
5331	Connected calls ConnectedF if it is not null .
5332	Disconnected calls DisconnectedF if it is not null .
5333	OpenedStream calls OpenedStreamF if it is not null .
5334	ClosedStream calls ClosedStreamF if it is not null .
5335	WithNoDial constructs a new context with an option that instructs the network to not attempt a new dial when opening a stream .
5336	GetNoDial returns true if the no dial option is set in the context .
5337	WithDialPeerTimeout returns a new context with the DialPeer timeout applied . This timeout overrides the default DialPeerTimeout and applies per - dial independently .
5338	Open opens a connection
5339	Prevpos returns the index of the element before from or - 1 if no more and from is the first in the ring . Returns - 2 on bad from position .
5340	Last returns the index of the last element or - 1 if the ring is empty .
5341	DeleteMostRecentBytes trims back the last n bytes written .
5342	constructor . NewFloat64RingBuf will allocate internally a slice of maxViewItems float64 .
5343	TwoContig returns all readable float64 but in two separate slices to avoid copying . The two slices are from the same buffer but are not contiguous . Either or both may be empty slices .
5344	Earliest returns the earliest written value v . ok will be true unless the ring is empty in which case ok will be false and v will be zero .
5345	Values returns all readable float64 in a single buffer . Calling this function might allocate a new buffer to store the elements contiguously .
5346	constructor . NewAtomicFixedSizeRingBuf will allocate internally two buffers of size maxViewInBytes .
5347	Reset quickly forgets any data stored in the ring buffer . The data is still there but the ring buffer will ignore it and overwrite those buffers as new data comes in .
5348	constructor . NewPointerRingBuf will allocate internally a slice of size sliceN
5349	TwoContig returns all readable pointers but in two separate slices to avoid copying . The two slices are from the same buffer but are not contiguous . Either or both may be empty slices .
5350	NumPage returns the number of pages in the PDF file .
5351	Font returns the font with the given name associated with the page .
5352	Width returns the width of the given code point .
5353	Encoder returns the encoding between font code point sequences and UTF - 8 .
5354	Interpret interprets the content in a stream as a basic PostScript program pushing values onto a stack and then calling the do function to execute operators . The do function may push or pop values from the stack as needed to implement op . Interpret handles the operators dict currentdict begin end def and pop itself . Interpret is not a full - blown PostScript interpreter . Its job is to handle the very limited PostScript found in certain supporting file formats embedded in PDF files such as cmap files that describe the mapping from font code points to Unicode code points . There is no support for executable blocks among other limitations .
5355	Open opens a file for reading .
5356	NewReader opens a file for reading using the data in f with the given total size .
5357	NewReaderEncrypted opens a file for reading using the data in f with the given total size . If the PDF is encrypted NewReaderEncrypted calls pw repeatedly to obtain passwords to try . If pw returns the empty string NewReaderEncrypted stops trying to decrypt the file and returns an error .
5358	Trailer returns the file s Trailer value .
5359	Kind reports the kind of value underlying v .
5360	newBuffer returns a new buffer reading from r at the given offset .
5361	Set skip + limit on the current query and generates a PaginationInfo struct with info for your front end
5362	Deletes references to a document from its related documents
5363	Runs a cascaded delete operation with one configuration
5364	Runs a cascaded save operation with one configuration
5365	If you need to you can use this to construct the data map that will be cascaded down to related documents . Doing this is not recommended unless the cascaded fields are dynamic .
5366	Connect to the database using the provided config
5367	Lower cases first char of string
5368	This doesn t actually do any DB interaction it just creates the result set so we can start looping through on the iterator
5369	RawInformationQuery sends an information query request to the server .
5370	NewClient establishes a new Client connection based on a set of Options .
5371	Close closes the XMPP connection
5372	startTlsIfRequired examines the server s stream features and if STARTTLS is required or supported performs the TLS handshake . f will be updated if the handshake completes as the new stream s features are typically different from the original .
5373	startStream will start a new XML decoder for the connection signal the start of a stream to the server and verify that the server has also started the stream ; if o . Debug is true startStream will tee decoded XML data to stderr . The features advertised by the server will be returned .
5374	IsEncrypted will return true if the client is connected using a TLS transport either because it used . TLS to connect from the outset or because it successfully used STARTTLS to promote a TCP connection to TLS .
5375	Recv waits to receive the next XMPP stanza . Return type is either a presence notification or a chat message .
5376	Send sends the message wrapped inside an XMPP message stanza body .
5377	SendOrg sends the original text without being wrapped in an XMPP message stanza .
5378	SendKeepAlive sends a whitespace keepalive as described in chapter 4 . 6 . 1 of RFC6120 .
5379	SendHtml sends the message as HTML as defined by XEP - 0071
5380	Scan XML token stream to find next StartElement .
5381	xep - 0045 7 . 2 . 6
5382	xep - 0045 7 . 14
5383	AttachBuffer attaches a binary attachment .
5384	Attach attaches a file .
5385	Inline includes a file as an inline attachment .
5386	Ads a Header to message
5387	Tolist returns all the recipients of the email
5388	Bytes returns the mail data
5389	Send sends the message .
5390	GetHeader processes the specified header for RFC 2047 encoded words and returns the result as a UTF - 8 string
5391	GetHeaderValues processes the specified header for RFC 2047 encoded words and returns all existing values as a list of UTF - 8 strings
5392	SetHeader sets given header name to the given value . If the header exists already all existing values are replaced .
5393	AddHeader appends given header value to header name without changing existing values . If the header does not exist already it will be created .
5394	DeleteHeader deletes given header .
5395	AddressList returns a mail . Address slice with RFC 2047 encoded names converted to UTF - 8
5396	Clone returns a clone of the current Envelope
5397	ReadEnvelope is a wrapper around ReadParts and EnvelopeFromPart . It parses the content of the provided reader into an Envelope downconverting HTML to plain text if needed and sorting the attachments inlines and other parts into their respective slices . Errors are collected from all Parts and placed into the Envelope . Errors slice .
5398	EnvelopeFromPart uses the provided Part tree to build an Envelope downconverting HTML to plain text if needed and sorting the attachments inlines and other parts into their respective slices . Errors are collected from all Parts and placed into the Envelopes Errors slice .
5399	parseTextOnlyBody parses a plain text message in root that has MIME - like headers but only contains a single part - no boundaries etc . The result is placed in e .
5400	parseMultiPartBody parses a multipart message in root . The result is placed in e .
5401	Used by Part matchers to locate the HTML body . Not inlined because it s used in multiple places .
5402	Used by AddressList to ensure that address lists are properly delimited
5403	Date returns a copy of MailBuilder with the specified Date header .
5404	From returns a copy of MailBuilder with the specified From header .
5405	Subject returns a copy of MailBuilder with the specified Subject header .
5406	To returns a copy of MailBuilder with this name & address appended to the To header . name may be empty .
5407	ToAddrs returns a copy of MailBuilder with the specified To addresses .
5408	CC returns a copy of MailBuilder with this name & address appended to the CC header . name may be empty .
5409	CCAddrs returns a copy of MailBuilder with the specified CC addresses .
5410	ReplyTo returns a copy of MailBuilder with this name & address appended to the To header . name may be empty .
5411	Header returns a copy of MailBuilder with the specified value added to the named header .
5412	AddAttachment returns a copy of MailBuilder that includes the specified attachment .
5413	AddFileAttachment returns a copy of MailBuilder that includes the specified attachment . fileName will be populated from the base name of path . Content type will be detected from the path extension .
5414	AddInline returns a copy of MailBuilder that includes the specified inline . fileName and contentID may be left empty .
5415	Equals uses the reflect package to test two MailBuilder structs for equality primarily for unit tests .
5416	Encode writes this Part and all its children to the specified writer in MIME format .
5417	encodeHeader writes out a sorted list of headers .
5418	encodeContent writes out the content in the selected encoding .
5419	selectTransferEncoding scans content for non - ASCII characters and selects b or q encoding .
5420	setParamValue will ignore empty values
5421	NewBase64Cleaner returns a Base64Cleaner object for the specified reader . Base64Cleaner implements the io . Reader interface .
5422	decodeToUTF8Base64Header decodes a MIME header per RFC 2047 reencoding to = ?utf - 8b?
5423	parseMediaType is a more tolerant implementation of Go s mime . ParseMediaType function .
5424	fixMangledMediaType is used to insert ; separators into media type strings that lack them and remove repeated parameters .
5425	detectMultipartMessage returns true if the message has a recognized multipart Content - Type header
5426	detectBinaryBody returns true if the mail header defines a binary body .
5427	BreadthMatchFirst performs a breadth first search of the Part tree and returns the first part that causes the given matcher to return true
5428	BreadthMatchAll performs a breadth first search of the Part tree and returns all parts that cause the given matcher to return true
5429	DepthMatchFirst performs a depth first search of the Part tree and returns the first part that causes the given matcher to return true
5430	DepthMatchAll performs a depth first search of the Part tree and returns all parts that causes the given matcher to return true
5431	ToASCII converts unicode to ASCII by stripping accents and converting some special characters into their ASCII approximations . Anything else will be replaced with an underscore .
5432	NewPart creates a new Part object .
5433	AddChild adds a child part to either FirstChild or the end of the children NextSibling chain . The child may have siblings and children attached . This method will set the Parent field on child and all its siblings . Safe to call on nil .
5434	TextContent indicates whether the content is text based on its content type . This value determines what content transfer encoding scheme to use .
5435	setupHeaders reads the header then populates the MIME header values for this Part .
5436	setupContentHeaders uses Content - Type media params and Content - Disposition headers to populate the disposition filename and charset fields .
5437	convertFromDetectedCharset attempts to detect the character set for the given part and returns an io . Reader that will convert from that charset to UTF - 8 . If the charset cannot be detected this method adds a warning to the part and automatically falls back to using convertFromStatedCharset and returns the reader from that method .
5438	Clone returns a clone of the current Part .
5439	ReadParts reads a MIME document from the provided reader and parses it into tree of Part objects .
5440	parseParts recursively parses a MIME multipart document and sets each Parts PartID .
5441	UUID generates a random UUID according to RFC 4122 .
5442	NewQPCleaner returns a QPCleaner for the specified reader .
5443	Error formats the enmime . Error as a string .
5444	addWarning builds a severe Error and appends to the Part error slice .
5445	addWarning builds a non - severe Error and appends to the Part error slice .
5446	Wrap builds a byte slice from strs wrapping on word boundaries before max chars
5447	ConvertToUTF8String uses the provided charset to decode a slice of bytes into a normal UTF - 8 string .
5448	JoinAddress formats a slice of Address structs such that they can be used in a To or Cc header .
5449	Printf implements fmt . Printf for markdown
5450	EnvelopeToMarkdown renders the contents of an enmime . Envelope in Markdown format . Used by mime - dump and mime - extractor commands .
5451	FormatPart pretty prints the Part tree
5452	newBoundaryReader returns an initialized boundaryReader
5453	Read returns a buffer containing the content up until boundary
5454	Next moves over the boundary to the next part returns true if there is another part to be read .
5455	Parse converts a byte array containing R SEXP to a golang object . This can be converted to native golang types .
5456	Assign produces a command to assign a value to a variable within a go session
5457	NewRClient creates a RClient which will run commands on the RServe server located at the provided host and port
5458	NewRClientWithAuth creates a RClient with the specified credentials and RServe server details
5459	Register allows user to add his own data generators for special cases that we could not cover with the generators that fako includes by default .
5460	Fuzz Fills passed interface with random data based on the struct field type take a look at fuzzValueFor for details on supported data types .
5461	findFakeFunctionFor returns a faker function for a fako identifier
5462	Apply applies the given options to this Options
5463	ToOption converts this Options to a single Option .
5464	waitThenClose is spawned in a goroutine when the channel is registered . This safely cleans up the channel when the context has been canceled .
5465	send sends an event on the event channel aborting if either the passed or the internal context expire .
5466	NewMovingAverage constructs a MovingAverage that computes an average with the desired characteristics in the moving window or exponential decay . If no age is given it constructs a default exponentially weighted implementation that consumes minimal memory . The age is related to the decay factor alpha by the formula given for the DECAY constant . It signifies the average age of the samples as time goes to infinity .
5467	Set sets the EWMA s value .
5468	calcKeys50 calculates the keys used in RAR 5 archive processing . The returned slice of byte slices contains 3 keys . Key 0 is used for block or file decryption . Key 1 is optionally used for file checksum calculation . Key 2 is optionally used for password checking .
5469	getKeys reads kdfcount and salt from b and returns the corresponding encryption keys .
5470	checkPassword calculates if a password is correct given password check data and keys .
5471	parseFileEncryptionRecord processes the optional file encryption record from a file header .
5472	parseEncryptionBlock calculates the key for block encryption .
5473	newArchive50 creates a new fileBlockReader for a Version 5 archive .
5474	Read reads and decrypts data into p . If the input is not a multiple of the cipher block size the trailing bytes will be ignored .
5475	ReadByte returns the next decrypted byte .
5476	newCipherBlockReader returns a cipherBlockReader that decrypts the given io . Reader using the provided block mode cipher .
5477	newAesDecryptReader returns a cipherBlockReader that decrypts input from a given io . Reader using AES . It will panic if the provided key is invalid .
5478	limitByteReader returns a limitedByteReader that reads from r and stops with io . EOF after n bytes . If r returns an io . EOF before reading n bytes io . ErrUnexpectedEOF is returned .
5479	Mode returns an os . FileMode for the file calculated from the Attributes field .
5480	nextBlockInFile reads the next file block in the current file at the current archive file position or returns an error if there is a problem . It is invalid to call this when already at the last block in the current file .
5481	next advances to the next packed file in the RAR archive .
5482	Read reads the packed data for the current file into p .
5483	Read reads from the current file in the RAR archive .
5484	Next advances to the next file in the archive .
5485	NewReader creates a Reader reading from r . NewReader only supports single volume archives . Multi - volume archives must use OpenReader .
5486	OpenReader opens a RAR archive specified by the name and returns a ReadCloser .
5487	getV3Filter returns a V3 filter function from a code byte slice .
5488	init intializes the decoder for decoding a new file .
5489	readBlockHeader determines and initializes the current decoder for a new decode block .
5490	readCodeLengthTable reads a new code length table into codeLength from br . If addOld is set the old table is added to the new one .
5491	shrinkStates shrinks the state list down to size states
5492	expandStates expands the states list by one
5493	pushByte puts a byte on the heap and returns a state . succ index that can be used to retrieve it .
5494	succByte returns a byte from the heap given a state . succ index
5495	succContext returns a context given a state . succ index
5496	Calculates the key and iv for AES decryption given a password and salt .
5497	parseDosTime converts a 32bit DOS time value to time . Time
5498	decodeName decodes a non - unicode filename from a file header .
5499	readExtTimes reads and parses the optional extra time field from the file header .
5500	readBlockHeader returns the next block header in the archive . It will return io . EOF if there were no bytes read .
5501	newArchive15 creates a new fileBlockReader for a Version 1 . 5 archive
5502	readFilter5Data reads an encoded integer used in V5 filters .
5503	writeByte writes c to the end of the window
5504	copyBytes copies len bytes at off distance from the end to the end of the window .
5505	read reads bytes from the beginning of the window into p
5506	queueFilter adds a filterBlock to the end decodeReader s filters .
5507	processFilters processes any filters valid at the current read index and stores the output in outbuf .
5508	fill fills the decodeReader s window
5509	Read decodes data and stores it in p .
5510	readFull wraps io . ReadFull to return io . ErrUnexpectedEOF instead of io . EOF when 0 bytes are read .
5511	findSig searches for the RAR signature and version at the beginning of a file . It searches no more than maxSfxSize bytes .
5512	execute runs a list of commands on the vm .
5513	newVM creates a new RAR virtual machine using the byte slice as memory .
5514	limitBitReader returns a bitReader that reads from br and stops with io . EOF after n bits . If br returns an io . EOF before reading n bits err is returned .
5515	readUint32 reads a RAR V3 encoded uint32
5516	Step 3 is the removal of the derivational suffix .
5517	Stem an English word . This is the only exported function in this package .
5518	Step 6 Un - accent
5519	Step 5 Undouble non - vowel endings
5520	Step 2a is the removal of verb suffixes beginning y Search for the longest among the following suffixes in RV and if found delete if preceded by u .
5521	Step 4 is the undoubling of double non - vowel endings and removal of superlative endings .
5522	Stem a word in the specified language .
5523	Step 1c is the normalization of various y endings .
5524	Step 3 is the stemming of various longer sufficies found in R1 .
5525	Return true if the input word is a French stop word .
5526	Capitalize Y I and U runes that are acting as consanants . Put into upper case u or i preceded and followed by a vowel and y preceded or followed by a vowel . u after q is also put into upper case .
5527	Step 2 is the stemming of various endings found in R1 including al ness and li .
5528	Step 3 is the removal of residual suffixes .
5529	Step 0 is to strip off apostrophes and s .
5530	Finds the region after the first non - vowel following a vowel or a the null region at the end of the word if there is no such non - vowel . Returns the index in the Word where the region starts ; optionally skips the first start characters .
5531	Step 1 is the stemming of various endings found in R1 including heterna ornas and andet .
5532	Step 2a is the removal of Verb suffixes beginning with i in the RV region .
5533	Remove perfective gerund endings and return true if one was removed .
5534	Remove adjectival endings and return true if one was removed .
5535	Step 2b is the removal of verb suffixes beginning y Search for the longest among the following suffixes in RV and if found delete if preceded by u .
5536	Step 4 is the cleaning up of residual suffixes .
5537	Step 5 is the stemming of e and l sufficies found in R2 .
5538	Stem an Spanish word . This is the only exported function in this package .
5539	Stem an Russian word . This is the only exported function in this package .
5540	Return true if the input word is a Norwegian stop word .
5541	Return true if the input word is a Swedish stop word .
5542	Create a new SnowballWord struct
5543	Remove the last n runes from the SnowballWord .
5544	Resets R1start and R2start to ensure they are within bounds of the current rune slice .
5545	Return a slice of w . RS allowing the start and stop to be out of bounds .
5546	Returns true if x runes would fit into R1 .
5547	Returns true if x runes would fit into R2 .
5548	Returns true if x runes would fit into RV .
5549	Return the first prefix found or the empty string .
5550	Return true if w ends with suffixRunes
5551	Find the first suffix that ends at endPos in the word among those provided ; then check to see if it begins after startPos . If it does return it else return the empty string and empty rune slice . This may seem a counterintuitive manner to do this . However it matches what is required most of the time by the Snowball stemmer steps .
5552	Find the first suffix in the word among those provided ; then check to see if it begins after startPos . If it does remove it .
5553	Removes the first suffix found
5554	Return the first suffix found or the empty string .
5555	Applies various transformations necessary for the other subsequent stemming steps . Most important of which is defining the two regions R1 & R2 .
5556	Step 0 is the removal of attached pronouns
5557	Step 1b is the normalization of various ly and ed sufficies .
5558	Step 2b is the removal of Verb suffixes in RV that do not begin with i .
5559	Capitalize all Y s preceded by vowels or starting a word
5560	Uncapitalize all Y s
5561	Returns the stemmed version of a word if it is a special case otherwise returns the empty string .
5562	A word is called short if it ends in a short syllable and if R1 is null .
5563	Step 1a is normalization of various special s - endings .
5564	Set sets the value by key and associates it with the current goroutine .
5565	Get gets the value by key as it exists for the current goroutine .
5566	Cleanup removes all data associated with this goroutine . If this is not called the data may persist for the lifetime of your application . This must be called from the very first goroutine to invoke Set
5567	getValues unlinks two goroutines
5568	linkGRs links two goroutines together allowing the child to access the data present in the parent .
5569	unlinkGRs unlinks two goroutines
5570	Gets an app s endpoint with the specified path
5571	Curls an app s endpoint and exit successfully before the specified timeout
5572	Curls an app s endpoint and exit successfully before the default timeout
5573	Curls an app s root endpoint and exit successfully before the default timeout
5574	GetTags returns a slice of Tags that is all characters after rune char up to occurrence of space or another occurrence of rune char . Additionally you can provide a coma separated unicode characters to be used as terminating sequence .
5575	GetTagsAsUniqueStrings gets all tags as a slice of unique strings . This is here to have a means of being somewhat backwards compatible with previous versions of mention
5576	Is given rune listed as a terminator
5577	Ensures the given slice of strings are unique and that none are empty strings
5578	New returns the location middleware with user - defined custom configuration .
5579	Get returns the Location information for the incoming http . Request from the context . If the location is not set a nil value is returned .
5580	GenerateRSAKeyPair generates a new rsa private and public key
5581	Verify compares a signature against input data
5582	Encrypt returns encrypted bytes from the inpu data
5583	Sign returns a signature of the input data
5584	GetPublic returns a public key
5585	Decrypt returns decrypted bytes of the input encrypted bytes
5586	UnmarshalRsaPrivateKey returns a private key from the input x509 bytes
5587	GenerateKeyPair generates a private and public key
5588	GenerateKeyPairWithReader returns a keypair of the given type and bitsize
5589	GenerateEKeyPair returns an ephemeral public key and returns a function that will compute the shared secret key . Used in the identify module . Focuses only on ECDH now but can be made more general in the future .
5590	UnmarshalPublicKey converts a protobuf serialized public key into its representative object
5591	MarshalPublicKey converts a public key object into a protobuf serialized public key
5592	UnmarshalPrivateKey converts a protobuf serialized private key into its representative object
5593	MarshalPrivateKey converts a key object into its protobuf serialized form .
5594	KeyEqual checks whether two
5595	GenerateECDSAKeyPair generates a new ecdsa private and public key
5596	GenerateECDSAKeyPairWithCurve generates a new ecdsa private and public key with a speicified curve
5597	ECDSAKeyPairFromKey generates a new ecdsa private and public key from an input private key
5598	UnmarshalECDSAPrivateKey returns a private key from x509 bytes
5599	UnmarshalECDSAPublicKey returns the public key from x509 bytes
5600	Equals compares to private keys
5601	Sign returns the signature of the input data
5602	Equals compares to public keys
5603	Verify compares data to a signature
5604	GenerateSecp256k1Key generates a new Secp256k1 private and public key pair
5605	UnmarshalSecp256k1PrivateKey returns a private key from bytes
5606	UnmarshalSecp256k1PublicKey returns a public key from bytes
5607	Equals compares two private keys
5608	Sign returns a signature from input data
5609	Equals compares two public keys
5610	Verify compares a signature against the input data
5611	Raw private key bytes .
5612	Sign returns a signature from an input message .
5613	Equals compares two ed25519 public keys .
5614	Verify checks a signature agains the input data .
5615	UnmarshalEd25519PublicKey returns a public key from input bytes .
5616	UnmarshalEd25519PrivateKey returns a private key from input bytes .
5617	EditScriptForStrings returns an optimal edit script to turn source into target .
5618	EditScriptForMatrix returns an optimal edit script based on the given Levenshtein matrix .
5619	WriteMatrix writes a visual representation of the given matrix for the given strings to the given writer .
5620	New describes a new filename located at the given absolute path .
5621	GetOwner returns who owns the lockfile .
5622	TryLock tries to own the lock . It Returns nil if successful and and error describing the reason it didn t work out . Please note that existing lockfiles containing pids of dead processes and lockfiles containing no pid at all are simply deleted .
5623	Unlock a lock again if we owned it . Returns any error that happend during release of lock .
5624	NewBase creates a new instance of Base with default values set .
5625	SetFallbackLogger sets a Logger to be used if there aren t any loggers added or any of the added loggers are in a degraded or unhealthy state . A Logger passed to SetFallbackLogger will be initialized if it hasn t been already . In addition if the Logger fails to initialize completely the fallback logger will fail to be set .
5626	AddLogger adds a new logger instance to the Base
5627	LogWithTime will log a message at the provided level to all added loggers with the timestamp set to the value of ts .
5628	Log will log a message at the provided level to all added loggers with the timestamp set to the time Log was called .
5629	Warnm is a short - hand version of Warningm
5630	NewTemplateWithFuncMap creates a new Template from the given string and a template FuncMap . The FuncMap available to the template during evaluation will also include the default values if not overridden . An error is returned if the template fails to compile .
5631	Execute takes a TemplateMsg and applies it to the Go template . If colorize is true the template will insert ANSI color codes within the resulting string .
5632	NewTemplateMsg will create a new TemplateMsg with values from the given parameters
5633	NewLogAdapterFor creates a LogAdapter that wraps the given loger with the given attributes .
5634	SetAttr sets the attribute key to value for this LogAdapter only
5635	LogWithTime will log a message at the provided level to all loggers added to the Base associated with this LogAdapter . It is similar to Log except the timestamp will be set to the value of ts .
5636	Log will log a message at the provided level to all loggers added to the Base associated with this LogAdapter
5637	Dbgm is a short - hand version of Debugm
5638	NewAttrsFromMap will create a new Attrs struct with the given attributes pre - populated
5639	NewAttrsFromAttrs is a convenience function that will accept zero or more existing Attrs create a new Attrs and then merge all the supplied Attrs values into the new Attrs instance .
5640	MergeAttrs accepts another existing Attrs and merges the attributes into its own .
5641	SetAttr will set key to the provided value . If the attribute already exists the value will be replaced with the new value .
5642	GetAttr gets the value of the attribute with the provided name . If the attribute does not exist nil will be returned
5643	RemoveAttr will remove the attribute with the provided name .
5644	Attrs will return a map of the attributes added to the struct .
5645	Debugm executes the same function on the default Base instance
5646	Infom executes the same function on the default Base instance
5647	Warningm executes the same function on the default Base instance
5648	Errm executes the same function on the default Base instance
5649	Errorm executes the same function on the default Base instance
5650	Fatalm executes the same function on the default Base instance
5651	Dief executes the same function on the default Base instance
5652	Diem executes the same function on the default Base instance
5653	ToLogLevel will take a string and return the appropriate log level for the string if known . If the string is not recognized it will return an ErrUnknownLevel error .
5654	CallErr queues function f on the main thread and returns an error returned by f .
5655	New creates a StackdriverHook using the provided options that is suitible for using with logrus for logging to Google Stackdriver .
5656	Fire writes the message to the Stackdriver entry service .
5657	Levels is an option that sets the logrus levels that the StackdriverHook will create log entries for .
5658	ProjectID is an option that sets the project ID which is needed for the log name .
5659	EntriesService is an option that sets the Google API entry service to use with Stackdriver .
5660	LoggingService is an option that sets the Google API logging service to use .
5661	ErrorService is an option that sets the Google API error reporting service to use .
5662	HTTPClient is an option that sets the http . Client to be used when creating the Stackdriver service .
5663	MonitoredResource is an option that sets the monitored resource to send with each log entry .
5664	ErrorReportingLogName is an option that sets the log name to send with each error message for error reporting . Only used when ErrorReportingService has been set .
5665	Labels is an option that sets the labels to send with each log entry .
5666	PartialSuccess is an option that toggles whether or not to write partial log entries .
5667	GoogleComputeCredentials is an option that loads the Google Service Account credentials from the GCE metadata associated with the GCE compute instance . If serviceAccount is empty then the default service account credentials associated with the GCE instance will be used .
5668	NewEncoder returns a new encoder that outputs to w .
5669	NewDecoder returns a new decoder that takes input from r .
5670	NewStreamEncoder returns a new stream encoder that outputs to w .
5671	NewStreamDecoder returns a new stream decoder that takes input from r .
5672	Register adds a codec for a mimetype to r .
5673	Unregister removes the codec for a mimetype from r .
5674	Lookup returns the codec associated with mimetype ok is set to true or false based on whether a codec was found .
5675	Codecs returns a map of all codecs registered in reg .
5676	Type returns the RESP error type which is represented by the leading uppercase word in the error string .
5677	Install adds an adapter for typ . The function panics if one of the encoder and decoder functions of the adapter are nil . A typical use case for this function is to be called during the package initialization phase to extend objconv support for new types .
5678	AdapterOf returns the adapter for typ setting ok to true if one was found false otherwise .
5679	AppendDuration appends a human - readable representation of d to b . The function copies the implementation of time . Duration . String but prevents Go from making a dynamic memory allocation on the returned value .
5680	fmtInt formats v into the tail of buf . It returns the index where the output begins .
5681	NewDecoder returns a new JSON decoder that parses values from r .
5682	NewStreamDecoder returns a new JSON stream decoder that parses values from r .
5683	Unmarshal decodes a JSON representation of v from b .
5684	String returns a human readable representation of the type .
5685	zeroValueOf and the related cache is used to keep the zero values so they don t need to be reallocated every time they re used .
5686	NewValueParser creates a new parser that exposes the value v .
5687	ParseTag parses a raw tag obtained from a struct field returning the results as a tag value .
5688	NewEncoder returns a new JSON encoder that writes to w .
5689	NewStreamEncoder returns a new JSON stream encoder that writes to w .
5690	NewPrettyEncoder returns a new JSON encoder that writes to w .
5691	NewPrettyStreamEncoder returns a new JSON stream encoder that writes to w .
5692	Marshal writes the JSON representation of v to a byte slice returned in b .
5693	NewEncoder returns a new encoder that outputs values to e . Encoders created by this function use the default encoder configuration which is equivalent to using a zero - value EncoderConfig with only the Emitter field set . The function panics if e is nil .
5694	EncodeArray provides the implementation of the array encoding algorithm where n is the number of elements in the array and f a function called to encode each element . The n argument can be set to a negative value to indicate that the program doesn t know how many elements it will output to the array . Be mindful that not all emitters support encoding arrays of unknown lengths . The f function is called to encode each element of the array .
5695	EncodeMap provides the implementation of the map encoding algorithm where n is the number of elements in the map and f a function called to encode each element . The n argument can be set to a negative value to indicate that the program doesn t know how many elements it will output to the map . Be mindful that not all emitters support encoding maps of unknown length . The f function is called to encode each element of the map it is expected to encode two values the first one being the key follow by the associated value . The first encoder must be used to encode the key the second for the value .
5696	NewStreamEncoder returns a new stream encoder that outputs to e . The function panics if e is nil .
5697	Open explicitly tells the encoder to start the stream setting the number of values to n . Depending on the actual format that the stream is encoding to n may or may not have to be accurate some formats also support passing a negative value to indicate that the number of elements is unknown .
5698	Close terminates the stream encoder .
5699	Encode writes v to the stream encoding it based on the emitter configured on e .
5700	newStructType takes a Go type as argument and extract information to make a new structType value . The type has to be a struct type or a panic will be raised .
5701	lookup takes a Go type as argument and returns the matching structType value potentially creating it if it didn t already exist . This method is safe to call from multiple goroutines .
5702	clear empties the cache .
5703	CheckUint64Bounds verifies that v is smaller than max t represents the original type of v .
5704	CheckInt64Bounds verifies that v is within min and max t represents the original type of v .
5705	NewDecoder returns a decoder object that uses p will panic if p is nil .
5706	Decode expects v to be a pointer to a value in which the decoder will load the next parsed data . The method panics if v is neither a pointer type nor implements the ValueDecoder interface or if v is a nil pointer .
5707	DecodeArray provides the implementation of the algorithm for decoding arrays where f is called to decode each element of the array .
5708	DecodeMap provides the implementation of the algorithm for decoding maps where f is called to decode each pair of key and value . The function f is expected to decode two values from the map the first one being the key and the second the associated value . The first decoder must be used to decode the key the second one for the value .
5709	NewStreamDecoder returns a new stream decoder that takes input from p . The function panics if p is nil .
5710	Len returns the number of values remaining to be read from the stream which may be - 1 if the underlying format doesn t provide this information . If an error occurred while decoding the stream the method returns zero because no more values can be read .
5711	Err returns the last error returned by the Decode method . The method returns nil if the stream reached its natural end .
5712	Decodes the next value from the stream into v .
5713	Encoder returns a new StreamEncoder which can be used to re - encode the stream decoded by d into e . The method panics if e is nil .
5714	Read logger flags from the LOGFLAGS environment variable . Multiple flags can be set at once separated by commas .
5715	LevelFromString returns a level based on the input string s . If the input can t be interpreted as a valid log level the info level and false is returned .
5716	NewBackend creates a logger backend from a Writer .
5717	callsite returns the file name and line number of the callsite to the subsystem logger .
5718	print outputs a log message to the writer associated with the backend after creating a prefix for the given level and tag according to the formatHeader function and formatting the provided arguments using the default formatting rules .
5719	Logger returns a new logger for a particular subsystem that writes to the Backend b . A tag describes the subsystem and is included in all log messages . The logger uses the info verbosity level by default .
5720	Trace formats message using the default formats for its operands prepends the prefix as necessary and writes to log with LevelTrace . This is part of the Logger interface implementation .
5721	Tracef formats message according to format specifier prepends the prefix as necessary and writes to log with LevelTrace . This is part of the Logger interface implementation .
5722	Debug formats message using the default formats for its operands prepends the prefix as necessary and writes to log with LevelDebug . This is part of the Logger interface implementation .
5723	Debugf formats message according to format specifier prepends the prefix as necessary and writes to log with LevelDebug . This is part of the Logger interface implementation .
5724	Info formats message using the default formats for its operands prepends the prefix as necessary and writes to log with LevelInfo . This is part of the Logger interface implementation .
5725	Infof formats message according to format specifier prepends the prefix as necessary and writes to log with LevelInfo . This is part of the Logger interface implementation .
5726	Warn formats message using the default formats for its operands prepends the prefix as necessary and writes to log with LevelWarn . This is part of the Logger interface implementation .
5727	Warnf formats message according to format specifier prepends the prefix as necessary and writes to log with LevelWarn . This is part of the Logger interface implementation .
5728	Error formats message using the default formats for its operands prepends the prefix as necessary and writes to log with LevelError . This is part of the Logger interface implementation .
5729	Errorf formats message according to format specifier prepends the prefix as necessary and writes to log with LevelError . This is part of the Logger interface implementation .
5730	Critical formats message using the default formats for its operands prepends the prefix as necessary and writes to log with LevelCritical . This is part of the Logger interface implementation .
5731	Criticalf formats message according to format specifier prepends the prefix as necessary and writes to log with LevelCritical . This is part of the Logger interface implementation .
5732	Level returns the current logging level This is part of the Logger interface implementation .
5733	SetLevel changes the logging level to the passed level . This is part of the Logger interface implementation .
5734	Concat concat two permissions into a new one
5735	HasPermission check roles has permission for mode or not
5736	ConcatPermissioner concat permissioner
5737	HasPermission check has permission for permissioners or not
5738	Register register role with conditions
5739	NewPermission initialize permission
5740	Get role defination
5741	isPtrFromHeap reports whether the inferior at address a contains a pointer . a must be somewhere in the heap .
5742	IsPtr reports whether the inferior at address a contains a pointer .
5743	FindObject finds the object containing a . Returns that object and the offset within that object to which a points . Returns 0 0 if a doesn t point to a live heap object .
5744	ForEachObject calls fn with each object in the Go heap . If fn returns false ForEachObject returns immediately .
5745	ForEachRoot calls fn with each garbage collection root . If fn returns false ForEachRoot returns immediately .
5746	Addr returns the starting address of x .
5747	Size returns the size of x in bytes .
5748	Type returns the type and repeat count for the object x . x contains at least repeat copies of the returned type .
5749	ForEachRootPtr behaves like ForEachPtr but it starts with a Root instead of an Object .
5750	edges1 calls fn for the edges found in an object of type t living at offset off in the root r . If fn returns false return immediately with false .
5751	setHeapPtr records that the memory at heap address a contains a pointer .
5752	findHeapInfo finds the heapInfo structure for a . Returns nil if a is not a heap address .
5753	Same as findHeapInfo but allocates the heapInfo if it hasn t been allocated yet .
5754	Generate the name the runtime uses for a dwarf type . The DWARF generator and the runtime use slightly different names for the same underlying type .
5755	readRuntimeConstants populates the p . rtConstants map .
5756	add records that PCs in the range [ min max ) map to function f .
5757	sort must be called after all the adds but before any find .
5758	Finds a Func for the given address . Sort must have been called already .
5759	read parses a pctab from the core file at address data .
5760	readVarint reads a varint from the core file . val is the value n is the number of bytes consumed .
5761	useLine is like cobra . Command . UseLine but tweaked to use commandPath .
5762	commandPath is like cobra . Command . CommandPath but tweaked to use c . Use instead of c . Name for the root command so it works with viewcore s unusual command structure .
5763	readCore reads corefile and returns core and gocore process states .
5764	typeName returns a string representing the type of this object .
5765	fieldName returns the name of the field at offset off in x .
5766	typeFieldName returns the name of the field at offset off in t .
5767	FindFunc returns the function which contains the code at address pc if any .
5768	Core takes a loaded core file and extracts Go information from it .
5769	Address returns the address that a region of pointer type points to .
5770	Int returns the int value stored in r .
5771	Uintptr returns the uintptr value stored in r .
5772	Cast the region to the given type .
5773	Deref loads from a pointer . r must contain a pointer .
5774	Uint64 returns the uint64 value stored in r . r must have type uint64 .
5775	Uint32 returns the uint32 value stored in r . r must have type uint32 .
5776	Int32 returns the int32 value stored in r . r must have type int32 .
5777	Uint16 returns the uint16 value stored in r . r must have type uint16 .
5778	Uint8 returns the uint8 value stored in r . r must have type uint8 .
5779	String returns the value of the string stored in r .
5780	SlicePtr returns the pointer inside a slice . r must contain a slice .
5781	SliceLen returns the length of a slice . r must contain a slice .
5782	Field returns the part of r which contains the field f . r must contain a struct and f must be one of its fields .
5783	ReadUint8 returns a uint8 read from address a of the inferior .
5784	ReadUint16 returns a uint16 read from address a of the inferior .
5785	ReadUint32 returns a uint32 read from address a of the inferior .
5786	ReadUint64 returns a uint64 read from address a of the inferior .
5787	ReadInt8 returns an int8 read from address a of the inferior .
5788	ReadInt16 returns an int16 read from address a of the inferior .
5789	ReadInt32 returns an int32 read from address a of the inferior .
5790	ReadInt64 returns an int64 read from address a of the inferior .
5791	ReadUintptr returns a uint of pointer size read from address a of the inferior .
5792	ReadPtr returns a pointer loaded from address a of the inferior .
5793	ReadCString reads a null - terminated string starting at address a .
5794	Source returns the backing file and offset for the mapping or 0 if none .
5795	findMapping is simple enough that it inlines .
5796	Max returns the larger of a and b .
5797	Min returns the smaller of a and b .
5798	Align rounds a up to a multiple of x . x must be a power of 2 .
5799	initialize implements step 1 of LT .
5800	calculate runs the main part of LT .
5801	eval is EVAL from the papers .
5802	compress is COMPRESS from the papers .
5803	link is LINK from the papers .
5804	reverse computes and stores reverse edges for each vertex .
5805	calcSize calculates the total retained size for each vertex .
5806	Returns the name of the field at offset off in x .
5807	Readable reports whether the address a is readable .
5808	ReadableN reports whether the n bytes starting at address a are readable .
5809	splitMappingsAt ensures that a is not in the middle of any mapping . Splits mappings as necessary .
5810	DynamicType returns the concrete type stored in the interface type t at address a . If the interface is nil returns nil .
5811	lower your expectations
5812	Resolve resolves the URL host to its IP address .
5813	Equal reports whether tokens a and b are equal . Two tokens are equal if both their types and values are equal . A nil token can never be equal to another token .
5814	newDefaultClassifier creates a new classifier for ASCII characters .
5815	Next returns the next word or an error . If there are no more words the error will be io . EOF .
5816	NewTokenizer creates a new tokenizer from an input stream .
5817	Split partitions a string into a slice of strings .
5818	Between extracts a string between left and right strings .
5819	BetweenF is the filter form for Between .
5820	Camelize return new string which removes any underscores or dashes and convert a string into camel casing .
5821	Capitalize uppercases the first char of s and lowercases the rest .
5822	CharAt returns a string from the character at the specified position .
5823	CharAtF is the filter form of CharAt .
5824	ChompLeft removes prefix at the start of a string .
5825	ChompLeftF is the filter form of ChompLeft .
5826	ChompRight removes suffix from end of s .
5827	ChompRightF is the filter form of ChompRight .
5828	ClassifyF is the filter form of Classify .
5829	Clean compresses all adjacent whitespace to a single space and trims s .
5830	Dasherize converts a camel cased string into a string delimited by dashes .
5831	EscapeHTML is alias for html . EscapeString .
5832	DecodeHTMLEntities decodes HTML entities into their proper string representation . DecodeHTMLEntities is an alias for html . UnescapeString
5833	EnsurePrefixF is the filter form of EnsurePrefix .
5834	EnsureSuffixF is the filter form of EnsureSuffix .
5835	Humanize transforms s into a human friendly form .
5836	Iif is short for immediate if . If condition is true return truthy else falsey .
5837	IndexOf finds the index of needle in s starting from start .
5838	IsLower returns true if s comprised of all lower case characters .
5839	IsUpper returns true if s contains all upper case chracters .
5840	Left returns the left substring of length n .
5841	LeftF is the filter form of Left .
5842	Letters returns an array of runes as strings so it can be indexed into .
5843	Lines convert windows newlines to unix newlines then convert to an Array of lines .
5844	Map maps an array s iitem through an iterator .
5845	Match returns true if patterns matches the string
5846	Project is local project .
5847	Pad pads string s on both sides with c until it has length of n .
5848	PadF is the filter form of Pad .
5849	PadLeft pads s on left side with c until it has length of n .
5850	PadLeftF is the filter form of PadLeft .
5851	PadRightF is the filter form of Padright
5852	Pipe pipes s through one or more string filters .
5853	QuoteItems quotes all items in array mostly for debugging .
5854	ReplaceF is the filter form of strings . Replace .
5855	ReplacePatternF is the filter form of ReplaceRegexp .
5856	Reverse a string
5857	RightF is the Filter version of Right .
5858	Slice slices a string . If end is negative then it is the from the end of the string .
5859	SliceF is the filter for Slice .
5860	SliceContains determines whether val is an element in slice .
5861	SliceIndexOf gets the indx of val in slice . Returns - 1 if not found .
5862	Slugify converts s into a dasherized string suitable for URL segment .
5863	StripPunctuation strips puncation from string .
5864	StripTags strips all of the html tags or tags specified by the parameters
5865	Substr returns a substring of s starting at index of length n .
5866	SubstrF is the filter form of Substr .
5867	TemplateWithDelimiters is string template with user - defineable opening and closing delimiters .
5868	ToArgv converts string s into an argv for exec .
5869	ToBool fuzzily converts truthy values .
5870	ToBoolOr parses s as a bool or returns defaultValue .
5871	ToIntOr parses s as an int or returns defaultValue .
5872	ToFloat32Or parses as a float32 or returns defaultValue on error .
5873	ToFloat64Or parses s as a float64 or returns defaultValue .
5874	UnescapeHTML is an alias for html . UnescapeString .
5875	WrapHTML wraps s within HTML tag having attributes attrs . Note WrapHTML does not escape s value .
5876	WrapHTMLF is the filter form of WrapHTML .
5877	ReapChildren is a long - running routine that blocks waiting for child processes to exit and reaps them reporting reaped process IDs to the optional pids channel and any errors to the optional errors channel . The optional reapLock will be used to prevent reaping during periods when you know your application is waiting for subprocesses to return . You need to use care in order to prevent the reaper from stealing your return values from uses of packages like Go s exec . We use an RWMutex so that we don t serialize all of the application s execution of sub processes with each other but we do serialize them with reaping . The application should get a read lock when it wants to do a wait .
5878	SdNotify sends a specified string to the systemd notification socket .
5879	NewAuthenticator constructs a new Authenticator from a store and policy .
5880	Endpoint returns a handler for the common token and authorize endpoint .
5881	Unique is a helper to get a unique list of object ids .
5882	Contains returns true if a list of object ids contains the specified id .
5883	Includes returns true if a list of object ids includes another list of object ids .
5884	Require will check if the specified flags are set on the specified model and panic if one is missing .
5885	Enqueue will enqueue a job using the specified name and data . If a delay is specified the job will not be dequeued until the specified time has passed .
5886	A is a short - hand function to construct an authorizer . It will also add tracing code around the execution of the authorizer .
5887	Run will authorize immediately and return the provided list of enforcers .
5888	And will match and run both authorizers and return immediately if one does not return a set of enforcers . The two successfully returned enforcer sets are merged into one and returned .
5889	Or will match and run the first authorizer and return its enforcers on success . If no enforcers are returned it will match and run the second authorizer and return its enforcers .
5890	Enqueue will enqueue a job using the specified name and data . If a delay is specified the job will not dequeued until the specified time has passed .
5891	Callback is a factory to create callbacks that can be used to enqueue jobs during request processing .
5892	NewWatcher creates and returns a new watcher .
5893	Add will add a stream to the watcher .
5894	Action returns an action that should be registered in the group under the watch name .
5895	Write will return true when this operation does write data .
5896	String returns the name of the operation .
5897	Query returns the composite query of Selector and Filter .
5898	Respond will encode the provided value as JSON and write it to the client .
5899	EnsureApplication will ensure that an application with the provided name exists and returns its key .
5900	EnsureFirstUser ensures the existence of a first user if no other has been created .
5901	Callback will return a callback that authorizes operations using the strategy .
5902	OpenStream will open a stream and continuously forward events to the specified receiver until the stream is closed . If a token is present it will be used to resume the stream . The provided opened function is called when the stream has been opened the first time . The passed manager is called with errors returned by the underlying change stream . The managers result is used to determine if the stream should be opened again . The stream automatically resumes on errors using an internally stored resume token . Applications that need more control should store the token externally and reopen the stream manually to resume from a specific position .
5903	Close will close the stream .
5904	AddTokenIndexes will add access token indexes to the specified indexer .
5905	GetTokenData implements the flame . GenericToken interface .
5906	SetTokenData implements the flame . GenericToken interface .
5907	ValidSecret implements the flame . Client interface .
5908	HashSecret will hash Secret and set SecretHash .
5909	ValidPassword implements the flame . ResourceOwner interface .
5910	HashPassword will hash Password and set PasswordHash .
5911	MustCreateStore will dial the passed database and return a new store . It will panic if the initial connection failed .
5912	CreateStore will dial the passed database and return a new store . It will return an error if the initial connection failed
5913	C will return the collection associated to the passed model .
5914	NewAssetServer constructs an asset server handler that serves an asset directory on a specified path and serves the index file for not found paths which is needed to run single page applications like Ember .
5915	DefaultGrantStrategy grants only empty scopes .
5916	DefaultTokenData adds the user s id to the token data claim .
5917	GenerateToken returns a new token for the provided information .
5918	ParseToken will parse the presented token and return its claims if it is expired and eventual errors .
5919	E is a short - hand function to create an enforcer .
5920	MustGet returns the value of the given field . MustGet will panic if no field has been found .
5921	MustSet will set the given field to the the passed valued . MustSet will panic if no field has been found .
5922	NewGroup creates and returns a new group .
5923	Add will add a controller to the group .
5924	Endpoint will return an http handler that serves requests for this group . The specified prefix is used to parse the requests and generate urls for the resources .
5925	Add will add an index to the internal index list . Fields that are prefixed with a dash will result in an descending index . See the MongoDB documentation for more details .
5926	AddRaw will add a raw mgo . Index to the internal index list .
5927	Ensure will ensure that the required indexes exist . It may fail early if some of the indexes are already existing and do not match the supplied index .
5928	NewCatalog will create a new catalog .
5929	Add will add the specified models to the catalog .
5930	All returns a list of all registered models .
5931	Visualize emits a string in dot format which when rendered with graphviz visualizes the models and their relationships .
5932	NewErrorReporter returns a very basic reporter that writes errors and stack traces to the specified writer .
5933	EnsureIndexes will ensure that the required indexes exist .
5934	E is a short - hand function to construct a safe error .
5935	Compose is a short - hand for chaining the specified middleware and handler together .
5936	Includes returns true if a list of strings includes another list of strings .
5937	Intersect will return the intersection of both lists .
5938	E is a short - hand to construct an error .
5939	RootTracer is a middleware that can be used to create root trace span for an incoming request .
5940	NewTracerFromRequest returns a new tracer that has a root span derived from the specified request . A span previously added to the request context using Context is automatically used as the parent .
5941	NewTracer returns a new tracer with the specified root span .
5942	Push will add a new span on to the stack . Successful spans must be finished by calling Pop . If the code panics or an error is returned the last pushed span will be flagged with the error and a leftover spans are popped .
5943	Last returns the last pushed span or the root span .
5944	Tag adds a tag to the last pushed span .
5945	Log adds a log to the last pushed span .
5946	Context returns a new context with the latest span stored as a reference for handlers that will call NewTracerFromRequest or similar .
5947	Pop finishes and removes the last pushed span .
5948	Finish will finish all leftover spans and the root span if requested .
5949	NewPool creates and returns a new pool .
5950	Add will add the specified task and its queue to the pool .
5951	Run will launch the queue watchers and task workers in the background .
5952	NewBodyLimiter returns a new body limiter for the specified request .
5953	LimitBody will limit reading from the body of the supplied request to the specified amount of bytes . Earlier calls to LimitBody will be overwritten which essentially allows callers to increase the limit from a default limit .
5954	C is a short - hand function to construct a callback . It will also add tracing code around the execution of the callback .
5955	Only will match if the operation is present in the provided list .
5956	BasicAuthorizer authorizes requests based on a simple credentials list .
5957	ModelValidator performs a validation of the model using the Validate method .
5958	TimestampValidator will set timestamp fields on create and update operations . The fields are inferred from the model using the fire - created - timestamp and fire - updated - timestamp flags . Missing created timestamps are retroactively set using the timestamp encoded in the model id .
5959	RelationshipValidator makes sure all relationships of a model are correct and in place . It does so by combining a DependentResourcesValidator and a VerifyReferencesValidator based on the specified model and catalog .
5960	Inspect executes the inspection into all loaded objects by checking all rules and exceptions loaded .
5961	NewRule creates a new rule .
5962	AddUnmatch adds a refular expression into the unmatch list .
5963	Run executes the rule into a content to find all lines that matches it .
5964	NewSecret creates a new secret .
5965	NewObject creates a new object .
5966	SetMetadata sets a metadata value for the object .
5967	SetMetadata gets a metadata value from the object .
5968	GetMetadataAll gets a map that contains all metadata of the object .
5969	SetRule sets the regular expresion that should match the name of the rule .
5970	SetObject sets the regular expresion that should match the name of the object .
5971	SetNline sets the number of line where secret should be found .
5972	SetContent sets the regular expresion that should match the content of the object .
5973	Run executes the exception into a secret to determine if it s an exception or not .
5974	AddRule adds a new rule into the context .
5975	LoadRulesFromFile loads rules from a YAML file .
5976	LoadRulesFromFile loads rules from all YAML files inside a directory .
5977	DefaultRulesPath return the default PATH that contains rules .
5978	EnableRule enables specific rule .
5979	DisableRule disables specific rule .
5980	EnableRule enables rules that match with a regular expression .
5981	DisableRule disables rules that match with a regular expression .
5982	LoadObjects loads objects form an specific source . It can load objects from different source types that are implemented following the SourceType interface .
5983	GroupObjectsByMetadata returns a map with all objects grouped by specific metadata key .
5984	GroupObjectsByPrimaryKeyHash returns a map with all objects grouped by the primary key hash that is calculated from all metadata keys with the primary attribute . All returned objects could have the same content even if are not the same .
5985	AddException adds a new exception into the context .
5986	LoadExceptionsFromFile loads exceptions from a YAML file .
5987	printPlainResults prints plain - text output for results
5988	printJsonResults prints json - formatted output for results
5989	NewXor64Source returns a pointer to a new Xor64Source seeded with the given value .
5990	xor64 generates the next value of a pseudo - random sequence given a current state x .
5991	next advances the generators internal state to the next value and returns this value as an uint64 .
5992	Seed uses the given value to initialize the generator . If this value is 0 a pre - defined seed is used instead since the xorshift algorithm requires at least one bit of the internal state to be set .
5993	Create a new FrameSet from a given frame range string Returns an error if the frame range could not be parsed .
5994	Process a rangePattern match group
5995	Index returns the index position of the frame value within the frame set . If the given frame does not exist then return - 1
5996	Frame returns the frame number value for a given index into the frame set . If the index is outside the bounds of the frame set range then an error is returned .
5997	HasFrame returns true if the frameset contains the given frame value .
5998	FrameRangePadded returns the range string that was used to initialize the FrameSet with each number padded out with zeros to a given width
5999	Normalize returns a new sorted and compacted FrameSet
6000	FramesToFrameRange takes a slice of frame numbers and compresses them into a frame range string . If sorted == true pre - sort the frames instead of respecting their current order in the range . If zfill > 1 then pad out each number with 0 to the given total width .
6001	frameRangeMatches breaks down the string frame range into groups of range matches for further processing .
6002	Expands a start end and stepping value into the full range of int values .
6003	Create a new workManager with input and output channels with a given list of options
6004	processSources pulls from input channels and processes them into the output channel until there is no more work
6005	Returns true if the input channels are nil
6006	CloseInputs closes the input channels indicating that no more paths will be loaded .
6007	loadStandard takes paths and loads them into the dir input channel for processing
6008	Parallel walk the root paths and populate the path channel for the worker routines to consume .
6009	Take a list of paths and reduce them to cleaned and unique paths . Return two slices separated by directory paths and sequence patterns
6010	PadFrameRange takes a frame range string and returns a new range with each number padded out with zeros to a given width
6011	Left pads a string to a given with using 0 . If the string begins with a negative - character then padding is inserted between the - and the remaining characters .
6012	Left pads an int to a given with using 0 . If the string begins with a negative - character then padding is inserted between the - and the remaining characters .
6013	NewInclusiveRange creates a new InclusiveRange instance
6014	String returns a formatted string representation of the integer range
6015	End returns the end of the range . This value may be different from the end value given when the range was first initialized since it takes into account the stepping value . The end value may be shifted to the closest valid value within the stepped range .
6016	Len returns the number of values in the range
6017	Min returns the smallest value in the range
6018	Max returns the highest value in the range
6019	Contains returns true if the given value is a valid value within the value range .
6020	closestInRange finds the closest valid value within the range to a given value . Values outside the range are clipped to either the range min or max .
6021	Index returns the 0 - based index of the first occurrence given value within the range . If the value does not exist in the range a value of - 1 will be returned
6022	String returns the formatted representation of the combination of all internal InclusiveRange instances
6023	Len returns the total number of values across all ranges
6024	Start returns the first value of the first range
6025	End returns the last value of the last range
6026	Min returns the smallest value in the total range
6027	Max returns the highest value in the total range
6028	NumRanges returns the number of discreet sets of ranges that were appended .
6029	rangeAt returns the underlying InclusiveRange instance that was appended at a given index
6030	Append creates and adds another range of values to the total range list .
6031	AppendUnique creates and adds another range of values to the total range list . Only unique values from the given range are appended to the total range .
6032	Contains returns true if a given value is a valid value within the total range .
6033	Index returns the 0 - based index of the first occurrence of the given value within the range . If the value does not exist in the range a value of - 1 will be returned .
6034	FrameRange returns the string frame range component parsed from the sequence . If no frame range was parsed then this method will return an empty string .
6035	FrameRangePadded returns the string frame range component parsed from the sequence and padded out by the pad characters . If no frame range was parsed then this method will return an empty string .
6036	Index returns the path to the file at the given index in the sequence . If a frame range was not parsed from the sequence this will always returns the original path . If the index is not valid this will return an empty string .
6037	Set a new dirname for the sequence
6038	Set a new padding characters for the sequence
6039	Set a new padding style for mapping between characters and their numeric width
6040	Set a new ext for the sequence
6041	Set a new FrameSet by way of providing a string frame range . If the frame range cannot be parsed an error will be returned .
6042	Len returns the number of frames in the FrameSet . If a frame range was not parsed this will always return 1
6043	String returns the formatted sequence
6044	Copy returns a copy of the FileSequence
6045	NewClient return SOAP client
6046	UnmarshalXML unmarshal SOAPHeader
6047	UnmarshalXML unmarshal SOAPBody
6048	Call SOAP client API call
6049	JSONDoc loads a json document from either a file or a remote url
6050	AddLoader for a document
6051	JSONSpec loads a spec from a json document
6052	Embedded returns a Document based on embedded specs . No analysis is required
6053	Spec loads a new spec document
6054	Analyzed creates a new analyzed spec document
6055	Expanded expands the ref fields in the spec document and returns a new spec document
6056	ResetDefinitions gives a shallow copy with the models reset
6057	Pristine creates a new pristine document instance based on the input data
6058	Opens a GeoIP database by filename with specified GeoIPOptions flag . All formats supported by libgeoip are supported though there are only functions to access some of the databases in this API . If you don t pass a filename it will try opening the database from a list of common paths .
6059	Takes an IPv4 address string and returns the organization name for that IP . Requires the GeoIP organization database .
6060	Returns the country code and region code for an IP address . Requires the GeoIP Region database .
6061	Returns the region name given a country code and region code
6062	Takes an IPv4 address string and returns the country code for that IP and the netmask for that IP range .
6063	NewRotatingFileHandler creates a RotatingFileHandler
6064	Close implements Handler interface
6065	String returns level String
6066	New creates a logger with specified handler and flag
6067	Close closes the logger
6068	SetLevelByName sets log level by name
6069	Output records the log with special callstack depth and log level .
6070	Output json format records the log with special callstack depth and log level .
6071	Print records the log with trace level
6072	Println records the log with trace level
6073	Debug records the log with debug level
6074	Debugln records the log with debug level
6075	Error records the log with error level
6076	Errorln records the log with error level
6077	Info records the log with info level
6078	Infoln records the log with info level
6079	Warn records the log with warn level
6080	Warnln records the log with warn level
6081	NewStreamHandler creates a StreamHandler
6082	Right right - pads the string with pad up to len runes
6083	New returns a Self - Service API client .
6084	Initialize GenMetadata from each SS API generated metadata
6085	Recursively record all type declarations
6086	Sort action params by name
6087	Parse data type in context
6088	Build action param struct from json data
6089	New parameter from raw values
6090	Produce action return type name
6091	Produce go type name from given ruby type name
6092	Return dumpable representation of given object
6093	Returns true if given name is the name of a built - in type
6094	MatchHref returns true if the given href matches one of the action s href patterns exactly
6095	Substitute attemps to substitute the path pattern variables with the given values . - If the substitution succeeds it returns the resulting path and the list of variable names that were used to build it . - If the substitution fails it returns an empty string and the list of variable names that are missing from the list of given values .
6096	MarshalJSON just inserts the contents of the file from disk inline into the json
6097	Handle payload params . Each payload param gets its own multipart form section with the section name being the variable name and section contents being the variable contents . Handle recursion as well .
6098	PerformRequest logs the request dumping its content if required then makes the request and logs and dumps the corresponding response .
6099	PerformRequestWithContext performs everything the PerformRequest does but is also context - aware .
6100	LoadResponse deserializes the JSON response into a generic object . If the response has a Location header then the returned object is a map with one key Location containing the value of the header .
6101	ScheduleLocator builds a locator from the given href .
6102	TemplateLocator builds a locator from the given href .
6103	Fetch details about all servers and server arrays in an environment
6104	Builds the aliases string based on the SSH configuration of all servers and server arrays in all environments .
6105	Makes a GET call on the given server array and returns all its current instances .
6106	Makes a GET call on the given server and returns the current instance of the server .
6107	Convert version number in index . json to go package name 1 . 6 = > v1_6
6108	Helper function that reads content from given file
6109	Command line client entry point .
6110	Helper that runs command line with give command client
6111	Constructs an http response from JSON input from Stdin
6112	AccountLocator builds a locator from the given href .
6113	AccountGroupLocator builds a locator from the given href .
6114	AlertLocator builds a locator from the given href .
6115	AlertSpecLocator builds a locator from the given href .
6116	AuditEntryLocator builds a locator from the given href .
6117	BackupLocator builds a locator from the given href .
6118	ChildAccountLocator builds a locator from the given href .
6119	CloudLocator builds a locator from the given href .
6120	CloudAccountLocator builds a locator from the given href .
6121	CookbookLocator builds a locator from the given href .
6122	CookbookAttachmentLocator builds a locator from the given href .
6123	CredentialLocator builds a locator from the given href .
6124	DatacenterLocator builds a locator from the given href .
6125	DeploymentLocator builds a locator from the given href .
6126	HealthCheckLocator builds a locator from the given href .
6127	IdentityProviderLocator builds a locator from the given href .
6128	ImageLocator builds a locator from the given href .
6129	InputLocator builds a locator from the given href .
6130	InstanceLocator builds a locator from the given href .
6131	InstanceTypeLocator builds a locator from the given href .
6132	IpAddressLocator builds a locator from the given href .
6133	IpAddressBindingLocator builds a locator from the given href .
6134	MonitoringMetricLocator builds a locator from the given href .
6135	MultiCloudImageLocator builds a locator from the given href .
6136	MultiCloudImageMatcherLocator builds a locator from the given href .
6137	MultiCloudImageSettingLocator builds a locator from the given href .
6138	NetworkLocator builds a locator from the given href .
6139	NetworkGatewayLocator builds a locator from the given href .
6140	NetworkOptionGroupLocator builds a locator from the given href .
6141	NetworkOptionGroupAttachmentLocator builds a locator from the given href .
6142	Oauth2Locator builds a locator from the given href .
6143	PermissionLocator builds a locator from the given href .
6144	PlacementGroupLocator builds a locator from the given href .
6145	PreferenceLocator builds a locator from the given href .
6146	PublicationLocator builds a locator from the given href .
6147	PublicationLineageLocator builds a locator from the given href .
6148	RecurringVolumeAttachmentLocator builds a locator from the given href .
6149	RepositoryLocator builds a locator from the given href .
6150	RepositoryAssetLocator builds a locator from the given href .
6151	ResourceGroupLocator builds a locator from the given href .
6152	RightScriptLocator builds a locator from the given href .
6153	RightScriptAttachmentLocator builds a locator from the given href .
6154	RouteLocator builds a locator from the given href .
6155	RouteTableLocator builds a locator from the given href .
6156	RunnableBindingLocator builds a locator from the given href .
6157	SchedulerLocator builds a locator from the given href .
6158	SecurityGroupLocator builds a locator from the given href .
6159	SecurityGroupRuleLocator builds a locator from the given href .
6160	ServerLocator builds a locator from the given href .
6161	ServerArrayLocator builds a locator from the given href .
6162	ServerTemplateLocator builds a locator from the given href .
6163	ServerTemplateMultiCloudImageLocator builds a locator from the given href .
6164	SessionLocator builds a locator from the given href .
6165	SshKeyLocator builds a locator from the given href .
6166	SubnetLocator builds a locator from the given href .
6167	TagLocator builds a locator from the given href .
6168	TaskLocator builds a locator from the given href .
6169	UserLocator builds a locator from the given href .
6170	UserDataLocator builds a locator from the given href .
6171	VolumeLocator builds a locator from the given href .
6172	VolumeAttachmentLocator builds a locator from the given href .
6173	VolumeSnapshotLocator builds a locator from the given href .
6174	VolumeTypeLocator builds a locator from the given href .
6175	RegisterCommands registers all the commands with the kinpin application .
6176	ShowCommandHelp displays the command help .
6177	ShowAPIActions displays the command hrefs .
6178	ShowHelp displays help for the given command and flags .
6179	ParseCommandAndFlags parses a command flag and infers the resource action href and params .
6180	Validate flag value using validation criteria provided in metadata
6181	Reconstruct query from flatten values
6182	Reconstruct payload map from flatten values
6183	Attempt to shorten action pattern for display by looking at other action hrefs and picking one that doesn t have the suffix if there is one .
6184	cleans up description removing blank lines and extraneous info
6185	fileExists reads content from existing file and returns a byte array
6186	AnalysisSnapshotLocator builds a locator from the given href .
6187	BudgetAlertLocator builds a locator from the given href .
6188	CloudBillLocator builds a locator from the given href .
6189	CloudBillMetricLocator builds a locator from the given href .
6190	CurrentUserLocator builds a locator from the given href .
6191	InstanceCombinationLocator builds a locator from the given href .
6192	InstanceMetricLocator builds a locator from the given href .
6193	InstanceUsagePeriodLocator builds a locator from the given href .
6194	PatternLocator builds a locator from the given href .
6195	ReservedInstanceLocator builds a locator from the given href .
6196	ReservedInstancePurchaseLocator builds a locator from the given href .
6197	ScenarioLocator builds a locator from the given href .
6198	ScheduledReportLocator builds a locator from the given href .
6199	TempInstancePriceLocator builds a locator from the given href .
6200	UserSettingLocator builds a locator from the given href .
6201	Read file asynchronously
6202	Extract command line argument with given name and return remaining arguments
6203	Helper function that appends a string to output file
6204	AppliedPolicyLocator builds a locator from the given href .
6205	ApprovalLocator builds a locator from the given href .
6206	IncidentLocator builds a locator from the given href .
6207	PolicyTemplateLocator builds a locator from the given href .
6208	PublishedTemplateLocator builds a locator from the given href .
6209	DebugCookbookPathLocator builds a locator from the given href .
6210	DockerControlLocator builds a locator from the given href .
6211	EnvLocator builds a locator from the given href .
6212	LoginControlLocator builds a locator from the given href .
6213	ProcLocator builds a locator from the given href .
6214	Rl10Locator builds a locator from the given href .
6215	TSSLocator builds a locator from the given href .
6216	TSSControlLocator builds a locator from the given href .
6217	TSSPluginLocator builds a locator from the given href .
6218	NewAngularWriter creates a new code writer that generates angular . js types .
6219	WriteResource writes the code for a resource .
6220	Path for given action for now simplify and take first path in PathPatterns . In the future we may want to create one action in generated JS per path .
6221	Returns true if parameter with given name is mandatory
6222	New returns a API client that uses the given authenticator . host may be blank in which case client attempts to resolve it using auth .
6223	FromCommandLine builds an API client from the command line .
6224	CanAuthenticate makes a test authenticated request to the RightScale API and returns an error if it fails .
6225	Encrypt encrypts the given text with a hard - coded secret . Not truly secure .
6226	Decrypt decrypts the given encrypted string using the hard - coded secret .
6227	guessType tries to guess the resource name based on the definition and service . This info is not stored in the swagger . TBD manual overrides if needed .
6228	addType conditionally adds a new type trying its best to avoid type collisions . This is the downside of swagger 2 vs swagger 3 . For swagger 2 if you the same type like User returned in multiple places each have to create their own definition in the swagger definitions section for goa v2 . So they ll be X copies of identical definition for a User struct lets say . This tries to collapse those things down into one return type struct .
6229	extractCmdLineParams generates flags for the command line
6230	NewMetadataWriter creates a new writer that generates metadata data structures .
6231	WriteHeader writes the generic header text .
6232	WriteMetadata writes the data structures that describe the API resources and actions .
6233	Return code corresponding to param location
6234	New returns a client that uses RL10 authentication . accountId host and auth arguments are not used . If no HTTP client is specified then the default client is used .
6235	Wrap generic client into RL10 client
6236	BuildRequest builds a HTTP request from a resource name and href and an action name and parameters . It is intended for generic clients that need to consume APIs in a generic maner . The method builds an HTTP request that can be fed to PerformRequest .
6237	Initialize GenMetadata from each CA API generated metadata
6238	NewDisplayer creates a new displayer using the response body .
6239	ApplySingleExtract applies the given JSON selector and returns the results . It s an error if the selector yields more than one value .
6240	ApplyExtract applies selector to js .
6241	ApplyHeaderExtract reads the value of the given header .
6242	Output returns the current output .
6243	NewAPIAnalyzer is the factory method for the API analyzer
6244	Analyze iterate through all resources and initializes the Resources and ParamTypes fields of the APIAnalyzer struct accordingly .
6245	AnalyzeAliases goes through the aliases and copies the details from original actions to the aliased actions . It skips the route field since we have the routes hard - coded in the ParseRoute function .
6246	LocatorFunc returns the source code for building a locator instance from a resource .
6247	ParseRoute parses a API 1 . 5 route and returns corresponding path patterns .
6248	true if path is for a deprecated API
6249	Heuristic to determine whether given param is a query string param For now only consider view and filter ...
6250	Look in given path patterns to chek whether given parameter name corresponds to a variable name .
6251	Make an API call and fetch the audit entries matching specified criteria
6252	Returns time in RightScale API supported format
6253	Prints the audit entries to console
6254	Extract unique audit entries from the newly received list by comparing the href of audit entries in the old list .
6255	Get the href of an audit entry from the Links attribute by inspecting the self link
6256	Print error message and exit with code 1
6257	Serialize action parameters
6258	Produces code that initializes a APIParams struct with the values of parameters for the given action and location .
6259	Command line used to run tool
6260	GET = > Get
6261	Escape in string to be wrapped in them
6262	AccountPreferenceLocator builds a locator from the given href .
6263	ApplicationLocator builds a locator from the given href .
6264	EndUserLocator builds a locator from the given href .
6265	NotificationRuleLocator builds a locator from the given href .
6266	UserPreferenceLocator builds a locator from the given href .
6267	UserPreferenceInfoLocator builds a locator from the given href .
6268	LoadConfig loads the client configuration from disk
6269	CreateConfig creates a configuration file and saves it to the file at the given path .
6270	Wrap generic client into API 1 . 0 client
6271	HostFromLogin returns the policy endpoint from its login endpoint . The following isn t great but seems better than having to enter by hand .
6272	AnalyzeParam analyzes input parameters to methods
6273	AnalyzeAttribute analyzes an attribute creating a corresponding ActionParam .
6274	AnalyzeType analyzes a type given its JSON definition .
6275	CreateType is a helper method that creates or retrieve a object data type given its attributes .
6276	Ref gets a definition for a Schema reference if it exists
6277	Type gets a type for a Schema reference if it exists
6278	Required gets a type for a Schema reference if it exists
6279	ID of the reference
6280	Service returns the goa . v2 service
6281	Methods returns the goa . v2 method
6282	NewTypeRegistry creates a type registry .
6283	GetNamedType retrieves a type given its name .
6284	CreateNamedType returns a new type given a name the name must be unique .
6285	CreateInlineType creates a new inline type .
6286	FinalizeTypeNames makes sure type names are unique it should be called after analysis has completed .
6287	Merge two descriptors together make sure there are no duplicate resource names and that common types are compatible .
6288	FinalizeTypeNames goes through all the types generated by the analyzer and generate unique names .
6289	Build unique type name by appending next available index to given prefix
6290	MandatoryParams returns the list of all action mandatory parameters
6291	HasOptionalParams returns true if the action takes optional parameters false otherwise .
6292	MakeUniq makes a unique name given a prefix and a set of names .
6293	NewClientWriter is the client writer factory .
6294	WriteHeader writes the header text .
6295	WriteResourceHeader writes the resource header .
6296	WriteType writest the type declaration for a resource action arguments .
6297	WriteResource writest the code for a resource .
6298	WithTrail creates a new context with trail appended to
6299	AnalyzeEndpoint creates an API descriptor from goa v2 generated swagger definition
6300	NetworkInterfaceLocator builds a locator from the given href .
6301	NetworkInterfaceAttachmentLocator builds a locator from the given href .
6302	UnmarshalJSON implements the unmarshaller interface .
6303	ExecutionLocator builds a locator from the given href .
6304	NotificationLocator builds a locator from the given href .
6305	OperationLocator builds a locator from the given href .
6306	ScheduledActionLocator builds a locator from the given href .
6307	NewBasicAuthenticator returns a authenticator that uses email and password to create sessions . The returned authenticator takes care of refreshing the RightScale session as needed .
6308	NewSSAuthenticator returns an authenticator that wraps another one and adds the logic needed to create sessions in Self - Service .
6309	newCookieSigner returns a cookie signer that uses the given builder to build login requests .
6310	Sign adds the username and password authorization cookies to the request . Checks the freshness of the session and creates a new one if needed .
6311	CanAuthenticate makes a test request to CM 1 . 5 and returns true if it is successful .
6312	refresh updates the cookie and expiration used to sign requests from a successful session creation API response .
6313	Sign sets the OAuth authorization header
6314	RL10 authenticator uses special header
6315	Self - Service authenticator first creates a global session with the core then creates a local session with self - service .
6316	SetHost sets the host used to create Self - Service session . Pass in the CM 1 . 5 host this method computes the Self - Service host from it .
6317	CanAuthenticate makes a test request to SS and returns true if it is successful .
6318	extractRedirectURL is a helper function that extracts the Location header from a redirect response . It returns nil if the header is missing an error if it s malformed .
6319	Compute API URL given a scheme hostname and a path
6320	GetAction returns the action with the given name returns nil if none is found .
6321	HasLink returns whether the resource has a link with the given name .
6322	Find paths that match given href
6323	NewPB returns an HTTP client using only the parameter block and ignoring the current values of the package variables which are not go - routine safe .
6324	newVariableDumpClient defines accessors for package variables which are not go - routine safe so can theoretically change value while the client is in use . this emulates the legacy behavior .
6325	newRawClient creates an http package Client taking into account both the parameters and package variables .
6326	DoHidden is equivalent to Do with the exception that nothing gets logged unless DumpFormat is set to Verbose .
6327	Do dumps the request makes the request and dumps the response as specified by DumpFormat .
6328	doImp actually performs the HTTP request logging according to the various settings .
6329	getClientWithoutTimeout returns a modified client that doesn t have the ResponseHeaderTimeout field set in its Transport .
6330	Dump request if needed . Return request serialized as JSON if DumpFormat is JSON nil otherwise .
6331	writeHeaders is a helper function that writes the given HTTP headers to the given buffer as human readable strings . If DumpFormat is not Verbose then writeHeaders filters out headers whose names are keys of HiddenHeaders .
6332	copyHiddenHeaders copies the given map
6333	Make sure all the required information is there
6334	APIClient instantiates a client with the given name from command line arguments .
6335	RegisterClientCommands registers all API client commands .
6336	Interactive configures the logger to log messages of level Info or higher to Stdout and messages of level Error or lesser to Stderr .
6337	Create path pattern from HTTP verb and request path
6338	WithClientIP returns a context which carries the given client IP .
6339	ClientIP returns the client IP embedded in the context or nil if none were found .
6340	NewProducer configures a new producer instance .
6341	StartProducer starts and returns a new producer p configured with the variables from the config parameter or returning an non - nil error if some of the configuration variables were invalid .
6342	Start explicitly begins the producer in case it was initialized with NewProducer instead of StartProducer .
6343	Stop gracefully shutsdown the producer cancelling all inflight requests and waiting for all backend connections to be closed . It is safe to call the method multiple times and from multiple goroutines they will all block until the producer has been completely shutdown .
6344	Publish sends a message using the producer p returning an error if it was already closed or if an error occurred while publishing the message . Note that no retry is done internally the producer will fail after the first unsuccessful attempt to publish the message . It is the responsibility of the caller to retry if necessary .
6345	PublishTo sends a message to a specific topic using the producer p returning an error if it was already closed or if an error occurred while publishing the message . Note that no retry is done internally the producer will fail after the first unsuccessful attempt to publish the message . It is the responsibility of the caller to retry if necessary .
6346	NewLocalEngine creates and returns an instance of LocalEngine configured with config .
6347	validate ensures that this configuration is well - formed .
6348	defaults will set up this configuration with the global defaults where they were not already set .
6349	NewConsumer configures a new consumer instance .
6350	StartConsumer creates and starts consuming from NSQ right away . This is the fastest way to get up and running .
6351	Start explicitly begins consumption in case the consumer was initialized with NewConsumer instead of StartConsumer .
6352	RateLimit consumes messages from the messages channel and limits the rate at which they are produced to the channel returned by this function . The limit is the maximum number of messages per second that are produced . No rate limit is applied if limit is negative or zero . The returned channel is closed when the messages channel is closed .
6353	Write outputs the response to w .
6354	ReadResponse reads res from r or returns an error if no responses could be read .
6355	backoff computes a random exponential backoff value for a given number of attempts and boundaries of min and max backoff durations .
6356	String returns a human - readable representation of the frame type .
6357	NewConsulEngine creates and return a new engine configured with config .
6358	ParseMessageID attempts to parse s which should be an hexadecimal representation of an 8 byte message ID .
6359	WriteTo writes the message ID to w . This method satisfies the io . WriterTo interface .
6360	NewMessage is a helper for creating Message instances directly . A common use - case is for writing tests generally you won t use this directly . If you do use this the Command channel is used internally to communicate message commands such as Finish or Requeue . When using this for testing you can make a channel and inspect any message sent along it for assertions .
6361	Finish must be called on every message received from a consumer to let the NSQ server know that the message was successfully processed . One of Finish or Requeue should be called on every message and the methods will panic if they are called more than once .
6362	Requeue must be called on messages received from a consumer to let the NSQ server know that the message could not be proessed and should be retried . The timeout is the amount of time the NSQ server waits before offering this message again to its consumers . One of Finish or Requeue should be called on every message and the methods will panic if they are called more than once .
6363	ReadCommand reads cmd from r or returns an error if no commands could be read .
6364	FuncMap get func maps from tmpl
6365	Funcs register Funcs for tmpl
6366	Execute execute tmpl
6367	RegisterPath register view paths
6368	Asset get content with name from assetfs
6369	Glob list matched files from assetfs
6370	NameSpace return namespaced filesystem
6371	New initalize the render struct .
6372	RegisterViewPath register view path
6373	SetAssetFS set asset fs for render
6374	Layout set layout for template .
6375	Funcs set helper functions for template with default application layout .
6376	Execute render template with default application layout .
6377	RegisterFuncMap register FuncMap for render .
6378	Asset get content from AssetFS by name
6379	A client implementation of the PLAIN authentication mechanism as described in RFC 4616 . Authorization identity may be left blank to indicate that it is the same as the username .
6380	Create creates an S3 object at url and sends multipart upload requests as data is written . If h is not nil each of its entries is added to the HTTP request header . If c is nil Create uses DefaultConfig .
6381	Open requests the S3 object at url . An HTTP status other than 200 is considered an error . If c is nil Open uses DefaultConfig .
6382	Sign signs an HTTP request with the given S3 keys . This function is a wrapper around DefaultService . Sign .
6383	Sign signs an HTTP request with the given S3 keys for use on service s .
6384	Readdir requests a list of entries in the S3 directory represented by f and returns a slice of up to n FileInfo values in alphabetical order . Subsequent calls on the same File will yield further FileInfos . Only direct children are returned not deeper descendants .
6385	Find finds nodes based on the pathexpr . PathExpr
6386	Lex an XPath expresion on the io . Reader
6387	MustParseXML is like ParseXML but panics instead of returning an error .
6388	ParseXML creates an XMLTree structure from an io . Reader .
6389	Call checks the arguments and calls Fn if they are valid
6390	Parse parses the XPath expression xp returning an XPath executor .
6391	MustParse is like Parse but panics instead of returning an error .
6392	Exec executes the XPath expression xp against the tree t with the namespace mappings ns and returns the result as a stringer .
6393	ExecBool is like Exec except it will attempt to convert the result to its boolean value .
6394	ExecNum is like Exec except it will attempt to convert the result to its number value .
6395	ExecNode is like Exec except it will attempt to return the result as a node - set .
6396	MustExec is like Exec but panics instead of returning an error .
6397	ParseExec parses the XPath string xpstr and runs Exec .
6398	CreateNode is an implementation of xmlbuilder . XMLBuilder . It appends the node specified in opts and returns the child if it is an element . Otherwise it returns x .
6399	GetChildren returns all child nodes of the element
6400	GetAttrs returns all attributes of the element
6401	ResValue returns the string value of the element and children
6402	Parse creates an AST tree for XPath expressions .
6403	GetToken returns the xml . Token representation of the node
6404	ResValue returns the string value of the attribute
6405	Exec executes the XPath expression xp against the tree t with the namespace mappings ns .
6406	ResValue satisfies the Res interface for Num
6407	Num satisfies the HasNum interface for String s
6408	BuildNS resolves all the namespace nodes of the element and returns them
6409	GetAttribute is a convenience function for getting the specified attribute from an element . false is returned if the attribute is not found .
6410	GetAttributeVal is like GetAttribute except it returns the attribute s value .
6411	GetAttrValOrEmpty is like GetAttributeVal except it returns an empty string if the attribute is not found instead of false .
6412	FindNodeByPos finds a node from the given position . Returns nil if the node is not found .
6413	Marshal prints the result tree r in XML form to w .
6414	MarshalStr is like Marhal but returns a string .
6415	NewLexer creates a new Lexer reading from io . Reader . This Lexer has a DefaultTokenizer according to posix and whitespacesplit rules .
6416	NewLexerString creates a new Lexer reading from a string . This Lexer has a DefaultTokenizer according to posix and whitespacesplit rules .
6417	Split splits a string according to posix or non - posix rules .
6418	Register registers a new error type
6419	Get returns the descriptor if it exists or nil otherwise
6420	GetAll returns all registered error descriptors
6421	From lifts an error to be and Error
6422	Descriptor returns the error descriptor from any error
6423	GetAttributes returns the error attributes or falls back to empty attributes
6424	HTTPStatusCode returns the corresponding http status code from an error type
6425	HTTPStatusCode returns the HTTP status code for the given error or 500 if it doesn t know
6426	HTTPStatusToType infers the error Type from a HTTP Status code
6427	ToHTTP writes the error to the http response
6428	toImpl creates an equivalent impl for any Error
6429	MetadataFromIncomingContext gets the metadata from the given context
6430	MetadataFromOutgoingContext gets the metadata from the given context
6431	TokenFromMetadata gets the token from the metadata or returns ErrNoToken
6432	TokenFromIncomingContext gets the token from the incoming context or returns ErrNoToken
6433	OutgoingContextWithToken returns an outgoing context with the token
6434	KeyFromMetadata gets the key from the metadata or returns ErrNoKey
6435	KeyFromIncomingContext gets the key from the incoming context or returns ErrNoKey
6436	OutgoingContextWithKey returns an outgoing context with the key
6437	IDFromMetadata gets the key from the metadata or returns ErrNoID
6438	IDFromIncomingContext gets the key from the incoming context or returns ErrNoID
6439	OutgoingContextWithID returns an outgoing context with the id
6440	ServiceInfoFromMetadata gets the service information from the metadata or returns empty strings
6441	ServiceInfoFromIncomingContext gets the service information from the incoming context or returns empty strings
6442	OutgoingContextWithServiceInfo returns an outgoing context with the id
6443	LimitFromMetadata gets the limit from the metadata
6444	OffsetFromMetadata gets the offset from the metadata
6445	LimitAndOffsetFromIncomingContext gets the limit and offset from the incoming context
6446	OutgoingContextWithLimitAndOffset returns an outgoing context with the limit and offset
6447	returns true if i before j
6448	New creates a new error based on the error descriptor
6449	WithNamespace adds a namespace to the logging context
6450	Wrap wraps the logger in a Namespaced logger and enables the specified namespaces . See SetNamespaces for information on how to set the namspaces
6451	WithField adds a field to the logger
6452	WithFields adds multiple fields to the logger
6453	Format formats the values into the provided string
6454	Fix coerces types that cannot be formatted by messageformat to string
6455	GRPCCode returns the corresponding http status code from an error type
6456	GRPCCodeToType converts the gRPC error code to an error type or returns the Unknown type if not possible .
6457	GRPCCode returns the corresponding http status code from an error
6458	FromGRPC parses a gRPC error and returns an Error
6459	ToGRPC turns an error into a gRPC error
6460	isEnabled checks wether or not the namespace is enabled
6461	Set updates the namespaces
6462	Cause returns the cause of an error
6463	pareCode parses a string into a Code or returns 0 if the parse failed
6464	UnaryServerInterceptor applies fn to errors returned by server .
6465	StreamServerInterceptor applies fn to errors returned by server .
6466	UnaryClientInterceptor applies fn to errors recieved by client .
6467	StreamClientInterceptor applies fn to errors recieved by client .
6468	Interceptor automatically restarts streams on non - expected errors To do so the application should create a for - loop around RecvMsg which returns the same errors that are received from the server . An io . EOF indicates the end of the stream To stop the reconnect behaviour you have to cancel the context
6469	Wrap logrus . Logger
6470	NewCounter returns a new rate counter with the given bucket size and retention
6471	NewRedisCounter returns a new redis - based counter
6472	NewLimiter returns a new limiter
6473	WithInsecure returns a copy of the TokenCredentials allowing insecure transport
6474	WithTokenFunc returns TokenCredentials that execute the tokenFunc on each request The value of v sent to the tokenFunk is the MD value of the supplied k
6475	GetRequestMetadata implements credentials . PerRPCCredentials
6476	FieldsFromIncomingContext returns peer information and MDLogFields from the given context
6477	String implements stringer
6478	UnmarshalText implements TextUnmarsheler
6479	fromString parses a string into an error type . If the type is invalid the Unknown type will be returned as well as an error .
6480	Start starts the stat process that will log relevant memory - related stats to ctx at an interval determined by interval .
6481	NewSimple returns a new Simple Queue
6482	Wrap wraps an existing logger filtering the fields as it goes along using the provided filters
6483	WithFilter creates a new Filtered that will use the extra filters
6484	WithField filters the field and passes it on to the wrapped loggers WithField
6485	WithFields filters the fields and passes them on to the wrapped loggers WithFields
6486	FilterSensitive creates a Filter that filters most sensitive data like passwords keys access_tokens etc . and replaces them with the elided value
6487	SliceFilter lifts the filter to also work on slices . It loses the type information of the slice elements
6488	MapFilter lifts the filter to also work on maps . It loses the type information of the map fields
6489	RestrictFilter restricts the filter to only work on a certain field
6490	LowerCaseFilter creates a filter that only get passed lowercase field names
6491	newBatchPoints creates new influxdb . BatchPoints with specified bpConf . Panics on errors .
6492	NewSinglePointWriter creates new SinglePointWriter
6493	Write creates new influxdb . BatchPoints containing p and delegates that to the writer
6494	WithInstanceLimit sets a limit on amount of additional instances spawned by BatchingWriter
6495	NewBatchingWriter creates new BatchingWriter . If WithScalingInterval is not specified DefaultScalingInterval value is used . If WithInstanceLimit is not specified DefaultInstanceLimit is used .
6496	Write delegates p to a running instance of BatchingWriter and spawns new instances as required .
6497	MustParseLevel is a convience function that parses the passed in string as a log level and sets the log level of the apexInterfaceWrapper to the parsed level . If an error occurs it will handle it with w . Fatal
6498	New returns a new Stream with the given buffer size and setup function .
6499	SetLogger sets the logger for this streambuffer
6500	CloseRecv closes the receive channel
6501	Stats of the stream
6502	Run the stream . This calls the underlying grpc . ClientStreams methods to send and receive messages over the stream . Run returns the error returned by any of those functions or context . Canceled if the context is canceled .
6503	ServerOptions for logging RPCs
6504	ClientOptions for logging RPCs
6505	UnaryServerInterceptor logs unary RPCs on the server side
6506	StreamServerInterceptor logs streaming RPCs on the server side
6507	UnaryClientInterceptor logs unary RPCs on the client side
6508	StreamClientInterceptor logs streaming RPCs on the client side
6509	defaults applies defaults to the config .
6510	Flush the current batch .
6511	New handler .
6512	HandleLog implements log . Handler .
6513	New returns a new Random in most cases you can also just use the global funcs
6514	Names returns the names of all variables within the template .
6515	String returns the string representation of a PerfDatum suitable for check output .
6516	RenderPerfdata accepts a slice of PerfDatum objects and returns their concatenated string representations in a form suitable to append to the first line of check output .
6517	Exit is a standalone exit function for simple checks without multiple results or perfdata .
6518	NewCheckWithOptions returns an empty Check object with caller - specified behavioural modifications . See CheckOptions .
6519	AddResult adds a check result . This will not terminate the check . If status is the highest yet reported this will update the check s final return status .
6520	AddResultf functions as AddResult but takes a printf - style format string and arguments .
6521	String representation of the check results suitable for output and parsing by Nagios .
6522	Exitf takes a status plus a format string and a list of parameters to pass to Sprintf . It then immediately outputs and exits .
6523	Criticalf is a shorthand function which exits the check with status CRITICAL and the message provided .
6524	Unknownf is a shorthand function which exits the check with status UNKNOWN and the message provided .
6525	NewDefaultStatusPolicy returns a status policy that assigns relative severity in accordance with conventional Nagios plugin return codes . Statuses associated with higher return codes are more severe .
6526	NewStatusPolicy returns a status policy that assigns relative severity in accordance with a user - configurable prioritised slice . Check statuses must be listed in ascending severity order .
6527	ParseRange returns a new range object and nil if the given range definition was valid or nil and an error if it was invalid .
6528	Check returns true if an alert should be raised based on the range ( if the value is outside the range for normal semantics or if the value is inside the range for inverted semantics (
6529	CheckInt is a convenience method which does an unchecked type conversion from an int to a float64 .
6530	CheckUint64 is a convenience method which does an unchecked type conversion from an uint64 to a float64 .
6531	NewClient returns a configured Rundeck client .
6532	GetKeyMeta returns the metadata for the key at the given keystore path .
6533	GetKeysInDirMeta returns the metadata for the keys and subdirectories within the directory at the given keystore path .
6534	GetKeyContent retrieves and returns the content of the key at the given keystore path . Private keys are write - only so they cannot be retrieved via this interface .
6535	GetJobSummariesForProject returns summaries of the jobs belonging to the named project .
6536	GetJobsForProject returns the full job details of the jobs belonging to the named project .
6537	GetJob returns the full job details of the job with the given id .
6538	CreateJob creates a new job based on the provided structure .
6539	CreateOrUpdateJob takes a job detail structure which has its ID set and either updates an existing job with the same id or creates a new job with that id .
6540	DeleteJob deletes the job with the given id .
6541	JobSummary produces a JobSummary instance with values populated from the import result . The summary object won t have its Description populated since import results do not include descriptions .
6542	GetSystemInfo retrieves and returns miscellaneous system information about the Rundeck server and the machine it s running on .
6543	DateTime produces a time . Time object from a SystemTimestamp object .
6544	GetAllProjects retrieves and returns all of the projects defined in the Rundeck server .
6545	GetProject retrieves and returns the named project .
6546	CreateProject creates a new empty project .
6547	DeleteProject deletes a project and all of its jobs .
6548	SetProjectConfig replaces the configuration of the named project .
6549	NewClient is a constructor for Client object
6550	NewClientbyToken is a constructor for Client object using bearer tokens for authentication instead of username password
6551	SetDepth sets depth parameter for api calls
6552	ListDatacenters lists all data centers
6553	CreateDatacenter creates a data center
6554	GetDatacenter gets a datacenter
6555	UpdateDataCenter updates a data center
6556	DeleteDatacenter deletes a data center
6557	WaitTillProvisioned helper function
6558	ListFirewallRules lists all firewall rules
6559	GetFirewallRule gets a firewall rule
6560	CreateFirewallRule creates a firewall rule
6561	UpdateFirewallRule updates a firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers returns a Collection struct for loadbalancers in the Datacenter
6564	GetLoadbalancer pulls data for the Loadbalancer where id = lbalid returns a Instance struct
6565	UpdateLoadbalancer updates a load balancer
6566	DeleteLoadbalancer deletes a load balancer
6567	ListBalancedNics lists balanced nics
6568	AssociateNic attach a nic to load balancer
6569	GetBalancedNic gets a balanced nic
6570	DeleteBalancedNic removes a balanced nic
6571	ListLans returns a Collection for lans in the Datacenter
6572	GetLan pulls data for the lan where id = lanid returns an Instance struct
6573	DeleteLan deletes a lan where id == lanid
6574	ListNics returns a Nics struct collection
6575	CreateNic creates a nic on a server
6576	GetNic pulls data for the nic where id = srvid returns a Instance struct
6577	UpdateNic partial update of nic properties
6578	DeleteNic deletes the nic where id = nicid and returns a Resp struct
6579	ListSnapshots lists all snapshots
6580	GetSnapshot gets a specific snapshot
6581	DeleteSnapshot deletes a specified snapshot
6582	UpdateSnapshot updates a snapshot
6583	ListIPBlocks lists all IP blocks
6584	ReserveIPBlock creates an IP block
6585	GetIPBlock gets an IP blocks
6586	UpdateIPBlock partial update of ipblock properties
6587	ReleaseIPBlock deletes an IP block
6588	ListVolumes returns a Collection struct for volumes in the Datacenter
6589	GetVolume gets a volume
6590	UpdateVolume updates a volume
6591	CreateVolume creates a volume
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a volume snapshot
6594	RestoreSnapshot restores a volume with provided snapshot
6595	ListServers returns a server struct collection
6596	GetServer pulls data for the server where id = srvid returns a Instance struct
6597	DeleteServer deletes the server where id = srvid and returns Resp struct
6598	ListAttachedCdroms returns list of attached cd roms
6599	AttachCdrom attaches a CD rom
6600	GetAttachedCdrom gets attached cd roms
6601	DetachCdrom detaches a CD rom
6602	ListAttachedVolumes lists attached volumes
6603	AttachVolume attaches a volume
6604	GetAttachedVolume gets an attached volume
6605	DetachVolume detaches a volume
6606	StartServer starts a server
6607	ListLocations returns location collection data
6608	GetRegionalLocations returns a list of available locations in a specific region
6609	GetLocation returns location data
6610	GetContractResources returns list of contract resources
6611	ListImages returns an Collection struct
6612	GetImage returns an Instance struct where id == imageid
6613	PrintHeaders prints the http headers as k v pairs
6614	ListGroups lists all groups
6615	GetGroup gets a group
6616	CreateGroup creates a group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	ListShares lists all shares
6620	GetShare gets a share
6621	AddShare adds a share
6622	UpdateShare updates a share
6623	DeleteShare deletes a share
6624	ListGroupUsers lists Users in a group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup removes a user from a group
6627	ListUsers lists all users
6628	GetUser gets a user
6629	CreateUser creates a user
6630	UpdateUser updates user information
6631	DeleteUser deletes the specified user
6632	ListResources lists all resources
6633	GetResourceByType gets a resource by type
6634	ListResourcesByType list resources by type
6635	ListRequests lists all requests
6636	GetRequest gets a specific request
6637	GetRequestStatus retursn status of the request
6638	Close our writer . Subsequent writes will fail .
6639	GetSerializableArgument get serializable argument
6640	BoolVar defines a bool flag with specified name default value and usage string . The argument p points to a bool variable in which to store the value of the flag .
6641	Bool defines a bool flag with specified name default value and usage string . The return value is the address of a bool variable that stores the value of the flag .
6642	IntVar defines an int flag with specified name default value and usage string . The argument p points to an int variable in which to store the value of the flag .
6643	Int defines an int flag with specified name default value and usage string . The return value is the address of an int variable that stores the value of the flag .
6644	Int64Var defines an int64 flag with specified name default value and usage string . The argument p points to an int64 variable in which to store the value of the flag .
6645	Int64 defines an int64 flag with specified name default value and usage string . The return value is the address of an int64 variable that stores the value of the flag .
6646	UintVar defines a uint flag with specified name default value and usage string . The argument p points to a uint variable in which to store the value of the flag .
6647	Uint defines a uint flag with specified name default value and usage string . The return value is the address of a uint variable that stores the value of the flag .
6648	Uint64Var defines a uint64 flag with specified name default value and usage string . The argument p points to a uint64 variable in which to store the value of the flag .
6649	Uint64 defines a uint64 flag with specified name default value and usage string . The return value is the address of a uint64 variable that stores the value of the flag .
6650	StringVar defines a string flag with specified name default value and usage string . The argument p points to a string variable in which to store the value of the flag .
6651	String defines a string flag with specified name default value and usage string . The return value is the address of a string variable that stores the value of the flag .
6652	Float64Var defines a float64 flag with specified name default value and usage string . The argument p points to a float64 variable in which to store the value of the flag .
6653	Float64 defines a float64 flag with specified name default value and usage string . The return value is the address of a float64 variable that stores the value of the flag .
6654	DurationVar defines a time . Duration flag with specified name default value and usage string . The argument p points to a time . Duration variable in which to store the value of the flag .
6655	Duration defines a time . Duration flag with specified name default value and usage string . The return value is the address of a time . Duration variable that stores the value of the flag .
6656	Parse parses the environment flags from os . Environ . Must be called after all flags are defined and before flags are accessed by the program .
6657	WriteStringToFile writes the string to the file at the provided path .
6658	ReadFileToString reads the file at the provided path to a string .
6659	LineReader returns a channel that reads the contents of a reader line - by - line .
6660	LineReaderFrom returns a channel that reads the contents of a file line - by - line .
6661	FileExists returns a flag indicating whether a provided file path exists .
6662	FileExistsInPath returns a flag indicating whether the provided file exists in the current path .
6663	GetPathParts returns the absolute directory path the file name and the absolute path of the provided path string .
6664	GetThisPathParts returns the same information as GetPathParts for the current executable .
6665	RandomString generates a random set of characters with the given lenght .
6666	ParseAddress parses a standard golang network address and returns the protocol and path .
6667	HomeDir returns the home directory of the user that owns the current process .
6668	IsTCPPortAvailable returns a flag indicating whether or not a TCP port is available .
6669	RandomTCPPort gets a free random TCP port between 1025 - 65535 . If no free ports are available - 1 is returned .
6670	HashString works like hash but accept string as an input .
6671	Context gets implements RPCServer interface .
6672	Token implements oauth2 . TokenSource interface .
6673	NewDaemon allocates new daemon instance using given options .
6674	Close implements io . Closer interface .
6675	NewAccessTokenContext returns a new Context that carries token value .
6676	AccessTokenFromContext returns the token value stored in context if any .
6677	RandomAccessToken generate Access Token with given key and generated hash of length 64 .
6678	Init allocates new logger based on given options .
6679	Load loads a dictionary from a file .
6680	Start implements storage interface .
6681	Get implements storage interface .
6682	List implements storage interface .
6683	Exists implements storage interface .
6684	Abandon implements storage interface .
6685	SetValue implements storage interface .
6686	Delete implements storage interface .
6687	Setup implements storage interface .
6688	TearDown implements storage interface .
6689	initJaeger returns an instance of Jaeger Tracer that samples 100% of traces and logs all spans to stdout .
6690	Usage prints to stdout information about the tool
6691	Build constructs a double array from given keywords .
6692	Read loads a double array .
6693	Get if possible returns node for a given bucket id .
6694	ExternalNodes returns all available nodes except host .
6695	GetOther returns node for given access token . Returns false if cluster is nil has only one element or if node that was found has same listen address as current one .
6696	GoString implements fmt GoStringer interface .
6697	Scan satisfy sql . Scanner interface .
6698	Value satisfy driver . Valuer interface .
6699	Has checks if the given key is set .
6700	WriteTo saves a index table .
6701	ReadIndexTable loads a index table .
6702	New will create an ActionBar object
6703	RegisterAction register global action
6704	Actions register actions
6705	Render will return the HTML of the bar used this function to render the bar in frontend page s template or layout
6706	FuncMap will return helper to render inline edit button
6707	EditMode return whether current mode is Preview or Edit
6708	SwitchMode is handle to store switch status in cookie
6709	InlineEdit using to make inline edit resource shown as slideout
6710	Error returns a string representation of error e .
6711	ParseFile parses the netrc file identified by filename and returns the set of machine information and macros defined in it . The default machine which is intended to be used when no machine name matches is identified by an empty machine name . There can be only one default machine . If there is a parsing error an Error is returned .
6712	FindMachine parses the netrc file identified by filename and returns the Machine named by name . If no Machine with name name is found the default machine is returned .
6713	New returns a pointer to an instance of kace loaded with a common initialsms trie based on the provided map . Before conversion to a trie the provided map keys are all upper cased .
6714	Camel returns a camelCased string .
6715	Pascal returns a PascalCased string .
6716	Snake returns a snake_cased string with all lowercase letters .
6717	SnakeUpper returns a SNAKE_CASED string with all upper case letters .
6718	Kebab returns a kebab - cased string with all lowercase letters .
6719	KebabUpper returns a KEBAB - CASED string with all upper case letters .
6720	isPathSafe checks if the passed in path conforms to a whitelist .
6721	Start is called on start of a request
6722	ParseAuthHeaders parses authentication headers from HTTP request it currently detects Bearer and Basic auth types
6723	Tracer sets a request tracer constructor
6724	HTTPClient is a functional parameter that sets the internal HTTPClient of the roundtrip client wrapper
6725	BasicAuth sets username and password for HTTP client
6726	BearerAuth sets token for HTTP client
6727	CookieJar sets HTTP cookie jar for this client
6728	SanitizerEnabled will enable the input sanitizer which passes the URL path through a strict whitelist .
6729	OpenFile opens file using HTTP protocol and uses Range headers to seek to various positions in the file this means that server has to support the flags Range and Content - Range
6730	RoundTrip collects response and error assuming fn has done HTTP roundtrip
6731	SetAuthHeader sets client s authorization headers if client was configured to work with authorization
6732	FileName returns HTTP file name
6733	newBuffersFromFiles wraps the specified files with a reader that caches data into a memory buffer
6734	newFileBuffer creates a buffer for reading from the specified File file
6735	rewind resets this fileBuffer to read from the beginning
6736	ConvertResponse converts http error to internal error type based on HTTP response code and HTTP body contents
6737	This is useful with kingpin option parser
6738	This is useful with survey prompting library
6739	String is required for kingpin to generate usage with this datatype
6740	TriggerIncidentKey triggers an incident using the default client with a given incident key only if that incident has been resolved or if that incident doesn t exist yet .
6741	TriggerWithDetails triggers an incident using the default client with a description string and a key - value map that will be saved as the incident s details .
6742	TriggerIncidentKeyWithDetails triggers an incident using the default client with a given incident key only if that incident has been resolved or if that incident doesn t exist yet .
6743	Merge will attempt to merge the data from src into dst . They shoud be either both maps or both structs . The structs do not need to have the same structure but any field name that exists in both structs will must be the same type .
6744	recursively set the Source attribute of the Options
6745	dst must be a pointer type
6746	Do executes the function in a transaction .
6747	NewFile is a convenience function which creates and opens a file
6748	RunBenchmarks executes the benchmarks based upon the given criteria Returns a resultset
6749	String implements String from the Stringer interface and allows results to be serialized to a sting
6750	Tabulate transforms the ResultsSets and returns a slice of Row
6751	AmazonRequest is an example to benchmark a call to googles homepage
6752	WriteTabularData writes the given results to the given output stream
6753	Reduce reduces the ResultSet into buckets defined by the given interval
6754	NewSemaphore is used to create a new semaphore initalised with a capacity this controls the number of locks which can be active at any one time .
6755	Release unlocks the semaphore and allows new lock instances to be called without blocking if the number of locks currently equal the capacity . It is important to call Release at the end of any operation which aquires a lock .
6756	Resize allows dynamic resizing of the semaphore it can be used if it desired to increase the current number of allowable concurent processes .
6757	AddOutput adds an output writer to Bench
6758	RunBenchmarks runs the benchmarking for the given function
6759	We start by dealing with each of the primitive types in turn . BOOLEAN
6760	INTEGER checkInteger returns nil if the given bytes are a valid DER - encoded INTEGER and an error otherwise .
6761	parseInt64 treats the given bytes as a big - endian signed integer and returns the result .
6762	parseInt treats the given bytes as a big - endian signed integer and returns the result .
6763	parseBigInt treats the given bytes as a big - endian signed integer and returns the result .
6764	BIT STRING parseBitString parses an ASN . 1 bit string from the given byte slice and returns it .
6765	OBJECT IDENTIFIER parseObjectIdentifier parses an OBJECT IDENTIFIER from the given bytes and returns it . An object identifier is a sequence of variable length integers that are assigned in a hierarchy .
6766	parseBase128Int parses a base - 128 encoded int from the given offset in the given byte slice . It returns the value and the new offset .
6767	parseGeneralizedTime parses the GeneralizedTime from the given byte slice and returns the resulting time .
6768	PrintableString parsePrintableString parses a ASN . 1 PrintableString from the given byte array and returns it .
6769	isPrintable reports whether the given b is in the ASN . 1 PrintableString set .
6770	parseSequenceOf is used for SEQUENCE OF and SET OF values . It tries to parse a number of ASN . 1 values from the given byte slice and returns them as a slice of Go values of the given type .
6771	invalidLength returns true iff offset + length > sliceLength or if the addition would overflow .
6772	setDefaultValue is used to install a default value from a tag string into a Value . It is successful if the field was optional even if a default value wasn t provided or it failed to install it into the Value .
6773	UnmarshalWithParams allows field parameters to be specified for the top - level element . The form of the params is the same as the field tags .
6774	Given a tag string with the format specified in the package comment parseFieldParameters will parse it into a fieldParameters structure ignoring unknown parts of the string .
6775	Given a reflected Go type getUniversalType returns the default tag number and expected compound flag .
6776	DecodeString decodes the given base32 encodeed bytes
6777	User returns the Mail notifier .
6778	Save mail notifier adds a new mail notifier it replaces the existing one if there is already a notifier available .
6779	RegisterPlugin registers a plugin by name . This is expected to happen during app startup .
6780	Set up the indexes for the Db Can be called during the initialization
6781	Until loops until stop channel is closed running f every period . Catches any panics and keeps going . f may not be invoked if stop channel is already closed .
6782	logPanic logs the caller tree when a panic occurs .
6783	User returns the user with the given username . Error is set to ErrMissingUser if user is not found .
6784	Users returns a slice of all users .
6785	SaveUser adds a new user replacing if the same username is in use .
6786	DeleteUser removes a user . ErrNotFound is returned if the user isn t found .
6787	LoadCACertFile reads in a CA cert file that may contain multiple certs and gives you back a proper x509 . CertPool for your fun and proffit
6788	NewAuth returns an auth
6789	ValidateRequest perfomrs verification on the TLS certs and chain
6790	Process is the main Entrypoint
6791	ValidateCN checks the CN of a verified peer cert and raises a 403 if the CN doesn t match any CN in the AllowedCNs list .
6792	ValidateOU checks the OU of a verified peer cert and raises 403 if the OU doesn t match any OU in the AllowedOUs list .
6793	KeyLen returns the minimum number of bytes required to represent x ; the result is 1 for x == 0 . Returns 1 - 8 .
6794	DefaultConfig provides a default configuration to create a certificate signer .
6795	New creates a new configured certificate signer .
6796	New creates a new configured Vault factory .
6797	DefaultServiceConfig provides a default configuration to create a PKI controller .
6798	NewService creates a new configured PKI controller .
6799	PKI management .
6800	IsNoVaultHandlerDefined asserts a dirty string matching against the error message provided by err . This is necessary due to the poor error handling design of the Vault library we are using .
6801	New takes a configuration and returns a configured service .
6802	Create creates a role if it doesn t exist yet . Creating roles is idempotent in the vault api so no need to check if it already exists .
6803	CreateJob creates a basic empty configuration with some defaults .
6804	Run starts the job
6805	newWatcher is the internal function for properly setting up a new watcher .
6806	Start begins watching the files sending notifications when files change . It returns a channel that notifications are sent on .
6807	Stop listening for changes to the files .
6808	Returns true if the Watcher is actively looking for changes .
6809	The Add method takes a variable number of string arguments and adds those files to the watch list returning the number of files added .
6810	goroutine that cycles through the list of paths and checks for updates .
6811	Watching returns a list of the files being watched .
6812	State returns a slice of Notifications representing the files being watched and their last event .
6813	Store stores an error into the request s context . It panics if the request was not configured to store errors .
6814	Get retrieves an error from the request s context . It returns nil if the request was not configured to store errors .
6815	Catch creates middleware that processes errors stored while serving a request . Errors are passed to the callback which should write them to the response in an appropriate format . This is usually the outermost middleware in a chain .
6816	Try converts a handler to a standard http . Handler storing any error in the request s context .
6817	Recover creates middleware that can recover from a panic in a handler storing a PanicError for future handling .
6818	go client for performance testing
6819	SyncHandler is a small wrapper around Sync which simply synchronises all incoming connections . Use Sync if you wish to implement user authentication or any other request - time checks .
6820	connect using the provided transport and block until connection is ready
6821	send to connection ensure only 1 concurrent sender
6822	NumConnections currently active
6823	Push the changes from this object to all connected clients . Push is thread - safe and is throttled so it can be called with abandon . Returns false if a Push is already in progress .
6824	non - blocking push
6825	OutForward ... recieve FluentRecordSet from channel and send it to passed loggers until success .
6826	InTail follow the tail of file and post BulkMessage to channel .
6827	New creates a new Logger .
6828	Close closes the connection .
6829	IsReconnecting return true if a reconnecting process in progress .
6830	connect establishes a new connection using the specified transport .
6831	Notification is the builder
6832	NullNotification is the builder for tests where no side effects are desired
6833	New creates a new CA .
6834	Issue issues a new Identity with this one as its parent .
6835	Subject is an Option that sets a identity s subject field .
6836	PrivateKey is an Option for setting the identity s private key .
6837	NotBefore is an Option for setting the identity s certificate s NotBefore .
6838	NotAfter is an Option for setting the identity s certificate s NotAfter .
6839	IssuingCertificateURL is an Option for setting the identity s certificate s IssuingCertificateURL .
6840	OCSPServer is an Option for setting the identity s certificate s OCSPServer .
6841	New creates a new API Client for a Telegram bot using the apiKey provided . It will call the GetMe method to retrieve the bots id name and username . This bot uses long polling to retrieve its updates . If a webhook was set for the given apiKey this will remove it .
6842	NewWithWebhook creates a new API client for a Telegram bot using the apiKey provided . It will call the GetMe method to retrieve the bots id name and username . In addition to the API client a http . HandlerFunc will be returned . This handler func reacts to webhook requests and will put updates into the Updates channel .
6843	Close shuts down this client . Until Close returns new updates and errors will be put into the respective channels . Note that if no updates are received this function may block for up to one minute which is the time interval for long polling .
6844	GetMe returns basic information about the bot in form of a UserResponse .
6845	RunBot runs a bot . It will block until either something very bad happens or closing is closed .
6846	RunBotOnWebhook runs the given BotFunc with a webhook .
6847	NewOutgoingMessage creates a new outgoing message .
6848	NewOutgoingLocation creates a new outgoing location .
6849	NewOutgoingVenue creates a new outgoing location .
6850	NewOutgoingVideo creates a new outgoing video file .
6851	NewOutgoingVideoResend creates a new outgoing video file for re - sending .
6852	NewOutgoingPhoto creates a new outgoing photo .
6853	NewOutgoingPhotoResend creates a new outgoing photo for re - sending .
6854	NewOutgoingSticker creates a new outgoing sticker message .
6855	NewOutgoingStickerResend creates a new outgoing sticker message for re - sending .
6856	NewOutgoingVoice creates a new outgoing voice note .
6857	NewOutgoingVoiceResend creates a new outgoing voice note for re - sending .
6858	NewOutgoingAudio creates a new outgoing audio file .
6859	NewOutgoingAudioResend creates a new outgoing audio file for re - sending .
6860	NewOutgoingDocument creates a new outgoing file .
6861	NewOutgoingDocumentResend creates a new outgoing file for re - sending .
6862	NewOutgoingForward creates a new outgoing forwarded message .
6863	NewOutgoingChatAction creates a new outgoing chat action .
6864	NewOutgoingUserProfilePhotosRequest creates a new request for a users profile photos .
6865	NewOutgoingKickChatMember creates a request to kick a member from a group chat or channel .
6866	NewOutgoingUnbanChatMember creates a request to unban a member of a group chat or channel .
6867	NewOutgoingCallbackQueryResponse creates a response to a callback query .
6868	NewInlineQueryAnswer creates a new inline query answer .
6869	Type determines the type of the message . Note that for all these types messages can still be replies or forwarded .
6870	Type returns the type of the update .
6871	MarshalJSON marshals the recipient to JSON .
6872	querystring implements querystringer to represent the outgoing certificate file .
6873	getBaseQueryString gets a Querystring representing this message .
6874	getMessageBaseQueryString gets a Querystring representing this message .
6875	querystring implements querystringer to represent the audio file .
6876	querystring implements querystringer to represent the photo .
6877	querystring implements querystringer to represent the request .
6878	querystring implements querystringer to represent the outgoing video file .
6879	querystring implements querystringer to represent the outgoing voice note .
6880	NewInlineQueryResultArticle returns a new InlineQueryResultArticle with all mandatory fields set .
6881	NewInlineQueryResultPhoto returns a new InlineQueryResultPhoto with all mandatory fields set .
6882	NewInlineQueryResultGif returns a new InlineQueryResultGif with all mandatory fields set .
6883	NewInlineQueryResultMpeg4Gif returns a new InlineQueryResultMpeg4Gif with all mandatory fields set .
6884	NewInlineQueryResultVideo returns a new InlineQueryResultVideo with all mandatory fields set .
6885	Send sends the request . On success the photos are returned as a UserProfilePhotosResponse .
6886	Send sends the chat action . On success nil is returned .
6887	Send sends the inline query answer . On success nil is returned .
6888	Send sends the kick request .
6889	Send sends the unban request .
6890	Send sends the callback response .
6891	NewAPIClient creates a new API client . Requires a userAgent string describing your application . optionally a custom http . Client to allow for advanced features such as caching .
6892	BeforeInsert sets current time to CreatedAt and UpdatedAt field . It always returns nil .
6893	columnName returns the column name that added the table name with quoted if needed .
6894	New returns a new DB . If any error occurs it returns nil and error .
6895	From returns a FROM statement . A table name will be determined from name of struct of arg . If arg argument is not struct type it panics .
6896	Where returns a new Condition of WHERE clause .
6897	OrderBy returns a new Condition of ORDER BY clause .
6898	Limit returns a new Condition of LIMIT clause .
6899	Offset returns a new Condition of OFFSET clause .
6900	Join returns a new JoinCondition of JOIN clause .
6901	Count returns COUNT function .
6902	Update updates the one record . The obj must be struct and must have field that specified pk struct tag . Update will try to update record which searched by value of primary key in obj . Update returns the number of rows affected by an update .
6903	Delete deletes the records from database table . The obj must be pointer to struct or slice of struct and must have field that specified pk struct tag . Delete will try to delete record which searched by value of primary key in obj . Delete returns teh number of rows affected by a delete .
6904	Begin starts a transaction .
6905	Commit commits the transaction . If Begin still not called or Commit or Rollback already called Commit returns ErrTxDone .
6906	Quote returns a quoted s . It is for a column name not a value .
6907	SetLogOutput sets output destination for logging . If w is nil it unsets output of logging .
6908	selectToSlice returns a slice value fetched from rows .
6909	selectToValue returns a single value fetched from rows .
6910	fieldIndexByName returns the nested field corresponding to the index sequence .
6911	columns returns the comma - separated column name with quoted .
6912	tagsFromField returns a slice of option strings .
6913	hasSkipTag returns whether the struct field has the - tag .
6914	hasPKTag returns whether the struct field has the pk tag .
6915	isAutoIncrementable returns whether the struct field is integer .
6916	collectFieldIndexes returns the indexes of field which doesn t have skip tag and pk tag .
6917	findPKIndex returns the nested field corresponding to the index sequence of field of primary key .
6918	sizeFromTag returns a size from tag . If size tag specified to struct field it will converted to uint64 and returns it . If it doesn t specify it returns 0 . If value of size tag cannot convert to uint64 it returns 0 and error .
6919	columnFromTag returns the column name . If column tag specified to struct field returns it . Otherwise it returns snake - cased field name as column name .
6920	defaultFromTag returns a DEFAULT ... keyword . If default tag specified to struct field it use as the default value . If it doesn t specify it returns empty string .
6921	Where adds WHERE clause to the Condition and returns it for method chain .
6922	And adds AND operator to the Condition and returns it for method chain .
6923	Or adds OR operator to the Condition and returns it for method chain .
6924	Like adds LIKE clause to the Condition and returns it for method chain .
6925	Between adds BETWEEN ... AND ... clause to the Condition and returns it for method chain .
6926	OrderBy adds ORDER BY clause to the Condition and returns it for method chain .
6927	Limit adds LIMIT clause to the Condition and returns it for method chain .
6928	Offset adds OFFSET clause to the Condition and returns it for method chain .
6929	SetFormat sets the format for logging .
6930	Print outputs query log using format template . All arguments will be used to formatting .
6931	Print is a dummy method .
6932	Quote returns a quoted s for a column name .
6933	SQLType returns the SQL type of the v for PostgreSQL .
6934	New archive If the exentions of the target file is . zip the archive will be in the zip format otherwise it will be a tar . gz archive .
6935	Disconnect destroys the state for a particular host instance . Call this function to disconnect the host . After you call this function the Host object is no longer valid and you should not longer use it . Similarly you should not use any other object instances obtained from the Host object while it was connected . Since VMware Server 1 . 0
6936	nextNetworkAdapterID returns the next available ethernet ID reusing ids if the ethernet adapter has present equal to FALSE
6937	totalNetworkAdapters returns the total number of network adapters in the VMX file .
6938	RemoveAllNetworkAdapters deletes all network adapters from a VM .
6939	RemoveNetworkAdapter deletes network adapter from VMX file that matches the ID in adapter . Id .
6940	NetworkAdapters lists current network adapters attached to the virtual machine .
6941	NewArchive uses 7z to extract a list of files in . 7z archive
6942	GetFileReader returns a reader for reading a given file
6943	ExtractToWriter writes the content of a given file inside the archive to dst
6944	ExtractToFile extracts a given file from the archive to a file on disk
6945	SharedFoldersParentDir returns the parent dir for share folders in the Guest .
6946	Name returns user defined name for the snapshot .
6947	Description returns user defined description for the snapshot .
6948	cleanupSnapshot cleans up snapshot internal C handle .
6949	BusTypeFromID gets BusType from device ID .
6950	Read reads VMX file from disk and unmarshals it
6951	Write marshals and writes VMX file to disk
6952	NewVirtualMachine creates a new VM instance .
6953	Vcpus returns number of virtual CPUs configured for the virtual machine .
6954	VmxPath returns path to the virtual machine configuration file .
6955	MemorySize returns memory size of the virtual machine .
6956	ReadOnly tells whether or not the VM is read - only .
6957	InVMTeam returns whether the virtual machine is a member of a team .
6958	PowerState returns power state of the virtual machine .
6959	ToolsState returns state of the VMware Tools suite in the guest .
6960	IsRunning returns whether the virtual machine is running .
6961	GuestOS returns the guest os .
6962	cleanupVM cleans up VM VIX handle .
6963	updateVMX updates VMX file for the VM .
6964	SetMemorySize sets memory size in megabytes . VM has to be powered off in order to change this parameter .
6965	SetNumberVcpus sets number of virtual cpus assigned to this machine . VM has to be powered off in order to change this parameter .
6966	SetDisplayName sets virtual machine name .
6967	SetAnnotation sets annotations for the virtual machine .
6968	SetVirtualHwVersion sets a virtual hardware version in the VMX file of the VM .
6969	Error returns a description of the error along with its code and operation implementing Go s error interface .
6970	Errorf returns a traceable error with the given formatted message .
6971	Error returns the original error message plus the stack trace captured at the time the error was first wrapped .
6972	string converts a given stack frame to a formated string .
6973	newStackFrame returns a new stack frame initialized from the passed in program counter .
6974	captureStack returns a slice of stack frames representing the stack of the calling go routine .
6975	parseFuncName returns the package path and function signature for a give Func name .
6976	Stack logs the error err with the stack trace .
6977	StackWithCaller logs the error err with the caller package name and the stack trace .
6978	Write calls the writer upstream after executing the functions in the before field .
6979	ResponseStatus returns the HTTP response status . Remember that the status is only set by the server after WriteHeader has been called .
6980	httpResponseStruct returns the response structure after going trough all the intermediary response writers .
6981	SetDetectedContentType detects sets and returns the response Conten - Type header value .
6982	New ServerError . New
6983	New DBError . New
6984	New ValidationError . New
6985	New NotFoundError . New
6986	StrLength param is a string length must be n
6987	StrLenIn param is a string length is in array
6988	StrIn param is a string the string is in array
6989	GetEmail check is a email
6990	MostSpecific returns the most specific from a list of types in an hierarchy behaviour is undefined if any of the types are siblings .
6991	Full type hierarchy is returned when provided either the concept type or full uri of the most specific concept type
6992	SortTypes sorts the given types from least specific to most specific
6993	Delete value in redis session
6994	Set value in redis session
6995	refresh refresh store to redis
6996	Get read redis session by sid
6997	Destroy delete redis session by id
6998	UpExpire refresh session expire
6999	Use adds a handler to the handlers stack .
7000	ServeHTTP makes a context for the request sets some good practice default headers and enters the handlers stack .
7001	Use adds middleware to the group see example code in github .
7002	Group creates a new router group . You should add all the routes that have common middlwares or the same path prefix . For example all the routes that use a common middlware for authorization could be grouped .
7003	Run starts the server for listening and serving .
7004	create returns a new blank Engine instance without any middleware attached .
7005	Redirect Redirect replies to the request with a redirect to url which may be a path relative to the request path .
7006	Ok Response json
7007	Fail Response fail
7008	ResStatus Response status code use http . StatusText to write the response .
7009	Next calls the next handler in the stack but only if the response isn t already written .
7010	GetSession get session
7011	GetBodyJSON return a json from body
7012	SetSession set session
7013	FreshSession set session
7014	DeleteSession delete session
7015	Write sets the context s written flag before writing the response .
7016	WriteHeader sets the context s written flag before writing the response header .
7017	New instantiates a new client with the given params and return a reference to it
7018	setAllowLargeResults - private function to set the AllowLargeResults and tempTableName values
7019	connect - opens a new connection to bigquery reusing the token if possible or regenerating a new auth token if required
7020	InsertRow inserts a new row into the desired project dataset and table or returns an error
7021	AsyncQuery loads the data by paging through the query results and sends back payloads over the dataChan - dataChan sends a payload containing Data objects made up of the headers rows and an error attribute
7022	Query loads the data for the query paging if necessary and return the data rows headers and error
7023	stdPagedQuery executes a query using default job parameters and paging over the results returning them over the data chan provided
7024	largeDataPagedQuery builds a job and inserts it into the job queue allowing the flexibility to set the custom AllowLargeResults flag for the job
7025	pagedQuery executes the query using bq s paging mechanism to load all results and sends them back via dataChan if available otherwise it returns the full result set headers and error as return values
7026	pageOverJob loads results for the given job reference and if the total results has not been hit continues to load recursively
7027	Count loads the row count for the provided dataset . tablename
7028	work uses fetcher to recursively crawl pages starting with url to a maximum of depth .
7029	subworker catches any panic while running the job .
7030	worker gets a job from the job_pipe passes it to a subworker and puts the job in the done_pipe when finished .
7031	the supervisor feeds jobs to workers and keeps track of them .
7032	Run starts the Pool by launching the workers . It s OK to start an empty Pool . The jobs will be fed to the workers as soon as they become available .
7033	Add creates a Job from the given function and args and adds it to the Pool .
7034	Wait blocks until all the jobs in the Pool are done .
7035	Results retrieves the completed jobs .
7036	WaitForJob blocks until a completed job is available and returns it . If there are no jobs running it returns nil .
7037	Status returns a stats instance .
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc in possum . HandlerFunc . See pprof . go .
7039	WebSocketHandlerFunc convert websocket function to possum . HandlerFunc .
7040	StaticFile returns the view which can serve static files .
7041	PreloadFile returns the view which can preload static files and serve them . The different between StaticFile and PreloadFile is that StaticFile load the content of file at every request while PreloadFile load the content into memory at the initial stage . Despite that PreloadFile will be using more memories and could not update the content in time until restart the application it should be fast than StaticFile in runtime .
7042	InitHtmlTemplates initialzes a series of HTML templates in the directory pattern .
7043	InitTextTemplates initialzes a series of plain text templates in the directory pattern .
7044	Html retruns a TemplateView witch uses HTML templates internally .
7045	Text retruns a TemplateView witch uses text templates internally .
7046	InitWatcher initialzes a watcher to watch templates changes in the pattern . f would be InitHtmlTemplates or InitTextTemplates . If the watcher raises an error internally the callback function ef will be executed . ef can be nil witch represents ignoring all internal errors .
7047	CloseWatcher closes the wathcer .
7048	Find a router with the specific path and return it .
7049	Add a router to list
7050	NewRouters initailizes Routers instance .
7051	NewServerMux returns a new Handler .
7052	Internal error handler
7053	HandleFunc specifies a pair of handler and view to handle the request witch matching router .
7054	handleError tests the context Error and assign it to response .
7055	Redirect performs a redirecting to the url if the code belongs to one of StatusMovedPermanently StatusFound StatusSeeOther and StatusTemporaryRedirect .
7056	InitPProf registers pprof handlers to the ServeMux . The pprof handlers can be specified a customized prefix .
7057	StartSession initaillizes a session context . This function should be called in a implementation of possum . HandleFunc .
7058	Combination generator for int slice
7059	Repeated combination generator for int slice
7060	Permtation generator for int slice
7061	Repeated permtation generator for int slice
7062	Receives format string in gstring format and map of arguments and translates them to format and arguments compatible with standard golang formatting .
7063	interface similar to fmt package Errorm returns error instance with formatted error message . This is same as fmt . Errorf but uses gstring formatting .
7064	Fprintm writes formatted string to provided writer . This is same as fmt . Fprintf but uses gstring formatting .
7065	Printf prints formatted string to stdout . This is same as fmt . Printf but uses gstring formatting .
7066	Sprintf returns formatted string . This is same as fmt . Sprintf but uses gstring formatting .
7067	Validate a password against the given requirements Returns a boolean indicating whether the password meets the requirements . The second argument is a string explaining why it doesn t meet the requirements if it doesn t . It is empty if the requirements are met .
7068	Generate password requirements from an existing password .
7069	Make sure password strength requirements make sense
7070	Generate a password given requirements
7071	Generate one password that meets the given requirements
7072	Generate n passwords that meet the given requirements
7073	append digits to string
7074	add punctuation characters to start and end of string
7075	this init function is deprecated but I m keeping it around just in case it proves useful in the future .
7076	Param defines a parameter with the specified name .
7077	Parse parses parameter definitions from the map .
7078	Unmarshal parses the JSON payload from the command arguments and unmarshal into a value pointed to by v .
7079	GetDefaultHTTPClient returns a httpClient with configured timeout
7080	DeviceInfo returns information about a particular device
7081	DevicePresence returns data about presence of a data
7082	NotificationStatus returns status of a particular notification
7083	DeleteNotification deletes a created notification
7084	NotifyDevice sends notification data to devices
7085	Simple assert call for unit and functional tests
7086	We could use Fallocate but some test CI systems do not support it like Travis - ci . org .
7087	AddError appends an error to a list of general errors .
7088	AddFieldError appends an error to a list of field specific errors .
7089	HasErrors returns weather FormErrors instance contains at leas one error .
7090	NewError initializes FormErrors with one general error .
7091	NewFieldError initializes FormErrors with one field error .
7092	ChainHandlers executes each function from the arguments with handler from the next function to construct a chan fo callers .
7093	FinalHandler is a helper function to wrap the last http . Handler element in the ChainHandlers function .
7094	Hash returns a part of a MD5 sum of a file .
7095	IsHash checks is provided string a valid hash .
7096	WithBaseDir sets the directory in which template files are stored .
7097	WithFileFindFunc sets the function that will return the file path on disk based on filename provided from files defind using WithTemplateFromFile or WithTemplateFromFiles .
7098	WithTemplateFromFiles adds a template parsed from files .
7099	WithTemplatesFromFiles adds a map of templates parsed from files .
7100	WithTemplateFromStrings adds a template parsed from string .
7101	WithTemplatesFromStrings adds a map of templates parsed from strings .
7102	WithFunction adds a function to templates .
7103	WithFunctions adds function map to templates .
7104	WithDelims sets the delimiters used in templates .
7105	New creates a new instance of Templates and parses provided files and strings .
7106	RespondWithStatus executes a template with provided data into buffer then writes the the status and body to the response writer . A panic will be raised if the template does not exist or fails to execute .
7107	RespondTemplate executes a named template with provided data into buffer then writes the the body to the response writer . A panic will be raised if the template does not exist or fails to execute .
7108	Respond executes template with provided data into buffer then writes the the body to the response writer . A panic will be raised if the template does not exist or fails to execute .
7109	RenderTemplate executes a named template and returns the string .
7110	New creates a new instance of Server .
7111	ServeUDP serves requests over UDP connection .
7112	Shutdown calls h2quic . Server . Close method .
7113	QuicHeadersHandler should be used as a middleware to set quic related headers to TCP server that suggest alternative svc .
7114	GetRequestIPs returns all possible IPs found in HTTP request .
7115	DomainRedirectHandler responds with redirect url based on domain and httpsPort othervise it executes the handler .
7116	New creates a new instance of Servers with applied options .
7117	Add adds a new server instance by a custom name and with address to listen to .
7118	TCPAddr returns a TCP address of the listener that a server with a specific name is using . If there are more servers with the same name the address of the first started server is returned .
7119	UDPAddr returns a UDP address of the listener that a server with a specific name is using . If there are more servers with the same name the address of the first started server is returned .
7120	Close stops all servers by calling Close method on each of them .
7121	Shutdown gracefully stops all servers by calling Shutdown method on each of them .
7122	Accept accepts TCP connection sets keep alive and checks if a client requested an encrypted connection .
7123	NewStaticFilesHandler serves a file under specified filesystem if it can be opened otherwise it serves HTTP from a specified handler .
7124	ServeHTTP serves an HTTP response for a request .
7125	MarshalJSON implements of json . Marshaler interface . It marshals string representations of time . Duration .
7126	UnmarshalJSON implements json . Unamrshaler interface . It parses time . Duration as strings .
7127	MarshalYAML implements of yaml . Marshaler interface . It marshals string representations of time . Duration .
7128	UnmarshalYAML implements yaml . Unamrshaler interface . It parses time . Duration as strings .
7129	NewHandler returns a handler that logs HTTP requests . It logs information about remote address X - Forwarded - For or X - Real - Ip HTTP method request URI HTTP protocol HTTP response status total bytes written to http . ResponseWriter response duration HTTP referrer and HTTP client user agent .
7130	WithPanicResponse sets a fixed body and its content type HTTP header that will be returned as HTTP response on panic event . If WithPanicResponseHandler is defined this options are ignored .
7131	WithPanicResponseHandler sets http . Handler that will be executed on panic event . It is useful when the response has dynamic content . If the content is static it is better to use WithPanicResponse option instead . This option has a precedence upon WithPanicResponse .
7132	New creates a new Handler from the handler that is wrapped and protected with recover function .
7133	ServeHTTP implements http . Handler interface .
7134	NewContextFunc creates a new function that can be used to store and access arbitrary data by keys .
7135	NewMapErrorRegistry creates a new instance of MapErrorRegistry .
7136	AddError adds a new error with a code to the registry . It there already is an error or handler with the same code ErrErrorAlreadyRegistered will be returned .
7137	AddMessageError adds a new Error isntance with a code and message to the registry . It there already is an error or handler with the same code ErrErrorAlreadyRegistered will be returned .
7138	MustAddError calls AddError and panics in case of an error .
7139	MustAddMessageError calls AddMessageError and panics in case of an error .
7140	AddHandler adds a new error handler with a code to the registry . It there already is an error or handler with the same code ErrErrorAlreadyRegistered will be returned .
7141	MustAddHandler calls AddHandler and panics in case of an error .
7142	Handler returns a handler that is registered under the provided code .
7143	New returns a new instance of Client with default values .
7144	Request makes a HTTP request based on Client configuration and arguments provided .
7145	JSONContext provides the same functionality as JSON with Context instance passing to http . Request .
7146	StreamContext provides the same functionality as Stream with Context instance passing to http . Request .
7147	Stream makes a HTTP request and returns request body as io . ReadCloser to be able to read long running responses . Returned io . ReadCloser must be closed at the end of read . To reuse HTTP connection make sure that the whole data is read before closing the reader .
7148	JSONUnmarshal decodes data into v and returns json . SyntaxError and json . UnmarshalTypeError formated with additional information .
7149	ServeTCP executes http . Server . Serve method . If the provided listener is net . TCPListener keep alive will be enabled . If server is configured with TLS a tls . Listener will be created with provided listener .
7150	ServeTCP serves request on TCP listener .
7151	Shutdown executes grpc . Server . GracefulStop method .
7152	HandleMethods uses a corresponding Handler based on HTTP request method . If Handler is not found a method not allowed HTTP response is returned with specified body and Content - Type header .
7153	NewSetHeadersHandler sets provied headers on HTTP response .
7154	New initializes a new instance of Server .
7155	HashedPath returns a URL path with hash injected into the filename .
7156	New creates a new instance of Handler . The first argument is the handler that will be executed when maintenance mode is off .
7157	HTMLHandler is a HTTP middleware that should be used alongide HTML pages .
7158	Status returns whether the maintenance mode is enabled .
7159	StatusHandler can be used in JSON - encoded HTTP API to check the status of maintenance .
7160	OnHandler can be used in JSON - encoded HTTP API to enable maintenance . It returns HTTP Status Created if the maintenance is enabled . If the maintenance is already enabled it returns HTTP Status OK .
7161	OffHandler can be used in JSON - encoded HTTP API to disable maintenance .
7162	MarshalJSON calls json . RawMessage method of the same name . Required since PostIRCMessageRequest is of type json . RawMessage ...
7163	MarshalJSON calls json . RawMessage method of the same name . Required since PostArtifactRequest is of type json . RawMessage ...
7164	MarshalJSON calls json . RawMessage method of the same name . Required since PostArtifactResponse is of type json . RawMessage ...
7165	MarshalJSON calls json . RawMessage method of the same name . Required since HookChangedMessage is of type json . RawMessage ...
7166	MarshalJSON calls json . RawMessage method of the same name . Required since TriggerHookRequest is of type json . RawMessage ...
7167	MarshalJSON calls json . RawMessage method of the same name . Required since TriggerHookResponse is of type json . RawMessage ...
7168	UnmarshalJSON is a copy of the json . RawMessage implementation .
7169	MarshalJSON calls json . RawMessage method of the same name . Required since LaunchInfo is of type json . RawMessage ...
7170	MarshalJSON calls json . RawMessage method of the same name . Required since Var is of type json . RawMessage ...
7171	MarshalJSON calls json . RawMessage method of the same name . Required since Var1 is of type json . RawMessage ...
7172	MarshalJSON calls json . RawMessage method of the same name . Required since Var3 is of type json . RawMessage ...
7173	MarshalJSON implements the json . Marshaler interface . The time is a quoted string in RFC 3339 format with sub - second precision added if present .
7174	UnmarshalJSON implements the json . Unmarshaler interface . The time is expected to be a quoted string in RFC 3339 format .
7175	Write implements the io . Writer interface
7176	Seek implements the io . Seeker interface
7177	Read implements the io . Reader interface
7178	MarshalJSON calls json . RawMessage method of the same name . Required since LaunchSpecsResponse is of type json . RawMessage ...
7179	MarshalJSON calls json . RawMessage method of the same name . Required since RegionLaunchSpec is of type json . RawMessage ...
7180	GenerateCode takes the objects loaded into memory in LoadAPIs and writes them out as go code .
7181	Add entry . Input and entry . Output to schemaURLs if they are set
7182	CreateTemporaryCredentials is an alias for CreateNamedTemporaryCredentials with an empty name .
7183	utility function to create a URL object based on given data
7184	SignRequest will add an Authorization header
7185	APICall is the generic REST API calling method which performs all REST API calls for this library . Each auto - generated REST API method simply is a wrapper around this method calling it with specific specific arguments .
7186	SignedURL creates a signed URL using the given Client where route is the url path relative to the BaseURL stored in the Client query is the set of query string parameters if any and duration is the amount of time that the signed URL should remain valid for .
7187	MarshalJSON calls json . RawMessage method of the same name . Required since HawkSignatureAuthenticationResponse is of type json . RawMessage ...
7188	bmw256 calculates and returns bmw256 of input . length of input must be 32 bytes .
7189	NewCubeHash initializes anrd retuns Cubuhash struct .
7190	cubehash56 calculates cubuhash256 . length of data must be 32 bytes .
7191	Sum returns the result of Lyra2re2 hash .
7192	squeeze Performs a squeeze operation using Blake2b s G function as the internal permutation
7193	reducedSqueezeRow0 erforms a reduced squeeze operation for a single row from the highest to the lowest index using the reduced - round Blake2b s G function as the internal permutation
7194	reducedDuplexRow1 Performs a reduced duplex operation for a single row from the highest to the lowest index using the reduced - round Blake2b s G function as the internal permutation
7195	NewReaderByteCodeLoader creates a new object
7196	LoadReader takes a io . Reader and compiles it into vm . ByteCode
7197	NewV3 creates a new UUID with variant 3 as described in RFC 4122 . Variant 3 based namespace - uuid and name and MD - 5 hash calculation .
7198	Sets literal in op arg to register sa
7199	Fetches a symbol specified in op arg from template variables . XXX need to handle local vars?
7200	Wraps the contents of register sa with a raw string mark Note that this effectively stringifies the contents of register sa
7201	Sets the contents of register sa to a regular string and removes the raw string mark forcing html escapes to be applied when printing . Note that this effectively stringifies the contents of register sa
7202	Prints the contents of register sa to Output . Forcefully applies html escaping unless the variable in sa is marked raw
7203	Prints the contents of register sa forcing raw string semantics
7204	NewLoopVar creates the loop variable
7205	Grab every thing from current mark up to the tip of the stack and make it a list
7206	Executes what s in st . sa
7207	DumpAST sets the bitmask for DumpAST debug flag
7208	DumpByteCode sets the bitmask for DumpByteCode debug flag
7209	Optimize modifies the ByteCode in place to an optimized version
7210	NewFuncDepot creates a new FuncDepot under the given namespace
7211	Get returns the function associated with the given key . The function is wrapped as reflect . Value so reflection can be used to determine attributes about this function
7212	Set stores the function under the name key
7213	NewFileTemplateFetcher creates a new struct . paths must give us the directories for us to look the templates in
7214	LastModified returns time when the target template file was last modified
7215	Reader returns the io . Reader instance for the file source
7216	Bytes returns the bytes in teh template file
7217	NewState creates a new State struct
7218	PushFrame pushes a new frame to the frame stack
7219	PopFrame pops the frame from the top of the frame stack
7220	CurrentFrame returns the frame currently at the top of the frame stack
7221	Warnf is used to generate warnings during virtual machine execution
7222	AppendOutputString is the same as AppendOutput but uses a string
7223	Popmark pops the mark stored at the top of the mark stack
7224	CurrentMark returns the mark stored at the top of the mark stack
7225	LoadByteCode loads a new ByteCode . This is used for op codes that call to external templates such as include
7226	Reset resets the whole State object
7227	DeclareVar puts a new variable in the stack and returns the index where it now resides
7228	GetLvar gets the frame local variable at position i
7229	SetLvar sets the frame local variable at position i
7230	NewByteCode creates an empty ByteCode instance .
7231	Append appends an op code to the current list of op codes .
7232	AppendOp is an utility method to create AND append a new op code to the current list of op codes
7233	String returns the textual representation of this ByteCode
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader
7235	Load loads the ByteCode for template specified by key which for this ByteCodeLoader is the path to the template we want . If cached vm . ByteCode struct is found it is loaded and its last modified time is compared against that of the template file . If the template is newer it s compiled . Otherwise the cached version is used saving us the time to parse and compile the template .
7236	NewFileCache creates a new FileCache which stores caches underneath the directory specified by dir
7237	GetCachePath creates a string describing where a given template key would be cached in the file system
7238	Get returns the cached vm . ByteCode if available
7239	Set creates a new cache file to store the ByteCode .
7240	Delete deletes the cache
7241	Get returns the cached ByteCode
7242	Set stores the ByteCode
7243	Delete deletes the ByteCode
7244	NewStringLexer creates a new lexer
7245	NewReaderLexer creates a new lexer
7246	NewV4 creates a new UUID with variant 4 as described in RFC 4122 . Variant 4 based on pure random bytes .
7247	Parse parses the given template and creates an AST
7248	ParseReader gets the template content from an io . Reader type
7249	Visit returns a channel which you can receive Node structs in order that that they would be processed
7250	String returns the textual representation of this AST
7251	Run executes the given vm . ByteCode using the given variables . For historical reasons it also allows re - executing the previous bytecode instructions given to a virtual machine but this will probably be removed in the future
7252	DefaultParser sets up and assigns the default parser to be used by Xslate .
7253	DefaultLoader sets up and assigns the default loader to be used by Xslate .
7254	DefaultVM sets up and assigns the default VM to be used by Xslate
7255	Get retrieves the value assigned to key
7256	NewHTTPSource creates a new HTTPSource instance
7257	NewStringByteCodeLoader creates a new object
7258	LoadString takes a template string and compiles it into vm . ByteCode
7259	Get returns the variable stored in slot x
7260	NewOp creates a new Op .
7261	MarshalBinary is used to serialize an Op into a binary form . This is used to cache the ByteCode
7262	UnmarshalBinary is used to deserialize an Op from binary form .
7263	ArgInt returns the integer representation of the argument
7264	ArgString returns the string representatin of the argument
7265	AppendOp creates and appends a new op to the current set of ByteCode
7266	Compile satisfies the compiler . Compiler interface . It accepts an AST created by parser . Parser and returns vm . ByteCode or an error
7267	NewV5 creates a new UUID with variant 5 as described in RFC 4122 . Variant 5 based namespace - uuid and name and SHA - 1 hash calculation .
7268	Sort returns a sorted list of LexSymbols sorted by Priority
7269	Less returns true if the i - th element s Priority is less than the j - th element
7270	Swap swaps the elements at i and j
7271	Copy creates a new copy of the given LexSymbolSet
7272	Set creates and sets a new LexItem to name
7273	GetSortedList returns the lsit of LexSymbols in order that they should be searched for in the tempalte
7274	Top returns the element at the top of the stack or an error if stack is empty
7275	Resize changes the size of the underlying buffer
7276	Extend changes the size of the underlying buffer extending it by extendBy
7277	Grow automatically grows the underlying buffer so that it can hold at least min elements
7278	Get returns the element at position i
7279	Set sets the element at position i to v . The stack size is automatically adjusted .
7280	Push adds an element at the end of the stack
7281	Pop removes and returns the item at the end of the stack
7282	String returns the textual representation of the stack
7283	GetHostIPs returns a list of IP addresses of all host s interfaces .
7284	GetPrivateHostIPs returns a list of host s private IP addresses .
7285	IsPrivate determines whether a passed IP address is from one of private blocks or not .
7286	Identical to os . Environ but limited to the environment variable equivalents for the flags your program cares about .
7287	Just like os . Getenv but with a second return value ; a boolean specifying if name was actually set in the environment .
7288	To be unix y we translate flagnames to their uppercase equivalents .
7289	NewPolicy returns a default password policy which can be modified
7290	CreateRandom returns a random byte string of given length from given byte string
7291	Shuffle the given byte string
7292	Generate a new password based on given policy
7293	Returns same path as Executable returns just the folder path . Excludes the executable name .
7294	Ignore is a sentinel option to add ignore error handlers .
7295	Sigs is a sentinel option to set the specified signals for shutdown .
7296	Logf is a sentinel option to set a logger .
7297	Errorf is a sentinel option to set a error logger .
7298	New creates a new sentinel server group .
7299	Run starts the server group returning the first encountered error upon shutdown .
7300	Shutdown calls all registered shutdown funcs .
7301	ShutdownIgnore returns if any of the registered ignore funcs reported true .
7302	Register registers a server its shutdown func and ignore error funcs .
7303	Mux creates a new network connection muxer and registers its server shutdown and ignore error funcs .
7304	HTTP creates a HTTP server and registers it with the sentinel .
7305	IgnoreError returns a func that will return true when the passed errors match .
7306	IgnoreNetOpError returns true when the passed error is a net . OpError with error use of closed network connection .
7307	convertAndAppendContextFuncs converts and appends funcs in v to o .
7308	Router sets up the Router - extracted for testability
7309	buildInfoHandler - This is a stop gap and will be added to when we can define what we should display here
7310	jsonEncoder is an Encoder that produces JSON - formatted responses .
7311	Json is middleware to deserialize a JSON payload from the request into the struct that is passed in . The resulting struct is then validated but no error handling is actually performed here . An interface pointer can be added as a second argument in order to map the struct to a specific interface .
7312	Performs validation and combines errors from validation with errors from deserialization then maps both the resulting struct and the errors to the context .
7313	Total errors is the sum of errors with the request overall and errors on individual fields .
7314	Converts options into CORS headers .
7315	Converts options into CORS headers for a preflight response .
7316	Looks up if the origin matches one of the patterns provided in Options . AllowOrigins patterns .
7317	Allows CORS for requests those match the provided options .
7318	Renderer is a Middleware that maps a render . Render service into the Martini handler chain . An single variadic render . Options struct can be optionally provided to configure HTML rendering . The default directory for templates is templates and the default file extension is . tmpl . If MARTINI_ENV is set to or development then templates will be recompiled on every request . For more performance set the MARTINI_ENV environment variable to production
7319	Returns the parsed languages in a human readable fashion .
7320	Creates a new handler that parses the Accept - Language HTTP header . The parsed structure is a slice of Accept - Language values stored in an AcceptLanguages instance sorted based on the language qualifier .
7321	strip Prefix for every incoming http request
7322	Basic returns a Handler that authenticates via Basic Auth . Writes a http . StatusUnauthorized if authentication fails
7323	UpdateUser updates the User object stored in the session . This is useful incase a change is made to the user model that needs to persist across requests .
7324	GetById will populate a user object from a database model with a matching id .
7325	AddressToAccountId converts the provided address into a xdr . AccountId
7326	MutateChangeTrust for Asset sets the ChangeTrustOp s Line field
7327	MutateChangeTrust for Limit sets the ChangeTrustOp s Limit field
7328	Trust is a helper that creates ChangeTrustBuilder
7329	RemoveTrust is a helper that creates ChangeTrustBuilder
7330	MutatePayment for Asset sets the PaymentOp s Asset field
7331	MutatePayment for Destination sets the PaymentOp s Destination field
7332	MutatePayment for NativeAmount sets the PaymentOp s currency field to native and sets its amount to the provided integer
7333	MutatePayment for PayWithPath sets the PathPaymentOp s SendAsset SendMax and Path fields
7334	MutateAccountMerge for Destination sets the AccountMergeBuilder s Destination field
7335	MustParse is the panicking version of Parse
7336	Parse parses the provided as a stellar amount i . e . A 64 - bit signed integer that represents a decimal number with 7 digits of significance in the fractional portion of the number .
7337	String returns an amount string from the provided raw value v .
7338	CreateOffer creates a new offer
7339	CreatePassiveOffer creates a new passive offer
7340	UpdateOffer updates an existing offer
7341	DeleteOffer deletes an existing offer
7342	ManageOffer groups the creation of a new ManageOfferBuilder with a call to Mutate .
7343	Mutate applies the provided mutators to this builder s offer or operation .
7344	MutateManageOffer for Amount sets the ManageOfferOp s Amount field
7345	MutateManageOffer for OfferID sets the ManageOfferOp s OfferID field
7346	MutateManageOffer for Rate sets the ManageOfferOp s selling buying and price fields
7347	MutateOperation for SourceAccount sets the operation s SourceAccount to the pubilic key for the address provided
7348	String returns a string represenation of p
7349	Transaction groups the creation of a new TransactionBuilder with a call to Mutate .
7350	Mutate applies the provided TransactionMutators to this builder s transaction
7351	Hash returns the hash of this builder s transaction .
7352	HashHex returns the hex - encoded hash of this builder s transaction
7353	Sign returns an new TransactionEnvelopeBuilder using this builder s transaction as the basis and with signatures of that transaction from the provided Signers .
7354	MutateTransaction for AllowTrustBuilder causes the underylying AllowTrustOp to be added to the operation list for the provided transaction
7355	MutateTransaction for ChangeTrustBuilder causes the underylying CreateAccountOp to be added to the operation list for the provided transaction
7356	MutateTransaction for CreateAccountBuilder causes the underylying CreateAccountOp to be added to the operation list for the provided transaction
7357	MutateTransaction for Defaults sets reasonable defaults on the transaction being built
7358	MutateTransaction for InflationBuilder causes the underylying InflationOp to be added to the operation list for the provided transaction
7359	MutateTransaction for ManageDataBuilder causes the underylying ManageData to be added to the operation list for the provided transaction
7360	MutateTransaction for ManageOfferBuilder causes the underylying ManageData to be added to the operation list for the provided transaction
7361	MutateTransaction for MemoHash sets the memo .
7362	MutateTransaction for MemoID sets the memo .
7363	MutateTransaction for MemoReturn sets the memo .
7364	MutateTransaction for MemoText sets the memo .
7365	MutateTransaction for Network sets the Network ID to use when signing this transaction
7366	MutateTransaction for PaymentBuilder causes the underylying PaymentOp or PathPaymentOp to be added to the operation list for the provided transaction
7367	MutateTransaction for SetOptionsBuilder causes the underylying SetOptionsOp to be added to the operation list for the provided transaction
7368	MutateTransaction for Sequence sets the SeqNum on the transaction .
7369	MutateTransaction for SourceAccount sets the transaction s SourceAccount to the pubilic key for the address provided
7370	Scan reads from src into an Int64
7371	InitialState returns the initial state of the LedgerEntry identified by key just prior to the application of the transaction the produced b . Returns nil if the ledger entry did not exist prior to the bundle .
7372	Changes returns any changes within the bundle that apply to the entry identified by key .
7373	StateAfter returns the state of entry key after the application of the operation at opidx
7374	changes returns any changes within the bundle that apply to the entry identified by key that occurred at or before maxOp .
7375	MustDecode is like Decode but panics on error
7376	Encode encodes the provided data to a StrKey using the provided version byte .
7377	MustEncode is like Encode but panics on error
7378	checkValidVersionByte returns an error if the provided value is not one of the defined valid version byte constants .
7379	Checksum returns the 2 - byte checksum for the provided data
7380	Validate returns an error if the provided checksum does not match the calculated checksum of the provided data
7381	LedgerKey returns the key for the ledger entry that was changed in change .
7382	aborts the attempt if a desired character is not a valid base32 digit
7383	Address returns the strkey encoded form of this AccountId . This method will panic if the accountid is backed by a public key of an unknown type .
7384	Equals returns true if other is equivalent to aid
7385	SetAddress modifies the receiver setting it s value to the AccountId form of the provided address .
7386	ToXdrObject creates xdr . Asset object from build . Asset object
7387	Through appends a new asset to the path
7388	PayWith is a helper to create PayWithPath struct
7389	continuedFraction calculates and returns the best rational approximation of the given real number .
7390	Mutate applies the provided TransactionEnvelopeMutators to this builder s envelope
7391	MutateTX runs Mutate on the underlying transaction using the provided mutators .
7392	Bytes encodes the builder s underlying envelope to XDR
7393	Base64 returns a string which is the xdr - then - base64 - encoded form of the builder s underlying transaction envelope
7394	MutateTransactionEnvelope for TransactionBuilder causes the underylying transaction to be set as the provided envelope s Tx field
7395	MutateSetOptions for HomeDomain sets the SetOptionsOp s HomeDomain field
7396	MutateSetOptions for InflationDest sets the SetOptionsOp s InflationDest field
7397	MutateSetOptions for MasterWeight sets the SetOptionsOp s MasterWeight field
7398	MutateSetOptions for Signer sets the SetOptionsOp s signer field
7399	SetThresholds creates Thresholds mutator
7400	MutateSetOptions for Thresholds sets the SetOptionsOp s thresholds fields
7401	MutateSetOptions for SetFlag sets the SetOptionsOp s SetFlags field
7402	MutateSetOptions for ClearFlag sets the SetOptionsOp s ClearFlags field
7403	MutateCreateAccount for Destination sets the CreateAccountOp s Destination field
7404	MutateCreateAccount for NativeAmount sets the CreateAccountOp s StartingBalance field
7405	Random creates a random full keypair
7406	Master returns the master keypair for a given network passphrase
7407	Parse constructs a new KP from the provided string which should be either an address or a seed . If the provided input is a seed the resulting KP will have signing capabilities .
7408	MustParse is the panic - on - fail version of Parse
7409	MutateAllowTrust for Authorize sets the AllowTrustOp s Authorize field
7410	MutateAllowTrust for Asset sets the AllowTrustOp s Asset field
7411	MutateAllowTrust for Trustor sets the AllowTrustOp s Trustor field
7412	ToAsset converts a to a proper xdr . Asset
7413	SetNative overwrites a with the native asset type
7414	String returns a display friendly form of the asset
7415	Equals returns true if other is equivalent to a
7416	MustExtract behaves as Extract but panics if an error occurs .
7417	Unmarshal reads an xdr element from r into v .
7418	Marshal writes an xdr element v into w .
7419	ValidEnum validates a proposed value for this enum . Implements the Enum interface for CryptoKeyType
7420	NewPublicKey creates a new PublicKey .
7421	MustEd25519 retrieves the Ed25519 value from the union panicing if the value is not set .
7422	NewNodeId creates a new NodeId .
7423	NewAccountId creates a new AccountId .
7424	ValidEnum validates a proposed value for this enum . Implements the Enum interface for AssetType
7425	ArmForSwitch returns which field name should be used for storing the value for an instance of Asset
7426	NewAsset creates a new Asset .
7427	MustAlphaNum4 retrieves the AlphaNum4 value from the union panicing if the value is not set .
7428	GetAlphaNum4 retrieves the AlphaNum4 value from the union returning ok if the union s switch indicated the value is valid .
7429	MustAlphaNum12 retrieves the AlphaNum12 value from the union panicing if the value is not set .
7430	GetAlphaNum12 retrieves the AlphaNum12 value from the union returning ok if the union s switch indicated the value is valid .
7431	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ThresholdIndexes
7432	ValidEnum validates a proposed value for this enum . Implements the Enum interface for LedgerEntryType
7433	ValidEnum validates a proposed value for this enum . Implements the Enum interface for AccountFlags
7434	NewAccountEntryExt creates a new AccountEntryExt .
7435	ValidEnum validates a proposed value for this enum . Implements the Enum interface for TrustLineFlags
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt .
7437	ValidEnum validates a proposed value for this enum . Implements the Enum interface for OfferEntryFlags
7438	NewOfferEntryExt creates a new OfferEntryExt .
7439	NewDataEntryExt creates a new DataEntryExt .
7440	NewLedgerEntryData creates a new LedgerEntryData .
7441	NewLedgerEntryExt creates a new LedgerEntryExt .
7442	ValidEnum validates a proposed value for this enum . Implements the Enum interface for EnvelopeType
7443	ValidEnum validates a proposed value for this enum . Implements the Enum interface for OperationType
7444	ArmForSwitch returns which field name should be used for storing the value for an instance of AllowTrustOpAsset
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset .
7446	MustAssetCode4 retrieves the AssetCode4 value from the union panicing if the value is not set .
7447	GetAssetCode4 retrieves the AssetCode4 value from the union returning ok if the union s switch indicated the value is valid .
7448	MustAssetCode12 retrieves the AssetCode12 value from the union panicing if the value is not set .
7449	GetAssetCode12 retrieves the AssetCode12 value from the union returning ok if the union s switch indicated the value is valid .
7450	NewOperationBody creates a new OperationBody .
7451	MustCreateAccountOp retrieves the CreateAccountOp value from the union panicing if the value is not set .
7452	GetCreateAccountOp retrieves the CreateAccountOp value from the union returning ok if the union s switch indicated the value is valid .
7453	MustPaymentOp retrieves the PaymentOp value from the union panicing if the value is not set .
7454	GetPaymentOp retrieves the PaymentOp value from the union returning ok if the union s switch indicated the value is valid .
7455	MustPathPaymentOp retrieves the PathPaymentOp value from the union panicing if the value is not set .
7456	GetPathPaymentOp retrieves the PathPaymentOp value from the union returning ok if the union s switch indicated the value is valid .
7457	MustManageOfferOp retrieves the ManageOfferOp value from the union panicing if the value is not set .
7458	GetManageOfferOp retrieves the ManageOfferOp value from the union returning ok if the union s switch indicated the value is valid .
7459	MustCreatePassiveOfferOp retrieves the CreatePassiveOfferOp value from the union panicing if the value is not set .
7460	GetCreatePassiveOfferOp retrieves the CreatePassiveOfferOp value from the union returning ok if the union s switch indicated the value is valid .
7461	MustSetOptionsOp retrieves the SetOptionsOp value from the union panicing if the value is not set .
7462	GetSetOptionsOp retrieves the SetOptionsOp value from the union returning ok if the union s switch indicated the value is valid .
7463	MustChangeTrustOp retrieves the ChangeTrustOp value from the union panicing if the value is not set .
7464	GetChangeTrustOp retrieves the ChangeTrustOp value from the union returning ok if the union s switch indicated the value is valid .
7465	MustAllowTrustOp retrieves the AllowTrustOp value from the union panicing if the value is not set .
7466	GetAllowTrustOp retrieves the AllowTrustOp value from the union returning ok if the union s switch indicated the value is valid .
7467	MustDestination retrieves the Destination value from the union panicing if the value is not set .
7468	GetDestination retrieves the Destination value from the union returning ok if the union s switch indicated the value is valid .
7469	MustManageDataOp retrieves the ManageDataOp value from the union panicing if the value is not set .
7470	GetManageDataOp retrieves the ManageDataOp value from the union returning ok if the union s switch indicated the value is valid .
7471	ValidEnum validates a proposed value for this enum . Implements the Enum interface for MemoType
7472	ArmForSwitch returns which field name should be used for storing the value for an instance of Memo
7473	NewMemo creates a new Memo .
7474	MustText retrieves the Text value from the union panicing if the value is not set .
7475	GetText retrieves the Text value from the union returning ok if the union s switch indicated the value is valid .
7476	MustId retrieves the Id value from the union panicing if the value is not set .
7477	GetId retrieves the Id value from the union returning ok if the union s switch indicated the value is valid .
7478	MustHash retrieves the Hash value from the union panicing if the value is not set .
7479	GetHash retrieves the Hash value from the union returning ok if the union s switch indicated the value is valid .
7480	MustRetHash retrieves the RetHash value from the union panicing if the value is not set .
7481	NewTransactionExt creates a new TransactionExt .
7482	ValidEnum validates a proposed value for this enum . Implements the Enum interface for CreateAccountResultCode
7483	ArmForSwitch returns which field name should be used for storing the value for an instance of CreateAccountResult
7484	NewCreateAccountResult creates a new CreateAccountResult .
7485	ValidEnum validates a proposed value for this enum . Implements the Enum interface for PaymentResultCode
7486	ArmForSwitch returns which field name should be used for storing the value for an instance of PaymentResult
7487	NewPaymentResult creates a new PaymentResult .
7488	ValidEnum validates a proposed value for this enum . Implements the Enum interface for PathPaymentResultCode
7489	ArmForSwitch returns which field name should be used for storing the value for an instance of PathPaymentResult
7490	NewPathPaymentResult creates a new PathPaymentResult .
7491	MustNoIssuer retrieves the NoIssuer value from the union panicing if the value is not set .
7492	GetNoIssuer retrieves the NoIssuer value from the union returning ok if the union s switch indicated the value is valid .
7493	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ManageOfferResultCode
7494	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ManageOfferEffect
7495	ArmForSwitch returns which field name should be used for storing the value for an instance of ManageOfferSuccessResultOffer
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResultOffer .
7497	ArmForSwitch returns which field name should be used for storing the value for an instance of ManageOfferResult
7498	NewManageOfferResult creates a new ManageOfferResult .
7499	ValidEnum validates a proposed value for this enum . Implements the Enum interface for SetOptionsResultCode
7500	ArmForSwitch returns which field name should be used for storing the value for an instance of SetOptionsResult
7501	NewSetOptionsResult creates a new SetOptionsResult .
7502	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ChangeTrustResultCode
7503	ArmForSwitch returns which field name should be used for storing the value for an instance of ChangeTrustResult
7504	NewChangeTrustResult creates a new ChangeTrustResult .
7505	ValidEnum validates a proposed value for this enum . Implements the Enum interface for AllowTrustResultCode
7506	ArmForSwitch returns which field name should be used for storing the value for an instance of AllowTrustResult
7507	NewAllowTrustResult creates a new AllowTrustResult .
7508	ValidEnum validates a proposed value for this enum . Implements the Enum interface for AccountMergeResultCode
7509	ArmForSwitch returns which field name should be used for storing the value for an instance of AccountMergeResult
7510	NewAccountMergeResult creates a new AccountMergeResult .
7511	MustSourceAccountBalance retrieves the SourceAccountBalance value from the union panicing if the value is not set .
7512	GetSourceAccountBalance retrieves the SourceAccountBalance value from the union returning ok if the union s switch indicated the value is valid .
7513	ValidEnum validates a proposed value for this enum . Implements the Enum interface for InflationResultCode
7514	ArmForSwitch returns which field name should be used for storing the value for an instance of InflationResult
7515	NewInflationResult creates a new InflationResult .
7516	MustPayouts retrieves the Payouts value from the union panicing if the value is not set .
7517	GetPayouts retrieves the Payouts value from the union returning ok if the union s switch indicated the value is valid .
7518	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ManageDataResultCode
7519	ArmForSwitch returns which field name should be used for storing the value for an instance of ManageDataResult
7520	NewManageDataResult creates a new ManageDataResult .
7521	ValidEnum validates a proposed value for this enum . Implements the Enum interface for OperationResultCode
7522	ArmForSwitch returns which field name should be used for storing the value for an instance of OperationResultTr
7523	NewOperationResultTr creates a new OperationResultTr .
7524	MustCreateAccountResult retrieves the CreateAccountResult value from the union panicing if the value is not set .
7525	GetCreateAccountResult retrieves the CreateAccountResult value from the union returning ok if the union s switch indicated the value is valid .
7526	MustPaymentResult retrieves the PaymentResult value from the union panicing if the value is not set .
7527	GetPaymentResult retrieves the PaymentResult value from the union returning ok if the union s switch indicated the value is valid .
7528	MustPathPaymentResult retrieves the PathPaymentResult value from the union panicing if the value is not set .
7529	GetPathPaymentResult retrieves the PathPaymentResult value from the union returning ok if the union s switch indicated the value is valid .
7530	MustManageOfferResult retrieves the ManageOfferResult value from the union panicing if the value is not set .
7531	GetManageOfferResult retrieves the ManageOfferResult value from the union returning ok if the union s switch indicated the value is valid .
7532	MustCreatePassiveOfferResult retrieves the CreatePassiveOfferResult value from the union panicing if the value is not set .
7533	MustSetOptionsResult retrieves the SetOptionsResult value from the union panicing if the value is not set .
7534	GetSetOptionsResult retrieves the SetOptionsResult value from the union returning ok if the union s switch indicated the value is valid .
7535	MustChangeTrustResult retrieves the ChangeTrustResult value from the union panicing if the value is not set .
7536	GetChangeTrustResult retrieves the ChangeTrustResult value from the union returning ok if the union s switch indicated the value is valid .
7537	MustAllowTrustResult retrieves the AllowTrustResult value from the union panicing if the value is not set .
7538	GetAllowTrustResult retrieves the AllowTrustResult value from the union returning ok if the union s switch indicated the value is valid .
7539	MustAccountMergeResult retrieves the AccountMergeResult value from the union panicing if the value is not set .
7540	GetAccountMergeResult retrieves the AccountMergeResult value from the union returning ok if the union s switch indicated the value is valid .
7541	MustInflationResult retrieves the InflationResult value from the union panicing if the value is not set .
7542	GetInflationResult retrieves the InflationResult value from the union returning ok if the union s switch indicated the value is valid .
7543	MustManageDataResult retrieves the ManageDataResult value from the union panicing if the value is not set .
7544	GetManageDataResult retrieves the ManageDataResult value from the union returning ok if the union s switch indicated the value is valid .
7545	ArmForSwitch returns which field name should be used for storing the value for an instance of OperationResult
7546	NewOperationResult creates a new OperationResult .
7547	MustTr retrieves the Tr value from the union panicing if the value is not set .
7548	GetTr retrieves the Tr value from the union returning ok if the union s switch indicated the value is valid .
7549	ValidEnum validates a proposed value for this enum . Implements the Enum interface for TransactionResultCode
7550	ArmForSwitch returns which field name should be used for storing the value for an instance of TransactionResultResult
7551	NewTransactionResultResult creates a new TransactionResultResult .
7552	MustResults retrieves the Results value from the union panicing if the value is not set .
7553	GetResults retrieves the Results value from the union returning ok if the union s switch indicated the value is valid .
7554	NewTransactionResultExt creates a new TransactionResultExt .
7555	NewStellarValueExt creates a new StellarValueExt .
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt .
7557	ValidEnum validates a proposed value for this enum . Implements the Enum interface for LedgerUpgradeType
7558	ArmForSwitch returns which field name should be used for storing the value for an instance of LedgerUpgrade
7559	NewLedgerUpgrade creates a new LedgerUpgrade .
7560	MustNewLedgerVersion retrieves the NewLedgerVersion value from the union panicing if the value is not set .
7561	GetNewLedgerVersion retrieves the NewLedgerVersion value from the union returning ok if the union s switch indicated the value is valid .
7562	MustNewBaseFee retrieves the NewBaseFee value from the union panicing if the value is not set .
7563	GetNewBaseFee retrieves the NewBaseFee value from the union returning ok if the union s switch indicated the value is valid .
7564	MustNewMaxTxSetSize retrieves the NewMaxTxSetSize value from the union panicing if the value is not set .
7565	GetNewMaxTxSetSize retrieves the NewMaxTxSetSize value from the union returning ok if the union s switch indicated the value is valid .
7566	ArmForSwitch returns which field name should be used for storing the value for an instance of LedgerKey
7567	NewLedgerKey creates a new LedgerKey .
7568	ValidEnum validates a proposed value for this enum . Implements the Enum interface for BucketEntryType
7569	ArmForSwitch returns which field name should be used for storing the value for an instance of BucketEntry
7570	NewBucketEntry creates a new BucketEntry .
7571	MustLiveEntry retrieves the LiveEntry value from the union panicing if the value is not set .
7572	GetLiveEntry retrieves the LiveEntry value from the union returning ok if the union s switch indicated the value is valid .
7573	MustDeadEntry retrieves the DeadEntry value from the union panicing if the value is not set .
7574	GetDeadEntry retrieves the DeadEntry value from the union returning ok if the union s switch indicated the value is valid .
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt .
7576	ArmForSwitch returns which field name should be used for storing the value for an instance of TransactionHistoryResultEntryExt
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt .
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt .
7579	NewScpHistoryEntry creates a new ScpHistoryEntry .
7580	ValidEnum validates a proposed value for this enum . Implements the Enum interface for LedgerEntryChangeType
7581	ArmForSwitch returns which field name should be used for storing the value for an instance of LedgerEntryChange
7582	NewLedgerEntryChange creates a new LedgerEntryChange .
7583	MustCreated retrieves the Created value from the union panicing if the value is not set .
7584	GetCreated retrieves the Created value from the union returning ok if the union s switch indicated the value is valid .
7585	MustUpdated retrieves the Updated value from the union panicing if the value is not set .
7586	GetUpdated retrieves the Updated value from the union returning ok if the union s switch indicated the value is valid .
7587	MustRemoved retrieves the Removed value from the union panicing if the value is not set .
7588	GetRemoved retrieves the Removed value from the union returning ok if the union s switch indicated the value is valid .
7589	MustState retrieves the State value from the union panicing if the value is not set .
7590	GetState retrieves the State value from the union returning ok if the union s switch indicated the value is valid .
7591	NewTransactionMeta creates a new TransactionMeta .
7592	MustOperations retrieves the Operations value from the union panicing if the value is not set .
7593	GetOperations retrieves the Operations value from the union returning ok if the union s switch indicated the value is valid .
7594	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ErrorCode
7595	ValidEnum validates a proposed value for this enum . Implements the Enum interface for IpAddrType
7596	ArmForSwitch returns which field name should be used for storing the value for an instance of PeerAddressIp
7597	NewPeerAddressIp creates a new PeerAddressIp .
7598	MustIpv4 retrieves the Ipv4 value from the union panicing if the value is not set .
7599	GetIpv4 retrieves the Ipv4 value from the union returning ok if the union s switch indicated the value is valid .
7600	MustIpv6 retrieves the Ipv6 value from the union panicing if the value is not set .
7601	GetIpv6 retrieves the Ipv6 value from the union returning ok if the union s switch indicated the value is valid .
7602	ValidEnum validates a proposed value for this enum . Implements the Enum interface for MessageType
7603	ArmForSwitch returns which field name should be used for storing the value for an instance of StellarMessage
7604	NewStellarMessage creates a new StellarMessage .
7605	MustError retrieves the Error value from the union panicing if the value is not set .
7606	GetError retrieves the Error value from the union returning ok if the union s switch indicated the value is valid .
7607	MustHello retrieves the Hello value from the union panicing if the value is not set .
7608	GetHello retrieves the Hello value from the union returning ok if the union s switch indicated the value is valid .
7609	MustAuth retrieves the Auth value from the union panicing if the value is not set .
7610	GetAuth retrieves the Auth value from the union returning ok if the union s switch indicated the value is valid .
7611	MustDontHave retrieves the DontHave value from the union panicing if the value is not set .
7612	GetDontHave retrieves the DontHave value from the union returning ok if the union s switch indicated the value is valid .
7613	MustPeers retrieves the Peers value from the union panicing if the value is not set .
7614	GetPeers retrieves the Peers value from the union returning ok if the union s switch indicated the value is valid .
7615	MustTxSetHash retrieves the TxSetHash value from the union panicing if the value is not set .
7616	GetTxSetHash retrieves the TxSetHash value from the union returning ok if the union s switch indicated the value is valid .
7617	MustTxSet retrieves the TxSet value from the union panicing if the value is not set .
7618	GetTxSet retrieves the TxSet value from the union returning ok if the union s switch indicated the value is valid .
7619	MustTransaction retrieves the Transaction value from the union panicing if the value is not set .
7620	GetTransaction retrieves the Transaction value from the union returning ok if the union s switch indicated the value is valid .
7621	MustQSetHash retrieves the QSetHash value from the union panicing if the value is not set .
7622	GetQSetHash retrieves the QSetHash value from the union returning ok if the union s switch indicated the value is valid .
7623	MustQSet retrieves the QSet value from the union panicing if the value is not set .
7624	GetQSet retrieves the QSet value from the union returning ok if the union s switch indicated the value is valid .
7625	MustEnvelope retrieves the Envelope value from the union panicing if the value is not set .
7626	GetEnvelope retrieves the Envelope value from the union returning ok if the union s switch indicated the value is valid .
7627	MustGetScpLedgerSeq retrieves the GetScpLedgerSeq value from the union panicing if the value is not set .
7628	GetGetScpLedgerSeq retrieves the GetScpLedgerSeq value from the union returning ok if the union s switch indicated the value is valid .
7629	ArmForSwitch returns which field name should be used for storing the value for an instance of AuthenticatedMessage
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage .
7631	ValidEnum validates a proposed value for this enum . Implements the Enum interface for ScpStatementType
7632	ArmForSwitch returns which field name should be used for storing the value for an instance of ScpStatementPledges
7633	NewScpStatementPledges creates a new ScpStatementPledges .
7634	MustPrepare retrieves the Prepare value from the union panicing if the value is not set .
7635	GetPrepare retrieves the Prepare value from the union returning ok if the union s switch indicated the value is valid .
7636	MustConfirm retrieves the Confirm value from the union panicing if the value is not set .
7637	GetConfirm retrieves the Confirm value from the union returning ok if the union s switch indicated the value is valid .
7638	MustExternalize retrieves the Externalize value from the union panicing if the value is not set .
7639	GetExternalize retrieves the Externalize value from the union returning ok if the union s switch indicated the value is valid .
7640	MustNominate retrieves the Nominate value from the union panicing if the value is not set .
7641	GetNominate retrieves the Nominate value from the union returning ok if the union s switch indicated the value is valid .
7642	SafeUnmarshalBase64 first decodes the provided reader from base64 before decoding the xdr into the provided destination . Also ensures that the reader is fully consumed .
7643	SafeUnmarshal decodes the provided reader into the destination and verifies that provided bytes are all consumed by the unmarshalling process .
7644	SendAmount returns the amount spent denominated in the source asset in the course of this path payment
7645	LoadAccount loads the account state from horizon . err can be either error object or horizon . Error object .
7646	SequenceForAccount implements build . SequenceProvider
7647	SubmitTransaction submits a transaction to the network . err can be either error object or horizon . Error object .
7648	Equals returns true if other is equivalent to key
7649	SetAccount mutates key such that it represents the identity of account
7650	SetData mutates key such that it represents the identity of the data entry owned by account and for name .
7651	SetOffer mutates key such that it represents the identity of the data entry owned by account and for offer id .
7652	SetTrustline mutates key such that it represents the identity of the trustline owned by account and for asset .
7653	Add a key and value to the hash table .
7654	Try to find a hash function that does not cause collisions with table when applied to the keys in the bucket .
7655	Hash index from key .
7656	Despite returning a uint64 this actually reads a uint32 . All table indices and lengths are stored as uint32 values .
7657	Read a serialized CHD .
7658	Get an entry from the hash table .
7659	Iterate over entries in the hash table .
7660	Serialize the CHD . The serialized form is conducive to mmapped access . See the Mmap function for details .
7661	RegisterDatasources adds path to the Mapnik plugin search path .
7662	RegisterDatasources adds path to the Mapnik fonts search path .
7663	New initializes a new Map .
7664	NewSized initializes a new Map with the given size .
7665	Load reads in a Mapnik map XML .
7666	Resize changes the map size in pixel . Sizes larger than 16k pixels are ignored by Mapnik . Use NewSized to initialize larger maps .
7667	Free deallocates the map .
7668	SRS returns the projection of the map .
7669	ZoomAll zooms to the maximum extent .
7670	ZoomTo zooms to the given bounding box .
7671	Render returns the map as an encoded image .
7672	RenderImage returns the map as an unencoded image . Image .
7673	RenderToFile writes the map as an encoded image to the file system .
7674	SetBufferSize sets the pixel buffer at the map image edges where Mapnik should not render any labels .
7675	Search the network for SSDP devices using the given search string and duration to discover new devices . This function will return an array of SearchReponses discovered .
7676	Get blocks for an available connection .
7677	put puts the connection back to the pool . If the pool is closed put simply close any connections received and return immediately . A nil net . Conn is illegal and will be rejected .
7678	MonoToStereoF32 converts a mono stream into a stereo one by copying the mono signal to both channels in an interleaved signal .
7679	BitCrush reduces the resolution of the sample to the target bit depth Note that bit crusher effects are usually made of this feature + a decimator
7680	NormalizeMax sets the max value to 1 and normalize the rest of the data .
7681	Gain applies the multiplier to the passed buffer . A multipler of 1 would increase the amplitude of the signal by 100% while a multiplier of 0 would not do anything . Note that this is a very very naive implementation and we will more than add a more useful DB gain transform .
7682	MonoDownmix converts the buffer to a mono buffer by downmixing the channels together .
7683	Quantize quantizes the audio signal to match the target bitDepth
7684	PCMScale converts a buffer with audio content from - 1 to 1 into the PCM scale based on the passed bitdepth . Note that while the PCM data is scaled the PCM format is not changed .
7685	StereoPan changes the balance of the input buffer by panning more to the left or the right . The pan value must be between 0 and 1 where 0 is full first channel 0 . 5 center and 1 full second channel . Note that the signal from 1 channel is not sent to the other this transform only reduces the balance of one of the 2 channels .
7686	Leader returns the current leader .
7687	IsLeader returns true if the candidate is currently a leader .
7688	NewResponse returns a new OAuth2Response
7689	GetRequestID returns a request ID from the given context if one is present . Returns the empty string if a request ID cannot be found .
7690	replace ResponseWriter with a monitorable one return logger
7691	SendMailSSL envoie un email par SSL
7692	Send envoie un email
7693	WaitForIt waits for a service or URL to become online
7694	Get a config
7695	Read in config file and ENV variables if set .
7696	WritePluginResultsToDatabase upserts plugin results into Database
7697	NewAuthController constructs new AuthController
7698	Authenticate controls authorizations
7699	NewOAuth2Controller constructs new AuthController
7700	Refresh returns a new access token
7701	Token returns a new access token
7702	Logging logs http requests
7703	SingleFile returns a handler
7704	Write Satisfy the http . ResponseWriter interface
7705	Hijack Satisfy the http . ResponseWriter interface
7706	NewMongo creates a newinstance of Mongo
7707	Disconnect a Mongo client
7708	New - Creates a new table .
7709	PrintTable - Prints table .
7710	PrintHorizontal - Prints horizontal table from a map .
7711	PrintRow - Prints table with only one row .
7712	AddRow - Adds row to the table .
7713	Print - Prints table .
7714	String - Ouput table as a string .
7715	getHead - Returns table header containing fields names .
7716	rowString - Creates a string row .
7717	fieldString - Creates field value string .
7718	stringTableDash - output table dash . Markdown or not depending on settings .
7719	printMarkdownDash - Prints dash in middle of table .
7720	stringMarkdownDash - output dash in middle of table .
7721	HashPassword hash un mot de passe
7722	EncodeOAuth2Code generate an OAuth2 code
7723	DecodeOAuth2Code inverse of EncodeOAuth2Code
7724	NewServer create a new instance of Server
7725	Start the server .
7726	Stop the server .
7727	NewLoggingServeMux allocates and returns a new LoggingServeMux
7728	Handler sastisfy interface
7729	Handle register handler
7730	HandleFunc registers the handler function for the given pattern .
7731	Init initalizes ElasticSearch for use with malice
7732	WaitForConnection waits for connection to Elasticsearch to be ready
7733	StoreFileInfo inserts initial sample info into database creating a placeholder for it
7734	StorePluginResults stores a plugin s results in the database by updating the placeholder created by the call to StoreFileInfo
7735	CamelCase converts strings to their camel case equivalent
7736	Getopt reads environment variables . If not found will return a supplied default value
7737	Getopts reads from user input then environment variable and finally a sane default .
7738	GetSHA256 calculates a file s sha256sum
7739	RunCommand runs cmd on file
7740	RemoveDuplicates removes duplicate items from a list
7741	Unzip unzips archive to target location
7742	SliceContainsString returns if slice contains substring
7743	NewSMTP create new SMTP
7744	SendMail send an email
7745	GetEnvironment returns a SMTP Server configuration for the specified environment in parameter
7746	GetSMTP returns a SMTP Server configurations
7747	GetConfig returns a Server configurations
7748	GetEnvironment returns a Mongo configuration for the specified environment in parameter
7749	GetMongo returns a Mongo configurations
7750	TokenHandler manage authorizations
7751	Receive waits to receive the next incoming messages from the CCS connection .
7752	Send sends a message to GCM CCS server and returns the number of bytes written and any error encountered . If empty message ID is given it s auto - generated and message object is modified with the generated ID .
7753	allBoshReleaseNames returns a union of unique BOSH release names across all contained BOSH releases .
7754	AddedProperty adds a new added job property to the list of differences
7755	RemovedProperty adds a new removed job property to the list of differences
7756	AddDeltaJob adds a new delta for a specific job
7757	Concat adds the other result to this result
7758	Read downloads the specified Release to the local cache dir and returns a reader to the underyling release package .
7759	Pull downloads the specified Release to the local cache dir
7760	BuildJob - function to create a compiled version of the current job
7761	LoadBoshRelease creates an initialized boshRelease instance from the specifed local or remote . tgz file
7762	readBoshRelease creates an initialized boshRelease instance from the specifed . tgz reader
7763	readBoshRelease reads a bosh release out of the given reader into a new boshRelease struct
7764	readBoshJob reads a BOSH job manifest out of the given reader into a new JobManifest struct
7765	NewRequest is like http . NewRequest with the exception that it will add basic auth headers if the client is configured for basic auth .
7766	PushCloudConfig uploads a cloud config to bosh .
7767	Generate - used to generate a struct for a given job
7768	CreateNewRecord - creates a record from a given period delimited property and enaml . JobManifestProperty
7769	NewShowCmd creates a new ShowCmd instance .
7770	All writes out all the release data to writer .
7771	GetDefaultTaskImageResource - convenience helper to output default object for task images
7772	AddRawJob helper to add a job to the pipeline manifest
7773	AddGroup helper to add a group to the pipeline manifest
7774	GetResourceByName convenience method to find and return a resource by name
7775	AddRawResource helper to add a resource to the pipeline manifest
7776	AddResource helper to add a resource to the pipeline manifest
7777	AddGithubResource github specific resource add
7778	AddBoshIOResource bosh io specific resource add
7779	AddBoshDeploymentResource bosh deployment resource add
7780	AddGitResource git specific resource add
7781	allJobNames returns a union of unique job names across both BOSH releases
7782	NewDeploymentManifestFromFile - will read any implementor of os . File and initialize a deployment manifest from its bytes . this can be used to read a file or os . Stdin
7783	NewDeploymentManifest - deployment manifest constructor
7784	AddRemoteRelease - adds a remote release to the manifest . Url should not contain version information
7785	AddRemoteStemcell adds a remote stemcell to the manifest . The URL should not contain version information .
7786	Tag gets the tag value for a specified key .
7787	RemoveTag removes the tag with the specified key .
7788	LoadPivnetRelease creates an initialized pivnetRelease instance from the specified . pivotal file .
7789	BoshReleaseOrEmpty returns the named BOSH release from this pivnet release if it exists otherwise emptyBoshRelease is returned .
7790	readPivnetRelease reads a pivnet release out of the given reader into a new pivnetRelease struct
7791	decodeYaml takes a reader to a YAML file and unmarshals it to the given struct .
7792	NewZipWalker creates a new Walker instance that can read a . zip stream
7793	NewDiffCmd creates a new DiffCmd instance .
7794	All writes out all the differences between the specified releases
7795	Job writes out the job differences between the specified releases
7796	New creates a Differ instance for comparing two releases
7797	StructName - gets struct name for property
7798	TypeName - returns valid type name for a give record
7799	NewTgzWalker creates a new Walker instance that can read a . tgz stream
7800	NewBackoff creates a new Backoff using the specified BackoffStrategy start duration and limit .
7801	Reset sets the Backoff to its initial conditions ready to start over .
7802	NewExponential creates a new backoff using the exponential backoff algorithm .
7803	NewExponentialFullJitter creates a new backoff using the exponential with full jitter backoff algorithm .
7804	NewLinear creates a new backoff using the linear backoff algorithm .
7805	GetLineSize returns the size of the sapin for a specified floor and line .
7806	GetMaxSize returns the size of the widest part of the sapin .
7807	compute iterates over floors and lines to generate the output of the sapin .
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary interface implementation
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app routes route params
7825	WithContext adds the context to the patch apps app routes route params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes route params
7827	WithApp adds the app to the patch apps app routes route params
7828	WithBody adds the body to the patch apps app routes route params
7829	WithRoute adds the route to the patch apps app routes route params
7830	WithTimeout adds the timeout to the post apps app routes params
7831	WithContext adds the context to the post apps app routes params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps app routes params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app routes route params
7836	WithContext adds the context to the put apps app routes route params
7837	WithApp adds the app to the put apps app routes route params
7838	WithBody adds the body to the put apps app routes route params
7839	WithRoute adds the route to the put apps app routes route params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON unmarshals this object from a JSON structure
7854	MarshalJSON marshals this object to a JSON structure
7855	Validate validates this task
7856	GetRanges composes the CIDR IP ranges following RFC 4632 and RFC 4291 of the given IPs with a given IPv4 CIDR and IPv6 CIDR
7857	WithTimeout adds the timeout to the get apps app routes route params
7858	WithContext adds the context to the get apps app routes route params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps app routes route params
7861	WithRoute adds the route to the get apps app routes route params
7862	New creates a new functions client
7863	SetTransport changes the transport on the client and all its subresources
7864	WithTimeout adds the timeout to the delete apps app routes route params
7865	WithContext adds the context to the delete apps app routes route params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes route params
7867	WithApp adds the app to the delete apps app routes route params
7868	WithRoute adds the route to the delete apps app routes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a ValueStore connection via grpc to the given address .
7873	Close will shutdown outgoing connectivity and stop all background goroutines ; note that the valueStore is no longer usable after a call to Close including using Startup .
7874	SetBackend sets the current backend
7875	Ring returns an instance of the current Ring
7876	GetLocalID returns the current local id
7877	GetListenAddr returns the current localnode . address2 instance
7878	Startup is not required to use the ReplGroupStore ; it will automatically connect to backend stores as needed . However if you d like to use the ring service to receive ring updates and have the ReplGroupStore automatically update itself accordingly Startup will launch a connector to that service . Otherwise you will need to call SetRing yourself to inform the ReplGroupStore of which backends to connect to .
7879	shutdownFinished closes the shutdownComplete channel 10 miliseconds after being invoked ( to give a cmd ctrl client a chance to return .
7880	Stop the backend and shutdown all listeners . Does NOT exist the process .
7881	Exit the backend and shutdown all listeners . Closes the ShutdownComplete chan when finsihed .
7882	SelfUpgrade deploys an updated binary to disk using cmdctrl . GithubUpdater
7883	SoftwareVersion returns the version of the currently running instance
7884	Shutdown will close any existing connections ; note that Startup may automatically get called with any further activity but it will use a new connection . To ensure the groupStore has no further activity use Close .
7885	Fetches a rant and its comments given a valid rant id
7886	Fetches ranter s profile data
7887	Search for rants matching the search term
7888	Returns a random rant
7889	Returns the rants tagged for weekly
7890	Fetches the userId given a valid username
7891	Shutdown will close all connections to backend stores and shutdown any running ring service connector . Note that the ReplValueStore can still be used after Shutdown it will just start reconnecting to backends again . To relaunch the ring service connector you will need to call Startup .
7892	FExists true if a file or dir exists
7893	Listen for a Shutdown signal or Outbound messages .
7894	Parse incoming message
7895	Group creates a Group type from a domain with the given name and members
7896	Groups lists the groups of a domain
7897	GetGroup retrieves a group from a domain with the given group name
7898	Reticence trucate the string in the space or on pontuation mark and put reticences in the resulting string .
7899	Check the user password . Graphics character are allowed . See unicode . IsGraphic .
7900	CleanUrl check the characteres in url and parser it with url . Parse . If url is ok return one string with it or if the scheme is missing return the url and an error .
7901	A capacity of 2 seems to be a good guess for the number of aliases .
7902	Params store the mapping of ParamName - > Parameter for the given structure . Since multiple names can be affected to a single parameter multiple keys can be associated with a single parameter .
7903	Parse discovers the given parameters structure and associates the structure s field names with their values into the Params structure .
7904	Email returns the forwarder email on the primary domain
7905	Forwarder returns a forwarder type with the given from and dest
7906	Forwarders lists the forwarders of a domain
7907	GetForwarder retreives a forwarder with the given name
7908	New returns a new Communigate Pro client
7909	EscapeCommaSeparated escapes the args and make a comma separeted list with it .
7910	Alias creates an Alias type from an account
7911	Email returns the alias email on the primary domain name
7912	Aliases lists the aliases of an account
7913	RealName return the real name of the account as registered
7914	Email returns the primary email of the account
7915	Account returns an account type with the given name
7916	Accounts lists the acounts of a domain
7917	Exists returns true if the domain
7918	Aliases returns a list of domain aliases
7919	Domain creates a domain type with the given name
7920	Domains lists the domains on the server
7921	New creates a new Err with the given Info and optional public message
7922	Wrap the given error in an errs . Err . If err is nil Wrap returns nil . Use Err . WrappedError for direct access to the wrapped error .
7923	Merge in the given info and public message parts into this error
7924	Get the string representation of the wrapper error or an empty string if wrappedErr is nil
7925	Helper to concatenate arguments into a string with spaces between the arguments
7926	MailingList creates a MailingList type from a domain with the given name
7927	Subscriber create a Subscriber type from a MalingList with the given email and name
7928	Subscribers returns a list of subscriber of a mailing list .
7929	MailingLists lists the mailing lists of a domain
7930	NewByteKeyItem creates a new item from bytes
7931	CompareBytes is a byte item comparator
7932	CompareInt is a helper integer item comparator
7933	Malloc implements C like memory allocator
7934	Free implements C like memory deallocator
7935	Stats returns allocator statistics Returns jemalloc stats
7936	FreeOSMemory forces jemalloc to scrub memory and release back to OS
7937	Add an item into skiplist segment
7938	NewSegment creates a new skiplist segment
7939	Assemble multiple skiplist segments and form a parent skiplist
7940	CompareNodeTable implements comparator for nodetable instances
7941	New creates a nodetable instance
7942	Stats returns nodetable statistics
7943	MemoryInUse returns memory used by nodetable instance
7944	Get returns node pointer for the lookup key
7945	Update inserts or replaces an existing entry
7946	Remove an item from the nodetable
7947	Close destroys the nodetable
7948	MemoryInUse returns total memory used by nodetables in a process
7949	Fill free blocks with a const This can help debugging of memory reclaimer bugs
7950	Seek to a specified key or the next bigger one if an item with key does not exist .
7951	Next moves iterator cursor to the next item
7952	Refresh is a helper API to call refresh accessor tokens manually This would enable SMR to reclaim objects faster if an iterator is alive for a longer duration of time .
7953	Close executes destructor for iterator
7954	NewIterator creates an iterator for a Nitro snapshot
7955	SeekFirst moves cursor to the first item
7956	Next moves cursor to the next item
7957	Seek moves cursor to the specified item if present
7958	Keys returns all keys from the node list
7959	Remove a key from the node list
7960	Add a key into the node list
7961	NewWithConfig creates a config from given config
7962	FreeNode deallocates the skiplist node memory
7963	MakeBuf creates an action buffer
7964	Size returns the size of a node
7965	NewLevel returns a random level for the next node
7966	Insert adds an item into the skiplist
7967	Insert2 is a more verbose version of Insert
7968	Insert3 is more verbose version of Insert2
7969	Delete an item from the skiplist
7970	DeleteNode an item from the skiplist by specifying its node
7971	GetRangeSplitItems returns nways split range pivots of the skiplist items Explicit barrier and release should be used by the caller before and after this function call
7972	Bytes return item data bytes
7973	ItemSize returns total bytes consumed by item representation
7974	KVFromBytes extracts key - value pair from item bytes returned by iterator
7975	CompareKV is a comparator for KV item
7976	Emits an Event from the EventController . Takes an EventBody which is used to build an Event . Returns number of handlers that received the event and error if an error was raised .
7977	Unregisters Handler from the EventController . This is idempotent where if a Handler is not registered no error is returned .
7978	Returns bool on whether the Handler is registered with this EventController .
7979	CompareNitro implements comparator for Nitro instances based on its id
7980	DefaultConfig - Nitro configuration
7981	Delete an item Delete always succeed if an item exists .
7982	GetNode implements lookup of an item and return its skiplist Node This API enables to lookup an item without using a snapshot handle .
7983	SetKeyComparator provides key comparator for the Nitro item data
7984	UseMemoryMgmt provides custom memory allocator for Nitro items storage
7985	NewWithConfig creates a new Nitro instance based on provided configuration .
7986	MemoryInUse returns total memory used by the Nitro instance .
7987	Close shuts down the nitro instance
7988	NewWriter creates a Nitro writer
7989	SnapshotSize returns the memory used by Nitro snapshot metadata
7990	Encode implements Binary encoder for snapshot metadata
7991	Decode implements binary decoder for snapshot metadata
7992	Open implements reference couting and garbage collection for snapshots When snapshots are shared by multiple threads each thread should Open the snapshot . This API internally tracks the reference count for the snapshot .
7993	CompareSnapshot implements comparator for snapshots based on snapshot number
7994	GC implements manual garbage collection of Nitro snapshots .
7995	GetSnapshots returns the list of current live snapshots This API is mainly for debugging purpose
7996	MemoryInUse returns total memory used by all Nitro instances in the current process
7997	CompareBS is a barrier session comparator based on seqno
7998	Acquire marks enter of an accessor in the skiplist
7999	Release marks leaving of an accessor in the skiplist
8000	FlushSession closes the current barrier session and starts the new session . The caller should provide the destructor pointer for the new session .
8001	Apply updates the report with provided paritial stats
8002	AddInt64 provides atomic add
8003	AddUint64 provides atomic add
8004	Merge updates global stats with partial stats and resets partial stats
8005	GetStats returns skiplist stats
8006	NewIterator creates an iterator for skiplist
8007	SeekFirst moves cursor to the start
8008	SeekWithCmp moves iterator to a provided item by using custom comparator
8009	Seek moves iterator to a provided item
8010	Valid returns true when iterator reaches the end
8011	Delete removes the current item from the skiplist
8012	Next moves iterator to the next item
8013	Init - externally available init method
8014	FromURL converts the given URL to a folder name
8015	ToURL converts the given folder to an URL
8016	Size returns the Version 1 header size plus the size of all the offsets
8017	WriteTo writes the TupleHeader into the given writer .
8018	Static returns a middleware handler that serves static files in the given directory .
8019	Read function reads configurations from the file defined in Config . filename .
8020	Del function deletes a key from the configuration .
8021	WriteTo function writes the configuration to a new file . This function re - organizes the configuration and deletes all the comments .
8022	To check this line is a section or not . If it is not a section it returns .
8023	To check this line is a valid key - value pair or not .
8024	To check this line is a whole line comment or not .
8025	NewResponseWrapper creates a new wrapper . The passed http . ResponseWriter is used in case the wrapper needs to be hijacked .
8026	Hijack tries to use the original http . ResponseWriter for hijacking . If the original writer doesn t implement http . Hijacker it returns an error .
8027	CloseNotify tries to use the original http . ResponseWriter for close notification . If the original writer doesn t implement http . CloseNotifier it returns a channel that will never close .
8028	DateFormat is used to format the timestamp .
8029	Logger returns a new logger to be wrapped around your main http . Handler
8030	GetAvailableInventory - this should return available inventory and start a long task poller
8031	Expiration sets the expiration time of the auth token
8032	Claimer is responsible for transforming a standard claims object into a custom one .
8033	Issuer sets the issuer in the standart claims object .
8034	User sets the query key from which to obtain the user .
8035	Password sets the query key from which to obtain the password .
8036	Extractor extracts a token from a request
8037	TokenGenerator returns a handler that will read a username and password from a request form create a jwt token if they are valid and store the signed token in the request context for later consumption . If handler h is nil the generated token will be written verbatim in the response .
8038	Token returns the token string stored in the request context or an empty string .
8039	Claims returns the claims stored in the request
8040	Used to print tokens
8041	NewLexer creates a new scanner from the input
8042	Run lexes the input by executing state functions until the state is nil
8043	emit passes an item pack to the client
8044	skipWhitespace ignores all whitespace characters
8045	next advances the lexer position and returns the next rune . If the input does not have any more runes an eof is returned .
8046	LineNum returns the current line based on the data processed so far
8047	Offset determines the character offset from the beginning of the current line
8048	errorf returns an error token and terminates the scan by passing back a nil pointer that will be the next state thus terminating the lexer
8049	Main lexer loop
8050	Lexes a comment line
8051	New creates a new TupleType with the given namespace and type name
8052	AddVersion adds a version to the tuple type
8053	Contains determines is a field exists in the TupleType
8054	Offset determines the numerical offset for the given field
8055	Versions returns an array of versions contained in this type
8056	SetPrivateMeta - set a private meta data record
8057	SetPublicMeta - set a public metadata record
8058	GetRedactedVersion - returns a redacted version of this task removing private info
8059	Equal - define task equality
8060	HTTP returns a handler that will check each request s method against a predefined whitelist . If the request s method is not part of the list the response will be a 400 Bad Request .
8061	PutUint8 sets an 8 - bit unsigned value for the given string name . The field name must be a Uint8Field otherwise an error will be returned . If the type buffer no longer has enough space to write this value an xbinary . ErrOutOfRange error will be returned . Upon success 2 bytes should be written into the buffer and the returned error should be nil . The type code is written first then the byte value .
8062	PutInt8 sets an 8 - bit signed value for the given string name . The field name must be an Int8Field otherwise an error will be returned . If the type buffer no longer has enough space to write this value an xbinary . ErrOutOfRange error will be returned . Upon success 2 bytes should be written into the buffer and the returned error should be nil . The type code is written first then the byte value .
8063	PutUint16 sets a 16 - bit unsigned value for the given field name . The field name must be a Uint16Field otherwise an error will be returned . If the type buffer no longer has enough space to write the value an xbinary . ErrOutOfRange error will be returned . Upon success the number of bytes written as well as a nil error will be returned . The type code will be writtn first . If the value is < math . MaxUint8 only 1 byte will be written . Otherwise the entire 16 - bit value will be written .
8064	PutInt16 sets a 16 - bit signed value for the given field name . The field name must be an Int16Field ; otherwise an error will be returned . If the type buffer no longer has enough space to write the value an xbinary . ErrOutOfRange error will be returned . Upon success the number of bytes written as well as a nil error will be returned . The type code will be written first . If the value is < math . MaxUint8 only 1 byte will be written . Otherwise the entire 16 - bit value will be written .
8065	PutUint32 sets a 32 - bit unsigned value for the given field name . The field name must be a Uint32Field otherwise an error will be returned . If the type buffer no longer has enough space to write the value an xbinary . ErrOutOfRange error will be returned . Upon success the number of bytes written as well as a nil error will be returned . The type code will be written first . If the value is < math . MaxUint8 only 1 byte will be written . If the value is < math . MaxUint16 only 2 bytes will be written . Otherwise the entire 32 - bit value will be written .
8066	PutInt32 sets a 32 - bit signed value for the given field name . The field name must be a Int32Field . Otherwise an error will be returned . If the type buffer no longer has enough space to write the value an xbinary . ErrOutOfRange error will be returned . Upon success the number of bytes written as well as a nil error will be returned . The type code will be written first . If the absolute value is < math . MaxUint8 only 1 byte will be written . If the absolute value is < math . MaxUint16 only 2 bytes will be written . Otherwise the entire 32 - bit value will be written .
8067	PutUint64 sets a 64 - bit unsigned integer for the given field name . The field name must be a Uint64Field . Otherwise an error will be returned . If the type buffer no longer has enough space to write the value an xbinary . ErrOutOfRange error will be returned . Upon success the number of bytes written as well as a nil error will be returned . The type code will be written first . If the absolute value is < math . MaxUint8 only 1 byte will be written . If the absolute value is < math . MaxUint16 only 2 bytes will be written . If the absolute value is < math . MaxUint32 only 4 bytes will be written . Otherwise the entire 64 - bit value will be written .
8068	PutInt64 sets a 64 - bit signed integer for the given field name . The field name must be a Int64Field . Otherwise an error will be returned . If the type buffer no longer has enough space to write the value an xbinary . ErrOutOfRange error will be returned . Upon success the number of bytes written as well as a nil error will be returned . The type code will be written first . If the absolute value is < math . MaxUint8 only 1 byte will be written . If the absolute value is < math . MaxUint16 only 2 bytes will be written . If the absolute value is < math . MaxUint32 only 4 bytes will be written . Otherwise the entire 64 - bit value will be written .
8069	NewPackageList creates a new package registry
8070	PutFloat32 writes a 32 - bit float for the given string field . The field type must be Float32Field otherwise an error is returned . The type code is written first then the value . Upon success the number of bytes written is returned along with a nil error .
8071	Classic creates a classic Martini with some basic default middleware - martini . Logger martini . Recovery and martini . Static . Classic also maps martini . Routes as a service .
8072	Languages provides the handler with supported languages .
8073	Session will be used to set the current language .
8074	Data returns the language data stored in the request .
8075	URL prefixes a url string with the request language .
8076	Returns the terminal size
8077	GetRequestIDFromTaskResponse - a function to get a request id from a taskresponse object
8078	PutString writes a string value for the given field . The field type must be a StringField otherwise an error will be returned . The type code is written first then a length and finally the value . If the size of the string is < math . MaxUint8 a single byte will represent the length . If the size of the string is < math . MaxUint16 a uint16 value will represent the length and so on . If the buffer does not have enough space for the entire string and field header an error will be returned . If successful the number of bytes written will be returned as well as a nil error .
8079	LoadDirectory reads all the schema files from a directory .
8080	LoadFile reads a schema document from a file .
8081	LoadPackage parses a text string .
8082	NewDecoder creates a new Decoder using a type Registry and an io . Reader .
8083	NewDecoderSize creates a new Decoder using a type Registry a max size and an io . Reader .
8084	Panic returns a handler that invokes the passed handler h catching any panics . If one occurs an HTTP 500 response is produced . By default all messages are printed out to os . Stderr .
8085	DeployVApp - fake out calling deploy vapp
8086	UnDeployVApp - executes a fake undeploy on a fake client
8087	Auth - fake out making an auth call
8088	QueryTemplate - fake querying for a template
8089	NewEncoder creates a new encoder with the given io . Writer
8090	Getter allows the user to set the method by which a nonce is retrieved from the incoming request .
8091	Setter allows the user to set the method by which a nonce is stored in the outgoing response .
8092	Age sets the maximum time duration a nonce can be valid
8093	Nonce returns a handler that will check each request for the existence of a nonce . If a nonce exists it will be checked for expiration . A status will be recorded in the request s context indicating whether there was a nonce in the request and if so whether it is valid or expired . The recorded status can later be obtained using the NonceValueFromRequest function . A nonce can be set for later checking using the StoreNonce function .
8094	NonceValueFromRequest validates a nonce in the given request and returns the validation status .
8095	StoreNonce generates and stores a nonce in the outgoing response .
8096	PutFloat32Array writes a float array for the given field . The field type must be a Float32ArrayField otherwise as error will be returned . The type code is written first followed by the array size in bytes . If the size of the array is less than math . MaxUint8 a byte will be used to represent the length . If the size of the array is less than math . MaxUint16 a 16 - bit unsigned integer will be used to represent the length and so on . If the buffer is too small to store the entire array an xbinary . ErrOutOfRange error will be returned . If the write is successful the total number of bytes will be returned as well as a nil error .
8097	PutFloat64Array writes a float array for the given field . The field type must be a Float64ArrayField otherwise as error will be returned . The type code is written first followed by the array size in bytes . If the size of the array is less than math . MaxUint8 a byte will be used to represent the length . If the size of the array is less than math . MaxUint16 a 16 - bit unsigned integer will be used to represent the length and so on . If the buffer is too small to store the entire array an xbinary . ErrOutOfRange error will be returned . If the write is successful the total number of bytes will be returned as well as a nil error .
8098	Do - fake do method
8099	NewLease - create and return a new lease object
8100	Delete - handle a delete lease call
8101	Post - handle a post lease call
8102	ReStock - this will reclaim resources for a given lease
8103	Procurement - method to issue a procurement request for the given lease item .
8104	InitFromHTTPRequest - initialize a lease from the http request object body
8105	Is determines if a tuple is a certain type .
8106	Offset returns the byte offset for the given field
8107	WriteTo sends the binary representation of the Tuple to the given io . Writer .
8108	PutTuple writes a tuple into the given field . The field type must be a TupleField otherwise an error will be returned . The type code is written first then the length then the value . If the tuple length is less than math . MaxUint8 a single byte is used to represent the length . If the tuple length is less than math . MaxUint16 an unsigned 16 - bit integer is used to represent the length and so on as the length increases . If the buffer is not large enough to store the entire tuple an xbinary . ErrOutOfRange error is returned . If the write is successful the number of bytes written is returned as well as a nil error .
8109	WriteString writes string data into the response object .
8110	NotFound writes a 404 HTTP response
8111	Run - this begins the running of an agent s async process
8112	NewWaitGroup instantiates a new WaitGroup with the given throttle .
8113	Add will block until the number of goroutines being throttled has fallen below the throttle .
8114	Wait until all of the throttled goroutines have signaled they are done .
8115	Gzip returns a handler that will use gzip compression on the response body of handler h . Compression will only be applied if the request contains an Accept - Encoding header that contains gzip . By default no messages are printed out .
8116	New - create a new api client
8117	Error writes the given HTTP status to the current ResponseWriter
8118	Renderer is a Middleware that maps a render . Render service into the Martini handler chain . An single variadic render . RenderOptions struct can be optionally provided to configure HTML rendering . The default directory for templates is templates and the default file extension is . tmpl . If MARTINI_ENV is set to or development then templates will be recompiled on every request . For more performance set the MARTINI_ENV environment variable to production
8119	NewClient - constructor for a new dispenser client
8120	GetTask - wrapper to rest call to GET task from dispenser
8121	WriteImageToHTTP Sends an image via http .
