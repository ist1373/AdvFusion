0	NewSTM creates a new STM .
1	first returns the first revision of the read set .
2	cmps returns a list of all the keys in the write set .
3	NewSTMRepeatable creates a new STM .
4	NewSTMerializable creates a new STM .
5	NewSTMReadCommitted returns a new STM .
6	NewCertPool creates a new certificate pool .
7	NewCert returns a new TLS certificate
8	Pause pauses the peer .
9	Resume resumes the peer .
10	pick picks the next message from the peer .
11	post sends a request to the snapshot .
12	newTxnResp creates a new transaction response .
13	applyCompare returns true if the given key is equal to the given value .
14	OpCompact creates a new CompactOp .
15	NewPriorityQueue creates a new PriorityQueue
16	Enqueue enqueue a value
17	NewLeaderStats returns a new LeaderStats instance
18	Succ is the same as Succ
19	Fail attempts to fail if the follower has failed .
20	delete removes a watch .
21	startStreamWriter starts a stream writer .
22	checkStreamSupport checks if the given version is supported .
23	maybeUpdate returns true if the given number is updated .
24	IsPauses returns true if the progress is paused .
25	needSnapshotAbort returns true if the progress is a snapshot .
26	add adds an inflight to the buffer .
27	growBuf grows the buffer .
28	freeTo removes the buffer from the buffer .
29	SaveDBFrom saves the given io . Reader to disk .
30	DBFilePath returns the file path for the given id .
31	Set sets the unique Strings value .
32	NewUniqueStringsValue creates a new UniqueStringsValue .
33	UniqueStringsFromFlag returns a slice of unique strings .
34	UniqueStringsMapFromFlag returns unique StringsMap from FlagSet
35	Percentiles returns a slice of percentiles .
36	VerifyBootstrap verifies that the cluster is valid .
37	VerifyJoinExisting checks if the cluster exists .
38	hasLocalMember checks if the server has local peer .
39	advertiseMatches returns an error if the cluster has been matched .
40	ReqTimeout returns the request timeout .
41	getStatus returns the status of the raft .
42	GetDefaultHost returns the default host
43	getIfaceAddr returns the netlink address for the given interface .
44	getIfaceLink returns an interface with the given idx .
45	lsCommandFunc executes the ls command .
46	printLs prints a list of nodes
47	rPrint prints a list of nodes .
48	NewLeaseRenewerCommand returns a new cobra command
49	Read reads a snapshot .
50	GetCipherSuite returns the cipher suite for the given string .
51	post sends data to the pipeline
52	send sends a message to the raft .
53	sendHeartbeat sends a heartbeat to the raft log .
54	broadcastAppend sends a broadcast to the raft .
55	broadcastHeartbeat implements the raft interface .
56	tickEval is part of raft
57	tickHeartbeat is part of raft .
58	stepCandidate is part of raft
59	restore restores the state of the snapshot .
60	promptable returns true if there is a leader .
61	checkQuorumActive checks if the leader is active .
62	IncreaseUncommittedSize increases the size of the uncommitted size .
63	reduceUncommittedSize reduces the uncommitted size of the transaction .
64	newPeriodic creates a new Periodic .
65	Pause pauses the timer .
66	Resume resets the periodic state .
67	Lock locks the lock .
68	NewLocker creates a new locker .
69	NewFIFoscheduler returns a new scheduler
70	Schedule schedules a job .
71	Stop stops the queue .
72	NewServer creates a new server .
73	StartServe starts the server .
74	Stop stops the server .
75	Transport implements the Transport interface .
76	RegisterInterruptHandler registers an InterruptHandler .
77	HandleInterrupts handles all the interrupt handlers .
78	OpGet returns an op .
79	OpDelete implements the Delete interface .
80	OpPut creates a new op .
81	OpTxn creates a new opn .
82	WithFromKey adds the key to the op .
83	withTop returns a slice with the top level .
84	Exists checks if the directory exists .
85	searchIndex returns the index of the given name .
86	isValidSeq checks if the given names are valid .
87	NewListener creates a new listener for the given address .
88	CAfiles returns a slice of TLS certificates .
89	ServerConfig returns the TLS configuration .
90	ClientConfig returns the client s client configuration .
91	newTLSKeepaliveListener creates a new TLS connection .
92	applyV2Request implements the EtcdServer interface .
93	NewRoleCommand returns a new cobra command
94	roleAddCommandFunc executes the role add command
95	roleGetCommandFunc executes the role get command
96	Role grant permission command
97	roleRevokePermissionCommandFunc is used to handle role revoke permission .
98	NewCluster creates a new cluster .
99	NewClusterByConfig returns a new cluster with the given configuration .
100	HTTPMembers returns all the members of the cluster .
101	waitLeader is used to wait for the leader to wait for a member of the cluster .
102	waitNoLeader is used to wait for the leader to stop .
103	isMembersEqual returns true if all members are equal
104	Listen for grpc .
105	NewClientV3 creates a new client v3 client .
106	Clone returns a copy of the member
107	Close closes the member .
108	Stop stops the member .
109	check leader transition
110	Restart restart the member
111	Terminate terminates the member
112	Metric returns the metric name for the member
113	InjectPartition is part of the member
114	RecoverPartition is part of the member .
115	NewClusterV3 creates a new cluster
116	ParseWithDefaults parses the JWT options .
117	Parse parses the JWT options .
118	Key returns the key .
119	fill fills the response header .
120	add adds a new watch to the broadcast broadcast .
121	Watch implements the Watch interface .
122	newFileEncoder creates a new encoder .
123	purgeFile is used to purge a file
124	Set sets the string value .
125	NewStringsValue returns a new StringsValue .
126	StringsFromFlag returns a slice of strings from a flagSet .
127	Cluster returns the cluster name
128	NewPageWriter returns a new PageWriter .
129	Watch implements the Watch interface .
130	notify notify watcher
131	clone returns a new watcherHub
132	isHidden returns true if the path is hidden .
133	createEtcdLogFile creates a log file .
134	runEtcd starts the Etcd server
135	stopEtcd sends a signal to the server
136	handleSigQUIT_EVIT_ANDGIT is used to stop the server .
137	LimitListener creates a new net . ListenListener .
138	allowMethod checks if a method is allowed to be allowed .
139	NewWatchServer creates a new watch server .
140	FiltersFromRequest creates a list of filters from a watch request .
141	newPipelineHandler creates a new http handler .
142	checkClusterCompatibilityFromHeader checks if the given header is valid .
143	KeyExists returns true if key exists .
144	KeyMissing returns a comparison between the given key .
145	ValidateSecureEndpoints validates the given list of endpoints .
146	putNewKV creates a new key with the given key .
147	newUniqueEphemeralKey creates a new ephemeral key .
148	NewUpdateDirCommand returns a new cli command .
149	updatedDirCommandFunc is used to set the key for the given key .
150	handleBackup runs a backup .
151	saveDB saves a database to dest .
152	NewWatchCommand returns a new cobra command .
153	NewV3 returns a new Manager
154	Save saves the snapshot to disk .
155	Status returns the status of the database
156	Restore restores the configuration from the cluster .
157	NewAuthStore creates a new auth store .
158	NewTokenProvider returns a new token provider
159	ResumePeer removes a peer from the transport .
160	removePeer removes a peer .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault is used to resolve TCPAddr .
163	resolveTCPAddrs attempts to resolve TCP addresses from a list of URLs .
164	urlsEqual returns true if two URLs are equal .
165	URLStringsEqual compares two strings .
166	NewLeaseCommand returns a new cobra command .
167	NewLeaseGrantCommand returns a new cobra command .
168	 lease grant command
169	NewLeaseRevokeCommand returns a new cobra command .
170	leaseRevokeCommandFunc is used to revoke a lease
171	NewLeaseTimeToLiveCommand returns a new cobra command .
172	leaseTimeToLiveLiveCommandFunc is used to handle a lease command .
173	NewLeaseListCommand returns a new cobra command
174	LeaseListCommandFunc returns the lease list of leases
175	NewLeaseKeepAliveCommand returns a new cobra command .
176	LeaseKeepAliveCommandFunc is used to handle the lease .
177	NewAlarmCommand returns a new cobra command .
178	armDisarmDisarmCommandFunc is used to display an alarm
179	alarmListCommandFunc is used to display alarms .
180	Flags returns a list of flag names .
181	EmbedConfig returns an embedd config .
182	PProfHandlers returns a map of pprof handlers .
183	NewBackendQuota returns a new instance of the backend
184	NewClusterProxy creates a new ClusterProxy
185	NewHandler creates a new http handler .
186	TimeToLiveLiveHTTP sends a request to the server .
187	newWatcherBatch creates a new watcher .
188	add adds a new watcher to the group .
189	contains returns true if the key is within the given key .
190	delete deletes a watcher .
191	select returns a new watcherGroup with the given number of changes .
192	WatcherSetByKey returns a set of watchers for a given key .
193	Compare compares two intervals .
194	 successor .
195	updateMax updates the maximum max value .
196	Visit implements the IntervalNode interface .
197	Delete deletes an interval .
198	Insert inserts an interval into the tree .
199	rotateLeft rotates the given interval .
200	replaceParent replaces the parent node .
201	MaxHeight returns the maximum height of the interval tree .
202	Visit implements the IntervalTree interface .
203	find finds an interval in the tree .
204	Find implements the IntervalTree interface .
205	Intersects returns true if the interval contains the given interval .
206	Contains returns true if the interval contains the given interval .
207	Visit returns a slice of intervals .
208	Union implements the IntervalTree interface .
209	NewExactReadCloser returns a new io . ReadCloser .
210	NewElection returns a new Election instance
211	ResumeElection returns a new election .
212	Proclaim is part of the election .
213	Resign the leader to the leader .
214	Leader returns the leader of the election .
215	Observe returns a channel for the election .
216	check checks if the quota is available .
217	NewExecWatchCommand returns a new cli command .
218	execWatchCommandFunc executes a watch command .
219	NewListener creates a new listener for the given URL .
220	NewRoundTripper returns a new http . RoundTripper
221	createPostRequest creates a new http request
222	checkPostResponse checks if the given body is valid .
223	serverVersion returns the server version
224	checkVersionCompatibility verifies the version of the server .
225	setPeerURLsHeader sets the peerURLs header for the request .
226	addRemoteFromRequest adds a remote remote to the transport .
227	NewKeysAPIWithPrefix returns a new KeysAPI instance
228	TTLDuration returns the duration of the node .
229	SetPflagsFromEnv sets the flags from the given flags .
230	FlagToEnv converts a flag to a string .
231	excerpt returns the excerpt of the given string .
232	passConfChange returns true if the entry is a valid entry .
233	printInternalRaftRequest prints an internal raft request .
234	listEntriesType lists all entries in the list of entries
235	newLog creates a new raft log
236	newLogWithSize creates a new raft log .
237	findConflict returns the index of conflicts in the raft log .
238	nextEnts returns the next entry in the raft log .
239	allEntries returns all entries in the raft log .
240	slice returns a slice of entries in the raft log .
241	NewSession creates a new session .
242	Close closes the session .
243	WithTTL adds ttl to the session
244	WithLease adds a lease to the session .
245	addRequest adds a request to the queue .
246	recvAck is called when a message is received .
247	Advances the next read index .
248	lastPendingRequestCtx returns the last pending request context
249	Start starts the Etcd server .
250	start starts the EtcdServer .
251	Process processes a raft message .
252	ReportSnapshot implements the EtcdServer interface .
253	MoveLeader moves a leader to a leader
254	TransferLeadership transfers the leader to the leader .
255	configure implements the EtcdService interface .
256	sync implements the EtcdServer interface .
257	publish is used to publish a node to the server
258	applyEntryNormal implements the EtcdServer interface .
259	applyConfChange implements the EtcdServer interface .
260	monitorVersions is used to monitor cluster versions .
261	goAttach implements the EtcdServer interface .
262	NewRoundrobinBalanced creates a new roundrobin .
263	Pick selects a subConn with the given options .
264	NewTLSListener creates a new TLS listener .
265	acceptLoop is used to accept TLS connections .
266	SetEndpoints sets the endpoints for the endpoints .
267	Target returns the target endpoint for the given endpoint .
268	Target returns the target URL for the given endpoint .
269	Build builds a Resolver .
270	Handle handles the request .
271	NewElectionCommand returns a new cobra command
272	nodeToMember converts a node to a member .
273	NewTmpBackend creates a new backend .
274	newRevision creates a new revision .
275	Run starts a new revision .
276	Pause pauses the revision .
277	Resume resumes the revision .
278	VoteRespType returns the vote for the given message type .
279	DescribeMessage returns a string representation of a message .
280	DescribeEntry returns a string representation of the entry .
281	DescribeEntries returns a string representation of the entries .
282	SetLogger sets logger
283	GetLogger returns the logger .
284	maybeFirstIndex returns the first index of the last index .
285	maybeLastIndex returns the last index .
286	maybeTerm returns the term for the given index .
287	adjustEntriesArray shrink the list of entries .
288	SaveSnapshot saves a snapshot to the storage .
289	New returns a new client
290	NewCtxClient creates a new client .
291	NewFromURL returns a new Client instance
292	Close closes the client .
293	Endpoints returns the list of Endpoints for the client .
294	SetEndpoints sets the Endpoints for the client .
295	Sync implements the Client interface .
296	dialSetupOpts initializes the grpc connection options .
297	Dial connects to a remote endpoint
298	dialWithBalancer dials the given endpoint with the given endpoint .
299	dial creates a grpc client .
300	WithRequireLeader returns a new context with the given context .
301	roundRobinQuorumBackoff returns a backoff function that returns the backoff function .
302	isHaltErr returns true if the given error occurred .
303	NewLease creates a new Lease .
304	IsCreate returns true if the event was created .
305	Err implements the WatchResponse interface .
306	IsProgressNotify returns true if the watch is progress .
307	RequestProgress implements the watcher interface .
308	nextResume returns the next watch .
309	dispatchEvent is used to dispatch an event .
310	broadcastResponse sends a response to the watch .
311	unicastResponse implements the WatchGrpcStream interface .
312	joinSubstreams is used to join substreams .
313	toPB creates a new watch request .
314	toPB converts the progress request to a Pb .
315	Contains returns true if the given value exists .
316	ContainsAll returns true if all values are contained in the set .
317	Equals returns true if two sets are equal .
318	Values returns the values in the set .
319	Copy returns a copy of this set .
320	Sub returns a copy of this set .
321	v2MembersURL returns the URL for v2 members .
322	NewMigrateCommand returns a new cobra command
323	publishEntries publishes entries to the raft node .
324	openWAL opens a new wal .
325	replayWAL creates a new wal .
326	stop stops the raft node .
327	NewWatchCommand returns a new cobra command .
328	InitialState returns the initial state of the storage .
329	SetHardState sets the hard state of the storage .
330	Entries returns all the entries in the store .
331	Term returns the term at the given index .
332	LastIndex returns the last index .
333	FirstIndex returns the first index of the first index .
334	Snapshot returns the snapshot .
335	ApplySnapshot updates the snapshot .
336	Compact removes the index from the store .
337	unreach removes a url from the list of URLs .
338	NewEndpointCommand returns a new command .
339	Ep health command .
340	NewElectCommand returns a new cobra command
341	NewDefragCommand returns a new command .
342	RegisterBuilder registers a builder .
343	Build builds a balancer .
344	recordTransition returns the state of the given state .
345	doSerialize implements the EtcdServer interface .
346	send sends an event to the watch
347	post sends a watcher to the watch
348	OriginAll checks if the given origin is allowed
349	IsHostWhitelist checks if host is whitelisted .
350	Valids returns the list of valid values .
351	NewSelectiveStringsValue returns a new SelectiveStringsValue .
352	NewKV creates a new kv3 client .
353	NewURLsValue returns a new URL value .
354	URLFromFlag returns a slice of URLs from a flag set .
355	servePeers implements the Etcd interface .
356	NewStore creates a new store .
357	appendMarkTombstone appends a marker to a byte slice .
358	IsDirWriteable checks if a directory is writeable
359	TouchDirAll mocks base method
360	CreateDirAll mocks base method
361	ZeroToEnd implements the io . File interface .
362	Open opens a file .
363	NewRaftLoggerFromZapCore creates a new RaftLogger .
364	NewConfig returns a new client configuration .
365	RegisterElectionHandler registers the RPC handler for the RPC server .
366	UpdateCapability updates the capabilities for the given version .
367	NewLockCommand returns a new cobra command .
368	tick is used to tick the raft node .
369	advanceTicks advances the number of ticks in the raft node .
370	NewAuthCommand returns a new cobra command
371	authEnableCommandFunc runs the auth command .
372	authDisableCommandFunc executes the auth command .
373	RetryKVClient returns a new KVClient .
374	RetryLeaseClient creates a new LeaseClient .
375	RetryClusterClient returns a retry client .
376	RetryMaintenanceClient returns a new MaintenanceClient
377	RetryAuthClient returns a new auth client .
378	NewSetDirCommand returns a new cli command .
379	Enter enters the barrier .
380	Leave is used to leave the barrier
381	HandleBasic implements the http . Handler interface .
382	WriteError writes an error to w .
383	MemberByName implements the RaftCluster interface .
384	PeerURLs returns all the peers in the cluster .
385	ValidateConfigurationChange implements the RaftCluster interface .
386	AddMember adds a new member to the cluster .
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs validates a RaftCluster .
389	Keep returns a map with the given revision .
390	closeRequireLeader closes the leader .
391	resetRecv is used to reset the lease .
392	recvKeepAlive is used to receive a lease .
393	deadlineLoop runs the deadline loop .
394	sendKeepAliveLoop is used to send a lease to the server .
395	NewKV creates a new KV .
396	Delete deletes a lease .
397	LeaseValue returns a new LeaseValue
398	ValueBytes returns the value of the comparison .
399	WithRange sets the range end of the query .
400	WithPrefix adds the prefix to the query .
401	MustInt64 returns the int64 as int64 .
402	mustInt64IDOrLeaseID returns the value of a LeaseID .
403	Next returns the next NRPC watch .
404	getJournalWriteSyncer returns a write syncer .
405	newKV creates a new node .
406	newDir creates a new node .
407	Read returns the value of the node .
408	Write writes the value to the node .
409	List returns the list of child nodes .
410	GetChild returns the child of the node .
411	Add adds a child node to the tree .
412	Remove removes a node from the tree .
413	Compare returns true if the node is equal .
414	Clone returns a copy of this node .
415	isConnectedToQuorumSince returns true if we are connected to the given peer .
416	isConnectedSince returns true if the remote server has been connected .
417	numConnectedSince returns the number of connections that have been connected .
418	maxConnected returns the longest connection to the given membs .
419	isTornEntry checks if the data is a TensorEntry .
420	StartMockServersOnNetwork returns a mock instance
421	StartAt mocks base method
422	StopAt stops the server .
423	Stop stops the server .
424	NewCheckCommand returns a new cobra command
425	NewCheckPerfCommand returns a new cobra command .
426	NewCheckDatasaleCommand returns a new cobra command .
427	NewGetCommand returns a new command
428	NewGetCommand returns a new cli command .
429	PickPeerURL returns a random peer URL
430	HandleMetricsHealth registers metrics for metrics
431	NewRemoveCommand returns a new cli command .
432	rmCommandFunc runs a rm command .
433	checkIntervals takes a list of intervals and returns a map of Intervals .
434	ReportEventReceived reports the number of events received .
435	RegisterKVHandler registers the kv handler for kvserver .
436	RegisterWatchHandler registers a watch handler for the given client .
437	RegisterLeaseHandler registers the lease handler for the given client .
438	RegisterClusterHandler registers a grpc cluster handler
439	RegisterMaintenanceHandler registers a new grpc client .
440	RegisterAuthHandler registers the auth handler for auth .
441	startEtcd starts etcd .
442	identifyDataDirOrDie returns the directory of the given directory .
443	openLast opens the last log file
444	gotLeader returns the leader of the leader
445	lostNotify returns the leader of the leader .
446	newGRPCProxyCommand returns a new cobra proxy command
447	NewMemberCommand returns a new cobra command
448	NewMemberAddCommand returns a new cobra command
449	NewMemberRemoveCommand returns a new cobra command
450	NewMemberUpdateCommand returns a new cobra command
451	NewMemberListCommand returns a new cobra command .
452	MemberAddCommandFunc is used to add a member to the cluster .
453	MemberRemove command .
454	MemberUpdateCommandFunc is used to update a member of a member
455	memberListCommandFunc returns the member list of members
456	Open opens a new wal .
457	OpenForRead creates a new WAL .
458	Verify verifies that the wal is valid .
459	Close closes the WAL .
460	notify implements the watcher interface .
461	Remove removes all events from the hub .
462	mkPathDepth creates a path for the given node path .
463	mk2V2Node creates a new nodeExtern .
464	prevKeyFromPuts returns the prev key value from the response .
465	NewWeightedReport creates a new weighted report .
466	NewURLsMapFromStringMap creates a new URLsMap from a string .
467	String returns a string representation of the URLs map .
468	URL returns a sorted list of URLs
469	parse parses a string into a map
470	NewClientHandler creates a new http . Handler for the client .
471	writeKeyEvent writes a key event to w .
472	writeKeyError writes the error message to w .
473	getUint64 gets a uint64 value from the form
474	getBool gets a boolean value from the form
475	waitDeletes attempts to wait for a delete operation .
476	AddOutputPaths adds the output paths to the given configuration .
477	NewConfig returns a new Config instance
478	PeerURLAndTokenAndToken returns a list of URL URLs for the given cluster .
479	GetDNSClusterNames returns a list of cluster names .
480	checkBindURLs checks for bindURLs
481	GetCluster returns a list of cluster nodes
482	GetClient returns a new SRV client
483	GetSRVService returns the SRV service name
484	ReadDir reads a directory from the given directory .
485	compact compiles a v3 version
486	defragment is part of the client
487	NewUserCommand returns a new command .
488	userAddCommandFunc runs the user add command .
489	userGetCommandFunc executes the user get command
490	userChangePasswordCommandFunc returns the user change password
491	addEvent adds an event to the queue .
492	scan scans the given key to the given index .
493	clone clones the event history .
494	Open a snapshot backend
495	openBackend opens a new backend .
496	recoverSnapshotBackend returns the backend backend .
497	NewUpdateCommand returns a new cli command .
498	updateCommandFunc is used to update a key
499	FrontAndBack returns the first item in the queue .
500	Insert adds a request to the queue .
501	Rate returns the rate of the queue .
502	Clear clears the stats queue .
503	UniqueStrings returns a slice of random strings .
504	RandomStrings returns a slice of random strings .
505	IsKeyNotFound returns true if the error is not found .
506	IsRoleNotFound returns true if the error is not found .
507	IsUserNotFound returns true if an error is not found .
508	JoinCluster joins a cluster
509	GetCluster returns the cluster
510	newProxyFunc returns a new http . ProxyFunc
511	isSafeRetry returns true if the given error is safe .
512	withRetryPolicy sets the retry policy
513	withAuthRetry returns a retry option that sets the retry auth .
514	withMax sets the maximum number of retries
515	withBackoff sets the backoff function
516	RecvAppendReq adds a new request to the server .
517	SendAppendReq sends a request to the server .
518	merge merges two buckets .
519	deleteRevKey deletes a key from the given key .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers returns a RaftCluster from remote peers .
522	getClusterFromRemotePeers returns a RaftCluster from remote peers .
523	getRemotePeerURLs returns the list of remote peer URLs in the cluster .
524	getVersions returns the versions of the cluster
525	decideClusterVersion returns the version of the cluster .
526	getVersion retrieves the version of a member
527	NewTimeoutDetector returns a new TimeoutDetector .
528	Reset resets the timer .
529	Observe returns true if the timer has been observed .
530	NewPeerHandler creates a new http . Handler
531	put implements the KeyIndex interface .
532	tombstone adds a tombstone to the index .
533	get returns the revision for the given revision .
534	since we need to get the revision of the given revision
535	keep removes the keys from the cache .
536	findGeneration finds the generation for the given rev .
537	cancelWatcher cancels a watcher
538	syncWatchersLoop runs the sync watcher loop .
539	syncVictimsLoop runs the sync loop .
540	moveVictim moves all victims from the store .
541	kvsToEvents converts vals to a list of events .
542	notify implements the WatchableStore interface .
543	isOpFuncCalled returns true if the operation is a function call .
544	UnsafePut implements the Put interface .
545	UnsafeSeqPut adds a value to the batch .
546	UnsafeRange returns a slice of bytes in the batch .
547	UnsafeDelete deletes a key .
548	UnsafeForEach iterates over all keys in the batch .
549	Commit commits the transaction .
550	CommitAnd stop the transaction .
551	Renews a lease .
552	Attach attaches a lease to the list .
553	revokeExpiredLeases attempts to revoke expired leases .
554	checkScheduledLeasedLeases checks if the lease has been scheduled .
555	expireExists checks if the lease has expired .
556	findExpiredLeases returns a slice of Leases that are expired .
557	refresh refreshes the expired lease .
558	 forever .
559	Keys returns the list of keys .
560	Remaining returns the remaining time of the lease .
561	NewCompactionCommand returns a new cobra command
562	compactionCommandFunc runs the compaction command .
563	NewPutCommand returns a new command .
564	putCommandFunc is part of the command
565	NewHandler creates a new http . Handler
566	NewReadonlyHandler returns a new http . Handler for readonly .
567	NewSetCommand returns a new cli command .
568	setCommandFunc is used to set the value of a key .
569	waitOnLastRev returns true if the key has been updated .
570	GetDefaultInterfaces returns the default interfaces .
571	NewSnapshotCommand returns a new cobra command
572	NewMoveLeaderCommand returns a new cobra command
573	transferLeadershipCommandFunc is used to transfer the leader to the leader .
574	OpenDir opens a file .
575	NewRemoveDirCommand returns a new cli command .
576	rmdirCommandFunc is used to delete a directory
577	NewDelCommand returns a new cobra command .
578	delCommandFunc executes the delete command .
579	NewExpect creates a new Expect process .
580	NewExpectWithEnv creates a new ExpectProcess with the given args .
581	ExpectFunc returns the expected line of the line .
582	Expect returns a string containing the given string .
583	LineCount returns the number of lines .
584	Signal sends a signal to the process .
585	keyFunc returns a string representation of a RangeRequest .
586	Add adds a range to the cache .
587	Get implements the Cache interface .
588	Invalidate implements the Cache interface .
589	Compact implements the cache .
590	NewUniqueURLsWithExceptions creates a new UniqueURLs with the given exceptions .
591	UniqueURLsFromFlag returns a list of unique URLs from a FlagSet
592	UniqueURLsMapFromFlag returns a map of unique URLs from a FlagSet
593	Hold holds the barrier .
594	Release releases the barrier .
595	Wait waits for the barrier .
596	NewLockRacerCommand returns a new cobra command .
597	 ElectionTimeout returns the timeout for the election .
598	DialEtcdGRPCServer dials a grpc server
599	CreateEtcdClientConfig creates a new instance of the EtcdClient
600	CreateEtcdClient creates a new client .
601	CheckCompact checks if the given revision is compact .
602	Defrag implements the EtcdClient interface .
603	RevHash returns the revision of the member
604	Rev returns the revision of the member
605	Commact commits the given revision to the given revision .
606	IsLeader returns true if the member is leader .
607	WriteHealthKey writes the health key to the member
608	SaveSnapshot saves the snapshot to the snapshot .
609	RestoreSnapshot is used to restore a snapshot
610	NewWatcher creates a new watcher .
611	NewRawNode creates a new raft node .
612	Campaign is part of the raft node .
613	Propose writes data to the raft node .
614	ProposeConfChange updates the given ConfChange .
615	ApplyConfChange applies the given ConfChange .
616	Step implements the Node interface .
617	Ready returns a ready state .
618	WithProgress adds a visitor to the raft node .
619	ReportUnreachable reports whether the node is unreachable .
620	ReportSnapshot reports the status of a snapshot .
621	TransferLeader is part of the raft node .
622	ReadIndex is part of the raft node .
623	printcURL prints cURL to cURL
624	StartNode starts a new node
625	RestartNode returns a new node .
626	tick is called when the node is running .
627	MustSync returns true if the given state is synced .
628	NewGRPC17Health returns a new GRPC17Health .
629	NeedUpdate returns true if the peer has been updated .
630	dflSignal sends a signal to the terminal .
631	New returns a new Store .
632	Index returns the current index of the store .
633	Get implements the Store interface .
634	Create creates a new event
635	Set implements the Store interface .
636	getCompareFailCause returns the compare cause of the given node .
637	Delete deletes a node
638	walk walks the path and returns the root node .
639	Internal function to get a node .
640	DeleteExpiredKeys removes expired keys from the store .
641	checkDir checks if a directory exists .
642	Save serializes the store .
643	Recovery attempts to recover the state from the store .
644	Next returns the next unique identifier .
645	NewMakeMirrorCommand returns a new cobra command .
646	NewZapCoreCoreLoggerBuilder creates a new LoggerLogger .
647	NewSyncer creates a syncer .
648	DropPort drops a port
649	SetLatency sets the latency for the interface
650	RemoveLatency removes the latency from the default interfaces .
651	NewTxnCommand returns a new cobra command
652	txnCommandFunc is used to create a transaction .
653	New returns a new Compactor .
654	printResponseKey prints a response key .
655	RegisterLockHandler registers a new lock handler .
656	grpcHandlerFunc returns a HandlerFunc that wraps http . HandlerFunc .
657	addCORSHeader adds a header to the response
658	Fallback returns a copy of the given list of ops .
659	IDFromString returns a ID from a string .
660	release releases the lock
661	EncodedSize returns the size of the value .
662	Decode deserializes a Value struct .
663	NewMergeIterator returns a new MergeIterator .
664	initialize heap .
665	Valid returns true if the iterator is valid .
666	Key returns the key .
667	Value implements the MergeIterator interface .
668	Next implements the MergeIterator interface .
669	Seek implements the SeekIterator interface .
670	Close closes the MergeIterator .
671	Encode encodes a value to a byte slice .
672	Decode decodes the header .
673	encodeEntry encodes an entry into a buffer .
674	SetEntry implements the WriteBatch interface .
675	Set implements the Write interface .
676	SetWithTTL implements the WriteBatch interface .
677	Delete deletes a key .
678	commit commits the transaction .
679	Flush implements the WriteBatch interface .
680	Error implements the WriteBatch interface .
681	getMemTables returns all the tables in memory .
682	writeRequests writes a list of requests to the server .
683	ensureRoomForWrite is a helper function to ensure that the size of the table is available .
684	writeLevelTable writes the table to f .
685	handleFlushTask handles FlushTask .
686	flushMemtable is used to flush memory .
687	calculate the size of the file
688	Size returns the size of the log .
689	Next returns the next item in the sequence .
690	Release releases the next sequence .
691	KeySplits returns a slice of keys for the given prefix .
692	Flatten flushes all workers in the database .
693	Mmap mmap mmap
694	Madvise returns an error .
695	setDiscardTs sets the discard timestamp .
696	hasConflict returns true if the transaction has a conflict .
697	Set adds a value to the transaction .
698	SetWithMeta adds a meta value to the transaction .
699	Delete deletes a key .
700	Get retrieves an item from the database .
701	CommitWith sends a callback to the transaction .
702	View executes a transaction .
703	Update executes a function on the database .
704	Seek implements the SeekIterator interface .
705	SeekToLast implements the SeekIterator interface .
706	parseKV parses a block iterator .
707	NewIterator returns a new Iterator .
708	seekFrom implements iterator . SeekFrom interface .
709	seekForPrev sets the prev key for the given key .
710	Value implements Iterator .
711	Seek implements Iterator
712	NewConcatIterator returns a new ConcatIterator .
713	Valid returns true if the iterator is valid .
714	Next returns the next iterator .
715	Close closes the iterator .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a slice .
718	KeyWithTs adds a timestamp to the key .
719	ParseTs returns the timestamp for the given key .
720	ParseKey parses a key .
721	SameKey returns true if src is equal to dst .
722	FixedDuration returns a string representation of a fixed duration .
723	NewCloser returns a new Closer .
724	NewThrottle returns a new Throttle
725	Do implements the Throttle interface .
726	Done implements the Throttle interface .
727	Finish implements the Throttle interface .
728	SetDiscardTs sets the Discard timestamp .
729	openReadOnly opens the log file .
730	iterate iterates over the given entry .
731	sortFids returns a sorted slice of file IDs .
732	write writes the request to disk .
733	populateDiscardStats populates the lfard stats .
734	Backup implements the Writer interface .
735	ToList converts a key to a list .
736	produceRanges generates the ranges for the given prefix .
737	produceKV returns a copy of the stream .
738	Runstrate implements the Stream interface .
739	NewStream creates a new stream .
740	NewStreamAt returns a new stream at the given read timestamp .
741	DecrRef removes the ref from the table .
742	ParseFileID parses a file ID .
743	PrintHistogram prints a histogram .
744	newSizeHistogram creates a new size histogram .
745	buildHistogram builds the histogram for the given key prefix .
746	printHistogram prints the histogram .
747	Init initializes Watermark .
748	Begin implements the Watermark interface .
749	BeginMany implements the Watermark interface .
750	Done marks the given index .
751	Done marks all items in the watermark .
752	SetDone sets the DoneUntil field s value .
753	WaitForMark blocks until the given index is reached .
754	Encode encodes the header .
755	Decode decodes the header .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the difference between two keys .
758	Add adds a key to the builder .
759	blockIndex returns the index of the block index .
760	Finish finishes the builder .
761	Errorf logs an error .
762	Infof logs a message .
763	DecrerRef removes the ref from the skipsist .
764	NewSkiplist creates a new Skiplist .
765	Put adds a key to the list .
766	Get returns the value for the given key .
767	Key returns the key .
768	Value returns the value of the iterator .
769	Next returns the next element .
770	Prev sets the next element in the list .
771	Seek implements the Iterator interface .
772	SeekForPrev implements the Iterator interface .
773	NewUniIterator returns a new uni iterator .
774	Next returns the next item .
775	Seek implements the iterator interface .
776	asChanges returns a copy of the manifest .
777	Rewrite the manifest file .
778	validate checks if the table is valid .
779	Acquire a directory lock
780	release releases the lock
781	AssertTruef asserts if a boolean is true .
782	Wrapf wraps an error with debug mode .
783	initTables initializes the tables .
784	deleteTables deletes all tables .
785	tryAddLevel adds a table to the table .
786	getTableForKey returns the table for the given key .
787	get returns the max value for the given key .
788	overrides the overlapping tables in the table .
789	String returns a string representation of the item .
790	KeyCopy returns a copy of the item .
791	ValueSize returns the size of the item .
792	NewKeyIterator returns a new Iterator .
793	Valid returns true if the item is valid .
794	ValidForPrefix returns true if the iterator is valid .
795	Close closes the iterator .
796	parseItem reads the item from the iterator .
797	Seek implements the iterator interface .
798	GetMergeOperator returns a new MergeOperator .
799	Get implements the MergeOperator interface .
800	compareAndAdd implements the CompactStatus interface .
801	newArena returns a new Arena .
802	putNode adds a node to the pool .
803	getNode returns the node at the given offset .
804	getKey returns the key at the given offset .
805	getVal returns the value at the given offset .
806	getNodeOffset returns the offset of a node .
807	init initializes the pool
808	revertToManifest removes the manifest from the manifest .
809	dropTree removes all tables in the table .
810	dropPrefix removes a prefix from the table .
811	isLevelCompactable returns true if the current level is zero .
812	doCompact is used to perform compaction .
813	get returns the value for the given key
814	seekTotal returns the total balance of the transaction .
815	findFirstInvalidTxn returns the first non - nil transaction for the given transaction .
816	Create creates a new snapshot .
817	List returns the snapshot metadata .
818	Open returns a snapshot with the given ID .
819	Write writes data to disk .
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore .
821	NewFileSnapshotStore returns a new FileSnapshotStore
822	snapshotName returns the name of the snapshot .
823	Create creates a new snapshot .
824	List lists all snapshots .
825	getSnapshot returns the snapshot metadata for the given directory .
826	readMeta returns the meta data for the given name .
827	Open implements the FileSnapshotStore interface .
828	ReapSnapshots removes all snapshots .
829	Write writes the buffer to the buffer .
830	Close closes the snapshot .
831	Cancel cancels the snapshot .
832	finalizes the state of the fileSnapshot .
833	writeMeta writes meta data to disk
834	NewNetworkTransportWithConfig creates a new NetworkTransport with the given configuration .
835	setupStreamContext initializes the stream context .
836	getStreamContext returns the stream context .
837	SetHeartbeatHandler sets the heartbeat handler .
838	CloseStreams closes all streams .
839	Close closes the network transport .
840	getPooledConn returns a connection to the given target address .
841	getConnFromAddressProvider retrieves a connection from the given address provider .
842	getConn returns a connection to the given target .
843	returns a connection to the network
844	Listen to the network .
845	handleConn implements the NetworkTransport interface .
846	handleCommand handles the RPC command .
847	decodeResponse decodes a response from a netConn
848	sendRPC sends a RPC request to the network .
849	newNetPipeline creates a new network pipeline .
850	decodeResponses reads all responses from the network .
851	AppendEntries implements NetPipeline interface .
852	Close closes the network .
853	NewObserver creates a new observer
854	RegisterObserver registers a new observer .
855	DeregisterObsister removes an observer from the Raft server .
856	Observe implements the Raft interface .
857	NewInmemStore creates a new InmemStore .
858	FirstIndex returns the first index of the first index .
859	LastIndex returns the last index .
860	GetLog gets a log by index
861	StoreLog stores a log .
862	StoreLogs stores the logs in the log .
863	DeleteRange deletes a range of logs .
864	Set sets the value for key .
865	Get returns the value for the given key .
866	SetUint64 sets the value for a key .
867	GetUint64 returns the uint64 value for the given key .
868	NewLogCache creates a new LogCache .
869	Connect connects to a peer .
870	Disconnect removes a peer from the pool .
871	DisconnectAll disconnects all connected clients .
872	Respond sends a response to the RPC .
873	Open opens a new snapshot .
874	vote decides if the vote is leader .
875	notifyAll is used to notify all peers .
876	cleanNotify removes a notification from the follower
877	LastContact returns the last contact .
878	setLastContact sets the last contact
879	replicate is used to replicate a follower .
880	replicate replicates a follower .
881	appends a pipeline to the server
882	enodeDecode decodes the pipeline from the server .
883	setupAppendEntries initializes appendEntries .
884	setPreviousLog sets the previous log entry .
885	setNewLogs initializes new log entries .
886	appendStats adds logs to the given peer .
887	handleStaleTerm is part of the raft server .
888	AppendEntries is part of the raft server .
889	RequestVote sends a request to the raft server .
890	InstallSnapshot is part of raft .
891	EncodePeer encodes a peer address into a byte slice .
892	DecodePeer decodes a peer address .
893	AppendEntries is part of the pipeline .
894	ReadPeersJSON reads peers from a JSON file .
895	ReadConfigJSONJSON reads a configuration file .
896	NewTCPTransport creates a new TCPTransport .
897	NewTCPTransportWithLogger creates a new TCPTransport with the given bind address .
898	NewTCPTransportWithConfig creates a new TCPTransport with the given bind address .
899	Dial connects to a TCP stream .
900	Accept accepts a TCP stream layer .
901	Addr returns the address of the TCP stream .
902	restoreSnapshot is used to restore the snapshot .
903	BootstrapCluster initializes the cluster with the given configuration .
904	Leader returns the leader of the Raft server .
905	Apply applies a command to the Raft server .
906	 barrier barrier .
907	VerifyLeader implements the Raft interface .
908	AddVoter adds a vote to the Raft server .
909	RemoveServer removes a server .
910	Shutdown implements the Raft interface .
911	Snapshot returns the current user s snapshot .
912	Restore implements the Raft interface .
913	String returns a string representation of Raft .
914	LastContact returns the last contact .
915	Logf implements the Logger interface .
916	containsNode returns true if the node contains a raft node .
917	LeaderPlus returns a list of raft nodes in the cluster .
918	WaitTilUptoDate waits for the current state to be met .
919	assertLogEntryEqual returns true if the log entry is equal .
920	runFSM implements the Raft interface .
921	Clone returns a copy of the configuration .
922	Clone returns a copy of the configuration .
923	hasVote returns true if the server has a vote
924	checkConfiguration checks if the configuration is valid .
925	nextConfiguration returns the next configuration of the given configuration .
926	encodePeers encodes the given configuration .
927	decodePeers decodes the given buffer into a configuration .
928	encodeConfiguration encodes a configuration .
929	decodeConfiguration decodes a configuration .
930	goFunc runs a function in the raft state .
931	getLastIndex returns the last index in the raft state .
932	getLastEntry returns the last entry in the raft state .
933	checkRPCHeader checks if the RPC command is valid .
934	setLeader sets the leader of the Raft server .
935	requestConfigChange implements the Raft interface .
936	run starts the Raft server .
937	runFollower runs the leader loop .
938	liveBootstrap starts a new cluster with the given configuration .
939	run Candidate
940	runLeader is used to run the leader
941	startStopReplication starts a stop operation .
942	ConfigurationChangeChIfStable returns a channel change for the current state .
943	verifyLeader checks if the leader is valid .
944	checkLeaderLease returns the max diff of the leader
945	restoreUserSnapshot creates a new snapshot for the given reader .
946	Append a configuration entry to the server .
947	Dispatch a list of log messages .
948	processLogs processes the given index .
949	processLog processes a log .
950	processRPC processes a RPC request .
951	Process heartbeat .
952	setLastContact sets the last contact
953	persistVote is used to persist a vote .
954	setCurrentTerm sets the current term s current term .
955	setState sets the state of the RaftState .
956	getCommitIndex returns the commit index .
957	calculate updates the commit index for the commitment .
958	randomTimeout returns a channel that returns a channel with the given min value .
959	generateUUID generates a random UUID
960	decodeMsgPack decodes a message from buf .
961	encodeMsgPack encodes a message .
962	backoff returns the backoff for the given limit .
963	newApplySource returns a new ApplySource .
964	reset initializes the random source .
965	DefaultConfig returns the default configuration .
966	ValidateConfig validates the configuration .
967	runSnapshots starts the Raft snapshot .
968	shouldSnapshot returns true if there is a snapshot .
969	takeSnapshot returns a snapshot of the current state .
970	compactLogs removes all logs from the Raft log .
971	WebpackCheck runs the webpack test .
972	New creates a new generator .
973	UnixSocket creates a new Unix socket .
974	Get returns the error handler
975	PanicHandler registers a panic handler .
976	partialFeeder returns the partial feeder for the given name .
977	New returns a new Engine instance
978	WriteTo implements io . Writer
979	Send sends a SMTP message .
980	NewSMTPender returns a SMTPender
981	Param returns the value of a parameter
982	Set adds a value to the context
983	Value returns the value associated with the given key .
984	Redirect redirects the given URL to the given URL .
985	File is part of the request .
986	MarshalJSON implements the DefaultContext interface .
987	New creates a new group .
988	New returns a new App
989	DeprecrationsCheck is a helper function that checks the warnings .
990	List lists all resources .
991	Render implements the Writer interface .
992	Save saves the session .
993	GetOnce gets a value from the session
994	Set sets a value
995	Clear clears the session .
996	getSession returns a new session
997	New creates a new generator .
998	New creates a new generator .
999	New creates a new generator .
1000	NewMessage returns a new Message .
1001	Reset clears the message .
1002	SetHeader adds a header to the message .
1003	SetHeaders mocks base method
1004	SetAddressHeader adds an address header to the message .
1005	FormatAddress formats an address to a string .
1006	SetDateHeader sets the date for the given date .
1007	FormatDate formats a date .
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets the encoding .
1010	SetHeader sets the header of the file .
1011	SetCopyFunc sets the CopyFunc for the file .
1012	AttachReader implements the Message interface .
1013	Attach adds a file to the message .
1014	EmbedReader adds a reader to the message .
1015	Embed adds a file to the message .
1016	ValidateTemplates validates a list of templates .
1017	PlushValidator checks if the file is valid .
1018	Validate validates the options .
1019	LoadPlugins loads plugins .
1020	WriteHeader writes the status code to the response .
1021	Write writes bytes to the response .
1022	Flush flushes the response .
1023	CloseNotify implements the ResponseWriter interface .
1024	Run runs the runtime .
1025	onlyRelevantFiles returns an error if the file is not relevant .
1026	GoTemplateEngine renders a template .
1027	GET adds a GET route to the app .
1028	Redirect returns a new route info
1029	Add routes to the app .
1030	buildRouteName returns the name of a route .
1031	New creates a new group .
1032	NewDialer creates a new Dialer .
1033	Dial connects to the Dialer .
1034	DialAndSend sends a message to the Dialer .
1035	Set sets a value to the flash
1036	Add adds a value to the flash
1037	save persists the flash data
1038	newFlash returns a new Flash object
1039	Get returns the value of a cookie
1040	Set sets a cookie .
1041	SetWithExpirationTime sets a cookie with expiration time .
1042	Delete deletes a cookie
1043	NewMessage returns a new Message
1044	NewFromData creates a new message from data .
1045	New creates a new message .
1046	CloseNotify implements the EventSource interface .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext creates a new logger with the given context .
1049	Register registers a handler .
1050	Start starts the service .
1051	Stop stops the timer .
1052	Performs the given job .
1053	PerformAt attempts to perform a job at the given time .
1054	PerformIn runs the given job in the given time .
1055	String returns a string representation of RouteInfo
1056	Alias adds aliases to the router .
1057	Name sets route name
1058	BuildPathHelper returns the path for the route info
1059	New creates a new generator .
1060	New creates a new generator .
1061	RegisterCustomDecoder registers a custom decoder .
1062	Replace adds a middleware to the stack .
1063	Route returns the route list .
1064	WrapBuffaloHandler wraps a buffering handler .
1065	PackageJSONCheck returns the package JSON .
1066	match matches the given import path
1067	Send sends a message to the sender .
1068	Last returns true if the given name matches the given name .
1069	Stop stops the app .
1070	DepEnsure returns an error if the run is not installed .
1071	String returns a string representation of BuildInfo .
1072	New creates a new generator .
1073	AddBody adds a body to the message .
1074	AddBodies adds body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an embedded attachment to the message .
1077	SetHeader sets a header value .
1078	New creates a genny group .
1079	New creates a new generator .
1080	New creates a new genny package .
1081	Cleanup cleans up all files .
1082	MDTemplateEngine renders the HTML template .
1083	Update updates a ConfigMap .
1084	FilterChanges takes a list of configs and returns a map of configs .
1085	getLabelsFromREMatches extracts labels from a list of matches .
1086	getLabelsFromGenericMatches returns labels from generic matcher .
1087	Start starts a new agent .
1088	Subscribe adds a delta to the agent .
1089	Config returns the current configuration .
1090	Set sets the current config .
1091	IsMember returns true if the user is member of the given organization .
1092	ListIssueComments returns a list of issues .
1093	ListPullRequestComments returns a list of review comments .
1094	ListReviews returns a list of reviews .
1095	ListIssueEvents returns a list of issues for a given issue .
1096	CreateComment creates a new issue comment
1097	Create review .
1098	CreateCommentReaction creates a CommentReaction
1099	CreateIssueReaction creates a new IssueReaction
1100	DeleteComment deletes a comment
1101	DeleteStaleComments deletes a comment .
1102	GetPullRequest returns a pull request .
1103	GetPullRequestChanges returns a list of pull request changes
1104	GetRef returns the reference for the given ref .
1105	DeleteRef deletes a reference
1106	GetSingleCommit returns a single commit
1107	CreateStatus creates a new status
1108	ListStatuses returns a list of status objects for a given ref .
1109	GetCombinedStatus returns the combined status for a given repository .
1110	GetRepoLabels returns the labels for the given repo .
1111	GetIssueLabels returns the labels for a given issue .
1112	AddLabel adds a label to the repository .
1113	RemoveLabel removes a label from the repository .
1114	FindIssues returns a list of issues matching the query
1115	AssignIssue adds an issue to the github .
1116	GetFile returns the contents of a file .
1117	ListTeams returns a list of team names .
1118	ListTeamMembers lists the members of a team .
1119	IsCollaborator returns true if the user is a collaborator .
1120	ListCollaborators lists all collaborators
1121	ClearMilestone deletes a milestone .
1122	SetMilestone sets the milestone s milestone number .
1123	ListMilestones returns a list of milestones
1124	ListPRCommits returns a list of commits for a given repository .
1125	GetRepoProjects returns a list of projects for a given repo .
1126	GetOrgProjects returns a list of projects for a given org .
1127	GetProjectColumns returns the project columns for the given project ID .
1128	CreateProjectCard creates a new project card .
1129	DeleteProjectCard deletes a project card .
1130	MoveProjectCard mocks base method
1131	CreateDatabaseClient creates a new InfluxDB client .
1132	Push adds a point to the influxdb .
1133	NewProwJobWithAnnotation creates a new ProwJob with the given labels and annotations .
1134	NewProwJob creates a new ProwJob .
1135	NewPresubmit creates a new Prow .
1136	PresubmitSpec returns a PubmitJobSpec from the given configuration .
1137	PostsubmitSpec builds a ProwJobSpec from the config
1138	PeriodicSpec returns a ProwJobSpec .
1139	BatchSpec returns a PatchJobSpec for a batch of jobs .
1140	PartitionActive returns the list of pending Prow jobs .
1141	ProwJobFields returns the fields of a ProwJob .
1142	ClusterToCtx returns the context of the given cluster .
1143	AddCommand adds a command to the plugin help .
1144	Get returns a ProwJob .
1145	Watch returns a watch . Interface that watches the server .
1146	Delete takes name and deletes it .
1147	Patch returns the patched ProwJob .
1148	MergeMethod returns the merge method for the given repository .
1149	Query returns a string representation of the query .
1150	ForRepo returns true if the repository matches the given repository .
1151	OrgExceptionsAndReposAndRepos returns a map of all repositories in the list of repositories .
1152	QueryMap returns a new QueryMap .
1153	ForRepo returns a list of queries for a repository .
1154	Validate validates the policy policy .
1155	GetTideContextPolicy returns the decision policy for the given branch .
1156	IsOptional returns true if the given context is optional
1157	MissingRequiredContexts returns a list of missing contexts .
1158	ValidateWebhook validates a webhook request .
1159	HelpProvider implements the Helper interface .
1160	HandleEvent handles a pull request .
1161	HandleAll handles all external repositories .
1162	NewDryRunPryJobClient returns a new PryRunJob
1163	Create creates a ProwJob .
1164	Update updates the ProwJob
1165	UpdateStatus updates the status of a ProwJob .
1166	Delete deletes a pod .
1167	DeleteCollection deletes the collection .
1168	Get returns a ProwJob
1169	List returns a ProwJobList
1170	Watch returns a watch for the dryRun job .
1171	Patch applies a patch to the DryRun job .
1172	hasSynced returns true if the controller has synced .
1173	Run runs the controller .
1174	runWorker runs the worker .
1175	fromKey converts a string to a string
1176	enqueueKey adds a key to the queue .
1177	finalState returns true if the given status is complete .
1178	description returns the description of the condition
1179	 prow job status
1180	prog PipelineMeta returns the metadata for a job .
1181	sourceURL returns the source URL for the project .
1182	makePipelineGitResource creates a pipeline resource .
1183	makePipelineRun creates a pipeline run .
1184	matchConfigs returns a list of configs matching the given branch and label .
1185	SuggestCodeChange returns the suggestion for the given problem .
1186	ServeExternalPluginHelp implements the http . Handler interface .
1187	protect checks if the branch is enabled
1188	UpdateOrg updates the given org
1189	UpdateRepo updates a repository .
1190	UpdateBranch updates a branch .
1191	LoadConfig loads the options from a string .
1192	Run runs the command .
1193	Start starts the agent .
1194	reloadSecret loads a secret from the given path .
1195	GetSecret returns the secret for the given path .
1196	setSecret sets the secret for the agent
1197	GetTokenGenerator returns a generator for the given secret path .
1198	New returns a new History instance
1199	Record records a pull request .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush flushes the history .
1202	AllRecords returns all log records in the history .
1203	MakeCommand returns a cobra command .
1204	Check flags for comments .
1205	ReceiveComment returns a point for a comment .
1206	NewController creates a new Controller .
1207	Run starts the controller .
1208	runWorker runs the worker
1209	New returns a new local Git .
1210	MakeFakeRepo mocks base method
1211	AddCommit adds a file to the local repository .
1212	CheckoutNewBranch updates a new branch .
1213	Checkout implements Git .
1214	RevParse returns the revision of the git repo .
1215	CleanAll removes all regions from the given region .
1216	optionsForRepo returns the options for the given repo
1217	getChangedFiles returns a list of files that have been changed .
1218	loadReviewers loads reviewers for the given files .
1219	NewController creates a new Controller .
1220	SaveLastSync saves the last sync .
1221	Sync is used to sync the latest changes .
1222	AddFlags adds the flags for the event counter
1223	CheckFlags sets the flags for the event counter .
1224	ReceiveIssueEvent returns a point for an issue .
1225	Upload uploads a list of objects to a bucket .
1226	FileUploadWithMetadata creates a new UploadFunc for a file .
1227	DataUploadWithMetadata creates a new UploadFunc with metadata .
1228	HasLabel returns true if the given label matches the given label .
1229	ImageTooBig returns true if image is too large
1230	LevelFromPermissions returns the level of the repository .
1231	PermissionsFromLevel returns the permissions for the given permission .
1232	newProwJobs returns a new ProwJobs
1233	GetApplicable returns a list of Blockers for the given branch .
1234	serve serves a gRPC server .
1235	NewCountPlugin creates a new command .
1236	ReceiveComment implements the Plugin interface .
1237	update metrics
1238	LogStatus logs all resources
1239	SyncConfig synchronizes the storage .
1240	Metric returns a metric for the resource .
1241	FormatURL formats a URL to a URL .
1242	runAndSkipJobs runs all jobs in the given repo .
1243	validateContextOverlap returns an error if the given context has been set .
1244	RunRequested runs a request on a pull request .
1245	skipRequested reports the status of the status of the given pull request .
1246	Match returns true if the label matches the given label .
1247	Match returns true if the label matches the given label .
1248	AddFlags adds flags to the GitHub options .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds a flag set to the flag set .
1250	Validate validates GitHub options .
1251	HubClientWithLogFields returns a GitHub client with the given credentials .
1252	GithubClient returns a GitHub client .
1253	GitClient returns a git client .
1254	toMap converts a group to a map
1255	findChanges returns a list of coverage changes
1256	CreateDatabase creates a database .
1257	ShouldReport reports whether the given ProwJob should be reported .
1258	Report reports a Prow job .
1259	MarkComplete returns the state of the set .
1260	NewJobAgent returns a new JobAgent
1261	Start starts the job agent .
1262	Jobs returns the list of jobs .
1263	ProwJobs returns a slice of Prow jobs .
1264	GetProwJob returns a Prow job by id .
1265	GetJobLog returns the log for a given job .
1266	unionStrings returns a slice of strings .
1267	Apply returns a copy of this policy .
1268	GetOrg returns an organization by name
1269	GetRepo returns a repository by name .
1270	GetBranch returns a branch .
1271	GetPolicy returns the policy for a branch .
1272	UpdateIssueEvents updates an issue .
1273	enqueueKey adds a key to the worker queue .
1274	 prow job status
1275	buildEnv returns the environment variables for the given build job .
1276	defaultArguments adds the default arguments to the template .
1277	defaultEnv adds the environment variables to the container
1278	injectSource injects a build into a build .
1279	InjectSteps takes a container spec and returns a slice of container steps .
1280	Determines the timeout for the build spec .
1281	makeBuild creates a build from pj job .
1282	newLabels returns a slice of labels from gLabels .
1283	newAssignees returns a list of assignees for a given issue ID .
1284	NewIssueComment creates a new Issue comment .
1285	messageFilter returns a filter for the given change .
1286	IsSuccess returns true if the build is success .
1287	IsFailure returns true if the build is a failure .
1288	IsAborted returns true if the build is aborted .
1289	ProwJobID returns the Prow job ID .
1290	BuildID returns the build ID of the build .
1291	CrumbRequest returns a crumb request .
1292	Measure metrics .
1293	GetSkipMetrics returns the metrics for the given path .
1294	Get returns the content of the given path .
1295	request sends a request to the client
1296	doRequest sends a request to the client
1297	getJobName returns the name of the job .
1298	getBuildPath returns the path for the Jenkins build job .
1299	GetJobInfo returns the job info .
1300	JobParameterized returns true if the job is parameterized .
1301	EnsureBuildableJob starts a buildable job .
1302	LaunchBuild launches a new build .
1303	Build builds a Prow from a ProwJob .
1304	BuildFromSpec builds a build from a ProwJobSpec .
1305	GetEnqueuedBuilds returns a map of Jenkins builds .
1306	Abort aborts a build .
1307	PresubmitToJobSpec returns a job spec .
1308	PostsubmitToJobSpec returns a job spec .
1309	periodicToJobSpec returns a job spec .
1310	GetBuildID returns the build ID for a given name .
1311	listGCSObjects lists all objects in the given bucket .
1312	FindBaseProfile returns the base profile for the project .
1313	sortBuilds sorts a list of build builds .
1314	GetAll returns a list of all regions
1315	NewEventClient creates a new EventClient
1316	PruneComments deletes the list of comment comments .
1317	FormatResponse returns a string representation of a message .
1318	FormatSimpleResponse returns a string representation of the message .
1319	FormatICResponse returns a string representation of an issue comment .
1320	FormatResponseRaw returns a string representation of the response .
1321	Validate validates the options .
1322	Encode returns a string representation of options
1323	RegisterIssueHandler registers an issue handler .
1324	RegisterIssueCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a status event handler .
1327	RegisterPushEventHandler registers a push event handler
1328	Register review event handler
1329	RegisterReviewCommentEventHandler registers a new review comment event handler .
1330	RegisterGenericCommentHandler registers a generic comment handler .
1331	NewAgent returns a new Agent instance
1332	InitializeCommentPruner initializes CommentPruner .
1333	CommentPruner returns the comment pruner
1334	Load loads a configuration file .
1335	Config returns the configuration .
1336	Set sets the configuration .
1337	Start starts the agent .
1338	GenericCommentHandlers returns a map of generic comment handlers .
1339	IssueHandlers returns a map of issue handlers for an issue .
1340	IssueCommentHandlers returns a map of issue comment handlers for an issue .
1341	PullRequestHandlers returns a map of pull request handlers .
1342	ReviewEventHandlers returns a map of review event handlers for a plugin .
1343	ReviewCommentEventHandlers returns a map of review comments for a given repo .
1344	StatusEventHandlers returns a map of status events for a plugin .
1345	PushEventHandlers returns a map of PushEventHandlers .
1346	EventsForPlugin returns a list of events for a plugin .
1347	insertLink inserts a link to the given viewURL .
1348	HelpProvider returns a plugin for the cherrypick plugin .
1349	getPatch returns the patch for a given branch .
1350	releaseNoteFromParentPR returns the release notes from the parent .
1351	ValidatePayload checks if the payload is valid .
1352	PayloadSignature returns the signature of the payload
1353	updateString is used to update a string
1354	updateBool is used to update boolean values
1355	configureOrgMeta updates org metadata
1356	configureTeamRepos is used to configure team repositories .
1357	ShouldReport reports whether the given Prow job is reporting .
1358	Run runs the job .
1359	Format formats a logrus entry .
1360	FindLabels returns a slice of labels matching the regexp .
1361	AddFlags adds flags to the logger .
1362	NewAgent creates a new Agent .
1363	HandleLogin is used to handle a login request .
1364	HandleLogout is used to handle logout .
1365	serverError sends an error to the server .
1366	FromItem converts an item into a ResourceConfig object .
1367	GetItems returns all items in the collection .
1368	SetItems sets the ItemsCollection field s value .
1369	UnmarshalText implements the Unmarshaler interface .
1370	IsAssignee returns true if the issue is assigned to the given login .
1371	IsAuthor checks if the given login is author .
1372	HasLabel returns true if the given label matches the given label .
1373	Branch returns the branch name .
1374	truncate truncate a string
1375	reportStatus reports the status of a ProwJob .
1376	parse issue comments
1377	createComment creates a comment for a project .
1378	Config returns the lens configuration .
1379	Callback is used to call the callback
1380	FormatRecord returns a string representation of a record .
1381	Namespace sets the namespace
1382	NewFakeClient returns a new client
1383	NewClientInCluster creates a new client in cluster .
1384	NewClientFromFile creates a new client from a file .
1385	NewClient creates a new client .
1386	ReplaceConfigMap replaces a ConfigMap with the given name .
1387	GetDiskUsage returns the disk usage of the given path .
1388	GetATime returns the time for the given path .
1389	RegisterLens registers a lens
1390	GetLens returns the lens for the given name .
1391	LastNines returns the last NNLines of an artifact .
1392	NewClient returns a new Client
1393	WriteMessage sends a message to the chat .
1394	MarkAndSweep removes all NATGateways from the given set .
1395	ListAll lists all NATGateways .
1396	NewClient creates a new client .
1397	Acquire acquires a resource
1398	AcquireWait acquires a resource and returns it .
1399	AcquireByState retrieves resources from the given state .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases a single resource
1402	UpdateAll updates all resources .
1403	SyncAll updates all resources .
1404	UpdateOne updates a resource .
1405	Metric returns a metric
1406	HasResource returns true if the resource exists .
1407	DialContext mocks base method
1408	NewDashboardAgent returns a new DashboardAgent
1409	QueryPullRequests returns a list of pull requests .
1410	GetHeadContexts returns a list of contexts for the given pull request .
1411	ConstructSearchQuery builds the search query for the given login .
1412	NewBundledStates returns a new BundledStates .
1413	ReceiveEvent implements the Bundle interface .
1414	Age returns the age of the state of the given time .
1415	Percentile returns the age of the given time .
1416	NewMetrics returns a new Metrics
1417	NewDiskCache creates a new http . RoundTripper .
1418	NewMemCache returns a new http . RoundTripper
1419	NewFromCache creates a new http . RoundTripper .
1420	ProwV1 returns a ProwV1
1421	Prow returns a Prow
1422	NewOwners returns a new Ownership instance
1423	GetApprovers returns a map of owners for the owner .
1424	GetAllPotentialApprovers returns a list of approvers that have the approver .
1425	GetReverseMap returns a map of approvers files for approver .
1426	TempUnapprovedFiles returns the list of temporary files that are temporary .
1427	KeepCoveringApprovers returns a set of temporary files that match the given list of potential files .
1428	GetSuggestedApprovers returns a set of suggestions for a list of approved files .
1429	GetOwnersSet returns a set of owners .
1430	GetShuffledApprovers returns a list of all people who have a random permutation
1431	String returns a string representation of the Approval .
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a new Approvers .
1434	AddLGTMer adds a reference to the approval .
1435	RemoveApprover removes an approver .
1436	AddAssignees adds the user to the approval list .
1437	GetCurrentApproversSetCased returns a set of the current users that have been set .
1438	GetFilesApprovers returns a map of all the files in the owners list .
1439	NoIssueApprovers returns a map of AllIssueApprovers .
1440	UnapprovedFiles returns a set of unapproved files .
1441	GetFiles returns a list of all files in the repository .
1442	IsApproved returns true if the approval is enabled .
1443	ListApproves returns a list of all approvals .
1444	ListNoIssueApproves returns a list of approvals .
1445	GenerateTemplate generates a template with the given data .
1446	writeTemplate writes a template to a file .
1447	Labels returns a slice of labels .
1448	LabelsForTarget returns a slice of labels for a given target .
1449	LoadConfig loads a configuration file .
1450	loadLabels loads the repositories for the given repositories .
1451	kill kills a label
1452	create creates a new update
1453	classifyLabels takes a list of labels and returns a map of labels .
1454	linkify converts a string to lowercase
1455	NewCache creates a new cache .
1456	KeyToPath returns the path to disk .
1457	ensureDir ensures that the directory exists .
1458	Put implements the Cache interface .
1459	Get implements the Cache interface .
1460	Delete removes a key from the cache .
1461	NewGCSArtifact creates a new GCSArtifact .
1462	Size returns the size of the artifact .
1463	ReadAll returns the contents of the artifact .
1464	ReadTail reads the contents of a GCSArtifact .
1465	gzipped returns true if the artifact has been compressed .
1466	optionsForRepo returns the options for the given repo
1467	List lists all ProwJob objects
1468	ProwJobs returns a ProwsJobLists .
1469	List lists all prows in the indexer .
1470	RunAgainstAllBranch checks if all branches are in all branches .
1471	Intersects returns true if two branches are intersects .
1472	ShouldRun implements the RegexpChange interface .
1473	RunAgainstChanges returns true if the given string matches the given regexp .
1474	ShouldRun returns true if the process has been run .
1475	ShouldRun returns true if the repository has been run .
1476	ShouldRun returns true if the ref has been run .
1477	ShouldRun returns true if the repository has been run .
1478	GetPresub mocks base method
1479	SetPresubmits sets the Presubmit field s value .
1480	SetPostsubmits sets the postsubmits for the job .
1481	AllPresubmits returns all presubmits for the given repository .
1482	AllPostsubmits returns all postsubmits for the given repository
1483	AllPeriodics returns a list of all Periodic objects
1484	ClearCompiledRegexes is used to clear the compiled regexes .
1485	Empty returns true if the configuration is empty .
1486	NewClient creates a new client .
1487	ExpandAlias returns a set of repositories for the given alias .
1488	ExpandAliases expands all aliases in the repository .
1489	ParseFullConfig parses a YAML file .
1490	ParseSimpleConfig parses a YAML configuration .
1491	decodeOwnersMdConfig decodes the md config file .
1492	findOwnersForFile returns the owner of the given file .
1493	FindApproverOwnersForFile returns the authorizations for the given file .
1494	FindReviewersOwnersForFile returns all reviewers owned by the given path .
1495	FindLabelsForFile returns all labels for a file .
1496	IsNoParentOwners returns true if the given path is no parent .
1497	Reverse returns the percentage of the coverage .
1498	FromPayload creates a new PeriodicProwEvent from the given payload .
1499	ToMessage implements PublishProwJob .
1500	UnmarshalText unmarshals the privacy settings from the given text .
1501	compileApplicableBlockades compiles a list of blockades .
1502	calculateBlocks returns a summary of blocks that are blocked .
1503	MergeMultipleProfiles merges multiple profiles .
1504	AddFlags adds flags to the flagSet .
1505	processNextItem processes the next job .
1506	handleErr implements the Controller interface .
1507	AggregateFilter returns a filter that filters the given filters .
1508	FilterPresubmits filters a list of presubmitted files .
1509	MakeCommand returns a cobra command .
1510	Push adds an item to the queue
1511	Pop removes the event from the heap .
1512	NewFakeOpenPluginWrapperWrapper returns a new FakeOpenPluginWrapperWrapperWrapperWrapperWrapper
1513	ReceiveIssue sends an issue to the plugin
1514	Validate validates the options
1515	Complete completes the options .
1516	Set sets the value of the orgRepo format .
1517	ensure returns an error if it exists .
1518	output returns the output of the command
1519	 projects
1520	selectProject selects a project .
1521	createCluster creates a cluster
1522	createContext creates a new context
1523	contextConfig returns a cloned client config
1524	selectContext selects a context
1525	applyCreate runs the create command
1526	DetermineSkipPresubmitted returns a list of presubmittedPresets that should be skipped .
1527	Dispatch sends all events to the database .
1528	CreateIssue creates a new issue
1529	CreateStatus creates a new repository .
1530	ForEachPR returns a list of pruned prune .
1531	GetCollaborators returns a list of collaborators .
1532	GetCombinedStatus retrieves the status of a repository .
1533	GetIssues returns a list of issues for a given repository .
1534	GetLabels returns a list of labels for an issue .
1535	GetUser gets a user by login .
1536	check config validity
1537	createSystemdLogfile creates a system log file .
1538	createFullSystemdLogfile creates a full system log file .
1539	createSystemdLogfiles creates system logfiles and writes them to disk
1540	prepareLogfiles is used to prepare logfiles .
1541	writeSuccess marker file
1542	MakeCommand returns a cobra command .
1543	warnDeprecated warns if the given time is a deprecated time .
1544	Describe returns a string representation of the RequireMatchingLabel .
1545	TriggerFor returns the trigger for the given org .
1546	EnabledReposForPlugin returns the repositories for the given plugin .
1547	EnabledReposForExternalPlugin returns the repositories for an external plugin .
1548	SetDefaults sets defaults for ConfigUpdater .
1549	Validate plugins
1550	ShouldReport reports whether the given Prow job has been reported .
1551	Run runs the git repository .
1552	PathForRefs returns the path for the given refs .
1553	gitCtxForRefs returns a git ctx for the given refs .
1554	commandsForBaseRef returns a list of commits for the given refs .
1555	gitTimestampEnvs returns the git timestamp for the given timestamp .
1556	gitRevParse parses git revision .
1557	commandsForPullRefs returns a list of commits for pullRefs .
1558	ProduceCovList returns a coverage list of coverage blocks .
1559	popRandom removes a random element from the set .
1560	resolve resolves the kubernetes options .
1561	ProwJobClients returns a ProwJobClientset .
1562	ProwJobClient returns a ProwJob for the given namespace .
1563	InitiatedClusterClient returns a kubernetes client
1564	BuildClusterClients returns a map of kubernetes
1565	Age returns the age of the given time .
1566	ReceiveEvent implements the ActiveState interface .
1567	ReceiveEvent implements the InactiveState interface .
1568	Active returns true if all states are active .
1569	Age returns the minimum age of the state .
1570	ReceiveEvent implements the MultiState interface .
1571	ProwJobs returns a ProwInformer .
1572	ItemToResourcesConfig converts Item to ResourcesConfig
1573	Copy returns a copy of the TypeToResources .
1574	MakeCommand returns a cobra command .
1575	Increments the number of pending jobs .
1576	setPreviousReportState updates the previous ProwJob state .
1577	SyncMetrics is used to update metrics metrics
1578	DumpProfile dumps a profile .
1579	blocksEqual returns true if two profiles are equal
1580	NewProwJobInformer creates a new instance of ProwJobInformer .
1581	NewFilteredProwInformer creates a new instance of a new ProwInformer .
1582	New creates a new Spyglass
1583	Lenses returns a list of lens matching the match cache
1584	JobPath returns the path for a job .
1585	RunPath returns the path of the key .
1586	ExtraLinks returns the extra links for the given src .
1587	needDemux returns a list of plugins that match the given event type
1588	demuxExternal dispatches an external plugin to the server
1589	dispatch sends a request to the server
1590	AddFlags adds the command line flags to the command .
1591	CheckFlags checks the state of the state plugin .
1592	ReceiveIssueEvent returns a point for an issue .
1593	Load loads a configuration from a configuration file .
1594	loadConfig loads the configuration from the configuration file .
1595	YamlToConfig converts the given path to a job config .
1596	ReadFileMaybeGZIP reads a file from a path .
1597	finalizeJobConfig initializes job config .
1598	validateComponentConfig validates component config .
1599	ConfigPath returns the default config path .
1600	ValidateController validates a controller .
1601	defaultJobBase sets the default job base .
1602	SetPresubmitRegexes sets the regexp regexes for the given trigger .
1603	setBrancherRegexes sets the regexes for branches .
1604	SetPostsubmitRegexes sets the RegexpRegexes field s value .
1605	Body returns the body of the image
1606	NewBoskosHandler creates a new http handler .
1607	ErrorToStatus converts an error to a status code .
1608	DumpProfile mocks base method
1609	LoadProfile loads a profile from a file .
1610	NewClient returns a new client .
1611	SetCredentials sets the credentials for the client .
1612	Checkout commits a commit .
1613	CheckoutNewBranch checks for a new branch
1614	Merge merges a commit in the repository .
1615	CheckoutPullRequest commits a pull request .
1616	Config adds a config to the repo .
1617	retryCmd attempts to retry the command with the given arguments .
1618	LabelsAndAnnotationsForSpec returns a map of labels for a pod .
1619	ProwJobToPod converts a ProwJob to a pod .
1620	CloneLogPath returns the path to the log .
1621	cloneEnv returns a list of environment variables
1622	sshVolume returns a volume for the given secret
1623	InjectEntrypoint adds an entrypoint to the container .
1624	PlaceEntrypoint creates a container for the given image
1625	kubeEnv returns the kube environment variables .
1626	Client returns a kubernetes client .
1627	handle handles an event .
1628	SendHook sends a hook to an event
1629	janitorClean cleans up the given resources
1630	janitor is used to release resources
1631	Run starts the pull server .
1632	specToStarted converts a JobSpec to a GCS .
1633	Run runs the command .
1634	hasPRChanged returns true if the pull request has been changed .
1635	UpdateIssues updates all issues in the database .
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue returns the number of issues associated with the given org .
1638	optionsForRepo returns the options for the given repo .
1639	localOnlyMain is the main function that serves the main process .
1640	Summarizes the coverage list .
1641	Subset returns a new CoverageList with the given prefix .
1642	ListDirectories returns a list of directories in the group .
1643	readRequest reads a request from an io . Reader .
1644	handle handles the request
1645	writeResponse writes an admission request to the writer .
1646	onlyUpdateStatus returns the admission status of the pod .
1647	convertSuiteMeta converts a suite metadata into a resultstore .
1648	NewHealth returns a new Health
1649	ServeReady implements the http . Handler interface .
1650	NewController creates a new Controller .
1651	newExpectedContext returns a new context with the given context .
1652	contextToStrings converts contexts to strings .
1653	filterSubpools returns a map of subpools .
1654	filterSubpool is used to filter a subpool
1655	poolPRMap returns a map of pull requests from subpool
1656	failContexts returns a list of contexts that have the required contexts .
1657	merge accumulates a list of PRs from the PRs .
1658	tryMerge is a helper function that tries to merge a branch into an error .
1659	prChanges returns the changed files for a pull request .
1660	prune removes all changes from the changed files .
1661	dividePool creates a subpool from a pool .
1662	AggregateProfiles compiles a list of profiles .
1663	countToBoolean converts a list of profiles to boolean values .
1664	NewStorage creates a new Storage .
1665	AddResource adds a resource to storage .
1666	DeleteResource deletes a resource
1667	UpdateResource updates a resource
1668	GetResource retrieves a resource .
1669	GetResources retrieves all resources from storage .
1670	SyncResources implements storage .
1671	ParseConfig parses a config file .
1672	ProblemInFiles returns a map of problems in the given files .
1673	NewPodLogArtifact creates a new PodLogArtifact .
1674	canonicalLink returns the canonical link for this pod .
1675	ReadAt returns the number of bytes in the pod .
1676	ReadAll returns the contents of the pod .
1677	ReadAtMost reads the number of bytes from the pod .
1678	ReadTail returns the tail of the pod .
1679	newProblems returns a map of comments for a review comment .
1680	problemsInFiles returns a map of problems in a file .
1681	undoPreset undo a preset
1682	undoPresubmitPresets undo all presets
1683	yamlBytesStripStrip strips nulls .
1684	monitorDiskAndEvict is a helper function that monitors the disk and evict it .
1685	difference returns a new orgRepoConfig
1686	union returns a new orgRepoConfig
1687	clearStaleComments deletes stale comments .
1688	Determines the release note label for the given body .
1689	getReleaseNote returns the release notes for the given body .
1690	NewClient returns a new client
1691	Acquire acquires a resource and returns it .
1692	ReleaseOne releases a resource
1693	UpdateAll updates the state of the state .
1694	GetGitHubClient returns a GitHub client
1695	GetUsername returns the username of the user
1696	Create token handler
1697	Create token handlers
1698	String returns a string representation of the job indentifier .
1699	TerminateOlderPresubmitJobs terminates a list of PendingJobs .
1700	PushMetrics pushes metrics to metrics
1701	RateLimiter returns a RateLimitingQueue
1702	checkExistingStatus returns the status of a commit .
1703	checkExistingLabels returns true if there is no issue label .
1704	handle processes a pull request .
1705	MarkdownSHAList renders a list of commits .
1706	PathForSpec returns the path for a job spec .
1707	AliasForSpec returns the alias for a job spec .
1708	RootForSpec returns the root path for a job .
1709	NewSingleDefaultRepoPathBuilder returns a new RepoPathBuilder
1710	NewExplicitRepoPathBuilder returns a new RepoPathBuilder .
1711	RegisterSourceOrDie registers a new IssueSource .
1712	CreateAndSync synchronizes all issues .
1713	loadCache loads the cache .
1714	setIntersect returns the intersection of two strings
1715	sync updates the status of the issue
1716	GetAWSCreds retrieves the credentials from the resource .
1717	 stopper for stopper
1718	newPipelineConfig returns a new pipeline config .
1719	KubeClient returns kubernetes client
1720	ProwJobClient returns a ProwJobClient
1721	resolveSymLink resolves a symbolic link to the bucket .
1722	readJSON reads a JSON object from a bucket .
1723	listSubDirs returns a list of all subdirs for a given prefix .
1724	listAll lists all objects in the bucket .
1725	listBuildIDs returns a list of build IDs .
1726	FilterProfilePaths returns a list of profiles matching the given paths .
1727	LoadSecrets loads secrets from a list of paths .
1728	LoadSingleSecret loads a single secret from a path .
1729	Set sets the boolean value .
1730	NewOpener creates a new OpenCS client .
1731	IsNotExist returns true if an error is not present .
1732	LogClose implements io . Writer .
1733	Writer creates a new io . Writer .
1734	InitGitHubConfig sets the cookie store
1735	diffDisplayed returns the percentage of the coverage change .
1736	makeTable returns a table of coverage information
1737	ContentForGitHubPost returns the content for the given job .
1738	AddFlags adds the command line flags to the command .
1739	CheckFlags checks if the client is valid .
1740	getGitHubClient returns a GitHub client
1741	limitsAndWaitAndWait waits for the GitHub API to wait for the GitHub API to wait for a token to finish .
1742	FetchIssues fetches all issues in a channel .
1743	hasID returns true if an issue has an ID .
1744	FetchIssueEvents fetches a channel for an issue
1745	isPRChanged returns true if the pull request was changed .
1746	NewFetcher creates a new Fetcher
1747	fetchRecentIssues fetches all issues from the database .
1748	fetchRecentEvents fetches all recent events and comments from the repository .
1749	Fetch fetches all recent issues .
1750	Issues returns a list of issues from FlakyJobReporter .
1751	Title returns the name of the FlakyJob .
1752	Labels returns a list of labels .
1753	ReadHTTP reads an HTTP request from a URL .
1754	String returns a string representation of the lines by timestamp .
1755	NewJobSpec returns a new JobSpec .
1756	ResolveSpecFromEnv returns a JobSpec from the environment .
1757	EnvForSpec returns the environment variables for a job spec .
1758	EnvForType returns the environment variables for the given job type .
1759	getRevisionFromRef returns revision from refs
1760	GetRevisionFromSpec returns the Revision from a JobSpec .
1761	helpProvider returns a plugin help provider .
1762	load loads the repositories from the given io . Reader .
1763	loadPaths loads paths from the given io . Reader .
1764	Match returns true if the path matches the given path .
1765	CreateDatabase creates a new InfluxDB .
1766	mergeTags merges two tags .
1767	tagsToWhere returns a string representation of the given tags .
1768	Push adds a point to the batch .
1769	create a pod log artifact
1770	serve serves the prometheus server
1771	collect metrics from the controller
1772	makeRequest creates a new branch protection request
1773	makeReviews returns the requiredReviews for the given review policy .
1774	Header returns the header of the view
1775	CallCallback calls the callback function for the given data .
1776	logLinesAll returns a slice of log lines .
1777	executeTemplate executes a template and returns a string .
1778	DeepCopyObject is an autogenerated deepcopy function copying the receiver creating a new ResourceObject .
1779	FromItem converts an item into a ResourceObject
1780	SetItems sets the items in the collection .
1781	DeepCopyObject is an autogenerated deepcopy function copying the receiver creating a new ResourceCollection .
1782	useContext sets the context for the given context
1783	currentContext returns the current context
1784	command returns a copy of the command
1785	describeCluster is used to describe a cluster
1786	Set adds a string to the slice .
1787	parseXML parses the contents of a GCS directory .
1788	Render renders the contents of a directory .
1789	Render renders a record
1790	Render renders a gCS file .
1791	Printf logs a message to the log .
1792	NewClient creates a new client .
1793	SetReview sets a review .
1794	GetBranchRevision returns the revision of the given branch .
1795	queryAllChanges returns all changes for the given project .
1796	NewTypeFilterWrapperWrapper returns a new TypeFilterWrapper
1797	AddFlags adds the flags to the command .
1798	CheckFlags checks if the type of pull requests are valid .
1799	AddFlags adds flags to the Kubernetes client .
1800	Validate validates the Kubernetes client options .
1801	Client returns a client for the given type .
1802	newCRDClient creates a CRD client .
1803	createRESTConfig creates a REST config .
1804	registerResource registers a custom resource definition .
1805	newDummyClient creates a new dummy client .
1806	Update updates the object .
1807	TrustedPullRequest returns a list of labels for a given issue .
1808	buildAll builds all files in the repository .
1809	Run runs the command .
1810	AddConfig adds a config to storage .
1811	DeleteConfig deletes a config .
1812	UpdateConfig updates the configuration
1813	GetConfig returns the configuration for the given name .
1814	GetConfigs returns all the configs
1815	SyncConfigs implements storage .
1816	addKnownTypes adds known types to the given scheme .
1817	NewController creates a new Controller .
1818	Run implements the Controller interface .
1819	addedBlockingPresub returns a map of presubmiters that are not blocked .
1820	removeBlockingPresubmits removes a new presubmit from the given map .
1821	migratedBlockingPresub mocks base method
1822	Load loads a configuration file .
1823	canExecuteConcurrently returns true if the given Prow has been completed .
1824	getJenkinsJobs builds a list of Jenkins jobs from Jenkins .
1825	terminateDupes is used to terminate a list of job objects .
1826	Throttle performs a throttling throttling throttling .
1827	NewClientWithFields creates a new client with the given fields .
1828	NewClient creates a new client with the given parameters .
1829	NewDryRunClient creates a new client with the given parameters .
1830	NewFakeClient returns a new fake client
1831	request sends a request to the client
1832	requestRaw is part of the request .
1833	getUserData returns user data
1834	readPaginatedResults retrieves a list of results from a given path .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a slice of labels
1837	stateCannotBeanError returns an error if the error occurred .
1838	IsMergeable returns true if the given SHA is merged
1839	Token returns a new token .
1840	List artifacts
1841	KeyToJob converts a key to a job name .
1842	protoGrowToGCS returns the url for the given job .
1843	FetchArtifacts fetches artifacts from a source file .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads a new Invocation
1855	ApplyDefault implements the DecorationConfig interface .
1856	Validate validates the DecorationConfig .
1857	ApplyDefault applies default values to the given uuid
1858	ApplyDefault applies defaults to a GCSConfiguration .
1859	Validate validates the GCS configuration .
1860	ClusterAlias returns the cluster alias
1861	NewResource creates a new resource .
1862	NewResourcesFromConfig returns a slice of resources from a ConfigEntry .
1863	UserDataFromMap creates a new UserData from a map .
1864	Set sets the comma separated strings .
1865	UnmarshalJSON deserializes a UserData
1866	Extract extracts the data from the user data
1867	Set sets a user s value .
1868	Update updates the user data
1869	ToMap converts the user data to a map .
1870	FromMap creates a new UserData from a map .
1871	ItemToResource converts an item to a Resource .
1872	Run runs the command .
1873	addSSHKeys adds SSH keys to the given paths .
1874	Issues returns a list of all the issues that have been created .
1875	loadCluster loads all clusters from a JSON file .
1876	parseTriageData parses a triage data .
1877	topClusters returns the top of the cluster .
1878	topJobsFailed returns the top of the top of the cluster .
1879	Title returns the title of the cluster .
1880	Labels returns the labels for the cluster .
1881	New returns a new Cron
1882	QueuedJobs returns a list of jobs that are queued .
1883	HasJob returns true if the given job exists .
1884	addJob adds a cron to the scheduler
1885	removeJob removes a job from the scheduler .
1886	UpdateComments updates the comments for an issue .
1887	GatherProwJobMetrics collects metrics for each row in the given slice .
1888	OptionOrDefault returns the default value for the given option .
1889	newGCSJobSource creates a new GCSJobSource .
1890	artifacts fetches artifacts for a given job .
1891	canonicalLink returns the canonical link for this job .
1892	jobPath returns the path of the job .
1893	targetURL returns the target URL for a pull request .
1894	newBuildConfig returns a new build config .
1895	NewClient creates a new GitHub client
1896	retry attempts to retry a request .
1897	depaginate retrieves a list of items from the GitHub API .
1898	NewHelpAgent returns a new HelpAgent
1899	GeneratePluginHelp generates a plugin help .
1900	getPullCommitCommitHash returns the hash of the pull commit .
1901	listJobBuilds returns a list of jobs for a given bucket .
1902	getPRBuildData returns a list of build data .
1903	getGCSDirsForPR returns a map of paths for a given repository .
1904	imageDelete from disk
1905	doCreate creates a new network
1906	loadByName loads a network by name .
1907	Transaction executes a function on the node .
1908	ForLocalInspectionWithPreparedStmt returns a Cluster with prepared statements .
1909	SetDefaultTimeout sets the default timeout .
1910	Transaction implements the Cluster interface .
1911	EnterExclusive implements the Cluster interface .
1912	ExitExclusive terminates an exclusive transaction .
1913	Close closes the cluster .
1914	TxCommit commits a transaction .
1915	ParseRemote parses the given raw string and returns it .
1916	GetContainerServer returns a container server .
1917	GetImageServer returns the image server for the given name .
1918	initAppArmor initializes the appArmor
1919	appArmorCanStack returns true if the appArmor can be loaded .
1920	containerDeviceAdd adds a device to a container .
1921	profileDeviceAdd adds a device to the LXD container .
1922	ensureImageAliases creates a new image aliases
1923	GetExistingAliases returns the list of existing aliases for the given list of aliases .
1924	String returns the string representation of the status code .
1925	ImagesGetExpired returns a list of images in the cluster .
1926	ImageSourceInsert inserts a new image source
1927	ImageSourceGet returns an image source .
1928	ImageExists returns true if the image exists .
1929	ImageGet returns the image for the given project .
1930	ImageGetFromAnyProject retrieves the image from the cluster .
1931	imageFill fills the image with the given image .
1932	ImageLocate returns a list of nodes in the cluster .
1933	ImageAssociateNode adds a node to the cluster
1934	ImageDelete deletes an image
1935	ImageAliasesGet returns the names of images for the given project .
1936	ImageAliasGet returns the image alias for the given project .
1937	ImageAliasRename renames an image .
1938	ImageAliasDelete deletes an image alias
1939	ImageAliasesMove mocks base method
1940	ImageAliasAdd adds an image alias to the cluster .
1941	ImageAliasUpdate updates an image alias .
1942	ImageLastAccessUpdate updates the last access time .
1943	ImageLastAccessInit initializes the cache for the given fingerprint .
1944	ImageUpdate updates an image .
1945	ImageInsert inserts an image into the cluster .
1946	ImageGetPools returns the list of pool pools .
1947	ImageGetPoolNamesFromIDs returns a list of pool names from the pool .
1948	ImageUploadedAt updates the image at the given id .
1949	ImagesGetOnNode returns all images in the cluster
1950	ImagesGetByNodeID returns a map of images by node ID .
1951	ImageGetNodesWithImage returns a list of nodes with the given fingerprint .
1952	ImageNodesWithoutImage returns a list of nodes with the given fingerprint .
1953	Add adds a function to the group .
1954	Start starts the group .
1955	zfsIsEnabled returns true if zfs is enabled .
1956	zfsToolVersionGet returns the version of zfsToolVersion
1957	zfsModuleVersionGet returns the zfs module version
1958	zfsPoolVolumeCreate creates a new volume
1959	zfsPoolVolumeExists returns true if the given dataset exists .
1960	NetworkIDsNotPending returns a map of network IDs .
1961	NetworkConfigAdd adds a configuration to the cluster .
1962	NetworkNodeJoin adds a node to the cluster .
1963	NetworkCreatePending creates a new network .
1964	NetworkCreated mocks base method
1965	NetworkErrored implements the ClusterTx interface .
1966	NetworkGet returns a network .
1967	networkNodes returns the list of nodes in the cluster .
1968	NetworkGet interface
1969	NetworkConfigGet retrieves the configuration for a network .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates a network .
1972	NetworkUpdateDescription updates the description of a network .
1973	NetworkConfigClear clears network configuration .
1974	Delete a network
1975	NetworkRename renames a network .
1976	GetContainers returns the list of containers .
1977	GetContainersFull returns a list of containers in the protocol .
1978	GetContainer returns a container .
1979	CreateContainerFromBackup creates a new container .
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a new container from the given image .
1982	UpdateContainer updates a container
1983	RenameContainer mocks base method
1984	ExecContainer executes a container
1985	GetContainerFile returns the contents of a container .
1986	CreateContainerFile creates a container file .
1987	DeleteContainerFile deletes a container file .
1988	GetContainerSnapshotNames returns the names of the container snapshots for the given container name .
1989	Get container snapshots
1990	GetContainerSnapshot returns a container snapshot .
1991	CreateContainerSnapshot creates a new snapshot snapshot
1992	MigrateContainerSnapshot mocks base method
1993	UpdateContainerSnapshot updates a container snapshot
1994	GetContainerState returns the state of a container .
1995	UpdateContainerState updates a container state .
1996	GetContainerfiles returns the logfiles of a container
1997	GetContainerLogfile retrieves a container logfile .
1998	GetContainerMetadata returns the metadata for a container
1999	SetContainerMetadata sets the metadata for a container
2000	GetContainerTemplateFiles returns the list of templates for a container
2001	CreateContainerTemplateFile creates a new container template file .
2002	DeleteContainerTemplateFile deletes a container template
2003	ConsoleContainer logs a container
2004	GetContainerConsoleLog returns the console log .
2005	DeleteContainerConsoleLog deletes a container log
2006	GetContainerBackups returns a list of containers for a container
2007	GetContainerBackup returns a container backup
2008	CreateContainerBackup creates a new container backup
2009	RenameContainerBackup renames a container backup
2010	DeleteContainerBackup deletes a container backup
2011	GetContainerBackupFile returns a backup file
2012	RsyncSend sends a rsync command .
2013	PatchNamesGetNames returns the names of the patches .
2014	patchRenameCustomVolumeLists adds a new volumeLVs to the given name .
2015	patchLvmNodeSpecificConfigKeys is used to patch LvmNodeSpecificConfigKeys .
2016	GetHTTPClient returns the HTTP client .
2017	do performs a HTTP request .
2018	RawQuery performs a raw HTTP query .
2019	RawWebSocket returns a raw websocket connection .
2020	RawOperation mocks base method
2021	ProfileToAPI converts Profile to API .
2022	Profiles returns a list of profiles for a project .
2023	ProfileGet gets a profile by name .
2024	ProfilesGet returns a list of profiles for a given project .
2025	ProfileConfig returns the profile configuration for a given project .
2026	ProfileConfigClear deletes a profile .
2027	ProfileConfigAdd adds a profile to the database .
2028	ProfileContainersGet returns a map of containers for a project .
2029	ProfileCleanupLeft removes all profiles from the cluster .
2030	ProfilesExpandConfig returns a map of profile config values .
2031	ProfilesDevices expands devices to devices .
2032	GetServer returns the server s server .
2033	UpdateServer updates the server
2034	HasExtension returns true if the given extension exists .
2035	GetServerResources retrieves the server s resources .
2036	UseProject returns a container with the given name .
2037	sqliteOpen opens a database connection
2038	Rebalance returns a list of Raft nodes in the cluster .
2039	Promote is used to promote a RaftNode .
2040	Purge removes a node from the database
2041	List lists all nodes in the cluster .
2042	Count returns the number of nodes in the database .
2043	Enabled checks if the node is enabled .
2044	membershipNodeStateForBootstrapOrJoinOrJoinOrJoin is a helper function that checks the cluster state of the cluster .
2045	membershipCheckClusterStateForBootstrapOrJoinOrJoin is a helper function that checks if the cluster state is a bootstrap state .
2046	membershipStateForAccept returns an error if the cluster state is valid .
2047	membershipStateForLeaveStateForLeave is a helper function to check if the node is empty .
2048	membershipNoLeftClusterCert returns an error if not found .
2049	ConfigLoad returns a new Config object .
2050	Replace replaces the values with the given values .
2051	Patch applies a patch to the config .
2052	HTAddress returns the HTTPS address for the given node .
2053	CertificatesGet returns all certificates
2054	CertGet retrieves a certificate from the database .
2055	CertSave saves a certificate
2056	CertDelete deletes a certificate
2057	CertUpdate updates a certificate
2058	createDevLxdLxdlListener creates a new socket .
2059	Servers returns the list of servers .
2060	Shutdown shuts down the raft server .
2061	aftNetworkTransport creates a new raft transport .
2062	aftConfig returns a raft configuration for raft .
2063	aftMaybeBootstrap is part of raft .
2064	CPUResource returns the CPU CPU statistics
2065	MemoryResource returns the memory usage of the resource .
2066	GetOperationUUIDs returns a list of UUIDs
2067	GetOperations returns the list of operations .
2068	GetOperation returns the operation with the given UUID .
2069	GetOperationWebsocket returns a websocket connection
2070	tryMount mocks base method
2071	LxdUsesPool returns true if the given driver is on disk .
2072	ProjectURIs returns the project URIs for the given filter .
2073	ProjectList returns a list of projects that match the given filter .
2074	ProjectGet returns a project by name .
2075	ProjectExists returns true if the given project exists .
2076	ProjectCreate creates a new project .
2077	ProjectUsedByRef returns the list of projects used by the given filter .
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project
2080	PasswordCheck checks if the secret is valid .
2081	LoadCert loads a certificate from a directory .
2082	WriteCert writes a certificate to a directory .
2083	NewDaemon returns a new Daemon instance
2084	DefaultDaemon returns a new Daemon instance
2085	AllowProjectPermission adds a permission to the specified feature .
2086	checkTrustedClient checks if the request is trusted
2087	Authenticate is used to authenticate the request .
2088	State returns the state of the daemon .
2089	UnixSocket returns the Unix socket path .
2090	Stop stops the daemon .
2091	setupExternalAuthentication is used to setup external authentication
2092	Initialize the database object .
2093	WriteJSON writes the given body to w .
2094	EtagHash returns the hash of the given data .
2095	EtagCheck checks if the request is an etag .
2096	HTTPClient returns a new http client .
2097	IsRecursionRequest returns true if the request is a recursion request .
2098	GetListeners returns a list of net . Listeners .
2099	internal get SQL GET
2100	Internal SQL query
2101	PublicKey returns the public key of the certificate .
2102	PrivateKey returns the private key .
2103	Fingerprint returns the fingerprint of the certificate .
2104	GenerateCert generates a new certificate for a certificate .
2105	PrintServerInfo prints information about the server .
2106	LaunchContainers starts a container with the given parameters .
2107	CreateContainers creates a new container .
2108	GetContainers returns a list of docker containers .
2109	StartContainers starts a container .
2110	setQueryParam sets the query parameter for the given URI .
2111	GetImages returns the list of images
2112	GetImageFile returns an image with the given fingerprint .
2113	GetImageSecret returns the image secret
2114	GetPrivateImage returns a private image .
2115	GetPrivateImageFile returns the private image for the given fingerprint .
2116	Get image aliases
2117	tryCopyImage tries to copy an image to the remote server
2118	CopyImage copies an image to a remote server .
2119	UpdateImage updates the image .
2120	DeleteImage deletes an image
2121	RefreshImage refreshes the image
2122	CreateImageAlias creates a new image alias
2123	UpdateImageAlias updates an image alias
2124	RenameImageAlias mocks base method
2125	DeleteImageAlias deletes an image alias
2126	Open opens a database .
2127	EnsureSchema creates a new database .
2128	FilesystemDetect returns the name of the filesystem .
2129	Schema returns a new schema .
2130	updateFromV37 is a helper function to update the https_address
2131	ArchGetLocal returns the architecture of the machine .
2132	NewController creates a new controller .
2133	CreateContainer creates a container .
2134	DefinedContainer returns true if the container is defined .
2135	UpdateContainer updates a container .
2136	Renames a container
2137	DeleteContainer deletes a container
2138	Add adds a new update to the schema .
2139	ensureSchemaTableExists creates a schema table .
2140	queryCurrentVersion returns the current version of the current version .
2141	ensureUpdatesAreApplied ensures that all updates are applied .
2142	checkSchemaVersionsHaveNoHoles returns an error if the version has noHoles .
2143	checkAllUpdatesAreApplied checks if all updates are applied .
2144	formatSQL formats a SQL statement
2145	GetAllXattr returns a map of all xattr s attributes .
2146	GetErrno returns the error of an error .
2147	Uname returns a Utsname
2148	RegisterStmt registers a SQL statement .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new gateway .
2151	DialFunc returns a DialFunc that connects to the gateway .
2152	Shutdown shuts down the gateway .
2153	Sync implements the gateway .
2154	Reset resets the given cert .
2155	LeaderAddress returns the leader address of the gateway .
2156	waitLeadership waits until the leader is reached .
2157	currentRaftNodes returns the current RaftNodes .
2158	cacheRaftNodes returns the list of cached RaftNodes .
2159	dqliteMemoryDial returns a Dialite DialFunc for a given listener .
2160	DqliteLog implements the DQLite interface .
2161	MetadataAsMap returns the metadata as a map .
2162	MetadataAsOperation returns the metadata for the response .
2163	MetadataAsStringSlice returns a slice of the metadata as a string .
2164	MetadataAsStruct implements the Response interface .
2165	Load loads the report from the file .
2166	Write writes records to CSV file .
2167	AddRecord adds a record to the report .
2168	LoadConfig loads a config file .
2169	SaveConfig saves the configuration to disk .
2170	Get implements the ChrootLoader interface .
2171	ConfigPath returns the path to the config file .
2172	ServerCertPath returns the server certificate path for a remote server .
2173	NewConfig returns a new Config instance
2174	checkForPreDump support for pre - dump support
2175	preDumpLoop runs a pre - dump loop .
2176	newRoot returns a new cobra command
2177	APIExtensionsCount returns the number of API extensions .
2178	SelectURIs returns a slice of URIs from a SQL statement .
2179	SelectStrings returns a slice of strings .
2180	scanSingleColumn scans a single column .
2181	LazyHandler returns a FuncHandler that wraps the given handler .
2182	Callers returns a slice of callers .
2183	name returns the name of the call .
2184	TrimBelow returns the trace of the given call .
2185	TrimAbove removes the top of the given call .
2186	TrimBelowName removes a trace from the trace .
2187	TrimAboveName removes the trailing name from the trace .
2188	TrimRuntime returns the trace of the trace .
2189	GetCaps returns the contents of a file .
2190	SetCaps sets the capabilities for the given path .
2191	Read implements io . Reader interface .
2192	Supported returns true if the quota is supported .
2193	GetProject returns the quota for the given path .
2194	SetProject sets the quota for a project .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the quota usage of a quota .
2197	SetProjectQuota sets the quota quota for a project .
2198	backupByName retrieves a backup by name .
2199	backupCreate creates a container backup .
2200	Rename renames the backup .
2201	Delete deletes the backup .
2202	backupFixStoragePool is used to fix the storage pool
2203	Count returns the number of rows in a table .
2204	CountAll returns a map of all tables .
2205	InitTLSConfig initializes TLS configuration .
2206	copyContainerThinPool copies the container to the given container .
2207	copyContainerLV creates a new containerLV for the given container .
2208	copyContainer copies a container to a container
2209	copyVolume copies the volume to the source pool
2210	GetPrivateImage returns the image for the given fingerprint .
2211	GetPrivateImageFile returns the image with the given fingerprint .
2212	GetImageAliasNames returns the names of image aliases .
2213	ProtoRecv receives a message from the websocket .
2214	ProtoSend sends a message to the websocket .
2215	ProtocolSendControl sends a message to the websocket .
2216	Read implements io . Reader interface .
2217	doContainersGetFromNode retrieves all containers from a node
2218	Retry attempts to retry a function .
2219	IsRetriableError returns true if the given error is retryable .
2220	AppArmorProfile returns the apparmor profile .
2221	StoragePoolVolumeCreate creates a storage pool
2222	ContainerStorageReady returns true if the container is ready to be ready .
2223	ContainerCreateFromImage creates a container from an image
2224	ContainerSnapshotRename implements storage . ContainerSnapshot .
2225	ContainerSnapshotCreateEmpty creates a container snapshot
2226	btrimSubVolumesDelete deletes a subvolumes
2227	isBtrfsSubVolume returns true if subvolfs is btrfs .
2228	SelectConfig returns a map of config values .
2229	UpdateConfig updates a configuration .
2230	deleteConfig deletes a config from the database .
2231	FormatSection returns a string representation of a section .
2232	Get projects
2233	GetProject gets a project by name
2234	CreateProject creates a new project
2235	UpdateProject updates a project
2236	RenameProject implements Protocol .
2237	Read implements io . Reader interface .
2238	Write implements io . Writer interface .
2239	NewCanceler returns a new Canceler instance
2240	Cancelable returns true if the request has been canceled .
2241	Cancel cancels all requests .
2242	CancelableDownload is part of the request .
2243	clusterGet returns a JSON representation of a cluster
2244	clusterMemberConfig returns a list of cluster members
2245	ClusterDisable is used to create a cluster
2246	tryClusterRebalance makes a cluster rebalance
2247	internalClusterPostRebalance is used to create a new Raft node .
2248	internal method to promote a Raft node
2249	Filters returns the list of filters for the given entity .
2250	Parse parses a struct .
2251	findStruct finds a struct type by name
2252	parseStruct parses a struct .
2253	Get profile names
2254	Get profiles
2255	GetProfile returns a profile .
2256	CreateProfile creates a new profile
2257	UpdateProfile updates a profile
2258	Renames a profile
2259	Load loads a map from the given schema .
2260	Dump returns the value of the map
2261	GetRaw returns the value for the given key .
2262	GetString returns the value of a key .
2263	GetBool returns true if the value is a bool .
2264	GetInt64 returns the value of an int64 .
2265	update updates the values of the map
2266	set sets the value for the given key .
2267	DoesSchemaTableExists returns true if the table exists .
2268	selectSchemaVersions retrieves all the schema versions from the database .
2269	selectTablesSQL returns a list of SQL queries .
2270	createSchemaTable creates a new schema table .
2271	insertSchemaVersion inserts a new version .
2272	NewState returns a new State
2273	containerLXXCUnload removes the container from the container .
2274	containerLXCInstantiate returns a new instance of containerLXC .
2275	initStorage initializes storage .
2276	OnNetworkUp is called when a network is up .
2277	setupHostVethDevice sets the HostVethDevice interface .
2278	getLxcState returns the state of the container .
2279	StorageStartSensitive starts the container .
2280	deviceExistsInDevices returns true if the given path exists .
2281	createDiskDevice creates a disk device .
2282	setNetworkRoutes sets the network routes for the device .
2283	Path returns the path to the container .
2284	maasInterfaces returns the interfaces for the containerLXC .
2285	getSystemHandler returns the syslog handler
2286	findNvidiaMinor returns the minor version of the device .
2287	GetLogger returns a logger for syslog .
2288	SetLogger sets the new logger .
2289	WaitRecord returns a new log record .
2290	AddContext adds a context to the logger .
2291	NewDottedVersion returns a new DottedVersion .
2292	Parse parses a string into a DottedVersion .
2293	String returns a string representation of the Dotted version .
2294	Compare compares two Dotted versions .
2295	projectDefaultProfile creates a default profile
2296	projectChange updates a project
2297	projectIsEmpty returns true if project is empty
2298	GetCertificateFingerprints returns a list of fingerprint fingerprints .
2299	GetCertificates returns a list of certificates
2300	GetCertificate returns the certificate associated with the given fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate
2303	DeleteCertificate deletes a certificate
2304	containerMetadataGetTemplates retrieves the template metadata for a container .
2305	ContainerMetadataTemplatesPostForm creates a new container metadata .
2306	containerMetadataTemplatesDelete deletes a container metadata .
2307	getContainerTemplatePath returns the path to the container template path .
2308	Error returns the error message .
2309	Error returns the error message .
2310	add adds a new error to the list
2311	UpdateSchema updates the schema
2312	doProfileUpdateCluster updates a profile
2313	doProfileUpdateContainer updates the container with the given name .
2314	getProfileContainersInfo returns a list of container containers .
2315	Get network names
2316	GetNetworks returns a list of network networks
2317	GetNetwork returns a network
2318	GetNetworkLeases returns a list of network leases
2319	GetNetworkState returns network state
2320	CreateNetwork creates a network
2321	UpdateNetwork updates a network .
2322	Renames a network
2323	Open opens a database .
2324	URLEn encode a path to a URL
2325	IsUnixSocket returns true if path is a Unix socket .
2326	HostPath returns the path to the host .
2327	FileMove mocks base method
2328	DirCopy is an autogenerated copy function .
2329	StringMapHasStringKey returns true if the map contains a string key .
2330	TextEditor creates a text editor .
2331	WriteTempFile writes a temporary file to the given directory .
2332	RenderTemplate renders a template
2333	Every returns a schedule with the given options .
2334	StoragePoolMount returns true if the storage pool is mounted .
2335	Dump dumps all tables in the database .
2336	dumpTable dumps a table into a string .
2337	ProjectHasProfiles returns true if the given name exists .
2338	ProjectNames returns the names of the cluster names .
2339	ProjectMap returns a map of project IDs .
2340	ProjectHasImages returns true if the project has images .
2341	ProjectUpdate updates a project .
2342	GetCluster returns the cluster
2343	UpdateCluster updates the cluster
2344	GetClusterMemberNames returns list of cluster members
2345	GetClusterMembers returns the list of cluster members
2346	GetClusterMember returns a cluster member
2347	RenameClusterMember updates a cluster member .
2348	Disconnect closes the event listener .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the certificate exists .
2351	GenerateClientCertificate generates a new client certificate
2352	LoadModule loads a module
2353	Parse parses a package .
2354	PprofAddress returns the pprof address .
2355	PprofUpdateAddress updates the pprof address
2356	NewMethod returns a new method
2357	Generate generates a new method .
2358	fillSliceReferenceField fills the reference field for the given slice .
2359	StoragePoolID returns the storage pool ID for the given name .
2360	StoragePoolIDsNotPending returns a map of storage pool IDs .
2361	StoragePoolNodeJoin adds a node to the cluster .
2362	StoragePoolNodeJoin adds a node to the cluster
2363	StoragePoolConfigAdd adds a configuration to the cluster .
2364	StoragePoolCreatePending creates a new storage pool .
2365	StoragePoolCreated creates a new storage pool .
2366	StoragePoolErrored sets the state of the storage pool .
2367	StoragePoolNodeConfigs returns the configs for the given pool .
2368	StoragePoolsGetDrivers returns the list of driver pools .
2369	StoragePoolGetID returns the ID of the given pool
2370	StoragePoolGet returns a storage pool .
2371	storagePoolNodes returns the list of nodes in the cluster .
2372	StoragePoolConfigGet returns the configuration for the given pool .
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds a new node to the database .
2375	StoragePoolUpdate updates a storage pool .
2376	StoragePoolConfigClear clears a storage pool .
2377	Delete a storage pool
2378	StoragePoolVolumes returns the names of the storage pool volumes
2379	StoragePoolVolumes returns the storage volumes for a given pool .
2380	StoragePoolNodeVolumes returns a list of storage volumes .
2381	storagePoolVolumesGet returns a list of storage volumes
2382	StoragePoolVolumesGetType returns the name of the storage pool
2383	StoragePoolSnapshotsGetTypes returns the list of snapshots for a given volume .
2384	StoragePoolNodeVolumes returns a list of StoragePool volumes
2385	StoragePoolVolumeGet returns the storage volume for a given node .
2386	StoragePoolNodeVolumeGetType returns the storage volume for a given volume .
2387	StoragePoolNodeVolumeGetType returns the storage volume for a given project .
2388	StoragePoolUpdate updates a storage pool .
2389	StoragePoolDelete deletes a storage pool .
2390	StoragePoolVolumeRename creates a new storage pool .
2391	storagePoolReplicateIfCephReplicateIfCeph ensures that the given volume is in the given pool .
2392	StoragePoolCreate creates a new storage pool .
2393	StoragePoolVolumeGetID returns the id of the storage pool
2394	StoragePoolNodeVolumeGetTypeID returns the storage type of a storage pool
2395	StoragePoolVolumeTypeToName returns the name of the storage pool .
2396	DevicesAdd adds devices to the database .
2397	Devices returns a list of devices .
2398	Patches returns a list of all the patches in the database .
2399	PatchesMarkApplied adds a patch to the database .
2400	entityType returns the type of an entity .
2401	entityPost returns a string representation of the given entity .
2402	stmtCodeVarVar returns the code for the given entity .
2403	Destructs a slice of struct fields .
2404	CompareConfigs compares two configs
2405	CopyConfig returns a copy of the config
2406	NewNotifier creates a new Notifier .
2407	Events returns a function that updates events from the given endpoint .
2408	eventsConnect returns a list of events for the given address .
2409	StoragePoolInit initializes storage .
2410	getAAProfileContent returns the content of the ACI profile
2411	AALoadProfile implements the Apparmor interface .
2412	AADroy removes the apparmor from the container .
2413	AParseProfile runs the apparmor profile .
2414	getSystemHandler returns a handler for syslog
2415	NotifyUpgradeCompleted is used to notify an upgrade .
2416	KeepUpdated returns a function that takes a state of the state and schedule it .
2417	maybeUpdate updates the state of the node .
2418	NewServer creates a new server .
2419	StartStatusCheck starts the server .
2420	Sync projects
2421	AddProject adds a project to the server .
2422	DeleteProject deletes a project
2423	RenameProject renames a project .
2424	IsAdmin returns true if the user is admin .
2425	HasPermission returns true if the user has permission .
2426	RsyncSend sends rsync command to the given path .
2427	RsyncSetupSetup is used to send a rsync command .
2428	tlsClientConfig initializes TLS client configuration .
2429	tlsCheckCert checks if TLS certificate is valid .
2430	Internal method to create a new cluster container
2431	containerPostCreateContainerMountPoint creates a container mount point for a container .
2432	Contains returns true if the device contains a given device .
2433	Update updates the list of devices
2434	DeviceNames returns the names of the devices .
2435	Infof logs a message .
2436	Debugf logs a message with the given arguments .
2437	Warnf logs a message with the given arguments .
2438	Errorf logs a formatted error message .
2439	Critf logs a message with the given arguments .
2440	eventForward forwards the event to the given event
2441	StorageProgressReader returns an io . Reader for the given operation .
2442	StorageProgressWriter returns an io . Writer for the given operation .
2443	GetLSBRelease returns a map of OSB release .
2444	Reset resets the package .
2445	Append appends a snippet to a file .
2446	ContainerToArgs converts a Container to a ContainerArgs
2447	ContainerNames returns a list of containers for a project .
2448	ContainerNodeAddress returns the address of a container .
2449	ContainersListByNodeAddress returns the list of containers for the given project .
2450	ContainerListExpanded returns a list of containers that have been expanded .
2451	ContainersByNodeName returns a map of containers by project name .
2452	SnapshotIDsAndNames returns a map of snapshot IDs .
2453	ContainerNodeList returns a list of containers .
2454	ContainerNodeProjectList returns a list of containers in the cluster .
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the project project name and name .
2457	ContainerConfigClear clears the container config .
2458	ContainerConfigGet returns the value of a container config .
2459	ContainerConfigRemove removes a container config .
2460	ContainerStateful sets the stateful for a container .
2461	ContainerProfilesInsert inserts a list of profiles .
2462	ContainerProfiles returns a list of container profiles .
2463	ContainerConfig returns the configuration for a container .
2464	ContainerSetState sets the state of a container .
2465	ContainerUpdate updates a container .
2466	ContainerLastUse updates the last time in the cluster .
2467	ContainerGetSnapshots returns a list of container snapshots .
2468	ContainerGetSnapshotsFull returns a list of container snapshots .
2469	ContainerNextSnapshot returns the number of containers in the cluster .
2470	ContainerPool returns the name of the storage pool .
2471	ContainerGetBackup returns a container backup .
2472	ContainerGetBackups returns a list of containers for a project .
2473	ContainerBackup creates a container backup .
2474	ContainerRemove removes a container from the cluster .
2475	ContainerBackupRename renames a container .
2476	ContainerBackupsGetExpired returns a list of all containers in the database .
2477	DefaultOS returns a new OS .
2478	Init initializes the system .
2479	GetWsocket returns a websocket connection
2480	Refresh refreshes the operation .
2481	CancelTarget cancels the target operation .
2482	GetTarget returns the target operation .
2483	upup initializes the endpoint
2484	Down closes the endpoint .
2485	serveHTTP is used to serve an HTTP server .
2486	closeListener closes the listener
2487	Activate activated listeners
2488	CandidServer returns the candid server
2489	RACServer returns the RBAC server configuration .
2490	AutoUpdateInterval returns the auto update interval .
2491	MAASController returns the MAAS controller
2492	OfflineThreshold returns the offline threshold .
2493	ConfigGetString returns the value of the given key .
2494	ConfigGetBool returns the value of the given key .
2495	ConfigGetInt64 returns the value of the given key .
2496	ClusterAddress returns the address of the cluster .
2497	Debug logs a message .
2498	RestServer creates a new http server
2499	projectParam returns the project s project name .
2500	queryParam returns the value of a query parameter
2501	newDb returns a new cobra command
2502	Description returns the description of the operation type .
2503	Permission returns the permission for the given operation type .
2504	OperationUUIDs returns all operations in the cluster .
2505	OperationNodes returns the list of nodes for the given project .
2506	OperationByUUID returns the operation by UUID .
2507	OperationAdd adds an operation to the cluster .
2508	OperationRemove removes an operation from the cluster .
2509	returns a list of all operations in the cluster .
2510	expireLogsTask returns a function that will expire logs .
2511	absPath returns the absolute path of the given path .
2512	Keys returns a slice of keys .
2513	Defaults returns the default values .
2514	MustGetKey returns the key for the given name .
2515	assertKeyType checks if the given key exists in the schema .
2516	validate validates a key
2517	Get storage pool volumes
2518	GetStoragePool volume
2519	CreateStoragePool volume
2520	CreateStoragePoolSnapshot creates a new storage pool .
2521	GetStoragePoolVolume snapshots
2522	GetStoragePoolVolumeSnapshot returns a storage volume snapshot snapshot .
2523	UpdateStoragePoolVolumeSnapshot updates the storage pool .
2524	MigrateStoragePool volume
2525	MoveStoragePoolVolume mocks base method
2526	UpdateStoragePool volume
2527	DeleteStoragePool volume
2528	RenameStoragePool volume
2529	doStoragePoolCreateInternal creates a new storage pool .
2530	containerGetParentAndSnapshotName returns the parent name of the container .
2531	containerLoadFromAllProjects loads all the containers from all projects .
2532	containerLoadNodeAll loads all containers in the state .
2533	containerLoadNodeProjectAll returns all containers in the given project .
2534	heartbeatNode heartbeat node
2535	dotPrefixMatch returns true if the string is a dot prefix .
2536	ContainerMount mocks base method
2537	ContainerStorageReady returns true if the container is ready .
2538	AskChoice takes a list of choices and returns the answer .
2539	AskInt is a helper function to ask for a question .
2540	AskString is a helper function to ask for a string
2541	AskPassword prompts the user with the given question .
2542	AskPasswordOnce returns the password for the given question .
2543	Ask a question
2544	read answer from stdin
2545	profilePost posts a profile
2546	profileDelete deletes a profile
2547	IsRootDiskDevice returns true if the device is a root disk device .
2548	GetRootDiskDevice returns the root disk for the given devices .
2549	ForwardedResponse creates a new response with the given request .
2550	ForwardedResponseIfTarget is a helper function to send a request to the server .
2551	ForwardedResponseIfContainerIsRemote is a helper function to send a request to the server .
2552	ForwardedOperationResponse returns a response for a given operation .
2553	Done implements the ProgressRenderer interface .
2554	Update updates the progress bar .
2555	Warn logs a progress message .
2556	UpdateProgress updates the progress bar .
2557	UpdateOp updates the progress bar .
2558	updateFromV6 updates the storage pool .
2559	localCreateListener creates a listener for a given path .
2560	NewStmt creates a new stmt
2561	Generate generates a new statement .
2562	register registers the SQL code for the statement .
2563	httpsLXD creates a new ServerLXD server .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address for the given id .
2566	RaftNodeFirst sets the first node at the given address .
2567	RaftNodeAdd adds an address to the node .
2568	R RaftNodeDelete deletes a node .
2569	RaftNodesReplace replaces the given RaftNode .
2570	initCGroup initializes CGroup
2571	sqliteDirectAccess runs sqlite . sqlite . sqlite
2572	ContainerGet returns a container by name .
2573	ContainerID returns the id of a container .
2574	ContainerExists returns true if the container exists .
2575	ContainsFields returns true if all fields contain the given fields .
2576	FieldByName returns the field by name .
2577	FieldColumnName returns the column name for the given name .
2578	FilterFieldByName returns the field by name .
2579	ColumnFields returns the list of field names that are excluded .
2580	ScararFields returns a slice of field names .
2581	RefFields returns a slice of field names .
2582	Column returns the column name .
2583	ZeroValue returns the field s value .
2584	FieldColumns returns a string representation of fields .
2585	FieldArgs returns a string representation of field names .
2586	FieldParams returns a string representation of field params
2587	FieldCriteria returns a string representing the field criteria .
2588	initDataClusterApply applies the given configuration to the cluster .
2589	JsonFormatExpr returns a JSON representation of JSON .
2590	formatLogfmtValue formats a logfmt value .
2591	ResolveTarget returns the address of the given target .
2592	Write writes p to the writer .
2593	updateNodeVersion updates the node version .
2594	selectNodesVersions returns the list of nodes in the database .
2595	GetArchitectures returns a list of architectures .
2596	RuntimeLiblxcVersionAtast returns true if the runtime version is a runtime version of runtime .
2597	GetExecPath returns the path to the executable .
2598	Connect connects to a container
2599	ConnectIfContainerIsRemote connects to a container .
2600	ConnectIfVolumeIsRemote connects to a container .
2601	SetupTrust sets the certificate for the given certificate .
2602	GetStoragePools returns the list of storage pools
2603	GetStoragePool returns a storage pool
2604	CreateStoragePool creates a new storage pool .
2605	UpdateStoragePool updates the storage pool
2606	DeleteStoragePool deletes a storage pool
2607	GetStoragePoolResources returns the resources for the given name .
2608	initDirs initializes the directories .
2609	Config returns the configuration of the node .
2610	UpdateConfig updates the configuration with the given values .
2611	Config returns the configuration of the cluster .
2612	UpdateConfig updates the cluster configuration .
2613	storagePoolClusterConfigForEtag returns the config for the given config .
2614	GetEvents retrieves events from the server .
2615	LogfmtFormat returns a format for logging .
2616	StorageVolumeAddresses returns the list of nodes for a given pool .
2617	StorageVolumeNodeGet returns the name of a storage volume
2618	StorageVolumeConfigGet returns the configuration for the given volumeID .
2619	StorageVolumeDescriptionGet returns the description of a volume .
2620	StorageVolumeIsAvailable returns true if the given pool is available .
2621	StorageVolumeDescriptionUpdate updates the description of a volume .
2622	StorageVolumeConfigAdd creates a new storage volume config .
2623	StorageVolumeConfigClear clears the storage volume config .
2624	storageVolumeIDsGet returns a slice of storage volumes .
2625	StorageVolumeCleanupImages cleans up the storage pool images .
2626	StorageVolumeMoveToLVMPoolNameKeyKeyKeyKey is used to update the storage volume .
2627	Lprintf implements the Buffer interface .
2628	code returns the source code .
2629	Pretty prints a JSON representation of an object .
2630	NetworkPublicKey returns the public key .
2631	NetworkPrivateKey returns the private key .
2632	NetworkCert returns the network certificate .
2633	NetworkAddress returns the address of the endpoint .
2634	NetworkUpdateAddress updates the network address .
2635	NetworkUpdateCert updates the given certificate .
2636	networkCreateListener creates a network listener for a given address .
2637	Accept accepts a connection and returns a net . Conn .
2638	Config sets the configuration for the server .
2639	IsOffline returns true if the node is offline .
2640	NodeByAddress returns a node by address .
2641	NodePendingByAddress returns a node with the given address .
2642	NodeByName retrieves a node by name .
2643	NodeName returns the name of the node
2644	NodeAddress returns the node address of the cluster .
2645	NodeIsdated returns true if node is outdated .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename sets the name of a node .
2648	Node returns a list of nodes that are pending .
2649	NodeAdd adds a node to the cluster .
2650	NodePending sets the pending node as pending .
2651	NodeUpdate is used to update a node
2652	NodeRemove removes a node from the cluster .
2653	NodeHeartbeat sends a heartbeat to the cluster .
2654	NodeIsEmpty returns whether the node is empty .
2655	NodeClear removes a node from the database .
2656	NodeOfflineThreshold returns the threshold threshold .
2657	NodeUpdateVersion updates the version of a node .
2658	Transaction executes a transaction .
2659	rollback rolls back a transaction
2660	ProfileURIs returns the profile uri for the given filter .
2661	ProfileGet returns a profile by name .
2662	ProfileExists returns true if a profile exists .
2663	ProfileConfigRef returns a map of profile config references .
2664	ProfileUsedByRef returns the list of profiles used by the given filter .
2665	ProfileCreate creates a new profile .
2666	ProfileRename removes a profile from a project .
2667	ProfileDelete deletes a profile
2668	ServerTLSConfig creates a new TLS configuration .
2669	NetworkInterfaceAddress returns the network interface address .
2670	IsAddressCovered returns true if the two addresses are covered .
2671	SelectObjects selects all objects from the given statement .
2672	DeleteObject deletes an object .
2673	loop runs the scheduler .
2674	IsTerminal returns true if the terminal is a terminal .
2675	socketUnixListen listens for a socket to a socket .
2676	socketUnixRemoveStale removes stale files from socket
2677	socketUnixSetPermissions sets the permissions for the given path .
2678	socketUnixSocketSetOwnership sets the ownership of the given path .
2679	cephOSPDODPool returns true if the cluster name exists .
2680	cephOSDPPoolDestroy destroys a cluster
2681	cephRBDVolumeExists returns true if a volume exists .
2682	cephRDSNDSapshotProtect is used to protect a cluster .
2683	cephRBDClone creates a copy of a cluster
2684	cephDBDSNDSSnapshotList returns a list of snapshots for a given volume .
2685	cephRBDVolumeMark deletes a new volume .
2686	cephRBDVolumeUnmark deletes a volume
2687	cephRBDVolumeRename renames a cluster volume
2688	cephRBDVolumeSnapshotRename renames a volume snapshot .
2689	cephRBDSSnapshotDelete deletes a volume from the cluster .
2690	cephRBDVolumeCopy copies a new volume from a cluster
2691	cephRBDVolumeList returns a list of snapshots for a given volume
2692	getRBDSize returns the size of the volume
2693	getRBDFDFFilesystem returns the path of the volume
2694	copyWithoutSnapshotFull copies the contents of a container to the target container .
2695	copyWithoutSnapshotSparse creates a copy of the given container to the target container .
2696	GetConfigCmd returns a cobra command
2697	SetConfigCmd creates a new config command
2698	NewSharder returns a new Sharder .
2699	NewRouter creates a new router .
2700	 renew user credentials
2701	NewLocalClient creates a new local client .
2702	AddSpanToAnyExisting adds a span to the context .
2703	InstallJaegerTracerFromEnv installs JaegerTracer from environment variables .
2704	UnaryClientInterceptor returns a new UnaryClientInterceptor
2705	StreamClientInterceptor returns a StreamClientInterceptor
2706	UnaryServerInterceptor returns a new UnaryServerInterceptor
2707	StreamServerInterceptor returns a StreamServerInterceptor
2708	CloseAndReportTraces closes the global tracing .
2709	newWriter creates a new Writer .
2710	For mocks base method
2711	Log implements the Logger interface .
2712	Format formats a logrus entry .
2713	NewGRPCLogWriter creates a new GRPCLogWriter .
2714	Read reads the config file .
2715	Write writes config to disk
2716	Read implements io . Reader interface .
2717	Write implements io . Writer interface .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer starts a git hook
2720	newLoggingPipe creates a new logger .
2721	Read implements io . Reader interface .
2722	Write writes a byte to the log .
2723	Accept accepts a socket and returns an error .
2724	Close closes the listener .
2725	errorf creates a new error for the given error code .
2726	InitWithKube creates a new ServiceEnv .
2727	GetEtcdClient returns the EtcdClient
2728	GetKubeClient returns the kube client
2729	NewHasher returns a new Hasher .
2730	HashJob returns the hash of the given job ID .
2731	HashPipeline returns the hash of a pipeline name .
2732	Status returns a list of worker status
2733	Cancel cancels a job
2734	Conns returns a grpc client connection .
2735	Clients returns a list of client clients .
2736	NewClient returns a new client .
2737	RunFixedArgs returns a function that runs the given number of arguments .
2738	RunBoundedArgs returns a function that runs the given arguments .
2739	Run returns a function that runs the given command .
2740	ErrorAndExit prints an error with the given format .
2741	ParseCommit parses a commit .
2742	ParseBranch parses a branch .
2743	ParseFile parses a file .
2744	Set sets the value of the RepeatedStringArg argument .
2745	SetDocsUsage sets the documentation for the command .
2746	makeCronCommits creates cron commits for a given job .
2747	Writer implements io . Writer interface .
2748	Reader implements the io . Reader interface .
2749	Delete deletes the given object .
2750	Walk walks the given prefix and returns an error .
2751	Exists returns true if the object exists .
2752	GetBlock returns a block with the given hash .
2753	Health implements the HealthServer interface .
2754	split splits a path into a base directory .
2755	ValidatePath validates a path .
2756	MatchDatum returns true if the filter matches the given filter .
2757	NewCacheServer creates a new cache server .
2758	authorizePipelineOp is used to authorize a pipeline operation .
2759	sudo is a helper function that is used to authenticate the user
2760	setPipelineDefaults sets the default values for the pipeline
2761	Increment GC generation .
2762	NewDebugServer creates a new debug server .
2763	Health implements the API interface .
2764	newObjBlockAPIServer creates a new instance of objBlockAPI .
2765	watchGCGC is used to watch for GC blocks .
2766	splitKey splits the key into a string .
2767	NewWriter returns a new Writer .
2768	Write implements the Writer interface .
2769	PrintRepoHeader writes the repo header to w .
2770	PrintRepoInfo prints information about a repository .
2771	PrintDetailedRepoInfo prints detailed information about the repository .
2772	PrintBranch prints a branch info .
2773	PrintCommitInfo prints information about a commit .
2774	PrintDetailedCommitInfo prints detailed information about a detailed commit .
2775	PrintFileInfo prints a file info .
2776	PrintDetailedFileInfo prints detailed information about a file .
2777	Add adds a string to a string .
2778	RetryNotify returns an error if the operation fails .
2779	Get implements the Merge interface .
2780	Delete deletes the cache
2781	PrintJobInfo prints information about a job .
2782	PrintPipelineInfo prints the pipeline information .
2783	PrintWorkerStatus prints the status of a worker .
2784	PrintDetailedJobInfo prints detailed information about a detailed job .
2785	PrintDetailedPipelineInfo prints detailed information about the pipeline .
2786	PrintDatumInfo prints information about a datum .
2787	PrintDetailedDatumInfo prints detailed information about detailed data .
2788	PrintFile prints a file .
2789	ShorthandInput returns a string representation of the input .
2790	Retrieve retrieves the credentials from Vault .
2791	IsExpired returns true if the vault is expired .
2792	NewBranch creates a new branch .
2793	NewCommit creates a new commit .
2794	NewCommitProvenance returns a new CommitProvenance .
2795	NewFile creates a new file .
2796	CreateRepo creates a new repo
2797	InspectRepo returns information about a repository .
2798	ListRepo returns the list of repositories .
2799	DeleteRepo deletes a repository
2800	BuildCommit builds a commit .
2801	StartCommitParent starts a new commit .
2802	FinishCommit implements the PFS API .
2803	InspectCommit returns information about a commit .
2804	BlockCommit returns information about a commit .
2805	ListCommit returns a list of commits in a repository .
2806	ListCommitF returns a list of commits from a repository .
2807	ListCommitByRepo returns a list of commits for a repository .
2808	CreateBranch creates a new branch .
2809	InspectBranch inspects a branch .
2810	ListBranch returns a list of branch info .
2811	SetBranch updates a branch .
2812	DeleteBranch deletes a branch .
2813	DeleteCommit deletes a commit .
2814	FlushCommit implements the PFS API .
2815	FlushCommitF flushes a commit .
2816	FlushCommitAll flushes all commits to the given commits .
2817	SubscribeCommit is used to subscribe a commit
2818	SubscribeCommitF is used to subscribe a commit .
2819	PutObjectAsync implements the PutObjectAsync interface .
2820	PutObject implements io . Reader interface .
2821	PutObjectSplit implements io . PutObjectSplit interface .
2822	GetObject implements the Client interface .
2823	GetObjectReader returns an io . Reader for the given hash .
2824	GetObjects returns a list of objects for a given hash .
2825	TagObject adds a tag to the object
2826	ListObject lists all objects in the object .
2827	InspectObject returns the object info for the given hash .
2828	GetTag implements the GetTag interface .
2829	GetTagReader returns a reader for a given tag .
2830	ListTag iterates over all objects in the object
2831	Compact is part of the object .
2832	NewPutFileClient returns a PutFileClient
2833	PutFileOverwrite writes a file to a file .
2834	Close closes the client .
2835	CopyFile copies a file into a PFS .
2836	GetFile implements the API . GetFile interface .
2837	GetFileReader returns a reader for a given commit .
2838	GetFileReadSeeker returns an io . ReadSeeker .
2839	InspectFile inspects a file .
2840	ListFile lists all files in a repository .
2841	ListFileHistory returns a list of files for a given commit .
2842	ListFileF executes a list of files in a repository .
2843	Walk walks a file and returns an error .
2844	DeleteFile deletes a file .
2845	Write implements the WriteCloser interface .
2846	Close implements the WriteCloser interface .
2847	PrettyPrintVersionNoOutput returns a human - readable version string .
2848	recursiveBlockQuoteExamples recursively recursively recursively
2849	errMissingField returns a new error response with the given field .
2850	validateFields validates the fields of the request .
2851	putConfig writes a config to the storage .
2852	getConfig retrieves the config from storage .
2853	Serve takes a list of servers and returns an error .
2854	NewPuller creates a new Puller .
2855	PullTree pulls the contents of the given tree from the given root .
2856	Push pushes a commit to the repository .
2857	PushObj pushes an object to a repository
2858	PushFile pushes a file to a file .
2859	Dump writes the debug message to the given io . Writer .
2860	Profile implements the Debug interface .
2861	Binary implements the Debug interface .
2862	RegisterCacheStats registers the cache stats .
2863	wait waits for the number of items to be written to the counter .
2864	RunWorkload runs a worker on the given client
2865	createRepo creates a new repo
2866	vanceCommit advances the given commit .
2867	RandString returns a random string with n random letters .
2868	NewReader returns a new io . Reader .
2869	iterDir iterates over the given path and returns an error .
2870	FSSize returns the size of the subtree .
2871	Diff implements the dbHash interface .
2872	Serialize serializes the DBHashTree .
2873	Deserialize deserializes a DBHashTree .
2874	Copy copies the hash tree .
2875	Destroy destroys the database hash .
2876	PutFileOverwrite overwrites the contents of a file .
2877	PutDirHeaderFooter writes the contents of a directory .
2878	PutFileHeaderFooter writes a file header to disk .
2879	deleteDir deletes a directory .
2880	NewReader returns a new Reader .
2881	Read implements the Reader interface .
2882	NewWriter returns a new Writer .
2883	Write implements the Writer interface .
2884	Copy implements io . Writer
2885	Index returns the index of the index .
2886	GetRangeFromIndex reads a range from an index .
2887	NewFilter returns a filter that matches the given number of trees .
2888	PathToTree converts a path to a tree .
2889	Merge merges multiple nodes into w .
2890	Hash returns the hash of the hash tree .
2891	IsGlob returns true if pattern is a glob
2892	GlobLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject returns the hash tree for a given PFS object .
2894	GetHashTreeTag returns a HashTree for the given PFS .
2895	PutHashTree puts a HashTree into a PFS object
2896	NewChildCursor returns a new ChildCursor .
2897	Next returns the next child .
2898	NewOrdered creates a new OrderedNode .
2899	MkdirAll mocks base method
2900	PutDir implements the Ordered interface .
2901	Serialize implements io . Writer .
2902	NewUnordered returns a new Unordered node .
2903	Ordered returns an ordered ordered list of sorted files .
2904	revoke user credentials
2905	NewAPIServer creates a new APIServer .
2906	String returns a string representation of the version .
2907	getPipelineInfo retrieves the pipeline info from the environment
2908	removeStr removes a string from the slice
2909	PublicCertToPEM converts a TLS certificate to PEM .
2910	GenerateSelfSignedCert generates a new TLS certificate .
2911	ActivateCmd returns a cobra command .
2912	DeactivateCmd returns a cobra command .
2913	LoginCmd returns a cobra command .
2914	LogoutCmd returns a cobra command
2915	WhoamiCmd returns a cobra command
2916	CheckCmd returns a new cobra command .
2917	GetCmd returns a command
2918	SetScopeCmd creates a new command line command
2919	ListAdminsCmd returns a cobra command .
2920	ModifyAdminsCmd returns a cobra command .
2921	GetAuthTokenCmd returns a command that can be used to get an auth token .
2922	UseAuthTokenCmd returns a cobra command .
2923	Cmds returns a list of commands .
2924	ParseScope returns the scope of the given string .
2925	IsErrNotActivated returns true if an error is not activated .
2926	IsErrPartiallyActivated returns true if an error occurred .
2927	IsErrNotSignedIn returns true if the error is not signed .
2928	IsErrBadToken returns true if err is a valid error .
2929	IsErrNotAuthorized returns true if the error occurred .
2930	IsErrInvalidPrincipal returns true if an error is invalid .
2931	IsErrTooShortTTL returns true if the error occurred .
2932	NewDatumFactory creates a new DatumFactory .
2933	NewCollection creates a new collection .
2934	Path returns the path for the given key .
2935	getIndexPath returns the path for the given index .
2936	getMultiIndexPaths returns the index paths for the given index .
2937	Upsert adds a value to the collection .
2938	get retrieves a value from the collection
2939	List implements the Collection interface .
2940	Watch implements the Watch interface .
2941	WatchByIndex returns a watch for the given index .
2942	WatchOne returns a watch for the given key .
2943	WatchOneF watches the given key .
2944	Get retrieves a file from the cache .
2945	Keys returns all keys in the cache .
2946	Clear clears the cache .
2947	NewHTTPServer creates a new http server .
2948	NewDeployServer creates a new deploy server .
2949	Export exports the assets to the given io . Writer .
2950	Import imports an image .
2951	DatumTagPrefixPrefix returns the prefix of the datum tag
2952	NewPFSInput returns a new PFS input .
2953	NewPFSInputOpts returns a new PFS input .
2954	NewJobInput creates a new Pps job .
2955	NewPipelineInput creates a new pps pipeline .
2956	CreateJob creates a new job .
2957	ListJob lists all jobs in the pipeline
2958	ListJobF lists all jobs in the pipeline .
2959	FlushJob flushes the given commits to the given commits .
2960	FlushJobAll flushes all of the given commits .
2961	DeleteJob deletes a job .
2962	StopJob stops a job .
2963	RestartDatum mocks base method
2964	ListDatum returns a list of Datatum objects for a given job .
2965	ListDatumFF executes a list of DatumFunc and returns the result .
2966	InspectDatum inspects a datum
2967	Next returns true if the stream is next .
2968	InspectPipeline inspects a pipeline .
2969	ListPipeline returns a list of pipeline information .
2970	DeletePipeline deletes a pipeline .
2971	StartPipeline starts a new pipeline
2972	StopPipeline stops a pipeline .
2973	ReversePipeline runs the given pipeline .
2974	Create a new pipeline service
2975	GetDatumTotalTime returns the total time of the process stats .
2976	Mount mocks base method
2977	NewBufPool returns a new BufPool .
2978	StorageRootFromEnv returns the storage root of the environment
2979	BlockPathFromEnv returns the path for the given block .
2980	NewGoogleClient creates a new Google Client .
2981	NewGoogleClientFromSecret creates a Google Cloud StorageClient from a secret file .
2982	NewGoogleClientFromEnv creates a new Google Cloud Client .
2983	NewMicrosoftClientFromSecret creates a new Microsoft Client from the given container .
2984	NewMicrosoftClientFromEnv creates a new Microsoft client from an environment variable .
2985	NewMinioClientFromSecret creates a new MinioClient from the given bucket .
2986	NewMinioClientFromEnv creates a new client from environment variables .
2987	NewAmazonClientFromSecret creates a new Amazon CredentialsClient from a secret file .
2988	NewAmazonClientFromEnv returns a new Amazon CloudCredentials instance
2989	NewClientFromURLAndSecret creates a new client from the given URL .
2990	ParseURL parses a URL string .
2991	NewClientFromEnv creates a new client from environment variables .
2992	NewExponentialBackoffConfig returns a new BackoffConfig .
2993	Close closes the underlying reader .
2994	Close closes the backend .
2995	IsRetryable returns true if the client is retryable .
2996	RunStdin runs the given stdin .
2997	RunIODirPath implements io . Executor
2998	NewAuthServer creates a new auth server .
2999	expiredClusterAdminAdminCheck checks if the user is expired .
3000	getOneTime returns the password for the given username .
3001	hashToken returns a hash of the given token
3002	getAuthToken returns the auth token from the context
3003	canonicalizeSubjects takes a list of subjects and returns a list of all subjects .
3004	Matches checks if the given string matches the expected match .
3005	OneOfMatches checks if the given string matches the expected match .
3006	Equal tests if the expected value is equal .
3007	NotEqual tests if the expected value is equal .
3008	oneOfEquals returns true if the element is equal to the given slice .
3009	NoneEquals asserts that two strings are equal .
3010	NoError reports whether the given error is not nil .
3011	NoErrorWithinT returns an error if the given function fails .
3012	NoErrorWithinTRetry is a helper function for testing .
3013	YesError reports whether the given error is ok .
3014	NotNil tests if the given object is not nil .
3015	Null asserts that the given object is nil .
3016	False reports whether the given boolean value is true or not .
3017	NewSTM creates a new STM .
3018	NewDryRunStm creates a new STrySTM .
3019	newSTMRepeatable creates a new STM repeatable .
3020	newSTMerializable creates a new STM serializable .
3021	newSTMReadCommitted returns a new STM .
3022	commit commits the transaction .
3023	Pipelines returns a collection of Pipelines
3024	Jobs returns a collection of jobs
3025	NewTicker returns a new Ticker .
3026	nodeToMap converts a node to a map
3027	ServiceAccount returns a ServiceAccount .
3028	ClusterRole returns a ClusterRole .
3029	RoleBinding returns a RoleBinding .
3030	GetSecretEnvVars returns the environment variables for the given storage backend .
3031	PachddService returns a new instance of Pachd service .
3032	GithhookService returns a service for a git hook .
3033	 EtcdDeployment creates a new deployment .
3034	EtcdStorageClass returns an instance of EtcdStorageClass
3035	EcdVolume creates a new persistent volume .
3036	 EtcdNodePortService returns an instance of EtcdNode
3037	 EtcdHeadlessService returns an instance of Etcd
3038	 EtcdStatefulSet creates a new instance of EtcdState
3039	DashDeployment returns a dash deployment .
3040	DashService returns a dash service .
3041	WriteSecret encodes a secret .
3042	GoogleSecret returns a map of secret credentials .
3043	WriteDashboardAssets encodes the Dashboard assets .
3044	WriteLocalAssets writes local assets to local storage .
3045	WriteCustomAssets writes custom assets to disk .
3046	WriteAmazonAssets encodes an Amazon S3 asset .
3047	WriteGoogleAssets writes Google Assets to Google Storage .
3048	WriteMicrosoftAssets writes the Microsoft asset to the given container .
3049	Images returns a list of docker image images .
3050	AddRegistry adds the image name to the registry
3051	withCanonicalRandomizationFactor returns a new instance of the ExponentialBackoffFactor .
3052	Reset implements the ExponentialBack interface .
3053	Increment the current interval .
3054	NewBlockAPIServer creates a new BlockAPI server .
3055	LocalStorage returns a local storage client .
3056	deleteJob deletes a job
3057	writeXML writes the response to w .
3058	cleanup1HashtreePath cleans up a hashtree path
3059	NewFromAddress creates a new APIClient .
3060	getUserMachineMachineAddrAndOpts returns the user machine address and options .
3061	NewInCluster creates a new API client with the given options .
3062	Close closes the client .
3063	DeleteAll deletes all resources .
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams .
3065	WithCtx adds ctx to the client
3066	NewDLock creates a new Dock .
3067	DatumID returns the ID of the input data
3068	runUserErrorHandlingCode is used to run the command .
3069	HashDatum returns a hash of data for a pipeline .
3070	HashDatum15 returns a hash of the data for the given data .
3071	Status returns the status of the worker .
3072	Cancel cancels a request
3073	mergeStats merges two processes
3074	mergeChunk merges the chunk into the cache .
3075	IsCommitNotFoundErr returns true if the error occurred .
3076	IsCommitDeletedErr returns true if the error occurred .
3077	IsCommitFinishedErr returns true if the error occurred .
3078	IsRepoNotFoundErr returns true if the error occurred .
3079	IsBranchNotFoundErr returns true if the error occurred .
3080	IsFileNotFoundErr returns true if the error occurred .
3081	Version returns the version of the version
3082	validateRepoName validates a repo name .
3083	newDriver creates a new driver .
3084	inspectCommit inspects a commit .
3085	scratchCommitPrefix returns the prefix of a commit .
3086	scratchFilePrefix returns the path to the scratch file .
3087	getTreeForFile returns the hash for a file .
3088	provenanceOnInput returns true if provenance is provenance .
3089	nodeToFileInfo converts a node to a file .
3090	fileHistory is used to iterate over the given history .
3091	upsertPutFileRecords creates a new PutFileRecords .
3092	ReadRow reads a row from the database .
3093	NewReporter creates a new Reporter .
3094	ReportUserAction is used to report a user action .
3095	FinishReportAndFlushUserAction returns a function that waits for the given action to finish .
3096	Read implements the Reader interface .
3097	ActivateCmd returns a cobra command .
3098	GetStateCmd returns a cobra command .
3099	Cmds returns a list of commands for the enterprise .
3100	NewConfiguration returns a new configuration object .
3101	Repos returns a collection of repositories
3102	PutFileRecords creates a new collection of files .
3103	Commits returns a collection of commits .
3104	Branches returns a collection of branches .
3105	OpenCommits returns a collection of commit commits .
3106	NewDAG creates a new DAG .
3107	NewNode creates a new node .
3108	Sorted returns a sorted list of all the parents of this DAG .
3109	Leaves returns the list of leaf nodes .
3110	cestors returns a list of all ancestor nodes in the graph .
3111	Descendants returns a list of all descendants of the given id .
3112	Return all children of this DAG .
3113	NewPortForwarder returns a new PortForwarder instance
3114	Run starts a port forward .
3115	RunForDaemon runs the given port forwarder .
3116	RunForSAMLACS starts SAMLACS .
3117	RunForDashUI runs the dash UI .
3118	RunForDashWebSocket starts a dash web socket .
3119	RunForPFS starts a port forwarder .
3120	RunForS3Gateway runs S3Gateway .
3121	Lock locks the PID file .
3122	Close closes the port forwarder .
3123	Unmarshal unmarshals the event .
3124	UnmarshalPrev is used to unmarshal an event .
3125	MakeWatcher creates a new watcher .
3126	CheckType checks if the given template is valid .
3127	NewPool creates a new pool .
3128	Do executes a goroutine .
3129	Close closes the pool .
3130	buildImage builds a docker image
3131	pushImage pushes an image to the docker image
3132	newMinioClient creates a new minio client
3133	newMinioClientV2 creates a new minio client
3134	newMinioWriter creates a new minioWriter .
3135	Close closes the writer .
3136	 PipelineRepo returns a pfs repository
3137	RPCRPCName returns the PipelineRPC name for the pipeline .
3138	GetRequestsResourceListFromPipeline returns a ResourceList from a pipeline
3139	GetLimitsResourceListFromPipeline returns a ResourceList from a pipeline .
3140	getNumNodes returns the number of nodes in kube .
3141	GetExpectedNumWorkers returns the number of nodes that are expected to be the number of nodes .
3142	GetExpectedNumHashtrees returns the number of hashes that match the given spec .
3143	FailPipeline attempts to fail a pipeline .
3144	JobInput is a helper function to get a job input .
3145	Create PipelineReqFromInfo returns a new PipelineRequest
3146	NewPipelineManifestReader returns a new PipelineManifestReader .
3147	NextCreatePipelineRequest returns the next pipeline request .
3148	DescribeSyntaxError describes a syntax error .
3149	UpdateJobState updates a job state .
3150	New returns a new UUID
3151	Code returns the status of the error .
3152	NewHTTPError creates a new HTTPError
3153	NewStorage creates a new Storage .
3154	DeleteAll deletes all objects .
3155	Chunk returns a slice of bytes .
3156	ChunkReader implements io . Reader .
3157	NewStreamingBytesReader creates a new io . Reader .
3158	WriteToStreamBytesServer writes the given reader to the given io . Reader .
3159	WriteFromStreamBytesClient writes a stream of bytes to writer .
3160	NewSidecarAPIServer creates a new Sidecar API .
3161	NewEnterpriseServer creates a new enterprise server .
3162	Validate activation code
3163	Activate implements the ec2 interface .
3164	Deactivate deletes an endpoint
3165	lookupExtensions returns the path for the given path
3166	Start starts the command .
3167	CombinedOutput returns the output of the command .
3168	StdinPipe creates a new io . Writer .
3169	StdoutPipe returns the stdout pipe .
3170	demupEnvCase returns a list of strings that are in case insensitive .
3171	InputName returns the name of the input .
3172	SortInput is a helper function for sorting input .
3173	InputBranches returns a list of branch branches .
3174	ValidateGitCloneURL validates the given URL .
3175	containsEmpty returns true if vals are empty
3176	NewAPIServer returns a new APIServer
3177	A human readable representation of a timestamp .
3178	TimeDifference returns the difference between two times .
3179	Duration returns a human - readable string representation of a duration .
3180	InspectCluster returns information about the cluster .
3181	Extract extracts an object from the API .
3182	ExtractAll returns all operations in the API .
3183	ExtractWriter writes an object to a writer
3184	ExtractURL extracts a URL from the given URL .
3185	ExtractPipeline creates a new pipeline
3186	Restore is used to restore operations .
3187	RestoreReader implements the Client interface .
3188	Restore is used to restore objects from the server .
3189	RestoreURL is used to restore a URL
3190	IgnoreTypes returns an option that can be ignored .
3191	AppendEllipsis appends a diff to the list .
3192	IsType returns true if the given type is a type .
3193	NameOf returns the name of a function .
3194	PointerOf returns a pointer to a pointer .
3195	String returns a string representation of the edit script .
3196	Stats returns the stats for the edit script .
3197	connect connects to the given point .
3198	EquateNaNs returns an option that can be used to validate NaNs .
3199	Index returns the path at the given index .
3200	Key returns the index of the index .
3201	String returns a string representation of the diff .
3202	FormatType converts a type to a text node .
3203	formatMapKey returns a string representation of a map .
3204	formatString returns a quoted string .
3205	formatHex formats a hex string .
3206	formatPointer returns a string representation of a pointer .
3207	Visit implements the visitor interface .
3208	retrieveUnexportedField retrieves the value from v .
3209	insert inserts a field into the tree .
3210	matchPrefix returns true if the given path matches the given prefix .
3211	canonicalName returns the canonical name for the given selector .
3212	FilterPath is used to filter a path .
3213	normalizeOption normalizes an option
3214	flattenOptions recursively flatten options into dst .
3215	CanFormatDiffSlice returns true if v is valid .
3216	formatASCII formats a string .
3217	composeAdjacentEdits returns a slice of diffs .
3218	SortKeys sorts the keys in a slice .
3219	FormatDiff implements the Format interface .
3220	compileAdjacentRecords returns a slice of diffs .
3221	Diff compares two strings .
3222	statelessCompare computes the stateless diff .
3223	sanitizeValue returns the value of the given type .
3224	Check recursively checks if the path is valid .
3225	makeAddressable returns the value of v .
3226	Marshal implements the Marshaler interface .
3227	String returns a string representation of the field .
3228	Set implements Span .
3229	Inject injects the baggage map into the given carrier .
3230	Extract extracts the context from the carrier .
3231	ToLogRecord converts LogData to LogRecord .
3232	New returns a new mock instance
3233	StartSpan mocks base method
3234	RegisterInjector registers a new injector
3235	RegisterExtractor registers an extractor
3236	Inject mocks base method
3237	Extract extracts a span from the given carrier .
3238	ContextWithSpan adds a span to the context .
3239	Set sets the value for the given span .
3240	Set implements the Span interface .
3241	Set sets the boolean value for the given span .
3242	SetString sets the value for the given span .
3243	EmitString writes a string to the mock
3244	EmitLazyLogger implements the MockKeyValue interface .
3245	RunAPIChecks runs a test suite .
3246	CheckBaggageValues sets the CheckBaggageValues field s value .
3247	CheckExtract sets the checkExtract option .
3248	CheckInject sets the CheckInject option .
3249	CheckEverything is used to check if the request is allowed .
3250	UseProbe sets the probe s probe .
3251	WithBaggageItem adds a new baggage item to the context .
3252	Tags returns a map of tags .
3253	Tag mocks base method
3254	Logs returns a slice of log records .
3255	Context returns the span context .
3256	SetTag sets the tag for the given key .
3257	SetBaggageItem mocks base method
3258	BagageItem returns the baggage associated with the given key .
3259	Finish the span .
3260	FinishWithOptions implements the Span interface .
3261	String returns a string representation of the mock .
3262	LogFields logs a message with the given fields .
3263	Log fields with timestamp
3264	LogKV implements the Logger interface .
3265	LogEvent logs an event .
3266	LogEventWithPayload sends an event with payload payload
3267	SetOperationName sets the operation name .
3268	registriesDirPath returns the path to the registry .
3269	loadAndMergeConfig loads the configuration from the given directory .
3270	ParseReference returns a new image reference .
3271	NewReference creates a new image reference
3272	CheckAuth returns an error if the credentials are valid .
3273	doHTTP sends a HTTP request to the docker client
3274	detectPropertiesHelper returns an error if the docker client is detected .
3275	detectProperties is part of the docker client .
3276	Get extensions signature
3277	NewTransport returns a new http . Transport
3278	readRegistryConf reads the registry conf file .
3279	GetRegistry returns a list of registries
3280	GetInsecureRegistry returns the list of registries in the system
3281	RegistriesConfPath returns the path to the registry .
3282	NewOptionalBool returns a new OptionalBool instance
3283	changeState changes the state of the policy context
3284	Destroy destroys the policy
3285	policyIdentityLoggerLogName returns the name of the policy
3286	RequirementsForImageRef returns the requirements for the given image reference .
3287	ParseImageName parses an image name .
3288	BlobInfoFromOCI1Descriptor constructs a BlobInfo from an OCI1 .
3289	OCI1FromManifest returns OCI1 from manifest .
3290	OCI1FromComponents creates an OCI1 from the given config .
3291	newReference creates a new docker reference
3292	tagOrDigest returns the tag or nil if it doesn t exist .
3293	updateEmbeddedDockerReference updates the embedded DockerDocker .
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifestAndManifest copies the contents of the image with the given manifest .
3296	createProgressBar creates a progress bar .
3297	copyConfig copies the config from src to dest .
3298	diffIDComputedComposition computes the diff of the given layer stream .
3299	computeDiffID computes the digest of the given stream .
3300	compressGoroutine compresses gzipped g . gzip . g . gzip . g . gzip . g . g . g . gzip . g . g . g . gzip . g . g . gzip . gzip . g . gzip . g . g . g . gzip . g . gzip . g . gzip . gzip . g . gzip . gzip . g . gzip . g . gzip . g . gzip . gzip . gzip . g . gzip . g . gzip . g . gzip . gzip . g
3301	newDockerClient creates a new docker client .
3302	defaultPolicyPath returns the default policy path
3303	NewPolicyFromFile creates a new policy from a file .
3304	NewPolicyFromBytes creates a new policy from bytes .
3305	newPolicyRequirementFromJSON creates a new PolicyRequirement from JSON data .
3306	newPRSignedByKey creates a new PRSignedByKey .
3307	newPRSignedByKeyPath creates a new PRSignedByKey .
3308	NewPRSignedByKeyPath returns a new PolicyRequirement with the given key path .
3309	newPRSignedByKeyData creates a new PRSignedByKey .
3310	NewPRSignedByKeyData returns a new PolicyRequirement instance .
3311	IsValid returns true if the SbKeyType is valid .
3312	newPRSignedBaseLayer creates a new PRSignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON returns a new policy reference match .
3314	newPRMExactReference returns a new PRMExactReference instance .
3315	newPRMExactRepository creates a prmExactRepository .
3316	newImageSource creates a new storage image source .
3317	getBlobAndLayerID returns an io . Reader for the given blob .
3318	computeID computes the image ID for the given manifest .
3319	PutManifest adds a manifest to the storage .
3320	PutSignatures sets the signatures in the storage .
3321	newImage creates a new image .
3322	newImageSource creates a new image source
3323	LoadManifestDescriptor loads an image descriptor from an image reference
3324	Close closes the image .
3325	append adds a string to the list .
3326	isMultiImage returns true if the given image is a multi - image .
3327	lockPath is used to lock a path
3328	unlockPath unlocks a path
3329	view executes a function in the cache .
3330	update updates the cache
3331	UncompressedDigest returns the digest of the given digest .
3332	appendReplacementCandidates adds a list of candidates to the bucket .
3333	indexExists checks if the given reference exists .
3334	createSignature creates a signature for the given manifest .
3335	ParseReference returns a new image reference
3336	NewReference creates a new image reference
3337	getIndex returns the index of the image
3338	LoadManifestDescriptor loads a manifest descriptor from an image reference
3339	obobPath returns the path of the blob .
3340	SignDockerManifest signs a docker manifest .
3341	VerifyDockerManifestSignature verifies the signature of a DockerManifest .
3342	newOpenshiftClient returns a new OpenShiftClient
3343	doRequest implements the OpenShiftClient interface
3344	getImage retrieves an image from a stream .
3345	convertDockerImageReference converts a docker image reference to a docker image .
3346	ensureImageIsResolved ensures that the image is resolved .
3347	newImageDestination creates a new image destination .
3348	newUntrustedSignature returns a new UntrustedSignature
3349	MarshalJSON marshals the signature to a JSON string .
3350	UnmarshalJSON implements the Unmarshaler interface .
3351	verifyAndExtracts signature from an unverified signature .
3352	RewriteReference returns a reference to the endpoint .
3353	getV1Registry returns a list of registry registries
3354	getConfigPath returns the path to the registry
3355	GetRegistry returns a list of registries
3356	readRegistryConf reads the registry config file .
3357	Manifest returns the manifest s manifest .
3358	ConfigUpdate updates the image .
3359	parseImageAndDockerReference parses an image and returns a reference to a Docker image .
3360	parseDockerReferences parses docker references and returns a reference .
3361	ListNames returns the names of transports .
3362	NewReference creates a new image reference
3363	signalPath returns the path for the given index .
3364	ValidateImageName validates an image name .
3365	SplitPathAndImage splits a path and returns the path and a string .
3366	ValidateOCIPath validates the given path .
3367	ValidateScope validates a scope .
3368	BlobInfoFromSchemaDescriptor constructs a BlobInfo from a schema descriptor .
3369	Schema2FromManifest creates a Schema2 from manifest .
3370	Schema2FromComponents creates a new schema2 schema2 .
3371	SetAuthentication sets the credentials for the given registry
3372	RemoveAuthentication removes authentication from the system .
3373	RemoveAllAuthentication removes all credentials from the system
3374	readJSONFile reads a JSON - encoded json file .
3375	modifyJSON is used to modify a JSON file .
3376	findAuthentication returns the credentials for the given registry .
3377	NewDestination creates a new destination .
3378	AddRepoTags adds tags to the destination .
3379	writeLegacyLayerMetadata writes the legacy layer metadata to the destination directory .
3380	sendSymlink sends a symlink to the destination .
3381	sendBytes sends a file to the destination .
3382	sendFile sends a file to the destination .
3383	Commit closes the tar archive .
3384	imageMatches returns true if the image matches the given reference .
3385	resolveImage resolves the reference to the repository .
3386	Transport returns a TransportTransport .
3387	StringWithinTransport returns a string representation of the storage .
3388	PolicyConfigurationNamespaces returns the namespaces for the storage .
3389	GzipDecompressor returns an io . Reader .
3390	Bzip2Decompressor returns an io . Reader .
3391	XzzDecompressor returns an io . Reader .
3392	DetectCompression returns a decompressorFunc from the input stream .
3393	newImageDestination creates a new image destination .
3394	mountBlob is part of the docker image
3395	bicTransportScope returns a BICTransportScope .
3396	newBICLocationReference returns a new BICLocationReference .
3397	parseBICLocationReference parses a BICLocationReference .
3398	NewSourceFromStream creates a new source from an input stream .
3399	readTarComponent reads a tar component .
3400	ensureCachedDataIsPresent returns the cached data .
3401	loadTarManifest loads the manifest .
3402	Close closes the source .
3403	newImageDestination creates a new image destination .
3404	imageLoadGoroutine runs the image loading process .
3405	NewReference returns a new image reference for a given file .
3406	createOCIRef returns the OCI ref for the given image .
3407	createUntarTempDir creates a temp directory .
3408	destructivelyPrioritReplitCandidatesWithMaxMaxMaxMaxMaxMaxMax returns a slice of BICReplacementCandidatesCandidatesCandidatesCandidatesCandidates .
3409	newImageDestination creates a new image destination .
3410	resolveExistingPathToFullyExplicitPath converts a path to a fully qualified path .
3411	newImageDestination creates a new image destination .
3412	isDirEmpty returns true if path is empty .
3413	removeDirContents removes all files from the given path .
3414	GetRepositoryTags returns the tags for the given image reference .
3415	DefaultCache returns the default blobinfo cache .
3416	UncompressedDigest returns the digest of the given digest .
3417	Close closes the image .
3418	PutManifest writes the manifest to the manifest .
3419	Commit commits the image .
3420	tarDirectory returns a copy of a directory .
3421	ParseStoreReference parses a reference from a store .
3422	chooseDigestFromManifestList returns the digest of the manifest .
3423	ChooseManifestInstanceFromManifestList returns the digest from the manifest list .
3424	manifestSchemaFromComponents constructs a manifest from the given refs .
3425	manifestDigest returns the digest of the image
3426	deleteImage deletes an image
3427	Schema1FromComponents creates a Schema1 . Schema1 . Schema1 .
3428	initialize initializes the schema1 .
3429	ToSchema2Config converts the schema to a schema2 config .
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns true if the manifest matches the expected digest .
3432	NormalizedMIMEType returns the normalized MIME type .
3433	FromBlob creates a manifest from a manifest .
3434	NewReference returns a new image reference .
3435	layerPath returns the path for the given digest .
3436	signaturePath returns the path for the given index .
3437	New creates a new pool .
3438	NewFunc creates a new pool .
3439	ProcessTimed sends a job to the pool .
3440	SetSize sets the size of the pool .
3441	GetSize returns the number of workers in the pool .
3442	TL returns the rectangle of the rectangle .
3443	BR returns the position of the rectangle .
3444	CVBox returns the cvBox .
3445	Points returns a slice of points .
3446	FOURCC returns the number of 4 bytes for the given C4CC .
3447	Merge merges two images .
3448	Split returns a copy of the image
3449	AddWeighted adds a weight to the image .
3450	And combines two images .
3451	ANDWithMask creates a new image with mask and mask .
3452	AndScalar adds a scalar to the image .
3453	AndScalWithMask adds a scalar with the given mask .
3454	Or returns a copy of the image .
3455	OrWithMask adds a mask to the image .
3456	OrScalar returns a new image or dst .
3457	OrScalarWithMask adds a scalar with the given mask .
3458	AddWithMask adds a mask to the image .
3459	AddScalar adds a scalar .
3460	AddScalarWithMask adds a scalar with the given mask .
3461	Subtract subtract from src1 and dst2
3462	SubtractWithMask adds a mask to the image .
3463	Subscalar replaces a scalar with the given value .
3464	SubscalScalWithMask adds a scalar with the given mask .
3465	SubscalScarRev revokes a scalar .
3466	SubscalScarWithMaskRev revokes a scalar by mask .
3467	AbsDiff computes the absolute difference between two images .
3468	AbsDiffScalScal computes the difference between two images .
3469	AverageStdDevWithMaskWithMask returns the mean of the image with the given mask .
3470	CreateSeq creates a new Seq .
3471	Push adds an element to the sequence .
3472	Pop removes an element from the sequence .
3473	PushFront pushes an element to the sequence .
3474	PopFront removes an element from the sequence .
3475	GetElemAt returns the element at index .
3476	RemoveAt removes an item at the given index .
3477	Delay sets the delay .
3478	BackOffDelay returns the backoff delay for n times .
3479	Error returns a string representation of the error .
3480	Arguments adds arguments to RequestBuilder
3481	BodyString implements the RequestBuilder interface .
3482	BodyBytes sets the body of the request .
3483	Body sets the body of the request .
3484	Option adds an option to the request .
3485	Header adds a header to the request .
3486	Send sends the request .
3487	Exec executes the request .
3488	Next returns the next message .
3489	Cancel cancels the subscription .
3490	FileList mocks base method
3491	Cat returns the contents of the given path .
3492	List returns a list of links
3493	Pin implements the Shell interface .
3494	Pins returns a list of pins .
3495	Version returns the current version .
3496	NetworkPeers returns a list of SwarmPeers .
3497	Starts a swarm connection
3498	 DagPutOptions returns a DagPutOptions .
3499	Pin sets the pin s pin .
3500	Kind sets the kind of the dag .
3501	Hash sets the hash of the dag .
3502	AddDir adds a directory to the system .
3503	Publish publishes a node .
3504	PublishWithDetails returns a PublishResponse with the given key .
3505	ResolveValue returns the value of a PlanValue .
3506	GenerateQuery generates the query string for the query .
3507	EncodeValue encodes the value of a BindVariable .
3508	Lex implements the lexer interface .
3509	Skips a statement .
3510	reset initializes the tokenizer .
3511	Preview returns the preview of the given SQL .
3512	NewPlanValue returns a PlanValue for the given node .
3513	StringIn returns true if the string contains the given string .
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena returns a new StringArena .
3516	NewString creates a new string with the given bytes .
3517	SpaceLeft returns the number of bytes left in the buffer .
3518	ParseStrictDDL parses a SQL statement .
3519	ParseNext parses the next token .
3520	Append appends a node to the buffer .
3521	ExprFromValue returns an Expr from the given value .
3522	Backtick converts a string into a string .
3523	NewValue creates a new value for a given type .
3524	String returns a string representation of the value .
3525	EncodeSQL encodes the value of the value .
3526	EncodeSQL encodes the InsertValues into a buffer .
3527	EncodeSQL encodes a TupleEqualList .
3528	WalkStatement recursively walk the given node .
3529	WalkSelect is used to walk a select node .
3530	BindVariablesEqual returns true if two bind variables are equal .
3531	New returns a new JWMiddleware
3532	HandlerWithNext adds the next JWT to the JWT
3533	FromAuthHeader returns the auth header from the request .
3534	FromParameter returns a token extracted from the request .
3535	FromFirst returns a TokenExtractor that extracts token extractors from the request .
3536	getHelloPacket returns a new RPC packet
3537	NewFloodSubsWithProtocols returns a new PubSubSub .
3538	NewFloodSub creates a new pubsub subscription
3539	NewLRUBlacklist returns a Blacklist .
3540	NewRandomSub returns a new pubSub .
3541	NewGossipSub returns a new PubSub .
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle is a function that allows you to set the number of connections to the server .
3544	WithBlacklist adds a blacklist to the pubsub .
3545	handleRemoveSubscription removes a subscription from the PubSubscription .
3546	handleAddSubscription implements the PubSubscription interface .
3547	Announce a topic .
3548	notifySubs is used to notify messages .
3549	seenMessage returns true if the message has been seen .
3550	subscribedToMsg returns true if the given message is subscribed to the given message .
3551	msgID returns the ID of a message .
3552	pushMsg adds a message to the pubSub .
3553	validate validates a message
3554	validateSingleTopic checks if the message is valid .
3555	getValidators returns all validators for a message
3556	Subscribe implements PubSubscription .
3557	SubscribeByTopicDescriptor implements PubSubscription .
3558	GetTopics returns a list of all topics
3559	Publish publishes a message to the PubSub .
3560	ListPeers returns a list of peers .
3561	WithValidatorTimeout sets the validator timeout .
3562	WithValidatorConcurrency sets the number of connections to the given number .
3563	RegisterTopicValidator registers a validator
3564	Unregisters a topic validator .
3565	DefaultMetricPrefix returns a default metric with the given tags .
3566	MetricWithPrefix creates a new metric with the given prefix .
3567	NewClient creates a new client .
3568	Call mocks base method
3569	CallPeer calls the given method on the given service .
3570	CallSC sends an RPC call to a channel .
3571	ReadResponse reads a response from a Tchannel .
3572	writeHeaders writes headers to the response .
3573	ResponseWriter returns a http response writer .
3574	ReadHeaders reads the headers from the given io . Reader .
3575	NewTCPRawRelay creates a new TCP connection .
3576	NewClient creates a new client .
3577	Advert implements the Client interface .
3578	Handle implements the Handler interface .
3579	Start starts the server .
3580	Port returns the port of the server .
3581	SetStrategy sets the score of the peer .
3582	Add adds a peer to the list .
3583	GetNew returns a new peer .
3584	Get returns a new peer .
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the PeerList .
3587	Len returns the number of peers in the list .
3588	exists returns the peer s peer .
3589	Get peer score
3590	onPeerChange is called when a peer is changed .
3591	updatePeer updates the peer s peer .
3592	getConn returns the connection at the given index .
3593	GetConnection returns a connection .
3594	getConnectionRelay returns a connection to the peer .
3595	canRemove returns true if the peer has been removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes a connection from the peer .
3598	closeCloseStateChange is called when a connection is closed .
3599	Connect connects to the channel .
3600	BeginCall starts a new RPC call .
3601	NumConnections returns the number of connections in the peer .
3602	NumPendingOutbound returns the number of pending connections .
3603	isEphemeralHostPort returns true if the given host port is ephemeral .
3604	Get returns the value associated with the key .
3605	Set sets the value of a key .
3606	ClearAll removes all values from the kvHandler .
3607	NewChannel creates a new Channel .
3608	Serve is used to serve a listener .
3609	ListenAndServe starts listening for the given host port .
3610	Register registers a handler to the channel .
3611	PeerInfo returns the local peer info .
3612	GetSubChannel returns a subChannel .
3613	serve serves the incoming connection .
3614	Ping implements the Channel interface .
3615	StatsTags returns a map of stats
3616	Connect connects to the channel .
3617	exchangeUpdated updates the remote peer .
3618	updatePeer updates the peer .
3619	addConnection adds a connection to the channel .
3620	removeClosedConn removes a connection from the channel .
3621	closeCloseStateChange is called when a connection is closed .
3622	State returns the state of the channel .
3623	NewReader returns a new reader .
3624	ReadUint16 reads a uint16 .
3625	ReadString implements the Reader interface .
3626	ReadLen16String returns the length of a string .
3627	Register registers the given channel .
3628	Run runs the hook
3629	Get returns a new relay timer .
3630	Put adds a relay timer to the pool .
3631	Start starts the relay timer .
3632	Release releases the timer .
3633	NewLogger creates a new Logger .
3634	NewTCPFrameRelay creates a new TCP frame relay .
3635	countTags returns a map of known tags .
3636	Isolated implements the SubChannel interface .
3637	Isolated returns true if the channel isolated .
3638	Register registers a new subChannel .
3639	GetHandlers returns a map of handlers .
3640	StatsTags returns a map of stats tags .
3641	registerNewSubChannel registers a new SubChannel .
3642	get returns a SubChannel
3643	getOrAdd adds a new channel to the channel map .
3644	Discover returns a list of host ports .
3645	Start starts the server .
3646	Listen listens for the client .
3647	WriteRequest writes an HTTP request to the given arguments .
3648	ReadRequest reads a request from a tchannel .
3649	NewReadBufferWithSize returns a ReadBuffer with the given size .
3650	ReadByte implements the ReadBuffer interface .
3651	ReadBytes implements io . Reader interface .
3652	ReadString implements the ReadBuffer interface .
3653	ReadUint16 reads a uint16 from the Reader .
3654	ReadUint32 reads a uint32 .
3655	ReadUint64 reads a uint64 from the Reader .
3656	ReadUvarint reads a uint64 from the buffer .
3657	ReadLen8String returns the length of a string .
3658	ReadLen16String implements the ReadBuffer interface .
3659	FillFrom implements io . ReaderFrom interface .
3660	Wrap wraps the underlying ReadBuffer .
3661	WriteSingleByte writes a single byte to the write buffer .
3662	WriteBytes writes bytes to the WriteBuffer .
3663	WriteUint16 writes a uint16 to the WriteBuffer .
3664	WriteUint32 writes a uint32 to the WriteBuffer .
3665	WriteUint64 writes a uint64 to the WriteBuffer .
3666	WriteUvarint writes a uint64 to the WriteBuffer .
3667	WriteString writes a string to the WriteBuffer .
3668	WriteLen8String writes a string to the buffer .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte implements WriteBuffer .
3671	DeferBytes implements the WriteBuffer interface .
3672	FlushTo implements io . Writer .
3673	Reset resets the buffer .
3674	Wrap implements the WriteBuffer interface .
3675	Update implements the uint16 interface .
3676	Update updates the given uint32 value .
3677	Update updates the given Uint64 reference .
3678	Update updates the given bytes .
3679	UpdateString updates the given string .
3680	ArgReader implements the FragmentReader interface .
3681	Finish the fragment .
3682	newWritableChunk creates a new writeable chunk .
3683	writeAsFits writes bytes to the chunk .
3684	newFragmentingWriter creates a new fragmentingWriter .
3685	ArgWriter implements the FragmentWriter interface .
3686	BeginArgument initializes the fragment .
3687	Write implements the Writer interface .
3688	Flush flushes the current fragment .
3689	Close closes the writer .
3690	handleCallRes is part of the connection .
3691	Arg2Reader reads the argument from the response .
3692	Handle an error message .
3693	doneReading implements the OutboundCaller interface .
3694	newFragment creates a new fragment .
3695	flushFragment sends a fragment to the server .
3696	fail returns the error if the error occurred .
3697	arg1Reader returns a new arg1 . arg1
3698	arg2Reader returns a new arg2 reader .
3699	arg3 reader
3700	argReader returns a new argReader from the contents of the reader .
3701	recvNextFragment returns the next fragment of the next fragment .
3702	releasePreviousFragment clears the previous fragment .
3703	fail returns the error if the error occurred .
3704	parseInboundFragment parses a fragment into a readable fragment .
3705	NewContext returns a new Context with the given timeout .
3706	WithHeaders adds headers to tchannel .
3707	healthCheck is used to check for a connection .
3708	SetTimeout sets the timeout .
3709	AddHeader adds a header .
3710	SetHeaders sets the headers for the request .
3711	SetConnectTimeout sets the ConnectTimeout field s value .
3712	SetRetryOptions sets the RetryOptions field s value .
3713	SetTimeoutPerAttempt sets the TimePerAttempt field s value .
3714	SetParentContext sets the parent context .
3715	Build builds a context with the given context .
3716	replaceHeaders overrides the request headers
3717	Read implements the Reader interface .
3718	ReadJSON reads JSON data from the reader .
3719	NewArgWriter returns a new ArgWriteHelper
3720	Write implements the Writer interface .
3721	WriteJSON writes data to the writer .
3722	Register registers a new http . Handler .
3723	Count returns the number of items in the relay items .
3724	Get returns a relay item .
3725	Add adds an item to the list .
3726	Entomb is part of the relay .
3727	NewRelayer creates a new relay .
3728	Relay implements the Relayer interface .
3729	Receive implements the Relay interface .
3730	handleNonCallReq handles a non - RPC request .
3731	addRelayItem creates a new relay item
3732	failRelayItem attempts to fail if the given delay failed .
3733	WriteStruct implements io . Writer . Writer .
3734	ReadStruct implements io . Reader . Reader .
3735	EnsureEmpty implements io . Reader .
3736	NewServer returns a new Server
3737	Advert connects to hyperbahn .
3738	handleCallReqContinue is part of the connection .
3739	dispatchInbound is part of the connection .
3740	CallOptions returns a CallOptions struct .
3741	Response returns the response .
3742	SendSystemError sends a system error message .
3743	SetApplicationError sets the application error state .
3744	Arg2Writer implements the InboundCall interface .
3745	doneSending is called when the client is finished .
3746	newState returns a new State .
3747	rootType returns the root type of the given ThriftType .
3748	checkInclude returns the type of the given type .
3749	isResultPointer returns true if the given thrift type is a pointer .
3750	goType returns the type of thrift type .
3751	goTypePrefix returns the go type prefix for the given type .
3752	NewContext returns a new context .
3753	newIncomingContext creates a new context .
3754	CurrentCall returns the current call .
3755	New returns a new rand
3756	Health implements the Handler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	Set response headers
3760	Child returns a copy of the ContextWithHeaders .
3761	Wrap returns a ContextWithHeaders with the given context .
3762	WrapWithHeaders returns a context with the given headers .
3763	WithHeaders returns a new context with the given context .
3764	Notify implements the ErrNotifier interface .
3765	Forward peer frame .
3766	recvPeerFrame invokes the PeerExchange method .
3767	recvPeerFrame returns a frame of a peer .
3768	shutdown shuts down the exchange .
3769	newMessageExchangeSet creates a new messageExchangeSet
3770	addExchange adds a message to the queue
3771	newExchange creates a new message exchange
3772	deleteExchange deletes a message from the queue .
3773	removeExchange removes a message from the queue .
3774	expireExchange removes a message from the queue .
3775	Forward peer frame .
3776	copyExchanges returns a copy of the messages
3777	stopExchanges stops all exchanges
3778	NewFrame returns a new Frame .
3779	ReadBody reads the frame from the wire .
3780	WriteOut implements io . Writer interface .
3781	CanRetry returns true if the given error is valid .
3782	HasRetries returns true if the given error is a retry .
3783	SinceStart returns the duration of the request .
3784	AddSelectedPeer adds a new peer to the server .
3785	RunWithRetry runs a retryable function .
3786	ChecksumSize returns the size of the checksum type .
3787	New returns a new Checkum instance
3788	parseTemplates parses a list of templates .
3789	NewStringSliceFlag creates a new slice of StringSlice
3790	withStateFuncs returns a template with the state of the template .
3791	InspectOthers returns a map of all channels in the channel map .
3792	ReportInfo returns information about the channel .
3793	InspectState returns the state of the root peer .
3794	InspectState implements the SubChannelMap interface .
3795	ProspectState returns the current peer runtime state .
3796	InspectState implements the ConnectionRuntime interface .
3797	InspectState implements the RelayerRuntimeState interface .
3798	InspectState returns the state of the relay items .
3799	InspectState returns the current exchange state .
3800	NewContext returns a new context with the given timeout .
3801	WriteResponse writes the response to the response .
3802	Wrap wraps the given handler .
3803	initFromOpenTracing initializes the span from the given span .
3804	startOutboundSpan starts a new span .
3805	IntToIP4 converts a uint32 to a net . IP .
3806	ServicePeerToHostPort converts a service peer to a host port .
3807	NewStatsdReporter creates a new statsd reporter .
3808	UnmarshalText unmarshals a string into a Type .
3809	Push adds an item to the heap .
3810	Pop removes a peer from the heap .
3811	updatePeer updates the peer s peers .
3812	removePeer removes a peer from the heap .
3813	pushPeer pushes a peer to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChannel
3816	Add adds a new peer to the list of peers .
3817	Get returns a peer by port port
3818	WithTimeout sets the timeout .
3819	Methods returns a slice of all methods .
3820	OverrideMethods returns the list of inherited methods .
3821	Arguments returns the arguments of the method .
3822	ArgList returns a string representation of the method declaration .
3823	CallList returns a string representation of the method call
3824	RetType returns the type of the method .
3825	WrapResult returns the result of the wrapped method .
3826	ReturnWith returns the response with the given error .
3827	Declaration returns the declaration of the field .
3828	startIdle creates a new idleSweep .
3829	start starts the goroutine .
3830	Stop stops the timer .
3831	ResolveWithGoPath returns the path for the given filename .
3832	setExtends sets the extensions for the service
3833	register adds a handler to the handler map .
3834	NewClient returns a new client
3835	ListenIP returns a new IP address .
3836	Close closes the listener .
3837	ReadArgsV2 reads args from rchannel .
3838	WriteArgs writes arguments to outbound call .
3839	Call implements the Tchannel interface .
3840	CallSC sends a message to a channel .
3841	CallV2 calls the V2 RPC method
3842	NewRealRelay creates a new real relay .
3843	NewServer creates a new server .
3844	RegisterHealthHandler registers a health handler for a health request .
3845	Handle implements the Service interface .
3846	MetricsKey returns the metric key .
3847	NewSystemError creates a system error
3848	NewWrappedSystemError creates a new SystemError .
3849	Error returns the error message .
3850	GetContextError returns an error if the error occurred .
3851	GetSystemErrorCode returns the system error code .
3852	Ping sends a ping message .
3853	handlePingRes is part of the connection .
3854	Handle ping request .
3855	SendSystemError sends a system error message .
3856	connectionError is called when a connection is closed
3857	withStateLock implements the Connection interface .
3858	withStateRLock implements the Connection interface .
3859	Read frames from the connection pool .
3860	Write frames to the network .
3861	hasPendingCalls returns true if the connection has pending calls .
3862	checkExchanges checks if the connection has changed .
3863	closeNetwork closes the network .
3864	getLastActivityTime returns the last activity time .
3865	Validate validates a service
3866	logFailedRegistrationRetry logs a failed registration failure .
3867	initialiseAdvert is part of the client .
3868	Service returns the value of the service .
3869	TLTTL returns the TTL of a lazy call .
3870	SetTTL sets the TTL for the given duration .
3871	finalCall returns true if the frame is finished .
3872	Flatten returns a slice of all the platforms .
3873	Map maps a function to a list of strings .
3874	MapSlice returns a slice of platform strings .
3875	GetProtoConfig returns the proto config .
3876	MapExprStrings maps the given expression to a function .
3877	FlattenExpr is a helper function for FlattenExpr .
3878	makePlatformStringsExpr returns a list of platform strings .
3879	String returns a string representation of the platform .
3880	Find finds the workspace directory .
3881	runGazelle runs the gazelle command
3882	Restore build files in repository
3883	FixLoads is used to fix load load files .
3884	fixLoad is used to fix a load
3885	newLoadIndex returns the index for the given rule .
3886	removeLegacyGoRepository removes references from a rule .
3887	Compare compares two versions .
3888	ParseVersion parses a string .
3889	EmptyFile creates a new File .
3890	LoadWorkspaceFile loads a workspace file .
3891	LoadMacroFile loads a file .
3892	EmptyMacroFile loads the contents of a file .
3893	LoadData loads a file from the given path .
3894	LoadWorkspaceData loads workspace data from a workspace .
3895	LoadMacroData loads a file from the given path .
3896	ScanAST scans a Bzl file .
3897	Scan AST body
3898	MatchBuildFileName returns the name of the build file .
3899	Sync macro file
3900	 macro name
3901	Sync implements the File interface .
3902	Format formats the file .
3903	Save saves the file to disk .
3904	HasDefaultVisibility returns true if the file has default visibility .
3905	NewLoad returns a new Load
3906	Symbols returns a list of symbols .
3907	Has returns true if symbol exists .
3908	Add adds a symbol to the loader .
3909	Remove removes a symbol
3910	Insert inserts a load into the file .
3911	NewRule creates a new Rule .
3912	SetKind sets the rule .
3913	AttrKeys returns the list of attribute names .
3914	Attr returns the attribute for the given key .
3915	AttrString returns the string value for the given key .
3916	AttrStrings returns the list of strings for the given key .
3917	DelAttr removes a key from the rule .
3918	SetAttr sets the value of an attribute .
3919	PrivateAttrKeys returns a slice of private attributes .
3920	SetPrivateAttr sets the value for the given key .
3921	Insert inserts a rule .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility returns the visibility of the given rel .
3924	New returns a new Label
3925	Rel returns the label for the given repo .
3926	Equal returns true if two labels are equal .
3927	Contains returns true if the label contains the given label .
3928	generateFromPath generates a file from a root directory .
3929	shouldCall returns true if the given rel should be called .
3930	shouldUpdate reports whether the given rel should be updated .
3931	shouldVisit returns true if the given rel should be visited .
3932	SquashRules removes all rules from src .
3933	runClient starts the client
3934	UpdateRepo updates the repository for the given import path .
3935	NewRemoteCache creates a new remote cache .
3936	Remote returns the remote repo for the given root .
3937	get returns the value for the given key
3938	ensure returns the value of the given key .
3939	RelBaseName returns the name of the relative path .
3940	Clone returns a copy of this Config .
3941	IsValidBuildFileName checks if the given name is valid .
3942	check checks if the tag is valid
3943	fileNameInfo returns the file name for the given path .
3944	otherFileInfo returns the file info for the given path
3945	protoFileInfo returns the file info for a proto file .
3946	AddRule adds a rule to the index .
3947	Finish builds the import index .
3948	buildImportIndex builds the import index for the given rules .
3949	IsSelfImport returns true if the source is an import .
3950	applyKindMappings takes a list of loadKinds and returns a list of loaded loadInfo .
3951	appendOrMergeKindMapping returns a slice of loadLoadInfo .
3952	RuleName returns the name of the given names .
3953	buildPackages builds a list of packages .
3954	selectPackage returns the package for the given rel .
3955	generateProto generates a rule .
3956	generateEmpty returns the empty rule for the given rule .
3957	ImportRepoRules imports a list of repo rules .
3958	MergeRules merges a list of rules .
3959	GenerateRule generates a rule .
3960	FindExternalRepo returns the path of an external repository .
3961	ListRepositories returns a list of repositories .
3962	migrateLibraryEmbed is used to migrate library .
3963	migrateGrpcCompilers migrates grpc compilers .
3964	 squash cgo library
3965	removeLegacyProto removes legacy proto files from the config file .
3966	removeLegacyGazelle removes the loader from the config file .
3967	selectPackage selects the package from the given directory .
3968	AddBuiltin adds a builtin to the resolver .
3969	MappedKind adds a mapping to the mapper .
3970	Resolver returns a resolver for the given rule .
3971	sortExprLabels sorts the labels in the given list .
3972	checkRulesGoGoVersion verifies that the rules are valid .
3973	preprocessTags initializes generic tags .
3974	setBuildTags sets the build tags .
3975	splitValue splits the value into a slice of strings .
3976	copyGoModToTemp copies a file to a temporary directory .
3977	findGoTool returns the path to the platform
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server
3980	watchDir creates a watcher for the given root directory .
3981	listDirs returns a list of all directories in a directory .
3982	shouldIgnore returns true if path is ignored .
3983	recordWrite writes a file to the directory
3984	getAndClearDirs returns a list of all written directories .
3985	CombineHandlers creates a new http . HandlerFunc with the given handlers .
3986	VerifyContentType returns a HandlerFunc that matches the provided content type .
3987	VerifyMimeType returns a HandlerFunc that matches the given mime type .
3988	VerifyBasicAuth returns a HandlerFunc that matches the provided username and password .
3989	VerifyJSONRepresenting returns a HandlerFunc that matches the provided object .
3990	VerifyFormKV verifies that the given key is valid .
3991	RespondWithProto implements the http . Handler interface .
3992	RegisterFailHandlerWithTakes a gomega fail handler
3993	EventuallyWithOffset creates a new AsyncAssertion .
3994	ConsistWithOffsetWithOffset creates a new AsyncAssertion .
3995	Expect returns a new Assertion .
3996	Eventually returns an AsyncAssertion
3997	Consistion creates a new AsyncAssertion .
3998	TimeoutCloser returns a io . io . Writer .
3999	TimeoutReader implements io . io . Reader . Reader .
4000	TimeoutWriter returns a io . Writer that writes to the given io . Writer .
4001	 Nest returns a nested nested error .
4002	SetMockService mocks base method
4003	FindMachineByIdOrAddress returns a machine by id .
4004	Write writes data to the response .
4005	Hijack mocks base method
4006	ListDeploys returns a list of DeployData for the given filter .
4007	AddAll adds a route to the router .
4008	SAMLRequestTimeout parses SAML request and returns the timeout .
4009	RegisterHandler registers a handler for a given path .
4010	RegisterHandlerVersion registers a new http . Handler
4011	Check checks to see if the given names are enabled .
4012	DiscoverRepositoryPath returns the path of the repository .
4013	OpenRepository opens a repository .
4014	RemoteURL returns the remote URL for the repository .
4015	List lists all apps .
4016	AppsLister returns a new AppNamespaceLister .
4017	List lists all apps in the indexer .
4018	StreamJSONResponse streams a JSON response from a JSON response .
4019	DropDatabase deletes a database .
4020	Collection returns a collection .
4021	SetLogger sets the logger s logger .
4022	Error logs an error .
4023	Errorf logs a message to the target .
4024	Fatal logs a message .
4025	Debugf logs a message to the target logger .
4026	GetStdLogger implements the Target interface .
4027	Namespace returns the namespace
4028	recreateContainers creates containers in the given container .
4029	checkProvisioner checks if the provisioner is valid
4030	checkDocker checks if docker config is valid .
4031	checkScheduler checks if the scheduler is valid .
4032	checkRouter checks if the router is valid .
4033	Available returns true if the unit is available .
4034	Get returns a Provisioner .
4035	Registry returns a slice of provisioners .
4036	Error returns the error message .
4037	validateVersion checks if supported versions are supported
4038	ReadTarget reads the target directory and returns it .
4039	WriteTarget writes a string to the target file .
4040	WriteOnTargetList writes the target label to the target file .
4041	Conn returns a connection to the database .
4042	Apps returns a collection of apps .
4043	PoolsConstraints returns a collection of pool constraints .
4044	Users returns a collection of users .
4045	SAMLRequests returns a collection of SAML requests .
4046	AppLogCollection returns a collection of logs for a given app name .
4047	CreateAppLogCollection creates a new log collection .
4048	LogsCollections returns all the collections in the database .
4049	ArchiveBuildCmds returns a list of build cmds .
4050	ArchiveDeployCmds returns a list of commands for the given app .
4051	DeployCmds returns the deployment commands for the given app .
4052	runWithAgentCmds runs the command line command
4053	newApps returns a new apps
4054	Commit commits the container .
4055	processTags takes a slice of tags and returns a slice of tags .
4056	aggregateContainersBy returns a map of containers by matcher .
4057	chooseNodeToAdd adds a node to the cluster
4058	selectContainerToRemove is used to remove a container from the cluster .
4059	Get returns a router .
4060	Default returns the default router name .
4061	Store stores a router .
4062	TsuruV1 returns a TsuruV1
4063	Tsuru returns tsuru1
4064	NewAppInformer creates a new appInformer .
4065	NewFilteredAppInformer creates a new informer .
4066	Watch returns a watch
4067	Patch applies the patch to the server .
4068	NewSharedInformerFactory creates a new shared informer factory .
4069	NewFilteredSharedInformerFactory creates a new SharedInformerFactoryFactoryFactory .
4070	Proxy sends an event to the broker
4071	UnbindUnit implements Service interface .
4072	Create creates a new plan .
4073	Remove removes a plan .
4074	ensureDefault is used to create a new plan .
4075	DeleteInstance deletes an instance of ServiceInstance
4076	ToInfo returns an instance of ServiceInstanceWithInfo
4077	Update implements ServiceInstance
4078	BindApp binds an app to the service .
4079	BindUnit adds a unit to the service .
4080	UnbindApp implements ServiceInstance .
4081	Status returns the status of the service
4082	ProxyInstance is part of the service interface
4083	Inc increments the quota .
4084	SetLimit sets the limit for the application .
4085	Set implements storage .
4086	Get returns a quota .
4087	RemoveImage removes an image from the docker registry .
4088	RemoveAppImages removes an image from the registry .
4089	Create creates a new platform .
4090	List lists all platforms .
4091	FindByName returns the platform by name .
4092	Update updates the platform .
4093	Remove removes a platform .
4094	Rollback updates the platform .
4095	GetPoolByName retrieves a pool by name .
4096	Manager returns the repository manager .
4097	Register registers a new RepositoryManager .
4098	start starts the bind sync
4099	Shutdown implements the binder interface .
4100	GetForProvisioner returns the builder for the given provisioner .
4101	get returns a builder .
4102	Registry returns a slice of builders .
4103	RegisterQueueTask registers a new task .
4104	Apps returns an appInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write writes data to the log .
4109	ResetPassword reset password
4110	addKnownTypes adds known types to the given scheme .
4111	Register registers a shutdownable .
4112	Do executes the shutdown .
4113	ListImagesOrDefault returns a list of images for a platform .
4114	MigrateAppsCRD migrations
4115	Register registers a migration function .
4116	RegisterOptional registers a migration .
4117	Run runs the command .
4118	Unit returns the units of the app .
4119	MarshalJSON serializes the App .
4120	AcquireApplicationLockWait waits for a lock to be locked .
4121	ReleaseApplicationLock releases a lock .
4122	GetByName returns an app by name .
4123	AddUnits adds units to the app .
4124	SetUnitStatus sets the status of the given unit .
4125	UpdateNodeStatus updates the status of a node .
4126	available returns true if the app is available .
4127	Grant grants a team .
4128	Revoke revoke an app .
4129	GetTeams returns a list of all the teams .
4130	setEnv sets the environment variable
4131	getEnv returns the environment variable
4132	validateNew validates new app .
4133	validate validates the application
4134	InstancesEnvs returns the environment variables for the given service .
4135	Run runs the given command .
4136	GetUnits returns the units of the app .
4137	GetUUID returns the UUID of the app .
4138	Envs returns a map of env variables .
4139	SetEnvs sets the environment variables .
4140	UnsetEnvs unset environment variables
4141	AddCName adds cnames to the app .
4142	Log logs a message
4143	LastLogs returns a slice of all logs in the app .
4144	List lists all apps .
4145	Swap swaps two routes .
4146	Start starts the app .
4147	GetDbDriver returns a DbDriver instance .
4148	GetCurrentDbDriver returns the current database driver .
4149	NewForConfig creates a new Clientset with the given config .
4150	GetAppFromUnitID returns the app from the given unit ID .
4151	NewPipeline creates a new pipeline
4152	Result returns the result of the pipeline .
4153	Decode json payload
4154	UrlFor returns the URL for the given path .
4155	GetCorsInfo returns the CorsInfo object .
4156	MiddlewareFunc returns a HandlerFunc that returns a HandlerFunc that can be used for the given handler .
4157	MiddlewareFunc returns a HandlerFunc that wraps the given HandlerFunc .
4158	WriteHeader writes the status code to the response .
4159	MakeRouter creates a new router .
4160	AppFunc returns a HandlerFunc that can be used to route the router .
4161	escapedPath returns the escaped path for the given URL .
4162	escapedPathExp returns the escaped pathExp for the given pathExp .
4163	start starts the router .
4164	findFirstDefinedRoute returns the first match of the matched route .
4165	findRouteFromURL attempts to find a route from the given URL object .
4166	MiddlewareFunc returns a HandlerFunc that sets the content type of the content type .
4167	CloseNotify implements the ResponseWriter interface .
4168	MiddlewareFunc returns a HandlerFunc that allows access to the access log .
4169	Execute text template
4170	RemoteUser returns the remote user .
4171	An ApacheQueryString returns the HTTP query string .
4172	StartTime returns the start time .
4173	ApacheRemoteAddr returns the remote address of the access log .
4174	ResponseTime returns the response time .
4175	MiddlewareFunc returns a HandlerFunc that wraps the JsonIndentMiddleware .
4176	EncodeJson encodes the given value .
4177	WriteHeader writes a header to the response .
4178	MakePath returns the path for the route
4179	MiddlewareFunc returns a HandlerFunc that wraps RecoverMiddleware .
4180	WrapMiddlewares wraps middlewares with middlewares
4181	MiddlewareFunc returns a HandlerFunc that wraps gzip middleware .
4182	WriteHeader writes a header to the response .
4183	Hijack mocks base method
4184	Write writes the bytes to the response .
4185	MiddlewareFunc returns a HandlerFunc that can be used to authenticate the request .
4186	printDebug prints information about the node .
4187	AddRoute adds a route to the tree .
4188	printDebug prints the current tree .
4189	FindRoutes returns a list of matched routes .
4190	FindRoutesAndPath mocks base method
4191	FindRoutesForPath returns a list of matched routes for the given path .
4192	Use adds middlewares to the stack
4193	MakeHandler returns a HandlerFunc that can be used to create a middleware .
4194	MiddlewareFunc returns a HandlerFunc that returns a HandlerFunc that returns a HandlerFunc .
4195	MiddlewareFunc returns a HandlerFunc that wraps the HandlerFunc .
4196	GetStatus returns the status of the status
4197	MiddlewareFunc returns a HandlerFunc that can be used to handle JSONp .
4198	Flush flushes the response .
4199	MiddlewareFunc returns a HandlerFunc that wraps the access log .
4200	Fetch returns the contents of the S3 object .
4201	sanitCheck checks if the environment is valid
4202	release releases the listener .
4203	fetchLoop is part of the master
4204	forkLoop runs a fork loop .
4205	Init initializes the file .
4206	Fetch reads the file from the file .
4207	Fetch fetches the HTTP headers from the HTTP server .
4208	NewConfig returns a new Config
4209	Validate validates the configuration .
4210	NewClient creates a new client .
4211	Async closes the partition consumer .
4212	Close closes the partition consumer .
4213	MarkOffset sets the offset of the partition .
4214	NewConsumer creates a new consumer
4215	MarkOffsets implements the ConsumerStash interface .
4216	ResetOffset resets the offset of the consumer .
4217	Close closes the consumer .
4218	HbLoop runs the heartbeat loop .
4219	twigLoop is a goroutine that handles all topics .
4220	CommitLoop runs the commit loop .
4221	fetchOffsets fetches offsets from subsets .
4222	MarkOffset mocks base method
4223	ResetOffset resets the offset of the message .
4224	Offsets returns the offset of the set .
4225	Actual returns the actual instance of the InstanceGroup
4226	Expected returns an instance of InstanceGroup
4227	Delete deletes an InstanceGroup
4228	GetReconciler returns the reconciler for the given cluster .
4229	GetVersion returns the version .
4230	GetVersionJSON returns the JSON representation of the version
4231	Actual returns a new resource group .
4232	Expected returns a new instance of the resource group
4233	CreateCmd creates a new cluster .
4234	NewUbuntuCluster creates a new cluster .
4235	ProviderConfig returns the configuration for the cluster
4236	SetProviderConfig sets the provider configuration .
4237	MachineProviderConfigs returns a list of MachineProviderConfigs
4238	SetMachineProviderConfigs sets the MachineProviderConfigs field s value .
4239	NewCluster returns a new Cluster
4240	DeployControllerCmd returns a command for DeployController
4241	NewRetrier returns a new Retryable .
4242	RunRetry is used to run the retryable function .
4243	MustGenerateRandomBytes returns a random byte slice .
4244	ExplainCmd returns a cobra command .
4245	TimeOrderedUUID generates a random UUID
4246	GetConfigCmd returns a cobra command
4247	RunAnnotated runs an annotated task .
4248	ListCmd returns a cobra command
4249	NewUbuntuCluster creates a new cluster .
4250	EditCmd returns a cobra command
4251	RemoveKey removes a key from the keyring .
4252	RemoveKeyUsingFile removes a key from a file .
4253	Actual updates the firewall
4254	Expected returns a new instance of Firewall
4255	Apply applies a new firewall to the cloud .
4256	Delete deletes a firewall
4257	DeleteCmd is used to delete the resources from the cloud .
4258	NewStateStore returns a new state store .
4259	Commit commits a cluster
4260	ApplyCmd returns a cobra command .
4261	ExpandPath returns the path of the given path .
4262	CompletionCmd returns a cobra command
4263	AdoptCmd returns a cobra command
4264	StrEnvDef returns the value of the environment variable .
4265	IntEnvDef returns the default value for the environment variable .
4266	BoolEnvDef returns the default value for the environment variable .
4267	readFromFS reads a file from the filesystem .
4268	VersionCmd returns a cobra command
4269	NewSignalHandler returns a new SignalHandler .
4270	Register registers the handler .
4271	NewUbuntuCluster creates a new cluster .
4272	BeginOfHour returns the beginning of the current time .
4273	BeginOfDay returns the beginning of the current time .
4274	BeginOfWeek returns the beginning of the current time .
4275	BeginOfMonth returns the beginning of the current month .
4276	BeginOfQuarter returns the beginning of the current month .
4277	BeginOfYear returns the beginning of the current year .
4278	EndOfMinutes returns the end of the current time .
4279	EndOfHour returns the end of the current time .
4280	EndOfDay returns the end of the current time .
4281	EndOfWeek returns the end of the current time .
4282	EndOfMonth returns the end of the current month .
4283	EndOfQuarter returns the end of the current time .
4284	EndOfYear returns the end of the current time .
4285	MustParse parses the given string and panics .
4286	Between returns true if the current time is between two dates .
4287	ParseInLocation parses the given time and returns an error .
4288	MustParse parses the given string and returns it .
4289	MustParseInLocation attempts to parse a time in the given location .
4290	Between returns true if time1 is between two dates .
4291	NewChannelMemoryBackend creates a new ChannelMemoryBackend .
4292	Start starts the channel .
4293	Flush implements the ChannelMemory interface .
4294	Stop stops the channel .
4295	Formatted returns the formatted string representation of the record .
4296	Message returns the message .
4297	SetBackend sets the backend .
4298	MustGetLogger returns a logger with the given module name .
4299	Reset resets the logger .
4300	IsEnabledFor implements Logger interface .
4301	Criticalf logs a message with the given format .
4302	Warningf logs a warning .
4303	Noticef logs a message with the given format .
4304	Infof logs a formatted message .
4305	SetFormatter sets the formatter .
4306	MustStringFormatter returns a Formatter with the given format .
4307	formatFuncName returns the name of the function f .
4308	Log implements the backend .
4309	LogLevel returns the log level .
4310	AddModuleLevel adds a module level to the backend .
4311	GetLevel returns the level of the module
4312	SetLevel sets the module level
4313	IsEnabledFor returns true if the given module is enabled .
4314	MultiLogger creates a new MultiLogger .
4315	Log implements the Logger interface .
4316	GetLevel returns the level of the given module .
4317	SetLevel mocks base method
4318	IsEnabledFor implements the MultiLogger interface .
4319	ConvertColors converts a list of colors to a list of strings .
4320	NewSyslogBackend creates a new syslog backend
4321	NewSyslogBackendPriority creates a new syslog backend .
4322	SetBackend sets the default backend
4323	NewCommander returns a new Commander instance
4324	Execute executes the command .
4325	 explain information about the command .
4326	explainGroup prints the given command .
4327	explain is used to explain the command .
4328	dealias returns the given command .
4329	Execute executes the default command
4330	LoadFromData loads a ConfigFile from data .
4331	LoadFromReader loads a ConfigFile from an io . Reader .
4332	ReloadData loads the configuration from the given io . Reader .
4333	AppendFiles appends files to the config file .
4334	GetKeyList returns a list of keys for a given section .
4335	SaveConfigData writes the configuration data to a writer .
4336	SaveConfigFile saves a config file .
4337	Find returns a Selection with the given selector .
4338	FindByXPath returns a Selection with the given selector .
4339	FindByLink returns a Selection by link .
4340	FindByLabel returns a Selection by label .
4341	FindByName returns a Selection by name .
4342	FindByClass returns a Selection with the given text .
4343	FindByID returns a Selection by ID .
4344	First returns the first element matching the selector .
4345	FirstByXPath returns a Selection with the given selector .
4346	FirstByLink returns a Selection with the given text .
4347	FirstByLabel returns a Selection with the given label .
4348	FirstByName returns a Selection with the given name .
4349	All returns a new MultiSelection
4350	AllByXPath mocks base method
4351	AllByLink returns a new MultiSelection .
4352	AllByLabel mocks base method
4353	AllByName mocks base method
4354	AllByClass mocks base method
4355	AllByID returns a MultiSelection with the given text .
4356	FindForAppium returns a Selection that matches the given text .
4357	Timeout sets the timeout .
4358	 ChromeOptions adds a new option to the config .
4359	JoinPage creates a new page .
4360	Destroy destroys the page .
4361	Reset reset page
4362	Navigate to the page
4363	Get cookies
4364	SetCookie sets the cookie .
4365	DeleteCookie deletes a cookie
4366	ClearCookies removes cookies from the session .
4367	URL returns the URL of the page .
4368	Size sets the window size .
4369	Screenshot returns the screenshot of the page
4370	Title returns the title of the page .
4371	HTML returns the content of the page .
4372	PopupText returns the popup text .
4373	EnterPopupText sets the popup text .
4374	Confirm popup
4375	Cancel popup
4376	SwitchToParentFrames sets the parent frame of the page .
4377	SwitchToRootFrames sets the root frame .
4378	NextWindow returns the next window .
4379	CloseWindow closes the window .
4380	WindowCount returns the number of windows .
4381	LogTypes returns the list of log types .
4382	MoveMouseBy moves the mouse to the current page .
4383	DoubleClick mocks base method
4384	Click a click event .
4385	Click will click the element in the selection
4386	DoubleClick mocks base method
4387	Fill sets the text in the selection .
4388	Tap implements the Selection interface .
4389	Touch implements the Selection interface .
4390	FlickFinger sends a finger to the selected element .
4391	ScrollFinger moves the element to the current element .
4392	NewCapabilities returns a new Capabilities .
4393	JSON returns a JSON representation of the Capabilities .
4394	HasTitle returns a GomegaMatcher that matches the given title .
4395	HasURL returns a GomegaMatcher that matches the given URL .
4396	HasPopupText returns a GomegaMatcher that matches the given text .
4397	HaveLoggedError returns a GomegaMatcher that matches the given messages .
4398	Text returns the text of the selected element .
4399	Active returns true if the selection is active .
4400	Attribute returns the value of an attribute .
4401	CSS returns the CSS value for the given property .
4402	Selected returns true if the selection is selected .
4403	Visibility returns true if the selection is visible .
4404	Enabled checks if the selection is enabled .
4405	HaveCount returns a GomegaMatcher that matches the given count .
4406	HasAttribute returns a GomegaMatcher that matches the given attribute .
4407	EdgeDriver returns an instance of WebDriver
4408	Selendroid returns a WebDriver instance
4409	SwitchToFrame implements the Selection interface .
4410	Count returns the number of elements in the selection .
4411	EqualsElement returns true if two elements are equal .
4412	MouseToElement mocks base method
4413	loggingMiddleware returns a handler for logging .
4414	chainHandlers returns a new middleware for the middleware .
4415	HTTPReverseProxy creates a new http . Proxy
4416	CheckInstallation checks if the installation is valid .
4417	CheckVersion checks if a binary version is valid .
4418	GetVersionForBinary returns the version for the given binary .
4419	getUser gets a user by id
4420	login attempts to authenticate a user .
4421	loginHandler handles a login request .
4422	logoutHandler handles the logout handler .
4423	viewHandler renders the user
4424	Run starts the server
4425	WithRequest adds a request to the interaction
4426	WillRespondWith sets the response to the response .
4427	isJSONFormattedObject returns true if the given string is a JSON string .
4428	ByUsername returns user by username .
4429	ByID returns user by ID
4430	UserLogin handles a user login request .
4431	newClient creates a new PactClient
4432	NewClient returns a new Pact client
4433	List servers
4434	UpdateMessagePact updates a Pact message .
4435	PublishPacts is used to PublishPacts
4436	getPort returns the port of the given URL
4437	getAddress returns the address of the given URL
4438	sanitizeRuby response
4439	Publish calls PublishRequest
4440	FindPortInRange returns the number of ports in a range
4441	EachLike returns a matcher that matches the given content .
4442	Term returns a matcher .
4443	UnmarshalJSON deserializes a MapMatcher .
4444	objectToString converts obj to string
4445	match returns a matcher that matches the given params
4446	AddMessage creates a new MessageInteraction
4447	AddInteraction creates a new interaction
4448	Teardown shuts down the Pact server .
4449	Verify verifies the pact .
4450	stateHandler middleware middleware
4451	VerifyMessageProviderRaw implements the PactProvider interface .
4452	VerifyMessageConsumer consumes a message consumer .
4453	VerifyProvider is part of the mock
4454	NewService creates a new mock instance
4455	Setup initializes the service manager .
4456	addServiceMonitor adds the process monitor to the daemon
4457	removeServiceMonitor removes the process monitor
4458	List lists all processes
4459	Command returns the command .
4460	call mocks base method
4461	DeleteInteractions deletes all interactions .
4462	AddInteraction adds an interaction .
4463	WritePact writes pact to pact file
4464	ExpectToReceive sets the description of the message .
4465	WithMetadata mocks base method
4466	AsType sets the type of the message .
4467	UserLogin returns the login response .
4468	Region returns the region name .
4469	New returns a new S3 instance
4470	Bucket creates a new bucket .
4471	PutWriter writes a file to the bucket .
4472	url returns the URL for the bucket .
4473	SetLogger sets the logger with the given prefix .
4474	InstanceKeys returns the keys of the role
4475	EnvKeys returns the keys from the environment
4476	Sign signs the request .
4477	getAWSKeys returns the AWS SDK keys
4478	homeDir returns the home directory .
4479	AC ACL header
4480	putPart uploads a part
4481	Aborts the upload .
4482	growPartSize returns true if the chunk size is greater than maxSize .
4483	CheckDisallowed checks if the given spec is disallowed .
4484	Process parses the given spec .
4485	MustProcess will panic if the given spec is valid .
4486	toTypeDescription returns the description of a type .
4487	Usage prints the given spec .
4488	Usagef returns the usage for the given spec .
4489	Usaget returns a template for the given spec .
4490	Scan sets the value for the given value .
4491	Value returns the value of the time .
4492	NewTime returns a new Time instance
4493	TimeFromPtr converts a pointer to a Time object .
4494	ValueOrZero returns the value of the time or zero .
4495	MarshalJSON returns the JSON representation of the time .
4496	SetValid sets the Time field s value .
4497	Ptr returns a pointer to a time .
4498	NewBool returns a new Bool .
4499	BoolFromPtr converts a pointer to a Bool .
4500	UnmarshalJSON deserializes a Bool .
4501	UnmarshalText deserializes a Bool .
4502	MarshalJSON marshals a Bool .
4503	SetValid sets the boolean value .
4504	NewString returns a new String .
4505	UnmarshalJSON deserializes a string .
4506	MarshalText returns the string representation of the string .
4507	UnmarshalText deserializes a string .
4508	SetValid sets the Valid field s value .
4509	StringFromPtr converts a string to a string .
4510	MarshalJSON returns the JSON representation of the string .
4511	NewInt returns a new Int64 .
4512	IntFromPtr converts an int64 to Int .
4513	UnmarshalJSON unmarshals a int .
4514	MarshalText returns a string representation of Int .
4515	SetValid sets the int64 value .
4516	UnmarshalText unmarshals a int from a string .
4517	MarshalText returns the string representation of the Bool .
4518	SetValid sets the float64 value .
4519	MarshalJSON returns the JSON representation of the time .
4520	UnmarshalJSON deserializes a float .
4521	UnmarshalText unmarshals a float .
4522	MarshalJSON marshals a float to JSON .
4523	newGossipChannel creates a new gossip channel
4524	GossipUnicast sends a message to the gossip channel .
4525	GossipBroadcast sends a gossip message to the gossip channel .
4526	Send sends data to gossip channel
4527	SendDown sends a message to the gossip channel .
4528	obcode encodes a slice of items into a byte slice .
4529	newTokenBucket creates a new token bucket .
4530	wait waits until the next token is reached .
4531	capacityToken returns the capacity of the token .
4532	PrefixRangeEnd returns the end of the given prefix .
4533	newLocalPeer creates a new local peer .
4534	getConnections returns a set of connections for the peer .
4535	createConnection creates a new connection
4536	doAddConnection adds a connection to the local peer .
4537	startLocalConnection starts a local connection
4538	Send protocol message
4539	NewStatus returns a new Status instance
4540	makePeerStatusSlice returns a slice of peers
4541	makeUnicastRouteStatusSlice returns a slice of unicode routes
4542	makeBroadcastRouteStatusSlice returns a slice of broadcast routes .
4543	makeLocalConnectionStatusSlice returns a slice of local connections .
4544	makeTrustedSubnetsSlice returns a slice of trusted subnets
4545	Range implements the EtcdStore interface .
4546	Put implements the Store interface .
4547	DeleteRange implements the EtcdStore interface .
4548	Txn is part of the EtcdStore interface .
4549	Compact implements the EtdStore interface .
4550	provisionInternalRaftRequest is used to propose an internal RPC request to the server .
4551	applyCompare computes the comparison between two keys .
4552	Describes returns a list of available peers .
4553	OnGC adds a callback to the list of peers .
4554	OnInvalidID adds a callback to the peers list
4555	Choose a random peer from the peers .
4556	fetchWithDefault adds a new peer to the peer .
4557	Fetch returns a peer by name .
4558	fetchAndAddRef fetches a peer by name .
4559	FetchByShortID returns a peer by shortID .
4560	GarbageCollect garbage collected from peers .
4561	newRoutes creates a new routes .
4562	OnChange registers a callback for all routes .
4563	Uast returns the peer name for the given name .
4564	UastAll returns the IP address for the given peer name .
4565	Broadcast returns a list of peer names .
4566	BroadcastAll returns all peers for the given peer name .
4567	NewPeer creates a new peer .
4568	Register registers a new peer .
4569	ReadFrom mocks base method
4570	WriteTo writes a packet to dst .
4571	LocalAddr returns the local address for this peer .
4572	OnGossip is part of the peer .
4573	OnGossipBroadcast is part of the peer .
4574	OnGossipUnicast is part of the peer .
4575	NewDefaultServer creates a new default server .
4576	PeerNameFromUserInput returns peer name from user input .
4577	bytes returns a byte slice of the peer name .
4578	NewRouter creates a new router
4579	sendAllGossip sends all gossip messages .
4580	sendAllGossipDown sends all gossip messages to the given connection .
4581	broadcastTopologyUpdate broadcasts the given list of peers .
4582	OnGossipUnicast implements router .
4583	OnGossipBroadcast is part of the router .
4584	Gossip returns the gossip data
4585	OnGossip is part of the router
4586	Encode encodes the topology gossip data .
4587	newState returns a new state .
4588	Merge merges the given GossipData .
4589	mergeReceived merges the given set of peers into the state .
4590	mergeComplete merges the set of peers into the state .
4591	OnGossipBroadcast returns a new gossip data .
4592	OnGossip implements the gossip interface .
4593	generateKeyPair returns the public key pair and private key
4594	formSessionKey creates a new session key .
4595	newTCPCryptoState returns a new tcpCryptoState .
4596	Send implements gobPSender .
4597	Send sends a message to the writer .
4598	Send sends a message to the sender .
4599	Receive returns a byte slice .
4600	Receive receives a message from the buffer .
4601	Receive receives an encrypted message from the receiver .
4602	newPeer creates a new peer
4603	Increment the current peer .
4604	Gossip returns the state of the peer .
4605	OnGossipUnicast sends a message to the peer .
4606	makeRaftPeer creates a new raft peer .
4607	String returns a string representation of the peer .
4608	forEachConnectedPeer iterates over all connections in the peer .
4609	parsePeerUID converts a string to a PeerUID .
4610	Swap swaps two peers .
4611	Less returns true if the list of peers are sorted .
4612	doIntro implements the introspection interface .
4613	filterV1Features returns a map of supported features .
4614	newConnectionMaker creates a new connection maker
4615	connectAborted sends an error to the target .
4616	newGossipSender creates a new gossipSender
4617	Send sends data to gossip .
4618	Broadcast sends a gossip message to the gossip channel .
4619	Flush implements the gossipSender interface .
4620	Sender returns a new gossipSender .
4621	Flush flushes all gossipers .
4622	findMainPath returns the main path of the main function
4623	Create creates a new channel .
4624	Send sends a message to the client .
4625	SendJSON sends a JSON message to the client .
4626	remapError removes an error from the API .
4627	NamespacedContext returns a new context with the given namespace .
4628	protoItemToItem converts a proto to a MemcacheGetResponse .
4629	singleError returns an error if an error occurs .
4630	Get retrieves a item from the cache .
4631	GetMulti returns a map with the given key .
4632	Delete deletes a key .
4633	DeleteMulti deletes a list of keys .
4634	Increment increments the value of the given delta .
4635	IncrementExisting adds a delta to the given key .
4636	set sets the value for the given item .
4637	Get implements the Codec interface .
4638	Stats returns the memcache statistics .
4639	Flush flushes memcache .
4640	RunInBackground runs the given function in the background .
4641	List mocks base method
4642	SetNumInstances mocks base method
4643	Versions returns a list of versions for the given module .
4644	DefaultVersion returns the default version of the module .
4645	Start mocks base method
4646	Stop stops a module .
4647	An ancestor of the query .
4648	EventualConsistency sets the eventual consistency of the query .
4649	Project sets the fields of the query .
4650	Distinct sets the distinct query .
4651	DistinctOn sets the distinct field names .
4652	KeysOnly sets the keys only .
4653	Limit sets the limit .
4654	Offset sets the offset of the query .
4655	BatchSize sets the size of the query .
4656	Start starts the query .
4657	End sets the end of the query .
4658	Count returns the number of results in the query .
4659	Run runs the query .
4660	Next returns the next key .
4661	Cursor returns the current cursor .
4662	String returns a string representation of the cursor .
4663	DecodeCursor decodes a string .
4664	saveEntity saves an entity to a proto .
4665	Namespace returns a context with the given namespace .
4666	typeof returns the type of a type
4667	dot returns the dot notation for the given type .
4668	joinFunc returns a string representation of the input string
4669	validPropertyName returns true if the name is valid .
4670	getStructCodec returns a struct for the given type .
4671	LoadStruct loads a struct from a struct
4672	SaveStruct saves a struct to a struct
4673	 ServingURL returns the URL for the given blob .
4674	DeleteServingURL deletes an image from the server .
4675	CurrentOAuth returns the current user
4676	OAuthConsumerKey returns the OAuthConsumerKey associated with the given context .
4677	String returns the string representation of the user .
4678	LoginURL returns the login URL .
4679	LoginURLFederated creates a login URL .
4680	LogoutURL returns the logout URL .
4681	insertContext inserts a context into a context .
4682	NewClient creates a new http client .
4683	NewContext returns a new context for the client .
4684	NewRemoteContext returns a new context .
4685	Debugf logs a formatted message .
4686	GuestBookKey returns the guestbook key .
4687	toRetryParameters returns a new TaskQueueRetryParameters .
4688	NewPOSTTask creates a new task
4689	ParseRequestHeaders parses the request headers and returns the response headers .
4690	Add adds a task to the queue .
4691	AddMulti adds multiple tasks to the queue .
4692	Delete deletes a task .
4693	DeleteMulti deletes a task queue .
4694	Lease returns a list of tasks for a given queue .
4695	LeaseByTag returns a task by tag name .
4696	Purge deletes a task queue
4697	ModifyLease mocks base method
4698	QueueStats returns a list of tasks for a given queue names .
4699	IsTimeoutError returns true if the given error is a timeout .
4700	Func registers a function with the given key .
4701	Task returns a taskqueue .
4702	RequestHeaders returns the request headers .
4703	WithContext adds a context to the context .
4704	WithAPICallFunc adds a call to the context .
4705	APICalls API calls API calls API call
4706	ModuleHostname returns the hostname of a module .
4707	AccessToken returns the access token for the given scopes .
4708	PublicCertificates returns a list of all public certificates .
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the given bytes in bytes .
4711	Fetch data from the reader .
4712	seek implements the Reader interface .
4713	multiKeyToProto converts a list of keys to a proto definition .
4714	referenceValueToKey converts a property value to a KeyValue .
4715	keyToReferenceValue converts a key to a reference value .
4716	Put implements the Put interface .
4717	PutMulti implements the Put interface .
4718	Delete deletes a key .
4719	DeleteMulti deletes multiple keys .
4720	Deploy deploy command
4721	Next returns the next record .
4722	protoAppLogs converts proto to appLogs
4723	pbToRecord converts a RequestLog to a RecordLog
4724	Run runs the query .
4725	run runs the read operation .
4726	Current returns the current user .
4727	IsAdmin returns true if the user is admin .
4728	isErrFieldMismatch returns true if the error occurred .
4729	Stat returns the blob info .
4730	Send sends a blob to the response .
4731	UploadURL creates a new upload URL .
4732	Delete deletes a blob .
4733	DeleteMulti deletes a blob .
4734	NewReader returns a new reader .
4735	Handle adds a message to the appengine .
4736	Send sends a message to the client .
4737	Invite sends an invite to the client .
4738	Send sends the presence of the presence of the message .
4739	GetPresence returns the presence of a given user .
4740	GetPresenceMulti returns a list of all the presence of a given list .
4741	newStructFLS returns a FieldLoadSaver .
4742	SaveStruct saves a struct with meta data
4743	Namespaces returns the namespaces for the given namespace .
4744	Kinds returns the list of keys in the given context .
4745	RunInTransaction runs a transaction in a transaction .
4746	import returns true if the file is imported .
4747	importSpec returns the import spec .
4748	declImports returns true if the given path is imported .
4749	isPkgDot returns true if the given package is a package .
4750	isTopName returns true if the given expression is top name .
4751	isName checks if the expression is a name .
4752	isCall returns true if the given expression is a call .
4753	referTo returns true if the given node matches the given x .
4754	isEmptyString returns true if the expression is empty .
4755	countUses returns the number of nodes in the given scope .
4756	assignTo returns true if x is assigned to x .
4757	newPkgDot creates a new selector .
4758	renameTop renames a file .
4759	matchLen returns the number of characters in x .
4760	deleteImport deletes an import .
4761	Rewrite import path .
4762	DefaultTicket returns the default ticket .
4763	FlushLog is used to flush log messages .
4764	withDeadline returns a context with the given deadline .
4765	KeepAlive implements the Conn interface .
4766	applyTransaction applies the given transaction to the given proto .
4767	Analyzes the given tags .
4768	buildContext returns a new build context .
4769	syntizeMain is used to synthesize the main file .
4770	findInGopath finds the path in the given directory .
4771	copyTree copies a tar file into a tar archive .
4772	copyFile copies a tar file to a tar file .
4773	checkMain checks if the main package is main .
4774	isMain returns true if f is a main function .
4775	readFile reads a file .
4776	initField initializes the field with the given index .
4777	loadEntity loads an entity from a ProtoProto .
4778	validIndexNameOrDocID returns true if the given string is valid .
4779	Open creates a new index .
4780	Put implements the Index interface .
4781	Get retrieves a document from the index .
4782	Delete deletes the given id .
4783	DeleteMulti deletes multiple documents .
4784	Search implements the Index interface .
4785	Fetches the next item from the iterator .
4786	Next returns the next document .
4787	Facets returns a list of facet results .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the key is valid .
4790	Equal returns true if two keys are equal .
4791	root returns the root of the key .
4792	Marshal implements the marshaler interface .
4793	String returns a string representation of the key .
4794	Encode returns a string representation of the key .
4795	DecodeKey decodes a key into a Key .
4796	NewIncompleteKey creates a new Key .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates a list of IDs .
4799	IsOverQuota returns true if the error is an error .
4800	ClassicContextFromContext converts a context to an appengine context .
4801	Send sends a message .
4802	SendToAdmins sends a message to admins .
4803	Failures returns the number of failures .
4804	decodeFieldNumberAndTyp3 parses a field number and returns it .
4805	checkTyp3 checks if the given type is a valid type .
4806	decodeTyp3 decodes a type from a byte slice .
4807	NewPrefixBytes returns a new PrefixBytes .
4808	getLengthStr returns the length of the type
4809	collectImplementers collects all the implementations of the given type .
4810	checkConflictsInPrio checks if the given type is in prio .
4811	constructConcreteType returns the concrete type for the given type .
4812	MarshalBinaryLengthPrefixedWriter implements io . Writer .
4813	MarshalBinaryBinaryBinary encodes an object into a byte slice .
4814	UnmarshalBinaryLength implements the Codec interface .
4815	UnmarshalBinaryBinary unmarshals a byte slice into a pointer .
4816	MustMarshalJSON marshals an object into a byte slice .
4817	MustUnmarshalJSON unmarshals a byte slice into a pointer .
4818	MarshalJSONIndent writes an object to JSON .
4819	newDataReader returns a new internal data reader .
4820	Read reads data from internal data .
4821	ListenAndServeTLS is used to listen on the server .
4822	Produce produces a new Producer
4823	PromoteHandlerFunc is used to promote a handler for the given function .
4824	Serve implements the Serve interface .
4825	Serve implements the Server interface .
4826	Fail implements the parser .
4827	WriteUsage implements io . Writer
4828	WriteHelp implements io . Writer
4829	MustParse returns a new parser .
4830	Parse parses the arguments and returns an error .
4831	walkFields recursively walk all fields .
4832	Parse parses the command line arguments .
4833	setSlice sets the value of a slice .
4834	canParse returns true if the type can be parsed .
4835	isBoolean returns true if t is a boolean type .
4836	NewFromMap creates a new Tree from a map .
4837	Insert inserts a string into the tree .
4838	Delete removes a node from the tree .
4839	DeletePrefix removes a prefix from the tree .
4840	deletePrefix removes a prefix from the tree .
4841	Get returns the value of the given string
4842	LongestPrefix returns the longest prefix of the given string .
4843	Min returns the minimum value of the tree .
4844	WalkPrefix walks the tree with the given prefix .
4845	recursiveWalk returns true if the node is recursive .
4846	ToMap converts the tree to a map .
4847	check ip address
4848	read uint32 read32
4849	readuint128 reads a uint32 from the given position .
4850	loadMessage loads an IP2Location record from a message .
4851	PrintRecord prints an IP2Location record .
4852	Main is the main implementation of the main function .
4853	SaveToPdfFile saves a PDF to a file .
4854	CubicCurveTo implements the Cubic curve interface .
4855	ArcTo implements the PathTo interface .
4856	String returns a string representation of the path .
4857	VertipFlip returns a copy of the path .
4858	NewGlyphCache creates a new GlyphCache .
4859	Fetch fetches a glyph from a glyph .
4860	renderGly renders a glyph
4861	Copy returns a copy of Glyph .
4862	Fill fills the glyph with the given coordinates .
4863	Main is the main implementation of the main function .
4864	Draw draws the line at the specified position .
4865	Paints the given raster .
4866	SetColor sets the color of the Painter .
4867	NewPainter returns a new Painter .
4868	GetStringBounds gets the bounds of a string
4869	calc recalculate the current font size
4870	SetFont sets the font .
4871	ClearRect clears the rectangle .
4872	drawString draws a string
4873	newGroup creates a new group .
4874	newMask creates a new mask
4875	embedSvgFont embeds a SVG font
4876	TraceQuad is a helper function for TraceQuad
4877	GetFontName returns the font name .
4878	NewStackGraphicContext creates a new StackGraphicContext
4879	NewFolderFontCache returns a new FolderFontCache instance
4880	NewSyncFolderCache returns a new SyncFolderCache instance
4881	Main is the main function to draw the image
4882	NewPdf creates a new PDF .
4883	clearRect clears a rectangle
4884	NewGraphicContext creates a new GraphicContext .
4885	Clear clears the graphics .
4886	GetStringBounds returns the bounds of a string .
4887	CreateStringPath returns the path of a string
4888	FillStringAt draws a string at the specified position at the specified position .
4889	SetStrokeColor sets the stroke color
4890	SetFillColor sets the color of the graphic .
4891	SetLineDash sets the line dash
4892	SetLineWidth sets the line width
4893	Main is the main function for drawing samples
4894	Draw draws a string with the given text
4895	SaveToPngFile saves the image to png file .
4896	LoadFromPngFile loads image from png file .
4897	Resource returns a path to a resource .
4898	Output returns the output for the given name .
4899	Main is the main function for the main script .
4900	Draw takes a filename and writes it to a file .
4901	Main is the main function for drawing samples .
4902	 Bubble Bubble
4903	Dash adds a dash to the graph .
4904	CubicCurve implements the Cubic curve .
4905	FillStroke draws a stroke .
4906	FillStyle fills the image with the given coordinates .
4907	PathTransform applies a path to the canvas .
4908	Star draws the image at the specified position .
4909	Draw draws the canvas .
4910	ConvertPath converts a path to PDF
4911	Main is the main function for drawing samples
4912	Draw draws a line with the given shape .
4913	DrawContour draws a contour from a set of points .
4914	Flatten flattens a path into a Flatten .
4915	Clear clears the canvas .
4916	ClearRect clears a rectangle .
4917	DrawImage draws an image from the given image .
4918	Main is the main function for Drawing .
4919	Draw draws a PNG image .
4920	Draw draws a rectangle .
4921	ChecksumString32 returns the checksum of a string .
4922	ChecksumString64 returns the checksum of a string .
4923	NewS32 returns a new XXHash32 .
4924	NewS64 returns a new XXHash64 .
4925	round64 rounds the given value .
4926	Checksum32 checksum for the given input .
4927	Checksum64 checksum for a given byte slice .
4928	getStage returns the current stage .
4929	New returns a new Glg instance
4930	Get returns a new Glg instance
4931	SetMode sets the mode of the logger .
4932	SetPrefix sets the prefixed prefix .
4933	GetCurrentMode returns the current mode for the given level .
4934	InitWriter initializes the logger .
4935	SetWriter sets the writer s writer .
4936	SetLevelColor sets the color of the logger .
4937	SetLevelWriter sets the writer to the given writer .
4938	AddStdLevel adds a level to the logger .
4939	EnableColor sets the color of the logger .
4940	EnableLevelColor sets the color of the logger .
4941	DisableLevelColor sets the color of the logger .
4942	RawString converts a string into a string .
4943	TagStringToLevel returns the level of the given tag .
4944	Println prints the given value .
4945	Fatal prints a fatal error message .
4946	Fatalf prints a FATAL message .
4947	isModeEnable returns true if the given level is enabled
4948	CaptureMetrics returns a new metrics for the given request .
4949	get returns the value at the given position .
4950	Save saves the data to disk .
4951	SaveToFile saves data to a file
4952	Load loads data from an io . Reader
4953	Load from file
4954	Key returns the key at the given id .
4955	Value returns the value at the given id .
4956	Delete deletes the given key .
4957	Set sets the version .
4958	Compare compares two versions .
4959	Slice returns a slice of version numbers .
4960	BumpMajor increments the major version .
4961	BumpMinor increments the minor version .
4962	BumpPatch updates the version .
4963	validateIdentifier validates a string
4964	newStream returns a new Stream
4965	addSubscriber adds a subscriber to the stream .
4966	New returns a new Server
4967	Close closes all streams .
4968	CreateStream creates a new stream .
4969	RemoveStream removes a stream from the server .
4970	StreamExists checks if a stream exists .
4971	Publish publishes an event .
4972	NewClient returns a new Client
4973	Subscribe sends an event to the client .
4974	SubscribeChan subscribes to a channel
4975	SubscribeRaw adds a subscriber to the client .
4976	Unsubscribe removes a channel from the client .
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent reads an event from the stream .
4979	HTTPHandler implements the http . Handler interface .
4980	Add adds a new event to the log .
4981	Replay implements the EventLog interface .
4982	readKey reads a key from a file .
4983	writeKey writes a private key to a file .
4984	anyKey reads a key from a file .
4985	sameDir returns the filename for the given filename
4986	printAccount prints information about the account
4987	tpl renders the given text using the given data .
4988	printUsage prints the usage of the command
4989	FromRequest returns the host address from the request .
4990	Do executes the ClearParams command .
4991	Do executes the disable command .
4992	Do removes DOMStorageItemItemItemItem .
4993	Do executes the DOMStorageItemParams command .
4994	Do executes the DeliverPushMessage .
4995	Do executes the dispatch command .
4996	Do executes the inspect command
4997	DoUpdateOnPageLoad executes the SetUpdateOnPageLoadParams command .
4998	Do executes the command .
4999	Do executes the command .
5000	Do executes the StopAllWorkers command .
5001	Do executes the stop worker .
5002	Do executes the command .
5003	Do executes the update command .
5004	Do executes the bind params
5005	Do executes the command .
5006	Error returns the error message .
5007	Do executes the release params
5008	Do executes the request .
5009	Do executes the command .
5010	Do executes the SetPlaybackRateParams command .
5011	Do executes the command .
5012	Do executes the PrepareForLeakDetectionParams .
5013	DoJavaScript implements the Executor interface .
5014	Do executes the PutPressureNotifications command .
5015	Do executes the simulation .
5016	WithSamplingInterval sets the SamplingInterval field s value .
5017	WithSuppressRandomness sets the SuppressRandomness field s value .
5018	Do executes the StartSamplingParams command .
5019	Do executes the StopSamplingParams command .
5020	Do executes the ClearDeviceOrientationOverride .
5021	Do sets the device orientation override .
5022	Do executes the StartViolationsReport .
5023	Do executes the StopViolationsReport .
5024	String returns the string representation of the Modifier .
5025	WithNodeID adds the nodeID to the get part of the node .
5026	WithBackendNodeID sets the BackendNodeID field s value .
5027	WithObjectID sets the ObjectID field s value .
5028	WithFetchRelatives sets the FetchRelatives field s value .
5029	Do executes the SetTimeDomainParams command .
5030	WithClipRect sets the ClipRect field s value .
5031	Do executes the release command .
5032	Do executes a clear command .
5033	Do executes the delete command .
5034	Do executes the DeleteObjectStoreEntries command .
5035	WithKeyRange sets the KeyRange field s value .
5036	Do executes the SetSamplingIntervalParams command .
5037	Do executes the command .
5038	WithCallCount sets the CallCount field s value .
5039	WithDetailed adds detailed details to the StartPreciseParams instance
5040	Do executes the StartPreciseCoverageParams command .
5041	Do executes the StartTypeProfileParams command .
5042	Do executes the StopPreciseCoverageParams command .
5043	Do executes the StopTypeProfileParams command .
5044	Do executes the SetIgnoreCertificateErrors command .
5045	DoInspectedHapObject executes the command .
5046	Do executes the collector .
5047	WithSamplingInterval sets the SamplingInterval field s value .
5048	Do executes the StartHeapObjects command .
5049	WithReportProgress sets the ReportProgress field s value .
5050	Do executes the StopTrackingHapObjects command .
5051	WithReportProgress sets the ReportProgress field s value .
5052	Do executes the command to execute the command .
5053	WithBrowserContextID sets the BrowserContextID field s value .
5054	Do executes the command .
5055	WithBrowserContextID sets the BrowserContextID field s value .
5056	Do executes the command .
5057	Do executes the CrashParams .
5058	Do executes the crash process .
5059	WithQuery adds the query to the getHistograms params
5060	WithTargetID sets the TargetID field s value .
5061	Do executes the command line command .
5062	WithImage sets the ImageParams field s value .
5063	Do executes the command .
5064	Do executes the delete command .
5065	Do executes the DeleteEntry .
5066	WithPathFilter sets the PathFilter field s value .
5067	Do executes the Discard search results .
5068	Do executes the command .
5069	Do executes the markdown state .
5070	WithIncludeUserShadowDOM sets the IncludeUserShadowShadowDOM field s value .
5071	Do executes the redo command
5072	Do executes the remove command .
5073	Do executes the remove command .
5074	Do executes the request .
5075	WithNodeID sets the NodeID field s value .
5076	WithBackendNodeID sets the BackendNodeID field s value .
5077	WithExecutionContextID sets the ExecutionContextID field s value .
5078	Do executes the command .
5079	WithName adds the name to the setAttributes params
5080	Do executes the command .
5081	Do executes the command .
5082	Do executes the command .
5083	Do executes the command .
5084	Do executes the command .
5085	Do executes the undo command .
5086	Do executes the ForcePseStateParams command .
5087	Do sets the effective property value for this node .
5088	Do executes the StartRuleUsageTrackingParams command .
5089	Do executes the CloseParams command .
5090	Do executes the ClearDataForOriginParams command .
5091	Do executes the command for tracking cache storage .
5092	Do executes the command .
5093	Do executes the UntrackStorageStorageForOriginForOriginForOriginWithOriginForOriginForOriginForOrigin returns an error .
5094	Do executes the UntrackedDBForOriginForOriginForOriginOriginWithOriginForOriginForOriginForOriginOrigin .
5095	Do executes the hide - highlight command .
5096	Do executes the highlight command
5097	WithNodeID adds the nodeID to the highlight node params
5098	WithBackendNodeID sets the BackendNodeID field s value .
5099	WithObjectID sets the ObjectID field s value .
5100	WithSelector adds the selector to the highlight node params
5101	Do executes the highlight command
5102	Do executes the highlight command .
5103	Do executes the highlight rectangle .
5104	WithHighlightConfig sets the highlightConfig field s value .
5105	Do executes the SetInspectMode command .
5106	Do sets the ShowAdlights params
5107	WithPausedMessage sets the MessagePausedMessage field s value .
5108	Do executes the command line params
5109	Do executes the ShowDebugBorders command .
5110	Do executes the ShowFPS counter command .
5111	Do executes the command on the screen .
5112	DoShowScrollBottleneckRects sets the ShowScrollBottleneckRectsRectsRectsRects rects .
5113	Do executes the ShowHitBordersParams command .
5114	SetShowViewportSizeOnResize sets the ShowViewportSizeOnResizeOnResizeParams on the screen .
5115	Do executes the command .
5116	Do executes the ClearBrowserCookies command .
5117	WithErrorReason sets the ErrorReason field s value .
5118	WithRawResponse sets the RawResponse field s value .
5119	WithURL adds the URL to the request params
5120	WithMethod adds the method to the request params
5121	WithPostData sets the PostData field s value .
5122	WithHeaders adds the headers to the request params
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field s value .
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do executes the delete command .
5129	WithConnectionType sets the ConnectionType field s value .
5130	Do executes the EmulateNetworkConditions params
5131	Do executes the enable command .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the request .
5134	Do executes the command .
5135	Do implements the ServiceBypassServiceWorker interface .
5136	Do executes the SetCacheDisabled command .
5137	WithURL adds the URL to the setCookie params
5138	WithDomain sets the DomainParams field s value .
5139	WithPath adds the path to the set cookie params
5140	WithSecure sets the SecureParams field s value .
5141	WithHTTPOnly sets the HTTPOnly field s value .
5142	WithSameSite sets the SameSite field s value .
5143	WithExpires sets the Expires field s value .
5144	Do executes the command .
5145	Do executes the SetSizeLimitsForTest .
5146	Do executes the command line params
5147	Do executes the request .
5148	Do executes the ClearDeviceMetricsOverride .
5149	Do executes the ClearGeolocationOverride .
5150	Do executes the reset page scale factor .
5151	Do sets the FocusEmulation enabled .
5152	Do executes the SetCPUThrottling RatettleRatePolicy .
5153	WithColorOverride adds the color to the default color override params
5154	DoDefaultBackgroundColorOverride sets the default background color override .
5155	WithScale sets the ScaleMetricsOverride field s value .
5156	WithDontSetVisible sets the dontSetVisibleSize field s value .
5157	WithScreenOrientation sets the ScreenMetricsOverride field s value .
5158	Do sets the device metrics override
5159	Do sets the scrollbars hidden .
5160	Do executes the CommandCookieDisabled command .
5161	DoEmitEventsForMouse events for mouse events .
5162	Do executes the command .
5163	WithLatitude sets the LatitudeOverride field s value .
5164	WithLongitude sets the LongitudeOverride field s value .
5165	WithAccuracy adds the accuracy to the SetGeolocationOverride params
5166	Do executes the command line command .
5167	Do the page scale factor
5168	Do executes the set script execution .
5169	WithMaxTouchPoints sets the MaxTouchPoints field s value .
5170	Do executes the command line command .
5171	WithBudget adds the budget to the budget params
5172	WithMaxVirtualTimeStrategy sets the MaxVirtualTimeTaskStarCount field s value .
5173	WithWaitForNavigation sets the WaitTimeForNavigation field s value .
5174	WithAcceptLanguage sets the AcceptLanguageOverride field s value .
5175	WithPlatform adds the platform to the setUserAgentOverride params
5176	Do executes the setUserAgentOverride .
5177	Do executes the dispatch command .
5178	Do executes the command .
5179	WithButtons adds the buttons to the dispatch event params
5180	Do executes the dispatch command .
5181	Do executes the dispatch command .
5182	Do executes an EmulateTouchFromMouseEvent .
5183	Do executes the command .
5184	Do performs a synchronize command .
5185	WithXOverscroll sets the xOverscroll field s value .
5186	WithYOverscroll sets the YOverscroll field s value .
5187	Do executes the SynthesizeScrollGesture command .
5188	Do performs the DohesizeTapGesture command .
5189	Domain returns the domain name .
5190	WithDepth adds the depth to the get event listeners .
5191	Do executes the RemoveDOMBreakpointParams command .
5192	WithTargetName sets the TargetListenerName field s value .
5193	Do a remove event listener
5194	Do executes the RemoveInstrumentationBreakpoint .
5195	Do executes the RemoveXHRBreakpoint .
5196	Do executes the DOMBreakpointParams command .
5197	Do executes the set event listener
5198	Do executes the SetInstrumentationBreakpoint .
5199	Do executes the setXHRBreakpoint .
5200	WithExecutor adds an executor to the given context .
5201	Execute implements the Executor interface .
5202	AttributeValue returns the attribute value for the given name .
5203	xpath returns the path of the node
5204	String returns the string representation of the node type .
5205	Do sets the SinkToUseToUse params
5206	Do executes the StartTabMirroring command .
5207	Do executes the StopCastingParams command .
5208	Do executes the command .
5209	Do executes the StopObservingParams command .
5210	Do executes the command .
5211	Do executes the command .
5212	WithObjectID sets the ObjectID field s value .
5213	WithArguments adds the arguments to the CallFunction .
5214	WithExecutionContextID sets the ExecutionContextID field s value .
5215	WithObjectGroup sets the ObjectGroup field s value .
5216	Do executes the command .
5217	WithContextID sets the ContextID field s value .
5218	WithOwnProperties sets the OwnProperties field s value .
5219	WithGeneratePreview sets the generatePreview field s value .
5220	WithExecutionContextID sets the ExecutionContextID field s value .
5221	WithObjectGroup sets the ObjectGroup field s value .
5222	Do executes the release command .
5223	Do executes the release command .
5224	Do executes the command .
5225	Do executes CustomObjectFormatter .
5226	DoCallStackSizeToCapture captures the maximum number of calls to CaptureStackStackSizeToCapture .
5227	Do executes the command .
5228	Do executes the command .
5229	Do executes the remove binding params
5230	Do executes the command .
5231	Do executes the RPC command .
5232	WithBufferUsageInterval sets the BufferUsageInterval field s value .
5233	WithNoDisplayUpdates sets the NoDisplayUpdates field s value .
5234	WithScreenshot sets the screenshot params
5235	Do executes the BringToFront params
5236	WithClip adds the clip to the viewport params
5237	WithSurface sets the FromSurface field s value .
5238	WithWorldName sets the WorldName field s value .
5239	WithGrantUniveralAccess sets the GrantUniveralAccess field s value .
5240	Do executes the command .
5241	WithPromptText sets the PromptText field s value .
5242	Do executes the command .
5243	WithReferrer sets the Referrer field s value .
5244	WithTransitionType sets the transitionType field s value .
5245	WithFrameID sets the frameID field s value .
5246	Do executes the navigateToHistoryEntry .
5247	WithLandscape sets the Landscape field s value .
5248	WithDisplayHeaderFooter sets the DisplayHeaderFooter field s value .
5249	WithPrintBackground sets the PrintBackground field s value .
5250	WithScale returns a copy of PrintToPDPars params
5251	WithPaperWidth sets the PaperWidth field s value .
5252	WithPaperHeight sets the PaperHeight field s value .
5253	WithIgnoreInvalidPageRanges sets the IgnoreInvalidPageRanges field s value .
5254	WithFooterTemplate sets the FooterTemplate field s value .
5255	WithPreferCSSPageSize sets the PreferCSageSize field s value .
5256	WithScriptToEvaluateOnLoad sets the ScriptToEval field s value .
5257	Do executes the reload command .
5258	Do executes the RemoveScriptToEvaluate command .
5259	Do executes the screencast frame .
5260	Do executes the command .
5261	Do executes the setBypassCSPParams command .
5262	Do sets the FontFamilies params
5263	Do sets the FontSizes params
5264	Do executes the command .
5265	WithDownloadPath sets the DownloadPath field s value .
5266	Do executes the GetDownloadBehavior .
5267	Do executes the command line command
5268	WithFormat sets the FormatParams field s value .
5269	WithMaxWidth sets the MaxWidth field s value .
5270	WithMaxHeight sets the MaxHeight field s value .
5271	WithEveryNthFrame sets the EveryNthFrame field s value .
5272	Do executes the command .
5273	Do executes the StopLoadingParams command .
5274	Do executes the DeployLifecycleState .
5275	Do executes the StopcastParams command .
5276	Do executes the command .
5277	Do executes the command .
5278	Do executes the command .
5279	WithGroup sets the GroupParams field s value .
5280	Do executes the command .
5281	Do executes the command .
5282	WithBindingName sets the BindingName field s value .
5283	Do executes the ExposeDevToolsProtocol .
5284	WithBrowserContextID sets the BrowserContextID field s value .
5285	WithSessionID sets the SessionID field s value .
5286	Do executes the command .
5287	Do executes the DisposeBrowserContext params
5288	WithSessionID sets the SessionID field s value .
5289	Do sends a command to target target
5290	Do executes the command .
5291	Do executes a set of discover targets .
5292	Do executes the command .
5293	WithPatterns adds patterns to the enable params
5294	WithHandleAuthRequests sets the HandleAuthRequests field s value .
5295	Do executes the fail request .
5296	WithBody sets the BodyParams field s value .
5297	WithResponsePhrase sets the ResponsePhrase field s value .
5298	Do executes the request .
5299	WithURL adds the URL to the ContinueRequest params
5300	WithMethod sets the RequestParams field s value .
5301	WithPostData sets the PostData field s value .
5302	WithHeaders adds the headers to the continue request params
5303	Do executes the request .
5304	Do executes the command .
5305	Do executes the command line command .
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field s value .
5307	Do executes the PauseParams command .
5308	Do executes the PauseOnAsyncCall params
5309	Do executes the RemoveBreakpointParams command .
5310	Do executes the command .
5311	Do async callbacks
5312	Do executes the set of blackbox patterns .
5313	Do sets the blackboxedRanges params
5314	WithURL adds the URL to the breakpointByURL params
5315	WithURLRegex sets the URLRegex field s value .
5316	WithScriptHash sets the ScriptHash field s value .
5317	WithColumnNumber sets the ColumnNumber field s value .
5318	WithCondition sets the ConditionOnCondition field s value .
5319	Do executes the command .
5320	Do executes the setPauseOnExceptions command .
5321	Do executes the command .
5322	WithDry sets the DryRun field s value .
5323	Do executes the SetSkipAllPauses command .
5324	Do executes the command .
5325	WithAsyncAsyncCall sets the BreakOnAsyncCall field s value .
5326	Do executes the StepInto command .
5327	Do executes the StepOut params
5328	Do executes the StepOverParams command .
5329	Listen listens for a network .
5330	ListenClose implements NetworkBundle interface .
5331	Connected adds a connection to the network .
5332	Disconnected is part of the network interface .
5333	OpenedStream is called when a stream is opened .
5334	CloseStream is called when a stream is closed .
5335	WithNoDial returns a context with the given reason .
5336	GetNoDial returns true if the context is not dialed .
5337	WithDialPeerTimeout returns a context with the given timeout .
5338	Open opens a connection .
5339	PrevPos returns the prev position of the buffer .
5340	Last returns the last item in the buffer .
5341	DeleteMostRecentBytes removes the most recent bytes from the buffer .
5342	NewFloat64RingBuf creates a new Float64RingBufBuf .
5343	TwoContig returns two floats .
5344	Earliest returns the first element of the buffer .
5345	Values returns a slice of float64 values .
5346	NewAtomicFixedSizeBufBufBuf returns a new AtomicFixedSizeBuf .
5347	Reset resets the buffer .
5348	NewPointerRingBufBuf creates a new PointerRingRingBufBufBufBufBuf .
5349	TwoContig returns two slices .
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the given code .
5353	Encoder returns the text encoder .
5354	Interpret reads a string from a string .
5355	Open opens a file .
5356	NewReader returns a new Reader with the given size .
5357	NewReaderEncrypted creates a new Reader from an io . Reader .
5358	 trailer .
5359	Kind returns the value of the value .
5360	newBuffer returns a new Buffer .
5361	Paginate returns a paginationInfo object
5362	 CascadeDelete deletes a document
5363	cascadeDeleteWithConfig is used to cascade a relationship with the given configuration .
5364	cascadeSaveWithConfig performs a cascade operation on a document .
5365	MapFromCascadeProperties converts a list of properties to a map .
5366	Connect connects to MongoDB .
5367	lowerInitial returns the lower case of a string
5368	Find returns a ResultSet with the given query .
5369	RawInformationQuery sends a raw query to the server .
5370	NewClient creates a new client .
5371	Close closes the client .
5372	startTLSIfRequired starts a stream with the given options .
5373	startStream starts a stream
5374	IsEncrypted returns true if the client is encrypted .
5375	Recv receives a message from the client .
5376	Send sends a chat .
5377	SendOrg sends an org
5378	SendKeepAlive sends a connection to the server .
5379	Send html message
5380	nextStart returns the next start element
5381	JoinProtectedMUC initiates a new MUC
5382	LeaveMUC removes a member from the server .
5383	AttachBuffer adds a buffer to the message .
5384	Attach attaches a file to the message .
5385	Inline adds a file to the message .
5386	AddHeader adds a header to the message .
5387	Takes a list of recipients to a list of recipients .
5388	Bytes returns a copy of the message .
5389	Send sends a message to the given address .
5390	GetHeader returns the header of the envelope .
5391	GetHeaderValues returns a slice of header values from the envelope .
5392	SetHeader adds a header to the envelope .
5393	AddHeader adds a header to the envelope .
5394	DeleteHeader deletes a header .
5395	AddressList returns the address list for the given key .
5396	Clone clones the envelope .
5397	ReadEnvelope reads an Envelope from an io . Reader .
5398	EnvelopeFromPart creates an Envelope from a part .
5399	parseTextOnlyBody parses the body part of the body .
5400	parseMultiPartBody parses the multipart body of the multipart body .
5401	matchHTMLBodyPartPart returns true if the part is a HTML body .
5402	ensureCommaDelimitedAddresses returns a string representation of a comma separated string .
5403	Date sets the date
5404	From adds an address to the builder .
5405	Subject sets the subject .
5406	To sets the address of the recipient .
5407	ToAddrs sets the ToAddrs field s value .
5408	CC adds a cc to the builder .
5409	CCAddrs sets the CCAddrs field s value .
5410	ReplyTo sets the reply to the given address .
5411	Header adds a header .
5412	AddAttachment adds an attachment to the message .
5413	AddFileAttachment adds a file attachment to a file .
5414	AddInline adds a part to the mail builder .
5415	Equals returns true if two MailBuilder objects are equal .
5416	Encode implements the Writer interface .
5417	encodeHeader encodes the header into a buffer .
5418	encodeContent encodes the content of the part .
5419	select transfer encoding
5420	setParamValue sets the value of a parameter .
5421	NewBase64Cleaner creates a new Base64Cleaner .
5422	decodeToUTF8Base64 converts a string into a UTF8 encoded string .
5423	parseMediaType parses a ctype and returns a mime type .
5424	fixMangledMediaType fix mime type
5425	detectMultipartMessage returns true if the part is a multipart message .
5426	detectBinaryBody detects if the part is a binary body .
5427	B BreadthMatchFirst returns the first part of the Part .
5428	B BreadthMatchAll returns the first part of the Part .
5429	DepthMatchFirst returns the first child part of the Part .
5430	DepthMatchAll returns a list of parts that match the given matcher .
5431	ToASCII converts a string to an ASCII string .
5432	NewPart creates a new Part .
5433	AddChild adds a child to the Part .
5434	TextContent returns true if the part is text .
5435	setupHeaders reads the part of the part .
5436	setupContentHeader headers
5437	convertFromDetectedCharset parses the content of a file .
5438	Clone returns a new Part .
5439	ReadParts reads the parts from the given io . Reader .
5440	parseParts parses the part of the part of the part .
5441	UUID returns a random UUID
5442	NewQPCleaner returns a new QPCleaner .
5443	Error returns the error message .
5444	addError adds an error to the part .
5445	addWarning adds a warning to the message .
5446	Wrap wraps a string into a slice of strings .
5447	ConvertToUTF8String converts a string to UTF8 string .
5448	JoinAddress returns a string representation of a list of addresses .
5449	Printf implements the markdown interface .
5450	EnvelopeToMarkdown converts an Envelope to Markdown .
5451	FormatPart formats an enmime part .
5452	newBoundaryReader creates a new boundary reader .
5453	Read implements the Reader interface .
5454	Next implements the Reader interface .
5455	Parse parses the given buffer and returns it .
5456	Assign assigns value to symbol
5457	NewRClient returns a new RClient
5458	NewRClientWithAuth returns a new RClient with the given port and password .
5459	Register registers a custom generator .
5460	Fuzz fuzzes an object with the given type .
5461	findFakeFunctionFor finds the fake function for the given fako .
5462	Apply applies options to options
5463	ToOption converts the options to an option .
5464	waitForClose closes the event channel .
5465	send sends an event to the channel channel .
5466	NewMovingAverage returns a new MovingAverage
5467	Set sets the variable value .
5468	calculateKeys50 returns a slice of keys for the given password
5469	getKeys returns the keys from the archive
5470	checkPassword checks if the password is valid
5471	parseFileEncryptionRecord parses a file encryption record .
5472	parseEncryptionBlock parses the encryption key .
5473	newArchive50 returns a new FileBlockReader
5474	Read implements io . ReaderReader .
5475	ReadByte implements the io . Reader interface .
5476	newCipherBlockReader creates a new cipher block .
5477	newAESDecryptReader returns a new AESDecryptReader .
5478	limitByteReader returns a limited number of bytes in bytes .
5479	Mode returns the mode of the file header .
5480	nextBlockInFile returns the next block in the packed file .
5481	next returns the next block .
5482	Read implements the io . Reader interface .
5483	Read implements the Reader interface .
5484	Next returns the next file header .
5485	NewReader creates a new Reader from the given io . Reader .
5486	OpenReader opens a readCloser with the given name and password .
5487	getV3Filter returns v3 filter .
5488	init initializes the decoder .
5489	Read block header .
5490	readCodeLengthTable reads the code length and adds it to the buffer .
5491	 shrink the state of the given slice .
5492	expandStates returns a slice of states .
5493	pushByte adds a byte to the heap .
5494	nextByte returns the successor of the given index .
5495	nextContext returns a new context for the given index .
5496	calculateAws30 params
5497	parseDosTime parses a DOS time .
5498	decodeName decodes a name into a string .
5499	readExtTimes reads the extensions from the file .
5500	readBlockHeader reads a block header from the archive .
5501	newArchiveReader creates a new archive .
5502	readFilter5Data reads the data from the filter .
5503	writeByte writes a byte to the window .
5504	copyBytes copies bytes from the window to the window .
5505	read reads from the window .
5506	queueFilter adds a filter to the decoder .
5507	process filters
5508	fill fills the decoded filter .
5509	Read implements the decoder interface .
5510	readFull reads the contents of an io . Reader .
5511	findSig finds the signature of a file .
5512	execute executes a command
5513	newVM returns a new VM
5514	limitBitReader returns a bit reader that reads a bit reader .
5515	readUint32 reads a uint32 from r .
5516	step3 step for step3
5517	Stem returns a stemmed word .
5518	step6 returns true if the word is a letter of the word .
5519	step5 step for step 5
5520	step22a is a helper function for step2
5521	step4Step runs a step on a snowball word .
5522	Stem removes words from the given language .
5523	step1c1 returns true if the snowball word is 1 .
5524	step3 step step .
5525	isStopWord returns true if word is a stop word .
5526	capitalizeYUI takes a word and turns it into a word .
5527	step2 step 2
5528	step3 step step .
5529	stepStep is the step of the snowball word
5530	VnvSuffix returns the suffix of the word .
5531	step1 step1 step
5532	step22a is a helper function for step2
5533	removePerfectiveEndingEnding returns true if the word ends with the given word .
5534	removeAdjectingEndingEnding returns true if the word ends with the given word .
5535	step2b2b is a helper function for step2 .
5536	step4 turns the word into a single word .
5537	step5 step step .
5538	Stem removes a word from a word .
5539	Stem removes words from a word .
5540	isStopWord returns true if word is a stop word .
5541	isStopWord returns true if word is a stop word .
5542	New returns a new SnowballWord .
5543	RemoveLastNRunes removes nunes from the Snowball word .
5544	resetR1R2 sets the R1R2 field s value .
5545	slice returns a slice of words from the SnowballWord
5546	FitsInR1 returns true if x1 is in r1
5547	FitsInR2 returns true if x2 is in r2 .
5548	FitsInRV returns true if x is in r .
5549	FirstPrefix returns the first prefix of the SnowballWord
5550	HasSuffixRunes returns true if the word has suffixRunes .
5551	FirstSuffixIfSuffix returns the first suffix of the word in the word .
5552	RemoveFirstSuffixIf is part of the SnowballWord .
5553	RemoveFirstSuffix removes the first suffix from the SnowballWord
5554	FirstSuffix returns the first suffix of the SnowballWord .
5555	preprocess preprocesses a snowball word
5556	stepStep returns true if the word is a step .
5557	step1b1 is the first step of the snowball word
5558	step2b2b is a helper function for step2 .
5559	Capitalizes a snowball word .
5560	uncapitalizeYs converts a Snowball word to a word .
5561	stemSpecialWord returns the stemmed word for the given word .
5562	isShortWord returns true if the word is a short word .
5563	step1A1 is part of the snowball word .
5564	Set sets the value for the given key .
5565	Get returns the value for the given key .
5566	Cleanup cleans up the goroutine .
5567	getValues returns the values for the current goroutine .
5568	linkGRs adds the parent data to the group
5569	unlinkGRs removes the goroutine from the goroutine .
5570	AppUri returns the uri for the given app name .
5571	CurlAppWithTimeout returns a string with the given timeout .
5572	CurlApp returns the URL of the given app .
5573	CurlAppRoot returns the root of the given app name .
5574	GetTags returns the tags of the given string .
5575	GetTagsAsUniqueStrings returns all tags in the given string .
5576	isTerminator returns true if r is a terminal .
5577	uniquify converts a list of strings into a list of strings .
5578	New returns a new gin . HandlerFunc .
5579	Get returns the url from the context .
5580	GenerateRSAKeyPair creates a new RSA key pair .
5581	Verify verifies that the given data is valid .
5582	Encrypt encrypts the given b .
5583	Sign signs a message .
5584	GetPublic returns the public key .
5585	Decrypt decrypts a private key
5586	UnmarshalRsaPrivateKey unmarshals a private key .
5587	GenerateKeyPair creates a new key pair with the given bits .
5588	GenerateKeyPairWithReader creates a new key pair with the given reader .
5589	GenerateEKeyPair returns the public key pair for the given curve name .
5590	UnmarshalPublicKey unmarshals a public key .
5591	MarshalPublicKey marshals a public key .
5592	UnmarshalPrivateKey unmarshals a private key .
5593	MarshalPrivateKey serializes a private key .
5594	KeyEqual returns true if two keys are equal .
5595	GenerateECDSAKeyPair creates a new ECSA key pair from the given io . Reader .
5596	GenerateECDSAKeyPairWithCurve creates a new ECDS key pair with the given curve .
5597	ECDSAKeyPairFromKey parses a private key from a private key .
5598	UnmarshalECDSAPrivateKey decodes an ECDSAP private key .
5599	UnmarshalECDSAPublicKey parses an ECDS public key .
5600	Equals returns true if the key is equal .
5601	Sign signs the given data .
5602	Equals returns true if two ECDS are equal .
5603	Verify verifies that the given data is valid .
5604	GenerateSecp256k1Key generates a private key and public key .
5605	UnmarshalSecp256PrivateKey unmarshals a Secp256 private key .
5606	UnmarshalSecp256PublicKey unmarshals a public key .
5607	Equals returns true if the given key is equal .
5608	Sign returns the signature for the given data .
5609	Equals returns true if the key is equal to the given key .
5610	Verify returns true if the given data is valid .
5611	Raw returns a raw byte slice .
5612	Sign signs a message with the given message .
5613	Equals returns true if the key is equal to the given key .
5614	Verify verifies that the given data is signed .
5615	UnmarshalEd25519PublicKey unmarshals a public key .
5616	UnmarshalEd25519 returns an Ed25519 private key .
5617	EditScriptForStrings implements the EditScript interface .
5618	EditScriptForMatrix returns the edit script for the given matrix .
5619	WriteMatrix writes a matrix to a writer .
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the lockfile .
5622	TryLock implements the Lockfile interface .
5623	Unlock unlocks the lockfile .
5624	NewBase returns a new instance of Base
5625	SetFallbackLogger sets the default logger .
5626	AddLogger adds a logger to the logger .
5627	LogWithTime implements the Logger interface .
5628	Log implements Logger interface .
5629	Warn mocks base method
5630	NewTemplateWithFuncMap creates a new template with the given func .
5631	Execute implements the Template interface .
5632	NewTemplateMsg creates a new TemplateMsg .
5633	NewLogAdapterFor returns a new LogAdapter instance
5634	SetAttr implements LogAdapter interface .
5635	LogWithTime implements the LogAdapter interface .
5636	Log implements LogAdapter .
5637	Dbgm m
5638	NewAttrsFromMap creates a new Attrs from a map .
5639	NewAttrsFromAttrs returns a new Attrs .
5640	MergeAttrs merges the attributes of the Attrs .
5641	SetAttr sets the value for the given key .
5642	GetAttr returns the value for the given key .
5643	RemoveAttr removes a key from the map .
5644	Attrs returns a map of attributes .
5645	Debug mocks base method
5646	Infom logs a message with a message .
5647	Warning mocks base method
5648	Errorm creates an error with the given message .
5649	Errorm creates an error with the given message .
5650	Fatalm prints a fatal error message .
5651	Dief is a helper function for Dief
5652	Diem is a helper function for Diem
5653	ToLogLevel converts a string to log level .
5654	CallErr sends a function to the given function .
5655	New creates a new StackdriverHook .
5656	Fire logs a logrus log entry .
5657	Level sets the levels of the stackdriver
5658	ProjectID sets the project ID .
5659	EntriesService sets the logging service .
5660	LoggingService sets the logging service .
5661	ErrorService sets the error service .
5662	HTTPClient adds a HTTP client to the stackdriver .
5663	MonitoredResource sets the logging resource .
5664	ErrorReportingLogName sets the error reporting log .
5665	Labels sets the labels for the stackdriver .
5666	PartialSuccess sets the partial success .
5667	GoogleComputeCredentials returns an Option for Google Clouddriver .
5668	NewEncoder creates a new encoder .
5669	NewDecoder returns a new Decoder .
5670	NewStreamEncoder creates a new stream encoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register registers a codec .
5673	Unregister removes the codecs from the registry .
5674	Lookup implements the Registry interface .
5675	Codecs returns a map of codecs
5676	Type returns the type of the error .
5677	Install installs an adapter .
5678	AdapterOf returns the adapter for the given type .
5679	AppendDuration appends a duration to b .
5680	formatInt writes a uint64 to buf .
5681	NewDecoder returns a new decoder .
5682	NewStreamDecoder returns a new stream decoder .
5683	Unmarshal implements the unmarshaler interface .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the zero value of the given type .
5686	NewValueParser returns a new ValueParser .
5687	ParseTag parses a tag .
5688	NewEncoder creates a new encoder .
5689	NewStreamEncoder creates a new stream encoder .
5690	NewPrettyEncoder returns a new encoder .
5691	NewPrettyStreamEncoder returns a new stream encoder .
5692	Marshal implements the marshaler interface .
5693	NewEncoder creates a new Encoder .
5694	EncodeArray encodes an array .
5695	EncodeMap encodes a map .
5696	NewStreamEncoder creates a new StreamEncoder .
5697	Open opens the stream .
5698	Close closes the stream .
5699	Encode implements StreamEncoder .
5700	newStructType creates a new struct type .
5701	lookup returns the struct type for the given type .
5702	clear clears the cache
5703	CheckUint64Bounds checks if the value is a valid uint64 .
5704	CheckInt64Bounds checks if the given int64 is valid .
5705	NewDecoder returns a new Decoder .
5706	Decode decodes the given value .
5707	DecodeArray implements the Decoder interface .
5708	DecodeMap decodes a map .
5709	NewStreamDecoder returns a new StreamDecoder .
5710	Len returns the length of the stream .
5711	Err implements the StreamDecoder interface .
5712	Decode decodes a stream .
5713	Encoder implements StreamEncoder .
5714	init initializes default flags
5715	LevelFromString returns the level of the given string .
5716	NewBackend returns a new Backend .
5717	callCallsite returns the location of the caller
5718	print prints a log message .
5719	Logger returns a logger with the given subsystem tag .
5720	Trace logs a message .
5721	Tracef logs a message to the logger .
5722	Debug implements Logger interface .
5723	Debugf logs a message to the logger .
5724	Info logs a message .
5725	Infof logs a message .
5726	Warn logs a message .
5727	Warnf logs a warning message .
5728	Error logs an error .
5729	Errorf logs an error message .
5730	Critical logs a message .
5731	Criticalf logs a message to the logger .
5732	Level returns the log level .
5733	SetLevel sets the logger level .
5734	Concat returns a new Permission
5735	HasPermission returns true if the given role has a permission
5736	ConcatPermissioner creates a new Permissioner .
5737	HasPermission returns true if the user has a permission
5738	Register registers a checker .
5739	NewPermission returns a new Permission
5740	Get returns a Checker .
5741	isPtrFromHeap returns true if the given address is a pointer .
5742	IsPtr returns true if the given address is a pointer .
5743	FindObject returns the object at the given address .
5744	ForEachObject iterates over all pages in the process .
5745	ForEachRoot returns true if the process is a root root .
5746	Addr returns the address of the process .
5747	Size returns the size of an object .
5748	Type returns the type of an object .
5749	ForEachRootPtr iterates over all nodes in the process .
5750	edge1 is a helper function for edges1
5751	setHeapPtr sets the heap pointer to the process .
5752	findHeapInfo returns the heap info for the given address .
5753	allocate heap info
5754	runtimeName returns the runtime name of the given type .
5755	Read runtime constants .
5756	add adds a function to the table .
5757	sort sorts the entries in the function .
5758	find returns the function at the given pc .
5759	read reads from a process .
5760	readVarint reads a varint from an address
5761	useLine returns the usage line for the command .
5762	commandPath returns the path for the command .
5763	readCore reads the core process .
5764	typeName returns the name of an object .
5765	fieldName returns the name of a field .
5766	typeFieldName returns the name of the given type .
5767	FindFunc returns a function for the given address .
5768	Core creates a new process .
5769	Address returns the address of the region .
5770	Int returns the int value of the region .
5771	Uintptr returns the uintptr of the region .
5772	Cast casts a type to a region .
5773	Deref implements the region .
5774	Uint64 returns the uint64 value .
5775	Uint32 returns the uint32 value .
5776	Int32 returns the int32 value .
5777	Uint16 returns the uint16 value of the region .
5778	Uint8 returns the uint8 value .
5779	String returns the string representation of the region .
5780	SlicePtr returns a copy of the region .
5781	SliceLen returns the length of the slice .
5782	Field implements the region .
5783	ReadUint8 reads an address from the process .
5784	ReadUint16 reads an address from the process .
5785	ReadUint32 reads a uint32 from the process .
5786	ReadUint64 reads an address from the process .
5787	ReadInt8 reads an int8 from the process .
5788	ReadInt16 reads an int16 from the process .
5789	ReadInt32 reads an int32 from the process .
5790	ReadInt64 reads an int64 from the process .
5791	ReadUintptr reads a uint64 from the process .
5792	ReadPtr reads a pointer from the process .
5793	ReadCString reads a CString from the given address .
5794	Source returns the source file .
5795	findMapping returns the mapping for a given address .
5796	Max returns the maximum of the given address .
5797	Min returns the minimum of the given address .
5798	Align implements the Aligner interface .
5799	initialize initializes the tree .
5800	calculates the nodes in the graph .
5801	eval evaluates the given vName .
5802	compress compresses the given vName .
5803	link adds a node to the DOM .
5804	reverse reverses the dominators
5805	calculateSize computes the size of a node .
5806	objField returns the field name for the given object .
5807	Readable returns true if the given address is readable .
5808	ReadableN returns true if the given address is readable .
5809	splits mappings at the given address .
5810	DynamicType returns the type of the given type .
5811	Create creates a new image
5812	Resolve resolves the URL to the given URL .
5813	Equal returns true if two tokens are equal .
5814	newDefaultClassifier returns a new TokenClassifier .
5815	Next returns the next word .
5816	NewTokenizer creates a new Tokenizer .
5817	Split splits a string into a slice of strings .
5818	Between returns the string between two strings .
5819	BetweenF returns a function that returns a string between two strings .
5820	Camelize converts a string to camelize
5821	Capitalize capitalizes a string
5822	CharAt returns the character at the given index .
5823	CharAtF returns the character at the given index .
5824	ChompLeft returns the substring of the given string .
5825	ChompLeftF returns a function that takes a prefix and returns a function that returns a function that returns a function that returns a new string .
5826	ChompRight returns the trailing suffix of the string .
5827	ChompRightF returns a function that wraps the given suffix .
5828	ClassifyF returns a function that can be used to classify a string .
5829	Clean cleans up a string .
5830	Deterize converts a string to lowercase
5831	EscapeHTML escapes the given string .
5832	DecodeHTMLElement decodes an HTML string .
5833	EnsurePrefixF returns a new string with the given prefix .
5834	EnsureSuffixF returns a function that returns a string with the given suffix .
5835	Humanize returns a human - readable representation of a string .
5836	Iif returns true if condition is true
5837	IndexOf returns the index of the given string .
5838	IsLower returns true if the string is lower case .
5839	IsUpper returns true if the string is upper case .
5840	Left returns the left of the given string .
5841	LeftF returns a function that returns the left of the given number .
5842	Alphabet returns a slice of letters from a string .
5843	Line returns a slice of lines .
5844	Map iterates over an array of strings .
5845	Match returns true if the string matches the given pattern .
5846	tasks creates a task
5847	Pad returns a string with the given length .
5848	PadF returns a function that pads the given number of characters .
5849	PadLeft appends a string to a string
5850	PadLeftF returns a function that pads the given string to the given length .
5851	PadRightF returns a function that pads the given character to the given length .
5852	Pipe adds a function to the string .
5853	QuoteItems returns a slice of strings .
5854	ReplaceF replaces a new string with the given number of occurrences .
5855	ReplacePatternF returns a function that replaces the pattern with the given replacement .
5856	Reverse reverses a string .
5857	RightF returns a function that returns the right after the given number .
5858	Slice returns a slice of strings .
5859	SliceFunc returns a slice of strings .
5860	SliceContains returns true if the slice contains the given value .
5861	SliceIndexOf returns the index of the given value .
5862	Slugify returns the slug of the given string .
5863	StripPunctuation removes punctuation from a string .
5864	StripTags removes tags from a string
5865	Substr returns the length of a string .
5866	SubstrFunc returns a function that returns a substring of the given index .
5867	TemplateWithDelimiterers returns a string with the given values .
5868	ToArgv converts a string to an argument list .
5869	ToBool converts a string to a boolean .
5870	ToBoolOr converts a string to a boolean .
5871	ToIntOr converts string to int or returns default value .
5872	ToFloat32Or converts string to float32 .
5873	ToFloat64Or converts string to float64 .
5874	UnescapeHTML decodes a string .
5875	WrapHTML wraps a string with html tags .
5876	WrapHTMLF returns a function that wraps the given tag .
5877	ReapChildren reaps the children of the process .
5878	SdNotify implements SdNotify interface .
5879	NewAuthenticator creates a new Authenticator
5880	Endpoint returns an HTTP endpoint for the given prefix .
5881	Unique returns a list of unique IDs .
5882	Contains returns true if the list contains the given id .
5883	Includes returns true if all objects are included in the given subset .
5884	Require adds a flag to the model .
5885	Enqueue enqueue a job
5886	A new Authorizer
5887	Run creates an Authorizer
5888	And returns a new Authorizer .
5889	Or returns a new Authorizer .
5890	Enqueue enqueue a job
5891	Callbacks adds a callback to the queue .
5892	NewWatcher creates a new watcher .
5893	Add adds a new stream to the watch .
5894	Action returns a new Action .
5895	Write returns true if the operation is a write operation .
5896	String returns the string representation of the operation .
5897	Query returns a bson query .
5898	Respond to the response .
5899	EnsureApplication creates a new application
5900	EnsureFirstUser creates a new user .
5901	Callbacks returns a Callback that can be used to call the callback .
5902	OpenStream creates a new stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds tokens to the indexer .
5905	GetTokenData returns the token data .
5906	SetTokenData sets the token data .
5907	ValidSecret checks if a secret is valid
5908	HashSecret clears the secret hash .
5909	ValidPassword checks if the user is valid
5910	HashPassword hashes the user s password .
5911	MustCreateStore creates a new Store .
5912	CreateStore creates a new store
5913	Caches returns a collection of models .
5914	NewAssetServer creates a new http . Handler for the given prefix .
5915	DefaultGrantStrategy returns the default grant strategy .
5916	DefaultTokenData returns the default token data
5917	GenerateToken generates a token for the given ID .
5918	ParseToken parses the token and returns the token claims .
5919	Emit creates a new enforcer
5920	MustGet gets a field from the model .
5921	MustSet sets the value of a field .
5922	NewGroup returns a new Group
5923	Add adds controllers to the group .
5924	Endpoint returns an HTTP endpoint for the given prefix .
5925	Add adds an index to the indexer .
5926	AddRaw adds an index to the indexer .
5927	Ensure ensures that the index is valid .
5928	NewCatalog creates a new catalog .
5929	Add adds a model to the catalog .
5930	All returns all the models .
5931	Visualize returns a string representation of the catalog
5932	NewErrorReporter creates a new error reporter .
5933	EnsureIndexes ensures that the store is valid .
5934	Escape returns an error with an error .
5935	Compose composes a chain of middleware .
5936	Includes returns true if all items are in the subset .
5937	Intersect returns a list of strings in a list of strings .
5938	Emit creates a new error
5939	RootTracer returns a new http . Handler for root .
5940	NewTracerFromRequest creates a new Tracer from a request .
5941	NewTracer creates a new Tracer .
5942	Push adds a span to the stack .
5943	Last returns the last span .
5944	Tag adds a tag to the stack .
5945	Log adds a key to the log .
5946	Context returns a context with the given context .
5947	Pop removes the span .
5948	Finish implements the Tracer interface .
5949	NewPool creates a new pool .
5950	Add adds a task to the pool .
5951	Run starts the pool .
5952	NewBodyLimiter returns a new BodyLimiter
5953	LimitBody limits the body of the request .
5954	Catch creates a new Callback
5955	Only returns a matcher that matches the provided operations .
5956	BasicAuthorizer returns a Callback with the given credentials .
5957	ModelValidator checks if the model is valid .
5958	TimestampValidator validates a timestamp .
5959	RoleValidator returns a callback for the relationship validation .
5960	Inspect is a helper function that inspects all the secret objects .
5961	NewRule creates a new Rule .
5962	AddUnmatch adds unmatch to rule
5963	Run runs the given rule .
5964	NewSecret creates a new Secret .
5965	NewObject creates a new object .
5966	SetMetadata sets the metadata for the object
5967	GetMetadata returns the value for the given key .
5968	GetMetadataAll returns all metadata for the object
5969	SetRule sets the rule .
5970	SetObject sets the object s object .
5971	SetNline sets the Nline field s value .
5972	SetContent sets the content of the exception .
5973	Run returns true if the exception matches the given Secret .
5974	AddRule adds a new rule .
5975	LoadRulesFromFile loads rules from a file .
5976	LoadRulesFromDir loads rules from a directory .
5977	DefaultRulesPath returns the default rules directory .
5978	EnableRule enables a rule .
5979	DisableRule disables a rule .
5980	EnableRuleByRegexp enables a rule by name .
5981	DisableRuleByRegexp is used to disable a rule .
5982	LoadObjects loads all objects from the given source .
5983	GroupObjectsByMetadata returns a map of objects by metadata .
5984	GroupObjectsByPrimaryKeyHash returns a map of objects by primary key .
5985	AddException adds an exception to the list .
5986	LoadExceptionsFromFile loads exceptions from a file .
5987	printPlainResults prints a list of results .
5988	printJsonResults writes results to stdout .
5989	NewXor64Source returns a new Xor64Source instance
5990	xor64 returns the xor of x .
5991	next returns the next xor .
5992	Seed sets the seed for the given seed .
5993	NewFrameSet returns a new FrameSet .
5994	handleMatch implements the FrameSet interface .
5995	Index returns the index of the given frame .
5996	Frame returns the value at the given index .
5997	HasFrame returns true if the frame contains a frame .
5998	FrameRangePadded returns a new frame range with padding .
5999	Normalize returns a new FrameSet .
6000	FramesToFrameRange converts frames to a string range .
6001	FrameRangeMatches returns a slice of strings matching the frame range .
6002	toRange converts a range to a range .
6003	NewWorkManager creates a new work manager .
6004	processSources reads files from source files .
6005	isInputDone returns true if the work manager is done .
6006	closeInputs closes the work manager .
6007	load loads files from a list of paths .
6008	loadRecursive loads all files in a directory .
6009	preparePaths takes a list of paths and returns a list of files .
6010	PadFrameRange pads a frame range .
6011	zfillString returns a string with zeros .
6012	zfillInt returns a string with zeros .
6013	NewInclusiveRange returns a new InclusiveRange .
6014	String returns a string representation of the InclusiveRange .
6015	End returns the end of the range .
6016	Len returns the length of the range .
6017	Min returns the minimum value of the range .
6018	Max returns the maximum value of the range .
6019	Contains returns true if the given value contains the given value .
6020	find closest in range
6021	Index returns the index of the given value .
6022	String returns a string representation of the InclusiveRanges .
6023	Len returns the number of blocks in the range .
6024	Start returns the start of the range .
6025	End returns the end of the range .
6026	Min returns the minimum min .
6027	Max returns the maximum number of blocks .
6028	numRanges returns the number of blocks .
6029	rangeAt returns the range at the given index .
6030	Append adds a new range to the list .
6031	AppendUnique appends a new range to the list .
6032	Contains returns true if the range contains the given value .
6033	Index returns the index of the given value .
6034	FrameRange returns the frame range range .
6035	FrameRangePadded returns the range range of frames .
6036	Index returns the path at the given index .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding .
6039	SetPaddingStyle sets the padding .
6040	SetExt sets the extension .
6041	SetFrameRange sets the frame range .
6042	Len returns the number of frames .
6043	String returns a string representation of the file sequence .
6044	Copy returns a new FileSequence .
6045	NewClient returns a new Client
6046	UnmarshalXML deserializes the header .
6047	UnmarshalXML unmarshals the body .
6048	Call a soap request
6049	JSONDoc returns a JSON representation of a JSON document .
6050	AddLoader adds a loader to the spec .
6051	JSONSpec parses a JSON document .
6052	Embedded returns an embedded document .
6053	Spec loads a spec file .
6054	Analyzed parses a JSON document .
6055	Expanded returns an expanded document .
6056	ResetDefinitions resets the document definitions .
6057	Pristine analyzes the document .
6058	OpenDb creates a new GeoIP database .
6059	GetOrg returns the name of the organization
6060	GetRegion returns the region code for the given IP address .
6061	GetRegionName returns the region name for the given country code .
6062	GetCountry returns the country code for the given IP .
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close closes the underlying file .
6065	String returns the string representation of the log .
6066	New creates a new Logger .
6067	Close closes the logger .
6068	SetLevelByName sets the Level by name .
6069	Output implements Logger interface .
6070	OutputJson outputs a JSON log .
6071	Print implements Logger interface .
6072	Println implements Logger interface .
6073	Debug logs a message .
6074	Debugln implements Logger .
6075	Error logs an error .
6076	Errorln logs an error .
6077	Info logs a message .
6078	Infoln implements Logger .
6079	Warn logs a message .
6080	Warnln logs a message .
6081	NewStreamHandler returns a new StreamHandler .
6082	Right returns a string with the given length .
6083	New returns a new API endpoint
6084	setupMetadata returns the metadata for the metadata
6085	recordTypes recursively recursively recursively recursively
6086	appendSorted appends a parameter to the list of params
6087	parseDataType parses a data type .
6088	parseParam parses a parameter and returns a new ActionParam .
6089	newParam creates a new action param
6090	toGoReturnTypeName returns the type of a Go type .
6091	toGoTypeName converts a string to a Go type name .
6092	prettyify returns a string representation of an object
6093	isBuiltInType returns true if the given name is a valid type .
6094	MatchHref checks if the given href matches the given href .
6095	Substitute returns a string with the given variables .
6096	MarshalJSON implements FileUpload .
6097	writeMultipartParams writes a multipart request to a multipart writer .
6098	Performs a request to the API
6099	PerformRequestWithContext sends a request to the API .
6100	LoadResponse loads the response from the response .
6101	ScheduleLocator returns a ScheduleLocator
6102	TemplateLocator returns a TemplateLocator .
6103	fetch details from environment
6104	buildAliases builds aliases for the given SSH config .
6105	serverArray returns a list of instances for a given name .
6106	server returns an instance of the server
6107	toPackageName converts a version to a package name .
6108	loadFile loads the contents of a file .
6109	main main function
6110	runCommand runs the command line command
6111	CreateJSONResponse creates a new http response .
6112	AccountLocator returns a new AccountLocator instance
6113	AccountGroupLocator returns a new AccountGroupLocator instance
6114	AlertLocator returns a AlertLocator
6115	AlertSpec locator
6116	AuditEntryLocator returns a new AuditEntryLocator
6117	BackupLocator returns a BackupLocator .
6118	ChildAccountLocator returns a ChildAccountLocator instance
6119	CloudLocator returns a Cloud Locator instance
6120	CloudAccountLocator returns a CloudAccountLocator instance
6121	CookbookLocator returns a new CookbookLocator instance
6122	CookbookAttachmentLocator returns a new CookbookAttachmentLocator .
6123	CredentialLocator returns a CredentialLocator .
6124	DatacenterLocator returns a DatacenterLocator instance
6125	DeploymentLocator returns a DeploymentLocator instance
6126	HealthCheckLocator returns a new HealthCheckLocator instance
6127	IdentityProviderLocator returns a IdentityProviderLocator .
6128	ImageLocator returns a new ImageLocator .
6129	InputLocator returns a new InputLocator .
6130	InstanceLocator returns a InstanceLocator instance
6131	InstanceTypeLocator returns a InstanceTypeLocator instance
6132	IpAddressLocator returns a new IpAddressLocator instance
6133	IpAddressBindingLocator returns a new IpAddressLocator instance
6134	MonitorMetricLocator returns a new MonitoringMetator instance
6135	MultiCloudImageLocator returns a MultiCloudImageLocator instance
6136	MultiCloudImageMatcher returns a new MultiCloudImageMatcher instance
6137	MultiCloudImageSettingLocator returns a MultiCloudImageSettingLocator instance
6138	NetworkLocator returns a NetworkLocator instance
6139	NetworkGatewayLocator returns a NetworkGatewayLocator .
6140	NetworkOptionGroupLocator returns a NetworkOptionLocator .
6141	NetworkOptionGroupAttachmentLocator returns a NetworkOptionAttachmentLocator .
6142	Oauth2Locator returns a new Oauth2Locator instance
6143	PermissionLocator returns a PermissionLocator .
6144	PlacementGroupLocator returns a PlacementGroupLocator .
6145	PreferencesLocator returns a new PreferenceLocator .
6146	 PublicationLocator returns a new PublicationLocator instance
6147	 PublicationLineageLocator returns a PublicationLineLocator
6148	RecurringVolumeAttachmentLocator returns a new RecurringVolumeAttachmentLocator instance
6149	RepositoryLocator returns a RepositoryLocator .
6150	RepositoryAssetLocator returns a RepositoryLocator .
6151	ResourceGroupLocator returns a ResourceGroupLocator .
6152	RightScriptLocator returns a RightScriptLocator .
6153	RightScriptAttachmentLocator returns a RightScriptAttachmentLocator instance
6154	RouteLocator returns a new RouteLocator instance
6155	RouteTableLocator returns a RouteTableLocator .
6156	RunnableBinding locator
6157	SchedulerLocator returns a SchedulerLocator .
6158	SecurityGroupLocator returns a SecurityGroupLocator .
6159	SecurityGroupRuleLocator returns a SecurityGroupRuleLocator .
6160	ServerLocator returns a new ServerLocator instance
6161	ServerArrayLocator returns a new ServerArrayLocator instance
6162	ServerTemplateLocator returns a ServerTemplateLocator .
6163	ServerMultiCloudImageLocator returns a ServerTemplateLocator instance
6164	SessionLocator returns a SessionLocator .
6165	SshKeyLocator returns a SshKeyLocator .
6166	SubnetLocator returns a SubnetLocator instance
6167	TagLocator returns a TagLocator .
6168	TaskLocator returns a TaskLocator .
6169	UserLocator returns a UserLocator .
6170	UserDataLocator returns a new UserDataLocator .
6171	VolumeLocator returns a VolumeLocator instance
6172	VolumeAttachmentLocator returns a VolumeAttachmentLocator .
6173	VolumeSnapshotLocator returns a VolumeSnapshotLocator .
6174	VolumeTypeLocator returns a VolumeTypeLocator instance
6175	RegisterCommands registers a new action commands
6176	ShowCommandHelp show command help
6177	ShowAPIActions show API actions
6178	ShowHelp shows the help command .
6179	ParseCommandAndFlags parses a command and returns a CommandTarget object .
6180	validateFlagValue validates flag value
6181	buildQuery builds a query for the given values .
6182	buildPayload builds an APIParams from a list of values
6183	shortcutPattern is used to shorten the given resource .
6184	cleanDescription cleans the description of a doc .
6185	fileExists checks if file exists
6186	AnalysisSnapshotLocator returns a new AnalysisSnapshotLocator .
6187	BudgetAlertLocator returns a new BudgetAlertLocator instance
6188	CloudBillLocator returns a CloudBillLocator instance
6189	CloudBillMetricLocator returns a CloudBillMetator instance
6190	CurrentUserLocator returns a new CurrentUserLocator instance
6191	InstanceCombinationLocator returns a InstanceCombinationLocator instance
6192	InstanceMetricLocator returns a InstanceMetator instance
6193	InstanceUsagePeriodLocator returns a new InstanceUsagePeriodLocator instance
6194	PatternLocator returns a PatternLocator .
6195	ReservedInstanceLocator returns a new ReservedInstanceLocator instance
6196	ReservedInstancePurchaseLocator returns a ReservedInstanceLocator instance
6197	ScenarioLocator returns a ScenarioLocator instance
6198	ScheduledReportLocator returns a ScheduledReportLocator .
6199	TempInstancePriceLocator returns a TempInstancePriceLocator instance
6200	UserSettingLocator returns a UserSettingLocator .
6201	readAllAsync reads an io . Reader from the io . io . io . Reader .
6202	extractArg extracts an argument from a list of args
6203	write writes a byte to the output file .
6204	 AppliedPolicyLocator returns a new AppliedPolicyLocator
6205	 ApprovalLocator returns a new ApprovalLocator
6206	AlertLocator returns a new IncidentLocator instance
6207	PolicyTemplateLocator returns a new PolicyTemplateLocator .
6208	PublishedTemplateLocator returns a published template locator .
6209	DebugCookbookPathLocator returns a DebugCookbookPathLocator
6210	ContainerControlLocator returns a DockerControlLocator .
6211	EnvLocator returns a new EnvLocator instance
6212	LoginControlLocator returns a LoginControlLocator .
6213	ProcessLocator returns a ProcLocator instance
6214	Rl10Locator returns a new Rl10Locator instance
6215	Tslocator returns a new Tslocator
6216	TSSControlLocator returns a TSSControlLocator .
6217	TSSPluginLocator returns a TSSPluginLocator .
6218	NewAngularWriter creates a new angular writer .
6219	WriteResource implements the Writer interface .
6220	path returns the path for the action .
6221	mandatory checks if a parameter is mandatory
6222	New returns a new API instance
6223	FromCommandLine returns a new API client .
6224	CanAuthenticate checks if the user can authenticate .
6225	Encrypt encodes a string to a base64 string .
6226	Decrypt decrypts a string
6227	guessType guesses the type of the given definition .
6228	addType adds a type to an object
6229	extractCmdLineParams parses a command line param .
6230	NewMetadataWriter creates a new MetadataWriter .
6231	WriteHeader writes the header to the writer .
6232	WriteMetadata writes the metadata to the writer .
6233	location returns the location of the action .
6234	New returns a new API instance .
6235	fromAPI returns a new instance of the API
6236	BuildRequest builds an HTTP request for a given resource .
6237	setupMetadata returns a map of metadata
6238	NewDisplayer returns a new Displayer instance
6239	ApplySingleExtract applies a single extract to the output .
6240	ApplyExtract applies the extract function to the output
6241	ApplyHeaderExtract extract header from response
6242	Output returns the output .
6243	NewAPIAnalyzer returns a new APIAnalyzer .
6244	Analyze implements the API .
6245	Analyze aliases
6246	LocatorFunc returns the locator for the given attributes .
6247	ParseRoute parses a route .
6248	isDeprecated returns true if path is deprecated
6249	isQueryParam returns true if a query parameter is a query parameter .
6250	isPathParam returns true if the given path is a path parameter .
6251	fetchAuditEntries fetches audit entries for a given filter .
6252	formatTime returns a string representation of the given time .
6253	printAudits prints audit entries
6254	extractUnique removes duplicate entries from old entries
6255	getHref returns the href of the audit entry
6256	fail logs the error message
6257	parameters returns the parameters of the action .
6258	paramsInitializer initializes the params
6259	commandLine returns the command line
6260	toVerb converts text to verb
6261	escapeBackticks returns the backticks of a string .
6262	AccountPreferenceLocator returns a AccountPreferenceLocator .
6263	ApplicationLocator returns a new ApplicationLocator instance
6264	EndUserLocator returns a EndUserLocator instance
6265	NotificationRuleLocator returns a NotificationRuleLocator .
6266	UserPreferenceLocator returns a new UserPreferenceLocator instance
6267	UserPreferenceInfoLocator returns a UserPreferenceInfoLocator .
6268	LoadConfig loads a client config file .
6269	CreateConfig creates a new client
6270	fromAPI creates a new API from the API .
6271	HostFromLogin returns the host name from a login string .
6272	AnalyzeParam analyzes a parameter .
6273	AnalyzeAttribute analyzes an attribute .
6274	AnalyzeType analyzes a type .
6275	CreateType creates an object from a query .
6276	Ref returns the definition for the given reference .
6277	Type returns the type of the Ref .
6278	Required returns a list of required names .
6279	ID returns the ID of the ref .
6280	Service returns the service name .
6281	Method returns the method name of the endpoint .
6282	NewTypeRegistry returns a new TypeRegistry .
6283	GetNamedType returns the named type .
6284	CreateNamedType creates a new object type .
6285	CreateInlineType creates a new inline type .
6286	FinalizeTypeNames will be called after all registered types .
6287	Merge merges the given APIDescriptor .
6288	FinalizeTypeNames returns the names of the objects in the given map .
6289	uniqueTypeName returns the unique type name for the given prefix .
6290	MandatoryParams returns all mandatory params
6291	HasOptionalParams returns true if the action is optional .
6292	MakeUniq creates a unique unique unique name from a list of unique names .
6293	NewClientWriter creates a new client writer .
6294	WriteHeader writes a header to the writer .
6295	WriteResourceHeader writes the resource header to the writer .
6296	WriteType writes an object to the writer .
6297	WriteResource writes a resource to the writer .
6298	WithTrail returns a new EvalCtx with the given trail .
6299	Analyze an endpoint .
6300	NetworkInterfaceLocator returns a NetworkInterfaceLocator .
6301	NetworkInterfaceAttachmentLocator returns a NetworkInterfaceAttachmentLocator .
6302	UnmarshalJSON deserializes a Ruby Time .
6303	ExecLocator returns a new ExecutionLocator .
6304	NotifyLocator returns a NotificationLocator for the given href .
6305	OperationLocator returns a new OperationLocator .
6306	ScheduledActionLocator returns a ScheduledActionLocator .
6307	NewBasicAuthenticator creates a new Authenticator .
6308	NewSSAuthenticator returns a new Authenticator instance
6309	newCookieSigner creates a new Authenticator .
6310	Sign is used to sign a cookie .
6311	CanAuthenticate checks if a cookie is valid .
6312	refresh refreshes the cookie
6313	Sign adds the token to the request .
6314	Sign is used to sign the request .
6315	Sign signs a signed request .
6316	SetHost sets the Auth field s value .
6317	CanAuthenticate is used to authenticate the account .
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds the URL for the given host and path .
6320	GetAction returns the action by name .
6321	HasLink returns true if the resource has a link
6322	findMatches returns a list of paths matching the given href .
6323	NewPB returns a new HTTP client .
6324	newVariableDumpClient creates a new HTTPDumpClient .
6325	newRawClient returns a new http client .
6326	DoHidden sends a request to the dump
6327	Do performs a HTTP request .
6328	doImp is used to perform the HTTP request .
6329	getClientWithoutTimeout returns the HTTP client without timeout .
6330	dumpRequest is used to dump a request .
6331	writeHeaders writes headers to the buffer .
6332	copyHiddenHeaders returns a copy of hidden headers
6333	validateCommandLine validates a command line .
6334	APIClient returns a CommandClient from a command line .
6335	RegisterClientCommands registers client commands .
6336	Interactive sets the logger .
6337	toPattern converts a path to a path pattern .
6338	WithClientIP adds the client IP to the context .
6339	ClientIP returns the client IP .
6340	NewProducer creates a new Producer
6341	StartProducer starts a new Producer
6342	Start starts the producer .
6343	Stop stops the producer .
6344	Publish publishes a message to the producer .
6345	PublishTo sends a message to the producer
6346	NewLocalEngine returns a new LocalEngine .
6347	validate validates the consumer config
6348	default defaults
6349	NewConsumer creates a new Consumer .
6350	StartConsumer starts a consumer .
6351	Start starts the consumer .
6352	RateLimit returns a channel of messages in a channel .
6353	Write writes the response to w . Writer .
6354	ReadResponse reads a response from the given reader .
6355	backoff returns a random backoff for a given attempt .
6356	String returns a string representation of the frame type .
6357	NewConsulEngine returns a new ConsulEngine instance
6358	ParseMessageID parses a message ID .
6359	WriteTo implements io . WriterTo interface .
6360	NewMessage creates a new Message .
6361	Finish the message .
6362	Requeue requeue a message .
6363	ReadCommand reads a command from the reader .
6364	funcMapMakerMaker creates a FuncMap from the template .
6365	Funcs sets the func map
6366	Execute executes a template
6367	RegisterPath adds a path to the filesystem .
6368	Asset returns the contents of the asset
6369	Glob returns a list of paths matching the given pattern .
6370	NameSpace returns a new AssetFile .
6371	New returns a new Render
6372	RegisterViewPath registers the view paths for the given paths .
6373	SetAssetFS sets the asset filesystem
6374	Layout returns a template with the given name .
6375	Funcs implements the Render interface .
6376	Execute implements the Render interface .
6377	RegisterFuncMap adds a function to the render function .
6378	Asset returns the asset file .
6379	NewPlainClient returns a new Client .
6380	Create creates a new uploader .
6381	Open opens the given URL using the given configuration .
6382	Sign is used to sign a request
6383	Sign sends the request to the request
6384	Readdir returns a list of files in the file .
6385	Find returns the first node in the tree .
6386	Lex performs a lexer .
6387	MustParseXML parses an XML document .
6388	ParseXML parses the given io . Reader .
6389	Call calls the wrapped function .
6390	Parse parses a XPath expression .
6391	MustParse parses a XPath expression .
6392	Exec executes a XPath expression .
6393	ExecBool returns the boolean value of the XPath expression .
6394	ExecNum returns the number of numeric nodes .
6395	ExecNode implements the XPathExecutor interface .
6396	MustExec executes a XPath expression .
6397	ParseExec parses a string and returns the result .
6398	CreateNode creates a new node .
6399	GetChildren returns a slice of child nodes .
6400	GetAttrs returns the list of attrs .
6401	ResValue returns the string representation of the node .
6402	Parse parses an XPath string .
6403	GetToken returns the token .
6404	ResValue returns the value of the node .
6405	Exec executes the given node and returns the result .
6406	String returns a string representation of the number .
6407	Num returns the number of floats
6408	BuildNS builds a list of namespace nodes .
6409	GetAttribute returns the attribute of an element .
6410	GetAttributeVal returns the value of an attribute .
6411	GetAttrValOrEmpty returns the value of an attribute .
6412	FindNodeByPos finds a node by pos .
6413	Marshal writes a node to w .
6414	MarshalStr returns a string representation of a tree .
6415	NewLexer creates a new Lexer .
6416	NewLexerString returns a new Lexer .
6417	Split returns a slice of strings .
6418	Register registers an error .
6419	Get returns the error descriptor for the given code .
6420	GetAll returns all errors in the registry .
6421	From converts an error into an error .
6422	Descriptor returns a descriptor from an error .
6423	GetAttributes returns the attributes of an error .
6424	HTTPStatusCode returns the HTTP status code .
6425	HTTPStatusCode returns the HTTP status code for an error .
6426	HTTPStatusToType converts HTTP Status to Type .
6427	ToHTTP converts an error into an HTTP response .
6428	toImpl converts an error into an impl .
6429	MetadataFromIncomingContext returns metadata from a context .
6430	MetadataFromOutgoingContext returns the metadata for the given context .
6431	TokenFromMetadata returns token from metadata .
6432	TokenFromIncomingContext returns a token from a context .
6433	OutgoingContextWithToken returns a new context with the given token .
6434	KeyFromMetadata returns the key from metadata .
6435	KeyFromIncomingContext returns the key from the given context .
6436	OutgoingContextWithKey returns a new context with the given key .
6437	IDFromMetadata returns the ID from the metadata .
6438	IDFromIncomingContext returns the ID from the given context .
6439	OutgoingContextWithID returns a new context with the given ID .
6440	ServiceInfoFromMetadata returns service information from metadata .
6441	ServiceInfoFromIncomingContext returns a ServiceInfo from a context .
6442	OutgoingContextWithServiceInfo returns a new ContextWithServiceInfo with the given name .
6443	LimitFromMetadata returns the limit from the metadata .
6444	OffsetFromMetadata returns the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext returns the limit and offset .
6446	OutgoingContextWithLimitOffset returns a new context with the specified limit and offset .
6447	before returns true if the given ScheduleItem is before the given time .
6448	New returns a new error .
6449	WithNamespace adds a namespace to the logger .
6450	Wrap returns a new instance of Namespaced .
6451	WithField adds a field to the logger .
6452	WithFields adds fields to the logger .
6453	Format returns a string representation of a message .
6454	fix returns the value of the given interface .
6455	GRPCCode returns the status code for the given type .
6456	GRPCCodeToType converts a grpc code to a type .
6457	GRPCCode returns grpc code .
6458	FromGRPC converts a grpc error into an error .
6459	ToGRPC converts an error into grpc .
6460	IsEnabled returns true if the namespace is enabled .
6461	Set sets the namespace
6462	Cause returns the cause of an error .
6463	parseCode parses a string representation of a string .
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor
6465	StreamServerInterceptor returns a StreamServerInterceptor
6466	UnaryClientInterceptor returns a new UnaryClientInterceptor
6467	StreamClientInterceptor is a wrapper around StreamClientInterceptor
6468	Interceptor returns a new StreamClientInterceptor
6469	Wrap wraps a logrus logger .
6470	NewCounter creates a new counter .
6471	NewRedisCounter creates a new counter .
6472	NewLimiter returns a new Limiter
6473	WithInsecure returns a new TokenCredentials
6474	WithTokenFunc returns a new TokenCredentials instance
6475	GetRequestMetadata returns the metadata for the request .
6476	FieldsFromIncomingContext returns the fields from the given context .
6477	String returns the string representation of the type .
6478	UnmarshalText deserializes a Type .
6479	fromString converts a string to a Type
6480	Start starts the goroutine .
6481	NewSimple returns a new SimpleQueue
6482	Wrap wraps the provided logger .
6483	WithFilters adds filters to the filter .
6484	WithField adds a field to the log .
6485	WithFields adds fields to the log .
6486	FilterSensitive returns a FilterFunc that filters sensitive strings .
6487	SliceFilter returns a slice of values that match the given filter .
6488	MapFilter returns a map with the given filter .
6489	FilterFilter adds a filter to the given field name .
6490	LowerCaseFilter returns a FilterFunc that matches the given filter .
6491	newBatchPoints returns a new BatchPoints .
6492	NewSinglePointWriter creates a new SinglePointWriter .
6493	Write writes a single point to the writer .
6494	WithScalingInterval sets the scaling interval .
6495	NewBatchingWriter creates a new BatchWriter .
6496	Write writes a point to the bucket .
6497	MustParseLevel parses the given string and panics .
6498	New creates a new stream .
6499	SetLogger sets the Logger interface .
6500	CloseRecv closes the stream .
6501	Stats returns the stats of the stream .
6502	Run starts the stream
6503	ServerOptions returns grpc server options .
6504	ClientOptions returns a list of grpc connections for a ttnlog .
6505	UnaryServerInterceptor returns a new UnaryServerInterceptor
6506	StreamServerInterceptor returns a StreamServerInterceptor
6507	UnaryClientInterceptor returns a new UnaryClientInterceptor
6508	StreamClientInterceptor returns a StreamClientInterceptor
6509	default defaults
6510	Flush flushes the batch .
6511	New returns a new Handler instance
6512	HandleLog implements the Handler interface .
6513	New returns a new TTRandom instance
6514	Names returns the names of the URI .
6515	String returns a string representation of the PerfDatum .
6516	RenderPerfdata renders a perfdata .
6517	Exit prints the status of the terminal .
6518	NewCheckWithOptions returns a new Check instance
6519	AddResult adds a new status to the check .
6520	AddResultf adds a message to the check .
6521	String returns a string representation of the check .
6522	Exitf logs an error with the given format .
6523	Criticalf logs an error with the given format .
6524	Unknownf logs an unknown message .
6525	NewDefaultStatusPolicy returns a default status policy
6526	NewStatusPolicy returns a new StatusPolicy
6527	ParseRange parses a range string .
6528	Check checks if the value is within the range .
6529	CheckInt checks if the given value is int .
6530	CheckUint64 checks if the given value is a uint64 .
6531	NewClient returns a new client .
6532	GetKeyMeta mocks base method
6533	GetKeysInDirMeta returns a list of keys in a directory
6534	GetKeyContent returns the content of a key .
6535	GetJobSummaries for a project
6536	GetJobsForProject returns all jobs for a project .
6537	GetJob returns the job details .
6538	Create a job .
6539	Create or update a job .
6540	Delete a job
6541	JobSummary returns the job summary .
6542	Get system info
6543	DateTime returns the time of the timestamp .
6544	GetAll projects
6545	GetProject returns a project .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project .
6548	SetProjectConfig sets the project config .
6549	NewClient creates a new PBRestClient .
6550	NewClientbyToken returns a new client by token
6551	SetDepth sets the depth of the client .
6552	List datacenters
6553	Create a datacenter
6554	GetDatacenter returns a datacenter
6555	UpdateDataCenter updates a datacenter .
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned waits for a provisioned request to be completed .
6558	ListFirewall rules
6559	GetFirewallRule returns a firewall rule
6560	CreateFirewallRule creates a new firewall rule
6561	UpdateFirewallRule updates a firewall rule .
6562	DeleteFirewallRule deletes a firewall rule
6563	List loadbalancers
6564	GetLoadbalancer
6565	Update Loadbalancer
6566	Delete loadbalancer
6567	ListBalancedNics returns a list of NICNics
6568	Associate a network
6569	GetBalanced NIC
6570	DeleteBalancedNic deletes a balancer
6571	ListLans returns a list of LANs
6572	GetLan returns a LAN .
6573	DeleteLan deletes a LAN .
6574	ListNics returns a list of Nics
6575	Create a new NIC
6576	Get NIC
6577	Update a nic .
6578	Delete NIC
6579	List snapshots
6580	GetSnapshot returns a snapshot
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates a snapshot .
6583	List IP blocks
6584	ReserveIPBlock reserves a new IPBlock .
6585	GetIPBlock returns the IPBlock associated with the given ID .
6586	UpdateIPBlock updates an IPBlock .
6587	ReleaseIPBlock releases an IP block
6588	List Volumes
6589	GetVolume returns a volume
6590	UpdateVolume updates a volume .
6591	CreateVolume creates a volume
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a snapshot .
6594	Restore snapshot
6595	List servers
6596	GetServer returns a server
6597	DeleteServer deletes a server
6598	ListAttachedCdroms returns a list of images attached to the specified DC .
6599	AttachCdrom attaches a cdrom to the server
6600	GetAttachedCdrom returns the image attached to the specified DCID .
6601	DetachCdrom deletes a Cdrom .
6602	List attached volumes
6603	AttachVolume attaches a volume
6604	GetAttachedVolume returns a volume
6605	Detach volume
6606	StartServer starts a server
6607	ListLocations returns a list of locations .
6608	GetRegionalLocations returns a list of locations for a given region .
6609	GetLocation returns a location for a given location .
6610	Get contract resources
6611	ListImages lists all images
6612	GetImage returns a new image
6613	Print headers
6614	List groups
6615	GetGroup gets a group by id
6616	Create a group
6617	UpdateGroup updates a group .
6618	DeleteGroup deletes a group
6619	ListShares mocks base method
6620	GetShare returns a share
6621	AddShare adds a share to a group
6622	UpdateShare updates a share
6623	DeleteShare deletes a share
6624	ListUsers returns a list of users
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group .
6627	ListUsers lists all users
6628	GetUser gets a user by its ID
6629	CreateUser creates a new user .
6630	UpdateUser updates a user .
6631	DeleteUser deletes a user
6632	ListResources lists all resources
6633	GetResourceByType retrieves a resource by type id
6634	ListResourcesByType retrieves all resources by type
6635	List Requests
6636	GetRequest fetches a request .
6637	GetRequestStatus mocks base method
6638	Close closes the writer .
6639	GetSerializableArgument returns the value of the serializable argument .
6640	BoolVar adds a flag to the environment variable .
6641	Bool returns a bool indicating whether or not or not .
6642	IntVar registers an int variable with the given name .
6643	Int returns a new integer flag .
6644	Int64Var sets the value for an int64 flag .
6645	Int64 returns a new int64 .
6646	UintVar sets the value of a uint flag .
6647	Uint adds a uint value to the environment variable .
6648	Uint64Var sets the value of a uint64 flag .
6649	Uint64 returns a uint64 with the given name .
6650	StringVar sets the value of the environment variable .
6651	String returns a new environment variable .
6652	Float64Var sets the value of a float64 variable .
6653	Float64 adds a float64 to the environment variable .
6654	DurationVar sets the value of a duration variable .
6655	Duration returns a new environment variable .
6656	Parse parses the environment variables .
6657	WriteStringToFile writes a string to a file .
6658	ReadFileToString reads a string from a file .
6659	LineReader implements io . Reader interface .
6660	LineReaderFrom reads a line from a file .
6661	FileExists checks if a file exists .
6662	FileExists in path
6663	GetPathParts returns the path parts of the given path .
6664	GetPathPartsParts returns the path parts of the current executable .
6665	RandomString returns a random string .
6666	ParseAddress parses a string representation of a network address .
6667	HomeDir returns the home directory .
6668	IsTCPPortAvailable returns true if the given port is available .
6669	RandomTCPPort returns a random number of TCP ports available on the server .
6670	HashString returns the hash of the given key .
6671	Context is part of the session manager .
6672	Token returns the OAuth2 token .
6673	NewDaemon returns a new Daemon instance
6674	Close closes the daemon .
6675	NewAccessTokenContext creates a new context with the given context .
6676	AccessTokenFromContext returns the access token from the context .
6677	RandomAccessToken generates a random access token
6678	Init initializes the logger .
6679	Load loads a DIC file .
6680	Start creates a new session .
6681	Get returns a session .
6682	List lists all sessions .
6683	Exists returns true if the given access token exists .
6684	Abort is used to abandon a session .
6685	SetValue sets the value for the given key .
6686	Delete deletes a record .
6687	Setup implements storage .
6688	Tears down the database .
6689	initJaeger initializes the jaeger with the given node .
6690	Usage prints the error message .
6691	Build a DoubleArray from a list of keywords .
6692	Read reads a double array from r .
6693	Get returns the node at the given index .
6694	ExternalNodes returns a list of all external nodes in the cluster .
6695	GetOther returns the node with the given access token
6696	GoString returns a string representation of the cluster .
6697	Scan implements the Bag interface .
6698	Value returns the value of the Bag .
6699	Has returns true if the given key exists .
6700	WriteTo implements io . WriterTo interface .
6701	ReadIndexTable reads an index table from r .
6702	New creates a new ActionBar
6703	RegisterAction registers a new action .
6704	Adds actions to the action bar .
6705	Renders the action bar .
6706	FuncMap renders the edit button
6707	EditMode returns true if the user is edit mode .
6708	SwitchMode is part of the controller
6709	InlineEdit renders inline edit
6710	Error returns the error message .
6711	ParseFile parses a file .
6712	FindMachine finds a machine by name
6713	New returns a new Kace .
6714	Camel converts string to camelCase
6715	Pascal converts a string to camelCase
6716	Snake converts a string to snake case .
6717	SnakeUpper converts a string to snake case .
6718	Kebab converts a string to kebab
6719	KebabUpper converts string to kebab .
6720	isPathSafe returns an error if the URL is safe .
6721	Start starts the request .
6722	ParseAuthHeaders parses the auth headers from the request .
6723	Tracer creates a new client .
6724	HTTPClient sets the http client .
6725	BasicAuth adds a basic auth to the client .
6726	BearerAuth sets the bearer auth token
6727	CookieJar sets the cookie jar
6728	SanitizerEnabled sets the sanitizer enabled .
6729	OpenFile opens a file at the given endpoint .
6730	RoundTrip performs a RoundTripFn .
6731	SetAuthHeader sets the auth header .
6732	FileName returns the file name .
6733	newBuffersFromFiles returns a slice of file buffers .
6734	newFileBuffer returns a new BufferBuffer .
6735	rewind rewind the file buffer
6736	ConvertResponse converts an error into a response .
6737	Set sets the value of the option .
6738	WriteAnswer writes a boolean value to a BoolOption .
6739	String returns a string representation of the BoolOption .
6740	TriggerIncidentKey triggers an incident key .
6741	TriggerWithDetails creates a new incident with details .
6742	TriggerIncidentKeyWithDetails creates a new incident key with the given details .
6743	Merge merges two structs into dst .
6744	setSource sets the source file .
6745	convertString converts a string to dst
6746	Do executes a transactional transaction .
6747	NewFile creates a new io . Writer .
6748	Internal run loop .
6749	String returns a string representation of the row
6750	Tabulate returns a slice of rows from the resultset .
6751	AmazonRequest is a convenience function to get the Amazon API request .
6752	WriteTabularData writes the results to a writer .
6753	Reduce returns a slice of resultSet .
6754	NewSemaphore returns a new Semaphore .
6755	Release releases the semaphore .
6756	Resize implements the Semaphore interface .
6757	AddOutput adds a new output to the benchmark .
6758	RunBenchmarks runs the benchmark .
6759	parseBool parses a byte slice .
6760	checkInteger checks if the given bytes is an integer .
6761	parseInt64 parses an integer into an int64 .
6762	parseInt32 parses an int32 from bytes .
6763	parseBigInt parses a big integer .
6764	parseBitString parses a bit string .
6765	parseObjectIdentifier parses an object identifier .
6766	parseBase128Int parses a base 64 - bit integer .
6767	parseGeneralizedTime parses the given bytes .
6768	parsePrintableString parses a string .
6769	isPrintable returns true if b is a printable .
6770	parseSequenceOf parses a sequence of bytes .
6771	validLength returns true if the offset is invalid .
6772	setDefaultValue sets the default value for the field .
6773	UnmarshalWithParams takes a byte slice and parses it into a byte slice .
6774	Parse field parameters .
6775	getUniversalType returns the tag number for the given type .
6776	DecodeString decodes a string
6777	MailNotifier returns MailNotifier
6778	SaveMailNotifier persists a mail notification .
6779	RegisterProvider registers a provider .
6780	Initialize db
6781	Until runs a function until the given period is stopped .
6782	logPanic logs a stack trace
6783	User returns a user by username .
6784	Users returns all users in the database
6785	SaveUser saves a user .
6786	DeleteUser deletes a user .
6787	LoadCACertFile loads a certificate from a file .
6788	NewAuth returns a new Auth instance
6789	ValidateRequest validates the request .
6790	Process processes the request .
6791	ValidateCN checks if the certificate is valid .
6792	ValidateOUs validates the given certificate
6793	KeyLen returns the length of the key .
6794	DefaultConfig returns a new Config instance
6795	New returns a new cert signer .
6796	New creates a new VaultFactory .
6797	DefaultServiceConfig returns a new ServiceConfig instance
6798	NewService creates a new service .
6799	Delete deletes a cluster
6800	IsNoVaultHandlerDefined returns true if the error occurred .
6801	New creates a new Service .
6802	Create creates a new vault .
6803	CreateJob creates a new job .
6804	Run starts the worker .
6805	newWatcher creates a new watcher .
6806	Start starts the watcher .
6807	Stop stops the watcher .
6808	Active returns true if the watch is active .
6809	Add adds files to the watch .
6810	watch implements the Watch interface .
6811	Watch returns a list of paths that are watched .
6812	State returns a slice of notifications .
6813	Store implements the http . Handler interface .
6814	Get returns the error from the request .
6815	Catch adds a middleware to the middleware .
6816	Try wraps http . Handler . HandlerFunc .
6817	Recovery returns a middleware that panics .
6818	main function for testing
6819	SyncHandler creates a new http . Handler .
6820	connect connects to the server .
6821	send sends an update .
6822	NumConnections returns the number of connections .
6823	Push pushes the state to the state .
6824	Gops the state of the state .
6825	NewOutForward creates a new OutForward
6826	Run starts the input stream .
6827	New creates a new Fluent instance .
6828	Close closes the connection .
6829	IsReconnecting returns true if the connection is reconnecting .
6830	connect connects to the server .
6831	 Notification
6832	NullNotification returns a new NullNotifier
6833	New returns a new Identity .
6834	Issue creates a new Identity .
6835	Subject sets the subject .
6836	PrivateKey sets the private key .
6837	NotBefore sets the NotBefore field s value .
6838	NotAfter sets the NotAfter field s value .
6839	IssuingCertificateURL sets the issuing certificate URL .
6840	OCSPServer sets the ocspServer option
6841	New returns a new TelegramBotAPI instance
6842	NewWithWebhook creates a new Telegram BotBot API .
6843	Close closes the bot .
6844	GetMe returns the current user
6845	RunBot runs a bot .
6846	RunBot on webhook
6847	NewOutgoingMessage creates a new OutgoingMessage .
6848	NewOutgoingLocation creates a new OutgoingLocation .
6849	NewOutgoingVenue creates a new OutgoingVenue
6850	NewOutgoingVideo creates a new outgoing video
6851	NewOutgoingVideoResend returns a new OutgoingVideoResend instance
6852	NewOutgoingPhoto creates a new OutgoingPhoto .
6853	NewOutgoingPhotoResend returns a new OutgoingPhoto instance
6854	NewOutgoingSticker creates a new OutgoingSticker
6855	NewOutgoingStickerResend returns a new OutgoingSticker instance
6856	NewOutgoingVoice creates a new outgoing voice
6857	NewOutgoingVoiceResend creates a new OutgoingVoiceResend
6858	NewOutgoingAudio creates a new OutgoingAudio .
6859	NewOutgoingAudioResend returns a new OutgoingAudio instance
6860	NewOutgoingDocument creates a new OutgoingDocument .
6861	NewOutgoingDocumentResend returns a new OutgoingDocument instance
6862	NewOutgoingForward creates a new outgoing forward .
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest
6865	NewOutgoingKickChatMember returns a new OutgoingKickChatMember instance
6866	NewOutgoingUnbanChatMember returns a new OutgoingUnbanChatMember instance
6867	NewOutgoingCallbackQueryResponseResponseResponse returns a new OutgoingCallbackQueryResponseResponse object
6868	NewInlineQueryAnswer returns a new InlineQueryAnswer instance
6869	Type returns the message type .
6870	Type returns the type of the update .
6871	MarshalJSON marshals the recipient to a JSON string .
6872	queryString returns the querystring as a querystring .
6873	getBaseQueryString returns the base query string .
6874	getBaseQueryString returns the base query string .
6875	queryString returns the querystring as a querystring .
6876	queryString returns the querystring as a querystring .
6877	queryUserProfile returns the querystring for the outgoing user profile
6878	queryString returns the querystring as a querystring .
6879	queryString returns the querystring as a querystring .
6880	NewInlineQueryResult returns a new InlineQueryResult instance
6881	NewInlineQueryResultPhoto returns a new InlineQueryResult instance
6882	NewInlineQueryResult returns a new InlineQueryResult instance
6883	NewInlineQueryMpegResult returns a new InlineQueryResult instance
6884	NewInlineQueryResult returns a new InlineQueryResult instance
6885	Send sends a request to the outgoing user profile
6886	Send sends an outgoing chat action .
6887	Send sends an inline query .
6888	Send sends a kick .
6889	Send sends a message to the unban .
6890	Send sends the response to the response .
6891	NewAPIClient creates a new API client
6892	BeforeInsert updates the timestamp of the timestamp .
6893	ColumnName returns column name .
6894	New returns a new DB .
6895	From creates a From from the database .
6896	Where adds a condition to the database .
6897	OrderBy adds a condition to the database .
6898	Limit returns a new condition .
6899	Offset adds an offset to the database .
6900	Join creates a join condition .
6901	Count returns the number of columns in the database .
6902	Update updates the given object .
6903	Delete deletes an object .
6904	Begin creates a new transaction .
6905	Commit commits the transaction .
6906	Quote returns a quoted string .
6907	SetLogOutput sets the output of the database .
6908	selectToSlice converts rows to slice .
6909	selectToValue converts a row to a value .
6910	fieldIndexByName returns the index of the field of the given type .
6911	columns returns the columns of a table .
6912	TagsFromField returns the tags from the given field .
6913	hasSkipTag checks if the field has a skip tag .
6914	hasPKTag checks if field is a PK tag
6915	isAutoIncrementable returns true if field is autoIncrementable .
6916	collect field indexes
6917	findPKIndex finds the primary index for the given type .
6918	sizeFromTag returns the size of the given field .
6919	columnFromTag returns the column name from the field .
6920	defaultFromTag returns the default value for the field .
6921	Where adds a condition to the condition .
6922	And adds a condition to the condition .
6923	Or adds a condition to the query .
6924	Like adds a query to the condition .
6925	Between records between two objects .
6926	OrderBy adds a condition to the condition .
6927	Limit specifies limit limit
6928	Offset sets the offset of the condition .
6929	SetFormat sets the format of the template
6930	Print writes a query to the log .
6931	Print logs a query
6932	Quote returns a quoted string .
6933	SQLType returns the name of the type .
6934	New returns a new archive .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next network adapter id
6937	totalNetworkAdapters returns the total number of network adapters
6938	Remove all network adapters .
6939	Remove network adapter
6940	NetworkAdapters returns a list of network adapters .
6941	newArchive creates a new archive .
6942	GetFileReader returns an io . Reader for the given name .
6943	ExtractToWriter implements io . Writer .
6944	ExtractToFile writes a file to a file .
6945	SharedFoldFolderDir returns the path of the shared folders .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot removes the snapshot from the snapshot .
6949	BusTypeFromID returns the bus type for the given ID .
6950	Read reads the VMX file .
6951	Write writes the VMX file to disk .
6952	NewVirtualMachine creates a new VM .
6953	VCPus returns the number of VCPus .
6954	VmxPath returns the path of the virtual machine .
6955	MemorySize returns the memory size of the VM .
6956	ReadOnly returns true if the VM is read only .
6957	InVMTeam returns true if the VM is in the VM .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current guest tools state .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM cleans up the VM .
6963	updateVMX updates the vmx file
6964	SetMemorySize mocks base method
6965	SetNumberVCPus sets the number of vcpus .
6966	SetDisplayName sets the DisplayName field s value .
6967	SetAnnotation sets the Annotation field s value .
6968	SetVirtualHwVersion sets the virtual hardware version .
6969	Error returns the error message .
6970	Errorf creates a new error with the given arguments .
6971	Error implements the TraceableError interface .
6972	string returns a string representation of the stack frame .
6973	newStackFrame returns a stack frame for the given pc .
6974	captureStack returns a slice of stack frames .
6975	parseFuncName parses a function name and signature .
6976	Stack prints a stack trace
6977	StackWithCaller returns a stack with a stack trace .
6978	Write implements the Writer interface .
6979	ResponseStatus returns the status of the response .
6980	httpResponseStruct returns the http response struct
6981	SetDetectedContentType sets the expected content type .
6982	New creates a new ServerError
6983	New creates a new DBError
6984	New creates a new ValidationError
6985	New returns a new NotFoundError
6986	StrLength validates the length of a field
6987	StrLenIn checks if a string is in a string
6988	StrIn checks if a value is in a string
6989	GetEmail checks if field is valid
6990	MostSpecificType returns the most recent type of the given slice .
6991	FullTypeHierarchy returns a list of type URIs .
6992	SortTypes sorts a slice of types .
6993	Delete removes a key from the store
6994	Set implements the RedisStore interface .
6995	refresh refreshes the session store
6996	Get returns a redis store
6997	Destroy removes a session
6998	UpExpire expires a session
6999	Use registers a router handler .
7000	ServeHTTP implements the Handler interface .
7001	Use adds middleware to the router group .
7002	Group creates a new router group .
7003	Run starts the router
7004	create creates a new router
7005	Redirect redirects the given URL to the given URL .
7006	Ok sends a response to the response
7007	Fail attempts to fail if an error occurred .
7008	ResStatus writes the status code to the response .
7009	Next implements the Handler interface .
7010	GetSession returns the session .
7011	GetBodyJSON returns the body of the request body
7012	SetSession adds a session to the session
7013	FreshSession creates a new session .
7014	Delete session
7015	Write writes data to the response .
7016	WriteHeader writes a header to the response .
7017	New creates a new client .
7018	setAllowLargeResults sets whether or not the result is allowed .
7019	connect returns a new bigquery service .
7020	InsertRow inserts a row into a table .
7021	AsyncQuery is part of the query .
7022	Query queries for a given dataset .
7023	stdPagedQuery is a helper function that takes a query string and returns the results .
7024	largeDataPagedQuery is a helper function to fetch the results of a large query .
7025	pagedQuery returns a list of data for a given dataset .
7026	pageOverJob returns the results of the job over the given job .
7027	Count returns the number of rows in a dataset .
7028	work is part of the crawler interface
7029	subworker executes a subworker
7030	worker processes a worker
7031	 supervisor supervisor loop
7032	Run starts the worker
7033	Add adds a function to the pool
7034	Wait waits for a pending pipe .
7035	Results returns a slice of jobs .
7036	WaitForJob waits for a job to be sent to the pool .
7037	Status returns the status of the pool .
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc
7039	WebSocketHandlerFunc returns a HandlerFunc that wraps the provided function .
7040	StaticFile returns a static static file .
7041	PreloadFile reads a file from a file .
7042	InitHtmlTemplates initializes html templates .
7043	InitTextTemplates initializes text templates .
7044	Html creates a new HTML template
7045	Text renders a text template
7046	InitWatcher initializes a watcher .
7047	CloseWatcher closes the watcher .
7048	Find finds a route by path .
7049	Add adds a new router to the router .
7050	NewRouter returns a new Router .
7051	NewServerMux returns a new ServerMux
7052	Errors the error handler .
7053	HandleFunc adds a handler to the router .
7054	handleError handles errors .
7055	Redirect sends a redirect to the response .
7056	InitPProf initializes pprof
7057	StartSession starts a new session .
7058	combined returns a channel of the given list .
7059	repeated concatenation of a list of elements .
7060	permutations returns a channel of the list .
7061	repeated permutations .
7062	gformat takes a string and converts it to a string
7063	Errorm creates an error with the given arguments .
7064	Fprintm writes a string to w .
7065	Printm prints a message with the given arguments .
7066	Stringm returns a string representation of the given format .
7067	Validate validates the password strength .
7068	MakeRequirements returns the password strength requirements for the given password .
7069	sanityCheck returns true if the password is valid .
7070	password returns the password for the given password .
7071	NewPassword creates a new password .
7072	NewPasswords returns a list of password passwords .
7073	addNums adds numDigits to a string
7074	 punctuation .
7075	deprecated .
7076	Param adds a parameter to the set .
7077	Parse parses the parameter set .
7078	Unmarshal unmarshals a ParamSet .
7079	GetDefaultHTTPClient returns an IHTTPClient with the given timeout .
7080	DeviceInfo returns information about a device .
7081	DevicePresence returns the presence of a device .
7082	 Notification Status
7083	Delete notification .
7084	NotifyDevice sends a notification to the device .
7085	Assert asserts that the given assertion is true .
7086	CreateFile creates a new file .
7087	AddError adds an error to the form .
7088	AddFieldError adds an error to the form .
7089	HasErrors returns true if the form hasErrors .
7090	NewError creates a new form error
7091	NewFieldError creates a new form error
7092	ChainHandlers returns a new http . Handler
7093	FinalHandler returns the final handler for the given handler .
7094	Hash implements the MD5Hash interface .
7095	IsHash checks if the given string is a hash .
7096	WithBaseDir sets the base directory for the given directory .
7097	WithFileFindFunc sets the file findFunc for the given filename .
7098	WithTemplateFromFiles adds template files to the template .
7099	WithTemplatesFromFiles sets the template files for templates .
7100	WithTemplateFromStrings adds a template to the template
7101	WithTemplatesFromStrings sets the template s templates .
7102	WithFunction adds a function to the options map
7103	WithFunctions adds a function to the options map
7104	WithDelims sets the delimited delimited string
7105	New returns a new Template .
7106	RespondWithStatus renders a response with status code .
7107	RespondTemplate renders a template with the given data .
7108	Respond to the given template .
7109	RenderTemplate renders a template
7110	New creates a new server .
7111	ServeUDP implements the Server interface .
7112	Shutdown closes the server .
7113	QuicHeadersHandler adds QUIC headers to the server .
7114	GetRequestIPs returns the IP address of the request .
7115	DomainRedirectHandler creates a new HTTP redirect handler for a domain .
7116	New returns a new Servers instance
7117	Add adds a new server .
7118	TCPAddr returns the TCP address for the given name .
7119	UDPddr returns the udpddr for the given name .
7120	Close closes all servers .
7121	Shutdown shuts down all servers .
7122	Accept accepts a TLS connection and returns it .
7123	NewStaticFilesHandler creates a new http . Handler for static files .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON marshals options to JSON .
7126	UnmarshalJSON deserializes the options .
7127	MarshalYAML marshals options to YAML .
7128	UnmarshalYAML unmarshals the options into options .
7129	NewHandler creates a new http . Handler with the given logger .
7130	WithPanicResponse sets the panic response body .
7131	WithPanicResponseHandler sets the panic response handler
7132	New returns a new Handler
7133	ServeHTTP implements the Handler interface .
7134	NewContextFunc returns a new context for the given map .
7135	NewMapErrorRegistry creates a new MapErrorRegistry
7136	AddError adds an error to the map .
7137	AddMessageError adds a message to the map .
7138	MustAddError adds an error to the registry .
7139	MustAddMessageError adds a message to the registry .
7140	AddHandler adds a handler to the map .
7141	MustAddHandler adds a handler to the map .
7142	Handler returns the handler for the given code .
7143	New returns a new Client
7144	Request mocks base method
7145	JSONContext sends a JSON request to the client .
7146	StreamContext sends a request to the client .
7147	Stream implements the Client interface .
7148	JSONUnmarshal unmarshals a JSON string .
7149	ServeTCP implements the Server interface .
7150	ServeTCP implements the Server interface .
7151	Shutful shuts down the server .
7152	HandleMethods implements the http . Handler interface .
7153	NewSetHeadersHandler creates a new http . Handler for the given headers .
7154	New creates a new server .
7155	HashedPath returns the path of the file .
7156	New returns a new Service instance
7157	HTMLHandler returns a HTTP handler for the service .
7158	Status returns the status of the service .
7159	StatusHandler handles the status of the store .
7160	OnHandler is used to create a new handler
7161	Off handler for Offset
7162	MarshalJSON serializes this PostIRCMessageRequest .
7163	MarshalJSON serializes this PostArtifactRequest .
7164	MarshalJSON serializes the PostArtifactResponse .
7165	MarshalJSON marshals the HookChanged message .
7166	MarshalJSON marshals the TriggerHookRequest .
7167	MarshalJSON marshals the TriggerHookResponse .
7168	UnmarshalJSON deserializes a TriggerHookResponse
7169	MarshalJSON marshals the LaunchInfo to JSON .
7170	MarshalJSON marshals the variable to JSON .
7171	MarshalJSON marshals the Var1 to JSON .
7172	MarshalJSON marshals the Var3 to JSON .
7173	MarshalJSON returns the JSON representation of the time .
7174	UnmarshalJSON unmarshals a Time into a Time object .
7175	Write implements io . Writer interface .
7176	Seek implements io . SeekSeeker
7177	Read implements io . Reader interface .
7178	MarshalJSON serializes the LaunchSpecsResponse
7179	MarshalJSON serializes the RegionLaunchSpec .
7180	GenerateCode generates code for the API
7181	postPopulates the given API entry .
7182	CreateTemporaryCredentials creates a temporary credential .
7183	setURL sets the URL for the given route .
7184	SignRequest is used to sign a request .
7185	APICalls API call
7186	SignURL returns a signed URL for the given route .
7187	MarshalJSON marshals the HawkSignatureResponse .
7188	bmw256 computes a bmw256 hash .
7189	NewCubeHash returns a new CubeHash .
7190	cubeHash256 computes the cube hash
7191	Sum computes the hash of the given data .
7192	 squeeze the state of a block
7193	reduceSqueezeRow is used to reduce a row of rows .
7194	reduceDuplexRow1 computes the reduced duplexes for the given row .
7195	NewReaderByteCodeLoader creates a ReaderByteCodeLoader
7196	LoadReader loads a byte code from a reader .
7197	NewV3 creates a new UUID
7198	txLiteral sets the literal literal value .
7199	txFetchSymbol returns the symbol for the symbol .
7200	txMarkRaw marks the current state as a string .
7201	txUnmarkRaw is used to unmark raw raw data .
7202	txPrint writes the output to the output .
7203	txPrintRaw prints raw raw output as a string .
7204	NewLoopVar creates a new LoopVar .
7205	txMakeArray creates a new array .
7206	translateOmni calls txnni
7207	DumpAST sets the flags of the flags .
7208	DumpByteCode sets the flags of the flags .
7209	Optimize optimizes a byte array .
7210	NewFuncDepot returns a new FuncDepot .
7211	Get returns the value for the given key .
7212	Set sets the value of a function .
7213	NewFileTemplateFetcher returns a new FileTemplateFetcher .
7214	LastModified returns the last modified time .
7215	Reader returns an io . Reader
7216	Bytes returns the contents of the file .
7217	NewState initializes a new state .
7218	PushFrame creates a new frame .
7219	PopFrame pops a frame from the state .
7220	CurrentFrame returns the current frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark returns the current mark .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a byte code from the state .
7226	Reset resets the state of the state .
7227	DeclareVar adds a variable to the stack .
7228	GetLvar returns the value at the given index .
7229	SetLvar sets the value at the given index .
7230	NewByteCode creates a new ByteCode
7231	Append appends a new OpCode .
7232	AppendOp appends a new op .
7233	String returns a string representation of the ByteCode .
7234	NewCachedByteCodeLoader returns a new CachedByteCodeLoader .
7235	Load loads a template from the cache .
7236	NewFileCache returns a new FileCache instance
7237	GetCachePath returns the path for the given key .
7238	Get returns a cache entity .
7239	Set implements the FileCache interface .
7240	Delete removes a key from the cache .
7241	Get returns the cached entity .
7242	Set sets a cache entity .
7243	Delete deletes a key .
7244	NewStringLexer creates a new Lexer .
7245	NewReaderLexer creates a new parser .
7246	NewV4 returns a new UUID
7247	Parse parses a template .
7248	ParseReader parses a reader .
7249	Visit implements the AST .
7250	String returns a string representation of the AST .
7251	Run implements the VM .
7252	Default parser .
7253	DefaultLoader initializes the loader .
7254	DefaultVM creates a new VM .
7255	Get returns the value of the given key .
7256	NewHTTPSource creates a new http source
7257	NewStringByteCodeLoader returns a new StringByteCodeLoader
7258	LoadString loads a byte code from a string .
7259	Get returns the value of the given key .
7260	NewOp creates a new op .
7261	MarshalBinary encodes an op into a byte slice .
7262	UnmarshalBinary deserializes an op .
7263	ArgInt returns the value of the op .
7264	ArgString returns the argument as string .
7265	AppendOp appends an op to the buffer .
7266	Compile compiles the AST .
7267	NewV5 creates a new UUID
7268	Sort sorts the lexsymbolList .
7269	Less returns true if i is less than j .
7270	Swap implements the SortSorter interface .
7271	Copy returns a copy of this LexSymbolSet .
7272	Set sets a symbol .
7273	GetSortedList returns the sorted list .
7274	Top returns the top of the stack .
7275	Resize resizes the stack .
7276	Extend implements the Stack interface .
7277	 Grow grows the stack .
7278	Get returns the value at the given index .
7279	Set implements the Stack interface .
7280	Push adds a value to the stack .
7281	Pop removes the stack from the stack .
7282	String returns a string representation of the stack .
7283	GetHostIPs returns a list of IP addresses .
7284	GetPrivateHostIPs returns a list of private IP addresses .
7285	IsPrivate returns true if the given IP is private .
7286	Environ returns a list of environment variables .
7287	getenv returns the value of the environment variable
7288	flagAsEnv returns the flag as a string .
7289	NewPolicy returns a new policy .
7290	CreateRandom creates a random slice of bytes .
7291	Shuffle shuffles a byte slice .
7292	Generate generates a string from a policy .
7293	ExecutableFolder returns the executable folder .
7294	Ignore adds an error to the Sentinel
7295	Sigs sets the signal s shutdown signal
7296	Logf sets the log f .
7297	Errorf sets the error f .
7298	New returns a new Sentinel instance
7299	Run starts the server
7300	Shutdown shuts down the daemon
7301	ShutdownIgnore returns true if an error occurred .
7302	Register registers a new service .
7303	Mux creates a new netmux
7304	HTTP registers a new http . Handler .
7305	IgnoreError returns a function that checks if an error is returned .
7306	IgnoreNetOpError returns true if an error occurred .
7307	convertContextFuncs returns a slice of context functions .
7308	Router creates a router for the given service data .
7309	buildInfoHandler handler for BuildInfoHandler
7310	Encode encodes v into json .
7311	Json creates a new martini handler
7312	validateAndMap maps the given object and maps it to the context .
7313	Count returns the number of errors .
7314	Header returns a map of headers
7315	PreflightHeader returns a map of headers for the given origin .
7316	IsOriginAllowed returns true if the given origin is allowed .
7317	Allow sets the HTTP header for the request .
7318	Renders renderer .
7319	String returns a string representation of AcceptLanguages .
7320	Languages returns a martini middleware middleware .
7321	Prefix adds a prefix to the middleware .
7322	Basic returns a HandlerFunc that authenticates the given username .
7323	UpdateUser updates the session .
7324	GetBy retrieves the user by id
7325	AddressToAccountId converts an address to an account id .
7326	MutateChange implements the ChangeTrustOp interface .
7327	MutateChange implements the ChangeTrust interface .
7328	Trust creates a change based on the given issuer and issuer .
7329	RemoveTrust removes a certificate from the given issuer and issuer .
7330	MutatePayment implements the PaymentPayment interface .
7331	MutatePayment mocks base method
7332	MutatePayment mocks base method
7333	MutatePayment implements the PayloadPayment interface .
7334	MutateAccountMerge implements the DestinationMerge interface .
7335	MustParse parses a string from a string .
7336	Parse parses a string .
7337	String returns a string representation of x .
7338	CreateOffer creates a new offer
7339	CreatePassiveOffer creates a new ManageOffer .
7340	UpdateOffer updates an offer .
7341	DeleteOffer deletes an offer
7342	ManageOffer creates a new ManageOffer
7343	Mutate mocks base method
7344	MutateManageOffer mutates a ManageOffer
7345	MutateManageOffer mocks base method
7346	MutateManageOffer mutates a ManageOffer
7347	MutateOperation mocks base method
7348	String returns a string representation of price
7349	Transaction creates a new transaction builder .
7350	Mutate mocks base method
7351	Hash returns the hash of the transaction builder .
7352	HashHex returns the hash of the transaction builder .
7353	Sign adds signers to the transaction .
7354	MutateTransaction mocks base method
7355	MutateTransaction mocks base method
7356	MutateTransaction mocks base method
7357	MutateTransaction mocks base method
7358	MutateTransaction mocks base method
7359	MutateTransaction mocks base method
7360	MutateTransaction mocks base method
7361	MutateTransaction mocks base method
7362	MutateTransaction mocks base method
7363	MutateTransaction mocks base method
7364	MutateTransaction mocks base method
7365	MutateTransaction mocks base method
7366	MutateTransaction mocks base method
7367	MutateTransaction mocks base method
7368	MutateTransaction mocks base method
7369	MutateTransaction mocks base method
7370	Scan sets the int64 value .
7371	InitialState returns the state of the ledger .
7372	Changes returns all changes in the ledger .
7373	StateAfter returns the state after the given key .
7374	changes returns a list of all the changes in the ledger .
7375	MustDecode converts a string into a byte slice .
7376	Encode encodes a string into a base64 encoded string .
7377	MustEncode converts a byte slice into a string .
7378	checkValidVersionByte checks if the given version is valid .
7379	Checksum returns the crum of the given data .
7380	Validate checksum against expected data
7381	LedgerKey returns the LedgerKey of the LedgerEntry .
7382	checkPlausible checks if the alphabet is available .
7383	Address returns the address of the AccountId .
7384	Equals returns true if this AccountId is equal to another AccountId .
7385	SetAddress sets the AddressId field s value .
7386	ToXdrObject converts an asset into an XDR object .
7387	Through adds asset to path
7388	PayWith returns a PayWithPath
7389	Convert a price to a price
7390	Mutate mocks base method
7391	MutateTx mocks base method
7392	Bytes returns the bytes of the transaction envelope .
7393	Base64 returns the base64 encoded string .
7394	MutateTransactionEnvelope mutates a transaction envelope .
7395	MutateSetOptions mocks base method
7396	MutateSetOptions mocks base method
7397	MutateSetOptions mocks base method
7398	MutateSetOptions mocks base method
7399	SetThresholds returns a new Thresholds
7400	MutateSetOptions mocks base method
7401	MutateSetOptions mocks base method
7402	MutateSetOptions mocks base method
7403	MutateCreateAccount mocks base method
7404	MutateCreateAccount mocks base method
7405	Random returns a random seed .
7406	Master returns a master key from the given network passphrase .
7407	Parse parses the given address and returns it .
7408	MustParse parses the given address and returns it .
7409	MutateAllowTrust sets the AllowTrust field s value .
7410	MutateAllow returns a copy of the AllowTrustOp
7411	MutateAllowTrust mocks base method
7412	ToAsset returns an asset to an asset .
7413	SetNative sets the native asset type .
7414	String returns a string representation of an asset .
7415	Equals returns true if the asset is equal .
7416	MustExtract extracts an asset from an asset .
7417	Unmarshal implements io . Reader interface .
7418	Marshal implements io . Writer .
7419	ValidEnum returns true if the given value is valid .
7420	NewPublicKey returns a public key .
7421	MustEd25519 returns the public key .
7422	NewNodeId creates a new node id
7423	NewAccountId creates a new AccountId
7424	ValidEnum returns true if the asset type is valid .
7425	ArmForSwitch returns the arm for the switch .
7426	NewAsset creates a new Asset .
7427	MustAlphaNum4 returns the AssetAlpha4 value for the asset .
7428	GetAlphaNum4 returns the alpha number of the asset .
7429	MustAlphaNum returns the asset alpha number .
7430	GetAlphaNum returns the alpha number of the asset .
7431	ValidEnum returns true if the given value is valid .
7432	ValidEnum returns true if the given value is valid .
7433	ValidEnum returns true if the account flags are valid .
7434	NewAccountEntryExt returns a new AccountEntryExt instance
7435	ValidEnum returns true if the given value is valid .
7436	NewTrustLineEntryExt returns a new TrustLineEntry instance
7437	ValidEnum returns true if the offer is valid .
7438	NewOfferEntryExt returns a new OfferEntry instance
7439	NewDataEntryExt returns a new DataEntryExt instance
7440	NewLedgerEntryData creates a new LedgerEntry .
7441	NewLedgerEntryExt returns a new LedgerEntry instance
7442	ValidEnum returns true if the given value is valid .
7443	ValidEnum returns true if the operation type is valid .
7444	ArmForSwitch returns the arm for the switch .
7445	NewAllowTrustOpAsset returns a new AllowTrustOp instance
7446	MustAssetCode4 returns the asset code for this asset .
7447	GetAssetCode4 returns the asset code for the given type .
7448	MustAssetCode returns the asset code for this asset .
7449	GetAssetCode returns the asset code for the given type .
7450	NewOperationBody creates a new OperationBody .
7451	MustCreateAccountOp returns the CreateAccountOp .
7452	GetCreateAccountOp returns the CreateAccountOp field if it exists .
7453	MustPaymentOp returns the payment op .
7454	GetPaymentOp returns the payment operation .
7455	MustPathPaymentOp returns the PathPaymentOp if it is not present .
7456	GetPathPaymentOp returns the PathPayment operation .
7457	MustManageOffer returns the ManageOfferOp .
7458	GetManageOffer returns the ManageOffer operation .
7459	MustCreatePassiveOffer returns the CreatePassiveOfferOp .
7460	GetPassiveOfferOp returns the CreatePassiveOffer operation .
7461	MustSetOptionsOp returns the SetOptionsOp for the operation .
7462	GetSetOptionsOp returns the set options for the operation .
7463	MustChangeTrustOp returns the ChangeTrustOp .
7464	GetChangeTrustOp returns the ChangeTrustOp .
7465	MustAllowTrustOp returns the AllowTrustOp .
7466	GetAllowTrustOp returns the AllowTrustOp field if it exists .
7467	MustDestination returns the location of the operation .
7468	GetDestination returns the address of the operation
7469	MustManageDataOp returns the ManageDataOp .
7470	GetManageDataOp returns the ManageDataOp for the switch .
7471	ValidEnum returns true if the value is valid .
7472	ArmForSwitch returns the arm for the switch .
7473	NewMemo creates a new Memo .
7474	MustText returns the value of the Memo .
7475	GetText returns the text of the Memo
7476	MustId returns the id of the Memo .
7477	GetId returns the id of the Memo
7478	MustHash returns the hash .
7479	GetHash returns the hash of this Memo .
7480	MustRetHash returns the value of the Memo .
7481	NewTransactionExt returns a new transaction extension .
7482	ValidEnum returns true if the value is valid .
7483	ArmForSwitch returns the arm for the switch
7484	NewCreateAccountResult returns a new CreateAccountResult instance
7485	ValidEnum returns true if the payment result is valid .
7486	ArmForSwitch returns the arm for the switch .
7487	NewPaymentResult creates a new PaymentResult
7488	ValidEnum returns true if the path is valid .
7489	ArmForSwitch returns the arm for the switch
7490	NewPathPaymentResult returns a new PathPaymentResult instance
7491	MustNoIssuer returns the asset if not present .
7492	GetNoIssuer returns the value of the NoIssuer .
7493	ValidEnum returns true if the value is valid .
7494	ValidEnum returns true if the value is valid .
7495	ArmForSwitch returns the arm for the switch
7496	NewManageOfferSuccessResult returns a new ManageOfferSuccessResult instance
7497	ArmForSwitch returns the arm for the switch
7498	NewManageOfferResult returns a new ManageOfferResult instance
7499	ValidEnum returns true if the value is valid .
7500	ArmForSwitch returns the arm for the switch .
7501	NewSetOptionsResult returns a new SetOptionsResult instance
7502	ValidEnum returns true if the given value is valid .
7503	ArmForSwitch returns the arm for the switch .
7504	NewChangeTrustResult returns a new ChangeTrustResult instance
7505	ValidEnum returns true if the given value is valid .
7506	ArmForSwitch returns the arm for the switch .
7507	NewAllowTrustResult returns a new AllowTrustResult instance
7508	ValidEnum returns true if the account is valid .
7509	ArmForSwitch returns the arm for the switch .
7510	NewAccountMergeResult returns a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the source account balance
7512	GetSourceAccountBalance returns the source account balance
7513	ValidEnum returns true if the value is valid .
7514	ArmForSwitch returns the arm for the switch .
7515	NewInflationResult creates a new InflationResult .
7516	MustPayouts returns the list of Payouts that have been set .
7517	GetPayouts returns the list of Payouts for the switch .
7518	ValidEnum returns true if the value is valid .
7519	ArmForSwitch returns the arm for the switch
7520	NewManageDataResult returns a new ManageDataResult instance
7521	ValidEnum returns true if the operation result is valid .
7522	ArmForSwitch returns the arm for the switch .
7523	NewOperationResultTr returns a new operation result .
7524	MustCreateAccountResult returns the CreateAccountResult .
7525	GetCreateAccountResult returns the result of the switch result
7526	MustPaymentResult returns the payment result .
7527	GetPaymentResult returns the payment result .
7528	MustPathPaymentResult returns the PathPaymentResult .
7529	GetPathPaymentResult returns the PathPayment result .
7530	MustManageOfferResult returns the ManageOfferResult .
7531	GetManageOfferResult returns the ManageOffer result .
7532	MustCreatePassiveOfferResult returns a ManageOfferResult .
7533	MustSetOptionsResult returns the SetOptionsResult .
7534	GetSetOptionsResult returns the set options for the switch .
7535	MustChangeTrustResult returns the ChangeTrustResult .
7536	GetChangeTrustResult returns the ChangeTrustResult associated with the switch .
7537	MustAllowTrustResult returns the AllowTrustResult .
7538	GetAllowTrustResult returns the AllowTrustResult associated with the switch .
7539	MustAccountMergeResult returns the account merge result
7540	GetAccountMergeResult returns the account merge result
7541	MustInflationResult returns the value of the OperationResult
7542	GetInflationResult returns the inflation result of the operation .
7543	MustManageDataResult returns the ManageDataResult .
7544	GetManageDataResult returns the ManageDataResult .
7545	ArmForSwitch returns the arm for the switch .
7546	NewOperationResult creates a new OperationResult .
7547	MustTr returns the result of the operation result .
7548	GetTr implements the OperationResult interface .
7549	ValidEnum returns true if the transaction result is valid .
7550	ArmForSwitch returns the arm for the switch .
7551	NewTransactionResultResultResult returns a TransactionResultResult instance
7552	MustResults returns the result of the operation result .
7553	GetResults returns the result of the switch result .
7554	NewTransactionResultExt returns a transaction result .
7555	NewStellarValueExt returns a new StellarValueExtExt instance
7556	NewLedgerHeaderExt returns a new LedgerHeaderExt instance
7557	ValidEnum returns true if the given value is valid .
7558	ArmForSwitch returns the arm for the switch .
7559	NewLedgerUpgrade creates a new LedgerUpgrade .
7560	MustNewLedgerVersion returns the latest version of the ledger upgrade .
7561	GetNewLedgerVersion returns the new upgrade version .
7562	MustNewBaseFee returns the new base base fee .
7563	GetNewBaseFee returns the NewBaseFee field if it exists .
7564	MustNewMaxTxSetSize returns the maxTxSetSize value for the Ledger upgrade .
7565	GetNewMaxTxSet returns the new MaxTxSetSize value for the switch .
7566	ArmForSwitch implements the LedgerKey interface .
7567	NewLedgerKey creates a new LedgerKey .
7568	ValidEnum returns true if the bucket entry is valid .
7569	ArmForSwitch returns the arm entry for the given switch .
7570	NewBucketEntry creates a new BucketEntry .
7571	MustLiveEntry returns the LedgerEntry .
7572	GetLiveEntry retrieves the LiveEntry from the bucket .
7573	MustDeadEntry returns the LedgerKey .
7574	GetDeadEntry returns the DeadEntry associated with this bucket .
7575	NewTransactionHistoryEntryExt returns a new TransactionHistoryEntry instance
7576	ArmForSwitch returns the arm for the switch .
7577	NewTransactionHistoryResultEntryExt returns a TransactionHistoryResultEntry instance
7578	NewLedgerHeaderHistoryEntryExt returns a new LedgerHeaderEntry instance
7579	NewScpHistoryEntry returns a new ScpHistoryEntry .
7580	ValidEnum returns true if the given value is valid .
7581	ArmForSwitch returns the arm for the switch .
7582	NewLedgerEntryChange creates a new LedgerEntry .
7583	MustCreated returns the LedgerEntry for the LedgerEntryChange .
7584	GetCreated returns the LedgerEntry of the LedgerEntry .
7585	MustUpdated returns the updated LedgerEntry .
7586	GetUpdated returns the LedgerEntry of the LedgerEntryChange .
7587	MustRemoved returns the value of the LedgerKey .
7588	GetRemoved implements the LedgerKey interface .
7589	MustState returns the state of the LedgerEntry .
7590	GetState returns the state of the LedgerEntry .
7591	NewTransactionMeta returns a new TransactionMeta instance
7592	MustOperations returns all operations in the transaction meta .
7593	GetOperations returns the operations for the switch .
7594	ValidEnum returns true if the given error code is valid .
7595	ValidEnum returns true if the value is valid .
7596	ArmForSwitch returns the arm for the given switch .
7597	NewPeerAddressIp creates a new PeerAddressIp .
7598	MustIp4 returns the address of the peer address .
7599	GetIv4 returns the IP address of the Peer .
7600	MustIp6 returns the address of the peer address .
7601	GetIv6 returns the address of the peer address
7602	ValidEnum returns true if the given value is valid .
7603	ArmForSwitch returns the arm for the switch .
7604	NewStellarMessage returns a new StellarMessage instance
7605	MustError returns the error .
7606	GetError returns the error from the StellarMessage
7607	MustHello returns a Hello message .
7608	GetHello implements the StellarMessage interface .
7609	MustAuth returns the auth message .
7610	GetAuth returns the Auth field of the StellarMessage
7611	MustDontHave returns the value if it is not present .
7612	GetDontHave returns the value of the switch .
7613	MustPeers returns the list of peer addresses .
7614	GetPeers returns the list of peers for the sender
7615	MustTxSetHash returns the transaction hash .
7616	GetTxSetHash returns the transaction hash .
7617	MustTxSet returns the transaction set .
7618	GetTxSet returns the transaction set .
7619	MustTransaction returns the current transaction .
7620	GetTransaction returns the transaction for this StellarMessage .
7621	MustQSetHash returns the value of the QSetHash .
7622	GetQSetHash returns the QSetHash field if it exists .
7623	MustQSet returns a ScpQuorumSet .
7624	GetQSet returns the QSet field s value .
7625	MustEnvelope returns a ScpEnvelope .
7626	GetEnvelope returns the envelope of the message
7627	MustGetScpLedger returns the value of the scpLedger .
7628	GetScpLedgerSeq returns the value of the switch .
7629	ArmForSwitch returns the arm for the switch .
7630	NewAuthenticatedMessage returns a new AuthenticatedMessage instance
7631	ValidEnum returns true if the given value is valid .
7632	ArmForSwitch returns the arm for the switch .
7633	NewScpStatementPledges returns a ScpStatement instance
7634	MustPrepare returns the value of the statement .
7635	GetPrepare returns the type of the switch .
7636	MustConfirm returns the value of the ScpStatementConfirm
7637	GetConfirm returns the state of the switch .
7638	MustExternalize returns the value of the ScpStatement .
7639	GetExternalize returns the externalize of the switch .
7640	MustNominate returns the value of the ScpStatement
7641	GetNominate returns the nominate field of the switch .
7642	SafeUnmarshalBase64 unmarshals a base64 encoded string .
7643	SafeUnmarshal unmarshals data into dest .
7644	SendAmount returns the payment amount of the asset .
7645	LoadAccount loads an account .
7646	SequenceForAccount returns the sequence number for a given account .
7647	SubmitTransaction is used to submit a transaction .
7648	Equals returns true if the LedgerKey is equal to the given key .
7649	SetAccount sets the account s account .
7650	SetData sets the data for the given account .
7651	SetOffer sets the OfferKey field s value .
7652	SetTrustline sets the Trustline for the given account .
7653	Add adds a key to the database .
7654	tryHash computes the hash for the given hash .
7655	HashIndexFromKey returns the index of the given key .
7656	ReadInt reads an int from the slice .
7657	Read implements io . Reader interface .
7658	Get returns the value for the given key .
7659	Iterate returns an Iterator .
7660	Write implements io . Writer interface .
7661	RegisterDatasources registers a map of datasources
7662	Register fonts
7663	New returns a new map .
7664	NewSized creates a new map .
7665	Load loads the map .
7666	Resize resizes the map .
7667	Free frees the map .
7668	SRS returns the SRS representation of the map .
7669	ZoomAll mocks base method
7670	ZoomTo panics on the map .
7671	Render renders the map .
7672	RenderImage renders a map .
7673	RenderToFile writes the map to a file .
7674	SetBufferSize sets the size of the map .
7675	Search returns a list of search responses .
7676	Get returns a connection to the pool .
7677	put adds a connection to the pool .
7678	AudioToStereoF32 converts the audio buffer to a stereo frame .
7679	Bitcrush flushes a bitbuffer into a bit buffer .
7680	NormalizeMax takes a buffer and normalizes it .
7681	 Gain Gain applies the given multiplier to the given buffer .
7682	MonotDown mixes the audio data from the audio buffer .
7683	Quantize computes the quantize of the audio buffer .
7684	PCMScale scales the buffer with the given bit depth .
7685	StereoPan panics
7686	Leader returns the leader .
7687	IsLeader returns true if the candidate is leader .
7688	NewResponse returns a new Response
7689	GetRequestID returns the request ID .
7690	Log implements MonitorableWriter .
7691	SendMailSSL sends a mail to the given address .
7692	Send sends a message to the mail service
7693	WaitForWait waits for a connection to the given host and returns an error .
7694	Get returns the configuration from the given source .
7695	initConfig initializes the configuration
7696	WritePluginResults writes the results to the database .
7697	NewAuthController returns a new AuthController
7698	Authenticate is used to authenticate the user .
7699	NewOAuth2Controller creates a new OAuth2Controller
7700	Refresh refresh token
7701	Token handles OAuth2 requests .
7702	Logging creates a new http . Handler for logging .
7703	SingleFile creates a http handler for a single file .
7704	Write writes data to the response .
7705	Hijack mocks base method
7706	NewMongo returns a new MongoDB instance
7707	Disconnect disconnect from MongoDB
7708	New creates a new table .
7709	PrintTable prints a table .
7710	PrintHorizontal prints a horizontal row of a map
7711	PrintRow writes a row to a table
7712	AddRow adds a row to the table .
7713	Print prints the contents of the table .
7714	String returns a string representation of the table .
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a row .
7717	fieldString returns a string representation of a field .
7718	StringTableDash returns a string representing the dash .
7719	printMarkdownDash prints a markdown row .
7720	StringMarkdownDash returns a string representing the markdown markdown .
7721	HashPassword returns the hash of a password .
7722	EncodeOAuth2Code encodes a signed OAuth2 code .
7723	DecodeOAuth2Code decodes an OAuth2 code into a response .
7724	NewServer creates a new server
7725	Start starts the server .
7726	Stop stops the server .
7727	NewLoggingServeMux returns a new LoggingServeMux
7728	Handler implements the http . Handler interface .
7729	Handle implements the Handler interface .
7730	HandleFunc registers a handler for logging .
7731	Init initializes the database .
7732	WaitForConnection waits for a connection to the database .
7733	StoreFileInfo stores the file info in the database .
7734	Store plugin results
7735	 CamelCase converts a string to camelCase
7736	GetOpt returns the value of the option
7737	Getopts returns the default value for the user input
7738	GetSHA256 returns the SHA256 hash of a file .
7739	RunCommand runs a command and returns the output .
7740	RemoveDuplicates removes duplicate duplicate elements .
7741	Unzip unzip a zip archive
7742	SliceContainsString returns true if the list contains a string .
7743	NewSMTP creates a SMTP .
7744	Send mail
7745	GetEnvironment returns the environment for the given environment .
7746	GetSMTP returns the SMTP configuration .
7747	GetConfig returns the configuration for the given source .
7748	GetEnvironment returns the environment for the given environment .
7749	GetMongo get mongo config
7750	TokenHandler creates a new http . Handler for a token .
7751	Receive receives a message from the connection .
7752	Send sends a message to the client
7753	allBoshReleaseNames returns a list of all BoshReleaseNames
7754	AddedProperty adds a property to the delta .
7755	RemovedProperty adds a property to the job .
7756	AddDeltaJob adds a delta job to the result .
7757	Concat concatenates the result of the result .
7758	Read reads a release from a release .
7759	Pull pulls a release from the cache
7760	BuildJob builds a job .
7761	LoadBoshRelease loads a BoshRelease from a repository .
7762	readBoshRelease reads a BoshRelease from an io . Reader .
7763	readBoshRelease reads from the given io . Reader .
7764	readBoshJob reads the job from the given io . Reader .
7765	NewRequest creates a new http . Request
7766	PushCloudConfig pushes a cloud config to the cloud .
7767	Generate generates an object manifest
7768	CreateNewRecord creates a new record .
7769	NewShowCmd returns a new ShowCmd instance
7770	All implements the ShowCommand interface .
7771	GetDefaultTaskImageResource returns the default image resource .
7772	AddRawJob adds a new job to the pipeline
7773	AddGroup adds a group to the pipeline
7774	GetResourceByName returns the resource configuration by name .
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a resource to the pipeline
7777	AddGithubResource adds a Github resource to the pipeline
7778	AddBoshource adds a source to the pipeline
7779	AddBoshDeploymentResource adds a resource to the pipeline
7780	AddGitResource adds a resource to the pipeline
7781	allJobNames returns a list of job names
7782	NewDeploymentManifestFromFile creates a new DeploymentManifest from a file .
7783	NewDeploymentManifest returns a new DeploymentManifest instance
7784	AddRemoteRelease adds a release to the deployment manifest .
7785	AddRemoteStemcell adds a new stemcell to the deployment manifest .
7786	Tag returns the tag for the given key .
7787	RemoveTag removes a tag from the manifest .
7788	LoadPivnetRelease loads a PivnetRelease from the given path .
7789	 BoshReleaseOrEmpty returns a copy of the BoshRelease .
7790	readPivnetRelease reads from the given path .
7791	decodeYaml reads yaml data from r .
7792	NewZipWalker creates a new ZipWalker .
7793	NewDiffCmd returns a new DiffCmd
7794	All implements the Writer interface .
7795	Job implements the Diff interface .
7796	New returns a new Differ instance
7797	StructName returns the name of the struct .
7798	TypeName returns the type of a record .
7799	NewTgzWalker creates a new TgzWalker .
7800	NewBackoff returns a new Backoff
7801	Reset resets the Backoff .
7802	NewExponential returns a new Backoff .
7803	NewExponentialFullJitter creates a new BackoffFitter .
7804	NewLinear returns a new Backoff .
7805	GetLineSize returns the size of a line .
7806	Get max size
7807	Compute the buffer .
7808	WithTimeout adds the timeout to the postApps params
7809	WithContext adds the context to the postApps params
7810	WithHTTPClient adds the HTTPClient to the PostApps params
7811	WithBody adds the body to the request params
7812	WithTimeout adds the timeout to the getAppsApp params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the getAppsApp params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary deserializes a RouteWrapper .
7817	WithTimeout adds the timeout to the getApps params
7818	WithContext adds the context to the getApps params
7819	WithHTTPClient adds the HTTPClient to the getAppsParams instance
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the deleteAppsApp params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the request params
7825	WithContext adds the context to the request params
7826	WithHTTPClient adds the HTTPClient to the request params
7827	WithAppRout adds the app to the params params
7828	WithBody adds the body to the request params
7829	WithRoute adds the route to the request params
7830	WithTimeout adds the timeout to the request params
7831	WithContext adds the context to the request params
7832	WithHTTPClient adds the HTTPClient to the PostAppsAppRoutes params
7833	WithAppRout sets the AppAppsRout params
7834	WithBody adds the body to the post apps .
7835	WithTimeout adds the timeout to the request params
7836	WithContext adds the context to the request params
7837	WithAppRout adds the app to the PutAppsRoutesRoute params
7838	WithBody adds the body to the request params
7839	WithRoute adds the route to the request params
7840	WithTimeout adds the timeout to the getAppsAppRoutes params
7841	WithContext adds the context to the getAppsAppRoutes params
7842	WithHTTPClient adds the HTTPClient to the getAppsAppRoutes params
7843	WithAppRout sets the AppRoutes params
7844	WithTimeout adds the timeout to the patch app params
7845	WithContext adds the context to the patch app params
7846	WithHTTPClient adds the HTTPClient to the patch app params
7847	WithApp adds the app to the patch app params
7848	WithBody adds the body to the patch app .
7849	WithTimeout adds the timeout to the PutAppsApp params
7850	WithContext adds the context to the PutAppsApp params
7851	WithApp adds the app to the put app params
7852	WithBody adds the body to the PutAppsApp params
7853	UnmarshalJSON deserializes a Task
7854	MarshalJSON marshals a Task .
7855	Validate validates this Task .
7856	GetRanges returns a slice of IP addresses .
7857	WithTimeout adds the timeout to the getAppsAppRoutesRoute params
7858	WithContext adds the context to the getAppsAppRoutesRoute params
7859	WithHTTPClient adds the HTTPClient to the getAppsAppRoutesRoute params
7860	WithAppRout adds the app to the list of apps .
7861	WithRoute sets the route params
7862	New returns a new FuncClient
7863	SetTransport sets the transport .
7864	WithTimeout adds the timeout to the delete apps .
7865	WithContext adds the context to the delete apps app .
7866	WithHTTPClient adds the HTTPClient to the delete apps .
7867	WithAppRout adds the app to the delete apps .
7868	WithRoute sets the route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the getTasks params
7872	NewValueStore creates a new value store .
7873	Close closes the store .
7874	SetBackend sets the backend
7875	Ring returns the ring .
7876	GetLocalID returns the local ID of the server .
7877	GetListenAddr returns the address of the server
7878	Start starts the server .
7879	shutdownFinished will close the server
7880	Stop stops the server .
7881	Exit stops the server .
7882	SelfUpgrade implements the Server interface .
7883	SoftwareVersion returns the current version of the server .
7884	Shutdown implements the GroupStore interface .
7885	Rant returns the rant of the given rant .
7886	Profile returns a user profile
7887	Search returns a list of Rants
7888	Return a random RantModel
7889	Weekants returns a list of all Rants
7890	getUserId returns the user id for the given username .
7891	Shutdown implements the ReplicaStore interface .
7892	FExists checks if a file exists .
7893	outbound is part of the message stream
7894	parse parses the message stream
7895	Group creates a new Group .
7896	Groups returns all groups in the domain .
7897	GetGroup gets a group by name
7898	Reticence returns a string with the given length .
7899	CheckPassword validates a password .
7900	CleanUrl cleans up a url
7901	NewParameter creates a new Parameter .
7902	MakeParams returns a new Params instance .
7903	Parse parses the parameters from the given struct .
7904	Email returns the email address .
7905	Forwarder returns a new Forwarder .
7906	Forwarders returns a list of Forwarders .
7907	GetForwarder returns a forwarder .
7908	New returns a new CGP instance
7909	EscapeCommaSeparated cleans up a string .
7910	Alias returns a new Alias instance
7911	Email returns the email address .
7912	Aliases returns the aliases for the account .
7913	RealName returns the account s name .
7914	Email returns the email address .
7915	Account returns a new Account
7916	Accounts returns all the accounts in the domain .
7917	Exists returns true if the domain exists .
7918	Aliases returns the aliases for the domain .
7919	Domain returns a new Domain
7920	Domains returns a list of all available domains .
7921	New creates a new error
7922	Wrap wraps WrapErr and returns an error .
7923	mergeIn merges the given info into an error message .
7924	wrapErrStr returns the wrapped error string .
7925	concatArgs returns a string with the given arguments .
7926	MailingList returns a new MailingList instance
7927	Subscriber returns a subscriber
7928	Subscribers returns a list of Subscribers .
7929	MailingLists returns a list of Mailing lists .
7930	NewByteKeyItem returns a pointer to a byte slice .
7931	CompareBytes compares two byte slices .
7932	CompareInt computes the comparison of two integers .
7933	Malloc returns a pointer to memory .
7934	Free frees a pointer
7935	Stats returns a string representation of the memory .
7936	FreeOSMemory free memory .
7937	Add adds an item to the segment .
7938	NewSegment creates a new Segment .
7939	Assemble creates a new Skiplist .
7940	CompareNodeTable compares two nodes .
7941	New creates a new NodeTable .
7942	Stats returns a string representation of the node table .
7943	MemoryInUse returns the memory in memory .
7944	Get returns the value for the given key .
7945	Update implements the NodeTable interface .
7946	Remove removes a node from the cache .
7947	Close closes the database .
7948	MemoryInUse returns the number of memory in memory .
7949	debugMarkFree implements the Debug interface for debug .
7950	Seek implements the Iterator interface .
7951	Next implements Iterator .
7952	Refresh refreshes the iterator .
7953	Close closes the iterator .
7954	NewIterator returns a new Iterator .
7955	SeekFirst implements the MergeIterator interface .
7956	Next implements the Iterator interface .
7957	Seek implements the MergeIterator interface .
7958	Keys returns the keys in the list .
7959	Remove removes a key from the list .
7960	Add adds a new node to the list .
7961	NewWithConfig creates a new Skipsist .
7962	FreeNode frees a node .
7963	MakeBuf returns a BufferBuffer .
7964	Size returns the size of a node .
7965	NewLevel returns the next level of the next level
7966	Insert inserts an item into the skipsist .
7967	Insert2 inserts an item into the skipsist .
7968	Insert3 inserts an item into the storage .
7969	Delete deletes an item from the list .
7970	DeleteNode deletes a node .
7971	GetRangeSplitItems returns a slice of all items in the slice .
7972	Bytes returns the contents of the item .
7973	ItemSize returns the size of the item .
7974	KVFromBytes converts a byte slice into a KV .
7975	CompareKV compares two bytes .
7976	Emit sends an event to the event controller
7977	UnregisterHandler removes a handler from the event controller .
7978	IsHandlerRegistered returns true if the handler is registered .
7979	CompareNitro compares two Nitro objects
7980	DefaultConfig returns the default config
7981	Delete deletes the given bytes .
7982	GetNode returns a node from the store .
7983	SetKeyComparator sets the key comparator .
7984	UseMemoryMmt sets the memplist function for use .
7985	NewWithConfig creates a new instance of Nitro .
7986	MemoryInUse returns the memory in memory .
7987	Close closes the Nitro .
7988	NewWriter creates a new writer .
7989	SnapshotSize returns the size of the snapshot .
7990	Encode implements io . Writer interface .
7991	Decode deserializes the snapshot .
7992	Open opens the snapshot .
7993	CompareSnapshot compares two snapshots .
7994	GC GC GC
7995	GetSnapshots returns a slice of snapshot snapshots .
7996	MemoryInUse returns the number of memory in memory .
7997	CompareBS compares two BarrierSessions .
7998	Acquire acquires a session .
7999	Release releases a session .
8000	FlushSession flushes a session .
8001	Apply updates the stats report .
8002	AddInt64 adds a value to the stats .
8003	AddUint64 adds a value to the stats .
8004	Merge merges two stats .
8005	GetStats returns the stats report
8006	NewIterator returns a new Iterator .
8007	SeekFirst implements Iterator .
8008	SeekWithCmp implements Iterator . SeekWithCmp .
8009	Seek implements Iterator .
8010	Valid returns true if the iterator is valid .
8011	Delete implements Iterator .
8012	Next implements Iterator .
8013	Init initializes the SKU resource
8014	FromURL converts a URL to a string .
8015	ToURL converts a folder to a URL
8016	Size returns the size of the TupleHeader .
8017	WriteTo implements io . WriterTo interface .
8018	Static returns a handler that serves static files .
8019	Read reads the configuration file .
8020	Del removes a key from the config
8021	WriteTo writes the configuration to a file .
8022	checkSection checks if the line is a section
8023	checkLine checks if the line is a valid key and value .
8024	checkComment checks if a line is a comment
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack mocks base method
8027	CloseNotify implements io . CloseNotifier .
8028	DateFormat sets the date format .
8029	Logger implements the http . Handler interface .
8030	GetAvailableInventory returns a map of available SKU items .
8031	Expiration sets the expiration time .
8032	Claimer sets the claimer .
8033	Issuer sets the issuer .
8034	User sets the user s token .
8035	Password sets the password for the token .
8036	Extractor sets the extractor for the request
8037	TokenGenerator creates a new http . Handler for authentication .
8038	Token returns the token for the request .
8039	Claim returns the claims from the request .
8040	String returns the string representation of the token .
8041	NewLexer creates a new Lexer .
8042	run runs the lexer .
8043	Emit a token .
8044	skipWhitespace skips whitespace .
8045	next returns the next rune .
8046	LineNum returns the number of lines .
8047	Offset returns the offset of the line .
8048	errorf implements the Lexer interface .
8049	lexText scans the lexer .
8050	lexComment consumes a comment .
8051	New returns a new TupleType .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the given field exists .
8054	Offset returns the offset for the given field .
8055	Versions returns a slice of Versions .
8056	SetPrivateMeta sets the PrivateMeta field s value .
8057	SetPublicMeta sets the meta data for the task .
8058	GetRedactedVersion returns the redacted version .
8059	Equal returns true if two tasks are equal .
8060	HTTP adds a verb to the http . Handler .
8061	PutUint8 adds a uint8 value to the tuple .
8062	PutInt8 adds an int8 to the tuple .
8063	PutUint16 adds a uint16 value to the TupleBuilder .
8064	PutInt16 adds an int16 to the TupleBuilder .
8065	PutUint32 adds a uint32 value to the TupleBuilder .
8066	PutInt32 adds an int32 to the TupleBuilder .
8067	PutUint64 writes a uint64 value to the buffer .
8068	PutInt64 writes an int64 to the buffer .
8069	NewPackageList returns a new package list .
8070	PutFloat32 adds a float32 to the TupleBuilder .
8071	Classic returns a new ClassicMartini instance
8072	Language sets the languages .
8073	Session sets the session .
8074	Data returns the context of the request .
8075	URL returns the URL for the given context .
8076	Size returns the size of the image
8077	GetRequestIDFromTaskResponse returns the request ID from a task response .
8078	PutString implements the TupleBuilder interface .
8079	LoadDirectory parses a directory .
8080	LoadFile loads a package .
8081	LoadPackage loads a package .
8082	NewDecoder creates a new decoder .
8083	NewDecoderSize creates a new decoder .
8084	Panic panics and prints a panic .
8085	DeployVApp deploy a vcd
8086	UnDeployV removes a vapp .
8087	Auth mocks base method
8088	QueryTemplate returns the vapp template with the given name .
8089	NewEncoder returns a new encoder .
8090	Getter sets the nonceter for a nonce .
8091	Setter sets the Nonce setter
8092	Age sets the Age field s age .
8093	Nonce adds a nonce to the handler .
8094	NonceValueFromRequest returns the NonceStatus from the request .
8095	StoreNonce sets the nonce for the request .
8096	PutFloat32Array writes a float32 array .
8097	PutFloat64Array writes a float64 array to the buffer .
8098	Do mocks base method
8099	NewLease creates a new Lease .
8100	Delete deletes the inventory .
8101	Post creates a new lease
8102	ReStock returns a new SKU .
8103	Procurement returns a task manager .
8104	Initialize from HTTP request
8105	Is returns true if the tuple is a tuple .
8106	Offset returns the offset at the given field .
8107	WriteTo implements io . WriterTo interface .
8108	PutTuple writes a tuple to the buffer .
8109	WriteString writes a string to the client
8110	NotFound sends a 404 error message .
8111	Run starts the agent .
8112	NewWaitGroup returns a new WaitGroup .
8113	Add implements the WaitGroup interface .
8114	Wait implements the WaitGroup interface .
8115	Gzip is a wrapper around gzip . Handler
8116	New creates a new InnkeeperClient
8117	Error sends an error message .
8118	Renders renderer .
8119	NewClient creates a new PDClient
8120	GetTask returns the task with the given ID .
8121	WriteImageToHTTP writes an image to a HTTP response .
