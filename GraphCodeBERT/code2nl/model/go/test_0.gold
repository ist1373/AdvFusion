0	Close implements the Query interface .
1	Exec implements the Query interface .
2	contextDone returns an error if the context was canceled or timed out .
3	NewEngine returns a new engine .
4	NewInstantQuery returns an evaluation query for the given expression at the given time .
5	NewRangeQuery returns an evaluation query for the given time range and with the resolution set by the interval .
6	exec executes the query . At this point per query only one EvalStmt is evaluated . Alert and record statements are not handled by the Engine .
7	cumulativeSubqueryOffset returns the sum of range and offset of all subqueries in the path .
8	extractFuncFromPath walks up the path and searches for the first instance of a function or aggregation .
9	errorf causes a panic with the input formatted into an error .
10	recover is the handler that turns panics into returns from the top level of evaluation .
11	dropMetricName is a cached version of dropMetricName .
12	signatureFunc is a cached version of signatureFunc .
13	evalSubquery evaluates given SubqueryExpr and returns an equivalent evaluated MatrixSelector in its place . Note that the Name and LabelMatchers are not set .
14	vectorSelectorSingle evaluates a instant vector for the iterator of one time series .
15	signatureFunc returns a function that calculates the signature for a metric ignoring the provided labels . If on then the given labels are only used instead .
16	VectorscalarBinop evaluates a binary operation between a Vector and a Scalar .
17	scalarBinop evaluates a binary operation between two Scalars .
18	shouldDropMetricName returns whether the metric name should be dropped in the result of the op operation .
19	NewEndpoints returns a new endpoints discovery .
20	Calculate the trend value at the given index i in raw data d . This is somewhat analogous to the slope of the trend at the given index . The argument s is the set of computed smoothed values . The argument b is the set of computed trend factors . The argument d is the set of raw input values .
21	linearRegression performs a least - square linear regression analysis on the provided SamplePairs . It returns the slope and the intercept value at the provided time .
22	Common code for date related functions .
23	getFunction returns a predefined Function object for the given name .
24	Validate validates the ServiceDiscoveryConfig .
25	Dedupe log lines to next only repeating every repeat duration .
26	Log implements log . Logger .
27	Start blocks until the gate has a free spot or the context is done .
28	New returns a new Discovery which periodically refreshes its targets .
29	ApplyConfig updates the config field of the Handler struct
30	Verifies whether the server is ready or not .
31	New returns a file system that returns constant modification time for all files .
32	UnmarshalJSON unmarshals JSON strings coming from OpenTSDB into Go strings by applying the inverse of what is described for the MarshalJSON method .
33	Write sends a batch of samples to InfluxDB via its HTTP API .
34	mergeSamples merges two lists of sample pairs and removes duplicate timestamps . It assumes that both lists are sorted by timestamp .
35	Describe implements prometheus . Collector .
36	NewDiscovery returns a new Marathon Discovery .
37	newAuthTokenRoundTripper adds the provided auth token to a request .
38	newAuthTokenFileRoundTripper adds the auth token read from the file to a request .
39	isContainerNet checks if the app s first network is set to mode container .
40	fetchApps requests a list of applications from a marathon server .
41	randomAppsURL randomly selects a server from an array and creates an URL pointing to the app list .
42	appsToTargetGroups takes an array of Marathon apps and converts them into target groups .
43	Get a list of ports and a list of labels from a PortMapping .
44	Load parses the YAML input s into a Config .
45	LoadFile parses the given YAML file into a Config .
46	resolveFilepaths joins all relative paths in a configuration with a given base directory .
47	isZero returns true iff the global config is the zero value .
48	CheckTargetAddress checks if target address is valid .
49	NewDiscovery returns a new Discovery for the given config .
50	shouldWatch returns whether the service of the given name should be watched .
51	shouldWatch returns whether the service of the given name should be watched based on its name .
52	Get the local datacenter if not specified .
53	Initialize the Discoverer run .
54	Watch the catalog for new services we would like to watch . This is called only when we don t know yet the names of the services and need to ask Consul the entire list of services .
55	Start watching a service .
56	NewPod creates a new pod discovery .
57	NewMatcher returns a matcher object .
58	Matches returns whether the matcher matches the given string value .
59	Return a string representation of a QueryTiming span operation .
60	NewQueryStats makes a QueryStats struct with all QueryTimings found in the given TimerGroup .
61	NewDiscovery returns a new OpenStack Discoverer which periodically refreshes its targets .
62	UnmarshalYAML implements yaml . Unmarshaler .
63	Hash returns a hash value for the label set .
64	HashForLabels returns a hash value for the labels matching the provided names .
65	Copy returns a copy of the labels .
66	Get returns the value for the label with the given name . Returns an empty string if the label doesn t exist .
67	Has returns true if the label with the given name is present .
68	Equal returns whether the two label sets are equal .
69	Map returns a string map of the labels .
70	New returns a sorted Labels from the given labels . The caller has to guarantee that all label names are unique .
71	FromStrings creates new labels from pairs of strings .
72	NewBuilder returns a new LabelsBuilder
73	Del deletes the label of the given name .
74	Labels returns the labels from the builder . If no modifications were made the original labels are returned .
75	NewStorage returns a remote . Storage .
76	ApplyConfig updates the state as the new config requires .
77	Querier returns a storage . MergeQuerier combining the remote client queriers of each configured remote read endpoint .
78	Close the background processing of the storage queues .
79	RateLimit write to a logger .
80	newHypervisorDiscovery returns a new hypervisor discovery .
81	New returns a new API object .
82	RegisterGRPC registers all API services with the given server .
83	HTTPHandler returns an HTTP handler for a REST API gateway to the given grpc address .
84	extractTimeRange returns minimum and maximum timestamp in milliseconds as provided by the time range . It defaults either boundary to the minimum and maximum possible value .
85	Writes HTTP response content data .
86	Closes the compressedResponseWriter and ensures to flush all data before .
87	Constructs a new compressedResponseWriter based on client request headers .
88	AlertTemplateData returns the interface to be used in expanding the template .
89	Funcs adds the functions in fm to the Expander s function map . Existing functions will be overwritten in case of conflict .
90	ExpandHTML expands a template with HTML escaping with templates read from the given files .
91	NewTarget creates a reasonably configured target for querying .
92	Metadata returns type and help metadata for the given metric .
93	hash returns an identifying hash for the target .
94	offset returns the time until the next scrape cycle for the target . It includes the global server jitterSeed for scrapes from multiple Prometheus to try to be at different times .
95	Labels returns a copy of the set of all public labels of the target .
96	DiscoveredLabels returns a copy of the target s labels before any processing .
97	SetDiscoveredLabels sets new DiscoveredLabels
98	URL returns a copy of the target s URL .
99	LastError returns the error encountered during the last scrape .
100	LastScrape returns the time of the last scrape .
101	LastScrapeDuration returns how long the last scrape of the target took .
102	Health returns the last known health state of the target .
103	targetsFromGroup builds targets based on the given TargetGroup and config .
104	FromTime returns a new millisecond timestamp from a time .
105	Time returns a new time . Time object from a millisecond timestamp .
106	Enables cross - site script calls .
107	Store sends a batch of samples to the HTTP endpoint the request is the proto marshalled and encoded bytes from codec . go .
108	Name identifies the client .
109	Read reads from a remote endpoint .
110	NewDiscovery returns a new AzureDiscovery which periodically refreshes its targets .
111	createAzureClient is a helper function for creating an Azure compute client to ARM .
112	Create a new azureResource object from an ID string .
113	Return a string representation of the Timer .
114	Swap implements sort . Interface .
115	Return a string representation of a TimerGroup .
116	RegisterAdminHandler registers the http handlers for service Admin to mux . The handlers forward requests to the grpc endpoint over conn .
117	ParseExpr returns the expression parsed from the input .
118	ParseMetric parses the input into a metric
119	ParseMetricSelector parses the provided textual metric selector into a list of label matchers .
120	newParser returns a new parser .
121	parseExpr parses a single expression from the input .
122	parseSeriesDesc parses the description of a time series .
123	typecheck checks correct typing of the parsed statements or expression .
124	next returns the next token .
125	peek returns but does not consume the next token .
126	errorf formats the error and terminates processing .
127	error terminates processing .
128	expect consumes the next token and guarantees it has the required type .
129	expectOneOf consumes the next token and guarantees it has one of the required types .
130	recover is the handler that turns panics into returns from the top level of Parse .
131	expr parses any expression .
132	number parses a number .
133	expectType checks the type of the node and raises an error if it is not of the expected type .
134	Appender implements scrape . Appendable .
135	Add implements storage . Appender .
136	AddFast implements storage . Appender .
137	Commit implements storage . Appender .
138	Add appends a new Problem to the slice for the specified metric with the specified issue text .
139	Lint performs a linting pass returning a slice of Problems indicating any issues found in the metrics stream . The slice is sorted by metric name and issue description .
140	lint is the entry point for linting a single metric .
141	lintHelp detects issues related to the help text for a metric .
142	lintMetricUnits detects issues with metric unit names .
143	lintCounter detects issues specific to counters as well as patterns that should only be used with counters .
144	Write sends a batch of samples to Graphite .
145	New returns a new Pool with size buckets for minSize to maxSize increasing by the given factor .
146	Get returns a new byte slices that fits the given size .
147	Put adds a slice to the right bucket in the pool .
148	TotalSamples returns the total number of samples in the series within a matrix .
149	Vector returns a Vector if the result value is one . An error is returned if the result was an error or the result value is not a Vector .
150	Scalar returns a Scalar value . An error is returned if the result was an error or the result value is not a Scalar .
151	NewDiscovery returns a new EC2Discovery which periodically refreshes its targets .
152	NewQueueManager builds a new QueueManager .
153	Append queues a sample to be sent to the remote storage . Blocks until all samples are enqueued on their shards or a shutdown signal is received .
154	Start the queue manager sending samples to the remote storage . Does not block .
155	Stop stops sending samples to the remote storage and waits for pending sends to complete .
156	StoreSeries keeps track of which series we know about for lookups when sending samples to remote .
157	processExternalLabels merges externalLabels into ls . If ls contains a label in externalLabels the value in ls wins .
158	start the shards ; must be called before any call to enqueue .
159	stop the shards ; subsequent call to enqueue will return false .
160	enqueue a sample . If we are currently in the process of shutting down or resharding will return false ; in this case you should back off and retry .
161	sendSamples to the remote storage with backoff for recoverable errors .
162	New creates a new Kubernetes discovery for the given role .
163	compileCORSRegexString compiles given string and adds anchors
164	computeExternalURL computes a sanitized external URL from a raw input . It infers unset URL parts from the OS and the given listen address .
165	sendAlerts implements the rules . NotifyFunc for a Notifier .
166	Validate validates all rules in the rule groups .
167	Validate the rule and return a list of encountered errors .
168	Parse parses and validates a set of rules .
169	ParseFile reads and parses rules from a file .
170	TableLinkForExpression creates an escaped relative link to the table view of the provided expression .
171	GraphLinkForExpression creates an escaped relative link to the graph view of the provided expression .
172	NewFanout returns a new fan - out Storage which proxies reads and writes through to multiple underlying storages .
173	Close closes the storage and all its underlying resources .
174	NewMergeQuerier returns a new Querier that merges results of input queriers . NB NewMergeQuerier will return NoopQuerier if no queriers are passed to it and will filter NoopQueriers from its arguments in order to reduce overhead when only one querier is passed .
175	Select returns a set of series that matches the given label matchers .
176	LabelValues returns all potential values for a label name .
177	LabelNames returns all the unique label names present in the block in sorted order .
178	Close releases the resources of the Querier .
179	NewAlertingRule constructs a new AlertingRule .
180	SetLastError sets the current error seen by the alerting rule .
181	LastError returns the last error seen by the alerting rule .
182	SetHealth sets the current health of the alerting rule .
183	Health returns the current health of the alerting rule .
184	forStateSample returns the sample for ALERTS_FOR_STATE .
185	SetEvaluationDuration updates evaluationDuration to the duration it took to evaluate the rule on its last evaluation .
186	GetEvaluationDuration returns the time in seconds it took to evaluate the alerting rule .
187	State returns the maximum state of alert instances for this rule . StateFiring > StatePending > StateInactive
188	ActiveAlerts returns a slice of active alerts .
189	currentAlerts returns all instances of alerts for this rule . This may include inactive alerts that were previously firing .
190	Parses incoming target groups updates . If the update contains changes to the target groups Adapter already knows about or new target groups we Marshal to JSON and write to file .
191	Writes JSON formatted targets to output file .
192	Run starts a Discovery Manager and the custom service discovery implementation .
193	NewAdapter creates a new instance of Adapter .
194	NewGroupMetrics makes a new Metrics and registers them with then provided registerer if not nil .
195	EngineQueryFunc returns a new query function that executes instant queries against the given engine . It converts scalar into vector results .
196	NewGroup makes a new Group with the given name options and rules .
197	GetEvaluationDuration returns the time in seconds it took to evaluate the rule group .
198	setEvaluationDuration sets the time in seconds the last evaluation took .
199	GetEvaluationTimestamp returns the time the last evaluation of the rule group took place .
200	setEvaluationTimestamp updates evaluationTimestamp to the timestamp of when the rule group was last evaluated .
201	evalTimestamp returns the immediately preceding consistently slotted evaluation time .
202	CopyState copies the alerting rule and staleness related state from the given group . Rules are matched based on their name and labels . If there are duplicates the first is matched with the first second with the second etc .
203	NewManager returns an implementation of Manager ready to be started by calling the Run method .
204	Stop the rule manager s rule evaluation cycles .
205	Update the rule manager s state as the config requires . If loading the new rules failed the old rule set is restored .
206	LoadGroups reads groups from a list of files .
207	RuleGroups returns the list of manager s rule groups .
208	Rules returns the list of the manager s rules .
209	AlertingRules returns the list of the manager s alerting rules .
210	Collect implements prometheus . Collector .
211	NewWALWatcher creates a new WAL watcher for a given WriteTo .
212	Start the WALWatcher .
213	Stop the WALWatcher .
214	findSegmentForIndex finds the first segment greater than or equal to index .
215	Use tail true to indicate that the reader is currently on a segment that is actively being written to . If false assume it s a full segment and we re replaying it on start to cache the series records .
216	Read all the series records from a Checkpoint directory .
217	Get size of segment .
218	Printf implements zk . Logger .
219	NewZookeeperTreeCache creates a new ZookeeperTreeCache for a given path .
220	NewManager is the Discovery Manager constructor .
221	Name sets the name of the manager .
222	Run starts the background processing
223	ApplyConfig removes all running discovery providers and starts new ones using the provided config .
224	StartCustomProvider is used for sdtool . Only use this if you know what you re doing .
225	Run implements the Worker interface .
226	NewNerveDiscovery returns a new Discovery for the given Nerve config .
227	NewServersetDiscovery returns a new Discovery for the given serverset config .
228	NewDiscovery returns a new discovery along Zookeeper parses with the given parse function .
229	Fuzz the metric selector parser .
230	Fuzz the expression parser .
231	Fuzz the parser .
232	NewManager is the Manager constructor
233	Run receives and saves target set updates and triggers the scraping loops reloading . Reloading happens in the background so that it doesn t block receiving targets updates .
234	setJitterSeed calculates a global jitterSeed per server relying on extra label set .
235	Stop cancels all running scrape pools and blocks until all have exited .
236	ApplyConfig resets the manager s target providers and job configurations as defined by the new cfg .
237	TargetsAll returns active and dropped targets grouped by job_name .
238	TargetsActive returns the active targets currently being scraped .
239	TargetsDropped returns the dropped targets during relabelling .
240	getFqdn returns a FQDN if it s possible otherwise falls back to hostname .
241	tagsFromMetric translates Prometheus metric into OpenTSDB tags .
242	Write sends a batch of samples to OpenTSDB via its HTTP API .
243	QueryableClient returns a storage . Queryable which queries the given Client to select series sets .
244	Select implements storage . Querier and uses the given matchers to read series sets from the Client .
245	ExternalLabelsHandler returns a storage . Queryable which creates a externalLabelsQuerier .
246	Select adds equality matchers for all external labels to the list of matchers before calling the wrapped storage . Queryable . The added external labels are removed from the returned series sets .
247	PreferLocalStorageFilter returns a QueryableFunc which creates a NoopQuerier if requested timeframe can be answered completely by the local TSDB and reduces maxt if the timeframe can be partially answered by TSDB .
248	RequiredMatchersFilter returns a storage . Queryable which creates a requiredMatchersQuerier .
249	Select returns a NoopSeriesSet if the given matchers don t match the label set of the requiredMatchersQuerier . Otherwise it ll call the wrapped querier .
250	addExternalLabels adds matchers for each external label . External labels that already have a corresponding user - supplied matcher are skipped as we assume that the user explicitly wants to select a different value for them . We return the new set of matchers along with a map of labels for which matchers were added so that these can later be removed from the result time series again .
251	NewInstanceDiscovery returns a new instance discovery .
252	ResolvedAt returns true iff the activity interval ended before the given timestamp .
253	NewManager is the manager constructor .
254	ApplyConfig updates the status state as the new config requires .
255	Run dispatches notifications continuously .
256	Send queues the given notification requests for processing . Panics if called on a handler that is not running .
257	Alertmanagers returns a slice of Alertmanager URLs .
258	DroppedAlertmanagers returns a slice of Alertmanager URLs .
259	sendAll sends the alerts to all configured Alertmanagers concurrently . It returns true if the alerts could be sent successfully to at least one Alertmanager .
260	Stop shuts down the notification handler .
261	sync extracts a deduplicated set of Alertmanager endpoints from a list of target groups definitions .
262	alertmanagersFromGroup extracts a list of alertmanagers from a target group and an associated AlertmanagerConfig .
263	String returns a descriptive string for the item .
264	isAggregator returns true if the item is an aggregator that takes a parameter . Returns false otherwise
265	isCompairsonOperator returns true if the item corresponds to a comparison operator . Returns false otherwise .
266	isSetOperator returns whether the item corresponds to a set operator .
267	Precedence returns the operator precedence of the binary operator op . If op is not a binary operator the result is LowestPrec .
268	next returns the next rune in the input .
269	peek returns but does not consume the next rune in the input .
270	emit passes an item back to the client .
271	linePosition reports at which character in the current line we are on .
272	nextItem returns the next item from the input .
273	lex creates a new scanner for the input string .
274	lexInsideBraces scans the inside of a vector selector . Keywords are ignored and scanned as identifiers .
275	lexValueSequence scans a value sequence of a series description .
276	digitVal returns the digit value of a rune or 16 in case the rune does not represent a valid digit .
277	lexString scans a quoted string . The initial quote has already been seen .
278	lexSpace scans a run of space characters . One space has already been seen .
279	lexLineComment scans a line comment . Left comment marker is known to be present .
280	lexNumberOrDuration scans a number or a duration item .
281	scanNumber scans numbers of different formats . The scanned item is not necessarily a valid number . This case is caught by the parser .
282	lexIdentifier scans an alphanumeric identifier . The next character is known to be a letter .
283	lexKeywordOrIdentifier scans an alphanumeric identifier which may contain a colon rune . If the identifier is a keyword the respective keyword item is scanned .
284	isLabel reports whether the string can be used as label .
285	Series returns the bytes of the series the timestamp if set and the value of the current sample .
286	Type returns the metric name and type in the current entry . Must only be called after Next returned a type entry . The returned byte slices become invalid after the next call to Next .
287	nextToken returns the next token from the promlexer . It skips over tabs and spaces .
288	NewAPI returns an initialized API type .
289	mergeLabels merges two sets of sorted proto labels preferring those in primary to those in secondary when there is an overlap .
290	Set the storage .
291	Get the storage .
292	Querier implements the Storage interface .
293	Appender implements the Storage interface .
294	Close implements the Storage interface .
295	Adapter return an adapter as storage . Storage .
296	Open returns a new storage backed by a TSDB database that is configured for Prometheus .
297	Appender returns a new appender against the storage .
298	NewRegexp creates a new anchored Regexp and returns an error if the passed - in regular expression does not compile .
299	MustNewRegexp works like NewRegexp but panics if the regular expression does not compile .
300	Process returns a relabeled copy of the given label set . The relabel configurations are applied in order of input . If a label set is dropped nil is returned . May return the input labelSet modified .
301	sum64 sums the md5 hash to an uint64 .
302	stop terminates all scrape loops and returns after they all terminated .
303	reload the scrape pool with the given scrape configuration . The target state is preserved but all scrape loops are restarted with the new scrape configuration . This method returns after all scrape loops that were stopped have stopped scraping .
304	Sync converts target groups into actual scrape targets and synchronizes the currently running scraper with the resulting set and returns all scraped and dropped targets .
305	sync takes a list of potentially duplicated targets deduplicates them starts scrape loops for new targets and stops scrape loops for disappeared targets . It returns after all stopped scrape loops terminated .
306	appender returns an appender for ingested samples from the target .
307	Uname returns the uname of the host machine .
308	DecodeReadRequest reads a remote . Request from a http . Request .
309	EncodeReadResponse writes a remote . Response to a http . ResponseWriter .
310	ToQuery builds a Query proto .
311	FromQuery unpacks a Query proto .
312	ToQueryResult builds a QueryResult proto .
313	FromQueryResult unpacks a QueryResult proto .
314	Seek implements storage . SeriesIterator .
315	At implements storage . SeriesIterator .
316	Next implements storage . SeriesIterator .
317	NewBufferIterator returns a new iterator that buffers the values within the time range of the current element and the duration of delta before .
318	Reset re - uses the buffer with a new iterator resetting the buffered time delta to its original value .
319	ReduceDelta lowers the buffered time delta for the current SeriesIterator only .
320	PeekBack returns the nth previous element of the iterator . If there is none buffered ok is false .
321	Seek advances the iterator to the element at time t or greater .
322	Next advances the iterator to the next element .
323	Returns the current iterator . Invalidates previously returned iterators .
324	reduceDelta lowers the buffered time delta dropping any samples that are out of the new delta range .
325	nthLast returns the nth most recent element added to the ring .
326	next advances the openMetricsLexer to the next character .
327	Unit returns the metric name and unit in the current entry . Must only be called after Next returned a unit entry . The returned byte slices become invalid after the next call to Next .
328	Metric writes the labels of the current sample into the passed labels . It returns the string from which the metric was parsed .
329	coalesceBuckets merges buckets with the same upper bound . The input buckets must be sorted .
330	Collect creates constant metrics for each file with last modified time of the file .
331	NewTimestampCollector creates a TimestampCollector .
332	NewDiscovery returns a new file discovery for the given paths .
333	listFiles returns a list of all files that match the configured patterns .
334	watchFiles sets watches on all full paths or directories that were configured for this file discovery .
335	stop shuts down the file watcher .
336	refresh reads all files matching the discovery s patterns and sends the respective updated target groups through the channel .
337	readFile reads a JSON or YAML list of targets groups from the file depending on its file extension . It returns full configuration target groups .
338	fileSource returns a source ID for the i - th target group in the file .
339	NewRecordingRule returns a new recording rule .
340	Eval evaluates the rule and then overrides the metric names and labels accordingly .
341	SetEvaluationDuration updates evaluationDuration to the time in seconds it took to evaluate the rule on its last evaluation .
342	SetLastError sets the current error seen by the recording rule .
343	LastError returns the last error seen by the recording rule .
344	SetHealth sets the current health of the recording rule .
345	Health returns the current health of the recording rule .
346	GetEvaluationDuration returns the time in seconds it took to evaluate the recording rule .
347	HTMLSnippet returns an HTML snippet representing this rule .
348	rate returns the per - second rate .
349	tick assumes to be called every r . interval .
350	inc counts one event .
351	NewNode returns a new node discovery .
352	CheckConfig validates configuration files .
353	CheckRules validates rule files .
354	CheckMetrics performs a linting pass on input metrics .
355	QueryInstant performs an instant query against a Prometheus server .
356	QueryRange performs a range query against a Prometheus server .
357	QuerySeries queries for a series against a Prometheus server .
358	QueryLabels queries for label values against a Prometheus server .
359	UnmarshalJSON implements the json . Unmarshaler interface .
360	NewStreamReader returns a reader which replays all the data generated by sw . The returned reader may be passed to Response . SetBodyStream . Close must be called on the returned reader after all the required data has been read . Otherwise goroutine leak may occur . See also Response . SetBodyStreamWriter .
361	StatusMessage returns HTTP status message for the given status code .
362	CopyTo copies all args to dst .
363	Parse parses the given string containing query args .
364	ParseBytes parses the given b containing query args .
365	QueryString returns query string for the args . The returned value is valid until the next call to Args methods .
366	AppendBytes appends query string to dst and returns the extended dst .
367	WriteTo writes query string to w . WriteTo implements io . WriterTo interface .
368	Del deletes argument with the given key from query args .
369	DelBytes deletes argument with the given key from query args .
370	Add adds key = value argument . Multiple values for the same key may be added .
371	AddBytesK adds key = value argument . Multiple values for the same key may be added .
372	AddBytesKV adds key = value argument . Multiple values for the same key may be added .
373	AddNoValue adds only key as argument without the = . Multiple values for the same key may be added .
374	AddBytesKNoValue adds only key as argument without the = . Multiple values for the same key may be added .
375	Set sets key = value argument .
376	SetBytesV sets key = value argument .
377	SetBytesKV sets key = value argument .
378	SetNoValue sets only key as argument without the = . Only key in argumemt like key1&key2
379	SetBytesKNoValue sets key argument .
380	Peek returns query arg value for the given key . Returned value is valid until the next Args call .
381	PeekBytes returns query arg value for the given key . Returned value is valid until the next Args call .
382	PeekMulti returns all the arg values for the given key .
383	PeekMultiBytes returns all the arg values for the given key .
384	Has returns true if the given key exists in Args .
385	HasBytes returns true if the given key exists in Args .
386	GetUint returns uint value for the given key .
387	SetUint sets uint value for the given key .
388	SetUintBytes sets uint value for the given key .
389	GetUfloat returns ufloat value for the given key .
390	GetBool returns boolean value for the given key . true is returned for 1 t T true TRUE True y yes Y YES Yes otherwise false is returned .
391	decodeArgAppendNoPlus is almost identical to decodeArgAppend but it doesn t substitute + with . The function is copy - pasted from decodeArgAppend due to the performance reasons only .
392	AppendHTMLEscape appends html - escaped s to dst and returns the extended dst .
393	AppendIPv4 appends string representation of the given ip v4 to dst and returns the extended dst .
394	ParseIPv4 parses ip address from ipStr into dst and returns the extended dst .
395	ParseUint parses uint from buf .
396	ParseUfloat parses unsigned float from buf .
397	AppendQuotedArg appends url - encoded src to dst and returns appended dst .
398	CopyTo copies uri contents to dst .
399	SetHash sets URI hash .
400	SetHashBytes sets URI hash .
401	SetQueryString sets URI query string .
402	SetQueryStringBytes sets URI query string .
403	SetPath sets URI path .
404	SetPathBytes sets URI path .
405	SetScheme sets URI scheme i . e . http https ftp etc .
406	SetSchemeBytes sets URI scheme i . e . http https ftp etc .
407	Reset clears uri .
408	SetHost sets host for the uri .
409	SetHostBytes sets host for the uri .
410	RequestURI returns RequestURI - i . e . URI without Scheme and Host .
411	AppendBytes appends full uri to dst and returns the extended dst .
412	WriteTo writes full uri to w . WriteTo implements io . WriterTo interface .
413	NewWriter creates a stackless writer around a writer returned from newWriter . The returned writer writes data to dstW . Writers that use a lot of stack space may be wrapped into stackless writer thus saving stack space for high number of concurrently running goroutines .
414	NewPipeConns returns new bi - directional connection pipe .
415	Close closes pipe connections .
416	LastUseTime returns time the client was last used
417	AcquireRequest returns an empty Request instance from request pool . The returned Request instance may be passed to ReleaseRequest when it is no longer needed . This allows Request recycling reduces GC pressure and usually improves performance .
418	AcquireResponse returns an empty Response instance from response pool . The returned Response instance may be passed to ReleaseResponse when it is no longer needed . This allows Response recycling reduces GC pressure and usually improves performance .
419	DoDeadline calls DoDeadline on the least loaded client
420	DoTimeout calculates deadline and calls DoDeadline on the least loaded client
421	Do calls calculates deadline using LBClient . Timeout and calls DoDeadline on the least loaded client .
422	Serve serves incoming connections from the given listener using the given handler . Serve blocks until the given listener returns permanent error .
423	ServeTLS serves HTTPS requests from the given net . Listener using the given handler . certFile and keyFile are paths to TLS certificate and key files .
424	ServeTLSEmbed serves HTTPS requests from the given net . Listener using the given handler . certData and keyData must contain valid TLS certificate and key data .
425	ListenAndServe serves HTTP requests from the given TCP addr using the given handler .
426	ListenAndServeUNIX serves HTTP requests from the given UNIX addr using the given handler . The function deletes existing file at addr before starting serving . The server sets the given file mode for the UNIX addr .
427	ListenAndServeTLS serves HTTPS requests from the given TCP addr using the given handler . certFile and keyFile are paths to TLS certificate and key files .
428	ListenAndServeTLSEmbed serves HTTPS requests from the given TCP addr using the given handler . certData and keyData must contain valid TLS certificate and key data .
429	TimeoutHandler creates RequestHandler which returns StatusRequestTimeout error with the given msg to the client if h didn t return during the given duration . The returned handler may return StatusTooManyRequests error with the given msg to the client if there are more than Server . Concurrency concurrent handlers h are running at the moment .
430	TLSConnectionState returns TLS connection state . The function returns nil if the underlying connection isn t tls . Conn . The returned state may be used for verifying TLS version client certificates etc .
431	String returns unique string representation of the ctx . The returned value may be useful for logging .
432	SetContentType sets response Content - Type .
433	SetContentTypeBytes sets response Content - Type . It is safe modifying contentType buffer after function return .
434	FormFile returns uploaded file associated with the given multipart form key . The file is automatically deleted after returning from RequestHandler so either move or copy uploaded file into new place if you want retaining it . Use SaveMultipartFile function for permanently saving uploaded file . The returned file header is valid until returning from RequestHandler .
435	SaveMultipartFile saves multipart file fh under the given filename path .
436	RemoteAddr returns client address for the given request . Always returns non - nil result .
437	Error sets response status code to the given value and sets response body to the given message .
438	Success sets response Content - Type and body to the given values .
439	SuccessString sets response Content - Type and body to the given values .
440	IfModifiedSince returns true if lastModified exceeds If - Modified - Since value from the request header . The function returns true also If - Modified - Since request header is missing .
441	NotFound resets response and sets 404 Not Found response status code .
442	Write writes p into response body .
443	WriteString appends s to response body .
444	Logger returns logger which may be used for logging arbitrary request - specific messages inside RequestHandler . Each message logged via returned logger contains request - specific information such as request id request duration local address remote address request method and request url . It is safe re - using returned logger for logging multiple messages for the current request . The returned logger is valid until returning from RequestHandler .
445	NextProto adds nph to be processed when key is negotiated when TLS connection is established . This function can only be called before the server is started .
446	ListenAndServe serves HTTP requests from the given TCP4 addr . Pass custom listener to Serve if you need listening on non - TCP4 media such as IPv6 . Accepted connections are configured to enable TCP keep - alives .
447	ListenAndServeUNIX serves HTTP requests from the given UNIX addr . The function deletes existing file at addr before starting serving . The server sets the given file mode for the UNIX addr .
448	ListenAndServeTLS serves HTTPS requests from the given TCP4 addr . certFile and keyFile are paths to TLS certificate and key files . Pass custom listener to Serve if you need listening on non - TCP4 media such as IPv6 . If the certFile or keyFile has not been provided to the server structure the function will use the previously added TLS configuration . Accepted connections are configured to enable TCP keep - alives .
449	ListenAndServeTLSEmbed serves HTTPS requests from the given TCP4 addr . certData and keyData must contain valid TLS certificate and key data . Pass custom listener to Serve if you need listening on arbitrary media such as IPv6 . If the certFile or keyFile has not been provided the server structure the function will use previously added TLS configuration . Accepted connections are configured to enable TCP keep - alives .
450	ServeTLS serves HTTPS requests from the given listener . certFile and keyFile are paths to TLS certificate and key files . If the certFile or keyFile has not been provided the server structure the function will use previously added TLS configuration .
451	ServeTLSEmbed serves HTTPS requests from the given listener . certData and keyData must contain valid TLS certificate and key data . If the certFile or keyFile has not been provided the server structure the function will use previously added TLS configuration .
452	AppendCertEmbed does the same as AppendCert but using in - memory data .
453	Serve serves incoming connections from the given listener . Serve blocks until the given listener returns permanent error .
454	Shutdown gracefully shuts down the server without interrupting any active connections . Shutdown works by first closing all open listeners and then waiting indefinitely for all connections to return to idle and then shut down . When Shutdown is called Serve ListenAndServe and ListenAndServeTLS immediately return nil . Make sure the program doesn t exit and waits instead for Shutdown to return . Shutdown does not close keepalive connections so its recommended to set ReadTimeout to something else than 0 .
455	WriteGzip writes gzipped p to w and returns the number of compressed bytes written to w .
456	WriteGunzip writes ungzipped p to w and returns the number of uncompressed bytes written to w .
457	AppendGunzipBytes appends gunzipped src to dst and returns the resulting dst .
458	WriteDeflate writes deflated p to w and returns the number of compressed bytes written to w .
459	WriteInflate writes inflated p to w and returns the number of uncompressed bytes written to w .
460	AppendInflateBytes appends inflated src to dst and returns the resulting dst .
461	SetRequestURI sets RequestURI .
462	SetRequestURIBytes sets RequestURI .
463	RequestURI returns request s URI .
464	SendFile registers file on the given path to be used as response body when Write is called . Note that SendFile doesn t set Content - Type so set it yourself with Header . SetContentType .
465	BodyWriter returns writer for populating response body . If used inside RequestHandler the returned writer must not be used after returning from RequestHandler . Use RequestCtx . Write or SetBodyStreamWriter in this case .
466	BodyWriter returns writer for populating request body .
467	Body returns response body . The returned body is valid until the response modification .
468	BodyWriteTo writes request body to w .
469	BodyWriteTo writes response body to w .
470	AppendBodyString appends s to response body .
471	SetBodyString sets response body .
472	ResetBody resets response body .
473	SetBodyRaw sets response body but without copying it . From this point onward the body argument must not be changed .
474	ReleaseBody retires the response body if it is greater than size bytes . This permits GC to reclaim the large buffer . If used must be before ReleaseResponse . Use this method only if you really understand how it works . The majority of workloads don t need this method .
475	ReleaseBody retires the request body if it is greater than size bytes . This permits GC to reclaim the large buffer . If used must be before ReleaseRequest . Use this method only if you really understand how it works . The majority of workloads don t need this method .
476	SwapBody swaps response body with the given body and returns the previous response body . It is forbidden to use the body passed to SwapBody after the function returns .
477	SwapBody swaps request body with the given body and returns the previous request body . It is forbidden to use the body passed to SwapBody after the function returns .
478	Body returns request body . The returned body is valid until the request modification .
479	AppendBodyString appends s to request body .
480	SetBodyString sets request body .
481	ResetBody resets request body .
482	CopyTo copies req contents to dst except of body stream .
483	CopyTo copies resp contents to dst except of body stream .
484	WriteMultipartForm writes the given multipart form f with the given boundary to w .
485	Reset clears response contents .
486	ReadLimitBody reads response from the given r limiting the body size . If maxBodySize > 0 and the body size exceeds maxBodySize then ErrBodyTooLarge is returned . io . EOF is returned if r is closed before reading the first header byte .
487	WriteTo writes request to w . It implements io . WriterTo .
488	WriteTo writes response to w . It implements io . WriterTo .
489	Write writes request to w . Write doesn t flush request to w for performance reasons . See also WriteTo .
490	Write writes response to w . Write doesn t flush response to w for performance reasons . See also WriteTo .
491	SetLastModified sets Last - Modified header to the given value .
492	PeekCookie is able to returns cookie by a given key from response .
493	ContentType returns Content - Type header value .
494	SetServer sets Server header value .
495	SetServerBytes sets Server header value .
496	Host returns Host header value .
497	SetHost sets Host header value .
498	SetHostBytes sets Host header value .
499	SetUserAgent sets User - Agent header value .
500	SetUserAgentBytes sets User - Agent header value .
501	Method returns HTTP request method .
502	SetMethod sets HTTP request method .
503	SetMethodBytes sets HTTP request method .
504	RequestURI returns RequestURI from the first HTTP request line .
505	SetRequestURI sets RequestURI for the first HTTP request line . RequestURI must be properly encoded . Use URI . RequestURI for constructing proper RequestURI if unsure .
506	SetRequestURIBytes sets RequestURI for the first HTTP request line . RequestURI must be properly encoded . Use URI . RequestURI for constructing proper RequestURI if unsure .
507	HasAcceptEncoding returns true if the header contains the given Accept - Encoding value .
508	HasAcceptEncodingBytes returns true if the header contains the given Accept - Encoding value .
509	Len returns the number of headers set i . e . the number of times f is called in VisitAll .
510	Reset clears response header .
511	SetCookie sets the given response cookie . It is save re - using the cookie after the function returns .
512	DelClientCookie instructs the client to remove the given cookie . Use DelCookie if you want just removing the cookie from response header .
513	DelCookie removes cookie under the given key from response header . Note that DelCookie doesn t remove the cookie from the client . Use DelClientCookie instead .
514	DelCookie removes cookie under the given key .
515	DelAllCookies removes all the cookies from request headers .
516	Peek returns header value for the given key . Returned value is valid until the next call to ResponseHeader . Do not store references to returned value . Make copies instead .
517	PeekBytes returns header value for the given key . Returned value is valid until the next call to ResponseHeader . Do not store references to returned value . Make copies instead .
518	Cookie returns cookie for the given key .
519	CookieBytes returns cookie for the given key .
520	Cookie fills cookie for the given cookie . Key . Returns false if cookie with the given cookie . Key is missing .
521	Read reads request header from r . io . EOF is returned if r is closed before reading the first header byte .
522	Header returns response header representation . The returned value is valid until the next call to ResponseHeader methods .
523	AppendBytes appends response header representation to dst and returns the extended dst .
524	Write writes request header to w .
525	WriteTo writes request header to w . WriteTo implements io . WriterTo interface .
526	Header returns request header representation . The returned representation is valid until the next call to RequestHeader methods .
527	AppendBytes appends request header representation to dst and returns the extended dst .
528	ServeFileUncompressed returns HTTP response containing file contents from the given path . Directory contents is returned if path points to directory . ServeFile may be used for saving network traffic when serving files with good compression ratio . See also RequestCtx . SendFile .
529	NewRequestHandler returns new request handler with the given FS settings . The returned handler caches requested file handles for FS . CacheDuration . Make sure your program has enough max open files limit aka ulimit - n if FS . Root folder contains many files . Do not create multiple request handlers from a single FS instance - just reuse a single request handler .
530	FileLastModified returns last modified time for the file .
531	CopyTo copies src cookie to c .
532	SetPath sets cookie path .
533	SetPathBytes sets cookie path .
534	SetDomain sets cookie domain .
535	SetDomainBytes sets cookie domain .
536	Expire returns cookie expiration time . CookieExpireUnlimited is returned if cookie doesn t expire
537	SetValue sets cookie value .
538	SetValueBytes sets cookie value .
539	SetKey sets cookie name .
540	SetKeyBytes sets cookie name .
541	Reset clears the cookie .
542	AppendBytes appends cookie representation to dst and returns the extended dst .
543	Cookie returns cookie representation . The returned value is valid until the next call to Cookie methods .
544	WriteTo writes cookie representation to w . WriteTo implements io . WriterTo interface .
545	Parse parses Set - Cookie header .
546	ParseBytes parses Set - Cookie header .
547	For Response we can not use the above function as response cookies already contain the key = in the value .
548	AcquireTimer returns a time . Timer from the pool and updates it to send the current time on its channel after at least timeout . The returned Timer may be returned to the pool with ReleaseTimer when no longer needed . This allows reducing GC load .
549	Accept implements net . Listener s Accept . It is safe calling Accept from concurrently running goroutines . Accept returns new connection per each Dial call .
550	Close implements net . Listener s Close .
551	FileServer conveniently sets up a http . FileServer handler to serve static files from a http . FileSystem .
552	Reset a routing context to its initial state .
553	URLParam returns the corresponding URL parameter value from the request routing context .
554	URLParam returns the url parameter from a http . Request object .
555	URLParamFromCtx returns the url parameter from a http . Request Context .
556	Add will append a URL parameter to the end of the route param
557	ServerBaseContext wraps an http . Handler to set the request context to the baseCtx .
558	GetHead automatically route undefined HEAD requests to GET handlers .
559	Ping returns pong
560	StripSlashes is a middleware that will match request paths with a trailing slash strip it from the path and continue routing through the mux if a route matches then it will serve the handler .
561	AllowContentType enforces a whitelist of request Content - Types otherwise responds with a 415 Unsupported Media Type status .
562	GetReqID returns a request ID from the given context if one is present . Returns the empty string if a request ID cannot be found .
563	HandlerFunc builds and returns a http . Handler from the chain of middlewares with h http . Handler as the final handler .
564	chain builds a http . Handler composed of an inline middleware stack and endpoint handler in the order they are passed .
565	NewMux returns a newly initialized Mux object that implements the Router interface .
566	ServeHTTP is the single method of the http . Handler interface that makes Mux interoperable with the standard library . It uses a sync . Pool to get and reuse routing contexts for each request .
567	Use appends a middleware handler to the Mux middleware stack . The middleware stack for any Mux will execute before searching for a matching route to a specific handler which provides opportunity to respond early change the course of the request execution or set request - scoped values for the next http . Handler .
568	Handle adds the route pattern that matches any http method to execute the handler http . Handler .
569	HandleFunc adds the route pattern that matches any http method to execute the handlerFn http . HandlerFunc .
570	Method adds the route pattern that matches method http method to execute the handler http . Handler .
571	MethodFunc adds the route pattern that matches method http method to execute the handlerFn http . HandlerFunc .
572	Connect adds the route pattern that matches a CONNECT http method to execute the handlerFn http . HandlerFunc .
573	Delete adds the route pattern that matches a DELETE http method to execute the handlerFn http . HandlerFunc .
574	Get adds the route pattern that matches a GET http method to execute the handlerFn http . HandlerFunc .
575	Head adds the route pattern that matches a HEAD http method to execute the handlerFn http . HandlerFunc .
576	Options adds the route pattern that matches a OPTIONS http method to execute the handlerFn http . HandlerFunc .
577	Patch adds the route pattern that matches a PATCH http method to execute the handlerFn http . HandlerFunc .
578	Post adds the route pattern that matches a POST http method to execute the handlerFn http . HandlerFunc .
579	Put adds the route pattern that matches a PUT http method to execute the handlerFn http . HandlerFunc .
580	Trace adds the route pattern that matches a TRACE http method to execute the handlerFn http . HandlerFunc .
581	NotFound sets a custom http . HandlerFunc for routing paths that could not be found . The default 404 handler is http . NotFound .
582	MethodNotAllowed sets a custom http . HandlerFunc for routing paths where the method is unresolved . The default handler returns a 405 with an empty body .
583	With adds inline middlewares for an endpoint handler .
584	NotFoundHandler returns the default Mux 404 responder whenever a route cannot be found .
585	MethodNotAllowedHandler returns the default Mux 405 responder whenever a method cannot be resolved for a route .
586	handle registers a http . Handler in the routing tree for a particular http method and routing pattern .
587	routeHTTP routes a http . Request through the Mux routing tree to serve the matching handler for a particular http method .
588	Recursively update data on child routers .
589	methodNotAllowedHandler is a helper function to respond with a 405 method not allowed .
590	RequestLogger returns a logger handler using a custom LogFormatter .
591	GetLogEntry returns the in - context LogEntry for a request .
592	WithLogEntry sets the in - context LogEntry for a request .
593	NewLogEntry creates a new LogEntry for the request .
594	ContentCharset generates a handler that writes a 415 Unsupported Media Type response if none of the charsets match . An empty charset will allow requests with no Content - Type header or no specified charset .
595	Check the content encoding against a list of acceptable values .
596	Split a string in two parts cleaning any whitespace .
597	addChild appends the new child node to the tree using the pattern as the trie key . For a URL router like chi s we split the static param regexp and wildcard segments into different nodes . In addition addChild will recursively call itself until every pattern segment is added to the url pattern tree as individual nodes depending on type .
598	Recursive edge traversal by checking all nodeTyp groups along the way . It s like searching through a multi - dimensional radix trie .
599	ArticleCtx middleware is used to load an Article object from the URL parameters passed through as the request . In case the Article could not be found we stop here and return a 404 .
600	SearchArticles searches the Articles data for a matching article . It s just a stub but you get the idea .
601	CreateArticle persists the posted Article and returns it back to the client as an acknowledgement .
602	GetArticle returns the specific Article . You ll notice it just fetches the Article right off the context as its understood that if we made it this far the Article must be on the context . In case its not due to a bug then it will panic and our Recoverer will save us .
603	UpdateArticle updates an existing Article in our persistent store .
604	DeleteArticle removes an existing Article from our persistent store .
605	A completely separate router for administrator routes
606	AdminOnly middleware restricts access to just administrators .
607	paginate is a stub but very possible to implement middleware logic to handle the request params for handling a paginated request .
608	This is entirely optional but I wanted to demonstrate how you could easily add your own logic to the render . Respond method .
609	NewCompressor creates a new Compressor that will handle encoding responses . The level should be one of the ones defined in the flate package . The types are the content types that are allowed to be compressed .
610	Handler returns a new middleware that will compress the response based on the current Compressor .
611	selectEncoder returns the encoder the name of the encoder and a closer function .
612	DefaultCompress is a middleware that compresses response body of predefined content types to a data format based on Accept - Encoding request header . It uses a default compression level . DEPRECATED
613	Throttle is a middleware that limits number of currently processed requests at a time .
614	ThrottleBacklog is a middleware that limits number of currently processed requests at a time and provides a backlog for holding a finite number of pending requests .
615	ServeHTTP is the primary throttler request handler
616	NewWrapResponseWriter wraps an http . ResponseWriter returning a proxy that allows you to hook into various parts of the response process .
617	Routes creates a REST router for the todos resource
618	NewAWSProvider initializes a new AWS Route53 based Provider .
619	newChanges returns a collection of Changes based on the given records and action .
620	suitableZones returns all suitable private zones and the most suitable public zone for a given hostname and a set of zones .
621	isAWSLoadBalancer determines if a given hostname belongs to an AWS load balancer .
622	isAWSAlias determines if a given hostname belongs to an AWS Alias record by doing an reverse lookup .
623	canonicalHostedZone returns the matching canonical zone for a given hostname .
624	NewTXTRegistry returns new TXTRegistry object
625	Records returns the current records from the registry excluding TXT Records If TXT records was created previously to indicate ownership its corresponding value will be added to the endpoints Labels map
626	NewDomainFilter returns a new DomainFilter given a comma separated list of domains
627	Match checks whether a domain can be found in the DomainFilter .
628	IsConfigured returns true if DomainFilter is configured false otherwise
629	InMemoryWithLogging injects logging when ApplyChanges is called
630	InMemoryInitZones pre - seeds the InMemoryProvider with given zones
631	NewInMemoryProvider returns InMemoryProvider DNS provider interface implementation
632	CreateZone adds new zone if not present
633	Zones returns filtered zones as specified by domain
634	validateChangeBatch validates that the changes passed to InMemory DNS provider is valid
635	NewZoneTagFilter returns a new ZoneTagFilter given a list of zone tags
636	Match checks whether a zone s set of tags matches the provided tag values
637	NewIngressSource creates a new ingressSource with the given config .
638	Endpoints returns endpoint objects for each host - target combination that should be processed . Retrieves all ingress resources on all namespaces
639	filterByAnnotations filters a list of ingresses by a given annotation selector .
640	endpointsFromIngress extracts the endpoints from ingress object
641	NewLabelsFromString constructs endpoints labels from a provided format string if heritage set to another value is found then error is returned no heritage automatically assumes is not owned by external - dns and returns invalidHeritage error
642	Serialize transforms endpoints labels into a external - dns recognizable format string withQuotes adds additional quotes
643	KubeClient generates a kube client if it was not created before
644	IstioClient generates an istio client if it was not created before
645	ByNames returns multiple Sources given multiple names .
646	BuildWithConfig allows to generate a Source implementation from the shared config
647	NewKubeClient returns a new Kubernetes client object . It takes a Config and uses KubeMaster and KubeConfig attributes to connect to the cluster . If KubeConfig isn t provided it defaults to using the recommended default .
648	NewCRDClientForAPIVersionKind return rest client for the given apiVersion and kind of the CRD
649	NewCRDSource creates a new crdSource with the given config .
650	Match checks whether a zone matches the zone type that s filtered for .
651	NewInfobloxProvider creates a new Infoblox provider .
652	ApplyChanges applies the given changes .
653	NewServiceSource creates a new serviceSource with the given config .
654	Endpoints returns endpoint objects for each service that should be processed .
655	endpointsFromService extracts the endpoints from a service object
656	filterByAnnotations filters a list of services by a given annotation selector .
657	filterByServiceType filters services according their types
658	Calculate computes the actions needed to move current state towards desired state . It then passes those changes to the current policy for further processing . It returns a copy of Plan with the changes populated .
659	NewExoscaleProvider returns ExoscaleProvider DNS provider interface implementation
660	ExoscaleWithLogging injects logging when ApplyChanges is called
661	NewLinodeProvider initializes a new Linode DNS based Provider .
662	NewTargets is a convenience method to create a new Targets object from a vararg of strings
663	Same compares to Targets and returns true if they are completely identical
664	IsLess should fulfill the requirement to compare two targets and chosse the lesser one . In the past target was a simple string so simple string comparison could be used . Now we define less as either being the shorter list of targets or where the first entry is less . FIXME We really need to define under which circumstances a list Targets is considered less than another .
665	NewEndpoint initialization method to be used to create an endpoint
666	NewEndpointWithTTL initialization method to be used to create an endpoint with a TTL struct
667	GetProviderSpecificProperty returns a ProviderSpecificProperty if the property exists .
668	Match checks whether a zone matches one of the provided zone ids
669	ValidateConfig performs validation on the Config object
670	CreateRecord wraps the Create method of the API s Record service
671	DeleteRecord wraps the Delete method of the API s Record service
672	UpdateRecord wraps the Update method of the API s Record service
673	GetZone wraps the Get method of the API s Zones service
674	ListZones wraps the List method of the API s Zones service
675	Records returns the endpoints this provider knows about
676	ns1BuildRecord returns a dns . Record for a change set
677	ns1SubmitChanges takes an array of changes and sends them to NS1
678	newNS1Changes returns a collection of Changes based on the given records and action .
679	ns1ChangesByZone separates a multi - zone change into a single change per zone .
680	allLogLevelsAsStrings returns all logrus levels as a list of strings
681	Apply applies the upsert - only policy which strips out any deletions .
682	RunOnce runs a single iteration of a reconciliation loop .
683	Run runs RunOnce in a loop with a delay until stopChan receives a value .
684	NewCloudFlareProvider initializes a new CloudFlare DNS based Provider .
685	newCloudFlareChanges returns a collection of Changes based on the given records and action .
686	Returns the account ID given dnsimple credentials
687	NewDnsimpleProvider initializes a new Dnsimple based provider
688	Returns a list of filtered Zones
689	Records retuns a list of endpoints in a given zone
690	newDnsimpleChange initializes a new change to dns records
691	newDnsimpleChanges returns a slice of changes based on given action and record
692	submitChanges takes a zone and a collection of changes and makes all changes from the collection
693	Returns the record ID for a given record name and zone
694	dnsimpleSuitableZone returns the most suitable zone for a given hostname and a set of zones .
695	CreateRecords creates records for a given slice of endpoints
696	DeleteRecords deletes records for a given slice of endpoints
697	UpdateRecords updates records for a given slice of endpoints
698	ApplyChanges applies a given set of changes
699	NewGoogleProvider initializes a new Google CloudDNS based Provider .
700	Records returns the list of records in all relevant zones .
701	newFilteredRecords returns a collection of RecordSets based on the given endpoints and domainFilter .
702	submitChange takes a zone and a Change and sends it to Google .
703	separateChange separates a multi - zone change into a single change per zone .
704	newRecord returns a RecordSet based on the given endpoint .
705	NewRcodeZeroProvider creates a new RcodeZero Anycast DNS provider . Returns the provider or an error if a provider could not be created .
706	Zones returns filtered zones if filter is set
707	Records returns resource records Decrypts TXT records if TXT - Encrypt flag is set and key is provided
708	Helper function to submit changes . Changes are submitted by change type .
709	NewRcodezeroChanges returns a RcodeZero specific array with rrset change objects .
710	NewRcodezeroChange returns a RcodeZero specific rrset change object .
711	NewAlibabaCloudProvider creates a new Alibaba Cloud provider . Returns the provider or an error if a provider could not be created .
712	recordsForDNS gets the current records . Returns the current records or an error if the operation failed .
713	recordsForPrivateZone gets the current records . Returns the current records or an error if the operation failed .
714	SaveService persists service data into etcd
715	DeleteService deletes service record from etcd
716	loads TLS artifacts and builds tls . Clonfig object
717	builds etcd client config depending on connection scheme and TLS parameters
718	newETCDClient is an etcd client constructor
719	NewCoreDNSProvider is a CoreDNS provider constructor
720	Records returns all DNS records found in CoreDNS etcd backend . Depending on the record fields it may be mapped to one or two records of type A CNAME TXT A + TXT CNAME + TXT
721	NewRfc2136Provider is a factory function for OpenStack rfc2136 providers
722	Function for debug printing
723	NewPDNSProvider initializes a new PowerDNS based Provider .
724	mutateRecords takes a list of endpoints and creates replaces or deletes them based on the changetype
725	NewAWSSDProvider initializes a new AWS Route53 Auto Naming based Provider .
726	newSdNamespaceFilter initialized AWS SD Namespace Filter based on given string config
727	Records returns list of all endpoints .
728	ApplyChanges applies Kubernetes changes in endpoints to AWS API
729	ListNamespaces returns all namespaces matching defined namespace filter
730	GetServiceDetail returns detail of given service
731	ListInstancesByServiceID returns list of instances registered in given service .
732	CreateService creates a new service in AWS API . Returns the created service .
733	UpdateService updates the specified service with information from provided endpoint .
734	RegisterInstance creates a new instance in given service .
735	DeregisterInstance removes an instance from given service .
736	Instance ID length is limited by AWS API to 64 characters . For longer strings SHA - 256 hash will be used instead of the verbatim target to limit the length .
737	returns list of all namespaces matching given hostname
738	determine service routing policy based on endpoint type
739	determine if a given hostname belongs to an AWS load balancer
740	ResolveUpdate is invoked when dns name is already owned by current endpoint ResolveUpdate uses current record as base and updates it accordingly with new version of same resource if it doesn t exist then pick min
741	less returns true if endpoint x is less than y
742	NewDigitalOceanProvider initializes a new DigitalOcean DNS based Provider .
743	newDigitalOceanChanges returns a collection of Changes based on the given records and action .
744	getRecordID returns the ID from a record . the ID is mandatory to update and delete records
745	digitalOceanchangesByZone separates a multi - zone change into a single change per zone .
746	legacyEndpointsFromService tries to retrieve Endpoints from Services annotated with legacy annotations .
747	legacyEndpointsFromMateService tries to retrieve Endpoints from Services annotated with Mate s annotation semantics .
748	legacyEndpointsFromMoleculeService tries to retrieve Endpoints from Services annotated with Molecule Software s annotation semantics .
749	getTargetsFromTargetAnnotation gets endpoints from optional target annotation . Returns empty endpoints array if none are found .
750	suitableType returns the DNS resource record type suitable for the target . In this case type A for IPs and type CNAME for everything else .
751	endpointsForHostname returns the endpoint objects for each host - target combination .
752	NewDynProvider initializes a new Dyn Provider .
753	endpointToRecord puts the Target of an Endpoint in the correct field of DataBlock . See DataBlock comments for more info
754	Use SOAP to fetch all records with a single call
755	the zones we are allowed to touch . Currently only exact matches are considered not all zones with the given suffix
756	replaceRecord replaces all existing records pf the given type for the Endpoint . DNSName with 1 API call
757	commit commits all pending changes . It will always attempt to commit if there are no
758	Endpoints collects endpoints of all nested Sources and returns them in a single slice .
759	factory function for the designateClientInterface
760	copies environment variables to new names without overwriting existing values
761	authenticate in OpenStack and obtain Designate service endpoint
762	ForEachZone calls handler for each zone managed by the Designate
763	ForEachRecordSet calls handler for each recordset in the given DNS zone
764	CreateRecordSet creates recordset in the given DNS zone
765	UpdateRecordSet updates recordset in the given DNS zone
766	DeleteRecordSet deletes recordset in the given DNS zone
767	NewDesignateProvider is a factory function for OpenStack designate providers
768	converts domain names to FQDN
769	converts domain name to FQDN
770	returns ZoneID - > ZoneName mapping for zones that are managed by the Designate and match domain filter
771	finds best suitable DNS zone for the hostname
772	adds endpoint into recordset aggregation loading original values from endpoint labels first
773	NewIstioGatewaySource creates a new gatewaySource with the given config .
774	filterByAnnotations filters a list of configs by a given annotation selector .
775	endpointsFromGatewayConfig extracts the endpoints from an Istio Gateway Config object
776	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpoint .
777	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointList .
778	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointSpec .
779	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointStatus .
780	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Endpoint .
781	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Labels .
782	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProviderSpecific .
783	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Targets .
784	ensureTrailingDot ensures that the hostname receives a trailing dot if it hasn t already .
785	NewNoopRegistry returns new NoopRegistry object
786	ApplyChanges propagates changes to the dns provider
787	Endpoints collects endpoints from its wrapped source and returns them without duplicates .
788	NewFakeSource creates a new fakeSource with the given config .
789	CreateTLSConfig creates tls . Config instance from TLS parameters passed in environment variables with the given prefix
790	NewAWSSDRegistry returns implementation of registry for AWS SD
791	ApplyChanges filters out records not owned the External - DNS additionally it adds the required label inserted in the AWS SD instance as a CreateID field
792	LoadOCIConfig reads and parses the OCI ExternalDNS config file at the given path .
793	NewOCIProvider initialises a new OCI DNS based Provider .
794	ApplyChanges applies a given set of changes to a given zone .
795	newRecordOperation returns a RecordOperation based on a given endpoint .
796	operationsByZone segments a slice of RecordOperations by their zone .
797	NewAzureProvider creates a new Azure provider . Returns the provider or an error if a provider could not be created .
798	getAccessToken retrieves Azure API access token .
799	Make a boot2docker VM disk image .
800	createDiskImage makes a disk image at dest with the given size in MB . If r is not nil it will be read as a raw disk image to convert from .
801	Save changes the configuration of the host - only network .
802	SaveIPv4 changes the ipv4 configuration of the host - only network .
803	createHostonlyAdapter creates a new host - only network .
804	listHostOnlyAdapters gets all host - only adapters in a map keyed by NetworkName .
805	removeOrphanDHCPServers removed the DHCP servers linked to no host - only adapter
806	addHostOnlyDHCPServer adds a DHCP server to a host - only network .
807	listDHCPServers lists all DHCP server settings in a map keyed by DHCP . NetworkName .
808	checkIPNetCollision returns true if any host interfaces conflict with the host - only network mask passed as a parameter . This works with IPv4 or IPv6 ip addresses .
809	NewDriverNotSupported creates a placeholder Driver that replaces a driver that is not supported on a given platform . eg fusion on linux .
810	DriverName returns the name of the driver
811	MustBeRunning will return an error if the machine is not in a running state .
812	NewDriver creates and returns a new instance of the driver
813	Support migrating single string Driver fields to slices .
814	DockerClient creates a docker client for a given host .
815	CreateContainer creates a docker container .
816	cleanupResourceIfExists checks if the resource exists if it does and it does not have any attached resources then deletes the resource . If the resource does not exist or is not eligible for cleanup returns nil . If an error is encountered returns the error .
817	NewDriver creates a Driver with the specified machineName and storePath .
818	GetSSHUsername returns the username to use with SSH
819	Start starts the existing VM instance .
820	Stop stops the existing VM instance .
821	Restart reboots the existing VM instance .
822	Remove destroys the VM instance and the associated SSH key .
823	Build a cloud - init user data string that will install and run docker .
824	GenerateCACertificate generates a new certificate authority from the specified org and bit size and stores the resulting certificate and key file in the arguments .
825	GenerateCert generates a new certificate signed using the provided certificate authority files and stores the result in the certificate file and key provided . The provided host names are set to the appropriate certificate fields .
826	ReadTLSConfig reads the tls config for a machine .
827	ValidateCertificate validate the certificate installed on the vm .
828	IsVTXDisabled checks if VT - x is disabled in the CPU .
829	NewVBoxManager creates a VBoxManager instance .
830	driverPath finds the path of a driver binary by its name . + If the driver is a core driver there is no separate driver binary . We reuse current binary if it s docker - machine or we assume docker - machine is in the PATH . + If the driver is NOT a core driver then the separate binary must be in the PATH and it s name must be docker - machine - driver - driverName
831	AuthenticateDeviceFlow fetches a token from the local file cache or initiates a consent flow and waits for token to be obtained . Obtained token is stored in a file cache for future use and refreshing .
832	AuthenticateServicePrincipal uses given service principal credentials to return a service principal token . Generated token is not stored in a cache file or refreshed .
833	tokenFromFile returns a token from the specified file if it is found otherwise returns nil . Any error retrieving or creating the token is returned as an error .
834	deviceFlowAuth prints a message to the screen for user to take action to consent application on a browser and in the meanwhile the authentication endpoint is polled until user gives consent denies or the flow times out . Returned token must be saved .
835	tokenCachePath returns the full path the OAuth 2 . 0 token should be saved at for given tenant ID .
836	tenantIDPath returns the full path the tenant ID for the given subscription should be saved at . f
837	mkTokenCallback returns a callback function that can be used to save the token initially or register to the Azure SDK to be called when the token is refreshed .
838	NewFmtMachineLogger creates a MachineLogger implementation used by the drivers
839	NewComputeUtil creates and initializes a ComputeUtil .
840	disk returns the persistent disk attached to the vm .
841	deleteDisk deletes the persistent disk .
842	staticAddress returns the external static IP address .
843	openFirewallPorts configures the firewall to open docker and swarm ports .
844	instance retrieves the instance .
845	configureInstance configures an existing instance for use with Docker Machine .
846	addFirewallTag adds a tag to the instance to match the firewall rule .
847	uploadSSHKey updates the instance metadata with the given ssh key .
848	parseTags computes the tags for the instance .
849	startInstance starts the instance .
850	waitForOp waits for the operation to finish .
851	waitForRegionalOp waits for the regional operation to finish .
852	waitForGlobalOp waits for the global operation to finish .
853	ip retrieves and returns the external IP address of the instance .
854	cmdOutput runs a shell command and returns its output .
855	detect the vmrun and vmware - vdiskmanager cmds path if needed
856	RegisterResourceProviders registers current subscription to the specified resource provider namespaces if they are not already registered . Namespaces are case - insensitive .
857	CreateResourceGroup creates a Resource Group if not exists
858	CleanupVirtualNetworkIfExists removes a subnet if there are no subnets attached to it . Note that this method is not safe for multiple concurrent writers in case of races deployment of a machine could fail or resource might not be cleaned up .
859	CreateSubnet creates or updates a subnet if it does not already exist .
860	CleanupAvailabilitySetIfExists removes an availability set if there are no virtual machines attached to it . Note that this method is not safe for multiple concurrent writers in case of races deployment of a machine could fail or resource might not be cleaned up .
861	GetPublicIPAddress attempts to get public IP address from the Public IP resource . If IP address is not allocated yet returns empty string . If useFqdn is set to true the a FQDN hostname will be returned .
862	GetPrivateIPAddress attempts to retrieve private IP address of the specified network interface name . If IP address is not allocated yet returns empty string .
863	deleteResourceIfExists is an utility method to determine if a resource exists from the error returned from its Get response . If so deletes it . name is used only for logging purposes .
864	waitVMPowerState polls the Virtual Machine instance view until it reaches the specified goal power state or times out . If checking for virtual machine state fails or waiting times out an error is returned .
865	checkExistsFromError inspects an error and returns a true if err is nil false if error is an autorest . Error with StatusCode = 404 and will return the error back if error is another status code or another type of error .
866	osDiskStorageBlobURL gives the full url of the VHD blob where the OS disk for the given VM should be stored .
867	osDiskStorageContainerURL crafts a URL with a trailing slash pointing to the full Azure Blob Container URL for given VM name .
868	NewKeyPair generates a new SSH keypair This will return a private & public key encoded as DER .
869	Fingerprint calculates the fingerprint of the public key
870	GenerateSSHKey generates SSH keypair based on path of the private key The public key would be generated to the same path with . pub added
871	loadOrFindTenantID figures out the AAD tenant ID of the subscription by first looking at the cache file if not exists makes a network call to load it and cache it for future use .
872	findTenantID figures out the AAD tenant ID of the subscription by making an unauthenticated request to the Get Subscription Details endpoint and parses the value from WWW - Authenticate header .
873	saveTenantID performs an atomic write to the path with given tenantID contents .
874	Send sends a crash report to bugsnag via an http call .
875	Create a host using the driver s config
876	DriverName returns the name of the driver as it is registered
877	GetCreateFlags returns the mcnflag . Flag slice representing the flags that can be set their descriptions and defaults .
878	GetMachineName returns the name of the machine
879	GetSSHHostname returns hostname for use with ssh
880	GetSSHKeyPath returns key path for use with ssh
881	GetSSHUsername returns username for use with ssh
882	Kill stops a host forcefully
883	Remove a host
884	Start a host
885	Stop a host gracefully
886	In the 0 . 1 . 0 = > 0 . 2 . 0 transition the JSON representation of machines changed from a flat to a more nested structure for various options and configuration settings . To preserve compatibility with existing machines these migration functions have been introduced . They preserve backwards compat at the expense of some duplicated information . MigrateHostV0ToHostV1 validates host config and modifies if needed this is used for configuration updates
887	MigrateHostMetadataV0ToHostMetadataV1 fills nested host metadata and modifies if needed this is used for configuration updates
888	getNameAndItsPpid returns the exe file name its parent process id .
889	NewDriver creates a Driver with the specified storePath .
890	SetConfigFromFlags initializes the driver based on the command line flags .
891	PreCreateCheck is called to enforce pre - creation steps
892	Create creates a GCE VM instance acting as a docker host .
893	GetIP returns the IP address of the GCE instance .
894	GetState returns a docker . hosts . state . State value representing the current state of the host .
895	Start starts an existing GCE instance or create an instance with an existing disk .
896	Stop stops an existing GCE instance .
897	Remove deletes the GCE instance and the disk .
898	NewDriver returns a new driver instance .
899	SetConfigFromFlags initializes driver values from the command line values and checks if the arguments have values .
900	PreCreateCheck validates if driver values are valid to create the machine .
901	Create creates the virtual machine .
902	Remove deletes the virtual machine and resources associated to it .
903	GetIP returns public IP address or hostname of the machine instance .
904	GetURL returns a socket address to connect to Docker engine of the machine instance .
905	GetState returns the state of the virtual machine role instance .
906	Start issues a power on for the virtual machine instance .
907	Stop issues a power off for the virtual machine instance .
908	Restart reboots the virtual machine instance .
909	Sample Virtualbox create independent of Machine CLI .
910	Streaming the output of an SSH session in virtualbox .
911	NewDriver creates a new Hyper - v driver with default settings .
912	waitForIP waits until the host has a valid IP
913	waitStopped waits until the host is stopped
914	Start starts an host
915	Stop stops an host
916	Remove removes an host
917	generateDiskImage creates a small fixed vhd put the tar in convert to dynamic then resize
918	GetIP returns the ip
919	GetSSHKeyPath returns the ssh key path
920	GetSSHPort returns the ssh port 22 if not specified
921	GetSSHUsername returns the ssh user name root if not specified
922	ResolveStorePath returns the store path where the machine is
923	SetSwarmConfigFromFlags configures the driver for swarm
924	IsVTXDisabledInTheVM checks if VT - X is disabled in the started vm .
925	getReleaseTag gets the release tag of Boot2Docker from apiURL .
926	getReleaseURL gets the latest release URL of Boot2Docker .
927	version scans the volume ID in b and returns its version tag .
928	DownloadISO downloads boot2docker ISO image for the given tag and save it at dest .
929	Authenticate creates a Rackspace - specific Gophercloud client .
930	GetInstanceIPAddresses can be short - circuited with the server s AccessIPv4Addr on Rackspace .
931	targetHost returns a specific host name if one is indicated by the first CLI arg or the default host name if no host is specified .
932	machineCommand maps the command name to the corresponding machine command . We run commands concurrently and communicate back an error if there was one .
933	runActionForeachMachine will run the command across multiple machines
934	Create is the wrapper method which covers all of the boilerplate around actually creating provisioning and persisting an instance in the store .
935	GenerateRandomID returns an unique id
936	GetCreateFlags registers the machine create flags recognized by this driver including their help text and defaults .
937	NewDriver instantiates a Rackspace driver .
938	SetConfigFromFlags assigns and verifies the command - line arguments presented to the driver .
939	URL returns the Docker host URL
940	newAzureClient creates an AzureClient helper from the Driver context and initiates authentication if required .
941	generateSSHKey creates a ssh key pair locally and saves the public key file contents in OpenSSH format to the DeploymentContext .
942	parseSecurityRuleProtocol parses a protocol string into a network . SecurityRuleProtocol and returns error if the protocol is not supported
943	Given a State type returns its string representation
944	randomString generates a random string of given length using specified alphabet .
945	GetCreateFlags registers the flags this driver adds to docker - machine create
946	Make a boot2docker userdata . tar key bundle
947	NewDriver creates a new VirtualBox driver with default settings .
948	PreCreateCheck checks that VBoxManage exists and works
949	validateNoIPCollisions ensures no conflicts between the host s network interfaces and the vbox host - only network that will be used for machine vm instances .
950	Select an available port trying the specified port first falling back on an OS selected port .
951	Setup a NAT port forwarding entry .
952	getRandomIPinSubnet returns a pseudo - random net . IP in the same subnet as the IP passed
953	Detect detects user s current shell .
954	vaultRenewDuration accepts a secret and returns the recommended amount of time to sleep .
955	printVaultWarnings prints warnings for a given dependency .
956	vaultSecretRenewable determines if the given secret is renewable .
957	transformSecret transforms an api secret into our secret . This does not deep copy underlying deep data structures so it s not safe to modify the vault secret as that may modify the data in the transformed secret .
958	updateSecret updates our secret with the new data from the api careful to not overwrite missing data . Renewals don t include the original secret and we don t want to delete that data accidentally .
959	Display is the human - friendly form of this configuration . It tries to describe this template in as much detail as possible in a single line so log consumers can uniquely identify it .
960	NewVaultWriteQuery creates a new datacenter dependency .
961	sha1Map returns the sha1 hash of the data in the map . The reason this data is hashed is because it appears in the output and could contain sensitive information .
962	NewView constructs a new view with the given inputs .
963	Data returns the most - recently - received data from Consul for this View .
964	DataAndLastIndex returns the most - recently - received data from Consul for this view along with the last index . This is atomic so you will get the index that goes with the data you are fetching .
965	poll queries the Consul instance for data using the fetch function but also accounts for interrupts on the interrupt channel . This allows the poll function to be fired in a goroutine but then halted even if the fetch function is in the middle of a blocking query .
966	fetch queries the Consul instance for the attached dependency . This API promises that either data will be written to doneCh or an error will be written to errCh . It is designed to be run in a goroutine that selects the result of doneCh and errCh . It is assumed that only one instance of fetch is running per View and therefore no locking or mutexes are used .
967	NewCatalogNodeQuery parses the given string into a dependency . If the name is empty then the name of the local agent is used .
968	Fetch queries the Consul API defined by the given client and returns a of CatalogNode object .
969	String is the string representation of this authentication . If authentication is not enabled this returns the empty string . The username and password will be separated by a colon .
970	NewVaultListQuery creates a new datacenter dependency .
971	Remember accepts a dependency and the data to store associated with that dep . This function converts the given data to a proper type and stores it interally .
972	Recall gets the current value for the given dependency in the Brain .
973	ForceSet is used to force set the value of a dependency for a given hash code
974	Forget accepts a dependency and removes all associated data with this dependency . It also resets the receivedData internal map .
975	NewCatalogDatacentersQuery creates a new datacenter dependency .
976	Fetch queries the Consul API defined by the given client and returns a slice of strings representing the datacenters
977	NewCatalogNodesQuery parses the given string into a dependency . If the name is empty then the name of the local agent is used .
978	Fetch queries the Consul API defined by the given client and returns a slice of Node objects
979	Parse parses the given string as a signal . If the signal is not found an error is returned .
980	DefaultVaultConfig returns a configuration that is populated with the default values .
981	NewTemplate creates and parses a new Consul Template template at the given path . If the template does not exist an error is returned . During initialization the template is read and is parsed for dependencies . Any errors that occur are returned .
982	Execute evaluates this template in the provided context .
983	funcMap is the map of template functions to their respective functions .
984	StringToFileModeFunc returns a function that converts strings to os . FileMode value . This is designed to be used with mapstructure for parsing out a filemode value .
985	StringToWaitDurationHookFunc returns a function that converts strings to wait value . This is designed to be used with mapstructure for parsing out a wait value .
986	ConsulStringToStructFunc checks if the value set for the key should actually be a struct and sets the appropriate value in the struct . This is for backwards - compatability with older versions of Consul Template .
987	Key returns a boolean indicating whether the given key exists in the map .
988	Get returns a value previously set by Add or Set
989	Set stores the value v at the key k . It will overwrite an existing value if present .
990	SetX behaves the same as Set except it will not overwrite existing keys if already present .
991	MapSet stores the value v into a key mk in the map named k .
992	MapSetX behaves the same as MapSet except it will not overwrite the map key if it already exists .
993	mapSet is sets the value in the map overwriting if o is true . This function does not perform locking ; callers should lock before invoking .
994	MapValues returns the list of values in the map sorted by key .
995	init initializes the scratch .
996	Render atomically renders a file contents to disk returning a result of whether it would have rendered and actually did render .
997	copyFile copies the file at src to the path at dst . Any errors that occur are returned .
998	Copy returns a deep copy of the current configuration . This is useful because the nested data structures may be shared .
999	Merge merges the values in config into this config object . Values in the config object overwrite the values in c .
1000	Parse parses the given string contents as a config
1001	Must returns a config object that must compile . If there are any errors this function will panic . This is most useful in testing or constants .
1002	FromFile reads the configuration file at the given path and returns a new Config struct with the data populated .
1003	FromPath iterates and merges all configuration files in a given directory returning the resulting config .
1004	DefaultConfig returns the default configuration struct . Certain environment variables may be set which control the values for the default configuration .
1005	NewWatcher creates a new watcher using the given API client .
1006	Watching determines if the given dependency is being watched .
1007	ForceWatching is used to force setting the internal state of watching a dependency . This is only used for unit testing purposes .
1008	Remove removes the given dependency from the list and stops the associated View . If a View for the given dependency does not exist this function will return false . If the View does exist this function will return true upon successful deletion .
1009	Size returns the number of views this watcher is watching .
1010	Stop halts this watcher and any currently polling views immediately . If a view was in the middle of a poll no data will be returned .
1011	Add adds a new element to the set if it does not already exist .
1012	Get retrieves a single element from the set by name .
1013	List returns the insertion - ordered list of dependencies .
1014	Len is the size of the set .
1015	String is a string representation of the set .
1016	deepCopyAndSortTags deep copies the tags in the given string slice and then sorts and returns the copied result .
1017	respWithMetadata is a short wrapper to return the given interface with fake response metadata for non - Consul dependencies .
1018	regexpMatch matches the given regexp and extracts the match groups into a named map .
1019	NewCatalogServiceQuery parses a string into a CatalogServiceQuery .
1020	NewKVListQuery parses a string into a dependency .
1021	NewDedupManager creates a new Dedup manager
1022	Start is used to start the de - duplication manager
1023	Stop is used to stop the de - duplication manager
1024	createSession is used to create and maintain a session to Consul
1025	IsLeader checks if we are currently the leader instance
1026	UpdateDeps is used to update the values of the dependencies for a template
1027	setLeader sets if we are currently the leader instance
1028	parseData is used to update brain from a KV data pair
1029	NewFileQuery creates a file dependency from the given path .
1030	NewCLI creates a new CLI object with the given stdout and stderr streams .
1031	Run accepts a slice of arguments and returns an int representing the exit status from the command .
1032	stop is used internally to shutdown a running CLI
1033	loadConfigs loads the configuration from the list of paths . The optional configuration is the list of overrides to apply at the very end taking precedence over any configurations that were loaded from the paths . If any errors occur when reading or parsing those sub - configs it is returned .
1034	logError logs an error message and then returns the given status .
1035	FileModeGoString returns the value of the os . FileMode for printing in a string .
1036	SignalVal returns the value of the os . Signal at the pointer or 0 if the pointer is nil .
1037	SignalGoString returns the value of the os . Signal for printing in a string .
1038	SignalPresent returns a boolean indicating if the pointer is nil or if the pointer is pointing to the zero value ..
1039	TimeDurationVal returns the value of the string at the pointer or 0 if the pointer is nil .
1040	TimeDurationGoString returns the value of the time . Duration for printing in a string .
1041	CreateConsulClient creates a new Consul API client from the given input .
1042	Consul returns the Consul client for this set .
1043	Vault returns the Vault client for this set .
1044	Stop closes all idle connections for any attached clients .
1045	NewVaultReadQuery creates a new datacenter dependency .
1046	NewKVGetQuery parses a string into a dependency .
1047	NewVaultAgentTokenQuery creates a new dependency .
1048	watch watches the file for changes
1049	NewKVKeysQuery parses a string into a dependency .
1050	New creates a new child process for management with high - level APIs for sending signals to the child process restarting the child process and gracefully terminating the child process .
1051	ExitCh returns the current exit channel for this child process . This channel may change if the process is restarted so implementers must not cache this value .
1052	Pid returns the pid of the child process . If no child process exists 0 is returned .
1053	Command returns the human - formatted command with arguments .
1054	Start starts and begins execution of the child process . A buffered channel is returned which is where the command s exit code will be returned upon exit . Any errors that occur prior to starting the command will be returned as the second error argument but any errors returned by the command after execution will be returned as a non - zero value over the exit code channel .
1055	Signal sends the signal to the child process returning any errors that occur .
1056	Reload sends the reload signal to the child process and does not wait for a response . If no reload signal was provided the process is restarted and replaces the process attached to this Child .
1057	Kill sends the kill signal to the child process and waits for successful termination . If no kill signal is defined the process is killed with the most aggressive kill signal . If the process does not gracefully stop within the provided KillTimeout the process is force - killed . If a splay was provided this function will sleep for a random period of time between 0 and the provided splay value to reduce the thundering herd problem . This function does not return any errors because it guarantees the process will be dead by the return of the function call .
1058	Stop behaves almost identical to Kill except it suppresses future processes from being started by this child and it prevents the killing of the child process from sending its value back up the exit channel . This is useful when doing a graceful shutdown of an application .
1059	Env calculates and returns the finalized environment for this exec configuration . It takes into account pristine custom environment whitelist and blacklist values .
1060	NewHealthServiceQuery processes the strings to build a service dependency .
1061	Fetch queries the Consul API defined by the given client and returns a slice of HealthService objects .
1062	acceptStatus allows us to check if a slice of health checks pass this filter .
1063	RetryFunc returns the retry function associated with this configuration .
1064	NewRunner accepts a slice of TemplateConfigs and returns a pointer to the new Runner and any error that occurred during creation .
1065	Stop halts the execution of this runner and its subprocesses .
1066	RenderEvents returns the render events for each template was rendered . The map is keyed by template ID .
1067	Signal sends a signal to the child process if it exists . Any errors that occur are returned .
1068	diffAndUpdateDeps iterates through the current map of dependencies on this runner and stops the watcher for any deps that are no longer required . At the end of this function the given depsMap is converted to a slice and stored on the runner .
1069	TemplateConfigFor returns the TemplateConfig for the given Template
1070	TemplateConfigMapping returns a mapping between the template ID and the set of TemplateConfig represented by the template ID
1071	allTemplatesRendered returns true if all the templates in this Runner have been rendered at least one time .
1072	childEnv creates a map of environment variables for child processes to have access to configurations in Consul Template s configuration .
1073	storePid is used to write out a PID file to disk .
1074	deletePid is used to remove the PID on exit .
1075	spawnChild spawns a child process with the given inputs and returns the resulting child .
1076	newQuiescence creates a new quiescence timer for the given template .
1077	tick updates the minimum quiescence timer .
1078	findCommand searches the list of template configs for the given command and returns it if it exists .
1079	newWatcher creates a new watcher .
1080	NewCatalogServicesQuery parses a string of the format
1081	DefaultConsulConfig returns a configuration that is populated with the default values .
1082	StringToSignalFunc parses a string as a signal based on the signal lookup table . If the user supplied an empty string or nil a special nil signal is returned . Clients should check for this value and set the response back nil after mapstructure finishes parsing .
1083	String returns the string format for this wait variable
1084	NewVaultTokenQuery creates a new dependency .
1085	NewLogFilter returns a LevelFilter that is configured with the log levels that we use .
1086	ValidateLevelFilter verifies that the log levels within the filter are valid .
1087	datacentersFunc returns or accumulates datacenter dependencies .
1088	envFunc returns a function which checks the value of an environment variable . Invokers can specify their own environment which takes precedences over any real environment variables
1089	executeTemplateFunc executes the given template in the context of the parent . If an argument is specified it will be used as the context instead . This can be used for nested template definitions .
1090	fileFunc returns or accumulates file dependencies .
1091	keyFunc returns or accumulates key dependencies .
1092	keyExistsFunc returns true if a key exists false otherwise .
1093	nodeFunc returns or accumulates catalog node dependency .
1094	nodesFunc returns or accumulates catalog node dependencies .
1095	secretFunc returns or accumulates secret dependencies from Vault .
1096	secretsFunc returns or accumulates a list of secret dependencies from Vault .
1097	serviceFunc returns or accumulates health service dependencies .
1098	servicesFunc returns or accumulates catalog services dependencies .
1099	treeFunc returns or accumulates keyPrefix dependencies .
1100	base64Decode decodes the given string as a base64 string returning an error if it fails .
1101	base64Encode encodes the given value into a string represented as base64 .
1102	base64URLDecode decodes the given string as a URL - safe base64 string .
1103	base64URLEncode encodes the given string to be URL - safe .
1104	byTag is a template func that takes the provided services and produces a map based on Service tags . The map key is a string representing the service tag . The map value is a slice of Services which have the tag assigned .
1105	explode is used to expand a list of keypairs into a deeply - nested hash .
1106	explodeHelper is a recursive helper for explode .
1107	in searches for a given value in a given interface .
1108	Indent prefixes each line of a string with the specified number of spaces
1109	join is a version of strings . Join that can be piped
1110	parseBool parses a string into a boolean
1111	parseFloat parses a string into a base 10 float
1112	parseInt parses a string into a base 10 int
1113	parseJSON returns a structure for valid JSON
1114	parseUint parses a string into a base 10 int
1115	plugin executes a subprocess as the given command string . It is assumed the resulting command returns JSON which is then parsed and returned as the value for use in the template .
1116	replaceAll replaces all occurrences of a value in a string with the given replacement value .
1117	regexReplaceAll replaces all occurrences of a regular expression with the given replacement value .
1118	regexMatch returns true or false if the string matches the given regular expression
1119	split is a version of strings . Split that can be piped
1120	timestamp returns the current UNIX timestamp in UTC . If an argument is specified it will be used to format the timestamp .
1121	toJSON converts the given structure into a deeply nested JSON string .
1122	toJSONPretty converts the given structure into a deeply nested pretty JSON string .
1123	toYAML converts the given structure into a deeply nested YAML string .
1124	toTOML converts the given structure into a deeply nested TOML string .
1125	add returns the sum of a and b .
1126	modulo returns the modulo of b from a .
1127	Returns true if the item has expired .
1128	Add an item to the cache replacing any existing item using the default expiration .
1129	Add an item to the cache only if an item doesn t already exist for the given key or if the existing item has expired . Returns an error otherwise .
1130	Get an item from the cache . Returns the item or nil and a bool indicating whether the key was found .
1131	Increment an item of type int by n . Returns an error if the item s value is not an int or if it was not found . If there is no error the incremented value is returned .
1132	Delete an item from the cache . Does nothing if the key is not in the cache .
1133	Delete all expired items from the cache .
1134	Copies all unexpired items in the cache into a new map and returns it .
1135	Returns the number of items in the cache . This may include items that have expired but have not yet been cleaned up .
1136	Delete all items from the cache .
1137	djb2 with better shuffling . 5x faster than FNV with the hash . Hash overhead .
1138	LinkByName finds a link by name and returns a pointer to the object
1139	NewMockTaskEngine creates a new mock instance
1140	AddTask indicates an expected call of AddTask
1141	GetTaskByArn mocks base method
1142	ListTasks mocks base method
1143	MarshalJSON mocks base method
1144	MustInit mocks base method
1145	StateChangeEvents mocks base method
1146	Version indicates an expected call of Version
1147	NewMockImageManager creates a new mock instance
1148	AddAllImageStates mocks base method
1149	AddAllImageStates indicates an expected call of AddAllImageStates
1150	GetImageStateFromImageName mocks base method
1151	RecordContainerReference mocks base method
1152	StartImageCleanupProcess mocks base method
1153	NewEC2MetadataClient creates an ec2metadata client to retrieve metadata
1154	DefaultCredentials returns the credentials associated with the instance iam role
1155	GetDynamicData returns the dynamic data with provided path from instance metadata
1156	GetMetadata returns the metadata from instance metadata service specified by the path
1157	VPCID returns the VPC id for the network interface given its mac address
1158	SubnetID returns the subnet id for the network interface given its mac address
1159	newRefreshCredentialsHandler returns a new refreshCredentialsHandler object
1160	handlerFunc returns the request handler function for the ecsacs . IAMRoleCredentialsMessage
1161	ackMessageId sends an IAMRoleCredentialsAckRequest to the backend
1162	handleMessages processes refresh credentials messages in the buffer in - order
1163	handleSingleMessage processes a single refresh credentials message .
1164	validRoleType returns false if the RoleType in the acs refresh payload is not one of the expected types . TaskApplication TaskExecution
1165	newPayloadRequestHandler returns a new payloadRequestHandler object
1166	handlerFunc returns the request handler function for the ecsacs . PayloadMessage type
1167	ackMessageId sends an AckRequest for a message id
1168	handleMessages processes payload messages in the payload message buffer in - order
1169	handleSingleMessage processes a single payload message . It adds tasks in the message to the task engine An error is returned if the message was not handled correctly . The error is being used only for testing today . In the future it could be used for doing more interesting things .
1170	addPayloadTasks does validation on each task and for all valid ones adds it to the task engine . It returns a bool indicating if it could add every task to the taskEngine and a slice of credential ack requests
1171	addTasks adds the tasks to the task engine based on the skipAddTask condition This is used to add non - stopped tasks before adding stopped tasks
1172	handleUnrecognizedTask handles unrecognized tasks by sending stopped with a suitable reason to the backend
1173	v2HandlersSetup adds all handlers in v2 package to the mux router .
1174	v3HandlersSetup adds all handlers in v3 package to the mux router .
1175	NewMockProvider creates a new mock instance
1176	IsExpired mocks base method
1177	IsExpired indicates an expected call of IsExpired
1178	Retrieve mocks base method
1179	NewMockContainerMetadataResolver creates a new mock instance
1180	ResolveContainer mocks base method
1181	ResolveContainer indicates an expected call of ResolveContainer
1182	ResolveTask mocks base method
1183	NewTaskResponse creates a new response object for the task
1184	NewContainerResponse creates a new container response based on container id
1185	New creates a new Args object from the argument list
1186	DefaultConfig returns the default configuration for Windows
1187	New returns an ECS httpClient with a roundtrip timeout of the given duration
1188	RemoveFromTaskArray removes the element at ndx from an array of task pointers arr . If the ndx is out of bounds it returns arr unchanged .
1189	adjustForPlatform makes Windows - specific changes to the task after unmarshal
1190	platformHostConfigOverride provides an entry point to set up default HostConfig options to be passed to Docker API .
1191	String return the string value of the eniattachment status
1192	return - based exit code so the defer works
1193	RetryRules returns the correct time to delay between retries for this instance of a retry . For the first 14 requests it follows an exponential backoff between 30ms and 1 minute . See the const comments for math on how this gets us to around 24 hours total .
1194	NewMockTime creates a new mock instance
1195	After mocks base method
1196	AfterFunc mocks base method
1197	Now mocks base method
1198	Now indicates an expected call of Now
1199	Sleep mocks base method
1200	Sleep indicates an expected call of Sleep
1201	NewMockTimer creates a new mock instance
1202	Reset mocks base method
1203	Reset indicates an expected call of Reset
1204	Stop mocks base method
1205	Stop indicates an expected call of Stop
1206	AddAgentUpdateHandlers adds the needed update handlers to perform agent updates
1207	Returns the Docker SDK Client
1208	DockerStateToState converts the container status from docker to status recognized by the agent
1209	MetadataFromContainer translates dockerContainer into DockerContainerMetadata
1210	Listen to the docker event stream for container changes and pass them up
1211	ListContainers returns a slice of container IDs .
1212	ListPluginsWithFilters takes in filter arguments and returns the string of filtered Plugin names
1213	APIVersion returns the client api version
1214	LoadImage invokes loads an image from an input stream with a specified timeout
1215	UpdateContainerReference updates container reference in image state
1216	AddImageName adds image name to image state
1217	GetImageNamesCount returns number of image names
1218	UpdateImageState updates image name and container reference in image state
1219	RemoveImageName removes image name from image state
1220	HasImageName returns true if image state contains the containerImageName
1221	RemoveContainerReference removes container reference from image state
1222	SetPullSucceeded sets the PullSucceeded of the imageState
1223	GetPullSucceeded safely returns the PullSucceeded of the imageState
1224	MarshalJSON marshals image state
1225	UnmarshalJSON overrides the logic for parsing the JSON - encoded TaskStatus data
1226	MarshalJSON overrides the logic for JSON - encoding the TaskStatus type
1227	NewClient creates a client of ecscni which is used to invoke the plugin
1228	SetupNS will set up the namespace of container including create the bridge and the veth pair move the eni to container namespace setup the routes
1229	CleanupNS will clean up the container namespace including remove the veth pair and stop the dhclient
1230	ReleaseIPResource marks the ip available in the ipam db
1231	add invokes the ADD command of the given plugin
1232	del invokes the DEL command of the given plugin
1233	createBridgeNetworkConfigWithIPAM creates the config of bridge for ADD command where bridge plugin acquires the IP and route information from IPAM
1234	createBridgeNetworkConfigWithoutIPAM creates the config of the bridge for removal
1235	constructNetworkConfig takes in the config from agent and construct the configuration that s accepted by the libcni
1236	createIPAMNetworkConfig constructs the ipam configuration accepted by libcni
1237	Version returns the version of the plugin
1238	Capabilities returns the capabilities supported by a plugin
1239	New is used to return an instance of the UdevWatcher struct
1240	newWatcher is used to nest the return of the UdevWatcher struct
1241	performPeriodicReconciliation is used to periodically invoke the reconciliation process based on a ticker
1242	reconcileOnce is used to reconcile the state of ENIs attached to the instance
1243	sendENIStateChange handles the eni event from udev or reconcile phase
1244	buildState is used to build a state of the system for reconciliation
1245	sendENIStateChangeWithRetries invokes the sendENIStateChange method with backoff and retries . Retries are only effective if sendENIStateChange returns an unmanagedENIError . We re effectively waiting for the ENI attachment message from ACS for a network device at this point of time .
1246	Close closes the underlying connection .
1247	signRequestFunc is a MakeRequestHookFunc that signs each generated request
1248	publishMetrics invokes the PublishMetricsRequest on the clientserver object .
1249	publishMetricsOnce is invoked by the ticker to periodically publish metrics to backend .
1250	metricsToPublishMetricRequests gets task metrics and converts them to a list of PublishMetricRequest objects .
1251	publishHealthMetrics send the container health information to backend
1252	publishHealthMetricsOnce is invoked by the ticker to periodically publish metrics to backend .
1253	createPublishHealthRequests creates the requests to publish container health
1254	copyMetricsMetadata creates a new MetricsMetadata object from a given MetricsMetadata object . It copies all the fields from the source object to the new object and sets the Fin field as specified by the argument .
1255	copyTaskMetrics copies a slice of TaskMetric objects to another slice . This is needed as we reset the source slice after creating a new PublishMetricsRequest object .
1256	copyHealthMetadata performs a deep copy of HealthMetadata object
1257	copyTaskHealthMetrics copies a slice of taskHealthMetrics to another slice
1258	UnmarshalJSON unmarshals ResourcesMap object
1259	NewVolumeResource returns a docker volume wrapper object
1260	KnownCreated returns true if the volume s known status is CREATED
1261	setMountPoint sets the mountpoint of the created volume . This is a read - only field hence making this a private function .
1262	GetMountPoint gets the mountpoint of the created volume .
1263	Create performs resource creation
1264	Cleanup performs resource cleanup
1265	MarshalJSON marshals VolumeResource object using duplicate struct VolumeResourceJSON
1266	UnmarshalJSON unmarshals VolumeResource object using duplicate struct VolumeResourceJSON
1267	NewMockClientCreator creates a new mock instance
1268	NewASMClient mocks base method
1269	NewASMClient indicates an expected call of NewASMClient
1270	NewTransportProtocol returns a TransportProtocol from a string in the task
1271	String converts TransportProtocol to a string
1272	UnmarshalJSON for TransportProtocol determines whether to use TCP or UDP setting TCP as the zero - value but treating other unrecognized values as errors
1273	MarshalJSON overrides the logic for JSON - encoding the TransportProtocol type
1274	NewMockManager creates a new mock instance
1275	GetTaskCredentials mocks base method
1276	RemoveCredentials mocks base method
1277	SetTaskCredentials mocks base method
1278	GetDockerAuthFromASM makes the api call to the AWS Secrets Manager service to retrieve the docker auth data
1279	GetSecretFromASM makes the api call to the AWS Secrets Manager service to retrieve the secret value
1280	NewMockCgroupFactory creates a new mock instance
1281	Load mocks base method
1282	Load indicates an expected call of Load
1283	LoadImage helps load the pause container image for the agent
1284	NewCgroupResource is used to return an object that implements the Resource interface
1285	Create creates cgroup root for the task
1286	Cleanup removes the cgroup root created for the task
1287	MarshalJSON marshals CgroupResource object using duplicate struct CgroupResourceJSON
1288	UnmarshalJSON unmarshals CgroupResource object using duplicate struct CgroupResourceJSON
1289	GetCgroupRoot returns cgroup root of the resource
1290	GetCgroupMountPath returns cgroup mount path of the resource
1291	Initialize initializes the resource fileds in cgroup
1292	LoadImage returns UnsupportedPlatformError on the unsupported platform
1293	NewECRFactory returns an ECRFactory capable of producing ECRSDK clients
1294	GetClient creates the ECR SDK client based on the authdata
1295	getClientConfig returns the config for the ecr client based on authData
1296	NewMockAuditLogger creates a new mock instance
1297	GetContainerInstanceArn mocks base method
1298	GetContainerInstanceArn indicates an expected call of GetContainerInstanceArn
1299	Log mocks base method
1300	Log indicates an expected call of Log
1301	NewMockInfoLogger creates a new mock instance
1302	Info mocks base method
1303	Info indicates an expected call of Info
1304	taskShouldBeSent checks whether the event should be sent this includes both task state change and container state change events
1305	send tries to send an event specified by eventToSubmit of type eventType to ECS
1306	sendContainerStatusToECS invokes the SubmitContainerStateChange API to send a container status change to ECS
1307	sendTaskStatusToECS invokes the SubmitTaskStateChange API to send a task status change to ECS
1308	setContainerChangeSent sets the event s container change object as sent
1309	setTaskChangeSent sets the event s task change object as sent
1310	setTaskAttachmentSent sets the event s task attachment object as sent
1311	GetSecretFromSSM makes the api call to the AWS SSM parameter store to retrieve secrets value in batches
1312	version - gen is a simple program that generates the agent s version file containing information about the agent s version commit hash and repository cleanliness .
1313	IsRetriableError returns a boolean indicating whether the call that generated the error can be retried . When stopping a container most errors that we can get should be considered retriable . However in the case where the container is already stopped or doesn t exist at all there s no sense in retrying .
1314	NewMockFile creates a new mock instance
1315	Chmod mocks base method
1316	Chmod indicates an expected call of Chmod
1317	Write mocks base method
1318	NewMockOS creates a new mock instance
1319	Create indicates an expected call of Create
1320	IsNotExist mocks base method
1321	OpenFile mocks base method
1322	RemoveAll mocks base method
1323	NewMockSSMClientCreator creates a new mock instance
1324	NewSSMClient mocks base method
1325	NewSSMClient indicates an expected call of NewSSMClient
1326	NewMockEC2MetadataClient creates a new mock instance
1327	DefaultCredentials mocks base method
1328	DefaultCredentials indicates an expected call of DefaultCredentials
1329	GetDynamicData mocks base method
1330	InstanceIdentityDocument mocks base method
1331	NewMockHttpClient creates a new mock instance
1332	GetInstanceIdentityDocument mocks base method
1333	GetUserData mocks base method
1334	GetUserData indicates an expected call of GetUserData
1335	NewMockClient creates a new mock instance
1336	DescribeECSTagsForInstance mocks base method
1337	NewMockClientSDK creates a new mock instance
1338	CreateTags mocks base method
1339	DescribeTags mocks base method
1340	DescribeTags indicates an expected call of DescribeTags
1341	NewStateManager constructs a new StateManager which saves data at the location specified in cfg and operates under the given options . The returned StateManager will not save more often than every 10 seconds and will not reliably return errors with Save but will log them appropriately .
1342	Save triggers a save to file though respects a minimum save interval to wait between saves .
1343	Load reads state off the disk from the well - known filepath and loads it into the passed State object .
1344	ValidDependencies takes a task and verifies that it is possible to allow all containers within it to reach the desired status by proceeding in some order .
1345	DependenciesCanBeResolved verifies that it s possible to transition a target given a group of already handled containers by . Essentially it asks is target resolved by by . It assumes that everything in by has reached DesiredStatus and that target is also trying to get there This function is used for verifying that a state should be resolvable not for actually deciding what to do . DependenciesAreResolved should be used for that purpose instead .
1346	onSteadyStateIsResolved defines a relationship where a target cannot be created until dependency has reached the steady state . Transitions include pulling .
1347	newAgent returns a new ecsAgent object but does not start anything
1348	printECSAttributes prints the Agent s ECS Attributes based on its environment
1349	start starts the ECS Agent
1350	doStart is the worker invoked by start for starting the ECS Agent . This involves initializing the docker task engine state saver image manager credentials manager poll and telemetry sessions api handler etc
1351	newTaskEngine creates a new docker task engine object . It tries to load the local state if needed else initializes a new one
1352	setClusterInConfig sets the cluster name in the config object based on previous state . It returns an error if there s a mismatch between the the current cluster name with what s restored from the cluster state
1353	getEC2InstanceID gets the EC2 instance ID from the metadata service
1354	constructVPCSubnetAttributes returns vpc and subnet IDs of the instance as an attribute list
1355	registerContainerInstance registers the container instance ID for the ECS Agent
1356	reregisterContainerInstance registers a container instance that has already been registered with ECS . This is for cases where the ECS Agent is being restored from a check point .
1357	startAsyncRoutines starts all of the background methods
1358	startACSSession starts a session with ECS s Agent Communication service . This is a blocking call and only returns when the handler returns
1359	getContainerInstanceTagsFromEC2API will retrieve the tags of this instance remotely .
1360	mergeTags will merge the local tags and ec2 tags for the overlap part ec2 tags will be overridden by local tags .
1361	SlicesDeepEqual checks if slice1 and slice2 are equal disregarding order .
1362	IsAWSErrorCodeEqual returns true if the err implements Error interface of awserr and it has the same error code as the passed in error code .
1363	MapToTags converts a map to a slice of tags .
1364	CredentialsHandlerImpl is the major logic in CredentialsHandler abstract this out because v2 . CredentialsHandler also uses the same logic .
1365	processCredentialsRequest returns the response json containing credentials for the credentials id in the request
1366	NewTaskHandler returns a pointer to TaskHandler
1367	AddStateChangeEvent queues up the state change event to be sent to ECS . If the event is for a container state change it just gets added to the handler . tasksToContainerStates map . If the event is for task state change it triggers the non - blocking handler . submitTaskEvents method to submit the batched container state changes and the task state change to ECS
1368	startDrainEventsTicker starts a ticker that periodically drains the events queue by submitting state change events to the ECS backend
1369	taskStateChangesToSend gets a list task state changes for container events that have been batched and not sent beyond the drainEventsFrequency threshold
1370	batchContainerEventUnsafe collects container state change events for a given task arn
1371	flushBatchUnsafe attaches the task arn s container events to TaskStateChange event by creating the sendable event list . It then submits this event to ECS asynchronously
1372	getTaskEventsUnsafe gets the event list for the task arn in the sendableEvent from taskToEvent map
1373	Continuously retries sending an event until it succeeds sleeping between each attempt
1374	sendChange adds the change to the sendable events queue . It triggers the handler s submitTaskEvents async method to submit this change if there s no go routines already sending changes for this event list
1375	submitFirstEvent submits the first event for the task from the event list . It returns true if the list became empty after submitting the event . Else it returns false . An error is returned if there was an error with submitting the state change to ECS . The error is used by the backoff handler to backoff before retrying the state change submission for the first event
1376	getTasksToEventsLen returns the length of the tasksToEvents map . It is used only in the test code to ascertain that map has been cleaned up
1377	handleInvalidParamException removes the event from event queue when its parameters are invalid to reduce redundant API call
1378	NewMockControl creates a new mock instance
1379	Exists mocks base method
1380	Init indicates an expected call of Init
1381	NewQueue creates a queue .
1382	Reset resets the stats queue .
1383	Add adds a new set of container stats to the queue .
1384	GetLastStat returns the last recorded raw statistics object from docker
1385	GetRawUsageStats gets the array of most recent raw UsageStats in descending order of timestamps .
1386	getCWStatsSet gets the stats set for either CPU or Memory based on the function pointer .
1387	NewMockCNIClient creates a new mock instance
1388	Capabilities mocks base method
1389	Capabilities indicates an expected call of Capabilities
1390	CleanupNS mocks base method
1391	ReleaseIPResource mocks base method
1392	SetupNS mocks base method
1393	SetupNS indicates an expected call of SetupNS
1394	ContainerAssociationHandler returns the handler method for handling container associations requests .
1395	ContainerAssociationHandler returns the handler method for handling container association requests .
1396	NewManager creates a metadataManager for a given DockerTaskEngine settings .
1397	Create creates the metadata file and adds the metadata directory to the container s mounted host volumes Pointer hostConfig is modified directly so there is risk of concurrency errors .
1398	Update updates the metadata file after container starts and dynamic metadata is available
1399	Clean removes the metadata files of all containers associated with a task
1400	Normalize all auth types into a uniform dockerAuths type . On error any appropriate information will be logged and an empty dockerAuths will be returned
1401	ServeHTTP logs the method and remote address of the request .
1402	NewJitteredTicker works like a time . Ticker except with randomly distributed ticks between start and end duration .
1403	getTaskENIPluginVersionAttribute returns the version information of the ECS CNI plugins . It just executes the ENI plugin as the assumption is that these plugins are packaged with the ECS Agent which means all of the other plugins should also emit the same version information . Also the version information doesn t contribute to placement decisions and just serves as additional debugging information
1404	NewMockECSSDK creates a new mock instance
1405	CreateCluster mocks base method
1406	ListTagsForResource mocks base method
1407	NewMockECSSubmitStateSDK creates a new mock instance
1408	SubmitContainerStateChange indicates an expected call of SubmitContainerStateChange
1409	NewMockECSClient creates a new mock instance
1410	DiscoverPollEndpoint indicates an expected call of DiscoverPollEndpoint
1411	GetResourceTags mocks base method
1412	NewTaskEngine returns a default TaskEngine
1413	NewMockStateManager creates a new mock instance
1414	NewStateManager mocks base method
1415	NewStateManager indicates an expected call of NewStateManager
1416	NewMockSaveableOption creates a new mock instance
1417	AddSaveable mocks base method
1418	AddSaveable indicates an expected call of AddSaveable
1419	NewECSClient creates a new ECSClient interface object
1420	CreateCluster creates a cluster from a given name and returns its arn
1421	RegisterContainerInstance calculates the appropriate resources creates the default cluster if necessary and returns the registered ContainerInstanceARN if successful . Supplying a non - empty container instance ARN allows a container instance to update its registered resources .
1422	Connect opens a connection to the backend and upgrades it to a websocket . Calls to MakeRequest can be made after calling this but responses will not be receivable until Serve is also called .
1423	IsReady gives a boolean response that informs the caller if the websocket connection is fully established .
1424	SetReadDeadline sets the read deadline for the websocket connection A read timeout results in an io error if there are any outstanding reads that exceed the deadline
1425	Disconnect disconnects the connection
1426	WriteMessage wraps the low level websocket write method with a lock
1427	ConsumeMessages reads messages from the websocket connection and handles read messages from an active connection .
1428	handleMessage dispatches a message to the correct requestHandler for its type . If no request handler is found the message is discarded .
1429	AllTasks returns all of the tasks
1430	AllImageStates returns all of the image . ImageStates
1431	AllENIAttachments returns all the enis managed by ecs on the instance
1432	ENIByMac returns the eni object that match the give mac address
1433	AddENIAttachment adds the eni into the state
1434	RemoveENIAttachment removes the eni from state and stop managing
1435	GetAllContainerIDs returns all of the Container Ids
1436	ContainerByID returns an apicontainer . DockerContainer for a given container ID
1437	ContainerMapByArn returns a map of containers belonging to a particular task ARN
1438	TaskByShortID retrieves the task of a given docker short container id
1439	TaskByID retrieves the task of a given docker container id
1440	TaskByArn returns a task for a given ARN
1441	AddTask adds a new task to the state
1442	AddContainer adds a container to the state . If the container has been added with only a name and no docker - id this updates the state to include the docker id
1443	AddImageState adds an image . ImageState to be stored
1444	RemoveTask removes a task from this state . It removes all containers and other associated metadata . It does acquire the write lock .
1445	taskToIPUnsafe gets the ip address for a given task arn
1446	removeV3EndpointIDToTaskContainerUnsafe removes the container from v3EndpointIDToTask and v3EndpointIDToDockerID maps
1447	RemoveImageState removes an image . ImageState
1448	AddTaskIPAddress adds ip adddress for a task arn into the state
1449	GetTaskByIPAddress gets the task arn for an IP address
1450	storeV3EndpointIDToTaskUnsafe adds v3EndpointID - > taskARN mapping to state
1451	storeV3EndpointIDToContainerNameUnsafe adds v3EndpointID - > dockerID mapping to state
1452	DockerIDByV3EndpointID returns a docker ID for a given v3 endpoint ID
1453	TaskARNByV3EndpointID returns a taskARN for a given v3 endpoint ID
1454	v1HandlersSetup adds all handlers except CredentialsHandler in v1 package to the server mux .
1455	String returns a human readable string representation of DockerContainer
1456	NewContainerWithSteadyState creates a new Container object with the specified steady state . Containers that need the non default steady state set will use this method instead of setting it directly
1457	GetKnownStatus returns the known status of the container
1458	SetKnownStatus sets the known status of the container and update the container applied status
1459	GetDesiredStatus gets the desired status of the container
1460	SetDesiredStatus sets the desired status of the container
1461	GetSentStatus safely returns the SentStatusUnsafe of the container
1462	SetSentStatus safely sets the SentStatusUnsafe of the container
1463	SetKnownExitCode sets exit code field in container struct
1464	GetKnownExitCode returns the container exit code
1465	SetRegistryAuthCredentials sets the credentials for pulling image from ECR
1466	ShouldPullWithExecutionRole returns whether this container has its own ECR credentials
1467	GetSteadyStateStatus returns the steady state status for the container . If Container . steadyState is not initialized the default steady state status defined by defaultContainerSteadyStateStatus is returned . The pause container s steady state differs from that of other containers as the pause container can reach its teady state once networking resources have been provisioned for it which is done in the ContainerResourcesProvisioned state
1468	IsKnownSteadyState returns true if the KnownState of the container equals the steadyState defined for the container
1469	IsMetadataFileUpdated returns true if the metadata file has been once the metadata file is ready and will no longer change
1470	SetMetadataFileUpdated sets the container s MetadataFileUpdated status to true
1471	IsEssential returns whether the container is an essential container or not
1472	SetCreatedAt sets the timestamp for container s creation time
1473	SetStartedAt sets the timestamp for container s start time
1474	SetFinishedAt sets the timestamp for container s stopped time
1475	GetCreatedAt sets the timestamp for container s creation time
1476	GetStartedAt sets the timestamp for container s start time
1477	GetFinishedAt sets the timestamp for container s stopped time
1478	SetLabels sets the labels for a container
1479	GetLabels gets the labels for a container
1480	SetKnownPortBindings sets the ports for a container
1481	GetKnownPortBindings gets the ports for a container
1482	SetVolumes sets the volumes mounted in a container
1483	GetVolumes returns the volumes mounted in a container
1484	SetNetworkSettings sets the networks field in a container
1485	GetNetworkSettings returns the networks field in a container
1486	SetNetworkMode sets the network mode of the container
1487	GetNetworkMode returns the network mode of the container
1488	SetHealthStatus sets the container health status
1489	GetHealthStatus returns the container health information
1490	BuildContainerDependency adds a new dependency container and satisfied status to the dependent container
1491	updateAppliedStatusUnsafe updates the container transitioning status
1492	SetAppliedStatus sets the applied status of container and returns whether the container is already in a transition
1493	GetAppliedStatus returns the transitioning status of container
1494	ShouldPullWithASMAuth returns true if this container needs to retrieve private registry authentication data from ASM
1495	SetASMDockerAuthConfig add the docker auth config data to the RegistryAuthentication struct held by the container this is then passed down to the docker client to pull the image
1496	SetV3EndpointID sets the v3 endpoint id of container
1497	GetV3EndpointID returns the v3 endpoint id of container
1498	InjectV3MetadataEndpoint injects the v3 metadata endpoint as an environment variable for a container
1499	ShouldCreateWithSSMSecret returns true if this container needs to get secret value from SSM Parameter Store
1500	ShouldCreateWithASMSecret returns true if this container needs to get secret value from AWS Secrets Manager
1501	getMetadataFilePath gives the metadata file path for any agent - managed container
1502	getTaskMetadataDir acquires the directory with all of the metadata files of a given task
1503	MarshalJSON is used to serialize the type to json per the Marshaller interface
1504	UnmarshalJSON is used to deserialize json types into Conditional per the Unmarshaller interface
1505	NewASMSecretResource creates a new ASMSecretResource object
1506	It spins up multiple goroutines in order to retrieve values in parallel .
1507	retrieveASMSecretValue reads secret value from cache first if not exists call GetSecretFromASM to retrieve value AWS secrets Manager
1508	getRequiredSecrets returns the requiredSecrets field of asmsecret task resource
1509	clearASMSecretValue cycles through the collection of secret value data and removes them from the task
1510	MarshalJSON serialises the ASMSecretResource struct to JSON
1511	UnmarshalJSON deserialises the raw JSON to a ASMSecretResource struct
1512	Create creates a new cgroup based off the spec post validation
1513	Remove is used to delete the cgroup
1514	Exists is used to verify the existence of a cgroup
1515	validateCgroupSpec checks the cgroup spec for valid path and specifications
1516	When pulling an image the docker api will pull and then subsequently unzip the downloaded artifacts . Docker does not separate the pull from the unpack step . What this means is that this timeout doesn t tick while unpacking the downloaded files . This only causes noticeable impact with large files but we should investigate improving this .
1517	NewImageManager returns a new ImageManager
1518	RecordContainerReference adds container reference to the corresponding imageState object
1519	RemoveContainerReferenceFromImageState removes container reference from the corresponding imageState object
1520	getImageState returns the ImageState object that the container is referenced at
1521	removeImageState removes the imageState from the list of imageState objects in ImageManager
1522	Merge merges two config files preferring the ones on the left . Any nil or zero values present in the left that are not present in the right will be overridden
1523	NewConfig returns a config struct created by merging environment variables a config file and EC2 Metadata info . The config struct it returns can be used even if an error is returned . An error is returned however if the config is incomplete in some way that is considered fatal .
1524	trimWhitespace trims whitespace from all string cfg values with the trim tag
1525	validateAndOverrideBounds performs validation over members of the Config struct and check the value against the minimum required value .
1526	NewTaskStatsResponse returns a new task stats response object
1527	NewSession creates a new Session object
1528	startSessionOnce creates a session with ACS and handles requests using the passed in arguments
1529	startACSSession starts a session with ACS . It adds request handlers for various kinds of messages expected from ACS . It returns on server disconnection or when the context is cancelled
1530	waitForDuration waits for the specified duration of time . If the wait is interrupted it returns a false value . Else it returns true indicating completion of wait time .
1531	createACSClient creates the ACS Client using the specified URL
1532	acsWsURL returns the websocket url for ACS given the endpoint
1533	newDisconnectionTimer creates a new time object with a callback to disconnect from ACS on inactivity
1534	anyMessageHandler handles any server message . Any server message means the connection is active and thus the heartbeat disconnect should not occur
1535	validateIPRules validates IP rules created in the container network namespace .
1536	WriteJSONToResponse writes the header JSON response to a ResponseWriter and log the error if necessary .
1537	ValueFromRequest returns the value of a field in the http request . The boolean value is set to true if the field exists in the query .
1538	GetMuxValueFromRequest extracts the mux value from the request using a gorilla mux name
1539	LimitReachedHandler logs the throttled request in the credentials audit log
1540	UnmarshalJSON decodes the TransitionDependencySet tag in the JSON encoded string into the TransitionDependenciesMap object
1541	Add adds the given delta to the waitgroup at the given sequence
1542	Done decrements the waitgroup at the given sequence by one
1543	NewMockCgroup creates a new mock instance
1544	Add mocks base method
1545	Add indicates an expected call of Add
1546	Delete indicates an expected call of Delete
1547	MoveTo mocks base method
1548	OOMEventFD mocks base method
1549	Processes mocks base method
1550	Stat mocks base method
1551	Subsystems mocks base method
1552	TaskStatsHandler returns the handler method for handling task stats requests .
1553	GetKnownAPIVersions returns all of the API versions that we know about . It doesn t care if the version is supported by Docker or ECS agent
1554	NewMockUdev creates a new mock instance
1555	Monitor mocks base method
1556	Monitor indicates an expected call of Monitor
1557	SetInferenceDevices sets the InferenceDevices field s value .
1558	SetDeviceName sets the DeviceName field s value .
1559	SetDeviceType sets the DeviceType field s value .
1560	DefaultConfig returns the default configuration for Linux
1561	platformString returns platform - specific config data that can be serialized to string for debugging
1562	MapTaskToContainerStatus maps the task status to the corresponding container status
1563	Error returns the error string for MultiErr
1564	NewMultiError creates a new MultErr object
1565	GetPullCredentials returns the pull credentials in the auth
1566	SetPullCredentials sets the credentials to pull from ECR in the auth
1567	GetDockerAuthConfig returns the pull credentials in the auth
1568	SetDockerAuthConfig sets the credentials to pull from ECR in the auth
1569	NewMockSecretsManagerAPI creates a new mock instance
1570	CancelRotateSecret mocks base method
1571	CancelRotateSecret indicates an expected call of CancelRotateSecret
1572	CancelRotateSecretRequest mocks base method
1573	CancelRotateSecretWithContext mocks base method
1574	CreateSecret mocks base method
1575	CreateSecretRequest mocks base method
1576	CreateSecretWithContext mocks base method
1577	DeleteResourcePolicy mocks base method
1578	DeleteResourcePolicyRequest mocks base method
1579	DeleteResourcePolicyWithContext mocks base method
1580	DeleteSecret mocks base method
1581	DeleteSecretRequest mocks base method
1582	DeleteSecretWithContext mocks base method
1583	DescribeSecret mocks base method
1584	DescribeSecretRequest mocks base method
1585	DescribeSecretWithContext mocks base method
1586	GetRandomPassword mocks base method
1587	GetRandomPasswordRequest mocks base method
1588	GetRandomPasswordWithContext mocks base method
1589	GetResourcePolicy mocks base method
1590	GetResourcePolicyRequest mocks base method
1591	GetResourcePolicyWithContext mocks base method
1592	GetSecretValue mocks base method
1593	GetSecretValueRequest mocks base method
1594	GetSecretValueWithContext mocks base method
1595	ListSecretVersionIds mocks base method
1596	ListSecretVersionIdsPages mocks base method
1597	ListSecretVersionIdsPagesWithContext mocks base method
1598	ListSecretVersionIdsRequest mocks base method
1599	ListSecrets mocks base method
1600	ListSecretsPages mocks base method
1601	ListSecretsRequest mocks base method
1602	ListSecretsWithContext mocks base method
1603	PutResourcePolicy mocks base method
1604	PutResourcePolicyRequest mocks base method
1605	PutResourcePolicyWithContext mocks base method
1606	PutSecretValue mocks base method
1607	PutSecretValueRequest mocks base method
1608	PutSecretValueWithContext mocks base method
1609	RestoreSecret mocks base method
1610	RestoreSecretRequest mocks base method
1611	RestoreSecretWithContext mocks base method
1612	RotateSecret mocks base method
1613	RotateSecretRequest mocks base method
1614	RotateSecretWithContext mocks base method
1615	TagResource mocks base method
1616	TagResourceRequest mocks base method
1617	UntagResource mocks base method
1618	UntagResourceRequest mocks base method
1619	UntagResourceWithContext mocks base method
1620	UpdateSecret mocks base method
1621	UpdateSecretRequest mocks base method
1622	UpdateSecretVersionStage mocks base method
1623	UpdateSecretVersionStageRequest mocks base method
1624	UpdateSecretVersionStageWithContext mocks base method
1625	UpdateSecretVersionStageWithContext indicates an expected call of UpdateSecretVersionStageWithContext
1626	UpdateSecretWithContext mocks base method
1627	createBindsEnv will do the appropriate formatting to add a new mount in a container s HostConfig and add the metadata file path as an environment variable ECS_CONTAINER_METADATA_FILE We add an additional uuid to the path to ensure it does not conflict with user mounts
1628	parseMetadataAtContainerCreate gathers metadata from task and cluster configurations then packages it for JSON Marshaling . We use this version to get data available prior to container creation Since we accept incomplete metadata fields we should not return errors here and handle them at this or the above stage .
1629	parseMetadata gathers metadata from a docker container and task configuration and data then packages it for JSON Marshaling Since we accept incomplete metadata fields we should not return errors here and handle them at this or the above stage .
1630	parseDockerContainerMetadata parses the metadata in a docker container and packages this data for JSON marshaling Since we accept incomplete metadata fields we should not return errors here and handle them at this stage .
1631	parseNetworkMetadata parses the docker . NetworkSettings struct and packages the desired metadata for JSON marshaling Since we accept incomplete metadata fields we should not return errors here and handle them at this stage .
1632	Initialize sets the fields of Nvidia GPU Manager struct
1633	SetGPUIDs sets the GPUIDs
1634	SetDriverVersion is a setter for nvidia driver version
1635	GetDriverVersion is a getter for nvidia driver version
1636	GetDevices returns the GPU devices as PlatformDevices
1637	NewMockLicenseProvider creates a new mock instance
1638	GetText mocks base method
1639	GetText indicates an expected call of GetText
1640	NewMockBackoff creates a new mock instance
1641	Duration mocks base method
1642	Duration indicates an expected call of Duration
1643	Allows unmarshaling from byte to MetadataStatus text form
1644	After sleeps for the given duration and then writes to to the returned channel
1645	AfterFunc waits for the duration to elapse and then calls f in its own goroutine . It returns a Timer that can be used to cancel the call using its Stop method .
1646	Since returns the time different from Now and the given time t
1647	NewMockTaskResource creates a new mock instance
1648	ApplyTransition mocks base method
1649	Cleanup mocks base method
1650	GetCreatedAt mocks base method
1651	GetTerminalReason mocks base method
1652	Initialize indicates an expected call of Initialize
1653	KnownCreated mocks base method
1654	MarshalJSON indicates an expected call of MarshalJSON
1655	NextKnownState mocks base method
1656	SetAppliedStatus mocks base method
1657	SetAppliedStatus indicates an expected call of SetAppliedStatus
1658	SetCreatedAt mocks base method
1659	SetDesiredStatus mocks base method
1660	SetKnownStatus mocks base method
1661	StatusString mocks base method
1662	NewMockLoader creates a new mock instance
1663	LoadImage indicates an expected call of LoadImage
1664	Error returns an error string for the ContainerNotFound error
1665	String returns a human readable string of the container change event
1666	UnmarshalJSON for TaskVolume determines the name and volume type and unmarshals it into the appropriate HostVolume fulfilling interfaces
1667	MarshalJSON overrides the logic for JSON - encoding a TaskVolume object
1668	SSM Client will automatically retry 3 times when has throttling error
1669	GetClient will replace some versions of Docker on Windows . We need this because agent assumes that it can always call older versions of the docker API .
1670	getWindowsReplaceableVersions returns the set of versions that agent will report as Docker 1 . 24
1671	getWindowsSupportedVersions returns the set of remote api versions that are supported by agent in windows
1672	PortBindingFromDockerPortBinding constructs a PortBinding slice from a docker NetworkSettings . Ports map .
1673	NewASMAuthResource creates a new ASMAuthResource object
1674	Create fetches credentials from ASM
1675	GetRequiredASMResources returns the list of ASMAuthData that has to be retrieved from AWS Secrets Manager
1676	GetExecutionCredentialsID returns the execution role s credential ID
1677	clearASMDockerAuthConfig cycles through the collection of docker private registry auth data and removes them from the task
1678	GetASMDockerAuthConfig retrieves the docker private registry auth data from the task
1679	MarshalJSON serialises the ASMAuthResource struct to JSON
1680	UnmarshalJSON deserialises the raw JSON to a ASMAuthResource struct
1681	ContainerMetadataHandler returns the handler method for handling container metadata requests .
1682	GetContainerResponse gets container response for v3 metadata
1683	GetContainerNetworkMetadata returns the network metadata for the container
1684	Initialize fills the resource fileds
1685	StartDefaultTerminationHandler defines a default termination handler suitable for running in a process
1686	FinalSave should be called immediately before exiting and only before exiting in order to flush tasks to disk . It waits a short timeout for state to settle if necessary . If unable to reach a steady - state and save within this short timeout it returns an error
1687	String formats the cachKey as a string
1688	NewECRAuthProvider returns a DockerAuthProvider that can handle retrieve credentials for pulling from Amazon EC2 Container Registry
1689	getAuthconfigFromCache retrieves the token from cache
1690	getAuthConfigFromECR calls the ECR API to get docker auth config
1691	IsTokenValid checks the token is still within it s expiration window . We early expire to allow for timing in calls and add jitter to avoid refreshing all of the tokens at once .
1692	createTaskResponse creates JSON response and sets the http status code for the task queried .
1693	NewTaskStateChangeEvent creates a new task state change event
1694	NewContainerStateChangeEvent creates a new container state change event
1695	SetTaskTimestamps adds the timestamp information of task into the event to be sent by SubmitTaskStateChange
1696	ShouldBeReported checks if the statechange should be reported to backend
1697	GetIPV4Addresses returns a list of ipv4 addresses allocated to the ENI
1698	GetIPV6Addresses returns a list of ipv6 addresses allocated to the ENI
1699	String returns a human readable version of the ENI object
1700	ENIFromACS validates the information from acs message and create the ENI object
1701	ValidateTaskENI validates the eni informaiton sent from acs
1702	NewMockPlugins creates a new mock instance
1703	Scan mocks base method
1704	Scan indicates an expected call of Scan
1705	TaskFromACS translates ecsacs . Task to apitask . Task by first marshaling the received ecsacs . Task to json and unmarshaling it as apitask . Task
1706	initializeDockerVolumes checks the volume resource in the task to determine if the agent should create the volume before creating the container
1707	addTaskScopedVolumes adds the task scoped volume into task resources and updates container dependency
1708	updateContainerVolumeDependency adds the volume resource to container dependency
1709	initializeCredentialsEndpoint sets the credentials endpoint for all containers in a task if needed .
1710	initializeContainersV3MetadataEndpoint generates an v3 endpoint id for each container constructs the v3 metadata endpoint and injects it as an environment variable
1711	requiresASMDockerAuthData returns true if atleast one container in the task needs to retrieve private registry authentication data from ASM
1712	initializeASMAuthResource builds the resource dependency map for the ASM auth resource
1713	requiresSSMSecret returns true if at least one container in the task needs to retrieve secret from SSM parameter
1714	initializeSSMSecretResource builds the resource dependency map for the SSM ssmsecret resource
1715	getAllSSMSecretRequirements stores all secrets in a map whose key is region and value is all secrets in that region
1716	requiresASMSecret returns true if at least one container in the task needs to retrieve secret from AWS Secrets Manager
1717	initializeASMSecretResource builds the resource dependency map for the asmsecret resource
1718	getAllASMSecretRequirements stores secrets in a task in a map
1719	BuildCNIConfig constructs the cni configuration from eni
1720	convertENIToCNIConfig converts input eni config into cni config
1721	convertAppMeshToCNIConfig converts input app mesh config into cni config
1722	HostVolumeByName returns the task Volume for the given a volume name in that task . The second return value indicates the presence of that volume
1723	UpdateMountPoints updates the mount points of volumes that were created without specifying a host path . This is used as part of the empty host volume feature .
1724	DockerConfig converts the given container in this task to the format of the Docker SDK Config struct
1725	DockerHostConfig construct the configuration recognized by docker
1726	ApplyExecutionRoleLogsAuth will check whether the task has execution role credentials and add the genereated credentials endpoint to the associated HostConfig
1727	shouldOverrideNetworkMode returns true if the network mode of the container needs to be overridden . It also returns the override string in this case . It returns false otherwise
1728	applyENIHostname adds the hostname provided by the ENI message to the container s docker config . At the time of implmentation we are only using it to configure the pause container for awsvpc tasks
1729	shouldOverridePIDMode returns true if the PIDMode of the container needs to be overridden . It also returns the override string in this case . It returns false otherwise
1730	shouldOverrideIPCMode returns true if the IPCMode of the container needs to be overridden . It also returns the override string in this case . It returns false otherwise
1731	UpdateStatus updates a task s known and desired statuses to be compatible with all of its containers It will return a bool indicating if there was a change
1732	UpdateDesiredStatus sets the known status of the task
1733	SetKnownStatus sets the known status of the task
1734	GetKnownStatus gets the KnownStatus of the task
1735	GetKnownStatusTime gets the KnownStatusTime of the task
1736	SetCredentialsID sets the credentials ID for the task
1737	GetCredentialsID gets the credentials ID for the task
1738	SetExecutionRoleCredentialsID sets the ID for the task execution role credentials
1739	GetExecutionCredentialsID gets the credentials ID for the task
1740	GetDesiredStatus gets the desired status of the task
1741	SetDesiredStatus sets the desired status of the task
1742	GetSentStatus safely returns the SentStatus of the task
1743	SetSentStatus safely sets the SentStatus of the task
1744	SetTaskENI sets the eni information of the task
1745	GetTaskENI returns the eni of task for now task can only have one enis
1746	SetAppMesh sets the app mesh config of the task
1747	GetAppMesh returns the app mesh config of the task
1748	GetStopSequenceNumber returns the stop sequence number of a task
1749	SetStopSequenceNumber sets the stop seqence number of a task
1750	SetPullStartedAt sets the task pullstartedat timestamp and returns whether this field was updated or not
1751	GetPullStartedAt returns the PullStartedAt timestamp
1752	SetPullStoppedAt sets the task pullstoppedat timestamp
1753	GetPullStoppedAt returns the PullStoppedAt timestamp
1754	SetExecutionStoppedAt sets the ExecutionStoppedAt timestamp of the task
1755	GetExecutionStoppedAt returns the task executionStoppedAt timestamp
1756	stringUnsafe returns a human readable string representation of this object
1757	RecordExecutionStoppedAt checks if this is an essential container stopped and set the task executionStoppedAt timestamps
1758	GetResources returns the list of task resources from ResourcesMap
1759	getResourcesUnsafe returns the list of task resources from ResourcesMap
1760	AddResource adds a resource to ResourcesMap
1761	SetTerminalReason sets the terminalReason string and this can only be set once per the task s lifecycle . This field does not accept updates .
1762	GetTerminalReason retrieves the terminalReason string
1763	PopulateASMAuthData sets docker auth credentials for a container
1764	getSSMSecretsResource retrieves ssmsecret resource from resource map
1765	PopulateSecrets appends secrets to container s env var map and hostconfig section
1766	getASMSecretsResource retrieves asmsecret resource from resource map
1767	Retrieves a Task s PIDMode
1768	Retrieves a Task s IPCMode
1769	AssociationByTypeAndContainer gets a list of names of all the associations associated with a container and of a certain type
1770	AssociationByTypeAndName gets an association of a certain type and name
1771	newAttachENIHandler returns an instance of the attachENIHandler struct
1772	handlerFunc returns a function to enqueue requests onto attachENIHandler buffer
1773	handleMessages handles each message one at a time
1774	handleSingleMessage acks the message received
1775	addENIAttachmentToState adds the eni info to the state
1776	validateAttachTaskNetworkInterfacesMessage performs validation checks on the AttachTaskNetworkInterfacesMessage
1777	ForceSave mocks base method
1778	ForceSave indicates an expected call of ForceSave
1779	NewMockClientServer creates a new mock instance
1780	AddRequestHandler mocks base method
1781	AddRequestHandler indicates an expected call of AddRequestHandler
1782	Connect indicates an expected call of Connect
1783	Disconnect mocks base method
1784	IsConnected mocks base method
1785	MakeRequest mocks base method
1786	SetAnyRequestHandler mocks base method
1787	SetConnection mocks base method
1788	SetReadDeadline mocks base method
1789	ShouldReportToBackend returns true if the container status is recognized as a valid state by ECS . Note that not all container statuses are recognized by ECS or map to ECS states
1790	BackendStatus maps the internal container status in the agent to that in the backend
1791	UnmarshalJSON overrides the logic for parsing the JSON - encoded ContainerStatus data
1792	MarshalJSON overrides the logic for JSON - encoding the ContainerStatus type
1793	UnmarshalJSON overrides the logic for parsing the JSON - encoded container health data
1794	MarshalJSON overrides the logic for JSON - encoding the ContainerHealthStatus type
1795	Function that exposes all Agent Metrics on a given port .
1796	NewMockDockerClient creates a new mock instance
1797	APIVersion mocks base method
1798	ContainerEvents mocks base method
1799	ContainerEvents indicates an expected call of ContainerEvents
1800	CreateContainer mocks base method
1801	CreateVolume mocks base method
1802	DescribeContainer mocks base method
1803	InspectContainer mocks base method
1804	InspectImage mocks base method
1805	KnownVersions mocks base method
1806	KnownVersions indicates an expected call of KnownVersions
1807	ListContainers mocks base method
1808	ListImages mocks base method
1809	ListPlugins mocks base method
1810	ListPluginsWithFilters mocks base method
1811	PullImage mocks base method
1812	RemoveImage mocks base method
1813	StopContainer mocks base method
1814	WithVersion mocks base method
1815	NewMockCache creates a new mock instance
1816	Delete mocks base method
1817	Get mocks base method
1818	Set mocks base method
1819	Set indicates an expected call of Set
1820	newManagedTask is a method on DockerTaskEngine to create a new managedTask . This method must only be called when the engine . processTasks write lock is already held .
1821	overseeTask is the main goroutine of the managedTask . It runs an infinite loop of receiving messages and attempting to take action based on those messages .
1822	emitCurrentStatus emits a container event for every container and a task event for the task
1823	waitForHostResources waits for host resources to become available to start the task . This involves waiting for previous stops to complete so the resources become free .
1824	waitSteady waits for a task to leave steady - state by waiting for a new event or a timeout .
1825	steadyState returns if the task is in a steady state . Steady state is when task s desired and known status are both RUNNING
1826	cleanupCredentials removes credentials for a stopped task
1827	waitEvent waits for any event to occur . If an event occurs the appropriate handler is called . Generally the stopWaiting arg is the context s Done channel . When the Done channel is signalled by the context waitEvent will return true .
1828	handleResourceStateChange attempts to update resource s known status depending on the current status and errors during transition
1829	emitContainerEvent passes a given event up through the containerEvents channel if necessary . It will omit events the backend would not process and will perform best - effort deduplication of events .
1830	releaseIPInIPAM releases the ip used by the task for awsvpc
1831	handleStoppedToRunningContainerTransition detects a backwards container transition where a known - stopped container is found to be running again and handles it .
1832	handleEventError handles a container change event error and decides whether we should proceed to transition the container
1833	handleContainerStoppedTransitionError handles an error when transitioning a container to STOPPED . It returns a boolean indicating whether the tak can continue with updating its state
1834	progressTask tries to step forwards all containers and resources that are able to be transitioned in the task s current state . It will continue listening to events from all channels while it does so but none of those changes will be acted upon until this set of requests to docker completes . Container changes may also prompt the task status to change as well .
1835	isWaitingForACSExecutionCredentials checks if the container that can t be transitioned was caused by waiting for credentials and start waiting
1836	startContainerTransitions steps through each container in the task and calls the passed transition function when a transition should occur .
1837	startResourceTransitions steps through each resource in the task and calls the passed transition function when a transition should occur
1838	transitionResource calls applyResourceState and then notifies the managed task of the change . transitionResource is called by progressTask
1839	applyResourceState moves the resource to the given state by calling the function defined in the transitionFunctionMap for the state
1840	waitForStopReported will wait for the task to be reported stopped and return true or will time - out and return false . Messages on the mtask . dockerMessages and mtask . acsMessages channels will be handled while this function is waiting .
1841	NewFactory initializes a client factory using a specified endpoint .
1842	FindClientAPIVersion returns the version of the client from the map
1843	getClient returns a client specified by the docker version . It s wrapped by GetClient so that it can do platform - specific magic .
1844	findDockerVersions loops over all known API versions and finds which ones are supported by the docker daemon on the host
1845	runAgent runs the ECS agent inside a goroutine and waits to be told to exit .
1846	sleepCtx provides a cancelable sleep
1847	TaskMetadataHandler returns the handler method for handling task metadata requests .
1848	Subscribe adds the handler to be called into EventStream
1849	broadcast calls all handler s handler function
1850	Unsubscribe deletes the handler from the EventStream
1851	WriteToEventStream writes event to the event stream
1852	listen listens to the event channel
1853	StartListening mark the event stream as open and start listening
1854	SetLevel sets the log level for logging
1855	ForModule returns an OldLogger instance . OldLogger is deprecated and kept for compatibility reasons . Prefer using Seelog directly .
1856	NewMockWebsocketConn creates a new mock instance
1857	ReadMessage mocks base method
1858	SetWriteDeadline indicates an expected call of SetWriteDeadline
1859	Get indicates an expected call of Get
1860	NewSSMSecretResource creates a new SSMSecretResource object
1861	Create fetches secret value from SSM in batches . It spins up multiple goroutines in order to retrieve values in parallel .
1862	getGoRoutineMaxNum calculates the maximum number of goroutines that we need to spin up to retrieve secret values from SSM parameter store . Assume each goroutine initiates one SSM GetParameters call and each call will have 10 parameters
1863	retrieveSSMSecretValuesByRegion reads secret values from cache first if not exists batches secrets based on field valueFrom and call retrieveSSMSecretValues to retrieve values from SSM
1864	retrieveSSMSecretValues retrieves secret values from SSM parameter store and caches them into memory
1865	clearSSMSecretValue cycles through the collection of secret value data and removes them from the task
1866	GetCachedSecretValue retrieves the secret value from secretData field
1867	SetCachedSecretValue set the secret value in the secretData field given the key and value
1868	Clean mocks base method
1869	SetAvailabilityZone mocks base method
1870	SetContainerInstanceARN mocks base method
1871	SetHostPublicIPv4Address mocks base method
1872	NewMockDockerMetadataClient creates a new mock instance
1873	InspectContainer indicates an expected call of InspectContainer
1874	JsonKeys takes an arbitrary byte array representing a json stringified object and returns all the keys of that object .
1875	TaskContainerMetadataHandler returns the handler method for handling task and container metadata requests .
1876	WriteContainerMetadataResponse writes the container metadata to response writer .
1877	WriteTaskMetadataResponse writes the task metadata to response writer .
1878	Init is used to setup the cgroup root for ecs
1879	Error returns an error string
1880	Retry returns true if this error should be considered retriable
1881	NewMockDockerStateResolver creates a new mock instance
1882	State indicates an expected call of State
1883	printLicense prints the Agent s license text
1884	Load is used to load the cgroup hierarchy based off the cgroup path
1885	New is used to create a new cgroup hierarchy
1886	timeoutAndMoveOn executes the long running function pointed to by fp and times out after timeout duration .
1887	UnmarshalJSON restores a previously marshaled task - engine state from json
1888	Init initializes a DockerTaskEngine such that it may communicate with docker and operate normally . This function must be called before any other function except serializing and deserializing can succeed without error .
1889	MustInit blocks and retries until an engine can be initialized .
1890	isTaskManaged checks if task for the corresponding arn is present
1891	synchronizeState explicitly goes through each docker container stored in state and updates its KnownStatus appropriately as well as queueing up events to push upstream .
1892	filterTasksToStartUnsafe filters only the tasks that need to be started after the agent has been restarted . It also synchronizes states of all of the containers in tasks that need to be started .
1893	updateContainerMetadata sets the container metadata from the docker inspect
1894	synchronizeContainerStatus checks and updates the container status with docker
1895	checkTaskState inspects the state of all containers within a task and writes their state to the managed task s container channel .
1896	sweepTask deletes all the containers associated with a task
1897	startTask creates a managedTask construct to track the task and then begins pushing it towards its desired state when allowed startTask is protected by the tasksLock lock of AddTask . It should not be called from anywhere else and should exit quickly to allow AddTask to do more work .
1898	openEventstream opens but does not consume the docker event stream
1899	handleDockerEvents must be called after openEventstream ; it processes each event that it reads from the docker eventstream
1900	handleDockerEvent is the entrypoint for task modifications originating with events occurring through Docker outside the task engine itself . handleDockerEvent is responsible for taking an event that correlates to a container and placing it in the context of the task to which that container belongs .
1901	AddTask starts tracking a task
1902	ListTasks returns the tasks currently managed by the DockerTaskEngine
1903	GetTaskByArn returns the task identified by that ARN
1904	imagePullRequired returns true if pulling image is required or return false if local image cache should be used by inspecting the agent pull behavior variable defined in config . The caller has to make sure the container passed in is not an internal container .
1905	cleanupPauseContainerNetwork will clean up the network namespace of pause container
1906	updateTaskUnsafe determines if a new transition needs to be applied to the referenced task and if needed applies it . It should not be called anywhere but from AddTask and is protected by the tasksLock lock there .
1907	transitionContainer calls applyContainerState and then notifies the managed task of the change . transitionContainer is called by progressTask and by handleStoppedToRunningContainerTransition .
1908	applyContainerState moves the container to the given state by calling the function defined in the transitionFunctionMap for the state
1909	Version returns the underlying docker version .
1910	NewMockSSMClient creates a new mock instance
1911	GetParameters mocks base method
1912	GetParameters indicates an expected call of GetParameters
1913	NewMockFactory creates a new mock instance
1914	FindClientAPIVersion mocks base method
1915	FindKnownAPIVersions mocks base method
1916	GetDefaultClient mocks base method
1917	NewMockFileSystem creates a new mock instance
1918	Copy mocks base method
1919	Exit mocks base method
1920	MkdirAll mocks base method
1921	Open mocks base method
1922	ReadAll mocks base method
1923	Remove mocks base method
1924	Rename mocks base method
1925	TeeReader mocks base method
1926	initializeTaskENIDependencies initializes all of the dependencies required by the Agent to support the awsvpc networking mode . A non nil error is returned if an error is encountered during this process . An additional boolean flag to indicate if this error is considered terminal is also returned
1927	setVPCSubnet sets the vpc and subnet ids for the agent by querying the instance metadata service
1928	startUdevWatcher starts the udev monitor and the watcher for receiving notifications from the monitor
1929	This function increments the call count for a specific API call This is invoked at the API call s start whereas the duration metrics are updated at the API call s end .
1930	NewMockTaskEngineState creates a new mock instance
1931	AddContainer mocks base method
1932	AddENIAttachment mocks base method
1933	AddImageState mocks base method
1934	AddTaskIPAddress mocks base method
1935	AllImageStates mocks base method
1936	AllImageStates indicates an expected call of AllImageStates
1937	AllTasks mocks base method
1938	ContainerByID mocks base method
1939	ENIByMac mocks base method
1940	GetAllContainerIDs mocks base method
1941	RemoveENIAttachment mocks base method
1942	RemoveImageState mocks base method
1943	RemoveTask mocks base method
1944	RemoveTask indicates an expected call of RemoveTask
1945	TaskARNByV3EndpointID mocks base method
1946	TaskByArn mocks base method
1947	UnmarshalJSON mocks base method
1948	String converts the container type enum to a string
1949	UnmarshalJSON decodes the container type field in the JSON encoded string into the ContainerType object
1950	MarshalJSON overrides the logic for JSON - encoding a ContainerType object
1951	parseNanoTime returns the time object from a string formatted with RFC3339Nano layout .
1952	NewMockResponseWriter creates a new mock instance
1953	Header mocks base method
1954	Header indicates an expected call of Header
1955	WriteHeader mocks base method
1956	WriteHeader indicates an expected call of WriteHeader
1957	compareDockerVersions compares two docker api versions lhs and rhs and returns - 1 if lhs is less than rhs 0 if they are equal and 1 if lhs is greater than rhs
1958	SignHTTPRequest signs an http . Request struct with authv4 using the given region service and credentials .
1959	GetClient on linux will simply return the cached client from the map
1960	getAgentVersions returns a list of supported agent - supported versions for linux
1961	duplicate of dockerCPUShares in task_linux . go
1962	verifyTasksMetadata verifies the number of tasks in tasks metadata .
1963	verifyTaskMetadata verifies the number of containers in task metadata make sure each necessary field is not empty we cannot check the values of those fields since they are dynamic . It also verifies the container metadata .
1964	verifyContainerMetadata verifies the container name of the container metadata and each necessary field is not empty .
1965	NewMockResult creates a new mock instance
1966	GetAsVersion mocks base method
1967	GetAsVersion indicates an expected call of GetAsVersion
1968	Print mocks base method
1969	Print indicates an expected call of Print
1970	ContainerCreate mocks base method
1971	ContainerInspect mocks base method
1972	ContainerList mocks base method
1973	ContainerRemove mocks base method
1974	ContainerStart mocks base method
1975	ContainerStats mocks base method
1976	ContainerStop mocks base method
1977	Events mocks base method
1978	ImageImport mocks base method
1979	ImageInspectWithRaw mocks base method
1980	ImageList mocks base method
1981	ImageLoad mocks base method
1982	ImagePull mocks base method
1983	ImageRemove mocks base method
1984	Ping mocks base method
1985	PluginList mocks base method
1986	VolumeCreate mocks base method
1987	VolumeInspect mocks base method
1988	VolumeRemove mocks base method
1989	ResolveTask resolves the api task object given container id .
1990	ResolveContainer resolves the api container object given container id .
1991	synchronizeState goes through all the containers on the instance to synchronize the state on agent start
1992	addAndStartStatsContainer add the container into stats engine and start collecting the container stats
1993	MustInit initializes fields of the DockerStatsEngine object .
1994	waitToStop waits for the container change event stream close ans stop collection metrics
1995	removeAll stops the periodic usage data collection for all containers
1996	addContainerUnsafe adds a container to the map of containers being watched .
1997	addToStatsContainerMapUnsafe adds the statscontainer into stats for tracking and returns a boolean indicates whether this container should be tracked for collecting metrics
1998	GetInstanceMetrics gets all task metrics and instance metadata from stats engine .
1999	GetTaskHealthMetrics returns the container health metrics
2000	stopTrackingContainerUnsafe removes the StatsContainer from stats engine and returns true if the container is stopped or no longer tracked in agent . Otherwise it does nothing and return false
2001	handleDockerEvents must be called after openEventstream ; it processes each event that it reads from the docker event stream .
2002	removeContainer deletes the container from the map of containers being watched . It also stops the periodic usage data collection for the container .
2003	newDockerContainerMetadataResolver returns a new instance of DockerContainerMetadataResolver .
2004	taskContainerMetricsUnsafe gets all container metrics for a task arn .
2005	resetStatsUnsafe resets stats for all watched containers .
2006	ContainerDockerStats returns the last stored raw docker stats object for a container
2007	newMetricsMetadata creates the singleton metadata object .
2008	compareSemver compares two semvers lhs and rhs and returns - 1 if lhs is less than rhs 0 if they are equal and 1 lhs is greater than rhs
2009	ExtractVersion extracts a matching version from the version number string
2010	GetIAMRoleCredentials returns the IAM role credentials in the task IAM role struct
2011	GenerateCredentialsEndpointRelativeURI generates the relative URI for the credentials endpoint for a given task id .
2012	IAMRoleCredentialsFromACS translates ecsacs . IAMRoleCredentials object to api . IAMRoleCredentials
2013	SetTaskCredentials adds or updates credentials in the credentials manager
2014	GetTaskCredentials retrieves credentials for a given credentials id
2015	RemoveCredentials removes credentials from the credentials manager
2016	verify all the field names in the response are what we expected . this is needed because a direct unmarshal is not case sensitive so can t ensure that the response is in valid format
2017	Getpid mocks base method
2018	Getpid indicates an expected call of Getpid
2019	AppMeshFromACS validates proxy config if it is app mesh type and creates AppMesh object
2020	buildAppPorts creates app ports from proxy config
2021	buildEgressIgnoredIPs creates egress ignored IPs from proxy config
2022	buildEgressIgnoredPorts creates egress ignored ports from proxy config
2023	appendDefaultEgressIgnoredIPs append task metadata endpoint ip and instance metadata ip address to egress ignored IPs if does not exist
2024	IsInstanceTypeChangedError returns true if the error when registering the container instance is because of instance type being changed
2025	NewNamedError creates a NamedError .
2026	Error returns the error as a string
2027	BuildLinuxResourceSpec returns a linuxResources object for the task cgroup
2028	buildExplicitLinuxCPUSpec builds CPU spec when task CPU limits are explicitly requested
2029	buildImplicitLinuxCPUSpec builds the implicit task CPU spec when task CPU and memory limit feature is enabled
2030	buildLinuxMemorySpec validates and builds the task memory spec
2031	platformHostConfigOverride to override platform specific feature sets
2032	overrideCgroupParent updates hostconfig with cgroup parent when task cgroups are enabled
2033	GetMACAddress retrieves the MAC address of a device using netlink
2034	retrieve retrives the mac address of a network device . If the retrieved mac address is empty it retries the operation with a timeout specified by the caller
2035	retrieveOnce retrieves the MAC address of a device using netlink . LinkByName
2036	IsValidNetworkDevice is used to differentiate virtual and physical devices Returns true only for pci or vif interfaces
2037	ReceiveMessage receives a log line from seelog and emits it to the Windows event log
2038	GetAuthorizationToken calls the ecr api to get the docker auth for the specified registry
2039	NewMockEngine creates a new mock instance
2040	ContainerDockerStats mocks base method
2041	ContainerDockerStats indicates an expected call of ContainerDockerStats
2042	GetInstanceMetrics mocks base method
2043	GetInstanceMetrics indicates an expected call of GetInstanceMetrics
2044	GetTaskHealthMetrics mocks base method
2045	RetryWithBackoff takes a Backoff and a function to call that returns an error If the error is nil then the function will no longer be called If the error is Retriable then that will be used to determine if it should be retried
2046	RetryWithBackoffCtx takes a context a Backoff and a function to call that returns an error If the context is done nil will be returned If the error is nil then the function will no longer be called If the error is Retriable then that will be used to determine if it should be retried
2047	RetryNWithBackoff takes a Backoff a maximum number of tries n and a function that returns an error . The function is called until either it does not return an error or the maximum tries have been reached . If the error returned is Retriable the Retriability of it will be respected . If the number of tries is exhausted the last error will be returned .
2048	RetryNWithBackoffCtx takes a context a Backoff a maximum number of tries n and a function that returns an error . The function is called until it does not return an error the context is done or the maximum tries have been reached . If the error returned is Retriable the Retriability of it will be respected . If the number of tries is exhausted the last error will be returned .
2049	AddJitter adds an amount of jitter between 0 and the given jitter to the given duration
2050	NewMockIOUtil creates a new mock instance
2051	WriteFile mocks base method
2052	WriteFile indicates an expected call of WriteFile
2053	DescribeECSTagsForInstance calls DescribeTags API to get the EC2 tags of the instance id and return it back as ECS tags
2054	TaskContainerStatsHandler returns the handler method for handling task and container stats requests .
2055	WriteTaskStatsResponse writes the task stats to response writer .
2056	WriteContainerStatsResponse writes the container stats to response writer .
2057	NewTaskResponse creates a TaskResponse for a task .
2058	NewContainerResponse creates ContainerResponse for a container .
2059	NewPortBindingsResponse creates PortResponse for a container .
2060	NewVolumesResponse creates VolumeResponse for a container
2061	NewTasksResponse creates TasksResponse for all the tasks .
2062	NewPublishMetricsRequest creates a PublishMetricsRequest object .
2063	NewPublishHealthMetricsRequest creates a PublishHealthRequest
2064	StartListening starts reading from the input channel and writes to the buffer When context is cancelled stop listening
2065	CopyEvents copies the event into the buffer
2066	Consume reads the buffer and write to a listener channel
2067	ContainerStatsHandler returns the handler method for handling container stats requests .
2068	A factory method that enables various MetricsClients to be created .
2069	NewMockECRSDK creates a new mock instance
2070	NewMockECRFactory creates a new mock instance
2071	GetClient indicates an expected call of GetClient
2072	NewMockECRClient creates a new mock instance
2073	GetCredentialsEventType is the type for a GetCredentials request
2074	NewMockGPUManager creates a new mock instance
2075	GetDevices mocks base method
2076	GetGPUIDsUnsafe mocks base method
2077	SetDevices indicates an expected call of SetDevices
2078	SetDriverVersion mocks base method
2079	SetDriverVersion indicates an expected call of SetDriverVersion
2080	SetGPUIDs mocks base method
2081	SetRuntimeVersion mocks base method
2082	NewMockRoundTripper creates a new mock instance
2083	RoundTrip mocks base method
2084	RoundTrip indicates an expected call of RoundTrip
2085	NewMockNetLink creates a new mock instance
2086	LinkByName mocks base method
2087	LinkByName indicates an expected call of LinkByName
2088	LinkList mocks base method
2089	LinkList indicates an expected call of LinkList
2090	NewMockCNI creates a new mock instance
2091	AddNetwork mocks base method
2092	AddNetworkList mocks base method
2093	DelNetwork mocks base method
2094	DelNetwork indicates an expected call of DelNetwork
2095	DelNetworkList mocks base method
2096	Creates an LRUCache with maximum size ttl for items .
2097	Get returns the value associated with the key
2098	Set sets the key - value pair in the cache
2099	Delete removes the entry associated with the key from cache
2100	StartTimer starts the ack timer to record the expiration of ENI attachment
2101	IsSent checks if the eni attached status has been sent
2102	SetSentStatus marks the eni attached status has been sent
2103	StopAckTimer stops the ack timer set on the ENI attachment
2104	HasExpired returns true if the ENI attachment object has exceeded the threshold for notifying the backend of the attachment
2105	String returns a string representation of the ENI Attachment
2106	stringUnsafe returns a string representation of the ENI Attachment
2107	StartMetricsSession starts a metric session . It initializes the stats engine and invokes StartSession .
2108	StartSession creates a session with the backend and handles requests using the passed in arguments . The engine is expected to initialized and gathering container metrics by the time the websocket client starts using it .
2109	heartbeatHandler resets the heartbeat timer when HeartbeatMessage message is received from tcs .
2110	ackPublishMetricHandler consumes the ack message from the backend . THe backend sends the ack each time it processes a metric message .
2111	ackPublishHealthMetricHandler consumes the ack message from backend . The backend sends the ack each time it processes a health message
2112	anyMessageHandler handles any server message . Any server message means the connection is active
2113	formatURL returns formatted url for tcs endpoint .
2114	native returns a pointer to the underlying GtkStackSwitcher .
2115	native returns a pointer to the underlying GtkComboBox .
2116	native returns a pointer to the underlying GtkComboBoxText .
2117	native returns a pointer to the underlying GtkAppChooser .
2118	native returns a pointer to the underlying GtkAppChooserWidget .
2119	native returns a pointer to the underlying GdkPixbuf .
2120	native returns a pointer to the underlying GtkAlignment .
2121	native returns a pointer to the underlying GtkMisc .
2122	native returns a pointer to the underlying GtkApplicationWindow .
2123	TypeString returns the g variant type string for this variant .
2124	GetString returns the string value of the variant .
2125	GetStrv returns a slice of strings from this variant . It wraps g_variant_get_strv but returns copies of the strings instead .
2126	IsType returns true if the variant s type matches t .
2127	native returns a pointer to the underlying GdkFrameClock .
2128	native returns a pointer to the underlying GdkFrameTimings .
2129	native returns a pointer to the underlying GdkMonitor .
2130	native returns a pointer to the underlying GdkScreen .
2131	native returns a pointer to the underlying GVariantBuilder .
2132	String returns a readable status messsage usable in texts .
2133	ToError returns the error for the status . Returns nil if success .
2134	native returns a pointer to the underlying GtkLevelBar .
2135	native returns a pointer to the underlying GtkAccelGroup .
2136	native returns a pointer to the underlying GtkAccelMap .
2137	dataRaw is a wrapper around the data struct field
2138	native returns a pointer to the underlying cairo_t .
2139	native returns a pointer to the underlying GtkTextView .
2140	String returns a copy of this VariantType s type string .
2141	native returns a pointer to the underlying GtkApplication .
2142	native returns a pointer to the underlying GtkMenuShell .
2143	native returns a pointer to the underlying GtkStyleContext .
2144	NewMatrix creates a new identiy matrix
2145	Native returns native c pointer to a matrix
2146	InitTranslate initializes a matrix with the given translation
2147	InitScale initializes a matrix with the give scale
2148	InitRotate initializes a matrix with the given rotation
2149	Translate translates a matrix by the given amount
2150	Scale scales the matrix by the given amounts
2151	Rotate rotates the matrix by the given amount
2152	Multiply multiplies the matrix by another matrix
2153	native returns a pointer to the underlying GtkPaperSize .
2154	native returns a pointer to the underlying GdkGLContext .
2155	native returns a pointer to the underlying GtkButtonBox .
2156	native returns a pointer to the underlying GtkTextIter .
2157	native returns a pointer to the underlying GMainContext .
2158	native returns a pointer to the underlying GtkTreeViewColumn .
2159	native returns a pointer to the underlying GVariantIter .
2160	Next is a wrapper around the next struct field
2161	LookupAction is a wrapper around g_action_map_lookup_action
2162	AddAction is a wrapper around g_action_map_add_action
2163	RemoveAction is a wrapper around g_action_map_remove_action
2164	native returns a pointer to the underlying cairo_surface_t .
2165	NewSurface creates a gotk3 cairo Surface from a pointer to a C cairo_surface_t . This is primarily designed for use with other gotk3 packages and should be avoided by applications .
2166	native returns a pointer to the underlying GtkAboutDialog .
2167	AddFont adds the font to the configuration .
2168	native returns a pointer to the underlying GtkLabel .
2169	native returns a pointer to the underlying GVariantDict .
2170	native returns a pointer to the underlying GtkActionable .
2171	native returns a pointer to the underlying GtkHeaderBar .
2172	native returns a pointer to the underlying GtkListBox .
2173	native returns a pointer to the underlying GtkListBoxRow .
2174	native returns a pointer to the underlying GtkRevealer .
2175	native returns a pointer to the underlying GtkSearchBar .
2176	Creates a binding between source property on source and target property on target . Whenever the source property is changed the target_property is updated using the same value .
2177	Retrieves the GObject instance used as the source of the binding
2178	Retrieves the GObject instance used as the target of the binding .
2179	Retrieves the flags passed when constructing the GBinding .
2180	native returns a pointer to the underlying GtkFontChooser .
2181	native returns a pointer to the underlying GtkFontButton .
2182	ChangeActionState is a wrapper around g_action_group_change_action_state
2183	Activate is a wrapper around g_action_group_activate_action
2184	native returns a pointer to the underlying GtkWidget .
2185	Native returns a pointer to the underlying GtkAllocation .
2186	native returns a pointer to the underlying GtkGLArea .
2187	native returns a pointer to the underlying GtkTreeView .
2188	SetSearchEqualSubstringMatch sets TreeView to search by substring match .
2189	goMarshal is called by the GLib runtime when a closure needs to be invoked . The closure will be invoked with as many arguments as it can take from 0 to the full amount provided by the call . If the closure asks for more parameters than there are to give a warning is printed to stderr and the closure is not run . export goMarshal
2190	gValueSlice converts a C array of GValues to a Go slice .
2191	IdleAdd adds an idle source to the default main event loop context . After running once the source func will be removed from the main event loop unless f returns a single bool true . This function will cause a panic when f eventually runs if the types of args do not match those of f .
2192	TimeoutAdd adds an timeout source to the default main event loop context . After running once the source func will be removed from the main event loop unless f returns a single bool true . This function will cause a panic when f eventually runs if the types of args do not match those of f . timeout is in milliseconds
2193	sourceAttach attaches a source to the default main loop context .
2194	native returns a pointer to the underlying GObject .
2195	Take wraps a unsafe . Pointer as a glib . Object taking ownership of it . This function is exported for visibility in other gotk3 packages and is not meant to be used by applications .
2196	GetPropertyType returns the Type of a property of the underlying GObject . If the property is missing it will return TYPE_INVALID and an error .
2197	Native returns a pointer to the underlying GObject . This is implemented here rather than calling Native on the embedded Object to prevent a nil pointer dereference .
2198	InitI18n initializes the i18n subsystem .
2199	Local localizes a string using gettext
2200	native returns a pointer to the underlying GtkShortcutsSection .
2201	native returns a pointer to the underlying GtkShortcutsGroup .
2202	native returns a pointer to the underlying GtkShortcutsShortcut .
2203	SimpleActionGroupNew is a wrapper around g_simple_action_group_new
2204	ActionNameIsValid is a wrapper around g_action_name_is_valid
2205	GetName is a wrapper around g_action_get_name
2206	GetState is a wrapper around g_action_get_state
2207	GetStateHint is a wrapper around g_action_get_state_hint
2208	GetParameterType is a wrapper around g_action_get_parameter_type
2209	GetStateType is a wrapper around g_action_get_state_type
2210	ChangeState is a wrapper around g_action_change_state
2211	Activate is a wrapper around g_action_activate
2212	SimpleActionNew is a wrapper around g_simple_action_new
2213	SimpleActionNewStateful is a wrapper around g_simple_action_new_stateful
2214	SetEnabled is a wrapper around g_simple_action_set_enabled
2215	PropertyActionNew is a wrapper around g_property_action_new
2216	native returns a pointer to the underlying GtkAdjustment .
2217	native returns a pointer to the underlying GtkAssistant .
2218	native returns a pointer to the underlying GtkBin .
2219	Native returns a pointer to the underlying GtkColorButton .
2220	native returns a pointer to the underlying GtkCellRenderer .
2221	native returns a pointer to the underlying GtkCellRendererSpinner .
2222	native returns a pointer to the underlying GtkCellRendererPixbuf .
2223	native returns a pointer to the underlying GtkCellRendererText .
2224	native returns a pointer to the underlying GtkCellRendererToggle .
2225	native returns a pointer to the underlying GtkCheckButton .
2226	native returns a pointer to the underlying GtkCheckMenuItem .
2227	native returns a pointer to the underlying GtkClipboard .
2228	WaitIsTextAvailable is a wrapper around gtk_clipboard_wait_is_text_available
2229	WaitForText is a wrapper around gtk_clipboard_wait_for_text
2230	WaitIsRichTextAvailable is a wrapper around gtk_clipboard_wait_is_rich_text_available
2231	WaitIsUrisAvailable is a wrapper around gtk_clipboard_wait_is_uris_available
2232	WaitIsImageAvailable is a wrapper around gtk_clipboard_wait_is_image_available
2233	SetImage is a wrapper around gtk_clipboard_set_image
2234	WaitForImage is a wrapper around gtk_clipboard_wait_for_image
2235	WaitIsTargetAvailable is a wrapper around gtk_clipboard_wait_is_target_available
2236	WaitForContents is a wrapper around gtk_clipboard_wait_for_contents
2237	native returns a pointer to the underlying GtkContainer .
2238	native returns a pointer to the underlying GtkCssProvider .
2239	native returns a pointer to the underlying GtkDialog .
2240	native returns a pointer to the underlying GtkEntry .
2241	native returns a pointer to the underlying GtkEntryBuffer .
2242	native returns a pointer to the underlying GtkEntryCompletion .
2243	native returns a pointer to the underlying GtkEventBox .
2244	native returns a pointer to the underlying GtkExpander .
2245	native returns a pointer to the underlying GObject as a GtkFileChooser .
2246	native returns a pointer to the underlying GtkFileChooserButton .
2247	native returns a pointer to the underlying GtkFileChooserDialog .
2248	native returns a pointer to the underlying GtkFileChooserWidget .
2249	native returns a pointer to the underlying GObject as a GtkFileFilter .
2250	native returns a pointer to the underlying GtkFrame .
2251	native returns a pointer to the underlying GtkAspectFrame .
2252	native returns a pointer to the underlying GtkGrid .
2253	native returns a pointer to the underlying GtkImage .
2254	Layout . SetSize is a wrapper around gtk_layout_set_size
2255	Layout . GetSize is a wrapper around gtk_layout_get_size
2256	native returns a pointer to the underlying GtkLinkButton .
2257	native returns a pointer to the underlying GtkListStore .
2258	native returns a pointer to the underlying GtkMenuButton .
2259	native returns a pointer to the underlying GtkMenuItem .
2260	Sets text on the menu_item label
2261	Gets text on the menu_item label
2262	native returns a pointer to the underlying GtkMessageDialog .
2263	native returns a pointer to the underlying GtkNotebook .
2264	native returns a pointer to the underlying GtkOffscreenWindow .
2265	native returns a pointer to the underlying GObject as a GtkOrientable .
2266	native returns a pointer to the underlying GtkOverlay .
2267	native returns a pointer to the underlying GtkPaned .
2268	native returns a pointer to the underlying GtkProgressBar .
2269	native returns a pointer to the underlying GtkRadioButton .
2270	native returns a pointer to the underlying GtkRadioMenuItem .
2271	native returns a pointer to the underlying GtkRange .
2272	native returns a pointer to the underlying GtkRecentChooser .
2273	native returns a pointer to the underlying GtkRecentFilter .
2274	native returns a pointer to the underlying GtkScale .
2275	native returns a pointer to the underlying GtkScrollbar .
2276	native returns a pointer to the underlying GtkScrolledWindow .
2277	native returns a pointer to the underlying GtkSearchEntry .
2278	native returns a pointer to the underlying GtkSelectionData .
2279	GetData is a wrapper around gtk_selection_data_get_data_with_length . It returns a slice of the correct size with the selection s data .
2280	fixed GetData directly from ptr
2281	for drag - data - get
2282	for drag - begin event
2283	native returns a pointer to the underlying GtkSeperator .
2284	native returns a pointer to the underlying GtkSeparatorMenuItem .
2285	native returns a pointer to the underlying GtkSeparatorToolItem .
2286	native returns a pointer to the underlying GtkSpinButton .
2287	native returns a pointer to the underlying GtkSpinner .
2288	native returns a pointer to the underlying GtkStatusbar
2289	native returns a pointer to the underlying GtkSwitch .
2290	native returns a pointer to the underlying GObject as a GtkTextTag .
2291	native returns a pointer to the underlying GObject as a GtkTextTagTable .
2292	native returns a pointer to the underlying GtkTextBuffer .
2293	SelectRange is a wrapper around gtk_text_buffer_select_range .
2294	native returns a pointer to the underlying GtkToggleButton .
2295	native returns a pointer to the underlying GtkToolbar .
2296	native returns a pointer to the underlying GtkToolButton .
2297	native returns a pointer to the underlying GtkToggleToolButton .
2298	native returns a pointer to the underlying GtkToolItem .
2299	native returns a pointer to the underlying GtkTreeIter .
2300	native returns a pointer to the underlying GObject as a GtkTreeModel .
2301	Return a TreePath from the GList
2302	native returns a pointer to the underlying GtkTreePath .
2303	GetIndices is a wrapper around gtk_tree_path_get_indices_with_depth
2304	native returns a pointer to the underlying GtkTreeSelection .
2305	GetPath is a wrapper around gtk_tree_row_reference_get_path .
2306	GetModel is a wrapper around gtk_tree_row_reference_get_path .
2307	Valid is a wrapper around gtk_tree_row_reference_valid .
2308	native returns a pointer to the underlying GtkTreeStore .
2309	Insert is a wrapper around gtk_tree_store_insert
2310	Get the global non window specific settings
2311	native returns a pointer to the underlying GtkTextMark .
2312	native returns a pointer to the underlying cairo_pattern_t .
2313	native returns a pointer to the underlying GtkWindow .
2314	native returns the underlying GdkAtom .
2315	GdkAtomIntern is a wrapper around gdk_atom_intern
2316	native returns a pointer to the underlying GdkDevice .
2317	native returns a pointer to the underlying GdkCursor .
2318	native returns a pointer to the underlying GdkDeviceManager .
2319	native returns a pointer to the underlying GdkDisplay .
2320	native returns a pointer to the underlying GdkDragContext .
2321	native returns a pointer to the underlying GdkEvent .
2322	XRoot returns the x coordinate of the pointer relative to the root of the screen .
2323	YRoot returns the y coordinate of the pointer relative to the root of the screen .
2324	SetColors sets all colors values in the RGBA .
2325	native returns a pointer to the underlying GdkWindow .
2326	ClosureNew creates a new GClosure and adds its callback function to the internally - maintained map . It s exported for visibility to other gotk3 packages and shouldn t be used in application code .
2327	native returns a pointer to the underlying GtkColorChooser .
2328	native returns a pointer to the underlying GtkColorChooserButton .
2329	native returns a pointer to the underlying GSource .
2330	Translate is a wrapper around cairo_translate .
2331	Scale is a wrapper around cairo_scale .
2332	Rotate is a wrapper around cairo_rotate .
2333	Transform is a wrapper around cairo_transform .
2334	SetMatrix is a wrapper around cairo_set_matrix .
2335	GetMatrix is a wrapper around cairo_get_matrix .
2336	UserToDevice is a wrapper around cairo_user_to_device .
2337	UserToDeviceDistance is a wrapper around cairo_user_to_device_distance .
2338	DeviceToUser is a wrapper around cairo_device_to_user .
2339	DeviceToUserDistance is a wrapper around cairo_device_to_user_distance .
2340	Draw draws the sprite .
2341	Length returns the size of decoded stream in bytes .
2342	Decode decodes MP3 source and returns a decoded stream . Decode returns error when decoding fails or IO error happens . Decode automatically resamples the stream to fit with the audio context if necessary . Decode takes the ownership of src and Stream s Close function closes src .
2343	IsMouseButtonPressed returns a boolean indicating whether mouseButton is pressed . IsMouseButtonPressed is concurrent - safe . Note that touch events not longer affect IsMouseButtonPressed s result as of 1 . 4 . 0 - alpha . Use Touches instead .
2344	Touches is deprecated as of 1 . 7 . 0 . Use TouchIDs instead .
2345	paeth implements the Paeth filter function as per the PNG specification .
2346	filterPaeth applies the Paeth filter to the cdat slice . cdat is the current row s data pdat is the previous row s data .
2347	MipmapLevel returns an appropriate mipmap level for the given determinant of a geometry matrix . MipmapLevel returns - 1 if det is 0 . MipmapLevel panics if det is NaN .
2348	hideConsoleWindowOnWindows will hide the console window that is showing when compiling on Windows without specifying the - ldflags - Hwindowsgui flag .
2349	enable or disable writing into the depth buffer
2350	flag edges as either boundary or nonboundary
2351	specify a three - dimensional texture image
2352	QuadVertices returns the vertices for rendering a quad . QuadVertices is highly optimized for rendering quads and that s the most significant difference from PutVertices .
2353	PutVertices puts the given dest with vertices that can be passed to DrawTriangles .
2354	run as goroutine . Will keep the desktop scale up to date . This can be removed once the scale change event is implemented in GLFW 3 . 3
2355	NewBoard generates a new Board with giving a size .
2356	Update updates the board state .
2357	Move enqueues tile moving tasks .
2358	Size returns the board size .
2359	Draw draws the board to the given boardImage .
2360	specify the clear value for the color index buffers
2361	Creates a program object
2362	specify a callback to receive debugging messages from the GL Parameter callback has type C . GLDEBUGPROC .
2363	return error information
2364	check if the rendering context has not been lost due to software or hardware issues
2365	specify the width of rasterized lines
2366	place a marker in the feedback buffer
2367	specify the diameter of rasterized points
2368	IsReady returns a boolean value indicating whether the audio is ready or not . On some browsers user interaction like click or pressing keys is required to start audio .
2369	NewPlayerFromBytes creates a new player with the given bytes . As opposed to NewPlayer you don t have to care if src is already used by another player or not . src can be shared by multiple players . The format of src should be same as noted at NewPlayer . NewPlayerFromBytes s error is always nil as of 1 . 5 . 0 - alpha .
2370	Close closes the stream . When closing the stream owned by the player will also be closed by calling its Close . This means that the source stream passed via NewPlayer will also be closed . Close returns error when closing the source returns error .
2371	Seek seeks the position with the given offset . The passed source to NewPlayer must be io . Seeker or Seek panics . Seek returns error when seeking the source stream returns error .
2372	decode decodes the IDAT data into an image .
2373	Decode reads a PNG image from r and returns it as an image . Image . The type of Image returned depends on the PNG contents .
2374	DecodeConfig returns the color model and dimensions of a PNG image without decoding the entire image .
2375	Add is deprecated .
2376	IsButtonPressed returns a boolean value indicating whether the given virtual button b is pressed .
2377	Name returns the pysical button s name for the given virtual button .
2378	AppendHookOnBeforeUpdate appends a hook function that is run before the main update function every frame .
2379	DebugPrint draws the string str on the image on left top corner . The available runes are in U + 0000 to U + 00FF which is C0 Controls and Basic Latin and C1 Controls and Latin - 1 Supplement . DebugPrint always returns nil as of 1 . 5 . 0 - alpha .
2380	GamepadIDButtonPressed returns a gamepad ID where at least one button is pressed . If no button is pressed GamepadIDButtonPressed returns - 1 .
2381	Seek is implementation of io . Seeker s Seek . Note that Seek can take long since decoding is a relatively heavy task .
2382	decode accepts an ogg stream and returns a decorded stream .
2383	MovePieceToLeft tries to move the piece to the left and returns the piece s next x position .
2384	RotatePieceRight tries to rotate the piece to the right and returns the piece s next angle .
2385	RotatePieceLeft tries to rotate the piece to the left and returns the piece s next angle .
2386	flushable returns a boolean value indicating whether there is a flushable line in the field .
2387	flushableLine returns a boolean value indicating whether the line j is flushabled or not .
2388	flushLine flushes the line j if possible and if the line is flushed the other lines above the line go down . flushLine returns a boolean value indicating whether the line is actually flushed .
2389	intersection calculates the intersection of given two lines .
2390	rayCasting returns a slice of line originating from point cx cy and intersecting with objects
2391	Str takes a null - terminated Go string and returns its GL - compatible address . This function reaches into Go string storage in an unsafe way so the caller must ensure the string is not garbage collected .
2392	Read is implementation of io . Closer s Close .
2393	NewWorld creates a new world .
2394	init inits world with a random state .
2395	Update game state by one tick .
2396	Draw paints current game state .
2397	DrawLine draws a line segment on the given destination dst . DrawLine is intended to be used mainly for debugging or prototyping purpose .
2398	DrawRect draws a rectangle on the given destination dst . DrawRect is intended to be used mainly for debugging or prototyping purpose .
2399	NewGame generates a new Game object .
2400	Update updates the current game state .
2401	Draw draws the current game to the given screen .
2402	IsKeyJustReleased returns a boolean value indicating whether the given key is released just in the current frame . IsKeyJustReleased is concurrent safe .
2403	KeyPressDuration returns how long the key is pressed in frames . KeyPressDuration is concurrent safe .
2404	IsMouseButtonJustReleased returns a boolean value indicating whether the given mouse button is released just in the current frame . IsMouseButtonJustReleased is concurrent safe .
2405	MouseButtonPressDuration returns how long the mouse button is pressed in frames . MouseButtonPressDuration is concurrent safe .
2406	JustConnectedGamepadIDs returns gamepad IDs that are connected just in the current frame . JustConnectedGamepadIDs might return nil when there is no connected gamepad . JustConnectedGamepadIDs is concurrent safe .
2407	IsGamepadJustDisconnected returns a boolean value indicating whether the gamepad of the given id is released just in the current frame . IsGamepadJustDisconnected is concurrent safe .
2408	IsGamepadButtonJustPressed returns a boolean value indicating whether the given gamepad button of the gamepad id is pressed just in the current frame . IsGamepadButtonJustPressed is concurrent safe .
2409	IsGamepadButtonJustReleased returns a boolean value indicating whether the given gamepad button of the gamepad id is released just in the current frame . IsGamepadButtonJustReleased is concurrent safe .
2410	GamepadButtonPressDuration returns how long the gamepad button of the gamepad id is pressed in frames . GamepadButtonPressDuration is concurrent safe .
2411	JustPressedTouchIDs returns touch IDs that are created just in the current frame . JustPressedTouchIDs might return nil when there is not touch . JustPressedTouchIDs is concurrent safe .
2412	IsTouchJustReleased returns a boolean value indicating whether the given touch is released just in the current frame . IsTouchJustReleased is concurrent safe .
2413	TouchPressDuration returns how long the touch remains in frames . TouchPressDuration is concurrent safe .
2414	viewportSize must be called from the main thread .
2415	Loop starts the main - thread loop . Loop must be called on the main thread .
2416	Run calls f on the main thread . Do not call this from the main thread . This would block forever .
2417	InternalImageSize returns a nearest appropriate size as an internal image .
2418	square fills out with square wave values with the specified volume frequency and sequence .
2419	playNote plays the note at scoreIndex of the score .
2420	pianoAt returns an i - th sample of piano with the given frequency .
2421	playNote plays piano sound with the given frequency .
2422	Draw draws the path by rendering its stroke or filling .
2423	String returns a string representation of GeoM .
2424	Reset resets the GeoM as identity .
2425	Concat multiplies a geometry matrix with the other geometry matrix . This is same as muptiplying the matrix other and the matrix g in this order .
2426	Rotate rotates the matrix by theta . The unit is radian .
2427	Invert inverts the matrix . If g is not invertible Invert panics .
2428	ScaleGeo is deprecated as of 1 . 2 . 0 - alpha . Use Scale instead .
2429	TranslateGeo is deprecated as of 1 . 2 . 0 - alpha . Use Translate instead .
2430	RotateGeo is deprecated as of 1 . 2 . 0 - alpha . Use Rotate instead .
2431	newFramebufferFromTexture creates a framebuffer from the given texture .
2432	newScreenFramebuffer creates a framebuffer for the screen .
2433	Returns whether or not the image is fully opaque .
2434	Write the actual image data to one or more IDAT chunks .
2435	This function is required because we want the zero value of Encoder . CompressionLevel to map to zlib . DefaultCompression .
2436	Encode writes the Image m to w in PNG format . Any Image may be encoded but images that are not image . NRGBA might be encoded lossily .
2437	Encode writes the Image m to w in PNG format .
2438	NewImage creates an empty image with the given size . The returned image is cleared . Note that Dispose is not called automatically .
2439	NewScreenFramebufferImage creates a special image that framebuffer is one for the screen . The returned image is cleared . Note that Dispose is not called automatically .
2440	internalSize returns the size of the internal texture .
2441	makeStale makes the image stale .
2442	ReplacePixels replaces the image pixels with the given pixels slice . If pixels is nil ReplacePixels clears the specified reagion .
2443	DrawTriangles draws a given image img to the image .
2444	appendDrawTrianglesHistory appends a draw - image history item to the image .
2445	makeStaleIfDependingOn makes the image stale if the image depends on target .
2446	readPixelsFromGPU reads the pixels from GPU and resolves the image s stale state .
2447	resolveStale resolves the image s stale state .
2448	dependsOn returns a boolean value indicating whether the image depends on target .
2449	dependingImages returns all images that is depended by the image .
2450	hasDependency returns a boolean value indicating whether the image depends on another image .
2451	Dispose disposes the image . After disposing calling the function of the image causes unexpected results .
2452	IsInvalidated returns a boolean value indicating whether the image is invalidated . If an image is invalidated GL context is lost and all the images should be restored asap .
2453	NewImage returns a new image . Note that the image is not initialized yet .
2454	Pixels returns the image s pixels . Pixels might return nil when OpenGL error happens .
2455	CopyPixels is basically same as Pixels and ReplacePixels but reading pixels from GPU is done lazily .
2456	Pos returns the tile s current position . Pos is used only at testing so far .
2457	NextPos returns the tile s next position . NextPos is used only at testing so far .
2458	NewTile creates a new Tile object .
2459	MoveTiles moves tiles in the given tiles map if possible . MoveTiles returns true if there are tiles that are to move otherwise false . When MoveTiles is called all tiles must not be about to move .
2460	Update updates the tile s animation states .
2461	String returns a string representation of ColorM .
2462	ScaleColor is deprecated as of 1 . 2 . 0 - alpha . Use Scale instead .
2463	TranslateColor is deprecated as of 1 . 2 . 0 - alpha . Use Translate instead .
2464	RotateHue is deprecated as of 1 . 2 . 0 - alpha . Use RotateHue member function instead .
2465	availableFilename returns a filename that is valid as a new file or directory .
2466	appMain is the main routine for gomobile - build mode .
2467	repeatingKeyPressed return true when key is pressed considering the repeat state .
2468	totalBytes returns the size in bytes for one element of the array buffer .
2469	newArrayBuffer creates OpenGL s buffer object for the array buffer .
2470	enable binds the array buffer the given program to use the array buffer .
2471	disable stops using the array buffer .
2472	reset resets or initializes the OpenGL state .
2473	areSameFloat32Array returns a boolean indicating if a and b are deeply equal .
2474	NewInfiniteLoopWithIntro creates a new infinite loop stream with an intro part . NewInfiniteLoopWithIntro accepts a source stream src introLength in bytes and loopLength in bytes .
2475	Read is implementation of ReadSeekCloser s Read .
2476	Seek is implementation of ReadSeekCloser s Seek .
2477	remove removes img from the images .
2478	resolveStaleImages resolves stale images .
2479	MoveForward moves the player p forward .
2480	RotateRight rotates the player p in the right direction .
2481	RotateLeft rotates the player p in the left direction .
2482	updateGroundImage updates the ground image according to the current player s position .
2483	drawGroundImage draws the ground image to the given screen image .
2484	String returns a string representing the direction .
2485	Update updates the current input states .
2486	Dir returns a currently pressed direction . Dir returns false if no direction key is pressed .
2487	Read is io . Reader s Read . Read fills the data with sine wave samples .
2488	Size returns the size of the image .
2489	Fill fills the image with a solid color . When the image is disposed Fill does nothing . Fill always returns nil as of 1 . 5 . 0 - alpha .
2490	Bounds returns the bounds of the image .
2491	Dispose disposes the image data . After disposing most of image functions do nothing and returns meaningless values . Dispose is useful to save memory . When the image is disposed Dipose does nothing . Dipose always return nil as of 1 . 5 . 0 - alpha .
2492	NewImage returns an empty image . If width or height is less than 1 or more than device - dependent maximum size NewImage panics . filter argument is just for backward compatibility . If you are not sure specify FilterDefault . Error returned by NewImage is always nil as of 1 . 5 . 0 - alpha .
2493	makeVolatile makes the image volatile . A volatile image is always cleared at the start of a frame . This is suitable for offscreen images that pixels are changed often . Regular non - volatile images need to record drawing history or read its pixels from GPU if necessary so that all the images can be restored automatically from the context lost . However such recording the drawing history or reading pixels from GPU are expensive operations . Volatile images can skip such oprations but the image content is cleared every frame instead . When the image is disposed makeVolatile does nothing .
2494	isFullscreen must be called from the main thread .
2495	getSize must be called from the main thread .
2496	getScale must be called from the main thread .
2497	actualScreenScale must be called from the main thread .
2498	setScreenSize must be called from the main thread .
2499	currentMonitor returns the monitor most suitable with the current window . currentMonitor must be called on the main thread .
2500	CopyImage copies img to a new RGBA image . Basically CopyImage just calls draw . Draw . If img is a paletted image an optimized copying method is used . CopyImage is used only internally but it is exposed for testing .
2501	appendVertices appends vertices to the queue .
2502	EnqueueDrawTrianglesCommand enqueues a drawing - image command .
2503	Enqueue enqueues a drawing command other than a draw - image command . For a draw - image command use EnqueueDrawTrianglesCommand .
2504	Flush flushes the command queue .
2505	Exec executes the drawTrianglesCommand .
2506	CanMerge returns a boolean value indicating whether the other drawTrianglesCommand can be merged with the drawTrianglesCommand c .
2507	Exec executes the replacePixelsCommand .
2508	Exec executes a pixelsCommand .
2509	Exec executes the disposeCommand .
2510	Exec executes a newImageCommand .
2511	Exec executes a newScreenFramebufferImageCommand .
2512	schemaHostNetworkPolicy returns schema items for resources that need to work with a HostNetworkPolicy such as virtual switches and port groups .
2513	expandHostNicFailureCriteria reads certain ResourceData keys and returns a HostNicFailureCriteria .
2514	flattenHostNicFailureCriteria reads various fields from a HostNicFailureCriteria into the passed in ResourceData .
2515	expandHostNicOrderPolicy reads certain ResourceData keys and returns a HostNicOrderPolicy .
2516	flattenHostNicOrderPolicy reads various fields from a HostNicOrderPolicy into the passed in ResourceData .
2517	expandHostNicTeamingPolicy reads certain ResourceData keys and returns a HostNicTeamingPolicy .
2518	flattenHostNicTeamingPolicy reads various fields from a HostNicTeamingPolicy into the passed in ResourceData .
2519	expandHostNetworkSecurityPolicy reads certain ResourceData keys and returns a HostNetworkSecurityPolicy .
2520	flattenHostNetworkSecurityPolicy reads various fields from a HostNetworkSecurityPolicy into the passed in ResourceData .
2521	expandHostNetworkTrafficShapingPolicy reads certain ResourceData keys and returns a HostNetworkTrafficShapingPolicy .
2522	flattenHostNetworkTrafficShapingPolicy reads various fields from a HostNetworkTrafficShapingPolicy into the passed in ResourceData .
2523	expandHostNetworkPolicy reads certain ResourceData keys and returns a HostNetworkPolicy .
2524	flattenHostNetworkPolicy reads various fields from a HostNetworkPolicy into the passed in ResourceData .
2525	schemaHostNasVolumeSpec returns schema items for resources that need to work with a HostNasVolumeSpec .
2526	expandHostNasVolumeSpec reads certain ResourceData keys and returns a HostNasVolumeSpec .
2527	flattenHostNasVolume reads various fields from a HostNasVolume into the passed in ResourceData . Note the name attribute is not set here bur rather set in flattenDatastoreSummary and sourced from there .
2528	isNasVolume returns true if the HostFileSystemVolumeFileSystemType matches one of the possible filesystem types that a NAS datastore supports .
2529	expandVMwareDVSPortgroupPolicy reads certain ResourceData keys and returns a VMwareDVSPortgroupPolicy .
2530	flattenVMwareDVSPortgroupPolicy reads various fields from a VMwareDVSPortgroupPolicy into the passed in ResourceData .
2531	expandDVPortgroupConfigSpec reads certain ResourceData keys and returns a DVPortgroupConfigSpec .
2532	flattenDVPortgroupConfigInfo reads various fields from a DVPortgroupConfigInfo into the passed in ResourceData . This is the flatten counterpart to expandDVPortgroupConfigSpec .
2533	expandClusterHostGroup reads certain ResourceData keys and returns a ClusterHostGroup .
2534	flattenClusterHostGroup saves a ClusterHostGroup into the supplied ResourceData .
2535	resourceVSphereComputeClusterHostGroupFlattenID makes an ID for the vsphere_cluster_host_group resource .
2536	resourceVSphereComputeClusterHostGroupFetchObjects fetches the objects for a cluster host group . This is currently just the cluster object as the name of the group is a static value and a pass - through - this is to keep its workflow consistent with other cluster - dependent resources that derive from ArrayUpdateSpec that have managed object as keys such as VM and host overrides .
2537	netifKey renders a specific network_interface key for a specific resource index .
2538	matchGateway take an IP mask and gateway and checks to see if the gateway is reachable from the IP address .
2539	expandCustomizationGlobalIPSettings reads certain ResourceData keys and returns a CustomizationGlobalIPSettings .
2540	expandCustomizationLinuxPrep reads certain ResourceData keys and returns a CustomizationLinuxPrep .
2541	expandCustomizationGuiRunOnce reads certain ResourceData keys and returns a CustomizationGuiRunOnce .
2542	expandCustomizationGuiUnattended reads certain ResourceData keys and returns a CustomizationGuiUnattended .
2543	expandCustomizationIdentification reads certain ResourceData keys and returns a CustomizationIdentification .
2544	expandCustomizationUserData reads certain ResourceData keys and returns a CustomizationUserData .
2545	expandCustomizationSysprep reads certain ResourceData keys and returns a CustomizationSysprep .
2546	expandCustomizationSysprepText reads certain ResourceData keys and returns a CustomizationSysprepText .
2547	expandCustomizationIPSettingsIPV6AddressSpec reads certain ResourceData keys and returns a CustomizationIPSettingsIpV6AddressSpec .
2548	expandCustomizationIPSettings reads certain ResourceData keys and returns a CustomizationIPSettings .
2549	expandSliceOfCustomizationAdapterMapping reads certain ResourceData keys and returns a CustomizationAdapterMapping slice .
2550	ExpandCustomizationSpec reads certain ResourceData keys and returns a CustomizationSpec .
2551	ValidateCustomizationSpec checks the validity of the supplied customization spec . It should be called during diff customization to veto invalid configs .
2552	schemaHostVirtualSwitchBondBridge returns schema items for resources that need to work with a HostVirtualSwitchBondBridge such as virtual switches .
2553	expandHostVirtualSwitchBeaconConfig reads certain ResourceData keys and returns a HostVirtualSwitchBeaconConfig .
2554	flattenHostVirtualSwitchBeaconConfig reads various fields from a HostVirtualSwitchBeaconConfig into the passed in ResourceData .
2555	expandLinkDiscoveryProtocolConfig reads certain ResourceData keys and returns a LinkDiscoveryProtocolConfig .
2556	flattenLinkDiscoveryProtocolConfig reads various fields from a LinkDiscoveryProtocolConfig into the passed in ResourceData .
2557	expandHostVirtualSwitchBondBridge reads certain ResourceData keys and returns a HostVirtualSwitchBondBridge .
2558	flattenHostVirtualSwitchBondBridge reads various fields from a HostVirtualSwitchBondBridge into the passed in ResourceData .
2559	schemaHostVirtualSwitchSpec returns schema items for resources that need to work with a HostVirtualSwitchSpec such as virtual switches .
2560	expandHostVirtualSwitchSpec reads certain ResourceData keys and returns a HostVirtualSwitchSpec .
2561	flattenHostVirtualSwitchSpec reads various fields from a HostVirtualSwitchSpec into the passed in ResourceData .
2562	saveHostVirtualSwitchID sets a special ID for a host virtual switch composed of the MOID for the concerned HostSystem and the virtual switch s key .
2563	virtualSwitchIDsFromResourceID passes a resource s ID through splitHostVirtualSwitchID .
2564	expandStorageDrsVMConfigInfo reads certain ResourceData keys and returns a StorageDrsVmConfigInfo .
2565	flattenStorageDrsVmConfigInfo saves a StorageDrsVmConfigInfo into the supplied ResourceData .
2566	resourceVSphereStorageDrsVMOverrideFlattenID makes an ID for the vsphere_storage_drs_vm_override resource .
2567	resourceVSphereStorageDrsVMOverrideFindEntry attempts to locate an existing VM config in a Storage Pod s DRS configuration . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2568	NetworkInterfaceSubresourceSchema returns the schema for the disk sub - resource .
2569	NewNetworkInterfaceSubresource returns a network_interface subresource populated with all of the necessary fields .
2570	NetworkInterfaceDiffOperation performs operations relevant to managing the diff on network_interface sub - resources .
2571	ReadNetworkInterfaceTypes returns a list of network interface types . This is used in the VM data source to discover the types of the NIC drivers on the virtual machine . The list is sorted by the order that they would be added in if a clone were to be done .
2572	baseVirtualEthernetCardToBaseVirtualDevice converts a BaseVirtualEthernetCard value into a BaseVirtualDevice .
2573	baseVirtualDeviceToBaseVirtualEthernetCard converts a BaseVirtualDevice value into a BaseVirtualEthernetCard .
2574	virtualEthernetCardString prints a string representation of the ethernet device passed in .
2575	Create creates a vsphere_virtual_machine network_interface sub - resource .
2576	Read reads a vsphere_virtual_machine network_interface sub - resource .
2577	Delete deletes a vsphere_virtual_machine network_interface sub - resource .
2578	ValidateDiff performs any complex validation of an individual network_interface sub - resource that can t be done in schema alone .
2579	nicUnitRange calculates a range of units given a certain VirtualDeviceList which should be network interfaces . It s used in network interface refresh logic to determine how many subresources may end up in state .
2580	hostStorageSystemFromHostSystemID locates a HostStorageSystem from a specified HostSystem managed object ID .
2581	FromUUID locates a virtualMachine by its UUID .
2582	virtualMachineFromSearchIndex gets the virtual machine reference via the SearchIndex MO and is the method used to fetch UUIDs on newer versions of vSphere .
2583	virtualMachineFromContainerView is a compatability method that is used when the version of vSphere is too old to support using SearchIndex s FindByUuid method correctly . This is mainly to facilitate the ability to use FromUUID to find both templates in addition to virtual machines which historically was not supported by FindByUuid .
2584	Properties is a convenience method that wraps fetching the VirtualMachine MO from its higher - level object .
2585	WaitForGuestIP waits for a virtual machine to have an IP address . The timeout is specified in minutes . If zero or a negative value is passed the waiter returns without error immediately .
2586	WaitForGuestNet waits for a virtual machine to have routable network access . This is denoted as a gateway and at least one IP address that can reach that gateway . This function supports both IPv4 and IPv6 and returns the moment either stack is routable - it doesn t wait for both . The timeout is specified in minutes . If zero or a negative value is passed the waiter returns without error immediately .
2587	Create wraps the creation of a virtual machine and the subsequent waiting of the task . A higher - level virtual machine object is returned .
2588	Clone wraps the creation of a virtual machine and the subsequent waiting of the task . A higher - level virtual machine object is returned .
2589	Customize wraps the customization of a virtual machine and the subsequent waiting of the task .
2590	MoveToFolder moves a virtual machine to the specified folder .
2591	Relocate wraps the Relocate task and the subsequent waiting for the task to complete .
2592	MOIDForUUID returns the managed object reference ID for a specific virtual machine UUID and returns a MOIDForUUIDResult with the appropriate association .
2593	UUIDForMOID returns the managed object reference ID for a specific virtual machine MOID and returns a MOIDForUUIDResult with the appropriate association .
2594	MOIDsForUUIDs returns a MOIDForUUIDResults for a list of UUIDs . If one UUID cannot be found an error is returned . There are no partial results returned .
2595	UUIDsForMOIDs returns a MOIDForUUIDResults for a list of MOIDs . If one MOID cannot be found an error is returned . There are no partial results returned .
2596	UUIDsForManagedObjectReferences returns a MOIDForUUIDResults for a list of ManagedObjectReferences . If one cannot be found an error is returned . There are no partial results returned .
2597	MOIDs returns all MOIDs in a MOIDForUUIDResults .
2598	ManagedObjectReferences returns all MOIDs in a MOIDForUUIDResults as ManagedObjectReferences as type VirtualMachine .
2599	UUIDs returns all UUIDs in a MOIDForUUIDResults .
2600	FromKey gets a portgroup object from its key .
2601	FromMOID locates a portgroup by its managed object reference ID .
2602	FromPath gets a portgroup object from its path .
2603	Properties is a convenience method that wraps fetching the portgroup MO from its higher - level object .
2604	Create exposes the CreateDVPortgroup_Task method of the DistributedVirtualSwitch MO . This local implementation may go away if this is exposed in the higher - level object upstream .
2605	Properties is a convenience method that wraps fetching the Datastore MO from its higher - level object .
2606	MoveToFolder is a complex method that moves a datastore to a given relative datastore folder path . Relative here means relative to a datacenter which is discovered from the current datastore path .
2607	MoveToFolderRelativeHostSystemID is a complex method that moves a datastore to a given datastore path similar to MoveToFolder except the path is relative to a HostSystem supplied by ID instead of the datastore .
2608	Browser returns the HostDatastoreBrowser for a certain datastore . This is a convenience method that exists to abstract the context .
2609	SearchDatastore searches a datastore using the supplied HostDatastoreBrowser and a supplied path . The current implementation only returns the basic information so all FileQueryFlags set but not any flags for specific types of files .
2610	FileExists takes a path in the datastore and checks to see if it exists . The path should be a bare path not a datastore path . Globs are not allowed .
2611	FromPath returns a VirtualApp via its supplied path .
2612	FromID locates a VirtualApp by its managed object reference ID .
2613	IsVApp checks if a given managed object ID is a vApp . This is useful deciding if a given resource pool is a vApp or a standard resource pool .
2614	Create creates a VirtualApp .
2615	Update updates a VirtualApp .
2616	ResourceIDString prints a friendly string for a resource supplied by name .
2617	SliceInterfacesToStrings converts an interface slice to a string slice . The function does not attempt to do any sanity checking and will panic if one of the items in the slice is not a string .
2618	SliceStringsToInterfaces converts a string slice to an interface slice .
2619	SliceInterfacesToManagedObjectReferences converts an interface slice into a slice of ManagedObjectReferences with the type of t .
2620	BoolStringPtrState is a state normalization function for stringified 3 - state bool pointers . The function silently drops any result that can t be parsed with ParseBool and will return an empty string for these cases . This is designed to address the current lack of HCL and Terraform to be able to distinguish between nil states and zero values properly . This is a systemic issue that affects reading writing and diffing of these values . These issues will eventually be addressed in HCL2 .
2621	ValidateBoolStringPtr validates that the input value can be parsed by ParseBool . It also succeeds on empty strings . This is designed to address the current lack of HCL and Terraform to be able to distinguish between nil states and zero values properly . This is a systemic issue that affects reading writing and diffing of these values . These issues will eventually be addressed in HCL2 .
2622	BoolPolicy converts a bool into a VMware BoolPolicy value .
2623	GetBoolPolicy reads a ResourceData and returns an appropriate BoolPolicy for the state of the definition . nil is returned if it does not exist .
2624	SetBoolPolicy sets a ResourceData field depending on if a BoolPolicy exists or not . The field is not set if it s nil .
2625	StringPolicy converts a string into a VMware StringPolicy value .
2626	GetStringPolicy reads a ResourceData and returns an appropriate StringPolicy for the state of the definition . nil is returned if it does not exist .
2627	SetStringPolicy sets a ResourceData field depending on if a StringPolicy exists or not . The field is not set if it s nil .
2628	LongPolicy converts a supported number into a VMware LongPolicy value . This will panic if there is no implicit conversion of the value into an int64 .
2629	GetLongPolicy reads a ResourceData and returns an appropriate LongPolicy for the state of the definition . nil is returned if it does not exist .
2630	SetLongPolicy sets a ResourceData field depending on if a LongPolicy exists or not . The field is not set if it s nil .
2631	AllFieldsEmpty checks to see if all fields in a given struct are zero values . It does not recurse so finer - grained checking should be done for deep accuracy when necessary . It also does not dereference pointers except if the value itself is a pointer and is not nil .
2632	DeRef returns the value pointed to by the interface if the interface is a pointer and is not nil otherwise returns nil or the direct value if it s not a pointer .
2633	Less helps implement sort . Interface for MoRefSorter .
2634	Swap helps implement sort . Interface for MoRefSorter .
2635	hostDatastoreSystemFromHostSystemID locates a HostDatastoreSystem from a specified HostSystem managed object ID .
2636	availableScsiDisk checks to make sure that a disk is available for use in a VMFS datastore and returns the ScsiDisk .
2637	diskSpecForCreate checks to make sure that a disk is available to be used to create a VMFS datastore specifically in its entirety and returns a respective VmfsDatastoreCreateSpec .
2638	diskSpecForExtend checks to make sure that a disk is available to be used to extend a VMFS datastore specifically in its entirety and returns a respective VmfsDatastoreExtendSpec if it is . An error is returned if it s not .
2639	removeDatastore is a convenience method for removing a referenced datastore .
2640	queryVmfsDatastoreExtendOptions is a stop - gap method that implements QueryVmfsDatastoreExtendOptions . It will be removed once the higher level HostDatastoreSystem object supports this method .
2641	extendVmfsDatastore is a stop - gap method that implements ExtendVmfsDatastore . It will be removed once the higher level HostDatastoreSystem object supports this method .
2642	resourceVSphereComputeClusterImportSetDefaults sets configuration defaults for resource attributes that are not managed by read . This gives completeness for import in addition to reducing the number of post - import diffs that may need to happen .
2643	resourceVSphereComputeClusterApplyCreate processes the creation part of resourceVSphereComputeClusterCreate .
2644	resourceVSphereComputeClusterApplyTags processes the tags step for both create and update for vsphere_compute_cluster .
2645	resourceVSphereComputeClusterReadTags reads the tags for vsphere_compute_cluster .
2646	resourceVSphereComputeClusterApplyCustomAttributes processes the custom attributes step for both create and update for vsphere_compute_cluster .
2647	resourceVSphereComputeClusterReadCustomAttributes reads the custom attributes for vsphere_compute_cluster .
2648	resourceVSphereComputeClusterGetCluster gets the ComputeClusterResource from the ID in the supplied ResourceData .
2649	resourceVSphereComputeClusterGetClusterFromPath gets the ComputeClusterResource from a supplied path . If no datacenter is supplied the path must be a full path .
2650	resourceVSphereComputeClusterSaveDatacenter saves the datacenter that the cluster is a member of for correctness on imports .
2651	resourceVSphereComputeClusterSaveNameAndPath saves the name and path of a StoragePod into the supplied ResourceData .
2652	resourceVSphereComputeClusterApplyNameChange applies any changes to a ClusterComputeResource s name .
2653	resourceVSphereComputeClusterApplyFolderChange applies any changes to a ClusterComputeResource s folder location .
2654	resourceVSphereComputeClusterValidateEmptyCluster validates that the cluster is empty . This is used to ensure a safe deletion of the cluster - we do not allow deletion of clusters that still virtual machines or hosts in them .
2655	resourceVSphereComputeClusterApplyDelete process the removal of a cluster .
2656	resourceVSphereComputeClusterFlattenData saves the configuration attributes from a ClusterComputeResource into the supplied ResourceData . It also saves the root resource pool for the cluster in resource_pool_id . Note that other functions handle other non - configuration related items such as path name tags and custom attributes .
2657	expandClusterConfigSpecEx reads certain ResourceData keys and returns a ClusterConfigSpecEx .
2658	flattenClusterConfigSpecEx saves a ClusterConfigSpecEx into the supplied ResourceData .
2659	expandClusterDasConfigInfo reads certain ResourceData keys and returns a ClusterDasConfigInfo .
2660	flattenClusterDasConfigInfo saves a ClusterDasConfigInfo into the supplied ResourceData .
2661	expandBaseClusterDasAdmissionControlPolicy reads certain ResourceData keys and returns a BaseClusterDasAdmissionControlPolicy .
2662	flattenBaseClusterDasAdmissionControlPolicy saves a BaseClusterDasAdmissionControlPolicy into the supplied ResourceData .
2663	expandClusterFailoverResourcesAdmissionControlPolicy reads certain ResourceData keys and returns a ClusterFailoverResourcesAdmissionControlPolicy .
2664	flattenClusterFailoverResourcesAdmissionControlPolicy saves a ClusterFailoverResourcesAdmissionControlPolicy into the supplied ResourceData .
2665	expandClusterFailoverLevelAdmissionControlPolicy reads certain ResourceData keys and returns a ClusterFailoverLevelAdmissionControlPolicy .
2666	flattenClusterFailoverLevelAdmissionControlPolicy saves a ClusterFailoverLevelAdmissionControlPolicy into the supplied ResourceData .
2667	expandClusterFailoverHostAdmissionControlPolicy reads certain ResourceData keys and returns a ClusterFailoverHostAdmissionControlPolicy .
2668	flattenClusterFailoverHostAdmissionControlPolicy saves a ClusterFailoverHostAdmissionControlPolicy into the supplied ResourceData .
2669	expandClusterDasVMSettings reads certain ResourceData keys and returns a ClusterDasVmSettings .
2670	flattenClusterDasVMSettings saves a ClusterDasVmSettings into the supplied ResourceData .
2671	expandClusterVMComponentProtectionSettings reads certain ResourceData keys and returns a ClusterVmComponentProtectionSettings .
2672	flattenClusterVmComponentProtectionSettings saves a ClusterVmComponentProtectionSettings into the supplied ResourceData .
2673	expandClusterVMToolsMonitoringSettings reads certain ResourceData keys and returns a ClusterVmToolsMonitoringSettings .
2674	flattenClusterVmToolsMonitoringSettings saves a ClusterVmToolsMonitoringSettings into the supplied ResourceData .
2675	expandClusterDpmConfigInfo reads certain ResourceData keys and returns a ClusterDpmConfigInfo .
2676	flattenClusterDpmConfigInfo saves a ClusterDpmConfigInfo into the supplied ResourceData .
2677	expandClusterDrsConfigInfo reads certain ResourceData keys and returns a ClusterDrsConfigInfo .
2678	flattenClusterDrsConfigInfo saves a ClusterDrsConfigInfo into the supplied ResourceData .
2679	expandResourceVSphereComputeClusterDrsAdvancedOptions reads certain ResourceData keys and returns a BaseOptionValue list designed for use as DRS advanced options .
2680	expandClusterInfraUpdateHaConfigInfo reads certain ResourceData keys and returns a ClusterInfraUpdateHaConfigInfo .
2681	flattenClusterInfraUpdateHaConfigInfo saves a ClusterInfraUpdateHaConfigInfo into the supplied ResourceData .
2682	expandClusterOrchestrationInfo reads certain ResourceData keys and returns a ClusterOrchestrationInfo .
2683	flattenClusterOrchestrationInfo saves a ClusterOrchestrationInfo into the supplied ResourceData .
2684	expandClusterProactiveDrsConfigInfo reads certain ResourceData keys and returns a ClusterProactiveDrsConfigInfo .
2685	flattenClusterProactiveDrsConfigInfo saves a ClusterProactiveDrsConfigInfo into the supplied ResourceData .
2686	Properties is a convenience method that wraps fetching the StoragePod MO from its higher - level object .
2687	Create creates a StoragePod from a supplied folder . The resulting StoragePod is returned .
2688	ApplyDRSConfiguration takes a types . StorageDrsConfigSpec and applies it against the specified StoragePod .
2689	Rename renames a StoragePod .
2690	MoveToFolder is a complex method that moves a StoragePod to a given relative datastore folder path . Relative here means relative to a datacenter which is discovered from the current StoragePod path .
2691	StorageDRSEnabled checks a StoragePod to see if Storage DRS is enabled .
2692	CreateVM creates a virtual machine on a datastore cluster via the StorageResourceManager API . It mimics our helper in the virtualmachine package in functionality returning a VM helper object on success .
2693	CloneVM clones a virtual machine to a datastore cluster via the StorageResourceManager API . It mimics our helper in the virtualmachine package in functionality returning a VM helper object on success .
2694	ReconfigureVM reconfigures a virtual machine via the StorageResourceManager API applying any disk modifications that will require going through Storage DRS . It mimics our helper in the virtualmachine package in functionality . Note that this function will fail if there are no new disks in the spec check this first before using this function . If no disk create operations are necessary use the regular Reconfigure function in the virtualmachine helper package .
2695	RelocateVM migrates a virtual machine to a datastore cluster via the StorageResourceManager API . It mimics our helper in the virtualmachine package in functionality .
2696	HasDiskCreationOperations is an exported function that checks a list of device changes to see if there are any disk creation operations . This should be used to check if ReconfigureVM should be done through the Storage DRS API as a Reconfig operation done through SDRS without new disk operations will fail .
2697	IsMember checks to see if a datastore is a member of the datastore cluster in question . This is a pretty basic operation that checks that the parent of the datastore is the StoragePod .
2698	NewConfig returns a new Config from a supplied ResourceData .
2699	Client returns a new client for accessing VMWare vSphere .
2700	EnableDebug turns on govmomi API operation logging if appropriate settings are set on the provider .
2701	sessionFile is a helper that generates a unique hash of the client s URL to use as the session file name . This is the same logic used as part of govmomi and is designed to be consistent so that sessions can be shared if possible between both tools .
2702	vimSessionFile is takes the session file name generated by sessionFile and then prefixes the SOAP client session path to it .
2703	restSessionFile is takes the session file name generated by sessionFile and then prefixes the REST client session path to it .
2704	SaveVimClient saves a client to the supplied path . This facilitates re - use of the session at a later date . Note the logic in this function has been largely adapted from govc and is designed to be compatible with it .
2705	SaveRestClient saves the REST client session ID to the supplied path . This facilitates re - use of the session at a later date .
2706	restoreVimClient loads the saved session from disk . Note that this is a helper function to LoadVimClient and should not be called directly .
2707	readRestSessionID reads a saved REST session ID and returns it . An empty string is returned if session does not exist .
2708	LoadVimClient loads a saved vSphere SOAP API session from disk previously saved by SaveVimClient checking it for validity before returning it . A nil client means that the session is no longer valid and should be created from scratch . Note the logic in this function has been largely adapted from govc and is designed to be compatible with it - if a session has already been saved with govc Terraform will attempt to use that session first .
2709	LoadRestClient loads a saved vSphere REST API session from disk previously saved by SaveRestClient checking it for validity before returning it . If it s not valid false is returned as the third return value but the client can still be technically used for logging in by calling Login on the client .
2710	SavedVimSessionOrNew either loads a saved SOAP session from disk or creates a new one .
2711	SavedRestSessionOrNew either loads a saved REST session from disk or creates a new one .
2712	wait waits for the customization of a supplied VirtualMachine to complete either due to success or error . It does this by watching specifically for CustomizationSucceeded and CustomizationFailed events . If the customization failed due to some sort of error the full formatted message is returned as an error .
2713	selectEventsForReference allows you to query events for a specific ManagedObjectReference . Event types can be supplied to this function via the eventTypes parameter . This is highly recommended when you expect the list of events to be large as there is no limit on returned events .
2714	getDatastore gets datastore object
2715	resourceVSphereVirtualMachineUpdateReconfigureWithSDRS runs the reconfigure part of resourceVSphereVirtualMachineUpdate through storage DRS . It s designed to be run when a storage cluster is specified versus simply specifying datastores .
2716	resourceVSphereVirtualMachineCreateBareWithSDRS runs the creation part of resourceVSphereVirtualMachineCreateBare through storage DRS . It s designed to be run when a storage cluster is specified versus simply specifying datastores .
2717	resourceVSphereVirtualMachineCreateBareStandard performs the steps necessary during resourceVSphereVirtualMachineCreateBare to create a virtual machine when a datastore cluster is not supplied .
2718	resourceVSphereVirtualMachineCreateCloneWithSDRS runs the clone part of resourceVSphereVirtualMachineCreateClone through storage DRS . It s designed to be run when a storage cluster is specified versus simply specifying datastores .
2719	resourceVSphereVirtualMachineRollbackCreate attempts to roll back a resource due to an error that happened post - create that will put the VM in a state where it cannot be worked with . This should only be done early on in the process namely on clone operations between when the clone actually happens and no later than after the initial post - clone update is complete . If the rollback fails an error is displayed prompting the user to manually delete the virtual machine before trying again .
2720	resourceVSphereVirtualMachineUpdateLocationRelocateWithSDRS runs the storage vMotion part of resourceVSphereVirtualMachineUpdateLocation through storage DRS . It s designed to be run when a storage cluster is specified versus simply specifying datastores .
2721	applyVirtualDevices is used by Create and Update to build a list of virtual device changes .
2722	expandClusterDrsVMConfigInfo reads certain ResourceData keys and returns a ClusterDpmHostConfigInfo .
2723	flattenClusterDpmHostConfigInfo saves a ClusterDpmHostConfigInfo into the supplied ResourceData .
2724	resourceVSphereDPMHostOverrideFlattenID makes an ID for the vsphere_dpm_host_override resource .
2725	resourceVSphereDPMHostOverrideFindEntry attempts to locate an existing DRS VM config in a cluster s configuration . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2726	Define VirtualDisk args
2727	createHardDisk creates a new Hard Disk .
2728	Searches for the presence of a directory path .
2729	processMountOperations processes all pending mount operations by diffing old and new and adding any hosts that were not found in old . The datastore is returned along with any error .
2730	processUnmountOperations processes all pending unmount operations by diffing old and new and removing any hosts that were not found in new . This operation only proceeds if the datastore field in the processor is populated .
2731	isEligibleTagEndpoint is a meta - validation that is used on login to see if the connected endpoint supports the CIS REST API which we use for tags .
2732	tagCategoryByName locates a tag category by name . It s used by the vsphere_tag_category data source and the resource importer .
2733	tagByName locates a tag by it supplied name and category ID . Use tagCategoryByName to get the tag category ID if require the category ID as well .
2734	tagsSchema returns the schema for the tags configuration attribute for each resource that needs it . The key is usually tags and should be a list of tag IDs to associate with this resource .
2735	tagTypeForObject takes an object . Reference and returns the tag type based on its underlying type . If it s not in this list we don t support it for tagging and we return an error .
2736	readTagsForResource reads the tags for a given reference and saves the list in the supplied ResourceData . It returns an error if there was an issue reading the tags .
2737	diff is what diffOldNew and diffNewOld hand off to .
2738	processAttachOperations processes all pending attach operations by diffing old and new and adding any IDs that were not found in old .
2739	tagsClientIfDefined goes through the client validation process and returns the tags client only if there are tags defined in the supplied ResourceData . This should be used to fetch the tagging REST client on resources that support tags usually closer to the beginning of a CRUD function to check to make sure it s worth proceeding with most of the operation . The returned client should be checked for nil before passing it to processTagDiff .
2740	processTagDiff wraps the whole tag diffing operation into a nice clean function that resources can use .
2741	expandDVSContactInfo reads certain ResourceData keys and returns a DVSContactInfo .
2742	flattenDVSContactInfo reads various fields from a DVSContactInfo into the passed in ResourceData .
2743	expandDistributedVirtualSwitchHostMemberConfigSpec reads certain keys from a Set object map and returns a DistributedVirtualSwitchHostMemberConfigSpec .
2744	flattenDistributedVirtualSwitchHostMemberConfigSpec reads various fields from a DistributedVirtualSwitchHostMemberConfigSpec and returns a Set object map . This is the flatten counterpart to expandDistributedVirtualSwitchHostMemberConfigSpec .
2745	expandSliceOfDistributedVirtualSwitchHostMemberConfigSpec expands all host entires for a VMware DVS detecting if a host spec needs to be added removed or updated as well . The whole slice is returned .
2746	flattenSliceOfDistributedVirtualSwitchHostMember creates a set of all host entries for a supplied slice of DistributedVirtualSwitchHostMember . This is the flatten counterpart to expandSliceOfDistributedVirtualSwitchHostMemberConfigSpec .
2747	expandVMwareIpfixConfig reads certain ResourceData keys and returns a VMwareIpfixConfig .
2748	flattenVMwareIpfixConfig reads various fields from a VMwareIpfixConfig into the passed in ResourceData .
2749	flattenDvsHostInfrastructureTrafficResource reads various fields from a DvsHostInfrastructureTrafficResource and sets appropriate keys in the supplied ResourceData .
2750	expandDVSNameArrayUplinkPortPolicy reads certain ResourceData keys and returns a DVSNameArrayUplinkPortPolicy .
2751	flattenDVSNameArrayUplinkPortPolicy reads various fields from a DVSNameArrayUplinkPortPolicy into the passed in ResourceData .
2752	expandVMwareDVSConfigSpec reads certain ResourceData keys and returns a VMwareDVSConfigSpec .
2753	flattenVMwareDVSConfigInfo reads various fields from a VMwareDVSConfigInfo into the passed in ResourceData . This is the flatten counterpart to expandVMwareDVSConfigSpec as the configuration info from a DVS comes back as this type instead of a specific ConfigSpec .
2754	schemaDVSCreateSpec returns schema items for resources that need to work with a DVSCreateSpec .
2755	expandDVSCreateSpec reads certain ResourceData keys and returns a DVSCreateSpec .
2756	getWithRestart fetches the resoruce data specified at key . If the value has changed a reboot is flagged in the virtual machine by setting reboot_required to true .
2757	vAppSubresourceSchema represents the schema for the vApp sub - resource . This sub - resource allows the customization of vApp properties on cloned VMs .
2758	expandVirtualMachineBootOptions reads certain ResourceData keys and returns a VirtualMachineBootOptions .
2759	flattenVirtualMachineBootOptions reads various fields from a VirtualMachineBootOptions into the passed in ResourceData .
2760	expandVirtualMachineFlagInfo reads certain ResourceData keys and returns a VirtualMachineFlagInfo .
2761	flattenVirtualMachineFlagInfo reads various fields from a VirtualMachineFlagInfo into the passed in ResourceData .
2762	expandToolsConfigInfo reads certain ResourceData keys and returns a ToolsConfigInfo .
2763	flattenToolsConfigInfo reads various fields from a ToolsConfigInfo into the passed in ResourceData .
2764	schemaVirtualMachineResourceAllocation returns the respective schema keys for the various kinds of resource allocation settings available to a virtual machine . This is an abridged version of ResourceAllocationInfo with only the keys present that make sense for virtual machines .
2765	expandVirtualMachineResourceAllocation reads the VM resource allocation resource data keys for the type supplied by key and returns an appropriate types . ResourceAllocationInfo reference .
2766	expandLatencySensitivity reads certain ResourceData keys and returns a LatencySensitivity .
2767	flattenLatencySensitivity reads various fields from a LatencySensitivity and sets appropriate keys in the supplied ResourceData .
2768	flattenVirtualMachineResourceAllocation reads various fields from a ResourceAllocationInfo and sets appropriate keys in the supplied ResourceData .
2769	flattenVAppConfig reads in the vAppConfig from a running virtual machine and sets all keys in vapp .
2770	expandVirtualMachineConfigSpec reads certain ResourceData keys and returns a VirtualMachineConfigSpec .
2771	flattenVirtualMachineConfigInfo reads various fields from a VirtualMachineConfigInfo into the passed in ResourceData . This is the flatten counterpart to expandVirtualMachineConfigSpec .
2772	expandVirtualMachineConfigSpecChanged compares an existing VirtualMachineConfigInfo with a VirtualMachineConfigSpec generated from existing resource data and compares them to see if there is a change . The new spec It does this be creating a fake ResourceData off of the VM resource schema flattening the config info into that and then expanding both ResourceData instances and comparing the resultant ConfigSpecs .
2773	getMemoryReservationLockedToMax determines if the memory_reservation is not set to be equal to memory . If they are not equal then the memory reservation needs to be unlocked from the maximum . Rather than supporting the locking reservation to max option we can set memory_reservation to memory in the configuration . Not supporting the option causes problems when cloning from a template that has it enabled . The solution is to set it to false when needed but leave it alone when the change is not necessary .
2774	FromPathOrDefault returns a ResourcePool via its supplied path .
2775	Properties returns the ResourcePool managed object from its higher - level object .
2776	ValidateHost checks to see if a HostSystem is a member of a ResourcePool through cluster membership or if the HostSystem ID matches the ID of a standalone host ComputeResource . An error is returned if it is not a member of the cluster to which the resource pool belongs or if there was some sort of other error with checking . This is used as an extra validation before a VM creation happens or vMotion to a specific host is attempted .
2777	OSFamily uses the resource pool s environment browser to get the OS family for a specific guest ID .
2778	Create creates a ResourcePool .
2779	Update updates a ResourcePool .
2780	MoveIntoResourcePool moves a virtual machine resource pool or vApp into the specified ResourcePool .
2781	expandClusterDasVMConfigInfo reads certain ResourceData keys and returns a ClusterDasVmConfigInfo .
2782	flattenClusterDasVmConfigInfo saves a ClusterDasVmConfigInfo into the supplied ResourceData .
2783	resourceVSphereHAVMOverrideFlattenID makes an ID for the vsphere_ha_vm_override resource .
2784	resourceVSphereHAVMOverrideFindEntry attempts to locate an existing VM - specific HA config in a cluster s configuration . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2785	schemaHostPortGroupSpec returns schema items for resources that need to work with HostPortGroupSpec such as port groups .
2786	expandHostPortGroupSpec reads certain ResourceData keys and returns a HostPortGroupSpec .
2787	flattenHostPortGroupSpec reads various fields from a HostPortGroupSpec into the passed in ResourceData .
2788	calculatePorts is a utility function that returns a set of port data .
2789	portGroupPortSchema returns a sub - schema for a port group s connected ports .
2790	saveHostPortGroupID sets a special ID for a host virtual switch composed of the MOID for the concerned HostSystem and the port group s key .
2791	portGroupIDsFromResourceID passes a resource s ID through splitHostPortGroupID .
2792	BaseFromPath returns a BaseComputeResource for a given path .
2793	BaseFromReference returns a BaseComputeResource for a given managed object reference .
2794	BaseProperties returns the base - level ComputeResource managed object for a BaseComputeResource an interface that any base - level ComputeResource and derivative object implements . Note that this does not return any cluster - level attributes .
2795	BasePropertiesFromReference combines BaseFromReference and BaseProperties to get a base - level ComputeResource managed object for a specific managed object reference .
2796	DefaultDevicesFromReference fetches the default virtual device list for a specific compute resource from a supplied managed object reference .
2797	OSFamily uses the compute resource s environment browser to get the OS family for a specific guest ID .
2798	EnvironmentBrowserFromReference loads an environment browser for the specific compute resource reference . The reference can be either a standalone host or cluster . As an added safety feature if the compute resource properties come back with an unset environmentBrowser attribute this function will return an error . This is to protect against cases where this may come up such as licensing issues or clusters without hosts .
2799	Properties is a convenience method that wraps fetching the ClusterComputeResource MO from its higher - level object .
2800	Create creates a ClusterComputeResource in a supplied folder . The resulting ClusterComputeResource is returned .
2801	MoveToFolder is a complex method that moves a ClusterComputeResource to a given relative compute folder path . Relative here means relative to a datacenter which is discovered from the current ClusterComputeResource path .
2802	Reconfigure reconfigures a cluster . This just gets dispatched to computeresource as both methods are the same .
2803	Delete destroys a ClusterComputeResource .
2804	IsMember checks to see if a host is a member of the compute cluster in question . This is a pretty basic operation that checks that the parent of the compute is the ClusterComputeResource .
2805	MoveHostsInto moves all of the supplied hosts into the cluster . All virtual machines are moved to the cluster s root resource pool and any resource pools on the host itself are deleted .
2806	MoveHostsOutOf moves a supplied list of hosts out of the specified cluster . The host is moved to the root host folder for the datacenter that the cluster is in . The host is placed into maintenance mode with evacuate flagged on ensuring that as many VMs as possible are moved out of the host before removing it from the cluster . The effectiveness of this operation is dictated by the cluster s DRS settings which also affects if this means that the task will block and require manual intervention . The supplied timeout is passed to the maintenance mode operations and represents the timeout in seconds . Individual hosts are taken out of maintenance mode after its operation is complete .
2807	expandVmwareDistributedVirtualSwitchVlanIDSpec reads certain ResourceData keys and returns a VmwareDistributedVirtualSwitchVlanIdSpec .
2808	flattenVmwareDistributedVirtualSwitchVlanIDSpec reads various fields from a VmwareDistributedVirtualSwitchVlanIdSpec into the passed in ResourceData .
2809	expandVmwareDistributedVirtualSwitchTrunkVlanSpec reads certain ResourceData keys and returns a VmwareDistributedVirtualSwitchTrunkVlanSpec .
2810	flattenVmwareDistributedVirtualSwitchTrunkVlanSpec reads various fields from a VmwareDistributedVirtualSwitchTrunkVlanSpec into the passed in ResourceData .
2811	expandVmwareDistributedVirtualSwitchPvlanSpec reads certain ResourceData keys and returns a VmwareDistributedVirtualSwitchPvlanSpec .
2812	flattenVmwareDistributedVirtualSwitchPvlanSpec reads various fields from a VmwareDistributedVirtualSwitchPvlanSpec into the passed in ResourceData .
2813	expandBaseVmwareDistributedVirtualSwitchVlanSpec reads certain ResourceData keys and returns a BaseVmwareDistributedVirtualSwitchVlanSpec .
2814	flattenBaseVmwareDistributedVirtualSwitchVlanSpec reads various fields from a BaseVmwareDistributedVirtualSwitchVlanSpec into the passed in ResourceData .
2815	expandDVSFailureCriteria reads certain ResourceData keys and returns a DVSFailureCriteria .
2816	flattenDVSFailureCriteria reads various fields from a DVSFailureCriteria into the passed in ResourceData .
2817	expandVMwareUplinkPortOrderPolicy reads certain ResourceData keys and returns a VMwareUplinkPortOrderPolicy .
2818	flattenVMwareUplinkPortOrderPolicy reads various fields from a VMwareUplinkPortOrderPolicy into the passed in ResourceData .
2819	expandVmwareUplinkPortTeamingPolicy reads certain ResourceData keys and returns a VmwareUplinkPortTeamingPolicy .
2820	flattenVmwareUplinkPortTeamingPolicy reads various fields from a VmwareUplinkPortTeamingPolicy into the passed in ResourceData .
2821	expandDVSSecurityPolicy reads certain ResourceData keys and returns a DVSSecurityPolicy .
2822	flattenDVSSecurityPolicy reads various fields from a DVSSecurityPolicy into the passed in ResourceData .
2823	expandVMwareUplinkLacpPolicy reads certain ResourceData keys and returns a VMwareUplinkLacpPolicy .
2824	flattenVMwareUplinkLacpPolicy reads various fields from a VMwareUplinkLacpPolicy into the passed in ResourceData .
2825	expandDVSTrafficShapingPolicyIngress reads certain ResourceData keys and returns a DVSTrafficShapingPolicy for ingress traffic .
2826	flattenDVSTrafficShapingPolicyIngress reads various fields from the DVSTrafficShapingPolicy ingress policy into the passed in ResourceData .
2827	expandVMwareDVSPortSetting reads certain ResourceData keys and returns a VMwareDVSPortSetting .
2828	flattenVMwareDVSPortSetting reads various fields from a VMwareDVSPortSetting into the passed in ResourceData .
2829	expandClusterDrsVMConfigInfo reads certain ResourceData keys and returns a ClusterDrsVmConfigInfo .
2830	flattenClusterDrsVmConfigInfo saves a ClusterDrsVmConfigInfo into the supplied ResourceData .
2831	resourceVSphereDRSVMOverrideParseID parses an ID for the vsphere_drs_vm_override and outputs its parts .
2832	resourceVSphereDRSVMOverrideFindEntry attempts to locate an existing DRS VM config in a cluster s configuration . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2833	resourceVSphereComputeClusterVMAntiAffinityRuleFlattenID makes an ID for the vsphere_compute_cluster_vm_anti_affinity_rule resource .
2834	schemaDatastoreSummary returns schema items for resources that need to work with a DatastoreSummary .
2835	flattenDatastoreSummary reads various fields from a DatastoreSummary into the passed in ResourceData .
2836	resourceVSphereDatastoreApplyFolderOrStorageClusterPath returns a path to a folder or a datastore cluster depending on what has been selected in the resource .
2837	resourceVSphereDatastoreReadFolderOrStorageClusterPath checks the inventory path of the supplied datastore and checks to see if it is a normal folder or if it s a datastore cluster and saves the attributes accordingly .
2838	CdromSubresourceSchema represents the schema for the cdrom sub - resource .
2839	NewCdromSubresource returns a subresource populated with all of the necessary fields .
2840	CdromDiffOperation performs operations relevant to managing the diff on cdrom sub - resources
2841	ValidateDiff performs any complex validation of an individual cdrom sub - resource that can t be done in schema alone .
2842	Create creates a vsphere_virtual_machine cdrom sub - resource .
2843	Read reads a vsphere_virtual_machine cdrom sub - resource .
2844	Update updates a vsphere_virtual_machine cdrom sub - resource .
2845	Delete deletes a vsphere_virtual_machine cdrom sub - resource .
2846	mapCdrom takes a CdromSubresource and attaches either a client device or a datastore ISO .
2847	VerifyVAppTransport validates that all the required components are included in the virtual machine configuration if vApp properties are set .
2848	verifyVAppCdromIso takes VirtualCdrom and determines if it is needed for vApp ISO transport . It does this by first checking if it has an ISO inserted that matches the vApp ISO naming pattern . If it does then the next step is to see if vApp ISO transport is supported on the VM . If both of those conditions are met then the CDROM is considered in use for vApp transport .
2849	DatastorePathFromString is a convenience method that returns a fully - populated DatastorePath from a string containing a datastore path . A flag indicating a successful parsing is also returned .
2850	IsVmdkDatastorePath ensures that a string can be parsed as a datastore path pointing to a virtual disk . This only checks the validity of the path not whether or not the file exists .
2851	QueryDiskType queries the disk type of the specified virtual disk .
2852	Delete deletes the virtual disk at the specified datastore path .
2853	soapFault extracts the SOAP fault from an error fault if it exists . Check the returned boolean value to see if you have a SoapFault .
2854	vimSoapFault extracts the VIM fault . Check the returned boolean value to see if you have a fault which will need to be further asserted into the error that you are looking for .
2855	taskFault extracts the task fault from a supplied task . Error . Check the returned boolean value to see if the fault was extracted correctly after which you will need to do further checking .
2856	IsManagedObjectNotFoundError checks an error to see if it s of the ManagedObjectNotFound type .
2857	isNotFoundError checks an error to see if it s of the NotFoundError type . Note this is different from the other not found faults and is an error type in its own right . Use IsAnyNotFoundError to check for any not found type .
2858	IsAnyNotFoundError checks to see if the fault is of any not found error type that we track .
2859	IsResourceInUseError checks an error to see if it s of the ResourceInUse type .
2860	isConcurrentAccessError checks an error to see if it s of the ConcurrentAccess type .
2861	RenameObject renames a MO and tracks the task to make sure it completes .
2862	VimValidateVirtualCenter ensures that the client is connected to vCenter . This is a lower - level method that does not take the wrapped client from the higher - level govmomi object and can be used to facilitate validation when it s not available .
2863	parseVersion creates a new VSphereVersion from a parsed version string and build number .
2864	parseVersionFromAboutInfo returns a populated VSphereVersion from an AboutInfo data object . This function panics if it cannot parse the version correctly as given our source of truth is a valid AboutInfo object such an error is indicative of a major issue with our version parsing logic .
2865	ParseVersionFromClient returns a populated VSphereVersion from a client connection .
2866	String implements stringer for VSphereVersion .
2867	ProductEqual returns true if this version s product name is the same as the supplied version s name .
2868	Older returns true if this version s product is the same and composite of the version and build numbers are older than the supplied version s information .
2869	Equal returns true if the version is equal to the supplied version .
2870	expandClusterVMGroup reads certain ResourceData keys and returns a ClusterVmGroup .
2871	flattenClusterVmGroup saves a ClusterVmGroup into the supplied ResourceData .
2872	resourceVSphereComputeClusterVMGroupFindEntry attempts to locate an existing VM group config in a cluster s configuration . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2873	resourceVSphereComputeClusterVMGroupFetchObjects fetches the objects for a cluster VM group . This is currently just the cluster object as the name of the group is a static value and a pass - through - this is to keep its workflow consistent with other cluster - dependent resources that derive from ArrayUpdateSpec that have managed object as keys such as VM and host overrides .
2874	resourceVSphereResourcePoolApplyTags processes the tags step for both create and update for vsphere_resource_pool .
2875	resourceVSphereResourcePoolReadTags reads the tags for vsphere_resource_pool .
2876	expandClusterAffinityRuleSpec reads certain ResourceData keys and returns a ClusterAffinityRuleSpec .
2877	flattenClusterAffinityRuleSpec saves a ClusterAffinityRuleSpec into the supplied ResourceData .
2878	resourceVSphereComputeClusterVMAffinityRuleFindEntry attempts to locate an existing VM affinity rule in a cluster s configuration by key . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2879	ConfigSchema returns the schema for custom attribute configuration for each resource that needs it . The key should be set to the ConfigKey constant and should be a map of custom attribute ids to values .
2880	VirtualMachineCloneSchema represents the schema for the VM clone sub - resource . This is a workflow for vsphere_virtual_machine that facilitates the creation of a virtual machine through cloning from an existing template . Customization is nested here even though it exists in its own workflow .
2881	ValidateVirtualMachineClone does pre - creation validation of a virtual machine s configuration to make sure it s suitable for use in cloning . This includes but is not limited to checking to make sure that the disks in the new VM configuration line up with the configuration in the existing template and checking to make sure that the VM has a single snapshot we can use in the even that linked clones are enabled .
2882	validateCloneSnapshots checks a VM to make sure it has a single snapshot with no children to make sure there is no ambiguity when selecting a snapshot for linked clones .
2883	ReferenceProperties is a convenience method that wraps fetching the Network MO from a NetworkReference . Note that regardless of the network type this only fetches the Network MO and not any of the extended properties of that network .
2884	SystemOrDefault returns a HostSystem from a specific host name and datacenter . If the user is connecting over ESXi the default host system is used .
2885	Properties is a convenience method that wraps fetching the HostSystem MO from its higher - level object .
2886	ResourcePool is a convenience method that wraps fetching the host system s root resource pool
2887	hostSystemNameFromID returns the name of a host via its its managed object reference ID .
2888	NameOrID is a convenience method mainly for helping displaying friendly errors where space is important - it displays either the host name or the ID if there was an error fetching it .
2889	EnterMaintenanceMode puts a host into maintenance mode . If evacuate is set to true all powered off VMs will be removed from the host or the task will block until this is the case depending on whether or not DRS is on or off for the host s cluster . This parameter is ignored on direct ESXi .
2890	ExitMaintenanceMode takes a host out of maintenance mode .
2891	dvsFromUUID gets a DVS object from its UUID .
2892	dvsFromPath gets a DVS object from its path .
2893	dvsProperties is a convenience method that wraps fetching the DVS MO from its higher - level object .
2894	upgradeDVS upgrades a DVS to a specific version . Downgrades are not supported and will result in an error . This should be checked before running this function .
2895	enableDVSNetworkResourceManagement exposes the EnableNetworkResourceManagement method of the DistributedVirtualSwitch MO . This local implementation may go away if this is exposed in the higher - level object upstream .
2896	resourceVSphereDatastoreClusterVMAntiAffinityRuleFlattenID makes an ID for the vsphere_datastore_cluster_vm_anti_affinity_rule resource .
2897	resourceVSphereDatastoreClusterVMAntiAffinityRuleFindEntry attempts to locate an existing VM anti - affinity rule in a datastore cluster s configuration by key . It s used by the resource s read functionality and tests . nil is returned if the entry cannot be found .
2898	resourceVSphereDatastoreClusterVMAntiAffinityRuleFindEntryByName attempts to locate an existing VM anti - affinity rule in a datastore cluster s configuration by name . It differs from the standard resourceVSphereDatastoreClusterVMAntiAffinityRuleFindEntry in that we don t allow missing entries as it s designed to be used in places where we don t want to allow for missing entries such as during creation and import .
2899	resourceVSphereDatastoreClusterVMAntiAffinityRuleFetchObjects fetches the objects for a cluster rule . This is currently just the cluster object as the rule key a static value and a pass - through - this is to keep its workflow consistent with other cluster - dependent resources that derive from ArrayUpdateSpec that have managed object as keys such as VM and host overrides .
2900	controllerTypeToClass converts a controller type to a specific short - form controller class namely for use with working with IDs .
2901	Addr returns the resource address for this subresource .
2902	HasChange checks to see if there has been a change in the resource data since the last update . Note that this operation may only be useful during update operations depending on subresource - specific workflow .
2903	GetChange gets the old and new values for the value specified by key .
2904	GetWithRestart checks to see if a field has been modified returns the new value and sets restart if it has changed .
2905	GetWithVeto returns the value specified by key but returns an error if it has changed . The intention here is to block changes to the resource in a fashion that would otherwise result in forcing a new resource .
2906	SetRestart sets reboot_required in the global ResourceData . The key is only required for logging .
2907	Hash calculates a set hash for the current data . If you want a hash for error reporting a device address it s probably a good idea to run this at the beginning of a run as any set calls will change the value this ultimately calculates .
2908	computeDevAddr handles the logic for SaveDevIDs and allows it to be used outside of a subresource .
2909	splitDevAddr splits an device addres into its inparticular parts and asserts that we have all the correct data .
2910	findVirtualDeviceInListControllerSelectFunc returns a function that can be used with VirtualDeviceList . Select to locate a controller device based on the criteria that we have laid out .
2911	findVirtualDeviceInListDeviceSelectFunc returns a function that can be used with VirtualDeviceList . Select to locate a virtual device based on its controller device key and the unit number on the device .
2912	findControllerForDevice locates a controller via its virtual device .
2913	FindVirtualDeviceByAddr locates the subresource s virtual device in the supplied VirtualDeviceList by its device address .
2914	FindVirtualDevice will attempt to find an address by its device key if it is > 0 otherwise it will attempt to locate it by its device address .
2915	String prints out the device sub - resource s information including the ID at time of instantiation the short name of the disk and the current device key and address .
2916	swapSCSIDevice swaps out the supplied controller for a new one of the supplied controller type . Any connected devices are re - connected at the same device units on the new device . A list of changes is returned .
2917	NormalizeSCSIBus checks the SCSI controllers on the virtual machine and either creates them if they don t exist or migrates them to the specified controller type . Devices are migrated to the new controller appropriately . A spec slice is returned with the changes . The first number of slots specified by count are normalized by this function . Any others are left unchanged .
2918	setSCSIBusSharing takes a BaseVirtualSCSIController sets the sharing mode and applies that change to the VirtualDeviceList .
2919	createSCSIController creates a new SCSI controller of the specified type and sharing mode .
2920	ReadSCSIBusType checks the SCSI bus state and returns a device type depending on if all controllers are one specific kind or not . Only the first number of controllers specified by count are checked .
2921	ReadSCSIBusSharing checks the SCSI bus sharing and returns a sharing type depending on if all controllers are one specific kind or not . Only the first number of controllers specified by count are checked .
2922	getSCSIController picks a SCSI controller at the specific bus number supplied .
2923	ControllerForCreateUpdate wraps the controller selection logic to make it easier to use in create or update operations . If the controller type is a SCSI device the bus number is searched as well .
2924	applyDeviceChange applies a pending types . BaseVirtualDeviceConfigSpec to a working set to either add remove or update devices so that the working VirtualDeviceList is as up to date as possible .
2925	DeviceListString pretty - prints each device in a virtual device list used for logging purposes and what not .
2926	DeviceChangeString pretty - prints a slice of VirtualDeviceConfigSpec .
2927	subresourceListString takes a list of sub - resources and pretty - prints the key and device address .
2928	scsiControllerListString pretty - prints a slice of SCSI controllers .
2929	AppendDeviceChangeSpec appends unique copies of the supplied device change operations and appends them to spec . The resulting list is returned . The object of this function is to provide deep copies of each virtual device to the spec as they looked like when the append operation was called helping facilitate multiple update operations to the same device in a single reconfigure call .
2930	expandClusterDependencyRuleInfo reads certain ResourceData keys and returns a ClusterDependencyRuleInfo .
2931	flattenClusterDependencyRuleInfo saves a ClusterDependencyRuleInfo into the supplied ResourceData .
2932	resourceVSphereComputeClusterVMDependencyRuleParseID parses an ID for the vsphere_compute_cluster_vm_dependency_rule and outputs its parts .
2933	resourceVSphereComputeClusterVMDependencyRuleFetchObjects fetches the objects for a cluster rule . This is currently just the cluster object as the rule key a static value and a pass - through - this is to keep its workflow consistent with other cluster - dependent resources that derive from ArrayUpdateSpec that have managed object as keys such as VM and host overrides .
2934	resourceVSphereDatastoreClusterApplyCreate processes the creation part of resourceVSphereDatastoreClusterCreate .
2935	resourceVSphereDatastoreClusterApplyTags processes the tags step for both create and update for vsphere_datastore_cluster .
2936	resourceVSphereDatastoreClusterReadTags reads the tags for vsphere_datastore_cluster .
2937	resourceVSphereDatastoreClusterApplyCustomAttributes processes the custom attributes step for both create and update for vsphere_datastore_cluster .
2938	resourceVSphereDatastoreClusterReadCustomAttributes reads the custom attributes for vsphere_datastore_cluster .
2939	resourceVSphereDatastoreClusterApplySDRSConfig applies the SDRS configuration to a datastore cluster .
2940	resourceVSphereDatastoreClusterHasSDRSConfigChange checks all resource keys associated with storage DRS to see if there has been a change in the configuration of those keys . This helper is designed to detect no - ops in a SDRS configuration to see if we really need to send a configure API call to vSphere .
2941	resourceVSphereDatastoreClusterGetPod gets the StoragePod from the ID in the supplied ResourceData .
2942	resourceVSphereDatastoreClusterGetPodFromPath gets the StoragePod from a supplied path . If no datacenter is supplied the path must be a full path .
2943	resourceVSphereDatastoreClusterSaveNameAndPath saves the name and path of a StoragePod into the supplied ResourceData .
2944	resourceVSphereDatastoreClusterApplyNameChange applies any changes to a StoragePod s name .
2945	resourceVSphereDatastoreClusterApplyFolderChange applies any changes to a StoragePod s folder location .
2946	resourceVSphereDatastoreClusterValidateEmptyCluster validates that the datastore cluster is empty . This is used to ensure a safe deletion of the cluster - we do not allow deletion of clusters that still have datastores in them .
2947	resourceVSphereDatastoreClusterApplyDelete process the removal of a datastore cluster .
2948	resourceVSphereDatastoreClusterFlattenSDRSData saves the DRS attributes from a StoragePod into the supplied ResourceData . Note that other functions handle non - SDRS related items such as path name tags and custom attributes .
2949	expandStorageDrsPodConfigSpec reads certain ResourceData keys and returns a StorageDrsPodConfigSpec .
2950	flattenStorageDrsPodConfigInfo saves a StorageDrsPodConfigInfo into the supplied ResourceData .
2951	expandStorageDrsAutomationConfig reads certain ResourceData keys and returns a StorageDrsAutomationConfig .
2952	flattenStorageDrsAutomationConfig saves a StorageDrsAutomationConfig into the supplied ResourceData .
2953	expandStorageDrsIoLoadBalanceConfig reads certain ResourceData keys and returns a StorageDrsIoLoadBalanceConfig .
2954	flattenStorageDrsIoLoadBalanceConfig saves a StorageDrsIoLoadBalanceConfig into the supplied ResourceData .
2955	expandStorageDrsSpaceLoadBalanceConfig reads certain ResourceData keys and returns a StorageDrsSpaceLoadBalanceConfig .
2956	flattenStorageDrsSpaceLoadBalanceConfig saves a StorageDrsSpaceLoadBalanceConfig into the supplied ResourceData .
2957	expandStorageDrsOptionSpec reads certain ResourceData keys and returns a StorageDrsOptionSpec .
2958	flattenStorageDrsOptionSpec saves a StorageDrsOptionSpec into the supplied ResourceData .
2959	resourceVSphereFolderMigrateState is the master state migration function for the vsphere_folder resource .
2960	resourceVSphereFolderMigrateStateV1 migrates the state of the vsphere_folder from version 0 to version 1 .
2961	getDatacenter gets the higher - level datacenter object for the datacenter name supplied by dc . The default datacenter is denoted by using an empty string . When working with ESXi directly the default datacenter is always selected .
2962	datacenterFromID locates a Datacenter by its managed object reference ID .
2963	NewDiskSubresource returns a subresource populated with all of the necessary fields .
2964	DiskApplyOperation processes an apply operation for all disks in the resource . The function takes the root resource s ResourceData the provider connection and the device list as known to vSphere at the start of this operation . All disk operations are carried out with both the complete updated VirtualDeviceList and the complete list of changes returned as a slice of BaseVirtualDeviceConfigSpec .
2965	diskApplyOperationDelete is an inner - loop helper for disk deletion operations .
2966	diskApplyOperationCreateUpdate is an inner - loop helper for disk creation and update operations .
2967	DiskMigrateRelocateOperation assembles the VirtualMachineRelocateSpecDiskLocator slice for a virtual machine migration operation otherwise known as storage vMotion .
2968	DiskCloneRelocateOperation assembles the VirtualMachineRelocateSpecDiskLocator slice for a virtual machine clone operation . This differs from a regular storage vMotion in that we have no existing devices in the resource to work off of - the disks in the source virtual machine is our source of truth . These disks are assigned to our disk sub - resources in config and the relocate specs are generated off of the backing data defined in config taking on these filenames when cloned . After the clone is complete natural re - configuration happens to bring the disk configurations fully in sync with what is defined .
2969	DiskImportOperation validates the disk configuration of the virtual machine s VirtualDeviceList to ensure it will be imported properly and also saves device addresses into state for disks defined in config . Both the imported device list is sorted by the device s unit number on the SCSI bus .
2970	ReadDiskAttrsForDataSource returns select attributes from the list of disks on a virtual machine . This is used in the VM data source to discover specific options of all of the disks on the virtual machine sorted by the order that they would be added in if a clone were to be done .
2971	Create creates a vsphere_virtual_machine disk sub - resource .
2972	Read reads a vsphere_virtual_machine disk sub - resource and commits the data to the newData layer .
2973	Update updates a vsphere_virtual_machine disk sub - resource .
2974	Delete deletes a vsphere_virtual_machine disk sub - resource .
2975	DiffExisting validates and normalizes the fields for an existing disk sub - resource . It handles carrying over existing values so this should not be used on disks that have not been successfully matched up between current and old diffs .
2976	DiffGeneral performs complex validation of an individual disk sub - resource that can t be done in schema alone . Should be run on new and existing disks .
2977	normalizeDiskDatastore normalizes the datastore_id field in a disk sub - resource . If the VM has a datastore cluster defined it checks to make sure the datastore in the current state of the disk is a member of the currently defined datastore cluster and if it is not it marks the disk as computed so that it can be migrated back to the datastore cluster on the next update .
2978	Relocate produces a VirtualMachineRelocateSpecDiskLocator for this resource and is used for both cloning and storage vMotion .
2979	String prints out the disk sub - resource s information including the ID at time of instantiation the path of the disk and the current device key and address .
2980	expandDiskSettings sets appropriate fields on an existing disk - this is used during Create and Update to set attributes to those found in configuration .
2981	createDisk performs all of the logic for a base virtual disk creation .
2982	assignDisk takes a unit number and assigns it correctly to a controller on the SCSI bus . An error is returned if the assigned unit number is taken .
2983	findControllerInfo determines the normalized unit number for the disk device based on the SCSI controller and unit number it s connected to . The controller is also returned .
2984	diskRelocateListString pretty - prints a list of VirtualMachineRelocateSpecDiskLocator .
2985	diskRelocateString prints out information from a VirtualMachineRelocateSpecDiskLocator in a friendly way . The format depends on whether or not a backing has been defined .
2986	Less helps implement sort . Interface for virtualDeviceListSorter . A BaseVirtualDevice is less than another device if its controller s bus number and unit number combination are earlier in the order than the other .
2987	Swap helps implement sort . Interface for virtualDeviceListSorter .
2988	Less helps implement sort . Interface for virtualDiskSubresourceSorter .
2989	Swap helps implement sort . Interface for virtualDiskSubresourceSorter .
2990	datastorePathHasBase is a helper to check if a datastore path s file matches a supplied file name .
2991	findVirtualDisk locates a virtual disk by it UUID or by its device address if UUID is missing . The device address search is only used if fallback is true - this is so that we can distinguish situations where it should be used such as a read versus situations where it should never be used such as an update or delete .
2992	diskCapacityInGiB reports the supplied disk s capacity by first checking CapacityInBytes and then falling back to CapacityInKB if that value is unavailable . This helps correct some situations where the former value s data gets cleared which seems to happen on upgrades .
2993	hostNetworkSystemFromHostSystem locates a HostNetworkSystem from a specified HostSystem .
2994	hostNetworkSystemFromHostSystemID locates a HostNetworkSystem from a specified HostSystem managed object ID .
2995	hostVSwitchFromName locates a virtual switch on the supplied HostNetworkSystem by name .
2996	hostPortGroupFromName locates a port group on the supplied HostNetworkSystem by name .
2997	networkObjectFromHostSystem locates the network object in vCenter for a specific HostSystem and network name . It does this by searching for all networks in the folder hierarchy that match the given network name for the HostSystem s managed object reference ID . This match is returned - if nothing is found an error is given .
2998	resourceVSphereLicenseUpdate check for change in labels of the key and updates them .
2999	isKeyPresent iterates over the InfoList to check if the license is present or not .
3000	UpdateLabel provides a wrapper around the UpdateLabel data objects
3001	DecodeError tries to find a specific error which occurs when an invalid key is passed to the server
3002	resourceVSphereVAppContainerApplyTags processes the tags step for both create and update for vsphere_vapp_container .
3003	resourceVSphereVAppContainerReadTags reads the tags for vsphere_vapp_container .
3004	expandClusterVMHostRuleInfo reads certain ResourceData keys and returns a ClusterVmHostRuleInfo .
3005	flattenClusterVMHostRuleInfo saves a ClusterVmHostRuleInfo into the supplied ResourceData .
3006	resourceVSphereVirtualMachineMigrateState is the master state migration function for the vsphere_virtual_machine resource .
3007	migrateVSphereVirtualMachineStateV3 migrates the state of the vsphere_virtual_machine from version 2 to version 3 .
3008	NewEnvironmentBrowser initializes a new EnvironmentBrowser based off the supplied managed object reference .
3009	DefaultDevices loads a satisfactory default device list for the optionally supplied host and descriptor key . The result is returned as a higher - level VirtualDeviceList object . This can be used as an initial VirtualDeviceList when building a device list and VirtualDeviceConfigSpec list for new virtual machines . Appropriate options for key can be loaded by running QueryConfigOptionDescriptor which will return a list of VirtualMachineConfigOptionDescriptor which will contain the appropriate key for the virtual machine version needed . If no key is supplied the results generally reflect the most recent VM hardware version .
3010	OSFamily fetches the operating system family for the supplied guest ID .
3011	QueryConfigOptionDescriptor returns a list the list of ConfigOption keys available on the environment that this browser targets . The keys can be used as query options for DefaultDevices and other functions facilitating the specification of results specific to a certain VM version .
3012	RootFromDatacenter returns the root path for the particle from the given datacenter s inventory path .
3013	PathFromDatacenter returns the combined result of RootFromDatacenter plus a relative path for a given particle and datacenter object .
3014	SplitDatacenter is a convenience method that splits out the datacenter path from the supplied path for the particle .
3015	SplitRelativeFolder is a convenience method that returns the parent folder for the result of SplitRelative on the supplied path . This is generally useful to get the folder for a managed entity versus getting a full relative path . If you want that use SplitRelative instead .
3016	NewRootFromPath takes the datacenter path for a specific entity and then appends the new particle supplied .
3017	datacenterPathFromHostSystemID returns the datacenter section of a HostSystem s inventory path .
3018	datastoreRootPathFromHostSystemID returns the root datastore folder path for a specific host system ID .
3019	validateDatastoreFolder checks to make sure the folder is a datastore folder and returns it if it is or an error if it isn t .
3020	validateHostFolder checks to make sure the folder is a host folder and returns it if it is or an error if it isn t .
3021	validateVirtualMachineFolder checks to make sure the folder is a VM folder and returns it if it is or an error if it isn t .
3022	validateNetworkFolder checks to make sure the folder is a network folder and returns it if it is or an error if it isn t .
3023	NormalizePath is a SchemaStateFunc that normalizes a folder path .
3024	MoveObjectTo moves a object by reference into a folder .
3025	Properties is a convenience method that wraps fetching the Folder MO from its higher - level object .
3026	FindType returns a proper VSphereFolderType for a folder object by checking its child type .
3027	ToServerListQuery formats a ListOpts into a query string .
3028	Index returns the first index of the target string t or - 1 if no match is found .
3029	Any returns true if one of the strings in the slice satisfies the predicate f .
3030	client returns an authenticated HTTP client for use with GCE .
3031	lookupProject retrieves the project name from the metadata of the current node .
3032	lookupZones retrieves the zones of the project and filters them by pattern .
3033	lookupAddrs retrieves the private ip addresses of all instances in a given project and zone which have a matching tag value .
3034	New creates a new discover client with the given options .
3035	WithUserAgent allows specifying a custom user agent option to send with requests when the underlying client library supports it .
3036	WithProviders allows specifying your own set of providers .
3037	Names returns the names of the configured providers .
3038	Help describes the format of the configuration string for address discovery and the various provider specific options .
3039	Addrs discovers ip addresses of nodes that match the given filter criteria . The config string must have the format provider = xxx key = val key = val ... where the keys and values are provider specific . The values are URL encoded .
3040	String formats a config map into the key = val key = val ... understood by Parse . The order of the keys is stable .
3041	PodAddrs extracts the addresses from a list of pods . This is a separate method so that we can unit test this without having to setup complicated K8S cluster scenarios . It shouldn t generally be called externally .
3042	argsOrEnv allows you to pick an environmental variable for a setting if the arg is not set
3043	Addrs returns discovered addresses for the mDNS package .
3044	setLog sets the logger .
3045	discoverErr prints out a friendly error heading for the top - level discovery errors . It should only be used in the Addrs method .
3046	valueOrEnv provides a way of suppling configuration values through environment variables . Defined values always take priority .
3047	newVSphereClient returns a new vSphereClient after setting up the necessary connections .
3048	newVimSession connects the VIM SOAP API client connection .
3049	newRestSession connects to the vSphere REST API endpoint necessary for tags .
3050	Addrs implements the Provider interface for the vsphere package .
3051	tagIDFromName helps convert the tag and category names into the final ID used for discovery .
3052	tagCategoryByName converts a tag category name into its ID .
3053	tagByName converts a tag name into its ID .
3054	virtualMachineIPsForTag is a higher - level wrapper that calls out to functions to fetch all of the virtual machines matching a certain tag ID and then gets all of the IP addresses for those virtual machines .
3055	virtualMachinesForTag discovers all of the virtual machines that match a specific tag ID and returns their higher level helper objects .
3056	ipAddrsForVirtualMachines takes a set of virtual machines and returns a consolidated list of IP addresses for all of the VMs .
3057	virtualMachineFromMOID locates a virtual machine by its managed object reference ID .
3058	virtualMachineProperties is a convenience method that wraps fetching the VirtualMachine MO from its higher - level object . It takes a list of property keys to fetch . Keeping the property set small can sometimes result in significant performance improvements .
3059	buildAndSelectGuestIPs builds a list of IP addresses known to VMware tools skipping local and auto - configuration addresses . The builder is non - discriminate and is only deterministic to the order that it discovers addresses in VMware tools .
3060	skipIPAddr defines the set of criteria that buildAndSelectGuestIPs uses to check to see if it needs to skip an IP address .
3061	virtualMachineNames is a helper method that returns all the names for a list of virtual machines comma separated .
3062	validateAndWrapHandler makes sure a handler is a callable function it panics if not . When the handler is also potential to be any built - in inject . FastInvoker it wraps the handler automatically to have some performance gain .
3063	validateAndWrapHandlers preforms validation and wrapping for each input handler . It accepts an optional wrapper function to perform custom wrapping on handlers .
3064	NewWithLogger creates a bare bones Macaron instance . Use this method if you want to have full control over the middleware that is used . You can specify logger output writer with this function .
3065	Handlers sets the entire middleware stack with the given Handlers . This will clear any current middleware handlers and panics if any of the handlers is not a callable function
3066	Use adds a middleware Handler to the stack and panics if the handler is not a callable func . Middleware Handlers are invoked in the order that they are added .
3067	ServeHTTP is the HTTP Entry point for a Macaron instance . Useful if you want to control your own HTTP server . Be aware that none of middleware will run without registering any router .
3068	SetURLPrefix sets URL prefix of router layer so that it support suburl .
3069	SetConfig sets data sources for configuration .
3070	String reads and returns content of request body in string .
3071	RemoteAddr returns more real IP address .
3072	HTML renders the HTML with default template set .
3073	HTMLSet renders the HTML with given template set name .
3074	Query querys form parameter .
3075	QueryTrim querys and trims spaces form parameter .
3076	QueryStrings returns a list of results by given query name .
3077	QueryEscape returns escapred query result .
3078	QueryBool returns query result in bool type .
3079	QueryInt returns query result in int type .
3080	QueryInt64 returns query result in int64 type .
3081	QueryFloat64 returns query result in float64 type .
3082	SetParams sets value of param with given name .
3083	GetFile returns information about user upload file by given form field name .
3084	SaveToFile reads a file from request by field name and saves to given path .
3085	GetCookie returns given cookie value from request header .
3086	GetCookieInt returns cookie result in int type .
3087	GetCookieInt64 returns cookie result in int64 type .
3088	GetCookieFloat64 returns cookie result in float64 type .
3089	SetSecureCookie sets given cookie value to response header with default secret string .
3090	GetSecureCookie returns given cookie value from request header with default secret string .
3091	SetSuperSecureCookie sets given cookie value to response header with secret string .
3092	GetSuperSecureCookie returns given cookie value from request header with secret string .
3093	ServeContent serves given content to response .
3094	ServeFileContent serves given file as content to response .
3095	ServeFile serves given file to response .
3096	ChangeStaticPath changes static path from old to new one .
3097	getNextWildcard tries to find next wildcard and update pattern with corresponding regexp .
3098	getRawPattern removes all regexp but keeps wildcards for building URL path .
3099	URLPath build path part of URL by given pair values .
3100	NewRouteMap initializes and returns a new routeMap .
3101	getLeaf returns Leaf object if a route has been registered .
3102	add adds new route to route tree map .
3103	Name sets name of route .
3104	handle adds new route to the router tree .
3105	Handle registers a new request handle with the given pattern method and handlers .
3106	Combo returns a combo router .
3107	NotFound configurates http . HandlerFunc which is called when no matching route is found . If it is not set http . NotFound is used . Be sure to set 404 response code in your handler .
3108	InternalServerError configurates handler which is called when route handler returns error . If it is not set default handler is used . Be sure to set 500 response code in your handler .
3109	URLFor builds path part of URL by given pair values .
3110	Name sets name of ComboRouter route .
3111	NewResponseWriter creates a ResponseWriter that wraps an http . ResponseWriter
3112	Logger returns a middleware handler that logs the request as it goes in and the response as it goes out .
3113	NewTplFile cerates new template file with given name and data .
3114	NewTemplateFileSystem creates new template file system with given options .
3115	NewTemplateSet initializes a new empty template set .
3116	GenerateETag generates an ETag based on size filename and file modification time
3117	Populate is a short - hand for populating a graph with the given incomplete object values .
3118	String representation suitable for human consumption .
3119	Provide objects to the Graph . The Object documentation describes the impact of various fields .
3120	Populate the incomplete Objects .
3121	Objects returns all known objects named as well as unnamed . The returned elements are not in a stable order .
3122	newPubSub returns a PubSub receiver . Optionally accepts a client to allow for injecting the fake for tests . If client is nil a real client connection to the google pubsub service will be attempted .
3123	Stat sends pubsub receiver s internal stats to specified callback
3124	New App instance
3125	configure loads config from config file schemas . conf aggregation . conf
3126	ParseConfig loads config from config file schemas . conf aggregation . conf
3127	ReloadConfig reloads some settings from config
3128	Stop all socket listeners
3129	MarshalText marshals offset . It s used to handle two special cases newest and oldest .
3130	UnmarshalText unmarshals text to offset . It handles newest and oldest oterwise fallbacks to time . ParseDuration .
3131	MarshalText converts internal enum - like representation of protocol to a text
3132	UnmarshalText converts text from config file to a enum .
3133	UnmarshalText from TOML
3134	NewOptions returns Options struct filled with default values .
3135	Stat sends kafka receiver s internal stats to specified callback
3136	Creates a new cache instance
3137	SetMaxSize of cache
3138	GetShard returns shard under given key
3139	Sets the given value under the specified key .
3140	Pop removes an element from the map and returns it
3141	ParseCarbonlinkRequest from pickle encoded data
3142	NewCarbonlinkListener create new instance of CarbonlinkListener
3143	OnePoint create Points instance with single point
3144	NowPoint create OnePoint with now timestamp
3145	Copy returns copy of object
3146	ParseText parse text protocol Point host . Point . value 42 1422641531 \ n
3147	Eq points check
3148	Match finds the schema for metric or returns false if none found
3149	ParseRetentionDefs parses retention definitions into a Retentions structure
3150	RestoreFromFile read and parse data from single file
3151	RestoreFromDir cache and input dumps from disk to memory
3152	Restore from dump . path
3153	Root creates new test directory
3154	Remove key from queue
3155	NewWhisper create instance of Whisper
3156	NewWhisperAggregation create instance of WhisperAggregation
3157	Match find schema for metric
3158	old version . for benchmarks only
3159	UpdateIntegrationPD updates the PagerDuty Integration . This will replace the existing values with the new values .
3160	GetIntegrationPD gets all the PagerDuty Integrations from the system .
3161	CreateIntegrationSlack creates new Slack Integrations . Use this if you want to setup the integration for the first time or to add more channels .
3162	UpdateIntegrationSlack updates the Slack Integration . This will replace the existing values with the new values .
3163	GetIntegrationSlack gets all the Slack Integrations from the system .
3164	CreateIntegrationAWS adds a new AWS Account in the AWS Integrations . Use this if you want to setup the integration for the first time or to add more accounts .
3165	GetIntegrationAWS gets all the AWS Accounts in the AWS Integrations from Datadog .
3166	DeleteIntegrationAWS removes a specific AWS Account from the AWS Integration .
3167	ListIntegrationGCP gets all Google Cloud Platform Integrations .
3168	CreateIntegrationGCP creates a new Google Cloud Platform Integration .
3169	UpdateIntegrationGCP updates a Google Cloud Platform Integration .
3170	DeleteIntegrationGCP deletes a Google Cloud Platform Integration .
3171	GetDashboardList returns a single dashboard list created on this account .
3172	GetDashboardLists returns a list of all dashboard lists created on this account .
3173	CreateDashboardList returns a single dashboard list created on this account .
3174	UpdateDashboardList returns a single dashboard list created on this account .
3175	GetDashboardListItems fetches the dashboard list s dashboard definitions .
3176	Snapshot creates an image from a graph and returns the URL of the image .
3177	SearchHosts searches through the hosts facet returning matching hostnames .
3178	SearchMetrics searches through the metrics facet returning matching ones .
3179	CreateAlert adds a new alert to the system . This returns a pointer to an Alert so you can pass that to UpdateAlert later if needed .
3180	UpdateAlert takes an alert that was previously retrieved through some method and sends it back to the server .
3181	GetAlert retrieves an alert by identifier .
3182	GetAlerts returns a slice of all alerts .
3183	CreateComment adds a new comment to the system .
3184	CreateRelatedComment adds a new comment but lets you specify the related identifier for the comment .
3185	EditComment changes the message and possibly handle of a particular comment .
3186	CreateMonitor adds a new monitor to the system . This returns a pointer to a monitor so you can pass that to UpdateMonitor later if needed
3187	UpdateMonitor takes a monitor that was previously retrieved through some method and sends it back to the server
3188	GetMonitor retrieves a monitor by identifier
3189	GetMonitorsByName retrieves monitors by name
3190	GetMonitorsByTags retrieves monitors by a slice of tags
3191	GetMonitors returns a slice of all monitors
3192	GetSyntheticsLocations get all test locations
3193	GetBool is a helper routine that returns a boolean representing if a value was set and if so dereferences the pointer to it .
3194	GetIntOk is a helper routine that returns a boolean representing if a value was set and if so dereferences the pointer to it .
3195	GetStringOk is a helper routine that returns a boolean representing if a value was set and if so dereferences the pointer to it .
3196	GetJsonNumberOk is a helper routine that returns a boolean representing if a value was set and if so dereferences the pointer to it .
3197	GetPrecision is a helper routine that returns a boolean representing if a value was set and if so dereferences the pointer to it .
3198	GetStringId is a helper routine that allows screenboards and timeboards to be retrieved by either the legacy numerical format or the new string format . It returns the id as is if it is a string converts it to a string if it is an integer . It return an error if the type is neither string or an integer
3199	GetDashboard returns a single dashboard created on this account .
3200	GetDashboards returns a list of all dashboards created on this account .
3201	CreateDashboard creates a new dashboard when given a Dashboard struct . Note that the Id Resource Url and similar elements are not used in creation .
3202	UpdateDashboard in essence takes a Dashboard struct and persists it back to the server . Use this if you ve updated your local and need to push it back .
3203	InviteUsers takes a slice of email addresses and sends invitations to them .
3204	CreateUser creates an user account for an email address
3205	GetUsers returns all user or an error if not found
3206	GetUser returns the user that match a handle or an error if not found
3207	UpdateUser updates a user with the content of user and returns an error if the update failed
3208	DeleteUser deletes a user and returns an error if deletion failed
3209	GetBoard returns a single dashboard created on this account .
3210	DeleteBoard deletes a dashboard by the identifier .
3211	CreateBoard creates a new dashboard when given a Board struct .
3212	UpdateBoard takes a Board struct and persists it back to the server . Use this if you ve updated your local and need to push it back .
3213	NewClient returns a new datadog . Client which can be used to access the API methods . The expected argument is the API key .
3214	SetKeys changes the value of apiKey and appKey .
3215	Validate checks if the API and application keys are valid .
3216	MuteHost mutes all monitors for the given host
3217	UnmuteHost unmutes all monitors for the given host
3218	GetSilenced returns the Silenced field if non - nil zero value otherwise .
3219	GetSilencedOk returns a tuple with the Silenced field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3220	HasSilenced returns a boolean if a field has been set .
3221	GetState returns the State field if non - nil zero value otherwise .
3222	GetStateOk returns a tuple with the State field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3223	HasState returns a boolean if a field has been set .
3224	GetAlertIdOk returns a tuple with the AlertId field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3225	GetKey returns the Key field if non - nil zero value otherwise .
3226	GetKeyOk returns a tuple with the Key field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3227	HasKey returns a boolean if a field has been set .
3228	GetFacetOk returns a tuple with the Facet field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3229	GetOrder returns the Order field if non - nil zero value otherwise .
3230	GetOrderOk returns a tuple with the Order field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3231	HasOrder returns a boolean if a field has been set .
3232	GetAuthorHandle returns the AuthorHandle field if non - nil zero value otherwise .
3233	GetAuthorHandleOk returns a tuple with the AuthorHandle field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3234	HasAuthorHandle returns a boolean if a field has been set .
3235	GetIsReadOnly returns the IsReadOnly field if non - nil zero value otherwise .
3236	GetIsReadOnlyOk returns a tuple with the IsReadOnly field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3237	HasIsReadOnly returns a boolean if a field has been set .
3238	GetLayout returns the Layout field if non - nil zero value otherwise .
3239	GetLayoutOk returns a tuple with the Layout field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3240	HasLayout returns a boolean if a field has been set .
3241	GetShowPresent returns the ShowPresent field if non - nil zero value otherwise .
3242	GetShowPresentOk returns a tuple with the ShowPresent field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3243	HasShowPresent returns a boolean if a field has been set .
3244	GetChannelName returns the ChannelName field if non - nil zero value otherwise .
3245	GetChannelNameOk returns a tuple with the ChannelName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3246	HasChannelName returns a boolean if a field has been set .
3247	GetTransferAllUserComments returns the TransferAllUserComments field if non - nil zero value otherwise .
3248	GetTransferAllUserCommentsOk returns a tuple with the TransferAllUserComments field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3249	HasTransferAllUserComments returns a boolean if a field has been set .
3250	GetHostName returns the HostName field if non - nil zero value otherwise .
3251	GetHostNameOk returns a tuple with the HostName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3252	HasHostName returns a boolean if a field has been set .
3253	GetTimestamp returns the Timestamp field if non - nil zero value otherwise .
3254	GetTimestampOk returns a tuple with the Timestamp field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3255	HasTimestamp returns a boolean if a field has been set .
3256	GetRelatedId returns the RelatedId field if non - nil zero value otherwise .
3257	GetRelatedIdOk returns a tuple with the RelatedId field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3258	HasRelatedId returns a boolean if a field has been set .
3259	GetImageURL returns the ImageURL field if non - nil zero value otherwise .
3260	GetImageURLOk returns a tuple with the ImageURL field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3261	HasImageURL returns a boolean if a field has been set .
3262	GetInvert returns the Invert field if non - nil zero value otherwise .
3263	GetInvertOk returns a tuple with the Invert field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3264	HasInvert returns a boolean if a field has been set .
3265	GetIcon returns the Icon field if non - nil zero value otherwise .
3266	GetIconOk returns a tuple with the Icon field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3267	HasIcon returns a boolean if a field has been set .
3268	GetCustomImageUrl returns the CustomImageUrl field if non - nil zero value otherwise .
3269	GetCustomImageUrlOk returns a tuple with the CustomImageUrl field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3270	HasCustomImageUrl returns a boolean if a field has been set .
3271	GetInverted returns the Inverted field if non - nil zero value otherwise .
3272	GetInvertedOk returns a tuple with the Inverted field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3273	HasInverted returns a boolean if a field has been set .
3274	GetDashboardCount returns the DashboardCount field if non - nil zero value otherwise .
3275	GetDashboardCountOk returns a tuple with the DashboardCount field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3276	HasDashboardCount returns a boolean if a field has been set .
3277	GetModified returns the Modified field if non - nil zero value otherwise .
3278	GetModifiedOk returns a tuple with the Modified field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3279	HasModified returns a boolean if a field has been set .
3280	GetActive returns the Active field if non - nil zero value otherwise .
3281	GetActiveOk returns a tuple with the Active field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3282	HasActive returns a boolean if a field has been set .
3283	GetCanceled returns the Canceled field if non - nil zero value otherwise .
3284	GetCanceledOk returns a tuple with the Canceled field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3285	HasCanceled returns a boolean if a field has been set .
3286	GetMonitorId returns the MonitorId field if non - nil zero value otherwise .
3287	GetMonitorIdOk returns a tuple with the MonitorId field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3288	HasMonitorId returns a boolean if a field has been set .
3289	GetParentId returns the ParentId field if non - nil zero value otherwise .
3290	GetParentIdOk returns a tuple with the ParentId field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3291	HasParentId returns a boolean if a field has been set .
3292	GetRecurrence returns the Recurrence field if non - nil zero value otherwise .
3293	GetRecurrenceOk returns a tuple with the Recurrence field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3294	HasRecurrence returns a boolean if a field has been set .
3295	GetTimezone returns the Timezone field if non - nil zero value otherwise .
3296	GetTimezoneOk returns a tuple with the Timezone field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3297	HasTimezone returns a boolean if a field has been set .
3298	GetAlertType returns the AlertType field if non - nil zero value otherwise .
3299	GetAlertTypeOk returns a tuple with the AlertType field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3300	HasAlertType returns a boolean if a field has been set .
3301	GetEventType returns the EventType field if non - nil zero value otherwise .
3302	GetEventTypeOk returns a tuple with the EventType field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3303	HasEventType returns a boolean if a field has been set .
3304	GetPriority returns the Priority field if non - nil zero value otherwise .
3305	GetPriorityOk returns a tuple with the Priority field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3306	HasPriority returns a boolean if a field has been set .
3307	GetSourceType returns the SourceType field if non - nil zero value otherwise .
3308	GetSourceTypeOk returns a tuple with the SourceType field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3309	HasSourceType returns a boolean if a field has been set .
3310	GetDefinition returns the Definition field if non - nil zero value otherwise .
3311	GetDefinitionOk returns a tuple with the Definition field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3312	HasDefinition returns a boolean if a field has been set .
3313	GetIncludeNoMetricHosts returns the IncludeNoMetricHosts field if non - nil zero value otherwise .
3314	GetIncludeNoMetricHostsOk returns a tuple with the IncludeNoMetricHosts field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3315	HasIncludeNoMetricHosts returns a boolean if a field has been set .
3316	GetIncludeUngroupedHosts returns the IncludeUngroupedHosts field if non - nil zero value otherwise .
3317	GetIncludeUngroupedHostsOk returns a tuple with the IncludeUngroupedHosts field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3318	HasIncludeUngroupedHosts returns a boolean if a field has been set .
3319	GetVal returns the Val field if non - nil zero value otherwise .
3320	GetValOk returns a tuple with the Val field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3321	HasVal returns a boolean if a field has been set .
3322	GetOrderDirection returns the OrderDirection field if non - nil zero value otherwise .
3323	GetOrderDirectionOk returns a tuple with the OrderDirection field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3324	HasOrderDirection returns a boolean if a field has been set .
3325	GetStacked returns the Stacked field if non - nil zero value otherwise .
3326	GetStackedOk returns a tuple with the Stacked field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3327	HasStacked returns a boolean if a field has been set .
3328	GetLastNoDataTs returns the LastNoDataTs field if non - nil zero value otherwise .
3329	GetLastNoDataTsOk returns a tuple with the LastNoDataTs field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3330	HasLastNoDataTs returns a boolean if a field has been set .
3331	GetLastNotifiedTs returns the LastNotifiedTs field if non - nil zero value otherwise .
3332	GetLastNotifiedTsOk returns a tuple with the LastNotifiedTs field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3333	HasLastNotifiedTs returns a boolean if a field has been set .
3334	GetLastResolvedTs returns the LastResolvedTs field if non - nil zero value otherwise .
3335	GetLastResolvedTsOk returns a tuple with the LastResolvedTs field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3336	HasLastResolvedTs returns a boolean if a field has been set .
3337	GetLastTriggeredTs returns the LastTriggeredTs field if non - nil zero value otherwise .
3338	GetLastTriggeredTsOk returns a tuple with the LastTriggeredTs field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3339	HasLastTriggeredTs returns a boolean if a field has been set .
3340	GetTriggeringValue returns the TriggeringValue field if non - nil zero value otherwise .
3341	GetTriggeringValueOk returns a tuple with the TriggeringValue field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3342	HasTriggeringValue returns a boolean if a field has been set .
3343	GetEndTime returns the EndTime field if non - nil zero value otherwise .
3344	GetEndTimeOk returns a tuple with the EndTime field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3345	HasEndTime returns a boolean if a field has been set .
3346	GetOverride returns the Override field if non - nil zero value otherwise .
3347	GetOverrideOk returns a tuple with the Override field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3348	HasOverride returns a boolean if a field has been set .
3349	GetFill returns the Fill field if non - nil zero value otherwise .
3350	GetFillOk returns a tuple with the Fill field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3351	HasFill returns a boolean if a field has been set .
3352	GetSize returns the Size field if non - nil zero value otherwise .
3353	GetSizeOk returns a tuple with the Size field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3354	HasSize returns a boolean if a field has been set .
3355	GetRoleNameOk returns a tuple with the RoleName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3356	GetAccountIDOk returns a tuple with the AccountID field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3357	GetAuthProviderX509CertURL returns the AuthProviderX509CertURL field if non - nil zero value otherwise .
3358	GetAuthProviderX509CertURLOk returns a tuple with the AuthProviderX509CertURL field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3359	HasAuthProviderX509CertURL returns a boolean if a field has been set .
3360	GetAuthURI returns the AuthURI field if non - nil zero value otherwise .
3361	GetAuthURIOk returns a tuple with the AuthURI field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3362	HasAuthURI returns a boolean if a field has been set .
3363	GetClientID returns the ClientID field if non - nil zero value otherwise .
3364	GetClientIDOk returns a tuple with the ClientID field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3365	HasClientID returns a boolean if a field has been set .
3366	GetClientX509CertURL returns the ClientX509CertURL field if non - nil zero value otherwise .
3367	GetClientX509CertURLOk returns a tuple with the ClientX509CertURL field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3368	HasClientX509CertURL returns a boolean if a field has been set .
3369	GetHostFiltersOk returns a tuple with the HostFilters field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3370	GetPrivateKey returns the PrivateKey field if non - nil zero value otherwise .
3371	GetPrivateKeyOk returns a tuple with the PrivateKey field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3372	HasPrivateKey returns a boolean if a field has been set .
3373	GetPrivateKeyID returns the PrivateKeyID field if non - nil zero value otherwise .
3374	GetPrivateKeyIDOk returns a tuple with the PrivateKeyID field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3375	HasPrivateKeyID returns a boolean if a field has been set .
3376	GetTokenURI returns the TokenURI field if non - nil zero value otherwise .
3377	GetTokenURIOk returns a tuple with the TokenURI field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3378	HasTokenURI returns a boolean if a field has been set .
3379	GetClientEmailOk returns a tuple with the ClientEmail field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3380	GetProjectIDOk returns a tuple with the ProjectID field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3381	GetAPITokenOk returns a tuple with the APIToken field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3382	GetSubdomainOk returns a tuple with the Subdomain field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3383	GetID returns the ID field if non - nil zero value otherwise .
3384	GetIDOk returns a tuple with the ID field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3385	HasID returns a boolean if a field has been set .
3386	GetPerUnit returns the PerUnit field if non - nil zero value otherwise .
3387	GetPerUnitOk returns a tuple with the PerUnit field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3388	HasPerUnit returns a boolean if a field has been set .
3389	GetShortName returns the ShortName field if non - nil zero value otherwise .
3390	GetShortNameOk returns a tuple with the ShortName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3391	HasShortName returns a boolean if a field has been set .
3392	GetStatsdInterval returns the StatsdInterval field if non - nil zero value otherwise .
3393	GetStatsdIntervalOk returns a tuple with the StatsdInterval field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3394	HasStatsdInterval returns a boolean if a field has been set .
3395	GetOverallState returns the OverallState field if non - nil zero value otherwise .
3396	GetOverallStateOk returns a tuple with the OverallState field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3397	HasOverallState returns a boolean if a field has been set .
3398	GetOverallStateModified returns the OverallStateModified field if non - nil zero value otherwise .
3399	GetOverallStateModifiedOk returns a tuple with the OverallStateModified field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3400	HasOverallStateModified returns a boolean if a field has been set .
3401	GetBackgroundColor returns the BackgroundColor field if non - nil zero value otherwise .
3402	GetBackgroundColorOk returns a tuple with the BackgroundColor field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3403	HasBackgroundColor returns a boolean if a field has been set .
3404	GetContent returns the Content field if non - nil zero value otherwise .
3405	GetContentOk returns a tuple with the Content field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3406	HasContent returns a boolean if a field has been set .
3407	GetShowTick returns the ShowTick field if non - nil zero value otherwise .
3408	GetShowTickOk returns a tuple with the ShowTick field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3409	HasShowTick returns a boolean if a field has been set .
3410	GetEnableLogsSample returns the EnableLogsSample field if non - nil zero value otherwise .
3411	GetEnableLogsSampleOk returns a tuple with the EnableLogsSample field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3412	HasEnableLogsSample returns a boolean if a field has been set .
3413	GetEscalationMessage returns the EscalationMessage field if non - nil zero value otherwise .
3414	GetEscalationMessageOk returns a tuple with the EscalationMessage field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3415	HasEscalationMessage returns a boolean if a field has been set .
3416	GetEvaluationDelay returns the EvaluationDelay field if non - nil zero value otherwise .
3417	GetEvaluationDelayOk returns a tuple with the EvaluationDelay field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3418	HasEvaluationDelay returns a boolean if a field has been set .
3419	GetIncludeTags returns the IncludeTags field if non - nil zero value otherwise .
3420	GetIncludeTagsOk returns a tuple with the IncludeTags field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3421	HasIncludeTags returns a boolean if a field has been set .
3422	GetLocked returns the Locked field if non - nil zero value otherwise .
3423	GetLockedOk returns a tuple with the Locked field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3424	HasLocked returns a boolean if a field has been set .
3425	GetNewHostDelay returns the NewHostDelay field if non - nil zero value otherwise .
3426	GetNewHostDelayOk returns a tuple with the NewHostDelay field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3427	HasNewHostDelay returns a boolean if a field has been set .
3428	GetNotifyAudit returns the NotifyAudit field if non - nil zero value otherwise .
3429	GetNotifyAuditOk returns a tuple with the NotifyAudit field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3430	HasNotifyAudit returns a boolean if a field has been set .
3431	GetQueryConfig returns the QueryConfig field if non - nil zero value otherwise .
3432	GetQueryConfigOk returns a tuple with the QueryConfig field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3433	HasQueryConfig returns a boolean if a field has been set .
3434	GetRenotifyInterval returns the RenotifyInterval field if non - nil zero value otherwise .
3435	GetRenotifyIntervalOk returns a tuple with the RenotifyInterval field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3436	HasRenotifyInterval returns a boolean if a field has been set .
3437	GetRequireFullWindow returns the RequireFullWindow field if non - nil zero value otherwise .
3438	GetRequireFullWindowOk returns a tuple with the RequireFullWindow field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3439	HasRequireFullWindow returns a boolean if a field has been set .
3440	GetThresholds returns the Thresholds field if non - nil zero value otherwise .
3441	GetThresholdsOk returns a tuple with the Thresholds field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3442	HasThresholds returns a boolean if a field has been set .
3443	GetThresholdWindows returns the ThresholdWindows field if non - nil zero value otherwise .
3444	GetThresholdWindowsOk returns a tuple with the ThresholdWindows field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3445	HasThresholdWindows returns a boolean if a field has been set .
3446	GetTimeoutH returns the TimeoutH field if non - nil zero value otherwise .
3447	GetTimeoutHOk returns a tuple with the TimeoutH field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3448	HasTimeoutH returns a boolean if a field has been set .
3449	GetSeconds returns the Seconds field if non - nil zero value otherwise .
3450	GetSecondsOk returns a tuple with the Seconds field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3451	HasSeconds returns a boolean if a field has been set .
3452	GetLogSet returns the LogSet field if non - nil zero value otherwise .
3453	GetLogSetOk returns a tuple with the LogSet field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3454	HasLogSet returns a boolean if a field has been set .
3455	GetQueryIsFailed returns the QueryIsFailed field if non - nil zero value otherwise .
3456	GetQueryIsFailedOk returns a tuple with the QueryIsFailed field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3457	HasQueryIsFailed returns a boolean if a field has been set .
3458	GetQueryString returns the QueryString field if non - nil zero value otherwise .
3459	GetQueryStringOk returns a tuple with the QueryString field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3460	HasQueryString returns a boolean if a field has been set .
3461	GetTimeRange returns the TimeRange field if non - nil zero value otherwise .
3462	GetTimeRangeOk returns a tuple with the TimeRange field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3463	HasTimeRange returns a boolean if a field has been set .
3464	GetUntilDate returns the UntilDate field if non - nil zero value otherwise .
3465	GetUntilDateOk returns a tuple with the UntilDate field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3466	HasUntilDate returns a boolean if a field has been set .
3467	GetUntilOccurrences returns the UntilOccurrences field if non - nil zero value otherwise .
3468	GetUntilOccurrencesOk returns a tuple with the UntilOccurrences field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3469	HasUntilOccurrences returns a boolean if a field has been set .
3470	GetAPIKey returns the APIKey field if non - nil zero value otherwise .
3471	GetAPIKeyOk returns a tuple with the APIKey field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3472	HasAPIKey returns a boolean if a field has been set .
3473	GetComment returns the Comment field if non - nil zero value otherwise .
3474	GetCommentOk returns a tuple with the Comment field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3475	HasComment returns a boolean if a field has been set .
3476	GetDashboard returns the Dashboard field if non - nil zero value otherwise .
3477	GetDashboardOk returns a tuple with the Dashboard field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3478	HasDashboard returns a boolean if a field has been set .
3479	GetEvent returns the Event field if non - nil zero value otherwise .
3480	GetEventOk returns a tuple with the Event field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3481	HasEvent returns a boolean if a field has been set .
3482	GetTags returns the Tags field if non - nil zero value otherwise .
3483	GetTagsOk returns a tuple with the Tags field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3484	HasTags returns a boolean if a field has been set .
3485	GetThreshold returns the Threshold field if non - nil zero value otherwise .
3486	GetThresholdOk returns a tuple with the Threshold field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3487	HasThreshold returns a boolean if a field has been set .
3488	GetXaxis returns the Xaxis field if non - nil zero value otherwise .
3489	GetXaxisOk returns a tuple with the Xaxis field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3490	HasXaxis returns a boolean if a field has been set .
3491	GetShared returns the Shared field if non - nil zero value otherwise .
3492	GetSharedOk returns a tuple with the Shared field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3493	HasShared returns a boolean if a field has been set .
3494	GetAggr returns the Aggr field if non - nil zero value otherwise .
3495	GetAggrOk returns a tuple with the Aggr field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3496	HasAggr returns a boolean if a field has been set .
3497	GetDisplayNameOk returns a tuple with the DisplayName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3498	GetLength returns the Length field if non - nil zero value otherwise .
3499	GetLengthOk returns a tuple with the Length field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3500	HasLength returns a boolean if a field has been set .
3501	GetScope returns the Scope field if non - nil zero value otherwise .
3502	GetScopeOk returns a tuple with the Scope field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3503	HasScope returns a boolean if a field has been set .
3504	GetUnits returns the Units field if non - nil zero value otherwise .
3505	GetUnitsOk returns a tuple with the Units field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3506	HasUnits returns a boolean if a field has been set .
3507	GetServiceKeyOk returns a tuple with the ServiceKey field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3508	GetOperator returns the Operator field if non - nil zero value otherwise .
3509	GetOperatorOk returns a tuple with the Operator field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3510	HasOperator returns a boolean if a field has been set .
3511	GetProperty returns the Property field if non - nil zero value otherwise .
3512	GetPropertyOk returns a tuple with the Property field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3513	HasProperty returns a boolean if a field has been set .
3514	GetRequest returns the Request field if non - nil zero value otherwise .
3515	GetRequestOk returns a tuple with the Request field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3516	HasRequest returns a boolean if a field has been set .
3517	GetIsMobile returns the IsMobile field if non - nil zero value otherwise .
3518	GetIsMobileOk returns a tuple with the IsMobile field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3519	HasIsMobile returns a boolean if a field has been set .
3520	GetUserAgent returns the UserAgent field if non - nil zero value otherwise .
3521	GetUserAgentOk returns a tuple with the UserAgent field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3522	HasUserAgent returns a boolean if a field has been set .
3523	GetRegion returns the Region field if non - nil zero value otherwise .
3524	GetRegionOk returns a tuple with the Region field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3525	HasRegion returns a boolean if a field has been set .
3526	GetFollowRedirects returns the FollowRedirects field if non - nil zero value otherwise .
3527	GetFollowRedirectsOk returns a tuple with the FollowRedirects field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3528	HasFollowRedirects returns a boolean if a field has been set .
3529	GetMinFailureDuration returns the MinFailureDuration field if non - nil zero value otherwise .
3530	GetMinFailureDurationOk returns a tuple with the MinFailureDuration field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3531	HasMinFailureDuration returns a boolean if a field has been set .
3532	GetMinLocationFailed returns the MinLocationFailed field if non - nil zero value otherwise .
3533	GetMinLocationFailedOk returns a tuple with the MinLocationFailed field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3534	HasMinLocationFailed returns a boolean if a field has been set .
3535	GetTickEvery returns the TickEvery field if non - nil zero value otherwise .
3536	GetTickEveryOk returns a tuple with the TickEvery field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3537	HasTickEvery returns a boolean if a field has been set .
3538	GetBody returns the Body field if non - nil zero value otherwise .
3539	GetBodyOk returns a tuple with the Body field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3540	HasBody returns a boolean if a field has been set .
3541	GetMethod returns the Method field if non - nil zero value otherwise .
3542	GetMethodOk returns a tuple with the Method field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3543	HasMethod returns a boolean if a field has been set .
3544	GetTimeout returns the Timeout field if non - nil zero value otherwise .
3545	GetTimeoutOk returns a tuple with the Timeout field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3546	HasTimeout returns a boolean if a field has been set .
3547	GetConfig returns the Config field if non - nil zero value otherwise .
3548	GetConfigOk returns a tuple with the Config field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3549	HasConfig returns a boolean if a field has been set .
3550	GetDeletedAt returns the DeletedAt field if non - nil zero value otherwise .
3551	GetDeletedAtOk returns a tuple with the DeletedAt field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3552	HasDeletedAt returns a boolean if a field has been set .
3553	GetModifiedBy returns the ModifiedBy field if non - nil zero value otherwise .
3554	GetModifiedByOk returns a tuple with the ModifiedBy field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3555	HasModifiedBy returns a boolean if a field has been set .
3556	GetMonitorStatus returns the MonitorStatus field if non - nil zero value otherwise .
3557	GetMonitorStatusOk returns a tuple with the MonitorStatus field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3558	HasMonitorStatus returns a boolean if a field has been set .
3559	GetPublicId returns the PublicId field if non - nil zero value otherwise .
3560	GetPublicIdOk returns a tuple with the PublicId field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3561	HasPublicId returns a boolean if a field has been set .
3562	GetDefault returns the Default field if non - nil zero value otherwise .
3563	GetDefaultOk returns a tuple with the Default field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3564	HasDefault returns a boolean if a field has been set .
3565	GetPrefix returns the Prefix field if non - nil zero value otherwise .
3566	GetPrefixOk returns a tuple with the Prefix field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3567	HasPrefix returns a boolean if a field has been set .
3568	GetCritical returns the Critical field if non - nil zero value otherwise .
3569	GetCriticalOk returns a tuple with the Critical field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3570	HasCritical returns a boolean if a field has been set .
3571	GetCriticalRecovery returns the CriticalRecovery field if non - nil zero value otherwise .
3572	GetCriticalRecoveryOk returns a tuple with the CriticalRecovery field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3573	HasCriticalRecovery returns a boolean if a field has been set .
3574	GetOk returns the Ok field if non - nil zero value otherwise .
3575	GetOkOk returns a tuple with the Ok field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3576	HasOk returns a boolean if a field has been set .
3577	GetTimeAggregator returns the TimeAggregator field if non - nil zero value otherwise .
3578	GetTimeAggregatorOk returns a tuple with the TimeAggregator field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3579	HasTimeAggregator returns a boolean if a field has been set .
3580	GetUnknown returns the Unknown field if non - nil zero value otherwise .
3581	GetUnknownOk returns a tuple with the Unknown field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3582	HasUnknown returns a boolean if a field has been set .
3583	GetWarning returns the Warning field if non - nil zero value otherwise .
3584	GetWarningOk returns a tuple with the Warning field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3585	HasWarning returns a boolean if a field has been set .
3586	GetWarningRecovery returns the WarningRecovery field if non - nil zero value otherwise .
3587	GetWarningRecoveryOk returns a tuple with the WarningRecovery field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3588	HasWarningRecovery returns a boolean if a field has been set .
3589	GetRecoveryWindow returns the RecoveryWindow field if non - nil zero value otherwise .
3590	GetRecoveryWindowOk returns a tuple with the RecoveryWindow field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3591	HasRecoveryWindow returns a boolean if a field has been set .
3592	GetTriggerWindow returns the TriggerWindow field if non - nil zero value otherwise .
3593	GetTriggerWindowOk returns a tuple with the TriggerWindow field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3594	HasTriggerWindow returns a boolean if a field has been set .
3595	GetQueryType returns the QueryType field if non - nil zero value otherwise .
3596	GetQueryTypeOk returns a tuple with the QueryType field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3597	HasQueryType returns a boolean if a field has been set .
3598	GetTextFilter returns the TextFilter field if non - nil zero value otherwise .
3599	GetTextFilterOk returns a tuple with the TextFilter field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3600	HasTextFilter returns a boolean if a field has been set .
3601	GetFrom returns the From field if non - nil zero value otherwise .
3602	GetFromOk returns a tuple with the From field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3603	HasFrom returns a boolean if a field has been set .
3604	GetLive returns the Live field if non - nil zero value otherwise .
3605	GetLiveOk returns a tuple with the Live field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3606	HasLive returns a boolean if a field has been set .
3607	GetTo returns the To field if non - nil zero value otherwise .
3608	GetToOk returns a tuple with the To field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3609	HasTo returns a boolean if a field has been set .
3610	GetShowLegend returns the ShowLegend field if non - nil zero value otherwise .
3611	GetShowLegendOk returns a tuple with the ShowLegend field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3612	HasShowLegend returns a boolean if a field has been set .
3613	GetLineType returns the LineType field if non - nil zero value otherwise .
3614	GetLineTypeOk returns a tuple with the LineType field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3615	HasLineType returns a boolean if a field has been set .
3616	GetLineWidth returns the LineWidth field if non - nil zero value otherwise .
3617	GetLineWidthOk returns a tuple with the LineWidth field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3618	HasLineWidth returns a boolean if a field has been set .
3619	GetNewStatus returns the NewStatus field if non - nil zero value otherwise .
3620	GetNewStatusOk returns a tuple with the NewStatus field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3621	HasNewStatus returns a boolean if a field has been set .
3622	GetService returns the Service field if non - nil zero value otherwise .
3623	GetServiceOk returns a tuple with the Service field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3624	HasService returns a boolean if a field has been set .
3625	GetShowBreakdown returns the ShowBreakdown field if non - nil zero value otherwise .
3626	GetShowBreakdownOk returns a tuple with the ShowBreakdown field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3627	HasShowBreakdown returns a boolean if a field has been set .
3628	GetShowDistribution returns the ShowDistribution field if non - nil zero value otherwise .
3629	GetShowDistributionOk returns a tuple with the ShowDistribution field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3630	HasShowDistribution returns a boolean if a field has been set .
3631	GetShowErrors returns the ShowErrors field if non - nil zero value otherwise .
3632	GetShowErrorsOk returns a tuple with the ShowErrors field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3633	HasShowErrors returns a boolean if a field has been set .
3634	GetShowHits returns the ShowHits field if non - nil zero value otherwise .
3635	GetShowHitsOk returns a tuple with the ShowHits field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3636	HasShowHits returns a boolean if a field has been set .
3637	GetShowLatency returns the ShowLatency field if non - nil zero value otherwise .
3638	GetShowLatencyOk returns a tuple with the ShowLatency field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3639	HasShowLatency returns a boolean if a field has been set .
3640	GetShowResourceList returns the ShowResourceList field if non - nil zero value otherwise .
3641	GetShowResourceListOk returns a tuple with the ShowResourceList field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3642	HasShowResourceList returns a boolean if a field has been set .
3643	GetSizeFormat returns the SizeFormat field if non - nil zero value otherwise .
3644	GetSizeFormatOk returns a tuple with the SizeFormat field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3645	HasSizeFormat returns a boolean if a field has been set .
3646	GetSpanName returns the SpanName field if non - nil zero value otherwise .
3647	GetSpanNameOk returns a tuple with the SpanName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3648	HasSpanName returns a boolean if a field has been set .
3649	GetFromTs returns the FromTs field if non - nil zero value otherwise .
3650	GetFromTsOk returns a tuple with the FromTs field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3651	HasFromTs returns a boolean if a field has been set .
3652	GetToTs returns the ToTs field if non - nil zero value otherwise .
3653	GetToTsOk returns a tuple with the ToTs field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3654	HasToTs returns a boolean if a field has been set .
3655	GetAlertID returns the AlertID field if non - nil zero value otherwise .
3656	GetAlertIDOk returns a tuple with the AlertID field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3657	HasAlertID returns a boolean if a field has been set .
3658	GetAutoRefresh returns the AutoRefresh field if non - nil zero value otherwise .
3659	GetAutoRefreshOk returns a tuple with the AutoRefresh field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3660	HasAutoRefresh returns a boolean if a field has been set .
3661	GetBgcolor returns the Bgcolor field if non - nil zero value otherwise .
3662	GetBgcolorOk returns a tuple with the Bgcolor field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3663	HasBgcolor returns a boolean if a field has been set .
3664	GetColumns returns the Columns field if non - nil zero value otherwise .
3665	GetColumnsOk returns a tuple with the Columns field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3666	HasColumns returns a boolean if a field has been set .
3667	GetHTML returns the HTML field if non - nil zero value otherwise .
3668	GetHTMLOk returns a tuple with the HTML field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3669	HasHTML returns a boolean if a field has been set .
3670	GetLayoutVersion returns the LayoutVersion field if non - nil zero value otherwise .
3671	GetLayoutVersionOk returns a tuple with the LayoutVersion field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3672	HasLayoutVersion returns a boolean if a field has been set .
3673	GetLegend returns the Legend field if non - nil zero value otherwise .
3674	GetLegendOk returns a tuple with the Legend field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3675	HasLegend returns a boolean if a field has been set .
3676	GetManageStatusShowTitle returns the ManageStatusShowTitle field if non - nil zero value otherwise .
3677	GetManageStatusShowTitleOk returns a tuple with the ManageStatusShowTitle field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3678	HasManageStatusShowTitle returns a boolean if a field has been set .
3679	GetManageStatusTitleAlign returns the ManageStatusTitleAlign field if non - nil zero value otherwise .
3680	GetManageStatusTitleAlignOk returns a tuple with the ManageStatusTitleAlign field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3681	HasManageStatusTitleAlign returns a boolean if a field has been set .
3682	GetManageStatusTitleSize returns the ManageStatusTitleSize field if non - nil zero value otherwise .
3683	GetManageStatusTitleSizeOk returns a tuple with the ManageStatusTitleSize field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3684	HasManageStatusTitleSize returns a boolean if a field has been set .
3685	GetManageStatusTitleText returns the ManageStatusTitleText field if non - nil zero value otherwise .
3686	GetManageStatusTitleTextOk returns a tuple with the ManageStatusTitleText field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3687	HasManageStatusTitleText returns a boolean if a field has been set .
3688	GetMonitor returns the Monitor field if non - nil zero value otherwise .
3689	GetMonitorOk returns a tuple with the Monitor field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3690	HasMonitor returns a boolean if a field has been set .
3691	GetMustShowBreakdown returns the MustShowBreakdown field if non - nil zero value otherwise .
3692	GetMustShowBreakdownOk returns a tuple with the MustShowBreakdown field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3693	HasMustShowBreakdown returns a boolean if a field has been set .
3694	GetMustShowDistribution returns the MustShowDistribution field if non - nil zero value otherwise .
3695	GetMustShowDistributionOk returns a tuple with the MustShowDistribution field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3696	HasMustShowDistribution returns a boolean if a field has been set .
3697	GetMustShowErrors returns the MustShowErrors field if non - nil zero value otherwise .
3698	GetMustShowErrorsOk returns a tuple with the MustShowErrors field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3699	HasMustShowErrors returns a boolean if a field has been set .
3700	GetMustShowHits returns the MustShowHits field if non - nil zero value otherwise .
3701	GetMustShowHitsOk returns a tuple with the MustShowHits field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3702	HasMustShowHits returns a boolean if a field has been set .
3703	GetMustShowLatency returns the MustShowLatency field if non - nil zero value otherwise .
3704	GetMustShowLatencyOk returns a tuple with the MustShowLatency field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3705	HasMustShowLatency returns a boolean if a field has been set .
3706	GetMustShowResourceList returns the MustShowResourceList field if non - nil zero value otherwise .
3707	GetMustShowResourceListOk returns a tuple with the MustShowResourceList field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3708	HasMustShowResourceList returns a boolean if a field has been set .
3709	GetParams returns the Params field if non - nil zero value otherwise .
3710	GetParamsOk returns a tuple with the Params field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3711	HasParams returns a boolean if a field has been set .
3712	GetServiceService returns the ServiceService field if non - nil zero value otherwise .
3713	GetServiceServiceOk returns a tuple with the ServiceService field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3714	HasServiceService returns a boolean if a field has been set .
3715	GetSizeVersion returns the SizeVersion field if non - nil zero value otherwise .
3716	GetSizeVersionOk returns a tuple with the SizeVersion field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3717	HasSizeVersion returns a boolean if a field has been set .
3718	GetTextSize returns the TextSize field if non - nil zero value otherwise .
3719	GetTextSizeOk returns a tuple with the TextSize field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3720	HasTextSize returns a boolean if a field has been set .
3721	GetTick returns the Tick field if non - nil zero value otherwise .
3722	GetTickOk returns a tuple with the Tick field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3723	HasTick returns a boolean if a field has been set .
3724	GetTileDef returns the TileDef field if non - nil zero value otherwise .
3725	GetTileDefOk returns a tuple with the TileDef field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3726	HasTileDef returns a boolean if a field has been set .
3727	GetTitleText returns the TitleText field if non - nil zero value otherwise .
3728	GetTitleTextOk returns a tuple with the TitleText field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3729	HasTitleText returns a boolean if a field has been set .
3730	GetURL returns the URL field if non - nil zero value otherwise .
3731	GetURLOk returns a tuple with the URL field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3732	HasURL returns a boolean if a field has been set .
3733	GetCompute returns the Compute field if non - nil zero value otherwise .
3734	GetComputeOk returns a tuple with the Compute field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3735	HasCompute returns a boolean if a field has been set .
3736	GetIndex returns the Index field if non - nil zero value otherwise .
3737	GetIndexOk returns a tuple with the Index field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3738	HasIndex returns a boolean if a field has been set .
3739	GetSearch returns the Search field if non - nil zero value otherwise .
3740	GetSearchOk returns a tuple with the Search field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3741	HasSearch returns a boolean if a field has been set .
3742	GetHideValue returns the HideValue field if non - nil zero value otherwise .
3743	GetHideValueOk returns a tuple with the HideValue field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3744	HasHideValue returns a boolean if a field has been set .
3745	GetImageUrl returns the ImageUrl field if non - nil zero value otherwise .
3746	GetImageUrlOk returns a tuple with the ImageUrl field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3747	HasImageUrl returns a boolean if a field has been set .
3748	GetAliasName returns the AliasName field if non - nil zero value otherwise .
3749	GetAliasNameOk returns a tuple with the AliasName field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3750	HasAliasName returns a boolean if a field has been set .
3751	GetSearchBy returns the SearchBy field if non - nil zero value otherwise .
3752	GetSearchByOk returns a tuple with the SearchBy field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3753	HasSearchBy returns a boolean if a field has been set .
3754	GetIncludeUnits returns the IncludeUnits field if non - nil zero value otherwise .
3755	GetIncludeUnitsOk returns a tuple with the IncludeUnits field if it s non - nil zero value otherwise and a boolean to check if the value has been set .
3756	HasIncludeUnits returns a boolean if a field has been set .
3757	dump sorts the results and writes the generated code to a file
3758	newAccessor returns a new accessor to be processed later
3759	addIdent adds an accessor for an identifier for a given receiver and field
3760	addSelectorExpr adds an accessor for an identifier selector expression for a given receiver and field
3761	addMypType adds an accessor for a map type for a given receiver and field
3762	addArrayType adds an accessor for a array type for a given receiver and field
3763	CreateDowntime adds a new downtme to the system . This returns a pointer to a Downtime so you can pass that to UpdateDowntime or CancelDowntime later if needed .
3764	UpdateDowntime takes a downtime that was previously retrieved through some method and sends it back to the server .
3765	Getdowntime retrieves an downtime by identifier .
3766	GetDowntimes returns a slice of all downtimes .
3767	MarshalJSON is a custom method for handling datetime marshalling
3768	UnmarshalJSON is a custom method for handling datetime unmarshalling
3769	GetAPIKeys returns all API keys or error on failure
3770	GetAPIKey returns a single API key or error on failure
3771	CreateAPIKey creates an API key from given struct and fills the rest of its fields or returns an error on failure
3772	DeleteAPIKey deletes API key given by key returns an error
3773	PostMetrics takes as input a slice of metrics and then posts them up to the server for posting data .
3774	GetScreenboard returns a single screenboard created on this account .
3775	GetScreenboards returns a list of all screenboards created on this account .
3776	CreateScreenboard creates a new screenboard when given a Screenboard struct . Note that the Id Resource Url and similar elements are not used in creation .
3777	UpdateScreenboard in essence takes a Screenboard struct and persists it back to the server . Use this if you ve updated your local and need to push it back .
3778	ShareScreenboard shares an existing screenboard it takes and updates ScreenShareResponse
3779	RevokeScreenboard revokes a currently shared screenboard
3780	GetTags returns a map of tags .
3781	GetHostTags returns a slice of tags for a given host and source .
3782	AddTagsToHost does exactly what it says on the tin . Given a list of tags add them to the host . The source is optionally specified and defaults to users as per the API documentation .
3783	RemoveHostTags removes all tags from a host for the given source . If none is given the API defaults to users .
3784	redactError removes api and application keys from error strings
3785	doRequestWithRetries performs an HTTP request repeatedly for maxTime or until no error and no acceptable HTTP response code was returned .
3786	PostEvent takes as input an event and then posts it to the server .
3787	GetEvent gets a single event given an identifier .
3788	GetEvents returns a slice of events from the query stream .
3789	ViewMetricMetadata allows you to get metadata about a specific metric .
3790	PostCheck posts the result of a check run to the server
3791	WriteObject implements ObjectStream .
3792	ReadObject implements ObjectStream .
3793	SetParams sets r . Params to the JSON representation of v . If JSON marshaling fails it returns an error .
3794	SetMeta sets r . Meta to the JSON representation of v . If JSON marshaling fails it returns an error .
3795	SetResult sets r . Result to the JSON representation of v . If JSON marshaling fails it returns an error .
3796	SetError sets e . Error to the JSON representation of v . If JSON marshaling fails it panics .
3797	Close closes the JSON - RPC connection . The connection may not be used after it has been closed .
3798	Reply sends a successful response with a result .
3799	ReplyWithError sends a response with an error .
3800	LogMessages causes all messages sent and received on conn to be logged using the provided logger .
3801	HandlerWithError implements Handler by calling the func for each request and handling returned errors and results .
3802	Handle implements Handler .
3803	ReadObject implements jsonrpc2 . ObjectStream .
3804	PickID returns a call option which sets the ID on a request . Care must be taken to ensure there are no conflicts with any previously picked ID nor with the default sequence ID .
3805	A zero Port is taken to mean no port provided per BEP 7 .
3806	Generate the CRC used to make or validate secure node ID .
3807	Stats returns statistics for the server .
3808	NewServer initializes a new DHT node server .
3809	Packets to and from any address matching a range in the list are dropped .
3810	Adds directly to the node table .
3811	Returns the node if it s in the routing table adding it if appropriate .
3812	Sends a ping query to the address given .
3813	Add response nodes to node table .
3814	Sends a find_node query to addr . targetID is the node we re looking for .
3815	Populates the node table .
3816	Returns how many nodes are in the node table .
3817	Exports the current node table .
3818	Stops the server network activity . This is all that s required to clean - up a Server .
3819	Per the spec in BEP 5 .
3820	Returns the number of distinct remote addresses the announce has queried .
3821	This is kind of the main thing you want to do with DHT . It traverses the graph toward nodes that store peers for the infohash streaming them to the caller and announcing the local node to each node if allowed and specified .
3822	Announce to a peer if appropriate .
3823	Stop the announce .
3824	NewUUID returns a Version 1 UUID based on the current NodeID and clock sequence and the current time . If the NodeID has not been set by SetNodeID or SetNodeInterface then it will be set automatically . If the NodeID cannot be set NewUUID returns nil . If clock sequence has not been set by SetClockSequence then it will be set automatically . If GetTime fails to return the current NewUUID returns nil and an error . In most cases New should be used .
3825	SetNodeInterface selects the hardware address to be used for Version 1 UUIDs . If name is then the first usable interface found will be used or a random Node ID will be generated . If a named interface cannot be found then false is returned . SetNodeInterface never fails when name is .
3826	NodeID returns a slice of a copy of the current Node ID setting the Node ID if not already set .
3827	SetNodeID sets the Node ID to be used for Version 1 UUIDs . The first 6 bytes of id are used . If id is less than 6 bytes then false is returned and the Node ID is not set .
3828	NodeID returns the 6 byte node id encoded in uuid . It returns nil if uuid is not valid . The NodeID is only well defined for version 1 and 2 UUIDs .
3829	ParseBytes is like Parse except it parses a byte slice instead of a string .
3830	MustParse is like Parse but panics if the string cannot be parsed . It simplifies safe initialization of global variables holding compiled UUIDs .
3831	FromBytes creates a new UUID from a byte slice . Returns an error if the slice does not have a length of 16 . The bytes are copied from the slice .
3832	Must returns uuid if err is nil and panics otherwise .
3833	Variant returns the variant encoded in uuid .
3834	Time returns the time in 100s of nanoseconds since 15 Oct 1582 encoded in uuid . The time is only defined for version 1 and 2 UUIDs .
3835	MarshalText implements encoding . TextMarshaler .
3836	UnmarshalText implements encoding . TextUnmarshaler .
3837	UnmarshalBinary implements encoding . BinaryUnmarshaler .
3838	RunCursorAt executes the select list initializing the cursor to the given position . Invalid cursor positions will be clamped to valid values . It displays the label and the list of items asking the user to chose any value within to list . Run will keep the prompt alive until it has been canceled from the command prompt or it has received a valid value . It will return the value and an error if any occurred during the select s execution .
3839	Run executes the select list . Its displays the label and the list of items asking the user to chose any value within to list or add his own . Run will keep the prompt alive until it has been canceled from the command prompt or it has received a valid value . If the addLabel is selected in the list this function will return a - 1 index with the added label and no error . Otherwise it will return the index and the value of the selected item . In any case if an error is triggered it will also return the error as its third return value .
3840	New creates and initializes a new ScreenBuf .
3841	Clear clears all previous lines and the output starts from the top .
3842	Write writes a single line to the underlining buffer . If the ScreenBuf was previously reset all previous lines are cleared and the output starts from the top . Lines with \ r or \ n will cause an error since they can interfere with the terminal ability to move between lines .
3843	Flush writes any buffered data to the underlying io . Writer ensuring that any pending data is displayed .
3844	Styler is a function that accepts multiple possible styling transforms from the state color and background colors constants and transforms them into a templated string to apply those styles in the CLI . The returned styling function accepts a string that will be extended with the wrapping function s styling attributes .
3845	New creates and initializes a list of searchable items . The items attribute must be a slice type with a size greater than 0 . Error will be returned if those two conditions are not met .
3846	Prev moves the visible list back one item . If the selected item is out of view the new select item becomes the last visible item . If the list is already at the top nothing happens .
3847	Search allows the list to be filtered by a given term . The list must implement the searcher function signature for this functionality to work .
3848	CancelSearch stops the current search and returns the list to its original order .
3849	SetStart sets the current scroll position . Values out of bounds will be clamped .
3850	SetCursor sets the position of the cursor in the list . Values out of bounds will be clamped .
3851	Next moves the visible list forward one item . If the selected item is out of view the new select item becomes the first visible item . If the list is already at the bottom nothing happens .
3852	PageUp moves the visible list backward by x items . Where x is the size of the visible items on the list . The selected item becomes the first visible item . If the list is already at the bottom the selected item becomes the last visible item .
3853	PageDown moves the visible list forward by x items . Where x is the size of the visible items on the list . The selected item becomes the first visible item .
3854	Items returns a slice equal to the size of the list with the current visible items and the index of the active item in this list .
3855	NewCursor create a new cursor with the DefaultCursor the specified input and position at the end of the specified starting input .
3856	ensures we are in bounds .
3857	insert the cursor rune array into r before the provided index
3858	Format renders the input with the Cursor appropriately positioned .
3859	FormatMask replaces all input runes with the mask rune .
3860	Replace replaces the previous input with whatever is specified and moves the cursor to the end position
3861	Place moves the cursor to the absolute array index specified by position
3862	Move moves the cursor over in relative terms by shift indices .
3863	Backspace removes the rune that precedes the cursor It handles being at the beginning or end of the row and moves the cursor to the appropriate position .
3864	Listen is a readline Listener that updates internal cursor state appropriately .
3865	AggregateIssueChan reads issues from a channel aggregates issues which have the same file line vol and message and returns aggregated issues on a new channel .
3866	StaticCallee returns the callee if this is a trivially static call - mode call to a function .
3867	Func returns the package - level function of the specified name or nil if not found .
3868	Var returns the package - level variable of the specified name or nil if not found .
3869	Const returns the package - level constant of the specified name or nil if not found .
3870	Type returns the package - level type of the specified name or nil if not found .
3871	Go 1 . 8 compatible GOPATH .
3872	addPath appends path to paths if path does not already exist in paths . Returns the new paths .
3873	configureEnvironmentForInstall sets GOPATH and GOBIN so that vendored linters can be installed
3874	UnmarshalStrict is like Unmarshal except that any fields that are found in the data that do not have corresponding struct members or mapping keys that are duplicates will result in an error .
3875	Decode reads the next YAML - encoded value from its input and stores it in the value pointed to by v . See the documentation for Unmarshal for details about the conversion of YAML into a Go value .
3876	Close closes the encoder by writing any remaining data . It does not write a stream terminating string ... .
3877	Check if a simple key may start at the current position and add it if needed .
3878	align returns the smallest y > = x such that y % a == 0 .
3879	lintName returns a different name if it should be different .
3880	sanityCheck performs integrity checking of the SSA representation of the function fn and returns true if it was valid . Diagnostics are written to reporter if non - nil os . Stderr otherwise . Some diagnostics are only warnings and do not imply a negative result . Sanity - checking is intended to facilitate the debugging of code transformation passes .
3881	mustSanityCheck is like sanityCheck but panics instead of returning a negative result .
3882	findDuplicate returns an arbitrary basic block that appeared more than once in blocks or nil if all were unique .
3883	newIssuePathFromAbsPath returns a new issuePath from a path that may be an absolute path . root must be an absolute path .
3884	NewIssue returns a new issue . Returns an error if formatTmpl is not a valid template for an Issue .
3885	SortIssueChan reads issues from one channel sorts them and returns them to another channel
3886	logicalBinop emits code to fn to evaluate e a && - or || - expression whose reified boolean value is wanted . The value is returned .
3887	expr lowers a single - result expression e to SSA form emitting code to fn and returning the Value defined by the expression .
3888	stmtList emits to fn code for all statements in list .
3889	assignOp emits to fn code to perform loc + = incr or loc - = incr .
3890	localValueSpec emits to fn code to define all of the vars in the function - local ValueSpec spec .
3891	arrayLen returns the length of the array whose composite literal elements are elts .
3892	switchStmt emits to fn code for the switch statement s optionally labelled by label .
3893	typeSwitchStmt emits to fn code for the type switch statement s optionally labelled by label .
3894	forStmt emits to fn code for the for statement s optionally labelled by label .
3895	rangeStmt emits to fn code for the range statement s optionally labelled by label .
3896	buildFunction builds SSA code for the body of function fn . Idempotent .
3897	buildFuncDecl builds SSA code for the function or method declared by decl in package pkg .
3898	Build calls Package . Build for each package in prog . Building occurs in parallel unless the BuildSerially mode flag was set . Build is intended for whole - program analysis ; a typical compiler need only build a single package . Build is idempotent and thread - safe .
3899	Like ObjectOf but panics instead of returning nil . Only valid during p s create and build phases .
3900	Like TypeOf but panics instead of returning nil . Only valid during p s create and build phases .
3901	expect consumes an event from the event stream and checks that it s of the expected type .
3902	peek peeks at the next event in the event stream puts the results into p . event and returns the event type .
3903	d . prepare initializes and dereferences pointers and calls UnmarshalYAML if a value is found to implement it . It returns the initialized and dereferenced out value whether unmarshalling was already done by UnmarshalYAML and if so whether its types unmarshalled appropriately . If n holds a null value prepare returns before doing anything .
3904	Parse parses f and returns a list of actions . An action may either be a literal string or a Verb .
3905	ParseVerb parses the verb at the beginning of f . It returns the verb how much of the input was consumed and an error if any .
3906	terminates reports whether fn is supposed to return that is if it has at least one theoretic path that returns from the function . Explicit panics do not count as terminating .
3907	Reader read handler .
3908	Set a file input .
3909	Create a new emitter object .
3910	yaml_writer_write_handler uses emitter . output_writer to write the emitted text .
3911	Set a file output .
3912	Create MAPPING - START .
3913	Flush the output buffer .
3914	processConversion marks fields as used if they re part of a type conversion .
3915	processCompositeLiteral marks fields as used if the struct is used in a composite literal .
3916	processCgoExported marks functions as used if they re being exported to cgo .
3917	WritePackage writes to buf a human - readable summary of p .
3918	NewLinter returns a new linter from a config
3919	IsStub reports whether a function is a stub . A function is considered a stub if it has no instructions or exactly one instruction which must be either returning only constant values or a panic .
3920	CheckUnexportedReturn checks that exported functions on exported types do not return unexported types .
3921	CreateProgram returns a new program in SSA form given a program loaded from source . An SSA package is created for each transitively error - free package of lprog . Code for bodies of functions is not built until Build is called on the result . mode controls diagnostics and checking during SSA construction .
3922	IsIgnored returns true if the given linter issue is ignored by a linter directive .
3923	Unmatched returns all the ranges which were never used to ignore an issue
3924	LoadFiles from a list of directories
3925	ForArch returns a correct Sizes for the given architecture .
3926	ConvertedFrom reports whether value v was converted from type typ .
3927	Expect a node .
3928	isBlank returns whether id is the blank identifier _ . If id == nil the answer is false .
3929	Dereference returns a pointer s element type ; otherwise it returns T .
3930	TCPDialCheck returns a Check that checks TCP connectivity to the provided endpoint .
3931	HTTPGetCheck returns a Check that performs an HTTP GET request against the specified URL . The check fails if the response times out or returns a non - 200 status code .
3932	DNSResolveCheck returns a Check that makes sure the provided host can resolve to at least one IP address within the specified timeout .
3933	NewHandler creates a new basic Handler
3934	NewMetricsHandler returns a healthcheck Handler that also exposes metrics into the provided Prometheus registry .
3935	Timeout adds a timeout to a Check . If the underlying check takes longer than the timeout it returns an error .
3936	NewPinger returns a new Pinger struct pointer
3937	Network sets a network endpoints for ICMP ping and returns the previous setting . network arg should be ip or udp string or if others are specified it returns an error . If this function isn t called Pinger uses ip as default .
3938	AddIP adds an IP address to Pinger . ipaddr arg should be a string like 192 . 0 . 2 . 1 .
3939	AddIPAddr adds an IP address to Pinger . ip arg should be a net . IPAddr pointer .
3940	RemoveIP removes an IP address from Pinger . ipaddr arg should be a string like 192 . 0 . 2 . 1 .
3941	RemoveIPAddr removes an IP address from Pinger . ip arg should be a net . IPAddr pointer .
3942	MakeLang returns slug generated from provided string and will use provided language for chars substitution .
3943	Substitute returns string with superseded all substrings from provided substitution map . Substitution map will be applied in alphabetic order . Many passes on one substitution another one could apply .
3944	SubstituteRune substitutes string chars with provided rune substitution map . One pass .
3945	Parse parses the command line arguments including the global flags and if any the cmdflag and its flags . If the VersionBoolFlag is defined as a global boolean flag then the program version is displayed and the program stops .
3946	Sum appends the current hash to b and returns the resulting slice . It does not change the underlying hash state .
3947	Reset resets the Hash to its initial state .
3948	Write adds input bytes to the Hash . It never returns an error .
3949	Sum32 returns the 32 bits Hash value .
3950	ChecksumZero returns the 32bits Hash value .
3951	Uint32Zero hashes x with seed 0 .
3952	UncompressBlock uncompresses the source buffer into the destination one and returns the uncompressed size . The destination buffer must be sized appropriately . An error is returned if the source data is invalid or the destination buffer is too small .
3953	NewReader returns a new LZ4 frame decoder . No access to the underlying io . Reader is performed .
3954	Reset discards the Reader s state and makes it equivalent to the result of its original state from NewReader but reading from r instead . This permits reusing a Reader rather than allocating a new one .
3955	readUint32 reads an uint32 into the supplied buffer . The idea is to make use of the already allocated buffers avoiding additional allocations .
3956	Write compresses data from the supplied buffer into the underlying io . Writer . Write does not return until the data has been written .
3957	compressBlock compresses a block .
3958	Flush flushes any pending compressed data to the underlying writer . Flush does not return until the data has been written . If the underlying writer returns an error Flush returns that error .
3959	Close closes the Writer flushing any unwritten data to the underlying io . Writer but does not close the underlying io . Writer .
3960	Reset clears the state of the Writer z such that it is equivalent to its initial state from NewWriter but instead writing to w . No access to the underlying io . Writer is performed .
3961	writeUint32 writes a uint32 to the underlying writer .
3962	Uncompress uncompresses a set of files or from stdin to stdout .
3963	Compress compresses a set of files or from stdin to stdout .
3964	lz4 . Reader fuzz function
3965	NewClient - create a client object with the address and server path
3966	Subscribe subscribes to a topic in a remote event bus
3967	Start - starts the client service to listen to remote events
3968	PushEvent - exported service to listening to remote events
3969	New returns new EventBus with empty handlers .
3970	doSubscribe handles the subscription logic and is utilized by the public Subscribe functions
3971	Subscribe subscribes to a topic . Returns error if fn is not a function .
3972	HasCallback returns true if exists any callback subscribed to the topic .
3973	Unsubscribe removes callback defined for a topic . Returns error if there are no callbacks subscribed to the topic .
3974	Publish executes callback defined for a topic . Any additional argument will be transferred to the callback .
3975	NewNetworkBus - returns a new network bus object at the server address and path
3976	Start - helper method to serve a network bus service
3977	NewServer - create a new Server at the address and path
3978	HasClientSubscribed - True if a client subscribed to this server with the same topic
3979	Start - starts a service for remote clients to subscribe to events
3980	Register - Registers a remote handler to this event bus for a remote subscribe - a given client address only needs to subscribe once event will be republished in local event bus
3981	Valid determines if the provided when time is within the GTLDPeriod for the gTLD . E . g . whether a certificate issued at when with a subject identifier using the specified gTLD can be considered a valid use of the gTLD .
3982	HasValidTLD checks that a domain ends in a valid TLD that was delegated in the root DNS at the time specified .
3983	IsInTLDMap checks that a label is present in the TLD map . It does not consider the TLD s validity period and whether the TLD may have been removed only whether it was ever a TLD that was delegated .
3984	Execute will check the given certificate to ensure that all of the DNS subject alternate names that specify a reverse DNS name under the respective IPv4 or IPv6 arpa zones are well formed . A Warn LintResult is returned if the name is in a reverse DNS zone but has the wrong number of labels .
3985	lintReversedIPAddressLabels lints the given name as either a reversed IPv4 or IPv6 address under the respective ARPA zone based on the address class . An error is returned if there aren t enough labels in the name after removing the relevant arpa suffix .
3986	CheckRDNSequenceWhiteSpace returns true if there is leading or trailing whitespace in any name attribute in the sequence respectively .
3987	IsIA5String returns true if raw is an IA5String and returns false otherwise .
3988	AllAlternateNameWithTagAreIA5 returns true if all sequence members with the given tag are encoded as IA5 strings and false otherwise . If it encounters errors parsing asn1 err will be non - nil .
3989	IsEV returns true if the input is a known Extended Validation OID .
3990	Execute returns an Error LintResult if the certificate is not an EV certificate . CheckApplies has already verified the certificate contains one or more . onion subjects and so it must be an EV certificate .
3991	getData fetches the response body bytes from an HTTP get to the provider url or returns an error .
3992	getGTLDData fetches the ICANN_GTLD_JSON and parses it into a list of util . GTLDPeriod objects or returns an error . The gTLDEntries are returned as - is and may contain entries that were never delegated from the root DNS .
3993	delegatedGTLDs filters the provided list of GTLDPeriods removing any entries that were never delegated from the root DNS .
3994	validateGTLDs checks that all entries have a valid parseable DelegationDate string and if not - empty a valid parseable RemovalDate string . This function assumes an entry with an empty DelegationDate is an error . Use delegatedGTLDs to filter out entries that were never delegated before validating .
3995	init sets up command line flags
3996	IsNameAttribute returns true if the given ObjectIdentifier corresponds with the type of any name attribute for PKIX .
3997	MarshalJSON implements the json . Marshaler interface .
3998	String returns the canonical representation of a LintStatus as a string .
3999	EncodeLintDescriptionsToJSON outputs a description of each lint as JSON object one object per line .
4000	LintCertificate runs all registered lints on c producing a ZLint .
4001	CheckApplies returns true if the certificate is a subscriber certificate that contains a subject name ending in . onion .
4002	failResult is a small utility function for creating a failed lint result .
4003	CheckEffective returns true if c was issued on or after the EffectiveDate . If EffectiveDate is zero CheckEffective always returns true .
4004	GetExtFromCert returns the extension with the matching OID if present . If the extension if not present it returns nil .
4005	Helper function that checks for a name type in a pkix . Name
4006	helper function to parse policyMapping extensions returns slices of CertPolicyIds separated by domain
4007	printJSON prints v as JSON encoded with indent to stdout . It panics on any error .
4008	UnmarshalJSON implements the json . Unmarshaler interface . The URI is expected to be a quoted string .
4009	NewClient creates a new GitHub GraphQL API v4 client with the provided http . Client . If httpClient is nil then http . DefaultClient is used . Note that GitHub GraphQL API v4 requires authentication so the provided http . Client is expected to take care of that .
4010	NewEnterpriseClient creates a new GitHub GraphQL API v4 client for the GitHub Enterprise instance with the specified GraphQL endpoint URL using the provided http . Client . If httpClient is nil then http . DefaultClient is used . Note that GitHub GraphQL API v4 requires authentication so the provided http . Client is expected to take care of that .
4011	Query executes a single GraphQL query request with a query derived from q populating the response into it . q should be a pointer to struct that corresponds to the GitHub GraphQL schema .
4012	Mutate executes a single GraphQL mutation request with a mutation derived from m populating the response into it . m should be a pointer to struct that corresponds to the GitHub GraphQL schema . Provided input will be set as a variable named input .
4013	Fills the ListBox with the file names from current directory . Files which names do not match mask are filtered out . If select directory is set then the ListBox contains only directories . Directory names ends with path separator
4014	Tries to find the best fit for the given path . It goes up until it gets into the existing directory . If all fails it returns working directory .
4015	Goes up in the directory tree if it is possible
4016	Enters the directory
4017	Destroy removes an object from its parental chain
4018	cache data from a new row span It imitates a random data by selecting values from predefined arrays . Sizes of all arrays should be different to make TableView data look more random
4019	returns the cell value for a given col and row . Col and row are absolute value . But cache keeps limited number of rows to minimize memory usage . So the position of the value of the cell should be calculated To simplify the function just returns empty string if the cell is not cached . It is unlikely but can happen
4020	Repaints everything on the screen
4021	AddWindow constucts a new Window adds it to the composer automatically and makes it active posX and posY are top left coordinates of the Window width and height are Window size title is a Window title
4022	DestroyWindow removes the Window from the list of managed Windows
4023	IsDeadKey returns true if the pressed key is the first key in the key sequence understood by composer . Dead key is never sent to any control
4024	SetTextDisplay sets which part of the title is displayed in case of the title is longer than the lable . Only AlignLeft and AlignRigth are valid values for the property . Any other value does is skipped and does not affect displaying the title
4025	NewRadioGroup creates a new RadioGroup
4026	Selected returns the number of currently selected radio button inside the group or - 1 if no button is selected
4027	SelectItem makes the radio selected . The function returns false if it failed to find the radio in the radio group
4028	SetSelected selects the radio by its number . The function returns false if the number is invalid for the radio group
4029	AddItem add a new radio button to group
4030	NewColorParser creates a new string parser . str is a string to parse . defText is a default text color . defBack is a default background color . Default colors are applied in case of reset color tag
4031	NextElement parses and returns the next string element
4032	SetTitle changes the EditField content and emits OnChage eventif the new value does not equal to old one
4033	SetMaxWidth sets the maximum lenght of the EditField text . If the current text is longer it is truncated
4034	SetSize changes control size . Constant DoNotChange can be used as placeholder to indicate that the control attrubute should be unchanged . Method does nothing if new size is less than minimal size EditField height cannot be changed - it equals 1 always
4035	PopAttributes restores saved with PushAttributes colors . Function does nothing if there is no saved colors
4036	PushClip saves the current clipping window
4037	PopClip restores saved with PushClip clipping window
4038	InClipRect returns true if x and y position is inside current clipping rectangle
4039	SetSize sets the new Canvas size . If new size does not equal old size then Canvas is recreated and cleared with default colors . Both Canvas width and height must be greater than 2
4040	Symbol returns the character and its attributes by its coordinates
4041	SetClipRect defines a new clipping rect . Maybe useful with PopClip and PushClip functions
4042	ClipRect returns the current clipping rectangle
4043	DrawHorizontalLine draws the part of the horizontal line that is inside current clipping rectangle
4044	DrawVerticalLine draws the part of the vertical line that is inside current clipping rectangle
4045	DrawRawText draws the part of text that is inside the current clipping rectangle . DrawRawText always paints string as is - no color changes . If you want to draw string with color changing commands included then use DrawText function
4046	DrawTextVertical draws the part of text that is inside the current clipping rectangle . DrawTextVertical always paints colorized string . If you want to draw raw string then use DrawRawTextVertical function
4047	DrawRawTextVertical draws the part of text that is inside the current clipping rectangle . DrawRawTextVertical always paints string as is - no color changes . If you want to draw string with color changing commands included then use DrawTextVertical function
4048	DrawFrame paints the frame without changing area inside it
4049	FillRect paints the area with r character using the current colors
4050	TextExtent calculates the width and the height of the text
4051	EnsureVisible makes the currently selected item visible and scrolls the item list if it is required
4052	Clear deletes all ListBox items
4053	own methods AddItem adds a new item to item list . Returns true if the operation is successful
4054	SelectItem selects item which number in the list equals id . If the item exists the ListBox scrolls the list to make the item visible . Returns true if the item is selected successfully
4055	Item returns item text by its index . If index is out of range an empty string and false are returned
4056	FindItem looks for an item in list which text equals to text by default the search is casesensitive . Returns item number in item list or - 1 if nothing is found .
4057	PartialFindItem looks for an item in list which text starts from the given substring by default the search is casesensitive . Returns item number in item list or - 1 if nothing is found .
4058	SelectedItemText returns text of currently selected item or empty sting if nothing is selected or ListBox is empty .
4059	RemoveItem deletes an item which number is id in item list Returns true if item is deleted
4060	SysColor returns attribute by its id for the current theme . The method panics if theme loop is detected - check if parent attribute is correct
4061	SysObject returns object look by its id for the current theme . E . g border lines for frame or arrows for scrollbar . The method panics if theme loop is detected - check if parent attribute is correct
4062	SetThemePath changes the directory that contains themes . If new path does not equal old one theme list reloads
4063	loadTheme loads the theme if it is not in the cache already . If theme is in the cache loadTheme does nothing
4064	ReloadTheme refresh cache entry for the theme with new data loaded from file . Use it to apply theme changes on the fly without resetting manager or restarting application
4065	ThemeInfo returns detailed info about theme
4066	Ellipsize truncates text to maxWidth by replacing a substring in the middle with ellipsis and keeping the beginning and ending of the string untouched . If maxWidth is less than 5 then no ellipsis is added the text is just truncated from the right .
4067	CutText makes a text no longer than maxWidth
4068	AlignText calculates the initial position of the text output depending on str length and available width . The str is truncated in case of its lenght greater than width . Function returns shift that should be added to original label position before output instead of padding the string with spaces . The reason is to make possible to draw a label aligned but with transparent beginning and ending . If you do not need transparency you can add spaces manually using the returned shift value
4069	SliceColorized returns a slice of text with correct color tags . start and end are real printable rune indices
4070	ColorToString returns string representation of the attribute
4071	MainLoop starts the main application event loop
4072	NewEditField creates a new EditField control view - is a View that manages the control parent - is container that keeps the control . The same View can be a view and a parent at the same time . width - is minimal width of the control . text - text to edit . scale - the way of scaling the control when the parent is resized . Use DoNotScale constant if the control should keep its original size .
4073	ChildAt returns the children of parent control that is at absolute coordinates x y . Returns nil if x y are outside parent control and returns parent if no child is at x y
4074	DeactivateControls makes all children of parent inactive
4075	ActivateControl makes control active and disables all other children of the parent . Returns true if control was found and activated
4076	FindChild returns control if it is a child of the parent and nil otherwise
4077	IsMouseClickEvent returns if a user action can be treated as mouse click .
4078	FindFirstControl returns the first child for that fn returns true . The function is used to find active or tab - stop control
4079	ActiveControl returns the active child of the parent or nil if no child is active
4080	FindFirstActiveControl returns the first active control of a parent
4081	SendEventToChild tries to find a child control that should recieve the evetn For mouse click events it looks for a control at coordinates of event makes it active and then sends the event to it . If it is not mouse click event then it looks for the first active child and sends the event to it if it is not nil
4082	CalcClipper calculates the clipper size based on the control s size position and paddings
4083	ClippedParent finds the first c parent with clipped flag
4084	ControlInRect returns true if c is within a given rect
4085	CreateAlertDialog creates a new alert dialog . title is a dialog title message is a text inside dialog for user to be notified of a fact button is a title for button inside dialog .
4086	ProcessEvent processes all events come from the control parent . If a control processes an event it should return true . If the method returns false it means that the control do not want or cannot process the event and the caller sends the event to the control parent
4087	SetState changes the current state of CheckBox Value must be 0 or 1 if Allow3State is off and 0 1 or 2 if Allow3State is on
4088	State returns current state of CheckBox
4089	SetAllow3State sets if ComboBox should use 3 states . If the current state is unknown and one disables Allow3State option then the current value resets to off
4090	SetSize changes control size . Constant DoNotChange can be used as placeholder to indicate that the control attrubute should be unchanged . Method does nothing if new size is less than minimal size CheckBox height cannot be changed - it equals 1 always
4091	ScrollTo in case of a scrollable frame this api will scroll the content without adjusting the clipper
4092	EnsureColVisible scrolls the table horizontally to make the currently selected column fully visible
4093	EnsureRowVisible scrolls the table vertically to make the currently selected row visible
4094	Columns returns the current list of table columns
4095	SetColumnInfo replaces the existing column info
4096	OnKeyPress sets the callback that is called when a user presses a Key while the controls is active . If a handler processes the key it should return true . If handler returns false it means that the default handler has to process the key
4097	OnDrawCell is called every time the table is going to display a cell
4098	SetSelectedRow changes the currently selected row . If row is greater than number of row the last row is selected . Set row to - 1 to turn off selection . The table scrolls automatically to display the column
4099	SetSelectedCol changes the currently selected column . If column is greater than number of columns the last column is selected . Set row to - 1 to turn off selection . The table scrolls automatically to display the column
4100	SetSelected makes the button selected . One should not use the method directly it is for RadioGroup control
4101	OnChange sets the callback that is called whenever the state of the Radio is changed . Argument of callback is the current
4102	SetText replaces existing content of the control
4103	SetWordWrap enables or disables wordwrap mode
4104	LoadFile loads a text from file and replace the control text with the file one . Function returns false if loading text from file fails
4105	AddText appends a text to the end of the control content . View position may be changed automatically depending on value of AutoScroll
4106	Value returns the current ProgressBar value
4107	SetLimits set new ProgressBar limits . The current value is adjusted if it exceeds new limits
4108	Step increases ProgressBar value by 1 if the value is less than ProgressBar high limit
4109	SecondaryColors returns text and background colors for empty part of the ProgressBar
4110	SetSecondaryColors sets new text and background colors for empty part of the ProgressBar
4111	SetAutoSize enables or disables automatic bar width calculation
4112	SetGap sets the space width between two adjacent bars
4113	SetMinBarWidth changes the minimal bar width
4114	SetShowTitles turns on and off horizontal axis and bar titles
4115	SetLegendWidth sets new legend panel width
4116	OnDrawCell sets callback that allows to draw multicolored bars . BarChart sends the current attrubutes and rune that it is going to use to display as well as the current value of the bar . A user can change the values of BarDataCell depending on some external data or calculations - only changing colors and rune makes sense . Changing anything else does not affect the chart
4117	SetShowMarks turns on and off marks under horizontal axis
4118	OnKeyDown sets the callback that is called when a user presses a key while the Window is active
4119	SetMaximized opens the view to full screen or restores its previous size
4120	SetVisible allows to temporarily remove the window from screen and show it later without reconstruction
4121	SetTop sets the theoretical highest value of data flow to scale the chart
4122	SetAutoScale changes the way of scaling the data flow
4123	SetHilitePeaks enables or disables hiliting maximum values with different colors
4124	Load the ENV variables to the env map
4125	Get a value from the ENV . If it doesn t exist the default value will be returned .
4126	Get a value from the ENV . If it doesn t exist an error will be returned
4127	Set a value into the ENV . This is NOT permanent . It will only affect values accessed through envy .
4128	MustSet the value into the underlying ENV as well as envy . This may return an error if there is a problem setting the underlying ENV value .
4129	GoPaths returns all possible GOPATHS that are set .
4130	CurrentModule will attempt to return the module name from go . mod if modules are enabled . If modules are not enabled it will fallback to using CurrentPackage instead .
4131	change timeout to time . Duration
4132	validate checks the notificationRequest has 0<Interests<11 and has a APNS GCM or FCM payload
4133	NewNetworkNumber returns a equivalent NetworkNumber to given IP address return nil if ip is neither IPv4 nor IPv6 .
4134	ToIP returns equivalent net . IP .
4135	Equal is the equality test for 2 network numbers .
4136	Next returns the next logical network number .
4137	Previous returns the previous logical network number .
4138	NewNetwork returns Network built using given net . IPNet .
4139	Masked returns a new network conforming to new mask .
4140	Contains returns true if NetworkNumber is in range of Network false otherwise .
4141	Contains returns true if Network covers o false otherwise
4142	LeastCommonBitPosition returns the smallest position of the preceding common bits of the 2 networks and returns an error ErrNoGreatestCommonBit if the two network number diverges from the first bit .
4143	Equal is the equality test for 2 networks .
4144	Mask returns a new masked NetworkNumber from given NetworkNumber .
4145	NextIP returns the next sequential ip .
4146	PreviousIP returns the previous sequential ip .
4147	newPrefixTree creates a new prefixTrie .
4148	Insert inserts a RangerEntry into prefix trie .
4149	Remove removes RangerEntry identified by given network from trie .
4150	Contains returns boolean indicating whether given ip is contained in any of the inserted networks .
4151	String returns string representation of trie mainly for visualization and debugging .
4152	walkDepth walks the trie in depth order for unit testing .
4153	newBruteRanger returns a new Ranger .
4154	Insert inserts a RangerEntry into ranger .
4155	Remove removes a RangerEntry identified by given network from ranger .
4156	Contains returns bool indicating whether given ip is contained by any network in ranger .
4157	ParseMessage parse a raw Twitch IRC message
4158	NewClient to create a new client
4159	Say write something in a chat
4160	Whisper write something in private to someone on twitch whispers are heavily spam protected so your message might get blocked because of this verify your bot to prevent this
4161	Join enter a twitch channel to read more messages
4162	Depart leave a twitch channel
4163	Disconnect close current connection
4164	Connect connect the client to the irc server
4165	Userlist returns the userlist for a given channel
4166	Errors returned from handleLine break out of readConnections which starts a reconnect This means that we should only return fatal errors as errors here
4167	Execute - generates concourse pipeline and tasks
4168	Execute - removes org users
4169	classify accepts a list of segments that should meet some property and a list of segments that currently do meet that property and returns a classification .
4170	Execute - creates space specific security groups
4171	Execute - updates spaces metadata
4172	Execute - updates space named quotas
4173	Execute - adds a named asg to the configuration
4174	Execute - updates space users
4175	Execute - deletes orgs
4176	Execute - updates named quota
4177	Contains determines whether a space is present in a list of spaces .
4178	Execute - updates orgs quotas
4179	Execute - updates space quotas
4180	Orgs reads the config for all orgs .
4181	GetIsolationSegmentConfig reads isolation segment config
4182	GetOrgConfigs reads all orgs from the cf - mgmt configuration .
4183	GetSpaceDefaults returns the default space configuration if one was provided . If no space defaults were configured a nil config and a nil error are returned .
4184	AddOrgToConfig adds an organization to the cf - mgmt configuration .
4185	AddSpaceToConfig adds a space to the cf - mgmt configuration so long as a space with the specified name doesn t already exist .
4186	CreateConfigIfNotExists initializes a new configuration directory . If the specified configuration directory already exists it is left unmodified .
4187	DeleteConfigIfExists deletes config directory if it exists .
4188	Execute - renames space config
4189	Execute - creates spaces
4190	DeleteSpace - deletes a space based on GUID
4191	NewExportManager Creates a new instance of the ImportConfig manager
4192	Contains determines whether an org is present in a list of orgs .
4193	UpdateOrgs sets the default isolation segment for each org as specified in the cf - mgmt config .
4194	UpdateSpaces sets the isolation segment for each space as specified in the cf - mgmt config .
4195	allDesiredSegments iterates through the cf - mgmt configuration for all orgs and spaces and builds the complete set of isolation segments that should exist
4196	ListUsers - returns uaa . Users
4197	Execute - updates space configuration
4198	RemoveUnknownVisibilites - will remove any service plan visiblities that are not known by cf - mgmt
4199	DisablePublicServiceAccess - will ensure any public plan is made private
4200	ListServiceInfo - returns services and their cooresponding plans
4201	Execute - creates organizations
4202	Execute - updates organizations metadata
4203	Execute - deletes org from config
4204	Execute - deletes space from config
4205	Execute - deletes spaces
4206	NewKeyProvider provide a simple passphrase key provider .
4207	NewConfiguration creates a configuration for server
4208	NewConfigurationTrustProvider creates a configuration for server with no enforcement for token sig alg type instead trust provider
4209	NewValidator creates a new validator with the provided configuration .
4210	ValidateRequest validates the token within the http request . A default leeway value of one minute is used to compare time values .
4211	ValidateRequestWithLeeway validates the token within the http request . The provided leeway value is used to compare time values .
4212	Claims unmarshall the claims of the provided token
4213	NewJWKClient creates a new JWKClient instance from the provided options .
4214	NewJWKClientWithCache creates a new JWKClient instance from the provided options and a custom keycacher interface . Passing nil to keyCacher will create a persistent key cacher
4215	GetKey returns the key associated with the provided ID .
4216	GetSecret implements the GetSecret method of the SecretProvider interface .
4217	FromMultiple combines multiple extractors by chaining .
4218	FromParams returns the JWT when passed as the URL query param token .
4219	NewMemoryKeyCacher creates a new Keycacher interface with option to set max age of cached keys and max size of the cache .
4220	Get obtains a key from the cache and checks if the key is expired
4221	Add adds a key into the cache and handles overflow
4222	keyIsExpired deletes the key from cache if it is expired
4223	handleOverflow deletes the oldest key from the cache if overflowed
4224	Patch applies patch to old according to the bspatch algorithm and writes the result to new .
4225	Diff computes the difference between old and new according to the bsdiff algorithm and writes the result to patch .
4226	validColor will make sure the given color is actually allowed
4227	New provides a pointer to an instance of Spinner with the supplied options
4228	Start will start the indicator
4229	Stop stops the indicator
4230	Reverse will reverse the order of the slice assigned to the indicator
4231	Color will set the struct field for the given color to be used
4232	UpdateSpeed will set the indicator delay to the given value
4233	UpdateCharSet will change the current character set to the given one
4234	erase deletes written characters Caller must already hold s . lock .
4235	GenerateNumberSequence will generate a slice of integers at the provided length and convert them each to a string
4236	header computes the header for the given tag
4237	NewMultiplex creates a new multiplexer session .
4238	Accept accepts the next stream from the connection .
4239	NewNamedStream creates a new named stream .
4240	encodeInt provides a Go implementation of integer geohash . This is the default implementation of EncodeInt but optimized versions are provided for certain architectures .
4241	Center returns the center of the box .
4242	Round returns a point inside the box making an effort to round to minimal precision .
4243	BoundingBox returns the region encoded by the given string geohash .
4244	BoundingBoxIntWithPrecision returns the region encoded by the integer geohash with the specified precision .
4245	DecodeCenter decodes the string geohash to the central point of the bounding box .
4246	Neighbors returns a slice of geohash strings that correspond to the provided geohash s neighbors .
4247	NeighborsIntWithPrecision returns a slice of uint64s that correspond to the provided hash s neighbors at the given precision .
4248	NeighborIntWithPrecision returns a uint64s that corresponds to the provided hash s neighbor in the provided direction at the given precision .
4249	Spread out the 32 bits of x into 64 bits where the bits of x occupy even bit positions .
4250	newEncoding constructs a new encoding defined by the given alphabet which must be a 32 - byte string .
4251	Encode bits of 64 - bit word into a string .
4252	InitArgs returns an options func to configure a LinuxFactory with the provided init arguments .
4253	InitPath returns an options func to configure a LinuxFactory with the provided absolute path to the init binary and arguements .
4254	StartInitialization loads a container by opening the pipe fd from the parent to read the configuration and state This is a low level implementation detail of the reexec and should not be consumed externally
4255	newConsole returns an initalized console that can be used within a container by copying bytes from the master side to the slave that is attached as the tty for the container s init process .
4256	mount initializes the console inside the rootfs mounting with the specified mount label and applying the correct ownership of the console .
4257	dupStdio opens the slavePath for the console and dups the fds to the current processes stdio fd 0 1 2 .
4258	open is a clone of os . OpenFile without the O_CLOEXEC used to open the pty slave .
4259	ptsname retrieves the name of the first available pts for the given master .
4260	finalizeNamespace drops the caps sets the correct user and working dir and closes any leaked file descriptors before executing the command inside the namespace
4261	joinExistingNamespaces gets all the namespace paths specified for the container and does a setns on the namespace fd so that the current process joins the namespace .
4262	setupUser changes the groups gid and uid for the user inside the container
4263	killCgroupProcesses freezes then iterates over all the processes inside the manager s cgroups sending a SIGKILL to each process then waiting for them to exit .
4264	Converts IDMap to SysProcIDMap array and adds it to SysProcAttr .
4265	dropBoundingSet drops the capability bounding set to those specified in the whitelist .
4266	drop drops all capabilities for the current process except those specified in the whitelist .
4267	ensureParent makes sure that the parent directory of current is created and populated with the proper cpus and mems files copied from it s parent .
4268	Pid returns the process ID
4269	Signal sends a signal to the Process .
4270	NewConsole creates new console for process and returns it
4271	setupRootfs sets up the devices mount points and filesystems for use inside a new mount namespace .
4272	Create the device nodes in the container .
4273	Creates the device node in the rootfs of the container .
4274	remountReadonly will bind over the top of an existing path and ensure that it is read - only .
4275	systemd does not atm set up the cpuset controller so we must manually join it . Additionally that is a very finicky controller where each level must have a full setup as the default for a new directory is no cpus
4276	BlockIODeviceWeight property of systemd does not work properly and systemd expects device path instead of major minor numbers which is also confusing for users . So we use fs work around for now .
4277	execSetns runs the process that executes C code to perform the setns calls because setns support requires the C process to fork off a child and perform the setns before the go runtime boots we wait on the process to die and receive the child s pid over the provided pipe .
4278	Returns all the cgroup subsystems supported by the kernel
4279	Returns the relative path to the cgroup docker is running in .
4280	Caputure captures a stacktrace for the current calling go program skip is the number of frames to skip
4281	Gets a single uint64 value from the specified cgroup file .
4282	GetAdditionalGroupsPath looks up a list of groups by name or group id against the group file . If a group name cannot be found an error will be returned . If a group id cannot be found it will be returned as - is .
4283	XXX debug support remove when debugging done .
4284	InitLabels returns the process label and file labels to be used within the container . A list of options can be passed into this function to alter the labels . The labels returned will include a random MCS String that is guaranteed to be unique .
4285	SetFileLabel modifies the path label to the specified file label
4286	Tell the kernel the label for all files to be created
4287	Change the label of path to the filelabel string . If the relabel string is z relabel will change the MCS label to s0 . This will allow all containers to share the content . If the relabel string is a Z then the MCS label should continue to be used . SELinux will use this field to make sure the content can not be shared by other containes .
4288	Returns an array of IPNet for all the currently routed subnets on ipv4 This is similar to the first column of ip route output
4289	Create the actual bridge device . This is more backward - compatible than netlink . NetworkLinkAdd and works on RHEL 6 .
4290	Delete the actual bridge device .
4291	Add a slave to a bridge device . This is more backward - compatible than netlink . NetworkSetMaster and works on RHEL 6 .
4292	Detach a slave from a bridge device . This is more backward - compatible than netlink . NetworkSetMaster and works on RHEL 6 .
4293	labelIndex returns the index for the label if it exists in the slice . if it does not exist in the slice it appends the label lb to the end of the slice and returns the index .
4294	getSelinuxMountPoint returns the path to the mountpoint of an selinuxfs filesystem or an empty string if no mountpoint is found . Selinuxfs is a proc - like pseudo - filesystem that exposes the selinux policy API to processes . The existence of an selinuxfs mount is used to determine whether selinux is currently enabled or not .
4295	SelinuxEnabled returns whether selinux is currently enabled .
4296	Setfilecon sets the SELinux label for this path or returns an error .
4297	Getfilecon returns the SELinux label for this path or returns an error .
4298	Prevent users from relabing system files
4299	Change the fpath file object to the SELinux label scon . If the fpath is a directory and recurse is true Chcon will walk the directory tree setting the label
4300	DupSecOpt takes an SELinux process label and returns security options that can will set the SELinux Type and Level for future container processes
4301	attach a container network interface to an external network
4302	Add will add the specified syscall action and arguments to the seccomp Context .
4303	Load will apply the Context to the calling process makeing any secccomp process changes apply after the context is loaded .
4304	newGraph returns a new graph .
4305	MakeDisjointSet creates a DisjointSet .
4306	FindSet returns the DisjointSet with the represent name .
4307	Union unions two DisjointSet with ds1 s represent .
4308	Me returns information about the current user
4309	ListProjects returns the list of projects the user is watching
4310	DisableProject disables a project
4311	FollowProject follows a project
4312	GetProject retrieves a specific project Returns nil of the project is not in the list of watched projects
4313	ListRecentBuilds fetches the list of recent builds for all repositories the user is watching If limit is - 1 fetches all builds
4314	ListRecentBuildsForProject fetches the list of recent builds for the given repository The status and branch parameters are used to further filter results if non - empty If limit is - 1 fetches all builds
4315	ListBuildArtifacts fetches the build artifacts for the given build
4316	AddSSHUser adds the user associated with the API token to the list of valid SSH users for a build . The API token being used must be a user API token
4317	Build triggers a new build for the given project for the given project on the given branch . Returns the new build information
4318	ParameterizedBuild triggers a new parameterized build for the given project on the given branch Marshaling the struct into json and passing in the post body . Returns the new build information
4319	BuildOpts triggeres a new build for the givent project on the given branch Marshaling the struct into json and passing in the post body . Returns the new build information
4320	ClearCache clears the cache of the specified project Returns the status returned by CircleCI
4321	DeleteEnvVar deletes the specified environment variable from the project
4322	AddSSHKey adds a new SSH key to the project
4323	GetActionOutputs fetches the output for the given action If the action has no output returns nil
4324	ListCheckoutKeys fetches the checkout keys associated with the given project
4325	CreateCheckoutKey creates a new checkout key for a project Valid key types are currently deploy - key and github - user - key The github - user - key type requires that the API token being used be a user API token
4326	GetCheckoutKey fetches the checkout key for the given project by fingerprint
4327	DeleteCheckoutKey fetches the checkout key for the given project by fingerprint
4328	New returns a new Client .
4329	Clone returns a clone of the Client . The cloned Client inherits its configuration from its parent . All cloned Clients share the same connection so cloning a Client is a cheap operation .
4330	Count adds n to bucket .
4331	Gauge records an absolute value for the given bucket .
4332	Timing sends a timing value to a bucket .
4333	Send sends the time elapsed since the creation of the Timing .
4334	Unique sends the given value to a set bucket .
4335	Flush flushes the Client s buffer .
4336	Close flushes the Client s buffer and releases the associated ressources . The Client and all the cloned Clients must not be used afterward .
4337	SampleRate sets the sample rate of the Client . It allows sending the metrics less often which can be useful for performance intensive code paths .
4338	Prefix appends the prefix that will be used in every bucket name . Note that when used in cloned the prefix of the parent Client is not replaced but is prepended to the given prefix .
4339	TagsFormat sets the format of tags .
4340	Tags appends the given tags to the tags sent with every metrics . If a tag already exists it is replaced . The tags must be set as key - value pairs . If the number of tags is not even Tags panics . If the format of tags have not been set using the TagsFormat option the tags will be ignored .
4341	flush flushes the first n bytes of the buffer . If n is 0 the whole buffer is flushed .
4342	BuildQwerty builds the Qwerty Graph
4343	BuildDvorak builds the Dvorak Graph
4344	BuildKeypad builds the Keypad Graph
4345	BuildMacKeypad builds the Mac Keypad Graph
4346	BuildLeet builds the L33T Graph
4347	DictionaryEntropy calculates the entropy of a dictionary match
4348	SpatialEntropy calculates the entropy for spatial matches
4349	RepeatEntropy calculates the entropy for repeating entropy
4350	SequenceEntropy calculates the entropy for sequences such as 4567 or cdef
4351	ExtraLeetEntropy calulates the added entropy provied by l33t substitustions
4352	DateEntropy calculates the entropy provided by a date
4353	Omnimatch runs all matchers against the password
4354	Null verifies the contents of bytes provided is a null starting as pos
4355	Number returns the end position of the number that begins at the specified pos
4356	Array returns the position of the end of the array that begins at the position specified
4357	FindRange finds the elements of an array between the specified indexes ; inclusive
4358	Object returns the position of the end of the object that begins at the specified pos
4359	FindKey accepts a JSON object and returns the value associated with the key specified
4360	FindIndex accepts a JSON array and return the value of the element at the specified index
4361	Dot extract the specific key from the map provided ; to extract a nested value use the Dot Op in conjunction with the Chain Op
4362	Chain executes a series of operations in the order provided
4363	Index extracts a specific element from the array provided
4364	Range extracts a selection of elements from the array provided inclusive
4365	String returns the position of the string that begins at the specified pos
4366	Boolean matches a boolean at the specified position
4367	Must is a convenience method similar to template . Must
4368	Parse takes a string representation of a selector and returns the corresponding Op definition
4369	Any returns the position of the end of the current element that begins at pos ; handles any valid json element
4370	ProxyRequestFromContext extracts the APIGatewayProxyRequest event from ctx .
4371	DurationValue returns the value of the Duration pointer passed in or the default value if the pointer is nil .
4372	Base64Value returns the value of the Base64 pointer passed in or the default value if the pointer is nil .
4373	URIValue returns the value of the URI pointer passed in or the default value if the pointer is nil .
4374	EmailValue returns the value of the Email pointer passed in or the default value if the pointer is nil .
4375	HostnameValue returns the value of the Hostname pointer passed in or the default value if the pointer is nil .
4376	IPv4Value returns the value of the IPv4 pointer passed in or the default value if the pointer is nil .
4377	IPv6Value returns the value of the IPv6 pointer passed in or the default value if the pointer is nil .
4378	CIDRValue returns the value of the CIDR pointer passed in or the default value if the pointer is nil .
4379	MACValue returns the value of the MAC pointer passed in or the default value if the pointer is nil .
4380	UUIDValue returns the value of the UUID pointer passed in or the default value if the pointer is nil .
4381	UUID3Value returns the value of the UUID3 pointer passed in or the default value if the pointer is nil .
4382	UUID4Value returns the value of the UUID4 pointer passed in or the default value if the pointer is nil .
4383	UUID5Value returns the value of the UUID5 pointer passed in or the default value if the pointer is nil .
4384	ISBNValue returns the value of the ISBN pointer passed in or the default value if the pointer is nil .
4385	ISBN10Value returns the value of the ISBN10 pointer passed in or the default value if the pointer is nil .
4386	ISBN13Value returns the value of the ISBN13 pointer passed in or the default value if the pointer is nil .
4387	CreditCardValue returns the value of the CreditCard pointer passed in or the default value if the pointer is nil .
4388	SSNValue returns the value of the SSN pointer passed in or the default value if the pointer is nil .
4389	HexColorValue returns the value of the HexColor pointer passed in or the default value if the pointer is nil .
4390	RGBColorValue returns the value of the RGBColor pointer passed in or the default value if the pointer is nil .
4391	PasswordValue returns the value of the Password pointer passed in or the default value if the pointer is nil .
4392	MarshalJSON returns the ObjectId as JSON
4393	MarshalEasyJSON writes the ObjectId to a easyjson . Writer
4394	UnmarshalJSON sets the ObjectId from JSON
4395	UnmarshalEasyJSON sets the ObjectId from a easyjson . Lexer
4396	SetBSON sets the ObjectId from raw bson data
4397	DeepCopy copies the receiver into a new ObjectId .
4398	IsHostname returns true when the string is a valid hostname
4399	IsEmail validates an email address .
4400	MarshalJSON returns the Base64 as JSON
4401	MarshalEasyJSON writes the Base64 to a easyjson . Writer
4402	UnmarshalJSON sets the Base64 from JSON
4403	UnmarshalEasyJSON sets the Base64 from a easyjson . Lexer
4404	SetBSON sets the Base64 from raw bson data
4405	DeepCopy copies the receiver into a new Base64 .
4406	MarshalJSON returns the URI as JSON
4407	MarshalEasyJSON writes the URI to a easyjson . Writer
4408	UnmarshalJSON sets the URI from JSON
4409	DeepCopy copies the receiver into a new URI .
4410	MarshalJSON returns the Email as JSON
4411	MarshalEasyJSON writes the Email to a easyjson . Writer
4412	UnmarshalJSON sets the Email from JSON
4413	UnmarshalEasyJSON sets the Email from a easyjson . Lexer
4414	SetBSON sets the Email from raw bson data
4415	DeepCopy copies the receiver into a new Email .
4416	MarshalEasyJSON writes the Hostname to a easyjson . Writer
4417	SetBSON sets the Hostname from raw bson data
4418	DeepCopy copies the receiver into a new Hostname .
4419	MarshalEasyJSON writes the IPv4 to a easyjson . Writer
4420	DeepCopy copies the receiver into a new IPv4 .
4421	MarshalEasyJSON writes the IPv6 to a easyjson . Writer
4422	DeepCopy copies the receiver into a new IPv6 .
4423	MarshalEasyJSON writes the CIDR to a easyjson . Writer
4424	DeepCopy copies the receiver into a new CIDR .
4425	MarshalEasyJSON writes the MAC to a easyjson . Writer
4426	DeepCopy copies the receiver into a new MAC .
4427	MarshalEasyJSON writes the UUID to a easyjson . Writer
4428	SetBSON sets the UUID from raw bson data
4429	DeepCopy copies the receiver into a new UUID .
4430	MarshalEasyJSON writes the UUID3 to a easyjson . Writer
4431	DeepCopy copies the receiver into a new UUID3 .
4432	MarshalEasyJSON writes the UUID4 to a easyjson . Writer
4433	UnmarshalJSON sets the UUID4 from JSON
4434	DeepCopy copies the receiver into a new UUID4 .
4435	MarshalEasyJSON writes the UUID5 to a easyjson . Writer
4436	DeepCopy copies the receiver into a new UUID5 .
4437	MarshalEasyJSON writes the ISBN to a easyjson . Writer
4438	DeepCopy copies the receiver into a new ISBN .
4439	MarshalEasyJSON writes the ISBN10 to a easyjson . Writer
4440	UnmarshalEasyJSON sets the ISBN10 from a easyjson . Lexer
4441	DeepCopy copies the receiver into a new ISBN10 .
4442	MarshalEasyJSON writes the ISBN13 to a easyjson . Writer
4443	DeepCopy copies the receiver into a new ISBN13 .
4444	MarshalEasyJSON writes the CreditCard to a easyjson . Writer
4445	DeepCopy copies the receiver into a new CreditCard .
4446	MarshalEasyJSON writes the SSN to a easyjson . Writer
4447	DeepCopy copies the receiver into a new SSN .
4448	MarshalJSON returns the HexColor as JSON
4449	MarshalEasyJSON writes the HexColor to a easyjson . Writer
4450	UnmarshalJSON sets the HexColor from JSON
4451	UnmarshalEasyJSON sets the HexColor from a easyjson . Lexer
4452	DeepCopy copies the receiver into a new HexColor .
4453	MarshalEasyJSON writes the RGBColor to a easyjson . Writer
4454	UnmarshalJSON sets the RGBColor from JSON
4455	UnmarshalEasyJSON sets the RGBColor from a easyjson . Lexer
4456	DeepCopy copies the receiver into a new RGBColor .
4457	MarshalJSON returns the Password as JSON
4458	MarshalEasyJSON writes the Password to a easyjson . Writer
4459	SetBSON sets the Password from raw bson data
4460	DeepCopy copies the receiver into a new Password .
4461	IsDateTime returns true when the string is a valid date - time
4462	ParseDateTime parses a string that represents an ISO8601 time or a unix epoch
4463	UnmarshalText implements the text unmarshaller interface
4464	Scan scans a DateTime value from database driver type .
4465	Value converts DateTime to a primitive value ready to written to a database .
4466	MarshalJSON returns the DateTime as JSON
4467	MarshalEasyJSON writes the DateTime to a easyjson . Writer
4468	UnmarshalJSON sets the DateTime from JSON
4469	UnmarshalEasyJSON sets the DateTime from a easyjson . Lexer
4470	SetBSON sets the DateTime from raw bson data
4471	DeepCopy copies the receiver into a new DateTime .
4472	IsDuration returns true if the provided string is a valid duration
4473	ParseDuration parses a duration from a string compatible with scala duration syntax
4474	Scan reads a Duration value from database driver type .
4475	Value converts Duration to a primitive value ready to be written to a database .
4476	MarshalJSON returns the Duration as JSON
4477	MarshalEasyJSON writes the Duration to a easyjson . Writer
4478	UnmarshalJSON sets the Duration from JSON
4479	UnmarshalEasyJSON sets the Duration from a easyjson . Lexer
4480	SetBSON sets the Duration from raw bson data
4481	DeepCopy copies the receiver into a new Duration .
4482	DateValue returns the value of the Date pointer passed in or the default value if the pointer is nil .
4483	IsDate returns true when the string is a valid date
4484	UnmarshalText parses a text representation into a date type
4485	Scan scans a Date value from database driver type .
4486	Value converts Date to a primitive value ready to written to a database .
4487	MarshalEasyJSON writes the Date to a easyjson . Writer
4488	UnmarshalJSON sets the Date from JSON
4489	UnmarshalEasyJSON sets the Date from a easyjson . Lexer
4490	SetBSON sets the Date from raw bson data
4491	DeepCopy copies the receiver into a new Date .
4492	DateTimeValue returns the value of the DateTime pointer passed in or the default value if the pointer is nil .
4493	NewSeededFormats creates a new formats registry
4494	Add adds a new format return true if this was a new item instead of a replacement
4495	GetType gets the type for the specified name
4496	DelByName removes the format by the specified name returns true when an item was actually removed
4497	DelByType removes the specified format returns true when an item was actually removed
4498	ContainsName returns true if this registry contains the specified name
4499	ContainsFormat returns true if this registry contains the specified format
4500	Parse a string into the appropriate format representation type . E . g . parsing a string a date will return a Date type .
4501	Sequence returns a filter that is the concatenation of all filter arguments . The output of a filter is fed as input to the next filter .
4502	Contents returns a slice that contains all items that are the output of filters .
4503	Items emits items .
4504	Repeat emits n copies of s .
4505	Numbers emits the integers x .. y
4506	Uniq squashes adjacent identical items in arg . In into a single output .
4507	UniqWithCount squashes adjacent identical items in arg . In into a single output prefixed with the count of identical items followed by a space .
4508	Reverse yields items in the reverse of the order it received them .
4509	SampleWithSeed picks n pseudo - randomly chosen input items . It uses seed as the argument for its random number generation and therefore different executions of SampleWithSeed with the same arguments will chose the same items .
4510	First yields the first n items that it receives .
4511	Last yields the last n items that it receives .
4512	DropLast yields all items except for the last n items that it receives .
4513	Text sets the next sort key to sort by column n in lexicographic order . Column 0 means the entire string . Items that do not have column n sort to the front .
4514	TextDecreasing sets the next sort key to sort by column n in reverse lexicographic order . Column 0 means the entire string . Items that do not have column n sort to the end .
4515	Num sets the next sort key to sort by column n in numeric order . Column 0 means the entire string . Items that do not have column n sort to the front . Items whose column n is not a number sort to the end .
4516	NumDecreasing sets the next sort key to sort by column n in reverse numeric order . Column 0 means the entire string . Items that do not have column n sort to the end . Items whose column n is not a number sort to the front .
4517	By adds a sort key to sort by the output of the specified less function .
4518	flipLast reverses the comparison order for the last sort key .
4519	RunFilter sorts items by the specified sorting keys . It implements the Filter interface .
4520	RunFilter yields contents of a filesystem tree . It implements the Filter interface .
4521	Grep emits every input x that matches the regular expression r .
4522	GrepNot emits every input x that does not match the regular expression r .
4523	LimitArgs adjusts x so that no more than n input items are passed to a single command execution . If not called an unspecified number of input items may be handled via a single command execution .
4524	Cat emits each line from each named file in order . If no arguments are specified Cat copies its input to its output .
4525	ReadLines emits each line found in reader .
4526	Return true if the line is a comment .
4527	Return a new instance of HostsLine .
4528	Return true if hosts file is writable .
4529	Flush any changes made to hosts file .
4530	Add an entry to the hosts file .
4531	Remove an entry from the hosts file .
4532	Return a new instance of Hosts .
4533	NewOpenAPISchemaFor returns the OpenAPISchema object ready to validate objects of given GroupVersion
4534	Validate is the primary entrypoint into this class
4535	FlattenToV1 expands any List - type objects into their members and cooerces everything to v1 . Unstructured . Panics if coercion encounters an unexpected object type .
4536	ParseVersion parses version . Info into a ServerVersion struct
4537	FetchVersion fetches version information from discovery client and parses
4538	SetMetaDataAnnotation sets an annotation value
4539	SetMetaDataLabel sets an annotation value
4540	ResourceNameFor returns a lowercase plural form of a type for human messages . Returns lowercased kind if discovery lookup fails .
4541	FqName returns namespace . name
4542	String implements the Stringer interface
4543	RegistryRepoName returns the repository as used in the registry URL
4544	RegistryURL returns the deduced base URL of the registry for this image
4545	ParseImageName parses a docker image into an ImageName struct .
4546	NewRegistryResolver returns a resolver that looks up a docker registry to resolve digests
4547	NewLogFormatter creates a new log . Formatter customised for writer
4548	NewMemcachedDiscoveryClient creates a new DiscoveryClient that caches results in memory
4549	ClientForResource returns the ResourceClient for a given object
4550	Formats the supplied Diff as a unified - diff - like text with infinite context and optionally colorizes it .
4551	See also feature request for golang reflect pkg at
4552	Arbitrary numbers used to do a simple topological sort of resources .
4553	New Lexer from the input string
4554	NextToken from the source input
4555	InnerText gets the raw string representation of the block s contents .
4556	Markdown converts the string into HTML using GitHub flavored markdown .
4557	Parse the string and return an AST or an error
4558	NewHelperMap containing all of the default helpers from plush . Helpers .
4559	AddMany helpers at the same time .
4560	BuffaloRenderer implements the render . TemplateEngine interface allowing velvet to be used as a template engine for Buffalo
4561	Render a string using the given the context .
4562	RunScript allows for pure plush scripts to be executed .
4563	NewTemplate from the input string . Adds all of the global helper functions from Helpers this function does not cache the template .
4564	Parse the template this can be called many times as a successful result is cached and is used on subsequent uses .
4565	Exec the template using the content and return the results
4566	Clone a template . This is useful for defining helpers on per instance of the template .
4567	Render a string with the current context
4568	BlockWith executes the block of template associated with the helper think the block inside of an if or each statement but with it s own context .
4569	Has checks the existence of the key in the context .
4570	Export all the known values in the context . Note this can t reach up into other implemenations of context . Context .
4571	NewContextWith returns a fully formed context using the data provided .
4572	NewContextWithContext returns a new plush . Context given another context
4573	Aggregate merges similar goroutines into buckets . The buckets are ordered in library provided order of relevancy . You can reorder at your chosing .
4574	less does reverse sort .
4575	Private stuff .
4576	hasPathPrefix returns true if any of s is the prefix of p .
4577	getFiles returns all the source files deduped and ordered .
4578	splitPath splits a path into its components . The first item has its initial path separator kept .
4579	isFile returns true if the path is a valid file .
4580	rootedIn returns a root if the file split in parts is rooted in root .
4581	findRoots sets member GOROOT and GOPATHs .
4582	String is the fully qualified function name . Sadly Go is a bit confused when the package name doesn t match the directory containing the source file and will use the directory name instead of the real package name .
4583	Name is the naked function name .
4584	PkgName is the package name for this function reference .
4585	IsExported returns true if the function is exported .
4586	IsPtr returns true if we guess it s a pointer . It s only a guess it can be easily be confused by a bitmask .
4587	equal returns true only if both arguments are exactly equal .
4588	similar returns true if the two Args are equal or almost but not quite equal .
4589	merge merges two similar Args zapping out differences .
4590	equal returns true only if both calls are exactly equal .
4591	similar returns true if the two Call are equal or almost but not quite equal .
4592	merge merges two similar Call zapping out differences .
4593	PkgSrc is one directory plus the file name of the source file .
4594	updateLocations initializes LocalSrcPath and IsStdlib .
4595	equal returns true on if both call stacks are exactly equal .
4596	similar returns true if the two Stack are equal or almost but not quite equal .
4597	merge merges two similar Stack zapping out differences .
4598	less compares two Stack where the ones that are less are more important so they come up front . A Stack with more private functions is less so it is at the top . Inversely a Stack with only public functions is more so it is at the bottom .
4599	equal returns true only if both signatures are exactly equal .
4600	similar returns true if the two Signature are equal or almost but not quite equal .
4601	merge merges two similar Signature zapping out differences .
4602	less compares two Signature where the ones that are less are more important so they come up front . A Signature with more private functions is less so it is at the top . Inversely a Signature with only public functions is more so it is at the bottom .
4603	CreatedByString return a short context about the origin of this goroutine signature .
4604	Private stuff . nameArguments is a post - processing step where Args are named with numbers .
4605	CalcLengths returns the maximum length of the source lines and package names .
4606	functionColor returns the color to be used for the function name based on the type of package the function is in .
4607	routineColor returns the color for the header of the goroutines bucket .
4608	BucketHeader prints the header of a goroutine signature .
4609	callLine prints one stack line .
4610	StackLines prints one complete stack trace without the header .
4611	augmentGoroutine processes source files to improve call to be more descriptive . It modifies the routine .
4612	Private stuff . load loads a source file and parses the AST tree . Failures are ignored .
4613	getFuncAST gets the callee site function AST representation for the code inside the function f at line l .
4614	fieldToType returns the type name and whether if it s an ellipsis .
4615	extractArgumentsType returns the name of the type of each input argument .
4616	Reset resets the template t to new one defined by template startTag and endTag . Reset allows Template object re - use . Reset may be called only if no other goroutines call t methods at the moment .
4617	Unlock unlocks the mutex . It is a run - time error if m is not locked on entry to Unlock . A locked Mutex is not associated with a particular goroutine . It is allowed for one goroutine to lock a Mutex and then arrange for another goroutine to unlock it .
4618	RUnlock undoes a single RLock call ; it does not affect other simultaneous readers . It is a run - time error if rw is not locked for reading on entry to RUnlock .
4619	Under lo . mu Locked .
4620	Reads souce file lines from disk if not cached already .
4621	Stacktraces for all goroutines .
4622	NewWithAlphabet returns a new UUIDv4 encoded with base57 using the alternative alphabet abc .
4623	numToString converts a number a string using the given alpabet .
4624	stringToNum converts a string a number using the given alpabet .
4625	Remove duplicates and sort it to ensure reproducability .
4626	Index returns the index of the first instance of t in the alphabet or an error if t is not present .
4627	dudupe removes duplicate characters from s .
4628	Is detects whether the error is equal to a given error . Errors are considered equal by this function if they are the same object or if they both contain the same error inside an errors . Error .
4629	Error returns the underlying error s message .
4630	ErrorStack returns a string that contains both the error message and the callstack .
4631	TextStyle styles the given string using the desired text style .
4632	NewPointsIndex creates new PointsIndex that maintains the points in each cell .
4633	NewExpiringPointsIndex creates new PointIndex that expires the points in each cell after expiration minutes .
4634	Get gets a point from the index given an id .
4635	GetAll get all Points from the index as a map from id to point
4636	Add adds a point to the index . If a point with the same Id already exists it gets replaced .
4637	Remove removes a point from the index .
4638	Range returns the points within the range defined by top left and bottom right .
4639	KNearest returns the k nearest points near point within maxDistance that match the accept criteria .
4640	PointsWithin returns all points with distance of point that match the accept criteria .
4641	Multi value counter .
4642	Average accumulating counter . Expect adding and removing CountPoints .
4643	Creates new geo index with resolution a function that returns a new entry that is stored in each cell .
4644	AddEntryAt adds an entry if missing returns the entry at specific position .
4645	GetEntryAt gets an entry from the geoindex if missing returns an empty entry without changing the index .
4646	Range returns the index entries within lat lng range .
4647	NewClusteringIndex creates index that clusters the points at three levels with cell size 0 . 5 5 and 500km . Useful for creating maps .
4648	NewExpiringClusteringIndex creates index that clusters the points at three levels with cell size 0 . 5 5 and 500km and expires them after expiration minutes .
4649	Range returns points or count points depending on the size of the topLeft and bottomRight range .
4650	KNearest returns the K - Nearest points near point within maxDistance that match the accept function .
4651	Push adds an element at the end of the queue .
4652	Pop removes an element from the front of the queue .
4653	Peek returns the element at the front of the queue .
4654	PeekBack returns the element at the back of the queue .
4655	ForEach calls process for each element in the queue .
4656	Clone creates a copy of the set where the values in clone set point to the same underlying reference as the original set
4657	NewCountIndex creates an index which counts the points in each cell .
4658	NewExpiringCountIndex creates an index which maintains an expiring counter for each cell .
4659	Range returns the counters within some lat lng range .
4660	KNearest just to satisfy an interface . Doesn t make much sense for count index .
4661	DirectionTo returns the direction from p1 to p2
4662	BearingTo returns the bearing from p1 to p2
4663	Calculates approximate distance between two points using euclidian distance . The assumption here is that the points are relatively close to each other .
4664	newResult creates and returns a result .
4665	NewSource creates and returns source .
4666	newHelperMethodYield creates and returns a helper method yield .
4667	newHelperMethodDoctype creates and returns a helper method doctype .
4668	NewFile creates and returns a file .
4669	Load loads and returns an HTML template . Each Ace templates are parsed only once and cached if the DynamicReload option are not set .
4670	getCache returns the cached template .
4671	setCache sets the template to the cache .
4672	FlushCache clears all cached templates .
4673	newPlainTextInner creates and returns a plain text .
4674	newEmpty creates and returns an empty element .
4675	newComment creates and returns a comment .
4676	helperMethodJavascript creates and returns a helper method javascript .
4677	ParseSource parses the source and returns the result .
4678	parseBytes parses the byte data and returns the elements .
4679	appendChildren parses the lines and appends the children to the element .
4680	newHTMLComment creates and returns an HTML comment .
4681	newHelperMethodInclude creates and returns a helper method include .
4682	newHelperMethodConditionalComment creates and returns an HTML comment .
4683	CompileResult compiles the parsed result to the template . Template .
4684	CompileResultWithTemplate compiles the parsed result and associates it with t .
4685	AppendChild appends the child element to the element .
4686	writeChildren writes the children s HTML .
4687	newElementBase creates and returns an element base .
4688	readFiles reads files and returns source for the parsing process .
4689	readFile reads a file and returns a file struct .
4690	findIncludes finds and adds include files .
4691	findIncludePaths finds and returns include paths .
4692	hasFile return if files has a file which has the path specified by the parameter .
4693	helperMethodCSS creates and returns a helper method css .
4694	newElement creates and returns an element .
4695	newHelperMethodContent creates and returns a helper method content .
4696	setAttributes parses the tokens and set attributes to the element .
4697	noCloseTag returns true is the HTML tag has no close tag .
4698	true if the element is inline one
4699	newHTMLTag creates and returns an HTML tag .
4700	extractTag extracts and returns a tag .
4701	extractID extracts and returns an ID .
4702	extractClasses extracts and returns classes .
4703	parseTokens parses the tokens and return them
4704	newPlainText creates and returns a plain text .
4705	isHelperMethod returns true if the line is a helper method .
4706	isHelperMethodOf returns true if the line is a specified helper method .
4707	isPlainText returns true if the line is a plain text .
4708	isComment returns true if the line is a comment .
4709	isHTMLComment returns true if the line is an HTML comment .
4710	isAction returns true if the line is an action .
4711	fileName returns the file name .
4712	childOf returns true if the line is a child of the element .
4713	newLine creates and returns a line .
4714	indent returns the line s indent .
4715	InitializeOptions initializes the options .
4716	AddNoCloseTagName appends name to . NoCloseTagNames set .
4717	DeleteNoCloseTagName deletes name from . NoCloseTagNames set .
4718	Asset loads and returns the asset for the given name . It returns an error if the asset could not be found or could not be loaded .
4719	newAction creates and returns an action .
4720	AddRelayTransport constructs a relay and adds it as a transport to the host network .
4721	NewRelay constructs a new relay .
4722	ParseJSONBody parses a JSON body .
4723	New makes a new Runner with the given testing T target and the root URL .
4724	RunGroup runs a parse . Group . Consider RunFile instead .
4725	ParseFile parses the specified files .
4726	ParseLine makes a new Line with the given data .
4727	Capture extracts the first placeholder value from the comments .
4728	Bytes gets the joined bytes of all lines .
4729	Equal gets whether the Data and specified value are equal . Supports regexp values .
4730	Type gets a string describing the type of this Value .
4731	NewServer makes a new example server .
4732	PrettyPrintAsJSON marshalles input as indented JSON and calles fmt . Println with the result . If indent arguments are given they are joined into a string and used as JSON line indent . If no indet argument is given two spaces will be used to indent JSON lines .
4733	StringMarshalJSON marshals data to an indented string .
4734	StringMD5Hex returns the hex encoded MD5 hash of data
4735	StringSHA1Base64 returns the base64 encoded SHA1 hash of data
4736	StringJoinFormat formats every value in values with format and joins the result with sep as separator . values must be a slice of a formatable type
4737	StringJoin formats every value in values according to its default formatting and joins the result with sep as separator . values must be a slice of a formatable type
4738	Less reports whether the element with index i should sort before the element with index j .
4739	Swap swaps the elements with indexes i and j .
4740	Map a function on each element of a slice of strings .
4741	Filter out all strings where the function does not return true .
4742	StringFindBetween returns the string between the first occurrences of the tokens start and stop . The remainder of the string after the stop token will be returned if found . If the tokens couldn t be found then the whole string will be returned as remainder .
4743	StringFind returns in found if token has been found in s and returns the remaining string afte token in remainder . The whole string s will be returned if found is false .
4744	EncryptAES encrypts plaintext using AES with the given key . key should be either 16 24 or 32 bytes to select AES - 128 AES - 192 or AES - 256 . plaintext must not be shorter than key .
4745	DecryptAES decrypts ciphertext using AES with the given key . key should be either 16 24 or 32 bytes to select AES - 128 AES - 192 or AES - 256 .
4746	PanicIfErr panics with a stack trace if any of the passed args is a non nil error
4747	AsError returns r as error converting it when necessary
4748	FirstError returns the first non nil error or nil
4749	LastError returns the last non nil error or nil
4750	AsErrorList checks if err is already an ErrorList and returns it if this is the case . Else an ErrorList with err as element is created . Useful if a function potentially returns an ErrorList as error and you want to avoid creating nested ErrorLists .
4751	Error calls fmt . Println for of every error in the list and returns the concernated text . Can be called for a nil ErrorList .
4752	Last returns the last error in the list or nil . Can be called for a nil ErrorList .
4753	Collect adds any non nil errors in args to the list .
4754	HTTPCompressHandlerFunc wraps a http . HandlerFunc so that the response gets gzip or deflate compressed if the Accept - Encoding header of the request allows it .
4755	HTTPPostJSON marshalles data as JSON and sends it as HTTP POST request to url . If the response status code is not 200 OK then the status is returned as an error .
4756	HTTPDelete performs a HTTP DELETE request
4757	HTTPUnmarshalRequestBodyJSON reads a http . Request body and unmarshals it as JSON to result .
4758	GetWriter returns flate . Writer from the pool or creates a new one with flate . BestCompression if the pool is empty .
4759	ReturnWriter returns a flate . Writer to the pool that can late be reused via GetWriter . Don t close the writer Flush will be called before returning it to the pool .
4760	GetWriter returns gzip . Writer from the pool or creates a new one with gzip . BestCompression if the pool is empty .
4761	ReturnWriter returns a gzip . Writer to the pool that can late be reused via GetWriter . Don t close the writer Flush will be called before returning it to the pool .
4762	FileGetLines returns a string slice with the text lines of filenameOrURL . The lines can be separated by \ n or \ r \ n .
4763	FileGetLastLine reads the last line from a file . In case of a network file the whole file is read . In case of a local file the last 64kb are read so if the last line is longer than 64kb it is not returned completely . The first optional timeout is used for network files only .
4764	FileSize returns the size of a file or zero in case of an error .
4765	BytesHead returns at most numLines from data starting at the beginning . A slice of the remaining data is returned as rest . \ n is used to detect line ends a preceding \ r will be stripped away . BytesHead resembles the Unix head command .
4766	BytesMap maps a function on each element of a slice of bytes .
4767	BytesFilter filters out all bytes where the function does not return true .
4768	ReflectSetStructFieldString sets the field with name to value .
4769	ReadBinary wraps binary . Read with a CountingReader and returns the acutal bytes read by it .
4770	WriteFull calls writer . Write until all of data is written or an is error returned .
4771	ReadLine reads unbuffered until a newline \ n byte and removes an optional carriege return \ r at the end of the line . In case of an error the string up to the error is returned .
4772	WaitForStdin blocks until input is available from os . Stdin . The first byte from os . Stdin is returned as result . If there are println arguments then fmt . Println will be called with those before reading from os . Stdin .
4773	GetenvDefault retrieves the value of the environment variable named by the key . It returns the given defaultValue if the variable is not present .
4774	NetIP returns the primary IP address of the system or an empty string .
4775	RealNetIP returns the real local IP of the system or an empty string .
4776	Load loads YAML files from configPaths . and assigns decoded values into the conf value .
4777	Load loads JSON files from configPaths . and assigns decoded values into the conf value .
4778	Load loads TOML files from configPaths . and assigns decoded values into the conf value .
4779	LoadBytes loads YAML bytes
4780	LoadJSONBytes loads JSON bytes
4781	LoadTOMLBytes loads TOML bytes
4782	LoadWithEnvJSON loads JSON files with Env
4783	LoadWithEnvTOML loads TOML files with Env
4784	LoadWithEnvBytes loads YAML bytes with Env
4785	LoadWithEnvJSONBytes loads JSON bytes with Env
4786	LoadWithEnvTOMLBytes loads TOML bytes with Env
4787	Crop retrieves an image that is a cropped copy of the original img . The crop is made given the informations provided in config .
4788	computeSize retrieve the effective size of the cropped image . It is defined by Height Width and Ratio option .
4789	computedCropArea retrieve the theorical crop area . It is defined by Height Width Mode and
4790	NewThen creates a new Then command .
4791	NewLongThen creates a new long running Then comand .
4792	Command returns the full command as configured in Caddyfile .
4793	Exec executes the command initiated in gitCmd .
4794	haltProcess halts the running process
4795	runCmd is a helper function to run commands . It runs command with args from directory at dir . The executed process outputs to os . Stderr
4796	runCmdOutput is a helper function to run commands and return output . It runs command with args from directory at dir . If successful returns output and nil error
4797	Init validates git installation locates the git executable binary in PATH and check for available shell to use .
4798	writeScriptFile writes content to a temporary file . It changes the temporary file mode to executable and closes it to prepare it for execution .
4799	gitWrapperScript forms content for git . sh script
4800	bashScript forms content of bash script to clone or update a repo using ssh
4801	handleToken checks for an optional token in the request . GitLab s webhook tokens are just simple strings that get sent as a header with the hook request . If one exists verify that it matches the secret in the Caddy configuration .
4802	Handle satisfies hookhandler .
4803	Check for an optional signature in the request if it is signed verify the signature .
4804	setup configures a new Git service routine .
4805	parseURL validates if repoUrl is a valid git url .
4806	Start starts a new background service to pull periodically .
4807	add adds a new service to list of services .
4808	Repo retrieves repository at i or nil if not found .
4809	String satisfies stringer and attempts to strip off authentication info from url if it exists .
4810	Val returns git friendly Val that can be passed to git clone .
4811	Pull attempts a git pull . It retries at most numRetries times if error occurs
4812	pull performs git pull or git clone if repository does not exist .
4813	checkoutCommit checks out the specified commitHash .
4814	gitCmd performs a git command .
4815	Prepare prepares for a git pull and validates the configured directory
4816	getMostRecentCommit gets the hash of the most recent commit to the repository . Useful for checking if changes occur .
4817	originURL retrieves remote origin url for the git repository at path
4818	execThen executes r . Then . It is trigged after successful git pull
4819	Stdin sets the process s standard input .
4820	Stdout sets the process s standard output .
4821	Stderr sets the process s standard output .
4822	Mkdir calls os . Mkdir .
4823	MkdirAll calls os . MkdirAll .
4824	Stat calls os . Stat .
4825	LookPath calls exec . LookPath .
4826	TempFile calls ioutil . TempFile .
4827	ReadDir calls ioutil . ReadDir .
4828	Command calls exec . Command .
4829	NewTicker calls time . NewTicker .
4830	TimeSince calls time . Since
4831	Check for an authorization signature in the request . Reject if not present . If validation required check the sha
4832	Error satisfies error interface
4833	hookName returns the name of the hookHanlder h .
4834	ServeHTTP implements the middlware . Handler interface .
4835	contains code taken from go1 . 8 for purposes of backwards compatability with older go versions . hostname returns u . Host without any port number . If Host is an IPv6 literal with a port number Hostname returns the IPv6 literal without the square brackets . IPv6 literals may include a zone identifier .
4836	genOptionsODBC is a util wrapper around genOptions that uses the fixed settings for ODBC style connection strings .
4837	genQueryOptions generates standard query options .
4838	convertOptions converts an option value based on name value pairs .
4839	mode returns the mode of the path .
4840	registerAlias registers a alias for an already registered Scheme .
4841	Register registers a Scheme .
4842	Unregister unregisters a Scheme and all associated aliases .
4843	has is a util func to determine if a contains b .
4844	SchemeDriverAndAliases returns the registered driver and aliases for a database scheme .
4845	GenFromURL returns a func that generates a DSN using urlstr as the default URL parameters overriding the values only if when in the passed URL .
4846	GenOpaque generates a opaque file path DSN from the passed URL .
4847	GenPostgres generates a postgres DSN from the passed URL .
4848	GenSQLServer generates a mssql DSN from the passed URL .
4849	GenMyMySQL generates a MyMySQL MySQL DSN from the passed URL .
4850	GenOracle generates a ora DSN from the passed URL .
4851	GenFirebird generates a firebirdsql DSN from the passed URL .
4852	GenADODB generates a adodb DSN from the passed URL .
4853	GenODBC generates a odbc DSN from the passed URL .
4854	GenOLEODBC generates a oleodbc DSN from the passed URL .
4855	GenClickhouse generates a clickhouse DSN from the passed URL .
4856	GenVoltDB generates a VoltDB DSN from the passed URL .
4857	GenPresto generates a Presto DSN from the passed URL .
4858	GenCassandra generates a cassandra DSN from the passed URL .
4859	GenSnowflake generates a snowflake DSN from the passed URL .
4860	String satisfies the stringer interface .
4861	Short provides a short description of the user host and database .
4862	Normalize returns the driver host port database and user name of a URL joined with sep populating blank fields with empty .
4863	NewLimiter creates a new instance of a rate limiter .
4864	Has returns whether the rate limiter has seen a request for a specific id during the current period .
4865	Attempted returns the number of attempted requests for an id in the current period . Attempted does not count attempts that exceed the max requests in an interval and only returns the max count after this is reached .
4866	Left returns the number of remaining requests for id during a current period .
4867	Attempt attempts to perform a request for an id and returns whether it was successful or not .
4868	IsPublicIP returns true if the given IP can be routed on the Internet
4869	ParseForwarded parses the value of the X - Forwarded - For Header and returns the IP address .
4870	In returns true if the parameter field is an input field .
4871	Out returns true if the parameter field is an output field .
4872	SetLobReader sets the io . Reader if a Lob parameter field .
4873	Error implements the Error interface .
4874	SetIdx implements the driver . Error interface .
4875	Code implements the driver . Error interface .
4876	Position implements the driver . Error interface .
4877	Level implements the driver . Error interface .
4878	Text implements the driver . Error interface .
4879	IsWarning implements the driver . Error interface .
4880	IsError implements the driver . Error interface .
4881	IsFatal implements the driver . Error interface .
4882	Size returns the amount of bytes needed to encode an UTF - 8 byte slice to CESU - 8 .
4883	StringSize is like Size with a string as parameter .
4884	FullRune reports whether the bytes in p begin with a full CESU - 8 encoding of a rune .
4885	DecodeRune unpacks the first CESU - 8 encoding in p and returns the rune and its width in bytes .
4886	RuneLen returns the number of bytes required to encode the rune .
4887	On returns if tracing methods output is active .
4888	SetOn sets tracing methods output active or inactive .
4889	reply || error
4890	Go starts the protocol request and response logging .
4891	Write implements the io . Writer interface .
4892	NewSession creates a new database session .
4893	QueryDirect executes a query without query parameters .
4894	ExecDirect executes a sql statement without statement parameters .
4895	Prepare prepares a sql statement .
4896	Exec executes a sql statement .
4897	DropStatementID releases the hdb statement handle .
4898	Call executes a stored procedure .
4899	Query executes a query .
4900	FetchNext fetches next chunk in query result set .
4901	CloseResultsetID releases the hdb resultset handle .
4902	Commit executes a database commit .
4903	NewReader creates a new Reader instance .
4904	NewReaderSize creates a new Reader instance with given size for bufio . Reader .
4905	GetError returns reader error .
4906	Skip skips cnt bytes from reading .
4907	ReadB reads and returns a byte .
4908	ReadFull implements io . ReadFull on Reader .
4909	ReadBool reads and returns a boolean .
4910	ReadInt16 reads and returns an int16 .
4911	ReadUint16 reads and returns an uint16 .
4912	ReadInt32 reads and returns an int32 .
4913	ReadUint32 reads and returns an uint32 .
4914	ReadInt64 reads and returns an int64 .
4915	ReadUint64 reads and returns an uint64 .
4916	ReadFloat32 reads and returns a float32 .
4917	ReadFloat64 reads and returns a float64 .
4918	ReadCesu8 reads a size CESU - 8 encoded byte sequence and returns an UTF - 8 byte slice .
4919	NewWriter creates a new Writer instance .
4920	NewWriterSize creates a new Writer instance with given size for bufio . Writer .
4921	Flush writes any buffered data to the underlying io . Writer .
4922	WriteZeroes writes cnt zero byte values .
4923	Write writes the contents of p .
4924	WriteB writes a byte .
4925	WriteBool writes a boolean .
4926	WriteInt8 writes an int8 .
4927	WriteInt16 writes an int16 .
4928	WriteUint32 writes an uint32 .
4929	WriteInt64 writes an int64 .
4930	WriteFloat32 writes a float32 .
4931	WriteFloat64 writes a float64 .
4932	WriteString writes a string .
4933	WriteCesu8 writes an UTF - 8 byte slice as CESU - 8 and returns the CESU - 8 bytes written .
4934	WriteStringCesu8 is like WriteCesu8 with an UTF - 8 string as parameter .
4935	DataType converts a type code into one of the supported data types by the driver .
4936	Name returns the result field name .
4937	NewBasicAuthConnector creates a connector for basic authentication .
4938	Locale returns the locale of the connector .
4939	FetchSize returns the fetchSize of the connector .
4940	Timeout returns the timeout of the connector .
4941	TLSConfig returns the TLS configuration of the connector .
4942	SetTLSConfig sets the TLS configuration of the connector .
4943	SessionVariables returns the session variables stored in connector .
4944	SetSessionVariables sets the session varibles of the connector .
4945	BasicAuthDSN return the connector DSN for basic authentication .
4946	Row fills the dest value slice with row data at index idx .
4947	strings with one byte length
4948	NewLob creates a new Lob instance with the io . Reader and io . Writer given as parameters .
4949	TokenString returns a printable string for a token or Unicode character .
4950	NewScanner creates a new Scaner instance .
4951	Next returns the next Token .
4952	RandomIdentifier returns a random Identifier prefixed by the prefix parameter . This function is used to generate database objects with random names for test and example code .
4953	String implements Stringer interface .
4954	Parse splitting & decoding compact serialized json web token returns slice of byte arrays each representing part of token
4955	Serialize converts given parts into compact serialization format
4956	Align left pads given byte array with zeros till it have at least bitSize length .
4957	Xor is doing byte by byte exclusive or of 2 byte arrays
4958	Slice is splitting input byte array into slice of subarrays . Each of count length .
4959	Random generates byte array with random data of byteCount length
4960	Concat combine several arrays into single one resulting slice = A1 | A2 | A3 | ... | An
4961	Unwrap same thing as Contact just different interface combines several array into single one
4962	UInt64ToBytes unwrap uint64 value to byte array of length 8 using big endian
4963	UInt32ToBytes unwrap uint32 value to byte array of length 4 using big endian
4964	Dump produces printable debug representation of byte array as string
4965	Decode decodes base64url string to byte array
4966	Encode encodes given byte array to base64url string
4967	Decode verifies decrypts and decompresses given JWT token using management key . Management key is of different type for different key management or signing algorithms see specific alg implementation documentation . Returns decoded payload as a string headers and not nil error if something went wrong .
4968	Decode verifies decrypts and decompresses given JWT token using management key . Management key is of different type for different key management or signing algorithms see specific alg implementation documentation . Returns decoded payload as a raw bytes headers and not nil error if something went wrong .
4969	DerivePBKDF2 implements Password Based Key Derivation Function 2 RFC 2898 . Derives key of keyBitLength size given password salt iteration count and hash function
4970	ReadPrivate loads ecdsa . PrivateKey from given PKCS1 or PKCS8 blobs
4971	ReadPublic loads rsa . PublicKey from PKIX or PKCS1 X509 blobs
4972	AddPkcs7 pads given byte array using pkcs7 padding schema till it has blockSize length in bytes
4973	RemovePkcs7 removes pkcs7 padding from previously padded byte array
4974	ContainerMetrics is deprecated in favor of ContainerEnvelopes since returning the ContainerMetric type directly hides important information like the timestamp . The returned values will be the same as ContainerEnvelopes just with the Envelope stripped out .
4975	SortRecent sorts a slice of LogMessages by timestamp . The sort is stable so messages with the same timestamp are sorted in the order that they are received . The input slice is sorted ; the return value is simply a pointer to the same slice .
4976	SortContainerMetrics sorts a slice of containerMetrics by InstanceIndex . The input slice is sorted ; the return value is simply a pointer to the same slice .
4977	New creates a new consumer to a trafficcontroller .
4978	TailingLogs listens indefinitely for log messages only ; other event types are dropped . Whenever an error is encountered the error will be sent down the error channel and TailingLogs will attempt to reconnect up to 5 times . After five failed reconnection attempts TailingLogs will give up and close the error and LogMessage channels . If c is closed the returned channels will both be closed . Errors must be drained from the returned error channel for it to continue retrying ; if they are not drained the connection attempts will hang .
4979	TailingLogsWithoutReconnect functions identically to TailingLogs but without any reconnect attempts when errors occur .
4980	Stream listens indefinitely for all log and event messages . Messages are presented in the order received from the loggregator server . Chronological or other ordering is not guaranteed . It is the responsibility of the consumer of these channels to provide any desired sorting mechanism . Whenever an error is encountered the error will be sent down the error channel and Stream will attempt to reconnect indefinitely .
4981	StreamWithoutReconnect functions identically to Stream but without any reconnect attempts when errors occur .
4982	Firehose streams all data . All clients with the same subscriptionId will receive a proportionate share of the message stream . Each pool of clients will receive the entire stream . Messages are presented in the order received from the loggregator server . Chronological or other ordering is not guaranteed . It is the responsibility of the consumer of these channels to provide any desired sorting mechanism . Whenever an error is encountered the error will be sent down the error channel and Firehose will attempt to reconnect indefinitely .
4983	FirehoseWithoutReconnect functions identically to Firehose but without any reconnect attempts when errors occur .
4984	FilteredFirehose streams a filtered set of envelopes . It has functionality similar to Firehose .
4985	SetOnConnectCallback sets a callback function to be called with the websocket connection is established .
4986	Close terminates all previously opened websocket connections to the traffic controller . It will return an error if there are no open connections or if it has problems closing any connection .
4987	zpool is a helper function to wrap typical calls to zpool .
4988	GetZpool retrieves a single ZFS zpool by name .
4989	Destroy destroys a ZFS zpool by name .
4990	ListZpools list all ZFS zpools accessible on the current system .
4991	Error returns the string representation of an Error .
4992	zfs is a helper function to wrap typical calls to zfs .
4993	GetDataset retrieves a single ZFS dataset by name . This dataset could be any valid ZFS dataset type such as a clone filesystem snapshot or volume .
4994	Clone clones a ZFS snapshot and returns a clone dataset . An error will be returned if the input dataset is not of snapshot type .
4995	Unmount unmounts currently mounted ZFS file systems .
4996	Mount mounts ZFS file systems .
4997	ReceiveSnapshot receives a ZFS stream from the input io . Reader creates a new snapshot with the specified name and streams the input data into the newly - created snapshot .
4998	SendSnapshot sends a ZFS stream of a snapshot to the input io . Writer . An error will be returned if the input dataset is not of snapshot type .
4999	Destroy destroys a ZFS dataset . If the destroy bit flag is set any descendents of the dataset will be recursively destroyed including snapshots . If the deferred bit flag is set the snapshot is marked for deferred deletion .
5000	Rename renames a dataset .
5001	Snapshot creates a new ZFS snapshot of the receiving dataset using the specified name . Optionally the snapshot can be taken recursively creating snapshots of all descendent filesystems in a single atomic operation .
5002	Rollback rolls back the receiving ZFS dataset to a previous snapshot . Optionally intermediate snapshots can be destroyed . A ZFS snapshot rollback cannot be completed without this option if more recent snapshots exist . An error will be returned if the input dataset is not of snapshot type .
5003	Children returns a slice of children of the receiving ZFS dataset . A recursion depth may be specified or a depth of 0 allows unlimited recursion .
5004	Diff returns changes between a snapshot and the given ZFS dataset . The snapshot name must include the filesystem part as it is possible to compare clones with their origin snapshots .
5005	msb32 returns the number of bits required to store the value x
5006	msb64 returns the number of bits required to store the value x
5007	EncodeAll returns a packed slice of the values from src . It a value is over 1 << 28 an error is returned .
5008	DecodeAll returns the uncompressed values from in
5009	returns true if the next n values in in can be packed using bits bits per value .
5010	pack28 packs 28 values from in using 1 bit each
5011	pack14 packs 14 values from in using 2 bits each
5012	pack9 packs 9 values from in using 3 bits each
5013	pack7 packs 7 values from in using 4 bits each
5014	Decode writes the uncompressed values from src to dst . It returns the number of values written or an error .
5015	Out returns the data to be sent to the server in the current step .
5016	Step processes the incoming data from the server and makes the next round of data for the server available via Client . Out . Step returns false if there are no errors and more data is still expected .
5017	DialWithTimeout works like Dial but uses timeout as the amount of time to wait for a server to respond when first connecting and also on follow up operations in the session . If timeout is zero the call may block forever waiting for a connection to be made . See SetSyncTimeout for customizing the timeout for the session .
5018	ParseURL parses a MongoDB URL as accepted by the Dial function and returns a value suitable for providing into DialWithInfo . See Dial for more details on the format of url .
5019	LiveServers returns a list of server addresses which are currently known to be alive .
5020	DB returns a value representing the named database . If name is empty the database name provided in the dialed URL is used instead . If that is also empty test is used as a fallback in a way equivalent to the mongo shell . Creating this value is a very lightweight operation and involves no network communication .
5021	C returns a value representing the named collection . Creating this value is a very lightweight operation and involves no network communication .
5022	With returns a copy of db that uses session s .
5023	With returns a copy of c that uses session s .
5024	Logout removes any established authentication credentials for the database .
5025	LogoutAll removes all established authentication credentials for the session .
5026	RemoveUser removes the authentication credentials of user from the database .
5027	New creates a new session with the same parameters as the original session including consistency batch size prefetching safety mode etc . The returned session will use sockets from the pool so there s a chance that writes just performed in another session may not yet be visible . Login information from the original session will not be copied over into the new session unless it was provided through the initial URL for the Dial function . See the Copy and Clone methods .
5028	Copy works just like New but preserves the exact authentication information from the original session .
5029	Clone works just like Copy but also reuses the same socket as the original session in case it had already reserved one due to its consistency guarantees . This behavior ensures that writes performed in the old session are necessarily observed when using the new session as long as it was a strong or monotonic session . That said it also means that long operations may cause other goroutines using the original session to wait .
5030	Close terminates the session . It s a runtime error to use a session after it has been closed .
5031	Refresh puts back any reserved sockets in use and restarts the consistency guarantees according to the current consistency setting for the session .
5032	SetSyncTimeout sets the amount of time an operation with this session will wait before returning an error in case a connection to a usable server can t be established . Set it to zero to wait forever . The default value is 7 seconds .
5033	SetSocketTimeout sets the amount of time to wait for a non - responding socket to the database before it is forcefully closed .
5034	SetCursorTimeout changes the standard timeout period that the server enforces on created cursors . The only supported value right now is 0 which disables the timeout . The standard server timeout is 10 minutes .
5035	SetPoolLimit sets the maximum number of sockets in use in a single server before this session will block waiting for a socket to be available . The default limit is 4096 . This limit must be set to cover more than any expected workload of the application . It is a bad practice and an unsupported use case to use the database driver to define the concurrency limit of an application . Prevent such concurrency at the door instead by properly restricting the amount of used resources and number of goroutines before they are created .
5036	Safe returns the current safety mode for the session .
5037	Fsync flushes in - memory writes to disk on the server the session is established with . If async is true the call returns immediately otherwise it returns after the flush has been made .
5038	FsyncUnlock releases the server for writes . See FsyncLock for details .
5039	Repair returns an iterator that goes over all recovered documents in the collection in a best - effort manner . This is most useful when there are damaged data files . Multiple copies of the same document may be returned by the iterator . Repair is supported in MongoDB 2 . 7 . 8 and later .
5040	Iter executes the pipeline and returns an iterator capable of going over all the generated results .
5041	One executes the pipeline and unmarshals the first item from the result set into the result parameter . It returns ErrNotFound if no items are generated by the pipeline .
5042	Batch sets the batch size used when fetching documents from the database . It s possible to change this setting on a per - session basis as well using the Batch method of Session . The default batch size is defined by the database server .
5043	IsDup returns whether err informs of a duplicate key error because a primary key index or a secondary unique index already has an entry with the given value .
5044	DropCollection removes the entire collection including all of its documents .
5045	Skip skips over the n initial documents from the query results . Note that this only makes sense with capped collections where documents are naturally ordered by insertion time or with sorted results .
5046	Limit restricts the maximum number of documents retrieved to n and also changes the batch size to the same value . Once n documents have been returned by Next the following call will return ErrNotFound .
5047	SetMaxScan constrains the query to stop after scanning the specified number of documents . This modifier is generally used to prevent potentially long running queries from disrupting performance by scanning through too much data .
5048	LogReplay enables an option that optimizes queries that are typically made on the MongoDB oplog for replaying it . This is an internal implementation aspect and most likely uninteresting for other uses . It has seen at least one use case though so it s exposed via the API .
5049	CollectionNames returns the collection names present in the db database .
5050	DatabaseNames returns the names of non - empty databases present in the cluster .
5051	Timeout returns true if Next returned false due to a timeout of a tailable cursor . In those cases Next may be called again to continue the iteration at the previous cursor position .
5052	Count returns the total number of documents in the result set .
5053	Count returns the total number of documents in the collection .
5054	VersionAtLeast returns whether the BuildInfo version is greater than or equal to the provided version number . If more than one number is provided numbers will be considered as major minor and so on .
5055	BuildInfo retrieves the version and other details about the running MongoDB server .
5056	setSocket binds socket to this section .
5057	writeQuery runs the given modifying operation potentially followed up by a getLastError command in case the session is in safe mode . The LastError result is made available in lerr and if lerr . Err is set it will also be returned as err .
5058	Acquire increases the reference count for the cluster .
5059	Release decreases the reference count for the cluster . Once it reaches zero all servers will be closed .
5060	syncServersLoop loops while the cluster is alive to keep its idea of the server topology up - to - date . It must be called just once from newCluster . The loop iterates once syncServersDelay has passed or if somebody injects a value into the cluster . sync channel to force a synchronization . A loop iteration will contact all servers in parallel ask them about known peers and their own role within the cluster and then attempt to do the same with all the peers retrieved .
5061	Close forces closing all sockets that are alive whether they re currently in use or not .
5062	RecycleSocket puts socket back into the unused cache .
5063	AbendSocket notifies the server that the given socket has terminated abnormally and thus should be discarded rather than cached .
5064	BestFit returns the best guess of what would be the most interesting server to perform operations on at this point in time .
5065	Add assigns the name to the template
5066	Instance implements gin s HTML render interface
5067	loadTemplate parses the specified template and returns it
5068	New returns a fresh instance of Render
5069	Create goes through the TemplatesDir creating the template structure for rendering . Returns the Render instance .
5070	Validate checks if the directory and the layout files exist as expected and configured
5071	tokenFor returns a unique transaction token that is composed by t s id and a nonce . If t already has a nonce assigned to it it will be used otherwise a new nonce will be generated .
5072	NewRunner returns a new transaction runner that uses tc to hold its transactions . Multiple transaction collections may exist in a single database but all collections that are touched by operations in a given transaction collection must be handled exclusively by it . A second collection with the same name of tc but suffixed by . stash will be used for implementing the transactional behavior of insert and remove operations .
5073	Run creates a new transaction with ops and runs it immediately . The id parameter specifies the transaction id and may be written down ahead of time to later verify the success of the change and resume it when the procedure is interrupted for any reason . If empty a random id will be generated . The info parameter if not nil is included under the i field of the transaction document . Operations across documents are not atomically applied but are guaranteed to be eventually all applied in the order provided or all aborted as long as the affected documents are only modified through transactions . If documents are simultaneously modified by transactions and out of transactions the behavior is undefined . If Run returns no errors all operations were applied successfully . If it returns ErrAborted one or more operations can t be applied and the transaction was entirely aborted with no changes performed . Otherwise if the transaction is interrupted while running for any reason it may be resumed explicitly or by attempting to apply another transaction on any of the documents targeted by ops as long as the interruption was made after the transaction document itself was inserted . Run Resume with the obtained transaction id to confirm whether the transaction was applied or not . Any number of transactions may be run concurrently with one runner or many .
5074	ResumeAll resumes all pending transactions . All ErrAborted errors from individual transactions are ignored .
5075	Resume resumes the transaction with id . It returns mgo . ErrNotFound if the transaction is not found . Otherwise it has the same semantics of the Run method after the transaction is inserted .
5076	SetChaos sets the failure injection parameters to c .
5077	Connect middleware clones the database session for each request and makes the db object available for each handler
5078	ErrorHandler is a middleware to handle errors encountered during requests
5079	assert verifies that all assertions in t match the content that t will be applied upon . If an assertion fails the transaction state is changed to aborted .
5080	Server returns the server that the socket is associated with . It returns nil while the socket is cached in its respective server .
5081	ServerInfo returns details for the server at the time the socket was initially acquired .
5082	InitialAcquire obtains the first reference to the socket either right after the connection is made or once a recycled socket is being put back in use .
5083	Acquire obtains an additional reference to the socket . The socket will only be recycled when it s released as many times as it s been acquired .
5084	Release decrements a socket reference . The socket will be recycled once its released as many times as it s been acquired .
5085	SetTimeout changes the timeout used on socket operations .
5086	This is intended for use in development + debugging and not intended to be a production error message . it also allows FieldError to be used as an Error interface
5087	This is intended for use in development + debugging and not intended to be a production error message . it also allows StructErrors to be used as an Error interface
5088	New creates a new Validate instance for use .
5089	Field allows validation of a single field still using tag style validation to check multiple errors
5090	FieldWithValue allows validation of a single field possibly even against another fields value still using tag style validation to check multiple errors
5091	Create an article
5092	Edit an article
5093	List all articles
5094	Update an article
5095	Delete an article
5096	ObjectIdHex returns an ObjectId from the provided hex representation . Calling this function with an invalid hex representation will cause a runtime panic . See the IsObjectIdHex function .
5097	IsObjectIdHex returns whether s is a valid hex representation of an ObjectId . See the ObjectIdHex function .
5098	NewObjectId returns a new unique ObjectId .
5099	NewObjectIdWithTime returns a dummy ObjectId with the timestamp part filled with the provided number of seconds from epoch UTC and all other parts filled with zeroes . It s not safe to insert a document with an id generated by this method it is useful only for queries to find documents with ids generated before or after the specified timestamp .
5100	MarshalJSON turns a bson . ObjectId into a json . Marshaller .
5101	byteSlice returns byte slice of id from start to end . Calling this function with an invalid id will cause a runtime panic .
5102	Time returns the timestamp part of the id . It s a runtime error to call this method with an invalid id .
5103	Counter returns the incrementing value part of the id . It s a runtime error to call this method with an invalid id .
5104	Insert queues up the provided documents for insertion .
5105	Run runs all the operations queued up .
5106	length tests whether a variable s length is equal to a given value . For strings it tests the number of characters whereas for maps and slices it tests the number of items .
5107	min tests whether a variable value is larger or equal to a given number . For number types it s a simple lesser - than test ; for strings it tests the number of characters whereas for maps and slices it tests the number of items .
5108	max tests whether a variable value is lesser than a given value . For numbers it s a simple lesser - than test ; for strings it tests the number of characters whereas for maps and slices it tests the number of items .
5109	Connect connects to mongodb
5110	Enable the delivery of debug messages to the logger . Only meaningful if a logger is also set .
5111	Remove deletes all files with the provided name from the GridFS .
5112	SetChunkSize sets size of saved chunks . Once the file is written to it will be split in blocks of that size and each block saved into an independent chunk document . The default chunk size is 256kb . It is a runtime error to call this function once the file has started being written to .
5113	SetId changes the current file Id . It is a runtime error to call this function once the file has started being written to or when the file is not open for writing .
5114	SetName changes the optional file name . An empty string may be used to unset it . It is a runtime error to call this function when the file is not open for writing .
5115	ContentType changes the optional file content type . An empty string may be used to unset it . It is a runtime error to call this function when the file is not open for writing .
5116	Size returns the file size in bytes .
5117	SetUploadDate changes the file upload time . It is a runtime error to call this function when the file is not open for writing .
5118	Abort cancels an in - progress write preventing the file from being automically created and ensuring previously written chunks are removed when the file is closed . It is a runtime error to call Abort when the file was not opened for writing .
5119	Write writes the provided data to the file and returns the number of bytes written and an error in case something wrong happened . The file will internally cache the data so that all but the last chunk sent to the database have the size defined by SetChunkSize . This also means that errors may be deferred until a future call to Write or Close . The parameters and behavior of this function turn the file into an io . Writer .
5120	Read reads into b the next available data from the file and returns the number of bytes written and an error in case something wrong happened . At the end of the file n will be zero and err will be set to os . EOF . The parameters and behavior of this function turn the file into an io . Reader .
5121	setCursorPosition sets the cursor to the specified position bounded to the screen size
5122	collectAnsiIntoWindowsAttributes modifies the passed Windows text mode flags to reflect the request represented by the passed ANSI mode .
5123	invertAttributes inverts the foreground and background colors of a Windows attributes value
5124	simulateLF simulates a LF or CR + LF by scrolling if necessary to handle the current cursor position and scroll region settings in which case it returns true . If no special handling is necessary then it does nothing and returns false . In the false case the caller should ensure that a carriage return and line feed are inserted or that the text is otherwise wrapped .
5125	executeLF executes a LF without a CR .
5126	effectiveSr gets the current effective scroll region in buffer coordinates
5127	scroll scrolls the provided scroll region by param lines . The scroll region is in buffer coordinates .
5128	scrollLine scrolls a line horizontally starting at the provided position by a number of columns .
5129	bytesToHex converts a slice of bytes to a human - readable string .
5130	Can we change this to be an io . ReadCloser return
5131	A transformer function can be used to do post - download processing on the file before it is stored in the cache .
5132	Currently populateCache takes a transformer due to the fact that a fetchCachedDirectory uses only a TarTransformer which overwrites what is currently set . This way one transformer can be used to call Fetch and FetchAsDirectory
5133	Log calls UI . Log to write . LogFGColor and LogBGColor are used for color .
5134	Output calls UI . Output to write . OutputFGColor and OutputBGColor are used for color .
5135	Success calls UI . Success to write . Useful when you want separate colors or prefixes . SuccessFGColor and SuccessBGColor are used for color .
5136	Info calls UI . Info to write . Useful when you want separate colors or prefixes . InfoFGColor and InfoBGColor are used for color .
5137	Error calls UI . Error to write . ErrorFGColor and ErrorBGColor are used for color .
5138	Warn calls UI . Warn to write . Useful when you want separate colors or prefixes . WarnFGColor and WarnBGColor are used for color .
5139	Running calls UI . Running to write . Useful when you want separate colors or prefixes . RunningFGColor and RunningBGColor are used for color .
5140	Log prefixes to message before writing to Writer .
5141	Output simply writes to Writer .
5142	Error writes message to ErrorWriter .
5143	Log calls UI . Log to write . LogPrefix is used to prefix the message .
5144	Output calls UI . Output to write . OutputPrefix is used to prefix the message .
5145	Success calls UI . Success to write . Useful when you want separate colors or prefixes . SuccessPrefix is used to prefix the message .
5146	Info calls UI . Info to write . Useful when you want separate colors or prefixes . InfoPrefix is used to prefix the message .
5147	Error call UI . Error to write . ErrorPrefix is used to prefix the message .
5148	Warn calls UI . Warn to write . Useful when you want separate colors or prefixes . WarnPrefix is used to prefix message .
5149	Running calls Output to write . Useful when you want separate colors or prefixes . RunningPrefix is used to prefix message .
5150	New creates a BasicUI . This should be the first function you call . This is not thread safe and should only be used in serial applications .
5151	AddColor will wrap a colorful UI on top of ui . Use wlog s color variables for the color . All background colors are not changed by this function but you are able to change them manually . Just create this structure manually and change any of the background colors you want . Arguments are in alphabetical order .
5152	Log calls UI . Log to write . This is a thread safe function .
5153	NewMongoStore returns a new MongoStore . Set ensureTTL to true let the database auto - remove expired object by maxAge .
5154	New returns a session for the given name without adding it to the registry .
5155	Push pushes a segment id onto the segment stack .
5156	Pop pops a segment id off of the segment stack . It returns false if the stack is empty .
5157	Peek returns id from the top of the stack . It returns rootSegment if the stack is empty .
5158	RecordMetricsWithRecorder records metrics with the given recorder .
5159	Init initializes the embedded newrelic agent with the given app name and license key .
5160	errNo returns an error if the errno is < 0
5161	caller returns the name of the function that called the function this function was called from .
5162	Start the CollectorClient and the harvester thread that sends application performance data to New Relic once a minute .
5163	Tell the CollectorClient to shutdown and stop reporting application performance data to New Relic .
5164	NewTx returns a new transaction .
5165	NewRequestTx returns a new transaction with a request url .
5166	NewBackgroundTx returns a new background transaction
5167	Start starts a transaction setting the id .
5168	End ends a transaction .
5169	StartGeneric starts a generic segment .
5170	StartDatastore starts a datastore segment .
5171	StartExternal starts an external segment .
5172	EndSegment ends the segment at the top of the stack .
5173	ReportError reports an error that occured during the transaction .
5174	WithTx inserts a newrelic . Tx into the provided context .
5175	FromContext returns a newrelic . Tx from the context .
5176	TraceExternal adds an external segment to the newrelic transaction if one exists in the context .
5177	TraceGeneric adds a generic segment to the newrelic transaction if one exists in the context .
5178	TraceDatastore adds a datastore segment to the newrelic transaction if one exists in the context .
5179	trace is a helper function for TraceExternal and TraceGeneric you probably don t want to use it directly .
5180	Static returns a middleware handler that serves static files in the given directory .
5181	Purge is used to completely clear the cache .
5182	RemoveOldest removes the oldest item from the cache .
5183	Keys returns a slice of the keys in the cache from oldest to newest .
5184	removeElement is used to remove a given list element from the cache
5185	DefaultCluster returns the default Cluster .
5186	NewClusterWithHost returns a cluster with the given URIs .
5187	AddHost adds a host to the cluster .
5188	Host returns a host in the cluster .
5189	RemoveHost black lists the host with the given URI from the cluster .
5190	Hosts returns all available hosts in the cluster .
5191	Less returns true if this column sorts before the given Record .
5192	Less returns true if this field value sorts before the given Record .
5193	Index returns an index with a name .
5194	Indexes return a copy of the indexes in this schema
5195	HasIndex returns true if the given index is in the schema .
5196	NewPQLBaseQuery creates a new PQLQuery with the given PQL and index .
5197	Add adds a query to the batch .
5198	NewPQLRowQuery creates a new PqlRowQuery .
5199	String serializes this index to a JSON string .
5200	OptIndexKeys sets whether index uses string keys .
5201	OptIndexTrackExistence enables keeping track of existence of columns .
5202	NewIndex creates an index with a name .
5203	Fields return a copy of the fields in this index
5204	HasFields returns true if the given field exists in the index .
5205	Field creates a Field struct with the specified name and defaults .
5206	BatchQuery creates a batch query with the given queries .
5207	RawQuery creates a query with the given string . Note that the query is not validated before sending to the server .
5208	Intersect creates an Intersect query . Intersect performs a logical AND on the results of each ROW_CALL query passed to it .
5209	Not creates a Not query .
5210	Count creates a Count query . Returns the number of set columns in the ROW_CALL passed in .
5211	Options creates an Options query .
5212	GroupBy creates a GroupBy query with the given Rows queries
5213	GroupByLimit creates a GroupBy query with the given limit and Rows queries
5214	GroupByFilter creates a GroupBy query with the given filter and Rows queries
5215	OptFieldTypeSet adds a set field . Specify CacheTypeDefault for the default cache type . Specify CacheSizeDefault for the default cache size .
5216	OptFieldTypeInt adds an integer field .
5217	OptFieldTypeTime adds a time field .
5218	OptFieldTypeMutex adds a mutex field .
5219	Row creates a Row query . Row retrieves the indices of all the set columns in a row . It also retrieves any attributes set on that row or column .
5220	Set creates a Set query . Set assigns a value of 1 to a bit in the binary matrix thus associating the given row in the given field with the given column .
5221	SetTimestamp creates a Set query with timestamp . Set assigns a value of 1 to a column in the binary matrix thus associating the given row in the given field with the given column .
5222	ClearRow creates a ClearRow query . ClearRow sets all bits to 0 in a given row of the binary matrix thus disassociating the given row in the given field from all columns .
5223	RowTopN creates a TopN query with the given item count and row . This variant supports customizing the row query .
5224	FilterAttrTopN creates a TopN query with the given item count row attribute name and filter values for that field The attrName and attrValues arguments work together to only return Rows which have the attribute specified by attrName with one of the values specified in attrValues .
5225	Store creates a Store call . Store writes the result of the row query to the specified row . If the row already exists it will be replaced . The destination field must be of field type set .
5226	NotNull creates a not equal to null query .
5227	Between creates a between query .
5228	SetIntValue creates a Set query .
5229	NewPQLRowsQuery creates a new PQLRowsQuery .
5230	Rows creates a Rows query with defaults
5231	RowsLimit creates a Rows query with the given limit
5232	Result returns the first result or nil .
5233	MarshalJSON serializes this row result .
5234	NewURIFromHostPort returns a URI with specified host and port .
5235	NewURIFromAddress parses the passed address and returns a URI .
5236	SetScheme sets the scheme of this URI .
5237	SetHost sets the host of this URI .
5238	Normalize returns the address in a form usable by a HTTP client .
5239	Equals returns true if the checked URI is equivalent to this URI .
5240	ValidLabel returns true if the given label is valid otherwise false .
5241	ValidKey returns true if the given key is valid otherwise false .
5242	NewClient creates a client with the given address URI or cluster and options .
5243	Query runs the given query against the server with the given options . Pass nil for default options .
5244	CreateIndex creates an index on the server using the given Index struct .
5245	CreateField creates a field on the server using the given Field struct .
5246	EnsureIndex creates an index on the server if it does not exist .
5247	EnsureField creates a field on the server if it doesn t exists .
5248	DeleteIndex deletes an index on the server .
5249	DeleteField deletes a field on the server .
5250	SyncSchema updates a schema with the indexes and fields on the server and creates the indexes and fields in the schema on the server side . This function does not delete indexes and the fields on the server side nor in the schema .
5251	Schema returns the indexes and fields on the server .
5252	ImportField imports records from the given iterator .
5253	ExportField exports columns for a field .
5254	Status returns the server s status .
5255	httpRequest makes a request to the cluster - use this when you want the client to choose a host and it doesn t matter if the request goes to a specific host
5256	doRequest creates and performs an http request .
5257	statusToNodeShardsForIndex finds the hosts which contains shards for the given index
5258	ExperimentalReplayImport takes a data stream which was previously recorded by the import logging functionality and imports it to Pilosa . The target cluster need not be of the same size as the original cluster but it must already have the necessary schema in place . It is an experimental method and may be changed or removed .
5259	viewByTimeUnit returns the view name for time with a given quantum unit .
5260	OptClientSocketTimeout is the maximum idle socket time in nanoseconds
5261	OptClientConnectTimeout is the maximum time to connect in nanoseconds .
5262	OptClientPoolSizePerRoute is the maximum number of active connections in the pool to a host .
5263	OptClientTotalPoolSize is the maximum number of connections in the pool .
5264	OptClientTLSConfig contains the TLS configuration .
5265	OptClientManualServerAddress forces the client use only the manual server address
5266	ExperimentalOptClientLogImports writes all imports to the given writer in such a way that they can easily be replayed into another Pilosa cluster . It is an experimental option and may be changed or removed .
5267	OptQueryColumnAttrs enables returning column attributes in the result .
5268	OptQueryShards restricts the set of shards on which a query operates .
5269	OptQueryExcludeAttrs enables discarding attributes from a result
5270	OptQueryExcludeColumns enables discarding columns from a result
5271	OptImportThreadCount is the number of goroutines allocated for import .
5272	OptImportBatchSize is the number of records read before importing them .
5273	OptImportStatusChannel is a channel which carry import status information . Make sure to read from this channel otherwise the import process will stall .
5274	OptImportClear sets clear import which clears bits instead of setting them .
5275	OptImportRoaring enables importing using roaring bitmaps which is more performant .
5276	OptImportSort tells the importer whether or not to sort batches of records on by default . Sorting imposes some performance cost especially on data that s already sorted but dramatically improves performance in pathological cases . It is enabled by default because the pathological cases are awful and the performance hit is comparatively small but the performance cost can be significant if you know your data is sorted .
5277	Read updates the passed array with the exported CSV data and returns the number of bytes read
5278	ColumnUnmarshallerWithTimestamp creates a RecordUnmarshaller for importing columns with the given format and timestamp format .
5279	NewIterator creates a CSVIterator from a Reader .
5280	NewColumnIterator creates a new iterator for column data .
5281	NewColumnIteratorWithTimestampFormat creates a new iterator for column data with timestamp .
5282	NewValueIterator creates a new iterator for value data .
5283	NextRecord iterates on lines of a Reader . Returns io . EOF on end of iteration .
5284	FieldValueUnmarshaller is a function which creates a Record from a CSV file line with value data .
5285	MergeConfig merges two config objects together and returns the resulting configuration . Values from the right take precedence over the left side .
5286	stringFormat given a set of column widths and the number of columns in the current line returns a sprintf - style format string which can be used to print output aligned properly with other lines using the same widths set .
5287	elementsFromLine returns a list of elements each representing a single item which will belong to a column of output .
5288	widthsFromLines examines a list of strings and determines how wide each column should be considering all of the elements that need to be printed within it .
5289	Format is the public - facing interface that takes a list of strings and returns nicely aligned column - formatted text .
5290	Build builds the URL host using the given positional and named variables and writes it to the given URL .
5291	Build builds the URL path using the given positional and named variables and writes it to the given URL .
5292	braceIndices returns the first level curly brace indices from a string . It returns an error in case of unbalanced braces .
5293	Extract returns positional and named variables extracted from the URL host .
5294	mergeValues returns the result of merging two url . Values .
5295	redirectPath returns a handler that redirects if the path trailing slash differs from the request URL path .
5296	CompileRegexp compiles a regular expression pattern and creates a template to revert it .
5297	Match returns whether the regexp matches the given string .
5298	Values matches the regexp and returns the results for positional and named groups . Positional values are stored using an empty string as key . If the string doesn t match it returns nil .
5299	Revert builds a string for this regexp using the given values . Positional values use an empty string as key . The values are modified in place and only the unused ones are left .
5300	RevertValid is the same as Revert but it also validates the resulting string matching it against the compiled regexp . The values are modified in place and only the unused ones are left .
5301	write writes a reverse template to the buffer .
5302	New creates Cmp for multiple comparison mode .
5303	New creates Cmp for single comparison mode .
5304	CompareFile verifies that files with names path1 path2 have same contents .
5305	readPartial keeps reading from reader into provided buffer until buffer size reaches exactly n2 . n1 is initial buffer size . useful to ensure we get an specific buffer size from reader withstanding partial reads .
5306	postEOFCheck returns false if there is more data in a LimitedReader after hitting EOF
5307	Equivalent to HAProxy show stat command .
5308	Equivalent to HAProxy show info command .
5309	RunCommand is the entrypoint to the client . Sends an arbitray command string to HAProxy .
5310	IsExist returns whether the error is known to report that an user or group already exists . It is satisfied by ErrUserExist and ErrGroupExist .
5311	exist checks if the file exists .
5312	Contain returns whether the named file contains the byte slice b . The return value is a boolean .
5313	ContainString returns whether the named file contains the string s . The return value is a boolean .
5314	Sets environment variables and a null logger .
5315	StartLogger initializes the log file .
5316	openDBFile opens a file .
5317	backup does a backup of a file .
5318	New returns the interface to handle the package manager .
5319	RegisterCrypt registers a function that returns a new instance of the given crypt function . This is intended to be called from the init function in packages that implement crypt functions .
5320	New returns a new crypter .
5321	NewFromHash returns a new Crypter using the prefix in the given hashed key .
5322	Text returns the most recents tokens generated by a call to Scan as a newly allocated string holding its bytes .
5323	Exec executes a command setting both standard input output and error .
5324	ExecSudo executes a command under sudo .
5325	nextUID returns the next free user id to use according to whether it is a system s user .
5326	nextGUID returns the next free group id to use according to whether it is a system s group .
5327	NextSystemUID returns the next free system user id to use .
5328	NextSystemGID returns the next free system group id to use .
5329	NextUID returns the next free user id to use .
5330	NextGID returns the next free group id to use .
5331	NewShadow returns a structure Shadow with fields Min Max and Warn got from the system configuration and enabling the features of password aging .
5332	parseShadow parses the row of a shadowed password .
5333	LookupShadow looks for the entry for the given user name .
5334	== Editing Add adds a new shadowed user . If the key is not nil generates a hashed password . It is created a backup before of modify the original file .
5335	Copy copies file in source to file in dest preserving the mode attributes .
5336	Create creates a new file with b bytes .
5337	loadConfig loads user configuration . It has to be loaded before of edit some file .
5338	NewEdit opens a file to edit ; it is created a backup .
5339	AppendString is like Append but writes the contents of string s rather than an array of bytes .
5340	Comment inserts the comment character in lines that mach any regular expression in reLine .
5341	CommentOut removes the comment character of lines that mach any regular expression in reLine .
5342	CommentM inserts the comment character in lines that mach any regular expression in reLine in the named file .
5343	CommentOutM removes the comment character of lines that mach any regular expression in reLine in the named file .
5344	ReplaceN replaces a number of regular expressions mathed in r for the named file .
5345	ReplaceAtLine replaces all regular expressions mathed in r for the named file if the line is matched at the first .
5346	ReplaceAtLineN replaces a number of regular expressions mathed in r for the named file if the line is matched at the first .
5347	Sets the settings files of the caller .
5348	getSettingsForUid returns the settings files of the given user id .
5349	== Set variables _Set sets the value named by the key in the given filename .
5350	_MSet sets multiple values named by the keys in the given filename .
5351	== Set session - wide variables Set sets the value of the environment variable named by the key that affects the current user . It returns an error if any .
5352	MSet sets multiple values of the environment variables named by the keys that affects the current user . It returns an error if any .
5353	SetForUid sets the value of the environment variable named by the key that affects a particular user . It returns an error if any .
5354	MSetForUid sets multiple values of the environment variables named by the keys that affects a particular user . It returns an error if any .
5355	== Set system - wide variables Setsys sets the value of the environment variable named by the key that affects the system as a whole . You must be Root . It returns an error if any .
5356	MSetsys sets multiple values of the environment variables named by the keys that affects the system as a whole . You must be Root . It returns an error if any .
5357	SetsysForUid sets the value of the environment variable named by the key that affects the system as a whole . You must be Root . It returns an error if any .
5358	MSetsysForUid sets multiple values of the environment variables named by the keys that affects the system as a whole . You must be Root . It returns an error if any .
5359	NewGShadow returns a new GShadow .
5360	parseGShadow parses the row of a group shadow .
5361	== Lookup lookUp parses the shadowed group line searching a value into the field . Returns nil if it isn t found .
5362	LookupGShadow looks up a shadowed group by name .
5363	== Editing Add adds a new shadowed group . If the key is not nil generates a hashed password . It is created a backup before of modify the original file .
5364	NewUser returns a new User with both fields Dir and Shell got from the system configuration .
5365	NewSystemUser returns a new system user .
5366	IsOfSystem indicates whether it is a system user .
5367	parseUser parses the row of an user .
5368	== Lookup lookUp parses the user line searching a value into the field . Returns nil if is not found .
5369	LookupUID looks up an user by user ID .
5370	LookupUser looks up an user by name .
5371	GetUsername returns the user name from the password database for the actual process . It panics whther there is an error at searching the UID .
5372	GetUsernameFromEnv returns the user name from the environment variable for the actual process .
5373	== Editing AddUser adds an user to both user and shadow files .
5374	AddSystemUser adds a system user to both user and shadow files .
5375	Add adds a new user . Whether UID is < 0 it will choose the first id available in the range set in the system configuration .
5376	DelUser removes an user from the system .
5377	ParseFile creates a new Config and parses the file configuration from the named file .
5378	Print outputs the keys and values parsed .
5379	Getbool returns the boolean value for a given key .
5380	Getint returns the integer value for a given key .
5381	Getuint returns the unsigned integer value for a given key .
5382	Getfloat returns the float value for a given key .
5383	Set writes a new value for key .
5384	Run executes external commands just like RunWithMatch but does not return the boolean match .
5385	NewInfo returns a info describing the named file .
5386	OwnerHas reports whether the owner has all given permissions .
5387	GroupHas reports whether the group has all given permissions .
5388	OthersHave reports whether the others have all given permissions .
5389	OwnerHas reports whether the named file has all given permissions for the owner .
5390	lookupCrypter returns the first crypt function found in shadowed passwd file .
5391	Passwd sets a hashed passwd for the actual user . The passwd must be supplied in clear - text .
5392	Passwd sets a hashed passwd for the actual group . The passwd must be supplied in clear - text .
5393	== Change passwd ChPasswd updates passwd . The passwd must be supplied in clear - text .
5394	ChGPasswd updates group passwd . The passwd must be supplied in clear - text .
5395	== Locking LockUser locks the passwd of the given user .
5396	AddGroup returns a new Group .
5397	NewSystemGroup adds a system group .
5398	IsOfSystem indicates whether it is a system group .
5399	parseGroup parses the row of a group .
5400	== Lookup lookUp parses the group line searching a value into the field . Returns nil if it is not found .
5401	LookupGID looks up a group by group ID .
5402	LookupGroup looks up a group by name .
5403	Getgroups returns a list of the numeric ids of groups that the caller belongs to .
5404	GetgroupsName returns a list of the groups that the caller belongs to .
5405	== Editing AddGroup adds a group .
5406	AddSystemGroup adds a system group .
5407	Add adds a new group . Whether GID is < 0 it will choose the first id available in the range set in the system configuration .
5408	DelGroup removes a group from the system .
5409	AddUsersToGroup adds the members to a group .
5410	DelUsersInGroup removes the specific members from a group .
5411	== Utility checkGroup indicates if a value is into a group .
5412	Detect returns the Linux distribution .
5413	AddSystem adds the given System to the World sorted by priority .
5414	AddSystemInterface adds a system to the world but also adds a filter that allows automatic adding of entities that match the provided in interface and excludes any that match the provided ex interface even if they also match in . in and ex must be pointers to the interface or else this panics .
5415	AddEntity adds the entity to all systems that have been added via AddSystemInterface . If the system was added via AddSystem the entity will not be added to it .
5416	Update updates each System managed by the World . It is invoked by the engine once every frame with dt being the duration since the previous update .
5417	RemoveEntity removes the entity across all systems .
5418	NewBasics creates an amount of new entities with a new unique identifiers . It is safe for concurrent use and performs better than NewBasic for large numbers of entities .
5419	AppendChild appends a child to the BasicEntity
5420	Less will return true if the ID of element at i is less than j ; part of the sort . Interface
5421	Swap the elements at positions i and j part of the sort . Interface
5422	NewGroup creates a new broadcast group .
5423	Members returns a slice of Members that are currently in the Group .
5424	Leave removes the provided member from the group and closes him
5425	Add adds a member to the group for the provided interface channel .
5426	Broadcast messages received from one group member to others . If incoming messages not arrived during timeout then function returns .
5427	Send broadcasts a message to every one of a Group s members .
5428	Send broadcasts a message from one Member to the channels of all the other members in its group .
5429	update modifies the priority and value of an Item in the queue .
5430	NewBot creates a new instance of Bot
5431	Uptime returns the uptime of the bot
5432	Incoming message gathering routine
5433	Handles message speed throtling
5434	WaitFor will block until a message matching the given filter is received
5435	StandardRegistration performsa a basic set of registration commands
5436	Set username real name and mode
5437	SetNick sets the bots nick on the irc server
5438	Run starts the bot and connects to the server . Blocks until we disconnect from the server .
5439	ChMode is used to change users modes in a channel operator = + o deop = - o ban = + b
5440	Close closes the bot
5441	AddTrigger adds a trigger to the bot s handlers
5442	Handle executes the trigger action if the condition is satisfied
5443	StartUnixListener starts up a unix domain socket listener for reconnects to be sent through
5444	Attempt to hijack session previously running bot
5445	Ended returns true if the Call has reached a terminal state and false otherwise or if the state can t be determined .
5446	EndedUnsuccessfully returns true if the Call has reached a terminal state and that state isn t completed .
5447	Cancel an in - progress Call with the given sid . Cancel will not affect in - progress Calls only those in queued or ringing .
5448	Hang up an in - progress call .
5449	Redirect the given call to the given URL .
5450	Initiate a new Call .
5451	MakeCall starts a new Call from the given phone number to the given phone number dialing the url when the call connects . MakeCall is a wrapper around Create ; if you need more configuration call that function directly .
5452	GetCallsInRange gets an Iterator containing calls in the range [ start end ) optionally further filtered by data . GetCallsInRange panics if start is not before end . Any date filters provided in data will be ignored . If you have an end but don t want to specify a start use twilio . Epoch for start . If you have a start but don t want to specify an end use twilio . HeatDeath for end . Assumes that Twilio returns resources in chronological order latest first . If this assumption is incorrect your results will not be correct . Returned CallPages will have at most PageSize results but may have fewer based on filtering .
5453	GetNextCallsInRange retrieves the page at the nextPageURI and continues retrieving pages until any results are found in the range given by start or end or we determine there are no more records to be found in that range . If CallPage is non - nil it will have at least one result .
5454	GetRecordings returns an array of recordings for this Call . Note there may be more than one Page of results .
5455	GetRecordings returns an iterator of recording pages for this Call . Note there may be more than one Page of results .
5456	returns the call price by country
5457	returns the call price by number
5458	returns a list of countries where Twilio voice services are available and the corresponding URL for retrieving the country specific voice prices .
5459	returns the message price by country
5460	returns a list of countries where Twilio messaging services are available and the corresponding URL for retrieving the country specific messaging prices .
5461	Delete the Key with the given sid . If the Key has already been deleted or does not exist Delete returns nil . If another error or a timeout occurs the error is returned .
5462	GetAlertsInRange gets an Iterator containing conferences in the range [ start end ) optionally further filtered by data . GetAlertsInRange panics if start is not before end . Any date filters provided in data will be ignored . If you have an end but don t want to specify a start use twilio . Epoch for start . If you have a start but don t want to specify an end use twilio . HeatDeath for end . Assumes that Twilio returns resources in chronological order latest first . If this assumption is incorrect your results will not be correct . Returned AlertPages will have at most PageSize results but may have fewer based on filtering .
5463	GetNextAlertsInRange retrieves the page at the nextPageURI and continues retrieving pages until any results are found in the range given by start or end or we determine there are no more records to be found in that range . If AlertPage is non - nil it will have at least one result .
5464	Description tries as hard as possible to give you a one sentence description of this Alert based on its contents . Description does not include a trailing period .
5465	StatusCode attempts to return a HTTP status code for this Alert . Returns 0 if the status code cannot be found .
5466	Friendly prints out a friendly version of the Direction following the example shown in the Twilio Dashboard .
5467	SendMessage is a convenience wrapper around Create .
5468	GetPage returns a single page of resources . To retrieve multiple pages use GetPageIterator .
5469	GetMessagesInRange gets an Iterator containing calls in the range [ start end ) optionally further filtered by data . GetMessagesInRange panics if start is not before end . Any date filters provided in data will be ignored . If you have an end but don t want to specify a start use twilio . Epoch for start . If you have a start but don t want to specify an end use twilio . HeatDeath for end . Assumes that Twilio returns resources in chronological order latest first . If this assumption is incorrect your results will not be correct . Returned MessagePages will have at most PageSize results but may have fewer based on filtering .
5470	GetNextMessagesInRange retrieves the page at the nextPageURI and continues retrieving pages until any results are found in the range given by start or end or we determine there are no more records to be found in that range . If MessagePage is non - nil it will have at least one result .
5471	Get returns a single Queue or an error .
5472	Create a new Queue .
5473	Delete the Queue with the given sid . If the Queue has already been deleted or does not exist Delete returns nil . If another error or a timeout occurs the error is returned .
5474	GetConferencesInRange gets an Iterator containing conferences in the range [ start end ) optionally further filtered by data . GetConferencesInRange panics if start is not before end . Any date filters provided in data will be ignored . If you have an end but don t want to specify a start use twilio . Epoch for start . If you have a start but don t want to specify an end use twilio . HeatDeath for end . Assumes that Twilio returns resources in chronological order latest first . If this assumption is incorrect your results will not be correct . Returned ConferencePages will have at most PageSize results but may have fewer based on filtering .
5475	GetNextConferencesInRange retrieves the page at the nextPageURI and continues retrieving pages until any results are found in the range given by start or end or we determine there are no more records to be found in that range . If ConferencePage is non - nil it will have at least one result .
5476	NewPhoneNumber parses the given value as a phone number or returns an error if it cannot be parsed as one . If a phone number does not begin with a plus sign we assume it s a US national number . Numbers are stored in E . 164 format .
5477	Friendly returns a friendly international representation of the phone number for example + 14105554092 is returned as + 1 410 - 555 - 4092 . If the phone number is not in E . 164 format we try to parse it as a US number . If we cannot parse it as a US number it is returned as is .
5478	NewTwilioTime returns a TwilioTime instance . val should be formatted using the TimeLayout .
5479	Price flips the sign of the amount and prints it with a currency symbol for the given unit .
5480	capitalize the first letter in s
5481	Delete the Caller ID with the given sid . If the ID has already been deleted or does not exist Delete returns nil . If another error or a timeout occurs the error is returned .
5482	returns a new Client to use the pricing API
5483	NewClient creates a Client for interacting with the Twilio API . This is the main entrypoint for API interactions ; view the methods on the subresources for more information .
5484	CreateResource makes a POST request to the given resource .
5485	Make a request to the Twilio API .
5486	Delete the Application with the given sid . If the Application has already been deleted or does not exist Delete returns nil . If another error or a timeout occurs the error is returned .
5487	URL returns the URL that can be used to play this recording based on the extension . No error is returned if you provide an invalid extension . As of October 2016 the valid values are . wav and . mp3 .
5488	Delete the Recording with the given sid . If the Recording has already been deleted or does not exist Delete returns nil . If another error or a timeout occurs the error is returned .
5489	Get returns a Media struct representing a Media instance or an error .
5490	BuyNumber attempts to buy the provided phoneNumber and returns it if successful .
5491	Get retrieves a single IncomingPhoneNumber .
5492	Release removes an IncomingPhoneNumber from your account .
5493	GetPage retrieves an IncomingPhoneNumberPage filtered by the given data .
5494	Get returns a single Transcription or an error .
5495	Delete the Transcription with the given sid . If the Transcription has already been deleted or does not exist Delete returns nil . If another error or a timeout occurs the error is returned .
5496	returns the phone number price by country
5497	returns a list of countries where Twilio phone numbers are supported
5498	Next asks for the next page of resources and decodes the results into v .
5499	NewNextPageIterator returns a PageIterator based on the provided nextPageURI and is designed for iterating if you have a nextPageURI and not a list of query values . NewNextPageIterator panics if nextPageURI is empty .
5500	containsResultsInRange returns true if any results are in the range [ start end ) .
5501	indexesOutsideRange returns the indexes of times in results that are outside of [ start end ) . indexesOutsideRange panics if start is later than end .
5502	NewDefaultLogger return a logger split by fileSize by default
5503	init filelogger split by fileSize
5504	init fileLogger split by daily
5505	After some interval time goto check the current fileLogger s size or date
5506	If the current fileLogger need to split just split
5507	passive to close fileLogger
5508	Receive logStr from f s logChan and print logstr to file
5509	Printf throw logstr to channel to print to the logger . Arguments are handled in the manner of fmt . Printf .
5510	Print throw logstr to channel to print to the logger . Arguments are handled in the manner of fmt . Print .
5511	Println throw logstr to channel to print to the logger . Arguments are handled in the manner of fmt . Println .
5512	Change the sizeSplit fileLogger s bak file count
5513	Change the sizeSplit fileLogger s single file size
5514	return length in bytes for regular files
5515	GetProfile fetches the recipient s profile from facebook platform Non empty UserID has to be specified in order to receive the information
5516	Handler is the main HTTP handler for the Messenger service . It MUST be attached to some web server in order to receive messages
5517	DeleteGetStartedButton delets a button set by SetGetStartedButton
5518	NewWebURLButton creates a button used in ButtonTemplate that redirects user to external address upon clicking the URL
5519	NewPostbackButton creates a button used in ButtonTemplate that upon clicking sends a payload request to the server
5520	NewPhoneNumberButton creates a button used in ButtonTemplate that upon clicking opens a native dialer
5521	Lua accepts concatenation with string and number .
5522	commonKind returns the kind to which v1 and v2 can be converted with the least information loss .
5523	pushNumberValue pushes the number resulting from an arithmetic operation . At least one operand must be a proxy for this function to be called . See the main documentation for the conversion rules .
5524	Shorthand for kind - switches .
5525	Lua 5 . 1 lua_tostring function only supports string and numbers . Extend it for internal purposes . From the Lua 5 . 3 source code .
5526	Mark value on top of the stack as visited using the registry index .
5527	Push visited value on top of the stack . If the value was not visited return false and push nothing .
5528	Also for arrays .
5529	GoToLua pushes a Go value val on the Lua stack . It unboxes interfaces . Pointers are followed recursively . Slices structs and maps are copied over as tables .
5530	NewLuaObject creates a new LuaObject from stack index .
5531	NewLuaObjectFromName creates a new LuaObject from the object designated by the sequence of subfields .
5532	NewLuaObjectFromValue creates a new LuaObject from a Go value . Note that this will convert any slices or maps into Lua tables .
5533	Close frees the Lua reference of this object .
5534	Get stores in a the Lua value indexed at the sequence of subfields . a must be a pointer as in LuaToGo .
5535	GetObject returns the LuaObject indexed at the sequence of subfields .
5536	Push pushes this LuaObject on the stack .
5537	Setv copies values between two tables in the same Lua state . It overwrites existing values .
5538	Iter creates a Lua iterator .
5539	NewClient creates a new Client connection from the user name password and resource passed to it . It uses default host URL and conf URL .
5540	NewClientWithServerInfo creates a new Client connection from the user name password resource host URL and conf URL passed to it .
5541	Status sends a string to HipChat to indicate whether the client is available to chat away or idle .
5542	Join accepts the room id and the name used to display the client in the room .
5543	Part accepts the room id to part .
5544	Say accepts a room id the name of the client in the room and the message body and sends the message to the HipChat room .
5545	PrivSay accepts a client id the name of the client and the message body and sends the private message to the HipChat user .
5546	KeepAlive is meant to run as a goroutine . It sends a single whitespace character to HipChat every 60 seconds . This keeps the connection from idling after 150 seconds .
5547	RequestRooms will send an outgoing request to get the room information for all rooms
5548	RequestUsers will send an outgoing request to get the user information for all users
5549	Make a deep copy from src into dst .
5550	ToTable turns StringData type into a TabularData type
5551	NumRows returns the number of rows in a table map
5552	LongestLine returns the longest step line in a scenario .
5553	LongestLine returns the longest step line in a feature .
5554	BuildAndRunDirWithGoBuildTags builds the given director s features into Go Code using the filters provided . Also takes a string for the build tags to be passed to the go command . An error is returned if the build fails . If goBuildTags is empty the param will be ignored .
5555	ToSlash is being used to coerce the different os PathSeparators into the forward slash as the forward slash is required by Go s import statement
5556	Encode in little endian
5557	Decode parses a RDB file from r and calls the decode hooks on d .
5558	Calls putPart up to nTry times to recover from transient errors .
5559	uploads a part checking the etag against the calculated value
5560	Try to abort multipart upload . Do not error on failure .
5561	Check the virtual server instance is ready for use
5562	Find the price in the given package that has the specified category
5563	Find the price in the given package with the specified size
5564	Find the price in the given package with the specified size and iops
5565	WithTimeout adds the timeout to the find vms by states params
5566	WithContext adds the context to the find vms by states params
5567	WithStates adds the states to the find vms by states params
5568	WithPayload adds the payload to the update Vm with state o k response
5569	WithTimeout adds the timeout to the order Vm by filter params
5570	WithContext adds the context to the order Vm by filter params
5571	WithBody adds the body to the order Vm by filter params
5572	Delete deletes the instance settings for a given instance ID .
5573	Fetch gets the agent settings for a given instance ID .
5574	Update updates the agent settings for a given instance ID .
5575	NewHTTPClient creates a new soft layer VM pool HTTP client .
5576	New creates a new soft layer VM pool client
5577	SetTransport changes the transport on the client and all its subresources
5578	Validate validates this vms response
5579	WithTimeout adds the timeout to the find vms by deployment params
5580	WithContext adds the context to the find vms by deployment params
5581	WithDeployment adds the deployment to the find vms by deployment params
5582	WithTimeout adds the timeout to the update Vm params
5583	WithContext adds the context to the update Vm params
5584	WithBody adds the body to the update Vm params
5585	NewAgentSettings creates new agent settings for a VM .
5586	ConfigureNetworks updates the agent settings with the networks settings .
5587	DetachPersistentDisk updates the agent settings in order to delete an attached persistent disk .
5588	Validate validates the TLS options .
5589	WithTimeout adds the timeout to the find vms by filters params
5590	WithContext adds the context to the find vms by filters params
5591	WithBody adds the body to the find vms by filters params
5592	WithTimeout adds the timeout to the delete Vm params
5593	WithContext adds the context to the delete Vm params
5594	WithCid adds the cid to the delete Vm params
5595	WithPayload adds the payload to the add Vm o k response
5596	Validate validates this state
5597	WithTimeout adds the timeout to the update Vm with state params
5598	WithContext adds the context to the update Vm with state params
5599	WithBody adds the body to the update Vm with state params
5600	WithCid adds the cid to the update Vm with state params
5601	WithTimeout adds the timeout to the add Vm params
5602	WithContext adds the context to the add Vm params
5603	WithBody adds the body to the add Vm params
5604	Validate validates the Agent options .
5605	WithTimeout adds the timeout to the list Vm params
5606	WithContext adds the context to the list Vm params
5607	Validate validates this error
5608	WithPayload adds the payload to the order Vm by filter o k response
5609	Validate validates this error type
5610	WithTimeout adds the timeout to the get Vm by cid params
5611	WithContext adds the context to the get Vm by cid params
5612	WithCid adds the cid to the get Vm by cid params
5613	Validate validates this Vm response
5614	LoadCodec loads a pre - compiled language file
5615	MustLoadCodec panics if word bank is missing only for tests
5616	loadBank opens a wordlist file and returns all words inside
5617	given this many words we will produce this many bytes . sometimes there are two possibilities . if maybeShorter is true then represents len OR len - 1 bytes
5618	GetIndex finds the index of the words to create bytes Generates a map the first time it is loaded to avoid needless computation when list is not used .
5619	Sum returns the first 20 bytes of SHA256 of the bz .
5620	Equals - you probably don t need to use this . Runs in constant time based on length of the keys .
5621	Deterministically generates new priv - key bytes from key .
5622	Set hashes the key and value and appends it to the kv pairs .
5623	NewPrivKeyLedgerSecp256k1 will generate a new key and store the public key for later use .
5624	ValidateKey allows us to verify the sanity of a key after loading it from disk
5625	Sign calls the ledger and stores the PubKey for future use Communication is checked on NewPrivKeyLedger and PrivKeyFromBytes returning an error so this should only trigger if the privkey is held in memory for a while before use .
5626	getPubKey reads the pubkey the ledger itself since this involves IO it may return an error which is not exposed in the PubKey interface so this function allows better error handling
5627	Equals fulfils PrivKey Interface - makes sure both keys refer to the same
5628	SimpleHashFromHashers computes a Merkle tree from items that can be hashed .
5629	Verify that leafHash is a leaf hash of the simple - merkle - tree which hashes to rootHash .
5630	Use the leafHash and innerHashes to get the root merkle hash . If the length of the innerHashes slice isn t exactly correct the result is nil . Recursive impl .
5631	ComputePrivateKey returns the private key using the master mprivHex and chainCodeHex for the given path and index .
5632	ComputeBTCAddressForPrivKey returns the Bitcoin address for the given privKey .
5633	SignBTCMessage signs a Bitcoin Signed Message .
5634	ComputeMastersFromSeed returns the master public key master secret and chain code in hex .
5635	ComputeWIF returns the privKey in Wallet Import Format .
5636	DerivePublicKeyForPath derives the public key by following the path from pubKeyBytes using the given chainCode .
5637	DerivePrivateKey derives the private key with index and chainCode . If prime is true the derivation is hardened . It returns the new private key and new chain code .
5638	DerivePublicKey derives the public key with index and chainCode . It returns the new public key and new chain code .
5639	eliptic curve pubkey addition
5640	modular big endian addition
5641	HexDecode hex decodes the str . If str is not valid hex it will return an empty byte slice .
5642	I64 returns the two halfs of the SHA512 HMAC of key and data .
5643	BTCAddrFromPubKeyBytes returns a B58 encoded Bitcoin mainnet address .
5644	BTCAddrBytesFromPubKeyBytes returns a hex Bitcoin mainnet address and its checksum .
5645	WIFFromPrivKeyBytes returns the privKeyBytes in Wallet Import Format .
5646	PubKeyBytesFromPrivKeyBytes returns the optionally compressed public key bytes .
5647	ReverseBytes returns the buf in the opposite order
5648	getLedger gets a copy of the device and caches it
5649	CreateLedger creates a new locally - stored reference to a Ledger keypair It returns the created key info and an error if the Ledger could not be queried
5650	CreateOffline creates a new reference to an offline keypair It returns the created key info
5651	Recover converts a seedphrase to a private key and persists it encrypted with the given passphrase . Functions like Create but seedphrase is input not output .
5652	List returns the keys from storage in alphabetical order .
5653	Get returns the public information about one key .
5654	Sign signs the msg with the named key . It returns an error if the key doesn t exist or the decryption fails .
5655	ExportPubKey returns public keys in ASCII armored format . Retrieve a Info object by its name and return the public key in a portable format .
5656	ImportPubKey imports ASCII - armored public keys . Store a new Info object holding a public key only i . e . it will not be possible to sign with it as it lacks the secret key .
5657	Update changes the passphrase with which an already stored key is encrypted . oldpass must be the current passphrase used for encryption newpass will be the only valid passphrase from this time forward .
5658	This only uses the OS s randomness
5659	GenerateFromPassword returns the bcrypt hash of the password at the given cost . If the cost given is less than MinCost the cost will be set to DefaultCost instead . Use CompareHashAndPassword as defined in this package to compare the returned hashed password with its cleartext version .
5660	CompareHashAndPassword compares a bcrypt hashed password with its possible plaintext equivalent . Returns nil on success or an error on failure .
5661	Cost returns the hashing cost used to create the given hashed password . When in the future the hashing cost of a password system needs to be increased in order to adjust for greater computational power this function allows one to establish which passwords need to be updated .
5662	sbytes should begin where decodeVersion left off .
5663	ASTToString returns the demangled name of the AST .
5664	writeByte adds a byte to the string being printed .
5665	writeString adds a string to the string being printed .
5666	Print an AST .
5667	Print qualifiers as an inner type by just printing the qualifiers .
5668	printBase is common print code for types that are printed with a simple suffix .
5669	Print the array dimension .
5670	printArgs prints the arguments of a function type . It looks at the inner types for spacing .
5671	The parenthesize function prints the string for val wrapped in parentheses if necessary .
5672	Print the inner types .
5673	Print the most recent inner type . If save is not nil only print prefixes .
5674	isEmpty returns whether printing a will not print anything .
5675	Filter demangles a C ++ symbol name returning the human - readable C ++ name . If any error occurs during demangling the input string is returned .
5676	ToString demangles a C ++ symbol name returning human - readable C ++ name or an error . If the name does not appear to be a C ++ symbol name at all the error will be ErrNotMangledName .
5677	ToAST demangles a C ++ symbol name into an abstract syntax tree representing the symbol . If the NoParams option is passed and the name has a function type the parameter types are not demangled . If the name does not appear to be a C ++ symbol name at all the error will be ErrNotMangledName .
5678	The doDemangle function is the entry point into the demangler proper .
5679	copy returns a copy of the current state .
5680	fail panics with demangleErr to be caught in doDemangle .
5681	failEarlier is like fail but decrements the offset to indicate that the point of failure occurred earlier in the string .
5682	advance advances the current string offset .
5683	checkChar requires that the next character in the string be c and advances past it .
5684	Error implements the builtin error interface for demangleErr .
5685	adjustErr adjusts the position of err if it is a demangleErr and returns err .
5686	hasReturnType returns whether the mangled form of a will have a return type .
5687	isCDtorConversion returns when an AST is a constructor a destructor or a conversion operator .
5688	Parse a Java resource special - name .
5689	mergeQualifiers merges two qualifer lists into one .
5690	setTemplate sets the Template field of any TemplateParam s in a . This handles the forward referencing template parameters found in cast operators .
5691	clearTemplateArgs gives an error for any unset Template field in args . This handles erroneous cases where a cast operator with a forward referenced template is in the scope of another cast operator .
5692	exprList parses a sequence of expressions up to a terminating character .
5693	Recognize a clone suffix . These are not part of the mangling API but are added by GCC when cloning functions .
5694	simplify replaces template parameters with their expansions and merges qualifiers .
5695	findArgumentPack walks the AST looking for the argument pack for a pack expansion . We find it via a template parameter .
5696	Demangle a string just as the GNU c ++ filt program does .
5697	options returns the demangling options to use based on the command line flags .
5698	MultipartForm works much like Form except it can parse multipart forms and handle file uploads . Like the other deserialization middleware handlers you can pass in an interface to make the interface available for injection into other handlers later .
5699	Json is middleware to deserialize a JSON payload from the request into the struct that is passed in . The resulting struct is then validated but no error handling is actually performed here . An interface pointer can be added as a second argument in order to map the struct to a specific interface .
5700	Performs required field checking on a struct
5701	ErrorHandler simply counts the number of errors in the context and if more than 0 writes a response with an error code and a JSON payload describing the errors . The response will have a JSON content - type . Middleware remaining on the stack will not even see the request if by this point there are any errors . This is a default handler of sorts and you are welcome to use your own instead . The Bind middleware invokes this automatically for convenience .
5702	Get target language string
5703	SetMessage sets the message file for localization .
5704	Idle indicates to the server that the client is ready to receive unsolicited mailbox update messages . When the client wants to send commands again it must first close stop .
5705	IdleWithFallback tries to idle if the server supports it . If it doesn t it falls back to polling . If pollInterval is zero a sensible default will be used .
5706	putToBottom puts Sentinel address to the bottom of address list . We call this method internally when see that some Sentinel failed to answer on application request so next time we start with another one . Lock must be held by caller .
5707	defaultPool returns a connection pool to one Sentinel . This allows us to call concurrent requests to Sentinel using connection Do method .
5708	close connection pool to Sentinel . Lock must be hold by caller .
5709	MasterAddr returns an address of current Redis master instance .
5710	SlaveAddrs returns a slice with known slave addresses of current master instance .
5711	Addr returns an address of slave .
5712	Available returns if slave is in working state at moment based on information in slave flags .
5713	Slaves returns a slice with known slaves of master instance .
5714	SentinelAddrs returns a slice of known Sentinel addresses Sentinel server aware of .
5715	Close closes current connection to Sentinel .
5716	NewServerList returns a new ServerList with the given servers . All servers have the same weight . To give a server more weight list it multiple times . NewServerList returns an error if any of the received addresses is not valid or fails to resolve but it doesn t try to connect to the provided servers .
5717	NewFromServers returns a new Client using the provided Servers .
5718	Close closes all currently open connections .
5719	Get gets the item for the given key . ErrCacheMiss is returned for a memcache cache miss . The key must be at most 250 bytes in length .
5720	GetMulti is a batch version of Get . The returned map from keys to items may have fewer elements than the input slice due to memcache cache misses . Each key must be at most 250 bytes in length . If no error is returned the returned map will also be non - nil .
5721	Set writes the given item unconditionally .
5722	Add writes the given item if no value already exists for its key . ErrNotStored is returned if that condition is not met .
5723	CompareAndSwap writes the given item that was previously returned by Get if the value was neither modified or evicted between the Get and the CompareAndSwap calls . The item s Key should not change between calls but all other item fields may differ . ErrCASConflict is returned if the value was modified in between the calls . ErrNotStored is returned if the value was evicted in between the calls .
5724	Delete deletes the item with the provided key . The error ErrCacheMiss is returned if the item didn t already exist in the cache .
5725	Increment atomically increments key by delta . The return value is the new value after being incremented or an error . If the value didn t exist in memcached the error is ErrCacheMiss . The value in memcached must be an decimal number or an error will be returned . On 64 - bit overflow the new value wraps around .
5726	Flush removes all the items in the cache after expiration seconds . If expiration is < = 0 it removes all the items right now .
5727	Closing returns whether the child is closing
5728	OnClosingContext derives a context from a given goprocess that will be Done when the process is closing
5729	OnClosedContext derives a context from a given goprocess that will be Done when the process is closed
5730	LimitChan returns a rate - limiting channel . it is the usual simple golang - idiomatic rate - limiting semaphore . This function merely initializes it with certain buffer size and sends that many values so it is ready to be used .
5731	WithParent constructs and returns a Process with a given parent .
5732	WithContextAndTeardown is a helper function to set teardown at initiation of WithContext
5733	SetTeardown to assign a teardown function
5734	the _actual_ close process .
5735	We will only wait on the children we have now . We will not wait on children added subsequently . this may change in the future .
5736	Ticker calls the given ProcessFunc every time the ticker fires . This is sequentially rate limited only one call will be in - flight at a time .
5737	TickerGo calls the given ProcessFunc every time the ticker fires . This is not rate limited multiple calls could be in - flight at the same time .
5738	Identify identifies a customer and sets their attributes
5739	Track sends a single event to Customer . io for the supplied user
5740	TrackAnonymous sends a single event to Customer . io for the anonymous user
5741	Delete deletes a customer
5742	AddDevice adds a device for a customer
5743	DeleteDevice deletes a device for a customer
5744	initLocales initializes language type list and Accept - Language header matcher .
5745	I18n is a middleware provides localization layer for your application . Paramenter langs must be in the form of en - US zh - CN etc . Otherwise it may not recognize browser input .
5746	FetchCheck retrieves check with passed cid .
5747	FetchChecks retrieves all checks available to the API Token .
5748	New returns a new Circonus API
5749	Get API request
5750	Post API request
5751	apiRequest manages retry strategy for exponential backoffs
5752	FetchGraph retrieves graph with passed cid .
5753	FetchGraphs retrieves all graphs available to the API Token .
5754	UpdateGraph updates passed graph .
5755	CreateGraph creates a new graph .
5756	DeleteGraph deletes passed graph .
5757	DeleteGraphByCID deletes graph with passed cid .
5758	FetchCheckBundle retrieves check bundle with passed cid .
5759	FetchCheckBundles retrieves all check bundles available to the API Token .
5760	UpdateCheckBundle updates passed check bundle .
5761	DeleteCheckBundle deletes passed check bundle .
5762	DeleteCheckBundleByCID deletes check bundle with passed cid .
5763	Gauge sets a gauge to a value
5764	SetGauge sets a gauge to a value
5765	AddGauge adds value to existing gauge
5766	RemoveGauge removes a gauge
5767	RemoveGaugeFunc removes a gauge function
5768	getGaugeType returns accurate resmon type for underlying type of gauge value
5769	FetchCheckBundleMetrics retrieves metrics for the check bundle with passed cid .
5770	UpdateCheckBundleMetrics updates passed metrics .
5771	Get Broker to use when creating a check
5772	Get CN of Broker associated with submission_url to satisfy no IP SANS in certs
5773	Select a broker for use when creating a check if a specific broker was not specified .
5774	Verify broker supports the check type to be used
5775	FetchMetricCluster retrieves metric cluster with passed cid .
5776	FetchMetricClusters retrieves all metric clusters available to API Token .
5777	UpdateMetricCluster updates passed metric cluster .
5778	CreateMetricCluster creates a new metric cluster .
5779	DeleteMetricCluster deletes passed metric cluster .
5780	DeleteMetricClusterByCID deletes metric cluster with passed cid .
5781	loadCACert loads the CA cert for the broker designated by the submission url
5782	fetchCert fetches CA certificate using Circonus API
5783	FetchAccounts retrieves all accounts available to the API Token .
5784	UpdateAccount updates passed account .
5785	FetchAnnotation retrieves annotation with passed cid .
5786	FetchAnnotations retrieves all annotations available to the API Token .
5787	UpdateAnnotation updates passed annotation .
5788	CreateAnnotation creates a new annotation .
5789	DeleteAnnotation deletes passed annotation .
5790	DeleteAnnotationByCID deletes annotation with passed cid .
5791	FetchOutlierReport retrieves outlier report with passed cid .
5792	FetchOutlierReports retrieves all outlier reports available to API Token .
5793	UpdateOutlierReport updates passed outlier report .
5794	CreateOutlierReport creates a new outlier report .
5795	DeleteOutlierReport deletes passed outlier report .
5796	DeleteOutlierReportByCID deletes outlier report with passed cid .
5797	FetchUsers retrieves all users available to API Token .
5798	UpdateUser updates passed user .
5799	SetMetricTags sets the tags for the named metric and flags a check update is needed
5800	AddMetricTags appends tags to any existing tags for the named metric and flags a check update is needed
5801	FetchMetric retrieves metric with passed cid .
5802	FetchMetrics retrieves all metrics available to API Token .
5803	UpdateMetric updates passed metric .
5804	FetchAcknowledgement retrieves acknowledgement with passed cid .
5805	FetchAcknowledgements retrieves all acknowledgements available to the API Token .
5806	UpdateAcknowledgement updates passed acknowledgement .
5807	CreateAcknowledgement creates a new acknowledgement .
5808	Reset removes all existing counters and gauges .
5809	snapshot returns a copy of the values of all registered counters and gauges .
5810	Timing adds a value to a histogram
5811	RecordValue adds a value to a histogram
5812	RecordCountForValue adds count n for value to a histogram
5813	SetHistogramValue adds a value to a histogram
5814	RemoveHistogram removes a histogram
5815	NewHistogram returns a histogram instance .
5816	RecordValue records the given value to a histogram instance
5817	Search for a check bundle given a predetermined set of criteria
5818	Create a new check to receive metrics
5819	Create a dynamic secret to use with a new check
5820	FetchCheckBySubmissionURL fetch a check configuration by submission_url
5821	Initialize for sending metrics
5822	IsReady reflects if the check has been initialied and metrics can be sent to Circonus
5823	GetSubmissionURL returns submission url for circonus
5824	ResetTrap URL force request to the API for the submission URL and broker ca cert
5825	RefreshTrap check when the last time the URL was reset reset if needed
5826	FetchRuleSetGroup retrieves rule set group with passed cid .
5827	FetchRuleSetGroups retrieves all rule set groups available to API Token .
5828	UpdateRuleSetGroup updates passed rule set group .
5829	CreateRuleSetGroup creates a new rule set group .
5830	DeleteRuleSetGroup deletes passed rule set group .
5831	DeleteRuleSetGroupByCID deletes rule set group with passed cid .
5832	FetchDashboard retrieves dashboard with passed cid .
5833	FetchDashboards retrieves all dashboards available to the API Token .
5834	UpdateDashboard updates passed dashboard .
5835	CreateDashboard creates a new dashboard .
5836	DeleteDashboard deletes passed dashboard .
5837	DeleteDashboardByCID deletes dashboard with passed cid .
5838	A Text metric is an arbitrary string SetText sets a text metric
5839	SetTextValue sets a text metric
5840	RemoveText removes a text metric
5841	RemoveTextFunc a text metric function
5842	FetchAlert retrieves alert with passed cid .
5843	FetchAlerts retrieves all alerts available to the API Token .
5844	FetchRuleSet retrieves rule set with passed cid .
5845	FetchRuleSets retrieves all rule sets available to API Token .
5846	UpdateRuleSet updates passed rule set .
5847	CreateRuleSet creates a new rule set .
5848	DeleteRuleSet deletes passed rule set .
5849	DeleteRuleSetByCID deletes rule set with passed cid .
5850	IncrementByValue updates counter by supplied value
5851	Set a counter to specific value
5852	RemoveCounter removes the named counter
5853	RemoveCounterFunc removes the named counter function
5854	PromOutput returns lines of metrics in prom format
5855	Flush metrics kicks off the process of sending metrics to Circonus
5856	FetchWorksheet retrieves worksheet with passed cid .
5857	FetchWorksheets retrieves all worksheets available to API Token .
5858	UpdateWorksheet updates passed worksheet .
5859	CreateWorksheet creates a new worksheet .
5860	DeleteWorksheet deletes passed worksheet .
5861	DeleteWorksheetByCID deletes worksheet with passed cid .
5862	FetchContactGroup retrieves contact group with passed cid .
5863	FetchContactGroups retrieves all contact groups available to the API Token .
5864	UpdateContactGroup updates passed contact group .
5865	CreateContactGroup creates a new contact group .
5866	DeleteContactGroup deletes passed contact group .
5867	FetchBroker retrieves broker with passed cid .
5868	FetchBrokers returns all brokers available to the API Token .
5869	ActivateMetric determines if a given metric should be activated
5870	AddMetricTags updates check bundle metrics with tags
5871	addNewMetrics updates a check bundle with new metrics
5872	inventoryMetrics creates list of active metrics in check bundle
5873	countNewTags returns a count of new tags which do not exist in the current list of tags
5874	returns the plural form of a singular word
5875	returns the singular form of a plural word
5876	uppercase first character
5877	dino_party - > DinoParty
5878	getSuitableAlgFromCurve inspects the key length in curve and determines the corresponding jwt . Algorithm .
5879	getAlgFromKeyData determines the best jwt . Algorithm suitable based on the set of given crypto primitives in pem .
5880	buildEncArgs builds and encodes passed argument strings in the form of name = val as a json object .
5881	doDec decodes in as a JWT .
5882	doEnc encodes in as the payload in a JWT .
5883	Transport is a GServiceAccount option to set the client transport used by the token source .
5884	Proxy is a GServiceAccount option to set a HTTP proxy used for by the token source .
5885	Expiration is a GServiceAccount option to set a expiration limit for tokens generated from the token source .
5886	Encode encodes a JWT using the Algorithm and Signer returning the URL - safe encoded token or any errors encountered during encoding .
5887	PeekHeaderField extracts the specified field from the serialized JWT buf s header . An error will be returned if the field is not present in the decoded header .
5888	PeekAlgorithm extracts the signing algorithm listed in the alg field of the serialized JWT buf s header and attempts to unmarshal it into an Algorithm . An error will be returned if the alg field is not specified in the JWT header or is otherwise invalid .
5889	PeekAlgorithmAndIssuer extracts the signing algorithm listed in the alg field and the issuer from the iss field of the serialized JWT buf s header and payload attempting to unmarshal alg to Algorithm and iss to a string . An error will be returned if the Algorithm or Issuer fields are not specified in the JWT header and payload or are otherwise invalid .
5890	NewEllipticSigner creates an Elliptic Curve Signer for the specified curve .
5891	NewTokenSource creates a oauth2 . TokenSource that generates auth tokens redeemed using the JWT Bearer Grant assertion auth flow using the supplied jwt . Signer . A token redemption will be invoked at the tokenURL using the supplied context . Use the Claim option to pass additional claims to the token source .
5892	Client returns a HTTP client using the bearer token .
5893	Sign signs the data in buf using rand priv and hash .
5894	Verify verifies the signature sig against using pub hash and the hashed data .
5895	NewRSASigner creates an RSA Signer for the specified Algorithm and provided low level RSA implementation .
5896	getFieldWithTag lookups jwt tag with specified tagName on obj returning its reflected value .
5897	decodeToObjOrFieldWithTag decodes the buf into obj s field having the specified jwt tagName . If the provided obj s has the same type as defaultObj then the obj is set to the defaultObj otherwise an attempt is made to json . Decode the buf into obj .
5898	grabEncodeTargets grabs the fields for the obj .
5899	encodeTargets determines what to encode .
5900	peekField looks at an undecoded JWT JSON decoding the data at pos and returning the specified field s value as string . If the fieldName is not present then an error will be returned .
5901	ExpiresIn is an option that will set the expiration duration generated for tokens to the specified duration .
5902	Claim is an option that adds an additional claim that is generated with the token .
5903	Transport is an option that sets an underlying client transport to the exchange process .
5904	NewHMACSigner creates a HMAC Signer for the specified Algorithm .
5905	FromJSON loads service account credentials from the JSON encoded buf .
5906	FromReader loads Google service account credentials from a reader .
5907	FromFile loads Google service account credentials from a reader .
5908	Signer returns a jwt . Signer for use when signing tokens .
5909	Encode serializes a JWT using the Algorithm and Signer .
5910	UnmarshalText attempts to unmarshal buf into an Algorithm .
5911	DecodeUnverifiedToken decodes a token into the provided UnverifiedToken .
5912	PublicKey returns the stored public key for the keystore alternately generating the public key from the private key if the public key was not supplied and the private key was .
5913	PrivateKey returns the stored private key for the keystore .
5914	RegisterLocation registers an URL location and maps it to the given file system path . Calling RegisterLocation twice for the same location is a programmer error and causes a panic .
5915	NewArena allocates a new arena of the specified size and returns it .
5916	NewSkiplist constructs and initializes a new empty skiplist . All nodes keys and values in the skiplist will be allocated from the given arena .
5917	Init associates the iterator with a skiplist and resets all state .
5918	Value returns the value at the current position .
5919	Set updates the value of the current iteration record if it has not been updated or deleted since iterating or seeking to it . If the record has been updated then Set positions the iterator on the most current value and returns ErrRecordUpdated . If the record has been deleted then Set keeps the iterator positioned on the current record with the current value and returns ErrRecordDeleted .
5920	SetMeta updates the meta value of the current iteration record if it has not been updated or deleted since iterating or seeking to it . If the record has been updated then SetMeta positions the iterator on the most current value and returns ErrRecordUpdated . If the record has been deleted then SetMeta keeps the iterator positioned on the current record with the current value and returns ErrRecordDeleted .
5921	Delete marks the current iterator record as deleted from the store if it has not been updated since iterating or seeking to it . If the record has been updated then Delete positions the iterator on the most current value and returns ErrRecordUpdated . If the record is deleted then Delete positions the iterator on the next record .
5922	IsSameArray returns true if the slices are the same length and the array underlying the two slices is the same . Always returns false for empty arrays .
5923	New returns a new API client .
5924	WriteIndentedN indents all lines n spaces .
5925	WriteIndented indents all lines four spaces .
5926	NewReporter returns a new Reporter . You must specify the channel bufferSize and the goroutine poolSize . You can pass in nil for the transport and it will create an http transport with MaxIdleConnsPerHost set to the goroutine poolSize . Note if you pass in your own transport it s a good idea to have its MaxIdleConnsPerHost be set to at least the poolSize to allow for effective connection reuse .
5927	Using the classic API posts a count to a stat using DefaultReporter .
5928	Using the classic API posts a count to a stat using DefaultReporter at a specific time .
5929	Using the classic API posts a value to a stat using DefaultReporter .
5930	Using the classic API posts a value to a stat at a specific time using DefaultReporter .
5931	Using the EZ API posts a count to a stat using DefaultReporter .
5932	Using the EZ API posts a count to a stat at a specific time using DefaultReporter .
5933	Using the EZ API posts a value to a stat using DefaultReporter .
5934	Using the EZ API posts a value to a stat at a specific time using DefaultReporter .
5935	Using the classic API posts a count to a stat .
5936	Using the classic API posts a count to a stat at a specific time .
5937	Using the classic API posts a count of 1 to a stat .
5938	Using the classic API posts a value to a stat .
5939	Using the classic API posts a value to a stat at a specific time .
5940	Using the EZ API posts a count of 1 to a stat .
5941	Using the EZ API posts a count to a stat .
5942	Using the EZ API posts a count to a stat at a specific time .
5943	Using the EZ API posts a value to a stat .
5944	Using the EZ API posts a value to a stat at a specific time .
5945	NewBatchReporter creates a batching stat reporter . The interval parameter specifies how often stats should be posted to the StatHat server .
5946	cleanHost is used to conver from the rawHost format to a more usable format
5947	GetHost will get a specified host by either hostname or ip . The first return value is the host if it was found . The second return value is the wether the host was found or not
5948	Rescan the target . Normally used for finding differences between scans at two points in time .
5949	Diff gets the difference between the the target host and the argument host . The first returned value is the added ports and the second returned value is the removed ports .
5950	ToString converts the host into a nicely formatted string
5951	Init initializes a scan object . This is the easiest way to create a Scan object . If you are trying to create a Scan object by hand make sure to instantiate the Hosts map
5952	AddHosts adds a list of hosts to the list of hosts to be scanned
5953	SetHosts sets the hosts that will be scanned
5954	AddPorts appends a list of ports to the list of ports to be scanned
5955	SetPorts sets the ports that wil be used
5956	SetTCPPorts sets which TCP - only ports are used to scan
5957	SetUDPPort sets which TCP - only ports are used to scan
5958	AddFlags adds a list of flags to be used by nmap . Seperate flags by new arguments . The order of the flag is kept so when using flags that require file names seperate it by using multiple arguments . Use the DisallowedFlags variable to guide you on which flags are not allowed to be used .
5959	IntenseAllTCPPorts does an intense scan but adds all TCP ports
5960	ToString returns the list of hosts into a pretty - printed format
5961	CreateNmapArgs takes a Scan object and returns a list of strings that map to arguments for an nmap scan .
5962	uint16ListToStringList is used to reduce lines for joining strings in the CreateNmapArgs function
5963	ToString returns port information in a pretty - printed format
5964	Counter returns the HOTP s 8 - byte counter as an unsigned 64 - bit integer .
5965	Increment will increment an HOTP source s counter . This is useful for providers like the Google Authenticator app which immediately increments the counter and uses the 0 counter value as an integrity check .
5966	NewHOTP intialises a new HOTP instance with the key and counter values . No check is done on the digits but typical values are 6 and 8 .
5967	URL returns a suitable URL such as for the Google Authenticator app . The label is used by these apps to identify the service to which this OTP belongs . The digits value is ignored by the Google authenticator app and is therefore elided in the resulting URL .
5968	QR generates a byte slice containing the a QR code encoded as a PNG with level Q error correction .
5969	truncate contains the DT function from the RFC ; this is used to deterministically select a sequence of 4 bytes from the HMAC counter hash .
5970	FromURL parses a new HOTP from a URL string . It returns the OTP the label associated with the OTP and any errors that occurred .
5971	GenerateHOTP will generate a randomised HOTP source ; if the randCounter parameter is true the counter will be randomised .
5972	YubiKey reads an OATH - HOTP string as returned by a YubiKey and returns three values . The first value contains the actual OTP the second value contains the YubiKey s token identifier and the final value indicates whether the input string was a valid YubiKey OTP . This does not check whether the code is correct or not it only ensures that it is well - formed output from a token and splits the output into the code and the public identity .
5973	IntegrityCheck returns two values the base OTP and the current counter . This is used for example with the Google Authenticator app s Check key value function and can be used to verify that the application and the provider are in sync .
5974	Check takes an input code and verifies it against the OTP . If successful the counter is incremented .
5975	Marshal serialises an HOTP key value as a DER - encoded byte slice .
5976	Unmarshal parses a DER - encoded serialised HOTP key value .
5977	NewWriterPool creates a pool that ensures the writers it wraps will respect an overall maxRate with maxBurst resolution . The semantics of the wrapped writers are the same as those of using a plain ThrottledWriter .
5978	Get a throttled writer that wraps w .
5979	Len is the number of currently given out throttled writers .
5980	NewReaderPool creates a pool that ensures the writers it wraps will respect an overall maxRate with maxBurst resolution . The semantics of the wrapped writers are the same as those of using a plain ThrottledReader .
5981	Get a throttled reader that wraps r .
5982	SetRate of the pool updating each given out reader to respect the newly set rate . Returns the old rate .
5983	Len is the number of currently given out throttled readers .
5984	NewMeasuredWriter wraps a writer .
5985	BytesPerSec tells the rate per second at which bytes were written since last measurement .
5986	NewMeasuredReader wraps a reader .
5987	BytesPer tells the rate per period at which bytes were read since last measurement .
5988	BytesPerSec tells the rate per second at which bytes were read since last measurement .
5989	ThrottledReader ensures that reads to r never exceeds a specified rate of bytes per second . The maxBurst duration changes how often the verification is done . The smaller the value the less bursty but also the more overhead there is to the throttling .
5990	ThrottledWriter ensures that writes to w never exceeds a specified rate of bytes per second . The maxBurst duration changes how often the verification is done . The smaller the value the less bursty but also the more overhead there is to the throttling .
5991	Create a new DNS server . Domain is an unqualified domain that will be used as the TLD .
5992	Convenience function to ensure that SRV names are well - formed .
5993	rewrites supplied host entries to use the domain this dns server manages
5994	Receives a FQDN ; looks up and supplies the A record .
5995	Sets a host to an IP . Note that this is not the FQDN but a hostname .
5996	Deletes a host . Note that this is not the FQDN but a hostname .
5997	Sets a SRV with a service and protocol . See SRVRecord for more information on what that requires .
5998	Deletes a SRV record based on the service and protocol .
5999	Create a Typed helper from the given JSON bytes
6000	Create a Typed helper from the given JSON bytes panics on error
6001	Create a Typed helper from the given JSON stream
6002	Create a Typed helper from the JSON within a file
6003	Create an array of Typed helpers Used for when the root is an array which contains objects
6004	Create an array of Typed helpers from a file Used for when the root is an array which contains objects
6005	Returns a boolean at the key or false if it doesn t exist or if it isn t a bool
6006	Returns a boolean at the key or the specified value if it doesn t exist or isn t a bool
6007	Returns a bool or panics
6008	Returns a boolean at the key and whether or not the key existed and the value was a bolean
6009	Returns a int at the key or the specified value if it doesn t exist or isn t a int
6010	Returns an int or panics
6011	Returns an int at the key and whether or not the key existed and the value was an int
6012	Returns a float at the key or the specified value if it doesn t exist or isn t a float
6013	Returns an float or panics
6014	Returns an float at the key and whether or not the key existed and the value was an float
6015	Returns a string at the key or the specified value if it doesn t exist or isn t a string
6016	Returns an string or panics
6017	Returns a time at the key or the specified value if it doesn t exist or isn t a time
6018	Returns a time . Time or panics
6019	Returns an time . time at the key and whether or not the key existed and the value was a time . Time
6020	Returns an typed object or panics
6021	Returns a string at the key or the specified value if it doesn t exist or isn t a strin
6022	Returns an interface or panics
6023	Returns an string at the key and whether or not the key existed and the value was an string
6024	Returns an slice of boolean or an nil slice
6025	Returns an slice of boolean or the specified slice
6026	Returns an slice of ints or the specified slice Some conversion is done to handle the fact that JSON ints are represented as floats .
6027	Returns an slice of ints64 or the specified slice Some conversion is done to handle the fact that JSON ints are represented as floats .
6028	Returns an slice of floats or a nil slice
6029	Returns an slice of strings or a nil slice
6030	Returns an slice of Typed helpers or a nil slice
6031	Returns a slice of Typed helpers and true if exists otherwise ; nil and false .
6032	GetSessions returns sessions .
6033	ObjectChange subscribes to changes for objects of a given type .
6034	AutoOfferingPopUp creates AgentPreOfferingPopUp jobs for active offerings . Taken into account a current balance of agent ETH . If ETH is not enough to pop up all offerings then no one of them is popped up . Function calculates the pop up time .
6035	MarshalJSON marshals itself .
6036	Scan deserializes the log topics .
6037	NewWorker returns new instance of worker .
6038	NewLoggerBase creates a new LoggerBase .
6039	Log adds a new log message with a given severity level .
6040	PreAccountAddBalanceApprove approve balance if amount exists .
6041	PreAccountAddBalance adds balance to psc .
6042	AfterAccountAddBalance updates psc and ptc balance of an account .
6043	AfterAccountReturnBalance updates psc and ptc balance of an account .
6044	AccountUpdateBalances updates ptc psc and eth balance values .
6045	PreAccountReturnBalance returns from psc to ptc .
6046	GetOfferingUsage returns total units used for all channels with a given offering .
6047	GetProductUsage returns total units used in all channel of all offerings with given product .
6048	AddMapping maps an external port to a local port for a specific service to UPnP interface .
6049	DeleteMapping removes the port mapping to UPnP interface .
6050	PostCheque sends a payment cheque to a payment server .
6051	NewHTTPClient returns a client that speaks to tor open sock .
6052	NewServer creates a new UI server .
6053	AddHandler registers a new RPC handler in a given namespace .
6054	ListenAndServe starts to listen and to serve requests .
6055	Recover ensures data consistency after unexpected controller s exit .
6056	ConnStr composes a data connection string .
6057	NewDBFromConnStr connects to db and returns db instance .
6058	NewDB creates a new data connection handle .
6059	GetCountry returns country code by ip . Parses response in JSON format and returns a value of the field .
6060	Endpoint returns endpoint msg for a channel with given key .
6061	NewServer creates a new pay server .
6062	NewMonitor creates new blockchain monitor .
6063	initLastProcessedBlock calculates last processed block . If user role is client and value of eth . event . lastProcessedBlock setting is 0 then value of eth . event . lastProcessedBlock setting is equal the difference between the last Ethereum block and a InitialBlocks value . If InitialBlocks value is 0 then this parameter is ignored .
6064	Start starts scanning blockchain for events .
6065	newClient creates client for connection to the Ethereum .
6066	Loop performs a function that creates new jobs with a certain frequency . If at the moment there is already a similar active job then such job is ignored . The function works correctly only with jobs for which duplicates are allowed .
6067	Offering gets offering message through tor net .
6068	Endpoint gets endpoint message through tor net .
6069	Ping returns an error if remote enpoint cannot be reached .
6070	GetEthTransactions returns transactions by related object .
6071	AgentSeal encrypts message using client s public key and packs with agent signature .
6072	ClientOpen decrypts message using client s key and verifies using agent s key .
6073	PackWithSignature packs message with signature .
6074	UnpackSignature unpacks msg from signature .
6075	VerifySignature returns true if signature is correct .
6076	signature computes and returns signature .
6077	GetObject finds object in a database by id then returns an object on raw JSON format .
6078	GetObjectByHash finds object in a database by hash then returns an object on raw JSON format .
6079	ToError converts error into Error pointer .
6080	SetPassword sets the password only on the first call . Returns error if password already exists .
6081	UpdatePassword updates the password .
6082	GetToken returns token if password is correct .
6083	NewProcessor creates a new processor .
6084	NewConfig creates a default job queue configuration .
6085	NewQueue creates a new job queue .
6086	AddWithDataAndDelay is convenience method to add a job with given data and delay .
6087	AddWithData is convenience method to add a job with given data .
6088	AddSimple is convenience method to add a job .
6089	AddWithDelay is convenience method to add a job with given data delay .
6090	Subscribe adds a subscription to job result notifications for given keys . Each subscription key can be be a job type or a job related id . SubID is used to distinguish between different subscriptions .
6091	Unsubscribe removes a subscription from job result notifications for given ids of related objects . SubID is used to distinguish between different subscriptions to a same related object .
6092	TopUpChannel initiates JobClientPreChannelTopUp job .
6093	ChangeChannelStatus updates channel state .
6094	GetAgentChannels gets channels for agent .
6095	GetChannelsUsage returns detailed usage on channels .
6096	GetClientChannels gets client channel information .
6097	ReadSetting reads value of a given setting .
6098	ReadUintSetting reads value of a given uint setting .
6099	ReadBoolSetting reads value of a given bool setting .
6100	SuspendChannel tries to suspend a given channel .
6101	ActivateChannel tries to activate a given channel .
6102	TerminateChannel tries to terminate a given channel .
6103	ExportPrivateKey returns a private key in base64 encoding by account id .
6104	GetAccounts returns accounts .
6105	GenerateAccount generates new private key and creates new account .
6106	ImportAccountFromHex imports private key from hex creates account and initiates JobAccountUpdateBalances job .
6107	ImportAccountFromJSON imports private key from JSON blob with password creates account and initiates JobAccountUpdateBalances job .
6108	TransferTokens initiates JobPreAccountAddBalanceApprove or JobPreAccountReturnBalance job depending on the direction of the transfer .
6109	UpdateBalance initiates JobAccountUpdateBalances job .
6110	UpdateAccount updates an account .
6111	GetLastBlockNumber returns last known block number .
6112	GetEndpoint returns an endpoint for a given client key .
6113	SetProductConfig sets product configuration .
6114	NewWriterLogger creates a new io . Writer based logger .
6115	NewFileLogger creates a new file logger .
6116	NewClient returns new client instance based given somc type and data .
6117	Parse parses a NAT interface description .
6118	Map adds a port mapping on NAT interface and keeps it alive until interface is closed .
6119	AddMapping maps an external port to a local port for a specific service .
6120	DeleteMapping removes the port mapping .
6121	ReadFile reads a file content from the embedded filesystem .
6122	GetUserRole returns user role .
6123	NewHandler creates a new handler .
6124	NewBackend returns eth back implementation .
6125	addTimeout adds timeout to context .
6126	PendingNonceAt returns the account nonce of the given account in the pending state . This is the nonce that should be used for the next transaction .
6127	SuggestGasPrice retrieves the currently suggested gas price to allow a timely execution of a transaction .
6128	EstimateGas tries to estimate the gas needed to execute a specific transaction based on the current pending state of the backend blockchain .
6129	CooperativeClose calls cooperativeClose method of Privatix service contract .
6130	TransactionByHash returns the transaction with the given hash .
6131	RegisterServiceOffering calls registerServiceOffering method of Privatix service contract .
6132	PTCBalanceOf calls balanceOf method of Privatix token contract .
6133	PTCIncreaseApproval calls increaseApproval method of Privatix token contract .
6134	PSCBalanceOf calls balanceOf method of Privatix service contract .
6135	PSCAddBalanceERC20 calls addBalanceERC20 of Privatix service contract .
6136	PSCGetOfferingInfo calls getOfferingInfo of Privatix service contract .
6137	PSCGetChannelInfo calls getChannelInfo method of Privatix service contract .
6138	EthBalanceAt returns the wei balance of the given account .
6139	PSCSettle calls settle method of Privatix service contract .
6140	PSCRemoveServiceOffering calls removeServiceOffering method of Privatix service contract .
6141	PSCPopupServiceOffering calls popupServiceOffering method of Privatix service contract .
6142	FilterLogs executes a Ethereum filter query .
6143	HeaderByNumber returns a Ethereum block header from the current canonical chain . If number is nil the latest known header is returned .
6144	PTCAddress returns Privatix token contract address .
6145	PSCAddress returns Privatix service contract address .
6146	NewHandler creates a new RPC handler .
6147	keyFromChannelData returns the unique channel identifier used in a Privatix Service Contract .
6148	AgentAfterChannelCreate registers client and creates pre service create job .
6149	AgentAfterChannelTopUp updates deposit of a channel .
6150	AgentAfterUncooperativeCloseRequest sets channel s status to challenge period .
6151	AgentAfterUncooperativeClose marks channel closed uncoop .
6152	AgentAfterCooperativeClose marks channel as closed coop .
6153	AgentPreServiceSuspend marks service as suspended .
6154	AgentPreServiceUnsuspend marks service as active .
6155	AgentPreServiceTerminate terminates the service .
6156	AgentAfterOfferingMsgBCPublish updates offering status and creates somc publish job .
6157	AgentAfterOfferingDelete set offering status to remove
6158	AgentPreOfferingDelete calls psc remove an offering .
6159	checkInPeriod checks an offering being in period specified by periodKey .
6160	AgentPreOfferingPopUp pop ups an offering .
6161	AgentAfterOfferingPopUp updates the block number when the offering was updated .
6162	Print prints version and completes the program .
6163	Error returns an error message of a given error .
6164	Message returns an error message from a given error code .
6165	RespondResult sends a response with a given result .
6166	RespondError sends a response with a given error .
6167	handlePay handles clients balance proof informations .
6168	getOpenBlockNumber extracts the Open_block_number field of a given channel - related EthLog . Returns false in case it failed i . e . the event has no such field .
6169	Offering returns offerings raw msg with given hash .
6170	HandlersMap returns handlers map needed to construct job queue .
6171	Version returns the version of the database schema .
6172	Migrate executes migration scripts .
6173	NewMonitor creates new instance of billing monitor . interval specifies how often channels checks must be performed .
6174	Run begins monitoring of channels . In case of error - doesn t restarts automatically .
6175	VerifyBillingLags checks all active channels for billing lags and schedules suspending of those who are suffering from billing lags .
6176	VerifySuspendedChannelsAndTryToUnsuspend scans all supsended channels and checks if all conditions are met to unsuspend them . Is so - schedules task for appropriate channel unsuspending .
6177	VerifyChannelsForInactivity scans all channels that are not terminated and terminates those of them who are staying inactive too long .
6178	VerifySuspendedChannelsAndTryToTerminate scans all suspended channels and terminates those of them who are staying suspended too long .
6179	NewLogger creates a new database logger .
6180	BalanceClosingHash computes balance message hash .
6181	Run matches and opens external network ports .
6182	RecoverPubKey recover public key from signature values .
6183	GetTemplates returns templates .
6184	CreateTemplate creates template .
6185	CreateProduct creates new product .
6186	UpdateProduct updates a product .
6187	GetProducts returns all products available to the agent .
6188	NewHandler creates a new session handler .
6189	EncryptedKey returns encrypted keystore . Key in base64 .
6190	ExecuteCommand executes commands to manage database db - create - command to create database db - migrate - command to execute migration scripts db - init - data - command to initialize database by default values db - version - command to print the version of the database schema .
6191	AddMapping maps an external port to a local port for a specific service to NAT - PMP interface .
6192	DeleteMapping removes the port mapping to NAT - PMP interface .
6193	NewMonitor creates a new client billing monitor .
6194	GetOfferingIncome returns total receipt balance from all channels of offering with given id .
6195	GetProductIncome returns total receipt balance from all channels of all offerings with given product id .
6196	GetTotalIncome returns total receipt balance from all channels .
6197	Up00001 will be executed as part of a forward migration .
6198	GetSettings returns settings .
6199	UpdateSettings updates settings .
6200	IsIPv4 checks if this is a valid IPv4
6201	IsHostname checks if this is a hostname
6202	IsNetPort checks if this is a valid net port
6203	IsTLSCert if block is one or more TLS certificates then function returns true
6204	ValidateJSON validates a given JSON against a given schema .
6205	NewConfig creates a default Ethereum client configuration .
6206	ReadJSONFile reads and parses a JSON file filling a given data instance .
6207	WriteJSONFile converts a given data instance to JSON and writes it to file .
6208	IsUUID checks if a given string is a UUID .
6209	ExeDirJoin composes a file name relative to a running executable .
6210	RootPath returns a path of the root package .
6211	Caller returns a caller s call location . If F1 calls F2 which in its turn calls Caller then this function will return a location within F1 where it calls F2 .
6212	CheckConnection connects to the specified host on the specified port . If the connection is successful then return true .
6213	ClientAfterChannelCreate activates channel and triggers endpoint retrieval .
6214	ClientEndpointCreate decodes endpoint message saves it in the DB and triggers product configuration .
6215	ClientAfterUncooperativeClose changed channel status to closed uncooperative .
6216	ClientAfterCooperativeClose changed channel status to closed cooperative and launches of terminate service procedure .
6217	ClientPreServiceTerminate terminates service .
6218	ClientPreServiceSuspend suspends service .
6219	ClientPreServiceUnsuspend activates service .
6220	ClientPreUncooperativeClose waiting for until the challenge period is over . Then deletes the channel and settles by transferring the balance to the Agent and the rest of the deposit back to the Client .
6221	ClientPreChannelTopUp checks client balance and creates transaction for increase the channel deposit .
6222	ClientAfterChannelTopUp updates deposit of a channel .
6223	ClientPreUncooperativeCloseRequest requests the closing of the channel and starts the challenge period .
6224	ClientAfterUncooperativeCloseRequest waits for the channel to uncooperative close starts the service termination process .
6225	ClientAfterOfferingMsgBCPublish creates offering .
6226	ClientAfterOfferingPopUp updates offering in db or retrieves from somc if new .
6227	ClientAfterOfferingDelete sets offer status to remove ;
6228	DecrementCurrentSupply finds offering and decrements its current supply .
6229	GetEndpoints returns endpoints .
6230	GetGUISettings returns gui settings .
6231	SetGUISettings sets gui settings .
6232	HandleFunc registers a handler function for a given pattern .
6233	RequireHTTPMethods wraps a given handler function inside an HTTP method validating handler .
6234	RequireBasicAuth wraps a given handler function inside a handler with basic access authentication .
6235	New function for initialize the service for generating the Endpoint Message .
6236	EndpointMessage returns the endpoint message object .
6237	ConnChange subscribes to changes for adapter connection changes .
6238	FromBase64ToHex return hex of base 64 encoded .
6239	HexToBytes reutrns the bytes represented by the hex of string s .
6240	ToBytes returns the bytes represented by the base64 string s .
6241	ToHash returns the ethereum s hash represented by the base64 string s .
6242	HexToHash returns the ethereum s hash represented by the hex of string s .
6243	HexToAddress returns ethereum s address from base 64 encoded string .
6244	BytesToUint32 using big endian .
6245	Uint32ToBytes using big endian .
6246	Uint64ToBytes using big endian .
6247	Uint192ToBytes using big endian with leading zeros .
6248	HashPassword computes encoded hash of the password .
6249	ValidatePassword checks if a given password hash and salt are matching .
6250	GetUint64Setting finds the key value in table Setting . Checks that the value in the format of uint64
6251	ChannelKey returns the unique channel identifier used in a Privatix Service Contract .
6252	MinDeposit calculates minimal deposit required to accept the offering .
6253	AcceptOffering initiates JobClientPreChannelCreate job .
6254	ChangeOfferingStatus initiates JobAgentPreOfferingMsgBCPublish JobAgentPreOfferingPopUp or JobAgentPreOfferingDelete job depending on a selected action .
6255	GetClientOfferings returns active offerings available for a client .
6256	GetAgentOfferings returns active offerings available for a agent .
6257	setOfferingHash computes and sets values for raw msg and hash fields .
6258	fillOffering fills offerings nonce status hash and signature .
6259	UpdateOffering updates an offering .
6260	CreateOffering creates an offering .
6261	GetClientOfferingsFilterParams returns offerings filter parameters for client .
6262	PingOfferings given offerings ids pings each of them and returns result of the test .
6263	NewServer creates a new HTTP server .
6264	Mux is an associated http . ServeMux instance .
6265	NewLogger creates a new reporter logger .
6266	Printf logs internal messages from a reporter .
6267	GetURL returns a server URL for a given path .
6268	NewHTTPRequest creates a new HTTP request from a given server request .
6269	NewHTTPRequestWithURL creates a new HTTP request for a given url .
6270	Send sends an HTTP request and returns a server response .
6271	Check returns true if given string matches stored .
6272	Make makes new random token .
6273	GetLogs returns back end log paginated .
6274	AuthClient verifies password for a given client key .
6275	StartSession creates a new client session .
6276	UpdateSession updates and optionally stops the current client session .
6277	OfferingMessage returns new Offering message
6278	ValidMsg if is true then offering message corresponds to an offer template scheme .
6279	NewClient initializing Bugsnag client . Bugsnag client that automatic error sender to remote server . We use this service to collect anonymous information about the error and panic . Service is activated if exist entry key = error . sendremote and value = true in the database settings table .
6280	PanicHunter catches panic in case of an enabled reporter .
6281	ParseRequest parses request handling possible errors .
6282	save reads the applied ipvsadm rules from the host and saves them as i . Services
6283	NewClient returns a new Client .
6284	ParseRate is a helper function to get all the Rate info
6285	Sets the output path for generated snapshots .
6286	Update global Tracer configuration .
6287	Sets the executable path for the tracer .
6288	Sets the output path for generated snapshots . The directory will be created with the specified permission bits if it does not already exist . If perm is 0 a default of 0755 will be used .
6289	Sets the input and output pipes for the tracer . Stdout is not redirected ; it is instead passed to the tracer s Put command .
6290	Append to an option with given prefix
6291	MarshalRaw copies the raw bytes to the buffer without a size prefix or padding . This is suitable for appending data already in XDR format from another source .
6292	MarshalString appends the string to the buffer with a size prefix and correct padding .
6293	MarshalString appends the bytes to the buffer with a size prefix and correct padding .
6294	MarshalString appends the bool to the buffer as an uint32 .
6295	MarshalString appends the uint32 to the buffer .
6296	MarshalString appends the uint64 to the buffer .
6297	ElementSizeExceeded returns an error describing the violated size constraint . This function is used by the generated marshalling code .
6298	Return first character position where the character has to be escaped
6299	Return first character position where the character has to be decoded
6300	Returns a new decoder . Data will be read from r and decoded according to enc .
6301	Register registers a constructor function with the DI container
6302	MustRegister is a helper that calls Register and panics if it returns an error
6303	Create creates an instance of the type of the given parameter
6304	cachedCreateFromType creates an instance of the given type
6305	NewDependencyInjector returns a new DependencyInjector
6306	NewServiceContainer returns a new ServiceContainer
6307	add the prefix when providing urls
6308	Prefix returns an AssetPipeline that prefixes URLs with the given string
6309	ServeHTTP handles a http request
6310	getResponse executes the specified controller s method using reflection and returns the response object
6311	isValid checks that the controller and method specifies will sucessfully execute if getResponse is called on it
6312	NewHandler creates a ControllerHandler from the factory and methodName
6313	Handler handles functions of type GoannaHandlerFunc
6314	SetRequest injects a request into the controller
6315	Session returns the session for the current request
6316	RenderView renders a template string using the provided template and vars struct and returns the rendered tamplate
6317	RenderView renders a template using the provided template and vars struct and returns the rendered tamplate
6318	RedirectRoute returns a RedirectResponse to the route
6319	UrlFor is helper function for controllers
6320	CookieValue returns the value of the named cookie
6321	BodyData returns the full request body
6322	QueryValue returns the value in the GET query string
6323	FormValueOrDefault returns the result of Request . FormValue and if the result is empty returns the default string
6324	UrlValue returns whether the request is PATCH
6325	Contains returns true if any string in substrs is within s
6326	RemoveStringsFromString removes any string in substrs from s
6327	Map returns a slice containing all the elements of ss after applying the callback function to each one
6328	Equal returns a boolean reporting whether a == b
6329	Uniq returns a slice containing the unique strings found in items
6330	NewCookieSigner returns a new CookieSigner using the given key
6331	EncodeCookie signs and encodes the cookie
6332	DecodeCookie verifies the signature and decodes the value into the cookie
6333	DecodeValue validates and decodes a cookie value
6334	EncodeValue signs and encodes a cookie value
6335	ServeHTTP records the time for a request and sends the result to statsd
6336	NewSprocketsServer creates a Sprockets asset pipeline
6337	Keys must be at maximum 250 bytes long ASCII and not contain whitespace or control characters .
6338	stop the stopwatch
6339	Function decorator to monitor the execution of an anonymous function returns an array of the returned Values
6340	Function decorator to monitor a reflected function
6341	LogRequest logs a goanna request
6342	CommonLogHandler returns a handler that serves HTTP requests If a logger is not provided stdout will be used
6343	ServeHTTP logs the request and response data to Common Log Format
6344	Extract username from the request url
6345	UrlFor returns the relative URL for the route name
6346	UrlFor returns the avsolute URL for the route name . UrlBase is used for the URL Host and Scheme
6347	Parse parses the JSON - encoded data and stores the result into the value pointed at by c . Panics if unsuccessful
6348	LoadFromEnv iterates through a struct s fields and tries to find matching environment variables . Returns a map of environment key and values that were successfully set into the struct
6349	RegexPath returns a handler that serves HTTP requests with the first match of the the given regex from the request URL s Path and invoking the handler h . RegexPath handles a request for a path that doesn t match by replying with an HTTP 404 not found error .
6350	CacheControl decorates a handler and adds Cache - Control headers
6351	transform YAML to JSON
6352	DiscoverWalk will make HTTPS requests to find discovery meta tags and optionally will use HTTP if insecure is set . Based on the response of the discoverFn it will continue to recurse up the tree .
6353	DiscoverEndpoints will make HTTPS requests to find the ac - discovery meta tags and optionally will use HTTP if insecure is set . It will not give up until it has exhausted the path or found an image discovery .
6354	JSONFieldsFromStruct returns the names of JSON fields associated with the given struct . Returns nil if v is not a struct
6355	StructFieldFromJSONName returns the struct field name on the given struct value . Empty value means the field is either not public or does not exist . This can be used to map JSON field names to actual struct fields .
6356	Enumerate lists each word in the Dictionary alphabetically .
6357	Release returns the message to the pool for re - use .
6358	Wrap returns an error that wraps err optionally annotating with the message text .
6359	causer detects whether e wraps another error and if so returns an Error that also implements the Causer interface .
6360	From creates a new context based on ctx . See the Context example .
6361	With returns a context . Context with the keyvals attached .
6362	Format implements the fmt . Formatter interface . If the context is printed with % + v then it prints using the String method of the wrapped context .
6363	NewWriter creates writer that logs messages to out . If the output writer is a terminal device the output will be formatted for improved readability .
6364	Levels returns a list of levels and their associated actions .
6365	SetLevel sets an individual level and its associated display effect .
6366	Suppress instructs the writer to suppress any message with the specified level .
6367	IsSuppressed reports true if level should be suppressed .
6368	Handle registers a handler that will be called for every logging event . The function receives a message which is a structured representation of the log message text . This function is useful for registering handlers that send log information to external sources .
6369	SetOutput sets the output destination for log messages .
6370	Enumerate lists the items in a Directory
6371	All tests whether or not all items present in an Enumerable meet a criteria .
6372	All tests whether or not all items present meet a criteria .
6373	Any tests an Enumerable to see if there are any elements present .
6374	Anyp tests an Enumerable to see if there are any elements present that meet a criteria .
6375	AsEnumerable allows for easy conversion of a slice to a re - usable Enumerable object .
6376	First retrieves just the first item in the list or returns an error if there are no elements in the array .
6377	Merge takes the results of this Enumerator and others and funnels them into a single Enumerator . The order of in which they will be combined is non - deterministic .
6378	ParallelSelect creates an Enumerable which will use all logically available CPUs to execute a Transform .
6379	ParallelSelect will execute a Transform across all logical CPUs available to the current process .
6380	Reverse returns items in the opposite order it encountered them in .
6381	Select creates a reusable stream of transformed values .
6382	Select iterates over a list and returns a transformed item .
6383	SelectMany allows for unfolding of values .
6384	SelectMany allows for flattening of data structures .
6385	Single retreives the only element from a list or returns nil and an error .
6386	Singlep retrieces the only element from a list that matches a criteria . If no match is found or two or more are found Singlep returns nil and an error .
6387	Skip creates a reusable stream which will skip the first n elements before iterating over the rest of the elements in an Enumerable .
6388	splitN creates N Enumerators each will be a subset of the original Enumerator and will have distinct populations from one another .
6389	Take retreives just the first n elements from an Enumerable .
6390	Take retreives just the first n elements from an Enumerator .
6391	TakeWhile creates a reusable stream which will halt once some criteria is no longer met .
6392	TakeWhile continues returning items as long as criteria holds true .
6393	Tee creates two Enumerators which will have identical contents as one another .
6394	ToSlice places all iterated over values in a Slice for easy consumption .
6395	Where creates a reusable means of filtering a stream .
6396	Where iterates over a list and returns only the elements that satisfy a predicate .
6397	ReleaseBuffer returns a buffer to the pool to be re - used .
6398	NewStack instantiates a new FILO structure .
6399	Enumerate peeks at each element in the stack without mutating it .
6400	IsEmpty tests the Stack to determine if it is populate or not .
6401	Push adds an entry to the top of the Stack .
6402	Pop returns the entry at the top of the Stack then removes it .
6403	Peek returns the entry at the top of the Stack without removing it .
6404	Size returns the number of entries populating the Stack .
6405	NewLinkedList instantiates a new LinkedList with the entries provided .
6406	AddBack creates an entry in the LinkedList that is logically at the back of the list .
6407	Enumerate creates a new instance of Enumerable which can be executed on .
6408	Get finds the value from the LinkedList . pos is expressed as a zero - based index begining from the front of the list .
6409	IsEmpty tests the list to determine if it is populate or not .
6410	Length returns the number of elements present in the LinkedList .
6411	PeekBack returns the entry logicall stored at the back of the list without removing it .
6412	PeekFront returns the entry logically stored at the front of this list without removing it .
6413	RemoveFront returns the entry logically stored at the front of this list and removes it .
6414	RemoveBack returns the entry logically stored at the back of this list and removes it .
6415	Sort rearranges the positions of the entries in this list so that they are ascending .
6416	Sorta rearranges the position of string entries in this list so that they are ascending .
6417	Sorti rearranges the position of integer entries in this list so that they are ascending .
6418	String prints upto the first fifteen elements of the list in string format .
6419	Swap switches the positions in which two values are stored in this list . x and y represent the indexes of the items that should be swapped .
6420	merge takes two sorted lists and merges them into one sorted list . Behavior is undefined when you pass a non - sorted list as left or right
6421	split breaks a list in half .
6422	Add places an item at the back of the Queue .
6423	Enumerate peeks at each element of this queue without mutating it .
6424	IsEmpty tests the Queue to determine if it is populate or not .
6425	Length returns the number of items in the Queue .
6426	Next removes and returns the next item in the Queue .
6427	Peek returns the next item in the Queue without removing it .
6428	ToSlice converts a Queue into a slice .
6429	EnableVirtualTerminalProcessing configures the terminal to accept ANSI sequences . This is a no - op for all operating systems other than Windows .
6430	unquote the input . If possible the unquoted value points to the same backing array as input . Otherwise it points to buf . The remainder is the unused portion of buf .
6431	countScalars returns the count of items in input up to but not including the first non - scalar item . A scalar is a single value item ie not a keyvalser .
6432	IsTerminal returns true if the writer is a terminal .
6433	Add appends an entry to the logical end of the List .
6434	AddAt injects values beginning at pos . If multiple values are provided in entries they are placed in the same order they are provided .
6435	Enumerate lists each element present in the collection
6436	Get retreives the value stored in a particular position of the list . If no item exists at the given position the second parameter will be returned as false .
6437	IsEmpty tests to see if this List has any elements present .
6438	Length returns the number of elements in the List .
6439	Remove retreives a value from this List and shifts all other values .
6440	Set updates the value stored at a given position in the List .
6441	String generates a textual representation of the List for the sake of debugging .
6442	Swap switches the values that are stored at positions x and y
6443	MarshalText implements the TextMarshaler interface .
6444	UnmarshalText implements the TextUnmarshaler interface .
6445	repl replaces % directives with right time
6446	Format return string with % directives expanded . Will return error on unknown directive .
6447	logName returns a new log file name containing tag with start time t and the name for the symlink for tag .
6448	Monotonic returns a time duration from some fixed point in the past .
6449	set sets the value of the severity .
6450	Set is part of the flag . Value interface .
6451	set sets the value of the Level .
6452	match reports whether the file matches the pattern . It uses a string comparison if the pattern contains no metacharacters .
6453	match reports whether the file path matches the regexp .
6454	match reports whether the specified file and line matches the trace location . The argument file name is the full path not the basename specified in the flag .
6455	NewLogger creates a new logger . name is a non - empty string that appears in the names of log files to distinguish between separate instances of the logger writing to the same directory . skip is the number of stack frames to skip in order to reach the call point to be logged . 0 will log the caller of the logging methods 1 their caller etc .
6456	logDir if non - empty write log files to this directory .
6457	SetLogToStderr sets the flag that if true logs to standard error instead of files
6458	SetAlsoLogToStderr sets the flag that if true logs to standard error as well as files
6459	setVState sets a consistent state for V logging . A nil value for modules or filepaths will result in that filter not being changed . l . mu is held .
6460	getBuffer returns a new ready - to - use buffer .
6461	putBuffer returns a buffer to the free list .
6462	output writes the data to the log files and releases the buffer .
6463	timeoutFlush calls Flush and returns when it completes or after timeout elapses whichever happens first . This is needed because the hooks invoked by Flush may deadlock when glog . Fatal is called from a hook that holds a lock .
6464	stacks is a wrapper for runtime . Stack that attempts to recover the data for all goroutines .
6465	exit is called if there is trouble creating or writing log files . It flushes the logs and exits the program ; there s no point in hanging around . l . mu is held .
6466	rotateFile closes the syncBuffer s file and starts a new one .
6467	createFiles creates all the log files for severity from sev down to infoLog . l . mu is held .
6468	flushDaemon periodically flushes the log file buffers .
6469	lockAndFlushAll is like flushAll but locks l . mu first .
6470	flushAll flushes all the logs and attempts to sync their data to disk . l . mu is held .
6471	Add a new operation to the bundle . The operation will be invoked with a context that will be cancelled if any other operation fails or has already failed .
6472	Wait for all previously - added operations to complete . Return nil if all operations succeeded . Otherwise return the first error . Add must not be called concurrently with or after Join .
6473	Create a bundle whose operations are fed a context inheriting from the given parent context which must be non - nil . The bundle must eventually be joined with Join .
6474	Expand until there are no more expansions to do
6475	CacheFunc accepts two parameters first is the http . HandlerFunc which you want to cache its result the second is optional the cache Entry s expiration duration if the expiration < = 2 seconds then expiration is taken by the cache - control s maxage header returns an http . HandlerFunc which you can use as your default router or per - route handler All type of responses are cached templates json text anything . You CAN NOT add validators with this function
6476	CacheFasthttp accepts two parameters first is the fasthttp . RequestHandler which you want to cache its result the second is optional the cache Entry s expiration duration if the expiration < = 2 seconds then expiration is taken by the cache - control s maxage header returns a fhttp . Handler with a ServeHTTP which is the fasthttp . RequestHandler which you can use as your default router or per - route handler All type of responses are cached templates json text anything . You can add validators with this function
6477	CacheFasthttpFunc accepts two parameters first is the fasthttp . RequestHandler which you want to cache its result the second is optional the cache Entry s expiration duration if the expiration < = 2 seconds then expiration is taken by the cache - control s maxage header returns a fasthttp . RequestHandler which you can use as your default router or per - route handler All type of responses are cached templates json text anything . You CAN NOT add validators with this function
6478	ContentType returns a valid content type
6479	ServeHTTP serves the cache Service to the outside world it is used only when you want to achieve something like horizontal scaling it parses the request and tries to return the response with the cached body of the requested cache key server - side function
6480	the actual work is done on the handler . go here we just provide a helper for the main package to create an http . Server and serve a cache remote service without any user touches New returns a http . Server which hosts the server - side handler for the remote cache service . it doesn t listens to the server
6481	AcquireResponseRecorder returns a ResponseRecorder
6482	ReleaseResponseRecorder releases a ResponseRecorder which has been previously received by AcquireResponseRecorder
6483	Claim returns true if incoming request can claim for a cached handler the original handler should run as it is and exit
6484	Rule sets the ruleset for this handler . returns itself .
6485	Reset called each time the entry is expired and the handler calls this after the original handler executed to re - set the response with the new handler s content result
6486	NoCache called when a particular handler is not valid for cache . If this function called inside a handler then the handler is not cached .
6487	ClientOAuth instantiates ClientOAuthAuthentication with the client OAuth tokens
6488	Client OAuth authentication requires us to attach an unexpired OAuth token to the request header
6489	ApiKeyAuth instantiates ApiKeyAuthentication with the API key & secret
6490	API Key + Secret authentication requires a request header of the HMAC SHA - 256 signature of the message as well as an incrementing nonce and the API key
6491	ServiceOAuth instantiates ServiceOAuthAuthentication with the coinbase certificate file
6492	Service OAuth authentication requires no additional headers to be sent . The Coinbase Public Certificate is set as a TLS config in the http . Client
6493	OAuthService Instantiates OAuth Struct in order to send service related OAuth requests
6494	CreateAuthorizeUrl create the Authorize Url used to redirect users for coinbase app authorization . The scope parameter includes the specific permissions one wants to ask from the user
6495	RefreshTokens refreshes a users existing OAuth tokens
6496	NewTokens generates new tokens for an OAuth user
6497	NewTokensRequest generates new tokens for OAuth user given an http request containing the query parameter code
6498	Request sends a request with params marshaled into a JSON payload in the body The response value is marshaled from JSON into the specified holder struct
6499	CreateRequest formats a request with all the necessary headers
6500	executeRequest takes a prepared http . Request and returns the body of the response If the response is not of HTTP Code 200 an error is returned
6501	simulateRequest simulates a request by returning a sample JSON from file
6502	ApiKeyClient instantiates the client with ApiKey Authentication
6503	OAuthClient instantiates the client with OAuth Authentication
6504	Get sends a GET request and marshals response data into holder
6505	GetBalance returns current balance in BTC
6506	GetAllAddresses returns bitcoin addresses associated with client account
6507	GenerateReceiveAddress generates and returns a new bitcoin receive address
6508	SendMoney to either a bitcoin or email address
6509	RequestMoney from either a bitcoin or email address
6510	ResendRequest resends a transaction request referenced by id
6511	CancelRequest cancels a transaction request referenced by id
6512	CompleteRequest completes a money request referenced by id
6513	CreateButton gets a new payment button including EmbedHtml as a field on button struct
6514	CreateOrderFromButtonCode creates an order for a given button code
6515	CreateUser creates a new user given an email and password
6516	Buy an amount of BTC and bypass rate limits by setting agreeBtcAmountVaries to true
6517	GetContacts gets a users contacts
6518	GetCurrencies gets all currency names and ISO s
6519	GetExchangeRates gets the current exchange rates
6520	GetExchangeRate gets the exchange rate between two specified currencies
6521	GetTransactions gets transactions associated with an account
6522	GetOrders gets orders associated with an account
6523	GetTransfers get transfers associated with an account
6524	GetBuyPrice gets the current BTC buy price
6525	GetSellPrice gets the current BTC sell price
6526	GetTransaction gets a particular transaction referenced by id
6527	GetOrder gets a particular order referenced by id
6528	GetUser gets the user associated with the authentication
6529	NewSerialDispatcher creates a new PrallelDispatcher with the given handlers
6530	AppendHandlers implements Dispatcher . AppendHandlers
6531	DispatchOptional implements Dispatcher . DispatchOptional
6532	NewParallelDispatcher creates a new PrallelDispatcher with the given handlers
6533	ReleaseMsg releases a buffer
6534	ReleaseBuffer puts the given byte array back into the appropriate global buffer pool based on its capacity .
6535	close is the internal close function called by ContextCloser . Close
6536	Write writes data net . Conn style
6537	Accept waits for and returns the next connection to the listener .
6538	AddDialer adds a sub - dialer usable by this dialer . Dialers added first will be selected first based on the address .
6539	returns dialer that can dial the given address
6540	rawConnDial dials the underlying net . Conn + manet . Conns
6541	MultiaddrProtocolsMatch returns whether two multiaddrs match in protocol stacks .
6542	MultiaddrNetMatch returns the first Multiaddr found to match network .
6543	Return non - array values
6544	Return array values
6545	buildParams takes the image options set by the user and turns them into command flags for wkhtmltoimage It returns an array of command flags .
6546	unsetenv is not available in mingw
6547	AssuanSend sends a raw Assuan command to gpg - agent
6548	NewData returns a new memory based data buffer
6549	NewDataFile returns a new file based data buffer
6550	NewDataBytes returns a new memory based data buffer that contains b bytes
6551	NewDataReader returns a new callback based data buffer
6552	NewDataWriter returns a new callback based data buffer
6553	NewDataReadWriter returns a new callback based data buffer
6554	NewDataReadWriteSeeker returns a new callback based data buffer
6555	Close releases any resources associated with the data buffer
6556	Name returns the associated filename if any
6557	NewCommand creates a new Livestatus command instance .
6558	Arg appends a new argument to the command .
6559	String returns a string representation of the Livestatus command .
6560	Columns returns the list of the record columns .
6561	Get returns an interface value for a specific column .
6562	GetBool returns a boolean value for a specific column .
6563	GetInt returns an integer value for a specific column .
6564	GetSlice returns a slice of interface value for a specific column .
6565	GetString returns a string value for a specific column .
6566	GetTime returns a time struct value for a specific column .
6567	ChangeContactModattr creates a new CHANGE_CONTACT_MODATTR Nagios command . This command changes the modified attributes value for the specified contact . Modified attributes values are used by Nagios to determine which object properties should be retained across program restarts . Thus modifying the value of the attributes can affect data retention . This is an advanced option and should only be used by people who are intimately familiar with the data retention logic in Nagios .
6568	ChangeContactModhattr creates a new CHANGE_CONTACT_MODHATTR Nagios command . This command changes the modified host attributes value for the specified contact . Modified attributes values are used by Nagios to determine which object properties should be retained across program restarts . Thus modifying the value of the attributes can affect data retention . This is an advanced option and should only be used by people who are intimately familiar with the data retention logic in Nagios .
6569	ChangeContactModsattr creates a new CHANGE_CONTACT_MODSATTR Nagios command . This command changes the modified service attributes value for the specified contact . Modified attributes values are used by Nagios to determine which object properties should be retained across program restarts . Thus modifying the value of the attributes can affect data retention . This is an advanced option and should only be used by people who are intimately familiar with the data retention logic in Nagios .
6570	ChangeCustomContactVar creates a new CHANGE_CUSTOM_CONTACT_VAR Nagios command . Changes the value of a custom contact variable .
6571	ChangeCustomHostVar creates a new CHANGE_CUSTOM_HOST_VAR Nagios command . Changes the value of a custom host variable .
6572	ChangeCustomSvcVar creates a new CHANGE_CUSTOM_SVC_VAR Nagios command . Changes the value of a custom service variable .
6573	ChangeHostCheckTimeperiod creates a new CHANGE_HOST_CHECK_TIMEPERIOD Nagios command . Changes the valid check period for the specified host .
6574	ChangeHostModattr creates a new CHANGE_HOST_MODATTR Nagios command . This command changes the modified attributes value for the specified host . Modified attributes values are used by Nagios to determine which object properties should be retained across program restarts . Thus modifying the value of the attributes can affect data retention . This is an advanced option and should only be used by people who are intimately familiar with the data retention logic in Nagios .
6575	ChangeSvcModattr creates a new CHANGE_SVC_MODATTR Nagios command . This command changes the modified attributes value for the specified service . Modified attributes values are used by Nagios to determine which object properties should be retained across program restarts . Thus modifying the value of the attributes can affect data retention . This is an advanced option and should only be used by people who are intimately familiar with the data retention logic in Nagios .
6576	DelAllSvcComments creates a new DEL_ALL_SVC_COMMENTS Nagios command . Deletes all comments associated with a particular service .
6577	DisablePassiveSvcChecks creates a new DISABLE_PASSIVE_SVC_CHECKS Nagios command . Disables passive checks for the specified service .
6578	DisableServiceFlapDetection creates a new DISABLE_SERVICE_FLAP_DETECTION Nagios command . Disables flap detection for the specified service .
6579	DisableSvcCheck creates a new DISABLE_SVC_CHECK Nagios command . Disables active checks for a particular service .
6580	DisableSvcEventHandler creates a new DISABLE_SVC_EVENT_HANDLER Nagios command . Disables the event handler for the specified service .
6581	DisableSvcFlapDetection creates a new DISABLE_SVC_FLAP_DETECTION Nagios command . Disables flap detection for the specified service .
6582	DisableSvcNotifications creates a new DISABLE_SVC_NOTIFICATIONS Nagios command . Disables notifications for a particular service .
6583	EnablePassiveSvcChecks creates a new ENABLE_PASSIVE_SVC_CHECKS Nagios command . Enables passive checks for the specified service .
6584	EnableSvcCheck creates a new ENABLE_SVC_CHECK Nagios command . Enables active checks for a particular service .
6585	EnableSvcEventHandler creates a new ENABLE_SVC_EVENT_HANDLER Nagios command . Enables the event handler for the specified service .
6586	EnableSvcFlapDetection creates a new ENABLE_SVC_FLAP_DETECTION Nagios command . Enables flap detection for the specified service . In order for the flap detection algorithms to be run for the service flap detection must be enabled on a program - wide basis as well .
6587	EnableSvcNotifications creates a new ENABLE_SVC_NOTIFICATIONS Nagios command . Enables notifications for a particular service . Notifications will be sent out for the service only if notifications are enabled on a program - wide basis as well .
6588	RemoveSvcAcknowledgement creates a new REMOVE_SVC_ACKNOWLEDGEMENT Nagios command . This removes the problem acknowledgement for a particular service . Once the acknowledgement has been removed notifications can once again be sent out for the given service .
6589	StartObsessingOverSvc creates a new START_OBSESSING_OVER_SVC Nagios command . Enables processing of service checks via the OCSP command for the specified service .
6590	StopObsessingOverSvc creates a new STOP_OBSESSING_OVER_SVC Nagios command . Disables processing of service checks via the OCSP command for the specified service .
6591	NewQuery creates a new Livestatus query instance .
6592	Columns selects which columns to retrieve .
6593	Filter appends a new filter to the query .
6594	And combines the n last filters into a new filter using a And operation .
6595	Negate negates the most recent filter .
6596	WaitObject specifies an object from the table to wait on . For hosts hostgroups servicegroups contacts and contactgroups tables this is simply the name of the object . For the services table it is the hostname and the service description separated by a space .
6597	WaitCondition appends a new wait condition to the query .
6598	WaitConditionNegate negates the most recent wait condition .
6599	WaitTrigger appends a new wait trigger to the query waiting for a specific event broker message to recheck condition .
6600	WaitTimeout sets the upper limit on the time to wait before executing the query .
6601	KeepAlive keeps the connection open to reuse for additional requests .
6602	ReadTimeout sets the connection timeout for read operations . Be careful when using a read timeout in conjunction with wait conditions . A value of 0 disables the timeout .
6603	String returns a string representation of the Livestatus query .
6604	NewClient creates a new Livestatus client instance .
6605	NewClientWithDialer creates a new Livestatus client instance using a provided network dialer .
6606	Exec executes a given Livestatus query .
6607	xtoi2 converts the next two hex digits of s into a byte . If s is longer than 2 bytes then the third byte must be e . If the first two bytes of s are not hex digits or the third byte does not match e false is returned .
6608	Mask returns the result of masking the address with mask .
6609	New returns a new OUI database loaded from the specified file .
6610	Lookup finds the OUI the address belongs to
6611	VendorLookup obtains the vendor organization name from the MAC address s .
6612	Contains reports whether the mac address belongs to the OUI
6613	Create a reader that limits the bandwidth of reads made from r according to the supplied throttler . Reads are assumed to be made under the supplied context .
6614	Create a bucket that limits the rate at which it calls the wrapped bucket using opThrottle and limits the bandwidth with which it reads from the wrapped bucket using egressThrottle .
6615	NewCmdWithRunner creates a new CmdWithRunner for the provided name and runner . Returns an error if the provided name is not a legal command name .
6616	MustNewCmdWithRunner returns the result of NewCmdWithRunner and panics in cases where the function returns an error .
6617	importBreakPaths returns a slice that contains the import paths before which a line breaks should be inserted .
6618	SelfProxyCmderSupplier returns a supplier that given a command re - invokes the current executable with a proxy version of the provided command .
6619	SupplierWithPrependedArgs returns a new Supplier that invokes the provided supplier and returns the result of calling RunnerWithPrependedArgs on the returned runner with the result of applying the provided argsFunc function to the provided command .
6620	selfCmder returns a Cmder that creates a command that re - invokes the currently running executable .
6621	CmderWithPrependedArgs returns a new Cmder that invokes the provided Cmder but always adds the provided prependedArgs before any user - supplied arguments . Note that if the runner being wrapped has a notion of prependedArgs itself those arguments will precede the prependedArgs provided in this method .
6622	NewSeeforRouter for creating a new instance of Seefor router
6623	Implementing http handler interface . This is a override of Router . ServeHTTP for handling middlewares
6624	Before is for adding middleware for running before routing
6625	After is for adding middleware for running after routing
6626	UseTimer set timer for meaturing endpoint performance . If timer is nil and no timer exists then a new timer will be created else existing timer will be returned . You can serve statistics internal using Timer as handler
6627	NewRouter return a new Router
6628	http Handler Interface
6629	Group takes a path which typically a prefix for an endpoint It will call callback function with a group router which you can add handler for different request methods
6630	findChild finds a child node that matches the given node It returns nil if no node found . This is to see if we already have a similar node registered
6631	insertChild registers given node in the route node tree If there is already a similar node it will not insert new node The returned node is always the registered one ie either newly registered or the old one
6632	Get returns a Counter for a route . If there is no entry it will create a new one . It will lock during creation
6633	For serving statistics
6634	Example how to use basic auth together with r2router
6635	NewGroupRouter return GroupRouter which is a helper to construct a group of endpoints such example could be API - version or different methods for an endpoint You should always use router . Group instead of using this directly
6636	Your own route middle wrapper
6637	Wrapper for http . HandlerFunc
6638	RectFromSphere returns the minimum rectangle that contains the circle of center c and radius r .
6639	CopyRect allocates and returns a new Rectangle that is the copy of r .
6640	Size returns r s width height and depth .
6641	Overlaps reports whether r and s have a non - empty intersection .
6642	String returns a string representation of r .
6643	Dx returns r s width .
6644	Dy returns r s height .
6645	In reports whether Rectangle r is contained in s .
6646	Approx returns true if x ~ = y
6647	ApproxEpsilon returns true if x ~ = y using provided epsilon value .
6648	SetXYZ sets the 3 components at once .
6649	Vec3Dist2DSqr derives the square of the distance between v1 and v2 on the xz - plane . The vectors are projected onto the xz - plane so the y - values are ignored .
6650	Vec3 methods Copy copies the 3 vector components into dst .
6651	Assign assign the component of v1 to v . v = v1
6652	Dist2D derives the distance between v and v2 on the xz - plane . The vectors are projected onto the xz - plane so the y - values are ignored .
6653	Dist2DSqr derives the square of the distance between v and v2 on the xz - plane . The vectors are projected onto the xz - plane so the y - values are ignored .
6654	Cross returns the cross product of two vectors . v x v1
6655	Dot2D derives the dot product of two vectors on the xz - plane . u . v The vectors are projected onto the xz - plane so the y - values are ignored .
6656	NewRay creates a new Ray having the o as origin and v as direction of the line .
6657	IntersectRect indicates wether the ray intersects with the rectangle b .
6658	SupportedFunc returns a function that checks if the server can support a specific request .
6659	NewSigner creates a new RSA backed Signer
6660	NewVerifier creates a new RSA backed Verifier
6661	Request makes a performs a new GDPR request .
6662	Status checks the status of an existing GDPR request .
6663	Cancel cancels an existing GDPR request .
6664	Discovery describes the remote OpenGDPR speciication .
6665	NewClient returns a new OpenGDPR client .
6666	Push pushes a new item on top of the stack .
6667	Pop removes the topmost item from the stack and return its value . If the stack is empty Pop returns nil .
6668	PopLast removes the bottommost item . PopLast does nothing if the stack does not contain at least 2 items .
6669	Peek returns the topmost item without removing it from the stack .
6670	PeekN returns at max the N topmost item without removing them from the stack .
6671	Vecf32 creates a Vec from float32 values .
6672	Veci creates a Vec from int values .
6673	Add returns the vector v + v2 .
6674	Sub returns the vector v - v2 .
6675	In reports whether p is in r .
6676	Len returns the vector s length .
6677	ApproxFuncEqual takes in a func that compares two floats and uses it to do an element - wise comparison of the vector to another . This is intended to be used with FloatEqualFunc
6678	Merge merges another HandlerMap into itself .
6679	respCode maps any successful request with a specific status code or returns 200 .
6680	NewServer returns a server type that statisfies the http . Handler interface .
6681	Callback sends the CallbackRequest type to the configured StatusCallbackUrl . If it fails to deliver in n attempts or the request is invalid it will return an error .
6682	ErrNotFound indicates a request could not be found by the processor .
6683	ErrUnsupportedRequestType indicates the processor cannot fullfil a request for the given RequestType .
6684	ErrUnsupportedIdentity indicates the processor does not support the given identity type .
6685	ErrMissingRequiredField indicates the request is missing a required field .
6686	ErrInvalidRequestSignature indicates the payload could not be verified with the given signature .
6687	DatabaseServers retrieves a list of all database servers
6688	SnapshotDatabaseServer requests a snapshot of an existing database server .
6689	ResetPasswordForDatabaseServer requests a snapshot of an existing database server .
6690	Servers retrieves a list of all servers
6691	Server retrieves a detailed view of one server
6692	DestroyServer issues a request to destroy the server
6693	LockServer locks an existing server preventing it s destruction without first unlocking . Deprecated use LockResource instead .
6694	UnlockServer unlocks a previously locked existing server allowing destruction again . Deprecated use UnLockResource instead .
6695	SnapshotServer issues a request to snapshot the disk of an existing server . The snapshot is allocated an Image Id which is returned within an instance of Image .
6696	FullConsoleUrl returns the console url for the server with the token in the query string . Server needs a ConsoleUrl and ConsoleToken retrieved using ActivateConsoleForServer
6697	FirewallRule retrieves a detailed view of one firewall rule
6698	ServerGroups retrieves a list of all server groups
6699	ServerGroup retrieves a detailed view on one server group
6700	AddServersToServerGroup adds servers to an existing server group . The identifier parameter specifies the destination group . The serverIds paramater specifies the identifiers of the servers you want to add .
6701	MoveServersToServerGroup atomically moves servers from one group to another . The src parameter specifies the group to which the servers currently belong The dst parameter specifies the group to which you want to move the servers . The serverIds parameter specifies the identifiers of the servers you want to move .
6702	LoadBalancers retrieves a list of all load balancers
6703	LoadBalancer retrieves a detailed view of one load balancer
6704	AddNodesToLoadBalancer adds nodes to an existing load balancer .
6705	RemoveListenersFromLoadBalancer removes listeners to an existing load balancer .
6706	LockResource locks a resource against destroy requests . Support brightbox . CloudIP brightbox . Server brightbox . Image and brightbox . LoadBalancer
6707	FirewallPolicies retrieves a list of all firewall policies
6708	FirewallPolicy retrieves a detailed view of one firewall policy
6709	ApplyFirewallPolicy issues a request to apply the given firewall policy to the given server group .
6710	Extract is a method that attempts to interpret any Swauth authentication response as a AuthResult struct .
6711	ApiClients retrieves a list of all API clients
6712	ApiClient retrieves a detailed view of one API client
6713	ResetSecretForApiClient requests a snapshot of an existing api client
6714	Images retrieves a list of all images
6715	Image retrieves a detailed view of one image
6716	Accounts retrieves a list of all accounts associated with the client . API Clients are only ever associated with one single account . User clients can have multiple accounts through collaborations .
6717	Account retrieves a detailed view of one account
6718	CloudIPs retrieves a list of all cloud ips
6719	CloudIP retrieves a detailed view of one cloud ip
6720	MapCloudIPtoServer is a convenience method to map a Cloud IP to a server . First looks up the server to get the network interface id . Uses the first interface found .
6721	setAuthHeader sets the Swift Authorization header to r using the access token in t .
6722	Auth performs an authentication request for a Swauth - based user .
6723	Collaborations retrieves a list of all the current user s collaborations
6724	Collaboration retrieves a detailed view of one of the current user s collaborations
6725	DatabaseSnapshots retrieves a list of all database snapshot
6726	DatabaseSnapshot retrieves a detailed view of one database snapshot
6727	Scan ping to hosts in CIDR range .
6728	ToFile downloads the specified src URL to dest file using the specified FileOptions .
6729	ToWriter downloads the specified src URL to w writer using the specified Options .
6730	FromURL downloads the specified src URL to w writer using the specified Options .
6731	Return the time - based OTP for the given period .
6732	Return the data to be contained in a QR Code for this TOTP with the given label .
6733	Generate a Random secret encoded as a b32 string If the length is < = 0 a default length of 10 bytes will be used which will generate a secret of length 16 .
6734	DefaultPeerConfig returns the default config .
6735	PubKey returns peer s public key .
6736	OnStart implements BaseService .
6737	Send msg to the channel identified by chID byte . Returns false if the send queue is full after timeout specified by MConnection .
6738	WriteTo writes the peer s public key to w .
6739	Equals reports whenever 2 peers are actually represent the same node .
6740	FuzzConnAfter creates a new FuzzedConnection . Fuzzing starts when the duration elapses .
6741	NewMConnectionWithConfig wraps net . Conn and creates multiplex connection with a config
6742	Catch panics usually caused by remote disconnects .
6743	Queues a message to be sent to channel .
6744	Queues a message to be sent to channel . Nonblocking returns true if successful .
6745	CanSend returns true if you can send more data onto the chID false otherwise . Use only as a heuristic .
6746	sendRoutine polls for packets to send from channels .
6747	Returns true if messages from channels were exhausted . Blocks in accordance to . sendMonitor throttling .
6748	Returns true if messages from channels were exhausted .
6749	Creates a new msgPacket to send . Not goroutine - safe
6750	Writes next msgPacket to w . Not goroutine - safe
6751	Handles incoming msgPackets . Returns a msg bytes if msg is complete . Not goroutine - safe
6752	We only fill in the first 20 bytes with ripemd160
6753	increment nonce big - endian by 1 with wraparound .
6754	threadsafe list of peers .
6755	Accept connections and pass on the channel
6756	NewAddrBook creates a new address book . Use Start to begin processing asynchronous address updates .
6757	OnStart implements Service .
6758	RemoveAddress removes the address from the book .
6759	Returns false if file does not exist . Panics if file is corrupt .
6760	Save saves the book .
6761	Adds ka to old bucket . Returns false if it couldn t do it cuz buckets full .
6762	Make space in the new buckets by expiring the really bad entries . If no bad entries are available we remove the oldest .
6763	Dial a list of seeds asynchronously in random order
6764	NewNetAddressStrings returns an array of NetAddress es build using the provided strings .
6765	NewNetAddressIPPort returns a new NetAddress using the provided IP and port number .
6766	Equals reports whether na and other are the same addresses .
6767	Dial calls net . Dial on the address .
6768	For IPv4 these are either a 0 or all bits set address . For IPv6 a zero address or one that matches the RFC3849 documentation address format .
6769	ReachabilityTo checks whenever o can be reached from na .
6770	NewPEXReactor creates new PEX reactor .
6771	OnStart implements BaseService
6772	Receive implements Reactor by handling incoming PEX messages .
6773	RequestPEX asks peer for more addresses .
6774	SendAddrs sends addrs to the peer .
6775	Increment or initialize the msg count for the peer in the CMap
6776	DecodeMessage implements interface registered above .
6777	NewReader returns a new Reader that reads from r .
6778	LogOnPanic logs the given panic and its stacktrace prefixing each line with the panic ID .
6779	Wrap returns an handler which proxies requests to the given handler but handles panics by logging the stack trace and returning a 500 Internal Server Error to the client if possible .
6780	Start creates a goroutine to handle the logging IO .
6781	New returns a new service - ready handler given an application handler . This stack application - level metrics debug endpoints panic recovery and request logging in that order .
6782	Wrap wraps an HTTP handler to check the contents of client certificates . If CheckCertificate returns true the request will be passed to the wrapped handler . If CheckCertificate returns false it will be passed to the InvalidHandler or if no InvalidHandler is specified will return an empty 403 response and log the rejected DN .
6783	GetString property .
6784	GetInt property .
6785	RegisterDriver registers driver with given names .
6786	Open creates pubsub hub connected to redis server .
6787	SendEvents streams events from specified channels as Server Sent Events packets
6788	Unmarshal message from byte array .
6789	Publish data to given channel .
6790	Subscribe adds new receiver of events for given channel .
6791	GetChannel gets or creates new pubsub channel .
6792	Removes given channel called by Channel . Close .
6793	Open creates pubsub hub connected to nats server .
6794	Publish message to given channels .
6795	Subscribe on given channels .
6796	IMPLEMENTATION MakeHub returns new instance of the pubsub hub .
6797	successive Fibonacci numbers .
6798	generates round robin indexes for a slice of length max starting from index start
6799	Dir returns the home directory for the executing user . An error is returned if a home directory cannot be detected .
6800	Ask asks cleverbot a question .
6801	InteractionCount gets the count of interactions that have happened between the bot and user . Returns - 1 if interactions_count is missing or parsing failed .
6802	TimeElapsed returns approximate duration since conversation started . Returns - 1 seconds if time_elapsed is not found or parsing failed .
6803	History returns an array of QApair of upto 100 interactions that have happened in Session .
6804	Bool looks up the value of a bool flag returns false if no bool flag exists
6805	String looks up the value of a string flag returns if no string flag exists
6806	Fail marks the task as having failed but continues execution .
6807	Failed checks if the task has failed
6808	Logf formats its arguments according to the format analogous to Printf .
6809	Error is equivalent to Log followed by Fail .
6810	Errorf is equivalent to Logf followed by Fail .
6811	Init initializes the Firebase client with a given root url and optional auth token . The initialization can also pass a mock api for testing purposes .
6812	Value returns the value of of the current Url .
6813	Child returns a populated pointer for a given path . If the path cannot be found a null pointer is returned .
6814	Push creates a new value under the current root url . A populated pointer with that value is also returned .
6815	Update performs a partial update with the given value at the specified path .
6816	Remove deletes the data at the given path .
6817	Rules returns the security rules for the database .
6818	SetRules overwrites the existing security rules with the new rules given .
6819	Call invokes the appropriate HTTP method on a given Firebase URL .
6820	SetTraceInfo sets the trace info for the trace . This is currently unused .
6821	Finish declares that this trace is complete . The trace should not be used after calling this method .
6822	ServeMetrics serves Prometheus metrics endpoint on the provided net . Listener Use for long - running services . For cli tools use PushMetrics instead .
6823	DumpMetrics returns the metrics prometheus would return when collected as a string for fun and testing
6824	NewEventLog returns an initialized EventLog with the given family and title .
6825	Printf formats its arguments with fmt . Sprintf and adds the result to the event log .
6826	Errorf is like Printf but it marks this event as an error .
6827	SetLogger replaces the default logger with a new one that writes to out has prefix and flags flag
6828	Inside the handler use traces to capture request specific events and timings and the el member to log service specific events - like failures
6829	TitleFromContext is a convenience function that returns the Trace s title from a context or an empty string if none exists
6830	NewContext returns a new context . Context and Trace with the given family and title . The trace will be stored in the context .
6831	New creates a new client with your personal API key .
6832	NewWithClient creates a new client with your personal API key and the given http Client
6833	Devices fetches a list of devices from PushBullet .
6834	Device fetches an device with a given nickname from PushBullet .
6835	PushNote sends a note to the specific device with the given title and body
6836	PushLink sends a link to the specific device with the given title and url
6837	PushSMS sends an SMS to the specific user from the device with the given title and url
6838	Me returns the user object for the pushbullet user
6839	Push pushes the data to a specific device registered with PushBullet . The data parameter is marshaled to JSON and sent as the request body . Most users should call one of PusNote PushLink PushAddress or PushList .
6840	PushNote pushes a note with title and body to a specific PushBullet device .
6841	PushNoteToChannel pushes a note with title and body to a specific PushBullet channel .
6842	PushLink pushes a link with a title and url to a specific PushBullet device .
6843	PushLinkToChannel pushes a link with a title and url to a specific PushBullet device .
6844	PushSMS sends an SMS message with pushbullet
6845	Subscription fetches an subscription with a given channel tag from PushBullet .
6846	PushNote sends a note to the specific Channel with the given title and body
6847	PushNote sends a link to the specific Channel with the given title url and body
6848	NewCachedLoader creates a Loader that will cache the provided namespace on initialization and return data from that cache on Get
6849	Import takes a json byte array and inserts the key value pairs into consul prefixed by the namespace
6850	Initialize loads the consul KV s from the namespace into cache for later retrieval
6851	Get fetches the raw config from cache
6852	MustGetString fetches the config and parses it into a string . Panics on failure .
6853	MustGetBool fetches the config and parses it into a bool . Panics on failure .
6854	MustGetInt fetches the config and parses it into an int . Panics on failure .
6855	MustGetDuration fetches the config and parses it into a duration . Panics on failure .
6856	NewRandomDNSBalancer will return a random balancer . DNS that looks up dns in consul .
6857	writeServiceToCache locks specifically to alleviate load on consul some additional lock time is preferable to extra consul calls
6858	Convert param string like param1 = value1 ; param2 = value2 to mesos . Labels
6859	SetClockSeq sets the clock sequence to the lower 14 bits of seq . Setting to - 1 causes a new sequence to be generated .
6860	Trace formats a given message according to given params to log with level Trace .
6861	Debug formats a given message according to given params to log with level Debug .
6862	Info formats a given message according to given params to log with level Info .
6863	Warn formats a given message according to given params to log with level Warn .
6864	Error formats a given message according to given params to log with level Error .
6865	Critical formats a given message according to given params to log with level Critical .
6866	Returns paste link string and nil if everything is ok
6867	Returns raw paste text
6868	ExecAndWait will execute the command using the given executor and wait until completion
6869	ExecutorName sets the ExecutorName
6870	Exe sets the Exe
6871	Args sets the Args
6872	Dir sets the Dir
6873	Env sets the Env
6874	Writers sets the Writers
6875	StdoutWriter sets the StdoutWriter
6876	StdoutPrefix sets the StdoutPrefix
6877	StderrWriter sets the StderrWriter
6878	StderrPrefix sets the StderrPrefix
6879	Build will validate the set properties and return a ExecStreamer
6880	MakeWidget creates a generic Widget structure .
6881	SetText sets the label caption . This will not be displayed immediately . SetText shall be called from queue context .
6882	AddLabel is a convenience function to add a new label to a window . It wraps the AddWidget call . AddLabel must be called from queue .
6883	printf prints into the backend buffer . This will not show immediately . printf shall be called from queue context .
6884	setCell sets the content of the window cell at the x and y coordinate . setCell shall be called from queue context .
6885	resize sets new x and y maxima . resize shall be called from queue context .
6886	render calls the user provided Render and than renders the widgets in the window .
6887	focusWidget focuses on the current widget . If focus is - 1 it ll focus on the first available widget . focusWidget shall be called from queue context .
6888	focusPrevious focuses on the previous available widget . focusPrevious shall be called from queue context .
6889	keyHandler routes event to proper widget . This is called from queue context so be careful to not use blocking calls .
6890	Color creates an ANSI compatible escape sequence that encodes colors and attributes .
6891	EscapedLen returns total length of all escape sequences in a given string .
6892	Unescape returns the unescaped string .
6893	init sets up all global variables and prepares ttk for use .
6894	initKeyHandler starts the internal key handler . Must be called with mutex held and as a go routine .
6895	Init switches the terminal to raw mode and commences managed window mode . This function shall be called prior to any ttk calls .
6896	Deinit switches the terminal back to cooked mode and it terminates managed window mode . Init must be called again if a switch is required again . Deinit shall be called on application exit ; failing to do so may leave the terminal corrupted . If that does happen typing reset on the shell usually fixes this problem .
6897	NewWindow creates a new window type .
6898	flush copies focused window backing store onto the physical screen . flush shall be called from queue context .
6899	focus on provided window . This will implicitly focus on a window widget that can have focus . Render and flush it onto the terminal . focus shall be called from queue context .
6900	resizeAndRender resizes a window and renders it .
6901	Panic application but deinit first so that the terminal will not be corrupt .
6902	Exit application but deinit first so that the terminal will not be corrupt .
6903	AddList is a convenience function to add a new list to a window . It wraps the AddWidget call . AddList must be called from queue .
6904	Append adds a line of text to the list . Append must be called from queue .
6905	Focus implements the interface . This is called from queue context so be careful to not use blocking calls .
6906	SetText sets the edit text . if end is set to true the cursor and text will be set to the end of the string . This will not be displayed immediately . SetText shall be called from queue context .
6907	AddEdit is a convenience function to add a new edit to a window . Capacity and width determine the maxima of the returned value . It wraps the AddWidget call . AddEdit must be called from queue .
6908	Used for user & password based authentication
6909	Start starts the session . At that point the authentication will be done .
6910	FetchEntity fetchs the given Identifiable from the server .
6911	SaveEntity saves the given Identifiable into the server .
6912	DeleteEntity deletes the given Identifiable from the server .
6913	FetchChildren fetches the children with of given parent identified by the given Identity .
6914	CreateChild creates a new child Identifiable under the given parent Identifiable in the server .
6915	AssignChildren assigns the list of given child Identifiables to the given Identifiable parent in the server .
6916	NextEvent will return the next notification from the backend as it occurs and will send it to the correct channel .
6917	String returns the string representation of the identity .
6918	NewPushCenter creates a new PushCenter .
6919	RegisterHandlerForIdentity registers the given EventHandler for the given Entity Identity . You can pass the bambou . AllIdentity as identity to register the handler for all events . If you pass a handler for an Identity that is already registered the previous handler will be silently overwriten .
6920	UnregisterHandlerForIdentity unegisters the given EventHandler for the given Entity Identity .
6921	HasHandlerForIdentity verifies if the given identity has a registered handler .
6922	Start starts the Push Center .
6923	Stop stops a running PushCenter .
6924	Logger returns the defaut Bambou logger .
6925	String returns the string representation of the FetchingInfo .
6926	NewClient creates a new API client .
6927	Post delivers a metrics snapshot to datadog
6928	MetricID takes a name and tags and generates a consistent metric identifier
6929	SplitMetricID takes a metric ID ans splits it into name and tags
6930	NewRateScale creates a new rate instruments with the given unit .
6931	Snapshot returns the number of values per second since the last snapshot and reset the count to zero .
6932	NewDeriveScale creates a new derive instruments with the given unit .
6933	Update update rate value based on the stored previous value .
6934	Snapshot returns a Distribution
6935	Update updates the current stored value .
6936	Snapshot returns the current value .
6937	New creates a new Registry without a background flush thread .
6938	Subscribe attaches a reporter to the Registry .
6939	Get returns an instrument from the Registry .
6940	Register registers a new instrument .
6941	Fetch returns an instrument from the Registry or creates a new one using the provided factory .
6942	Size returns the numbers of instruments in the registry .
6943	Tags returns global registry tags
6944	SetTags allows to set tags
6945	AddTags allows to add tags
6946	Close flushes all pending data to reporters and releases resources .
6947	New creates a new reporter .
6948	Metric appends a new metric to the reporter . The value v must be either an int64 or float64 otherwise an error is returned
6949	FilterBefore returns rows created before a provided key . It accepts a filter and result shaping arguments
6950	Set sets the environment key to value .
6951	SetStr sets environment variable from key = val string format .
6952	Get retrieves the environment variable key
6953	String returns key = val format of the environment variables . Each on a line .
6954	Add adds a value to the set .
6955	AddAll adds all values to the set distinctly .
6956	Remove removes value from the set if it exists in the set .
6957	RemoveAll removes all values from the set if they exist in the set .
6958	Contains check if value exists in the set .
6959	ContainsAll checks if all values exist in the set .
6960	ContainsFunc iterates all the items in the set and passes each to f . It returns true the first time a call to f returns true and false if no call to f returns true .
6961	Clear empties the set .
6962	Iterator returns a new Iterator to iterate through values in the set . Each call to this method creates a new Iterator . Therefore the returned Iterator should be assigned to a variable before usage . It is safe to create and use multiple Iterators in multiple goroutines .
6963	Items returns a slice of all items in the set . Modification to the returned slice does not affect the structure of the set . However any item in the set that is a pointer will be affected if modified .
6964	ItemsFunc returns slice of all items that when passed to f f returns true . Modification to the returned slice does not affect the structure of the set . However any item in the set that is a pointer will be affected if modified .
6965	If a holiday falls on a Saturday it is celebrated the preceding Friday ; if a holiday falls on a Sunday it is celebrated the following Monday .
6966	GetHolidays returns the holidays for the given ISO 3166 - 2 countryCode and year
6967	GetInt returns int value for the given key
6968	GetFloat returns float value for the given key
6969	GetBool returns bool value for the given key
6970	Exists checks if key exists
6971	getValue gets the raw value for a given key
6972	Load reads all the properties and creates GConfig representation . It loads config data based on passed in flags or environment variables . If none is defined it uses default values .
6973	Check if location of config or properties file is set in the env variable if no path is specified it will use the current directory
6974	New creates a new Reader . The filename is a list of mimetypes and extensions . If utf8 is true ; charset = utf - 8 will be added when setting http headers .
6975	Read a mimetype text file . Return a hash map from ext to mimetype .
6976	Get returns the mimetype or an empty string if no mimetype or mimetype source is found
6977	SetHeader sets the Content - Type for a given ResponseWriter and filename extension
6978	GetFileSize - gets the filesize of a given path
6979	ListenAndServe starts the Neptulon server . This function blocks until server is closed .
6980	SendRequest sends a JSON - RPC request through the connection denoted by the connection ID with an auto generated request ID . resHandler is called when a response is returned .
6981	SendRequestArr sends a JSON - RPC request through the connection denoted by the connection ID with array params and auto generated request ID . resHandler is called when a response is returned .
6982	Close closes the network listener and the active connections .
6983	wsHandler handles incoming websocket connections .
6984	SafeCreateS3Bucket creates an s3 bucket for storing files to an s3 - compatible blobstore
6985	NewWriter - get a new s3 writer
6986	NewReader - get a new s3 reader
6987	Delete - delete an s3 bucket
6988	CertAtuh is TLS client - certificate authentication . If successful certificate common name will stored with the key userid in session . If unsuccessful connection will be closed right away .
6989	Params reads request parameters into given object . Object should be passed by reference .
6990	Next executes the next middleware in the middleware stack .
6991	Result reads response result data into given object . Object should be passed by reference .
6992	ErrorData reads the error response data into given object . Object should be passed by reference .
6993	MiddlewareList list creates a single middlware callback from an array
6994	LogFactory - a log creator
6995	NewRouter creates a new router instance .
6996	Request adds a new request route registry .
6997	Middleware is the Neptulon middleware method .
6998	NotFound wraps http . NotFound
6999	NewMysqlDump - will initialize a mysqldump for local execution
7000	NewRemoteMysqlDump - will initialize a mysqldmp for remote execution
7001	Import - will import to mysql from the given reader
7002	Dump - will dump a mysql to the given writer
7003	NewRemoteExecutor - This method creates executor based on ssh it has concrete ssh reference
7004	Execute - Copy the output from a command to the specified io . Writer
7005	World is a handler
7006	Name is a handler
7007	NewPgDump - a pgdump object initialized for local fs
7008	NewPgRemoteDump - a pgdump initialized for remote fs
7009	Import - allows us to import a pgdmp file in the form of a reader
7010	New creates IrcText object and take your text as argument .
7011	SetFg sets foreground color
7012	SetBg sets background color
7013	HandlerBuilder can be used to create a scaffold . Handler based on a Handler
7014	LoggerWithPrefix appends given prefix to log strings .
7015	NewEncoder creates encoder
7016	Parser returns a parser based on the mime if none can be matched the default is returned
7017	Responder returns a responder based on the mime if none can be matched the default is returned
7018	NewErrorStatus creates an error that implements ErrorStatus based off a string
7019	ConvertErrorStatus creates an error that implements ErrorStatus based off an error
7020	Implement the io . Reader interface
7021	Gets the length of the entry block
7022	NewLager - constructor for a Logger object
7023	URLParts spliths a path into parts and caches it in the context
7024	URLPart returns a part of the url and caches it in the context
7025	StoreParam stores a variable in a context
7026	GetParam retrieves a param from a context
7027	Int32 returns param as int32
7028	UInt returns param as uint
7029	UInt32 returns param as uint32
7030	Float32 returns param as float32
7031	UploadFile - allows us to upload the contents of the given reader
7032	RemoveRemoteFile - get a file from a remote system and return a writecloser to it
7033	GetRemoteFile - get a file from a remote system and return a writecloser to it
7034	NewConn creates a new Conn object .
7035	RemoteAddr returns the remote network address .
7036	SendRequest sends a JSON - RPC request through the connection with an auto generated request ID . resHandler is called when a response is returned .
7037	SendRequestArr sends a JSON - RPC request through the connection with array params and auto generated request ID . resHandler is called when a response is returned .
7038	Close closes the connection .
7039	SendResponse sends a JSON - RPC response message through the connection .
7040	Send sends the given message through the connection .
7041	Receive receives message from the connection .
7042	Reuse an established websocket . Conn .
7043	startReceive starts receiving messages . This method blocks and does not return until the connection is closed .
7044	Reads the file given by path and returns a Pbo pointer and err ! = nil if no errors occurred
7045	NewReadWriteCloser - a fake readwritecloser constructor
7046	Read - satisfies reader interface
7047	Write - satisfies writer interface
7048	SafeRemoveSSH removes a file on a remote machine via an ssh client
7049	SafeCreateSSH creates a file creating parent directories if needed on a remote machine via an ssh client
7050	SafeCreate creates a file creating parent directories if needed
7051	HMAC is JSON Web Token authentication using HMAC . If successful token context will be store with the key userid in session . If unsuccessful connection will be closed right away .
7052	Scaffold creates a router and passes it to a platorm
7053	Route returns the subrouter for a pettern
7054	Group calls the specified function with the subrouter for the given pattern
7055	Platform routes the platform object to the given pattern
7056	Handle all methods with a given pattern
7057	Options handles OPTIONS methods with a given pattern
7058	Use attaches middleware to a route
7059	NotFound specifys a not found handler for a route
7060	AddHandlerBuilder adds a builder to construct handlers
7061	ServeErrorPage Implements ErrorHandler . ServeErrorPage
7062	GetErrorHandler gets the error handler from the context or returns the default
7063	SetErrorHandler returns Middleware that can be used to set the error handler
7064	SetErrorHandlerFunc returns Middleware that can be used to set the error handler
7065	Echo sends incoming messages back as is .
7066	UnmarshalBinary unmarshals a byte slice into a ConfigArg . If the byte slice does not contain enough data to form a valid ConfigArg or config string length is greater than the number of remaining bytes in b io . ErrUnexpectedEOF is returned . If config string length is greater than 1024 ErrorBadArgumentParameter is returned .
7067	ataIdentify performs an ATA identify request on rs using the argument values in r .
7068	ataRead performs an ATA 28 - bit or 48 - bit read request on rs using the argument values in r .
7069	ataWrite performs an ATA 28 - bit or 48 - bit write request on rs using the argument values in r .
7070	calculateLBA calculates a logical block address from the LBA array and 48 - bit flags from an ATAArg .
7071	MarshalBinary allocates a byte slice containing the data from a ReserveReleaseArg . If r . NMACs does not indicate the actual length of r . MACs or one or more hardware addresses are not exactly 6 bytes in length ErrorBadArgumentParameter is returned .
7072	UnmarshalBinary unmarshals a byte slice into a ReserveReleaseArg . If the byte slice does not contain enough bytes to form a valid ReserveReleaseArg or a hardware address is malformed io . ErrUnexpectedEOF is returned .
7073	MarshalBinary allocates a byte slice containing the data from an ATAArg . MarshalBinary never returns an error .
7074	New fixture instance that will work with the database
7075	FromYAML allows a fixture to be created from yaml input
7076	FromJSON allows a fixture to be created from json input
7077	MarshalBinary allocates a byte slice containing the data from a Directive . If d . MAC is not 6 bytes in length ErrorBadArgumentParameter is returned .
7078	MarshalBinary allocates a byte slice containing the data from a MACMaskArg . If m . DirCount does not indicate the actual length of m . Directives or a Directive is malformed ErrorBadArgumentParameter is returned .
7079	NewSendToLogger creates a logger from a go log .
7080	NewMulti creates a MultiLog
7081	outerLog is like outers outerLogs but the nem entry is created from the first BackLog in the list .
7082	PublishPort publish a container s port to the host .
7083	Name assign a name to the container .
7084	AddArgs appends arguments to Docker container .
7085	NewCORSHandler creates a new CORSHandler with default values .
7086	CreatePreflight creates HTTP routes that handles pre - flight requests .
7087	ServeHTTP handle a pre - flight request .
7088	Handle is a HTTP handler for CORS - able API .
7089	NewRandomSourceListSecure returns system provided source of random data besides of Raiqub Random source .
7090	Handle sends a record message to syslog Writer .
7091	Close closes an associated syslog Writer .
7092	date formant YYYY - MM - DD mininum date 0000 - 01 - 01 maximum date 9999 - 12 - 31
7093	Match processes the given string until it encounters a rune that doesn t match .
7094	Match processes the given string until it has its suffix in the next or encounters a rune that doesn t match .
7095	MatchRune simply calls mather . MatchRune
7096	Match against fixed length pattern .
7097	Alloc opens a DB if not openned yet . It adds a reference if already openned .
7098	Free decreases the reference count . It close the DB if the count reaches zero .
7099	Infof calls Logger . Infof method with provided arguments .
7100	Warningf calls Logger . Warningf method with provided arguments .
7101	Errorf calls Logger . Errorf method with provided arguments .
7102	Fatalf calls Logger . Criticalf method with provided arguments .
7103	ToPhone will format the provided string as a Phone Number . Only supports US numbers currently .
7104	ToURL will format the provided string as a URL . HTTP and HTTPS are the only supported protocols at this time .
7105	ToSSN will format the provided string as a SSN .
7106	ToMorseCode will format the provided string in Morse Code .
7107	ToPirateSpeak will format the provided string in Pirate Speak .
7108	ToIRSA will format the provided string in IRSA . International Radio - Telephony Spelling Alphabet
7109	newDefaultLogger creates new logger that writes log messages to standard output in DEBUG level . This logger is automatically created and this function needs to be called only if all loggers were removed and default logger needs recreating .
7110	Logf logs provided message with formatting with default logger .
7111	Sections returns the list of sections in the file .
7112	Options returns the list of options in a given section .
7113	OptionMap returns the map option = > value for a given section .
7114	Comments returns the list of comments in a given section . For the empty string returns the file comments .
7115	AddComments appends the comment to the list of comments for the section .
7116	Parse reads the given io . Reader and returns a parsed Config object .
7117	Write writes the sections and options to the io . Writer in INI format .
7118	Get gets the value from the specified section and key name or the empty string if either the section or the key is missing .
7119	Set sets a value for an option in a section . If the option exists it s value will be overwritten . If the option does not exist it will be added . If the section does not exist it will be added and the option added to it .
7120	Delete removes the option from the specified section .
7121	try to convert value to target type panic if fail
7122	Postpone value expiration time to current time added to its lifetime duration .
7123	Filter creates a new filter with rules r for l backend .
7124	Op is an operation in some field and with some value .
7125	ApplyRuleIf test if condition is true than apply rule . If condition is false do nothing return true .
7126	ApplyRuleIfElse test if condition is true than apply rule . If condition is false run else rule .
7127	AuthHandler is a HTTP request middleware that enforces authentication .
7128	HasBin check whether Docker binary is available .
7129	Run executes especified command on Docker . Returns ExternalCmdError on error .
7130	GetReader gets HTTP header value as defined by current instance from Request Header and sets to current instance .
7131	SetName sets header name of current instance .
7132	SetValue sets header value of current instance .
7133	SetWriter sets HTTP header as defined by current instance to ResponseWriter Header .
7134	encryptionKey returns the best candidate Key for encrypting a message to the given Entity .
7135	NewContentNegotiator creates a basic ContentNegotiator with out any attached encoders
7136	NewJsonXmlContentNegotiator creates a basic ContentNegotiator and attaches a JSON and an XML encoder to it .
7137	Negotiate inspects the request for the accept header and encodes the response appropriately .
7138	AddEncoder registers a mimetype and its encoder to be used if a client requests that mimetype
7139	getEncoder parses the Accept header an returns the appropriate encoder to use
7140	CanSign returns true if it s possible for a public key of the given type to sign a message .
7141	Various ways to sort the player standings using helper structs that implement different comparison methods .
7142	WaitFunc waits until specified function returns true .
7143	FormatDialAddress returns an address as expected by net . Dial .
7144	SetFromDocker parses port as provided by Docker and extract protocol and port number .
7145	Read fills specified byte array with random data . Always return parameter array length and no errors .
7146	readByte creates a single random byte .
7147	RecoverHandlerJson is a HTTP request middleware that captures panic errors and returns it as HTTP JSON response .
7148	DefaultServiceConfig provides a default configuration to create a new random service by best effort .
7149	NewService creates a new configured random service .
7150	RunLight creates a light instance of MongoDB image .
7151	initConfig reads in config file and ENV variables if set .
7152	HasExposedPorts returns whether current container has exposed ports .
7153	Inspect returns container configuration .
7154	Kill terminates current container process .
7155	NetworkNodes returns the network addresses and exposed ports of current container .
7156	Remove erases current container from Docker .
7157	WaitStartup blocks current thread until current container begins to listen exposed port .
7158	NewHandler returns new Handler instance .
7159	Handle increments Prometheus counter metrics based on record log level .
7160	NewCounter creates new Counter instance . Options value can be nil .
7161	Metrics retuns all Prometheus metrics that should be registered .
7162	Retrieve retrieves and processes the specified asset sources and returns them using a http . FileSystem interface .
7163	Compile retrieves and processes the specified asset sources and compiles them to the specified variable in the source file .
7164	Read meta - info at specified place
7165	Write meta - info to specified place
7166	Push header and body to stack . Returns new value of stack depth
7167	Pop one segment from tail of stack . Returns nil nil nil if depth is 0
7168	Peak of stack - get one segment from stack but not remove
7169	PeakHeader get only header part from tail segment from stack without remove
7170	IterateBackward - iterate over hole stack segment - by - segment from end to begining
7171	IterateForward - iterate over hole stack segment - by - segment from begining to end . If all segments iterated stack may be repaired
7172	Close backend stack file . If access is requried file will automatically reopened
7173	OpenStack - open or create stack
7174	NewStack - create new stack based on file
7175	NewSessionCache creates a new instance of SessionCache and defines a lifetime for sessions and a initial salt for random input .
7176	getInvalidTokenError gets the default error when an invalid or expired token is requested .
7177	Get gets the value stored by specified token .
7178	Add creates a new unique token and stores it into current SessionCache instance . The token creation will take at least 200 microseconds but could normally take 2 . 5 milliseconds . The token generation function it is built with security over performance .
7179	Delete deletes specified token from current SessionCache instance .
7180	Set store a value to specified token .
7181	NewClient creates a Client .
7182	connect opens a new connection to the server .
7183	writeMessage writes an IRC message to the connection .
7184	readMessage reads a line from the connection and parses it as an IRC message .
7185	Stop shuts down the client and cleans up . You must not send any messages on the send channel after calling this function .
7186	GetChannels retrieves the IRC channels the client is on .
7187	JsonWrite sets response content type to JSON sets HTTP status and serializes defined content to JSON format .
7188	JsonRead tries to read client sent content using JSON deserialization and writes it to defined object .
7189	VerifyKeySignature returns nil iff sig is a valid signature made by this public key of signed .
7190	Create a user
7191	Next invoke next route with the given ResponseWriter and Request
7192	ServeHTTP implement http . Handler interface
7193	UseHandler appends a Handler to the route .
7194	HandleMethod registers handler funcs with the given pattern and method .
7195	Handle registers handler funcs with the given pattern .
7196	Get registers handlers with the given pattern for GET and HEAD method
7197	Post registers handlers with the given pattern for POST method
7198	Put registers handlers with the given pattern for PUT method
7199	Patch registers handlers with the given pattern for PATCH method
7200	Delete registers handlers with the given pattern for DELETE method
7201	Options registers handlers with the given pattern for OPTIONS method
7202	NewSalter creates a new instance of Salter . It requires a list of sources of random data and optionally an input to salt next token .
7203	BToken generates an array of random bytes with length as specified by size parameter .
7204	Token generates a base - 64 string of random bytes with length as specified by size parameter .
7205	getRandomBytes gets secure random bytes .
7206	NewsItem related functions and methods Create a NewsItem
7207	Write logs an Debug message to a logger .
7208	Write logs an Info message to a logger .
7209	Write logs an Warning message to a logger .
7210	Write logs an Error message to a logger .
7211	GetLogger returns logger instance based on provided name . If logger does not exist error will be returned .
7212	RemoveLogger deletes logger from global logger registry .
7213	WaitForAllUnprocessedRecords blocks execution until all unprocessed log records are processed . Since this library implements async logging it is possible to have unprocessed logs at the moment when application is terminating . In that case log messages can be lost . This mehtods blocks execution until all log records are processed to ensure that all log messages are handled .
7214	run starts async log records processing .
7215	WaitForUnprocessedRecords block execution until all unprocessed log records for this logger are processed . In order to wait for processing in all loggers logging . WaitForAllUnprocessedRecords can be used .
7216	SetBufferLength sets length of buffer for accepting log records .
7217	AddHandler add new handler to current logger .
7218	ClearHandlers removes all handlers from current logger .
7219	SetLevel sets lower level that current logger will process .
7220	log creates log record and submits it for processing .
7221	Logf logs provided message with formatting .
7222	Log logs provided message .
7223	Emergencyf logs provided message with formatting in EMERGENCY level .
7224	Alertf logs provided message with formatting in ALERT level .
7225	Criticalf logs provided message with formatting in CRITICAL level .
7226	Errorf logs provided message with formatting in ERROR level .
7227	Warningf logs provided message with formatting in WARNING level .
7228	Noticef logs provided message with formatting in NOTICE level .
7229	Infof logs provided message with formatting in INFO level .
7230	Debugf logs provided message with formatting in DEBUG level .
7231	SetHandler reigsters the given handler that matches with any method .
7232	SetMethodHandler reigsters the given handler for the method .
7233	GetHandler returns a handler with given method .
7234	getChildEntry returns a child Entry that matches the given pattern string .
7235	MergePattern add entry patterns with given pattern strings . If a pattern already exists on the entry it adds remaining patterns to the existing entry .
7236	AddEntry add new child entry . Child entries are sorted irrespective of order they are added . Static patterns would be indexed ahead of match patterns .
7237	addPatterns adds entry children with the pattern strings .
7238	execPrefix simply see if the given urlStr has a leading pattern .
7239	traverse tries matches to child entries .
7240	getExecMatch returns ExecFunc with the given name and mather .
7241	MergeRoutes returns a slice with all routes returned by Routable objects .
7242	Debugln logs a line with a DEBUG prefix .
7243	Debugf logs a formatted line with a DEBUG prefix .
7244	Infof logs a formatted line with a VERBOSE prefix .
7245	Infoln logs a line with an INFO prefix .
7246	Infof logs a formatted line with an INFO prefix .
7247	Okln logs a line with an OK prefix .
7248	Okf logs a formatted line with an OK prefix .
7249	Fatalln logs a line with a FATAL prefix and exits the process with exit code 1 .
7250	Fatalf logs a formatted line with a FATAL prefix and exits the process with exit code 1 .
7251	ShouldDebug returns true if the given facility has debugging enabled .
7252	SetDebug enabled or disables debugging for the given facility name .
7253	Facilities returns the currently known set of facilities both those for which debug is enabled and those for which it is disabled .
7254	NewFacility returns a new logger bound to the named facility .
7255	removeNonDigits removes any non digit characters from the string .
7256	removeNonWordChars removes all non word characters .
7257	urlEncodeSpaces will replace spaces with %20 s
7258	random select will return a random selection from an int slice
7259	NewStdFormatter crete a new formatter .
7260	Get returns a HTTP handler which is a chain of middlewares and then the specified handler .
7261	parseMatcher returns matcher and name from the given pattern string .
7262	isMatchPattern see if given string is match pattern .
7263	routeSplitFunc is the SplitFunc to scan url pattern .
7264	SplitPath splits the url pattern .
7265	isNextSuffixPattern see next 2 patterns can be suffix matcher . If following two cases are both true it could possibly become a suffix matcher . 1 . the first pattern is a Matcher . 2 . the next pattern is a static pattern . If the first matcher can t match the first rune of the second static pattern next pattern should be a suffix matcher combined the two patterns .
7266	PeekNextPattern returns next entry pattern with offset size
7267	Player related functions and methods Create a player
7268	Push causes the Reader to start reading from a new io . Reader . When an EOF error is seen from the new io . Reader it is popped and the Reader continues to read from the next most recent io . Reader .
7269	Catering related functions and methods Create a Catering
7270	Tournaments related functions and methods
7271	Tournament related functions and methods Helpers
7272	Create a Tournament
7273	IndexOf looks for specified string into current slice .
7274	IndexOfIgnoreCase looks for specified string disregarding letter casing into current slice .
7275	NewCache creates a new instance of Cache and defines the default lifetime for new cached items .
7276	Count gets the number of cached values by current instance .
7277	Flush deletes any cached value into current instance .
7278	removeExpired remove all expired values from current Cache instance list . Returns the locking status of current instance .
7279	NewImage creates a new instance of Image .
7280	Exists check whether current Docker image is available .
7281	Pull retrieves current Docker image from Docker repository . Returns ExternalCmdError on error .
7282	Run creates a new Docker container as defined by current image and container template . Returns ExternalCmdError or UnexpectedOutputError on error .
7283	Setup check if Docker binary is available and pull current image from Docker repository in case it is not already available .
7284	Location related functions and methods Create a Location
7285	PortAt returns expose and publish port information at especified index .
7286	SplitPort splits port number and protocol name from Ports string .
7287	Priority returns a syslog . Priority representation of SyslogFacility .
7288	OK checks if SyslogFacility is valid .
7289	Format creates JSON struct from provided record and returns it .
7290	Open creates and opens a database at the given path . If the file does not exist then it will be created automatically . Passing in nil options will cause Bolt to open the database with the default options .
7291	Begin wraps bolt . DB . Begin .
7292	View wraps bolt . DB . View .
7293	CopyFile copies the entire database to file at the given path . A reader transaction is maintained during the copy so it is safe to continue using the database while a copy is in progress .
7294	CreateBucketIfNotExists creates a new bucket if it doesn t already exist . Returns an error if the bucket name is blank or if the bucket name is too long . The bucket instance is only valid for the lifetime of the transaction .
7295	Delete deletes a key .
7296	ForEach iterates over all key values of a folder .
7297	ForEach iterates over all key values of a folder decode non - nil values using gob .
7298	Put sets the value for a key in the transaction . If the key exist then its previous value will be overwritten . Supplied value must remain valid for the life of the transaction . Returns an error if the bucket was created from a read - only transaction if the key is blank if the key is too large or if the value is too large .
7299	Value tries to get a value from the transaction . If the key does not exist the f is not called and nil is return .
7300	Updates fetches the current value and updates to a new value . If a nil value is returned by f the item is deleted .
7301	Bucket retrieves a nested bucket by name . Returns nil if the bucket does not exist . The bucket instance is only valid for the lifetime of the transaction . folders can be empty in which case the b itself is sent to f .
7302	CreateBucketIfNotExists creates a new bucket if it doesn t already exist and returns a reference to it . Returns an error if the bucket name is blank or if the bucket name is too long . The bucket instance is only valid for the lifetime of the transaction .
7303	Delete removes a key from the bucket . If the key does not exist then nothing is done and a nil error is returned . Returns an error if the bucket was created from a read - only transaction .
7304	GobValue retrieves a value written by PutGob and decode it .
7305	NextSequence returns an autoincrementing integer for the bucket .
7306	Put sets the value for a key in the bucket . If the key exist then its previous value will be overwritten . Supplied value must remain valid for the life of the transaction . Returns an error if the bucket was created from a read - only transaction if the key is blank if the key is too large or if the value is too large .
7307	PutGob serialize v using gob and put it into the key .
7308	Drop clears the database
7309	HandleError prints provided error to stderr .
7310	Handle writes all provided log records to writer provided during creation .
7311	Handle appends message to Messages array .
7312	WaitPeerListening wait for specified peer be ready for new connections .
7313	NewEvent construct new event .
7314	Subscribe to events . It will return true if successfully subscribed means the handler haven t subscribed before .
7315	Unsubscribe handler from the bus . It will return false if the handler not subscribed .
7316	Publish an event .
7317	HandleOnly specific type of event .
7318	ContextWithPublisher constructs new context with bus .
7319	PublisherContext return the publisher .
7320	PublishNamedEvent which name infered from eventBody interface name .
7321	PublishEventContext publish event for given ctx .
7322	PublishNamedEventContext publish named event for given ctx . The name infered from eventBody interface name .
7323	String returns stirng representation of log level .
7324	UnmarshalJSON implements json . Unamrshaler interface .
